[
  {
    "owner": "sahilpanhotra",
    "repo": "makerkitdocs.git",
    "content": "TITLE: Creating and Indexing the Tickets Table - SQL\nDESCRIPTION: Defines enum types for ticket status and priority, then creates the `public.tickets` table with all relevant columns, constraints, defaults, and foreign key relationships. Also creates an index for faster account querying. Requires a PostgreSQL-compatible environment (e.g., Supabase), with the referenced `public.accounts` table already existing. Inputs: none directly, the script is run as a migration. Outputs: schema changes to the database. Limitations: Assumes functions like `gen_random_uuid()` and database extensions are available.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/database_4.md#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n-- public.ticket_status: enum type for ticket status\\ncreate type public.ticket_status as enum ('open', 'closed', 'resolved', 'in_progress');\\n\\n-- public.ticket_priority: enum type for ticket priority\\ncreate type public.ticket_priority as enum ('low', 'medium', 'high');\\n\\n/*\\n* Table: public.tickets\\n-- table for the support tickets\\n*/\\ncreate table if not exists public.tickets (\\n  id uuid primary key default gen_random_uuid(),\\n  account_id uuid not null references public.accounts(id) on delete cascade,\\n  title varchar(255) not null,\\n  category varchar(100) not null default 'general',\\n  assigned_to uuid references public.accounts(id) on delete set null,\\n  priority public.ticket_priority not null default 'medium',\\n  status public.ticket_status not null default 'open',\\n  customer_email varchar(255),\\n  resolution text,\\n  resolved_at timestamptz,\\n  resolved_by uuid references public.accounts(id) on delete set null,\\n  closed_at timestamptz,\\n  closed_by uuid references public.accounts(id) on delete set null,\\n  created_at timestamptz not null default now(),\\n  updated_at timestamptz not null default now()\\n);\\n\\n-- Indexes\\ncreate index ix_tickets_account_id on public.tickets(account_id);\n```\n\n----------------------------------------\n\nTITLE: Updating Task in Supabase with TypeScript\nDESCRIPTION: This function updates an existing task in Supabase. It takes a client and task object as parameters, and updates the task data in the tasks table based on the task ID.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/supabase_data_fetching_supabase_data_writing_tailwind_css_86.md#2025-04-22_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nexport function updateTask(\n  client: Client,\n  task: Partial<Task> & { id: number }\n) {\n  return client\n    .from(TASKS_TABLE)\n    .update({\n      name: task.name,\n      done: task.done,\n    })\n    .match({\n      id: task.id,\n    })\n    .throwOnError();\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Tasks by Organization ID from Firestore in TypeScript\nDESCRIPTION: Creates a custom hook to fetch tasks for a specific organization using Firestore queries. It demonstrates how to construct a query with constraints and use reactfire hooks.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/custom_fetch_fetching_data_firestore_making_api_requests_4.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useFirestore, useFirestoreCollectionData } from 'reactfire';\n\nimport {\n  collection,\n  CollectionReference,\n  query,\n  where,\n} from 'firebase/firestore';\n\nimport { Task } from '~/lib/tasks/types/task';\n\nfunction useFetchTasks(organizationId: string) {\n  const firestore = useFirestore();\n  const tasksCollection = 'tasks';\n\n  const collectionRef = collection(\n    firestore,\n    tasksCollection\n  ) as CollectionReference<WithId<Task>>;\n\n  const path = `organizationId`;\n  const operator = '==';\n  const constraint = where(path, operator, organizationId);\n  const organizationsQuery = query(collectionRef, constraint);\n\n  return useFirestoreCollectionData(organizationsQuery, {\n    idField: 'id',\n  });\n}\n\nexport default useFetchTasks;\n```\n\n----------------------------------------\n\nTITLE: Integrating Tickets Data Table in Next.js Page Component\nDESCRIPTION: This server-side Next.js page component fetches support tickets data using a Supabase client and renders the TicketsDataTable component. It handles pagination and search query parameters, demonstrating the integration of server-side data fetching with client-side rendering.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/realtime_updates_server_components_7.md#2025-04-22_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\nimport { use } from 'react';\n\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\nimport { PageBody, PageHeader } from '@kit/ui/page';\n\nimport { createTicketsService } from '~/lib/server/tickets/tickets.service';\n\nimport { TicketsDataTable } from './_components/tickets-data-table';\n\ninterface TicketsPageProps {\n  params: {\n    account: string;\n  };\n\n  searchParams: {\n    page?: string;\n    query?: string;\n  };\n}\n\nexport default function TicketsPage(props: TicketsPageProps) {\n  const client = getSupabaseServerClient();\n  const service = createTicketsService(client);\n\n  const page = Number(props.searchParams.page ?? '1');\n  const query = props.searchParams.query ?? '';\n\n  const { data, pageSize, pageCount } = use(\n    service.getTickets({\n      accountSlug: props.params.account,\n      page,\n      query,\n    }),\n  );\n\n  return (\n    <>\n      <PageHeader\n        title={'Support Tickets'}\n        description={\n          'Here is the list of the support tickets from your customers'\n        }\n      />\n\n      <PageBody>\n        <TicketsDataTable\n          pageIndex={page - 1}\n          pageCount={pageCount}\n          pageSize={pageSize}\n          data={data}\n        />\n      </PageBody>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a React Router Action with Intent Pattern (TypeScript / TSX)\nDESCRIPTION: This snippet provides the structure for an action handler in a React Router route file, using TypeScript. It handles server-side form submissions by parsing the request JSON using a schema and switching based on an 'intent' field, allowing multiple action types per route. Dependencies include Zod for schema validation, React Router, and Supabase client utilities. Inputs are arguments from React Router; outputs are results of action handlers or error responses. It supports robust, extendable mutations but requires strict schema definitions.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/creating_your_own_cms_client_keystatic_wordpress_62.md#2025-04-22_snippet_14\n\nLANGUAGE: TSX\nCODE:\n```\nexport const action = async (args: Route.ActionArgs) => {\\n  // Parse incoming data\\n  const json = SomeSchema.parse(await args.request.json());\\n\\n  // Get Supabase client\\n  const client = getSupabaseServerClient(args.request);\\n\\n  // Perform different operations based on the \\\"intent\\\"\\n  switch (json.intent) {\\n    case 'some-action':\\n      return doSomething({ client, data: json.payload });\\n\\n    default:\\n      return new Response('Invalid action', { status: 400 });\\n  }\\n};\n```\n\nLANGUAGE: TSX\nCODE:\n```\n// In your route file\\nexport const action = async (args: Route.ActionArgs) => {\\n  const json = ActionsSchema.parse(await args.request.json());\\n  const client = getSupabaseServerClient(args.request);\\n\\n  switch (json.intent) {\\n    case 'delete-account':\\n      return deletePersonalAccountAction({ client, otp: json.payload.otp });\\n\\n    case 'update-profile':\\n      return updateProfileAction({ client, data: json.payload });\\n\\n    default:\\n      return new Response('Invalid action', { status: 400 });\\n  }\\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Hook for API Mutation using SWR\nDESCRIPTION: Defines a custom React hook `useTransferOrganizationOwnership` that utilizes `useSWRMutation` and a custom `useApiRequest` hook to perform a PUT request for transferring organization ownership. It handles fetching logic, parameters (`membershipId`), specifies the API path, method, and body, and includes an `onSuccess` callback to refresh data.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/auth_setup_authentication_blog_16.md#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport useSWRMutation from 'swr/mutation';\n\nimport configuration from '~/configuration';\nimport useApiRequest from '~/core/hooks/use-api';\nimport useRefresh from '~/core/hooks/use-refresh';\n\ninterface Params {\n  membershipId: number;\n}\n\nconst path = configuration.paths.api.organizations.transferOwnership;\n\nfunction useTransferOrganizationOwnership() {\n  const fetcher = useApiRequest<void, Params>();\n  const refresh = useRefresh();\n  const key = ['organizations', 'transfer-ownership'];\n\n  return useSWRMutation(\n    key,\n    (_, { arg }: { arg: Params }) => {\n      return fetcher({\n        path,\n        method: `PUT`,\n        body: {\n          membershipId: arg.membershipId,\n        },\n      });\n    },\n    {\n      onSuccess: refresh,\n    }\n  );\n}\n\nexport default useTransferOrganizationOwnership;\n```\n\n----------------------------------------\n\nTITLE: Creating a Task Form Component in Next.js with TypeScript\nDESCRIPTION: A client-side form component for creating tasks with validation, form submission handling, and state management. The component uses React hooks like useTransition and useCallback for efficient rendering and includes validation for task name length. It also has a default due date function that sets the date to tomorrow.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/running_project_supabase_data_fetching_supabase_data_writing_27.md#2025-04-22_snippet_25\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\nimport type { FormEventHandler } from 'react';\nimport { useCallback, useTransition } from 'react';\nimport { toast } from 'sonner';\n\nimport TextField from '~/core/ui/TextField';\nimport Button from '~/core/ui/Button';\nimport If from '~/core/ui/If';\nimport Label from '~/core/ui/Label';\nimport Textarea from '~/core/ui/Textarea';\n\nimport useCurrentOrganization from '~/lib/organizations/hooks/use-current-organization';\nimport { createTaskAction } from '~/lib/tasks/actions';\nimport useCsrfToken from '~/core/hooks/use-csrf-token';\n\nconst TaskForm: React.FC = () => {\n  const [isMutating, startTransition] = useTransition();\n  const organization = useCurrentOrganization();\n  const organizationId = organization?.id as number;\n  const csrfToken = useCsrfToken();\n\n  const onCreateTask: FormEventHandler<HTMLFormElement> = useCallback(\n    async (event) => {\n      event.preventDefault();\n\n      const target = event.currentTarget;\n      const data = new FormData(target);\n      const name = data.get('name') as string;\n      const description = data.get('description') as string;\n      const dueDate = (data.get('dueDate') as string) || getDefaultDueDate();\n\n      if (name.trim().length < 3) {\n        toast.error('Task name must be at least 3 characters long');\n\n        return;\n      }\n\n      const task = {\n        organizationId,\n        name,\n        dueDate,\n        description,\n        done: false,\n      };\n\n      startTransition(async () => {\n        await createTaskAction({ task, csrfToken });\n      });\n    },\n    [csrfToken, organizationId],\n  );\n\n  return (\n    <form className={'flex flex-col'} onSubmit={onCreateTask}>\n      <div className={'flex flex-col space-y-4 w-full'}>\n        <TextField.Label>\n          Name\n          <TextField.Input\n            required\n            name={'name'}\n            placeholder={'ex. Launch on IndieHackers'}\n          />\n        </TextField.Label>\n\n        <Label>\n          Description\n          <Textarea\n            name={'description'}\n            className={'h-32'}\n            placeholder={'Describe the task...'}\n          />\n        </Label>\n\n        <TextField.Label>\n          Due date\n          <TextField.Input name={'dueDate'} type={'date'} />\n          <TextField.Hint>\n            Leave empty to set the due date to tomorrow\n          </TextField.Hint>\n        </TextField.Label>\n\n        <div className={'flex justify-end'}>\n          <Button variant={'flat'} loading={isMutating}>\n            <If condition={isMutating} fallback={<>Create Task</>}>\n              Creating Task...\n            </If>\n          </Button>\n        </div>\n      </div>\n    </form>\n  );\n};\n\nfunction getDefaultDueDate() {\n  const date = new Date();\n  date.setDate(date.getDate() + 1);\n  date.setHours(23, 59, 59);\n\n  return date.toDateString();\n}\n\nexport default TaskForm;\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Hook in a React Component to Create Firestore Documents (TypeScript/React)\nDESCRIPTION: Shows a React component that uses the useCreateTask hook to submit a new Task when the form is submitted. This pattern enables isolated, reusable logic for form submissions and task creation. Assumes useCreateTask, MyForm, and required context are available, and that the hook returns a function accepting a Task object.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/custom_fetch_fetching_data_firestore_making_api_requests_4.md#2025-04-22_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Component() {\n  const createTask = useCreateTask();\n\n  return <MyForm onSubmit={task => createTask(task)} />\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple oAuth Providers in Firebase Auth\nDESCRIPTION: This snippet demonstrates how to add multiple oAuth providers (Google, Facebook, Twitter, GitHub) to the Firebase Auth configuration in a Remix application.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/app_check_auth_flow_auth_hooks_69.md#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { FacebookAuthProvider, TwitterAuthProvider, GitHubAuthProvider } from\n'firebase/auth';\n\n{\n  auth: {\n    providers: {\n      oAuth: [\n        GoogleAuthProvider,\n        FacebookAuthProvider,\n        TwitterAuthProvider,\n        GitHubAuthProvider\n      ],\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Task via Next.js Server Action and Revalidating Data (TypeScript)\nDESCRIPTION: Defines a createTaskAction exported as a Next.js Server Action. It uses withSession to ensure authentication, then creates a task using createTask, performs data revalidation with revalidatePath, and redirects the user. It uses type definitions, utility imports, and expects a params object with task (Omit<Task, 'id'>) and csrfToken (string). Dependencies include Next.js server action utilities, Supabase client, and Makerkit session helpers. On invocation, it will create a task, revalidate the /tasks path, and redirect. Limitations: only usable in authenticated server actions.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/adding_app_pages_guarding_pages_updating_sidebar_menu_32.md#2025-04-22_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\n'use server';\n\nimport { revalidatePath } from 'next/cache';\nimport { redirect } from 'next/navigation';\n\nimport { createTask } from '~/lib/tasks/mutations';\nimport type Task from '~/lib/tasks/types/task';\nimport { withSession } from '~/core/generic/actions-utils';\nimport getSupabaseServerActionClient from '~/core/supabase/action-client';\n\ntype CreateTaskParams = {\n  task: Omit<Task, 'id'>;\n  csrfToken: string;\n};\n\nexport const createTaskAction = withSession(\n  async (params: CreateTaskParams) => {\n    const client = getSupabaseServerActionClient();\n    const path = `/tasks`;\n\n    await createTask(client, params.task);\n\n    // revalidate the tasks page\n    revalidatePath(path, 'page');\n\n    // redirect to the tasks page\n    redirect(path);\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Plan Selection Form Component in React\nDESCRIPTION: React component that renders a form for selecting subscription plans and addons. Includes radio group for plan selection, checkbox controls for addons, and displays pricing details.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_billing_checkout_addons_subscription_entitlements_54.md#2025-04-22_snippet_6\n\nLANGUAGE: JSX\nCODE:\n```\nform.setValue('addons', [], {\n  shouldValidate: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Complete Account Deletion Action (TypeScript)\nDESCRIPTION: Provides the full implementation of the `deletePersonalAccountAction`. It first requires user authentication, verifies the provided OTP using `createOtpApi`, deletes the user account using `deleteAccount`, signs the user out using `client.auth.signOut()`, and finally redirects to the home page. Depends on `requireUser`, `createOtpApi`, `deleteAccount`, `SupabaseClient`, and `redirectDocument`.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/creating_your_own_cms_client_keystatic_wordpress_62.md#2025-04-22_snippet_24\n\nLANGUAGE: tsx\nCODE:\n```\nexport const deletePersonalAccountAction = async ({\n  client,\n  otp,\n}: {\n  client: SupabaseClient<Database>;\n  otp: string;\n}) => {\n  const auth = await requireUser(client);\n\n  if (!auth.data) {\n    return redirectDocument(auth.redirectTo);\n  }\n\n  const user = auth.data;\n\n  // Verify OTP\n  const otpApi = createOtpApi(client);\n  const result = await otpApi.verifyToken({\n    purpose: 'delete-personal-account',\n    userId: user.id,\n    token: otp,\n  });\n\n  if (!result.valid) {\n    throw new Error('Invalid OTP');\n  }\n\n  // Delete account\n  await deleteAccount(user.id);\n\n  // Sign out and redirect\n  await client.auth.signOut();\n  return redirectDocument('/');\n};\n\n```\n\n----------------------------------------\n\nTITLE: Billing Schema Configuration\nDESCRIPTION: Example of configuring the billing schema with product definitions including ID, name, description and currency settings.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/api_billing_api_billing_schema_58.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nexport default createBillingSchema({\n  provider,\n  products: [\n    {\n      id: 'starter',\n      name: 'Starter',\n      description: 'The perfect plan to get started',\n      currency: 'USD',\n      badge: `Value`,\n      plans: [],\n    }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Form-based Server Action in Next.js with Zod Validation\nDESCRIPTION: This snippet shows how to create a server action that accepts FormData, validates it using Zod schema, and inserts a new task into Supabase. It uses the withSession utility to ensure the request contains a valid session.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/server_actions_uploading_data_to_storage_writing_data_to_supabase_17.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n'use server';\n\nimport { z } from 'zod';\n\nimport { withSession } from '~/core/generic/actions-utils';\nimport getSupabaseServerActionClient from '~/core/supabase/action-client';\n\nconst zodSchema = z.object({\n  task: z.object({\n    name: z.string().min(1),\n  }),\n});\n\nexport const insertNewTask =\n  withSession(\n    async (data: FormData) => {\n      const client = getSupabaseServerActionClient();\n      const body = zodSchema.parse(Object.fromEntries(data.entries()));\n\n      await insertNewTask(client, body.task);\n\n      return {\n        success: true,\n      };\n    }\n  );\n```\n\n----------------------------------------\n\nTITLE: Implementing Server Action for Project Creation\nDESCRIPTION: This server-side code defines an action to create a new project in the database using Supabase. It includes error handling and logging.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/projects_data_model_53.md#2025-04-22_snippet_37\n\nLANGUAGE: TypeScript\nCODE:\n```\n'use server';\n\nimport { revalidatePath } from 'next/cache';\n\nimport { enhanceAction } from '@kit/next/actions';\nimport { getLogger } from '@kit/shared/logger';\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\n\nimport { CreateProjectSchema } from '../schema/create-project-schema';\n\nexport const createProjectAction = enhanceAction(\n  async (data) => {\n    const client = getSupabaseServerClient();\n    const logger = await getLogger();\n\n    logger.info(\n      {\n        accountId: data.accountId,\n        name: data.name,\n      },\n      'Creating project...',\n    );\n\n    const response = await client.from('projects').insert({\n      account_id: data.accountId,\n      name: data.name,\n    });\n\n    if (response.error) {\n      logger.error(\n        {\n          accountId: data.accountId,\n          name: data.name,\n          error: response.error,\n        },\n        'Failed to create project',\n      );\n\n      throw response.error;\n    }\n\n    logger.info(\n      {\n        accountId: data.accountId,\n        name: data.name,\n      },\n      'Project created',\n    );\n\n    revalidatePath('/home/[account]/projects', 'layout');\n  },\n  {\n    schema: CreateProjectSchema,\n    auth: true,\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Project Member Permission Check Functions\nDESCRIPTION: Set of functions to check various permission levels including project membership, admin rights, and owner status.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/projects_data_model_53.md#2025-04-22_snippet_28\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace function public.is_project_member(p_project_id uuid)\nreturns boolean\nset search_path = ''\nas $$\n  select exists (\n    select 1 from public.project_members\n    where project_id = p_project_id\n    and user_id = (select auth.uid())\n  );\n$$ language sql security definer;\n\ncreate or replace function public.is_project_admin(p_project_id uuid)\nreturns boolean\nset search_path = ''\nas $$\n  select exists (\n    select 1 from public.project_members\n    where project_id = p_project_id\n    and user_id = (select auth.uid())\n    and role in ('owner', 'admin')\n  );\n$$ language sql;\n\ncreate or replace function public.is_project_owner(project_id uuid)\nreturns boolean\nset search_path = ''\nas $$\n  select exists (\n    select 1 from public.project_members\n    where project_id = $1\n    and user_id = (select auth.uid())\n    and role = 'owner'\n  );\n$$ language sql;\n```\n\n----------------------------------------\n\nTITLE: Implementing Logging in API Functions\nDESCRIPTION: Demonstrates how to effectively log API operations using Pino, showing logging before execution, after success, and during errors.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/server_actions_uploading_data_to_storage_writing_data_to_supabase_17.md#2025-04-22_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\nimport logger from '~/core/logger';\n\nasync function addIntegrationHandler(\n  userId: string,\n  organizationId: number,\n  integrationId: number,\n) {\n  // this is the context that every log will print out\n  const loggingContext = {\n    integrationId,\n    organizationId,\n    userId,\n  };\n\n  // Here we log what we're doing\n  logger.log(loggingContext, `Adding new integration to organization`);\n\n  try {\n    await writeToDb(data);\n\n    // Here we log that the result of the operation\n    // was successful\n    logger.log(loggingContext, `Integration successfully added`);\n\n    // return successful response\n    return {\n      integrationId,\n      success: true\n    };\n  } catch (e) {\n    // Here we log that the operation failed\n    logger.error(loggingContext, `Encountered an error while adding integration`);\n\n    // Logging errors can be okay but\n    // ensure not to leak important information!\n    logger.debug(e);\n\n    throw e;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Credits Table and Policy - Supabase SQL\nDESCRIPTION: This snippet creates a \\`public.credits\\` table to record the number of tokens/credits for each user account. It applies row-level security (users can only see their own records) and creates a policy to expose only a user's own credits. This supports metered or credit-based billing scenarios in SaaS.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/api_billing_api_billing_schema_58.md#2025-04-22_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\ncreate table public.credits (\n  account_id uuid not null references public.accounts(id),\n  tokens integer not null\n);\n\nalter table public.credits enable row level security;\n\n-- allow authenticated users to read their credits\ncreate policy read_credits\n  on public.credits\n  for select\n  to authenticated\n  using (\n    account_id = (select auth.uid())\n  );\n```\n\n----------------------------------------\n\nTITLE: Fetching Organization Data Using useSWR and a Custom React Hook - TypeScript\nDESCRIPTION: Implements a reusable custom React hook 'useOrganizationQuery' to fetch organization data on the client using the useSWR library for caching and revalidation. Requires SWR, a custom Supabase hook, and an organization query utility. Accepts an organizationId and returns SWR's response object. The hook provides automatic loading, error, and data state management.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/auth_setup_authentication_blog_16.md#2025-04-22_snippet_15\n\nLANGUAGE: TSX\nCODE:\n```\nimport useSupabase from '~/core/hooks/use-supabase';\nimport { getOrganizationById } from '~/lib/organizations/database/queries';\nimport useSWR from 'swr';\n\nfunction useOrganizationQuery(\n  organizationId: number\n) {\n  const client = useSupabase();\n  const key = ['organization', organizationId];\n\n  return useSWR(key, async () => {\n    return getOrganizationById(client, organizationId).then(\n      (result) => result.data\n    );\n  });\n}\n\nexport default useOrganizationQuery;\n```\n\n----------------------------------------\n\nTITLE: Handling Billing Webhooks and Credit Recharging with Remix and Supabase | TypeScript\nDESCRIPTION: Implements a Remix API route that processes incoming billing webhooks (such as `onInvoicePaid`) by validating event data and updating the user's credit quota in Supabase. It retrieves plan information based on the variant ID and applies the correct quota to the user's credits row, using error handling and logging throughout. The code imports necessary services and configuration, relies on Remix's handler structure, requires the existence of the `plans` and `credits` tables in Supabase, and expects service functions from the Makerkit/SaaS Turbo starter kit. Parameters include HTTP request data, invoice details, and relies on appropriate environment and project configuration. Expected input is a webhook HTTP request; output is an HTTP response indicating success or failure. Limitations include support for only one line item per invoice and the expectation of appropriate DB schema.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/billing_webhooks_credit_based_billing_lemon_squeezy_89.md#2025-04-22_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { ActionFunctionArgs } from '@remix-run/node';\nimport { getBillingEventHandlerService } from '@kit/billing-gateway';\nimport { getLogger } from '@kit/shared/logger';\nimport { getSupabaseServerAdminClient } from '@kit/supabase/server-admin-client';\n\nimport billingConfig from '~/config/billing.config';\nimport { Database } from '~/lib/database.types';\n\n/**\n * @description Handle the webhooks from Stripe related to checkouts\n */\nexport const action = async ({ request }: ActionFunctionArgs) => {\n    const provider = billingConfig.provider;\n    const logger = await getLogger();\n\n    const ctx = {\n      name: 'billing.webhook',\n      provider,\n    };\n\n    logger.info(ctx, `Received billing webhook. Processing...`);\n\n    const supabaseClientProvider = () =>\n      getSupabaseServerAdminClient<Database>();\n\n    const service = await getBillingEventHandlerService(\n      supabaseClientProvider,\n      provider,\n      billingConfig,\n    );\n\n    try {\n      await service.handleWebhookEvent(request, {\n        onInvoicePaid: async (data) => {\n          const accountId = data.target_account_id;\n          const lineItems = data.line_items;\n\n          // we only expect one line item in the invoice\n          // if you add more than one, you need to handle that here\n          // by finding the correct line item to get the variant ID\n          const variantId = lineItems[0]?.variant_id;\n\n          if (!variantId) {\n            logger.error(\n              {\n                accountId,\n              },\n              'Variant ID not found in line items',\n            );\n\n            throw new Error('Variant ID not found in invoice');\n          }\n\n          await updateMessagesCountQuota({\n            variantId,\n            accountId,\n          });\n        },\n      });\n\n      logger.info(ctx, `Successfully processed billing webhook`);\n\n      return new Response('OK', { status: 200 });\n    } catch (error) {\n      logger.error({ ...ctx, error }, `Failed to process billing webhook`);\n\n      return new Response('Failed to process billing webhook', {\n        status: 500,\n      });\n    }\n};\n\nasync function updateMessagesCountQuota(params: {\n  variantId: string;\n  accountId: string;\n}) {\n  const client = getSupabaseRouteHandlerClient<Database>({ admin: true });\n\n  // get the max messages for the price based on the price ID\n  const plan = await client\n    .from('plans')\n    .select('tokens_quota')\n    .eq('variant_id', params.variantId)\n    .single();\n\n  if (plan.error) {\n    throw plan.error;\n  }\n\n  const { tokens_quota } = plan.data;\n\n  // upsert the message count for the account\n  // and set the period start and end dates (from the subscription)\n  const response = await client\n    .from('credits')\n    .update({\n      tokens_quota,\n    })\n    .eq('account_id', params.accountId);\n\n  if (response.error) {\n    throw response.error;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Server Action for Task Creation in Next.js\nDESCRIPTION: Server-side action implementation for creating tasks using Next.js Server Actions with Supabase. Includes CSRF protection and path revalidation.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/server_actions_uploading_data_to_storage_writing_data_to_supabase_30.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n'use server';\n\nimport { revalidatePath } from 'next/cache';\n\nimport { createTask } from '~/lib/tasks/mutations';\nimport type Task from '~/lib/tasks/types/task';\nimport { withSession } from '~/core/generic/actions-utils';\nimport getSupabaseServerActionClient from '~/core/supabase/action-client';\n\ntype CreateTaskParams = {\n  task: Omit<Task, 'id'>;\n  csrfToken: string;\n};\n\nexport const createTaskAction = withSession(\n  async (params: CreateTaskParams) => {\n    const client = getSupabaseServerActionClient();\n\n    await createTask(client, params.task);\n\n    revalidatePath('/dashboard/[organization]/tasks');\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing File Upload in a React Form Component\nDESCRIPTION: A React component that uses the custom useUpdateProfile hook to handle file uploads in a form. The component triggers the mutation when a file is uploaded.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/server_actions_uploading_data_to_storage_writing_data_to_supabase_30.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nconst updateProfile = useUpdateProfile();\n\n<Form onUpload={(file: File, userId: string) => {\n  return updateProfile.trigger({ file, userId })\n} />\n```\n\n----------------------------------------\n\nTITLE: Creating Custom React Hook for Fetching Data with Supabase\nDESCRIPTION: Implementation of a custom React hook using React Query to fetch events from a Supabase database based on organization ID.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/translations_updating_latest_version_tutorials_28.md#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nexport function useFetchEvents(\n  organizationId: number\n) {\n  const client = useSupabase();\n  const key = [`events`, organizationId];\n\n  return useQuery(key, async () => {\n    const { data, error } client\n      .from('events')\n      .select('*')\n      .eq('organization_id', organizationId);\n\n    if (error) {\n      throw error;\n    }\n\n    return data;\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Zod Schema for Updating Ticket Assignee in TypeScript\nDESCRIPTION: This code defines a Zod schema for validating the data structure when updating a ticket's assignee. It ensures both ticketId and assigneeId are valid UUIDs.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/data_fetching_3.md#2025-04-22_snippet_31\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { z } from 'zod';\n\nexport const UpdateTicketAssigneeSchema = z.object({\n  ticketId: z.string().uuid(),\n  assigneeId: z.string().uuid(),\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Supabase Data within a Next.js Server Action\nDESCRIPTION: Illustrates fetching data from Supabase inside a Next.js Server Action. It uses `getSupabaseServerActionClient` to get an appropriate Supabase client instance for server actions and then calls the `getOrganizationById` query function, returning the fetched data.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/architecture_auth_overview_auth_setup_29.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n```tsx\n'use server';\n\nimport getSupabaseServerActionClient from '~/core/supabase/action-client';\nimport { getOrganizationById } from '~/lib/organizations/database/queries';\n\nexport async function getOrganizationByIdAction(\n  organizationId: number\n) {\n  const client = getSupabaseServerActionClient();\n  const { data } = await getOrganizationById(client, organizationId);\n\n  return data;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Tickets Service (TypeScript)\nDESCRIPTION: This snippet defines a TicketsService class that encapsulates the logic for fetching support tickets from the database. It includes methods for pagination, filtering by account, and text search.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/realtime_updates_server_components_7.md#2025-04-22_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SupabaseClient } from '@supabase/supabase-js';\n\nimport { Database } from '~/lib/database.types';\n\nexport function createTicketsService(client: SupabaseClient<Database>) {\n  return new TicketsService(client);\n}\n\nclass TicketsService {\n  constructor(private readonly client: SupabaseClient<Database>) {}\n\n  async getTickets(params: {\n    accountSlug: string;\n    page: number;\n    limit?: number;\n    query?: string;\n  }) {\n    const limit = params.limit ?? 10;\n    const startOffset = (params.page - 1) * limit;\n    const endOffset = startOffset + limit;\n\n    let query = this.client\n      .from('tickets')\n      .select('*, account_id !inner (slug)', {\n        count: 'exact',\n      })\n      .eq('account_id.slug', params.accountSlug)\n      .order('created_at', { ascending: false })\n      .range(startOffset, endOffset);\n\n    if (params.query) {\n      query = query.textSearch('title', `\"${params.query}\"`);\n    }\n\n    const { data, error, count } = await query;\n\n    if (error) {\n      throw error;\n    }\n\n    return {\n      data: data ?? [],\n      count: count ?? 0,\n      pageSize: limit,\n      page: params.page,\n      pageCount: Math.ceil((count ?? 0) / limit),\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using useInsertTask Hook in a React Component\nDESCRIPTION: This snippet demonstrates how to use the 'useInsertTask' hook in a React component to submit a new task. It includes form handling and disabling the submit button while the mutation is in progress.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/api_routes_vs_server_actions_api_routes_call_api_routes_from_client_19.md#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nfunction TaskForm() {\n  const insertTaskMutation = useInsertTask();\n\n  const onSubmit: React.FormEventHandler<HTMLFormElement> = (event) => {\n    const name = new FormData(event.currentTarget).get('name') ?? 'No Name';\n    const task = { name };\n\n    return insertTaskMutation.trigger(task);\n  };\n\n  return (\n    <form onSubmit={onSubmit}>\n      <input type={'name'} required />\n\n      <button disabled={insertTaskMutation.isLoading}>\n        Submit\n      </button>\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing API Route with Zod Validation\nDESCRIPTION: This Remix action function demonstrates how to use Zod to validate the request payload before processing the API request, throwing an exception for invalid data.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_one_time_payments_stripe_webhooks_ci_tests_73.md#2025-04-22_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport { throwBadRequestException } from `~/core/http-exceptions`;\n\nexport const action: ActionFunction = async ({ request }) => {\n  try {\n     // we can safely use data with the interface Body\n    const schema = getBodySchema();\n    const body = await request.json();\n    const { displayName, email } = schema.parse(body);\n\n    return sendInvite({ displayName, email });\n  } catch(e) {\n    return throwBadRequestException();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Authentication Configuration in Next.js\nDESCRIPTION: This code snippet demonstrates how to parse and validate the authentication configuration using Zod schema. It includes options for captcha, terms checkbox, and authentication providers.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stepper_components_application_configuration_41.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst authConfig = AuthConfigSchema.parse({\n  captchaTokenSiteKey: process.env.NEXT_PUBLIC_CAPTCHA_SITE_KEY,\n\n  displayTermsCheckbox:\n    process.env.NEXT_PUBLIC_DISPLAY_TERMS_AND_CONDITIONS_CHECKBOX === 'true',\n\n  providers: {\n    password: process.env.NEXT_PUBLIC_AUTH_PASSWORD === 'true',\n    magicLink: process.env.NEXT_PUBLIC_AUTH_MAGIC_LINK === 'true',\n    oAuth: ['google'],\n  },\n} satisfies z.infer<typeof AuthConfigSchema>);\n```\n\n----------------------------------------\n\nTITLE: React Component with SWR Data Fetching\nDESCRIPTION: Example React component implementing SWR hook with loading and error states\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/validating_api_input_zod_development_clone_repository_31.md#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nfunction MyComponent() {\n  const { data, isLoading, error } = useFetchData();\n\n  if (isLoading) {\n    return <p>Loading...</p>;\n  }\n\n  if (error) {\n    return <p>Error...</p>;\n  }\n\n  return <div>{data.hello}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Data Fetching Hook with useSWR for Supabase\nDESCRIPTION: Demonstrates creating a custom React hook `useOrganizationQuery` using `useSWR` to fetch organization data from Supabase on the client-side. It utilizes the `useSupabase` hook to get a client instance and calls the `getOrganizationById` query function within the `useSWR` fetcher. The hook takes the `organizationId` as input and returns the SWR response object.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/architecture_auth_overview_auth_setup_29.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n```tsx\nimport useSupabase from '~/core/hooks/use-supabase';\nimport { getOrganizationById } from '~/lib/organizations/database/queries';\nimport useSWR from 'swr';\n\nfunction useOrganizationQuery(\n  organizationId: number\n) {\n  const client = useSupabase();\n  const key = ['organization', organizationId];\n\n  return useSWR(key, async () => {\n    return getOrganizationById(client, organizationId).then(\n      (result) => result.data\n    );\n  });\n}\n\nexport default useOrganizationQuery;\n```\n```\n\n----------------------------------------\n\nTITLE: Checking User Permissions in an Account\nDESCRIPTION: Code showing how to check if a user has permission to perform a specific action within an account using the hasPermission method. Takes accountId, userId, and permission as parameters.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/custom_analytics_provider_google_analytics_provider_posthog_analytics_provider_36.md#2025-04-22_snippet_42\n\nLANGUAGE: tsx\nCODE:\n```\nconst api = createTeamAccountsApi(client);\n\nconst hasPermission = await api.hasPermission({\n  accountId: 'account-id',\n  userId: 'user-id',\n  permission: 'billing.manage',\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Files from Firebase Storage with a Custom Hook (TypeScript)\nDESCRIPTION: Defines a custom React hook, useOrganizationAssets, for listing files in Firebase Storage by organization and retrieving their download URLs. Uses useStorage and standard Firebase SDK methods such as ref, list, and getDownloadURL. Handles loading, error, and data updates, returning current state for components to consume. Assumes useRequestState utility and correct organization context are set up.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/custom_fetch_fetching_data_firestore_making_api_requests_4.md#2025-04-22_snippet_12\n\nLANGUAGE: TSX\nCODE:\n```\nfunction useOrganizationAssets() {\n  const storage = useStorage();\n\n  const { setData, setError, setLoading, state } =\n    useRequestState<MediaItem[]>();\n\n  const path = `/${organizationId}/uploads`;\n  const reference = ref(storage, path);\n\n  useEffect(() => {\n    void (async () => {\n      try {\n        const result = await list(reference);\n\n        const items = await Promise.all(\n          result.items.map(async (item) => {\n            const url = await getDownloadURL(item);\n\n            return url;\n          })\n        );\n\n        setData(items);\n      } catch (e) {\n        setError(e);\n      }\n    })();\n  }, [reference, setData, setError]);\n\n  return state;\n}\n```\n\n----------------------------------------\n\nTITLE: Restricting Table Access with Row-Level Security Policy\nDESCRIPTION: SQL policy to restrict access to a tasks table based on user ID. This policy allows authenticated users to select only records where the user_id matches their auth.uid(), preventing users from accessing other users' tasks.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/server_actions_uploading_data_to_storage_writing_data_to_supabase_30.md#2025-04-22_snippet_19\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy \"Restrict access to user tasks to their own tasks\"\n  on tasks\n  for select\n  to authenticated\n  using (user_id = auth.uid());\n```\n\n----------------------------------------\n\nTITLE: Implementing a Task Creation Form with State and Routing (TypeScript/React, Next.js)\nDESCRIPTION: Implements a complete React form component for creating a new task. Integrates with useCreateTask, loading state management, routing, and toast notifications. Handles input validation, form data extraction, and submission events. Expects dependencies like useRequestState, useRouter, useCurrentOrganization, toaster, and custom UI components (Button, TextField). Returns a form that upon success navigates to '/tasks' and shows relevant toasts. The helper functions getDefaultDueDate and pad provide date formatting.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/custom_fetch_fetching_data_firestore_making_api_requests_4.md#2025-04-22_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\nconst CreateTaskForm = () => {\n  const createTask = useCreateTask();\n  const { setLoading, state } = useRequestState();\n  const router = useRouter();\n  const organization = useCurrentOrganization();\n  const organizationId = organization?.id as string;\n\n  const onCreateTask: FormEventHandler<HTMLFormElement> = useCallback(\n    async (event) => {\n      event.preventDefault();\n\n      const target = event.currentTarget;\n      const data = new FormData(target);\n      const name = data.get('name') as string;\n      const dueDate = data.get('dueDate') as string;\n\n      setLoading(true);\n\n      const task = {\n        organizationId,\n        name,\n        dueDate,\n        description: ``,\n        done: false,\n      };\n\n      const promise = createTask(task).then(() => {\n        return router.push(`/tasks`);\n      });\n\n      await toaster.promise(promise, {\n        success: `Task created!`,\n        error: `Ops, error!`,\n        loading: `Creating task...`,\n      });\n    },\n    [router, createTask, organizationId, setLoading]\n  );\n\n  return (\n    <div>\n      <form onSubmit={onCreateTask}>\n        <div className={'flex flex-col space-y-3'}>\n          <TextField.Label>\n            Name\n            <TextField.Input\n              required\n              name={'name'}\n              placeholder={'ex. Launch on IndieHackers'}\n            />\n            <TextField.Hint>Hint: whatever you do, ship!</TextField.Hint>\n          </TextField.Label>\n\n          <TextField.Label>\n            Due date\n            <TextField.Input\n              required\n              defaultValue={getDefaultDueDate()}\n              name={'dueDate'}\n              type={'date'}\n            />\n          </TextField.Label>\n\n          <div\n            className={\n              'flex flex-col space-y-2 md:space-y-0 md:space-x-2' +\n              ' md:flex-row'\n            }\n          >\n            <Button loading={state.loading}>\n              <If condition={state.loading} fallback={<>Create Task</>}>\n                Creating Task...\n              </If>\n            </Button>\n\n            <Button color={'transparent'} href={'/tasks'}>\n              Go back\n            </Button>\n          </div>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nfunction getDefaultDueDate() {\n  const date = new Date();\n  const year = date.getFullYear();\n  const month = pad(date.getMonth() + 1);\n  const day = pad(date.getDate() + 1);\n\n  return `${year}-${month}-${day}`;\n}\n\nfunction pad(n: number) {\n  return n < 10 ? `0${n}` : n.toString();\n}\n\nexport default CreateTaskForm;\n```\n\n----------------------------------------\n\nTITLE: Enabling Specific OAuth Providers in Next.js Supabase Configuration\nDESCRIPTION: This code snippet, located in `src/configuration.ts`, shows how to enable specific OAuth providers (Google and Facebook) for authentication in a Next.js Supabase application. It sets other authentication methods like email/password, phone, and email link to `false`. The `Provider` interface type-checks the supported provider names.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/api_routes_vs_server_actions_api_routes_call_api_routes_from_client_19.md#2025-04-22_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nproviders: {\n  emailPassword: false,\n  phoneNumber: false,\n  emailLink: false,\n  oAuth: ['google', 'facebook'] as Provider[]\n},\n```\n\n----------------------------------------\n\nTITLE: Setting Firestore Security Rules\nDESCRIPTION: Demonstrates how to protect Firestore data using custom security rules. These rules ensure that operations like creating, reading, updating, and deleting tasks are restricted to users belonging to the organization owning the task. This relies on the `userIsMemberByOrganizationId` function defined elsewhere in the template.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/deploying_production_development_getting_started_environment_variables_13.md#2025-04-22_snippet_11\n\nLANGUAGE: firestore\nCODE:\n```\nmatch /tasks/{taskId} {\n  allow create: if userIsMemberByOrganizationId(incomingData().organizationId);\n  allow read, update, delete: if userIsMemberByOrganizationId(existingData().organizationId);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Server Action with Session Validation in Next.js\nDESCRIPTION: A custom server action that accepts parameters directly rather than using FormData. It validates the user session using the withSession utility before inserting a new task.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/server_actions_uploading_data_to_storage_writing_data_to_supabase_30.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n'use server';\n\nimport { withSession } from '~/core/generic/actions-utils';\nimport getSupabaseServerActionClient from '~/core/supabase/action-client';\n\nexport const insertNewTask = withSession(\n    async (params: {\n      task: Task;\n    }) => {\n      const client = getSupabaseServerActionClient();\n\n      await insertNewTask(client, params);\n\n      return {\n        success: true,\n      };\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Complete Tasks Page Implementation in Next.js\nDESCRIPTION: The full implementation of the Tasks page, including data loading from Supabase, pagination handling, search functionality, and component integration. This page component uses server-side data fetching and client-side rendering for optimal performance and user experience.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/running_project_supabase_data_fetching_supabase_data_writing_27.md#2025-04-22_snippet_29\n\nLANGUAGE: tsx\nCODE:\n```\nimport { use } from 'react';\n\nimport {\n  PlusCircleIcon,\n  RectangleStackIcon,\n} from '@heroicons/react/24/outline';\n\nimport getSupabaseServerComponentClient from '~/core/supabase/server-component-client';\nimport { getTasks } from '~/lib/tasks/queries';\nimport Trans from '~/core/ui/Trans';\nimport { withI18n } from '~/i18n/with-i18n';\n\nimport AppHeader from '~/app/dashboard/[organization]/components/AppHeader';\nimport AppContainer from '~/app/dashboard/[organization]/components/AppContainer';\n\nimport Heading from '~/core/ui/Heading';\nimport Button from '~/core/ui/Button';\nimport If from '~/core/ui/If';\n\nimport type Task from '~/lib/tasks/types/task';\nimport TasksTable from '~/app/dashboard/[organization]/tasks/components/TasksTable';\nimport SearchTaskInput from '~/app/dashboard/[organization]/tasks/components/SearchTaskInput';\nimport CreateTaskModal from '~/app/dashboard/[organization]/tasks/components/CreateTaskModal';\n\nexport const metadata = {\n  title: 'Tasks',\n};\n\ninterface TasksPageParams {\n  params: {\n    organization: string;\n  };\n\n  searchParams: {\n    page?: string;\n    query?: string;\n  };\n}\n\nfunction TasksPage({ params, searchParams }: TasksPageParams) {\n  const pageIndex = Number(searchParams.page ?? '1') - 1;\n  const perPage = 8;\n\n  const { tasks, count } = use(\n    loadTasksData({\n      organizationUid: params.organization,\n      pageIndex,\n      perPage,\n      query: searchParams.query || '',\n    }),\n  );\n\n  const pageCount = Math.ceil(count / perPage);\n\n  return (\n    <>\n      <AppHeader>\n        <span className={'flex space-x-2'}>\n          <RectangleStackIcon className=\"w-6\" />\n\n          <span>\n            <Trans i18nKey={'common:tasksTabLabel'} />\n          </span>\n        </span>\n      </AppHeader>\n\n      <AppContainer>\n        <If condition={!count}>\n          <TasksEmptyState />\n        </If>\n\n        <TasksTableContainer\n          pageIndex={pageIndex}\n          pageCount={pageCount}\n          tasks={tasks}\n          query={searchParams.query}\n        />\n      </AppContainer>\n    </>\n  );\n}\n\nexport async function loadTasksData(params: {\n  organizationUid: string;\n  pageIndex: number;\n  perPage: number;\n  query?: string;\n}) {\n  const client = getSupabaseServerComponentClient();\n  const { organizationUid, perPage, pageIndex, query } = params;\n\n  const {\n    data: tasks,\n    error,\n    count,\n  } = await getTasks(client, {\n    organizationUid,\n    pageIndex,\n    perPage,\n    query,\n  });\n\n  if (error) {\n    console.error(error);\n\n    return {\n      tasks: [],\n      count: 0,\n    };\n  }\n\n  return {\n    tasks,\n    count: count ?? 0,\n  };\n}\n\nexport default withI18n(TasksPage);\n\nfunction TasksTableContainer({\n  tasks,\n  pageCount,\n  pageIndex,\n  query,\n}: React.PropsWithChildren<{\n  tasks: Task[];\n  pageCount: number;\n  pageIndex: number;\n  query?: string;\n}>) {\n  return (\n    <div className={'flex flex-col space-y-4'}>\n      <div className={'flex space-x-4 justify-between items-center'}>\n        <div className={'flex'}>\n          <CreateTaskModal>\n            <Button color={'transparent'}>\n              <span className={'flex space-x-2 items-center'}>\n                <PlusCircleIcon className={'w-4'} />\n\n                <span>New Task</span>\n              </span>\n            </Button>\n          </CreateTaskModal>\n        </div>\n\n        <SearchTaskInput query={query} />\n      </div>\n\n      <TasksTable pageIndex={pageIndex} pageCount={pageCount} tasks={tasks} />\n    </div>\n  );\n}\n\nfunction TasksEmptyState() {\n  return (\n    <div className={'flex flex-col space-y-8 p-4'}>\n      <div className={'flex flex-col'}>\n        <Heading type={2}>\n          <span className={'font-semibold'}>\n            Hey, it looks like you don&apos;t have any tasks yet... 🤔\n          </span>\n        </Heading>\n\n        <Heading type={4}>\n          Create your first task by clicking on the button below\n        </Heading>\n      </div>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using React Query for Mutations with Captcha Token (TSX)\nDESCRIPTION: Shows an improved approach using React Query (`useMutation`) to handle API calls requiring a captcha token. A custom hook `useMutateData` encapsulates the mutation logic, fetching the captcha token via `useCaptchaToken` and including it in the request headers. This simplifies the component logic for submitting data.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/csrf_protection_react_query_route_handlers_43.md#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useMutation } from '@tanstack/react-query';\nimport { useCaptchaToken } from '@kit/auth/captcha/client';\n\nfunction Component() {\n  const captchaToken = useCaptchaToken();\n  const mutation = useMutateData();\n\n  const onSubmit = async (params: {\n    email: string;\n    password: string;\n  }) => {\n    await mutation.mutateAsync(params);\n  };\n  \n  // ... your code here\n}\n\nfunction useMutateData() {\n  return useMutation({\n    mutationKey: 'my-mutation',\n    mutationFn: async (params: { email: string; password: string }) => {\n      const response = await fetch('/my-api-route', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'x-captcha-token': captchaToken,\n        },\n        body: JSON.stringify(params),\n      });\n      \n      if (!response.ok) {\n        throw new Error('An error occurred');\n      }\n\n      return response.json();\n    },\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Support Ticket System Database Schema in SQL\nDESCRIPTION: This comprehensive SQL script sets up the entire database schema for a support ticket system. It includes table creation, enum types, permissions, indexes, row-level security policies, and functions for managing tickets, messages, and subscription plans.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/database_4.md#2025-04-22_snippet_19\n\nLANGUAGE: sql\nCODE:\n```\n-- insert new permissions\nalter type public.app_permissions add value 'tickets.update';\nalter type public.app_permissions add value 'tickets.delete';\ncommit;\n\n-- grant permissions to the owner role\ninsert into public.role_permissions(\n  role,\n  permission)\nvalues\n  ('owner', 'tickets.update'),\n  ('owner', 'tickets.delete');\n\n--  public.message_author: enum type for message author\ncreate type public.message_author as enum ('support', 'customer');\n\n-- public.ticket_status: enum type for ticket status\ncreate type public.ticket_status as enum ('open', 'closed', 'resolved', 'in_progress');\n\n-- public.ticket_priority: enum type for ticket priority\ncreate type public.ticket_priority as enum ('low', 'medium', 'high');\n\n/*\n* Table: public.tickets\n-- table for the support tickets\n*/\ncreate table if not exists public.tickets (\n  id uuid primary key default gen_random_uuid(),\n  account_id uuid not null references public.accounts(id) on delete cascade,\n  title varchar(255) not null,\n  category varchar(100) not null default 'general',\n  assigned_to uuid references public.accounts(id) on delete set null,\n  priority public.ticket_priority not null default 'medium',\n  status public.ticket_status not null default 'open',\n  customer_email varchar(255),\n  resolution text,\n  resolved_at timestamptz,\n  resolved_by uuid references public.accounts(id) on delete set null,\n  closed_at timestamptz,\n  closed_by uuid references public.accounts(id) on delete set null,\n  created_at timestamptz not null default now(),\n  updated_at timestamptz not null default now()\n);\n\n-- revoke permissions on public.tickets\nrevoke all on public.tickets from public, service_role;\n\n-- grant required permissions on public.tickets\ngrant select, insert, update, delete on public.tickets to authenticated;\ngrant select, insert on public.tickets to service_role;\n\n-- Indexes\ncreate index ix_tickets_account_id on public.tickets(account_id);\n\n-- RLS\nalter table public.tickets enable row level security;\n\n-- SELECT(public.tickets)\ncreate policy select_tickets\n  on public.tickets\n  for select\n  to authenticated\n  using (\n    public.has_role_on_account(account_id)\n  );\n\n-- DELETE(public.tickets)\ncreate policy delete_tickets\n  on public.tickets\n  for delete\n  to authenticated\n  using (\n    public.has_permission((select auth.uid()), account_id, 'tickets.delete'::app_permissions)\n  );\n\n -- UPDATE(public.tickets)\ncreate policy update_tickets\n  on public.tickets\n  for update\n  to authenticated\n  using (\n    public.has_permission((select auth.uid()), account_id, 'tickets.update'::app_permissions)\n  )\n  with check (\n    public.has_permission((select auth.uid()), account_id, 'tickets.update'::app_permissions)\n  );\n\n/*\n* Table: public.messages\n*/\ncreate table if not exists public.messages (\n  id uuid primary key default gen_random_uuid(),\n  ticket_id uuid not null references public.tickets(id) on delete cascade,\n  author public.message_author not null,\n  author_account_id uuid references public.accounts(id) on delete set null,\n  content varchar(5000) not null,\n  attachment_url varchar(500),\n  created_at timestamptz not null default now(),\n  updated_at timestamptz not null default now()\n);\n\n-- Indexes\ncreate index ix_messages_ticket_id on public.messages(ticket_id);\n\n-- revoke all permissions from the messages table\nrevoke all on public.messages from public, service_role;\n\n-- grant permissions to the authenticated role\ngrant select, insert, update, delete on public.messages to authenticated;\n\ngrant select, insert on public.messages to service_role;\n\n-- RLS\nalter table public.messages enable row level security;\n\n-- Function: public.has_role_on_ticket_account\n-- Description: Check if the authenticated user has a role on the account of the ticket\ncreate or replace function public.has_role_on_ticket_account(ticket_id uuid)\n  returns boolean\n  set search_path = ''\n  as $$\n  begin\n    return exists (\n      select 1\n      from public.tickets ticket\n      where ticket.id = ticket_id\n      and public.has_role_on_account(ticket.account_id)\n    );\n  end;\n  $$ language plpgsql stable;\n\ngrant execute on function public.has_role_on_ticket_account(uuid) to authenticated;\n\n-- SELECT(public.messages)\ncreate policy select_messages\n  on public.messages\n  for select\n  to authenticated\n  using (\n    public.has_role_on_ticket_account(ticket_id)\n  );\n\n-- UPDATE(public.messages)\ncreate policy update_messages\n  on public.messages\n  for update\n  to authenticated\n  using (\n    public.has_role_on_ticket_account(ticket_id)\n  )\n  with check (\n    public.has_role_on_ticket_account(ticket_id)\n  );\n\n-- DELETE(public.messages)\ncreate policy delete_messages\n  on public.messages\n  for delete\n  to authenticated\n  using (\n    public.has_role_on_ticket_account(ticket_id)\n  );\n\n-- INSERT(public.messages)\ncreate policy insert_messages\n  on public.messages\n  for insert\n  to authenticated\n  with check (\n    public.has_role_on_ticket_account(ticket_id)\n  );\n\n-- public.plans: table for subscription plans\ncreate table if not exists public.plans (\n  variant_id varchar(255) primary key,\n  name varchar(255) not null,\n  max_tickets int not null\n);\n\n-- revoke all permissions from the plans table\nrevoke all on public.plans from public, service_role;\n\n-- grant permissions to the authenticated role\ngrant select on public.plans to authenticated, service_role;\n\n-- RLS\nalter table public.plans enable row level security;\n\n-- SELECT(public.plans)\ncreate policy select_plans\n  on public.plans\n  for select\n  to authenticated\n  using (true);\n\n/*\n* Bucket: attachments\n*/\ninsert into\n  storage.buckets (id, name, PUBLIC)\nvalues\n  ('attachments', 'attachments', false);\n\n-- Function public.can_read_message\n-- Description: Check if the authenticated user can read the message\ncreate or replace function public.can_read_message (message_id uuid)\n  returns boolean\n  set search_path = ''\n  as $$\n  begin\n    return exists (\n      select 1\n      from public.messages message\n      where message.id = message_id\n      and public.has_role_on_ticket_account(message.ticket_id)\n    );\n  end;\n  $$ language plpgsql stable;\n\ngrant execute on function public.can_read_message(uuid) to authenticated;\n\n-- RLS policies for storage\ncreate policy message_attachments\n  on storage.objects\n  for select\n  to authenticated using (\n    bucket_id = 'attachments'\n    and public.can_read_message(\n      kit.get_storage_filename_as_uuid (name)\n    )\n);\n\n-- Function to handle status changes\ncreate or replace function kit.handle_ticket_status_change()\nreturns trigger\nset search_path = ''\nas $$\nbegin\n  if new.status = 'closed' and old.status != 'closed' then\n    new.closed_by := auth.uid();\n    new.closed_at := now();\n    new.resolved_by := null;\n    new.resolved_at := null;\n  elsif new.status = 'resolved' and old.status != 'resolved' then\n    new.resolved_by := auth.uid();\n    new.resolved_at := now();\n    new.closed_by := null;\n    new.closed_at := null;\n  elsif new.status = 'open' and old.status != 'open' then\n    new.closed_by := null;\n    new.closed_at := null;\n    new.resolved_by := null;\n    new.resolved_at := null;\n  elsif new.status = 'in_progress' and old.status != 'in_progress' then\n    new.closed_by := null;\n    new.closed_at := null;\n    new.resolved_by := null;\n    new.resolved_at := null;\n  end if;\n  return new;\nend;\n$$ language plpgsql;\n\n-- Trigger to handle status changes\ncreate trigger handle_ticket_status_change_trigger\nbefore update of status on public.tickets\nfor each row\nwhen (old.status is distinct from new.status)\nexecute function kit.handle_ticket_status_change();\n\ncreate\nor replace function public.get_subscription_details (target_account_id uuid) returns table (\n  variant_id varchar,\n  period_starts_at timestamptz,\n  period_ends_at timestamptz\n)\nset search_path = ''\nas $$\nbegin\n  -- select the subscription details for the target account\n  return query select\n        item.variant_id,\n        subscription.period_starts_at,\n        subscription.period_ends_at\n  from\n        public.subscription_items as item\n  join\n        public.subscriptions as subscription\n  on\n        subscription.id = item.subscription_id\n  where\n        subscription.account_id = target_account_id\n  and   subscription.active = true\n  and\n        item.type = 'flat';\nend;\n$$ language plpgsql;\n\ngrant execute on function public.get_subscription_details(uuid) to authenticated, service_role;\n\ncreate\nor replace function public.check_ticket_limit () returns trigger\nset search_path = ''\nas $$\ndeclare\n  subscription record;\n  ticket_count int;\n  max_tickets int;\nbegin\n  -- get the subscription details for the account\n  select *\n    into subscription\n    from public.get_subscription_details(NEW.account_id);\n\n  -- is the user on a free plan?\n  if subscription is null then\n    select count(*)\n      into ticket_count\n      from public.tickets\n      where account_id = NEW.account_id and\n      created_at >= now() - interval '30 days';\n\n    -- check if the user has exceeded the limit\n    if ticket_count >= 50 then\n      raise exception 'You have reached the maximum number of tickets allowed for your plan';\n    end if;\n\n    -- allow the user to create the ticket\n    return NEW;\n  end if;\n\n  -- get the max tickets allowed for the plan\n  select max_tickets\n    into max_tickets\n    from public.plans\n    where variant_id = subscription.variant_id;\n\n  -- Unlimited tickets for the plan, so allow the user to create the ticket\n  if max_tickets = -1 then\n    return NEW;\n  end if;\n\n  -- check the number of tickets created during the billing period\n  select count(*)\n    into ticket_count\n    from public.tickets\n    where account_id = NEW.account_id and\n    created_at >= subscription.period_starts_at and\n    created_at <= subscription.period_ends_at;\n\n  if ticket_count >= max_tickets then\n    raise exception 'You have reached the maximum number of tickets allowed for your plan';\n\n```\n\n----------------------------------------\n\nTITLE: Reporting Usage to Stripe Billing\nDESCRIPTION: Function that reports API usage to Stripe using their usage reporting API. It retrieves the customer's subscription information, gets the customer ID, and reports the usage for the 'api_requests' metric.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/billing_webhooks_credit_based_billing_lemon_squeezy_89.md#2025-04-22_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getBillingGatewayProvider } from '@kit/billing-gateway';\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\nimport { createAccountsApi } from '@kit/accounts/api';\n\nasync function reportUsageForApiRequests(\n  accountId: string,\n  quantity: number\n) {\n  // use the correct client: in this case, the server action client\n  const client = getSupabaseServerClient();\n  const api = createAccountsApi(client);\n\n  const subscription = await api.getSubscription(accountId);\n\n  // if the subscription is not active, we don't report usage\n  if (!subscription) {\n    throw new Error('No active subscription found');\n  }\n\n  // get the billing provider\n  const service = await getBillingGatewayProvider(this.client);\n  const customerId = await api.getCustomerId(accountId);\n\n  if (!customerId) {\n    throw new Error(`No customer ID found for account ${accountId}`);\n  }\n\n  // now we can report the usage to the billing provider\n  return service.reportUsage({\n    id: customerId,\n    eventName: 'api_requests',\n    usage: {\n      quantity,\n    }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Reporting Usage to Lemon Squeezy\nDESCRIPTION: Function for reporting API usage to Lemon Squeezy. It retrieves the subscription and line item information from the database, then reports the usage with the required subscription item ID and quantity.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/billing_webhooks_credit_based_billing_lemon_squeezy_89.md#2025-04-22_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getBillingGatewayProvider } from '@kit/billing-gateway';\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\nimport { createAccountsApi } from '@kit/accounts/api';\n\nasync function reportUsageForApiRequests(\n  accountId: string,\n  quantity: number\n) {\n  // use the correct client: in this case, the server action client\n  const client = getSupabaseServerClient();\n  const api = createAccountsApi(client);\n\n  const subscription = await api.getSubscription(accountId);\n\n  // if the subscription is not active, we don't report usage\n  if (!subscription) {\n    console.error('No active subscription found');\n    return;\n  }\n\n  // now, we need to find the line item the user is being charged for\n  // let's use Supabase for this!\n  // we use the product ID to identify the line item\n  // in your case, you have more choices to identify the line item\n  const {\n    data: subscriptionItem,\n    error\n  } = await client.from('subscription_items')\n    .select('id')\n    .eq('subscription_id', subscription.id)\n    .eq('product_id', 'starter-pro')\n    .eq('type', 'metered')\n    .single();\n\n  // get the billing provider\n  const service = await getBillingGatewayProvider(this.client);\n\n  // now we can report the usage to the billing provider\n  return service.reportUsage({\n    id: subscriptionItem.id,\n    usage: {\n      quantity,\n      action: 'increment'\n    }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Protecting API Routes with CSRF Token Middleware\nDESCRIPTION: Shows how to use the 'withCsrf' middleware to protect API routes from CSRF attacks. The middleware verifies the CSRF token sent in the request header before allowing the request to proceed.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/call_api_routes_from_client_csrf_token_guarding_api_routes_7.md#2025-04-22_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nimport { NextApiRequest, NextApiResponse } from \"next\";\n\nimport { withAuthedUser } from '~/core/middleware/with-authed-user';\nimport { withMethodsGuard } from '~/core/middleware/with-methods-guard';\nimport { withPipe } from '~/core/middleware/with-pipe';\nimport withCsrf from \"./with-csrf\";\n\nfunction helloWorldHandler(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n  res.status(200).json({ text: 'Hello' })\n}\n\nexport default withPipe(\n  withAuthedUser,\n  withMethodsGuard(['POST']),\n  withCsrf(),\n  helloWorldHandler,\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Pricing Table Structure for Stripe Integration in React/TSX\nDESCRIPTION: This code snippet demonstrates how to structure the pricing table configuration for a SaaS application with three subscription tiers (Basic, Pro, Premium), each with multiple plans. It includes configuration for display mode, product details, features, pricing information, and trial periods.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_configuration_stripe_one_time_payments_stripe_webhooks_82.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nstripe: {\n  embedded: true,\n  displayMode: StripeCheckoutDisplayMode.Popup,\n  products: [\n    {\n      name: 'Basic',\n      description: 'Description of your Basic plan',\n      badge: `Up to 20 users`,\n      features: [\n        'Basic Reporting',\n        'Up to 20 users',\n        '1GB for each user',\n        'Chat Support',\n      ],\n      plans: [\n        {\n          name: 'Monthly',\n          price: '$9',\n          stripePriceId: '<price_id>',\n          trialPeriodDays: 7,\n        },\n        {\n          name: 'Yearly',\n          price: '$90',\n          stripePriceId: '<price_id>',\n          trialPeriodDays: 7,\n        },\n      ],\n    },\n    {\n      name: 'Pro',\n      badge: `Most Popular`,\n      recommended: true,\n      description: 'Description of your Pro plan',\n      features: [\n        'Advanced Reporting',\n        'Up to 50 users',\n        '5GB for each user',\n        'Chat and Phone Support',\n      ],\n      plans: [\n        {\n          name: 'Monthly',\n          price: '$29',\n          stripePriceId: 'pro-plan-mth',\n          trialPeriodDays: 7,\n        },\n        {\n          name: 'Yearly',\n          price: '$200',\n          stripePriceId: 'pro-plan-yr',\n          trialPeriodDays: 7,\n        },\n      ],\n    },\n    {\n      name: 'Premium',\n      description: 'Description of your Premium plan',\n      badge: ``,\n      features: [\n        'Advanced Reporting',\n        'Unlimited users',\n        '50GB for each user',\n        'Account Manager',\n      ],\n      plans: [\n        {\n          name: '',\n          price: 'Contact us',\n          stripePriceId: '',\n          trialPeriodDays: 7,\n          label: `Contact us`,\n          href: `/contact`,\n        },\n      ],\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Multi-Step Form with Account Creation Flow\nDESCRIPTION: Full implementation of a three-step account creation form with account details, profile information, and review steps. Includes form validation, step navigation, and custom styling.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/multi_step_forms_page_shadcn_40.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { useForm } from 'react-hook-form';\nimport { z } from 'zod';\n\nimport { Button } from '@kit/ui/button';\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@kit/ui/form';\nimport { Input } from '@kit/ui/input';\nimport {\n  MultiStepForm,\n  MultiStepFormContextProvider,\n  MultiStepFormHeader,\n  MultiStepFormStep,\n  createStepSchema,\n  useMultiStepFormContext,\n} from '@kit/ui/multi-step-form';\nimport { Stepper } from '@kit/ui/stepper';\n\nconst FormSchema = createStepSchema({\n  account: z.object({\n    username: z.string().min(3),\n    email: z.string().email(),\n  }),\n  profile: z.object({\n    password: z.string().min(8),\n    age: z.coerce.number().min(18),\n  }),\n});\n\ntype FormValues = z.infer<typeof FormSchema>;\n\nexport function MultiStepFormDemo() {\n  const form = useForm<FormValues>({\n    resolver: zodResolver(FormSchema),\n    defaultValues: {\n      account: {\n        username: '',\n        email: '',\n      },\n      profile: {\n        password: '',\n      },\n    },\n    reValidateMode: 'onBlur',\n    mode: 'onBlur',\n  });\n\n  const onSubmit = (data: FormValues) => {\n    console.log('Form submitted:', data);\n  };\n\n  return (\n    <MultiStepForm\n      className={'space-y-10 p-8 rounded-xl border'}\n      schema={FormSchema}\n      form={form}\n      onSubmit={onSubmit}\n    >\n      <MultiStepFormHeader\n        className={'flex w-full flex-col justify-center space-y-6'}\n      >\n        <h2 className={'text-xl font-bold'}>Create your account</h2>\n\n        <MultiStepFormContextProvider>\n          {({ currentStepIndex }) => (\n            <Stepper\n              variant={'numbers'}\n              steps={['Account', 'Profile', 'Review']}\n              currentStep={currentStepIndex}\n            />\n          )}\n        </MultiStepFormContextProvider>\n      </MultiStepFormHeader>\n\n      <MultiStepFormStep name=\"account\">\n        <AccountStep />\n      </MultiStepFormStep>\n\n      <MultiStepFormStep name=\"profile\">\n        <ProfileStep />\n      </MultiStepFormStep>\n\n      <MultiStepFormStep name=\"review\">\n        <ReviewStep />\n      </MultiStepFormStep>\n    </MultiStepForm>\n  );\n}\n\nfunction AccountStep() {\n  const { form, nextStep, isStepValid } = useMultiStepFormContext();\n\n  return (\n    <Form {...form}>\n      <div className={'flex flex-col gap-4'}>\n        <FormField\n          name=\"account.username\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Username</FormLabel>\n              <FormControl>\n                <Input {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          name=\"account.email\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Email</FormLabel>\n              <FormControl>\n                <Input type=\"email\" {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <div className=\"flex justify-end\">\n          <Button onClick={nextStep} disabled={!isStepValid()}>\n            Next\n          </Button>\n        </div>\n      </div>\n    </Form>\n  );\n}\n\nfunction ProfileStep() {\n  const { form, nextStep, prevStep } = useMultiStepFormContext();\n\n  return (\n    <Form {...form}>\n      <div className={'flex flex-col gap-4'}>\n        <FormField\n          name=\"profile.password\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Password</FormLabel>\n              <FormControl>\n                <Input type=\"password\" {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          name=\"profile.age\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Age</FormLabel>\n              <FormControl>\n                <Input type=\"number\" {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <div className=\"flex justify-end space-x-2\">\n          <Button type={'button'} variant={'outline'} onClick={prevStep}>\n            Previous\n          </Button>\n\n          <Button onClick={nextStep}>Next</Button>\n        </div>\n      </div>\n    </Form>\n  );\n}\n\nfunction ReviewStep() {\n  const { prevStep, form } = useMultiStepFormContext<typeof FormSchema>();\n  const values = form.getValues();\n\n  return (\n    <div className={'flex flex-col space-y-4'}>\n      <div className={'flex flex-col space-y-4'}>\n        <div>Great! Please review the values.</div>\n\n        <div className={'flex flex-col space-y-2 text-sm'}>\n          <div>\n            <span>Username</span>: <span>{values.account.username}</span>\n          </div>\n          <div>\n            <span>Email</span>: <span>{values.account.email}</span>\n          </div>\n          <div>\n            <span>Age</span>: <span>{values.profile.age}</span>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"flex justify-end space-x-2\">\n        <Button type={'button'} variant={'outline'} onClick={prevStep}>\n          Back\n        </Button>\n\n        <Button type={'submit'}>Create Account</Button>\n      </div>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Updating RLS Policies for Tickets Table in SQL\nDESCRIPTION: These SQL snippets rewrite the delete and update policies for the tickets table, granting the 'owner' role permission to update and delete all tickets system-wide. The policies rely on the custom function public.has_permission, which is expected to be present in the schema, to determine if a user has the required permissions based on their account id and the operation to be performed. The policies target the 'authenticated' role and encapsulate necessary permission checks for both operations. Inputs are the user's authenticated ID and the ticket's account ID; output is row-level access control. Dependency: public.has_permission function and an established tickets table.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/database_4.md#2025-04-22_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy delete_tickets\n  on public.tickets\n  for delete\n  to authenticated\n  using (\n    public.has_permission((select auth.uid()), account_id, 'tickets.delete'::app_permissions)\n  );\n\ncreate policy update_tickets\n  on public.tickets\n  for update\n  to authenticated\n  using (\n    public.has_permission((select auth.uid()), account_id, 'tickets.update'::app_permissions)\n  )\n  with check (\n    public.has_permission((select auth.uid()), account_id, 'tickets.update'::app_permissions)\n  );\n```\n\n----------------------------------------\n\nTITLE: Creating Restrictive Row-Level Security Policy\nDESCRIPTION: SQL policy with the 'restrictive' keyword to enforce stricter access control. Restrictive policies take precedence over permissive policies and must be satisfied for any access to be granted, making them useful for global restrictions.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/server_actions_uploading_data_to_storage_writing_data_to_supabase_30.md#2025-04-22_snippet_21\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy \"Restrict write access to authenticated users\"\n  on users\n  as restrictive;\n  for insert\n  to authenticated\n  with check (id = auth.uid())\n```\n\n----------------------------------------\n\nTITLE: Applying Middleware to a Next.js API Route using withPipe in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to apply multiple middleware functions (`withAuthedUser`, `withActiveSubscription`) to a Next.js API route handler (`helloWorldHandler`) using the `withPipe` utility. It ensures that authentication and active subscription checks are performed sequentially before the main handler logic is executed for the `/api/hello` endpoint.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/call_api_routes_from_client_csrf_token_guarding_api_routes_7.md#2025-04-22_snippet_13\n\nLANGUAGE: ts\nCODE:\n```\nimport { NextApiRequest, NextApiResponse } from \"next\";\n\nimport { withAuthedUser } from '~/core/middleware/with-authed-user';\nimport { withActiveSubscription } from '~/core/middleware/with-active-subscription';\nimport { withPipe } from '~/core/middleware/with-pipe';\n\nfunction helloWorldHandler(req: NextApiRequest, res: NextApiResponse) {\n  res.status(200).json({ text: 'Hello' })\n}\n\nexport default withPipe(\n  withAuthedUser,\n  withActiveSubscription,\n  helloWorldHandler,\n);\n```\n\n----------------------------------------\n\nTITLE: Using Organization Query Hook in React Component\nDESCRIPTION: Example showing how to implement a React component that fetches organization data using a custom hook. The component handles loading states, error conditions, and successful data retrieval with proper TypeScript typing.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/architecture_auth_overview_auth_setup_29.md#2025-04-22_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useOrganizationQuery } from './use-organization-query';\n\nfunction OrganizationCard({ organizationId }) {\n  const {\n    data: organization,\n    isLoading,\n    error\n  } = useOrganizationQuery(organizationId);\n\n  /* data is loading */\n  if (isLoading) {\n    return <div>Loading...</div>\n  }\n\n  /* request errored */\n  if (error) {\n    return <div>Error!</div>\n  }\n\n  /* request successful, we can access \"organization\" */\n  return <div>{organization.name}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Cached Content Items Fetching Implementation\nDESCRIPTION: Implementation of a cached content fetching function with support for language, pagination, and sorting options.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/cms_api_cms_creating_your_own_cms_client_42.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createCmsClient } from '@kit/cms';\n\nconst getContentItems = cache(\n  async (language: string | undefined, limit: number, offset: number) => {\n    const client = await createCmsClient();\n\n    return client.getContentItems({\n      collection: 'posts',\n      limit,\n      offset,\n      language,\n      sortBy: 'publishedAt',\n      sortDirection: 'desc',\n    });\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Fetching Tasks with React Hook and Firestore\nDESCRIPTION: This code defines a React Hook, `useFetchTasks`, which fetches real-time task data for a given organization ID from Firestore. It uses the `reactfire` library to access Firestore and fetch collection data. The hook ensures that the task data is decorated with document IDs for unique identification. Prerequisites include `reactfire` and `firebase` setup.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/development_getting_started_environment_variables_firestore_data_fetching_74.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useFirestore, useFirestoreCollectionData } from 'reactfire';\n\nimport {\n  collection,\n  CollectionReference,\n  query,\n  where,\n} from 'firebase/firestore';\n\nimport { Task } from '~/lib/tasks/types/task';\n\nfunction useFetchTasks(organizationId: string) {\n  const firestore = useFirestore();\n  const tasksCollection = 'tasks';\n\n  const collectionRef = collection(\n    firestore,\n    tasksCollection\n  ) as CollectionReference<WithId<Task>>;\n\n  const path = `organizationId`;\n  const operator = '==';\n  const constraint = where(path, operator, organizationId);\n  const organizationsQuery = query(collectionRef, constraint);\n\n  return useFirestoreCollectionData(organizationsQuery, {\n    idField: 'id',\n  });\n}\n\nexport default useFetchTasks;\n```\n\n----------------------------------------\n\nTITLE: Handling Different Stripe Webhook Events\nDESCRIPTION: Switch statement that routes different Stripe webhook events to their appropriate handlers based on the event type.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_one_time_payments_stripe_webhooks_ci_tests_73.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nswitch (event.type) {\n  case StripeWebhooks.Completed: {\n    // handle completed\n  }\n\n  case StripeWebhooks.AsyncPaymentSuccess: {\n     // handle async payment success\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Client-side Task Creation Form with Server Action\nDESCRIPTION: React component implementing a form that creates tasks using Server Actions. Includes form validation, loading states, and navigation.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/server_actions_uploading_data_to_storage_writing_data_to_supabase_30.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n'use client';\n\nimport type { FormEventHandler } from 'react';\nimport { useCallback, useTransition } from 'react';\nimport { toast } from 'sonner';\nimport { useRouter } from 'next/navigation';\n\nimport TextField from '~/core/ui/TextField';\nimport Button from '~/core/ui/Button';\nimport If from '~/core/ui/If';\nimport useCurrentOrganization from '~/lib/organizations/hooks/use-current-organization';\nimport { createTaskAction } from '~/lib/tasks/actions';\nimport useCsrfToken from '~/core/hooks/use-csrf-token';\n\nconst CreateTaskForm = () => {\n  const [isMutating, startTransition] = useTransition();\n  const organization = useCurrentOrganization();\n  const organizationId = organization?.id as number;\n  const csrfToken = useCsrfToken();\n  const router = useRouter();\n\n  const onCreateTask: FormEventHandler<HTMLFormElement> = useCallback(\n    async (event) => {\n      event.preventDefault();\n\n      const target = event.currentTarget;\n      const data = new FormData(target);\n      const name = data.get('name') as string;\n      const dueDate = (data.get('dueDate') as string) || getDefaultDueDate();\n\n      if (name.trim().length < 3) {\n        toast.error('Task name must be at least 3 characters long');\n\n        return;\n      }\n\n      const task = {\n        organizationId,\n        name,\n        dueDate,\n        done: false,\n      };\n\n      startTransition(async () => {\n        await createTaskAction({ task, csrfToken });\n\n        router.push('../tasks');\n      });\n    },\n    [csrfToken, organizationId, router]\n  );\n\n  return (\n    <form onSubmit={onCreateTask}>\n      <div className={'flex flex-col space-y-2'}>\n        <TextField.Label>\n          Name\n          <TextField.Input\n            required\n            name={'name'}\n            placeholder={'ex. Launch on IndieHackers'}\n          />\n          <TextField.Hint>Hint: whatever you do, ship!</TextField.Hint>\n        </TextField.Label>\n\n        <TextField.Label>\n          Due date\n          <TextField.Input name={'dueDate'} type={'date'} />\n        </TextField.Label>\n\n        <div\n          className={\n            'flex flex-col space-y-2 md:flex-row md:space-x-2 md:space-y-0'\n          }\n        >\n          <Button loading={isMutating}>\n            <If condition={isMutating} fallback={<>Create Task</>}>\n              Creating Task...\n            </If>\n          </Button>\n\n          <Button color={'transparent'} href={'../tasks'}>\n            Go back\n          </Button>\n        </div>\n      </div>\n    </form>\n  );\n};\n\nfunction getDefaultDueDate() {\n  const date = new Date();\n  date.setDate(date.getDate() + 1);\n  date.setHours(23, 59, 59);\n\n  return date.toDateString();\n}\n\nexport default CreateTaskForm;\n```\n\n----------------------------------------\n\nTITLE: Configuring Subscription Plans with Lemon Squeezy in Remix Supabase\nDESCRIPTION: This code snippet demonstrates how to configure subscription plans using Lemon Squeezy in a Remix Supabase application. It includes setting up different plan tiers with features, pricing, and variant IDs for monthly and yearly options.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/updating_sidebar_menu_change_auth_strategy_setup_oauth_79.md#2025-04-22_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nsubscriptions: {\n  plans: [\n    {\n      name: 'Basic',\n      description: 'Description of your Basic plan',\n      badge: `Up to 20 users`,\n      features: [\n        'Basic Reporting',\n        'Up to 20 users',\n        '1GB for each user',\n        'Chat Support',\n      ],\n      plans: [\n        {\n          name: 'Monthly',\n          price: '$9',\n          variantID: '<your variant ID>',\n        },\n        {\n          name: 'Yearly',\n          price: '$90',\n           variantID: '<your variant ID>',\n        },\n      ],\n    },\n    {\n      name: 'Pro',\n      badge: `Most Popular`,\n      recommended: true,\n      description: 'Description of your Pro plan',\n      features: [\n        'Advanced Reporting',\n        'Up to 50 users',\n        '5GB for each user',\n        'Chat and Phone Support',\n      ],\n      plans: [\n        {\n          name: 'Monthly',\n          price: '$29',\n           variantID: '<your variant ID>',\n        },\n        {\n          name: 'Yearly',\n          price: '$200',\n          variantID: '<your variant ID>',\n        },\n      ],\n    },\n    {\n      name: 'Premium',\n      description: 'Description of your Premium plan',\n      badge: ``,\n      features: [\n        'Advanced Reporting',\n        'Unlimited users',\n        '50GB for each user',\n        'Account Manager',\n      ],\n      plans: [\n        {\n          name: '',\n          price: 'Contact us',\n          label: `Contact us`,\n          href: `/contact`,\n        },\n      ],\n    },\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Row Level Security Policies\nDESCRIPTION: Implementation of RLS policies for projects and project members tables to enforce access control at the database level.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/projects_data_model_53.md#2025-04-22_snippet_30\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy select_projects\n  on public.projects\n  for select\n  to authenticated\n  using (\n    public.is_project_member(id)\n  );\n\ncreate policy insert_new_project\n  on public.projects\n  for insert\n  to authenticated\n  with check (\n    public.has_role_on_account(account_id)\n  );\n\ncreate policy delete_project\n  on public.projects\n  for delete\n  to authenticated\n  using (\n    public.can_delete_project((select auth.uid()), id)\n  );\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Multi-Step Form with Account, Profile, and Review Steps\nDESCRIPTION: A complete implementation of a multi-step form with three steps: Account, Profile, and Review. It showcases form validation, step navigation, and integrates with Shadcn UI components. Includes a Stepper for progress tracking.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/multi_step_forms_page_stepper_91.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { useForm } from 'react-hook-form';\nimport { z } from 'zod';\n\nimport { Button } from '@kit/ui/button';\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@kit/ui/form';\nimport { Input } from '@kit/ui/input';\nimport {\n  MultiStepForm,\n  MultiStepFormContextProvider,\n  MultiStepFormHeader,\n  MultiStepFormStep,\n  createStepSchema,\n  useMultiStepFormContext,\n} from '@kit/ui/multi-step-form';\nimport { Stepper } from '@kit/ui/stepper';\n\nconst FormSchema = createStepSchema({\n  account: z.object({\n    username: z.string().min(3),\n    email: z.string().email(),\n  }),\n  profile: z.object({\n    password: z.string().min(8),\n    age: z.coerce.number().min(18),\n  }),\n});\n\ntype FormValues = z.infer<typeof FormSchema>;\n\nexport function MultiStepFormDemo() {\n  const form = useForm<FormValues>({\n    resolver: zodResolver(FormSchema),\n    defaultValues: {\n      account: {\n        username: '',\n        email: '',\n      },\n      profile: {\n        password: '',\n      },\n    },\n    reValidateMode: 'onBlur',\n    mode: 'onBlur',\n  });\n\n  const onSubmit = (data: FormValues) => {\n    console.log('Form submitted:', data);\n  };\n\n  return (\n    <MultiStepForm\n      className={'space-y-10 p-8 rounded-xl border'}\n      schema={FormSchema}\n      form={form}\n      onSubmit={onSubmit}\n    >\n      <MultiStepFormHeader\n        className={'flex w-full flex-col justify-center space-y-6'}\n      >\n        <h2 className={'text-xl font-bold'}>Create your account</h2>\n\n        <MultiStepFormContextProvider>\n          {({ currentStepIndex }) => (\n            <Stepper\n              variant={'numbers'}\n              steps={['Account', 'Profile', 'Review']}\n              currentStep={currentStepIndex}\n            />\n          )}\n        </MultiStepFormContextProvider>\n      </MultiStepFormHeader>\n\n      <MultiStepFormStep name=\"account\">\n        <AccountStep />\n      </MultiStepFormStep>\n\n      <MultiStepFormStep name=\"profile\">\n        <ProfileStep />\n      </MultiStepFormStep>\n\n      <MultiStepFormStep name=\"review\">\n        <ReviewStep />\n      </MultiStepFormStep>\n    </MultiStepForm>\n  );\n}\n\nfunction AccountStep() {\n  const { form, nextStep, isStepValid } = useMultiStepFormContext();\n\n  return (\n    <Form {...form}>\n      <div className={'flex flex-col gap-4'}>\n        <FormField\n          name=\"account.username\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Username</FormLabel>\n              <FormControl>\n                <Input {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          name=\"account.email\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Email</FormLabel>\n              <FormControl>\n                <Input type=\"email\" {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <div className=\"flex justify-end\">\n          <Button onClick={nextStep} disabled={!isStepValid()}>\n            Next\n          </Button>\n        </div>\n      </div>\n    </Form>\n  );\n}\n\nfunction ProfileStep() {\n  const { form, nextStep, prevStep } = useMultiStepFormContext();\n\n  return (\n    <Form {...form}>\n      <div className={'flex flex-col gap-4'}>\n        <FormField\n          name=\"profile.password\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Password</FormLabel>\n              <FormControl>\n                <Input type=\"password\" {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          name=\"profile.age\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Age</FormLabel>\n              <FormControl>\n                <Input type=\"number\" {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <div className=\"flex justify-end space-x-2\">\n          <Button type={'button'} variant={'outline'} onClick={prevStep}>\n            Previous\n          </Button>\n\n          <Button onClick={nextStep}>Next</Button>\n        </div>\n      </div>\n    </Form>\n  );\n}\n\nfunction ReviewStep() {\n  const { prevStep, form } = useMultiStepFormContext<typeof FormSchema>();\n  const values = form.getValues();\n\n  return (\n    <div className={'flex flex-col space-y-4'}>\n      <div className={'flex flex-col space-y-4'}>\n        <div>Great! Please review the values.</div>\n\n        <div className={'flex flex-col space-y-2 text-sm'}>\n          <div>\n            <span>Username</span>: <span>{values.account.username}</span>\n          </div>\n          <div>\n            <span>Email</span>: <span>{values.account.email}</span>\n          </div>\n          <div>\n            <span>Age</span>: <span>{values.profile.age}</span>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"flex justify-end space-x-2\">\n        <Button type={'button'} variant={'outline'} onClick={prevStep}>\n          Back\n        </Button>\n\n        <Button type={'submit'}>Create Account</Button>\n      </div>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Validating User Session in Remix Loader Function\nDESCRIPTION: Example of how to validate the user session in every page's loader function using the requireSession utility. This is necessary due to Remix's parallel loading optimization.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/navigating_codebase_running_the_application_technical_details_78.md#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nexport async function loader(\n  args: LoaderFunctionArgs\n) {\n  await requireSession(\n    getSupabaseServerClient(args.request),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Form with Zod Resolver\nDESCRIPTION: Shows the configuration of React Hook Form with Zod schema validation for the message form.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/data_fetching_3.md#2025-04-22_snippet_24\n\nLANGUAGE: tsx\nCODE:\n```\nconst form = useForm({\n  resolver: zodResolver(MessageFormSchema),\n  defaultValues: {\n    message: '',\n    ticketId,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing SDK in Route Handler\nDESCRIPTION: This snippet demonstrates how to initialize the Makerkit SDK within a Next.js route handler using the appropriate Supabase client.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/organization_sdk_organization_subscription_sdk_sdk_25.md#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport getSupabaseRouteHandlerClient from '~/core/supabase/route-handler-client';\nimport getSdk from '~/lib/sdk';\n\nexport async function GET() {\n  const client = getSupabaseRouteHandlerClient();\n  const sdk = getSdk(client);\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Project Detail Page in Next.js\nDESCRIPTION: This Next.js page component fetches and displays project details. It uses React Server Components and Supabase for data retrieval.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/projects_data_model_53.md#2025-04-22_snippet_40\n\nLANGUAGE: TSX\nCODE:\n```\nimport { use } from 'react';\n\nimport { getSupabaseServerComponentClient } from '@kit/supabase/server-component-client';\nimport { AppBreadcrumbs } from '@kit/ui/app-breadcrumbs';\nimport { PageBody, PageHeader } from '@kit/ui/page';\n\nimport { createProjectsService } from '~/lib/server/projects/projects.service';\n\ninterface ProjectDetailPageProps {\n  params: {\n    id: string;\n    account: string;\n  };\n}\n\nexport default function ProjectDetailPage({ params }: ProjectDetailPageProps) {\n  const client = getSupabaseServerComponentClient();\n  const service = createProjectsService(client);\n\n  const project = use(service.getProject(params.id));\n\n  return (\n    <></>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching the Signed-in User in Server Components - TypeScript/React\nDESCRIPTION: Provides a pattern for enforcing user session within a React Server Component using getSupabaseServerComponentClient and requireSession. Especially relevant for pages and data-loading hooks that require an authenticated user context.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/adding_app_pages_guarding_pages_updating_sidebar_menu_32.md#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nasync function PageComponent() {\n  const client = getSupabaseServerComponentClient();\n  const session = await requireSession(client);\n\n  // use session here\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handling with Zod SafeParse in Server Actions\nDESCRIPTION: Demonstrates a more graceful error handling approach using Zod's safeParse method in Server Actions, which returns an error object instead of throwing exceptions.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/user_roles_validating_api_input_zod_development_18.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n'use server';\n\nexport async function serverAction(\n  data: z.infer<\n    ReturnType<typeof getBodySchema>\n  >\n) {\n  // we can safely use data with the interface Body\n  const bodyResult = await getBodySchema().safeParseAsync(data);\n\n  if (bodyResult.success === false) {\n    return bodyResult.error;\n  }\n\n  const { displayName, email } = bodyResult.data;\n\n  return sendInvite({ displayName, email });\n}\n\nfunction getBodySchema() {\n  return z.object({\n    displayName: z.string(),\n    email: z.string().email(),\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Project Configuration in Next.js Firebase SaaS Kit\nDESCRIPTION: The main configuration file that stores non-secret application settings including site information, Firebase configuration, authentication options, navigation paths, and product/pricing details.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/environment_variables_setup_project_configuration_set_up_emails_9.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LayoutStyle } from '~/core/layout-style';\nimport { GoogleAuthProvider } from 'firebase/auth';\n\nenum Themes {\n  Light = 'light',\n  Dark = 'dark',\n}\n\nconst configuration = {\n  site: {\n    name: 'Awesomely - Your SaaS Title',\n    description: 'Your SaaS Description',\n    themeColor: '#ffffff',\n    themeColorDark: '#0a0a0a',\n    siteUrl: process.env.NEXT_PUBLIC_SITE_URL as string,\n    siteName: 'Awesomely',\n    twitterHandle: '',\n    githubHandle: '',\n    language: 'en',\n    convertKitFormId: '',\n    locale: process.env.DEFAULT_LOCALE,\n  },\n  firebase: {\n    apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,\n    authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,\n    projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,\n    storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,\n    messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,\n    appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID,\n    measurementId: process.env.NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID,\n  },\n  auth: {\n    // Enable MFA. You must upgrade to GCP Identity Platform to use it.\n    // see: https://cloud.google.com/identity-platform/docs/product-comparison\n    enableMultiFactorAuth: true,\n    // When enabled, users will be required to verify their email address\n    // before being able to access the app\n    requireEmailVerification:\n      process.env.NEXT_PUBLIC_REQUIRE_EMAIL_VERIFICATION === 'true',\n    // NB: Enable the providers below in the Firebase Console\n    // in your production project\n    providers: {\n      emailPassword: true,\n      phoneNumber: false,\n      emailLink: false,\n      oAuth: [GoogleAuthProvider],\n    },\n  },\n  environment: process.env.NEXT_PUBLIC_VERCEL_ENV ?? 'development',\n  emulatorHost: process.env.NEXT_PUBLIC_EMULATOR_HOST,\n  emulator: process.env.NEXT_PUBLIC_EMULATOR === 'true',\n  production: process.env.NODE_ENV === 'production',\n  features: {\n    enableThemeSwitcher: true,\n  },\n  theme: Themes.Dark,\n  paths: {\n    signIn: '/auth/sign-in',\n    signUp: '/auth/sign-up',\n    emailLinkSignIn: '/auth/link',\n    onboarding: `/onboarding`,\n    appHome: '/dashboard',\n    settings: {\n      profile: '/settings/profile',\n      authentication: '/settings/profile/authentication',\n      email: '/settings/profile/email',\n      password: '/settings/profile/password',\n    },\n    api: {\n      checkout: `/api/stripe/checkout`,\n      billingPortal: `/api/stripe/portal`,\n    },\n  },\n  navigation: {\n    style: LayoutStyle.Sidebar,\n  },\n  appCheckSiteKey: process.env.NEXT_PUBLIC_APPCHECK_KEY,\n  sentry: {\n    dsn: process.env.SENTRY_DSN,\n  },\n  stripe: {\n    products: [\n      {\n        name: 'Basic',\n        description: 'Description of your Basic plan',\n        badge: `Up to 20 users`,\n        features: [\n          'Basic Reporting',\n          'Up to 20 users',\n          '1GB for each user',\n          'Chat Support',\n        ],\n        plans: [\n          {\n            name: 'Monthly',\n            price: '$9',\n            stripePriceId: '<price_id>',\n          },\n          {\n            name: 'Yearly',\n            price: '$90',\n            stripePriceId: '<price_id>',\n          },\n        ],\n      },\n      {\n        name: 'Pro',\n        badge: `Most Popular`,\n        recommended: true,\n        description: 'Description of your Pro plan',\n        features: [\n          'Advanced Reporting',\n          'Up to 50 users',\n          '5GB for each user',\n          'Chat and Phone Support',\n        ],\n        plans: [\n          {\n            name: 'Monthly',\n            price: '$29',\n            stripePriceId: '<price_id>',\n          },\n          {\n            name: 'Yearly',\n            price: '$200',\n            stripePriceId: '<price_id>',\n          },\n        ],\n      },\n      {\n        name: 'Premium',\n        description: 'Description of your Premium plan',\n        badge: ``,\n        features: [\n          'Advanced Reporting',\n          'Unlimited users',\n          '50GB for each user',\n          'Account Manager',\n        ],\n        plans: [\n          {\n            name: '',\n            price: 'Contact us',\n            stripePriceId: '',\n            label: `Contact us`,\n            href: `/contact`,\n          },\n        ],\n      },\n    ],\n  },\n};\n\nexport default configuration;\n```\n\n----------------------------------------\n\nTITLE: Setting Up Loader for Task Detail Page in TypeScript\nDESCRIPTION: This code sets up the loader function for the Task Detail page in a Remix application. It fetches the task data using the getTask query and handles potential errors or missing data.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/supabase_data_fetching_supabase_data_writing_tailwind_css_86.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nexport const meta: MetaFunction = ({ data }) => {\n  return [\n    {\n      title: data.task.name,\n    },\n  ];\n};\n\nexport async function loader(args: LoaderArgs) {\n  const client = getSupabaseServerClient(args.request);\n  const taskId = args.params.task;\n\n  const { data: task, error } = await getTask(client, Number(taskId));\n\n  if (!task || error) {\n    return throwNotFoundException();\n  }\n\n  return json({\n    task,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Session Creation Hook in a React Component (TypeScript)\nDESCRIPTION: Shows how to consume the custom useCreateSession hook in a component for handling login/sign-in flows. Integrates UI feedback for loading, error, and success states, and invokes a trigger on receiving an ID token. Assumes SignInForm and useCreateSession are imported and properly implemented.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/custom_fetch_fetching_data_firestore_making_api_requests_4.md#2025-04-22_snippet_10\n\nLANGUAGE: TSX\nCODE:\n```\nimport { useCreateSession } from '~/core/hooks/use-create-session';\n\nfunction Component() {\n  const { trigger, ...mutationState } = useCreateSession();\n\n  return (\n    <>\n      { mutationState.isMutating ? `Mutating...` : null }\n      { mutationState.error ? `Error :(` : null }\n      { mutationState.data ? `Yay, success!` : null }\n\n      <SignInForm onSignIn={(idToken) => trigger({ idToken })} />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Example of Using Task Creation Hook\nDESCRIPTION: Shows a simple example of how to use the useCreateTaskMutation hook within a React component. The component passes the trigger function to a form component.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/running_project_supabase_data_fetching_supabase_data_writing_27.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Component() {\n  const createTaskMutation = useCreateTaskMutation();\n\n  return <MyForm onSubmit={task => createTaskMutation.trigger(task)} />\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Plan Picker Component in React with TypeScript\nDESCRIPTION: This code snippet defines a PlanPicker component that allows users to select a billing plan and optional addons. It uses React Hook Form for form management, Zod for schema validation, and custom UI components for rendering.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_billing_checkout_addons_subscription_entitlements_54.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\nimport { useMemo } from 'react';\n\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { ArrowRight, CheckCircle } from 'lucide-react';\nimport { useForm } from 'react-hook-form';\nimport { useTranslation } from 'react-i18next';\nimport { z } from 'zod';\n\nimport {\n  BillingConfig,\n  type LineItemSchema,\n  getPlanIntervals,\n  getPrimaryLineItem,\n  getProductPlanPair,\n} from '@kit/billing';\nimport { formatCurrency } from '@kit/shared/utils';\nimport { Badge } from '@kit/ui/badge';\nimport { Button } from '@kit/ui/button';\nimport { Checkbox } from '@kit/ui/checkbox';\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@kit/ui/form';\nimport { If } from '@kit/ui/if';\nimport { Label } from '@kit/ui/label';\nimport {\n  RadioGroup,\n  RadioGroupItem,\n  RadioGroupItemLabel,\n} from '@kit/ui/radio-group';\nimport { Separator } from '@kit/ui/separator';\nimport { Trans } from '@kit/ui/trans';\nimport { cn } from '@kit/ui/utils';\n\nimport { LineItemDetails } from './line-item-details';\n\nconst AddonSchema = z.object({\n  name: z.string(),\n  id: z.string(),\n  productId: z.string(),\n  planId: z.string(),\n  cost: z.number(),\n});\n\ntype OnSubmitData = {\n  planId: string;\n  productId: string;\n  addons: z.infer<typeof AddonSchema>[];\n};\n\nexport function PlanPicker(\n  props: React.PropsWithChildren<{\n    config: BillingConfig;\n    onSubmit: (data: OnSubmitData) => void;\n    canStartTrial?: boolean;\n    pending?: boolean;\n  }>,\n) {\n  const { t } = useTranslation(`billing`);\n\n  const intervals = useMemo(\n    () => getPlanIntervals(props.config),\n    [props.config],\n  ) as string[];\n\n  const form = useForm({\n    reValidateMode: 'onChange',\n    mode: 'onChange',\n    resolver: zodResolver(\n      z\n        .object({\n          planId: z.string(),\n          productId: z.string(),\n          interval: z.string().optional(),\n          addons: z.array(AddonSchema).optional(),\n        })\n        .refine(\n          (data) => {\n            try {\n              const { product, plan } = getProductPlanPair(\n                props.config,\n                data.planId,\n              );\n\n              return product && plan;\n            } catch {\n              return false;\n            }\n          },\n          { message: t('noPlanChosen'), path: ['planId'] },\n        ),\n    ),\n    defaultValues: {\n      interval: intervals[0],\n      planId: '',\n      productId: '',\n      addons: [] as z.infer<typeof AddonSchema>[],\n    },\n  });\n\n  const { interval: selectedInterval } = form.watch();\n  const planId = form.getValues('planId');\n\n  const { plan: selectedPlan, product: selectedProduct } = useMemo(() => {\n    try {\n      return getProductPlanPair(props.config, planId);\n    } catch {\n      return {\n        plan: null,\n        product: null,\n      };\n    }\n  }, [props.config, planId]);\n\n  const addons = form.watch('addons');\n\n  const onAddonAdded = (data: z.infer<typeof AddonSchema>) => {\n    form.setValue('addons', [...addons, data], { shouldValidate: true });\n  };\n\n  const onAddonRemoved = (id: string) => {\n    form.setValue(\n      'addons',\n      addons.filter((item) => item.id !== id),\n      { shouldValidate: true },\n    );\n  };\n\n  // display the period picker if the selected plan is recurring or if no plan is selected\n  const isRecurringPlan =\n    selectedPlan?.paymentType === 'recurring' || !selectedPlan;\n\n  const locale = useTranslation().i18n.language;\n\n  return (\n    <Form {...form}>\n      <div\n        className={\n          'flex flex-col space-y-4 lg:flex-row lg:space-x-4 lg:space-y-0'\n        }\n      >\n        <form\n          className={'flex w-full max-w-xl flex-col space-y-6'}\n          onSubmit={form.handleSubmit(props.onSubmit)}\n        >\n          <If condition={intervals.length}>\n            <div\n              className={cn('transition-all', {\n                ['pointer-events-none opacity-50']: !isRecurringPlan,\n              })}\n            >\n              <FormField\n                name={'interval'}\n                render={({ field }) => {\n                  return (\n                    <FormItem className={'rounded-md border p-4'}>\n                      <FormLabel htmlFor={'plan-picker-id'}>\n                        <Trans i18nKey={'common:billingInterval.label'} />\n                      </FormLabel>\n\n                      <FormControl id={'plan-picker-id'}>\n                        <RadioGroup name={field.name} value={field.value}>\n                          <div className={'flex space-x-2.5'}>\n                            {intervals.map((interval) => {\n                              const selected = field.value === interval;\n\n                              return (\n                                <label\n                                  htmlFor={interval}\n                                  key={interval}\n                                  className={cn(\n                                    'flex items-center space-x-2 rounded-md border border-transparent px-4 py-2 transition-colors',\n                                    {\n                                      ['border-primary']: selected,\n                                      ['hover:border-primary']: !selected,\n                                    },\n                                  )}\n                                >\n                                  <RadioGroupItem\n                                    id={interval}\n                                    value={interval}\n                                    onClick={() => {\n                                      form.setValue('interval', interval, {\n                                        shouldValidate: true,\n                                      });\n\n                                      form.setValue('addons', [], {\n                                        shouldValidate: true,\n                                      });\n\n                                      if (selectedProduct) {\n                                        const plan = selectedProduct.plans.find(\n                                          (item) => item.interval === interval,\n                                        );\n\n                                        form.setValue(\n                                          'planId',\n                                          plan?.id ?? '',\n                                          {\n                                            shouldValidate: true,\n                                            shouldDirty: true,\n                                            shouldTouch: true,\n                                          },\n                                        );\n                                      }\n                                    }}\n                                  />\n\n                                  <span\n                                    className={cn('text-sm', {\n                                      ['cursor-pointer']: !selected,\n                                    })}\n                                  >\n                                    <Trans\n                                      i18nKey={`billing:billingInterval.${interval}`}\n                                    />\n                                  </span>\n                                </label>\n                              );\n                            })}\n                          </div>\n                        </RadioGroup>\n                      </FormControl>\n\n                      <FormMessage />\n                    </FormItem>\n                  );\n                }}\n              />\n            </div>\n          </If>\n\n          <FormField\n            name={'planId'}\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>\n                  <Trans i18nKey={'common:planPickerLabel'} />\n                </FormLabel>\n\n                <FormControl>\n                  <RadioGroup value={field.value} name={field.name}>\n                    {props.config.products.map((product) => {\n                      const plan = product.plans.find((item) => {\n                        if (item.paymentType === 'one-time') {\n                          return true;\n                        }\n\n                        return item.interval === selectedInterval;\n                      });\n\n                      if (!plan || plan.custom) {\n                        return null;\n                      }\n\n                      const planId = plan.id;\n                      const selected = field.value === planId;\n\n                      const primaryLineItem = getPrimaryLineItem(\n                        props.config,\n                        planId,\n                      );\n\n                      if (!primaryLineItem) {\n                        throw new Error(`Base line item was not found`);\n                      }\n\n                      return (\n                        <RadioGroupItemLabel\n                          selected={selected}\n                          key={primaryLineItem.id}\n                        >\n                          <RadioGroupItem\n                            data-test-plan={plan.id}\n                            key={plan.id + selected}\n                            id={plan.id}\n                            value={plan.id}\n                            onClick={() => {\n                              if (selected) {\n                                return;\n                              }\n\n                              form.setValue('planId', planId, {\n                                shouldValidate: true,\n                              });\n\n                              form.setValue('productId', product.id, {\n                                shouldValidate: true,\n\n```\n\n----------------------------------------\n\nTITLE: Creating user_has_project_permission Function in Supabase\nDESCRIPTION: Creates a function that determines if a user has permission to perform a specific action on a project based on their role. Implements role-based access control with varying permission levels for owner, admin, and member roles.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/projects_data_model_53.md#2025-04-22_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nCREATE OR REPLACE FUNCTION public.user_has_project_permission(\n  p_user_auth_id UUID,\n  p_project_id UUID,\n  p_action public.project_action\n)\nRETURNS BOOLEAN\nSET search_path = ''\nAS $$\nDECLARE\n  v_role public.project_role;\nBEGIN\n  -- First, check if the user is a member of the project\n  SELECT role INTO v_role\n  FROM public.project_members\n  WHERE project_id = p_project_id AND user_id = p_user_auth_id;\n\n  IF v_role IS NULL THEN\n    RETURN FALSE;\n  END IF;\n\n  -- Check permissions based on role and action\n  CASE v_role\n    WHEN 'owner' THEN\n      RETURN TRUE;  -- Owners can do everything\n    WHEN 'admin' THEN\n      RETURN p_action != 'delete_project';  -- Admins can do everything except delete the project\n    WHEN 'member' THEN\n      RETURN p_action IN ('view_project');\n    ELSE\n      RAISE EXCEPTION 'User must be a member of the project to perform this action';\n  END CASE;\nEND;\n$$ LANGUAGE plpgsql;\n\nGRANT EXECUTE ON FUNCTION public.user_has_project_permission TO authenticated;\n```\n\n----------------------------------------\n\nTITLE: React Email Template Implementation\nDESCRIPTION: Example of creating an email template using react.email library for member invitations.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/uploading_data_to_storage_writing_data_to_supabase_data_fetching_77.md#2025-04-22_snippet_28\n\nLANGUAGE: tsx\nCODE:\n```\ninterface Props {\n  organizationName: string;\n  organizationLogo?: string;\n  inviter: Maybe<string>;\n  invitedUserEmail: string;\n  link: string;\n  productName: string;\n}\n\nexport default function renderInviteEmail(props: Props) {\n  const title = `You have been invited to join ${props.organizationName}`;\n\n  return render(\n    <Html>\n      <Head>\n        <title>{title}</title>\n      </Head>\n      <Preview>{title}</Preview>\n      <Body style={{ width: '500px', margin: '0 auto', font: 'helvetica' }}>\n        <EmailNavbar />\n        <Section style={{ width: '100%' }}>\n          <Column>\n            <Text>Hi,</Text>\n\n            <Text>\n              {props.inviter} with {props.organizationName} has invited you to\n              use {props.productName} to collaborate with them.\n            </Text>\n\n            <Text>\n              Use the button below to set up your account and get started:\n            </Text>\n          </Column>\n        </Section>\n\n        <Section>\n          <Column align=\"center\">\n            <CallToActionButton href={props.link}>\n              Join {props.organizationName}\n            </CallToActionButton>\n          </Column>\n        </Section>\n\n        <Section>\n          <Column>\n            <Text>Welcome aboard,</Text>\n            <Text>The {props.productName} Team</Text>\n          </Column>\n        </Section>\n      </Body>\n    </Html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: API Payload Validation with Zod Schema Definition\nDESCRIPTION: Defines a Zod schema for validating API request payloads, ensuring that the API receives data in the expected format. The schema validates that the payload contains a display name as a string and a properly formatted email address.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/user_sdk_sdk_ci_tests_84.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nfunction getBodySchema() {\n  return z.object({\n    displayName: z.string(),\n    email: z.string().email(),\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Using Supabase Client in Server Actions\nDESCRIPTION: This example shows how to use the Supabase client within a Server Action using the getSupabaseServerActionClient function with the 'use server' directive.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/deploying_production_environment_variables_functions_26.md#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n'use server';\n\nimport getSupabaseServerActionClient from '~/core/supabase/server-action-client';\n\nexport async function serverAction() {\n  const client = getSupabaseServerActionClient();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Stripe Payment Plans\nDESCRIPTION: Configuration object for Stripe payment plans including product tiers (Basic, Pro, Premium) with monthly and yearly pricing options. Each plan includes features, pricing details, and Stripe price IDs.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/reading_document_reading_documents_list_creating_document_8.md#2025-04-22_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nstripe: {\n  products: [\n    {\n      name: 'Basic',\n      description: 'Description of your Basic plan',\n      badge: `Up to 20 users`,\n      features: [\n        'Basic Reporting',\n        'Up to 20 users',\n        '1GB for each user',\n        'Chat Support',\n      ],\n      plans: [\n        {\n          name: 'Monthly',\n          price: '$9',\n          stripePriceId: '<price_id>',\n          trialPeriodDays: 7,\n        },\n        {\n          name: 'Yearly',\n          price: '$90',\n          stripePriceId: '<price_id>',\n          trialPeriodDays: 7,\n        },\n      ],\n    },\n    {\n      name: 'Pro',\n      badge: `Most Popular`,\n      recommended: true,\n      description: 'Description of your Pro plan',\n      features: [\n        'Advanced Reporting',\n        'Up to 50 users',\n        '5GB for each user',\n        'Chat and Phone Support',\n      ],\n      plans: [\n        {\n          name: 'Monthly',\n          price: '$29',\n          stripePriceId: 'pro-plan-mth',\n          trialPeriodDays: 7,\n        },\n        {\n          name: 'Yearly',\n          price: '$200',\n          stripePriceId: 'pro-plan-yr'\n        },\n      ],\n    },\n    {\n      name: 'Premium',\n      description: 'Description of your Premium plan',\n      badge: ``,\n      features: [\n        'Advanced Reporting',\n        'Unlimited users',\n        '50GB for each user',\n        'Account Manager',\n      ],\n      plans: [\n        {\n          name: '',\n          price: 'Contact us',\n          stripePriceId: '',\n          label: `Contact us`,\n          href: `/contact`,\n        },\n      ],\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling RLS and Creating Role-Check Function for Messages Table in SQL\nDESCRIPTION: This set of SQL snippets enables row level security (RLS) on the public.messages table and defines a custom function, public.has_role_on_ticket_account, to encapsulate permission logic. The function checks whether the authenticated user holds a role on the account associated with the given ticket_id, and is used in subsequent RLS policies to gate access. The function is marked stable and execution is granted to 'authenticated'. Dependencies include the tickets table and an existing has_role_on_account(uuid) function.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/database_4.md#2025-04-22_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\n-- enable row level security on the messages table\nalter table public.messages enable row level security;\n```\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace function public.has_role_on_ticket_account(ticket_id uuid)\n  returns boolean\n  set search_path = ''\n  as $$\n  begin\n    return exists (\n      select 1\n      from public.tickets ticket\n      where ticket.id = ticket_id\n      and public.has_role_on_account(ticket.account_id)\n    );\n  end;\n  $$ language plpgsql stable;\n\ngrant execute on function public.has_role_on_ticket_account(uuid) to authenticated;\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Analytics Provider in TypeScript\nDESCRIPTION: Example of using a custom analytics provider for tracking user events and identities in a Makerkit project.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/analytics_api_custom_analytics_provider_google_analytics_provider_57.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { analytics } from '@kit/analytics';\n\nvoid analytics.identify('user123', { name: 'John Doe' });\nvoid analytics.trackEvent('Button Clicked', { buttonName: 'Submit' });\n```\n\n----------------------------------------\n\nTITLE: Fetching and Displaying Ticket Messages with React Query in TypeScript/React\nDESCRIPTION: Implements a React component, `TicketMessagesContainer`, which fetches ticket messages using a custom `useFetchTicketMessages` hook built on React Query's `useInfiniteQuery`. Supports paginated data loading from Supabase and displays messages per ticket. Utilizes several UI library components and a utility for styling. Includes optimistic UI updating through `useAppendNewMessage` and prepares for message form validation and new-message server action. Required dependencies: React, React Query, Supabase client hooks, React Hook Form, and UI kit components. Main inputs are `ticketId` and page number; output is a full UI for ticket messages including reply capability (dependent on further implementation of validation and server logic). The component gracefully manages loading, error, and empty states and is designed to be used in a Next.js app as a client-side component.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/data_fetching_3.md#2025-04-22_snippet_3\n\nLANGUAGE: TSX\nCODE:\n```\n\"'use client';\\n\\nimport { useState, useTransition, useCallback, useRef, useEffect } from 'react';\\n\\nimport { zodResolver } from '@hookform/resolvers/zod';\\nimport { useInfiniteQuery, useQueryClient } from '@tanstack/react-query';\\nimport { useForm } from 'react-hook-form';\\n\\nimport { useSupabase } from '@kit/supabase/hooks/use-supabase';\\nimport { Alert, AlertTitle } from '@kit/ui/alert';\\nimport { Button } from '@kit/ui/button';\\nimport { Input } from '@kit/ui/input';\\nimport { LoadingOverlay } from '@kit/ui/loading-overlay';\\nimport { cn } from '@kit/ui/utils';\\n\\nimport { Tables } from '~/lib/database.types';\\n\\n// import { MessageFormSchema } from '../_lib/schema/message-form.schema';\\n// import { insertTicketMessageAction } from '../_lib/server/server-actions';\\n\\ntype Message = Tables<'messages'> & {\\n  account: {\\n    email: string;\\n    name: string;\\n    picture_url: string;\\n  };\\n};\\n\\nexport function TicketMessagesContainer(props: {\\n  ticketId: string;\\n  page: number;\\n}) {\\n  const [state] = useState<{\\n    page: number;\\n  }>({\\n    page: props.page,\\n  });\\n\\n  const scrollingDiv = useRef<HTMLDivElement | null>(null);\\n  const queryKey = ['ticket-messages', props.ticketId, props.page.toString()];\\n  const appendMessage = useAppendNewMessage({ queryKey });\\n\\n  const { status, data } = useFetchTicketMessages({\\n    ticketId: props.ticketId,\\n    page: state.page,\\n    queryKey,\\n  });\\n\\n  useEffect(() => {\\n    if (scrollingDiv.current) {\\n      scrollingDiv.current.scrollTo({\\n        top: scrollingDiv.current.scrollHeight,\\n      });\\n    }\\n  }, [data]);\\n\\n  if (status === 'pending') {\\n    return (\\n      <LoadingOverlay fullPage={false}>Loading messages...</LoadingOverlay>\\n    );\\n  }\\n\\n  if (status === 'error') {\\n    return (\\n      <Alert variant={'destructive'}>\\n        <AlertTitle>Error loading messages</AlertTitle>\\n      </Alert>\\n    );\\n  }\\n\\n  return (\\n    <div className={'flex flex-1 flex-col relative'}>\\n      <div\\n        ref={ref => {\\n          scrollingDiv.current = ref;\\n        }}\\n        className={'flex flex-col gap-4 pb-24 overflow-y-auto h-full w-full absolute'}\\n      >\\n        {data.pages.map((page) => {\\n          return page.map((message) => (<TicketMessage key={message.id} message={message} />));\\n        })}\\n      </div>\\n\\n      <SendMessageInput\\n        ticketId={props.ticketId}\\n        onMessageSent={appendMessage}\\n      />\\n    </div>\\n  );\\n}\\n\\nfunction SendMessageInput({\\n  onMessageSent,\\n  ticketId,\\n}: {\\n  ticketId: string;\\n  onMessageSent: (message: Tables<'messages'>) => void;\\n}) {\\n  const [pending, startTransition] = useTransition();\\n\\n  const form = useForm({\\n    // resolver: zodResolver(MessageFormSchema),\\n    defaultValues: {\\n      message: '',\\n      ticketId,\\n    },\\n  });\\n\\n  return (\\n    <form\\n      className={'sticky bottom-8 mt-auto z-10'}\\n      onSubmit={form.handleSubmit((data) => {\\n        startTransition(async () => {\\n          // const message = await insertTicketMessageAction(data);\\n\\n          // onMessageSent(message);\\n        });\\n      })}\\n    >\\n      <Input\\n        {...form.register('message')}\\n        disabled={pending}\\n        placeholder={'Send a reply...'}\\n        type=\\\"text\\\"\\n        className={'h-16 border pr-36 bg-background focus:shadow-xl'}\\n      />\\n\\n      <Button disabled={pending} className={'absolute right-4 top-3.5'}>\\n        Send\\n      </Button>\\n    </form>\\n  );\\n}\\n\\nfunction TicketMessage(props: { message: Message }) {\\n  const author = props.message.author;\\n  const content = props.message.content;\\n  const account = props.message.account;\\n\\n  const alignClassname = cn('flex w-full lg:w-6/12', {\\n    'self-end justify-end': author === 'support',\\n    'self-start': author === 'customer',\\n  });\\n\\n  const className = cn('rounded-lg w-full border flex gap-4 p-2.5', {\\n    'bg-primary/5 text-primary-900 dark:bg-primary/90': author === 'support',\\n  });\\n\\n  const authorName =\\n    author === 'customer'\\n      ? 'Customer'\\n      : account?.name || account?.email || `Support`;\\n\\n  const date = new Date(props.message.created_at);\\n\\n  return (\\n    <div className={alignClassname}>\\n      <div className={'flex max-w-full w-auto flex-col gap-2'}>\\n        <div className={'flex flex-col'}>\\n          <div className={'font-medium text-sm capitalize'}>\\n            {authorName}\\n          </div>\\n\\n          <div>\\n            <span className={'text-xs text-muted-foreground'}>\\n              Sent on {date.toLocaleString('en-US')}\\n            </span>\\n          </div>\\n        </div>\\n\\n        <div className={className}>\\n          <p className={'inline-block break-words text-sm'}>{content}</p>\\n        </div>\\n      </div>\\n    </div>\\n  );\\n}\\n\\nfunction useAppendNewMessage(params: { queryKey: string[] }) {\\n  const queryClient = useQueryClient();\\n  const { queryKey } = params;\\n\\n  return useCallback(\\n    (message: Tables<'messages'>) => {\\n      queryClient.setQueryData(\\n        queryKey,\\n        (data: { pages: Array<Tables<'messages'>[]> }) => {\\n          // append message to the last page\\n          const lastPage = [...data.pages[data.pages.length - 1]!, message];\\n\\n          return {\\n            ...data,\\n            // replace the last page\\n            pages: [...data.pages.slice(0, -1), lastPage],\\n          };\\n        },\\n      );\\n    },\\n    [queryClient, queryKey],\\n  );\\n}\\n\\nfunction useFetchTicketMessages(params: {\\n  ticketId: string;\\n  page: number;\\n  queryKey: string[];\\n}) {\\n  const client = useSupabase();\\n\\n  const { ticketId, page } = params;\\n  const messagesPerPage = 25;\\n\\n  const queryFn = async () => {\\n    const startOffset = (page - 1) * messagesPerPage;\\n    const endOffset = startOffset + messagesPerPage;\\n\\n    const { data: messages, error } = await client\\n      .from('messages')\\n      .select<\\n        string,\\n        Message\\n      >('*, account: author_account_id (email, name, picture_url)')\\n      .eq('ticket_id', ticketId)\\n      .order('created_at', { ascending: true })\\n      .range(startOffset, endOffset);\\n\\n    if (error) {\\n      throw error;\\n    }\\n\\n    return messages;\\n  };\\n\\n  return useInfiniteQuery({\\n    queryKey: params.queryKey,\\n    queryFn,\\n    initialPageParam: page,\\n    getNextPageParam: (lastPage, _, lastPageParam) => {\\n      if (lastPage.length === 0) {\\n        return;\\n      }\\n\\n      return lastPageParam + 1;\\n    },\\n    getPreviousPageParam: (_, __, firstPageParam) => {\\n      if (firstPageParam <= 1) {\\n        return;\\n      }\\n\\n      return firstPageParam - 1;\\n    },\\n  });\\n}\\n\"\n```\n\n----------------------------------------\n\nTITLE: Creating Project Detail Layout in Next.js\nDESCRIPTION: This Next.js layout component for project details includes a navigation menu and fetches project data. It uses React Server Components and custom UI components.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/projects_data_model_53.md#2025-04-22_snippet_38\n\nLANGUAGE: TSX\nCODE:\n```\nimport { use } from 'react';\n\nimport { AppBreadcrumbs } from '@kit/ui/app-breadcrumbs';\nimport {\n  BorderedNavigationMenu,\n  BorderedNavigationMenuItem,\n} from '@kit/ui/bordered-navigation-menu';\nimport { PageBody, PageHeader } from '@kit/ui/page';\n\nimport { getProject } from './_lib/server/get-project';\n\ninterface ProjectDetailLayoutProps {\n  params: {\n    id: string;\n    account: string;\n  };\n}\n\nexport default function ProjectDetailLayout({\n  params,\n  children,\n}: React.PropsWithChildren<ProjectDetailLayoutProps>) {\n  const project = use(getProject(params.id));\n\n  return (\n    <>\n      <PageHeader\n        title={project.name}\n        description={<AppBreadcrumbs values={{ [project.id]: project.name }} />}\n      />\n\n      <PageBody>\n        <div className={'border-b px-4 pb-2.5'}>\n          <BorderedNavigationMenu>\n            <BorderedNavigationMenuItem\n              path={`/home/${params.account}/projects/${project.id}`}\n              label={'Documents'}\n            />\n\n            <BorderedNavigationMenuItem\n              path={`/home/${params.account}/projects/${project.id}/members`}\n              label={'Members'}\n            />\n          </BorderedNavigationMenu>\n        </div>\n\n        {children}\n      </PageBody>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Task Detail Container Component\nDESCRIPTION: Implements a client component for rendering and handling task update form. Uses Remix's useFetcher hook for form submission and manages form state for task updates.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/supabase_data_fetching_supabase_data_writing_tailwind_css_86.md#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nfunction TaskItemContainer({\n  task,\n}: React.PropsWithChildren<{\n  task: Task;\n}>) {\n  const fetcher = useFetcher();\n  const isSubmitting = fetcher.state === 'submitting';\n\n  const onUpdate: FormEventHandler<HTMLFormElement> = useCallback(\n    (e) => {\n      e.preventDefault();\n\n      const data = new FormData(e.currentTarget);\n      const name = data.get('name') as string;\n      const description = data.get('description') as string;\n\n      fetcher.submit(\n        {\n          name,\n          description,\n        },\n        {\n          method: 'PUT',\n          encType: 'application/json',\n        },\n      );\n    },\n    [fetcher],\n  );\n\n  return (\n    <form onSubmit={onUpdate}>\n      <div className={'flex flex-col space-y-4 max-w-xl'}>\n        <Heading type={2}>{task.name}</Heading>\n\n        <TextField.Label>\n          Name\n          <TextField.Input required name={'name'} defaultValue={task.name} />\n        </TextField.Label>\n\n        <Label>\n          Description\n          <Textarea\n            className={'h-32'}\n            name={'description'}\n            defaultValue={task.description}\n          />\n        </Label>\n\n        <div className={'flex space-x-2 justify-between'}>\n          <Button href={'../tasks'} color={'transparent'}>\n            <span className={'flex space-x-2 items-center'}>\n              <ChevronLeftIcon className={'w-4'} />\n              <span>Back to Tasks</span>\n            </span>\n          </Button>\n\n          <Button loading={isSubmitting}>Update Task</Button>\n        </div>\n      </div>\n    </form>\n  );\n```\n\n----------------------------------------\n\nTITLE: Defining Global Configuration in Next.js Supabase\nDESCRIPTION: This code snippet shows the structure of the global configuration file for a MakerKit application using Next.js and Supabase. It includes settings for site details, paths, authentication, environment, features, and Stripe products.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/auth_setup_authentication_blog_16.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  site: {\n    name: '',\n    description: '',\n    themeColor: '#ffffff',\n    themeColorDark: '#0a0a0a',\n    siteUrl: process.env.NEXT_PUBLIC_SITE_URL,\n    siteName: '',\n    twitterHandle: '',\n    githubHandle: '',\n    language: 'en',\n    convertKitFormId: '',\n    locale: process.env.NEXT_PUBLIC_DEFAULT_LOCALE,\n  },\n  paths: {\n    signIn: '/auth/sign-in',\n    signUp: '/auth/sign-up',\n    emailLinkSignIn: '/auth/link',\n    onboarding: `/onboarding`,\n    appHome: '/tasks',\n    settings: {\n      profile: '/settings/profile',\n      authentication: '/settings/profile/authentication',\n      email: '/settings/profile/email',\n      password: '/settings/profile/password',\n    },\n    api: {\n      checkout: `/api/stripe/checkout`,\n      billingPortal: `/api/stripe/portal`,\n      organizations: {\n        create: `/api/organizations`,\n        current: `/api/organizations/[organization]/current`,\n        transferOwnership: `/api/organizations/owner`,\n        members: `/api/organizations/members`,\n        member: `/api/organizations/members/[member]`,\n      },\n    },\n  },\n  auth: {\n    requireEmailConfirmation:\n      process.env.NEXT_PUBLIC_REQUIRE_EMAIL_CONFIRMATION === 'true',\n    // NB: Enable the providers below in the Supabase Console\n    // in your production project\n    providers: {\n      emailPassword: true,\n      phoneNumber: false,\n      emailLink: false,\n      oAuth: ['google'],\n    },\n  },\n  environment: process.env.NEXT_PUBLIC_ENVIRONMENT,\n  production: process.env.NODE_ENV === 'production',\n  features: {\n    enableThemeSwitcher: true,\n  },\n  theme: Themes.Light,\n  stripe: {\n    products: [\n      {\n        name: 'Basic',\n        description: 'Describe your basic plan',\n        plans: [\n          {\n            price: '$249/year',\n            stripePriceId: '<STRIPE_PRICE_ID>',\n          }\n        ],\n      },\n      {\n        name: 'Pro',\n        description: 'Describe your pro plan',\n        plans: [\n          {\n            price: '$249/year',\n            stripePriceId: '<STRIPE_PRICE_ID>',\n          }\n        ],\n      },\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Imperatively Invoking Task Creation via useTransition in React (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use React's useTransition hook to invoke createTaskAction imperatively instead of via a form. It securely injects a CSRF token and allows programmatic submission, ideal for custom or dynamic UI flows. Required dependencies: useTransition, useCsrfToken, and createTaskAction. Inputs: task object and csrfToken. Output: Initiates task creation asynchronously with proper user feedback (pending state).\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/adding_app_pages_guarding_pages_updating_sidebar_menu_32.md#2025-04-22_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useTransition } from \"react\";\nimport useCsrfToken from '~/core/hooks/use-csrf-token';\n\nconst [isPending, starTransition] = useTransition()\n\nconst onSubmit = (task: Task) => {\n  startTransition(async () => {\n    await createTaskAction({ task, csrfToken });\n  })\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic React Router Loader with Supabase (TypeScript)\nDESCRIPTION: Illustrates the basic structure of a React Router loader function. It receives `Route.LoaderArgs`, gets a Supabase client using `getSupabaseServerClient`, fetches data (using a placeholder `fetchSomeData`), and returns the data to be used by the component.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/creating_your_own_cms_client_keystatic_wordpress_62.md#2025-04-22_snippet_25\n\nLANGUAGE: tsx\nCODE:\n```\nexport const loader = async (args: Route.LoaderArgs) => {\n  // Get Supabase client\n  const client = getSupabaseServerClient(args.request);\n\n  // Retrieve data\n  const data = await fetchSomeData(client);\n\n  // Return data to the component\n  return {\n    title: \"My Page\",\n    data\n  };\n};\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic GET API Route Handler in Next.js\nDESCRIPTION: Example of a simple API Route handler in the Next.js App Directory (`app/api/hello/route.ts`). It exports an asynchronous `GET` function that accepts a `NextRequest` object and returns a JSON response using `NextResponse.json`.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/auth_setup_authentication_blog_16.md#2025-04-22_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\n {% title=\"app/api/hello/route.ts\" %}\nimport { NextRequest, NextResponse } from \"next/server\";\n\nexport async function GET(\n  req: NextRequest\n) {\n  return NextResponse.json({ hello: \"world\" });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Analytics Service in Analytics Manager (TypeScript)\nDESCRIPTION: Updates `packages/analytics/src/index.ts` to integrate the Google Analytics service. It imports `createGoogleAnalyticsService` from the installed `@kit/google-analytics` package and adds it to the `providers` object within the `createAnalyticsManager` configuration, mapping it to the key 'google-analytics'.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/google_analytics_provider_posthog_analytics_provider_umami_analytics_provider_88.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n {% title=\"packages/analytics/src/index.ts\" %}\nimport { createGoogleAnalyticsService } from '@kit/google-analytics';\n\nimport { createAnalyticsManager } from './analytics-manager';\nimport type { AnalyticsManager } from './types';\n\nexport const analytics: AnalyticsManager = createAnalyticsManager({\n    providers: {\n        'google-analytics': createGoogleAnalyticsService,\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Team Account Subscription with Team Account API (TypeScript)\nDESCRIPTION: Shows how to get the subscription data for a specific team account using its ID via the `getSubscription` method of the Team Account API.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/google_analytics_provider_posthog_analytics_provider_umami_analytics_provider_88.md#2025-04-22_snippet_28\n\nLANGUAGE: tsx\nCODE:\n```\nconst api = createTeamAccountsApi(client);\nconst subscription = await api.getSubscription('account-id');\n```\n\n----------------------------------------\n\nTITLE: Task Action Menu Items Implementation\nDESCRIPTION: Components for task deletion and status update menu items. Includes confirmation modal and status toggle functionality.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/running_project_supabase_data_fetching_supabase_data_writing_27.md#2025-04-22_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\nfunction DeleteTaskMenuItem({ task }: { task: Task }) {\n  const [, startTransition] = useTransition();\n  const csrfToken = useCsrfToken();\n\n  return (\n    <DropdownMenuItem onSelect={(e) => e.preventDefault()}>\n      <ConfirmDeleteTaskModal\n        task={task.name}\n        onConfirm={() => {\n          startTransition(async () => {\n            await deleteTaskAction({ taskId: task.id, csrfToken });\n          });\n        }}\n      >\n        <span className={'text-red-500'}>Delete Task</span>\n      </ConfirmDeleteTaskModal>\n    </DropdownMenuItem>\n  );\n}\n\nfunction UpdateStatusMenuItem({\n  task,\n}: React.PropsWithChildren<{\n  task: Task;\n}>) {\n  const [isPending, startTransition] = useTransition();\n  const action = task.done ? 'Mark as Todo' : 'Mark as Done';\n\n  return (\n    <DropdownMenuItem\n      disabled={isPending}\n      onSelect={(e) => e.preventDefault()}\n      onClick={() => {\n        startTransition(async () => {\n          await updateTaskAction({\n            task: {\n              id: task.id,\n              done: !task.done,\n            },\n          });\n        });\n      }}\n    >\n      {action}\n    </DropdownMenuItem>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Protected POST API Route with Authentication\nDESCRIPTION: Implementation of a protected POST API route that requires user authentication using Supabase client.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/api_routes_vs_server_actions_api_routes_call_api_routes_from_client_19.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextRequest } from \"next/server\";\n\nimport getSupabaseRouteHandlerClient from '~/core/supabase/route-handler-client';\nimport requireSession from '~/lib/user/require-session';\n\nexport async function POST(req: NextRequest) {\n  const client = getSupabaseRouteHandlerClient();\n  const session = await requireSession(client);\n\n  // user is authenticated, do something here\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Zod Validation Schema for API Input\nDESCRIPTION: Creates a Zod schema function that defines the structure and validation rules for API input data, ensuring type safety and data integrity.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/user_roles_validating_api_input_zod_development_18.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nfunction getBodySchema() {\n  return z.object({\n    displayName: z.string(),\n    email: z.string().email(),\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: SWR Task Creation Hook Implementation\nDESCRIPTION: Custom hook implementation using SWR mutation for creating tasks with Supabase. Includes router refresh on success.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/server_actions_uploading_data_to_storage_writing_data_to_supabase_30.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport useSWRMutation from 'swr/mutation';\nimport { useRouter } from 'next/navigation';\n\nimport useSupabase from '~/core/hooks/use-supabase';\nimport { createTask } from '~/lib/tasks/mutations';\nimport type Task from '~/lib/tasks/types/task';\n\nfunction useCreateTaskMutation() {\n  const client = useSupabase();\n  const router = useRouter();\n  const key = 'tasks';\n\n  return useSWRMutation(key, async (_, { arg: task }: { arg: Omit<Task, 'id'> }) => {\n    return createTask(client, task);\n  }, {\n    onSuccess: () => router.refresh()\n  });\n}\n\nexport default useCreateTaskMutation;\n```\n\n----------------------------------------\n\nTITLE: Dynamic Plan Configuration Interface\nDESCRIPTION: Example of plan configuration structure with payment mode specification\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/subscription_permissions_organizations_lemon_squeezy_23.md#2025-04-22_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n{\n  name: 'Basic',\n  description: 'Unlimited applications and 2-hour onboarding session',\n  price: '$249 one off!',\n  stripePriceId: 'price_***********',\n  mode: 'payment'\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Tasks from Supabase in TypeScript\nDESCRIPTION: This function retrieves a paginated list of tasks from Supabase. It includes filtering by organization ID and optional text search on the task name. The function uses the Supabase client to execute a database query.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/supabase_data_fetching_supabase_data_writing_tailwind_css_86.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { SupabaseClient } from '@supabase/supabase-js';\nimport { TASKS_TABLE } from '~/lib/db-tables';\nimport type Task from '~/lib/tasks/types/task';\nimport type { Database } from '../../database.types';\n\ntype Client = SupabaseClient<Database>;\n\nconst TASKS_PAGE_SIZE = 10;\n\nexport function getTasks(\n  client: Client,\n  params: {\n    organizationId: number;\n    pageIndex: number;\n    perPage?: number;\n    query?: string;\n  },\n) {\n  const { organizationId, perPage, pageIndex } = params;\n  const { startOffset, endOffset } = getPaginationOffsets(pageIndex, perPage);\n\n  let query = client\n    .from(TASKS_TABLE)\n    .select<string, Task>(\n      `\n      id,\n      name,\n      organizationId: organization_id,\n      dueDate: due_date,\n      done,\n      description\n    `,\n      {\n        count: 'exact',\n      },\n    )\n    .order('name', { ascending: true })\n    .eq('organization_id', organizationId)\n    .range(startOffset, endOffset);\n\n  if (params.query) {\n    query = query.textSearch('name', params.query);\n  }\n\n  return query;\n}\n\nfunction getPaginationOffsets(pageIndex: number, perPage?: number) {\n  const pageSize = perPage || TASKS_PAGE_SIZE;\n  const startOffset = pageIndex * pageSize;\n  const endOffset = startOffset + pageSize;\n\n  return {\n    startOffset,\n    endOffset,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RLS Policies for Messages Table Access in SQL\nDESCRIPTION: These SQL statements create RLS policies restricting SELECT and INSERT operations on the messages table to only those users with the appropriate role on the account owning the message (via ticket_id). The select policy uses public.has_role_on_ticket_account(ticket_id) in the using clause, while the insert policy applies a with check constraint using the same function. Both enforce fine-grained RBAC within the Supabase security model. These expect the messages table, RLS to be enabled, and the custom function to exist.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/database_4.md#2025-04-22_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\n-- define the RLS policy to read the messages\ncreate policy select_messages\n  on public.messages\n  for select\n  to authenticated\n  using (\n    public.has_role_on_ticket_account(ticket_id)\n  );\n```\n\nLANGUAGE: sql\nCODE:\n```\n-- define the RLS policy to insert the messages\ncreate policy insert_messages\n  on public.messages\n  for insert\n  to authenticated\n  with check (\n    public.has_role_on_ticket_account(ticket_id)\n  );\n```\n\n----------------------------------------\n\nTITLE: Displaying Firestore Data in React Component\nDESCRIPTION: Implements a React component to display tasks fetched from Firestore using the useFetchTasks hook. The component handles different states such as loading and error and uses other UI components like PageLoadingIndicator and Alert for better user experience.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/deploying_production_development_getting_started_environment_variables_13.md#2025-04-22_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport PageLoadingIndicator from '~/core/ui/PageLoadingIndicator';\nimport Alert from '~/core/ui/Alert';\nimport Heading from '~/core/ui/Heading';\nimport Button from '~/core/ui/Button';\n\nimport useFetchTasks from '~/lib/tasks/hooks/use-fetch-tasks';\nimport TasksList from '~/components/tasks/TasksList';\n\nconst TasksContainer: React.FC<{\n  organizationId: string;\n}> = ({ organizationId }) => {\n  const { status, data: tasks } = useFetchTasks(organizationId);\n\n  if (status === `loading`) {\n    return <PageLoadingIndicator>Loading Tasks...</PageLoadingIndicator>;\n  }\n\n  if (status === `error`) {\n    return (\n      <Alert type={'error'}>\n        Sorry, we encountered an error while fetching your tasks.\n      </Alert>\n    );\n  }\n\n  if (tasks.length === 0) {\n    return <TasksEmptyState />;\n  }\n\n  return (\n    <div className={'flex flex-col space-y-4'}>\n      <div className={'flex justify-end'}>\n        <CreateTaskButton>New Task</CreateTaskButton>\n      </div>\n\n      <TasksList tasks={tasks} />\n    </div>\n  );\n};\n\nfunction TasksEmptyState() {\n  return (\n    <div\n      className={\n        'flex flex-col items-center justify-center space-y-4' + ' h-full p-24'\n      }\n    >\n      <div>\n        <Heading type={5}>No tasks found</Heading>\n      </div>\n\n      <CreateTaskButton>Create your first Task</CreateTaskButton>\n    </div>\n  );\n}\n\nfunction CreateTaskButton(props: React.PropsWithChildren) {\n  return <Button href={'/tasks/new'}>{props.children}</Button>;\n}\n\nexport default TasksContainer;\n```\n\n----------------------------------------\n\nTITLE: Update Project Member Role Function - SQL/PLPGSQL\nDESCRIPTION: Function to update a project member's role with permission checks to prevent unauthorized role changes and protect owner roles.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/projects_data_model_53.md#2025-04-22_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nCREATE OR REPLACE FUNCTION public.update_project_member_role(\n  p_user_id UUID,\n  p_new_role public.project_role,\n  p_project_id UUID\n)\nRETURNS BOOLEAN\nSET search_path = ''\nAS $$\nDECLARE\n  v_current_role public.project_role;\nBEGIN\n  -- Get the current role of the member\n  SELECT role INTO v_current_role\n  FROM public.project_members\n  WHERE project_id = p_project_id AND user_id = p_user_id;\n\n  -- Check if the manager can manage this member\n  IF NOT public.current_user_can_manage_project_member(v_current_role, p_project_id) THEN\n    RAISE EXCEPTION 'Permission denied';\n  END IF;\n\n  IF p_new_role = 'owner' THEN\n    RAISE EXCEPTION 'Owner cannot be updated to a different role';\n  END IF;\n\n  -- Update the member's role\n  UPDATE public.project_members\n  SET role = p_new_role\n  WHERE project_id = p_project_id AND user_id = p_user_id;\n\n  RETURN TRUE;\nEND;\n$$ LANGUAGE plpgsql;\n\nGRANT EXECUTE ON FUNCTION public.update_project_member_role TO authenticated;\n```\n\n----------------------------------------\n\nTITLE: Team Membership Validation Trigger in PostgreSQL\nDESCRIPTION: Trigger function to ensure users being added to projects are members of the associated team account.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/projects_data_model_53.md#2025-04-22_snippet_33\n\nLANGUAGE: plpgsql\nCODE:\n```\ncreate or replace function kit.check_project_member_in_team()\nreturns trigger\nas $$\ndeclare\n  v_account_id uuid;\nbegin\n  select account_id from public.projects\n  where id = new.project_id\n  into v_account_id;\n\n  if not exists (\n    select 1 from public.accounts_memberships\n    where account_id = v_account_id and user_id = new.user_id\n  ) then\n    raise exception 'user must be a member of the team account to be added to the project';\n  end if;\n\n  return new;\nend;\n$$ language plpgsql security definer;\n```\n\n----------------------------------------\n\nTITLE: Defining a GET API Route in Next.js App Router\nDESCRIPTION: Defines a basic API route handler using the Next.js App Router structure. This snippet exports an asynchronous GET function that accepts a NextRequest object and returns a JSON response using NextResponse.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/architecture_auth_overview_auth_setup_29.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n ```ts {% title=\"app/api/hello/route.ts\" %}\nimport { NextRequest, NextResponse } from \"next/server\";\n\nexport async function GET(\n  req: NextRequest\n) {\n  return NextResponse.json({ hello: \"world\" });\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Creating and Sending OTP Using Supabase\nDESCRIPTION: This TypeScript snippet covers how to create and send one-time passwords (OTPs) in Supabase using the `createOtpApi` and `createToken` methods. It includes the configuration parameters such as purpose and expiration time, and involves sending the OTP through email.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/custom_analytics_provider_google_analytics_provider_posthog_analytics_provider_36.md#2025-04-22_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createOtpApi } from '@kit/otp/api';\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\n\n// Create the API instance\nconst client = getSupabaseServerClient();\nconst api = createOtpApi(client);\n\n// Generate and send an OTP email\nawait api.createToken({\n  userId: user.id,\n  purpose: 'email-verification',\n  expiresInSeconds: 3600, // 1 hour\n  metadata: { redirectTo: '/verify-email' }\n});\n\n// Send the email with the OTP\nawait api.sendOtpEmail({\n  email: userEmail,\n  otp: token.token\n});\n```\n\n----------------------------------------\n\nTITLE: Project Owner Management Functions - SQL/PLPGSQL\nDESCRIPTION: Functions and triggers for managing project ownership, including automatic owner assignment and member addition validation.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/projects_data_model_53.md#2025-04-22_snippet_16\n\nLANGUAGE: sql\nCODE:\n```\nCREATE OR REPLACE FUNCTION kit.add_project_owner()\nRETURNS TRIGGER\nAS $$\nBEGIN\n  INSERT INTO public.project_members (project_id, user_id, role)\n  VALUES (NEW.id, auth.uid(), 'owner'::public.project_role);\n\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER;\n\nCREATE TRIGGER add_project_owner_on_insert\n    AFTER INSERT ON public.projects\n    FOR EACH ROW\n    EXECUTE PROCEDURE kit.add_project_owner();\n\nCREATE OR REPLACE FUNCTION public.add_project_member(\n  p_project_id UUID,\n  p_user_id UUID,\n  p_role public.project_role DEFAULT 'member'\n) RETURNS BOOLEAN\nSET search_path = ''\nAS $$\nDECLARE\n  v_account_id UUID;\nBEGIN\n  IF NOT public.is_project_admin(p_project_id) OR p_role = 'owner' THEN\n    RAISE EXCEPTION 'Permission denied';\n  END IF;\n\n  SELECT account_id INTO v_account_id\n  FROM public.projects\n  WHERE id = p_project_id;\n\n  IF NOT EXISTS (\n    SELECT 1 FROM public.accounts_memberships\n    WHERE account_id = v_account_id AND user_id = p_user_id\n  ) THEN\n    RAISE EXCEPTION 'User is not a member of the team account';\n  END IF;\n\n  INSERT INTO public.project_members (project_id, user_id, role)\n  VALUES (p_project_id, p_user_id, p_role)\n  ON CONFLICT (project_id, user_id) DO UPDATE\n  SET role = EXCLUDED.role;\n\n  RETURN TRUE;\nEND;\n$$ LANGUAGE plpgsql;\n\nGRANT EXECUTE ON FUNCTION public.add_project_member TO authenticated;\n\nCREATE OR REPLACE FUNCTION kit.check_project_member_in_team()\nRETURNS TRIGGER\nAS $$\nDECLARE\n  v_account_id UUID;\nBEGIN\n  SELECT account_id FROM public.projects\n  WHERE id = NEW.project_id\n  INTO v_account_id;\n\n  IF NOT EXISTS (\n    SELECT 1 FROM public.accounts_memberships\n    WHERE account_id = v_account_id AND user_id = NEW.user_id\n  ) THEN\n    RAISE EXCEPTION 'User must be a member of the team account to be added to the project';\n  END IF;\n\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER;\n\nCREATE TRIGGER ensure_project_member_in_team\nBEFORE INSERT OR UPDATE ON public.project_members\nFOR EACH ROW EXECUTE FUNCTION kit.check_project_member_in_team();\n```\n\n----------------------------------------\n\nTITLE: Implementing RLS Policy for Task Access\nDESCRIPTION: SQL policy that controls read access to tasks based on project membership using the is_project_member function.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/projects_data_model_53.md#2025-04-22_snippet_25\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy select_projects_tasks\n  on public.tasks\n  for select\n  to authenticated\n  using (\n    public.is_project_member(project_id)\n  );\n```\n\n----------------------------------------\n\nTITLE: Implementing a Warning Alert Component in React\nDESCRIPTION: Demonstrates the creation of a Warning Alert component using the 'warning' variant from Shadcn UI in a React application.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/multi_step_forms_page_shadcn_40.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ExclamationTriangleIcon } from '@radix-ui/react-icons';\n\nimport { Alert, AlertDescription, AlertTitle } from '@kit/ui/alert';\n\nexport default function WarningAlertDemo() {\n  return (\n    <Alert variant={'warning'}>\n      <ExclamationTriangleIcon className=\"h-5 w-5\" />\n\n      <AlertTitle>\n        <span>This is a warning alert</span>\n      </AlertTitle>\n\n      <AlertDescription>This is the description of the alert.</AlertDescription>\n    </Alert>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Stripe Payment Mode in Next.js Firebase App\nDESCRIPTION: Code modification to change the payment mode from subscription to one-time payment in the createStripeCheckout function.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_one_time_payments_stripe_webhooks_payments_11.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst mode: Stripe.Checkout.SessionCreateParams.Mode = 'subscription';\n\n// some code here...\n\nreturn stripe.checkout.sessions.create({\n  mode,\n  // more code here...\n});\n```\n\n----------------------------------------\n\nTITLE: Deleting Task in Supabase with TypeScript\nDESCRIPTION: This function deletes a task from Supabase. It takes a client and task ID as parameters, and removes the corresponding task from the tasks table.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/supabase_data_fetching_supabase_data_writing_tailwind_css_86.md#2025-04-22_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nexport function deleteTask(\n  client: Client,\n  taskId: number\n) {\n  return client.from(TASKS_TABLE).delete().match({\n    id: taskId\n  }).throwOnError();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing the insertTicketMessageAction Server Action\nDESCRIPTION: Complete implementation of the server action that inserts a new message into the database, including Supabase client initialization, data insertion, and error handling.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/data_fetching_3.md#2025-04-22_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\n'use server';\n\nimport { enhanceAction } from '@kit/next/actions';\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\n\nimport { MessageFormSchema } from '../schema/message-form.schema';\n\nexport const insertTicketMessageAction = enhanceAction(\n  async (data, user) => {\n    const client = getSupabaseServerClient();\n\n    const response = await client\n      .from('messages')\n      .insert({\n        content: data.message,\n        ticket_id: data.ticketId,\n        author_account_id: user.id,\n        author: 'support',\n      })\n      .select('*, account: author_account_id (email, picture_url, name)')\n      .single();\n\n    if (response.error) {\n      throw new Error(response.error.message);\n    }\n\n    return response.data;\n  },\n  {\n    auth: true,\n    schema: MessageFormSchema,\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Fetching Paginated Tasks from Supabase in TypeScript\nDESCRIPTION: This function fetches a paginated list of tasks from Supabase. It includes filtering by organization, pagination, and optional text search on the task name.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/running_project_supabase_data_fetching_supabase_data_writing_27.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type { SupabaseClient } from '@supabase/supabase-js';\nimport type { Database } from '~/database.types';\nimport { TASKS_TABLE } from '~/lib/db-tables';\nimport Task from '~/lib/tasks/types/task';\n\ntype Client = SupabaseClient<Database>;\n\nconst TASKS_PAGE_SIZE = 10;\n\nexport function getTasks(\n  client: Client,\n  params: {\n    organizationUid: string;\n    pageIndex: number;\n    perPage?: number;\n    query?: string;\n  },\n) {\n  const { organizationUid, perPage, pageIndex } = params;\n  const { startOffset, endOffset } = getPaginationOffsets(pageIndex, perPage);\n\n  let query = client\n    .from(TASKS_TABLE)\n    .select<string, Task>(\n      `\n      id,\n      name,\n      organizationId: organization_id,\n      dueDate: due_date,\n      done,\n      description,\n      organization: organization_id !inner (\n        id,\n        uuid\n      )\n    `, { count: 'exact' }\n    )\n    .eq('organization.uuid', organizationUid)\n    .range(startOffset, endOffset);\n\n  if (params.query) {\n    query = query.textSearch('name', params.query);\n  }\n\n  return query;\n}\n\nfunction getPaginationOffsets(pageIndex: number, perPage?: number) {\n  const pageSize = perPage || TASKS_PAGE_SIZE;\n  const startOffset = pageIndex * pageSize;\n  const endOffset = startOffset + pageSize;\n\n  return {\n    startOffset,\n    endOffset,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Remix Supabase Application Settings\nDESCRIPTION: Main configuration file that defines application settings including site details, auth providers, paths, email settings, and Stripe products. Used throughout the project to maintain consistent configuration.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/functions_initializing_project_introduction_85.md#2025-04-22_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\nimport getEnv from '~/core/get-env';\nimport type { Provider } from '@supabase/gotrue-js/src/lib/types';\n\nconst env = getEnv() ?? {};\nconst production = env.NODE_ENV === 'production';\n\nenum Themes {\n  Light = 'light',\n  Dark = 'dark',\n}\n\nconst configuration = {\n  site: {\n    name: 'Awesomely - Your SaaS Title',\n    description: 'Your SaaS Description',\n    themeColor: '#ffffff',\n    themeColorDark: '#0a0a0a',\n    siteUrl: env.SITE_URL,\n    siteName: 'Awesomely',\n    twitterHandle: '',\n    githubHandle: '',\n    language: 'en',\n    convertKitFormId: '',\n    locale: env.DEFAULT_LOCALE,\n  },\n  auth: {\n    requireEmailConfirmation: true,\n    providers: {\n      emailPassword: true,\n      phoneNumber: false,\n      emailLink: false,\n      oAuth: ['google'] as Provider[],\n    },\n  },\n  production,\n  environment: env.ENVIRONMENT,\n  features: {\n    enableThemeSwitcher: true,\n  },\n  theme: Themes.Dark,\n  paths: {\n    signIn: '/auth/sign-in',\n    signUp: '/auth/sign-up',\n    signInMfa: '/auth/verify',\n    signInFromLink: '/auth/link',\n    callback: '/auth/callback',\n    onboarding: `/onboarding`,\n    appHome: '/dashboard',\n    settings: {\n      profile: '/settings/profile',\n      authentication: '/settings/profile/authentication',\n      email: '/settings/profile/email',\n      password: '/settings/profile/password',\n    },\n    api: {\n      checkout: `/resources/stripe/checkout`,\n      billingPortal: `/resources/stripe/portal`,\n      organizations: {\n        create: `/resources/organizations/create`,\n        transferOwnership: `/resources/organizations/transfer-ownership`,\n        members: `/resources/organizations/members`,\n      },\n    },\n  },\n  email: {\n    host: 'smtp.ethereal.email',\n    port: 587,\n    user: 'gracie.hand58@ethereal.email',\n    password: '5hr3DDGGc2bTbu7tJR',\n    senderAddress: 'MakerKit Team <info@makerkit.dev>',\n  },\n  sentry: {\n    dsn: env.SENTRY_DSN,\n  },\n  stripe: {\n    products: [...]\n  },\n};\n\nexport default configuration;\n```\n\n----------------------------------------\n\nTITLE: Resetting and Regenerating Supabase Types\nDESCRIPTION: Bash commands to reset migrations and regenerate TypeScript types after adding new schema elements. These commands ensure that the application's type system stays in sync with the database schema.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/adding_turborepo_package_approaching_local_development_database_functions_93.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npnpm run supabase:web:reset\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm run supabase:web:typegen\n```\n\n----------------------------------------\n\nTITLE: Implementing Task Item Component with CRUD Operations in React\nDESCRIPTION: A React component that renders an individual task item with functionality to mark it as done/not done and delete it. It uses custom hooks for Firestore operations and provides user feedback through toast notifications.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/deploying_production_development_getting_started_environment_variables_13.md#2025-04-22_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCallback, useState } from 'react';\nimport Link from 'next/link';\nimport { TrashIcon } from '@heroicons/react/24/outline';\nimport { toast } from 'sonner';\nimport { formatDistance } from 'date-fns';\n\nimport { Task } from '~/lib/tasks/types/task';\nimport Heading from '~/core/ui/Heading';\nimport IconButton from '~/core/ui/IconButton';\nimport Tooltip from '~/core/ui/Tooltip';\nimport useDeleteTask from '~/lib/tasks/hooks/use-delete-task';\nimport ConfirmDeleteTaskModal from '~/components/tasks/ConfirmDeleteTaskModal';\nimport useUpdateTask from '~/lib/tasks/hooks/use-update-task';\n\nconst TasksListItem: React.FC<{\n  task: WithId<Task>;\n}> = ({ task }) => {\n  const getTimeAgo = useTimeAgo();\n  const deleteTask = useDeleteTask(task.id);\n  const updateTask = useUpdateTask(task.id);\n\n  const [isDeleting, setIsDeleting] = useState(false);\n\n  const onDelete = useCallback(() => {\n    const deleteTaskPromise = deleteTask();\n\n    return toast.promise(deleteTaskPromise, {\n      success: `Task deleted!`,\n      loading: `Deleting task...`,\n      error: `Ops, error! We could not delete task`,\n    });\n  }, [deleteTask]);\n\n  const onDoneChange = useCallback(\n    (done: boolean) => {\n      const promise = updateTask({ done });\n\n      return toast.promise(promise, {\n        success: `Task updated!`,\n        loading: `Updating task...`,\n        error: `Ops, error! We could not update task`,\n      });\n    },\n    [updateTask]\n  );\n\n  return (\n    <>\n      <div\n        className={'rounded border p-4 transition-colors dark:border-black-400'}\n      >\n        <div className={'flex items-center space-x-4'}>\n          <div>\n            <Tooltip content={task.done ? `Mark as not done` : `Mark as done`}>\n              <input\n                className={'Toggle cursor-pointer'}\n                type=\"checkbox\"\n                defaultChecked={task.done}\n                onChange={(e) => {\n                  return onDoneChange(e.currentTarget.checked);\n                }}\n              />\n            </Tooltip>\n          </div>\n\n          <div className={'flex flex-1 flex-col space-y-0.5'}>\n            <Heading type={5}>\n              <Link\n                className={'hover:underline'}\n                href={`/tasks/[id]`}\n                as={`/tasks/${task.id}`}\n                passHref\n              >\n                {task.name}\n              </Link>\n            </Heading>\n\n            <div>\n              <p className={'text-xs text-gray-400 dark:text-gray-500'}>\n                Due {getTimeAgo(new Date(task.dueDate))}\n              </p>\n            </div>\n          </div>\n\n          <div className={'flex justify-end'}>\n            <Tooltip content={`Delete Task`}>\n              <IconButton\n                onClick={(e) => {\n                  e.stopPropagation();\n                  setIsDeleting(true);\n                }}\n              >\n                <TrashIcon className={'h-5 text-red-500'} />\n              </IconButton>\n            </Tooltip>\n          </div>\n        </div>\n      </div>\n\n      <ConfirmDeleteTaskModal\n        isOpen={isDeleting}\n        setIsOpen={setIsDeleting}\n        task={task.name}\n        onConfirm={onDelete}\n      />\n    </>\n  );\n};\n\nexport default TasksListItem;\n\nfunction useTimeAgo() {\n  return useCallback((date: Date) => {\n    return formatDistance(date, new Date(), {\n      addSuffix: true,\n    });\n  }, []);\n}\n```\n\n----------------------------------------\n\nTITLE: Validating API Request Body using Zod `parse` (TypeScript)\nDESCRIPTION: Illustrates validating a Next.js API request body (`req.body`) against a Zod schema using `schema.parse()`. This method throws an error if validation fails, which is caught and handled by returning a bad request exception (`throwBadRequestException`). Includes usage of middleware composition (`withPipe`) for guards and authentication (`withMethodsGuard`, `withAuthedUser`) and global exception handling (`withExceptionFilter`). Depends on `zod`, `NextApiRequest`, `NextApiResponse`, and custom utilities like `throwBadRequestException` and middleware.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/commands_cors_develop_firebase_security_rules_5.md#2025-04-22_snippet_38\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nimport { throwBadRequestException } from `~/core/http-exceptions`;\n\nfunction inviteMemberHandler(\n  req: NextApiRequest,\n  res: NextApiResponse,\n) {\n  try {\n     // we can safely use data with the interface Body\n    const schema = getBodySchema();\n    const { displayName, email } = schema.parse(req.body);\n\n    return sendInvite({ displayName, email });\n  } catch(e) {\n    return throwBadRequestException(res);\n  }\n}\n\nexport default function apiHandler() {\n  const handler = withPipe(\n    withMethodsGuard(['POST']),\n    withAuthedUser,\n    inviteMemberHandler,\n  );\n\n  // manage exceptions\n  return withExceptionFilter(req, res)(handler);\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Enhanced Next.js Server Action with Zod Validation - TypeScript/TSX\nDESCRIPTION: Demonstrates creating a server action enhanced with authentication, Zod schema validation, and optional monitoring and captcha. The snippet shows Zod schema declaration, importing the required utilities, and utilizing 'enhanceAction' to wrap the handler. Upon execution, the action verifies and types request data and user context, enabling safe processing and returning a standardized success object.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/csrf_protection_react_query_route_handlers_43.md#2025-04-22_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n'use server';\n\nimport { z } from 'zod';\nimport { enhanceAction } from '@kit/next/actions';\n\nconst ZodSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(6),\n});\n\nexport const myServerAction = enhanceAction(\n  async function (data, user) {\n    // 1. \"data\" has been validated against the Zod schema, and it's safe to use\n    // 2. \"user\" is the authenticated user\n    \n    // ... your code here\n    return {\n      success: true,\n    };\n  },\n  {\n    schema: ZodSchema,\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing API Route Handler with Zod Validation and Middleware in Next.js\nDESCRIPTION: This TypeScript snippet demonstrates a Next.js API route handler (`inviteMemberHandler`) that validates the incoming request body using a Zod schema obtained from `getBodySchema()`. It uses `schema.parse(req.body)` for validation and destructures the validated data. The handler is exported within a function that uses `withPipe` for middleware execution (method guard, authentication) and `withExceptionFilter` for centralized error handling. It calls `sendInvite` on successful validation and `throwBadRequestException` on Zod parsing errors.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/ci_tests_running_tests_testing_limitations_12.md#2025-04-22_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nimport { throwBadRequestException } from `~/core/http-exceptions`;\n\nfunction inviteMemberHandler(\n  req: NextApiRequest,\n  res: NextApiResponse,\n) {\n  try {\n     // we can safely use data with the interface Body\n    const schema = getBodySchema();\n    const { displayName, email } = schema.parse(req.body);\n\n    return sendInvite({ displayName, email });\n  } catch(e) {\n    return throwBadRequestException(res);\n  }\n}\n\nexport default function apiHandler() {\n  const handler = withPipe(\n    withMethodsGuard(['POST']),\n    withAuthedUser,\n    inviteMemberHandler,\n  );\n\n  // manage exceptions\n  return withExceptionFilter(req, res)(handler);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating RLS Policies for Update and Delete Operations in PostgreSQL with SQL\nDESCRIPTION: This SQL snippet creates both update and delete RLS policies for the 'public.tickets' table, allowing the authenticated user to modify or remove tickets if they have the necessary role on the account, checked by 'has_role_on_account'. It includes a 'with check' clause for updates to verify permissions post-modification.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/database_4.md#2025-04-22_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy delete_tickets\n  on public.tickets\n  for delete\n  to authenticated\n  using (\n    public.has_role_on_account(account_id)\n  );\n\ncreate policy update_tickets\n  on public.tickets\n  for update\n  to authenticated\n  using (\n    public.has_role_on_account(account_id)\n  )\n  with check (\n    public.has_role_on_account(account_id)\n  );\n```\n\n----------------------------------------\n\nTITLE: Creating Task Mutation with Supabase in TypeScript\nDESCRIPTION: Defines a function to create a new task in the Supabase database. It takes a Supabase client and task object as parameters and inserts the task data into the specified table.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/running_project_supabase_data_fetching_supabase_data_writing_27.md#2025-04-22_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport type { SupabaseClient } from '@supabase/supabase-js';\nimport type { Database } from '../../database.types';\nimport type Task from '~/lib/tasks/types/task';\nimport { TASKS_TABLE } from '~/lib/db-tables';\n\ntype Client = SupabaseClient<Database>;\n\nexport function createTask(\n  client: Client,\n  task: Omit<Task, 'id'>\n) {\n  return client.from(TASKS_TABLE).insert({\n    name: task.name,\n    organization_id: task.organizationId,\n    due_date: task.dueDate,\n    description: task.description,\n    done: task.done,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Task Data Fetching in TypeScript\nDESCRIPTION: Function to fetch task data from Supabase database using server components. Handles pagination and search queries, returning tasks and count.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/running_project_supabase_data_fetching_supabase_data_writing_27.md#2025-04-22_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nexport async function loadTasksData(params: {\n  organizationUid: string;\n  pageIndex: number;\n  perPage: number;\n  query?: string;\n}) {\n  const client = getSupabaseServerComponentClient();\n  const { organizationUid, perPage, pageIndex, query } = params;\n\n  const {\n    data: tasks,\n    error,\n    count,\n  } = await getTasks(client, {\n    organizationUid,\n    pageIndex,\n    perPage,\n    query,\n  });\n\n  if (error) {\n    console.error(error);\n\n    return {\n      tasks: [],\n      count: 0,\n    };\n  }\n\n  return {\n    tasks,\n    count: count ?? 0,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Using withExceptionFilter in Next.js TypeScript\nDESCRIPTION: The `withExceptionFilter` function is applied to handle exceptions in API endpoints, logging errors and reporting them to Sentry. The example demonstrates its integration with `withAuthedUser` and `withPipe`. Requires `~/core/middleware/with-exception-filter` and other middleware functions.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/adding_admin_users_admin_overview_admin_1.md#2025-04-22_snippet_12\n\nLANGUAGE: ts\nCODE:\n```\nimport { NextApiRequest,NextApiResponse } from \"next\";\n\nimport { withAuthedUser } from '~/core/middleware/with-authed-user';\nimport { withPipe } from '~/core/middleware/with-pipe';\nimport { withExceptionFilter } from '~/core/middleware/with-exception-filter';\n\nexport default function helloWorld(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n  const handler = withPipe(\n    withAuthedUser,\n    (req, res) => {\n      res.status(200).json({ message: 'Hello World!' });\n    }\n  );\n\n  return withExceptionFilter(req, res)(handler);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Tasks Table with Access Grants - SQL\nDESCRIPTION: This snippet creates a `public.tasks` table with columns to support task management, including UUID primary keys, title and description, completion state, owner account, and timestamps. It also grants select, insert, update, and delete privileges to roles 'authenticated' and 'service_role'. Prerequisites include existence of `public.accounts` and the referenced roles. Key parameters include the task fields and constraints. Input is none, output is the created and access-controlled table. Only authorized roles can access the table; anonymous users are excluded.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/adding_turborepo_package_approaching_local_development_database_functions_44.md#2025-04-22_snippet_18\n\nLANGUAGE: SQL\nCODE:\n```\n-- create tasks table\\ncreate table if not exists public.tasks (\\n  id uuid primary key default gen_random_uuid(),\\n  title varchar(500) not null,\\n  description varchar(50000),\\n  done boolean not null default false,\\n  account_id uuid not null references public.accounts(id),\\n  created_at timestamp with time zone not null default now(),\\n  updated_at timestamp with time zone not null default now()\\n);\\n\\ngrant select, insert, update, delete on table public.tasks to\\n    authenticated, service_role;\n```\n\n----------------------------------------\n\nTITLE: Validating API Request Body using Zod `safeParse` (TypeScript)\nDESCRIPTION: Demonstrates validating a Next.js API request body using `schema.safeParse()`. This method returns a result object with a `success` boolean and `data` or `error` properties. If validation fails (`!result.success`), a bad request exception is explicitly returned. Otherwise, the inferred `result.data` is used. Depends on `zod`, `NextApiRequest`, `NextApiResponse`, and `throwBadRequestException`.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/commands_cors_develop_firebase_security_rules_5.md#2025-04-22_snippet_39\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nfunction inviteMemberHandler(\n  req: NextApiRequest,\n  res: NextApiResponse,\n) {\n  const schema = getBodySchema();\n  const result = schema.safeParse(req.body);\n\n  // we use result.success as a type guard\n  // when false, we throw an exception\n  if (!result.success) {\n    return throwBadRequestException(res);\n  }\n\n  // TS correctly infers result.data now\n  return sendInvite(result.data);\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Querying Supabase Data with React Query (TSX)\nDESCRIPTION: Illustrates using the `useQuery` hook from `@tanstack/react-query` and the `useSupabase` hook from `@kit/supabase/hooks/use-supabase` to fetch data from a Supabase table (`tasks`) on the client-side. It fetches tasks filtered by `accountId`, handles loading and error states, and requires the `'use client'` directive. Dependencies include `@tanstack/react-query` and `@kit/supabase/hooks/use-supabase`.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/csrf_protection_react_query_route_handlers_43.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\nimport { useQuery } from '@tanstack/react-query';\nimport { useSupabase } from '@kit/supabase/hooks/use-supabase';\n\nfunction TasksList(accountId: string) {\n  const client = useSupabase();\n\n  const { data, isLoading, error } = useQuery({\n    queryKey: ['tasks', accountId],\n    queryFn: async () => {\n      const { data, error } = await client\n        .from('tasks')\n        .select('*')\n        .eq('account_id', accountId)\n        .order('created_at', { ascending: false });\n\n      if (error) {\n        throw error;\n      }\n\n      return data;\n    }\n  });\n\n  if (isLoading) {\n    return <div>Loading...</div>;\n  }\n\n  if (error) {\n    return <div>Error loading tasks</div>;\n  }\n\n  return (\n    <ul>\n      {data.map(task => (\n        <li key={task.id}>{task.title}</li>\n      ))}\n    </ul>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom React Hook for Task Creation in Component (TypeScript)\nDESCRIPTION: Demonstrates the usage of the `useCreateTask` hook within a React component. It retrieves the `createTask` function from the hook and passes it as a callback prop (`onCreate`) to a hypothetical `Form` component to handle the creation of a task when the form is submitted.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/deploying_production_development_getting_started_environment_variables_13.md#2025-04-22_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nimport useCreateTask from '~/lib/tasks/hooks/use-create-task';\n\nfunction Component() {\n  const createTask = useCreateTask();\n\n  return <Form onCreate={task => createTask(task)} />\n}\n```\n\n----------------------------------------\n\nTITLE: Creating SQL Functions and Triggers for Ticket Status Management\nDESCRIPTION: This SQL snippet creates a function to handle support ticket status changes and a trigger to execute that function when a ticket's status is updated. It maintains consistency by automatically setting appropriate timestamp and user fields based on status transitions.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/data_fetching_3.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n-- Function to handle status changes\ncreate or replace function kit.handle_ticket_status_change()\nreturns trigger\nset search_path = ''\nas $$\nbegin\n  if new.status = 'closed' and old.status != 'closed' then\n    new.closed_by := auth.uid();\n    new.closed_at := now();\n    new.resolved_by := null;\n    new.resolved_at := null;\n  elsif new.status = 'resolved' and old.status != 'resolved' then\n    new.resolved_by := auth.uid();\n    new.resolved_at := now();\n    new.closed_by := null;\n    new.closed_at := null;\n  elsif new.status = 'open' and old.status != 'open' then\n    new.closed_by := null;\n    new.closed_at := null;\n    new.resolved_by := null;\n    new.resolved_at := null;\n  elsif new.status = 'in_progress' and old.status != 'in_progress' then\n    new.closed_by := null;\n    new.closed_at := null;\n    new.resolved_by := null;\n    new.resolved_at := null;\n  end if;\n  return new;\nend;\n$$ language plpgsql;\n\n-- Trigger to handle status changes\ncreate trigger handle_ticket_status_change_trigger\nbefore update of status on public.tickets\nfor each row\nwhen (old.status is distinct from new.status)\nexecute function kit.handle_ticket_status_change();\n```\n\n----------------------------------------\n\nTITLE: Creating Task in Supabase with TypeScript\nDESCRIPTION: This function creates a new task in Supabase. It takes a client and task object as parameters and inserts the task data into the tasks table.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/supabase_data_fetching_supabase_data_writing_tailwind_css_86.md#2025-04-22_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nexport function createTask(\n  client: Client,\n  task: Omit<Task, 'id'>\n) {\n  return client.from(TASKS_TABLE).insert({\n    name: task.name,\n    organization_id: task.organizationId,\n    due_date: task.dueDate,\n    description: task.description,\n    done: task.done,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Next.js API Route Handler for Ticket Messages\nDESCRIPTION: API route handler implementation for fetching ticket messages with validation using Zod schema and CORS support\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/building_javascript_widget_1.md#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { NextResponse } from 'next/server';\n\nimport { z } from 'zod';\n\nimport { enhanceRouteHandler } from '@kit/next/routes';\nimport { getSupabaseServerAdminClient } from '@kit/supabase/server-admin-client';\n\nimport { createCustomerTicketService } from '../_lib/server/customer-ticket.service';\n\nconst GetTicketMessagesSchema = z.object({\n  ticketId: z.string().uuid(),\n  lastCreatedAt: z\n    .string()\n    .or(z.literal(''))\n    .transform((value) => {\n      if (value === 'undefined') {\n        return;\n      }\n\n      return value;\n    }),\n});\n\nexport const OPTIONS = () => {\n  return new Response(null, {\n    status: 200,\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET',\n      'Access-Control-Allow-Headers': '*',\n    },\n  });\n};\n\nexport const GET = enhanceRouteHandler(\n  async ({ request }) => {\n    const client = getSupabaseServerAdminClient();\n\n    const searchParams = new URL(request.url).searchParams;\n\n    const params = GetTicketMessagesSchema.parse({\n      ticketId: searchParams.get('ticketId') ?? '',\n      lastCreatedAt: searchParams.get('lastCreatedAt') ?? '',\n    });\n\n    const service = createCustomerTicketService(client);\n    const messages = await service.getTicketMessages(params);\n\n    return NextResponse.json(messages, {\n      headers: {\n        'Access-Control-Allow-Origin': '*',\n      },\n    });\n  },\n  {\n    auth: false,\n    schema: undefined,\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Ticket Message Fetching Service in TypeScript\nDESCRIPTION: Service class method for fetching ticket messages from Supabase database with optional pagination support using lastCreatedAt parameter\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/building_javascript_widget_1.md#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nclass CustomerTicketService {\n  constructor(private readonly client: SupabaseClient<Database>) {}\n\n  async getTicketMessages(params: {\n    ticketId: string;\n    lastCreatedAt?: string;\n  }) {\n    let query = this.client\n      .from('messages')\n      .select(\n        `\n        id,\n        ticketId: ticket_id,\n        content,\n        author,\n        createdAt: created_at\n        `,\n      )\n      .eq('ticket_id', params.ticketId)\n      .order('created_at', { ascending: true });\n\n    if (params.lastCreatedAt) {\n      query = query.gt('created_at', params.lastCreatedAt);\n    }\n\n    const { data, error } = await query;\n\n    if (error) {\n      throw error;\n    }\n\n    return data;\n  }\n\n  // other methods...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Task in Firestore using Remix.js\nDESCRIPTION: This custom hook demonstrates how to create a new task in Firestore. It uses the useFirestore hook and wraps the addDoc function in a useCallback.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/setting_up_firebase_custom_fetch_fetching_data_firestore_70.md#2025-04-22_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TASKS_COLLECTION } from '~/lib/firestore-collections';\n\nfunction useCreateTask() {\n  const firestore = useFirestore();\n  const tasksCollection = collection(firestore, TASKS_COLLECTION);\n\n  return useCallback(\n    (task: Task) => {\n      return addDoc(tasksCollection, task);\n    },\n    [tasksCollection]\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Full Tasks Table Component in React TSX\nDESCRIPTION: This snippet defines a complete TasksTable component with features like pagination, task status updates, and deletion. It uses custom hooks and components to handle CSRF tokens, routing, and UI elements.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/running_project_supabase_data_fetching_supabase_data_writing_27.md#2025-04-22_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\nimport Link from 'next/link';\nimport { usePathname, useRouter } from 'next/navigation';\nimport { useTransition } from 'react';\nimport { formatDistance } from 'date-fns';\n\nimport { ColumnDef } from '@tanstack/react-table';\nimport { EllipsisVerticalIcon } from '@heroicons/react/24/outline';\n\nimport Task from '~/lib/tasks/types/task';\n\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from '~/core/ui/Dropdown';\n\nimport DataTable from '~/core/ui/DataTable';\nimport IconButton from '~/core/ui/IconButton';\nimport Badge from '~/core/ui/Badge';\nimport If from '~/core/ui/If';\n\nimport { deleteTaskAction, updateTaskAction } from '~/lib/tasks/actions';\nimport useCsrfToken from '~/core/hooks/use-csrf-token';\n\nconst TABLE_COLUMNS: ColumnDef<Task>[] = [\n  {\n    header: 'Name',\n    cell: ({ row }) => {\n      const task = row.original;\n\n      return (\n        <Link className={'hover:underline'} href={'tasks/' + task.id}>\n          {task.name}\n        </Link>\n      );\n    },\n  },\n  {\n    header: 'Description',\n    id: 'description',\n    cell: ({ row }) => {\n      const task = row.original;\n      const length = task.description?.length ?? 0;\n\n      return (\n        <span className={'truncate max-w-[50px]'}>\n          {length > 0 ? task.description : '-'}\n        </span>\n      );\n    },\n  },\n  {\n    header: 'Due Date',\n    id: 'dueDate',\n    cell: ({ row }) => {\n      const task = row.original;\n\n      const dueDate = formatDistance(new Date(task.dueDate), new Date(), {\n        addSuffix: true,\n      });\n\n      return (\n        <If\n          condition={task.done}\n          fallback={<span className={'capitalize'}>{dueDate}</span>}\n        >\n          <div className={'inline-flex'}>\n            <Badge size={'small'} color={'success'}>\n              Done\n            </Badge>\n          </div>\n        </If>\n      );\n    },\n  },\n  {\n    header: '',\n    id: 'actions',\n    cell: ({ row }) => {\n      const task = row.original;\n\n      return (\n        <div className={'flex justify-end'}>\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <IconButton>\n                <EllipsisVerticalIcon className=\"w-5\" />\n              </IconButton>\n            </DropdownMenuTrigger>\n\n            <DropdownMenuContent\n              collisionPadding={{\n                right: 20,\n              }}\n            >\n              <DropdownMenuItem>\n                <Link href={'tasks/' + row.original.id}>View Task</Link>\n              </DropdownMenuItem>\n\n              <UpdateStatusMenuItem task={task} />\n              <DeleteTaskMenuItem task={task} />\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </div>\n      );\n    },\n  },\n];\n\nfunction TasksTable(\n  props: React.PropsWithChildren<{\n    pageIndex: number;\n    pageCount: number;\n    tasks: Task[];\n  }>,\n) {\n  const router = useRouter();\n  const pathname = usePathname();\n\n  return (\n    <DataTable\n      onPaginationChange={({ pageIndex }) => {\n        router.push(`${pathname}?page=${pageIndex + 1}`);\n      }}\n      pageIndex={props.pageIndex}\n      pageCount={props.pageCount}\n      data={props.tasks}\n      columns={TABLE_COLUMNS}\n    />\n  );\n}\n\nfunction DeleteTaskMenuItem({ task }: { task: Task }) {\n  const [, startTransition] = useTransition();\n  const csrfToken = useCsrfToken();\n\n  return (\n    <DropdownMenuItem onSelect={(e) => e.preventDefault()}>\n      <ConfirmDeleteTaskModal\n        task={task.name}\n        onConfirm={() => {\n          startTransition(async () => {\n            await deleteTaskAction({ taskId: task.id, csrfToken });\n          });\n        }}\n      >\n        <span className={'text-red-500'}>Delete Task</span>\n      </ConfirmDeleteTaskModal>\n    </DropdownMenuItem>\n  );\n}\n\nfunction UpdateStatusMenuItem({\n  task,\n}: React.PropsWithChildren<{\n  task: Task;\n}>) {\n  const [isPending, startTransition] = useTransition();\n  const csrfToken = useCsrfToken();\n  const action = task.done ? 'Mark as Todo' : 'Mark as Done';\n\n  return (\n    <DropdownMenuItem\n      disabled={isPending}\n      onSelect={(e) => e.preventDefault()}\n      onClick={() => {\n        startTransition(async () => {\n          await updateTaskAction({\n            task: {\n              id: task.id,\n              done: !task.done,\n            },\n          });\n        });\n      }}\n    >\n      {action}\n    </DropdownMenuItem>\n  );\n}\n\nfunction ConfirmDeleteTaskModal({\n  children,\n  onConfirm,\n  task,\n}: React.PropsWithChildren<{\n  task: string;\n  onConfirm: () => void;\n}>) {\n  return (\n    <Modal heading={`Deleting Task`} Trigger={children}>\n      <div className={'flex flex-col space-y-4'}>\n        <div className={'text-sm flex flex-col space-y-2'}>\n          <p>\n            You are about to delete the task <b>{task}</b>\n          </p>\n\n          <p>Do you want to continue?</p>\n        </div>\n\n        <div className={'flex justify-end space-x-2'}>\n          <Button variant={'flat'} color={'danger'} onClick={onConfirm}>\n            Yep, delete task\n          </Button>\n        </div>\n      </div>\n    </Modal>\n  );\n}\n\nexport default TasksTable;\n```\n\n----------------------------------------\n\nTITLE: Implementing Enhanced Route Handler in Next.js\nDESCRIPTION: Example of creating API routes using enhanceRouteHandler with authentication and schema validation using Zod\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/llms_migration_from_makerkit_v1_navigating_codebase_49.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { NextResponse } from 'next/server';\n\nimport { z } from 'zod';\n\nimport { enhanceRouteHandler } from '@kit/next/routes';\n\nconst ZodSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(6),\n});\n\nexport const POST = enhanceRouteHandler(\n  async function ({ body, user, request }) {\n    return NextResponse.json({\n      success: true,\n    });\n  },\n  {\n    schema: ZodSchema,\n  },\n);\n\nexport const GET = enhanceRouteHandler(\n  async function ({ user, request }) {\n    return NextResponse.json({\n      success: true,\n    });\n  },\n  {\n    auth: false,\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Remix Routes Structure\nDESCRIPTION: Complete routing structure for the Remix application showing file-based routing organization including site pages, auth pages, and protected application routes.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/functions_initializing_project_introduction_85.md#2025-04-22_snippet_24\n\nLANGUAGE: txt\nCODE:\n```\n├── routes\n  └── $.tsx\n  └── _app.dashboard.tsx\n  └── _app.settings._index.tsx\n  └── _app.settings.organization._index.tsx\n  └── _app.settings.organization.members._index.tsx\n  └── _app.settings.organization.members.invite._index.tsx\n  └── _app.settings.organization.tsx\n  └── _app.settings.profile._index.tsx\n  └── _app.settings.profile.authentication.tsx\n  └── _app.settings.profile.email.tsx\n  └── _app.settings.profile.password.tsx\n  └── _app.settings.profile.tsx\n  └── _app.settings.subscription._index.tsx\n  └── _app.settings.tsx\n  └── _app.tasks.$task.tsx\n  └── _app.tasks._index.tsx\n  └── _app.tsx\n  └── _invite.tsx\n  └── _site._index.tsx\n  └── _site.about.tsx\n  └── _site.faq.tsx\n  └── _site.pricing.tsx\n  └── _site.tsx\n  └── admin._index.tsx\n  └── admin.organizations.$id.members.tsx\n  └── admin.organizations._index.tsx\n  └── admin.tsx\n  └── admin.users.$id.ban.ts\n  └── admin.users.$id.impersonate.tsx\n  └── admin.users.$id.reactivate.ts\n  └── admin.users.$id.tsx\n  └── admin.users._index.tsx\n  └── auth.callback.tsx\n  └── auth.link.tsx\n  └── auth.password-reset.tsx\n  └── auth.sign-in.tsx\n  └── auth.sign-up.tsx\n  └── auth.tsx\n  └── auth.verify.tsx\n  └── healthcheck.ts\n  └── invite.$code.tsx\n  └── onboarding._index.tsx\n  └── resources.organizations.create.ts\n  └── resources.organizations.members.$member.tsx\n  └── resources.organizations.transfer-ownership.ts\n  └── resources.stripe.checkout.tsx\n  └── resources.stripe.portal.ts\n  └── resources.stripe.webhook.ts\n```\n\n----------------------------------------\n\nTITLE: Calling Server Action Imperatively in React Component\nDESCRIPTION: Shows how to call a Next.js Server Action imperatively using useTransition hook and CSRF token when not using a traditional form component.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/user_reading_record_creating_record_20.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useTransition } from \"react\";\nimport useCsrfToken from '~/core/hooks/use-csrf-token';\n\nconst [isPending, starTransition] = useTransition()\n\nconst onSubmit = (task: Task) => {\n  startTransition(async () => {\n    await createTaskAction({ task, csrfToken });\n  })\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a Reusable Data Loading Function for Loaders (TypeScript)\nDESCRIPTION: Shows how to create a reusable asynchronous function (`loadMembersPageData`) to encapsulate common data fetching logic (like loading members, invitations, user data) that can be shared across multiple loaders. It takes a Supabase client and parameters, returning a promise resolving to the fetched data.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/creating_your_own_cms_client_keystatic_wordpress_62.md#2025-04-22_snippet_32\n\nLANGUAGE: tsx\nCODE:\n```\n// In a shared loader file\nexport async function loadMembersPageData(\n  client: SupabaseClient<Database>,\n  slug: string,\n) {\n  return Promise.all([\n    loadAccountMembers(client, slug),\n    loadInvitations(client, slug),\n    loadUser(client),\n    canAddMember(),\n  ]);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-Side Subscription Check in API Handler\nDESCRIPTION: Uses server-side utilities to check organization subscription status in an API handler function.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/migrations_extending_organizations_organization_hooks_10.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport default function async apiHandler(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n  const organization = req.cookies.organization;\n\n  const isSubscriptionActive =\n    await isOrganizationSubscriptionActive(organization);\n\n  if (!isSubscriptionActive) {\n    return throwForbiddenError();\n  }\n\n  // all good! perform action\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Application Pages with AppHeader and AppContainer\nDESCRIPTION: Demonstrates how to structure a Remix application page using the AppHeader and AppContainer components. These components provide a consistent layout and styling for the application's pages.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/user_sdk_sdk_ci_tests_84.md#2025-04-22_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nfunction DashboardPage() {\n  return (\n    <>\n      <AppHeader>\n        <span className={'flex space-x-2'}>\n          <Squares2X2Icon className=\"w-6\" />\n\n          <span>\n            <Trans i18nKey={'common:dashboardTabLabel'} />\n          </span>\n        </span>\n      </AppHeader>\n\n      <AppContainer>\n        Your content goes here\n      </AppContainer>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: New Task Form Component in Remix.js\nDESCRIPTION: This component renders a form for creating a new task. It uses the useCreateTask hook to handle form submission and includes error handling and loading states.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/setting_up_firebase_custom_fetch_fetching_data_firestore_70.md#2025-04-22_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\nconst CreateTaskForm = () => {\n  const createTask = useCreateTask();\n  const { setLoading, state } = useRequestState();\n  const router = useRouter();\n  const organization = useCurrentOrganization();\n  const organizationId = organization?.id as string;\n\n  const onCreateTask: FormEventHandler<HTMLFormElement> = useCallback(\n    async (event) => {\n      event.preventDefault();\n\n      const target = event.currentTarget;\n      const data = new FormData(target);\n      const name = data.get('name') as string;\n      const dueDate = data.get('dueDate') as string;\n\n      setLoading(true);\n\n      const task = {\n        organizationId,\n        name,\n        dueDate,\n        description: ``,\n        done: false,\n      };\n\n      await toaster.promise(createTask(task), {\n        success: `Task created!`,\n        error: `Ops, error!`,\n        loading: `Creating task...`,\n      });\n\n      await router.push(`/tasks`);\n    },\n    [router, createTask, organizationId, setLoading]\n  );\n\n  return (\n    <div>\n      <form onSubmit={onCreateTask}>\n        <div className={'flex flex-col space-y-3'}>\n          <TextField.Label>\n            Name\n            <TextField.Input\n              required\n              name={'name'}\n              placeholder={'ex. Launch on IndieHackers'}\n            />\n            <TextField.Hint>Hint: whatever you do, ship!</TextField.Hint>\n          </TextField.Label>\n\n          <TextField.Label>\n            Due date\n            <TextField.Input\n              required\n              defaultValue={getDefaultDueDate()}\n              name={'dueDate'}\n              type={'date'}\n            />\n          </TextField.Label>\n\n          <div\n            className={\n              'flex flex-col space-y-2 md:space-y-0 md:space-x-2' +\n              ' md:flex-row'\n            }\n          >\n            <Button loading={state.loading}>\n              <If condition={state.loading} fallback={<>Create Task</>}>\n                Creating Task...\n              </If>\n            </Button>\n\n            <Button color={'transparent'} href={'/tasks'}>\n              Go back\n            </Button>\n          </div>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nfunction getDefaultDueDate() {\n  const date = new Date();\n  const year = date.getFullYear();\n  const month = pad(date.getMonth() + 1);\n  const day = pad(date.getDate() + 1);\n\n  return `${year}-${month}-${day}`;\n}\n\nfunction pad(n: number) {\n  return n < 10 ? `0${n}` : n.toString();\n}\n\nexport default CreateTaskForm;\n```\n\n----------------------------------------\n\nTITLE: Task Query Implementation in Supabase\nDESCRIPTION: Function to query a single task from Supabase database with type safety\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/updating_sidebar_menu_change_auth_strategy_setup_oauth_79.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { SupabaseClient } from '@supabase/supabase-js';\nimport type { Database } from '~/database.types';\n\nexport function getTask(client: SupabaseClient<Database>, id: number) {\n  return client\n    .from('tasks')\n    .select(\n      `\n      id,\n      name,\n      organizationId: organization_id,\n      dueDate: due_date,\n      description,\n      done\n    `,\n    )\n    .eq('id', id)\n    .single();\n}\n```\n\n----------------------------------------\n\nTITLE: Using Server Action with Form Element in React Component\nDESCRIPTION: A React component that demonstrates how to use a server action with a form element. The server action is passed directly to the form's action attribute.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/server_actions_uploading_data_to_storage_writing_data_to_supabase_30.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nfunction TaskForm() {\n  return (\n    <form action={insertNewTask}>\n    ...\n    </form>\n  );\n}\n\nexport default TaskForm;\n```\n\n----------------------------------------\n\nTITLE: Enabling Billing Tests in GitHub Actions (Bash/Env)\nDESCRIPTION: Sets the environment variable `ENABLE_BILLING_TESTS` to `true` in the GitHub Actions workflow. This enables the execution of Stripe-related billing tests, which requires Stripe secrets to be configured in the Actions environment.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/configuring_supabase_database_webhooks_fly_production_environment_variables_95.md#2025-04-22_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nENABLE_BILLING_TESTS=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication Providers in Next.js with Supabase\nDESCRIPTION: Configuration object that controls authentication methods including email/password, phone number, email link and OAuth providers for a Next.js application using Supabase.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/architecture_auth_overview_auth_setup_29.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { Provider } from '@supabase/gotrue-js/src/lib/types';\n\nauth: {\n  requireEmailConfirmation: false,\n  providers: {\n    emailPassword: true,\n    phoneNumber: false,\n    emailLink: false,\n    oAuth: ['google'] as Provider[],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Feature-Specific React Components in Next.js\nDESCRIPTION: This example shows how to create a React component that uses custom hooks to fetch and display data. It follows the pattern of organizing components by feature in the components directory.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/custom_fetch_fetching_data_firestore_making_api_requests_4.md#2025-04-22_snippet_30\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function EventsContainer() {\n  const { data, status } = useFetchEvents();\n\n  if (status === `loading`) {\n    return <Loading />;\n  }\n\n  if (status === `error`) {\n    return <Error />;\n  }\n\n  return (\n    <div>\n      {data.map((event) => (\n        <EventDetail key={event.id} event={event} />\n      ))}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Gating Page Access Based on Permissions in Next.js\nDESCRIPTION: This code demonstrates how to restrict access to entire pages based on user permissions. If the user doesn't have the required permission ('tasks.read'), they are shown an error page instead of the actual content.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/marketing_pages_migrations_permissions_and_roles_45.md#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { loadTeamWorkspace } from '~/home/[account]/_lib/server/team-account-workspace.loader';\n\nexport default function TasksPage() {\n  const data = await loadTeamWorkspace();\n  const permissions = data.account.permissions; // string[]\n\n  if (!permissions.includes('tasks.read')) {\n    return <ErrorPage message=\"You do not have permission to write tasks\" />;\n  }\n\n  return (\n    <div>\n      <TaskList permissions={permissions} />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Project Owner Function in PostgreSQL\nDESCRIPTION: PostgreSQL function that automatically adds the project creator as the first project member with owner role when a new project is created.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/projects_data_model_53.md#2025-04-22_snippet_31\n\nLANGUAGE: plpgsql\nCODE:\n```\ncreate or replace function kit.add_project_owner()\nreturns trigger\nas $$\nbegin\n  insert into public.project_members (project_id, user_id, role)\n  values (new.id, auth.uid(), 'owner'::public.project_role);\n\n  return new;\nend;\n$$ language plpgsql security definer;\n```\n\n----------------------------------------\n\nTITLE: Implementing Tickets Page Component (TypeScript React)\nDESCRIPTION: This snippet shows the implementation of a TicketsPage component using Next.js. It uses the TicketsService to fetch support tickets and displays them using a DataTable component. It also handles pagination and search functionality.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/realtime_updates_server_components_7.md#2025-04-22_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nimport { use } from 'react';\n\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\nimport { DataTable } from '@kit/ui/enhanced-data-table';\nimport { PageBody, PageHeader } from '@kit/ui/page';\n\nimport { createTicketsService } from '~/lib/server/tickets/tickets.service';\n\ninterface TicketsPageProps {\n  params: Promise<{\n    account: string;\n  }>;\n\n  searchParams: Promise<{\n    page?: string;\n    query?: string;\n  }>;\n}\n\nexport default function TicketsPage(props: TicketsPageProps) {\n  const client = getSupabaseServerClient();\n  const service = createTicketsService(client);\n\n  const { account } = use(props.params);\n  const { page: pageParam, query = '' } = use(props.searchParams);\n  const page = Number(pageParam ?? '1');\n\n  const { data, pageSize, pageCount } = use(\n    service.getTickets({\n      accountSlug: account,\n      page,\n      query,\n    }),\n  );\n\n  return (\n    <>\n      <PageHeader\n        title={'Support Tickets'}\n        description={\n          'Here is the list of the support tickets from your customers'\n        }\n      />\n\n      <PageBody>\n        <DataTable\n          pageIndex={page - 1}\n          pageCount={pageCount}\n          pageSize={pageSize}\n          data={data}\n          columns={[]}\n        />\n      </PageBody>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Uploading Files to Supabase Storage with Public URL Return\nDESCRIPTION: A function that uploads a user's profile photo to Supabase Storage, specifically to the 'avatars' bucket. It converts the file to an array buffer, generates a filename based on the user ID, and returns the public URL.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/server_actions_uploading_data_to_storage_writing_data_to_supabase_30.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nasync function uploadUserProfilePhoto(\n  client: SupabaseClient,\n  photoFile: File,\n  userId: string\n) {\n  const bytes = await photoFile.arrayBuffer();\n  const bucket = client.storage.from('avatars');\n  const extension = photoFile.name.split('.').pop();\n  const fileName = `${userId}.${extension}`;\n\n  const result = await bucket.upload(fileName, bytes, {\n    upsert: true,\n  });\n\n  if (!result.error) {\n    return bucket.getPublicUrl(fileName).data.publicUrl;\n  }\n\n  throw result.error;\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Shared Data Loading Function in a Route Loader (TypeScript)\nDESCRIPTION: Demonstrates how to use the previously defined shared data loading function (`loadMembersPageData`) within a specific route's loader. It retrieves necessary parameters (client, slug), calls the shared function, and returns the combined data.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/creating_your_own_cms_client_keystatic_wordpress_62.md#2025-04-22_snippet_33\n\nLANGUAGE: tsx\nCODE:\n```\n// In your route file\nexport const loader = async (args: Route.LoaderArgs) => {\n  const client = getSupabaseServerClient(args.request);\n  const slug = args.params.account as string;\n\n  const [members, invitations, user, canAdd] =\n    await loadMembersPageData(client, slug);\n\n  return {\n    members,\n    invitations,\n    user,\n    canAdd\n  };\n};\n\n```\n\n----------------------------------------\n\nTITLE: Guarding API Routes with Authentication Middleware\nDESCRIPTION: Shows how to use the 'withAuthedUser' middleware to ensure only authenticated users can access an API route. The middleware makes the Firebase user object available in the request.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/call_api_routes_from_client_csrf_token_guarding_api_routes_7.md#2025-04-22_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nimport { NextApiRequest, NextApiResponse } from \"next\";\nimport { withAuthedUser } from '~/core/middleware/with-authed-user';\n\nfunction helloWorldHandler(req: NextApiRequest, res: NextApiResponse) {\n  res.status(200).json({ text: 'Hello' })\n}\n\nexport default withAuthedUser(\n  helloWorldHandler\n);\n```\n\n----------------------------------------\n\nTITLE: Safe Parsing with Zod in Next.js Server Action\nDESCRIPTION: This snippet illustrates how to use Zod's safeParse method in a Next.js Server Action. It shows error handling when validation fails without throwing an exception.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/validating_api_input_zod_development_clone_repository_31.md#2025-04-22_snippet_2\n\nLANGUAGE: TSX\nCODE:\n```\n'use server';\n\nexport async function serverAction(\n  data: z.infer<\n    ReturnType<typeof getBodySchema>\n  >\n) {\n  // we can safely use data with the interface Body\n  const bodyResult = await getBodySchema().safeParseAsync(data);\n\n  if (bodyResult.success === false) {\n    return bodyResult.error;\n  }\n\n  const { displayName, email } = bodyResult.data;\n\n  return sendInvite({ displayName, email });\n}\n\nfunction getBodySchema() {\n  return z.object({\n    displayName: z.string(),\n    email: z.string().email(),\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Chatbot API Route Handler\nDESCRIPTION: Implementation of the API route handler for the chatbot functionality.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/sentry_monitoring_notifications_configuration_51.md#2025-04-22_snippet_16\n\nLANGUAGE: ts\nCODE:\n```\nimport { handleChatBotRequest } from '@kit/chatbot/server';\n\nexport const POST = handleChatBotRequest;\n```\n\n----------------------------------------\n\nTITLE: Implementing React Query with Supabase Client\nDESCRIPTION: Demonstrates how to fetch task data using React Query combined with Supabase Web SDK client. The hook allows fetching data directly from the client for on-demand loading scenarios.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/updating_sidebar_menu_change_auth_strategy_setup_oauth_79.md#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport useQuery from \"@tanstack/react-query\";\n\nfunction useFetchTask({ id }: { id: number }) {\n  const supabase = useSupabase();\n  const key = ['tasks', id];\n\n  return useQuery([key], async () => {\n    return getTask(supabase, id);\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Hook for Fetching Events\nDESCRIPTION: React hook implementation using Supabase to fetch events for a specific organization.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/ui_hooks_mdx_15.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nexport function useFetchEvents(\n  organizationId: number\n) {\n  const client = useSupabase();\n  const key = [`events`, organizationId];\n\n  return useQuery(key, async () => {\n    const { data, error } client\n      .from('events')\n      .select('*')\n      .eq('organization_id', organizationId);\n\n    if (error) {\n      throw error;\n    }\n\n    return data;\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Creating POST API Route for Task Insertion in Next.js\nDESCRIPTION: This code snippet defines a POST API route that inserts a new task into the 'tasks' table using Supabase. It requires authentication and returns the ID of the newly created task.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/api_routes_vs_server_actions_api_routes_call_api_routes_from_client_19.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { NextRequest, NextResponse } from \"next/server\";\n\nexport async function POST(\n  req: NextRequest\n) {\n  const client = getSupabaseRouteHandlerClient();\n  const session = await requireSession(client);\n  const task = req.json();\n\n  const { data } = await client.from('tasks').insert({\n    name: task.name,\n    done: false,\n    user_id: session.user.id,\n  })\n  .select('id')\n  .single();\n\n  return NextResponse.json({ id: data.id });\n}\n```\n\n----------------------------------------\n\nTITLE: Using withAuthedUser Middleware in Next.js API Routes\nDESCRIPTION: This snippet shows how to protect API routes using the withAuthedUser middleware that ensures requests are only processed for authenticated users. The middleware adds the Firebase user object to the request and returns a 401 response for unauthenticated requests.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/call_api_routes_from_client_csrf_token_guarding_api_routes_7.md#2025-04-22_snippet_25\n\nLANGUAGE: tsx\nCODE:\n```\nimport { NextApiRequest,NextApiResponse } from \"next\";\nimport { withPipe } from '~/core/middleware/with-pipe';\nimport { withAuthedUser } from '~/core/middleware/with-authed-user';\n\nasync function handler(req: NextApiRequest, res: NextApiResponse) {\n  const user = req.firebaseUser;\n  // ...\n}\n\nexport default withPipe(withAuthedUser, handler);\n```\n\n----------------------------------------\n\nTITLE: Zod Schema for Updating Subscriptions in Billing API\nDESCRIPTION: This schema defines the parameters required for updating a subscription, including the subscription ID, subscription item ID, and quantity.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/google_analytics_provider_posthog_analytics_provider_umami_analytics_provider_88.md#2025-04-22_snippet_42\n\nLANGUAGE: tsx\nCODE:\n```\nsubscriptionId: z.string().min(1),\nsubscriptionItemId: z.string().min(1),\nquantity: z.number().min(1),\n```\n\n----------------------------------------\n\nTITLE: Fetching the Signed-in User in Server Actions - TypeScript/React\nDESCRIPTION: Demonstrates retrieving the current user session within a server action using requireSession and a Supabase server action client. Intended for Next.js Server Actions (note the 'use server'; directive). The async function can use the session within secure backend operations.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/adding_app_pages_guarding_pages_updating_sidebar_menu_32.md#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n'use server';\n\nimport getSupabaseServerActionClient from '~/core/supabase/server-action-client';\nimport requireSession from '~/lib/user/require-session';\n\nexport async function yourServerAction() {\n  const client = getSupabaseServerActionClient();\n  const session = await requireSession(client);\n\n  // use session here\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Content Items from CMS in TypeScript\nDESCRIPTION: Shows how to use the getContentItems function to retrieve multiple content items from a specific collection in the CMS. It includes options for pagination, sorting, and language filtering.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/team_account_sidebar_configuration_configuration_cms_api_92.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createCmsClient } from '@kit/cms';\n\nconst getContentItems = cache(\n  async (language: string | undefined, limit: number, offset: number) => {\n    const client = await createCmsClient();\n\n    return client.getContentItems({\n      collection: 'posts',\n      limit,\n      offset,\n      language,\n      sortBy: 'publishedAt',\n      sortDirection: 'desc',\n    });\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Server Component for Task Page with Data Loading and Redirect - TypeScript/React\nDESCRIPTION: Implements a server-rendered TaskPage component, which loads a task by ID via a data-fetching helper and redirects to '/dashboard' if not found. Integrates data fetching, error handling, and inline rendering. Depends on getSupabaseServerComponentClient, getTask, and Next.js redirect. Returns a React fragment with task details or triggers navigation if not present.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/adding_app_pages_guarding_pages_updating_sidebar_menu_32.md#2025-04-22_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\ninterface Context {\n  params: {\n    task: string;\n  };\n}\n\nconst TaskPage = async ({ params }: Context) => {\n  const data = await loadTaskData(params.task);\n  const task = data.task;\n\n  return (\n    <>\n      <h1>{task.name}</h1>\n      <p>{task.description}</p>\n    </>\n  );\n};\n\nasync function loadTaskData(taskId: string) {\n  const client = getSupabaseServerComponentClient();\n  const { data: task } = await getTask(client, Number(taskId));\n\n  if (!task) {\n    redirect('/dashboard');\n  }\n\n  return {\n    task,\n  };\n}\n\nexport default TaskPage;\n```\n\n----------------------------------------\n\nTITLE: Installing AI Text Editor Plugin with Git Subtree in Remix Supabase SaaS Kit\nDESCRIPTION: Command to install the AI Text Editor plugin using git subtree, which adds the plugin to your repository at the plugins/text-editor path.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_configuration_stripe_one_time_payments_stripe_webhooks_82.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ngit subtree add --prefix plugins/text-editor git@github.com:makerkit/remix-supabase-saas-kit-plugins.git text-editor --squash\n```\n\n----------------------------------------\n\nTITLE: Guarding Next.js Pages Based on Organization Subscription with TypeScript\nDESCRIPTION: This TSX code shows how to restrict access to a Next.js page based on the organization's subscription status within `getServerSideProps`. It utilizes `withAppProps` to fetch application data, including the organization's subscription details. A helper function `canAccessPage` checks if the `subscription.status` is either 'active' or 'trialing'. If the organization does not have an active or trialing subscription, the user is redirected to the '/dashboard'.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/call_api_routes_from_client_csrf_token_guarding_api_routes_7.md#2025-04-22_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nimport { GetServerSidePropsContext } from \"next\";\nimport { withAppProps } from '~/lib/props/with-app-props';\nimport { OrganizationSubscription } from '~/lib/organizations/types/organization-subscription';\n\nfunction Page() {\n  // render the page\n}\n\nexport async function getServerSideProps(\n  ctx: GetServerSidePropsContext\n) {\n  const appProps = await withAppProps(ctx);\n  const subscription = appProps.organization.subscription;\n\n  if (!canAccessPage(subscription)) {\n    return {\n      redirect: {\n        destination: '/dashboard',\n        permanent: false,\n      },\n    }\n  }\n\n  return appProps;\n}\n\nfunction canAccessPage(subscription: OrganizationSubscription) {\n  return ['active', 'trialing'].includes(subscription.status);\n}\n```\n\n----------------------------------------\n\nTITLE: Composing API Route Middleware using `withPipe` Utility\nDESCRIPTION: This TypeScript snippet demonstrates structuring a Next.js API route using the `withPipe` utility to chain multiple middleware functions before the main handler. It sequentially executes `withMethodsGuard` (checks HTTP method), `withAuthedUser` (checks authentication), and `withAppCheck` (validates App Check token). Only if all pass does it execute the `membersHandler` logic. The entire pipeline is wrapped in `withExceptionFilter` for centralized error handling.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/ci_tests_running_tests_testing_limitations_12.md#2025-04-22_snippet_25\n\nLANGUAGE: tsx\nCODE:\n```\nimport {NextApiRequest, NextApiResponse } from \"next\";\n\nimport { withPipe } from '~/core/middleware/with-pipe';\nimport { withAuthedUser } from '~/core/middleware/with-authed-user';\nimport { withMethodsGuard } from '~/core/middleware/with-methods-guard';\nimport { withExceptionFilter } from '~/core/middleware/with-exception-filter';\nimport { withAppCheck } from '~/core/middleware/with-app-check';\n\nexport default function members(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n  const handler = withPipe(\n    withMethodsGuard(['POST']),\n    withAuthedUser,\n    withAppCheck,\n    membersHandler\n  );\n\n  return withExceptionFilter(req, res)(handler);\n}\n\nfunction membersHandler(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n  // API logic\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Plans Table and Policy - Supabase SQL\nDESCRIPTION: This SQL snippet defines a \\`public.plans\\` table for storing subscription plan details and sets up row-level security (RLS) in Supabase/PostgreSQL. It includes a policy to allow authenticated users to read from this table, ensuring security and compliance with multi-tenant applications. This setup is essential for credit-based or seat-based billing models.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/api_billing_api_billing_schema_58.md#2025-04-22_snippet_16\n\nLANGUAGE: sql\nCODE:\n```\ncreate table public.plans (\n  id serial primary key,\n  name text not null,\n  variant_id text not null\n);\n\nalter table public.plans enable row level security;\n\n-- allow authenticated users to read plans\ncreate policy read_plans\n  on public.plans\n  for select\n  to authenticated\n  using (true);\n```\n\n----------------------------------------\n\nTITLE: Updating Task Mutation with Supabase\nDESCRIPTION: Defines a function to update an existing task in the Supabase database. It takes a client and partial task object with ID, sending only the necessary fields to be updated.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/running_project_supabase_data_fetching_supabase_data_writing_27.md#2025-04-22_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nimport type { SupabaseClient } from '@supabase/supabase-js';\nimport type { Database } from '../../database.types';\nimport type Task from '~/lib/tasks/types/task';\nimport { TASKS_TABLE } from '~/lib/db-tables';\n\ntype Client = SupabaseClient<Database>;\n\nexport function updateTask(\n  client: Client,\n  task: Partial<Task> & { id: number }\n) {\n  return client\n    .from(TASKS_TABLE)\n    .update({\n      name: task.name,\n      done: task.done,\n      description: task.description,\n    })\n    .match({\n      id: task.id,\n    })\n    .throwOnError();\n}\n```\n\n----------------------------------------\n\nTITLE: Uploading Files to Supabase Storage in Next.js\nDESCRIPTION: Function to upload a user's profile photo to Supabase Storage. It processes the file, generates a unique filename based on the user ID, and returns the public URL of the uploaded file if successful.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/server_actions_uploading_data_to_storage_writing_data_to_supabase_17.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nasync function uploadUserProfilePhoto(\n  client: SupabaseClient,\n  photoFile: File,\n  userId: string\n) {\n  const bytes = await photoFile.arrayBuffer();\n  const bucket = client.storage.from('avatars');\n  const extension = photoFile.name.split('.').pop();\n  const fileName = `${userId}.${extension}`;\n\n  const result = await bucket.upload(fileName, bytes, {\n    upsert: true,\n  });\n\n  if (!result.error) {\n    return bucket.getPublicUrl(fileName).data.publicUrl;\n  }\n\n  throw result.error;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Admin Role Check in TypeScript\nDESCRIPTION: Defines a function to check if a user has an admin role based on their membership role.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/migrations_extending_organizations_organization_hooks_10.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isAdmin(\n  role: MembershipRole\n) {\n  return role === MembershipRole.Admin;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Database Mutation Function for Tasks\nDESCRIPTION: A function that handles the creation of a new task in the Supabase database. It transforms the task data shape to match the database schema and returns the result of the insert operation.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/server_actions_uploading_data_to_storage_writing_data_to_supabase_30.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { SupabaseClient } from '@supabase/supabase-js';\nimport type { Database } from '../../database.types';\nimport type Task from '~/lib/tasks/types/task';\nimport { TASKS_TABLE } from '~/lib/db-tables';\n\ntype Client = SupabaseClient<Database>;\n\nexport function createTask(client: Client, task: Omit<Task, 'id'>) {\n  return client.from(TASKS_TABLE).insert({\n    name: task.name,\n    organization_id: task.organizationId,\n    due_date: task.dueDate,\n    done: task.done,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Firebase Tasks API Route Handler with Middleware\nDESCRIPTION: Implements an API route handler that adds a new task to the Firestore 'tasks' collection. Uses middleware for authentication and CSRF protection before executing the handler.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/call_api_routes_from_client_csrf_token_guarding_api_routes_7.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { NextApiRequest, NextApiResponse } from \"next\";\n\nimport getRestFirestore from '~/core/firebase/admin/get-rest-firestore';\nimport { withPipe } from '~/core/middleware/with-pipe';\nimport { withCsrf } from '~/core/middleware/with-csrf';\nimport { withAuthedUser } from '~/core/middleware/with-authed-user';\n\nasync function apiHandler(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n  const firestore = getRestFirestore();\n  const collection = firestore.collection('tasks');\n\n  const data = await collection.add({\n    name: req.body.name\n  });\n\n  return res.json({ id: data.id });\n}\n\nexport default withPipe(\n  withAuthedUser,\n  withCsrf(),\n  apiHandler,\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Exported Server Actions in a File (Client/Server Callable)\nDESCRIPTION: This snippet shows a file marked with `'use server'` at the top level. All exported functions within this file, like `myServerAction`, become Server Actions callable from both Client and Server Components. Non-exported functions like `hiThere` remain regular functions.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/data_fetching_3.md#2025-04-22_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\n'use server';\n\n// ✅ a server action that can be called from a client component\nexport function myServerAction() {\n  return 'Hello from the server!';\n}\n\n// just a function\nfunction hiThere() {\n  return 'Hi there!';\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Route Handlers with Enhanced Security\nDESCRIPTION: Shows how to create a Next.js route handler with authentication and validation using the enhanceRouteHandler utility, useful for data fetching from client components.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/llms_migration_from_makerkit_v1_navigating_codebase_49.md#2025-04-22_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport { enhanceRouteHandler } from '@kit/next/routes';\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\n\nexport const POST = enhanceRouteHandler(\n  async ({ request, data, user }) => {\n    const client = getSupabaseServerClient();\n    // ....\n  },\n  {\n    auth: true,\n    schema: NoteSchema,\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Sending CSRF Token with useSubmit and useFetcher\nDESCRIPTION: Demonstrates how to include the CSRF token when using Remix's useSubmit or useFetcher. The token is retrieved using the useCsrfToken hook and included in the request payload.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/user_sdk_sdk_ci_tests_84.md#2025-04-22_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nconst submit = useSubmit();\nconst csrfToken = useCsrfToken();\n\nsubmit({ csrfToken }, {\n  method: 'POST',\n  encType: 'application/json'\n})\n```\n\n----------------------------------------\n\nTITLE: Creating is_project_member Function in Supabase\nDESCRIPTION: Creates a function that checks if the current user is a member of a specific project by querying the project_members table. Returns a boolean value indicating membership status.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/projects_data_model_53.md#2025-04-22_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nCREATE OR REPLACE FUNCTION public.is_project_member(p_project_id UUID)\nRETURNS BOOLEAN\nSET search_path = ''\nAS $$\n  SELECT EXISTS (\n    SELECT 1 FROM public.project_members\n    WHERE project_id = p_project_id\n    AND user_id = (SELECT auth.uid())\n  );\n$$ LANGUAGE sql SECURITY DEFINER;\n\nGRANT EXECUTE ON FUNCTION public.is_project_member(UUID) TO authenticated;\n```\n\n----------------------------------------\n\nTITLE: Initializing Account API in a React Server Component using TSX\nDESCRIPTION: Demonstrates initializing the Makerkit Account API within a React Server Component. It imports `createAccountsApi` from `@kit/accounts/api` and `getSupabaseServerClient` from `@kit/supabase/server-client` to create an API instance using a server-side Supabase client.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/custom_analytics_provider_google_analytics_provider_posthog_analytics_provider_36.md#2025-04-22_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createAccountsApi } from '@kit/accounts/api';\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\n\nasync function ServerComponent() {\n  const client = getSupabaseServerClient();\n  const api = createAccountsApi(client);\n\n  // use api\n}\n```\n\n----------------------------------------\n\nTITLE: Firebase Storage Security Rules in Remix.js\nDESCRIPTION: These security rules for Firebase Storage ensure that files can only be read by users in the same organization and written by users with the correct organization ID.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/setting_up_firebase_custom_fetch_fetching_data_firestore_70.md#2025-04-22_snippet_18\n\nLANGUAGE: js\nCODE:\n```\nmatch /organizations/{organizationId}/{fileName=**} {\n  allow read: if resource.metadata.organizationId == request.auth.token.organizationId;\n  allow write: if request.auth.token.organizationId == organizationId;\n}\n```\n\n----------------------------------------\n\nTITLE: Supabase Integration Configuration\nDESCRIPTION: Required variables for Supabase integration including URL, API keys, and webhook secrets.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stepper_components_application_configuration_41.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nNEXT_PUBLIC_SUPABASE_URL=https://yourproject.supabase.co\nNEXT_PUBLIC_SUPABASE_ANON_KEY=your-anon-key\nSUPABASE_SERVICE_ROLE_KEY=your-service-role-key\nSUPABASE_DB_WEBHOOK_SECRET=your-webhook-secret\n```\n\n----------------------------------------\n\nTITLE: Creating Search Task Input Component in React TSX\nDESCRIPTION: This snippet defines a SearchTaskInput component that allows users to search for tasks. It uses Next.js routing to update the URL with the search query and refreshes the current route.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/running_project_supabase_data_fetching_supabase_data_writing_27.md#2025-04-22_snippet_24\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\nimport { usePathname, useRouter } from 'next/navigation';\nimport { FormEventHandler, useCallback } from 'react';\nimport { TextFieldInput } from '~/core/ui/TextField';\n\nfunction SearchTaskInput({\n  query,\n}: React.PropsWithChildren<{\n  query: Maybe<string>;\n}>) {\n  const router = useRouter();\n  const pathName = usePathname();\n\n  const onSubmit: FormEventHandler<HTMLFormElement> = useCallback(\n    (event) => {\n      event.preventDefault();\n\n      const formData = new FormData(event.currentTarget);\n      const query = formData.get('query') as string;\n      const url = new URL(pathName, window.location.origin);\n\n      url.searchParams.set('query', query);\n\n      const path = url.pathname + url.search;\n\n      router.push(path);\n    },\n    [pathName, router],\n  );\n\n  return (\n    <form className={'w-full max-w-sm'} onSubmit={onSubmit}>\n      <TextFieldInput\n        defaultValue={query}\n        name={'query'}\n        className={'w-full'}\n        placeholder={'Search for task...'}\n      />\n    </form>\n  );\n}\n\nexport default SearchTaskInput;\n```\n\n----------------------------------------\n\nTITLE: AppCheck Environment Configuration for Firebase\nDESCRIPTION: Shows how to configure environment variables for Firebase AppCheck integration, which uses Google's Recaptcha v3 to protect applications from abuse. The public key is stored in the Next.js .env file.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/architecture_api_guards_app_check_2.md#2025-04-22_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nNEXT_PUBLIC_APPCHECK_KEY=<YOUR_KEY>\n```\n\n----------------------------------------\n\nTITLE: SQL Function to Check MFA Compliance\nDESCRIPTION: Database function that checks if a user is MFA compliant, either by having MFA enabled and signed in with it, or not having MFA enabled at all.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/adding_turborepo_package_approaching_local_development_database_functions_44.md#2025-04-22_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\npublic.is_mfa_compliant()\n```\n\n----------------------------------------\n\nTITLE: Custom React Hook for Creating Tasks\nDESCRIPTION: A custom React hook using react-query's useMutation to create tasks in the database. This encapsulates the database operation and provides a clean API for React components.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/uploading_data_to_storage_writing_data_to_supabase_data_fetching_77.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nfunction useCreateTaskMutation(task: Task) {\n  const client = useSupabase();\n\n  return useMutation(\n    async (task: Task) => {\n      return createTask(client, task);\n    }\n  );\n}\n\nexport default useCreateTaskMutation;\n```\n\n----------------------------------------\n\nTITLE: SQL Function to Check Account Action Permissions\nDESCRIPTION: Database function that checks if the current user has permissions to take actions on another account member based on role hierarchy.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/adding_turborepo_package_approaching_local_development_database_functions_44.md#2025-04-22_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\npublic.can_action_account_member(\n  target_team_account_id uuid,\n  target_user_id uuid\n)\n```\n\n----------------------------------------\n\nTITLE: API Usage Reporting with Makerkit\nDESCRIPTION: Demonstrates a function setup for reporting API usage to a billing provider when a user makes an API request. Consumes `consumeApi` to fetch request data and reports this information via `reportUsage`. Requires Makerkit and the configuration of billing API endpoints.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/lemon_squeezy_metered_usage_one_off_payments_59.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nexport async function consumeApi(accountId: string): number {}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nasync function apiHandler(accountId: string) {\n  try {\n    // assume consumeApi returns the number of requests made\n    const quantity = await consumeApi(accountId);\n\n    await reportUsage(accountId, quantity);\n  } catch (error) {\n    console.error(error);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-Side Props with withAppProps Function\nDESCRIPTION: This example demonstrates how to use the withAppProps function in the getServerSideProps function of a Next.js page. It handles authentication, onboarding, and subscription checks on the server-side.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/adding_admin_users_admin_overview_admin_1.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { withAppProps } from \"~/lib/props/with-app-props\";\nimport { GetServerSidePropsContext } from \"next\";\n\nexport async function getServerSideProps(ctx: GetServerSidePropsContext) {\n  return await withAppProps(ctx);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Accounts Table Schema in Supabase\nDESCRIPTION: SQL schema for creating the accounts table in Supabase with fields for user data including ID, name, email, timestamps, and references to auth.users. The table serves as the primary user data store with UUID as primary key.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/team_accounts_only_recipes_adding_translations_55.md#2025-04-22_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\ncreate table if not exists\n    public.accounts\n(\n    id          uuid unique  not null default extensions.uuid_generate_v4(),\n    name        varchar(255) not null,\n    email       varchar(320) unique,\n    updated_at  timestamp with time zone,\n    created_at  timestamp with time zone,\n    created_by  uuid references auth.users,\n    updated_by  uuid references auth.users,\n    picture_url varchar(1000),\n    public_data jsonb                 default '{}'::jsonb not null,\n    primary key (id)\n);\n```\n\n----------------------------------------\n\nTITLE: Requiring User Session on Server-Side with requireSession (TS)\nDESCRIPTION: Illustrates using the `requireSession` function on the server-side (e.g., in `GET` handler) with a Supabase client. This function retrieves the user session and enforces authentication, redirecting unauthenticated or MFA-required users.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/functions_initializing_project_introduction_85.md#2025-04-22_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nimport getSupabaseServerClient from '~/core/supabase/server-client';\\n\\nexport async function GET() {\\n  const supabase = getSupabaseServerClient();\\n  const session = await requireSession(supabase);\\n\\n  //\\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Content Item Fetching with Sorting and Pagination\nDESCRIPTION: Shows a more complex example of fetching content items with pagination, language filtering, and sorting options using the getContentItems function.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stepper_components_application_configuration_61.md#2025-04-22_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createCmsClient } from '@kit/cms';\n\nconst getContentItems = cache(\n  async (language: string | undefined, limit: number, offset: number) => {\n    const client = await createCmsClient();\n\n    return client.getContentItems({\n      collection: 'posts',\n      limit,\n      offset,\n      language,\n      sortBy: 'publishedAt',\n      sortDirection: 'desc',\n    });\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Static Page in Next.js with Translation\nDESCRIPTION: The snippet demonstrates how to create a static page in a Next.js application, employing `getStaticProps` for integrating translation properties. It's designed to add a new public-facing page, such as 'About'.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/environment_variables_setup_project_configuration_set_up_emails_9.md#2025-04-22_snippet_7\n\nLANGUAGE: TSX\nCODE:\n```\nimport type { GetStaticPropsContext } from \"next\";\nimport { withTranslationProps } from '~/lib/props/with-translation-props';\n\nfunction AboutPage() {\n  return <div>About page</div>;\n}\n\nexport function getStaticProps(ctx: GetStaticPropsContext) {\n  return withTranslationProps(ctx);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CSRF Token Protection in API Routes\nDESCRIPTION: Adds CSRF token validation to protect API routes from cross-site request forgery attacks. The withCsrf function ensures that the request contains a valid CSRF token before executing any further code.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/user_sdk_sdk_ci_tests_84.md#2025-04-22_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nexport const action: ActionFunction = async ({ request }) => {\n  await withCsrf(request);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Lemon Squeezy Billing\nDESCRIPTION: This snippet sets the default billing provider for Lemon Squeezy and initializes necessary environment variables. Users should ensure that sensitive information is stored securely and not in committed files. Prerequisites include having access to a CI/CD system to set environment variables.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/lemon_squeezy_metered_usage_one_off_payments_59.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nVITE_BILLING_PROVIDER=lemon-squeezy\n```\n\nLANGUAGE: bash\nCODE:\n```\nLEMON_SQUEEZY_SECRET_KEY=\nLEMON_SQUEEZY_SIGNING_SECRET=\nLEMON_SQUEEZY_STORE_ID=\n```\n\n----------------------------------------\n\nTITLE: Accessing User Workspace Context in Client Components\nDESCRIPTION: Demonstrates how to access the user's workspace data in client components using the useUserWorkspace hook, providing authentication state and user profile information.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/llms_migration_from_makerkit_v1_navigating_codebase_49.md#2025-04-22_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\nfunction PersonalDashboard() {\n  const { workspace, user } = useUserWorkspace();\n  if (!workspace) return null;\n\n  return (\n    <div>\n      <h1>Welcome, {user.email}</h1>\n      <SubscriptionStatus status={workspace.subscription_status} />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Routing Action Intents in a Route Handler (TypeScript)\nDESCRIPTION: Example of a main route action handler that parses the incoming request JSON using an `ActionsSchema`. It uses a switch statement based on the `intent` property to delegate the request to the appropriate specific action function, like `deletePersonalAccountAction`. Handles invalid intents with a 400 response. Requires `getSupabaseServerClient`.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/creating_your_own_cms_client_keystatic_wordpress_62.md#2025-04-22_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\nexport const action = async (args: Route.ActionArgs) => {\n  const json = ActionsSchema.parse(await args.request.json());\n  const client = getSupabaseServerClient(args.request);\n\n  switch (json.intent) {\n    case 'delete-account':\n      return deletePersonalAccountAction({ client, otp: json.payload.otp });\n\n    default:\n      return new Response('Invalid action', { status: 400 });\n  }\n};\n\n```\n\n----------------------------------------\n\nTITLE: Custom CMS Client Implementation Example\nDESCRIPTION: Example implementation of a custom CMS client that interfaces with an HTTP API, showing implementation of all required methods.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/team_account_sidebar_configuration_configuration_cms_api_92.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CmsClient } from '@kit/cms';\n\nexport class MyCmsClient extends CmsClient {\n  async getContentItems(options) {\n    const response = await fetch('https://my-cms-api.com/content', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(options),\n    });\n\n    const { total, items } = await response.json();\n\n    return { total, items };\n  }\n\n  async getContentItemBySlug({ slug, collection }) {\n    const response = await fetch(\n      `https://my-cms-api.com/content/${collection}/${slug}`,\n    );\n\n    if (response.status === 404) {\n      return undefined;\n    }\n\n    return response.json();\n  }\n\n  async getCategories(options) {\n    const response = await fetch('https://my-cms-api.com/categories', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(options),\n    });\n\n    return response.json();\n  }\n\n  async getCategoryBySlug(slug) {\n    const response = await fetch(`https://my-cms-api.com/categories/${slug}`);\n\n    if (response.status === 404) {\n      return undefined;\n    }\n\n    return response.json();\n  }\n\n  async getTags(options) {\n    const response = await fetch('https://my-cms-api.com/tags', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(options),\n    });\n\n    return response.json();\n  }\n\n  async getTagBySlug(slug) {\n    const response = await fetch(`https://my-cms-api.com/tags/${slug}`);\n\n    if (response.status === 404) {\n      return undefined;\n    }\n\n    return response.json();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Supabase Data in a Next.js Route Handler\nDESCRIPTION: Shows how to fetch data from Supabase within a Next.js API Route Handler (App Router). It uses `getSupabaseRouteHandlerClient` to obtain a Supabase client instance suitable for this server-side context and then calls the `getOrganizationById` query function. The fetched data is returned as a JSON response.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/architecture_auth_overview_auth_setup_29.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n ```tsx {% title=\"pages/api/organizations/[id]/route.ts\" %}\n\nimport { getOrganizationById } from '~/lib/organizations/database/queries';\nimport getSupabaseRouteHandlerClient from '~/core/supabase/route-handler-client';\nimport { NextRequest, NextResponse } from \"next/server\";\n\nexport const GET = async (\n  req: NextRequest,\n  { params }: { params: { id: string } }\n) => {\n  const client = getSupabaseRouteHandlerClient();\n  const { data } = await getOrganizationById(client, params.id);\n\n  return NextResponse.json(data);\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Fetching Subscription Data using Account API in TSX\nDESCRIPTION: Shows how to retrieve subscription details for a specific user account using the `getSubscription` method. It takes an `accountId` as input and returns data from the `subscriptions` and `subscription_items` tables.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/custom_analytics_provider_google_analytics_provider_posthog_analytics_provider_36.md#2025-04-22_snippet_24\n\nLANGUAGE: tsx\nCODE:\n```\nconst api = createAccountsApi(client);\nconst subscription = await api.getSubscription(accountId);\n```\n\n----------------------------------------\n\nTITLE: Making the Pre-Commit Hook Executable (Bash)\nDESCRIPTION: Uses the `chmod` command to grant execute permissions to the pre-commit hook script located at `./.git/hooks/pre-commit`, enabling Git to run it before commits.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/code_health_common_commands_conventions_48.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nchmod +x ./.git/hooks/pre-commit\n```\n\n----------------------------------------\n\nTITLE: Running Local Stripe Webhooks Server\nDESCRIPTION: Command to run a local Stripe webhooks server for testing.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/commands_cors_develop_firebase_security_rules_5.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nnpm run stripe:listen\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering with If Component - React - JavaScript\nDESCRIPTION: Illustrates usage of the If component for declarative conditional rendering in React, including fallback content and render props. Requires @kit/ui/if. Inputs: condition (truthy/falsy), children as either component or render function, optional fallback. Outputs: content if condition is satisfied, otherwise fallback. Enhances readability compared to ternaries; memoized for performance. Example uses: showing login prompts, user-specific content, data loading states.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/bordered_navigation_menu_card_button_cookie_banner_60.md#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { If } from '@kit/ui/if';\n\nfunction MyComponent({ isLoggedIn, user }) {\n  return (\n    <If condition={isLoggedIn} fallback={<LoginPrompt />}>\n      {(value) => <WelcomeMessage user={user} />}\n    </If>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: React Component Benefiting from Loader Type Inference (TypeScript)\nDESCRIPTION: Demonstrates how a React component, typed with `Route.ComponentProps`, benefits from type inference. TypeScript automatically knows the exact shape and types of `props.loaderData` based on the associated loader's return type, enabling type checking and autocompletion in the component body.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/creating_your_own_cms_client_keystatic_wordpress_62.md#2025-04-22_snippet_38\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function MyPage(props: Route.ComponentProps) {\n  // TypeScript knows props.loaderData has:\n  // - title: string\n  // - data: number[]\n  const { title, data } = props.loaderData;\n\n  return (\n    <div>\n      <h1>{title}</h1>\n      <ul>\n        {data.map(item => <li key={item}>{item}</li>)}\n      </ul>\n    </div>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Loading User Accounts using Accounts API in TSX\nDESCRIPTION: Demonstrates initializing the Accounts API and calling `loadUserAccounts` to retrieve an array of user accounts. Each account object in the returned array contains `label`, `value`, and `image` properties.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/analytics_api_custom_analytics_provider_google_analytics_provider_57.md#2025-04-22_snippet_30\n\nLANGUAGE: tsx\nCODE:\n```\nconst api = createAccountsApi(client);\nconst accounts = await api.loadUserAccounts();\n```\n\n----------------------------------------\n\nTITLE: Creating Tasks List Page Component in Next.js\nDESCRIPTION: This code creates a page component for listing tasks. It uses withAppProps to ensure the user is authenticated and properly onboarded, and renders a TasksContainer with the current organization's ID.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/deploying_production_development_getting_started_environment_variables_13.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { GetServerSidePropsContext } from 'next';\nimport { withAppProps } from '~/lib/props/with-app-props';\nimport RouteShell from '~/components/RouteShell';\nimport TasksContainer from '~/components/tasks/TasksContainer';\nimport { useCurrentOrganization } from '~/lib/organizations/hooks/use-current-organization';\n\nconst Tasks = () => {\n  const organization = useCurrentOrganization();\n\n  if (!organization) {\n    return null;\n  }\n\n  return (\n    <RouteShell title={'Tasks'}>\n      <TasksContainer organizationId={organization.id} />\n    </RouteShell>\n  );\n};\n\nexport default Tasks;\n\nexport async function getServerSideProps(ctx: GetServerSidePropsContext) {\n  return await withAppProps(ctx);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing AppCheck Protection in Next.js API Routes\nDESCRIPTION: This example demonstrates how to use AppCheck middleware to reject requests from bots and spammy clients. It can be composed with other middleware using withPipe or called directly in an API handler.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/custom_fetch_fetching_data_firestore_making_api_requests_4.md#2025-04-22_snippet_27\n\nLANGUAGE: tsx\nCODE:\n```\nimport { withAppCheck } from '~/core/middleware/with-app-check';\n\nexport default withPipe(\n  withAdmin,\n  withAppCheck,\n);\n```\n\nLANGUAGE: tsx\nCODE:\n```\nexport default async function apiHandler() {\n  await withAdmin();\n  await withAppCheck();\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Content Items from CMS\nDESCRIPTION: Demonstrates how to fetch content items from a CMS using the getContentItems function with the collection parameter.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stepper_components_application_configuration_61.md#2025-04-22_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\n// import the createCmsClient function\nimport { createCmsClient } from '@kit/cms';\n\n// create a client\nconst client = await createCmsClient();\n\n// Fetch content items\nconst { items, count } = await client.getContentItems({\n  collection: 'posts',\n});\n```\n\n----------------------------------------\n\nTITLE: Handling General Webhook Events in TypeScript\nDESCRIPTION: This snippet shows how to use the `onEvent` callback within `handleWebhookEvent` to process any Stripe event not covered by the specific callbacks. It receives the raw event data (`data`) which needs proper typing for specific handling.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/billing_webhooks_credit_based_billing_lemon_squeezy_89.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nawait service.handleWebhookEvent(request, {\n  async onEvent(data: unknown) {\n    logger.info(\n      `Received billing event`,\n    );\n\n    // Your custom code here\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Tasks with Firestore and React Hook\nDESCRIPTION: This snippet defines a custom React hook `useCreateTask` for adding a new task document to Firestore's `tasks` collection. It utilizes `reactfire` for Firestore access and returns a callback function that can be used to perform the task creation. Ensure Firestore is properly configured in the environment.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/development_getting_started_environment_variables_firestore_data_fetching_74.md#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useFirestore } from 'reactfire';\nimport { useCallback } from 'react';\nimport { addDoc, collection } from 'firebase/firestore';\nimport { Task } from '~/lib/tasks/types/task';\n\nfunction useCreateTask() {\n  const firestore = useFirestore();\n  const tasksCollection = collection(firestore, `/tasks`);\n\n  return useCallback(\n    (task: Task) => {\n      return addDoc(tasksCollection, task);\n    },\n    [tasksCollection]\n  );\n}\n\nexport default useCreateTask;\n```\n\n----------------------------------------\n\nTITLE: Defining Form Server Action with Session Validation in Next.js Supabase\nDESCRIPTION: A server action that validates form data using Zod schema and inserts a new task. It utilizes the withSession utility to verify user authentication before processing the request.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/server_actions_uploading_data_to_storage_writing_data_to_supabase_30.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n'use server';\n\nimport { z } from 'zod';\n\nimport { withSession } from '~/core/generic/actions-utils';\nimport getSupabaseServerActionClient from '~/core/supabase/action-client';\n\nconst zodSchema = z.object({\n  task: z.object({\n    name: z.string().nonempty(),\n  }),\n});\n\nexport const insertNewTask =\n  withSession(\n    async (data: FormData) => {\n      const client = getSupabaseServerActionClient();\n      const body = zodSchema.parse(Object.fromEntries(data.entries()));\n\n      await insertNewTask(client, body.task);\n\n      return {\n        success: true,\n      };\n    }\n  );\n```\n\n----------------------------------------\n\nTITLE: Creating RLS Policy for Tasks\nDESCRIPTION: SQL policy definition to ensure tasks can only be accessed by users within the same organization through membership verification.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/organization_sdk_organization_subscription_sdk_sdk_25.md#2025-04-22_snippet_27\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy \"Tasks can be read by users of the organizations to which it belongs\" on tasks\n  for all\n    using (\n      exists (\n        select\n          1\n        from\n          memberships\n        where\n          user_id = auth.uid () and\n          tasks.organization_id = memberships.organization_id\n      )\n    );\n```\n\n----------------------------------------\n\nTITLE: Implementing Task Table Component with Remix\nDESCRIPTION: A comprehensive table component for displaying and managing tasks with features like pagination, status updates, and deletion. Uses TanStack table for data management and includes dropdown actions for each task row.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/supabase_data_fetching_supabase_data_writing_tailwind_css_86.md#2025-04-22_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Link, useFetcher, useSearchParams } from '@remix-run/react';\nimport { formatDistance } from 'date-fns';\n\nimport type { ColumnDef } from '@tanstack/react-table';\nimport { EllipsisVerticalIcon } from '@heroicons/react/24/outline';\n\nimport type Task from '~/lib/tasks/types/task';\n\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from '~/core/ui/Dropdown';\n\nimport DataTable from '~/core/ui/DataTable';\nimport IconButton from '~/core/ui/IconButton';\nimport Badge from '~/core/ui/Badge';\nimport If from '~/core/ui/If';\n\nimport Modal from '~/core/ui/Modal';\nimport Button from '~/core/ui/Button';\nimport { useCallback } from 'react';\n\nconst TABLE_COLUMNS: ColumnDef<Task>[] = [\n  {\n    header: 'Name',\n    cell: ({ row }) => {\n      const task = row.original;\n\n      return (\n        <Link className={'hover:underline'} to={'/tasks/' + task.id}>\n          {task.name}\n        </Link>\n      );\n    },\n  },\n  {\n    header: 'Description',\n    id: 'description',\n    cell: ({ row }) => {\n      const task = row.original;\n      const length = task.description?.length ?? 0;\n\n      return (\n        <span className={'truncate max-w-[50px]'}>\n          {length > 0 ? task.description : '-'}\n        </span>\n      );\n    },\n  },\n  {\n    header: 'Due Date',\n    id: 'dueDate',\n    cell: ({ row }) => {\n      const task = row.original;\n\n      const dueDate = formatDistance(new Date(task.dueDate), new Date(), {\n        addSuffix: true,\n      });\n\n      return (\n        <If\n          condition={task.done}\n          fallback={<span className={'capitalize'}>{dueDate}</span>}\n        >\n          <div className={'inline-flex'}>\n            <Badge size={'small'} color={'success'}>\n              Done\n            </Badge>\n          </div>\n        </If>\n      );\n    },\n  },\n  {\n    header: '',\n    id: 'actions',\n    cell: ({ row }) => {\n      const task = row.original;\n\n      return (\n        <div className={'flex justify-end'}>\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <IconButton>\n                <EllipsisVerticalIcon className=\"w-5\" />\n              </IconButton>\n            </DropdownMenuTrigger>\n\n            <DropdownMenuContent\n              collisionPadding={{\n                right: 20,\n              }}\n            >\n              <DropdownMenuItem>\n                <Link to={'tasks/' + row.original.id}>View Task</Link>\n              </DropdownMenuItem>\n\n              <UpdateStatusMenuItem task={task} />\n              <DeleteTaskMenuItem task={task} />\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </div>\n      );\n    },\n  },\n];\n\nfunction TasksTable(\n  props: React.PropsWithChildren<{\n    pageIndex: number;\n    pageCount: number;\n    pageSize: number;\n    tasks: Task[];\n  }>,\n) {\n  const [, setSearchParams] = useSearchParams();\n\n  const onPaginationChange = useCallback(\n    ({ pageIndex }: { pageIndex: number }) => {\n      const page = (pageIndex + 1).toString();\n      setSearchParams({ page });\n    },\n    [setSearchParams],\n  );\n\n  return (\n    <DataTable\n      onPaginationChange={onPaginationChange}\n      pageIndex={props.pageIndex}\n      pageCount={props.pageCount}\n      pageSize={props.pageSize}\n      data={props.tasks}\n      columns={TABLE_COLUMNS}\n    />\n  );\n}\n\nfunction DeleteTaskMenuItem({ task }: { task: Task }) {\n  const fetcher = useFetcher();\n\n  return (\n    <DropdownMenuItem onSelect={(e) => e.preventDefault()}>\n      <ConfirmDeleteTaskModal\n        task={task.name}\n        onConfirm={() => {\n          fetcher.submit(task.id, {\n            method: 'DELETE',\n            encType: 'application/json',\n          });\n        }}\n      >\n        <span className={'text-red-500'}>Delete Task</span>\n      </ConfirmDeleteTaskModal>\n    </DropdownMenuItem>\n  );\n}\n\nfunction UpdateStatusMenuItem({\n  task,\n}: React.PropsWithChildren<{\n  task: Task;\n}>) {\n  const fetcher = useFetcher();\n  const submitting = fetcher.state === 'submitting';\n  const action = task.done ? 'Mark as Todo' : 'Mark as Done';\n\n  return (\n    <DropdownMenuItem\n      disabled={submitting}\n      onSelect={(e) => e.preventDefault()}\n      onClick={() => {\n        return fetcher.submit(\n          {\n            id: task.id,\n            done: !task.done,\n          },\n          {\n            method: 'PUT',\n            encType: 'application/json',\n          },\n        );\n      }}\n    >\n      {action}\n    </DropdownMenuItem>\n  );\n}\n\nfunction ConfirmDeleteTaskModal({\n  children,\n  onConfirm,\n  task,\n}: React.PropsWithChildren<{\n  task: string;\n  onConfirm: () => void;\n}>) {\n  return (\n    <Modal heading={`Deleting Task`} Trigger={children}>\n      <div className={'flex flex-col space-y-4'}>\n        <div className={'text-sm flex flex-col space-y-2'}>\n          <p>\n            You are about to delete the task <b>{task}</b>\n          </p>\n\n          <p>Do you want to continue?</p>\n        </div>\n\n        <div className={'flex justify-end space-x-2'}>\n          <Button variant={'flat'} color={'danger'} onClick={onConfirm}>\n            Yep, delete task\n          </Button>\n        </div>\n      </div>\n    </Modal>\n  );\n}\n\nexport default TasksTable;\n```\n\n----------------------------------------\n\nTITLE: Handling Stripe Webhooks in TypeScript\nDESCRIPTION: This TypeScript handler processes Stripe webhooks to update the user credits upon invoice payment. It listens to the 'onInvoicePaid' event and uses the Supabase admin client to update the credits table. The function expects Stripe invoice data with necessary IDs to determine and update the user's credits.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/api_billing_api_billing_schema_58.md#2025-04-22_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ActionFunctionArgs } from 'react-router';\nimport { getBillingEventHandlerService } from '@kit/billing-gateway';\nimport { getLogger } from '@kit/shared/logger';\nimport { getSupabaseServerAdminClient } from '@kit/supabase/server-admin-client';\n\nimport billingConfig from '~/config/billing.config';\nimport { Database } from '~/lib/database.types';\n\n/**\n * @description Handle the webhooks from Stripe related to checkouts\n */\nexport const action = async ({ request }: ActionFunctionArgs) => {\n    const provider = billingConfig.provider;\n    const logger = await getLogger();\n\n    const ctx = {\n      name: 'billing.webhook',\n      provider,\n    };\n\n    logger.info(ctx, `Received billing webhook. Processing...`);\n\n    const supabaseClientProvider = () =>\n      getSupabaseServerAdminClient<Database>();\n\n    const service = await getBillingEventHandlerService(\n      supabaseClientProvider,\n      provider,\n      billingConfig,\n    );\n\n    try {\n      await service.handleWebhookEvent(request, {\n        onInvoicePaid: async (data) => {\n          const accountId = data.target_account_id;\n          const lineItems = data.line_items;\n\n          // we only expect one line item in the invoice\n          // if you add more than one, you need to handle that here\n          // by finding the correct line item to get the variant ID\n          const variantId = lineItems[0]?.variant_id;\n\n          if (!variantId) {\n            logger.error(\n              {\n                accountId,\n              },\n              'Variant ID not found in line items',\n            );\n\n            throw new Error('Variant ID not found in invoice');\n          }\n\n          await updateMessagesCountQuota({\n            variantId,\n            accountId,\n          });\n        },\n      });\n\n      logger.info(ctx, `Successfully processed billing webhook`);\n\n      return new Response('OK', { status: 200 });\n    } catch (error) {\n      logger.error({ ...ctx, error }, `Failed to process billing webhook`);\n\n      return new Response('Failed to process billing webhook', {\n        status: 500,\n      });\n    }\n};\n\nasync function updateMessagesCountQuota(params: {\n  variantId: string;\n  accountId: string;\n}) {\n  const client = getSupabaseRouteHandlerClient<Database>({ admin: true });\n\n  // get the max messages for the price based on the price ID\n  const plan = await client\n    .from('plans')\n    .select('tokens_quota')\n    .eq('variant_id', params.variantId)\n    .single();\n\n  if (plan.error) {\n    throw plan.error;\n  }\n\n  const { tokens_quota } = plan.data;\n\n  // upsert the message count for the account\n  // and set the period start and end dates (from the subscription)\n  const response = await client\n    .from('credits')\n    .update({\n      tokens_quota,\n    })\n    .eq('account_id', params.accountId);\n\n  if (response.error) {\n    throw response.error;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Permissions to App_Permissions Enum - SQL\nDESCRIPTION: This SQL snippet adds new values to the existing enum type `public.app_permissions`, enabling more granular app-specific permissions such as 'tasks.write' and 'tasks.delete'. Dependencies include the enum `public.app_permissions` which must already exist. The new permissions facilitate refined RLS rules and should be committed to ensure the changes persist. No inputs required; outputs are persisted changes to the enum's allowed values. Limited by PostgreSQL's enum modification capabilities—values cannot be removed.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/adding_turborepo_package_approaching_local_development_database_functions_44.md#2025-04-22_snippet_17\n\nLANGUAGE: SQL\nCODE:\n```\n-- insert new permissions\\nalter type public.app_permissions add value 'tasks.write';\\nalter type public.app_permissions add value 'tasks.delete';\\ncommit;\n```\n\n----------------------------------------\n\nTITLE: Conditionally Loading Data in a Loader based on Configuration (TypeScript)\nDESCRIPTION: Illustrates how to conditionally load different data within a loader based on an environment variable (`BILLING_MODE`), parsed and validated using Zod. It uses different API methods (`api.getSubscription` or `api.getOrder`) depending on the configuration.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/creating_your_own_cms_client_keystatic_wordpress_62.md#2025-04-22_snippet_34\n\nLANGUAGE: tsx\nCODE:\n```\nconst BILLING_MODE = z\n  .enum(['subscription', 'one-time'])\n  .default('subscription')\n  .parse(process.env.BILLING_MODE);\n\nexport const loader = async (args: Route.LoaderArgs) => {\n  const client = getSupabaseServerClient(args.request);\n  const accountId = args.params.id;\n\n  const api = createAccountsApi(client);\n\n  const data = BILLING_MODE === 'subscription'\n    ? await api.getSubscription(accountId)\n    : await api.getOrder(accountId);\n\n  return { data };\n};\n\n```\n\n----------------------------------------\n\nTITLE: Creating Server Action for Onboarding Form Submission in Next.js\nDESCRIPTION: A server action that handles onboarding form submission by creating a team, inserting onboarding data into Supabase, and generating a Stripe checkout session. It validates user data, checks if the user is already onboarded, and redirects accordingly.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/waitlist_plugin_plugins_drizzle_supabase_52.md#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n'use server';\n\nimport { redirect } from 'next/navigation';\n\nimport { createBillingGatewayService } from '@kit/billing-gateway';\nimport { enhanceAction } from '@kit/next/actions';\nimport { getLogger } from '@kit/shared/logger';\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\n\nimport appConfig from '~/config/app.config';\nimport billingConfig from '~/config/billing.config';\nimport pathsConfig from '~/config/paths.config';\nimport { OnboardingFormSchema } from '~/onboarding/_lib/onboarding-form.schema';\n\nexport const submitOnboardingFormAction = enhanceAction(\n  async (data, user) => {\n    const logger = await getLogger();\n\n    logger.info({ userId: user.id }, `Submitting onboarding form...`);\n\n    const isOnboarded = user.app_metadata.onboarded === true;\n\n    if (isOnboarded) {\n      logger.info(\n        { userId: user.id },\n        `User is already onboarded. Redirecting...`,\n      );\n\n      redirect(pathsConfig.app.home);\n    }\n\n    const client = getSupabaseServerClient();\n\n    const createTeamResponse = await client\n      .from('accounts')\n      .insert({\n        name: data.team.name,\n        primary_owner_user_id: user.id,\n        is_personal_account: false,\n      })\n      .select('id')\n      .single();\n\n    if (createTeamResponse.error) {\n      logger.error(\n        {\n          error: createTeamResponse.error,\n        },\n        `Failed to create team`,\n      );\n\n      throw createTeamResponse.error;\n    } else {\n        logger.info(\n            { userId: user.id, teamId: createTeamResponse.data.id },\n            `Team created. Creating onboarding data...`,\n        );\n    }\n\n    const response = await client.from('onboarding').upsert(\n      {\n        account_id: user.id,\n        data: {\n          userName: data.profile.name,\n          teamAccountId: createTeamResponse.data.id,\n        },\n        completed: true,\n      },\n      {\n        onConflict: 'account_id',\n      },\n    );\n\n    if (response.error) {\n      throw response.error;\n    }\n\n    logger.info(\n      { userId: user.id, teamId: createTeamResponse.data.id },\n      `Onboarding data created. Creating checkout session...`,\n    );\n\n    const billingService = createBillingGatewayService(billingConfig.provider);\n\n    const { plan } = getPlanDetails(\n      data.checkout.productId,\n      data.checkout.planId,\n    );\n\n    const returnUrl = new URL('/onboarding/complete', appConfig.url).href;\n\n    const checkoutSession = await billingService.createCheckoutSession({\n      returnUrl,\n      customerEmail: user.email,\n      accountId: createTeamResponse.data.id,\n      plan,\n      variantQuantities: [],\n      metadata: {\n        source: 'onboarding',\n        userId: user.id,\n      },\n    });\n\n    return {\n      checkoutToken: checkoutSession.checkoutToken,\n    };\n  },\n  {\n    auth: true,\n    schema: OnboardingFormSchema,\n  },\n);\n\nfunction getPlanDetails(productId: string, planId: string) {\n  const product = billingConfig.products.find(\n    (product) => product.id === productId,\n  );\n\n  if (!product) {\n    throw new Error('Product not found');\n  }\n\n  const plan = product?.plans.find((plan) => plan.id === planId);\n\n  if (!plan) {\n    throw new Error('Plan not found');\n  }\n\n  return { plan, product };\n}\n```\n\n----------------------------------------\n\nTITLE: API Request Hook Definition in React\nDESCRIPTION: The useApiRequest hook performs HTTP requests from the UI to an API and uses useRequestState for state management. It takes a path and HTTP method as parameters.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/ui_hooks_mdx_15.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nfunction useApiRequest<Resp = unknown, Body = void>(\n  path: string,\n  method: HttpMethod = 'POST'\n)\n```\n\n----------------------------------------\n\nTITLE: Running Supabase Migration and Typegen Scripts with Bash\nDESCRIPTION: These bash commands are used within the project's development environment to reset the database schema and generate static TypeScript types from the database schema via Supabase tooling. 'pnpm run supabase:web:reset' resets and reapplies migrations, while 'pnpm run supabase:web:typegen' generates types for safer use in a TypeScript application. This process ensures the codebase is in sync with the latest database constraints and models. Dependencies: supabase-cli, TypeScript, pnpm, and respective supabase scripts configured in project package.json.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/database_4.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\npnpm run supabase:web:reset\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm run supabase:web:typegen\n```\n\n----------------------------------------\n\nTITLE: Updating Firestore Task with Custom React Hook in TypeScript\nDESCRIPTION: Defines a custom React hook `useUpdateTask` that takes a `taskId` string as an argument. It utilizes `useFirestore` to get the Firestore instance, creates a document reference using `doc`, and returns a memoized callback function. This callback accepts a partial `Task` object and updates the corresponding Firestore document using `updateDoc`.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/deploying_production_development_getting_started_environment_variables_13.md#2025-04-22_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCallback } from 'react';\nimport { useFirestore } from 'reactfire';\nimport { doc, updateDoc } from 'firebase/firestore';\nimport { Task } from '~/lib/tasks/types/task';\n\nfunction useUpdateTask(taskId: string) {\n  const firestore = useFirestore();\n  const tasksCollection = 'tasks';\n\n  const docRef = doc(firestore, tasksCollection, taskId);\n\n  return useCallback(\n    (task: Partial<Task>) => {\n      return updateDoc(docRef, task);\n    },\n    [docRef]\n  );\n}\n\nexport default useUpdateTask;\n```\n\n----------------------------------------\n\nTITLE: Creating Permission Check for New Item Creation in TypeScript\nDESCRIPTION: Combines subscription status and admin role check to determine if a user can create a new item.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/migrations_extending_organizations_organization_hooks_10.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport function useCreateNewThing(\n  userRole: MembershipRole,\n) {\n  const isPayingUser = useIsSubscriptionActive();\n\n  return isPayingUser && isAdmin(userRole);\n}\n```\n\n----------------------------------------\n\nTITLE: Enhancing Next.js API Route Handlers with Validation (TSX)\nDESCRIPTION: Demonstrates using the `enhanceRouteHandler` utility from `@kit/next/routes` to wrap a Next.js API Route Handler (POST method). It automatically handles user authentication checks and validates the request body against a provided Zod schema (`ZodSchema`). The validated body, authenticated user, and original request object are passed to the handler function. Dependencies include `zod` and `@kit/next/routes`.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/csrf_protection_react_query_route_handlers_43.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { z } from 'zod';\n\nimport { enhanceRouteHandler } from '@kit/next/routes';\nimport { NextResponse } from 'next/server';\n\nconst ZodSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(6),\n});\n\nexport const POST = enhanceRouteHandler(\n  async function({ body, user, request }) {\n    // 1. \"body\" has been validated against the Zod schema, and it's safe to use\n    // 2. \"user\" is the authenticated user\n    // 3. \"request\" is the request object that contains the headers, query, etc.\n\n    // ... your code here\n    return NextResponse.json({\n      success: true,\n    });\n  },\n  {\n    schema: ZodSchema,\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Team Account API in Server Action Context\nDESCRIPTION: Shows how to set up the Team Account API in a server action context using the Supabase server client.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/analytics_api_custom_analytics_provider_google_analytics_provider_57.md#2025-04-22_snippet_44\n\nLANGUAGE: tsx\nCODE:\n```\n'use server';\n\nimport { createTeamAccountsApi } from '@kit/team-accounts/api';\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\n\nexport async function myServerAction() {\n  const client = getSupabaseServerClient();\n  const api = createTeamAccountsApi(client);\n  \n  // use api\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for App Configuration\nDESCRIPTION: Example of environment variables used to configure application name and URL. These can be set in the .env file to customize the application.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stepper_components_application_configuration_61.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nVITE_SITE_URL=https://myapp.com\nVITE_PRODUCT_NAME=\"My wonderful AI App\"\n```\n\n----------------------------------------\n\nTITLE: Fetching Organization Data from Supabase\nDESCRIPTION: Shows how to query organization data from Supabase using the organization UUID.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/supabase_not_stopping_tables_not_found_dark_theme_22.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nexport function getOrganizationByUid(client: SupabaseClient, uid: string) {\n  return client\n    .from('organizations')\n    .select(`\n      *\n    `)\n    .eq('uuid', uid)\n    .maybeSingle();\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Supabase Data in a Next.js Server Action\nDESCRIPTION: Demonstrates using the `getOrganizationById` query function within a Next.js Server Action. It uses `'use server'` directive, obtains a Supabase client suitable for Server Actions via `getSupabaseServerActionClient`, calls the query function, and returns the fetched data. This pattern encapsulates server-side data fetching logic callable from client components.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/auth_setup_authentication_blog_16.md#2025-04-22_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n'use server';\n\nimport getSupabaseServerActionClient from '~/core/supabase/action-client';\nimport { getOrganizationById } from '~/lib/organizations/database/queries';\n\nexport async function getOrganizationByIdAction(\n  organizationId: number\n) {\n  // Assuming Client type is correctly inferred or imported\n  const client = getSupabaseServerActionClient(); \n  const { data } = await getOrganizationById(client, organizationId);\n\n  return data;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Documents with Firebase Web SDK\nDESCRIPTION: Creates a document in Firestore using the Web SDK with a custom hook. This hook provides access to the Firestore instance and the collection where the document will be added, allowing client-side document creation.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/reading_document_reading_documents_list_creating_document_8.md#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useFirestore } from 'reactfire';\nimport { useCallback } from 'react';\nimport { addDoc, collection } from 'firebase/firestore';\n\nfunction useCreateTask() {\n  const firestore = useFirestore();\n  const tasksCollection = collection(firestore, `/tasks`);\n\n  return useCallback(\n    (task: {\n      title: string;\n      description: string;\n      completed: boolean;\n    }) => {\n      return addDoc(tasksCollection, task);\n    },\n    [tasksCollection]\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Improving Type Safety with React Router in TypeScript\nDESCRIPTION: This TypeScript snippet illustrates the shift from untyped APIs in the Remix kit to typed APIs in React Router 7, enhancing type safety in components. Required dependencies include typed definitions for loader arguments. The snippet highlights updated import statements and new type definitions for loader functions, which explicitly define types instead of relying on inferences.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/introduction_migration_from_remix_navigating_codebase_67.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// In the Remix version (untyped)\nexport const loader = async ({ request }: LoaderFunctionArgs) => {\n  // Types were inferred from the context\n};\n\n// In the React Router version (typed)\nexport const loader = async (args: Route.LoaderArgs) => {\n  // Types are explicitly defined\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing useAppendNewMessage Hook with React Query\nDESCRIPTION: This custom hook `useAppendNewMessage` provides a memoized callback function to optimistically update the React Query cache (`queryClient.setQueryData`) for a given `queryKey`. It appends a new `message` to the last page of paginated data, ensuring the UI updates instantly without a refetch.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/data_fetching_3.md#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nfunction useAppendNewMessage(params: { queryKey: string[] }) {\n  const queryClient = useQueryClient();\n  const { queryKey } = params;\n\n  return useCallback(\n    (message: Tables<'messages'>) => {\n      queryClient.setQueryData(\n        queryKey,\n        (data: { pages: Array<Tables<'messages'>[]> }) => {\n          // append message to the last page\n          const lastPage = [...data.pages[data.pages.length - 1]!, message];\n\n          return {\n            ...data,\n            // replace the last page\n            pages: [...data.pages.slice(0, -1), lastPage],\n          };\n        },\n      );\n    },\n    [queryClient, queryKey],\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Stripe Webhooks in Next.js API Route\nDESCRIPTION: Code for validating that a webhook request is legitimately from Stripe using the stripe-signature header.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_one_time_payments_stripe_webhooks_payments_11.md#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nconst signature = req.headers['stripe-signature'];\n\n// verify signature header is not missing\nif (!signature) {\n  return throwBadRequestException(res);\n}\n\nconst rawBody = await getRawBody(req);\nconst stripe = await getStripeInstance();\n\nconst event = stripe.webhooks.constructEvent(\n  rawBody,\n  signature,\n  webhookSecretKey\n);\n```\n\n----------------------------------------\n\nTITLE: Using Supabase Server Client in Remix Loader\nDESCRIPTION: This snippet shows how to use the Supabase server client in a Remix loader function. It retrieves tasks from the database using the getSupabaseServerClient function.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/kits/remix-supabase-turbo/data-fetching/supabase-clients.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LoaderFunctionArgs } from '@remix-run/node';\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\n\nexport async function loader(args: LoaderFunctionArgs) {\n  const supabase = getSupabaseServerClient()\n\n  const { data, error } = await supabase.from('tasks').select('*');\n\n  return {\n    data,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Stripe Trials without Credit Card\nDESCRIPTION: Environment variable setting to enable free trials without requiring users to provide a credit card. This feature can be used when offering trial periods for subscription plans.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/lemon_squeezy_metered_usage_one_off_payments_38.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nSTRIPE_ENABLE_TRIAL_WITHOUT_CC=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Nodemailer Email Settings with Environment Variables\nDESCRIPTION: This snippet shows the required environment variables for setting up Nodemailer for email functionality. It configures the SMTP server, port, authentication credentials, and TLS settings.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stepper_components_application_configuration_41.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nEMAIL_HOST=smtp.provider.com\nEMAIL_PORT=587\nEMAIL_USER=your-email-user\nEMAIL_PASSWORD=your-email-password\nEMAIL_TLS=true\n```\n\n----------------------------------------\n\nTITLE: SQL Function to Check Team Membership\nDESCRIPTION: Database function that checks if a specific user is a member of a team account. Used to restrict access to team members.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/adding_turborepo_package_approaching_local_development_database_functions_44.md#2025-04-22_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\npublic.is_team_member(\n  account_id uuid,\n  user_id uuid\n)\n```\n\n----------------------------------------\n\nTITLE: Using App Configuration in Components\nDESCRIPTION: Example of importing and using the validated app configuration in a Next.js component. This demonstrates how to access configuration values like URL and production status.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/customization_2.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport appConfig from '~/config/app.config';\n\nconst appUrl = appConfig.url;\nconst isProduction = appConfig.production;\n```\n\n----------------------------------------\n\nTITLE: Basic DataTable Implementation in React with TanStack Table\nDESCRIPTION: Shows the basic implementation of the DataTable component that wraps TanStack Table (React Table v8). Includes column and data definition and demonstrates required props for table initialization.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/paddle_per_seat_billing_stripe_90.md#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DataTable } from '@kit/ui/enhanced-data-table';\n\nfunction MyComponent() {\n  const columns = [\n    // Define your columns here\n  ];\n\n  const data = [\n    // Your data array\n  ];\n\n  return (\n    <DataTable\n      columns={columns}\n      data={data}\n      pageSize={10}\n      pageIndex={0}\n      pageCount={5}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Baselime Environment Variables\nDESCRIPTION: Sets up environment variables for using Baselime as the monitoring provider in the Remix Supabase SaaS kit. Requires a Baselime API key and specifies Baselime as the monitoring provider.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/technical_details_updating_codebase_installation_97.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nVITE_BASELIME_KEY=your_key\nVITE_MONITORING_PROVIDER=baselime\n```\n\n----------------------------------------\n\nTITLE: Setting Monitoring Environment Variables\nDESCRIPTION: Configures the monitoring provider and enables performance instrumentation for the Remix Supabase SaaS kit. The monitoring provider can be set to either 'sentry' or 'baselime'.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/technical_details_updating_codebase_installation_97.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# sentry or baselime\nVITE_MONITORING_PROVIDER=\n\n# performance monitoring\nMONITORING_INSTRUMENTATION_ENABLED=true\n```\n\n----------------------------------------\n\nTITLE: Creating AI Autocomplete Action Handler Route in Remix\nDESCRIPTION: TypeScript code for creating a Remix API route that handles AI autocomplete actions, using the handler provided by the AI Text Editor plugin.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_configuration_stripe_one_time_payments_stripe_webhooks_82.md#2025-04-22_snippet_17\n\nLANGUAGE: ts\nCODE:\n```\nimport type { ActionFunctionArgs } from '@remix-run/node';\nimport { createAIAutocompleteActionHandler } from '~/plugins/text-editor/lib/route-handler';\n\nexport const action = (params: ActionFunctionArgs) =>\n  createAIAutocompleteActionHandler(params.request);\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Guard in Remix\nDESCRIPTION: Shows how to protect routes using requireSession function to verify authenticated users with MFA support\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/user_sdk_sdk_ci_tests_84.md#2025-04-22_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nimport { redirect } from \"@remix-run/node\";\n\nexport async function loader() {\n  const session = await requireSession();\n\n  if (!session) {\n    return redirect(\"/auth/sign-in\");\n  }\n\n  return {\n    session,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Tasks Table Schema in Supabase SQL\nDESCRIPTION: SQL command to create a tasks table with organization relationships and necessary columns including name, description, completion status, and due date.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/organization_sdk_organization_subscription_sdk_sdk_25.md#2025-04-22_snippet_24\n\nLANGUAGE: sql\nCODE:\n```\ncreate table tasks (\n  id bigint generated always as identity primary key,\n  organization_id bigint not null references public.organizations,\n  name text not null,\n  description text,\n  done bool not null,\n  due_date timestamptz not null\n);\n```\n\n----------------------------------------\n\nTITLE: Creating useInsertTask Hook with SWR Mutation in React\nDESCRIPTION: This snippet implements a custom React hook 'useInsertTask' using SWR mutation. It utilizes a 'useApiRequest' hook to handle CSRF token insertion automatically for API requests.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/api_routes_vs_server_actions_api_routes_call_api_routes_from_client_19.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport useMutation from 'swr/mutation';\nimport useApiRequest from '~/core/hooks/use-api';\n\ninterface Task {\n  name: string;\n}\n\nfunction useInsertTask() {\n  const fetcher = useApiRequest();\n  const path = '/api/task';\n\n  return useMutation(\n    path, async (_, data: { arg: Task }) => {\n      return fetcher({\n        path,\n        body: data.arg,\n        method: 'POST'\n      });\n    }\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Stripe Webhook Event Handler\nDESCRIPTION: Switch statement for routing different types of Stripe webhook events to their respective handlers.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_configuration_stripe_one_time_payments_stripe_webhooks_82.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nswitch (event.type) {\n  case StripeWebhooks.Completed: {\n    // handle completed\n  }\n\n  case StripeWebhooks.AsyncPaymentSuccess: {\n     // handle async payment success\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Function to Get Active Subscription\nDESCRIPTION: SQL function that returns an active subscription for a given user ID. This function queries the subscriptions table for records with either 'active' or 'trialing' status, returning subscription period dates, price ID, and interval.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/server_actions_uploading_data_to_storage_writing_data_to_supabase_30.md#2025-04-22_snippet_23\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace function get_active_subscription(user_id bigint)\nreturns table (\n  period_starts_at timestamptz,\n  period_ends_at timestamptz,\n  price_id text,\n  \"interval\" text\n) as $$\nbegin\n    return query select subscriptions.period_starts_at, subscriptions.period_ends_at, subscriptions.price_id, subscriptions.\"interval\" from public.subscriptions\n    where subscriptions.user_id = user_id and (subscriptions.status = 'active' or subscriptions.status = 'trialing');\nend;\n$$ language plpgsql;\n```\n\n----------------------------------------\n\nTITLE: Basic Skeleton Component Implementation\nDESCRIPTION: A simple skeleton loading component implementation using shadcn UI. Creates a placeholder loading state with customizable height and width.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/multi_step_forms_page_shadcn_40.md#2025-04-22_snippet_29\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Skeleton } from '@kit/ui/skeleton';\n\nexport default function SkeletonDemo() {\n  return (\n    <div className=\"flex flex-col gap-4\">\n      <Skeleton className=\"h-6 w-full\" />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Server Action with Path Revalidation in TypeScript\nDESCRIPTION: Enhances the server action to include path revalidation using Next.js' revalidatePath utility, ensuring UI updates after status changes.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/data_fetching_3.md#2025-04-22_snippet_29\n\nLANGUAGE: tsx\nCODE:\n```\nimport { revalidatePath } from 'next/cache';\nimport { getLogger } from '@kit/shared/logger';\nimport { getSupabaseServerClient } from '@kit/supabase/server-client'\n\nexport const updateTicketStatusAction = enhanceAction(\n  async (data) => {\n    const logger = await getLogger();\n    const client = getSupabaseServerClient();\n\n    logger.info({ data }, 'Updating ticket status...');\n\n    const response = await client\n      .from('tickets')\n      .update({\n        status: data.status,\n      })\n      .eq('id', data.ticketId)\n      .single();\n\n    if (response.error) {\n      logger.error(\n        { error: response.error.message },\n        'Error updating ticket status',\n      );\n\n      throw new Error(response.error.message);\n    }\n\n    revalidatePath(`/home/[account]/tickets/[ticket]`, 'page');\n\n    return response.data;\n  },\n  {\n    auth: true,\n    schema: UpdateTicketStatusSchema,\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Using Supabase Server Admin Client in Next.js\nDESCRIPTION: This code shows how to import and use the Supabase admin client with elevated privileges using the getSupabaseServerAdminClient function. This should only be used in exceptional cases and only in server environments.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/csrf_protection_react_query_route_handlers_43.md#2025-04-22_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getSupabaseServerAdminClient } from '@kit/supabase/server-admin-client';\n\nexport async function myServerAction() {\n  const supabase = getSupabaseServerAdminClient();\n\n  const { data, error } = await supabase.from('users').select('*')\n\n  return {\n    success: true,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying User Billing Service to Handle Addon Data\nDESCRIPTION: Updates the createCheckoutSession method in the user billing service to pass addon data to the billing gateway when creating a checkout session.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_billing_checkout_addons_subscription_entitlements_54.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nasync createCheckoutSession({\n  planId,\n  productId,\n  addons,\n}: z.infer<typeof PersonalAccountCheckoutSchema>) {\n  // ...existing code\n\n  const checkoutToken = await this.billingGateway.createCheckoutSession({\n    // ...existing props\n    addons,\n  });\n\n  // ...rest of the method\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom API Request Hook in Remix\nDESCRIPTION: Example of creating a custom hook for making API requests using the useApiRequest hook, which wraps the fetch API and handles request states.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/setting_up_firebase_custom_fetch_fetching_data_firestore_70.md#2025-04-22_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport useApiRequest from '~/core/hooks/use-api';\n\ninterface Body {\n  idToken: string;\n}\n\nexport function useCreateSession() {\n  return useApiRequest<void, Body>('/api/session/sign-in');\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Task Mutation with Supabase\nDESCRIPTION: Defines a function to delete a task from the Supabase database. It takes a client and task ID as parameters and removes the corresponding record from the tasks table.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/running_project_supabase_data_fetching_supabase_data_writing_27.md#2025-04-22_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nimport type { SupabaseClient } from '@supabase/supabase-js';\nimport type { Database } from '../../database.types';\nimport { TASKS_TABLE } from '~/lib/db-tables';\n\ntype Client = SupabaseClient<Database>;\n\nexport function deleteTask(\n  client: Client,\n  taskId: number\n) {\n  return client.from(TASKS_TABLE).delete().match({\n    id: taskId\n  }).throwOnError();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Next.js Layout Component Wrapping Children (TSX)\nDESCRIPTION: This TSX code defines a React functional component `MyLayout` intended for use as a Next.js layout. It accepts children via `props: React.PropsWithChildren` and renders them within a `MyClientComponent`, demonstrating how layouts can structure page content and potentially introduce client-side interactivity boundaries.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/realtime_updates_server_components_7.md#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function MyLayout(props: React.PropsWithChildren) {\n  return (\n     <MyClientComponent>\n        {props.children}\n     </MyClientComponent>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Team Account Navigation Configuration\nDESCRIPTION: Defines team account navigation with dynamic route generation based on account parameter and feature flags.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stepper_components_application_configuration_41.md#2025-04-22_snippet_30\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  CreditCard,\n  LayoutDashboard,\n  MessageSquare,\n  Settings,\n  Users,\n} from 'lucide-react';\n\nimport { NavigationConfigSchema } from '@kit/ui/navigation-schema';\n\nimport featureFlagsConfig from '~/config/feature-flags.config';\nimport pathsConfig from '~/config/paths.config';\n\nconst iconClasses = 'w-4';\n\nconst getRoutes = (account: string) => [\n  {\n    label: 'common:routes.application',\n    children: [\n      {\n        label: 'common:routes.dashboard',\n        path: pathsConfig.app.accountHome.replace('[account]', account),\n        Icon: <LayoutDashboard className={iconClasses} />,\n        end: true,\n      },\n      {\n        label: 'common:routes.chat',\n        path: pathsConfig.app.accountHome.replace('[account]', account) + '/chat',\n        Icon: <MessageSquare className={iconClasses} />,\n        end: false,\n      },\n    ],\n  },\n  {\n    label: 'common:settingsTabLabel',\n    collapsible: false,\n    children: [\n      {\n        label: 'common:routes.settings',\n        path: createPath(pathsConfig.app.accountSettings, account),\n        Icon: <Settings className={iconClasses} />,\n      },\n      {\n        label: 'common:routes.members',\n        path: createPath(pathsConfig.app.accountMembers, account),\n        Icon: <Users className={iconClasses} />,\n      },\n      featureFlagsConfig.enableTeamAccountBilling\n        ? {\n            label: 'common:routes.billing',\n            path: createPath(pathsConfig.app.accountBilling, account),\n            Icon: <CreditCard className={iconClasses} />,\n          }\n        : undefined,\n    ].filter(Boolean),\n  },\n];\n\nexport function getTeamAccountSidebarConfig(account: string) {\n  return NavigationConfigSchema.parse({\n    routes: getRoutes(account),\n    style: process.env.NEXT_PUBLIC_TEAM_NAVIGATION_STYLE,\n    sidebarCollapsed: process.env.NEXT_PUBLIC_TEAM_SIDEBAR_COLLAPSED,\n  });\n}\n\nfunction createPath(path: string, account: string) {\n  return path.replace('[account]', account);\n}\n```\n\n----------------------------------------\n\nTITLE: Extending TicketsService to Fetch Single Ticket\nDESCRIPTION: This TypeScript code extends the TicketsService class with a method to fetch a single support ticket by its ID and account. It uses Supabase to query the tickets table and joins with account data, returning the ticket details including account information.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/data_fetching_3.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SupabaseClient } from '@supabase/supabase-js';\n\nimport { Database, Tables } from '~/lib/database.types';\n\nclass TicketsService {\n  //...\n\n  async getTicket(params: { ticketId: string; account: string }) {\n    const { data, error } = await this.client\n      .from('tickets')\n      .select<\n        string,\n        Tables<'tickets'> & {\n          account_id: {\n            id: string;\n            slug: string;\n          };\n        }\n      >('*, account_id !inner (slug, id)')\n      .eq('id', params.ticketId)\n      .eq('account_id.slug', params.account)\n      .single();\n\n    if (error) {\n      throw error;\n    }\n\n    return data;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Default User Roles with TypeScript Enum\nDESCRIPTION: Defines the default hierarchical user roles (Member, Admin, Owner) for the application using a TypeScript enum (`MembershipRole`). The order implies hierarchy, with 'Owner' being the highest.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/commands_cors_develop_firebase_security_rules_5.md#2025-04-22_snippet_32\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nexport enum MembershipRole {\n  Member,\n  Admin,\n  Owner,\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Custom SWR Mutation Hook for API Requests in Next.js (TypeScript)\nDESCRIPTION: Defines a React hook using useApiRequest and useSWRMutation to create a session via an API endpoint. The hook automatically manages request headers for security tokens and allows React components to easily trigger API mutations with properly typed input objects. Requires the useApiRequest and useSWRMutation libraries, as well as a correctly implemented API endpoint.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/custom_fetch_fetching_data_firestore_making_api_requests_4.md#2025-04-22_snippet_9\n\nLANGUAGE: TSX\nCODE:\n```\nimport useApiRequest from '~/core/hooks/use-api';\n\ninterface Body {\n  idToken: string;\n}\n\nexport function useCreateSession() {\n  const endpoint = '/api/session/sign-in';\n  const fetcher = useApiRequest<void, Body>();\n\n  return useSWRMutation(endpoint, (path, { arg }) => {\n    return fetcher({\n      path,\n      body: arg,\n    });\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Member Roles with SQL\nDESCRIPTION: SQL function call to update a project member's role\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/projects_data_model_53.md#2025-04-22_snippet_19\n\nLANGUAGE: sql\nCODE:\n```\nSELECT public.update_project_member_role(:user_id, 'admin'::public.project_role, :project_id);\n```\n\n----------------------------------------\n\nTITLE: Validating CSRF Tokens in Action Functions\nDESCRIPTION: Shows how to validate CSRF tokens in Remix action functions by using the withCsrf function with a callback to extract the token from the request body. This ensures that only requests with valid tokens are processed.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/user_sdk_sdk_ci_tests_84.md#2025-04-22_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nexport const action: ActionFunction = async ({ request }) => {\n  const body = await request.json();\n  await withCsrf(request, () => body.csrfToken);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the UserSession Interface Structure (TS)\nDESCRIPTION: Defines the TypeScript interface `UserSession` which structures the data returned by the `useUserSession` hook. It contains `auth` (Supabase Auth user data) and `data` (custom user data from the user's document).\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/functions_initializing_project_introduction_85.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nexport interface UserSession {\\n  auth: AuthUser | undefined;\\n  data: UserData | undefined;\\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Session Data with useUserSession Hook\nDESCRIPTION: This code shows how to use the useUserSession hook to access the current user's session information, including both authentication data and user document data from Supabase.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/deploying_production_environment_variables_functions_26.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useUserSession } from '~/core/hooks/use-user-session';\n\nfunction MyComponent() {\n  const userSession = useUserSession();\n  const userId = userSession?.auth?.uid;\n\n  return (\n    <div>\n      <p>Current user ID: {userId}</p>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Indexing Blog and Documentation Pages\nDESCRIPTION: Command to index blog and documentation pages for search functionality.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/commands_cors_develop_firebase_security_rules_5.md#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nnpm run blog-docs-indexer\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Authentication Strategies in Makerkit - TypeScript/React\nDESCRIPTION: Demonstrates enabling several authentication methods at once, such as both email/password and phone number login, alongside social login via OAuth providers. Parameters true/false toggle respective auth flows. The UI may need customization to handle simultaneous strategies, as the default does not support multiple flows natively.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/adding_app_pages_guarding_pages_updating_sidebar_menu_32.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nproviders: {\n  emailPassword: true,\n  phoneNumber: true,\n  emailLink: false,\n  oAuth: ['google', 'facebook'] as Provider[]\n},\n```\n\n----------------------------------------\n\nTITLE: Creating Supabase Credits Table for User Tokens (SQL)\nDESCRIPTION: This SQL script creates a `credits` table in Supabase to track the number of tokens (credits) associated with each user account (`account_id`). It establishes a foreign key relationship with the `accounts` table, enables RLS, and creates a policy allowing authenticated users to read only their own credit balance.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/billing_webhooks_credit_based_billing_lemon_squeezy_89.md#2025-04-22_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\ncreate table public.credits (\n  account_id uuid not null references public.accounts(id),\n  tokens integer not null\n);\n\nalter table public.credits enable row level security;\n\n-- allow authenticated users to read their credits\ncreate policy read_credits\n  on public.credits\n  for select\n  to authenticated\n  using (\n    account_id = (select auth.uid())\n  );\n```\n\n----------------------------------------\n\nTITLE: Validating Remix Action Form Data with Zod's parseAsync\nDESCRIPTION: This snippet shows how to validate incoming form data within a Remix `ActionFunction` using a Zod schema's `parseAsync` method. It reads form data, converts it to an object, and then attempts to parse it using `getBodySchema().parseAsync()`. If validation fails, `parseAsync` throws an error, which is caught, and a `BadRequestException` is thrown. If validation succeeds, the destructured `displayName` and `email` are used.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/develop_firebase_security_rules_emails_encrypting_secrets_71.md#2025-04-22_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport { throwBadRequestException } from `~/core/http-exceptions`;\n\nexport const action: ActionFunction = async ({request}) => {\n  try {\n     // we can safely use data with the interface Body\n    const data = await req.formData();\n    const body = Object.fromEntries(data.entries());\n    const bodyResult = await getBodySchema().parseAsync(body);\n    const { displayName, email } = bodyResult.data;\n\n    return sendInvite({ displayName, email });\n  } catch(e) {\n    return throwBadRequestException();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting a Task Record into Supabase with a Typed Mutation (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to define a TypeScript function, createTask, that creates a new task record in a Supabase database via the insert method. It includes the Task type definition and maps the input properties to the corresponding database columns. The function expects a Supabase client and task object (without id), and requires @supabase/supabase-js and the Database types. Inputs: SupabaseClient<Database>, task (Omit<Task, 'id'>). Output: Supabase insert result. Limitations include assuming external definition of Task type and requiring a compatible Supabase schema.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/adding_app_pages_guarding_pages_updating_sidebar_menu_32.md#2025-04-22_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { SupabaseClient } from '@supabase/supabase-js';\nimport type { Database } from '~/database.types';\n\ntype Task = {\n  id: string;\n  name: string;\n  userId: string;\n  description: string;\n  dueDate: Date;\n  done: boolean;\n};\n\nexport function createTask(\n  client: SupabaseClient<Database>,\n  task: Omit<Task, 'id'>\n) {\n  return client.from('tasks').insert({\n    name: task.name,\n    user_id: task.userId,\n    description: task.description,\n    due_date: task.dueDate,\n    done: task.done,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Guarding Next.js API Routes by HTTP Method (TypeScript/Next.js, Makerkit)\nDESCRIPTION: This snippet uses the withMethodsGuard utility to restrict a route to certain HTTP methods, here GET and POST. When integrated with withPipe, it provides a concise way to manage permitted methods at the entry point. The second example demonstrates calling withMethodsGuard directly inside an async API handler to allow only the PUT method. Returns 405 and appropriate Allow header if not matched. Depends on withMethodsGuard and, in the first snippet, withPipe utilities.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/custom_fetch_fetching_data_firestore_making_api_requests_4.md#2025-04-22_snippet_24\n\nLANGUAGE: tsx\nCODE:\n```\nimport { withMethodsGuard } from '~/core/middleware/with-methods-guard';\n\nexport default withPipe(\n  withMethodsGuard(['GET', 'POST'])\n);\n```\n\nLANGUAGE: tsx\nCODE:\n```\nexport default async function apiHandler() {\n  await withMethodsGuard(['PUT']);\n}\n```\n\n----------------------------------------\n\nTITLE: Tracking Custom Events with Makerkit Analytics API in TypeScript\nDESCRIPTION: Shows how to use the `trackEvent` method from the Makerkit Analytics API to record specific user actions or events, such as a button click. It includes the event name and optional properties for context.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/analytics_api_custom_analytics_provider_google_analytics_provider_57.md#2025-04-22_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nvoid analytics.trackEvent('Button Clicked', {\n  buttonName: 'Submit',\n  page: 'Sign Up',\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Default User Roles with TypeScript Enum\nDESCRIPTION: This snippet defines the default hierarchical user roles (`Member`, `Admin`, `Owner`) for the application using a TypeScript `enum` named `MembershipRole`. The order within the enum implies hierarchy, where `Owner` has the highest privileges.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/develop_firebase_security_rules_emails_encrypting_secrets_71.md#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nexport enum MembershipRole {\n  Member,\n  Admin,\n  Owner,\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Page Guarding in Next.js getServerSideProps with TypeScript\nDESCRIPTION: This TSX snippet illustrates a generic pattern for guarding Next.js pages within `getServerSideProps`. It first calls `withAppProps` to get initial props and ensure the user is authenticated. Then, it performs a custom authorization check (`checkUserCanAccessPage`). If the check fails, it redirects the user to the '/dashboard' page using the redirect object. Otherwise, it returns the props fetched by `withAppProps`, allowing the page to render.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/call_api_routes_from_client_csrf_token_guarding_api_routes_7.md#2025-04-22_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nimport { GetServerSidePropsContext } from \"next\";\nimport { withAppProps } from '~/lib/props/with-app-props';\n\nfunction Page() {\n  // render the page\n}\n\nexport async function getServerSideProps(\n  ctx: GetServerSidePropsContext\n) {\n  const appProps = await withAppProps(ctx);\n\n  // We augment the props with the data we want\n  // to pass to the client\n  // replace the below with your own logic\n  const canAccessPage = await checkUserCanAccessPage();\n\n  if (!canAccessPage) {\n    return {\n      redirect: {\n        destination: '/dashboard',\n        permanent: false,\n      },\n    }\n  }\n\n  return appProps;\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Single Content Item by Slug\nDESCRIPTION: Demonstrates how to fetch a single content item using its slug identifier from a specific collection.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/cms_api_cms_creating_your_own_cms_client_42.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createCmsClient } from '@kit/cms';\n\nconst client = await createCmsClient();\n\n// Fetch a single content item\nconst item = await client.getContentItemBySlug({\n  slug: 'hello-world',\n  collection: 'posts'\n});\n```\n\n----------------------------------------\n\nTITLE: SWR Data Fetching Hook Implementation\nDESCRIPTION: Custom React hook using SWR for fetching data from an API endpoint with TypeScript support\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/validating_api_input_zod_development_clone_repository_31.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport useSWR from 'swr';\n\nexport function useFetchData() {\n  const key = '/api/data';\n\n  return useSWR<{ hello: string }>([key], async () => {\n    return fetch(key).then(res => res.json());\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Dark Theme in Next.js Makerkit\nDESCRIPTION: Configuration for disabling the dark theme and using only the light theme. The theme switcher is enabled, but the default theme is set to light, allowing users to opt-in to different themes.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/updating_navigation_menu_403_error_actions_contentlayer_stuck_34.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n{\n  features: {\n    enableThemeSwitcher: true,\n  },\n  theme: Themes.Light,\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Addon Localization Support\nDESCRIPTION: Adds a translation key for the term \"Add-ons\" in the billing locale file to ensure proper localization of addon-related UI elements.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_billing_checkout_addons_subscription_entitlements_54.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  // ...existing translations\n  \"addons\": \"Add-ons\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js API Route for Ticket/Message Submission (TypeScript)\nDESCRIPTION: This Next.js API route handler (`/api/ticket/route.ts`) processes POST requests to create new support tickets or messages. It uses Zod (`NewMessageSchema`) for input validation, initializes the `CustomerTicketService` with a Supabase admin client, and calls either `createTicket` or `createMessage` based on whether a `ticketId` is provided in the request body. The handler also includes an `OPTIONS` method and sets appropriate CORS headers (`Access-Control-Allow-Origin`, `Access-Control-Allow-Methods`, `Access-Control-Allow-Headers`) to allow cross-origin requests from any website.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/building_javascript_widget_1.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextResponse } from 'next/server';\n\nimport { literal, z } from 'zod';\n\nimport { enhanceRouteHandler } from '@kit/next/routes';\nimport { getSupabaseServerAdminClient } from '@kit/supabase/server-admin-client';\n\nimport { createCustomerTicketService } from './_lib/server/customer-ticket.service';\n\nconst NewMessageSchema = z.object({\n  message: z.string().min(1).max(5000),\n  accountId: z.string().uuid(),\n  ticketId: z.string().uuid().or(literal('')),\n});\n\nexport const OPTIONS = () => {\n  return NextResponse.json(\n    {},\n    {\n      headers: {\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Methods': 'POST',\n        'Access-Control-Allow-Headers': '*',\n      },\n    },\n  );\n};\n\nexport const POST = enhanceRouteHandler(\n  async ({ body }) => {\n    const client = getSupabaseServerAdminClient();\n\n    const { message, ticketId, accountId } = body;\n    const service = createCustomerTicketService(client);\n\n    const newMessage = ticketId\n      ? await service.createMessage({\n          ticketId,\n          message,\n        })\n      : await service.createTicket({\n          accountId,\n          message,\n        });\n\n    return NextResponse.json(newMessage, {\n      headers: {\n        'Access-Control-Allow-Origin': '*',\n      },\n    });\n  },\n  {\n    schema: NewMessageSchema,\n    auth: false,\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Ticket Status Badge Component in React\nDESCRIPTION: This snippet defines a TicketStatusBadge component that displays the status of a support ticket using a Badge component from Shadcn UI. It takes the ticket status as a prop and renders different badge variants based on the status.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/realtime_updates_server_components_7.md#2025-04-22_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Badge } from '@kit/ui/badge';\n\nimport { Tables } from '~/lib/database.types';\n\nexport function TicketStatusBadge({\n  status,\n}: {\n  status: Tables<'tickets'>['status'];\n}) {\n  switch (status) {\n    case 'open':\n      return <Badge variant={'warning'}>Open</Badge>;\n\n    case 'closed':\n      return <Badge variant={'secondary'}>Closed</Badge>;\n\n    case 'resolved':\n      return <Badge variant={'success'}>Resolved</Badge>;\n\n    case 'in_progress':\n      return <Badge variant={'info'}>In Progress</Badge>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Multi-Step Form Implementation in TypeScript\nDESCRIPTION: Simple example showing how to set up a multi-step form with React Hook Form and Zod validation. Demonstrates basic form structure and step management.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/multi_step_forms_page_shadcn_40.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { MultiStepForm, MultiStepFormStep } from '@kit/ui/multi-step-form';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\n\nconst FormSchema = createStepSchema({\n  step1: z.object({ /* ... */ }),\n  step2: z.object({ /* ... */ }),\n});\n\nexport function MyForm() {\n  const form = useForm({\n    resolver: zodResolver(FormSchema),\n    // ...\n  });\n\n  const onSubmit = (data) => {\n    // Handle form submission\n  };\n\n  return (\n    <MultiStepForm schema={FormSchema} form={form} onSubmit={onSubmit}>\n      <MultiStepFormStep name=\"step1\">\n        {/* Step 1 fields */}\n      </MultiStepFormStep>\n      <MultiStepFormStep name=\"step2\">\n        {/* Step 2 fields */}\n      </MultiStepFormStep>\n    </MultiStepForm>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Feature Usage Update Functions\nDESCRIPTION: SQL functions for updating feature usage data in Supabase, including JSON merge operations and atomic quota updates with UPSERT patterns.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_billing_checkout_addons_subscription_entitlements_54.md#2025-04-22_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\nCREATE OR REPLACE FUNCTION public.update_feature_usage(\n  p_account_id UUID, \n  p_feature VARCHAR, \n  p_usage JSONB\n)\nRETURNS VOID AS $$\nBEGIN\n  PERFORM 1 FROM public.accounts WHERE id = p_account_id;\n  IF NOT FOUND THEN\n    RAISE EXCEPTION 'Cannot update feature usage for non-existent account';\n  END IF;\n  \n  INSERT INTO public.feature_usage (account_id, feature, usage)\n  VALUES (p_account_id, p_feature, p_usage)\n  ON CONFLICT (account_id, feature)\n  DO UPDATE SET usage = public.feature_usage.usage || p_usage,\n                updated_at = NOW();\nEND;\n$$ LANGUAGE plpgsql;\n\nCREATE OR REPLACE FUNCTION public.update_feature_quota_usage(\n  p_account_id UUID, \n  p_feature VARCHAR, \n  p_count INTEGER\n)\nRETURNS VOID \nSECURITY INVOKER \nAS $$\nBEGIN\n  INSERT INTO public.feature_usage (account_id, feature, usage, updated_at)\n  VALUES (\n    p_account_id, \n    p_feature, \n    jsonb_build_object('count', p_count),\n    NOW()\n  )\n  ON CONFLICT (account_id, feature)\n  DO UPDATE SET usage = jsonb_set(\n      COALESCE(public.feature_usage.usage, '{}'::jsonb),\n      '{count}',\n      to_jsonb(\n        COALESCE((public.feature_usage.usage->>'count')::INTEGER, 0) + p_count\n      )\n    ),\n    updated_at = NOW();\nEND;\n$$ LANGUAGE plpgsql;\n```\n\n----------------------------------------\n\nTITLE: Handling All Webhook Events Using onEvent - Makerkit BillingService (TypeScript)\nDESCRIPTION: This snippet shows usage of the generic onEvent callback to handle any unrecognized or custom Stripe webhook event. The async function receives the event data, allowing for logging or custom behavior. It should be passed alongside other callbacks to \\`handleWebhookEvent\\`. Proper type-checking is the developer's responsibility.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/api_billing_api_billing_schema_58.md#2025-04-22_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nawait service.handleWebhookEvent(request, {\n  async onEvent(data: unknown) {\n    logger.info(\n      `Received billing event`,\n    );\n\n    // Your custom code here\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Deleting Tasks with Firestore and React Hook\nDESCRIPTION: This snippet provides a custom hook `useDeleteTask` to remove a task from Firestore. It uses `deleteDoc` from Firebase Firestore to perform the deletion operation. The hook requires `reactfire` library and Firestore configuration.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/development_getting_started_environment_variables_firestore_data_fetching_74.md#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useFirestore } from 'reactfire';\nimport { deleteDoc, doc } from 'firebase/firestore';\nimport { useCallback } from 'react';\n\nfunction useDeleteTask(taskId: string) {\n  const firestore = useFirestore();\n  const collection = `tasks`;\n  const task = doc(firestore, collection, taskId);\n\n  return useCallback(() => {\n    return deleteDoc(task);\n  }, [task]);\n}\n\nexport default useDeleteTask;\n```\n\n----------------------------------------\n\nTITLE: Configuring Per-Seat Billing Schema in React/TypeScript\nDESCRIPTION: This snippet demonstrates how to define a per-seat billing schema for tiered pricing based on the number of users. It configures products, plans, and line items with tiers for different pricing levels based on user count.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/paddle_per_seat_billing_stripe_90.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport default createBillingSchema({\n  provider,\n  products: [\n    {\n      id: 'starter',\n      name: 'Starter',\n      description: 'The perfect plan to get started',\n      currency: 'USD',\n      badge: `Value`,\n      plans: [\n        {\n          name: 'Starter Monthly',\n          id: 'starter-monthly',\n          trialDays: 7,\n          paymentType: 'recurring',\n          interval: 'month',\n          lineItems: [\n            {\n              id: 'price_1NNwYHI1i3VnbZTqI2UzaHIe',\n              name: 'Addon 2',\n              cost: 0,\n              type: 'per_seat',\n              tiers: [\n                {\n                    upTo: 3,\n                    cost: 0,\n                },\n                {\n                    upTo: 5,\n                    cost: 7.99,\n                },\n                {\n                    upTo: 'unlimited',\n                    cost: 5.99,\n                }\n              ]\n            },\n          ],\n        }\n      ],\n    }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering CMS Content in Next.js using TSX\nDESCRIPTION: This snippet demonstrates how to use the 'getContentItemBySlug' function to fetch and render content from a CMS in a React component. It requires a CMS client created by 'createCmsClient' from '@kit/cms' and assumes that a 'pages' collection exists in your CMS. The function uses the slug 'terms-and-conditions' to retrieve and display content.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/cms_api_cms_creating_your_own_cms_client_42.md#2025-04-22_snippet_4\n\nLANGUAGE: TSX\nCODE:\n```\nimport { createCmsClient } from '@kit/cms';\n\nasync function TermsAndConditionsPage() {\n  const client = await createCmsClient();\n\n  const { content, title } = await client.getContentItemBySlug({\n    slug: 'terms-and-conditions',\n    collection: 'pages',\n  });\n\n  return (\n    <div>\n      <h1>{title}</h1>\n      <div>{content}</div>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Client-side Task Creation Form with Server Action\nDESCRIPTION: React form component that handles task creation using the server action. Includes form validation, state management with useTransition, and CSRF protection.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/server_actions_uploading_data_to_storage_writing_data_to_supabase_17.md#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\nimport type { FormEventHandler } from 'react';\nimport { useCallback, useTransition } from 'react';\nimport { toast } from 'sonner';\nimport { useRouter } from 'next/navigation';\n\nimport TextField from '~/core/ui/TextField';\nimport Button from '~/core/ui/Button';\nimport If from '~/core/ui/If';\nimport useCurrentOrganization from '~/lib/organizations/hooks/use-current-organization';\nimport { createTaskAction } from '~/lib/tasks/actions';\nimport useCsrfToken from '~/core/hooks/use-csrf-token';\n\nconst CreateTaskForm = () => {\n  const [isMutating, startTransition] = useTransition();\n  const organization = useCurrentOrganization();\n  const organizationId = organization?.id as number;\n  const csrfToken = useCsrfToken();\n  const router = useRouter();\n\n  const onCreateTask: FormEventHandler<HTMLFormElement> = useCallback(\n    async (event) => {\n      event.preventDefault();\n\n      const target = event.currentTarget;\n      const data = new FormData(target);\n      const name = data.get('name') as string;\n      const dueDate = (data.get('dueDate') as string) || getDefaultDueDate();\n\n      if (name.trim().length < 3) {\n        toast.error('Task name must be at least 3 characters long');\n\n        return;\n      }\n\n      const task = {\n        organizationId,\n        name,\n        dueDate,\n        done: false,\n      };\n\n      startTransition(async () => {\n        await createTaskAction({ task, csrfToken });\n\n        router.push('../tasks');\n      });\n    },\n    [csrfToken, organizationId, router]\n  );\n\n  return (\n    <form onSubmit={onCreateTask}>\n      <div className={'flex flex-col space-y-2'}>\n        <TextField.Label>\n          Name\n          <TextField.Input\n            required\n            name={'name'}\n            placeholder={'ex. Launch on IndieHackers'}\n          />\n          <TextField.Hint>Hint: whatever you do, ship!</TextField.Hint>\n        </TextField.Label>\n\n        <TextField.Label>\n          Due date\n          <TextField.Input name={'dueDate'} type={'date'} />\n        </TextField.Label>\n\n        <div\n          className={\n            'flex flex-col space-y-2 md:flex-row md:space-x-2 md:space-y-0'\n          }\n        >\n          <Button loading={isMutating}>\n            <If condition={isMutating} fallback={<>Create Task</>}>\n              Creating Task...\n            </If>\n          </Button>\n\n          <Button color={'transparent'} href={'../tasks'}>\n            Go back\n          </Button>\n        </div>\n      </div>\n    </form>\n  );\n```\n\n----------------------------------------\n\nTITLE: Implementing Server Action for Ticket Status Update in TypeScript\nDESCRIPTION: Defines a server action to update the ticket status in the database using Supabase. It includes error handling and logging.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/data_fetching_3.md#2025-04-22_snippet_27\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getLogger } from '@kit/shared/logger';\nimport { getSupabaseServerClient } from '@kit/supabase/server-client'\n\nimport { UpdateTicketStatusSchema } from '../schema/update-ticket-status.schema';\n\nexport const updateTicketStatusAction = enhanceAction(\n  async (data) => {\n    const logger = await getLogger();\n    const client = getSupabaseServerClient();\n\n    logger.info({ data }, 'Updating ticket status...');\n\n    const response = await client\n      .from('tickets')\n      .update({\n        status: data.status,\n      })\n      .eq('id', data.ticketId)\n      .single();\n\n    if (response.error) {\n      logger.error(\n        { error: response.error.message },\n        'Error updating ticket status',\n      );\n\n      throw new Error(response.error.message);\n    }\n\n    return response.data;\n  },\n  {\n    auth: true,\n    schema: UpdateTicketStatusSchema,\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Extending Webhook Handler with Event Callbacks - Makerkit BillingService (TypeScript)\nDESCRIPTION: This example demonstrates expanding the Makerkit webhook handler to accept event-specific callback functions, such as onPaymentFailed and onCheckoutSessionCompleted. Developers can supply custom logic to handle targeted Stripe event types. The \\`request\\` passed in should contain the Stripe webhook payload, and the service object comes from Makerkit’s billing module.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/api_billing_api_billing_schema_58.md#2025-04-22_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nawait service.handleWebhookEvent(request, {\n  onPaymentFailed: async (sessionId) => {},\n  onPaymentSucceeded: async (sessionId) => {},\n  onCheckoutSessionCompleted: async (subscription, customerId) => {},\n  onSubscriptionUpdated: async (subscription) => {},\n  onSubscriptionDeleted: async (subscriptionId) => {},\n});\n```\n\n----------------------------------------\n\nTITLE: Using Supabase Client in Route Handlers\nDESCRIPTION: This snippet shows how to get a server-side Supabase client for use in API Route Handlers. It demonstrates both regular client initialization and admin client with service role permissions.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/deploying_production_environment_variables_functions_26.md#2025-04-22_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport getSupabaseRouteHandlerClient from '~/core/supabase/route-handler-client';\n\nexport function  GET() {\n  const supabase = getSupabaseRouteHandlerClient();\n\n  // Do something with the supabase client\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Billing Customer ID\nDESCRIPTION: Demonstrates how to fetch the billing customer ID for an account using the getCustomerId method.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/analytics_api_custom_analytics_provider_google_analytics_provider_57.md#2025-04-22_snippet_51\n\nLANGUAGE: tsx\nCODE:\n```\nconst api = createTeamAccountsApi(client);\nconst customerId = await api.getCustomerId('account-id');\n```\n\n----------------------------------------\n\nTITLE: Guarding Pages by User Role in Remix\nDESCRIPTION: This snippet demonstrates how to guard a page based on the user's role within the currently selected organization. It loads the user data, checks the role, and redirects non-owners to the home page.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/navigating_codebase_running_the_application_technical_details_78.md#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LoaderFunctionArgs } from \"@remix-run/node\";\n\nasync function loader(args: LoaderFunctionArgs) {\n  const data = await loadAppData(args);\n  const userRole = data.role;\n\n  // if the user is not an owner, redirect them to the home page\n  if (userRole !== MembershipRole.Owner) {\n    return redirect('/');\n  }\n\n  // return props to the page\n}\n\nasync function OnlyOwnersPage() {\n  const data = await useLoaderData<typeof loader>();\n  // render the page\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Navigation Menu Items with Links - TypeScript/TSX\nDESCRIPTION: This code snippet renders the navigation menu based on the structured links object by mapping each entry to a NavigationMenuItem component. It utilizes React/Remix components and displays each navigation link in the menu, tightly coupling the UI to the central data source for maintainability. Expects a valid 'links' object and NavigationMenu/NavigationMenuItem components. Inputs are components and links data; outputs are menu items in the rendered UI.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/functions_initializing_project_introduction_85.md#2025-04-22_snippet_19\n\nLANGUAGE: TSX\nCODE:\n```\n<NavigationMenu>\n  <NavigationMenuItem link={links.Blog} />\n  <NavigationMenuItem link={links.Docs} />\n  <NavigationMenuItem link={links.Pricing} />\n  <NavigationMenuItem link={links.FAQ} />\n</NavigationMenu>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Complete Page with Loader in Makerkit using TypeScript and React\nDESCRIPTION: This code snippet demonstrates a complete implementation of a page with a loader in a Makerkit application. It includes server-side data fetching, authentication, internationalization, and rendering of a team home page. The loader function fetches team data and sets up the page title, while the component renders the page layout and content.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/creating_your_own_cms_client_keystatic_wordpress_62.md#2025-04-22_snippet_39\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\nimport { PageBody } from '@kit/ui/page';\nimport { Trans } from '@kit/ui/trans';\n\nimport { createI18nServerInstance } from '~/lib/i18n/i18n.server';\nimport { requireUserLoader } from '~/lib/require-user-loader';\nimport type { Route } from '~/types/app/routes/home/account/+types';\n\nimport { TeamAccountLayoutPageHeader } from './_components/team-account-layout-page-header';\nimport { loadTeamData } from './_lib/team-data-loader.server';\n\nexport const loader = async (args: Route.LoaderArgs) => {\n  const i18n = await createI18nServerInstance(args.request);\n\n  // Require user authentication\n  await requireUserLoader(args.request);\n\n  const client = getSupabaseServerClient(args.request);\n  const account = args.params.account as string;\n\n  // Load team data\n  const teamData = await loadTeamData(client, account);\n\n  return {\n    title: i18n.t('teams:home.pageTitle'),\n    account,\n    teamData\n  };\n};\n\nexport const meta = ({ data }: Route.MetaArgs) => {\n  return [\n    {\n      title: data?.title,\n    },\n  ];\n};\n\nexport default function TeamHomePage(props: Route.ComponentProps) {\n  const { account, teamData } = props.loaderData;\n\n  return (\n    <>\n      <TeamAccountLayoutPageHeader\n        account={account}\n        title={<Trans i18nKey={'common:teamDashboard'} />}\n      />\n\n      <PageBody>\n        <TeamDataDisplay data={teamData} />\n      </PageBody>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Authentication Configuration with Environment Variables\nDESCRIPTION: Code showing how authentication methods (password, magic link, OAuth) are configured using environment variables and validated with Zod schema.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stepper_components_application_configuration_61.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst authConfig = AuthConfigSchema.parse({\n  // NB: This is a public key, so it's safe to expose.\n  // Copy the value from the Supabase Dashboard.\n  captchaTokenSiteKey: import.meta.env.VITE_CAPTCHA_SITE_KEY,\n\n  // NB: Enable the providers below in the Supabase Console\n  // in your production project\n  providers: {\n    password: import.meta.env.VITE_AUTH_PASSWORD === 'true',\n    magicLink: import.meta.env.VITE_AUTH_MAGIC_LINK === 'true',\n    oAuth: ['google'],\n  },\n} satisfies z.infer<typeof AuthConfigSchema>);\n```\n\n----------------------------------------\n\nTITLE: Integrating ServerDataLoader with DataTable in React (JSX)\nDESCRIPTION: Demonstrates fetching data from a Supabase table using ServerDataLoader and displaying it in a DataTable component within a React functional component. It handles pagination and filtering based on search parameters, utilizing Supabase admin client and parsing search parameters.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/app_breadcrumbs_bordered_navigation_menu_card_button_39.md#2025-04-22_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ServerDataLoader } from '@makerkit/data-loader-supabase-nextjs';\nimport { DataTable } from '@kit/ui/enhanced-data-table';\nimport { getSupabaseServerAdminClient } from '@kit/supabase/server-admin-client';\n\nfunction AccountsPage({ searchParams }) {\n  const client = getSupabaseServerAdminClient();\n  const page = searchParams.page ? parseInt(searchParams.page) : 1;\n  const filters = getFilters(searchParams);\n\n  return (\n    <ServerDataLoader\n      table={'accounts'}\n      client={client}\n      page={page}\n      where={filters}\n    >\n      {({ data, page, pageSize, pageCount }) => (\n        <DataTable\n          columns={[\n            // Define your columns here\n          ]}\n          data={data}\n          page={page}\n          pageSize={pageSize}\n          pageCount={pageCount}\n        />\n      )}\n    </ServerDataLoader>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Settings for Next.js Supabase Application\nDESCRIPTION: This TypeScript configuration file defines the global settings for a MakerKit SaaS application, including site metadata, authentication paths, email configuration, and feature flags. It's stored in /configuration.ts and accessible via the alias ~/configuration.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/architecture_auth_overview_auth_setup_29.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  site: {\n    name: '',\n    description: '',\n    themeColor: '#ffffff',\n    themeColorDark: '#0a0a0a',\n    siteUrl: process.env.NEXT_PUBLIC_SITE_URL,\n    siteName: '',\n    twitterHandle: '',\n    githubHandle: '',\n    language: 'en',\n    convertKitFormId: '',\n    locale: process.env.NEXT_PUBLIC_DEFAULT_LOCALE,\n  },\n  paths: {\n    signIn: '/auth/sign-in',\n    signUp: '/auth/sign-up',\n    emailLinkSignIn: '/auth/link',\n    appHome: '/tasks',\n    settings: {\n      profile: '/settings/profile',\n      authentication: '/settings/profile/authentication',\n      email: '/settings/profile/email',\n      password: '/settings/profile/password',\n    },\n  },\n  auth: {\n    requireEmailConfirmation:\n      process.env.NEXT_PUBLIC_REQUIRE_EMAIL_CONFIRMATION === 'true',\n    // NB: Enable the providers below in the Supabase Console\n    // in your production project\n    providers: {\n      emailPassword: true,\n      phoneNumber: false,\n      emailLink: false,\n      oAuth: ['google'],\n    },\n  },\n  email: {\n    host: '',\n    port: 0,\n    user: '',\n    password: '',\n  },\n  environment: process.env.NEXT_PUBLIC_ENVIRONMENT,\n  production: process.env.NODE_ENV === 'production',\n  features: {\n    enableThemeSwitcher: true,\n  },\n  theme: Themes.Light,\n  stripe: {\n    products: [\n      {\n        name: 'Basic',\n        description: 'Describe your basic plan',\n        plans: [\n          {\n            price: '$249/year',\n            stripePriceId: '<STRIPE_PRICE_ID>',\n          }\n        ],\n      },\n      {\n        name: 'Pro',\n        description: 'Describe your pro plan',\n        plans: [\n          {\n            price: '$249/year',\n            stripePriceId: '<STRIPE_PRICE_ID>',\n          }\n        ],\n      },\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Addons in Billing Configuration\nDESCRIPTION: Updates the billing configuration to include addons for specific plans. Each addon includes an id (matching the Stripe planId), name, cost, and type.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_billing_checkout_addons_subscription_entitlements_54.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nplans: [\n  {\n    // ...existing plan config\n    addons: [\n      {\n        id: 'price_1J4J9zL2c7J1J4J9zL2c7J1',\n        name: 'Extra Feature',\n        cost: 9.99,\n        type: 'flat' as const,\n      },\n    ],\n  },\n],\n```\n\n----------------------------------------\n\nTITLE: Full Project Schema Implementation\nDESCRIPTION: Complete SQL schema defining project roles, actions, tables, and permissions including RLS policies and indexes.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/projects_data_model_53.md#2025-04-22_snippet_26\n\nLANGUAGE: sql\nCODE:\n```\ncreate type public.project_role as enum ('owner', 'admin', 'member');\n\ncreate type public.project_action as enum (\n  'view_project',\n  'edit_project',\n  'delete_project',\n  'invite_member',\n  'remove_member'\n);\n\ncreate table if not exists public.projects (\n  id uuid default gen_random_uuid() primary key,\n  name varchar(255) not null,\n  description text,\n  account_id uuid not null references public.accounts(id) on delete cascade,\n  created_at timestamptz not null default now(),\n  updated_at timestamptz not null default now()\n);\n\nrevoke all on public.projects from public, service_role;\ngrant select, insert, update, delete on public.projects to authenticated;\n\ncreate index projects_account_id on public.projects (account_id);\n\nalter table public.projects enable row level security;\n```\n\n----------------------------------------\n\nTITLE: Selecting Tasks RLS Policy - SQL\nDESCRIPTION: Defines a row-level select policy for `public.tasks` permitting 'authenticated' users to select only their own tasks or tasks of accounts where they have a role (checked by `public.has_role_on_account`). Depends on the `authenticated` role and `public.has_role_on_account`. Allows select queries only where the user owns the task or has related account roles. Input is the requesting user context, output is filtered rows. Limitation: relies on correct user/account mapping and function behavior.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/adding_turborepo_package_approaching_local_development_database_functions_44.md#2025-04-22_snippet_21\n\nLANGUAGE: SQL\nCODE:\n```\ncreate policy select_tasks on public.tasks\\n    for select\\n    to authenticated\\n    using (\\n      account_id = auth.uid() or\\n      public.has_role_on_account(account_id)\\n    );\n```\n\n----------------------------------------\n\nTITLE: Navigating and Installing Dependencies (Bash)\nDESCRIPTION: Changes the current directory to 'tasks-app' and then installs the project's Node.js dependencies using the Node Package Manager (npm).\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/functions_initializing_project_introduction_85.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ncd tasks-app\\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Analytics Providers\nDESCRIPTION: Example of registering multiple analytics providers (Google Analytics, Mixpanel, and a custom provider) to dispatch the same events across different platforms.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/custom_analytics_provider_google_analytics_provider_posthog_analytics_provider_36.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst analytics = createAnalyticsManager({\n  providers: {\n    googleAnalytics: (config) => new GoogleAnalyticsService(config),\n    mixpanel: (config) => new MixpanelService(config),\n    myCustom: (config) => new MyCustomAnalyticsService(config),\n    null: () => NullAnalyticsService,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration\nDESCRIPTION: Example environment variables configuration for Supabase authentication keys.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/validating_api_input_zod_development_clone_repository_31.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nNEXT_PUBLIC_SUPABASE_ANON_KEY=****************************************************\nSUPABASE_SERVICE_ROLE_KEY=****************************************************\n```\n\n----------------------------------------\n\nTITLE: Using withPipe Middleware for API Request Handling in Next.js\nDESCRIPTION: Example API route demonstrating the use of withPipe to compose multiple middleware functions for handling HTTP requests, including method guarding and authentication.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/deploying_production_development_getting_started_environment_variables_13.md#2025-04-22_snippet_28\n\nLANGUAGE: ts\nCODE:\n```\nimport { NextApiRequest, NextApiResponse } from \"next\";\n\nimport { withAuthedUser } from '~/core/middleware/with-authed-user';\nimport { withPipe } from '~/core/middleware/with-pipe';\nimport { withMethodsGuard } from '~/core/middleware/with-methods-guard';\nimport { withExceptionFilter } from '~/core/middleware/with-exception-filter';\n\nexport default function helloWorld(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n  const handler = withPipe(\n    withMethodsGuard(['GET']),\n    withAuthedUser,\n    (req, res) => {\n      res.status(200).json({ message: 'Hello World!' });\n    }\n  );\n\n  return withExceptionFilter(req, res)(handler);\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Sentry Configuration with Source Maps\nDESCRIPTION: Extended Sentry configuration that includes source map uploading, organization and project settings, and environment-specific behaviors.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/sentry_monitoring_notifications_configuration_51.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { withSentryConfig } from '@sentry/nextjs';\n\nexport default withSentryConfig(\n  withBundleAnalyzer({\n    enabled: process.env.ANALYZE === 'true',\n  })(config),\n  {\n    org: 'your-sentry-org-name',\n    project: 'your-sentry-project-name',\n\n    // An auth token is required for uploading source maps.\n    authToken: process.env.SENTRY_AUTH_TOKEN,\n\n    silent: !IS_PRODUCTION, // Used to suppress logs\n    autoInstrumentServerFunctions: false,\n    widenClientFileUpload: true,\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Sidebar Navigation in Makerkit (TSX)\nDESCRIPTION: This snippet shows the default sidebar navigation configuration defined in `src/navigation.config.tsx`. It exports a function `NAVIGATION_CONFIG` that takes an organization ID and returns an object containing an `items` array. Each item in the array represents a menu entry with a label (referencing translation keys), a path constructed using a helper function `getPath`, and an icon component from `@heroicons/react/24/outline`. The `getPath` function generates the full URL by combining the app prefix, organization ID, and specific path.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/api_routes_vs_server_actions_api_routes_call_api_routes_from_client_19.md#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport configuration from '~/configuration';\n\nimport {\n  Cog8ToothIcon,\n  Square3Stack3DIcon,\n  Squares2X2Icon,\n} from '@heroicons/react/24/outline';\n\nconst NAVIGATION_CONFIG = (organization: string) => ({\n  items: [\n    {\n      label: 'common:dashboardTabLabel',\n      path: getPath(organization, configuration.paths.appHome),\n      Icon: ({ className }: { className: string }) => {\n        return <Squares2X2Icon className={className} />;\n      },\n    },\n    {\n      label: 'common:tasksTabLabel',\n      path: getPath(organization, 'tasks'),\n      Icon: ({ className }: { className: string }) => {\n        return <Square3Stack3DIcon className={className} />;\n      },\n    },\n    {\n      label: 'common:settingsTabLabel',\n      path: getPath(organization, 'settings'),\n      Icon: ({ className }: { className: string }) => {\n        return <Cog8ToothIcon className={className} />;\n      },\n    },\n  ],\n});\n\nfunction getPath(organizationId: string, path: string) {\n  const appPrefix = configuration.paths.appPrefix;\n\n  return [appPrefix, organizationId, path].filter(Boolean).join('/');\n}\n\nexport default NAVIGATION_CONFIG;\n```\n\n----------------------------------------\n\nTITLE: Corresponding TypeScript Interface for Zod Schema\nDESCRIPTION: Shows the TypeScript interface (`Body`) that corresponds to the Zod schema defined previously, outlining the expected structure of the validated data (`displayName` as string, `email` as Email type).\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/commands_cors_develop_firebase_security_rules_5.md#2025-04-22_snippet_37\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\ninterface Body {\n  displayName: string;\n  email: Email;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Consuming Credits with Supabase Client in TypeScript\nDESCRIPTION: This TypeScript function consumes user credits by calling the Supabase RPC function 'consume_credits'. It uses the Supabase route handler client to interact with the database. The function first gathers usage data from an OpenAI API call before updating the user's account credits.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/api_billing_api_billing_schema_58.md#2025-04-22_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nexport function async consumeApi(accountId: string) {\n  // Call the OpenAI API to get the usage\n  const { usage, data } = await callOpenAIApi();\n\n  const client = getSupabaseRouteHandlerClient({\n    admin: true,\n  });\n\n  await client.rpc('consume_credits', {\n    account_id: accountId,\n    tokens: usage,\n  });\n\n  return data;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Static Pages to Sitemap in React Router Route\nDESCRIPTION: This TypeScript function `getPaths` within the `apps/web/app/routes/sitemap/route.tsx` file defines the list of static URL paths to be included in the website's sitemap. To add a new static page (like `/about`), its relative path should be added to the `paths` array. The function then maps these paths to the required sitemap entry format, including the full URL (using `appConfig.url`) and the last modification date. Blog and documentation pages are added automatically elsewhere.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/database_webhooks_legal_pages_marketing_pages_64.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nfunction getPaths() {\n  const paths = [\n    '/',\n    '/faq',\n    '/blog',\n    '/docs',\n    '/pricing',\n    '/contact',\n    '/cookie-policy',\n    '/terms-of-service',\n    '/privacy-policy',\n    // add more paths here,\n    '/about', // <-- add the new page here\n  ];\n\n  return paths.map((path) => {\n    return {\n      loc: new URL(path, appConfig.url).href,\n      lastmod: new Date().toISOString(),\n    };\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Account API in Remix Loader (TypeScript)\nDESCRIPTION: Demonstrates how to initialize the Makerkit Account API within a Remix loader function. It involves importing `createAccountsApi`, getting a `SupabaseClient` using `getSupabaseServerClient` with the request object, and then creating the API instance.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/google_analytics_provider_posthog_analytics_provider_umami_analytics_provider_88.md#2025-04-22_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createAccountsApi } from '@kit/accounts/api';\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\n\nexport async function loader(args: LoaderFunctionArgs) {\n  const client = getSupabaseServerClient(args.request);\n  const api = createAccountsApi(client);\n\n  // use api\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Server Action in React Form Component with CSRF Token\nDESCRIPTION: Demonstrates how to call a Next.js Server Action within a React form component, including the required CSRF token implementation using a hidden form input.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/user_reading_record_creating_record_20.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createTaskAction } from '~/lib/tasks/actions';\nimport useCsrfToken from '~/core/hooks/use-csrf-token';\n\nfunction TaskForm() {\n  const csrfToken = useCsrfToken();\n\n  return (\n    <form action={createTaskAction}>\n      <input type=\"text\" name=\"task.name\" />\n      <input type=\"text\" name=\"task.description\" />\n      <input type=\"date\" name=\"task.dueDate\" />\n      <input type=\"hidden\" name=\"csrfToken\" value={csrfToken} />\n      <button type=\"submit\">Create Task</button>\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Subscription Interface in TypeScript\nDESCRIPTION: Demonstrates how to add additional properties to the OrganizationSubscription interface to extend subscription data.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/subscription_permissions_organizations_lemon_squeezy_23.md#2025-04-22_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nexport interface OrganizationSubscription {\n  // ...\n  quantity: number | null;\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Data from Supabase in Next.js Server Component\nDESCRIPTION: Implements a server component that loads user workspace data and tasks from Supabase. Features include pagination, search functionality, and internationalization support using the @makerkit/data-loader-supabase-nextjs package.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/adding_turborepo_package_approaching_local_development_database_functions_44.md#2025-04-22_snippet_34\n\nLANGUAGE: tsx\nCODE:\n```\nimport { use } from 'react';\n\nimport { ServerDataLoader } from '@makerkit/data-loader-supabase-nextjs';\n\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\nimport { Button } from '@kit/ui/button';\nimport { Heading } from '@kit/ui/heading';\nimport { If } from '@kit/ui/if';\nimport { Input } from '@kit/ui/input';\nimport { PageBody } from '@kit/ui/page';\nimport { Trans } from '@kit/ui/trans';\n\nimport { createI18nServerInstance } from '~/lib/i18n/i18n.server';\nimport { withI18n } from '~/lib/i18n/with-i18n';\n\nimport { TasksTable } from './_components/tasks-table';\nimport { UserAccountHeader } from './_components/user-account-header';\nimport { loadUserWorkspace } from './_lib/server/load-user-workspace';\n\ninterface SearchParams {\n  page?: string;\n  query?: string;\n}\n\nexport const generateMetadata = async () => {\n  const i18n = await createI18nServerInstance();\n  const title = i18n.t('account:homePage');\n\n  return {\n    title,\n  };\n};\n\nfunction UserHomePage(props: { searchParams: SearchParams }) {\n  const client = getSupabaseServerClient();\n  const { user } = use(loadUserWorkspace());\n\n  const page = parseInt(props.searchParams.page ?? '1', 10);\n  const query = props.searchParams.query ?? '';\n\n  return (\n    <>\n      <UserAccountHeader\n        title={<Trans i18nKey={'common:homeTabLabel'} />}\n        description={<Trans i18nKey={'common:homeTabDescription'} />}\n      />\n\n      <PageBody className={'space-y-4'}>\n        <div className={'flex items-center justify-between'}>\n          <div>\n            <Heading level={4}>\n              <Trans i18nKey={'tasks:tasksTabLabel'} defaults={'Tasks'} />\n            </Heading>\n          </div>\n\n          <div className={'flex items-center space-x-2'}>\n            <form className={'w-full'}>\n              <Input\n                name={'query'}\n                defaultValue={query}\n                className={'w-full lg:w-[18rem]'}\n                placeholder={'Search tasks'}\n              />\n            </form>\n          </div>\n        </div>\n\n        <ServerDataLoader\n          client={client}\n          table={'tasks'}\n          page={page}\n          where={{\n            account_id: {\n              eq: user.id,\n            },\n            title: {\n              textSearch: query ? `%${query}%` : undefined,\n            },\n          }}\n        >\n          {(props) => {\n            return (\n              <div className={'flex flex-col space-y-8'}>\n                <If condition={props.count === 0 && query}>\n                  <div className={'flex flex-col space-y-2.5'}>\n                    <p>\n                      <Trans\n                        i18nKey={'tasks:noTasksFound'}\n                        values={{ query }}\n                      />\n                    </p>\n\n                    <form>\n                      <input type=\"hidden\" name={'query'} value={''} />\n\n                      <Button variant={'outline'} size={'sm'}>\n                        <Trans i18nKey={'tasks:clearSearch'} />\n                      </Button>\n                    </form>\n                  </div>\n                </If>\n\n                <TasksTable {...props} />\n              </div>\n            );\n          }}\n        </ServerDataLoader>\n      </PageBody>\n    </>\n  );\n}\n\nexport default withI18n(UserHomePage);\n```\n\n----------------------------------------\n\nTITLE: Adding Project Members Function in PostgreSQL\nDESCRIPTION: Function to add new members to a project with role-based access control and team membership validation.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/projects_data_model_53.md#2025-04-22_snippet_32\n\nLANGUAGE: plpgsql\nCODE:\n```\ncreate or replace function public.add_project_member(\n  p_project_id uuid,\n  p_user_id uuid,\n  p_role public.project_role default 'member'\n) returns boolean\nset search_path = ''\nas $$\ndeclare\n  v_account_id uuid;\nbegin\n  if not public.is_project_admin(p_project_id) or p_role = 'owner' then\n    raise exception 'permission denied';\n  end if;\n\n  select account_id into v_account_id\n  from public.projects\n  where id = p_project_id;\n\n  if not exists (\n    select 1 from public.accounts_memberships\n    where account_id = v_account_id and user_id = p_user_id\n  ) then\n    raise exception 'user is not a member of the team account';\n  end if;\n\n  insert into public.project_members (project_id, user_id, role)\n  values (p_project_id, p_user_id, p_role)\n  on conflict (project_id, user_id) do update\n  set role = excluded.role;\n\n  return true;\nend;\n$$ language plpgsql;\n```\n\n----------------------------------------\n\nTITLE: Getting Team Account Members Count with Team Account API (TypeScript)\nDESCRIPTION: Demonstrates how to retrieve the total number of members within a specific team account using the `getMembersCount` method from the Team Account API.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/google_analytics_provider_posthog_analytics_provider_umami_analytics_provider_88.md#2025-04-22_snippet_32\n\nLANGUAGE: tsx\nCODE:\n```\nconst api = createTeamAccountsApi(client);\nconst membersCount = await api.getMembersCount('account-id');\n```\n\n----------------------------------------\n\nTITLE: Submitting Forms via useFetcher and react-hook-form (TypeScript / TSX)\nDESCRIPTION: This snippet demonstrates implementing a form in React that submits data using React Router's useFetcher and react-hook-form with zod validation. It collects user data, assembles intent/payload, and posts it as JSON. Dependencies are react-router, react-hook-form, and zod. Inputs are user-submitted form data; outputs are server-side actions triggered by fetcher. Limitation: requires proper schema configuration and an action endpoint.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/creating_your_own_cms_client_keystatic_wordpress_62.md#2025-04-22_snippet_15\n\nLANGUAGE: TSX\nCODE:\n```\n'use client';\\n\\nimport { useFetcher } from 'react-router';\\nimport { useForm } from 'react-hook-form';\\nimport { zodResolver } from '@hookform/resolvers/zod';\\n\\nfunction MyForm() {\\n  const form = useForm({\\n    resolver: zodResolver(MyFormSchema),\\n    defaultValues: {\\n      // Your default values\\n    },\\n  });\\n\\n  const fetcher = useFetcher();\\n  const pending = fetcher.state === 'submitting';\\n\\n  return (\\n    <form\\n      onSubmit={form.handleSubmit((data) => {\\n        return fetcher.submit(\\n          {\\n            intent: 'my-action-intent',\\n            payload: data,\\n          },\\n          {\\n            encType: 'application/json',\\n            method: 'POST',\\n          },\\n        );\\n      })}\\n    >\\n      {/* Form fields */}\\n\\n      <Button type=\"submit\" disabled={pending}>\\n        {pending ? 'Processing...' : 'Submit'}\\n      </Button>\\n    </form>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Products in Billing Schema\nDESCRIPTION: Example of configuring a product in the billing schema, including ID, name, description, currency, and a badge for the pricing table UI.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/user_workspace_api_api_billing_api_37.md#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nexport default createBillingSchema({\n  provider,\n  products: [\n    {\n      id: 'starter',\n      name: 'Starter',\n      description: 'The perfect plan to get started',\n      currency: 'USD',\n      badge: `Value`,\n      plans: [],\n    }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Running Docker Containers for Supabase\nDESCRIPTION: Command to check if Supabase Docker containers are currently running. Useful for troubleshooting startup issues when Supabase fails to start due to already running instances.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/branding_environment_variables_setup_project_configuration_80.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ndocker ps\n```\n\n----------------------------------------\n\nTITLE: Creating Supabase Function to Consume Credits (SQL)\nDESCRIPTION: This SQL script defines a PostgreSQL function `consume_credits` within Supabase. It takes an `account_id` (UUID) and `tokens` (integer) as input and subtracts the specified number of tokens from the account's balance in the `credits` table. Execute permission is granted only to the `service_role` for security, preventing direct client-side updates.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/billing_webhooks_credit_based_billing_lemon_squeezy_89.md#2025-04-22_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace function public.consume_credits(account_id uuid, tokens integer)\n  returns void\n  set search_path = ''\n  as $$\n  begin\n    update public.credits set tokens = tokens - tokens where account_id = account_id;\n  end;\n  $$ language plpgsql;\n\ngrant execute on function public.has_credits to service_role;\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Firebase Hooks for Feature Development\nDESCRIPTION: This example shows how to create a custom hook to fetch data from Firestore. The hook is part of a feature-based organization pattern where business logic is separated by domain in the lib directory.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/custom_fetch_fetching_data_firestore_making_api_requests_4.md#2025-04-22_snippet_29\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function useFetchEvents() {\n  const firestore = useFirestore();\n  const eventsCollection = 'events';\n\n  const collectionRef = collection(\n    firestore,\n    eventsCollection\n  ) as CollectionReference<WithId<Task>>;\n\n  const path = `organizationId`;\n  const operator = '==';\n  const constraint = where(path, operator, organizationId);\n  const organizationsQuery = query(collectionRef, constraint);\n\n  return useFirestoreCollectionData(organizationsQuery, {\n    idField: 'id',\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Task Hook with SWR Mutation\nDESCRIPTION: Defines a custom React hook that uses SWR mutation to create tasks. It integrates with the Supabase client and provides routing functionality to refresh the page after successful creation.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/running_project_supabase_data_fetching_supabase_data_writing_27.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport useSWRMutation from 'swr/mutation';\nimport { useRouter } from 'next/navigation';\n\nimport useSupabase from '~/core/hooks/use-supabase';\nimport { createTask } from '~/lib/tasks/mutations';\nimport type Task from '~/lib/tasks/types/task';\n\nfunction useCreateTaskMutation() {\n  const client = useSupabase();\n  const router = useRouter();\n  const key = 'tasks';\n\n  return useSWRMutation(key, async (_, { arg: task }: { arg: Omit<Task, 'id'> }) => {\n    return createTask(client, task);\n  }, {\n    onSuccess: () => router.refresh()\n  });\n}\n\nexport default useCreateTaskMutation;\n```\n\n----------------------------------------\n\nTITLE: Implementing Support Ticket Widget Container in React TypeScript\nDESCRIPTION: A complete implementation of a floating support ticket chat widget that allows users to submit support requests and view responses. The component includes an expandable chat interface with message history, input form, and animated toggle button.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/building_javascript_widget_1.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\nimport { useCallback, useEffect, useRef, useState } from 'react';\n\nimport { MessageCircle, Send, X } from 'lucide-react';\n\nimport { If } from '@kit/ui/if';\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from '@kit/ui/tooltip';\nimport { cn } from '@kit/ui/utils';\n\nimport { useWidgetState } from '../lib/use-widget-state';\n\ninterface Message {\n  id: string;\n  ticketId: string;\n  author: 'customer' | 'support';\n  content: string;\n  createdAt: string;\n}\n\nconst API_URL = process.env.API_URL!;\n\nexport default function SupportTicketWidgetContainer(props: {\n  accountId: string;\n}) {\n  const state = useWidgetState();\n  const scrollingDiv = useRef<HTMLDivElement>(null);\n\n  const { messages, appendMessage } = useFetchTicketMessages({\n    ticketId: state.ticketId,\n    isOpen: state.isOpen,\n  });\n\n  const scrollToBottom = () => {\n    scrollingDiv.current?.scrollTo({\n      top: scrollingDiv.current.scrollHeight,\n    });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  return (\n    <>\n      <If condition={state.isOpen}>\n        <WidgetContainer>\n          <div className={'flex h-full flex-1 flex-col'}>\n            <WidgetHeader />\n\n            <div\n              ref={(div) => {\n                scrollingDiv.current = div as HTMLDivElement;\n              }}\n              className={'flex flex-1 flex-col overflow-y-auto p-4'}\n            >\n              <WidgetMessagesContainer messages={messages} />\n            </div>\n\n            <WidgetInput\n              accountId={props.accountId}\n              ticketId={state.ticketId}\n              onSubmit={(message) => {\n                state.setTicketId(message.ticketId);\n                appendMessage(message);\n              }}\n            />\n          </div>\n        </WidgetContainer>\n      </If>\n\n      <WidgetBubble />\n    </>\n  );\n}\n\nfunction WidgetHeader() {\n  const { setIsOpen } = useWidgetState();\n\n  return (\n    <div\n      className={\n        'flex items-center justify-between border-b px-4 py-3 md:rounded-t-xl'\n      }\n    >\n      <div className={'text-foreground flex flex-col'}>\n        <span className={'font-semibold'}>Ask Support</span>\n      </div>\n\n      <div className={'flex items-center space-x-4'}>\n        <TooltipProvider>\n          <Tooltip>\n            <TooltipTrigger asChild>\n              <button\n                onClick={() => {\n                  setIsOpen(false);\n                }}\n              >\n                <X className={'text-foreground h-4 dark:hover:text-white'} />\n              </button>\n            </TooltipTrigger>\n\n            <TooltipContent>Close</TooltipContent>\n          </Tooltip>\n        </TooltipProvider>\n      </div>\n    </div>\n  );\n}\n\nfunction WidgetContainer(props: React.PropsWithChildren) {\n  return (\n    <div\n      className={cn(\n        'animate-in fade-in slide-in-from-bottom-24 fixed z-50 duration-200' +\n          ' bg-background font-sans md:rounded-lg' +\n          ' h-[60vh] w-full md:w-[40vw] xl:w-[26vw]' +\n          ' zoom-in-90 bottom-0 border shadow-2xl md:bottom-36 md:right-8',\n      )}\n    >\n      {props.children}\n    </div>\n  );\n}\n\nfunction WidgetBubble() {\n  const { isOpen, setIsOpen } = useWidgetState();\n\n  const className = cn('bottom-8 md:bottom-16 md:right-8', {\n    'hidden md:flex': isOpen,\n  });\n\n  const iconClassName = 'w-8 h-8 animate-in fade-in zoom-in';\n\n  const Icon = isOpen ? (\n    <X className={iconClassName} />\n  ) : (\n    <MessageCircle className={iconClassName} />\n  );\n\n  return (\n    <button\n      className={cn(\n        'animate-out text-primary-foreground bg-primary h-16 w-16 rounded-full' +\n          ' animate-in zoom-in slide-in-from-bottom-16 fixed flex items-center justify-center' +\n          ' hover:opacity/90 transition-all hover:shadow-xl' +\n          ' z-50 duration-500 hover:-translate-y-1 hover:scale-105',\n        className,\n      )}\n      onClick={() => setIsOpen(!isOpen)}\n    >\n      {Icon}\n    </button>\n  );\n}\n\nfunction WidgetInput(props: {\n  accountId: string;\n  ticketId: string | undefined;\n  onSubmit: (message: Message) => void;\n}) {\n  const submitMessage = useSubmitMessage();\n\n  const onSubmit: React.FormEventHandler<HTMLFormElement> = useCallback(\n    async (e) => {\n      e.preventDefault();\n\n      const form = e.currentTarget;\n      const element = form.elements.namedItem('message') as HTMLInputElement;\n      const value = element.value.trim();\n\n      if (!value) {\n        return;\n      }\n\n      element.value = '';\n\n      const message = await submitMessage.mutateAsync({\n        accountId: props.accountId,\n        ticketId: props.ticketId,\n        message: value,\n      });\n\n      props.onSubmit(message);\n    },\n    [props],\n  );\n\n  return (\n    <form className={'mt-auto'} onSubmit={onSubmit}>\n      <div className={'relative flex'}>\n        <input\n          disabled={submitMessage.loading}\n          autoComplete={'off'}\n          required\n          name={'message'}\n          className={\n            'text-muted-foreground h-14 p-4' +\n            ' w-full rounded-bl-xl rounded-br-xl outline-none' +\n            ' resize-none border-t text-sm transition-colors' +\n            ' bg-background focus:text-secondary-foreground pr-8'\n          }\n          placeholder=\"Type your message...\"\n        />\n\n        <button\n          type={'submit'}\n          className={'absolute right-4 top-4 bg-transparent'}\n        >\n          <Send className={'text-muted-foreground h-6'} />\n        </button>\n      </div>\n    </form>\n  );\n}\n\nfunction WidgetMessagesContainer(props: {\n  messages: Message[]\n}) {\n  if (!props.messages.length) {\n    return (\n      <div className={'text-muted-foreground text-center'}>\n        Please send a message to start a conversation\n      </div>\n    );\n  }\n\n  return (\n    <div className={'flex flex-col space-y-5'}>\n      {props.messages.map((message) => {\n        const name = message.author === 'customer' ? 'You' : 'Support';\n\n        let className = 'p-3 flex flex-col space-y-1 border rounded-lg';\n\n        if (message.author === 'customer') {\n          className += ' bg-primary/5 border-primary/10';\n        } else {\n          className += '';\n        }\n\n        return (\n          <div className={'flex flex-col space-y-2'} key={message.id}>\n            <div className={'px-3'}>\n              <b className={'text-sm font-semibold'}>{name}</b>\n            </div>\n\n            <div className={className}>\n              <div className={'block max-w-full break-words text-sm'}>\n                {message.content}\n              </div>\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\nfunction useSubmitMessage() {\n  const [state, setState] = useState<{\n    loading: boolean;\n    error: Error | null;\n    data: { ticketId: string } | null;\n  }>({\n    loading: false,\n    error: null,\n    data: null,\n  });\n\n  const mutateAsync = useCallback(\n    async (props: {\n      accountId: string;\n      ticketId: string | undefined;\n      message: string;\n    }) => {\n      setState(state => ({ ...state, loading: true, error: null }));\n\n      try {\n        const response = await fetch(API_URL, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            ticketId: props.ticketId ?? undefined,\n            accountId: props.accountId,\n            message: props.message,\n          }),\n        });\n\n        if (!response.ok) {\n          throw new Error('Failed to submit message');\n        }\n\n        const result = (await response.json()) as Message;\n\n        setState({\n          loading: false,\n          error: null,\n          data: result,\n        });\n\n        return result;\n      } catch (error) {\n        setState({\n          loading: false,\n          error: new Error('Failed to parse response'),\n          data: null,\n        });\n\n        throw new Error('Failed to parse response');\n      }\n    },\n    [],\n  );\n\n  return {\n    ...state,\n    mutateAsync,\n  };\n}\n\nfunction useFetchTicketMessages({\n  ticketId,\n  isOpen,\n}: {\n  ticketId: string | undefined;\n  isOpen: boolean;\n}) {\n  const [state, setState] = useState<{\n    loading: boolean;\n    error: Error | null;\n    messages: Message[];\n  }>({\n    loading: true,\n    error: null,\n    messages: [],\n  });\n\n  const messages = state.messages;\n\n  const lastMessage = messages.reduce<Message | undefined>((acc, curr) => {\n    if (!acc) return;\n\n    return acc.createdAt > curr.createdAt ? acc : curr;\n  }, messages[0]);\n\n  const lastCreatedAt = lastMessage?.createdAt;\n\n  useEffect(() => {\n    if (!ticketId || !isOpen) {\n      return setState((state) => {\n        return {\n          ...state,\n          loading: false,\n          error: null,\n        };\n      });\n    }\n\n    function fetchMessages(lastCreatedAt?: string) {\n      setState(state => ({ ...state, loading: true, error: null }));\n\n      const timestamp = lastCreatedAt ? new Date(lastCreatedAt).toISOString() : '';\n\n      fetch(`${API_URL}/messages?ticketId=${ticketId}&lastCreatedAt=${timestamp}`)\n        .then((response) => {\n          if (!response.ok) {\n            throw new Error('Failed to fetch messages');\n          }\n\n          return response.json();\n        })\n        .then((messages) => {\n          const newMessages = messages.filter(\n            (message: Message) =>\n              !state.messages.some((m) => m.id === message.id),\n          );\n\n          setState(state => ({\n            loading: false,\n            error: null,\n            messages: [...state.messages, ...newMessages],\n          }));\n        })\n        .catch((error) => {\n          setState(state => ({\n            ...state,\n            loading: false,\n            error,\n          }));\n        });\n    }\n\n    // Fetch messages on mount\n    fetchMessages();\n\n\n\n```\n\n----------------------------------------\n\nTITLE: Invoking Default Webhook Handler - Makerkit BillingService (TypeScript)\nDESCRIPTION: This snippet shows the default invocation of Makerkit’s \\`service.handleWebhookEvent(request)\\` inside an API route. The handler processes Stripe webhook events and updates your application's database as needed. Requires an instance of BillingService (typically provided by Makerkit) and a \\`request\\` object compliant with your web framework.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/api_billing_api_billing_schema_58.md#2025-04-22_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nawait service.handleWebhookEvent(request);\n```\n\n----------------------------------------\n\nTITLE: API Handler with Usage Reporting\nDESCRIPTION: Example API handler function that consumes an API and reports the usage to the billing provider. It tracks the quantity of API requests and sends this data to the usage reporting system.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/billing_webhooks_credit_based_billing_lemon_squeezy_89.md#2025-04-22_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nasync function apiHandler(accountId: string) {\n  try {\n    // assume consumeApi returns the number of requests made\n    const quantity = await consumeApi(accountId);\n\n    await reportUsage(accountId, quantity);\n  } catch (error) {\n    console.error(error);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing API Request Validation in Remix Action Function\nDESCRIPTION: Demonstrates how to validate the request body inside a Remix action function using the Zod schema. It parses the JSON body against the defined schema and handles validation errors by throwing a bad request exception.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/user_sdk_sdk_ci_tests_84.md#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { throwBadRequestException } from `~/core/http-exceptions`;\n\nexport const action: ActionFunction = async ({ request }) => {\n  try {\n     // we can safely use data with the interface Body\n    const schema = getBodySchema();\n    const body = await request.json();\n    const { displayName, email } = schema.parse(body);\n\n    return sendInvite({ displayName, email });\n  } catch(e) {\n    return throwBadRequestException();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating Users with Supabase in Server Components\nDESCRIPTION: In this TypeScript snippet, the `requireUser` function is used in a Next.js environment to authenticate users in server components. The function checks if the user is authenticated and redirects if necessary. The proper use of a Supabase client is essential.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/custom_analytics_provider_google_analytics_provider_posthog_analytics_provider_36.md#2025-04-22_snippet_28\n\nLANGUAGE: tsx\nCODE:\n```\nimport { redirect } from 'next/navigation';\nimport { requireUser } from '@kit/supabase/require-user';\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\n\nasync function ServerComponent() {\n  const client = getSupabaseServerClient();\n  const auth = await requireUser(client);\n\n  // check if the user needs redirect\n  if (auth.error) {\n    redirect(auth.redirectTo);\n  }\n\n  // user is authed!\n  const user = auth.data;\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\n'use server';\n\nimport { redirect } from 'next/navigation';\nimport { requireUser } from '@kit/supabase/require-user';\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\n\nexport async function myServerAction() {\n  const client = getSupabaseServerClient();\n  const auth = await requireUser(client);\n\n  // check if the user needs redirect\n  if (auth.error) {\n    redirect(auth.redirectTo);\n  }\n\n  // user is authed!\n  const user = auth.data;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing API Logging with Pino in Next.js\nDESCRIPTION: Demonstrates how to use Pino for API logging in a Next.js application. The example shows proper logging before and after an action with contextual information.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/organization_sdk_organization_subscription_sdk_sdk_25.md#2025-04-22_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nasync function myFunction(params: {\n  organizationId: string;\n  userId: string;\n}) {\n  logger.info(\n    {\n      organizationId: params.organizationId,\n      userId: params.userId,\n    },\n    `Performing action...`\n  );\n\n  await performAction();\n\n  logger.info(\n    {\n      organizationId: params.organizationId,\n      userId: params.userId,\n    },\n    `Action successful`\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Server Action Implementation\nDESCRIPTION: Example of implementing a type-safe server action with Zod validation\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/llms_migration_from_makerkit_v1_navigating_codebase_49.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n'use server';\n\nimport { z } from 'zod';\n\nimport { enhanceAction } from '@kit/next/actions';\n\nconst ZodSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(6),\n});\n\nexport const myServerAction = enhanceAction(\n  async function (data, user) {\n    // 1. \"data\" is already a valid ZodSchema and it's safe to use\n    // 2. \"user\" is the authenticated user\n\n    // ... your code here\n    return {\n      success: true,\n    };\n  },\n  {\n    auth: true,\n    schema: ZodSchema,\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Development Environment Configuration\nDESCRIPTION: Environment variables for the development build of the widget, specifying the widget name and local API URL for testing.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/building_javascript_widget_1.md#2025-04-22_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nWIDGET_NAME=makerdesk-widget.js\nAPI_URL=http://localhost:3000/api/ticket\n```\n\n----------------------------------------\n\nTITLE: Creating Basic GET API Route in Next.js\nDESCRIPTION: Simple implementation of a GET API route that returns a JSON response in Next.js App Router.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/api_routes_vs_server_actions_api_routes_call_api_routes_from_client_19.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextResponse } from \"next/server\";\n\nexport function GET() {\n  return NextResponse.json({ text: 'Hello' });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Application Structure for Events Entity\nDESCRIPTION: This snippet shows the folder structure for adding an 'events' entity to the application, including locations for components, lib files, and routes.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/project_structure_running_project_tailwind_css_75.md#2025-04-22_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\n- app\n  - components\n    - events\n      - EventsContainerComponent.tsx\n      - ...\n\n  - lib\n    - events\n      - types\n        - event-model.ts\n        - ...\n      - hooks\n        - use-fetch-events.ts\n        - use-create-event.ts\n        - ...\n      - utils\n        - create-event-model.ts\n\n  - routes\n    - _app.events._index.tsx\n    - _app.events.$event.tsx\n```\n\n----------------------------------------\n\nTITLE: Defining an Invite Email Template with React.Email (TSX)\nDESCRIPTION: Defines a React component function `renderInviteEmail` using `@react-email/components` and `Tailwind` for styling. It generates the HTML for a team invitation email, accepting properties like team name, logo, inviter, invitee email, invitation link, and product name via its `Props` interface. The `render` function from `@react-email/components` is used to convert the JSX template into an HTML string suitable for sending.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/database_webhooks_legal_pages_marketing_pages_64.md#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  Body,\n  Button,\n  Column,\n  Container,\n  Head,\n  Heading,\n  Hr,\n  Html,\n  Img,\n  Link,\n  Preview,\n  Row,\n  Section,\n  Tailwind,\n  Text,\n  render,\n} from '@react-email/components';\n\ninterface Props {\n  teamName: string;\n  teamLogo?: string;\n  inviter: string | undefined;\n  invitedUserEmail: string;\n  link: string;\n  productName: string;\n}\n\nexport function renderInviteEmail(props: Props) {\n  const previewText = `Join ${props.invitedUserEmail} on ${props.productName}`;\n\n  return render(\n    <Html>\n      <Head />\n      <Preview>{previewText}</Preview>\n\n      <Tailwind>\n        <Body className=\"mx-auto my-auto bg-gray-50 font-sans\">\n          <Container className=\"mx-auto my-[40px] w-[465px] rounded-lg border border-solid border-[#eaeaea] bg-white p-[20px]\">\n            <Heading className=\"mx-0 my-[30px] p-0 text-center text-[24px] font-normal text-black\">\n              Join <strong>{props.teamName}</strong> on{' '}\n              <strong>{props.productName}</strong>\n            </Heading>\n            <Text className=\"text-[14px] leading-[24px] text-black\">\n              Hello {props.invitedUserEmail},\n            </Text>\n            <Text className=\"text-[14px] leading-[24px] text-black\">\n              <strong>{props.inviter}</strong> has invited you to the{' '}\n              <strong>{props.teamName}</strong> team on{' '}\n              <strong>{props.productName}</strong>.\n            </Text>\n            {props.teamLogo && (\n              <Section>\n                <Row>\n                  <Column align=\"center\">\n                    <Img\n                      className=\"rounded-full\"\n                      src={props.teamLogo}\n                      width=\"64\"\n                      height=\"64\"\n                    />\n                  </Column>\n                </Row>\n              </Section>\n            )}\n            <Section className=\"mb-[32px] mt-[32px] text-center\">\n              <Button\n                className=\"rounded bg-[#000000] px-[20px] py-[12px] text-center text-[12px] font-semibold text-white no-underline\"\n                href={props.link}\n              >\n                Join {props.teamName}\n              </Button>\n            </Section>\n            <Text className=\"text-[14px] leading-[24px] text-black\">\n              or copy and paste this URL into your browser:{' '}\n              <Link href={props.link} className=\"text-blue-600 no-underline\">\n                {props.link}\n              </Link>\n            </Text>\n            <Hr className=\"mx-0 my-[26px] w-full border border-solid border-[#eaeaea]\" />\n            <Text className=\"text-[12px] leading-[24px] text-[#666666]\">\n              This invitation was intended for{' '}\n              <span className=\"text-black\">{props.invitedUserEmail}</span>.\n            </Text>\n          </Container>\n        </Body>\n      </Tailwind>\n    </Html>,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Stripe Webhook Event Handling\nDESCRIPTION: Switch statement implementation for routing different types of Stripe webhook events to their respective handlers.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_one_time_payments_stripe_webhooks_payments_35.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nswitch (event.type) {\n  case StripeWebhooks.Completed: {\n    // handle completed\n  }\n\n  case StripeWebhooks.AsyncPaymentSuccess: {\n     // handle async payment success\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Personal Account Navigation in Next.js\nDESCRIPTION: Defines the personal workspace navigation structure using TypeScript and React components. Includes route groups, icons, and feature flag integration.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stepper_components_application_configuration_41.md#2025-04-22_snippet_26\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CreditCard, Home, User } from 'lucide-react';\nimport { z } from 'zod';\n\nimport { NavigationConfigSchema } from '@kit/ui/navigation-schema';\n\nimport featureFlagsConfig from '~/config/feature-flags.config';\nimport pathsConfig from '~/config/paths.config';\n\nconst iconClasses = 'w-4';\n\nconst routes = [\n  {\n    label: 'common:routes.application',\n    children: [\n      {\n        label: 'common:routes.home',\n        path: pathsConfig.app.home,\n        Icon: <Home className={iconClasses} />,\n        end: true,\n      },\n    ],\n  },\n  {\n    label: 'common:routes.settings',\n    children: [\n      {\n        label: 'common:routes.profile',\n        path: pathsConfig.app.personalAccountSettings,\n        Icon: <User className={iconClasses} />,\n      },\n      featureFlagsConfig.enablePersonalAccountBilling\n        ? {\n            label: 'common:routes.billing',\n            path: pathsConfig.app.personalAccountBilling,\n            Icon: <CreditCard className={iconClasses} />,\n          }\n        : undefined,\n    ].filter(route => !!route),\n  },\n] satisfies z.infer<typeof NavigationConfigSchema>['routes'];\n\nexport const personalAccountNavigationConfig = NavigationConfigSchema.parse({\n  routes,\n  style: process.env.NEXT_PUBLIC_USER_NAVIGATION_STYLE,\n  sidebarCollapsed: process.env.NEXT_PUBLIC_HOME_SIDEBAR_COLLAPSED,\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing SDK in Server Component\nDESCRIPTION: This code shows how to initialize the Makerkit SDK in a Next.js server component using the Supabase server component client.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/organization_sdk_organization_subscription_sdk_sdk_25.md#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport getSdk from '~/lib/sdk';\nimport getSupabaseServerComponentClient from '~/core/supabase/server-component-client';\n\nasync function PageServerComponent() {\n  const client = getSupabaseServerComponentClient();\n  const sdk = getSdk(client);\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Stripe Payment Configuration\nDESCRIPTION: Environment variables required for Stripe payment integration.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stepper_components_application_configuration_41.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nNEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=your-publishable-key\nSTRIPE_SECRET_KEY=your-secret-key\nSTRIPE_WEBHOOK_SECRET=your-webhook-secret\n```\n\n----------------------------------------\n\nTITLE: Fetching Tasks from Firestore Collection in Remix\nDESCRIPTION: Custom hook for fetching tasks from a Firestore collection using a query to filter by organizationId. It uses useFirestoreCollectionData to retrieve the data.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/setting_up_firebase_custom_fetch_fetching_data_firestore_70.md#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useFirestore, useFirestoreCollectionData } from 'reactfire';\n\nimport {\n  collection,\n  CollectionReference,\n  query,\n  where,\n} from 'firebase/firestore';\n\nimport { Task } from '~/lib/tasks/types/task';\n\nfunction useFetchTasks(organizationId: string) {\n  const firestore = useFirestore();\n  const tasksCollection = 'tasks';\n\n  const collectionRef = collection(\n    firestore,\n    tasksCollection\n  ) as CollectionReference<WithId<Task>>;\n\n  const path = `organizationId`;\n  const operator = '==';\n  const constraint = where(path, operator, organizationId);\n  const organizationsQuery = query(collectionRef, constraint);\n\n  return useFirestoreCollectionData(organizationsQuery, {\n    idField: 'id',\n  });\n}\n\nexport default useFetchTasks;\n```\n\n----------------------------------------\n\nTITLE: Using SWR Mutation Hook for File Uploads\nDESCRIPTION: A custom React hook that uses useSWRMutation to handle file uploads. This approach provides built-in state management for loading, error, and success states during the upload process.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/server_actions_uploading_data_to_storage_writing_data_to_supabase_30.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport useSWRMutation from 'swr/mutation';\n\nfunction useUpdateProfile() {\n  const client = useSupabase();\n  const key = 'useUpdateProfile';\n\n  return useSWRMutation(key, async (_, { arg: data }: { arg: {\n    file: File;\n    userId: string;\n  } }) => {\n    return updateUserData(client, data);\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Organization Subscription Status with React Hook (TSX)\nDESCRIPTION: This snippet shows how to use the `useIsSubscriptionActive` React hook in a frontend component to determine if the current organization's subscription status is 'active'. This hook is useful for conditionally rendering UI elements or gating access to features based on the organization's subscription plan.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/api_routes_vs_server_actions_api_routes_call_api_routes_from_client_19.md#2025-04-22_snippet_24\n\nLANGUAGE: tsx\nCODE:\n```\nimport useCurrentOrganization from '~/lib/organizations/hooks/use-is-subscription-active';\n\nconst isActive = useIsSubscriptionActive();\n```\n\n----------------------------------------\n\nTITLE: Configuring Application in Next.js using TypeScript\nDESCRIPTION: This code snippet defines a centralized configuration file for a Next.js application using Supabase. The configuration includes settings for site details, authentication providers, email server credentials, and Stripe payment plans. Environment variables are used for sensitive information to promote secure and flexible deployments. Users can extend this configuration by adding new properties as needed.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/deploying_production_environment_variables_functions_26.md#2025-04-22_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type { Provider } from '@supabase/gotrue-js/src/lib/types';\n\nconst production = process.env.NODE_ENV === 'production';\n\nenum Themes {\n  Light = 'light',\n  Dark = 'dark',\n}\n\nconst configuration = {\n  site: {\n    name: 'Awesomely - Your SaaS Title',\n    description: 'Your SaaS Description',\n    themeColor: '#ffffff',\n    themeColorDark: '#0a0a0a',\n    siteUrl: process.env.NEXT_PUBLIC_SITE_URL,\n    siteName: 'Awesomely',\n    twitterHandle: '',\n    githubHandle: '',\n    language: 'en',\n    convertKitFormId: '',\n    locale: process.env.NEXT_PUBLIC_DEFAULT_LOCALE,\n  },\n  auth: {\n    requireEmailConfirmation:\n      process.env.NEXT_PUBLIC_REQUIRE_EMAIL_CONFIRMATION === 'true',\n    providers: {\n      emailPassword: true,\n      phoneNumber: false,\n      emailLink: false,\n      oAuth: ['google'] as Provider[],\n    },\n  },\n  production,\n  environment: process.env.NEXT_PUBLIC_ENVIRONMENT,\n  features: {\n    enableThemeSwitcher: true,\n  },\n  theme: Themes.Dark,\n  paths: {\n    signIn: '/auth/sign-in',\n    signUp: '/auth/sign-up',\n    signInMfa: '/auth/verify',\n    onboarding: `/onboarding`,\n    appPrefix: '/dashboard',\n    appHome: '/dashboard',\n    authCallback: '/auth/callback',\n    settings: {\n      profile: 'settings/profile',\n      authentication: 'settings/profile/authentication',\n      email: 'settings/profile/email',\n      password: 'settings/profile/password',\n    },\n  },\n  email: {\n    host: 'smtp.ethereal.email',\n    port: 587,\n    user: 'fabian96@ethereal.email',\n    password: 'puBhygwkTP7DtTSCSz',\n    senderAddress: 'MakerKit Team <info@makerkit.dev>',\n  },\n  sentry: {\n    dsn: process.env.NEXT_PUBLIC_SENTRY_DSN,\n  },\n  stripe: {\n    products: [\n      {\n        name: 'Basic',\n        description: 'Description of your Basic plan',\n        badge: `Up to 20 users`,\n        features: [\n          'Basic Reporting',\n          'Up to 20 users',\n          '1GB for each user',\n          'Chat Support',\n        ],\n        plans: [\n          {\n            name: 'Monthly',\n            price: '$9',\n            stripePriceId: '<price_id>',\n          },\n          {\n            name: 'Yearly',\n            price: '$90',\n            stripePriceId: '<price_id>',\n          },\n        ],\n      },\n      {\n        name: 'Pro',\n        badge: `Most Popular`,\n        recommended: true,\n        description: 'Description of your Pro plan',\n        features: [\n          'Advanced Reporting',\n          'Up to 50 users',\n          '5GB for each user',\n          'Chat and Phone Support',\n        ],\n        plans: [\n          {\n            name: 'Monthly',\n            price: '$29',\n            stripePriceId: '<price_id>',\n          },\n          {\n            name: 'Yearly',\n            price: '$200',\n            stripePriceId: '<price_id>',\n          },\n        ],\n      },\n      {\n        name: 'Premium',\n        description: 'Description of your Premium plan',\n        badge: ``,\n        features: [\n          'Advanced Reporting',\n          'Unlimited users',\n          '50GB for each user',\n          'Account Manager',\n        ],\n        plans: [\n          {\n            name: '',\n            price: 'Contact us',\n            stripePriceId: '',\n            label: `Contact us`,\n            href: `/contact`,\n          },\n        ],\n      },\n    ],\n  },\n};\n\nexport default configuration;\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Lemon Squeezy Subscription Plans\nDESCRIPTION: Configuration object for setting up subscription plans with Lemon Squeezy, including plan details, features, and variant IDs\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/user_reading_record_creating_record_20.md#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nsubscriptions: {\n  plans: [\n    {\n      name: 'Basic',\n      description: 'Description of your Basic plan',\n      badge: `Up to 20 users`,\n      features: [\n        'Basic Reporting',\n        'Up to 20 users',\n        '1GB for each user',\n        'Chat Support',\n      ],\n      plans: [\n        {\n          name: 'Monthly',\n          price: '$9',\n          variantID: '<your variant ID>',\n        },\n        {\n          name: 'Yearly',\n          price: '$90',\n           variantID: '<your variant ID>',\n        },\n      ],\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Server-Side Data to Client in Next.js with TypeScript\nDESCRIPTION: This TSX snippet demonstrates the pattern for fetching data on the server within `getServerSideProps` and passing it to the client-side page component in a Next.js application. It first calls `withAppProps` to get base props (including user/org data and authentication). Then, it fetches additional page-specific data using a function like `getDataFromServer()`. Finally, it merges this additional `data` with the base `props` before returning the combined object, making `data` available to the page component.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/call_api_routes_from_client_csrf_token_guarding_api_routes_7.md#2025-04-22_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nimport { GetServerSidePropsContext } from \"next\";\nimport { withAppProps } from '~/lib/props/with-app-props';\n\ntype Data = {\n  // ...\n}\n\nfunction Page({ data }: { data: Data }) {\n  // you can use the data here\n}\n\nexport async function getServerSideProps(\n  ctx: GetServerSidePropsContext\n) {\n  const { props } = await withAppProps(ctx);\n\n  // We augment the props with the data we want\n  // to pass to the client\n  // replace the below with your own logic\n  const data = await getDataFromServer();\n\n  return {\n    props: {\n      ...props,\n      data,\n    }\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Usage Reporting for Lemon Squeezy\nDESCRIPTION: Function to report API request usage to Lemon Squeezy billing system. Retrieves subscription and line item details from Supabase and reports usage to the billing provider.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/lemon_squeezy_metered_usage_one_off_payments_59.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getBillingGatewayProvider } from '@kit/billing-gateway';\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\nimport { createAccountsApi } from '@kit/accounts/api';\n\nasync function reportUsageForApiRequests(\n  accountId: string,\n  quantity: number\n) {\n  // use the correct client: in this case, the server action client\n  const client = getSupabaseServerClient();\n  const api = createAccountsApi(client);\n\n  const subscription = await api.getSubscription(accountId);\n\n  // if the subscription is not active, we don't report usage\n  if (!subscription) {\n    console.error('No active subscription found');\n    return;\n  }\n\n  // now, we need to find the line item the user is being charged for\n  // let's use Supabase for this!\n  // we use the product ID to identify the line item\n  // in your case, you have more choices to identify the line item\n  const {\n    data: subscriptionItem,\n    error\n  } = await client.from('subscription_items')\n    .select('id')\n    .eq('subscription_id', subscription.id)\n    .eq('product_id', 'starter-pro')\n    .eq('type', 'metered')\n    .single();\n\n  // get the billing provider\n  const service = await getBillingGatewayProvider(this.client);\n\n  // now we can report the usage to the billing provider\n  return service.reportUsage({\n    id: subscriptionItem.id,\n    usage: {\n      quantity,\n      action: 'increment'\n    }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Run Supabase Database Tests Command\nDESCRIPTION: Command to run tests for the Supabase database.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/uploading_data_to_storage_writing_data_to_supabase_data_fetching_77.md#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test:db\n```\n\n----------------------------------------\n\nTITLE: Getting Specific User's Organization Data Server-Side (TS)\nDESCRIPTION: Demonstrates fetching organization data for a specific user ID by passing the `userId` option to the `getCurrentOrganization` function on the server side.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/functions_initializing_project_introduction_85.md#2025-04-22_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\nimport getCurrentOrganization from '~/lib/server/organizations/get-current-organization';\\n\\nexport async function GET() {\\n  const supabase = getSupabaseServerClient();\\n  const response = await getCurrentOrganization(supabase, {\\n    userId: '123'\\n  });\\n}\n```\n\n----------------------------------------\n\nTITLE: Creating has_credits Function for Usage Enforcement - Supabase SQL\nDESCRIPTION: This function checks whether a user has enough credits to perform an action by comparing the token count. The function returns a boolean and is written in plpgsql, suitable for integration into other logic or RLS policies enforcing credit-based usage. It is executable by authenticated users and service roles.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/api_billing_api_billing_schema_58.md#2025-04-22_snippet_18\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace function public.has_credits(account_id uuid, tokens integer)\n  returns boolean\n  set search_path = ''\n  as $$\n  begin\n    return (select tokens >= tokens from public.credits where account_id = account_id);\n  end;\n  $$ language plpgsql;\n\ngrant execute on function public.has_credits to authenticated, service_role;\n```\n\n----------------------------------------\n\nTITLE: Periodically Fetching Messages and Appending Locally in React Hook (TypeScript)\nDESCRIPTION: This React hook snippet sets up an interval to fetch new messages every 10 seconds using the `fetchMessages` function, passing the `lastCreatedAt` timestamp. It cleans up the interval when the component unmounts or dependencies change. It also returns an `appendMessage` function to optimistically add a new message to the local state.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/building_javascript_widget_1.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Fetch messages every 10 seconds\nconst interval = setInterval(() => {\n  fetchMessages(lastCreatedAt);\n}, 10_000);\n\nreturn () => clearInterval(interval);\n}, [ticketId, isOpen, lastCreatedAt]);\n\nreturn {\n  ...state,\n  appendMessage: (message: Message) => {\n  setState((state) => ({\n    ...state,\n    messages: [...state.messages, message],\n  }));\n  },\n};\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Complete Billing Schema Structure in Makerkit\nDESCRIPTION: This code snippet shows a more complete example of a billing schema with product features, multiple plans, and different pricing models. It demonstrates how to specify currency, features, and different payment types.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/payments_billing_6.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createBillingSchema } from '@kit/billing';\n\nexport default createBillingSchema({\n  provider: 'stripe', // or 'lemon-squeezy', etc.\n  products: [\n    {\n      id: 'product-id',\n      name: 'Product Name',\n      description: 'Product Description',\n      currency: 'USD',\n      features: ['Feature 1', 'Feature 2'],\n      plans: [\n        {\n          id: 'plan-id',\n          name: 'Plan Name',\n          paymentType: 'recurring',\n          lineItems: [\n            {\n              id: 'line-item-id',\n              name: 'Line Item Name',\n              type: 'flat', // or 'per_seat', 'metered', etc.\n              cost: 9.99,\n            },\n          ],\n        },\n      ],\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Uploading User Profile Photo to Supabase Storage in TypeScript\nDESCRIPTION: Function to upload a user's profile image to the Supabase Storage 'avatars' bucket. It converts the file to an array buffer, creates a filename based on the user ID, and performs the upload with upsert enabled. Returns the public URL on success or throws an error.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/uploading_data_to_storage_writing_data_to_supabase_data_fetching_77.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nasync function uploadUserProfilePhoto(\n  client: SupabaseClient,\n  photoFile: File,\n  userId: string\n) {\n  const bytes = await photoFile.arrayBuffer();\n  const bucket = client.storage.from('avatars');\n  const extension = photoFile.name.split('.').pop();\n  const fileName = `${userId}.${extension}`;\n\n  const result = await bucket.upload(fileName, bytes, {\n    upsert: true,\n  });\n\n  if (!result.error) {\n    return bucket.getPublicUrl(fileName).data.publicUrl;\n  }\n\n  throw result.error;\n}\n```\n\n----------------------------------------\n\nTITLE: Wrapping a Form Component with ErrorBoundary in Next.js\nDESCRIPTION: This code snippet shows how to wrap a form component that uses a server action with an ErrorBoundary component. This approach allows for graceful error handling and display of error messages when the server action fails.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_webhooks_locally_using_lemon_squeezy_server_actions_csrf_33.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport ErrorBoundary from '~/core/ui/ErrorBoundary';\nimport FormWithServerAction from './Form';\n\nfunction FormWithErrorBoundary() {\n  return (\n    <ErrorBoundary fallback={<p>Something went wrong</p>}>\n      <FormWithServerAction />\n    </ErrorBoundary>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Structured Logging in TypeScript API Handler\nDESCRIPTION: This snippet illustrates how to implement structured logging in an asynchronous API handler using the `pino` logger imported from `~/core/logger`. It defines a `loggingContext` with relevant IDs, logs informational messages before and after the core operation (`writeToFirestore`), and logs errors with context within a try/catch block. It also includes debug logging for the error object itself, advising caution about leaking sensitive data.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/develop_firebase_security_rules_emails_encrypting_secrets_71.md#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport logger from '~/core/logger';\n\nasync function addIntegrationHandler(\n  userId: string,\n  organizationId: number,\n  integrationId: number,\n) {\n  // this is the context that every log will print out\n  const loggingContext = {\n    integrationId,\n    organizationId,\n    userId,\n  };\n\n  // Here we log what we're doing\n  logger.log(loggingContext, `Adding new integration to organization`);\n\n  try {\n    await writeToFirestore(data);\n\n    // Here we log that the result of the operation\n    // was successful\n    logger.log(loggingContext, `Integration successfully added`);\n\n    // return successful response\n    return res.json({\n      integrationId,\n      success: true\n    });\n  } catch (e) {\n    // Here we log that the operation failed\n    logger.error(loggingContext, `Encountered an error while adding integration`);\n\n    // Logging errors can be okay but\n    // ensure not to leak important information!\n    logger.debug(e);\n\n    // return 500\n    return res.status(500).json({\n      integrationId,\n      success: false\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Admin Role Check in TypeScript\nDESCRIPTION: Basic function to check if a user has admin role permissions based on their membership role.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/subscription_permissions_organizations_lemon_squeezy_23.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nfunction isAdmin(\n  role: MembershipRole\n) {\n  return role === MembershipRole.Admin;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Supabase Browser Client in React Component\nDESCRIPTION: This snippet demonstrates how to use the Supabase browser client in a React component using the useSupabase hook. It includes a sign-out button as an example of client-side interaction.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/kits/remix-supabase-turbo/data-fetching/supabase-clients.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSupabase } from '@kit/supabase/hooks/use-supabase';\n\nexport default function Home() {\n  const supabase = useSupabase()\n\n  return (\n    <div>\n      <h1>Supabase Browser Client</h1>\n      <button onClick={() => supabase.auth.signOut()}>Sign Out</button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching CMS Content in Next.js\nDESCRIPTION: Demonstrates how to fetch and render content from a CMS using the createCmsClient utility. The component loads content by slug and collection, then renders it with title and HTML content.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/adding_turborepo_package_approaching_local_development_database_functions_44.md#2025-04-22_snippet_33\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createCmsClient } from '@kit/cms';\n\nexport async function MyPage() {\n  const cms = await createCmsClient();\n\n  const { title, content } = await cms.getContentBySlug({\n    slug: `slug`,\n    collection: `pages`\n  });\n\n  return (\n    <div>\n      <h1>{title}</h1>\n      <div dangerouslySetInnerHTML={{ __html: content }} />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Data Fetching and Rendering in Next.js Server Component - TypeScript/TSX\nDESCRIPTION: Provides an end-to-end example of a server component that fetches task data from Supabase and renders a list via a 'TasksList' child component. Handles errors and returns a React element accordingly. Intended for efficient server rendering of dynamic data in Next.js.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/csrf_protection_react_query_route_handlers_43.md#2025-04-22_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\nexport default async function TasksPage() {\n  const supabase = getSupabaseServerClient();\n\n  const { data, error } = await supabase.from('tasks').select('*');\n\n  if (error) {\n    return <p>Error :(</p>;\n  }\n\n  return <TasksList data={data}>\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Function: Get Current User Role in Organization\nDESCRIPTION: SQL function that retrieves a user's role within a specific organization, which is used in RLS policies to enforce role-based access control.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/supabase_not_stopping_tables_not_found_dark_theme_22.md#2025-04-22_snippet_18\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace function get_current_user_role(org_id bigint)\nreturns int as $$\ndeclare\n    user_role int;\nbegin\n    select role\n        from memberships\n        where organization_id = org_id and user_id = auth.uid()\n        into user_role;\n\n    if user_role is null then\n        raise exception 'User is not a member of the organization';\n    end if;\n\n    return user_role;\nend;\n$$ language plpgsql;\n```\n\n----------------------------------------\n\nTITLE: Using API Request Hooks in React Components\nDESCRIPTION: This example demonstrates how to use a custom API request hook in a React component. It shows handling loading and error states while rendering the fetched data.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/custom_fetch_fetching_data_firestore_making_api_requests_4.md#2025-04-22_snippet_35\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function EventsContainer() {\n  const { data, loading, error } = useFetchEventsFromApi();\n\n  if (loading) {\n    return <Loading />;\n  }\n\n  if (error) {\n    return <Error />;\n  }\n\n  return (\n    <div>\n      {data.map((event) => (\n        <EventDetail key={event.id} event={event} />\n      ))}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Input in Next.js Server Action with Zod\nDESCRIPTION: This code shows how to use Zod to validate input in a Next.js Server Action. It demonstrates parsing the input data against the defined schema and handling the parsed result.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/validating_api_input_zod_development_clone_repository_31.md#2025-04-22_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\n'use server';\n\nexport async function serverAction(\n  data: z.infer<\n    ReturnType<typeof getBodySchema>\n  >\n) {\n  // we can safely use data with the interface Body\n  const bodyResult = await getBodySchema().parseAsync(data);\n  const { displayName, email } = bodyResult;\n\n  return sendInvite({ displayName, email });\n}\n\nfunction getBodySchema() {\n  return z.object({\n    displayName: z.string(),\n    email: z.string().email(),\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Tasks RLS Policy with Permission Check - SQL\nDESCRIPTION: Creates an update policy for `public.tasks` requiring that users, to update a row, either own the corresponding account or have the 'tasks.write' permission. Both the `using` and `with check` clauses restrict updates at selection and validation, respectively. Depends on the `authenticated` role and `public.has_permission` function. Input is user context and row details, output is conditional update panel. Limitation: secure only if permission mapping and helper functions are robust.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/adding_turborepo_package_approaching_local_development_database_functions_44.md#2025-04-22_snippet_23\n\nLANGUAGE: SQL\nCODE:\n```\ncreate policy update_tasks on public.tasks\\n    for update\\n    using (\\n        account_id = auth.uid() or\\n        public.has_permission(auth.uid(), account_id, 'tasks.write'::app_permissions)\\n    )\\n    with check (\\n        account_id = auth.uid() or\\n        public.has_permission(auth.uid(), account_id, 'tasks.write'::app_permissions)\\n    );\n```\n\n----------------------------------------\n\nTITLE: Configuring Plan Information with Payment Mode\nDESCRIPTION: Extended configuration interface for plans that includes payment mode specification for dynamic handling of one-time vs subscription payments.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_one_time_payments_stripe_webhooks_payments_35.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n{\n  name: 'Basic',\n  description: 'Unlimited applications and 2-hour onboarding session',\n  price: '$249 one off!',\n  stripePriceId: 'price_***********',\n  mode: 'payment'\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Account Ownership Foreign Key - SQL\nDESCRIPTION: This code defines an `account_id` column as a foreign key to the `public.accounts(id)` table, establishing ownership of entities by accounts. It is used for mapping tasks and other entities to their owning user or team. Requires `public.accounts` table to exist. Input is the referencing row, output is referential integrity enforcement—entities are always connected to valid accounts.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/adding_turborepo_package_approaching_local_development_database_functions_44.md#2025-04-22_snippet_19\n\nLANGUAGE: SQL\nCODE:\n```\naccount_id uuid not null references public.accounts(id)\n```\n\n----------------------------------------\n\nTITLE: Implementing User Permission Checks in Remix Supabase\nDESCRIPTION: A function to check if a user can perform actions on another user based on their roles. The function compares the current user's role with the target user's role to determine permission.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/theming_how_to_version_0_6_0_81.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n/**\n *\n * @param currentUserRole The current logged-in user\n * @param targetUser The role of the target of the action\n * @description Checks if a user can perform actions (such as update a role) of another user\n * @name canUpdateUser\n */\nexport function canUpdateUser(\n  currentUserRole: MembershipRole,\n  targetUser: MembershipRole\n) {\n  return currentUserRole > targetUser;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Site Layout with i18n Provider\nDESCRIPTION: React component implementation showing how to set up i18n provider in a site layout component\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/translations_updating_latest_version_tutorials_28.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfunction SiteLayout(props: React.PropsWithChildren) {\n  const data = use(loadUserData());\n\n  return (\n    <I18nProvider lang={data.language}>\n      <AuthChangeListener accessToken={data.accessToken}>\n        <SiteHeaderSessionProvider data={data} />\n\n        {props.children}\n\n        <Footer />\n      </AuthChangeListener>\n    </I18nProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server\nDESCRIPTION: Command to start the Next.js development server on localhost:3000.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/user_roles_validating_api_input_zod_development_18.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Creating Feedback API Endpoint in Next.js\nDESCRIPTION: This snippet creates an API route for handling feedback submissions by importing and using the addFeedbackSubmission function from the plugin's mutations library.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_one_time_payments_stripe_webhooks_payments_11.md#2025-04-22_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\nimport { addFeedbackSubmission } from '~/plugins/feedback-popup/lib/mutations';\n\nexport default addFeedbackSubmission;\n```\n\n----------------------------------------\n\nTITLE: Implementing Task Update Action in Remix\nDESCRIPTION: Defines an action function that handles task updates via PUT requests using Supabase client. The function processes the request and returns a JSON response indicating success.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/supabase_data_fetching_supabase_data_writing_tailwind_css_86.md#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nexport async function action(args: ActionArgs) {\n  const client = getSupabaseServerClient(args.request);\n  const body = await args.request.json();\n\n  switch (args.request.method) {\n    case 'PUT':\n      await updateTask(client, body);\n\n      return json({ success: true });\n  }\n\n  return throwNotFoundException();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Firestore Task with Custom React Hook in TypeScript\nDESCRIPTION: Defines a custom React hook `useCreateTask` using `reactfire` and `firebase/firestore`. This hook returns a memoized callback function that accepts a `Task` object and adds it as a new document to the 'tasks' collection in Firestore using `addDoc`.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/deploying_production_development_getting_started_environment_variables_13.md#2025-04-22_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useFirestore } from 'reactfire';\nimport { useCallback } from 'react';\nimport { addDoc, collection } from 'firebase/firestore';\nimport { Task } from '~/lib/tasks/types/task';\n\nfunction useCreateTask() {\n  const firestore = useFirestore();\n  const tasksCollection = collection(firestore, `/tasks`);\n\n  return useCallback(\n    (task: Task) => {\n      return addDoc(tasksCollection, task);\n    },\n    [tasksCollection]\n  );\n}\n\nexport default useCreateTask;\n```\n\n----------------------------------------\n\nTITLE: Protecting Next.js Pages with withAppProps Guard (Typescript)\nDESCRIPTION: This code snippet shows how to use the MakerKit 'withAppProps' function in a Next.js page to protect routes based on sign-in state, onboarding state, and plan eligibility. The main dependencies are Next.js's 'GetServerSidePropsContext' and the MakerKit library's 'with-app-props' helper. The function is set as 'getServerSideProps', returning appropriate props and managing user redirects. Parameters such as 'redirectPath', 'locale', 'localeNamespaces', and 'requirePlans' determine guard behavior. The expected input is the Next.js context; the output is the server-side props for the page.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/architecture_api_guards_app_check_2.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { withAppProps } from '~/lib/props/with-app-props';\n\nexport async function getServerSideProps(\n  ctx: GetServerSidePropsContext\n) {\n  return await withAppProps(ctx);\n}\n```\n\n----------------------------------------\n\nTITLE: Using CORS Middleware in Request Handler\nDESCRIPTION: Example of implementing CORS middleware in a Next.js request handler\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/server_actions_uploading_data_to_storage_writing_data_to_supabase_17.md#2025-04-22_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nimport withCors from '~/core/middleware/with-cors';\n\nexport async function GET(request: NextRequest) {\n  const headers = withCors();\n\n  if (request.method === `OPTIONS`) {\n    return new Response(null, {\n      headers,\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Testimonial Wall Widget in React\nDESCRIPTION: This TypeScript React snippet shows how to use the TestimonialWallWidget component from the Testimonials plugin to display testimonials on a webpage.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/sentry_monitoring_notifications_configuration_51.md#2025-04-22_snippet_34\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TestimonialWallWidget } from '@kit/testimonial/widgets';\n\nexport default function TestimonialWidgetPage() {\n    return (\n        <div className={'flex h-full w-screen flex-1 flex-col items-center py-16'}>\n            <TestimonialWallWidget />\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Tasks Tab to Navigation Menu with TypeScript and React\nDESCRIPTION: Code to add a new tasks tab to the existing navigation menu, using Heroicons for the tab icon and defining the route path.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/functions_initializing_project_introduction_85.md#2025-04-22_snippet_27\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Squares2X2Icon } from \"@heroicons/react/24/outline\";\n\n{\n  label: 'common:tasksTabLabel',\n  path: '/tasks',\n  Icon: ({ className }: { className: string }) => {\n    return <Squares2X2Icon className={className} />;\n  },\n},\n```\n\n----------------------------------------\n\nTITLE: Using SWR Data in a React Component\nDESCRIPTION: Shows how to use the custom data fetching hook in a React component, handling loading states, errors, and displaying the fetched data.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/call_api_routes_from_client_csrf_token_guarding_api_routes_7.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nfunction MyComponent() {\n  const { data, isLoading, error } = useFetchData();\n\n  if (isLoading) {\n    return <p>Loading...</p>;\n  }\n\n  if (error) {\n    return <p>Error...</p>;\n  }\n\n  return <div>{data.hello}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Analytics Provider\nDESCRIPTION: Example configuration for integrating the Google Analytics provider with the analytics manager.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/custom_analytics_provider_google_analytics_provider_posthog_analytics_provider_36.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createGoogleAnalyticsService } from '@kit/google-analytics';\n\nimport { createAnalyticsManager } from './analytics-manager';\nimport type { AnalyticsManager } from './types';\n\nexport const analytics: AnalyticsManager = createAnalyticsManager({\n    providers: {\n        'google-analytics': createGoogleAnalyticsService,\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Remix Supabase\nDESCRIPTION: Environment variables configuration for development and production, including Supabase credentials, Stripe keys, and email settings.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/branding_environment_variables_setup_project_configuration_80.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nDEFAULT_LOCALE=en\nSITE_URL=http://localhost:3000\n\n# set the below to \"production\" in your production environment\nENVIRONMENT=development\n\n# SUPABASE\nSUPABASE_URL=http://localhost:54321\nSUPABASE_ANON_KEY=\nSUPABASE_SERVICE_ROLE_KEY=\n\n# STRIPE\nSTRIPE_WEBHOOK_SECRET=\nSTRIPE_SECRET_KEY=\nNEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=\n\n# EMAIL\nEMAIL_HOST=\nEMAIL_PORT=587\nEMAIL_USER=\nEMAIL_PASSWORD=\nEMAIL_SENDER='MakerKit Team <info@makerkit.dev>'\n```\n\n----------------------------------------\n\nTITLE: Inserting Tasks RLS Policy with Permission Check - SQL\nDESCRIPTION: Establishes an RLS policy for inserting into `public.tasks` such that only owners or users with the 'tasks.write' permission on the account can insert. Uses `public.has_permission`. Prereqs: 'authenticated' role and existence of `public.has_permission`. Input is the user credentials and target `account_id`, output is conditional insertion. Constraints: only as secure as `has_permission` and correct assignment of permissions.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/adding_turborepo_package_approaching_local_development_database_functions_44.md#2025-04-22_snippet_22\n\nLANGUAGE: SQL\nCODE:\n```\ncreate policy insert_tasks on public.tasks\\n    for insert\\n    with check (\\n        account_id = auth.uid() or\\n        public.has_permission(auth.uid(), account_id, 'tasks.write'::app_permissions)\\n    );\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Billing Schema with Starter Plan in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create a basic billing schema with a starter product and a monthly plan. It includes fields for product details and plan specifics such as trial period and payment interval.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/api_billing_api_billing_schema_58.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nexport default createBillingSchema({\n  provider,\n  products: [\n    {\n      id: 'starter',\n      name: 'Starter',\n      description: 'The perfect plan to get started',\n      currency: 'USD',\n      badge: `Value`,\n      plans: [\n        {\n          name: 'Starter Monthly',\n          id: 'starter-monthly',\n          trialDays: 7,\n          paymentType: 'recurring',\n          interval: 'month',\n          lineItems: [],\n        }\n      ],\n    }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Task Server Action in Next.js\nDESCRIPTION: Implements a server action to update tasks with authentication. It revalidates both the tasks list page and the individual task page to ensure data consistency.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/running_project_supabase_data_fetching_supabase_data_writing_27.md#2025-04-22_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nimport { revalidatePath } from 'next/cache';\nimport { createTask, updateTask } from '~/lib/tasks/mutations';\n\ntype UpdateTaskParams = {\n  task: Partial<Task> & Pick<Task, 'id'>;\n};\n\nexport const updateTaskAction = withSession(\n  async (params: UpdateTaskParams) => {\n    const client = getSupabaseServerActionClient();\n\n    await updateTask(client, params.task);\n\n    const path = `/dashboard/[organization]/tasks`;\n\n    // revalidate the tasks page and the task page\n    revalidatePath(path, 'page');\n    revalidatePath(`${path}/[task]`, 'page');\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Enabling React Compiler in Next.js Configuration\nDESCRIPTION: Environment variable setting to enable the experimental React Compiler in Next.js 15. This is disabled by default as it's still experimental.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/running_project_technical_details_update_nextjs15_50.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nENABLE_REACT_COMPILER=true\n```\n\n----------------------------------------\n\nTITLE: Using Drizzle Supabase Admin Client in TypeScript\nDESCRIPTION: Example of using getDrizzleSupabaseAdminClient() for elevated database permissions in a React server component. Shows how to perform database queries with the admin client.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/waitlist_plugin_plugins_drizzle_supabase_52.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { use } from 'react';\nimport { getDrizzleSupabaseAdminClient } from '@kit/supabase/drizzle-client';\nimport { accounts } from '@kit/supabase/drizzle-schema';\n\nfunction MyComponent() {\n  const client = getDrizzleSupabaseAdminClient();\n\n  // Example query using transactions\n  const data = await client.select().from(accounts);\n\n  // Rest of your component code\n}\n```\n\n----------------------------------------\n\nTITLE: Wrapping Components with FirebaseStorageProvider in Next.js (TypeScript)\nDESCRIPTION: Illustrates how to use the FirebaseStorageProvider to encapsulate components that require Firebase Storage access. This provider initializes the Firebase Storage SDK for all child components and should wrap any component or subtree that needs storage features. Requires the relevant provider component from the application's core/firebase setup.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/custom_fetch_fetching_data_firestore_making_api_requests_4.md#2025-04-22_snippet_11\n\nLANGUAGE: TSX\nCODE:\n```\nimport FirebaseStorageProvider from '~/core/firebase/components/FirebaseStorageProvider';\n\n<FirebaseStorageProvider>\n  <ComponentThatUsesStorage />\n</FirebaseStorageProvider> \n```\n\n----------------------------------------\n\nTITLE: Running E2E Tests and Exiting\nDESCRIPTION: Command to run end-to-end tests and automatically exit after completion, useful for scripted testing.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/setting_up_firebase_custom_fetch_fetching_data_firestore_70.md#2025-04-22_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\nnpm test:e2e\n```\n\n----------------------------------------\n\nTITLE: Conditional Script Loading with useCookieConsent - React - JavaScript\nDESCRIPTION: Demonstrates conditional initialization of analytics or similar scripts depending on user cookie consent, using the useCookieConsent hook within a React functional component. Requires the ConsentStatus type and relevant consent management library to be set up. The code renders a CookieBanner and illustrates where to safely inject tracking code after consent is given. Inputs: user consent status via hook. Outputs: side effect of initializing scripts. Note: analytics are only loaded when the user has explicitly accepted.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/bordered_navigation_menu_card_button_cookie_banner_60.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n  const { status } = useCookieConsent();\n\n  useEffect(() => {\n    if (status === ConsentStatus.Accepted) {\n      // Initialize analytics or other cookie-dependent scripts\n    }\n  }, [status]);\n\n  return (\n    <div>\n      {/* Your app content */}\n      <CookieBanner />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Stripe Subscription Mapping Implementation\nDESCRIPTION: Function to map Stripe subscription data to the application's subscription model, including custom properties.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/subscription_permissions_organizations_lemon_squeezy_23.md#2025-04-22_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nfunction subscriptionMapper(\n  subscription: Stripe.Subscription\n): SubscriptionRow {\n  const lineItem = subscription.items.data[0];\n  const price = lineItem.price;\n  const priceId = price.id;\n  const interval = price?.recurring?.interval ?? null;\n  const intervalCount = price?.recurring?.interval_count ?? null;\n\n  const row: Partial<SubscriptionRow> = {\n    // custom props\n    quantity: lineItem.quantity,\n\n    // default props\n    price_id: priceId,\n    currency: subscription.currency,\n    status: subscription.status ?? 'incomplete',\n    interval,\n    interval_count: intervalCount,\n    cancel_at_period_end: subscription.cancel_at_period_end ?? false,\n    created_at: subscription.created ? toISO(subscription.created) : undefined,\n    period_starts_at: subscription.current_period_start\n      ? toISO(subscription.current_period_start)\n      : undefined,\n    period_ends_at: subscription.current_period_end\n      ? toISO(subscription.current_period_end)\n      : undefined,\n  };\n\n  if (subscription.trial_start) {\n    row.trial_starts_at = toISO(subscription.trial_start);\n  }\n\n  if (subscription.trial_end) {\n    row.trial_ends_at = toISO(subscription.trial_end);\n  }\n\n  return row as SubscriptionRow;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Plans to the Pricing Table - Makerkit (TypeScript)\nDESCRIPTION: This snippet demonstrates how to define a custom billing plan in Makerkit by setting a \\`custom\\` flag to true. By configuring plan properties such as \\`label\\`, \\`href\\`, \\`interval\\`, and \\`lineItems\\`, the plan appears on the UI but is not available for purchase. This is useful for free, custom, or unreleased plans. No external dependencies besides Makerkit billing configuration and the relevant React/JS tooling are required.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/api_billing_api_billing_schema_58.md#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n{\n  name: 'Enterprise Monthly',\n  id: 'enterprise-monthly',\n  paymentType: 'recurring',\n  label: 'common:contactUs',\n  href: '/contact',\n  custom: true,\n  interval: 'month',\n  lineItems: [],\n}\n```\n\n----------------------------------------\n\nTITLE: Requiring User Session in Route Handlers\nDESCRIPTION: This code demonstrates how to use the requireSession function to ensure a user is logged in before accessing protected routes. It redirects users to the sign-in page if not authenticated.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/deploying_production_environment_variables_functions_26.md#2025-04-22_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nimport getSupabaseRouteHandlerClient from '~/core/supabase/route-handler-client';\n\nexport async function GET() {\n  const supabase = getSupabaseRouteHandlerClient();\n  const session = await requireSession(supabase);\n\n  //\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Exception Capturing in Next.js Route Handlers - TypeScript/TSX\nDESCRIPTION: Demonstrates how to wrap a POST route handler in Next.js using the 'enhanceRouteHandler' utility to enable or disable exception reporting. Exception capturing is controlled via the 'captureException' option, which, when true, sends uncaught exceptions to the configured monitoring provider set with the 'MONITORING_PROVIDER' environment variable. The snippet also shows captcha protection and request validation using a Zod schema.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/csrf_protection_react_query_route_handlers_43.md#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { enhanceRouteHandler } from '@kit/next/routes';\n\nexport const POST = enhanceRouteHandler(\n  async function({ body, user, request }) {\n    // ... your code here\n    return NextResponse.json({\n      success: true,\n    });\n  },\n  {\n    captcha: true,\n    captureException: false,\n    schema: ZodSchema,\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Creating an Enhanced Server Action with Makerkit\nDESCRIPTION: Demonstrates the basic structure of using Makerkit's enhanceAction utility to create a server action with authentication and input validation.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/data_fetching_3.md#2025-04-22_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\n'use server';\n\nexport const insertTicketMessageAction = enhanceAction(\n  async (data, user) => {\n    // your logic here\n  },\n  {\n    auth: true,\n    schema: MessageFormSchema,\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Fetching Data with Supabase and SWR in React (TypeScript)\nDESCRIPTION: This snippet defines a custom React hook, useFetchTask, that retrieves a specific task from Supabase using the useSupabase hook for the client and SWR for data fetching and caching. It expects an object containing the task id and returns SWR's data, loading, and error states. The hook is meant for scenarios where tasks are fetched on-demand in the frontend and requires Supabase's Web SDK, SWR, and TypeScript types for the task id parameter. Input is an object with id (number), output is the SWR response for the fetched task.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/adding_app_pages_guarding_pages_updating_sidebar_menu_32.md#2025-04-22_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport useSWR from \"swr\";\n\nfunction useFetchTask({id}: {id: number}) {\n  const supabase = useSupabase();\n  const key = ['tasks', id];\n\n  return useSWR([key], async () => {\n    return getTask(supabase, id);\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Server Action with Error in Next.js\nDESCRIPTION: This snippet demonstrates a server action that deliberately throws an error and a form component that invokes this action. It's used to illustrate error handling in Server Actions.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_webhooks_locally_using_lemon_squeezy_server_actions_csrf_33.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nasync function serverActionWithError() {\n  'use server';\n\n  throw new Error(`This is error is in the Server Action`);\n}\n\nfunction FormWithServerAction() {\n  return (\n    <form action={serverActionWithError}>\n      <button>Submit Form</button>\n    </form>\n  );\n}\n\nexport default FormWithServerAction;\n```\n\n----------------------------------------\n\nTITLE: Defining Firebase Storage Security Rules by Organization (JavaScript)\nDESCRIPTION: This security rules snippet restricts file read and write permissions based on organizationId. Users can only read files if the file's metadata organizationId matches their token organizationId, and only write if they attempt operations within their own organization's context. Requires Firebase Security Rules syntax and that organizationId is set as metadata at upload.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/custom_fetch_fetching_data_firestore_making_api_requests_4.md#2025-04-22_snippet_17\n\nLANGUAGE: js\nCODE:\n```\nmatch /organizations/{organizationId}/{fileName=**} {\n  allow read: if resource.metadata.organizationId == request.auth.token.organizationId;\n  allow write: if request.auth.token.organizationId == organizationId;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom CMS Client with the CMS API in TSX\nDESCRIPTION: This TSX class outlines the implementation required for custom CMS clients using Makerkit's CMS API. The class defines abstract methods for fetching content items and categories, which need to be implemented to work with different backend configurations. The sample implementation demonstrates calling a hypothetical HTTP API to retrieve content.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/cms_api_cms_creating_your_own_cms_client_42.md#2025-04-22_snippet_5\n\nLANGUAGE: TSX\nCODE:\n```\nexport abstract class CmsClient {\n  /**\n   * Retrieves content items based on the provided options.\n   * @param options - Options for filtering and pagination.\n   * @returns A promise that resolves to an array of content items.\n   */\n  abstract getContentItems(options?: Cms.GetContentItemsOptions): Promise<{\n    total: number;\n    items: Cms.ContentItem[];\n  }>;\n\n  /**\n   * Retrieves a content item by its ID and type.\n   * @returns A promise that resolves to the content item, or undefined if not found.\n   */\n  abstract getContentItemBySlug(params: {\n    slug: string;\n    collection: string;\n  }): Promise<Cms.ContentItem | undefined>;\n\n  /**\n   * Retrieves categories based on the provided options.\n   * @param options - Options for filtering and pagination.\n   * @returns A promise that resolves to an array of categories.\n   */\n  abstract getCategories(\n    options?: Cms.GetCategoriesOptions,\n  ): Promise<Cms.Category[]>;\n\n  /**\n   * Retrieves a category by its slug.\n   * @param slug - The slug of the category.\n   * @returns A promise that resolves to the category, or undefined if not found.\n   */\n  abstract getCategoryBySlug(slug: string): Promise<Cms.Category | undefined>;\n\n  /**\n   * Retrieves tags based on the provided options.\n   * @param options - Options for filtering and pagination.\n   * @returns A promise that resolves to an array of tags.\n   */\n  abstract getTags(options?: Cms.GetTagsOptions): Promise<Cms.Tag[]>;\n\n  /**\n   * Retrieves a tag by its slug.\n   * @param slug - The slug of the tag.\n   * @returns A promise that resolves to the tag, or undefined if not found.\n   */\n  abstract getTagBySlug(slug: string): Promise<Cms.Tag | undefined>;\n}\n\nimport { CmsClient } from '@kit/cms';\n\nexport class MyCmsClient implements CmsClient {\n  async getContentItems(options) {\n    const response = await fetch('https://my-cms-api.com/content', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(options),\n    });\n\n    const { total, items } = await response.json();\n\n    return { total, items };\n  }\n\n  async getContentItemBySlug({ slug, collection }) {\n    const response = await fetch(\n      `https://my-cms-api.com/content/${collection}/${slug}`,\n    );\n\n    if (response.status === 404) {\n      return undefined;\n    }\n\n    return response.json();\n  }\n\n  async getCategories(options) {\n    const response = await fetch('https://my-cms-api.com/categories', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(options),\n    });\n\n    return response.json();\n  }\n\n  async getCategoryBySlug(slug) {\n    const response = await fetch(`https://my-cms-api.com/categories/${slug}`);\n\n    if (response.status === 404) {\n      return undefined;\n    }\n\n    return response.json();\n  }\n\n  async getTags(options) {\n    const response = await fetch('https://my-cms-api.com/tags', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(options),\n    });\n\n    return response.json();\n  }\n\n  async getTagBySlug(slug) {\n    const response = await fetch(`https://my-cms-api.com/tags/${slug}`);\n\n    if (response.status === 404) {\n      return undefined;\n    }\n\n    return response.json();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Custom Database Webhooks in React Router Supabase\nDESCRIPTION: This snippet demonstrates how to set up a POST handler for database webhooks, allowing custom logic to be triggered on database changes. It includes type definitions for the webhook event data and shows how to handle specific table events.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/database_webhooks_legal_pages_marketing_pages_64.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  getDatabaseWebhookHandlerService,\n} from '@kit/database-webhooks';\n\n/**\n * @name POST\n * @description POST handler for the webhook route that handles the webhook event\n */\nexport async function POST(request: Request) {\n  const service = getDatabaseWebhookHandlerService();\n\n  try {\n    // handle the webhook event\n    await service.handleWebhook(request, {\n      handleEvent(change) {\n        if (change.type === 'INSERT' && change.table === 'invitations') {\n          // do something with the invitation\n        }\n      },\n    });\n\n    return new Response(null, { status: 200 });\n  } catch {\n    return new Response(null, { status: 500 });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Task Insertion Hook with Manual CSRF Token\nDESCRIPTION: Alternative implementation of the task insertion hook that manually includes the CSRF token in the fetch request instead of using the 'useApiRequest' helper.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/call_api_routes_from_client_csrf_token_guarding_api_routes_7.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport useMutation from 'swr/mutation';\nimport { useCsrfToken } from \"~/core/firebase/hooks/use-csrf-token\";\n\ninterface Task {\n  name: string;\n}\n\nfunction useInsertTask() {\n  const csrfToken = useCsrfToken();\n  const path = '/api/task';\n\n  return useMutation(\n    path, async (_, data: { arg: Task }) => {\n      return fetch(path, {\n        body: JSON.stringify(data.arg),\n        method: 'POST',\n        headers: {\n          'x-csrf-token': csrfToken\n        }\n      });\n    }\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing API Request Logging with Pino (TypeScript)\nDESCRIPTION: Illustrates how to add structured logging to a Next.js API handler (`addIntegrationHandler`) using the 'pino' library. It captures context (user ID, organization ID, integration ID), logs before and after operations, and handles errors with different log levels (log, error, debug). Requires a configured `pino` logger instance (`~/core/logger`) and Next.js API request/response types.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/commands_cors_develop_firebase_security_rules_5.md#2025-04-22_snippet_31\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nimport logger from '~/core/logger';\n\nasync function addIntegrationHandler(\n  req: NextApiRequest,\n  res: NextApiResponse,\n) {\n  const userId = req.firebaseUser.uid;\n  const organizationId = req.cookies.organizationId;\n  const integrationId = req.body.integration;\n\n  // this is the context that every log will print out\n  const loggingContext = {\n    integrationId,\n    organizationId,\n    userId,\n  };\n\n  // Here we log what we're doing\n  logger.log(loggingContext, `Adding new integration to organization`);\n\n  try {\n    await writeToFirestore(data);\n\n    // Here we log that the result of the operation\n    // was successful\n    logger.log(loggingContext, `Integration successfully added`);\n\n    // return successful response\n    return res.json({\n      integrationId,\n      success: true\n    });\n  } catch (e) {\n    // Here we log that the operation failed\n    logger.error(loggingContext, `Encountered an error while adding integration`);\n\n    // Logging errors can be okay but\n    // ensure not to leak important information!\n    logger.debug(e);\n\n    // return 500\n    return res.status(500).json({\n      integrationId,\n      success: false\n    });\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Custom Analytics Service Implementation\nDESCRIPTION: Implementation of a custom analytics service class that implements the AnalyticsService interface.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/translations_updating_latest_version_tutorials_87.md#2025-04-22_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AnalyticsService } from './path-to-types';\n\nclass MyCustomAnalyticsService implements AnalyticsService {\n  async initialize() {\n    // Initialize your analytics service\n  }\n\n  async identify(userId: string, traits?: Record<string, string>) {\n    // Implement user identification\n  }\n\n  async trackPageView(url: string) {\n    // Implement page view tracking\n  }\n\n  async trackEvent(eventName: string, eventProperties?: Record<string, string | string[]>) {\n    // Implement event tracking\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Project Permission Check Functions - SQL\nDESCRIPTION: Collection of functions to check various project permissions including edit, delete, and member invitation capabilities.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/projects_data_model_53.md#2025-04-22_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\nCREATE OR REPLACE FUNCTION public.can_edit_project(p_user_auth_id UUID, p_project_id UUID)\nRETURNS BOOLEAN\nSET search_path = ''\nAS $$\n  SELECT public.user_has_project_permission(p_user_auth_id, p_project_id, 'edit_project'::public.project_action);\n$$ LANGUAGE sql;\n\nGRANT EXECUTE ON FUNCTION public.can_edit_project TO authenticated;\n\nCREATE OR REPLACE FUNCTION public.can_delete_project(p_user_auth_id UUID, p_project_id UUID)\nRETURNS BOOLEAN\nSET search_path = ''\nAS $$\n  SELECT public.user_has_project_permission(p_user_auth_id, p_project_id, 'delete_project'::public.project_action);\n$$ LANGUAGE sql;\n\nGRANT EXECUTE ON FUNCTION public.can_delete_project TO authenticated;\n\nCREATE OR REPLACE FUNCTION public.can_invite_project_member(p_user_auth_id UUID, p_project_id UUID)\nRETURNS BOOLEAN\nSET search_path = ''\nAS $$\n  SELECT public.user_has_project_permission(p_user_auth_id, p_project_id, 'invite_member'::public.project_action);\n$$ LANGUAGE sql;\n\nGRANT EXECUTE ON FUNCTION public.can_invite_project_member TO authenticated;\n```\n\n----------------------------------------\n\nTITLE: Customizing User Roles Enum in TypeScript\nDESCRIPTION: This snippet provides an example of completely customizing the user roles within the `MembershipRole` enum, replacing the defaults with `Readonly`, `AccountManager`, and `Owner`. This allows for defining roles specific to an application's needs.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/develop_firebase_security_rules_emails_encrypting_secrets_71.md#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nexport enum MembershipRole {\n  Readonly,\n  AccountManager,\n  Owner,\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Billing Customer ID with Account API (TypeScript)\nDESCRIPTION: Illustrates retrieving the billing customer ID for a specific user account ID using the `getCustomerId` method provided by the Account API.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/google_analytics_provider_posthog_analytics_provider_umami_analytics_provider_88.md#2025-04-22_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\nconst api = createAccountsApi(client);\nconst customerId = await api.getCustomerId(accountId);\n```\n\n----------------------------------------\n\nTITLE: Install PNPM Globally\nDESCRIPTION: A command to globally install PNPM, a package manager used in the project for managing dependencies.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/cloudflare_production_environment_variables_supabase_47.md#2025-04-22_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\nnpm i -g pnpm\n```\n\n----------------------------------------\n\nTITLE: Creating a Supabase Database Insert Query\nDESCRIPTION: Demonstrates how to insert data into a Supabase database table with proper foreign key relationships. This snippet shows adding a task with a link to the user who created it via account_id.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/marketing_pages_migrations_permissions_and_roles_45.md#2025-04-22_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nconst { data, error } = await client\n    .from('tasks')\n    .insert({ ...task, account_id: auth.data.id });\n```\n\n----------------------------------------\n\nTITLE: Customizing LoadingOverlay Appearance in React (JSX)\nDESCRIPTION: Illustrates customizing the appearance of the 'LoadingOverlay' component using 'className' for the container (background and text color) and 'spinnerClassName' for the spinner element (text color).\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/app_breadcrumbs_bordered_navigation_menu_card_button_39.md#2025-04-22_snippet_22\n\nLANGUAGE: jsx\nCODE:\n```\n<LoadingOverlay\n  className=\"bg-gray-800 text-white\"\n  spinnerClassName=\"text-blue-500\"\n>\n  Processing your request...\n</LoadingOverlay>\n```\n\n----------------------------------------\n\nTITLE: Starting the Local Supabase Environment\nDESCRIPTION: Command to start the Supabase local development environment using Docker, which provides local database, authentication, and other Supabase services.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/functions_initializing_project_introduction_85.md#2025-04-22_snippet_30\n\nLANGUAGE: txt\nCODE:\n```\nnpm run supabase:start\n```\n\n----------------------------------------\n\nTITLE: Integrating Makerkit Analytics with App Events System in TypeScript\nDESCRIPTION: Demonstrates using the `useAppEvents` hook from `@kit/shared/events` to emit application events (e.g., 'user.signedUp'). Makerkit automatically maps common app events to corresponding analytics calls (`identify` and `trackEvent`), providing a centralized event handling mechanism.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/custom_analytics_provider_google_analytics_provider_posthog_analytics_provider_36.md#2025-04-22_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useAppEvents } from '@kit/shared/events';\n\nfunction SomeComponent() {\n  const { emit } = useAppEvents();\n\n  const handleSignUp = (userId: string) => {\n    emit({ type: 'user.signedUp', payload: { userId } });\n    // This automatically calls analytics.identify and analytics.trackEvent\n  };\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Update RLS Policy for Tasks Table\nDESCRIPTION: Creates a row level security policy for updating tasks with both using and with check clauses to verify user permissions\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/supabase_clients_data_fetching_adding_pages_63.md#2025-04-22_snippet_23\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy update_tasks on public.tasks\n    for update\n    using (\n        account_id = auth.uid() or\n        public.has_permission(auth.uid(), account_id, 'tasks.write'::app_permissions)\n    )\n    with check (\n        account_id = auth.uid() or\n        public.has_permission(auth.uid(), account_id, 'tasks.write'::app_permissions)\n    );\n```\n\n----------------------------------------\n\nTITLE: Validating Input in Next.js Route Handler with Zod\nDESCRIPTION: This code demonstrates how to use Zod for input validation in a Next.js Route Handler. It shows parsing the request body and handling validation results.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/validating_api_input_zod_development_clone_repository_31.md#2025-04-22_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { NextRequest } from \"next/server\";\n\nexport async function POST(\n  request: NextRequest\n) {\n  const body = await request.json();\n  const bodyResult = await getBodySchema().safeParseAsync(body);\n\n  if (bodyResult.success === false) {\n    return bodyResult.error;\n  }\n\n  const { displayName, email } = bodyResult.data;\n\n  return sendInvite({ displayName, email });\n}\n\nfunction getBodySchema() {\n  return z.object({\n    displayName: z.string(),\n    email: z.string().email(),\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Applying withMethodsGuard in Next.js TypeScript\nDESCRIPTION: The `withMethodsGuard` function restricts API requests to specified HTTP methods (e.g., GET and POST). Demonstrates implementation for `/api/hello-world`. Dependencies include `~/core/middleware/with-methods-guard` and other associated middleware.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/adding_admin_users_admin_overview_admin_1.md#2025-04-22_snippet_13\n\nLANGUAGE: ts\nCODE:\n```\nimport { NextApiRequest,NextApiResponse } from \"next\";\n\nimport { withAuthedUser } from '~/core/middleware/with-authed-user';\nimport { withPipe } from '~/core/middleware/with-pipe';\nimport { withMethodsGuard } from '~/core/middleware/with-methods-guard';\nimport { withExceptionFilter } from '~/core/middleware/with-exception-filter';\n\nexport default function helloWorld(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n  const handler = withPipe(\n    withMethodsGuard(['GET', 'POST']),\n    withAuthedUser,\n    (req, res) => {\n      res.status(200).json({ message: 'Hello World!' });\n    }\n  );\n\n  return withExceptionFilter(req, res)(handler);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Task Item Container Component\nDESCRIPTION: React client component for handling task updates with form submission and mutation handling using React transitions.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/running_project_supabase_data_fetching_supabase_data_writing_27.md#2025-04-22_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\nimport { FormEventHandler, useCallback, useTransition } from 'react';\nimport { ChevronLeftIcon } from '@heroicons/react/24/outline';\n\nimport Textarea from '~/core/ui/Textarea';\nimport Label from '~/core/ui/Label';\nimport Button from '~/core/ui/Button';\nimport Heading from '~/core/ui/Heading';\nimport { TextFieldInput, TextFieldLabel } from '~/core/ui/TextField';\n\nimport type Task from '~/lib/tasks/types/task';\nimport { updateTaskAction } from '~/lib/tasks/actions';\n\nconst TaskItemContainer: React.FC<{\n  task: Task;\n}> = ({ task }) => {\n  const [isMutating, startTransition] = useTransition();\n\n  const onUpdate: FormEventHandler<HTMLFormElement> = useCallback(\n    (e) => {\n      e.preventDefault();\n\n      const data = new FormData(e.currentTarget);\n      const name = data.get('name') as string;\n      const description = data.get('description') as string;\n\n      startTransition(async () => {\n        await updateTaskAction({\n          task: {\n            name,\n            description,\n            id: task.id,\n          },\n          csrfToken,\n        });\n      });\n    },\n    [csrfToken, task.id],\n  );\n\n  return (\n    <form onSubmit={onUpdate}>\n      <div className={'flex flex-col space-y-4 max-w-xl'}>\n        <Heading type={2}>{task.name}</Heading>\n\n        <TextFieldLabel>\n          Name\n          <TextFieldInput required defaultValue={task.name} name={'name'} />\n        </TextFieldLabel>\n\n        <Label>\n          Description\n          <Textarea\n            className={'h-32'}\n            name={'description'}\n            defaultValue={task.description || ''}\n          />\n        </Label>\n\n        <div className={'flex space-x-2 justify-between'}>\n          <Button href={'../tasks'} color={'transparent'}>\n            <span className={'flex space-x-2 items-center'}>\n              <ChevronLeftIcon className={'w-4'} />\n              <span>Back to Tasks</span>\n            </span>\n          </Button>\n\n          <Button loading={isMutating}>Update Task</Button>\n        </div>\n      </div>\n    </form>\n  );\n```\n\n----------------------------------------\n\nTITLE: Creating POST API Route Handler in Next.js\nDESCRIPTION: Implements a Next.js API route handler for creating new tasks in Supabase. It validates the session, inserts a new task record, and returns the created task's ID.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/validating_api_input_zod_development_clone_repository_31.md#2025-04-22_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nimport { NextRequest, NextResponse } from \"next/server\";\n\nexport async function POST(\n  req: NextRequest\n) {\n  const client = getSupabaseRouteHandlerClient();\n  const session = await requireSession(client);\n  const task = req.json();\n\n  const { data } = await client.from('tasks').insert({\n    name: task.name,\n    done: false,\n    user_id: session.user.id,\n  })\n  .select('id')\n  .single();\n\n  return NextResponse.json({ id: data.id });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Home Route Middleware in Next.js\nDESCRIPTION: Middleware handler for the /home route that checks user authentication, onboarding status, and multi-factor authentication requirements. Redirects users to appropriate pages based on their status.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/waitlist_plugin_plugins_drizzle_supabase_52.md#2025-04-22_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  pattern: new URLPattern({ pathname: '/home/*?' }),\n  handler: async (req: NextRequest, res: NextResponse) => {\n    const {\n      data: { user },\n    } = await getUser(req, res);\n\n    const origin = req.nextUrl.origin;\n    const next = req.nextUrl.pathname;\n\n    if (!user) {\n      const signIn = pathsConfig.auth.signIn;\n      const redirectPath = `${signIn}?next=${next}`;\n\n      return NextResponse.redirect(new URL(redirectPath, origin).href);\n    }\n\n    const isOnboarded = user?.app_metadata.onboarded;\n\n    if (!isOnboarded) {\n      return NextResponse.redirect(new URL('/onboarding', origin).href);\n    }\n\n    const supabase = createMiddlewareClient(req, res);\n\n    const requiresMultiFactorAuthentication =\n      await checkRequiresMultiFactorAuthentication(supabase);\n\n    if (requiresMultiFactorAuthentication) {\n      return NextResponse.redirect(\n        new URL(pathsConfig.auth.verifyMfa, origin).href,\n      );\n    }\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Utilizing withPipe for Function Composition in Next.js TypeScript\nDESCRIPTION: The `withPipe` utility helps compose function handlers for API requests, promoting cleaner middleware integration. Demonstrates setup with method guards and authentication. Requires `~/core/middleware/with-pipe` and necessary middleware imports.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/adding_admin_users_admin_overview_admin_1.md#2025-04-22_snippet_14\n\nLANGUAGE: ts\nCODE:\n```\nimport { NextApiRequest,NextApiResponse } from \"next\";\n\nimport { withAuthedUser } from '~/core/middleware/with-authed-user';\nimport { withPipe } from '~/core/middleware/with-pipe';\nimport { withMethodsGuard } from '~/core/middleware/with-methods-guard';\nimport { withExceptionFilter } from '~/core/middleware/with-exception-filter';\n\nexport default function helloWorld(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n  const handler = withPipe(\n    withMethodsGuard(['GET']),\n    withAuthedUser,\n    (req, res) => {\n      res.status(200).json({ message: 'Hello World!' });\n    }\n  );\n\n  return withExceptionFilter(req, res)(handler);\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Configuration with Zod Schema in TypeScript\nDESCRIPTION: Code that uses the defined Zod schema to parse and validate configuration values from environment variables. This ensures that the application has valid configuration before proceeding.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/customization_2.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst appConfig = AppConfigSchema.parse({\n  name: process.env.NEXT_PUBLIC_PRODUCT_NAME,\n  title: process.env.NEXT_PUBLIC_SITE_TITLE,\n  description: process.env.NEXT_PUBLIC_SITE_DESCRIPTION,\n  url: process.env.NEXT_PUBLIC_SITE_URL,\n  locale: process.env.NEXT_PUBLIC_DEFAULT_LOCALE,\n  theme: process.env.NEXT_PUBLIC_DEFAULT_THEME_MODE,\n  themeColor: process.env.NEXT_PUBLIC_THEME_COLOR,\n  themeColorDark: process.env.NEXT_PUBLIC_THEME_COLOR_DARK,\n  production,\n});\n```\n\n----------------------------------------\n\nTITLE: Deleting Tasks RLS Policy with Permission Check - SQL\nDESCRIPTION: Defines a delete policy for `public.tasks` where the user must own the task or have the 'tasks.delete' permission to execute deletions. Uses `public.has_permission`. Requires proper role and permissions infrastructure. Inputs are user context and row data; output is deletion if checks pass. Limitations: must ensure permissions are not bypassed outside policy checks.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/adding_turborepo_package_approaching_local_development_database_functions_44.md#2025-04-22_snippet_24\n\nLANGUAGE: SQL\nCODE:\n```\ncreate policy delete_tasks on public.tasks\\n    for delete\\n    using (\\n        account_id = auth.uid() or\\n        public.has_permission(auth.uid(), account_id, 'tasks.delete'::app_permissions)\\n    );\n```\n\n----------------------------------------\n\nTITLE: Dynamic Payment Mode Selection\nDESCRIPTION: Logic to dynamically select payment mode based on plan configuration when creating a Stripe checkout session.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_one_time_payments_stripe_webhooks_payments_35.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst price = configuration.plans.find(item => {\n  return item.stripePriceId === params.priceId;\n});\n\nif (!price) {\n  throw new Error(`Price with ID ${params.priceId} not found in config`);\n}\n\nconst mode: Stripe.Checkout.SessionCreateParams.Mode = price.mode;\n```\n\n----------------------------------------\n\nTITLE: Creating Events Page Component\nDESCRIPTION: Next.js page component that implements server-side props and renders the EventsListContainer within a RouteShell.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/adding_admin_users_admin_overview_admin_1.md#2025-04-22_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GetServerSidePropsContext } from 'next';\n\nimport RouteShell from '~/components/RouteShell';\nimport EventsListContainer from '~/components/EventsListContainer';\n\nimport { withAppProps } from '~/lib/props/with-app-props';\n\nconst EventsPage: React.FC = () => {\n  return (\n    <>\n      <Head>\n        <title key=\"title\">Events</title>\n      </Head>\n      \n      <RouteShell title=\"Events\">\n        <EventsListContainer />\n      </RouteShell>\n    </>\n  );\n};\n\nexport default EventsPage;\n\n// guard the page!\nexport function getServerSideProps(ctx: GetServerSidePropsContext) {\n  return withAppProps(ctx);\n}\n```\n\n----------------------------------------\n\nTITLE: Pulling Updates from Upstream in Bash\nDESCRIPTION: Fetches and merges changes from the upstream repository's 'main' branch into the local repository, allowing unrelated histories. Only requires git. This keeps the fork or clone up-to-date. Input: terminal command, Output: local repository updated with upstream changes.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/initializing_project_introduction_marketing_site_pages_14.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit pull upstream main --allow-unrelated-histories\n```\n\n----------------------------------------\n\nTITLE: React Component Using Task Fetch Hook\nDESCRIPTION: Shows implementation of a React component that uses the task fetching hook to display task data with loading and error states.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/updating_sidebar_menu_change_auth_strategy_setup_oauth_79.md#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nfunction TaskComponent({ id }: { id: number }) {\n  const { data: task, loading, error } = useFetchTask({ id });\n\n  if (loading) {\n    return <p>Loading...</p>;\n  }\n\n  if (error) {\n    return <p>Error: {error.message}</p>;\n  }\n\n  return (\n    <>\n      <h1>{task.name}</h1>\n      <p>{task.description}</p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Languages in i18n Settings\nDESCRIPTION: Demonstrates how to add a new language to the i18n configuration by updating the languages array in the settings file.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/server_actions_uploading_data_to_storage_writing_data_to_supabase_17.md#2025-04-22_snippet_21\n\nLANGUAGE: js\nCODE:\n```\nconst languages: string[] = [fallbackLng, 'es'];\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js Firebase Application in TypeScript\nDESCRIPTION: The main configuration file (src/configuration.ts) that centralizes all application settings including site metadata, Firebase configuration, authentication options, routing paths, and third-party integrations like Stripe.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/initializing_project_introduction_marketing_site_pages_14.md#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nconst configuration = {\n  site: {\n    name: 'Awesomely - Your SaaS Title',\n    description: 'Your SaaS Description',\n    themeColor: '#ffffff',\n    themeColorDark: '#0a0a0a',\n    siteUrl: process.env.NEXT_PUBLIC_SITE_URL as string,\n    siteName: 'Awesomely',\n    twitterHandle: '',\n    githubHandle: '',\n    language: 'en',\n    convertKitFormId: '',\n  },\n  firebase: {\n    apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,\n    authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,\n    projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,\n    storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,\n    messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,\n    appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID,\n    measurementId: process.env.NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID,\n  },\n  auth: {\n    // Enable MFA. You must upgrade to GCP Identity Platform to use it.\n    // see: https://cloud.google.com/identity-platform/docs/product-comparison\n    enableMultiFactorAuth: false,\n    // NB: Enable the providers below in the Firebase Console\n    // in your production project\n    providers: {\n      emailPassword: true,\n      phoneNumber: false,\n      emailLink: false,\n      oAuth: [GoogleAuthProvider],\n    },\n  },\n  emulatorHost: process.env.NEXT_PUBLIC_EMULATOR_HOST,\n  emulator: process.env.NEXT_PUBLIC_EMULATOR === 'true',\n  production: process.env.NODE_ENV === 'production',\n  paths: {\n    signIn: '/auth/sign-in',\n    signUp: '/auth/sign-up',\n    emailLinkSignIn: '/auth/link',\n    onboarding: `/onboarding`,\n    appHome: '/dashboard',\n    settings: {\n      profile: '/settings/profile',\n      authentication: '/settings/profile/authentication',\n      email: '/settings/profile/email',\n      password: '/settings/profile/password',\n    },\n    api: {\n      checkout: `/api/stripe/checkout`,\n      billingPortal: `/api/stripe/portal`,\n    },\n    searchIndex: `/public/search-index`,\n  },\n  navigation: {\n    style: LayoutStyle.Sidebar,\n  },\n  appCheckSiteKey: process.env.NEXT_PUBLIC_APPCHECK_KEY,\n  email: {\n    host: '',\n    port: 0,\n    user: '',\n    password: '',\n    senderAddress: '',\n  },\n  sentry: {\n    dsn: process.env.SENTRY_DSN,\n  },\n  stripe: {\n    plans: [\n      {\n        name: 'Basic',\n        description: 'Description of your Basic plan',\n        price: '$249/year',\n        stripePriceId: 'basic-plan',\n        features: [\n          'Feature 1',\n          'Feature 2',\n          'common:plans.features.feature1'\n        ],\n      },\n    ],\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Creating RLS Policy for Deleting Tasks\nDESCRIPTION: SQL command to create a Row Level Security policy for deleting tasks. The policy ensures that users can only delete tasks they own or have the 'tasks.delete' permission on the account.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/adding_turborepo_package_approaching_local_development_database_functions_93.md#2025-04-22_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy delete_tasks on public.tasks\n    for delete\n    using (\n        account_id = auth.uid() or\n        public.has_permission(auth.uid(), account_id, 'tasks.delete'::app_permissions)\n    );\n```\n\n----------------------------------------\n\nTITLE: Integrating PostHog Analytics Service in TSX\nDESCRIPTION: Updates the main analytics configuration file (`packages/analytics/src/index.ts`) to include and initialize the PostHog analytics service. It imports `createPostHogAnalyticsService` and adds it to the providers list within the `createAnalyticsManager` configuration.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/analytics_api_custom_analytics_provider_google_analytics_provider_57.md#2025-04-22_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\n {% title=\"packages/analytics/src/index.ts\" %}\nimport { createPostHogAnalyticsService } from '@kit/posthog';\n\nimport { createAnalyticsManager } from './analytics-manager';\nimport type { AnalyticsManager } from './types';\n\nexport const analytics: AnalyticsManager = createAnalyticsManager({\n  providers: {\n    posthog: createPostHogAnalyticsService,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Team Account API in a Server Action\nDESCRIPTION: Code for initializing the Team Account API in a Next.js server action. Marks the function with 'use server' directive and creates the API client inside the server action function.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/custom_analytics_provider_google_analytics_provider_posthog_analytics_provider_36.md#2025-04-22_snippet_37\n\nLANGUAGE: tsx\nCODE:\n```\n'use server';\n\nimport { createTeamAccountsApi } from '@kit/team-accounts/api';\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\n\nexport async function myServerAction() {\n  const client = getSupabaseServerClient();\n  const api = createTeamAccountsApi(client);\n\n  // use api\n}\n```\n\n----------------------------------------\n\nTITLE: Checking if Organization has Active Subscription\nDESCRIPTION: This code demonstrates how to check if the current organization has an active subscription using the isActive() method, which returns true for 'active' or 'trialing' statuses.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/organization_sdk_organization_subscription_sdk_sdk_25.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport getSdk from '~/lib/sdk';\nimport getSupabaseServerComponentClient from '~/core/supabase/server-component-client';\n\nasync function PageServerComponent() {\n  const client = getSupabaseServerComponentClient();\n  const sdk = getSdk(client);\n\n  const subscription = await sdk.organization.getSubscription();\n  const isActive = await sdk.organization.isActive(); // false|true\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Projects with SQL\nDESCRIPTION: SQL query to insert a new project into the public.projects table with automatic owner assignment through kit.add_project_owner trigger\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/projects_data_model_53.md#2025-04-22_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO public.projects (name, description, account_id)\nVALUES ('My New Project', 'This is a description of my project', :account_id);\n```\n\n----------------------------------------\n\nTITLE: Restricting Write Access with Row-Level Security Policy\nDESCRIPTION: SQL policy to restrict write access to the users table. This policy allows authenticated users to insert records only when the ID matches their auth.uid(), preventing users from creating records for other users.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/server_actions_uploading_data_to_storage_writing_data_to_supabase_30.md#2025-04-22_snippet_20\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy \"Restrict write access to authenticated users\"\n  on users\n  for insert\n  to authenticated\n  with check (id = auth.uid());\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface for Blog Posts\nDESCRIPTION: This TypeScript interface defines the structure for blog posts including properties for title, excerpt, date, and other metadata.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/ci_tests_running_tests_testing_limitations_12.md#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\ninterface Post {\n  title: string;\n  excerpt: string;\n\n  date: string;\n  live: boolean;\n  tags?: string[];\n\n  coverImage?: string;\n\n  ogImage?: {\n    url: string;\n  };\n\n  author?: {\n    name: string;\n    picture: string;\n    url: string;\n  };\n\n  canonical?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies with pnpm (Bash)\nDESCRIPTION: Runs the `pnpm install` (shortened to `i`) command to install all necessary dependencies defined in the project's `package.json` files across the Turborepo workspaces.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/code_health_common_commands_conventions_48.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm i\n```\n\n----------------------------------------\n\nTITLE: API Request Hook Implementation Example\nDESCRIPTION: Example of using the useApiRequest hook in a SignIn component, showing how to make an API request and handle loading, success, and error states.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/ui_hooks_mdx_15.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nfunction SignIn() {\n  const [signIn, signInState] = useApiRequest(`/api/sign-in`);\n\n  useEffect(() => {\n    if (signInState.success) {\n      window.location.href = '/dashboard';\n    }\n  }, [signInState]);\n\n  if (signInState.loading) {\n    return <span>Loading...</span>\n  }\n\n  return (\n    <form onSubmit={() => signIn()}></form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating RLS Policy for Organization Members to Read Tasks in Supabase\nDESCRIPTION: A SQL policy that allows all organization members to read tasks. It uses the built-in function to check if the user is a member of the organization.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/theming_how_to_version_0_6_0_81.md#2025-04-22_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace policy \"Only the owner can delete tasks\"\n    on tasks\n    as restrictive\n    for select\n    to authenticated\n    using (\n        current_user_is_member_of_organization(organization_id)\n    );\n```\n\n----------------------------------------\n\nTITLE: Defining Organization Membership Invite Interface in TypeScript\nDESCRIPTION: TypeScript interface defining the structure of organization membership invites. It includes properties for tracking the invite code, recipient email, assigned role, expiration timestamp, and basic organization details.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/notifications_plugins_adding_translations_68.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\ninterface MembershipInvite {\n  code: string;\n  email: string;\n  role: MembershipRole;\n  expiresAt: number;\n\n  organization: {\n    id: string;\n    name: string;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Zod Schema for API Input Validation in TypeScript\nDESCRIPTION: This snippet demonstrates how to define a Zod schema for validating API input. It creates an object schema with 'displayName' and 'email' fields, ensuring type safety and input validation.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/validating_api_input_zod_development_clone_repository_31.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction getBodySchema() {\n  return z.object({\n    displayName: z.string(),\n    email: z.string().email(),\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Installing AI Text Editor Plugin with Makerkit CLI\nDESCRIPTION: Command to install the AI Text Editor plugin using the Makerkit CLI, which provides an interactive installation process.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_configuration_stripe_one_time_payments_stripe_webhooks_82.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nnpx @makerkit/cli@latest plugins install\n```\n\n----------------------------------------\n\nTITLE: Creating Custom OAuth Providers in MakerKit\nDESCRIPTION: Example of creating custom OAuth providers by extending the OAuthProvider class for Microsoft and Apple authentication.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/app_check_auth_flow_auth_hooks_69.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nclass MicrosoftAuthProvider extends OAuthProvider {\n  constructor() {\n    super('microsoft.com');\n  }\n}\n\nclass AppleAuthProvider extends OAuthProvider {\n  constructor() {\n    super('apple.com');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extended Authentication Configuration with Email Verification\nDESCRIPTION: Enhanced authentication configuration that imports additional providers and enables email verification requirement. This configuration demonstrates how to add the Twitter provider and enable MFA.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/ci_tests_running_tests_testing_limitations_12.md#2025-04-22_snippet_31\n\nLANGUAGE: tsx\nCODE:\n```\nimport { GoogleAuthProvider, TwitterAuthProvider } from 'firebase/auth';\n\nauth: {\n  // Enable MFA. You must upgrade to GCP Identity Platform to use it.\n  // see: https://cloud.google.com/identity-platform/docs/product-comparison\n  enableMultiFactorAuth: true,\n  // When enabled, users will be required to verify their email address\n  // before being able to access the app\n  requireEmailVerification:\n    process.env.NEXT_PUBLIC_REQUIRE_EMAIL_VERIFICATION === 'true',\n  // NB: Enable the providers below in the Firebase Console\n  // in your production project\n  providers: {\n    emailPassword: true,\n    phoneNumber: false,\n    emailLink: false,\n    oAuth: [GoogleAuthProvider],\n  },\n},\n```\n\n----------------------------------------\n\nTITLE: Switching Database Configuration for Lemon Squeezy\nDESCRIPTION: Updates the database configuration to use Lemon Squeezy as the billing provider. This requires access to the database to execute SQL queries.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/lemon_squeezy_metered_usage_one_off_payments_59.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nupdate config set billing_provider = 'lemon-squeezy';\n```\n\n----------------------------------------\n\nTITLE: Using DataTable with ServerDataLoader for Supabase Integration\nDESCRIPTION: Illustrates how to combine the DataTable component with ServerDataLoader to fetch and display data from Supabase, with support for pagination and filtering.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/paddle_per_seat_billing_stripe_90.md#2025-04-22_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ServerDataLoader } from '@makerkit/data-loader-supabase-nextjs';\nimport { DataTable } from '@kit/ui/enhanced-data-table';\nimport { getSupabaseServerAdminClient } from '@kit/supabase/server-admin-client';\n\nexport function loader() {\n}\n\nfunction AccountsPage({ searchParams }) {\n  const client = getSupabaseServerAdminClient();\n  const page = searchParams.page ? parseInt(searchParams.page) : 1;\n  const filters = getFilters(searchParams);\n\n  return (\n    <ServerDataLoader\n      table={'accounts'}\n      client={client}\n      page={page}\n      where={filters}\n    >\n      {({ data, page, pageSize, pageCount }) => (\n        <DataTable\n          columns={[\n            // Define your columns here\n          ]}\n          data={data}\n          page={page}\n          pageSize={pageSize}\n          pageCount={pageCount}\n        />\n      )}\n    </ServerDataLoader>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Warning Notification\nDESCRIPTION: Example of sending a warning notification by specifying the 'warning' type, typically used for alerting users about potential issues.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/sentry_monitoring_notifications_configuration_51.md#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\napi.createNotification({\n  account_id: accountId,\n  body: 'Your credit card is about to expire!',\n  type: 'warning',\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing useFetchMembers Hook with Supabase RPC in TypeScript React\nDESCRIPTION: A custom React hook that fetches members of an account using Supabase's RPC function 'get_account_members'. It uses React Query to manage the data fetching state and caching.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/data_fetching_3.md#2025-04-22_snippet_34\n\nLANGUAGE: tsx\nCODE:\n```\nfunction useFetchMembers(accountSlug: string) {\n  const supabase = useSupabase();\n  const queryKey = ['accounts_memberships', accountSlug];\n\n  const queryFn = async () => {\n    const { data, error } = await supabase.rpc('get_account_members', {\n      account_slug: accountSlug,\n    });\n\n    if (error) {\n      throw error;\n    }\n\n    return data;\n  };\n\n  return useQuery({\n    queryKey,\n    queryFn,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Function to Check Super Admin Status\nDESCRIPTION: Database function that checks if the current user is a Super Admin with MFA enabled and currently signed in with MFA.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/adding_turborepo_package_approaching_local_development_database_functions_44.md#2025-04-22_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\npublic.is_super_admin()\n```\n\n----------------------------------------\n\nTITLE: Creating SiteFooter Component with Footer in React/TSX\nDESCRIPTION: This snippet shows how to create a SiteFooter component using the Footer component. It includes a logo, description, copyright information, and multiple sections with links.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/app_breadcrumbs_bordered_navigation_menu_card_button_39.md#2025-04-22_snippet_32\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Footer } from '@kit/ui/marketing';\nimport { Trans } from '@kit/ui/trans';\n\nimport { AppLogo } from '~/components/app-logo';\nimport appConfig from '~/config/app.config';\n\nexport function SiteFooter() {\n  return (\n    <Footer\n      logo={<AppLogo className=\"w-[85px] md:w-[95px]\" />}\n      description={<Trans i18nKey=\"marketing:footerDescription\" />}\n      copyright={\n        <Trans\n          i18nKey=\"marketing:copyright\"\n          values={{\n            product: appConfig.name,\n            year: new Date().getFullYear(),\n          }}\n        />\n      }\n      sections={[\n        {\n          heading: <Trans i18nKey=\"marketing:about\" />,\n          links: [\n            { href: '/blog', label: <Trans i18nKey=\"marketing:blog\" /> },\n            { href: '/contact', label: <Trans i18nKey=\"marketing:contact\" /> },\n          ],\n        },\n        {\n          heading: <Trans i18nKey=\"marketing:product\" />,\n          links: [\n            {\n              href: '/docs',\n              label: <Trans i18nKey=\"marketing:documentation\" />,\n            },\n          ],\n        },\n        {\n          heading: <Trans i18nKey=\"marketing:legal\" />,\n          links: [\n            {\n              href: '/terms-of-service',\n              label: <Trans i18nKey=\"marketing:termsOfService\" />,\n            },\n            {\n              href: '/privacy-policy',\n              label: <Trans i18nKey=\"marketing:privacyPolicy\" />,\n            },\n            {\n              href: '/cookie-policy',\n              label: <Trans i18nKey=\"marketing:cookiePolicy\" />,\n            },\n          ],\n        },\n      ]}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Stripe Webhook Environment Configuration\nDESCRIPTION: Example environment variable configuration for Stripe webhooks secret key.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/validating_api_input_zod_development_clone_repository_31.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nSTRIPE_WEBHOOKS_SECRET=<PASTE_KEY_HERE>\n```\n\n----------------------------------------\n\nTITLE: Example JSON Configuration for Blog Post Collection\nDESCRIPTION: This JSON example shows the minimal configuration required for creating a blog post collection.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/ci_tests_running_tests_testing_limitations_12.md#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\":\"Changelog\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing User Authentication Check in React Router Loader (TSX)\nDESCRIPTION: Provides a React Router loader function example that enforces user authentication using Supabase. It initializes a server client, calls `requireUser` to check authentication status, and redirects to an appropriate page (like MFA verification) if necessary, otherwise returning data for the authenticated user.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/analytics_api_custom_analytics_provider_google_analytics_provider_57.md#2025-04-22_snippet_33\n\nLANGUAGE: tsx\nCODE:\n```\nimport { redirect } from 'react-router';\nimport { LoaderFunctionArgs } from 'react-router';\nimport { requireUser } from '@kit/supabase/require-user';\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\n\nexport async function loader(args: LoaderFunctionArgs) {\n  const client = getSupabaseServerClient(args.request);\n  const auth = await requireUser(client);\n\n  // check if the user needs redirect\n  if (auth.error) {\n    return redirect(auth.redirectTo);\n  }\n\n  // user is authed!\n  const user = auth.data;\n\n  // return your data\n  return {\n    data: {} // your data here,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Single Testimonial Admin Page in Next.js\nDESCRIPTION: This TypeScript React snippet shows how to implement the single Testimonial admin page using the TestimonialPage component from the Testimonials plugin.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/sentry_monitoring_notifications_configuration_51.md#2025-04-22_snippet_29\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TestimonialPage } from '@kit/testimonial/admin';\n\nexport default TestimonialPage;\n```\n\n----------------------------------------\n\nTITLE: Reading a Document using Firebase Admin SDK in Next.js API Route\nDESCRIPTION: This example demonstrates how to read a user document from Firestore using the Firebase Admin SDK in a Next.js API route. It initializes the Admin SDK, retrieves the user ID from the query parameters, fetches the user document, and returns it as JSON.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/reading_document_reading_documents_list_creating_document_8.md#2025-04-22_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { NextApiRequest, NextApiResponse } from 'next';\nimport { withAdmin as withFirebaseAdmin } from '~/core/middleware/with-admin';\nimport getRestFirestore from '~/core/firebase/admin/get-rest-firestore';\n\nexport default async function handler(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n  await withFirebaseAdmin();\n\n  const { userId } = req.query;\n  const firestore = getRestFirestore();\n  const usersCollection = firestore.collection('users');\n  const user = await usersCollection.doc(userId).get();\n\n  res.status(200).json(user);\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying an OTP using OTP API (TypeScript)\nDESCRIPTION: Shows how to verify a submitted one-time password using the `verifyToken` method of the OTP API. It checks the token against its purpose and returns a result object indicating validity, associated userId, and metadata upon success.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/analytics_api_custom_analytics_provider_google_analytics_provider_57.md#2025-04-22_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\n// Verify the token\nconst result = await api.verifyToken({\n  token: submittedToken,\n  purpose: 'email-verification'\n});\n\nif (result.valid) {\n  // Token is valid, proceed with the operation\n  const { userId, metadata } = result;\n  // Handle successful verification\n} else {\n  // Token is invalid or expired\n  // Handle verification failure\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Reusable Action Function in TypeScript\nDESCRIPTION: Demonstrates how to define a reusable action function (`deletePersonalAccountAction`) in a separate file for complex operations. This function takes a Supabase client and an OTP string as arguments and encapsulates the logic for deleting a personal account. It's intended to be called from a route's main action handler.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/creating_your_own_cms_client_keystatic_wordpress_62.md#2025-04-22_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\n// In a separate file\nexport const deletePersonalAccountAction = async ({\n  client,\n  otp,\n}: {\n  client: SupabaseClient<Database>;\n  otp: string;\n}) => {\n  // Implementation here\n};\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Client-Side Supabase Client with useSupabase Hook (TSX)\nDESCRIPTION: Demonstrates how to use the `useSupabase` hook within a React component to get an initialized Supabase client instance. This client is configured with the environment variables for Supabase URL and key.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/functions_initializing_project_introduction_85.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport useSupabase from '~/core/hooks/use-supabase';\\n\\nfunction Component() {\\n  // This is the Supabase client\\n  const supabase = useSupabase();\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Lemon Squeezy Plans in TypeScript\nDESCRIPTION: Example of how to configure Lemon Squeezy product and variant IDs in the MakerKit configuration file. This snippet shows the structure for defining subscription products, their features, and pricing plans.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/migrations_extending_organizations_organization_hooks_10.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  subscriptions: {\n    products: [\n      {\n        name: 'Basic',\n        description: 'Description of your Basic plan',\n        badge: `Up to 20 users`,\n        productId: 1, // <-- Lemon Squeezy product ID\n        features: [\n          'Basic Reporting',\n          'Up to 20 users',\n          '1GB for each user',\n          'Chat Support',\n        ],\n        plans: [\n          {\n            name: 'Monthly',\n            price: '$9',\n            variantId: 1, // <-- Lemon Squeezy variant ID\n          },\n          {\n            name: 'Yearly',\n            price: '$90',\n            variantId: 2, // <-- Lemon Squeezy variant ID\n          },\n        ],\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Event-Type Handling with Type Narrowing - Makerkit BillingService (TypeScript)\nDESCRIPTION: This snippet illustrates how to narrow the Stripe event type in the onEvent callback to execute custom logic for specific events, such as invoice.payment_succeeded. The example shows how to cast the event data and where to add custom handling code. Stripe types (like Stripe.Invoice) should be imported and provided via the Stripe Node.js SDK.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/api_billing_api_billing_schema_58.md#2025-04-22_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nawait service.handleWebhookEvent(request, {\n  async onEvent(data: unknown) {\n    if (data.type === 'invoice.payment_succeeded') {\n      const invoice = data as Stripe.Invoice;\n      // Your custom code here\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Reusable Subscription Guard Implementation\nDESCRIPTION: Utility functions for creating reusable subscription checks and guards for server components.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/subscription_permissions_organizations_lemon_squeezy_23.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { redirect } from \"next/navigation\";\n\nasync function canUserAccessProFeature(\n  organizationUid: string\n) {\n  const data = await loadAppData(organizationUid);\n  const subscription = data.organization.subscription?.data;\n\n  return subscription && isSubscriptionActive(subscription.status);\n}\n\nfunction isSubscriptionActive(status: Stripe.Subscription.Status) {\n  return ['active', 'trialing'].includes(status);\n}\n\nexport async function withSubscriptionGuard(organizationUid: string) {\n  const canAccessPage = await canUserAccessProFeature(organizationUid);\n\n  if (!canAccessPage) {\n    redirect('/dashboard?error=forbidden-subscription');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Task Creation RLS Policy Implementation\nDESCRIPTION: Row Level Security policy that restricts task creation based on user quota using the user_can_create_task function.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/server_actions_uploading_data_to_storage_writing_data_to_supabase_30.md#2025-04-22_snippet_27\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace policy \"Only allow users to create tasks if they have enough quota\"\n    on tasks\n    as restrictive\n    for insert\n    to authenticated\n    with check (\n        user_can_create_task(user_id)\n    );\n```\n\n----------------------------------------\n\nTITLE: Extending OrganizationSubscription Interface in TypeScript\nDESCRIPTION: This code snippet shows how to add a new property 'quantity' to the OrganizationSubscription interface. This allows for including additional data in the subscription object.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_one_time_payments_stripe_webhooks_payments_11.md#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nexport interface OrganizationSubscription {\n  // ...\n  quantity: number | null;\n}\n```\n\n----------------------------------------\n\nTITLE: Enforcing Email Verification via Environment Variable (Bash)\nDESCRIPTION: This bash environment variable export snippet illustrates how to enforce that users verify their email before accessing the application. Set 'NEXT_PUBLIC_REQUIRE_EMAIL_VERIFICATION' to 'true' in your environment, enabling server-side checks of the 'emailVerified' flag in Firebase Auth user objects. This impacts access controls on login and user session validation. Used alongside MakerKit server-side session logic; only effective for new, non-invited users.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/architecture_api_guards_app_check_2.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nNEXT_PUBLIC_REQUIRE_EMAIL_VERIFICATION=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS Theme Colors\nDESCRIPTION: Shows how to customize the primary color in Tailwind CSS configuration. The color palette can be modified by changing the primary and dark color values in the tailwind.config.js file.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/running_project_supabase_data_fetching_supabase_data_writing_27.md#2025-04-22_snippet_12\n\nLANGUAGE: js\nCODE:\n```\nextend: {\n  colors: {\n    primary: {\n      ...colors.indigo,\n      contrast: '#fff',\n    },\n    dark: colors.gray\n  },\n},\n```\n\n----------------------------------------\n\nTITLE: Configuring One-Time Payments in Stripe Checkout\nDESCRIPTION: Code showing how to modify the payment mode from subscription to one-time payment in the Stripe checkout configuration\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/subscription_permissions_organizations_lemon_squeezy_23.md#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nconst mode: Stripe.Checkout.SessionCreateParams.Mode = 'payment';\n\n// some code here...\n\nreturn stripe.checkout.sessions.create({\n  mode,\n  // more code here...\n});\n```\n\n----------------------------------------\n\nTITLE: Clone Repository Using SSH\nDESCRIPTION: Demonstrates how to clone the Next.js Supabase SaaS Kit Turbo repository using SSH. SSH configuration with Github is a prerequisite.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/cloudflare_production_environment_variables_supabase_47.md#2025-04-22_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ngit clone git@github.com:makerkit/next-supabase-saas-kit-turbo\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Table Component with TanStack React Table in React\nDESCRIPTION: A comprehensive implementation of a data table component using TanStack React Table. Features include sortable columns, row selection, filtering, pagination, column visibility toggle, and action menus. The component displays payment data with customizable formatting and interactive UI elements.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/multi_step_forms_page_shadcn_40.md#2025-04-22_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\nimport * as React from 'react';\n\nimport {\n  ColumnDef,\n  ColumnFiltersState,\n  SortingState,\n  VisibilityState,\n  flexRender,\n  getCoreRowModel,\n  getFilteredRowModel,\n  getPaginationRowModel,\n  getSortedRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport { ArrowUpDown, ChevronDown, MoreHorizontal } from 'lucide-react';\n\nimport { Button } from '@kit/ui/button';\nimport { Checkbox } from '@kit/ui/checkbox';\nimport {\n  DropdownMenu,\n  DropdownMenuCheckboxItem,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from '@kit/ui/dropdown-menu';\nimport { Input } from '@kit/ui/input';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@kit/ui/table';\n\nconst data: Payment[] = [\n  {\n    id: 'm5gr84i9',\n    amount: 316,\n    status: 'success',\n    email: 'ken99@yahoo.com',\n  },\n  {\n    id: '3u1reuv4',\n    amount: 242,\n    status: 'success',\n    email: 'Abe45@gmail.com',\n  },\n  {\n    id: 'derv1ws0',\n    amount: 837,\n    status: 'processing',\n    email: 'Monserrat44@gmail.com',\n  },\n  {\n    id: '5kma53ae',\n    amount: 874,\n    status: 'success',\n    email: 'Silas22@gmail.com',\n  },\n  {\n    id: 'bhqecj4p',\n    amount: 721,\n    status: 'failed',\n    email: 'carmella@hotmail.com',\n  },\n];\n\nexport type Payment = {\n  id: string;\n  amount: number;\n  status: 'pending' | 'processing' | 'success' | 'failed';\n  email: string;\n};\n\nexport const columns: ColumnDef<Payment>[] = [\n  {\n    id: 'select',\n    header: ({ table }) => (\n      <Checkbox\n        checked={\n          table.getIsAllPageRowsSelected() ||\n          (table.getIsSomePageRowsSelected() && 'indeterminate')\n        }\n        onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}\n        aria-label=\"Select all\"\n      />\n    ),\n    cell: ({ row }) => (\n      <Checkbox\n        checked={row.getIsSelected()}\n        onCheckedChange={(value) => row.toggleSelected(!!value)}\n        aria-label=\"Select row\"\n      />\n    ),\n    enableSorting: false,\n    enableHiding: false,\n  },\n  {\n    accessorKey: 'status',\n    header: 'Status',\n    cell: ({ row }) => (\n      <div className=\"capitalize\">{row.getValue('status')}</div>\n    ),\n  },\n  {\n    accessorKey: 'email',\n    header: ({ column }) => {\n      return (\n        <Button\n          variant=\"ghost\"\n          onClick={() => column.toggleSorting(column.getIsSorted() === 'asc')}\n        >\n          Email\n          <ArrowUpDown />\n        </Button>\n      );\n    },\n    cell: ({ row }) => <div className=\"lowercase\">{row.getValue('email')}</div>,\n  },\n  {\n    accessorKey: 'amount',\n    header: () => <div className=\"text-right\">Amount</div>,\n    cell: ({ row }) => {\n      const amount = parseFloat(row.getValue('amount'));\n\n      // Format the amount as a dollar amount\n      const formatted = new Intl.NumberFormat('en-US', {\n        style: 'currency',\n        currency: 'USD',\n      }).format(amount);\n\n      return <div className=\"text-right font-medium\">{formatted}</div>;\n    },\n  },\n  {\n    id: 'actions',\n    enableHiding: false,\n    cell: ({ row }) => {\n      const payment = row.original;\n\n      return (\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n              <span className=\"sr-only\">Open menu</span>\n              <MoreHorizontal />\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align=\"end\">\n            <DropdownMenuLabel>Actions</DropdownMenuLabel>\n            <DropdownMenuItem\n              onClick={() => navigator.clipboard.writeText(payment.id)}\n            >\n              Copy payment ID\n            </DropdownMenuItem>\n            <DropdownMenuSeparator />\n            <DropdownMenuItem>View customer</DropdownMenuItem>\n            <DropdownMenuItem>View payment details</DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      );\n    },\n  },\n];\n\nexport default function DataTableDemo() {\n  const [sorting, setSorting] = React.useState<SortingState>([]);\n  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>(\n    [],\n  );\n  const [columnVisibility, setColumnVisibility] =\n    React.useState<VisibilityState>({});\n  const [rowSelection, setRowSelection] = React.useState({});\n\n  const table = useReactTable({\n    data,\n    columns,\n    onSortingChange: setSorting,\n    onColumnFiltersChange: setColumnFilters,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    getFilteredRowModel: getFilteredRowModel(),\n    onColumnVisibilityChange: setColumnVisibility,\n    onRowSelectionChange: setRowSelection,\n    state: {\n      sorting,\n      columnFilters,\n      columnVisibility,\n      rowSelection,\n    },\n  });\n\n  return (\n    <>\n      <div className=\"w-full\">\n        <div className=\"flex items-center py-4\">\n          <Input\n            placeholder=\"Filter emails...\"\n            value={(table.getColumn('email')?.getFilterValue() as string) ?? ''}\n            onChange={(event) =>\n              table.getColumn('email')?.setFilterValue(event.target.value)\n            }\n            className=\"max-w-sm\"\n          />\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button variant=\"outline\" className=\"ml-auto\">\n                Columns <ChevronDown />\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\">\n              {table\n                .getAllColumns()\n                .filter((column) => column.getCanHide())\n                .map((column) => {\n                  return (\n                    <DropdownMenuCheckboxItem\n                      key={column.id}\n                      className=\"capitalize\"\n                      checked={column.getIsVisible()}\n                      onCheckedChange={(value) =>\n                        column.toggleVisibility(!!value)\n                      }\n                    >\n                      {column.id}\n                    </DropdownMenuCheckboxItem>\n                  );\n                })}\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </div>\n        <div className=\"rounded-md border\">\n          <Table>\n            <TableHeader>\n              {table.getHeaderGroups().map((headerGroup) => (\n                <TableRow key={headerGroup.id}>\n                  {headerGroup.headers.map((header) => {\n                    return (\n                      <TableHead key={header.id}>\n                        {header.isPlaceholder\n                          ? null\n                          : flexRender(\n                              header.column.columnDef.header,\n                              header.getContext(),\n                            )}\n                      </TableHead>\n                    );\n                  })}\n                </TableRow>\n              ))}\n            </TableHeader>\n            <TableBody>\n              {table.getRowModel().rows?.length ? (\n                table.getRowModel().rows.map((row) => (\n                  <TableRow\n                    key={row.id}\n                    data-state={row.getIsSelected() && 'selected'}\n                  >\n                    {row.getVisibleCells().map((cell) => (\n                      <TableCell key={cell.id}>\n                        {flexRender(\n                          cell.column.columnDef.cell,\n                          cell.getContext(),\n                        )}\n                      </TableCell>\n                    ))}\n                  </TableRow>\n                ))\n              ) : (\n                <TableRow>\n                  <TableCell\n                    colSpan={columns.length}\n                    className=\"h-24 text-center\"\n                  >\n                    No results.\n                  </TableCell>\n                </TableRow>\n              )}\n            </TableBody>\n          </Table>\n        </div>\n        <div className=\"flex items-center justify-end space-x-2 py-4\">\n          <div className=\"flex-1 text-sm text-muted-foreground\">\n            {table.getFilteredSelectedRowModel().rows.length} of{' '}\n            {table.getFilteredRowModel().rows.length} row(s) selected.\n          </div>\n          <div className=\"space-x-2\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => table.previousPage()}\n              disabled={!table.getCanPreviousPage()}\n            >\n              Previous\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => table.nextPage()}\n              disabled={!table.getCanNextPage()}\n            >\n              Next\n            </Button>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Webhook Handling with Callbacks in TypeScript\nDESCRIPTION: This snippet demonstrates extending the default webhook handling by providing specific callback functions for different Stripe events. These callbacks (`onPaymentFailed`, `onPaymentSucceeded`, etc.) allow custom logic execution when corresponding events are received.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/billing_webhooks_credit_based_billing_lemon_squeezy_89.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nawait service.handleWebhookEvent(request, {\n  onPaymentFailed: async (sessionId) => {},\n  onPaymentSucceeded: async (sessionId) => {},\n  onCheckoutSessionCompleted: async (subscription, customerId) => {},\n  onSubscriptionUpdated: async (subscription) => {},\n  onSubscriptionDeleted: async (subscriptionId) => {},\n});\n```\n\n----------------------------------------\n\nTITLE: Uploading Files to Firebase Storage in Remix.js\nDESCRIPTION: This component demonstrates how to upload files to Firebase Storage using the useStorage hook. It includes setting custom metadata and using toast notifications for feedback.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/setting_up_firebase_custom_fetch_fetching_data_firestore_70.md#2025-04-22_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ref, uploadBytes } from 'firebase/storage';\nimport { toast } from 'sonner';\nimport { useStorage } from 'reactfire';\nimport { useCurrentOrganization } from './use-current-organization';\n\nfunction Component() {\n  const storage = useStorage();\n  const organization = useCurrentOrganization();\n\n  async function uploadFile(file: File) {\n    if (!organization) return;\n\n    const organizationId = organization.id;\n    const path = `/${organizationId}/uploads/${file.name}`;\n    const reference = ref(storage, path);\n\n    const promise = uploadBytes(reference, file, {\n      cacheControl: 'max-age=31536000',\n      customMetadata: {\n        organizationId,\n      },\n    });\n\n    return toast.promise(promise, {\n      success: `Yay, uploaded!`,\n      loading: `Uploading...`,\n      error: `Error :(`\n    });\n  }\n\n  return <UploadForm onFileChosen={uploadFile} />\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Zod Validation Schema for Forms\nDESCRIPTION: Demonstrates how to create a Zod schema for form validation, defining constraints and data types for form fields to ensure data integrity.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/llms_migration_from_makerkit_v1_navigating_codebase_49.md#2025-04-22_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\n// schema/note.schema.ts\nimport { z } from 'zod';\n\nexport const NoteSchema = z.object({\n  title: z.string().min(1).max(100),\n  content: z.string().min(1),\n  category: z.enum(['work', 'personal']),\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching User Data in getServerSideProps with Next.js and Firebase\nDESCRIPTION: This snippet demonstrates how to retrieve the currently logged-in user in a Next.js getServerSideProps function using the getLoggedInUser utility from Firebase Admin. This approach allows passing authenticated user data as props to page components.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/call_api_routes_from_client_csrf_token_guarding_api_routes_7.md#2025-04-22_snippet_24\n\nLANGUAGE: tsx\nCODE:\n```\nimport { GetServerSidePropsContext } from \"next\";\nimport { getLoggedInUser } from '~/core/firebase/admin/auth/get-logged-in-user';\n\nasync function getServerSideProps(ctx: GetServerSidePropsContext) {\n  const user = await getLoggedInUser(ctx);\n\n  return {\n    props: {\n      user,\n    },\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Polling in Ticket Widget (TypeScript/React)\nDESCRIPTION: Updates the useFetchTicketMessages hook to include polling functionality for real-time message updates in the support ticket widget. It fetches new messages every 10 seconds based on the last message's timestamp.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/realtime_updates_server_components_7.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nfunction useFetchTicketMessages({\n  ticketId,\n  isOpen,\n}: {\n  ticketId: string | undefined;\n  isOpen: boolean;\n}) {\n  const [state, setState] = useState<{\n    loading: boolean;\n    error: Error | null;\n    messages: Message[];\n  }>({\n    loading: true,\n    error: null,\n    messages: [],\n  });\n\n  useEffect(() => {\n    if (!ticketId || !isOpen) {\n      return setState((state) => {\n        return {\n          ...state,\n          loading: false,\n          error: null,\n        };\n      });\n    }\n\n    function fetchMessages(lastCreatedAt?: string) {\n      setState({ loading: true, error: null, messages: [] });\n\n      fetch(`${API_URL}/messages?ticketId=${ticketId}&lastCreatedAt=${lastCreatedAt}`)\n        .then((response) => {\n          if (!response.ok) {\n            throw new Error('Failed to fetch messages');\n          }\n\n          return response.json();\n        })\n        .then((messages) => {\n          setState({\n            loading: false,\n            error: null,\n            messages: messages as Message[],\n          });\n        })\n        .catch((error) => {\n          setState({\n            loading: false,\n            error,\n            messages: [],\n          });\n        });\n    }\n\n    // Fetch messages on mount\n    fetchMessages();\n\n    // Fetch messages every 10 seconds\n    const interval = setInterval(() => {\n      const lastMessage = state.messages[state.messages.length - 1];\n      const lastCreatedAt = lastMessage?.createdAt;\n\n      fetchMessages(lastCreatedAt);\n    }, 10_000);\n\n    return () => clearInterval(interval);\n  }, [ticketId, isOpen, state.messages]);\n\n  return {\n    ...state,\n    appendMessage: (message: Message) => {\n      setState((state) => ({\n        ...state,\n        messages: [...state.messages, message],\n      }));\n    },\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Reading a Single Document with Reactfire's useFirestoreDocData Hook\nDESCRIPTION: This code demonstrates how to create a custom React hook that fetches a user document from Firestore using the useFirestoreDocData hook from Reactfire. It creates a document reference based on the current user's ID and returns the document data.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/reading_document_reading_documents_list_creating_document_8.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { doc, DocumentReference } from 'firebase/firestore';\nimport { useFirestore, useFirestoreDocData } from 'reactfire';\nimport { UserData } from '~/core/session/types/user-data';\nimport { useUserId } from '~/core/hooks/use-user-id';\nimport { USERS_COLLECTION } from '~/lib/firestore-collections';\n\nfunction useFetchUser() {\n  const firestore = useFirestore();\n  const userId = useUserId() as string;\n\n  const ref = doc(\n    firestore,\n    USERS_COLLECTION,\n    userId\n  ) as DocumentReference<UserData>;\n\n  return useFirestoreDocData(ref, { idField: 'id' });\n}\n\nexport default useFetchUser;\n```\n\n----------------------------------------\n\nTITLE: Fetching Team Account Subscription\nDESCRIPTION: Shows how to retrieve subscription data for a team account using the getSubscription method.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/analytics_api_custom_analytics_provider_google_analytics_provider_57.md#2025-04-22_snippet_46\n\nLANGUAGE: tsx\nCODE:\n```\nconst api = createTeamAccountsApi(client);\nconst subscription = await api.getSubscription('account-id');\n```\n\n----------------------------------------\n\nTITLE: Implementing Exception Handling in Next.js API Routes\nDESCRIPTION: This utility function helps manage exceptions from API handlers by reporting to Sentry.io (if configured), logging the exception for debugging, and returning a sanitized JSON response to avoid leaking information to clients.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/custom_fetch_fetching_data_firestore_making_api_requests_4.md#2025-04-22_snippet_28\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function apiHandler() {\n  const handler = withPipe(\n    withMethodsGuard(SUPPORTED_METHODS),\n    withAuthedUser,\n    (req, res) => {\n      return await getData();\n    }\n  );\n\n  // manage exceptions\n  return withExceptionFilter(req, res)(handler);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Server Action with Parameters in Next.js\nDESCRIPTION: This snippet demonstrates how to define a server action that accepts custom parameters instead of FormData. It's secured with the withSession utility to ensure requests have valid sessions.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/server_actions_uploading_data_to_storage_writing_data_to_supabase_17.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n'use server';\n\nimport { withSession } from '~/core/generic/actions-utils';\nimport getSupabaseServerActionClient from '~/core/supabase/action-client';\n\nexport const insertNewTask = withSession(\n    async (params: {\n      task: Task;\n    }) => {\n      const client = getSupabaseServerActionClient();\n\n      await insertNewTask(client, params);\n\n      return {\n        success: true,\n      };\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Creating and Sending an OTP using OTP API (TypeScript)\nDESCRIPTION: Demonstrates how to use the OTP API to generate and send a one-time password. It involves creating an API instance with a Supabase client, calling `createToken` to generate a token with specific parameters (userId, purpose, expiration, metadata), and then calling `sendOtpEmail` to email the generated token.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/analytics_api_custom_analytics_provider_google_analytics_provider_57.md#2025-04-22_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createOtpApi } from '@kit/otp/api';\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\n\n// Create the API instance\nconst client = getSupabaseServerClient();\nconst api = createOtpApi(client);\n\n// Generate and send an OTP email\nawait api.createToken({\n  userId: user.id,\n  purpose: 'email-verification',\n  expiresInSeconds: 3600, // 1 hour\n  metadata: { redirectTo: '/verify-email' }\n});\n\n// Send the email with the OTP\nawait api.sendOtpEmail({\n  email: userEmail,\n  otp: token.token\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Captcha Protection to Enhanced Route Handlers (TSX)\nDESCRIPTION: Shows how to enable captcha protection for an API Route Handler managed by `enhanceRouteHandler`. This is done by passing the `captcha: true` option along with the schema. The handler will automatically validate the captcha token provided in the request.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/csrf_protection_react_query_route_handlers_43.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { enhanceRouteHandler } from '@kit/next/routes';\n\nexport const POST = enhanceRouteHandler(\n  async function({ body, user, request }) {\n    // ... your code here\n    return NextResponse.json({\n      success: true,\n    });\n  },\n  {\n    captcha: true,\n    schema: ZodSchema,\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Fetching Organization Data from Firestore in TypeScript\nDESCRIPTION: Creates a custom React hook to fetch organization data from Firestore. It uses reactfire hooks and Firebase SDK to create a document reference and fetch data.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/custom_fetch_fetching_data_firestore_making_api_requests_4.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useFirestore, useFirestoreDocData } from 'reactfire';\nimport { doc, DocumentReference } from 'firebase/firestore';\nimport { Organization } from '~/lib/organizations/types/organization';\nimport { ORGANIZATIONS_COLLECTION } from '~/lib/firestore-collections';\n\ntype Response = WithId<Organization>;\n\nexport function useFetchOrganization(\n  organizationId: string\n) {\n  const firestore = useFirestore();\n\n  const ref = doc(\n    firestore,\n    ORGANIZATIONS_COLLECTION,\n    organizationId\n  ) as DocumentReference<Response>;\n\n  return useFirestoreDocData(ref, { idField: 'id' });\n}\n\nexport default useFetchOrganization;\n```\n\n----------------------------------------\n\nTITLE: Handling Form Submission with React Hook Form and Server Action Placeholder\nDESCRIPTION: This snippet shows a form's `onSubmit` handler using React Hook Form (`form.handleSubmit`). It wraps the asynchronous message sending logic within `startTransition` for better UI responsiveness. The actual call to the server action (`insertTicketMessageAction`) is commented out, indicating it's yet to be implemented.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/data_fetching_3.md#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<form\n  className={'relative mb-4 mt-auto'}\n  onSubmit={form.handleSubmit((data) => {\n    startTransition(async () => {\n      // const message = await insertTicketMessageAction(data);\n      // onMessageSent(message);\n    });\n  })}\n>\n  {/* Input and button */}\n</form>\n```\n\n----------------------------------------\n\nTITLE: Implementing Logging for API Functions with Pino\nDESCRIPTION: Example of implementing robust logging in API functions using Pino. This snippet demonstrates best practices for logging operations, including context tracking, success and error handling.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/uploading_data_to_storage_writing_data_to_supabase_data_fetching_77.md#2025-04-22_snippet_32\n\nLANGUAGE: tsx\nCODE:\n```\nimport logger from '~/core/logger';\n\nasync function addIntegrationHandler(\n  userId: string,\n  organizationId: number,\n  integrationId: number,\n) {\n  // this is the context that every log will print out\n  const loggingContext = {\n    integrationId,\n    organizationId,\n    userId,\n  };\n\n  // Here we log what we're doing\n  logger.log(loggingContext, `Adding new integration to organization`);\n\n  try {\n    await writeToDb(data);\n\n    // Here we log that the result of the operation\n    // was successful\n    logger.log(loggingContext, `Integration successfully added`);\n\n    // return successful response\n\n    return {\n      success: true\n    };\n  } catch (e) {\n    // Here we log that the operation failed\n    logger.error(loggingContext, `Encountered an error while adding integration`);\n\n    // Logging errors can be okay but\n    // ensure not to leak important information!\n    logger.debug(e);\n\n    // return error response\n    return {\n      success: false,\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Selected Organization Details on the Backend (TSX)\nDESCRIPTION: This snippet shows how to fetch the full details of the currently selected organization in a backend context (API Route, Server Action, Server Component). It first obtains a Supabase client (`getSupabaseRouteHandlerClient`), gets the authenticated user session (`requireSession`), extracts the user ID, and then calls `getCurrentOrganization` with the user ID and an optional organization UID to retrieve the organization data, handling redirects and MFA checks.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/api_routes_vs_server_actions_api_routes_call_api_routes_from_client_19.md#2025-04-22_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\nconst client = getSupabaseRouteHandlerClient();\nconst session = await requireSession(client);\nconst userId = session.user.id;\n\nconst organizationResponse = await getCurrentOrganization({\n  organizationUid,\n  userId,\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Firebase App Check\nDESCRIPTION: Shows how to implement Firebase App Check validation using the withAppCheck pipe in an action function.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_one_time_payments_stripe_webhooks_ci_tests_73.md#2025-04-22_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nexport const action: ActionFunction = async ({ request }) => {\n  await withAppCheck(request);\n}\n```\n\n----------------------------------------\n\nTITLE: Checkout Session Schema Definition\nDESCRIPTION: Zod schema definition for creating billing checkout sessions, specifying required fields like returnUrl, accountId, plan details and optional customer information.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/api_billing_api_billing_schema_58.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nreturnUrl: z.string().url(),\naccountId: z.string().uuid(),\nplan: PlanSchema,\ncustomerId: z.string().optional(),\ncustomerEmail: z.string().email().optional(),\nenableDiscountField: z.boolean().optional(),\nvariantQuantities: z.array(\n  z.object({\n    variantId: z.string().min(1),\n    quantity: z.number(),\n  }),\n)\n```\n\n----------------------------------------\n\nTITLE: Complete Task Creation Form Component\nDESCRIPTION: A full React component that implements a form for creating tasks. It uses the useCreateTaskMutation hook to handle the database operation, performs validation, and navigates to the tasks list after successful creation.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/uploading_data_to_storage_writing_data_to_supabase_data_fetching_77.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useNavigate } from '@remix-run/react';\nimport type { FormEventHandler } from 'react';\nimport { useCallback } from 'react';\nimport { toast } from 'sonner';\n\nimport TextField from '~/core/ui/TextField';\nimport Button from '~/core/ui/Button';\nimport useCreateTaskMutation from '~/lib/tasks/hooks/use-create-task';\n\nimport useCurrentOrganization from '~/lib/organizations/hooks/use-current-organization';\n\nconst CreateTaskForm = () => {\n  const createTaskMutation = useCreateTaskMutation();\n  const navigate = useNavigate();\n  const organization = useCurrentOrganization();\n  const organizationId = organization?.id as number;\n\n  const onCreateTask: FormEventHandler<HTMLFormElement> = useCallback(\n    async (event) => {\n      event.preventDefault();\n\n      const target = event.currentTarget;\n      const data = new FormData(target);\n      const name = data.get('name') as string;\n      const dueDate = (data.get('dueDate') as string) || getDefaultDueDate();\n\n      if (name.trim().length < 3) {\n        toast.error('Task name must be at least 3 characters long');\n\n        return;\n      }\n\n      const task = {\n        organizationId,\n        name,\n        dueDate,\n        done: false,\n      };\n\n      // create task\n      await createTaskMutation.mutateAsync(task);\n\n      // redirect to /tasks\n      return navigate(`/tasks`);\n    },\n    [navigate, createTaskMutation, organizationId]\n  );\n\n  return (\n    <form onSubmit={onCreateTask}>\n      <div>\n        <TextField.Label>\n          Name\n          <TextField.Input\n            required\n            name={'name'}\n            placeholder={'ex. Launch on IndieHackers'}\n          />\n          <TextField.Hint>Hint: whatever you do, ship!</TextField.Hint>\n        </TextField.Label>\n\n        <TextField.Label>\n          Due date\n          <TextField.Input name={'dueDate'} type={'date'} />\n        </TextField.Label>\n\n        <div>\n          <Button>Create Task</Button>\n        </div>\n      </div>\n    </form>\n  );\n};\n\nexport default CreateTaskForm;\n\nfunction getDefaultDueDate() {\n  const date = new Date();\n  date.setDate(date.getDate() + 1);\n  date.setHours(23, 59, 59);\n\n  return date.toDateString();\n}\n```\n\n----------------------------------------\n\nTITLE: Using a File Upload Hook in a React Component\nDESCRIPTION: Example of how to use a custom SWR mutation hook for file uploads in a React component. The component triggers the profile update when a file is uploaded.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/server_actions_uploading_data_to_storage_writing_data_to_supabase_17.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nconst updateProfile = useUpdateProfile();\n\n<Form onUpload={(file: File, userId: string) => {\n  return updateProfile.trigger({ file, userId })\n} />\n```\n\n----------------------------------------\n\nTITLE: SQL Function to Check MFA Authentication Level\nDESCRIPTION: Database function that checks if a user is signed in with MFA (Authentication Assurance Level 2). Used to restrict access based on MFA status.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/adding_turborepo_package_approaching_local_development_database_functions_44.md#2025-04-22_snippet_16\n\nLANGUAGE: sql\nCODE:\n```\npublic.is_aal2()\n```\n\n----------------------------------------\n\nTITLE: Fetching Supabase Data in a Next.js Server Component\nDESCRIPTION: Shows how to fetch data directly within a Next.js Server Component. It utilizes `getSupabaseServerComponentClient` to create a Supabase client instance appropriate for Server Components and then calls the `getOrganizationById` query function using the component's parameters. The fetched data is then used for rendering.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/architecture_auth_overview_auth_setup_29.md#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n```tsx\nimport getSupabaseServerComponentClient from '~/core/supabase/server-component-client';\nimport { getOrganizationById } from '~/lib/organizations/database/queries';\n\ninterface Params {\n  params: {\n    id: string;\n  };\n}\n\nasync function OrganizationPage({ params }: Params) {\n  const client = getSupabaseServerComponentClient();\n  const organization = await getOrganizationById(client, params.id);\n\n  return <div>{organization.name}</div>;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Securing API Route with Authentication Middleware (`withAuthedUser`)\nDESCRIPTION: This TypeScript snippet showcases using the `withAuthedUser` middleware within a `withPipe` composition to protect a Next.js API route. `withAuthedUser` checks for a valid user session (via cookie) and initializes Firebase Admin. It ensures that the subsequent handler (`membersHandler`) is only executed if the request originates from an authenticated user. The setup includes `withExceptionFilter` for error handling.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/ci_tests_running_tests_testing_limitations_12.md#2025-04-22_snippet_26\n\nLANGUAGE: tsx\nCODE:\n```\nimport {NextApiRequest, NextApiResponse } from \"next\";\nimport { withPipe } from \"~/core/middleware/with-pipe\";\nimport { withAuthedUser } from \"~/core/middleware/with-authed-user\";\nimport { withExceptionFilter } from '~/core/middleware/with-exception-filter';\n\nexport default function members(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n  const handler = withPipe(\n    withAuthedUser,\n    membersHandler\n  );\n\n  return withExceptionFilter(req, res)(handler);\n}\n\nfunction membersHandler(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n  // API logic\n}\n```\n\n----------------------------------------\n\nTITLE: Firestore Security Rules for Tasks Collection\nDESCRIPTION: Defines Firestore security rules for the tasks collection, specifying conditions for create, read, update, and delete operations based on user authentication and organization membership.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/custom_fetch_fetching_data_firestore_making_api_requests_4.md#2025-04-22_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nmatch /tasks/{taskId} {\n  allow create: if isSignedIn();\n  allow read, update, delete: if userIsMemberByOrganizationId(existingData().organizationId);\n}\n```\n\n----------------------------------------\n\nTITLE: Zod Schema for Reporting Metered Usage in Billing API\nDESCRIPTION: This schema defines the parameters required for reporting metered usage to the billing provider, including the ID, optional event name, and usage details.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/google_analytics_provider_posthog_analytics_provider_umami_analytics_provider_88.md#2025-04-22_snippet_40\n\nLANGUAGE: tsx\nCODE:\n```\nid: z.string({\n  description:\n    'The id of the usage record. For Stripe a customer ID, for LS a subscription item ID.',\n}),\neventName: z\n  .string({\n    description: 'The name of the event that triggered the usage',\n  })\n  .optional(),\nusage: z.object({\n  quantity: z.number(),\n  action: z.enum(['increment', 'set']).optional(),\n}),\n```\n\n----------------------------------------\n\nTITLE: Defining Zod Schema for API Payload Validation\nDESCRIPTION: This function creates a Zod schema object to validate the payload of an API request, ensuring the correct structure and data types.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_one_time_payments_stripe_webhooks_ci_tests_73.md#2025-04-22_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nfunction getBodySchema() {\n  return z.object({\n    displayName: z.string(),\n    email: z.string().email(),\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Navigation Links Data Structure - TypeScript/TSX\nDESCRIPTION: This snippet provides a TypeScript record object used for organizing site navigation links in a central location. Each link includes a label and a path, enabling straightforward extension and maintenance of the site's top-level menu. It assumes the presence of a 'Link' type and is typically referenced in render functions for building the UI navigation. Inputs are hardcoded label/path pairs; output is a strongly-typed object for menu generation. Requires adherence to site route conventions.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/functions_initializing_project_introduction_85.md#2025-04-22_snippet_18\n\nLANGUAGE: TSX\nCODE:\n```\nconst links: Record<string, Link> = {\n  Blog: {\n    label: 'Blog',\n    path: '/blog',\n  },\n  Docs: {\n    label: 'Docs',\n    path: '/docs',\n  },\n  Pricing: {\n    label: 'Pricing',\n    path: '/pricing',\n  },\n  FAQ: {\n    label: 'FAQ',\n    path: '/faq',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Documentation Page Frontmatter Example\nDESCRIPTION: Example of documentation page frontmatter showing required metadata fields including title, label, and description\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/auth_setup_authentication_blog_16.md#2025-04-22_snippet_2\n\nLANGUAGE: mdx\nCODE:\n```\n---\n\ntitle: \"Getting Started with the Makerkit SaaS Starter Kits\"\nlabel: \"Getting Started\"\ndescription: \"Learn how to get started with the Makerkit SaaS Starter Kits\"\n---\n```\n\n----------------------------------------\n\nTITLE: Accessing Billing Plan Variant IDs from Environment Variables in TypeScript\nDESCRIPTION: This snippet retrieves multiple billing plan variant IDs from environment variables in a TypeScript context. It ensures each variable is loaded (non-null/undefined) by using non-null assertions. No external dependencies are required, but correct setting of the relevant NEXT_PUBLIC_* environment variables is crucial. Inputs are sourced from process.env, and these IDs can be injected into runtime logic or billing schemas; outputs are simple variable assignments for reuse. Limitation: no validation is performed, so misconfigured variables may throw at runtime.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/payments_billing_6.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst starterPlanMonthlyVariantId = process.env.NEXT_PUBLIC_STARTER_PLAN_MONTHLY_VARIANT_ID!;\n\nconst starterPlanYearlyVariantId = process.env.NEXT_PUBLIC_STARTER_PLAN_YEARLY_VARIANT_ID!;\n\nconst proPlanMonthlyVariantId = process.env.NEXT_PUBLIC_PRO_PLAN_MONTHLY_VARIANT_ID!;\n\nconst proPlanYearlyVariantId = process.env.NEXT_PUBLIC_PRO_PLAN_YEARLY_VARIANT_ID!;\n```\n\n----------------------------------------\n\nTITLE: Supabase Database Push Command\nDESCRIPTION: Command to sync local database schema with remote Supabase database.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/validating_api_input_zod_development_clone_repository_31.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nsupabase db push\n```\n\n----------------------------------------\n\nTITLE: SQL Function for Checking Account Ownership\nDESCRIPTION: SQL function to check if a user is the owner of an account in the database. Returns true if the account is the user's account or if the user created a team account.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/supabase_clients_data_fetching_adding_pages_63.md#2025-04-22_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\npublic.is_account_owner(account_id uuid)\n```\n\n----------------------------------------\n\nTITLE: Implementing Realtime Subscription in React Component\nDESCRIPTION: React useEffect hook that creates a Supabase realtime channel subscription to listen for new messages in a ticket conversation, filtering by ticket ID.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/realtime_updates_server_components_7.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nuseEffect(() => {\n  const channel = client.channel(`messages-channel-${ticketId}`);\n\n  const subscription = channel\n    .on(\n      'postgres_changes',\n      {\n        event: 'INSERT',\n        schema: 'public',\n        filter: `ticket_id=eq.${ticketId}`,\n        table: 'messages',\n      },\n      (payload) => {\n        const message = payload.new as Tables<'messages'>;\n\n        if (message.author === 'customer') {\n          appendMessage(message);\n        }\n      },\n    )\n    .subscribe();\n\n  return () => {\n    void subscription.unsubscribe();\n  };\n}, [client, ticketId, appendMessage]);\n```\n\n----------------------------------------\n\nTITLE: Handling Errors and Redirects in a React Router Loader (TypeScript)\nDESCRIPTION: Illustrates how to handle errors within a React Router loader. It uses a try-catch block and throws a `redirect` response (provided by React Router) if data fetching fails, causing React Router to redirect the user to the specified error route.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/creating_your_own_cms_client_keystatic_wordpress_62.md#2025-04-22_snippet_30\n\nLANGUAGE: tsx\nCODE:\n```\nexport const loader = async (args: Route.LoaderArgs) => {\n  try {\n    const data = await fetchData();\n    return { data };\n  } catch (error) {\n    // Redirect to error page\n    throw redirect('/error');\n  }\n};\n\n```\n\n----------------------------------------\n\nTITLE: Lemon Squeezy Subscription Configuration in TypeScript\nDESCRIPTION: TypeScript configuration for Lemon Squeezy products and subscription plans including product IDs and variant IDs\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/technical_details_going_to_production_overview_publish_firebase_security_rules_72.md#2025-04-22_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\n{\n  subscriptions: {\n    products: [\n      {\n        name: 'Basic',\n        description: 'Description of your Basic plan',\n        badge: `Up to 20 users`,\n        productId: 1, // <-- Lemon Squeezy product ID\n        features: [\n          'Basic Reporting',\n          'Up to 20 users',\n          '1GB for each user',\n          'Chat Support',\n        ],\n        plans: [\n          {\n            name: 'Monthly',\n            price: '$9',\n            variantId: 1, // <-- Lemon Squeezy variant ID\n          },\n          {\n            name: 'Yearly',\n            price: '$90',\n            variantId: 2, // <-- Lemon Squeezy variant ID\n          },\n        ],\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Manual CSRF Token Implementation with SWR Mutation\nDESCRIPTION: Alternative implementation of the task insertion hook with manual CSRF token handling using the useCsrfToken hook.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/validating_api_input_zod_development_clone_repository_31.md#2025-04-22_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nimport useMutation from 'swr/mutation';\nimport useCsrfToken from '~/core/hooks/use-csrf-token';\n\ninterface Task {\n  name: string;\n}\n\nfunction useInsertTask() {\n  const csrfToken = useCsrfToken();\n  const path = '/api/task';\n\n  return useMutation(\n    path, async (_, data: { arg: Task }) => {\n      return fetch(path, {\n        body: JSON.stringify(data.arg),\n        method: 'POST',\n        headers: {\n          'x-csrf-token': csrfToken\n        }\n      });\n    }\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Identifying Users with Analytics API in TypeScript\nDESCRIPTION: Example of using the identify method to associate a user with their actions in a Makerkit project.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/analytics_api_custom_analytics_provider_google_analytics_provider_57.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { analytics } from '@kit/analytics';\n\nvoid analytics.identify(userId, {\n  email: user.email,\n  plan: user.subscriptionPlan,\n  // ... other user properties\n});\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface for Blog Post Collections\nDESCRIPTION: This TypeScript interface defines the structure for blog post collections with name and optional image properties.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/ci_tests_running_tests_testing_limitations_12.md#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\ninterface Collection {\n  name: string;\n\n  // image\n  logo?: string;\n  emoji?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Task Detail Page in Next.js\nDESCRIPTION: This code implements a dynamic page for viewing task details using a route parameter. It extends withAppProps to include the taskId from the URL and renders a TaskItemContainer component with error handling.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/deploying_production_development_getting_started_environment_variables_13.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { GetServerSidePropsContext } from 'next';\nimport ArrowLeftIcon from '@heroicons/react/24/outline/ArrowLeftIcon';\n\nimport { withAppProps } from '~/lib/props/with-app-props';\nimport TaskItemContainer from '~/components/tasks/TaskItemContainer';\n\nimport RouteShell from '~/components/RouteShell';\nimport Heading from '~/core/ui/Heading';\nimport Button from '~/core/ui/Button';\nimport Alert from '~/core/ui/Alert';\nimport ErrorBoundary from '~/core/ui/ErrorBoundary';\n\nconst TaskPage: React.FC<{ taskId: string }> = ({ taskId }) => {\n  return (\n    <RouteShell title={<TaskPageHeading />}>\n      <ErrorBoundary\n        fallback={<Alert type={'error'}>Ops, an error occurred :(</Alert>}\n      >\n        <TaskItemContainer taskId={taskId} />\n      </ErrorBoundary>\n    </RouteShell>\n  );\n};\n\nfunction TaskPageHeading() {\n  return (\n    <div className={'flex items-center space-x-6'}>\n      <Heading type={4}>\n        <span>Task</span>\n      </Heading>\n\n      <Button size={'small'} color={'transparent'} href={'/tasks'}>\n        <ArrowLeftIcon className={'mr-2 h-4'} />\n        Back to Tasks\n      </Button>\n    </div>\n  );\n}\n\nexport default TaskPage;\n\nexport async function getServerSideProps(ctx: GetServerSidePropsContext) {\n  const appProps = await withAppProps(ctx);\n  const taskId = ctx.query.id;\n\n  if ('props' in appProps) {\n    return {\n      props: {\n        ...(appProps.props ?? {}),\n        taskId,\n      },\n    };\n  }\n\n  return appProps;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies using PNPM Bash\nDESCRIPTION: Installs all project dependencies defined in the `pnpm-lock.yaml` file within the Makerkit monorepo. This command should be run from the root of the project directory. Requires PNPM to be installed.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/deploy_production_introduction_5.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\npnpm i\n```\n\n----------------------------------------\n\nTITLE: Configuring Prettier for Code Formatting\nDESCRIPTION: This example shows the default Prettier configuration used in the project. It can be customized by updating the .prettierrc file in the project root and then running the format command.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/custom_fetch_fetching_data_firestore_making_api_requests_4.md#2025-04-22_snippet_36\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tabWidth\": 2,\n  \"useTabs\": false,\n  \"semi\": true,\n  \"arrowParens\": \"always\",\n  \"parser\": \"typescript\",\n  \"printWidth\": 80,\n  \"singleQuote\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Using Supabase Client in Next.js Browser Components - TypeScript/TSX\nDESCRIPTION: Demonstrates the use of the 'useSupabase' hook to access the Supabase client in browser (client-side) components. The example component utilizes the client to render a UI and provide a sign-out button using 'supabase.auth.signOut()'. To use, the appropriate Makerkit Supabase hook module must be installed.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/csrf_protection_react_query_route_handlers_43.md#2025-04-22_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSupabase } from '@kit/supabase/hooks/use-supabase';\n\nexport default function Home() {\n  const supabase = useSupabase()\n\n  return (\n    <div>\n      <h1>Supabase Browser Client</h1>\n      <button onClick={() => supabase.auth.signOut()}>Sign Out</button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Environment Variables for Remix Supabase SaaS\nDESCRIPTION: This bash command helps in generating the environment variables necessary for the Remix Supabase SaaS Kit deployment. By running 'turbo gen env', it guides the user through the setup, creating a .env file populated with required values. Dependencies include the turbo package with proper configuration for the script execution.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/configuring_supabase_database_webhooks_fly_production_environment_variables_95.md#2025-04-22_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\nturbo gen env\n```\n\n----------------------------------------\n\nTITLE: Configuring Billing Schema with Product Definition in Makerkit\nDESCRIPTION: This code shows how to create a billing schema with product configuration. It defines a 'Starter' product with basic metadata that will be used in the pricing table UI.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/google_analytics_provider_posthog_analytics_provider_umami_analytics_provider_88.md#2025-04-22_snippet_43\n\nLANGUAGE: tsx\nCODE:\n```\nexport default createBillingSchema({\n  provider,\n  products: [\n    {\n      id: 'starter',\n      name: 'Starter',\n      description: 'The perfect plan to get started',\n      currency: 'USD',\n      badge: `Value`,\n      plans: [],\n    }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing User Task Creation Authorization Function in PostgreSQL\nDESCRIPTION: SQL function that validates if a user can create a task based on their subscription plan and current task quota. Returns boolean indicating if task creation is allowed.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/server_actions_uploading_data_to_storage_writing_data_to_supabase_30.md#2025-04-22_snippet_25\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace function user_can_create_task(user_id bigint)\nreturns boolean as $$\ndeclare\n    task_count int;\n    user_price_id text;\n    plan_task_quota int;\nbegin\n    select get_user_task_count(user_id)\n        into task_count;\n\n    select price_id\n    into user_price_id\n    from get_active_subscription(user_id);\n\n    if user_price_id is null then\n        raise exception 'User does not have an active subscription';\n    end if;\n\n    select task_quota from plans where price_id = user_price_id into plan_task_quota;\n\n    return task_count < plan_task_quota;\nend;\n$$ language plpgsql;\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Link Authentication with Firebase Auth in Typescript\nDESCRIPTION: This Typescript configuration snippet demonstrates how to enable Email Link Authentication while disabling email/password and phone number authentication within the MakerKit application's Firebase Auth setup. Dependencies include the MakerKit configuration framework and Firebase Auth providers. Key properties such as 'emailPassword', 'phoneNumber', and 'emailLink' determine the enabled authentication flows, while 'oAuth' specifies available OAuth providers. Inputs are boolean flags and provider arrays; outputs affect authenticated sign-in flows. Correct provider configuration is required for production usage.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/architecture_api_guards_app_check_2.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  auth: {\n    providers: {\n      emailPassword: false, // we switch this to false\n      phoneNumber: false,\n      emailLink: true, // we switch this to true\n      oAuth: [GoogleAuthProvider, FacebookAuthProvider],\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Team Account by ID with Team Account API (TypeScript)\nDESCRIPTION: Illustrates retrieving details for a specific team account using its ID via the `getTeamAccountById` method of the Team Account API. This can also check if the current user is part of the account.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/google_analytics_provider_posthog_analytics_provider_umami_analytics_provider_88.md#2025-04-22_snippet_27\n\nLANGUAGE: tsx\nCODE:\n```\nconst api = createTeamAccountsApi(client);\nconst account = await api.getTeamAccountById('account-id');\n```\n\n----------------------------------------\n\nTITLE: Adding Chatbot Dependencies\nDESCRIPTION: Package.json configuration to add chatbot plugin as a workspace dependency.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/sentry_monitoring_notifications_configuration_51.md#2025-04-22_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@kit/chatbot\": \"workspace:*\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Type-Safe Database Interactions with Supabase\nDESCRIPTION: Shows how to use type inference with Supabase database tables to ensure type safety when working with database records in TypeScript.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/llms_migration_from_makerkit_v1_navigating_codebase_49.md#2025-04-22_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { Tables } from '@kit/supabase/database';\ntype Bookmark = Tables<'bookmarks'>;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Invitation Data\nDESCRIPTION: Shows how to get invitation data from an invite token using the getInvitation method.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/analytics_api_custom_analytics_provider_google_analytics_provider_57.md#2025-04-22_snippet_52\n\nLANGUAGE: tsx\nCODE:\n```\nconst api = createTeamAccountsApi(client);\nconst invitation = await api.getInvitation(adminClient, 'invite-token');\n```\n\n----------------------------------------\n\nTITLE: Creating Radio Group Component\nDESCRIPTION: A radio group component implementation with three options: Default, Comfortable, and Compact. Uses shadcn UI's RadioGroup and RadioGroupItem components.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/multi_step_forms_page_shadcn_40.md#2025-04-22_snippet_27\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Label } from '@kit/ui/label';\nimport { RadioGroup, RadioGroupItem } from '@kit/ui/radio-group';\n\nexport default function RadioGroupDemo() {\n  return (\n    <RadioGroup defaultValue=\"comfortable\">\n      <div className=\"flex items-center space-x-2\">\n        <RadioGroupItem value=\"default\" id=\"r1\" />\n        <Label htmlFor=\"r1\">Default</Label>\n      </div>\n      <div className=\"flex items-center space-x-2\">\n        <RadioGroupItem value=\"comfortable\" id=\"r2\" />\n        <Label htmlFor=\"r2\">Comfortable</Label>\n      </div>\n      <div className=\"flex items-center space-x-2\">\n        <RadioGroupItem value=\"compact\" id=\"r3\" />\n        <Label htmlFor=\"r3\">Compact</Label>\n      </div>\n    </RadioGroup>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Consuming Firestore Data in React Component\nDESCRIPTION: Demonstrates how to use a custom Firestore hook in a React component, handling different states of the asynchronous data fetching process.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/custom_fetch_fetching_data_firestore_making_api_requests_4.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useFetchOrganization } from './use-fetch-organization';\n\nfunction OrganizationCard({ organizationId }) {\n  const {\n    data: organization,\n    status,\n  } = useFetchOrganization(organizationId);\n\n  /* data is loading */\n  if (status === `loading`) {\n    return <div>Loading...</div>\n  }\n\n  /* request errored */\n  if (status === `error`) {\n    return <div>Error!</div>\n  }\n\n  /* request successful, we can access \"organization\" */\n  return <div>{organization.name}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating RLS Policy for Restricting Write Access in Supabase\nDESCRIPTION: A SQL policy that restricts write access to the users table. This ensures users can only insert records where the ID matches their authentication ID.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/theming_how_to_version_0_6_0_81.md#2025-04-22_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy \"Restrict write access to authenticated users\"\n  on users\n  for insert\n  to authenticated\n  with check (id = auth.uid());\n```\n\n----------------------------------------\n\nTITLE: Configuring Dark Mode Color Palette in Tailwind\nDESCRIPTION: JavaScript configuration for Tailwind CSS to set up the dark mode color palette, spreading the slate colors and defining default and foreground colors for dark mode theme.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/initializing_project_introduction_marketing_site_pages_14.md#2025-04-22_snippet_21\n\nLANGUAGE: js\nCODE:\n```\ndark: {\n  ...colors.slate,\n  DEFAULT: colors.slate[950],\n  foreground: colors.slate[100],\n}\n```\n\n----------------------------------------\n\nTITLE: Granting Update and Delete Permissions to a Role in PostgreSQL with SQL\nDESCRIPTION: This SQL sequence modifies the 'public.app_permissions' enum to add 'tickets.update' and 'tickets.delete', then inserts these permissions into 'public.role_permissions' for the 'owner' role, allowing owners to update and delete tickets.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/database_4.md#2025-04-22_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\n-- insert new permissions\nalter type public.app_permissions add value 'tickets.update';\nalter type public.app_permissions add value 'tickets.delete';\ncommit;\n```\n\nLANGUAGE: sql\nCODE:\n```\n-- grant permissions to the owner role\ninsert into public.role_permissions(\n  role,\n  permission)\nvalues\n  ('owner', 'tickets.update'),\n  ('owner', 'tickets.delete');\n```\n\n----------------------------------------\n\nTITLE: Using Subscription Guard in Server Component\nDESCRIPTION: Example of implementing the subscription guard in a Next.js Server Component.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/subscription_permissions_organizations_lemon_squeezy_23.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\ninterface Params {\n  params: {\n    organization: string;\n  }\n}\n\nasync function GatedPage({ params }: Params) {\n  await withSubscriptionGuard(params.organization);\n\n  // ...\n}\n\nexport default GatedPage;\n```\n\n----------------------------------------\n\nTITLE: Using withCors Middleware with withPipe\nDESCRIPTION: Code snippet showing how to use the withCors middleware with the withPipe function in a Next.js API handler.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/commands_cors_develop_firebase_security_rules_5.md#2025-04-22_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nimport withCors from '~/core/middleware/with-cors';\n\nfunction handler(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n   // your logic\n}\n\nexport default withPipe(\n  withCors,\n  apiHandler\n);\n```\n\n----------------------------------------\n\nTITLE: Fetching the Signed-in User in API Routes - TypeScript/React\nDESCRIPTION: Illustrates using the requireSession utility in an API route to fetch the authenticated user session and handle redirects if not signed in or if multi-factor authentication fails. Requires custom getSupabaseRouteHandlerClient and requireSession imports. The POST async function accesses the Supabase client and invokes the session check for secure APIs.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/adding_app_pages_guarding_pages_updating_sidebar_menu_32.md#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport getSupabaseRouteHandlerClient from '~/core/supabase/route-handler-client';\nimport requireSession from '~/lib/user/require-session';\n\nexport async function POST() {\n  const client = getSupabaseRouteHandlerClient();\n  const session = await requireSession(client);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Middleware in Next.js API Routes\nDESCRIPTION: This code shows two approaches to ensure API requests come from authenticated users. You can either use the middleware with withPipe for composition or call it directly at the top of an API route handler.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/custom_fetch_fetching_data_firestore_making_api_requests_4.md#2025-04-22_snippet_26\n\nLANGUAGE: tsx\nCODE:\n```\nimport { withAuthedUser } from '~/core/middleware/with-authed-user';\n\nexport default withPipe(\n  withAuthedUser,\n);\n```\n\nLANGUAGE: tsx\nCODE:\n```\nexport default async function apiHandler() {\n  await withAuthedUser();\n}\n```\n\n----------------------------------------\n\nTITLE: Feature Usage Check Function in PostgreSQL\nDESCRIPTION: Implements a function to check if an account is eligible to use a specific feature based on subscription and plan entitlements.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_billing_checkout_addons_subscription_entitlements_54.md#2025-04-22_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nCREATE OR REPLACE FUNCTION public.can_use_feature(\n  p_account_id UUID, \n  p_feature VARCHAR\n)\nRETURNS BOOLEAN \nSECURITY INVOKER \nAS $$\nDECLARE\n  eligible_variant VARCHAR(255);\nBEGIN\n  SELECT si.variant_id \n    INTO eligible_variant\n  FROM public.subscription_items si\n  JOIN public.subscriptions s ON s.id = si.subscription_id\n  WHERE s.account_id = p_account_id\n    AND si.type = 'flat'\n    AND EXISTS (\n      SELECT 1 \n      FROM public.plan_entitlements ent\n      WHERE ent.feature = p_feature\n        AND ent.variant_id = si.variant_id\n    )\n  LIMIT 1;\n\n  RETURN eligible_variant IS NOT NULL;\nEND;\n$$ LANGUAGE plpgsql;\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Billing Schema in Makerkit\nDESCRIPTION: This code snippet demonstrates how to define a basic billing schema in Makerkit, including product definition with plans and pricing details. The schema creates a product with a basic plan and flat pricing model.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/payments_billing_6.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createBillingSchema } from '@kit/billing';\n\nexport default createBillingSchema({\n  provider: process.env.NEXT_PUBLIC_BILLING_PROVIDER,\n  products: [\n    {\n      id: 'your-product',\n      name: 'Your Product Name',\n      description: 'Description of your product',\n      plans: [\n        {\n          id: 'basic-plan',\n          name: 'Basic Plan',\n          lineItems: [\n            {\n              id: 'price_id_from_provider',\n              type: 'flat',\n              cost: 9.99,\n            }\n          ],\n        },\n        // More plans...\n      ],\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Logo Component with SVG in Next.js (React) - TypeScript\nDESCRIPTION: This snippet defines a reusable React component for the application's logo, implemented as a functional component in TypeScript. It imports Next.js's Link component for navigation and a utility function (cn) for class name management. The component renders an SVG with optional className and width props to control its appearance. It includes path elements that dynamically change based on the active theme (light or dark) to ensure seamless integration with both modes. This approach allows for easy replacement of the logo by updating the SVG, supporting customization by swapping in an image or text element in place of the SVG. Dependencies include Next.js, React, TypeScript, and the '@kit/ui/utils' cn function. Inputs are className (string, optional) and width (number, optional). Output is a rendered SVG component. The SVG code supports theming in dark/light mode, but to use other types of logos (image or text), the SVG can be replaced accordingly.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/customization_2.md#2025-04-22_snippet_7\n\nLANGUAGE: TSX\nCODE:\n```\nimport Link from 'next/link';\\n\\nimport { cn } from '@kit/ui/utils';\\n\\nfunction LogoImage({\\n  className,\\n  width = 105,\\n}: {\\n  className?: string;\\n  width?: number;\\n}) {\\n  return (\\n    <svg\\n      width={width}\\n      className={cn(`w-[95px]`, className)}\\n      viewBox=\"0 0 952 140\"\\n      fill=\"none\"\\n      xmlns=\"http://www.w3.org/2000/svg\"\\n    >\\n      <path\\n        className=\"dark:hidden\"\\n        d=\"M119.421 138V73.209C119.421 67.551 117.42 62.79 113.418 58.926C109.554 55.062 104.793 53.13 99.1349 53.13C93.6149 53.13 88.7849 55.062 84.6449 58.926C80.6429 62.652 78.6419 67.344 78.6419 73.002V138H59.8049V73.002C59.8049 67.206 57.8729 62.514 54.0089 58.926C49.8689 55.062 44.9699 53.13 39.3119 53.13C33.7919 53.13 29.0999 55.062 25.2359 58.926C21.0959 63.066 19.0259 67.965 19.0259 73.623V138H0.395899V36.984H19.0259V44.643C21.3719 41.745 24.4079 39.33 28.1339 37.398C31.9979 35.466 35.7239 34.5 39.3119 34.5C45.3839 34.5 50.9039 35.742 55.8719 38.226C60.9779 40.572 65.3939 43.884 69.1199 48.162C72.8459 43.884 77.2619 40.572 82.3679 38.226C87.4739 35.742 93.0629 34.5 99.1349 34.5C104.517 34.5 109.554 35.466 114.246 37.398C118.938 39.33 123.078 42.09 126.666 45.678C130.254 49.266 133.014 53.475 134.946 58.305C137.016 62.997 138.051 67.965 138.051 73.209V138H119.421ZM242.513 138V122.268C238.097 127.374 232.991 131.445 227.195 134.481C221.399 137.517 215.258 139.035 208.772 139.035C201.596 139.035 194.834 137.724 188.486 135.102C182.276 132.48 176.756 128.754 171.926 123.924C167.096 119.232 163.301 113.712 160.541 107.364C157.919 100.878 156.608 94.116 156.608 87.078C156.608 80.04 157.919 73.347 160.541 66.999C163.301 60.513 167.096 54.855 171.926 50.025C176.756 45.195 182.276 41.469 188.486 38.847C194.834 36.225 201.596 34.914 208.772 34.914C215.396 34.914 221.606 36.294 227.402 39.054C233.336 41.814 238.373 45.678 242.513 50.646V36.984H261.143V138H242.513ZM208.772 53.337C204.218 53.337 199.802 54.234 195.524 56.028C191.384 57.684 187.796 60.03 184.76 63.066C181.724 66.102 179.309 69.759 177.515 74.037C175.859 78.177 175.031 82.524 175.031 87.078C175.031 91.632 175.859 95.979 177.515 100.119C179.309 104.259 181.724 107.847 184.76 110.883C187.796 113.919 191.384 116.334 195.524 118.128C199.802 119.784 204.218 120.612 208.772 120.612C213.326 120.612 217.673 119.784 221.813 118.128C225.953 116.334 229.541 113.919 232.577 110.883C235.613 107.847 237.959 104.259 239.615 100.119C241.409 95.979 242.306 91.632 242.306 87.078C242.306 82.524 241.409 78.177 239.615 74.037C237.959 69.759 235.613 66.102 232.577 63.066C229.541 60.03 225.953 57.684 221.813 56.028C217.673 54.234 213.326 53.337 208.772 53.337ZM331.467 138L300.003 99.705V138H281.787V0.344996H300.003V59.754L328.155 33.258H355.272L306.213 78.798L355.479 138H331.467ZM379.639 94.116C379.639 97.428 380.812 100.878 383.158 104.466C385.642 108.054 388.471 111.09 391.645 113.574C397.441 118.128 404.203 120.405 411.931 120.405C424.213 120.405 434.218 114.471 441.946 102.603L457.678 111.918C452.296 120.612 445.672 127.305 437.806 131.997C429.94 136.689 421.315 139.035 411.931 139.035C404.893 139.035 398.2 137.724 391.852 135.102C385.504 132.342 379.915 128.547 375.085 123.717C370.255 118.887 366.46 113.298 363.7 106.95C361.078 100.602 359.767 93.909 359.767 86.871C359.767 79.833 361.078 73.14 363.7 66.792C366.46 60.306 370.255 54.648 375.085 49.818C379.777 44.988 385.297 41.262 391.645 38.64C398.131 36.018 404.893 34.707 411.931 34.707C418.969 34.707 425.662 36.018 432.01 38.64C438.496 41.262 444.085 44.988 448.777 49.818C458.989 60.306 464.095 72.45 464.095 86.25C464.095 88.734 463.888 91.356 463.474 94.116H379.639ZM411.931 51.681C406.273 51.681 400.96 52.923 395.992 55.407C391.024 57.891 387.022 61.203 383.986 65.343C381.088 69.345 379.639 73.623 379.639 78.177H444.223C444.223 73.623 442.705 69.345 439.669 65.343C436.771 61.203 432.838 57.891 427.87 55.407C422.902 52.923 417.589 51.681 411.931 51.681ZM528.883 54.372C525.571 52.854 522.604 52.095 519.982 52.095C514.462 52.095 509.908 54.027 506.32 57.891C502.456 62.031 500.524 66.792 500.524 72.174V138H482.722V72.174C482.722 64.722 484.585 57.891 488.311 51.681C492.175 45.471 497.419 40.641 504.043 37.191C509.011 34.845 514.324 33.672 519.982 33.672C524.536 33.672 528.883 34.5 533.023 36.156C537.163 37.812 541.51 40.503 546.064 44.229L528.883 54.372Z\"\\n        fill=\"url(#paint0_linear_2621_2)\"\\n      />\\n      <path\\n        className=\"hidden dark:block\"\\n        d=\"M119.421 138V73.209C119.421 67.551 117.42 62.79 113.418 58.926C109.554 55.062 104.793 53.13 99.1349 53.13C93.6149 53.13 88.7849 55.062 84.6449 58.926C80.6429 62.652 78.6419 67.344 78.6419 73.002V138H59.8049V73.002C59.8049 67.206 57.8729 62.514 54.0089 58.926C49.8689 55.062 44.9699 53.13 39.3119 53.13C33.7919 53.13 29.0999 55.062 25.2359 58.926C21.0959 63.066 19.0259 67.965 19.0259 73.623V138H0.395899V36.984H19.0259V44.643C21.3719 41.745 24.4079 39.33 28.1339 37.398C31.9979 35.466 35.7239 34.5 39.3119 34.5C45.3839 34.5 50.9039 35.742 55.8719 38.226C60.9779 40.572 65.3939 43.884 69.1199 48.162C72.8459 43.884 77.2619 40.572 82.3679 38.226C87.4739 35.742 93.0629 34.5 99.1349 34.5C104.517 34.5 109.554 35.466 114.246 37.398C118.938 39.33 123.078 42.09 126.666 45.678C130.254 49.266 133.014 53.475 134.946 58.305C137.016 62.997 138.051 67.965 138.051 73.209V138H119.421ZM242.513 138V122.268C238.097 127.374 232.991 131.445 227.195 134.481C221.399 137.517 215.258 139.035 208.772 139.035C201.596 139.035 194.834 137.724 188.486 135.102C182.276 132.48 176.756 128.754 171.926 123.924C167.096 119.232 163.301 113.712 160.541 107.364C157.919 100.878 156.608 94.116 156.608 87.078C156.608 80.04 157.919 73.347 160.541 66.999C163.301 60.513 167.096 54.855 171.926 50.025C176.756 45.195 182.276 41.469 188.486 38.847C194.834 36.225 201.596 34.914 208.772 34.914C215.396 34.914 221.606 36.294 227.402 39.054C233.336 41.814 238.373 45.678 242.513 50.646V36.984H261.143V138H242.513ZM208.772 53.337C204.218 53.337 199.802 54.234 195.524 56.028C191.384 57.684 187.796 60.03 184.76 63.066C181.724 66.102 179.309 69.759 177.515 74.037C175.859 78.177 175.031 82.524 175.031 87.078C175.031 91.632 175.859 95.979 177.515 100.119C179.309 104.259 181.724 107.847 184.76 110.883C187.796 113.919 191.384 116.334 195.524 118.128C199.802 119.784 204.218 120.612 208.772 120.612C213.326 120.612 217.673 119.784 221.813 118.128C225.953 116.334 229.541 113.919 232.577 110.883C235.613 107.847 237.959 104.259 239.615 100.119C241.409 95.979 242.306 91.632 242.306 87.078C242.306 82.524 241.409 78.177 239.615 74.037C237.959 69.759 235.613 66.102 232.577 63.066C229.541 60.03 225.953 57.684 221.813 56.028C217.673 54.234 213.326 53.337 208.772 53.337ZM331.467 138L300.003 99.705V138H281.787V0.344996H300.003V59.754L328.155 33.258H355.272L306.213 78.798L355.479 138H331.467ZM379.639 94.116C379.639 97.428 380.812 100.878 383.158 104.466C385.642 108.054 388.471 111.09 391.645 113.574C397.441 118.128 404.203 120.405 411.931 120.405C424.213 120.405 434.218 114.471 441.946 102.603L457.678 111.918C452.296 120.612 445.672 127.305 437.806 131.997C429.94 136.689 421.315 139.035 411.931 139.035C404.893 139.035 398.2 137.724 391.852 135.102C385.504 132.342 379.915 128.547 375.085 123.717C370.255 118.887 366.46 113.298 363.7 106.95C361.078 100.602 359.767 93.909 359.767 86.871C359.767 79.833 361.078 73.14 363.7 66.792C366.46 60.306 370.255 54.648 375.085 49.818C379.777 44.988 385.297 41.262 391.645 38.64C398.131 36.018 404.893 34.707 411.931 34.707C418.969 34.707 425.662 36.018 432.01 38.64C438.496 41.262 444.085 44.988 448.777 49.818C458.989 60.306 464.095 72.45 464.095 86.25C464.095 88.734 463.888 91.356 463.474 94.116H379.639ZM411.931 51.681C406.273 51.681 400.96 52.923 395.992 55.407C391.024 57.891 387.022 61.203 383.986 65.343C381.088 69.345 379.639 73.623 379.639 78.177H444.223C444.223 73.623 442.705 69.345 439.669 65.343C436.771 61.203 432.838 57.891 427.87 55.407C422.902 52.923 417.589 51.681 411.931 51.681ZM528.883 54.372C525.571 52.854 522.604 52.095 519.982 52.095C514.462 52.095 509.908 54.027 506.32 57.891C502.456 62.031 500.524 66.792 500.524 72.174V138H482.722V72.174C482.722 64.722 484.585 57.891 488.311 51.681C492.175 45.471 497.419 40.641 504.043 37.191C509.011 34.845 514.324 33.672 519.982 33.672C524.536 33.672 528.883 34.5 533.023 36.156C537.163 37.812 541.51 40.503 546.064 44.229L528.883 54.372Z\"\\n        fill=\"url(#paint0_linear_2621_2)\"\\n      />\\n      <path\n```\n\n----------------------------------------\n\nTITLE: Creating Projects Table in Supabase\nDESCRIPTION: Creates the projects table with columns for project ID, name, description, account ID (foreign key), and timestamps. This table stores the core project information.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/projects_data_model_53.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n-- Projects table\nCREATE TABLE IF NOT EXISTS public.projects (\n  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  description TEXT,\n  account_id UUID NOT NULL REFERENCES public.accounts(id) ON DELETE CASCADE,\n  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),\n  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()\n);\n```\n\n----------------------------------------\n\nTITLE: Form Submission with Server Action\nDESCRIPTION: Demonstrates how to use a server action within a form's onSubmit handler using React's useTransition to handle the asynchronous operation.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/data_fetching_3.md#2025-04-22_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\n<form\n  className={'relative mb-4 mt-auto'}\n  onSubmit={form.handleSubmit((data) => {\n    startTransition(async () => {\n      const message = await insertTicketMessageAction(data);\n\n      onMessageSent(message);\n    });\n  })}\n>\n```\n\n----------------------------------------\n\nTITLE: Zod Schema for Creating Checkout Sessions in Billing API\nDESCRIPTION: This schema defines the parameters required for creating a checkout session in the Billing API. It includes fields for return URL, account ID, plan details, customer information, and product variants.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/google_analytics_provider_posthog_analytics_provider_umami_analytics_provider_88.md#2025-04-22_snippet_36\n\nLANGUAGE: tsx\nCODE:\n```\nreturnUrl: z.string().url(),\naccountId: z.string().uuid(),\nplan: PlanSchema,\ncustomerId: z.string().optional(),\ncustomerEmail: z.string().email().optional(),\nenableDiscountField: z.boolean().optional(),\nvariantQuantities: z.array(\n  z.object({\n    variantId: z.string().min(1),\n    quantity: z.number(),\n  }),\n)\n```\n\n----------------------------------------\n\nTITLE: Lemon Squeezy Configuration Setup\nDESCRIPTION: Configuration setup for Lemon Squeezy subscription products and variants in the application.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/subscription_permissions_organizations_lemon_squeezy_23.md#2025-04-22_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\n{\n  subscriptions: {\n    products: [\n      {\n        name: 'Basic',\n        description: 'Description of your Basic plan',\n        badge: `Up to 20 users`,\n        productId: 1, // <-- Lemon Squeezy product ID\n        features: [\n          'Basic Reporting',\n          'Up to 20 users',\n          '1GB for each user',\n          'Chat Support',\n        ],\n        plans: [\n          {\n            name: 'Monthly',\n            price: '$9',\n            variantId: 1, // <-- Lemon Squeezy variant ID\n          },\n          {\n            name: 'Yearly',\n            price: '$90',\n            variantId: 2, // <-- Lemon Squeezy variant ID\n          },\n        ],\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Stripe Webhook Validation\nDESCRIPTION: Implementation of Stripe webhook signature validation to ensure webhook authenticity.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_one_time_payments_stripe_webhooks_payments_35.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst signature = req.headers['stripe-signature'];\n\nif (!signature) {\n  return throwBadRequestException(res);\n}\n\nconst rawBody = await getRawBody(req);\nconst stripe = await getStripeInstance();\n\nconst event = stripe.webhooks.constructEvent(\n  rawBody,\n  signature,\n  webhookSecretKey\n);\n```\n\n----------------------------------------\n\nTITLE: Deploying Application with Fly.io using GitHub Actions\nDESCRIPTION: This GitHub Actions workflow is designed to automate the deployment process of an application to Fly.io. Triggered by a push to the main branch, it sets up Fly with flyctl and then runs a series of build arguments that are primarily environment variables necessary for the application. Dependencies include GitHub Actions' checkout and Flyctl setup, and it requires all environment variables and secrets to be configured in the GitHub repository.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/configuring_supabase_database_webhooks_fly_production_environment_variables_95.md#2025-04-22_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\nname: Fly Deploy\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  deploy:\n    name: Deploy app\n    runs-on: ubuntu-latest\n    concurrency: deploy-group\n    environment: production\n    steps:\n      - uses: actions/checkout@v4\n      - uses: superfly/flyctl-actions/setup-flyctl@master\n      - run: |\n          flyctl deploy --remote-only \\\n            --build-arg NODE_ENV=\"${{ vars.NODE_ENV }}\" \\\n            --build-arg VITE_SITE_URL=\"${{ vars.VITE_SITE_URL }}\" \\\n            --build-arg VITE_PRODUCT_NAME=\"${{ vars.VITE_PRODUCT_NAME }}\" \\\n            --build-arg VITE_SITE_TITLE=\"${{ vars.VITE_SITE_TITLE }}\" \\\n            --build-arg VITE_SITE_DESCRIPTION=\"${{ vars.VITE_SITE_DESCRIPTION }}\" \\\n            --build-arg VITE_DEFAULT_THEME_MODE=\"${{ vars.VITE_DEFAULT_THEME_MODE }}\" \\\n            --build-arg VITE_DEFAULT_LOCALE=\"${{ vars.VITE_DEFAULT_LOCALE }}\" \\\n            --build-arg VITE_AUTH_PASSWORD=\"${{ vars.VITE_AUTH_PASSWORD }}\" \\\n            --build-arg VITE_AUTH_MAGIC_LINK=\"${{ vars.VITE_AUTH_MAGIC_LINK }}\" \\\n            --build-arg CONTACT_EMAIL=\"${{ secrets.CONTACT_EMAIL }}\" \\\n            --build-arg VITE_ENABLE_THEME_TOGGLE=\"${{ vars.VITE_ENABLE_THEME_TOGGLE }}\" \\\n            --build-arg VITE_ENABLE_PERSONAL_ACCOUNT_DELETION=\"${{ vars.VITE_ENABLE_PERSONAL_ACCOUNT_DELETION }}\" \\\n            --build-arg VITE_ENABLE_PERSONAL_ACCOUNT_BILLING=\"${{ vars.VITE_ENABLE_PERSONAL_ACCOUNT_BILLING }}\" \\\n            --build-arg VITE_ENABLE_TEAM_ACCOUNTS=\"${{ vars.VITE_ENABLE_TEAM_ACCOUNTS }}\" \\\n            --build-arg VITE_ENABLE_TEAM_ACCOUNT_DELETION=\"${{ vars.VITE_ENABLE_TEAM_ACCOUNT_DELETION }}\" \\\n            --build-arg VITE_ENABLE_TEAM_ACCOUNTS_BILLING=\"${{ vars.VITE_ENABLE_TEAM_ACCOUNTS_BILLING }}\" \\\n            --build-arg VITE_ENABLE_TEAM_ACCOUNTS_CREATION=\"${{ vars.VITE_ENABLE_TEAM_ACCOUNTS_CREATION }}\" \\\n            --build-arg VITE_ENABLE_NOTIFICATIONS=\"${{ vars.VITE_ENABLE_NOTIFICATIONS }}\" \\\n            --build-arg VITE_REALTIME_NOTIFICATIONS=\"${{ vars.VITE_REALTIME_NOTIFICATIONS }}\" \\\n            --build-arg VITE_SUPABASE_URL=\"${{ vars.VITE_SUPABASE_URL }}\" \\\n            --build-arg VITE_SUPABASE_ANON_KEY=\"${{ vars.VITE_SUPABASE_ANON_KEY }}\" \\\n            --build-arg SUPABASE_SERVICE_ROLE_KEY=\"${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}\" \\\n            --build-arg VITE_BILLING_PROVIDER=\"${{ vars.VITE_BILLING_PROVIDER }}\" \\\n            --build-arg VITE_STRIPE_PUBLISHABLE_KEY=\"${{ vars.VITE_STRIPE_PUBLISHABLE_KEY }}\" \\\n            --build-arg STRIPE_SECRET_KEY=\"${{ secrets.STRIPE_SECRET_KEY }}\" \\\n            --build-arg STRIPE_WEBHOOK_SECRET=\"${{ secrets.STRIPE_WEBHOOK_SECRET }}\" \\\n            --build-arg VITE_CMS_CLIENT=\"${{ vars.VITE_CMS_CLIENT }}\" \\\n            --build-arg VITE_KEYSTATIC_CONTENT_PATH=\"${{ vars.VITE_KEYSTATIC_CONTENT_PATH }}\" \\\n            --build-arg VITE_LOCALES_PATH=\"${{ vars.VITE_LOCALES_PATH }}\" \\\n            --build-arg MAILER_PROVIDER=\"${{ secrets.MAILER_PROVIDER }}\" \\\n            --build-arg EMAIL_SENDER=\"${{ secrets.EMAIL_SENDER }}\" \\\n            --build-arg EMAIL_HOST=\"${{ secrets.EMAIL_HOST }}\" \\\n            --build-arg EMAIL_PORT=\"${{ secrets.EMAIL_PORT }}\" \\\n            --build-arg EMAIL_USER=\"${{ secrets.EMAIL_USER }}\" \\\n            --build-arg EMAIL_PASSWORD=\"${{ secrets.EMAIL_PASSWORD }}\" \\\n            --build-arg EMAIL_TLS=\"${{ secrets.EMAIL_TLS }}\" \\\n            --build-arg VITE_TEAM_NAVIGATION_STYLE=\"${{ vars.VITE_TEAM_NAVIGATION_STYLE }}\" \\\n            --build-arg VITE_USER_NAVIGATION_STYLE=\"${{ vars.VITE_USER_NAVIGATION_STYLE }}\" \\\n            --build-arg VITE_THEME_COLOR=\"${{ vars.VITE_THEME_COLOR }}\" \\\n            --build-arg VITE_THEME_COLOR_DARK=\"${{ vars.VITE_THEME_COLOR_DARK }}\" \\\n            --build-arg SIGN_IN_PATH=\"${{ vars.SIGN_IN_PATH }}\" \\\n            --build-arg SIGN_UP_PATH=\"${{ vars.SIGN_UP_PATH }}\" \\\n            --build-arg TEAM_ACCOUNTS_HOME_PATH=\"${{ vars.TEAM_ACCOUNTS_HOME_PATH }}\" \\\n            --build-arg INVITATION_PAGE_PATH=\"${{ vars.INVITATION_PAGE_PATH }}\" \\\n            --build-arg VITE_DISPLAY_TERMS_AND_CONDITIONS_CHECKBOX=\"${{ vars.VITE_DISPLAY_TERMS_AND_CONDITIONS_CHECKBOX }}\"\n        env:\n          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Navigation Menu with TypeScript and Heroicons\nDESCRIPTION: Example of the NAVIGATION_CONFIG object that defines the top header navigation items, including icon components from Heroicons library.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/functions_initializing_project_introduction_85.md#2025-04-22_snippet_26\n\nLANGUAGE: ts\nCODE:\n```\nimport { Squares2X2Icon, Cog8ToothIcon } from \"@heroicons/react/24/outline\";\n\nconst NAVIGATION_CONFIG = {\n  items: [\n    {\n      label: 'common:dashboardTabLabel',\n      path: configuration.paths.appHome,\n      Icon: ({ className }: { className: string }) => {\n        return <Squares2X2Icon className={className} />;\n      },\n    },\n    {\n      label: 'common:settingsTabLabel',\n      path: '/settings',\n      Icon: ({ className }: { className: string }) => {\n        return <Cog8ToothIcon className={className} />;\n      },\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Fetching and Using CSRF Token in Client-Side Requests (TSX)\nDESCRIPTION: Demonstrates how to obtain the CSRF token using the `useGetCsrfToken` hook from `@kit/shared/hooks` within a React client component (`'use client'`). The token is then included in the `X-CSRF-Token` header of a POST request made using `fetch` to protect against CSRF attacks.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/csrf_protection_react_query_route_handlers_43.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\nfunction MyComponent() {\n  const csrfToken = useGetCsrfToken();\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    const response = await fetch('/my-endpoint', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'X-CSRF-Token': csrfToken,\n      },\n      body: JSON.stringify({ message: 'Hello, world!' }),\n    });\n  };\n\n  // your component code\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Waitlist Signup Form in Next.js Component\nDESCRIPTION: React component code to replace the existing sign-up form with the waitlist form. It imports the WaitlistSignupForm from the installed plugin and handles invite tokens.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/waitlist_plugin_plugins_drizzle_supabase_52.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { WaitlistSignupForm } from '@kit/waitlist/client';\n\nfunction SignUpPage({ searchParams }: Props) {\n  const inviteToken = searchParams.invite_token;\n\n  const signInPath =\n    pathsConfig.auth.signIn +\n    (inviteToken ? `?invite_token=${inviteToken}` : '');\n\n  return (\n    <>\n      <Heading level={4}>\n        <Trans i18nKey={'auth:signUpHeading'} />\n      </Heading>\n\n      <WaitlistSignupForm inviteToken={inviteToken} />\n\n      <div className={'justify-centers flex'}>\n        <Button asChild variant={'link'} size={'sm'}>\n          <Link href={signInPath}>\n            <Trans i18nKey={'auth:alreadyHaveAnAccount'} />\n          </Link>\n        </Button>\n      </div>\n    </>\n  );\n}\n\nexport default withI18n(SignUpPage);\n```\n\n----------------------------------------\n\nTITLE: Rendering HomeAccountsList Component in User Home Page (TSX)\nDESCRIPTION: This TSX snippet demonstrates rendering the previously imported `HomeAccountsList` component within the `PageBody` component on the user's home page (`apps/web/app/home/(user)/page.tsx`). This integrates the account listing functionality into the page's main content area, suitable for B2B SaaS applications where users might belong to multiple teams.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/realtime_updates_server_components_7.md#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n<PageBody>\n  <HomeAccountsList />\n</PageBody>\n```\n\n----------------------------------------\n\nTITLE: Project Permission Management Functions\nDESCRIPTION: Complex functions for managing project permissions, including role updates and permission checks based on user roles.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/projects_data_model_53.md#2025-04-22_snippet_29\n\nLANGUAGE: plpgsql\nCODE:\n```\ncreate or replace function public.user_has_project_permission(\n  p_user_auth_id uuid,\n  p_project_id uuid,\n  p_action public.project_action\n)\nreturns boolean\nset search_path = ''\nas $$\ndeclare\n  v_role public.project_role;\nbegin\n  select role into v_role\n  from public.project_members\n  where project_id = p_project_id and user_id = p_user_auth_id;\n\n  if v_role is null then\n    return false;\n  end if;\n\n  case v_role\n    when 'owner' then\n      return true;\n    when 'admin' then\n      return p_action != 'delete_project';\n    when 'member' then\n      return p_action in ('view_project');\n    else\n      raise exception 'user must be a member of the project to perform this action';\n  end case;\nend;\n$$ language plpgsql;\n```\n\n----------------------------------------\n\nTITLE: Get Active Subscription SQL Function\nDESCRIPTION: PostgreSQL function that retrieves an organization's active subscription details including period dates, price ID and interval.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/theming_how_to_version_0_6_0_81.md#2025-04-22_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace function get_active_subscription(org_id bigint)\nreturns table (\n  period_starts_at timestamptz,\n  period_ends_at timestamptz,\n  price_id text,\n  \"interval\" text\n) as $$\nbegin\n    return query select subscriptions.period_starts_at, subscriptions.period_ends_at, subscriptions.price_id, subscriptions.\"interval\" from public.subscriptions\n    join organizations_subscriptions on subscriptions.id = organizations_subscriptions.subscription_id\n    where organizations_subscriptions.organization_id = org_id and (subscriptions.status = 'active' or subscriptions.status = 'trialing');\nend;\n$$ language plpgsql;\n```\n\n----------------------------------------\n\nTITLE: Configuring Resend Mailer in Environment Variables\nDESCRIPTION: Environment variable configuration to use Resend as the email service provider instead of nodemailer, which isn't compatible with the Edge runtime.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/development_authentication_emails_email_configuration_94.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nMAILER_PROVIDER=resend\n```\n\n----------------------------------------\n\nTITLE: Creating a NewTaskDialog Component with React and TypeScript\nDESCRIPTION: This code creates a NewTaskDialog component that uses the Dialog component from @kit/ui/dialog to display a task form in a modal window. It handles state transitions and form submission with server actions.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/marketing_pages_migrations_permissions_and_roles_45.md#2025-04-22_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\nimport { useState, useTransition } from 'react';\n\nimport { PlusCircle } from 'lucide-react';\n\nimport { Button } from '@kit/ui/button';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from '@kit/ui/dialog';\nimport { Trans } from '@kit/ui/trans';\n\nimport { TaskForm } from '../_components/task-form';\nimport { addTaskAction } from '../_lib/server/server-actions';\n\nexport function NewTaskDialog() {\n  const [pending, startTransition] = useTransition();\n  const [isOpen, setIsOpen] = useState(false);\n\n  return (\n    <Dialog open={isOpen} onOpenChange={setIsOpen}>\n      <DialogTrigger asChild>\n        <Button>\n          <PlusCircle className={'mr-1 h-4'} />\n          <span>\n            <Trans i18nKey={'tasks:addNewTask'} />\n          </span>\n        </Button>\n      </DialogTrigger>\n\n      <DialogContent>\n        <DialogHeader>\n          <DialogTitle>\n            <Trans i18nKey={'tasks:addNewTask'} />\n          </DialogTitle>\n\n          <DialogDescription>\n            <Trans i18nKey={'tasks:addNewTaskDescription'} />\n          </DialogDescription>\n        </DialogHeader>\n\n        <TaskForm\n          SubmitButton={() => (\n            <Button>\n              {pending ? (\n                <Trans i18nKey={'tasks:addingTask'} />\n              ) : (\n                <Trans i18nKey={'tasks:addTask'} />\n              )}\n            </Button>\n          )}\n          onSubmit={(data) => {\n            startTransition(async () => {\n              await addTaskAction(data);\n              setIsOpen(false);\n            });\n          }}\n        />\n      </DialogContent>\n    </Dialog>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Per-Seat Billing Schema in TypeScript\nDESCRIPTION: Demonstrates how to configure per-seat billing with tiered pricing. Includes support for free tiers and different pricing levels based on seat count.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/user_workspace_api_api_billing_api_37.md#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nexport default createBillingSchema({\n  provider,\n  products: [\n    {\n      id: 'starter',\n      name: 'Starter',\n      description: 'The perfect plan to get started',\n      currency: 'USD',\n      badge: `Value`,\n      plans: [\n        {\n          name: 'Starter Monthly',\n          id: 'starter-monthly',\n          trialDays: 7,\n          paymentType: 'recurring',\n          interval: 'month',\n          lineItems: [\n            {\n              id: 'price_1NNwYHI1i3VnbZTqI2UzaHIe',\n              name: 'Addon 2',\n              cost: 0,\n              type: 'per_seat',\n              tiers: [\n                {\n                    upTo: 3,\n                    cost: 0,\n                },\n                {\n                    upTo: 5,\n                    cost: 7.99,\n                },\n                {\n                    upTo: 'unlimited',\n                    cost: 5.99,\n                }\n              ]\n            },\n          ],\n        }\n      ],\n    }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Database Webhook Handler for Waitlist in Next.js\nDESCRIPTION: Next.js API route handler for processing database webhooks. It listens for updates to the waitlist table and handles approved user changes, including sending emails and managing invite tokens.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/waitlist_plugin_plugins_drizzle_supabase_52.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getDatabaseWebhookHandlerService } from '@kit/database-webhooks';\nimport { enhanceRouteHandler } from '@kit/next/routes';\n\nimport appConfig from '~/config/app.config';\nimport pathsConfig from '~/config/paths.config';\n\nexport const POST = enhanceRouteHandler(\n  async ({ request }) => {\n    const service = getDatabaseWebhookHandlerService();\n\n    try {\n      await service.handleWebhook(request, {\n        async handleEvent(payload) {\n          if (payload.table === 'waitlist' && payload.record.approved) {\n            const { handleApprovedUserChange } = await import(\n              '@kit/waitlist/server'\n            );\n\n            const inviteToken = payload.record.invite_token;\n            const redirectToUrl = new URL(pathsConfig.auth.passwordUpdate, appConfig.url);\n\n            if (inviteToken) {\n              const next = encodeURI(pathsConfig.app.joinTeam + '?invite_token=' + inviteToken);\n              redirectToUrl.searchParams.append('callback', next);\n            }\n\n            const redirectTo = redirectToUrl.toString();\n\n            await handleApprovedUserChange({\n              email: payload.record.email,\n              redirectTo,\n            });\n          }\n        },\n      });\n\n      return new Response(null, { status: 200 });\n    } catch {\n      return new Response(null, { status: 500 });\n    }\n  },\n  {\n    auth: false,\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Enhancing Stripe Webhook Handler for Onboarding Completion\nDESCRIPTION: Code snippet that extends the Stripe webhook handler to detect and process onboarding-related checkout events. It identifies checkout sessions initiated from the onboarding process via metadata and triggers the completeOnboarding function.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/waitlist_plugin_plugins_drizzle_supabase_52.md#2025-04-22_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n// ...\n\nconst subscriptionData =\n  await stripe.subscriptions.retrieve(subscriptionId);\n\nconst metadata = subscriptionData.metadata as {\n  source: string;\n  userId: string;\n} | undefined;\n\n// if the checkout comes from onboarding\n// we need to complete the onboarding process\nif (metadata?.source === 'onboarding') {\n  const userId = metadata.userId;\n\n  await completeOnboarding(userId);\n}\n\nreturn onCheckoutCompletedCallback(payload);\n```\n\n----------------------------------------\n\nTITLE: Organization ID Parsing in Remix Loader\nDESCRIPTION: Example of using parseOrganizationIdCookie function in a Remix loader to get the organization ID from a request\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/updating_sidebar_menu_change_auth_strategy_setup_oauth_79.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LoaderFunctionArgs } from '@remix-run/node';\nimport getSupabaseServerClient from '~/core/supabase/server-client';\nimport requireSession from '~/lib/user/require-session.server';\n\nimport {\n  parseOrganizationIdCookie,\n} from '~/lib/server/cookies/organization.cookie';\n\nasync function getOrganizationId(request: Request) {\n  const client = getSupabaseServerClient(request);\n  const session = await requireSession(client);\n\n  return parseOrganizationIdCookie(request, session.user.id);\n}\n\nexport async function loader(args: LoaderFunctionArgs) {\n  const organizationId = await getOrganizationId(args.request);\n\n  return json({ organizationId });\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Billing Webhook Handler\nDESCRIPTION: Server-side TypeScript implementation for processing billing webhooks and updating entitlements accordingly.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_billing_checkout_addons_subscription_entitlements_54.md#2025-04-22_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n'use server';\nimport { enhanceRouteHandler } from '@kit/next/routes';\nimport { getSupabaseServerAdminClient } from '@kit/supabase/server-admin-client';\nimport { createEntitlementsService } from '~/lib/server/entitlements.service';\nimport { getLogger } from '@kit/shared/logger';\nimport { billingConfig } from '~/config/billing';\n\nexport const POST = enhanceRouteHandler(\n  async ({ request }) => {\n    const provider = billingConfig.provider;\n    const logger = await getLogger();\n    const ctx = { name: 'billing.webhook', provider };\n\n    logger.info(ctx, 'Received billing webhook. Processing...');\n\n    try {\n      await handleInvoicePaidEvent(request, ctx);\n      logger.info(ctx, 'Successfully processed billing webhook');\n      return new Response('OK', { status: 200 });\n    } catch (error) {\n      logger.error({ ...ctx, error }, 'Failed to process billing webhook');\n      return new Response('Failed to process billing webhook', { status: 500 });\n    }\n  },\n  { auth: false }\n);\n\nasync function handleInvoicePaidEvent(request: Request, ctx: Record<string, unknown>) {\n  const accountId = 'extracted-account-id';\n\n  const entitlementsService = createEntitlementsService(getSupabaseServerAdminClient(), accountId);\n  const entitlement = await entitlementsService.getEntitlement('api_calls');\n\n  if (!entitlement) {\n    ctx['error'] = `No entitlement found for \"api_calls\"`;\n    throw new Error(ctx['error']);\n  }\n\n  const count = entitlement?.entitlement?.limit ?? 0;\n  if (!count) {\n    ctx['error'] = 'No limit found for \"api_calls\" entitlement';\n    throw new Error(ctx['error']);\n  }\n\n  await entitlementsService.updateFeatureUsage('api_calls', { count });\n  return;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Account API in a Server Action using TSX\nDESCRIPTION: Shows how to initialize the Makerkit Account API within a Next.js Server Action. It uses the 'use server' directive and imports `createAccountsApi` and `getSupabaseServerClient` to create an API instance capable of interacting with Supabase from the server action context.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/custom_analytics_provider_google_analytics_provider_posthog_analytics_provider_36.md#2025-04-22_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\n'use server';\n\nimport { createAccountsApi } from '@kit/accounts/api';\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\n\nexport async function myServerAction() {\n  const client = getSupabaseServerClient();\n  const api = createAccountsApi(client);\n  \n  // use api\n}\n```\n\n----------------------------------------\n\nTITLE: Submitting Server Actions With Captcha Token from Client Component - TypeScript/TSX\nDESCRIPTION: Details a React function component workflow in which a captcha token is retrieved and included in a parameter object when calling a server action. Ensures the captcha token is sent with request data for enhanced security. Assumes 'myServerAction' expects the token and that type-checking enforces its presence according to the Zod schema.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/csrf_protection_react_query_route_handlers_43.md#2025-04-22_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCaptchaToken } from '@kit/auth/captcha/client';\n\nfunction Component() {\n  const captchaToken = useCaptchaToken();\n  \n  const onSubmit = async (params: {\n    email: string;\n    password: string;\n  }) => {\n    const response = await myServerAction({\n      ...params,\n      captchaToken,\n    });\n    \n    // ... your code here\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Active Subscription Status with useIsSubscriptionActive Hook (TSX)\nDESCRIPTION: Implementation of the `useIsSubscriptionActive` custom hook. It uses `useCurrentOrganization` to get the organization's subscription status and returns `true` if the status is either 'active' or 'trialing', indicating a paid or trial subscription.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/functions_initializing_project_introduction_85.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { Stripe } from 'stripe';\\nimport { useCurrentOrganization } from '~/lib/organizations/hooks/use-current-organization';\\n\\nconst ACTIVE_STATUSES: Stripe.Subscription.Status[] = ['active', 'trialing'];\\n\\n/**\\n * @name useIsSubscriptionActive\\n * @description Returns whether the organization is on any paid\\n * subscription, regardless of plan.\\n */\\nfunction useIsSubscriptionActive() {\\n  const organization = useCurrentOrganization();\\n  const status = organization?.subscription?.status;\\n\\n  if (!status) {\\n    return false;\\n  }\\n\\n  return ACTIVE_STATUSES.includes(status);\\n}\\n\\nexport default useIsSubscriptionActive;\n```\n\n----------------------------------------\n\nTITLE: Adding Additional Navigation Link in TypeScript\nDESCRIPTION: Demonstrates how to add a new link to the navigation menu in the NAVIGATION_CONFIG object. The snippet adds a 'tasks' tab with an icon using Arrow function returning JSX syntax. It relies on the same icon component, Squares2X2Icon, as previously used. This addition aims to dynamically update the navigation menu without altering the main component structure.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/deploying_production_development_getting_started_environment_variables_13.md#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n{\n  label: 'common:tasksTabLabel',\n  path: '/tasks',\n  Icon: ({ className }: { className: string }) => {\n    return <Squares2X2Icon className={className} />;\n  },\n},\n```\n\n----------------------------------------\n\nTITLE: Retrieving CSRF Token with Custom Hook\nDESCRIPTION: Demonstrates how to retrieve a CSRF token using the useCsrfToken hook. This token should be included in direct fetch requests to protect against CSRF attacks.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/organization_sdk_organization_subscription_sdk_sdk_25.md#2025-04-22_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nconst csrfToken = useCsrfToken();\n\nconsole.log(csrfToken) // token\n```\n\n----------------------------------------\n\nTITLE: Fetching Multiple Content Items from CMS\nDESCRIPTION: Shows how to fetch multiple content items from a CMS collection with pagination and filtering options. The function returns both items and total count.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/cms_api_cms_creating_your_own_cms_client_42.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// import the createCmsClient function\nimport { createCmsClient } from '@kit/cms';\n\n// create a client\nconst client = await createCmsClient();\n\n// Fetch content items\nconst { items, count } = await client.getContentItems({\n  collection: 'posts',\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Team Account Subscription\nDESCRIPTION: Code showing how to retrieve subscription data for a team account using the getSubscription method. Requires the account ID as a parameter.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/custom_analytics_provider_google_analytics_provider_posthog_analytics_provider_36.md#2025-04-22_snippet_39\n\nLANGUAGE: tsx\nCODE:\n```\nconst api = createTeamAccountsApi(client);\nconst subscription = await api.getSubscription('account-id');\n```\n\n----------------------------------------\n\nTITLE: Using the Create Task Hook in a React Component\nDESCRIPTION: Demonstrates how to use the useCreateTask hook within a React component. The component handles form submission and calls the hook to create a new task in Firestore.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/reading_document_reading_documents_list_creating_document_8.md#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCallback } from \"react\";\n\nconst CreateTaskForm = () => {\n  const createTask = useCreateTask();\n\n  // ... other code\n\n  const onSubmit = useCallback(async (task: {\n    title: string;\n    description: string;\n    completed: boolean;\n  }) => {\n    await createTask(task);\n  }, [createTask]);\n\n  // ... other code\n};\n```\n\n----------------------------------------\n\nTITLE: Creating RLS Policy for Restricting Task Access in Supabase\nDESCRIPTION: A SQL policy that restricts access to tasks based on user authentication. This policy ensures users can only view tasks that belong to them.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/theming_how_to_version_0_6_0_81.md#2025-04-22_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy \"Restrict access to user tasks to their own tasks\"\n  on tasks\n  for select\n  to authenticated\n  using (user_id = auth.uid());\n```\n\n----------------------------------------\n\nTITLE: Enabling Terms and Conditions Checkbox in Next.js\nDESCRIPTION: This bash snippet demonstrates how to set an environment variable to display a terms and conditions checkbox during sign-up in a Next.js application.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stepper_components_application_configuration_41.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nNEXT_PUBLIC_DISPLAY_TERMS_AND_CONDITIONS_CHECKBOX=true\n```\n\n----------------------------------------\n\nTITLE: Custom Hook for Task Insertion with SWR Mutation\nDESCRIPTION: Creates a custom React hook using SWR mutation with automatic CSRF token handling through useApiRequest hook.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/validating_api_input_zod_development_clone_repository_31.md#2025-04-22_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nimport useMutation from 'swr/mutation';\nimport useApiRequest from '~/core/hooks/use-api';\n\ninterface Task {\n  name: string;\n}\n\nfunction useInsertTask() {\n  const fetcher = useApiRequest();\n  const path = '/api/task';\n\n  return useMutation(\n    path, async (_, data: { arg: Task }) => {\n      return fetcher({\n        path,\n        body: data.arg,\n        method: 'POST'\n      });\n    }\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring One-Off Payments Schema in TypeScript\nDESCRIPTION: Shows how to set up one-time payment plans with flat-rate pricing. Includes configuration for product details and individual line items.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/user_workspace_api_api_billing_api_37.md#2025-04-22_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nexport default createBillingSchema({\n  provider,\n  products: [\n    {\n      id: 'starter',\n      name: 'Starter',\n      description: 'The perfect plan to get started',\n      currency: 'USD',\n      badge: `Value`,\n      plans: [\n        {\n          name: 'Starter Monthly',\n          id: 'starter-monthly',\n          paymentType: 'one-time',\n          lineItems: [\n            {\n              id: 'price_1NNwYHI1i3VnbZTqI2UzaHIe',\n              name: 'Addon 2',\n              cost: 9.99,\n              type: 'flat',\n            },\n          ],\n        }\n      ],\n    }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Tasks Table Component Implementation\nDESCRIPTION: Client component for displaying tasks in a table format with pagination support. Uses DataTable component with custom routing.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/running_project_supabase_data_fetching_supabase_data_writing_27.md#2025-04-22_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nfunction TasksTable(\n  props: React.PropsWithChildren<{\n    pageIndex: number;\n    pageCount: number;\n    tasks: Task[];\n  }>,\n) {\n  const router = useRouter();\n  const pathname = usePathname();\n\n  return (\n    <DataTable\n      onPaginationChange={({ pageIndex }) => {\n        router.push(`${pathname}?page=${pageIndex + 1}`);\n      }}\n      pageIndex={props.pageIndex}\n      pageCount={props.pageCount}\n      data={props.tasks}\n      columns={TABLE_COLUMNS}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Verify Git Username for Makerkit Access\nDESCRIPTION: Ensures your local Git username matches the one registered with Makerkit's Github organization. This is necessary to maintain proper access and functionality when cloning and working with the repository.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/cloudflare_production_environment_variables_supabase_47.md#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ngit config user.username\n```\n\n----------------------------------------\n\nTITLE: Creating CMS Client in TypeScript/React\nDESCRIPTION: Demonstrates how to create a CMS client using the createCmsClient function. The client can be configured to use different CMS backends through environment variables.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/cms_api_cms_creating_your_own_cms_client_42.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createCmsClient } from '@kit/cms';\n\nconst client = await createCmsClient();\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Hook for API GET Requests using SWR\nDESCRIPTION: This TypeScript snippet defines the `useFetchOrganizationMembersMetadata` custom hook for fetching data via GET requests. It uses `useSWR` for data fetching state management and caching, targeting a dynamic endpoint constructed by `getFetchMembersPath`. The actual API call is performed using the `useApiRequest` helper hook configured for the 'GET' method.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/ci_tests_running_tests_testing_limitations_12.md#2025-04-22_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { User } from 'firebase/auth';\nimport useSWR from 'swr';\n\nimport { useApiRequest } from '~/core/hooks/use-api';\n\n/**\n * @name useFetchOrganizationMembersMetadata\n * @param organizationId\n */\nexport function useFetchOrganizationMembersMetadata(organizationId: string) {\n  const endpoint = getFetchMembersPath(organizationId);\n  const fetcher = useApiRequest<User[]>();\n\n  return useSWR(endpoint, (path) => {\n    return fetcher({ path, method: 'GET' });\n  });\n}\n\nfunction getFetchMembersPath(organizationId: string) {\n  return `/api/organizations/${organizationId}/members`;\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Stripe Plans Configuration in Next.js SaaS App\nDESCRIPTION: Example configuration for defining Stripe products and plans in a Next.js SaaS application, which is used to generate a pricing table with various subscription tiers.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/user_reading_record_creating_record_20.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nstripe: {\n  products: [\n    {\n      name: 'Basic',\n      description: 'Description of your Basic plan',\n      badge: `Up to 20 users`,\n      features: [\n        'Basic Reporting',\n        'Up to 20 users',\n        '1GB for each user',\n        'Chat Support',\n      ],\n      plans: [\n        {\n          name: 'Monthly',\n          price: '$9',\n          stripePriceId: '<price_id>',\n          trialPeriodDays: 7,\n        },\n        {\n          name: 'Yearly',\n          price: '$90',\n          stripePriceId: '<price_id>',\n          trialPeriodDays: 7,\n        },\n      ],\n    },\n    {\n      name: 'Pro',\n      badge: `Most Popular`,\n      recommended: true,\n      description: 'Description of your Pro plan',\n      features: [\n        'Advanced Reporting',\n        'Up to 50 users',\n        '5GB for each user',\n        'Chat and Phone Support',\n      ],\n      plans: [\n        {\n          name: 'Monthly',\n          price: '$29',\n          stripePriceId: 'pro-plan-mth',\n          trialPeriodDays: 7,\n        },\n        {\n          name: 'Yearly',\n          price: '$200',\n          stripePriceId: 'pro-plan-yr'\n        },\n      ],\n    },\n    {\n      name: 'Premium',\n      description: 'Description of your Premium plan',\n      badge: ``,\n      features: [\n        'Advanced Reporting',\n        'Unlimited users',\n        '50GB for each user',\n        'Account Manager',\n      ],\n      plans: [\n        {\n          name: '',\n          price: 'Contact us',\n          stripePriceId: '',\n          label: `Contact us`,\n          href: `/contact`,\n        },\n      ],\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Setting PostHog Environment Variables\nDESCRIPTION: Defines required environment variables for PostHog configuration in the `.env` file. `VITE_POSTHOG_KEY` is your PostHog project API key, and `VITE_POSTHOG_HOST` is the URL of your PostHog instance.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/google_analytics_provider_posthog_analytics_provider_umami_analytics_provider_88.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nVITE_POSTHOG_KEY=your-project-key\nVITE_POSTHOG_HOST=your-host\n```\n\n----------------------------------------\n\nTITLE: Implementing API Request Hook with SWR in Next.js\nDESCRIPTION: Creates a custom hook for transferring organization ownership using SWR mutation. This pattern allows for easy API integration with automatic request handling and refresh capabilities.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/organization_sdk_organization_subscription_sdk_sdk_25.md#2025-04-22_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport useSWRMutation from 'swr/mutation';\n\nimport configuration from '~/configuration';\nimport useApiRequest from '~/core/hooks/use-api';\nimport useRefresh from '~/core/hooks/use-refresh';\n\ninterface Params {\n  membershipId: number;\n}\n\nconst path = configuration.paths.api.organizations.transferOwnership;\n\nfunction useTransferOrganizationOwnership() {\n  const fetcher = useApiRequest<void, Params>();\n  const refresh = useRefresh();\n  const key = ['organizations', 'transfer-ownership'];\n\n  return useSWRMutation(\n    key,\n    (_, { arg }: { arg: Params }) => {\n      return fetcher({\n        path,\n        method: `PUT`,\n        body: {\n          membershipId: arg.membershipId,\n        },\n      });\n    },\n    {\n      onSuccess: refresh,\n    }\n  );\n}\n\nexport default useTransferOrganizationOwnership;\n```\n\n----------------------------------------\n\nTITLE: Creating Documents with Firebase Admin SDK\nDESCRIPTION: Creates a document in Firestore using the Admin SDK. This function can only be used in server environments such as API routes or getServerSideProps functions, as it requires a service account.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/reading_document_reading_documents_list_creating_document_8.md#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport getRestFirestore from '~/core/firebase/admin/get-rest-firestore';\n\nasync function addTaskFromServer(task: {\n  title: string;\n  description: string;\n  completed: boolean;\n}) {\n  const firestore = getRestFirestore();\n  const tasksCollection = firestore.collection(firestore, `tasks`);\n\n  await tasksCollection.add(task);\n\n  return task;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining and Securing Feature Limits Table in PostgreSQL\nDESCRIPTION: This SQL script sets up a table within a Supabase-managed PostgreSQL database for storing feature limits for various subscription plans. It includes roles and security policies ensuring only authorized users can query the data.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/payments_billing_6.md#2025-04-22_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\n-- public.plans: table for subscription plans\ncreate table if not exists public.plans (\n  variant_id varchar(255) primary key,\n  name varchar(255) not null,\n  max_tickets int not null\n);\n\n-- revoke all permissions from the plans table\nrevoke all on public.plans from public, service_role;\n\n-- grant permissions to the authenticated role\ngrant select on public.plans to authenticated, service_role;\n\n-- RLS\nalter table public.plans enable row level security;\n\n-- SELECT(public.plans)\ncreate policy select_plans\n  on public.plans\n  for select\n  to authenticated\n  using (true);\n```\n\n----------------------------------------\n\nTITLE: Using has_credits Function in Supabase RLS Policy (SQL)\nDESCRIPTION: This SQL snippet shows how to integrate the `has_credits` function into a Supabase Row Level Security (RLS) policy. This example policy (`tasks_write_policy`) allows users to select from the `tasks` table only if they own the task (`auth.uid() === account_id`) AND they have at least 1 credit remaining, checked by calling `public.has_credits`.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/billing_webhooks_credit_based_billing_lemon_squeezy_89.md#2025-04-22_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy tasks_write_policy\n  on public.tasks\n  for select\n  using (\n    (select auth.uid()) === account_id and\n    public.has_credits((select auth.uid()), 1)\n  );\n```\n\n----------------------------------------\n\nTITLE: Setting up Wordpress CMS Client - Bash\nDESCRIPTION: This snippet demonstrates how to configure your project to use Wordpress as the CMS by setting the `CMS_CLIENT` environment variable. Also, defines the `WORDPRESS_API_URL` and starting a local Wordpress instance for development using Docker.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/cms_api_cms_creating_your_own_cms_client_42.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n```\nCMS_CLIENT=wordpress\n```\n```\n\nLANGUAGE: bash\nCODE:\n```\n```\nWORDPRESS_API_URL=http://localhost:8080\n```\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm run start\n```\n\n----------------------------------------\n\nTITLE: Configuring Feature Flags with Environment Variables in TypeScript\nDESCRIPTION: This snippet defines the application's feature flags configuration. It uses environment variables to control various features like theme toggling, account capabilities, billing, and notifications.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stepper_components_application_configuration_41.md#2025-04-22_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\nconst featuresFlagConfig = FeatureFlagsSchema.parse({\n  enableThemeToggle: getBoolean(\n    process.env.NEXT_PUBLIC_ENABLE_THEME_TOGGLE,\n    true,\n  ),\n  enableAccountDeletion: getBoolean(\n    process.env.NEXT_PUBLIC_ENABLE_PERSONAL_ACCOUNT_DELETION,\n    false,\n  ),\n  enableTeamDeletion: getBoolean(\n    process.env.NEXT_PUBLIC_ENABLE_TEAM_ACCOUNTS_DELETION,\n    false,\n  ),\n  enableTeamAccounts: getBoolean(\n    process.env.NEXT_PUBLIC_ENABLE_TEAM_ACCOUNTS,\n    true,\n  ),\n  enableTeamCreation: getBoolean(\n    process.env.NEXT_PUBLIC_ENABLE_TEAM_ACCOUNTS_CREATION,\n    true,\n  ),\n  enablePersonalAccountBilling: getBoolean(\n    process.env.NEXT_PUBLIC_ENABLE_PERSONAL_ACCOUNT_BILLING,\n    false,\n  ),\n  enableTeamAccountBilling: getBoolean(\n    process.env.NEXT_PUBLIC_ENABLE_TEAM_ACCOUNTS_BILLING,\n    false,\n  ),\n  languagePriority: process.env\n    .NEXT_PUBLIC_LANGUAGE_PRIORITY as LanguagePriority,\n  enableNotifications: getBoolean(\n    process.env.NEXT_PUBLIC_ENABLE_NOTIFICATIONS,\n    true,\n  ),\n  realtimeNotifications: getBoolean(\n    process.env.NEXT_PUBLIC_REALTIME_NOTIFICATIONS,\n    false,\n  ),\n  enableVersionUpdater: getBoolean(\n    process.env.NEXT_PUBLIC_ENABLE_VERSION_UPDATER,\n    false,\n  ),\n} satisfies z.infer<typeof FeatureFlagsSchema>);\n\nexport default featuresFlagConfig;\n```\n\n----------------------------------------\n\nTITLE: Implementing Task Item Component with React in TSX\nDESCRIPTION: A comprehensive React component that displays an individual task item with functionality to mark it as done/undone and delete it. It includes toast notifications for user feedback and a confirmation modal for deletions.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/development_getting_started_environment_variables_firestore_data_fetching_74.md#2025-04-22_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCallback, useState } from 'react';\nimport Link from 'next/link';\nimport { TrashIcon } from '@heroicons/react/24/outline';\nimport { toast } from 'sonner';\nimport { formatDistance } from 'date-fns';\n\nimport { Task } from '~/lib/tasks/types/task';\nimport Heading from '~/core/ui/Heading';\nimport IconButton from '~/core/ui/IconButton';\nimport Tooltip from '~/core/ui/Tooltip';\nimport useDeleteTask from '~/lib/tasks/hooks/use-delete-task';\nimport ConfirmDeleteTaskModal from '~/components/tasks/ConfirmDeleteTaskModal';\nimport useUpdateTask from '~/lib/tasks/hooks/use-update-task';\n\nconst TasksListItem: React.FC<{\n  task: WithId<Task>;\n}> = ({ task }) => {\n  const getTimeAgo = useTimeAgo();\n  const deleteTask = useDeleteTask(task.id);\n  const updateTask = useUpdateTask(task.id);\n\n  const [isDeleting, setIsDeleting] = useState(false);\n\n  const onDelete = useCallback(() => {\n    const deleteTaskPromise = deleteTask();\n\n    return toast.promise(deleteTaskPromise, {\n      success: `Task deleted!`,\n      loading: `Deleting task...`,\n      error: `Ops, error! We could not delete task`,\n    });\n  }, [deleteTask]);\n\n  const onDoneChange = useCallback(\n    (done: boolean) => {\n      const promise = updateTask({ done });\n\n      return toast.promise(promise, {\n        success: `Task updated!`,\n        loading: `Updating task...`,\n        error: `Ops, error! We could not update task`,\n      });\n    },\n    [updateTask]\n  );\n\n  return (\n    <>\n      <div\n        className={'rounded border p-4 transition-colors dark:border-black-400'}\n      >\n        <div className={'flex items-center space-x-4'}>\n          <div>\n            <Tooltip content={task.done ? `Mark as not done` : `Mark as done`}>\n              <input\n                className={'Toggle cursor-pointer'}\n                type=\"checkbox\"\n                defaultChecked={task.done}\n                onChange={(e) => {\n                  return onDoneChange(e.currentTarget.checked);\n                }}\n              />\n            </Tooltip>\n          </div>\n\n          <div className={'flex flex-1 flex-col space-y-0.5'}>\n            <Heading type={5}>\n              <Link\n                className={'hover:underline'}\n                href={`/tasks/[id]`}\n                as={`/tasks/${task.id}`}\n                passHref\n              >\n                {task.name}\n              </Link>\n            </Heading>\n\n            <div>\n              <p className={'text-xs text-gray-400 dark:text-gray-500'}>\n                Due {getTimeAgo(new Date(task.dueDate))}\n              </p>\n            </div>\n          </div>\n\n          <div className={'flex justify-end'}>\n            <Tooltip content={`Delete Task`}>\n              <IconButton\n                onClick={(e) => {\n                  e.stopPropagation();\n                  setIsDeleting(true);\n                }}\n              >\n                <TrashIcon className={'h-5 text-red-500'} />\n              </IconButton>\n            </Tooltip>\n          </div>\n        </div>\n      </div>\n\n      <ConfirmDeleteTaskModal\n        isOpen={isDeleting}\n        setIsOpen={setIsDeleting}\n        task={task.name}\n        onConfirm={onDelete}\n      />\n    </>\n  );\n};\n\nexport default TasksListItem;\n\nfunction useTimeAgo() {\n  return useCallback((date: Date) => {\n    return formatDistance(date, new Date(), {\n      addSuffix: true,\n    });\n  }, []);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Locale Translations in JSON\nDESCRIPTION: Provides translation for a newly added navigation label by augmenting the JSON-based localization files. The JSON snippet illustrates adding a key-value pair for translating 'tasksTabLabel' into 'Tasks' in the common.json file. The main prerequisite is a structured localization setup in Next.js applications.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/deploying_production_development_getting_started_environment_variables_13.md#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"tasksTabLabel\": \"Tasks\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Analytics Providers in TypeScript\nDESCRIPTION: Example of configuring multiple analytics providers to dispatch the same events in a Makerkit project.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/analytics_api_custom_analytics_provider_google_analytics_provider_57.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst analytics = createAnalyticsManager({\n  providers: {\n    googleAnalytics: (config) => new GoogleAnalyticsService(config),\n    mixpanel: (config) => new MixpanelService(config),\n    myCustom: (config) => new MyCustomAnalyticsService(config),\n    null: () => NullAnalyticsService,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Opting into Next.js Client Components using 'use client' Directive (TSX)\nDESCRIPTION: This snippet shows the `'use client'` directive placed at the top of a file. This directive tells Next.js to treat the component defined in this file, and any components imported into it, as Client Components, enabling the use of React hooks (like useState, useEffect) and browser-specific APIs. It's essential for adding interactivity.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/realtime_updates_server_components_7.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n// This component is now a Client Component\n```\n\n----------------------------------------\n\nTITLE: Fetching Subscription Data with Account API (TypeScript)\nDESCRIPTION: Shows how to get the subscription data (from `subscriptions` and `subscription_items` tables) for a specific user account ID using the `getSubscription` method of the Account API.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/google_analytics_provider_posthog_analytics_provider_umami_analytics_provider_88.md#2025-04-22_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\nconst api = createAccountsApi(client);\nconst subscription = await api.getSubscription(accountId);\n```\n\n----------------------------------------\n\nTITLE: Example Chatbot Q&A MDX Format\nDESCRIPTION: MDX template for defining custom question and answer pairs for the chatbot\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/subscription_permissions_organizations_lemon_squeezy_23.md#2025-04-22_snippet_21\n\nLANGUAGE: mdx\nCODE:\n```\n---\n\nquestion: \"What is your refund policy?\"\n---\n\n\nWe offer a 30-day money-back guarantee. If you're not happy with our product,\nwe will refund you.\n```\n\n----------------------------------------\n\nTITLE: Building a React Form Component for Task Creation\nDESCRIPTION: Creates a reusable form component using React Hook Form and Zod validation. The component handles form submission, input validation, and displays appropriate feedback messages for users creating or editing tasks.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/marketing_pages_migrations_permissions_and_roles_45.md#2025-04-22_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { useForm } from 'react-hook-form';\nimport { z } from 'zod';\n\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@kit/ui/form';\nimport { Input } from '@kit/ui/input';\nimport { Textarea } from '@kit/ui/textarea';\nimport { Trans } from '@kit/ui/trans';\n\nimport { WriteTaskSchema } from '../_lib/schema/write-task.schema';\n\nexport function TaskForm(props: {\n  task?: z.infer<typeof WriteTaskSchema>;\n  onSubmit: (task: z.infer<typeof WriteTaskSchema>) => void;\n  SubmitButton: React.ComponentType;\n}) {\n  const form = useForm({\n    resolver: zodResolver(WriteTaskSchema),\n    defaultValues: props.task,\n  });\n\n  return (\n    <Form {...form}>\n      <form\n        className={'flex flex-col space-y-4'}\n        onSubmit={form.handleSubmit(props.onSubmit)}\n      >\n        <FormField\n          render={(item) => {\n            return (\n              <FormItem>\n                <FormLabel>\n                  <Trans i18nKey={'tasks:taskTitle'} />\n                </FormLabel>\n\n                <FormControl>\n                  <Input required {...item.field} />\n                </FormControl>\n\n                <FormDescription>\n                  <Trans i18nKey={'tasks:taskTitleDescription'} />\n                </FormDescription>\n\n                <FormMessage />\n              </FormItem>\n            );\n          }}\n          name={'title'}\n        />\n\n        <FormField\n          render={(item) => {\n            return (\n              <FormItem>\n                <FormLabel>\n                  <Trans i18nKey={'tasks:taskDescription'} />\n                </FormLabel>\n\n                <FormControl>\n                  <Textarea {...item.field} />\n                </FormControl>\n\n                <FormDescription>\n                  <Trans i18nKey={'tasks:taskDescriptionDescription'} />\n                </FormDescription>\n\n                <FormMessage />\n              </FormItem>\n            );\n          }}\n          name={'description'}\n        />\n\n        <props.SubmitButton />\n      </form>\n    </Form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Restrictive RLS Policy in PostgreSQL with SQL\nDESCRIPTION: This SQL snippet defines a restrictive RLS policy on the 'public.tickets' table for select operations, applying only to authenticated users if they meet all specified criteria evaluated by the 'has_role_on_account' function. It is intended to enforce stricter access control.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/database_4.md#2025-04-22_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy select_tickets\n  on public.tickets\n  as restrictive\n  for select\n  to authenticated\n  using (\n    public.has_role_on_account(account_id)\n  );\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Mutation Hook in a React Component\nDESCRIPTION: Demonstrates how to use the previously defined `useTransferOrganizationOwnership` custom hook within a React functional component. It destructures the `trigger` function from the hook's return value, which can then be called to initiate the API mutation.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/auth_setup_authentication_blog_16.md#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Component() {\n  const { trigger } = useTransferOrganizationOwnership();\n\n  // use trigger to call the mutation\n}\n```\n\n----------------------------------------\n\nTITLE: Navigating Dashboard Route Structure in Remix App\nDESCRIPTION: Displays the directory structure within the `(dashboard)` route group, specifically under the `home` path. It distinguishes between user-specific routes (`(user)`) and team account routes (`[account]`), illustrating how pathless and dynamic routes organize the internal dashboard.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/faq_functional_walkthrough_introduction_96.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n```\n---\n home\n---\n--- \n (user)\n---\n--- \n [account]\n```\n```\n\n----------------------------------------\n\nTITLE: Billing Webhook Handler in TypeScript\nDESCRIPTION: TypeScript implementation of webhook handler for processing billing events and updating credit quotas.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/user_workspace_api_api_billing_api_37.md#2025-04-22_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nexport const POST = enhanceRouteHandler(\n  async ({ request }) => {\n    const provider = billingConfig.provider;\n    const logger = await getLogger();\n\n    const ctx = {\n      name: 'billing.webhook',\n      provider,\n    };\n\n    logger.info(ctx, `Received billing webhook. Processing...`);\n\n    const supabaseClientProvider = () =>\n      getSupabaseServerAdminClient();\n\n    const service = await getBillingEventHandlerService(\n      supabaseClientProvider,\n      provider,\n      billingConfig,\n    );\n\n    try {\n      await service.handleWebhookEvent(request, {\n        onInvoicePaid: async (data) => {\n          const accountId = data.target_account_id;\n          const lineItems = data.line_items;\n\n          const variantId = lineItems[0]?.variant_id;\n\n          if (!variantId) {\n            logger.error(\n              {\n                accountId,\n              },\n              'Variant ID not found in line items',\n            );\n\n            throw new Error('Variant ID not found in invoice');\n          }\n\n          await updateMessagesCountQuota({\n            variantId,\n            accountId,\n          });\n        },\n      });\n\n      logger.info(ctx, `Successfully processed billing webhook`);\n\n      return new Response('OK', { status: 200 });\n    } catch (error) {\n      logger.error({ ...ctx, error }, `Failed to process billing webhook`);\n\n      return new Response('Failed to process billing webhook', {\n        status: 500,\n      });\n    }\n  },\n  {\n    auth: false,\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Enforcing MFA for Admin Access in Next.js\nDESCRIPTION: TypeScript code snippet to enforce Multi-Factor Authentication (MFA) for admin users by setting the ENFORCE_MFA constant to true.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/translations_updating_latest_version_tutorials_28.md#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nconst ENFORCE_MFA = true;\n```\n\n----------------------------------------\n\nTITLE: Handling Server Action Errors in React Component\nDESCRIPTION: Shows how to implement error handling for server actions using useTransition hook in a client component.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_webhooks_locally_using_lemon_squeezy_server_actions_csrf_33.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\nimport { useTransition } from 'react';\nimport { serverActionWithError } from './actions';\n\nfunction ImperativeServerAction() {\n  const [pending, startTransition] = useTransition();\n\n  return (\n    <button\n      disabled={pending}\n      onClick={() => {\n        startTransition(async () => {\n          try {\n            await serverActionWithError()\n          } catch (e) {\n            alert('error');\n          }\n        });\n      }}\n    >\n      Click Button\n    </button>\n  );\n}\n\nexport default ImperativeServerAction;\n```\n\n----------------------------------------\n\nTITLE: Adding Locale Support in Next.js\nDESCRIPTION: Illustrates the process of adding a new locale by creating a `fr.json` file in `public/locales`. It requires a JSON structure with key-value pairs for translations.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/environment_variables_setup_project_configuration_set_up_emails_9.md#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hello\": \"Bonjour\"\n}\n```\n\n----------------------------------------\n\nTITLE: Encrypting and Decrypting Secrets in Remix Firebase SaaS\nDESCRIPTION: This code snippet demonstrates how to encrypt and decrypt sensitive data, such as API keys, in a Remix Firebase SaaS application. It uses utility functions for encryption and decryption when storing and retrieving data from Firestore.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/develop_firebase_security_rules_emails_encrypting_secrets_71.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { encrypt, decrypt } from '~/core/generic/crypto';\n\n// storing secrets\nfunction storeApiKey(key: string) {\n  const encryptedKey = encrypt(key);\n\n  return storeKeyInFirestore(encryptedKey);\n}\n\n// retrieving secrets\nfunction getApiKey(id: string) {\n  const encryptedKey = await getApiKeyFromFirestore(id);\n\n  return decrypt(encryptedKey);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining API Input Schema with Zod (TypeScript)\nDESCRIPTION: Demonstrates creating a validation schema for API request body data using the Zod library. This schema specifies expected fields (`displayName`, `email`) and their types/formats (`string`, `string().email()`).\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/commands_cors_develop_firebase_security_rules_5.md#2025-04-22_snippet_36\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nfunction getBodySchema() {\n  return z.object({\n    displayName: z.string(),\n    email: z.string().email(),\n  });\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Git Post-Merge Hook File (Bash)\nDESCRIPTION: Creates an empty file named 'post-merge' within the local repository's '.git/hooks' directory. This file will contain the script to be executed automatically after a successful merge, such as pulling updates.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/configuring_supabase_database_webhooks_fly_production_environment_variables_95.md#2025-04-22_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\ntouch .git/hooks/post-merge\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom CMS Client in TypeScript\nDESCRIPTION: Example implementation of a custom CMS client that interacts with a hypothetical HTTP API.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/creating_your_own_cms_client_keystatic_wordpress_62.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CmsClient } from '@kit/cms';\n\nexport class MyCmsClient extends CmsClient {\n  async getContentItems(options) {\n    const response = await fetch('https://my-cms-api.com/content', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(options),\n    });\n\n    const { total, items } = await response.json();\n\n    return { total, items };\n  }\n\n  async getContentItemBySlug({ slug, collection }) {\n    const response = await fetch(\n      `https://my-cms-api.com/content/${collection}/${slug}`,\n    );\n\n    if (response.status === 404) {\n      return undefined;\n    }\n\n    return response.json();\n  }\n\n  async getCategories(options) {\n    const response = await fetch('https://my-cms-api.com/categories', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(options),\n    });\n\n    return response.json();\n  }\n\n  async getCategoryBySlug(slug) {\n    const response = await fetch(`https://my-cms-api.com/categories/${slug}`);\n\n    if (response.status === 404) {\n      return undefined;\n    }\n\n    return response.json();\n  }\n\n  async getTags(options) {\n    const response = await fetch('https://my-cms-api.com/tags', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(options),\n    });\n\n    return response.json();\n  }\n\n  async getTagBySlug(slug) {\n    const response = await fetch(`https://my-cms-api.com/tags/${slug}`);\n\n    if (response.status === 404) {\n      return undefined;\n    }\n\n    return response.json();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating React Components for Ticket Assignee and Priority Selection in TSX\nDESCRIPTION: This code defines two React components: AssigneeSelect and PrioritySelect. These components use React Hook Form and Zod for form handling and validation, and implement server actions to update ticket details in real-time.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/data_fetching_3.md#2025-04-22_snippet_33\n\nLANGUAGE: TSX\nCODE:\n```\nfunction AssigneeSelect(props: {\n  assignee: Tables<'tickets'>['assigned_to'];\n  ticketId: string;\n  accountSlug: string;\n  disabled: boolean;\n}) {\n  const [pending, startTransition] = useTransition();\n\n  const form = useForm({\n    resolver: zodResolver(UpdateTicketAssigneeSchema),\n    defaultValues: {\n      assigneeId: props.assignee!,\n      ticketId: props.ticketId,\n    },\n  });\n\n  return (\n    <Form {...form}>\n      <FormField\n        render={({ field }) => {\n          return (\n            <FormItem>\n              <FormLabel>Assignee</FormLabel>\n\n              <FormControl>\n                <Select\n                  disabled={pending || props.disabled}\n                  value={field.value}\n                  onValueChange={(value) => {\n                    form.setValue(field.name, value, {\n                      shouldValidate: true,\n                    });\n\n                    void form.handleSubmit((value) => {\n                      startTransition(async () => {\n                        await updateTicketAssigneeAction(value);\n                      });\n                    })();\n                  }}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder={'Choose an Assignee'} />\n                  </SelectTrigger>\n\n                  <SelectContent>\n\n                  </SelectContent>\n                </Select>\n              </FormControl>\n\n              <FormDescription>\n                The person responsible for resolving the ticket.\n              </FormDescription>\n            </FormItem>\n          );\n        }}\n        name={'assigneeId'}\n      />\n    </Form>\n  );\n}\n\nfunction PrioritySelect(props: {\n  priority: Tables<'tickets'>['priority'];\n  ticketId: string;\n  disabled: boolean;\n}) {\n  const form = useForm({\n    resolver: zodResolver(UpdateTicketPrioritySchema),\n    defaultValues: {\n      priority: props.priority,\n      ticketId: props.ticketId,\n    },\n  });\n\n  const [pending, startTransition] = useTransition();\n\n  return (\n    <Form {...form}>\n      <FormField\n        render={({ field }) => {\n          return (\n            <FormItem>\n              <FormLabel>Priority</FormLabel>\n\n              <FormControl>\n                <Select\n                  value={form.getValues('priority')}\n                  disabled={pending || props.disabled}\n                  onValueChange={(value) => {\n                    form.setValue(\n                      field.name,\n                      value as Tables<'tickets'>['priority'],\n                      { shouldValidate: true },\n                    );\n\n                    void form.handleSubmit((value) => {\n                      startTransition(async () => {\n                        await updateTicketPriorityAction(value);\n                      });\n                    })();\n                  }}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder={'Choose Priority'} />\n                  </SelectTrigger>\n\n                  <SelectContent>\n                    <SelectItem value={'low'}>Low</SelectItem>\n                    <SelectItem value={'medium'}>Medium</SelectItem>\n                    <SelectItem value={'high'}>High</SelectItem>\n                  </SelectContent>\n                </Select>\n              </FormControl>\n\n              <FormDescription>\n                The priority of the ticket determines how quickly it should be\n                resolved.\n              </FormDescription>\n            </FormItem>\n          );\n        }}\n        name={'priority'}\n      />\n    </Form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Production Environment Variables - dotenv - env\nDESCRIPTION: Provides a template for all environment variables intended for use in the .env.production file, including public Firebase client configuration, AppCheck integration, Google Cloud details, Stripe API keys, and placeholders for sensitive secrets that must be securely injected at runtime (not stored directly). Includes a reminder to replace template parameters such as the URL and to keep actual secrets out of version control by sourcing them from CI/CD or a host like Vercel. Inputs: project credentials; Outputs: makes correct production configuration available to the deployed application.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/introduction_running_the_application_technical_details_6.md#2025-04-22_snippet_3\n\nLANGUAGE: env\nCODE:\n```\nNEXT_PUBLIC_FIREBASE_API_KEY=\\nNEXT_PUBLIC_FIREBASE_PROJECT_ID=\\nNEXT_PUBLIC_FIREBASE_STORAGE_BUCKET=\\nNEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID=\\nNEXT_PUBLIC_FIREBASE_APP_ID=\\nNEXT_PUBLIC_FIREBASE_MEASUREMENT_ID=\\nNEXT_PUBLIC_FIREBASE_AUTH_DOMAIN=<your-website-domain>\\nNEXT_PUBLIC_SITE_URL=\\nNEXT_PUBLIC_APPCHECK_KEY=\\n\\nSERVICE_ACCOUNT_CLIENT_EMAIL=\\nGCLOUD_PROJECT=\\n\\n## SECRET KEYS ARE BEST ADDED TO YOUR CI\\nSERVICE_ACCOUNT_PRIVATE_KEY=\\n\\nNEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=\\nSTRIPE_SECRET_KEY=\\nSTRIPE_WEBHOOK_SECRET=\n```\n\n----------------------------------------\n\nTITLE: Fetching Account Workspace Data\nDESCRIPTION: Shows how to retrieve account workspace data using the getAccountWorkspace method.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/analytics_api_custom_analytics_provider_google_analytics_provider_57.md#2025-04-22_snippet_48\n\nLANGUAGE: tsx\nCODE:\n```\nconst api = createTeamAccountsApi(client);\nconst workspace = await api.getAccountWorkspace('account-slug');\n```\n\n----------------------------------------\n\nTITLE: Permission Check Implementation\nDESCRIPTION: TypeScript function demonstrating how to check user permissions using Supabase RPC method.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/marketing_pages_migrations_permissions_and_roles_45.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nasync function hasPermissionToInsertTask(userId: string, accountId: string) {\n  const { data: hasPermission, error } = await client.rpc('has_permission', {\n    user_id: userId,\n    account_id: accountId,\n    permission: 'tasks.write',\n  });\n\n  if (error || !hasPermission) {\n    throw new Error(`User has no permission to insert task`);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Type Definition Using Supabase Database Types\nDESCRIPTION: Example of how to properly type database entities using Supabase types\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/llms_migration_from_makerkit_v1_navigating_codebase_49.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Tables } from '@kit/supabase/database';\ntype Bookmark = Tables<'bookmarks'>;\n```\n\n----------------------------------------\n\nTITLE: Granular TailwindCSS Path Configuration\nDESCRIPTION: Updated Tailwind CSS configuration with granular paths to improve build performance. This replaces the broader path pattern with specific paths for each package in the monorepo.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/running_project_technical_details_update_nextjs15_50.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n'../../packages/ui/src/**/*.tsx',\n   '../../packages/billing/gateway/src/**/*.tsx',\n   '../../packages/features/auth/src/**/*.tsx',\n   '../../packages/features/notifications/src/**/*.tsx',\n   '../../packages/features/admin/src/**/*.tsx',\n   '../../packages/features/accounts/src/**/*.tsx',\n   '../../packages/features/team-accounts/src/**/*.tsx',\n   '!**/node_modules',\n ],\n```\n\n----------------------------------------\n\nTITLE: Installing Analytics Plugins with Makerkit CLI\nDESCRIPTION: Command-line instructions for installing analytics plugins using the Makerkit CLI and adding them as dependencies to the project.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/custom_analytics_provider_google_analytics_provider_posthog_analytics_provider_36.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx @makerkit/cli@latest plugins install\n```\n\n----------------------------------------\n\nTITLE: Fetching Organization Data from Firestore in Remix\nDESCRIPTION: Custom hook for fetching an organization's data from Firestore using reactfire hooks. It creates a document reference and uses useFirestoreDocData to retrieve the data.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/setting_up_firebase_custom_fetch_fetching_data_firestore_70.md#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useFirestore, useFirestoreDocData } from 'reactfire';\nimport { doc, DocumentReference } from 'firebase/firestore';\nimport { Organization } from '~/lib/organizations/types/organization';\nimport { ORGANIZATIONS_COLLECTION } from '~/lib/firestore-collections';\n\ntype Response = WithId<Organization>;\n\nexport function useFetchOrganization(\n  organizationId: string\n) {\n  const firestore = useFirestore();\n\n  const ref = doc(\n    firestore,\n    ORGANIZATIONS_COLLECTION,\n    organizationId\n  ) as DocumentReference<Response>;\n\n  return useFirestoreDocData(ref, { idField: 'id' });\n}\n\nexport default useFetchOrganization;\n```\n\n----------------------------------------\n\nTITLE: Guarding Next.js Pages Based on User Role with TypeScript\nDESCRIPTION: This TSX example demonstrates how to implement role-based access control for a Next.js page using `getServerSideProps`. It fetches application props, including organization and user data, via `withAppProps`. It then extracts the user's role (`userRole`) from the organization's member data using the user's ID. A helper function `canAccessPage` checks if the role (compared against `MembershipRole.Admin`) grants access. If not authorized, the user is redirected to the dashboard.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/call_api_routes_from_client_csrf_token_guarding_api_routes_7.md#2025-04-22_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nimport { GetServerSidePropsContext } from \"next\";\nimport { withAppProps } from '~/lib/props/with-app-props';\nimport { MembershipRole } from '~/lib/organizations/types/membership-role';\n\nfunction Page() {\n  // render the page\n}\n\nexport async function getServerSideProps(\n  ctx: GetServerSidePropsContext\n) {\n  const appProps = await withAppProps(ctx);\n\n  // get user role within the organization\n  const userRole = appProps.organization.members[appProps.user.id].role;\n\n  if (!canAccessPage(userRole)) {\n    return {\n      redirect: {\n        destination: '/dashboard',\n        permanent: false,\n      },\n    }\n  }\n\n  return appProps;\n}\n\nfunction canAccessPage(role: MembershipRole) {\n  return role >= MembershipRole.Admin;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Server Action for Task Creation\nDESCRIPTION: This snippet demonstrates how to create a Next.js server action that uses the createTask mutation. It includes session validation, CSRF protection, and path revalidation.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/user_reading_record_creating_record_20.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n'use server';\n\nimport { revalidatePath } from 'next/cache';\nimport { redirect } from 'next/navigation';\n\nimport { createTask } from '~/lib/tasks/mutations';\nimport type Task from '~/lib/tasks/types/task';\nimport { withSession } from '~/core/generic/actions-utils';\nimport getSupabaseServerActionClient from '~/core/supabase/action-client';\nimport { parseOrganizationIdCookie } from '~/lib/server/cookies/organization.cookie';\nimport requireSession from '~/lib/user/require-session';\n\ntype CreateTaskParams = {\n  task: Omit<Task, 'id'>;\n  csrfToken: string;\n};\n\nexport const createTaskAction = withSession(\n  async (params: CreateTaskParams) => {\n    const client = getSupabaseServerActionClient();\n    const session = await requireSession(client);\n    const uid = await parseOrganizationIdCookie(session.user.id);\n    const path = `/dashboard/${uid}/tasks`;\n\n    await createTask(client, params.task);\n\n    // revalidate the tasks page\n    revalidatePath(path, 'page');\n\n    // redirect to the tasks page\n    redirect(path);\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Reporting API Request Usage to Lemon Squeezy in Makerkit\nDESCRIPTION: This function reports usage for API requests to Lemon Squeezy. It retrieves the subscription, finds the relevant subscription line item from the database, and then reports the incremental usage to Lemon Squeezy using the billing gateway provider.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/lemon_squeezy_metered_usage_one_off_payments_38.md#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getBillingGatewayProvider } from '@kit/billing-gateway';\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\nimport { createAccountsApi } from '@kit/accounts/api';\n\nasync function reportUsageForApiRequests(\n  accountId: string,\n  quantity: number\n) {\n  // use the correct client: in this case, the server action client\n  const client = getSupabaseServerClient();\n  const api = createAccountsApi(client);\n\n  const subscription = await api.getSubscription(accountId);\n\n  // if the subscription is not active, we don't report usage\n  if (!subscription) {\n    console.error('No active subscription found');\n    return;\n  }\n\n  // now, we need to find the line item the user is being charged for\n  // let's use Supabase for this!\n  // we use the product ID to identify the line item\n  // in your case, you have more choices to identify the line item\n  const {\n    data: subscriptionItem,\n    error\n  } = await client.from('subscription_items')\n    .select('id')\n    .eq('subscription_id', subscription.id)\n    .eq('product_id', 'starter-pro')\n    .eq('type', 'metered')\n    .single();\n\n  // get the billing provider\n  const service = await getBillingGatewayProvider(this.client);\n\n  // now we can report the usage to the billing provider\n  return service.reportUsage({\n    id: subscriptionItem.id,\n    usage: {\n      quantity,\n      action: 'increment'\n    }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Cleaning Project Workspaces and Artifacts (Bash)\nDESCRIPTION: Executes two cleanup scripts via `pnpm run`. `clean:workspaces` likely removes `node_modules` and build outputs from individual Turborepo packages/apps, while `clean` might perform additional top-level cleanup. This prepares the project for a fresh installation.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/code_health_common_commands_conventions_48.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\npnpm run clean:workspaces\npnpm run clean\n```\n\n----------------------------------------\n\nTITLE: Using Remix's useSubmit for API Calls\nDESCRIPTION: Demonstrates how to use Remix's useSubmit hook to call API endpoints. This is the preferred Remix approach for submitting form data or making API calls, as it integrates seamlessly with Remix's routing system.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/user_sdk_sdk_ci_tests_84.md#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nfunction useTransferOrganizationOwnership() {\n  const submit = useSubmit();\n\n  return useCallback((membershipId: number) => {\n    return submit({\n      data: { membershipId: membershipId.toString() },\n      action: `/resources/organizations/members/transfer-ownership`,\n      method: `put`\n    });\n  });\n}\n\nexport default useTransferOrganizationOwnership;\n```\n\n----------------------------------------\n\nTITLE: Setting Up Custom Enterprise Plans in TypeScript\nDESCRIPTION: Demonstrates configuration for custom enterprise plans with contact-based pricing. Includes custom button labels and contact form routing.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/user_workspace_api_api_billing_api_37.md#2025-04-22_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nexport default createBillingSchema({\n  provider,\n  products: [\n    {\n      id: 'starter',\n      name: 'Starter',\n      description: 'The perfect plan to get started',\n      currency: 'USD',\n      badge: `Value`,\n      plans: [\n        {\n          name: 'Enterprise',\n          id: 'enterprise',\n          paymentType: 'recurring',\n          label: 'common:contactUs',\n          href: '/contact',\n          custom: true,\n          interval: 'month',\n          lineItems: [],\n        }\n      ],\n    }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Database Trigger for Waitlist Approval in Supabase\nDESCRIPTION: SQL command to create a database trigger in Supabase. This trigger listens for updates to the waitlist table and sends a webhook when a user is approved.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/waitlist_plugin_plugins_drizzle_supabase_52.md#2025-04-22_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\ncreate trigger \"waitlist_approved_update\" after update\non \"public\".\"waitlist\"\nfor each row\nwhen (new.approved = true)\nexecute function \"supabase_functions\".\"http_request\"(\n  'http://host.docker.internal:3000/api/db/webhook',\n  'POST',\n  '{\"Content-Type\":\"application/json\", \"X-Supabase-Event-Signature\":\"WEBHOOKSECRET\"}',\n  '{}',\n  '5000'\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Internationalized Marketing Page in Next.js\nDESCRIPTION: Example of creating a marketing page with translation support using the withI18n Higher Order Component for server-side translation handling.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_webhooks_locally_using_lemon_squeezy_server_actions_csrf_33.md#2025-04-22_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport { withI18n } from '~/i18n/with-i18n';\n\nfunction AboutPage() {\n  return <div>About page</div>;\n}\n\nexport default withI18n(AboutPage);\n```\n\n----------------------------------------\n\nTITLE: Defining Foreign Key Reference to Accounts (UUID, SQL)\nDESCRIPTION: This revised SQL snippet adapts the schema for Remix SaaS Boilerplate v2 by referencing an 'account_id' column of type 'uuid'. It sets a non-null constraint and points to the 'id' column of the public 'accounts' table with cascading deletes. This change generalizes linking both users and organizations as accounts, enabling multi-tenant and flexible account relations. Requires the 'accounts' table with a UUID primary key and proper indexing.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/faq_functional_walkthrough_introduction_96.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\naccount_id uuid not null references public.accounts(id) on delete cascade,\n\n```\n\n----------------------------------------\n\nTITLE: Creating Feature Usage Table in PostgreSQL\nDESCRIPTION: Implements a table for tracking feature usage per account with RLS enforcement and efficient indexing. Includes policies for access control based on ownership or team roles.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_billing_checkout_addons_subscription_entitlements_54.md#2025-04-22_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE public.feature_usage (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  account_id UUID NOT NULL REFERENCES public.accounts(id) ON DELETE CASCADE,\n  feature VARCHAR(255) NOT NULL,\n  usage JSONB NOT NULL DEFAULT '{}',\n  created_at TIMESTAMPTZ DEFAULT now(),\n  updated_at TIMESTAMPTZ DEFAULT now(),\n  UNIQUE (account_id, feature)\n);\n\nREVOKE ALL ON public.feature_usage FROM public;\nGRANT SELECT ON public.feature_usage TO authenticated;\nALTER TABLE public.feature_usage ENABLE ROW LEVEL SECURITY;\n\nCREATE POLICY select_feature_usage\n    ON public.feature_usage\n    FOR SELECT\n    TO authenticated\n    USING (\n      public.has_role_on_account(account_id) OR (SELECT auth.uid()) = account_id\n    );\n\nCREATE INDEX idx_feature_usage_account_id ON public.feature_usage(account_id, feature);\n```\n\n----------------------------------------\n\nTITLE: Defining a Task Schema with Zod in TypeScript\nDESCRIPTION: Creates a validation schema for task data using Zod. This schema ensures that task titles are non-empty strings and descriptions can be nullable strings before data is written to the database.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/marketing_pages_migrations_permissions_and_roles_45.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { z } from 'zod';\n\nexport const WriteTaskSchema = z.object({\n  title: z.string().min(1),\n  description: z.string().nullable(),\n});\n```\n\n----------------------------------------\n\nTITLE: Using Firestore Data Fetching Hook in Remix Component\nDESCRIPTION: Demonstrates how to use a custom Firestore data fetching hook in a React component, handling loading, error, and success states.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/setting_up_firebase_custom_fetch_fetching_data_firestore_70.md#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useFetchOrganization } from './use-fetch-organization';\n\nfunction OrganizationCard({ organizationId }) {\n  const {\n    data: organization,\n    status,\n  } = useFetchOrganization(organizationId);\n\n  /* data is loading */\n  if (status === `loading`) {\n    return <div>Loading...</div>\n  }\n\n  /* request errored */\n  if (status === `error`) {\n    return <div>Error!</div>\n  }\n\n  /* request successful, we can access \"organization\" */\n  return <div>{organization.name}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Next.js API Routes with withExceptionFilter\nDESCRIPTION: Example API route showing how to implement error handling using withExceptionFilter middleware, which logs errors and reports them to Sentry when encountered.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/deploying_production_development_getting_started_environment_variables_13.md#2025-04-22_snippet_31\n\nLANGUAGE: ts\nCODE:\n```\nimport { NextApiRequest,NextApiResponse } from \"next\";\n\nimport { withAuthedUser } from '~/core/middleware/with-authed-user';\nimport { withPipe } from '~/core/middleware/with-pipe';\nimport { withExceptionFilter } from '~/core/middleware/with-exception-filter';\n\nexport default function helloWorld(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n  const handler = withPipe(\n    withAuthedUser,\n    (req, res) => {\n      res.status(200).json({ message: 'Hello World!' });\n    }\n  );\n\n  return withExceptionFilter(req, res)(handler);\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Membership Roles with Project-Specific Roles\nDESCRIPTION: Shows how to replace the default roles with custom roles specific to your project needs while maintaining the hierarchical permission structure.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/user_roles_validating_api_input_zod_development_18.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nexport enum MembershipRole {\n  Readonly = 0,\n  AccountManager = 1,\n  Owner = 2,\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Handling Server Action in TypeScript\nDESCRIPTION: Demonstrates a server action that throws an error for testing error handling scenarios.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_webhooks_locally_using_lemon_squeezy_server_actions_csrf_33.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n'use server';\n\nexport async function serverActionWithError() {\n  throw new Error(`This is error is in the Server Action`);\n}\n```\n\n----------------------------------------\n\nTITLE: Simplified Authentication Check for API Handlers\nDESCRIPTION: A simplified example of using the withAuthedUser guard to protect an API endpoint. This approach rejects requests from unauthenticated users without additional method checking.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/architecture_api_guards_app_check_2.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function myAPIHandler(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n  await withAuthedUser(req, res);\n\n  // do something with res\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Individual Server Action (Server Component Only)\nDESCRIPTION: This snippet defines a function `myServerAction` marked with the `'use server'` directive at the function level. This makes it a Server Action callable from Server Components, but not directly from Client Components. It performs server-side logic and returns a string.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/data_fetching_3.md#2025-04-22_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\n// ✅ a server action that can be called from a server component\n// ❌ a server action that cannot be called from a client component\nfunction myServerAction() {\n  'use server';\n\n  return 'Hello from the server!';\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Supabase Migration using PNPM and Supabase CLI\nDESCRIPTION: Creates a new SQL migration file within the 'web' application's Supabase migrations directory (`apps/web/supabase/migrations`). Replace `<name>` with a descriptive identifier for the migration. This command utilizes pnpm workspaces (`--filter web`) to target the correct application and the Supabase CLI for migration management.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/adding_turborepo_package_approaching_local_development_database_functions_93.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\npnpm --filter web supabase migration new <name>\n```\n\n----------------------------------------\n\nTITLE: Implementing API Request Validation with Zod\nDESCRIPTION: Example of validating API request data using Zod in a Remix API handler. This implementation parses and validates the request body against a schema and handles validation errors.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/uploading_data_to_storage_writing_data_to_supabase_data_fetching_77.md#2025-04-22_snippet_37\n\nLANGUAGE: tsx\nCODE:\n```\nimport { throwBadRequestException } from `~/core/http-exceptions`;\n\nexport async function POST(request: Request) {\n  try {\n     // we can safely use data with the interface Body\n    const body = await request.json();\n    const bodyResult = await getBodySchema().parseAsync(body);\n    const { displayName, email } = bodyResult.data;\n\n    return sendInvite({ displayName, email });\n  } catch(e) {\n    return throwBadRequestException();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checkbox Component with Label in React using ShadcnUI\nDESCRIPTION: This code demonstrates how to implement a checkbox with an associated label using ShadcnUI. It creates a checkbox with an 'Accept terms and conditions' label, using proper accessibility attributes and styling classes.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/multi_step_forms_page_shadcn_40.md#2025-04-22_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Checkbox } from '@kit/ui/checkbox';\n\nexport default function CheckboxDemo() {\n  return (\n    <div className=\"flex items-center space-x-2\">\n      <Checkbox id=\"terms\" />\n\n      <label\n        htmlFor=\"terms\"\n        className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n      >\n        Accept terms and conditions\n      </label>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Authentication Providers in MakerKit\nDESCRIPTION: Default authentication configuration that enables email/password login and Google OAuth. This is the base configuration that defines available authentication methods.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/ci_tests_running_tests_testing_limitations_12.md#2025-04-22_snippet_30\n\nLANGUAGE: tsx\nCODE:\n```\nauth: {\n  // Enable MFA. You must upgrade to GCP Identity Platform to use it.\n  // see: https://cloud.google.com/identity-platform/docs/product-comparison\n  enableMultiFactorAuth: false,\n  // NB: Enable the providers below in the Firebase Console\n  // in your production project\n  providers: {\n    emailPassword: true,\n    phoneNumber: false,\n    emailLink: false,\n    oAuth: [GoogleAuthProvider],\n  },\n},\n```\n\n----------------------------------------\n\nTITLE: Implementing Typed Supabase Client\nDESCRIPTION: TypeScript example showing how to create a properly typed Supabase client using generated database types.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/organization_sdk_organization_subscription_sdk_sdk_25.md#2025-04-22_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { SupabaseClient } from '@supabase/supabase-js';\nimport type { Database } from '../../database.types';\n\ntype Client = SupabaseClient<Database>;\n```\n\n----------------------------------------\n\nTITLE: Calling Protected API Routes with CSRF and Captcha Tokens (TSX)\nDESCRIPTION: Demonstrates making a `fetch` POST request to an API route that requires both CSRF and Captcha protection. It uses the `useCaptchaToken` and `useCsrfToken` hooks to retrieve the necessary tokens and includes them in the request headers (`x-captcha-token` and `x-csrf-token`). Note: CSRF protection is typically required for mutating routes outside the `/api/*` path.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/csrf_protection_react_query_route_handlers_43.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCaptchaToken } from '@kit/auth/captcha/client';\nimport { useCsrfToken } from '@kit/shared/hooks';\n\nfunction Component() {\n  const captchaToken = useCaptchaToken();\n  const csrfToken = useCsrfToken();\n  \n  const onSubmit = async (params: {\n    email: string;\n    password: string;\n  }) => {\n    const response = await fetch('/my-api-route', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-csrf-token': csrfToken,\n        'x-captcha-token': captchaToken,\n      },\n      body: JSON.stringify(params),\n    });\n    \n    // ... your code here\n  };\n  \n  // ... your code here\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom RLS Policy with User ID Check in PostgreSQL with SQL\nDESCRIPTION: This RLS policy checks if the user's ID matches the 'account_id' and allows reading if true. It represents an example use case where entities could be owned by individual users, not teams.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/database_4.md#2025-04-22_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy select_tickets\n  on public.tickets\n  for select\n  to authenticated\n  using (\n    (select auth.uid()) == account_id\n  );\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Environment Variables for Project Details\nDESCRIPTION: A more complete example of environment variables for customizing project details in a Next.js application. Includes product name, site title, description, URL, and other metadata.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/customization_2.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nNEXT_PUBLIC_PRODUCT_NAME=\"Makerdesk\"\nNEXT_PUBLIC_SITE_TITLE=\"Makerdesk - Customer Support for busy creators\"\nNEXT_PUBLIC_SITE_DESCRIPTION=\"Makerdesk is a customer support platform for creators. Receive and respond to tickets in real-time.\"\nNEXT_PUBLIC_SITE_URL=https://myapp.com\n```\n\n----------------------------------------\n\nTITLE: Get Organization Task Count SQL Function\nDESCRIPTION: PostgreSQL function that counts the total number of tasks belonging to an organization.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/theming_how_to_version_0_6_0_81.md#2025-04-22_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace function get_organization_task_count(org_id bigint)\nreturns int as $$\ndeclare\n    task_count int;\nbegin\n    select count(*)\n        from tasks\n        where organization_id = org_id\n        into task_count;\n\n    return task_count;\nend;\n$$ language plpgsql;\n```\n\n----------------------------------------\n\nTITLE: Manually Tracking Page Views with Makerkit Analytics API in TypeScript\nDESCRIPTION: Illustrates how to manually trigger page view tracking using the `trackPageView` method from `@kit/analytics`. While Makerkit typically handles this automatically on route changes in Next.js, this method can be used for specific cases or non-standard routing.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/custom_analytics_provider_google_analytics_provider_posthog_analytics_provider_36.md#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nvoid analytics.trackPageView('Sign Up');\n```\n\n----------------------------------------\n\nTITLE: Configuring Stripe One-Time Payment Mode\nDESCRIPTION: Code showing how to modify the payment mode from subscription to one-time payment in the createStripeCheckout function.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_configuration_stripe_one_time_payments_stripe_webhooks_82.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst mode: Stripe.Checkout.SessionCreateParams.Mode = 'payment';\n\n// some code here...\n\nreturn stripe.checkout.sessions.create({\n  mode,\n  // more code here...\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Captcha Token on Client-Side (TSX)\nDESCRIPTION: Illustrates how to get the captcha token within a React component using the `useCaptchaToken` hook provided by `@kit/auth/captcha/client`. This token is needed for requests to captcha-protected API routes.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/csrf_protection_react_query_route_handlers_43.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCaptchaToken } from '@kit/auth/captcha/client';\n\nfunction Component() {\n  const captchaToken = useCaptchaToken();\n  \n  // ... your code here\n}\n```\n\n----------------------------------------\n\nTITLE: Restricting Logs Table Access to Super Admins - SQL\nDESCRIPTION: Implements a restrictive select policy on `public.logs` so only users for whom `public.is_super_admin()` returns true may select rows. Applied to the 'authenticated' role and set as restrictive to override less-permissive rules. Prerequisites: existence of `public.logs` table and `public.is_super_admin` function. Inputs are user credentials; output is enforced super admin-only access to select operation. Does not affect insert/update/delete.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/adding_turborepo_package_approaching_local_development_database_functions_44.md#2025-04-22_snippet_26\n\nLANGUAGE: SQL\nCODE:\n```\ncreate policy restrict_logs_super_admins\\n    on public.logs\\n    as restrictive\\n    for select\\n    to authenticated\\n    using (public.is_super_admin());\n```\n\n----------------------------------------\n\nTITLE: Sending OTP Email using Server Action (TypeScript)\nDESCRIPTION: Illustrates using the provided `sendOtpEmailAction` server action to initiate the OTP email sending process, typically from a form submission handler. It requires the user's email (for verification only, the actual email used is the one associated with the user), a purpose, and an expiration time.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/analytics_api_custom_analytics_provider_google_analytics_provider_57.md#2025-04-22_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\nimport { sendOtpEmailAction } from '@kit/otp/server/server-actions';\n\n// In a form submission handler\nconst result = await sendOtpEmailAction({\n  email: userEmail,\n  purpose: 'password-reset',\n  expiresInSeconds: 1800 // 30 minutes\n});\n\nif (result.success) {\n  // OTP was sent successfully\n} else {\n  // Handle error\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Billing Provider Environment Variable\nDESCRIPTION: Environment variable configuration for specifying the payment gateway to use with Makerkit. This example shows how to set Stripe or Lemon Squeezy as the billing provider.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/billing_webhooks_credit_based_billing_lemon_squeezy_89.md#2025-04-22_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nVITE_BILLING_PROVIDER=stripe # or lemon-squeezy\n```\n\n----------------------------------------\n\nTITLE: Setting Super Admin Privileges with SQL in Supabase\nDESCRIPTION: SQL query for the Admin panel to update a user's metadata, assigning them super-admin role privileges. This allows them to access the Admin panel at /admin to manage users and accounts.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/supabase_client_clone_repository_common_commands_56.md#2025-04-22_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE auth.users\nSET raw_app_meta_data = raw_app_meta_data || '{\"role\": \"super-admin\"}'\nWHERE id='<user_id>';\n```\n\n----------------------------------------\n\nTITLE: Adding New Language Locale in Remix Supabase SaaS Kit (JSON)\nDESCRIPTION: This snippet shows how to add a new language locale by creating a JSON file with translations in the public/locales directory.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/branding_environment_variables_setup_project_configuration_80.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hello\": \"Bonjour\"\n}\n```\n\n----------------------------------------\n\nTITLE: Common Commands for Developer Setup\nDESCRIPTION: Lists common commands for tasks such as starting development servers, running commands with Supabase CLI, type-checking, and linting. Requires the project setup with Pnpm and Node.js.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/going_to_production_clone_repository_code_health_66.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npnpm i\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm run dev\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm --filter web supabase db link\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm run supabase:web:start\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm run stripe:listen\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm run supabase:web:reset\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm run supabase:web:typegen\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm run test\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm run clean:workspaces\npnpm run clean\npnpm i\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm run typecheck\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm run lint:fix\n```\n\n----------------------------------------\n\nTITLE: Creating API Hooks with useFetch and React Query\nDESCRIPTION: Implements a custom hook using useFetch and React Query's useMutation to interact with API endpoints. This pattern provides a clean way to call Remix API routes from client components while handling state management.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/user_sdk_sdk_ci_tests_84.md#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport useFetch from '~/core/hooks/use-fetch';\nimport { useMutation } from '@tanstack/react-query';\n\nfunction useTransferOrganizationOwnership() {\n  const transferOrganizationFetch = useFetch<{ membershipId: number }>(\n    `/resources/organizations/members/transfer-ownership`,\n    'PUT'\n  );\n\n  return useMutation((membershipId: number) => {\n    return transferOrganizationFetch({ membershipId });\n  });\n}\n\nexport default useTransferOrganizationOwnership;\n```\n\n----------------------------------------\n\nTITLE: Creating a Role-Based Access Control Middleware\nDESCRIPTION: Implements a custom middleware that guards API routes based on the user's role within an organization. This middleware depends on the 'withAuthedUser' middleware to provide user authentication.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/call_api_routes_from_client_csrf_token_guarding_api_routes_7.md#2025-04-22_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\nimport { NextApiRequest,NextApiResponse } from \"next\";\nimport { MembershipRole } from '~/lib/organizations/types/membership-role';\nimport { getCurrentOrganization } from '~/lib/server/organizations/get-current-organization';\n\nexport function withRole(role: MembershipRole) {\n  return async function(req: NextApiRequest, res: NextApiResponse) {\n    const userId = req.firebaseUser.uid;\n    const currentOrganizationId = req.cookies.organizationId;\n\n    const organization =\n      await getCurrentOrganization(userId, currentOrganizationId);\n\n    const currentUserRole = organization.members[userId].role;\n\n    if (currentUserRole !== role) {\n      return res.status(403).json({\n        error: 'You do not have permission to access this resource.'\n      });\n    }\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Images from Firebase Storage in Remix.js\nDESCRIPTION: This component uses the custom useOrganizationAssets hook to fetch and display images from Firebase Storage. It handles loading and error states.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/setting_up_firebase_custom_fetch_fetching_data_firestore_70.md#2025-04-22_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nfunction MyImages() {\n  const { data, loading, error } = useOrganizationAssets();\n\n  if (loading) {\n    return <p>Loading...</p>;\n  }\n\n  if (error) {\n    return <p>We could not fetch your images :(</p>;\n  }\n\n  return (\n    <div className={'flex flex-col space-y-2'}>\n      {data.map(image => {\n        return <img src={image} key={image} />\n      })}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Data Loader SDK in React Component\nDESCRIPTION: React code demonstrating how to use the useSupabaseQuery hook from the Data Loader SDK to fetch data in a client component.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/ai_text_editor_cookie_banner_feedback_popup_24.md#2025-04-22_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSupabaseQuery } from '@makerkit/data-loader-supabase-nextjs';\nimport useSupabase from '~/core/supabase/use-supabase';\n\nfunction OrganizationsTable() {\n  const client = useSupabase();\n\n  const { data, isLoading, error } = useSupabaseQuery({\n    client,\n    table: 'organizations',\n    select: '*',\n  });\n\n  if (isLoading) {\n    return <span>Loading...</span>;\n  }\n\n  if (error) {\n    return <span>Error: {error.message}</span>;\n  }\n\n  return (\n    <DataTable\n      data={data}\n      columns={[\n        {\n          header: 'ID',\n          accessorKey: 'id',\n        },\n        {\n          header: 'Name',\n          accessorKey: 'name',\n        }\n      ]}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Firebase Project with CLI\nDESCRIPTION: This bash command initializes a Firebase project using the Firebase CLI. It's the starting point for setting up Firebase services in a project.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/third_party_auth_providers_authentication_blog_3.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nfirebase init\n```\n\n----------------------------------------\n\nTITLE: Stopping Supabase from Project Directory\nDESCRIPTION: npm command to gracefully stop the Supabase instance from within your application's root directory. This should be run from the specific project directory where Supabase is running.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/branding_environment_variables_setup_project_configuration_80.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nnpm run supabase:stop\n```\n\n----------------------------------------\n\nTITLE: Updating a Subscription Item in TypeScript\nDESCRIPTION: Zod schema for updating a subscription item, requiring a subscription ID, subscription item ID, and quantity value.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/user_workspace_api_api_billing_api_37.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nsubscriptionId: z.string().min(1),\nsubscriptionItemId: z.string().min(1),\nquantity: z.number().min(1),\n```\n\n----------------------------------------\n\nTITLE: Starting InBucket for Local Email Testing\nDESCRIPTION: Command to run InBucket email testing platform for local development. InBucket allows testing email functionality without setting up a real SMTP service, providing a UI to visualize sent emails at localhost:9000.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/environment_variables_setup_project_configuration_set_up_emails_9.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run inbucket:start\n```\n\n----------------------------------------\n\nTITLE: Changing Default Theme in Configuration\nDESCRIPTION: This snippet shows how to change the default theme in your application by updating the theme property in the configuration file to use Dark theme.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_one_time_payments_stripe_webhooks_payments_35.md#2025-04-22_snippet_14\n\nLANGUAGE: ts\nCODE:\n```\nconst configuration = {\n  theme: Themes.Dark,\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Reporting API Request Usage to Stripe in Makerkit\nDESCRIPTION: This function reports usage for the 'api_requests' metric to Stripe. It retrieves the customer's subscription, checks if it's active, gets the customer ID, and then reports the usage to Stripe using the billing gateway provider.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/lemon_squeezy_metered_usage_one_off_payments_38.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getBillingGatewayProvider } from '@kit/billing-gateway';\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\nimport { createAccountsApi } from '@kit/accounts/api';\n\nasync function reportUsageForApiRequests(\n  accountId: string,\n  quantity: number\n) {\n  // use the correct client: in this case, the server action client\n  const client = getSupabaseServerClient();\n  const api = createAccountsApi(client);\n\n  const subscription = await api.getSubscription(accountId);\n\n  // if the subscription is not active, we don't report usage\n  if (!subscription) {\n    throw new Error('No active subscription found');\n  }\n\n  // get the billing provider\n  const service = await getBillingGatewayProvider(this.client);\n  const customerId = await api.getCustomerId(accountId);\n\n  if (!customerId) {\n    throw new Error(`No customer ID found for account ${accountId}`);\n  }\n\n  // now we can report the usage to the billing provider\n  return service.reportUsage({\n    id: customerId,\n    eventName: 'api_requests',\n    usage: {\n      quantity,\n    }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom oAuth Providers to Firebase Auth Configuration\nDESCRIPTION: This snippet demonstrates how to add custom oAuth providers (Microsoft and Apple) to the Firebase Auth configuration array alongside standard providers.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/app_check_auth_flow_auth_hooks_69.md#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\noAuth: [\n  GoogleAuthProvider,\n  MicrosoftAuthProvider,\n  AppleAuthProvider\n],\n```\n\n----------------------------------------\n\nTITLE: Advanced Next.js API Handler with Middleware Pipeline (TypeScript/Next.js, Makerkit)\nDESCRIPTION: This snippet demonstrates a robust Next.js API route that assembles several middleware functions for method guarding, Firebase Admin initialization, AppCheck, authentication, and error handling via withPipe and withExceptionFilter. The membersHandler function fetches and returns organization members. Depends on Makerkit middleware utilities and assumes NextApiRequest, NextApiResponse, HttpMethod, and fetchOrganizationMembers are defined. Designed for pages/api/members.ts routes.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/custom_fetch_fetching_data_firestore_making_api_requests_4.md#2025-04-22_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\nimport { withAuthedUser } from '~/core/middleware/with-authed-user';\nimport { withPipe } from '~/core/middleware/with-pipe';\nimport { withMethodsGuard } from '~/core/middleware/with-methods-guard';\nimport { withExceptionFilter } from '~/core/middleware/with-exception-filter';\nimport { withAppCheck } from '~/core/middleware/with-app-check';\nimport { withAdmin } from '~/core/middleware/with-admin';\n\nconst SUPPORTED_METHODS: HttpMethod[] = ['GET', 'POST'];\n\nexport default function members(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n  const handler = withPipe(\n    // throw if method is not in SUPPORTED_METHODS array\n    withMethodsGuard(SUPPORTED_METHODS),\n    // initialize Firebase Admin\n    withAdmin,\n    // check request is genuine with Firebase AppCheck\n    withAppCheck,\n    // check user is authenticated\n    withAuthedUser,\n    // execute API logic\n    membersHandler\n  );\n\n  // manage exceptions\n  return withExceptionFilter(req, res)(handler);\n}\n\nasync function membersHandler(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n  const members = await fetchOrganizationMembers();\n\n  res.json(members);\n}\n```\n\n----------------------------------------\n\nTITLE: Zod Schema for Retrieving Checkout Sessions in Billing API\nDESCRIPTION: This simple schema defines the parameter required for retrieving a checkout session, which is just the session ID.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/google_analytics_provider_posthog_analytics_provider_umami_analytics_provider_88.md#2025-04-22_snippet_37\n\nLANGUAGE: tsx\nCODE:\n```\nsessionId: z.string(),\n```\n\n----------------------------------------\n\nTITLE: Configuring Fly.io Deployment for React Router Supabase Turbo (TOML)\nDESCRIPTION: This TOML snippet defines the Fly.io app configuration, including app name, region, build settings, environment variables, service definitions, concurrency limits, and network port routing. Dependencies include having a Dockerfile present for build, and a Node.js app listening on port 3000 in production. Inputs include project-specific environment values, and the outputs are the Fly.io-compatible configuration. Ensure values are adjusted for your deployment environment.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/emails_authentication_checklist_65.md#2025-04-22_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[code block starts here]\napp = \"react-router-turbo-kit\"\nprimary_region = \"lax\"\nkill_signal = \"SIGINT\"\nkill_timeout = 5\n\n[build]\n  dockerfile = \"Dockerfile\"\n\n[env]\n  NODE_ENV = \"production\"\n\n[experimental]\n  allowed_public_ports = []\n  auto_rollback = true\n\n[[services]]\n  http_checks = []\n  internal_port = 3000\n  processes = [\"app\"]\n  protocol = \"tcp\"\n  script_checks = []\n  [services.concurrency]\n    hard_limit = 25\n    soft_limit = 20\n  [[services.ports]]\n    force_https = true\n    handlers = [\"http\"]\n    port = 80\n  [[services.ports]]\n    handlers = [\"tls\", \"http\"]\n    port = 443\n  [[services.tcp_checks]]\n    grace_period = \"1s\"\n    interval = \"15s\"\n    restart_limit = 0\n    timeout = \"2s\"\n[code block ends here]\n```\n\n----------------------------------------\n\nTITLE: Implementing Subscription Mapper Function\nDESCRIPTION: Maps Stripe subscription data to application subscription row format, including custom and default properties.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_configuration_stripe_one_time_payments_stripe_webhooks_82.md#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nfunction subscriptionMapper(\n  subscription: Stripe.Subscription\n): SubscriptionRow {\n  const lineItem = subscription.items.data[0];\n  const price = lineItem.price;\n  const priceId = price.id;\n  const interval = price?.recurring?.interval ?? null;\n  const intervalCount = price?.recurring?.interval_count ?? null;\n\n  const row: Partial<SubscriptionRow> = {\n    // custom props\n    quantity: lineItem.quantity,\n\n    // default props\n    price_id: priceId,\n    currency: subscription.currency,\n    status: subscription.status ?? 'incomplete',\n    interval,\n    interval_count: intervalCount,\n    cancel_at_period_end: subscription.cancel_at_period_end ?? false,\n    created_at: subscription.created ? toISO(subscription.created) : undefined,\n    period_starts_at: subscription.current_period_start\n      ? toISO(subscription.current_period_start)\n      : undefined,\n    period_ends_at: subscription.current_period_end\n      ? toISO(subscription.current_period_end)\n      : undefined,\n  };\n\n  if (subscription.trial_start) {\n    row.trial_starts_at = toISO(subscription.trial_start);\n  }\n\n  if (subscription.trial_end) {\n    row.trial_ends_at = toISO(subscription.trial_end);\n  }\n\n  return row as SubscriptionRow;\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Page Component for Sidebar Layout (JSX)\nDESCRIPTION: This JSX snippet demonstrates the basic usage of the 'Page' component from '@kit/ui/page' configured for a sidebar layout (`style=\"sidebar\"`). It shows how to structure a page using its sub-components: 'PageNavigation' for sidebar content, 'PageHeader' for the title and description area, and 'PageBody' for the main content area. This structure provides a consistent layout commonly used in dashboards.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/bordered_navigation_menu_card_button_cookie_banner_60.md#2025-04-22_snippet_18\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Page, PageNavigation, PageBody, PageHeader } from '@kit/ui/page';\n\nfunction MyPage() {\n  return (\n    <Page style=\"sidebar\">\n      <PageNavigation>\n        {/* Navigation content */}\n      </PageNavigation>\n      <PageHeader title=\"Dashboard\" description=\"Welcome to your dashboard\">\n        {/* Optional header content */}\n      </PageHeader>\n      <PageBody>\n        {/* Main page content */}\n      </PageBody>\n    </Page>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating Unique Owner Index for Projects\nDESCRIPTION: Creates a unique index on the project_id column in project_members table where role is 'owner', ensuring that each project has only one owner.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/projects_data_model_53.md#2025-04-22_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nCREATE UNIQUE INDEX projects_unique_owner ON public.project_members (project_id) WHERE role = 'owner';\n```\n\n----------------------------------------\n\nTITLE: Receiving Server-Side Data in a Next.js Page Component with TypeScript\nDESCRIPTION: This TSX code shows the client-side page component (`Page`) receiving and utilizing data passed from `getServerSideProps`. The component defines a type `Data` and an interface `PageParams` for type safety, specifying the expected structure of the `data` prop. The `data` prop, containing the server-fetched information, is destructured from the component's props and can then be used within the component's render logic.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/call_api_routes_from_client_csrf_token_guarding_api_routes_7.md#2025-04-22_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\ntype Data = {\n  // ...\n}\n\ninterface PageParams {\n  data: Data\n}\n\nfunction Page({ data }: { data: Data }) {\n  // you can use the data here\n}\n\nexport default Page;\n```\n\n----------------------------------------\n\nTITLE: Creating Tasks with React Query Mutations\nDESCRIPTION: React component implementing data mutation with React Query and Supabase. Shows how to create new tasks with form handling and error management.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/team_accounts_only_recipes_adding_translations_55.md#2025-04-22_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nimport { View } from 'react-native';\nimport { useMutation } from '@tanstack/react-query';\nimport { useSupabase } from '@kit/supabase';\nimport { Text, Button, Input } from '@kit/ui';\n\nfunction CreateTaskForm() {\n  const client = useSupabase();\n\n  const mutation = useMutation({\n    mutationFn: async (data) => {\n      const { data, error } = await client\n        .from('tasks')\n        .insert({\n          title: data.title,\n          description: data.description,\n          account_id: data.accountId,\n        })\n        .select('*')\n        .single();\n\n      if (error) {\n        throw error;\n      }\n\n      return data;\n    },\n  });\n\n  const handleSubmit = async (data) => {\n    const { data, error } = await mutation.mutateAsync(data);\n\n    if (error) {\n      console.error(error);\n    }\n  };\n\n  return (\n    <View className=\"flex flex-col gap-4\">\n      <Input type=\"text\" name=\"title\" />\n      <Input type=\"text\" name=\"description\" />\n\n      <Button onPress={handleSubmit}>\n        <Text>Create Task</Text>\n      </Button>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading Locale Namespaces in Next.js Pages (TypeScript)\nDESCRIPTION: Demonstrates how to lazy load locale namespaces (e.g., 'editor') specifically for a Next.js page component (`EditorPage`) using `getServerSideProps` and `withAppProps`. This optimizes translation loading by only fetching necessary files for specific pages. Depends on the Makerkit `withAppProps` utility.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/commands_cors_develop_firebase_security_rules_5.md#2025-04-22_snippet_29\n\nLANGUAGE: tsx\nCODE:\n```\n ```tsx {% title=\"pages/editor.tsx\" %}\nexport default function EditorPage() {\n  return <></>;\n}\n\nexport function getServerSideProps() {\n  return withAppProps({\n    localeNamespaces: ['editor']\n  });\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Keystatic Content Path\nDESCRIPTION: This environment variable defines where Keystatic should store or load content from in the repository.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stepper_components_application_configuration_41.md#2025-04-22_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nNEXT_PUBLIC_KEYSTATIC_CONTENT_PATH=./content\n```\n\n----------------------------------------\n\nTITLE: Using withPipe to Compose Middleware in Next.js API Handlers (TypeScript/Next.js, Makerkit)\nDESCRIPTION: Composes two middleware-like functions using withPipe. The first validates that only POST requests are accepted, responding with status 409 for others; the second would never execute if the condition fails. Highlights short-circuiting behavior in middleware chains. Assumes withPipe is implemented as an array reducer for handler functions.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/custom_fetch_fetching_data_firestore_making_api_requests_4.md#2025-04-22_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\nexport default withPipe(\n  (req, res) => {\n    if (req.method !== 'POST') {\n      res.status(409).end();\n    }\n  },\n  (req, res) => {\n    // this will never execute!\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Metered Billing in TypeScript Billing Schema\nDESCRIPTION: This code demonstrates how to set up metered billing with tiered pricing. It includes fields for unit of measurement and multiple tiers with different costs based on usage.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/api_billing_api_billing_schema_58.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nexport default createBillingSchema({\n  provider,\n  products: [\n    {\n      id: 'starter',\n      name: 'Starter',\n      description: 'The perfect plan to get started',\n      currency: 'USD',\n      badge: `Value`,\n      plans: [\n        {\n          name: 'Starter Monthly',\n          id: 'starter-monthly',\n          trialDays: 7,\n          paymentType: 'recurring',\n          interval: 'month',\n          lineItems: [\n            {\n              id: 'price_1NNwYHI1i3VnbZTqI2UzaHIe',\n              name: 'Addon 2',\n              cost: 0,\n              type: 'metered',\n              unit: 'GBs',\n              tiers: [\n                {\n                    upTo: 10,\n                    cost: 0.1,\n                },\n                {\n                    upTo: 100,\n                    cost: 0.05,\n                },\n                {\n                    upTo: 'unlimited',\n                    cost: 0.01,\n                }\n              ]\n            },\n          ],\n        }\n      ],\n    }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Server Actions with Supabase\nDESCRIPTION: This snippet shows how to use the 'fetchDataFromSupabase' function within a server action in a React application. It utilizes a Supabase client obtained via 'getSupabaseServerActionClient' to perform data retrieval. The primary use case is fetching data from the 'organizations' table with specified conditions. The outcome is an object containing the fetched data and pagination information, which is returned from the action.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/ai_text_editor_cookie_banner_feedback_popup_24.md#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n'use server';\n\nimport { fetchDataFromSupabase } from '@makerkit/data-loader-supabase-core';\nimport getSupabaseServerActionClient from '~/core/supabase/server-action-client';\n\nexport async function serverAction() {\n  const client = getSupabaseServerActionClient();\n\n  const { data, count, pageSize, pageCount } = await fetchDataFromSupabase({\n    client,\n    table: 'organizations',\n    select: '*',\n    where: {\n      name: {\n        textSearch: `'makerkit'`,\n      }\n    }\n  });\n\n  return {\n    data,\n    count,\n    pageSize,\n    pageCount,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Function for Checking Configuration Settings\nDESCRIPTION: SQL function to check if a configuration is set in the public.config table.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/supabase_clients_data_fetching_adding_pages_63.md#2025-04-22_snippet_16\n\nLANGUAGE: sql\nCODE:\n```\npublic.is_set(\n  field_name text\n)\n```\n\n----------------------------------------\n\nTITLE: Creating an Authenticated Next.js Page with withAppProps in TypeScript\nDESCRIPTION: This TSX code shows how to create a new authenticated page (e.g., `/tasks`, implemented in `pages/about.tsx`) in a Next.js application using Makerkit. It utilizes the `withAppProps` function within `getServerSideProps` to handle authentication checks and fetch necessary app-level props, automatically redirecting unauthenticated users. The `RouteShell` component wraps the page content, providing the standard application layout (navbar, sidebar, etc.) and initializing Firebase Firestore.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/call_api_routes_from_client_csrf_token_guarding_api_routes_7.md#2025-04-22_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport { GetServerSidePropsContext } from 'next';\nimport { withAppProps } from '~/lib/props/with-app-props';\nimport RouteShell from '~/components/RouteShell';\n\nconst Tasks = () => {\n  return (\n    <RouteShell title={'Tasks'}>\n     Tasks...\n    </RouteShell>\n  );\n};\n\nexport default Tasks;\n\nexport async function getServerSideProps(ctx: GetServerSidePropsContext) {\n  return await withAppProps(ctx);\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Team Workspace Data in Server Components\nDESCRIPTION: This TypeScript snippet details the `loadTeamWorkspace` function used to fetch workspace data securely and efficiently on server components in a caching-per-request fashion. It requires importing the loader from the specified module path, and the function returns a structured object containing account details such as user roles and permissions.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/custom_analytics_provider_google_analytics_provider_posthog_analytics_provider_36.md#2025-04-22_snippet_26\n\nLANGUAGE: tsx\nCODE:\n```\nimport { loadTeamWorkspace } from '~/home/[account]/_lib/server/team-account-workspace.loader';\n\nexport default async function SomeAccountPage() {\n  const data = await loadTeamWorkspace();\n\n  // use data\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP Method Restriction Guard for API Endpoints\nDESCRIPTION: Demonstrates how to use the withMethodsGuard to restrict API access to specific HTTP methods. This example only allows GET requests and rejects all other methods.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/architecture_api_guards_app_check_2.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nexport default withPipe(\n  withMethodsGuard(['GET']),\n  myApiHandler\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Next.js Middleware for Active Subscription Check in TypeScript\nDESCRIPTION: This TypeScript code defines a Next.js API route middleware function `withActiveSubscription`. It retrieves the current organization based on user ID (from `req.firebaseUser`) and organization ID (from cookies) and checks if the organization's subscription status is 'active' or 'trialing'. If not, it returns a 403 Forbidden response. This middleware requires the `withAuthedUser` middleware to be executed first to ensure `req.firebaseUser` is available.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/call_api_routes_from_client_csrf_token_guarding_api_routes_7.md#2025-04-22_snippet_12\n\nLANGUAGE: ts\nCODE:\n```\nimport { NextApiRequest,NextApiResponse } from \"next\";\nimport { getCurrentOrganization } from '~/lib/server/organizations/get-current-organization';\n\nexport function withActiveSubscription() {\n  return async function(req: NextApiRequest, res: NextApiResponse) {\n    const userId = req.firebaseUser.uid;\n    const currentOrganizationId = req.cookies.organizationId;\n    const organization =\n      await getCurrentOrganization(userId, currentOrganizationId);\n\n    const status = organization.subscription?.status;\n    const isActive = ['active', 'trialing'].includes(status);\n\n    if (!isActive) {\n      return res.status(403).json({\n        error: 'You do not have permission to access this resource.'\n      });\n    }\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing completeOnboarding Function for Stripe Webhook in TypeScript\nDESCRIPTION: Function that completes the onboarding process after a successful Stripe checkout. It retrieves onboarding data, assigns team membership, updates the user account, and marks the user as onboarded in Supabase auth metadata.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/waitlist_plugin_plugins_drizzle_supabase_52.md#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nasync function completeOnboarding(accountId: string) {\n  const logger = await getLogger();\n  const adminClient = getSupabaseServerAdminClient();\n\n  logger.info(\n    { accountId },\n    `Checkout comes from onboarding. Processing onboarding data...`,\n  );\n\n  const onboarding = await adminClient\n    .from('onboarding')\n    .select('*')\n    .eq('account_id', accountId)\n    .single();\n\n  if (onboarding.error) {\n    logger.error(\n      { error: onboarding.error, accountId },\n      `Failed to retrieve onboarding data`,\n    );\n\n    // if there's an error, we can't continue\n    return;\n  } else {\n    logger.info({ accountId }, `Onboarding data retrieved. Processing...`);\n\n    const data = onboarding.data.data as {\n      userName: string;\n      teamAccountId: string;\n    };\n\n    const teamAccountId = data.teamAccountId;\n\n    logger.info(\n      { userId: accountId, teamAccountId },\n      `Assigning membership...`,\n    );\n\n    const assignMembershipResponse = await adminClient\n      .from('accounts_memberships')\n      .insert({\n        account_id: teamAccountId,\n        user_id: accountId,\n        account_role: 'owner',\n      });\n\n    if (assignMembershipResponse.error) {\n      logger.error(\n        {\n          error: assignMembershipResponse.error,\n        },\n        `Failed to assign membership`,\n      );\n    } else {\n      logger.info({ accountId }, `Membership assigned. Updating account...`);\n    }\n\n    const accountResponse = await adminClient\n      .from('accounts')\n      .update({\n        name: data.userName,\n      })\n      .eq('id', accountId);\n\n    if (accountResponse.error) {\n      logger.error(\n        {\n          error: accountResponse.error,\n        },\n        `Failed to update account`,\n      );\n    } else {\n      logger.info(\n        { accountId },\n        `Account updated. Cleaning up onboarding data...`,\n      );\n    }\n\n    // set onboarded flag on user account\n    const updateUserResponse = await adminClient.auth.admin.updateUserById(\n      accountId,\n      {\n        app_metadata: {\n          onboarded: true,\n        },\n      },\n    );\n\n    if (updateUserResponse.error) {\n      logger.error(\n        {\n          error: updateUserResponse.error,\n        },\n        `Failed to update user`,\n      );\n    } else {\n      logger.info({ accountId }, `User updated. Cleaning up...`);\n    }\n\n    // clean up onboarding data\n    const deleteOnboardingResponse = await adminClient\n      .from('onboarding')\n      .delete()\n      .eq('account_id', accountId);\n\n    if (deleteOnboardingResponse.error) {\n      logger.error(\n        {\n          error: deleteOnboardingResponse.error,\n        },\n        `Failed to delete onboarding data`,\n      );\n    } else {\n      logger.info(\n        { accountId },\n        `Onboarding data cleaned up. Completed webhook handler.`,\n      );\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding New Permissions to app_permissions Enum in SQL\nDESCRIPTION: This SQL snippet demonstrates how to add new permissions ('tasks.write' and 'tasks.delete') to the existing app_permissions enum in the public schema. These permissions can be used in Row Level Security (RLS) rules to restrict access.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/adding_turborepo_package_approaching_local_development_database_functions_93.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n-- insert new permissions\nalter type public.app_permissions add value 'tasks.write';\nalter type public.app_permissions add value 'tasks.delete';\ncommit;\n```\n\n----------------------------------------\n\nTITLE: Adding Feedback to Admin Sidebar in Next.js\nDESCRIPTION: This snippet shows how to add a Feedback item to the AdminSidebar component, linking to the feedback admin page with an appropriate icon for navigation.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_one_time_payments_stripe_webhooks_payments_11.md#2025-04-22_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\n<SidebarItem\n  path={'/admin/feedback'}\n  Icon={() => <ChatBubbleLeftRightIcon className={'h-6'} />}\n>\n  Feedback\n</SidebarItem>\n```\n\n----------------------------------------\n\nTITLE: API Logging Implementation\nDESCRIPTION: Demonstrates how to implement API logging using Pino logger with context information.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_one_time_payments_stripe_webhooks_ci_tests_73.md#2025-04-22_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\nasync function myFunction(params: {\n  organizationId: string;\n  userId: string;\n}) {\n  logger.info(\n    {\n      organizationId: params.organizationId,\n      userId: params.userId,\n    },\n    `Performing action...`\n  );\n\n  await performAction();\n\n  logger.info(\n    {\n      organizationId: params.organizationId,\n      userId: params.userId,\n    },\n    `Action successful`\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Composing Multi-Step Forms with React Hook Form, Zod, and Shadcn UI (TypeScript)\nDESCRIPTION: This example demonstrates constructing a multi-step form by integrating React Hook Form for state management, Zod for validation, and custom MultiStepForm UI components. The form schema is composed using a helper for step-wise validation, and the form utilizes useForm and zodResolver for type-safe handling. Required dependencies include @kit/ui/multi-step-form, react-hook-form, @hookform/resolvers/zod, and zod. The expected usage involves passing the schema, form instance, and an onSubmit handler to the MultiStepForm component, with each MultiStepFormStep corresponding to a logical step. Inputs are expected to align with schema keys, and output is the validated form data on submit.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/bordered_navigation_menu_card_button_cookie_banner_60.md#2025-04-22_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { MultiStepForm, MultiStepFormStep } from '@kit/ui/multi-step-form';\\nimport { useForm } from 'react-hook-form';\\nimport { zodResolver } from '@hookform/resolvers/zod';\\nimport { z } from 'zod';\\n\\nconst FormSchema = createStepSchema({\\n  step1: z.object({ /* ... */ }),\\n  step2: z.object({ /* ... */ }),\\n});\\n\\nexport function MyForm() {\\n  const form = useForm({\\n    resolver: zodResolver(FormSchema),\\n    // ...\\n  });\\n\\n  const onSubmit = (data) => {\\n    // Handle form submission\\n  };\\n\\n  return (\\n    <MultiStepForm schema={FormSchema} form={form} onSubmit={onSubmit}>\\n      <MultiStepFormStep name=\\\"step1\\\">\\n        {/* Step 1 fields */}\\n      </MultiStepFormStep>\\n      <MultiStepFormStep name=\\\"step2\\\">\\n        {/* Step 2 fields */}\\n      </MultiStepFormStep>\\n    </MultiStepForm>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: React Component with Task Form Implementation\nDESCRIPTION: React component that implements a form for creating new tasks using the useInsertTask mutation hook.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/validating_api_input_zod_development_clone_repository_31.md#2025-04-22_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\nfunction TaskForm() {\n  const insertTaskMutation = useInsertTask();\n\n  const onSubmit: React.FormEventHandler<HTMLFormElement> = (event) => {\n    const name = new FormData(event.currentTarget).get('name') ?? 'No Name';\n    const task = { name };\n\n    return insertTaskMutation.trigger(task);\n  };\n\n  return (\n    <form onSubmit={onSubmit}>\n      <input type={'name'} required />\n\n      <button disabled={insertTaskMutation.isLoading}>\n        Submit\n      </button>\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Stripe CLI\nDESCRIPTION: Command to start the Stripe CLI for local webhook testing.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/validating_api_input_zod_development_clone_repository_31.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm run stripe:listen\n```\n\n----------------------------------------\n\nTITLE: Tasks Page Component Implementation\nDESCRIPTION: Main page component for displaying tasks, including header and container setup. Handles pagination and data fetching integration.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/running_project_supabase_data_fetching_supabase_data_writing_27.md#2025-04-22_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nfunction TasksPage({ params, searchParams }: TasksPageParams) {\n  const pageIndex = Number(searchParams.page ?? '1') - 1;\n  const perPage = 8;\n\n  const { tasks, count } = use(\n    loadTasksData({\n      organizationUid: params.organization,\n      pageIndex,\n      perPage,\n      query: searchParams.query || '',\n    }),\n  );\n\n  const pageCount = Math.ceil(count / perPage);\n\n  return (\n    <>\n      <AppHeader>\n        <span className={'flex space-x-2'}>\n          <RectangleStackIcon className=\"w-6\" />\n\n          <span>\n            <Trans i18nKey={'common:tasksTabLabel'} />\n          </span>\n        </span>\n      </AppHeader>\n\n      <AppContainer>\n\n      </AppContainer>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Middleware Chain for Team-Only Access\nDESCRIPTION: Integration of team-only handling into the existing middleware chain with authentication checks\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/team_accounts_only_recipes_adding_translations_55.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n{\n  pattern: new URLPattern({ pathname: '/home/*?' }),\n  handler: async (req: NextRequest, res: NextResponse) => {\n    const {\n      data: { user },\n    } = await getUser(req, res);\n\n    const origin = req.nextUrl.origin;\n    const next = req.nextUrl.pathname;\n\n    if (!user) {\n      const signIn = pathsConfig.auth.signIn;\n      const redirectPath = `${signIn}?next=${next}`;\n\n      return NextResponse.redirect(new URL(redirectPath, origin).href);\n    }\n\n    const supabase = createMiddlewareClient(req, res);\n\n    const requiresMultiFactorAuthentication =\n      await checkRequiresMultiFactorAuthentication(supabase);\n\n    if (requiresMultiFactorAuthentication) {\n      return NextResponse.redirect(\n        new URL(pathsConfig.auth.verifyMfa, origin).href,\n      );\n    }\n\n    return handleTeamAccountsOnly(req, user.id);\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Supabase Plans Table for Credit Billing (SQL)\nDESCRIPTION: This SQL script creates a `plans` table in a Supabase database to store subscription plan details relevant to credit-based billing. It includes columns for plan name and a Stripe variant ID, enables Row Level Security (RLS), and grants read access to authenticated users.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/billing_webhooks_credit_based_billing_lemon_squeezy_89.md#2025-04-22_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\ncreate table public.plans (\n  id serial primary key,\n  name text not null,\n  variant_id text not null\n);\n\nalter table public.plans enable row level security;\n\n-- allow authenticated users to read plans\ncreate policy read_plans\n  on public.plans\n  for select\n  to authenticated\n  using (true);\n```\n\n----------------------------------------\n\nTITLE: Implementing Onboarding Completion Page in Next.js\nDESCRIPTION: React component that handles the onboarding completion page, checking user's onboarding status and redirecting to home page when complete. Uses React Query for polling the user's status with a maximum of 10 attempts.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/waitlist_plugin_plugins_drizzle_supabase_52.md#2025-04-22_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\nimport { useRef } from 'react';\n\nimport { useQuery } from '@tanstack/react-query';\n\nimport { useSupabase } from '@kit/supabase/hooks/use-supabase';\nimport { LoadingOverlay } from '@kit/ui/loading-overlay';\n\nimport pathsConfig from '~/config/paths.config';\n\nexport default function OnboardingCompletePage() {\n  const { error } = useCheckUserOnboarded();\n\n  if (error) {\n    return (\n      <div className={'flex flex-col items-center justify-center'}>\n        <p>Something went wrong...</p>\n      </div>\n    );\n  }\n\n  return <LoadingOverlay>Setting up your account...</LoadingOverlay>;\n}\n\nfunction useCheckUserOnboarded() {\n  const client = useSupabase();\n  const countRef = useRef(0);\n  const maxCount = 10;\n  const error = countRef.current >= maxCount;\n\n  useQuery({\n    queryKey: ['onboarding-complete'],\n    refetchInterval: () => (error ? false : 1000),\n    queryFn: async () => {\n      if (error) {\n        return false;\n      }\n\n      countRef.current++;\n\n      const response = await client.auth.getUser();\n\n      if (response.error) {\n        throw response.error;\n      }\n\n      const onboarded = response.data.user.app_metadata.onboarded;\n\n      if (onboarded) {\n        return window.location.assign(pathsConfig.app.home);\n      }\n\n      return false;\n    },\n  });\n\n  return {\n    error,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Using withI18n in Server Components\nDESCRIPTION: Shows how to wrap a Next.js Server Component with the withI18n higher order component to initialize i18n before rendering.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/server_actions_uploading_data_to_storage_writing_data_to_supabase_17.md#2025-04-22_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\nimport { withI18n } from '~/i18n/with-i18n';\n\nfunction DashboardPage() {\n  return (\n    <>\n     Your page...\n    </>\n  );\n}\n\nexport default withI18n(DashboardPage);\n```\n\n----------------------------------------\n\nTITLE: Creating a SWR Mutation Hook for Profile Updates with File Upload\nDESCRIPTION: Custom React hook using SWR's useSWRMutation to handle profile updates with file uploads. This pattern allows for easy integration with React components and provides loading and error states.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/server_actions_uploading_data_to_storage_writing_data_to_supabase_17.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport useSWRMutation from 'swr/mutation';\n\nfunction useUpdateProfile() {\n  const client = useSupabase();\n  const key = 'useUpdateProfile';\n\n  return useSWRMutation(key, async (_, { arg: data }: { arg: {\n    file: File;\n    userId: string;\n  } }) => {\n    return updateUserData(client, data);\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Zod Schema for Cancelling Subscriptions in Billing API\nDESCRIPTION: This schema defines the parameters required for cancelling a subscription, including the subscription ID and an optional flag to invoice immediately.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/google_analytics_provider_posthog_analytics_provider_umami_analytics_provider_88.md#2025-04-22_snippet_39\n\nLANGUAGE: tsx\nCODE:\n```\nsubscriptionId: z.string(),\ninvoiceNow: z.boolean().optional(),\n```\n\n----------------------------------------\n\nTITLE: Defining Per-Seat Billing Schema with Tiered Pricing\nDESCRIPTION: Implementation of a per-seat billing schema using createBillingSchema with tiered pricing. This allows charging different rates based on the number of seats (users) in an organization, with free tiers and volume discounts.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/lemon_squeezy_metered_usage_one_off_payments_38.md#2025-04-22_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nexport default createBillingSchema({\n  provider,\n  products: [\n    {\n      id: 'starter',\n      name: 'Starter',\n      description: 'The perfect plan to get started',\n      currency: 'USD',\n      badge: `Value`,\n      plans: [\n        {\n          name: 'Starter Monthly',\n          id: 'starter-monthly',\n          trialDays: 7,\n          paymentType: 'recurring',\n          interval: 'month',\n          lineItems: [\n            {\n              id: 'price_1NNwYHI1i3VnbZTqI2UzaHIe',\n              name: 'Addon 2',\n              cost: 0,\n              type: 'per_seat',\n              tiers: [\n                {\n                    upTo: 3,\n                    cost: 0,\n                },\n                {\n                    upTo: 5,\n                    cost: 7.99,\n                },\n                {\n                    upTo: 'unlimited',\n                    cost: 5.99,\n                }\n              ]\n            },\n          ],\n        }\n      ],\n    }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Fly.io Deployment Workflow with GitHub Actions (YAML)\nDESCRIPTION: This GitHub Actions workflow automates deployment to Fly.io upon pushes to the `main` branch. It checks out the code, sets up the Fly.io CLI (`flyctl`), and executes the deployment command (`flyctl deploy --remote-only`). Crucially, it passes numerous build arguments (`--build-arg`) derived from GitHub repository variables (`vars.*`) and secrets (`secrets.*`) to configure the application build environment, such as API keys, feature flags, and site settings. Requires the `FLY_API_TOKEN` secret for authentication with Fly.io.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/emails_authentication_checklist_65.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nname: Fly Deploy\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  deploy:\n    name: Deploy app\n    runs-on: ubuntu-latest\n    concurrency: deploy-group\n    environment: production\n    steps:\n      - uses: actions/checkout@v4\n      - uses: superfly/flyctl-actions/setup-flyctl@master\n      - run: |\n          flyctl deploy --remote-only \\\n            --build-arg NODE_ENV=\"${{ vars.NODE_ENV }}\" \\\n            --build-arg VITE_SITE_URL=\"${{ vars.VITE_SITE_URL }}\" \\\n            --build-arg VITE_PRODUCT_NAME=\"${{ vars.VITE_PRODUCT_NAME }}\" \\\n            --build-arg VITE_SITE_TITLE=\"${{ vars.VITE_SITE_TITLE }}\" \\\n            --build-arg VITE_SITE_DESCRIPTION=\"${{ vars.VITE_SITE_DESCRIPTION }}\" \\\n            --build-arg VITE_DEFAULT_THEME_MODE=\"${{ vars.VITE_DEFAULT_THEME_MODE }}\" \\\n            --build-arg VITE_DEFAULT_LOCALE=\"${{ vars.VITE_DEFAULT_LOCALE }}\" \\\n            --build-arg VITE_AUTH_PASSWORD=\"${{ vars.VITE_AUTH_PASSWORD }}\" \\\n            --build-arg VITE_AUTH_MAGIC_LINK=\"${{ vars.VITE_AUTH_MAGIC_LINK }}\" \\\n            --build-arg CONTACT_EMAIL=\"${{ secrets.CONTACT_EMAIL }}\" \\\n            --build-arg VITE_ENABLE_THEME_TOGGLE=\"${{ vars.VITE_ENABLE_THEME_TOGGLE }}\" \\\n            --build-arg VITE_ENABLE_PERSONAL_ACCOUNT_DELETION=\"${{ vars.VITE_ENABLE_PERSONAL_ACCOUNT_DELETION }}\" \\\n            --build-arg VITE_ENABLE_PERSONAL_ACCOUNT_BILLING=\"${{ vars.VITE_ENABLE_PERSONAL_ACCOUNT_BILLING }}\" \\\n            --build-arg VITE_ENABLE_TEAM_ACCOUNTS=\"${{ vars.VITE_ENABLE_TEAM_ACCOUNTS }}\" \\\n            --build-arg VITE_ENABLE_TEAM_ACCOUNT_DELETION=\"${{ vars.VITE_ENABLE_TEAM_ACCOUNT_DELETION }}\" \\\n            --build-arg VITE_ENABLE_TEAM_ACCOUNTS_BILLING=\"${{ vars.VITE_ENABLE_TEAM_ACCOUNTS_BILLING }}\" \\\n            --build-arg VITE_ENABLE_TEAM_ACCOUNTS_CREATION=\"${{ vars.VITE_ENABLE_TEAM_ACCOUNTS_CREATION }}\" \\\n            --build-arg VITE_ENABLE_NOTIFICATIONS=\"${{ vars.VITE_ENABLE_NOTIFICATIONS }}\" \\\n            --build-arg VITE_REALTIME_NOTIFICATIONS=\"${{ vars.VITE_REALTIME_NOTIFICATIONS }}\" \\\n            --build-arg VITE_SUPABASE_URL=\"${{ vars.VITE_SUPABASE_URL }}\" \\\n            --build-arg VITE_SUPABASE_ANON_KEY=\"${{ vars.VITE_SUPABASE_ANON_KEY }}\" \\\n            --build-arg SUPABASE_SERVICE_ROLE_KEY=\"${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}\" \\\n            --build-arg VITE_BILLING_PROVIDER=\"${{ vars.VITE_BILLING_PROVIDER }}\" \\\n            --build-arg VITE_STRIPE_PUBLISHABLE_KEY=\"${{ vars.VITE_STRIPE_PUBLISHABLE_KEY }}\" \\\n            --build-arg STRIPE_SECRET_KEY=\"${{ secrets.STRIPE_SECRET_KEY }}\" \\\n            --build-arg STRIPE_WEBHOOK_SECRET=\"${{ secrets.STRIPE_WEBHOOK_SECRET }}\" \\\n            --build-arg VITE_CMS_CLIENT=\"${{ vars.VITE_CMS_CLIENT }}\" \\\n            --build-arg VITE_KEYSTATIC_CONTENT_PATH=\"${{ vars.VITE_KEYSTATIC_CONTENT_PATH }}\" \\\n            --build-arg VITE_LOCALES_PATH=\"${{ vars.VITE_LOCALES_PATH }}\" \\\n            --build-arg MAILER_PROVIDER=\"${{ secrets.MAILER_PROVIDER }}\" \\\n            --build-arg EMAIL_SENDER=\"${{ secrets.EMAIL_SENDER }}\" \\\n            --build-arg EMAIL_HOST=\"${{ secrets.EMAIL_HOST }}\" \\\n            --build-arg EMAIL_PORT=\"${{ secrets.EMAIL_PORT }}\" \\\n            --build-arg EMAIL_USER=\"${{ secrets.EMAIL_USER }}\" \\\n            --build-arg EMAIL_PASSWORD=\"${{ secrets.EMAIL_PASSWORD }}\" \\\n            --build-arg EMAIL_TLS=\"${{ secrets.EMAIL_TLS }}\" \\\n            --build-arg VITE_TEAM_NAVIGATION_STYLE=\"${{ vars.VITE_TEAM_NAVIGATION_STYLE }}\" \\\n            --build-arg VITE_USER_NAVIGATION_STYLE=\"${{ vars.VITE_USER_NAVIGATION_STYLE }}\" \\\n            --build-arg VITE_THEME_COLOR=\"${{ vars.VITE_THEME_COLOR }}\" \\\n            --build-arg VITE_THEME_COLOR_DARK=\"${{ vars.VITE_THEME_COLOR_DARK }}\" \\\n            --build-arg SIGN_IN_PATH=\"${{ vars.SIGN_IN_PATH }}\" \\\n            --build-arg SIGN_UP_PATH=\"${{ vars.SIGN_UP_PATH }}\" \\\n            --build-arg TEAM_ACCOUNTS_HOME_PATH=\"${{ vars.TEAM_ACCOUNTS_HOME_PATH }}\" \\\n            --build-arg INVITATION_PAGE_PATH=\"${{ vars.INVITATION_PAGE_PATH }}\" \\\n            --build-arg VITE_DISPLAY_TERMS_AND_CONDITIONS_CHECKBOX=\"${{ vars.VITE_DISPLAY_TERMS_AND_CONDITIONS_CHECKBOX }}\"\n        env:\n          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}\n```\n\n----------------------------------------\n\nTITLE: Passing Permissions to Child Components in Next.js\nDESCRIPTION: This example demonstrates how to pass the permissions list to child components as props. This approach allows for permission-based UI decisions to be made within nested components.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/marketing_pages_migrations_permissions_and_roles_45.md#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { loadTeamWorkspace } from '~/home/[account]/_lib/server/team-account-workspace.loader';\n\nexport default function TasksPage() {\n  const data = await loadTeamWorkspace();\n  const permissions = data.account.permissions; // string[]\n\n  return (\n    <div>\n      <TaskList permissions={permissions} />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Request Body Schema with Zod in TypeScript\nDESCRIPTION: This TypeScript function uses Zod (`z`) to define a schema for validating an API request body. It ensures the body object contains a 'displayName' property which must be a string, and an 'email' property which must be a string conforming to email format.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/ci_tests_running_tests_testing_limitations_12.md#2025-04-22_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nfunction getBodySchema() {\n  return z.object({\n    displayName: z.string(),\n    email: z.string().email(),\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Request State Hook in React with TypeScript\nDESCRIPTION: The useRequestState hook is used as a simple reducer for asynchronous tasks like HTTP requests or Firestore operations. It returns the current state and methods to update it.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/ui_hooks_mdx_15.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst { state, setError, setData, setLoading } =\n    useRequestState<Data>();\n```\n\n----------------------------------------\n\nTITLE: Defining and Importing Custom Fonts in CSS\nDESCRIPTION: This snippet shows how to import Google Fonts and define CSS custom properties for font families in a Makerkit application. The @import brings in Inter and Urbanist font families, and the CSS variables --font-sans and --font-heading assign those fonts for later use throughout the UI. Dependencies are Google Fonts and a CSS processor that supports custom properties. The inputs are the font specifications, and outputs are the defined CSS variables for font assignment. Note that duplicate display=swap parameters should be avoided.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/creating_your_own_cms_client_keystatic_wordpress_62.md#2025-04-22_snippet_12\n\nLANGUAGE: CSS\nCODE:\n```\n@import url('//fonts.googleapis.com/css2?family=Inter:wght@300;400;500;700;800&family=Urbanist:wght@500;700&display=swap&display=swap');\\n\\n--font-sans: -apple-system, Inter, Helvetica, Arial, sans-serif;\\n--font-heading: Urbanist, var(--font-sans);\n```\n\n----------------------------------------\n\nTITLE: Enabling Internationalization for Next.js Pages\nDESCRIPTION: Shows how to enable internationalization for Next.js pages by wrapping them with the withI18n HOC, ensuring i18n is initialized before rendering.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/organization_sdk_organization_subscription_sdk_sdk_25.md#2025-04-22_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\nimport { withI18n } from '~/i18n/with-i18n';\n\n\nfunction TaskPage() {\n  // ...\n}\n\nexport default withI18n(TaskPage);\n```\n\n----------------------------------------\n\nTITLE: Using the useFetchTicketMessages Hook for Paginated Data in React Query (TypeScript/React)\nDESCRIPTION: Demonstrates how to use the custom `useFetchTicketMessages` hook to fetch paginated ticket messages for a specific ticket using React Query in a React functional component. The example shows extracting status and data, which can be used to render messages and handle loading/error states. Dependencies: React, React Query, and the previously defined custom hook. Takes `ticketId`, `page`, and `queryKey` as input and returns query state and paginated message data.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/data_fetching_3.md#2025-04-22_snippet_4\n\nLANGUAGE: TSX\nCODE:\n```\n\"const { status, data } = useFetchTicketMessages({\\n  ticketId: props.ticketId,\\n  page: state.page,\\n  queryKey,\\n});\\n\"\n```\n\n----------------------------------------\n\nTITLE: Fetching Current Organization Details\nDESCRIPTION: This snippet demonstrates how to fetch complete details of the currently selected organization using the getCurrent method of the Organization SDK.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/organization_sdk_organization_subscription_sdk_sdk_25.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport getSdk from '~/lib/sdk';\nimport getSupabaseServerComponentClient from '~/core/supabase/server-component-client';\n\nasync function PageServerComponent() {\n  const client = getSupabaseServerComponentClient();\n  const sdk = getSdk(client);\n\n  const organization = await sdk.organization.getCurrent();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CORS Headers in Remix\nDESCRIPTION: Functions to enable CORS in a Remix application by setting appropriate headers and handling OPTIONS requests.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/uploading_data_to_storage_writing_data_to_supabase_data_fetching_77.md#2025-04-22_snippet_25\n\nLANGUAGE: tsx\nCODE:\n```\nfunction withCors() {\n  const headers = new Headers();\n\n  headers.append('Access-Control-Allow-Origin', '*');\n\n  headers.append(\n    'Access-Control-Allow-Headers',\n    'Origin, X-Requested-With, Content-Type, Accept, referer-path'\n  );\n\n  return headers;\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nif (request.method === `OPTIONS`) {\n  return new Response(null, {\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, HEAD, POST, PUT, DELETE',\n    },\n  });\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport withCors from '~/core/middleware/with-cors';\n\nexport const action: ActionFunction = async ({}) => {\n  withCors();\n  // your logic\n}\n\nexport default apiHandler;\n```\n\n----------------------------------------\n\nTITLE: Creating Team Selection Page Component\nDESCRIPTION: React component for the team selection page that displays available teams for user selection\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/team_accounts_only_recipes_adding_translations_55.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { PageBody, PageHeader } from '@kit/ui/page';\nimport { Trans } from '@kit/ui/trans';\n\nimport { HomeAccountsList } from '~/home/(user)/_components/home-accounts-list';\nimport { createI18nServerInstance } from '~/lib/i18n/i18n.server';\nimport { withI18n } from '~/lib/i18n/with-i18n';\n\nexport const generateMetadata = async () => {\n  const i18n = await createI18nServerInstance();\n  const title = i18n.t('account:homePage');\n\n  return {\n    title,\n  };\n};\n\nfunction TeamsPage() {\n  return (\n    <div className={'container flex flex-col flex-1 h-screen'}>\n      <PageHeader\n        title={<Trans i18nKey={'common:routes.home'} />}\n        description={<Trans i18nKey={'common:homeTabDescription'} />}\n      />\n\n      <PageBody>\n        <HomeAccountsList />\n      </PageBody>\n    </div>\n  );\n}\n\nexport default withI18n(TeamsPage);\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js i18n Support with JavaScript\nDESCRIPTION: Defines a configuration for Next.js i18n to add Spanish language support. Involves creating new locale directories and updating the i18n configuration in 'next-i18next.config.js'.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/commands_cors_develop_firebase_security_rules_5.md#2025-04-22_snippet_27\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst config = {\n  i18n: {\n    defaultLocale: DEFAULT_LOCALE,\n    locales: [DEFAULT_LOCALE, 'es'],\n  },\n  fallbackLng: {\n    default: [DEFAULT_LOCALE],\n  },\n  localePath: resolve('./public/locales'),\n};\n```\n\n----------------------------------------\n\nTITLE: Multiple Analytics Providers Configuration\nDESCRIPTION: Example of configuring multiple analytics providers to dispatch the same events.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/translations_updating_latest_version_tutorials_87.md#2025-04-22_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nconst analytics = createAnalyticsManager({\n  providers: {\n    googleAnalytics: (config) => new GoogleAnalyticsService(config),\n    mixpanel: (config) => new MixpanelService(config),\n    myCustom: (config) => new MyCustomAnalyticsService(config),\n    null: () => NullAnalyticsService,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Table Component with TanStack Table in React\nDESCRIPTION: Explains how to use the DataTable component to display and interact with tabular data within a React application. It leverages TanStack Table (React Table v8) for functionalities like pagination, sorting, and customization through props.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/app_breadcrumbs_bordered_navigation_menu_card_button_39.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DataTable } from '@kit/ui/enhanced-data-table';\n\nfunction MyComponent() {\n  const columns = [\n    // Define your columns here\n  ];\n\n  const data = [\n    // Your data array\n  ];\n\n  return (\n    <DataTable\n      columns={columns}\n      data={data}\n      pageSize={10}\n      pageIndex={0}\n      pageCount={5}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Metered Usage Plan with Tiers in Makerkit\nDESCRIPTION: Creates a billing schema with a tiered metered usage plan for GB consumption. The pricing structure includes different rates for usage tiers: first 10 GBs at $0.10 each, next 90 GBs at $0.05 each, and anything above at $0.01 per GB.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/billing_webhooks_credit_based_billing_lemon_squeezy_89.md#2025-04-22_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nexport default createBillingSchema({\n  provider,\n  products: [\n    {\n      id: 'starter',\n      name: 'Starter',\n      description: 'The perfect plan to get started',\n      currency: 'USD',\n      badge: `Value`,\n      plans: [\n        {\n          name: 'Starter Monthly',\n          id: 'starter-monthly',\n          trialDays: 7,\n          paymentType: 'recurring',\n          interval: 'month',\n          lineItems: [\n            {\n              id: 'price_1NNwYHI1i3VnbZTqI2UzaHIe',\n              name: 'Addon 2',\n              cost: 0,\n              type: 'metered',\n              unit: 'GBs',\n              tiers: [\n                {\n                    upTo: 10,\n                    cost: 0.1,\n                },\n                {\n                    upTo: 100,\n                    cost: 0.05,\n                },\n                {\n                    upTo: 'unlimited',\n                    cost: 0.01,\n                }\n              ]\n            },\n          ],\n        }\n      ],\n    }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Running Cypress Tests in CI Mode\nDESCRIPTION: Command to run all Cypress tests in CI environment, including starting services and cleaning up.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/user_sdk_sdk_ci_tests_84.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Importing FeedbackPopupContainer with Button in Next.js\nDESCRIPTION: This snippet demonstrates how to import and use the FeedbackPopupContainer component with a simple button as a trigger in a Next.js layout file to make it available on all pages.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_one_time_payments_stripe_webhooks_payments_11.md#2025-04-22_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\nimport { FeedbackPopupContainer } from '~/plugins/feedback-popup/FeedbackPopup';\n\nexport default function Component() {\n  return (\n    <>\n      <FeedbackPopupContainer>\n        <Button variant='outline'>Feedback</Button>\n      </FeedbackPopupContainer>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-Side Data Fetching in Next.js\nDESCRIPTION: This example shows how to create a server-side function to fetch data from external sources. It follows the convention of storing server-side code in the lib/server directory.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/custom_fetch_fetching_data_firestore_making_api_requests_4.md#2025-04-22_snippet_32\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function fetchEvents() {\n  return makeExternalDatabaseRequest();\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying a List of Documents with Loading States in React Component\nDESCRIPTION: This React component demonstrates how to consume the data returned from the useFetchUserOrganizations hook. It handles different loading states (loading, error, success) and renders a list of organizations when data is available.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/reading_document_reading_documents_list_creating_document_8.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nfunction UserOrganizations({\n  userId,\n}: React.PropsWithChildren<{\n  userId: string;\n}>) {\n  const { data, status } = useFetchUserOrganizations(userId);\n\n  if (status === 'loading') {\n    return <p>Loading...</p>;\n  }\n\n  if (status === 'error') {\n    return <p>Error</p>;\n  }\n\n  return (\n    <ul>\n      {data.map((organization) => (\n        <li key={organization.id}>{organization.name}</li>\n      ))}\n    </ul>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Database Table Constants for Supabase\nDESCRIPTION: Example of how to define a constant for a database table name to be used throughout the application. This approach promotes consistency and reduces errors from mistyped table names.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/server_actions_uploading_data_to_storage_writing_data_to_supabase_17.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport const TASKS_TABLE = `tasks`;\n```\n\n----------------------------------------\n\nTITLE: Defining Role Translations in JSON\nDESCRIPTION: This JSON snippet shows how to define the user-facing labels and descriptions for custom roles (Owner, Account Manager, Readonly) within a translation file, typically named `common.json`. These translations correspond to the roles defined in the TypeScript enum and are used for display purposes in the UI.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/develop_firebase_security_rules_emails_encrypting_secrets_71.md#2025-04-22_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n\"roles\": {\n  \"owner\": {\n    \"label\": \"Owner\",\n    \"description\": \"Can change any setting, invite new members and manage billing\"\n  },\n  \"accountmanager\": {\n    \"label\": \"Account Manager\",\n    \"description\": \"Can change some settings, invite members, perform disruptive actions\"\n  },\n  \"readonly\": {\n    \"label\": \"Readonly\",\n    \"description\": \"Can only read information\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Drizzle Client with Supabase Integration\nDESCRIPTION: TypeScript implementation of Drizzle client with Supabase authentication integration and RLS support.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/waitlist_plugin_plugins_drizzle_supabase_52.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport 'server-only';\n\nimport { DrizzleConfig, sql } from 'drizzle-orm';\nimport { drizzle } from 'drizzle-orm/postgres-js';\nimport { JwtPayload, jwtDecode } from 'jwt-decode';\nimport postgres from 'postgres';\nimport { z } from 'zod';\n\nimport * as schema from '../drizzle/schema';\n\nconst SUPABASE_DATABASE_URL = z\n  .string({\n    description: `The URL of the Supabase database. Please provide the variable SUPABASE_DATABASE_URL.`,\n    required_error: 'The environment variable SUPABASE_DATABASE_URL is required',\n  })\n  .url()\n  .parse(process.env.SUPABASE_DATABASE_URL!);\n\nconst config = {\n  casing: 'snake_case',\n  schema,\n} satisfies DrizzleConfig<typeof schema>;\n\nconst adminClient = drizzle({\n  client: postgres(SUPABASE_DATABASE_URL, { prepare: false }),\n  ...config,\n});\n\nconst rlsClient = drizzle({\n  client: postgres(SUPABASE_DATABASE_URL, { prepare: false }),\n  ...config,\n});\n\nexport function getDrizzleSupabaseAdminClient() {\n  return adminClient;\n}\n\nexport async function getDrizzleSupabaseClient() {\n  const client = getSupabaseServerClient();\n  const { data } = await client.auth.getSession();\n  const accessToken = data.session?.access_token ?? '';\n  const token = decode(accessToken);\n\n  const runTransaction = ((transaction, config) => {\n    return rlsClient.transaction(async (tx) => {\n      try {\n        await tx.execute(sql`\n          select set_config('request.jwt.claims', '${sql.raw(\n            JSON.stringify(token),\n          )}', TRUE);\n          select set_config('request.jwt.claim.sub', '${sql.raw(\n            token.sub ?? '',\n          )}', TRUE);\n          set local role ${sql.raw(token.role ?? 'anon')};\n        `);\n\n        return await transaction(tx);\n      } finally {\n        await tx.execute(sql`\n          select set_config('request.jwt.claims', NULL, TRUE);\n          select set_config('request.jwt.claim.sub', NULL, TRUE);\n          reset role;\n        `);\n      }\n    }, config);\n  }) as typeof rlsClient.transaction;\n\n  return {\n    runTransaction,\n  };\n}\n\nfunction decode(accessToken: string) {\n  try {\n    return jwtDecode<JwtPayload & { role: string }>(accessToken);\n  } catch {\n    return { role: 'anon' } as JwtPayload & { role: string };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: SSR Authentication in Next.js with Firebase\nDESCRIPTION: This TypeScript interface `PageProps` is part of the server-side props function implementation using Firebase Auth. It details the properties expected in authentication responses, including `session`, `user`, and `csrfToken`. It aids in managing user sessions securely, relying on server-side rendering to enhance security and session management across the application's server-side operations. No specific code dependencies are required, but it interfaces with the broader Firebase Authentication setup.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/ci_tests_running_tests_testing_limitations_12.md#2025-04-22_snippet_29\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface PageProps {\n  session?: Maybe<AuthUser>;\n  user?: Maybe<UserData>;\n  organization?: Maybe<WithId<Organization>>;\n  csrfToken?: string;\n  ui?: UIState;\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing JSON in a Remix Action Function\nDESCRIPTION: Shows how to parse JSON data submitted from the client in a Remix action function. This is used when the client submits data with the encType set to 'application/json'.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/user_sdk_sdk_ci_tests_84.md#2025-04-22_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nexport async function action(args: ActionArgs) {\n  const req = args.request;\n  const body = await req.json();\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Analytics Provider\nDESCRIPTION: Configuration setup for registering a custom analytics provider in the analytics manager.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/translations_updating_latest_version_tutorials_87.md#2025-04-22_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAnalyticsManager } from './analytics-manager';\nimport { MyCustomAnalyticsService } from './my-custom-analytics-service';\nimport type { AnalyticsManager } from './types';\n\nexport const analytics: AnalyticsManager = createAnalyticsManager({\n  providers: {\n    myCustom: (config) => new MyCustomAnalyticsService(config),\n    null: () => NullAnalyticsService,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Account Workspace Data\nDESCRIPTION: Code showing how to retrieve account workspace data using the getAccountWorkspace method. This is typically used to hydrate the workspace data in the context.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/custom_analytics_provider_google_analytics_provider_posthog_analytics_provider_36.md#2025-04-22_snippet_41\n\nLANGUAGE: tsx\nCODE:\n```\nconst api = createTeamAccountsApi(client);\nconst workspace = await api.getAccountWorkspace('account-slug');\n```\n\n----------------------------------------\n\nTITLE: Accessing User Session Data with useUserSession Hook\nDESCRIPTION: This snippet shows how to use the useUserSession hook to retrieve the current user's session data, including information from Firebase Authentication and Firestore. It demonstrates accessing the user ID from the session data.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/adding_admin_users_admin_overview_admin_1.md#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useUserSession } from '~/core/hooks/use-user-session';\n\nfunction MyComponent() {\n  const userSession = useUserSession();\n  const userId = userSession?.auth?.uid;\n\n  return (\n    <div>\n      <p>Current user ID: {userId}</p>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Project Role and Action Enums in SQL\nDESCRIPTION: Defines two enum types for project roles (owner, admin, member) and project actions (view, edit, delete project, invite/remove members) that establish the foundation for role-based access control.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/projects_data_model_53.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n-- Project roles\nCREATE TYPE public.project_role AS ENUM ('owner', 'admin', 'member');\n\n-- Project actions\nCREATE TYPE public.project_action AS ENUM (\n  'view_project',\n  'edit_project',\n  'delete_project',\n  'invite_member',\n  'remove_member'\n);\n```\n\n----------------------------------------\n\nTITLE: Protecting API Routes with Authentication\nDESCRIPTION: Implementation of an API route with authentication middleware using the withAuthedUser HOC. This ensures only authenticated users can access the API endpoint.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/introduction_running_the_application_technical_details_6.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextApiRequest, NextApiResponse } from \"next\";\nimport { withAuthedUser } from '~/core/middleware/with-authed-user';\n\nfunction helloWorldHandler(req: NextApiRequest, res: NextApiResponse) {\n  res.status(200).json({ text: 'Hello' })\n}\n\nexport default withAuthedUser(\n  helloWorldHandler\n);\n```\n\n----------------------------------------\n\nTITLE: Loading User Accounts using Account API in TSX\nDESCRIPTION: Demonstrates fetching a list of user accounts associated with the current user using the `loadUserAccounts` method. This returns an array where each account object contains `label`, `value`, and `image` properties.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/custom_analytics_provider_google_analytics_provider_posthog_analytics_provider_36.md#2025-04-22_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\nconst api = createAccountsApi(client);\nconst accounts = await api.loadUserAccounts();\n```\n\n----------------------------------------\n\nTITLE: Setting Default Locale in Environment Variables\nDESCRIPTION: How to set the default locale in the .env file for a Makerkit application. This simple configuration allows you to change the default language of your application.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/uploading_data_to_storage_writing_data_to_supabase_data_fetching_77.md#2025-04-22_snippet_31\n\nLANGUAGE: txt\nCODE:\n```\nDEFAULT_LOCALE=de\n```\n\n----------------------------------------\n\nTITLE: Basic Hero Component Usage Example\nDESCRIPTION: A basic example of using the Hero component with Pill, CtaButton, and Image components for a landing page.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/app_breadcrumbs_bordered_navigation_menu_card_button_39.md#2025-04-22_snippet_25\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Hero, Pill, CtaButton } from '@kit/ui/marketing';\nimport Image from 'next/image';\n\nfunction LandingPage() {\n  return (\n    <Hero\n      pill={<Pill>New Feature</Pill>}\n      title=\"Welcome to Our App\"\n      subtitle=\"Discover the power of our innovative solution\"\n      cta={<CtaButton>Get Started</CtaButton>}\n      image={\n        <Image\n          src=\"/hero-image.jpg\"\n          alt=\"Hero Image\"\n          width={1200}\n          height={600}\n        />\n      }\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Internal Package to Next.js Configuration\nDESCRIPTION: Update the next.config.mjs file to include your new package in the INTERNAL_PACKAGES array to make fast refresh work when making changes to the package.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/adding_turborepo_package_approaching_local_development_database_functions_44.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst INTERNAL_PACKAGES = [\n  // all internal packages,\n  '@kit/my-package',\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Cloudflare Turnstile Environment Variables\nDESCRIPTION: Environment variable configuration for implementing Cloudflare Turnstile captcha protection.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/cms_api_cms_creating_your_own_cms_client_42.md#2025-04-22_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nCAPTCHA_SECRET_TOKEN=\nNEXT_PUBLIC_CAPTCHA_SITE_KEY=\n```\n\n----------------------------------------\n\nTITLE: Extending User Roles Enum Example (TypeScript)\nDESCRIPTION: Provides an example of extending the `MembershipRole` enum with custom roles like `Readonly` and `AccountManager`, replacing the default `Member` and `Admin` roles. This customizes the application's permission structure.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/commands_cors_develop_firebase_security_rules_5.md#2025-04-22_snippet_34\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nexport enum MembershipRole {\n  Readonly,\n  AccountManager,\n  Owner,\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Listing Running Docker Containers\nDESCRIPTION: Commands to list and optionally kill all running Docker containers to resolve Supabase stopping issues\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/supabase_not_stopping_tables_not_found_dark_theme_22.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker ps\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker kill $(docker ps -q)\n```\n\n----------------------------------------\n\nTITLE: SQL Function for Checking Team Membership\nDESCRIPTION: SQL function to check if a user is a member of a team account. Used in the accounts table to restrict access to team members.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/supabase_clients_data_fetching_adding_pages_63.md#2025-04-22_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\npublic.is_team_member(\n  account_id uuid,\n  user_id uuid\n)\n```\n\n----------------------------------------\n\nTITLE: Integrating withCsrf for CSRF Protection in Next.js TypeScript\nDESCRIPTION: The `withCsrf` utility function adds CSRF protection to API endpoints, rejecting requests with an invalid CSRF token with a `403` error. Integrate using `withPipe` with other middleware. Dependencies include `~/core/middleware/with-authed-user`, `~/core/middleware/with-csrf`, and others.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/adding_admin_users_admin_overview_admin_1.md#2025-04-22_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\nimport { NextApiRequest,NextApiResponse } from \"next\";\n\nimport { withAuthedUser } from '~/core/middleware/with-authed-user';\nimport { withPipe } from '~/core/middleware/with-pipe';\nimport { withExceptionFilter } from '~/core/middleware/with-exception-filter';\nimport { withCsrf } from '~/core/middleware/with-csrf';\n\nexport default function owner(req: NextApiRequest, res: NextApiResponse) {\n  const handler = withPipe(\n    withCsrf(),\n    withAuthedUser,\n    (req, res) => {\n      res.status(200).json({ message: 'Hello World!' });\n    }\n  );\n\n  return withExceptionFilter(req, res)(handler);\n}\n```\n\n----------------------------------------\n\nTITLE: Git Pre-Commit Hook Script (Shell)\nDESCRIPTION: This script content is placed in the `.git/hooks/pre-commit` file. Before a commit is finalized, it runs `pnpm run typecheck` and `pnpm run lint` across the relevant packages (optimized by Turborepo) to ensure code passes type checks and adheres to linting rules.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/configuring_supabase_database_webhooks_fly_production_environment_variables_95.md#2025-04-22_snippet_24\n\nLANGUAGE: sh\nCODE:\n```\n#!/bin/sh\n\npnpm run typecheck\npnpm run lint\n```\n\n----------------------------------------\n\nTITLE: Configuring Stripe Pricing Table in TypeScript\nDESCRIPTION: Example configuration for Stripe pricing table in MakerKit. This snippet demonstrates how to define multiple products with different plans, features, and Stripe price IDs.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/migrations_extending_organizations_organization_hooks_10.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nstripe: {\n  embedded: true,\n  displayMode: StripeCheckoutDisplayMode.Popup,\n  products: [\n    {\n      name: 'Basic',\n      description: 'Description of your Basic plan',\n      badge: `Up to 20 users`,\n      features: [\n        'Basic Reporting',\n        'Up to 20 users',\n        '1GB for each user',\n        'Chat Support',\n      ],\n      plans: [\n        {\n          name: 'Monthly',\n          price: '$9',\n          stripePriceId: '<price_id>',\n        },\n        {\n          name: 'Yearly',\n          price: '$90',\n          stripePriceId: '<price_id>',\n        },\n      ],\n    },\n    {\n      name: 'Pro',\n      badge: `Most Popular`,\n      recommended: true,\n      description: 'Description of your Pro plan',\n      features: [\n        'Advanced Reporting',\n        'Up to 50 users',\n        '5GB for each user',\n        'Chat and Phone Support',\n      ],\n      plans: [\n        {\n          name: 'Monthly',\n          price: '$29',\n          stripePriceId: 'pro-plan-mth',\n        },\n        {\n          name: 'Yearly',\n          price: '$200',\n          stripePriceId: 'pro-plan-yr'\n        },\n      ],\n    },\n    {\n      name: 'Premium',\n      description: 'Description of your Premium plan',\n      badge: ``,\n      features: [\n        'Advanced Reporting',\n        'Unlimited users',\n        '50GB for each user',\n        'Account Manager',\n      ],\n      plans: [\n        {\n          name: '',\n          price: 'Contact us',\n          stripePriceId: '',\n          label: `Contact us`,\n          href: `/contact`,\n        },\n      ],\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring i18n for Remix Firebase SaaS\nDESCRIPTION: This snippet shows the configuration for internationalization (i18n) in a Remix Firebase SaaS application. It includes settings for supported languages, default namespace, and React options using the i18next library.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/develop_firebase_security_rules_emails_encrypting_secrets_71.md#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nconst i18Config = {\n  fallbackLanguage: DEFAULT_LOCALE,\n  supportedLanguages: [DEFAULT_LOCALE, 'es'],\n  defaultNS: ['common', 'auth', 'organization', 'profile', 'subscription'],\n  react: { useSuspense: false },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Tasks Table Schema in SQL\nDESCRIPTION: SQL schema for creating a tasks table that relates to projects via foreign key relationship. Includes basic task fields and timestamps.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/projects_data_model_53.md#2025-04-22_snippet_24\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE if not exists public.tasks (\n  id uuid DEFAULT gen_random_uuid() PRIMARY KEY,\n  name text NOT NULL,\n  description text,\n  project_id uuid NOT NULL REFERENCES public.projects(id) ON DELETE CASCADE,\n  created_at timestamptz NOT NULL DEFAULT NOW(),\n  updated_at timestamptz NOT NULL DEFAULT NOW()\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Application Structure in Next.js Firebase Project\nDESCRIPTION: Demonstrates how to structure a Next.js Firebase project by adding new entities like 'events' through organized folders in `lib`, `components`, and `pages`, following best practices for maintainability and clarity. No dependencies involved.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/adding_admin_users_admin_overview_admin_1.md#2025-04-22_snippet_16\n\nLANGUAGE: txt\nCODE:\n```\n- src\n  - components\n    - events\n      - EventsContainerComponent.tsx\n      - ...\n\n  - lib\n    - events\n      - types\n        - event-model.ts\n        - ...\n      - hooks\n        - use-fetch-events.ts\n        - use-create-event.ts\n        - ...\n      - utils\n        - create-event-model.ts\n\n  - pages\n    - events\n      - page.tsx\n      - [event].tsx\n```\n\n----------------------------------------\n\nTITLE: Handling Database Webhook Events in Next.js API Route (TypeScript)\nDESCRIPTION: This TypeScript snippet defines a Next.js API route that processes custom webhooks from the database using the Makerkit 'getDatabaseWebhookHandlerService'. It sets up a POST handler, applies custom logic for database events (such as handling 'INSERT' events on an 'invitations' table), and returns appropriate response codes. It requires '@kit/database-webhooks' and is intended for use in apps/web/app/api/db/webhook/route.ts. The input is a Request; output is an HTTP Response.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/adding_turborepo_package_approaching_local_development_database_functions_44.md#2025-04-22_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  getDatabaseWebhookHandlerService,\n} from '@kit/database-webhooks';\n\n/**\n * @name POST\n * @description POST handler for the webhook route that handles the webhook event\n */\nexport async function POST(request: Request) {\n  const service = getDatabaseWebhookHandlerService();\n\n  try {\n    // handle the webhook event\n    await service.handleWebhook(request, {\n      handleEvent(change) {\n        if (change.type === 'INSERT' && change.table === 'invitations') {\n          // do something with the invitation\n        }\n      },\n    });\n\n    return new Response(null, { status: 200 });\n  } catch {\n    return new Response(null, { status: 500 });\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Updating Tasks in Firestore using React Hook\nDESCRIPTION: This code snippet introduces a React hook `useUpdateTask`, which is used to update an existing task in Firestore. It returns a callback function to update task details using `updateDoc`. The hook requires `reactfire` and a Firestore setup.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/development_getting_started_environment_variables_firestore_data_fetching_74.md#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCallback } from 'react';\nimport { useFirestore } from 'reactfire';\nimport { doc, updateDoc } from 'firebase/firestore';\nimport { Task } from '~/lib/tasks/types/task';\n\nfunction useUpdateTask(taskId: string) {\n  const firestore = useFirestore();\n  const tasksCollection = 'tasks';\n\n  const docRef = doc(firestore, tasksCollection, taskId);\n\n  return useCallback(\n    (task: Partial<Task>) => {\n      return updateDoc(docRef, task);\n    },\n    [docRef]\n  );\n}\n\nexport default useUpdateTask;\n```\n\n----------------------------------------\n\nTITLE: Implementing Onboarding Route Middleware in Next.js\nDESCRIPTION: Middleware handler for the /onboarding route that verifies user authentication and MFA requirements. Redirects unauthenticated users to sign in page.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/waitlist_plugin_plugins_drizzle_supabase_52.md#2025-04-22_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  pattern: new URLPattern({ pathname: '/onboarding/*?' }),\n  handler: async (req: NextRequest, res: NextResponse) => {\n    const {\n      data: { user },\n    } = await getUser(req, res);\n\n    if (!user) {\n      const signIn = pathsConfig.auth.signIn;\n      const redirectPath = `${signIn}?next=${next}`;\n\n      return NextResponse.redirect(new URL(redirectPath, origin).href);\n    }\n\n    const supabase = createMiddlewareClient(req, res);\n\n    const requiresMultiFactorAuthentication =\n      await checkRequiresMultiFactorAuthentication(supabase);\n\n    if (requiresMultiFactorAuthentication) {\n      return NextResponse.redirect(\n        new URL(pathsConfig.auth.verifyMfa, origin).href,\n      );\n    }\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Cleaning the Project Workspace\nDESCRIPTION: Commands to clean the project workspace and remove dependencies before reinstallation.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/configuring_supabase_database_webhooks_fly_production_environment_variables_95.md#2025-04-22_snippet_35\n\nLANGUAGE: bash\nCODE:\n```\npnpm run clean:workspaces\npnpm run clean\n```\n\n----------------------------------------\n\nTITLE: Sending Email Notification After Signup in TypeScript with Supabase\nDESCRIPTION: This snippet demonstrates how to send an email notification to a user after they sign up. It uses the createNotificationsApi function with the Supabase client to create and send the notification.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/introduction_migration_from_remix_navigating_codebase_67.md#2025-04-22_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createNotificationsApi } from '@kit/notifications/api';\nimport { getSupabaseServerAdminClient } from '@kit/supabase/server-admin-client';\n\nasync function sendNotificationAfterSignup(\n  accountId: string,\n) {\n  const client = getSupabaseServerAdminClient();\n  const api = createNotificationsApi(client);\n\n  await api.createNotification({\n    account_id: accountId,\n    body: 'You have successfully signed up!',\n    channel: 'email',\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Submitting Form Data to an Action using useFetcher in React (TypeScript)\nDESCRIPTION: Shows a React component (`DeleteAccountForm`) using `react-hook-form` (`useForm`, `zodResolver`) for form management and `useFetcher` from React Router to submit form data to a server action. It sets the `intent` and `payload`, specifies JSON encoding (`encType`), and uses the POST method. Disables the button during submission.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/creating_your_own_cms_client_keystatic_wordpress_62.md#2025-04-22_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\nfunction DeleteAccountForm(props: { email: string }) {\n  const form = useForm({\n    resolver: zodResolver(DeleteAccountFormSchema),\n    defaultValues: {\n      otp: '',\n    },\n  });\n\n  const fetcher = useFetcher();\n  const pending = fetcher.state === 'submitting';\n\n  return (\n    <Form {...form}>\n      <form\n        onSubmit={form.handleSubmit((data) => {\n          return fetcher.submit(\n            {\n              intent: 'delete-account',\n              payload: data,\n            },\n            {\n              encType: 'application/json',\n              method: 'POST',\n            },\n          );\n        })}\n      >\n        {/* Form fields */}\n\n        <Button\n          type=\"submit\"\n          disabled={pending}\n          variant=\"destructive\"\n        >\n          {pending ? 'Deleting Account...' : 'Delete Account'}\n        </Button>\n      </form>\n    </Form>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth Provider Logos in React\nDESCRIPTION: Configuration for OAuth provider logos in the authentication UI, mapping provider names to their corresponding logo assets or icons.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/updating_sidebar_menu_change_auth_strategy_setup_oauth_79.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nfunction getOAuthProviderLogos(): Record<string, string | React.ReactNode> {\n  return {\n    password: <AtSymbolIcon className={'h-[22px] w-[22px]'} />,\n    phone: <DevicePhoneMobileIcon className={'h-[22px] w-[22px]'} />,\n    google: '/assets/images/google.webp',\n    facebook: '/assets/images/facebook.webp',\n    twitter: '/assets/images/twitter.webp',\n    github: '/assets/images/github.webp',\n    microsoft: '/assets/images/microsoft.webp',\n    apple: '/assets/images/apple.webp',\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic GET API Route in Next.js\nDESCRIPTION: Simple example of creating a GET API route handler that returns a JSON response in Next.js App Router\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/validating_api_input_zod_development_clone_repository_31.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextResponse } from \"next/server\";\n\nexport function GET() {\n  return NextResponse.json({ text: 'Hello' });\n}\n```\n\n----------------------------------------\n\nTITLE: Handling CSRF in Next.js APIs\nDESCRIPTION: This TypeScript code snippet demonstrates how to secure Next.js API routes using CSRF protection. It imports necessary middleware like `withCsrf` and `withAuthedUser` to authenticate requests and attach the CSRF token. The `members` function is the entry point that uses `withPipe` to combine middleware and ensure valid CSRF token submission before executing `membersHandler`. Dependencies include Next.js, a server-side rendering framework, and the custom middleware functions.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/ci_tests_running_tests_testing_limitations_12.md#2025-04-22_snippet_27\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { NextApiRequest, NextApiResponse } from \"next\";\nimport { withPipe } from \"~/core/middleware/with-pipe\";\nimport { withAuthedUser } from \"~/core/middleware/with-authed-user\";\nimport { withExceptionFilter } from '~/core/middleware/with-exception-filter';\nimport { withCsrf } from '~/core/middleware/with-csrf';\n\nexport default function members(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n  const handler = withPipe(\n    withAuthedUser,\n    withCsrf(),\n    membersHandler\n  );\n\n  return withExceptionFilter(req, res)(handler);\n}\n\nfunction membersHandler(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n  // API logic\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving the User Session on the Frontend with useUserSession - TypeScript/React\nDESCRIPTION: Demonstrates how to obtain the current user session inside a React component via the useUserSession hook. Only available within React runtime and must be called within a function component. Session includes user ID, email, and related auth data.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/adding_app_pages_guarding_pages_updating_sidebar_menu_32.md#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport useUserSession from '~/core/hooks/use-user-session';\n\nconst userSession = useUserSession();\n```\n\n----------------------------------------\n\nTITLE: Return Type Definition for OTP API createToken Method (TypeScript)\nDESCRIPTION: Specifies the structure of the object returned by the `api.createToken` method in the OTP API. It includes the database ID, the actual token string, its expiration timestamp, and a count of previously revoked tokens.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/analytics_api_custom_analytics_provider_google_analytics_provider_57.md#2025-04-22_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  id: string;           // Database ID of the token\n  token: string;        // The actual token to send to the user\n  expiresAt: string;    // Expiration timestamp\n  revokedPreviousCount: number; // Number of previously revoked tokens\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Entitlements Service Implementation\nDESCRIPTION: TypeScript service class for managing feature entitlements and usage tracking, providing a clean API for communicating with Supabase backend.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_billing_checkout_addons_subscription_entitlements_54.md#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { SupabaseClient } from '@supabase/supabase-js';\nimport type { Database } from '~/lib/database.types';\n\nexport function createEntitlementsService(\n  client: SupabaseClient<Database>,\n  accountId: string\n) {\n  return new EntitlementsService(client, accountId);\n}\n\nclass EntitlementsService {\n  constructor(\n    private readonly client: SupabaseClient<Database>,\n    private readonly accountId: string\n  ) {}\n\n  async canUseFeature(feature: string) {\n    const { data, error } = await this.client.rpc('can_use_feature', {\n      p_account_id: this.accountId,\n      p_feature: feature,\n    });\n\n    if (error) throw error;\n\n    return data;\n  }\n\n  async getEntitlement(feature: string) {\n    const { data, error } = await this.client.rpc('get_entitlement', {\n      p_account_id: this.accountId,\n      p_feature: feature,\n    });\n\n    if (error) throw error;\n\n    return data;\n  }\n\n  async updateFeatureUsage(feature: string, usage: Record<string, unknown>) {\n    const { error } = await this.client.rpc('update_feature_usage', {\n      p_account_id: this.accountId,\n      p_feature: feature,\n      p_usage: usage,\n    });\n\n    if (error) throw error;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Content with Contentlayer in a Remix Application\nDESCRIPTION: Command to build content using Contentlayer before running a Remix application, typically needed to process markdown or other content files.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/functions_initializing_project_introduction_85.md#2025-04-22_snippet_28\n\nLANGUAGE: txt\nCODE:\n```\nnpm run contentlayer:build\n```\n\n----------------------------------------\n\nTITLE: Complete Tailwind CSS Configuration for Makerkit\nDESCRIPTION: This is the default Tailwind CSS configuration file for Makerkit projects, including font families, colors, border radius, keyframes, and animations.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_one_time_payments_stripe_webhooks_payments_35.md#2025-04-22_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nconst colors = require('tailwindcss/colors');\n\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: ['./app/**/*.{ts,tsx,jsx,js}'],\n  darkMode: 'class',\n  theme: {\n    extend: {\n      fontFamily: {\n        serif: ['serif'],\n        heading: ['system-ui', 'Helvetica Neue', 'Helvetica', 'Arial'],\n        sans: [\n          'system-ui',\n          'BlinkMacSystemFont',\n          'Inter',\n          'Segoe UI',\n          'Roboto',\n          'Ubuntu',\n        ],\n        monospace: [`SF Mono`, `ui-monospace`, `Monaco`, 'Monospace'],\n      },\n      colors: {\n        border: 'hsl(var(--border))',\n        input: 'hsl(var(--input))',\n        ring: 'hsl(var(--ring))',\n        background: 'hsl(var(--background))',\n        foreground: 'hsl(var(--foreground))',\n        dark: {\n          ...colors.slate,\n          DEFAULT: colors.slate[950],\n          foreground: colors.slate[100],\n        },\n        primary: {\n          DEFAULT: 'hsl(var(--primary))',\n          foreground: 'hsl(var(--primary-foreground))',\n          ...colors.violet,\n        },\n        secondary: {\n          DEFAULT: 'hsl(var(--secondary))',\n          foreground: 'hsl(var(--secondary-foreground))',\n        },\n        destructive: {\n          DEFAULT: 'hsl(var(--destructive))',\n          foreground: 'hsl(var(--destructive-foreground))',\n        },\n        muted: {\n          DEFAULT: 'hsl(var(--muted))',\n          foreground: 'hsl(var(--muted-foreground))',\n        },\n        accent: {\n          DEFAULT: 'hsl(var(--accent))',\n          foreground: 'hsl(var(--accent-foreground))',\n        },\n        popover: {\n          DEFAULT: 'hsl(var(--popover))',\n          foreground: 'hsl(var(--popover-foreground))',\n        },\n        card: {\n          DEFAULT: 'hsl(var(--card))',\n          foreground: 'hsl(var(--card-foreground))',\n        },\n      },\n      borderRadius: {\n        lg: 'var(--radius)',\n        md: 'calc(var(--radius) - 2px)',\n        sm: 'calc(var(--radius) - 4px)',\n      },\n      keyframes: {\n        'accordion-down': {\n          from: { height: 0 },\n          to: { height: 'var(--radix-accordion-content-height)' },\n        },\n        'accordion-up': {\n          from: { height: 'var(--radix-accordion-content-height)' },\n          to: { height: 0 },\n        },\n      },\n      animation: {\n        'accordion-down': 'accordion-down 0.2s ease-out',\n        'accordion-up': 'accordion-up 0.2s ease-out',\n      },\n    },\n  },\n  plugins: [require('tailwindcss-animate')],\n};\n```\n\n----------------------------------------\n\nTITLE: Checking Subscription Status with useIsSubscriptionActive Hook\nDESCRIPTION: This custom hook checks if the current organization has an active subscription (either 'active' or 'trialing'). It can be used to restrict access to features or display different UI based on subscription status.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/deploying_production_environment_variables_functions_26.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { Stripe } from 'stripe';\nimport { useCurrentOrganization } from '~/lib/organizations/hooks/use-current-organization';\n\nconst ACTIVE_STATUSES: Stripe.Subscription.Status[] = ['active', 'trialing'];\n\n/**\n * @name useIsSubscriptionActive\n * @description Returns whether the organization is on any paid\n * subscription, regardless of plan.\n */\nfunction useIsSubscriptionActive() {\n  const organization = useCurrentOrganization();\n  const status = organization?.subscription?.status;\n\n  if (!status) {\n    return false;\n  }\n\n  return ACTIVE_STATUSES.includes(status);\n}\n\nexport default useIsSubscriptionActive;\n```\n\n----------------------------------------\n\nTITLE: Creating Database Mutations for Supabase in Next.js\nDESCRIPTION: Example of a mutation function that creates a new task in Supabase. This pattern encapsulates database operations in dedicated functions, making them reusable across the application.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/server_actions_uploading_data_to_storage_writing_data_to_supabase_17.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { SupabaseClient } from '@supabase/supabase-js';\nimport type { Database } from '../../database.types';\nimport type Task from '~/lib/tasks/types/task';\nimport { TASKS_TABLE } from '~/lib/db-tables';\n\ntype Client = SupabaseClient<Database>;\n\nexport function createTask(client: Client, task: Omit<Task, 'id'>) {\n  return client.from(TASKS_TABLE).insert({\n    name: task.name,\n    organization_id: task.organizationId,\n    due_date: task.dueDate,\n    done: task.done,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Current Organization with React Hook (TSX)\nDESCRIPTION: This snippet demonstrates using the `useCurrentOrganization` React hook within a frontend component to access the currently selected organization's data. This hook relies on the organization data being passed down from the backend via React Context, typically set up in a layout component within the `[organization]` route structure.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/api_routes_vs_server_actions_api_routes_call_api_routes_from_client_19.md#2025-04-22_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\nimport useCurrentOrganization from '~/lib/organizations/hooks/use-current-organization';\n\nconst organization = useCurrentOrganization();\n```\n\n----------------------------------------\n\nTITLE: Configuring Paths with Zod Schema in TypeScript\nDESCRIPTION: Defines and validates application routing paths using Zod schema. Includes paths for authentication, personal account settings, and team-related routes.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stepper_components_application_configuration_61.md#2025-04-22_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport { z } from 'zod';\n\nconst PathsSchema = z.object({\n  auth: z.object({\n    signIn: z.string().min(1),\n    signUp: z.string().min(1),\n    verifyMfa: z.string().min(1),\n    callback: z.string().min(1),\n    passwordReset: z.string().min(1),\n    passwordUpdate: z.string().min(1),\n  }),\n  app: z.object({\n    home: z.string().min(1),\n    personalAccountSettings: z.string().min(1),\n    personalAccountBilling: z.string().min(1),\n    personalAccountBillingReturn: z.string().min(1),\n    accountHome: z.string().min(1),\n    accountSettings: z.string().min(1),\n    accountBilling: z.string().min(1),\n    accountMembers: z.string().min(1),\n    accountBillingReturn: z.string().min(1),\n    joinTeam: z.string().min(1),\n  }),\n});\n\nconst pathsConfig = PathsSchema.parse({\n  auth: {\n    signIn: '/auth/sign-in',\n    signUp: '/auth/sign-up',\n    verifyMfa: '/auth/verify',\n    callback: '/auth/callback',\n    passwordReset: '/auth/password-reset',\n    passwordUpdate: '/update-password',\n  },\n  app: {\n    home: '/home',\n    personalAccountSettings: '/home/settings',\n    personalAccountBilling: '/home/billing',\n    personalAccountBillingReturn: '/home/billing/return',\n    accountHome: '/home/[account]',\n    accountSettings: `/home/[account]/settings`,\n    accountBilling: `/home/[account]/billing`,\n    accountMembers: `/home/[account]/members`,\n    accountBillingReturn: `/home/[account]/billing/return`,\n    joinTeam: '/join',\n  },\n} satisfies z.infer<typeof PathsSchema>);\n\nexport default pathsConfig;\n```\n\n----------------------------------------\n\nTITLE: Implementing TasksPage Component with Loader\nDESCRIPTION: Comprehensive implementation of the TasksPage component including loader function for data fetching, page layout, and task management functionality.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/supabase_data_fetching_supabase_data_writing_tailwind_css_86.md#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { ActionArgs, MetaFunction } from '@remix-run/node';\n\nimport { json } from '@remix-run/node';\nimport { Form, useLoaderData } from '@remix-run/react';\nimport type { LoaderArgs } from '@remix-run/server-runtime';\n\n// ... [rest of the imports]\n\nexport const meta: MetaFunction = () => {\n  return [\n    {\n      title: 'Tasks',\n    },\n  ];\n};\n\nexport async function loader(args: LoaderArgs) {\n  // ... [loader implementation]\n}\n\nfunction TasksPage() {\n  const { tasks, count, pageCount, query, pageIndex, pageSize } =\n    useLoaderData<typeof loader>();\n\n  return (\n    <>\n      <AppHeader>\n        <span className={'flex space-x-2'}>\n          <RectangleStackIcon className=\"w-6\" />\n\n          <span>\n            <Trans i18nKey={'common:tasksTabLabel'} />\n          </span>\n        </span>\n      </AppHeader>\n\n      <AppContainer>\n\n      </AppContainer>\n    </>\n  );\n}\n\nexport default TasksPage;\n```\n\n----------------------------------------\n\nTITLE: Implementing Email Sending Function\nDESCRIPTION: TypeScript interface and function for sending transactional emails\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/server_actions_uploading_data_to_storage_writing_data_to_supabase_17.md#2025-04-22_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\ninterface SendEmailParams {\n  from: string;\n  to: string;\n  subject: string;\n  text?: string;\n  html?: string;\n}\n\nimport { sendEmail } from '~/core/email/send-email';\n\nfunction sendTransactionalEmail() {\n  const sender = configuration.email.senderAddress;\n\n  return sendEmail({\n    to: `youruser@email.com`,\n    from: sender,\n    subject: `Achievement Unlocked!`,\n    html: `Yay, you unlocked an achievement!`,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Database Mutation Function\nDESCRIPTION: Function to create a new task in the Supabase database. It uses the client to insert a task record into the tasks table and throws an error if the operation fails.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/uploading_data_to_storage_writing_data_to_supabase_data_fetching_77.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport function createTask(\n  client: Client,\n  task: Task,\n) {\n  return client.from(TASKS_TABLE).insert(task).throwOnError();\n}\n```\n\n----------------------------------------\n\nTITLE: RLS Policy Creation\nDESCRIPTION: SQL commands to create Row Level Security (RLS) policies for tasks table with permission checks.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/marketing_pages_migrations_permissions_and_roles_45.md#2025-04-22_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy insert_tasks on public.tasks\n    for insert\n    with check (\n        public.has_permission(auth.uid(), account_id, 'tasks.write'::app_permissions)\n    );\n\ncreate policy delete_tasks on public.tasks\n    for delete\n    using (\n        public.has_permission(auth.uid(), account_id, 'tasks.delete'::app_permissions)\n    );\n```\n\n----------------------------------------\n\nTITLE: Checking User Authentication in Actions using requireUser (TypeScript)\nDESCRIPTION: Demonstrates how to enforce authentication within an action using a helper function (`requireUser`). If the user is not authenticated (`!auth.data`), the action redirects to the login page (`auth.redirectTo`). Otherwise, it proceeds with the authenticated user data.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/creating_your_own_cms_client_keystatic_wordpress_62.md#2025-04-22_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\nconst auth = await requireUser(client);\n\nif (!auth.data) {\n  return redirectDocument(auth.redirectTo);\n}\n\nconst user = auth.data;\n// Continue with authorized action\n\n```\n\n----------------------------------------\n\nTITLE: Task Creation Hook with SWR\nDESCRIPTION: Custom hook implementation using SWR mutation for task creation. Integrates with Supabase client and handles navigation after successful creation.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/server_actions_uploading_data_to_storage_writing_data_to_supabase_17.md#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport useSWRMutation from 'swr/mutation';\nimport { useRouter } from 'next/navigation';\n\nimport useSupabase from '~/core/hooks/use-supabase';\nimport { createTask } from '~/lib/tasks/mutations';\nimport type Task from '~/lib/tasks/types/task';\n\nfunction useCreateTaskMutation() {\n  const client = useSupabase();\n  const router = useRouter();\n  const key = 'tasks';\n\n  return useSWRMutation(key, async (_, { arg: task }: { arg: Omit<Task, 'id'> }) => {\n    return createTask(client, task);\n  }, {\n    onSuccess: () => router.refresh()\n  });\n}\n\nexport default useCreateTaskMutation;\n```\n\n----------------------------------------\n\nTITLE: Creating Feature Access Check Hook\nDESCRIPTION: Custom hook that combines subscription status and admin role check to determine if a user can create new items.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/subscription_permissions_organizations_lemon_squeezy_23.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport function useCreateNewThing(\n  userRole: MembershipRole,\n) {\n  const isPayingUser = useIsSubscriptionActive();\n\n  return isPayingUser && isAdmin(userRole);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Public Environment Variables to Client-Side\nDESCRIPTION: Code showing how to add public environment variables to the client-side by adding them to the PUBLIC_ENV object in the application.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stepper_components_application_configuration_61.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @name PUBLIC_ENV\n * @description This is the public environment variables that are available to the client.\n * We use this to expose public environment variables to the client.\n */\nexport const PUBLIC_ENV = {\n  // ... default public vars,\n\n  // Add your public environment variables here ...\n};\n```\n\n----------------------------------------\n\nTITLE: Handling API Requests and Reporting Usage in TypeScript\nDESCRIPTION: Demonstrates an API handler function that captures API requests and reports the usage to the billing provider. Implements error handling for network operations.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/lemon_squeezy_metered_usage_one_off_payments_38.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nasync function apiHandler(accountId: string) {\n  try {\n    // assume consumeApi returns the number of requests made\n    const quantity = await consumeApi(accountId);\n\n    await reportUsage(accountId, quantity);\n  } catch (error) {\n    console.error(error);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Protecting Routes with Session Requirement and Redirection\nDESCRIPTION: Guards application pages for authenticated users by using the requireSession function with redirection to the homepage if no valid session exists.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/organization_sdk_organization_subscription_sdk_sdk_25.md#2025-04-22_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nimport { redirect } from \"next/navigation\";\n\nasync function MyPage() {\n  const session = await requireSession();\n\n  if (!session) {\n    redirect('/');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Route-Specific Types for Loaders and Components (TypeScript)\nDESCRIPTION: Shows an example of a generated type definition file (`+types.ts`) used by Makerkit. It defines specific types for a route's `LoaderArgs`, `LoaderData` (inferred from the loader's return type), `ComponentProps`, and `MetaArgs`, enabling end-to-end type safety.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/creating_your_own_cms_client_keystatic_wordpress_62.md#2025-04-22_snippet_36\n\nLANGUAGE: tsx\nCODE:\n```\n// In ~/types/app/routes/home/account/+types.ts\nexport namespace Route {\n  export type LoaderArgs = {\n    request: Request;\n    params: {\n      account: string;\n    };\n  };\n\n  export type LoaderData = Awaited<ReturnType<typeof loader>>;\n\n  export type ComponentProps = {\n    loaderData: LoaderData;\n  };\n\n  export type MetaArgs = {\n    data: LoaderData | undefined;\n  };\n}\n\n```\n\n----------------------------------------\n\nTITLE: Run Local Stripe Webhooks Server Command\nDESCRIPTION: Command to run a local Stripe webhooks server for testing Stripe integration. Requires Docker or a local Stripe installation.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/uploading_data_to_storage_writing_data_to_supabase_data_fetching_77.md#2025-04-22_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nnpm run stripe:listen\n```\n\n----------------------------------------\n\nTITLE: Using Supabase Client in Server Environment (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use the Supabase client in a server environment using the getSupabaseServerClient function. It can be used across server environments like Server Actions, Route Handlers, and Server Components.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/realtime_updates_server_components_7.md#2025-04-22_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\n\nexport async function myServerAction() {\n  const supabase = getSupabaseServerClient();\n\n  const { data, error } = await supabase.from('users').select('*')\n\n  return {\n    success: true,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Change Event and Table Types for Webhooks (TypeScript)\nDESCRIPTION: This TypeScript code defines core types for representing database table change events, including 'Tables', 'TableChangeType', and 'RecordChange'. These are dependencies for type-safe webhook handling in Makerkit Supabase projects. Place in a shared types directory and ensure your app imports from '@kit/supabase/database'. Used to enforce accurate typing in event handlers for specific tables and actions. Inputs are generic type parameters for specifying tables; outputs are strongly typed webhook change objects.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/adding_turborepo_package_approaching_local_development_database_functions_44.md#2025-04-22_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Database } from '@kit/supabase/database';\n\nexport type Tables = Database['public']['Tables'];\n\nexport type TableChangeType = 'INSERT' | 'UPDATE' | 'DELETE';\n\nexport interface RecordChange<\n  Table extends keyof Tables,\n  Row = Tables[Table]['Row'],\n> {\n  type: TableChangeType;\n  table: Table;\n  record: Row;\n  schema: 'public';\n  old_record: null | Row;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating Support Ticket Detail Page with Supabase in TypeScript\nDESCRIPTION: This code snippet defines the `TicketDetailPage` React component, which fetches and displays the details of a support ticket from a database using Supabase. Dependencies include `@kit/supabase/server-client` for database operations and a series of UI components such as `Badge`, `Heading`, and custom components like `TicketPriorityBadge`. It requires parameters for `ticketId` and `account` to function. The UI displays ticket details, status, and priority, with placeholders for ticket messages and actions.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/data_fetching_3.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { use } from 'react';\n\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\nimport { Badge } from '@kit/ui/badge';\nimport { If } from '@kit/ui/if';\nimport { Heading } from '@kit/ui/heading';\nimport { PageBody } from '@kit/ui/page';\n\nimport { createTicketsService } from '~/lib/server/tickets/tickets.service';\n\nimport { TicketPriorityBadge } from '../_components/ticket-priority-badge';\nimport { TicketStatusBadge } from '../_components/ticket-status-badge';\n\ninterface TicketDetailPageProps {\n  params: Promise<{\n    ticketId: string;\n    account: string;\n  }>;\n\n  searchParams: Promise<{\n    page?: string;\n  }>;\n}\n\nexport default function TicketDetailPage({\n  params,\n  searchParams,\n}: TicketDetailPageProps) {\n  const client = getSupabaseServerClient();\n  const service = createTicketsService(client);\n\n  const { ticketId, account } = use(params);\n  const page = Number(use(searchParams).page ?? '1');\n\n  const ticket = use(\n    service.getTicket({\n      ticketId,\n      account,\n    }),\n  );\n\n  const timeAgo = getTimeAgo(ticket.created_at);\n\n  return (\n    <div className={'flex flex-1'}>\n      <div className={'flex flex-1 flex-col overflow-y-hidden h-screen space-y-8'}>\n        <div className={'p-4 border-b'}>\n          <div className={'flex flex-col space-y-2.5'}>\n            <Heading className={'font-semibold'} level={5}>\n              {ticket.title}\n            </Heading>\n\n            <div className={'flex space-x-2.5'}>\n              <Badge variant={'outline'}>Created {timeAgo}</Badge>\n\n              <If condition={ticket.customer_email}>\n                <Badge variant={'outline'}>by {ticket.customer_email}</Badge>\n              </If>\n\n              <TicketStatusBadge status={ticket.status}/>\n              <TicketPriorityBadge priority={ticket.priority}/>\n            </div>\n          </div>\n        </div>\n\n        <PageBody>\n          {/* Add the ticket messages here */}\n        </PageBody>\n      </div>\n\n      <div className={'flex flex-col w-[25%] border-l py-4'}>\n        <PageBody>\n          {/* Add the ticket actions here */}\n        </PageBody>\n      </div>\n    </div>\n  );\n}\n\nfunction getTimeAgo(timestamp: string, locale = 'en') {\n  let value;\n\n  const diff = (new Date().getTime() - new Date(timestamp).getTime()) / 1000;\n  const minutes = Math.floor(diff / 60);\n  const hours = Math.floor(minutes / 60);\n  const days = Math.floor(hours / 24);\n  const months = Math.floor(days / 30);\n  const years = Math.floor(months / 12);\n  const rtf = new Intl.RelativeTimeFormat(locale, { numeric: 'auto' });\n\n  if (years > 0) {\n    value = rtf.format(0 - years, 'year');\n  } else if (months > 0) {\n    value = rtf.format(0 - months, 'month');\n  } else if (days > 0) {\n    value = rtf.format(0 - days, 'day');\n  } else if (hours > 0) {\n    value = rtf.format(0 - hours, 'hour');\n  } else if (minutes > 0) {\n    value = rtf.format(0 - minutes, 'minute');\n  } else {\n    value = rtf.format(0 - diff, 'second');\n  }\n\n  return value;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing an Events List Container Component with React and Firebase\nDESCRIPTION: A React component that uses the useFetchEvents custom hook to display a list of events. The component handles loading and error states, and renders each event with its name and description when data is available.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/notifications_plugins_adding_translations_68.md#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useFetchEvents } from '~/lib/events/hooks/use-fetch-events';\nimport Alert from `~/core/ui/Alert`;\n\nconst EventsListContainer: React.FC = () => {\n  const { data: events, status } = useFetchEvents();\n\n  if (status === `loading`) {\n    return <p>Loading Events...</p>\n  }\n\n  if (status === `error`) {\n    return (\n      <Alert type='error'>\n        Ops, we encountered an error!\n      </Alert>\n    );\n  }\n\n  return (\n    <div>\n      {events.map(event => {\n        return (\n          <div key={event.name}>\n            <p>{event.name}</p>\n            <p>{event.description}</p>;\n          </div>\n        );\n      })}\n    </div>\n  )\n};\n\nexport default EventsListContainer;\n```\n\n----------------------------------------\n\nTITLE: Using the Update Task Hook in a React Component\nDESCRIPTION: Demonstrates how to use the useUpdateTask hook within a React component. The component handles form submission and calls the hook to update an existing task in Firestore.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/reading_document_reading_documents_list_creating_document_8.md#2025-04-22_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCallback } from \"react\";\n\nconst UpdateTaskForm = ({ id }: { id: string }) => {\n  const updateTask = useUpdateTask(id);\n\n  // ... other code\n\n  const onSubmit = useCallback(async (task: {\n    title: string;\n    description: string;\n    completed: boolean;\n  }) => {\n    await updateTask(task);\n  }, [updateTask]);\n\n  // ... other code\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Route Components from Remix to React Router\nDESCRIPTION: This TypeScript snippet provides examples of updating route components from Remix to React Router, highlighting changes to import statements, loader, and export functions. Dependencies include React Router utility functions, and the primary task involves adapting to new type definitions and patterns for route handling.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/introduction_migration_from_remix_navigating_codebase_67.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Example - Before (Remix):\n\n// routes/some-page.tsx\nimport { json, type LoaderFunctionArgs } from '@remix-run/node';\nimport { useLoaderData } from '@remix-run/react';\n\nexport const loader = async ({ request }: LoaderFunctionArgs) => {\n  // ...\n  return json({ data });\n};\n\nexport default function SomePage() {\n  const { data } = useLoaderData<typeof loader>();\n  // ...\n}\n\n// Example - After (React Router):\n\n// routes/some-page.tsx\nimport { useLoaderData } from 'react-router';\nimport type { Route } from '~/types/app/routes/+types/some-page';\n\nexport const loader = async (args: Route.LoaderArgs) => {\n  const { request } = args;\n  // ...\n  return { data };\n};\n\nexport default function SomePage(props: Route.ComponentProps) {\n  const { data } = props.loaderData;\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Submitting JSON Data with useFetcher\nDESCRIPTION: Shows how to submit JSON data instead of FormData using Remix's useFetcher. By specifying the encType as 'application/json', the data will be sent as JSON, which can then be parsed in the action function using request.json().\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/user_sdk_sdk_ci_tests_84.md#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nconst fetcher = useFetcher();\n\n<button onClick={() => {\n  fetcher.submit(data, {\n    method: 'POST',\n    encType: 'application/json'\n  })\n}}>Submit</button>\n```\n\n----------------------------------------\n\nTITLE: Installing Data Loader SDK\nDESCRIPTION: Command to install the Data Loader SDK package for fetching data from Supabase.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/ai_text_editor_cookie_banner_feedback_popup_24.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @makerkit/data-loader-supabase-nextjs\n```\n\n----------------------------------------\n\nTITLE: Setting Keystatic Storage Kind\nDESCRIPTION: This environment variable defines the storage strategy for Keystatic. Options include 'local', 'cloud', or 'github'.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stepper_components_application_configuration_41.md#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nNEXT_PUBLIC_KEYSTATIC_STORAGE_KIND=local\n```\n\n----------------------------------------\n\nTITLE: Configuring Captcha Environment Variables - Bash\nDESCRIPTION: Lists required environment variables to enable Cloudflare Turnstile captcha support for server actions. 'CAPTCHA_SECRET_TOKEN' and 'NEXT_PUBLIC_CAPTCHA_SITE_KEY' need to be set in the deployment environment but not checked into version-controlled files for security reasons.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/csrf_protection_react_query_route_handlers_43.md#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nCAPTCHA_SECRET_TOKEN=\nNEXT_PUBLIC_CAPTCHA_SITE_KEY=\n```\n\n----------------------------------------\n\nTITLE: Translation Integration in Server Components\nDESCRIPTION: Examples demonstrating how to bootstrap i18n in server components and use translations using the Trans component and useTranslation hook.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/notifications_plugins_adding_translations_68.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { withI18n } from '~/lib/i18n/with-i18n';\n\nconst Page = () => {\n  return <div>My page</div>;\n};\n\nexport default withI18n(Page);\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Trans } from '@kit/ui';\n\nconst Page = () => {\n  return (\n    <div>\n      <Trans i18nKey=\"auth:signIn\" />\n    </div>\n  );\n};\n\nexport default withI18n(Page);\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useTranslation } from 'react-i18next';\n\nconst MyComponent = () => {\n  const { t } = useTranslation();\n\n  return <div>{t('auth:signIn')}</div>;\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Function to Get Subscription Details in PostgreSQL\nDESCRIPTION: This SQL function retrieves subscription details for a user including plan variant, period start, and period end dates. It joins subscription_items and subscriptions tables to find active subscriptions for a given account ID with 'flat' item type.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/payments_billing_6.md#2025-04-22_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\ncreate\nor replace function public.get_subscription_details (target_account_id uuid) returns table (\n  variant_id varchar,\n  period_starts_at timestamptz,\n  period_ends_at timestamptz\n)\nset search_path = ''\nas $$\nbegin\n  -- select the subscription details for the target account\n  return query select\n        item.variant_id,\n        subscription.period_starts_at,\n        subscription.period_ends_at\n  from\n        public.subscription_items as item\n  join\n        public.subscriptions as subscription\n  on\n        subscription.id = item.subscription_id\n  where\n        subscription.account_id = target_account_id\n  and   subscription.active = true\n  and\n        item.type = 'flat';\nend;\n$$ language plpgsql;\n\ngrant execute on function public.get_subscription_details(uuid) to authenticated, service_role;\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Feature Configuration\nDESCRIPTION: This snippet shows how to disable personal account billing by setting the corresponding environment variable to false in the .env file. This is part of configuring the application for B2B use.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/customization_2.md#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nNEXT_PUBLIC_ENABLE_PERSONAL_ACCOUNT_BILLING=\"false\"\n```\n\n----------------------------------------\n\nTITLE: Updated CSS File Structure for Tailwind CSS v4\nDESCRIPTION: New modular file structure for CSS in Tailwind v4, showing how the stylesheets are organized into separate theme, utility, and component files for better organization.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/running_project_technical_details_update_nextjs15_50.md#2025-04-22_snippet_6\n\nLANGUAGE: txt\nCODE:\n```\nstyles/\n├── globals.css\n├── theme.css\n├── theme.utilities.css\n├── shadcn-ui.css\n├── markdoc.css\n└── makerkit.css\n```\n\n----------------------------------------\n\nTITLE: Handling Different Stripe Webhook Events\nDESCRIPTION: Switch statement to route different types of Stripe webhook events to their appropriate handlers.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_one_time_payments_stripe_webhooks_payments_11.md#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nswitch (event.type) {\n  case StripeWebhooks.Completed: {\n    // handle completed\n  }\n\n  case StripeWebhooks.AsyncPaymentSuccess: {\n     // handle async payment success\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Supabase Client in Server Components\nDESCRIPTION: This snippet demonstrates how to initialize and use a Supabase client within a React Server Component using the getSupabaseServerComponentClient function.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/deploying_production_environment_variables_functions_26.md#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport getSupabaseServerComponentClient from '~/core/supabase/server-component-client';\n\nfunction PageComponent() {\n  const client = getSupabaseServerComponentClient();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Analytics Event Mapping in TypeScript\nDESCRIPTION: Example implementation of an analytics provider showing how to map and handle different types of events including user sign-ins, sign-ups, checkouts, and feature usage. Each event type has a corresponding handler that processes the event payload and tracks it in the analytics system.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/supabase_client_clone_repository_common_commands_56.md#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nconst analyticsMapping: AnalyticsMapping = {\n  'user.signedIn': (event) => {\n    const userId = event.payload.userId;\n\n    if (userId) {\n      analytics.identify(userId);\n    }\n  },\n  'user.signedUp': (event) => {\n    analytics.trackEvent(event.type, event.payload);\n  },\n  'checkout.started': (event) => {\n    analytics.trackEvent(event.type, event.payload);\n  },\n  'user.updated': (event) => {\n    analytics.trackEvent(event.type, event.payload);\n  },\n  'feature.used': (event) => {\n    analytics.trackEvent(event.type, event.payload);\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Flat Subscription in Billing Schema with TypeScript\nDESCRIPTION: This snippet shows how to add a flat subscription line item to a billing plan. It includes details such as the price ID, name, cost, and type of the line item.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/api_billing_api_billing_schema_58.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nexport default createBillingSchema({\n  provider,\n  products: [\n    {\n      id: 'starter',\n      name: 'Starter',\n      description: 'The perfect plan to get started',\n      currency: 'USD',\n      badge: `Value`,\n      plans: [\n        {\n          name: 'Starter Monthly',\n          id: 'starter-monthly',\n          trialDays: 7,\n          paymentType: 'recurring',\n          interval: 'month',\n          lineItems: [\n            {\n              id: 'price_1NNwYHI1i3VnbZTqI2UzaHIe',\n              name: 'Addon 2',\n              cost: 9.99,\n              type: 'flat',\n            },\n          ],\n        }\n      ],\n    }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Error Handling in Actions (TypeScript)\nDESCRIPTION: Shows a standard try-catch block for handling errors within an action implementation. If an error occurs, it's logged to the console, and a JSON response with an error message and a 500 status code is returned. Successful execution redirects using `redirectDocument`.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/creating_your_own_cms_client_keystatic_wordpress_62.md#2025-04-22_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\ntry {\n  // Action implementation\n  return redirectDocument('/success');\n} catch (error) {\n  console.error('Action failed:', error);\n  return json(\n    { error: 'Something went wrong' },\n    { status: 500 }\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: RLS Policy: Restricting Task Access to Owner\nDESCRIPTION: Supabase Row-Level Security policy that restricts access to tasks to the user who created them using the auth.uid() function.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/supabase_not_stopping_tables_not_found_dark_theme_22.md#2025-04-22_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy \"Restrict access to user tasks to their own tasks\"\n  on tasks\n  for select\n  to authenticated\n  using (user_id = auth.uid());\n```\n\n----------------------------------------\n\nTITLE: RLS Policy: Restricting Write Access by User ID\nDESCRIPTION: Supabase RLS policy that restricts write access to the users table, ensuring users can only insert records with their own ID.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/supabase_not_stopping_tables_not_found_dark_theme_22.md#2025-04-22_snippet_16\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy \"Restrict write access to authenticated users\"\n  on users\n  for insert\n  to authenticated\n  with check (id = auth.uid());\n```\n\n----------------------------------------\n\nTITLE: Defining Zod Schema for API Input Validation\nDESCRIPTION: Creating a Zod schema for validating API input data. This function returns a schema object that validates a body with displayName and email fields.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/uploading_data_to_storage_writing_data_to_supabase_data_fetching_77.md#2025-04-22_snippet_36\n\nLANGUAGE: tsx\nCODE:\n```\nfunction getBodySchema() {\n  return z.object({\n    displayName: z.string(),\n    email: z.string().email(),\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Realtime for Messages Table in SQL\nDESCRIPTION: SQL command to enable realtime functionality for the messages table in Supabase by adding it to the supabase_realtime publication.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/realtime_updates_server_components_7.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nalter publication supabase_realtime add table messages;\n```\n\n----------------------------------------\n\nTITLE: Adjusting Data Loading and Imports in React Router with TypeScript\nDESCRIPTION: This TypeScript snippet details the adjustments required for data loading patterns and navigation imports when migrating to React Router. Main tasks include replacing Remix-specific functions with React Router equivalents and adapting to new patterns for using props over hooks.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/introduction_migration_from_remix_navigating_codebase_67.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Adjust Data Loading Patterns \n\n// Before (Remix)\nconst data = useLoaderData<typeof loader>();\n\n// After (React Router)\nexport default function Component(props: Route.ComponentProps) {\n  const { loaderData } = props;\n  // ...\n}\n\n// Accessing Parent Route Data\nimport { useRouteLoaderData } from 'react-router';\n\nexport default function ChildComponent() {\n  const parentData = useRouteLoaderData('routes/parent/layout');\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Create Git Hook for Post-Merge Dependency Installation\nDESCRIPTION: Sets up a Git post-merge hook to automatically install any new dependencies after merging updates into the branch, ensuring the environment remains consistent.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/cloudflare_production_environment_variables_supabase_47.md#2025-04-22_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\ntouch .git/hooks/post-merge\n```\n\nLANGUAGE: shell\nCODE:\n```\n#!/bin/bash\n\npnpm i\n```\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x .git/hooks/post-merge\n```\n\n----------------------------------------\n\nTITLE: Defining Organization Data Model in TypeScript\nDESCRIPTION: This code defines the data model for an organization, including properties for name, timezone, logo URL, subscription, customer ID, and members.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/technical_details_going_to_production_overview_publish_firebase_security_rules_72.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\ntype UserId = string;\n\ninterface Organization {\n  name: string;\n  timezone?: string;\n  logoURL?: string | null;\n  subscription?: OrganizationSubscription;\n  customerId?: string;\n\n  members: Record<UserId, {\n    role: number;\n    user: Reference;\n  }>;\n}\n```\n\n----------------------------------------\n\nTITLE: Default Stripe Webhook Handling in TypeScript\nDESCRIPTION: This snippet shows the default invocation of the `handleWebhookEvent` method from the Makerkit `BillingService`. It processes incoming Stripe webhook requests (`request`) according to the predefined logic within the service.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/billing_webhooks_credit_based_billing_lemon_squeezy_89.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nawait service.handleWebhookEvent(request);\n```\n\n----------------------------------------\n\nTITLE: Creating a React Link Component with Logo Integration\nDESCRIPTION: This component wraps the LogoImage SVG component in a Next.js Link element to create a clickable logo. It accepts href, className, and label props to customize the link destination, styling, and accessibility attributes.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/customization_2.md#2025-04-22_snippet_9\n\nLANGUAGE: TSX\nCODE:\n```\nexport function AppLogo({\n  href,\n  label,\n  className,\n}: {\n  href?: string;\n  className?: string;\n  label?: string;\n}) {\n  return (\n    <Link aria-label={label ?? 'Home Page'} href={href ?? '/'}>\n      <LogoImage className={className} />\n    </Link>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PostHog Ingestion Rewrites in Next.js\nDESCRIPTION: Configuration for Next.js to support PostHog API requests with trailing slashes and to rewrite ingestion paths.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/custom_analytics_provider_google_analytics_provider_posthog_analytics_provider_36.md#2025-04-22_snippet_10\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import('next').NextConfig} */\nconst config = {\n  // ...other config\n  // This is required to support PostHog trailing slash API requests\n  skipTrailingSlashRedirect: true,\n  async rewrites() {\n    // NOTE: change `eu` to `us` if applicable\n    return [\n      {\n        source: '/ingest/static/:path*',\n        destination: 'https://eu-assets.i.posthog.com/static/:path*'\n      },\n      {\n        source: '/ingest/:path*',\n        destination: 'https://eu.i.posthog.com/:path*'\n      }\n    ];\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Multi-Step Form with React Hook Form and Zod (TSX)\nDESCRIPTION: This TSX snippet demonstrates a complete multi-step form with 'Account', 'Profile', and 'Review' steps. It utilizes 'zod' for schema definition and validation per step ('createStepSchema'), 'react-hook-form' for form state management ('useForm'), and custom UI components from '@kit/ui' ('MultiStepForm', 'Stepper', 'Form', 'Input', 'Button'). It defines the form schema, sets up the form hook with the Zod resolver, implements individual step components ('AccountStep', 'ProfileStep', 'ReviewStep') that use 'useMultiStepFormContext' for navigation and validation checks, and handles form submission.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/bordered_navigation_menu_card_button_cookie_banner_60.md#2025-04-22_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { useForm } from 'react-hook-form';\nimport { z } from 'zod';\n\nimport { Button } from '@kit/ui/button';\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@kit/ui/form';\nimport { Input } from '@kit/ui/input';\nimport {\n  MultiStepForm,\n  MultiStepFormContextProvider,\n  MultiStepFormHeader,\n  MultiStepFormStep,\n  createStepSchema,\n  useMultiStepFormContext,\n} from '@kit/ui/multi-step-form';\nimport { Stepper } from '@kit/ui/stepper';\n\nconst FormSchema = createStepSchema({\n  account: z.object({\n    username: z.string().min(3),\n    email: z.string().email(),\n  }),\n  profile: z.object({\n    password: z.string().min(8),\n    age: z.coerce.number().min(18),\n  }),\n});\n\ntype FormValues = z.infer<typeof FormSchema>;\n\nexport function MultiStepFormDemo() {\n  const form = useForm<FormValues>({\n    resolver: zodResolver(FormSchema),\n    defaultValues: {\n      account: {\n        username: '',\n        email: '',\n      },\n      profile: {\n        password: '',\n      },\n    },\n    reValidateMode: 'onBlur',\n    mode: 'onBlur',\n  });\n\n  const onSubmit = (data: FormValues) => {\n    console.log('Form submitted:', data);\n  };\n\n  return (\n    <MultiStepForm\n      className={'space-y-10 p-8 rounded-xl border'}\n      schema={FormSchema}\n      form={form}\n      onSubmit={onSubmit}\n    >\n      <MultiStepFormHeader\n        className={'flex w-full flex-col justify-center space-y-6'}\n      >\n        <h2 className={'text-xl font-bold'}>Create your account</h2>\n\n        <MultiStepFormContextProvider>\n          {({ currentStepIndex }) => (\n            <Stepper\n              variant={'numbers'}\n              steps={['Account', 'Profile', 'Review']}\n              currentStep={currentStepIndex}\n            />\n          )}\n        </MultiStepFormContextProvider>\n      </MultiStepFormHeader>\n\n      <MultiStepFormStep name=\"account\">\n        <AccountStep />\n      </MultiStepFormStep>\n\n      <MultiStepFormStep name=\"profile\">\n        <ProfileStep />\n      </MultiStepFormStep>\n\n      <MultiStepFormStep name=\"review\">\n        <ReviewStep />\n      </MultiStepFormStep>\n    </MultiStepForm>\n  );\n}\n\nfunction AccountStep() {\n  const { form, nextStep, isStepValid } = useMultiStepFormContext();\n\n  return (\n    <Form {...form}>\n      <div className={'flex flex-col gap-4'}>\n        <FormField\n          name=\"account.username\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Username</FormLabel>\n              <FormControl>\n                <Input {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          name=\"account.email\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Email</FormLabel>\n              <FormControl>\n                <Input type=\"email\" {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <div className=\"flex justify-end\">\n          <Button onClick={nextStep} disabled={!isStepValid()}>\n            Next\n          </Button>\n        </div>\n      </div>\n    </Form>\n  );\n}\n\nfunction ProfileStep() {\n  const { form, nextStep, prevStep } = useMultiStepFormContext();\n\n  return (\n    <Form {...form}>\n      <div className={'flex flex-col gap-4'}>\n        <FormField\n          name=\"profile.password\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Password</FormLabel>\n              <FormControl>\n                <Input type=\"password\" {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          name=\"profile.age\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Age</FormLabel>\n              <FormControl>\n                <Input type=\"number\" {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <div className=\"flex justify-end space-x-2\">\n          <Button type={'button'} variant={'outline'} onClick={prevStep}>\n            Previous\n          </Button>\n\n          <Button onClick={nextStep}>Next</Button>\n        </div>\n      </div>\n    </Form>\n  );\n}\n\nfunction ReviewStep() {\n  const { prevStep, form } = useMultiStepFormContext<typeof FormSchema>();\n  const values = form.getValues();\n\n  return (\n    <div className={'flex flex-col space-y-4'}>\n      <div className={'flex flex-col space-y-4'}>\n        <div>Great! Please review the values.</div>\n\n        <div className={'flex flex-col space-y-2 text-sm'}>\n          <div>\n            <span>Username</span>: <span>{values.account.username}</span>\n          </div>\n          <div>\n            <span>Email</span>: <span>{values.account.email}</span>\n          </div>\n          <div>\n            <span>Age</span>: <span>{values.profile.age}</span>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"flex justify-end space-x-2\">\n        <Button type={'button'} variant={'outline'} onClick={prevStep}>\n          Back\n        </Button>\n\n        <Button type={'submit'}>Create Account</Button>\n      </div>\n    </div>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Setting up State and React Query for Message Pagination\nDESCRIPTION: This snippet initializes component state for the current `page` number and defines a `queryKey` for React Query, incorporating the `ticketId` and `page`. It then calls the custom hook `useFetchTicketMessages`, passing the necessary parameters and the `queryKey` to fetch and cache paginated ticket messages.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/data_fetching_3.md#2025-04-22_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nconst [state, setState] = useState<{\n  page: number;\n}>({ page: props.page });\n\nconst queryKey = ['ticket-messages', props.ticketId, props.page.toString()];\nconst queryClient = useQueryClient();\n\nconst { status, data } = useFetchTicketMessages({\n  ticketId: props.ticketId,\n  page: state.page,\n  queryKey,\n});\n```\n\n----------------------------------------\n\nTITLE: Default Options for withAppProps Guard in MakerKit (Typescript)\nDESCRIPTION: This Typescript object documents the default options for MakerKit's 'withAppProps' guard, configuring parameters such as redirect path, default locale, additional locale namespaces, and required Stripe plan IDs. These options determine redirect behaviors and localization for protected routes. Inputs include string paths and arrays; outputs are the effective runtime settings for the guard.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/architecture_api_guards_app_check_2.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst DEFAULT_OPTIONS = {\n  redirectPath: configuration.paths.signIn,\n  locale: 'en',\n  localeNamespaces: <string[]>[],\n  requirePlans: <string[]>[],\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Web Application\nDESCRIPTION: Command to add a dependency specifically to the main web application in the monorepo.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/notifications_plugins_adding_translations_68.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npnpm add my-package --filter web\n```\n\n----------------------------------------\n\nTITLE: API Integration Examples\nDESCRIPTION: Collection of examples showing integration with various API services including Accounts, Team Accounts, Auth, and Billing\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/llms_migration_from_makerkit_v1_navigating_codebase_49.md#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createAccountsApi } from '@kit/accounts/api';\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\n\nasync function ServerComponent() {\n  const client = getSupabaseServerClient();\n  const api = createAccountsApi(client);\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\nimport { createTeamAccountsApi } from '@kit/team-accounts/api';\n\nasync function ServerComponent() {\n  const client = getSupabaseServerClient();\n  const api = createTeamAccountsApi(client);\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { redirect } from 'next/navigation';\n\nimport { requireUser } from '@kit/supabase/require-user';\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\n\nasync function ServerComponent() {\n  const client = getSupabaseServerClient();\n  const auth = await requireUser(client);\n  if (auth.error) {\n    redirect(auth.redirectTo);\n  }\n  const user = auth.data;\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createBillingGatewayService } from '@kit/billing-gateway';\n\nconst service = createBillingGatewayService('stripe');\n```\n\n----------------------------------------\n\nTITLE: Switching to Lemon Squeezy Branch in Git\nDESCRIPTION: Command to switch to the 'main-ls' branch for Lemon Squeezy integration.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/commands_cors_develop_firebase_security_rules_5.md#2025-04-22_snippet_43\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout main-ls\n```\n\n----------------------------------------\n\nTITLE: Conditional Script Loading with Cookie Consent in React\nDESCRIPTION: Example of conditionally loading tracking scripts based on user's cookie consent status using the useCookieConsent hook and useEffect. Scripts are only initialized when consent is granted.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/paddle_per_seat_billing_stripe_90.md#2025-04-22_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n  const { status } = useCookieConsent();\n\n  useEffect(() => {\n    if (status === ConsentStatus.Accepted) {\n      // Initialize analytics or other cookie-dependent scripts\n    }\n  }, [status]);\n\n  return (\n    <div>\n      {/* Your app content */}\n      <CookieBanner />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Task Server Action in Next.js\nDESCRIPTION: Implements a server action to delete tasks with authentication. It uses the deleteTask mutation and revalidates the tasks page to reflect the deletion.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/running_project_supabase_data_fetching_supabase_data_writing_27.md#2025-04-22_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\nimport { createTask, deleteTask, updateTask } from '~/lib/tasks/mutations';\nimport revalidatePath from 'next/cache';\n\ntype DeleteTaskParams = {\n  taskId: number;\n};\n\nexport const deleteTaskAction = withSession(\n  async (params: DeleteTaskParams) => {\n    const client = getSupabaseServerActionClient();\n\n    await deleteTask(client, params.taskId);\n\n    revalidatePath('/dashboard/[organization]/tasks', 'page')\n  });\n```\n\n----------------------------------------\n\nTITLE: Excluding PostHog Ingestion from CSRF Protection\nDESCRIPTION: Configuration for the Next.js middleware to exclude PostHog ingestion URLs from CSRF protection.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/custom_analytics_provider_google_analytics_provider_posthog_analytics_provider_36.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nexport const config = {\n  matcher: ['/((?!_next/static|_next/image|images|locales|assets|ingest/*|api/*).*)'],\n};\n```\n\n----------------------------------------\n\nTITLE: Return Type Definition for OTP API getTokenStatus Method (TypeScript)\nDESCRIPTION: Defines the structure of the object returned by the `api.getTokenStatus` method in the OTP API. It provides comprehensive details about a token's status, including existence, purpose, associated user, timestamps, usage/revocation status, verification attempts, and overall validity.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/analytics_api_custom_analytics_provider_google_analytics_provider_57.md#2025-04-22_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  exists: boolean;      // Whether the token exists\n  purpose?: string;     // Token purpose\n  userId?: string;      // User ID associated with the token\n  createdAt?: string;   // Creation timestamp\n  expiresAt?: string;   // Expiration timestamp\n  usedAt?: string;      // When the token was used (if used)\n  revoked?: boolean;    // Whether the token is revoked\n  revokedReason?: string; // Reason for revocation (if revoked)\n  verificationAttempts?: number; // Number of verification attempts\n  lastVerificationAt?: string;  // Last verification attempt timestamp\n  lastVerificationIp?: string;  // IP address of last verification attempt\n  isValid?: boolean;    // Whether the token is still valid\n}\n```\n\n----------------------------------------\n\nTITLE: Extending User Roles with Custom Roles\nDESCRIPTION: Example of extending the default user roles with custom roles. This snippet shows how to add new roles like 'Readonly' and 'AccountManager' while maintaining the hierarchical structure.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/uploading_data_to_storage_writing_data_to_supabase_data_fetching_77.md#2025-04-22_snippet_34\n\nLANGUAGE: tsx\nCODE:\n```\nexport enum MembershipRole {\n  Readonly = 0,\n  AccountManager = 1,\n  Owner = 2,\n}\n```\n\n----------------------------------------\n\nTITLE: Button Click Handler with Server Action\nDESCRIPTION: Example showing how to trigger a server action from a button click within a form using the formAction attribute.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/user_reading_record_creating_record_20.md#2025-04-22_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n<form action={createPostAction}>\n  <div className='flex flex-col space-y-4'>\n    <h2 className='text-lg font-semibold'>Create a new Post</h2>\n\n    <Label className='flex flex-col space-y-1.5'>\n      <span>Title</span>\n      <Input name='title' placeholder='Ex. The best Next.js libraries' required />\n    </Label>\n\n    <Label className='flex flex-col space-y-1.5'>\n      <span>Description</span>\n      <Input />\n    </Label>\n\n    <button formAction={createPostAction}>Click</button>\n  </div>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Configuring Feature Flags in TypeScript\nDESCRIPTION: This code defines the feature flag configuration using Zod schema validation. It controls various application capabilities like theme toggling, account management, billing features, and notifications by parsing environment variables.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/customization_2.md#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nconst featuresFlagConfig = FeatureFlagsSchema.parse({\n  enableThemeToggle: getBoolean(\n    process.env.NEXT_PUBLIC_ENABLE_THEME_TOGGLE,\n    true,\n  ),\n  enableAccountDeletion: getBoolean(\n    process.env.NEXT_PUBLIC_ENABLE_PERSONAL_ACCOUNT_DELETION,\n    false,\n  ),\n  enableTeamDeletion: getBoolean(\n    process.env.NEXT_PUBLIC_ENABLE_TEAM_ACCOUNTS_DELETION,\n    false,\n  ),\n  enableTeamAccounts: getBoolean(\n    process.env.NEXT_PUBLIC_ENABLE_TEAM_ACCOUNTS,\n    true,\n  ),\n  enableTeamCreation: getBoolean(\n    process.env.NEXT_PUBLIC_ENABLE_TEAM_ACCOUNTS_CREATION,\n    true,\n  ),\n  enablePersonalAccountBilling: getBoolean(\n    process.env.NEXT_PUBLIC_ENABLE_PERSONAL_ACCOUNT_BILLING,\n    false,\n  ),\n  enableTeamAccountBilling: getBoolean(\n    process.env.NEXT_PUBLIC_ENABLE_TEAM_ACCOUNTS_BILLING,\n    false,\n  ),\n  languagePriority: process.env\n    .NEXT_PUBLIC_LANGUAGE_PRIORITY as LanguagePriority,\n  enableNotifications: getBoolean(\n    process.env.NEXT_PUBLIC_ENABLE_NOTIFICATIONS,\n    true,\n  ),\n  realtimeNotifications: getBoolean(\n    process.env.NEXT_PUBLIC_REALTIME_NOTIFICATIONS,\n    false,\n  ),\n  enableVersionUpdater: getBoolean(\n    process.env.NEXT_PUBLIC_ENABLE_VERSION_UPDATER,\n    false,\n  ),\n} satisfies z.infer<typeof FeatureFlagsSchema>);\n```\n\n----------------------------------------\n\nTITLE: Adding Support Tickets Entry to Team Account Navigation Config (TSX)\nDESCRIPTION: This TSX snippet updates the navigation configuration array returned by `getRoutes` in `apps/web/config/team-account-navigation.config.tsx`. It adds a new menu item labeled 'Support Tickets' with an associated icon (`MessageCircle` from lucide-react) and path (`/home/${account}/tickets`), making the support tickets page accessible from the team account sidebar menu. Lines 1 and 12-17 highlight the key import and the added route object.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/realtime_updates_server_components_7.md#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CreditCard, LayoutDashboard, Settings, Users, MessageCircle } from 'lucide-react';\n\n//..\n\nconst getRoutes = (account: string) => [\n  {\n    label: 'common:routes.application',\n    children: [\n      {\n        label: 'common:routes.dashboard',\n        path: pathsConfig.app.accountHome.replace('[account]', account),\n        Icon: <LayoutDashboard className={iconClasses} />,\n        end: true,\n      },\n      {\n        label: 'Support Tickets',\n        collapsible: false,\n        path: `/home/${account}/tickets`,\n        Icon: <MessageCircle className={iconClasses} />,\n      },\n    ]\n  },\n  {\n    label: 'common:routes.settings',\n    collapsible: false,\n    children: [\n      {\n        label: 'common:routes.settings',\n        path: createPath(pathsConfig.app.accountSettings, account),\n        Icon: <Settings className={iconClasses} />,\n      },\n      {\n        label: 'common:routes.members',\n        path: createPath(pathsConfig.app.accountMembers, account),\n        Icon: <Users className={iconClasses} />,\n      },\n      featureFlagsConfig.enableTeamAccountBilling\n        ? {\n            label: 'common:routes.billing',\n            path: createPath(pathsConfig.app.accountBilling, account),\n            Icon: <CreditCard className={iconClasses} />,\n          }\n        : undefined,\n    ].filter(Boolean),\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Tasks Table Component with Tanstack Table\nDESCRIPTION: Client-side component that implements a data table using Tanstack Table. Features include column definitions, row actions, and internationalization support for displaying task data.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/adding_turborepo_package_approaching_local_development_database_functions_44.md#2025-04-22_snippet_35\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\nimport Link from 'next/link';\n\nimport { ColumnDef } from '@tanstack/react-table';\nimport { Pencil } from 'lucide-react';\nimport { useTranslation } from 'react-i18next';\n\nimport { Button } from '@kit/ui/button';\nimport { DataTable } from '@kit/ui/enhanced-data-table';\n\nimport { Database } from '~/lib/database.types';\n\ntype Task = Database['public']['Tables']['tasks']['Row'];\n\nexport function TasksTable(props: {\n  data: Task[];\n  page: number;\n  pageSize: number;\n  pageCount: number;\n}) {\n  const columns = useGetColumns();\n\n  return (\n    <div>\n      <DataTable {...props} columns={columns} />\n    </div>\n  );\n}\n\nfunction useGetColumns(): ColumnDef<Task>[] {\n  const { t } = useTranslation('tasks');\n\n  return [\n    {\n      header: t('task'),\n      cell: ({ row }) => (\n        <Link\n          className={'hover:underline'}\n          href={`/home/tasks/${row.original.id}`}\n        >\n          {row.original.title}\n        </Link>\n      ),\n    },\n    {\n      header: t('createdAt'),\n      accessorKey: 'created_at',\n    },\n    {\n      header: t('updatedAt'),\n      accessorKey: 'updated_at',\n    },\n    {\n      header: '',\n      id: 'actions',\n      cell: ({ row }) => {\n        const id = row.original.id;\n\n        return (\n          <div className={'flex justify-end space-x-2'}>\n            <Link href={`/home/tasks/${id}`}>\n              <Button variant={'ghost'} size={'icon'}>\n                <Pencil className={'h-4'} />\n              </Button>\n            </Link>\n          </div>\n        );\n      },\n    },\n  ];\n}\n```\n\n----------------------------------------\n\nTITLE: Custom CSRF Token Validation in API Routes\nDESCRIPTION: Demonstrates how to use 'withCsrf' with a custom function to retrieve the CSRF token from a different location in the request, such as the request body instead of headers.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/call_api_routes_from_client_csrf_token_guarding_api_routes_7.md#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { NextApiRequest, NextApiResponse } from \"next\";\n\nimport { withAuthedUser } from '~/core/middleware/with-authed-user';\nimport { withMethodsGuard } from '~/core/middleware/with-methods-guard';\nimport { withPipe } from '~/core/middleware/with-pipe';\nimport withCsrf from \"./with-csrf\";\n\nasync function helloWorldHandler(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n  await withCsrf(req, () => req.body.csrfToken);\n\n  res.status(200).json({ text: 'Hello' })\n}\n\nexport default withPipe(\n  withAuthedUser,\n  withMethodsGuard(['POST']),\n  helloWorldHandler,\n);\n```\n\n----------------------------------------\n\nTITLE: Sending Transactional Emails in Next.js Firebase SaaS\nDESCRIPTION: This code demonstrates how to send a transactional email using the sendEmail function in a Next.js Firebase SaaS application. It includes the interface for the email parameters and an example of sending an achievement notification.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/develop_firebase_security_rules_emails_encrypting_secrets_71.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\ninterface SendEmailParams {\n  from: string;\n  to: string;\n  subject: string;\n  text?: string;\n  html?: string;\n}\n\nimport { sendEmail } from '~/core/email/send-email';\n\nfunction sendTransactionalEmail() {\n  const sender = configuration.email.senderAddress;\n\n  return sendEmail({\n    to: `youruser@email.com`,\n    from: sender,\n    subject: `Achievement Unlocked!`,\n    html: `Yay, you unlocked an achievement!`,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Task Page Implementation with Loader\nDESCRIPTION: Complete implementation of a task page component with Remix loader function for data fetching\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/updating_sidebar_menu_change_auth_strategy_setup_oauth_79.md#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LoaderFunctionArgs, json, redirect } from '@remix-run/node';\n\nconst TaskPage = () => {\n  const { task } = useLoaderData<typeof laoder>();\n\n  return (\n    <>\n      <h1>{task.name}</h1>\n      <p>{task.description}</p>\n    </>\n  );\n};\n\nexport async function loader(args: LoaderFunctionArgs) {\n  const client = getSupabaseServerClient(args.request);\n  const taskId = args.params.taskId;\n  const { data: task } = await getTask(client, Number(taskId));\n\n  if (!task) {\n    return redirect('/dashboard');\n  }\n\n  return json({\n    task,\n  });\n}\n\nexport default TaskPage;\n```\n\n----------------------------------------\n\nTITLE: Creating Drizzle Configuration\nDESCRIPTION: Configuration file for Drizzle ORM setup including schema path, database credentials and output settings.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/waitlist_plugin_plugins_drizzle_supabase_52.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from 'drizzle-kit';\n\nexport default defineConfig({\n  schema: './src/schema.ts',\n  out: './src/drizzle',\n  dialect: 'postgresql',\n  dbCredentials: {\n    url: process.env.DATABASE_URL ?? 'postgresql://postgres:postgres@127.0.0.1:54322/postgres'\n  },\n  schemaFilter: ['public'],\n  verbose: true,\n  strict: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Custom Fonts in Next.js using TypeScript\nDESCRIPTION: This snippet imports a custom font from Google Fonts using the `next/font/google` package. It facilitates replacing default fonts with user-preferred ones for text rendering on a site.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/environment_variables_setup_project_configuration_set_up_emails_9.md#2025-04-22_snippet_6\n\nLANGUAGE: TSX\nCODE:\n```\nimport { Manrope as SansFont } from 'next/font/google';\n```\n\n----------------------------------------\n\nTITLE: Implementing Dropdown Menu Component in React\nDESCRIPTION: A customizable dropdown menu component that displays a list of options with support for groups, shortcuts, and nested submenus. Uses shadcn/ui components with TypeScript.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/multi_step_forms_page_shadcn_40.md#2025-04-22_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from '@kit/ui/button';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuPortal,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuTrigger,\n} from '@kit/ui/dropdown-menu';\n\nexport default function DropdownMenuDemo() {\n  return (\n    <>\n      <DropdownMenu>\n        <DropdownMenuTrigger asChild>\n          <Button variant=\"outline\">Open</Button>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent className=\"w-56\">\n          <DropdownMenuLabel>My Account</DropdownMenuLabel>\n          <DropdownMenuSeparator />\n          <DropdownMenuGroup>\n            <DropdownMenuItem>\n              Profile\n              <DropdownMenuShortcut>⇧⌘P</DropdownMenuShortcut>\n            </DropdownMenuItem>\n            <DropdownMenuItem>\n              Billing\n              <DropdownMenuShortcut>⌘B</DropdownMenuShortcut>\n            </DropdownMenuItem>\n            <DropdownMenuItem>\n              Settings\n              <DropdownMenuShortcut>⌘S</DropdownMenuShortcut>\n            </DropdownMenuItem>\n            <DropdownMenuItem>\n              Keyboard shortcuts\n              <DropdownMenuShortcut>⌘K</DropdownMenuShortcut>\n            </DropdownMenuItem>\n          </DropdownMenuGroup>\n          <DropdownMenuSeparator />\n          <DropdownMenuGroup>\n            <DropdownMenuItem>Team</DropdownMenuItem>\n            <DropdownMenuSub>\n              <DropdownMenuSubTrigger>Invite users</DropdownMenuSubTrigger>\n              <DropdownMenuPortal>\n                <DropdownMenuSubContent>\n                  <DropdownMenuItem>Email</DropdownMenuItem>\n                  <DropdownMenuItem>Message</DropdownMenuItem>\n                  <DropdownMenuSeparator />\n                  <DropdownMenuItem>More...</DropdownMenuItem>\n                </DropdownMenuSubContent>\n              </DropdownMenuPortal>\n            </DropdownMenuSub>\n            <DropdownMenuItem>\n              New Team\n              <DropdownMenuShortcut>⌘+T</DropdownMenuShortcut>\n            </DropdownMenuItem>\n          </DropdownMenuGroup>\n          <DropdownMenuSeparator />\n          <DropdownMenuItem>GitHub</DropdownMenuItem>\n          <DropdownMenuItem>Support</DropdownMenuItem>\n          <DropdownMenuItem disabled>API</DropdownMenuItem>\n          <DropdownMenuSeparator />\n          <DropdownMenuItem>\n            Log out\n            <DropdownMenuShortcut>⇧⌘Q</DropdownMenuShortcut>\n          </DropdownMenuItem>\n        </DropdownMenuContent>\n      </DropdownMenu>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Task Table Column Definitions\nDESCRIPTION: Configuration for table columns including name, description, due date, and actions. Implements formatting and interactive elements.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/running_project_supabase_data_fetching_supabase_data_writing_27.md#2025-04-22_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\nconst TABLE_COLUMNS: ColumnDef<Task>[] = [\n  {\n    header: 'Name',\n    cell: ({ row }) => {\n      const task = row.original;\n\n      return (\n        <Link className={'hover:underline'} href={'tasks/' + task.id}>\n          {task.name}\n        </Link>\n      );\n    },\n  },\n  {\n    header: 'Description',\n    id: 'description',\n    cell: ({ row }) => {\n      const task = row.original;\n      const length = task.description?.length ?? 0;\n\n      return (\n        <span className={'truncate max-w-[50px]'}>\n          {length > 0 ? task.description : '-'}\n        </span>\n      );\n    },\n  },\n  {\n    header: 'Due Date',\n    id: 'dueDate',\n    cell: ({ row }) => {\n      const task = row.original;\n\n      const dueDate = formatDistance(new Date(task.dueDate), new Date(), {\n        addSuffix: true,\n      });\n\n      return (\n        <If\n          condition={task.done}\n          fallback={<span className={'capitalize'}>{dueDate}</span>}\n        >\n          <div className={'inline-flex'}>\n            <Badge size={'small'} color={'success'}>\n              Done\n            </Badge>\n          </div>\n        </If>\n      );\n    },\n  },\n  {\n    header: '',\n    id: 'actions',\n    cell: ({ row }) => {\n      const task = row.original;\n\n      return (\n        <div className={'flex justify-end'}>\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <IconButton>\n                <EllipsisVerticalIcon className=\"w-5\" />\n              </IconButton>\n            </DropdownMenuTrigger>\n\n            <DropdownMenuContent\n              collisionPadding={{\n                right: 20,\n              }}\n            >\n              <DropdownMenuItem>\n                <Link href={'tasks/' + row.original.id}>View Task</Link>\n              </DropdownMenuItem>\n\n              <UpdateStatusMenuItem task={task} />\n              <DeleteTaskMenuItem task={task} />\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </div>\n      );\n    },\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: SQL Function for Checking Account Membership and Role\nDESCRIPTION: SQL function to check if a user is a member of an account and optionally has a specific role. Returns true if the user is a member or has the specified role.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/supabase_clients_data_fetching_adding_pages_63.md#2025-04-22_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\npublic.has_role_on_account(\n  account_id uuid,\n  account_role varchar(50) default null\n)\n```\n\n----------------------------------------\n\nTITLE: Consolidating React Router Imports in TypeScript\nDESCRIPTION: This TypeScript snippet showcases the consolidation of React Router imports into a single source from React Router 7, streamlining the import process and reducing confusion about import origins. Dependencies have been simplified for easier access and management of hooks and utilities within components.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/introduction_migration_from_remix_navigating_codebase_67.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Instead of separate imports like:\nimport { useLoaderData } from '@remix-run/react';\nimport { json } from '@remix-run/node';\n\n// Now use a single import source:\nimport { useLoaderData, redirect, useRouteLoaderData } from 'react-router';\n```\n\n----------------------------------------\n\nTITLE: Custom Tailwind Configuration for Makerkit Theme\nDESCRIPTION: Complete Tailwind configuration showing how to extend the default theme with custom font families and colors for Makerkit projects.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/updating_navigation_menu_403_error_actions_contentlayer_stuck_34.md#2025-04-22_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nconst colors = require('tailwindcss/colors');\n\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: ['./app/**/*.{ts,tsx,jsx,js}'],\n  darkMode: 'class',\n  theme: {\n    extend: {\n      fontFamily: {\n        serif: ['serif'],\n        heading: ['system-ui', 'Helvetica Neue', 'Helvetica', 'Arial'],\n        sans: [\n          'system-ui',\n          'BlinkMacSystemFont',\n          'Inter',\n          'Segoe UI',\n          'Roboto',\n          'Ubuntu',\n        ],\n        monospace: [`SF Mono`, `ui-monospace`, `Monaco`, 'Monospace'],\n      },\n      colors: {\n        primary: {\n          ...colors.indigo,\n          contrast: '#fff',\n        },\n        dark: colors.slate,\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing API Guards with withPipe Pattern in Next.js\nDESCRIPTION: Demonstrates how to protect API endpoints using middleware guards to ensure the request is authenticated and uses allowed HTTP methods. Uses the withPipe utility to chain multiple API handlers.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/architecture_api_guards_app_check_2.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { withAuthedUser } from '~/core/middleware/with-authed-user';\n\nexport default function inviteHandler(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n  const handler = withPipe(\n    withMethodsGuard(SUPPORTED_METHODS),\n    withAuthedUser,\n    inviteMembersToOrganizationHandler\n  );\n\n  return withExceptionFilter(req, res)(handler);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Supabase in Server Actions (Deprecated)\nDESCRIPTION: This deprecated code shows how to use the getSupabaseServerActionClient function to access Supabase in Server Actions. This approach is for older versions of the kit and will be removed in future versions.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/csrf_protection_react_query_route_handlers_43.md#2025-04-22_snippet_25\n\nLANGUAGE: tsx\nCODE:\n```\n'use server';\n\nimport { getSupabaseServerActionClient } from '@kit/supabase/server-actions-client';\n\nexport async function myServerAction() {\n  const supabase = getSupabaseServerActionClient();\n\n  const { data, error } = await supabase.from('users').select('*')\n\n  return {\n    success: true,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Documentation Topic Metadata JSON Configuration\nDESCRIPTION: This JSON example shows the configuration for a documentation topic with title, position, and description properties.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/ci_tests_running_tests_testing_limitations_12.md#2025-04-22_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"title\": \"Blog and Docs\",\n  \"position\": 2,\n  \"description\": \"Learn how to configure and write your product's Blog and Documentation\"\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Git Remotes\nDESCRIPTION: This snippet removes the original 'origin' remote and adds an 'upstream' remote to a cloned repository for pulling updates. Ensures the local repository stays synchronized with the main repository. Requires internet access and proper Git installation.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/going_to_production_clone_repository_code_health_66.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit remote rm origin\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit remote add upstream git@github.com:makerkit/react-router-supabase-saas-kit-turbo\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit pull upstream main\n```\n\n----------------------------------------\n\nTITLE: Form Submit Handler with Server Action\nDESCRIPTION: Implementation of a form that uses a server action as its submit handler. Includes form fields for creating a new post with title and description inputs.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/user_reading_record_creating_record_20.md#2025-04-22_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n<form action={createPostAction}>\n  <div className='flex flex-col space-y-4'>\n    <h2 className='text-lg font-semibold'>Create a new Post</h2>\n\n    <Label className='flex flex-col space-y-1.5'>\n      <span>Title</span>\n      <Input name='title' placeholder='Ex. The best Next.js libraries' required />\n    </Label>\n\n    <Label className='flex flex-col space-y-1.5'>\n      <span>Description</span>\n      <Input />\n    </Label>\n\n    <SubmitButton />\n  </div>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration for Next.js Supabase Project\nDESCRIPTION: Example of environment variables required for a MakerKit SaaS application with Supabase integration. Shows the setup for Supabase connection, Stripe integration, and email service configuration across development and production environments.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/architecture_auth_overview_auth_setup_29.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nDEFAULT_LOCALE=en\nSITE_URL=http://localhost:3000\n\n# SUPABASE\nNEXT_PUBLIC_SUPABASE_URL=http://localhost:54321\nNEXT_PUBLIC_SUPABASE_ANON_KEY=\nSUPABASE_SERVICE_ROLE_KEY=\n\n# STRIPE\nSTRIPE_WEBHOOK_SECRET=\nSTRIPE_SECRET_KEY=\nNEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=\n\n# EMAIL -\nEMAIL_HOST=\nEMAIL_PORT=587\nEMAIL_USER=\nEMAIL_PASSWORD=\nEMAIL_SENDER='MakerKit Team <info@makerkit.dev>'\n```\n\n----------------------------------------\n\nTITLE: OTP Verification UI Component\nDESCRIPTION: This TypeScript snippet shows the integration of a verification form using the `VerifyOtpForm` component from the OTP package. It enables rendering a customizable verification UI, handling successful verification and providing options like cancellation.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/custom_analytics_provider_google_analytics_provider_posthog_analytics_provider_36.md#2025-04-22_snippet_33\n\nLANGUAGE: tsx\nCODE:\n```\nimport { VerifyOtpForm } from '@kit/otp/components';\n\nfunction MyVerificationPage() {\n  return (\n    <VerifyOtpForm\n      purpose=\"password-reset\"\n      email={userEmail}\n      onSuccess={(otp) => {\n        // Handle successful verification\n        // Use the OTP for verification on the server\n      }}\n      CancelButton={\n        <Button variant=\"outline\" onClick={handleCancel}>\n          Cancel\n        </Button>\n      }\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Task Creation Policy SQL Function\nDESCRIPTION: PostgreSQL RLS policy that restricts task creation based on organization quota checks.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/theming_how_to_version_0_6_0_81.md#2025-04-22_snippet_16\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace policy \"Only allow organizations to create tasks if they have enough quota\"\n    on tasks\n    as restrictive\n    for insert\n    to authenticated\n    with check (\n        organization_can_create_task(organization_id)\n    );\n```\n\n----------------------------------------\n\nTITLE: Encrypting API Keys in Firestore with TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to encrypt and store API keys in Firestore, and decrypt them when retrieved. Requires 'SECRET_KEY' in environment variables for encrypting and decrypting data.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/commands_cors_develop_firebase_security_rules_5.md#2025-04-22_snippet_26\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { encrypt, decrypt } from '~/core/generic/crypto';\n\n// storing secrets\nfunction storeApiKey(key: string) {\n  const encryptedKey = encrypt(key);\n\n  return storeKeyInFirestore(encryptedKey);\n}\n\n// retrieving secrets\nfunction getApiKey(id: string) {\n  const encryptedKey = await getApiKeyFromFirestore(id);\n\n  return decrypt(encryptedKey);\n}\n```\n\n----------------------------------------\n\nTITLE: Running Stripe Webhook Locally\nDESCRIPTION: Commands to run and test Stripe webhooks in a local development environment using the Stripe CLI via Docker.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/reading_document_reading_documents_list_creating_document_8.md#2025-04-22_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nnpm run stripe:listen\n```\n\n----------------------------------------\n\nTITLE: Enabling Row Level Security on Tasks Table\nDESCRIPTION: SQL command to enable Row Level Security (RLS) on the tasks table, which is a fundamental step in securing the database by restricting access to data based on user permissions.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/adding_turborepo_package_approaching_local_development_database_functions_93.md#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n-- enable row level security\nalter table tasks enable row level security;\n```\n\n----------------------------------------\n\nTITLE: Enabling Edge Runtime in Next.js\nDESCRIPTION: Code snippet to enable Edge runtime for a Next.js application by exporting the runtime constant as 'edge' in the root layout file.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/cloudflare_production_environment_variables_supabase_47.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const runtime = 'edge';\n```\n\n----------------------------------------\n\nTITLE: Integrating Umami Analytics Service in TSX\nDESCRIPTION: Updates the main analytics configuration file (`packages/analytics/src/index.ts`) to integrate the Umami analytics service. It imports `createUmamiAnalyticsService` and registers it within the `createAnalyticsManager` configuration under the 'umami' key.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/analytics_api_custom_analytics_provider_google_analytics_provider_57.md#2025-04-22_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\n {% title=\"packages/analytics/src/index.ts\" %}\nimport { createUmamiAnalyticsService } from '@kit/umami';\n\nimport { createAnalyticsManager } from './analytics-manager';\nimport type { AnalyticsManager } from './types';\n\nexport const analytics: AnalyticsManager = createAnalyticsManager({\n    providers: {\n        umami: createUmamiAnalyticsService,\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Heading Component\nDESCRIPTION: A reusable heading component that supports different heading levels (h1-h6) for consistent typography across the application.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/multi_step_forms_page_shadcn_40.md#2025-04-22_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Heading } from '@kit/ui/heading';\n\nfunction HeadingDemo() {\n  return (\n    <>\n      <Heading level={1}>Heading 1</Heading>\n      <Heading level={2}>Heading 2</Heading>\n      <Heading level={3}>Heading 3</Heading>\n      <Heading level={4}>Heading 4</Heading>\n      <Heading level={5}>Heading 5</Heading>\n      <Heading level={6}>Heading 6</Heading>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Default Membership Roles with TypeScript Enum\nDESCRIPTION: Defines a hierarchical role system using TypeScript enums in the Next.js Supabase SaaS kit. The default implementation includes Member, Admin, and Owner roles with numerical values.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/user_roles_validating_api_input_zod_development_18.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nenum MembershipRole {\n  Member = 0,\n  Admin = 1,\n  Owner = 2,\n}\n\nexport default MembershipRole;\n```\n\n----------------------------------------\n\nTITLE: Getting User ID with useUserSession Hook (TSX)\nDESCRIPTION: Example of using the `useUserSession` hook in a React component (`MyComponent`) to retrieve the current user's session information and extract the user ID (`uid`) from the Supabase authentication data.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/functions_initializing_project_introduction_85.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useUserSession } from '~/core/hooks/use-user-session';\\n\\nfunction MyComponent() {\\n  const userSession = useUserSession();\\n  const userId = userSession?.auth?.uid;\\n\\n  return (\\n    <div>\\n      <p>Current user ID: {userId}</p>\\n    </div>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Sending a Rendered React.Email Template (TSX)\nDESCRIPTION: Demonstrates how to send an email using a previously defined React.Email template. It imports the `renderInviteEmail` function from `@kit/email-templates` and the `getMailer` utility from `@kit/mailers`. It first renders the email template to HTML using `renderInviteEmail` with specific props, then retrieves the configured mailer instance using `getMailer`, and finally calls the `sendEmail` method on the mailer with the recipient (`to`), sender (`from`), subject, and the generated HTML content.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/database_webhooks_legal_pages_marketing_pages_64.md#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getMailer } from '@kit/mailers';\nimport { renderInviteEmail } from '@kit/email-templates';\n\nasync function sendEmail() {\n  const emailHtml = renderInviteEmail({\n    teamName: 'My Team',\n    teamLogo: 'https://example.com/logo.png',\n    inviter: 'John Doe',\n    invitedUserEmail: ''\n  });\n\n  const mailer = await getMailer();\n\n  return mailer.sendEmail({\n    to: '',\n    from: '',\n    subject: 'Join the team!',\n    html: emailHtml\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Using 'eq' Operator in ClientDataLoader Filter\nDESCRIPTION: This example uses the 'eq' operator within the 'where' clause of the 'ClientDataLoader' component to fetch a single record with a specific ID. The 'eq' operator precisely filters rows matching the given conditions in the Supabase database, streamlining single record retrieval.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/ai_text_editor_cookie_banner_feedback_popup_24.md#2025-04-22_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ClientDataLoader } from '@makerkit/data-loader-supabase-nextjs';\n\n<ClientDataLoader\n  client={client}\n  table=\"organizations\"\n  select=\"*\"\n  where={{\n    id: {\n      eq: 1,\n    }\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating New Task Page Component in Next.js\nDESCRIPTION: This component renders a page for creating new tasks, featuring a CreateTaskForm component wrapped in a RouteShell. It uses withAppProps to ensure the user is authenticated and properly onboarded.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/deploying_production_development_getting_started_environment_variables_13.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { GetServerSidePropsContext } from 'next';\nimport { withAppProps } from '~/lib/props/with-app-props';\nimport RouteShell from '~/components/RouteShell';\nimport CreateTaskForm from '~/components/tasks/CreateTaskForm';\n\nconst NewTaskPage = () => {\n  return (\n    <RouteShell title={'New Task'}>\n      <div\n        className={'max-w-2xl border border-gray-50 p-8 dark:border-black-400'}\n      >\n        <CreateTaskForm />\n      </div>\n    </RouteShell>\n  );\n};\n\nexport default NewTaskPage;\n\nexport async function getServerSideProps(\n  ctx: GetServerSidePropsContext\n) {\n  return await withAppProps(ctx);\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Row Level Security on Tasks Table - SQL\nDESCRIPTION: This statement enables PostgreSQL Row Level Security (RLS) on the `tasks` table, making it possible to define fine-grained access policies per row. It requires the `tasks` table to exist. Once enabled, all subsequent access must obey RLS policies or access is denied. No inputs/outputs aside from enabling policy enforcement on the specified table.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/adding_turborepo_package_approaching_local_development_database_functions_44.md#2025-04-22_snippet_20\n\nLANGUAGE: SQL\nCODE:\n```\n-- enable row level security\\nalter table tasks enable row level security;\n```\n\n----------------------------------------\n\nTITLE: Implementing CORS Headers in Next.js\nDESCRIPTION: Function to enable CORS by setting appropriate headers for cross-origin requests\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/server_actions_uploading_data_to_storage_writing_data_to_supabase_17.md#2025-04-22_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nfunction withCors() {\n  const headers = new Headers();\n\n  headers.append('Access-Control-Allow-Origin', '*');\n\n  headers.append(\n    'Access-Control-Allow-Headers',\n    'Origin, X-Requested-With, Content-Type, Accept, referer-path'\n  );\n\n  return headers;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Credit Consumption Function in SQL\nDESCRIPTION: Creates a consume_credits function to deduct credits from a user's account.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/user_workspace_api_api_billing_api_37.md#2025-04-22_snippet_18\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace function public.consume_credits(account_id uuid, tokens integer)\n  returns void\n  set search_path = ''\n  as $$\n  begin\n    update public.credits set tokens = tokens - tokens where account_id = account_id;\n  end;\n  $$ language plpgsql;\n\ngrant execute on function public.has_credits to service_role;\n```\n\n----------------------------------------\n\nTITLE: Widget State Hook Implementation\nDESCRIPTION: Custom React hook that provides access to the widget's context state\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/building_javascript_widget_1.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useContext } from 'react';\n\nimport { WidgetContext } from './context';\n\nexport function useWidgetState() {\n  return useContext(WidgetContext);\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Remix Application Folder Structure\nDESCRIPTION: Overview of the default page structure in the Remix-Fire boilerplate, showing how routes are organized between site pages, auth pages, and internal (protected) pages.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/development_getting_started_environment_variables_firestore_data_fetching_74.md#2025-04-22_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n├── routes\n  └── root.tsx\n  └── auth.tsx\n  └── invite.tsx\n\n  └── __app.tsx\n  └── __site.tsx\n\n  └── onboarding\n      └── page.tsx\n\n  __site\n    └── auth.tsx\n      └── faq.tsx\n      └── pricing.tsx\n\n  └── __auth\n    └── link.tsx\n    └── password-reset.tsx\n    └── sign-in.tsx\n    └── sign-up.tsx\n\n  └── invite\n    └── $code.tsx\n\n  └── __app\n    └── dashboard\n      └── page.tsx\n\n    └── settings\n      └── organization\n        └── members\n          └── page.tsx\n          └── invite.tsx\n\n      └── profile\n        └── page.tsx\n        └── email.tsx\n        └── password.tsx\n        └── authentication.tsx\n\n      └── subscription\n\n  └── page.tsx\n```\n\n----------------------------------------\n\nTITLE: Sending Error Notification in TypeScript with Supabase\nDESCRIPTION: This snippet shows how to send an error notification using the createNotificationsApi function. It specifies the 'error' type for the notification.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/introduction_migration_from_remix_navigating_codebase_67.md#2025-04-22_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\napi.createNotification({\n  account_id: accountId,\n  body: 'There was an error processing your payment.',\n  type: 'error',\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Plugin Workspace to package.json\nDESCRIPTION: JSON configuration to add the Feedback Popup plugin as a workspace in the package.json file. This step is necessary for proper package management.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_one_time_payments_stripe_webhooks_payments_11.md#2025-04-22_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"workspaces\": [\n    \"plugins/feedback-popup\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting a Module from Package Index File\nDESCRIPTION: Example of exporting a module from the package's index.ts file. This is the standard way to expose functionality from your package.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/adding_turborepo_package_approaching_local_development_database_functions_44.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// packages/@kit/my-package/src/index.ts\nexport * from './my-module';\n```\n\n----------------------------------------\n\nTITLE: Creating RLS Policy for Inserting Tasks\nDESCRIPTION: SQL command to create a Row Level Security policy for inserting tasks. This policy checks if the user is the owner of the task or has the 'tasks.write' permission on the account.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/adding_turborepo_package_approaching_local_development_database_functions_93.md#2025-04-22_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy insert_tasks on public.tasks\n    for insert\n    with check (\n        account_id = auth.uid() or\n        public.has_permission(auth.uid(), account_id, 'tasks.write'::app_permissions)\n    );\n```\n\n----------------------------------------\n\nTITLE: Stripe Webhook Validation\nDESCRIPTION: Code for validating incoming Stripe webhooks using signature verification\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/subscription_permissions_organizations_lemon_squeezy_23.md#2025-04-22_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nconst signature = req.headers['stripe-signature'];\n\n// verify signature header is not missing\nif (!signature) {\n  return throwBadRequestException(res);\n}\n\nconst rawBody = await getRawBody(req);\nconst stripe = await getStripeInstance();\n\nconst event = stripe.webhooks.constructEvent(\n  rawBody,\n  signature,\n  webhookSecretKey\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing withAuthProps in Next.js TypeScript\nDESCRIPTION: The `withAuthProps` function is utilized to populate props on authentication pages, used within `getServerSideProps` to restrict access. The example shows how to set it up in a Next.js page. Requires `~/lib/props/with-auth-props` and `next`.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/adding_admin_users_admin_overview_admin_1.md#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { withAuthProps } from \"~/lib/props/with-auth-props\";\nimport { GetServerSidePropsContext } from \"next\";\n\nexport async function getServerSideProps(ctx: GetServerSidePropsContext) {\n  return await withAuthProps(ctx);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing OpenAI Title Generation Service in TypeScript\nDESCRIPTION: Service class implementation for generating ticket titles using OpenAI's GPT-3.5-turbo model. Includes error handling and fallback title generation.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/building_javascript_widget_1.md#2025-04-22_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OpenAI } from 'openai';\n\nclass CustomerTicketService {\n  async generateTicketTitle(message: string) {\n    try {\n      const openAI = new OpenAI();\n\n      const response = await openAI.completions.create({\n        model: 'gpt-3.5-turbo',\n        prompt: `Generate a short (under 10 words) title for a support ticket based on the following message: \"${message}\"`,\n        max_tokens: 10,\n      });\n\n      return response.choices[0]?.text ?? 'New ticket';\n    } catch (error) {\n      console.warn(`Failed to generate ticket title:`, error);\n\n      return 'New ticket';\n    }\n  }\n\n  // other methods...\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting the Project with Prettier - Bash\nDESCRIPTION: Runs the Prettier formatting tool across the codebase using the pnpm package manager. This command requires pnpm and Prettier (configured in the project) to be installed. No arguments are required; running the command in the project root will format all files as per the project's Prettier configuration. The expected output is a reformatted codebase. This approach assumes all contributors will use this method for consistent code style.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/going_to_production_clone_repository_code_health_66.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npnpm run format:fix\n```\n\n----------------------------------------\n\nTITLE: Accessing Supabase Client in Client Component via useSupabase Hook (TSX)\nDESCRIPTION: This TSX snippet demonstrates how to obtain an instance of the Supabase client within a Next.js Client Component (marked by `'use client'`). It imports and utilizes the `useSupabase` hook from `@kit/supabase/hooks/use-supabase`, provided by Makerkit, allowing browser-side interactions with the Supabase backend.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/realtime_updates_server_components_7.md#2025-04-22_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\nimport { useSupabase } from '@kit/supabase/hooks/use-supabase';\n\nfunction MyComponent() {\n  const supabase = useSupabase();\n\n  // Use the supabase client here\n\n  return <div>My Component</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Per-Seat Billing Schema in TypeScript\nDESCRIPTION: Configuration for creating a per-seat billing schema with tiered pricing. This example defines a 'Starter' product with monthly billing and per-seat pricing tiers including free seats and paid tiers.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/lemon_squeezy_metered_usage_one_off_payments_59.md#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nexport default createBillingSchema({\n  provider,\n  products: [\n    {\n      id: 'starter',\n      name: 'Starter',\n      description: 'The perfect plan to get started',\n      currency: 'USD',\n      badge: `Value`,\n      plans: [\n        {\n          name: 'Starter Monthly',\n          id: 'starter-monthly',\n          trialDays: 7,\n          paymentType: 'recurring',\n          interval: 'month',\n          lineItems: [\n            {\n              id: 'price_1NNwYHI1i3VnbZTqI2UzaHIe',\n              name: 'Addon 2',\n              cost: 0,\n              type: 'per_seat',\n              tiers: [\n                {\n                    upTo: 3,\n                    cost: 0,\n                },\n                {\n                    upTo: 5,\n                    cost: 7.99,\n                },\n                {\n                    upTo: 'unlimited',\n                    cost: 5.99,\n                }\n              ]\n            },\n          ],\n        }\n      ],\n    }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Navigation Menu Entries with TypeScript\nDESCRIPTION: This snippet shows how to add a new entry to the navigation menu by modifying the `links` object in a React component. It requires proper understanding of React and TypeScript to correctly link and style menu items. Inputs include menu entry names, their labels, and path URLs.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/branding_environment_variables_setup_project_configuration_21.md#2025-04-22_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst links = {\n  SignIn: {\n    label: 'Sign In',\n    path: '/auth/sign-in',\n  },\n  Blog: {\n    label: 'Blog',\n    path: '/blog',\n  },\n  Docs: {\n    label: 'Docs',\n    path: '/docs',\n  },\n  Pricing: {\n    label: 'Pricing',\n    path: '/pricing',\n  },\n  FAQ: {\n    label: 'FAQ',\n    path: '/faq',\n  },\n  NewPage: {\n    label: 'New Page',\n    path: '/new-page',\n  },\n};\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n<NavigationMenu>\n  <NavigationMenuItem\n    className={'flex lg:hidden'}\n    link={links.SignIn}\n  />\n\n  <NavigationMenuItem link={links.Blog} />\n  <NavigationMenuItem link={links.Docs} />\n  <NavigationMenuItem link={links.Pricing} />\n  <NavigationMenuItem link={links.FAQ} />\n\n  <NavigationMenuItem link={links.NewPage} />\n</NavigationMenu>\n```\n\n----------------------------------------\n\nTITLE: Creating Tasks with Next.js Server Action\nDESCRIPTION: Server action implementation for creating tasks with Supabase, using Next.js revalidatePath for cache invalidation. The action is wrapped with session handling and accepts task data with CSRF token.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/server_actions_uploading_data_to_storage_writing_data_to_supabase_17.md#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n'use server';\n\nimport { revalidatePath } from 'next/cache';\n\nimport { createTask } from '~/lib/tasks/mutations';\nimport type Task from '~/lib/tasks/types/task';\nimport { withSession } from '~/core/generic/actions-utils';\nimport getSupabaseServerActionClient from '~/core/supabase/action-client';\n\ntype CreateTaskParams = {\n  task: Omit<Task, 'id'>;\n  csrfToken: string;\n};\n\nexport const createTaskAction = withSession(\n  async (params: CreateTaskParams) => {\n    const client = getSupabaseServerActionClient();\n\n    await createTask(client, params.task);\n\n    revalidatePath('/dashboard/[organization]/tasks');\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Verifying OTP with Supabase\nDESCRIPTION: This TypeScript snippet demonstrates the use of the `verifyToken` method to verify one-time passwords (OTPs) using Supabase. It involves checking the validity of the token and handling appropriate responses such as successes and failures.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/custom_analytics_provider_google_analytics_provider_posthog_analytics_provider_36.md#2025-04-22_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\n// Verify the token\nconst result = await api.verifyToken({\n  token: submittedToken,\n  purpose: 'email-verification'\n});\n\nif (result.valid) {\n  // Token is valid, proceed with the operation\n  const { userId, metadata } = result;\n  // Handle successful verification\n} else {\n  // Token is invalid or expired\n  // Handle verification failure\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Project Data Fetching in Next.js\nDESCRIPTION: This code defines a cached function to fetch project data from Supabase. It's used in the project detail layout for efficient data retrieval.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/projects_data_model_53.md#2025-04-22_snippet_39\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { cache } from 'react';\n\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\n\nimport { createProjectsService } from '~/lib/server/projects/projects.service';\n\nexport const getProject = cache(projectLoader);\n\nasync function projectLoader(id: string) {\n  const client = getSupabaseServerClient();\n  const service = createProjectsService(client);\n\n  return service.getProject(id);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Upstream Git Remote (Bash)\nDESCRIPTION: Adds a remote named 'upstream' pointing to the original Makerkit repository. This is used after forking to allow pulling updates from the source repository.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/functions_initializing_project_introduction_85.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ngit remote add upstream git@github.com:makerkit/remix-supabase-saas-kit.git\n```\n\n----------------------------------------\n\nTITLE: Checking Subscription Status\nDESCRIPTION: This example demonstrates how to access the current status of an organization's subscription using the status computed property.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/organization_sdk_organization_subscription_sdk_sdk_25.md#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport getSdk from '~/lib/sdk';\nimport getSupabaseServerComponentClient from '~/core/supabase/server-component-client';\n\nasync function PageServerComponent() {\n  const client = getSupabaseServerComponentClient();\n  const sdk = getSdk(client);\n\n  const subscription = await sdk.organization.getSubscription();\n  const status = await sdk.organization.status; // Stripe.Subscription.Status\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Organizing Remix Route Files for Task Management\nDESCRIPTION: The folder structure for implementing task list and detail pages in a Remix application, showing the appropriate file naming convention for dynamic routes.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/functions_initializing_project_introduction_85.md#2025-04-22_snippet_25\n\nLANGUAGE: txt\nCODE:\n```\n├── routes\n  └── _app.tasks._index.tsx\n  └── _app.tasks.$task.tsx\n```\n\n----------------------------------------\n\nTITLE: Fetching Current Organization UID in Server Component\nDESCRIPTION: This snippet demonstrates how to initialize the SDK and fetch the current organization's unique identifier in a Next.js server component. It requires the Supabase server component client.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/organization_sdk_organization_subscription_sdk_sdk_25.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport getSdk from '~/lib/sdk';\nimport getSupabaseServerComponentClient from '~/core/supabase/server-component-client';\n\nasync function PageServerComponent() {\n  const client = getSupabaseServerComponentClient();\n  const sdk = getSdk(client);\n\n  const organizationUid = await sdk.organization.getCurrentOrganizationUid();\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Stripe Webhook Handler\nDESCRIPTION: Example of how to extend the webhook handling to support additional Stripe events like trial ending notifications.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_one_time_payments_stripe_webhooks_payments_11.md#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\ncase 'customer.subscription.trial_will_end': {\n  // handle trial will end\n}\n```\n\n----------------------------------------\n\nTITLE: Linting Command\nDESCRIPTION: Command to run ESLint to check for code quality and style issues.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/uploading_data_to_storage_writing_data_to_supabase_data_fetching_77.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nnpm run lint\n```\n\n----------------------------------------\n\nTITLE: Rendering Ticket Messages in a Scrollable List with Message Component (TypeScript/React)\nDESCRIPTION: Renders paginated ticket messages using a scrollable flex container and maps each message to the TicketMessage UI component. This code ensures messages are visually grouped and can be styled/scrolled efficiently. Inputs are paginated data as returned by React Query. Dependencies: React, layout and utility CSS. Outputs a message thread UI for end-users.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/data_fetching_3.md#2025-04-22_snippet_6\n\nLANGUAGE: TSX\nCODE:\n```\n\"<div className={'flex flex-col gap-4 overflow-y-auto'}>\\n  {data.pages.map((page) => {\\n    return page.map((message) => (<TicketMessage key={message.id} message={message} />));\\n  })}\\n</div>\\n\"\n```\n\n----------------------------------------\n\nTITLE: Casting Firestore Document Reference in TypeScript\nDESCRIPTION: Demonstrates how to cast a Firestore document reference to a strongly-typed DocumentReference for better type inference when working with Firestore data.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/custom_fetch_fetching_data_firestore_making_api_requests_4.md#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nconst organizationRef = doc(\n  firestore,\n  ORGANIZATIONS_COLLECTION,\n  organizationId\n) as DocumentReference<WithId<Organization>>;\n```\n\n----------------------------------------\n\nTITLE: Basic Sentry Configuration in Next.js\nDESCRIPTION: Simple implementation of Sentry configuration in Next.js by wrapping the Next.js configuration with Sentry's configuration function.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/sentry_monitoring_notifications_configuration_51.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { withSentryConfig } from '@sentry/nextjs';\n\n// wrap your Next.js configuration with the Sentry configuration\nwithSentryConfig(nextConfig);\n```\n\n----------------------------------------\n\nTITLE: Configuring Lemon Squeezy Payment Plans\nDESCRIPTION: Configuration object for Lemon Squeezy payment integration, structured similarly to Stripe but using variantID instead of stripePriceId for plan identification.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/reading_document_reading_documents_list_creating_document_8.md#2025-04-22_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nsubscriptions: {\n  plans: [\n    {\n      name: 'Basic',\n      description: 'Description of your Basic plan',\n      badge: `Up to 20 users`,\n      features: [\n        'Basic Reporting',\n        'Up to 20 users',\n        '1GB for each user',\n        'Chat Support',\n      ],\n      plans: [\n        {\n          name: 'Monthly',\n          price: '$9',\n          variantID: '<your variant ID>',\n        },\n        {\n          name: 'Yearly',\n          price: '$90',\n           variantID: '<your variant ID>',\n        },\n      ],\n    },\n    {\n      name: 'Pro',\n      badge: `Most Popular`,\n      recommended: true,\n      description: 'Description of your Pro plan',\n      features: [\n        'Advanced Reporting',\n        'Up to 50 users',\n        '5GB for each user',\n        'Chat and Phone Support',\n      ],\n      plans: [\n        {\n          name: 'Monthly',\n          price: '$29',\n           variantID: '<your variant ID>',\n        },\n        {\n          name: 'Yearly',\n          price: '$200',\n          variantID: '<your variant ID>',\n        },\n      ],\n    },\n    {\n      name: 'Premium',\n      description: 'Description of your Premium plan',\n      badge: ``,\n      features: [\n        'Advanced Reporting',\n        'Unlimited users',\n        '50GB for each user',\n        'Account Manager',\n      ],\n      plans: [\n        {\n          name: '',\n          price: 'Contact us',\n          label: `Contact us`,\n          href: `/contact`,\n        },\n      ],\n    },\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Invitation Data\nDESCRIPTION: Code showing how to retrieve invitation data from an invite token using the getInvitation method. Requires an admin client and the invite token as parameters.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/custom_analytics_provider_google_analytics_provider_posthog_analytics_provider_36.md#2025-04-22_snippet_45\n\nLANGUAGE: tsx\nCODE:\n```\nconst api = createTeamAccountsApi(client);\nconst invitation = await api.getInvitation(adminClient, 'invite-token');\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for Database Webhook Events\nDESCRIPTION: This code snippet defines TypeScript types for database webhook events, including the structure of the change object and how to type it for specific tables.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/database_webhooks_legal_pages_marketing_pages_64.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Database } from '@kit/supabase/database';\n\nexport type Tables = Database['public']['Tables'];\n\nexport type TableChangeType = 'INSERT' | 'UPDATE' | 'DELETE';\n\nexport interface RecordChange<\n  Table extends keyof Tables,\n  Row = Tables[Table]['Row'],\n> {\n  type: TableChangeType;\n  table: Table;\n  record: Row;\n  schema: 'public';\n  old_record: null | Row;\n}\n\ntype AccountChange = RecordChange<'accounts'>;\n```\n\n----------------------------------------\n\nTITLE: Identifying Users in Makerkit Analytics\nDESCRIPTION: Implementation of user identification using the analytics.identify method to associate users with their actions and properties.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/translations_updating_latest_version_tutorials_87.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { analytics } from '@kit/analytics';\n\nvoid analytics.identify(userId, {\n  email: user.email,\n  plan: user.subscriptionPlan,\n  // ... other user properties\n});\n```\n\n----------------------------------------\n\nTITLE: Switch Component with Label\nDESCRIPTION: A toggle switch component implementation with an associated label. Uses shadcn UI's Switch component for the toggle functionality.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/multi_step_forms_page_shadcn_40.md#2025-04-22_snippet_30\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Label } from '@kit/ui/label';\nimport { Switch } from '@kit/ui/switch';\n\nexport default function SwitchDemo() {\n  return (\n    <div>\n      <div className=\"flex items-center space-x-2\">\n        <Switch id=\"airplane-mode\" />\n        <Label htmlFor=\"airplane-mode\">Airplane Mode</Label>\n      </div>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Locale in Environment\nDESCRIPTION: Environment variable configuration for setting the default locale in the application.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/translations_updating_latest_version_tutorials_87.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nDEFAULT_LOCALE=de\n```\n\n----------------------------------------\n\nTITLE: Creating a Success Alert Component in React\nDESCRIPTION: Shows how to implement a Success Alert component using the 'success' variant from Shadcn UI in a React application.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/multi_step_forms_page_shadcn_40.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CheckCircleIcon } from 'lucide-react';\n\nimport { Alert, AlertDescription, AlertTitle } from '@kit/ui/alert';\n\nexport default function SuccessAlertDemo() {\n  return (\n    <Alert variant={'success'}>\n      <CheckCircleIcon className=\"h-5 w-5\" />\n\n      <AlertTitle>\n        <span>This is a success alert</span>\n      </AlertTitle>\n\n      <AlertDescription>\n        This is the description of the alert.\n      </AlertDescription>\n    </Alert>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Stripe Webhook Listener\nDESCRIPTION: Runs a pnpm script (`stripe:listen`) to start the Stripe CLI in listen mode. This command forwards webhook events sent by Stripe to the local development server, which is necessary for testing billing and subscription features.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/faq_functional_walkthrough_introduction_96.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n```bash\npnpm run stripe:listen\n```\n```\n\n----------------------------------------\n\nTITLE: Cloning Repository via Git in Bash\nDESCRIPTION: Clones the original repository into a local directory using git. No dependencies except git. The directory name can be changed from 'tasks-app' to fit user preference. Input: executed in terminal, Output: local repository folder is created.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/initializing_project_introduction_marketing_site_pages_14.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:makerkit/next-firebase-saas-kit.git tasks-app\n```\n\n----------------------------------------\n\nTITLE: Calling Server Actions from Client Components\nDESCRIPTION: Shows how to invoke a server action from a client component, demonstrating the clean interface for client-side code to interact with server-side data mutations.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/llms_migration_from_makerkit_v1_navigating_codebase_49.md#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nawait createNoteAction(data);\n```\n\n----------------------------------------\n\nTITLE: Implementing CSRF Protection\nDESCRIPTION: Example of implementing CSRF token validation using the withCsrf pipe in an action function.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_one_time_payments_stripe_webhooks_ci_tests_73.md#2025-04-22_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nexport const action: ActionFunction = async ({ request }) => {\n  await withCsrf(request);\n}\n```\n\n----------------------------------------\n\nTITLE: Theming with ShadCN in Next.js Firebase\nDESCRIPTION: Explains how to apply ShadCN UI themes by updating `global.css` and configuring `tailwind.config.js`. CSS variables and tailwind color object are crucial for theme consistency.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/environment_variables_setup_project_configuration_set_up_emails_9.md#2025-04-22_snippet_17\n\nLANGUAGE: js\nCODE:\n```\nprimary: {\n  DEFAULT: 'hsl(var(--primary))',\n  foreground: 'hsl(var(--primary-foreground))',\n  ...colors.violet,\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering TicketMessagesContainer in a Next.js Page Component\nDESCRIPTION: This snippet demonstrates placing the `TicketMessagesContainer` component within the JSX of a Next.js page (`apps/web/app/home/[account]/tickets/[ticketId]/page.tsx`). It passes the `ticketId` and `page` number as props to the container.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/data_fetching_3.md#2025-04-22_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n{% title=\"apps/web/app/home/[account]/tickets/[ticketId]/page.tsx\" %}\n<PageBody>\n  <TicketMessagesContainer ticketId={ticket.id} page={page} />\n</PageBody>\n```\n\n----------------------------------------\n\nTITLE: Server Side Subscription Check in TypeScript\nDESCRIPTION: TypeScript code demonstrating server-side subscription validation in an API action handler.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/theming_how_to_version_0_6_0_81.md#2025-04-22_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nexport default async function action({ request }) {\n  const organization = await parseOrganizationCookie(request);\n\n  const isSubscriptionActive =\n    await isOrganizationSubscriptionActive(organization);\n\n  if (!isSubscriptionActive) {\n    return throwForbiddenError();\n  }\n\n  // all good! perform action\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating MakerKit's Folder Structure and Architecture\nDESCRIPTION: Shows the folder structure of a MakerKit application, which follows an onion architecture pattern with core, lib/components, and pages layers. This structure helps manage updates and customizations efficiently.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/architecture_api_guards_app_check_2.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n- src\n  - lib\n  - components\n  - pages\n    - api\n  - core\n```\n\n----------------------------------------\n\nTITLE: Initializing Firebase Admin SDK in API Route\nDESCRIPTION: This snippet shows the essential steps for initializing the Firebase Admin SDK in a Next.js API route. It uses the withFirebaseAdmin middleware to initialize the SDK and then gets a Firestore instance optimized for serverless environments using REST instead of gRPC.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/reading_document_reading_documents_list_creating_document_8.md#2025-04-22_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nawait withFirebaseAdmin();\n\nconst { userId } = req.query;\n\nconst firestore = getRestFirestore();\nconst usersCollection = firestore.collection('users');\nconst user = await usersCollection.doc(userId).get();\n```\n\n----------------------------------------\n\nTITLE: Integrating Task Components into the App Container in Next.js\nDESCRIPTION: Code snippet showing how to integrate the task components into the application container. It conditionally displays either the TasksEmptyState or TasksTableContainer based on whether tasks exist, using the If component for conditional rendering.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/running_project_supabase_data_fetching_supabase_data_writing_27.md#2025-04-22_snippet_28\n\nLANGUAGE: tsx\nCODE:\n```\n<AppContainer>\n  <If condition={!count}>\n    <TasksEmptyState />\n  </If>\n\n  <TasksTableContainer\n    pageIndex={pageIndex}\n    pageCount={pageCount}\n    tasks={tasks}\n    query={searchParams.query}\n  />\n</AppContainer>\n```\n\n----------------------------------------\n\nTITLE: Defining a Metered Usage Billing Schema in TypeScript\nDESCRIPTION: Creates a billing schema that defines a metered usage plan where the charge is based on data usage. This example uses a tiered pricing model with Stripe but can be adapted to other providers.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/lemon_squeezy_metered_usage_one_off_payments_38.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nexport default createBillingSchema({\n  provider,\n  products: [\n    {\n      id: 'starter',\n      name: 'Starter',\n      description: 'The perfect plan to get started',\n      currency: 'USD',\n      badge: `Value`,\n      plans: [\n        {\n          name: 'Starter Monthly',\n          id: 'starter-monthly',\n          trialDays: 7,\n          paymentType: 'recurring',\n          interval: 'month',\n          lineItems: [\n            {\n              id: 'price_1NNwYHI1i3VnbZTqI2UzaHIe',\n              name: 'Addon 2',\n              cost: 0,\n              type: 'metered',\n              unit: 'GBs',\n              tiers: [\n                {\n                    upTo: 10,\n                    cost: 0.1,\n                },\n                {\n                    upTo: 100,\n                    cost: 0.05,\n                },\n                {\n                    upTo: 'unlimited',\n                    cost: 0.01,\n                }\n              ]\n            },\n          ],\n        }\n      ],\n    }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Server-Side Page Access Control\nDESCRIPTION: Implementation of server-side subscription check for gating access to pages using Next.js Server Components.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/subscription_permissions_organizations_lemon_squeezy_23.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { use } from \"react\";\nimport { redirect } from \"next/navigation\";\nimport { Stripe } from \"stripe\";\nimport loadAppData from '~/lib/server/loaders/load-app-data';\n\ninterface Params {\n  params: {\n    organization: string;\n  }\n}\n\nfunction GatedPage({ params }: Params) {\n  const canAccessPage = use(canUserAccessPage(params.organization));\n\n  if (!canAccessPage) {\n    redirect('/dashboard?error=forbidden-subscription');\n  }\n\n  // ...\n}\n\nasync function canUserAccessPage(\n  organizationUid: string\n) {\n  const data = await loadAppData(organizationUid);\n  const subscription = data.organization.subscription?.data;\n\n  return subscription && isSubscriptionActive(subscription.status);\n}\n\nfunction isSubscriptionActive(status: Stripe.Subscription.Status) {\n  return ['active', 'trialing'].includes(status);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication Providers in Next.js Supabase Project\nDESCRIPTION: This code snippet shows the configuration object for setting up authentication providers in a Next.js Supabase project. It allows enabling or disabling email/password, phone number, email link, and OAuth authentication methods.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/adding_app_pages_guarding_pages_updating_sidebar_menu_32.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Provider } from '@supabase/gotrue-js/src/lib/types';\n\n// in your configuration JSON\nauth: {\n  // ensure this is the same as your Supabase project. By default - it's true\n  requireEmailConfirmation:\n    process.env.NEXT_PUBLIC_REQUIRE_EMAIL_CONFIRMATION === 'true',\n  // NB: Enable the providers below in the Supabase Console\n  // in your production project\n  providers: {\n    emailPassword: true,\n    phoneNumber: false,\n    emailLink: false,\n    oAuth: ['google'] as Provider[]\n  },\n},\n```\n\n----------------------------------------\n\nTITLE: Zod Schema for Creating Billing Portal Sessions in Billing API\nDESCRIPTION: This schema defines the parameters required for creating a billing portal session, including the return URL and customer ID.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/google_analytics_provider_posthog_analytics_provider_umami_analytics_provider_88.md#2025-04-22_snippet_38\n\nLANGUAGE: tsx\nCODE:\n```\nreturnUrl: z.string().url(),\ncustomerId: z.string().min(1),\n```\n\n----------------------------------------\n\nTITLE: Deleting Task Hook with SWR Mutation\nDESCRIPTION: Defines a custom React hook that uses SWR mutation to delete tasks. It integrates with the Supabase client and takes a task ID as the parameter for deletion.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/running_project_supabase_data_fetching_supabase_data_writing_27.md#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport useSWRMutation from 'swr/mutation';\n\nimport useSupabase from '~/core/hooks/use-supabase';\nimport { deleteTask } from '~/lib/tasks/mutations';\n\nfunction useDeleteTaskMutation() {\n  const client = useSupabase();\n  const taskId = ['tasks'];\n\n  return useSWRMutation(\n    taskId,\n    async (_, { arg: taskId }: { arg: number }) => {\n      return deleteTask(client, taskId);\n  });\n}\n\nexport default useDeleteTaskMutation;\n```\n\n----------------------------------------\n\nTITLE: Using Supabase Admin Client in Route Handlers\nDESCRIPTION: This example shows how to initialize a Supabase client with admin permissions using the service role key in a route handler.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/deploying_production_environment_variables_functions_26.md#2025-04-22_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nimport getSupabaseRouteHandlerClient from '~/core/supabase/route-handler-client';\n\nexport function  GET() {\n  const supabase = getSupabaseRouteHandlerClient({\n    admin: true\n  });\n\n  // Do something with the supabase client\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Documents with Firebase Web SDK\nDESCRIPTION: Deletes a document from Firestore using the Web SDK with a custom hook. This hook provides access to the Firestore instance and allows deleting documents by their ID from the client side.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/reading_document_reading_documents_list_creating_document_8.md#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useFirestore } from 'reactfire';\nimport { useCallback } from 'react';\nimport { deleteDoc, doc } from \"firebase/firestore\";\n\nfunction useDeleteTask() {\n  const firestore = useFirestore();\n\n  return useCallback(\n    (taskId: string) => {\n      const tasksDoc = doc(firestore, `/tasks`, taskId);\n\n      return deleteDoc(tasksDoc);\n    },\n    [firestore]\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Firebase App Check Token using Custom Hook\nDESCRIPTION: This TypeScript snippet shows how to obtain a Firebase App Check token using the `useGetAppCheckToken` custom hook. The hook returns an asynchronous function (`getAppCheckToken`) which, when invoked with `await`, resolves to the App Check token. This token should be included in the 'X-Firebase-AppCheck' header for protected API requests.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/ci_tests_running_tests_testing_limitations_12.md#2025-04-22_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\nconst getAppCheckToken = useGetAppCheckToken();\nconst appCheckToken = await getAppCheckToken();\n\nconsole.log(appCheckToken) // token\n```\n\n----------------------------------------\n\nTITLE: Setting Up Row-Level Security for Project Tables\nDESCRIPTION: Enables row-level security on the projects and project_members tables, revokes default permissions, and grants specific permissions to authenticated users for implementing access control.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/projects_data_model_53.md#2025-04-22_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nalter table public.projects enable row level security;\nalter table public.project_members enable row level security;\n\n-- Revoke all permissions by default\nREVOKE ALL ON public.projects FROM public, service_role;\nREVOKE ALL ON public.project_members FROM public, service_role;\n\n-- Grant access to authenticated users\nGRANT SELECT, INSERT, UPDATE, DELETE ON public.projects TO authenticated;\nGRANT SELECT, INSERT, UPDATE, DELETE ON public.project_members TO authenticated;\n```\n\n----------------------------------------\n\nTITLE: Implementing Super Admin Assignment Script in TypeScript\nDESCRIPTION: A TypeScript script that uses Firebase Admin SDK to assign super admin role to a user by setting custom claims. The script loads environment variables, initializes Firebase Admin, and provides a function to update user claims.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/adding_admin_users_admin_overview_admin_1.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { config } from 'dotenv';\n\nconfig({\n  path: '.env.local'\n});\n\nimport * as admin from 'firebase-admin';\n\nconst privateKey = process.env.SERVICE_ACCOUNT_PRIVATE_KEY.replace(/\\\\n/g, '\\n');\n\nexport const app = admin.initializeApp({\n  credential: admin.credential.cert({\n    projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,\n    privateKey,\n    clientEmail: process.env.SERVICE_ACCOUNT_CLIENT_EMAIL,\n  }),\n  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,\n});\n\nconst auth = app.auth();\n\nasync function writeClaims(userId: string, claims: object, merge = true) {\n  console.log(`Setting claims for user with ID ${userId}`);\n\n  try {\n    const user = await auth.getUser(userId);\n    const currentClaims = user.customClaims || {};\n\n    await auth.setCustomUserClaims(\n      userId,\n      merge\n        ? {\n            ...currentClaims,\n            ...claims,\n          }\n        : claims,\n    );\n\n    console.log(`Claims set successfully`);\n  } catch (e) {\n    console.error(e);\n  }\n\n  process.exit();\n}\n\nconst userId = '<user_id>';\n\nconst claims = {\n  role: 'super-admin'\n};\n\nvoid writeClaims(userId, claims);\n```\n\n----------------------------------------\n\nTITLE: Uploading Files to Firebase Storage with Organization Metadata (TypeScript)\nDESCRIPTION: Implements a file upload handler that saves a selected file to Firebase Storage, attaching custom metadata (organizationId) for authorization checks. Utilizes ref and uploadBytes from the Firebase SDK, displays upload states using toast notifications, and integrates with an organization-aware application structure. Assumes dependencies on firebase/storage, sonner, reactfire, and a utility useCurrentOrganization hook.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/custom_fetch_fetching_data_firestore_making_api_requests_4.md#2025-04-22_snippet_15\n\nLANGUAGE: TSX\nCODE:\n```\nimport { ref, uploadBytes } from 'firebase/storage';\nimport { toast } from 'sonner';\nimport { useStorage } from 'reactfire';\nimport { useCurrentOrganization } from './use-current-organization';\n\nfunction Component() {\n  const storage = useStorage();\n  const organization = useCurrentOrganization();\n\n  async function uploadFile(file: File) {\n    if (!organization) return;\n\n    const organizationId = organization.id;\n    const path = `/${organizationId}/uploads/${file.name}`;\n    const reference = ref(storage, path);\n\n    const promise = uploadBytes(reference, file, {\n      cacheControl: 'max-age=31536000',\n      customMetadata: {\n        organizationId,\n      },\n    });\n\n    toast.promise(promise, {\n      success: `Yay, uploaded!`,\n      loading: `Uploading...`,\n      error: `Error :(`\n    });\n  }\n\n  return <UploadForm onFileChosen={uploadFile} />\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Server Actions for Updating Ticket Priority and Assignee in TypeScript\nDESCRIPTION: This snippet defines two server actions: updateTicketPriorityAction and updateTicketAssigneeAction. These actions update the ticket's priority and assignee in the Supabase database and handle revalidation and error logging.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/data_fetching_3.md#2025-04-22_snippet_32\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { revalidatePath } from 'next/cache';\nimport { getLogger } from '@kit/shared/logger';\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\n\nexport const updateTicketPriorityAction = enhanceAction(\n  async (data) => {\n    const logger = await getLogger();\n    const client = getSupabaseServerClient();\n\n    logger.info({ data }, 'Updating ticket priority...');\n\n    const response = await client\n      .from('tickets')\n      .update({\n        priority: data.priority,\n      })\n      .eq('id', data.ticketId)\n      .single();\n\n    if (response.error) {\n      logger.error(\n        { error: response.error.message },\n        'Error updating ticket priority',\n      );\n\n      throw new Error(response.error.message);\n    }\n\n    revalidatePath(`/home/[account]/tickets/[ticket]`, 'page');\n\n    return response.data;\n  },\n  {\n    auth: true,\n    schema: UpdateTicketPrioritySchema,\n  },\n);\n\nexport const updateTicketAssigneeAction = enhanceAction(\n  async (data) => {\n    const client = getSupabaseServerClient();\n    const logger = await getLogger();\n\n    logger.info({ data }, 'Updating ticket assignee...');\n\n    const response = await client\n      .from('tickets')\n      .update({\n        assigned_to: data.assigneeId,\n      })\n      .eq('id', data.ticketId)\n      .single();\n\n    if (response.error) {\n      logger.error(\n        { error: response.error.message },\n        'Error updating ticket assignee',\n      );\n\n      throw new Error(response.error.message);\n    }\n\n    revalidatePath(`/home/[account]/tickets/[ticket]`, 'page');\n\n    return response.data;\n  },\n  {\n    auth: true,\n    schema: UpdateTicketAssigneeSchema,\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Extending Analytics API with Custom Events (TypeScript)\nDESCRIPTION: Provides a pattern for creating custom analytics logic by defining custom event types (`MyAppEvents`) and using the `useAppEvents` hook to emit them. This example shows a custom hook `useMyAnalytics` that emits a 'feature.used' event and also makes a direct call to `analytics.trackEvent` for potentially more detailed tracking.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/google_analytics_provider_posthog_analytics_provider_umami_analytics_provider_88.md#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { analytics } from '@kit/analytics';\nimport { useAppEvents } from '@kit/shared/events';\n\ninterface MyAppEvents {\n  'feature.used': { featureName: string };\n}\n\nexport function useMyAnalytics() {\n  const { emit } = useAppEvents<MyAppEvents>();\n\n  return {\n    trackFeatureUse: (featureName: string) => {\n      emit({ type: 'feature.used', payload: { featureName } });\n      // If you need additional tracking logic:\n      void analytics.trackEvent('Feature Used', { featureName });\n    },\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: RLS Policy: Restrictive Write Access\nDESCRIPTION: Example of a restrictive RLS policy that takes precedence over permissive policies, ensuring that authenticated users can only insert their own user records.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/supabase_not_stopping_tables_not_found_dark_theme_22.md#2025-04-22_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy \"Restrict write access to authenticated users\"\n  on users\n  as restrictive;\n  for insert\n  to authenticated\n  with check (id = auth.uid())\n```\n\n----------------------------------------\n\nTITLE: Initializing SDK in Server Action\nDESCRIPTION: This example shows how to initialize the Makerkit SDK in a Next.js server action using the appropriate Supabase client for server actions.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/organization_sdk_organization_subscription_sdk_sdk_25.md#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n'use server';\n\nimport getSdk from '~/lib/sdk';\nimport getSupabaseServerActionClient from '~/core/supabase/server-action-client';\n\nexport async function myServerAction() {\n  const client = getSupabaseServerActionClient();\n  const sdk = getSdk(client);\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Zod Schema for Ticket Status Form in TypeScript\nDESCRIPTION: Creates a Zod schema to validate the ticket status update form data. It defines the structure for ticketId and status fields.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/data_fetching_3.md#2025-04-22_snippet_26\n\nLANGUAGE: tsx\nCODE:\n```\nimport { z } from 'zod';\n\nexport const UpdateTicketStatusSchema = z.object({\n  ticketId: z.string().uuid(),\n  status: z.enum(['open', 'closed', 'resolved', 'in_progress']),\n});\n```\n\n----------------------------------------\n\nTITLE: Sample Environment Variables Configuration\nDESCRIPTION: This is a comprehensive example of environment variables needed for the Remix Supabase Starter Kit, including site settings, authentication, billing, CMS, and feature flags.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/multi_step_forms_page_stepper_91.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# SITE\nVITE_SITE_URL=http://localhost:5173\nVITE_PRODUCT_NAME=Makerkit\nVITE_SITE_TITLE=\"Makerkit - The easiest way to build and manage your SaaS\"\nVITE_SITE_DESCRIPTION=\"Makerkit is the easiest way to build and manage your SaaS. It provides you with the tools you need to build your SaaS, without the hassle of building it from scratch.\"\nVITE_DEFAULT_THEME_MODE=light\nVITE_THEME_COLOR=\"#ffffff\"\nVITE_THEME_COLOR_DARK=\"#0a0a0a\"\n\n# AUTH\nVITE_AUTH_PASSWORD=true\nVITE_AUTH_MAGIC_LINK=false\nVITE_CAPTCHA_SITE_KEY=\n\n# BILLING\nVITE_BILLING_PROVIDER=stripe\n\n# CMS\nCMS_CLIENT=keystatic\n\n# KEYSTATIC\nVITE_KEYSTATIC_CONTENT_PATH=./content\n\n# LOCALES PATH\nVITE_LOCALES_PATH=apps/web/public/locales\n\n# PATHS (to be used in \"packages\")\nSIGN_IN_PATH=/auth/sign-in\nSIGN_UP_PATH=/auth/sign-up\nTEAM_ACCOUNTS_HOME_PATH=/home\nINVITATION_PAGE_PATH=/join\n\n# FEATURE FLAGS\nVITE_ENABLE_THEME_TOGGLE=true\nVITE_ENABLE_PERSONAL_ACCOUNT_DELETION=true\nVITE_ENABLE_PERSONAL_ACCOUNT_BILLING=true\nVITE_ENABLE_TEAM_ACCOUNTS_DELETION=true\nVITE_ENABLE_TEAM_ACCOUNTS_BILLING=true\nVITE_ENABLE_TEAM_ACCOUNTS=true\nVITE_ENABLE_TEAM_ACCOUNTS_CREATION=true\n```\n\n----------------------------------------\n\nTITLE: Identifying Users with Makerkit Analytics API in TypeScript\nDESCRIPTION: Demonstrates how to use the `identify` method from the `@kit/analytics` module to associate a unique user ID with user properties like email and subscription plan. This allows tracking user actions back to specific individuals.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/custom_analytics_provider_google_analytics_provider_posthog_analytics_provider_36.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { analytics } from '@kit/analytics';\n\nvoid analytics.identify(userId, {\n  email: user.email,\n  plan: user.subscriptionPlan,\n  // ... other user properties\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Project Members Table and Indexes\nDESCRIPTION: Creates the project_members table with foreign key constraints, unique indexes for project owners, and basic indexes for performance optimization.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/projects_data_model_53.md#2025-04-22_snippet_27\n\nLANGUAGE: sql\nCODE:\n```\ncreate table if not exists public.project_members (\n  project_id uuid not null references public.projects(id) on delete cascade,\n  user_id uuid not null references auth.users(id) on delete cascade,\n  role public.project_role not null default 'member',\n  created_at timestamptz not null default now(),\n  updated_at timestamptz not null default now(),\n  primary key (project_id, user_id)\n);\n\ncreate unique index projects_unique_owner on public.project_members (project_id) where role = 'owner';\n\ncreate index project_members_project_id on public.project_members (project_id);\ncreate index project_members_user_id on public.project_members (user_id);\n```\n\n----------------------------------------\n\nTITLE: Defining a Reusable Supabase Query Function\nDESCRIPTION: Shows a client-agnostic function `getOrganizationById` (in `organizations/queries.ts`) for fetching organization details from Supabase. It accepts a Supabase client instance and an organization ID as parameters, allowing it to be used in both server and client environments. It uses the Supabase JS client methods (`from`, `select`, `eq`, `single`) to build and execute the query.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/auth_setup_authentication_blog_16.md#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n {% title=\"organizations/queries.ts\" %}\nexport function getOrganizationById(\n  client: Client, // Assuming Client is a Supabase client type\n  organizationId: number\n) {\n  return client\n    .from('organizations')\n    .select(`\n      id,\n      name,\n      logoURL: logo_url\n    `)\n    .eq('id', organizationId)\n    .throwOnError()\n    .single();\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Organization ID from Cookie in Server Action (TSX)\nDESCRIPTION: This asynchronous function `getOrganizationId` demonstrates how to retrieve the selected organization's ID within a server context (like Server Actions, API Routes, or Server Components) in a Next.js Supabase application. It uses `getSupabaseServerActionClient` to get a Supabase client, `requireSession` to ensure the user is authenticated, and `parseOrganizationIdCookie` to extract the organization ID from the user's cookie, passing the user ID for scoping. The result can be null.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/api_routes_vs_server_actions_api_routes_call_api_routes_from_client_19.md#2025-04-22_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\nimport getSupabaseServerActionClient from '~/core/supabase/action-client';\nimport { parseOrganizationIdCookie } from '~/lib/server/cookies/organization.cookie';\nimport requireSession from '~/lib/user/require-session';\n\nasync function getOrganizationId() {\n  const client = getSupabaseServerActionClient();\n  const session = await requireSession(client);\n\n  return parseOrganizationIdCookie(session.user.id);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Task Data Loader in Remix\nDESCRIPTION: Creates a loader function for fetching tasks data with pagination and search functionality using Supabase client. Handles organization context and returns formatted data for the UI.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/supabase_data_fetching_supabase_data_writing_tailwind_css_86.md#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nexport async function loader(args: LoaderArgs) {\n  const request = args.request;\n\n  const url = new URL(request.url);\n  const searchParams = url.searchParams;\n  const page = searchParams.get('page') ?? '1';\n  const query = searchParams.get('query') ?? '';\n\n  const client = getSupabaseServerClient(request);\n  const data = await getCurrentOrganization(client);\n\n  const pageSize = 8;\n  const pageIndex = Number(page) - 1;\n  const organizationId = data?.organization.id;\n\n  if (!organizationId) {\n    return new Response('Not found', {\n      status: 404,\n    });\n  }\n\n  const {\n    data: tasks,\n    count,\n    error,\n  } = await getTasks(client, {\n    organizationId: data.organization.id,\n    pageIndex,\n    query,\n  });\n\n  if (error) {\n    console.error(error);\n\n    return json({\n      tasks: [],\n      count: 0,\n      pageCount: 0,\n      query,\n      pageIndex,\n      pageSize,\n    });\n  }\n\n  const pageCount = count ? Math.ceil(count / pageSize) : 0;\n\n  return json({\n    tasks,\n    count,\n    query,\n    pageCount,\n    pageIndex,\n    pageSize,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Using CSRF Token with Server Actions\nDESCRIPTION: Example of retrieving and using CSRF tokens with Server Actions in Next.js components\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/user_reading_record_creating_record_20.md#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport useCsrfToken from '~/core/hooks/use-csrf-token';\n\n// somehwere in your component\nconst token = useCsrfToken();\n```\n\n----------------------------------------\n\nTITLE: Setting Resend API Key and Sender Email (Bash)\nDESCRIPTION: Configures the necessary environment variables for using Resend. `RESEND_API_KEY` holds your Resend API key for authentication, and `EMAIL_SENDER` specifies the default 'from' address for outgoing emails. These are required when `MAILER_PROVIDER` is set to `resend`.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/database_webhooks_legal_pages_marketing_pages_64.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nRESEND_API_KEY=your-api-key\nEMAIL_SENDER=your-email\n```\n\n----------------------------------------\n\nTITLE: Complete Ticket Messages Hook with Realtime Updates\nDESCRIPTION: Full implementation of a custom hook that fetches ticket messages using infinite query pagination and sets up a realtime subscription to append new customer messages as they arrive.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/realtime_updates_server_components_7.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nfunction useFetchTicketMessages(params: {\n  ticketId: string;\n  page: number;\n  queryKey: string[];\n}) {\n  const appendMessage = useAppendNewMessage({ queryKey: params.queryKey });\n  const client = useSupabase();\n\n  const { ticketId, page } = params;\n  const messagesPerPage = 25;\n\n  const queryFn = async () => {\n    const startOffset = (page - 1) * messagesPerPage;\n    const endOffset = startOffset + messagesPerPage;\n\n    const { data: messages, error } = await client\n      .from('messages')\n      .select<\n        string,\n        Message\n      >('*, account: author_account_id (email, name, picture_url)')\n      .eq('ticket_id', ticketId)\n      .order('created_at', { ascending: false })\n      .range(startOffset, endOffset);\n\n    if (error) {\n      throw error;\n    }\n\n    return messages;\n  };\n\n  useEffect(() => {\n    const channel = client.channel(`messages-channel-${ticketId}`);\n\n    const subscription = channel\n      .on(\n        'postgres_changes',\n        {\n          event: 'INSERT',\n          schema: 'public',\n          filter: `ticket_id=eq.${ticketId}`,\n          table: 'messages',\n        },\n        (payload) => {\n          const message = payload.new as Tables<'messages'>;\n\n          if (message.author === 'customer') {\n            appendMessage(message);\n          }\n        },\n      )\n      .subscribe();\n\n    return () => {\n      void subscription.unsubscribe();\n    };\n  }, [client, ticketId, appendMessage]);\n\n  return useInfiniteQuery({\n    queryKey: params.queryKey,\n    queryFn,\n    initialPageParam: page,\n    getNextPageParam: (lastPage, _, lastPageParam) => {\n      if (lastPage.length === 0) {\n        return;\n      }\n\n      return lastPageParam + 1;\n    },\n    getPreviousPageParam: (_, __, firstPageParam) => {\n      if (firstPageParam <= 1) {\n        return;\n      }\n\n      return firstPageParam - 1;\n    },\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Function to Calculate Remaining Tickets in PostgreSQL\nDESCRIPTION: This function calculates how many tickets a user can still create based on their subscription plan. It returns -1 for unlimited plans, checks against a 50 ticket limit for free plans, and returns the difference between max allowed and used tickets for paid plans.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/payments_billing_6.md#2025-04-22_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace function public.get_remaining_tickets(account_id uuid)\nreturns int\nset search_path = ''\nas $$\ndeclare\n  subscription record;\n  ticket_count int;\n  max_tickets int;\nbegin\n  select *\n    into subscription\n    from public.get_subscription_details(account_id);\n\n  if subscription is null then\n    select count(*)\n      into ticket_count\n      from public.tickets\n      where account_id = account_id and\n      created_at >= now() - interval '30 days';\n\n    return 50 - ticket_count;\n  end if;\n\n  select max_tickets\n    into max_tickets\n    from public.plans\n    where variant_id = subscription.variant_id;\n\n  -- Unlimited tickets\n  if max_tickets = -1 then\n    return -1;\n  end if;\n\n  select count(*)\n    into ticket_count\n    from public.tickets\n    where account_id = account_id and\n    created_at >= subscription.period_starts_at and\n    created_at <= subscription.period_ends_at;\n\n  return max_tickets - ticket_count;\nend;\n$$ language plpgsql;\n\ngrant execute on function public.get_remaining_tickets(uuid) to authenticated, service_role;\n```\n\n----------------------------------------\n\nTITLE: Configuring Github Actions for Testing\nDESCRIPTION: Commands for enabling E2E and Stripe tests in Github Actions by setting environment variables such as 'ENABLE_E2E_JOB' and 'ENABLE_BILLING_TESTS'. The setup should be done in a testing environment to avoid exposing production secrets.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/going_to_production_clone_repository_code_health_66.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nENABLE_E2E_JOB=true\n```\n\nLANGUAGE: bash\nCODE:\n```\nENABLE_BILLING_TESTS=true\n```\n\n----------------------------------------\n\nTITLE: Implementing CardButtonFooter in React\nDESCRIPTION: Demonstrates the use of CardButtonFooter component to add a footer section to a card button. This is typically used for additional information or actions at the bottom of the card.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/app_breadcrumbs_bordered_navigation_menu_card_button_39.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<CardButtonFooter>\n  <span>Footer information</span>\n</CardButtonFooter>\n```\n\n----------------------------------------\n\nTITLE: Using Permission Checks with React Components\nDESCRIPTION: Example of using the IfHasPermissions component with permission checking functions to conditionally render UI elements based on user permissions.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/supabase_not_stopping_tables_not_found_dark_theme_22.md#2025-04-22_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\n<IfHasPermissions\n  condition={(currentUserRole) =>\n    canInviteUser(currentUserRole, targetUserRole)\n  }\n>\n  <InviteUserComponent />\n</IfHasPermissions>\n```\n\n----------------------------------------\n\nTITLE: Sending Emails with React.Email Template\nDESCRIPTION: Example of how to use the email template with a mailer service to send emails.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/development_authentication_emails_email_configuration_94.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getMailer } from '@kit/mailers';\nimport { renderInviteEmail } from '@kit/email-templates';\n\nasync function sendEmail() {\n  const emailHtml = renderInviteEmail({\n    teamName: 'My Team',\n    teamLogo: 'https://example.com/logo.png',\n    inviter: 'John Doe',\n    invitedUserEmail: ''\n  });\n\n  const mailer = await getMailer();\n\n  return mailer.sendEmail({\n    to: '',\n    from: '',\n    subject: 'Join the team!',\n    html: emailHtml\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Supabase Types\nDESCRIPTION: Command to generate TypeScript types from the Supabase schema, which should be run after schema updates.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/configuring_supabase_database_webhooks_fly_production_environment_variables_95.md#2025-04-22_snippet_33\n\nLANGUAGE: bash\nCODE:\n```\npnpm run supabase:web:typegen\n```\n\n----------------------------------------\n\nTITLE: Setting Default Server Start Command in Dockerfile\nDESCRIPTION: This Dockerfile instruction specifies the default command to execute when a container based on this image starts. It uses `pnpm start` to launch the application server. This command can be overridden at runtime if needed.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/emails_authentication_checklist_65.md#2025-04-22_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\n# Start the server by default, this can be overwritten at runtime\nCMD [\"pnpm\", \"start\"]\n```\n\n----------------------------------------\n\nTITLE: Creating is_project_admin Function in Supabase\nDESCRIPTION: Creates a function that checks if the current user is an admin or owner of a specific project by querying the project_members table with role filtering. Returns a boolean value.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/projects_data_model_53.md#2025-04-22_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nCREATE OR REPLACE FUNCTION public.is_project_admin(p_project_id UUID)\nRETURNS BOOLEAN\nSET search_path = ''\nAS $$\n  SELECT EXISTS (\n    SELECT 1 FROM public.project_members\n    WHERE project_id = p_project_id\n    AND user_id = (SELECT auth.uid())\n    AND role IN ('owner', 'admin')\n  );\n$$ LANGUAGE sql;\n\nGRANT EXECUTE ON FUNCTION public.is_project_admin TO authenticated;\n```\n\n----------------------------------------\n\nTITLE: Creating Basic API Route in Next.js\nDESCRIPTION: Example of creating a simple API route in Next.js that returns a JSON response. This demonstrates the basic structure for creating endpoints in the pages/api directory.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/introduction_running_the_application_technical_details_6.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextApiRequest, NextApiResponse } from \"next\";\n\nexport default (req: NextApiRequest, res: NextApiResponse) => {\n  res.status(200).json({ text: 'Hello' })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing withTranslationProps in Next.js TypeScript\nDESCRIPTION: The `withTranslationProps` function populates translation-related props for pages requiring localization. This snippet shows how to use it within `getStaticProps` for documentation or marketing pages. Requires `~/lib/props/with-translation-props` and `next`.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/adding_admin_users_admin_overview_admin_1.md#2025-04-22_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nimport { withTranslationProps } from \"~/lib/props/with-translation-props\";\nimport { GetStaticPropsContext } from \"next\";\n\nexport async function getStaticProps(\n  context: GetStaticPropsContext\n) {\n  const { props } = await withTranslationProps(context);\n\n  return {\n    props,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Event Types with App Events\nDESCRIPTION: TypeScript code showing how to use custom event types with the App Events system. This example demonstrates emitting a custom 'feature.used' event with typed payloads.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/supabase_client_clone_repository_common_commands_56.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useAppEvents } from '@kit/shared/events';\nimport { MyAppEvents } from './myAppEvents';\n\nfunction SomeComponent() {\n  const { emit } = useAppEvents<MyAppEvents>();\n\n  const handleFeatureUse = () => {\n    emit({ type: 'feature.used', payload: { featureName: 'coolFeature' } });\n  };\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Database Reset Command\nDESCRIPTION: Command to reset the Supabase database to its initial state with seed data.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/updating_sidebar_menu_change_auth_strategy_setup_oauth_79.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpm run supabase:db:reset\n```\n\n----------------------------------------\n\nTITLE: Creating a Navigation Breadcrumb with Dropdown in React\nDESCRIPTION: This code implements a Breadcrumb navigation component with an ellipsis dropdown menu. It uses ShadcnUI's Breadcrumb and DropdownMenu components to create a navigation path with items for Home, Components, and Breadcrumb, with a dropdown for additional options.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/multi_step_forms_page_shadcn_40.md#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  Breadcrumb,\n  BreadcrumbEllipsis,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbList,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n} from '@kit/ui/breadcrumb';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from '@kit/ui/dropdown-menu';\n\nexport default function BreadcrumbDemo() {\n  return (\n    <Breadcrumb>\n      <BreadcrumbList>\n        <BreadcrumbItem>\n          <BreadcrumbLink href=\"/\">Home</BreadcrumbLink>\n        </BreadcrumbItem>\n        <BreadcrumbSeparator />\n        <BreadcrumbItem>\n          <DropdownMenu>\n            <DropdownMenuTrigger className=\"flex items-center gap-1\">\n              <BreadcrumbEllipsis className=\"h-4 w-4\" />\n              <span className=\"sr-only\">Toggle menu</span>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"start\">\n              <DropdownMenuItem>Documentation</DropdownMenuItem>\n              <DropdownMenuItem>Themes</DropdownMenuItem>\n              <DropdownMenuItem>GitHub</DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </BreadcrumbItem>\n        <BreadcrumbSeparator />\n        <BreadcrumbItem>\n          <BreadcrumbLink href=\"/docs/components\">Components</BreadcrumbLink>\n        </BreadcrumbItem>\n        <BreadcrumbSeparator />\n        <BreadcrumbItem>\n          <BreadcrumbPage>Breadcrumb</BreadcrumbPage>\n        </BreadcrumbItem>\n      </BreadcrumbList>\n    </Breadcrumb>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Consuming Credits in Application Route Handler (TypeScript)\nDESCRIPTION: This TypeScript function demonstrates how to consume credits within a Remix application's route handler. It simulates an API call (`callOpenAIApi`), retrieves the usage cost, initializes an admin Supabase client (`getSupabaseRouteHandlerClient`), and calls the `consume_credits` RPC function to deduct the tokens from the user's account.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/billing_webhooks_credit_based_billing_lemon_squeezy_89.md#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nexport function async consumeApi(accountId: string) {\n  // Call the OpenAI API to get the usage\n  const { usage, data } = await callOpenAIApi();\n\n  const client = getSupabaseRouteHandlerClient({\n    admin: true,\n  });\n\n  await client.rpc('consume_credits', {\n    account_id: accountId,\n    tokens: usage,\n  });\n\n  return data;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-Side Page Access Control in Next.js\nDESCRIPTION: Uses getServerSideProps to check organization subscription status and redirect users if necessary.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/migrations_extending_organizations_organization_hooks_10.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { withAppProps } from './with-app-props';\nimport { Stripe } from \"stripe\";\n\nfunction GatedPage() {\n  return <div>...</div>;\n}\n\nexport default GatedPage;\n\nexport async function getServerSideProps(ctx) {\n  const appProps = await withAppProps(ctx);\n\n  // something wrong happened, user gets redirected either way\n  if ('redirect' in appProps) {\n    return appProps;\n  }\n\n  // get organization from subscription\n  const subscription = appProps.props.organization?.subscription;\n\n  // check the subscription exists and status is \"active\" or \"trialing\"\n  if (!subscription || !isSubscriptionActive(subscription.status)) {\n    return {\n      redirect: {\n        destination: '/dashboard?error=forbidden-subscription',\n      },\n    };\n  }\n\n  // all good, we can simply return the props\n  return appProps;\n}\n\nfunction isSubscriptionActive(status: Stripe.Subscription.Status) {\n  return ['active', 'trialing'].includes(status);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing User Permission Check in TypeScript\nDESCRIPTION: This function checks if a user can perform actions on another user based on their roles within an organization.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/technical_details_going_to_production_overview_publish_firebase_security_rules_72.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nexport function canUpdateUser(\n  currentUserRole: MembershipRole,\n  targetUser: MembershipRole\n) {\n  return currentUserRole > targetUser;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for SMTP Email Configuration\nDESCRIPTION: Environment variables configuration for setting up SMTP email service with nodemailer in a Remix Supabase application. Includes essential variables for email server connection and authentication.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/development_authentication_emails_email_configuration_94.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nEMAIL_USER=\nEMAIL_PASSWORD=\nEMAIL_HOST=\nEMAIL_PORT=\nEMAIL_TLS=\n```\n\n----------------------------------------\n\nTITLE: Setting Keystatic GitHub Access Token\nDESCRIPTION: This environment variable provides the authentication token for GitHub integration with Keystatic.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stepper_components_application_configuration_41.md#2025-04-22_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nKEYSTATIC_GITHUB_TOKEN=github_**********************************************\n```\n\n----------------------------------------\n\nTITLE: Git Update Command for Latest Version\nDESCRIPTION: Git command for pulling updates from the upstream Makerkit repository while allowing unrelated histories.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/translations_updating_latest_version_tutorials_87.md#2025-04-22_snippet_2\n\nLANGUAGE: txt\nCODE:\n```\ngit pull upstream main --allow-unrelated-histories\n```\n\n----------------------------------------\n\nTITLE: Setting Database Webhook Secret Environment Variable - Bash\nDESCRIPTION: This snippet demonstrates how to define the SUPABASE_DB_WEBHOOK_SECRET as an environment variable in your deployment environment. This value must be kept secret and shared only between your server and your Supabase instance. It secures webhook requests by enabling mutual authentication for database-triggered events. Replace the asterisks with a strong, randomly generated secret before deployment.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/emails_authentication_checklist_65.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nSUPABASE_DB_WEBHOOK_SECRET=**************************************************\n```\n\n----------------------------------------\n\nTITLE: Installing Cookie Banner Plugin using HTTPS URL\nDESCRIPTION: Alternative command to install the cookie banner plugin using the HTTPS URL instead of SSH, useful if SSH installation fails.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/ai_text_editor_cookie_banner_feedback_popup_24.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit subtree add --prefix plugins/cookie-banner https://github.com/makerkit/next-supabase-saas-kit-plugins cookie-banner --squash\n```\n\n----------------------------------------\n\nTITLE: Creating RLS Policy for Updating Tasks\nDESCRIPTION: SQL command to create a Row Level Security policy for updating tasks. The policy includes both 'using' and 'with check' clauses to filter rows and verify the user has the appropriate permissions.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/adding_turborepo_package_approaching_local_development_database_functions_93.md#2025-04-22_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy update_tasks on public.tasks\n    for update\n    using (\n        account_id = auth.uid() or\n        public.has_permission(auth.uid(), account_id, 'tasks.write'::app_permissions)\n    )\n    with check (\n        account_id = auth.uid() or\n        public.has_permission(auth.uid(), account_id, 'tasks.write'::app_permissions)\n    );\n```\n\n----------------------------------------\n\nTITLE: Configuring Application Branding\nDESCRIPTION: Site configuration object containing branding details including site name, description, theme colors, social media handles, and locale settings.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/reading_document_reading_documents_list_creating_document_8.md#2025-04-22_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\nsite: {\n  name: 'Awesomely - Your SaaS Title',\n  description: 'Your SaaS Description',\n  themeColor: '#ffffff',\n  themeColorDark: '#0a0a0a',\n  siteUrl: process.env.NEXT_PUBLIC_SITE_URL,\n  siteName: 'Awesomely',\n  twitterHandle: '',\n  githubHandle: '',\n  language: 'en',\n  convertKitFormId: '',\n  locale: process.env.NEXT_PUBLIC_DEFAULT_LOCALE,\n}\n```\n\n----------------------------------------\n\nTITLE: Paginated Ticket Message Fetching Hook Implementation with Supabase and React Query (TypeScript/React)\nDESCRIPTION: Implements the `useFetchTicketMessages` hook, which fetches ticket messages using Supabase and manages infinite pagination via React Query's `useInfiniteQuery`. Accepts `ticketId`, `page`, and `queryKey`. Internally defines a query function that fetches messages in pages of 25, incorporating metadata from related accounts. Handles next/previous page logic for continued pagination and error propagation. Outputs query results compatible with React Query's data handling.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/data_fetching_3.md#2025-04-22_snippet_5\n\nLANGUAGE: TSX\nCODE:\n```\n\"function useFetchTicketMessages(params: {\\n  ticketId: string;\\n  page: number;\\n  queryKey: string[];\\n}) {\\n  const client = useSupabase();\\n  const messagesPerPage = 25;\\n\\n  const queryFn = async () => {\\n    // ... Supabase query logic ...\\n  };\\n\\n  return useInfiniteQuery({\\n    queryKey: params.queryKey,\\n    queryFn,\\n    initialPageParam: page,\\n    getNextPageParam: (lastPage, _, lastPageParam) => {\\n      if (lastPage.length === 0) {\\n        return;\\n      }\\n      return lastPageParam + 1;\\n    },\\n    getPreviousPageParam: (_, __, firstPageParam) => {\\n      if (firstPageParam <= 1) {\\n        return;\\n      }\\n      return firstPageParam - 1;\\n    },\\n  });\\n}\\n\"\n```\n\n----------------------------------------\n\nTITLE: Defining an Abstract Mailer Class Structure (TSX)\nDESCRIPTION: Defines an abstract TypeScript class `Mailer` which serves as a blueprint for different mailer provider implementations (e.g., Resend, SMTP). It includes an abstract method `sendEmail` that takes data conforming to `MailerSchema` (validated by Zod) and must be implemented by concrete subclasses. This ensures a consistent interface for sending emails regardless of the underlying provider.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/database_webhooks_legal_pages_marketing_pages_64.md#2025-04-22_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport { z } from 'zod';\n\nimport { MailerSchema } from './schema/mailer.schema';\n\nexport abstract class Mailer<Res = unknown> {\n  abstract sendEmail(data: z.infer<typeof MailerSchema>): Promise<Res>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using the OTP Verification UI Component (TSX)\nDESCRIPTION: Example of integrating the ready-to-use `VerifyOtpForm` component from `@kit/otp/components` into a React page. It requires configuring the purpose, providing the user's email, defining an `onSuccess` callback for handling successful verification, and optionally providing a custom Cancel button.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/analytics_api_custom_analytics_provider_google_analytics_provider_57.md#2025-04-22_snippet_38\n\nLANGUAGE: tsx\nCODE:\n```\nimport { VerifyOtpForm } from '@kit/otp/components';\n\nfunction MyVerificationPage() {\n  return (\n    <VerifyOtpForm\n      purpose=\"password-reset\"\n      email={userEmail}\n      onSuccess={(otp) => {\n        // Handle successful verification\n        // Use the OTP for verification on the server\n      }}\n      CancelButton={\n        <Button variant=\"outline\" onClick={handleCancel}>\n          Cancel\n        </Button>\n      }\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Shadcn UI Component - JSON\nDESCRIPTION: Illustrates updating the `package.json` with export mappings for Shadcn UI components. This setup facilitates tree-shaking and direct importation from the package. Adjust according to component structure.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/cms_api_cms_creating_your_own_cms_client_42.md#2025-04-22_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"exports\": {\n    \"./avatar\": \"./src/shadcn/avatar.tsx\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Server Actions from Client Components with useTransition\nDESCRIPTION: Example of invoking a custom server action from a client component using React's useTransition hook. This approach allows for imperatively calling server functions from client code with custom parameters.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/server_actions_uploading_data_to_storage_writing_data_to_supabase_17.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {FormEventHandler, useCallback, useTransition } from \"react\";\n\nfunction TaskForm() {\n  const [isPending, startTransition] = useTransition();\n\n  const onSubmit: FormEventHandler = useCallback(e => {\n    e.preventDefault();\n\n    const data = new FormData(e.target as HTMLFormElement);\n    const taskName = data.get(\"name\") as string;\n\n    startTransition(async () => {\n      await insertNewTask({\n        task: {\n          name: taskName,\n        }\n      });\n    });\n  });\n\n  return (\n    <form onSubmit={onSubmit}>\n    ...\n    </form>\n  );\n}\n\nexport default TaskForm;\n```\n\n----------------------------------------\n\nTITLE: Importing Feedback Popup Component\nDESCRIPTION: React code to import and use the FeedbackPopupContainer component in a layout file.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/ai_text_editor_cookie_banner_feedback_popup_24.md#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { FeedbackPopupContainer } from '~/plugins/feedback-popup/FeedbackPopup';\n\nexport default function Component() {\n  return (\n    <>\n      <FeedbackPopupContainer>\n        <Button variant='outline'>Feedback</Button>\n      </FeedbackPopupContainer>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Projects List Page Component in React\nDESCRIPTION: React component for displaying projects list with empty state handling and creation dialog integration.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/projects_data_model_53.md#2025-04-22_snippet_35\n\nLANGUAGE: tsx\nCODE:\n```\nimport { use } from 'react';\n\nimport Link from 'next/link';\n\nimport { getSupabaseServerComponentClient } from '@kit/supabase/server-component-client';\nimport { AppBreadcrumbs } from '@kit/ui/app-breadcrumbs';\nimport { Button } from '@kit/ui/button';\nimport {\n  CardButton,\n  CardButtonHeader,\n  CardButtonTitle,\n} from '@kit/ui/card-button';\nimport {\n  EmptyState,\n  EmptyStateButton,\n  EmptyStateHeading,\n  EmptyStateText,\n} from '@kit/ui/empty-state';\nimport { If } from '@kit/ui/if';\nimport { PageBody, PageHeader } from '@kit/ui/page';\n\nimport { CreateProjectDialog } from '~/home/[account]/projects/_components/create-project-dialog';\nimport { createProjectsService } from '~/lib/server/projects/projects.service';\n\ninterface ProjectsPageProps {\n  params: {\n    account: string;\n  };\n}\n\nexport default function ProjectsPage({ params }: ProjectsPageProps) {\n  const client = getSupabaseServerComponentClient();\n  const service = createProjectsService(client);\n\n  const projects = use(service.getProjects(params.account));\n\n  return (\n    <>\n      <PageHeader title=\"Projects\" description={<AppBreadcrumbs />}>\n        <Link href={`/home/${params.account}/projects/new`}>\n          <CreateProjectDialog>\n            <Button>New Project</Button>\n          </CreateProjectDialog>\n        </Link>\n      </PageHeader>\n\n      <PageBody>\n        <If condition={projects.length === 0}>\n          <EmptyState>\n            <EmptyStateHeading>No projects found</EmptyStateHeading>\n\n            <EmptyStateText>\n              You still have not created any projects. Create your first project\n              now!\n            </EmptyStateText>\n\n            <CreateProjectDialog>\n              <EmptyStateButton>Create Project</EmptyStateButton>\n            </CreateProjectDialog>\n          </EmptyState>\n        </If>\n\n        <div className={'grid grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-4'}>\n          {projects.map((project) => (\n            <CardButton key={project.id} asChild>\n              <Link href={`/home/${params.account}/projects/${project.id}`}>\n                <CardButtonHeader>\n                  <CardButtonTitle>{project.name}</CardButtonTitle>\n                </CardButtonHeader>\n              </Link>\n            </CardButton>\n          ))}\n        </div>\n      </PageBody>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Package Installation Examples for Different Targets\nDESCRIPTION: Specific examples of installing packages in different parts of the monorepo using pnpm filter commands.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/text_editor_plugin_waitlist_plugin_plugins_98.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npnpm add my-package --filter \"@kit/ui\"\npnpm add my-package --filter web\n```\n\n----------------------------------------\n\nTITLE: Accessing Team Account Workspace in Client Components\nDESCRIPTION: Shows how to access team account workspace data in client components using the useTeamAccountWorkspace hook, specifically designed for the /home/[account] route.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/llms_migration_from_makerkit_v1_navigating_codebase_49.md#2025-04-22_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\nfunction TeamDashboard() {\n  const { account, user } = useTeamAccountWorkspace();\n\n  return (\n    <div>\n      <h1>{account.name}</h1>\n      <RoleDisplay role={account.role} />\n      <PermissionsList permissions={account.permissions} />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Keystatic GitHub Repository\nDESCRIPTION: This environment variable specifies the GitHub repository to use with Keystatic when using the 'github' storage option.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stepper_components_application_configuration_41.md#2025-04-22_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nNEXT_PUBLIC_KEYSTATIC_STORAGE_REPO=makerkit/next-supabase-saas-kit-turbo-demo\n```\n\n----------------------------------------\n\nTITLE: Using the useTranslation Hook for String Translation\nDESCRIPTION: This snippet demonstrates how to use the useTranslation hook from react-i18next to translate strings in components that are not in the render path.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/team_accounts_only_recipes_adding_translations_55.md#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useTranslation } from 'react-i18next';\n\nconst MyComponent = () => {\n  const { t } = useTranslation();\n  \n  return <div>{t('auth:signIn')}</div>;\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Task Form Component with Firestore Integration in React\nDESCRIPTION: A React form component that allows users to create new tasks in Firestore. It captures form data using FormData API, performs validation, and provides feedback through toast notifications during the submission process.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/deploying_production_development_getting_started_environment_variables_13.md#2025-04-22_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useRouter } from 'next/router';\nimport { FormEventHandler, useCallback } from 'react';\nimport { toast } from 'sonner';\n\nimport TextField from '~/core/ui/TextField';\nimport Button from '~/core/ui/Button';\nimport If from '~/core/ui/If';\nimport Heading from '~/core/ui/Heading';\n\nimport useCreateTask from '~/lib/tasks/hooks/use-create-task';\nimport { useRequestState } from '~/core/hooks/use-request-state';\nimport { useCurrentOrganization } from '~/lib/organizations/hooks/use-current-organization';\n\nconst CreateTaskForm = () => {\n  const createTask = useCreateTask();\n  const { setLoading, state } = useRequestState();\n  const router = useRouter();\n  const organization = useCurrentOrganization();\n  const organizationId = organization?.id as string;\n\n  const onCreateTask: FormEventHandler<HTMLFormElement> = useCallback(\n    async (event) => {\n      event.preventDefault();\n\n      const target = event.currentTarget;\n      const data = new FormData(target);\n      const name = data.get('name') as string;\n\n      const dueDate = (data.get('dueDate') as string) || getDefaultDueDate();\n\n      setLoading(true);\n\n      const task = {\n        organizationId,\n        name,\n        dueDate,\n        description: ``,\n        done: false,\n      };\n\n      const promise = createTask(task).then(() => {\n        return router.push(`/tasks`);\n      });\n\n      await toast.promise(promise, {\n        success: `Task created!`,\n        error: `Ops, error!`,\n        loading: `Creating task...`,\n      });\n    },\n    [router, createTask, organizationId, setLoading]\n  );\n\n  return (\n    <div className={'flex flex-col space-y-4'}>\n      <div>\n        <Heading type={2}>Create a new Task</Heading>\n      </div>\n\n      <form onSubmit={onCreateTask}>\n        <div className={'flex flex-col space-y-3'}>\n          <TextField.Label>\n            Name\n            <TextField.Input\n              required\n              name={'name'}\n              placeholder={'ex. Launch on IndieHackers'}\n            />\n            <TextField.Hint>Hint: whatever you do, ship!</TextField.Hint>\n          </TextField.Label>\n\n          <TextField.Label>\n            Due date\n            <TextField.Input name={'dueDate'} type={'date'} />\n          </TextField.Label>\n\n          <div\n            className={\n              'flex flex-col space-y-2 md:space-y-0 md:space-x-2' +\n              ' md:flex-row'\n            }\n          >\n            <Button loading={state.loading}>\n              <If condition={state.loading} fallback={<>Create Task</>}>\n                Creating Task...\n              </If>\n            </Button>\n\n            <Button color={'transparent'} href={'/tasks'}>\n              Go back\n            </Button>\n          </div>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nfunction getDefaultDueDate() {\n  const date = new Date();\n  date.setDate(date.getDate() + 1);\n  date.setHours(23, 59, 59);\n\n  return date.toDateString();\n}\n\nexport default CreateTaskForm;\n```\n\n----------------------------------------\n\nTITLE: Validating Remix Action Form Data with Zod Result Checking\nDESCRIPTION: This snippet demonstrates validating form data in a Remix `ActionFunction` using a Zod schema. It calls `parseAsync` (though the logic resembles `safeParseAsync`) and then checks the `success` property of the result. If `result.success` is false, it indicates validation failure, and a `BadRequestException` is thrown. If true, TypeScript infers the type of `result.data`, allowing it to be safely used.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/develop_firebase_security_rules_emails_encrypting_secrets_71.md#2025-04-22_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nexport const action: ActionFunction = async ({request}) => {\n  const data = await req.formData();\n  const body = Object.fromEntries(data.entries());\n  const result = await getBodySchema().parseAsync(body);\n\n  // we use result.success as a type guard\n  // when false, we throw an exception\n  if (!result.success) {\n    return throwBadRequestException();\n  }\n\n  // TS correctly infers result.data now\n  return sendInvite(result.data);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Restrictive RLS Policy in Supabase\nDESCRIPTION: A restrictive RLS policy example that applies to all queries. If this policy fails, no other permissive policies will be considered.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/theming_how_to_version_0_6_0_81.md#2025-04-22_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy \"Restrict write access to authenticated users\"\n  on users\n  as restrictive;\n  for insert\n  to authenticated\n  with check (id = auth.uid())\n```\n\n----------------------------------------\n\nTITLE: Reading Documents with Firebase Admin SDK\nDESCRIPTION: Fetches a list of user organizations from Firestore using the Admin SDK. This function can be used in API routes or getServerSideProps functions. It queries the organizations collection where the user is a member and returns transformed data.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/reading_document_reading_documents_list_creating_document_8.md#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport getRestFirestore from '~/core/firebase/admin/get-rest-firestore';\n\nexport async function getOrganizationsForUser(userId: string) {\n  const firestore = getRestFirestore();\n  const organizationsCollection = firestore.collection('organizations');\n\n  const result = await organizationsCollection\n    .where(`members.${userId}`, '!=', null)\n    .get();\n\n  return result.docs.map((doc) => {\n    return {\n      ...doc.data(),\n      members: [],\n      id: doc.id,\n      role: doc.data().members[userId].role,\n    };\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Stripe Payment Mode to One-Time Payments\nDESCRIPTION: Modified code snippet showing how to change the payment mode from subscription to payment for one-time charges.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_one_time_payments_stripe_webhooks_payments_11.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst mode: Stripe.Checkout.SessionCreateParams.Mode = 'payment';\n\n// some code here...\n\nreturn stripe.checkout.sessions.create({\n  mode,\n  // more code here...\n});\n```\n\n----------------------------------------\n\nTITLE: Using Supabase Server Admin Client in Remix Loader\nDESCRIPTION: This snippet demonstrates how to use the Supabase server admin client in a Remix loader function. It retrieves tasks from the database using the getSupabaseServerAdminClient function, which provides admin privileges.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/kits/remix-supabase-turbo/data-fetching/supabase-clients.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LoaderFunctionArgs } from '@remix-run/node';\nimport { getSupabaseServerAdminClient } from '@kit/supabase/server-admin-client';\n\nexport async function loader(args: LoaderFunctionArgs) {\n  const supabase = getSupabaseServerAdminClient()\n\n  const { data, error } = await supabase.from('tasks').select('*');\n\n  return {\n    data,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Scopes to Firebase OAuth Providers in TypeScript (tsx)\nDESCRIPTION: This snippet demonstrates how to dynamically add specific OAuth scopes (like 'scope') to Google and Facebook authentication providers within a React component (`OAuthProviders.tsx`). It iterates over a list of OAuth provider classes, creates instances, and uses `instanceof` checks to apply `addScope` selectively before rendering an authentication button.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/app_check_auth_flow_auth_hooks_69.md#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  GoogleAuthProvider,\n  FacebookAuthProvider,\n} from 'firebase/auth';\n\n{OAUTH_PROVIDERS.map((OAuthProviderClass) => {\n  const providerInstance = new OAuthProviderClass();\n  const providerId = providerInstance.providerId;\n\n  if (providerInstance instanceof GoogleAuthProvider) {\n    providerInstance.addScope('scope');\n  }\n\n  if (providerInstance instanceof FacebookAuthProvider) {\n    providerInstance.addScope('scope');\n  }\n\n   return (\n     // render <AuthProviderButton />\n   );\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Organizations Subscriptions Table in Supabase\nDESCRIPTION: SQL schema for organizations_subscriptions join table that links organizations to their Stripe customer and subscription IDs.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/ui_hooks_mdx_15.md#2025-04-22_snippet_20\n\nLANGUAGE: sql\nCODE:\n```\ncreate table organizations_subscriptions (\n  organization_id bigint not null references public.organizations (id) on delete cascade,\n  subscription_id text unique references public.subscriptions (id) on delete set null,\n  customer_id text not null unique,\n  primary key (organization_id)\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Language Settings in React Router Supabase\nDESCRIPTION: Code showing how to configure supported languages and i18n namespaces in the application settings file. Demonstrates adding new languages and registering translation namespaces.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/notifications_plugins_adding_translations_68.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport const languages: string[] = [defaultLanguage, 'es'];\n\nexport const defaultI18nNamespaces = [\n  'common',\n  'auth',\n  'account',\n  'teams',\n  'billing',\n  'marketing',\n  'chatbots',\n];\n```\n\n----------------------------------------\n\nTITLE: Updating Documents with Firebase Web SDK\nDESCRIPTION: Updates a document in Firestore using the Web SDK with a custom hook. This hook provides access to the Firestore instance and allows updating documents by their ID from the client side.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/reading_document_reading_documents_list_creating_document_8.md#2025-04-22_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useFirestore } from 'reactfire';\nimport { useCallback } from 'react';\nimport { updateDoc, doc } from \"firebase/firestore\";\n\nfunction useUpdateTask(id: string) {\n  const firestore = useFirestore();\n  const tasksDoc = doc(firestore, `/tasks`, id);\n\n  return useCallback(\n    (task: {\n      title: string;\n      description: string;\n      completed: boolean;\n    }) => {\n      return updateDoc(tasksDoc, task);\n    },\n    [tasksDoc]\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Structure for Next.js Supabase Turbo Starter Kit\nDESCRIPTION: This code snippet shows the main directory structure of the Next.js Supabase Turbo Starter Kit, focusing on the apps/web directory and its subdirectories.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/llms_migration_from_makerkit_v1_navigating_codebase_49.md#2025-04-22_snippet_19\n\nLANGUAGE: markdown\nCODE:\n```\n```\n- apps\n---\n web\n---\n-- app\n---\n-- components\n---\n-- config\n---\n-- lib\n---\n-- content\n---\n-- styles\n---\n-- supabase\n```\n```\n\n----------------------------------------\n\nTITLE: Checking Subscription Status with Firestore in TSX\nDESCRIPTION: Example API handler demonstrating how to verify an organization's subscription status using Firestore utilities before performing an action\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/technical_details_going_to_production_overview_publish_firebase_security_rules_72.md#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nexport default async function action({ request }) {\n  const organization = await parseOrganizationCookie(request);\n\n  const isSubscriptionActive =\n    await isOrganizationSubscriptionActive(organization);\n\n  if (!isSubscriptionActive) {\n    return throwForbiddenError();\n  }\n\n  // all good! perform action\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Current Organization in Remix Action\nDESCRIPTION: Demonstrates how to fetch the current organization using getCurrentOrganization helper in a Remix action function\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/updating_sidebar_menu_change_auth_strategy_setup_oauth_79.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ActionFunctionArgs } from '@remix-run/node';\n\nimport getCurrentOrganization from '~/lib/server/organizations/get-current-organization';\nimport getSupabaseServerClient from '~/core/supabase/server-client';\nimport requireSession from '~/lib/user/require-session.server';\n\nimport {\n  parseOrganizationIdCookie,\n} from '~/lib/server/cookies/organization.cookie';\n\nexport async function action({ request }: ActionFunctionArgs) {\n  const client = getSupabaseServerClient();\n  const session = await requireSession(client);\n  const userId = session.user.id;\n  const organizationId = await parseOrganizationIdCookie(request, userId);\n\n  const organizationResponse = await getCurrentOrganization(client, {\n    organizationId,\n    userId,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Secure Task Creation Function with Role Validation\nDESCRIPTION: Security definer function that restricts task creation to admin service role only, implementing role-based access control for task creation.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/server_actions_uploading_data_to_storage_writing_data_to_supabase_30.md#2025-04-22_snippet_28\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace function create_task(user_id bigint, name text)\nreturns tasks as $$\nbegin\n    if current_setting('role') != 'service_role' then\n        raise exception 'Only admins can call this function';\n    end if;\n\n    insert into tasks (user_id, name) values (user_id, name);\n\n    return (select * from tasks where id = currval('tasks_id_seq'));\nend;\n$$ language plpgsql security definer search_path = public;\n```\n\n----------------------------------------\n\nTITLE: Customizing Tailwind Color Palettes\nDESCRIPTION: Example of how to change the primary and dark color palettes in a Makerkit project. This snippet shows how to update the 'primary' color to 'indigo' and the 'dark' color to 'zinc' by modifying the Tailwind configuration.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/initializing_project_introduction_marketing_site_pages_14.md#2025-04-22_snippet_24\n\nLANGUAGE: js\nCODE:\n```\nconst colors = require('tailwindcss/colors');\n\nextend: {\n  colors: {\n    dark: {\n      ...colors.zinc,\n      DEFAULT: colors.zinc[950],\n      foreground: colors.zinc[100],\n    },\n    primary: {\n      DEFAULT: 'hsl(var(--primary))',\n      foreground: 'hsl(var(--primary-foreground))',\n      ...colors.indigo,\n    }\n  },\n},\n```\n\n----------------------------------------\n\nTITLE: Performing Supabase Mutations with React Query (TSX)\nDESCRIPTION: Shows how to use the `useMutation` hook from `@tanstack/react-query` along with the `useSupabase` hook to perform data mutations (inserts) in a Supabase table (`tasks`). It defines a mutation function to insert a new task and demonstrates calling `mutateAsync` within a form submission handler. Dependencies include `@tanstack/react-query` and `@kit/supabase/hooks/use-supabase`.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/csrf_protection_react_query_route_handlers_43.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useMutation } from '@tanstack/react-query';\nimport { useSupabase } from '@kit/supabase/hooks/use-supabase';\n\nfunction CreateTaskForm() {\n  const client = useSupabase();\n\n  const mutation = useMutation({\n    mutationFn: async (data) => {\n      const { data, error } = await client\n        .from('tasks')\n        .insert({\n          title: data.title,\n          description: data.description,\n          account_id: data.accountId,\n        })\n        .select('*')\n        .single();\n\n      if (error) {\n        throw error;\n      }\n\n      return data;\n    },\n  });\n\n  const handleSubmit = async (data) => {\n    const { data, error } = await mutation.mutateAsync(data);\n\n    if (error) {\n      console.error(error);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type=\"text\" name=\"title\" />\n      <input type=\"text\" name=\"description\" />\n      <button type=\"submit\">Create Task</button>\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Specific Organization for a User Server-Side (TS)\nDESCRIPTION: Shows how to fetch a specific organization (`organizationId`) for a particular user (`userId`) using the `getCurrentOrganization` server-side function by providing both optional parameters.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/functions_initializing_project_introduction_85.md#2025-04-22_snippet_12\n\nLANGUAGE: ts\nCODE:\n```\nimport getCurrentOrganization from '~/lib/server/organizations/get-current-organization';\\n\\nexport async function GET() {\\n  const supabase = getSupabaseServerClient();\\n  const response = await getCurrentOrganization(supabase, {\\n    userId: '123',\\n    organizationId: '456'\\n  });\\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Command Palette Component in React\nDESCRIPTION: A React component implementation of a command palette that displays searchable commands with icons and keyboard shortcuts. Uses the Command component from a UI kit with support for groups, items, and shortcuts.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/multi_step_forms_page_shadcn_40.md#2025-04-22_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  Calculator,\n  Calendar,\n  CreditCard,\n  Settings,\n  Smile,\n  User,\n} from 'lucide-react';\n\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n  CommandSeparator,\n  CommandShortcut,\n} from '@kit/ui/command';\n\nimport WrapperComponent from '~/components/content/wrapper';\n\nexport default function CommandDemo() {\n  return (\n    <>\n      <Command className=\"rounded-lg border shadow-md md:min-w-[450px]\">\n        <CommandInput placeholder=\"Type a command or search...\" />\n        <CommandList>\n          <CommandEmpty>No results found.</CommandEmpty>\n          <CommandGroup heading=\"Suggestions\">\n            <CommandItem>\n              <Calendar />\n              <span>Calendar</span>\n            </CommandItem>\n            <CommandItem>\n              <Smile />\n              <span>Search Emoji</span>\n            </CommandItem>\n            <CommandItem disabled>\n              <Calculator />\n              <span>Calculator</span>\n            </CommandItem>\n          </CommandGroup>\n          <CommandSeparator />\n          <CommandGroup heading=\"Settings\">\n            <CommandItem>\n              <User />\n              <span>Profile</span>\n              <CommandShortcut>⌘P</CommandShortcut>\n            </CommandItem>\n            <CommandItem>\n              <CreditCard />\n              <span>Billing</span>\n              <CommandShortcut>⌘B</CommandShortcut>\n            </CommandItem>\n            <CommandItem>\n              <Settings />\n              <span>Settings</span>\n              <CommandShortcut>⌘S</CommandShortcut>\n            </CommandItem>\n          </CommandGroup>\n        </CommandList>\n      </Command>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Token Status Response Type in TypeScript\nDESCRIPTION: TypeScript interface showing the structure of the response when checking a token's status. Includes fields for token existence, purpose, associated user, timestamps, and validation status.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/custom_analytics_provider_google_analytics_provider_posthog_analytics_provider_36.md#2025-04-22_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  exists: boolean;      // Whether the token exists\n  purpose?: string;     // Token purpose\n  userId?: string;      // User ID associated with the token\n  createdAt?: string;   // Creation timestamp\n  expiresAt?: string;   // Expiration timestamp\n  usedAt?: string;      // When the token was used (if used)\n  revoked?: boolean;    // Whether the token is revoked\n  revokedReason?: string; // Reason for revocation (if revoked)\n  verificationAttempts?: number; // Number of verification attempts\n  lastVerificationAt?: string;  // Last verification attempt timestamp\n  lastVerificationIp?: string;  // IP address of last verification attempt\n  isValid?: boolean;    // Whether the token is still valid\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Billing Provider in SQL Database\nDESCRIPTION: Updates the billing provider to Lemon Squeezy in the SQL database configuration. This SQL command ensures the billing system uses the correct provider.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/lemon_squeezy_metered_usage_one_off_payments_38.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nupdate config set billing_provider = 'lemon-squeezy';\n```\n\n----------------------------------------\n\nTITLE: Initializing Firebase Admin SDK in Next.js API Handlers (TypeScript/Next.js, Makerkit)\nDESCRIPTION: Demonstrates the use of the withAdmin middleware to initialize Firebase Admin SDK before executing logic in an API route. Provided both as a withPipe chain and as a standalone call in an async function. Essential when using server-side Firebase Admin features like Firestore and Auth. Requires withAdmin utility from Makerkit.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/custom_fetch_fetching_data_firestore_making_api_requests_4.md#2025-04-22_snippet_25\n\nLANGUAGE: tsx\nCODE:\n```\nimport { withAdmin } from '~/core/middleware/with-admin';\n\nexport default withPipe(\n  withAdmin,\n);\n```\n\nLANGUAGE: tsx\nCODE:\n```\nexport default async function apiHandler() {\n  await withAdmin();\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Adding CSRF Token to Fetch Request in React\nDESCRIPTION: Illustrates how to manually add a CSRF token to a fetch request when not using the `useApiRequest` utility. It uses the `useCsrfToken` hook to get the token and includes it in the 'X-CSRF-Token' header for a POST request.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/architecture_auth_overview_auth_setup_29.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n```tsx\nimport useCsrfToken from '~/core/hooks/use-csrf-token';\n\nfunction MyComponent() {\n  const { csrfToken } = useCsrfToken();\n\n  // use csrfToken in your fetch request\n\n  return (\n    <button onClick={() => {\n      fetch('/api/my-route', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'X-CSRF-Token': csrfToken,\n        },\n      });\n    }}>Click</button>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Enabling Phone Number Authentication in Next.js Supabase Project\nDESCRIPTION: This code snippet demonstrates how to enable phone number authentication by setting the 'phoneNumber' property to true in the authentication configuration object.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/adding_app_pages_guarding_pages_updating_sidebar_menu_32.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nproviders: {\n  emailPassword: false,\n  phoneNumber: true,\n  emailLink: false,\n  oAuth: ['google'] as Provider[],\n},\n```\n\n----------------------------------------\n\nTITLE: Configuring Stripe Pricing Table with Multiple Products and Plans in TSX\nDESCRIPTION: Example configuration for a pricing table with three products (Basic, Pro, Premium) and their respective plans. Each product has features, descriptions, and plans with pricing details. The Pro plan is set as recommended, and various configuration options such as badges and trial periods are demonstrated.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/adding_app_pages_guarding_pages_updating_sidebar_menu_32.md#2025-04-22_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\nstripe: {\n  products: [\n    {\n      name: 'Basic',\n      description: 'Description of your Basic plan',\n      badge: `Up to 20 users`,\n      features: [\n        'Basic Reporting',\n        'Up to 20 users',\n        '1GB for each user',\n        'Chat Support',\n      ],\n      plans: [\n        {\n          name: 'Monthly',\n          price: '$9',\n          stripePriceId: '<price_id>',\n          trialPeriodDays: 7,\n        },\n        {\n          name: 'Yearly',\n          price: '$90',\n          stripePriceId: '<price_id>',\n          trialPeriodDays: 7,\n        },\n      ],\n    },\n    {\n      name: 'Pro',\n      badge: `Most Popular`,\n      recommended: true,\n      description: 'Description of your Pro plan',\n      features: [\n        'Advanced Reporting',\n        'Up to 50 users',\n        '5GB for each user',\n        'Chat and Phone Support',\n      ],\n      plans: [\n        {\n          name: 'Monthly',\n          price: '$29',\n          stripePriceId: 'pro-plan-mth',\n          trialPeriodDays: 7,\n        },\n        {\n          name: 'Yearly',\n          price: '$200',\n          stripePriceId: 'pro-plan-yr'\n        },\n      ],\n    },\n    {\n      name: 'Premium',\n      description: 'Description of your Premium plan',\n      badge: ``,\n      features: [\n        'Advanced Reporting',\n        'Unlimited users',\n        '50GB for each user',\n        'Account Manager',\n      ],\n      plans: [\n        {\n          name: '',\n          price: 'Contact us',\n          stripePriceId: '',\n          label: `Contact us`,\n          href: `/contact`,\n        },\n      ],\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Diagramming Database Table Relationships - Plain Text\nDESCRIPTION: This snippet shows the entity-relationship diagram for a support system, depicting main tables like tickets, messages, accounts, and storage bucket relationships. It is used for planning and documentation, providing an at-a-glance view of how foreign keys connect tables. Inputs are table and field names, and outputs are only visual (no data manipulation). No technical dependencies, as it's for visual guidance, but aligning this design with later SQL implementation is crucial.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/database_4.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n+---------------+       +---------------+\\n|    tickets    |       |   messages    |\\n+---------------+       +---------------+\\n| id            |1     *| id            |\\n| account_id    |<------| ticket_id     |\\n| title         |       | author        |\\n| category      |       | author_account_id\\n| assigned_to   |       | content       |\\n| priority      |       | attachment_url|\\n| status        |       | created_at    |\\n| customer_email|       | updated_at    |\\n| resolution    |       +---------------+\\n| created_at    |\\n| updated_at    |\\n+---------------+\\n       ^\\n       |\\n       |\\n       |\\n+---------------+\\n|   accounts    |\\n+---------------+\\n| id            |\\n| name          |\\n| ...           |\\n+---------------+\\n\\n+------------------+\\n| storage.buckets  |\\n+------------------+\\n| id: 'attachments'|\\n| name:'attachments'\\n| public: false    |\\n+------------------+\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies for Tailwind v4\nDESCRIPTION: Package.json dependencies update for Tailwind CSS v4 migration.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/running_project_technical_details_update_nextjs15_50.md#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"tailwindcss\": \"4.0.0\",\n    \"@tailwindcss/postcss\": \"^4.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Pulling Updates from Upstream\nDESCRIPTION: Command to fetch updates from the main repository's upstream branch\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/uploading_data_to_storage_writing_data_to_supabase_data_fetching_77.md#2025-04-22_snippet_41\n\nLANGUAGE: bash\nCODE:\n```\ngit pull upstream main\n```\n\n----------------------------------------\n\nTITLE: Retrieving CSRF Token using Custom Hook\nDESCRIPTION: This TypeScript snippet illustrates how to get the CSRF token using the `useGetCsrfToken` custom hook. The hook returns a synchronous function (`getCsrfToken`) that, when called, returns the current page's CSRF token. This token should be sent in the 'x-csrf-token' header for state-changing requests (like POST).\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/ci_tests_running_tests_testing_limitations_12.md#2025-04-22_snippet_24\n\nLANGUAGE: tsx\nCODE:\n```\nconst getCsrfToken = useGetCsrfToken();\nconst csrfToken = getCsrfToken();\n\nconsole.log(csrfToken) // token\n```\n\n----------------------------------------\n\nTITLE: Basic Custom Plan Configuration in TSX\nDESCRIPTION: Demonstrates the minimal configuration required for a custom enterprise plan with monthly billing. Shows how to set up a plan that will be displayed in the pricing table but not available for direct purchase.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/google_analytics_provider_posthog_analytics_provider_umami_analytics_provider_88.md#2025-04-22_snippet_49\n\nLANGUAGE: tsx\nCODE:\n```\n{\n  name: 'Enterprise Monthly',\n  id: 'enterprise-monthly',\n  paymentType: 'recurring',\n  label: 'common:contactUs',\n  href: '/contact',\n  custom: true,\n  interval: 'month',\n  lineItems: [],\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Navigation Menu with React Components (TypeScript)\nDESCRIPTION: Shows how to render a set of navigation menu items in a React component using the defined links object. Each item is passed as a prop to NavigationMenuItem. Requires React with TypeScript and custom NavigationMenu components. Input: JSX in component render, Output: interactive navigation bar.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/initializing_project_introduction_marketing_site_pages_14.md#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<NavigationMenu>\n  <NavigationMenuItem link={links.Blog} />\n  <NavigationMenuItem link={links.Docs} />\n  <NavigationMenuItem link={links.Pricing} />\n  <NavigationMenuItem link={links.FAQ} />\n</NavigationMenu>\n```\n\n----------------------------------------\n\nTITLE: Docker Container Management Commands\nDESCRIPTION: Commands to check running Docker containers and manage Supabase instances, including stopping all containers or specific Supabase instances.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/branding_environment_variables_setup_project_configuration_21.md#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ndocker ps\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker kill $(docker ps -q)\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run supabase:stop\n```\n\n----------------------------------------\n\nTITLE: Super Admin Test Credentials\nDESCRIPTION: This JSON snippet provides the default test credentials for the super admin user that is seeded in the auth.users table for local development.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_one_time_payments_stripe_webhooks_payments_35.md#2025-04-22_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"email\": \"super-admin@makerkit.dev\",\n  \"password\": \"testingpassword\"\n}\n```\n\n----------------------------------------\n\nTITLE: Checking User Permissions with Team Account API (TypeScript)\nDESCRIPTION: Shows how to verify if a specific user has a certain permission (e.g., 'billing.manage') within a team account using the `hasPermission` method of the Team Account API.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/google_analytics_provider_posthog_analytics_provider_umami_analytics_provider_88.md#2025-04-22_snippet_31\n\nLANGUAGE: tsx\nCODE:\n```\nconst api = createTeamAccountsApi(client);\n\nconst hasPermission = await api.hasPermission({\n  accountId: 'account-id',\n  userId: 'user-id',\n  permission: 'billing.manage',\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Subscription-based Permissions in TypeScript\nDESCRIPTION: These functions demonstrate how to implement permission checks based on user roles and subscription status.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/technical_details_going_to_production_overview_publish_firebase_security_rules_72.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nfunction isAdmin(\n  role: MembershipRole\n) {\n  return role === MembershipRole.Admin;\n}\n\nexport function useCreateNewThing(\n  userRole: MembershipRole,\n) {\n  const isPayingUser = useIsSubscriptionActive();\n\n  return isPayingUser && isAdmin(userRole);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js i18n for Multiple Languages\nDESCRIPTION: JavaScript configuration for Next.js i18n module that sets up language support. It defines the default locale, available locales, fallback behavior, and locale path.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/initializing_project_introduction_marketing_site_pages_14.md#2025-04-22_snippet_17\n\nLANGUAGE: js\nCODE:\n```\nconst config = {\n  i18n: {\n    defaultLocale: DEFAULT_LOCALE,\n    locales: [DEFAULT_LOCALE, 'es'],\n  },\n  fallbackLng: {\n    default: [DEFAULT_LOCALE],\n  },\n  localePath: resolve('./public/locales'),\n};\n```\n\n----------------------------------------\n\nTITLE: Google Analytics Environment Variables Configuration\nDESCRIPTION: Environment variables needed for configuring Google Analytics, including measurement ID and optional tracking settings.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/custom_analytics_provider_google_analytics_provider_posthog_analytics_provider_36.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nNEXT_PUBLIC_GA_MEASUREMENT_ID=your-measurement-id\n```\n\nLANGUAGE: bash\nCODE:\n```\nNEXT_PUBLIC_GA_DISABLE_PAGE_VIEWS_TRACKING=true\nNEXT_PUBLIC_GA_DISABLE_LOCALHOST_TRACKING=true\n```\n\n----------------------------------------\n\nTITLE: Creating API Request Hooks in Next.js\nDESCRIPTION: This example shows how to create a custom hook that uses SWR to fetch data from an API endpoint. It follows the pattern of organizing hooks by feature in the lib directory.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/custom_fetch_fetching_data_firestore_making_api_requests_4.md#2025-04-22_snippet_34\n\nLANGUAGE: tsx\nCODE:\n```\nimport useQuery from 'swr';\n\nexport default function useFetchEventsFromApi() {\n  const fetcher = useApiRequest();\n\n  return useQuery([`events`], () => fetcher(`/api/events`));\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Dynamic Server Usage Error in Next.js\nDESCRIPTION: Solution for fixing the Dynamic Server Usage error in Next.js by adding force-dynamic configuration to the layout\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/updating_navigation_menu_403_error_actions_contentlayer_stuck_34.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nexport const dynamic = 'force-dynamic';\n```\n\n----------------------------------------\n\nTITLE: Implementing a Simple Firebase HTTP Function\nDESCRIPTION: This snippet illustrates creating a basic HTTP-triggered Firebase Function using TypeScript. It handles HTTP requests and sends a simple JSON response. This requires Firebase Functions module and is designed for rapid prototyping and learning.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/app_check_auth_flow_auth_hooks_69.md#2025-04-22_snippet_17\n\nLANGUAGE: ts\nCODE:\n```\nimport { https } from 'firebase-functions';\n\nexport const helloWorld = https.onRequest((req, res) => {\n  res.send({ Hello: `World` })\n});\n```\n\n----------------------------------------\n\nTITLE: Using Custom Fetch Hook in a React Component for Data Display\nDESCRIPTION: This TSX snippet demonstrates how to use the `useFetchOrganizationMembersMetadata` hook within a component (`MembersListComponent`) to fetch organization members. It accesses the `data` (members), `isLoading` (loading state), and `error` properties returned by the hook to conditionally render UI elements like a loading spinner (`LoadingMembersSpinner`), an error alert (`Alert`), or the actual member list.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/ci_tests_running_tests_testing_limitations_12.md#2025-04-22_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Trans } from \"next-i18next\";\nimport Alert from \"~/core/ui/Alert\";\nimport LoadingMembersSpinner from \"~/core/ui/LoadingMembersSpinner\";\n\nfunction MembersListComponent() {\n  const {\n    data: members,\n    isLoading: loading,\n    error,\n  } = useFetchOrganizationMembersMetadata(organizationId);\n\n  if (loading) {\n    return (\n      <LoadingMembersSpinner>\n        <Trans i18nKey={'organization:loadingMembers'} />\n      </LoadingMembersSpinner>\n    );\n  }\n\n  if (error) {\n    return (\n      <Alert type={'error'}>\n        <Trans i18nKey={'organization:loadMembersError'} />\n      </Alert>\n    );\n  }\n\n  // display members using \"members\"\n  return <>...</>;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies Post-Update (Bash)\nDESCRIPTION: Installs or updates project dependencies using pnpm. It's recommended to run this command after pulling updates from the upstream repository to ensure all dependencies are correctly installed and up-to-date, potentially resolving issues caused by new or changed dependencies.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/configuring_supabase_database_webhooks_fly_production_environment_variables_95.md#2025-04-22_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\npnpm i\n```\n\n----------------------------------------\n\nTITLE: Email Configuration Environment Variables\nDESCRIPTION: Environment variables for setting up email functionality using SMTP, including host, port, authentication and sender details.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/branding_environment_variables_setup_project_configuration_21.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nEMAIL_HOST=\nEMAIL_PORT=587\nEMAIL_USER=\nEMAIL_PASSWORD=\nEMAIL_SENDER='MakerKit Team <info@makerkit.dev>'\n```\n\n----------------------------------------\n\nTITLE: Configuring Workspace in package.json for AI Text Editor Plugin\nDESCRIPTION: JSON configuration to add the AI Text Editor plugin as a workspace in your package.json file, allowing NPM to manage the plugin's dependencies.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_configuration_stripe_one_time_payments_stripe_webhooks_82.md#2025-04-22_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"workspaces\": [\n    \"plugins/text-editor\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Billing Schema with Custom Plan\nDESCRIPTION: Full example of creating a billing schema with a custom enterprise plan, including product configuration and plan details. Shows integration within the broader billing structure.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/google_analytics_provider_posthog_analytics_provider_umami_analytics_provider_88.md#2025-04-22_snippet_50\n\nLANGUAGE: tsx\nCODE:\n```\nexport default createBillingSchema({\n  provider,\n  products: [\n    {\n      id: 'starter',\n      name: 'Starter',\n      description: 'The perfect plan to get started',\n      currency: 'USD',\n      badge: `Value`,\n      plans: [\n        {\n          name: 'Enterprise',\n          id: 'enterprise',\n          paymentType: 'recurring',\n          label: 'common:contactUs',\n          href: '/contact',\n          custom: true,\n          interval: 'month',\n          lineItems: [],\n        }\n      ],\n    }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: UI/UX Theme Configuration\nDESCRIPTION: Settings for controlling theme mode and UI feature toggles.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stepper_components_application_configuration_41.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nNEXT_PUBLIC_DEFAULT_THEME_MODE=light\nNEXT_PUBLIC_ENABLE_THEME_TOGGLE=true\nNEXT_PUBLIC_ENABLE_SIDEBAR_TRIGGER=true\n```\n\n----------------------------------------\n\nTITLE: Installing Node Dependencies\nDESCRIPTION: Command for installing all the required Node.js dependencies for the project.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/user_roles_validating_api_input_zod_development_18.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Run and Reset Supabase Database Tests Command\nDESCRIPTION: Command to reset the database and run tests for the Supabase database in one operation.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/uploading_data_to_storage_writing_data_to_supabase_data_fetching_77.md#2025-04-22_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test:reset:db\n```\n\n----------------------------------------\n\nTITLE: SQL Schema for Organizations Table in Supabase\nDESCRIPTION: SQL definition for the organizations table in Supabase, showing the basic structure with id, name, logo_url, and created_at fields.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/supabase_not_stopping_tables_not_found_dark_theme_22.md#2025-04-22_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\ncreate table organizations (\n  id bigint generated always as identity primary key,\n  name text not null,\n  logo_url text,\n  created_at timestamptz not null default now()\n);\n```\n\n----------------------------------------\n\nTITLE: Setting RLS Policy for Plans Table\nDESCRIPTION: Implements a policy allowing all authenticated users to read from the plans table.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/supabase_not_stopping_tables_not_found_dark_theme_22.md#2025-04-22_snippet_23\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy \"Allow all authenticated users to read plans\"\n    on plans\n    as restrictive\n    for select\n    to authenticated\n    using (true);\n```\n\n----------------------------------------\n\nTITLE: Removing subscription_data Parameter for One-Time Payments\nDESCRIPTION: Code showing how to remove the subscription_data parameter from the stripe.checkout.sessions.create function call when switching to one-time payments to prevent errors.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_one_time_payments_stripe_webhooks_ci_tests_73.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nreturn stripe.checkout.sessions.create({\n  mode,\n  ui_mode: uiMode,\n  customer,\n  line_items: [lineItem],\n  client_reference_id: clientReferenceId.toString(),\n  subscription_data: subscriptionData,\n  customer_email: params.customerEmail,\n  ...urls,\n});\n```\n\n----------------------------------------\n\nTITLE: Plan Details Component Implementation\nDESCRIPTION: React component that displays detailed information about the selected plan including features, pricing, and addons. Takes product details, interval, and addon information as props.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_billing_checkout_addons_subscription_entitlements_54.md#2025-04-22_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction PlanDetails({\n  selectedProduct,\n  selectedInterval,\n  selectedPlan,\n  addons = [],\n}: {\n  selectedProduct: {\n    id: string;\n    name: string;\n    description: string;\n    currency: string;\n    features: string[];\n  };\n\n  selectedInterval: string;\n\n  selectedPlan: {\n    lineItems: z.infer<typeof LineItemSchema>[];\n    paymentType: string;\n  };\n\n  addons: z.infer<typeof AddonSchema>[];\n}) {\n  const isRecurring = selectedPlan.paymentType === 'recurring';\n  const { i18n } = useTranslation(`billing`);\n\n  // trick to force animation on re-render\n  const key = Math.random();\n\n  return (\n    <div\n      key={key}\n      className={\n        'fade-in animate-in zoom-in-95 flex w-full flex-col space-y-4 py-2 lg:px-8'\n      }\n    >\n      {/* Component JSX */}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Ticket Messages with Supabase Client\nDESCRIPTION: This snippet shows how to use the Supabase client library to fetch messages from the 'messages' table. It selects all message fields and joins the related 'account' table (aliased from `author_account_id`) to retrieve author details (`email`, `name`, `picture_url`). The query filters by `ticket_id`, orders by creation date descending, and uses `range` for pagination.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/data_fetching_3.md#2025-04-22_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nconst { data: messages, error } = await client\n  .from('messages')\n  .select<\n    string,\n    Message\n  >('*, account: author_account_id (email, name, picture_url)')\n  .eq('ticket_id', ticketId)\n  .order('created_at', { ascending: false })\n  .range(startOffset, endOffset);\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Settings in Next.js Supabase Lite\nDESCRIPTION: Environment variables for configuring email settings in a Next.js Supabase Lite project. These variables are used to set up the SMTP connection for sending emails.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/server_actions_uploading_data_to_storage_writing_data_to_supabase_30.md#2025-04-22_snippet_14\n\nLANGUAGE: plaintext\nCODE:\n```\nEMAIL_HOST=\nEMAIL_PORT=587\nEMAIL_USER=\nEMAIL_PASSWORD=\nEMAIL_SENDER='MakerKit Team <info@makerkit.dev>'\n```\n\n----------------------------------------\n\nTITLE: Service Account Private Key Configuration\nDESCRIPTION: Environment variable for Firebase service account private key configuration.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/third_party_auth_providers_authentication_blog_3.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nSERVICE_ACCOUNT_PRIVATE_KEY=\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js Page Component for Routes\nDESCRIPTION: Next.js page component that imports and renders the EventsListContainer for the events page route.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/translations_updating_latest_version_tutorials_28.md#2025-04-22_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport EventsListContainer from '~/app/dashboard/[organization]/events/components/EventsListContainer';\n\nconst EventsPage: React.FC = () => {\n  return (\n     <EventsListContainer />\n  );\n};\n\nexport default EventsPage;\n```\n\n----------------------------------------\n\nTITLE: Displaying App Directory Structure for Next.js Routing\nDESCRIPTION: This code snippet illustrates the structure of the app directory, which defines the routing of the Next.js application, including key subdirectories for different sections of the app.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/llms_migration_from_makerkit_v1_navigating_codebase_49.md#2025-04-22_snippet_20\n\nLANGUAGE: markdown\nCODE:\n```\n```\n- app\n---\n home\n---\n (marketing)\n---\n auth\n---\n join\n---\n admin\n---\n update-password\n---\n server-sitemap.xml\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Hook for API POST Requests using SWR Mutation\nDESCRIPTION: This TypeScript snippet defines the `useCreateSession` custom React hook. It utilizes `useSWRMutation` for managing the state of POST requests and the custom `useApiRequest` hook (configured for the endpoint '/api/session/sign-in') to perform the actual fetch operation, sending an `idToken` in the request body.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/ci_tests_running_tests_testing_limitations_12.md#2025-04-22_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nimport useSWRMutation from \"swr/mutation\";\nimport { useApiRequest } from '~/core/hooks/use-api';\n\ninterface Body {\n  idToken: string;\n}\n\nexport function useCreateSession() {\n  const endpoint = '/api/session/sign-in';\n  const fetcher = useApiRequest<void, Body>();\n\n  return useSWRMutation(endpoint, (path, { arg }: { arg: Body }) => {\n    return fetcher({\n      path,\n      body: arg,\n    });\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth Scopes in Next.js\nDESCRIPTION: This code snippet demonstrates how to specify OAuth scopes for different providers in a Next.js application using TypeScript.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stepper_components_application_configuration_41.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst OAUTH_SCOPES: Partial<Record<Provider, string>> = {\n  azure: 'email',\n  google: 'email',\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Dark Mode Colors with Zinc in Tailwind CSS\nDESCRIPTION: Alternative configuration for dark mode colors using the zinc color palette instead of slate. This shows how to customize the dark theme with different color options.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/updating_navigation_menu_403_error_actions_contentlayer_stuck_34.md#2025-04-22_snippet_9\n\nLANGUAGE: js\nCODE:\n```\ndark: {\n  ...colors.zinc,\n  DEFAULT: colors.zinc[950],\n  foreground: colors.zinc[100],\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Feature Flags in TypeScript\nDESCRIPTION: TypeScript code defining feature flags for the application. This configuration controls various features like theme toggle, account deletion, team accounts, and billing options.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/multi_step_forms_page_stepper_91.md#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nconst featuresFlagConfig = FeatureFlagsSchema.parse({\n  enableThemeToggle: getBoolean(\n    import.meta.env.VITE_ENABLE_THEME_TOGGLE,\n    true,\n  ),\n  enableAccountDeletion: getBoolean(\n    import.meta.env.VITE_ENABLE_PERSONAL_ACCOUNT_DELETION,\n    false,\n  ),\n  enableTeamDeletion: getBoolean(\n    import.meta.env.VITE_ENABLE_TEAM_ACCOUNTS_DELETION,\n    false,\n  ),\n  enableTeamAccounts: getBoolean(\n    import.meta.env.VITE_ENABLE_TEAM_ACCOUNTS,\n    true,\n  ),\n  enableTeamCreation: getBoolean(\n    import.meta.env.VITE_ENABLE_TEAM_ACCOUNTS_CREATION,\n    true,\n  ),\n  enablePersonalAccountBilling: getBoolean(\n    import.meta.env.VITE_ENABLE_PERSONAL_ACCOUNT_BILLING,\n    false,\n  ),\n  enableTeamAccountBilling: getBoolean(\n    import.meta.env.VITE_ENABLE_TEAM_ACCOUNTS_BILLING,\n    false,\n  ),\n  languagePriority: import.meta.env.VITE_LANGUAGE_PRIORITY as\n    | 'user'\n    | 'application',\n} satisfies z.infer<typeof FeatureFlagsSchema>);\n\nexport default featuresFlagConfig;\n```\n\n----------------------------------------\n\nTITLE: Implementing a Task Form with SWR Mutation\nDESCRIPTION: Creates a React component with a form that triggers the task insertion mutation when submitted. Shows how to extract form data and handle the loading state of the mutation.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/call_api_routes_from_client_csrf_token_guarding_api_routes_7.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nfunction TaskForm() {\n  const insertTaskMutation = useInsertTask();\n\n  const onSubmit: React.FormEventHandler<HTMLFormElement> = (event) => {\n    const name = new FormData(event.currentTarget).get('name') ?? 'No Name';\n    const task = { name };\n\n    return insertTaskMutation.trigger(task);\n  };\n\n  return (\n    <form onSubmit={onSubmit}>\n      <input type={'name'} required />\n\n      <button disabled={insertTaskMutation.isLoading}>\n        Submit\n      </button>\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling CORS in Next.js API Handler\nDESCRIPTION: Code snippet demonstrating how to enable CORS in a Next.js API handler using the with-cors middleware.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/commands_cors_develop_firebase_security_rules_5.md#2025-04-22_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nimport withCors from '~/core/middleware/with-cors';\n\nfunction apiHandler(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n    withCors(res);\n\n    // your logic\n}\n\nexport default apiHandler;\n```\n\n----------------------------------------\n\nTITLE: Dynamic Payment Mode Selection Based on Plan\nDESCRIPTION: Code to dynamically select the payment mode based on the plan configuration when creating a checkout session.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_one_time_payments_stripe_webhooks_payments_11.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nconst price = configuration.plans.find(item => {\n  return item.stripePriceId === params.priceId;\n});\n\nif (!price) {\n  throw new Error(`Price with ID ${params.priceId} not found in config`);\n}\n\nconst mode: Stripe.Checkout.SessionCreateParams.Mode = price.mode;\n\n// some code here...\n\nreturn stripe.checkout.sessions.create({\n  mode,\n  // more code here...\n});\n```\n\n----------------------------------------\n\nTITLE: SQL Function for Checking Active Subscriptions\nDESCRIPTION: SQL function to check if an account has an active subscription (status is either active or trialing).\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/supabase_clients_data_fetching_adding_pages_63.md#2025-04-22_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\npublic.has_active_subscription(\n  account_id uuid\n)\n```\n\n----------------------------------------\n\nTITLE: Using GradientText Component with Custom Colors in React/TSX\nDESCRIPTION: This snippet demonstrates how to use the GradientText component with custom gradient colors using Tailwind CSS utility classes.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/app_breadcrumbs_bordered_navigation_menu_card_button_39.md#2025-04-22_snippet_35\n\nLANGUAGE: tsx\nCODE:\n```\n<GradientText className={'from-violet-500 to-purple-700'}>\n  Unleash your creativity and build your SaaS faster than ever with Makerkit.\n</GradientText>\n```\n\n----------------------------------------\n\nTITLE: Protected POST API Route with Supabase Authentication\nDESCRIPTION: Implementation of a protected POST API route that requires user authentication using Supabase session validation\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/validating_api_input_zod_development_clone_repository_31.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextRequest } from \"next/server\";\n\nimport getSupabaseRouteHandlerClient from '~/core/supabase/route-handler-client';\nimport requireSession from '~/lib/user/require-session';\n\nexport async function POST(req: NextRequest) {\n  const client = getSupabaseRouteHandlerClient();\n  const session = await requireSession(client);\n\n  // user is authenticated, do something here\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Row-Level Security on Tickets Table - SQL\nDESCRIPTION: Enables PostgreSQL's row-level security (RLS) on the `public.tickets` table. With RLS enabled, subsequent access to the table will be restricted based on defined RLS policies. Requires the table to exist and the user to have sufficient privileges to alter it. The command takes the table name as input and applies the security feature as output. A limitation is that, by default, all access is denied until policies are explicitly added.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/database_4.md#2025-04-22_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nalter table public.tickets enable row level security;\n```\n\n----------------------------------------\n\nTITLE: Using Server Actions with Form in Next.js Component\nDESCRIPTION: Example of how to connect a server action to a form element in Next.js using the action attribute. This approach leverages Next.js built-in support for server actions.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/server_actions_uploading_data_to_storage_writing_data_to_supabase_17.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nfunction TaskForm() {\n  return (\n    <form action={insertNewTask}>\n    ...\n    </form>\n  );\n}\n\nexport default TaskForm;\n```\n\n----------------------------------------\n\nTITLE: Styling the LoadingOverlay with Tailwind CSS\nDESCRIPTION: CSS classes for styling a full-page overlay in a LoadingOverlay component using Tailwind CSS.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/app_breadcrumbs_bordered_navigation_menu_card_button_39.md#2025-04-22_snippet_23\n\nLANGUAGE: css\nCODE:\n```\nfixed left-0 top-0 z-[100] h-screen w-screen bg-background\n```\n\n----------------------------------------\n\nTITLE: Customizing Fonts for Makerkit SaaS Application in Next.js\nDESCRIPTION: This code snippet shows how to customize fonts in a Makerkit SaaS application using Next.js. It demonstrates importing and configuring the Inter font from Google Fonts, and setting up CSS variables for sans-serif and heading font families.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_webhooks_locally_using_lemon_squeezy_server_actions_csrf_33.md#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\nimport { Inter as SansFont } from 'next/font/google';\nimport { useServerInsertedHTML } from 'next/navigation';\n\nconst sans = SansFont({\n  subsets: ['latin'],\n  variable: '--font-family-sans',\n  fallback: ['system-ui', 'Helvetica Neue', 'Helvetica', 'Arial'],\n  preload: true,\n  weight: ['300', '400', '500', '600', '700', '800'],\n});\n\n// replace with your heading font\n// by default, it will use the sans font\nconst heading = sans;\n\nfunction Fonts() {\n  useServerInsertedHTML(() => {\n    return (\n      <style\n        key={'fonts'}\n        dangerouslySetInnerHTML={{\n          __html: `\n          :root {\n            --font-family-sans: ${sans.style.fontFamily}, 'Segoe UI', 'Roboto', 'Ubuntu', 'sans-serif';\n            --font-family-heading: ${heading.style.fontFamily};\n          }\n        `,\n        }}\n      />\n    );\n  });\n\n  return null;\n}\n\nexport default Fonts;\n```\n\n----------------------------------------\n\nTITLE: Firestore Security Rules for Tasks Collection\nDESCRIPTION: Example of Firestore security rules for a tasks collection, allowing create for signed-in users and read/update/delete for organization members.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/setting_up_firebase_custom_fetch_fetching_data_firestore_70.md#2025-04-22_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nmatch /tasks/{taskId} {\n  allow create: if isSignedIn();\n  allow read, update, delete: if userIsMemberByOrganizationId(existingData().organizationId);\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Loading Overlay with Spinner - React - JavaScript\nDESCRIPTION: Provides a usage example for the LoadingOverlay component, which displays a spinner and optional custom content. Requires @kit/ui/loading-overlay and Tailwind CSS for styling. Inputs: children (message), outputs: overlay UI with spinner and message during load states. Can be configured for full-page or inline use. Ensure accessibility attributes when used as a loading indicator.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/bordered_navigation_menu_card_button_cookie_banner_60.md#2025-04-22_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport { LoadingOverlay } from '@kit/ui/loading-overlay';\n\nfunction MyComponent() {\n  return (\n    <LoadingOverlay>\n      Loading your content...\n    </LoadingOverlay>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Umami Environment Variables in Bash\nDESCRIPTION: Sets required Umami environment variables in a .env file: `VITE_UMAMI_HOST` (the URL of the Umami instance, which can be self-hosted or cloud) and `VITE_UMAMI_WEBSITE_ID` (the specific website ID from the Umami instance). Both are needed for tracking.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/analytics_api_custom_analytics_provider_google_analytics_provider_57.md#2025-04-22_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nVITE_UMAMI_HOST=your-umami-host\nVITE_UMAMI_WEBSITE_ID=your-umami-website-id\n```\n\n----------------------------------------\n\nTITLE: User Permissions Implementation - TypeScript\nDESCRIPTION: Implementation of user permission system based on roles. Includes function to check if a user can update another user's permissions.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/migrations_extending_organizations_organization_hooks_10.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n *\n * @param currentUserRole The current logged-in user\n * @param targetUser The role of the target of the action\n * @description Checks if a user can perform actions (such as update a role) of another user\n * @name canUpdateUser\n */\nexport function canUpdateUser(\n  currentUserRole: MembershipRole,\n  targetUser: MembershipRole\n) {\n  return currentUserRole > targetUser;\n}\n```\n\n----------------------------------------\n\nTITLE: Extending OrganizationSubscription Interface in TypeScript\nDESCRIPTION: Adds a quantity property to the subscription interface to extend the subscription object functionality.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_configuration_stripe_one_time_payments_stripe_webhooks_82.md#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nexport interface OrganizationSubscription {\n  // ...\n  quantity: number | null;\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Environment Variables with Turbo\nDESCRIPTION: Command to generate environment variables using Turbo generator\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/deploy_production_introduction_5.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nturbo gen env\n```\n\n----------------------------------------\n\nTITLE: Disabling Email Verification Requirement in Supabase Auth\nDESCRIPTION: Sets an environment variable to disable email verification requirement in a Supabase authentication setup, though this should be configured in the Supabase console as well.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/organization_sdk_organization_subscription_sdk_sdk_25.md#2025-04-22_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nREQUIRE_EMAIL_VERIFICATION=false\n```\n\n----------------------------------------\n\nTITLE: Handling OPTIONS Request for CORS\nDESCRIPTION: Code snippet demonstrating how to handle OPTIONS requests for CORS in a Next.js API handler.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/commands_cors_develop_firebase_security_rules_5.md#2025-04-22_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\nexport function handler(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n  withCors(res);\n\n  if (req.method === `OPTIONS`) {\n     // add the method you want to allow\n     res.setHeader('Access-Control-Allow-Methods', 'GET');\n\n     return res.end();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Events List Container Component in React TSX\nDESCRIPTION: This React component uses the useFetchEvents hook to retrieve and display a list of events. It handles loading and error states, and renders individual event details.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/project_structure_running_project_tailwind_css_75.md#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useFetchEvents } from '~/lib/events/hooks/use-fetch-events';\nimport Alert from '~/core/ui/Alert';\n\nconst EventsListContainer: React.FC<{\n  organizationId: number\n}> = ({ organizationId }) => {\n  const { data: events, isLoading, error } = useFetchEvents(organizationId);\n\n  if (isLoading) {\n    return <p>Loading Events...</p>\n  }\n\n  if (error) {\n    return (\n      <Alert type='error'>\n        Ops, we encountered an error!\n      </Alert>\n    );\n  }\n\n  return (\n    <div>\n      {events.map(event => {\n        return (\n          <div key={event.name}>\n            <p>{event.name}</p>\n            <p>{event.description}</p>;\n          </div>\n        );\n      })}\n    </div>\n  )\n};\n\nexport default EventsListContainer;\n```\n\n----------------------------------------\n\nTITLE: Customizing Primary and Dark Colors in Tailwind Config\nDESCRIPTION: This snippet shows how to customize the primary and dark colors in your Tailwind configuration by changing the primary color to indigo and the dark mode background color to zinc.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_one_time_payments_stripe_webhooks_payments_35.md#2025-04-22_snippet_12\n\nLANGUAGE: js\nCODE:\n```\nconst colors = require('tailwindcss/colors');\n\nextend: {\n  colors: {\n    dark: {\n      ...colors.zinc,\n      DEFAULT: colors.zinc[950],\n      foreground: colors.zinc[100],\n    },\n    primary: {\n      DEFAULT: 'hsl(var(--primary))',\n      foreground: 'hsl(var(--primary-foreground))',\n      ...colors.indigo,\n    }\n  },\n},\n```\n\n----------------------------------------\n\nTITLE: Authenticating Users in Remix Loader with Supabase (TypeScript)\nDESCRIPTION: Provides an example of using Makerkit's `requireUser` helper function within a Remix loader to ensure a user is authenticated. It fetches the Supabase client, calls `requireUser`, and handles potential redirects (e.g., for MFA) or accesses the authenticated user data.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/google_analytics_provider_posthog_analytics_provider_umami_analytics_provider_88.md#2025-04-22_snippet_24\n\nLANGUAGE: tsx\nCODE:\n```\nimport { redirect } from '@remix-run/react';\nimport { LoaderFunctionArgs } from '@remix-run/node';\nimport { requireUser } from '@kit/supabase/require-user';\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\n\nexport async function loader(args: LoaderFunctionArgs) {\n  const client = getSupabaseServerClient(args.request);\n  const auth = await requireUser(client);\n\n  // check if the user needs redirect\n  if (auth.error) {\n    return redirect(auth.redirectTo);\n  }\n\n  // user is authed!\n  const user = auth.data;\n\n  // return your data\n  return {\n    data: {} // your data here,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sidebar Navigation in React/TypeScript\nDESCRIPTION: Example configuration for setting up the sidebar navigation menu with custom icons and routes. Shows the base structure and how to add new menu items.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/updating_sidebar_menu_change_auth_strategy_setup_oauth_79.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport configuration from '~/configuration';\n\nimport {\n  Cog8ToothIcon,\n  Square3Stack3DIcon,\n  Squares2X2Icon,\n} from '@heroicons/react/24/outline';\n\nconst NAVIGATION_CONFIG = {\n  items: [\n    {\n      label: 'common:dashboardTabLabel',\n      path: configuration.paths.appHome,\n      Icon: ({ className }: { className: string }) => {\n        return <Squares2X2Icon className={className} />;\n      },\n    },\n    {\n      label: 'common:tasksTabLabel',\n      path: '/tasks',\n      Icon: ({ className }: { className: string }) => {\n        return <Square3Stack3DIcon className={className} />;\n      },\n    },\n    {\n      label: 'common:settingsTabLabel', \n      path: '/settings',\n      Icon: ({ className }: { className: string }) => {\n        return <Cog8ToothIcon className={className} />;\n      },\n    },\n  ],\n};\n\nexport default NAVIGATION_CONFIG;\n```\n\n----------------------------------------\n\nTITLE: Building Organization Subscription Object from Stripe Data\nDESCRIPTION: Function that builds an OrganizationSubscription object from Stripe's subscription data, mapping Stripe's response fields to the application's data structure.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_one_time_payments_stripe_webhooks_ci_tests_73.md#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { Stripe } from 'stripe';\nimport type { OrganizationSubscription } from '~/lib/organizations/types/organization-subscription';\n\nexport function buildOrganizationSubscription(\n  subscription: Stripe.Subscription,\n): OrganizationSubscription {\n  const lineItem = subscription.items.data[0];\n  const price = lineItem.price;\n\n  return {\n    // your props\n    quantity: lineItem.quantity,\n\n    // default props\n    id: subscription.id,\n    priceId: price?.id,\n    status: subscription.status,\n    cancelAtPeriodEnd: subscription.cancel_at_period_end,\n    currency: lineItem.price.currency ?? null,\n    interval: price?.recurring?.interval ?? null,\n    intervalCount: price?.recurring?.interval_count ?? null,\n    createdAt: subscription.created,\n    periodStartsAt: subscription.current_period_start,\n    periodEndsAt: subscription.current_period_end,\n    trialStartsAt: subscription.trial_start ?? null,\n    trialEndsAt: subscription.trial_end ?? null,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Creating API Handlers in Next.js\nDESCRIPTION: This example demonstrates how to create an API handler that uses server-side functions to fetch data. The handler is part of a feature-based organization pattern where API routes are organized by domain in the pages/api directory.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/custom_fetch_fetching_data_firestore_making_api_requests_4.md#2025-04-22_snippet_33\n\nLANGUAGE: tsx\nCODE:\n```\nexport default async function eventsHandler(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n  const events = await fetchEvents();\n\n  res.status(200).json(events);\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Invite Email with react-email in Next.js\nDESCRIPTION: Example of rendering an invite email using react-email components in a Next.js Supabase Lite project. This demonstrates how to create a structured email template using React.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/server_actions_uploading_data_to_storage_writing_data_to_supabase_30.md#2025-04-22_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\ninterface Props {\n  organizationName: string;\n  organizationLogo?: string;\n  inviter: Maybe<string>;\n  invitedUserEmail: string;\n  link: string;\n  productName: string;\n}\n\nexport default function renderInviteEmail(props: Props) {\n  const title = `You have been invited to join ${props.organizationName}`;\n\n  return render(\n    <Html>\n      <Head>\n        <title>{title}</title>\n      </Head>\n      <Preview>{title}</Preview>\n      <Body style={{ width: '500px', margin: '0 auto', font: 'helvetica' }}>\n        <EmailNavbar />\n        <Section style={{ width: '100%' }}>\n          <Column>\n            <Text>Hi,</Text>\n\n            <Text>\n              {props.inviter} with {props.organizationName} has invited you to\n              use {props.productName} to collaborate with them.\n            </Text>\n\n            <Text>\n              Use the button below to set up your account and get started:\n            </Text>\n          </Column>\n        </Section>\n\n        <Section>\n          <Column align=\"center\">\n            <CallToActionButton href={props.link}>\n              Join {props.organizationName}\n            </CallToActionButton>\n          </Column>\n        </Section>\n\n        <Section>\n          <Column>\n            <Text>Welcome aboard,</Text>\n            <Text>The {props.productName} Team</Text>\n          </Column>\n        </Section>\n      </Body>\n    </Html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Minisearch Indexer in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create a search indexer using Minisearch. It indexes content from '_posts' and '_docs' directories, assigning tags to each document type. The indexer is designed to work with MDX files and can be extended to include additional content folders.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/third_party_auth_providers_authentication_blog_3.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst FIELDS = ['content', 'path', 'tag', 'title', 'collection', 'slug'];\n\nexport async function searchIndexer() {\n  const miniSearch = new MiniSearch({\n    fields: FIELDS,\n    storeFields: FIELDS,\n  });\n\n  const engine = new SearchEngine(miniSearch);\n\n  await engine.indexDirectory(`_posts`, (doc) => {\n    return { ...doc, tag: `blog` };\n  });\n\n  await engine.indexDirectory(`_docs`, (doc) => {\n    return { ...doc, tag: `docs` };\n  });\n\n  await engine.export();\n\n  process.exit();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Organizations Table in Supabase\nDESCRIPTION: SQL schema for organizations table that defines groups of users with properties for organization name and logo.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/ui_hooks_mdx_15.md#2025-04-22_snippet_16\n\nLANGUAGE: sql\nCODE:\n```\ncreate table organizations (\n  id bigint generated always as identity primary key,\n  uuid uuid not null default uuid_generate_v4(),\n  name text not null,\n  logo_url text\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing CORS in Remix Action Functions\nDESCRIPTION: Example of how to use the withCors middleware in a Remix action function to enable cross-origin requests.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/setting_up_firebase_custom_fetch_fetching_data_firestore_70.md#2025-04-22_snippet_31\n\nLANGUAGE: tsx\nCODE:\n```\nimport withCors from '~/core/middleware/with-cors';\n\nexport const action: ActionFunction = async ({request}) => {\n  withCors(res);\n  // your logic\n}\n\nexport default apiHandler;\n```\n\n----------------------------------------\n\nTITLE: Defining User Roles with TypeScript Enums\nDESCRIPTION: Implementation of user roles using TypeScript enums in a Makerkit application. This shows the default hierarchical role structure that can be extended with custom roles.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/uploading_data_to_storage_writing_data_to_supabase_data_fetching_77.md#2025-04-22_snippet_33\n\nLANGUAGE: tsx\nCODE:\n```\nenum MembershipRole {\n  Member = 0,\n  Admin = 1,\n  Owner = 2,\n}\n\nexport default MembershipRole;\n```\n\n----------------------------------------\n\nTITLE: Declaring SaaS Billing Schema with Makerkit in TypeScript\nDESCRIPTION: This snippet showcases construction of a detailed billing schema using Makerkit's billing utilities in TypeScript. It defines providers, several pricing plans (monthly/yearly, free/starter/pro), product features, and configures each plan's line items. Dependencies include '@kit/billing', and the provider must match in the environment and database for validation to succeed. Schema inputs include currency, product, plan, and line item details; outputs are configuration objects for the Makerkit billing engine. Ensure environment variables are correctly set and that plan and line item IDs correspond to your payment provider's dashboard.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/payments_billing_6.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BillingProviderSchema, createBillingSchema } from '@kit/billing';\n\n// The billing provider to use. This should be set in the environment variables\n// and should match the provider in the database. We also add it here so we can validate\n// your configuration against the selected provider at build time.\nconst provider = BillingProviderSchema.parse(\n  process.env.NEXT_PUBLIC_BILLING_PROVIDER,\n);\n\nexport default createBillingSchema({\n  // also update config.billing_provider in the DB to match the selected\n  provider,\n  // products configuration\n  products: [\n    {\n      id: 'support-tickets',\n      name: 'Support Tickets',\n      badge: 'Free',\n      description: 'Manage your customer support tickets efficiently',\n      currency: 'USD',\n      features: ['Up to 50 tickets per month', '$0 per agent', 'Email support'],\n      plans: [\n        {\n          id: 'free-plan',\n          name: 'Free Plan',\n          lineItems: [],\n          custom: true,\n          label: 'Free',\n          buttonLabel: 'Get started with the free plan',\n          paymentType: 'recurring',\n          interval: 'month',\n        },\n        {\n          id: 'free-plan-yearly',\n          name: 'Free Plan',\n          lineItems: [],\n          custom: true,\n          label: 'Free',\n          buttonLabel: 'Get started with the free plan',\n          paymentType: 'recurring',\n          interval: 'year',\n        },\n      ],\n    },\n    {\n      id: 'starter-plan',\n      name: 'Starter Plan',\n      badge: 'Popular',\n      highlighted: true,\n      description: 'The best plan for small teams',\n      currency: 'USD',\n      features: [\n        'Up to 1000 tickets per month',\n        'Email support',\n        'Up to 5 agents',\n      ],\n      plans: [\n        {\n          id: 'starter-plan-monthly',\n          name: 'Starter Plan Monthly',\n          paymentType: 'recurring',\n          interval: 'month',\n          lineItems: [\n            {\n              id: 'starter-base-price',\n              name: 'Base Price',\n              type: 'flat',\n              cost: 49,\n            },\n            {\n              id: 'starter-per-seat',\n              name: 'Per Seat',\n              type: 'per_seat',\n              cost: 10,\n            },\n          ],\n        },\n        {\n          id: 'starter-plan-yearly',\n          name: 'Starter Plan Yearly',\n          paymentType: 'recurring',\n          interval: 'year',\n          lineItems: [\n            {\n              id: 'starter-base-yearly',\n              name: 'Base Price',\n              type: 'flat',\n              cost: 490,\n            },\n            {\n              id: 'starter-per-seat-yearly',\n              name: 'Per Seat',\n              type: 'per_seat',\n              cost: 100,\n            },\n          ],\n        },\n      ],\n    },\n    {\n      id: 'pro-plan',\n      name: 'Pro Plan',\n      description: 'The best plan for growing teams',\n      currency: 'USD',\n      features: [\n        'Unlimited tickets per month',\n        'Priority support',\n        'Email and phone support',\n      ],\n      plans: [\n        {\n          id: 'pro-plan-monthly',\n          name: 'Pro Plan Monthly',\n          paymentType: 'recurring',\n          interval: 'month',\n          lineItems: [\n            {\n              id: 'pro-base-price-monthly',\n              name: 'Base Price',\n              type: 'flat',\n              cost: 199,\n            },\n            {\n              id: 'pro-per-seat-monthly',\n              name: 'Per Seat',\n              type: 'per_seat',\n              cost: 10,\n            },\n          ],\n        },\n        {\n          id: 'pro-plan-yearly',\n          name: 'Pro Plan Yearly',\n          paymentType: 'recurring',\n          interval: 'year',\n          lineItems: [\n            {\n              id: 'pro-base-price-yearly',\n              name: 'Base Price',\n              type: 'flat',\n              cost: 1990,\n            },\n            {\n              id: 'pro-per-seat-yearly',\n              name: 'Per Seat',\n              type: 'per_seat',\n              cost: 100,\n            },\n          ],\n        },\n      ],\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Claims for Super Admin in Supabase\nDESCRIPTION: SQL query to update a user's custom claims in Supabase, granting super admin privileges by setting the 'role' property to 'super-admin'.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/translations_updating_latest_version_tutorials_28.md#2025-04-22_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE auth.users SET raw_app_meta_data = raw_app_meta_data || '{\"role\": \"super-admin\"}' WHERE id='<user_id>';\n```\n\n----------------------------------------\n\nTITLE: Enforcing Authentication within a React Router Loader (TypeScript)\nDESCRIPTION: Demonstrates how to enforce user authentication within a React Router loader using a helper function (`requireUserLoader`). This ensures that the loader only proceeds if the user is authenticated, typically redirecting unauthenticated users.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/creating_your_own_cms_client_keystatic_wordpress_62.md#2025-04-22_snippet_29\n\nLANGUAGE: tsx\nCODE:\n```\nexport const loader = async (args: Route.LoaderArgs) => {\n  // Require authenticated user\n  await requireUserLoader(args.request);\n\n  // Continue with loader logic\n  return {\n    title: \"Protected Page\"\n  };\n};\n\n```\n\n----------------------------------------\n\nTITLE: Creating current_user_has_project_permission Function in Supabase\nDESCRIPTION: Creates a wrapper function around user_has_project_permission that automatically applies the current user's ID, simplifying permission checks for the authenticated user in application code.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/projects_data_model_53.md#2025-04-22_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nCREATE OR REPLACE FUNCTION public.current_user_has_project_permission(\n  p_project_id UUID,\n  p_action public.project_action\n)\nRETURNS BOOLEAN\nSET search_path = ''\nAS $$\nDECLARE\n  v_role public.project_role;\nBEGIN\n  SELECT public.user_has_project_permission((SELECT auth.uid()), p_project_id, p_action);\nEND;\n$$ LANGUAGE plpgsql;\n\nGRANT EXECUTE ON FUNCTION public.current_user_has_project_permission TO authenticated;\n```\n\n----------------------------------------\n\nTITLE: Fetching Organization Data Using Supabase in a Server Component - TypeScript\nDESCRIPTION: Shows how to fetch organization data server-side in a Next.js Server Component using a custom Supabase client instantiation. Relies on the '~/core/supabase/server-component-client' function and an organization query method. Expects an 'id' parameter in props, and synchronously returns a div with the organization name. Key dependencies: getSupabaseServerComponentClient and getOrganizationById.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/auth_setup_authentication_blog_16.md#2025-04-22_snippet_14\n\nLANGUAGE: TSX\nCODE:\n```\nimport getSupabaseServerComponentClient from '~/core/supabase/server-component-client';\nimport { getOrganizationById } from '~/lib/organizations/database/queries';\n\ninterface Params {\n  params: {\n    id: string;\n  };\n}\n\nasync function OrganizationPage({ params }: Params) {\n  const client = getSupabaseServerComponentClient();\n  const organization = await getOrganizationById(client, params.id);\n\n  return <div>{organization.name}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration for Remix-Fire Projects\nDESCRIPTION: Example of environment variables used in a Remix-Fire project, including Firebase configuration, emulator settings, authentication, and third-party service integration.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/development_getting_started_environment_variables_firestore_data_fetching_74.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nDEFAULT_LOCALE=en\nEMULATOR=true\nSITE_URL=http://localhost:3000\nREQUIRE_EMAIL_VERIFICATION=false\n\n# FIREBASE\nGCLOUD_PROJECT=demo-makerkit\nFIREBASE_PROJECT_ID=demo-makerkit\nFIREBASE_STORAGE_BUCKET=demo-makerkit.appspot.com\nFIREBASE_AUTH_DOMAIN=localhost\nSERVICE_ACCOUNT_CLIENT_EMAIL=\nSERVICE_ACCOUNT_PRIVATE_KEY=\n\n# Change this with your project's APP ID\nFIREBASE_APP_ID=1:981813564016:web:f13148231721fcd0ee5ab5\n# Change this with your project's API KEY\nFIREBASE_API_KEY=AIzaSyAAqU_euGAMtJoXp0sECblAIndifCp0pmE\n\n# FIREBASE EMULATOR\nFIRESTORE_EMULATOR_HOST=localhost:8080\nFIREBASE_AUTH_EMULATOR_HOST=localhost:9099\nFIREBASE_STORAGE_EMULATOR_HOST=localhost:9199\nFIREBASE_PUBSUB_EMULATOR_HOST=localhost:8085\nFIREBASE_EMULATOR_HOST=localhost\nFIRESTORE_EMULATOR_PORT=8080\nFIREBASE_AUTH_EMULATOR_PORT=9099\nFIREBASE_STORAGE_EMULATOR_PORT=9199\n\n# SERCET KEY TO SIGN SECRETS. REPLACE THE BELOW WITH A RANDOM AND COMPLEX STRING. KEEPT IT SAFE.\nSECRET_KEY=123456789\n\n# STRIPE\nSTRIPE_WEBHOOK_SECRET=\nSTRIPE_SECRET_KEY=\n\n# APPCHECK\nAPPCHECK_KEY=\nAPPCHECK_DEBUG_TOKEN=\n```\n\n----------------------------------------\n\nTITLE: Integrating Analytics with App Events in TypeScript\nDESCRIPTION: Example showing how to leverage the App Events system for centralized analytics tracking in a Makerkit project.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/analytics_api_custom_analytics_provider_google_analytics_provider_57.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useAppEvents } from '@kit/shared/events';\n\nfunction SomeComponent() {\n  const { emit } = useAppEvents();\n\n  const handleSignUp = (userId: string) => {\n    emit({ type: 'user.signedUp', payload: { userId } });\n    // This automatically calls analytics.identify and analytics.trackEvent\n  };\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Captcha Protection in Enhanced Server Actions - TypeScript/TSX\nDESCRIPTION: Showcases augmenting a server action with captcha verification by configuring 'enhanceAction' with the 'captcha' flag. The enhanced action expects clients to supply a captcha token matched by the Zod schema. Proper server environment variables must be set for functionality, and this action is suitable when bots or abuse prevention are required.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/csrf_protection_react_query_route_handlers_43.md#2025-04-22_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n'use server';\n\nimport { enhanceAction } from '@kit/next/actions';\n\nexport const myServerAction = enhanceAction(\n  async function (data, user) {\n    // ... your code here\n    return {\n      success: true,\n    };\n  },\n  {\n    captcha: true,\n    schema: ZodSchema,\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Accessing Loader Data in a React Component (TypeScript)\nDESCRIPTION: Shows how a React component (`MyPage`) accesses data returned by its corresponding loader function via the `loaderData` prop provided by React Router. The component destructures `title` and `data` from `props.loaderData` for rendering.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/creating_your_own_cms_client_keystatic_wordpress_62.md#2025-04-22_snippet_26\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function MyPage(props: Route.ComponentProps) {\n  const { title, data } = props.loaderData;\n\n  return (\n    <div>\n      <h1>{title}</h1>\n      <DataDisplay data={data} />\n    </div>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Search Parameters in Next.js Pages\nDESCRIPTION: Demonstrates how to access search parameters from the URL in Next.js pages using the searchParams object passed to the page component.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/organization_sdk_organization_subscription_sdk_sdk_25.md#2025-04-22_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\ninterface PageData {\n  params: {\n    organization: string;\n    project: string;\n  }\n\n  searchParams: {\n    page: string;\n    limit: string;\n  }\n}\n\nfunction Page(data: PageData) {\n  // data.searchParams.page\n}\n```\n\n----------------------------------------\n\nTITLE: Linking local project to Supabase project\nDESCRIPTION: Command to link your local project to your remote Supabase project, which will prompt for the database password created earlier.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/cloudflare_production_environment_variables_supabase_47.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npnpm --filter web supabase link\n```\n\n----------------------------------------\n\nTITLE: Starting Local Supabase Environment (Bash)\nDESCRIPTION: Runs the `supabase:web:start` script via `pnpm`, which typically starts the Supabase services (database, auth, etc.) required for local development within the `web` app context.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/code_health_common_commands_conventions_48.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npnpm run supabase:web:start\n```\n\n----------------------------------------\n\nTITLE: Configuring One-Off Payments in TypeScript\nDESCRIPTION: This snippet demonstrates how to set up a one-time payment plan. It includes a single line item with a flat cost for a one-off purchase.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/google_analytics_provider_posthog_analytics_provider_umami_analytics_provider_88.md#2025-04-22_snippet_48\n\nLANGUAGE: tsx\nCODE:\n```\nexport default createBillingSchema({\n  provider,\n  products: [\n    {\n      id: 'starter',\n      name: 'Starter',\n      description: 'The perfect plan to get started',\n      currency: 'USD',\n      badge: `Value`,\n      plans: [\n        {\n          name: 'Starter Monthly',\n          id: 'starter-monthly',\n          paymentType: 'one-time',\n          lineItems: [\n            {\n              id: 'price_1NNwYHI1i3VnbZTqI2UzaHIe',\n              name: 'Addon 2',\n              cost: 9.99,\n              type: 'flat',\n            },\n          ],\n        }\n      ],\n    }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Project Permissions with SQL\nDESCRIPTION: SQL function calls to check various project-related permissions for the current user\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/projects_data_model_53.md#2025-04-22_snippet_21\n\nLANGUAGE: sql\nCODE:\n```\n-- Check if the current user can edit a project\nSELECT public.can_edit_project(auth.uid(), :project_id);\n\n-- Check if the current user can delete a project\nSELECT public.can_delete_project(auth.uid(), :project_id);\n\n-- Check if the current user can invite members to a project\nSELECT public.can_invite_project_member(auth.uid(), :project_id);\n```\n\n----------------------------------------\n\nTITLE: Creating Form Component with React Hook Form\nDESCRIPTION: A form component that integrates with react-hook-form for handling form state and validation. Includes input fields for name, email, and message with form controls and descriptions.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/multi_step_forms_page_shadcn_40.md#2025-04-22_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\nimport { useForm } from 'react-hook-form';\nimport { Button } from '@kit/ui/button';\n\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@kit/ui/form';\nimport { Input } from '@kit/ui/input';\nimport { Textarea } from '@kit/ui/textarea';\n\nexport default function FormDemo() {\n  const form = useForm({\n    defaultValues: {\n      name: 'John Doe',\n      email: 'john@doe.com',\n      message: 'Hello, world!',\n    },\n  });\n\n  return (\n    <>\n      <Form {...form}>\n        <form\n          className=\"flex flex-col space-y-4\"\n          onSubmit={form.handleSubmit((data) => {\n            console.log(data);\n          })}\n        >\n          <FormField\n            name=\"name\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Name</FormLabel>\n                <FormControl>\n                  <Input {...field} type=\"text\" placeholder=\"Enter your name\" />\n                </FormControl>\n                <FormDescription>Please enter your name.</FormDescription>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            name=\"email\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Email</FormLabel>\n                <FormControl>\n                  <Input\n                    {...field}\n                    type=\"email\"\n                    placeholder=\"Enter your email\"\n                  />\n                </FormControl>\n                <FormDescription>Please enter your email.</FormDescription>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            name=\"message\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Message</FormLabel>\n                <FormControl>\n                  <Textarea {...field} placeholder=\"Enter your message\" />\n                </FormControl>\n                <FormDescription>Please enter your message.</FormDescription>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <div className=\"flex justify-end\">\n            <Button type=\"submit\">Submit</Button>\n          </div>\n        </form>\n      </Form>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Function for Checking Account Action Permissions\nDESCRIPTION: SQL function to check if an account has permissions to perform actions on another account. Validates based on ownership and role hierarchy.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/supabase_clients_data_fetching_adding_pages_63.md#2025-04-22_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\npublic.can_action_account_member(\n  target_team_account_id uuid,\n  target_user_id uuid\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Team Account Middleware Functions\nDESCRIPTION: Core middleware functions for handling team-only access, including team slug storage in cookies and redirect logic\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/team_accounts_only_recipes_adding_translations_55.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst createTeamCookie = (userId: string) => `${userId}-selected-team-slug`;\n\nfunction handleTeamAccountsOnly(request: NextRequest, userId: string) {\n  if (request.nextUrl.pathname === '/home/teams') {\n    return NextResponse.next();\n  }\n\n  if (request.nextUrl.pathname === '/home') {\n    return redirectToTeam(request, userId);\n  }\n\n  if (isTeamAccountRoute(request) && !isUserRoute(request)) {\n    return storeTeamSlug(request, userId);\n  }\n\n  if (isUserRoute(request)) {\n    return redirectToTeam(request, userId);\n  }\n\n  return NextResponse.next();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Database Webhook Handler in Remix\nDESCRIPTION: TypeScript code for handling database webhooks in a Remix Supabase application. This implementation shows how to listen for database changes and trigger custom logic when specific events occur.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/adding_turborepo_package_approaching_local_development_database_functions_93.md#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  getDatabaseWebhookHandlerService,\n} from '@kit/database-webhooks';\n\n/**\n * @name POST\n * @description POST handler for the webhook route that handles the webhook event\n */\nexport async function POST(request: Request) {\n  const service = getDatabaseWebhookHandlerService();\n\n  try {\n    // handle the webhook event\n    await service.handleWebhook(request, {\n      handleEvent(change) {\n        if (change.type === 'INSERT' && change.table === 'invitations') {\n          // do something with the invitation\n        }\n      },\n    });\n\n    return new Response(null, { status: 200 });\n  } catch {\n    return new Response(null, { status: 500 });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Imperative Server Action Call with useTransition\nDESCRIPTION: Demonstrates how to call a server action imperatively using React's useTransition hook in a client component.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/user_reading_record_creating_record_20.md#2025-04-22_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useTransition } from \"react\";\n\nfunction ClientComponent({ id }) {\n  let [isPending, startTransition] = useTransition();\n\n  return (\n    <button onClick={() => startTransition(() => createPostAction(id))}>\n      Save\n    </button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using useCurrentOrganization Hook to Get Organization Data\nDESCRIPTION: This snippet shows how to create a custom hook that retrieves the current organization's name using the useCurrentOrganization hook. The organization data is populated from server-side fetching in the dashboard layout.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/deploying_production_environment_variables_functions_26.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { useCurrentOrganization } from '~/lib/organizations/hooks/use-current-organization';\n\nexport function useCurrentOrganizationName() {\n  const organization = useCurrentOrganization();\n\n  return organization?.name;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Umami Environment Variables\nDESCRIPTION: Defines required environment variables for Umami configuration in the `.env` file. `VITE_UMAMI_HOST` specifies the URL of your Umami instance (self-hosted or cloud), and `VITE_UMAMI_WEBSITE_ID` provides the unique ID for the website being tracked within Umami.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/google_analytics_provider_posthog_analytics_provider_umami_analytics_provider_88.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nVITE_UMAMI_HOST=your-umami-host\nVITE_UMAMI_WEBSITE_ID=your-umami-website-id\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js Dependencies with npm\nDESCRIPTION: Command to install the required Node.js dependencies for the project using npm.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/commands_cors_develop_firebase_security_rules_5.md#2025-04-22_snippet_45\n\nLANGUAGE: bash\nCODE:\n```\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Custom OAuth Provider Implementation\nDESCRIPTION: Shows how to implement custom OAuth providers for Microsoft and Apple authentication.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_one_time_payments_stripe_webhooks_ci_tests_73.md#2025-04-22_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\nclass MicrosoftAuthProvider extends OAuthProvider {\n  constructor() {\n    super('microsoft.com');\n  }\n}\n\nclass AppleAuthProvider extends OAuthProvider {\n  constructor() {\n    super('apple.com');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Layout Style Environment Variables\nDESCRIPTION: Environment variable configuration for setting the navigation layout style to header instead of the default sidebar.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/team_account_sidebar_configuration_configuration_cms_api_92.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nVITE_TEAM_NAVIGATION_STYLE=header\nVITE_USER_NAVIGATION_STYLE=header\n```\n\n----------------------------------------\n\nTITLE: Importing TicketMessagesContainer Component in Next.js Page\nDESCRIPTION: This snippet shows how to import the `TicketMessagesContainer` component into a Next.js page file located at `apps/web/app/home/[account]/tickets/[ticketId]/page.tsx`. This prepares the component for use within the page.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/data_fetching_3.md#2025-04-22_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n{% title=\"apps/web/app/home/[account]/tickets/[ticketId]/page.tsx\" %}\nimport { TicketMessagesContainer } from './_components/ticket-messages-container';\n```\n\n----------------------------------------\n\nTITLE: Running Type Generation Command\nDESCRIPTION: Bash command to generate TypeScript types from the Supabase schema using the CLI tool.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/organization_sdk_organization_subscription_sdk_sdk_25.md#2025-04-22_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\nnpm run typegen\n```\n\n----------------------------------------\n\nTITLE: MakerKit UI Component References\nDESCRIPTION: List of core MakerKit UI components used for integration, including Alert, Heading, and Spinner components.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/app_breadcrumbs_bordered_navigation_menu_card_button_39.md#2025-04-22_snippet_38\n\nLANGUAGE: jsx\nCODE:\n```\nAlert, Heading, Spinner\n```\n\n----------------------------------------\n\nTITLE: Stripe Webhook Event Types Enum\nDESCRIPTION: Enumeration defining supported Stripe webhook event types\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/subscription_permissions_organizations_lemon_squeezy_23.md#2025-04-22_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nexport enum StripeWebhooks {\n  Completed = 'checkout.session.completed',\n  SubscriptionDeleted = 'customer.subscription.deleted',\n  SubscriptionUpdated = 'customer.subscription.updated',\n}\n```\n\n----------------------------------------\n\nTITLE: Widget Initialization Implementation\nDESCRIPTION: Main entry point for widget initialization including DOM manipulation and error handling\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/building_javascript_widget_1.md#2025-04-22_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Suspense } from 'react';\n\nimport { hydrateRoot } from 'react-dom/client';\n\nimport Widget from './components';\nimport { IFrame } from './components/iframe';\nimport styles from './index.css';\n\nconst WIDGET_NAME = process.env.WIDGET_NAME;\n\n// initialize the widget\ninitializeWidget();\n\nfunction initializeWidget() {\n  if (document.readyState !== 'loading') {\n    onReady();\n  } else {\n    document.addEventListener('DOMContentLoaded', onReady);\n  }\n}\n\nfunction onReady() {\n  try {\n    const element = document.createElement('div');\n    const accountId = getAccountId();\n\n    const component = (\n      <IFrame>\n        <Suspense fallback={null}>\n          <style suppressHydrationWarning>{styles}</style>\n          <Widget accountId={accountId} />\n        </Suspense>\n      </IFrame>\n    );\n\n    hydrateRoot(element, component);\n\n    document.body.appendChild(element);\n  } catch (error) {\n    console.warn(`Could not initialize Widget`);\n    console.warn(error);\n  }\n}\n\nfunction getAccountId() {\n  const script = getCurrentScript();\n\n  if (!script) {\n    throw new Error('Script not found');\n  }\n\n  const accountId = script.getAttribute('data-account');\n\n  if (!accountId) {\n    throw new Error('Missing data-account-id attribute');\n  }\n\n  return accountId;\n}\n\nfunction getCurrentScript() {\n  const currentScript = document.currentScript;\n\n  if (!WIDGET_NAME) {\n    throw new Error('Missing WIDGET_NAME environment variable');\n  }\n\n  if (currentScript?.getAttribute('src')?.includes(WIDGET_NAME)) {\n    return currentScript as HTMLScriptElement;\n  }\n\n  return Array.from(document.scripts).find((item) => {\n    return item.src.includes(WIDGET_NAME);\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Accordion Component in React\nDESCRIPTION: Demonstrates how to use the Accordion component from the Shadcn UI library in a React application. The Accordion is a collapsible container for organizing and presenting information.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/multi_step_forms_page_shadcn_40.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Accordion, AccordionItem } from '@kit/ui/accordion';\n\nfunction MyAccordion() {\n  return (\n    <Accordion>\n      <AccordionItem title=\"Section 1\">\n        <p>Content for Section 1</p>\n      </AccordionItem>\n      <AccordionItem title=\"Section 2\">\n        <p>Content for Section 2</p>\n      </AccordionItem>\n    </Accordion>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Events Page Component\nDESCRIPTION: Next.js page component that renders the EventsListContainer.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/ui_hooks_mdx_15.md#2025-04-22_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport EventsListContainer from '~/app/dashboard/[organization]/events/components/EventsListContainer';\n\nconst EventsPage: React.FC = () => {\n  return (\n     <EventsListContainer />\n  );\n};\n\nexport default EventsPage;\n```\n\n----------------------------------------\n\nTITLE: Checking Permissions for Conditional UI Rendering in Next.js\nDESCRIPTION: This code shows how to fetch user permissions from the Team Workspace API and conditionally render UI elements based on those permissions. The example checks if a user has 'tasks.write' permission to determine whether to show a Create Task button.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/marketing_pages_migrations_permissions_and_roles_45.md#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { loadTeamWorkspace } from '~/home/[account]/_lib/server/team-account-workspace.loader';\n\nexport default function TasksPage() {\n  const data = await loadTeamWorkspace();\n  const permissions = data.account.permissions; // string[]\n\n  const canWriteTasks = permissions.includes('tasks.write');\n\n  return (\n    <div>\n      {canWriteTasks && <button>Create Task</button>}\n      // other UI elements // ...\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Restricted Task Creation SQL Function\nDESCRIPTION: PostgreSQL function with security definer that restricts task creation to admin service role only.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/theming_how_to_version_0_6_0_81.md#2025-04-22_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace function create_task(user_id bigint, name text)\nreturns tasks as $$\nbegin\n    if current_setting('role') != 'service_role' then\n        raise exception 'Only admins can call this function';\n    end if;\n\n    insert into tasks (user_id, name) values (user_id, name);\n\n    return (select * from tasks where id = currval('tasks_id_seq'));\nend;\n$$ language plpgsql security definer search_path = public;\n```\n\n----------------------------------------\n\nTITLE: Installing Makerkit Analytics Plugins via CLI\nDESCRIPTION: Uses the Makerkit CLI (`@makerkit/cli`) to install analytics plugins. The user will be prompted to select specific plugins like Google Analytics, PostHog, or Umami from a list.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/google_analytics_provider_posthog_analytics_provider_umami_analytics_provider_88.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx @makerkit/cli@latest plugins install\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Service Environment Variables\nDESCRIPTION: Environment variables configuration for setting up an email service in a Next.js Firebase application.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/commands_cors_develop_firebase_security_rules_5.md#2025-04-22_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\nEMAIL_HOST=\nEMAIL_PORT=587\nEMAIL_USER=\nEMAIL_PASSWORD=\nEMAIL_SENDER='MakerKit Team <info@makerkit.dev>'\n```\n\n----------------------------------------\n\nTITLE: Extending Analytics with Custom App Events in TypeScript\nDESCRIPTION: Shows how to extend the Analytics API by defining custom app events (e.g., `feature.used`) and using `useAppEvents` to emit them. This example also includes an explicit `analytics.trackEvent` call for additional or specific tracking logic.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/analytics_api_custom_analytics_provider_google_analytics_provider_57.md#2025-04-22_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nimport { analytics } from '@kit/analytics';\nimport { useAppEvents } from '@kit/shared/events';\n\ninterface MyAppEvents {\n  'feature.used': { featureName: string };\n}\n\nexport function useMyAnalytics() {\n  const { emit } = useAppEvents<MyAppEvents>();\n\n  return {\n    trackFeatureUse: (featureName: string) => {\n      emit({ type: 'feature.used', payload: { featureName } });\n      // If you need additional tracking logic:\n      void analytics.trackEvent('Feature Used', { featureName });\n    },\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Syncing New Application with Updated Web Template\nDESCRIPTION: Command to pull the latest changes from the web-branch into the new application directory.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/team_account_sidebar_configuration_configuration_cms_api_92.md#2025-04-22_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ngit subtree pull --prefix=apps/pdf-chat origin web-branch --squash\n```\n\n----------------------------------------\n\nTITLE: Defining Zod Schema for API Request Body Validation in TypeScript\nDESCRIPTION: This snippet demonstrates defining a validation schema for an API request body using the Zod library. The `getBodySchema` function returns a Zod object schema (`z.object`) requiring a `displayName` (string) and a valid `email` (string validated using `z.string().email()`). This schema can be used to parse and validate incoming request data.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/develop_firebase_security_rules_emails_encrypting_secrets_71.md#2025-04-22_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nfunction getBodySchema() {\n  return z.object({\n    displayName: z.string(),\n    email: z.string().email(),\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Locale in Environment Configuration\nDESCRIPTION: Environment variable configuration for setting the default locale in the application\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/translations_updating_latest_version_tutorials_28.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nDEFAULT_LOCALE=de\n```\n\n----------------------------------------\n\nTITLE: Onboarding Form Schema Definition\nDESCRIPTION: Zod schema definition for onboarding form validation covering profile, team, and checkout data.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/waitlist_plugin_plugins_drizzle_supabase_52.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { z } from 'zod';\n\nexport const OnboardingFormSchema = z.object({\n  profile: z.object({\n    name: z.string().min(1).max(255),\n  }),\n  team: z.object({\n    name: z.string().min(1).max(255),\n  }),\n  checkout: z.object({\n    planId: z.string().min(1),\n    productId: z.string().min(1),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Firestore Security Rules for Tasks\nDESCRIPTION: Firestore security rules for a tasks collection, enforcing organization-based access control where users can only create, read, update, and delete tasks belonging to their organization.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/development_getting_started_environment_variables_firestore_data_fetching_74.md#2025-04-22_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nmatch /tasks/{taskId} {\n  allow create: if userIsMemberByOrganizationId(incomingData().organizationId);\n  allow read, update, delete: if userIsMemberByOrganizationId(existingData().organizationId);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Resend API Environment Variables\nDESCRIPTION: Configuration settings for using Resend as the mailer provider in the Remix Supabase Starter Kit.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/development_authentication_emails_email_configuration_94.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nMAILER_PROVIDER=resend\n```\n\nLANGUAGE: bash\nCODE:\n```\nRESEND_API_KEY=your-api-key\nEMAIL_SENDER=your-email\n```\n\n----------------------------------------\n\nTITLE: Creating RLS Policy for Organization Members to Insert Tasks in Supabase\nDESCRIPTION: A SQL policy that allows all organization members to create tasks within their organization. It checks if the user is a member of the organization before allowing insertion.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/theming_how_to_version_0_6_0_81.md#2025-04-22_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace policy \"Only the owner can insert tasks\"\n    on tasks\n    as restrictive\n    for insert\n    to authenticated\n    with check (\n        current_user_is_member_of_organization(organization_id)\n    );\n```\n\n----------------------------------------\n\nTITLE: Setting Up Per-Seat Billing with Tiers in TypeScript\nDESCRIPTION: This example illustrates how to create a per-seat billing plan with tiered pricing. It includes a line item with tiers based on the number of seats, including a free tier for the first few seats.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/google_analytics_provider_posthog_analytics_provider_umami_analytics_provider_88.md#2025-04-22_snippet_47\n\nLANGUAGE: tsx\nCODE:\n```\nexport default createBillingSchema({\n  provider,\n  products: [\n    {\n      id: 'starter',\n      name: 'Starter',\n      description: 'The perfect plan to get started',\n      currency: 'USD',\n      badge: `Value`,\n      plans: [\n        {\n          name: 'Starter Monthly',\n          id: 'starter-monthly',\n          trialDays: 7,\n          paymentType: 'recurring',\n          interval: 'month',\n          lineItems: [\n            {\n              id: 'price_1NNwYHI1i3VnbZTqI2UzaHIe',\n              name: 'Addon 2',\n              cost: 0,\n              type: 'per_seat',\n              tiers: [\n                {\n                    upTo: 3,\n                    cost: 0,\n                },\n                {\n                    upTo: 5,\n                    cost: 7.99,\n                },\n                {\n                    upTo: 'unlimited',\n                    cost: 5.99,\n                }\n              ]\n            },\n          ],\n        }\n      ],\n    }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Primary Color in Tailwind CSS for Makerkit\nDESCRIPTION: Configuration for updating the primary color in Tailwind CSS to use the violet color palette. This allows accessing the primary color via semantic naming like primary-500, primary-600, etc.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/updating_navigation_menu_403_error_actions_contentlayer_stuck_34.md#2025-04-22_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nprimary: {\n  DEFAULT: 'hsl(var(--primary))',\n  foreground: 'hsl(var(--primary-foreground))',\n  ...colors.violet,\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Function to Get User's Role in an Organization in Supabase\nDESCRIPTION: A SQL function that retrieves a user's role within a specific organization. The function throws an exception if the user is not a member of the organization.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/theming_how_to_version_0_6_0_81.md#2025-04-22_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace function get_current_user_role(org_id bigint)\nreturns int as $$\ndeclare\n    user_role int;\nbegin\n    select role\n        from memberships\n        where organization_id = org_id and user_id = auth.uid()\n        into user_role;\n\n    if user_role is null then\n        raise exception 'User is not a member of the organization';\n    end if;\n\n    return user_role;\nend;\n$$ language plpgsql;\n```\n\n----------------------------------------\n\nTITLE: Form Implementation with React Hook Form and Zod\nDESCRIPTION: Complete example of implementing forms using React Hook Form with Zod validation, including schema definition and form component implementation\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/llms_migration_from_makerkit_v1_navigating_codebase_49.md#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { z } from 'zod';\n\nexport const CreateNoteSchema = z.object({\n  title: z.string().min(1),\n  content: z.string().min(1),\n});\n```\n\nLANGUAGE: tsx\nCODE:\n```\n'use server';\n\nimport { z } from 'zod';\nimport { enhanceAction } from '@kit/next/actions';\nimport { CreateNoteSchema } from '../schema/create-note.schema';\n\nconst CreateNoteSchema = z.object({\n  title: z.string().min(1),\n  content: z.string().min(1),\n});\n\nexport const createNoteAction = enhanceAction(\n  async function (data, user) {\n    return {\n      success: true,\n    };\n  },\n  {\n    auth: true,\n    schema: CreateNoteSchema,\n  },\n);\n```\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { useForm } from 'react-hook-form';\nimport { z } from 'zod';\n\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@kit/ui/form';\n\nimport { CreateNoteSchema } from '../_lib/schema/create-note.schema';\n\nexport function CreateNoteForm() {\n  const [pending, startTransition] = useTransition();\n\n  const form = useForm({\n    resolver: zodResolver(CreateNoteSchema),\n    defaultValues: {\n      title: '',\n      content: '',\n    },\n  });\n\n  const onSubmit = (data) => {\n    startTransition(async () => {\n      try {\n        await createNoteAction(data);\n      } catch {\n        // handle error\n      }\n    });\n  };\n\n  return (\n    <form onSubmit={form.handleSubmit(onSubmit)}>\n      <Form {...form}>\n        <FormField\n          name={'title'}\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>\n                <span className={'text-sm font-medium'}>Title</span>\n              </FormLabel>\n\n              <FormControl>\n                <input\n                  type={'text'}\n                  className={'w-full'}\n                  placeholder={'Title'}\n                  {...field}\n                />\n              </FormControl>\n\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          name={'content'}\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>\n                <span className={'text-sm font-medium'}>Content</span>\n              </FormLabel>\n\n              <FormControl>\n                <textarea\n                  className={'w-full'}\n                  placeholder={'Content'}\n                  {...field}\n                />\n              </FormControl>\n\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <button disabled={pending} type={'submit'} className={'w-full'}>\n          Submit\n        </button>\n      </Form>\n    </form>\n  );\n```\n\n----------------------------------------\n\nTITLE: Defining the Structure for Sidebar Menu Items (TSX)\nDESCRIPTION: This code snippet defines the TypeScript interface for a sidebar menu item within the Makerkit application. Each item requires a `label` (string or translation key), a `path` (string for the URL), and an `Icon` (a React component function accepting className props and returning JSX).\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/api_routes_vs_server_actions_api_routes_call_api_routes_from_client_19.md#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n{\n  label: string;\n  path: string;\n  Icon: (props: { className: string }) => JSX.Element;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Task Table Columns Definition\nDESCRIPTION: Defines the columns configuration for the tasks table including name, description, due date, and actions columns with sorting and formatting.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/supabase_data_fetching_supabase_data_writing_tailwind_css_86.md#2025-04-22_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nconst TABLE_COLUMNS: ColumnDef<Task>[] = [\n  {\n    header: 'Name',\n    cell: ({ row }) => {\n      const task = row.original;\n\n      return (\n        <Link className={'hover:underline'} to={'/tasks/' + task.id}>\n          {task.name}\n        </Link>\n      );\n    },\n  },\n  // ... [other columns]\n];\n```\n\n----------------------------------------\n\nTITLE: Widget Context Implementation\nDESCRIPTION: React context implementation for managing widget state including open/close and ticket ID management\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/building_javascript_widget_1.md#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createContext } from 'react';\n\nexport const WidgetContext = createContext({\n  isOpen: false,\n  setIsOpen: (_: boolean) => {\n    //\n  },\n  ticketId: '',\n  setTicketId: (_: string) => {\n    //\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Organization Data in Next.js API Route\nDESCRIPTION: Backend implementation for fetching the current organization data using Next.js API routes with authentication middleware\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/call_api_routes_from_client_csrf_token_guarding_api_routes_7.md#2025-04-22_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\nimport { NextApiRequest,NextApiResponse } from \"next\";\nimport { getCurrentOrganization } from '~/lib/server/organizations/get-current-organization';\nimport { withPipe } from '~/core/middleware/with-pipe';\nimport { withAuthedUser } from '~/core/middleware/with-authed-user';\n\nasync function handler(req: NextApiRequest, res: NextApiResponse) {\n  const user = req.firebaseUser;\n  const organization = await getCurrentOrganization(user.uid);\n  // ...\n}\n\nexport default withPipe(withAuthedUser, handler);\n```\n\n----------------------------------------\n\nTITLE: Revoking and Granting Permissions on Tickets Table - SQL\nDESCRIPTION: This series of SQL DCL (Data Control Language) commands revokes all permissions on the `public.tickets` table from `public` and `service_role` roles, then selectively grants select/insert/update/delete permissions to the `authenticated` role and select/insert to `service_role`. These scripts require a PostgreSQL-compatible environment and assume the table exists. The main parameters are roles, and outputs are permission state changes to those roles. Limitations: Table and roles must be correctly configured prior to execution.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/database_4.md#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nrevoke all on public.tickets from public, service_role;\n```\n\nLANGUAGE: sql\nCODE:\n```\ngrant select, insert, update, delete on public.tickets to authenticated;\n```\n\nLANGUAGE: sql\nCODE:\n```\ngrant select, insert on public.tickets to service_role;\n```\n\n----------------------------------------\n\nTITLE: ProjectsService Implementation in TypeScript\nDESCRIPTION: TypeScript class implementing project management functionality using Supabase client\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/projects_data_model_53.md#2025-04-22_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SupabaseClient } from '@supabase/supabase-js';\n\nimport { Database } from '~/lib/database.types';\n\ntype ProjectAction = Database['public']['Enums']['project_action'];\n\nexport function createProjectsService(client: SupabaseClient<Database>) {\n  return new ProjectsService(client);\n}\n\nclass ProjectsService {\n  constructor(private readonly client: SupabaseClient<Database>) {}\n\n  async createProject(params: {\n    name: string;\n    description?: string;\n    accountId: string;\n  }) {\n    const { data, error } = await this.client\n      .from('projects')\n      .insert({\n        name: params.name,\n        description: params.description,\n        account_id: params.accountId,\n      })\n      .select('id')\n      .single();\n\n    if (error) {\n      throw error;\n    }\n\n    return data;\n  }\n\n  async getProjects(accountSlug: string) {\n    const { data, error } = await this.client\n      .from('projects')\n      .select('*, account: account_id ! inner (slug)')\n      .eq('account.slug', accountSlug);\n\n    if (error) {\n      throw error;\n    }\n\n    return data;\n  }\n\n  async getProjectMembers(projectId: string) {\n    const { data, error } = await this.client\n      .from('project_members')\n      .select('*')\n      .eq('project_id', projectId);\n\n    if (error) {\n      throw error;\n    }\n\n    return data;\n  }\n\n  async getProject(projectId: string) {\n    const { data, error } = await this.client\n      .from('projects')\n      .select('*')\n      .eq('id', projectId)\n      .single();\n\n    if (error) {\n      throw error;\n    }\n\n    return data;\n  }\n\n  async hasPermission(params: { projectId: string; action: ProjectAction }) {\n    const { data, error } = await this.client.rpc(\n      'current_user_has_project_permission',\n      {\n        p_project_id: params.projectId,\n        p_action: params.action,\n      },\n    );\n\n    if (error) {\n      throw error;\n    }\n\n    return data;\n  }\n\n  async addProjectMember(params: {\n    projectId: string;\n    userId: string;\n    role?: 'member' | 'admin';\n  }) {\n    const { error } = await this.client.rpc('add_project_member', {\n      p_project_id: params.projectId,\n      p_user_id: params.userId,\n      p_role: params.role ?? 'member',\n    });\n\n    if (error) {\n      throw error;\n    }\n\n    return true;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Type-checking the Project\nDESCRIPTION: Command to run TypeScript type checking across the project.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/configuring_supabase_database_webhooks_fly_production_environment_variables_95.md#2025-04-22_snippet_37\n\nLANGUAGE: bash\nCODE:\n```\npnpm run typecheck\n```\n\n----------------------------------------\n\nTITLE: Configuring Dark Theme as Default with Theme Switcher\nDESCRIPTION: Configuration in src/configuration.ts to set dark theme as the default while still allowing users to switch themes using the theme switcher in the user interface.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/branding_environment_variables_setup_project_configuration_80.md#2025-04-22_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\n{\n  features: {\n    enableThemeSwitcher: true,\n  },\n  theme: Themes.Dark,\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Notifications Environment Variables\nDESCRIPTION: Environment variables to enable and configure notifications functionality, including whether to enable real-time notifications.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/sentry_monitoring_notifications_configuration_51.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nNEXT_PUBLIC_ENABLE_NOTIFICATIONS=true\nNEXT_PUBLIC_REALTIME_NOTIFICATIONS=true\n```\n\n----------------------------------------\n\nTITLE: Implementing useIsSubscriptionActive Hook for Subscription Status Checking\nDESCRIPTION: Custom React hook that checks if the current organization has an active subscription. Returns true if the subscription status is either 'active' or 'trialing'.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/deploying_production_development_getting_started_environment_variables_13.md#2025-04-22_snippet_24\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { Stripe } from 'stripe';\nimport { useCurrentOrganization } from '~/lib/organizations/hooks/use-current-organization';\n\nconst ACTIVE_STATUSES: Stripe.Subscription.Status[] = ['active', 'trialing'];\n\n/**\n * @name useIsSubscriptionActive\n * @description Returns whether the organization is on any paid\n * subscription, regardless of plan.\n */\nfunction useIsSubscriptionActive() {\n  const organization = useCurrentOrganization();\n  const status = organization?.subscription?.status;\n\n  if (!status) {\n    return false;\n  }\n\n  return ACTIVE_STATUSES.includes(status);\n}\n\nexport default useIsSubscriptionActive;\n```\n\n----------------------------------------\n\nTITLE: Running Stripe CLI with Docker for Local Development\nDESCRIPTION: Command to run the Stripe CLI using npm and Docker, which routes webhooks from Stripe to your local endpoint for development and testing purposes.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/initializing_project_introduction_marketing_site_pages_14.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nnpm run stripe:listen\n```\n\n----------------------------------------\n\nTITLE: Custom CSRF Token Extraction in API Routes\nDESCRIPTION: Implementation showing how to customize CSRF token extraction by passing a function to the withCsrf middleware. This example retrieves the token from the request body.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/introduction_running_the_application_technical_details_6.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextApiRequest, NextApiResponse } from \"next\";\n\nimport { withAuthedUser } from '~/core/middleware/with-authed-user';\nimport { withMethodsGuard } from '~/core/middleware/with-methods-guard';\nimport { withPipe } from '~/core/middleware/with-pipe';\nimport withCsrf from \"./with-csrf\";\n\nfunction helloWorldHandler(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n  await withCsrf(req, () => req.body.csrfToken);\n\n  res.status(200).json({ text: 'Hello' })\n}\n\nexport default withPipe(\n  withAuthedUser,\n  withMethodsGuard(['POST']),\n  helloWorldHandler,\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Development Emulator Variables - dotenv - env\nDESCRIPTION: Lists environment variable configurations for development use in the .env.development file, primarily to enable and configure various Firebase emulators and feature flags. This includes service host/port bindings for Firestore, Auth, Storage, and PubSub emulators, as well as toggles for experiments and local development flags (e.g., FEATURE_FLAG). Dependencies: Firebase emulators (must be running locally). Inputs: emulator host/port values; Outputs: local app components connect to local Firebase emulators instead of production.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/introduction_running_the_application_technical_details_6.md#2025-04-22_snippet_2\n\nLANGUAGE: env\nCODE:\n```\nNEXT_PUBLIC_EMULATOR=true\\nFIRESTORE_EMULATOR_HOST=localhost:8080\\nFIREBASE_AUTH_EMULATOR_HOST=localhost:9099\\nFIREBASE_STORAGE_EMULATOR_HOST=localhost:9199\\nFIREBASE_PUBSUB_EMULATOR_HOST=localhost:8085\\nNEXT_PUBLIC_FIREBASE_EMULATOR_HOST=localhost\\nNEXT_PUBLIC_FIRESTORE_EMULATOR_PORT=8080\\nNEXT_PUBLIC_FIREBASE_AUTH_EMULATOR_PORT=9099\\nNEXT_PUBLIC_FIREBASE_STORAGE_EMULATOR_PORT=9199\\nFEATURE_FLAG=true\n```\n\n----------------------------------------\n\nTITLE: Disabling Theme Switcher in Configuration\nDESCRIPTION: Example of how to disable the theme toggle functionality in a Makerkit project by updating the configuration file. This prevents users from being able to switch between light and dark themes.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/initializing_project_introduction_marketing_site_pages_14.md#2025-04-22_snippet_27\n\nLANGUAGE: tsx\nCODE:\n```\nconst configuration = {\n  theme: Themes.Dark,\n  features: {\n    enableThemeSwitcher: false,\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Multi-Step Form Implementation with React Hook Form and Zod\nDESCRIPTION: A simple example showing how to set up a multi-step form with React Hook Form and Zod validation. It demonstrates the basic structure with MultiStepForm and MultiStepFormStep components.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/multi_step_forms_page_stepper_91.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { MultiStepForm, MultiStepFormStep } from '@kit/ui/multi-step-form';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\n\nconst FormSchema = createStepSchema({\n  step1: z.object({ /* ... */ }),\n  step2: z.object({ /* ... */ }),\n});\n\nexport function MyForm() {\n  const form = useForm({\n    resolver: zodResolver(FormSchema),\n    // ...\n  });\n\n  const onSubmit = (data) => {\n    // Handle form submission\n  };\n\n  return (\n    <MultiStepForm schema={FormSchema} form={form} onSubmit={onSubmit}>\n      <MultiStepFormStep name=\"step1\">\n        {/* Step 1 fields */}\n      </MultiStepFormStep>\n      <MultiStepFormStep name=\"step2\">\n        {/* Step 2 fields */}\n      </MultiStepFormStep>\n    </MultiStepForm>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Invitation Email with react-email in Next.js Firebase SaaS\nDESCRIPTION: This snippet shows how to use react-email to render an invitation email in a Next.js Firebase SaaS application. It includes the props interface and the email component structure using React components.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/develop_firebase_security_rules_emails_encrypting_secrets_71.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\ninterface Props {\n  organizationName: string;\n  organizationLogo?: string;\n  inviter: Maybe<string>;\n  invitedUserEmail: string;\n  link: string;\n  productName: string;\n}\n\nexport default function renderInviteEmail(props: Props) {\n  const title = `You have been invited to join ${props.organizationName}`;\n\n  return render(\n    <Html>\n      <Head>\n        <title>{title}</title>\n      </Head>\n      <Preview>{title}</Preview>\n      <Body style={{ width: '500px', margin: '0 auto', font: 'helvetica' }}>\n        <EmailNavbar />\n        <Section style={{ width: '100%' }}>\n          <Column>\n            <Text>Hi,</Text>\n\n            <Text>\n              {props.inviter} with {props.organizationName} has invited you to\n              use {props.productName} to collaborate with them.\n            </Text>\n\n            <Text>\n              Use the button below to set up your account and get started:\n            </Text>\n          </Column>\n        </Section>\n\n        <Section>\n          <Column align=\"center\">\n            <CallToActionButton href={props.link}>\n              Join {props.organizationName}\n            </CallToActionButton>\n          </Column>\n        </Section>\n\n        <Section>\n          <Column>\n            <Text>Welcome aboard,</Text>\n            <Text>The {props.productName} Team</Text>\n          </Column>\n        </Section>\n      </Body>\n    </Html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Test Suite for Subscription and Feature Management\nDESCRIPTION: Complete test suite that validates plan entitlements, subscription management, feature usage tracking, and role-based access control. Tests include user authentication, plan entitlement verification, feature usage updates, and edge cases handling. Uses pgTap testing framework with the basejump-supabase_test_helpers extension.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_billing_checkout_addons_subscription_entitlements_54.md#2025-04-22_snippet_20\n\nLANGUAGE: sql\nCODE:\n```\nbegin;\ncreate extension \"basejump-supabase_test_helpers\" version '0.0.6';\n\nselect no_plan();\n\nselect tests.create_supabase_user('foreigner', 'foreigner@makerkit.dev');\n\n-- Create test users\nselect makerkit.set_identifier('primary_owner', 'test@makerkit.dev');\nselect makerkit.set_identifier('member', 'member@makerkit.dev');\nselect makerkit.set_identifier('foreigner', 'foreigner@makerkit.dev');\n\n-- Setup test data\nset local role postgres;\n\n-- Insert test plan entitlements\ninsert into public.plan_entitlements (variant_id, feature, entitlement)\nvalues \n  ('basic_plan', 'api_calls', '{\"limit\": 1000, \"period\": \"month\"}'::jsonb),\n  ('pro_plan', 'api_calls', '{\"limit\": 10000, \"period\": \"month\"}'::jsonb),\n  ('basic_plan', 'storage', '{\"limit\": 5, \"unit\": \"GB\"}'::jsonb),\n  ('pro_plan', 'storage', '{\"limit\": 50, \"unit\": \"GB\"}'::jsonb);\n\n-- Create test billing customers and subscriptions\nINSERT INTO public.billing_customers(account_id, provider, customer_id)\nVALUES (makerkit.get_account_id_by_slug('makerkit'), 'stripe', 'cus_test');\n\n-- Create a subscription with basic plan\nSELECT public.upsert_subscription(\n  makerkit.get_account_id_by_slug('makerkit'),\n  'cus_test',\n  'sub_test_basic',\n  true,\n  'active',\n  'stripe',\n  false,\n  'usd',\n  now(),\n  now() + interval '1 month',\n  '[{\n    \"id\": \"sub_basic\",\n    \"product_id\": \"prod_basic\",\n    \"variant_id\": \"basic_plan\",\n    \"type\": \"flat\",\n    \"price_amount\": 1000,\n    \"quantity\": 1,\n    \"interval\": \"month\",\n    \"interval_count\": 1\n  }]'\n);\n\n-- Test as primary owner\nselect tests.authenticate_as('primary_owner');\n\n-- Test reading plan entitlements\nselect isnt_empty(\n  $$ select * from plan_entitlements where variant_id = 'basic_plan' $$,\n  'Primary owner can read plan entitlements'\n);\n\n-- Test can_use_feature function\nselect is(\n  (select public.can_use_feature(makerkit.get_account_id_by_slug('makerkit'), 'api_calls')),\n  true,\n  'Account with basic plan can use api_calls feature'\n);\n\n-- Test get_entitlement function\nselect row_eq(\n  $$ select entitlement->>'limit' from public.get_entitlement(makerkit.get_account_id_by_slug('makerkit'), 'api_calls') $$,\n  row('1000'::text),\n  'Get entitlement returns correct limit for api_calls'\n);\n\nset local role service_role;\n\n-- Test feature usage tracking\nselect lives_ok(\n  $$ select public.update_feature_quota_usage(makerkit.get_account_id_by_slug('makerkit'), 'api_calls', 100) $$,\n  'Can update feature quota usage'\n);\n\n-- Test as primary owner\nselect tests.authenticate_as('primary_owner');\n\n-- Verify feature usage was recorded\nselect row_eq(\n  $$ select usage->>'count' from feature_usage where account_id = makerkit.get_account_id_by_slug('makerkit') and feature = 'api_calls' $$,\n  row('100'::text),\n  'Feature usage is recorded correctly'\n);\n\n-- Test as member\nselect tests.authenticate_as('member');\n\n-- Members can read plan entitlements\nselect isnt_empty(\n  $$ select * from plan_entitlements $$,\n  'Members can read plan entitlements'\n);\n\n-- Members can read feature usage for their account\nselect isnt_empty(\n  $$ select * from feature_usage where account_id = makerkit.get_account_id_by_slug('makerkit') $$,\n  'Members can read feature usage for their account'\n);\n\n-- Test as foreigner\nselect tests.authenticate_as('foreigner');\n\n-- Foreigners can read plan entitlements (public info)\nselect isnt_empty(\n  $$ select * from plan_entitlements $$,\n  'Foreigners can read plan entitlements'\n);\n\n-- Foreigners cannot read feature usage for other accounts\nselect is_empty(\n  $$ select * from feature_usage where account_id = makerkit.get_account_id_by_slug('makerkit') $$,\n  'Foreigners cannot read feature usage for other accounts'\n);\n\n-- Test updating to pro plan\nset local role postgres;\n\nSELECT public.upsert_subscription(\n  makerkit.get_account_id_by_slug('makerkit'),\n  'cus_test',\n  'sub_test_basic',\n  true,\n  'active',\n  'stripe',\n  false,\n  'usd',\n  now(),\n  now() + interval '1 month',\n  '[{\n    \"id\": \"sub_pro\",\n    \"product_id\": \"prod_pro\",\n    \"variant_id\": \"pro_plan\",\n    \"type\": \"flat\",\n    \"price_amount\": 2000,\n    \"quantity\": 1,\n    \"interval\": \"month\",\n    \"interval_count\": 1\n  }]'\n);\n\nselect tests.authenticate_as('primary_owner');\n\n-- Verify pro plan entitlements\nselect row_eq(\n  $$ select entitlement->>'limit' from public.get_entitlement(makerkit.get_account_id_by_slug('makerkit'), 'api_calls') $$,\n  row('10000'::text),\n  'Get entitlement returns updated limit for api_calls after plan upgrade'\n);\n\n-- Test edge cases\n-- Test non-existent feature\nselect is(\n  (select public.can_use_feature(makerkit.get_account_id_by_slug('makerkit'), 'non_existent_feature')),\n  false,\n  'Cannot use non-existent feature'\n);\n\n-- Test non-existent account\nselect is(\n  (select public.can_use_feature('12345678-1234-1234-1234-123456789012'::uuid, 'api_calls')),\n  false,\n  'Cannot use feature for non-existent account'\n);\n\n-- Test updating feature usage with invalid data\nset local role postgres;\n\nselect throws_ok(\n  $$ select public.update_feature_usage('12345678-1234-1234-1234-123456789012'::uuid, 'api_calls', '{\"invalid\": true}'::jsonb) $$,\n  'Cannot update feature usage for non-existent account'\n);\n\n-- Additional tests for subscription entitlements\n\n--------------------------------------------------------------------\n-- Additional tests for update_feature_quota_usage (storage feature)\n--------------------------------------------------------------------\nset local role postgres;\n\n-- Create or update a subscription for storage feature if not already set\n-- We'll use the basic plan for storage\nSELECT public.upsert_subscription(\n  makerkit.get_account_id_by_slug('makerkit'),\n  'cus_test',\n  'sub_test_storage',\n  true,\n  'active',\n  'stripe',\n  false,\n  'usd',\n  now(),\n  now() + interval '1 month',\n  '[{\n    \"id\": \"sub_storage\",\n    \"product_id\": \"prod_storage\",\n    \"variant_id\": \"basic_plan\",\n    \"type\": \"flat\",\n    \"price_amount\": 500,\n    \"quantity\": 1,\n    \"interval\": \"month\",\n    \"interval_count\": 1\n  }]'\n);\n\n-- Reset storage usage by updating its quota\nselect lives_ok(\n  $$ select public.update_feature_quota_usage(makerkit.get_account_id_by_slug('makerkit'), 'storage', 5) $$,\n  'Initial storage quota update sets usage to 5'\n);\n\nselect row_eq(\n  $$ select usage->>'count' from feature_usage where account_id = makerkit.get_account_id_by_slug('makerkit') and feature = 'storage' $$,\n  row('5'::text),\n  'Storage usage should be 5 after initial update'\n);\n\n-- Update storage usage by adding 3 more units\nselect lives_ok(\n  $$ select public.update_feature_quota_usage(makerkit.get_account_id_by_slug('makerkit'), 'storage', 3) $$,\n  'Additional storage quota update adds 3 units'\n);\n\nselect row_eq(\n  $$ select usage->>'count' from feature_usage where account_id = makerkit.get_account_id_by_slug('makerkit') and feature = 'storage' $$,\n  row('8'::text),\n  'Accumulated storage usage should be 8'\n);\n\nset local role service_role;\n\n-- Update api_calls usage by adding an extra field\nselect lives_ok(\n  $$ select public.update_feature_usage(makerkit.get_account_id_by_slug('makerkit'), 'api_calls', '{\"extra\": 100}'::jsonb) $$,\n  'Feature usage update concatenates new JSON data for api_calls'\n);\n\n-- Verify that the api_calls usage JSON now contains the extra field by checking the \"extra\" key value directly\nselect is(\n  (select usage::json->>'extra' from feature_usage \n    where account_id = makerkit.get_account_id_by_slug('makerkit') \n      and feature = 'api_calls'),\n  '100',\n  'Feature usage for api_calls contains extra field after update'\n);\n\n--------------------------------------------------------------------\n-- Additional test for non-existent subscription item entitlement\n--------------------------------------------------------------------\nselect is_empty(\n  $$ select * from public.get_entitlement(makerkit.get_account_id_by_slug('makerkit'), 'nonexistent_feature') $$,\n  'Get entitlement returns empty for a non-existent feature'\n);\n\n--------------------------------------------------------------------\n-- Additional test for atomicity of updating feature usage\n--------------------------------------------------------------------\nset local role postgres;\n\nCREATE OR REPLACE FUNCTION test_atomicity_feature_usage() RETURNS text AS $$\nDECLARE\n    baseline text;\n    current_usage text;\nBEGIN\n    -- Capture the baseline storage usage for the 'storage' feature\n    SELECT usage->>'count' INTO baseline\n    FROM feature_usage\n    WHERE account_id = makerkit.get_account_id_by_slug('makerkit')\n      AND feature = 'storage';\n\n    BEGIN\n        -- Perform a valid update: add 10 units to storage usage\n        PERFORM public.update_feature_quota_usage(makerkit.get_account_id_by_slug('makerkit'), 'storage', 10);\n        -- Force an error by updating usage for a non-existent account\n        PERFORM public.update_feature_usage('00000000-0000-0000-0000-000000000000'::uuid, 'storage', '{\"bad\":1}'::jsonb);\n        -- If no error is raised, return an error message (this should not happen)\n        RETURN 'error not raised';\n    EXCEPTION WHEN OTHERS THEN\n        -- Exception caught; the subtransaction should be rolled back\n        NULL;\n    END;\n\n    -- Capture the current usage after the forced error\n    SELECT usage->>'count' INTO current_usage\n    FROM feature_usage\n    WHERE account_id = makerkit.get_account_id_by_slug('makerkit') AND feature = 'storage';\n\n    IF current_usage = baseline THEN\n         RETURN 'ok';\n    ELSE\n         RETURN 'failed';\n    END IF;\nEND;\n$$ LANGUAGE plpgsql;\n\nselect is((select test_atomicity_feature_usage()), 'ok', 'Atomicity of updating feature usage is preserved');\n\n-- End of additional atomicity tests\n\nselect * from finish();\n\nrollback;\n```\n\n----------------------------------------\n\nTITLE: Request State Interface Definition in TypeScript\nDESCRIPTION: Interface definition for the state object returned by useRequestState hook, showing the three possible states: success with data, loading, or error.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/ui_hooks_mdx_15.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\ntype State<Data, ErrorType> =\n  | {\n      data: Data;\n      loading: false;\n      success: true;\n      error: Maybe<ErrorType>;\n    }\n  | {\n      data: undefined;\n      loading: true;\n      success: false;\n      error: Maybe<ErrorType>;\n    }\n  | {\n      data: undefined;\n      loading: false;\n      success: false;\n      error: Maybe<ErrorType>;\n    };\n```\n\n----------------------------------------\n\nTITLE: Creating AI Edit Action Handler Route in Remix\nDESCRIPTION: TypeScript code for creating a Remix API route that handles AI edit actions, using the handler provided by the AI Text Editor plugin.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_configuration_stripe_one_time_payments_stripe_webhooks_82.md#2025-04-22_snippet_16\n\nLANGUAGE: ts\nCODE:\n```\nimport type { ActionFunctionArgs } from '@remix-run/node';\nimport { createAIEditActionHandler } from '~/plugins/text-editor/lib/route-handler';\n\nexport const action = (params: ActionFunctionArgs) =>\n  createAIEditActionHandler(params.request);\n```\n\n----------------------------------------\n\nTITLE: Implementing Environment Variables Model in TypeScript\nDESCRIPTION: Configuration for adding custom environment variables with validation logic to the Dev Tool. Includes validation with Zod and contextual validation that makes the API key required only when analytics is enabled.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/csrf_protection_react_query_route_handlers_43.md#2025-04-22_snippet_29\n\nLANGUAGE: tsx\nCODE:\n```\n[\n  {\n    name: 'NEXT_PUBLIC_ANALYTICS_ENABLED',\n    description: 'Enables analytics',\n    category: 'Analytics',\n    validate: ({ value }) => {\n      return z\n        .coerce\n        .boolean()\n        .optional()\n        .safeParse(value);\n    },\n  },\n  {\n  name: 'NEXT_PUBLIC_ANALYTICS_API_KEY',\n  description: 'API Key for the analytics service',\n  category: 'Analytics',\n  contextualValidation: {\n    dependencies: [{\n      variable: 'NEXT_PUBLIC_ANALYTICS_ENABLED',\n      condition: (value) => {\n        return value === 'true';\n      },\n      message:\n        'NEXT_PUBLIC_ANALYTICS_API_KEY is required when NEXT_PUBLIC_ANALYTICS_ENABLED is set to \"true\"',\n    }],\n    validate: ({ value }) => {\n     return z\n        .string()\n        .min(1, 'An API key is required when analytics is enabled')\n        .safeParse(value);\n    }\n  }\n}]\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Testing Environment\nDESCRIPTION: This command starts Next.js with testing environment configurations using .env.test.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/ci_tests_running_tests_testing_limitations_12.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev:test\n```\n\n----------------------------------------\n\nTITLE: Validating Stripe Webhooks\nDESCRIPTION: Code that validates incoming Stripe webhooks by checking the signature header and using Stripe's constructEvent method to ensure the webhook is legitimate.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_one_time_payments_stripe_webhooks_ci_tests_73.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nconst signature = req.headers['stripe-signature'];\n\n// verify signature header is not missing\nif (!signature) {\n  return throwBadRequestException(res);\n}\n\nconst rawBody = await getRawBody(req);\nconst stripe = await getStripeInstance();\n\nconst event = stripe.webhooks.constructEvent(\n  rawBody,\n  signature,\n  webhookSecretKey\n);\n```\n\n----------------------------------------\n\nTITLE: Building and Running React Router Supabase Turbo with a Multi-Stage Dockerfile (Dockerfile)\nDESCRIPTION: This Dockerfile orchestrates a multi-stage build to efficiently package the React Router Supabase Turbo Kit for deployment. In the builder stage, it installs system and Node dependencies, utilizes pnpm for mono-repo management, sets environment variables from Docker args, and builds the project. In the runner stage, it copies artifacts, installs production dependencies, and exposes the appropriate port. This file requires Docker and pnpm, and expects a compatible Node.js mono-repo layout. Adjust ARG/ENV usage and path context according to your needs.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/emails_authentication_checklist_65.md#2025-04-22_snippet_2\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\n\n# Stage 1: Builder\nARG NODE_VERSION=20.10.0\nFROM node:${NODE_VERSION}-slim AS builder\n\n# Set the working directory in the container\nWORKDIR /app\n\n# Install packages needed to build node modules\nRUN apt-get update -qq && \\\n    apt-get install -y python-is-python3 pkg-config build-essential\n\n# Install pnpm\nRUN npm install -g pnpm\n\n# Copy workspace files\nCOPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./\n\n# Install dependencies for the entire workspace\nRUN pnpm install\n\n# Change working directory to web app\nWORKDIR /app/apps/web\n\n# Copy all files\nCOPY . .\n\n# Install dependencies for the web app\nRUN pnpm install\n\n# Define build arguments\nARG NODE_ENV\nARG VITE_SITE_URL\nARG VITE_PRODUCT_NAME\nARG VITE_SITE_TITLE\nARG VITE_SITE_DESCRIPTION\nARG VITE_DEFAULT_THEME_MODE\nARG VITE_DEFAULT_LOCALE\nARG VITE_AUTH_PASSWORD\nARG VITE_AUTH_MAGIC_LINK\nARG CONTACT_EMAIL\nARG VITE_ENABLE_THEME_TOGGLE\nARG VITE_ENABLE_PERSONAL_ACCOUNT_DELETION\nARG VITE_ENABLE_PERSONAL_ACCOUNT_BILLING\nARG VITE_ENABLE_TEAM_ACCOUNTS\nARG VITE_ENABLE_TEAM_ACCOUNT_DELETION\nARG VITE_ENABLE_TEAM_ACCOUNTS_BILLING\nARG VITE_ENABLE_TEAM_ACCOUNTS_CREATION\nARG VITE_ENABLE_NOTIFICATIONS\nARG VITE_REALTIME_NOTIFICATIONS\nARG VITE_SUPABASE_URL\nARG VITE_SUPABASE_ANON_KEY\nARG SUPABASE_SERVICE_ROLE_KEY\nARG VITE_BILLING_PROVIDER\nARG VITE_STRIPE_PUBLISHABLE_KEY\nARG STRIPE_SECRET_KEY\nARG STRIPE_WEBHOOK_SECRET\nARG VITE_CMS_CLIENT\nARG VITE_KEYSTATIC_CONTENT_PATH\nARG VITE_LOCALES_PATH\nARG MAILER_PROVIDER\nARG EMAIL_SENDER\nARG EMAIL_HOST\nARG EMAIL_PORT\nARG EMAIL_USER\nARG EMAIL_PASSWORD\nARG EMAIL_TLS\nARG GADGET_SECRET_KEY\nARG VITE_TEAM_NAVIGATION_STYLE\nARG VITE_USER_NAVIGATION_STYLE\nARG VITE_THEME_COLOR\nARG VITE_THEME_COLOR_DARK\nARG SIGN_IN_PATH\nARG SIGN_UP_PATH\nARG TEAM_ACCOUNTS_HOME_PATH\nARG INVITATION_PAGE_PATH\nARG VITE_DISPLAY_TERMS_AND_CONDITIONS_CHECKBOX\n\n# Set environment variables\nENV NODE_ENV=${NODE_ENV}\nENV VITE_SITE_URL=${VITE_SITE_URL}\nENV VITE_PRODUCT_NAME=${VITE_PRODUCT_NAME}\nENV VITE_SITE_TITLE=${VITE_SITE_TITLE}\nENV VITE_SITE_DESCRIPTION=${VITE_SITE_DESCRIPTION}\nENV VITE_DEFAULT_THEME_MODE=${VITE_DEFAULT_THEME_MODE}\nENV VITE_DEFAULT_LOCALE=${VITE_DEFAULT_LOCALE}\nENV VITE_AUTH_PASSWORD=${VITE_AUTH_PASSWORD}\nENV VITE_AUTH_MAGIC_LINK=${VITE_AUTH_MAGIC_LINK}\nENV CONTACT_EMAIL=${CONTACT_EMAIL}\nENV VITE_ENABLE_THEME_TOGGLE=${VITE_ENABLE_THEME_TOGGLE}\nENV VITE_ENABLE_PERSONAL_ACCOUNT_DELETION=${VITE_ENABLE_PERSONAL_ACCOUNT_DELETION}\nENV VITE_ENABLE_PERSONAL_ACCOUNT_BILLING=${VITE_ENABLE_PERSONAL_ACCOUNT_BILLING}\nENV VITE_ENABLE_TEAM_ACCOUNTS=${VITE_ENABLE_TEAM_ACCOUNTS}\nENV VITE_ENABLE_TEAM_ACCOUNT_DELETION=${VITE_ENABLE_TEAM_ACCOUNT_DELETION}\nENV VITE_ENABLE_TEAM_ACCOUNTS_BILLING=${VITE_ENABLE_TEAM_ACCOUNTS_BILLING}\nENV VITE_ENABLE_TEAM_ACCOUNTS_CREATION=${VITE_ENABLE_TEAM_ACCOUNTS_CREATION}\nENV VITE_ENABLE_NOTIFICATIONS=${VITE_ENABLE_NOTIFICATIONS}\nENV VITE_REALTIME_NOTIFICATIONS=${VITE_REALTIME_NOTIFICATIONS}\nENV VITE_SUPABASE_URL=${VITE_SUPABASE_URL}\nENV VITE_SUPABASE_ANON_KEY=${VITE_SUPABASE_ANON_KEY}\nENV SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}\nENV VITE_BILLING_PROVIDER=${VITE_BILLING_PROVIDER}\nENV VITE_STRIPE_PUBLISHABLE_KEY=${VITE_STRIPE_PUBLISHABLE_KEY}\nENV STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}\nENV STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}\nENV VITE_CMS_CLIENT=${VITE_CMS_CLIENT}\nENV VITE_KEYSTATIC_CONTENT_PATH=${VITE_KEYSTATIC_CONTENT_PATH}\nENV VITE_LOCALES_PATH=${VITE_LOCALES_PATH}\nENV MAILER_PROVIDER=${MAILER_PROVIDER}\nENV EMAIL_SENDER=${EMAIL_SENDER}\nENV EMAIL_HOST=${EMAIL_HOST}\nENV EMAIL_PORT=${EMAIL_PORT}\nENV EMAIL_USER=${EMAIL_USER}\nENV EMAIL_PASSWORD=${EMAIL_PASSWORD}\nENV EMAIL_TLS=${EMAIL_TLS}\nENV GADGET_SECRET_KEY=${GADGET_SECRET_KEY}\nENV VITE_TEAM_NAVIGATION_STYLE=${VITE_TEAM_NAVIGATION_STYLE}\nENV VITE_USER_NAVIGATION_STYLE=${VITE_USER_NAVIGATION_STYLE}\nENV VITE_THEME_COLOR=${VITE_THEME_COLOR}\nENV VITE_THEME_COLOR_DARK=${VITE_THEME_COLOR_DARK}\nENV SIGN_IN_PATH=${SIGN_IN_PATH}\nENV SIGN_UP_PATH=${SIGN_UP_PATH}\nENV TEAM_ACCOUNTS_HOME_PATH=${TEAM_ACCOUNTS_HOME_PATH}\nENV INVITATION_PAGE_PATH=${INVITATION_PAGE_PATH}\nENV VITE_DISPLAY_TERMS_AND_CONDITIONS_CHECKBOX=${VITE_DISPLAY_TERMS_AND_CONDITIONS_CHECKBOX}\n\n# Build the web app\nRUN pnpm run build\n\n# Stage 2: Runner\nFROM node:${NODE_VERSION}-slim AS runner\n\n# Set the working directory in the container\nWORKDIR /app\n\n# Copy built application from the builder stage\nCOPY --from=builder /app/apps/web /app\n\n# Install pnpm in the final stage to ensure it's available for runtime\nRUN npm install -g pnpm\nRUN pnpm install --prod\n\n# Expose the port the app runs on\nEXPOSE 8080\n\n```\n\n----------------------------------------\n\nTITLE: GetCurrentOrganizationResponse Interface Definition\nDESCRIPTION: This TypeScript interface defines the structure of the response returned by the getCurrent method, including organization details and subscription information.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/organization_sdk_organization_subscription_sdk_sdk_25.md#2025-04-22_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\ninterface GetCurrentOrganizationResponse {\n  organization: {\n    id: number;\n    uuid: string;\n    name: string;\n    logoURL?: string | null;\n\n    // your custom fields...\n\n    subscription?: {\n      customerId: string | undefined;\n\n      // your custom fields...\n\n      data: {\n        id: string;\n\n        priceId: string;\n\n        status: Stripe.Subscription.Status;\n        cancelAtPeriodEnd: boolean;\n        currency: string | null;\n\n        interval: string | null;\n        intervalCount: number | null;\n\n        createdAt: string;\n        periodStartsAt: string;\n        periodEndsAt: string;\n        trialStartsAt: string | null;\n        trialEndsAt: string | null;\n\n        // your custom fields ...\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Team Account API with Supabase Client in React Router Loader\nDESCRIPTION: Demonstrates how to import and initialize the Team Account API using a Supabase client in a React Router loader function.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/analytics_api_custom_analytics_provider_google_analytics_provider_57.md#2025-04-22_snippet_43\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createTeamAccountsApi } from '@kit/team-accounts/api';\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\n\nexport async function loader() {\n  const client = getSupabaseServerClient();\n  const api = createTeamAccountsApi(client);\n\n  // use api\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Firestore Task with Custom React Hook in TypeScript\nDESCRIPTION: Defines a custom React hook `useDeleteTask` that accepts a `taskId` string. It uses `useFirestore` and `doc` to reference the specific task document in the 'tasks' collection. The hook returns a memoized callback function that, when called, deletes the Firestore document using `deleteDoc`.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/deploying_production_development_getting_started_environment_variables_13.md#2025-04-22_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useFirestore } from 'reactfire';\nimport { deleteDoc, doc } from 'firebase/firestore';\nimport { useCallback } from 'react';\n\nfunction useDeleteTask(taskId: string) {\n  const firestore = useFirestore();\n  const collection = `tasks`;\n  const task = doc(firestore, collection, taskId);\n\n  return useCallback(() => {\n    return deleteDoc(task);\n  }, [task]);\n}\n\nexport default useDeleteTask;\n```\n\n----------------------------------------\n\nTITLE: Adding New Permission Types\nDESCRIPTION: SQL commands to add new permission types to the existing app_permissions enum.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/marketing_pages_migrations_permissions_and_roles_45.md#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n-- insert new permissions\nalter type public.app_permissions add value 'tasks.write';\nalter type public.app_permissions add value 'tasks.delete';\ncommit;\n```\n\n----------------------------------------\n\nTITLE: Creating Custom oAuth Providers for Firebase Auth\nDESCRIPTION: This code snippet shows how to create custom oAuth providers (Microsoft and Apple) by extending the OAuthProvider class for use with Firebase Auth.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/app_check_auth_flow_auth_hooks_69.md#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nclass MicrosoftAuthProvider extends OAuthProvider {\n  constructor() {\n    super('microsoft.com');\n  }\n}\n\nclass AppleAuthProvider extends OAuthProvider {\n  constructor() {\n    super('apple.com');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting the Default Locale in .env File\nDESCRIPTION: Environment variable configuration example showing how to set the default locale for your application in the .env file.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/initializing_project_introduction_marketing_site_pages_14.md#2025-04-22_snippet_18\n\nLANGUAGE: txt\nCODE:\n```\nDEFAULT_LOCALE=de\n```\n\n----------------------------------------\n\nTITLE: Using useCookieConsent Hook in React Component\nDESCRIPTION: Shows how to use the useCookieConsent hook in a React component. This hook provides the current consent status and methods to update it.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/bordered_navigation_menu_card_button_cookie_banner_60.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useCookieConsent } from '@kit/ui/cookie-banner';\n\nfunction MyComponent() {\n  const { status, accept, reject, clear } = useCookieConsent();\n\n  // Use these values and functions as needed\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Server Action Implementation\nDESCRIPTION: Example of creating a basic server action with the 'use server' directive\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/user_reading_record_creating_record_20.md#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n'use server';\n\nexport async function handleFormSubmit(\n  formData: FormData\n) {\n  // Do something with the form data\n}\n```\n\n----------------------------------------\n\nTITLE: Navigation Configuration with Organization Context\nDESCRIPTION: Configuration for navigation items that includes organization UUID in the paths.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/supabase_not_stopping_tables_not_found_dark_theme_22.md#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nconst NAVIGATION_CONFIG = (organization: string) => ({\n  items: [\n    {\n      label: 'common:dashboardTabLabel',\n      path: getPath(organization, ''),\n      Icon: ({ className }: { className: string }) => {\n        return <Squares2X2Icon className={className} />;\n      },\n      end: true,\n    },\n    {\n      label: 'common:settingsTabLabel',\n      path: getPath(organization, 'settings'),\n      Icon: ({ className }: { className: string }) => {\n        return <Cog8ToothIcon className={className} />;\n      },\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: RLS Policies: Role-Based Task Management\nDESCRIPTION: Set of RLS policies that restrict task updates and deletions to users with admin or owner roles (role >= 1) in the organization.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/supabase_not_stopping_tables_not_found_dark_theme_22.md#2025-04-22_snippet_19\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace policy \"Only the owner can update tasks\"\n    on tasks\n    as restrictive\n    for update\n    to authenticated\n    using (\n        get_current_user_role(organization_id) >= 1\n    ) with check (\n        get_current_user_role(organization_id) >= 1\n    );\n\ncreate or replace policy \"Only the owner can delete tasks\"\n    on tasks\n    as restrictive\n    for delete\n    to authenticated\n    using (\n        get_current_user_role(organization_id) >= 1\n    );\n```\n\n----------------------------------------\n\nTITLE: Starting Firebase Emulator Server\nDESCRIPTION: This command starts the Firebase Emulator server for testing.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/ci_tests_running_tests_testing_limitations_12.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run firebase:emulators:start\n```\n\n----------------------------------------\n\nTITLE: Defining Zod Schema for App Configuration in TypeScript\nDESCRIPTION: A Zod schema definition for application configuration that validates various properties including name, title, description, URL, locale, theme, and colors. The schema includes refinements to ensure HTTPS URLs in production and different theme colors for light and dark modes.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/customization_2.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst AppConfigSchema = z\n  .object({\n    name: z\n      .string({\n        description: `This is the name of your SaaS. Ex. \"Makerkit\"`,\n        required_error: `Please provide the variable NEXT_PUBLIC_PRODUCT_NAME`,\n      })\n      .min(1),\n    title: z\n      .string({\n        description: `This is the default title tag of your SaaS.`,\n        required_error: `Please provide the variable NEXT_PUBLIC_SITE_TITLE`,\n      })\n      .min(1),\n    description: z.string({\n      description: `This is the default description of your SaaS.`,\n      required_error: `Please provide the variable NEXT_PUBLIC_SITE_DESCRIPTION`,\n    }),\n    url: z\n      .string({\n        required_error: `Please provide the variable NEXT_PUBLIC_SITE_URL`,\n      })\n      .url({\n        message: `You are deploying a production build but have entered a NEXT_PUBLIC_SITE_URL variable using http instead of https. It is very likely that you have set the incorrect URL. The build will now fail to prevent you from from deploying a faulty configuration. Please provide the variable NEXT_PUBLIC_SITE_URL with a valid URL, such as: 'https://example.com'`,\n      }),\n    locale: z\n      .string({\n        description: `This is the default locale of your SaaS.`,\n        required_error: `Please provide the variable NEXT_PUBLIC_DEFAULT_LOCALE`,\n      })\n      .default('en'),\n    theme: z.enum(['light', 'dark', 'system']),\n    production: z.boolean(),\n    themeColor: z.string(),\n    themeColorDark: z.string(),\n  })\n  .refine(\n    (schema) => {\n      const isCI = process.env.NEXT_PUBLIC_CI;\n\n      if (isCI ?? !schema.production) {\n        return true;\n      }\n\n      return !schema.url.startsWith('http:');\n    },\n    {\n      message: `Please use a valid HTTPS URL in production.`,\n      path: ['url'],\n    },\n  )\n  .refine(\n    (schema) => {\n      return schema.themeColor !== schema.themeColorDark;\n    },\n    {\n      message: `Please provide different theme colors for light and dark themes.`,\n      path: ['themeColor'],\n    },\n  );\n```\n\n----------------------------------------\n\nTITLE: Checking User Permission in Account\nDESCRIPTION: Demonstrates how to use the hasPermission method to check if a user has a specific permission within an account.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/analytics_api_custom_analytics_provider_google_analytics_provider_57.md#2025-04-22_snippet_49\n\nLANGUAGE: tsx\nCODE:\n```\nconst api = createTeamAccountsApi(client);\n\nconst hasPermission = await api.hasPermission({\n  accountId: 'account-id',\n  userId: 'user-id',\n  permission: 'billing.manage',\n});\n```\n\n----------------------------------------\n\nTITLE: Importing and Using withAuthedUser in Next.js TypeScript\nDESCRIPTION: The `withAuthedUser` function is used to require authentication for accessing an API endpoint, ensuring that unauthorized users receive a `401` error. This example illustrates how to integrate it using `withPipe` alongside `withExceptionFilter` to handle exceptions gracefully. Requires `next`, `~/core/middleware/with-authed-user`, and other middleware modules.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/adding_admin_users_admin_overview_admin_1.md#2025-04-22_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nimport { NextApiRequest,NextApiResponse } from \"next\";\n\nimport { withAuthedUser } from '~/core/middleware/with-authed-user';\nimport { withPipe } from '~/core/middleware/with-pipe';\nimport { withExceptionFilter } from '~/core/middleware/with-exception-filter';\n\nexport default function helloWorld(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n  const handler = withPipe(\n    withAuthedUser,\n    (req, res) => {\n      res.status(200).json({ message: 'Hello World!' });\n    }\n  );\n\n  return withExceptionFilter(req, res)(handler);\n}\n```\n\n----------------------------------------\n\nTITLE: Example Blog Post Structure in MDX\nDESCRIPTION: Template showing the required metadata and structure for creating a blog post using MDX format.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/architecture_auth_overview_auth_setup_29.md#2025-04-22_snippet_2\n\nLANGUAGE: mdx\nCODE:\n```\n---\n\ntitle: Lorem Ipsum\ndate: 2023-09-23\nlive: true\ndescription: \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\"\nimage: \"/assets/images/posts/lorem-ipsum.webp\"\n---\n```\n\n----------------------------------------\n\nTITLE: Add Custom Repository URL as Origin\nDESCRIPTION: Sets up a personal repository URL as the origin remote in the local Git configuration. This allows for pushing changes to a personal fork.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/cloudflare_production_environment_variables_supabase_47.md#2025-04-22_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\ngit remote add origin <your-repository-url>\n```\n\n----------------------------------------\n\nTITLE: Retrieving CSRF Token in Remix\nDESCRIPTION: Demonstrates how to use the useGetCsrfToken hook to retrieve the CSRF token for API requests.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/setting_up_firebase_custom_fetch_fetching_data_firestore_70.md#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nconst getCsrfToken = useGetCsrfToken();\nconst csrfToken = getCsrfToken();\n\nconsole.log(csrfToken) // token\n```\n\n----------------------------------------\n\nTITLE: Conceptualizing Next.js Page and Layout Structure (JSX)\nDESCRIPTION: This JSX snippet represents the nesting of a `Page` component within a `Layout` component in a Next.js application, corresponding to a file structure like `home/layout.tsx` and `home/page.tsx`. It visualizes how Next.js structures pages and layouts, where `layout.tsx` typically wraps `page.tsx`.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/realtime_updates_server_components_7.md#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<Layout>\n  <Page />\n</Layout>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Create Task Modal in Next.js\nDESCRIPTION: A reusable modal component that wraps the TaskForm component to provide a popup interface for task creation. The component accepts children as triggers to open the modal and uses a pre-defined Modal component from the core UI library.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/running_project_supabase_data_fetching_supabase_data_writing_27.md#2025-04-22_snippet_26\n\nLANGUAGE: tsx\nCODE:\n```\nimport Modal from '~/core/ui/Modal';\nimport TaskForm from './TaskForm';\n\nfunction CreateTaskModal(props: React.PropsWithChildren) {\n  return (\n    <Modal heading={`Create Task`} Trigger={props.children}>\n      <TaskForm />\n    </Modal>\n  );\n}\n\nexport default CreateTaskModal;\n```\n\n----------------------------------------\n\nTITLE: Configuring Sentry Environment Variables\nDESCRIPTION: Environment variables required to enable Sentry monitoring in the Next.js Supabase SaaS kit. These variables specify the monitoring provider and the Sentry DSN.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/sentry_monitoring_notifications_configuration_51.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nNEXT_PUBLIC_MONITORING_PROVIDER=sentry\nNEXT_PUBLIC_SENTRY_DSN=your_dsn\n```\n\n----------------------------------------\n\nTITLE: Credit Consumption API Implementation in TypeScript\nDESCRIPTION: TypeScript function to consume credits after an API call, using Supabase client.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/user_workspace_api_api_billing_api_37.md#2025-04-22_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nexport function async consumeApi(accountId: string) {\n  // Call the OpenAI API to get the usage\n  const { usage, data } = await callOpenAIApi();\n\n  const client = getSupabaseRouteHandlerClient({\n    admin: true,\n  });\n\n  await client.rpc('consume_credits', {\n    account_id: accountId,\n    tokens: usage,\n  });\n\n  return data;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Subscriptions Table in Supabase\nDESCRIPTION: SQL schema for subscriptions table that stores Stripe subscription data including pricing, status, and period information.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/ui_hooks_mdx_15.md#2025-04-22_snippet_19\n\nLANGUAGE: sql\nCODE:\n```\ncreate table subscriptions (\n  id text not null primary key,\n  price_id text not null,\n  status subscription_status not null,\n  currency text,\n  interval text,\n  interval_count int,\n  created_at timestamptz,\n  period_starts_at timestamptz,\n  period_ends_at timestamptz,\n  trial_starts_at timestamptz,\n  trial_ends_at timestamptz\n);\n```\n\n----------------------------------------\n\nTITLE: Marking Invited Users as Onboarded in Supabase\nDESCRIPTION: Code snippet that updates user metadata to mark them as onboarded when accepting a team invitation using Supabase admin client.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/waitlist_plugin_plugins_drizzle_supabase_52.md#2025-04-22_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\nawait adminClient.auth.admin.updateUserById(user.id, {\n  app_metadata: {\n    onboarded: true,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Example Question MDX Template\nDESCRIPTION: Template for creating Q&A content for the chatbot using MDX format.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_configuration_stripe_one_time_payments_stripe_webhooks_82.md#2025-04-22_snippet_11\n\nLANGUAGE: mdx\nCODE:\n```\n---\n\nquestion: \"What is your refund policy?\"\n---\n\n\nWe offer a 30-day money-back guarantee. If you're not happy with our product,\nwe will refund you.\n```\n\n----------------------------------------\n\nTITLE: Component Import Example\nDESCRIPTION: TypeScript/React example showing how to import an exported Shadcn UI component.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/team_account_sidebar_configuration_configuration_cms_api_92.md#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Avatar } from '@kit/ui/avatar';\n```\n\n----------------------------------------\n\nTITLE: Configuring Baselime Monitoring Environment Variables\nDESCRIPTION: Environment variables needed to configure Baselime as the monitoring provider for capturing exceptions and performance metrics.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/introduction_migration_from_remix_navigating_codebase_67.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nVITE_BASELIME_KEY=your_key\nVITE_MONITORING_PROVIDER=baselime\n```\n\n----------------------------------------\n\nTITLE: Using Supabase in Server Components (Deprecated)\nDESCRIPTION: This deprecated code shows how to use the getSupabaseServerComponentClient function to access Supabase in Next.js Server Components. This approach is for older versions of the kit and will be removed in future versions.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/csrf_protection_react_query_route_handlers_43.md#2025-04-22_snippet_27\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getSupabaseServerComponentClient } from '@kit/supabase/server-component-client';\n\nexport default async function TasksPage() {\n  const supabase = getSupabaseServerComponentClient();\n\n  const { data, error } = await supabase.from('users').select('*');\n\n  return <TasksList tasks={data} />\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Analytics Provider in TypeScript\nDESCRIPTION: Example of updating the analytics configuration to include a custom provider in a Makerkit project.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/analytics_api_custom_analytics_provider_google_analytics_provider_57.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAnalyticsManager } from './analytics-manager';\nimport { MyCustomAnalyticsService } from './my-custom-analytics-service';\nimport type { AnalyticsManager } from './types';\n\nexport const analytics: AnalyticsManager = createAnalyticsManager({\n  providers: {\n    myCustom: (config) => new MyCustomAnalyticsService(config),\n    null: () => NullAnalyticsService,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Marketing Page in Next.js App Router (TSX)\nDESCRIPTION: Illustrates how to add a new public marketing page (e.g., `/about`) within the `(site)` route group in a Next.js App Router application. Create a `page.tsx` file (e.g., `src/app/(site)/about/page.tsx`) exporting a simple React functional component. This page automatically inherits the shared layout defined in `src/app/(site)/layout.tsx`.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/branding_environment_variables_setup_project_configuration_21.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nfunction AboutPage() {\n  return <div>About page</div>;\n}\n\nexport default AboutPage;\n```\n\n----------------------------------------\n\nTITLE: Accessing User Session with useUserSession Hook in React\nDESCRIPTION: This snippet demonstrates how to use the useUserSession hook to access the current user's authentication and Firestore data in a React component. The hook returns a UserSession object containing both authentication state and user-specific data.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/call_api_routes_from_client_csrf_token_guarding_api_routes_7.md#2025-04-22_snippet_26\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useUserSession } from '~/core/hooks/use-user-session';\n\nconst userSession = useUserSession();\n```\n\n----------------------------------------\n\nTITLE: Using Translations in Server Components\nDESCRIPTION: Example of implementing translations in server components using withI18n wrapper and Trans component.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/text_editor_plugin_waitlist_plugin_plugins_98.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { withI18n } from '~/lib/i18n/with-i18n';\n\nconst Page = () => {\n  return <div>My page</div>;\n};\n\nexport default withI18n(Page);\n```\n\n----------------------------------------\n\nTITLE: Application Configuration with Environment Variables in React Router Supabase\nDESCRIPTION: Code snippet showing how application configuration is set up using environment variables and validated with Zod schema. This configures core application settings like name, URL, and theme.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stepper_components_application_configuration_61.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst appConfig = AppConfigSchema.parse({\n  name: import.meta.env.VITE_PRODUCT_NAME,\n  title: import.meta.env.VITE_SITE_TITLE,\n  description: import.meta.env.VITE_SITE_DESCRIPTION,\n  url: import.meta.env.VITE_SITE_URL,\n  locale: import.meta.env.VITE_DEFAULT_LOCALE,\n  theme: import.meta.env.VITE_DEFAULT_THEME_MODE,\n  themeColor: import.meta.env.VITE_THEME_COLOR,\n  themeColorDark: import.meta.env.VITE_THEME_COLOR_DARK,\n  production,\n});\n```\n\n----------------------------------------\n\nTITLE: Running Supabase Migrations and Type Generation in Bash\nDESCRIPTION: These Bash commands reset the Supabase database to its initial state, apply migrations, and generate TypeScript types for the updated database schema. This process is crucial after making changes to the database structure.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/database_4.md#2025-04-22_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\npnpm run supabase:web:reset\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm run supabase:web:typegen\n```\n\n----------------------------------------\n\nTITLE: Adding Stripe Checkout Addons in TypeScript\nDESCRIPTION: Implements the addition of addons to Stripe checkout line items during checkout creation.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_billing_checkout_addons_subscription_entitlements_54.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nif (params.addons.length > 0) {\n  lineItems.push(\n    ...params.addons.map((addon) => ({\n      price: addon.planId,\n      quantity: 1,\n    })),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Theme Switcher in Configuration\nDESCRIPTION: Code snippet showing how to disable the theme switcher feature by modifying the features configuration.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/project_structure_running_project_tailwind_css_75.md#2025-04-22_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\n{\n  ...\n  features: {\n    enableThemeSwitcher: false,\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Stripe CLI with Docker for Webhook Testing\nDESCRIPTION: This snippet demonstrates how to use the Stripe CLI within Docker to login to your Stripe account for local webhook testing. This is useful during development to test billing functionality.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/paddle_per_seat_billing_stripe_90.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm -it --name=stripe -v ~/.config/stripe:/root/.config/stripe stripe/stripe-cli:latest login\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Analytics Service in TypeScript\nDESCRIPTION: Sample implementation of a custom analytics service that implements the AnalyticsService interface with methods for initialization, user identification, page view tracking, and event tracking.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/custom_analytics_provider_google_analytics_provider_posthog_analytics_provider_36.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AnalyticsService } from './path-to-types';\n\nclass MyCustomAnalyticsService implements AnalyticsService {\n  async initialize() {\n    // Initialize your analytics service\n  }\n\n  async identify(userId: string, traits?: Record<string, string>) {\n    // Implement user identification\n  }\n\n  async trackPageView(url: string) {\n    // Implement page view tracking\n  }\n\n  async trackEvent(eventName: string, eventProperties?: Record<string, string | string[]>) {\n    // Implement event tracking\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing React.Email Template Component\nDESCRIPTION: A React email template implementation for team invitations using React.Email components with TypeScript and Tailwind CSS styling.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/development_authentication_emails_email_configuration_94.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  Body,\n  Button,\n  Column,\n  Container,\n  Head,\n  Heading,\n  Hr,\n  Html,\n  Img,\n  Link,\n  Preview,\n  Row,\n  Section,\n  Tailwind,\n  Text,\n  render,\n} from '@react-email/components';\n\ninterface Props {\n  teamName: string;\n  teamLogo?: string;\n  inviter: string | undefined;\n  invitedUserEmail: string;\n  link: string;\n  productName: string;\n}\n\nexport function renderInviteEmail(props: Props) {\n  const previewText = `Join ${props.invitedUserEmail} on ${props.productName}`;\n\n  return render(\n    <Html>\n      <Head />\n      <Preview>{previewText}</Preview>\n\n      <Tailwind>\n        <Body className=\"mx-auto my-auto bg-gray-50 font-sans\">\n          <Container className=\"mx-auto my-[40px] w-[465px] rounded-lg border border-solid border-[#eaeaea] bg-white p-[20px]\">\n            <Heading className=\"mx-0 my-[30px] p-0 text-center text-[24px] font-normal text-black\">\n              Join <strong>{props.teamName}</strong> on{' '}\n              <strong>{props.productName}</strong>\n            </Heading>\n            <Text className=\"text-[14px] leading-[24px] text-black\">\n              Hello {props.invitedUserEmail},\n            </Text>\n            <Text className=\"text-[14px] leading-[24px] text-black\">\n              <strong>{props.inviter}</strong> has invited you to the{' '}\n              <strong>{props.teamName}</strong> team on{' '}\n              <strong>{props.productName}</strong>.\n            </Text>\n            {props.teamLogo && (\n              <Section>\n                <Row>\n                  <Column align=\"center\">\n                    <Img\n                      className=\"rounded-full\"\n                      src={props.teamLogo}\n                      width=\"64\"\n                      height=\"64\"\n                    />\n                  </Column>\n                </Row>\n              </Section>\n            )}\n            <Section className=\"mb-[32px] mt-[32px] text-center\">\n              <Button\n                className=\"rounded bg-[#000000] px-[20px] py-[12px] text-center text-[12px] font-semibold text-white no-underline\"\n                href={props.link}\n              >\n                Join {props.teamName}\n              </Button>\n            </Section>\n            <Text className=\"text-[14px] leading-[24px] text-black\">\n              or copy and paste this URL into your browser:{' '}\n              <Link href={props.link} className=\"text-blue-600 no-underline\">\n                {props.link}\n              </Link>\n            </Text>\n            <Hr className=\"mx-0 my-[26px] w-full border border-solid border-[#eaeaea]\" />\n            <Text className=\"text-[12px] leading-[24px] text-[#666666]\">\n              This invitation was intended for{' '}\n              <span className=\"text-black\">{props.invitedUserEmail}</span>.\n            </Text>\n          </Container>\n        </Body>\n      </Tailwind>\n    </Html>,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Mutation Hook in a React Component\nDESCRIPTION: This TSX snippet demonstrates the usage of the `useCreateSession` custom hook within a React functional component. It destructures `trigger`, `error`, `isMutating`, and `data` from the hook's return value to manage the API request lifecycle, display loading/error/success feedback, and trigger the sign-in API call via a `SignInForm` component's `onSignIn` prop.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/ci_tests_running_tests_testing_limitations_12.md#2025-04-22_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCreateSession } from '~/core/hooks/use-create-session';\n\nfunction Component() {\n  const { trigger, error, isMutating, data } = useCreateSession();\n\n  return (\n    <>\n      { isMutating ? `Loading...` : null }\n      { error ? `Error :(` : null }\n      { data ? `Yay, success!` : null }\n\n      <SignInForm onSignIn={(idToken) => trigger({ idToken })} />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing TasksTableContainer Component in React\nDESCRIPTION: This component wraps the tasks table and includes a search input and a button to create a new task. It takes tasks data, pagination information, and search query as props.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/supabase_data_fetching_supabase_data_writing_tailwind_css_86.md#2025-04-22_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nfunction TasksTableContainer({\n  tasks,\n  pageCount,\n  pageIndex,\n  pageSize,\n  query,\n}: React.PropsWithChildren<{\n  tasks: Task[];\n  pageCount: number;\n  pageIndex: number;\n  pageSize: number;\n  query?: string;\n}>) {\n  return (\n    <div className={'flex flex-col space-y-4'}>\n      <div className={'flex space-x-4 justify-between items-center'}>\n        <div className={'flex'}>\n          <CreateTaskModal>\n            <Button color={'transparent'}>\n              <span className={'flex space-x-2 items-center'}>\n                <PlusCircleIcon className={'w-4'} />\n\n                <span>New Task</span>\n              </span>\n            </Button>\n          </CreateTaskModal>\n        </div>\n\n        <Form className={'w-full max-w-sm'} method={'GET'}>\n          <TextField.Input\n            defaultValue={query}\n            name={'query'}\n            className={'w-full'}\n            placeholder={'Search for task...'}\n          />\n        </Form>\n      </div>\n\n      <TasksTable\n        pageSize={pageSize}\n        pageIndex={pageIndex}\n        pageCount={pageCount}\n        tasks={tasks}\n      />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating RLS Policy for Reading Plans in Supabase\nDESCRIPTION: A SQL policy that allows all authenticated users to read the plans table. This enables users to view available subscription plans.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/theming_how_to_version_0_6_0_81.md#2025-04-22_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy \"Allow all authenticated users to read plans\"\n    on plans\n    as restrictive\n    for select\n    to authenticated\n    using (true);\n```\n\n----------------------------------------\n\nTITLE: Loading User Accounts with Account API (TypeScript)\nDESCRIPTION: Demonstrates fetching an array of user accounts associated with the current user via the `loadUserAccounts` method. Each returned account object includes `label`, `value`, and `image` properties.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/google_analytics_provider_posthog_analytics_provider_umami_analytics_provider_88.md#2025-04-22_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\nconst api = createAccountsApi(client);\nconst accounts = await api.loadUserAccounts();\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication Strategy in TypeScript\nDESCRIPTION: Configuration code showing how to set up different authentication strategies including email/password, phone number, email link and OAuth providers in Supabase.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/updating_sidebar_menu_change_auth_strategy_setup_oauth_79.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport type { Provider } from '@supabase/gotrue-js/src/lib/types';\n\n// in your configuration JSON\nauth: {\n  // ensure this is the same as your Supabase project. By default - it's true\n  requireEmailConfirmation:\n    process.env.NEXT_PUBLIC_REQUIRE_EMAIL_CONFIRMATION === 'true',\n  // NB: Enable the providers below in the Supabase Console\n  // in your production project\n  providers: {\n    emailPassword: true,\n    phoneNumber: false,\n    emailLink: false,\n    oAuth: ['google'] as Provider[]\n  },\n},\n```\n\n----------------------------------------\n\nTITLE: Calling Custom Server Action from Client Component with useTransition\nDESCRIPTION: A React component that demonstrates how to call a custom server action imperatively using the useTransition hook for improved user experience during the asynchronous operation.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/server_actions_uploading_data_to_storage_writing_data_to_supabase_30.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {FormEventHandler, useCallback, useTransition } from \"react\";\n\nfunction TaskForm() {\n  const [isPending, startTransition] = useTransition();\n\n  const onSubmit: FormEventHandler = useCallback(e => {\n    e.preventDefault();\n\n    const data = new FormData(e.target as HTMLFormElement);\n    const taskName = data.get(\"name\") as string;\n\n    startTransition(async () => {\n      await insertNewTask({\n        task: {\n          name: taskName,\n        },\n      });\n    });\n  });\n\n  return (\n    <form onSubmit={onSubmit}>\n    ...\n    </form>\n  );\n}\n\nexport default TaskForm;\n```\n\n----------------------------------------\n\nTITLE: Creating Task Table Container Components in Next.js\nDESCRIPTION: Two components for displaying tasks: TasksTableContainer for showing tasks with search and creation functionality, and TasksEmptyState for displaying a message when no tasks exist. These components are designed to provide a responsive and user-friendly interface for task management.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/running_project_supabase_data_fetching_supabase_data_writing_27.md#2025-04-22_snippet_27\n\nLANGUAGE: tsx\nCODE:\n```\nfunction TasksTableContainer({\n  tasks,\n  pageCount,\n  pageIndex,\n  query,\n}: React.PropsWithChildren<{\n  tasks: Task[];\n  pageCount: number;\n  pageIndex: number;\n  query?: string;\n}>) {\n  return (\n    <div className={'flex flex-col space-y-4'}>\n      <div className={'flex space-x-4 justify-between items-center'}>\n        <div className={'flex'}>\n          <CreateTaskModal>\n            <Button color={'transparent'}>\n              <span className={'flex space-x-2 items-center'}>\n                <PlusCircleIcon className={'w-4'} />\n\n                <span>New Task</span>\n              </span>\n            </Button>\n          </CreateTaskModal>\n        </div>\n\n        <SearchTaskInput query={query} />\n      </div>\n\n      <TasksTable pageIndex={pageIndex} pageCount={pageCount} tasks={tasks} />\n    </div>\n  );\n}\n\nfunction TasksEmptyState() {\n  return (\n    <div className={'flex flex-col space-y-8 p-4'}>\n      <div className={'flex flex-col'}>\n        <Heading type={2}>\n          <span className={'font-semibold'}>\n            Hey, it looks like you don&apos;t have any tasks yet... 🤔\n          </span>\n        </Heading>\n\n        <Heading type={4}>\n          Create your first task by clicking on the button below\n        </Heading>\n      </div>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Captcha Token in Client Components - TypeScript/TSX\nDESCRIPTION: Illustrates how to obtain a captcha token on the client side by using the 'useCaptchaToken' React hook from Makerkit's auth package. This token is required to be included in requests to captcha-protected server actions. The snippet shows the basic structure of a React component utilizing the hook; additional logic would include submitting the token with requests.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/csrf_protection_react_query_route_handlers_43.md#2025-04-22_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCaptchaToken } from '@kit/auth/captcha/client';\n\nfunction Component() {\n  const captchaToken = useCaptchaToken();\n  \n  // ... your code here\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Function to Check Account Membership\nDESCRIPTION: Database function that checks if the current user is a member of an account. Optionally checks for a specific role if account_role parameter is provided.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/adding_turborepo_package_approaching_local_development_database_functions_44.md#2025-04-22_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\npublic.has_role_on_account(\n  account_id uuid,\n  account_role varchar(50) default null\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring i18next for Remix Translations\nDESCRIPTION: Configuration setup for remix-i18next showing how to define supported languages and default settings for internationalization.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/translations_updating_latest_version_tutorials_87.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst i18Config = {\n  fallbackLanguage: DEFAULT_LOCALE,\n  supportedLanguages: [DEFAULT_LOCALE, 'es'],\n  defaultNS: ['common', 'auth', 'organization', 'profile', 'subscription'],\n  react: { useSuspense: false },\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Super Admin Privileges in Supabase\nDESCRIPTION: SQL query to update a user's metadata in Supabase to grant super-admin role, which provides access to the admin panel.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/translations_updating_latest_version_tutorials_87.md#2025-04-22_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE auth.users SET raw_app_meta_data = raw_app_meta_data || '{\"role\": \"super-admin\"}' WHERE id='<user_id>';\n```\n\n----------------------------------------\n\nTITLE: Starting Stripe Webhook Listener\nDESCRIPTION: Command to start the Stripe webhook listener for testing the billing system locally, routing webhooks to the local machine.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/introduction_migration_from_remix_navigating_codebase_67.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npnpm run stripe:listen\n```\n\n----------------------------------------\n\nTITLE: Running Cypress E2E Tests in Headless Mode\nDESCRIPTION: Command to run Cypress end-to-end tests in headless mode for CI/CD pipelines or automated testing.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/setting_up_firebase_custom_fetch_fetching_data_firestore_70.md#2025-04-22_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\nnpm run cypress:headless\n```\n\n----------------------------------------\n\nTITLE: Starting Firebase Emulators for Local Development\nDESCRIPTION: Command to run Firebase emulators that provide local versions of Firebase services like Authentication, Firestore, and Storage for development and testing.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/initializing_project_introduction_marketing_site_pages_14.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nnpm run firebase:emulators:start\n```\n\n----------------------------------------\n\nTITLE: Importing the EnhanceAction Utility - TypeScript/TSX\nDESCRIPTION: Illustrates the import statement required to utilize the 'enhanceAction' utility from Makerkit. This utility is necessary for extending server actions with authentication, input validation, captcha, and monitoring capabilities. No parameters or outputs are involved in this import-only snippet.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/csrf_protection_react_query_route_handlers_43.md#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { enhanceAction } from '@kit/next/actions';\n```\n\n----------------------------------------\n\nTITLE: Query Usage Schema for Billing\nDESCRIPTION: Defines the schema for querying billing usage with time-based and page-based filtering options.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/api_billing_api_billing_schema_58.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst TimeFilter = z.object(\n  {\n    startTime: z.number(),\n    endTime: z.number(),\n  },\n  {\n    description: `The time range to filter the usage records. Used for Stripe`,\n  },\n);\n\nconst PageFilter = z.object(\n  {\n    page: z.number(),\n    size: z.number(),\n  },\n  {\n    description: `The page and size to filter the usage records. Used for LS`,\n  },\n);\n\nexport const QueryBillingUsageSchema = z.object({\n  id: z.string({\n    description:\n      'The id of the usage record. For Stripe a meter ID, for LS a subscription item ID.',\n  }),\n  customerId: z.string({\n    description: 'The id of the customer in the billing system',\n  }),\n  filter: z.union([TimeFilter, PageFilter]),\n});\n```\n\n----------------------------------------\n\nTITLE: Approving Waitlist Users in Supabase SQL\nDESCRIPTION: SQL query to approve users in the waitlist table based on their creation date. This can be used to batch approve users who signed up before a certain date.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/waitlist_plugin_plugins_drizzle_supabase_52.md#2025-04-22_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nupdate public.waitlist\nset approved = true\nwhere created_at < '2024-07-01';\n```\n\n----------------------------------------\n\nTITLE: Basic Server Action Implementation\nDESCRIPTION: Shows the basic structure of implementing a server action for form handling.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_webhooks_locally_using_lemon_squeezy_server_actions_csrf_33.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n'use server';\n\nexport async function handleFormSubmit(\n  formData: FormData\n) {\n  // Do something with the form data\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dark Mode Colors in Tailwind CSS\nDESCRIPTION: This snippet shows how to configure the dark mode color palette in Tailwind CSS by spreading the slate color palette into the dark object. The dark color will be slate.950 and the foreground will be slate.100.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_one_time_payments_stripe_webhooks_payments_35.md#2025-04-22_snippet_9\n\nLANGUAGE: js\nCODE:\n```\ndark: {\n  ...colors.slate,\n  DEFAULT: colors.slate[950],\n  foreground: colors.slate[100],\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Single Content Item by Slug in TypeScript\nDESCRIPTION: Demonstrates how to use the getContentItemBySlug function to retrieve a single content item from a specific collection using its slug.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/team_account_sidebar_configuration_configuration_cms_api_92.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createCmsClient } from '@kit/cms';\n\nconst client = await createCmsClient();\n\n// Fetch a single content item\nconst item = await client.getContentItemBySlug({\n  slug: 'hello-world',\n  collection: 'posts'\n});\n```\n\n----------------------------------------\n\nTITLE: React Component with SWR Data Fetching\nDESCRIPTION: Example React component implementing SWR hook with loading and error states.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/api_routes_vs_server_actions_api_routes_call_api_routes_from_client_19.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfunction MyComponent() {\n  const { data, isLoading, error } = useFetchData();\n\n  if (isLoading) {\n    return <p>Loading...</p>;\n  }\n\n  if (error) {\n    return <p>Error...</p>;\n  }\n\n  return <div>{data.hello}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Plugin Workspace Dependencies\nDESCRIPTION: Command to add the analytics provider as a workspace dependency to the project.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/custom_analytics_provider_google_analytics_provider_posthog_analytics_provider_36.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpm add \"@kit/google-analytics@workspace:*\" --filter \"@kit/analytics\" -D\n```\n\n----------------------------------------\n\nTITLE: Onboarding Table SQL Migration\nDESCRIPTION: SQL migration script to create onboarding table with RLS policies and necessary permissions for authenticated users.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/waitlist_plugin_plugins_drizzle_supabase_52.md#2025-04-22_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\ncreate table if not exists public.onboarding (\n  id uuid primary key default uuid_generate_v4(),\n  account_id uuid references public.accounts(id) not null unique,\n  data jsonb default '{}',\n  completed boolean default false,\n  created_at timestamp with time zone default current_timestamp,\n  updated_at timestamp with time zone default current_timestamp\n);\n\nrevoke all on public.onboarding from public, service_role;\n\ngrant select, update, insert on public.onboarding to authenticated;\ngrant select, delete on public.onboarding to service_role;\n\nalter table onboarding enable row level security;\n\ncreate policy read_onboarding\n    on public.onboarding\n    for select\n    to authenticated\n    using (account_id = (select auth.uid()));\n\ncreate policy insert_onboarding\n    on public.onboarding\n    for insert\n    to authenticated\n    with check (account_id = (select auth.uid()));\n\ncreate policy update_onboarding\n    on public.onboarding\n    for update\n    to authenticated\n    using (account_id = (select auth.uid()))\n    with check (account_id = (select auth.uid()));\n```\n\n----------------------------------------\n\nTITLE: Applying Filters with ClientDataLoader\nDESCRIPTION: This snippet demonstrates how to use the 'where' property of the 'ClientDataLoader' component to filter the data from the Supabase database. It uses the 'textSearch' operator to filter rows by matching text in specific columns. The data retrieval respects the specified filter conditions before being rendered by the component logic.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/ai_text_editor_cookie_banner_feedback_popup_24.md#2025-04-22_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ClientDataLoader } from '@makerkit/data-loader-supabase-nextjs';\n\n<ClientDataLoader\n  client={client} // the Supabase Client\n  table=\"organizations\"\n  select=\"*\"\n  where={{\n    name: {\n      textSearch: `'supabase'`,\n    }\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Accessing Dynamic URL Parameters in Next.js Pages\nDESCRIPTION: Shows how to access dynamic parameters from the URL in Next.js pages using the params object passed to the page component.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/organization_sdk_organization_subscription_sdk_sdk_25.md#2025-04-22_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\ninterface PageData {\n  params: {\n    organization: string;\n    project: string;\n  }\n}\n\nfunction Page(data: PageData) {\n  // data.params.organization\n}\n```\n\n----------------------------------------\n\nTITLE: Using the IfHasPermissions Component in Remix Supabase\nDESCRIPTION: An example of how to use the IfHasPermissions component to conditionally render UI elements based on user permissions. The component automatically injects the current user's role.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/theming_how_to_version_0_6_0_81.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<IfHasPermissions\n  condition={(currentUserRole) =>\n    canInviteUser(currentUserRole, targetUserRole)\n  }\n>\n  <InviteUserComponent />\n</IfHasPermissions>\n```\n\n----------------------------------------\n\nTITLE: Using a Zod Schema to Parse Action Payload (TypeScript)\nDESCRIPTION: Demonstrates how to use the `DeleteAccountFormSchema` defined with Zod to parse and validate the JSON payload received within an action handler. If validation fails, Zod throws an error.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/creating_your_own_cms_client_keystatic_wordpress_62.md#2025-04-22_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\n// In your action\nconst data = DeleteAccountFormSchema.parse(json.payload);\n\n```\n\n----------------------------------------\n\nTITLE: Organization Hooks Usage - TypeScript\nDESCRIPTION: Examples of using custom React hooks for organization management. Shows usage of useCurrentOrganization and useIsSubscriptionActive hooks.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/migrations_extending_organizations_organization_hooks_10.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useCurrentOrganization } from '~/lib/organizations/hooks/use-current-organization';\n\nconst organzation = useCurrentOrganization();\n```\n\n----------------------------------------\n\nTITLE: Client-side Task Creation Form with SWR\nDESCRIPTION: React component implementing a form that creates tasks using SWR mutation hook. Includes form validation and navigation.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/server_actions_uploading_data_to_storage_writing_data_to_supabase_30.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useRouter } from 'next/router';\nimport type { FormEventHandler } from 'react';\nimport { useCallback } from 'react';\nimport { toast } from 'sonner';\n\nimport TextField from '~/core/ui/TextField';\nimport Button from '~/core/ui/Button';\nimport useCreateTaskMutation from '~/lib/tasks/hooks/use-create-task';\n\nimport useCurrentOrganization from '~/lib/organizations/hooks/use-current-organization';\n\nconst CreateTaskForm = () => {\n  const createTaskMutation = useCreateTaskMutation();\n  const router = useRouter();\n  const organization = useCurrentOrganization();\n  const organizationId = organization?.id as number;\n\n  const onCreateTask: FormEventHandler<HTMLFormElement> = useCallback(\n    async (event) => {\n      event.preventDefault();\n\n      const target = event.currentTarget;\n      const data = new FormData(target);\n      const name = data.get('name') as string;\n      const dueDate = (data.get('dueDate') as string) || getDefaultDueDate();\n\n      if (name.trim().length < 3) {\n        toast.error('Task name must be at least 3 characters long');\n\n        return;\n      }\n\n      const task = {\n        organizationId,\n        name,\n        dueDate,\n        done: false,\n      };\n\n      // create task\n      await createTaskMutation.trigger(task);\n\n      // redirect to /tasks\n      return router.push(`/tasks`);\n    },\n    [router, createTaskMutation, organizationId]\n  );\n\n  return (\n    <form onSubmit={onCreateTask}>\n      <div>\n        <TextField.Label>\n          Name\n          <TextField.Input\n            required\n            name={'name'}\n            placeholder={'ex. Launch on IndieHackers'}\n          />\n          <TextField.Hint>Hint: whatever you do, ship!</TextField.Hint>\n        </TextField.Label>\n\n        <TextField.Label>\n          Due date\n          <TextField.Input name={'dueDate'} type={'date'} />\n        </TextField.Label>\n\n        <div>\n          <Button>Create Task</Button>\n        </div>\n      </div>\n    </form>\n  );\n};\n\nexport default CreateTaskForm;\n\nfunction getDefaultDueDate() {\n  const date = new Date();\n  date.setDate(date.getDate() + 1);\n  date.setHours(23, 59, 59);\n\n  return date.toDateString();\n}\n```\n\n----------------------------------------\n\nTITLE: Pushing Database Migrations to Remote Supabase\nDESCRIPTION: Command to push local database migrations to your remote Supabase instance. This resolves 'tables not found' errors in cloud deployments by ensuring remote database schema is up to date.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/branding_environment_variables_setup_project_configuration_80.md#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n./node_modules/.bin/supabase db push\n```\n\n----------------------------------------\n\nTITLE: Scrolling to Bottom on Data Change with useEffect in React\nDESCRIPTION: This `useEffect` hook scrolls the referenced `scrollingDiv` element to its bottom whenever the `data` dependency changes. This is commonly used in chat or message interfaces to ensure the latest message is visible.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/data_fetching_3.md#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nuseEffect(() => {\n  if (scrollingDiv.current) {\n    scrollingDiv.current.scrollTo({\n      top: scrollingDiv.current.scrollHeight,\n    });\n  }\n}, [data]);\n```\n\n----------------------------------------\n\nTITLE: Creating a New Marketing Page Component in Next.js (TypeScript)\nDESCRIPTION: Defines a new static page under 'pages/about.tsx' in a Next.js project, exporting a React component and attaching localization translation props via getStaticProps. Requires Next.js, TypeScript, and the 'withTranslationProps' helper. Input: page request at /about, Output: renders About page with localization. Limits: requires correct project directory and translation setup.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/initializing_project_introduction_marketing_site_pages_14.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { GetStaticPropsContext } from \"next\";\nimport { withTranslationProps } from \"~/lib/props/with-translation-props\";\n\nfunction About() {\n  return <div>About</div>;\n}\n\nexport function getStaticProps(\n  context: GetStaticPropsContext\n) {\n  return withTranslationProps(context);\n}\n\nexport default About;\n```\n\n----------------------------------------\n\nTITLE: Basic API Consumption Function Signature\nDESCRIPTION: Function signature for an API consumption tracking function that returns the number of requests made by an account.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/billing_webhooks_credit_based_billing_lemon_squeezy_89.md#2025-04-22_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nexport async function consumeApi(accountId: string): number {}\n```\n\n----------------------------------------\n\nTITLE: Sending a Basic HTML Email via getMailer (TSX)\nDESCRIPTION: Shows an example asynchronous function `sendEmail` for sending an HTML email. Similar to the text email example, it uses `getMailer` from `@kit/mailers` to get the configured mailer instance. It then calls the `sendEmail` method, passing the `to`, `from`, and `subject`, but uses the `html` property instead of `text` to provide HTML content for the email body. This allows sending richly formatted emails.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/database_webhooks_legal_pages_marketing_pages_64.md#2025-04-22_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getMailer } from '@kit/mailers';\n\nasync function sendEmail(params: {\n  from: string;\n  to: string;\n}) {\n  const mailer = await getMailer();\n\n  return mailer.sendEmail({\n    to: params.from,\n    from: params.to,\n    subject: 'Hello',\n    html: '<h1>Hello, World!</h1>'\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Tickets Data Table Component in React\nDESCRIPTION: This client-side component, TicketsDataTable, wraps a DataTable component and defines the columns for displaying support tickets. It includes custom rendering for ticket title, status, priority, creation date, update date, and a view action button.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/realtime_updates_server_components_7.md#2025-04-22_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\nimport Link from 'next/link';\n\nimport { ColumnDef } from '@tanstack/react-table';\n\nimport { Button } from '@kit/ui/button';\nimport { DataTable } from '@kit/ui/enhanced-data-table';\n\nimport { Tables } from '~/lib/database.types';\n\nimport { TicketPriorityBadge } from './ticket-priority-badge';\nimport { TicketStatusBadge } from './ticket-status-badge';\n\ntype Ticket = Tables<'tickets'>;\n\nexport function TicketsDataTable(props: {\n  data: Ticket[];\n  pageSize: number;\n  pageIndex: number;\n  pageCount: number;\n}) {\n  return <DataTable {...props} columns={getColumns()} />;\n}\n\nfunction getColumns(): ColumnDef<Ticket>[] {\n  return [\n    {\n      header: 'Title',\n      cell({ row }) {\n        const ticket = row.original;\n\n        return (\n          <Link className={'hover:underline'} href={`tickets/${ticket.id}`}>\n            {ticket.title}\n          </Link>\n        );\n      },\n    },\n    {\n      header: 'Status',\n      cell({ row }) {\n        const ticket = row.original;\n\n        return <TicketStatusBadge status={ticket.status} />;\n      },\n    },\n    {\n      header: 'Priority',\n      cell({ row }) {\n        const ticket = row.original;\n\n        return <TicketPriorityBadge priority={ticket.priority} />;\n      },\n    },\n    {\n      header: 'Created At',\n      cell({ row }) {\n        const ticket = row.original;\n        const date = new Date(ticket.created_at);\n\n        return getDateString(date);\n      },\n    },\n    {\n      header: 'Updated At',\n      cell({ row }) {\n        const ticket = row.original;\n        const date = new Date(ticket.updated_at);\n\n        return getDateString(date);\n      },\n    },\n    {\n      header: '',\n      id: 'actions',\n      cell({ row }) {\n        return (\n          <div className={'flex justify-end'}>\n            <Button asChild variant={'outline'}>\n              <Link href={`tickets/${row.original.id}`}>View Issue</Link>\n            </Button>\n          </div>\n        );\n      },\n    },\n  ];\n}\n\nfunction getDateString(date: Date) {\n  const day = date.toLocaleDateString();\n  const time = date.toLocaleTimeString();\n\n  return `${day} at ${time}`;\n}\n```\n\n----------------------------------------\n\nTITLE: Single Object Retrieval\nDESCRIPTION: Shows how to use the single property to fetch a single record from the database with specific conditions.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/ai_text_editor_cookie_banner_feedback_popup_24.md#2025-04-22_snippet_26\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ClientDataLoader } from '@makerkit/data-loader-supabase-nextjs';\n\n<ClientDataLoader\n  table=\"organizations\"\n  select={[\"id\", \"name\"]}\n  single\n  where={{\n    id: {\n      eq: 1,\n    }\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Managing Cookie Consent State with useCookieConsent Hook\nDESCRIPTION: Details how to use the useCookieConsent hook for managing the state of cookie consent within a React app. It provides methods to update consent status and explains the usage of the ConsentStatus enum to track the current state.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/app_breadcrumbs_bordered_navigation_menu_card_button_39.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useCookieConsent } from '@kit/ui/cookie-banner';\n\nfunction MyComponent() {\n  const { status, accept, reject, clear } = useCookieConsent();\n\n  // Use these values and functions as needed\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nenum ConsentStatus {\n  Accepted = 'accepted',\n  Rejected = 'rejected',\n  Unknown = 'unknown'\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction App() {\n  const { status } = useCookieConsent();\n\n  useEffect(() => {\n    if (status === ConsentStatus.Accepted) {\n      // Initialize analytics or other cookie-dependent scripts\n    }\n  }, [status]);\n\n  return (\n    <div>\n      {/* Your app content */}\n      <CookieBanner />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Personal Account Navigation in React\nDESCRIPTION: Sets up the navigation configuration for personal account pages, including conditional billing route based on feature flags.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stepper_components_application_configuration_61.md#2025-04-22_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nconst routes = [\n  {\n    label: 'common:homeTabLabel',\n    path: pathsConfig.app.home,\n    Icon: <Home className={iconClasses} />,\n    end: true,\n  },\n  {\n    label: 'account:accountTabLabel',\n    path: pathsConfig.app.personalAccountSettings,\n    Icon: <User className={iconClasses} />,\n  },\n];\n\nif (featureFlagsConfig.enablePersonalAccountBilling) {\n  routes.push({\n    label: 'common:billingTabLabel',\n    path: pathsConfig.app.personalAccountBilling,\n    Icon: <CreditCard className={iconClasses} />,\n  });\n}\n\nexport const personalAccountSidebarConfig = SidebarConfigSchema.parse({\n  routes,\n  style: import.meta.env.VITE_USER_NAVIGATION_STYLE,\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Minimal Next.js Server Action - TypeScript/TSX\nDESCRIPTION: Shows how to define a basic server action in Next.js by marking the file with the 'use server' directive. This action does not implement business logic but serves as the simplest foundation for POST endpoint exposure. The function returns a static success object upon invocation. No external dependencies or validation logic is demonstrated here.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/csrf_protection_react_query_route_handlers_43.md#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n'use server';\n\n// I am now a server action!\nexport const myServerAction = async function () {\n  // ... your code here\n  return {\n    success: true,\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication Providers in a Next.js/Supabase Application\nDESCRIPTION: Shows how to configure different authentication strategies in a Next.js application using Supabase. The example demonstrates enabling email link authentication and adding Twitter OAuth.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/organization_sdk_organization_subscription_sdk_sdk_25.md#2025-04-22_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\nauth: {\n  // NB: Enable the providers below in the Supabase Console\n  // in your production project\n  providers: {\n    emailPassword: false, // set this to false\n    phoneNumber: false,\n    emailLink: true, // set this to true\n    oAuth: ['google', 'twitter'] as Provider[],\n  },\n},\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Hook for Fetching Events with Supabase in TypeScript\nDESCRIPTION: This custom hook uses Supabase to fetch events from a Postgres table based on the organization ID. It utilizes the useQuery hook for data fetching and caching.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/project_structure_running_project_tailwind_css_75.md#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nexport function useFetchEvents(\n  organizationId: number\n) {\n  const client = useSupabase();\n  const key = [`events`, organizationId];\n\n  return useQuery(key, async () => {\n    const { data, error } = client\n      .from('events')\n      .select('*')\n      .eq('organization_id', organizationId);\n\n    if (error) {\n      throw error;\n    }\n\n    return data;\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Application Paths in TypeScript\nDESCRIPTION: TypeScript configuration for application paths. This central configuration defines routes for authentication, personal account settings, and team account pages.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/multi_step_forms_page_stepper_91.md#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nconst pathsConfig = PathsSchema.parse({\n  auth: {\n    signIn: '/auth/sign-in',\n    signUp: '/auth/sign-up',\n    verifyMfa: '/auth/verify',\n    callback: '/auth/callback',\n    passwordReset: '/auth/password-reset',\n    passwordUpdate: '/update-password',\n  },\n  app: {\n    home: '/home',\n    personalAccountSettings: '/home/settings',\n    personalAccountBilling: '/home/billing',\n    personalAccountBillingReturn: '/home/billing/return',\n    accountHome: '/home/[account]',\n    accountSettings: `/home/[account]/settings`,\n    accountBilling: `/home/[account]/billing`,\n    accountMembers: `/home/[account]/members`,\n    accountBillingReturn: `/home/[account]/billing/return`,\n    joinTeam: '/join',\n  },\n} satisfies z.infer<typeof PathsSchema>);\n```\n\n----------------------------------------\n\nTITLE: Using useStorage Hook to Access Firebase Storage SDK (TypeScript)\nDESCRIPTION: Shows basic usage of the useStorage hook to obtain a Firebase Storage instance in a React component. This is a foundational step before reading or uploading files. Requires reactfire's useStorage and a properly configured Firebase provider context.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/custom_fetch_fetching_data_firestore_making_api_requests_4.md#2025-04-22_snippet_14\n\nLANGUAGE: TSX\nCODE:\n```\nconst storage = useStorage();\n```\n\n----------------------------------------\n\nTITLE: Email Service Configuration\nDESCRIPTION: Configuration variables for email functionality including provider settings and credentials.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stepper_components_application_configuration_41.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nMAILER_PROVIDER=nodemailer\nEMAIL_SENDER=info@yourapp.com\nCONTACT_EMAIL=contact@yourapp.com\n\n# For Resend\nRESEND_API_KEY=your-resend-api-key\n\n# For Nodemailer\nEMAIL_HOST=smtp.provider.com\nEMAIL_PORT=587\nEMAIL_USER=your-email-user\nEMAIL_PASSWORD=your-email-password\nEMAIL_TLS=true\n```\n\n----------------------------------------\n\nTITLE: Initializing Team Account API in Remix Server Action (TypeScript)\nDESCRIPTION: Demonstrates initializing the Makerkit Team Account API within a Remix Server Action, marked with `'use server'`. It utilizes `createTeamAccountsApi` and `getSupabaseServerClient` to get an API instance for server-side operations.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/google_analytics_provider_posthog_analytics_provider_umami_analytics_provider_88.md#2025-04-22_snippet_26\n\nLANGUAGE: tsx\nCODE:\n```\n'use server';\n\nimport { createTeamAccountsApi } from '@kit/team-accounts/api';\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\n\nexport async function myServerAction() {\n  const client = getSupabaseServerClient();\n  const api = createTeamAccountsApi(client);\n  \n  // use api\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Step Onboarding Form Component in React/TypeScript\nDESCRIPTION: A comprehensive React component implementing a multi-step onboarding form with three stages: profile creation, team setup, and plan selection. Uses React Hook Form for form management, Zod for validation, and includes dynamic checkout integration. The component features a stepper UI, form validation, and responsive design with animated transitions.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/waitlist_plugin_plugins_drizzle_supabase_52.md#2025-04-22_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\nimport { useCallback, useRef, useState } from 'react';\n\nimport { createPortal } from 'react-dom';\n\nimport dynamic from 'next/dynamic';\n\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { useForm } from 'react-hook-form';\nimport { z } from 'zod';\n\nimport { PlanPicker } from '@kit/billing-gateway/components';\nimport { Button } from '@kit/ui/button';\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n} from '@kit/ui/form';\nimport { If } from '@kit/ui/if';\nimport { Input } from '@kit/ui/input';\nimport {\n  MultiStepForm,\n  MultiStepFormContextProvider,\n  MultiStepFormHeader,\n  MultiStepFormStep,\n  useMultiStepFormContext,\n} from '@kit/ui/multi-step-form';\nimport { Stepper } from '@kit/ui/stepper';\n\nimport billingConfig from '~/config/billing.config';\nimport { OnboardingFormSchema } from '~/onboarding/_lib/onboarding-form.schema';\nimport { submitOnboardingFormAction } from '~/onboarding/_lib/server/server-actions';\n\nconst EmbeddedCheckout = dynamic(\n  async () => {\n    const { EmbeddedCheckout } = await import('@kit/billing-gateway/checkout');\n\n    return {\n      default: EmbeddedCheckout,\n    };\n  },\n  {\n    ssr: false,\n  },\n);\n\nexport function OnboardingForm() {\n  const [checkoutToken, setCheckoutToken] = useState<string | undefined>(\n    undefined,\n  );\n\n  const form = useForm({\n    resolver: zodResolver(OnboardingFormSchema),\n    defaultValues: {\n      profile: {\n        name: '',\n      },\n      team: {\n        name: '',\n      },\n      checkout: {\n        planId: '',\n        productId: '',\n      },\n    },\n    mode: 'onBlur',\n  });\n\n  const onSubmit = useCallback(\n    async (data: z.infer<typeof OnboardingFormSchema>) => {\n      try {\n        const { checkoutToken } = await submitOnboardingFormAction(data);\n\n        setCheckoutToken(checkoutToken);\n      } catch (error) {\n        console.error('Failed to submit form:', error);\n      }\n    },\n    [],\n  );\n\n  const checkoutPortalRef = useRef<HTMLDivElement>(null);\n\n  if (checkoutToken) {\n    return (\n      <EmbeddedCheckout\n        checkoutToken={checkoutToken}\n        provider={billingConfig.provider}\n        onClose={() => setCheckoutToken(undefined)}\n      />\n    );\n  }\n\n  return (\n    <div\n      className={\n        'w-full rounded-lg p-8 shadow-sm duration-500 animate-in fade-in-90 zoom-in-95 slide-in-from-bottom-12 lg:border'\n      }\n    >\n      <MultiStepForm\n        className={'space-y-8 p-1'}\n        schema={OnboardingFormSchema}\n        form={form}\n        onSubmit={onSubmit}\n      >\n        <MultiStepFormHeader>\n          <MultiStepFormContextProvider>\n            {({ currentStepIndex }) => (\n              <Stepper\n                variant={'numbers'}\n                steps={['Profile', 'Team', 'Complete']}\n                currentStep={currentStepIndex}\n              />\n            )}\n          </MultiStepFormContextProvider>\n        </MultiStepFormHeader>\n\n        <MultiStepFormStep name={'profile'}>\n          <ProfileStep />\n        </MultiStepFormStep>\n\n        <MultiStepFormStep name={'team'}>\n          <TeamStep />\n        </MultiStepFormStep>\n\n        <MultiStepFormStep name={'checkout'}>\n          <If condition={checkoutPortalRef.current}>\n            {(portalRef) => createPortal(<CheckoutStep />, portalRef)}\n          </If>\n        </MultiStepFormStep>\n      </MultiStepForm>\n\n      <div className={'p-1'} ref={checkoutPortalRef}></div>\n    </div>\n  );\n}\n\nfunction ProfileStep() {\n  const { nextStep, form } = useMultiStepFormContext();\n\n  return (\n    <Form {...form}>\n      <div className={'flex flex-col space-y-6'}>\n        <div className={'flex flex-col space-y-2'}>\n          <h1 className={'text-xl font-semibold'}>Welcome to Makerkit</h1>\n\n          <p className={'text-sm text-muted-foreground'}>\n            Welcome to the onboarding process! Let&apos;s get started by\n            entering your name.\n          </p>\n        </div>\n\n        <FormField\n          render={({ field }) => {\n            return (\n              <FormItem>\n                <FormLabel>Your Name</FormLabel>\n\n                <FormControl>\n                  <Input {...field} placeholder={'Name'} />\n                </FormControl>\n\n                <FormDescription>Enter your full name here</FormDescription>\n              </FormItem>\n            );\n          }}\n          name={'profile.name'}\n        />\n\n        <div className={'flex justify-end'}>\n          <Button onClick={nextStep}>Continue</Button>\n        </div>\n      </div>\n    </Form>\n  );\n}\n\nfunction TeamStep() {\n  const { nextStep, prevStep, form } = useMultiStepFormContext();\n\n  return (\n    <Form {...form}>\n      <div className={'flex w-full flex-col space-y-6'}>\n        <div className={'flex flex-col space-y-2'}>\n          <h1 className={'text-xl font-semibold'}>Create Your Team</h1>\n\n          <p className={'text-sm text-muted-foreground'}>\n            Let&apos;s create your team. Enter your team name below.\n          </p>\n        </div>\n\n        <FormField\n          render={({ field }) => {\n            return (\n              <FormItem>\n                <FormLabel>Your Team Name</FormLabel>\n\n                <FormControl>\n                  <Input {...field} placeholder={'Name'} />\n                </FormControl>\n\n                <FormDescription>\n                  This is the name of your team.\n                </FormDescription>\n              </FormItem>\n            );\n          }}\n          name={'team.name'}\n        />\n\n        <div className={'flex justify-end space-x-2'}>\n          <Button variant={'ghost'} onClick={prevStep}>\n            Go Back\n          </Button>\n\n          <Button onClick={nextStep}>Continue</Button>\n        </div>\n      </div>\n    </Form>\n  );\n}\n\nfunction CheckoutStep() {\n  const { form, mutation } = useMultiStepFormContext();\n\n  return (\n    <Form {...form}>\n      <div className={'flex w-full flex-col space-y-6 lg:min-w-[55rem]'}>\n        <div className={'flex flex-col space-y-2'}>\n          <PlanPicker\n            pending={mutation.isPending}\n            config={billingConfig}\n            onSubmit={({ planId, productId }) => {\n              form.setValue('checkout.planId', planId);\n              form.setValue('checkout.productId', productId);\n\n              mutation.mutate();\n            }}\n          />\n        </div>\n      </div>\n    </Form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing withAuthProps for Authentication Pages in Next.js\nDESCRIPTION: Example of getServerSideProps using withAuthProps to populate authentication page data and ensure authenticated users cannot access auth pages.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/deploying_production_development_getting_started_environment_variables_13.md#2025-04-22_snippet_27\n\nLANGUAGE: tsx\nCODE:\n```\nimport { withAuthProps } from \"~/lib/props/with-auth-props\";\nimport { GetServerSidePropsContext } from \"next\";\n\nexport async function getServerSideProps(ctx: GetServerSidePropsContext) {\n  return await withAuthProps(ctx);\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Feedback Components\nDESCRIPTION: Examples of importing and using feedback components in React\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/sentry_monitoring_notifications_configuration_51.md#2025-04-22_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\nimport { FeedbackPopup } from '@kit/feedback';\n```\n\nLANGUAGE: tsx\nCODE:\n```\n<FeedbackPopup>\n    <Button>Gimme feedback</Button>\n</FeedbackPopup>\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport {FeedbackForm} from '@kit/feedback';\n```\n\nLANGUAGE: tsx\nCODE:\n```\n<FeedbackForm/>\n```\n\n----------------------------------------\n\nTITLE: Inline Loading Overlay Example - React - JavaScript\nDESCRIPTION: Displays the LoadingOverlay as an inline element (not full page), with a fixed height for layout consistency. Passes fullPage={false} and custom className. Useful for loading states within component boundaries instead of covering entire viewport.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/bordered_navigation_menu_card_button_cookie_banner_60.md#2025-04-22_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\n<LoadingOverlay fullPage={false} className=\"h-40\">\n  Fetching results...\n</LoadingOverlay>\n```\n\n----------------------------------------\n\nTITLE: Creating a New Tasks Page in Remix Supabase Application\nDESCRIPTION: Example of creating a new Tasks page within the _app layout, including loader function, meta tags, and component structure. The page is located at /tasks and uses the AppHeader and AppContainer components.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/navigating_codebase_running_the_application_technical_details_78.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {\n  LoaderFunctionArgs,\n  MetaFunction,\n} from '@remix-run/node';\n\nimport { useLoaderData } from '@remix-run/react';\nimport { RectangleStackIcon } from '@heroicons/react/24/outline';\n\nimport { Trans } from 'react-i18next';\n\nimport AppHeader from '~/components/AppHeader';\nimport AppContainer from '~/components/AppContainer';\n\nexport const meta: MetaFunction = () => {\n  return [\n    {\n      title: 'Tasks',\n    },\n  ];\n};\n\nexport async function loader(args: LoaderFunctionArgs) {\n  await requireSession(\n    getSupabaseServerClient(args.request),\n  );\n  // return tasks\n}\n\nfunction TasksPage() {\n  const { tasks } = useLoaderData<typeof loader>();\n\n  return (\n    <>\n      <AppHeader>\n        <span className={'flex space-x-2'}>\n          <RectangleStackIcon className=\"w-6\" />\n\n          <span>\n            <Trans i18nKey={'common:tasksTabLabel'} />\n          </span>\n        </span>\n      </AppHeader>\n\n      <AppContainer>\n        {/* ... */}\n      </AppContainer>\n    </>\n  );\n}\n\nexport default TasksPage;\n```\n\n----------------------------------------\n\nTITLE: Starting Stripe Mock Server\nDESCRIPTION: This command starts the Stripe mock server for testing Stripe Checkout functionality.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/ci_tests_running_tests_testing_limitations_12.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm run stripe:mock-server\n```\n\n----------------------------------------\n\nTITLE: Running All Cypress Tests in Headless Mode\nDESCRIPTION: This command runs all Cypress tests in headless mode and exits afterward.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/ci_tests_running_tests_testing_limitations_12.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm run cypress:headless\n```\n\n----------------------------------------\n\nTITLE: Running Stripe CLI with Docker for Webhook Development\nDESCRIPTION: Command to login to Stripe account using Docker, allowing developers to test Stripe events locally during development. This is a prerequisite for setting up webhook testing.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/lemon_squeezy_metered_usage_one_off_payments_38.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm -it --name=stripe -v ~/.config/stripe:/root/.config/stripe stripe/stripe-cli:latest login\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth Providers in Makerkit - TypeScript/React\nDESCRIPTION: Enables specified OAuth providers (e.g., Google, Facebook) for authentication by assigning them to the oAuth property within the providers configuration object. Requires Makerkit and Supabase support for chosen providers as defined by the Provider interface. Each provider string represents a supported third-party authentication provider, and disabling other strategies is done by setting their respective flags to false.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/adding_app_pages_guarding_pages_updating_sidebar_menu_32.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nproviders: {\n  emailPassword: false,\n  phoneNumber: false,\n  emailLink: false,\n  oAuth: ['google', 'facebook'] as Provider[]\n},\n```\n\n----------------------------------------\n\nTITLE: Using the Fetched Document Data in a React Component\nDESCRIPTION: This snippet shows how to implement a React component that uses the useFetchUser hook to retrieve user data. It handles different loading states (loading, error, and success) and displays the user's name when data is available.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/reading_document_reading_documents_list_creating_document_8.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nfunction UserComponent() {\n  const { data, status } = useFetchUser();\n\n  if (status === 'loading') {\n    return <p>Loading...</p>;\n  }\n\n  if (status === 'error') {\n    return <p>Error: {error.message}</p>;\n  }\n\n  return (\n    <div>\n      <p>{data.name}</p>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Hook to Add Firestore Documents (TypeScript/React)\nDESCRIPTION: Defines a React hook to add documents to a Firestore collection, wrapping the addDoc method inside useCallback for memoization. Depends on Firestore client library, a predefined TASKS_COLLECTION string, and React hooks. Expects a Task object as input and returns the promise from addDoc. Should be used inside React components to enable task creation.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/custom_fetch_fetching_data_firestore_making_api_requests_4.md#2025-04-22_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TASKS_COLLECTION } from '~/lib/firestore-collections';\n\nfunction useCreateTask() {\n  const firestore = useFirestore();\n  const tasksCollection = collection(firestore, TASKS_COLLECTION);\n\n  return useCallback(\n    (task: Task) => {\n      return addDoc(tasksCollection, task);\n    },\n    [tasksCollection]\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Supabase Client with useSupabase Hook\nDESCRIPTION: This snippet demonstrates how to use the useSupabase hook to access the Supabase client in a React component. The hook initializes the client with the correct Supabase URL and key from environment variables.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/deploying_production_environment_variables_functions_26.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport useSupabase from '~/core/hooks/use-supabase';\n\nfunction Component() {\n  // This is the Supabase client\n  const supabase = useSupabase();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Fly.io Configuration File for Remix Supabase SaaS\nDESCRIPTION: Configuration file (fly.toml) for deploying the Remix Supabase Turbo Kit to Fly.io. Defines the application name, primary region, build configuration, environment settings, and service configuration with HTTP handlers.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/configuring_supabase_database_webhooks_fly_production_environment_variables_95.md#2025-04-22_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\napp = \"remix-turbo-kit\"\nprimary_region = \"lax\"\nkill_signal = \"SIGINT\"\nkill_timeout = 5\n\n[build]\n  dockerfile = \"Dockerfile\"\n\n[env]\n  NODE_ENV = \"production\"\n\n[experimental]\n  allowed_public_ports = []\n  auto_rollback = true\n\n[[services]]\n  http_checks = []\n  internal_port = 3000\n  processes = [\"app\"]\n  protocol = \"tcp\"\n  script_checks = []\n  [services.concurrency]\n    hard_limit = 25\n    soft_limit = 20\n  [[services.ports]]\n    force_https = true\n    handlers = [\"http\"]\n    port = 80\n  [[services.ports]]\n    handlers = [\"tls\", \"http\"]\n    port = 443\n  [[services.tcp_checks]]\n    grace_period = \"1s\"\n    interval = \"15s\"\n    restart_limit = 0\n    timeout = \"2s\"\n```\n\n----------------------------------------\n\nTITLE: Structured Logging Implementation\nDESCRIPTION: Example of implementing structured logging for asynchronous requests using the @kit/shared/logger package\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/llms_migration_from_makerkit_v1_navigating_codebase_49.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nconst ctx = {\n  name: 'my-server-action',\n  userId: user.id,\n};\n\nlogger.info(ctx, 'Request started...');\n\nconst { data, error } = await supabase.from('notes').select('*');\n\nif (error) {\n  logger.error(ctx, 'Request failed...');\n} else {\n  logger.info(ctx, 'Request succeeded...');\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Subscription Data using Accounts API in TSX\nDESCRIPTION: Illustrates how to use the Accounts API to get subscription data for a specific user account identified by `accountId`. This method retrieves data from the `subscriptions` and `subscription_items` tables.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/analytics_api_custom_analytics_provider_google_analytics_provider_57.md#2025-04-22_snippet_31\n\nLANGUAGE: tsx\nCODE:\n```\nconst api = createAccountsApi(client);\nconst subscription = await api.getSubscription(accountId);\n```\n\n----------------------------------------\n\nTITLE: Using withMethodsGuard to Restrict API Endpoint Methods in Next.js\nDESCRIPTION: Example API route showing how to use withMethodsGuard to limit accepted HTTP methods to GET and POST for a specific endpoint.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/deploying_production_development_getting_started_environment_variables_13.md#2025-04-22_snippet_29\n\nLANGUAGE: ts\nCODE:\n```\nimport { NextApiRequest, NextApiResponse } from \"next\";\n\nimport { withAuthedUser } from '~/core/middleware/with-authed-user';\nimport { withPipe } from '~/core/middleware/with-pipe';\nimport { withMethodsGuard } from '~/core/middleware/with-methods-guard';\nimport { withExceptionFilter } from '~/core/middleware/with-exception-filter';\n\nexport default function helloWorld(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n  const handler = withPipe(\n    withMethodsGuard(['GET', 'POST']),\n    withAuthedUser,\n    (req, res) => {\n      res.status(200).json({ message: 'Hello World!' });\n    }\n  );\n\n  return withExceptionFilter(req, res)(handler);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Ref for DOM Element Access in React\nDESCRIPTION: This snippet demonstrates creating a React ref (`scrollingDiv`) using `useRef`. This ref is intended to hold a reference to an HTMLDivElement, typically used for direct DOM manipulation like scrolling.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/data_fetching_3.md#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nconst scrollingDiv = useRef<HTMLDivElement | null>(null);\n```\n\n----------------------------------------\n\nTITLE: Extending Plan Configuration with Payment Mode\nDESCRIPTION: Example of how to extend the plan configuration interface to include the payment mode property, allowing for dynamic handling of different payment types (subscription or one-time).\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_one_time_payments_stripe_webhooks_ci_tests_73.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n{\n  name: 'Basic',\n  description: 'Unlimited applications and 2-hour onboarding session',\n  price: '$249/year',\n  stripePriceId: 'price_***********',\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\n{\n  name: 'Basic',\n  description: 'Unlimited applications and 2-hour onboarding session',\n  price: '$249 one off!',\n  stripePriceId: 'price_***********',\n  mode: 'payment'\n}\n```\n\n----------------------------------------\n\nTITLE: Application Structure for Adding New Entity\nDESCRIPTION: Directory structure example showing how to organize files when adding a new 'events' entity to a Makerkit application.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/notifications_plugins_adding_translations_68.md#2025-04-22_snippet_8\n\nLANGUAGE: txt\nCODE:\n```\n- app\n  - components\n    - events\n      - EventsContainerComponent.tsx\n      - ...\n\n  - lib\n    - events\n      - types\n        - event-model.ts\n        - ...\n      - hooks\n        - use-fetch-events.ts\n        - use-create-event.ts\n        - ...\n      - utils\n        - create-event-model.ts\n\n  - routes\n    - __app\n      - events\n        - page.tsx\n        - $event.tsx\n```\n\n----------------------------------------\n\nTITLE: Retrieving Team Account by ID\nDESCRIPTION: Demonstrates how to use the getTeamAccountById method to retrieve a team account by its ID.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/analytics_api_custom_analytics_provider_google_analytics_provider_57.md#2025-04-22_snippet_45\n\nLANGUAGE: tsx\nCODE:\n```\nconst api = createTeamAccountsApi(client);\nconst account = await api.getTeamAccountById('account-id');\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Event Types for Analytics\nDESCRIPTION: TypeScript code demonstrating how to define custom event types by extending the ConsumerProvidedEventTypes interface. This allows for type-safe custom event tracking in the app.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/supabase_client_clone_repository_common_commands_56.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ConsumerProvidedEventTypes } from '@kit/shared/events';\n\nexport interface MyAppEvents extends ConsumerProvidedEventTypes {\n  'feature.used': { featureName: string };\n  'subscription.changed': { newPlan: string };\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Metered Billing Line Items with Tiers\nDESCRIPTION: Configuration for metered billing with tiered pricing, where costs vary based on usage levels. The tiers data is used for UI display but actual billing is handled by the provider.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/user_workspace_api_api_billing_api_37.md#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nexport default createBillingSchema({\n  provider,\n  products: [\n    {\n      id: 'starter',\n      name: 'Starter',\n      description: 'The perfect plan to get started',\n      currency: 'USD',\n      badge: `Value`,\n      plans: [\n        {\n          name: 'Starter Monthly',\n          id: 'starter-monthly',\n          trialDays: 7,\n          paymentType: 'recurring',\n          interval: 'month',\n          lineItems: [\n            {\n              id: 'price_1NNwYHI1i3VnbZTqI2UzaHIe',\n              name: 'Addon 2',\n              cost: 0,\n              type: 'metered',\n              unit: 'GBs',\n              tiers: [\n                {\n                    upTo: 10,\n                    cost: 0.1,\n                },\n                {\n                    upTo: 100,\n                    cost: 0.05,\n                },\n                {\n                    upTo: 'unlimited',\n                    cost: 0.01,\n                }\n              ]\n            },\n          ],\n        }\n      ],\n    }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Declaring an Async Next.js Server Component Page - TypeScript/TSX\nDESCRIPTION: Defines a minimal server component function in Next.js that supports async data fetching. This pattern is the basis for page-level server-side data operations and composition. No business logic or parameters are shown.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/csrf_protection_react_query_route_handlers_43.md#2025-04-22_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nexport default async function TasksPage() {}\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Contentlayer Versions in Next.js\nDESCRIPTION: Commands to downgrade contentlayer and next-contentlayer packages to version 0.3.1 to resolve startup issues.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/branding_environment_variables_setup_project_configuration_21.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nnpm i contentlayer@0.3.1 next-contentlayer@0.3.1\n```\n\n----------------------------------------\n\nTITLE: Linking Supabase CLI to Remote Project\nDESCRIPTION: Command to link the local Supabase CLI to your remote Supabase project. Replace the asterisks with your project reference ID found in the Supabase URL.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/branding_environment_variables_setup_project_configuration_80.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n./node_modules/.bin/supabase link --project-ref **************\n```\n\n----------------------------------------\n\nTITLE: Extending User Roles Enum in TypeScript\nDESCRIPTION: This snippet demonstrates how to extend the `MembershipRole` enum by adding a new role, `Readonly`. It illustrates maintaining the hierarchical structure by placing the new, lower-level role (`Readonly` = 0) before the existing `Member` role.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/develop_firebase_security_rules_emails_encrypting_secrets_71.md#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nexport enum MembershipRole {\n  Readonly,\n  Member,\n  Admin,\n  Owner,\n}\n```\n\n----------------------------------------\n\nTITLE: Email Configuration Environment Variables\nDESCRIPTION: Environment variables required for setting up email functionality using nodemailer in the Makerkit application.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/branding_environment_variables_setup_project_configuration_80.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nEMAIL_HOST=\nEMAIL_PORT=587\nEMAIL_USER=\nEMAIL_PASSWORD=\nEMAIL_SENDER='MakerKit Team <info@makerkit.dev>'\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Analytics Measurement ID in Bash\nDESCRIPTION: Sets the Google Analytics Measurement ID as an environment variable in a .env file. This ID is required for tracking analytics data with Google Analytics and is obtained from the Google Analytics dashboard.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/analytics_api_custom_analytics_provider_google_analytics_provider_57.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nVITE_GA_MEASUREMENT_ID=your-measurement-id\n```\n\n----------------------------------------\n\nTITLE: Seeding Support Tickets Database\nDESCRIPTION: SQL script for inserting sample data into the tickets and messages tables. Includes creation of example tickets with various statuses and corresponding message threads.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/database_4.md#2025-04-22_snippet_21\n\nLANGUAGE: sql\nCODE:\n```\n-- Insert sample tickets\nINSERT INTO public.tickets (account_id, status, title, priority, category, resolution, customer_email, updated_at)\nVALUES\n  ('5deaa894-2094-4da3-b4fd-1fada0809d1c', 'in_progress', 'Cannot access account', 'high', 'Login Issues', NULL, 'john.doe@example.com', NOW() + INTERVAL '1 day'),\n  ('5deaa894-2094-4da3-b4fd-1fada0809d1c', 'open', 'Billing discrepancy', 'medium', 'Billing', NULL, 'jane.smith@example.com', NOW() + INTERVAL '2 days'),\n  ('5deaa894-2094-4da3-b4fd-1fada0809d1c', 'open', 'Feature request: Dark mode', 'low', 'Feature Request', NULL, 'alex.johnson@example.com', NOW() + INTERVAL '5 days'),\n  ('5deaa894-2094-4da3-b4fd-1fada0809d1c', 'resolved', 'App crashes on startup', 'medium', 'Bug', 'Updated app to latest version', 'sarah.lee@example.com', NOW() - INTERVAL '1 hour');\n\n-- Now, let's add some messages for these tickets\nWITH ticket_ids AS (\n  SELECT id, title FROM public.tickets WHERE title IN (\n    'Cannot access account',\n    'Billing discrepancy',\n    'Feature request: Dark mode',\n    'App crashes on startup'\n  )\n)\nINSERT INTO public.messages (ticket_id, author, content, attachment_url)\nSELECT\n  t.id,\n  m.author,\n  m.content,\n  m.attachment_url\nFROM ticket_ids t\nJOIN (\n  VALUES\n    ('Cannot access account', 'customer'::public.message_author, 'I cannot log into my account. It says my password is incorrect, but I\\'m sure it\\'s right.', NULL),\n    ('Cannot access account', 'support'::public.message_author, 'I\\'m sorry to hear that. Let\\'s try resetting your password. I\\'ve sent a password reset link to your email.', NULL),\n    ('Billing discrepancy', 'customer'::public.message_author, 'My last invoice seems to be higher than usual. Can you please check?', NULL),\n    ('Billing discrepancy', 'support'::public.message_author, 'Certainly, I\\'ve looked into your account and noticed that you upgraded your plan last month. This explains the increase. Please confirm if you remember making this change.', NULL),\n    ('Feature request: Dark mode', 'customer'::public.message_author, 'It would be great if you could add a dark mode to the app. It\\'s hard on the eyes at night.', NULL),\n    ('App crashes on startup', 'customer'::public.message_author, 'Every time I try to open the app, it crashes immediately. I\\'m using an iPhone 12.', 'https://example.com/attachments/crash_log.txt'),\n    ('App crashes on startup', 'support'::public.message_author, 'Thank you for reporting this and providing the crash log. We\\'ve identified the issue and it\\'s been fixed in our latest update. Please update your app and let us know if the problem persists.', NULL),\n    ('App crashes on startup', 'customer'::public.message_author, 'I\\'ve updated the app and it\\'s working perfectly now. Thank you!', NULL)\n) AS m(title, author, content, attachment_url) ON t.title = m.title;\n```\n\n----------------------------------------\n\nTITLE: Creating a Git Pre-Commit Hook Script (Bash)\nDESCRIPTION: Defines a shell script for a Git pre-commit hook located at `./.git/hooks/pre-commit`. This script uses `pnpm` to run `typecheck` and `lint` commands on affected packages via Turborepo before allowing a commit.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/code_health_common_commands_conventions_48.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/sh\n\npnpm run typecheck\npnpm run lint\n```\n\n----------------------------------------\n\nTITLE: Configuring i18n for Multiple Languages in Remix\nDESCRIPTION: Configuration for internationalization in a Makerkit Remix application. This snippet shows how to set up the i18n configuration to support multiple languages including the fallback language and default namespaces.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/uploading_data_to_storage_writing_data_to_supabase_data_fetching_77.md#2025-04-22_snippet_30\n\nLANGUAGE: js\nCODE:\n```\nconst i18Config = {\n  fallbackLanguage: DEFAULT_LOCALE,\n  supportedLanguages: [DEFAULT_LOCALE, 'es'],\n  defaultNS: ['common', 'auth', 'organization', 'profile', 'subscription'],\n  react: { useSuspense: false },\n};\n```\n\n----------------------------------------\n\nTITLE: SQL Row Level Security Policy\nDESCRIPTION: Example SQL policy for implementing row-level security based on feature entitlements.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_billing_checkout_addons_subscription_entitlements_54.md#2025-04-22_snippet_18\n\nLANGUAGE: sql\nCODE:\n```\nCREATE POLICY \"users_can_access_feature\" ON public.some_table\n  FOR SELECT\n  TO authenticated\n  USING (\n    public.can_use_feature(auth.uid(), 'some_feature')\n  );\n```\n\n----------------------------------------\n\nTITLE: Updating Navigation Menu in Remix-Fire Application\nDESCRIPTION: Configuration code for the navigation menu in a Remix-Fire application, showing the original setup and how to add a new navigation link for the tasks feature.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/development_getting_started_environment_variables_firestore_data_fetching_74.md#2025-04-22_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nconst NAVIGATION_CONFIG = {\n  items: [\n    {\n      label: 'common:dashboardTabLabel',\n      path: configuration.paths.appHome,\n      Icon: ({ className }: { className: string }) => {\n        return <Squares2X2Icon className={className} />;\n      },\n    },\n    {\n      label: 'common:settingsTabLabel',\n      path: '/settings',\n      Icon: ({ className }: { className: string }) => {\n        return <Cog8ToothIcon className={className} />;\n      },\n    },\n  ],\n};\n```\n\nLANGUAGE: tsx\nCODE:\n```\n{\n  label: 'common:tasksTabLabel',\n  path: '/tasks',\n  Icon: ({ className }: { className: string }) => {\n    return <Squares2X2Icon className={className} />;\n  },\n},\n```\n\n----------------------------------------\n\nTITLE: Configuring Client-Server Module Exports in package.json\nDESCRIPTION: Example of organizing exports into client and server modules in package.json, which is useful for better tree-shaking when modules don't share dependencies.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/adding_turborepo_package_approaching_local_development_database_functions_44.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"exports\": {\n    \".\": \"./src/index.ts\",\n    \"./client\": \"./src/client.ts\",\n    \"./server\": \"./src/server.ts\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Prettier Configuration for Remix.js Firebase Kit\nDESCRIPTION: This JSON snippet shows the default Prettier configuration for the Makerkit's boilerplate codebase. It can be customized by updating the Prettier configuration in the package.json file.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/setting_up_firebase_custom_fetch_fetching_data_firestore_70.md#2025-04-22_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tabWidth\": 2,\n  \"useTabs\": false,\n  \"semi\": true,\n  \"arrowParens\": \"always\",\n  \"parser\": \"typescript\",\n  \"printWidth\": 80,\n  \"singleQuote\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Redirecting Marketing Pages with Next.js Middleware (TypeScript)\nDESCRIPTION: This TypeScript code, designed for use in 'apps/web/middleware.ts', implements a Next.js middleware that redirects requests for specific marketing pages to an external website. It uses a helper function 'isMarketingPage' which maintains a list of marketing page paths. Requires Next.js (v13+) and appropriate server environment. Takes a NextRequest as input and returns a NextResponse (either a redirect or allows the request to continue). Update 'marketingPages' array to reflect current route structure.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/adding_turborepo_package_approaching_local_development_database_functions_44.md#2025-04-22_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextRequest, NextResponse } from 'next/server';\n\nexport function middleware(req: NextRequest) {\n  if (isMarketingPage(req)) {\n    return NextResponse.redirect('https://your-external-website.com' + req.nextUrl.pathname);\n  }\n\n  // leave the rest of the middleware unchanged\n}\n\nfunction isMarketingPage(req: NextRequest) {\n  const marketingPages = [\n    '/pricing',\n    '/faq',\n    '/contact',\n    '/about',\n    '/home',\n    '/privacy-policy',\n    '/terms-and-conditions',\n    '/cookie-policy',\n  ];\n\n  return marketingPages.includes(req.nextUrl.pathname);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring React Router with Vercel Preset\nDESCRIPTION: Updates the React Router configuration file to include the Vercel preset, enabling server-side rendering and Vercel-specific optimizations for the application.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/emails_authentication_checklist_65.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Config } from '@react-router/dev/config';\n\nimport { vercelPreset } from '@vercel/react-router/vite';\n\nexport default {\n  ssr: true,\n  presets: [\n    vercelPreset()\n  ],\n} satisfies Config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Exports in package.json\nDESCRIPTION: Setting up the exports field in package.json to define how modules can be imported from your package. This allows for better tree-shaking and organization.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/adding_turborepo_package_approaching_local_development_database_functions_44.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"exports\": {\n    \".\": \"./src/index.ts\",\n    \"./my-module\": \"./src/my-module.ts\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SQL Policy for Credit-Based Resource Access\nDESCRIPTION: This SQL snippet creates a Row-Level Security (RLS) policy for controlling data access based on a user's credit balance. It ensures users can interact with resources only if they have sufficient credits by leveraging the 'has_credits' function.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/api_billing_api_billing_schema_58.md#2025-04-22_snippet_21\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy tasks_write_policy\n  on public.tasks\n  for select\n  using (\n    (select auth.uid()) === account_id and\n    public.has_credits((select auth.uid()), 1)\n  );\n```\n\n----------------------------------------\n\nTITLE: Adding a New Locale to JSON\nDESCRIPTION: This code snippet demonstrates how to create a new JSON file for a locale to enable translation features. Dependencies include the JSON format and familiarity with the locale directory structure in a Next.js application. This snippet expects key-value pairs representing translation strings as input.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/branding_environment_variables_setup_project_configuration_21.md#2025-04-22_snippet_9\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"hello\": \"Bonjour\"\n}\n```\n\n----------------------------------------\n\nTITLE: Common Development Commands\nDESCRIPTION: Essential commands for development, testing, and maintenance of the React Native Supabase project\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/supabase_client_clone_repository_common_commands_56.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm i\npnpm run dev\npnpm run --filter app supabase <command>\npnpm run supabase:web:start\npnpm run stripe:listen\npnpm run supabase:web:reset\npnpm run supabase:web:typegen\npnpm run test\npnpm run clean:workspaces\npnpm run clean\npnpm run typecheck\npnpm run lint:fix\npnpm run format:fix\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Guard with Custom Error Message\nDESCRIPTION: Alternative approach to protect routes by showing a custom error message instead of redirecting when the user is not authenticated.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/organization_sdk_organization_subscription_sdk_sdk_25.md#2025-04-22_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nimport { redirect } from \"next/navigation\";\n\nasync function MyPage() {\n  const session = await requireSession();\n\n  if (!session) {\n    return <div>You are not authenticated</div>;\n  }\n\n  return <div>Your content goes here</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Captcha Environment Variables (Bash)\nDESCRIPTION: Specifies the required environment variables for enabling Cloudflare Turnstile captcha protection: `CAPTCHA_SECRET_TOKEN` (server-side secret) and `NEXT_PUBLIC_CAPTCHA_SITE_KEY` (client-side site key). These should be set securely, typically in CI/CD environments, not committed to `.env` files.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/csrf_protection_react_query_route_handlers_43.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nCAPTCHA_SECRET_TOKEN=\nNEXT_PUBLIC_CAPTCHA_SITE_KEY=\n```\n\n----------------------------------------\n\nTITLE: If Component with Fallback Example - React - JavaScript\nDESCRIPTION: Shows how to provide fallback content using the If component when data is not present. Inputs: hasData boolean, data array. Outputs: renders DataDisplay component if data exists, otherwise NoDataMessage. Ensures a graceful empty state experience.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/bordered_navigation_menu_card_button_cookie_banner_60.md#2025-04-22_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<If condition={hasData} fallback={<NoDataMessage />}>\n  <DataDisplay data={data} />\n</If>\n```\n\n----------------------------------------\n\nTITLE: Using Supabase in Route Handlers (Deprecated)\nDESCRIPTION: This deprecated code demonstrates how to use the getSupabaseRouteHandlerClient function to access Supabase in Next.js Route Handlers. This approach is for older versions of the kit and will be removed in future versions.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/csrf_protection_react_query_route_handlers_43.md#2025-04-22_snippet_26\n\nLANGUAGE: tsx\nCODE:\n```\nimport { NextRequest, NextResponse } from 'next/server';\nimport { getSupabaseRouteHandlerClient } from '@kit/supabase/route-handlers-client';\n\nexport async function POST(req: NextRequest) {\n  const supabase = getSupabaseRouteHandlerClient();\n\n  const { data, error } = await supabase.from('users').select('*')\n\n  return NextResponse.json({ data });\n}\n```\n\n----------------------------------------\n\nTITLE: Running Stripe CLI with Docker for Webhook Testing\nDESCRIPTION: Command to authenticate with Stripe using Docker for local webhook testing. This allows developers to listen to Stripe events on their localhost during development.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/lemon_squeezy_metered_usage_one_off_payments_59.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm -it --name=stripe -v ~/.config/stripe:/root/.config/stripe stripe/stripe-cli:latest login\n```\n\n----------------------------------------\n\nTITLE: Initializing Account API in Remix Action (TypeScript)\nDESCRIPTION: Shows how to set up the Makerkit Account API within a Remix action function. Similar to the loader example, it uses `createAccountsApi` and `getSupabaseServerClient` to create an API instance accessible within the action context.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/google_analytics_provider_posthog_analytics_provider_umami_analytics_provider_88.md#2025-04-22_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createAccountsApi } from '@kit/accounts/api';\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\n\nexport async function action(args: ActionFunctionArgs) {\n  const client = getSupabaseServerClient(args.request);\n  const api = createAccountsApi(client);\n  \n  // use api\n}\n```\n\n----------------------------------------\n\nTITLE: Sending a Basic Text Email via getMailer (TSX)\nDESCRIPTION: Provides an example asynchronous function `sendEmail` demonstrating how to send a simple plain text email using the application's mailer system. It uses the `getMailer` utility from `@kit/mailers` to obtain the configured mailer instance (based on environment variables) and then calls its `sendEmail` method, passing the `to`, `from`, `subject`, and `text` properties. The function returns the promise resolved or rejected by the mailer's `sendEmail` method.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/database_webhooks_legal_pages_marketing_pages_64.md#2025-04-22_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getMailer } from '@kit/mailers';\n\nasync function sendEmail(params: {\n  from: string;\n  to: string;\n}) {\n  const mailer = await getMailer();\n\n  return mailer.sendEmail({\n    to: params.from,\n    from: params.to,\n    subject: 'Hello',\n    text: 'Hello, World!'\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Zod Schema for Updating Ticket Priority in TypeScript\nDESCRIPTION: This snippet defines a Zod schema for validating the data structure when updating a ticket's priority. It ensures the ticketId is a valid UUID and the priority is one of the predefined values.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/data_fetching_3.md#2025-04-22_snippet_30\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { z } from 'zod';\n\nexport const UpdateTicketPrioritySchema = z.object({\n  ticketId: z.string().uuid(),\n  priority: z.enum(['low', 'medium', 'high']),\n});\n```\n\n----------------------------------------\n\nTITLE: Creating is_project_owner Function in Supabase\nDESCRIPTION: Creates a function that checks if the current user is the owner of a specific project by querying the project_members table with role='owner' filtering. Returns a boolean value.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/projects_data_model_53.md#2025-04-22_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nCREATE OR REPLACE FUNCTION public.is_project_owner(project_id UUID)\nRETURNS BOOLEAN\nSET search_path = ''\nAS $$\n  SELECT EXISTS (\n    SELECT 1 FROM public.project_members\n    WHERE project_id = $1\n    AND user_id = (SELECT auth.uid())\n    AND role = 'owner'\n  );\n$$ LANGUAGE sql;\n\nGRANT EXECUTE ON FUNCTION public.is_project_owner TO authenticated;\n```\n\n----------------------------------------\n\nTITLE: Defining Confirm Delete Task Modal in React TSX\nDESCRIPTION: This snippet defines a modal component for confirming task deletion. It takes the task name and a confirmation function as props, and renders a modal with a warning message and a delete button.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/running_project_supabase_data_fetching_supabase_data_writing_27.md#2025-04-22_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\nfunction ConfirmDeleteTaskModal({\n  children,\n  onConfirm,\n  task,\n}: React.PropsWithChildren<{\n  task: string;\n  onConfirm: () => void;\n}>) {\n  return (\n    <Modal heading={`Deleting Task`} Trigger={children}>\n      <div className={'flex flex-col space-y-4'}>\n        <div className={'text-sm flex flex-col space-y-2'}>\n          <p>\n            You are about to delete the task <b>{task}</b>\n          </p>\n\n          <p>Do you want to continue?</p>\n        </div>\n\n        <div className={'flex justify-end space-x-2'}>\n          <Button variant={'flat'} color={'danger'} onClick={onConfirm}>\n            Yep, delete task\n          </Button>\n        </div>\n      </div>\n    </Modal>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Events in Components\nDESCRIPTION: Demonstrates how to use custom events in React components with TypeScript type safety.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/translations_updating_latest_version_tutorials_87.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useAppEvents } from '@kit/shared/events';\nimport { MyAppEvents } from './myAppEvents';\n\nfunction SomeComponent() {\n  const { emit } = useAppEvents<MyAppEvents>();\n\n  const handleFeatureUse = () => {\n    emit({ type: 'feature.used', payload: { featureName: 'coolFeature' } });\n  };\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Zod's Safe Parsing for API Validation\nDESCRIPTION: Alternative approach to API validation using Zod's safeParse method. This implementation avoids try/catch by using the success property as a type guard.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/uploading_data_to_storage_writing_data_to_supabase_data_fetching_77.md#2025-04-22_snippet_38\n\nLANGUAGE: tsx\nCODE:\n```\nexport async function POST(request: Request) {\n  const body = await request.json();\n  const result = await getBodySchema().parseAsync(body);\n\n  // we use result.success as a type guard\n  // when false, we throw an exception\n  if (!result.success) {\n    return throwBadRequestException();\n  }\n\n  // TS correctly infers result.data now\n  return sendInvite(result.data);\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Task Hook with SWR Mutation\nDESCRIPTION: Defines a custom React hook that uses SWR mutation to update tasks. It integrates with the Supabase client and allows passing partial task data with a required ID field.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/running_project_supabase_data_fetching_supabase_data_writing_27.md#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport useSWRMutation from 'swr/mutation';\nimport useSupabase from '~/core/hooks/use-supabase';\nimport type Task from '~/lib/tasks/types/task';\nimport { updateTask } from '~/lib/tasks/mutations';\n\ntype TaskPayload = Partial<Task> & { id: number };\n\nfunction useUpdateTaskMutation() {\n  const client = useSupabase();\n  const key = ['tasks'];\n\n  return useSWRMutation(key, async (_, { arg: task }: { arg: TaskPayload }) => {\n    return updateTask(client, task);\n  });\n}\n\nexport default useUpdateTaskMutation;\n```\n\n----------------------------------------\n\nTITLE: Rollup Configuration for Widget Bundling\nDESCRIPTION: JavaScript configuration file for Rollup that bundles the React component, CSS styles, and other assets into a single JavaScript file. It includes environment configuration, plugins for TypeScript, Babel, PostCSS, and optimization options.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/building_javascript_widget_1.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport babel from '@rollup/plugin-babel';\nimport commonjs from '@rollup/plugin-commonjs';\nimport nodeResolve from '@rollup/plugin-node-resolve';\nimport replace from '@rollup/plugin-replace';\nimport terser from '@rollup/plugin-terser';\nimport typescript from '@rollup/plugin-typescript';\nimport { config } from 'dotenv';\nimport { parseArgs } from 'node:util';\nimport injectProcessEnv from 'rollup-plugin-inject-process-env';\nimport nodePolyfills from 'rollup-plugin-polyfill-node';\nimport postcss from 'rollup-plugin-postcss';\nimport tsConfigPaths from 'rollup-plugin-tsconfig-paths';\nimport { visualizer } from 'rollup-plugin-visualizer';\n\nconst args = parseArgs({\n  options: {\n    environment: {\n      type: 'string',\n      short: 'e',\n      default: 'development',\n    },\n    configuration: {\n      type: 'string',\n      short: 'c',\n    },\n  },\n});\n\nconst env = args.values.environment;\nconst production = env === 'production';\nlet environmentVariablesPath = './.env';\n\nconsole.log(`Building widget for ${env} environment...`);\n\nif (production) {\n  environmentVariablesPath += '.production';\n}\n\nconst ENV_VARIABLES = config({\n  path: environmentVariablesPath,\n}).parsed;\n\nconst fileName = ENV_VARIABLES.WIDGET_NAME || 'makerdesk-widget.js';\n\nexport default {\n  input: './src/index.tsx',\n  output: {\n    file: `dist/${fileName}`,\n    format: 'iife',\n    sourcemap: false,\n    inlineDynamicImports: true,\n    globals: {\n      'react/jsx-runtime': 'jsxRuntime',\n      'react-dom/client': 'ReactDOM',\n      react: 'React',\n    },\n  },\n  plugins: [\n    tsConfigPaths({\n      tsConfigPath: './tsconfig.json',\n    }),\n    replace({ preventAssignment: true }),\n    typescript({\n      tsconfig: './tsconfig.json',\n    }),\n    nodeResolve({\n      extensions: ['.tsx', '.ts', '.json', '.js', '.jsx', '.mjs'],\n      browser: true,\n      dedupe: ['react', 'react-dom'],\n    }),\n    babel({\n      babelHelpers: 'bundled',\n      presets: [\n        '@babel/preset-typescript',\n        [\n          '@babel/preset-react',\n          {\n            runtime: 'automatic',\n            targets: '>0.1%, not dead, not op_mini all',\n          },\n        ],\n      ],\n      extensions: ['.js', '.jsx', '.ts', '.tsx', '.mjs'],\n    }),\n    postcss({\n      extensions: ['.css'],\n      minimize: false,\n      extract: false,\n      inject: false\n    }),\n    commonjs(),\n    nodePolyfills({\n      exclude: ['crypto'],\n    }),\n    injectProcessEnv(ENV_VARIABLES),\n    terser({\n      ecma: 2020,\n      mangle: { toplevel: true },\n      compress: {\n        module: true,\n        toplevel: true,\n        unsafe_arrows: true,\n        drop_console: true,\n        drop_debugger: true,\n      },\n      output: { quote_style: 1 },\n    }),\n    visualizer(),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Example of Function Parameters in TypeScript React Components\nDESCRIPTION: Demonstrates the preferred method of using object parameters for functions with multiple arguments of the same type in TypeScript React components.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/commands_cors_develop_firebase_security_rules_5.md#2025-04-22_snippet_46\n\nLANGUAGE: tsx\nCODE:\n```\nfunction makeDiv(params: { width: number, height: number}) {}\n\nconst height = 10;\nconst width = 40;\n\n// Okay, now it looks better!\nconst div = makeDiv({ height, width });\n```\n\n----------------------------------------\n\nTITLE: Sending an HTML Email using the Mailer in TypeScript\nDESCRIPTION: Example function demonstrating how to send an HTML email using the Makerkit mailer system. It imports `getMailer` from '@kit/mailers', retrieves the mailer instance, and calls the `sendEmail` method with recipient (`to`), sender (`from`), subject, and an HTML message body using the `html` property. The function returns a promise that resolves upon successful sending.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/development_authentication_emails_email_configuration_94.md#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nimport { getMailer } from '@kit/mailers';\n\nasync function sendEmail(params: {\n  from: string;\n  to: string;\n}) {\n  const mailer = await getMailer();\n\n  return mailer.sendEmail({\n    to: params.from,\n    from: params.to,\n    subject: 'Hello',\n    html: '<h1>Hello, World!</h1>'\n  });\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing useCookieConsent Hook in React\nDESCRIPTION: Shows the usage of the useCookieConsent hook for managing cookie consent state in a React component. The hook provides methods to update the consent status.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/paddle_per_seat_billing_stripe_90.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst {\n  consent,\n  updateConsentSettings,\n  getConsent,\n  setConsent,\n} = useCookieConsent();\n```\n\n----------------------------------------\n\nTITLE: Run End-to-End Tests Command\nDESCRIPTION: Command to run end-to-end tests and exit upon completion.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/uploading_data_to_storage_writing_data_to_supabase_data_fetching_77.md#2025-04-22_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nnpm test:e2e\n```\n\n----------------------------------------\n\nTITLE: Resetting and Updating Supabase Schema\nDESCRIPTION: Commands for resetting migrations and generating new TypeScript types after schema changes\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/supabase_clients_data_fetching_adding_pages_63.md#2025-04-22_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\npnpm run supabase:web:reset\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm run supabase:web:typegen\n```\n\n----------------------------------------\n\nTITLE: Applying Database Changes with Supabase CLI Commands\nDESCRIPTION: Bash commands to apply the SQL changes to the Supabase database and generate TypeScript types for the new functions. The first command resets the database, and the second generates type definitions for web applications.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/payments_billing_6.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\npnpm run supabase:db:reset\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm run supabase:web:typegen\n```\n\n----------------------------------------\n\nTITLE: Accessing Dynamic URL Parameters in Remix\nDESCRIPTION: Demonstrates how to access dynamic route parameters from URLs like /dashboard/[organization]/[project] in loader functions\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/user_sdk_sdk_ci_tests_84.md#2025-04-22_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { LoaderArgs } from '@remix-run/node';\n\nexport async function loader(args: LoaderArgs) {\n  const organization = args.params.organization;\n  const project = args.params.project;\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Factor Authentication in Firebase Auth (Typescript)\nDESCRIPTION: This Typescript snippet shows how to enable Multi-Factor Authentication (MFA) for the MakerKit application. The critical setting is 'enableMultiFactorAuth', which should be set to 'true'. The prerequisite is that the app must be upgraded to Google Cloud Identity Platform via the Firebase Console. MFA enables SMS-based second-factor authentication for signed-in users. This setting influences routes and authentication flows and must be coordinated with Firebase console support.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/architecture_api_guards_app_check_2.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nauth: {\n  // flip this to \"true\"\n  enableMultiFactorAuth: true,\n}\n```\n\n----------------------------------------\n\nTITLE: Building Ticket Status Form Component in React TSX\nDESCRIPTION: Creates a React component for the ticket status form using React Hook Form and Shadcn UI components. It handles form submission and status updates.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/data_fetching_3.md#2025-04-22_snippet_28\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\n// all the imports previously added ...\n\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n} from '@kit/ui/form';\nimport { Heading } from '@kit/ui/heading';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@kit/ui/select';\n\nimport { Tables } from '~/lib/database.types';\n\nimport { UpdateTicketStatusSchema } from '../_lib/schema/update-ticket-status.schema';\nimport { updateTicketStatusAction } from '../_lib/server/server-actions';\n\n// ... rest of the code\n\nfunction StatusSelect(props: {\n  status: Tables<'tickets'>['status'];\n  ticketId: string;\n  disabled: boolean;\n}) {\n  const form = useForm({\n    resolver: zodResolver(UpdateTicketStatusSchema),\n    defaultValues: {\n      status: props.status,\n      ticketId: props.ticketId,\n    },\n  });\n\n  const [pending, startTransition] = useTransition();\n\n  return (\n    <Form {...form}>\n      <FormField\n        render={({ field }) => {\n          return (\n            <FormItem>\n              <FormLabel>Status</FormLabel>\n\n              <FormControl>\n                <Select\n                  value={form.getValues('status')}\n                  disabled={pending || props.disabled}\n                  onValueChange={(value) => {\n                    form.setValue(\n                      field.name,\n                      value as Tables<'tickets'>['status'],\n                      {\n                        shouldValidate: true,\n                      },\n                    );\n\n                    void form.handleSubmit((value) => {\n                      startTransition(async () => {\n                        await updateTicketStatusAction(value);\n                      });\n                    })();\n                  }}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder={'Status'} />\n                  </SelectTrigger>\n\n                  <SelectContent>\n                    <SelectItem value={'open'}>Open</SelectItem>\n                    <SelectItem value={'closed'}>Closed</SelectItem>\n                    <SelectItem value={'in_progress'}>In Progress</SelectItem>\n                    <SelectItem value={'resolved'}>Resolved</SelectItem>\n                  </SelectContent>\n                </Select>\n              </FormControl>\n\n              <FormDescription>\n                The status of the ticket determines its current state.\n              </FormDescription>\n            </FormItem>\n          );\n        }}\n        name={'status'}\n      />\n    </Form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating SiteHeader Component with Header in React/TSX\nDESCRIPTION: This snippet demonstrates how to create a SiteHeader component using the Header component. It includes a logo, navigation, and account section based on the user's authentication status.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/app_breadcrumbs_bordered_navigation_menu_card_button_39.md#2025-04-22_snippet_31\n\nLANGUAGE: tsx\nCODE:\n```\nexport function SiteHeader(props: { user?: User | null }) {\n  return (\n    <Header\n      logo={<AppLogo />}\n      navigation={<SiteNavigation />}\n      actions={<SiteHeaderAccountSection user={props.user ?? null} />}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Package.json Scripts for Widget Management\nDESCRIPTION: Additional scripts added to the main package.json file to conveniently build and serve the widget using pnpm workspace commands.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/building_javascript_widget_1.md#2025-04-22_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"widget:build\": \"pnpm --filter '@kit/ticket-widget' build\",\n    \"widget:serve\": \"pnpm --filter '@kit/ticket-widget' serve\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Flat-Rate Subscription Environment Variables in Next.js\nDESCRIPTION: Environment variable configuration for Stripe flat-rate subscription price IDs in the production environment\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/deploy_production_introduction_5.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nNEXT_PUBLIC_STARTER_PLAN_MONTHLY_VARIANT_ID=<your-monthly-price-id>\nNEXT_PUBLIC_STARTER_PLAN_YEARLY_VARIANT_ID=<your-yearly-price-id>\n```\n\n----------------------------------------\n\nTITLE: Supabase Environment Variable Configuration\nDESCRIPTION: This snippet shows the environment variable needed for Supabase configuration in the Remix Supabase Starter Kit.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/multi_step_forms_page_stepper_91.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nSUPABASE_SERVICE_ROLE_KEY=\n```\n\n----------------------------------------\n\nTITLE: Adding a New Navigation Link Entry - TypeScript/TSX\nDESCRIPTION: This snippet illustrates how to add a single entry for an 'About' page to the existing links object, following the structure established for other menu items. It is an incremental addition meant to be merged into the existing navigation structure. No additional dependencies are required beyond those in previous snippets. Input is a new menu item; output is the new item added to the static menu data.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/functions_initializing_project_introduction_85.md#2025-04-22_snippet_20\n\nLANGUAGE: TSX\nCODE:\n```\nAbout: {\n  label: 'About',\n  path: '/about',\n},\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Account Billing in Bash\nDESCRIPTION: Configures environment variables to enable or disable billing for personal and team accounts. These settings control which account types can access billing features.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/multi_step_forms_page_stepper_91.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nVITE_ENABLE_PERSONAL_ACCOUNT_BILLING=true\nVITE_ENABLE_TEAM_ACCOUNTS_BILLING=false\n```\n\n----------------------------------------\n\nTITLE: Initializing Firebase Functions with CLI\nDESCRIPTION: This command initializes Firebase Functions within your working Makerkit project environment. It presupposes an existing project structure and guides the setup process through Firebase CLI, creating necessary configuration files. Ensure Firebase Tools are installed and avoid default project creation if not needed.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/app_check_auth_flow_auth_hooks_69.md#2025-04-22_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nfirebase init functions\n```\n\n----------------------------------------\n\nTITLE: Using useUserId Hook for Authentication in Remix\nDESCRIPTION: React hook that returns the current user's ID from the authentication session.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/app_check_auth_flow_auth_hooks_69.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useUserId } from \"~/core/hooks/use-user-id\";\n\nconst userId = useUserId();\n```\n\n----------------------------------------\n\nTITLE: Defining Plan Configuration Interface in Next.js App\nDESCRIPTION: Example of the basic plan configuration interface used in the application configuration file.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_one_time_payments_stripe_webhooks_payments_11.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n{\n  name: 'Basic',\n  description: 'Unlimited applications and 2-hour onboarding session',\n  price: '$249/year',\n  stripePriceId: 'price_***********',\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Remix Firebase Project with Git\nDESCRIPTION: Commands for setting up the Remix Firebase SaaS template project by either forking from GitHub or cloning directly, followed by initializing Git and installing dependencies.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/development_getting_started_environment_variables_firestore_data_fetching_74.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ngit remote add upstream git@github.com:makerkit/remix-firebase-saas-kit.git\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:makerkit/remix-firebase-saas-kit.git tasks-app\n```\n\nLANGUAGE: bash\nCODE:\n```\ncd tasks-app\nnpm i\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit remote rm origin\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit remote add upstream git@github.com:makerkit/remix-firebase-saas-kit.git\ngit add .\ngit commit -a -m \"Initial Commit\"\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit pull upstream main --allow-unrelated-histories\n```\n\n----------------------------------------\n\nTITLE: Configuring Shared Firebase Locale Variables - dotenv - env\nDESCRIPTION: Defines environment variables shared across all environments in the .env file. The provided snippet sets the DEFAULT_LOCALE key (for example, the default language or region for Firebase), which is used throughout the application for localization and multi-language support. No authentication or secret info should be placed here; this file is safe for settings expected to be consistent and not confidential. Input: N/A; Output: applied at runtime by Node.js or build tools.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/introduction_running_the_application_technical_details_6.md#2025-04-22_snippet_0\n\nLANGUAGE: env\nCODE:\n```\n# firebase\\nDEFAULT_LOCALE=en\n```\n\n----------------------------------------\n\nTITLE: Accessing Account Workspace Data in Client Components\nDESCRIPTION: This TypeScript snippet demonstrates how to access account workspace data using the `useTeamAccountWorkspace` hook in client components. It exposes account information via a hook and should not be used in server components. The data structure comprises account, user, and accounts array, similar to the server counterpart.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/custom_analytics_provider_google_analytics_provider_posthog_analytics_provider_36.md#2025-04-22_snippet_27\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\nimport { useTeamAccountWorkspace } from '@kit/team-accounts/hooks/use-team-account-workspace';\n\nexport default function SomeComponent() {\n  const { account, user, accounts } = useTeamAccountWorkspace();\n\n  // use account, user, and accounts\n}\n```\n\n----------------------------------------\n\nTITLE: Sending OTP via Server Actions\nDESCRIPTION: This TypeScript snippet provides a ready-to-use server action for sending OTP emails in a Supabase and Next.js integrated environment. It demonstrates handling OTP sending results, including success and error scenarios.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/custom_analytics_provider_google_analytics_provider_posthog_analytics_provider_36.md#2025-04-22_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nimport { sendOtpEmailAction } from '@kit/otp/server/server-actions';\n\n// In a form submission handler\nconst result = await sendOtpEmailAction({\n  email: userEmail,\n  purpose: 'password-reset',\n  expiresInSeconds: 1800 // 30 minutes\n});\n\nif (result.success) {\n  // OTP was sent successfully\n} else {\n  // Handle error\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Task Data in a React Component\nDESCRIPTION: This code snippet demonstrates a React component `TasksContainer` that utilizes `useFetchTasks` to fetch and display a list of tasks. It handles loading and error states and displays a list of tasks when data is available. The component relies on various UI components such as `PageLoadingIndicator`, `Alert`, `Heading`, and `Button`. Ensure that these components are available for proper rendering.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/development_getting_started_environment_variables_firestore_data_fetching_74.md#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport PageLoadingIndicator from '~/core/ui/PageLoadingIndicator';\nimport Alert from '~/core/ui/Alert';\nimport Heading from '~/core/ui/Heading';\nimport Button from '~/core/ui/Button';\n\nimport useFetchTasks from '~/lib/tasks/hooks/use-fetch-tasks';\nimport TasksList from '~/components/tasks/TasksList';\nimport { Task } from '~/lib/tasks/types/task';\n\nconst TasksContainer: React.FC<{\n  organizationId: string;\n}> = ({ organizationId }) => {\n  const { status, data: tasks } = useFetchTasks(organizationId);\n\n  if (status === `loading`) {\n    return <PageLoadingIndicator>Loading Tasks...</PageLoadingIndicator>;\n  }\n\n  if (status === `error`) {\n    return (\n      <Alert type={'error'}>\n        Sorry, we encountered an error while fetching your tasks.\n      </Alert>\n    );\n  }\n\n  if (tasks.length === 0) {\n    return <TasksEmptyState />;\n  }\n\n  return (\n    <div className={'flex flex-col space-y-4'}>\n      <div className={'mt-2 flex justify-end'}>\n        <CreateTaskButton>New Task</CreateTaskButton>\n      </div>\n\n      <div className={'flex flex-col space-y-4'}>\n        {tasks.map((task) => {\n          return <TaskListItem task={task} key={task.id} />;\n        })}\n      </div>\n    </div>\n  );\n};\n\nfunction TasksEmptyState() {\n  return (\n    <div\n      className={\n        'flex flex-col items-center justify-center space-y-4 h-full p-24'\n      }\n    >\n      <div>\n        <Heading type={5}>No tasks found</Heading>\n      </div>\n\n      <CreateTaskButton>Create your first Task</CreateTaskButton>\n    </div>\n  );\n}\n\nfunction TasksList({ tasks }: React.PropsWithChildren<{\n  tasks: Task[]\n}>) {\n  return (\n    <div className={'flex flex-col space-y-4'}>\n      {tasks.map((task) => {\n        return <TaskListItem task={task} key={task.id} />;\n      })}\n    </div>\n  );\n}\n\nexport default TasksList;\n\n\nfunction CreateTaskButton(props: React.PropsWithChildren) {\n  return <Button href={'/tasks/new'}>{props.children}</Button>;\n}\n\nexport default TasksContainer;\n```\n\n----------------------------------------\n\nTITLE: Extending Subscription Interface in TypeScript\nDESCRIPTION: Demonstrates how to add a custom 'quantity' property to the OrganizationSubscription interface.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_one_time_payments_stripe_webhooks_payments_35.md#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nexport interface OrganizationSubscription {\n  // ...\n  quantity: number | null;\n}\n```\n\n----------------------------------------\n\nTITLE: Running ngrok for Local Webhook Testing\nDESCRIPTION: Command to run ngrok for exposing the local development server to the internet, enabling webhook testing during development.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/migrations_extending_organizations_organization_hooks_10.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nnpm run ngrok\n```\n\n----------------------------------------\n\nTITLE: Fetching Files from Firebase Storage in Remix.js\nDESCRIPTION: This custom hook fetches a list of files from Firebase Storage for a specific organization. It uses the useStorage hook from reactfire and handles loading and error states.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/setting_up_firebase_custom_fetch_fetching_data_firestore_70.md#2025-04-22_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nfunction useOrganizationAssets() {\n  const storage = useStorage();\n\n  const { setData, setError, setLoading, state } =\n    useRequestState<MediaItem[]>();\n\n  const path = `/${organizationId}/uploads`;\n  const reference = ref(storage, path);\n\n  useEffect(() => {\n    void (async () => {\n      try {\n        const result = await list(reference);\n\n        const items = await Promise.all(\n          result.items.map(async (item) => {\n            const url = await getDownloadURL(item);\n\n            return url;\n          })\n        );\n\n        setData(items);\n      } catch (e) {\n        setError(e);\n      }\n    })();\n  }, [reference, setData, setError]);\n\n  return state;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CMS Client Interface in TypeScript\nDESCRIPTION: Abstract class defining the interface for a CMS client, including methods for retrieving content items, categories, and tags.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/creating_your_own_cms_client_keystatic_wordpress_62.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport abstract class CmsClient {\n  abstract getContentItems(options?: Cms.GetContentItemsOptions): Promise<{\n    total: number;\n    items: Cms.ContentItem[];\n  }>;\n\n  abstract getContentItemBySlug(params: {\n    slug: string;\n    collection: string;\n  }): Promise<Cms.ContentItem | undefined>;\n\n  abstract getCategories(\n    options?: Cms.GetCategoriesOptions,\n  ): Promise<Cms.Category[]>;\n\n  abstract getCategoryBySlug(slug: string): Promise<Cms.Category | undefined>;\n\n  abstract getTags(options?: Cms.GetTagsOptions): Promise<Cms.Tag[]>;\n\n  abstract getTagBySlug(slug: string): Promise<Cms.Tag | undefined>;\n}\n```\n\n----------------------------------------\n\nTITLE: Tracking Events with Analytics API in TypeScript\nDESCRIPTION: Example of using the trackEvent method to record specific actions or user events in a Makerkit project.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/analytics_api_custom_analytics_provider_google_analytics_provider_57.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nvoid analytics.trackEvent('Button Clicked', {\n  buttonName: 'Submit',\n  page: 'Sign Up',\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Resend API Key in Environment Variables\nDESCRIPTION: Example of setting the Resend API key in the .env file for email functionality in Cloudflare deployment.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/cloudflare_production_environment_variables_supabase_47.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nRESEND_API_KEY=your-api-key\n```\n\n----------------------------------------\n\nTITLE: Setting Default Language in Remix Supabase SaaS Kit (Bash)\nDESCRIPTION: This snippet demonstrates how to set the default language for the application by adding an environment variable to the .env file.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/branding_environment_variables_setup_project_configuration_80.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nDEFAULT_LOCALE=es\n```\n\n----------------------------------------\n\nTITLE: Implementing Next.js Route Handler with Zod Validation\nDESCRIPTION: Shows how to validate request JSON payload in a Next.js Route Handler using Zod, with proper error handling and type safety.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/user_roles_validating_api_input_zod_development_18.md#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { NextRequest } from \"next/server\";\n\nexport async function POST(\n  request: NextRequest\n) {\n  const body = await request.json();\n  const bodyResult = await getBodySchema().safeParseAsync(body);\n\n  if (bodyResult.success === false) {\n    return bodyResult.error;\n  }\n\n  const { displayName, email } = bodyResult.data;\n\n  return sendInvite({ displayName, email });\n}\n\nfunction getBodySchema() {\n  return z.object({\n    displayName: z.string(),\n    email: z.string().email(),\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: RLS Policy: Organization Member Task Access\nDESCRIPTION: RLS policy that allows organization members to read tasks from their organization using the current_user_is_member_of_organization function.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/supabase_not_stopping_tables_not_found_dark_theme_22.md#2025-04-22_snippet_20\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace policy \"Only the owner can delete tasks\"\n    on tasks\n    as restrictive\n    for select\n    to authenticated\n    using (\n        current_user_is_member_of_organization(organization_id)\n    );\n```\n\n----------------------------------------\n\nTITLE: Emitting App Events for Analytics Tracking\nDESCRIPTION: TypeScript code showing how to use the App Events system to emit events in components. This demonstrates the recommended centralized approach for tracking analytics in Makerkit applications.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/supabase_client_clone_repository_common_commands_56.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useAppEvents } from '@kit/shared/events';\n\nfunction SomeComponent() {\n  const { emit } = useAppEvents();\n\n  const handleSignUp = (userId: string) => {\n    emit({ type: 'user.signedUp', payload: { userId } });\n  };\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Plans Table with Quotas in Supabase\nDESCRIPTION: SQL to create a plans table that stores subscription plan details including task quotas. The table maps plans to Stripe Price IDs for billing integration.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/theming_how_to_version_0_6_0_81.md#2025-04-22_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\ncreate table plans (\n  name text not null,\n  price_id text not null,\n  task_quota int not null,\n  primary key (product_id)\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing an Info Alert Component in React\nDESCRIPTION: Demonstrates the creation of an informative Alert component using the 'info' variant from Shadcn UI in a React application.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/multi_step_forms_page_shadcn_40.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { InfoIcon } from 'lucide-react';\n\nimport { Alert, AlertDescription, AlertTitle } from '@kit/ui/alert';\n\nexport default function InfoAlertDemo() {\n  return (\n    <Alert variant={'info'}>\n      <InfoIcon className=\"h-5 w-5\" />\n\n      <AlertTitle>\n        <span>This is an info alert</span>\n      </AlertTitle>\n\n      <AlertDescription>\n        This is the description of the alert.\n      </AlertDescription>\n    </Alert>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Variables for Nodemailer in Next.js Firebase SaaS Kit\nDESCRIPTION: Environment variables required to set up email functionality using Nodemailer in a Makerkit application. These variables should be stored in a secure environment and are used for sending emails like user invitations.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/environment_variables_setup_project_configuration_set_up_emails_9.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nEMAIL_HOST=\nEMAIL_PORT=587\nEMAIL_USER=\nEMAIL_PASSWORD=\nEMAIL_SENDER='MakerKit Team <info@makerkit.dev>'\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication Providers in MakerKit\nDESCRIPTION: Configuration options for enabling different authentication methods in the global configuration file, including email/password, phone, email link, and OAuth providers.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/app_check_auth_flow_auth_hooks_69.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nauth: {\n  enableMultiFactorAuth: true,\n  providers: {\n    emailPassword: true,\n    phoneNumber: false,\n    emailLink: false,\n    oAuth: [GoogleAuthProvider],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PostHog Environment Variables in Bash\nDESCRIPTION: Sets required PostHog environment variables in a .env file: `VITE_POSTHOG_KEY` (the project key) and `VITE_POSTHOG_HOST` (the PostHog instance host URL). These are necessary for the PostHog provider to connect and send data.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/analytics_api_custom_analytics_provider_google_analytics_provider_57.md#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nVITE_POSTHOG_KEY=your-project-key\nVITE_POSTHOG_HOST=your-host\n```\n\n----------------------------------------\n\nTITLE: Installing and Setting Up Pnpm\nDESCRIPTION: Installs Pnpm globally using npm, which is required to manage project dependencies in the Makerkit. The command should be executed in an environment with Node.js and npm installed.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/going_to_production_clone_repository_code_health_66.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -g pnpm\n```\n\n----------------------------------------\n\nTITLE: Installing Tailwind Animations Plugin\nDESCRIPTION: Configuration for adding animation support using tailwindcss-animate plugin in the Tailwind configuration file.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/running_project_supabase_data_fetching_supabase_data_writing_27.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nnpm i tailwindcss-animate\n```\n\nLANGUAGE: javascript\nCODE:\n```\nplugins: [\n  require('tailwindcss-animate')\n]\n```\n\n----------------------------------------\n\nTITLE: Stripe Webhook Validation Implementation\nDESCRIPTION: Code for validating incoming Stripe webhooks using signature verification.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_configuration_stripe_one_time_payments_stripe_webhooks_82.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst signature = req.headers['stripe-signature'];\n\n// verify signature header is not missing\nif (!signature) {\n  return throwBadRequestException(res);\n}\n\nconst rawBody = await getRawBody(req);\nconst stripe = await getStripeInstance();\n\nconst event = stripe.webhooks.constructEvent(\n  rawBody,\n  signature,\n  webhookSecretKey\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Testimonials Translations in JSON\nDESCRIPTION: This snippet shows the JSON structure for adding testimonial-related translations to the localization file. It includes various messages and labels used in the testimonial submission process.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/sentry_monitoring_notifications_configuration_51.md#2025-04-22_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"welcomeMessage\": \"We'd love to hear your feedback!\",\n  \"welcomeMessageDescription\": \"Your opinion helps us improve our service.\",\n  \"textButtonText\": \"Write a review\",\n  \"videoButtonText\": \"Record a video review\",\n  \"backButtonText\": \"Choose a different review type\",\n  \"customerName\": \"Your Name\",\n  \"testimonial\": \"Testimonial\",\n  \"rating\": \"Rating\",\n  \"submitting\": \"Submitting...\",\n  \"submitTestimonial\": \"Submit Testimonial\",\n  \"errorTitle\": \"Sorry, something went wrong\",\n  \"errorDescription\": \"Apologies, we were unable to submit your video review. Please try again later.\",\n  \"customerNameDescription\": \"Your name will be displayed with your video review\",\n  \"recording\": \"Recording... {{timer}}\",\n  \"startRecording\": \"Start Recording\",\n  \"stopRecording\": \"Stop Recording\",\n  \"discardAndRetry\": \"Discard and retry\",\n  \"successTitle\": \"Thank you!\",\n  \"successDescription\": \"Your feedback helps us improve our services. We appreciate your time!\",\n  \"wallOfLove\": \"Wall of Love\",\n  \"videoTestimonialBy\": \"Video testimonial by {{customerName}}\",\n  \"clickToPlay\": \"Click to play video testimonial\",\n  \"videoTagNotSupported\": \"Your browser does not support the video tag.\",\n  \"moreTestimonials\": \"{{count}} more testimonials\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Words Per File\nDESCRIPTION: Command to generate kit documentation with a custom word limit per file. Default is 5000 words per file.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnode index.js kits 4000\n```\n\n----------------------------------------\n\nTITLE: Setting Upstream Repository for Updates\nDESCRIPTION: Commands for adding the original Makerkit repository as an upstream source to fetch future updates.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/user_roles_validating_api_input_zod_development_18.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ngit remote add upstream git@github.com:makerkit/next-supabase-saas-kit.git\n```\n\n----------------------------------------\n\nTITLE: Rendering Downloaded Images from Firebase Storage in a React Component (TypeScript)\nDESCRIPTION: Presents a component that uses the useOrganizationAssets hook to display a set of images from Firebase Storage. Handles loading, error, and renders an img tag for each item in the data array. Requires the custom hook and correct data typing; designed as a React functional component.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/custom_fetch_fetching_data_firestore_making_api_requests_4.md#2025-04-22_snippet_13\n\nLANGUAGE: TSX\nCODE:\n```\nfunction MyImages() {\n  const { data, loading, error } = useOrganizationAssets();\n\n  if (loading) {\n    return <p>Loading...</p>;\n  }\n\n  if (error) {\n    return <p>We could not fetch your images :(</p>;\n  }\n\n  return (\n    <div className={'flex flex-col space-y-2'}>\n      {data.map(image => {\n        return <img src={image} key={image} />\n      })}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Handling OPTIONS Requests in Request Handler\nDESCRIPTION: Implementation of OPTIONS request handler for CORS preflight in a request handler function.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/setting_up_firebase_custom_fetch_fetching_data_firestore_70.md#2025-04-22_snippet_32\n\nLANGUAGE: tsx\nCODE:\n```\nexport function handler(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n  withCors(res);\n\n  if (req.method === `OPTIONS`) {\n     // add the method you want to allow\n     res.setHeader('Access-Control-Allow-Methods', 'GET');\n\n     return res.end();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Run Mock Stripe Server Command\nDESCRIPTION: Command to run a mock Stripe server for testing without connecting to the actual Stripe service.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/uploading_data_to_storage_writing_data_to_supabase_data_fetching_77.md#2025-04-22_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nnpm run stripe:mock-server\n```\n\n----------------------------------------\n\nTITLE: Using Custom OAuth Providers in MakerKit Configuration\nDESCRIPTION: Adding custom OAuth providers to the authentication configuration array alongside standard providers.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/app_check_auth_flow_auth_hooks_69.md#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\noAuth: [\n  GoogleAuthProvider,\n  MicrosoftAuthProvider,\n  AppleAuthProvider\n],\n```\n\n----------------------------------------\n\nTITLE: Assigning Role Permissions\nDESCRIPTION: SQL commands to assign newly created permissions to specific roles in the role_permissions table.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/marketing_pages_migrations_permissions_and_roles_45.md#2025-04-22_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\ninsert into public.role_permissions (role, permission) values ('owner', 'tasks.write');\ninsert into public.role_permissions (role, permission) values ('owner', 'tasks.delete');\n```\n\n----------------------------------------\n\nTITLE: Consuming Organization Data Hook in a React Component - TypeScript\nDESCRIPTION: Demonstrates the use of the custom useOrganizationQuery hook within a functional React component to fetch and render organization data. Handles loading and error states, rendering based on the hook's output. The component expects an 'organizationId' prop and displays the organization name upon successful fetch. Dependencies: the local useOrganizationQuery hook.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/auth_setup_authentication_blog_16.md#2025-04-22_snippet_16\n\nLANGUAGE: TSX\nCODE:\n```\nimport { useOrganizationQuery } from './use-organization-query';\n\nfunction OrganizationCard({ organizationId }) {\n  const {\n    data: organization,\n    isLoading,\n    error\n  } = useOrganizationQuery(organizationId);\n\n  /* data is loading */\n  if (isLoading) {\n    return <div>Loading...</div>\n  }\n\n  /* request errored */\n  if (error) {\n    return <div>Error!</div>\n  }\n\n  /* request successful, we can access \"organization\" */\n  return <div>{organization.name}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Email Sending Implementation\nDESCRIPTION: Code for sending emails using the sendEmail function with TypeScript interface definition.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/uploading_data_to_storage_writing_data_to_supabase_data_fetching_77.md#2025-04-22_snippet_27\n\nLANGUAGE: tsx\nCODE:\n```\ninterface SendEmailParams {\n  from: string;\n  to: string;\n  subject: string;\n  text?: string;\n  html?: string;\n}\n\nimport { sendEmail } from '~/core/email/send-email';\n\nfunction sendTransactionalEmail() {\n  const sender = configuration.email.senderAddress;\n\n  return sendEmail({\n    to: `youruser@email.com`,\n    from: sender,\n    subject: `Achievement Unlocked!`,\n    html: `Yay, you unlocked an achievement!`,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Project Dialog Component in React\nDESCRIPTION: This code defines a React component for a dialog to create new projects. It uses React hooks, form validation with Zod, and custom UI components.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/projects_data_model_53.md#2025-04-22_snippet_36\n\nLANGUAGE: TSX\nCODE:\n```\n'use client';\n\nimport { useState, useTransition } from 'react';\n\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { useForm } from 'react-hook-form';\n\nimport { useTeamAccountWorkspace } from '@kit/team-accounts/hooks/use-team-account-workspace';\nimport { Button } from '@kit/ui/button';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from '@kit/ui/dialog';\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n} from '@kit/ui/form';\nimport { Input } from '@kit/ui/input';\n\nimport { CreateProjectSchema } from '../_lib/schema/create-project-schema';\nimport { createProjectAction } from '../_lib/server/server-actions';\n\nexport function CreateProjectDialog(props: React.PropsWithChildren) {\n  const [isOpen, setIsOpen] = useState(false);\n\n  return (\n    <Dialog open={isOpen} onOpenChange={setIsOpen}>\n      <DialogTrigger asChild>{props.children}</DialogTrigger>\n\n      <DialogContent>\n        <DialogHeader>\n          <DialogTitle>Create Project</DialogTitle>\n\n          <DialogDescription>\n            Create a new project for your team.\n          </DialogDescription>\n        </DialogHeader>\n\n        <CreateProjectDialogForm\n          onCancel={() => setIsOpen(false)}\n          onCreateProject={() => setIsOpen(false)}\n        />\n      </DialogContent>\n    </Dialog>\n  );\n}\n\nfunction CreateProjectDialogForm(props: {\n  onCreateProject?: (name: string) => unknown;\n  onCancel?: () => unknown;\n}) {\n  const {\n    account: { id: accountId },\n  } = useTeamAccountWorkspace();\n\n  const form = useForm({\n    resolver: zodResolver(CreateProjectSchema),\n    defaultValues: {\n      name: '',\n      accountId,\n    },\n  });\n\n  const [pending, startTransition] = useTransition();\n\n  return (\n    <Form {...form}>\n      <form\n        className={'flex flex-col space-y-4'}\n        onSubmit={form.handleSubmit((data) => {\n          startTransition(async () => {\n            await createProjectAction(data);\n          });\n        })}\n      >\n        <FormField\n          name={'name'}\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Project Name</FormLabel>\n\n              <FormControl>\n                <Input\n                  data-test={'project-name-input'}\n                  required\n                  min={3}\n                  max={50}\n                  type={'text'}\n                  placeholder={''}\n                  {...field}\n                />\n              </FormControl>\n\n              <FormDescription>Enter a name for your project (Ex. Accounting)</FormDescription>\n            </FormItem>\n          )}\n        />\n\n        <div className={'flex justify-end space-x-2'}>\n          <Button variant={'outline'} type={'button'} onClick={props.onCancel}>\n            Cancel\n          </Button>\n\n          <Button disabled={pending}>Create Project</Button>\n        </div>\n      </form>\n    </Form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Organization Interface in TypeScript\nDESCRIPTION: This code snippet defines the interface for an Organization in the Makerkit boilerplate. It includes properties for name, timezone, logo URL, subscription details, customer ID, and a record of members with their roles.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/theming_how_to_version_0_6_0_81.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype UserId = string;\n\ninterface Organization {\n  name: string;\n  timezone?: string;\n  logoURL?: string | null;\n  subscription?: OrganizationSubscription;\n  customerId?: string;\n\n  members: Record<UserId, {\n    role: number;\n    user: Reference;\n  }>;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing InBucket Local Development Email Server (Bash)\nDESCRIPTION: Specifies the default URL where the InBucket web interface is accessible when running Supabase locally via `supabase start`. InBucket is a tool that captures emails sent during development, allowing developers to view and test email functionality (like verification, password reset, invites) without sending actual emails.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/database_webhooks_legal_pages_marketing_pages_64.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nhttp://localhost:54324\n```\n\n----------------------------------------\n\nTITLE: Creating Attachments Storage Bucket in SQL\nDESCRIPTION: This SQL snippet creates a private 'attachments' storage bucket in Supabase. The bucket is used to store attachments added to messages by the support team, with access restricted to authenticated users.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/database_4.md#2025-04-22_snippet_16\n\nLANGUAGE: sql\nCODE:\n```\n-- Storage bucket for attachments\ninsert into\n  storage.buckets (id, name, PUBLIC)\nvalues\n  ('attachments', 'attachments', false);\n```\n\n----------------------------------------\n\nTITLE: Importing and Using the Stepper Component in React\nDESCRIPTION: Example of how to import and use the Stepper component with basic configuration. The component displays a series of steps in a process with visual feedback on the current step.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stepper_components_application_configuration_61.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stepper } from '@kit/ui/stepper';\n\nfunction MyComponent() {\n  return (\n    <Stepper\n      steps={['Step 1', 'Step 2', 'Step 3']}\n      currentStep={1}\n      variant=\"default\"\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Structured Logging for Error Handling\nDESCRIPTION: Shows how to implement structured logging for server-side operations with context information, proper error handling, and comprehensive logging of both success and failure cases.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/llms_migration_from_makerkit_v1_navigating_codebase_49.md#2025-04-22_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nconst ctx = {\n  name: 'create-note',\n  userId: user.id,\n  noteId: note.id\n};\n\nlogger.info(ctx, 'Creating new note...');\n\ntry {\n  await createNote();\n  logger.info(ctx, 'Note created successfully');\n} catch (error) {\n  logger.error(ctx, 'Failed to create note', { error });\n  throw error;\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Loading of Analytics Script\nDESCRIPTION: React component that conditionally loads a Google Analytics script based on the user's cookie consent.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/ai_text_editor_cookie_banner_feedback_popup_24.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCookieConsent } from 'plugins/cookie-banner';\n\nfunction MyAnalyticsScript() {\n  const consent = useCookieConsent();\n\n  if (consent === 'accepted') {\n    return (\n      <script\n        async\n        src=\"https://www.googletagmanager.com/gtag/js?id=UA-XXXXXX-X\"\n      />\n    );\n  }\n\n  return null;\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Firebase Emulators\nDESCRIPTION: Command to start Firebase emulators for Authentication, Firestore, and Storage with data import from firebase-seed directory.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/develop_firebase_security_rules_emails_encrypting_secrets_71.md#2025-04-22_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nnpm run firebase:emulators:start\n```\n\n----------------------------------------\n\nTITLE: Setting CMS Client in Environment Variables\nDESCRIPTION: Example of setting the CMS client to 'wordpress' in the .env file for Cloudflare deployment.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/cloudflare_production_environment_variables_supabase_47.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nCMS_CLIENT=wordpress\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Structure for Support Tickets Page (TSX)\nDESCRIPTION: This TSX code defines the default export React component for the Support Tickets page, located at `apps/web/home/[account]/tickets/page.tsx`. It utilizes Makerkit's `@kit/ui/page` components (`PageHeader`, `PageBody`) to establish a standard page layout with a title and description. A placeholder comment indicates where the list of support tickets will be rendered.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/realtime_updates_server_components_7.md#2025-04-22_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport { PageHeader, PageBody } from '@kit/ui/page';\n\nexport default function TicketsPage() {\n  return (\n      <>\n        <PageHeader\n          title={'Support Tickets'}\n          description={'Here is the list of the support tickets from your customers'}\n        />\n\n        <PageBody>\n          {/* Add the support tickets list here */}\n        </PageBody>\n      </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: React Component Type Definition Examples\nDESCRIPTION: Examples demonstrating different approaches to typing React components, comparing function parameter patterns for better type safety.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/develop_firebase_security_rules_emails_encrypting_secrets_71.md#2025-04-22_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\nfunction makeDiv(width: number, height: number) {}\n\nconst height = 10;\nconst width = 40;\n\n// correct according to TS, not in practice!\nconst div = makeDiv(height, width);\n```\n\nLANGUAGE: tsx\nCODE:\n```\nfunction makeDiv(params: { width: number, height: number}) {}\n\nconst height = 10;\nconst width = 40;\n\n// Okay, now it looks better!\nconst div = makeDiv({ height, width });\n```\n\n----------------------------------------\n\nTITLE: Installing Shadcn UI Components\nDESCRIPTION: Command to install Shadcn UI components in the React Router Supabase application.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/creating_your_own_cms_client_keystatic_wordpress_62.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add <component> -c ./packages/ui\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add button -c ./packages/ui\n```\n\n----------------------------------------\n\nTITLE: Sending a Basic Notification After User Signup in Remix Supabase SaaS Kit\nDESCRIPTION: Example of sending a simple notification to a user after they sign up using the createNotificationsApi function.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/technical_details_updating_codebase_installation_97.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createNotificationsApi } from '@kit/notifications/api';\nimport { getSupabaseServerAdminClient } from '@kit/supabase/server-admin-client';\n\nasync function sendNotificationAfterSignup(\n  accountId: string,\n) {\n  const client = getSupabaseServerAdminClient();\n  const api = createNotificationsApi(client);\n\n  await api.createNotification({\n    account_id: accountId,\n    body: 'You have successfully signed up!',\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: RLS Policy: Task Creation for Organization Members\nDESCRIPTION: RLS policy that allows any organization member to create tasks within their organization using the current_user_is_member_of_organization function.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/supabase_not_stopping_tables_not_found_dark_theme_22.md#2025-04-22_snippet_21\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace policy \"Only the owner can insert tasks\"\n    on tasks\n    as restrictive\n    for insert\n    to authenticated\n    with check (\n        current_user_is_member_of_organization(organization_id)\n    );\n```\n\n----------------------------------------\n\nTITLE: Making Git Pre-Commit Hook Executable (Bash)\nDESCRIPTION: Changes the file permissions of the '.git/hooks/pre-commit' script, making it executable. This allows Git to run the script automatically before each commit attempt.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/configuring_supabase_database_webhooks_fly_production_environment_variables_95.md#2025-04-22_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\nchmod +x ./.git/hooks/pre-commit\n```\n\n----------------------------------------\n\nTITLE: Using useUserSession Hook for Authentication in Remix\nDESCRIPTION: React hook that returns the current user session containing Firebase auth data and Firestore record. It wraps the UserSessionContext value.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/app_check_auth_flow_auth_hooks_69.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useUserSession } from \"~/core/hooks/use-user-session\";\n\nconst userSession = useUserSession();\n```\n\n----------------------------------------\n\nTITLE: Pushing to GitHub Repository\nDESCRIPTION: Commands to commit and push changes to the GitHub repository\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/deploy_production_introduction_5.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngit add .\ngit commit -m \"<your-commit-message>\"\ngit push origin main\n```\n\n----------------------------------------\n\nTITLE: Identifying Users with Makerkit Analytics API in TypeScript\nDESCRIPTION: Demonstrates using the `identify` method from the Makerkit Analytics API (`@kit/analytics`) to associate a user ID with user properties like email and subscription plan. This helps link tracked events to specific users.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/analytics_api_custom_analytics_provider_google_analytics_provider_57.md#2025-04-22_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nimport { analytics } from '@kit/analytics';\n\nvoid analytics.identify(userId, {\n  email: user.email,\n  plan: user.subscriptionPlan,\n  // ... other user properties\n});\n```\n\n----------------------------------------\n\nTITLE: Formatting the Project with Prettier\nDESCRIPTION: Command to format the project code using Prettier.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/configuring_supabase_database_webhooks_fly_production_environment_variables_95.md#2025-04-22_snippet_39\n\nLANGUAGE: bash\nCODE:\n```\npnpm run format:fix\n```\n\n----------------------------------------\n\nTITLE: Creating RLS Policies for Organization-Based Task Management in Supabase\nDESCRIPTION: RLS policies that restrict update and delete operations on tasks based on the user's role in the organization. Only users with role >= 1 can update or delete tasks.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/theming_how_to_version_0_6_0_81.md#2025-04-22_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace policy \"Only the owner can update tasks\"\n    on tasks\n    as restrictive\n    for update\n    to authenticated\n    using (\n        get_current_user_role(organization_id) >= 1\n    ) with check (\n        get_current_user_role(organization_id) >= 1\n    );\n\ncreate or replace policy \"Only the owner can delete tasks\"\n    on tasks\n    as restrictive\n    for delete\n    to authenticated\n    using (\n        get_current_user_role(organization_id) >= 1\n    );\n```\n\n----------------------------------------\n\nTITLE: Generating Supabase TypeScript Types using PNPM\nDESCRIPTION: This command utilizes PNPM to execute the `supabase:web:typegen` script, which generates TypeScript type definitions based on the current Supabase database schema. This ensures the Supabase client in the web application has accurate type inference for database tables and functions. It should be run after modifying the database schema.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/database_webhooks_legal_pages_marketing_pages_64.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npnpm run supabase:web:typegen\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js Pages for Features\nDESCRIPTION: This example demonstrates how to create a Next.js page that imports feature-specific components. The page is part of a feature-based organization pattern where pages are organized by domain in the pages directory.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/custom_fetch_fetching_data_firestore_making_api_requests_4.md#2025-04-22_snippet_31\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function EventsPage() {\n  return (\n    <RouteShell>\n      <EventsContainer />\n    </RouteShell>\n  );\n}\n\nexport function getServerSideProps(ctx: GetServerSidePropsContext) {\n  return withAppProps(ctx);\n}\n```\n\n----------------------------------------\n\nTITLE: Running Stripe Webhook Listener with npm\nDESCRIPTION: Command to start listening for Stripe webhooks locally using pnpm. This enables developers to receive and process Stripe webhook events during local development.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/lemon_squeezy_metered_usage_one_off_payments_59.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\npnpm run stripe:listen\n```\n\n----------------------------------------\n\nTITLE: Adding ngrok Command to package.json\nDESCRIPTION: Command to add to package.json for running ngrok to test webhook handlers locally. This allows exposing a local server to the internet for webhook testing.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/migrations_extending_organizations_organization_hooks_10.md#2025-04-22_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n\"ngrok\": \"npx ngrok http 3000\"\n```\n\n----------------------------------------\n\nTITLE: Detecting Current Locale with TypeScript\nDESCRIPTION: This snippet explains how to detect the currently selected locale using the `useTranslation` hook from `react-i18next` in a client-side scenario, and using cookies for server-side detection. Dependencies include the `react-i18next` library and knowledge of handling cookies in server-side contexts. The output is the detected language code.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/branding_environment_variables_setup_project_configuration_21.md#2025-04-22_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { useTranslation } from 'react-i18next';\n\nfunction Component() {\n  const { i18n } = useTranslation();\n  const { language } = i18n;\n\n  // use language here\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport getLanguageCookie from '~/i18n/get-language-cookie';\nimport configuration from '~/configuration';\n\nfunction ServerComponent() {\n  const locale = getCurrentLocale();\n\n  // use locale here\n}\n\nfunction getCurrentLocale() {\n  return getLanguageCookie() ?? configuration.site.locale;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Task Management Application Routes\nDESCRIPTION: File structure for creating task management routes in the Remix application, demonstrating how to set up list, new, and individual task pages using Remix's routing conventions.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/development_getting_started_environment_variables_firestore_data_fetching_74.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\n├── routes\n  └──__app\n    └── tasks\n    └── page.tsx\n    └── new.tsx\n    └── $id.tsx\n```\n\n----------------------------------------\n\nTITLE: Configuring Documentation Page Metadata in YAML\nDESCRIPTION: This YAML snippet defines the frontmatter for a documentation page, specifying its title ('Blog') and its display order (1) within its topic section. The 'order' property determines the sequence in which the page appears in navigation or listings.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/ci_tests_running_tests_testing_limitations_12.md#2025-04-22_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n---\n\ntitle: Blog\norder: 1\n---\n```\n\n----------------------------------------\n\nTITLE: Disabling Google Analytics Tracking Options in Bash\nDESCRIPTION: Sets optional environment variables in a .env file to disable automatic page view tracking and tracking on localhost for Google Analytics. Setting these to 'true' modifies the default tracking behavior.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/analytics_api_custom_analytics_provider_google_analytics_provider_57.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nVITE_GA_DISABLE_PAGE_VIEWS_TRACKING=true\nVITE_GA_DISABLE_LOCALHOST_TRACKING=true\n```\n\n----------------------------------------\n\nTITLE: Initializing Git and Configuring Remotes for Next Firebase SaaS Kit\nDESCRIPTION: Commands for setting up Git in a new project folder, adding remote repositories, and fetching updates from the main repository.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/commands_cors_develop_firebase_security_rules_5.md#2025-04-22_snippet_41\n\nLANGUAGE: bash\nCODE:\n```\ncd my-saas\ngit remote rm origin\ngit remote add origin <your-git-repository>\ngit remote add upstream git@github.com:makerkit/next-firebase-saas-kit.git\n```\n\n----------------------------------------\n\nTITLE: Getting Current Organization Data Server-Side (TS)\nDESCRIPTION: Shows the basic server-side usage of `getCurrentOrganization` function with a Supabase client to fetch the current user's default organization data.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/functions_initializing_project_introduction_85.md#2025-04-22_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\nimport getCurrentOrganization from '~/lib/server/organizations/get-current-organization';\\n\\nexport async function GET() {\\n  const supabase = getSupabaseServerClient();\\n  const response = await getCurrentOrganization(supabase);\\n\\n  //\\n}\n```\n\n----------------------------------------\n\nTITLE: Using Cookie Consent Hook in React Components\nDESCRIPTION: Demonstrates how to import and use the useCookieConsent hook to access cookie consent functionality in React components. The hook provides status, accept, reject, and clear functions.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/paddle_per_seat_billing_stripe_90.md#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useCookieConsent } from '@kit/ui/cookie-banner';\n\nfunction MyComponent() {\n  const { status, accept, reject, clear } = useCookieConsent();\n\n  // Use these values and functions as needed\n}\n```\n\n----------------------------------------\n\nTITLE: Running Firebase Emulators with NPM\nDESCRIPTION: This NPM script starts the Firebase emulators for local testing of functions. It depends on an existing Makerkit environment and assumes Firebase Tools are configured correctly. Useful for local development and validation without deploying.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/app_check_auth_flow_auth_hooks_69.md#2025-04-22_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\nnpm run firebase:emulators:start\n```\n\n----------------------------------------\n\nTITLE: Credit-Based Access Policy in SQL\nDESCRIPTION: SQL policy implementation for restricting access based on available credits.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/user_workspace_api_api_billing_api_37.md#2025-04-22_snippet_20\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy tasks_write_policy\n  on public.tasks\n  for select\n  using (\n    (select auth.uid()) === account_id and\n    public.has_credits((select auth.uid()), 1)\n  );\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Billing Plan Structure in TypeScript\nDESCRIPTION: This snippet shows the basic structure for defining a billing plan using the createBillingSchema function. It includes a single product with one plan and no line items.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/google_analytics_provider_posthog_analytics_provider_umami_analytics_provider_88.md#2025-04-22_snippet_44\n\nLANGUAGE: tsx\nCODE:\n```\nexport default createBillingSchema({\n  provider,\n  products: [\n    {\n      id: 'starter',\n      name: 'Starter',\n      description: 'The perfect plan to get started',\n      currency: 'USD',\n      badge: `Value`,\n      plans: [\n        {\n          name: 'Starter Monthly',\n          id: 'starter-monthly',\n          trialDays: 7,\n          paymentType: 'recurring',\n          interval: 'month',\n          lineItems: [],\n        }\n      ],\n    }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Using Modal for Confirmations in React\nDESCRIPTION: This snippet demonstrates a `ConfirmDeleteTaskModal` component that utilizes a `Modal` component to confirm deletion actions. It provides users with an option to confirm before deleting a task, enhancing user experience and safety against accidental deletions.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/development_getting_started_environment_variables_firestore_data_fetching_74.md#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport Modal from '~/core/ui/Modal';\nimport Button from '~/core/ui/Button';\n\nconst ConfirmDeleteTaskModal: React.FC<{\n  isOpen: boolean;\n  setIsOpen: (isOpen: boolean) => void;\n  task: string;\n  onConfirm: () => void;\n}> = ({ isOpen, setIsOpen, onConfirm, task }) => {\n  return (\n    <Modal heading={`Deleting Task`} isOpen={isOpen} setIsOpen={setIsOpen}>\n      <div className={'flex flex-col space-y-4'}>\n        <p>\n          You are about to delete the task <b>{task}</b>\n        </p>\n\n        <p>Do you want to continue?</p>\n\n        <Button block color={'danger'} onClick={onConfirm}>\n          Yep, delete task\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default ConfirmDeleteTaskModal;\n```\n\n----------------------------------------\n\nTITLE: Creating Active Subscription Function\nDESCRIPTION: Function that retrieves active subscription details for a given organization ID.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/supabase_not_stopping_tables_not_found_dark_theme_22.md#2025-04-22_snippet_24\n\nLANGUAGE: plpgsql\nCODE:\n```\ncreate or replace function get_active_subscription(org_id bigint)\nreturns table (\n  period_starts_at timestamptz,\n  period_ends_at timestamptz,\n  price_id text,\n  \"interval\" text\n) as $$\nbegin\n    return query select subscriptions.period_starts_at, subscriptions.period_ends_at, subscriptions.price_id, subscriptions.\"interval\" from public.subscriptions\n    join organizations_subscriptions on subscriptions.id = organizations_subscriptions.subscription_id\n    where organizations_subscriptions.organization_id = org_id and (subscriptions.status = 'active' or subscriptions.status = 'trialing');\nend;\n$$ language plpgsql;\n```\n\n----------------------------------------\n\nTITLE: Detecting Current Locale in React Components\nDESCRIPTION: Shows how to detect the currently selected locale using the `useTranslation` hook from `next-i18next`. It retrieves the language code which can be used in React components.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/environment_variables_setup_project_configuration_set_up_emails_9.md#2025-04-22_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useTranslation } from 'next-i18next';\n\nfunction Component() {\n  const { i18n } = useTranslation();\n  const { language } = i18n;\n\n  // use language here\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Page Props while Using withAppProps (Typescript)\nDESCRIPTION: This Typescript snippet demonstrates how to extend the default MakerKit guard props by retrieving additional data (e.g., from a database) alongside the standard authentication checks. The code first destructures 'props' from 'withAppProps', then fetches supplemental data and merges it into the returned properties. This pattern enables custom logic while leveraging built-in access restrictions.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/architecture_api_guards_app_check_2.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { withAppProps } from '~/lib/props/with-app-props';\n\nexport async function getServerSideProps(\n  ctx: GetServerSidePropsContext\n) {\n  const { props: appProps } =\n    await withAppProps(ctx);\n\n  const data = await getDataFromDb();\n\n  return {\n    props: {\n      ...appProps,\n      data,\n    }\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Task Insertion Hook with SWR Mutation\nDESCRIPTION: Implements a custom hook using SWR's mutation utility to insert tasks via the API. Uses the 'useApiRequest' hook to automatically include the CSRF token in the request.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/call_api_routes_from_client_csrf_token_guarding_api_routes_7.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport useMutation from 'swr/mutation';\nimport { useApiRequest } from '~/core/hooks/use-api';\n\ninterface Task {\n  name: string;\n}\n\nfunction useInsertTask() {\n  const fetcher = useApiRequest();\n  const path = '/api/task';\n\n  return useMutation(\n    path, async (_, data: { arg: Task }) => {\n      return fetcher({\n        path,\n        body: data.arg,\n        method: 'POST'\n      });\n    }\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Environment Variables in Next.js Bash\nDESCRIPTION: Shows a template for environment variables used in a Next.js project, especially for Firebase settings. Key variable names include NEXT_PUBLIC_FIREBASE_*, required for configuring Firebase's public settings. SECRET KEYS are meant to be added to CI pipelines as environment variables rather than static .env files to prevent exposing sensitive data.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/deploying_production_development_getting_started_environment_variables_13.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nNEXT_PUBLIC_FIREBASE_API_KEY=\nNEXT_PUBLIC_FIREBASE_PROJECT_ID=\nNEXT_PUBLIC_FIREBASE_STORAGE_BUCKET=\nNEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID=\nNEXT_PUBLIC_FIREBASE_APP_ID=\nNEXT_PUBLIC_FIREBASE_MEASUREMENT_ID=\nNEXT_PUBLIC_FIREBASE_AUTH_DOMAIN=\nNEXT_PUBLIC_SITE_URL=\nNEXT_PUBLIC_APPCHECK_KEY=\nNEXT_PUBLIC_REQUIRE_EMAIL_VERIFICATION=false\n\nSERVICE_ACCOUNT_CLIENT_EMAIL=\nGCLOUD_PROJECT=\n\n## SECRET KEYS ARE BEST ADDED TO YOUR CI\nSERVICE_ACCOUNT_PRIVATE_KEY=\n\nSTRIPE_SECRET_KEY=\nSTRIPE_WEBHOOK_SECRET=\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Firestore Hook in TypeScript for Event Data Fetching\nDESCRIPTION: A custom React hook that retrieves a list of events from a Firestore collection. The hook uses Firebase's collection reference and Firestore collection data hooks to fetch and return event data with the ID field included.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/notifications_plugins_adding_translations_68.md#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport EventModel from '~/lib/events/types/event-model'\n\nexport function useFetchEvents() {\n  const firestore = useFirestore();\n  const eventsCollection = 'events';\n\n  const collectionRef = collection(\n    firestore,\n    eventsCollection,\n  ) as CollectionReference<EventModel>;\n\n  return useFirestoreCollectionData(collectionRef, {\n    idField: 'id',\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Permissions to PostgreSQL Enum\nDESCRIPTION: SQL commands to add new custom permissions to the app_permissions enum in PostgreSQL. This example adds tasks.write and tasks.delete permissions.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/supabase_clients_data_fetching_adding_pages_63.md#2025-04-22_snippet_18\n\nLANGUAGE: sql\nCODE:\n```\n-- insert new permissions\nalter type public.app_permissions add value 'tasks.write';\nalter type public.app_permissions add value 'tasks.delete';\ncommit;\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Authentication Providers in TypeScript\nDESCRIPTION: This snippet demonstrates configuring authentication providers within a TypeScript object. It shows enabling email/password and phone number authentication while disabling email link authentication and specifying Google and Facebook as OAuth providers. Requires customization of the UI to fully support multiple strategies simultaneously.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/api_routes_vs_server_actions_api_routes_call_api_routes_from_client_19.md#2025-04-22_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nproviders: {\n  emailPassword: true,\n  phoneNumber: true,\n  emailLink: false,\n  oAuth: ['google', 'facebook'] as Provider[]\n},\n```\n\n----------------------------------------\n\nTITLE: Implementing Feature Component with Permission Check\nDESCRIPTION: React component that uses permission check to conditionally render feature content or access denied message.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/subscription_permissions_organizations_lemon_squeezy_23.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Feature() {\n  const userRole = useCurrentUserRole();\n  const canCreateThing = useCreateNewThing(userRole);\n\n  if (!canCreateThing) {\n    return <div>Sorry, you do not have access to this feature. Subscribe?</div>\n  }\n\n  return <FeatureContainer />;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Search Parameters in Remix Routes\nDESCRIPTION: Shows how to access and parse URL search parameters like page and limit from the request URL in loader functions\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/user_sdk_sdk_ci_tests_84.md#2025-04-22_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { LoaderArgs } from '@remix-run/node';\n\nexport async function loader(args: LoaderArgs) {\n  const params = new URL(args.request.url).searchParams;\n  const page = params.get('page');\n  const limit = params.get('limit');\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching a Collection of Documents with Reactfire Hooks\nDESCRIPTION: This custom hook fetches a list of organizations where a user is a member using Firestore queries. It uses Reactfire's useFirestoreCollectionData hook to handle the query and return real-time data updates with appropriate loading states.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/reading_document_reading_documents_list_creating_document_8.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  collection,\n  where,\n  query,\n  CollectionReference,\n} from 'firebase/firestore';\n\nimport { useFirestore, useFirestoreCollectionData } from 'reactfire';\nimport { Organization } from '~/lib/organizations/types/organization';\nimport { ORGANIZATIONS_COLLECTION } from '~/lib/firestore-collections';\n\nexport function useFetchUserOrganizations(userId: string) {\n  const firestore = useFirestore();\n\n  const organizationsCollection = collection(\n    firestore,\n    ORGANIZATIONS_COLLECTION\n  ) as CollectionReference<WithId<Organization>>;\n\n  const userPath = `members.${userId}`;\n  const operator = '!=';\n\n  // we query Firestore for all the organizations\n  // where the user is a member, therefore where he path\n  // members.<user_id> is not null\n  const constraint = where(userPath, operator, null);\n  const organizationsQuery = query(organizationsCollection, constraint);\n\n  return useFirestoreCollectionData(organizationsQuery, {\n    idField: `id`,\n    initialData: [],\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Stripe Webhook Event Types\nDESCRIPTION: Enum definition for the Stripe webhook event types handled by the application.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_one_time_payments_stripe_webhooks_payments_11.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nexport enum StripeWebhooks {\n  Completed = 'checkout.session.completed',\n  SubscriptionDeleted = 'customer.subscription.deleted',\n  SubscriptionUpdated = 'customer.subscription.updated',\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Webhook Secret for Stripe Integration\nDESCRIPTION: Environment variable configuration for the Stripe webhook secret that's displayed after running the listen command. This secret is required for validating incoming webhook events.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/lemon_squeezy_metered_usage_one_off_payments_38.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nSTRIPE_WEBHOOK_SECRET=*your_webhook_secret*\n```\n\n----------------------------------------\n\nTITLE: Running Cypress E2E Tests with UI\nDESCRIPTION: Command to run Cypress end-to-end tests with a graphical user interface for interactive testing.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/setting_up_firebase_custom_fetch_fetching_data_firestore_70.md#2025-04-22_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nnpm run cypress\n```\n\n----------------------------------------\n\nTITLE: Killing Ports Used by Development Servers\nDESCRIPTION: Command to kill all ports used by the Makerkit stack, useful when ports aren't properly released after testing.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/setting_up_firebase_custom_fetch_fetching_data_firestore_70.md#2025-04-22_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\nnpm run killports\n```\n\n----------------------------------------\n\nTITLE: Automated Migration Script for Tailwind CSS Classes in JavaScript\nDESCRIPTION: This script automates the process of updating Tailwind CSS classes and package imports for the 0.11.0 migration. It replaces old color classes with new ones and updates the 'classnames' import to 'clsx'.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/environment_variables_setup_project_configuration_set_up_emails_9.md#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nconst replace = require('replace-in-file');\nconst files = ['src/**/*.tsx', 'src/**/*.css'];\n\nconst promise = () =>\n  new Promise((resolve, reject) => {\n    replace({\n      ...getConfigs(),\n      files,\n    })\n      .then((results) => {\n        results.forEach((result) => {\n          if (result.hasChanged) {\n            console.log('File changed:', result.file);\n          }\n        });\n\n        resolve();\n      })\n      .catch((error) => {\n        console.error('Error occurred:', error);\n\n        reject(error);\n      });\n  });\n\n(async () => {\n  console.log(`Replacing classes in \"${files}\" ...`);\n  await promise();\n  console.log('Done!');\n})();\n\nfunction getConfigs() {\n  return {\n    from: [\n      /black-600/g,\n      /black-500/g,\n      /black-400/g,\n      /black-300/g,\n      /black-200/g,\n      /black-100/g,\n      /black-50/g,\n      \"'classnames'\",\n    ],\n    to: [\n      'dark-900',\n      'dark-900',\n      'dark-800',\n      'dark-700',\n      'dark-600',\n      'dark-500',\n      'dark-400',\n      \"'clsx'\",\n    ],\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Environment Variables for Next.js Firebase SaaS\nDESCRIPTION: This snippet shows the environment variables required for configuring email services in a Next.js Firebase SaaS application. It includes settings for the email host, port, user, password, and sender address.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/develop_firebase_security_rules_emails_encrypting_secrets_71.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nEMAIL_HOST=\nEMAIL_PORT=587\nEMAIL_USER=\nEMAIL_PASSWORD=\nEMAIL_SENDER='MakerKit Team <info@makerkit.dev>'\n```\n\n----------------------------------------\n\nTITLE: Running Remix Development Server for Testing\nDESCRIPTION: Command to start the Remix development server using the testing environment (.env.test).\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/user_sdk_sdk_ci_tests_84.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev:test\n```\n\n----------------------------------------\n\nTITLE: Setting Mailer Provider Environment Variable\nDESCRIPTION: Configuration for specifying the email service provider (nodemailer) in the application environment variables.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/development_authentication_emails_email_configuration_94.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nMAILER_PROVIDER=nodemailer\n```\n\n----------------------------------------\n\nTITLE: SWR Data Fetching Hook Implementation\nDESCRIPTION: Custom React hook using SWR for fetching data from an API endpoint with TypeScript support.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/api_routes_vs_server_actions_api_routes_call_api_routes_from_client_19.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport useSWR from 'swr';\n\nexport function useFetchData() {\n  const key = '/api/data';\n\n  return useSWR<{ hello: string }>([key], async () => {\n    return fetch(key).then(res => res.json());\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Event Type Definitions\nDESCRIPTION: TypeScript interface definition for custom event types, extending the base ConsumerProvidedEventTypes interface with additional event definitions.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_one_time_payments_stripe_webhooks_payments_35.md#2025-04-22_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ConsumerProvidedEventTypes } from '@kit/shared/events';\n\nexport interface MyAppEvents extends ConsumerProvidedEventTypes {\n  'feature.used': { featureName: string };\n  'subscription.changed': { newPlan: string };\n}\n```\n\n----------------------------------------\n\nTITLE: Running Ngrok for Local Webhook Testing\nDESCRIPTION: This bash command runs the ngrok command defined in package.json to start a tunnel for local webhook testing.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/subscription_permissions_organizations_lemon_squeezy_23.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm run ngrok\n```\n\n----------------------------------------\n\nTITLE: Getting Server-Side Supabase Client (TS)\nDESCRIPTION: Demonstrates how to use the `getSupabaseServerClient` function within a server-side context (like a Remix loader or action, indicated by `GET`) to obtain a Supabase client instance for server-side operations.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/functions_initializing_project_introduction_85.md#2025-04-22_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nimport getSupabaseServerClient from '~/core/supabase/server-client';\\n\\nexport function  GET() {\\n  const supabase = getSupabaseServerClient();\\n\\n  // Do something with the supabase client\\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Project Members Table in Supabase\nDESCRIPTION: Creates the project_members junction table that manages the relationship between projects and users, including their role within each project. The table has a composite primary key of project_id and user_id.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/projects_data_model_53.md#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n-- Project members table\nCREATE TABLE IF NOT EXISTS public.project_members (\n  project_id UUID NOT NULL REFERENCES public.projects(id) ON DELETE CASCADE,\n  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,\n  role public.project_role NOT NULL DEFAULT 'member',\n  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),\n  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),\n  PRIMARY KEY (project_id, user_id)\n);\n```\n\n----------------------------------------\n\nTITLE: Project Members Table RLS Policies - SQL\nDESCRIPTION: Row Level Security policies for the project_members table controlling member management operations.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/projects_data_model_53.md#2025-04-22_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nCREATE POLICY select_project_members\n  ON public.project_members\n  FOR SELECT\n  TO authenticated\n  USING (\n    public.is_project_member(project_id)\n  );\n\nCREATE POLICY insert_project_member\n  ON public.project_members\n  FOR INSERT\n  TO authenticated\n  WITH CHECK (\n    public.can_invite_project_member(\n      (SELECT auth.uid()),\n      project_id\n    )\n  );\n\nCREATE POLICY update_project_members\n  ON public.project_members\n  FOR UPDATE\n  TO authenticated\n  USING (\n    public.current_user_can_manage_project_member(\n      role,\n      project_id\n    )\n  )\n  WITH CHECK (\n    public.current_user_can_manage_project_member(\n      role,\n      project_id\n    )\n  );\n\nCREATE POLICY delete_project_members\n  ON public.project_members\n  FOR DELETE\n  TO authenticated\n  USING (\n    public.current_user_can_manage_project_member(\n      role,\n      project_id\n    )\n  );\n```\n\n----------------------------------------\n\nTITLE: Adding New Application from Web Template\nDESCRIPTION: Command to create a new application by copying the web application template into a new directory using git subtree.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/team_account_sidebar_configuration_configuration_cms_api_92.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ngit subtree add --prefix=apps/pdf-chat origin web-branch --squash\n```\n\n----------------------------------------\n\nTITLE: React Hook for Profile Photo Upload using react-query\nDESCRIPTION: A custom React hook that uses react-query's useMutation to handle profile photo uploads. It leverages the uploadUserProfilePhoto function and the Supabase client to provide a cleaner API for components.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/uploading_data_to_storage_writing_data_to_supabase_data_fetching_77.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport function useUploadUserProfilePhotoMutation() {\n  const client = useSupabase();\n\n  return useMutation(async (file: File, userId: string) => {\n    return uploadUserProfilePhoto(client, file, userId);\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing LoadingOverlay Appearance - React - JavaScript\nDESCRIPTION: Passes extra Tailwind CSS classes to the LoadingOverlay and spinner for custom backgrounds and spinner colors. Inputs: className and spinnerClassName props; outputs: visually customized loading experience. Supports brand theming or dark mode overlays.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/bordered_navigation_menu_card_button_cookie_banner_60.md#2025-04-22_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\n<LoadingOverlay\n  className=\"bg-gray-800 text-white\"\n  spinnerClassName=\"text-blue-500\"\n>\n  Processing your request...\n</LoadingOverlay>\n```\n\n----------------------------------------\n\nTITLE: Sending Warning Notification in TypeScript with Supabase\nDESCRIPTION: This snippet demonstrates how to send a warning notification using the createNotificationsApi function. It specifies the 'warning' type for the notification.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/introduction_migration_from_remix_navigating_codebase_67.md#2025-04-22_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\napi.createNotification({\n  account_id: accountId,\n  body: 'Your credit card is about to expire!',\n  type: 'warning',\n});\n```\n\n----------------------------------------\n\nTITLE: Font Configuration CSS\nDESCRIPTION: CSS configuration for setting up default fonts including Inter and Urbanist from Google Fonts.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/team_account_sidebar_configuration_configuration_cms_api_92.md#2025-04-22_snippet_12\n\nLANGUAGE: css\nCODE:\n```\n@import url('//fonts.googleapis.com/css2?family=Inter:wght@300;400;500;700;800&family=Urbanist:wght@500;700&display=swap&display=swap');\n\n--font-sans: -apple-system, Inter, Helvetica, Arial, sans-serif;\n--font-heading: Urbanist, var(--font-sans);\n```\n\n----------------------------------------\n\nTITLE: Creating Plans Table with RLS Policy\nDESCRIPTION: SQL for creating a plans table to store subscription plan details and a policy allowing all authenticated users to read from it. The table includes fields for the plan name, price ID, and task quota.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/server_actions_uploading_data_to_storage_writing_data_to_supabase_30.md#2025-04-22_snippet_22\n\nLANGUAGE: sql\nCODE:\n```\ncreate table plans (\n  name text not null,\n  price_id text not null,\n  task_quota int not null,\n  primary key (product_id)\n);\n```\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy \"Allow all authenticated users to read plans\"\n    on plans\n    as restrictive\n    for select\n    to authenticated\n    using (true);\n```\n\n----------------------------------------\n\nTITLE: Keystatic Environment Configuration\nDESCRIPTION: Environment variable configuration for Keystatic CMS setup including local, cloud, and GitHub storage options.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/team_account_sidebar_configuration_configuration_cms_api_92.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nCMS_CLIENT=keystatic\nVITE_KEYSTATIC_STORAGE_KIND=local # local, cloud, github\nVITE_KEYSTATIC_CONTENT_PATH=content # apps/web/content\nKEYSTATIC_PATH_PREFIX=apps/web\n```\n\n----------------------------------------\n\nTITLE: Enabling Email Link Authentication in Next.js Supabase Project\nDESCRIPTION: This code snippet shows how to enable email link authentication by setting the 'emailLink' property to true in the authentication configuration object.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/adding_app_pages_guarding_pages_updating_sidebar_menu_32.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nproviders: {\n  emailPassword: false,\n  phoneNumber: trfalseue,\n  emailLink: true,\n  oAuth: ['google'] as Provider[]\n},\n```\n\n----------------------------------------\n\nTITLE: Running Makerkit Tests in CI Mode\nDESCRIPTION: This npm script runs Firebase emulators and executes the test pipeline script for CI environments.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_one_time_payments_stripe_webhooks_ci_tests_73.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n\"test\": \"firebase emulators:exec --project demo-makerkit --import ./firebase-seed \\\"sh ./scripts/test.sh\\\"\",\n```\n\n----------------------------------------\n\nTITLE: Implementing Captcha Token Handling in React Component\nDESCRIPTION: Example React component demonstrating how to use the useCaptchaToken hook for handling captcha verification in form submissions.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/cms_api_cms_creating_your_own_cms_client_42.md#2025-04-22_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCaptchaToken } from '@kit/auth/captcha/client';\n\nfunction MyComponent() {\n  const { captchaToken } = useCaptchaToken();\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    const response = await fetch('/my-endpoint', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-captcha-token': captchaToken,\n      },\n      body: JSON.stringify({ message: 'Hello, world!' }),\n    });\n  };\n\n  // your component code\n}\n```\n\n----------------------------------------\n\nTITLE: Running All Cypress Tests in Headless Mode\nDESCRIPTION: Command to run all Cypress tests in headless mode and exit.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/user_sdk_sdk_ci_tests_84.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run cypress:headless\n```\n\n----------------------------------------\n\nTITLE: Guarding Pages by Subscription Status in Remix\nDESCRIPTION: This snippet shows how to guard a page based on the organization's subscription status. It checks if the subscription is active or in trial, redirecting users to the dashboard if not subscribed.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/navigating_codebase_running_the_application_technical_details_78.md#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LoaderFunctionArgs, redirect } from \"@remix-run/node\";\n\nasync function loader(args: LoaderFunctionArgs) {\n  const data = await loadAppData(args);\n  const status = data.organization.subscription?.data?.status;\n\n  // if the subscription is not active, redirect the user to the dashboard\n  if (!isSubscriptionActive(status)) {\n    return redirect('/');\n  }\n\n  // return props to the page\n}\n\nasync function OnlySubscribersPage() {\n  const data = await useLoaderData<typeof loader>();\n  // render the page\n}\n\nfunction isSubscriptionActive(status: string | undefined) {\n  return ['trialing', 'active'].includes(status);\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering New Menu Entry in NavigationMenu (TypeScript)\nDESCRIPTION: Extends the navigation menu JSX by including a component for the new 'About' link. Requires the corresponding link object to be defined and React with TypeScript. Input: JSX update in navigation, Output: About item visible in navigation bar.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/initializing_project_introduction_marketing_site_pages_14.md#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n<NavigationMenu>\n  <NavigationMenuItem link={links.About} />\n  ...\n</NavigationMenu>\n```\n\n----------------------------------------\n\nTITLE: Installing Waitlist Plugin with CLI in Next.js Supabase Project\nDESCRIPTION: Command to install the waitlist plugin using the MakerKit CLI. This adds the plugin to the project's plugins directory.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/waitlist_plugin_plugins_drizzle_supabase_52.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @makerkit/cli@latest plugins install waitlist\n```\n\n----------------------------------------\n\nTITLE: Adding Public Environment Variables in TypeScript\nDESCRIPTION: This snippet shows how to add public environment variables to the client-side by modifying the PUBLIC_ENV object in the public-env.ts file.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/multi_step_forms_page_stepper_91.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @name PUBLIC_ENV\n * @description This is the public environment variables that are available to the client.\n * We use this to expose public environment variables to the client.\n */\nexport const PUBLIC_ENV = {\n  // ... default public vars,\n\n  // Add your public environment variables here ...\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication Providers (Phone Number Example - TSX)\nDESCRIPTION: This snippet shows how to modify the `providers` object in the Makerkit authentication configuration to enable phone number authentication. It sets the `phoneNumber` property to `true` and `emailPassword` to `false`.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/api_routes_vs_server_actions_api_routes_call_api_routes_from_client_19.md#2025-04-22_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nproviders: {\n  emailPassword: false,\n  phoneNumber: true,\n  emailLink: false,\n  oAuth: ['google'] as Provider[],\n},\n```\n\n----------------------------------------\n\nTITLE: Implementing AlertDialog Component in React with ShadcnUI\nDESCRIPTION: This code demonstrates how to create an alert dialog using ShadcnUI components. It imports various AlertDialog components and sets up a dialog with a trigger button, content, header with title and description, and footer with cancel and action buttons.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/multi_step_forms_page_shadcn_40.md#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from '@kit/ui/alert-dialog';\nimport { Button } from '@kit/ui/button';\n\nimport WrapperComponent from '~/components/content/wrapper';\n\nexport default function AlertDialogDemo() {\n  return (\n    <WrapperComponent>\n      <AlertDialog>\n        <AlertDialogTrigger asChild>\n          <Button variant=\"outline\">Show Dialog</Button>\n        </AlertDialogTrigger>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>\n            <AlertDialogDescription>\n              This action cannot be undone. This will permanently delete your\n              account and remove your data from our servers.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel>Cancel</AlertDialogCancel>\n            <AlertDialogAction>Continue</AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </WrapperComponent>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Notifications with Links in Next.js\nDESCRIPTION: Implementation of a notification creation function that includes a clickable link to direct users to specific content.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/sentry_monitoring_notifications_configuration_51.md#2025-04-22_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\napi.createNotification({\n  account_id: accountId,\n  body: 'You have created a task!',\n  link: '/tasks/123',\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a New Marketing Page Component in React\nDESCRIPTION: Demonstrates how to create a new 'Features' page component for the marketing section. It includes meta information, a loader function for server-side data fetching, and the main component structure.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/supabase_clients_data_fetching_adding_pages_63.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// apps/web/app/routes/marketing/features.tsx\nimport { createI18nServerInstance } from '~/lib/i18n/i18n.server';\nimport { SitePageHeader } from '~/routes/marketing/_components/site-page-header';\nimport type { Route } from '~/types/app/routes/marketing/+types/features';\n\nexport const meta = ({ data }: Route.MetaArgs) => {\n  return [\n    {\n      title: data?.title,\n    },\n  ];\n};\n\nexport const loader = async function ({ request }: Route.LoaderArgs) {\n  const { t } = await createI18nServerInstance(request);\n\n  return {\n    title: t('marketing:features'),\n    subtitle: t('marketing:featuresDescription'),\n  };\n};\n\nexport default function FeaturesPage(props: Route.ComponentProps) {\n  const data = props.loaderData;\n\n  return (\n    <div>\n      <SitePageHeader title={data.title} subtitle={data.subtitle} />\n\n      <div className={'container mx-auto py-8'}>\n        <div className=\"grid grid-cols-1 gap-8 md:grid-cols-2 lg:grid-cols-3\">\n          {/* Feature cards */}\n          <FeatureCard\n            title=\"Multi-tenant Support\"\n            description=\"Support for multiple organizations and team accounts\"\n          />\n          <FeatureCard\n            title=\"Authentication\"\n            description=\"Various authentication methods including email, password, and OAuth\"\n          />\n          <FeatureCard\n            title=\"Billing Integration\"\n            description=\"Seamless integration with popular payment providers\"\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction FeatureCard({ title, description }: { title: string; description: string }) {\n  return (\n    <div className=\"rounded-lg border p-6\">\n      <h3 className=\"text-xl font-semibold\">{title}</h3>\n      <p className=\"text-muted-foreground mt-2\">{description}</p>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Tabs Component with Account Settings\nDESCRIPTION: A comprehensive tabs implementation with account and password settings forms. Uses shadcn UI's Tabs components along with Card components for content organization.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/multi_step_forms_page_shadcn_40.md#2025-04-22_snippet_31\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from '@kit/ui/button';\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from '@kit/ui/card';\nimport { Input } from '@kit/ui/input';\nimport { Label } from '@kit/ui/label';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@kit/ui/tabs';\n\nexport default function TabsDemo() {\n  return (\n    <Tabs defaultValue=\"account\" className=\"w-[400px]\">\n      <TabsList className=\"grid w-full grid-cols-2\">\n        <TabsTrigger value=\"account\">Account</TabsTrigger>\n        <TabsTrigger value=\"password\">Password</TabsTrigger>\n      </TabsList>\n      <TabsContent value=\"account\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Account</CardTitle>\n            <CardDescription>\n              Make changes to your account here. Click save when you're done.\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-2\">\n            <div className=\"space-y-1\">\n              <Label htmlFor=\"name\">Name</Label>\n              <Input id=\"name\" defaultValue=\"Pedro Duarte\" />\n            </div>\n            <div className=\"space-y-1\">\n              <Label htmlFor=\"username\">Username</Label>\n              <Input id=\"username\" defaultValue=\"@peduarte\" />\n            </div>\n          </CardContent>\n          <CardFooter>\n            <Button>Save changes</Button>\n          </CardFooter>\n        </Card>\n      </TabsContent>\n      <TabsContent value=\"password\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Password</CardTitle>\n            <CardDescription>\n              Change your password here. After saving, you'll be logged out.\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-2\">\n            <div className=\"space-y-1\">\n              <Label htmlFor=\"current\">Current password</Label>\n              <Input id=\"current\" type=\"password\" />\n            </div>\n            <div className=\"space-y-1\">\n              <Label htmlFor=\"new\">New password</Label>\n              <Input id=\"new\" type=\"password\" />\n            </div>\n          </CardContent>\n          <CardFooter>\n            <Button>Save password</Button>\n          </CardFooter>\n        </Card>\n      </TabsContent>\n    </Tabs>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Tasks Feature File Structure in Next.js\nDESCRIPTION: This snippet shows the file structure for implementing a tasks feature in Next.js, with three main pages: a list view (page.tsx), a creation page (new.tsx), and a dynamic detail page ([id].tsx).\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/deploying_production_development_getting_started_environment_variables_13.md#2025-04-22_snippet_5\n\nLANGUAGE: txt\nCODE:\n```\n├── pages\n  └── tasks\n    └── page.tsx\n    └── new.tsx\n    └── [id].tsx\n```\n\n----------------------------------------\n\nTITLE: Installing Cookie Banner Plugin using Git Subtree\nDESCRIPTION: Command to install the cookie banner plugin using git subtree, adding it to the plugins directory of the repository.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/ai_text_editor_cookie_banner_feedback_popup_24.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit subtree add --prefix plugins/cookie-banner git@github.com:makerkit/next-supabase-saas-kit-plugins.git cookie-banner --squash\n```\n\n----------------------------------------\n\nTITLE: Navigating into the Cloned Project Directory using Bash\nDESCRIPTION: Changes the current working directory to the newly cloned `next-supabase-saas-kit-turbo` project folder. This command is necessary to run subsequent project-specific commands.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/deploy_production_introduction_5.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncd next-supabase-saas-kit-turbo\n```\n\n----------------------------------------\n\nTITLE: Updating Project from Upstream Repository\nDESCRIPTION: Git command to pull the latest changes from the upstream main branch to update the project codebase with new features and bug fixes.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/introduction_migration_from_remix_navigating_codebase_67.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngit pull upstream main\n```\n\n----------------------------------------\n\nTITLE: Using the EmptyState Component in React (JSX)\nDESCRIPTION: Example showing how to use the EmptyState component and its subcomponents (EmptyStateHeading, EmptyStateText, EmptyStateButton) to display a message when no results are found. Imports necessary components from '@kit/ui/empty-state'.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/app_breadcrumbs_bordered_navigation_menu_card_button_39.md#2025-04-22_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport { EmptyState, EmptyStateHeading, EmptyStateText, EmptyStateButton } from '@kit/ui/empty-state';\n\nfunction MyComponent() {\n  return (\n    <EmptyState>\n      <EmptyStateHeading>No results found</EmptyStateHeading>\n      <EmptyStateText>Try adjusting your search or filter to find what you're looking for.</EmptyStateText>\n      <EmptyStateButton>Clear filters</EmptyStateButton>\n    </EmptyState>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Check Organization Task Creation Permission SQL Function\nDESCRIPTION: PostgreSQL function that verifies if an organization can create a new task based on their subscription plan quota.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/theming_how_to_version_0_6_0_81.md#2025-04-22_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace function organization_can_create_task(org_id bigint)\nreturns boolean as $$\ndeclare\n    task_count int;\n    organization_price_id text;\n    plan_task_quota int;\nbegin\n    select get_organization_task_count(org_id)\n        into task_count;\n\n    select price_id\n    into organization_price_id\n    from get_active_subscription(org_id);\n\n    if organization_price_id is null then\n        raise exception 'Organization does not have an active subscription';\n    end if;\n\n    select task_quota from plans where price_id = organization_price_id into plan_task_quota;\n\n    return task_count < plan_task_quota;\nend;\n$$ language plpgsql;\n```\n\n----------------------------------------\n\nTITLE: Creating Git Subtree for Web Application\nDESCRIPTION: Command to create a subtree from the apps/web folder and split it into a separate branch called web-branch.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/team_account_sidebar_configuration_configuration_cms_api_92.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ngit subtree split --prefix=apps/web --branch web-branch\n```\n\n----------------------------------------\n\nTITLE: Defining Site Fonts using next/font/google in Next.js (TSX)\nDESCRIPTION: This code defines a React component (`Fonts`) in `src/components/Fonts.tsx` that configures site-wide fonts using `next/font/google`. It imports the 'Inter' font, sets it up with subsets and weights, and injects CSS variables (`--font-family-sans`, `--font-family-heading`) into the document root using `useServerInsertedHTML`. This version specifically shows the configuration after removing Apple system fonts from the fallback list.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/branding_environment_variables_setup_project_configuration_21.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\nimport { Inter as SansFont } from 'next/font/google';\nimport { useServerInsertedHTML } from 'next/navigation';\n\nconst sans = SansFont({\n  subsets: ['latin'],\n  variable: '--font-family-sans',\n  fallback: ['system-ui', 'Helvetica Neue', 'Helvetica', 'Arial'],\n  preload: true,\n  weight: ['300', '400', '500', '600', '700', '800'],\n});\n\n// replace with your heading font\n// by default, it will use the sans font\nconst heading = sans;\n\nfunction Fonts() {\n  useServerInsertedHTML(() => {\n    return (\n      <style\n        key={'fonts'}\n        dangerouslySetInnerHTML={{\n          __html: `\n          :root {\n            --font-family-sans: ${sans.style.fontFamily}, 'Segoe UI', 'Roboto', 'Ubuntu', 'sans-serif';\n            --font-family-heading: ${heading.style.fontFamily};\n          }\n        `,\n        }}\n      />\n    );\n  });\n\n  return null;\n}\n\nexport default Fonts;\n```\n\n----------------------------------------\n\nTITLE: Executing Makerkit Test Pipeline Script\nDESCRIPTION: This bash script runs the Remix server, Firebase emulators, and Stripe mock server in parallel, executes Cypress tests in headless mode, and cleans up open ports.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_one_time_payments_stripe_webhooks_ci_tests_73.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nset -e\n\nnpm run dev:test & npm run stripe:mock-server &\nnpm run cypress:headless\nsh scripts/kill-ports.sh\n```\n\n----------------------------------------\n\nTITLE: Configuring Stripe Testing Environment\nDESCRIPTION: This environment variable configuration controls whether Stripe testing is enabled.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/ci_tests_running_tests_testing_limitations_12.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nENABLE_STRIPE_TESTING=false\n```\n\n----------------------------------------\n\nTITLE: Structuring Content Folders for Documentation with Numerical Prefixes in Bash\nDESCRIPTION: Example of how to organize content folders with numerical prefixes to control the order of documentation sections. This structure supports nested documentation with index files and subsections.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/architecture_auth_overview_auth_setup_29.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n- content\n  - docs\n    - 01-getting-started\n      - index.mdx\n      - 01-installation.mdx\n      - 02-configuration.mdx\n        - 01-supabase.mdx\n        - 02-firebase.mdx\n      - 03-authentication.mdx\n      - 04-database.mdx\n      - 05-storage.mdx\n      - 06-usage.mdx\n      - 07-deployment.mdx\n        - 01-vercel.mdx\n        - 02-netlify.mdx\n      - 08-questions.mdx\n    - 02-faq\n      - index.mdx\n      - 01-what-is-supabase.mdx\n```\n\n----------------------------------------\n\nTITLE: Tracking Custom Events with Makerkit Analytics API in TypeScript\nDESCRIPTION: Shows how to use the `trackEvent` method from `@kit/analytics` to record specific user actions or events. This example tracks a button click, including relevant properties like the button's name and the page it occurred on.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/custom_analytics_provider_google_analytics_provider_posthog_analytics_provider_36.md#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nvoid analytics.trackEvent('Button Clicked', {\n  buttonName: 'Submit',\n  page: 'Sign Up',\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Customer Ticket Service for Supabase Operations (TypeScript)\nDESCRIPTION: This TypeScript code defines a `CustomerTicketService` class responsible for handling ticket and message creation logic interacting with a Supabase database. It includes methods `createTicket` (inserts a new ticket and its initial message) and `createMessage` (adds a message to an existing ticket). The service uses a Supabase client injected via the constructor and includes logging for operations and errors. It is marked with `server-only` to ensure it runs only on the server.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/building_javascript_widget_1.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport 'server-only';\n\nimport { SupabaseClient } from '@supabase/supabase-js';\n\nimport { getLogger } from '@kit/shared/logger';\n\nimport { Database } from '~/lib/database.types';\n\nexport function createCustomerTicketService(client: SupabaseClient<Database>) {\n  return new CustomerTicketService(client);\n}\n\nclass CustomerTicketService {\n  constructor(private readonly client: SupabaseClient<Database>) {}\n\n  async createTicket(params: { accountId: string; message: string }) {\n    const logger = await getLogger();\n\n    logger.info(params, 'Creating ticket...');\n\n    const ticket = await this.client\n      .from('tickets')\n      .insert({\n        account_id: params.accountId,\n        title: 'New ticket',\n      })\n      .select('id')\n      .single();\n\n    if (ticket.error) {\n      logger.error({ error: ticket.error }, 'Error creating ticket');\n\n      throw ticket.error;\n    }\n\n    // create message\n    const { data, error } = await this.client\n      .from('messages')\n      .insert({\n        ticket_id: ticket.data.id,\n        content: params.message,\n        author: 'customer',\n      })\n      .select(\n        `\n          ticketId: ticket_id,\n          content,\n          author,\n          createdAt: created_at\n        `,\n      )\n      .single();\n\n    if (error) {\n      logger.error({ error }, 'Error creating message');\n\n      throw error;\n    }\n\n    return data;\n  }\n\n  async createMessage(params: { ticketId: string; message: string }) {\n    const logger = await getLogger();\n\n    logger.info(params, 'Creating message...');\n\n    const { data, error } = await this.client\n      .from('messages')\n      .insert({\n        ticket_id: params.ticketId,\n        content: params.message,\n        author: 'customer',\n      })\n      .select(\n        `\n          ticketId: ticket_id,\n          content,\n          author,\n          createdAt: created_at\n        `,\n      )\n      .single();\n\n    if (error) {\n      logger.error(\n        { error, ticketId: params.ticketId },\n        'Error creating message',\n      );\n\n      throw error;\n    }\n\n    logger.info(data, 'Message successfully created');\n\n    return data;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Billing Gateway Service\nDESCRIPTION: Demonstrates how to instantiate the billing gateway service for payment processing\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/user_workspace_api_api_billing_api_37.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createBillingGatewayService } from '@kit/billing-gateway';\n\nconst service = createBillingGatewayService('stripe');\n```\n\n----------------------------------------\n\nTITLE: Configuring Keystatic Environment Variables in Bash\nDESCRIPTION: This bash code block specifies environment configurations necessary for setting up Keystatic as a CMS in a Next.js application. Requirements vary based on the storage option selected, whether local, cloud, or GitHub. Depending on the choice, specific keys and paths should be set up for seamless content management.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/cms_api_cms_creating_your_own_cms_client_42.md#2025-04-22_snippet_6\n\nLANGUAGE: Bash\nCODE:\n```\nCMS_CLIENT=keystatic\n\nNEXT_PUBLIC_KEYSTATIC_STORAGE_KIND=local # local, cloud, github\nKEYSTATIC_PATH_PREFIX=apps/web\nNEXT_PUBLIC_KEYSTATIC_CONTENT_PATH=./content # apps/web/content\n\nKEYSTATIC_STORAGE_KIND=cloud\nKEYSTATIC_STORAGE_PROJECT=project-id\n\nNEXT_PUBLIC_KEYSTATIC_STORAGE_KIND=github\nNEXT_PUBLIC_KEYSTATIC_STORAGE_REPO=makerkit/next-supabase-saas-kit-turbo-demo\nNEXT_PUBLIC_KEYSTATIC_CONTENT_PATH=./content\nKEYSTATIC_GITHUB_TOKEN=github_**********************************************\nKEYSTATIC_PATH_PREFIX=apps/web\n\nNEXT_PUBLIC_KEYSTATIC_CONTENT_PATH=data/content\n```\n\n----------------------------------------\n\nTITLE: Fetching a Single Content Item by Slug\nDESCRIPTION: Demonstrates how to fetch a single content item from a CMS using the getContentItemBySlug function with slug and collection parameters.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stepper_components_application_configuration_61.md#2025-04-22_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createCmsClient } from '@kit/cms';\n\nconst client = await createCmsClient();\n\n// Fetch a single content item\nconst item = await client.getContentItemBySlug({\n  slug: 'hello-world',\n  collection: 'posts'\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Member Count in a Team Account\nDESCRIPTION: Code showing how to retrieve the number of members in a team account using the getMembersCount method. Takes the account ID as a parameter.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/custom_analytics_provider_google_analytics_provider_posthog_analytics_provider_36.md#2025-04-22_snippet_43\n\nLANGUAGE: tsx\nCODE:\n```\nconst api = createTeamAccountsApi(client);\nconst membersCount = await api.getMembersCount('account-id');\n```\n\n----------------------------------------\n\nTITLE: Using Cookie Consent Hook\nDESCRIPTION: React code demonstrating how to use the useCookieConsent hook to retrieve the current consent status.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/ai_text_editor_cookie_banner_feedback_popup_24.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCookieConsent } from 'plugins/cookie-banner';\n\nfunction MyComponent() {\n    const consent = useCookieConsent();\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Project Members with SQL\nDESCRIPTION: SQL function call to add new members to a project with specified roles (member or admin)\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/projects_data_model_53.md#2025-04-22_snippet_18\n\nLANGUAGE: sql\nCODE:\n```\nSELECT public.add_project_member(:project_id, :user_id, 'member'::public.project_role);\n```\n\n----------------------------------------\n\nTITLE: Sending Info Notification in TypeScript with Supabase\nDESCRIPTION: This snippet shows how to send an info notification to a user after they sign up. It uses the createNotificationsApi function with the Supabase client to create and send the notification with the default 'info' type.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/introduction_migration_from_remix_navigating_codebase_67.md#2025-04-22_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createNotificationsApi } from '@kit/notifications/api';\nimport { getSupabaseServerAdminClient } from '@kit/supabase/server-admin-client';\n\nasync function sendNotificationAfterSignup(\n  accountId: string,\n) {\n  const client = getSupabaseServerAdminClient();\n  const api = createNotificationsApi(client);\n\n  await api.createNotification({\n    account_id: accountId,\n    body: 'You have successfully signed up!',\n    type: 'info', // this is the default type, no need to specify it\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth Settings in TypeScript\nDESCRIPTION: TypeScript configuration object for authentication settings including provider options and email confirmation requirements.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/ui_hooks_mdx_15.md#2025-04-22_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\nauth: {\n  requireEmailConfirmation: false,\n  providers: {\n    emailPassword: true,\n    phoneNumber: false,\n    emailLink: false,\n    oAuth: ['google'] as Provider[],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Label Component Example\nDESCRIPTION: A label component demonstration used with a checkbox input, showing proper form accessibility implementation.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/multi_step_forms_page_shadcn_40.md#2025-04-22_snippet_24\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Checkbox } from '@kit/ui/checkbox';\nimport { Label } from '@kit/ui/label';\n\nimport WrapperComponent from '~/components/content/wrapper';\n\nexport default function LabelDemo() {\n  return (\n    <div>\n      <div className=\"flex items-center space-x-2\">\n        <Checkbox id=\"terms\" />\n        <Label htmlFor=\"terms\">Accept terms and conditions</Label>\n      </div>\n    </WrapperComponent>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Firebase Tools Globally\nDESCRIPTION: Command to install Firebase tools package globally if the default commands don't work.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/setting_up_firebase_custom_fetch_fetching_data_firestore_70.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i firebase-tools -g\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Lemon Squeezy\nDESCRIPTION: Environment variables setup for Lemon Squeezy integration including API key, store ID, and signing secret.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/theming_how_to_version_0_6_0_81.md#2025-04-22_snippet_20\n\nLANGUAGE: plaintext\nCODE:\n```\nLEMON_SQUEEZY_API_KEY=<YOUR_KEY>\nLEMON_SQUEEZY_STORE_ID=<YOUR_STORE_ID>\nLEMONS_SQUEEZY_SIGNATURE_SECRET=<a random string>\n```\n\n----------------------------------------\n\nTITLE: Generating Supabase TypeScript Types (Bash)\nDESCRIPTION: Executes the `supabase:web:typegen` script via `pnpm`. This command introspects the Supabase database schema (usually the local one) and generates corresponding TypeScript types, ensuring type safety when interacting with the database from the application code. Should be run after schema changes.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/code_health_common_commands_conventions_48.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\npnpm run supabase:web:typegen\n```\n\n----------------------------------------\n\nTITLE: Stashing Uncommitted Changes in Git\nDESCRIPTION: Commands to temporarily save uncommitted changes and reapply them after updating the project.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/supabase_client_clone_repository_common_commands_56.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit stash\n\n# After updating\ngit stash pop\n```\n\n----------------------------------------\n\nTITLE: Implementing Select Component with Fruit Options\nDESCRIPTION: A customizable select component implementation with a list of fruit options. Uses shadcn UI's Select components with grouped items.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/multi_step_forms_page_shadcn_40.md#2025-04-22_snippet_28\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\n\nimport {\n  Select,\n  SelectContent,\n  SelectGroup,\n  SelectItem,\n  SelectLabel,\n  SelectTrigger,\n  SelectValue,\n} from '@kit/ui/select';\n\nexport default function SelectDemo() {\n  return (\n    <div>\n      <Select>\n        <SelectTrigger className=\"w-[180px]\">\n          <SelectValue placeholder=\"Select a fruit\" />\n        </SelectTrigger>\n        <SelectContent>\n          <SelectGroup>\n            <SelectLabel>Fruits</SelectLabel>\n            <SelectItem value=\"apple\">Apple</SelectItem>\n            <SelectItem value=\"banana\">Banana</SelectItem>\n            <SelectItem value=\"blueberry\">Blueberry</SelectItem>\n            <SelectItem value=\"grapes\">Grapes</SelectItem>\n            <SelectItem value=\"pineapple\">Pineapple</SelectItem>\n          </SelectGroup>\n        </SelectContent>\n      </Select>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Get Entitlement Details Function in PostgreSQL\nDESCRIPTION: Creates a function to retrieve entitlement details and usage data for a specific feature and account.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_billing_checkout_addons_subscription_entitlements_54.md#2025-04-22_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nCREATE OR REPLACE FUNCTION public.get_entitlement(\n  p_account_id UUID, \n  p_feature VARCHAR\n)\nRETURNS TABLE(variant_id VARCHAR(255), entitlement JSONB) \nSECURITY INVOKER \nAS $$\nBEGIN\n  RETURN QUERY\n  SELECT si.variant_id,\n         ent.entitlement AS entitlement\n  FROM public.subscriptions s\n  JOIN public.subscription_items si ON s.id = si.subscription_id\n  JOIN public.plan_entitlements ent ON ent.variant_id = si.variant_id\n  WHERE s.account_id = p_account_id\n    AND ent.feature = p_feature;\nEND;\n$$ LANGUAGE plpgsql;\n```\n\n----------------------------------------\n\nTITLE: Retrieving CSRF Token in TypeScript\nDESCRIPTION: Shows how to retrieve the CSRF token using the useGetCsrfToken hook. This token is needed to protect against CSRF attacks in API requests.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/custom_fetch_fetching_data_firestore_making_api_requests_4.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst getCsrfToken = useGetCsrfToken();\nconst csrfToken = getCsrfToken();\n\nconsole.log(csrfToken) // token\n```\n\n----------------------------------------\n\nTITLE: Configuring Development Environment Variables for Firebase Emulators\nDESCRIPTION: Environment variables setup for local development using Firebase Emulators. Includes configuration for Firebase services like Authentication, Firestore, and Storage with their respective ports and endpoints.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/third_party_auth_providers_authentication_blog_3.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nNEXT_PUBLIC_EMULATOR=true\n\nNEXT_PUBLIC_FIREBASE_PROJECT_ID=demo-makerkit\nNEXT_PUBLIC_FIREBASE_STORAGE_BUCKET=demo-makerkit.appspot.com\nNEXT_PUBLIC_SITE_URL=http://localhost:3000\nNEXT_PUBLIC_FIREBASE_AUTH_DOMAIN=localhost\nNEXT_PUBLIC_FIREBASE_EMULATOR_HOST=localhost\nNEXT_PUBLIC_FIRESTORE_EMULATOR_PORT=8080\nNEXT_PUBLIC_FIREBASE_AUTH_EMULATOR_PORT=9099\nNEXT_PUBLIC_FIREBASE_STORAGE_EMULATOR_PORT=9199\n\n# Change this with your project's APP ID\nNEXT_PUBLIC_FIREBASE_APP_ID=<MAKERKIT_DEV_APP_ID>\n# Change this with your project's API KEY\nNEXT_PUBLIC_FIREBASE_API_KEY=<MAKERKIT_DEV_API_KEY>\n\nFIRESTORE_EMULATOR_HOST=localhost:8080\nFIREBASE_AUTH_EMULATOR_HOST=localhost:9099\nFIREBASE_STORAGE_EMULATOR_HOST=localhost:9199\nFIREBASE_PUBSUB_EMULATOR_HOST=localhost:8085\n\nSERVICE_ACCOUNT_CLIENT_EMAIL=\nSERVICE_ACCOUNT_PRIVATE_KEY=\n```\n\n----------------------------------------\n\nTITLE: Restarting Supabase to Fix Local Migration Issues\nDESCRIPTION: Commands to completely stop and restart Supabase when local migrations aren't applied correctly. This sequence helps resolve 'tables not found' errors by ensuring migrations are properly applied.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/branding_environment_variables_setup_project_configuration_80.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nnpm run supabase:stop\nnpm run supabase:start\n```\n\n----------------------------------------\n\nTITLE: Checking if Organization has Trial Subscription\nDESCRIPTION: This snippet shows how to determine if the current organization's subscription is in a trial period using the isTrial() method.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/organization_sdk_organization_subscription_sdk_sdk_25.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport getSdk from '~/lib/sdk';\nimport getSupabaseServerComponentClient from '~/core/supabase/server-component-client';\n\nasync function PageServerComponent() {\n  const client = getSupabaseServerComponentClient();\n  const sdk = getSdk(client);\n\n  const subscription = await sdk.organization.getSubscription();\n  const isTrial = await sdk.organization.isTrial(); // false|true\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Sentry Auth Token Configuration\nDESCRIPTION: Environment variable for the Sentry authentication token required for source map uploading and other authenticated Sentry operations.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/sentry_monitoring_notifications_configuration_51.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nSENTRY_AUTH_TOKEN=your_auth_token\n```\n\n----------------------------------------\n\nTITLE: Syncing Supabase Database Schema\nDESCRIPTION: Command to sync local database schema with remote Supabase database using Supabase CLI\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/user_roles_validating_api_input_zod_development_18.md#2025-04-22_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nsupabase db push\n```\n\n----------------------------------------\n\nTITLE: Sending Basic Notification After User Signup\nDESCRIPTION: Example of sending an in-app notification to a user after they sign up, using the notifications API with the Supabase admin client.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/sentry_monitoring_notifications_configuration_51.md#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createNotificationsApi } from '@kit/notifications/api';\nimport { getSupabaseServerAdminClient } from '@kit/supabase/server-admin-client';\n\nasync function sendNotificationAfterSignup(\n  accountId: string,\n) {\n  const client = getSupabaseServerAdminClient();\n  const api = createNotificationsApi(client);\n\n  await api.createNotification({\n    account_id: accountId,\n    body: 'You have successfully signed up!',\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Application Path Constants in TypeScript\nDESCRIPTION: This snippet defines a central configuration for all URL paths used in the application. It covers authentication routes, home pages, account settings, and billing pages.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stepper_components_application_configuration_41.md#2025-04-22_snippet_25\n\nLANGUAGE: tsx\nCODE:\n```\nconst pathsConfig = PathsSchema.parse({\n  auth: {\n    signIn: '/auth/sign-in',\n    signUp: '/auth/sign-up',\n    verifyMfa: '/auth/verify',\n    callback: '/auth/callback',\n    passwordReset: '/auth/password-reset',\n    passwordUpdate: '/update-password',\n  },\n  app: {\n    home: '/home',\n    personalAccountSettings: '/home/settings',\n    personalAccountBilling: '/home/billing',\n    personalAccountBillingReturn: '/home/billing/return',\n    accountHome: '/home/[account]',\n    accountSettings: `/home/[account]/settings`,\n    accountBilling: `/home/[account]/billing`,\n    accountMembers: `/home/[account]/members`,\n    accountBillingReturn: `/home/[account]/billing/return`,\n    joinTeam: '/join',\n  },\n} satisfies z.infer<typeof PathsSchema>);\n```\n\n----------------------------------------\n\nTITLE: Initializing Account API in React Router Action (TSX)\nDESCRIPTION: Shows how to initialize the Makerkit Account API within a React Router `action` function. Similar to the loader, it requires obtaining a server-side Supabase client via `getSupabaseServerClient` and providing it to the `createAccountsApi` factory function.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/analytics_api_custom_analytics_provider_google_analytics_provider_57.md#2025-04-22_snippet_28\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createAccountsApi } from '@kit/accounts/api';\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\n\nexport async function action(args: ActionFunctionArgs) {\n  const client = getSupabaseServerClient(args.request);\n  const api = createAccountsApi(client);\n  \n  // use api\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple OAuth Providers in MakerKit\nDESCRIPTION: Example of adding multiple OAuth providers such as Facebook, Twitter, and GitHub to the authentication configuration.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/app_check_auth_flow_auth_hooks_69.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { FacebookAuthProvider, TwitterAuthProvider, GitHubAuthProvider } from 'firebase/auth';\n\noAuth: [\n  GoogleAuthProvider,\n  FacebookAuthProvider,\n  TwitterAuthProvider,\n  GitHubAuthProvider\n],\n```\n\n----------------------------------------\n\nTITLE: Client Side Permission Check in TypeScript\nDESCRIPTION: TypeScript/React code showing how to implement client-side permission checks for feature access.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/theming_how_to_version_0_6_0_81.md#2025-04-22_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nfunction isAdmin(\n  role: MembershipRole\n) {\n  return role === MembershipRole.Admin;\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nexport function useCreateNewThing(\n  userRole: MembershipRole,\n) {\n  const isPayingUser = useIsSubscriptionActive();\n\n  return isPayingUser && isAdmin(userRole);\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Feature() {\n  const userRole = useCurrentUserRole();\n  const canCreateThing = useCreateNewThing(userRole);\n\n  if (!canCreateThing) {\n    return <div>Sorry, you do not have access to this feature. Subscribe?</div>\n  }\n\n  return <FeatureContainer />;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing DataTable for Tabular Data - TanStack Table - TypeScript\nDESCRIPTION: Shows how to import and instantiate the DataTable component for paginated, sortable tabular data rendering in a React TypeScript application. Dependencies: @kit/ui/enhanced-data-table, TanStack Table v8. Key props documented: columns, data, pageSize, pageIndex, pageCount. DataTable handles pagination and sorting internally, but props allow external control if needed. Inputs: columns and data arrays. Outputs: rendered interactive table. Must define columns and data per TanStack Table conventions.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/bordered_navigation_menu_card_button_cookie_banner_60.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DataTable } from '@kit/ui/enhanced-data-table';\n\nfunction MyComponent() {\n  const columns = [\n    // Define your columns here\n  ];\n\n  const data = [\n    // Your data array\n  ];\n\n  return (\n    <DataTable\n      columns={columns}\n      data={data}\n      pageSize={10}\n      pageIndex={0}\n      pageCount={5}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Team Account Navigation in React\nDESCRIPTION: Implements team account navigation configuration with dynamic route generation based on account parameter and feature flags.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stepper_components_application_configuration_61.md#2025-04-22_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nconst getRoutes = (account: string) => [\n  {\n    label: 'common:dashboardTabLabel',\n    path: pathsConfig.app.accountHome.replace('[account]', account),\n    Icon: <LayoutDashboard className={iconClasses} />,\n    end: true,\n  },\n  {\n    label: 'common:settingsTabLabel',\n    collapsible: false,\n    children: [\n      {\n        label: 'common:settingsTabLabel',\n        path: createPath(pathsConfig.app.accountSettings, account),\n        Icon: <Settings className={iconClasses} />,\n      },\n      {\n        label: 'common:accountMembers',\n        path: createPath(pathsConfig.app.accountMembers, account),\n        Icon: <Users className={iconClasses} />,\n      },\n      featureFlagsConfig.enableTeamAccountBilling\n        ? {\n            label: 'common:billingTabLabel',\n            path: createPath(pathsConfig.app.accountBilling, account),\n            Icon: <CreditCard className={iconClasses} />,\n          }\n        : undefined,\n    ].filter(Boolean),\n  },\n];\n\nexport function getTeamAccountSidebarConfig(account: string) {\n  return SidebarConfigSchema.parse({\n    routes: getRoutes(account),\n    style: import.meta.env.VITE_TEAM_NAVIGATION_STYLE,\n  });\n}\n\nfunction createPath(path: string, account: string) {\n  return path.replace('[account]', account);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Stripe Pricing Table in Next.js\nDESCRIPTION: This TSX code snippet demonstrates how to configure the Stripe pricing table for a SaaS application. It includes product definitions, plan details, and display options for the pricing table component.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/subscription_permissions_organizations_lemon_squeezy_23.md#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nstripe: {\n  embedded: true,\n  displayMode: StripeCheckoutDisplayMode.Popup,\n  products: [\n    {\n      name: 'Basic',\n      description: 'Description of your Basic plan',\n      badge: `Up to 20 users`,\n      features: [\n        'Basic Reporting',\n        'Up to 20 users',\n        '1GB for each user',\n        'Chat Support',\n      ],\n      plans: [\n        {\n          name: 'Monthly',\n          price: '$9',\n          stripePriceId: 'price_1LfXGaI1i3VnbZTq7l3VgZNa',\n          trialPeriodDays: 7,\n        },\n        {\n          name: 'Yearly',\n          price: '$90',\n          stripePriceId: 'basic-plan-yr',\n          trialPeriodDays: 7,\n        },\n      ],\n    },\n    {\n      name: 'Pro',\n      badge: `Most Popular`,\n      recommended: true,\n      description: 'Description of your Pro plan',\n      features: [\n        'Advanced Reporting',\n        'Up to 50 users',\n        '5GB for each user',\n        'Chat and Phone Support',\n      ],\n      plans: [\n        {\n          name: 'Monthly',\n          price: '$29',\n          stripePriceId: 'pro-plan-mth',\n          trialPeriodDays: 7,\n        },\n        {\n          name: 'Yearly',\n          price: '$200',\n          stripePriceId: 'pro-plan-yr',\n          trialPeriodDays: 7,\n        },\n      ],\n    },\n    {\n      name: 'Premium',\n      description: 'Description of your Premium plan',\n      badge: ``,\n      features: [\n        'Advanced Reporting',\n        'Unlimited users',\n        '50GB for each user',\n        'Account Manager',\n      ],\n      plans: [\n        {\n          name: '',\n          price: 'Contact us',\n          stripePriceId: '',\n          trialPeriodDays: 7,\n          label: `Contact us`,\n          href: `/contact`,\n        },\n      ],\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Team Account by ID\nDESCRIPTION: Code showing how to retrieve a team account by its ID using the getTeamAccountById method. This can also be used to check if a user is already in the account.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/custom_analytics_provider_google_analytics_provider_posthog_analytics_provider_36.md#2025-04-22_snippet_38\n\nLANGUAGE: tsx\nCODE:\n```\nconst api = createTeamAccountsApi(client);\nconst account = await api.getTeamAccountById('account-id');\n```\n\n----------------------------------------\n\nTITLE: Accessing User Role with useCurrentUserRole Hook\nDESCRIPTION: This example shows how to use the useCurrentUserRole hook to retrieve and display the current user's role within their organization. The hook is imported and called within a React component.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/adding_admin_users_admin_overview_admin_1.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCurrentUserRole } from '~/lib/organizations/hooks/use-current-user-role';\n\nfunction MyComponent() {\n  const role = useCurrentUserRole();\n\n  return (\n    <div>\n      <p>Current user role: {role}</p>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Task Creation Validation Function\nDESCRIPTION: Function that checks if an organization can create a new task based on their subscription quota.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/supabase_not_stopping_tables_not_found_dark_theme_22.md#2025-04-22_snippet_26\n\nLANGUAGE: plpgsql\nCODE:\n```\ncreate or replace function organization_can_create_task(org_id bigint)\nreturns boolean as $$\ndeclare\n    task_count int;\n    organization_price_id text;\n    plan_task_quota int;\nbegin\n    select get_organization_task_count(org_id)\n        into task_count;\n\n    select price_id\n    into organization_price_id\n    from get_active_subscription(org_id);\n\n    if organization_price_id is null then\n        raise exception 'Organization does not have an active subscription';\n    end if;\n\n    select task_quota from plans where price_id = organization_price_id into plan_task_quota;\n\n    return task_count < plan_task_quota;\nend;\n$$ language plpgsql;\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering Based on Permissions in React TSX\nDESCRIPTION: This React component demonstrates how to conditionally render content based on user permissions and subscription status.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/technical_details_going_to_production_overview_publish_firebase_security_rules_72.md#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Feature() {\n  const userRole = useCurrentUserRole();\n  const canCreateThing = useCreateNewThing(userRole);\n\n  if (!canCreateThing) {\n    return <div>Sorry, you do not have access to this feature. Subscribe?</div>\n  }\n\n  return <FeatureContainer />;\n}\n```\n\n----------------------------------------\n\nTITLE: Logging Actions Using Pino\nDESCRIPTION: This TypeScript snippet details how to implement logging using the Pino library within a Next.js project. The `myFunction` demonstrates logging before and after executing `performAction`, which requires asynchronous handling. Key parameters such as `organizationId` and `userId` are logged using Pino's `logger.info` method. Dependencies include the Pino logging library.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/ci_tests_running_tests_testing_limitations_12.md#2025-04-22_snippet_28\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport logger from '~/core/logger';\n\nasync function myFunction(params: {\n  organizationId: string;\n  userId: string;\n}) {\n  logger.info(\n    {\n      organizationId: params.organizationId,\n      userId: params.userId,\n    },\n    `Performing action...`\n  );\n\n  await performAction();\n\n  logger.info(\n    {\n      organizationId: params.organizationId,\n      userId: params.userId,\n    },\n    `Action successful`\n  );\n}\n\nasync function performAction() {\n  // do something complex here\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Password Requirements in Next.js\nDESCRIPTION: This bash snippet shows how to set environment variables to enforce password requirements such as uppercase letters, numbers, and special characters in a Next.js application.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stepper_components_application_configuration_41.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nNEXT_PUBLIC_PASSWORD_REQUIRE_UPPERCASE=true\nNEXT_PUBLIC_PASSWORD_REQUIRE_NUMBERS=true\nNEXT_PUBLIC_PASSWORD_REQUIRE_SPECIAL_CHARS=true\n```\n\n----------------------------------------\n\nTITLE: Cloning Repository via HTTPS (Bash)\nDESCRIPTION: Clones the Makerkit Remix Supabase SaaS Kit Turbo repository using the HTTPS protocol. This is an alternative method if SSH keys are not configured.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/configuring_supabase_database_webhooks_fly_production_environment_variables_95.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/makerkit/remix-supabase-saas-kit-turbo\n```\n\n----------------------------------------\n\nTITLE: Rendering CMS Content in React/TSX\nDESCRIPTION: Example of fetching and rendering content from CMS using the getContentItemBySlug function to display a Terms and Conditions page.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/team_account_sidebar_configuration_configuration_cms_api_92.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createCmsClient } from '@kit/cms';\n\nasync function TermsAndConditionsPage() {\n  const client = await createCmsClient();\n\n  const { content, title } = await client.getContentItemBySlug({\n    slug: 'terms-and-conditions',\n    collection: 'pages',\n  });\n\n  return (\n    <div>\n      <h1>{title}</h1>\n      <div>{content}</div>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Firebase Admin SDK Task Update\nDESCRIPTION: Server-side function to update tasks using Firebase Admin SDK. This can only be used in API Route handlers and getServerSideProps due to Node.js environment requirements and service account security.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/reading_document_reading_documents_list_creating_document_8.md#2025-04-22_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nimport getRestFirestore from '~/core/firebase/admin/get-rest-firestore';\n\nasync function updateTaskFromServer(task: {\n  id: string;\n  title: string;\n  description: string;\n  completed: boolean;\n}) {\n  const firestore = getRestFirestore();\n  const taskRef = firestore.collection(firestore, `tasks`).doc(task.id);\n\n  await taskRef.update(task);\n\n  return task;\n}\n```\n\n----------------------------------------\n\nTITLE: App Events Integration with Analytics\nDESCRIPTION: Example of using the App Events system for centralized analytics tracking approach.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/translations_updating_latest_version_tutorials_87.md#2025-04-22_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useAppEvents } from '@kit/shared/events';\n\nfunction SomeComponent() {\n  const { emit } = useAppEvents();\n\n  const handleSignUp = (userId: string) => {\n    emit({ type: 'user.signedUp', payload: { userId } });\n    // This automatically calls analytics.identify and analytics.trackEvent\n  };\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Building Task Detail Page in Next.js\nDESCRIPTION: Server-side implementation of the task detail page with data loading and routing functionality using Next.js and Supabase.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/running_project_supabase_data_fetching_supabase_data_writing_27.md#2025-04-22_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nasync function loadTaskData(taskId: string) {\n  const client = getSupabaseServerComponentClient();\n  const { data: task } = await getTask(client, Number(taskId));\n\n  if (!task) {\n    redirect('/dashboard');\n  }\n\n  return {\n    task,\n  };\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { use } from 'react';\nimport { redirect } from 'next/navigation';\n\nimport ArrowLeftIcon from '@heroicons/react/24/outline/ArrowLeftIcon';\n\nimport Button from '~/core/ui/Button';\nimport getSupabaseServerComponentClient from '~/core/supabase/server-component-client';\nimport { getTask } from '~/lib/tasks/queries';\nimport AppHeader from '~/app/dashboard/[organization]/components/AppHeader';\nimport AppContainer from '~/app/dashboard/[organization]/components/AppContainer';\nimport TaskItemContainer from '~/app/dashboard/[organization]/tasks/components/TaskItemContainer';\nimport { withI18n } from '~/i18n/with-i18n';\n\ninterface Context {\n  params: {\n    task: string;\n  };\n}\n\nexport const metadata = {\n  title: `Task`,\n};\n\nconst TaskPage = ({ params }: Context) => {\n  const data = use(loadTaskData(params.task));\n  const task = data.task;\n\n  return (\n    <>\n      <AppHeader>\n        <TaskPageHeading />\n      </AppHeader>\n\n      <AppContainer>\n        <TaskItemContainer task={task} />\n      </AppContainer>\n    </>\n  );\n};\n\nfunction TaskPageHeading() {\n  return (\n    <div className={'flex items-center space-x-6'}>\n      <span>Task</span>\n\n      <Button size={'small'} color={'transparent'} href={'../tasks'}>\n        <ArrowLeftIcon className={'mr-2 h-4'} />\n        Back to Tasks\n      </Button>\n    </div>\n  );\n}\n\nasync function loadTaskData(taskId: string) {\n  const client = getSupabaseServerComponentClient();\n  const { data: task } = await getTask(client, Number(taskId));\n\n  if (!task) {\n    redirect('/dashboard');\n  }\n\n  return {\n    task,\n  };\n}\n\nexport default withI18n(TaskPage);\n```\n\n----------------------------------------\n\nTITLE: Manually Calling Fetch with CSRF Token in a React Component\nDESCRIPTION: Illustrates how to manually make a POST request using the native `fetch` API while including the necessary CSRF token for security. It uses a custom `useCsrfToken` hook to retrieve the token and adds it to the request headers under `X-CSRF-Token`.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/auth_setup_authentication_blog_16.md#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport useCsrfToken from '~/core/hooks/use-csrf-token';\n\nfunction MyComponent() {\n  const { csrfToken } = useCsrfToken();\n\n  // use csrfToken in your fetch request\n\n  return (\n    <button onClick={() => {\n      fetch('/api/my-route', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'X-CSRF-Token': csrfToken,\n        },\n      });\n    }}>Click</button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Contact Form Recipient Email in Bash\nDESCRIPTION: Sets the `CONTACT_EMAIL` environment variable. This variable is required to specify the email address where contact form submissions should be sent within the Makerkit application. The sender email is configured separately in the mailing configuration.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/adding_turborepo_package_approaching_local_development_database_functions_93.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nCONTACT_EMAIL=\n```\n\n----------------------------------------\n\nTITLE: Install Project Dependencies with PNPM\nDESCRIPTION: Installs the project's dependencies using PNPM, ensuring the development environment is correctly set up and ready to function.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/cloudflare_production_environment_variables_supabase_47.md#2025-04-22_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\npnpm i\n```\n\n----------------------------------------\n\nTITLE: Generating Environment Variables\nDESCRIPTION: Command to run the script for generating environment variables for deployment.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/cloudflare_production_environment_variables_supabase_47.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nturbo gen env\n```\n\n----------------------------------------\n\nTITLE: User Permission Checking in TypeScript\nDESCRIPTION: Function for checking if a user can update another user based on their roles in an organization. The function compares the roles hierarchically.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/supabase_not_stopping_tables_not_found_dark_theme_22.md#2025-04-22_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n/**\n *\n * @param currentUserRole The current logged-in user\n * @param targetUser The role of the target of the action\n * @description Checks if a user can perform actions (such as update a role) of another user\n * @name canUpdateUser\n */\nexport function canUpdateUser(\n  currentUserRole: MembershipRole,\n  targetUser: MembershipRole\n) {\n  return currentUserRole > targetUser;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Tasks Table in Supabase SQL\nDESCRIPTION: SQL script to create a tasks table with appropriate columns, permissions, and relationships to accounts. The table includes fields for task ID, title, description, completion status, and ownership information.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/adding_turborepo_package_approaching_local_development_database_functions_93.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n-- create tasks table\ncreate table if not exists public.tasks (\n  id uuid primary key default gen_random_uuid(),\n  title varchar(500) not null,\n  description varchar(50000),\n  done boolean not null default false,\n  account_id uuid not null references public.accounts(id),\n  created_at timestamp with time zone not null default now(),\n  updated_at timestamp with time zone not null default now()\n);\n\ngrant select, insert, update, delete on table public.tasks to\n    authenticated, service_role;\n```\n\n----------------------------------------\n\nTITLE: Initializing Git Repository for Custom Project\nDESCRIPTION: Commands for setting up a new Git repository after cloning the starter kit, removing the original remote and adding your own.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/user_roles_validating_api_input_zod_development_18.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncd my-saas\ngit remote rm origin\ngit remote add origin <your-git-repository>\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Analytics Service in TypeScript\nDESCRIPTION: Implementation of a custom analytics service that implements the AnalyticsService interface in Makerkit.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/analytics_api_custom_analytics_provider_google_analytics_provider_57.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AnalyticsService } from './path-to-types';\n\nclass MyCustomAnalyticsService implements AnalyticsService {\n  async initialize() {\n    // Initialize your analytics service\n  }\n\n  async identify(userId: string, traits?: Record<string, string>) {\n    // Implement user identification\n  }\n\n  async trackPageView(url: string) {\n    // Implement page view tracking\n  }\n\n  async trackEvent(eventName: string, eventProperties?: Record<string, string | string[]>) {\n    // Implement event tracking\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Personal Account Checkout Form for Stripe Addon Support\nDESCRIPTION: Updates the PersonalAccountCheckoutForm component to pass addon data to the checkout session creation process, enabling the form to handle addon selections.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_billing_checkout_addons_subscription_entitlements_54.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<CheckoutForm\n  // ...existing props\n  onSubmit={({ planId, productId, addons }) => {\n    startTransition(async () => {\n      try {\n        const { checkoutToken } = await createPersonalAccountCheckoutSession({\n          planId,\n          productId,\n          addons, // Add this line\n        });\n        setCheckoutToken(checkoutToken);\n      } catch {\n        setError(true);\n      }\n    });\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Server Action to Add Tasks to Supabase\nDESCRIPTION: Creates a server action function that adds task data to a Supabase database. It includes user authentication, data validation with Zod, error handling, and page revalidation after successful database operation.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/marketing_pages_migrations_permissions_and_roles_45.md#2025-04-22_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n'use server';\n\nimport { revalidatePath } from 'next/cache';\nimport { redirect } from 'next/navigation';\n\nimport { z } from 'zod';\n\nimport { getLogger } from '@kit/shared/logger';\nimport { requireUser } from '@kit/supabase/require-user';\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\n\nimport { WriteTaskSchema } from '~/(dashboard)/home/(user)/_lib/schema/write-task.schema';\n\nexport async function addTaskAction(params: z.infer<typeof WriteTaskSchema>) {\n  'use server';\n\n  const task = WriteTaskSchema.parse(params);\n\n  const logger = await getLogger();\n  const client = getSupabaseServerClient();\n  const auth = await requireUser(client);\n\n  if (!auth.data) {\n    redirect(auth.redirectTo);\n  }\n\n  logger.info(task, `Adding task...`);\n\n  const { data, error } = await client\n    .from('tasks')\n    .insert({ ...task, account_id: auth.data.id });\n\n  if (error) {\n    logger.error(error, `Failed to add task`);\n\n    throw new Error(`Failed to add task`);\n  }\n\n  logger.info(data, `Task added successfully`);\n\n  revalidatePath('/home', 'page');\n\n  return null;\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Hero Component Implementation Example\nDESCRIPTION: A comprehensive example of the Hero component with additional elements like Pill, CtaButton, and custom formatting including internationalization.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/app_breadcrumbs_bordered_navigation_menu_card_button_39.md#2025-04-22_snippet_26\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Hero, Pill, CtaButton, GradientSecondaryText } from '@kit/ui/marketing';\nimport { Trans } from '@kit/ui/trans';\nimport { LayoutDashboard } from 'lucide-react';\nimport Image from 'next/image';\n\n<Hero\n  pill={\n    <Pill label={'New'}>\n      <span>The leading SaaS Starter Kit for ambitious developers</span>\n    </Pill>\n  }\n  title={\n    <>\n      <span>The ultimate SaaS Starter</span>\n      <span>for your next project</span>\n    </>\n  }\n  subtitle={\n    <span>\n      Build and Ship a SaaS faster than ever before with the next-gen SaaS\n      Starter Kit. Ship your SaaS in days, not months.\n    </span>\n  }\n  cta={<MainCallToActionButton />}\n  image={\n    <Image\n      priority\n      className={\n        'delay-250 rounded-2xl border border-gray-200 duration-1000 ease-out animate-in fade-in zoom-in-50 fill-mode-both dark:border-primary/10'\n      }\n      width={3558}\n      height={2222}\n      src={`/images/dashboard.webp`}\n      alt={`App Image`}\n    />\n  }\n/>\n\nfunction MainCallToActionButton() {\n  return (\n    <div className={'flex space-x-4'}>\n      <CtaButton>\n        <Link href={'/auth/sign-up'}>\n          <span className={'flex items-center space-x-0.5'}>\n            <span>\n              <Trans i18nKey={'common:getStarted'} />\n            </span>\n\n            <ArrowRightIcon\n              className={\n                'h-4 animate-in fade-in slide-in-from-left-8' +\n                ' delay-1000 duration-1000 zoom-in fill-mode-both'\n              }\n            />\n          </span>\n        </Link>\n      </CtaButton>\n\n      <CtaButton variant={'link'}>\n        <Link href={'/contact'}>\n          <Trans i18nKey={'common:contactUs'} />\n        </Link>\n      </CtaButton>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using 'in' Operator in ClientDataLoader Filter\nDESCRIPTION: This code snippet highlights the use of the 'in' operator within the 'where' clause of the 'ClientDataLoader' component. The operator is used to retrieve multiple records with specified IDs, and the functionality relies on correct enumeration within the 'where' conditions to filter the results.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/ai_text_editor_cookie_banner_feedback_popup_24.md#2025-04-22_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ClientDataLoader } from '@makerkit/data-loader-supabase-nextjs';\n\n<ClientDataLoader\n  client={client} // the Supabase Client\n  table=\"organizations\"\n  select=\"*\"\n  where={{\n    id: {\n      in: [1, 2, 3],\n    }\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Development Server Command\nDESCRIPTION: Command to run the development server for the Remix Supabase application.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/uploading_data_to_storage_writing_data_to_supabase_data_fetching_77.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Project Directory Structure Example\nDESCRIPTION: Example folder structure showing how to organize a new entity in the application, demonstrating the placement of types, hooks, components and pages.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/ui_hooks_mdx_15.md#2025-04-22_snippet_10\n\nLANGUAGE: txt\nCODE:\n```\n- app\n  - lib\n    - events\n      - types\n        - event-model.ts\n        - ...\n      - hooks\n        - use-fetch-events.ts\n        - use-create-event.ts\n        - ...\n      - utils\n        - create-event-model.ts\n\n  - app\n    - dashboard\n      - [organization]\n        - events\n          components\n            - events\n              - EventsContainerComponent.tsx\n              - ...\n          - page.tsx\n          - $event.tsx\n```\n\n----------------------------------------\n\nTITLE: Creating Ticket Priority Badge Component in React\nDESCRIPTION: This snippet defines a TicketPriorityBadge component that displays the priority of a support ticket using a Badge component from Shadcn UI. It takes the ticket priority as a prop and renders different badge variants based on the priority level.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/realtime_updates_server_components_7.md#2025-04-22_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Badge } from '@kit/ui/badge';\n\nimport { Tables } from '~/lib/database.types';\n\nexport function TicketPriorityBadge({\n  priority,\n}: {\n  priority: Tables<'tickets'>['priority'];\n}) {\n  switch (priority) {\n    case 'low':\n      return <Badge variant={'outline'}> Low </Badge>;\n\n    case 'medium':\n      return <Badge variant={'warning'}> Medium </Badge>;\n\n    case 'high':\n      return <Badge variant={'destructive'}> High </Badge>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Team Account API in a Server Component\nDESCRIPTION: Code for initializing the Team Account API in a Next.js server component. Requires a valid Supabase client that is created using the getSupabaseServerClient function.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/custom_analytics_provider_google_analytics_provider_posthog_analytics_provider_36.md#2025-04-22_snippet_36\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createTeamAccountsApi } from '@kit/team-accounts/api';\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\n\nasync function ServerComponent() {\n  const client = getSupabaseServerClient();\n  const api = createTeamAccountsApi(client);\n\n  // use api\n}\n```\n\n----------------------------------------\n\nTITLE: Building RSS Feeds\nDESCRIPTION: Command to generate RSS feeds for the application.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/commands_cors_develop_firebase_security_rules_5.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm run rss\n```\n\n----------------------------------------\n\nTITLE: Running Remix Development Server\nDESCRIPTION: Command to start the Remix development server locally.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/develop_firebase_security_rules_emails_encrypting_secrets_71.md#2025-04-22_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: SQL Function for Checking User Permissions\nDESCRIPTION: SQL function to check if a user has a specific permission on an account. Returns true if the user has the specified permission.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/supabase_clients_data_fetching_adding_pages_63.md#2025-04-22_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\npublic.has_permission(\n  user_id uuid,\n  account_id uuid,\n  permission_name app_permissions\n)\n```\n\n----------------------------------------\n\nTITLE: Navigation Style Environment Variables\nDESCRIPTION: Environment variable configuration for setting navigation style between sidebar and header layouts.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stepper_components_application_configuration_41.md#2025-04-22_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\nNEXT_PUBLIC_USER_NAVIGATION_STYLE=sidebar\n```\n\nLANGUAGE: bash\nCODE:\n```\nNEXT_PUBLIC_TEAM_NAVIGATION_STYLE=header\n```\n\n----------------------------------------\n\nTITLE: Dynamically Determining Payment Mode Based on Selected Price\nDESCRIPTION: Code to dynamically determine the payment mode based on the selected price ID, allowing for multiple plans with different payment types in the same application.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_one_time_payments_stripe_webhooks_ci_tests_73.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst price = configuration.plans.find(item => {\n  return item.stripePriceId === params.priceId;\n});\n\nif (!price) {\n  throw new Error(`Price with ID ${params.priceId} not found in config`);\n}\n\nconst mode: Stripe.Checkout.SessionCreateParams.Mode = price.mode;\n\n// some code here...\n\nreturn stripe.checkout.sessions.create({\n  mode,\n  // more code here...\n});\n```\n\n----------------------------------------\n\nTITLE: Using Language Switcher in Next.js\nDESCRIPTION: Details the process of adding the `LanguageSwitcher` component to a Next.js app, which allows users to toggle between available languages. No external dependencies are required.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/environment_variables_setup_project_configuration_set_up_emails_9.md#2025-04-22_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LanguageSwitcher } from '~/components/LanguageSwitcher';\n\nexport const YourComponent = ({ children }) => {\n  return (\n    <div>\n      <LanguageSwitcher />\n      {children}\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Extending Membership Roles with Additional Role Level\nDESCRIPTION: Demonstrates how to extend the role system by adding a new 'Readonly' role with a lower permission level than existing roles, maintaining the hierarchical structure.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/user_roles_validating_api_input_zod_development_18.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport enum MembershipRole {\n  Readonly = 0,\n  Member = 1,\n  Admin = 2,\n  Owner = 3,\n}\n```\n\n----------------------------------------\n\nTITLE: Using IfHasPermissions Component in React TSX\nDESCRIPTION: This example shows how to use the IfHasPermissions component to conditionally render content based on user permissions.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/technical_details_going_to_production_overview_publish_firebase_security_rules_72.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<IfHasPermissions\n  condition={(currentUserRole) =>\n    canInviteUser(currentUserRole, targetUserRole)\n  }\n>\n  <InviteUserComponent />\n</IfHasPermissions>\n```\n\n----------------------------------------\n\nTITLE: Configuring Feature Flags for Makerkit SaaS in Bash\nDESCRIPTION: Sets up environment variables to enable or disable various features of the Makerkit SaaS application, including theme toggle, account management, and billing options.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stepper_components_application_configuration_61.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n# FEATURE FLAGS\nVITE_ENABLE_THEME_TOGGLE=true\nVITE_ENABLE_PERSONAL_ACCOUNT_DELETION=true\nVITE_ENABLE_PERSONAL_ACCOUNT_BILLING=true\nVITE_ENABLE_TEAM_ACCOUNTS_DELETION=true\nVITE_ENABLE_TEAM_ACCOUNTS_BILLING=true\nVITE_ENABLE_TEAM_ACCOUNTS=true\nVITE_ENABLE_TEAM_ACCOUNTS_CREATION=true\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Middleware for API Protection\nDESCRIPTION: Shows how to use the 'withPipe' utility to combine multiple middleware functions (authentication, role-based access) to protect an API route. The middleware functions are executed in the order they are provided.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/call_api_routes_from_client_csrf_token_guarding_api_routes_7.md#2025-04-22_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\nimport { NextApiRequest, NextApiResponse } from \"next\";\nimport { MembershipRole } from '~/lib/organizations/types/membership-role';\n\nimport { withAuthedUser } from '~/core/middleware/with-authed-user';\nimport { withRole } from '~/core/middleware/with-role';\nimport { withPipe } from '~/core/middleware/with-pipe';\n\nfunction helloWorldHandler(req: NextApiRequest, res: NextApiResponse) {\n  res.status(200).json({ text: 'Hello' })\n}\n\nexport default withPipe(\n  withAuthedUser,\n  withRole(MembershipRole.Admin),\n  helloWorldHandler,\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Configuration Object for Makerkit SaaS Application in TypeScript\nDESCRIPTION: This code snippet defines a configuration object for a Makerkit SaaS application. It includes settings for site metadata, authentication, feature flags, paths, Sentry integration, and Stripe product information. The configuration is exported as a default object.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_webhooks_locally_using_lemon_squeezy_server_actions_csrf_33.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { Provider } from '@supabase/gotrue-js/src/lib/types';\n\nconst production = process.env.NODE_ENV === 'production';\n\nenum Themes {\n  Light = 'light',\n  Dark = 'dark',\n}\n\nconst configuration = {\n  site: {\n    name: 'Awesomely - Your SaaS Title',\n    description: 'Your SaaS Description',\n    themeColor: '#ffffff',\n    themeColorDark: '#0a0a0a',\n    siteUrl: process.env.NEXT_PUBLIC_SITE_URL,\n    siteName: 'Awesomely',\n    twitterHandle: '',\n    githubHandle: '',\n    language: 'en',\n    convertKitFormId: '',\n    locale: process.env.NEXT_PUBLIC_DEFAULT_LOCALE,\n  },\n  auth: {\n    requireEmailConfirmation:\n      process.env.NEXT_PUBLIC_REQUIRE_EMAIL_CONFIRMATION === 'true',\n    providers: {\n      emailPassword: true,\n      phoneNumber: false,\n      emailLink: false,\n      oAuth: ['google'] as Provider[],\n    },\n  },\n  production,\n  environment: process.env.NEXT_PUBLIC_ENVIRONMENT,\n  features: {\n    enableThemeSwitcher: true,\n  },\n  theme: Themes.Dark,\n  paths: {\n    signIn: '/auth/sign-in',\n    signUp: '/auth/sign-up',\n    signInMfa: '/auth/verify',\n    onboarding: `/onboarding`,\n    appPrefix: '/dashboard',\n    appHome: '/dashboard',\n    authCallback: '/auth/callback',\n    settings: {\n      profile: 'settings/profile',\n      authentication: 'settings/profile/authentication',\n      email: 'settings/profile/email',\n      password: 'settings/profile/password',\n    },\n  },\n  sentry: {\n    dsn: process.env.NEXT_PUBLIC_SENTRY_DSN,\n  },\n  stripe: {\n    products: [\n      {\n        name: 'Basic',\n        description: 'Description of your Basic plan',\n        badge: `Up to 20 users`,\n        features: [\n          'Basic Reporting',\n          'Up to 20 users',\n          '1GB for each user',\n          'Chat Support',\n        ],\n        plans: [\n          {\n            name: 'Monthly',\n            price: '$9',\n            stripePriceId: '<price_id>',\n          },\n          {\n            name: 'Yearly',\n            price: '$90',\n            stripePriceId: '<price_id>',\n          },\n        ],\n      },\n      {\n        name: 'Pro',\n        badge: `Most Popular`,\n        recommended: true,\n        description: 'Description of your Pro plan',\n        features: [\n          'Advanced Reporting',\n          'Up to 50 users',\n          '5GB for each user',\n          'Chat and Phone Support',\n        ],\n        plans: [\n          {\n            name: 'Monthly',\n            price: '$29',\n            stripePriceId: '<price_id>',\n          },\n          {\n            name: 'Yearly',\n            price: '$200',\n            stripePriceId: '<price_id>',\n          },\n        ],\n      },\n      {\n        name: 'Premium',\n        description: 'Description of your Premium plan',\n        badge: ``,\n        features: [\n          'Advanced Reporting',\n          'Unlimited users',\n          '50GB for each user',\n          'Account Manager',\n        ],\n        plans: [\n          {\n            name: '',\n            price: 'Contact us',\n            stripePriceId: '',\n            label: `Contact us`,\n            href: `/contact`,\n          },\n        ],\n      },\n    ],\n  },\n};\n\nexport default configuration;\n```\n\n----------------------------------------\n\nTITLE: Adding Upstream Git Remote in Bash\nDESCRIPTION: Adds the original repository as an upstream remote, allowing developers to pull updates from the source repository. No dependencies except for git installation. This enables multi-remote tracking for collaborative work. Input: executed in terminal, Output: adds remote link.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/initializing_project_introduction_marketing_site_pages_14.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit remote add upstream git@github.com:makerkit/next-firebase-saas-kit.git\n```\n\n----------------------------------------\n\nTITLE: Integrating Internationalization (i18n) in a Loader (TypeScript)\nDESCRIPTION: Shows how to integrate internationalization within a React Router loader. It creates an i18n server instance (`createI18nServerInstance`) using the request object and uses the `t` function to fetch translated strings (e.g., for a page title) to be returned as loader data.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/creating_your_own_cms_client_keystatic_wordpress_62.md#2025-04-22_snippet_35\n\nLANGUAGE: tsx\nCODE:\n```\nexport const loader = async (args: Route.LoaderArgs) => {\n  const i18n = await createI18nServerInstance(args.request);\n\n  return {\n    title: i18n.t('account:settingsTab')\n  };\n};\n\n```\n\n----------------------------------------\n\nTITLE: Cloning Repository with Git (Bash)\nDESCRIPTION: Clones the Makerkit Remix Supabase SaaS kit repository from GitHub into a local directory named 'tasks-app' using the SSH protocol.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/functions_initializing_project_introduction_85.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:makerkit/remix-supabase-saas-kit.git tasks-app\n```\n\n----------------------------------------\n\nTITLE: Checking for Specific Subscription Status\nDESCRIPTION: This snippet demonstrates how to check if an organization's subscription has a specific status using the isStatus method with a Stripe subscription status string.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/organization_sdk_organization_subscription_sdk_sdk_25.md#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport getSdk from '~/lib/sdk';\nimport getSupabaseServerComponentClient from '~/core/supabase/server-component-client';\n\nasync function PageServerComponent() {\n  const client = getSupabaseServerComponentClient();\n  const sdk = getSdk(client);\n\n  const subscription = await sdk.organization.getSubscription();\n  const isActive = await sdk.organization.isStatus('active');\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configure TypeScript Paths for Plugin\nDESCRIPTION: TypeScript configuration to add path aliases for plugin integration.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_configuration_stripe_one_time_payments_stripe_webhooks_82.md#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"paths\": {\n      \"~/plugins/*\": [\n        \"./plugins/*\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Custom Google Fonts in Next.js (TSX)\nDESCRIPTION: This snippet demonstrates how to change the default font used in the Makerkit application. It shows importing the 'Manrope' font from `next/font/google` and aliasing it as `SansFont`, replacing the default 'Inter' font configuration within the `src/components/Fonts.tsx` file.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/branding_environment_variables_setup_project_configuration_21.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Manrope as SansFont } from 'next/font/google';\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic API Handler Function (TypeScript)\nDESCRIPTION: Shows a minimal structure for an API handler function (`addIntegrationHandler`) that calls another function (`writeToFirestore`). This serves as a starting point before adding logging or detailed implementation.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/commands_cors_develop_firebase_security_rules_5.md#2025-04-22_snippet_30\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nfunction addIntegrationHandler() {\n  return writeToFirestore(data);\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Updating Language Settings in Next.js i18n Configuration\nDESCRIPTION: This code shows how to add a new language to the i18n settings file by adding the language code to the languages array. In this example, Spanish ('es') is added as a supported language.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/team_accounts_only_recipes_adding_translations_55.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n/**\n * The list of supported languages.\n * By default, only the default language is supported.\n * Add more languages here if needed.\n */\nexport const languages: string[] = [defaultLanguage, 'es'];\n```\n\n----------------------------------------\n\nTITLE: Customizing Build Command for Vercel\nDESCRIPTION: This snippet provides a command to customize the build process for deploying a specific app on Vercel when working with multiple applications within a monorepo. It uses the Turbo repository tool as a dependency.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/cloudflare_production_environment_variables_supabase_47.md#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ncd ../.. && turbo run build --filter=<app-name>\n```\n\n----------------------------------------\n\nTITLE: Configuring Dark Theme as Default in Next.js Makerkit\nDESCRIPTION: Configuration for setting the dark theme as the default while keeping the theme switcher enabled. This allows users to switch between themes using the theme switcher in the top right corner.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/updating_navigation_menu_403_error_actions_contentlayer_stuck_34.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n{\n  features: {\n    enableThemeSwitcher: true,\n  },\n  theme: Themes.Dark,\n}\n```\n\n----------------------------------------\n\nTITLE: Default Select Behavior\nDESCRIPTION: Demonstrates the default behavior when no select property is provided, which is equivalent to using wildcard select.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/ai_text_editor_cookie_banner_feedback_popup_24.md#2025-04-22_snippet_25\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ClientDataLoader } from '@makerkit/data-loader-supabase-nextjs';\n\n<ClientDataLoader\n  client={client}\n  table=\"organizations\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Adding Table Names to Constants File\nDESCRIPTION: A constant definition for the tasks table name that can be reused across the application to maintain consistency and facilitate easier updates if table names change.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/server_actions_uploading_data_to_storage_writing_data_to_supabase_30.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport const TASKS_TABLE = `tasks`;\n```\n\n----------------------------------------\n\nTITLE: Configuring WordPress CMS Environment Variables\nDESCRIPTION: Environment variables required for setting up WordPress as the CMS in the React Router Supabase SaaS Kit.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/creating_your_own_cms_client_keystatic_wordpress_62.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nCMS_CLIENT=wordpress\nWORDPRESS_API_URL=http://localhost:8080\n```\n\n----------------------------------------\n\nTITLE: Adding Cookie Banner Translations\nDESCRIPTION: JSON structure to add translations for the cookie banner to the localization file.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/ai_text_editor_cookie_banner_feedback_popup_24.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"cookieBanner\": {\n    \"title\": \"Hi, we use cookies.\",\n    \"description\": \"This website uses cookies to ensure you get the best\nexperience on our website.\",\n    \"reject\": \"Reject\",\n    \"accept\": \"Accept\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OAuth Provider Logos in React (TSX)\nDESCRIPTION: This TSX function `getOAuthProviderLogos`, located in `src/core/ui/AuthProviderLogo.tsx`, defines a mapping between authentication provider names (keys) and their corresponding logos (values). Logos can be React components (like icons) or image paths (strings). This allows the application to display appropriate branding for enabled authentication methods.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/api_routes_vs_server_actions_api_routes_call_api_routes_from_client_19.md#2025-04-22_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\nfunction getOAuthProviderLogos(): Record<string, string | React.ReactNode> {\n  return {\n    password: <AtSymbolIcon className={'h-[22px] w-[22px]'} />,\n    phone: <DevicePhoneMobileIcon className={'h-[22px] w-[22px]'} />,\n    google: '/assets/images/google.webp',\n    facebook: '/assets/images/facebook.webp',\n    twitter: '/assets/images/twitter.webp',\n    github: '/assets/images/github.webp',\n    microsoft: '/assets/images/microsoft.webp',\n    apple: '/assets/images/apple.webp',\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Feedback Popup Plugin via Git Subtree\nDESCRIPTION: Command to install the Feedback Popup plugin using git subtree. This adds the plugin to the 'plugins/feedback-popup' directory in the repository.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_one_time_payments_stripe_webhooks_payments_11.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ngit subtree add --prefix plugins/feedback-popup git@github.com:makerkit/next-firebase-saas-kit-plugins.git feedback-popup --squash\n```\n\n----------------------------------------\n\nTITLE: Cursor Rules Configuration for Makerkit\nDESCRIPTION: Configuration rules for the Cursor AI tool defining project structure and guidelines\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/llms_migration_from_makerkit_v1_navigating_codebase_49.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Makerkit Guidelines\n\nYou are an expert programming assistant focusing on:\n\n- Expertise: React, Supabase, TypeScript, Next.js 15, Shadcn UI, Tailwind CSS in a Turborepo project\n- Focus: Code clarity, Readability, Best practices, Maintainability\n- Style: Expert level, factual, solution-focused\n- Libraries: TypeScript, React Hook Form, React Query, Zod, Lucide React\n```\n\n----------------------------------------\n\nTITLE: Site Configuration Object Structure\nDESCRIPTION: Defines the structure for site-wide configuration including branding details and metadata.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_webhooks_locally_using_lemon_squeezy_server_actions_csrf_33.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nsite: {\n  name: 'Awesomely - Your SaaS Title',\n  description: 'Your SaaS Description',\n  themeColor: '#ffffff',\n  themeColorDark: '#0a0a0a',\n  siteUrl: process.env.NEXT_PUBLIC_SITE_URL,\n  siteName: 'Awesomely',\n  twitterHandle: '',\n  githubHandle: '',\n  language: 'en',\n  convertKitFormId: '',\n  locale: process.env.NEXT_PUBLIC_DEFAULT_LOCALE,\n}\n```\n\n----------------------------------------\n\nTITLE: User Workspace Data Structure Definition\nDESCRIPTION: TypeScript interface showing the structure of data returned by loadUserWorkspace function\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/user_workspace_api_api_billing_api_37.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { User } from '@supabase/supabase-js';\n\n{\n  workspace: {\n    id: string | null;\n    name: string | null;\n    picture_url: string | null;\n    public_data: Json | null;\n    subscription_status: string | null;\n  };\n\n  user: User;\n\n  accounts: Array<{\n   id: string | null;\n    name: string | null;\n    picture_url: string | null;\n    role: string | null;\n    slug: string | null;\n  }>;\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Function to Check Active Subscription\nDESCRIPTION: Database function that checks if an account has an active subscription (status is either active or trialing).\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/adding_turborepo_package_approaching_local_development_database_functions_44.md#2025-04-22_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\npublic.has_active_subscription(\n  account_id uuid\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Full Billing Schema with Custom Plan - Makerkit (TypeScript)\nDESCRIPTION: This code defines an entire Makerkit billing schema that includes a product and a custom plan for integration with the pricing table. By setting \\`custom\\` to true and providing fields like \\`label\\\\` and \\`href\\`, the plan can be displayed for informational purposes only. The snippet relies on the createBillingSchema method, assumed to be imported from Makerkit’s billing configuration tools.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/api_billing_api_billing_schema_58.md#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nexport default createBillingSchema({\n  provider,\n  products: [\n    {\n      id: 'starter',\n      name: 'Starter',\n      description: 'The perfect plan to get started',\n      currency: 'USD',\n      badge: `Value`,\n      plans: [\n        {\n          name: 'Enterprise',\n          id: 'enterprise',\n          paymentType: 'recurring',\n          label: 'common:contactUs',\n          href: '/contact',\n          custom: true,\n          interval: 'month',\n          lineItems: [],\n        }\n      ],\n    }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS in Remix Supabase SaaS Kit\nDESCRIPTION: The default Tailwind CSS configuration for Makerkit projects, which includes custom color palettes for primary and dark themes, animation settings, and font families.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/translations_updating_latest_version_tutorials_87.md#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nconst colors = require('tailwindcss/colors');\n\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: ['./app/**/*.{ts,tsx,jsx,js}'],\n  darkMode: 'class',\n  theme: {\n    extend: {\n      fontFamily: {\n        serif: ['serif'],\n        heading: ['system-ui', 'Helvetica Neue', 'Helvetica', 'Arial'],\n        sans: [\n          'system-ui',\n          'BlinkMacSystemFont',\n          'Inter',\n          'Segoe UI',\n          'Roboto',\n          'Ubuntu',\n        ],\n        monospace: [`SF Mono`, `ui-monospace`, `Monaco`, 'Monospace'],\n      },\n      colors: {\n        border: 'hsl(var(--border))',\n        input: 'hsl(var(--input))',\n        ring: 'hsl(var(--ring))',\n        background: 'hsl(var(--background))',\n        foreground: 'hsl(var(--foreground))',\n        dark: {\n          ...colors.slate,\n          DEFAULT: colors.slate[950],\n          foreground: colors.slate[100],\n        },\n        primary: {\n          DEFAULT: 'hsl(var(--primary))',\n          foreground: 'hsl(var(--primary-foreground))',\n          ...colors.violet,\n        },\n        secondary: {\n          DEFAULT: 'hsl(var(--secondary))',\n          foreground: 'hsl(var(--secondary-foreground))',\n        },\n        destructive: {\n          DEFAULT: 'hsl(var(--destructive))',\n          foreground: 'hsl(var(--destructive-foreground))',\n        },\n        muted: {\n          DEFAULT: 'hsl(var(--muted))',\n          foreground: 'hsl(var(--muted-foreground))',\n        },\n        accent: {\n          DEFAULT: 'hsl(var(--accent))',\n          foreground: 'hsl(var(--accent-foreground))',\n        },\n        popover: {\n          DEFAULT: 'hsl(var(--popover))',\n          foreground: 'hsl(var(--popover-foreground))',\n        },\n        card: {\n          DEFAULT: 'hsl(var(--card))',\n          foreground: 'hsl(var(--card-foreground))',\n        },\n      },\n      borderRadius: {\n        lg: 'var(--radius)',\n        md: 'calc(var(--radius) - 2px)',\n        sm: 'calc(var(--radius) - 4px)',\n      },\n      keyframes: {\n        'accordion-down': {\n          from: { height: 0 },\n          to: { height: 'var(--radix-accordion-content-height)' },\n        },\n        'accordion-up': {\n          from: { height: 'var(--radix-accordion-content-height)' },\n          to: { height: 0 },\n        },\n      },\n      animation: {\n        'accordion-down': 'accordion-down 0.2s ease-out',\n        'accordion-up': 'accordion-up 0.2s ease-out',\n      },\n    },\n  },\n  plugins: [require('tailwindcss-animate')],\n};\n\n```\n\n----------------------------------------\n\nTITLE: Sending Notifications with Notifications API\nDESCRIPTION: Example function that demonstrates how to send a notification to a user after signup using the notifications API and Supabase admin client.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/introduction_migration_from_remix_navigating_codebase_67.md#2025-04-22_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createNotificationsApi } from '@kit/notifications/api';\nimport { getSupabaseServerAdminClient } from '@kit/supabase/server-admin-client';\n\nasync function sendNotificationAfterSignup(\n  accountId: string,\n) {\n  const client = getSupabaseServerAdminClient();\n  const api = createNotificationsApi(client);\n\n  await api.createNotification({\n    account_id: accountId,\n    body: 'You have successfully signed up!',\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dark Mode Colors with Slate in Tailwind CSS\nDESCRIPTION: Configuration for setting up dark mode colors using the slate color palette in Tailwind CSS. The configuration sets defaults for the dark theme and foreground colors.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/updating_navigation_menu_403_error_actions_contentlayer_stuck_34.md#2025-04-22_snippet_8\n\nLANGUAGE: js\nCODE:\n```\ndark: {\n  ...colors.slate,\n  DEFAULT: colors.slate[950],\n  foreground: colors.slate[100],\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Chat Route Handler\nDESCRIPTION: Sets up the API route handler for the chatbot functionality in Remix.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_configuration_stripe_one_time_payments_stripe_webhooks_82.md#2025-04-22_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\nimport type { ActionArgs } from '@remix-run/node';\nimport handleChatBotRequest from '~/plugins/chatbot/lib/server/route-action.server';\n\nexport const action = (args: ActionArgs) => {\n  return handleChatBotRequest(args.request);\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Project Configuration in TypeScript\nDESCRIPTION: This code snippet shows the structure of the configuration object used throughout the project. It includes settings for the site, Firebase, authentication, paths, and Stripe plans. Environment variables are used for sensitive information and deployment-specific settings.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/development_getting_started_environment_variables_firestore_data_fetching_74.md#2025-04-22_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nconst configuration = {\n  site: {\n    name: 'Awesomely - Your SaaS Title',\n    description: 'Your SaaS Description',\n    themeColor: '#ffffff',\n    themeColorDark: '#0a0a0a',\n    siteUrl: process.env.SITE_URL as string,\n    siteName: 'Awesomely',\n    twitterHandle: '',\n    githubHandle: '',\n    language: 'en',\n    convertKitFormId: '',\n  },\n  firebase: {\n    apiKey: process.env.FIREBASE_API_KEY,\n    authDomain: process.env.FIREBASE_AUTH_DOMAIN,\n    projectId: process.env.FIREBASE_PROJECT_ID,\n    storageBucket: process.env.FIREBASE_STORAGE_BUCKET,\n    messagingSenderId: process.env.FIREBASE_MESSAGING_SENDER_ID,\n    appId: process.env.FIREBASE_APP_ID,\n    measurementId: process.env.FIREBASE_MEASUREMENT_ID,\n  },\n  auth: {\n    enableMultiFactorAuth: false,\n    providers: {\n      emailPassword: true,\n      phoneNumber: false,\n      emailLink: false,\n      oAuth: [GoogleAuthProvider],\n    },\n  },\n  emulatorHost: process.env.EMULATOR_HOST,\n  emulator: process.env.EMULATOR === 'true',\n  production: process.env.NODE_ENV === 'production',\n  paths: {\n    signIn: '/auth/sign-in',\n    signUp: '/auth/sign-up',\n    emailLinkSignIn: '/auth/link',\n    onboarding: `/onboarding`,\n    appHome: '/dashboard',\n    settings: {\n      profile: '/settings/profile',\n      authentication: '/settings/profile/authentication',\n      email: '/settings/profile/email',\n      password: '/settings/profile/password',\n    },\n    api: {\n      checkout: `/resources/stripe/checkout`,\n      billingPortal: `/resources/stripe/portal`,\n    },\n    searchIndex: `/public/search-index`,\n  },\n  navigation: {\n    style: LayoutStyle.Sidebar,\n  },\n  appCheckSiteKey: process.env.APPCHECK_KEY,\n  email: {\n    host: '',\n    port: 0,\n    user: '',\n    password: '',\n    senderAddress: '',\n  },\n  emailEtherealTestAccount: {\n    email: process.env.ETHEREAL_EMAIL,\n    password: process.env.ETHEREAL_PASSWORD,\n  },\n  sentry: {\n    dsn: process.env.SENTRY_DSN,\n  },\n  stripe: {\n    plans: [\n      {\n        name: 'Basic',\n        description: 'Description of your Basic plan',\n        price: '$249/year',\n        stripePriceId: 'basic-plan',\n        features: [\n          'Feature 1',\n          'Feature 2',\n          'common:plans.features.feature1'\n        ],\n      },\n    ],\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Testimonial Form Component in React\nDESCRIPTION: This TypeScript React component implements a testimonial form using various components from the Testimonials plugin. It includes options for text and video reviews, and handles success state.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/sentry_monitoring_notifications_configuration_51.md#2025-04-22_snippet_31\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\nimport { useState } from 'react';\n\nimport {\n  TestimonialContainer,\n  TestimonialForm,\n  TestimonialSuccessMessage,\n  VideoTestimonialForm,\n} from '@kit/testimonial/client';\n\nexport function Testimonial() {\n  const [success, setSuccess] = useState(false);\n  const onSuccess = () => setSuccess(true);\n\n  if (success) {\n    return <SuccessMessage />;\n  }\n\n  return (\n    <TestimonialContainer\n      className={\n        'w-full max-w-md rounded-lg border bg-background p-8 shadow-xl'\n      }\n      welcomeMessage={<WelcomeMessage />}\n      enableTextReview={true}\n      enableVideoReview={true}\n      textReviewComponent={<TestimonialForm onSuccess={onSuccess} />}\n      videoReviewComponent={<VideoTestimonialForm onSuccess={onSuccess} />}\n      textButtonText=\"Write your thoughts\"\n      videoButtonText=\"Share a video message\"\n      backButtonText=\"Switch review method\"\n    />\n  );\n}\n\nfunction SuccessMessage() {\n  return (\n    <div\n      className={\n        'w-full max-w-md rounded-lg border bg-background p-8 shadow-xl'\n      }\n    >\n      <div className=\"flex flex-col items-center space-y-4 text-center\">\n        <div className=\"space-y-1\">\n          <h1 className=\"text-2xl font-semibold\">\n            Thank you for your feedback!\n          </h1>\n\n          <p className=\"text-muted-foreground\">\n            Your review has been submitted successfully.\n          </p>\n        </div>\n\n        <div>\n          <TestimonialSuccessMessage />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction WelcomeMessage() {\n  return (\n    <div className=\"flex flex-col items-center space-y-1 text-center\">\n      <h1 className=\"text-2xl font-semibold\">\n        We&apos;d love to hear your feedback!\n      </h1>\n\n      <p className=\"text-muted-foreground\">\n        Your opinion helps us improve our service.\n      </p>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Integration Type Definition - TypeScript\nDESCRIPTION: TypeScript interface and enum definitions for organization integrations. Defines integration types and structure for organization data model extension.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/migrations_extending_organizations_organization_hooks_10.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nenum IntegrationType {\n  Zapier,\n  Notion,\n  // etc\n}\n\ninterface Integration<IntegrationData = unknown> {\n  type: IntegrationType;\n  data: IntegrationData;\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying an Inline Loading Indicator using LoadingOverlay in React (JSX)\nDESCRIPTION: Shows how to use the 'LoadingOverlay' component as an inline loading indicator by setting the 'fullPage' prop to false. A custom height ('h-40') is applied via the 'className' prop to contain the overlay.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/app_breadcrumbs_bordered_navigation_menu_card_button_39.md#2025-04-22_snippet_21\n\nLANGUAGE: jsx\nCODE:\n```\n<LoadingOverlay fullPage={false} className=\"h-40\">\n  Fetching results...\n</LoadingOverlay>\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration\nDESCRIPTION: Example of required environment variables for Stripe webhooks configuration.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/user_roles_validating_api_input_zod_development_18.md#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nSTRIPE_WEBHOOKS_SECRET=<PASTE_KEY_HERE>\n```\n\n----------------------------------------\n\nTITLE: Accessing User Role with useCurrentUserRole Hook\nDESCRIPTION: This example demonstrates how to use the useCurrentUserRole hook to get the current user's role within the organization and display it in a component.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/deploying_production_environment_variables_functions_26.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCurrentUserRole } from '~/lib/organizations/hooks/use-current-user-role';\n\nfunction MyComponent() {\n  const role = useCurrentUserRole();\n\n  return (\n    <div>\n      <p>Current user role: {role}</p>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Permissive RLS Policy in PostgreSQL with SQL\nDESCRIPTION: This SQL snippet creates a permissive RLS policy named 'select_tickets' on the 'public.tickets' table, allowing authenticated users to read tickets if they have a role on the relevant account. It depends on the custom function 'has_role_on_account'. The key parameter is 'account_id'. This policy applies only to SELECT operations.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/database_4.md#2025-04-22_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy select_tickets  <-- name of the policy\n  on public.tickets           <-- on the public.tickets table, we want to apply the policy\n  for select                  <-- for the select operation\n  to authenticated            <-- to only the \"authenticated\" role\n  using (\n    public.has_role_on_account(account_id) <-- using the has_role_on_account function\n  );\n```\n\n----------------------------------------\n\nTITLE: Calendar Component Implementation in React\nDESCRIPTION: This code demonstrates how to use the Calendar component from ShadcnUI. It simply imports and renders a basic Calendar component without any additional configuration, providing a date selection interface.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/multi_step_forms_page_shadcn_40.md#2025-04-22_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Calendar } from '@kit/ui/calendar';\n\nexport default function CalendarDemo() {\n  return (\n    <Calendar />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking a Reusable Action in a Route Handler (TypeScript)\nDESCRIPTION: Shows how to import and call the previously defined `deletePersonalAccountAction` within a React Router route's action handler (`action`). It passes the necessary Supabase client and OTP obtained from the request context.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/creating_your_own_cms_client_keystatic_wordpress_62.md#2025-04-22_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\n// In your route file\nimport { deletePersonalAccountAction } from './actions';\n\nexport const action = async (args: Route.ActionArgs) => {\n  // ...\n  return deletePersonalAccountAction({ client, otp });\n};\n\n```\n\n----------------------------------------\n\nTITLE: Tasks Table Schema in Supabase\nDESCRIPTION: SQL schema definition for a tasks table in Supabase with organization relationship\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/updating_sidebar_menu_change_auth_strategy_setup_oauth_79.md#2025-04-22_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\ncreate table tasks (\n  id serial primary key,\n  name text,\n  organization_id integer references organizations not null,\n  due_date timestamp,\n  description text,\n  done boolean default false\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Next.js API Route Handler\nDESCRIPTION: This TypeScript snippet shows a minimal Next.js API route handler defined in `pages/api/hello-world.ts`. It accepts the standard Next.js API request (`req`) and response (`res`) objects and sends back the plain text string \"Hello World\" as the response.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/ci_tests_running_tests_testing_limitations_12.md#2025-04-22_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function helloWorldHandler(\n  req: NextApiRequest,\n  res: NextApiResponse,\n) {\n  res.send(`Hello World`);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Route Layout in React Router TSX\nDESCRIPTION: Implements a nested route layout component with tabs navigation for reports section, demonstrating proper route nesting and component organization.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/supabase_clients_data_fetching_adding_pages_63.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n// apps/web/app/routes/home/user/reports/layout.tsx\nimport { Outlet } from 'react-router';\nimport { PageHeader } from '@kit/ui/page';\nimport { Tabs, TabsList, TabsTrigger } from '@kit/ui/tabs';\n\nexport default function ReportsLayout() {\n  return (\n    <div className=\"flex flex-col space-y-4\">\n      <PageHeader>\n        <Tabs defaultValue=\"overview\">\n          <TabsList>\n            <TabsTrigger value=\"overview\" href=\"/home/reports\">Overview</TabsTrigger>\n            <TabsTrigger value=\"activity\" href=\"/home/reports/activity\">Activity</TabsTrigger>\n            <TabsTrigger value=\"usage\" href=\"/home/reports/usage\">Usage</TabsTrigger>\n          </TabsList>\n        </Tabs>\n      </PageHeader>\n\n      <Outlet />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering SecondaryHero Component in React/TSX\nDESCRIPTION: This snippet shows how to use the SecondaryHero component to create a secondary hero section on a landing page. It includes a pill, heading, and subheading.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/app_breadcrumbs_bordered_navigation_menu_card_button_39.md#2025-04-22_snippet_30\n\nLANGUAGE: tsx\nCODE:\n```\n<SecondaryHero\n  pill={<Pill>Get started for free. No credit card required.</Pill>}\n  heading=\"Fair pricing for all types of businesses\"\n  subheading=\"Get started on our free plan and upgrade when you are ready.\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting Per-Seat Subscription Environment Variables in Next.js\nDESCRIPTION: Environment variable configuration for Stripe per-seat subscription price IDs in the production environment\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/deploy_production_introduction_5.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nNEXT_PUBLIC_PER_SEAT_PLAN_MONTHLY_VARIANT_ID=<your-monthly-price-id>\nNEXT_PUBLIC_PER_SEAT_PLAN_YEARLY_VARIANT_ID=<your-yearly-price-id>\n```\n\n----------------------------------------\n\nTITLE: Using Feedback Components\nDESCRIPTION: Examples of implementing feedback components including both popup and form variants.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/technical_details_updating_codebase_installation_97.md#2025-04-22_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport {FeedbackPopup} from '@kit/feedback';\n\n<FeedbackPopup>\n    <Button>Gimme feedback</Button>\n</FeedbackPopup>\n\nimport {FeedbackForm} from '@kit/feedback';\n\n<FeedbackForm/>\n```\n\n----------------------------------------\n\nTITLE: Creating a Billing Gateway Service in Makerkit\nDESCRIPTION: This code instantiates a billing gateway service for a specific provider (e.g., Stripe). The service provides methods for managing billing operations using the Strategy design pattern.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/google_analytics_provider_posthog_analytics_provider_umami_analytics_provider_88.md#2025-04-22_snippet_35\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createBillingGatewayService } from '@kit/billing-gateway';\n\nconst service = createBillingGatewayService('stripe');\n```\n\n----------------------------------------\n\nTITLE: Configuring i18n for Multiple Languages\nDESCRIPTION: Configuration for adding support for multiple languages in the Remix application by modifying the i18next config file.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/project_structure_running_project_tailwind_css_75.md#2025-04-22_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nconst i18Config = {\n  fallbackLanguage: DEFAULT_LOCALE,\n  supportedLanguages: [DEFAULT_LOCALE, 'es'],\n  defaultNS: ['common', 'auth', 'organization', 'profile', 'subscription'],\n  react: { useSuspense: false },\n};\n```\n\n----------------------------------------\n\nTITLE: Providing OAuth Provider Logos for Auth UI - TypeScript/React\nDESCRIPTION: Specifies a function that returns a mapping of authentication provider keys to their corresponding logo representations (string or React component). This is used to display the correct icon for each provider in the authentication UI. Dependencies include relevant icons and static image paths; providers not in the mapping must be added manually for custom branding.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/adding_app_pages_guarding_pages_updating_sidebar_menu_32.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nfunction getOAuthProviderLogos(): Record<string, string | React.ReactNode> {\n  return {\n    password: <AtSymbolIcon className={'h-[22px] w-[22px]'} />, \n    phone: <DevicePhoneMobileIcon className={'h-[22px] w-[22px]'} />,\n    google: '/assets/images/google.webp',\n    facebook: '/assets/images/facebook.webp',\n    twitter: '/assets/images/twitter.webp',\n    github: '/assets/images/github.webp',\n    microsoft: '/assets/images/microsoft.webp',\n    apple: '/assets/images/apple.webp',\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Organization Interface with Integrations\nDESCRIPTION: This example demonstrates how to extend the Organization interface to include integrations. It defines an IntegrationType enum and an Integration interface, then adds an integrations property to the Organization interface.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/theming_how_to_version_0_6_0_81.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nenum IntegrationType {\n  Zapier,\n  Notion,\n  // etc\n}\n\ninterface Integration<IntegrationData = unknown> {\n  type: IntegrationType;\n  data: IntegrationData;\n}\n\ninterface Organization {\n  // ...\n  integrations: Integration[];\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding Images in Markdoc Documentation\nDESCRIPTION: These snippets demonstrate the Markdoc tag syntax used to embed images within the documentation files for the Next.js Supabase Turbo Starter Kit. The `img` tag specifies the image source (`src`), width, and height attributes. Each tag embeds a specific screenshot illustrating a part of the application's user interface.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/code_health_common_commands_conventions_48.md#2025-04-22_snippet_19\n\nLANGUAGE: markdown\nCODE:\n```\n{% img src=\"/assets/images/docs/walkthrough/home-page.webp\" width=\"3420\" height=\"2142\" /%}\n```\n\nLANGUAGE: markdown\nCODE:\n```\n{% img src=\"/assets/images/docs/walkthrough/pricing.webp\" width=\"3420\" height=\"2142\" /%}\n```\n\nLANGUAGE: markdown\nCODE:\n```\n{% img src=\"/assets/images/docs/walkthrough/faq.webp\" width=\"3420\" height=\"2142\" /%}\n```\n\nLANGUAGE: markdown\nCODE:\n```\n{% img src=\"/assets/images/docs/walkthrough/contact.webp\" width=\"3420\" height=\"2142\" /%}\n```\n\nLANGUAGE: markdown\nCODE:\n```\n{% img src=\"/assets/images/docs/walkthrough/blog.webp\" width=\"3420\" height=\"2142\" /%}\n```\n\nLANGUAGE: markdown\nCODE:\n```\n{% img src=\"/assets/images/docs/walkthrough/blog-post.webp\" width=\"3420\" height=\"2142\" /%}\n```\n\nLANGUAGE: markdown\nCODE:\n```\n{% img src=\"/assets/images/docs/walkthrough/walkthrough-documentation.webp\" width=\"3420\" height=\"2142\" /%}\n```\n\nLANGUAGE: markdown\nCODE:\n```\n{% img src=\"/assets/images/docs/walkthrough/sign-up.webp\" width=\"3420\" height=\"2142\" /%}\n```\n\nLANGUAGE: markdown\nCODE:\n```\n{% img src=\"/assets/images/docs/walkthrough/sign-up-success.webp\" width=\"3420\" height=\"2142\" /%}\n```\n\nLANGUAGE: markdown\nCODE:\n```\n{% img src=\"/assets/images/docs/walkthrough/sign-in.webp\" width=\"3420\" height=\"2142\" /%}\n```\n\nLANGUAGE: markdown\nCODE:\n```\n{% img src=\"/assets/images/docs/walkthrough/password-reset.webp\" width=\"3420\" height=\"2142\" /%}\n```\n\nLANGUAGE: markdown\nCODE:\n```\n{% img src=\"/assets/images/docs/walkthrough/setup-mfa.webp\" width=\"3420\" height=\"2142\" /%}\n```\n\nLANGUAGE: markdown\nCODE:\n```\n{% img src=\"/assets/images/docs/walkthrough/verify-mfa.webp\" width=\"3420\" height=\"2142\" /%}\n```\n\n----------------------------------------\n\nTITLE: Example: Sidebar Layout with Page Component (JSX)\nDESCRIPTION: This JSX snippet provides a concrete example of the 'Page' component configured with `style=\"sidebar\"`. It includes placeholders 'SidebarContent' within 'PageNavigation', 'UserMenu' within 'PageHeader', and 'DashboardContent' within 'PageBody' to illustrate where different parts of the UI would be placed in a typical sidebar layout application structure.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/bordered_navigation_menu_card_button_cookie_banner_60.md#2025-04-22_snippet_19\n\nLANGUAGE: jsx\nCODE:\n```\n<Page style=\"sidebar\">\n  <PageNavigation>\n    <SidebarContent />\n  </PageNavigation>\n  <PageHeader title=\"Dashboard\" description=\"Overview of your account\">\n    <UserMenu />\n  </PageHeader>\n  <PageBody>\n    <DashboardContent />\n  </PageBody>\n</Page>\n\n```\n\n----------------------------------------\n\nTITLE: Updating i18n Namespace in TypeScript\nDESCRIPTION: This snippet demonstrates how to add a new bundle name to the list of default translation namespaces in a Next.js application using TypeScript. Familiarity with i18n settings and JSON file creation is a prerequisite. The input is the new translation bundle name, which must be added to an array of strings.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/branding_environment_variables_setup_project_configuration_21.md#2025-04-22_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const defaultI18nNamespaces = [\n  'common',\n  'auth',\n  'organization',\n  'profile',\n  'subscription',\n  'tasks'\n];\n```\n\n----------------------------------------\n\nTITLE: Using Custom API Request Hook in Remix Component\nDESCRIPTION: Demonstrates how to use a custom API request hook in a React component, handling loading, error, and success states.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/setting_up_firebase_custom_fetch_fetching_data_firestore_70.md#2025-04-22_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCreateSession } from '~/core/hooks/use-create-session';\n\nfunction Component() {\n  const [createSession, createSessionState] = useCreateSession();\n\n  return (\n    <>\n      { createSessionState.loading ? `Loading...` : null }\n      { createSessionState.error ? `Error :(` : null }\n      { createSessionState.success ? `Yay, success!` : null }\n\n      <SignInForm onSignIn={(idToken) => createSession({ idToken })} />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Node Dependencies\nDESCRIPTION: Command to install all required Node.js dependencies using npm\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/uploading_data_to_storage_writing_data_to_supabase_data_fetching_77.md#2025-04-22_snippet_43\n\nLANGUAGE: bash\nCODE:\n```\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Creating consume_credits Function for Deducting Tokens - Supabase SQL\nDESCRIPTION: This plpgsql SQL function decrements the user\\'s tokens from the \\`public.credits\\` table by the specified amount. It is intended for consumption by backend services using the service role. The function should be called whenever a user-triggered action consumes credits, adhering to security policies restricting write access.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/api_billing_api_billing_schema_58.md#2025-04-22_snippet_19\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace function public.consume_credits(account_id uuid, tokens integer)\n  returns void\n  set search_path = ''\n  as $$\n  begin\n    update public.credits set tokens = tokens - tokens where account_id = account_id;\n  end;\n  $$ language plpgsql;\n\ngrant execute on function public.has_credits to service_role;\n```\n\n----------------------------------------\n\nTITLE: Generating Supabase TypeScript Types using PNPM Script\nDESCRIPTION: Runs a predefined pnpm script (`supabase:web:typegen`) to generate TypeScript type definitions based on the current Supabase database schema for the 'web' application. This ensures the Supabase client used within the Remix application has accurate type inference, reflecting any recent schema changes.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/adding_turborepo_package_approaching_local_development_database_functions_93.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\npnpm run supabase:web:typegen\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript Types from SQL Schema in Bash\nDESCRIPTION: This command generates TypeScript types from your SQL schema using the Supabase CLI. Before running this command, ensure Supabase is running locally with 'npm run supabase:start'. The generated types will be saved to 'app/database-types.ts'.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/user_sdk_sdk_ci_tests_84.md#2025-04-22_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\nnpm run typegen\n```\n\n----------------------------------------\n\nTITLE: Prettier Configuration Settings\nDESCRIPTION: JSON configuration for Prettier code formatting with default settings for TypeScript projects.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/server_actions_uploading_data_to_storage_writing_data_to_supabase_30.md#2025-04-22_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tabWidth\": 2,\n  \"useTabs\": false,\n  \"semi\": true,\n  \"arrowParens\": \"always\",\n  \"parser\": \"typescript\",\n  \"printWidth\": 80,\n  \"singleQuote\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Using useIsSubscriptionActive Hook in a Component\nDESCRIPTION: This example demonstrates how to use the useIsSubscriptionActive hook in a React component to conditionally render content based on the subscription status.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/adding_admin_users_admin_overview_admin_1.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useIsSubscriptionActive } from '~/lib/organizations/hooks/use-is-subscription-active';\n\nfunction MyComponent() {\n  const isSubscriptionActive = useIsSubscriptionActive();\n\n  if (isSubscriptionActive) {\n    return <p>You are on a paid subscription!</p>;\n  } else {\n    return <p>You are not on a paid subscription.</p>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Categories for WordPress Pages\nDESCRIPTION: PHP function to register category taxonomy for WordPress pages. This code needs to be added to the theme's functions.php file to enable categorization of pages.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/team_account_sidebar_configuration_configuration_cms_api_92.md#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nfunction add_categories_to_pages() {\n    register_taxonomy_for_object_type('category', 'page');\n}\nadd_action('init', 'add_categories_to_pages');\n```\n\n----------------------------------------\n\nTITLE: Validating Project Environment Variables with Turbo Script (Bash)\nDESCRIPTION: This command uses Turborepo (`turbo gen`) to execute a Makerkit script named `validate-env`. Its purpose is to check if the required environment variables are correctly set. By default, it validates the variables defined in the `.env.local` file located within the `turbo/generators/templates/env` directory, ensuring the configuration is complete before deployment.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/emails_authentication_checklist_65.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nturbo gen validate-env\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Tooltip Component with shadcn UI in TSX\nDESCRIPTION: This example demonstrates how to create a basic tooltip that appears when hovering over a button. It uses the TooltipProvider, Tooltip, TooltipTrigger, and TooltipContent components from the shadcn UI library.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/multi_step_forms_page_shadcn_40.md#2025-04-22_snippet_33\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@kit/ui/tooltip';\nimport { Button } from '@kit/ui/button';\n\nexport default function TooltipDemo() {\n  return (\n    <div>\n      <TooltipProvider>\n        <Tooltip>\n          <TooltipTrigger asChild>\n            <Button variant=\"outline\">Hover over me</Button>\n          </TooltipTrigger>\n\n          <TooltipContent>\n            This is a tooltip with some content.\n          </TooltipContent>\n        </Tooltip>\n      </TooltipProvider>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Basic API Handler Structure in TypeScript\nDESCRIPTION: This snippet shows a minimal function signature for an API handler `addIntegrationHandler` which calls another function `writeToFirestore`. It serves as a starting point before demonstrating how to add logging.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/develop_firebase_security_rules_emails_encrypting_secrets_71.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nfunction addIntegrationHandler() {\n  return writeToFirestore(data);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Role Translations to Localization File\nDESCRIPTION: Updates the common.json translations file to include labels and descriptions for custom roles, which will be displayed in the application UI.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/user_roles_validating_api_input_zod_development_18.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"roles\": {\n  \"owner\": {\n    \"label\": \"Owner\",\n    \"description\": \"Can change any setting, invite new members and manage billing\"\n  },\n  \"accountmanager\": {\n    \"label\": \"Account Manager\",\n    \"description\": \"Can change some settings, invite members, perform disruptive actions\"\n  },\n  \"readonly\": {\n    \"label\": \"Readonly\",\n    \"description\": \"Can only read information\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Team Account Workspace by Slug with Team Account API (TypeScript)\nDESCRIPTION: Illustrates fetching workspace data for a team account using its unique slug via the `getAccountWorkspace` method. This is often used in layout components to hydrate context.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/google_analytics_provider_posthog_analytics_provider_umami_analytics_provider_88.md#2025-04-22_snippet_30\n\nLANGUAGE: tsx\nCODE:\n```\nconst api = createTeamAccountsApi(client);\nconst workspace = await api.getAccountWorkspace('account-slug');\n```\n\n----------------------------------------\n\nTITLE: Restarting Supabase and Running Migrations\nDESCRIPTION: Commands to restart Supabase locally and reapply migrations when tables are not found\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/supabase_not_stopping_tables_not_found_dark_theme_22.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run supabase:stop\nnpm run supabase:start\n```\n\n----------------------------------------\n\nTITLE: Integrating Analytics with App Events System (TypeScript)\nDESCRIPTION: Example demonstrating the recommended approach of using Makerkit's App Events system for analytics. By emitting a standard app event (e.g., `user.signedUp`) using the `useAppEvents` hook, Makerkit automatically triggers the corresponding `analytics.identify` and `analytics.trackEvent` calls, centralizing event logic.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/google_analytics_provider_posthog_analytics_provider_umami_analytics_provider_88.md#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useAppEvents } from '@kit/shared/events';\n\nfunction SomeComponent() {\n  const { emit } = useAppEvents();\n\n  const handleSignUp = (userId: string) => {\n    emit({ type: 'user.signedUp', payload: { userId } });\n    // This automatically calls analytics.identify and analytics.trackEvent\n  };\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Email Configuration for Makerkit SaaS Application\nDESCRIPTION: This code snippet shows the environment variables required to set up email functionality in a Makerkit SaaS application. It includes SMTP server details and sender information for use with the nodemailer library.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_webhooks_locally_using_lemon_squeezy_server_actions_csrf_33.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nEMAIL_HOST=\nEMAIL_PORT=587\nEMAIL_USER=\nEMAIL_PASSWORD=\nEMAIL_SENDER='MakerKit Team <info@makerkit.dev>'\n```\n\n----------------------------------------\n\nTITLE: Defining Server Action in Next.js\nDESCRIPTION: Example of creating a server action in a separate actions.ts file. Uses the 'use server' directive to mark the function as a server-side action.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/user_reading_record_creating_record_20.md#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n'use server';\n\nexport async function createPostAction(\n  formData: FormData\n) {\n  // Do something with the form data\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing NewsletterSignupContainer in React/TSX\nDESCRIPTION: This snippet shows how to implement the NewsletterSignupContainer component for handling newsletter signups. It includes a custom onSignup function and customizable props for heading, description, and messages.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/app_breadcrumbs_bordered_navigation_menu_card_button_39.md#2025-04-22_snippet_36\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\nimport { NewsletterSignupContainer } from '@kit/ui/marketing';\n\nfunction WrapperNewsletterComponent() {\n  const handleNewsletterSignup = async (email: string) => {\n    // Implement your signup logic here\n    await apiClient.subscribeToNewsletter(email);\n  };\n\n  return (\n    <NewsletterSignupContainer \n      onSignup={handleNewsletterSignup}\n      heading=\"Join Our Community\"\n      description=\"Be the first to know about new features and updates.\"\n      successMessage=\"You're all set! Check your inbox for a confirmation email.\"\n      errorMessage=\"Oops! Something went wrong. Please try again later.\"\n      className=\"max-w-md mx-auto\"\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding TypeScript Path Aliases for AI Text Editor Plugin\nDESCRIPTION: TypeScript configuration to add path aliases for plugins, allowing the TypeScript compiler to find and import the plugin code.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_configuration_stripe_one_time_payments_stripe_webhooks_82.md#2025-04-22_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"paths\": {\n      \"~/plugins/*\": [\n        \"./plugins/*\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Events List Container Component\nDESCRIPTION: React component that implements the events list view using the useFetchEvents hook.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/ui_hooks_mdx_15.md#2025-04-22_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useFetchEvents } from '~/lib/events/hooks/use-fetch-events';\nimport Alert from `~/core/ui/Alert`;\n\nconst EventsListContainer: React.FC = () => {\n  const { data: events, isLoading, error } = useFetchEvents();\n\n  if (isLoading) {\n    return <p>Loading Events...</p>\n  }\n\n  if (error) {\n    return (\n      <Alert type='error'>\n        Ops, we encountered an error!\n      </Alert>\n    );\n  }\n\n  return (\n    <div>\n      {events.map(event => {\n        return (\n          <div key={event.name}>\n            <p>{event.name}</p>\n            <p>{event.description}</p>;\n          </div>\n        );\n      })}\n    </div>\n  )\n};\n\nexport default EventsListContainer;\n```\n\n----------------------------------------\n\nTITLE: Configuring i18next Language Settings in NextJS\nDESCRIPTION: Configuration for setting up i18next language support with fallback locale and multiple language options\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/translations_updating_latest_version_tutorials_28.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst fallbackLng = process.env.DEFAULT_LOCALE ?? 'en';\nconst languages: string[] = [fallbackLng, 'es', 'fr', 'it'];\n```\n\n----------------------------------------\n\nTITLE: Initializing Billing Schema with Provider in Next.js\nDESCRIPTION: Basic configuration for creating a billing schema with a provider. The provider is set from environment variables and defaults to 'stripe'.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/user_workspace_api_api_billing_api_37.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nexport default createBillingSchema({\n  // also update config.billing_provider in the DB to match the selected\n  provider,\n  // products configuration\n  products: []\n});\n```\n\n----------------------------------------\n\nTITLE: Tailwind Configuration for Dark Mode\nDESCRIPTION: Updated Tailwind CSS configuration with dark mode and custom color palettes.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/supabase_not_stopping_tables_not_found_dark_theme_22.md#2025-04-22_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nconst colors = require('tailwindcss/colors');\n\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: ['./app/**/*.{ts,tsx,jsx,js}'],\n  darkMode: 'class',\n  theme: {\n    extend: {\n      fontFamily: {\n        serif: ['serif'],\n        heading: ['system-ui', 'Helvetica Neue', 'Helvetica', 'Arial'],\n        sans: [\n          'system-ui',\n          'BlinkMacSystemFont',\n          'Inter',\n          'Segoe UI',\n          'Roboto',\n          'Ubuntu',\n        ],\n        monospace: [`SF Mono`, `ui-monospace`, `Monaco`, 'Monospace'],\n      },\n      colors: {\n        primary: {\n          ...colors.indigo,\n          contrast: '#fff',\n        },\n        dark: colors.slate,\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Adding a New Entry to Sidebar Navigation Configuration (TSX)\nDESCRIPTION: This snippet demonstrates how to add a new menu item to the `NAVIGATION_CONFIG.items` array in `src/navigation.config.tsx`. A new object representing the 'My New Tab' entry, including its label, path, and icon, is added to the array (lines 32-37 highlighted in the original context). This change will automatically update the application's sidebar.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/api_routes_vs_server_actions_api_routes_call_api_routes_from_client_19.md#2025-04-22_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport configuration from '~/configuration';\n\nimport {\n  Cog8ToothIcon,\n  Square3Stack3DIcon,\n  Squares2X2Icon,\n} from '@heroicons/react/24/outline';\n\nconst NAVIGATION_CONFIG = {\n  items: [\n    {\n      label: 'common:dashboardTabLabel',\n      path: configuration.paths.appHome,\n      Icon: ({ className }: { className: string }) => {\n        return <Squares2X2Icon className={className} />;\n      },\n    },\n    {\n      label: 'common:tasksTabLabel',\n      path: '/tasks',\n      Icon: ({ className }: { className: string }) => {\n        return <Square3Stack3DIcon className={className} />;\n      },\n    },\n    {\n      label: 'common:settingsTabLabel',\n      path: '/settings',\n      Icon: ({ className }: { className: string }) => {\n        return <Cog8ToothIcon className={className} />;\n      },\n    },\n    {\n      label: 'common:myNewTabLabel',\n      path: '/my-new-tab',\n      Icon: ({ className }: { className: string }) => {\n        return <Cog8ToothIcon className={className} />;\n      },\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Tracking Custom Events with Makerkit Analytics API (TypeScript)\nDESCRIPTION: Shows how to use the `analytics.trackEvent` method to record specific user actions or events. It takes an event name (e.g., 'Button Clicked') and an optional payload object containing event properties (e.g., `buttonName`, `page`).\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/google_analytics_provider_posthog_analytics_provider_umami_analytics_provider_88.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nvoid analytics.trackEvent('Button Clicked', {\n  buttonName: 'Submit',\n  page: 'Sign Up',\n});\n```\n\n----------------------------------------\n\nTITLE: Secret Environment Variables for Production in Next.js Supabase Project\nDESCRIPTION: List of sensitive environment variables that should be set through CI/CD systems rather than in the codebase. Includes Supabase service role key, Stripe secrets, and email service credentials.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/architecture_auth_overview_auth_setup_29.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# SUPABASE\nSUPABASE_SERVICE_ROLE_KEY=\n\n# STRIPE\nSTRIPE_WEBHOOK_SECRET=\nSTRIPE_SECRET_KEY=\n\n# EMAIL -\nEMAIL_HOST=\nEMAIL_PORT=587\nEMAIL_USER=\nEMAIL_PASSWORD=\nEMAIL_SENDER='MakerKit Team <info@makerkit.dev>'\n```\n\n----------------------------------------\n\nTITLE: Creating a Destructive Alert Component in React\nDESCRIPTION: Shows how to implement a Destructive (Error) Alert component using the 'destructive' variant from Shadcn UI in a React application.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/multi_step_forms_page_shadcn_40.md#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { XCircleIcon } from 'lucide-react';\n\nimport { Alert, AlertDescription, AlertTitle } from '@kit/ui/alert';\n\nexport default function ErrorAlertDemo() {\n  return (\n    <Alert variant={'destructive'}>\n      <XCircleIcon className=\"h-5 w-5\" />\n\n      <AlertTitle>\n        <span>This is an error alert</span>\n      </AlertTitle>\n\n      <AlertDescription>\n        This is the description of the alert.\n      </AlertDescription>\n    </Alert>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Widget Context Creation with React\nDESCRIPTION: Creates a React context to manage the widget's state, including open/close state and ticket ID\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/building_javascript_widget_1.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createContext } from 'react';\n\nexport const WidgetContext = createContext({\n  isOpen: false,\n  setIsOpen: (_: boolean) => {\n    //\n  },\n  ticketId: '',\n  setTicketId: (_: string) => {\n    //\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Logging in API Functions with Pino\nDESCRIPTION: Example of how to implement logging in API functions using the Pino library. The example demonstrates logging before operations, after successful operations, and error handling, including context data such as user ID and organization ID.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/server_actions_uploading_data_to_storage_writing_data_to_supabase_30.md#2025-04-22_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nimport logger from '~/core/logger';\n\nasync function addIntegrationHandler(\n  userId: string,\n  organizationId: number,\n  integrationId: number,\n) {\n  // this is the context that every log will print out\n  const loggingContext = {\n    integrationId,\n    organizationId,\n    userId,\n  };\n\n  // Here we log what we're doing\n  logger.log(loggingContext, `Adding new integration to organization`);\n\n  try {\n    await writeToDb(data);\n\n    // Here we log that the result of the operation\n    // was successful\n    logger.log(loggingContext, `Integration successfully added`);\n\n    // return successful response\n    return res.json({\n      integrationId,\n      success: true\n    });\n  } catch (e) {\n    // Here we log that the operation failed\n    logger.error(loggingContext, `Encountered an error while adding integration`);\n\n    // Logging errors can be okay but\n    // ensure not to leak important information!\n    logger.debug(e);\n\n    // return 500\n    return res.status(500).json({\n      integrationId,\n      success: false\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Monitoring Provider Configuration\nDESCRIPTION: Environment variables required to configure the monitoring provider and enable performance instrumentation in the application.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/introduction_migration_from_remix_navigating_codebase_67.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n# sentry or baselime\nVITE_MONITORING_PROVIDER=\n\n# performance monitoring\nMONITORING_INSTRUMENTATION_ENABLED=true\n```\n\n----------------------------------------\n\nTITLE: Formatting Code with Prettier (Bash)\nDESCRIPTION: Executes the `format:fix` script via `pnpm run`. This command typically runs Prettier with a write flag (`--write` or similar) to reformat code files across the project according to the defined Prettier configuration, ensuring consistent code style.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/code_health_common_commands_conventions_48.md#2025-04-22_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\npnpm run format:fix\n```\n\n----------------------------------------\n\nTITLE: Cloning Remix Supabase Repository\nDESCRIPTION: Command to clone the Remix Supabase SaaS kit repository into a local folder named 'my-saas'\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/uploading_data_to_storage_writing_data_to_supabase_data_fetching_77.md#2025-04-22_snippet_39\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:makerkit/remix-supabase-saas-kit.git my-saas\n```\n\n----------------------------------------\n\nTITLE: Generating Remix Supabase Kit Documentation\nDESCRIPTION: Command to generate markdown files for the Remix Supabase Turbo kit documentation.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnode index.js kits/remix-supabase-turbo\n```\n\n----------------------------------------\n\nTITLE: Creating Credits Table in SQL\nDESCRIPTION: Creates a credits table with row level security to track user credit consumption. Links to accounts table and includes policy for user access.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/user_workspace_api_api_billing_api_37.md#2025-04-22_snippet_16\n\nLANGUAGE: sql\nCODE:\n```\ncreate table public.credits (\n  account_id uuid not null references public.accounts(id),\n  tokens integer not null\n);\n\nalter table public.credits enable row level security;\n\n-- allow authenticated users to read their credits\ncreate policy read_credits\n  on public.credits\n  for select\n  to authenticated\n  using (\n    account_id = (select auth.uid())\n  );\n```\n\n----------------------------------------\n\nTITLE: Running Supabase Migration Reset\nDESCRIPTION: Command to apply database migrations\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/sentry_monitoring_notifications_configuration_51.md#2025-04-22_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\npnpm run supabase:web:reset\n```\n\n----------------------------------------\n\nTITLE: Next.js Projects Page Implementation\nDESCRIPTION: Next.js server component implementing a projects listing page using ProjectsService\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/projects_data_model_53.md#2025-04-22_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\nimport { use } from 'react';\n\nimport Link from 'next/link';\n\nimport { getSupabaseServerComponentClient } from '@kit/supabase/server-component-client';\nimport { Button } from '@kit/ui/button';\nimport { CardButton } from '@kit/ui/card-button';\nimport {\n  EmptyState,\n  EmptyStateButton,\n  EmptyStateHeading,\n  EmptyStateText,\n} from '@kit/ui/empty-state';\nimport { If } from '@kit/ui/if';\nimport { PageBody, PageHeader } from '@kit/ui/page';\n\nimport { createProjectsService } from '~/lib/server/projects/projects.service';\n\ninterface ProjectsPageProps {\n  params: {\n    account: string;\n  };\n}\n\nexport default function ProjectsPage({ params }: ProjectsPageProps) {\n  const client = getSupabaseServerComponentClient();\n  const service = createProjectsService(client);\n\n  const projects = use(service.getProjects(params.account));\n\n  return (\n    <>\n      <PageHeader title=\"Projects\" description=\"Manage your team's projects\">\n        <Link href={`/home/${params.account}/projects/new`}>\n          <Button>New Project</Button>\n        </Link>\n      </PageHeader>\n\n      <PageBody>\n        <If condition={projects.length === 0}>\n          <EmptyState>\n            <EmptyStateHeading>No projects found</EmptyStateHeading>\n\n            <EmptyStateText>\n              You still have not created any projects. Create your first project\n              now!\n            </EmptyStateText>\n\n            <EmptyStateButton>Create Project</EmptyStateButton>\n          </EmptyState>\n        </If>\n\n        <div className={'grid grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-4'}>\n          {projects.map((project) => (\n            <CardButton key={project.id} asChild>\n              <Link href={`/home/${params.account}/projects/${project.id}`}>\n                {project.name}\n              </Link>\n            </CardButton>\n          ))}\n        </div>\n      </PageBody>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Resetting Local Supabase Schema using PNPM Script\nDESCRIPTION: Executes a predefined pnpm script (`supabase:web:reset`) to reset the local Supabase database schema for the 'web' application. This command applies all existing migration files, including newly created ones, effectively updating the local development database structure. It should be run after modifying migration files.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/adding_turborepo_package_approaching_local_development_database_functions_93.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\npnpm run supabase:web:reset\n```\n\n----------------------------------------\n\nTITLE: Configuring Per-Seat Billing in TypeScript Billing Schema\nDESCRIPTION: This snippet illustrates how to implement per-seat billing with tiered pricing. It includes tiers for different seat counts, allowing for free seats and decreasing per-seat cost as the number of seats increases.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/api_billing_api_billing_schema_58.md#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nexport default createBillingSchema({\n  provider,\n  products: [\n    {\n      id: 'starter',\n      name: 'Starter',\n      description: 'The perfect plan to get started',\n      currency: 'USD',\n      badge: `Value`,\n      plans: [\n        {\n          name: 'Starter Monthly',\n          id: 'starter-monthly',\n          trialDays: 7,\n          paymentType: 'recurring',\n          interval: 'month',\n          lineItems: [\n            {\n              id: 'price_1NNwYHI1i3VnbZTqI2UzaHIe',\n              name: 'Addon 2',\n              cost: 0,\n              type: 'per_seat',\n              tiers: [\n                {\n                    upTo: 3,\n                    cost: 0,\n                },\n                {\n                    upTo: 5,\n                    cost: 7.99,\n                },\n                {\n                    upTo: 'unlimited',\n                    cost: 5.99,\n                }\n              ]\n            },\n          ],\n        }\n      ],\n    }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Running Automated Migration Script via Node.js\nDESCRIPTION: This command executes the automated migration script to update Tailwind CSS classes and package imports in the project files.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/environment_variables_setup_project_configuration_set_up_emails_9.md#2025-04-22_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nnode migrate-0.11.js\n```\n\n----------------------------------------\n\nTITLE: Creating RLS Policy for Task Selection\nDESCRIPTION: SQL command to create a Row Level Security (RLS) policy for selecting tasks. This policy ensures users can only select tasks they own or have roles access to.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/supabase_clients_data_fetching_adding_pages_63.md#2025-04-22_snippet_21\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy select_tasks on public.tasks\n    for select\n    to authenticated\n    using (\n      account_id = auth.uid() or\n      public.has_role_on_account(account_id)\n    );\n```\n\n----------------------------------------\n\nTITLE: Set Git Username Globally\nDESCRIPTION: Configures your Git installation to use a specific username for all repositories globally. This is necessary for seamless access to Makerkit's Github repositories.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/cloudflare_production_environment_variables_supabase_47.md#2025-04-22_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ngit config --global user.username <your-github-username>\n```\n\n----------------------------------------\n\nTITLE: Updating buildOrganizationSubscription Function in TypeScript\nDESCRIPTION: This code snippet demonstrates how to modify the buildOrganizationSubscription function to include the new 'quantity' property when constructing the OrganizationSubscription object from a Stripe subscription.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_one_time_payments_stripe_webhooks_payments_11.md#2025-04-22_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { Stripe } from 'stripe';\nimport type { OrganizationSubscription } from '~/lib/organizations/types/organization-subscription';\n\nexport function buildOrganizationSubscription(\n  subscription: Stripe.Subscription,\n): OrganizationSubscription {\n  const lineItem = subscription.items.data[0];\n  const price = lineItem.price;\n\n  return {\n    // your props\n    quantity: lineItem.quantity,\n\n    // default props\n    id: subscription.id,\n    priceId: price?.id,\n    status: subscription.status,\n    cancelAtPeriodEnd: subscription.cancel_at_period_end,\n    currency: lineItem.price.currency ?? null,\n    interval: price?.recurring?.interval ?? null,\n    intervalCount: price?.recurring?.interval_count ?? null,\n    createdAt: subscription.created,\n    periodStartsAt: subscription.current_period_start,\n    periodEndsAt: subscription.current_period_end,\n    trialStartsAt: subscription.trial_start ?? null,\n    trialEndsAt: subscription.trial_end ?? null,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Resend API Key in Environment Variables\nDESCRIPTION: Configuration for the Resend API key in the environment variables, which is required when using Resend as the mailer provider.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/development_authentication_emails_email_configuration_94.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nRESEND_API_KEY=your-api-key\n```\n\n----------------------------------------\n\nTITLE: Importing Modules from a Package in React\nDESCRIPTION: Example of importing a module from a Makerkit package in a React application after configuring exports in package.json.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/supabase_clients_data_fetching_adding_pages_63.md#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { myModule } from '@kit/my-package';\n\nconsole.log(myModule());\n```\n\n----------------------------------------\n\nTITLE: Enabling E2E Test Job in GitHub Actions (Bash/Env)\nDESCRIPTION: Sets the environment variable `ENABLE_E2E_JOB` to `true` within the GitHub Actions workflow configuration. This flag enables the execution of the End-to-End test job, which might be disabled by default.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/configuring_supabase_database_webhooks_fly_production_environment_variables_95.md#2025-04-22_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nENABLE_E2E_JOB=true\n```\n\n----------------------------------------\n\nTITLE: WordPress Database Configuration\nDESCRIPTION: Default database configuration for the WordPress Docker container.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/creating_your_own_cms_client_keystatic_wordpress_62.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nWORDPRESS_DB_HOST=db\nWORDPRESS_DB_USER=wordpress\nWORDPRESS_DB_PASSWORD=wordpress\nWORDPRESS_DB_NAME=wordpress\n```\n\n----------------------------------------\n\nTITLE: Defining Role Labels and Descriptions in JSON (JSON)\nDESCRIPTION: Shows how to define user-facing labels and descriptions for custom roles (owner, accountmanager, readonly) within a JSON translation file (e.g., `common.json`). This is used for internationalization (i18n) to display role information in the UI.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/commands_cors_develop_firebase_security_rules_5.md#2025-04-22_snippet_35\n\nLANGUAGE: json\nCODE:\n```\n```json\n\"roles\": {\n  \"owner\": {\n    \"label\": \"Owner\",\n    \"description\": \"Can change any setting, invite new members and manage billing\"\n  },\n  \"accountmanager\": {\n    \"label\": \"Account Manager\",\n    \"description\": \"Can change some settings, invite members, perform disruptive actions\"\n  },\n  \"readonly\": {\n    \"label\": \"Readonly\",\n    \"description\": \"Can only read information\"\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: SQL Function to Count User Tasks\nDESCRIPTION: SQL function that counts the number of tasks associated with a specific user ID. This function returns an integer representing the task count, which can be used for enforcing quota limits based on subscription plans.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/server_actions_uploading_data_to_storage_writing_data_to_supabase_30.md#2025-04-22_snippet_24\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace function get_user_task_count(user_id bigint)\nreturns int as $$\ndeclare\n    task_count int;\nbegin\n    select count(*)\n        from tasks\n        where tasks.user_id = user_id\n        into task_count;\n\n    return task_count;\nend;\n$$ language plpgsql;\n```\n\n----------------------------------------\n\nTITLE: Starting Stripe for Webhook Testing\nDESCRIPTION: Command to start Stripe listener for routing webhooks to the local development environment.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/configuring_supabase_database_webhooks_fly_production_environment_variables_95.md#2025-04-22_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\npnpm run stripe:listen\n```\n\n----------------------------------------\n\nTITLE: Configuring Optional PostHog Ingestion URL in Bash\nDESCRIPTION: Sets an optional environment variable `VITE_POSTHOG_INGESTION_URL` in a .env file. This is used when proxying PostHog requests (e.g., to avoid ad blockers) and should point to the custom ingestion endpoint (e.g., `/ingest`).\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/analytics_api_custom_analytics_provider_google_analytics_provider_57.md#2025-04-22_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nVITE_POSTHOG_INGESTION_URL=your-ingestion-url\n```\n\n----------------------------------------\n\nTITLE: Starting Supabase Local Environment\nDESCRIPTION: Command to start the local Supabase environment using Docker. This spins up a local instance and imports default seed data.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/validating_api_input_zod_development_clone_repository_31.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run supabase:start\n```\n\n----------------------------------------\n\nTITLE: Running Cypress in Development Mode\nDESCRIPTION: Command to run Cypress in windowed development mode for building and debugging tests.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/user_sdk_sdk_ci_tests_84.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run cypress\n```\n\n----------------------------------------\n\nTITLE: Updating the Navigation Menu with a New Entry - TypeScript/TSX\nDESCRIPTION: This snippet shows how to display a new menu item using an added entry in the links object, updating the rendered JSX of the navigation menu. It follows the established pattern of referencing links by key and is designed for Remix/React component-based navigation menus. Inputs are the enhanced links object; outputs are the extended navigation menu in the UI.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/functions_initializing_project_introduction_85.md#2025-04-22_snippet_21\n\nLANGUAGE: TSX\nCODE:\n```\n<NavigationMenu>\n  <NavigationMenuItem link={links.About} />\n  ...\n</NavigationMenu>\n```\n\n----------------------------------------\n\nTITLE: Implementing Task Action Components\nDESCRIPTION: Implements dropdown menu items for task actions including delete and status update functionality with confirmation modals.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/supabase_data_fetching_supabase_data_writing_tailwind_css_86.md#2025-04-22_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nfunction DeleteTaskMenuItem({ task }: { task: Task }) {\n  const fetcher = useFetcher();\n\n  return (\n    <DropdownMenuItem onSelect={(e) => e.preventDefault()}>\n      <ConfirmDeleteTaskModal\n        task={task.name}\n        onConfirm={() => {\n          fetcher.submit(task.id, {\n            method: 'DELETE',\n            encType: 'application/json',\n          });\n        }}\n      >\n        <span className={'text-red-500'}>Delete Task</span>\n      </ConfirmDeleteTaskModal>\n    </DropdownMenuItem>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Plan Entitlements Table in PostgreSQL\nDESCRIPTION: Creates a table to store plan entitlements with strict security and RLS policies. Includes unique constraints and permission controls to ensure data security.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_billing_checkout_addons_subscription_entitlements_54.md#2025-04-22_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE public.plan_entitlements (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  variant_id VARCHAR(255) NOT NULL,\n  feature VARCHAR(255) NOT NULL,\n  entitlement JSONB NOT NULL,\n  created_at TIMESTAMPTZ DEFAULT now(),\n  updated_at TIMESTAMPTZ DEFAULT now(),\n  UNIQUE (variant_id, feature)\n);\n\nREVOKE ALL ON public.plan_entitlements FROM public;\nALTER TABLE public.plan_entitlements ENABLE ROW LEVEL SECURITY;\nGRANT SELECT ON public.plan_entitlements TO authenticated;\n\nCREATE POLICY select_plan_entitlements\n    ON public.plan_entitlements\n    FOR SELECT\n    TO authenticated\n    USING (true);\n```\n\n----------------------------------------\n\nTITLE: Alternative Subscription Check with Default Plan\nDESCRIPTION: Modified version of the subscription check that allows users without active subscriptions to create up to 10 tasks instead of throwing an error.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/server_actions_uploading_data_to_storage_writing_data_to_supabase_30.md#2025-04-22_snippet_26\n\nLANGUAGE: sql\nCODE:\n```\nif user_price_id is null then\n  return task_count < 10;\nend if;\n```\n\n----------------------------------------\n\nTITLE: Sending Email Notification using Custom Channel\nDESCRIPTION: Example of sending an email notification by specifying the channel parameter, which requires a database trigger for actual email delivery.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/sentry_monitoring_notifications_configuration_51.md#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createNotificationsApi } from '@kit/notifications/api';\nimport { getSupabaseServerAdminClient } from '@kit/supabase/server-admin-client';\n\nasync function sendNotificationAfterSignup(\n  accountId: string,\n) {\n  const client = getSupabaseServerAdminClient();\n  const api = createNotificationsApi(client);\n\n  await api.createNotification({\n    account_id: accountId,\n    body: 'You have successfully signed up!',\n    channel: 'email',\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Running Cypress E2E Tests with UI\nDESCRIPTION: Command to run Cypress E2E tests with a user interface.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/commands_cors_develop_firebase_security_rules_5.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnpm run cypress\n```\n\n----------------------------------------\n\nTITLE: Implementing withAppProps for Server-Side Page Props in Next.js\nDESCRIPTION: Example implementation of getServerSideProps using withAppProps to populate application page data and protect routes for authenticated users only.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/deploying_production_development_getting_started_environment_variables_13.md#2025-04-22_snippet_25\n\nLANGUAGE: tsx\nCODE:\n```\nimport { withAppProps } from \"~/lib/props/with-app-props\";\nimport { GetServerSidePropsContext } from \"next\";\n\nexport async function getServerSideProps(ctx: GetServerSidePropsContext) {\n  return await withAppProps(ctx);\n}\n```\n\n----------------------------------------\n\nTITLE: Using withAppProps for Authentication in Next.js Pages\nDESCRIPTION: This code snippet demonstrates how to implement authentication using withAppProps in a Next.js page's getServerSideProps function. This ensures the user is logged in and properly onboarded before accessing protected pages.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/deploying_production_development_getting_started_environment_variables_13.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { GetServerSidePropsContext } from \"next\";\nimport { withAppProps } from \"~/lib/props/with-app-props\";\n\nexport async function getServerSideProps(\n  ctx: GetServerSidePropsContext\n) {\n  return await withAppProps(ctx);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Plans Table with RLS\nDESCRIPTION: Creates a database table to store subscription plan details including name, price ID, and task quota limits.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/supabase_not_stopping_tables_not_found_dark_theme_22.md#2025-04-22_snippet_22\n\nLANGUAGE: sql\nCODE:\n```\ncreate table plans (\n  name text not null,\n  price_id text not null,\n  task_quota int not null,\n  primary key (product_id)\n);\n```\n\n----------------------------------------\n\nTITLE: Redirecting When No Organization is Selected\nDESCRIPTION: This snippet shows how to check if an organization is selected and redirect to the organizations page if none is found. It uses Next.js navigation and the Organization SDK.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/organization_sdk_organization_subscription_sdk_sdk_25.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { redirect } from \"next/navigation\";\n\nimport getSdk from '~/lib/sdk';\nimport getSupabaseServerComponentClient from '~/core/supabase/server-component-client';\n\nasync function PageServerComponent() {\n  const client = getSupabaseServerComponentClient();\n  const sdk = getSdk(client);\n\n  const organizationUid = await sdk.organization.getCurrentOrganizationUid();\n\n  if (!organizationUid) {\n    // No organization selected\n    redirect('/organizations')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Chatbot Plugin via CLI\nDESCRIPTION: Command line instructions for installing the chatbot plugin using the Makerkit CLI and adding it to the web application.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/technical_details_updating_codebase_installation_97.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpx @makerkit/cli plugins install chatbot\n\npnpm add --filter web @kit/chatbot\n```\n\n----------------------------------------\n\nTITLE: Generating Next.js Supabase Kit Documentation\nDESCRIPTION: Command to generate markdown files for the Next.js Supabase Turbo kit documentation.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode index.js kits/next-supabase-turbo\n```\n\n----------------------------------------\n\nTITLE: TypeScript API Request Handler Example\nDESCRIPTION: Example implementation showing how to use the EntitlementsService to handle API requests with feature checks and quota management.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_billing_checkout_addons_subscription_entitlements_54.md#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function handleApiRequest(accountId: string, endpoint: string) {\n  const client = getSupabaseServerClient();\n  const entitlementsService = createEntitlementsService(client, accountId);\n\n  const canUseAPI = await entitlementsService.canUseFeature('api_access');\n  \n  if (!canUseAPI) {\n    throw new Error('No access to API');\n  }\n\n  const entitlement = await entitlementsService.getEntitlement('api_calls');\n  if (entitlement && entitlement.entitlement.type === 'flat') {\n    return processApiRequest(endpoint);\n  } else if (entitlement && entitlement.entitlement.type === 'quota') {\n    const currentUsage = Number(entitlement.usage?.count ?? 0);\n    const limit = entitlement.entitlement.limit;\n\n    if (currentUsage < limit) {\n      await entitlementsService.updateFeatureUsage('api_calls', { count: currentUsage + 1 });\n\n      return processApiRequest(endpoint);\n    } else {\n      throw new Error('API call quota exceeded');\n    }\n  }\n  throw new Error('Invalid entitlement state');\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Current Organization Name with useCurrentOrganization Hook (TS)\nDESCRIPTION: Shows an example custom hook `useCurrentOrganizationName` that utilizes the `useCurrentOrganization` hook to retrieve the current user's organization data (injected via Context API from server-side fetch) and returns the organization's name.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/functions_initializing_project_introduction_85.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { useCurrentOrganization } from '~/lib/organizations/hooks/use-current-organization';\\n\\nexport function useCurrentOrganizationName() {\\n  const organization = useCurrentOrganization();\\n\\n  return organization?.name;\\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Feature Access Control in React Component\nDESCRIPTION: Uses the permission check function to conditionally render a feature based on user access.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/migrations_extending_organizations_organization_hooks_10.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nfunction Feature() {\n  const userRole = useCurrentUserRole();\n  const canCreateThing = useCreateNewThing(userRole);\n\n  if (!canCreateThing) {\n    return <div>Sorry, you do not have access to this feature. Subscribe?</div>\n  }\n\n  return <FeatureContainer />;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Firebase Project\nDESCRIPTION: Command to initialize a Firebase project and set up Firebase services.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/setting_up_firebase_custom_fetch_fetching_data_firestore_70.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfirebase init\n```\n\n----------------------------------------\n\nTITLE: Extending Analytics API with Custom Events in TypeScript\nDESCRIPTION: Example of creating custom event mappings to extend the analytics functionality in a Makerkit project.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/analytics_api_custom_analytics_provider_google_analytics_provider_57.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { analytics } from '@kit/analytics';\nimport { useAppEvents } from '@kit/shared/events';\n\ninterface MyAppEvents {\n  'feature.used': { featureName: string };\n}\n\nexport function useMyAnalytics() {\n  const { emit } = useAppEvents<MyAppEvents>();\n\n  return {\n    trackFeatureUse: (featureName: string) => {\n      emit({ type: 'feature.used', payload: { featureName } });\n      // If you need additional tracking logic:\n      void analytics.trackEvent('Feature Used', { featureName });\n    },\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Git Origin Remote\nDESCRIPTION: Command to remove the existing Git origin remote\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/deploy_production_introduction_5.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngit remote rm origin\n```\n\n----------------------------------------\n\nTITLE: Configuring Flat Subscription Billing in TypeScript\nDESCRIPTION: This example demonstrates how to set up a flat subscription billing plan with a single line item. It includes details on defining the cost and type for the line item.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/google_analytics_provider_posthog_analytics_provider_umami_analytics_provider_88.md#2025-04-22_snippet_45\n\nLANGUAGE: tsx\nCODE:\n```\nexport default createBillingSchema({\n  provider,\n  products: [\n    {\n      id: 'starter',\n      name: 'Starter',\n      description: 'The perfect plan to get started',\n      currency: 'USD',\n      badge: `Value`,\n      plans: [\n        {\n          name: 'Starter Monthly',\n          id: 'starter-monthly',\n          trialDays: 7,\n          paymentType: 'recurring',\n          interval: 'month',\n          lineItems: [\n            {\n              id: 'price_1NNwYHI1i3VnbZTqI2UzaHIe',\n              name: 'Addon 2',\n              cost: 9.99,\n              type: 'flat',\n            },\n          ],\n        }\n      ],\n    }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Ticket Counter Display in Next.js Team Account Layout\nDESCRIPTION: This code demonstrates how to display remaining ticket information in a team account layout using a Postgres RPC function. It shows the implementation of fetching ticket data, conditionally rendering a warning banner when tickets are low, and providing an upgrade link for users approaching their limit.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/payments_billing_6.md#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { use } from 'react';\n\nimport { cookies } from 'next/headers';\nimport Link from 'next/link';\n\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\nimport { TeamAccountWorkspaceContextProvider } from '@kit/team-accounts/components';\nimport { If } from '@kit/ui/if';\nimport {\n  Page,\n  PageLayoutStyle,\n  PageMobileNavigation,\n  PageNavigation,\n} from '@kit/ui/page';\n\nimport { AppLogo } from '~/components/app-logo';\nimport { getTeamAccountSidebarConfig } from '~/config/team-account-navigation.config';\nimport { withI18n } from '~/lib/i18n/with-i18n';\n\n// local imports\nimport { TeamAccountLayoutMobileNavigation } from './_components/team-account-layout-mobile-navigation';\nimport { TeamAccountLayoutSidebar } from './_components/team-account-layout-sidebar';\nimport { TeamAccountNavigationMenu } from './_components/team-account-navigation-menu';\nimport { loadTeamWorkspace } from './_lib/server/team-account-workspace.loader';\n\ntype TeamWorkspaceLayoutProps = React.PropsWithChildren<{\n  params: Promise<{ account: string }>;\n}>;\n\nfunction TeamWorkspaceLayout({\n  children,\n  params,\n}: React.PropsWithChildren<TeamWorkspaceLayoutProps>) {\n  const account = use(params).account;\n  const data = use(loadTeamWorkspace(account));\n  const remainingTickets = use(getRemainingTicketsForAccount(data.account.id));\n  const style = use(getLayoutStyle(account));\n\n  const accounts = data.accounts.map(({ name, slug, picture_url }) => ({\n    label: name,\n    value: slug,\n    image: picture_url,\n  }));\n\n  return (\n    <Page style={style}>\n      <PageNavigation>\n        <If condition={style === 'sidebar'}>\n          <TeamAccountLayoutSidebar\n            account={account}\n            accountId={data.account.id}\n            accounts={accounts}\n            user={data.user}\n          />\n        </If>\n\n        <If condition={style === 'header'}>\n          <TeamAccountNavigationMenu workspace={data} />\n        </If>\n      </PageNavigation>\n\n      <PageMobileNavigation className={'flex items-center justify-between'}>\n        <AppLogo />\n\n        <div className={'flex space-x-4'}>\n          <TeamAccountLayoutMobileNavigation\n            userId={data.user.id}\n            accounts={accounts}\n            account={account}\n          />\n        </div>\n      </PageMobileNavigation>\n\n      <TeamAccountWorkspaceContextProvider value={data}>\n        <If condition={remainingTickets >= 0 && remainingTickets < 10}>\n          <div\n            className={\n              'bg-red-500 py-1 text-center text-xs font-medium text-white'\n            }\n          >\n            You have {remainingTickets} tickets remaining.{' '}\n            <Link className={'underline'} href={`billing`}>\n              Please upgrade your plan to continue receiving tickets\n            </Link>\n            .\n          </div>\n        </If>\n\n        {children}\n      </TeamAccountWorkspaceContextProvider>\n    </Page>\n  );\n}\n\nasync function getLayoutStyle(account: string) {\n  const cookieStore = await cookies();\n\n  return (\n    (cookieStore.get('layout-style')?.value as PageLayoutStyle) ??\n    getTeamAccountSidebarConfig(account).style\n  );\n}\n\nexport default withI18n(TeamWorkspaceLayout);\n\nasync function getRemainingTicketsForAccount(accountId: string) {\n  const client = getSupabaseServerClient();\n\n  const { data } = await client.rpc('get_remaining_tickets', {\n    target_account_id: accountId,\n  });\n\n  return data ?? 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing pnpm Globally (Bash)\nDESCRIPTION: Installs the pnpm package manager globally using npm. Pnpm is required for managing dependencies in this project.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/configuring_supabase_database_webhooks_fly_production_environment_variables_95.md#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n# Install pnpm\nnpm i -g pnpm\n```\n\n----------------------------------------\n\nTITLE: Adding Testimonials Plugin as a Dependency in package.json\nDESCRIPTION: This JSON snippet shows how to add the Testimonials plugin as a dependency in the package.json file of the web application.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/sentry_monitoring_notifications_configuration_51.md#2025-04-22_snippet_27\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"dependencies\": {\n      \"@kit/testimonial\": \"workspace:*\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Full-Page Loading Overlay Example - React - JavaScript\nDESCRIPTION: Shows LoadingOverlay usage for a full-page scenario with a custom message. Default fullPage prop is true. Spin and content are centered via flexbox. Good for blocking input during critical async operations.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/bordered_navigation_menu_card_button_cookie_banner_60.md#2025-04-22_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\n<LoadingOverlay>\n  Please wait while we load your dashboard...\n</LoadingOverlay>\n```\n\n----------------------------------------\n\nTITLE: SQL Function to Check Configuration\nDESCRIPTION: Database function that checks if a specific configuration is set in the public.config table.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/adding_turborepo_package_approaching_local_development_database_functions_44.md#2025-04-22_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\npublic.is_set(\n  field_name text\n)\n```\n\n----------------------------------------\n\nTITLE: Linking Supabase Project with CLI\nDESCRIPTION: Command to login to Supabase CLI for project setup\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/deploy_production_introduction_5.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm --filter web supabase login\n```\n\n----------------------------------------\n\nTITLE: Defining Navigation Menu Links in Next.js (TypeScript)\nDESCRIPTION: Declares a constant 'links' object mapping menu names to navigation objects, each containing a label and path, for use in site navigation. Used within a TypeScript/React file ('components/SiteNavigation.tsx'). No dependencies beyond basic TypeScript/React. Input: menu definitions, Output: updated navigation structure. Easily extensible for additional links.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/initializing_project_introduction_marketing_site_pages_14.md#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nconst links: Record<string, Link> = {\n  Blog: {\n    label: 'Blog',\n    path: '/blog',\n  },\n  Docs: {\n    label: 'Docs',\n    path: '/docs',\n  },\n  Pricing: {\n    label: 'Pricing',\n    path: '/pricing',\n  },\n  FAQ: {\n    label: 'FAQ',\n    path: '/faq',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring KeyStatic GitHub Storage Environment Variables\nDESCRIPTION: Environment variables required when using GitHub as the storage option for KeyStatic.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/creating_your_own_cms_client_keystatic_wordpress_62.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nVITE_KEYSTATIC_STORAGE_KIND=github\nVITE_KEYSTATIC_STORAGE_REPO=makerkit/react-router-supabase-saas-kit-turbo-demo\nKEYSTATIC_GITHUB_TOKEN=github_*****************************************************\nKEYSTATIC_PATH_PREFIX=apps/web\nVITE_KEYSTATIC_CONTENT_PATH=./content\n```\n\n----------------------------------------\n\nTITLE: Creating RLS Policy for Selecting Tasks\nDESCRIPTION: SQL command to create a Row Level Security policy for selecting tasks. The policy ensures users can only see tasks they own or have appropriate permissions for, using the account_id field and has_role_on_account function.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/adding_turborepo_package_approaching_local_development_database_functions_93.md#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy select_tasks on public.tasks\n    for select\n    to authenticated\n    using (\n      account_id = auth.uid() or\n      public.has_role_on_account(account_id)\n    );\n```\n\n----------------------------------------\n\nTITLE: Configuring Personal Account Navigation in TypeScript\nDESCRIPTION: TypeScript configuration for personal account navigation. This defines the sidebar or header menu items for personal accounts, including conditional rendering of billing options.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/multi_step_forms_page_stepper_91.md#2025-04-22_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nconst routes = [\n  {\n    label: 'common:homeTabLabel',\n    path: pathsConfig.app.home,\n    Icon: <Home className={iconClasses} />,\n    end: true,\n  },\n  {\n    label: 'account:accountTabLabel',\n    path: pathsConfig.app.personalAccountSettings,\n    Icon: <User className={iconClasses} />,\n  },\n];\n\nif (featureFlagsConfig.enablePersonalAccountBilling) {\n  routes.push({\n    label: 'common:billingTabLabel',\n    path: pathsConfig.app.personalAccountBilling,\n    Icon: <CreditCard className={iconClasses} />,\n  });\n}\n\nexport const personalAccountSidebarConfig = SidebarConfigSchema.parse({\n  routes,\n  style: import.meta.env.VITE_USER_NAVIGATION_STYLE,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Primary Color in Tailwind with Shadcn UI\nDESCRIPTION: JavaScript configuration for Tailwind CSS to set up the primary color palette with Shadcn UI, spreading the violet color palette and defining default and foreground colors using HSL variables.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/initializing_project_introduction_marketing_site_pages_14.md#2025-04-22_snippet_20\n\nLANGUAGE: js\nCODE:\n```\nprimary: {\n  DEFAULT: 'hsl(var(--primary))',\n  foreground: 'hsl(var(--primary-foreground))',\n  ...colors.violet,\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Module in a Turborepo Package\nDESCRIPTION: Example of creating a new module file in your Turborepo package that exports a function. This demonstrates the structure of module files in a package.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/adding_turborepo_package_approaching_local_development_database_functions_44.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// packages/@kit/my-package/src/my-module.ts\n\nexport function myModule() {\n  return 'Hello from my module';\n}\n```\n\n----------------------------------------\n\nTITLE: Test User Credentials\nDESCRIPTION: Default test credentials for initial login to the application.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/user_roles_validating_api_input_zod_development_18.md#2025-04-22_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nemail = test@makerkit.dev\npassword = testingpassword\n```\n\n----------------------------------------\n\nTITLE: Using the Language Switcher in React\nDESCRIPTION: This code snippet shows how to integrate a `LanguageSwitcher` component into a React component, facilitating language changes via the user interface in a Next.js application. Familiarity with React component integration is needed. The component automatically handles the display and update of language settings.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/branding_environment_variables_setup_project_configuration_21.md#2025-04-22_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { LanguageSwitcher } from '~/components/LanguageSwitcher';\n\nexport const YourComponent = ({ children }) => {\n  return (\n    <div>\n      <LanguageSwitcher />\n      {children}\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Setting the Stripe Webhook Secret Environment Variable\nDESCRIPTION: Configuration snippet showing how to set the Stripe webhook secret in your local environment variables file, which is required for webhook signature verification.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/initializing_project_introduction_marketing_site_pages_14.md#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nSTRIPE_WEBHOOK_SECRET=<KEY>\n```\n\n----------------------------------------\n\nTITLE: Configuring KeyStatic CMS Environment Variables\nDESCRIPTION: Environment variables required for setting up KeyStatic CMS in the React Router Supabase SaaS Kit.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/creating_your_own_cms_client_keystatic_wordpress_62.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nCMS_CLIENT=keystatic\nVITE_KEYSTATIC_STORAGE_KIND=local # local, cloud, github\nVITE_KEYSTATIC_CONTENT_PATH=content # apps/web/content\nKEYSTATIC_PATH_PREFIX=apps/web\n```\n\n----------------------------------------\n\nTITLE: Using GradientSecondaryText Component in React/TSX\nDESCRIPTION: This snippet shows how to use the GradientSecondaryText component to apply a gradient color to text content.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/app_breadcrumbs_bordered_navigation_menu_card_button_39.md#2025-04-22_snippet_34\n\nLANGUAGE: tsx\nCODE:\n```\nfunction GradientSecondaryTextExample() {\n  return (\n    <p>\n      <GradientSecondaryText>\n        Unleash your creativity and build your SaaS faster than ever with\n        Makerkit.\n      </GradientSecondaryText>\n    </p>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating current_user_can_manage_project_member Function in Supabase\nDESCRIPTION: Creates a function that determines if the current user can manage another user in a project based on role hierarchy. Implements role-based management permissions where higher roles can manage lower roles.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/projects_data_model_53.md#2025-04-22_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nCREATE OR REPLACE FUNCTION public.current_user_can_manage_project_member(\n  p_target_member_role public.project_role,\n  p_project_id UUID\n)\nRETURNS BOOLEAN\nSET search_path = ''\nAS $$\nDECLARE\n  v_current_user_role public.project_role;\nBEGIN\n  SELECT role INTO v_current_user_role\n  FROM public.project_members\n  WHERE project_id = p_project_id AND user_id = (SELECT auth.uid());\n\n  IF v_current_user_role IS NULL OR p_target_member_role IS NULL THEN\n    RAISE EXCEPTION 'User not found';\n  END IF;\n\n  -- Check if the manager has a higher role\n  RETURN (v_current_user_role = 'owner' AND p_target_member_role != 'owner') OR\n         (v_current_user_role = 'admin' AND p_target_member_role = 'member');\nEND;\n$$ LANGUAGE plpgsql;\n\nGRANT EXECUTE ON FUNCTION public.current_user_can_manage_project_member TO authenticated;\n```\n\n----------------------------------------\n\nTITLE: Creating and Applying Database Migrations in Supabase\nDESCRIPTION: This set of commands demonstrates how to create a new migration, generate a migration file from database changes, and apply migrations to both local and remote Supabase instances.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/database_webhooks_legal_pages_marketing_pages_64.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm --filter web supabase migration new <name>\npnpm --filter web supabase db diff -f <name>\npnpm --filter web supabase db push\npnpm run supabase:web:reset\n```\n\n----------------------------------------\n\nTITLE: Documentation Folder Structure Example\nDESCRIPTION: Example showing the hierarchical folder structure for organizing documentation content with numbered prefixes for ordering\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/auth_setup_authentication_blog_16.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n- content\n  - docs\n    - 01-getting-started\n      - index.mdx\n      - 01-installation.mdx\n      - 02-configuration.mdx\n        - 01-supabase.mdx\n        - 02-firebase.mdx\n      - 03-authentication.mdx\n      - 04-database.mdx\n      - 05-storage.mdx\n      - 06-usage.mdx\n      - 07-deployment.mdx\n        - 01-vercel.mdx\n        - 02-netlify.mdx\n      - 08-questions.mdx\n    - 02-faq\n      - index.mdx\n      - 01-what-is-supabase.mdx\n```\n\n----------------------------------------\n\nTITLE: Configuring Routes in React Router using TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates the migration from Remix's file-based routing to a configuration-based routing system in React Router 7. Dependencies include @react-router/dev/routes for routing utilities. Main functions include `route` for standard routes, `layout` for layout routes, and `index` for index routes. The snippet requires explicitly defined routes which contribute to improved control over the routing structure.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/introduction_migration_from_remix_navigating_codebase_67.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// apps/web/app/routes.ts\nimport {\n  type RouteConfig,\n  index,\n  layout,\n  route,\n} from '@react-router/dev/routes';\n\nconst rootRoutes = [\n  route('robots.txt', 'routes/robots/route.tsx'),\n  route('sitemap.xml', 'routes/sitemap/route.tsx'),\n  // ...\n];\n\nconst marketingLayout = layout('routes/marketing/layout.tsx', [\n  index('routes/marketing/index.tsx'),\n  route('pricing', 'routes/marketing/pricing.tsx'),\n  // ...\n]);\n\nexport default [\n  ...rootRoutes,\n  ...apiRoutes,\n  marketingLayout,\n  authLayout,\n  // ...\n] satisfies RouteConfig;\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication Providers (OAuth Example - TSX)\nDESCRIPTION: This snippet demonstrates configuring the `providers` object in Makerkit to enable OAuth authentication using specific providers. It sets the `oAuth` property to an array of strings, where each string is a valid Supabase provider name (e.g., 'google', 'facebook'). The `Provider` type from `@supabase/gotrue-js` is used for type safety.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/api_routes_vs_server_actions_api_routes_call_api_routes_from_client_19.md#2025-04-22_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nproviders: {\n  emailPassword: false,\n  phoneNumber: false,\n  emailLink: false,\n  oAuth: ['google', 'facebook'] as Provider[]\n},\n```\n\n----------------------------------------\n\nTITLE: Resetting Supabase Local Database\nDESCRIPTION: Command to reset the local Supabase database to reflect schema changes or return to the initial seed state.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/user_reading_record_creating_record_20.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run supabase:db:reset\n```\n\n----------------------------------------\n\nTITLE: Auto-Creating Feature Usage Rows with PostgreSQL Trigger\nDESCRIPTION: Creates a trigger function to automatically create feature usage rows when new accounts are created.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_billing_checkout_addons_subscription_entitlements_54.md#2025-04-22_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nCREATE OR REPLACE FUNCTION public.create_feature_usage_row()\nRETURNS TRIGGER AS $$\nBEGIN\n  INSERT INTO public.feature_usage (account_id, feature)\n  VALUES (NEW.id, '');\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER;\n\nCREATE TRIGGER create_feature_usage_row\nAFTER INSERT ON public.accounts\nFOR EACH ROW\nEXECUTE FUNCTION public.create_feature_usage_row();\n```\n\n----------------------------------------\n\nTITLE: Example Supabase CLI Command: db link (Bash)\nDESCRIPTION: An example of a standard Supabase CLI command (`supabase db link`) that would typically be run using the filtered pnpm command structure shown previously (`pnpm run --filter web supabase db link`).\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/code_health_common_commands_conventions_48.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsupabase db link\n```\n\n----------------------------------------\n\nTITLE: Defining a Marketing Page with Remix Route - TypeScript/TSX\nDESCRIPTION: This snippet demonstrates how to define a new marketing page, such as an 'About' page, as a colocated route module in a Remix application. It sets up page metadata using Remix's MetaFunction, imports shared UI components, and structures the page layout within a main React component. It expects dependencies on Remix, project-level configuration, and custom UI component modules. The inputs are the page context and application configuration; the output is a fully rendered page at the specified route. Limitations: placeholder comment is left for user content extension.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/functions_initializing_project_introduction_85.md#2025-04-22_snippet_17\n\nLANGUAGE: TSX\nCODE:\n```\nimport type { MetaFunction } from '@remix-run/node';\n\nimport configuration from '~/configuration';\nimport Hero from '~/core/ui/Hero';\nimport Container from '~/core/ui/Container';\nimport SubHeading from '~/core/ui/SubHeading';\n\nexport const meta: MetaFunction = () => {\n  return {\n    title: `About - ${configuration.site.siteName}`,\n  };\n};\n\nconst About = () => {\n  return (\n    <div>\n      <Container>\n        <div className={'flex flex-col space-y-14'}>\n          <div className={'flex flex-col items-center'}>\n            <Hero>About us</Hero>\n\n            <SubHeading>\n              We are a team of passionate developers and designers who love to\n              build great products.\n            </SubHeading>\n          </div>\n\n          <div>\n            <!-- Add your content here -->\n          </div>\n        </div>\n      </Container>\n    </div>\n  );\n};\n\nexport default About;\n```\n\n----------------------------------------\n\nTITLE: Handling Specific Event Type within onEvent Callback in TypeScript\nDESCRIPTION: This example demonstrates how to check the event `type` within the general `onEvent` callback to handle a specific Stripe event, like `invoice.payment_succeeded`. It requires casting the `data` parameter to the correct Stripe type (e.g., `Stripe.Invoice`) for accessing event details.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/billing_webhooks_credit_based_billing_lemon_squeezy_89.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nawait service.handleWebhookEvent(request, {\n  async onEvent(data: unknown) {\n    if (data.type === 'invoice.payment_succeeded') {\n      const invoice = data as Stripe.Invoice;\n      // Your custom code here\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Subscription Data Parameter from Stripe Checkout\nDESCRIPTION: Highlighting the subscription_data parameter that needs to be removed when switching to one-time payment mode.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_one_time_payments_stripe_webhooks_payments_11.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nreturn stripe.checkout.sessions.create({\n  mode,\n  ui_mode: uiMode,\n  customer,\n  line_items: [lineItem],\n  client_reference_id: clientReferenceId.toString(),\n  subscription_data: subscriptionData,\n  customer_email: params.customerEmail,\n  ...urls,\n});\n```\n\n----------------------------------------\n\nTITLE: Cloning a Git Repository via SSH (Shell)\nDESCRIPTION: Provides the shell command to clone a Git repository (`makerkit/next-firebase-saas-kit.git`) using the SSH protocol. Assumes Git is installed and SSH keys are configured with GitHub.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/commands_cors_develop_firebase_security_rules_5.md#2025-04-22_snippet_40\n\nLANGUAGE: shell\nCODE:\n```\n```\ngit clone git@github.com:makerkit/next-firebase-saas-kit.git\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring One-Off Payment Schema\nDESCRIPTION: Schema definition for one-off payment products including plan details, line items, and pricing configuration.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/lemon_squeezy_metered_usage_one_off_payments_59.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nexport default createBillingSchema({\n  provider,\n  products: [\n    {\n      id: 'starter',\n      name: 'Starter',\n      description: 'The perfect plan to get started',\n      currency: 'USD',\n      badge: `Value`,\n      plans: [\n        {\n          name: 'Starter Monthly',\n          id: 'starter-monthly',\n          paymentType: 'one-time',\n          lineItems: [\n            {\n              id: 'price_1NNwYHI1i3VnbZTqI2UzaHIe',\n              name: 'Addon 2',\n              cost: 9.99,\n              type: 'flat',\n            },\n          ],\n        }\n      ],\n    }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Defining the Abstract Mailer Class in TypeScript\nDESCRIPTION: Defines an abstract `Mailer` class in TypeScript using Zod for schema definition (`MailerSchema`). This class serves as a base for concrete mailer implementations, requiring them to implement the `sendEmail` method which accepts data conforming to the `MailerSchema`.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/development_authentication_emails_email_configuration_94.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nimport { z } from 'zod';\n\nimport { MailerSchema } from './schema/mailer.schema';\n\nexport abstract class Mailer<Res = unknown> {\n  abstract sendEmail(data: z.infer<typeof MailerSchema>): Promise<Res>;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Up Stripe Environment Variables for Remix Supabase SaaS Kit\nDESCRIPTION: This snippet shows the required environment variables for integrating Stripe as a billing provider. It includes the secret key, webhook secret, and publishable key needed for Stripe functionality.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/paddle_per_seat_billing_stripe_90.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nSTRIPE_SECRET_KEY=\nSTRIPE_WEBHOOK_SECRET=\nVITE_STRIPE_PUBLISHABLE_KEY=\n```\n\n----------------------------------------\n\nTITLE: Starting Stripe Webhook Listener (Bash)\nDESCRIPTION: Executes the `stripe:listen` script via `pnpm`. This command usually utilizes the Stripe CLI to forward webhook events from Stripe to the local development server, enabling testing of billing integrations.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/code_health_common_commands_conventions_48.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\npnpm run stripe:listen\n```\n\n----------------------------------------\n\nTITLE: Token Revocation Response Type in TypeScript\nDESCRIPTION: TypeScript interface showing the structure of the response when revoking a token. Returns a success boolean indicating whether the token was successfully revoked.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/custom_analytics_provider_google_analytics_provider_posthog_analytics_provider_36.md#2025-04-22_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  success: boolean;     // Whether the token was successfully revoked\n}\n```\n\n----------------------------------------\n\nTITLE: Package.json Workspace Configuration\nDESCRIPTION: JSON configuration to add the chatbot plugin as a workspace in package.json\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/subscription_permissions_organizations_lemon_squeezy_23.md#2025-04-22_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"workspaces\": [\n    \"plugins/chatbot\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Migration Script for CSS Classes\nDESCRIPTION: Script to automate the migration of CSS classes from black to dark color scheme.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/supabase_not_stopping_tables_not_found_dark_theme_22.md#2025-04-22_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nconst replace = require('replace-in-file');\nconst files = ['src/**/*.tsx', 'src/**/*.css'];\n\nconst promise = () =>\n  new Promise((resolve, reject) => {\n    replace({\n      ...getConfigs(),\n      files,\n    })\n      .then((results) => {\n        results.forEach((result) => {\n          if (result.hasChanged) {\n            console.log('File changed:', result.file);\n          }\n        });\n\n        resolve();\n      })\n      .catch((error) => {\n        console.error('Error occurred:', error);\n\n        reject(error);\n      });\n  });\n\n(async () => {\n  console.log(`Replacing classes in \"${files}\" ...`);\n  await promise();\n  console.log('Done!');\n})();\n\nfunction getConfigs() {\n  return {\n    from: [\n      /black-600/g,\n      /black-500/g,\n      /black-400/g,\n      /black-300/g,\n      /black-200/g,\n      /black-100/g,\n      /black-50/g,\n      \"'classnames'\",\n    ],\n    to: [\n      'dark-900',\n      'dark-900',\n      'dark-800',\n      'dark-700',\n      'dark-600',\n      'dark-500',\n      'dark-400',\n      \"'clsx'\",\n    ],\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Account Billing Settings in SQL\nDESCRIPTION: SQL commands to update the 'config' table, enabling or disabling billing for personal accounts, team accounts, or disabling team accounts entirely.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/multi_step_forms_page_stepper_91.md#2025-04-22_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nupdate config set enable_account_billing = true;\n\nupdate config set enable_team_account_billing = true;\n\nupdate config set enable_team_accounts = false;\n```\n\n----------------------------------------\n\nTITLE: Integrating AI Text Editor in a Remix Page Component\nDESCRIPTION: React component showing how to integrate the EditorContainer with proper layout, dark mode toggle, and lazy loading using ClientOnly to ensure it only renders on the client side.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_configuration_stripe_one_time_payments_stripe_webhooks_82.md#2025-04-22_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Toaster } from 'sonner';\nimport { lazy } from 'react';\n\nimport DarkModeToggle from '~/components/DarkModeToggle';\nimport Logo from '~/core/ui/Logo';\nimport ClientOnly from '~/core/ui/ClientOnly';\n\nconst EditorContainer = lazy(() => {\n  return import('~/components/EditorContainer');\n});\n\nfunction EditorPage() {\n  return (\n    <div\n      className={\n        'w-screen h-screen flex justify-center items-center bg-gray-50' +\n        ' dark:bg-dark-900 flex flex-col space-y-4'\n      }\n    >\n      <Toaster />\n\n      <div className={'fixed top-4 right-4'}>\n        <DarkModeToggle />\n      </div>\n\n      <Logo href={'/'} className={'w-32 h-32'} />\n\n      <ClientOnly>\n        <EditorContainer />\n      </ClientOnly>\n    </div>\n  );\n}\n\nexport default EditorPage;\n```\n\n----------------------------------------\n\nTITLE: Server Component Data Fetching\nDESCRIPTION: Examples of data fetching patterns in server components using Supabase\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/llms_migration_from_makerkit_v1_navigating_codebase_49.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\n\nasync function ServerComponent() {\n  const client = getSupabaseServerClient();\n  const { data, error } = await client.from('notes').select('*');\n\n  // use data\n}\n```\n\n----------------------------------------\n\nTITLE: Event Model Type Definition\nDESCRIPTION: TypeScript interface definition for the Event model showing basic event properties.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/ui_hooks_mdx_15.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface EventModel {\n  name: string;\n  description: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Task Interface with Foreign Key in TypeScript\nDESCRIPTION: Defines a Task interface with a foreign key 'organizationId' to represent the relationship between tasks and organizations in Firestore.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/custom_fetch_fetching_data_firestore_making_api_requests_4.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nexport interface Task {\n  name: string;\n  description: string;\n  dueDate: string;\n  done: boolean;\n\n  // here we use organizationId as a foreign key\n  organizationId: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Example: Sticky Header Layout with Page Component (JSX)\nDESCRIPTION: This JSX snippet showcases the 'Page' component configured with `style=\"header\"` and the `sticky={true}` prop, creating a layout with a fixed top navigation bar. It uses 'PageNavigation' for main header links ('HeaderNavLinks'), 'PageMobileNavigation' for mobile-specific menu items ('MobileMenu'), and 'PageBody' containing both a 'PageHeader' and the main content ('ProfileSettings').\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/bordered_navigation_menu_card_button_cookie_banner_60.md#2025-04-22_snippet_20\n\nLANGUAGE: jsx\nCODE:\n```\n<Page style=\"header\" sticky={true}>\n  <PageNavigation>\n    <HeaderNavLinks />\n  </PageNavigation>\n  <PageMobileNavigation>\n    <MobileMenu />\n  </PageMobileNavigation>\n  <PageBody>\n    <PageHeader title=\"Profile\" description=\"Manage your account settings\" />\n    <ProfileSettings />\n  </PageBody>\n</Page>\n\n```\n\n----------------------------------------\n\nTITLE: Rendering Invite Email with react-email\nDESCRIPTION: Code snippet showing how to render an invite email using react-email components in a Next.js Firebase application.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/commands_cors_develop_firebase_security_rules_5.md#2025-04-22_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\ninterface Props {\n  organizationName: string;\n  organizationLogo?: string;\n  inviter: Maybe<string>;\n  invitedUserEmail: string;\n  link: string;\n  productName: string;\n}\n\nexport default function renderInviteEmail(props: Props) {\n  const title = `You have been invited to join ${props.organizationName}`;\n\n  return render(\n    <Html>\n      <Head>\n        <title>{title}</title>\n      </Head>\n      <Preview>{title}</Preview>\n      <Body style={{ width: '500px', margin: '0 auto', font: 'helvetica' }}>\n        <EmailNavbar />\n        <Section style={{ width: '100%' }}>\n          <Column>\n            <Text>Hi,</Text>\n\n            <Text>\n              {props.inviter} with {props.organizationName} has invited you to\n              use {props.productName} to collaborate with them.\n            </Text>\n\n            <Text>\n              Use the button below to set up your account and get started:\n            </Text>\n          </Column>\n        </Section>\n\n        <Section>\n          <Column align=\"center\">\n            <CallToActionButton href={props.link}>\n              Join {props.organizationName}\n            </CallToActionButton>\n          </Column>\n        </Section>\n\n        <Section>\n          <Column>\n            <Text>Welcome aboard,</Text>\n            <Text>The {props.productName} Team</Text>\n          </Column>\n        </Section>\n      </Body>\n    </Html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js Development Server\nDESCRIPTION: Command to start the Next.js development server locally.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/validating_api_input_zod_development_clone_repository_31.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Creating a Marketing Page in Remix Supabase\nDESCRIPTION: TypeScript code demonstrating how to create a new marketing page in a Remix Supabase application. The example shows a minimal implementation of an About page that inherits the marketing layout.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/adding_turborepo_package_approaching_local_development_database_functions_93.md#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n// apps/web/app/(marketing)/about/page.tsx\nexport default function AboutPage() {\n  return <div></div>\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Info Notification with Type Specification\nDESCRIPTION: Example of sending an information notification with an explicitly specified type, although 'info' is the default.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/sentry_monitoring_notifications_configuration_51.md#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createNotificationsApi } from '@kit/notifications/api';\nimport { getSupabaseServerAdminClient } from '@kit/supabase/server-admin-client';\n\nasync function sendNotificationAfterSignup(\n  accountId: string,\n) {\n  const client = getSupabaseServerAdminClient();\n  const api = createNotificationsApi(client);\n\n  await api.createNotification({\n    account_id: accountId,\n    body: 'You have successfully signed up!',\n    type: 'info', // this is the default type, no need to specify it\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Using Middleware Pipeline for API Routes\nDESCRIPTION: Demonstration of chaining multiple middleware functions to create a pipeline for API routes, including authentication and method guarding to restrict HTTP methods.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/introduction_running_the_application_technical_details_6.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextApiRequest, NextApiResponse } from \"next\";\n\nimport { withAuthedUser } from '~/core/middleware/with-authed-user';\nimport { withMethodsGuard } from '~/core/middleware/with-methods-guard';\nimport { withPipe } from '~/core/middleware/with-pipe';\n\nfunction helloWorldHandler(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n  res.status(200).json({ text: 'Hello' })\n}\n\nexport default withPipe(\n  withAuthedUser,\n  withMethodsGuard(['GET', 'POST']),\n  helloWorldHandler,\n);\n```\n\n----------------------------------------\n\nTITLE: Setting One-Time Billing Mode in Makerkit\nDESCRIPTION: Environment variable configuration for setting the billing mode to one-time payments instead of subscriptions. This affects how Makerkit fetches and displays billing data in the application.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/lemon_squeezy_metered_usage_one_off_payments_59.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nBILLING_MODE=one-time\n```\n\n----------------------------------------\n\nTITLE: Updating Cookie Access Pattern in Next.js 15\nDESCRIPTION: Example showing how to update code from synchronous to promise-based cookie access in Next.js 15. The new pattern requires awaiting the cookies() function before accessing individual cookies.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/running_project_technical_details_update_nextjs15_50.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst cookie = cookies().get('session');\n```\n\nLANGUAGE: tsx\nCODE:\n```\nconst cookieStore = await cookies();\nconst cookie = cookieStore.get('session');\n```\n\n----------------------------------------\n\nTITLE: Creating a Default Alert Component in React\nDESCRIPTION: Shows how to implement a default Alert component using Shadcn UI in a React application. This versatile component can be used for displaying various types of messages to users.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/multi_step_forms_page_shadcn_40.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { InfoIcon } from 'lucide-react';\n\nimport { Alert, AlertDescription, AlertTitle } from '@kit/ui/alert';\n\nexport default function DefaultAlertDemo() {\n  return (\n    <Alert>\n      <InfoIcon className=\"h-5 w-5\" />\n\n      <AlertTitle>\n        <span>This is a default alert</span>\n      </AlertTitle>\n\n      <AlertDescription>This is the description of the alert.</AlertDescription>\n    </Alert>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Organization Hooks in Next.js with TypeScript\nDESCRIPTION: Examples of using organization-related hooks in a Next.js application. These hooks help access the current organization and check subscription status.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/supabase_not_stopping_tables_not_found_dark_theme_22.md#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCurrentOrganization } from '~/lib/organizations/hooks/use-current-organization';\n\nconst organzation = useCurrentOrganization();\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useIsSubscriptionActive } from '~/lib/organizations/hooks/use-is-subscription-active';\n\nconst isSubscriptionActive = useIsSubscriptionActive();\n```\n\n----------------------------------------\n\nTITLE: Building Production Bundle\nDESCRIPTION: Command to build a production-ready bundle of the Next.js application.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/commands_cors_develop_firebase_security_rules_5.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm build\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication Providers (Email Link Example - TSX)\nDESCRIPTION: This snippet illustrates configuring the `providers` object in Makerkit to enable email link (passwordless) authentication. It sets the `emailLink` property to `true`. Note: The original text contained a typo ('trfalseue'), which is assumed to mean `true` here.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/api_routes_vs_server_actions_api_routes_call_api_routes_from_client_19.md#2025-04-22_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nproviders: {\n  emailPassword: false,\n  phoneNumber: false,\n  emailLink: true,\n  oAuth: ['google'] as Provider[]\n},\n```\n\n----------------------------------------\n\nTITLE: Configuring TailwindCSS\nDESCRIPTION: TailwindCSS configuration update to include plugin directories\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/sentry_monitoring_notifications_configuration_51.md#2025-04-22_snippet_23\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  darkMode: ['class'],\n  content: [\n    '../../packages/ui/src/**/*.tsx',\n    '../../packages/billing/gateway/src/**/*.tsx',\n    '../../packages/features/auth/src/**/*.tsx',\n    '../../packages/features/notifications/src/**/*.tsx',\n    '../../packages/features/admin/src/**/*.tsx',\n    '../../packages/features/accounts/src/**/*.tsx',\n    '../../packages/features/team-accounts/src/**/*.tsx',\n    '../../packages/plugins/feedback/src/**/*.tsx'  // <-- add this line\n    '!**/node_modules',\n  ],\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Reset Supabase Local Database Command\nDESCRIPTION: Command to reset the database in the local Supabase environment.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/uploading_data_to_storage_writing_data_to_supabase_data_fetching_77.md#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nnpm run supabase:db:reset\n```\n\n----------------------------------------\n\nTITLE: Pulling Updates from Upstream with Unrelated Histories\nDESCRIPTION: This command is an alternative way to pull updates from the `upstream` remote's `main` branch. The `--allow-unrelated-histories` flag is used to enable merging branches that do not share a common commit history, which might be necessary after the initial setup or if the local and upstream histories have diverged significantly. Use with caution.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/develop_firebase_security_rules_emails_encrypting_secrets_71.md#2025-04-22_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\ngit pull upstream main --allow-unrelated-histories\n```\n\n----------------------------------------\n\nTITLE: Enforcing Dark Theme Only Configuration\nDESCRIPTION: Configuration in src/configuration.ts to force the application to use only the dark theme by disabling the theme switcher and setting the default theme to dark.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/branding_environment_variables_setup_project_configuration_80.md#2025-04-22_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\n{\n  features: {\n    enableThemeSwitcher: false,\n  },\n  theme: Themes.Dark,\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Team Account API Server-Side (TypeScript)\nDESCRIPTION: Shows how to initialize the Makerkit Team Account API on the server, typically within a Remix loader or similar server-side function. It imports `createTeamAccountsApi` and `getSupabaseServerClient` to create an API instance.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/google_analytics_provider_posthog_analytics_provider_umami_analytics_provider_88.md#2025-04-22_snippet_25\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createTeamAccountsApi } from '@kit/team-accounts/api';\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\n\nexport async function loader() {\n  const client = getSupabaseServerClient();\n  const api = createTeamAccountsApi(client);\n\n  // use api\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Updates from Upstream Repository\nDESCRIPTION: Command for pulling updates from the main Makerkit repository to keep your project up to date.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/user_roles_validating_api_input_zod_development_18.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ngit pull upstream main\n```\n\n----------------------------------------\n\nTITLE: Enabling Row Level Security on PostgreSQL Table\nDESCRIPTION: SQL command to enable Row Level Security (RLS) on a tasks table in PostgreSQL, which is essential for securing data access.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/supabase_clients_data_fetching_adding_pages_63.md#2025-04-22_snippet_20\n\nLANGUAGE: sql\nCODE:\n```\n-- enable row level security\nalter table tasks enable row level security;\n```\n\n----------------------------------------\n\nTITLE: Task Type Definition in TypeScript\nDESCRIPTION: TypeScript interface definition for the Task model matching the database schema structure\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/user_sdk_sdk_ci_tests_84.md#2025-04-22_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\nexport interface Task {\n  id: number;\n  name: string;\n  organizationId: string;\n  dueDate: string;\n  done: boolean;\n  description?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication Providers\nDESCRIPTION: Configuration example for setting up multiple authentication strategies including email/password, OAuth providers, and email link authentication\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/user_sdk_sdk_ci_tests_84.md#2025-04-22_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\nauth: {\n  // NB: Enable the providers below in the Supabase Console\n  // in your production project\n  providers: {\n    emailPassword: false, // set this to false\n    phoneNumber: false,\n    emailLink: true, // set this to true\n    oAuth: ['google', 'twitter'],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Umami Environment Variables in Bash\nDESCRIPTION: Sets the necessary environment variables in a `.env` file for integrating the Umami analytics service. `NEXT_PUBLIC_UMAMI_HOST` specifies the URL to the Umami tracking script, and `NEXT_PUBLIC_UMAMI_WEBSITE_ID` provides the unique identifier for the website being tracked within Umami.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/custom_analytics_provider_google_analytics_provider_posthog_analytics_provider_36.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nNEXT_PUBLIC_UMAMI_HOST=your-umami-host\nNEXT_PUBLIC_UMAMI_WEBSITE_ID=your-umami-website-id\n```\n\n----------------------------------------\n\nTITLE: Setting Stripe Webhook Secret\nDESCRIPTION: Environment variable configuration for Stripe webhook secret in development.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/develop_firebase_security_rules_emails_encrypting_secrets_71.md#2025-04-22_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\nSTRIPE_WEBHOOKS_SECRET=<PASTE_KEY_HERE>\n```\n\n----------------------------------------\n\nTITLE: Manually Tracking Page Views with Makerkit Analytics API (TypeScript)\nDESCRIPTION: Illustrates the usage of `analytics.trackPageView` to explicitly record a page view event, taking the page name (e.g., 'Sign Up') as an argument. While Makerkit usually handles this automatically in Remix on route changes, this method allows for manual triggering if necessary.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/google_analytics_provider_posthog_analytics_provider_umami_analytics_provider_88.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nvoid analytics.trackPageView('Sign Up');\n```\n\n----------------------------------------\n\nTITLE: Feature Flags Configuration\nDESCRIPTION: This snippet demonstrates how to configure feature flags using environment variables in the Remix Supabase Starter Kit.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/multi_step_forms_page_stepper_91.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nVITE_ENABLE_THEME_TOGGLE=true\nVITE_ENABLE_PERSONAL_ACCOUNT_DELETION=true\nVITE_ENABLE_PERSONAL_ACCOUNT_BILLING=true\nVITE_ENABLE_TEAM_ACCOUNTS_DELETION=true\nVITE_ENABLE_TEAM_ACCOUNTS_BILLING=true\nVITE_ENABLE_TEAM_ACCOUNTS=true\nVITE_ENABLE_TEAM_ACCOUNTS_CREATION=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication Method with Environment Variables\nDESCRIPTION: Example showing how to switch from password authentication to magic link authentication by setting specific environment variables.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stepper_components_application_configuration_61.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nVITE_AUTH_PASSWORD=false\nVITE_AUTH_MAGIC_LINK=true\n```\n\n----------------------------------------\n\nTITLE: Creating a Form Card Component with ShadcnUI in React\nDESCRIPTION: This code implements a card component with a form inside using ShadcnUI components. It includes a header with title and description, a form with name input and framework select fields, and a footer with cancel and deploy buttons, demonstrating a complete form card pattern.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/multi_step_forms_page_shadcn_40.md#2025-04-22_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\n\nimport { Button } from '@kit/ui/button';\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from '@kit/ui/card';\nimport { Input } from '@kit/ui/input';\nimport { Label } from '@kit/ui/label';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@kit/ui/select';\n\nexport default function CardWithForm() {\n  return (\n    <Card className=\"w-[350px]\">\n      <CardHeader>\n        <CardTitle>Create project</CardTitle>\n        <CardDescription>Deploy your new project in one-click.</CardDescription>\n      </CardHeader>\n\n      <CardContent>\n        <form>\n          <div className=\"grid w-full items-center gap-4\">\n            <div className=\"flex flex-col space-y-1.5\">\n              <Label htmlFor=\"name\">Name</Label>\n              <Input id=\"name\" placeholder=\"Name of your project\" />\n            </div>\n            <div className=\"flex flex-col space-y-1.5\">\n              <Label htmlFor=\"framework\">Framework</Label>\n              <Select>\n                <SelectTrigger id=\"framework\">\n                  <SelectValue placeholder=\"Select\" />\n                </SelectTrigger>\n                <SelectContent position=\"popper\">\n                  <SelectItem value=\"next\">Next.js</SelectItem>\n                  <SelectItem value=\"sveltekit\">SvelteKit</SelectItem>\n                  <SelectItem value=\"astro\">Astro</SelectItem>\n                  <SelectItem value=\"nuxt\">Nuxt.js</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </form>\n      </CardContent>\n\n      <CardFooter className=\"flex justify-between\">\n        <Button variant=\"outline\">Cancel</Button>\n        <Button>Deploy</Button>\n      </CardFooter>\n    </Card>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Translation Hook in Components\nDESCRIPTION: Implementation example of using the useTranslation hook for component-level translations.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/text_editor_plugin_waitlist_plugin_plugins_98.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useTranslation } from 'react-i18next';\n\nconst MyComponent = () => {\n  const { t } = useTranslation();\n\n  return <div>{t('auth:signIn')}</div>;\n};\n```\n\n----------------------------------------\n\nTITLE: Disabling Exception Capturing in Enhanced Server Actions - TypeScript/TSX\nDESCRIPTION: Demonstrates disabling error capturing for a server action wrapped via 'enhanceAction' by setting 'captureException' to false. This prevents uncaught exceptions from being reported to the monitoring provider. The snippet retains Zod validation and captcha protection settings.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/csrf_protection_react_query_route_handlers_43.md#2025-04-22_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\n'use server';\n\nimport { enhanceAction } from '@kit/next/actions';\n\nexport const myServerAction = enhanceAction(\n  async function (data, user) {\n    // ... your code here\n    return {\n      success: true,\n    };\n  },\n  {\n    captcha: true,\n    captureException: false,\n    schema: ZodSchema,\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Production Environment Variables (.env.production)\nDESCRIPTION: This snippet shows a template for production environment variables, typically stored in `.env.production`. It includes placeholders for essential Firebase project credentials (API Key, Project ID, etc.), the production site URL, and sensitive keys like the service account email/key, a secret key, App Check key, and Stripe keys. It's recommended to set secret keys in the CI/CD environment rather than committing them.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/app_check_auth_flow_auth_hooks_69.md#2025-04-22_snippet_14\n\nLANGUAGE: plaintext\nCODE:\n```\nFIREBASE_API_KEY=\nFIREBASE_PROJECT_ID=\nFIREBASE_STORAGE_BUCKET=\nFIREBASE_MESSAGING_SENDER_ID=\nFIREBASE_APP_ID=\nFIREBASE_MEASUREMENT_ID=\nSITE_URL=\n\nSERVICE_ACCOUNT_CLIENT_EMAIL=\n\n## SECRET KEYS ARE BEST ADDED TO YOUR CI\nSERVICE_ACCOUNT_PRIVATE_KEY=\nSECRET_KEY=\nSECRET_APPCHECK_KEY=\n\n# Add these in Vercel or .env.local\nSTRIPE_SECRET_KEY=\nSTRIPE_WEBHOOK_SECRET=\n```\n\n----------------------------------------\n\nTITLE: UserSession Interface Structure in TypeScript\nDESCRIPTION: This snippet defines the TypeScript interface for the UserSession object returned by useUserSession hook. It specifies the structure with two main properties: auth for authentication data and data for the user's Firestore record.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/call_api_routes_from_client_csrf_token_guarding_api_routes_7.md#2025-04-22_snippet_27\n\nLANGUAGE: ts\nCODE:\n```\ninterface UserSession {\n  auth: AuthUser | undefined;\n  data: UserData | undefined;\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Files\nDESCRIPTION: Command to format all files in the project.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/commands_cors_develop_firebase_security_rules_5.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm run format\n```\n\n----------------------------------------\n\nTITLE: Guarding Next.js Page Access Based on Subscription Status (TSX)\nDESCRIPTION: This asynchronous function component (`OnlySubscribersPage`) checks an organization's subscription status before rendering a page. It fetches application data using `loadAppData`, extracts the subscription status, and uses the `isSubscriptionActive` helper function to determine if the status is 'active' or 'trialing'. If the subscription is not active, it redirects the user to the root page ('/') using `next/navigation`'s `redirect` function.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/api_routes_vs_server_actions_api_routes_call_api_routes_from_client_19.md#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { redirect } from \"next/navigation\";\nimport loadAppData from '~/lib/server/loaders/load-app-data';\n\nasync function OnlySubscribersPage() {\n  const data = await loadAppData();\n  const status = data.organization.subscription?.data?.status;\n\n  // if the subscription is not active, redirect the user to the dashboard\n  if (!isSubscriptionActive(status)) {\n    redirect('/');\n  }\n\n  // render the page\n}\n\nfunction isSubscriptionActive(status: string | undefined) {\n  return ['trialing', 'active'].includes(status);\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Categories for Wordpress Pages - PHP\nDESCRIPTION: This PHP snippet modifies the theme's `functions.php` to enable categories for Wordpress pages. It registers the 'category' taxonomy for page objects, allowing categorization.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/cms_api_cms_creating_your_own_cms_client_42.md#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nfunction add_categories_to_pages() {\n    register_taxonomy_for_object_type('category', 'page');\n}\nadd_action('init', 'add_categories_to_pages');\n```\n\n----------------------------------------\n\nTITLE: Configuring Role Descriptions in Translation Files\nDESCRIPTION: Example of adding role descriptions to translation files for internationalization. This JSON structure defines labels and descriptions for each role that can be displayed in the UI.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/uploading_data_to_storage_writing_data_to_supabase_data_fetching_77.md#2025-04-22_snippet_35\n\nLANGUAGE: json\nCODE:\n```\n\"roles\": {\n  \"owner\": {\n    \"label\": \"Owner\",\n    \"description\": \"Can change any setting, invite new members and manage billing\"\n  },\n  \"accountmanager\": {\n    \"label\": \"Account Manager\",\n    \"description\": \"Can change some settings, invite members, perform disruptive actions\"\n  },\n  \"readonly\": {\n    \"label\": \"Readonly\",\n    \"description\": \"Can only read information\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Post-Merge Hook Setup in Git\nDESCRIPTION: Creates a post-merge Git hook that automatically installs dependencies using 'pnpm i' after merging updates. This helps keep the project dependencies current. Users should ensure the file is placed and executable in the '.git/hooks' directory.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/going_to_production_clone_repository_code_health_66.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ntouch .git/hooks/post-merge\n```\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\npnpm i\n```\n\nLANGUAGE: bash\nCODE:\n```\nchmod +x .git/hooks/post-merge\n```\n\n----------------------------------------\n\nTITLE: Sending Emails with nodemailer in Next.js\nDESCRIPTION: Example of how to send an email using the sendEmail function in a Next.js Supabase Lite project. This function uses nodemailer to handle email sending.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/server_actions_uploading_data_to_storage_writing_data_to_supabase_30.md#2025-04-22_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\ninterface SendEmailParams {\n  from: string;\n  to: string;\n  subject: string;\n  text?: string;\n  html?: string;\n}\n\nimport { sendEmail } from '~/core/email/send-email';\n\nfunction sendTransactionalEmail() {\n  const sender = configuration.email.senderAddress;\n\n  return sendEmail({\n    to: `youruser@email.com`,\n    from: sender,\n    subject: `Achievement Unlocked!`,\n    html: `Yay, you unlocked an achievement!`,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Firebase Emulators for Local Development\nDESCRIPTION: Command to launch Firebase emulators that provide local versions of Firebase services like Authentication, Firestore, and Storage.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/project_structure_running_project_tailwind_css_75.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run firebase:emulators:start\n```\n\n----------------------------------------\n\nTITLE: Creating Dashboard Page Layout\nDESCRIPTION: Example of creating a dashboard page layout using AppHeader and AppContainer components.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_one_time_payments_stripe_webhooks_ci_tests_73.md#2025-04-22_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\nfunction DashboardPage() {\n  return (\n    <>\n      <AppHeader>\n        <span className={'flex space-x-2'}>\n          <Squares2X2Icon className=\"w-6\" />\n\n          <span>\n            <Trans i18nKey={'common:dashboardTabLabel'} />\n          </span>\n        </span>\n      </AppHeader>\n\n      <AppContainer>\n        Your content goes here\n      </AppContainer>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Organization Interface in TypeScript\nDESCRIPTION: This code extends the Organization interface to include an integrations property, which is an array of Integration objects.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/technical_details_going_to_production_overview_publish_firebase_security_rules_72.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\ninterface Organization {\n  // ...\n  integrations: Integration[];\n}\n```\n\n----------------------------------------\n\nTITLE: Updating FontFamily in Next.js using TypeScript and JSX\nDESCRIPTION: The snippet defines global font-family styles for a Next.js application, allowing customization of system and imported fonts for different elements. By altering the definition, one can control which fonts appear as default.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/environment_variables_setup_project_configuration_set_up_emails_9.md#2025-04-22_snippet_5\n\nLANGUAGE: TSX\nCODE:\n```\nfunction FontFamily() {\n  return (\n    <style jsx global>\n      {`\n        html {\n          --font-family-sans: ${fontFamilySans.style.fontFamily}, 'Segoe UI', 'Roboto', 'Ubuntu',\n            'sans-serif';\n\n          --font-family-heading: ${fontFamilyHeading.style.fontFamily};\n        }\n      `}\n    </style>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Locale in Environment Variables\nDESCRIPTION: Shows how to set the default locale by updating the DEFAULT_LOCALE environment variable in the .env file.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/server_actions_uploading_data_to_storage_writing_data_to_supabase_17.md#2025-04-22_snippet_22\n\nLANGUAGE: txt\nCODE:\n```\nDEFAULT_LOCALE=de\n```\n\n----------------------------------------\n\nTITLE: Using the Upload Photo Mutation in a React Component\nDESCRIPTION: Example of how to use the useUploadUserProfilePhotoMutation hook within a React component's Form element. The mutation is triggered on file upload with the file and user ID as parameters.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/uploading_data_to_storage_writing_data_to_supabase_data_fetching_77.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst updateProfilePhoto = useUploadUserProfilePhotoMutation();\n\n<Form onUpload={(file: File, userId: string) => {\n  return updateProfilePhoto.mutateAsync(file, userId)\n} />\n```\n\n----------------------------------------\n\nTITLE: Running Ngrok for Local Testing\nDESCRIPTION: Command to start ngrok for local webhook testing.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/theming_how_to_version_0_6_0_81.md#2025-04-22_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nnpm run ngrok\n```\n\n----------------------------------------\n\nTITLE: Package Configuration for Ticket Widget\nDESCRIPTION: Complete package.json configuration for the ticket-widget package, including dependencies, scripts for building and serving the widget, and development tools required for the Rollup build process.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/building_javascript_widget_1.md#2025-04-22_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"@kit/ticket-widget\",\n  \"private\": true,\n  \"version\": \"0.1.0\",\n  \"exports\": {\n    \".\": \"./index.ts\"\n  },\n  \"typesVersions\": {\n    \"*\": {\n      \"*\": [\n        \"src/*\"\n      ]\n    }\n  },\n  \"license\": \"MIT\",\n  \"scripts\": {\n    \"clean\": \"rm -rf .turbo node_modules\",\n    \"lint\": \"eslint .\",\n    \"format\": \"prettier --check \\\"**/*.{mjs,ts,md,json}\\\"\",\n    \"typecheck\": \"tsc --noEmit\",\n    \"build\": \"rollup -c ./rollup.config.mjs\",\n    \"build:production\": \"rollup -c ./rollup.config.mjs --environment=production\",\n    \"serve\": \"npx http-server ./ --cors -p 3333\"\n  },\n  \"dependencies\": {},\n  \"devDependencies\": {\n    \"@babel/preset-react\": \"7.24.7\",\n    \"@babel/preset-typescript\": \"^7.24.1\",\n    \"@kit/eslint-config\": \"workspace:*\",\n    \"@kit/prettier-config\": \"workspace:*\",\n    \"@kit/tsconfig\": \"workspace:*\",\n    \"@kit/ui\": \"workspace:*\",\n    \"@rollup/plugin-babel\": \"^6.0.4\",\n    \"@rollup/plugin-commonjs\": \"^26.0.1\",\n    \"@rollup/plugin-node-resolve\": \"^15.2.3\",\n    \"@rollup/plugin-replace\": \"^5.0.5\",\n    \"@rollup/plugin-terser\": \"latest\",\n    \"@rollup/plugin-typescript\": \"^11.1.6\",\n    \"@types/node\": \"^20.14.6\",\n    \"@types/react\": \"^18.3.3\",\n    \"@types/react-dom\": \"^18.3.0\",\n    \"dotenv\": \"^16.3.1\",\n    \"eslint\": \"^8.57.0\",\n    \"lucide-react\": \"^0.399.0\",\n    \"prettier\": \"^3.3.2\",\n    \"react\": \"18.3.1\",\n    \"react-dom\": \"18.3.1\",\n    \"rollup\": \"^4.9.6\",\n    \"rollup-plugin-inject-process-env\": \"latest\",\n    \"rollup-plugin-polyfill-node\": \"^0.13.0\",\n    \"rollup-plugin-postcss\": \"latest\",\n    \"rollup-plugin-tsconfig-paths\": \"^1.5.2\",\n    \"rollup-plugin-visualizer\": \"latest\",\n    \"tailwindcss\": \"3.4.4\",\n    \"tailwindcss-animate\": \"^1.0.7\",\n    \"tslib\": \"^2.8.1\",\n    \"typescript\": \"^5.5.2\"\n  },\n  \"prettier\": \"@kit/prettier-config\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Blog Post with MDX\nDESCRIPTION: Example of a blog post frontmatter configuration in MDX format showing required metadata fields including title, date, live status, description and image path\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/auth_setup_authentication_blog_16.md#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\n---\n\ntitle: Lorem Ipsum\ndate: 2023-09-23\nlive: true\ndescription: \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\"\nimage: \"/assets/images/posts/lorem-ipsum.webp\"\n---\n```\n\n----------------------------------------\n\nTITLE: Implementing Task Deletion Confirmation Modal in React/TypeScript\nDESCRIPTION: Defines a React functional component `ConfirmDeleteTaskModal` using TypeScript. This component wraps a core `Modal` component to present a confirmation dialog before deleting a task. It accepts props for visibility control (`isOpen`, `setIsOpen`), the task identifier (`task`), and a confirmation callback (`onConfirm`).\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/deploying_production_development_getting_started_environment_variables_13.md#2025-04-22_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nimport Modal from '~/core/ui/Modal';\nimport Button from '~/core/ui/Button';\n\nconst ConfirmDeleteTaskModal: React.FC<{\n  isOpen: boolean;\n  setIsOpen: (isOpen: boolean) => void;\n  task: string;\n  onConfirm: () => void;\n}> = ({ isOpen, setIsOpen, onConfirm, task }) => {\n  return (\n    <Modal heading={`Deleting Task`} isOpen={isOpen} setIsOpen={setIsOpen}>\n      <div className={'flex flex-col space-y-4'}>\n        <p>\n          You are about to delete the task <b>{task}</b>\n        </p>\n\n        <p>Do you want to continue?</p>\n\n        <Button block color={'danger'} onClick={onConfirm}>\n          Yep, delete task\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default ConfirmDeleteTaskModal;\n```\n\n----------------------------------------\n\nTITLE: Integrating Analytics with App Events in TypeScript\nDESCRIPTION: Demonstrates leveraging Makerkit's App Events system (`useAppEvents`) for analytics. Emitting a standard app event like `user.signedUp` automatically triggers corresponding analytics calls (`identify` and `trackEvent`), promoting centralized event handling.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/analytics_api_custom_analytics_provider_google_analytics_provider_57.md#2025-04-22_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useAppEvents } from '@kit/shared/events';\n\nfunction SomeComponent() {\n  const { emit } = useAppEvents();\n\n  const handleSignUp = (userId: string) => {\n    emit({ type: 'user.signedUp', payload: { userId } });\n    // This automatically calls analytics.identify and analytics.trackEvent\n  };\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PostCSS for Tailwind v4\nDESCRIPTION: PostCSS configuration update for Tailwind CSS v4 migration.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/running_project_technical_details_update_nextjs15_50.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins: {\n    '@tailwindcss/postcss': {},\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom OAuth Providers for Microsoft and Apple\nDESCRIPTION: Custom OAuth provider implementation for Microsoft and Apple authentication. These classes extend the OAuthProvider class to create custom provider instances for these platforms.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/ci_tests_running_tests_testing_limitations_12.md#2025-04-22_snippet_32\n\nLANGUAGE: tsx\nCODE:\n```\nclass MicrosoftAuthProvider extends OAuthProvider {\n  constructor() {\n    super('microsoft.com');\n  }\n}\n\nclass AppleAuthProvider extends OAuthProvider {\n  constructor() {\n    super('apple.com');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom CMS Client Interface Definition\nDESCRIPTION: Abstract class definition showing required methods for implementing a custom CMS client including content, category, and tag management.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/team_account_sidebar_configuration_configuration_cms_api_92.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nexport abstract class CmsClient {\n  abstract getContentItems(options?: Cms.GetContentItemsOptions): Promise<{\n    total: number;\n    items: Cms.ContentItem[];\n  }>;\n\n  abstract getContentItemBySlug(params: {\n    slug: string;\n    collection: string;\n  }): Promise<Cms.ContentItem | undefined>;\n\n  abstract getCategories(\n    options?: Cms.GetCategoriesOptions,\n  ): Promise<Cms.Category[]>;\n\n  abstract getCategoryBySlug(slug: string): Promise<Cms.Category | undefined>;\n\n  abstract getTags(options?: Cms.GetTagsOptions): Promise<Cms.Tag[]>;\n\n  abstract getTagBySlug(slug: string): Promise<Cms.Tag | undefined>;\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Team Workspace Data in a Loader (TypeScript)\nDESCRIPTION: Example of a common loader pattern in Makerkit for loading data specific to a team workspace. It retrieves the `accountSlug` from route parameters (`args.params`), gets a Supabase client, and uses a dedicated function (`loadTeamWorkspace`) to fetch the workspace data.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/creating_your_own_cms_client_keystatic_wordpress_62.md#2025-04-22_snippet_31\n\nLANGUAGE: tsx\nCODE:\n```\nexport const loader = async (args: Route.LoaderArgs) => {\n  const accountSlug = args.params.account as string;\n  const client = getSupabaseServerClient(args.request);\n\n  const workspace = await loadTeamWorkspace({\n    accountSlug,\n    client,\n  });\n\n  return {\n    workspace,\n    accountSlug,\n  };\n};\n\n```\n\n----------------------------------------\n\nTITLE: Fetching Single Task from Supabase in TypeScript\nDESCRIPTION: This function retrieves a single task from Supabase based on its ID. It uses the Supabase client to execute a database query and returns the task details.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/supabase_data_fetching_supabase_data_writing_tailwind_css_86.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport function getTask(client: Client, id: number) {\n  return client\n    .from(TASKS_TABLE)\n    .select(\n      `\n      id,\n      name,\n      organizationId: organization_id,\n      dueDate: due_date,\n      description,\n      done\n    `,\n    )\n    .eq('id', id)\n    .single();\n}\n```\n\n----------------------------------------\n\nTITLE: Running Code Formatting Command\nDESCRIPTION: This command reformats the entire project according to the Prettier configuration after making changes to the settings.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/custom_fetch_fetching_data_firestore_making_api_requests_4.md#2025-04-22_snippet_37\n\nLANGUAGE: bash\nCODE:\n```\nnpm run format\n```\n\n----------------------------------------\n\nTITLE: Defining Event Model Interface in TypeScript\nDESCRIPTION: Example of defining a TypeScript interface for an 'Event' entity model in a Makerkit application.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/notifications_plugins_adding_translations_68.md#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nexport interface EventModel {\n  name: string;\n  description: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Analytics Provider\nDESCRIPTION: Example of using the custom analytics provider for tracking events and identifying users.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/translations_updating_latest_version_tutorials_87.md#2025-04-22_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nimport { analytics } from '@kit/analytics';\n\nvoid analytics.identify('user123', { name: 'John Doe' });\nvoid analytics.trackEvent('Button Clicked', { buttonName: 'Submit' });\n```\n\n----------------------------------------\n\nTITLE: Implementing Popover Component with Dimension Controls\nDESCRIPTION: A floating popover component with dimension controls implemented using shadcn UI. Contains input fields for width, max width, height, and max height settings.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/multi_step_forms_page_shadcn_40.md#2025-04-22_snippet_26\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from '@kit/ui/button';\nimport { Input } from '@kit/ui/input';\nimport { Label } from '@kit/ui/label';\nimport { Popover, PopoverContent, PopoverTrigger } from '@kit/ui/popover';\n\nexport default function PopoverDemo() {\n  return (\n    <div>\n      <div className=\"flex flex-col gap-4 items-center justify-center\">\n        <Popover>\n          <PopoverTrigger asChild>\n            <Button variant=\"outline\">Open popover</Button>\n          </PopoverTrigger>\n\n          <PopoverContent className=\"w-80\">\n            <div className=\"grid gap-4\">\n              <div className=\"space-y-2\">\n                <h4 className=\"font-medium leading-none\">Dimensions</h4>\n                <p className=\"text-sm text-muted-foreground\">\n                  Set the dimensions for the layer.\n                </p>\n              </div>\n              <div className=\"grid gap-2\">\n                <div className=\"grid grid-cols-3 items-center gap-4\">\n                  <Label htmlFor=\"width\">Width</Label>\n                  <Input\n                    id=\"width\"\n                    defaultValue=\"100%\"\n                    className=\"col-span-2 h-8\"\n                  />\n                </div>\n                <div className=\"grid grid-cols-3 items-center gap-4\">\n                  <Label htmlFor=\"maxWidth\">Max. width</Label>\n                  <Input\n                    id=\"maxWidth\"\n                    defaultValue=\"300px\"\n                    className=\"col-span-2 h-8\"\n                  />\n                </div>\n                <div className=\"grid grid-cols-3 items-center gap-4\">\n                  <Label htmlFor=\"height\">Height</Label>\n                  <Input\n                    id=\"height\"\n                    defaultValue=\"25px\"\n                    className=\"col-span-2 h-8\"\n                  />\n                </div>\n                <div className=\"grid grid-cols-3 items-center gap-4\">\n                  <Label htmlFor=\"maxHeight\">Max. height</Label>\n                  <Input\n                    id=\"maxHeight\"\n                    defaultValue=\"none\"\n                    className=\"col-span-2 h-8\"\n                  />\n                </div>\n              </div>\n            </div>\n          </PopoverContent>\n        </Popover>\n      </div>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ClientDataLoader Component\nDESCRIPTION: In this snippet, the 'ClientDataLoader' component is used to build a paginated table of organizations. It uses a Supabase client obtained from 'useSupabase' hook, allowing interaction with the database. Key parameters include 'table', 'page', 'select', and 'limit' to define the data fetching behavior. The component uses the DataTable component for rendering data upon retrieval completion, showing a loading indicator while data is being fetched.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/ai_text_editor_cookie_banner_feedback_popup_24.md#2025-04-22_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ClientDataLoader } from '@makerkit/data-loader-supabase-nextjs';\nimport useSupabase from '~/core/supabase/use-supabase';\n\ninterface SearchParams {\n  page: string;\n}\n\nconst OrganizationsTable = ({ searchParams }: { searchParams: SearchParams }) => {\n  const client = useSupabase();\n  const page = Number(searchParams.page) || 1;\n\n  return (\n    <ClientDataLoader\n      client={client}\n      table=\"organizations\"\n      page={page} // the page to fetch\n      select=\"*\" // all the columns - can be omitted\n      limit={10} // retrieve 10 organizations per page\n    >\n      {({ result, isLoading }) => {\n        const { data, count, pageSize, pageCount } = result;\n\n        if (isLoading) {\n          return <span>Loading...</span>;\n        }\n\n        return (\n          <DataTable\n            data={data}\n            count={count}\n            pageSize={pageSize}\n            pageCount={pageCount}\n            columns=[\n              {\n                header: 'ID',\n                accessorKey: 'id',\n              },\n              {\n                header: 'Name',\n                accessorKey: 'name',\n              }\n            ]\n          />\n        );\n      }}\n    </ClientDataLoader>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom API Request Hook\nDESCRIPTION: This custom hook wraps the useApiRequest hook to create a reusable function for making API requests to create a session.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_one_time_payments_stripe_webhooks_ci_tests_73.md#2025-04-22_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport useApiRequest from '~/core/hooks/use-api';\n\ninterface Body {\n  idToken: string;\n}\n\nexport function useCreateSession() {\n  return useApiRequest<void, Body>('/api/session/sign-in');\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving the User ID on the Frontend with useUserId - TypeScript/React\nDESCRIPTION: Shows how to get the current user's unique ID using the useUserId hook inside a React component. This hook must run within a component's scope. Input: none; output: the id of the authenticated user.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/adding_app_pages_guarding_pages_updating_sidebar_menu_32.md#2025-04-22_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport useUserId from '~/core/hooks/use-user-id';\n\nconst userId = useUserId();\n```\n\n----------------------------------------\n\nTITLE: Type Checking Command\nDESCRIPTION: Command to run type checking on the TypeScript codebase.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/uploading_data_to_storage_writing_data_to_supabase_data_fetching_77.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nnpm run typecheck\n```\n\n----------------------------------------\n\nTITLE: Creating a Primary Button Component with Tailwind CSS\nDESCRIPTION: Example of a React component that uses the primary color classes from Tailwind CSS. This demonstrates how to apply the primary color and dark mode variations to a button element.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/initializing_project_introduction_marketing_site_pages_14.md#2025-04-22_snippet_25\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\n\nexport const PrimaryButton = () => {\n  return (\n    <button className=\"bg-primary text-white dark:bg-primary/10 dark:text-primary px-4 py-2 rounded\">\n      Click me\n    </button>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Setting CMS Client Type with Environment Variables\nDESCRIPTION: This snippet shows how to specify the CMS system to use in the application. It supports either 'wordpress' or 'keystatic' as options.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stepper_components_application_configuration_41.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nCMS_CLIENT=keystatic\n```\n\n----------------------------------------\n\nTITLE: Implementing Delete RLS Policy for Tasks Table\nDESCRIPTION: Creates a row level security policy for deleting tasks, verifying if the user is the owner or has tasks.delete permission\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/supabase_clients_data_fetching_adding_pages_63.md#2025-04-22_snippet_24\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy delete_tasks on public.tasks\n    for delete\n    using (\n        account_id = auth.uid() or\n        public.has_permission(auth.uid(), account_id, 'tasks.delete'::app_permissions)\n    );\n```\n\n----------------------------------------\n\nTITLE: Running Supabase Database Migration Command\nDESCRIPTION: Command to sync your local database schema with your remote Supabase database using the Supabase CLI.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/navigating_codebase_running_the_application_technical_details_78.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsupabase db push\n```\n\n----------------------------------------\n\nTITLE: Defining Environment Variables in Bash\nDESCRIPTION: Example of environment variables that need to be added to the development environment, including an analytics toggle and API key.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/csrf_protection_react_query_route_handlers_43.md#2025-04-22_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\nNEXT_PUBLIC_ANALYTICS_ENABLED=true\nNEXT_PUBLIC_ANALYTICS_API_KEY=value\n```\n\n----------------------------------------\n\nTITLE: Installing Google Analytics Plugin with Makerkit CLI\nDESCRIPTION: Command to install the Google Analytics plugin using the Makerkit CLI in a project.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/analytics_api_custom_analytics_provider_google_analytics_provider_57.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpx @makerkit/cli@latest plugins install\n```\n\n----------------------------------------\n\nTITLE: Running Next.js 15 Codemod for Automatic Updates\nDESCRIPTION: Command to run the Next.js codemod that automatically updates code to use promise-based APIs required by Next.js 15.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/running_project_technical_details_update_nextjs15_50.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx @next/codemod@canary upgrade latest\n```\n\n----------------------------------------\n\nTITLE: Creating API Endpoints for Testimonial Management in TypeScript\nDESCRIPTION: This code snippet defines the API endpoints for fetching and adding testimonials. It uses Remix's action and loader functions to handle GET and POST requests, respectively.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/technical_details_updating_codebase_installation_97.md#2025-04-22_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ActionFunctionArgs } from '@remix-run/server-runtime';\n\nimport { createTestimonialsLoader, createAddTestimonialAction } from '@kit/testimonial/server';\n\nexport const action = ({ request }: ActionFunctionArgs) => {\n  return createAddTestimonialAction(request);\n};\n\nexport const loader = ({ request }: ActionFunctionArgs) => {\n  return createTestimonialsLoader(request);\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing EditorContainer Component with Autosave using rxjs\nDESCRIPTION: React component that implements the AI Text Editor with autosave functionality using rxjs for debouncing and handling save operations with toast notifications.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_configuration_stripe_one_time_payments_stripe_webhooks_82.md#2025-04-22_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCallback, useEffect, useMemo, useRef } from 'react';\nimport { toast } from 'sonner';\n\nimport {\n  debounceTime,\n  distinctUntilChanged,\n  Subject,\n  switchMap,\n  tap,\n} from 'rxjs';\n\nimport Editor from '~/plugins/text-editor/components/Editor';\n\nexport default function EditorContainer() {\n  const subject$ = useMemo(() => new Subject(), []);\n  const currentToastId = useRef<string | number>();\n\n  const onChange = useCallback(\n    (content: string) => {\n      subject$.next(content);\n    },\n    [subject$],\n  );\n\n  useEffect(() => {\n    const subscription = subject$\n      .pipe(\n        debounceTime(2000),\n        distinctUntilChanged(),\n        switchMap(() => {\n          if (currentToastId.current) {\n            toast.dismiss(currentToastId.current);\n          }\n\n          currentToastId.current = toast.loading('Saving...', {\n            id: currentToastId.current,\n          });\n\n          return new Promise((resolve) => {\n            setTimeout(resolve, 2000);\n          });\n        }),\n        tap(() => {\n          toast.success('Saved!', {\n            id: currentToastId.current,\n          });\n        }),\n      )\n      .subscribe(() => {\n        currentToastId.current = undefined;\n      });\n\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, [subject$]);\n\n  return (\n    <Editor\n      className={'h-[80vh] w-[100vh]'}\n      content={getInitialContent()}\n      onChange={onChange}\n    />\n  );\n}\n\nfunction getInitialContent() {\n  return `\n## Introducing Makerkit's AI Editor\n\nThis plugin is powered by OpenAI's GPT-3 and Lexical's Editor, and helps you add an AI-powered editor to your SaaS, in just a few lines of code.\n\nInstall it using the CLI:\n\n\\`\\`\\`\nnpx @makerkit/cli plugins install\n\\`\\`\\`\n\nAvailable for *Pro* and *Teams* customers **for free**.\n  `.trim();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Firestore Data Model in TypeScript\nDESCRIPTION: Defines the Firestore data model for a 'Task' entity using TypeScript, with properties such as name, description, organizationId, dueDate, and done status. The task model is relevant for managing organizational tasks in the application, requiring TypeScript familiarity and Firestore usage.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/deploying_production_development_getting_started_environment_variables_13.md#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nexport interface Task {\n  name: string;\n  description: string;\n  organizationId: string;\n  dueDate: string;\n  done: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Healthcheck\nDESCRIPTION: Command to lint code and check types as a health check.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/commands_cors_develop_firebase_security_rules_5.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm run healthcheck\n```\n\n----------------------------------------\n\nTITLE: Feature Flags Environment Variables\nDESCRIPTION: This snippet shows all environment variables that can be used to override the default feature flag settings in the application.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stepper_components_application_configuration_41.md#2025-04-22_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\nNEXT_PUBLIC_ENABLE_THEME_TOGGLE=\nNEXT_PUBLIC_ENABLE_PERSONAL_ACCOUNT_DELETION=\nNEXT_PUBLIC_ENABLE_TEAM_ACCOUNTS=\nNEXT_PUBLIC_ENABLE_TEAM_ACCOUNTS_DELETION=\nNEXT_PUBLIC_ENABLE_TEAM_ACCOUNTS_CREATION=\nNEXT_PUBLIC_ENABLE_PERSONAL_ACCOUNT_BILLING=\nNEXT_PUBLIC_ENABLE_TEAM_ACCOUNTS_BILLING=\nNEXT_PUBLIC_LANGUAGE_PRIORITY=\nNEXT_PUBLIC_ENABLE_NOTIFICATIONS=\nNEXT_PUBLIC_REALTIME_NOTIFICATIONS=\nNEXT_PUBLIC_ENABLE_VERSION_UPDATER=\n```\n\n----------------------------------------\n\nTITLE: Killing Ports Command\nDESCRIPTION: Command to free up ports used by the Makerkit stack, particularly useful after running tests when emulators don't properly release ports.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/uploading_data_to_storage_writing_data_to_supabase_data_fetching_77.md#2025-04-22_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\nnpm run killports\n```\n\n----------------------------------------\n\nTITLE: Return Type Definition for OTP API verifyToken Method (TypeScript)\nDESCRIPTION: Defines the structure of the result object returned by the `api.verifyToken` method in the OTP API. It indicates if the token is valid and, if so, provides associated user details, metadata, scopes, and purpose. If invalid, it may include an error message.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/analytics_api_custom_analytics_provider_google_analytics_provider_57.md#2025-04-22_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  valid: boolean;       // Whether the token is valid\n  userId?: string;      // User ID associated with the token (if valid)\n  metadata?: object;    // Metadata associated with the token (if valid)\n  message?: string;     // Error message (if invalid)\n  scopes?: string[];    // Permission scopes (if valid)\n  purpose?: string;     // Token purpose (if valid)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Chatbot API Route Handler\nDESCRIPTION: Implementation of the API route handler for the chatbot functionality using Remix action function.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/technical_details_updating_codebase_installation_97.md#2025-04-22_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nimport { ActionFunctionArgs } from '@remix-run/server-runtime';\n\nimport { handleChatBotRequest } from '@kit/chatbot/server';\n\nexport const action = async ({ request }: ActionFunctionArgs) => {\n  return handleChatBotRequest(request);\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Global Git Username (Bash)\nDESCRIPTION: Sets the Git username globally on the user's machine. Replace '\"Your Github Username\"' with the actual GitHub username associated with the Makerkit organization.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/configuring_supabase_database_webhooks_fly_production_environment_variables_95.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngit config --global user.username \"Your Github Username\"\n```\n\n----------------------------------------\n\nTITLE: Viewing Next.js Project Page Structure\nDESCRIPTION: This code displays the folder and file structure of a Next.js Firebase project, showing the organization of pages for authentication, dashboard, settings, blog, docs, and other core functionality.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/deploying_production_development_getting_started_environment_variables_13.md#2025-04-22_snippet_4\n\nLANGUAGE: txt\nCODE:\n```\n├── pages\n  └── api\n    └── onboarding\n    └── organizations\n    └── stripe\n    └── session\n    └── user\n\n  └── auth\n    └── invite\n      └── [code].tsx\n\n    └── link.tsx\n    └── password-reset.tsx\n    └── sign-in.tsx\n    └── sign-up.tsx\n\n  └── dashboard\n    └── page.tsx\n\n  └── onboarding\n    └── page.tsx\n\n  └── settings\n    └── organization\n      └── members\n        └── page.tsx\n        └── invite.tsx\n\n    └── profile\n      └── page.tsx\n      └── email.tsx\n      └── password.tsx\n      └── authentication.tsx\n    └── subscription\n\n  └── blog\n    └── [collection]\n      └── [...slug].tsx\n\n  └── docs\n    └── [page]\n      └── slug.tsx\n    └── page.tsx\n\n  └── 500.tsx\n  └── 404.tsx\n  └── _document.tsx\n  └── _app.tsx\n  └── page.tsx\n  └── faq.tsx\n  └── pricing.tsx\n```\n\n----------------------------------------\n\nTITLE: Pulling Updates from Upstream (Bash)\nDESCRIPTION: Fetches changes from the 'main' branch of the 'upstream' remote (the original Makerkit repository) and merges them into the current local branch. This command is used to keep the local copy of the kit updated.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/configuring_supabase_database_webhooks_fly_production_environment_variables_95.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ngit pull upstream main\n```\n\n----------------------------------------\n\nTITLE: Retrieving Billing Customer ID\nDESCRIPTION: Code showing how to retrieve the billing customer ID for a team account using the getCustomerId method. Requires the account ID as a parameter.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/custom_analytics_provider_google_analytics_provider_posthog_analytics_provider_36.md#2025-04-22_snippet_44\n\nLANGUAGE: tsx\nCODE:\n```\nconst api = createTeamAccountsApi(client);\nconst customerId = await api.getCustomerId('account-id');\n```\n\n----------------------------------------\n\nTITLE: Rendering Tasks Page Components in React Application\nDESCRIPTION: This snippet shows how to render the TasksTableContainer and TasksEmptyState components within the AppContainer. It conditionally renders the empty state if there are no tasks.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/supabase_data_fetching_supabase_data_writing_tailwind_css_86.md#2025-04-22_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\n<AppContainer>\n  <If condition={!count}>\n    <TasksEmptyState />\n  </If>\n\n  <TasksTableContainer\n    pageSize={pageSize}\n    pageIndex={pageIndex}\n    pageCount={pageCount}\n    tasks={tasks}\n    query={query}\n  />\n</AppContainer>\n```\n\n----------------------------------------\n\nTITLE: Setting One-time Billing Mode in Makerkit\nDESCRIPTION: Environment variable configuration to enable one-time payment mode instead of the default subscription mode. This setting affects how Makerkit fetches billing data, switching from subscription tables to order tables.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/lemon_squeezy_metered_usage_one_off_payments_38.md#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nBILLING_MODE=one-time\n```\n\n----------------------------------------\n\nTITLE: Installing Firebase Tools Globally with npm\nDESCRIPTION: This bash command installs the Firebase tools package globally using npm. This is necessary if the Firebase CLI commands are not working out of the box.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/third_party_auth_providers_authentication_blog_3.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm i firebase-tools -g\n```\n\n----------------------------------------\n\nTITLE: TypeScript Path Configuration\nDESCRIPTION: Configuration for TypeScript compiler to locate plugin files using path aliases\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/subscription_permissions_organizations_lemon_squeezy_23.md#2025-04-22_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"paths\": {\n      \"~/plugins/*\": [\n        \"./plugins/*\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Config Table in SQL for Account Settings\nDESCRIPTION: SQL command to create a 'config' table in the database. This table stores settings for team accounts, account billing, and the billing provider.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/multi_step_forms_page_stepper_91.md#2025-04-22_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\ncreate table if not exists public.config(\n    enable_team_accounts boolean default true not null,\n    enable_account_billing boolean default true not null,\n    enable_team_account_billing boolean default true not null,\n    billing_provider public.billing_provider default 'stripe' not null\n);\n```\n\n----------------------------------------\n\nTITLE: Lemon Squeezy Payment Configuration\nDESCRIPTION: Environment variables required for Lemon Squeezy payment integration.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stepper_components_application_configuration_41.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nLEMON_SQUEEZY_SECRET_KEY=your-secret-key\nLEMON_SQUEEZY_STORE_ID=your-store-id\nLEMON_SQUEEZY_SIGNING_SECRET=your-signing-secret\n```\n\n----------------------------------------\n\nTITLE: Creating the Messages Table and Related Types with SQL\nDESCRIPTION: This SQL migration snippet defines a new enum type (message_author) and the schema for the messages table, along with an index for performance. The messages table tracks messages tied to support tickets, linking each message to the tickets and accounts tables through foreign key relationships. Fields constrain message content, attachment URL, and maintain created/updated timestamps. Deletion policies are set to cascade or set null as appropriate. This migration relies on the existence of tickets and accounts tables and is expected to be run via a Supabase migration pipeline.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/database_4.md#2025-04-22_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\ncreate type public.message_author as enum ('support', 'customer');\n\n/*\n* Table: public.messages\n*/\ncreate table if not exists public.messages (\n  id uuid primary key default gen_random_uuid(),\n  ticket_id uuid not null references public.tickets(id) on delete cascade,\n  author public.message_author not null,\n  author_account_id uuid references public.accounts(id) on delete set null,\n  content varchar(5000) not null,\n  attachment_url varchar(500),\n  created_at timestamptz not null default now(),\n  updated_at timestamptz not null default now()\n);\n\ncreate index ix_messages_ticket_id on public.messages(ticket_id);\n```\n\n----------------------------------------\n\nTITLE: Implementing OTP Input Component\nDESCRIPTION: A specialized input component for one-time passwords with separated input slots and grouping functionality.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/multi_step_forms_page_shadcn_40.md#2025-04-22_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  InputOTP,\n  InputOTPGroup,\n  InputOTPSeparator,\n  InputOTPSlot,\n} from '@kit/ui/input-otp';\n\nexport default function InputOTPDemo() {\n  return (\n    <div>\n      <InputOTP maxLength={6}>\n        <InputOTPGroup>\n          <InputOTPSlot index={0} />\n          <InputOTPSlot index={1} />\n          <InputOTPSlot index={2} />\n        </InputOTPGroup>\n        <InputOTPSeparator />\n        <InputOTPGroup>\n          <InputOTPSlot index={3} />\n          <InputOTPSlot index={4} />\n          <InputOTPSlot index={5} />\n        </InputOTPGroup>\n      </InputOTP>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Account API in React Router Loader (TSX)\nDESCRIPTION: Demonstrates how to initialize the Makerkit Account API within a React Router `loader` function. It involves getting a server-side Supabase client using `getSupabaseServerClient` and passing it to `createAccountsApi`.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/analytics_api_custom_analytics_provider_google_analytics_provider_57.md#2025-04-22_snippet_27\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createAccountsApi } from '@kit/accounts/api';\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\n\nexport async function loader(args: LoaderFunctionArgs) {\n  const client = getSupabaseServerClient(args.request);\n  const api = createAccountsApi(client);\n\n  // use api\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Components via package.json (JSON)\nDESCRIPTION: This snippet demonstrates how to configure the \\\\\"exports\\\\\" field in package.json to export an individual component (e.g., Avatar) for optimal tree-shaking and direct import paths. Adjust the export mapping according to the location and naming of your specific component. Expected input is a JSON file; no special prerequisites except a valid package.json context are needed. The output is a direct module export path for consumers of your package. Limitations include careful component path mapping to avoid import resolution errors.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/creating_your_own_cms_client_keystatic_wordpress_62.md#2025-04-22_snippet_10\n\nLANGUAGE: JSON\nCODE:\n```\n{\\n  \\\"exports\\\": {\\n    \\\"./avatar\\\": \\\"./src/shadcn/avatar.tsx\\\"\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Ticket Limit Enforcement Trigger in PostgreSQL\nDESCRIPTION: This function creates a database trigger to enforce ticket limits based on subscription plans. It checks if a user has exceeded their allowed ticket quota before allowing new ticket creation, differentiating between free plans (30-day window) and paid plans (subscription period).\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/payments_billing_6.md#2025-04-22_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\ncreate\nor replace function public.check_ticket_limit ()\nreturns trigger\nset search_path = ''\nas $$\ndeclare\n  subscription record;\n  ticket_count int;\n  max_tickets int;\nbegin\n  -- get the subscription details for the account\n  select *\n    into subscription\n    from public.get_subscription_details(NEW.account_id);\n\n  -- is the user on a free plan?\n  if subscription is null then\n    select count(*)\n      into ticket_count\n      from public.tickets\n      where account_id = NEW.account_id and\n      created_at >= now() - interval '30 days';\n\n    -- check if the user has exceeded the limit\n    if ticket_count >= 50 then\n      raise exception 'You have reached the maximum number of tickets allowed for your plan';\n    end if;\n\n    -- allow the user to create the ticket\n    return NEW;\n  end if;\n\n  -- get the max tickets allowed for the plan\n  select max_tickets\n    into max_tickets\n    from public.plans\n    where variant_id = subscription.variant_id;\n\n  -- Unlimited tickets for the plan, so allow the user to create the ticket\n  if max_tickets = -1 then\n    return NEW;\n  end if;\n\n  -- check the number of tickets created during the billing period\n  select count(*)\n    into ticket_count\n    from public.tickets\n    where account_id = NEW.account_id and\n    created_at >= subscription.period_starts_at and\n    created_at <= subscription.period_ends_at;\n\n  if ticket_count >= max_tickets then\n    raise exception 'You have reached the maximum number of tickets allowed for your plan';\n  end if;\n\n  return NEW;\nend;\n$$ language plpgsql;\n\ncreate or replace trigger check_ticket_limit\nbefore insert on public.tickets\nfor each row\nexecute function public.check_ticket_limit ();\n```\n\n----------------------------------------\n\nTITLE: Defining Firestore Data Model for Tasks\nDESCRIPTION: TypeScript interface defining the Task data model for a task management application using Firestore, specifying fields such as name, description, organization relationship, due date and completion status.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/development_getting_started_environment_variables_firestore_data_fetching_74.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nexport interface Task {\n  name: string;\n  description: string;\n  organizationId: string;\n  dueDate: string;\n  done: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Locale in Remix Firebase SaaS Environment\nDESCRIPTION: This code shows how to set the default locale for a Remix Firebase SaaS application by updating the DEFAULT_LOCALE environment variable in the .env file.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/develop_firebase_security_rules_emails_encrypting_secrets_71.md#2025-04-22_snippet_5\n\nLANGUAGE: txt\nCODE:\n```\nDEFAULT_LOCALE=de\n```\n\n----------------------------------------\n\nTITLE: Configuring Navigation Menu in Next.js TypeScript\nDESCRIPTION: Defines the structure of the navigation menu in a Next.js application by modifying the NAVIGATION_CONFIG object. The code snippet shows how to add menu items with labels and icons. Dependencies include specific custom icons like Squares2X2Icon and Cog8ToothIcon. The items array holds menu components that get rendered in the app's navigation.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/deploying_production_development_getting_started_environment_variables_13.md#2025-04-22_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nconst NAVIGATION_CONFIG = {\n  items: [\n    {\n      label: 'common:dashboardTabLabel',\n      path: configuration.paths.appHome,\n      Icon: ({ className }: { className: string }) => {\n        return <Squares2X2Icon className={className} />;\n      },\n    },\n    {\n      label: 'common:settingsTabLabel',\n      path: '/settings',\n      Icon: ({ className }: { className: string }) => {\n        return <Cog8ToothIcon className={className} />;\n      },\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing a LoadingOverlay Component in React\nDESCRIPTION: Shows how to use the LoadingOverlay component to display loading states in a React application. The component supports custom styling, full-page or inline modes, and custom content.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/paddle_per_seat_billing_stripe_90.md#2025-04-22_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nimport { LoadingOverlay } from '@kit/ui/loading-overlay';\n\nfunction MyComponent() {\n  return (\n    <LoadingOverlay>\n      Loading your content...\n    </LoadingOverlay>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving CSRF Token\nDESCRIPTION: Shows how to retrieve a CSRF token using the useGetCsrfToken hook. The token should be sent in the x-csrf-token header.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_one_time_payments_stripe_webhooks_ci_tests_73.md#2025-04-22_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nconst getCsrfToken = useGetCsrfToken();\nconst csrfToken = getCsrfToken();\n\nconsole.log(csrfToken) // token\n```\n\n----------------------------------------\n\nTITLE: Creating a Route Page Component for Events in Remix\nDESCRIPTION: A Remix page component that renders the EventsListContainer. This file is placed in the routes directory to create a dedicated page for viewing events within the application.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/notifications_plugins_adding_translations_68.md#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport EventsListContainer from '~/components/EventsListContainer';\n\nconst EventsPage: React.FC = () => {\n  return (\n     <EventsListContainer />\n  );\n};\n\nexport default EventsPage;\n```\n\n----------------------------------------\n\nTITLE: Pulling Updates from Upstream Git Repository\nDESCRIPTION: This command uses `git pull` to fetch changes from the `main` branch of the `upstream` remote (previously configured to point to the original MakerKit repository) and merge them into the current local branch. This is the standard way to get updates from the source repository.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/develop_firebase_security_rules_emails_encrypting_secrets_71.md#2025-04-22_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ngit pull upstream main\n```\n\n----------------------------------------\n\nTITLE: Setting Up Admin Panel Pages\nDESCRIPTION: Configuration for feedback admin panel pages in Next.js\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/sentry_monitoring_notifications_configuration_51.md#2025-04-22_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\nimport { FeedbackSubmissionsPage } from '@kit/feedback/admin';\n\nexport default FeedbackSubmissionsPage;\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { FeedbackSubmissionPage } from '@kit/feedback/admin';\n\nexport default FeedbackSubmissionPage;\n```\n\nLANGUAGE: tsx\nCODE:\n```\n<SidebarItem\n    path={'/admin/feedback'}\n    Icon={<MessageCircle className={'h-4'} />}\n    >\n    Feedback\n</SidebarItem>\n```\n\n----------------------------------------\n\nTITLE: Legacy Team Navigation Configuration\nDESCRIPTION: Shows the older flat route configuration structure for team navigation used prior to October 2024.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stepper_components_application_configuration_41.md#2025-04-22_snippet_31\n\nLANGUAGE: tsx\nCODE:\n```\nconst routes = [\n  {\n    label: 'common:dashboardTabLabel',\n    path: pathsConfig.app.accountHome.replace('[account]', account),\n    Icon: <LayoutDashboard className={iconClasses} />,\n    end: true,\n  }\n];\n```\n\n----------------------------------------\n\nTITLE: Fetching Account Workspace Data using Account API in TSX\nDESCRIPTION: Illustrates retrieving the workspace data for the current user's personal account using the `getAccountWorkspace` method of the initialized Account API. This method requires a valid API instance created with `createAccountsApi`.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/custom_analytics_provider_google_analytics_provider_posthog_analytics_provider_36.md#2025-04-22_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\nconst api = createAccountsApi(client);\nconst workspace = await api.getAccountWorkspace();\n```\n\n----------------------------------------\n\nTITLE: Customizing Tailwind CSS Color Palette\nDESCRIPTION: Example of changing the primary color to indigo and dark mode background to zinc in a Makerkit project's Tailwind configuration.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/translations_updating_latest_version_tutorials_87.md#2025-04-22_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nconst colors = require('tailwindcss/colors');\n\nextend: {\n  colors: {\n    dark: {\n      ...colors.zinc,\n      DEFAULT: colors.zinc[950],\n      foreground: colors.zinc[100],\n    },\n    primary: {\n      DEFAULT: 'hsl(var(--primary))',\n      foreground: 'hsl(var(--primary-foreground))',\n      ...colors.indigo,\n    }\n  },\n},\n```\n\n----------------------------------------\n\nTITLE: Setting Stripe Checkout Mode for One-Time Payments\nDESCRIPTION: Configuration for enabling one-time payments in Stripe Checkout by modifying the payment mode and removing subscription data.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_one_time_payments_stripe_webhooks_payments_35.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst mode: Stripe.Checkout.SessionCreateParams.Mode = 'payment';\n\nreturn stripe.checkout.sessions.create({\n  mode,\n  ui_mode: uiMode,\n  customer,\n  line_items: [lineItem],\n  client_reference_id: clientReferenceId.toString(),\n  subscription_data: subscriptionData,\n  customer_email: params.customerEmail,\n  ...urls,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Dockerfile for Remix Supabase Turbo Kit Deployment\nDESCRIPTION: Multi-stage Dockerfile for building and deploying the Remix Supabase Turbo Kit. The first stage builds the application with all necessary environment variables, while the second stage creates a production-ready image with minimal dependencies.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/configuring_supabase_database_webhooks_fly_production_environment_variables_95.md#2025-04-22_snippet_2\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\n\n# Stage 1: Builder\nARG NODE_VERSION=20.10.0\nFROM node:${NODE_VERSION}-slim AS builder\n\n# Set the working directory in the container\nWORKDIR /app\n\n# Install packages needed to build node modules\nRUN apt-get update -qq && \\\n    apt-get install -y python-is-python3 pkg-config build-essential\n\n# Install pnpm\nRUN npm install -g pnpm\n\n# Copy workspace files\nCOPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./\n\n# Install dependencies for the entire workspace\nRUN pnpm install\n\n# Change working directory to web app\nWORKDIR /app/apps/web\n\n# Copy all files\nCOPY . .\n\n# Install dependencies for the web app\nRUN pnpm install\n\n# Define build arguments\nARG NODE_ENV\nARG VITE_SITE_URL\nARG VITE_PRODUCT_NAME\nARG VITE_SITE_TITLE\nARG VITE_SITE_DESCRIPTION\nARG VITE_DEFAULT_THEME_MODE\nARG VITE_DEFAULT_LOCALE\nARG VITE_AUTH_PASSWORD\nARG VITE_AUTH_MAGIC_LINK\nARG CONTACT_EMAIL\nARG VITE_ENABLE_THEME_TOGGLE\nARG VITE_ENABLE_PERSONAL_ACCOUNT_DELETION\nARG VITE_ENABLE_PERSONAL_ACCOUNT_BILLING\nARG VITE_ENABLE_TEAM_ACCOUNTS\nARG VITE_ENABLE_TEAM_ACCOUNT_DELETION\nARG VITE_ENABLE_TEAM_ACCOUNTS_BILLING\nARG VITE_ENABLE_TEAM_ACCOUNTS_CREATION\nARG VITE_ENABLE_NOTIFICATIONS\nARG VITE_REALTIME_NOTIFICATIONS\nARG VITE_SUPABASE_URL\nARG VITE_SUPABASE_ANON_KEY\nARG SUPABASE_SERVICE_ROLE_KEY\nARG VITE_BILLING_PROVIDER\nARG VITE_STRIPE_PUBLISHABLE_KEY\nARG STRIPE_SECRET_KEY\nARG STRIPE_WEBHOOK_SECRET\nARG VITE_CMS_CLIENT\nARG VITE_KEYSTATIC_CONTENT_PATH\nARG VITE_LOCALES_PATH\nARG MAILER_PROVIDER\nARG EMAIL_SENDER\nARG EMAIL_HOST\nARG EMAIL_PORT\nARG EMAIL_USER\nARG EMAIL_PASSWORD\nARG EMAIL_TLS\nARG GADGET_SECRET_KEY\nARG VITE_TEAM_NAVIGATION_STYLE\nARG VITE_USER_NAVIGATION_STYLE\nARG VITE_THEME_COLOR\nARG VITE_THEME_COLOR_DARK\nARG SIGN_IN_PATH\nARG SIGN_UP_PATH\nARG TEAM_ACCOUNTS_HOME_PATH\nARG INVITATION_PAGE_PATH\nARG VITE_DISPLAY_TERMS_AND_CONDITIONS_CHECKBOX\n\n# Set environment variables\nENV NODE_ENV=${NODE_ENV}\nENV VITE_SITE_URL=${VITE_SITE_URL}\nENV VITE_PRODUCT_NAME=${VITE_PRODUCT_NAME}\nENV VITE_SITE_TITLE=${VITE_SITE_TITLE}\nENV VITE_SITE_DESCRIPTION=${VITE_SITE_DESCRIPTION}\nENV VITE_DEFAULT_THEME_MODE=${VITE_DEFAULT_THEME_MODE}\nENV VITE_DEFAULT_LOCALE=${VITE_DEFAULT_LOCALE}\nENV VITE_AUTH_PASSWORD=${VITE_AUTH_PASSWORD}\nENV VITE_AUTH_MAGIC_LINK=${VITE_AUTH_MAGIC_LINK}\nENV CONTACT_EMAIL=${CONTACT_EMAIL}\nENV VITE_ENABLE_THEME_TOGGLE=${VITE_ENABLE_THEME_TOGGLE}\nENV VITE_ENABLE_PERSONAL_ACCOUNT_DELETION=${VITE_ENABLE_PERSONAL_ACCOUNT_DELETION}\nENV VITE_ENABLE_PERSONAL_ACCOUNT_BILLING=${VITE_ENABLE_PERSONAL_ACCOUNT_BILLING}\nENV VITE_ENABLE_TEAM_ACCOUNTS=${VITE_ENABLE_TEAM_ACCOUNTS}\nENV VITE_ENABLE_TEAM_ACCOUNT_DELETION=${VITE_ENABLE_TEAM_ACCOUNT_DELETION}\nENV VITE_ENABLE_TEAM_ACCOUNTS_BILLING=${VITE_ENABLE_TEAM_ACCOUNTS_BILLING}\nENV VITE_ENABLE_TEAM_ACCOUNTS_CREATION=${VITE_ENABLE_TEAM_ACCOUNTS_CREATION}\nENV VITE_ENABLE_NOTIFICATIONS=${VITE_ENABLE_NOTIFICATIONS}\nENV VITE_REALTIME_NOTIFICATIONS=${VITE_REALTIME_NOTIFICATIONS}\nENV VITE_SUPABASE_URL=${VITE_SUPABASE_URL}\nENV VITE_SUPABASE_ANON_KEY=${VITE_SUPABASE_ANON_KEY}\nENV SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}\nENV VITE_BILLING_PROVIDER=${VITE_BILLING_PROVIDER}\nENV VITE_STRIPE_PUBLISHABLE_KEY=${VITE_STRIPE_PUBLISHABLE_KEY}\nENV STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}\nENV STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}\nENV VITE_CMS_CLIENT=${VITE_CMS_CLIENT}\nENV VITE_KEYSTATIC_CONTENT_PATH=${VITE_KEYSTATIC_CONTENT_PATH}\nENV VITE_LOCALES_PATH=${VITE_LOCALES_PATH}\nENV MAILER_PROVIDER=${MAILER_PROVIDER}\nENV EMAIL_SENDER=${EMAIL_SENDER}\nENV EMAIL_HOST=${EMAIL_HOST}\nENV EMAIL_PORT=${EMAIL_PORT}\nENV EMAIL_USER=${EMAIL_USER}\nENV EMAIL_PASSWORD=${EMAIL_PASSWORD}\nENV EMAIL_TLS=${EMAIL_TLS}\nENV GADGET_SECRET_KEY=${GADGET_SECRET_KEY}\nENV VITE_TEAM_NAVIGATION_STYLE=${VITE_TEAM_NAVIGATION_STYLE}\nENV VITE_USER_NAVIGATION_STYLE=${VITE_USER_NAVIGATION_STYLE}\nENV VITE_THEME_COLOR=${VITE_THEME_COLOR}\nENV VITE_THEME_COLOR_DARK=${VITE_THEME_COLOR_DARK}\nENV SIGN_IN_PATH=${SIGN_IN_PATH}\nENV SIGN_UP_PATH=${SIGN_UP_PATH}\nENV TEAM_ACCOUNTS_HOME_PATH=${TEAM_ACCOUNTS_HOME_PATH}\nENV INVITATION_PAGE_PATH=${INVITATION_PAGE_PATH}\nENV VITE_DISPLAY_TERMS_AND_CONDITIONS_CHECKBOX=${VITE_DISPLAY_TERMS_AND_CONDITIONS_CHECKBOX}\n\n# Build the web app\nRUN pnpm run build\n\n# Stage 2: Runner\nFROM node:${NODE_VERSION}-slim AS runner\n\n# Set the working directory in the container\nWORKDIR /app\n\n# Copy built application from the builder stage\nCOPY --from=builder /app/apps/web /app\n\n# Install pnpm in the final stage to ensure it's available for runtime\nRUN npm install -g pnpm\nRUN pnpm install --prod\n\n# Expose the port the app runs on\nEXPOSE 8080\n```\n\n----------------------------------------\n\nTITLE: Nested Route Configuration Example\nDESCRIPTION: Shows how to configure nested navigation routes with multiple levels of children for a store dashboard interface.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stepper_components_application_configuration_41.md#2025-04-22_snippet_27\n\nLANGUAGE: tsx\nCODE:\n```\nconst routes = [{\n  label: 'Your Store',\n  children: [\n    {\n      label: 'Dashboard',\n      path: '/dashboard',\n      Icon: <DashboardIcon className={iconClasses} />,\n      children: [\n        {\n          label: 'Orders',\n          path: '/orders',\n          Icon: <ShoppingCartIcon className={iconClasses} />,\n        },\n        {\n          label: 'Inventory',\n          path: '/inventory',\n          Icon: <InventoryIcon className={iconClasses} />,\n        },\n      ]\n    },\n  ]\n}];\n```\n\n----------------------------------------\n\nTITLE: Installing Feedback Popup Plugin via CLI\nDESCRIPTION: Command to install the Feedback Popup plugin using the Makerkit CLI. This method provides an interactive installation process.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_one_time_payments_stripe_webhooks_payments_11.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nnpx @makerkit/cli@latest plugins install\n```\n\n----------------------------------------\n\nTITLE: Validating Environment Variables with Turbo\nDESCRIPTION: Command to validate generated environment variables\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/deploy_production_introduction_5.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nturbo gen validate-env\n```\n\n----------------------------------------\n\nTITLE: Implementing Remix Action Handler for Task Operations\nDESCRIPTION: Defines the action handler for creating, updating, and deleting tasks using Supabase client. Handles different HTTP methods and returns JSON responses.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/supabase_data_fetching_supabase_data_writing_tailwind_css_86.md#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nexport async function action(args: ActionArgs) {\n  const client = getSupabaseServerClient(args.request);\n  const body = await args.request.json();\n\n  const ok = () => json({ success: true });\n\n  switch (args.request.method) {\n    case 'POST':\n      return createTask(client, body).then(ok);\n\n    case 'DELETE':\n      return deleteTask(client, body).then(ok);\n\n    case 'PUT':\n      return updateTask(client, body).then(ok);\n  }\n\n  return throwNotFoundException();\n}\n```\n\n----------------------------------------\n\nTITLE: Example Loader Demonstrating Return Type Inference (TypeScript)\nDESCRIPTION: A simple loader example highlighting how TypeScript and React Router infer the structure and types of the data returned by the loader function (`{ title: string, data: number[] }`) without explicit type annotations on the return value itself.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/creating_your_own_cms_client_keystatic_wordpress_62.md#2025-04-22_snippet_37\n\nLANGUAGE: tsx\nCODE:\n```\nexport const loader = async (args: Route.LoaderArgs) => {\n  return {\n    title: \"My Page\",\n    data: [1, 2, 3]\n  };\n};\n\n```\n\n----------------------------------------\n\nTITLE: Client Component Team Workspace Usage\nDESCRIPTION: Example of accessing team workspace data in client components\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/llms_migration_from_makerkit_v1_navigating_codebase_49.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\nimport { useTeamAccountWorkspace } from '@kit/team-accounts/hooks/use-team-account-workspace';\n\nexport default function SomeComponent() {\n  const { account, user, accounts } = useTeamAccountWorkspace();\n  // use account, user, and accounts\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Stripe Billing Tests in GitHub Actions (Bash)\nDESCRIPTION: Set the `ENABLE_BILLING_TESTS` environment variable to `true` in the GitHub Actions workflow to run Stripe billing tests. Requires Stripe secrets to be configured in GitHub Actions.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/code_health_common_commands_conventions_48.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nENABLE_BILLING_TESTS=true\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Role with useUserRole Hook in React\nDESCRIPTION: This snippet demonstrates how to get the current user's role within the organization using the useUserRole hook in a React component. This hook is useful for implementing role-based access control in the frontend.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/call_api_routes_from_client_csrf_token_guarding_api_routes_7.md#2025-04-22_snippet_29\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useUserRole } from '~/core/hooks/use-user-role';\n\nconst role = useUserRole();\n```\n\n----------------------------------------\n\nTITLE: Pushing Local Database Migrations to Remote Supabase Instance\nDESCRIPTION: This command utilizes the Supabase CLI to push local database schema migrations to the linked remote Supabase instance. This action ensures that the database schema in the production environment matches the structure required by the application, typically defined locally.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/development_authentication_emails_email_configuration_94.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nsupabase db push\n```\n\n----------------------------------------\n\nTITLE: Using the SendMessageInput Component in React\nDESCRIPTION: This snippet demonstrates how to use the `SendMessageInput` component within a parent component. It passes the `ticketId` as a prop and provides the `appendMessage` function as a callback for the `onMessageSent` event, likely to update the UI when a message is successfully sent.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/data_fetching_3.md#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<SendMessageInput\n  ticketId={props.ticketId}\n  onMessageSent={appendMessage}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using the Analytics Provider in Application Code\nDESCRIPTION: Example of how to use the analytics provider to identify users and track events in application code.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/custom_analytics_provider_google_analytics_provider_posthog_analytics_provider_36.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { analytics } from '@kit/analytics';\n\nvoid analytics.identify('user123', { name: 'John Doe' });\nvoid analytics.trackEvent('Button Clicked', { buttonName: 'Submit' });\n```\n\n----------------------------------------\n\nTITLE: Running Stripe Webhook Listener for Local Development\nDESCRIPTION: This snippet shows the command to run a Stripe webhook listener using pnpm, allowing developers to receive Stripe events locally during development for testing billing functionality.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/paddle_per_seat_billing_stripe_90.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm run stripe:listen\n```\n\n----------------------------------------\n\nTITLE: Project Setup - Change Directory and Install Node Modules\nDESCRIPTION: Navigates to the local project directory and installs Node.js dependencies via npm. Requires Node.js and npm to be installed. 'cd tasks-app' changes to the newly cloned directory and 'npm i' installs all required modules from package.json. Input: terminal commands, Output: working npm project directory.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/initializing_project_introduction_marketing_site_pages_14.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd tasks-app\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Implementing Firestore Security Rules for Organization Access\nDESCRIPTION: Defines functions to check organization subscription status and plan type, and applies these checks to Firestore collection access rules.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/migrations_extending_organizations_organization_hooks_10.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getOrganizationSubscription() {\n  let organization = getOrganization(organizationId);\n\n  return organization.subscription;\n}\n\nfunction isPayingOrganization(subscription) {\n  return subscription != null && (subscription.status == 'paid' || subscription.status == 'trialing');\n}\n\nfunction isProPlan(subscription) {\n  let organization = getOrganization(organizationId);\n\n  return subscription.stripePriceId == 'pro-plan-id';\n}\n\nfunction canWriteToCollection(organizationId) {\n  let subscription = getOrganizationSubscription();\n\n  return isPayingOrganization(subscription) && isProPlan(subscription);\n}\n\nmatch /organizations/{organizationId} {\n  match /tasks/{task} {\n    allow create: canWriteToCollection(organizationId);\n    allow list: if userIsMemberByOrganizationId(organizationId);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Theme Colors in Tailwind CSS v4\nDESCRIPTION: Updated theme configuration for Tailwind CSS v4 using the hsl function. This example shows how to set custom theme colors, including light and dark mode variants.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/running_project_technical_details_update_nextjs15_50.md#2025-04-22_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n@layer base {\n  :root {\n    --background: hsl(0 0% 100%);\n    --foreground: hsl(224 71.4% 4.1%);\n    --card: hsl(0 0% 100%);\n    --card-foreground: hsl(224 71.4% 4.1%);\n    --popover: hsl(0 0% 100%);\n    --popover-foreground: hsl(224 71.4% 4.1%);\n    --primary: hsl(220.9 39.3% 11%);\n    --primary-foreground: hsl(210 20% 98%);\n    --secondary: hsl(220 14.3% 95.9%);\n    --secondary-foreground: hsl(220.9 39.3% 11%);\n    --muted: hsl(220 14.3% 95.9%);\n    --muted-foreground: hsl(220 8.9% 46.1%);\n    --accent: hsl(220 14.3% 95.9%);\n    --accent-foreground: hsl(220.9 39.3% 11%);\n    --destructive: hsl(0 84.2% 60.2%);\n    --destructive-foreground: hsl(210 20% 98%);\n    --border: hsl(214.3 31.8% 94.4%);\n    --input: hsl(214.3 31.8% 91.4%);\n    --ring: hsl(224 71.4% 4.1%);\n    --radius: 0.5rem;\n\n    --chart-1: hsl(12 76% 61%);\n    --chart-2: hsl(173 58% 39%);\n    --chart-3: hsl(197 37% 24%);\n    --chart-4: hsl(43 74% 66%);\n    --chart-5: hsl(27 87% 67%);\n\n    --sidebar-background: hsl(0 0% 98%);\n    --sidebar-foreground: hsl(240 5.3% 26.1%);\n    --sidebar-primary: hsl(240 5.9% 10%);\n    --sidebar-primary-foreground: hsl(0 0% 98%);\n    --sidebar-accent: hsl(240 4.8% 95.9%);\n    --sidebar-accent-foreground: hsl(240 5.9% 10%);\n    --sidebar-border: hsl(220 13% 91%);\n    --sidebar-ring: hsl(217.2 91.2% 59.8%);\n  }\n\n  .dark {\n    --background: hsl(224 71.4% 4.1%);\n    --foreground: hsl(210 20% 98%);\n    --card: hsl(224 71.4% 4.1%);\n    --card-foreground: hsl(210 20% 98%);\n    --popover: hsl(224 71.4% 4.1%);\n    --popover-foreground: hsl(210 20% 98%);\n    --primary: hsl(210 20% 98%);\n    --primary-foreground: hsl(220.9 39.3% 11%);\n    --secondary: hsl(215 27.9% 13%);\n    --secondary-foreground: hsl(210 20% 98%);\n    --muted: hsl(215 27.9% 13%);\n    --muted-foreground: hsl(217.9 10.6% 64.9%);\n    --accent: hsl(215 27.9% 13%);\n    --accent-foreground: hsl(210 20% 98%);\n    --destructive: hsl(0 62.8% 30.6%);\n    --destructive-foreground: hsl(210 20% 98%);\n    --border: hsl(215 27.9% 13%);\n    --input: hsl(215 27.9% 13%);\n    --ring: hsl(216 12.2% 83.9%);\n\n    --chart-1: hsl(220 70% 50%);\n    --chart-2: hsl(160 60% 45%);\n    --chart-3: hsl(30 80% 55%);\n    --chart-4: hsl(280 65% 60%);\n    --chart-5: hsl(340 75% 55%);\n\n    --sidebar-background: hsl(224 71.4% 4.1%);\n    --sidebar-foreground: hsl(240 4.8% 95.9%);\n    --sidebar-primary: hsl(224.3 76.3% 48%);\n    --sidebar-primary-foreground: hsl(0 0% 100%);\n    --sidebar-accent: hsl(215 27.9% 13%);\n    --sidebar-accent-foreground: hsl(240 4.8% 95.9%);\n    --sidebar-border: hsl(240 3.7% 15.9%);\n    --sidebar-ring: hsl(217.2 91.2% 59.8%);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Vercel React Router Package\nDESCRIPTION: Installs the @vercel/react-router package to enable Vercel-specific optimizations for the React Router setup in the web application.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/emails_authentication_checklist_65.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npnpm add --filter web --save-dev \"@vercel/react-router\"\n```\n\n----------------------------------------\n\nTITLE: Implementing FeedbackPopupContainer with Icon Button in Next.js\nDESCRIPTION: This code shows how to use the FeedbackPopupContainer component with an icon button using HeroIcons in a Next.js component, providing a more visual feedback trigger option.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_one_time_payments_stripe_webhooks_payments_11.md#2025-04-22_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ChatBubbleLeftIcon } from '@heroicons/react/24/outline';\nimport { FeedbackPopupContainer } from '~/plugins/feedback-popup/FeedbackPopup';\n\nexport default function Component() {\n  return (\n    <>\n      <FeedbackPopupContainer>\n        <Button size=\"icon\" variant='ghost'>\n          <ChatBubbleLeftIcon className={'h-6'} />\n        </Button>\n      </FeedbackPopupContainer>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Subscriptions Table Schema in Supabase\nDESCRIPTION: SQL schema for storing Stripe subscription data including price, status, currency, and various time-related fields for subscription period and trial management.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/translations_updating_latest_version_tutorials_28.md#2025-04-22_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\ncreate table subscriptions (\n  id text not null primary key,\n  price_id text not null,\n  status subscription_status not null,\n  currency text,\n  interval text,\n  interval_count int,\n  created_at timestamptz,\n  period_starts_at timestamptz,\n  period_ends_at timestamptz,\n  trial_starts_at timestamptz,\n  trial_ends_at timestamptz\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Chatbot Component\nDESCRIPTION: Example of importing and using the Chatbot component in a React application.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/sentry_monitoring_notifications_configuration_51.md#2025-04-22_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Chatbot } from '@kit/chatbot';\n\n<Chatbot sitename={'Makerkit'} />\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Firebase Function in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create a basic Firebase Function using TypeScript. It defines a 'helloWorld' function that responds to HTTP requests with a JSON object.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/third_party_auth_providers_authentication_blog_3.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { https } from 'firebase-functions';\n\nexport const helloWorld = https.onRequest((req, res) => {\n  res.send({ Hello: `World` })\n});\n```\n\n----------------------------------------\n\nTITLE: Integrating Cookie Banner Component in React Application\nDESCRIPTION: Demonstrates how to implement a CookieBanner component for managing cookie consent in a React application. It explains dynamic import for the component with SSR disabled and describes its features such as responsive design, internationalization, and animated entrance using Tailwind CSS.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/app_breadcrumbs_bordered_navigation_menu_card_button_39.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport dynamic from 'next/dynamic';\n\nconst CookieBanner = dynamic(() => import('@kit/ui/cookie-banner').then(m => m.CookieBanner), {\n  ssr: false\n});\n\nfunction App() {\n  return (\n    <div>\n      {/* Your app content */}\n      <CookieBanner />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using AppCheck Token Hook in React\nDESCRIPTION: Example of using the useGetAppCheckToken hook to generate an App Check token for API requests in a MakerKit application.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/setting_up_firebase_custom_fetch_fetching_data_firestore_70.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nconst getAppCheckToken = useGetAppCheckToken();\nconst appCheckToken = await getAppCheckToken();\n\nconsole.log(appCheckToken) // token\n```\n\n----------------------------------------\n\nTITLE: Configuring Umami Service in Analytics Manager (TypeScript)\nDESCRIPTION: Updates `packages/analytics/src/index.ts` to integrate the Umami analytics service. It imports `createUmamiAnalyticsService` from the installed `@kit/umami` package and adds it to the `providers` object within the `createAnalyticsManager` configuration, mapping it to the key 'umami'.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/google_analytics_provider_posthog_analytics_provider_umami_analytics_provider_88.md#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n {% title=\"packages/analytics/src/index.ts\" %}\nimport { createUmamiAnalyticsService } from '@kit/umami';\n\nimport { createAnalyticsManager } from './analytics-manager';\nimport type { AnalyticsManager } from './types';\n\nexport const analytics: AnalyticsManager = createAnalyticsManager({\n    providers: {\n        umami: createUmamiAnalyticsService,\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Production Build Command\nDESCRIPTION: Command to build the Remix Supabase application for production deployment.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/uploading_data_to_storage_writing_data_to_supabase_data_fetching_77.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpm build\n```\n\n----------------------------------------\n\nTITLE: Using Supabase Server Admin Client (TypeScript)\nDESCRIPTION: This snippet shows how to use the Supabase Server Admin client with elevated privileges using the getSupabaseServerAdminClient function. It should only be used in server environments and exceptional cases.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/realtime_updates_server_components_7.md#2025-04-22_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getSupabaseServerAdminClient } from '@kit/supabase/server-admin-client';\n\nexport async function myServerAction() {\n  const supabase = getSupabaseServerAdminClient();\n\n  const { data, error } = await supabase.from('users').select('*')\n\n  return {\n    success: true,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Billing Gateway Service in React\nDESCRIPTION: Shows how to instantiate the billing gateway service for payment processing using the createBillingGatewayService function.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/api_billing_api_billing_schema_58.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createBillingGatewayService } from '@kit/billing-gateway';\n\nconst service = createBillingGatewayService('stripe');\n```\n\n----------------------------------------\n\nTITLE: Creating Storage Bucket for User Avatars\nDESCRIPTION: SQL command to create a public storage bucket for user avatars in Supabase storage.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/translations_updating_latest_version_tutorials_28.md#2025-04-22_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\ninsert into storage.buckets (id, name, PUBLIC)\n  values ('avatars', 'avatars', true);\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Claims JSON Structure for Super Admin Role\nDESCRIPTION: The JSON structure required for setting up super admin permissions via custom claims in Firebase. This simple object sets the 'role' property to 'super-admin' to grant full administrative access.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/adding_admin_users_admin_overview_admin_1.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"role\": \"super-admin\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic API Route in Remix\nDESCRIPTION: Example of creating a simple API route in a Remix application that returns a JSON response to a GET request. This demonstrates the pattern for implementing RESTful endpoints in the Remix Supabase SaaS Kit.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/navigating_codebase_running_the_application_technical_details_78.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { json } from \"@remix-run/node\";\n\nexport async function loader() {\n  return json({ text: 'Hello' });\n}\n```\n\n----------------------------------------\n\nTITLE: Emitting App Events in React Components\nDESCRIPTION: TypeScript example showing how to emit events using the useAppEvents hook in a React component. Demonstrates basic event emission for user signup tracking.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_one_time_payments_stripe_webhooks_payments_35.md#2025-04-22_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useAppEvents } from '@kit/shared/events';\n\nfunction SomeComponent() {\n  const { emit } = useAppEvents();\n\n  const handleSignUp = (userId: string) => {\n    emit({ type: 'user.signedUp', payload: { userId } });\n  };\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Emitting App Events in TypeScript Components\nDESCRIPTION: Example showing how to emit events using the useAppEvents hook in a React component.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/translations_updating_latest_version_tutorials_87.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useAppEvents } from '@kit/shared/events';\n\nfunction SomeComponent() {\n  const { emit } = useAppEvents();\n\n  const handleSignUp = (userId: string) => {\n    emit({ type: 'user.signedUp', payload: { userId } });\n  };\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Full Tasks Page in React with Remix\nDESCRIPTION: This is the complete implementation of the Tasks page, including imports, loader function for data fetching, action function for mutations, and the main component rendering the page layout and content.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/supabase_data_fetching_supabase_data_writing_tailwind_css_86.md#2025-04-22_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { ActionArgs, MetaFunction } from '@remix-run/node';\n\nimport { json } from '@remix-run/node';\nimport { Form, useFetcher, useLoaderData } from '@remix-run/react';\nimport type { LoaderArgs } from '@remix-run/server-runtime';\n\nimport { useCallback } from \"react\";\n\nimport {\n  PlusCircleIcon,\n  RectangleStackIcon,\n} from '@heroicons/react/24/outline';\n\nimport { Trans } from 'react-i18next';\n\nimport AppHeader from '~/components/AppHeader';\nimport AppContainer from '~/components/AppContainer';\nimport getSupabaseServerClient from '~/core/supabase/server-client';\nimport { getTasks } from '~/lib/tasks/queries';\nimport getCurrentOrganization from '~/lib/server/organizations/get-current-organization';\n\nimport If from '~/core/ui/If';\nimport Heading from '~/core/ui/Heading';\nimport Button from '~/core/ui/Button';\nimport Modal from '~/core/ui/Modal';\nimport TextField from '~/core/ui/TextField';\n\nimport type Task from '~/lib/tasks/types/task';\nimport TasksTable from '~/components/tasks/TasksTable';\nimport TaskForm from '~/components/tasks/TaskForm';\n\nimport { createTask, deleteTask, updateTask } from '~/lib/tasks/mutations';\nimport { throwNotFoundException } from '~/core/http-exceptions';\n\nexport const meta: MetaFunction = () => {\n  return [\n    {\n      title: 'Tasks',\n    },\n  ];\n};\n\nexport async function loader(args: LoaderArgs) {\n  const request = args.request;\n\n  const url = new URL(request.url);\n  const searchParams = url.searchParams;\n  const page = searchParams.get('page') ?? '1';\n  const query = searchParams.get('query') ?? '';\n\n  const client = getSupabaseServerClient(request);\n  const data = await getCurrentOrganization(client);\n\n  const pageSize = 8;\n  const pageIndex = Number(page) - 1;\n  const organizationId = data?.organization.id;\n\n  if (!organizationId) {\n    return new Response('Not found', {\n      status: 404,\n    });\n  }\n\n  const {\n    data: tasks,\n    count,\n    error,\n  } = await getTasks(client, {\n    organizationId: data.organization.id,\n    pageIndex,\n    query,\n  });\n\n  if (error) {\n    console.error(error);\n\n    return json({\n      tasks: [],\n      count: 0,\n      pageCount: 0,\n      query,\n      pageIndex,\n      pageSize,\n    });\n  }\n\n  const pageCount = count ? Math.ceil(count / pageSize) : 0;\n\n  return json({\n    tasks,\n    count,\n    query,\n    pageCount,\n    pageIndex,\n    pageSize,\n  });\n}\n\nfunction TasksPage() {\n  const { tasks, count, pageCount, query, pageIndex, pageSize } =\n    useLoaderData<typeof loader>();\n\n  return (\n    <>\n      <AppHeader>\n        <span className={'flex space-x-2'}>\n          <RectangleStackIcon className=\"w-6\" />\n\n          <span>\n            <Trans i18nKey={'common:tasksTabLabel'} />\n          </span>\n        </span>\n      </AppHeader>\n\n      <AppContainer>\n        <If condition={!count}>\n          <TasksEmptyState />\n        </If>\n\n        <TasksTableContainer\n          pageSize={pageSize}\n          pageIndex={pageIndex}\n          pageCount={pageCount}\n          tasks={tasks}\n          query={query}\n        />\n      </AppContainer>\n    </>\n  );\n}\n\nexport default TasksPage;\n\nfunction TasksTableContainer({\n  tasks,\n  pageCount,\n  pageIndex,\n  pageSize,\n  query,\n}: React.PropsWithChildren<{\n  tasks: Task[];\n  pageCount: number;\n  pageIndex: number;\n  pageSize: number;\n  query?: string;\n}>) {\n  return (\n    <div className={'flex flex-col space-y-4'}>\n      <div className={'flex space-x-4 justify-between items-center'}>\n        <div className={'flex'}>\n          <CreateTaskModal>\n            <Button color={'transparent'}>\n              <span className={'flex space-x-2 items-center'}>\n                <PlusCircleIcon className={'w-4'} />\n\n                <span>New Task</span>\n              </span>\n            </Button>\n          </CreateTaskModal>\n        </div>\n\n        <Form className={'w-full max-w-sm'} method={'GET'}>\n          <TextField.Input\n            defaultValue={query}\n            name={'query'}\n            className={'w-full'}\n            placeholder={'Search for task...'}\n          />\n        </Form>\n      </div>\n\n      <TasksTable\n        pageSize={pageSize}\n        pageIndex={pageIndex}\n        pageCount={pageCount}\n        tasks={tasks}\n      />\n    </div>\n  );\n}\n\nfunction TasksEmptyState() {\n  return (\n    <div className={'flex flex-col space-y-8 p-4'}>\n      <div className={'flex flex-col'}>\n        <Heading type={2}>\n          <span className={'font-semibold'}>\n            Hey, it looks like you don&apos;t have any tasks yet... 🤔\n          </span>\n        </Heading>\n\n        <Heading type={4}>\n          Create your first task by clicking on the button below\n        </Heading>\n      </div>\n    </div>\n  );\n}\n\nfunction CreateTaskModal(props: React.PropsWithChildren) {\n  const fetcher = useFetcher();\n\n  const submitting = fetcher.state === 'submitting';\n\n  const onSubmit = useCallback(\n    (task: Omit<Task, 'id'>) => {\n      fetcher.submit(task, {\n        method: 'POST',\n        encType: 'application/json',\n      });\n    },\n    [fetcher],\n  );\n\n  return (\n    <Modal heading={`Create Task`} Trigger={props.children}>\n      <TaskForm onSubmit={onSubmit} submitting={submitting} />\n    </Modal>\n  );\n}\n\nexport async function action(args: ActionArgs) {\n  const client = getSupabaseServerClient(args.request);\n  const body = await args.request.json();\n\n  const ok = () => json({ success: true });\n\n  switch (args.request.method) {\n    case 'POST':\n      return createTask(client, body).then(ok);\n\n    case 'DELETE':\n      return deleteTask(client, body).then(ok);\n\n    case 'PUT':\n      return updateTask(client, body).then(ok);\n  }\n\n  return throwNotFoundException();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Stripe Products and Pricing Plans in TypeScript\nDESCRIPTION: Configuration object for defining Stripe product tiers (Basic, Pro, Premium) with their respective monthly and yearly plans. Each product includes features, pricing, trial periods, and optional properties like badges and recommendations.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/technical_details_going_to_production_overview_publish_firebase_security_rules_72.md#2025-04-22_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nstripe: {\n    products: [\n      {\n        name: 'Basic',\n        description: 'Description of your Basic plan',\n        badge: `Up to 20 users`,\n        features: [\n          'Basic Reporting',\n          'Up to 20 users',\n          '1GB for each user',\n          'Chat Support',\n        ],\n        plans: [\n          {\n            name: 'Monthly',\n            price: '$9',\n            stripePriceId: '<price_id>',\n            trialPeriodDays: 7,\n          },\n          {\n            name: 'Yearly',\n            price: '$90',\n            stripePriceId: 'basic-plan-yr',\n            trialPeriodDays: 7,\n          },\n        ],\n      },\n      {\n        name: 'Pro',\n        badge: `Most Popular`,\n        recommended: true,\n        description: 'Description of your Pro plan',\n        features: [\n          'Advanced Reporting',\n          'Up to 50 users',\n          '5GB for each user',\n          'Chat and Phone Support',\n        ],\n        plans: [\n          {\n            name: 'Monthly',\n            price: '$29',\n            stripePriceId: 'pro-plan-mth',\n            trialPeriodDays: 7,\n          },\n          {\n            name: 'Yearly',\n            price: '$200',\n            stripePriceId: 'pro-plan-yr',\n            trialPeriodDays: 7,\n          },\n        ],\n      },\n      {\n        name: 'Premium',\n        description: 'Description of your Premium plan',\n        badge: ``,\n        features: [\n          'Advanced Reporting',\n          'Unlimited users',\n          '50GB for each user',\n          'Account Manager',\n        ],\n        plans: [\n          {\n            name: '',\n            price: 'Contact us',\n            stripePriceId: '',\n            trialPeriodDays: 7,\n            label: `Contact us`,\n            href: `/contact`,\n          },\n        ],\n      },\n    ],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Billing Customer ID using Account API in TSX\nDESCRIPTION: Illustrates fetching the billing customer ID associated with a specific user account using the `getCustomerId` method. This method requires the `accountId` and returns the corresponding customer ID used for billing purposes.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/custom_analytics_provider_google_analytics_provider_posthog_analytics_provider_36.md#2025-04-22_snippet_25\n\nLANGUAGE: tsx\nCODE:\n```\nconst api = createAccountsApi(client);\nconst customerId = await api.getCustomerId(accountId);\n```\n\n----------------------------------------\n\nTITLE: Starting Stripe Event Listener for Local Development\nDESCRIPTION: Command to run the Stripe event listener using npm scripts, enabling developers to receive Stripe webhook events on their local development environment.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/lemon_squeezy_metered_usage_one_off_payments_38.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\npnpm run stripe:listen\n```\n\n----------------------------------------\n\nTITLE: Tracking Events in Makerkit Analytics\nDESCRIPTION: Implementation of event tracking using the analytics.trackEvent method to record specific user actions.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/translations_updating_latest_version_tutorials_87.md#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nvoid analytics.trackEvent('Button Clicked', {\n  buttonName: 'Submit',\n  page: 'Sign Up',\n});\n```\n\n----------------------------------------\n\nTITLE: Building React Component Container with Data Fetching\nDESCRIPTION: React component using a custom hook to fetch and display events with proper loading and error states.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/translations_updating_latest_version_tutorials_28.md#2025-04-22_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useFetchEvents } from '~/lib/events/hooks/use-fetch-events';\nimport Alert from `~/core/ui/Alert`;\n\nconst EventsListContainer: React.FC = () => {\n  const { data: events, isLoading, error } = useFetchEvents();\n\n  if (isLoading) {\n    return <p>Loading Events...</p>\n  }\n\n  if (error) {\n    return (\n      <Alert type='error'>\n        Ops, we encountered an error!\n      </Alert>\n    );\n  }\n\n  return (\n    <div>\n      {events.map(event => {\n        return (\n          <div key={event.name}>\n            <p>{event.name}</p>\n            <p>{event.description}</p>;\n          </div>\n        );\n      })}\n    </div>\n  )\n};\n\nexport default EventsListContainer;\n```\n\n----------------------------------------\n\nTITLE: Configuring Favicons in Makerkit Layout Component using TypeScript and JSX\nDESCRIPTION: The snippet configures links to various favicon files in a Makerkit application's Layout component. These are used to update the favicon that appears in the browser tab. The relevant files should be placed in the designated directory.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/environment_variables_setup_project_configuration_set_up_emails_9.md#2025-04-22_snippet_4\n\nLANGUAGE: TSX\nCODE:\n```\n<link rel=\"shortcut icon\" href=\"/assets/images/favicon/favicon.ico\" />\n\n<link\n  rel=\"apple - touch - icon\"\n  sizes=\"144x144\"\n  href=\"/assets/images/favicon/apple-touch-icon.png\"\n/>\n\n<link\n  rel=\"icon\"\n  type=\"image/png\"\n  sizes=\"16x16\"\n  href=\"/assets/images/favicon/favicon-16x16.png\"\n/>\n\n<link\n  rel=\"icon\"\n  type=\"image/png\"\n  sizes=\"32x32\"\n  href=\"/assets/images/favicon/favicon-32x32.png\"\n/>\n\n<link rel=\"manifest\" href=\"/assets/images/favicon/site.webmanifest\" />\n\n<link\n  rel=\"mask-icon\"\n  href=\"/assets/images/favicon/safari-pinned-tab.svg\"\n  color=\"#000000\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using the Stepper Component in React\nDESCRIPTION: This snippet demonstrates how to import and use the Stepper component in a React application. It shows the basic usage with required props.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/multi_step_forms_page_stepper_91.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stepper } from '@kit/ui/stepper';\n\nfunction MyComponent() {\n  return (\n    <Stepper\n      steps={['Step 1', 'Step 2', 'Step 3']}\n      currentStep={1}\n      variant=\"default\"\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Marketing Page in Next.js\nDESCRIPTION: Example of creating a basic marketing page in Next.js using TypeScript. The page is created in the marketing directory and inherits the layout from the marketing layout file.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/marketing_pages_migrations_permissions_and_roles_45.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// apps/web/app/(marketing)/about/page.tsx\nexport default function AboutPage() {\n  return <div></div>\n}\n```\n\n----------------------------------------\n\nTITLE: Running Project Health Checks\nDESCRIPTION: Commands to perform type checking and linting after resolving conflicts and updating the project.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/supabase_client_clone_repository_common_commands_56.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npnpm run typecheck\npnpm run lint\n```\n\n----------------------------------------\n\nTITLE: Starting the Remix Development Server\nDESCRIPTION: This command uses pnpm to start the development server for the Remix web application located in `apps/web`. It enables live reloading and provides a local environment for development and testing.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/faq_functional_walkthrough_introduction_96.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n```bash\n# Start the development server\npnpm dev\n```\n```\n\n----------------------------------------\n\nTITLE: Starting Local Supabase Instance\nDESCRIPTION: Executes a pnpm script (`supabase:web:start`) designed to start the local Supabase instance required by the web application. This typically involves running Supabase services using Docker, which must be running beforehand.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/faq_functional_walkthrough_introduction_96.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n```bash\npnpm run supabase:web:start\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Makerkit Analytics Plugins via CLI\nDESCRIPTION: Uses the Makerkit CLI (`@makerkit/cli`) to install analytics plugins. The user will be prompted to select specific plugins like Google Analytics, PostHog, or Umami from a list.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/google_analytics_provider_posthog_analytics_provider_umami_analytics_provider_88.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @makerkit/cli@latest plugins install\n```\n\n----------------------------------------\n\nTITLE: Adding Translation String in Remix Supabase SaaS Kit (JSON)\nDESCRIPTION: This snippet shows how to add a new translation string to the common.json file and how to reference it in the application using the Trans component or useTranslation hook.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/branding_environment_variables_setup_project_configuration_80.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"new_translation_string\": \"This is a new translation string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Building Events List Container Component\nDESCRIPTION: React component that displays a list of events fetched using the useFetchEvents hook, with loading and error states.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/adding_admin_users_admin_overview_admin_1.md#2025-04-22_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useFetchEvents } from '~/lib/events/hooks/use-fetch-events';\nimport { Alert } from `~/core/ui/Alert`;\n\nconst EventsListContainer: React.FC = () => {\n  const { data: events, status } = useFetchEvents();\n\n  if (status === `loading`) {\n    return <p>Loading Events...</p>\n  }\n\n  if (status === `error`) {\n    return (\n      <Alert type='error'>\n        Ops, we encountered an error!\n      </Alert>\n    );\n  }\n\n  return (\n    <div>\n      {events.map(event => {\n        return (\n          <div key={event.name}>\n            <p>{event.name}</p>\n            <p>{event.description}</p>;\n          </div>\n        );\n      })}\n    </div>\n  )\n};\n\nexport default EventsListContainer;\n```\n\n----------------------------------------\n\nTITLE: Git Post-Merge Hook Script (Bash)\nDESCRIPTION: This script, intended for the '.git/hooks/post-merge' file, automatically runs 'pnpm i' after a successful Git merge (which includes pulling updates). This ensures project dependencies are kept up-to-date automatically.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/configuring_supabase_database_webhooks_fly_production_environment_variables_95.md#2025-04-22_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\npnpm i\n```\n\n----------------------------------------\n\nTITLE: Using Primary Color in React Component\nDESCRIPTION: This React component demonstrates how to use the primary color in a button component with both light and dark mode styling.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_one_time_payments_stripe_webhooks_payments_35.md#2025-04-22_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\n\nexport const PrimaryButton = () => {\n  return (\n    <button className=\"bg-primary text-white dark:bg-primary/10 dark:text-primary px-4 py-2 rounded\">\n      Click me\n    </button>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Event Types in TypeScript\nDESCRIPTION: Shows how to extend the default event types with custom events by creating an interface that extends ConsumerProvidedEventTypes.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/translations_updating_latest_version_tutorials_87.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ConsumerProvidedEventTypes } from '@kit/shared/events';\n\nexport interface MyAppEvents extends ConsumerProvidedEventTypes {\n  'feature.used': { featureName: string };\n  'subscription.changed': { newPlan: string };\n}\n```\n\n----------------------------------------\n\nTITLE: Submitting Task Creation Form via Server Action in React (TypeScript)\nDESCRIPTION: A form-based React component for task creation, TaskForm, that performs a POST by assigning the createTaskAction as the form action. It leverages CSRF protection via a hidden input and uses useCsrfToken to fetch the token. Expected inputs: text fields for task name, description, due date, and a hidden CSRF token. Outputs: Upon submit, invokes the backend mutation securely. Limitations: expects useCsrfToken and createTaskAction to be defined, and form element names to align with backend expectations.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/adding_app_pages_guarding_pages_updating_sidebar_menu_32.md#2025-04-22_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createTaskAction } from '~/lib/tasks/actions';\nimport useCsrfToken from '~/core/hooks/use-csrf-token';\n\nfunction TaskForm() {\n  const csrfToken = useCsrfToken();\n\n  return (\n    <form action={createTaskAction}>\n      <input type=\"text\" name=\"task.name\" />\n      <input type=\"text\" name=\"task.description\" />\n      <input type=\"date\" name=\"task.dueDate\" />\n      <input type=\"hidden\" name=\"csrfToken\" value={csrfToken} />\n      <button type=\"submit\">Create Task</button>\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Supabase Environment\nDESCRIPTION: Command to start the local Supabase environment using Docker and populate the database with seed data.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/navigating_codebase_running_the_application_technical_details_78.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run supabase:start\n```\n\n----------------------------------------\n\nTITLE: Plugin Installation Command\nDESCRIPTION: Bash command for installing plugins using the Makerkit CLI.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/technical_details_updating_codebase_installation_97.md#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nnpx @makerkit/cli@latest plugins install\n```\n\n----------------------------------------\n\nTITLE: Configuring URL for Password Reset in Supabase\nDESCRIPTION: URL path that needs to be added to Supabase Redirect URLs allow list to enable password reset functionality.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/text_editor_plugin_waitlist_plugin_plugins_98.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n<your-url>/password-reset\n```\n\n----------------------------------------\n\nTITLE: Baselime Environment Configuration\nDESCRIPTION: Environment variables setup for Baselime monitoring integration.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/running_project_technical_details_update_nextjs15_50.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nNEXT_PUBLIC_BASELIME_KEY=your_key\nNEXT_PUBLIC_MONITORING_PROVIDER=baselime\nENABLE_MONITORING_INSTRUMENTATION=true\nINSTRUMENTATION_SERVICE_NAME=your_service_name\n```\n\n----------------------------------------\n\nTITLE: Simple Next.js API Handler Returning a String (TypeScript/Next.js)\nDESCRIPTION: A minimal Next.js API route that returns 'Hello World' in the response. Useful as a starting point or sanity check for API infrastructure. Requires NextApiRequest and NextApiResponse types from Next.js.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/custom_fetch_fetching_data_firestore_making_api_requests_4.md#2025-04-22_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function handler(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n  return res.send(`Hello World`)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Supabase Database Webhook Secret for Remix SaaS Kit\nDESCRIPTION: Environment variable for the secret key used to authenticate Database Webhook requests between your server and Supabase instance. This secret is essential for securing the webhook communication.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/configuring_supabase_database_webhooks_fly_production_environment_variables_95.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nSUPABASE_DB_WEBHOOK_SECRET=**************************************************\n```\n\n----------------------------------------\n\nTITLE: Importing Generated Supabase Types for Type-safe Queries in TypeScript\nDESCRIPTION: This example shows how to import and use generated database types with the Supabase client for type-safe queries. It creates a typed version of the SupabaseClient that includes your database schema types.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/user_sdk_sdk_ci_tests_84.md#2025-04-22_snippet_25\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { SupabaseClient } from '@supabase/supabase-js';\nimport type { Database } from '../../database.types';\n\ntype Client = SupabaseClient<Database>;\n```\n\n----------------------------------------\n\nTITLE: Setting Supabase webhook secret environment variable\nDESCRIPTION: Example of setting the SUPABASE_DB_WEBHOOK_SECRET environment variable which is used to authenticate webhook requests from Supabase to your application.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/cloudflare_production_environment_variables_supabase_47.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nSUPABASE_DB_WEBHOOK_SECRET=**************************************************\n```\n\n----------------------------------------\n\nTITLE: Implementing Collapsible Component in React\nDESCRIPTION: A React component implementation of a collapsible section with toggle functionality. Uses state management to control the expanded/collapsed state and includes custom styling and animations.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/multi_step_forms_page_shadcn_40.md#2025-04-22_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\nimport * as React from 'react';\n\nimport { ChevronsUpDown } from 'lucide-react';\n\nimport { Button } from '@kit/ui/button';\nimport {\n  Collapsible,\n  CollapsibleContent,\n  CollapsibleTrigger,\n} from '@kit/ui/collapsible';\n\nexport default function CollapsibleDemo() {\n  const [isOpen, setIsOpen] = React.useState(false);\n\n  return (\n    <>\n      <Collapsible\n        open={isOpen}\n        onOpenChange={setIsOpen}\n        className=\"w-[350px] space-y-2\"\n      >\n        <div className=\"flex items-center justify-between space-x-4 px-4\">\n          <h4 className=\"text-sm font-semibold\">\n            @peduarte starred 3 repositories\n          </h4>\n\n          <CollapsibleTrigger asChild>\n            <Button variant=\"ghost\" size=\"sm\">\n              <ChevronsUpDown className=\"h-4 w-4\" />\n              <span className=\"sr-only\">Toggle</span>\n            </Button>\n          </CollapsibleTrigger>\n        </div>\n\n        <div className=\"rounded-md border px-4 py-2 font-mono text-sm shadow-sm\">\n          @radix-ui/primitives\n        </div>\n\n        <CollapsibleContent className=\"space-y-2\">\n          <div className=\"rounded-md border px-4 py-2 font-mono text-sm shadow-sm\">\n            @radix-ui/colors\n          </div>\n\n          <div className=\"rounded-md border px-4 py-2 font-mono text-sm shadow-sm\">\n            @stitches/react\n          </div>\n        </CollapsibleContent>\n      </Collapsible>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Pulling Makerkit Updates from Upstream\nDESCRIPTION: Command to update Makerkit to the latest version by pulling from the upstream main branch, followed by reinstalling packages with pnpm.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/running_project_technical_details_update_nextjs15_50.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit pull upstream main\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm i\n```\n\n----------------------------------------\n\nTITLE: Creating Ticket Limit Function and Trigger in PostgreSQL\nDESCRIPTION: Implementation of a trigger function to check ticket limits and a trigger that runs before ticket insertion. The function validates ticket creation against subscription limits.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/database_4.md#2025-04-22_snippet_20\n\nLANGUAGE: plpgsql\nCODE:\n```\ncreate or replace function public.get_remaining_tickets(target_account_id uuid)\nreturns int\nset search_path = ''\nas $$\ndeclare\n  subscription record;\n  ticket_count int;\n  max_tickets int;\nbegin\n  select *\n    into subscription\n    from public.get_subscription_details(target_account_id);\n\n  if subscription is null then\n    select count(*)\n      into ticket_count\n      from public.tickets\n      where public.tickets.account_id = target_account_id and\n      created_at >= now() - interval '30 days';\n\n    return 50 - ticket_count;\n  end if;\n\n  select max_tickets\n    into max_tickets\n    from public.plans\n    where variant_id = subscription.variant_id;\n\n  -- Unlimited tickets\n  if max_tickets = -1 then\n    return -1;\n  end if;\n\n  select count(*)\n    into ticket_count\n    from public.tickets\n    where public.tickets.account_id = target_account_id and\n    created_at >= subscription.period_starts_at and\n    created_at <= subscription.period_ends_at;\n\n  return max_tickets - ticket_count;\nend;\n$$ language plpgsql;\n```\n\n----------------------------------------\n\nTITLE: Creating Users Table Schema in Supabase\nDESCRIPTION: SQL schema for the users table that stores additional user information like display name and photo URL. Links to Supabase auth.users table via foreign key reference.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/translations_updating_latest_version_tutorials_28.md#2025-04-22_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\ncreate table users (\n  id uuid references auth.users not null primary key,\n  photo_url text,\n  display_name text\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Translation Strings in Next.js\nDESCRIPTION: Guides through adding a new translation string to `common.json` and using it via `Trans` component or `useTranslation` hook. Dependencies include `next-i18next` for translation functionality.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/environment_variables_setup_project_configuration_set_up_emails_9.md#2025-04-22_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"new_translation_string\": \"This is a new translation string\"\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\n<Trans i18nKey=\"common:new_translation_string\" />\n```\n\nLANGUAGE: tsx\nCODE:\n```\nconst { t } = useTranslation();\nconst newTranslationString = t('common:new_translation_string');\n```\n\n----------------------------------------\n\nTITLE: Deleting Documents with Firebase Admin SDK\nDESCRIPTION: Deletes a document from Firestore using the Admin SDK. This function can only be used in server environments such as API routes or getServerSideProps functions, as it requires a service account.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/reading_document_reading_documents_list_creating_document_8.md#2025-04-22_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport getRestFirestore from '~/core/firebase/admin/get-rest-firestore';\n\nasync function deleteTaskFromServer(task: {\n  id: string;\n}) {\n  const firestore = getRestFirestore();\n  const taskRef = firestore.collection(firestore, `tasks`).doc(task.id);\n\n  await taskRef.delete();\n\n  return task;\n}\n```\n\n----------------------------------------\n\nTITLE: Exploring Key Directories in Remix Supabase Turbo Project\nDESCRIPTION: Illustrates the high-level directory structure within the `apps/web` folder of the Remix Supabase Turbo starter kit. This structure organizes the main Remix application, components, configuration, libraries, content, styles, and Supabase specifics.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/faq_functional_walkthrough_introduction_96.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n```\n- apps\n---\n web\n---\n-- app\n---\n-- components\n---\n-- config\n---\n-- lib\n---\n-- content\n---\n-- styles\n---\n-- supabase\n```\n```\n\n----------------------------------------\n\nTITLE: If Component with Render Prop (User Profile) - React - JavaScript\nDESCRIPTION: Uses the render-prop pattern with the If component to extract and use the value of a user object within the rendered output. Inputs: user object. Outputs: renders UserProfile with dynamic username if user exists. Enables value-aware conditional rendering for enhanced flexibility.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/bordered_navigation_menu_card_button_cookie_banner_60.md#2025-04-22_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<If condition={user}>\n  {(user) => <UserProfile username={user.name} />}\n</If>\n```\n\n----------------------------------------\n\nTITLE: Using Select Property with ClientDataLoader\nDESCRIPTION: Demonstrates how to use the select property to fetch specific columns from a database table using ClientDataLoader component.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/ai_text_editor_cookie_banner_feedback_popup_24.md#2025-04-22_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ClientDataLoader } from '@makerkit/data-loader-supabase-nextjs';\n\n<ClientDataLoader\n  client={client}\n  table=\"organizations\"\n  select={['id', 'name']}\n/>\n```\n\n----------------------------------------\n\nTITLE: Extended Plan Configuration with Payment Mode\nDESCRIPTION: Adding a payment mode property to the plan configuration to specify whether it's a subscription or one-time payment.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_one_time_payments_stripe_webhooks_payments_11.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n{\n  name: 'Basic',\n  description: 'Unlimited applications and 2-hour onboarding session',\n  price: '$249 one off!',\n  stripePriceId: 'price_***********',\n  mode: 'payment'\n}\n```\n\n----------------------------------------\n\nTITLE: Querying a Single Task by ID from Supabase - TypeScript/React\nDESCRIPTION: Implements a function to fetch a single task by its numeric ID, mapping SQL fields to camelCase and returning only the requested columns. Requires a properly typed Supabase client and a compatible Database type. Throws if no record exists (unless .maybeSingle() is used). Input is a Supabase client and numeric task ID; output is a Promise for the selected task row.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/adding_app_pages_guarding_pages_updating_sidebar_menu_32.md#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { SupabaseClient } from '@supabase/supabase-js';\nimport type { Database } from '~/database.types';\n\nexport function getTask(client: SupabaseClient<Database>, id: number) {\n  return client\n    .from('tasks')\n    .select(\n      `\n      id,\n      name,\n      userId: user_id,\n      dueDate: due_date,\n      description,\n      done\n    `,\n    )\n    .eq('id', id)\n    .single();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Testimonials API Routes in Next.js\nDESCRIPTION: This TypeScript snippet demonstrates how to implement GET and POST routes for testimonials using handler functions from the Testimonials plugin.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/sentry_monitoring_notifications_configuration_51.md#2025-04-22_snippet_33\n\nLANGUAGE: ts\nCODE:\n```\nimport {\n  createTestimonialsRouteHandler,\n  createVideoTestimonialRouteHandler,\n} from '@kit/testimonial/server';\n\nexport const GET = createTestimonialsRouteHandler;\nexport const POST = createVideoTestimonialRouteHandler;\n```\n\n----------------------------------------\n\nTITLE: Adding Shadcn UI Component - Bash\nDESCRIPTION: Explains how to use `npx` to add a Shadcn UI component to the Next.js Supabase application. Paths and project structure can be customized with command flags to ensure the component is correctly placed.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/cms_api_cms_creating_your_own_cms_client_42.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add <component> -c ./packages/ui\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add button -c ./packages/ui\n```\n\n----------------------------------------\n\nTITLE: Start Supabase Local Environment Command\nDESCRIPTION: Command to start the local Supabase environment which requires Docker to be running.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/uploading_data_to_storage_writing_data_to_supabase_data_fetching_77.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nnpm run supabase:start\n```\n\n----------------------------------------\n\nTITLE: Clone Repository Using HTTPS\nDESCRIPTION: Provides an alternative method to clone the Next.js Supabase SaaS Kit Turbo repository without SSH by using HTTPS, which doesn't require SSH setup.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/cloudflare_production_environment_variables_supabase_47.md#2025-04-22_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/makerkit/next-supabase-saas-kit-turbo\n```\n\n----------------------------------------\n\nTITLE: Git Update Command for Latest Version\nDESCRIPTION: Git command to update the repository to the latest version from upstream\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/translations_updating_latest_version_tutorials_28.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit pull upstream main --allow-unrelated-histories\n```\n\n----------------------------------------\n\nTITLE: Firebase Emulators Console Output\nDESCRIPTION: Example output showing the running Firebase emulators with their respective ports and UI access URLs.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/project_structure_running_project_tailwind_css_75.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n┌────────────────┬────────────────┬─────────────────────────────────┐\n│ Emulator       │ Host:Port      │ View in Emulator UI             │\n├────────────────┼────────────────┼─────────────────────────────────┤\n│ Authentication │ localhost:9099 │ http://localhost:4000/auth      │\n├────────────────┼────────────────┼─────────────────────────────────┤\n│ Firestore      │ localhost:8080 │ http://localhost:4000/firestore │\n├────────────────┼────────────────┼─────────────────────────────────┤\n│ Pub/Sub        │ localhost:8085 │ n/a                             │\n├────────────────┼────────────────┼─────────────────────────────────┤\n│ Storage        │ localhost:9199 │ http://localhost:4000/storage   │\n└────────────────┴────────────────┴─────────────────────────────────┘\n  Emulator Hub running at localhost:4400\n  Other reserved ports: 4500, 9150\n```\n\n----------------------------------------\n\nTITLE: Type-Safe Conditional Rendering with 'If' Component in TypeScript (TSX)\nDESCRIPTION: Shows a TypeScript example using the 'If' component with a render prop. Type safety ensures that the 'user' object passed to the render prop function has the expected properties ('name', 'email').\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/app_breadcrumbs_bordered_navigation_menu_card_button_39.md#2025-04-22_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n<If condition={user}>\n  {(user) => <UserProfile name={user.name} email={user.email} />}\n</If>\n```\n\n----------------------------------------\n\nTITLE: Setting Service Account Environment Variables\nDESCRIPTION: Environment variables needed for the Firebase service account configuration in a MakerKit application.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/setting_up_firebase_custom_fetch_fetching_data_firestore_70.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nSERVICE_ACCOUNT_CLIENT_EMAIL=\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication Providers (Email/Password Example - TSX)\nDESCRIPTION: This snippet demonstrates modifying the `providers` object within the Makerkit authentication configuration. Although the surrounding text discusses enabling email/password, this specific code sets `emailPassword` to `false` and `phoneNumber` to `true`, effectively disabling email/password and enabling phone number authentication.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/api_routes_vs_server_actions_api_routes_call_api_routes_from_client_19.md#2025-04-22_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nproviders: {\n  emailPassword: false,\n  phoneNumber: true,\n  emailLink: false,\n  oAuth: ['google'] as Provider[],\n},\n```\n\n----------------------------------------\n\nTITLE: Importing an Exported Component in React (TSX)\nDESCRIPTION: This snippet illustrates a TypeScript React import statement for consuming a component directly from the package after it has been exported individually using the package.json \\\\\"exports\\\\\" field. It assumes the Avatar component is exported correctly. There are no extra external dependencies beyond React and the specified package. Inputs include properly exported components; outputs enable direct use in JSX code.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/creating_your_own_cms_client_keystatic_wordpress_62.md#2025-04-22_snippet_11\n\nLANGUAGE: TSX\nCODE:\n```\nimport { Avatar } from '@kit/ui/avatar';\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Package to Tailwind Path Configuration\nDESCRIPTION: Example of adding a custom feature package to the Tailwind CSS paths configuration. This ensures that Tailwind processes CSS classes in the custom package.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/running_project_technical_details_update_nextjs15_50.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n'../../packages/features/projects/src/**/*.tsx',\n```\n\n----------------------------------------\n\nTITLE: Adding Internationalization to a Next.js Page using HOC (TSX)\nDESCRIPTION: Shows how to enable server-side translations for a newly created marketing page in Next.js. The page component (`AboutPage`) is wrapped with the `withI18n` Higher-Order Component imported from `~/i18n/with-i18n`. This ensures the page content is translated correctly based on the detected locale before being sent to the client.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/branding_environment_variables_setup_project_configuration_21.md#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { withI18n } from '~/i18n/with-i18n';\n\nfunction AboutPage() {\n  return <div>About page</div>;\n}\n\nexport default withI18n(AboutPage);\n```\n\n----------------------------------------\n\nTITLE: Setting Stripe Webhook Secret Environment Variable\nDESCRIPTION: Example of setting the Stripe webhook secret in the .env.local file. The webhook secret is displayed in the terminal after running the stripe:listen command and should be copied to this environment variable.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/lemon_squeezy_metered_usage_one_off_payments_59.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nSTRIPE_WEBHOOK_SECRET=*your_webhook_secret*\n```\n\n----------------------------------------\n\nTITLE: Validating Plan Variant IDs Using Zod Schema in TypeScript\nDESCRIPTION: This snippet uses the Zod library to validate that required plan-related environment variables are defined and non-empty strings. It creates an object schema and parses process.env to ensure validation at startup. Dependencies include 'zod' and reliable population of the needed NEXT_PUBLIC_* environment variables. Input is the process.env object; output is a parsed variants object or a validation error if variables are missing or empty. This prevents runtime errors due to missing configuration and is recommended for robust configuration management.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/payments_billing_6.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { z } from 'zod';\n\nconst VariantsSchema = z.object({\n  NEXT_PUBLIC_STARTER_PLAN_MONTHLY_VARIANT_ID: z.string().min(1),\n  NEXT_PUBLIC_STARTER_PLAN_YEARLY_VARIANT_ID: z.string().min(1),\n  NEXT_PUBLIC_PRO_PLAN_MONTHLY_VARIANT_ID: z.string().min(1),\n  NEXT_PUBLIC_PRO_PLAN_YEARLY_VARIANT_ID: z.string().min(1),\n  NEXT_PUBLIC_PER_SEAT_PLAN_MONTHLY_VARIANT_ID: z.string().min(1),\n});\n\nconst variants = VariantsSchema.parse(\n  process.env,\n);\n```\n\n----------------------------------------\n\nTITLE: Disabling Theme Switcher in Configuration\nDESCRIPTION: Code snippet showing how to disable the theme toggle feature in a Makerkit application by updating the configuration file.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/translations_updating_latest_version_tutorials_87.md#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nconst configuration = {\n  theme: Themes.Dark,\n  features: {\n    enableThemeSwitcher: false,\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an AssigneeSelect Component with React Hook Form and Shadcn UI\nDESCRIPTION: A form component that allows users to select an assignee for a ticket. It uses React Hook Form with Zod validation, React Transition API for pending states, and fetches members data using the useFetchMembers hook.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/data_fetching_3.md#2025-04-22_snippet_35\n\nLANGUAGE: tsx\nCODE:\n```\nfunction AssigneeSelect(props: {\n  assignee: Tables<'tickets'>['assigned_to'];\n  ticketId: string;\n  accountSlug: string;\n  disabled: boolean;\n}) {\n  const [pending, startTransition] = useTransition();\n\n  const form = useForm({\n    resolver: zodResolver(UpdateTicketAssigneeSchema),\n    defaultValues: {\n      assigneeId: props.assignee!,\n      ticketId: props.ticketId,\n    },\n  });\n\n  const membersQuery = useFetchMembers(props.accountSlug);\n  const members = membersQuery.data ?? [];\n\n  return (\n    <Form {...form}>\n      <FormField\n        render={({ field }) => {\n          return (\n            <FormItem>\n              <FormLabel>Assignee</FormLabel>\n\n              <FormControl>\n                <Select\n                  value={form.getValues('assigneeId')}\n                  disabled={pending || props.disabled || membersQuery.isPending}\n                  onValueChange={(value) => {\n                    form.setValue(field.name, value, {\n                      shouldValidate: true,\n                    });\n\n                    void form.handleSubmit((value) => {\n                      startTransition(async () => {\n                        await updateTicketAssigneeAction(value);\n                      });\n                    })();\n                  }}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder={'Choose an Assignee'} />\n                  </SelectTrigger>\n\n                  <SelectContent>\n                    {members.map((member) => {\n                      return (\n                        <SelectItem key={member.id} value={member.id}>\n                          {member.name || member.email}\n                        </SelectItem>\n                      );\n                    })}\n                  </SelectContent>\n                </Select>\n              </FormControl>\n\n              <FormDescription>\n                The person responsible for resolving the ticket.\n              </FormDescription>\n            </FormItem>\n          );\n        }}\n        name={'assigneeId'}\n      />\n    </Form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Changing the Default Theme in Configuration\nDESCRIPTION: Example of how to change the default theme for a Makerkit project by updating the theme setting in the configuration file. This sets the default theme to Dark mode for all users.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/initializing_project_introduction_marketing_site_pages_14.md#2025-04-22_snippet_26\n\nLANGUAGE: ts\nCODE:\n```\nconst configuration = {\n  theme: Themes.Dark,\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Task Form Component with Remix\nDESCRIPTION: A form component for creating new tasks with validation and organization context. Includes fields for task name, description, and due date with default value handling.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/supabase_data_fetching_supabase_data_writing_tailwind_css_86.md#2025-04-22_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { FormEventHandler } from 'react';\nimport { useCallback } from 'react';\nimport { toast } from 'sonner';\n\nimport TextField from '~/core/ui/TextField';\nimport Button from '~/core/ui/Button';\n\nimport If from '~/core/ui/If';\nimport Textarea from '~/core/ui/Textarea';\nimport Label from '~/core/ui/Label';\n\nimport useCurrentOrganization from '~/lib/organizations/hooks/use-current-organization';\nimport type Task from '~/lib/tasks/types/task';\n\nfunction TaskForm({\n  onSubmit,\n  submitting,\n}: React.PropsWithChildren<{\n  onSubmit: (task: Omit<Task, 'id'>) => unknown;\n  submitting?: boolean;\n}>) {\n  const organization = useCurrentOrganization();\n  const organizationId = organization?.id as number;\n\n  const onCreateTask: FormEventHandler<HTMLFormElement> = useCallback(\n    async (event) => {\n      event.preventDefault();\n\n      const target = event.currentTarget;\n      const data = new FormData(target);\n      const name = data.get('name') as string;\n      const description = data.get('description') as string;\n      const dueDate = (data.get('dueDate') as string) || getDefaultDueDate();\n\n      if (name.trim().length < 3) {\n        toast.error('Task name must be at least 3 characters long');\n\n        return;\n      }\n\n      const task = {\n        organizationId,\n        name,\n        dueDate,\n        description,\n        done: false,\n      };\n\n      onSubmit(task);\n    },\n    [onSubmit, organizationId],\n  );\n\n  return (\n    <form onSubmit={onCreateTask}>\n      <div className={'flex flex-col space-y-4'}>\n        <TextField.Label>\n          Name\n          <TextField.Input\n            required\n            name={'name'}\n            placeholder={'ex. Launch on IndieHackers'}\n          />\n        </TextField.Label>\n\n        <Label>\n          Description\n          <Textarea\n            name={'description'}\n            className={'h-32'}\n            placeholder={'Describe the task...'}\n          />\n        </Label>\n\n        <TextField.Label>\n          Due date\n          <TextField.Input name={'dueDate'} type={'date'} />\n          <TextField.Hint>\n            Leave empty to set the due date to tomorrow\n          </TextField.Hint>\n        </TextField.Label>\n\n        <div className={'flex justify-end'}>\n          <Button loading={submitting}>\n            <If condition={submitting} fallback={<>Create Task</>}>\n              Creating Task...\n            </If>\n          </Button>\n        </div>\n      </div>\n    </form>\n  );\n}\n\nfunction getDefaultDueDate() {\n  const date = new Date();\n  date.setDate(date.getDate() + 1);\n  date.setHours(23, 59, 59);\n\n  return date.toDateString();\n}\n\nexport default TaskForm;\n```\n\n----------------------------------------\n\nTITLE: Complete Project Configuration in TypeScript\nDESCRIPTION: Main configuration file that defines all non-secret application settings including site details, authentication settings, features, paths, and subscription products.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/branding_environment_variables_setup_project_configuration_80.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport getEnv from '~/core/get-env';\nimport type { Provider } from '@supabase/gotrue-js/src/lib/types';\n\nconst env = getEnv() ?? {};\nconst production = env.NODE_ENV === 'production';\n\nenum Themes {\n  Light = 'light',\n  Dark = 'dark',\n}\n\nconst configuration = {\n  site: {\n    name: 'Awesomely - Your SaaS Title',\n    description: 'Your SaaS Description',\n    themeColor: '#ffffff',\n    themeColorDark: '#0a0a0a',\n    siteUrl: env.SITE_URL,\n    siteName: 'Awesomely',\n    twitterHandle: '',\n    githubHandle: '',\n    language: 'en',\n    convertKitFormId: '',\n    locale: env.DEFAULT_LOCALE,\n  },\n  auth: {\n    requireEmailConfirmation: true,\n    providers: {\n      emailPassword: true,\n      phoneNumber: false,\n      emailLink: false,\n      oAuth: ['google'] as Provider[],\n    },\n  },\n  production,\n  environment: env.ENVIRONMENT,\n  features: {\n    enableThemeSwitcher: true,\n  },\n  theme: Themes.Light,\n  paths: {\n    signIn: '/auth/sign-in',\n    signUp: '/auth/sign-up',\n    signInMfa: '/auth/verify',\n    signInFromLink: '/auth/link',\n    callback: '/auth/callback',\n    onboarding: `/onboarding`,\n    appHome: '/dashboard',\n    settings: {\n      profile: '/settings/profile',\n      authentication: '/settings/profile/authentication',\n      email: '/settings/profile/email',\n      password: '/settings/profile/password',\n    },\n    api: {\n      checkout: `/resources/ls/checkout`,\n      customerPortal: `/resources/ls/customer-portal`,\n      organizations: {\n        create: `/resources/organizations/create`,\n        transferOwnership: `/resources/organizations/transfer-ownership`,\n        members: `/resources/organizations/members`,\n      },\n    },\n  },\n  sentry: {\n    dsn: env.SENTRY_DSN,\n  },\n  subscriptions: {\n    products: [\n      {\n        name: 'Basic',\n        productId: 57713,\n        description: 'Description of your Basic plan',\n        badge: `Up to 20 users`,\n        features: [\n          'Basic Reporting',\n          'Up to 20 users',\n          '1GB for each user',\n          'Chat Support',\n        ],\n        plans: [\n          {\n            name: 'Monthly',\n            price: '$9',\n            variantId: 55476,\n          },\n          {\n            name: 'Yearly',\n            price: '$90',\n            variantId: 55512,\n          },\n        ],\n      },\n      {\n        name: 'Pro',\n        badge: `Most Popular`,\n        recommended: true,\n        productId: 57719,\n        description: 'Description of your Pro plan',\n        features: [\n          'Advanced Reporting',\n          'Up to 50 users',\n          '5GB for each user',\n          'Chat and Phone Support',\n        ],\n        plans: [\n          {\n            name: 'Monthly',\n            price: '$29',\n            variantId: 55483,\n            trialPeriodDays: 0,\n          },\n          {\n            name: 'Yearly',\n            price: '$200',\n            variantId: 55482,\n            trialPeriodDays: 0,\n          },\n        ],\n      },\n      {\n        name: 'Premium',\n        description: 'Description of your Premium plan',\n        badge: ``,\n        features: [\n          'Advanced Reporting',\n          'Unlimited users',\n          '50GB for each user',\n          'Account Manager',\n        ],\n        plans: [\n          {\n            name: '',\n            price: 'Contact us',\n            variantId: 0,\n            label: `Contact us`,\n            href: `/contact`,\n          },\n        ],\n      },\n    ],\n  },\n};\n\nexport default configuration;\n```\n\n----------------------------------------\n\nTITLE: Configuring Ethereal Email for Testing\nDESCRIPTION: Environment variables for setting up Ethereal email testing. Ethereal allows testing without a real email account by either setting these variables or letting Makerkit create an account automatically.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/commands_cors_develop_firebase_security_rules_5.md#2025-04-22_snippet_25\n\nLANGUAGE: Bash\nCODE:\n```\nETHEREAL_EMAIL=\nETHEREAL_PASSWORD=\n```\n\n----------------------------------------\n\nTITLE: Git Commands for Codebase Updates\nDESCRIPTION: Git commands for stashing changes and pulling updates from upstream repository.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/running_project_technical_details_update_nextjs15_50.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ngit stash\ngit stash pop\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit pull upstream main\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Paths for Plugin\nDESCRIPTION: TypeScript configuration to add path aliases for the plugin. This ensures the TypeScript compiler can find the plugin files.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_one_time_payments_stripe_webhooks_payments_11.md#2025-04-22_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"paths\": {\n      \"~/plugins/*\": [\n        \"./plugins/*\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Switching to Cloudflare Branch with Git\nDESCRIPTION: Command to switch to the Cloudflare-compatible branch of Makerkit's Remix SaaS boilerplate which contains optimizations for the Cloudflare Edge runtime.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/development_authentication_emails_email_configuration_94.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout cloudflare\n```\n\n----------------------------------------\n\nTITLE: Updating Favicons in Next.js Root Layout for Makerkit SaaS Application\nDESCRIPTION: This code snippet demonstrates how to update favicon paths in the root layout of a Next.js application. It includes paths for various favicon types and sizes used by different devices and browsers.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_webhooks_locally_using_lemon_squeezy_server_actions_csrf_33.md#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nicons: {\n  icon: '/assets/images/favicon/favicon.ico',\n  shortcut: '/shortcut-icon.png',\n  apple: '/assets/images/favicon/apple-touch-icon.png',\n  other: {\n    rel: 'apple-touch-icon-precomposed',\n    url: '/apple-touch-icon-precomposed.png'\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Extended Monitoring Configuration Variables\nDESCRIPTION: Additional environment variables for configuring monitoring providers including instrumentation service name for proper tracking.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/introduction_migration_from_remix_navigating_codebase_67.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n# sentry or baselime\nVITE_MONITORING_PROVIDER=\n\n# performance monitoring (only required for Baselime)\nENABLE_MONITORING_INSTRUMENTATION=true\nINSTRUMENTATION_SERVICE_NAME=your_service_name\n```\n\n----------------------------------------\n\nTITLE: Running a Script within a Specific Package using PNPM Bash\nDESCRIPTION: Executes the `start` script specifically within the `@kit/stripe` package of the Turborepo monorepo using PNPM's `--filter` flag. This allows running package-specific commands from the repository root, in this case, likely starting the Stripe CLI. Requires PNPM and the monorepo structure.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/deploy_production_introduction_5.md#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\npnpm --filter '@kit/stripe' start\n```\n\n----------------------------------------\n\nTITLE: Initializing Server with pnpm\nDESCRIPTION: This Dockerfile command initializes a server by executing the 'pnpm start' command. It allows for runtime overwriting. This setup requires pnpm to be installed as a dependency and expects the project to be configured to start the application with this command.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/configuring_supabase_database_webhooks_fly_production_environment_variables_95.md#2025-04-22_snippet_3\n\nLANGUAGE: Dockerfile\nCODE:\n```\n# Start the server by default, this can be overwritten at runtime\nCMD [\"pnpm\", \"start\"]\n```\n\n----------------------------------------\n\nTITLE: Revoking and Granting Permissions on Messages Table in SQL\nDESCRIPTION: These SQL statements first revoke all privileges from the messages table for generic and sensitive roles, then selectively grant select, insert, and update access to the 'authenticated' role, and more limited read/insert access to the 'service_role'. This pattern enforces a principle of least privilege, ensuring only designated roles have the permissions necessary for their workflows. It requires the messages table to exist prior to execution.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/database_4.md#2025-04-22_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\n-- revoke all permissions from the messages table\nrevoke all on public.messages from public, service_role;\n```\n\nLANGUAGE: sql\nCODE:\n```\n-- grant permissions to the authenticated role\ngrant select, insert, update on public.messages to authenticated;\ngrant select, insert on public.messages to service_role;\n```\n\n----------------------------------------\n\nTITLE: Using useUserSession Hook to Access Current User Data in React\nDESCRIPTION: Example component showing how to use the useUserSession hook to retrieve the current user's ID from the authentication data.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/deploying_production_development_getting_started_environment_variables_13.md#2025-04-22_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useUserSession } from '~/core/hooks/use-user-session';\n\nfunction MyComponent() {\n  const userSession = useUserSession();\n  const userId = userSession?.auth?.uid;\n\n  return (\n    <div>\n      <p>Current user ID: {userId}</p>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: React Email Template Implementation\nDESCRIPTION: Example of using react-email to create an email invitation template\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/server_actions_uploading_data_to_storage_writing_data_to_supabase_17.md#2025-04-22_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\ninterface Props {\n  organizationName: string;\n  organizationLogo?: string;\n  inviter: Maybe<string>;\n  invitedUserEmail: string;\n  link: string;\n  productName: string;\n}\n\nexport default function renderInviteEmail(props: Props) {\n  const title = `You have been invited to join ${props.organizationName}`;\n\n  return render(\n    <Html>\n      <Head>\n        <title>{title}</title>\n      </Head>\n      <Preview>{title}</Preview>\n      <Body style={{ width: '500px', margin: '0 auto', font: 'helvetica' }}>\n        <EmailNavbar />\n        <Section style={{ width: '100%' }}>\n          <Column>\n            <Text>Hi,</Text>\n\n            <Text>\n              {props.inviter} with {props.organizationName} has invited you to\n              use {props.productName} to collaborate with them.\n            </Text>\n\n            <Text>\n              Use the button below to set up your account and get started:\n            </Text>\n          </Column>\n        </Section>\n\n        <Section>\n          <Column align=\"center\">\n            <CallToActionButton href={props.link}>\n              Join {props.organizationName}\n            </CallToActionButton>\n          </Column>\n        </Section>\n\n        <Section>\n          <Column>\n            <Text>Welcome aboard,</Text>\n            <Text>The {props.productName} Team</Text>\n          </Column>\n        </Section>\n      </Body>\n    </Html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Environment Variables for Stripe Billing\nDESCRIPTION: Required environment variables to configure Stripe as the billing provider in the SaaS kit. Includes the secret key, webhook secret, and publishable key that must be set in appropriate environment files.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/lemon_squeezy_metered_usage_one_off_payments_38.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nSTRIPE_SECRET_KEY=\nSTRIPE_WEBHOOK_SECRET=\nNEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Definition for 'If' Component Condition\nDESCRIPTION: Defines the TypeScript type 'Condition' used for the 'condition' prop in the 'If' component. It accepts a generic type 'Value' or common falsy values (`false`, `null`, `undefined`, `0`, `''`).\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/app_breadcrumbs_bordered_navigation_menu_card_button_39.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\ntype Condition<Value = unknown> = Value | false | null | undefined | 0 | '';\n```\n\n----------------------------------------\n\nTITLE: Extending Personal Account Checkout Schema with Addon Support\nDESCRIPTION: Updates the PersonalAccountCheckoutSchema to include an array of addon objects, each containing productId and planId. This ensures proper validation of addon data.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_billing_checkout_addons_subscription_entitlements_54.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const PersonalAccountCheckoutSchema = z.object({\n  planId: z.string().min(1),\n  productId: z.string().min(1),\n  addons: z\n    .array(\n      z.object({\n        productId: z.string().min(1),\n        planId: z.string().min(1),\n      }),\n    )\n    .default([]),\n});\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering with Fallback using 'If' Component in React (JSX)\nDESCRIPTION: Shows the basic usage of the 'If' utility component for conditional rendering. It renders the 'WelcomeMessage' component if 'isLoggedIn' is true, otherwise it renders the 'LoginPrompt' component specified in the 'fallback' prop. It utilizes a render prop pattern for the main content.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/app_breadcrumbs_bordered_navigation_menu_card_button_39.md#2025-04-22_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nimport { If } from '@kit/ui/if';\n\nfunction MyComponent({ isLoggedIn, user }) {\n  return (\n    <If condition={isLoggedIn} fallback={<LoginPrompt />}>\n      {(value) => <WelcomeMessage user={user} />}\n    </If>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind Color Themes\nDESCRIPTION: JavaScript configuration for customizing color themes in Tailwind CSS\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/supabase_not_stopping_tables_not_found_dark_theme_22.md#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nprimary: {\n  DEFAULT: 'hsl(var(--primary))',\n  foreground: 'hsl(var(--primary-foreground))',\n  ...colors.violet,\n}\n```\n\nLANGUAGE: js\nCODE:\n```\ndark: {\n  ...colors.slate,\n  DEFAULT: colors.slate[950],\n  foreground: colors.slate[100],\n}\n```\n\nLANGUAGE: js\nCODE:\n```\ndark: {\n  ...colors.zinc,\n  DEFAULT: colors.zinc[950],\n  foreground: colors.zinc[100],\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS in JavaScript\nDESCRIPTION: This code snippet shows how to configure Tailwind CSS for the application. It extends the color palette with custom primary and dark colors, which can be easily customized.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/supabase_data_fetching_supabase_data_writing_tailwind_css_86.md#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nextend: {\n  colors: {\n    primary: {\n      ...colors.indigo,\n      contrast: '#fff',\n    },\n    dark: colors.gray\n  },\n},\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS Primary Color\nDESCRIPTION: Example configuration for customizing the primary color in Tailwind CSS by modifying the tailwind.config.js file.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/project_structure_running_project_tailwind_css_75.md#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nextend: {\n  colors: {\n    primary: {\n      ...colors.indigo,\n      contrast: '#fff',\n    },\n    black: {\n      50: '#525252',\n      100: '#363636',\n      200: '#282828',\n      300: '#222',\n      400: '#121212',\n      500: '#0a0a0a',\n      600: '#040404',\n      700: '#000',\n    },\n  },\n},\n```\n\n----------------------------------------\n\nTITLE: Organization Subscription Interface for Stripe Integration\nDESCRIPTION: Interface definition for the subscription data stored in the organization entity after a successful checkout.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_one_time_payments_stripe_webhooks_payments_11.md#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nexport interface OrganizationSubscription {\n  id: string;\n  priceId: string;\n\n  status: Stripe.Subscription.Status;\n  currency: string | null;\n  cancelAtPeriodEnd: boolean;\n\n  interval: string | null;\n  intervalCount: number | null;\n\n  createdAt: UnixTimestamp;\n  periodStartsAt: UnixTimestamp;\n  periodEndsAt: UnixTimestamp;\n  trialStartsAt: UnixTimestamp | null;\n  trialEndsAt: UnixTimestamp | null;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Navigation Menu Component\nDESCRIPTION: A navigation menu component built on Radix UI primitives, providing accessible dropdown navigation functionality.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/multi_step_forms_page_shadcn_40.md#2025-04-22_snippet_25\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  NavigationMenu,\n  NavigationMenuContent,\n  NavigationMenuItem,\n  NavigationMenuLink,\n  NavigationMenuList,\n  NavigationMenuTrigger,\n} from '@kit/ui/navigation-menu';\n\nexport default function NavigationMenuDemo() {\n  return (\n    <div>\n      <NavigationMenu>\n        <NavigationMenuList>\n          <NavigationMenuItem>\n            <NavigationMenuTrigger>Item One</NavigationMenuTrigger>\n\n            <NavigationMenuContent>\n              <NavigationMenuLink>Link</NavigationMenuLink>\n            </NavigationMenuContent>\n          </NavigationMenuItem>\n        </NavigationMenuList>\n      </NavigationMenu>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Organization Subscription Interface\nDESCRIPTION: TypeScript interface defining the structure of organization subscription data.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_configuration_stripe_one_time_payments_stripe_webhooks_82.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nexport interface OrganizationSubscription {\n  id: string;\n  priceId: string;\n\n  status: Stripe.Subscription.Status;\n  currency: string | null;\n  cancelAtPeriodEnd: boolean;\n\n  interval: string | null;\n  intervalCount: number | null;\n\n  createdAt: UnixTimestamp;\n  periodStartsAt: UnixTimestamp;\n  periodEndsAt: UnixTimestamp;\n  trialStartsAt: UnixTimestamp | null;\n  trialEndsAt: UnixTimestamp | null;\n}\n```\n\n----------------------------------------\n\nTITLE: Composing a Complete CardButton in React\nDESCRIPTION: A comprehensive example showcasing how to combine all CardButton components to create a fully featured card button with header, content, and footer sections.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/app_breadcrumbs_bordered_navigation_menu_card_button_39.md#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  CardButton,\n  CardButtonTitle,\n  CardButtonHeader,\n  CardButtonContent,\n  CardButtonFooter\n} from '@kit/ui/card-button';\n\nfunction MyCardButton() {\n  return (\n    <CardButton onClick={() => console.log('Card clicked')}>\n      <CardButtonHeader>\n        <CardButtonTitle>Featured Item</CardButtonTitle>\n      </CardButtonHeader>\n      <CardButtonContent>\n        <p>This is a detailed description of the featured item.</p>\n      </CardButtonContent>\n      <CardButtonFooter>\n        <span>Click to learn more</span>\n      </CardButtonFooter>\n    </CardButton>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using CardButton Component in React\nDESCRIPTION: Demonstrates basic usage of the CardButton component in a React application. This snippet shows how to create a simple card button with a click handler.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/app_breadcrumbs_bordered_navigation_menu_card_button_39.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<CardButton onClick={handleClick}>\n  {/* Card content */}\n</CardButton>\n```\n\n----------------------------------------\n\nTITLE: Feature Flags Configuration\nDESCRIPTION: Environment variables for enabling/disabling various application features.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stepper_components_application_configuration_41.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nNEXT_PUBLIC_ENABLE_THEME_TOGGLE=true\nNEXT_PUBLIC_ENABLE_PERSONAL_ACCOUNT_DELETION=true\nNEXT_PUBLIC_ENABLE_PERSONAL_ACCOUNT_BILLING=true\nNEXT_PUBLIC_ENABLE_TEAM_ACCOUNTS=true\nNEXT_PUBLIC_ENABLE_TEAM_ACCOUNTS_CREATION=true\nNEXT_PUBLIC_ENABLE_TEAM_ACCOUNTS_DELETION=true\nNEXT_PUBLIC_ENABLE_TEAM_ACCOUNTS_BILLING=true\nNEXT_PUBLIC_ENABLE_NOTIFICATIONS=true\nNEXT_PUBLIC_REALTIME_NOTIFICATIONS=true\n```\n\n----------------------------------------\n\nTITLE: Injecting Validated Variant IDs into Billing Line Items in TSX\nDESCRIPTION: This TSX snippet demonstrates referencing validated environment-based IDs from the variants object when defining line items in the billing schema. It dynamically assigns plan identifiers while specifying pricing details. The key dependency is that the variants object must be validated (e.g., via Zod) beforehand. Input structure consists of 'id' and pricing fields; expected output is a properly configured array of line item objects for the billing schema. This pattern eliminates hardcoded IDs, promoting safer and environment-aware code updates.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/payments_billing_6.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nlineItems: [\n  {\n    id: variants.NEXT_PUBLIC_STARTER_PLAN_MONTHLY_VARIANT_ID,\n    name: 'Base Price',\n    type: 'flat',\n    cost: 49,\n  },\n  {\n    id: variants.NEXT_PUBLIC_PER_SEAT_PLAN_MONTHLY_VARIANT_ID,\n    name: 'Per Seat',\n    type: 'per_seat',\n    cost: 10,\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Disabling Dark Theme and Using Light Theme Only\nDESCRIPTION: Configuration in src/configuration.ts to disable the dark theme functionality entirely by setting the theme to light and disabling the theme switcher in the user interface.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/branding_environment_variables_setup_project_configuration_80.md#2025-04-22_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\n{\n  features: {\n    enableThemeSwitcher: false,\n  },\n  theme: Themes.Light,\n}\n```\n\n----------------------------------------\n\nTITLE: Creating RLS Policy for Tasks\nDESCRIPTION: Policy that restricts task creation based on organization's subscription quota.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/supabase_not_stopping_tables_not_found_dark_theme_22.md#2025-04-22_snippet_27\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace policy \"Only allow organizations to create tasks if they have enough quota\"\n    on tasks\n    as restrictive\n    for insert\n    to authenticated\n    with check (\n        organization_can_create_task(organization_id)\n    );\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Different Project Modules\nDESCRIPTION: Examples of installing dependencies for different modules in the project using pnpm workspace filters\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/team_accounts_only_recipes_adding_translations_55.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\npnpm add my-package --filter \"@kit/ui\"\npnpm add my-package --filter web\n```\n\n----------------------------------------\n\nTITLE: Specifying Local-Only Secret Variables - dotenv - env\nDESCRIPTION: Specifies environment variables intended to be kept strictly on a developer's local machine via the .env.local file. These variables include sensitive keys (like SERVICE_ACCOUNT_PRIVATE_KEY and SECRET_KEY_THAT_SHOULD_NOT_BE_EXPOSED) that should never be committed to version control or exposed in a production setting. Essential for local development and testing where secrets must remain private. Inputs: developer-specific keys; Outputs: loaded into application environment for local runs.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/introduction_running_the_application_technical_details_6.md#2025-04-22_snippet_1\n\nLANGUAGE: env\nCODE:\n```\nSERVICE_ACCOUNT_PRIVATE_KEY=\\nSECRET_KEY_THAT_SHOULD_NOT_BE_EXPOSED=\n```\n\n----------------------------------------\n\nTITLE: Installing Plugin Dependencies\nDESCRIPTION: Command to install the plugin's dependencies. This uses NPM to install dependencies in the plugin's directory as a workspace.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_one_time_payments_stripe_webhooks_payments_11.md#2025-04-22_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Adding Content to CardButton with CardButtonContent\nDESCRIPTION: Shows how to use the CardButtonContent component to add main content to a card button. This component is designed for the primary information or functionality of the card.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/app_breadcrumbs_bordered_navigation_menu_card_button_39.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<CardButtonContent>\n  <p>Main card content goes here</p>\n</CardButtonContent>\n```\n\n----------------------------------------\n\nTITLE: Configuring Dark Theme in Next.js\nDESCRIPTION: TypeScript configuration options for enabling/disabling dark theme and theme switcher\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/supabase_not_stopping_tables_not_found_dark_theme_22.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n{\n  features: {\n    enableThemeSwitcher: true,\n  },\n  theme: Themes.Dark,\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\n{\n  features: {\n    enableThemeSwitcher: false,\n  },\n  theme: Themes.Dark,\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\n{\n  features: {\n    enableThemeSwitcher: false,\n  },\n  theme: Themes.Light,\n}\n```\n\n----------------------------------------\n\nTITLE: Dark Mode Color Configuration\nDESCRIPTION: Tailwind configuration for dark mode color palette using slate colors.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/translations_updating_latest_version_tutorials_87.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ndark: {\n  ...colors.slate,\n  DEFAULT: colors.slate[950],\n  foreground: colors.slate[100],\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Task Form Component with React in TSX\nDESCRIPTION: A React component for creating new tasks that captures form inputs, submits data to Firestore via a custom hook, and navigates to the tasks list after submission. It includes form validation and organization context.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/development_getting_started_environment_variables_firestore_data_fetching_74.md#2025-04-22_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useNavigate } from '@remix-run/react';\nimport { FormEventHandler, useCallback } from 'react';\n\nimport TextField from '~/core/ui/TextField';\nimport Button from '~/core/ui/Button';\nimport useCreateTask from '~/lib/tasks/hooks/use-create-task';\n\nimport { useCurrentOrganization } from '~/lib/organizations/hooks/use-current-organization';\n\nconst CreateTaskForm = () => {\n  const createTask = useCreateTask();\n  const navigate = useNavigate();\n  const organization = useCurrentOrganization();\n  const organizationId = organization?.id as string;\n\n  const onCreateTask: FormEventHandler<HTMLFormElement> = useCallback(\n    async (event) => {\n      event.preventDefault();\n\n      const target = event.currentTarget;\n      const data = new FormData(target);\n      const name = data.get('name') as string;\n      const dueDate = data.get('dueDate') as string;\n\n      const task = {\n        organizationId,\n        name,\n        dueDate,\n        done: false,\n      };\n\n      // create task\n      await createTask(task);\n\n      // redirect to /tasks\n      await navigate(`/tasks`);\n    },\n    [navigate, createTask, organizationId]\n  );\n\n  return (\n    <form onSubmit={onCreateTask}>\n      <div>\n        <TextField.Label>\n          Name\n          <TextField.Input\n            required\n            name={'name'}\n            placeholder={'ex. Launch on IndieHackers'}\n          />\n\n          <TextField.Hint>Hint: whatever you do, ship!</TextField.Hint>\n        </TextField.Label>\n\n        <TextField.Label>\n          Due date\n          <TextField.Input required name={'dueDate'} type={'date'} />\n        </TextField.Label>\n\n        <div>\n          <Button>\n            Create Task\n          </Button>\n        </div>\n      </div>\n    </form>\n  );\n};\n\nexport default CreateTaskForm;\n```\n\n----------------------------------------\n\nTITLE: Updating Language Settings in i18n Configuration\nDESCRIPTION: Configuration code for adding new supported languages to the i18n settings file.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/text_editor_plugin_waitlist_plugin_plugins_98.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n/**\n * The list of supported languages.\n * By default,  only the default language is supported.\n * Add more languages here if needed.\n */\nexport const languages: string[] = [defaultLanguage, 'es'];\n```\n\n----------------------------------------\n\nTITLE: Linking Supabase Database Example\nDESCRIPTION: Example of how to link a Supabase database using the filter command pattern.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/configuring_supabase_database_webhooks_fly_production_environment_variables_95.md#2025-04-22_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\npnpm --filter web supabase db link\n```\n\n----------------------------------------\n\nTITLE: Defining a Metered Usage Plan with Makerkit\nDESCRIPTION: Creates a billing schema for a metered usage plan where charges are based on the user's API request count. The code describes how to initiate billing with per-unit charges ascending through tiers. Requires Makerkit and a configured billing provider.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/lemon_squeezy_metered_usage_one_off_payments_59.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nexport default createBillingSchema({\n  provider,\n  products: [\n    {\n      id: 'starter',\n      name: 'Starter',\n      description: 'The perfect plan to get started',\n      currency: 'USD',\n      badge: `Value`,\n      plans: [\n        {\n          name: 'Starter Monthly',\n          id: 'starter-monthly',\n          trialDays: 7,\n          paymentType: 'recurring',\n          interval: 'month',\n          lineItems: [\n            {\n              id: 'price_1NNwYHI1i3VnbZTqI2UzaHIe',\n              name: 'Addon 2',\n              cost: 0,\n              type: 'metered',\n              unit: 'GBs',\n              tiers: [\n                {\n                    upTo: 10,\n                    cost: 0.1,\n                },\n                {\n                    upTo: 100,\n                    cost: 0.05,\n                },\n                {\n                    upTo: 'unlimited',\n                    cost: 0.01,\n                }\n              ]\n            },\n          ],\n        }\n      ],\n    }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Individual Feedback Route Handler\nDESCRIPTION: Route handler implementation for individual feedback submissions with loader and action functions.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/technical_details_updating_codebase_installation_97.md#2025-04-22_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  ActionFunctionArgs,\n  LoaderFunctionArgs,\n} from '@remix-run/server-runtime';\n\nimport { FeedbackSubmissionPage } from '@kit/feedback/admin';\nimport { feedbackSubmissionLoader } from '@kit/feedback/admin/server';\nimport { deleteFeedbackSubmissionAction } from '@kit/feedback/server';\n\nexport const loader = ({ params, request }: LoaderFunctionArgs) => {\n  return feedbackSubmissionLoader(request, params.id as string);\n};\n\nexport default FeedbackSubmissionPage;\n\nexport const action = ({ request }: ActionFunctionArgs) => {\n  return deleteFeedbackSubmissionAction(request);\n};\n```\n\n----------------------------------------\n\nTITLE: Next.js Firebase Project Structure Overview\nDESCRIPTION: A hierarchical view of the project directory structure showing the organization of key folders like src/core, src/components, src/lib, and src/pages in a Makerkit Next.js Firebase application.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/initializing_project_introduction_marketing_site_pages_14.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ntasks-app\n├── README.md\n├── @types\n├── src\n│   ├── components\n│   ├── core\n│   ├── lib\n│   └── pages\n        └── _document.tsx\n        └── _app.tsx\n│       └── page.tsx\n├── package-lock.json\n├── package.json\n├── public\n│   └── favicon.ico\n├── next.config.mjs\n└── tsconfig.json\n```\n\n----------------------------------------\n\nTITLE: Organizing Application Structure for New Entities in Next.js\nDESCRIPTION: A directory structure example showing how to organize files when adding a new entity to a Next.js application with Supabase.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/translations_updating_latest_version_tutorials_28.md#2025-04-22_snippet_9\n\nLANGUAGE: txt\nCODE:\n```\n- app\n  - lib\n    - events\n      - types\n        - event-model.ts\n        - ...\n      - hooks\n        - use-fetch-events.ts\n        - use-create-event.ts\n        - ...\n      - utils\n        - create-event-model.ts\n\n  - app\n    - dashboard\n    - events\n      components\n        - events\n          - EventsContainerComponent.tsx\n          - ...\n      - page.tsx\n      - [event].tsx\n```\n\n----------------------------------------\n\nTITLE: Verifying Git Username in Bash\nDESCRIPTION: This snippet checks and sets the local Git username to match the one registered with Makerkit’s Github organization. It uses the 'git config' command to read and potentially update the Git username, ensuring proper access to the repository. Make sure your Git is installed and configured.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/going_to_production_clone_repository_code_health_66.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit config user.username\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit config --global user.username \"Your Github Username\"\n```\n\n----------------------------------------\n\nTITLE: Adding Keystatic Admin to App - Bash\nDESCRIPTION: This snippet shows how to add the Keystatic admin interface to your application using the `turbo` CLI. This command creates a new route at `/keystatic` for content management. Ensure you have the necessary GitHub permissions for repository access.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/cms_api_cms_creating_your_own_cms_client_42.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nturbo gen keystatic\n```\n\n----------------------------------------\n\nTITLE: Using Primary Color in React Components\nDESCRIPTION: Example of implementing a primary button component that uses Tailwind's primary color class with appropriate dark mode styling.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/translations_updating_latest_version_tutorials_87.md#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\n\nexport const PrimaryButton = () => {\n  return (\n    <button className=\"bg-primary text-white dark:bg-primary/10 dark:text-primary px-4 py-2 rounded\">\n      Click me\n    </button>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Tailwind Color Configuration for ShadCN UI\nDESCRIPTION: Configuration for customizing the primary color palette in Tailwind CSS for ShadCN UI theming.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/translations_updating_latest_version_tutorials_87.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nprimary: {\n  DEFAULT: 'hsl(var(--primary))',\n  foreground: 'hsl(var(--primary-foreground))',\n  ...colors.violet,\n}\n```\n\n----------------------------------------\n\nTITLE: Adding PostHog Package Dependency using pnpm in Bash\nDESCRIPTION: Adds the specific PostHog plugin package (`@kit/posthog`) as a dev dependency to the `@kit/analytics` workspace using pnpm. This step is necessary after pulling the plugin files using the Makerkit CLI.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/analytics_api_custom_analytics_provider_google_analytics_provider_57.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\npnpm add \"@kit/posthog@workspace:*\" --filter \"@kit/analytics\" -D\n```\n\n----------------------------------------\n\nTITLE: Next.js Page Creation with i18n\nDESCRIPTION: Example of creating a Next.js page with internationalization support and metadata configuration\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/llms_migration_from_makerkit_v1_navigating_codebase_49.md#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Metadata } from 'next';\n\nimport { withI18n } from '~/lib/i18n/with-i18n';\n\nexport const metadata: Metadata = {\n  title: 'A page title',\n  description: 'A page description',\n};\n\nfunction Page() {\n  // ...\n}\n\nexport default withI18n(Page);\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Authentication in Next.js\nDESCRIPTION: This bash snippet shows how to set environment variables to switch from password authentication to magic link authentication in a Next.js Supabase application.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stepper_components_application_configuration_41.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nNEXT_PUBLIC_AUTH_PASSWORD=false\nNEXT_PUBLIC_AUTH_MAGIC_LINK=true\n```\n\n----------------------------------------\n\nTITLE: Creating a Data Mutation Hook with useSWRMutation in TypeScript\nDESCRIPTION: Demonstrates creating a custom React hook `useTransferOrganizationOwnership` for performing data mutations (transferring organization ownership) via an API call. It utilizes `useSWRMutation` for managing the mutation state, `useApiRequest` utility for making the API call (handling CSRF automatically), and `useRefresh` to potentially update UI state on success. Requires `swr/mutation`, `~/configuration`, `~/core/hooks/use-api`, and `~/core/hooks/use-refresh` dependencies.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/architecture_auth_overview_auth_setup_29.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n```tsx\nimport useSWRMutation from 'swr/mutation';\n\nimport configuration from '~/configuration';\nimport useApiRequest from '~/core/hooks/use-api';\nimport useRefresh from '~/core/hooks/use-refresh';\n\ninterface Params {\n  membershipId: number;\n}\n\nconst path = configuration.paths.api.organizations.transferOwnership;\n\nfunction useTransferOrganizationOwnership() {\n  const fetcher = useApiRequest<void, Params>();\n  const refresh = useRefresh();\n  const key = ['organizations', 'transfer-ownership'];\n\n  return useSWRMutation(\n    key,\n    (_, { arg }: { arg: Params }) => {\n      return fetcher({\n        path,\n        method: `PUT`,\n        body: {\n          membershipId: arg.membershipId,\n        },\n      });\n    },\n    {\n      onSuccess: refresh,\n    }\n  );\n}\n\nexport default useTransferOrganizationOwnership;\n```\n```\n\n----------------------------------------\n\nTITLE: Analytics Event Mapping Configuration\nDESCRIPTION: Shows how to configure analytics event mapping to handle different types of events including custom events.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/translations_updating_latest_version_tutorials_87.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst analyticsMapping: AnalyticsMapping = {\n  'user.signedIn': (event) => {\n    const userId = event.payload.userId;\n\n    if (userId) {\n      analytics.identify(userId);\n    }\n  },\n  'user.signedUp': (event) => {\n    analytics.trackEvent(event.type, event.payload);\n  },\n  'checkout.started': (event) => {\n    analytics.trackEvent(event.type, event.payload);\n  },\n  'user.updated': (event) => {\n    analytics.trackEvent(event.type, event.payload);\n  },\n  'feature.used': (event) => {\n    analytics.trackEvent(event.type, event.payload);\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Generating App Check Token in Firebase\nDESCRIPTION: Demonstrates how to generate and use an App Check token using the useGetAppCheckToken hook. The token needs to be sent in the X-Firebase-AppCheck header.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_one_time_payments_stripe_webhooks_ci_tests_73.md#2025-04-22_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nconst getAppCheckToken = useGetAppCheckToken();\nconst appCheckToken = await getAppCheckToken();\n\nconsole.log(appCheckToken) // token\n```\n\n----------------------------------------\n\nTITLE: Global Configuration Setup for Next.js Firebase App\nDESCRIPTION: TypeScript configuration file that defines global settings for the application including site details, authentication paths, Firebase configuration, and feature flags.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/third_party_auth_providers_authentication_blog_3.md#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nexport default {\n  site: {\n    title: '',\n    description: '',\n    themeColor: '',\n    siteUrl: '',\n    siteName: '',\n    twitterHandle: '',\n    language: 'en',\n  },\n  paths: {\n    signIn: '/auth/sign-in',\n    signUp: '/auth/sign-up',\n    emailLinkSignIn: '/auth/link',\n    onboarding: `/onboarding`,\n    appHome: '/tasks',\n    settings: {\n      profile: '/settings/profile',\n      authentication: '/settings/profile/authentication',\n      email: '/settings/profile/email',\n      password: '/settings/profile/password',\n    },\n    api: {\n      checkout: `/api/stripe/checkout`,\n      billingPortal: `/api/stripe/portal`,\n    },\n    searchIndex: `/public/search-index`,\n  },\n  firebase: {\n    apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,\n    authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,\n    projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,\n    storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,\n    messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,\n    appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID,\n    measurementId: process.env.NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID,\n  },\n  auth: {\n    enableMultiFactorAuth: true,\n    providers: {\n      emailPassword: true,\n      phoneNumber: false,\n      emailLink: false,\n      oAuth: [GoogleAuthProvider],\n    },\n  },\n  appCheckSiteKey: process.env.NEXT_PUBLIC_APPCHECK_KEY,\n  theme: Themes.Light,\n  features: {\n    enableThemeSwitch: true,\n    enableAccountDeletion: true,\n    enableOrganizationDeletion: true,\n  },\n  navigation: {\n    style: NavigationStyle.TopHeader,\n  },\n  environment: process.env.NEXT_PUBLIC_VERCEL_ENV ?? 'development',\n  emulatorHost: process.env.NEXT_PUBLIC_EMULATOR_HOST,\n  emulator: process.env.NEXT_PUBLIC_EMULATOR === 'true',\n  production: process.env.NEXT_PUBLIC_NODE_ENV === 'production',\n  stripe: {\n    products: [\n      {\n        name: 'Basic',\n        description: 'Describe your basic plan',\n        plans: [\n          {\n            price: '$249/year',\n            stripePriceId: '<STRIPE_PRICE_ID>',\n          }\n        ],\n      },\n      {\n        name: 'Pro',\n        description: 'Describe your pro plan',\n        plans: [\n          {\n            price: '$249/year',\n            stripePriceId: '<STRIPE_PRICE_ID>',\n          }\n        ],\n      },\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: OpenAI API Key Configuration\nDESCRIPTION: Environment variable setup for OpenAI API authentication in the local development environment.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/building_javascript_widget_1.md#2025-04-22_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\nOPENAI_API_KEY=sk-...\n```\n\n----------------------------------------\n\nTITLE: IFrame Component Implementation\nDESCRIPTION: React component for rendering widget content within an iframe with portal support\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/building_javascript_widget_1.md#2025-04-22_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\nimport { useState } from 'react';\n\nimport { createPortal } from 'react-dom';\n\nimport { cn } from '@kit/ui/utils';\n\nexport const IFrame: React.FC<\n  React.IframeHTMLAttributes<unknown> & {\n    setInnerRef?: (ref: HTMLIFrameElement | undefined) => void;\n    style?: React.CSSProperties;\n    className?: string;\n  }\n> = ({ children, setInnerRef, style = {}, className }) => {\n  const [ref, setRef] = useState<HTMLIFrameElement | null>();\n  const doc = ref?.contentWindow?.document as Document;\n  const mountNode = doc?.body;\n\n  return (\n    <iframe\n      className={cn(className)}\n      style={{\n        all: 'initial',\n        position: 'fixed',\n        width: '100%',\n        height: '100%',\n        border: 0,\n        zIndex: 1000,\n        ...(style ?? {}),\n      }}\n      ref={(ref) => {\n        if (ref) {\n          setRef(ref);\n\n          if (setInnerRef) {\n            setInnerRef(ref);\n          }\n        }\n      }}\n    >\n      {mountNode ? createPortal(children, mountNode) : null}\n    </iframe>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Up One-Off Payments in TypeScript Billing Schema\nDESCRIPTION: This code snippet shows how to define a one-time payment plan in the billing schema. It includes a single flat-rate line item with a fixed cost for a one-off purchase.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/api_billing_api_billing_schema_58.md#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nexport default createBillingSchema({\n  provider,\n  products: [\n    {\n      id: 'starter',\n      name: 'Starter',\n      description: 'The perfect plan to get started',\n      currency: 'USD',\n      badge: `Value`,\n      plans: [\n        {\n          name: 'Starter Monthly',\n          id: 'starter-monthly',\n          paymentType: 'one-time',\n          lineItems: [\n            {\n              id: 'price_1NNwYHI1i3VnbZTqI2UzaHIe',\n              name: 'Addon 2',\n              cost: 9.99,\n              type: 'flat',\n            },\n          ],\n        }\n      ],\n    }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Sending Emails in Next.js Firebase App\nDESCRIPTION: Code snippet demonstrating how to send emails using the sendEmail function in a Next.js Firebase application.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/commands_cors_develop_firebase_security_rules_5.md#2025-04-22_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\ninterface SendEmailParams {\n  from: string;\n  to: string;\n  subject: string;\n  text?: string;\n  html?: string;\n}\n\nimport { sendEmail } from '~/core/email/send-email';\n\nfunction sendTransactionalEmail() {\n  const sender = configuration.email.senderAddress;\n\n  return sendEmail({\n    to: `youruser@email.com`,\n    from: sender,\n    subject: `Achievement Unlocked!`,\n    html: `Yay, you unlocked an achievement!`,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Feedback Deletion API in Next.js\nDESCRIPTION: This code creates an API route for deleting feedback submissions, importing the deleteFeedbackSubmission function from the plugin's mutations library to handle the request.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_one_time_payments_stripe_webhooks_payments_11.md#2025-04-22_snippet_24\n\nLANGUAGE: tsx\nCODE:\n```\nimport { deleteFeedbackSubmission } from '~/plugins/feedback-popup/lib/mutations';\n\nexport default deleteFeedbackSubmission;\n```\n\n----------------------------------------\n\nTITLE: Rendering FeatureShowcase Component in React/TSX\nDESCRIPTION: This snippet demonstrates how to use the FeatureShowcase component to display a feature grid with various cards and images. It includes nested components like FeatureCard and uses Tailwind CSS classes for styling.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/app_breadcrumbs_bordered_navigation_menu_card_button_39.md#2025-04-22_snippet_29\n\nLANGUAGE: tsx\nCODE:\n```\n <div className={'container mx-auto'}>\n  <div\n    className={'flex flex-col space-y-16 xl:space-y-32 2xl:space-y-36'}\n  >\n    <FeatureShowcase\n      heading={\n        <>\n          <b className=\"font-semibold dark:text-white\">\n            The ultimate SaaS Starter Kit\n          </b>\n          .{' '}\n          <GradientSecondaryText>\n            Unleash your creativity and build your SaaS faster than ever\n            with Makerkit.\n          </GradientSecondaryText>\n        </>\n      }\n      icon={\n        <FeatureShowcaseIconContainer>\n          <LayoutDashboard className=\"h-5\" />\n          <span>All-in-one solution</span>\n        </FeatureShowcaseIconContainer>\n      }\n    >\n      <FeatureGrid>\n        <FeatureCard\n          className={\n            'relative col-span-2 overflow-hidden bg-violet-500 text-white lg:h-96'\n          }\n          label={'Beautiful Dashboard'}\n          description={`Makerkit provides a beautiful dashboard to manage your SaaS business.`}\n        >\n          <Image\n            className=\"absolute right-0 top-0 hidden h-full w-full rounded-tl-2xl border border-border lg:top-36 lg:flex lg:h-auto lg:w-10/12\"\n            src={'/images/dashboard-header.webp'}\n            width={'2061'}\n            height={'800'}\n            alt={'Dashboard Header'}\n          />\n        </FeatureCard>\n\n        <FeatureCard\n          className={\n            'relative col-span-2 w-full overflow-hidden lg:col-span-1'\n          }\n          label={'Authentication'}\n          description={`Makerkit provides a variety of providers to allow your users to sign in.`}\n        >\n          <Image\n            className=\"absolute left-16 top-32 hidden h-auto w-8/12 rounded-l-2xl lg:flex\"\n            src={'/images/sign-in.webp'}\n            width={'1760'}\n            height={'1680'}\n            alt={'Sign In'}\n          />\n        </FeatureCard>\n\n        <FeatureCard\n          className={\n            'relative col-span-2 overflow-hidden lg:col-span-1 lg:h-96'\n          }\n          label={'Multi Tenancy'}\n          description={`Multi tenant memberships for your SaaS business.`}\n        >\n          <Image\n            className=\"absolute right-0 top-0 hidden h-full w-full rounded-tl-2xl border lg:top-28 lg:flex lg:h-auto lg:w-8/12\"\n            src={'/images/multi-tenancy.webp'}\n            width={'2061'}\n            height={'800'}\n            alt={'Multi Tenancy'}\n          />\n        </FeatureCard>\n\n        <FeatureCard\n          className={'relative col-span-2 overflow-hidden lg:h-96'}\n          label={'Billing'}\n          description={`Makerkit supports multiple payment gateways to charge your customers.`}\n        >\n          <Image\n            className=\"absolute right-0 top-0 hidden h-full w-full rounded-tl-2xl border border-border lg:top-36 lg:flex lg:h-auto lg:w-11/12\"\n            src={'/images/billing.webp'}\n            width={'2061'}\n            height={'800'}\n            alt={'Billing'}\n          />\n        </FeatureCard>\n      </FeatureGrid>\n    </FeatureShowcase>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Confirm Delete Modal\nDESCRIPTION: Creates a confirmation modal component for task deletion with customizable trigger and confirmation callback.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/supabase_data_fetching_supabase_data_writing_tailwind_css_86.md#2025-04-22_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nfunction ConfirmDeleteTaskModal({\n  children,\n  onConfirm,\n  task,\n}: React.PropsWithChildren<{\n  task: string;\n  onConfirm: () => void;\n}>) {\n  return (\n    <Modal heading={`Deleting Task`} Trigger={children}>\n      <div className={'flex flex-col space-y-4'}>\n        <div className={'text-sm flex flex-col space-y-2'}>\n          <p>\n            You are about to delete the task <b>{task}</b>\n          </p>\n\n          <p>Do you want to continue?</p>\n        </div>\n\n        <div className={'flex justify-end space-x-2'}>\n          <Button variant={'flat'} color={'danger'} onClick={onConfirm}>\n            Yep, delete task\n          </Button>\n        </div>\n      </div>\n    </Modal>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Stripe Pricing Table in TypeScript\nDESCRIPTION: TypeScript configuration object for defining Stripe product plans, pricing tiers, and display options. Includes configuration for Basic, Pro and Premium plans with monthly and yearly billing options.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/updating_navigation_menu_403_error_actions_contentlayer_stuck_34.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nstripe: {\n  embedded: true,\n  displayMode: StripeCheckoutDisplayMode.Popup,\n  products: [\n    {\n      name: 'Basic',\n      description: 'Description of your Basic plan',\n      badge: `Up to 20 users`,\n      features: [\n        'Basic Reporting',\n        'Up to 20 users',\n        '1GB for each user',\n        'Chat Support',\n      ],\n      plans: [\n        {\n          name: 'Monthly',\n          price: '$9',\n          stripePriceId: '<price_id>',\n          trialPeriodDays: 7,\n        },\n        {\n          name: 'Yearly',\n          price: '$90',\n          stripePriceId: '<price_id>',\n          trialPeriodDays: 7,\n        },\n      ],\n    },\n    {\n      name: 'Pro',\n      badge: `Most Popular`,\n      recommended: true,\n      description: 'Description of your Pro plan',\n      features: [\n        'Advanced Reporting',\n        'Up to 50 users',\n        '5GB for each user',\n        'Chat and Phone Support',\n      ],\n      plans: [\n        {\n          name: 'Monthly',\n          price: '$29',\n          stripePriceId: 'pro-plan-mth',\n          trialPeriodDays: 7,\n        },\n        {\n          name: 'Yearly',\n          price: '$200',\n          stripePriceId: 'pro-plan-yr',\n          trialPeriodDays: 7,\n        },\n      ],\n    },\n    {\n      name: 'Premium',\n      description: 'Description of your Premium plan',\n      badge: ``,\n      features: [\n        'Advanced Reporting',\n        'Unlimited users',\n        '50GB for each user',\n        'Account Manager',\n      ],\n      plans: [\n        {\n          name: '',\n          price: 'Contact us',\n          stripePriceId: '',\n          trialPeriodDays: 7,\n          label: `Contact us`,\n          href: `/contact`,\n        },\n      ],\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching data using Supabase in a Next.js GET Route\nDESCRIPTION: This snippet demonstrates how to use the 'fetchDataFromSupabase' function in a Next.js GET API route to retrieve data from a Supabase database. It depends on the '@makerkit/data-loader-supabase-core' package, and requires a Supabase client obtained via 'getSupabaseRouteHandlerClient'. The key parameters include specifying the table, selection query, and filter conditions. The expected output is a JSON response containing the queried data and pagination details.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/ai_text_editor_cookie_banner_feedback_popup_24.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextResponse } from \"next/server\";\nimport { fetchDataFromSupabase } from '@makerkit/data-loader-supabase-core';\nimport getSupabaseRouteHandlerClient from '~/core/supabase/route-handler-client';\n\nexport async function GET() {\n  const client = getSupabaseRouteHandlerClient();\n\n  const { data, count, pageSize, pageCount } = await fetchDataFromSupabase({\n    client,\n    table: 'organizations',\n    select: '*',\n    where: {\n      name: {\n        textSearch: `'makerkit'`,\n      }\n    }\n  });\n\n  return NextResponse.json({\n    data,\n    count,\n    pageSize,\n    pageCount,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple API Route Handler in Next.js\nDESCRIPTION: Defines a basic API route handler that returns a JSON response with a 'hello world' message. This demonstrates the minimal implementation of a Next.js API endpoint.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/call_api_routes_from_client_csrf_token_guarding_api_routes_7.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { NextApiRequest, NextApiResponse } from \"next\";\n\nexport default async function apiHandler(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n  return res.json({\n    hello: \"world\"\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Linting and Auto-Fixing Code (Bash)\nDESCRIPTION: Executes the `lint:fix` script via `pnpm run`. This command usually runs ESLint with a `--fix` flag to identify and automatically correct linting rule violations according to the project's configuration.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/code_health_common_commands_conventions_48.md#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\npnpm run lint:fix\n```\n\n----------------------------------------\n\nTITLE: SQL Function to Check Account Ownership\nDESCRIPTION: Database function that checks if the current user is the owner of an account. Used in the accounts table to restrict access to account owners.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/adding_turborepo_package_approaching_local_development_database_functions_44.md#2025-04-22_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\npublic.is_account_owner(account_id uuid)\n```\n\n----------------------------------------\n\nTITLE: Adding Waitlist Plugin Dependency in package.json\nDESCRIPTION: JSON snippet to add the waitlist plugin as a dependency in the main app's package.json file. This allows the app to use the plugin's functionality.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/waitlist_plugin_plugins_drizzle_supabase_52.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@kit/waitlist\": \"workspace:*\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying a Full-Page Loading Overlay in React (JSX)\nDESCRIPTION: Example demonstrating the default behavior of 'LoadingOverlay' which renders as a full-page overlay, indicated by the 'fullPage' prop defaulting to true. Includes custom text content.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/app_breadcrumbs_bordered_navigation_menu_card_button_39.md#2025-04-22_snippet_20\n\nLANGUAGE: jsx\nCODE:\n```\n<LoadingOverlay>\n  Please wait while we load your dashboard...\n</LoadingOverlay>\n```\n\n----------------------------------------\n\nTITLE: Configuring WordPress CMS in Environment Variables\nDESCRIPTION: Setting the CMS_CLIENT environment variable to use WordPress instead of Keystatic, as Keystatic's local mode isn't supported in the Edge runtime.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/development_authentication_emails_email_configuration_94.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nCMS_CLIENT=wordpress\n```\n\n----------------------------------------\n\nTITLE: Configuring Admin Feedback Panel Routes in TSX\nDESCRIPTION: Implementation of the feedback submissions admin panel routes with loader and action functions for handling feedback data.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/technical_details_updating_codebase_installation_97.md#2025-04-22_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LoaderFunctionArgs } from '@remix-run/server-runtime';\n\nimport { FeedbackSubmissionsPage } from '@kit/feedback/admin';\nimport { feedbackSubmissionsLoader } from '@kit/feedback/admin/server';\nimport { deleteFeedbackSubmissionAction } from '@kit/feedback/server';\n\nexport const loader = ({ request }: LoaderFunctionArgs) => {\n  return feedbackSubmissionsLoader(request);\n};\n\nexport default FeedbackSubmissionsPage;\n\nexport const action = async ({ request }: LoaderFunctionArgs) => {\n  return deleteFeedbackSubmissionAction(request);\n}\n```\n\n----------------------------------------\n\nTITLE: Running TypeScript Type Checking (Bash)\nDESCRIPTION: Executes the `typecheck` script via `pnpm run`. This command typically invokes the TypeScript compiler (`tsc`) with the `noEmit` flag to verify type correctness across all relevant files in the Turborepo setup without generating JavaScript output.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/code_health_common_commands_conventions_48.md#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\npnpm run typecheck\n```\n\n----------------------------------------\n\nTITLE: Configuring Firebase Functions Scripts\nDESCRIPTION: These script entries in `package.json` facilitate the build and deployment of Firebase Functions. They leverage TypeScript for building (`tsc -P`) and the Firebase CLI for deploying to the cloud. Dependencies include TypeScript and Firebase CLI for successful execution.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/app_check_auth_flow_auth_hooks_69.md#2025-04-22_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n\"build:functions\": \"tsc -P functions/tsconfig.json\",\n\"build:functions:watch\": \"tsc -P functions/tsconfig.json --watch\",\n\"deploy:functions\": \"firebase deploy --only functions\"\n```\n\n----------------------------------------\n\nTITLE: Creating Organization Task Count Function\nDESCRIPTION: Function that returns the total number of tasks for a given organization.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/supabase_not_stopping_tables_not_found_dark_theme_22.md#2025-04-22_snippet_25\n\nLANGUAGE: plpgsql\nCODE:\n```\ncreate or replace function get_organization_task_count(org_id bigint)\nreturns int as $$\ndeclare\n    task_count int;\nbegin\n    select count(*)\n        from tasks\n        where organization_id = org_id\n        into task_count;\n\n    return task_count;\nend;\n$$ language plpgsql;\n```\n\n----------------------------------------\n\nTITLE: Configuring Top Header Navigation in TypeScript\nDESCRIPTION: This snippet demonstrates how to define the NAVIGATION_CONFIG object that controls the top header navigation menu. It includes the structure for navigation items with labels, paths, and icons, as well as a helper function to generate the correct path based on organization ID.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/deploying_production_environment_variables_functions_26.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst NAVIGATION_CONFIG = (organization: string) => ({\n  items: [\n    {\n      label: 'common:dashboardTabLabel',\n      path: getPath(organization, ''),\n      Icon: ({ className }: { className: string }) => {\n        return <Squares2X2Icon className={className} />;\n      },\n      end: true,\n    },\n    {\n      label: 'common:tasksTabLabel',\n      path: getPath(organization, 'tasks'),\n      Icon: ({ className }: { className: string }) => {\n        return <RectangleStackIcon className={className} />;\n      },\n    },\n    {\n      label: 'common:settingsTabLabel',\n      path: getPath(organization, 'settings'),\n      Icon: ({ className }: { className: string }) => {\n        return <Cog8ToothIcon className={className} />;\n      },\n    },\n  ],\n});\n\nfunction getPath(organizationId: string, path: string) {\n  const appPrefix = configuration.paths.appPrefix;\n\n  return [appPrefix, organizationId, path].filter(Boolean).join('/');\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Container CSS Utilities in Tailwind\nDESCRIPTION: Updates to container utility classes in Tailwind CSS v4, changing from mobile-first padding to new container syntax with auto margins and max-width constraints.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/running_project_technical_details_update_nextjs15_50.md#2025-04-22_snippet_8\n\nLANGUAGE: css\nCODE:\n```\n/* Old */\n.container {\n  @apply max-sm:px-4;\n}\n\n/* New */\n@utility container {\n  margin-inline: auto;\n  @apply xl:max-w-[80rem] px-8;\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Types for Database Schema\nDESCRIPTION: This command uses Supabase tools to generate and refresh TypeScript types based on the current database schema, ensuring type safety and consistency in accessing database tables such as `plans`.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/payments_billing_6.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\npnpm run supabase:web:typegen\n```\n\n----------------------------------------\n\nTITLE: Fetching Account Workspace Data using Accounts API in TSX\nDESCRIPTION: Initializes the Accounts API using a client instance and fetches the workspace data associated with the current user account. This data is typically loaded in the user account layout, so direct calls might be infrequent.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/analytics_api_custom_analytics_provider_google_analytics_provider_57.md#2025-04-22_snippet_29\n\nLANGUAGE: tsx\nCODE:\n```\nconst api = createAccountsApi(client);\nconst workspace = await api.getAccountWorkspace();\n```\n\n----------------------------------------\n\nTITLE: Ngrok Command for Local Testing\nDESCRIPTION: NPM script command for setting up ngrok to test webhook handling locally\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/technical_details_going_to_production_overview_publish_firebase_security_rules_72.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n\"ngrok\": \"npx ngrok http 3000\"\n```\n\n----------------------------------------\n\nTITLE: Using Alert Component Reference\nDESCRIPTION: Reference to the Alert component usage for displaying feedback messages in an accessible way within forms.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/app_breadcrumbs_bordered_navigation_menu_card_button_39.md#2025-04-22_snippet_37\n\nLANGUAGE: jsx\nCODE:\n```\nAlert\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Notifications in Remix Supabase SaaS Kit\nDESCRIPTION: Configure notification settings by setting environment variables for enabling notifications and real-time updates.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/technical_details_updating_codebase_installation_97.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nVITE_ENABLE_NOTIFICATIONS=true\nVITE_REALTIME_NOTIFICATIONS=true\n```\n\n----------------------------------------\n\nTITLE: Adding Google Analytics Plugin Dependency with pnpm\nDESCRIPTION: Adds the `@kit/google-analytics` package as a dev dependency to the `@kit/analytics` workspace using pnpm. The `--filter \"@kit/analytics\"` flag ensures the dependency is added specifically to that workspace within a Turborepo setup.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/google_analytics_provider_posthog_analytics_provider_umami_analytics_provider_88.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm add \"@kit/google-analytics@workspace:*\" --filter \"@kit/analytics\" -D\n```\n\n----------------------------------------\n\nTITLE: Type-Safe If Component Render Prop Usage - React - TypeScript\nDESCRIPTION: Demonstrates TypeScript-typed usage of the If component's render prop, ensuring correct attribute references (name, email) on user objects in a safe way. Inputs: user object; outputs: UserProfile with name and email. Ensures type-checked conditional UI in strongly-typed React projects.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/bordered_navigation_menu_card_button_cookie_banner_60.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n<If condition={user}>\n  {(user) => <UserProfile name={user.name} email={user.email} />}\n</If>\n```\n\n----------------------------------------\n\nTITLE: Updating Tailwind CSS Configuration for Testimonials Plugin\nDESCRIPTION: This JavaScript snippet shows how to update the Tailwind CSS configuration to include the Testimonials plugin folder in the content paths.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/sentry_monitoring_notifications_configuration_51.md#2025-04-22_snippet_32\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  darkMode: ['class'],\n  content: [\n    '../../packages/ui/src/**/*.tsx',\n    '../../packages/billing/gateway/src/**/*.tsx',\n    '../../packages/features/auth/src/**/*.tsx',\n    '../../packages/features/notifications/src/**/*.tsx',\n    '../../packages/features/admin/src/**/*.tsx',\n    '../../packages/features/accounts/src/**/*.tsx',\n    '../../packages/features/team-accounts/src/**/*.tsx',\n    '../../packages/plugins/testimonials/src/**/*.tsx'  // <-- add this line\n    '!**/node_modules',\n  ],\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Shadcn UI Theme CSS Variable Examples\nDESCRIPTION: Examples showing the conversion of Shadcn UI theme CSS variables from standard format to HSL function format.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/cms_api_cms_creating_your_own_cms_client_42.md#2025-04-22_snippet_18\n\nLANGUAGE: css\nCODE:\n```\n--color-primary: 229 231 239;\n```\n\nLANGUAGE: css\nCODE:\n```\n--color-primary: hsl(229 23% 15%);\n```\n\n----------------------------------------\n\nTITLE: Configuring Routes in React Router TypeScript\nDESCRIPTION: Updates the route configuration to include new report routes and navigation settings within a user account layout.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/supabase_clients_data_fetching_adding_pages_63.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst userAccountLayout = layout('routes/home/user/layout.tsx', [\n  route('home', 'routes/home/user/index.tsx'),\n  route('home/settings', 'routes/home/user/settings.tsx'),\n  route('home/billing', 'routes/home/user/billing.tsx'),\n  route('home/billing/return', 'routes/home/user/billing-return.tsx'),\n  route('home/reports', 'routes/home/user/reports.tsx'), // Add your new route here\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Flat Subscription Line Items\nDESCRIPTION: Example of adding a flat subscription line item to a plan, where the ID must match the price ID in the billing provider.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/user_workspace_api_api_billing_api_37.md#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nexport default createBillingSchema({\n  provider,\n  products: [\n    {\n      id: 'starter',\n      name: 'Starter',\n      description: 'The perfect plan to get started',\n      currency: 'USD',\n      badge: `Value`,\n      plans: [\n        {\n          name: 'Starter Monthly',\n          id: 'starter-monthly',\n          trialDays: 7,\n          paymentType: 'recurring',\n          interval: 'month',\n          lineItems: [\n            {\n              id: 'price_1NNwYHI1i3VnbZTqI2UzaHIe',\n              name: 'Addon 2',\n              cost: 9.99,\n              type: 'flat',\n            },\n          ],\n        }\n      ],\n    }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Users Table in Supabase\nDESCRIPTION: SQL schema for the users table that stores additional user data like profile photo, display name and onboarding status. Links to Supabase auth.users table.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/ui_hooks_mdx_15.md#2025-04-22_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\ncreate table users (\n  id uuid references auth.users not null primary key,\n  photo_url text,\n  display_name text,\n  onboarded bool not null\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Navigation Configuration in React\nDESCRIPTION: Default navigation configuration implementation showing how to structure the sidebar menu with icons and routes\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/call_api_routes_from_client_csrf_token_guarding_api_routes_7.md#2025-04-22_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\nimport configuration from '~/configuration';\n\nimport {\n  Cog8ToothIcon,\n  Square3Stack3DIcon,\n  Squares2X2Icon,\n} from '@heroicons/react/24/outline';\n\nconst NAVIGATION_CONFIG = {\n  items: [\n    {\n      label: 'common:dashboardTabLabel',\n      path: configuration.paths.appHome,\n      Icon: ({ className }: { className: string }) => {\n        return <Squares2X2Icon className={className} />;\n      },\n    },\n    {\n      label: 'common:tasksTabLabel',\n      path: '/tasks',\n      Icon: ({ className }: { className: string }) => {\n        return <Square3Stack3DIcon className={className} />;\n      },\n    },\n    {\n      label: 'common:settingsTabLabel',\n      path: '/settings',\n      Icon: ({ className }: { className: string }) => {\n        return <Cog8ToothIcon className={className} />;\n      },\n    },\n  ],\n};\n\nexport default NAVIGATION_CONFIG;\n```\n\n----------------------------------------\n\nTITLE: Creating Feedback Database Migration\nDESCRIPTION: Command to create a new migration file for feedback functionality\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/sentry_monitoring_notifications_configuration_51.md#2025-04-22_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\npnpm --filter web supabase migration new feedback\n```\n\n----------------------------------------\n\nTITLE: Configuring Navigation Menu in Next.js\nDESCRIPTION: Demonstrates how to add a new entry to a navigation menu by updating the `links` object and integrating it within the `NavigationMenu` component. No external dependencies are required.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/environment_variables_setup_project_configuration_set_up_emails_9.md#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nconst links = {\n  SignIn: {\n    label: 'Sign In',\n    path: '/auth/sign-in',\n  },\n  Blog: {\n    label: 'Blog',\n    path: '/blog',\n  },\n  Docs: {\n    label: 'Docs',\n    path: '/docs',\n  },\n  Pricing: {\n    label: 'Pricing',\n    path: '/pricing',\n  },\n  FAQ: {\n    label: 'FAQ',\n    path: '/faq',\n  },\n  NewPage: {\n    label: 'New Page',\n    path: '/new-page',\n  },\n};\n```\n\nLANGUAGE: tsx\nCODE:\n```\n<NavigationMenu>\n  <NavigationMenuItem\n    className={'flex lg:hidden'}\n    link={links.SignIn}\n  />\n\n  <NavigationMenuItem link={links.Blog} />\n  <NavigationMenuItem link={links.Docs} />\n  <NavigationMenuItem link={links.Pricing} />\n  <NavigationMenuItem link={links.FAQ} />\n\n  <NavigationMenuItem link={links.NewPage} />\n</NavigationMenu>\n```\n\n----------------------------------------\n\nTITLE: Updating Subscription Mapper Function in TypeScript\nDESCRIPTION: Shows how to modify the subscriptionMapper function to include the new 'quantity' property and other custom data in the subscription object.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_one_time_payments_stripe_webhooks_payments_35.md#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nfunction subscriptionMapper(\n  subscription: Stripe.Subscription\n): SubscriptionRow {\n  const lineItem = subscription.items.data[0];\n  const price = lineItem.price;\n  const priceId = price.id;\n  const interval = price?.recurring?.interval ?? null;\n  const intervalCount = price?.recurring?.interval_count ?? null;\n\n  const row: Partial<SubscriptionRow> = {\n    // custom props\n    quantity: lineItem.quantity,\n\n    // default props\n    price_id: priceId,\n    currency: subscription.currency,\n    status: subscription.status ?? 'incomplete',\n    interval,\n    interval_count: intervalCount,\n    cancel_at_period_end: subscription.cancel_at_period_end ?? false,\n    created_at: subscription.created ? toISO(subscription.created) : undefined,\n    period_starts_at: subscription.current_period_start\n      ? toISO(subscription.current_period_start)\n      : undefined,\n    period_ends_at: subscription.current_period_end\n      ? toISO(subscription.current_period_end)\n      : undefined,\n  };\n\n  if (subscription.trial_start) {\n    row.trial_starts_at = toISO(subscription.trial_start);\n  }\n\n  if (subscription.trial_end) {\n    row.trial_ends_at = toISO(subscription.trial_end);\n  }\n\n  return row as SubscriptionRow;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a CMS Client in Makerkit\nDESCRIPTION: Shows how to create a CMS client using the createCmsClient function, which returns a client that can be used to fetch content from your CMS.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stepper_components_application_configuration_61.md#2025-04-22_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createCmsClient } from '@kit/cms';\n\nconst client = await createCmsClient();\n```\n\n----------------------------------------\n\nTITLE: Creating CMS Client in TypeScript\nDESCRIPTION: Demonstrates how to create a CMS client using the createCmsClient function. This client can be used to fetch content from the configured CMS.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/team_account_sidebar_configuration_configuration_cms_api_92.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createCmsClient } from '@kit/cms';\n\nconst client = await createCmsClient();\n```\n\n----------------------------------------\n\nTITLE: Conditional Data Display with Fallback using 'If' Component in React (JSX)\nDESCRIPTION: Demonstrates using the 'If' component to display data. If 'hasData' is true, it renders 'DataDisplay'; otherwise, it renders the 'NoDataMessage' provided as fallback content.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/app_breadcrumbs_bordered_navigation_menu_card_button_39.md#2025-04-22_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\n<If condition={hasData} fallback={<NoDataMessage />}>\n  <DataDisplay data={data} />\n</If>\n```\n\n----------------------------------------\n\nTITLE: Email Configuration Environment Variables\nDESCRIPTION: Environment variables required for configuring email service\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/server_actions_uploading_data_to_storage_writing_data_to_supabase_17.md#2025-04-22_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nEMAIL_HOST=\nEMAIL_PORT=587\nEMAIL_USER=\nEMAIL_PASSWORD=\nEMAIL_SENDER='MakerKit Team <info@makerkit.dev>'\n```\n\n----------------------------------------\n\nTITLE: Setting Firebase Environment Variables in Next.js\nDESCRIPTION: Environment variables configuration for Firebase project settings. These variables should be added to .env.production file to configure the Firebase client.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/third_party_auth_providers_authentication_blog_3.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nNEXT_PUBLIC_FIREBASE_API_KEY=\nNEXT_PUBLIC_FIREBASE_AUTH_DOMAIN=\nNEXT_PUBLIC_FIREBASE_PROJECT_ID=\nNEXT_PUBLIC_FIREBASE_STORAGE_BUCKET=\nNEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID=\nNEXT_PUBLIC_FIREBASE_APP_ID=\nNEXT_PUBLIC_FIREBASE_MEASUREMENT_ID=\n```\n\n----------------------------------------\n\nTITLE: Implementing Authenticated Reports Page in React Router TSX\nDESCRIPTION: Creates a new authenticated Reports page component with breadcrumbs, i18n support, and a basic reports UI layout. Includes user authentication check and meta information handling.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/supabase_clients_data_fetching_adding_pages_63.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// apps/web/app/routes/home/user/reports.tsx\nimport { AppBreadcrumbs } from '@kit/ui/app-breadcrumbs';\nimport { PageBody } from '@kit/ui/page';\nimport { Trans } from '@kit/ui/trans';\n\nimport { createI18nServerInstance } from '~/lib/i18n/i18n.server';\nimport { requireUserLoader } from '~/lib/require-user-loader';\nimport type { Route } from '~/types/app/routes/home/user/+types/reports';\n\nimport { HomeLayoutPageHeader } from './_components/home-page-header';\n\nexport const meta = ({ data }: Route.MetaArgs) => {\n  return [\n    {\n      title: data?.title,\n    },\n  ];\n};\n\nexport const loader = async (args: Route.LoaderArgs) => {\n  // require user\n  await requireUserLoader(args.request);\n\n  const i18n = await createI18nServerInstance(args.request);\n  const title = i18n.t('account:reportsTab');\n\n  return {\n    title,\n  };\n};\n\nexport default function UserReportsPage(props: Route.ComponentProps) {\n  return (\n    <>\n      <HomeLayoutPageHeader\n        title={<Trans i18nKey={'account:reportsTabLabel'} />}\n        description={<AppBreadcrumbs />}\n      />\n\n      <PageBody>\n        <div className=\"flex w-full flex-col space-y-6\">\n          <h1 className=\"text-2xl font-semibold\">Reports</h1>\n          <p className=\"text-muted-foreground\">\n            View usage statistics and reports for your account.\n          </p>\n\n          {/* Add your reports components here */}\n          <div className=\"grid grid-cols-1 gap-4 lg:grid-cols-2\">\n            <ReportCard title=\"Usage Statistics\" />\n            <ReportCard title=\"Activity Log\" />\n          </div>\n        </div>\n      </PageBody>\n    </>\n  );\n}\n\nfunction ReportCard({ title }: { title: string }) {\n  return (\n    <div className=\"rounded-md border p-4\">\n      <h2 className=\"text-lg font-medium\">{title}</h2>\n      <div className=\"h-32 w-full bg-gray-100 dark:bg-gray-800 mt-2 flex items-center justify-center\">\n        <span className=\"text-muted-foreground\">Report data will appear here</span>\n      </div>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Waitlist Translations in JSON\nDESCRIPTION: JSON translation configuration for waitlist feature including headers, buttons, and status messages.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/text_editor_plugin_waitlist_plugin_plugins_98.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"waitlist\": {\n    \"heading\": \"Join the Waitlist for Early Access\",\n    \"submitButton\": \"Join Waitlist\",\n    \"error\": \"Ouch, we couldn't add you to the waitlist. Please try again.\",\n    \"errorDescription\": \"We couldn't add you to the waitlist. If you have already signed up, you are already on the waitlist.\",\n    \"success\": \"You're on the waitlist!\",\n    \"successDescription\": \"We'll let you know when you can sign up.\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Start Production Server Command\nDESCRIPTION: Command to start the production server after building the application with the 'build' command.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/uploading_data_to_storage_writing_data_to_supabase_data_fetching_77.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Credentials for Super Admin Authentication\nDESCRIPTION: JSON configuration showing the email and password for logging in as a super admin user in the local development environment.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/introduction_migration_from_remix_navigating_codebase_67.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"email\": \"super-admin@makerkit.dev\",\n  \"password\": \"testingpassword\"\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling MDX to JavaScript in Next.js\nDESCRIPTION: First step in rendering MDX content, using the compileMdx utility to convert MDX string content to JavaScript representation.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/ui_hooks_mdx_15.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { compileMdx } from '~/core/generic';\n\n// MDX string\nconst content = '';\n\n// JS representation of your MDX content\nconst compiled = compileMdx(content);\n```\n\n----------------------------------------\n\nTITLE: Handling OPTIONS Requests for CORS in Remix\nDESCRIPTION: Code snippet showing how to handle OPTIONS requests for CORS preflight in a Remix application.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/setting_up_firebase_custom_fetch_fetching_data_firestore_70.md#2025-04-22_snippet_30\n\nLANGUAGE: tsx\nCODE:\n```\nif (request.method === `OPTIONS`) {\n  return new Response(null, {\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, HEAD, POST, PUT, DELETE',\n    },\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Running Supabase Migration and Type Generation Commands\nDESCRIPTION: These bash commands are used to create a new migration file, run the migration, and update the types for the Supabase database.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/sentry_monitoring_notifications_configuration_51.md#2025-04-22_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\npnpm --filter web supabase migration new testimonials\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm run supabase:web:reset\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm run supabase:web:typegen\n```\n\n----------------------------------------\n\nTITLE: Configuring Stripe Environment Variables for Makerkit\nDESCRIPTION: Environment variables required for Stripe integration in Makerkit, including the secret key, webhook secret, and publishable key. These variables should be added to the appropriate environment configuration files.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/lemon_squeezy_metered_usage_one_off_payments_59.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nSTRIPE_SECRET_KEY=\nSTRIPE_WEBHOOK_SECRET=\nVITE_STRIPE_PUBLISHABLE_KEY=\n```\n\n----------------------------------------\n\nTITLE: Implementing ServerDataLoader Component\nDESCRIPTION: This example illustrates how to use the 'ServerDataLoader' component from the '@makerkit/data-loader-supabase-nextjs' package to build a table of organizations. The component requires a Supabase client created with 'getSupabaseServerComponentClient', and uses properties such as 'table' and 'select' to specify data retrieval. The component renders a table using the DataTable UI component with the obtained data.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/ai_text_editor_cookie_banner_feedback_popup_24.md#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ServerDataLoader } from '@makerkit/data-loader-supabase-nextjs';\nimport getSupabaseServerComponentClient from '~/core/supabase/server-component-client';\nimport DataTable from '~/core/ui/DataTable';\n\nconst OrganizationsTable = () => {\n  const client = getSupabaseServerComponentClient();\n\n  return (\n    <ServerDataLoader\n      client={client}\n      table=\"organizations\"\n      select={[\"id\", \"name\"]}\n    >\n      {({ data, count, pageSize, pageCount }) => {\n        return (\n          <DataTable\n            data={data}\n            count={count}\n            pageSize={pageSize}\n            pageCount={pageCount}\n            columns=[\n              {\n                header: 'ID',\n                accessorKey: 'id',\n              },\n              {\n                header: 'Name',\n                accessorKey: 'name',\n              }\n            ]\n          />\n        );\n      }}\n    </ServerDataLoader>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with pnpm\nDESCRIPTION: Command to install all project dependencies using pnpm package manager.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/configuring_supabase_database_webhooks_fly_production_environment_variables_95.md#2025-04-22_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\npnpm i\n```\n\n----------------------------------------\n\nTITLE: Starting Production Server\nDESCRIPTION: Command to start a production server after building the application.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/commands_cors_develop_firebase_security_rules_5.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Setting Service Account Private Key\nDESCRIPTION: Environment variable for the Firebase service account private key, required for server-side admin permissions.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/setting_up_firebase_custom_fetch_fetching_data_firestore_70.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nSERVICE_ACCOUNT_PRIVATE_KEY=\n```\n\n----------------------------------------\n\nTITLE: Configuring Resend Mailer Provider (Bash)\nDESCRIPTION: Sets the `MAILER_PROVIDER` environment variable to `resend` in the `apps/web/.env` file to configure the application to use Resend for sending emails. This variable determines which mailer implementation will be used by the `getMailer` utility.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/database_webhooks_legal_pages_marketing_pages_64.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nMAILER_PROVIDER=resend\n```\n\n----------------------------------------\n\nTITLE: Creating Tasks Table Schema with RLS\nDESCRIPTION: SQL schema definition for tasks table with organization relationship and Row Level Security (RLS) policy implementation\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/user_sdk_sdk_ci_tests_84.md#2025-04-22_snippet_22\n\nLANGUAGE: sql\nCODE:\n```\ncreate table tasks (\n  id bigint generated always as identity primary key,\n  organization_id bigint not null references public.organizations,\n  name text not null,\n  description text,\n  done bool not null,\n  due_date timestamptz not null\n);\n```\n\nLANGUAGE: sql\nCODE:\n```\nalter table tasks enable row level security;\n\ncreate policy \"Tasks can be read by users of the organizations to which it belongs\" on tasks\n  for all\n    using (\n      exists (\n        select\n          1\n        from\n          memberships\n        where\n          user_id = auth.uid () and\n          tasks.organization_id = memberships.organization_id\n      )\n    );\n```\n\n----------------------------------------\n\nTITLE: Handling OPTIONS Requests with CORS\nDESCRIPTION: Next.js request handler for OPTIONS requests with CORS headers\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/server_actions_uploading_data_to_storage_writing_data_to_supabase_17.md#2025-04-22_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nimport { NextRequest } from \"next/server\";\n\nexport async function GET(request: NextRequest) {\n  if (request.method === `OPTIONS`) {\n    return new Response(null, {\n      headers: {\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Methods': 'GET, HEAD, POST, PUT, DELETE',\n      },\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring WordPress API URL\nDESCRIPTION: This environment variable specifies the WordPress API endpoint when using WordPress as the CMS system.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stepper_components_application_configuration_41.md#2025-04-22_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nWORDPRESS_API_URL=https://your-wordpress-site.com/wp-json\n```\n\n----------------------------------------\n\nTITLE: Legacy Personal Account Navigation\nDESCRIPTION: Shows the older flat route configuration structure used prior to October 2024, demonstrating feature flag integration.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stepper_components_application_configuration_41.md#2025-04-22_snippet_29\n\nLANGUAGE: tsx\nCODE:\n```\nconst routes = [\n  {\n    label: 'common:homeTabLabel',\n    path: pathsConfig.app.home,\n    Icon: <Home className={iconClasses} />,\n    end: true,\n  },\n  {\n    label: 'account:accountTabLabel',\n    path: pathsConfig.app.personalAccountSettings,\n    Icon: <User className={iconClasses} />,\n  },\n];\n\nif (featureFlagsConfig.enablePersonalAccountBilling) {\n  routes.push({\n    label: 'common:billingTabLabel',\n    path: pathsConfig.app.personalAccountBilling,\n    Icon: <CreditCard className={iconClasses} />,\n  });\n}\n\nexport const personalAccountSidebarConfig = SidebarConfigSchema.parse({\n  routes,\n  style: process.env.NEXT_PUBLIC_USER_NAVIGATION_STYLE,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS Content Paths\nDESCRIPTION: Configuration for Tailwind CSS v3 to include plugin directory paths in content scanning.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/waitlist_plugin_plugins_drizzle_supabase_52.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  darkMode: ['class'],\n  content: [\n    '../../packages/ui/src/**/*.tsx',\n    '../../packages/billing/gateway/src/**/*.tsx',\n    '../../packages/features/auth/src/**/*.tsx',\n    '../../packages/features/notifications/src/**/*.tsx',\n    '../../packages/features/admin/src/**/*.tsx',\n    '../../packages/features/accounts/src/**/*.tsx',\n    '../../packages/features/team-accounts/src/**/*.tsx',\n    '../../packages/plugins/waitlist/src/**/*.tsx'  // <-- add this line\n    '!**/node_modules',\n  ],\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Git Repository Configuration\nDESCRIPTION: Series of Git commands to set up the repository with proper remote origins and upstream tracking\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/uploading_data_to_storage_writing_data_to_supabase_data_fetching_77.md#2025-04-22_snippet_40\n\nLANGUAGE: bash\nCODE:\n```\ncd my-saas\ngit remote rm origin\ngit remote add origin <your-git-repository>\ngit remote add upstream git@github.com:makerkit/remix-supabase-saas-kit.git\ngit add .\ngit commit -a -m \"Initial Commit\"\n```\n\n----------------------------------------\n\nTITLE: Setting Supabase Service Role Key in Bash\nDESCRIPTION: Adds the Supabase service role key as an environment variable for authentication and database access.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stepper_components_application_configuration_61.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nSUPABASE_SERVICE_ROLE_KEY=\n```\n\n----------------------------------------\n\nTITLE: Setting Site and Authentication Environment Variables in Bash\nDESCRIPTION: Configures environment variables for site details, authentication, and billing provider using Bash syntax.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stepper_components_application_configuration_61.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# SITE\nVITE_SITE_URL=http://localhost:5173\nVITE_PRODUCT_NAME=Makerkit\nVITE_SITE_TITLE=\"Makerkit - The easiest way to build and manage your SaaS\"\nVITE_SITE_DESCRIPTION=\"Makerkit is the easiest way to build and manage your SaaS. It provides you with the tools you need to build your SaaS, without the hassle of building it from scratch.\"\nVITE_DEFAULT_THEME_MODE=light\nVITE_THEME_COLOR=\"#ffffff\"\nVITE_THEME_COLOR_DARK=\"#0a0a0a\"\n\n# AUTH\nVITE_AUTH_PASSWORD=true\nVITE_AUTH_MAGIC_LINK=false\nVITE_CAPTCHA_SITE_KEY=\n\n# BILLING\nVITE_BILLING_PROVIDER=stripe\n\n# CMS\nCMS_CLIENT=keystatic\n\n# KEYSTATIC\nVITE_KEYSTATIC_CONTENT_PATH=./content\n\n# LOCALES PATH\nVITE_LOCALES_PATH=apps/web/public/locales\n\n# PATHS (to be used in \"packages\")\nSIGN_IN_PATH=/auth/sign-in\nSIGN_UP_PATH=/auth/sign-up\nTEAM_ACCOUNTS_HOME_PATH=/home\nINVITATION_PAGE_PATH=/join\n```\n\n----------------------------------------\n\nTITLE: Configuring KeyStatic Cloud Storage Environment Variables\nDESCRIPTION: Additional environment variables required when using KeyStatic Cloud as the storage option.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/creating_your_own_cms_client_keystatic_wordpress_62.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nKEYSTATIC_STORAGE_KIND=cloud\nKEYSTATIC_STORAGE_PROJECT=project-id\n```\n\n----------------------------------------\n\nTITLE: Implementing Script Tag with Account ID for Widget Loading\nDESCRIPTION: HTML script tag that loads the widget with an account ID passed as a data attribute to identify which account the widget belongs to.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/building_javascript_widget_1.md#2025-04-22_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<script\n  data-account=\"account-id\"\n  src=\"https://widget-url.com/widget.js\"\n></script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Feedback API Route\nDESCRIPTION: Creation of an API route handler for submitting feedback using Remix action function.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/technical_details_updating_codebase_installation_97.md#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ActionFunctionArgs } from '@remix-run/server-runtime';\n\nimport { submitFeedbackAction } from '@kit/feedback/server';\n\nexport const action = ({ request }: ActionFunctionArgs) => {\n  if (request.method !== 'POST') {\n    return new Response(null, { status: 405 });\n  }\n\n  return submitFeedbackAction(request);\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Integration Interface in TypeScript\nDESCRIPTION: This snippet defines an enum for integration types and an interface for integrations, which can be used to extend the organization's data model.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/technical_details_going_to_production_overview_publish_firebase_security_rules_72.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nenum IntegrationType {\n  Zapier,\n  Notion,\n  // etc\n}\n\ninterface Integration<IntegrationData = unknown> {\n  type: IntegrationType;\n  data: IntegrationData;\n}\n```\n\n----------------------------------------\n\nTITLE: Stripe Plan Configuration Interface\nDESCRIPTION: Example of plan configuration structure including payment mode specification.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_configuration_stripe_one_time_payments_stripe_webhooks_82.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n{\n  name: 'Basic',\n  description: 'Unlimited applications and 2-hour onboarding session',\n  price: '$249 one off!',\n  stripePriceId: 'price_***********',\n  mode: 'payment'\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering with If Component in React\nDESCRIPTION: Demonstrates the basic usage of the If component for declarative conditional rendering in React applications, including support for fallback content and memoization for performance.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/paddle_per_seat_billing_stripe_90.md#2025-04-22_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nimport { If } from '@kit/ui/if';\n\nfunction MyComponent({ isLoggedIn, user }) {\n  return (\n    <If condition={isLoggedIn} fallback={<LoginPrompt />}>\n      {(value) => <WelcomeMessage user={user} />}\n    </If>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing i18n in Server Components\nDESCRIPTION: TypeScript code showing how to initialize i18n translations in server components\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/translations_updating_latest_version_tutorials_28.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst i18n = await initializeServerI18n(getLanguageCookie());\n```\n\n----------------------------------------\n\nTITLE: Defining the Tasks Table Schema - SQL\nDESCRIPTION: Establishes the table structure for storing tasks, with fields for a serial primary key, name, foreign user ID (linked to users table), due date, description, and completion status. Dependencies: must have a users table with UUID primary key. All fields except description and done are required.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/adding_app_pages_guarding_pages_updating_sidebar_menu_32.md#2025-04-22_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\ncreate table tasks (\n  id serial primary key,\n  name text,\n  user_id uuid references public.users not null,\n  due_date timestamp,\n  description text,\n  done boolean default false\n);\n```\n\n----------------------------------------\n\nTITLE: Updating Navigation in React Component\nDESCRIPTION: Demonstrates how to update the navigation component to include a link to the new 'Features' page in the site navigation.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/supabase_clients_data_fetching_adding_pages_63.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst links = {\n  Blog: {\n    label: 'marketing:blog',\n    path: '/blog',\n  },\n  Features: {    // Add this new item\n    label: 'marketing:features',\n    path: '/features',\n  },\n  Docs: {\n    label: 'marketing:documentation',\n    path: '/docs',\n  },\n  // ...other links\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing CSS Variables for Shadcn UI Theme\nDESCRIPTION: CSS customization for the Shadcn UI theme in a Next.js application. This includes setting color variables for both light and dark modes, with a focus on implementing a violet-based theme for light mode.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/customization_2.md#2025-04-22_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n@layer base {\n  :root {\n    --background: hsl(0 0% 100%);\n    --foreground: hsl(224 71.4% 4.1%);\n    --card: hsl(0 0% 100%);\n    --card-foreground: hsl(224 71.4% 4.1%);\n    --popover: hsl(0 0% 100%);\n    --popover-foreground: hsl(224 71.4% 4.1%);\n    --primary: hsl(262.1 83.3% 57.8%);\n    --primary-foreground: hsl(210 20% 98%);\n    --secondary: hsl(220 14.3% 95.9%);\n    --secondary-foreground: hsl(220.9 39.3% 11%);\n    --muted: hsl(220 14.3% 95.9%);\n    --muted-foreground: hsl(220 8.9% 46.1%);\n    --accent: hsl(220 14.3% 95.9%);\n    --accent-foreground: hsl(220.9 39.3% 11%);\n    --destructive: hsl(0 84.2% 60.2%);\n    --destructive-foreground: hsl(210 20% 98%);\n    --border: hsl(220 13% 91%);\n    --input: hsl(220 13% 91%);\n    --ring: hsl(262.1 83.3% 57.8%);\n    --radius: 0.75rem;\n\n    --chart-1: hsl(12 76% 61%);\n    --chart-2: hsl(173 58% 39%);\n    --chart-3: hsl(197 37% 24%);\n    --chart-4: hsl(43 74% 66%);\n    --chart-5: hsl(27 87% 67%);\n\n    --sidebar-background: hsl(0 0% 98%);\n    --sidebar-foreground: hsl(240 5.3% 26.1%);\n    --sidebar-primary: hsl(240 5.9% 10%);\n    --sidebar-primary-foreground: hsl(0 0% 98%);\n    --sidebar-accent: hsl(240 4.8% 95.9%);\n    --sidebar-accent-foreground: hsl(240 5.9% 10%);\n    --sidebar-border: hsl(220 13% 91%);\n    --sidebar-ring: hsl(217.2 91.2% 59.8%);\n  }\n\n  .dark {\n    --background: hsl(224 71% 4%);\n    --foreground: hsl(213 31% 91%);\n    --muted: hsl(223 47% 11%);\n    --muted-foreground: hsl(215.4 16.3% 56.9%);\n    --accent: hsl(216 34% 10%);\n    --accent-foreground: hsl(210 40% 98%);\n    --popover: hsl(224 71% 4%);\n    --popover-foreground: hsl(215 20.2% 65.1%);\n    --border: hsl(216 34% 17%);\n    --input: hsl(216 34% 17%);\n    --card: hsl(224 71% 4%);\n    --card-foreground: hsl(213 31% 91%);\n    --secondary: hsl(216 34% 10%);\n    --secondary-foreground: hsl(210 40% 98%);\n    --destructive: hsl(0 63% 31%);\n    --destructive-foreground: hsl(210 40% 98%);\n    --ring: hsl(216 34% 17%);\n\n    --chart-1: hsl(220 70% 50%);\n    --chart-2: hsl(160 60% 45%);\n    --chart-3: hsl(30 80% 55%);\n    --chart-4: hsl(280 65% 60%);\n    --chart-5: hsl(340 75% 55%);\n\n    --sidebar-background: hsl(224 71.4% 4.1%);\n    --sidebar-foreground: hsl(240 4.8% 95.9%);\n    --sidebar-primary: hsl(224.3 76.3% 48%);\n    --sidebar-primary-foreground: hsl(0 0% 100%);\n    --sidebar-accent: hsl(215 27.9% 13%);\n    --sidebar-accent-foreground: hsl(240 4.8% 95.9%);\n    --sidebar-border: hsl(240 3.7% 15.9%);\n    --sidebar-ring: hsl(217.2 91.2% 59.8%);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Interface for API Request Body\nDESCRIPTION: This TypeScript interface defines the expected structure for an API request body, aligning with the previously defined Zod schema. It types 'displayName' as a string and 'email' using a custom 'Email' type (presumably a string type alias).\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/ci_tests_running_tests_testing_limitations_12.md#2025-04-22_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\ninterface Body {\n  displayName: string;\n  email: Email;\n}\n```\n\n----------------------------------------\n\nTITLE: Running a Script within a Specific App using PNPM Bash\nDESCRIPTION: Executes the `dev` script specifically within the `web` application of the Turborepo monorepo using PNPM's `--filter` flag. This is an alternative way to start the development server for the `web` app, demonstrating the filtering capability. Requires PNPM and the monorepo structure.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/deploy_production_introduction_5.md#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\npnpm --filter web dev\n```\n\n----------------------------------------\n\nTITLE: Importing and Using the Language Selector Component\nDESCRIPTION: This code demonstrates how to import and use the LanguageSelector component in a Next.js application to allow users to change the application's language.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/team_accounts_only_recipes_adding_translations_55.md#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LanguageSelector } from '@kit/ui/language-selector';\n\n<LanguageSelector />\n```\n\n----------------------------------------\n\nTITLE: Button Component with Different Variants in React\nDESCRIPTION: This code demonstrates how to use different button variants from ShadcnUI. It shows examples of outline, secondary, and destructive button variants, allowing for different visual styles based on the button's purpose.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/multi_step_forms_page_shadcn_40.md#2025-04-22_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from '@kit/ui/button';\n\nexport default function ButtonDemo() {\n  return (\n    <Button variant=\"outline\">Outline</Button>\n    <Button variant=\"secondary\">Secondary</Button>\n    <Button variant=\"destructive\">Destructive</Button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Return Type Definition for OTP API revokeToken Method (TypeScript)\nDESCRIPTION: Specifies the return type for the `api.revokeToken` method of the OTP API. It returns an object with a single boolean property `success` indicating whether the token revocation was successful.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/analytics_api_custom_analytics_provider_google_analytics_provider_57.md#2025-04-22_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  success: boolean;     // Whether the token was successfully revoked\n}\n```\n\n----------------------------------------\n\nTITLE: Installing the OTP Package using pnpm (Bash)\nDESCRIPTION: Command to manually install the `@kit/otp` package using the pnpm package manager. This package provides OTP functionalities and is pre-included in Makerkit.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/analytics_api_custom_analytics_provider_google_analytics_provider_57.md#2025-04-22_snippet_34\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @kit/otp\n```\n\n----------------------------------------\n\nTITLE: Running Project Tests (Bash)\nDESCRIPTION: Executes the `test` script defined in the project's `package.json` using `pnpm run`. This typically runs unit tests, integration tests, or end-to-end tests across the Turborepo workspaces.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/code_health_common_commands_conventions_48.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\npnpm run test\n```\n\n----------------------------------------\n\nTITLE: ConsentStatus Enum Definition in TypeScript\nDESCRIPTION: Defines the ConsentStatus enum used by the cookie consent system to track user consent preference. It includes three states: Accepted, Rejected, and Unknown.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/paddle_per_seat_billing_stripe_90.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nenum ConsentStatus {\n  Accepted = 'accepted',\n  Rejected = 'rejected',\n  Unknown = 'unknown'\n}\n```\n\n----------------------------------------\n\nTITLE: Importing AI Text Editor CSS in Remix Application\nDESCRIPTION: CSS import statement to include the AI Text Editor's styles in your Remix application's global CSS file.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_configuration_stripe_one_time_payments_stripe_webhooks_82.md#2025-04-22_snippet_18\n\nLANGUAGE: css\nCODE:\n```\n@import \"../../plugins/text-editor/editor.css\";\n```\n\n----------------------------------------\n\nTITLE: Creating an SVG Logo Component with Linear Gradients in React\nDESCRIPTION: This code defines a LogoImage component that renders an SVG logo with path data and linear gradient definitions. The component can be customized with className props and includes light/dark mode gradient options.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/customization_2.md#2025-04-22_snippet_8\n\nLANGUAGE: TSX\nCODE:\n```\nexport function LogoImage({ className }: { className?: string }) {\n  return (\n    <svg\n      width=\"952\"\n      height=\"139\"\n      viewBox=\"0 0 952 139\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      className={className}\n    >\n      <path\n        d=\"M630.86 138V122.061C626.444 127.305 621.2 131.445 615.128 134.481C609.194 137.517 602.984 139.035 596.498 139.035C589.184 139.035 582.353 137.724 576.005 135.102C569.657 132.342 564.137 128.478 559.445 123.51C554.615 118.542 550.82 112.884 548.06 106.536C545.438 100.05 544.127 93.219 544.127 86.043C544.127 78.867 545.438 72.105 548.06 65.757C550.82 59.271 554.615 53.544 559.445 48.576C564.137 43.608 569.657 39.813 576.005 37.191C582.353 34.431 589.184 33.051 596.498 33.051C603.674 33.051 610.16 34.5 615.956 37.398C621.89 40.296 626.858 44.298 630.86 49.404V0.551993H649.076V138H630.86ZM596.498 51.888C591.944 51.888 587.597 52.785 583.457 54.579C579.317 56.235 575.729 58.65 572.693 61.824C569.657 64.998 567.242 68.724 565.448 73.002C563.654 77.142 562.757 81.489 562.757 86.043C562.757 95.289 566.069 103.362 572.693 110.262C575.729 113.436 579.317 115.92 583.457 117.714C587.597 119.508 591.944 120.405 596.498 120.405C601.052 120.405 605.399 119.508 609.539 117.714C613.817 115.92 617.474 113.436 620.51 110.262C627.134 103.362 630.446 95.289 630.446 86.043C630.446 81.489 629.549 77.142 627.755 73.002C625.961 68.724 623.546 64.998 620.51 61.824C617.474 58.65 613.817 56.235 609.539 54.579C605.399 52.785 601.052 51.888 596.498 51.888ZM687.511 94.116C687.511 97.428 688.684 100.878 691.03 104.466C693.514 108.054 696.343 111.09 699.517 113.574C705.313 118.128 712.075 120.405 719.803 120.405C732.085 120.405 742.09 114.471 749.818 102.603L765.55 111.918C760.168 120.612 753.544 127.305 745.678 131.997C737.812 136.689 729.187 139.035 719.803 139.035C712.765 139.035 706.072 137.724 699.724 135.102C693.376 132.342 687.787 128.547 682.957 123.717C678.127 118.887 674.332 113.298 671.572 106.95C668.95 100.602 667.639 93.909 667.639 86.871C667.639 79.833 668.95 73.14 671.572 66.792C674.332 60.306 678.127 54.648 682.957 49.818C687.649 44.988 693.169 41.262 699.517 38.64C706.003 36.018 712.765 34.707 719.803 34.707C726.841 34.707 733.534 36.018 739.882 38.64C746.368 41.262 751.957 44.988 756.649 49.818C766.861 60.306 771.967 72.45 771.967 86.25C771.967 88.734 771.76 91.356 771.346 94.116H687.511ZM719.803 51.681C714.145 51.681 708.832 52.923 703.864 55.407C698.896 57.891 694.894 61.203 691.858 65.343C688.96 69.345 687.511 73.623 687.511 78.177H752.095C752.095 73.623 750.577 69.345 747.541 65.343C744.643 61.203 740.71 57.891 735.742 55.407C730.774 52.923 725.461 51.681 719.803 51.681ZM840.737 65.343C840.323 62.859 839.426 60.513 838.046 58.305C835.424 53.751 830.249 51.474 822.521 51.474C818.381 51.474 815.207 51.957 812.999 52.923C810.101 54.027 807.893 55.614 806.375 57.684C804.995 59.754 804.305 62.031 804.305 64.515C804.305 67.551 805.409 70.311 807.617 72.795C809.963 75.417 813.758 76.797 819.002 76.935C828.248 77.349 835.7 78.453 841.358 80.247C847.154 82.041 851.57 85.146 854.606 89.562C857.78 93.978 859.367 100.188 859.367 108.192C859.367 116.334 856.262 123.372 850.052 129.306C847.016 132.204 843.428 134.55 839.288 136.344C835.286 138.138 831.077 139.035 826.661 139.035H823.556C812.516 139.035 803.615 135.861 796.853 129.513C791.333 124.407 787.883 117.231 786.503 107.985H804.926C805.616 111.297 806.996 113.988 809.066 116.058C812.24 119.094 816.656 120.612 822.314 120.612C823.832 120.612 824.936 120.543 825.626 120.405C830.456 120.129 834.251 118.818 837.011 116.472C839.771 113.988 841.151 110.952 841.151 107.364C841.151 102.396 839.633 99.153 836.597 97.635C833.561 96.117 827.696 95.358 819.002 95.358C808.1 95.358 799.751 91.908 793.955 85.008C789.263 79.764 786.917 73.14 786.917 65.136C786.917 63.342 786.986 61.962 787.124 60.996C788.228 52.026 791.885 45.195 798.095 40.503C804.443 35.673 812.792 33.258 823.142 33.258C830.732 33.258 837.356 34.914 843.014 38.226C847.016 40.71 850.466 44.16 853.364 48.576C856.124 52.992 857.918 58.512 858.746 65.136L858.332 65.343H840.737ZM927.602 138L896.138 99.705V138H877.922V0.344996H896.138V59.754L924.29 33.258H951.407L902.348 78.798L951.614 138H927.602Z\"\n        fill=\"url(#paint1_linear_2621_2)\"\n      />\n      <defs>\n        <linearGradient\n          id=\"paint0_linear_2621_2\"\n          x1=\"501.5\"\n          y1=\"-47.5\"\n          x2=\"499\"\n          y2=\"214.5\"\n          gradientUnits=\"userSpaceOnUse\"\n        >\n          <stop />\n        </linearGradient>\n        <linearGradient\n          id=\"paint0_linear_2621_2_dark\"\n          x1=\"501.5\"\n          y1=\"-47.5\"\n          x2=\"499\"\n          y2=\"214.5\"\n          gradientUnits=\"userSpaceOnUse\"\n        >\n          <stop stopColor={'#fff'} />\n        </linearGradient>\n        <linearGradient\n          id=\"paint1_linear_2621_2\"\n          x1=\"501.5\"\n          y1=\"-47.5\"\n          x2=\"499\"\n          y2=\"214.5\"\n          gradientUnits=\"userSpaceOnUse\"\n        >\n          <stop stopColor=\"#8E79DE\" />\n        </linearGradient>\n      </defs>\n    </svg>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Button Component Implementation in React\nDESCRIPTION: This code shows a simple implementation of the Button component from ShadcnUI. It imports the Button component and renders a default button with the text 'Button'.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/multi_step_forms_page_shadcn_40.md#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from '@kit/ui/button';\n\nexport default function ButtonDemo() {\n  return (\n    <Button>Button</Button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Memberships Table in Supabase\nDESCRIPTION: SQL schema for memberships table that links users to organizations and stores role information and invite data.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/ui_hooks_mdx_15.md#2025-04-22_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\ncreate table memberships (\n  id bigint generated always as identity primary key,\n  user_id uuid references public.users,\n  organization_id bigint not null references public.organizations,\n  role int not null,\n  invited_email text,\n  code text,\n  unique (user_id, organization_id)\n);\n```\n\n----------------------------------------\n\nTITLE: Getting User ID with useUserId Hook in React\nDESCRIPTION: This snippet shows how to use the useUserId hook to retrieve just the current user's ID in a React component. This provides a simpler alternative to useUserSession when only the user ID is needed.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/call_api_routes_from_client_csrf_token_guarding_api_routes_7.md#2025-04-22_snippet_28\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useUserId } from '~/core/hooks/use-user-id';\n\nconst userId = useUserId();\n```\n\n----------------------------------------\n\nTITLE: Rendering Task Data in a React Component with useFetchTask (TypeScript)\nDESCRIPTION: A React functional component, TaskComponent, utilizes the useFetchTask hook to fetch the task data based on a provided id prop. It conditionally renders loading and error states, and, upon successful fetch, displays the task's name and description using JSX. This component expects a prop with id (number), and requires useFetchTask to be defined. Inputs: id (number). Outputs: Renders task details or status messages.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/adding_app_pages_guarding_pages_updating_sidebar_menu_32.md#2025-04-22_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nfunction TaskComponent({ id }: { id: number }) {\n  const { data: task, isLoading, error } = useFetchTask({ id });\n\n  if (isLoading) {\n    return <p>Loading...</p>;\n  }\n\n  if (error) {\n    return <p>Error: {error.message}</p>;\n  }\n\n  return (\n    <>\n      <h1>{task.name}</h1>\n      <p>{task.description}</p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Wordpress Configuration and Setup\nDESCRIPTION: Environment variables and Docker configuration for setting up Wordpress CMS integration.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/team_account_sidebar_configuration_configuration_cms_api_92.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nCMS_CLIENT=wordpress\nWORDPRESS_API_URL=http://localhost:8080\n\nWORDPRESS_DB_HOST=db\nWORDPRESS_DB_USER=wordpress\nWORDPRESS_DB_PASSWORD=wordpress\nWORDPRESS_DB_NAME=wordpress\n```\n\n----------------------------------------\n\nTITLE: Adding Upstream Remote for Updates (Bash)\nDESCRIPTION: Adds a new Git remote named 'upstream' that points to the original Makerkit repository using SSH. This allows the user to fetch updates from the source repository.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/configuring_supabase_database_webhooks_fly_production_environment_variables_95.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ngit remote add upstream git@github.com:makerkit/remix-supabase-saas-kit-turbo\n```\n\n----------------------------------------\n\nTITLE: Running Stripe Webhooks Server\nDESCRIPTION: Command to run local Stripe webhooks server using npm, requires Docker installation\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/server_actions_uploading_data_to_storage_writing_data_to_supabase_17.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nnpm run stripe:listen\n```\n\n----------------------------------------\n\nTITLE: Defining API Route Handler in Next.js App Router\nDESCRIPTION: Creates a PUT route handler in Next.js App Router for transferring organization ownership. The route is defined in the app/api directory using the route.ts convention.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/organization_sdk_organization_subscription_sdk_sdk_25.md#2025-04-22_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nexport async function PUT(req: Request) {\n  // logic to transfer ownership\n}\n```\n\n----------------------------------------\n\nTITLE: Adding CSRF Protection to API Routes\nDESCRIPTION: Example of implementing CSRF protection for API routes using the withCsrf middleware. This ensures requests contain a valid CSRF token in the request headers.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/introduction_running_the_application_technical_details_6.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextApiRequest, NextApiResponse } from \"next\";\n\nimport { withAuthedUser } from '~/core/middleware/with-authed-user';\nimport { withMethodsGuard } from '~/core/middleware/with-methods-guard';\nimport { withPipe } from '~/core/middleware/with-pipe';\nimport withCsrf from \"./with-csrf\";\n\nfunction helloWorldHandler(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n  res.status(200).json({ text: 'Hello' })\n}\n\nexport default withPipe(\n  withAuthedUser,\n  withMethodsGuard(['POST']),\n  withCsrf(),\n  helloWorldHandler,\n);\n```\n\n----------------------------------------\n\nTITLE: Using withTranslationProps for Internationalization in Next.js\nDESCRIPTION: Example of getStaticProps implementation using withTranslationProps to populate translation data for marketing pages in a Next.js application.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/deploying_production_development_getting_started_environment_variables_13.md#2025-04-22_snippet_26\n\nLANGUAGE: tsx\nCODE:\n```\nimport { withTranslationProps } from \"~/lib/props/with-translation-props\";\nimport { GetStaticPropsContext } from \"next\";\n\nexport async function getStaticProps(\n  context: GetStaticPropsContext\n) {\n  const { props } = await withTranslationProps(context);\n\n  return {\n    props,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Stripe CLI Listener\nDESCRIPTION: Command to start the Stripe CLI listener for webhook testing in development environment.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/updating_navigation_menu_403_error_actions_contentlayer_stuck_34.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nnpm run stripe:listen\n```\n\n----------------------------------------\n\nTITLE: Customizing EmptyState Components with CSS Classes in React (TSX)\nDESCRIPTION: Illustrates how to customize the appearance of EmptyState and its subcomponents by passing Tailwind CSS utility classes via the `className` prop. This example uses TypeScript syntax (`tsx`).\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/app_breadcrumbs_bordered_navigation_menu_card_button_39.md#2025-04-22_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n<EmptyState className=\"bg-gray-100\">\n  <EmptyStateHeading className=\"text-primary\">Custom Heading</EmptyStateHeading>\n  <EmptyStateText className=\"text-lg\">Larger descriptive text</EmptyStateText>\n  <EmptyStateButton className=\"bg-secondary\">Custom Button</EmptyStateButton>\n</EmptyState>\n```\n\n----------------------------------------\n\nTITLE: Installing PNPM Globally using NPM Bash\nDESCRIPTION: Installs the PNPM package manager globally on the system using NPM. PNPM is required for managing dependencies in the Makerkit Turborepo project. Requires Node.js and NPM to be installed.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/deploy_production_introduction_5.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g pnpm\n```\n\n----------------------------------------\n\nTITLE: Subscription Interface Definition\nDESCRIPTION: TypeScript interface defining the structure of subscription data stored in the application.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_one_time_payments_stripe_webhooks_payments_35.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nexport interface Subscription {\n  id: string;\n  priceId: string;\n\n  status: Stripe.Subscription.Status;\n  currency: string | null;\n  cancelAtPeriodEnd: boolean;\n\n  interval: string | null;\n  intervalCount: number | null;\n\n  createdAt: UnixTimestamp;\n  periodStartsAt: UnixTimestamp;\n  periodEndsAt: UnixTimestamp;\n  trialStartsAt: UnixTimestamp | null;\n  trialEndsAt: UnixTimestamp | null;\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Categories for WordPress Pages\nDESCRIPTION: PHP code to add to the WordPress theme's functions.php file to enable categories for pages.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/creating_your_own_cms_client_keystatic_wordpress_62.md#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nfunction add_categories_to_pages() {\n    register_taxonomy_for_object_type('category', 'page');\n}\nadd_action('init', 'add_categories_to_pages');\n```\n\n----------------------------------------\n\nTITLE: Accessing Organization UUID in Next.js Layout\nDESCRIPTION: Demonstrates how to access the organization UUID from URL parameters in a Next.js layout component using TypeScript.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/supabase_not_stopping_tables_not_found_dark_theme_22.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\ninterface LayoutProps {\n  params: {\n    organization: string;\n  }\n}\n\nfunction MyLayout(props: LayoutProps) {\n  const organizationUid = props.params.organization;\n\n  return (\n    <div>\n      <h1>Organization UID: {organizationUid}</h1>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Pulling Updates with Unrelated Histories\nDESCRIPTION: Alternative command to pull updates when dealing with unrelated repository histories\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/uploading_data_to_storage_writing_data_to_supabase_data_fetching_77.md#2025-04-22_snippet_42\n\nLANGUAGE: bash\nCODE:\n```\ngit pull upstream main --allow-unrelated-histories\n```\n\n----------------------------------------\n\nTITLE: Organization Interface Extension - TypeScript\nDESCRIPTION: Extended Organization interface that includes integration support. Adds integrations array to the base organization type.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/migrations_extending_organizations_organization_hooks_10.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Organization {\n  // ...\n  integrations: Integration[];\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing AssigneeSelect in TicketDetailsContainer Component\nDESCRIPTION: Code snippet showing how to use the AssigneeSelect component within a TicketDetailsContainer, passing the necessary props including ticket data and permissions.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/data_fetching_3.md#2025-04-22_snippet_36\n\nLANGUAGE: tsx\nCODE:\n```\n<AssigneeSelect\n  disabled={!canUpdateTicket}\n  assignee={ticket.assigned_to}\n  ticketId={ticket.id}\n  accountSlug={ticket.account_id.slug}\n/>\n```\n\n----------------------------------------\n\nTITLE: Adding Ngrok Command to package.json for Local Testing\nDESCRIPTION: This snippet shows how to add an ngrok command to the package.json file for local webhook testing. It allows running ngrok to expose the local server on port 3000.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/subscription_permissions_organizations_lemon_squeezy_23.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n\"ngrok\": \"npx ngrok http 3000\"\n```\n\n----------------------------------------\n\nTITLE: Detecting Current Theme in React Components\nDESCRIPTION: Provides a method to detect the current theme in a component using `ThemeContext.Consumer`. The snippet identifies if the theme is set to dark mode.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/environment_variables_setup_project_configuration_set_up_emails_9.md#2025-04-22_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ThemeContext } from '~/core/contexts/theme';\n\n<ThemeContext.Consumer>\n  {(theme) => {\n     const isDark = theme === 'dark';\n  }\n</ThemContext.Consumer>\n```\n\n----------------------------------------\n\nTITLE: Widget Loading Script for Web Integration\nDESCRIPTION: HTML script tag to embed the built widget into any website, including the account ID data attribute for identification.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/building_javascript_widget_1.md#2025-04-22_snippet_19\n\nLANGUAGE: html\nCODE:\n```\n<script\n  data-account=\"account-id\"\n  src=\"https://widget-url.com/makerdesk-widget.js\"\n></script>\n```\n\n----------------------------------------\n\nTITLE: Logging in to Supabase CLI\nDESCRIPTION: Command to log in to your Supabase account through the CLI from the web package of a Turborepo project.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/cloudflare_production_environment_variables_supabase_47.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npnpm --filter web supabase login\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Requirements with withAuthedUser in Next.js API Routes\nDESCRIPTION: Example API route demonstrating how to require authentication for accessing an endpoint using the withAuthedUser middleware, which returns a 401 error for unauthenticated requests.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/deploying_production_development_getting_started_environment_variables_13.md#2025-04-22_snippet_30\n\nLANGUAGE: ts\nCODE:\n```\nimport { NextApiRequest,NextApiResponse } from \"next\";\n\nimport { withAuthedUser } from '~/core/middleware/with-authed-user';\nimport { withPipe } from '~/core/middleware/with-pipe';\nimport { withExceptionFilter } from '~/core/middleware/with-exception-filter';\n\nexport default function helloWorld(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n  const handler = withPipe(\n    withAuthedUser,\n    (req, res) => {\n      res.status(200).json({ message: 'Hello World!' });\n    }\n  );\n\n  return withExceptionFilter(req, res)(handler);\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Stripe CLI Listener\nDESCRIPTION: Command to start the Stripe CLI for handling webhooks in local development.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/develop_firebase_security_rules_emails_encrypting_secrets_71.md#2025-04-22_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\nnpm run stripe:listen\n```\n\n----------------------------------------\n\nTITLE: Project Directory Structure Overview\nDESCRIPTION: Basic directory structure showing the main folders and files in a Remix Supabase project, including src directory organization with components, core utilities, lib, and routes.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/functions_initializing_project_introduction_85.md#2025-04-22_snippet_23\n\nLANGUAGE: txt\nCODE:\n```\ntasks-app\n├── README.md\n├── @types\n├── src\n│   ├── components\n│   ├── core\n│   ├── lib\n│   └── routes\n        ...\n│       └── root.tsx\n├── package-lock.json\n├── package.json\n├── public\n│   └── favicon.ico\n└── tsconfig.json\n```\n\n----------------------------------------\n\nTITLE: Widget Styles Implementation\nDESCRIPTION: CSS styles for the widget including theme variables and font settings\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/building_javascript_widget_1.md#2025-04-22_snippet_11\n\nLANGUAGE: css\nCODE:\n```\n@import \"../../../apps/web/styles/globals.css\";\n\n:host {\n    font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI',\n    Roboto, 'Helvetica Neue', Arial;\n    --background: 0 0% 100%;\n    --foreground: 224 71.4% 4.1%;\n    --card: 0 0% 100%;\n    --card-foreground: 224 71.4% 4.1%;\n    --popover: 0 0% 100%;\n    --popover-foreground: 224 71.4% 4.1%;\n    --primary: 262.1 83.3% 57.8%;\n    --primary-foreground: 210 20% 98%;\n    --secondary: 220 14.3% 95.9%;\n    --secondary-foreground: 220.9 39.3% 11%;\n    --muted: 220 14.3% 95.9%;\n    --muted-foreground: 220 8.9% 46.1%;\n    --accent: 220 14.3% 95.9%;\n    --accent-foreground: 220.9 39.3% 11%;\n    --destructive: 0 84.2% 60.2%;\n    --destructive-foreground: 210 20% 98%;\n    --border: 220 13% 91%;\n    --input: 220 13% 91%;\n    --ring: 262.1 83.3% 57.8%;\n    --radius: 0.75rem;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a New Application from Web Branch Template\nDESCRIPTION: Command to create a new application (pdf-chat) using the web-branch as a template, allowing you to maintain the same structure as the web app.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/csrf_protection_react_query_route_handlers_43.md#2025-04-22_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\ngit subtree add --prefix=apps/pdf-chat origin web-branch --squash\n```\n\n----------------------------------------\n\nTITLE: Defining a Supabase Query Function in TypeScript\nDESCRIPTION: Defines a reusable function `getOrganizationById` to fetch specific organization data from a Supabase table. It accepts a Supabase client instance and an organization ID as parameters, builds a query using the client's fluent API, selects specific columns (aliasing `logo_url` to `logoURL`), filters by ID, ensures errors are thrown, and expects a single result. This function is designed to be used in both server-side and client-side contexts.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/architecture_auth_overview_auth_setup_29.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n ```tsx {% title=\"organizations/queries.ts\" %}\nexport function getOrganizationById(\n  client: Client,\n  organizationId: number\n) {\n  return client\n    .from('organizations')\n    .select(`\n      id,\n      name,\n      logoURL: logo_url\n    `)\n    .eq('id', organizationId)\n    .throwOnError()\n    .single();\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Validating Environment Variables for Remix Supabase SaaS\nDESCRIPTION: This command validates the environment variables set up for the Remix Supabase SaaS Kit. Running 'turbo gen validate-env,' it checks the availability of each variable against the .env.local file. This step ensures that all required environment variables are correctly set prior to deployment.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/configuring_supabase_database_webhooks_fly_production_environment_variables_95.md#2025-04-22_snippet_6\n\nLANGUAGE: Bash\nCODE:\n```\nturbo gen validate-env\n```\n\n----------------------------------------\n\nTITLE: Adding Static Paths to Sitemap Generation in Remix (TSX)\nDESCRIPTION: Illustrates how to add a new static route (e.g., '/about') to the `getPaths` function within the Remix route file responsible for generating the sitemap (`apps/web/app/server-sitemap.xml/route.ts`). This ensures that the new static page is included in the dynamically generated `server-sitemap.xml`, improving SEO discoverability. Blog and documentation paths are typically handled automatically.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/adding_turborepo_package_approaching_local_development_database_functions_93.md#2025-04-22_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\n {% title=\"apps/web/app/server-sitemap.xml/route.ts\" %}\nfunction getPaths() {\n  const paths = [\n    '/',\n    '/faq',\n    '/blog',\n    '/docs',\n    '/pricing',\n    '/contact',\n    '/cookie-policy',\n    '/terms-of-service',\n    '/privacy-policy',\n    // add more paths here,\n    '/about', // <-- add the new page here\n  ];\n\n  return paths.map((path) => {\n    return {\n      loc: new URL(path, appConfig.url).href,\n      lastmod: new Date().toISOString(),\n    };\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Downgrading Contentlayer Packages\nDESCRIPTION: Command to downgrade contentlayer packages to version 0.3.1 to fix startup issues\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/updating_navigation_menu_403_error_actions_contentlayer_stuck_34.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm i contentlayer@0.3.1 next-contentlayer@0.3.1\n```\n\n----------------------------------------\n\nTITLE: Creating the TicketDetailsContainer Component\nDESCRIPTION: A React client component that displays ticket details and allows authorized users to manage ticket status, assignee, and priority based on their permissions.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/data_fetching_3.md#2025-04-22_snippet_25\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\nimport { useTransition } from 'react';\n\nimport { useForm } from 'react-hook-form';\n\nimport { useTeamAccountWorkspace } from '@kit/team-accounts/hooks/use-team-account-workspace';\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n} from '@kit/ui/form';\nimport { Heading } from '@kit/ui/heading';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@kit/ui/select';\n\nimport { Tables } from '~/lib/database.types';\n\nexport function TicketDetailsContainer({\n  ticket,\n}: {\n  ticket: Tables<'tickets'> & {\n    account_id: {\n      slug: string;\n    };\n  };\n}) {\n  const { account } = useTeamAccountWorkspace();\n  const permissions = account.permissions;\n\n  // check if the user can update the ticket\n  const canUpdateTicket = permissions.includes('tickets.update');\n\n  return (\n    <div className={'flex h-screen flex-1 flex-col space-y-8'}>\n      <div>\n        <Heading level={4}>Ticket details</Heading>\n\n        <Heading level={6} className={'text-muted-foreground'}>\n          Manage the status, assignee, and priority of the ticket.\n        </Heading>\n      </div>\n\n      <div className={'flex flex-1 flex-col space-y-4'}>\n        {\n          // Add the ticket details form here\n        }\n      </div>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Authentication Configuration Variables\nDESCRIPTION: Environment variables controlling authentication methods including password auth, magic links, and captcha settings.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stepper_components_application_configuration_41.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nNEXT_PUBLIC_AUTH_PASSWORD=true\nNEXT_PUBLIC_AUTH_MAGIC_LINK=false\nNEXT_PUBLIC_CAPTCHA_SITE_KEY=\nCAPTCHA_SECRET_TOKEN=\n```\n\n----------------------------------------\n\nTITLE: Illustrating Server/Client Component Boundaries in Nested Layouts (TSX)\nDESCRIPTION: This conceptual TSX snippet illustrates the component rendering boundaries in Next.js App Router. It shows a `Layout` (Server Component) containing `MyClientComponent` (Client Component), which then renders a `Page` (defaulting back to Server Component). This demonstrates that opting into a Client Component doesn't make the *entire* subtree client-side; nested routes/pages can still be Server Components unless they also opt-in.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/realtime_updates_server_components_7.md#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<Layout> <--- Server Component\n  <MyClientComponent> <--- Client Component\n    <Page /> <--- Server Component\n  </MyClientComponent>\n</Layout>\n```\n\n----------------------------------------\n\nTITLE: Regenerating Database Types in Supabase Project\nDESCRIPTION: Commands to reset the database and regenerate types to resolve conflicts between your project and the upstream repository.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/introduction_migration_from_remix_navigating_codebase_67.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpm run supabase:web:reset\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run supabase:web:typegen\n```\n\n----------------------------------------\n\nTITLE: Reporting Usage using Stripe's API\nDESCRIPTION: Illustrates how to report API usage using Stripe's new usage reporting API. It configures Stripe's metric reporting for a given customer based on API requests and requires Makerkit, a configured billing provider, and access to Stripe's libraries.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/lemon_squeezy_metered_usage_one_off_payments_59.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getBillingGatewayProvider } from '@kit/billing-gateway';\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\nimport { createAccountsApi } from '@kit/accounts/api';\n\nasync function reportUsageForApiRequests(\n  accountId: string,\n  quantity: number\n) {\n  // use the correct client: in this case, the server action client\n  const client = getSupabaseServerClient();\n  const api = createAccountsApi(client);\n\n  const subscription = await api.getSubscription(accountId);\n\n  // if the subscription is not active, we don't report usage\n  if (!subscription) {\n    throw new Error('No active subscription found');\n  }\n\n  // get the billing provider\n  const service = await getBillingGatewayProvider(this.client);\n  const customerId = await api.getCustomerId(accountId);\n\n  if (!customerId) {\n    throw new Error(`No customer ID found for account ${accountId}`);\n  }\n\n  // now we can report the usage to the billing provider\n  return service.reportUsage({\n    id: customerId,\n    eventName: 'api_requests',\n    usage: {\n      quantity,\n    }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Events Page Route in Remix TSX\nDESCRIPTION: This Remix route component integrates the EventsListContainer into a page. It demonstrates how to use domain-specific components in the routing layer of a Remix application.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/project_structure_running_project_tailwind_css_75.md#2025-04-22_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport EventsListContainer from '~/components/EventsListContainer';\n\nconst EventsPage: React.FC = () => {\n  return (\n     <EventsListContainer />\n  );\n};\n\nexport default EventsPage;\n```\n\n----------------------------------------\n\nTITLE: Defining Foreign Key Reference to Organizations (SQL)\nDESCRIPTION: This SQL snippet demonstrates the original method in Makerkit v1 for associating rows to organizations using a 'bigint' foreign key. The column 'organization_id' is defined as non-null and references the 'organizations' table's 'id' with 'ON DELETE CASCADE' to ensure dependent records are removed when an organization is deleted. Requires an 'organizations' table with a 'bigint' primary key.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/faq_functional_walkthrough_introduction_96.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\norganization_id bigint not null references organizations(id) on delete cascade,\n\n```\n\n----------------------------------------\n\nTITLE: Navigation and Layout Settings Configuration\nDESCRIPTION: Variables controlling navigation style and layout preferences for both user and team interfaces.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stepper_components_application_configuration_41.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nNEXT_PUBLIC_USER_NAVIGATION_STYLE=sidebar\nNEXT_PUBLIC_HOME_SIDEBAR_COLLAPSED=false\nNEXT_PUBLIC_TEAM_NAVIGATION_STYLE=sidebar\nNEXT_PUBLIC_TEAM_SIDEBAR_COLLAPSED=false\nNEXT_PUBLIC_SIDEBAR_COLLAPSIBLE_STYLE=icon\n```\n\n----------------------------------------\n\nTITLE: Defining Stripe Webhook Topics Enum\nDESCRIPTION: Enum definition for Stripe webhook topics that are handled by the application, including checkout completion and subscription lifecycle events.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_one_time_payments_stripe_webhooks_ci_tests_73.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nexport enum StripeWebhooks {\n  Completed = 'checkout.session.completed',\n  SubscriptionDeleted = 'customer.subscription.deleted',\n  SubscriptionUpdated = 'customer.subscription.updated',\n}\n```\n\n----------------------------------------\n\nTITLE: Zod Schema for Querying Metered Usage in Billing API\nDESCRIPTION: This complex schema defines the parameters required for querying metered usage, including time and page filters along with customer and record IDs.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/google_analytics_provider_posthog_analytics_provider_umami_analytics_provider_88.md#2025-04-22_snippet_41\n\nLANGUAGE: tsx\nCODE:\n```\nconst TimeFilter = z.object(\n  {\n    startTime: z.number(),\n    endTime: z.number(),\n  },\n  {\n    description: `The time range to filter the usage records. Used for Stripe`,\n  },\n);\n\nconst PageFilter = z.object(\n  {\n    page: z.number(),\n    size: z.number(),\n  },\n  {\n    description: `The page and size to filter the usage records. Used for LS`,\n  },\n);\n\nexport const QueryBillingUsageSchema = z.object({\n  id: z.string({\n    description:\n      'The id of the usage record. For Stripe a meter ID, for LS a subscription item ID.',\n  }),\n  customerId: z.string({\n    description: 'The id of the customer in the billing system',\n  }),\n  filter: z.union([TimeFilter, PageFilter]),\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Git Subtree for Turborepo App\nDESCRIPTION: Command to create a git subtree from the apps/web directory for use as a template for new applications in the monorepo.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/csrf_protection_react_query_route_handlers_43.md#2025-04-22_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\ngit subtree split --prefix=apps/web --branch web-branch\n```\n\n----------------------------------------\n\nTITLE: Stripe Webhook Event Types Definition\nDESCRIPTION: Enum definition for supported Stripe webhook event types in the application.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_one_time_payments_stripe_webhooks_payments_35.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nexport enum StripeWebhooks {\n  Completed = 'checkout.session.completed',\n  SubscriptionDeleted = 'customer.subscription.deleted',\n  SubscriptionUpdated = 'customer.subscription.updated',\n}\n```\n\n----------------------------------------\n\nTITLE: Running Project Tests\nDESCRIPTION: Command to execute the test suite for the project.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/configuring_supabase_database_webhooks_fly_production_environment_variables_95.md#2025-04-22_snippet_34\n\nLANGUAGE: bash\nCODE:\n```\npnpm run test\n```\n\n----------------------------------------\n\nTITLE: Implementing Temporary Landing Page in React with Next.js\nDESCRIPTION: Provides a minimal temporary landing page using the Coming Soon component in a React application. It integrates with Next.js framework and includes elements such as logos, headings, and call-to-action buttons. The implementation uses a config object for environment-specific rendering.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/app_breadcrumbs_bordered_navigation_menu_card_button_39.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport Link from 'next/link';\n\nimport {\n  ComingSoon,\n  ComingSoonButton,\n  ComingSoonHeading,\n  ComingSoonLogo,\n  ComingSoonText,\n} from '@kit/ui/marketing';\n\nimport { AppLogo } from '~/components/app-logo';\nimport appConfig from '~/config/app.config';\n\nexport default function SiteLayout() {\n  return (\n    <ComingSoon>\n      <ComingSoonLogo>\n        <AppLogo />\n      </ComingSoonLogo>\n      <ComingSoonHeading>{appConfig.name} is coming soon</ComingSoonHeading>\n      <ComingSoonText>\n        We&apos;re building something amazing. Our team is working hard to bring\n        you a product that will revolutionize how you work.\n      </ComingSoonText>\n      <ComingSoonButton asChild>\n        <Link href=\"#\">Follow Our Progress</Link>\n      </ComingSoonButton>\n      {/* Additional custom content */}\n      <div className=\"mt-8 flex justify-center gap-4\">\n        {/* Social icons, etc */}\n      </div>\n    </ComingSoon>\n  );\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport Link from 'next/link';\n\nimport {\n  ComingSoon,\n  ComingSoonButton,\n  ComingSoonHeading,\n  ComingSoonLogo,\n  ComingSoonText,\n} from '@kit/ui/marketing';\n\nimport { SiteFooter } from '~/(marketing)/_components/site-footer';\nimport { SiteHeader } from '~/(marketing)/_components/site-header';\nimport { withI18n } from '~/lib/i18n/with-i18n';\n\nimport { AppLogo } from '~/components/app-logo';\nimport appConfig from '~/config/app.config';\n\nfunction SiteLayout() {\n  if (!appConfig.production) {\n    return (\n      <div className={'flex min-h-[100vh] flex-col'}>\n        <SiteHeader />\n        {props.children}\n        <SiteFooter />\n      </div>\n    );\n  }\n  return (\n    <ComingSoon>\n      <ComingSoonLogo>\n        <AppLogo />\n      </ComingSoonLogo>\n      <ComingSoonHeading>{appConfig.name} is coming soon</ComingSoonHeading>\n      <ComingSoonText>\n        We&apos;re building something amazing. Our team is working hard to bring\n        you a product that will revolutionize how you work.\n      </ComingSoonText>\n      <ComingSoonButton asChild>\n        <Link href=\"#\">Follow Our Progress</Link>\n      </ComingSoonButton>\n      {/* Additional custom content */}\n      <div className=\"mt-8 flex justify-center gap-4\">\n        {/* Social icons, etc */}\n      </div>\n    </ComingSoon>\n  );\n}\n\nexport default withI18n(SiteLayout);\n```\n\n----------------------------------------\n\nTITLE: Identifying Users with Makerkit Analytics API (TypeScript)\nDESCRIPTION: Demonstrates using the `analytics.identify` method imported from `@kit/analytics`. This function associates a given `userId` with specific user traits (like `email`, `subscriptionPlan`, etc.) in the analytics platform, enabling user-centric tracking.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/google_analytics_provider_posthog_analytics_provider_umami_analytics_provider_88.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { analytics } from '@kit/analytics';\n\nvoid analytics.identify(userId, {\n  email: user.email,\n  plan: user.subscriptionPlan,\n  // ... other user properties\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Umami Analytics Provider\nDESCRIPTION: Example configuration for integrating the Umami analytics provider with the analytics manager.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/custom_analytics_provider_google_analytics_provider_posthog_analytics_provider_36.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createUmamiAnalyticsService } from '@kit/umami';\n\nimport { createAnalyticsManager } from './analytics-manager';\nimport type { AnalyticsManager } from './types';\n\nexport const analytics: AnalyticsManager = createAnalyticsManager({\n    providers: {\n        umami: createUmamiAnalyticsService,\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing useInsertTask Hook with Manual CSRF Token Handling\nDESCRIPTION: This code snippet shows an alternative implementation of the 'useInsertTask' hook where the CSRF token is manually added to the fetch request headers.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/api_routes_vs_server_actions_api_routes_call_api_routes_from_client_19.md#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport useMutation from 'swr/mutation';\nimport useCsrfToken from '~/core/hooks/use-csrf-token';\n\ninterface Task {\n  name: string;\n}\n\nfunction useInsertTask() {\n  const csrfToken = useCsrfToken();\n  const path = '/api/task';\n\n  return useMutation(\n    path, async (_, data: { arg: Task }) => {\n      return fetch(path, {\n        body: JSON.stringify(data.arg),\n        method: 'POST',\n        headers: {\n          'x-csrf-token': csrfToken\n        }\n      });\n    }\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Hierarchical User Role to TypeScript Enum\nDESCRIPTION: Explains how to add a new role (`Readonly`) to the `MembershipRole` enum while maintaining hierarchy. Lower-level roles should be placed earlier in the enum definition for proper comparison.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/commands_cors_develop_firebase_security_rules_5.md#2025-04-22_snippet_33\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nexport enum MembershipRole {\n  Readonly,\n  Member,\n  Admin,\n  Owner,\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Badge Component with Different Variants in React\nDESCRIPTION: This code shows how to use the Badge component from ShadcnUI with different variants. It demonstrates two sets of badges: one with outline variant and another with semantic variants like info, success, warning, and destructive.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/multi_step_forms_page_shadcn_40.md#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Badge } from '@kit/ui/badge';\n\nfunction BadgeDemo() {\n  return (\n    <>\n      <div className=\"flex flex-col gap-4\">\n        <div className=\"flex items-center gap-2\">\n          <Badge variant={'outline'}>Profile</Badge>\n          <Badge variant={'outline'}>Settings</Badge>\n          <Badge variant={'outline'}>Messages</Badge>\n        </div>\n\n        <div className=\"flex items-center gap-2\">\n          <Badge variant={'info'}>\n            <span>Info</span>\n          </Badge>\n          <Badge variant={'success'}>\n            <span>Success</span>\n          </Badge>\n          <Badge variant={'warning'}>\n            <span>Warning</span>\n          </Badge>\n          <Badge variant={'destructive'}>\n            <span>Error</span>\n          </Badge>\n        </div>\n      </div>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Linking and Pushing Supabase Database\nDESCRIPTION: Commands to link local Supabase CLI to remote project and push database migrations\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/supabase_not_stopping_tables_not_found_dark_theme_22.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./node_modules/.bin/supabase link --project-ref **************\n```\n\nLANGUAGE: bash\nCODE:\n```\n./node_modules/.bin/supabase db push\n```\n\n----------------------------------------\n\nTITLE: Stripe Webhook Event Types Definition\nDESCRIPTION: Enum defining the supported Stripe webhook event types in the application.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_configuration_stripe_one_time_payments_stripe_webhooks_82.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nexport enum StripeWebhooks {\n  Completed = 'checkout.session.completed',\n  SubscriptionDeleted = 'customer.subscription.deleted',\n  SubscriptionUpdated = 'customer.subscription.updated',\n}\n```\n\n----------------------------------------\n\nTITLE: Ethereal Email Testing Configuration\nDESCRIPTION: Environment variables setup for testing emails using Ethereal email service.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/uploading_data_to_storage_writing_data_to_supabase_data_fetching_77.md#2025-04-22_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\nETHEREAL_EMAIL=\nETHEREAL_PASSWORD=\n```\n\n----------------------------------------\n\nTITLE: Adding Plans to Products in Billing Schema\nDESCRIPTION: Configuration for adding a plan to a product in the billing schema, specifying details like trial period, payment type, and interval.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/user_workspace_api_api_billing_api_37.md#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nexport default createBillingSchema({\n  provider,\n  products: [\n    {\n      id: 'starter',\n      name: 'Starter',\n      description: 'The perfect plan to get started',\n      currency: 'USD',\n      badge: `Value`,\n      plans: [\n        {\n          name: 'Starter Monthly',\n          id: 'starter-monthly',\n          trialDays: 7,\n          paymentType: 'recurring',\n          interval: 'month',\n          lineItems: [],\n        }\n      ],\n    }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Using Supabase Client with React Native\nDESCRIPTION: Demonstrates how to import and use the Supabase client in a React component using the useSupabase hook\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/supabase_client_clone_repository_common_commands_56.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSupabase } from '@kit/supabase';\n\nexport default function Home() {\n  const supabase = useSupabase()\n\n  return (\n    <div>\n      <h1>Supabase Browser Client</h1>\n      <button onClick={() => supabase.auth.signOut()}>Sign Out</button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Default Feature Flags Configuration in TypeScript\nDESCRIPTION: This snippet shows the default configuration object for feature flags within the Makerkit application, typically located in `src/configurations.ts.ts`. It defines boolean flags like `enableThemeSwitcher`, `enableAccountDeletion`, and `enableOrganizationDeletion` to control application features.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/auth_setup_authentication_blog_16.md#2025-04-22_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\n{\n  enableThemeSwitcher: true,\n  enableAccountDeletion: false,\n  enableOrganizationDeletion: false,\n}\n```\n\n----------------------------------------\n\nTITLE: Running Cypress E2E Tests Headless\nDESCRIPTION: Command to run Cypress E2E tests in headless mode.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/commands_cors_develop_firebase_security_rules_5.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nnpm run cypress:headless\n```\n\n----------------------------------------\n\nTITLE: Migration Script for CSS Classes - JavaScript\nDESCRIPTION: Script to automate migration of CSS classes from black to dark color scheme and package updates. Uses replace-in-file to perform bulk replacements across project files.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/migrations_extending_organizations_organization_hooks_10.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst replace = require('replace-in-file');\nconst files = ['src/**/*.tsx', 'src/**/*.css'];\n\nconst promise = () =>\n  new Promise((resolve, reject) => {\n    replace({\n      ...getConfigs(),\n      files,\n    })\n      .then((results) => {\n        results.forEach((result) => {\n          if (result.hasChanged) {\n            console.log('File changed:', result.file);\n          }\n        });\n\n        resolve();\n      })\n      .catch((error) => {\n        console.error('Error occurred:', error);\n\n        reject(error);\n      });\n  });\n\n(async () => {\n  console.log(`Replacing classes in \"${files}\" ...`);\n  await promise();\n  console.log('Done!');\n})();\n\nfunction getConfigs() {\n  return {\n    from: [\n      /black-600/g,\n      /black-500/g,\n      /black-400/g,\n      /black-300/g,\n      /black-200/g,\n      /black-100/g,\n      /black-50/g,\n      \"'classnames'\",\n    ],\n    to: [\n      'dark-900',\n      'dark-900',\n      'dark-800',\n      'dark-700',\n      'dark-600',\n      'dark-500',\n      'dark-400',\n      \"'clsx'\",\n    ],\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Security for Attachments Storage Bucket in SQL\nDESCRIPTION: This SQL snippet creates a custom function 'can_read_message' to check user permissions, grants execute permission to authenticated users, and sets up an RLS policy for the storage objects. It ensures that only users with appropriate roles can access attachments.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/database_4.md#2025-04-22_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace function public.can_read_message (message_id uuid)\n  returns boolean\n  set search_path = ''\n  as $$\n  begin\n    return exists (\n      select 1\n      from public.messages message\n      where message.id = message_id\n      and public.has_role_on_ticket_account(message.ticket_id)\n    );\n  end;\n  $$ language plpgsql stable;\n\ngrant execute on function public.can_read_message(uuid) to authenticated;\n\n-- RLS policies for storage\ncreate policy message_attachments\n  on storage.objects\n  for select\n  to authenticated using (\n    bucket_id = 'attachments'\n    and public.can_read_message(\n      kit.get_storage_filename_as_uuid (name)\n    )\n);\n```\n\n----------------------------------------\n\nTITLE: Pull Updates from Upstream\nDESCRIPTION: Guides users to fetch and integrate updates from the upstream repository into their local branch, ensuring they have the latest code.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/cloudflare_production_environment_variables_supabase_47.md#2025-04-22_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\ngit pull upstream main\n```\n\n----------------------------------------\n\nTITLE: Restricting Tasks Table to MFA Compliant Users - SQL\nDESCRIPTION: This policy restricts access to the `tasks` table to authenticated users who are compliant with Multi-Factor Authentication (MFA), as determined by `public.is_mfa_compliant()`. It is marked 'restrictive' so it blocks access unless the user passes this check. Assumes `public.is_mfa_compliant()` is implemented. Input is user authentication context; output is access or denial. Users without MFA can still access if they haven't enabled MFA.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/adding_turborepo_package_approaching_local_development_database_functions_44.md#2025-04-22_snippet_25\n\nLANGUAGE: SQL\nCODE:\n```\ncreate policy restrict_mfa_tasks\\n    on public.tasks\\n    as restrictive\\n    to authenticated\\n    using (public.is_mfa_compliant());\n```\n\n----------------------------------------\n\nTITLE: Implementing Metered Billing with Tiers in TypeScript\nDESCRIPTION: This snippet shows how to configure metered billing with multiple tiers. It defines a line item with a unit of measurement and tiered pricing based on usage.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/google_analytics_provider_posthog_analytics_provider_umami_analytics_provider_88.md#2025-04-22_snippet_46\n\nLANGUAGE: tsx\nCODE:\n```\nexport default createBillingSchema({\n  provider,\n  products: [\n    {\n      id: 'starter',\n      name: 'Starter',\n      description: 'The perfect plan to get started',\n      currency: 'USD',\n      badge: `Value`,\n      plans: [\n        {\n          name: 'Starter Monthly',\n          id: 'starter-monthly',\n          trialDays: 7,\n          paymentType: 'recurring',\n          interval: 'month',\n          lineItems: [\n            {\n              id: 'price_1NNwYHI1i3VnbZTqI2UzaHIe',\n              name: 'Addon 2',\n              cost: 0,\n              type: 'metered',\n              unit: 'GBs',\n              tiers: [\n                {\n                    upTo: 10,\n                    cost: 0.1,\n                },\n                {\n                    upTo: 100,\n                    cost: 0.05,\n                },\n                {\n                    upTo: 'unlimited',\n                    cost: 0.01,\n                }\n              ]\n            },\n          ],\n        }\n      ],\n    }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Defining UserOrganizationData Type (TS)\nDESCRIPTION: Defines the `UserOrganizationData` TypeScript type, representing the structure returned by `getCurrentOrganization`. It includes the user's role within the organization and the organization details, potentially including subscription information.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/functions_initializing_project_introduction_85.md#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n {% title=\\\"src/lib/organizations/database/queries.ts\\\" %}\\nexport type UserOrganizationData = {\\n  role: MembershipRole;\\n  organization: Organization & {\\n    subscription?: {\\n      customerId: Maybe<string>;\\n      data: OrganizationSubscription;\\n    };\\n  };\\n};\n```\n\n----------------------------------------\n\nTITLE: Reporting API Usage to Billing Provider in TypeScript\nDESCRIPTION: Example of a meta-code function for reporting user API request usage to the billing provider. Requires implementation of consumption and reporting logic.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/lemon_squeezy_metered_usage_one_off_payments_38.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nexport async function consumeApi(accountId: string): number {}\n```\n\n----------------------------------------\n\nTITLE: Running Local Stripe Webhooks Server\nDESCRIPTION: Command to run a local Stripe webhooks server using Docker for testing Stripe integrations.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/setting_up_firebase_custom_fetch_fetching_data_firestore_70.md#2025-04-22_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\nnpm run stripe:listen\n```\n\n----------------------------------------\n\nTITLE: Running Tests and Exiting\nDESCRIPTION: Command to run all tests and exit.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/commands_cors_develop_firebase_security_rules_5.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Project Navigation Configuration in React\nDESCRIPTION: TypeScript/React configuration for project navigation menu items with icons and routing.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/projects_data_model_53.md#2025-04-22_snippet_34\n\nLANGUAGE: tsx\nCODE:\n```\n{\n    label: 'common:routes.dashboard',\n    path: pathsConfig.app.accountHome.replace('[account]', account),\n    Icon: <LayoutDashboard className={iconClasses} />,\n    end: true,\n},\n{\n    label: 'common:routes.projects',\n    path: `/home/${account}/projects`,\n    Icon: <FolderKanban className={iconClasses} />,\n}\n```\n\n----------------------------------------\n\nTITLE: Analytics Event Mapping Configuration\nDESCRIPTION: TypeScript configuration for mapping app events to analytics tracking functions, including user identification and custom event tracking.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_one_time_payments_stripe_webhooks_payments_35.md#2025-04-22_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nconst analyticsMapping: AnalyticsMapping = {\n  'user.signedIn': (event) => {\n    const userId = event.payload.userId;\n\n    if (userId) {\n      analytics.identify(userId);\n    }\n  },\n  'user.signedUp': (event) => {\n    analytics.trackEvent(event.type, event.payload);\n  },\n  'checkout.started': (event) => {\n    analytics.trackEvent(event.type, event.payload);\n  },\n  'user.updated': (event) => {\n    analytics.trackEvent(event.type, event.payload);\n  },\n  'feature.used': (event) => {\n    analytics.trackEvent(event.type, event.payload);\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Cookie Banner Component\nDESCRIPTION: React code to import the CookieBanner component dynamically and add it to the application.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/ai_text_editor_cookie_banner_feedback_popup_24.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport dynamic from 'next/dynamic';\n\nconst CookieBanner = dynamic(\n    () => import('~/plugins/cookie-banner/CookieBanner'),\n    {\n        ssr: false,\n    },\n);\n\nexport default function App() {\n  return (\n    <>\n      <CookieBanner />\n      {/* ... */}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ethereal Email for Testing in Makerkit\nDESCRIPTION: Configuration for setting up Ethereal email testing in Makerkit. This allows testing emails without using a real email account by setting environment variables. If not configured, Makerkit will automatically create an account and print credentials in the console.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/server_actions_uploading_data_to_storage_writing_data_to_supabase_30.md#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nETHEREAL_EMAIL=\nETHEREAL_PASSWORD=\n```\n\n----------------------------------------\n\nTITLE: Auto-saving Firebase Emulator State\nDESCRIPTION: Command to configure Firebase emulators to automatically export data on shutdown.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/develop_firebase_security_rules_emails_encrypting_secrets_71.md#2025-04-22_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\nfirebase emulators:start --export-on-exit=./your-directory\n```\n\n----------------------------------------\n\nTITLE: Fetching Tasks with React Query and Supabase\nDESCRIPTION: React component implementing data fetching from Supabase using React Query. Demonstrates how to fetch tasks for a specific account with loading and error states handling.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/team_accounts_only_recipes_adding_translations_55.md#2025-04-22_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useQuery } from '@tanstack/react-query';\nimport { useSupabase } from '@kit/supabase';\nimport { Text, View } from 'react-native';\n\nfunction TasksList(accountId: string) {\n  const client = useSupabase();\n\n  const { data, isLoading, error } = useQuery({\n    queryKey: ['tasks', accountId],\n    queryFn: async () => {\n      const { data, error } = await client\n        .from('tasks')\n        .select('*')\n        .eq('account_id', accountId)\n        .order('created_at', { ascending: false });\n\n      if (error) {\n        throw error;\n      }\n\n      return data;\n    }\n  });\n\n  if (isLoading) {\n    return <Text>Loading...</Text>;\n  }\n\n  if (error) {\n    return <Text>Error loading tasks</Text>;\n  }\n\n  return (\n    <View className={'flex gap-4'}>\n      {data.map(task => (\n        <View key={task.id}>\n          <Text>{task.title}</Text>\n        </View>\n      ))}\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Sending a Plain Text Email using the Mailer in TypeScript\nDESCRIPTION: Example function demonstrating how to send a plain text email using the Makerkit mailer system. It imports `getMailer` from '@kit/mailers', retrieves the mailer instance, and calls the `sendEmail` method with recipient (`to`), sender (`from`), subject, and a plain text message body (`text`). The function returns a promise that resolves upon successful sending.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/development_authentication_emails_email_configuration_94.md#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nimport { getMailer } from '@kit/mailers';\n\nasync function sendEmail(params: {\n  from: string;\n  to: string;\n}) {\n  const mailer = await getMailer();\n\n  return mailer.sendEmail({\n    to: params.from,\n    from: params.to,\n    subject: 'Hello',\n    text: 'Hello, World!'\n  });\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Supabase Function to Check Credits (SQL)\nDESCRIPTION: This SQL script defines a PostgreSQL function `has_credits` within Supabase. The function takes an `account_id` (UUID) and `tokens` (integer) as input and returns a boolean indicating whether the specified account has at least the specified number of tokens in the `credits` table. Execute permission is granted to authenticated users and the service role.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/billing_webhooks_credit_based_billing_lemon_squeezy_89.md#2025-04-22_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace function public.has_credits(account_id uuid, tokens integer)\n  returns boolean\n  set search_path = ''\n  as $$\n  begin\n    return (select tokens >= tokens from public.credits where account_id = account_id);\n  end;\n  $$ language plpgsql;\n\ngrant execute on function public.has_credits to authenticated, service_role;\n```\n\n----------------------------------------\n\nTITLE: Extending Makerkit Analytics with Custom App Events in TypeScript\nDESCRIPTION: Shows how to create custom app events (e.g., 'feature.used') and use the `useAppEvents` hook along with direct `analytics.trackEvent` calls for more complex or specific tracking scenarios. This allows for defining custom event types and payloads and handling them within a custom hook.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/custom_analytics_provider_google_analytics_provider_posthog_analytics_provider_36.md#2025-04-22_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { analytics } from '@kit/analytics';\nimport { useAppEvents } from '@kit/shared/events';\n\ninterface MyAppEvents {\n  'feature.used': { featureName: string };\n}\n\nexport function useMyAnalytics() {\n  const { emit } = useAppEvents<MyAppEvents>();\n\n  return {\n    trackFeatureUse: (featureName: string) => {\n      emit({ type: 'feature.used', payload: { featureName } });\n      // If you need additional tracking logic:\n      void analytics.trackEvent('Feature Used', { featureName });\n    },\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using a Package Module\nDESCRIPTION: Example of importing and using a module from your custom package in your application code. This demonstrates the end result of package creation and export.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/adding_turborepo_package_approaching_local_development_database_functions_44.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { myModule } from '@kit/my-package';\n\nconsole.log(myModule());\n```\n\n----------------------------------------\n\nTITLE: Prettier Configuration for Code Style\nDESCRIPTION: JSON configuration for Prettier code formatting tool, defining code style rules for the project including tab width, quotes, and other formatting preferences.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/server_actions_uploading_data_to_storage_writing_data_to_supabase_17.md#2025-04-22_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tabWidth\": 2,\n  \"useTabs\": false,\n  \"semi\": true,\n  \"arrowParens\": \"always\",\n  \"parser\": \"typescript\",\n  \"printWidth\": 80,\n  \"singleQuote\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Running E2E Testing Server\nDESCRIPTION: Command to start the server for E2E testing.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/commands_cors_develop_firebase_security_rules_5.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev:test\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Ethereal in Bash\nDESCRIPTION: This snippet shows how to set environment variables for Ethereal to test emails without using a real email account. These variables need to be added to the project's environment configuration.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/environment_variables_setup_project_configuration_set_up_emails_9.md#2025-04-22_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\nETHEREAL_EMAIL=\nETHEREAL_PASSWORD=\n```\n\n----------------------------------------\n\nTITLE: Updating API Handler for Message Fetching (TypeScript)\nDESCRIPTION: Updates the API handler to fetch messages based on the last message's timestamp. It includes a Zod schema for request validation and a Supabase query to filter messages created after the specified timestamp.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/realtime_updates_server_components_7.md#2025-04-22_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nconst GetTicketMessagesSchema = z.object({\n  ticketId: z.string().uuid(),\n  lastCreatedAt: z.string().or(z.literal('')).transform((value) => {\n    if (value === 'undefined') {\n      return;\n    }\n\n    return value;\n  })\n});\n\nconst searchParams = new URL(request.url).searchParams;\n\nconst { ticketId, lastCreatedAt } = GetTicketMessagesSchema.parse({\n  ticketId: searchParams.get('ticketId') ?? '',\n  lastCreatedAt: searchParams.get('lastCreatedAt') ?? '',\n});\n\nlet query = client\n  .from('messages')\n  .select(\n    `\n    id,\n    ticketId: ticket_id,\n    content,\n    author,\n    createdAt: created_at\n    `,\n  )\n  .eq('ticket_id', ticketId)\n  .order('created_at', { ascending: true });\n\nif (lastCreatedAt) {\n  query = query.gt('created_at', lastCreatedAt);\n}\n\nconst { data, error } = await query;\n```\n\n----------------------------------------\n\nTITLE: Fetching Supabase Data in a Next.js Route Handler\nDESCRIPTION: Example of using the reusable `getOrganizationById` query function within a Next.js API Route Handler (`pages/api/organizations/[id]/route.ts`). It obtains a server-side Supabase client using `getSupabaseRouteHandlerClient`, calls the query function with the client and route parameters, and returns the fetched data as a JSON response.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/auth_setup_authentication_blog_16.md#2025-04-22_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n {% title=\"pages/api/organizations/[id]/route.ts\" %}\n\nimport { getOrganizationById } from '~/lib/organizations/database/queries';\nimport getSupabaseRouteHandlerClient from '~/core/supabase/route-handler-client';\nimport { NextRequest, NextResponse } from \"next/server\";\n\nexport const GET = async (\n  req: NextRequest,\n  { params }: { params: { id: string } }\n) => {\n  // Assuming Client type is correctly inferred or imported\n  const client = getSupabaseRouteHandlerClient(); \n  // Assuming params.id needs parsing if organizationId is number\n  const { data } = await getOrganizationById(client, parseInt(params.id, 10)); \n\n  return NextResponse.json(data);\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling Umami Localhost Tracking in Bash\nDESCRIPTION: Sets the optional environment variable `NEXT_PUBLIC_UMAMI_DISABLE_LOCALHOST_TRACKING` to `false` to enable Umami analytics tracking on localhost environments. This is useful for testing the analytics setup during local development, as Umami disables localhost tracking by default.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/custom_analytics_provider_google_analytics_provider_posthog_analytics_provider_36.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nNEXT_PUBLIC_UMAMI_DISABLE_LOCALHOST_TRACKING=false\n```\n\n----------------------------------------\n\nTITLE: Configuring PostHog Analytics Provider\nDESCRIPTION: Example configuration for integrating the PostHog analytics provider with the analytics manager.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/custom_analytics_provider_google_analytics_provider_posthog_analytics_provider_36.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPostHogAnalyticsService } from '@kit/posthog';\n\nimport { createAnalyticsManager } from './analytics-manager';\nimport type { AnalyticsManager } from './types';\n\nexport const analytics: AnalyticsManager = createAnalyticsManager({\n  providers: {\n    posthog: createPostHogAnalyticsService,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Language Switcher in Remix Supabase SaaS Kit (TSX)\nDESCRIPTION: This snippet shows how to import and use the LanguageSwitcher component in a React component to allow users to switch between available languages.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/branding_environment_variables_setup_project_configuration_80.md#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LanguageSwitcher } from '~/components/LanguageSwitcher';\n\nexport const YourComponent = ({ children }) => {\n  return (\n    <div>\n      <LanguageSwitcher />\n      {children}\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Seeding Initial Subscription Plans into Database\nDESCRIPTION: This SQL seed script inserts initial data for subscription plans into the database, used during development to populate the database with feature limit configurations.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/payments_billing_6.md#2025-04-22_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\n-- insert plans\ninsert into public.plans (variant_id, name, max_tickets)\nvalues\n  ('starter-plan', 'Starter Plan', 1000),\n  ('pro-plan', 'Pro Plan', -1);\n```\n\n----------------------------------------\n\nTITLE: Alternative API Guard Implementation with Explicit Parameters\nDESCRIPTION: Shows an alternative way to implement API guards by explicitly passing req and res parameters to each middleware function. This achieves the same protection but with a different syntax.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/architecture_api_guards_app_check_2.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nexport default withPipe(\n  (req, res) => withMethodsGuard(SUPPORTED_METHODS)(req, res),\n  (req, res) => withAuthedUser(req, res),\n  (req, res) => inviteMembersToOrganizationHandler(req, res)\n);\n```\n\n----------------------------------------\n\nTITLE: If Component for Loading Spinner - React - JavaScript\nDESCRIPTION: Demonstrates basic usage of the If component to show a spinner when a loading state is detected. Inputs: isLoading boolean. Outputs: renders LoadingSpinner if loading, nothing otherwise. Useful for displaying spinners or skeletons during async operations.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/bordered_navigation_menu_card_button_cookie_banner_60.md#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<If condition={isLoading}>\n  <LoadingSpinner />\n</If>\n```\n\n----------------------------------------\n\nTITLE: Importing Custom Google Font in Next.js\nDESCRIPTION: Example of importing the Manrope font from Google Fonts package to replace the default Inter font.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_webhooks_locally_using_lemon_squeezy_server_actions_csrf_33.md#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Manrope as SansFont } from 'next/font/google';\n```\n\n----------------------------------------\n\nTITLE: Complete Next.js Supabase Project Configuration\nDESCRIPTION: Full configuration file containing site settings, authentication options, theme configuration, application paths, and Stripe product definitions.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/branding_environment_variables_setup_project_configuration_21.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { Provider } from '@supabase/gotrue-js/src/lib/types';\n\nconst production = process.env.NODE_ENV === 'production';\n\nenum Themes {\n  Light = 'light',\n  Dark = 'dark',\n}\n\nconst configuration = {\n  site: {\n    name: 'Awesomely - Your SaaS Title',\n    description: 'Your SaaS Description',\n    themeColor: '#ffffff',\n    themeColorDark: '#0a0a0a',\n    siteUrl: process.env.NEXT_PUBLIC_SITE_URL,\n    siteName: 'Awesomely',\n    twitterHandle: '',\n    githubHandle: '',\n    language: 'en',\n    convertKitFormId: '',\n    locale: process.env.NEXT_PUBLIC_DEFAULT_LOCALE,\n  },\n  auth: {\n    requireEmailConfirmation:\n      process.env.NEXT_PUBLIC_REQUIRE_EMAIL_CONFIRMATION === 'true',\n    providers: {\n      emailPassword: true,\n      phoneNumber: false,\n      emailLink: false,\n      oAuth: ['google'] as Provider[],\n    },\n  },\n  production,\n  environment: process.env.NEXT_PUBLIC_ENVIRONMENT,\n  features: {\n    enableThemeSwitcher: true,\n  },\n  theme: Themes.Dark,\n  paths: {\n    signIn: '/auth/sign-in',\n    signUp: '/auth/sign-up',\n    signInMfa: '/auth/verify',\n    onboarding: `/onboarding`,\n    appPrefix: '/dashboard',\n    appHome: '/dashboard',\n    authCallback: '/auth/callback',\n    settings: {\n      profile: 'settings/profile',\n      authentication: 'settings/profile/authentication',\n      email: 'settings/profile/email',\n      password: 'settings/profile/password',\n    },\n  },\n  sentry: {\n    dsn: process.env.NEXT_PUBLIC_SENTRY_DSN,\n  },\n  stripe: {\n    products: [\n      {\n        name: 'Basic',\n        description: 'Description of your Basic plan',\n        badge: `Up to 20 users`,\n        features: [\n          'Basic Reporting',\n          'Up to 20 users',\n          '1GB for each user',\n          'Chat Support',\n        ],\n        plans: [\n          {\n            name: 'Monthly',\n            price: '$9',\n            stripePriceId: '<price_id>',\n          },\n          {\n            name: 'Yearly',\n            price: '$90',\n            stripePriceId: '<price_id>',\n          },\n        ],\n      },\n      {\n        name: 'Pro',\n        badge: `Most Popular`,\n        recommended: true,\n        description: 'Description of your Pro plan',\n        features: [\n          'Advanced Reporting',\n          'Up to 50 users',\n          '5GB for each user',\n          'Chat and Phone Support',\n        ],\n        plans: [\n          {\n            name: 'Monthly',\n            price: '$29',\n            stripePriceId: '<price_id>',\n          },\n          {\n            name: 'Yearly',\n            price: '$200',\n            stripePriceId: '<price_id>',\n          },\n        ],\n      },\n      {\n        name: 'Premium',\n        description: 'Description of your Premium plan',\n        badge: ``,\n        features: [\n          'Advanced Reporting',\n          'Unlimited users',\n          '50GB for each user',\n          'Account Manager',\n        ],\n        plans: [\n          {\n            name: '',\n            price: 'Contact us',\n            stripePriceId: '',\n            label: `Contact us`,\n            href: `/contact`,\n          },\n        ],\n      },\n    ],\n  },\n};\n\nexport default configuration;\n```\n\n----------------------------------------\n\nTITLE: Defining Global Application Configuration in TypeScript\nDESCRIPTION: This snippet shows the structure of the global configuration object exported from `configuration.ts`. It centralizes settings for the site (metadata, theme), application paths (auth, settings, API), Firebase credentials (read from environment variables), authentication options (MFA, providers), App Check, navigation style, environment details, and Stripe product/plan information. This configuration is intended to be imported throughout the application using `~/configuration`.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/app_check_auth_flow_auth_hooks_69.md#2025-04-22_snippet_12\n\nLANGUAGE: ts\nCODE:\n```\nexport default {\n  site: {\n    title: '',\n    description: '',\n    themeColor: '',\n    siteUrl: '',\n    siteName: '',\n    twitterHandle: '',\n    language: 'en',\n  },\n  paths: {\n    signIn: '/auth/sign-in',\n    signUp: '/auth/sign-up',\n    emailLinkSignIn: '/auth/link',\n    onboarding: `/onboarding`,\n    appHome: '/tasks',\n    settings: {\n      profile: '/settings/profile',\n      authentication: '/settings/profile/authentication',\n      email: '/settings/profile/email',\n      password: '/settings/profile/password',\n    },\n    api: {\n      checkout: `/resources/stripe/checkout`,\n      billingPortal: `/resources/stripe/portal`,\n    },\n    searchIndex: `/public/search-index`,\n  },\n  firebase: {\n    apiKey: process.env.FIREBASE_API_KEY,\n    authDomain: process.env.FIREBASE_AUTH_DOMAIN,\n    projectId: process.env.FIREBASE_PROJECT_ID,\n    storageBucket: process.env.FIREBASE_STORAGE_BUCKET,\n    messagingSenderId: process.env.FIREBASE_MESSAGING_SENDER_ID,\n    appId: process.env.FIREBASE_APP_ID,\n    measurementId: process.env.FIREBASE_MEASUREMENT_ID,\n  },\n  auth: {\n    // Enable MFA. You must upgrade to GCP Identity Platform to use it.\n    // see: https://cloud.google.com/identity-platform/docs/product-comparison\n    enableMultiFactorAuth: true,\n    // NB: Enable the providers below in the Firebase Console\n    // in your production project\n    providers: {\n      emailPassword: true,\n      phoneNumber: false,\n      emailLink: false,\n      oAuth: [GoogleAuthProvider],\n    },\n  },\n  appCheckSiteKey: process.env.APPCHECK_KEY,\n  navigation: {\n    style: NavigationStyle.TopHeader,\n  },\n  environment: process.env.VERCEL_ENV ?? 'development',\n  emulatorHost: process.env.EMULATOR_HOST,\n  emulator: process.env.EMULATOR === 'true',\n  production: process.env.NODE_ENV === 'production',\n  stripe: {\n    products: [\n      {\n        name: 'Basic',\n        description: 'Describe your basic plan',\n        plans: [\n          {\n            price: '$249/year',\n            stripePriceId: '<STRIPE_PRICE_ID>',\n          }\n        ],\n      },\n      {\n        name: 'Pro',\n        description: 'Describe your pro plan',\n        plans: [\n          {\n            price: '$249/year',\n            stripePriceId: '<STRIPE_PRICE_ID>',\n          }\n        ],\n      },\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration for Remix-Supabase\nDESCRIPTION: This example shows the structure of the .env file for the Remix-Supabase kit. It includes configurations for locale, site URL, environment type, Supabase credentials, Stripe API keys, and email settings.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/user_sdk_sdk_ci_tests_84.md#2025-04-22_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\nDEFAULT_LOCALE=en\nSITE_URL=http://localhost:3000\n\n# set the below to \"production\" in your production environment\nENVIRONMENT=development\n\n# SUPABASE\nSUPABASE_URL=http://localhost:54321\nSUPABASE_ANON_KEY=\nSUPABASE_SERVICE_ROLE_KEY=\n\n# STRIPE\nSTRIPE_WEBHOOK_SECRET=\nSTRIPE_SECRET_KEY=\nNEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=\n\n# EMAIL\nEMAIL_HOST=\nEMAIL_PORT=587\nEMAIL_USER=\nEMAIL_PASSWORD=\nEMAIL_SENDER='MakerKit Team <info@makerkit.dev>'\n```\n\n----------------------------------------\n\nTITLE: Importing Shadcn UI Component - TypeScript\nDESCRIPTION: Shows how to import an exported Shadcn UI component in TypeScript once it is mapped in `package.json`. Adjust the import statement based on the component being utilized.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/cms_api_cms_creating_your_own_cms_client_42.md#2025-04-22_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Avatar } from '@kit/ui/avatar';\n```\n\n----------------------------------------\n\nTITLE: Using Alternative Dark Mode Colors in Tailwind CSS\nDESCRIPTION: This snippet demonstrates how to use an alternative color palette (zinc) for dark mode in Tailwind CSS by spreading the zinc color palette into the dark object. The dark color will be zinc.950 and the foreground will be zinc.100.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_one_time_payments_stripe_webhooks_payments_35.md#2025-04-22_snippet_10\n\nLANGUAGE: js\nCODE:\n```\ndark: {\n  ...colors.zinc,\n  DEFAULT: colors.zinc[950],\n  foreground: colors.zinc[100],\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Dashboard Page with App Layout Components in Next.js\nDESCRIPTION: Implements a dashboard page using AppHeader and AppContainer components to structure the layout. These components provide consistent UI across application pages.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/organization_sdk_organization_subscription_sdk_sdk_25.md#2025-04-22_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Squares2X2Icon } from '@heroicons/react/24/outline';\n\nimport Trans from '~/core/ui/Trans';\nimport AppHeader from '~/app/dashboard/[organization]/components/AppHeader';\nimport AppContainer from '~/app/dashboard/[organization]/components/AppContainer';\n\nfunction DashboardPage() {\n  return (\n    <>\n      <AppHeader>\n        <span className={'flex space-x-2'}>\n          <Squares2X2Icon className=\"w-6\" />\n\n          <span>\n            <Trans i18nKey={'common:dashboardTabLabel'} />\n          </span>\n        </span>\n      </AppHeader>\n\n      <AppContainer>\n        Your content goes here\n      </AppContainer>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Makerkit Analytics Plugins using CLI in Bash\nDESCRIPTION: Installs Makerkit analytics plugins (like PostHog or Umami) into the project using the Makerkit CLI. This command initiates an interactive prompt to select the desired analytics package.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/analytics_api_custom_analytics_provider_google_analytics_provider_57.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nnpx @makerkit/cli@latest plugins install\n```\n\n----------------------------------------\n\nTITLE: Adding a New Marketing Page in React Router\nDESCRIPTION: This snippet shows how to create a new marketing page in a React Router application and add it to the routing configuration. It demonstrates file creation and route definition.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/database_webhooks_legal_pages_marketing_pages_64.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// apps/web/app/routes/marketing/about.tsx\nexport default function AboutPage() {\n  return <div></div>\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nconst marketingLayout = layout('routes/marketing/layout.tsx', [\n  index('routes/marketing/index.tsx'),\n  route('terms-of-service', 'routes/marketing/terms-of-service.tsx'),\n  route('privacy-policy', 'routes/marketing/privacy-policy.tsx'),\n  route('pricing', 'routes/marketing/pricing.tsx'),\n  route('contact', 'routes/marketing/contact/index.tsx'),\n  route('faq', 'routes/marketing/faq.tsx'),\n  route('blog', 'routes/marketing/blog/index.tsx'),\n  route('blog/:slug', 'routes/marketing/blog/$slug.tsx'),\n  route('cookie-policy', 'routes/marketing/cookie-policy.tsx'),\n  route('about', 'routes/marketing/about.tsx'),  // <-- add this line\n  layout('routes/marketing/docs/layout.tsx', [\n    route('docs', 'routes/marketing/docs/index.tsx'),\n    route('docs/*', 'routes/marketing/docs/$slug.tsx'),\n  ]),\n]);\n```\n\n----------------------------------------\n\nTITLE: Stripe Plans Configuration\nDESCRIPTION: Configuration object for defining SaaS pricing plans including product details, features, and Stripe integration settings.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/updating_sidebar_menu_change_auth_strategy_setup_oauth_79.md#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nstripe: {\n  products: [\n    {\n      name: 'Basic',\n      description: 'Description of your Basic plan',\n      badge: `Up to 20 users`,\n      features: [\n        'Basic Reporting',\n        'Up to 20 users',\n        '1GB for each user',\n        'Chat Support',\n      ],\n      plans: [\n        {\n          name: 'Monthly',\n          price: '$9',\n          stripePriceId: '<price_id>',\n          trialPeriodDays: 7,\n        },\n        {\n          name: 'Yearly',\n          price: '$90',\n          stripePriceId: '<price_id>',\n          trialPeriodDays: 7,\n        },\n      ],\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Team Account Navigation\nDESCRIPTION: Navigation configuration setup for team accounts including dashboard, settings, and user management\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/team_accounts_only_recipes_adding_translations_55.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst getRoutes = (account: string) => [\n  {\n    label: 'common:routes.application',\n    collapsible: false,\n    children: [\n      {\n        label: 'common:routes.dashboard',\n        path: pathsConfig.app.accountHome.replace('[account]', account),\n        Icon: <LayoutDashboard className={iconClasses} />,\n        end: true,\n      }\n    ],\n  },\n  {\n    label: 'common:routes.settings',\n    collapsible: false,\n    children: [\n      {\n        label: 'common:routes.settings',\n        path: createPath(pathsConfig.app.accountSettings, account),\n        Icon: <Settings className={iconClasses} />,\n      },\n      {\n        label: 'common:routes.account',\n        path: createPath('/home/[account]/user-settings', account),\n        Icon: <User className={iconClasses} />,\n      }\n    ].filter(Boolean),\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Querying User Projects with SQL\nDESCRIPTION: SQL query to retrieve all projects a user is a member of\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/projects_data_model_53.md#2025-04-22_snippet_20\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM public.projects\nWHERE id IN (\n  SELECT project_id\n  FROM public.project_members\n  WHERE user_id = auth.uid()\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Feedback Popup Plugin via HTTPS\nDESCRIPTION: Alternative command to install the Feedback Popup plugin using HTTPS URL instead of SSH. This is useful if there are issues with SSH access.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_one_time_payments_stripe_webhooks_payments_11.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ngit subtree add --prefix plugins/feedback-popup https://github.com/makerkit/next-firebase-saas-kit-plugins feedback-popup --squash\n```\n\n----------------------------------------\n\nTITLE: Switching to Lemon Squeezy Branch\nDESCRIPTION: Commands for checking out and pulling updates from the Lemon Squeezy payment integration branch.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/user_roles_validating_api_input_zod_development_18.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout main-ls\ngit pull upstream main-ls\n```\n\n----------------------------------------\n\nTITLE: Fetching Firestore Data with React Hook using React TypeScript\nDESCRIPTION: A custom React hook for fetching organization-specific tasks from Firestore using reactfire. It utilizes Firestore's collection and query functionalities to filter tasks by organizationId. Dependencies include reactfire, firebase/firestore, and the Task interface.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/deploying_production_development_getting_started_environment_variables_13.md#2025-04-22_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useFirestore, useFirestoreCollectionData } from 'reactfire';\n\nimport {\n  collection,\n  CollectionReference,\n  query,\n  where,\n} from 'firebase/firestore';\n\nimport { Task } from '~/lib/tasks/types/task';\n\nfunction useFetchTasks(organizationId: string) {\n  const firestore = useFirestore();\n  const tasksCollection = 'tasks';\n\n  const collectionRef = collection(\n    firestore,\n    tasksCollection\n  ) as CollectionReference<WithId<Task>>;\n\n  const path = `organizationId`;\n  const operator = '==';\n  const constraint = where(path, operator, organizationId);\n  const organizationsQuery = query(collectionRef, constraint);\n\n  return useFirestoreCollectionData(organizationsQuery, {\n    idField: 'id',\n  });\n}\n\nexport default useFetchTasks;\n```\n\n----------------------------------------\n\nTITLE: Using Type-Safe Loader Data in a React Component (TypeScript)\nDESCRIPTION: Shows a React component (`MyPage`) using specific route types (`Route.ComponentProps`) which infers the structure of `props.loaderData` directly from the associated loader's return type, providing strong type safety during development.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/creating_your_own_cms_client_keystatic_wordpress_62.md#2025-04-22_snippet_28\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function MyPage(props: Route.ComponentProps) {\n  // props.loaderData is typed based on loader return type\n  const { title } = props.loaderData;\n  return <h1>{title}</h1>;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Resolving Database Types Conflicts\nDESCRIPTION: Commands to reset the database and regenerate types in case of conflicts in the database.types.ts file.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/supabase_client_clone_repository_common_commands_56.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm run supabase:web:reset\nnpm run supabase:web:typegen\n```\n\n----------------------------------------\n\nTITLE: Fetching Updates from Upstream Repository in Git\nDESCRIPTION: Command to pull updates from the upstream repository after committing local changes.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/commands_cors_develop_firebase_security_rules_5.md#2025-04-22_snippet_42\n\nLANGUAGE: bash\nCODE:\n```\ngit pull upstream main\n```\n\n----------------------------------------\n\nTITLE: Updating Tailwind CSS Configuration for Dark Mode in JavaScript\nDESCRIPTION: This snippet demonstrates how to update the tailwind.config.js file to use a custom dark color palette, specifically switching to the 'slate' color scheme for dark mode.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/environment_variables_setup_project_configuration_set_up_emails_9.md#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst colors = require('tailwindcss/colors');\n\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: ['./app/**/*.{ts,tsx,jsx,js}'],\n  darkMode: 'class',\n  theme: {\n    extend: {\n      fontFamily: {\n        serif: ['serif'],\n        heading: ['system-ui', 'Helvetica Neue', 'Helvetica', 'Arial'],\n        sans: [\n          'system-ui',\n          'BlinkMacSystemFont',\n          'Inter',\n          'Segoe UI',\n          'Roboto',\n          'Ubuntu',\n        ],\n        monospace: [`SF Mono`, `ui-monospace`, `Monaco`, 'Monospace'],\n      },\n      colors: {\n        primary: {\n          ...colors.indigo,\n          contrast: '#fff',\n        },\n        dark: colors.slate,\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using Custom API Request Hook in a Component\nDESCRIPTION: This React component demonstrates how to use the custom useCreateSession hook to handle API requests and manage the request state.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_one_time_payments_stripe_webhooks_ci_tests_73.md#2025-04-22_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCreateSession } from '~/core/hooks/use-create-session';\n\nfunction Component() {\n  const [createSession, createSessionState] = useCreateSession();\n\n  return (\n    <>\n      { createSessionState.loading ? `Loading...` : null }\n      { createSessionState.error ? `Error :(` : null }\n      { createSessionState.success ? `Yay, success!` : null }\n\n      <SignInForm onSignIn={(idToken) => createSession({ idToken })} />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Permission Grants\nDESCRIPTION: SQL commands for granting execute permissions on feature usage functions to appropriate database roles.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_billing_checkout_addons_subscription_entitlements_54.md#2025-04-22_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nGRANT EXECUTE ON FUNCTION public.can_use_feature(UUID, VARCHAR) TO authenticated;\nGRANT EXECUTE ON FUNCTION public.get_entitlement(UUID, VARCHAR) TO authenticated;\nGRANT EXECUTE ON FUNCTION public.update_feature_usage(UUID, VARCHAR, JSONB) TO service_role;\nGRANT EXECUTE ON FUNCTION public.update_feature_quota_usage(UUID, VARCHAR, INTEGER) TO service_role;\n```\n\n----------------------------------------\n\nTITLE: Service Account Email Configuration\nDESCRIPTION: Environment variable for Firebase service account client email configuration.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/third_party_auth_providers_authentication_blog_3.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nSERVICE_ACCOUNT_CLIENT_EMAIL=\n```\n\n----------------------------------------\n\nTITLE: Organization Subscription Interface\nDESCRIPTION: TypeScript interface defining the structure of organization subscription data\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/subscription_permissions_organizations_lemon_squeezy_23.md#2025-04-22_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nexport interface OrganizationSubscription {\n  id: string;\n  priceId: string;\n\n  status: Stripe.Subscription.Status;\n  currency: string | null;\n  cancelAtPeriodEnd: boolean;\n\n  interval: string | null;\n  intervalCount: number | null;\n\n  createdAt: UnixTimestamp;\n  periodStartsAt: UnixTimestamp;\n  periodEndsAt: UnixTimestamp;\n  trialStartsAt: UnixTimestamp | null;\n  trialEndsAt: UnixTimestamp | null;\n}\n```\n\n----------------------------------------\n\nTITLE: Supabase Database URL Configuration\nDESCRIPTION: Environment variable setup for Supabase database connection string.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/waitlist_plugin_plugins_drizzle_supabase_52.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nSUPABASE_DATABASE_URL=postgres://user:pass@host:port/database\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS Dark Mode - JavaScript\nDESCRIPTION: Configuration file for Tailwind CSS that sets up dark mode theming and custom color palettes. Extends default theme with custom fonts and colors, including a dark mode configuration.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/migrations_extending_organizations_organization_hooks_10.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst colors = require('tailwindcss/colors');\n\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: ['./app/**/*.{ts,tsx,jsx,js}'],\n  darkMode: 'class',\n  theme: {\n    extend: {\n      fontFamily: {\n        serif: ['serif'],\n        heading: ['system-ui', 'Helvetica Neue', 'Helvetica', 'Arial'],\n        sans: [\n          'system-ui',\n          'BlinkMacSystemFont',\n          'Inter',\n          'Segoe UI',\n          'Roboto',\n          'Ubuntu',\n        ],\n        monospace: [`SF Mono`, `ui-monospace`, `Monaco`, 'Monospace'],\n      },\n      colors: {\n        primary: {\n          ...colors.indigo,\n          contrast: '#fff',\n        },\n        dark: colors.slate,\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Default Fonts - TypeScript\nDESCRIPTION: Defines default `sans` and `heading` fonts using Google Fonts in the Makerkit application. Provides configurations for font subsets, variables, weights, preload options, and fallbacks in `apps/web/lib/fonts.ts`.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/cms_api_cms_creating_your_own_cms_client_42.md#2025-04-22_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Urbanist as HeadingFont, Inter as SansFont } from 'next/font/google';\n\n/**\n * @sans\n * @description Define here the sans font.\n * By default, it uses the Inter font from Google Fonts.\n */\nconst sans = SansFont({\n  subsets: ['latin'],\n  variable: '--font-sans',\n  fallback: ['system-ui', 'Helvetica Neue', 'Helvetica', 'Arial'],\n  preload: true,\n  weight: ['300', '400', '500', '600', '700'],\n});\n\n/**\n * @heading\n * @description Define here the heading font.\n * By default, it uses the Urbanist font from Google Fonts.\n */\nconst heading = HeadingFont({\n  subsets: ['latin'],\n  variable: '--font-heading',\n  fallback: ['system-ui', 'Helvetica Neue', 'Helvetica', 'Arial'],\n  preload: true,\n  weight: ['500', '700'],\n});\n\n// we export these fonts into the root layout\nexport { sans, heading };\n```\n\n----------------------------------------\n\nTITLE: Creating Support Tickets with OpenAI Generated Titles\nDESCRIPTION: Implementation of ticket creation method that integrates OpenAI title generation with database operations for tickets and messages.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/building_javascript_widget_1.md#2025-04-22_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nclass CustomerTicketService {\n  // other methods...\n\n  async createTicket(params: { accountId: string; message: string }) {\n    const logger = await getLogger();\n\n    logger.info(params, 'Creating ticket...');\n\n    const title = await this.generateTicketTitle(params.message);\n\n    const ticket = await this.client\n      .from('tickets')\n      .insert({\n        account_id: params.accountId,\n        title,\n      })\n      .select('id')\n      .single();\n\n    if (ticket.error) {\n      logger.error({ error: ticket.error }, 'Error creating ticket');\n\n      throw ticket.error;\n    }\n\n    // create message\n    const { data, error } = await this.client\n      .from('messages')\n      .insert({\n        ticket_id: ticket.data.id,\n        content: params.message,\n        author: 'customer',\n      })\n      .select(\n        `\n          ticketId: ticket_id,\n          content,\n          author,\n          createdAt: created_at\n        `,\n      )\n      .single();\n\n    if (error) {\n      logger.error({ error }, 'Error creating message');\n\n      throw error;\n    }\n\n    return data;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a React Form with Zod Validation\nDESCRIPTION: Illustrates how to build a client-side form component with React Hook Form and Zod validation, including form submission handling with server actions and loading state management.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/llms_migration_from_makerkit_v1_navigating_codebase_49.md#2025-04-22_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\nexport function NoteForm() {\n  const [pending, startTransition] = useTransition();\n\n  const form = useForm({\n    resolver: zodResolver(NoteSchema),\n    defaultValues: { title: '', content: '', category: 'personal' }\n  });\n\n  const onSubmit = (data: z.infer<typeof NoteSchema>) => {\n    startTransition(async () => {\n      try {\n        await createNoteAction(data);\n        form.reset();\n      } catch (error) {\n        // Handle error\n      }\n    });\n  };\n\n  return (\n    <Form {...form}>\n      <FormField name=\"title\" render={({ field }) => (\n        <FormItem>\n          <FormLabel>Title</FormLabel>\n          <FormControl>\n            <Input {...field} />\n          </FormControl>\n          <FormMessage />\n        </FormItem>\n      )} />\n      {/* Other fields */}\n    </Form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Team Account Order\nDESCRIPTION: Code showing how to retrieve orders data for a team account using the getOrder method. Requires the account ID as a parameter.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/custom_analytics_provider_google_analytics_provider_posthog_analytics_provider_36.md#2025-04-22_snippet_40\n\nLANGUAGE: tsx\nCODE:\n```\nconst api = createTeamAccountsApi(client);\nconst order = await api.getOrder('account-id');\n```\n\n----------------------------------------\n\nTITLE: Basic Conditional Rendering using 'If' Component in React (JSX)\nDESCRIPTION: A simple example of the 'If' component rendering a 'LoadingSpinner' only when the 'isLoading' condition is truthy. No fallback content is provided.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/app_breadcrumbs_bordered_navigation_menu_card_button_39.md#2025-04-22_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\n<If condition={isLoading}>\n  <LoadingSpinner />\n</If>\n```\n\n----------------------------------------\n\nTITLE: Enabling Account Deletion via Environment Variable\nDESCRIPTION: Demonstrates how to enable the account deletion feature by setting the specific environment variable `NEXT_PUBLIC_ENABLE_ACCOUNT_DELETION` to `true`. This overrides the default setting in the configuration file.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/auth_setup_authentication_blog_16.md#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nNEXT_PUBLIC_ENABLE_ACCOUNT_DELETION=true\n```\n\n----------------------------------------\n\nTITLE: Defining One-Off Payment Plan in Makerkit Schema\nDESCRIPTION: This code snippet demonstrates how to define a one-off payment plan in the Makerkit billing schema. It specifies a product with a one-time payment plan that includes a single line item with a flat cost structure.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/lemon_squeezy_metered_usage_one_off_payments_38.md#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nexport default createBillingSchema({\n  provider,\n  products: [\n    {\n      id: 'starter',\n      name: 'Starter',\n      description: 'The perfect plan to get started',\n      currency: 'USD',\n      badge: `Value`,\n      plans: [\n        {\n          name: 'Starter Monthly',\n          id: 'starter-monthly',\n          paymentType: 'one-time',\n          lineItems: [\n            {\n              id: 'price_1NNwYHI1i3VnbZTqI2UzaHIe',\n              name: 'Addon 2',\n              cost: 9.99,\n              type: 'flat',\n            },\n          ],\n        }\n      ],\n    }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Typing Table Change Events for 'accounts' Table (TypeScript)\nDESCRIPTION: This TypeScript snippet defines a type alias 'AccountChange' specializing 'RecordChange' for the 'accounts' table. This enables precise typing for webhook handlers and event processors acting on change events specific to 'accounts'. Requires the 'RecordChange' generic from your type definitions. It is an example of customizing event payload typing for clarity and safety.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/adding_turborepo_package_approaching_local_development_database_functions_44.md#2025-04-22_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\ntype AccountChange = RecordChange<'accounts'>;\n\n```\n\n----------------------------------------\n\nTITLE: Importing and Using CookieBanner Component in React\nDESCRIPTION: Demonstrates how to import and use the CookieBanner component in a React application. The component is designed to display a consent banner for cookies and tracking technologies.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/bordered_navigation_menu_card_button_cookie_banner_60.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { CookieBanner } from '@kit/ui/cookie-banner';\n\nfunction App() {\n  return (\n    <div>\n      {/* Your app content */}\n      <CookieBanner />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Navigation Menu Entry in Next.js Site Navigation\nDESCRIPTION: Example showing how to add a new navigation menu entry by updating the links object and NavigationMenu component in SiteNavigation.tsx\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/updating_navigation_menu_403_error_actions_contentlayer_stuck_34.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst links = {\n  SignIn: {\n    label: 'Sign In',\n    path: '/auth/sign-in',\n  },\n  Blog: {\n    label: 'Blog',\n    path: '/blog',\n  },\n  Docs: {\n    label: 'Docs',\n    path: '/docs',\n  },\n  Pricing: {\n    label: 'Pricing',\n    path: '/pricing',\n  },\n  FAQ: {\n    label: 'FAQ',\n    path: '/faq',\n  },\n  NewPage: {\n    label: 'New Page',\n    path: '/new-page',\n  },\n};\n```\n\nLANGUAGE: tsx\nCODE:\n```\n<NavigationMenu>\n  <NavigationMenuItem\n    className={'flex lg:hidden'}\n    link={links.SignIn}\n  />\n\n  <NavigationMenuItem link={links.Blog} />\n  <NavigationMenuItem link={links.Docs} />\n  <NavigationMenuItem link={links.Pricing} />\n  <NavigationMenuItem link={links.FAQ} />\n\n  <NavigationMenuItem link={links.NewPage} />\n</NavigationMenu>\n```\n\n----------------------------------------\n\nTITLE: Defining Event Model Type in TypeScript\nDESCRIPTION: This snippet demonstrates how to define a TypeScript interface for the EventModel in the lib/events/types folder.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/project_structure_running_project_tailwind_css_75.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface EventModel {\n  name: string;\n  description: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Task Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for the Task model that corresponds to the database schema, including all relevant fields and their types.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/organization_sdk_organization_subscription_sdk_sdk_25.md#2025-04-22_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Task {\n  id: number;\n  name: string;\n  organizationId: string;\n  dueDate: string;\n  done: boolean;\n  description: string | null;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Language Selector Component\nDESCRIPTION: Code example showing how to import and use the LanguageSelector component in the application.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/text_editor_plugin_waitlist_plugin_plugins_98.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LanguageSelector } from '@kit/ui/language-selector';\n\n<LanguageSelector />\n```\n\n----------------------------------------\n\nTITLE: Alternative Dark Mode Color Configuration with Zinc\nDESCRIPTION: JavaScript configuration example showing how to use a different color palette (zinc) for dark mode in Tailwind CSS with Shadcn UI.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/initializing_project_introduction_marketing_site_pages_14.md#2025-04-22_snippet_22\n\nLANGUAGE: js\nCODE:\n```\ndark: {\n  ...colors.zinc,\n  DEFAULT: colors.zinc[950],\n  foreground: colors.zinc[100],\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using CookieBanner Component in React\nDESCRIPTION: Demonstrates how to import and use the CookieBanner component within a React application. The component is designed to display a consent banner for cookies and tracking technologies.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/paddle_per_seat_billing_stripe_90.md#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { CookieBanner } from '@kit/ui/cookie-banner';\n\nfunction App() {\n  return (\n    <div>\n      {/* Your app content */}\n      <CookieBanner />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Layout for Static Page in Next.js with TypeScript\nDESCRIPTION: The following code creates a basic page layout containing a header, main content, and footer by utilizing pre-existing components. It organizes structural elements for page display.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/environment_variables_setup_project_configuration_set_up_emails_9.md#2025-04-22_snippet_8\n\nLANGUAGE: TSX\nCODE:\n```\nimport type { GetStaticPropsContext } from \"next\";\nimport { withTranslationProps } from '~/lib/props/with-translation-props';\n\nimport Footer from '~/components/Footer';\nimport SiteHeader from '~/components/SiteHeader';\nimport Layout from '~/core/ui/Layout';\nimport Container from '~/core/ui/Container';\n\nfunction AboutPage() {\n  return (\n    <Layout>\n      <SiteHeader />\n      <Container>\n        <div>About page</div>\n      </Container>\n      <Footer />\n    </Layout>\n  );\n}\n\nexport function getStaticProps(ctx: GetStaticPropsContext) {\n  return withTranslationProps(ctx);\n}\n```\n\n----------------------------------------\n\nTITLE: Stopping the Local Supabase Environment\nDESCRIPTION: Command to stop the Supabase local development environment when it's no longer needed.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/functions_initializing_project_introduction_85.md#2025-04-22_snippet_31\n\nLANGUAGE: txt\nCODE:\n```\nnpm run supabase:stop\n```\n\n----------------------------------------\n\nTITLE: Defining Routes in React Router Supabase Turbo\nDESCRIPTION: Shows the helper functions used to define routes in the starter kit. These functions include route(), layout(), and index() for configuring different types of routes.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/supabase_clients_data_fetching_adding_pages_63.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nroute('path', 'component-path')\nlayout('layout-component', [child-routes])\nindex('index-component')\n```\n\n----------------------------------------\n\nTITLE: Updating Route Configuration in React Router\nDESCRIPTION: Shows how to update the routes configuration in the apps/web/app/routes.ts file to include the new 'Features' page in the marketing layout.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/supabase_clients_data_fetching_adding_pages_63.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst marketingLayout = layout('routes/marketing/layout.tsx', [\n  index('routes/marketing/index.tsx'),\n  route('terms-of-service', 'routes/marketing/terms-of-service.tsx'),\n  route('privacy-policy', 'routes/marketing/privacy-policy.tsx'),\n  route('pricing', 'routes/marketing/pricing.tsx'),\n  route('contact', 'routes/marketing/contact/index.tsx'),\n  route('features', 'routes/marketing/features.tsx'), // Add your new route here\n  route('faq', 'routes/marketing/faq.tsx'),\n  // ...other routes\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS in Next.js Firebase Project\nDESCRIPTION: The default Tailwind CSS configuration for Makerkit projects, which extends the default theme with custom colors, fonts, animations, and other styling properties. It defines primary and dark color palettes that are used throughout the application.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/initializing_project_introduction_marketing_site_pages_14.md#2025-04-22_snippet_23\n\nLANGUAGE: js\nCODE:\n```\nconst colors = require('tailwindcss/colors');\n\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: ['./app/**/*.{ts,tsx,jsx,js}'],\n  darkMode: 'class',\n  theme: {\n    extend: {\n      fontFamily: {\n        serif: ['serif'],\n        heading: ['system-ui', 'Helvetica Neue', 'Helvetica', 'Arial'],\n        sans: [\n          'system-ui',\n          'BlinkMacSystemFont',\n          'Inter',\n          'Segoe UI',\n          'Roboto',\n          'Ubuntu',\n        ],\n        monospace: [`SF Mono`, `ui-monospace`, `Monaco`, 'Monospace'],\n      },\n      colors: {\n        border: 'hsl(var(--border))',\n        input: 'hsl(var(--input))',\n        ring: 'hsl(var(--ring))',\n        background: 'hsl(var(--background))',\n        foreground: 'hsl(var(--foreground))',\n        dark: {\n          ...colors.slate,\n          DEFAULT: colors.slate[950],\n          foreground: colors.slate[100],\n        },\n        primary: {\n          DEFAULT: 'hsl(var(--primary))',\n          foreground: 'hsl(var(--primary-foreground))',\n          ...colors.violet,\n        },\n        secondary: {\n          DEFAULT: 'hsl(var(--secondary))',\n          foreground: 'hsl(var(--secondary-foreground))',\n        },\n        destructive: {\n          DEFAULT: 'hsl(var(--destructive))',\n          foreground: 'hsl(var(--destructive-foreground))',\n        },\n        muted: {\n          DEFAULT: 'hsl(var(--muted))',\n          foreground: 'hsl(var(--muted-foreground))',\n        },\n        accent: {\n          DEFAULT: 'hsl(var(--accent))',\n          foreground: 'hsl(var(--accent-foreground))',\n        },\n        popover: {\n          DEFAULT: 'hsl(var(--popover))',\n          foreground: 'hsl(var(--popover-foreground))',\n        },\n        card: {\n          DEFAULT: 'hsl(var(--card))',\n          foreground: 'hsl(var(--card-foreground))',\n        },\n      },\n      borderRadius: {\n        lg: 'var(--radius)',\n        md: 'calc(var(--radius) - 2px)',\n        sm: 'calc(var(--radius) - 4px)',\n      },\n      keyframes: {\n        'accordion-down': {\n          from: { height: 0 },\n          to: { height: 'var(--radix-accordion-content-height)' },\n        },\n        'accordion-up': {\n          from: { height: 'var(--radix-accordion-content-height)' },\n          to: { height: 0 },\n        },\n      },\n      animation: {\n        'accordion-down': 'accordion-down 0.2s ease-out',\n        'accordion-up': 'accordion-up 0.2s ease-out',\n      },\n    },\n  },\n  plugins: [require('tailwindcss-animate')],\n};\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for Search Documentation Page\nDESCRIPTION: This YAML frontmatter defines metadata for the search documentation page, including title, label, order, and description.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/third_party_auth_providers_authentication_blog_3.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nstatus: \"published\"\ntitle: Searching Posts and Documentation with Minisearch\nlabel: Search Functionality\norder: 3\ndescription: 'Learn how Makerkit makes it easy to add a simple search engine\nfor your blog posts and documentation'\n---\n```\n\n----------------------------------------\n\nTITLE: Implementing Server Actions in Next.js with Supabase\nDESCRIPTION: This code demonstrates how to create a server action using enhanceAction for server-side data mutation with Supabase. It includes authentication and schema validation while providing a clean API for client components.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/llms_migration_from_makerkit_v1_navigating_codebase_49.md#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n'use server';\n\nimport { enhanceAction } from '@kit/next/actions';\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\n\nexport const createNoteAction = enhanceAction(\n  async function (data, user) {\n    const client = getSupabaseServerClient();\n    const { error } = await client\n      .from('notes')\n      .insert({ ...data, user_id: user.id });\n\n    if (error) throw error;\n    return { success: true };\n  },\n  {\n    auth: true,\n    schema: NoteSchema,\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server (Bash)\nDESCRIPTION: Executes the `dev` script defined in the project's `package.json` using `pnpm run`, typically starting the Next.js development server for the main web application.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/code_health_common_commands_conventions_48.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Metadata in Firebase Storage Upload (JavaScript)\nDESCRIPTION: This snippet sets a custom metadata property on a file upload to Firebase Storage, storing the organizationId as part of the file's metadata. This approach makes it possible to construct security rules that restrict file access based on organization membership. The code assumes that organizationId is available in the scope, and should be used with the Firebase Storage upload API that supports customMetadata.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/custom_fetch_fetching_data_firestore_making_api_requests_4.md#2025-04-22_snippet_16\n\nLANGUAGE: ts\nCODE:\n```\ncustomMetadata: {\n  organizationId,\n},\n```\n\n----------------------------------------\n\nTITLE: Creating a One-Off Payment Schema in TypeScript\nDESCRIPTION: Defines a product schema for one-off payments using createBillingSchema. This example includes a 'Starter' product with a one-time payment plan that contains a single line item.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/billing_webhooks_credit_based_billing_lemon_squeezy_89.md#2025-04-22_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nexport default createBillingSchema({\n  provider,\n  products: [\n    {\n      id: 'starter',\n      name: 'Starter',\n      description: 'The perfect plan to get started',\n      currency: 'USD',\n      badge: `Value`,\n      plans: [\n        {\n          name: 'Starter Monthly',\n          id: 'starter-monthly',\n          paymentType: 'one-time',\n          lineItems: [\n            {\n              id: 'price_1NNwYHI1i3VnbZTqI2UzaHIe',\n              name: 'Addon 2',\n              cost: 9.99,\n              type: 'flat',\n            },\n          ],\n        }\n      ],\n    }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Analytics Provider in TypeScript\nDESCRIPTION: Example of setting up the Google Analytics provider in the analytics manager configuration.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/analytics_api_custom_analytics_provider_google_analytics_provider_57.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createGoogleAnalyticsService } from '@kit/google-analytics';\n\nimport { createAnalyticsManager } from './analytics-manager';\nimport type { AnalyticsManager } from './types';\n\nexport const analytics: AnalyticsManager = createAnalyticsManager({\n    providers: {\n        'google-analytics': createGoogleAnalyticsService,\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Subscription Status Check with useIsSubscriptionActive Hook\nDESCRIPTION: This snippet defines the useIsSubscriptionActive hook, which checks if the current organization has an active paid subscription. It uses the useCurrentOrganization hook and checks the subscription status against a list of active statuses.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/adding_admin_users_admin_overview_admin_1.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Stripe } from 'stripe';\nimport { useCurrentOrganization } from '~/lib/organizations/hooks/use-current-organization';\n\nconst ACTIVE_STATUSES: Stripe.Subscription.Status[] = ['active', 'trialing'];\n\n/**\n * @name useIsSubscriptionActive\n * @description Returns whether the organization is on any paid\n * subscription, regardless of plan.\n */\nfunction useIsSubscriptionActive() {\n  const organization = useCurrentOrganization();\n  const status = organization?.subscription?.status;\n\n  if (!status) {\n    return false;\n  }\n\n  return ACTIVE_STATUSES.includes(status);\n}\n\nexport default useIsSubscriptionActive;\n```\n\n----------------------------------------\n\nTITLE: Example of Stepper Component with Numbered Variant\nDESCRIPTION: Example showing how to use the Stepper component with the 'numbers' variant which displays steps as numbered circles with labels between them.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stepper_components_application_configuration_61.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Stepper\n  steps={['Account', 'Personal Info', 'Review']}\n  currentStep={1}\n  variant=\"numbers\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Stripe Testing Environment in .env.test\nDESCRIPTION: Sets the environment variable to disable Stripe testing when Docker is not available. This can be toggled in the .env.test file to control whether Stripe testing is enabled during test runs.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/user_sdk_sdk_ci_tests_84.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nENABLE_STRIPE_TESTING=false\n```\n\n----------------------------------------\n\nTITLE: Defining Database Table Constants\nDESCRIPTION: Example of defining a constant for the 'tasks' table name that can be reused across the application. This pattern promotes consistency and simplifies updates when table names change.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/uploading_data_to_storage_writing_data_to_supabase_data_fetching_77.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport const TASKS_TABLE = `tasks`;\n```\n\n----------------------------------------\n\nTITLE: Tracking Page Views with Analytics API in TypeScript\nDESCRIPTION: Example of manually tracking page views using the trackPageView method in a Makerkit project.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/analytics_api_custom_analytics_provider_google_analytics_provider_57.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nvoid analytics.trackPageView('Sign Up');\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Locale in Next.js\nDESCRIPTION: Explains how to set a default language in a Next.js Firebase app by modifying the `DEFAULT_LOCALE` environment variable in `.env`. This requires setting the variable to a valid language code.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/environment_variables_setup_project_configuration_set_up_emails_9.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nDEFAULT_LOCALE=es\n```\n\n----------------------------------------\n\nTITLE: Creating Admin Route for Feedback Submissions\nDESCRIPTION: React code to create an admin route for viewing feedback submissions.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/ai_text_editor_cookie_banner_feedback_popup_24.md#2025-04-22_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport FeedbackSubmissionsPage, {\n    metadata,\n} from '~/plugins/feedback-popup/admin/FeedbackSubmissionsPage';\n\nexport default FeedbackSubmissionsPage;\n\nexport { metadata };\n```\n\n----------------------------------------\n\nTITLE: Running the Super Admin Assignment Script with tsx\nDESCRIPTION: A bash command to execute the TypeScript script for assigning super admin role to a user. This command uses npx to run the script with tsx, which allows running TypeScript files directly.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/adding_admin_users_admin_overview_admin_1.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx tsx ./assign-super-admin.ts\n```\n\n----------------------------------------\n\nTITLE: Installing Shadcn UI Components\nDESCRIPTION: Bash commands for installing Shadcn UI components in a Remix Supabase application. Shows example usage with the Button component.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/team_account_sidebar_configuration_configuration_cms_api_92.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add <component> -c ./packages/ui\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add button -c ./packages/ui\n```\n\n----------------------------------------\n\nTITLE: Widget Container Component Implementation\nDESCRIPTION: React component that provides widget context and handles mounting logic with local storage integration\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/building_javascript_widget_1.md#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\nimport { useEffect, useState } from 'react';\n\nimport { WidgetContext } from '../lib/context';\nimport SupportTicketWidgetContainer from './support-ticket-widget-container';\n\nexport default function WidgetContainer(props: { accountId: string }) {\n  const [mounted, setMounted] = useState(false);\n  const [isOpen, setIsOpen] = useState(false);\n  const [ticketId, setTicketId] = useState(getTicketIdFromLocalStorage());\n\n  useEffect(() => {\n    setMounted(true);\n  }, []);\n\n  if (!mounted) {\n    return null;\n  }\n\n  const context = {\n    isOpen,\n    setIsOpen,\n    ticketId,\n    setTicketId: (ticketId: string) => {\n      localStorage.setItem('ticketId', ticketId);\n      setTicketId(ticketId);\n    },\n  };\n\n  return (\n    <WidgetContext.Provider value={context}>\n      <SupportTicketWidgetContainer accountId={props.accountId} />\n    </WidgetContext.Provider>\n  );\n}\n\nfunction getTicketIdFromLocalStorage() {\n  return localStorage.getItem('ticketId') ?? '';\n}\n```\n\n----------------------------------------\n\nTITLE: Testimonials Translation Configuration\nDESCRIPTION: JSON configuration for testimonials plugin translations.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/technical_details_updating_codebase_installation_97.md#2025-04-22_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"welcomeMessage\": \"We'd love to hear your feedback!\",\n  \"welcomeMessageDescription\": \"Your opinion helps us improve our service.\",\n  \"textButtonText\": \"Write a review\",\n  \"videoButtonText\": \"Record a video review\",\n  \"backButtonText\": \"Choose a different review type\",\n  \"customerName\": \"Your Name\",\n  \"testimonial\": \"Testimonial\",\n  \"rating\": \"Rating\",\n  \"submitting\": \"Submitting...\",\n  \"submitTestimonial\": \"Submit Testimonial\",\n  \"errorTitle\": \"Sorry, something went wrong\",\n  \"errorDescription\": \"Apologies, we were unable to submit your video review. Please try again later.\",\n  \"customerNameDescription\": \"Your name will be displayed with your video review\",\n  \"recording\": \"Recording... {{timer}}\",\n  \"startRecording\": \"Start Recording\",\n  \"stopRecording\": \"Stop Recording\",\n  \"discardAndRetry\": \"Discard and retry\",\n  \"successTitle\": \"Thank you!\",\n  \"successDescription\": \"Your feedback helps us improve our services. We appreciate your time!\",\n  \"wallOfLove\": \"Wall of Love\",\n  \"videoTestimonialBy\": \"Video testimonial by {{customerName}}\",\n  \"clickToPlay\": \"Click to play video testimonial\",\n  \"videoTagNotSupported\": \"Your browser does not support the video tag.\",\n  \"moreTestimonials\": \"{{count}} more testimonials\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Hero Component from Marketing UI Kit\nDESCRIPTION: Shows how to import the Hero component from the marketing UI kit.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/app_breadcrumbs_bordered_navigation_menu_card_button_39.md#2025-04-22_snippet_24\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Hero } from '@kit/ui/marketing';\n```\n\n----------------------------------------\n\nTITLE: Getting Server-Side Supabase Admin Client (TS)\nDESCRIPTION: Shows how to obtain a server-side Supabase client with administrative privileges by passing `{ admin: true }` to the `getSupabaseServerClient` function. This typically uses the Service Role key for bypassing Row Level Security.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/functions_initializing_project_introduction_85.md#2025-04-22_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nimport getSupabaseServerClient from '~/core/supabase/server-client';\\n\\nexport function  GET() {\\n  const supabase = getSupabaseServerClient({\\n    admin: true\\n  });\\n\\n  // Do something with the supabase client\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Verification Environment Variable in Firebase\nDESCRIPTION: Sets up mandatory email verification for Firebase authentication by enabling an environment variable flag that requires users to verify their email address before accessing the application.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_one_time_payments_stripe_webhooks_ci_tests_73.md#2025-04-22_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\nNEXT_PUBLIC_REQUIRE_EMAIL_VERIFICATION=true\n```\n\n----------------------------------------\n\nTITLE: Clearing Local Storage for Testing\nDESCRIPTION: JavaScript command to clear the stored ticket ID from local storage for testing the new ticket creation flow.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/building_javascript_widget_1.md#2025-04-22_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nlocalStorage.removeItem('ticketId')\n```\n\n----------------------------------------\n\nTITLE: Implementing API Logging with Pino\nDESCRIPTION: Shows how to implement logging in API functions using Pino. The example logs information before and after an action is performed, including contextual data like organizationId and userId to make debugging easier.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/user_sdk_sdk_ci_tests_84.md#2025-04-22_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nasync function myFunction(params: {\n  organizationId: string;\n  userId: string;\n}) {\n  logger.info(\n    {\n      organizationId: params.organizationId,\n      userId: params.userId,\n    },\n    `Performing action...`\n  );\n\n  await performAction();\n\n  logger.info(\n    {\n      organizationId: params.organizationId,\n      userId: params.userId,\n    },\n    `Action successful`\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Running Supabase CLI Commands via pnpm Filter (Bash)\nDESCRIPTION: Demonstrates how to execute Supabase CLI commands using `pnpm run`. The `--filter web` flag directs the command to the `web` application's workspace where Supabase is installed. Replace `<command>` with the actual Supabase CLI command.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/code_health_common_commands_conventions_48.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npnpm run --filter web supabase <command>\n```\n\n----------------------------------------\n\nTITLE: Updating Redirect Path in Team Account Workspace Loader in Next.js\nDESCRIPTION: This snippet demonstrates how to change the redirect path in the team account workspace loader from '/home' to '/home/teams' to prevent infinite redirects in case of errors.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/team_accounts_only_recipes_adding_translations_55.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nasync function workspaceLoader(accountSlug: string) {\n  const client = getSupabaseServerClient();\n  const api = createTeamAccountsApi(client);\n\n  const [workspace, user] = await Promise.all([\n    api.getAccountWorkspace(accountSlug),\n    requireUserInServerComponent(),\n  ]);\n\n  // we cannot find any record for the selected account\n  // so we redirect the user to the home page\n  if (!workspace.data?.account) {\n    return redirect('/home/teams');\n  }\n\n  return {\n    ...workspace.data,\n    user,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting useAppendNewMessage Hook to SendMessageInput\nDESCRIPTION: This code demonstrates obtaining the `appendMessage` function from the `useAppendNewMessage` hook (initialized with the appropriate `queryKey`). This function is then passed as the `onMessageSent` prop to the `SendMessageInput` component, enabling optimistic UI updates when a new message is sent.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/data_fetching_3.md#2025-04-22_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nconst appendMessage = useAppendNewMessage({ queryKey });\n\n<SendMessageInput\n  ticketId={props.ticketId}\n  onMessageSent={appendMessage}\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting Stripe Payment Mode for One-Time Payments\nDESCRIPTION: Code to change the payment mode from subscription to one-time payment in the createStripeCheckout function. This involves setting the mode constant to 'payment' instead of 'subscription'.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_one_time_payments_stripe_webhooks_ci_tests_73.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst mode: Stripe.Checkout.SessionCreateParams.Mode = 'payment';\n\n// some code here...\n\nreturn stripe.checkout.sessions.create({\n  mode,\n  // more code here...\n});\n```\n\n----------------------------------------\n\nTITLE: Updating i18n Settings for Testimonials in TypeScript\nDESCRIPTION: This code snippet shows how to add the 'testimonials' namespace to the default i18n namespaces in the i18n settings file.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/sentry_monitoring_notifications_configuration_51.md#2025-04-22_snippet_25\n\nLANGUAGE: tsx\nCODE:\n```\nexport const defaultI18nNamespaces = [\n  // Add the 'roadmap' namespace\n  'testimonials',\n];\n```\n\n----------------------------------------\n\nTITLE: Getting Current User Role with useCurrentUserRole Hook (TSX)\nDESCRIPTION: Illustrates using the `useCurrentUserRole` hook within a React component (`MyComponent`) to access the role of the currently logged-in user within their current organization.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/functions_initializing_project_introduction_85.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCurrentUserRole } from '~/lib/organizations/hooks/use-current-user-role';\\n\\nfunction MyComponent() {\\n  const role = useCurrentUserRole();\\n\\n  return (\\n    <div>\\n      <p>Current user role: {role}</p>\\n    </div>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Google Analytics Environment Variables\nDESCRIPTION: Defines required and optional environment variables for Google Analytics configuration within the `.env` file. `VITE_GA_MEASUREMENT_ID` is mandatory and holds your Google Analytics Measurement ID. `VITE_GA_DISABLE_PAGE_VIEWS_TRACKING` and `VITE_GA_DISABLE_LOCALHOST_TRACKING` are optional boolean flags to control automatic tracking behavior.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/google_analytics_provider_posthog_analytics_provider_umami_analytics_provider_88.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nVITE_GA_MEASUREMENT_ID=your-measurement-id\n```\n\nLANGUAGE: bash\nCODE:\n```\nVITE_GA_DISABLE_PAGE_VIEWS_TRACKING=true\nVITE_GA_DISABLE_LOCALHOST_TRACKING=true\n```\n\n----------------------------------------\n\nTITLE: Customizing LoadingOverlay Appearance in React\nDESCRIPTION: Illustrates customization of LoadingOverlay's appearance using custom CSS classes for background, text, and spinner colors.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/paddle_per_seat_billing_stripe_90.md#2025-04-22_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\n<LoadingOverlay\n  className=\"bg-gray-800 text-white\"\n  spinnerClassName=\"text-blue-500\"\n>\n  Processing your request...\n</LoadingOverlay>\n```\n\n----------------------------------------\n\nTITLE: First-level Joins with Select Property\nDESCRIPTION: Shows how to use first-level joins to fetch related data from referenced tables using the select property.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/ai_text_editor_cookie_banner_feedback_popup_24.md#2025-04-22_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ClientDataLoader } from '@makerkit/data-loader-supabase-nextjs';\n\n<ClientDataLoader\n  client={client}\n  table=\"tasks\"\n  select={['id', 'name', 'organization_id.name']}\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating Tasks Table with PostgreSQL\nDESCRIPTION: SQL commands to create a new tasks table with fields for title, description, completion status, and account ownership. Includes permission grants for authenticated and service roles.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/supabase_clients_data_fetching_adding_pages_63.md#2025-04-22_snippet_19\n\nLANGUAGE: sql\nCODE:\n```\n-- create tasks table\ncreate table if not exists public.tasks (\n  id uuid primary key default gen_random_uuid(),\n  title varchar(500) not null,\n  description varchar(50000),\n  done boolean not null default false,\n  account_id uuid not null references public.accounts(id),\n  created_at timestamp with time zone not null default now(),\n  updated_at timestamp with time zone not null default now()\n);\n\ngrant select, insert, update, delete on table public.tasks to\n    authenticated, service_role;\n```\n\n----------------------------------------\n\nTITLE: Setting Upstream, Staging and Committing Changes in Bash\nDESCRIPTION: Sets a new upstream remote, stages all changes, and creates an initial commit in git. Requires git and a local repository. This prepares the repository for push and synchronization with the upstream. Input: terminal commands, Output: new commit associated with the upstream remote.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/initializing_project_introduction_marketing_site_pages_14.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit remote add upstream git@github.com:makerkit/next-firebase-saas-kit.git\ngit add .\ngit commit -a -m \"Initial Commit\"\n```\n\n----------------------------------------\n\nTITLE: Adding Routes to Sitemap in Next.js\nDESCRIPTION: This code shows how to add new static pages to the sitemap by modifying the getPaths function in the server-sitemap.xml route file. This helps search engines discover and index new pages on the website.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/marketing_pages_migrations_permissions_and_roles_45.md#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nfunction getPaths() {\n  const paths = [\n    '/',\n    '/faq',\n    '/blog',\n    '/docs',\n    '/pricing',\n    '/contact',\n    '/cookie-policy',\n    '/terms-of-service',\n    '/privacy-policy',\n    // add more paths here,\n    '/about', // <-- add the new page here\n  ];\n\n  return paths.map((path) => {\n    return {\n      loc: new URL(path, appConfig.url).href,\n      lastmod: new Date().toISOString(),\n    };\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Different Types of Notifications in Remix Supabase SaaS Kit\nDESCRIPTION: Examples of sending info, warning, and error notifications using the 'type' field in the createNotification function.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/technical_details_updating_codebase_installation_97.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createNotificationsApi } from '@kit/notifications/api';\nimport { getSupabaseServerAdminClient } from '@kit/supabase/server-admin-client';\n\nasync function sendNotificationAfterSignup(\n  accountId: string,\n) {\n  const client = getSupabaseServerAdminClient();\n  const api = createNotificationsApi(client);\n\n  await api.createNotification({\n    account_id: accountId,\n    body: 'You have successfully signed up!',\n    type: 'info', // this is the default type, no need to specify it\n  });\n}\n\n// Warning notification\napi.createNotification({\n  account_id: accountId,\n  body: 'Your credit card is about to expire!',\n  type: 'warning',\n});\n\n// Error notification\napi.createNotification({\n  account_id: accountId,\n  body: 'There was an error processing your payment.',\n  type: 'error',\n});\n```\n\n----------------------------------------\n\nTITLE: Updating TailwindCSS Configuration\nDESCRIPTION: JavaScript configuration to update the TailwindCSS content array. This ensures that the plugin's styles are properly applied.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_one_time_payments_stripe_webhooks_payments_11.md#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  // ...\n  content: [\n    // ...\n    './plugins/**/*.tsx',\n  ],\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Server Action with Zod Validation\nDESCRIPTION: Shows how to implement a Next.js Server Action with Zod validation that throws an error when validation fails. Includes TypeScript type inference to ensure type safety.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/user_roles_validating_api_input_zod_development_18.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n'use server';\n\nexport async function serverAction(\n  data: z.infer<\n    ReturnType<typeof getBodySchema>\n  >\n) {\n  // we can safely use data with the interface Body\n  const bodyResult = await getBodySchema().parseAsync(data);\n  const { displayName, email } = bodyResult;\n\n  return sendInvite({ displayName, email });\n}\n\nfunction getBodySchema() {\n  return z.object({\n    displayName: z.string(),\n    email: z.string().email(),\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: CSRF Protection in Next.js API Routes with withCsrf\nDESCRIPTION: Example API route demonstrating how to implement CSRF protection using the withCsrf middleware, which returns a 403 error if the CSRF token is invalid.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/deploying_production_development_getting_started_environment_variables_13.md#2025-04-22_snippet_32\n\nLANGUAGE: ts\nCODE:\n```\nimport { NextApiRequest,NextApiResponse } from \"next\";\n\nimport { withAuthedUser } from '~/core/middleware/with-authed-user';\nimport { withPipe } from '~/core/middleware/with-pipe';\nimport { withExceptionFilter } from '~/core/middleware/with-exception-filter';\nimport { withCsrf } from '~/core/middleware/with-csrf';\n\nexport default function owner(req: NextApiRequest, res: NextApiResponse) {\n  const handler = withPipe(\n    withCsrf(),\n    withAuthedUser,\n    (req, res) => {\n      res.status(200).json({ message: 'Hello World!' });\n    }\n  );\n\n  return withExceptionFilter(req, res)(handler);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Supabase Mutation for Creating a Task\nDESCRIPTION: This snippet defines a function to create a task record in Supabase. It uses the Supabase client to insert a new task into the 'tasks' table.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/user_reading_record_creating_record_20.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { SupabaseClient } from '@supabase/supabase-js';\nimport type { Database } from '~/database.types';\n\ntype Task = {\n  id: string;\n  name: string;\n  organizationId: string;\n  description: string;\n  dueDate: Date;\n  done: boolean;\n};\n\nexport function createTask(\n  client: SupabaseClient<Database>,\n  task: Omit<Task, 'id'>\n) {\n  return client.from('tasks').insert({\n    name: task.name,\n    organization_id: task.organizationId,\n    description: task.description,\n    due_date: task.dueDate,\n    done: task.done,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Testimonial Component Implementation\nDESCRIPTION: React component implementation for displaying testimonial form with video and text review options.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/technical_details_updating_codebase_installation_97.md#2025-04-22_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState } from 'react';\n\nimport {\n  TestimonialContainer,\n  TestimonialForm,\n  TestimonialSuccessMessage,\n  VideoTestimonialForm,\n} from '@kit/testimonial/client';\n\nexport function Testimonial() {\n  const [success, setSuccess] = useState(false);\n  const onSuccess = () => setSuccess(true);\n\n  if (success) {\n    return <SuccessMessage />;\n  }\n\n  return (\n    <TestimonialContainer\n      className={\n        'w-full max-w-md rounded-lg border bg-background p-8 shadow-xl'\n      }\n      welcomeMessage={<WelcomeMessage />}\n      enableTextReview={true}\n      enableVideoReview={true}\n      textReviewComponent={<TestimonialForm onSuccess={onSuccess} />}\n      videoReviewComponent={<VideoTestimonialForm onSuccess={onSuccess} />}\n      textButtonText=\"Write your thoughts\"\n      videoButtonText=\"Share a video message\"\n      backButtonText=\"Switch review method\"\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS Content Paths for TSX Files\nDESCRIPTION: Configuration for Tailwind CSS content paths specifying which TSX files should be processed for styles. Includes paths for various package components and excludes node_modules.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/cms_api_cms_creating_your_own_cms_client_42.md#2025-04-22_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\n  content: [\n    '../../packages/ui/src/**/*.tsx',\n    '../../packages/billing/gateway/src/**/*.tsx',\n    '../../packages/features/auth/src/**/*.tsx',\n    '../../packages/features/notifications/src/**/*.tsx',\n    '../../packages/features/admin/src/**/*.tsx',\n    '../../packages/features/accounts/src/**/*.tsx',\n    '../../packages/features/team-accounts/src/**/*.tsx',\n    '../../packages/plugins/testimonial/src/**/*.tsx',\n    '../../packages/plugins/roadmap/src/**/*.tsx',\n    '../../packages/plugins/kanban/src/**/*.tsx',\n    '!**/node_modules',\n  ],\n```\n\n----------------------------------------\n\nTITLE: Using CMS Client for Legal Pages in Remix\nDESCRIPTION: TypeScript code showing how to use a CMS client to manage content for legal pages in a Remix Supabase application. This approach allows for more flexible content management compared to hard-coded pages.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/adding_turborepo_package_approaching_local_development_database_functions_93.md#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createCmsClient } from '@kit/cms';\n\nexport async function MyPage() {\n  const cms = await createCmsClient();\n\n  const { title, content } = await cms.getContentBySlug({\n    slug: `slug`,\n    collection: `pages`\n  });\n\n  return (\n    <div>\n      <h1>{title}</h1>\n      <div dangerouslySetInnerHTML={{ __html: content }} />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Navigation Menu Entry in Remix Supabase SaaS Kit (TSX)\nDESCRIPTION: This snippet demonstrates how to add a new entry to the navigation menu by modifying the 'links' object and adding a new NavigationMenuItem component.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/branding_environment_variables_setup_project_configuration_80.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst links = {\n  SignIn: {\n    label: 'Sign In',\n    path: '/auth/sign-in',\n  },\n  Blog: {\n    label: 'Blog',\n    path: '/blog',\n  },\n  Docs: {\n    label: 'Docs',\n    path: '/docs',\n  },\n  Pricing: {\n    label: 'Pricing',\n    path: '/pricing',\n  },\n  FAQ: {\n    label: 'FAQ',\n    path: '/faq',\n  },\n  NewPage: {\n    label: 'New Page',\n    path: '/new-page',\n  },\n};\n```\n\nLANGUAGE: tsx\nCODE:\n```\n<NavigationMenu>\n  <NavigationMenuItem\n    className={'flex lg:hidden'}\n    link={links.SignIn}\n  />\n\n  <NavigationMenuItem link={links.Blog} />\n  <NavigationMenuItem link={links.Docs} />\n  <NavigationMenuItem link={links.Pricing} />\n  <NavigationMenuItem link={links.FAQ} />\n\n  <NavigationMenuItem link={links.NewPage} />\n</NavigationMenu>\n```\n\n----------------------------------------\n\nTITLE: Resetting Local Supabase Database (Bash)\nDESCRIPTION: Runs the `supabase:web:reset` script via `pnpm`. This command is used to stop the local Supabase instance, clear its data, and restart it, often applying schema migrations for a fresh state.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/code_health_common_commands_conventions_48.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\npnpm run supabase:web:reset\n```\n\n----------------------------------------\n\nTITLE: Implementing a Type-Safe React Router Loader (TypeScript)\nDESCRIPTION: Demonstrates using specific route types (`Route.LoaderArgs`) imported from a generated type file (`~/types/app/routes/home/account/+types`) to ensure type safety for the loader's arguments and return value.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/creating_your_own_cms_client_keystatic_wordpress_62.md#2025-04-22_snippet_27\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { Route } from '~/types/app/routes/home/account/+types';\n\nexport const loader = async (args: Route.LoaderArgs) => {\n  // Typed arguments\n  return {\n    title: \"My Page\"\n  };\n};\n\n```\n\n----------------------------------------\n\nTITLE: Adding New Translation String in JSON\nDESCRIPTION: This snippet illustrates how to add a new translation string in a JSON locale file, which can then be used with React components like `Trans` or the `useTranslation` hook. It is critical to understand JSON syntax and the translation mechanism in react-i18next. The input is a translation string key-value pair.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/branding_environment_variables_setup_project_configuration_21.md#2025-04-22_snippet_11\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"new_translation_string\": \"This is a new translation string\"\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n<Trans i18nKey=\"common:new_translation_string\" />\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { t } = useTranslation();\nconst newTranslationString = t('common:new_translation_string');\n```\n\n----------------------------------------\n\nTITLE: Adding Testimonials Sidebar Item in Admin Panel\nDESCRIPTION: This TypeScript React snippet demonstrates how to add a sidebar item for Testimonials in the admin panel.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/sentry_monitoring_notifications_configuration_51.md#2025-04-22_snippet_30\n\nLANGUAGE: tsx\nCODE:\n```\n<SidebarItem\n    path={'/admin/testimonials'}\n    Icon={<StarIcon className={'h-4'} />}\n>\n    Testimonials\n</SidebarItem>\n```\n\n----------------------------------------\n\nTITLE: Configuring Dark Theme in Next.js Firebase\nDESCRIPTION: Explores theme configuration in `src/configuration.ts` for enabling/disabling dark theme and uses the theme switcher. Configurations are adjusted within the file to set themes globally.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/environment_variables_setup_project_configuration_set_up_emails_9.md#2025-04-22_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\n{\n  features: {\n    enableThemeSwitcher: true,\n  },\n  theme: Themes.Dark,\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\n{\n  features: {\n    enableThemeSwitcher: false,\n  },\n  theme: Themes.Dark,\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\n{\n  features: {\n    enableThemeSwitcher: false,\n  },\n  theme: Themes.Light,\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Build Command for Multiple Apps in Turborepo\nDESCRIPTION: Configures a custom build command for deploying specific apps in a Turborepo monorepo to Vercel, using Turbo's filtering capability to build only the target app.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/emails_authentication_checklist_65.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncd ../.. && turbo run build --filter=<app-name>\n```\n\n----------------------------------------\n\nTITLE: ConsentStatus Enum Definition in TypeScript\nDESCRIPTION: Defines the ConsentStatus enum used in the cookie consent management system. It specifies the possible states of user consent.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/bordered_navigation_menu_card_button_cookie_banner_60.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nenum ConsentStatus {\n  Accepted = 'accepted',\n  Rejected = 'rejected',\n  Unknown = 'unknown'\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Minisearch Indexer for Additional Content in TypeScript\nDESCRIPTION: This code snippet shows how to extend the Minisearch indexer to include an additional content folder named '_guides'. It demonstrates adding a new indexing operation for the 'guides' directory with a specific tag.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/third_party_auth_providers_authentication_blog_3.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait engine.indexDirectory(`guides`, (doc) => {\n  return { ...doc, tag: `guide` };\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring SaaS Branding in Next.js\nDESCRIPTION: Configuration object for customizing site branding details including name, description, theme colors, social media handles and localization settings.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/branding_environment_variables_setup_project_configuration_21.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nsite: {\n  name: 'Awesomely - Your SaaS Title',\n  description: 'Your SaaS Description',\n  themeColor: '#ffffff',\n  themeColorDark: '#0a0a0a',\n  siteUrl: process.env.NEXT_PUBLIC_SITE_URL,\n  siteName: 'Awesomely',\n  twitterHandle: '',\n  githubHandle: '',\n  language: 'en',\n  convertKitFormId: '',\n  locale: process.env.NEXT_PUBLIC_DEFAULT_LOCALE,\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Next.js Configuration for Plugin\nDESCRIPTION: JavaScript configuration to update Next.js for supporting the @xenova/transformers.js package.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/ai_text_editor_cookie_banner_feedback_popup_24.md#2025-04-22_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nexperimental: {\n    serverComponentsExternalPackages: ['sharp', 'onnxruntime-node'],\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating NewTaskDialog in Home Page Layout\nDESCRIPTION: This code snippet shows how to integrate the NewTaskDialog component into a home page layout next to a search input. The highlighted line demonstrates where to place the dialog component.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/marketing_pages_migrations_permissions_and_roles_45.md#2025-04-22_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\n<div className={'flex items-center justify-between'}>\n  <div>\n    <Heading level={4}>\n      <Trans i18nKey={'tasks:tasksTabLabel'} defaults={'Tasks'} />\n    </Heading>\n  </div>\n\n  <div className={'flex items-center space-x-2'}>\n    <form className={'w-full'}>\n      <Input\n        name={'query'}\n        defaultValue={query}\n        className={'w-full lg:w-[18rem]'}\n        placeholder={'Search tasks'}\n      />\n    </form>\n\n    <NewTaskDialog />\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Overriding Local Email Settings (Bash)\nDESCRIPTION: Shows the environment variables in `apps/web/.env.development` that should be cleared or modified to switch from the default InBucket setup (used by Supabase locally) to a different SMTP provider during local development. This allows testing non-authentication emails with a real or alternative development SMTP service. Note that Supabase authentication emails might still be sent via InBucket.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/database_webhooks_legal_pages_marketing_pages_64.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nEMAIL_SENDER=test@makerkit.dev\nEMAIL_PORT=\nEMAIL_HOST=\nEMAIL_TLS=\nEMAIL_USER=\nEMAIL_PASSWORD=\n```\n\n----------------------------------------\n\nTITLE: Configuring Billing Provider in Environment Variables\nDESCRIPTION: Environment variable to specify which billing provider to use with the SaaS kit. Supports 'stripe' (default) or 'lemon-squeezy' options.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/lemon_squeezy_metered_usage_one_off_payments_38.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nNEXT_PUBLIC_BILLING_PROVIDER=stripe # or lemon-squeezy\n```\n\n----------------------------------------\n\nTITLE: Updating Default Locale Configuration\nDESCRIPTION: This snippet shows how to set the default locale to 'de' by updating the 'DEFAULT_LOCALE' environment variable in a '.env' file.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/commands_cors_develop_firebase_security_rules_5.md#2025-04-22_snippet_28\n\nLANGUAGE: txt\nCODE:\n```\nDEFAULT_LOCALE=de\n```\n\n----------------------------------------\n\nTITLE: Running Mock Stripe Server\nDESCRIPTION: Command to run a mock Stripe server.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/commands_cors_develop_firebase_security_rules_5.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nnpm run stripe:mock-server\n```\n\n----------------------------------------\n\nTITLE: Running Mock Stripe Server\nDESCRIPTION: Command to run a mock Stripe server for simulating Stripe API responses during development.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/setting_up_firebase_custom_fetch_fetching_data_firestore_70.md#2025-04-22_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\nnpm run stripe:mock-server\n```\n\n----------------------------------------\n\nTITLE: Configuring Billing Provider Environment Variable\nDESCRIPTION: This snippet shows how to set the billing provider environment variable, which determines which payment gateway the application will use. Supported options include Stripe and Lemon Squeezy.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/paddle_per_seat_billing_stripe_90.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nNEXT_PUBLIC_BILLING_PROVIDER=stripe # or lemon-squeezy\n```\n\n----------------------------------------\n\nTITLE: Initializing Cloned Git Repository with Remotes\nDESCRIPTION: This sequence of shell commands initializes a newly cloned Git repository. It navigates into the project directory (`my-saas`), removes the default `origin` remote, adds a new `origin` pointing to the user's own Git repository URL (`<your-git-repository>`), adds the original MakerKit repository (`makerkit/next-firebase-saas-kit.git`) as an `upstream` remote for pulling updates, stages all files, and creates an initial commit.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/develop_firebase_security_rules_emails_encrypting_secrets_71.md#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ncd my-saas\ngit remote rm origin\ngit remote add origin <your-git-repository>\ngit remote add upstream git@github.com:makerkit/next-firebase-saas-kit.git\ngit add .\ngit commit -a -m \"Initial Commit\"\n```\n\n----------------------------------------\n\nTITLE: Manually Tracking Page Views with Makerkit Analytics API in TypeScript\nDESCRIPTION: Illustrates manually tracking a page view using the `trackPageView` method from the Makerkit Analytics API. While Makerkit typically handles this automatically on route changes in React Router, this method can be used for specific cases.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/analytics_api_custom_analytics_provider_google_analytics_provider_57.md#2025-04-22_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nvoid analytics.trackPageView('Sign Up');\n```\n\n----------------------------------------\n\nTITLE: Updating Focus and Shadow Utilities in Tailwind\nDESCRIPTION: Changes to focus outline and shadow utility classes in Tailwind CSS v4.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/running_project_technical_details_update_nextjs15_50.md#2025-04-22_snippet_9\n\nLANGUAGE: css\nCODE:\n```\n/* Old */\nfocus:outline-none\n\n/* New */\nfocus:outline-hidden\n```\n\nLANGUAGE: css\nCODE:\n```\n/* Old */\nshadow-sm\n\n/* New */\nshadow-xs\n```\n\n----------------------------------------\n\nTITLE: Projects Table RLS Policies - SQL\nDESCRIPTION: Row Level Security policies for the projects table controlling select, insert, delete, and update operations.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/projects_data_model_53.md#2025-04-22_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\nCREATE POLICY select_projects\n  ON public.projects\n  FOR SELECT\n  TO authenticated\n  USING (\n    public.is_project_member(id)\n  );\n\nCREATE POLICY insert_new_project\n  ON public.projects\n  FOR INSERT\n  TO authenticated\n  WITH CHECK (\n    public.has_role_on_account(account_id)\n  );\n\nCREATE POLICY delete_project\n  ON public.projects\n  FOR DELETE\n  TO authenticated\n  USING (\n    public.can_delete_project((SELECT auth.uid()), id)\n  );\n\nCREATE POLICY update_project\n  ON public.projects\n  FOR UPDATE\n  TO authenticated\n  USING (\n    public.can_edit_project((SELECT auth.uid()), id)\n  )\n  WITH CHECK (\n    public.can_edit_project((SELECT auth.uid()), id)\n  );\n```\n\n----------------------------------------\n\nTITLE: Configuring Keystatic CMS with Environment Variables\nDESCRIPTION: This snippet shows the full configuration for Keystatic CMS, including storage settings, GitHub integration, content paths, and access tokens.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stepper_components_application_configuration_41.md#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nNEXT_PUBLIC_KEYSTATIC_STORAGE_KIND=local # local, cloud, github\nKEYSTATIC_PATH_PREFIX=apps/web\nNEXT_PUBLIC_KEYSTATIC_CONTENT_PATH=./content # apps/web/content\n\n# if Github mode\nNEXT_PUBLIC_KEYSTATIC_STORAGE_KIND=github\nNEXT_PUBLIC_KEYSTATIC_STORAGE_REPO=makerkit/next-supabase-saas-kit-turbo-demo\nNEXT_PUBLIC_KEYSTATIC_CONTENT_PATH=./content\nKEYSTATIC_GITHUB_TOKEN=github_**********************************************\nKEYSTATIC_PATH_PREFIX=apps/web\n```\n\n----------------------------------------\n\nTITLE: Performing a Data Query with Supabase Server Client - TypeScript/TSX\nDESCRIPTION: Illustrates a data fetch operation from a PostgreSQL table using the Supabase server-side client. Executes a select query from the 'tasks' table and destructures the resulting data and errors. Intended for use within server-only contexts.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/csrf_protection_react_query_route_handlers_43.md#2025-04-22_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nconst supabase = getSupabaseServerClient();\n\nconst { data, error } = await supabase.from('tasks').select('*');\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Mutation Hook in a React Component\nDESCRIPTION: Shows how to use the custom `useTransferOrganizationOwnership` hook within a React component. It retrieves the `trigger` function from the hook, which can then be called (e.g., in an event handler) to initiate the API mutation.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/architecture_auth_overview_auth_setup_29.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n```tsx\nfunction Component() {\n  const { trigger } = useTransferOrganizationOwnership();\n\n  // use trigger to call the mutation\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Lemon Squeezy Subscription Plans in TypeScript\nDESCRIPTION: TypeScript configuration for Lemon Squeezy subscription products and variants, including product details, pricing tiers, and feature lists.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/theming_how_to_version_0_6_0_81.md#2025-04-22_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  subscriptions: {\n    products: [\n      {\n        name: 'Basic',\n        description: 'Description of your Basic plan',\n        badge: `Up to 20 users`,\n        productId: 1, // <-- Lemon Squeezy product ID\n        features: [\n          'Basic Reporting',\n          'Up to 20 users',\n          '1GB for each user',\n          'Chat Support',\n        ],\n        plans: [\n          {\n            name: 'Monthly',\n            price: '$9',\n            variantId: 1, // <-- Lemon Squeezy variant ID\n          },\n          {\n            name: 'Yearly',\n            price: '$90',\n            variantId: 2, // <-- Lemon Squeezy variant ID\n          },\n        ],\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: File Structure Overview of Remix Firebase SaaS Kit\nDESCRIPTION: A representation of the project's directory structure showing the organization of files and folders, highlighting key directories like components, core, lib, and routes.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/project_structure_running_project_tailwind_css_75.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ntasks-app\n├── README.md\n├── @types\n├── src\n│   ├── components\n│   ├── core\n│   ├── lib\n│   └── routes\n        └── __app\n        └── __site\n        └── auth\n        └── invite\n        └── onboarding\n│       └── root.tsx\n├── package-lock.json\n├── package.json\n├── public\n│   └── favicon.ico\n└── tsconfig.json\n```\n\n----------------------------------------\n\nTITLE: Adding Link to Notification in TypeScript with Supabase\nDESCRIPTION: This snippet demonstrates how to include a clickable link in a notification using the createNotificationsApi function. It uses the 'link' field to specify the URL.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/introduction_migration_from_remix_navigating_codebase_67.md#2025-04-22_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\napi.createNotification({\n  account_id: accountId,\n  body: 'You have created a task!',\n  link: '/tasks/123',\n});\n```\n\n----------------------------------------\n\nTITLE: Making Git Post-Merge Hook Executable (Bash)\nDESCRIPTION: Changes the file permissions of the '.git/hooks/post-merge' script, making it executable. This step is necessary for Git to be able to run the hook automatically after merges.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/configuring_supabase_database_webhooks_fly_production_environment_variables_95.md#2025-04-22_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nchmod +x .git/hooks/post-merge\n```\n\n----------------------------------------\n\nTITLE: Implementing Firestore Security Rules for Subscriptions\nDESCRIPTION: This snippet shows how to implement Firestore security rules to check organization subscriptions and control access to collections.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/technical_details_going_to_production_overview_publish_firebase_security_rules_72.md#2025-04-22_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nfunction getOrganizationSubscription() {\n  let organization = getOrganization(organizationId);\n\n  return organization.subscription;\n}\n\nfunction isPayingOrganization(subscription) {\n  return subscription != null && (subscription.status == 'paid' || subscription.status == 'trialing');\n}\n\nfunction isProPlan(subscription) {\n  let organization = getOrganization(organizationId);\n\n  return subscription.stripePriceId == 'pro-plan-id';\n}\n\nfunction canWriteToCollection(organizationId) {\n  let subscription = getOrganizationSubscription();\n\n  return isPayingOrganization(subscription) && isProPlan(subscription);\n}\n\nmatch /organizations/{organizationId} {\n  match /tasks/{task} {\n    allow create: canWriteToCollection(organizationId);\n    allow list: if userIsMemberByOrganizationId(organizationId);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Casting Firestore Collection References in TypeScript\nDESCRIPTION: Demonstrates how to explicitly cast a Firestore collection to a typed CollectionReference using TypeScript generics. This pattern ensures type safety when querying or manipulating Firestore data objects shaped as WithId<Task>. Assumes dependencies on the Firestore SDK and properly typed model definitions.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/custom_fetch_fetching_data_firestore_making_api_requests_4.md#2025-04-22_snippet_8\n\nLANGUAGE: TSX\nCODE:\n```\nconst collectionRef = collection(\n  firestore,\n  tasksCollection\n) as CollectionReference<WithId<Task>>;\n```\n\n----------------------------------------\n\nTITLE: Configuring i18n in Remix Supabase SaaS Kit (TypeScript)\nDESCRIPTION: This snippet demonstrates how to configure i18n by adding a new translation bundle to the defaultNS array in the i18next configuration file.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/branding_environment_variables_setup_project_configuration_80.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport isBrowser from '~/core/generic/is-browser';\n\nconst env = isBrowser() ? window.ENV : process.env;\nconst DEFAULT_LOCALE = env.DEFAULT_LOCALE ?? 'en';\n\nconst i18Config = {\n  fallbackLanguage: DEFAULT_LOCALE,\n  supportedLanguages: [DEFAULT_LOCALE],\n  defaultNS: ['common', 'auth', 'organization', 'profile', 'subscription', 'tasks'],\n  react: { useSuspense: false },\n};\n\nexport default i18Config;\n```\n\n----------------------------------------\n\nTITLE: Using Supabase Server Client in Next.js Server Environments\nDESCRIPTION: This code demonstrates how to import and use the Supabase client in any server environment using the getSupabaseServerClient function. This is the recommended approach for server-side Supabase operations.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/csrf_protection_react_query_route_handlers_43.md#2025-04-22_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\n\nexport async function myServerAction() {\n  const supabase = getSupabaseServerClient();\n\n  const { data, error } = await supabase.from('users').select('*')\n\n  return {\n    success: true,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Organization Name with useCurrentOrganization Hook\nDESCRIPTION: This snippet demonstrates how to use the useCurrentOrganization hook to get the current user's organization name. It imports the hook and creates a new function that extracts the name property from the organization object.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/adding_admin_users_admin_overview_admin_1.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useCurrentOrganization } from '~/lib/organizations/hooks/use-current-organization';\n\nexport function useCurrentOrganizationName() {\n  const organization = useCurrentOrganization();\n\n  return organization?.name;\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling E2E Tests in GitHub Actions (Bash)\nDESCRIPTION: Set the `ENABLE_E2E_JOB` environment variable to `true` within the GitHub Actions workflow configuration to activate the end-to-end test job. Requires additional secret configuration for Supabase and Stripe.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/code_health_common_commands_conventions_48.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nENABLE_E2E_JOB=true\n```\n\n----------------------------------------\n\nTITLE: LoadingOverlay Full-Page Overlay CSS Classes - CSS\nDESCRIPTION: Lists Tailwind CSS/utility classes used to achieve a fixed, full-page overlay for the LoadingOverlay component. This string is expected to be interpreted in a CSS context or as a value for className. Used by the LoadingOverlay to visually block the viewport with background and stacking context.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/bordered_navigation_menu_card_button_cookie_banner_60.md#2025-04-22_snippet_15\n\nLANGUAGE: css\nCODE:\n```\nfixed left-0 top-0 z-[100] h-screen w-screen bg-background\n```\n\n----------------------------------------\n\nTITLE: Initializing i18n in Next.js Server Components\nDESCRIPTION: This snippet shows how to wrap a Next.js server component with the withI18n function to initialize translations before rendering. This is necessary because server components are rendered in parallel.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/team_accounts_only_recipes_adding_translations_55.md#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { withI18n } from '~/lib/i18n/with-i18n';\n\nconst Page = () => {\n  return <div>My page</div>;\n};\n\nexport default withI18n(Page);\n```\n\n----------------------------------------\n\nTITLE: Custom Plan with Button Label Configuration\nDESCRIPTION: Example showing how to add a custom button label to a plan configuration, supporting both direct strings and translation keys for internationalization.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/google_analytics_provider_posthog_analytics_provider_umami_analytics_provider_88.md#2025-04-22_snippet_51\n\nLANGUAGE: tsx\nCODE:\n```\n{\n  name: 'Enterprise',\n  id: 'enterprise',\n  paymentType: 'recurring',\n  label: 'common:contactUs',\n  href: '/contact',\n  custom: true,\n  interval: 'month',\n  lineItems: [],\n  buttonLabel: 'common:contactUs',\n}\n```\n\n----------------------------------------\n\nTITLE: Organization Subscription Interface Definition\nDESCRIPTION: Interface definition for the OrganizationSubscription object that stores subscription data in the application's database, including subscription status, billing details, and time periods.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_one_time_payments_stripe_webhooks_ci_tests_73.md#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nexport interface OrganizationSubscription {\n  id: string;\n  priceId: string;\n\n  status: Stripe.Subscription.Status;\n  currency: string | null;\n  cancelAtPeriodEnd: boolean;\n\n  interval: string | null;\n  intervalCount: number | null;\n\n  createdAt: UnixTimestamp;\n  periodStartsAt: UnixTimestamp;\n  periodEndsAt: UnixTimestamp;\n  trialStartsAt: UnixTimestamp | null;\n  trialEndsAt: UnixTimestamp | null;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Testimonial Wall Widget in React\nDESCRIPTION: This code snippet demonstrates how to use the TestimonialWallWidget component to display testimonials on a website. It creates a simple page layout with the widget centered.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/technical_details_updating_codebase_installation_97.md#2025-04-22_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TestimonialWallWidget } from '@kit/testimonial/widgets';\n\nexport default function TestimonialWidgetPage() {\n    return (\n        <div className={'flex h-full w-screen flex-1 flex-col items-center py-16'}>\n            <TestimonialWallWidget />\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Pre-Commit Hook in Git\nDESCRIPTION: A pre-commit hook that runs 'pnpm run typecheck' and 'pnpm run lint' to ensure code style and type correctness before commits. This snippet requires Turborepo and is created in the './.git/hooks' directory.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/going_to_production_clone_repository_code_health_66.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/sh\n\npnpm run typecheck\npnpm run lint\n```\n\nLANGUAGE: bash\nCODE:\n```\nchmod +x ./.git/hooks/pre-commit\n```\n\n----------------------------------------\n\nTITLE: Billing API Schema Definitions\nDESCRIPTION: TypeScript schema definitions for billing API parameters including checkout, portal, and usage reporting\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/user_workspace_api_api_billing_api_37.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst TimeFilter = z.object(\n  {\n    startTime: z.number(),\n    endTime: z.number(),\n  },\n  {\n    description: `The time range to filter the usage records. Used for Stripe`,\n  },\n);\n\nconst PageFilter = z.object(\n  {\n    page: z.number(),\n    size: z.number(),\n  },\n  {\n    description: `The page and size to filter the usage records. Used for LS`,\n  },\n);\n\nexport const QueryBillingUsageSchema = z.object({\n  id: z.string({\n    description:\n      'The id of the usage record. For Stripe a meter ID, for LS a subscription item ID.',\n  }),\n  customerId: z.string({\n    description: 'The id of the customer in the billing system',\n  }),\n  filter: z.union([TimeFilter, PageFilter]),\n});\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Interface for API Request Body\nDESCRIPTION: This snippet defines a TypeScript interface `Body` that corresponds to the data structure validated by the Zod schema in the previous example. It includes `displayName` (string) and `email` (Email type, likely a string alias or a custom type representing a validated email). This interface provides type safety when working with the validated data.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/develop_firebase_security_rules_emails_encrypting_secrets_71.md#2025-04-22_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\ninterface Body {\n  displayName: string;\n  email: Email;\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Account Workspace Data with Account API (TypeScript)\nDESCRIPTION: Illustrates how to retrieve the workspace data associated with the current user's personal account using the `getAccountWorkspace` method of the initialized Account API. This is often called in layout components.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/google_analytics_provider_posthog_analytics_provider_umami_analytics_provider_88.md#2025-04-22_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\nconst api = createAccountsApi(client);\nconst workspace = await api.getAccountWorkspace();\n```\n\n----------------------------------------\n\nTITLE: Starting and Authenticating Stripe CLI using Docker\nDESCRIPTION: The command initializes the Stripe CLI using Docker to listen for events from a Stripe account. Execution of this command allows authentication with Stripe and outputs a webhook secret for local testing, to be set in the environment configuration.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/payments_billing_6.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npnpm run stripe:listen\n```\n\n----------------------------------------\n\nTITLE: Creating a Data Fetching Hook with SWR in React\nDESCRIPTION: Implements a custom React hook using SWR to fetch data from an API endpoint. This hook makes a GET request to '/api/data' and returns the response with proper TypeScript typing.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/call_api_routes_from_client_csrf_token_guarding_api_routes_7.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport useSWR from 'swr';\n\nexport function useFetchData() {\n  const key = '/api/data';\n\n  return useSWR<{ hello: string }>([key], async () => {\n    return fetch(key).then(res => res.json());\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Firestore Document Reference with Firebase SDK\nDESCRIPTION: This code snippet demonstrates how to create a document reference to access a user document in Firestore. It uses the useFirestore hook to get the Firestore instance and creates a reference to a specific user document using the document path.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/reading_document_reading_documents_list_creating_document_8.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst firestore = useFirestore();\nconst userId = useUserId() as string;\n\nconst ref = doc(\n  firestore,\n  USERS_COLLECTION,\n  userId\n) as DocumentReference<UserData>;\n```\n\n----------------------------------------\n\nTITLE: Retrieving an Invitation with Team Accounts API in Makerkit\nDESCRIPTION: This code retrieves invitation data using an invite token. The adminClient is used to read pending membership, and the method returns invitation data if it exists, otherwise null.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/google_analytics_provider_posthog_analytics_provider_umami_analytics_provider_88.md#2025-04-22_snippet_34\n\nLANGUAGE: tsx\nCODE:\n```\nconst api = createTeamAccountsApi(client);\nconst invitation = await api.getInvitation(adminClient, 'invite-token');\n```\n\n----------------------------------------\n\nTITLE: Defining a Zod Schema for Action Input Validation (TypeScript)\nDESCRIPTION: Illustrates creating a Zod schema (`DeleteAccountFormSchema`) to validate incoming data for an action. This schema ensures the `otp` field is a non-empty string.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/creating_your_own_cms_client_keystatic_wordpress_62.md#2025-04-22_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nconst DeleteAccountFormSchema = z.object({\n  otp: z.string().min(1),\n});\n\n```\n\n----------------------------------------\n\nTITLE: Using the Trans Component for Translations in Server Components\nDESCRIPTION: This code shows how to use the Trans component from @kit/ui to translate strings in Next.js server components after initializing translations with withI18n.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/team_accounts_only_recipes_adding_translations_55.md#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Trans } from '@kit/ui';\n\nconst Page = () => {\n  return (\n    <div>\n      <Trans i18nKey=\"auth:signIn\" />\n    </div>\n  );\n};\n\nexport default withI18n(Page);\n```\n\n----------------------------------------\n\nTITLE: Adding Feedback Translations\nDESCRIPTION: JSON configuration for feedback widget translations including various UI elements and placeholders.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/technical_details_updating_codebase_installation_97.md#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"successTitle\": \"Thank you for your feedback!\",\n  \"close\": \"Close\",\n  \"errorTitle\": \"Sorry, Something went wrong!\",\n  \"errorDescription\": \"Please try again later or contact us directly.\",\n  \"contactUs\": \"Contact us about...\",\n  \"email\": \"Email\",\n  \"feedback\": \"Feedback\",\n  \"question\": \"Question\",\n  \"bug\": \"Bug\",\n  \"send\": \"Send\",\n  \"sending\": \"Sending...\",\n  \"attachFileOrScreenshot\": \"Attach file or screenshot\",\n  \"feedbackPlaceholder\": \"What do you like or dislike? What can we do better?\",\n  \"questionPlaceholder\": \"Ask us anything\",\n  \"bugPlaceholder\": \"What happened? What were you expecting to happen?\",\n  \"uploadImage\": \"Upload Image\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Stripe CLI with Docker in MakerKit\nDESCRIPTION: This command uses npm to run the Stripe CLI through Docker, which is the default setup in MakerKit. It's used to connect the Stripe CLI with your account for testing the integration.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/migrations_extending_organizations_organization_hooks_10.md#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nnpm run stripe:listen\n```\n\n----------------------------------------\n\nTITLE: Using CamelCase Property\nDESCRIPTION: Demonstrates how to use the camelCase property to transform snake_case column names to camelCase in the returned data.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/ai_text_editor_cookie_banner_feedback_popup_24.md#2025-04-22_snippet_27\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ServerDataLoader } from '@makerkit/data-loader-supabase-nextjs';\n\nfunction Component() {\n  return (\n    <ServerDataLoader\n      client={client}\n      table=\"organizations\"\n      select={[\"id\", \"organization_name\"]}\n      camelCase\n    >\n      {({ data }) => {\n        return (\n          <div>\n            <span>{data.id}</span>\n            <span>{data.organizationName}</span>\n          </div>\n        );\n      }}\n    </ServerDataLoader>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Firebase Emulator\nDESCRIPTION: Command to start the Firebase Emulator for development.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/commands_cors_develop_firebase_security_rules_5.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpm run firebase:emulators:start\n```\n\n----------------------------------------\n\nTITLE: Creating Inline LoadingOverlay in React\nDESCRIPTION: Shows how to use LoadingOverlay as an inline loading indicator with custom height and content.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/paddle_per_seat_billing_stripe_90.md#2025-04-22_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\n<LoadingOverlay fullPage={false} className=\"h-40\">\n  Fetching results...\n</LoadingOverlay>\n```\n\n----------------------------------------\n\nTITLE: Applying Full-page Overlay Styles with Tailwind CSS\nDESCRIPTION: Demonstrates the Tailwind CSS classes used for styling a full-page overlay in the LoadingOverlay component.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/paddle_per_seat_billing_stripe_90.md#2025-04-22_snippet_17\n\nLANGUAGE: css\nCODE:\n```\nfixed left-0 top-0 z-[100] h-screen w-screen bg-background\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Exports in package.json\nDESCRIPTION: Configuration for exporting modules using the exports field in package.json. This example shows how to export the main module and a secondary module for better tree-shaking.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/supabase_clients_data_fetching_adding_pages_63.md#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"exports\": {\n    \".\": \"./src/index.ts\",\n    \"./my-module\": \"./src/my-module.ts\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Render Props with 'If' Component in React (JSX)\nDESCRIPTION: Illustrates the render prop pattern with the 'If' component. If the 'user' object exists (is truthy), it passes the 'user' object to the child function, which then renders the 'UserProfile' component with the user's name.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/app_breadcrumbs_bordered_navigation_menu_card_button_39.md#2025-04-22_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\n<If condition={user}>\n  {(user) => <UserProfile username={user.name} />}\n</If>\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration in Next.js\nDESCRIPTION: Example showing the structure of environment variables in a Next.js application, demonstrating both public (NEXT_PUBLIC_ prefixed) and private variables. Shows how to separate sensitive information from public configuration.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/customization_2.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Public environment variables\nNEXT_PUBLIC_PRODUCT_NAME=\"Makerdesk\"\n\n# Private environment variables\nSTRIPE_SECRET_KEY=********\n```\n\n----------------------------------------\n\nTITLE: Setting Lemon Squeezy Environment Variables in Bash\nDESCRIPTION: Defines essential environment variables for Lemon Squeezy, such as secret key, signing secret, and store ID. These variables are necessary for successfully integrating Lemon Squeezy.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/lemon_squeezy_metered_usage_one_off_payments_38.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nLEMON_SQUEEZY_SECRET_KEY=\nLEMON_SQUEEZY_SIGNING_SECRET=\nLEMON_SQUEEZY_STORE_ID=\n```\n\n----------------------------------------\n\nTITLE: Using the Delete Task Hook in a React Component\nDESCRIPTION: Demonstrates how to use the useDeleteTask hook within a React component. The component handles deletion and calls the hook to remove a task from Firestore.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/reading_document_reading_documents_list_creating_document_8.md#2025-04-22_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCallback } from \"react\";\n\nconst DeleteTask = ({ id }: { id: string }) => {\n  const deleteTask = useDeleteTask(id);\n\n  // ... other code\n\n  const onSubmit = useCallback(async (taskId: string) => {\n    await deleteTask(taskId);\n  }, [deleteTask]);\n\n  // ... other code\n};\n```\n\n----------------------------------------\n\nTITLE: Authenticating as a Super Admin User with Sample Credentials\nDESCRIPTION: JSON snippet showing the test credentials for the default super admin user. This is for testing purposes only, with an email and password that are pre-seeded in the auth.users table.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/supabase_client_clone_repository_common_commands_56.md#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"email\": \"super-admin@makerkit.dev\",\n  \"password\": \"testingpassword\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Insert RLS Policy for Tasks Table\nDESCRIPTION: Creates a row level security policy for inserting tasks, checking if the user is either the owner or has tasks.write permission\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/supabase_clients_data_fetching_adding_pages_63.md#2025-04-22_snippet_22\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy insert_tasks on public.tasks\n    for insert\n    with check (\n        account_id = auth.uid() or\n        public.has_permission(auth.uid(), account_id, 'tasks.write'::app_permissions)\n    );\n```\n\n----------------------------------------\n\nTITLE: Building Contentlayer Documents\nDESCRIPTION: Command to build the Contentlayer documents required for blog and documentation functionality.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/navigating_codebase_running_the_application_technical_details_78.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run contentlayer:build\n```\n\n----------------------------------------\n\nTITLE: Creating a Zod Schema for Message Form Validation\nDESCRIPTION: Defines a Zod schema for validating support ticket messages, ensuring the message has proper length constraints and the ticketId is a valid UUID.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/data_fetching_3.md#2025-04-22_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\nimport { object, string } from 'zod';\n\nexport const MessageFormSchema = object({\n  message: string().min(1).max(5000),\n  ticketId: string().uuid(),\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering a Page using CMS Content\nDESCRIPTION: Demonstrates how to fetch content from a CMS and render a page using that content, such as Terms and Conditions from a 'pages' collection.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stepper_components_application_configuration_61.md#2025-04-22_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createCmsClient } from '@kit/cms';\n\nasync function TermsAndConditionsPage() {\n  const client = await createCmsClient();\n\n  const { content, title } = await client.getContentItemBySlug({\n    slug: 'terms-and-conditions',\n    collection: 'pages',\n  });\n\n  return (\n    <div>\n      <h1>{title}</h1>\n      <div>{content}</div>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Full-page LoadingOverlay in React\nDESCRIPTION: Demonstrates how to use the LoadingOverlay component as a full-page overlay with custom content.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/paddle_per_seat_billing_stripe_90.md#2025-04-22_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\n<LoadingOverlay>\n  Please wait while we load your dashboard...\n</LoadingOverlay>\n```\n\n----------------------------------------\n\nTITLE: Creating Plans Table in SQL\nDESCRIPTION: Creates a plans table with row level security to store pricing information and plan details. Includes policy for authenticated user access.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/user_workspace_api_api_billing_api_37.md#2025-04-22_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\ncreate table public.plans (\n  id serial primary key,\n  name text not null,\n  variant_id text not null\n);\n\nalter table public.plans enable row level security;\n\n-- allow authenticated users to read plans\ncreate policy read_plans\n  on public.plans\n  for select\n  to authenticated\n  using (true);\n```\n\n----------------------------------------\n\nTITLE: Defining a Remix Action Function for API Endpoints\nDESCRIPTION: Creates an action function that handles API requests in a Remix route file. This function will process incoming requests when the endpoint is called from client components.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/user_sdk_sdk_ci_tests_84.md#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nexport async function action(args: ActionArgs) {\n  const req = args.request;\n\n  // logic to transfer ownership\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Performance Indexes for Project Tables\nDESCRIPTION: Creates database indexes on the account_id column in projects table and on project_id and user_id columns in project_members table to optimize query performance.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/projects_data_model_53.md#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nCREATE INDEX projects_account_id ON public.projects (account_id);\nCREATE INDEX project_members_project_id ON public.project_members (project_id);\nCREATE INDEX project_members_user_id ON public.project_members (user_id);\n```\n\n----------------------------------------\n\nTITLE: Extending Analytics API with Custom Events\nDESCRIPTION: Implementation of custom analytics functionality through event mappings and custom hooks.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/translations_updating_latest_version_tutorials_87.md#2025-04-22_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { analytics } from '@kit/analytics';\nimport { useAppEvents } from '@kit/shared/events';\n\ninterface MyAppEvents {\n  'feature.used': { featureName: string };\n}\n\nexport function useMyAnalytics() {\n  const { emit } = useAppEvents<MyAppEvents>();\n\n  return {\n    trackFeatureUse: (featureName: string) => {\n      emit({ type: 'feature.used', payload: { featureName } });\n      // If you need additional tracking logic:\n      void analytics.trackEvent('Feature Used', { featureName });\n    },\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Feature Flags in TypeScript Configuration\nDESCRIPTION: This code snippet showcases the definition of feature flags in a TypeScript configuration file. It includes flags for enabling/disabling theme switching, account deletion, and organization deletion features.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/third_party_auth_providers_authentication_blog_3.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  enableThemeSwitcher: true,\n  enableAccountDeletion: false,\n  enableOrganizationDeletion: false,\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Compiled MDX Content with MDXRenderer\nDESCRIPTION: Second step in the MDX rendering process, using the MDXRenderer component to convert the compiled MDX JavaScript into HTML.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/ui_hooks_mdx_15.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport MDXRenderer from '~/components/blog/MDXRenderer';\n\nfunction ArticleBody(props: React.PropsWithChildren<{ content: string }>) {\n  return (\n    <div>\n      <MDXRenderer code={content} />;\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Users-Subscriptions Join Table Schema in Supabase\nDESCRIPTION: SQL schema for linking users with their Stripe subscriptions and customer IDs. Implements foreign key relationships and cascade deletion.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/translations_updating_latest_version_tutorials_28.md#2025-04-22_snippet_16\n\nLANGUAGE: sql\nCODE:\n```\ncreate table users_subscriptions (\n  user_id uuid not null references public.users (id) on delete cascade,\n  subscription_id text unique references public.subscriptions (id) on delete set null,\n  customer_id text not null unique,\n  primary key (user_id)\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Entity Type Models in TypeScript\nDESCRIPTION: TypeScript interface definition for an event entity model with basic properties.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/translations_updating_latest_version_tutorials_28.md#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nexport interface EventModel {\n  name: string;\n  description: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Stripe Subscription Environment Variables\nDESCRIPTION: This snippet demonstrates how to set environment variables in a production environment file to define the different pricing variants for Starter and Per Seat plans. These variables are necessary for the application to properly manage subscription pricing as determined by Stripe product IDs.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/payments_billing_6.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nNEXT_PUBLIC_STARTER_PLAN_MONTHLY_VARIANT_ID=<your-monthly-price-id>\nNEXT_PUBLIC_STARTER_PLAN_YEARLY_VARIANT_ID=<your-yearly-price-id>\n```\n\nLANGUAGE: bash\nCODE:\n```\nNEXT_PUBLIC_PER_SEAT_PLAN_MONTHLY_VARIANT_ID=<your-monthly-price-id>\nNEXT_PUBLIC_PER_SEAT_PLAN_YEARLY_VARIANT_ID=<your-yearly-price-id>\n```\n\n----------------------------------------\n\nTITLE: Pushing database migrations to Supabase\nDESCRIPTION: Command to push database migrations to your linked Supabase project, allowing you to apply your schema and any custom migrations.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/cloudflare_production_environment_variables_supabase_47.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npnpm --filter web supabase db push\n```\n\n----------------------------------------\n\nTITLE: Component Export Configuration\nDESCRIPTION: JSON configuration for exporting Shadcn UI components in package.json to enable tree-shaking.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/team_account_sidebar_configuration_configuration_cms_api_92.md#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"exports\": {\n    \"./avatar\": \"./src/shadcn/avatar.tsx\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic API Route with JSON Response\nDESCRIPTION: Example of a simple API route handler returning static JSON data\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/validating_api_input_zod_development_clone_repository_31.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextResponse } from \"next/server\";\n\nexport async function GET() {\n  return NextResponse.json({\n    hello: \"world\"\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Organization Deletion via Environment Variable\nDESCRIPTION: Shows how to enable the organization deletion feature by setting the environment variable `NEXT_PUBLIC_ENABLE_ORGANIZATION_DELETION` to `true`. This acts as an alternative or override to the default configuration.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/auth_setup_authentication_blog_16.md#2025-04-22_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nNEXT_PUBLIC_ENABLE_ORGANIZATION_DELETION=true\n```\n\n----------------------------------------\n\nTITLE: Assigning Super Admin Role with SQL Query\nDESCRIPTION: This SQL query updates a user's record in the auth.users table to assign them the super-admin role by modifying their raw_app_meta_data field.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_one_time_payments_stripe_webhooks_payments_35.md#2025-04-22_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE auth.users SET raw_app_meta_data = raw_app_meta_data || '{\"role\": \"super-admin\"}' WHERE id='<user_id>';\n```\n\n----------------------------------------\n\nTITLE: Super Admin Role Custom Claims JSON Format\nDESCRIPTION: JSON structure for custom claims used to grant super-admin role permissions, which allows users to access the admin panel and perform administrative actions.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/ui_hooks_mdx_15.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"role\": \"super-admin\"\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Billing Webhooks in TypeScript\nDESCRIPTION: Shows how to implement custom webhook handlers for billing events including payment success, failure, and subscription updates.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/user_workspace_api_api_billing_api_37.md#2025-04-22_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nawait service.handleWebhookEvent(request, {\n  onPaymentFailed: async (sessionId) => {},\n  onPaymentSucceeded: async (sessionId) => {},\n  onCheckoutSessionCompleted: async (subscription, customerId) => {},\n  onSubscriptionUpdated: async (subscription) => {},\n  onSubscriptionDeleted: async (subscriptionId) => {},\n});\n```\n\n----------------------------------------\n\nTITLE: Using the LoadingOverlay Component in React (JSX)\nDESCRIPTION: Basic usage example of the 'LoadingOverlay' component. It displays a default full-page loading overlay with a spinner and the provided text 'Loading your content...'.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/app_breadcrumbs_bordered_navigation_menu_card_button_39.md#2025-04-22_snippet_19\n\nLANGUAGE: jsx\nCODE:\n```\nimport { LoadingOverlay } from '@kit/ui/loading-overlay';\n\nfunction MyComponent() {\n  return (\n    <LoadingOverlay>\n      Loading your content...\n    </LoadingOverlay>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Sending an Email Notification in Remix Supabase SaaS Kit\nDESCRIPTION: Demonstrates how to send an email notification using the 'email' channel option in the createNotification function.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/technical_details_updating_codebase_installation_97.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createNotificationsApi } from '@kit/notifications/api';\nimport { getSupabaseServerAdminClient } from '@kit/supabase/server-admin-client';\n\nasync function sendNotificationAfterSignup(\n  accountId: string,\n) {\n  const client = getSupabaseServerAdminClient();\n  const api = createNotificationsApi(client);\n\n  await api.createNotification({\n    account_id: accountId,\n    body: 'You have successfully signed up!',\n    channel: 'email',\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in Next.js\nDESCRIPTION: Example of setting environment variables in a .env file for a Next.js application. This shows how to configure basic application details like product name and site URL.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/customization_2.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nNEXT_PUBLIC_PRODUCT_NAME=\"Makerdesk\"\nNEXT_PUBLIC_SITE_URL=https://myapp.com\n```\n\n----------------------------------------\n\nTITLE: Creating Notification Links in Remix Supabase\nDESCRIPTION: Example of creating a notification with a clickable link using the API's createNotification method. The notification includes an account ID, message body, and a link to a specific task.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/technical_details_updating_codebase_installation_97.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\napi.createNotification({\n  account_id: accountId,\n  body: 'You have created a task!',\n  link: '/tasks/123',\n});\n```\n\n----------------------------------------\n\nTITLE: Setting PostHog Proxy Ingestion URL Environment Variable\nDESCRIPTION: Defines an optional environment variable `VITE_POSTHOG_INGESTION_URL` in the `.env` file. This is used if you have set up a custom proxy (e.g., at `/ingest`) to forward events to the PostHog server, often done to mitigate ad blockers.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/google_analytics_provider_posthog_analytics_provider_umami_analytics_provider_88.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nVITE_POSTHOG_INGESTION_URL=your-ingestion-url\n```\n\n----------------------------------------\n\nTITLE: Enforcing MFA for Admin Users in TypeScript\nDESCRIPTION: Code snippet showing how to enable Multi-Factor Authentication enforcement for admin users by toggling the ENFORCE_MFA constant from false to true.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/ui_hooks_mdx_15.md#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nconst ENFORCE_MFA = true;\n```\n\n----------------------------------------\n\nTITLE: Starting the Next.js Development Server using PNPM Bash\nDESCRIPTION: Runs the `dev` script (typically defined in `package.json`) using PNPM to start the Next.js development server. The server usually runs on `http://localhost:3000` by default. Requires PNPM and project dependencies to be installed.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/deploy_production_introduction_5.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Creating Firebase Events Hook in TypeScript\nDESCRIPTION: Custom React hook for fetching events from Firestore collection, utilizing Firebase collection reference and data hooks.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/adding_admin_users_admin_overview_admin_1.md#2025-04-22_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport EventModel from '~/lib/events/types/event-model'\n\nexport function useFetchEvents() {\n  const firestore = useFirestore();\n  const eventsCollection = 'events';\n\n  const collectionRef = collection(\n    firestore,\n    eventsCollection,\n  ) as CollectionReference<EventModel>;\n\n  return useFirestoreCollectionData(collectionRef, {\n    idField: 'id',\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Using ReactFire and Custom Hooks in Next.js Firebase Kit\nDESCRIPTION: Examples of important hooks available in the Next.js Firebase kit, including ReactFire hooks for Firebase interactions and custom hooks for accessing organization data and user roles within the application.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/deploying_production_development_getting_started_environment_variables_13.md#2025-04-22_snippet_21\n\nLANGUAGE: ts\nCODE:\n```\nimport { useCurrentOrganization } from '~/lib/organizations/hooks/use-current-organization';\n\nexport function useCurrentOrganizationName() {\n  const organization = useCurrentOrganization();\n\n  return organization?.name;\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCurrentUserRole } from '~/lib/organizations/hooks/use-current-user-role';\n\nfunction MyComponent() {\n  const role = useCurrentUserRole();\n\n  return (\n    <div>\n      <p>Current user role: {role}</p>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Wordpress Credentials Setup - Bash\nDESCRIPTION: This snippet provides the default credentials for connecting to the Wordpress database used by the Docker container instance. It lists the database host, user, password, and name for the local Wordpress setup.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/cms_api_cms_creating_your_own_cms_client_42.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n```\nWORDPRESS_DB_HOST=db\nWORDPRESS_DB_USER=wordpress\nWORDPRESS_DB_PASSWORD=wordpress\nWORDPRESS_DB_NAME=wordpress\n```\n```\n\n----------------------------------------\n\nTITLE: SQL Query to Grant Super Admin Role in Supabase\nDESCRIPTION: SQL query to update a user's custom claims in Supabase, granting super-admin role permissions by modifying the raw_app_meta_data property.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/ui_hooks_mdx_15.md#2025-04-22_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE auth.users SET raw_app_meta_data = raw_app_meta_data || '{\"role\": \"super-admin\"}' WHERE id='<user_id>';\n```\n\n----------------------------------------\n\nTITLE: Configuring Client/Server Exports in package.json\nDESCRIPTION: Configuration for exporting separate client and server modules in package.json to ensure better tree-shaking and organization of package functionality.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/supabase_clients_data_fetching_adding_pages_63.md#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"exports\": {\n    \".\": \"./src/index.ts\",\n    \"./client\": \"./src/client.ts\",\n    \"./server\": \"./src/server.ts\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Reinstalling Dependencies After Cleaning (Bash)\nDESCRIPTION: Runs `pnpm install` (shortened to `i`) again after cleaning the project to reinstall all dependencies based on the lockfile.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/code_health_common_commands_conventions_48.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\npnpm i\n```\n\n----------------------------------------\n\nTITLE: Creating a New Turborepo Package with CLI\nDESCRIPTION: Command to generate a new package in your Turborepo-based Makerkit application. This creates a package under the 'packages' directory with the name '@kit/<package-name>'.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/adding_turborepo_package_approaching_local_development_database_functions_44.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nturbo gen\n```\n\n----------------------------------------\n\nTITLE: Fetching Team Account Orders with Team Account API (TypeScript)\nDESCRIPTION: Demonstrates fetching order data associated with a specific team account ID using the `getOrder` method provided by the Team Account API.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/google_analytics_provider_posthog_analytics_provider_umami_analytics_provider_88.md#2025-04-22_snippet_29\n\nLANGUAGE: tsx\nCODE:\n```\nconst api = createTeamAccountsApi(client);\nconst order = await api.getOrder('account-id');\n```\n\n----------------------------------------\n\nTITLE: Creating Restricted Admin Function\nDESCRIPTION: Security definer function that restricts task creation to service role users only.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/supabase_not_stopping_tables_not_found_dark_theme_22.md#2025-04-22_snippet_28\n\nLANGUAGE: plpgsql\nCODE:\n```\ncreate or replace function create_task(user_id bigint, name text)\nreturns tasks as $$\nbegin\n    if current_setting('role') != 'service_role' then\n        raise exception 'Only admins can call this function';\n    end if;\n\n    insert into tasks (user_id, name) values (user_id, name);\n\n    return (select * from tasks where id = currval('tasks_id_seq'));\nend;\n$$ language plpgsql security definer search_path = public;\n```\n\n----------------------------------------\n\nTITLE: Sending Error Notification\nDESCRIPTION: Example of sending an error notification by specifying the 'error' type, used for critical failures or problems that require immediate attention.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/sentry_monitoring_notifications_configuration_51.md#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\napi.createNotification({\n  account_id: accountId,\n  body: 'There was an error processing your payment.',\n  type: 'error',\n});\n```\n\n----------------------------------------\n\nTITLE: Onboarding Page Component in React\nDESCRIPTION: React component implementing the onboarding page layout with logo and form components.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/waitlist_plugin_plugins_drizzle_supabase_52.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AppLogo } from '~/components/app-logo';\nimport { OnboardingForm } from './_components/onboarding-form';\n\nfunction OnboardingPage() {\n  return (\n    <div className=\"flex h-screen flex-col items-center justify-center space-y-16\">\n      <AppLogo />\n\n      <div>\n        <OnboardingForm />\n      </div>\n    </div>\n  );\n}\n\nexport default OnboardingPage;\n```\n\n----------------------------------------\n\nTITLE: Exporting Firebase Emulator Data\nDESCRIPTION: Command to export data from the Firebase Emulator.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/commands_cors_develop_firebase_security_rules_5.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpm run firebase:emulators:export\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Paths for Plugin\nDESCRIPTION: TypeScript configuration to add path aliases for the plugin in tsconfig.json.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/ai_text_editor_cookie_banner_feedback_popup_24.md#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"paths\": {\n      \"~/plugins/*\": [\n        \"./plugins/*\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding PostHog Plugin Dependency with pnpm\nDESCRIPTION: Adds the `@kit/posthog` package as a dev dependency to the `@kit/analytics` workspace using pnpm. The `--filter \"@kit/analytics\"` flag ensures the dependency is added specifically to that workspace within a Turborepo setup.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/google_analytics_provider_posthog_analytics_provider_umami_analytics_provider_88.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpm add \"@kit/posthog@workspace:*\" --filter \"@kit/analytics\" -D\n```\n\n----------------------------------------\n\nTITLE: Resetting Supabase Database\nDESCRIPTION: Command to reset the Supabase database when schema changes are made or a fresh start is needed.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/configuring_supabase_database_webhooks_fly_production_environment_variables_95.md#2025-04-22_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\npnpm run supabase:web:reset\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication Providers\nDESCRIPTION: Configuration example for setting up authentication providers in Firebase, including OAuth and email authentication options.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_one_time_payments_stripe_webhooks_ci_tests_73.md#2025-04-22_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\nauth: {\n  enableMultiFactorAuth: false,\n  providers: {\n    emailPassword: false,\n    phoneNumber: false,\n    emailLink: true,\n    oAuth: [GoogleAuthProvider, TwitterAuthProvider],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Analytics Provider\nDESCRIPTION: Configuration code to register a custom analytics provider with the analytics manager, allowing it to be used alongside other providers.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/custom_analytics_provider_google_analytics_provider_posthog_analytics_provider_36.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAnalyticsManager } from './analytics-manager';\nimport { MyCustomAnalyticsService } from './my-custom-analytics-service';\nimport type { AnalyticsManager } from './types';\n\nexport const analytics: AnalyticsManager = createAnalyticsManager({\n  providers: {\n    myCustom: (config) => new MyCustomAnalyticsService(config),\n    null: () => NullAnalyticsService,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Layout Style - Bash\nDESCRIPTION: Configures navigation layout style between `header` and `sidebar` using environment variables in a Makerkit application. Also shows how to set sidebar expansion behavior via environment variables.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/cms_api_cms_creating_your_own_cms_client_42.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n```\nNEXT_PUBLIC_TEAM_NAVIGATION_STYLE=header\nNEXT_PUBLIC_USER_NAVIGATION_STYLE=header\n```\n```\n\nLANGUAGE: bash\nCODE:\n```\n```\nNEXT_PUBLIC_HOME_SIDEBAR_COLLAPSED=true\nNEXT_PUBLIC_TEAM_SIDEBAR_COLLAPSED=true\n```\n```\n\nLANGUAGE: bash\nCODE:\n```\n```\nNEXT_PUBLIC_EXPAND_SIDEBAR_ON_HOVER=true\n```\n```\n\n----------------------------------------\n\nTITLE: Adding Firebase Storage Provider in Remix\nDESCRIPTION: Shows how to wrap a component with the FirebaseStorageProvider to initialize the Firebase Storage SDK for use in child components.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/setting_up_firebase_custom_fetch_fetching_data_firestore_70.md#2025-04-22_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport FirebaseStorageProvider from '~/core/firebase/components/FirebaseStorageProvider';\n\n<FirebaseStorageProvider>\n  <ComponentThatUsesStorage />\n</FirebaseStorageProvider>\n```\n\n----------------------------------------\n\nTITLE: Using Custom React Hooks for Organizations in TypeScript\nDESCRIPTION: This snippet demonstrates the usage of custom React hooks for accessing the current organization and checking subscription status.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/technical_details_going_to_production_overview_publish_firebase_security_rules_72.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport useCurrentOrganization from '~/lib/organizations/hooks/use-current-organization';\n\nconst organzation = useCurrentOrganization();\n\nimport useIsSubscriptionActive from '~/lib/organizations/hooks/use-is-subscription-active';\n\nconst isSubscriptionActive = useIsSubscriptionActive();\n```\n\n----------------------------------------\n\nTITLE: Generating App Check Token in TypeScript\nDESCRIPTION: Demonstrates how to generate an App Check token using the useGetAppCheckToken hook. This token is required for API requests that use Firebase AppCheck for security.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/custom_fetch_fetching_data_firestore_making_api_requests_4.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst getAppCheckToken = useGetAppCheckToken();\nconst appCheckToken = await getAppCheckToken();\n\nconsole.log(appCheckToken) // token\n```\n\n----------------------------------------\n\nTITLE: Example Frontmatter for Blog Posts\nDESCRIPTION: This YAML frontmatter example shows how to define metadata for a blog post including title, excerpt, collection, and other properties.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/ci_tests_running_tests_testing_limitations_12.md#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n---\n\ntitle: An Awesome Post title\nexcept: \"Write here a short description for your blog post\"\ncollection: changelog.json\ndate: '2022-01-05'\nlive: true\ncoverImage: '/assets/images/posts/announcement.webp'\ntags:\n  - changelog\n---\n```\n\n----------------------------------------\n\nTITLE: Creating CORS Headers Function in Remix\nDESCRIPTION: Function to create headers with CORS settings, allowing cross-origin requests to your Remix application.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/setting_up_firebase_custom_fetch_fetching_data_firestore_70.md#2025-04-22_snippet_29\n\nLANGUAGE: tsx\nCODE:\n```\nfunction withCors() {\n  const headers = new Headers();\n\n  headers.append('Access-Control-Allow-Origin', '*');\n\n  headers.append(\n    'Access-Control-Allow-Headers',\n    'Origin, X-Requested-With, Content-Type, Accept, referer-path'\n  );\n\n  return headers;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Testimonials Admin Page in Next.js\nDESCRIPTION: This TypeScript React snippet demonstrates how to implement the Testimonials admin page using the TestimonialsPage component from the Testimonials plugin.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/sentry_monitoring_notifications_configuration_51.md#2025-04-22_snippet_28\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TestimonialsPage } from '@kit/testimonial/admin';\n\nexport default TestimonialsPage;\n```\n\n----------------------------------------\n\nTITLE: Using Video Component in MDX Documents\nDESCRIPTION: Example of embedding videos in MDX documents using the custom Video component, which simplifies adding video content to blogs and documentation.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/ui_hooks_mdx_15.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<Video src={\"/path/to/video.mp4\"} />\n```\n\n----------------------------------------\n\nTITLE: Installing Package-Specific Dependencies\nDESCRIPTION: Commands for installing dependencies in specific packages within a monorepo structure to ensure proper module resolution.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/notifications_plugins_adding_translations_68.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# For main app dependencies\npnpm install my-package --filter web\n\n# For a specific package\npnpm install my-package --filter @kit/ui\n```\n\n----------------------------------------\n\nTITLE: Fetching Single Task from Supabase in TypeScript\nDESCRIPTION: This function retrieves a single task from Supabase by its ID. It selects specific fields from the task table.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/running_project_supabase_data_fetching_supabase_data_writing_27.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function getTask(client: Client, id: number) {\n  return client\n    .from(TASKS_TABLE)\n    .select(\n      `\n      id,\n      name,\n      organizationId: organization_id,\n      dueDate: due_date,\n      description,\n      done\n    `,\n    )\n    .eq('id', id)\n    .single();\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Billing Customer ID using Accounts API in TSX\nDESCRIPTION: Shows the process of initializing the Accounts API and retrieving the billing customer ID for a specified user account using the `getCustomerId` method with the user's `accountId`.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/analytics_api_custom_analytics_provider_google_analytics_provider_57.md#2025-04-22_snippet_32\n\nLANGUAGE: tsx\nCODE:\n```\nconst api = createAccountsApi(client);\nconst customerId = await api.getCustomerId(accountId);\n```\n\n----------------------------------------\n\nTITLE: Starting Supabase Local Environment\nDESCRIPTION: Command to start the local Supabase environment using Docker, which sets up the database and provides access to Supabase Studio UI.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/user_roles_validating_api_input_zod_development_18.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nnpm run supabase:start\n```\n\n----------------------------------------\n\nTITLE: Basic API Route with GET Handler\nDESCRIPTION: Example of a simple API route handler that returns JSON data using Next.js Response.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/api_routes_vs_server_actions_api_routes_call_api_routes_from_client_19.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextResponse } from \"next/server\";\n\nexport async function GET() {\n  return NextResponse.json({\n    hello: \"world\"\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Credit Check Function in SQL\nDESCRIPTION: Creates a has_credits function to verify if a user has sufficient credits for an action.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/user_workspace_api_api_billing_api_37.md#2025-04-22_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace function public.has_credits(account_id uuid, tokens integer)\n  returns boolean\n  set search_path = ''\n  as $$\n  begin\n    return (select tokens >= tokens from public.credits where account_id = account_id);\n  end;\n  $$ language plpgsql;\n\ngrant execute on function public.has_credits to authenticated, service_role;\n```\n\n----------------------------------------\n\nTITLE: Running Stripe CLI Listener Command\nDESCRIPTION: Command to start the Stripe CLI listener for webhook testing. This command requires Docker and will prompt for account connection if not already authenticated.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/technical_details_going_to_production_overview_publish_firebase_security_rules_72.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nnpm run stripe:listen\n```\n\n----------------------------------------\n\nTITLE: Updating Package.json for Drizzle Integration\nDESCRIPTION: Package.json configuration to add Drizzle-related scripts and exports.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/waitlist_plugin_plugins_drizzle_supabase_52.md#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"drizzle\": \"drizzle-kit\",\n    \"pull\": \"drizzle-kit pull --config drizzle.config.js\"\n  },\n  \"exports\": {\n    \"./drizzle-client\": \"./src/clients/drizzle-client.ts\",\n    \"./drizzle-schema\": \"./src/drizzle/schema.ts\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Function to Check User Permissions\nDESCRIPTION: Database function that checks if a user has a specific permission on an account based on the app_permissions enum.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/adding_turborepo_package_approaching_local_development_database_functions_44.md#2025-04-22_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\npublic.has_permission(\n  user_id uuid,\n  account_id uuid,\n  permission_name app_permissions\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Password Requirements via Environment Variables\nDESCRIPTION: Example of environment variables used to enforce password strength requirements like uppercase letters, numbers, and special characters.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stepper_components_application_configuration_61.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nVITE_PASSWORD_REQUIRE_UPPERCASE=true\nVITE_PASSWORD_REQUIRE_NUMBERS=true\nVITE_PASSWORD_REQUIRE_SPECIAL_CHARS=true\n```\n\n----------------------------------------\n\nTITLE: Defining Membership Roles Enum in TypeScript\nDESCRIPTION: TypeScript enum defining hierarchical membership roles for organizations with Member, Admin, and Owner levels.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/ui_hooks_mdx_15.md#2025-04-22_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nenum MembershipRole {\n  Member = 0,\n  Admin = 1,\n  Owner = 2\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Billing Provider Environment Variables\nDESCRIPTION: Environment variable configuration for selecting the billing provider and billing mode.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/lemon_squeezy_metered_usage_one_off_payments_59.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nVITE_BILLING_PROVIDER=stripe # or lemon-squeezy\n```\n\nLANGUAGE: bash\nCODE:\n```\nBILLING_MODE=one-time\n```\n\n----------------------------------------\n\nTITLE: Registering New Translation Namespace in i18n Settings\nDESCRIPTION: This snippet shows how to register a new translation namespace ('chatbots') in the i18n settings file by adding it to the defaultI18nNamespaces array.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/team_accounts_only_recipes_adding_translations_55.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nexport const defaultI18nNamespaces = [\n  'common',\n  'auth',\n  'account',\n  'teams',\n  'billing',\n  'marketing',\n  'chatbots',\n];\n```\n\n----------------------------------------\n\nTITLE: Linking Supabase Database via pnpm Filter (Bash)\nDESCRIPTION: Executes the `supabase db link` command specifically within the `web` application's workspace using `pnpm run --filter web`. This links the local Supabase instance to a remote Supabase project.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/code_health_common_commands_conventions_48.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npnpm run --filter web supabase db link\n```\n\n----------------------------------------\n\nTITLE: Adding Feedback Sidebar Navigation Item\nDESCRIPTION: TSX component for adding a feedback item to the admin sidebar navigation.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/technical_details_updating_codebase_installation_97.md#2025-04-22_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\n<SidebarItem\n    path={'/admin/feedback'}\n    Icon={<MessageCircle className={'h-4'} />}\n>\n    Feedback\n</SidebarItem>\n```\n\n----------------------------------------\n\nTITLE: Configuring Dark Mode Colors in Tailwind\nDESCRIPTION: JavaScript configuration for setting up dark mode color palette in Tailwind CSS\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/translations_updating_latest_version_tutorials_28.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ndark: {\n  ...colors.slate,\n  DEFAULT: colors.slate[950],\n  foreground: colors.slate[100],\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Members Count in Account\nDESCRIPTION: Shows how to retrieve the number of members in an account using the getMembersCount method.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/analytics_api_custom_analytics_provider_google_analytics_provider_57.md#2025-04-22_snippet_50\n\nLANGUAGE: tsx\nCODE:\n```\nconst api = createTeamAccountsApi(client);\nconst membersCount = await api.getMembersCount('account-id');\n```\n\n----------------------------------------\n\nTITLE: Adding Umami Plugin Dependency with pnpm\nDESCRIPTION: Adds the `@kit/umami` package as a dev dependency to the `@kit/analytics` workspace using pnpm. The `--filter \"@kit/analytics\"` flag ensures the dependency is added specifically to that workspace within a Turborepo setup.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/google_analytics_provider_posthog_analytics_provider_umami_analytics_provider_88.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\npnpm add \"@kit/umami@workspace:*\" --filter \"@kit/analytics\" -D\n```\n\n----------------------------------------\n\nTITLE: Adding Google Analytics Package as a Dependency\nDESCRIPTION: Command to add the Google Analytics package as a workspace dependency in a Makerkit project.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/analytics_api_custom_analytics_provider_google_analytics_provider_57.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\npnpm add \"@kit/google-analytics@workspace:*\" --filter \"@kit/analytics\" -D\n```\n\n----------------------------------------\n\nTITLE: Creating MainCallToActionButton Component with CtaButton in React/TSX\nDESCRIPTION: This snippet demonstrates how to create a MainCallToActionButton component using the CtaButton component. It includes two buttons: a primary 'Get Started' button and a secondary 'Contact Us' link.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/app_breadcrumbs_bordered_navigation_menu_card_button_39.md#2025-04-22_snippet_33\n\nLANGUAGE: tsx\nCODE:\n```\nfunction MainCallToActionButton() {\n  return (\n    <div className={'flex space-x-4'}>\n      <CtaButton>\n        <Link href={'/auth/sign-up'}>\n          <span className={'flex items-center space-x-0.5'}>\n            <span>\n              <Trans i18nKey={'common:getStarted'} />\n            </span>\n\n            <ArrowRightIcon\n              className={\n                'h-4 animate-in fade-in slide-in-from-left-8' +\n                ' delay-1000 duration-1000 zoom-in fill-mode-both'\n              }\n            />\n          </span>\n        </Link>\n      </CtaButton>\n\n      <CtaButton variant={'link'}>\n        <Link href={'/contact'}>\n          <Trans i18nKey={'common:contactUs'} />\n        </Link>\n      </CtaButton>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Makerkit Repository and Propagating Changes\nDESCRIPTION: Series of git commands to pull updates from the Makerkit repository, update the web-branch, and apply those updates to your custom application.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/csrf_protection_react_query_route_handlers_43.md#2025-04-22_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\ngit pull upstream main\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit subtree split --prefix=apps/web --branch web-branch\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin web-branch\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit subtree pull --prefix=apps/pdf-chat origin web-branch --squash\n```\n\n----------------------------------------\n\nTITLE: Setting Firebase AppCheck Environment Variable in Remix\nDESCRIPTION: Adding the AppCheck public key to the Remix .env file to enable Firebase AppCheck integration for protection against abuse.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/app_check_auth_flow_auth_hooks_69.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nAPPCHECK_KEY=<YOUR_KEY>\n```\n\n----------------------------------------\n\nTITLE: Basic Textarea Component Implementation\nDESCRIPTION: A simple textarea component implementation using shadcn UI. Provides a multi-line text input field with placeholder text.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/multi_step_forms_page_shadcn_40.md#2025-04-22_snippet_32\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Textarea } from '@kit/ui/textarea';\n\nfunction TextareaDemo() {\n  return (\n    <div className=\"flex flex-col space-y-4\">\n      <Textarea placeholder=\"Enter your message\" />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Development Environment Variables (.env)\nDESCRIPTION: This snippet displays the typical environment variables needed for a development setup using Firebase Emulators. It includes flags to enable the emulator, project IDs, emulator host/port details for various Firebase services (Auth, Firestore, Storage, PubSub), and placeholders for the development Firebase App ID and API Key. These variables are typically stored in a `.env` file.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/app_check_auth_flow_auth_hooks_69.md#2025-04-22_snippet_13\n\nLANGUAGE: plaintext\nCODE:\n```\nEMULATOR=true\n\nGCLOUD_PROJECT=demo-makerkit\nFIREBASE_PROJECT_ID=demo-makerkit\nFIREBASE_STORAGE_BUCKET=demo-makerkit.appspot.com\nSITE_URL=http://localhost:3000\nFIREBASE_AUTH_DOMAIN=localhost\nFIREBASE_EMULATOR_HOST=localhost\nFIRESTORE_EMULATOR_PORT=8080\nFIREBASE_AUTH_EMULATOR_PORT=9099\nFIREBASE_STORAGE_EMULATOR_PORT=9199\n\n# Change this with your project's APP ID\nFIREBASE_APP_ID=<MAKERKIT_DEV_APP_ID>\n# Change this with your project's API KEY\nFIREBASE_API_KEY=<MAKERKIT_DEV_API_KEY>\n\nFIRESTORE_EMULATOR_HOST=localhost:8080\nFIREBASE_AUTH_EMULATOR_HOST=localhost:9099\nFIREBASE_STORAGE_EMULATOR_HOST=localhost:9199\nFIREBASE_PUBSUB_EMULATOR_HOST=localhost:8085\n\nSERVICE_ACCOUNT_CLIENT_EMAIL=\nSERVICE_ACCOUNT_PRIVATE_KEY=\n```\n\n----------------------------------------\n\nTITLE: Remove and Add Git Remotes\nDESCRIPTION: Instructions to configure Git remotes by first removing the original remote and then adding an upstream remote for updates, essential for maintaining an up-to-date local repository.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/cloudflare_production_environment_variables_supabase_47.md#2025-04-22_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\ngit remote rm origin\n```\n\nLANGUAGE: shell\nCODE:\n```\ngit remote add upstream git@github.com:makerkit/next-supabase-saas-kit-turbo\n```\n\n----------------------------------------\n\nTITLE: Defining Menu Entry Interface in TypeScript React\nDESCRIPTION: TypeScript interface definition for menu entries in the sidebar navigation, specifying the required properties for each menu item\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/call_api_routes_from_client_csrf_token_guarding_api_routes_7.md#2025-04-22_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\n{\n  label: string;\n  path: string;\n  Icon: (props: { className: string }) => JSX.Element;\n}\n```\n\n----------------------------------------\n\nTITLE: Production Environment Configuration\nDESCRIPTION: Environment variables for the production build of the widget, specifying the widget name and API URL for ticket submission.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/building_javascript_widget_1.md#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nWIDGET_NAME=makerdesk-widget.js\nAPI_URL=https://api-url.com/api/ticket\n```\n\n----------------------------------------\n\nTITLE: Importing Schema and Server Action in Component\nDESCRIPTION: Shows how to import the message form schema and server action into a React component.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/data_fetching_3.md#2025-04-22_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\nimport { MessageFormSchema } from '../_lib/schema/message-form.schema';\nimport { insertTicketMessageAction } from '../_lib/server/server-actions';\n```\n\n----------------------------------------\n\nTITLE: Cleaning and Reinstalling Dependencies in Remix Project\nDESCRIPTION: Commands to clean the workspace and reinstall all dependencies to resolve development server startup issues.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/text_editor_plugin_waitlist_plugin_plugins_98.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npnpm run clean:workspace\npnpm run clean\npnpm i\n```\n\n----------------------------------------\n\nTITLE: Lemon Squeezy Environment Configuration\nDESCRIPTION: Environment variable configuration for Lemon Squeezy integration including API key, store ID, and signature secret\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/technical_details_going_to_production_overview_publish_firebase_security_rules_72.md#2025-04-22_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\nLEMON_SQUEEZY_API_KEY=<YOUR_KEY>\nLEMON_SQUEEZY_STORE_ID=<YOUR_STORE_ID>\nLEMONS_SQUEEZY_SIGNATURE_SECRET=<a random string>\n```\n\n----------------------------------------\n\nTITLE: Installing Feedback Popup Plugin with Git Subtree\nDESCRIPTION: Command to install the Feedback Popup plugin using git subtree in a Next.js Supabase application.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/ai_text_editor_cookie_banner_feedback_popup_24.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngit subtree add --prefix plugins/feedback-popup git@github.com:makerkit/next-supabase-saas-kit-plugins.git feedback-popup --squash\n```\n\n----------------------------------------\n\nTITLE: Defining UserSession Interface in TypeScript/React\nDESCRIPTION: TypeScript interface defining the structure of user session data, containing Firebase authentication data and Firestore user document data.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/deploying_production_development_getting_started_environment_variables_13.md#2025-04-22_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\nexport interface UserSession {\n  auth: AuthUser | undefined;\n  data: UserData | undefined;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing User Workspace in Client Components\nDESCRIPTION: Shows how to use the useUserWorkspace hook to access workspace data in client components\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/user_workspace_api_api_billing_api_37.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\nimport { useUserWorkspace } from '@kit/accounts/hooks/use-user-workspace';\n\nexport default function SomeComponent() {\n  const { workspace, user, accounts } = useUserWorkspace();\n\n  // use account, user, and accounts\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Supabase for Local Development\nDESCRIPTION: Command to start Supabase locally for development purposes. Requires Docker to be running on the machine to function properly.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/customization_2.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\npnpm run supabase:web:start\n```\n\n----------------------------------------\n\nTITLE: Loading User Workspace Data in Server Components\nDESCRIPTION: Demonstrates how to fetch user workspace data using the loadUserWorkspace function in server components\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/user_workspace_api_api_billing_api_37.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { loadUserWorkspace } from '~/home/(user)/_lib/server/load-user-workspace';\n\nexport default async function SomeUserPage() {\n  const data = await loadUserWorkspace();\n\n  // use data\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Sentry Package\nDESCRIPTION: Command to install the Sentry Next.js package as a dependency for the web application using pnpm package manager.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/sentry_monitoring_notifications_configuration_51.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm i @sentry/nextjs --filter web\n```\n\n----------------------------------------\n\nTITLE: Resetting Supabase Migrations Using pnpm (Bash)\nDESCRIPTION: This Bash snippet resets Supabase migrations using the pnpm package manager and a Makerkit-provided command. It requires pnpm and the relevant project setup. Run this when you introduce a new schema to discard all migrations and start clean; the operation is typically destructive and best used in development.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/adding_turborepo_package_approaching_local_development_database_functions_44.md#2025-04-22_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\npnpm run supabase:web:reset\n```\n\n----------------------------------------\n\nTITLE: Setting Billing Mode Environment Variable\nDESCRIPTION: Command to configure the billing mode for one-time payments instead of subscriptions. When set to 'one-time', Makerkit will look for orders in the 'orders' table instead of subscriptions.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/billing_webhooks_credit_based_billing_lemon_squeezy_89.md#2025-04-22_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nBILLING_MODE=one-time\n```\n\n----------------------------------------\n\nTITLE: Using useCreateServerSideSession Hook in Remix\nDESCRIPTION: React hook that returns a function to create a server-side session, useful for custom authentication flows.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/app_check_auth_flow_auth_hooks_69.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCreateServerSideSession } from \"~/core/hooks/use-create-server-side-session\";\n\nconst [sessionRequest, { loading, error }] = useCreateServerSideSession();\n```\n\n----------------------------------------\n\nTITLE: Configuring Firebase Authentication Settings\nDESCRIPTION: Configuration for Firebase authentication including MFA, email verification, and various authentication providers\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/call_api_routes_from_client_csrf_token_guarding_api_routes_7.md#2025-04-22_snippet_22\n\nLANGUAGE: ts\nCODE:\n```\nauth: {\n  enableMultiFactorAuth: true,\n  requireEmailVerification:\n    process.env.NEXT_PUBLIC_REQUIRE_EMAIL_VERIFICATION === 'true',\n  providers: {\n    emailPassword: true,\n    phoneNumber: false,\n    emailLink: false,\n    oAuth: [GoogleAuthProvider],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind Colors for ShadCN UI\nDESCRIPTION: JavaScript configuration for setting up custom color palettes in Tailwind CSS for ShadCN UI theming\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/translations_updating_latest_version_tutorials_28.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nprimary: {\n  DEFAULT: 'hsl(var(--primary))',\n  foreground: 'hsl(var(--primary-foreground))',\n  ...colors.violet,\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Package Dependencies for Specific Packages\nDESCRIPTION: Commands for installing dependencies in specific packages using pnpm workspace filtering\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/team_accounts_only_recipes_adding_translations_55.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n# For main app dependencies\npnpm install my-package --filter web\n\n# For a specific package\npnpm install my-package --filter @kit/ui\n```\n\n----------------------------------------\n\nTITLE: Server Action Error Handling\nDESCRIPTION: Implementation of error handling in Server Actions using try/catch and ErrorBoundary\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/user_reading_record_creating_record_20.md#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nasync function serverActionWithError() {\n  'use server';\n\n  throw new Error(`This is error is in the Server Action`);\n}\n\nfunction FormWithServerAction() {\n  return (\n    <form action={serverActionWithError}>\n      <button>Submit Form</button>\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Running Supabase CLI Commands\nDESCRIPTION: Pattern for executing Supabase CLI commands within the web application folder using pnpm filtering.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/configuring_supabase_database_webhooks_fly_production_environment_variables_95.md#2025-04-22_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\npnpm --filter web supabase <command>\n```\n\n----------------------------------------\n\nTITLE: Run Cypress Headless Command\nDESCRIPTION: Command to run Cypress end-to-end tests in headless mode without the visual UI.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/uploading_data_to_storage_writing_data_to_supabase_data_fetching_77.md#2025-04-22_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nnpm run cypress:headless\n```\n\n----------------------------------------\n\nTITLE: Managing Turborepo Subtrees with Git Commands\nDESCRIPTION: Series of Git commands for creating and managing subtrees in a Turborepo application, enabling synchronization between template and new applications.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/supabase_clients_data_fetching_adding_pages_63.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngit subtree split --prefix=apps/web --branch web-branch\ngit subtree add --prefix=apps/pdf-chat origin web-branch --squash\ngit pull upstream main\ngit subtree split --prefix=apps/web --branch web-branch\ngit push origin web-branch\ngit subtree pull --prefix=apps/pdf-chat origin web-branch --squash\n```\n\n----------------------------------------\n\nTITLE: Starting Stripe CLI for Webhooks\nDESCRIPTION: Command to run the Stripe CLI for handling webhooks in local development.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/user_roles_validating_api_input_zod_development_18.md#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nnpm run stripe:listen\n```\n\n----------------------------------------\n\nTITLE: Database Permissions Enum Definition\nDESCRIPTION: SQL definition of application permissions enum type with default permission values for role-based access control.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/marketing_pages_migrations_permissions_and_roles_45.md#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\ncreate type public.app_permissions as enum(\n  'roles.manage',\n  'billing.manage',\n  'settings.manage',\n  'members.manage',\n  'invites.manage'\n);\n```\n\n----------------------------------------\n\nTITLE: Email Configuration Settings\nDESCRIPTION: Environment variables configuration for email service setup in Makerkit.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/uploading_data_to_storage_writing_data_to_supabase_data_fetching_77.md#2025-04-22_snippet_26\n\nLANGUAGE: tsx\nCODE:\n```\nEMAIL_HOST=\nEMAIL_PORT=587\nEMAIL_USER=\nEMAIL_PASSWORD=\nEMAIL_SENDER='MakerKit Team <info@makerkit.dev>'\n```\n\n----------------------------------------\n\nTITLE: Exporting Firebase Emulator Data\nDESCRIPTION: Command to export the current state of Firebase emulators for data persistence.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/develop_firebase_security_rules_emails_encrypting_secrets_71.md#2025-04-22_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\nnpm run firebase:emulators:export\n```\n\n----------------------------------------\n\nTITLE: Implementing Language Selector Component\nDESCRIPTION: Example of importing and using the LanguageSelector component to enable language switching functionality in the application.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/notifications_plugins_adding_translations_68.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LanguageSelector } from '@kit/ui/language-selector';\n\n<LanguageSelector />\n```\n\n----------------------------------------\n\nTITLE: Format Code Command\nDESCRIPTION: Command to format all files in the project according to the Prettier configuration.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/uploading_data_to_storage_writing_data_to_supabase_data_fetching_77.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnpm run format\n```\n\n----------------------------------------\n\nTITLE: Chat API Route Handler\nDESCRIPTION: Edge runtime configuration and route handler setup for the chat API endpoint\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/subscription_permissions_organizations_lemon_squeezy_23.md#2025-04-22_snippet_20\n\nLANGUAGE: ts\nCODE:\n```\nimport handleChatBotRequest from '~/plugins/chatbot/lib/server/route-handler';\n\nexport const runtime = 'edge';\n\nexport const POST = handleChatBotRequest;\n```\n\n----------------------------------------\n\nTITLE: Configuring Notification Environment Variables\nDESCRIPTION: Environment variables to enable notifications and real-time updates in the Makerkit application.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/introduction_migration_from_remix_navigating_codebase_67.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nVITE_ENABLE_NOTIFICATIONS=true\nVITE_REALTIME_NOTIFICATIONS=true\n```\n\n----------------------------------------\n\nTITLE: Implementing Chatbot Component in React\nDESCRIPTION: Example of importing and using the Chatbot component with basic configuration.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/technical_details_updating_codebase_installation_97.md#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Chatbot } from '@kit/chatbot';\n\n<Chatbot sitename={'Makerkit'} />\n```\n\n----------------------------------------\n\nTITLE: Setting Super Admin Role in Supabase SQL\nDESCRIPTION: SQL command to update a user's role to super-admin in the Supabase auth.users table. Requires replacing <user_id> with the target user's ID.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_one_time_payments_stripe_webhooks_payments_35.md#2025-04-22_snippet_18\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE auth.users\nSET raw_app_meta_data = raw_app_meta_data || '{\"role\": \"super-admin\"}'\nWHERE id='<user_id>';\n```\n\n----------------------------------------\n\nTITLE: Assigning Super Admin Role to a User with SQL Query\nDESCRIPTION: SQL query to update a user's metadata in the auth.users table to assign them the super-admin role. This is executed in Supabase SQL Query editor and requires replacing the user_id placeholder.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/supabase_client_clone_repository_common_commands_56.md#2025-04-22_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE auth.users SET raw_app_meta_data = raw_app_meta_data || '{\"role\": \"super-admin\"}' WHERE id='<user_id>';\n```\n\n----------------------------------------\n\nTITLE: Adding a New Link Item to Navigation in Next.js (TypeScript)\nDESCRIPTION: Demonstrates how to add a new navigation entry ('About') to the links object in the navigation component. No dependencies beyond TypeScript and React. Input: update to links object, Output: new menu item available for rendering.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/initializing_project_introduction_marketing_site_pages_14.md#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nAbout: {\n  label: 'About',\n  path: '/about',\n},\n```\n\n----------------------------------------\n\nTITLE: Resolving Lock File Conflicts\nDESCRIPTION: Command to regenerate the pnpm lock file after accepting changes in case of conflicts.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/supabase_client_clone_repository_common_commands_56.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npnpm i\n```\n\n----------------------------------------\n\nTITLE: Setting Email Verification Requirement in Environment Variables\nDESCRIPTION: Environment variable configuration for requiring email verification. This setting in the .env file enables the email verification requirement feature in the application.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/ci_tests_running_tests_testing_limitations_12.md#2025-04-22_snippet_33\n\nLANGUAGE: bash\nCODE:\n```\nNEXT_PUBLIC_REQUIRE_EMAIL_VERIFICATION=true\n```\n\n----------------------------------------\n\nTITLE: Changing Default Theme in Configuration\nDESCRIPTION: Example of setting the default theme to Dark in the application's configuration file.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/translations_updating_latest_version_tutorials_87.md#2025-04-22_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nconst configuration = {\n  theme: Themes.Dark,\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring i18n Settings\nDESCRIPTION: Configuration for adding feedback namespace to i18n translation settings.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/sentry_monitoring_notifications_configuration_51.md#2025-04-22_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nexport const defaultI18nNamespaces = [\n  'common',\n  'auth',\n  'account',\n  'teams',\n  'billing',\n  'marketing',\n\n  // Add the feedback namespace\n  'feedback',\n];\n```\n\n----------------------------------------\n\nTITLE: Setting Email Verification Requirements in Next.js\nDESCRIPTION: Configuration snippet for enabling or disabling email verification requirement in the authentication flow.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/architecture_auth_overview_auth_setup_29.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nauth: {\n  requireEmailConfirmation: false,\n}\n```\n\n----------------------------------------\n\nTITLE: Using Pill Component\nDESCRIPTION: Example of using the Pill component to create a small, rounded content container with a label.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/app_breadcrumbs_bordered_navigation_menu_card_button_39.md#2025-04-22_snippet_28\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Pill } from '@kit/ui/marketing';\n\nfunction LandingPage() {\n  return (\n    <Pill label=\"New\">\n      Discover the power of our innovative\n    </Pill>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Makerkit Testing Pipeline Script\nDESCRIPTION: This bash script orchestrates the testing pipeline by starting required services, running tests, and cleaning up afterward.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/ci_tests_running_tests_testing_limitations_12.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nset -e\n\nnpm run dev:test & npm run stripe:mock-server &\nnpm run cypress:headless\nsh scripts/kill-ports.sh\n```\n\n----------------------------------------\n\nTITLE: Removing Default Git Origin Remote (Bash)\nDESCRIPTION: Removes the default 'origin' remote repository link that Git automatically creates when cloning. This is done in preparation for setting up a new 'origin' pointing to the user's own fork and an 'upstream' pointing to the original Makerkit repository.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/configuring_supabase_database_webhooks_fly_production_environment_variables_95.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ngit remote rm origin\n```\n\n----------------------------------------\n\nTITLE: Defining Event Model Interface in TypeScript\nDESCRIPTION: TypeScript interface defining the structure of an event model with name and description properties.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/adding_admin_users_admin_overview_admin_1.md#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface EventModel {\n  name: string;\n  description: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Tests in CI Mode\nDESCRIPTION: This NPM script runs Firebase emulators and testing scripts for CI environments.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/ci_tests_running_tests_testing_limitations_12.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n\"test\": \"firebase emulators:exec --project demo-makerkit --import ./firebase-seed \\\"sh ./scripts/test.sh\\\"\",\n```\n\n----------------------------------------\n\nTITLE: Setting Dynamic Rendering in Next.js\nDESCRIPTION: TypeScript configuration to force dynamic rendering and resolve the 'Dynamic server usage' error in Next.js.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/branding_environment_variables_setup_project_configuration_21.md#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nexport const dynamic = 'force-dynamic';\n```\n\n----------------------------------------\n\nTITLE: Setting Contact Form Environment Variables\nDESCRIPTION: Environment variable configuration for the contact form functionality, specifying the email address for form submissions.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/marketing_pages_migrations_permissions_and_roles_45.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nCONTACT_EMAIL=\n```\n\n----------------------------------------\n\nTITLE: Tracking Page Views in Makerkit\nDESCRIPTION: Manual page view tracking implementation using the analytics.trackPageView method.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/translations_updating_latest_version_tutorials_87.md#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nvoid analytics.trackPageView('Sign Up');\n```\n\n----------------------------------------\n\nTITLE: Setting Mailer Provider in Environment Variables\nDESCRIPTION: Example of setting the mailer provider to 'resend' in the .env file for Cloudflare deployment.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/cloudflare_production_environment_variables_supabase_47.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nMAILER_PROVIDER=resend\n```\n\n----------------------------------------\n\nTITLE: Adding New Git Remote\nDESCRIPTION: Command to add a new Git remote for the GitHub repository\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/deploy_production_introduction_5.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngit remote add origin <your-github-repo-url>\n```\n\n----------------------------------------\n\nTITLE: Enabling RLS on Tasks Table\nDESCRIPTION: SQL command to enable Row Level Security on the tasks table for data protection.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/organization_sdk_organization_subscription_sdk_sdk_25.md#2025-04-22_snippet_26\n\nLANGUAGE: sql\nCODE:\n```\nalter table tasks enable row level security;\n```\n\n----------------------------------------\n\nTITLE: Configuring PostHog Service in Analytics Manager (TypeScript)\nDESCRIPTION: Updates `packages/analytics/src/index.ts` to integrate the PostHog analytics service. It imports `createPostHogAnalyticsService` from the installed `@kit/posthog` package and adds it to the `providers` object within the `createAnalyticsManager` configuration, mapping it to the key 'posthog'.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/google_analytics_provider_posthog_analytics_provider_umami_analytics_provider_88.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n {% title=\"packages/analytics/src/index.ts\" %}\nimport { createPostHogAnalyticsService } from '@kit/posthog';\n\nimport { createAnalyticsManager } from './analytics-manager';\nimport type { AnalyticsManager } from './types';\n\nexport const analytics: AnalyticsManager = createAnalyticsManager({\n  providers: {\n    posthog: createPostHogAnalyticsService,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Starting Supabase Local Instance\nDESCRIPTION: Command to start the Supabase local instance for testing.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/user_sdk_sdk_ci_tests_84.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run supabase:start\n```\n\n----------------------------------------\n\nTITLE: Running the Remix Development Server\nDESCRIPTION: Command to start the Remix development server which serves the application at localhost:3000.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/project_structure_running_project_tailwind_css_75.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Contact Form Email in Bash\nDESCRIPTION: Sets up the email address to receive submissions from the contact form.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stepper_components_application_configuration_61.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nCONTACT_EMAIL=\n```\n\n----------------------------------------\n\nTITLE: Git Pull Command for Migration\nDESCRIPTION: Command to pull changes from upstream repository during migration process.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/supabase_not_stopping_tables_not_found_dark_theme_22.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngit pull upstream main\n```\n\n----------------------------------------\n\nTITLE: Pushing Database Migrations\nDESCRIPTION: Command to push database migrations to the production Supabase instance\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/deploy_production_introduction_5.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm --filter web supabase db push\n```\n\n----------------------------------------\n\nTITLE: Adding Feedback Translations\nDESCRIPTION: JSON configuration for feedback widget translations in English.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/sentry_monitoring_notifications_configuration_51.md#2025-04-22_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"successTitle\": \"Thank you for your feedback!\",\n  \"close\": \"Close\",\n  \"errorTitle\": \"Sorry, Something went wrong!\",\n  \"errorDescription\": \"Please try again later or contact us directly.\",\n  \"contactUs\": \"Contact us about...\",\n  \"email\": \"Email\",\n  \"feedback\": \"Feedback\",\n  \"question\": \"Question\",\n  \"bug\": \"Bug\",\n  \"send\": \"Send\",\n  \"sending\": \"Sending...\",\n  \"attachFileOrScreenshot\": \"Attach file or screenshot\",\n  \"feedbackPlaceholder\": \"What do you like or dislike? What can we do better?\",\n  \"questionPlaceholder\": \"Ask us anything\",\n  \"bugPlaceholder\": \"What happened? What were you expecting to happen?\",\n  \"uploadImage\": \"Upload Image\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Language with Bash\nDESCRIPTION: This snippet provides a method to set the default language for a Next.js application using environment variables in a `.env` file. Understanding environment configuration in Node.js and Next.js is required. Users need to set the desired language code as input.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/branding_environment_variables_setup_project_configuration_21.md#2025-04-22_snippet_12\n\nLANGUAGE: Bash\nCODE:\n```\nDEFAULT_LOCALE=es\n```\n\n----------------------------------------\n\nTITLE: Configuring Monitoring Environment Variables\nDESCRIPTION: Environment variables for setting up monitoring in the Next.js application, including provider selection and performance instrumentation options.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/sentry_monitoring_notifications_configuration_51.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# sentry or baselime\nNEXT_PUBLIC_MONITORING_PROVIDER=\n\n# performance monitoring (only required for Baselime)\nENABLE_MONITORING_INSTRUMENTATION=true\nINSTRUMENTATION_SERVICE_NAME=your_service_name\n```\n\n----------------------------------------\n\nTITLE: Retrieving Team Account Order\nDESCRIPTION: Demonstrates how to fetch order data for a team account using the getOrder method.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/analytics_api_custom_analytics_provider_google_analytics_provider_57.md#2025-04-22_snippet_47\n\nLANGUAGE: tsx\nCODE:\n```\nconst api = createTeamAccountsApi(client);\nconst order = await api.getOrder('account-id');\n```\n\n----------------------------------------\n\nTITLE: Setting Stripe Webhook Secret Environment Variable\nDESCRIPTION: This snippet illustrates how to configure the `.env.development` file with the Stripe webhook secret required to validate incoming webhook events during local development.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/payments_billing_6.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nSTRIPE_WEBHOOK_SECRET=<your-webhook-secret>\n```\n\n----------------------------------------\n\nTITLE: Configuring Dark Mode Theme in TypeScript\nDESCRIPTION: Configuration setup for enabling/disabling theme switcher and setting default theme in Makerkit application.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/running_project_supabase_data_fetching_supabase_data_writing_27.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  ...\n  features: {\n    enableThemeSwitcher: false,\n  },\n  theme: Themes.Dark,\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Team Account Billing Customer ID with Team Account API (TypeScript)\nDESCRIPTION: Illustrates how to get the billing customer ID associated with a specific team account ID using the `getCustomerId` method of the Team Account API.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/google_analytics_provider_posthog_analytics_provider_umami_analytics_provider_88.md#2025-04-22_snippet_33\n\nLANGUAGE: tsx\nCODE:\n```\nconst api = createTeamAccountsApi(client);\nconst customerId = await api.getCustomerId('account-id');\n```\n\n----------------------------------------\n\nTITLE: Generating Project Environment Variables with Turbo Script (Bash)\nDESCRIPTION: This command utilizes Turborepo's script execution (`turbo gen`) to run a Makerkit-provided generator named `env`. This script interactively prompts the user for necessary environment variable values and generates a `.env` template file located at `turbo/generators/templates/env/.env`. This template aids in setting up environment variables for deployment.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/emails_authentication_checklist_65.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nturbo gen env\n```\n\n----------------------------------------\n\nTITLE: Linking Local Project to Supabase\nDESCRIPTION: Command to link the local project with a Supabase project instance\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/deploy_production_introduction_5.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm --filter web supabase link\n```\n\n----------------------------------------\n\nTITLE: Linking Local Development to Supabase Project using CLI\nDESCRIPTION: This command uses the Supabase CLI to link the local development environment to a specific Supabase project created in the cloud. This is a necessary step after project creation to enable interaction between the local setup and the remote Supabase services.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/development_authentication_emails_email_configuration_94.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsupabase link\n```\n\n----------------------------------------\n\nTITLE: Setting Default Billing Provider Environment Variable in Bash\nDESCRIPTION: Sets Lemon Squeezy as the default billing provider by configuring the environment variable. Required when using Lemon Squeezy as the billing provider in the Next.js Supabase SaaS Starter Kit.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/lemon_squeezy_metered_usage_one_off_payments_38.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nNEXT_PUBLIC_BILLING_PROVIDER=lemon-squeezy\n```\n\n----------------------------------------\n\nTITLE: Installing Chatbot Plugin via CLI\nDESCRIPTION: Command to install the chatbot plugin using the Makerkit CLI tool.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/sentry_monitoring_notifications_configuration_51.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nnpx @makerkit/cli plugins install chatbot\n```\n\n----------------------------------------\n\nTITLE: Migration Script for Makerkit v0.1.0 Theme Changes\nDESCRIPTION: JavaScript script to automate the migration of CSS classes and package references from older versions to Makerkit v0.1.0. The script replaces black color classes with dark classes and updates package references.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/updating_navigation_menu_403_error_actions_contentlayer_stuck_34.md#2025-04-22_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nconst replace = require('replace-in-file');\nconst files = ['src/**/*.tsx', 'src/**/*.css'];\n\nconst promise = () =>\n  new Promise((resolve, reject) => {\n    replace({\n      ...getConfigs(),\n      files,\n    })\n      .then((results) => {\n        results.forEach((result) => {\n          if (result.hasChanged) {\n            console.log('File changed:', result.file);\n          }\n        });\n\n        resolve();\n      })\n      .catch((error) => {\n        console.error('Error occurred:', error);\n\n        reject(error);\n      });\n  });\n\n(async () => {\n  console.log(`Replacing classes in \"${files}\" ...`);\n  await promise();\n  console.log('Done!');\n})();\n\nfunction getConfigs() {\n  return {\n    from: [\n      /black-600/g,\n      /black-500/g,\n      /black-400/g,\n      /black-300/g,\n      /black-200/g,\n      /black-100/g,\n      /black-50/g,\n      \"'classnames'\",\n    ],\n    to: [\n      'dark-900',\n      'dark-900',\n      'dark-800',\n      'dark-700',\n      'dark-600',\n      'dark-500',\n      'dark-400',\n      \"'clsx'\",\n    ],\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Pulling Latest Changes from Upstream Remote\nDESCRIPTION: Command to fetch and merge the latest changes from the upstream remote repository.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/supabase_client_clone_repository_common_commands_56.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit pull upstream main\n```\n\n----------------------------------------\n\nTITLE: Generating Supabase Types with pnpm (Bash)\nDESCRIPTION: This Bash snippet generates new TypeScript types for Supabase database tables and views after schema changes, using pnpm. It depends on a properly configured Supabase project. Run this after resetting or updating your schema to keep application types in sync with the database.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/adding_turborepo_package_approaching_local_development_database_functions_44.md#2025-04-22_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\npnpm run supabase:web:typegen\n```\n\n----------------------------------------\n\nTITLE: Setting Firebase Environment Variables\nDESCRIPTION: Environment variables configuration needed for Firebase in a MakerKit application.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/setting_up_firebase_custom_fetch_fetching_data_firestore_70.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nFIREBASE_API_KEY=\nFIREBASE_AUTH_DOMAIN=\nFIREBASE_PROJECT_ID=\nFIREBASE_STORAGE_BUCKET=\nFIREBASE_MESSAGING_SENDER_ID=\nFIREBASE_APP_ID=\nFIREBASE_MEASUREMENT_ID=\n```\n\n----------------------------------------\n\nTITLE: Creating Task Server Action in Next.js\nDESCRIPTION: Implements a server action to create tasks with authentication. It uses the createTask mutation and revalidates the page path after successful creation to reflect changes immediately.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/running_project_supabase_data_fetching_supabase_data_writing_27.md#2025-04-22_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\n'use server';\n\nimport { revalidatePath } from 'next/cache';\n\nimport { createTask } from '~/lib/tasks/mutations';\nimport type Task from '~/lib/tasks/types/task';\nimport { withSession } from '~/core/generic/actions-utils';\nimport getSupabaseServerActionClient from '~/core/supabase/action-client';\n\ntype CreateTaskParams = {\n  task: Omit<Task, 'id'>;\n  csrfToken: string;\n};\n\nexport const createTaskAction = withSession(\n  async (params: CreateTaskParams) => {\n    const client = getSupabaseServerActionClient();\n\n    await createTask(client, params.task);\n\n    revalidatePath('/dashboard/[organization]/tasks', 'page');\n  });\n```\n\n----------------------------------------\n\nTITLE: Fetching Organization Subscription\nDESCRIPTION: This snippet shows how to retrieve the current organization's subscription details using the organization.getSubscription() method from the SDK.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/organization_sdk_organization_subscription_sdk_sdk_25.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport getSdk from '~/lib/sdk';\nimport getSupabaseServerComponentClient from '~/core/supabase/server-component-client';\n\nasync function PageServerComponent() {\n  const client = getSupabaseServerComponentClient();\n  const sdk = getSdk(client);\n\n  const subscription = await sdk.organization.getSubscription();\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Authentication Configuration Structure (TypeScript)\nDESCRIPTION: This code snippet shows the structure of the `auth` object within the Makerkit global configuration file (`src/configuration.ts`). It includes settings for requiring email confirmation (`requireEmailConfirmation`, typically controlled by environment variables) and configuring available authentication providers (`providers`). The `providers` object contains boolean flags for email/password, phone number, email link, and an array (`oAuth`) for specifying enabled Supabase OAuth providers using the `Provider` type.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/api_routes_vs_server_actions_api_routes_call_api_routes_from_client_19.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Provider } from '@supabase/gotrue-js/src/lib/types';\n\n// in your configuration JSON\nauth: {\n  // ensure this is the same as your Supabase project. By default - it's true\n  requireEmailConfirmation:\n    process.env.NEXT_PUBLIC_REQUIRE_EMAIL_CONFIRMATION === 'true',\n  // NB: Enable the providers below in the Supabase Console\n  // in your production project\n  providers: {\n    emailPassword: true,\n    phoneNumber: false,\n    emailLink: false,\n    oAuth: ['google'] as Provider[]\n  },\n},\n```\n\n----------------------------------------\n\nTITLE: Disabling Theme Switcher in Configuration\nDESCRIPTION: This snippet demonstrates how to disable the theme toggle functionality by setting the enableThemeSwitcher feature flag to false in the configuration file.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_one_time_payments_stripe_webhooks_payments_35.md#2025-04-22_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nconst configuration = {\n  theme: Themes.Dark,\n  features: {\n    enableThemeSwitcher: false,\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Switching Billing Provider in Database Configuration | SQL\nDESCRIPTION: Updates the billing provider in the database to Lemon Squeezy using an SQL UPDATE statement. This should be executed against your configuration table to ensure the backend uses the correct billing integration, and should be run only once—usually as part of a migration or initial setup.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/billing_webhooks_credit_based_billing_lemon_squeezy_89.md#2025-04-22_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nupdate config set billing_provider = 'lemon-squeezy';\n```\n\n----------------------------------------\n\nTITLE: Configuring Branding Settings in Remix Supabase\nDESCRIPTION: Configuration object for customizing the SaaS application branding including site name, description, theme colors, and social media handles. Located in src/configurations.ts file.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/branding_environment_variables_setup_project_configuration_80.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nsite: {\n  name: 'Awesomely - Your SaaS Title',\n  description: 'Your SaaS Description',\n  themeColor: '#ffffff',\n  themeColorDark: '#0a0a0a',\n  siteUrl: process.env.NEXT_PUBLIC_SITE_URL,\n  siteName: 'Awesomely',\n  twitterHandle: '',\n  githubHandle: '',\n  language: 'en',\n  convertKitFormId: '',\n  locale: process.env.NEXT_PUBLIC_DEFAULT_LOCALE,\n}\n```\n\n----------------------------------------\n\nTITLE: Firebase Private Key Format Example\nDESCRIPTION: Example of how a Firebase private key looks like when generated from the Firebase console.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/setting_up_firebase_custom_fetch_fetching_data_firestore_70.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n---\n--BEGIN PRIVATE KEY---\n--\n***************************\n---\n--END PRIVATE KEY---\n---\n-\n```\n\n----------------------------------------\n\nTITLE: Building Specific App with Turborepo (Bash)\nDESCRIPTION: This command navigates up two directories from the current app's directory (assuming it's run from within `apps/<app-name>`) and then uses Turborepo (`turbo run build`) to build only the specified application, identified by the `--filter=<app-name>` flag. Replace `<app-name>` with the actual directory name of the application you intend to build.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/configuring_supabase_database_webhooks_fly_production_environment_variables_95.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncd ../.. && turbo run build --filter=<app-name>\n```\n\n----------------------------------------\n\nTITLE: Running Stripe Webhook Listener\nDESCRIPTION: Commands to run and set up Stripe webhook listener locally for testing Stripe integration\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/user_reading_record_creating_record_20.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm run stripe:listen\n```\n\n----------------------------------------\n\nTITLE: Starting Stripe CLI for Webhook Testing\nDESCRIPTION: Command to run Stripe CLI for local webhook testing, which routes Stripe webhooks to the local development server.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/project_structure_running_project_tailwind_css_75.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run stripe:listen\n```\n\n----------------------------------------\n\nTITLE: Configuring Production Environment Variables for Firebase and Related Services\nDESCRIPTION: Production environment variables setup including Firebase configuration, Stripe integration, and email service settings. Includes sensitive keys that should be stored in CI/CD environment.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/third_party_auth_providers_authentication_blog_3.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nNEXT_PUBLIC_FIREBASE_API_KEY=\nNEXT_PUBLIC_FIREBASE_PROJECT_ID=\nNEXT_PUBLIC_FIREBASE_STORAGE_BUCKET=\nNEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID=\nNEXT_PUBLIC_FIREBASE_APP_ID=\nNEXT_PUBLIC_FIREBASE_MEASUREMENT_ID=\nNEXT_PUBLIC_SITE_URL=\n\nSERVICE_ACCOUNT_CLIENT_EMAIL=\n\n## SECRET KEYS ARE BEST ADDED TO YOUR CI\nSERVICE_ACCOUNT_PRIVATE_KEY=\nSECRET_KEY=\nSECRET_APPCHECK_KEY=\n\nNEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=\n\n# Add these in Vercel or .env.local\nSTRIPE_SECRET_KEY=\nSTRIPE_WEBHOOK_SECRET=\n\n# EMAIL\nEMAIL_HOST=\nEMAIL_PORT=587\nEMAIL_USER=\nEMAIL_PASSWORD=\nEMAIL_SENDER='MakerKit Team <info@makerkit.dev>'\n```\n\n----------------------------------------\n\nTITLE: Core Configuration Variables Setup in Next.js\nDESCRIPTION: Essential environment variables that define basic application settings including site URL, product name, site title, and default locale.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stepper_components_application_configuration_41.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nNEXT_PUBLIC_SITE_URL=https://example.com\nNEXT_PUBLIC_PRODUCT_NAME=Your Product\nNEXT_PUBLIC_SITE_TITLE=\"Your Site Title\"\nNEXT_PUBLIC_SITE_DESCRIPTION=\"Your site description\"\nNEXT_PUBLIC_DEFAULT_LOCALE=en\n```\n\n----------------------------------------\n\nTITLE: Enforcing Dark Theme Only in Next.js Makerkit\nDESCRIPTION: Configuration for using only the dark theme by disabling the theme switcher. This prevents users from changing the theme and enforces the dark theme across the application.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/updating_navigation_menu_403_error_actions_contentlayer_stuck_34.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n{\n  features: {\n    enableThemeSwitcher: false,\n  },\n  theme: Themes.Dark,\n}\n```\n\n----------------------------------------\n\nTITLE: PostHog Environment Variables Configuration\nDESCRIPTION: Environment variables needed for configuring PostHog, including API key, host, and ingestion URL.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/custom_analytics_provider_google_analytics_provider_posthog_analytics_provider_36.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nNEXT_PUBLIC_POSTHOG_KEY=phc_your_key_here\nNEXT_PUBLIC_POSTHOG_HOST=https://eu.posthog.com\nNEXT_PUBLIC_POSTHOG_INGESTION_URL=http://localhost:3000/ingest\n```\n\n----------------------------------------\n\nTITLE: Configuring Favicon Paths in Next.js Layout (TSX)\nDESCRIPTION: This snippet shows the 'icons' object within the Next.js root layout file (`app/layout.tsx`). It defines paths to various favicon files used by the application. Update these paths if you change the location, names, or sizes of your favicon images.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/branding_environment_variables_setup_project_configuration_21.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nicons: {\n  icon: '/assets/images/favicon/favicon.ico',\n  shortcut: '/shortcut-icon.png',\n  apple: '/assets/images/favicon/apple-touch-icon.png',\n  other: {\n    rel: 'apple-touch-icon-precomposed',\n    url: '/apple-touch-icon-precomposed.png'\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Makerkit Analytics Plugins via CLI\nDESCRIPTION: Uses the Makerkit CLI (`@makerkit/cli`) to install analytics plugins. The user will be prompted to select specific plugins like Google Analytics, PostHog, or Umami from a list.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/google_analytics_provider_posthog_analytics_provider_umami_analytics_provider_88.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpx @makerkit/cli@latest plugins install\n```\n\n----------------------------------------\n\nTITLE: Running Remix Development Server\nDESCRIPTION: Command to start the Remix development server on localhost:3000.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/navigating_codebase_running_the_application_technical_details_78.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Starting Supabase Local Server\nDESCRIPTION: Command to start the Supabase web server locally using Docker, required for the application to connect to the database.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/introduction_migration_from_remix_navigating_codebase_67.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npnpm run supabase:web:start\n```\n\n----------------------------------------\n\nTITLE: Running Cypress in Development Mode\nDESCRIPTION: This command launches Cypress in windowed mode for development and debugging tests.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/ci_tests_running_tests_testing_limitations_12.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm run cypress\n```\n\n----------------------------------------\n\nTITLE: Post-merge Hook Setup\nDESCRIPTION: Commands for creating and configuring a post-merge Git hook to automatically install dependencies\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/supabase_client_clone_repository_common_commands_56.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ntouch .git/hooks/post-merge\n```\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\npnpm i\n```\n\nLANGUAGE: bash\nCODE:\n```\nchmod +x .git/hooks/post-merge\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for UI Package\nDESCRIPTION: Command to add a dependency specifically to the @kit/ui package in the monorepo.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/notifications_plugins_adding_translations_68.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpm add my-package --filter \"@kit/ui\"\n```\n\n----------------------------------------\n\nTITLE: Reinstalling Dependencies After Cleaning\nDESCRIPTION: Command to reinstall project dependencies after cleaning the workspace.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/configuring_supabase_database_webhooks_fly_production_environment_variables_95.md#2025-04-22_snippet_36\n\nLANGUAGE: bash\nCODE:\n```\npnpm i\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Button Label to a Custom Plan - Makerkit (TypeScript)\nDESCRIPTION: This snippet illustrates how to specify a custom button label for a Makerkit billing plan by setting the \\`buttonLabel\\` attribute. The value can be either a translation key or direct string, allowing easy integration with i18n solutions. All other plan fields are required for display and operability within the Makerkit pricing infrastructure.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/api_billing_api_billing_schema_58.md#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n{\n  name: 'Enterprise',\n  id: 'enterprise',\n  paymentType: 'recurring',\n  label: 'common:contactUs',\n  href: '/contact',\n  custom: true,\n  interval: 'month',\n  lineItems: [],\n  buttonLabel: 'common:contactUs',\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Lemon Squeezy API Environment Variables | Bash\nDESCRIPTION: Declares and prepares the required Lemon Squeezy API secrets and store identifiers as environment variables, typically for use in local development via a `.env.local` file. Never commit these to public repository files; set them only in secure, non-versioned locations or CI/CD secrets managers. They are required for API authentication and webhook verification.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/billing_webhooks_credit_based_billing_lemon_squeezy_89.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nLEMON_SQUEEZY_SECRET_KEY=\nLEMON_SQUEEZY_SIGNING_SECRET=\nLEMON_SQUEEZY_STORE_ID=\n```\n\n----------------------------------------\n\nTITLE: Running Stripe CLI\nDESCRIPTION: Command to start the Stripe CLI for handling webhooks in local development.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/navigating_codebase_running_the_application_technical_details_78.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run stripe:listen\n```\n\n----------------------------------------\n\nTITLE: Starting Stripe CLI for Local Webhook Testing\nDESCRIPTION: Command to run the Stripe CLI to forward Stripe webhooks to your local development environment, enabling testing of Stripe integrations locally.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/functions_initializing_project_introduction_85.md#2025-04-22_snippet_32\n\nLANGUAGE: txt\nCODE:\n```\nnpm run stripe:listen\n```\n\n----------------------------------------\n\nTITLE: Installing replace-in-file Package via npm\nDESCRIPTION: This command installs the replace-in-file package, which is used in the automated migration script to update Tailwind CSS classes.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/environment_variables_setup_project_configuration_set_up_emails_9.md#2025-04-22_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nnpm i replace-in-file\n```\n\n----------------------------------------\n\nTITLE: Adding Ngrok Command to package.json\nDESCRIPTION: NPM script configuration for running ngrok to test webhook functionality locally.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/theming_how_to_version_0_6_0_81.md#2025-04-22_snippet_22\n\nLANGUAGE: plaintext\nCODE:\n```\n\"ngrok\": \"npx ngrok http 3000\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up Contact Form Environment Variable\nDESCRIPTION: This snippet shows how to set up an environment variable for the contact form email address in a React Router Supabase application.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/database_webhooks_legal_pages_marketing_pages_64.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nCONTACT_EMAIL=\n```\n\n----------------------------------------\n\nTITLE: Starting InBucket Service with npm\nDESCRIPTION: This snippet provides a command to start the InBucket service for testing emails locally with Docker. It assumes Docker is installed and running on the machine.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/commands_cors_develop_firebase_security_rules_5.md#2025-04-22_snippet_24\n\nLANGUAGE: Bash\nCODE:\n```\nnpm run inbucket:start\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Development Email Settings\nDESCRIPTION: Environment variable configuration for using a custom email provider during local development.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/development_authentication_emails_email_configuration_94.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nEMAIL_SENDER=test@makerkit.dev\nEMAIL_PORT=\nEMAIL_HOST=\nEMAIL_TLS=\nEMAIL_USER=\nEMAIL_PASSWORD=\n```\n\n----------------------------------------\n\nTITLE: Setting Keystatic Path Prefix\nDESCRIPTION: This environment variable defines the path prefix for Keystatic, typically pointing to where the application is located within a monorepo structure.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stepper_components_application_configuration_41.md#2025-04-22_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nKEYSTATIC_PATH_PREFIX=apps/web\n```\n\n----------------------------------------\n\nTITLE: Setting Billing Provider Environment Variable | Bash\nDESCRIPTION: Sets the Lemon Squeezy billing provider as the active configuration for the web application via a shell environment variable. This line should be added to the appropriate environment file or CI/CD system, not .env for production. It is required before running the app for correct billing integration.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/billing_webhooks_credit_based_billing_lemon_squeezy_89.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nVITE_BILLING_PROVIDER=lemon-squeezy\n```\n\n----------------------------------------\n\nTITLE: Pulling Updates from Makerkit Repository\nDESCRIPTION: Command to pull the latest updates from the upstream Makerkit repository into the local repository.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/team_account_sidebar_configuration_configuration_cms_api_92.md#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ngit pull upstream main\n```\n\n----------------------------------------\n\nTITLE: Implementing CardButtonTitle in React\nDESCRIPTION: Shows how to use the CardButtonTitle component to add a title to a card button. This component is typically used within a CardButton.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/app_breadcrumbs_bordered_navigation_menu_card_button_39.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<CardButtonTitle>My Card Title</CardButtonTitle>\n```\n\n----------------------------------------\n\nTITLE: Analyzing Next.js Bundle\nDESCRIPTION: Command to analyze the Next.js bundle size and composition.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/commands_cors_develop_firebase_security_rules_5.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run analyze\n```\n\n----------------------------------------\n\nTITLE: Using HeroTitle Component\nDESCRIPTION: Example of using the HeroTitle component for the main heading in a landing page.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/app_breadcrumbs_bordered_navigation_menu_card_button_39.md#2025-04-22_snippet_27\n\nLANGUAGE: tsx\nCODE:\n```\nimport { HeroTitle } from '@kit/ui/marketing';\n\nfunction LandingPage() {\n  return (\n    <HeroTitle asChild>\n      Welcome to Our App\n    </HeroTitle>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Wildcard Select\nDESCRIPTION: Example of using the wildcard (*) selector to fetch all columns from a table.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/ai_text_editor_cookie_banner_feedback_popup_24.md#2025-04-22_snippet_24\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ClientDataLoader } from '@makerkit/data-loader-supabase-nextjs';\n\n<ClientDataLoader\n  client={client}\n  table=\"organizations\"\n  select=\"*\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Linting the Project with ESLint\nDESCRIPTION: Command to lint and automatically fix code issues using ESLint.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/configuring_supabase_database_webhooks_fly_production_environment_variables_95.md#2025-04-22_snippet_38\n\nLANGUAGE: bash\nCODE:\n```\npnpm run lint:fix\n```\n\n----------------------------------------\n\nTITLE: Creating CardButtonHeader with Custom Display\nDESCRIPTION: Demonstrates the use of CardButtonHeader component, which can contain a title and optionally display an arrow. This example shows how to disable the arrow display.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/app_breadcrumbs_bordered_navigation_menu_card_button_39.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<CardButtonHeader displayArrow={false}>\n  <CardButtonTitle>Header Content</CardButtonTitle>\n</CardButtonHeader>\n```\n\n----------------------------------------\n\nTITLE: Configuring Billing Provider in Makerkit\nDESCRIPTION: Environment variable configuration for selecting the billing provider in Makerkit. This allows developers to choose between Stripe, Lemon Squeezy, or other supported payment gateways.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/lemon_squeezy_metered_usage_one_off_payments_59.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nVITE_BILLING_PROVIDER=stripe # or lemon-squeezy\n```\n\n----------------------------------------\n\nTITLE: Repository Clone Commands\nDESCRIPTION: Commands for cloning the React Native Supabase SaaS Kit repository using either SSH or HTTPS\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/supabase_client_clone_repository_common_commands_56.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:makerkit/react-native-expo-turbo-saas-kit.git\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/makerkit/react-native-expo-turbo-saas-kit\n```\n\n----------------------------------------\n\nTITLE: Managing Supabase Docker Containers\nDESCRIPTION: Commands for managing Supabase Docker containers including checking running containers and stopping them\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/updating_navigation_menu_403_error_actions_contentlayer_stuck_34.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker ps\ndocker kill $(docker ps -q)\nnpm run supabase:stop\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Marketing Page in Next.js\nDESCRIPTION: Example of creating a basic About page component in the marketing site section of a Next.js application. The page automatically inherits the site layout.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_webhooks_locally_using_lemon_squeezy_server_actions_csrf_33.md#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nfunction AboutPage() {\n  return <div>About page</div>;\n}\n\nexport default AboutPage;\n```\n\n----------------------------------------\n\nTITLE: Running Stripe CLI for Webhook Testing\nDESCRIPTION: This bash command runs the Stripe CLI to listen for webhook events, which is useful for testing the Stripe integration locally.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/subscription_permissions_organizations_lemon_squeezy_23.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpm run stripe:listen\n```\n\n----------------------------------------\n\nTITLE: Setting Layout Style via Environment Variables (Bash)\nDESCRIPTION: This Bash snippet configures environment variables to change the Makerkit app's navigation layout from the default sidebar to a header layout. It sets VITE_TEAM_NAVIGATION_STYLE and VITE_USER_NAVIGATION_STYLE to \\\\\"header\\\\\". There are no dependencies aside from system support for environment variables. Inputs are the variable assignments; outputs affect the app's layout style on build/start. Limitation: must be included in the correct .env file or process environment.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/creating_your_own_cms_client_keystatic_wordpress_62.md#2025-04-22_snippet_13\n\nLANGUAGE: Bash\nCODE:\n```\nVITE_TEAM_NAVIGATION_STYLE=header\\nVITE_USER_NAVIGATION_STYLE=header\n```\n\n----------------------------------------\n\nTITLE: Understanding Routing Structure in Next.js\nDESCRIPTION: This TXT representation outlines the default folder and file structure for routing in a Next.js project. The routes are organized into different sections such as site pages, authentication pages, and organization-specific pages. Developers can extend or modify this structure to include additional functionalities like task management pages.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/deploying_production_environment_variables_functions_26.md#2025-04-22_snippet_11\n\nLANGUAGE: TXT\nCODE:\n```\n├── app\n  └── layout.tsx\n\n  └── onboarding\n\n  (site)\n    └── faq\n    └── pricing\n\n  └── auth\n    └── link\n    └── password-reset\n    └── sign-in\n    └── sign-up\n\n  └── invite\n    └── [code]\n      └── page.tsx\n\n  └── dashboard\n    └── [organization]\n      └── page.tsx\n\n      └── settings\n        └── organization\n          └── members\n            └── page.tsx\n            └── invite\n              └── page.tsx\n\n        └── profile\n          └── index\n          └── email\n          └── password\n          └── authentication\n\n        └── subscription\n\n  └── page.tsx\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS Content Paths for TSX and JSX Files\nDESCRIPTION: Extended Tailwind CSS configuration that includes both TSX and JSX file extensions in the content paths for style processing.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/cms_api_cms_creating_your_own_cms_client_42.md#2025-04-22_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\n  content: [\n    '../../packages/ui/src/**/*.{tsx,jsx}',\n    '../../packages/billing/gateway/src/**/*.{tsx,jsx}',\n    '../../packages/features/auth/src/**/*.{tsx,jsx}',\n    '../../packages/features/notifications/src/**/*.{tsx,jsx}',\n    '../../packages/features/admin/src/**/*.{tsx,jsx}',\n    '../../packages/features/accounts/src/**/*.{tsx,jsx}',\n    '../../packages/features/team-accounts/src/**/*.{tsx,jsx}',\n    '../../packages/plugins/testimonial/src/**/*.{tsx,jsx}',\n    '../../packages/plugins/roadmap/src/**/*.{tsx,jsx}',\n    '../../packages/plugins/kanban/src/**/*.{tsx,jsx}',\n    '!**/node_modules',\n  ],\n```\n\n----------------------------------------\n\nTITLE: Running WordPress Docker Container\nDESCRIPTION: Commands to start the WordPress Docker container for development purposes.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/creating_your_own_cms_client_keystatic_wordpress_62.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm run start\n```\n\n----------------------------------------\n\nTITLE: Fixing Contentlayer Issues in Remix Supabase SaaS Kit (Bash)\nDESCRIPTION: This snippet provides a command to downgrade contentlayer and next-contentlayer packages to version 0.3.1 to resolve issues with Contentlayer getting stuck during application startup.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/branding_environment_variables_setup_project_configuration_80.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpm i contentlayer@0.3.1 next-contentlayer@0.3.1\n```\n\n----------------------------------------\n\nTITLE: Creating Input Component Examples\nDESCRIPTION: A demonstration of various input field types including text, email, password, number, telephone, and URL inputs with placeholder text.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/multi_step_forms_page_shadcn_40.md#2025-04-22_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Input } from '@kit/ui/input';\n\nfunction InputDemo() {\n  return (\n    <div className=\"flex flex-col space-y-4\">\n      <Input placeholder=\"Enter your name\" />\n      <Input type=\"email\" placeholder=\"Enter your email\" />\n      <Input type=\"password\" placeholder=\"Enter your password\" />\n      <Input type=\"number\" placeholder=\"Enter your age\" />\n      <Input type=\"tel\" placeholder=\"Enter your phone number\" />\n      <Input type=\"url\" placeholder=\"Enter your website URL\" />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Condition Type for If Component - TypeScript\nDESCRIPTION: Defines the Condition type used by the If component, allowing for any generic value as valid input, and treating standard falsy values as false. Helps enforce type safety and accommodate a broad range of use cases in conditional rendering logic. Dependency: TypeScript type system. Used internally by If component and related render-prop patterns.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/bordered_navigation_menu_card_button_cookie_banner_60.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntype Condition<Value = unknown> = Value | false | null | undefined | 0 | '';\n```\n\n----------------------------------------\n\nTITLE: Installing Package Dependencies in Monorepo\nDESCRIPTION: Commands demonstrating how to properly install dependencies in different packages of the monorepo structure using pnpm filters.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/text_editor_plugin_waitlist_plugin_plugins_98.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# For main app dependencies\npnpm install my-package --filter web\n\n# For a specific package\npnpm install my-package --filter @kit/ui\n```\n\n----------------------------------------\n\nTITLE: Installing OpenAI SDK for Ticket Title Generation\nDESCRIPTION: Command to install the OpenAI SDK in the web package for generating meaningful ticket titles using the OpenAI API.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/building_javascript_widget_1.md#2025-04-22_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\npnpm add --filter web openai\n```\n\n----------------------------------------\n\nTITLE: Setting CMS Client Environment Variable\nDESCRIPTION: Shows how to specify which CMS client to use by setting the CMS_CLIENT environment variable.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stepper_components_application_configuration_61.md#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nCMS_CLIENT=keystatic\n```\n\n----------------------------------------\n\nTITLE: Removing Origin Git Remote in Bash\nDESCRIPTION: Removes the 'origin' remote from the local repository configuration, making it possible to reassign remote sources (e.g., after a fork). Only requires git. Input: executed in terminal, Output: 'origin' remote is deleted from git config.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/initializing_project_introduction_marketing_site_pages_14.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit remote rm origin\n```\n\n----------------------------------------\n\nTITLE: Installing OTP Package in Makerkit\nDESCRIPTION: This bash command provides guidance on installing the OTP package in Makerkit manually, using the `pnpm` package manager. This package facilitates the use of OTP functionalities in a Supabase-integrated environment.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/custom_analytics_provider_google_analytics_provider_posthog_analytics_provider_36.md#2025-04-22_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @kit/otp\n```\n\n----------------------------------------\n\nTITLE: Running Development Server\nDESCRIPTION: Command to start the Next.js development server.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/commands_cors_develop_firebase_security_rules_5.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Creating New Supabase Migration\nDESCRIPTION: Command to create a new migration file for adding support schema to the Supabase database. This will generate a new migration file in the apps/web/supabase/migrations directory.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/database_4.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm --filter web supabase migration new support-schema\n```\n\n----------------------------------------\n\nTITLE: Exporting Data from Firebase Emulator\nDESCRIPTION: Command to export data from the Firebase Emulator for local development and testing purposes.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/setting_up_firebase_custom_fetch_fetching_data_firestore_70.md#2025-04-22_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nnpm run firebase:emulators:export\n```\n\n----------------------------------------\n\nTITLE: Running Tests in CI Environment\nDESCRIPTION: Command for running tests in a CI environment, which handles starting required services, importing test data, executing tests, and then exiting.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/stripe_one_time_payments_stripe_webhooks_ci_tests_73.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Creating Turborepo Package Command\nDESCRIPTION: Command to generate a new package in the Turborepo monorepo structure for the widget component\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/building_javascript_widget_1.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nturbo gen package\n```\n\n----------------------------------------\n\nTITLE: Run Cypress with UI Command\nDESCRIPTION: Command to run Cypress end-to-end tests with the visual UI interface.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/uploading_data_to_storage_writing_data_to_supabase_data_fetching_77.md#2025-04-22_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nnpm run cypress\n```\n\n----------------------------------------\n\nTITLE: Adding Plugin Workspace to package.json\nDESCRIPTION: JSON configuration to add the plugin as a workspace in the package.json file.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/ai_text_editor_cookie_banner_feedback_popup_24.md#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"workspaces\": [\n    \"plugins/feedback-popup\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Running Tests Command for CI Environments\nDESCRIPTION: This command runs all tests in a CI environment, executing Firebase emulators and test scripts.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/ci_tests_running_tests_testing_limitations_12.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Starting Local Supabase Services using PNPM Bash\nDESCRIPTION: Executes the `supabase:web:start` script defined in the project's `package.json` using PNPM. This command starts the Supabase Docker container, loads database migrations, and seeds data for local development. Requires Docker to be running and PNPM installed.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/deploy_production_introduction_5.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\npnpm run supabase:web:start\n```\n\n----------------------------------------\n\nTITLE: Git Command to Update Repository to Latest Version\nDESCRIPTION: Git command for pulling updates from the upstream Makerkit repository, allowing users to get the latest features and fixes while maintaining their customizations.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/initializing_project_introduction_marketing_site_pages_14.md#2025-04-22_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\ngit pull upstream main --allow-unrelated-histories\n```\n\n----------------------------------------\n\nTITLE: Cleaning and Reinstalling Workspace Dependencies\nDESCRIPTION: Commands to clean the workspace and reinstall all dependencies when facing issues with the React Router dev server or module not found errors.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/notifications_plugins_adding_translations_68.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm run clean:workspace\npnpm run clean\npnpm i\n```\n\n----------------------------------------\n\nTITLE: Validating Environment Variables\nDESCRIPTION: Command to validate the generated environment variables before deployment.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/cloudflare_production_environment_variables_supabase_47.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nturbo gen validate-env\n```\n\n----------------------------------------\n\nTITLE: Prettier Configuration for Code Formatting\nDESCRIPTION: Default Prettier configuration settings from package.json to format the codebase. These settings define code style preferences like tab width, quotes, and semicolons that can be customized according to developer preferences.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/uploading_data_to_storage_writing_data_to_supabase_data_fetching_77.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tabWidth\": 2,\n  \"useTabs\": false,\n  \"semi\": true,\n  \"arrowParens\": \"always\",\n  \"parser\": \"typescript\",\n  \"printWidth\": 80,\n  \"singleQuote\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Stop Supabase Local Environment Command\nDESCRIPTION: Command to stop the running local Supabase environment.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/uploading_data_to_storage_writing_data_to_supabase_data_fetching_77.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nnpm run supabase:stop\n```\n\n----------------------------------------\n\nTITLE: Building Sitemap\nDESCRIPTION: Command to generate a sitemap for the application.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/commands_cors_develop_firebase_security_rules_5.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm run sitemap\n```\n\n----------------------------------------\n\nTITLE: Cloning Repository Using Git\nDESCRIPTION: These commands demonstrate how to clone the React Router Supabase SaaS Kit Turbo repository using SSH or HTTPS. It allows developers to set up their local environment to develop applications with the Kit. Choose SSH if your SSH key is set, otherwise use HTTPS.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/going_to_production_clone_repository_code_health_66.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:makerkit/react-router-supabase-saas-kit-turbo\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/makerkit/react-router-supabase-saas-kit-turbo\n```\n\n----------------------------------------\n\nTITLE: Cloning Git Repository using Git CLI\nDESCRIPTION: This command demonstrates how to clone the `remix-firebase-saas-kit` repository from GitHub into a local directory named `my-saas` using the `git clone` command with SSH.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/develop_firebase_security_rules_emails_encrypting_secrets_71.md#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:makerkit/remix-firebase-saas-kit.git my-saas\n```\n\n----------------------------------------\n\nTITLE: Updating Web Branch with Latest Changes\nDESCRIPTION: Commands to split the updated web application into the web-branch and push changes to origin.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/team_account_sidebar_configuration_configuration_cms_api_92.md#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ngit subtree split --prefix=apps/web --branch web-branch\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin web-branch\n```\n\n----------------------------------------\n\nTITLE: Cloning Repository via SSH (Bash)\nDESCRIPTION: Clones the Makerkit Remix Supabase SaaS Kit Turbo repository using the SSH protocol. This requires the user to have an SSH key configured with their GitHub account.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/configuring_supabase_database_webhooks_fly_production_environment_variables_95.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:makerkit/remix-supabase-saas-kit-turbo\n```\n\n----------------------------------------\n\nTITLE: Running the Application in Development Mode\nDESCRIPTION: Command to start the web application in development mode, making it accessible at localhost:3000. This allows viewing of customizations made to colors, logo, and fonts.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/customization_2.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Killing Ports\nDESCRIPTION: Command to kill all ports used by the Makerkit stack.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/commands_cors_develop_firebase_security_rules_5.md#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nnpm run killports\n```\n\n----------------------------------------\n\nTITLE: Cloning Next.js Supabase Repository\nDESCRIPTION: Command for cloning the Next.js Supabase SaaS Kit repository to start a new project.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/user_roles_validating_api_input_zod_development_18.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:makerkit/next-supabase-saas-kit.git my-saas\n```\n\n----------------------------------------\n\nTITLE: Starting Supabase Server\nDESCRIPTION: Command to start the Supabase web server for local development.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/configuring_supabase_database_webhooks_fly_production_environment_variables_95.md#2025-04-22_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\npnpm run supabase:web:start\n```\n\n----------------------------------------\n\nTITLE: Installing Cookie Banner Plugin using CLI\nDESCRIPTION: Command to install the cookie banner plugin using the Makerkit CLI tool.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/ai_text_editor_cookie_banner_feedback_popup_24.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx @makerkit/cli plugins install\n```\n\n----------------------------------------\n\nTITLE: Pulling Updates from Lemon Squeezy Branch in Git\nDESCRIPTION: Command to pull updates from the 'main-ls' branch of the upstream repository.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/commands_cors_develop_firebase_security_rules_5.md#2025-04-22_snippet_44\n\nLANGUAGE: bash\nCODE:\n```\ngit pull upstream main-ls\n```\n\n----------------------------------------\n\nTITLE: Starting the Remix Development Server\nDESCRIPTION: Command to start the Remix development server locally, which will serve the application at localhost:3000.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/functions_initializing_project_introduction_85.md#2025-04-22_snippet_29\n\nLANGUAGE: txt\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Checking Git Username Configuration (Bash)\nDESCRIPTION: Retrieves and displays the locally configured Git username. This is used to verify that the username matches the one registered in the Makerkit GitHub organization for access purposes.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/configuring_supabase_database_webhooks_fly_production_environment_variables_95.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngit config user.username\n```\n\n----------------------------------------\n\nTITLE: Visualizing Remix App Route Structure\nDESCRIPTION: Shows the primary route directories within the `app` folder of the Remix application. It highlights route groups for the internal application home (`home`), marketing pages (`(marketing)`), authentication (`auth`), team joining (`join`), admin panel (`admin`), password updates (`update-password`), and the sitemap (`server-sitemap.xml`).\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/faq_functional_walkthrough_introduction_96.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n```\n- app\n---\n home\n---\n (marketing)\n---\n auth\n---\n join\n---\n admin\n---\n update-password\n---\n server-sitemap.xml\n```\n```\n\n----------------------------------------\n\nTITLE: Git Remote Configuration Commands\nDESCRIPTION: Commands for setting up Git remotes and keeping the repository up to date\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/supabase_client_clone_repository_common_commands_56.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit remote rm origin\ngit remote add upstream git@github.com:makerkit/react-native-expo-turbo-saas-kit\ngit remote add origin <your-repository-url>\ngit pull upstream main\n```\n\n----------------------------------------\n\nTITLE: Cleaning and Reinstalling Dependencies in Next.js Project\nDESCRIPTION: Commands for cleaning workspace and reinstalling dependencies when encountering development server startup issues\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/team_accounts_only_recipes_adding_translations_55.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\npnpm run clean:workspace\npnpm run clean\npnpm i\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server\nDESCRIPTION: Command to start the Next.js development server that will serve the application on localhost:3000.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/initializing_project_introduction_marketing_site_pages_14.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server for React Router Supabase Turbo\nDESCRIPTION: Command to start the development server for the web application using pnpm.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/introduction_migration_from_remix_navigating_codebase_67.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Start the development server\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server\nDESCRIPTION: Command to launch the development server for the project.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/configuring_supabase_database_webhooks_fly_production_environment_variables_95.md#2025-04-22_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Example: Setting Global Git Username (Bash)\nDESCRIPTION: Provides a concrete example of setting the global Git username to 'johndoe'. This command should be adapted with the user's actual GitHub username.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/configuring_supabase_database_webhooks_fly_production_environment_variables_95.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ngit config --global user.username \"johndoe\"\n```\n\n----------------------------------------\n\nTITLE: Importing HomeAccountsList Component in User Home Page (TSX)\nDESCRIPTION: This TSX snippet, intended for `apps/web/app/home/(user)/page.tsx`, imports the `HomeAccountsList` component from a relative path (`./_components/home-accounts-list`). This component is designed to display a list of team accounts associated with the logged-in user.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/realtime_updates_server_components_7.md#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { HomeAccountsList } from './_components/home-accounts-list';\n```\n\n----------------------------------------\n\nTITLE: Adding Umami Package Dependency using pnpm in Bash\nDESCRIPTION: Adds the specific Umami plugin package (`@kit/umami`) as a dev dependency to the `@kit/analytics` workspace using pnpm. This is performed after fetching the plugin via the Makerkit CLI.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/analytics_api_custom_analytics_provider_google_analytics_provider_57.md#2025-04-22_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\npnpm add \"@kit/umami@workspace:*\" --filter \"@kit/analytics\" -D\n```\n\n----------------------------------------\n\nTITLE: Initializing Project with Makerkit CLI (Bash)\nDESCRIPTION: Executes the Makerkit CLI using `npx` to create a new project based on a template. The CLI interactively guides the user through the setup process, including repository creation and dependency installation. Note: This feature is marked as 'coming soon'.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/functions_initializing_project_introduction_85.md#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nnpx @makerkit/cli new\n```\n\n----------------------------------------\n\nTITLE: Stopping All Docker Containers\nDESCRIPTION: Command to kill all running Docker containers. This will stop all Docker containers including Supabase instances, which is useful when you need to force-stop Supabase.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/branding_environment_variables_setup_project_configuration_80.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ndocker kill $(docker ps -q)\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies with pnpm (Bash)\nDESCRIPTION: Installs all necessary project dependencies defined in the pnpm lockfile and package.json files within the monorepo. This command should be run after cloning the repository and after pulling updates.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/configuring_supabase_database_webhooks_fly_production_environment_variables_95.md#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n# Install dependencies\npnpm i\n```\n\n----------------------------------------\n\nTITLE: Documentation Frontmatter Format in MDX\nDESCRIPTION: Example of the frontmatter YAML block used in MDX documentation files to define the title, label, and description of a page. This metadata is used for HTML title tags, sidebar navigation, and meta tags.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/architecture_auth_overview_auth_setup_29.md#2025-04-22_snippet_4\n\nLANGUAGE: mdx\nCODE:\n```\n---\n\ntitle: \"Getting Started with the Makerkit SaaS Starter Kits\"\nlabel: \"Getting Started\"\ndescription: \"Learn how to get started with the Makerkit SaaS Starter Kits\"\n---\n```\n\n----------------------------------------\n\nTITLE: Displaying Home Directory Structure for Internal Dashboard\nDESCRIPTION: This code snippet shows the structure of the home directory, which contains the internal dashboard pages for both user and account-specific routes.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/llms_migration_from_makerkit_v1_navigating_codebase_49.md#2025-04-22_snippet_21\n\nLANGUAGE: markdown\nCODE:\n```\n```\n---\n home\n---\n---\n (user)\n---\n---\n [account]\n```\n```\n\n----------------------------------------\n\nTITLE: Generating Course Documentation\nDESCRIPTION: Command to generate markdown files for course documentation in the dist folder.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnode index.js courses\n```\n\n----------------------------------------\n\nTITLE: Installing Node Dependencies\nDESCRIPTION: Command to install the required Node.js dependencies for the project using npm.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/develop_firebase_security_rules_emails_encrypting_secrets_71.md#2025-04-22_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Cloning the Makerkit Turbo Repository using Git Bash\nDESCRIPTION: Clones the `next-supabase-saas-kit-turbo` repository from GitHub using Git via SSH. This command downloads the project source code to the local machine. Requires Git installed and SSH configured with GitHub.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/courses/deploy_production_introduction_5.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:makerkit/next-supabase-saas-kit-turbo.git\n```\n\n----------------------------------------\n\nTITLE: Using Supabase Browser Client with React Hook\nDESCRIPTION: This deprecated code demonstrates how to use the useSupabase hook to access the Supabase client in browser environments. This approach is for older versions of the kit and will be removed in future versions.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/csrf_protection_react_query_route_handlers_43.md#2025-04-22_snippet_24\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSupabase } from '@kit/supabase/hooks/use-supabase';\n\nexport default function Home() {\n  const supabase = useSupabase()\n\n  return (\n    <div>\n      <h1>Supabase Browser Client</h1>\n      <button onClick={() => supabase.auth.signOut()}>Sign Out</button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Supabase Environment Output\nDESCRIPTION: Example output showing the connection details and security keys when starting the Supabase environment.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/validating_api_input_zod_development_clone_repository_31.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n> supabase start\n\nApplying migration 20221215192558_schema.sql...\nSeeding data supabase/seed.sql...\nStarted supabase local development setup.\n\n         API URL: http://localhost:54321\n          DB URL: postgresql://postgres:postgres@localhost:54322/postgres\n      Studio URL: http://localhost:54323\n    Inbucket URL: http://localhost:54324\n      JWT secret: super-secret-jwt-token-with-at-least-32-characters-long\n        anon key: ****************************************************\nservice_role key: ****************************************************\n```\n\n----------------------------------------\n\nTITLE: Test User Credentials\nDESCRIPTION: Default test credentials for initial login.\nSOURCE: https://github.com/sahilpanhotra/makerkitdocs.git/blob/main/mdDocs/kits/validating_api_input_zod_development_clone_repository_31.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nemail = test@makerkit.dev\npassword = testingpassword\n```"
  }
]