[
  {
    "owner": "ogyeet10",
    "repo": "animejs-docs",
    "content": "TITLE: Importing and Using the animate() Method in Anime.js\nDESCRIPTION: Basic syntax for importing and using the animate() method from Anime.js to create animations. The example shows how to target elements and define animation parameters.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimation.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate } from 'animejs';\n\nconst animation = animate(targets, parameters);\n```\n\n----------------------------------------\n\nTITLE: Installing Anime.js with NPM\nDESCRIPTION: This snippet demonstrates how to install Anime.js using NPM, a package manager for JavaScript. This approach is commonly used in projects that utilize bundlers like Vite or esbuild for module management.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationgetting-startedinstallation.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install animejs\n```\n\n----------------------------------------\n\nTITLE: Basic Anime.js Animation Configuration\nDESCRIPTION: Demonstrates the basic structure of an Anime.js animation configuration using a CSS selector target. Shows various animation properties including translation, scaling, opacity, duration, delay, easing, looping, and callback functions.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationtargets.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nanimate(\n'.square',\n{\n  translateX: 100,\n  scale: 2,\n  opacity: .5,\n  duration: 400,\n  delay: 250,\n  ease: 'out(3)',\n  loop: 3,\n  alternate: true,\n  autoplay: false,\n  onBegin: () => {},\n  onLoop: () => {},\n  onUpdate: () => {},\n});\n```\n\n----------------------------------------\n\nTITLE: Manipulating Timeline in Anime.js\nDESCRIPTION: Shows how to create a timeline with default settings and add multiple animations to it. The example demonstrates using labels, adding animations with different positions, and chaining timeline methods.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimeline.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTimeline } from 'animejs';\n\nconst tl = createTimeline({ defaults: { duration: 750 } });\n\ntl.label('start')\n  .add('.square', { x: '15rem' }, 500)\n  .add('.circle', { x: '15rem' }, 'start')\n  .add('.triangle', { x: '15rem', rotate: '1turn' }, '<-=500');\n```\n\n----------------------------------------\n\nTITLE: Using Anime.js ES6 Modules from local file\nDESCRIPTION: This code shows how to import Anime.js as an ES6 module after downloading the library directly from GitHub and placing it in your project directory. The script tag includes the 'type=module' attribute to treat the code as a module.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationgetting-startedinstallation.md#2025-04-18_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  import { animate } from './path/to/anime.esm.min.js';\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using Anime.js Stagger Functionality in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the `stagger` function from Anime.js to create animations where multiple elements move sequentially. The `stagger` function takes a value and optional parameters to determine the start times for the animations of each element. This allows for visually appealing effects where elements animate one after another rather than simultaneously.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationstagger.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { animate, stagger } from 'animejs';\\n\\nanimate('.square', {\\n  x: '17rem',\\n  scale: stagger([1, .1]),\\n  delay: stagger(100),\\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Complex Animations with Keyframes and Property-Specific Parameters\nDESCRIPTION: Example demonstrating how to use the animate() method with keyframes, property-specific parameters, function-based values, easing, looping, and delays. Shows advanced animation configuration options.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimation.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate } from 'animejs';\n\nanimate('span', {\n  // Property keyframes\n  y: [\n    { to: '-2.75rem', ease: 'outExpo', duration: 600 },\n    { to: 0, ease: 'outBounce', duration: 800, delay: 100 }\n  ],\n  // Property specific parameters\n  rotate: {\n    from: '-1turn',\n    delay: 0\n  },\n  delay: (_, i) => i * 50, // Function based value\n  ease: 'inOutCirc',\n  loopDelay: 1000,\n  loop: true\n});\n```\n\n----------------------------------------\n\nTITLE: Comparing WAAPI and JavaScript Animations with Anime.js\nDESCRIPTION: This code demonstrates how to create animations using both the Web Animation API and standard JavaScript approaches in Anime.js. It includes a CPU-blocking timer to showcase how WAAPI animations remain smooth even when the main thread is busy.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationweb-animation-apihardware-accelerated-animations.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate, waapi, createTimer, utils } from 'animejs';\n\nconst [ $block ] = utils.$('.button');\n\nconst waapiAnim = waapi.animate('.waapi.square', {\n  translate: 270,\n  rotate: 180,\n  alternate: true,\n  loop: true,\n  ease: 'cubicBezier(0, 0, .58, 1)',\n});\n\nconst jsAnim = animate('.js.square', {\n  x: 270,\n  rotate: 180,\n  ease: 'cubicBezier(0, 0, .58, 1)',\n  alternate: true,\n  loop: true,\n});\n\nconst blockCPUTimer = createTimer({\n  onUpdate: () => {\n    const end = Date.now() + 100;\n    while(Date.now() < end) {\n      Math.random() * Math.random();\n    }\n  },\n  autoplay: false\n});\n\nlet isBusy = false;\n\nconst toggleCPU = () => {\n  blockCPUTimer[isBusy ? 'pause' : 'play']();\n  $block.innerText = (isBusy ? 'block' : 'free') + ' CPU';\n  isBusy = !isBusy;\n}\n\n$block.addEventListener('click', toggleCPU);\n```\n\n----------------------------------------\n\nTITLE: Configuring Animation Callbacks in Anime.js\nDESCRIPTION: This snippet demonstrates how to set up various animation callbacks in Anime.js. It includes settings for animation properties like duration, delay, easing, and looping, along with placeholder callback functions.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-callbacks.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nanimate('.square', {\n  translateX: 100,\n  scale: 2,\n  opacity: .5,\n  duration: 400,\n  delay: 250,\n  ease: 'out(3)',\n  loop: 3,\n  alternate: true,\n  autoplay: false,\n  onBegin: () => {},\n  onLoop: () => {},\n  onUpdate: () => {},\n});\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for AnimeJS Animation Demo\nDESCRIPTION: HTML structure showing the target elements for the animation example. Contains a container with multiple nested square elements that will be animated.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationtargetsdom-elements.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"selector-demo\">\n  <div class=\"medium row\">\n    <div class=\"square\"></div>\n  </div>\n  <div class=\"medium row\">\n    <div class=\"square\"></div>\n  </div>\n  <div class=\"medium row\">\n    <div class=\"square\"></div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: React Component with Anime.js Integration\nDESCRIPTION: This React component utilizes Anime.js to animate a logo. It imports necessary modules from both Anime.js and React, including animate, createScope, createSpring, createDraggable, useEffect, useRef, and useState. The useEffect hook sets up the Anime.js scope and animations. A click handler demonstrates triggering animations defined within the scope.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationgetting-startedusing-with-react.md#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { animate, createScope, createSpring, createDraggable } from 'animejs';\nimport { useEffect, useRef, useState } from 'react';\nimport reactLogo from './assets/react.svg';\nimport './App.css';\n\nfunction App() {\n  const root = useRef(null);\n  const scope = useRef(null);\n  const [ rotations, setRotations ] = useState(0);\n\n  useEffect(() => {\n  \n    scope.current = createScope({ root }).add( scope => {\n    \n      // Every anime.js instances declared here are now scopped to <div ref={root}>\n\n      // Created a bounce animation loop\n      animate('.logo', {\n        scale: [\n          { to: 1.25, ease: 'inOut(3)', duration: 200 },\n          { to: 1, ease: createSpring({ stiffness: 300 }) }\n        ],\n        loop: true,\n        loopDelay: 250,\n      });\n      \n      // Make the logo draggable around its center\n      createDraggable('.logo', {\n        container: [0, 0, 0, 0],\n        releaseEase: createSpring({ stiffness: 200 })\n      });\n\n      // Register function methods to be used outside the useEffect\n      scope.add('rotateLogo', (i) => {\n        animate('.logo', {\n          rotate: i * 360,\n          ease: 'out(4)',\n          duration: 1500,\n        });\n      });\n\n    });\n\n    // Properly cleanup all anime.js instances declared inside the scope\n    return () => scope.current.revert()\n\n  }, []);\n\n  const handleClick = () => {\n    const i = rotations + 1;\n    setRotations(i);\n    // Animate logo rotation on click using the method declared inside the scope\n    scope.current.methods.rotateLogo(i);\n  };\n\n  return (\n    <div ref={root}>\n      <div className=\"large centered row\">\n        <img src={reactLogo} className=\"logo react\" alt=\"React logo\" />\n      </div>\n      <div className=\"medium row\">\n        <fieldset className=\"controls\">\n        <button onClick={handleClick}>rotations: {rotations}</button>\n        </fieldset>\n      </div>\n    </div>\n  )\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Reverse Animation with Anime.js\nDESCRIPTION: Creates an animation that moves squares horizontally with a staggered delay, and implements a reverse function triggered by a button click. The animation uses the inOutSine easing function and can be reversed through a click event listener.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-methodsreverse.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate, utils, stagger } from 'animejs';\n\nconst [ $reverseButton ] = utils.$('.reverse');\n\nconst animation = animate('.square', {\n  x: '17rem',\n  ease: 'inOutSine',\n  delay: stagger(100),\n});\n\nconst reverseAnimation = () => animation.reverse();\n\n$reverseButton.addEventListener('click', reverseAnimation);\n```\n\n----------------------------------------\n\nTITLE: Importing Anime.js methods as ES6 modules\nDESCRIPTION: This code snippet shows how to import specific Anime.js methods as ES6 modules. This is necessary when using Anime.js with bundlers like Vite or esbuild after installing it via NPM.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationgetting-startedinstallation.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate } from 'animejs';\n```\n\n----------------------------------------\n\nTITLE: Importing Anime.js using ES Modules\nDESCRIPTION: Shows how to import Anime.js modules using ES Modules syntax with the import statement. This method is suitable for modern JavaScript environments that support module syntax.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationgetting-startedimports.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {\n  animate,\n  createTimeline,\n  createTimer,\n  // ...other methods\n} from 'animejs';\n```\n\n----------------------------------------\n\nTITLE: Comparing WAAPI and JavaScript Animations in Anime.js\nDESCRIPTION: Demonstrates side-by-side comparison of WAAPI animation versus JavaScript animation using Anime.js. The WAAPI example uses hardware acceleration to animate CSS properties, while the JavaScript example manipulates object data with more control options and renders the values to the DOM.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationweb-animation-apiwhen-to-use-waapi.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate, waapi, utils } from 'animejs';\n\n// WAAPI Animation\n\nwaapi.animate('.waapi.square', {\n  x: '17rem',\n  rotate: 180,\n  loop: 3,\n  alternate: true,\n});\n\n// JS Animation\n\nconst data = { x: '0rem', rotate: '0deg' }\nconst [ $log ] = utils.$('code');\n\nanimate(data, {\n  x: 17,\n  rotate: 180,\n  modifier: utils.round(0),\n  loop: 3,\n  alternate: true,\n  onRender: () => $log.innerHTML = JSON.stringify(data)\n});\n```\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"medium row\">\n  <div class=\"square waapi\"></div>\n</div>\n<div class=\"small row\"></div>\n<pre class=\"medium centered row\">\n  <code>{\"x\": '0rem',\"rotate\":\"0deg\"}</code>\n</pre>\n```\n\n----------------------------------------\n\nTITLE: Configuring Draggable Settings in Anime.js\nDESCRIPTION: Example showing how to create a draggable element with custom settings including snap points, axis constraints, container padding, and event handlers. The code demonstrates various configuration options available in the createDraggable() method.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-settings.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncreateDraggable('.square', {\n  x: { snap: 100 },\n  y: { snap: 50 },\n  modifier: utils.wrap(-200, 0),\n  containerPadding: 10,\n  releaseStiffness: 40,\n  releaseEase: 'out(3)',\n  onGrab: () => {},\n  onDrag: () => {},\n  onRelease: () => {},\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Animatable in AnimeJS\nDESCRIPTION: Basic syntax for importing and creating an Animatable instance which can be used to animate properties efficiently.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimatable.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createAnimatable } from 'animejs';\n\nconst animatable = createAnimatable(targets, parameters);\n```\n\n----------------------------------------\n\nTITLE: Animating with Percentage-Based Keyframes in AnimeJS\nDESCRIPTION: Creates an animation using keyframes that define multiple property values at specific percentage points of the animation. The animation will transition between each keyframe based on their percentage positions over the specified duration.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationkeyframes.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nanimate('.square', {\n  keyframes: {\n    '0%'  : { x: 0,   y: 0   },\n    '50%' : { x: 100, y: 100 },\n    '100%': { x: 200, y: 200 },\n  },\n  duration: 3000,\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic AnimeJS Animation in JavaScript\nDESCRIPTION: Demonstrates the basic syntax for creating an animation using AnimeJS. Shows how to initialize an animation with targets and parameters, and lists the available animation properties that can be accessed.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-properties.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst animation = animate(targets, parameters);\n          ┌────────────┐\nanimation.│targets     │\nanimation.│currentTime ├─ Properties\nanimation.│duration    │\n          └────────────┘\n```\n\n----------------------------------------\n\nTITLE: Defining Function-Based Animation Values with AnimeJS\nDESCRIPTION: Example of how to use function-based values in AnimeJS animations. This snippet shows how to access target element attributes, use index and length parameters, and implement random values for various animation properties.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationtween-value-typesfunction-based.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate } from 'animejs';\n\nanimate('.square', {\n  x: $el => /** @type {HTMLElement} */($el).getAttribute('data-x'),\n  y: (_, i) => 50 + (-50 * i),\n  scale: (_, i, l) => (l - i) * .75,\n  rotate: () => utils.random(-360, 360),\n  borderRadius: () => `+=${utils.random(0, 8)}`,\n  duration: () => utils.random(1200, 1800),\n  delay: () => utils.random(0, 400),\n  ease: 'outElastic(1, .5)',\n});\n```\n\n----------------------------------------\n\nTITLE: Anime.js Stagger Grid Animation\nDESCRIPTION: This JavaScript code uses Anime.js to animate a grid of square elements. The `stagger` function is used to delay the animation of each square based on its position in a 11x4 grid. The `animateGrid` function is called repeatedly to create a continuous animation loop.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationstaggerstagger-parametersstagger-grid.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate, stagger } from 'animejs';\n\nconst $squares = utils.$('.square');\n\nfunction animateGrid() {\n  animate($squares, {\n    scale: [\n      { to: [0, 1.25] },\n      { to: 0 }\n    ],\n    boxShadow: [\n      { to: '0 0 1rem 0 currentColor' },\n      { to: '0 0 0rem 0 currentColor' }\n    ],\n    delay: stagger(100, {\n      grid: [11, 4],\n      from: utils.random(0, 11 * 4)\n    }),\n    onComplete: animateGrid\n  });\n}\n\nanimateGrid();\n```\n\n----------------------------------------\n\nTITLE: SVG Shape Morphing Animation Implementation in JavaScript\nDESCRIPTION: Demonstrates how to create an animated morphing effect between two SVG polygons using Anime.js. The code includes a random point generator function and animation setup with recursive calls for continuous morphing.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationsvgmorphto.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate, svg, utils } from 'animejs';\n\nconst [ $path1, $path2 ] = utils.$('polygon');\n\nfunction animateRandomPoints() {\n  // Update the points attribute on #path-2\n  utils.set($path2, { points: generatePoints() });\n  // Morph the points of #path-1 into #path-2\n  animate($path1, {\n    points: svg.morphTo($path2),\n    ease: 'inOutCirc',\n    duration: 500,\n    onComplete: animateRandomPoints\n  });\n}\n\n// Start the animation\nanimateRandomPoints();\n\n// A function to generate random points on #path-2 on each iteration\n// For demo purpose only\nfunction generatePoints() {\n  const total = utils.random(4, 64);\n  const r1 = utils.random(4, 56);\n  const r2 = 56;\n  const isOdd = n => n % 2;\n  let points = '';\n  for (let i = 0, l = isOdd(total) ? total + 1 : total; i < l; i++) {\n    const r = isOdd(i) ? r1 : r2;\n    const a = (2 * Math.PI * i / l) - Math.PI / 2;\n    const x = 152 + utils.round(r * Math.cos(a), 0);\n    const y = 56 + utils.round(r * Math.sin(a), 0);\n    points += `${x},${y} `;\n  }\n  return points;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Timeline Playback Settings in Anime.js\nDESCRIPTION: This example demonstrates how to configure timeline playback settings in the createTimeline() function call. It shows various options including defaults for animations, loop count, alternate direction, autoplay setting, and callback functions.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-playback-settings.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncreateTimeline({\n  defaults: {\n    ease: 'out(3)',\n    duration: 500,\n  },\n  loop: 3,\n  alternate: true,\n  autoplay: false,\n  onBegin: () => {},\n  onLoop: () => {},\n  onUpdate: () => {},\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Animation Duration in AnimeJS\nDESCRIPTION: Demonstrates setting both global and property-specific duration values in an animation configuration. Shows how to animate position and rotation with different durations.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationtween-parametersduration.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate } from 'animejs';\n\nconst animation = animate('.square', {\n  x: '17rem',\n  rotate: {\n    to: 360,\n    duration: 1500, // Local duration only applied to rotate property\n  },\n  duration: 3000,  // Global duration applied to all properties\n  loop: true,\n  alternate: true\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Bounce Animation Loop\nDESCRIPTION: This snippet demonstrates creating a looping bounce animation using Anime.js's `animate` function.  It targets elements with the class `.logo.js` and animates their `scale` property with custom easing functions and durations. The animation loops indefinitely with a specified delay.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationgetting-startedusing-with-vanilla-js.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Created a bounce animation loop\nanimate('.logo.js', {\n  scale: [\n    { to: 1.25, ease: 'inOut(3)', duration: 200 },\n    { to: 1, ease: createSpring({ stiffness: 300 }) }\n  ],\n  loop: true,\n  loopDelay: 250,\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Animation Values in Anime.js\nDESCRIPTION: Demonstrates different ways to specify animation values in Anime.js including direct values, function-based values, relative values, and property objects with 'from' values.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationtween-value-types.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nanimate('.square', {\n  x: '6rem', \n  y: $el => $el.dataset.y, \n  scale: '+=.25', \n  opacity: {\n    from: .4, \n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Global Default Duration in AnimeJS\nDESCRIPTION: Code showing how to change the default animation duration globally by updating the engine.defaults object. This affects all animations that don't specify a duration.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-playback-settingsduration.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { engine } from 'animejs';\nengine.defaults.duration = 500;\n```\n\n----------------------------------------\n\nTITLE: Importing and Using the WAAPI Version of Anime.js\nDESCRIPTION: Shows how to import and use the Web Animation API (WAAPI) powered version of Anime.js, which is more lightweight (3KB) compared to the standard JavaScript version (10KB).\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimation.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { waapi } from 'animejs';\n\nconst animation = waapi.animate(targets, parameters);\n```\n\n----------------------------------------\n\nTITLE: Creating a Timeline in Anime.js\nDESCRIPTION: Demonstrates how to import and create a timeline using the createTimeline function from Anime.js. The timeline can be used to synchronize animations, timers, and functions.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimeline.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTimeline } from 'animejs';\n\nconst timeline = createTimeline(parameters);\n```\n\n----------------------------------------\n\nTITLE: Animating Elements with Scroll-based Autoplay - JavaScript/Anime.js\nDESCRIPTION: This JavaScript snippet utilizes Anime.js to animate a square element's position and rotation based on scrolling within a specified container. The animation links its progress to the scroll position with a smooth easing effect, providing dynamic feedback to the user's scrolling action.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscrollscrollobserver-synchronisation-modessmooth-scroll.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { animate, onScroll } from 'animejs';\n\nanimate('.square', {\n  x: '15rem',\n  rotate: '1turn',\n  ease: 'linear',\n  autoplay: onScroll({\n    container: '.scroll-container',\n    enter: 'bottom-=50 top',\n    leave: 'top+=60 bottom',\n    sync: .25,\n    debug: true,\n  })\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Labels to AnimeJS Timeline in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a timeline and add labels at specific time positions. It then uses these labels to add animations to different elements at the labeled positions.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-methodslabel.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTimeline } from 'animejs';\n\nconst tl = createTimeline()\n.label('circle', 0)\n.label('square', 500)\n.label('triangle', 1000)\n.add('.square', {\n  x: '17rem',\n  duration: 500,\n}, 'square')\n.add('.circle', {\n  x: '13rem',\n  duration: 1000,\n}, 'circle')\n.add('.triangle', {\n  x: '15rem',\n  rotate: '1turn',\n  duration: 500,\n}, 'triangle');\n```\n\n----------------------------------------\n\nTITLE: Complex Keyframe Animation with Multiple Properties - JavaScript\nDESCRIPTION: Shows a comprehensive example of keyframe animation with multiple properties including translation, scaling, and rotation. Includes various animation parameters like duration, easing, and looping.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationkeyframestween-values-keyframes.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nanimate('.square', {\n  translateX: ['0rem', 0, 17, 17, 0, 0],\n  translateY: ['0rem', -2.5, -2.5, 2.5, 2.5, 0],\n  scale: [1, 1, .5, .5, 1, 1],\n  rotate: { to: 360, ease: 'linear' },\n  duration: 3000,\n  ease: 'inOut', // ease applied between each keyframes if no ease defined\n  playbackEase: 'ouIn(5)', // ease applied accross all keyframes\n  loop: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Timeline with Various Position Types in Anime.js\nDESCRIPTION: This example demonstrates how to create an Anime.js timeline with different time position strategies. It creates a timeline with labeled positions, absolute positioning (at 500ms), label-based positioning ('start'), and relative positioning ('<-=250') for different elements.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetime-position.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTimeline } from 'animejs';\n\nconst tl = createTimeline()\n.label('start', 0)\n.add('.square', {\n  x: '15rem',\n  duration: 500,\n}, 500)\n.add('.circle', {\n  x: '15rem',\n  duration: 500,\n}, 'start')\n.add('.triangle', {\n  x: '15rem',\n  rotate: '1turn',\n  duration: 500,\n}, '<-=250');\n```\n\n----------------------------------------\n\nTITLE: Using onBegin Callback in Anime.js Animation\nDESCRIPTION: This code snippet shows how to create an animation using Anime.js and implement the onBegin callback. The callback updates a DOM element with the animation's 'began' status when it starts.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-callbacksonbegin.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate, utils } from 'animejs';\n\nconst [ $value ] = utils.$('.value');\n\nconst animation = animate('.circle', {\n  x: '16rem',\n  delay: 1000, // Delays the onBegin() callback by 1000ms\n  onBegin: self => $value.textContent = self.began\n});\n```\n\n----------------------------------------\n\nTITLE: Using onComplete Callback in Anime.js Animation\nDESCRIPTION: Shows how to implement the onComplete callback in an Anime.js animation. This example creates an animation that moves an element with class 'circle', loops twice with alternating direction, and updates text content when the animation completes.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-callbacksoncomplete.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate, utils } from 'animejs';\n\nconst [ $value ] = utils.$('.value');\n\nconst animation = animate('.circle', {\n  x: '16rem',\n  delay: 500,\n  loop: 2,\n  alternate: true,\n  onComplete: self => $value.textContent = self.completed\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Complex Keyframe Animation with Anime.js\nDESCRIPTION: Demonstrates creating a complex animation sequence using keyframes in Anime.js. The animation includes multiple properties (x, y, scale, rotate) with individual timing, easing, and delay parameters for each keyframe. The animation is set to loop with a total duration of 3000ms.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationkeyframestween-parameters-keyframes.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate } from 'animejs';\n\nanimate('.square', {\n  x: [\n    { to: '17rem', duration: 700, delay: 400 },\n    { to: 0, duration: 700, delay: 800 },\n  ],\n  y: [\n    { to: '-2.5rem', ease: 'out', duration: 400 },\n    { to: '2.5rem', duration: 800, delay: 700 },\n    { to: 0, ease: 'in', duration: 400, delay: 700 },\n  ],\n  scale: [\n    { to: .5, duration: 700, delay: 400 },\n    { to: 1, duration: 700, delay: 800 },\n  ],\n  rotate: { to: 360, ease: 'linear' },\n  duration: 3000,\n  ease: 'inOut', // ease applied between each keyframes if no ease defined\n  playbackEase: 'ouIn(5)', // ease applied accross all keyframes\n  loop: true,\n});\n```\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"medium row\">\n  <div class=\"square\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Adding Animations and Timers to Anime.js Timeline\nDESCRIPTION: This example demonstrates how to create a timeline and add labels, timers, and animations to it. It shows how to reference labels as position markers and update DOM elements during animation.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-methodsadd.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTimeline, utils } from 'animejs';\n\nconst [ $value ] = utils.$('.value');\n\nconst tl = createTimeline()\n// Add labels\n.label('start timer 1', 0)\n.label('animate circle', 1000)\n.label('start timer 2', 2000)\n// Add Timer\n.add({\n  duration: 1000,\n  onUpdate: self => $value.innerHTML = self.currentTime,\n}, 'start timer 1')\n// Add Animation\n.add('.circle', {\n  duration: 2000,\n  x: '16rem',\n}, 'animate circle')\n// Add Timer\n.add({\n  duration: 1000,\n  onUpdate: self => $value.innerHTML = self.currentTime,\n}, 'start timer 2');\n```\n\n----------------------------------------\n\nTITLE: Comparing AnimeJS WAAPI adapter with native Web Animation API\nDESCRIPTION: This code snippet compares the syntax of AnimeJS's WAAPI adapter with the equivalent native Web Animation API implementation. While AnimeJS uses 'loop: 3', the native WAAPI uses 'iterations: 4' to achieve the same effect.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationweb-animation-apiapi-differences-with-native-waapiiterations.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Anime.js\nwaapi.animate('.square', {\n  x: 100,\n  loop: 3\n});\n\n// WAAPI equivalent\nconst targets = document.querySelectorAll('.square');\n\ntargets.forEach(($el, i) => {\n  $el.animate({\n    translate: '100px',\n  }, {\n    fill: 'forwards',\n    duration: 1000,\n    iterations: 4\n  })\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Functions to Timeline in Anime.js\nDESCRIPTION: Demonstrates how to add callback functions to a timeline at specific time positions using the call() method. The example selects DOM elements using utils.$() and updates their innerHTML at different timestamps (0ms, 800ms, and 1200ms).\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinecall-functions.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTimeline, utils } from 'animejs';\n\nconst [ $functionA ] = utils.$('.function-A');\nconst [ $functionB ] = utils.$('.function-B');\nconst [ $functionC ] = utils.$('.function-C');\n\nconst tl = createTimeline()\n.call(() => $functionA.innerHTML = 'A', 0)\n.call(() => $functionB.innerHTML = 'B', 800)\n.call(() => $functionC.innerHTML = 'C', 1200);\n```\n\n----------------------------------------\n\nTITLE: Accessing Animation Methods in Anime.js\nDESCRIPTION: Demonstrates several animation control methods that can be called on an animation instance, including pause(), play(), and restart().\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-methods.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nanimation.pause()\nanimation.play()\nanimation.restart()\n```\n\n----------------------------------------\n\nTITLE: Animating with ScrollObserver in Anime.js - JavaScript\nDESCRIPTION: This JavaScript snippet uses Anime.js to animate elements based on scroll events. It utilizes the ScrollObserver to define callbacks that are triggered at certain scroll positions. The snippet requires Anime.js and targets elements within a specified container on the y-axis. It supports multiple callbacks for handling enter, leave, and update events.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscrollscrollobserver-callbacks.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nanimate('.square', {\n  x: 100,\n  autoplay: onScroll({\n    container: '.container',\n    target: '.section',\n    axis: 'y',\n    enter: 'bottom top',\n    leave: 'top bottom',\n    sync: true,\n    onEnter: () => {},\n    onLeave: () => {},\n    onUpdate: () => {}\n  })\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Animation Playback Settings in AnimeJS\nDESCRIPTION: Example showing how to set various animation properties including playback settings like loop, alternate, and autoplay in an AnimeJS animation. This demonstrates the structure of an animation declaration with highlighted playback settings.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-playback-settings.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nanimate('.square', {\n  translateX: 100,\n  scale: 2,\n  opacity: .5,\n  duration: 400,\n  delay: 250,\n  ease: 'out(3)',\n  loop: 3,          \n  alternate: true,  \n  autoplay: false,  \n  onBegin: () => {},\n  onLoop: () => {},\n  onUpdate: () => {},\n});\n```\n\n----------------------------------------\n\nTITLE: Using Anime.js UMD Modules from local file\nDESCRIPTION: This code shows how to import Anime.js as an UMD module after downloading the library directly from GitHub and placing it in your project directory. The script tag includes the 'type=module' attribute to treat the code as a module.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationgetting-startedinstallation.md#2025-04-18_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  import { animate } from './path/to/anime.esm.min.js';\n</script>\n```\n\n----------------------------------------\n\nTITLE: Defining Animatable Properties in Anime.js\nDESCRIPTION: This code snippet demonstrates how to define animatable properties in Anime.js using the animate() function. The example shows how to animate translateX, scale, and opacity properties along with animation configuration options like duration, delay, easing, looping, and callbacks.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimatable-properties.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nanimate('.square', {\n  translateX: 100,\n  scale: 2,\n  opacity: .5,\n  duration: 400,\n  delay: 250,\n  ease: 'out(3)',\n  loop: 3,\n  alternate: true,\n  autoplay: false,\n  onBegin: () => {},\n  onLoop: () => {},\n  onUpdate: () => {},\n});\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for AnimeJS Getter Demo\nDESCRIPTION: This HTML structure creates the interface for the interactive demonstration. It includes elements to display the x and y coordinates of the circle as it follows mouse movement.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimatableanimatable-methodsgetters.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large row\">\n  <div class=\"col\">\n    <div class=\"large row\">\n      <pre class=\"large log row\">\n        <span class=\"label\">x</span>\n        <span class=\"coords x value\">0</span>\n      </pre>\n    </div>\n  </div>\n  <div class=\"col\" style=\"flex: .25; z-index: 3;\">\n    <div class=\"large centered row\">\n      <div class=\"circle\"></div>\n    </div>\n  </div>\n  <div class=\"col\">\n    <div class=\"large row\">\n      <pre class=\"large log row\">\n        <span class=\"label\">y</span>\n        <span class=\"coords y value\">0</span>\n      </pre>\n    </div>\n  </div>\n</div>\n<div class=\"medium centered row\">\n  <span class=\"label\">Move cursor around</span>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing playbackEase Animation in Anime.js (JavaScript)\nDESCRIPTION: Demonstrates how to animate an element with keyframes while applying a global easing function across all keyframes using the playbackEase parameter. This example creates a looping animation with multiple position, rotation, and scale changes.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-playback-settingsplaybackease.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate } from 'animejs';\n\nanimate('.square', {\n  keyframes: [\n    { y: '-2.5rem', duration: 400 },\n    { x: '17rem', rotate: 180, scale: .5 },\n    { y: '2.5rem' },\n    { x: 0, rotate: 360, scale: 1 },\n    { y: 0, duration: 400 }\n  ],\n  duration: 4000,\n  playbackEase: 'inOut(3)', // this ease is applied accross all keyframes\n  loop: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing onLoop Callback in an Anime.js Timeline\nDESCRIPTION: Demonstrates how to create a timeline with an onLoop callback that increments and displays a counter for each completed loop. The timeline animates three shapes with a loop delay and updates the DOM with the loop count.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-callbacksonloop.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTimeline, utils } from 'animejs';\n\nconst [ $value ] = utils.$('.value');\n\nlet loops = 0;\n\nconst tl = createTimeline({\n  defaults: { duration: 500 },\n  loopDelay: 500,\n  loop: true,\n  onLoop: self => $value.textContent = ++loops\n})\n.add('.circle', { x: '15rem' })\n.add('.triangle', { x: '15rem' })\n.add('.square', { x: '15rem' });\n```\n\n----------------------------------------\n\nTITLE: Animating CSS Variables with Anime.js\nDESCRIPTION: This code demonstrates how to set and animate CSS variables using Anime.js. It shows how to initialize variables including one applied to a pseudo-element, and then animate those variables. The example includes changing border radius, translation, and scaling of a pseudo-element.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimatable-propertiescss-variables.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate, utils } from 'animejs';\n\n// Set the CSS variables as properties on the animated elements\nutils.set('.square', {\n  '--radius': '4px',\n  '--x': '0rem',\n  '--pseudo-el-after-scale': '1', // applied to the pseudo element \"::after\"\n  borderRadius: 'var(--radius)',\n  translateX: 'var(--x)',\n});\n\n// Animate the values of the CSS variables\nanimate('.square', {\n  '--radius': '20px',\n  '--x': '16.5rem',\n  '--pseudo-el-after-scale': '1.55' // Animates the \":after\" pseudo element of the element\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Default for onUpdate Callback in AnimeJS\nDESCRIPTION: This snippet demonstrates how to change the default onUpdate callback globally for all animations using the engine.defaults object in AnimeJS.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-callbacksonupdate.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { engine } from 'animejs';\nengine.defaults.onUpdate = self => console.log(self.id);\n```\n\n----------------------------------------\n\nTITLE: Implementing Timeline.play() Method in Anime.js\nDESCRIPTION: This code snippet demonstrates how to create a timeline with multiple animations and control it using the play() method. It creates a timeline with three animations for different shapes and attaches a click event listener to a play button.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-methodsplay.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTimeline, utils } from 'animejs';\n\nconst [ $playButton ] = utils.$('.play');\n\nconst tl = createTimeline({\n  autoplay: false\n})\n.add('.circle',   { x: '15rem' })\n.add('.triangle', { x: '15rem' }, 500)\n.add('.square',   { x: '15rem' }, 1000);\n\nconst playTimeline = () => tl.play();\n\n$playButton.addEventListener('click', playTimeline);\n```\n\n----------------------------------------\n\nTITLE: Anime.js Stagger Modifier with boxShadow\nDESCRIPTION: This JavaScript snippet demonstrates the use of the stagger modifier in Anime.js to control the box-shadow of multiple elements. It defines a function that modifies the staggered value to generate different box-shadow offsets based on the input value. The animation is set to loop indefinitely.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationstaggerstagger-parametersstagger-modifier.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate, stagger } from 'animejs';\n\nanimate('.square', {\n  boxShadow: [\n    { to: stagger([1, .25], {\n        modifier: v => `0 0 ${v * 30}px ${v * 20}px currentColor`,\n        from: 'center'\n      })\n    },\n    { to: 0 },\n  ],\n  delay: stagger(100, { from: 'center' }),\n  loop: true\n});\n```\n\n----------------------------------------\n\nTITLE: Using seek() Method in Anime.js Animation\nDESCRIPTION: This snippet demonstrates how to use the seek() method in an Anime.js animation. It creates an animation for squares, implements play/pause functionality, and allows seeking to specific times using a range input.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-methodsseek.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate, utils, stagger } from 'animejs';\n\nconst [ $range ] = utils.$('.range');\nconst [ $playPauseButton ] = utils.$('.play-pause');\n\nconst updateButtonLabel = animation => {\n  $playPauseButton.textContent = animation.paused ? 'Play' : 'Pause';\n}\n\nconst animation = animate('.square', {\n  x: '17rem',\n  ease: 'inOutSine',\n  duration: 1750,\n  delay: stagger(250),\n  autoplay: false,\n  onUpdate: self => {\n    $range.value = self.currentTime;\n    updateButtonLabel(self);\n  },\n  onComplete: updateButtonLabel,\n});\n\nconst seekAnimation = () => animation.seek(+$range.value);\n\nconst playPauseAnimation = () => {\n  if (animation.paused) {\n    animation.play();\n  } else {\n    animation.pause();\n    updateButtonLabel(animation);\n  }\n}\n\n$range.addEventListener('input', seekAnimation);\n$playPauseButton.addEventListener('click', playPauseAnimation);\n```\n\n----------------------------------------\n\nTITLE: Anime.js Stagger Example\nDESCRIPTION: This example demonstrates how to use the `stagger` function in Anime.js to create staggered animations. It shows different options for staggering, including `start`, `from`, `reversed`, `ease`, and `grid` parameters.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationstaggerstagger-value-types.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nstagger(\n  /*───────────────────*/\n  '1rem',\n  /*───────────────────*/\n  {\n    start: 100,\n    from: 2,\n    reversed: false,\n    ease: 'outQuad',\n    grid: [8, 8],\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Complete Anime.js Animation with Percentage-based Keyframes\nDESCRIPTION: A comprehensive example showing how to animate an element using percentage-based keyframes with the Anime.js library. It demonstrates multiple keyframes with different properties, custom easing, and animation configuration options.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationkeyframespercentage-based-keyframes.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate } from 'animejs';\n\nanimate('.square', {\n  keyframes: {\n    '0%'  : { x: '0rem', y: '0rem', ease: 'out' },\n    '13%' : { x: '0rem', y: '-2.5rem', },\n    '37%' : { x: '17rem', y: '-2.5rem', scale: .5 },\n    '63%' : { x: '17rem', y: '2.5rem', scale: .5 },\n    '87%' : { x: '0rem', y: '2.5rem', scale: 1 },\n    '100%': { y: '0rem', ease: 'in' }\n  },\n  rotate: { to: 360, ease: 'linear' },\n  duration: 3000,\n  ease: 'inOut', // ease applied between each keyframes if no ease defined\n  playbackEase: 'ouIn(5)', // ease applied accross all keyframes\n  loop: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Animatable Properties in AnimeJS\nDESCRIPTION: Demonstrates how to set both specific and global animation properties using createAnimatable. Shows configuration of unit types, duration, and easing for individual properties as well as global settings.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimatableanimatable-settings.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncreateAnimatable(targets, {\n  x: {\n    unit: 'rem',\n    duration: 400,\n    ease: 'out(4)'\n  },\n  y: 200,\n  rotate: 1000,\n  ease: 'out(2)'\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Draggable Elements with Container Boundaries in Anime.js\nDESCRIPTION: This snippet demonstrates how to create draggable elements with specified container boundaries using Anime.js. It shows two examples: one using a CSS selector to define the container, and another using an array of numerical values.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-settingscontainer.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createDraggable } from 'animejs';\n\ncreateDraggable('.square', {\n  container: '.grid',\n});\n\ncreateDraggable('.circle', {\n  container: [-16, 80, 16, 0],\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Timeline Instance in Anime.js\nDESCRIPTION: Demonstrates how to create a Timeline instance with parameters that provides control over animation timing and progression.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-methods.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst timeline = createTimeline(parameters);\n```\n\n----------------------------------------\n\nTITLE: Animating with Individual Property Parameters using Anime.js WAAPI\nDESCRIPTION: This code demonstrates how to animate multiple properties with individual parameter configurations. Each property can have its own specific to/from values, ease function, and duration while sharing global animation parameters.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationweb-animation-apiimprovements-to-the-web-animation-apiindividual-property-parameters.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nwaapi.animate('.square', {\n  y: {\n    to: [0, -30, 0],\n    ease: 'out(4)',\n    duration: 1000,\n  },\n  rotate: { from: -180, to: 0, ease: 'out(3)' },\n  scale: { to: [.65, 1, .65], ease: 'inOut(3)' },\n  duration: 500,\n  delay: stagger(75),\n  loop: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Various Loop Behaviors in Anime.js\nDESCRIPTION: Shows different ways to implement loop behaviors in Anime.js animations including basic looping with a specified count, looping with alternating direction, looping with reversed animation, and infinite looping. Each example moves an element 17.5rem along the x-axis with different loop configurations.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-playback-settingsloop.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate } from 'animejs';\n\nanimate('.loop', {\n  x: '17.5rem',\n  loop: 3,\n});\n\nanimate('.loop-alternate', {\n  x: '17.5rem',\n  loop: 3,\n  alternate: true,\n});\n\nanimate('.loop-reverse', {\n  x: '17.5rem',\n  loop: 3,\n  reversed: true,\n});\n\nanimate('.loop-infinity', {\n  x: '17.5rem',\n  loop: true, // Or Infinity\n});\n```\n\n----------------------------------------\n\nTITLE: Using Anime.js Global Object from local file\nDESCRIPTION: This snippet demonstrates how to use Anime.js as a global object after downloading the library and including it in your HTML. It accesses the animate function from the global anime object.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationgetting-startedinstallation.md#2025-04-18_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"path/to/anime.iife.min.js\"></script>\n\n<script>\n  const { animate } = anime;\n</script>\n```\n\n----------------------------------------\n\nTITLE: Animating CSS Transforms with AnimeJS\nDESCRIPTION: Demonstrates two methods of animating CSS transforms using AnimeJS: direct property animation with JavaScript and WAAPI method. Shows how to use individual transform properties and the recommended WAAPI approach for direct transform animations.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimatable-propertiescss-transforms.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate, waapi } from 'animejs';\n\nanimate('.square', {\n  x: '15rem', // TranslateX shorthand\n  scale: 1.25,\n  skew: -45,\n  rotate: '1turn',\n});\n\n// the WAAPI version is recommanded if you want to animate the transform property directly\nwaapi.animate('.square', {\n  transform: 'translateX(15rem) scale(1.25) skew(-45deg) rotate(1turn)',\n});\n```\n\n----------------------------------------\n\nTITLE: Animating SVG Polygon Points with Anime.js\nDESCRIPTION: Example of animating an SVG polygon shape by modifying its points attribute in a looping animation. The animation transitions between different polygon shapes and alternates back and forth.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimatable-propertiessvg-attributes.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nanimate('polygon', {\n  points: '64 68.64 8.574 100 63.446 67.68 64 4 64.554 67.68 119.426 100',\n  alternate: true,\n  loop: true\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Default onRender Callback Globally in Anime.js\nDESCRIPTION: This snippet demonstrates how to set a default onRender callback globally for all Anime.js animations by updating the engine.defaults object.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-callbacksonrender.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { engine } from 'animejs';\nengine.defaults.onRender = self => console.log(self.id);\n```\n\n----------------------------------------\n\nTITLE: Using revert() Method to Cancel and Revert AnimeJS Animations in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a staggered animation with AnimeJS and implement revert() and restart() functionality through button clicks. It imports required functions from AnimeJS, sets up a staggered animation on multiple square elements, and attaches event listeners to buttons that control the animation state.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-methodsrevert.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate, utils, stagger } from 'animejs';\n\nconst [ $revertButton ] = utils.$('.revert');\nconst [ $restartButton ] = utils.$('.restart');\n\n// Set an initial translateX value\nutils.set('.square', { x: '17rem' });\n\nconst animation = animate('.square', {\n  x: 0,\n  alternate: true,\n  ease: 'inOutSine',\n  loop: true,\n  delay: stagger(100),\n});\n\nconst revertAnimation = () => animation.revert();\nconst restartAnimation = () => animation.restart();\n\n$revertButton.addEventListener('click', revertAnimation);\n$restartButton.addEventListener('click', restartAnimation);\n```\n\n----------------------------------------\n\nTITLE: Animating Elements with Function-based Values using Anime.js\nDESCRIPTION: This snippet shows how to use Anime.js to animate multiple '.square' elements with function-based values for translation, rotation, and scaling. It also demonstrates the use of the stagger function for delayed animations.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationweb-animation-apiimprovements-to-the-web-animation-apifunction-based-values.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nwaapi.animate('.square', {\n  translate: () => `${utils.random(10, 17)}rem`,\n  rotate: () => utils.random(-180, 180),\n  scale: (_, i) => .25 + (i * .25),\n  delay: stagger(100)\n});\n```\n\n----------------------------------------\n\nTITLE: Animating Element with Scroll Synchronization using Anime.js in JavaScript\nDESCRIPTION: This snippet demonstrates how to animate an element's properties and synchronize its playback with the scroll position using Anime.js. It utilizes the 'animate' function and 'onScroll' method, with set parameters for scroll tracking and sync. Required dependencies include Anime.js and a scroll container element.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscrollscrollobserver-synchronisation-modesplayback-progress.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { animate, onScroll } from 'animejs';\n\nanimate('.square', {\n  x: '15rem',\n  rotate: '1turn',\n  ease: 'linear',\n  autoplay: onScroll({\n    container: '.scroll-container',\n    enter: 'bottom-=50 top',\n    leave: 'top+=60 bottom',\n    sync: true,\n    debug: true,\n  })\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Global and Local Tween Parameters in Anime.js\nDESCRIPTION: This example demonstrates how to set both global and local tween parameters in an Anime.js animation. Global parameters (duration, delay, ease, loop, alternate) apply to all properties, while local parameters can be defined for specific properties to override the global settings.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationtween-parameters.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nanimate('.square', {\n  x: {\n    to: 100,\n    delay: 0,\n    ease: 'inOut(4)'\n  },\n  scale: 1,\n  opacity: .5,\n  duration: 400,\n  delay: 250,\n  ease: 'out(3)',\n  loop: 3,\n  alternate: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Converting Spring Easing Function to WAAPI Compatible Linear Easing\nDESCRIPTION: Basic example showing how to convert a spring easing function to WAAPI compatible linear easing. It imports the necessary functions from anime.js, creates a spring with specified stiffness, and converts it to a linear easing function for WAAPI.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationweb-animation-apiwaapi-convertease.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { waapi, createSpring } from 'animejs';\n\nconst spring = createSpring({ stiffness: 12 });\n\nconst linearEasing = waapi.convertEase(spring.ease);\n```\n\n----------------------------------------\n\nTITLE: Implementing onBeforeUpdate Callback in AnimeJS Animation\nDESCRIPTION: This example shows how to use the onBeforeUpdate callback in an AnimeJS animation. It animates a circle element, updates a counter, and modifies the animation based on its progress. The callback is executed before each frame update.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-callbacksonbeforeupdate.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate, utils } from 'animejs';\n\nconst [ $value ] = utils.$('.value');\n\nlet mult = 1;\nlet updates = 0;\n\nconst animation = animate('.circle', {\n  x: '16rem',\n  loopDelay: 1500,\n  modifier: v => mult * v,\n  loop: true,\n  alternate: true,\n  onBeforeUpdate: self => {\n    $value.textContent = ++updates;\n    // Update the mult value just before updating the tweens\n    mult = 1 - self.iterationProgress;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Manual Timeline with Playback Control in Anime.js\nDESCRIPTION: Example of creating a timeline with autoplay disabled that requires manual playback control. The code sets up a timeline with animation sequences for multiple elements and adds a click event listener to a play button.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-playback-settingsautoplay.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTimeline, utils } from 'animejs';\n\nconst [ $paused ] = utils.$('.paused');\nconst [ $play ] = utils.$('.play');\n\nconst tl = createTimeline({\n  autoplay: false,\n  onUpdate: self => $paused.innerHTML = !!self.paused,\n  onComplete: self => $paused.innerHTML = !!self.paused\n})\n.add('.circle', { x: '15rem' })\n.add('.triangle', { x: '15rem' }, '-=500')\n.add('.square', { x: '15rem' }, '-=500');\n\nconst playTl = () => tl.paused ? tl.restart() : tl.play();\n\n$play.addEventListener('click', playTl);\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for CSS Variables Animation Demo\nDESCRIPTION: HTML markup showing the structure used for demonstrating CSS variable animations. It consists of three rows, each containing a square element that will be animated using the CSS variables.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimatable-propertiescss-variables.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"medium row\">\n  <div class=\"css-variables square\"></div>\n</div>\n<div class=\"medium row\">\n  <div class=\"css-variables square\"></div>\n</div>\n<div class=\"medium row\">\n  <div class=\"css-variables square\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Applying Stagger Effects with Anime.js in JavaScript\nDESCRIPTION: The JavaScript snippet demonstrates how to apply stagger effects using Anime.js, which includes altering the y-position of elements in a staggered manner with ease functions. Dependencies include Anime.js, and it manipulates DOM elements with the class '.square'. The primary inputs are element selectors and stagger configurations. The result is a smooth animation of movement and delay.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationstaggerstagger-parametersstagger-ease.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { animate, stagger } from 'animejs';\n\nanimate('.square', {\n  y: stagger(['2.75rem', '-2.75rem'], { ease: 'inOut(3)' }),\n  delay: stagger(100, { ease: 'inOut(3)' }),\n});\n```\n\n----------------------------------------\n\nTITLE: Creating and Adding Animations to a Timeline in AnimeJS\nDESCRIPTION: Code example that demonstrates creating a timeline in AnimeJS and using both sync() and add() methods to add animations. This showcases how to create external animations and synchronize them with a timeline as well as adding animations directly to a timeline with various parameters.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelineadd-animations.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTimeline, animate } from 'animejs';\n\nconst circleAnimation = animate('.circle', {\n  x: '15rem'\n});\n\nconst tl = createTimeline()\n.sync(circleAnimation)\n.add('.triangle', {\n  x: '15rem',\n  rotate: '1turn',\n  duration: 500,\n  alternate: true,\n  loop: 2,\n})\n.add('.square', {\n  x: '15rem',\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Timeline Reverse Animation with Anime.js\nDESCRIPTION: Creates an animation timeline with sequential animations for multiple elements and implements a reverse functionality triggered by a button click. The timeline animates circle, triangle, and square elements along the x-axis with different delays.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-methodsreverse.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTimeline, utils } from 'animejs';\n\nconst [ $reverseButton ] = utils.$('.reverse');\n\nconst tl = createTimeline()\n.add('.circle',   { x: '15rem' })\n.add('.triangle', { x: '15rem' }, 500)\n.add('.square',   { x: '15rem' }, 1000);\n\nconst reverseTimeline = () => tl.reverse();\n\n$reverseButton.addEventListener('click', reverseTimeline);\n```\n\n----------------------------------------\n\nTITLE: Implementing Motion Path Animation with Anime.js\nDESCRIPTION: Demonstrates how to animate an element along a motion path using Anime.js, including both the element animation and path drawing animation.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationsvgcreatemotionpath.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate, svg } from 'animejs';\n\n// Animate the transforms properties of .car the motion path values\nconst carAnimation = animate('.car', {\n  ease: 'linear',\n  duration: 5000,\n  loop: true,\n  ...svg.createMotionPath('path')\n});\n\n// Line drawing animation following the motion path values\n// For demo aesthetic only\nanimate(svg.createDrawable('path'), {\n  draw: '0 1',\n  ease: 'linear',\n  duration: 5000,\n  loop: true\n});\n```\n\n----------------------------------------\n\nTITLE: Using Anime.js with Async/Await\nDESCRIPTION: Shows how to use Anime.js animations with async/await pattern. The function returns the animation which can be awaited to continue execution after completion.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationweb-animation-apiapi-differences-with-native-waapifinished.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nasync function waitForAnimationToComplete() {\n  return animate(target, {\n    translate: '100px',\n    duration: 500,\n  });\n}\n\nconst asyncAnimation = await waitForAnimationToComplete();\n```\n\n----------------------------------------\n\nTITLE: Animating Elements with Scroll Observer in Anime.js\nDESCRIPTION: This snippet imports essential functions from the Anime.js library and uses the animate function to animate elements with the class '.square'. The animations are triggered by scroll events, defined by the minimum and maximum thresholds for entering and leaving the viewport.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscrollscrollobserver-thresholdsmin-max.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate, onScroll, utils } from 'animejs';\n\nutils.$('.square').forEach($square => {\n  animate($square, {\n    x: '15rem',\n    rotate: '1turn',\n    duration: 2000,\n    alternate: true,\n    ease: 'inOutQuad',\n    autoplay: onScroll({\n      container: '.scroll-container',\n      sync: 1,\n      enter: 'max bottom',\n      leave: 'min top',\n      debug: true\n    })\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Anime.js Pause Demo\nDESCRIPTION: HTML structure for demonstrating the pause functionality in Anime.js. It includes square elements that will be animated and a pause button to control the animation.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-methodspause.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"medium row\">\n  <div class=\"square\"></div>\n</div>\n<div class=\"medium row\">\n  <div class=\"square\"></div>\n</div>\n<div class=\"medium row\">\n  <fieldset class=\"controls\">\n    <button class=\"button pause\">Pause</button>\n  </fieldset>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using Timeline cancel() Method with AnimeJS\nDESCRIPTION: Demonstrates how to create a timeline with multiple animations and implement cancel functionality. The code creates a timeline that animates three shapes, then sets up event handlers for cancel and play buttons.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-methodscancel.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTimeline, utils } from 'animejs';\n\nconst [ $cancelButton ] = utils.$('.cancel');\nconst [ $playButton ] = utils.$('.play');\n\nconst tl = createTimeline({\n  loop: true,\n  alternate: true,\n})\n.add('.circle',   { x: '15rem' })\n.add('.triangle', { x: '15rem' }, 500)\n.add('.square',   { x: '15rem' }, 1000);\n\nconst cancelTimeline = () => tl.cancel();\nconst playTimeline = () => tl.play();\n\n$cancelButton.addEventListener('click', cancelTimeline);\n$playButton.addEventListener('click', playTimeline);\n```\n\n----------------------------------------\n\nTITLE: Creating Looped Timeline Animation\nDESCRIPTION: Demonstrates creating a timeline animation with infinite loops and a loop counter callback. The animation moves three shapes sequentially with overlapping timing.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-playback-settingsloop.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTimeline, utils } from 'animejs';\n\nconst [ $loops ] = utils.$('.loops');\n\nlet loops = 0;\n\nconst tl = createTimeline({\n  loop: true,\n  onLoop: self => $loops.innerHTML = ++loops,\n})\n.add('.circle', { x: '15rem' })\n.add('.triangle', { x: '15rem' }, '-=500')\n.add('.square', { x: '15rem' }, '-=500');\n```\n\n----------------------------------------\n\nTITLE: Creating Motion Path Parameters in Anime.js\nDESCRIPTION: Creates pre-defined Tween parameter objects that animate along an SVG path's coordinates and inclination, returning translateX, translateY, and rotate properties.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationsvgcreatemotionpath.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { translateX, translateY, rotate } = svg.createMotionPath(path);\n```\n\n----------------------------------------\n\nTITLE: Using Anime.js from CDN as Global object\nDESCRIPTION: This snippet shows how to include Anime.js from a CDN as a global object. This approach makes Anime.js functions available directly in the global scope.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationgetting-startedinstallation.md#2025-04-18_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/animejs@4.0.0/lib/anime.iife.min.js\"></script>\n\n<script>\n  const { animate } = anime;\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Staggered Timeline Animations with Anime.js\nDESCRIPTION: This example demonstrates how to use the stagger function in Anime.js to position animations with consistent delays between targets. It creates a timeline with staggered animations that include callbacks which are also staggered for each target.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationstaggertimeline-positions-staggering.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTimeline, stagger, utils } from 'animejs';\n\nconst tl = createTimeline();\n\nconst onComplete = ({ targets }) => {\n  utils.set(targets, { color: 'var(--hex-red)' });\n}\n\ntl\n.add('.circle', { x: '15rem', onComplete })\n.label('circle completes')\n.add(['.triangle', '.square'], {\n  x: '15rem',\n  onComplete, // Callbacks are aslo staggered\n}, stagger(500, { start: 'circle completes-=500' }));\n```\n\n----------------------------------------\n\nTITLE: Using Animatable with Mouse Movement in AnimeJS\nDESCRIPTION: A complete example demonstrating how to use Animatable to create smooth animations that follow mouse movement. The snippet creates an animatable square that responds to cursor position with customized easing and duration.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimatable.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createAnimatable, utils } from 'animejs';\n\nconst $demos = document.querySelector('#docs-demos');\nconst $demo = $demos.querySelector('.docs-demo.is-active');\n\nlet bounds = $demo.getBoundingClientRect();\nconst refreshBounds = () => bounds = $demo.getBoundingClientRect();\n\nconst animatableSquare = createAnimatable('.square', {\n  x: 500, // Define the x duration to be 500ms\n  y: 500, // Define the y duration to be 500ms\n  ease: 'out(3)',\n});\n\nconst onMouseMove = e => {\n  const { width, height, left, top } = bounds;\n  const hw = width / 2;\n  const hh = height / 2;\n  const x = utils.clamp(e.clientX - left - hw, -hw, hw);\n  const y = utils.clamp(e.clientY - top - hh, -hh, hh);\n  animatableSquare.x(x); // Animate the x value in 500ms\n  animatableSquare.y(y); // Animate the y value in 500ms\n}\n\nwindow.addEventListener('mousemove', onMouseMove);\n$demos.addEventListener('scroll', refreshBounds);\n```\n\n----------------------------------------\n\nTITLE: Animating SVG Filter Effects with Anime.js\nDESCRIPTION: Example of animating SVG filter elements (feTurbulence and feDisplacementMap) by changing their baseFrequency and scale properties in a looping animation. This creates a dynamic displacement effect that alternates.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimatable-propertiessvg-attributes.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate } from 'animejs';\n\nanimate(['feTurbulence', 'feDisplacementMap'], {\n  baseFrequency: .05,\n  scale: 15,\n  alternate: true,\n  loop: true\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing onUpdate Callback in AnimeJS Animation\nDESCRIPTION: This code creates an animation using AnimeJS, with an onUpdate callback that updates a DOM element's text content on each frame. It also demonstrates importing utilities and setting up loop and alternate options.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-callbacksonupdate.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate, utils } from 'animejs';\n\nconst [ $value ] = utils.$('.value');\n\nlet updates = 0;\n\nconst animation = animate('.circle', {\n  x: '16rem',\n  loopDelay: 1500,\n  loop: true,\n  alternate: true,\n  onUpdate: self => $value.textContent = ++updates\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Timeline with onComplete Callback in Anime.js\nDESCRIPTION: This code creates a timeline using Anime.js, setting up animations for multiple elements. It demonstrates how to use the onComplete callback to update a DOM element when the timeline completes.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-callbacksoncomplete.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTimeline, utils } from 'animejs';\n\nconst [ $value ] = utils.$('.value');\n\nconst tl = createTimeline({\n  defaults: { duration: 500 },\n  loop: 1,\n  onComplete: self => $value.textContent = self.completed\n})\n.add('.circle', { x: '15rem' })\n.add('.triangle', { x: '15rem' })\n.add('.square', { x: '15rem' });\n```\n\n----------------------------------------\n\nTITLE: Defining a ScrollObserver Instance\nDESCRIPTION: This snippet demonstrates how to initialize a ScrollObserver using the 'onScroll' function. The properties provided, such as 'target', 'linked', and 'repeat', allow the observer to manage and track the target element's scroll states. Dependencies include the Anime.js library. The function requires parameters detailing scroll behavior, and it outputs an instance with various scroll-related properties.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscrollscrollobserver-properties.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst scrollObserver = onScroll(parameters);\n       ┌───────┐\nscrollObserver.│target │\nscrollObserver.│linked ├─ Properties\nscrollObserver.│repeat │\n       └───────┘\n```\n\n----------------------------------------\n\nTITLE: Anime.js Scroll Animation Example\nDESCRIPTION: This code snippet demonstrates the usage of Anime.js with scroll to trigger animations.  It defines a container element using `utils.$('.scroll-container')` and sets up an animation for elements with the class 'square', which moves them along the x-axis and rotates them when the container is scrolled.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscroll.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate, utils, onScroll } from 'animejs';\n\nconst [ container ] = utils.$('.scroll-container');\nconst debug = true;\n\n// Animation\n\nanimate('.square', {\n  x: '15rem',\n  rotate: '1turn',\n  duration: 2000,\n  alternate: true,\n  loop: true,\n  autoplay: onScroll({ container, debug })\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Scoped Animations and Draggables in Anime.js\nDESCRIPTION: This snippet initializes a new scope with media queries and default settings. It registers a constructor function that animates an element based on the media query match, using Anime.js to either animate the square or create a draggable element. It also returns a cleanup function to remove any added class when the scope reverts.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscopeadd-constructor-function.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { utils, animate, createScope, createDraggable } from 'animejs';\n\ncreateScope({\n  mediaQueries: { isSmall: '(max-width: 200px)' },\n  defaults: { ease: 'linear' },\n})\n.add(self => {\n\n  /* Media queries state are accessible on the matches property */\n  const { isSmall } = self.matches;\n  /* The $() utility method is also scoped */\n  const [ $square ] = utils.$('.square');\n\n  if (self.matches.isSmall) {\n    /* Only animate the square when the iframe is small */\n    animate($square, {\n      rotate: 360,\n      loop: true,\n    });\n  } else {\n    /* Only create the draggable when the iframe is large enough */\n    $square.classList.add('draggable');\n    createDraggable($square, {\n      container: document.body,\n    });\n  }\n  \n  return () => {\n    /* Removes the class 'draggable' when the scope reverts itself */\n    $square.classList.remove('draggable');\n  }\n\n});\n```\n\n----------------------------------------\n\nTITLE: Anime.js Engine Control Methods\nDESCRIPTION: Core engine methods for managing animation lifecycle, including update, pause, and resume functionality. These methods provide granular control over animation playback and engine state.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationengineengine-methods.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nengine.update()\nengine.pause()\nengine.resume()\n```\n\n----------------------------------------\n\nTITLE: Implementing Stagger Range Values with AnimeJS\nDESCRIPTION: This code demonstrates how to use the stagger function with range values to distribute animations evenly. It animates elements with class 'square' using staggered y-position values between '2.75rem' and '-2.75rem', and delays between 0 and 500 milliseconds.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationstaggerstagger-value-typesrange-value.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate, stagger } from 'animejs';\n\nanimate('.square', {\n  y: stagger(['2.75rem', '-2.75rem']),\n  delay: stagger([0, 500]),\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying Animated Object State in HTML\nDESCRIPTION: This HTML snippet shows how the animated object's state is displayed in the DOM. It uses a pre-formatted code block to show the current values of the object's properties as they are being animated.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimatable-propertiesjavascript-object-properties.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<pre class=\"row large centered\">\n  <code>{\"number\":1337,\"unit\":\"42%\"}</code>\n</pre>\n```\n\n----------------------------------------\n\nTITLE: Animating JavaScript Object Properties with Anime.js\nDESCRIPTION: This snippet shows how to use Anime.js to animate properties of a JavaScript object. It animates a 2D vector object, updating its x and y coordinates, and logs the changes to the DOM.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationtargetsjavascript-objects.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate, utils } from 'animejs';\n\nconst [ $log ] = utils.$('code');\n\nconst vector2D = { x: 0, y: 0 };\n\nanimate(vector2D, {\n  x: 100,\n  y: 150,\n  modifier: utils.round(0),\n  onUpdate: () => $log.textContent = JSON.stringify(vector2D),\n});\n```\n\n----------------------------------------\n\nTITLE: Synchronizing WAAPI Animations with Anime.js Timeline\nDESCRIPTION: Shows how to create WAAPI animations for different shapes and synchronize them to an Anime.js timeline using the sync() method with different positions. This allows precise control over when each animation starts within the timeline sequence.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinesync-waapi-animations.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTimeline, waapi } from 'animejs';\n\nconst circle = waapi.animate('.circle', {\n  x: '15rem',\n});\n\nconst triangle = waapi.animate('.triangle', {\n  x: '15rem',\n  y: [0, '-1.5rem', 0],\n  ease: 'out(4)',\n  duration: 750,\n});\n\nconst square = waapi.animate('.square', {\n  x: '15rem',\n  rotateZ: 360,\n});\n\nconst tl = createTimeline()\n.sync(circle, 0)\n.sync(triangle, 350)\n.sync(square, 250);\n```\n\n----------------------------------------\n\nTITLE: Animating a Staggered Grid in JavaScript using Anime.js\nDESCRIPTION: This code snippet creates an animated grid effect by utilizing the stagger functionality provided by the Anime.js library. It allows squares in the grid to animate along the x and y axes with staggered delays according to defined parameters. The animation is recursive, allowing for continuous motion.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationstaggerstagger-parametersstagger-grid-axis.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate, stagger } from 'animejs';\n\nconst grid = [11, 4];\nconst $squares = utils.$('.square');\n\nfunction animateGrid() {\n  const from = utils.random(0, 11 * 4);\n  animate($squares, {\n    translateX: [\n      { to: stagger('-.75rem', { grid, from, axis: 'x' }) },\n      { to: 0, ease: 'inOutQuad', },\n    ],\n    translateY: [\n      { to: stagger('-.75rem', { grid, from, axis: 'y' }) },\n      { to: 0, ease: 'inOutQuad' },\n    ],\n    opacity: [\n      { to: .5 },\n      { to: 1 }\n    ],\n    delay: stagger(85, { grid, from }),\n    onComplete: animateGrid\n  });\n}\n\nanimateGrid();\n```\n\n----------------------------------------\n\nTITLE: Creating an Animation Instance in Anime.js\nDESCRIPTION: Shows how to create an animation instance object using the animate function, which allows calling animation methods on the returned object.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-methods.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst animation = animate(target, parameters);\n```\n\n----------------------------------------\n\nTITLE: Implementing Timeline Revert Animation with AnimeJS - JavaScript\nDESCRIPTION: Demonstrates how to create and control an animation timeline with revert functionality using AnimeJS. Sets up initial positions for shapes, creates a looping timeline animation, and implements revert and restart button handlers.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-methodsrevert.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTimeline, utils } from 'animejs';\n\nconst [ $revertButton ] = utils.$('.revert');\nconst [ $restartButton ] = utils.$('.restart');\n\n// Set an initial x value\nutils.set(['.circle', '.triangle', '.square'], { x: '15rem' });\n\nconst tl = createTimeline({\n  loop: true,\n  alternate: true,\n})\n.add('.circle',   { x: 0 })\n.add('.triangle', { x: 0 }, 500)\n.add('.square',   { x: 0 }, 1000);\n\nconst revertTimeline = () => tl.revert();\nconst restartTimeline = () => tl.restart();\n\n$revertButton.addEventListener('click', revertTimeline);\n$restartButton.addEventListener('click', restartTimeline);\n```\n\n----------------------------------------\n\nTITLE: Importing Anime.js Modules\nDESCRIPTION: This code snippet demonstrates how to import specific modules from the Anime.js library. These modules include `animate` for creating animations, `utils` for utility functions like selecting DOM elements, and `createSpring` for creating spring-based easing functions.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationgetting-startedusing-with-vanilla-js.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate, utils, createSpring } from 'animejs';\n```\n\n----------------------------------------\n\nTITLE: Importing and Using WAAPI with Anime.js\nDESCRIPTION: Basic syntax for creating WAAPI-powered animations in Anime.js. This shows how to import the waapi module and use the animate() method with targets and parameters.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationweb-animation-api.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { waapi } from 'animejs';\n\nconst animation = waapi.animate(targets, parameters);\n```\n\n----------------------------------------\n\nTITLE: Animating with Reverse Stagger in Anime.js\nDESCRIPTION: This code snippet demonstrates the use of the stagger function in Anime.js to create a staggered animation effect that operates in reverse. The 'reversed' parameter is set to true, which alters the animation timing for each element. The expected input is a series of elements with the class 'square', and the output is an animation that translates each element to the right over specified delays.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationstaggerstagger-parametersstagger-reversed.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate, stagger } from 'animejs';\n\nanimate('.square', {\n  translateX: '17rem',\n  delay: stagger(100, { reversed: true }),\n});\n```\n\n----------------------------------------\n\nTITLE: Animating Elements on Scroll with Anime.js in JavaScript\nDESCRIPTION: This JavaScript snippet uses the Anime.js library to animate a '.square' element. The animation involves moving the element horizontally by '15rem' and rotating it one full turn. It is coupled with a scroll event handler that increments a display value each time the scrolling forward exceeds a specified threshold. The animation autoplays on scroll events triggered by the 'onScroll' method, with debug mode enabled for detailed interaction feedback. The 'onLeaveForward' callback function is utilized for counting the exits. Key dependencies include Anime.js and a structured HTML layout where elements with classes like '.value' and '.square' are manipulated.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscrollscrollobserver-callbacksonleaveforward.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { animate, onScroll, utils } from 'animejs';\n\nconst [ $value ] = utils.$('.value');\n\nlet exits = 0;\n\nanimate('.square', {\n  x: '15rem',\n  rotate: '1turn',\n  ease: 'linear',\n  autoplay: onScroll({\n    container: '.scroll-container',\n    enter: 'bottom-=50 top',\n    leave: 'top+=60 bottom',\n    sync: true,\n    debug: true,\n    onLeaveForward: () => $value.textContent = ++exits,\n  })\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Multiple Spring Animations Using WAAPI\nDESCRIPTION: Demonstration of applying different spring animations to multiple elements using WAAPI. This snippet creates three spring animations with different stiffness values, selects elements with querySelector, and applies animations with different settings to each element.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationweb-animation-apiwaapi-convertease.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { waapi, createSpring } from 'animejs';\n\nconst springs = [\n  createSpring({ stiffness: 100 }),\n  createSpring({ stiffness: 150 }),\n  createSpring({ stiffness: 200 })\n]\n\ndocument.querySelectorAll('#web-animation-api-waapi-convertease .demo .square').forEach(($el, i) => {\n  $el.animate({\n    translate: '17rem',\n    rotate: '1turn',\n  }, {\n    easing: waapi.convertEase(springs[i].ease),\n    delay: i * 250,\n    duration: springs[i].duration,\n    fill: 'forwards'\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Anime.js Timer Instance\nDESCRIPTION: Demonstrates how to create a timer instance and access its methods in Anime.js. The timer object provides various control methods for managing animation timing.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-methods.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst timer = createTimer(parameters);\ntimer.pause();\ntimer.play();\ntimer.restart();\n```\n\n----------------------------------------\n\nTITLE: Creating Animation with Delay in Anime.js\nDESCRIPTION: Shows how to apply a 500ms delay to a specific animation. This delay is applied to all properties in the animation, which moves and scales an element with the 'delay' class while looping and alternating.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-playback-settingsdelay.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate } from 'animejs';\n\nconst playbackDelay = animate('.delay', {\n  x: '16rem',\n  scale: 1.8,\n  delay: 500, // Global delay applied to all properties\n  loop: true,\n  alternate: true\n});\n```\n\n----------------------------------------\n\nTITLE: Timeline Seek Method Implementation in JavaScript\nDESCRIPTION: Demonstrates implementation of timeline seek functionality using Anime.js. Creates a timeline with multiple animations and connects it to range input and play/pause button controls. Includes event listeners and state management for timeline control.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-methodsseek.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTimeline, utils } from 'animejs';\n\nconst [ $range ] = utils.$('.range');\nconst [ $playPauseButton ] = utils.$('.play-pause');\n\nconst updateButtonLabel = tl => {\n  $playPauseButton.textContent = tl.paused ? 'Play' : 'Pause';\n}\n\nconst tl = createTimeline({\n  autoplay: false,\n  onUpdate: self => {\n    $range.value = self.currentTime;\n    updateButtonLabel(self);\n  },\n  onComplete: updateButtonLabel,\n})\n.add('.circle',   { x: '15rem' })\n.add('.triangle', { x: '15rem' }, 500)\n.add('.square',   { x: '15rem' }, 1000);\n\nconst seekTimeline = () => tl.seek(+$range.value);\n\nconst playPauseTimeline = () => {\n  if (tl.paused) {\n    tl.play();\n  } else {\n    tl.pause();\n    updateButtonLabel(tl);\n  }\n}\n\n$range.addEventListener('input', seekTimeline);\n$playPauseButton.addEventListener('click', playPauseTimeline);\n```\n\n----------------------------------------\n\nTITLE: Creating and Using an Animatable Instance in Anime.js\nDESCRIPTION: This snippet demonstrates how to create an Animatable instance and use its methods to trigger animations. It shows the basic syntax for applying x and y transformations with optional parameters and using the revert() method.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimatableanimatable-methods.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst animatable = createAnimatable(target, parameters);\nanimatable.x(100)               \nanimatable.y(50, 500, 'out(2)') \nanimatable.revert()             \n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Anime.js Animation Demo\nDESCRIPTION: Provides the HTML structure for demonstrating the difference between normal and interpolated animations using Anime.js. It creates two clock elements with labels.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiesinterpolate.md#2025-04-18_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"x-large spaced-evenly row\">\n  <div class=\"col\">\n    <div class=\"clock normal\"></div>\n    <div class=\"label\">normal</div>\n  </div>\n  <div class=\"col\">\n    <div class=\"clock interpolated\"></div>\n    <div class=\"label\">interpolated [0,12]</div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Time Staggering with AnimeJS\nDESCRIPTION: Demonstrates how to use the stagger() function to create staggered animations with different delays and durations for multiple elements. The example shows importing required functions and creating an animation with staggered timing properties.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationstaggertime-staggering.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate, stagger } from 'animejs';\n\nanimate('.square', {\n  x: '17rem',\n  delay: stagger(100),\n  duration: stagger(200, { start: 500 }),\n  loop: true,\n  alternate: true\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing onUpdate in an Anime.js Timeline\nDESCRIPTION: Demonstrates how to use the onUpdate callback in a timeline to update a DOM element's content on every frame. The example creates a looping animation with multiple elements and tracks the number of updates.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-callbacksonupdate.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTimeline, utils } from 'animejs';\n\nconst [ $value ] = utils.$('.value');\n\nlet updates = 0;\n\nconst tl = createTimeline({\n  defaults: { duration: 500 },\n  loopDelay: 250,\n  loop: true,\n  onUpdate: self => $value.textContent = ++updates\n})\n.add('.circle', { x: '15rem' })\n.add('.triangle', { x: '15rem' }, '+=250')\n.add('.square', { x: '15rem' }, '+=250');\n```\n\n----------------------------------------\n\nTITLE: Implementing Timeline restart() Method in Anime.js\nDESCRIPTION: This snippet demonstrates how to create a timeline with Anime.js and implement a restart button. The timeline animates three shapes sequentially with loop and alternate properties enabled. The restart() method resets the timeline to the beginning when a button is clicked.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-methodsrestart.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTimeline, utils } from 'animejs';\n\nconst [ $restartButton ] = utils.$('.restart');\n\nconst tl = createTimeline({\n  loop: true,\n  alternate: true,\n})\n.add('.circle',   { x: '15rem' })\n.add('.triangle', { x: '15rem' }, 500)\n.add('.square',   { x: '15rem' }, 1000);\n\nconst restartTimeline = () => tl.restart();\n\n$restartButton.addEventListener('click', restartTimeline);\n```\n\n----------------------------------------\n\nTITLE: Implementing Draggable Refresh Method in JavaScript with Anime.js\nDESCRIPTION: This snippet demonstrates how to create a draggable element and implement a refresh function using Anime.js. It creates a draggable square with randomized snap and drag speed, and adds a refresh button to recalculate these values.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-methodsrefresh.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createDraggable, utils } from 'animejs';\n\nconst [ $refreshButton ] = utils.$('.refresh');\n\nconst draggable = createDraggable('.square', {\n  snap: () => utils.random(0, 32, 0),\n  dragSpeed: () => utils.random(.5, 1.5, 1),\n});\n\nconst refreshDraggable = () => draggable.refresh();\n\n$refreshButton.addEventListener('click', refreshDraggable);\n```\n\n----------------------------------------\n\nTITLE: Creating a Draggable Instance in JavaScript with AnimeJS\nDESCRIPTION: This snippet demonstrates how to create a draggable instance using the createDraggable function from AnimeJS. It takes a target element and optional parameters to configure the draggable behavior.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-properties.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst draggable = createDraggable(target, parameters);\n```\n\n----------------------------------------\n\nTITLE: Implementing onRelease Callback with Anime.js Draggable\nDESCRIPTION: Demonstrates how to create a draggable element with an onRelease callback that increments and displays a counter. The callback function executes whenever the draggable element is released after being grabbed.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-callbacksonrelease.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createDraggable, utils } from 'animejs';\n\nconst [ $value ] = utils.$('.value');\n\nlet releases = 0;\n\ncreateDraggable('.square', {\n  container: '.grid',\n  onRelease: () => $value.textContent = ++releases\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Anime.js Scope with Media Queries\nDESCRIPTION: This JavaScript code snippet demonstrates how to define an anime.js scope with media queries. It imports `createScope` and `animate` from the animejs library and creates a scope with `mediaQueries` object, which maps arbitrary names (isSmall, isMedium, isLarge, reduceMotion) to media query definition strings. It then adds an animation to the scope that adjusts animation properties based on the matched media queries.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscopescope-parametersmediaqueries.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createScope, animate } from 'animejs';\n\ncreateScope({\n  mediaQueries: {\n    isSmall: '(max-width: 100px)',\n    isMedium: '(min-width: 101px) and (max-width: 200px)',\n    isLarge: '(min-width: 201px)',\n    reduceMotion: '(prefers-reduced-motion)',\n  }\n})\n.add(self => {\n\n  const { isSmall, isMedium, isLarge, reduceMotion } = self.matches;\n    \n  utils.set('.square', { scale: isMedium ? .75 : isLarge ? 1 : .5 });\n    \n  animate('.square', {\n    x: isSmall ? 0 : ['-35vw', '35vw'],\n    y: isSmall ? ['-40vh', '40vh'] : 0,\n    rotate: 360,\n    loop: true,\n    alternate: true,\n    duration: reduceMotion ? 0 : isSmall ? 750 : 1250\n  });\n\n});\n```\n\n----------------------------------------\n\nTITLE: Animating Logo Rotation on Click\nDESCRIPTION: This snippet defines a function `rotateLogo` that increments a rotation counter and animates the rotation of the logo element when a button is clicked.  It updates the button's text to display the current rotation count. The animation uses Anime.js to rotate the logo with a specified easing and duration.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationgetting-startedusing-with-vanilla-js.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Animate logo rotation on click\nconst rotateLogo = () => {\n  rotations++;\n  $button.innerText = `rotations: ${rotations}`;\n  animate($logo, {\n    rotate: rotations * 360,\n    ease: 'out(4)',\n    duration: 1500,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Animating Element Position with Eased Scroll Synchronization - Anime.js - JavaScript\nDESCRIPTION: This code snippet demonstrates how to use Anime.js to animate a '.square' element with easing functions based on the scroll position of a container. It utilizes the 'onScroll' callback to trigger animations as scrolling occurs, creating a dynamic visual effect. The code includes parameters for animation settings such as rotation, delay, and synchronization mode.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscrollscrollobserver-synchronisation-modeseased-scroll.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate, stagger, onScroll } from 'animejs';\n\nanimate('.square', {\n  x: '12rem',\n  rotate: '1turn',\n  ease: 'linear',\n  delay: stagger(100, { from: 'last' }),\n  autoplay: onScroll({\n    container: '.scroll-container',\n    enter: 'bottom-=50 top',\n    leave: 'top+=60 bottom',\n    sync: 'inOutCirc',\n    debug: true,\n  })\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Draggable Elements with Custom Easing - JavaScript\nDESCRIPTION: This code snippet demonstrates how to create draggable elements using the Anime.js library. It allows for customization of the easing that takes effect when the draggable elements are released. The code utilizes the createDraggable function from Anime.js to assign draggable behavior to specified elements while setting the releaseEase property for the easing effect upon release.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-settingsreleaseease.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createDraggable, createSpring } from 'animejs';\n\ncreateDraggable('.square', {\n  container: '.grid',\n  releaseEase: 'outElastic',\n});\n\ncreateDraggable('.circle', {\n  container: '.grid',\n  releaseEase: createSpring({\n    stiffness: 150,\n    damping: 15,\n  })\n});\n```\n\n----------------------------------------\n\nTITLE: Creating and Managing Scope in Anime.js\nDESCRIPTION: This JavaScript snippet demonstrates initializing a scope using 'createScope' in Anime.js. The 'scope' object contains properties and methods to manage DOM operations, constructor functions, media queries, and revertibles. Essential functions include getting default parameters, root elements, and media query matches. Dependencies include the Anime.js library version 4.0.0 or higher.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscopescope-properties.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst scope = createScope();\n┌────────┐\nscope.│methods │\nscope.│root    ├─ Properties\nscope.│matches │\n└────────┘\n```\n\n----------------------------------------\n\nTITLE: Creating a Staggered Animation with WAAPI\nDESCRIPTION: Example of creating a staggered animation effect using WAAPI in Anime.js. This code animates span elements with a vertical translation, staggered delay, looping, and easing.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationweb-animation-api.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { waapi, stagger } from 'animejs';\n\nwaapi.animate('span', {\n  translate: `0 -2rem`,\n  delay: stagger(100),\n  duration: 600,\n  loop: true,\n  alternate: true,\n  ease: 'inOut(2)',\n});\n```\n\n----------------------------------------\n\nTITLE: Creating and Accessing Timeline Properties in Anime.js\nDESCRIPTION: This snippet demonstrates how to create a timeline and access its properties in Anime.js. It shows the basic structure for creating a timeline with parameters and accessing various timeline properties.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-properties.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst timeline = createTimeline(parameters);\n timeline.labels\n timeline.currentTime\n timeline.duration\n```\n\n----------------------------------------\n\nTITLE: Setting Global Default for Reversed Animation in AnimeJS\nDESCRIPTION: Shows how to change the default value of the 'reversed' property globally by updating the engine.defaults object. This allows all animations to play backwards by default without specifying for each instance.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-playback-settingsreversed.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { engine } from 'animejs';\nengine.defaults.reversed = true;\n```\n\n----------------------------------------\n\nTITLE: Practical Animation Callback Example in Anime.js\nDESCRIPTION: Complete example showing how to import Anime.js, create an animation, and update DOM content on completion.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-callbacksthen.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate } from 'animejs';\n\nconst [ $value ] = utils.$('.value');\n\nconst animation = animate('.circle', {\n  x: '16rem',\n  delay: 500,\n});\n\nanimation.then(() => $value.textContent = 'fulfilled');\n```\n\n----------------------------------------\n\nTITLE: Using WAAPI with Scope for Media Queries in Anime.js\nDESCRIPTION: Example of creating a scope for WAAPI animations with media queries handling. This demonstrates how to create responsive animations that respect user preferences like reduced motion.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationweb-animation-apiimprovements-to-the-web-animation-api.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncreateScope({\n  mediaQueries: { reduceMotion: '(prefers-reduced-motion)' }\n})\n.add(({ matches }) => {\n  const { reduceMotion } = matches;\n  waapi.animate('.square', {\n    transform: reduceMotion ? ['100px', '100px'] : '100px',\n    opacity: [0, 1],\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Structuring HTML for Particle Animation and User Input\nDESCRIPTION: This HTML snippet sets up the necessary structure for displaying the animated particles and a control input range slider. It assumes CSS for styling and layout management. The HTML includes a container for particles and a range input for dynamic frame rate adjustments.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationengineengine-parametersfps.md#2025-04-18_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"large row container\"></div>\n<div class=\"medium row\">\n  <fieldset class=\"controls\">\n    <input type=\"range\" min=0 max=240 value=60 step=1 class=\"range\" />\n  </fieldset>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using $ Utility Function in Anime.js\nDESCRIPTION: Shows how to use the $ utility function to select elements and manipulate them. It demonstrates both global selection and scoped selection with createScope.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiesdollar-sign.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst targetsArray = utils.$(targets);\n```\n\n----------------------------------------\n\nTITLE: Using Timeline Refresh Method in AnimeJS\nDESCRIPTION: This snippet demonstrates how to use the refresh() method with an AnimeJS timeline. It creates a timeline with random x-position animations for three shapes (circle, triangle, square) and sets up a button to refresh and restart the animation. The timeline also has a loop property with an onLoop callback that automatically refreshes the animations.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-methodsrefresh.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTimeline, utils } from 'animejs';\n\nconst [ $refreshButton ] = utils.$('.refresh');\n\nconst tl = createTimeline({\n  loop: true,\n  onLoop: self => self.refresh()\n})\n.add('.circle',   { x: () => utils.random(0, 15) + 'rem' }, 0)\n.add('.triangle', { x: () => utils.random(0, 15) + 'rem' }, 0)\n.add('.square',   { x: () => utils.random(0, 15) + 'rem' }, 0);\n\nconst refreshTimeline = () => tl.refresh().restart();\n\n$refreshButton.addEventListener('click', refreshTimeline);\n```\n\n----------------------------------------\n\nTITLE: Implementing animateInView for Draggable Elements in Anime.js\nDESCRIPTION: This snippet demonstrates how to create a draggable element and use the animateInView method to bring it back into the viewport. It includes event listener setup and initial positioning of the draggable element.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-methodsanimateinview.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createDraggable } from 'animejs';\n\nconst [ $animateInView ] = utils.$('.animate-button');\n\nconst draggable = createDraggable('.square', {\n  container: '.grid',\n});\n\nconst animateInView = () => {\n  draggable.animateInView(400, 16);\n}\n\n// Set the draggable position outside the container\ndraggable.x = -24;\ndraggable.y = 72;\n\n$animateInView.addEventListener('click', animateInView);\n```\n\n----------------------------------------\n\nTITLE: Initializing Timeline Elements with init() in AnimeJS\nDESCRIPTION: Demonstrates how to use the init() method to set initial values for timeline animations. The code creates a timeline with three elements (.square, .triangle, and .circle), each with a specific 'from' value, and uses init() to force rendering of their initial states.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-methodsinit.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTimeline } from 'animejs';\n\nconst tl = createTimeline()\n.add('.square',   { x: { from: '15rem' } })\n.add('.triangle', { x: { from: '15rem' } }, 500)\n.add('.circle',   { x: { from: '15rem' } }, 1000)\n.init();\n```\n\n----------------------------------------\n\nTITLE: Defining Percentage-based Keyframes in Anime.js\nDESCRIPTION: Shows the basic syntax for percentage-based keyframes in Anime.js. Each keyframe defines animation properties at specific percentage points in the animation duration, with optional easing parameters.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationkeyframespercentage-based-keyframes.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nkeyframes: {\n  '25%' : { x: 100, y: 50, ease: 'out' },\n  '50%' : { x: 200, y: 75, },\n}\n```\n\n----------------------------------------\n\nTITLE: AnimeJS Set Utility Implementation Example\nDESCRIPTION: Demonstrates practical usage of utils.set() with dynamic values, stagger effects, and random color selection. Includes event listeners for setting and reverting styles on square elements.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiesset.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { utils, stagger } from 'animejs';\n\nconst [ $set, $revert ] = utils.$('button');\nconst squares = utils.$('.square');\nconst colors = ['red', 'orange', 'yellow'];\n\nlet setter;\n\nconst setStyles = () => {\n  setter = utils.set(squares, {\n    borderRadius: '50%',\n    y: () => utils.random(-1, 1) + 'rem',\n    scale: stagger(.1, { start: .25, ease: 'out' }),\n    color: () => `var(--hex-${utils.randomPick(colors)})`\n  });\n  $set.setAttribute('disabled', 'true');\n  $revert.removeAttribute('disabled');\n}\n\nconst revertStyles = () => {\n  setter.revert();\n  $set.removeAttribute('disabled');\n  $revert.setAttribute('disabled', 'true');\n}\n\n$set.addEventListener('click', setStyles);\n$revert.addEventListener('click', revertStyles);\n```\n\n----------------------------------------\n\nTITLE: Anime.js Timer with Scroll\nDESCRIPTION: This code snippet shows how to synchronize a timer with scrolling. It uses `createTimer` (assumed to be a custom function) and updates the inner HTML of an element with the class 'timer' to display the timer's current time, controlled by the scroll position of a container.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscroll.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Timer\n\nconst [ $timer ] = utils.$('.timer');\n\ncreateTimer({\n  duration: 2000,\n  alternate: true,\n  loop: true,\n  onUpdate: self => {\n    $timer.innerHTML = self.iterationCurrentTime\n  },\n  autoplay: onScroll({\n    target: $timer.parentNode,\n    container,\n    debug\n  })\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Complex Animation with Keyframes in Anime.js\nDESCRIPTION: This example shows how to create a complex animation using keyframes in Anime.js. It animates a square element with multiple keyframes, including translations, scaling, and rotation. The animation also demonstrates the use of different easing functions and looping.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationkeyframesduration-based-keyframes.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate } from 'animejs';\n\nanimate('.square', {\n  keyframes: [\n    { y: '-2.5rem', ease: 'out', duration: 400 },\n    { x: '17rem', scale: .5, duration: 800 },\n    { y: '2.5rem' }, // The duration here is 3000 / 5 = 600ms\n    { x: 0, scale: 1, duration: 800 },\n    { y: 0, ease: 'in', duration: 400 }\n  ],\n  rotate: { to: 360, ease: 'linear' },\n  duration: 3000,\n  ease: 'inOut', // ease applied between each keyframes if no ease defined\n  playbackEase: 'ouIn(5)', // ease applied accross all keyframes\n  loop: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Timer Controls with AnimeJS\nDESCRIPTION: Creates a timer instance with controls for resuming, pausing, and alternating playback. The timer updates a display element with the current iteration time every frame and loops continuously. Includes event listeners for button controls.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-methodsresume.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTimer, utils } from 'animejs';\n\nconst [ $resumeButton, $pauseButton, $alternateButton ] = utils.$('.button');\nconst [ $time ] = utils.$('.time');\n\nconst timer = createTimer({\n  duration: 2000,\n  onUpdate: self => $time.innerHTML = self.iterationCurrentTime,\n  loop: true,\n});\n\nconst resumeTimer = () => timer.resume();\nconst pauseTimer = () => timer.pause();\nconst alternateTimer = () => timer.alternate();\n\n$resumeButton.addEventListener('click', resumeTimer);\n$pauseButton.addEventListener('click', pauseTimer);\n$alternateButton.addEventListener('click', alternateTimer);\n```\n\n----------------------------------------\n\nTITLE: Anime.js ScrollObserver onLeave Callback\nDESCRIPTION: This JavaScript code snippet demonstrates how to use the `onLeave` callback within Anime.js's `onScroll` function. It imports necessary modules from Anime.js, selects an HTML element with class 'value', initializes a counter, and animates a '.square' element based on scroll position. The `onLeave` callback increments the counter and updates the text content of the selected element when the square leaves the defined threshold.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscrollscrollobserver-callbacksonleave.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { animate, onScroll, utils } from 'animejs';\n\nconst [ $value ] = utils.$('.value');\n\nlet exits = 0;\n\nanimate('.square', {\n  x: '15rem',\n  rotate: '1turn',\n  ease: 'linear',\n  autoplay: onScroll({\n    container: '.scroll-container',\n    enter: 'bottom-=50 top',\n    leave: 'top+=60 bottom',\n    sync: true,\n    debug: true,\n    onLeave: () => $value.textContent = ++exits,\n  })\n});\n```\n\n----------------------------------------\n\nTITLE: Async/Await Animation Pattern in Anime.js\nDESCRIPTION: Demonstrates how to use async/await syntax with Anime.js animations for better flow control.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-callbacksthen.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nasync function waitForAnimationToComplete() {\n  return animate(target, {\n    x: 100,\n    duration: 500,\n  });\n}\n\nconst asyncAnimation = await waitForAnimationToComplete();\n```\n\n----------------------------------------\n\nTITLE: Implementing Alternate Animation with Anime.js in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the alternate() method in Anime.js to toggle the playback direction of an animation. It creates an animation for multiple squares, moving them horizontally with a staggered delay, and sets up a button to trigger the alternate() method.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-methodsalternate.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate, utils, stagger } from 'animejs';\n\nconst [ $alternateButton ] = utils.$('.button');\n\nconst animation = animate('.square', {\n  x: '17rem',\n  ease: 'inOutSine',\n  loop: true,\n  delay: stagger(100),\n});\n\nconst alternateAnimation = () => animation.alternate();\n\n$alternateButton.addEventListener('click', alternateAnimation);\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Reversed Animation Examples\nDESCRIPTION: HTML markup that creates containers for demonstrating normal and reversed animations. Each container includes a circle element that will be animated and a label indicating the reversed property value.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-playback-settingsreversed.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"medium row\">\n  <div class=\"circle dir-normal\"></div>\n  <div class=\"padded label\">reversed: false</div>\n</div>\n<div class=\"medium row\">\n  <div class=\"circle dir-reverse\"></div>\n  <div class=\"padded label\">reversed: true</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Adding Animations and Managing Engine State with Anime.js\nDESCRIPTION: This code snippet sets up a container where 150 animated particles are added, along with functionality to pause and resume the animation engine through button interactions. Dependencies include the Anime.js library, which provides animation utilities and engine control methods.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationengineengine-methodsresume.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { engine, animate, utils } from 'animejs';\n\nconst [ $container ] = utils.$('.container');\nconst [ $pause, $resume ] = utils.$('button');\n\nfunction addAnimation() {\n  const $particle = document.createElement('div');\n  $particle.classList.add('particle');\n  $container.appendChild($particle);\n  animate($particle, {\n    x: utils.random(-10, 10, 2) + 'rem',\n    y: utils.random(-3, 3, 2) + 'rem',\n    scale: [{ from: 0, to: 1 }, { to: 0 }],\n    loop: true,\n    delay: utils.random(0, 1000)\n  });\n}\n\nfor (let i = 0; i < 150; i++) addAnimation();\n\nconst resumeEngine = () => engine.resume();\nconst pauseEngine = () => engine.pause();\n\n$pause.addEventListener('click', pauseEngine);\n$resume.addEventListener('click', resumeEngine);\n\n<div class=\"large row container\"></div>\n<div class=\"medium row\">\n  <fieldset class=\"controls\">\n    <button>Pause</button>\n    <button>Resume</button>\n  </fieldset>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating Animated Cubes in Three.js with Anime.js - JavaScript\nDESCRIPTION: This function creates and animates multiple cubes using Three.js and Anime.js. It establishes a timeline for animations, including random positions and rotations for each cube, and adds these cubes to the Three.js scene.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationengineengine-methodsupdate.md#2025-04-18_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction createAnimatedCube() {\n  const cube = new THREE.Mesh(geometry, material);\n  const x = utils.random(-10, 10, 2);\n  const y = utils.random(-5, 5, 2);\n  const z = [-10, 7];\n  const r = () => utils.random(-Math.PI * 2, Math.PI * 2, 3);\n  const duration = 4000;\n  createTimeline({\n    delay: utils.random(0, duration),\n    defaults: { loop: true, duration, ease: 'inSine', },\n  })\n  .add(cube.position, { x, y, z }, 0)\n  .add(cube.rotation, { x: r, y: r, z: r }, 0)\n  .init();\n  scene.add(cube);\n}\n\nfor (let i = 0; i < 40; i++) {\n  createAnimatedCube();\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating and Modifying Animation Frame Rate in AnimeJS\nDESCRIPTION: Example showing how to create an animation with a specific frame rate and dynamically update it using a range input. The code initializes an animation with a frame rate of 60fps and allows changing it through a UI slider.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-playback-settingsframerate.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate } from 'animejs';\n\nconst [ $range ] = utils.$('.range');\nconst [ $fps ] = utils.$('.fps');\n\nconst animation = animate('.circle', {\n  x: '16rem',\n  loop: true,\n  alternate: true,\n  frameRate: 60,\n});\n\nconst updateFps = () => {\n  const { value } = $range;\n  $fps.innerHTML = value;\n  animation.fps = value;\n}\n\n$range.addEventListener('input', updateFps);\n```\n\n----------------------------------------\n\nTITLE: Using Animatable Getters in AnimeJS\nDESCRIPTION: This snippet demonstrates how to create an animatable object and use its properties as getter methods to retrieve current values. It creates a circle element that responds to mouse movement and displays its x and y coordinates.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimatableanimatable-methodsgetters.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createAnimatable, utils } from 'animejs';\n\nconst $demos = document.querySelector('#docs-demos');\nconst $demo = $demos.querySelector('.docs-demo.is-active');\nconst [ $x, $y ] = utils.$('.coords');\nlet bounds = $demo.getBoundingClientRect();\nconst refreshBounds = () => bounds = $demo.getBoundingClientRect();\n\nconst circle = createAnimatable('.circle', {\n  x: 500,\n  y: 500,\n  ease: 'out(2)',\n});\n\n// Gets and log the current x and y values\ncircle.animations.x.onRender = () => {\n  $x.innerHTML = utils.roundPad(circle.x(), 2);\n  $y.innerHTML = utils.roundPad(circle.y(), 2);\n}\n\nconst onMouseMove = e => {\n  const { width, height, left, top } = bounds;\n  const hw = width / 2;\n  const hh = height / 2;\n  const x = utils.clamp(e.clientX - left - hw, -hw, hw);\n  const y = utils.clamp(e.clientY - top - hh, -hh, hh);\n  // Sets x and y values\n  circle.x(x);\n  circle.y(y);\n}\n\nwindow.addEventListener('mousemove', onMouseMove);\n$demos.addEventListener('scroll', refreshBounds);\n```\n\n----------------------------------------\n\nTITLE: Animating Individual CSS Transforms with anime.js Web Animation API\nDESCRIPTION: This example demonstrates how to use anime.js WAAPI module to animate individual transform properties on multiple elements. The code randomly positions and rotates square elements continuously by using function-based values for x, y, rotateX, and rotateY properties.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationweb-animation-apiimprovements-to-the-web-animation-apiindividual-css-transforms.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { waapi, utils } from 'animejs';\n\nconst $squares = utils.$('.square');\n\nconst animateSquares = () => {\n  waapi.animate($squares, {\n    x: () => utils.random(0, 17) + 'rem',\n    y: () => utils.random(-1, 1) + 'rem',\n    rotateX: () => utils.random(-90, 90),\n    rotateY: () => utils.random(-90, 90),\n    onComplete: () => animateSquares()\n  });\n}\n\nanimateSquares();\n```\n\n----------------------------------------\n\nTITLE: Implementing Timer with Status Update in Anime.js\nDESCRIPTION: Creates a timer using Anime.js createTimer function, updates a time display during the timer's progress, and changes a status message upon completion. This example showcases the use of onUpdate and then() methods.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-callbacksthen.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTimer, utils } from 'animejs';\n\nconst [ $status ] = utils.$('.status');\nconst [ $time ] = utils.$('.time');\n\ncreateTimer({\n  duration: 2000,\n  onUpdate: self => $time.innerHTML = self.currentTime,\n})\n.then(() => $status.innerHTML = 'fulfilled');\n```\n\n----------------------------------------\n\nTITLE: Defining Duration-Based Keyframes in Anime.js\nDESCRIPTION: This snippet demonstrates how to define duration-based keyframes in Anime.js. Each keyframe object can include an animatable property and tween parameters. The default duration of a keyframe is calculated by dividing the total animation duration by the number of keyframes.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationkeyframesduration-based-keyframes.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nkeyframes: [\n  { y: 50, ease: 'out', duration: 400 },\n  { x: 75, scale: .5, duration: 800 },\n]\n```\n\n----------------------------------------\n\nTITLE: Creating and Adding Timer to AnimeJS Timeline\nDESCRIPTION: This snippet demonstrates how to create a timeline and add timers using the add() method. It also shows how to synchronize an existing timer using the sync() method.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelineadd-timers.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTimeline, createTimer, utils } from 'animejs';\n\nconst [ $timer01, $timer02, $timer03 ] = utils.$('.timer');\n\nconst timer1 = createTimer({\n  duration: 1500,\n  onUpdate: self => $timer01.innerHTML = self.currentTime,\n});\n\nconst tl = createTimeline()\n.sync(timer1)\n.add({\n  duration: 500,\n  onUpdate: self => $timer02.innerHTML = self.currentTime,\n})\n.add({\n  onUpdate: self => $timer03.innerHTML = self.currentTime,\n  duration: 1000\n});\n```\n\n----------------------------------------\n\nTITLE: Converting Units in AnimeJS Animations with JavaScript\nDESCRIPTION: Demonstrates how to use the animate() method to convert between different unit types during animation. The example shows converting from pixels to percentage, pixels to rem, and degrees to turns.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationtween-value-typesunit-conversion-value.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate, utils } from 'animejs';\n\nanimate('.square', {\n  width: '25%', // from '48px' to '25%',\n  x: '15rem', // from '0px' to '15rem',\n  rotate: '.75turn', // from `0deg` to '.75turn',\n});\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Multiple Timelines in Anime.js\nDESCRIPTION: This example demonstrates how to synchronize multiple timelines and animations in Anime.js. It creates a main timeline that syncs with two child timelines (tlA and tlB), with tlB starting 2000ms before the end of tlA due to the offset parameter.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinesync-timelines.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTimeline, animate } from 'animejs';\n\nconst circleAnimation = animate('.circle', {\n  x: '15rem'\n});\n\nconst tlA = createTimeline()\n.sync(circleAnimation)\n.add('.triangle', {\n  x: '15rem',\n  duration: 2000,\n})\n.add('.square', {\n  x: '15rem',\n});\n\nconst tlB = createTimeline({ defaults: { duration: 2000 } })\n.add(['.triangle', '.square'], {\n  rotate: 360,\n}, 0)\n.add('.circle', {\n  scale: [1, 1.5, 1],\n}, 0);\n\nconst tlMain = createTimeline()\n.sync(tlA)\n.sync(tlB, '-=2000');\n```\n\n----------------------------------------\n\nTITLE: Creating an Anime.js Scope with Media Queries (JavaScript)\nDESCRIPTION: This code snippet demonstrates creating an Anime.js scope using the `createScope` function and defining media queries within it.  The scope is configured with `mediaQueries` for 'isSmall' and 'reduceMotion', which are then used to conditionally modify the animation based on the current viewport size and user preferences.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscope.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { animate, utils, createScope } from 'animejs';\n\ncreateScope({\n  mediaQueries: {\n    isSmall: '(max-width: 200px)',\n    reduceMotion: '(prefers-reduced-motion)',\n  }\n})\n.add(self => {\n\n  const { isSmall, reduceMotion } = self.matches;\n  \n  if (isSmall) {\n    utils.set('.square', { scale: .5 });\n  }\n    \n  animate('.square', {\n    x: isSmall ? 0 : ['-35vw', '35vw'],\n    y: isSmall ? ['-40vh', '40vh'] : 0,\n    loop: true,\n    alternate: true,\n    duration: reduceMotion ? 0 : isSmall ? 750 : 1250\n  });\n\n});\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Anime.js Alternate Animation Demo\nDESCRIPTION: This HTML snippet provides the structure for the Anime.js alternate animation demo. It includes multiple rows with squares that will be animated, and a button to trigger the alternate() method.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-methodsalternate.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"medium row\">\n  <div class=\"square\"></div>\n</div>\n<div class=\"medium row\">\n  <div class=\"square\"></div>\n</div>\n<div class=\"medium row\">\n  <fieldset class=\"controls\">\n    <button class=\"button\">Alternate</button>\n  </fieldset>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating a Draggable Element with AnimeJS\nDESCRIPTION: Demonstrates the basic usage of the createDraggable function. It takes a target (CSS selector or DOM element) and optional parameters to create a draggable element.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggable.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst draggable = createDraggable(target, parameters);\n```\n\n----------------------------------------\n\nTITLE: Creating a Timer with Callbacks in Anime.js\nDESCRIPTION: This snippet demonstrates how to create a timer using the createTimer() function in Anime.js, including various callback functions. The timer is set to run for 1000 milliseconds, use frame-based timing, and loop indefinitely.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-callbacks.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncreateTimer({\n  duration: 1000,\n  frameRate: true,\n  loop: true,\n  onBegin: () => {},\n  onLoop: () => {},\n  onUpdate: () => {},\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Anime.js Engine for Manual Updates - JavaScript\nDESCRIPTION: This snippet disables the default animation loop in Anime.js, allowing for manual updates in projects using custom animation loops like Three.js. It initializes the engine and sets up the environment for rendering objects in Three.js while managing animations with Anime.js.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationengineengine-methodsupdate.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { engine, createTimeline, utils } from 'animejs';\n\n// Prevents Anime.js from using its own loop\nengine.useDefaultMainLoop = false;\n\nconst [ $container ] = utils.$('.container');\nconst color = utils.get($container, 'color');\nconst { width, height } = $container.getBoundingClientRect();\n\n// Three.js setup, note that the global THREE object is defined globally\nconst renderer = new THREE.WebGLRenderer({ alpha: true });\nconst scene = new THREE.Scene();\nconst camera = new THREE.PerspectiveCamera(65, width / height, 0.1, 20);\nconst geometry = new THREE.BoxGeometry(1, 1, 1);\nconst material = new THREE.MeshBasicMaterial({ color, wireframe: true });\n\nrenderer.setSize(width, height);\nrenderer.setPixelRatio(window.devicePixelRatio);\n$container.appendChild(renderer.domElement);\ncamera.position.z = 5;\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Timer Seek Functionality with AnimeJS in JavaScript\nDESCRIPTION: This snippet demonstrates how to create and control a timer using AnimeJS. It includes functions for seeking to a specific time, playing/pausing the timer, and updating the UI accordingly. The timer is created with a duration of 2000ms and includes callbacks for updates and completion.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-methodsseek.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTimer, utils } from 'animejs';\n\nconst [ $range ] = utils.$('.range');\nconst [ $playPauseButton ] = utils.$('.play-pause');\nconst [ $time ] = utils.$('.time');\n\nconst updateButtonLabel = timer => {\n  $playPauseButton.textContent = timer.paused ? 'Play' : 'Pause';\n}\n\nconst timer = createTimer({\n  duration: 2000,\n  autoplay: false,\n  onUpdate: self => {\n    $range.value = self.currentTime;\n    $time.innerHTML = self.currentTime;\n    updateButtonLabel(self);\n  },\n  onComplete: updateButtonLabel,\n});\n\nconst seekTimer = () => timer.seek(+$range.value);\n\nconst playPauseTimer = () => {\n  if (timer.paused) {\n    timer.play();\n  } else {\n    timer.pause();\n    updateButtonLabel(timer);\n  }\n}\n\n$range.addEventListener('input', seekTimer);\n$playPauseButton.addEventListener('click', playPauseTimer);\n```\n\n----------------------------------------\n\nTITLE: Animating with HSLA Color Values in Anime.js\nDESCRIPTION: This example illustrates the use of HSLA color values in Anime.js animations. It targets an element with the class 'hsla' and animates its background color to 'hsla(44, 100%, 59%, .2)'.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationtween-value-typescolor-value.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nanimate('.hsla', {\n  background: 'hsla(44, 100%, 59%, .2)',\n});\n```\n\n----------------------------------------\n\nTITLE: Creating and Adding Scopes\nDESCRIPTION: This code creates two Anime.js scopes, `scope1` and `scope2`, associated with the '.row-1' and '.row-2' elements respectively. The `scopeConstructor` function is added to each scope, applying the defined animations and event listeners to the elements within each row.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscopescope-methodsrevert.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst scope1 = createScope({ root: '.row-1' }).add(scopeConstructor);\nconst scope2 = createScope({ root: '.row-2' }).add(scopeConstructor);\n```\n\n----------------------------------------\n\nTITLE: Using Modifier Functions with AnimeJS Animatable Elements\nDESCRIPTION: This example demonstrates how to use modifier functions with AnimeJS's createAnimatable method. It creates two clock elements that rotate based on mouse position - one with a snapping modifier that rounds rotation to specific increments, and another with an inverting modifier that reverses the rotation direction.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimatableanimatable-settingsmodifier.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createAnimatable, utils, stagger } from 'animejs';\n\nconst PI = Math.PI;\n\nconst clock1 = createAnimatable('.clock-1', {\n  rotate: { unit: 'rad' },\n  modifier: utils.snap(PI / 10),\n  duration: 0,\n});\n\nconst clock2 = createAnimatable('.clock-2', {\n  rotate: { unit: 'rad' },\n  modifier: v => -v,\n  duration: 0,\n});\n\nconst rotateClock = (animatable) => {\n  return e => {\n    const [ $clock ] = animatable.targets;\n    const { width, height, left, top } = $clock.getBoundingClientRect();\n    const x = e.clientX - left - width / 2;\n    const y = e.clientY - top - height / 2;\n    animatable.rotate(Math.atan2(y, x) + PI / 2);\n  }\n}\n\nconst rotateClock1 = rotateClock(clock1);\nconst rotateClock2 = rotateClock(clock2);\n\nconst onMouseMove = e => {\n  rotateClock1(e);\n  rotateClock2(e);\n}\n\nwindow.addEventListener('mousemove', onMouseMove);\n```\n\n----------------------------------------\n\nTITLE: Implementing Draggable Reset Functionality in JavaScript with Anime.js\nDESCRIPTION: This snippet demonstrates how to create a draggable element and implement a reset function using Anime.js. It imports necessary functions, creates a draggable element, and sets up an event listener for a reset button.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-methodsreset.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createDraggable, utils } from 'animejs';\n\nconst [ $resetButton ] = utils.$('.reset');\n\nconst draggable = createDraggable('.square');\n\nconst resetDraggable = () => draggable.reset();\n\n$resetButton.addEventListener('click', resetDraggable);\n```\n\n----------------------------------------\n\nTITLE: Initializing Animation and Speed Control with Anime.js in JavaScript\nDESCRIPTION: This snippet sets up an animation using Anime.js, creates a range input for speed control, and uses utils.sync() to update the animation speed. It demonstrates how to synchronize speed changes with the animation engine loop.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiessync.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate, utils } from 'animejs';\n\nconst [ $range ] = utils.$('.range');\nconst [ $speed ] = utils.$('.speed');\n\nconst animation = animate('.circle', {\n  x: '16rem',\n  loop: true,\n  alternate: true,\n  playbackRate: 1,\n});\n\nconst updateSpeed = () => {\n  const { value } = $range;\n  $speed.innerHTML = utils.roundPad(+value, 2);\n  utils.sync(() => animation.speed = value);\n}\n\n$range.addEventListener('input', updateSpeed);\n```\n\n----------------------------------------\n\nTITLE: Using play() Method with Event Listener in Anime.js\nDESCRIPTION: This JavaScript snippet demonstrates how to create a paused animation with Anime.js and then use the play() method to start it when a button is clicked. It creates an animation that moves squares horizontally with a staggered delay.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-methodsplay.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate, utils, stagger } from 'animejs';\n\nconst [ $playButton ] = utils.$('.play');\n\nconst animation = animate('.square', {\n  x: '17rem',\n  ease: 'inOutSine',\n  delay: stagger(100),\n  autoplay: false, // The animation is paused by default\n});\n\nconst playAnimation = () => animation.play();\n\n$playButton.addEventListener('click', playAnimation);\n```\n\n----------------------------------------\n\nTITLE: Anime.js Scope Creation and Method Registration\nDESCRIPTION: Creates an Anime.js scope, registers a method within it, and attaches an event listener to execute the method. The method accesses scope properties, specifically media query matches, to dynamically adjust animation parameters. Utilizes the `animejs` library.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscoperegister-method-function.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { utils, animate, createScope } from 'animejs';\n\nconst scope = createScope({\n  mediaQueries: { isSmall: '(max-width: 200px)' },\n})\n.add(self => {\n\n  /* Registering the method inside the scope allows access to the scope itself */\n  self.add('onClick', (e) => {\n\n    const { clientX, clientY } = e;\n    const { isSmall } = self.matches;\n\n    animate('.square', {\n      rotate: isSmall ? '+=360' : 0,\n      x: isSmall ? 0 : clientX - (window.innerWidth / 2),\n      y: isSmall ? 0 : clientY - (window.innerHeight / 2),\n      duration: isSmall ? 750 : 400,\n    });\n    \n  });\n  \n  utils.set(document.body, {\n    cursor: self.matches.isSmall ? 'alias' : 'crosshair'\n  });\n  \n});\n\n/* Methods can be called outside the scope */\ndocument.addEventListener('click', scope.methods.onClick);\n```\n\n----------------------------------------\n\nTITLE: Setting Global Modifiers in AnimeJS\nDESCRIPTION: Shows how to change the default modifier globally by updating the engine.defaults object. This example demonstrates setting a global modifier that negates all animated values.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationtween-parametersmodifier.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { engine } from 'animejs';\nengine.defaults.modifier = v => -v; // Don't do this :D\n```\n\n----------------------------------------\n\nTITLE: Defining Timeline Callbacks in AnimeJS\nDESCRIPTION: This snippet demonstrates how to define timeline callbacks within the createTimeline() function in AnimeJS. It includes settings for defaults, loop, alternate, autoplay, and various callback functions.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-callbacks.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncreateTimeline({\n  defaults: {\n    ease: 'out(3)',\n    duration: 500,\n  },\n  loop: 3,\n  alternate: true,\n  autoplay: false,\n  onBegin: () => {},\n  onLoop: () => {},\n  onUpdate: () => {},\n});\n```\n\n----------------------------------------\n\nTITLE: Using restart() Method with Anime.js\nDESCRIPTION: This snippet demonstrates how to create an animation with Anime.js and implement a restart functionality. It animates squares with a staggered delay and provides a button that calls the restart() method when clicked.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-methodsrestart.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate, utils, stagger } from 'animejs';\n\nconst [ $restartButton ] = utils.$('.restart');\n\nconst animation = animate('.square', {\n  x: '17rem',\n  direction: 'alternate',\n  ease: 'inOutSine',\n  loop: true,\n  delay: stagger(100)\n});\n\nconst restartAnimation = () => animation.restart();\n\n$restartButton.addEventListener('click', restartAnimation);\n```\n\n----------------------------------------\n\nTITLE: Implementing onResize Callback for Draggable Elements in Anime.js\nDESCRIPTION: This snippet demonstrates how to use the onResize callback with createDraggable in Anime.js. It creates a draggable square and updates a counter each time the container or dragged target sizes change.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-callbacksonresize.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createDraggable, utils } from 'animejs';\n\nconst [ $value ] = utils.$('.value');\n\nlet resizes = 0;\n\ncreateDraggable('.square', {\n  container: '.grid',\n  onResize: self => {\n    $value.textContent = ++resizes;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Animating CSS Properties with Anime.js\nDESCRIPTION: This example demonstrates how to animate various CSS properties including positioning, border radius, background color, and filter effects using Anime.js. It shows property naming conventions for properties with dashes, which can be written in camelCase or as strings.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimatable-propertiescss-properties.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate } from 'animejs';\n\nanimate('.square', {\n  left: 'calc(7.75rem * 2)',\n  borderRadius: 64,\n  'background-color': '#F9F640',\n  filter: 'blur(5px)',\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Targets from Anime.js Timeline\nDESCRIPTION: Shows how to remove targets from an Anime.js timeline. The method accepts targets as a parameter.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-methodsremove.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ntimeline.remove(targets);\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Color Animation Examples in Anime.js\nDESCRIPTION: This HTML snippet provides the structure for displaying the color animation examples. It creates a row of circular divs, each with a class corresponding to a different color format used in the animation examples.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationtween-value-typescolor-value.md#2025-04-18_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large justified row\">\n  <div class=\"circle hex\"></div>\n  <div class=\"circle rgb\"></div>\n  <div class=\"circle hsl\"></div>\n  <div class=\"circle hexa\"></div>\n  <div class=\"circle rgba\"></div>\n  <div class=\"circle hsla\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating an Anime.js Scope Constructor\nDESCRIPTION: The `scopeConstructor` function defines the animation logic and event listeners for elements within a scope. It selects elements with the class 'circle', adds animations to them, and attaches mouseenter and mouseleave event listeners.  The return value is a cleanup function that removes the event listeners, which is essential for the `revert` method to work correctly.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscopescope-methodsrevert.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst scopeConstructor = scope => {\n  const circles = utils.$('.circle');\n    \n  circles.forEach(($circle, i) => {\n    animate($circle, {\n      opacity: .25,\n      loop: true,\n      alternate: true,\n      duration: 500,\n      delay: i * 100,\n      ease: 'inOut(3)',\n    });\n    $circle.addEventListener('mouseenter', onMouseEnter);\n    $circle.addEventListener('mouseleave', onMouseLeave);\n  });\n  \n  // Cleanup function to take care of removing event listeners on revert\n  return () => {\n    circles.forEach($circle => {\n      // Anime.js instances are automatically reverted by the Scope\n      $circle.removeEventListener('mouseenter', onMouseEnter);\n      $circle.removeEventListener('mouseleave', onMouseLeave);\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Animation Refresh with AnimeJS in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the refresh() method in AnimeJS to update animated property values. It creates an animation with random values for position, rotation, and scale, and implements a button to refresh and restart the animation.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-methodsrefresh.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate } from 'animejs';\n\nconst [ $refreshButton ] = utils.$('.refresh');\n\nconst animation = animate('.square', {\n  x: () => utils.random(0, 17) + 'rem',\n  y: () => utils.random(-1, 1) + 'rem',\n  rotate: () => utils.random(-360, 360, 1),\n  scale: () => utils.random(.1, 1.5, 2),\n  duration: 750,\n  loop: true,\n  onLoop: self => self.refresh()\n});\n\nconst refreshAnimation = () => animation.refresh().restart();\n\n$refreshButton.addEventListener('click', refreshAnimation);\n```\n\n----------------------------------------\n\nTITLE: Creating Draggable Element with Custom Trigger - JavaScript - Anime.js\nDESCRIPTION: This code snippet demonstrates how to create a draggable element in Anime.js, specifying a different trigger element for dragging. It uses the createDraggable function to initialize the draggable behavior, where the trigger can be a CSS selector or a DOM element.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-settingstrigger.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createDraggable } from 'animejs';\n\ncreateDraggable('.row', {\n  trigger: '.circle',\n});\n```\n\n----------------------------------------\n\nTITLE: Using set() Method in Anime.js Timeline\nDESCRIPTION: Demonstrates how to use the set() method in an Anime.js timeline to instantly set property values for different targets at specific times. The example creates a timeline and sets the x position of three different elements (.circle, .triangle, .square) at different time positions.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-methodsset.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTimeline } from 'animejs';\n\nconst tl = createTimeline()\n.set('.circle', { x: '15rem' })\n.set('.triangle', { x: '15rem' }, 500)\n.set('.square', { x: '15rem' }, 1000);\n```\n\n----------------------------------------\n\nTITLE: Implementing Timer Alternation in AnimeJS\nDESCRIPTION: This snippet demonstrates how to create and use a timer with the alternate() method in AnimeJS. It sets up a timer with a duration of 10 seconds, loops continuously, and updates a display element with the current iteration time. A button is set up to trigger the alternate() method, which reverses the playback direction.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-methodsalternate.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTimer, utils } from 'animejs';\n\nconst [ $alternateButton ] = utils.$('.button');\nconst [ $iterationTime ] = utils.$('.iteration-time');\n\nconst timer = createTimer({\n  duration: 10000,\n  loop: true,\n  onUpdate: self => {\n    $iterationTime.innerHTML = self.iterationCurrentTime;\n  }\n});\n\nconst alternateTimer = () => timer.alternate();\n\n$alternateButton.addEventListener('click', alternateTimer);\n```\n\n----------------------------------------\n\nTITLE: Animating SVG drawing with anime.js\nDESCRIPTION: Example of using anime.js to animate SVG elements with the createDrawable method. The animation transitions the draw property from no visibility to full visibility with easing, duration, and staggered delay effects.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationsvgcreatedrawable.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate, svg, stagger } from 'animejs';\n\nanimate(svg.createDrawable('.line'), {\n  draw: ['0 0', '0 1', '1 1'],\n  ease: 'inOutQuad',\n  duration: 2000,\n  delay: stagger(100),\n  loop: true\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listeners to Buttons\nDESCRIPTION: This snippet adds click event listeners to the buttons with the class 'revert'. When clicked, these buttons will trigger the `revertScope1` or `revertScope2` functions, reverting the animations and removing the event listeners associated with each scope.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscopescope-methodsrevert.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n$button1.addEventListener('click', revertScope1);\n$button2.addEventListener('click', revertScope2);\n```\n\n----------------------------------------\n\nTITLE: Animating with Tween Values Array in AnimeJS\nDESCRIPTION: Creates an animation sequence using an array of values for the x and y properties. The animation will automatically transition between each value in the array over the specified duration.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationkeyframes.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nanimate('.square', {\n  x: [0, 100, 200],\n  y: [0, 100, 200],\n  duration: 3000,\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Keyframe Animation Example - JavaScript\nDESCRIPTION: Demonstrates a simple keyframe animation using array syntax to define the from and to values for the x property.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationkeyframestween-values-keyframes.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nanimate(target: { x: [-100, 100] }); // Animate x from -100 to 100\n```\n\n----------------------------------------\n\nTITLE: Animating with HEXA Color Values in Anime.js\nDESCRIPTION: This example demonstrates how to use HEXA (HEX with alpha) color values in Anime.js animations. It targets an element with the class 'hexa' and animates its background color to '#FF4B4B33'.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationtween-value-typescolor-value.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nanimate('.hexa', {\n  background: '#FF4B4B33',\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Methods to Scope with Media Query Handling - JavaScript\nDESCRIPTION: This snippet demonstrates how to create a Scope with Anime.js, registering methods to handle responsive interactions. It conditionally creates draggable and animatable behaviors for a circle element based on window size, and registers mouse and pointer event handlers to update its position and scale dynamically.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscopescope-methodsadd.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createScope, createAnimatable, createDraggable } from 'animejs';\n\nconst scope = createScope({\n  mediaQueries: {\n    isSmall: '(max-width: 200px)',\n  }\n})\n.add(self => {\n\n  const [ $circle ] = utils.$('.circle');\n    \n  if (self.matches.isSmall) {\n    $circle.classList.add('draggable');\n    self.circle = createDraggable($circle, {\n      container: document.body,\n    });\n  } else {\n    $circle.classList.remove('draggable');\n    self.circle = createAnimatable($circle, {\n      x: 500,\n      y: 500,\n      ease: 'out(3)'\n    });\n  }\n  \n  let win = { w: window.innerWidth, h: window.innerHeight };\n  \n  self.add('refreshBounds', () => {\n    win.w = window.innerWidth;\n    win.h = window.innerHeight;\n  });\n      \n  self.add('onMouseMove', e => {\n    if (self.matches.isSmall) return;\n    const { w, h } = win;\n    const hw = w / 2;\n    const hh = h / 2;\n    const x = utils.clamp(e.clientX - hw, -hw, hw);\n    const y = utils.clamp(e.clientY - hh, -hh, hh);\n    if (self.circle.x) {\n      self.circle.x(x);\n      self.circle.y(y);\n    }\n  });\n  \n  self.add('onPointerDown', e => {\n    const { isSmall } = self.matches;\n    animate($circle, {\n      scale: [\n        { to: isSmall ? 1.25 : .25, duration: isSmall ? 50 : 150 },\n        { to: 1, duration: isSmall ? 250 : 500 },\n      ]\n    });\n  });\n});\n\nwindow.addEventListener('resize', scope.methods.refreshBounds);\nwindow.addEventListener('mousemove', scope.methods.onMouseMove);\ndocument.addEventListener('pointerdown', scope.methods.onPointerDown);\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of createDraggable with CSS Selector\nDESCRIPTION: Shows a simple example of creating a draggable element using a CSS selector '.square' as the target. This makes all elements with the class 'square' draggable.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggable.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createDraggable } from 'animejs';\n\ncreateDraggable('.square');\n```\n\n----------------------------------------\n\nTITLE: Setting Animation Precision in Anime.js - JavaScript\nDESCRIPTION: This snippet demonstrates how to set the precision of animated values in Anime.js. The 'engine.precision' property is adjusted based on user input, allowing for control over the rounding of decimal points in animations. A number higher than or equal to 0 enables rounding, while a negative number skips rounding altogether. The default precision is set to 4.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationengineengine-parametersprecision.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nengine.precision = 1; // values will be rounded to 1 decimal place ('120.7px')\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { engine, animate, utils } from 'animejs';\n\nconst [ $container ] = utils.$('.container');\nconst [ $range ] = utils.$('.range');\n\nfor (let i = 0; i < 150; i++) {\n  const $particle = document.createElement('div');\n  $particle.classList.add('particle');\n  $container.appendChild($particle);\n  animate($particle, {\n    x: utils.random(-10, 10, 2) + 'rem',\n    y: utils.random(-3, 3, 2) + 'rem',\n    scale: [{ from: 0, to: 1 }, { to: 0 }],\n    delay: utils.random(0, 1000),\n    loop: true,\n  });  \n}\n\nfunction onInput() {\n  engine.precision = this.value;\n}\n\n$range.addEventListener('input', onInput);\n```\n\n----------------------------------------\n\nTITLE: Animating Elements with From Parameter in Animejs\nDESCRIPTION: Demonstrates how to use the 'from' parameter to define starting values for various animation properties including opacity, translation, and rotation. The animation transitions from these specified values to their default target values.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationtween-parametersfrom.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate } from 'animejs';\n\nanimate('.square', {\n  opacity: { from: .5 }, // Animate from .5 opacity to 1 opacity\n  translateX: { from: '16rem' }, // From 16rem to 0rem\n  rotate: {\n    from: '-.75turn', // From -.75turn to 0turn\n    ease: 'inOutQuad',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Numerical Values with AnimeJS Stagger Function in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the stagger function with numerical values to create incremental animations. It shows how to increase translateX by 5.75rem and delay by 100ms for each element in a sequence.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationstaggerstagger-value-typesnumerical-value.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate, stagger } from 'animejs';\n\nanimate('.square', {\n  // Increase translateX by 5.75rem for each elements\n  x: stagger('5.75rem'),\n  // Increase delay by 100ms for each elements\n  delay: stagger(100)\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering the Three.js Scene with Anime.js Integration - JavaScript\nDESCRIPTION: This render function updates the Anime.js engine and renders the Three.js scene within a custom animation loop. It allows for real-time updates and ensures that animations are synchronized with the existing Three.js rendering.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationengineengine-methodsupdate.md#2025-04-18_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction render() {\n  engine.update(); // Manually update Anime.js engine\n  renderer.render(scene, camera); // Render Three.js scene\n}\n\n// Calls the builtin Three.js animation loop\nrenderer.setAnimationLoop(render);\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Draggable Element with Snap Parameters in Anime.js\nDESCRIPTION: This code snippet demonstrates how to create a draggable element using Anime.js with various snap parameters. It shows how to set a global snap value applied to both axes, as well as a specific snap array for the x-axis only.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-axes-parameterssnap.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createDraggable } from 'animejs';\n\ncreateDraggable('.square', {\n  container: '.grid',\n  snap: 56, // Global to both x and y\n  x: { snap: [0, 200] }, // Specific to x \n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Timeline Animation with onPause Callback\nDESCRIPTION: Complete example showing how to create an animation timeline with shape transformations and pause handling. Includes event listeners for animation control and target management.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-callbacksonpause.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTimeline, utils } from 'animejs';\n\nconst [ $animateButton, $pauseButton, $removeButton ] = utils.$('.button');\nconst [ $value ] = utils.$('.value');\nconst shapes = utils.$('.shape');\nconst [ $triangle, $square, $circle ] = shapes;\n\nlet paused = 0;\nlet alternate = 0;\nlet tl;\n\nconst animateShapes = () => {\n  alternate = !alternate;\n  const x = (alternate ? 15 : 0) + 'rem';\n  const rotate = (alternate ? 360 : -360);\n  tl = createTimeline({\n    defaults: { duration: 2000 },\n    onPause: () => $value.textContent = ++paused\n  })\n  .add($circle, { x }, 0)\n  .add($triangle, { x }, 0)\n  .add($square, { x }, 0)\n  .add(shapes, { rotate }, 0);\n}\n\nconst pauseTL = () => {\n  if (tl) tl.pause();\n}\n\nconst removeTargets = () => {\n  utils.remove(shapes);\n}\n\nanimateShapes();\n\n$animateButton.addEventListener('click', animateShapes);\n$pauseButton.addEventListener('click', pauseTL);\n$removeButton.addEventListener('click', removeTargets);\n```\n\n----------------------------------------\n\nTITLE: Implementing Draggable Elements with Custom Drag Speeds in Anime.js\nDESCRIPTION: This snippet demonstrates how to create draggable elements with different drag speeds using Anime.js. It shows two examples: one with increased speed and another with decreased speed.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-settingsdragspeed.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createDraggable } from 'animejs';\n\ncreateDraggable('.square', {\n  container: '.grid',\n  dragSpeed: 2,\n});\n\ncreateDraggable('.circle', {\n  container: '.grid',\n  dragSpeed: .5,\n});\n```\n\n----------------------------------------\n\nTITLE: Using the snap utility function for value rounding in anime.js\nDESCRIPTION: Demonstrates basic usage of the utils.snap function to round a number to the nearest increment or create a snapping function with a predefined increment parameter.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiessnap.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst snappedValue = utils.snap(value, increment);\nconst snapperFunction = utils.snap(increment);\n```\n\n----------------------------------------\n\nTITLE: Adjusting Global Animation Speed with Anime.js in JavaScript\nDESCRIPTION: This code snippet demonstrates setting the global speed of all animations in Anime.js to half speed, using the engine.speed parameter. It requires the Anime.js library and features a simple import statement.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationengineengine-parametersspeed.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nengine.speed = 0.5; // Run all animations at half speed\n```\n\n----------------------------------------\n\nTITLE: Using then() with createTimer in Anime.js\nDESCRIPTION: Demonstrates how to use the then() method with createTimer to execute a callback when the timer completes. This snippet shows both inline usage and async/await implementation.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-callbacksthen.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncreateTimer({duration: 500}).then(callback);\n\nasync function waitForTimerToComplete() {\n  return createTimer({ duration: 250 })\n}\n\nconst asyncTimer = await waitForTimerToComplete();\n```\n\n----------------------------------------\n\nTITLE: Creating a Timeline with Delay in Anime.js\nDESCRIPTION: Demonstrates creating a timeline with a 2000ms delay and adding sequential animations for different elements. Also includes a timer function to log the delayed time.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-playback-settingsdelay.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTimeline, createTimer, utils } from 'animejs';\n\nconst tl = createTimeline({\n  delay: 2000,\n})\n.add('.circle', { x: '15rem' })\n.add('.triangle', { x: '15rem' }, '-=500')\n.add('.square', { x: '15rem' }, '-=500');\n\n// For logging delayed time only\n\nconst [ $time ] = utils.$('.time');\n\ncreateTimer({\n  duration: 2000 + tl.duration,\n  onUpdate: self => $time.innerHTML = (2000 - self.currentTime) * -1,\n});\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Anime.js play() Method Demo\nDESCRIPTION: This HTML snippet defines the structure for demonstrating the play() method. It includes multiple rows with square elements that will be animated, and a control section with a play button that triggers the animation.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-methodsplay.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"medium row\">\n  <div class=\"square\"></div>\n</div>\n<div class=\"medium row\">\n  <div class=\"square\"></div>\n</div>\n<div class=\"medium row\">\n  <fieldset class=\"controls\">\n    <button class=\"button play\">Play</button>\n  </fieldset>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Draggable Component with Axes Parameters in AnimeJS\nDESCRIPTION: This snippet demonstrates how to create a draggable element with specific configurations for x and y axes. It shows how to set different snap values for each axis, apply a modifier function, set container padding, adjust release animations, and handle events.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-axes-parameters.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncreateDraggable('.square', {\n  x: { snap: 100 },\n  y: { snap: 50 },\n  modifier: utils.wrap(-200, 0),\n  containerPadding: 10,\n  releaseStiffness: 40,\n  releaseEase: 'out(3)',\n  onGrab: () => {},\n  onDrag: () => {},\n  onRelease: () => {},\n});\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Structure for Animation and Speed Control\nDESCRIPTION: This HTML snippet provides the structure for displaying the animated circle, speed value, and range input for controlling the animation speed. It works in conjunction with the JavaScript code to create an interactive animation speed control interface.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiessync.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large row\">\n  <div class=\"circle\"></div>\n  <pre class=\"large log row\">\n    <span class=\"label\">speed</span>\n    <span class=\"speed value\">1.00</span>\n  </pre>\n</div>\n<div class=\"medium row\">\n  <fieldset class=\"controls\">\n    <input type=\"range\" min=0 max=5 value=1 step=.01 class=\"range\" />\n  </fieldset>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Initializing Anime.js Scope\nDESCRIPTION: This code snippet initializes an Anime.js scope using the `createScope` function. It configures the scope with a root element selector, default animation properties (duration and easing), and media queries. The media queries are defined for mobile devices and reduced motion preference.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscopescope-parameters.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createScope, animate } from 'animejs';\n\ncreateScope({\n  root: '.section',\n  defaults: {\n    duration: 250,\n    ease: 'out(4)',\n  },\n  mediaQueries: {\n    mobile: '(max-width: 640px)',\n    reducedMotion: '(prefers-reduced-motion)',\n  }\n})\n.add( ctx => {\n  const isMobile = ctx.matches.mobile;\n  const reduceMotion = ctx.matches.reducedMotion;\n  animate(targets, {\n    x: isMobile ? 0 : '100vw',\n    y: isMobile ? '100vh' : 0,\n    duration: reduceMotion ? 0 : 750\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Creating and Controlling Timeline with Dynamic Framerate in Anime.js\nDESCRIPTION: This code creates an Anime.js timeline with an initial framerate of 60 fps and sets up event listeners to dynamically update the framerate based on user input. It animates multiple elements and allows real-time adjustment of the animation speed.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-playback-settingsframerate.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTimeline, utils } from 'animejs';\n\nconst [ $range ] = utils.$('.range');\nconst [ $fps ] = utils.$('.fps');\n\nconst tl = createTimeline({\n  frameRate: 60,\n  loop: true,\n})\n.add('.circle', { x: '15rem' })\n.add('.triangle', { x: '15rem' }, '-=500')\n.add('.square', { x: '15rem' }, '-=500');\n\nconst updateFps = () => {\n  const { value } = $range;\n  $fps.innerHTML = value;\n  tl.fps = value;\n}\n\n$range.addEventListener('input', updateFps);\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Animation Demo\nDESCRIPTION: HTML markup for the animation demo interface, including display elements for duration value, animated squares, and a range input control for adjusting the animation duration.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-methodsstretch.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<pre class=\"large log row\">\n  <span class=\"label\">total duration</span>\n  <span class=\"value\">0</span>\n</pre>\n<div class=\"medium row\">\n  <div class=\"square\"></div>\n</div>\n<div class=\"medium row\">\n  <div class=\"square\"></div>\n</div>\n<div class=\"medium centered row\">\n  <fieldset class=\"controls\">\n    <input type=\"range\" min=100 max=2000 value=1000 step=100 class=\"seek range\" />\n  </fieldset>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Draggable onSnap Callback in AnimeJS\nDESCRIPTION: Creates a draggable element with snap functionality and a callback to count snap events. The code demonstrates how to use createDraggable with snap settings and update a counter display when snap events occur.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-callbacksonsnap.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createDraggable, utils } from 'animejs';\n\nconst [ $value ] = utils.$('.value');\n\nlet snaps = 0;\n\ncreateDraggable('.square', {\n  container: '.grid',\n  snap: 16,\n  modifier: utils.snap(16), // also snap the element while draggin\n  onSnap: () => $value.textContent = ++snaps\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Timeline with onBegin Callback in AnimeJS\nDESCRIPTION: Demonstrates creating a timeline with a custom onBegin callback that updates DOM content. The timeline includes multiple animations with a 1000ms delay before the callback executes.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-callbacksonbegin.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTimeline, utils } from 'animejs';\n\nconst [ $value ] = utils.$('.value');\n\nconst tl = createTimeline({\n  delay: 1000, // Delays the onBegin() callback by 1000ms\n  onBegin: self => $value.textContent = self.began\n})\n.add('.circle', { x: '15rem' })\n.add('.triangle', { x: '15rem' })\n.add('.square', { x: '15rem' });\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Draggable Element in Anime.js\nDESCRIPTION: This HTML snippet shows the required DOM structure for implementing a draggable element. It includes a container with the 'grid' and 'square-grid' classes, and the draggable element with 'square' and 'draggable' classes.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-axes-parameterssnap.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large grid square-grid\">\n  <div class=\"square draggable\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Timer Loop Counter with AnimeJS\nDESCRIPTION: Creates a timer with loop functionality that updates UI elements showing the loop count and current iteration time. Uses utility functions for DOM selection and implements both onLoop and onUpdate callbacks.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-callbacksonloop.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTimer, utils } from 'animejs';\n\nconst [ $loops ] = utils.$('.loops');\nconst [ $time ] = utils.$('.time');\n\nlet loops = 0;\n\ncreateTimer({\n  loop: true,\n  duration: 1000,\n  onLoop: self => $loops.innerHTML = ++loops,\n  onUpdate: self => $time.innerHTML = self.iterationCurrentTime,\n});\n```\n\n----------------------------------------\n\nTITLE: Animating Elements on Scroll with Enter Callback - Anime.js - JavaScript\nDESCRIPTION: This snippet sets up an animation on a '.square' element that triggers when the user scrolls backward and meets a specified threshold. It updates a value displayed on the screen each time the enter threshold is met. The animation utilizes the onScroll method from the Anime.js library and requires the library to be imported. The key parameters include 'container' for the scrolling element and 'enter' defining the point where the callback is triggered.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscrollscrollobserver-callbacksonenterbackward.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { animate, onScroll, utils } from 'animejs';\n\nconst [ $value ] = utils.$('.value');\n\nlet entered = 0;\n\nanimate('.square', {\n  x: '15rem',\n  rotate: '1turn',\n  ease: 'linear',\n  autoplay: onScroll({\n    container: '.scroll-container',\n    enter: 'bottom-=50 top',\n    leave: 'top+=60 bottom',\n    sync: true,\n    debug: true,\n    onEnterBackward: () => $value.textContent = ++entered,\n  })\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Random Values to AnimeJS Animations\nDESCRIPTION: Example showing how to use random utility to set dynamic properties for animation, including position, rotation, and scale transformations.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiesrandom.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { utils } from 'animejs';\n\nutils.set('.square', {\n  x: () => utils.random(2, 18, 2) + 'rem',\n  rotate: () => utils.random(0, 180),\n  scale: () => utils.random(.25, 1.5, 3),\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Rotatable Clock Animation with Radians in AnimeJS\nDESCRIPTION: Demonstrates how to create an interactive clock animation using AnimeJS with radians as the rotation unit. The code tracks mouse movement to rotate a clock element, calculating angles using Math.atan2 and handling angle transitions across the full rotation range.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimatableanimatable-settingsunit.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createAnimatable, utils } from 'animejs';\n\nconst $demos = document.querySelector('#docs-demos');\nconst [ $clock ] = utils.$('.clock');\nlet bounds = $clock.getBoundingClientRect();\nconst refreshBounds = () => bounds = $clock.getBoundingClientRect();\n\nconst clock = createAnimatable($clock, {\n  rotate: { unit: 'rad' }, // Set the unit to 'rad'\n  duration: 400,\n});\n\nconst { PI } = Math;\nlet lastAngle = 0\nlet angle = PI / 2;\n\nconst onMouseMove = e => {\n  const { width, height, left, top } = bounds;\n  const x = e.clientX - left - width / 2;\n  const y = e.clientY - top - height / 2;\n  const currentAngle = Math.atan2(y, x);\n  const diff = currentAngle - lastAngle;\n  angle += diff > PI ? diff - 2 * PI : diff < -PI ? diff + 2 * PI : diff;\n  lastAngle = currentAngle;\n  clock.rotate(angle); // Pass the new angle value in rad\n}\n\nwindow.addEventListener('mousemove', onMouseMove);\n$demos.addEventListener('scroll', refreshBounds);\n```\n\n----------------------------------------\n\nTITLE: Basic Interpolation in JavaScript using Anime.js\nDESCRIPTION: Demonstrates how to use the interpolate utility function to calculate a value between two numbers based on a progress value. It also shows how to create an interpolation function for repeated use.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiesinterpolate.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst interpolatedValue = utils.interpolate(start, end, progress);\nconst interpolatorFunction = utils.interpolate(start, end);\n```\n\n----------------------------------------\n\nTITLE: Animating Elements with ScrollObserver in JavaScript\nDESCRIPTION: The snippet demonstrates how to configure the ScrollObserver settings in animejs to animate elements when they enter or leave the viewport. Dependencies include the animejs library, and key parameters include container and target for the element selection, as well as axis for defining the scroll direction. The onEnter, onLeave, and onUpdate functions are used as hooks for respective scroll events.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscrollscrollobserver-settings.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nanimate('.square', {\n  x: 100,\n  autoplay: onScroll({\n  ┌───────────────────────────────────────┌\n  │ container: '.container', │\n  │ target: '.section',      ├─ Settings\n  │ axis: 'y',               │\n  └──────────────────────────────────────────┌\n    enter: 'bottom top',\n    leave: 'top bottom',\n    sync: true,\n    onEnter: () => {},\n    onLeave: () => {},\n    onUpdate: () => {},\n  })\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Draggable with Velocity Multiplier\nDESCRIPTION: This code snippet demonstrates how to initialize the Anime.js draggable functionality with the `velocityMultiplier` setting.  It shows examples using both a static number (0 and 5) to control the post-release velocity of the dragged elements within a specified container.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-settingsvelocitymultiplier.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createDraggable } from 'animejs';\n\ncreateDraggable('.square', {\n  container: '.grid',\n  velocityMultiplier: 0,\n});\n\ncreateDraggable('.circle', {\n  container: '.grid',\n  velocityMultiplier: 5,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Draggable Axis Mapping with Anime.js\nDESCRIPTION: Demonstrates how to create a draggable element with custom axis mapping. The x-axis movement is mapped to rotateY transformation and y-axis movement is mapped to z-index positioning. Includes initial setup of z-index using utils.set().\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-axes-parametersmapto.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createDraggable, utils } from 'animejs';\n\nutils.set('.square', { z: 100 });\n\ncreateDraggable('.square', {\n  x: { mapTo: 'rotateY' },\n  y: { mapTo: 'z' },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Default Timer Loop Callback in AnimeJS\nDESCRIPTION: Shows how to globally configure the default onLoop callback by updating the engine defaults. The callback receives the timer instance as an argument.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-callbacksonloop.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { engine } from 'animejs';\nengine.defaults.onLoop = self => console.log(self.id);\n```\n\n----------------------------------------\n\nTITLE: Advanced Random Pick Implementation - JavaScript\nDESCRIPTION: Shows how to use randomPick with AnimeJS utils.set() to randomly assign various properties including position, scale, color, and content to elements with the 'letter' class.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiesrandom-pick.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { utils } from 'animejs';\n\nutils.set('.letter', {\n  x: () => utils.randomPick([5, 9, 13, 17]) + 'rem',\n  scale: () => utils.randomPick([1, 1.25, 1.5, 1.75]),\n  color: () => `var(--hex-${utils.randomPick(['red', 'orange', 'yellow'])})`,\n  innerHTML: () => utils.randomPick('ABCD'),\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Timeline Completion with Anime.js in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a timeline using Anime.js, add animations to it, and implement a function to complete the timeline instantly. It also shows how to attach this function to a button click event.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-methodscomplete.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTimeline, utils } from 'animejs';\n\nconst [ $completeButton ] = utils.$('.complete');\n\nconst tl = createTimeline({\n  loop: true,\n})\n.add('.circle',   { x: '15rem' })\n.add('.triangle', { x: '15rem' }, 500)\n.add('.square',   { x: '15rem' }, 1000);\n\nconst completeTimeline = () => tl.complete();\n\n$completeButton.addEventListener('click', completeTimeline);\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Composition Mode Demonstration in Anime.js\nDESCRIPTION: This HTML structure creates a layout for demonstrating three different composition modes in Anime.js. It contains three squares with class names corresponding to their composition modes ('none', 'replace', and 'blend') and instructions for user interaction.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationtween-parameterscomposition.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large spaced-evenly row\">\n  <div class=\"col\">\n    <div class=\"centered row\">\n      <span class=\"label centered\">none<br><br></span>\n      <div class=\"square none\"></div>\n    </div>\n  </div>\n  <div class=\"col\">\n    <div class=\"centered row\">\n      <span class=\"label centered\">replace<br><br></span>\n      <div class=\"square replace\"></div>\n    </div>\n  </div>\n  <div class=\"col\">\n    <div class=\"centered row\">\n      <span class=\"label centered\">blend<br><br></span>\n      <div class=\"square blend\"></div>\n    </div>\n  </div>\n</div>\n\n<div class=\"medium spaced-evenly centered row\">\n  <div class=\"label\"><br><br>(Hover the squares)</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting Global Default Composition Mode in Anime.js\nDESCRIPTION: This snippet demonstrates how to change the default composition mode globally for all animations by updating the engine.defaults object in Anime.js.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationtween-parameterscomposition.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { engine } from 'animejs';\nengine.defaults.composition = 'blend';\n```\n\n----------------------------------------\n\nTITLE: Creating Timers with onBegin Callback\nDESCRIPTION: Shows how to create timers with custom onBegin callbacks and update DOM elements. Creates two timers: one with an onBegin callback to update status, and another to track and display the current time.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-callbacksonbegin.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTimer, utils } from 'animejs';\n\nconst [ $status ] = utils.$('.status');\nconst [ $time ] = utils.$('.time');\n\nconst timer = createTimer({\n  delay: 2000,\n  duration: 2000,\n  onBegin: self => $status.innerHTML = 'true'\n});\n\nconst logTimer = createTimer({\n  duration: 4000,\n  onUpdate: self => $time.innerHTML = timer.currentTime\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Mouse-tracking Animation with Revert Functionality - JavaScript\nDESCRIPTION: Creates an interactive animation where circles follow mouse movement with staggered positioning. Includes functionality to revert the animation using a button click and handles cleanup of event listeners.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimatableanimatable-methodsrevert.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst $demos = document.querySelector('#docs-demos');\nconst $demo = $demos.querySelector('.docs-demo.is-active');\nconst [ $revertButton ] = utils.$('.revert');\nlet bounds = $demo.getBoundingClientRect();\nconst refreshBounds = () => bounds = $demo.getBoundingClientRect();\n\nconst circles = createAnimatable('.circle', {\n  x: stagger(50, { from: 'center', start: 100 }),\n  y: stagger(200, { from: 'center', start: 200 }),\n  ease: 'out(4)',\n});\n\nconst onMouseMove = e => {\n  const { width, height, left, top } = bounds;\n  const hw = width / 2;\n  const hh = height / 2;\n  const x = utils.clamp(e.clientX - left - hw, -hw, hw);\n  const y = utils.clamp(e.clientY - top - hh, -hh, hh);\n  circles.x(x).y(y);\n}\n\nconst revertAnimatable = () => {\n  window.removeEventListener('mousemove', onMouseMove);\n  circles.revert();\n}\n\n$revertButton.addEventListener('click', revertAnimatable);\nwindow.addEventListener('mousemove', onMouseMove);\n$demos.addEventListener('scroll', refreshBounds);\n```\n\n----------------------------------------\n\nTITLE: Implementing Animation Pause Functionality with Anime.js in JavaScript\nDESCRIPTION: This code demonstrates how to create and pause an animation using Anime.js. It creates an animation that moves squares along the x-axis with staggered delays, and adds a pause button event listener to control the animation.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-methodspause.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate, utils, stagger } from 'animejs';\n\nconst [ $pauseButton ] = utils.$('.pause');\n\nconst animation = animate('.square', {\n  x: '17rem',\n  alternate: true,\n  ease: 'inOutSine',\n  loop: true,\n  delay: stagger(100),\n});\n\nconst pauseAnimation = () => animation.pause();\n\n$pauseButton.addEventListener('click', pauseAnimation);\n```\n\n----------------------------------------\n\nTITLE: Creating Draggable Elements with Scroll Speed - JavaScript\nDESCRIPTION: This code snippet demonstrates how to initialize a draggable square element with a specified scrolling speed within a designated container using the Anime.js library. The scroll speed is adjustable through a numerical value or a refreshable function.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-settingsscrollspeed.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createDraggable } from 'animejs';\n\ncreateDraggable('.square', {\n  container: '.scroll-container',\n  scrollSpeed: 2,\n});\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Draggable Element\nDESCRIPTION: Defines the HTML structure required for the draggable functionality, including a container grid, a counter display, and the draggable square element.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-callbacksonsettle.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large padded grid square-grid\">\n  <pre class=\"large log row\">\n    <span class=\"label\">stops</span>\n    <span class=\"value\">0</span>\n  </pre>\n  <div class=\"square draggable\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Applying Different Modifiers in AnimeJS Animations\nDESCRIPTION: Demonstrates how to apply different modifiers to animations, including using utility functions and custom modifiers. Shows modifiers applied both globally to an animation and to specific properties.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationtween-parametersmodifier.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate, utils } from 'animejs';\n\nanimate('.row:nth-child(1) .square', {\n  x: '17rem',\n  modifier: utils.round(0), // Round to 0 decimals\n  duration: 4000,\n});\n\nanimate('.row:nth-child(2) .square', {\n  x: '85rem',\n  modifier: v => v % 17,\n  duration: 4000,\n});\n\nanimate('.row:nth-child(3) .square', {\n  x: '17rem',\n  y: {\n    to: '70rem',\n    modifier: v => Math.cos(v) / 2, // Specific modifier to y property\n  },\n  duration: 4000,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Looped Timer with Counter Display\nDESCRIPTION: Creates a timer that loops indefinitely, updates a loop counter, and displays the current iteration time. Uses utility functions for DOM selection and implements loop and update callbacks.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-playback-settingsloop.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTimer, utils } from 'animejs';\n\nconst [ $loops ] = utils.$('.loops');\nconst [ $time ] = utils.$('.time');\n\nlet loops = 0;\n\ncreateTimer({\n  loop: true,\n  duration: 1000,\n  onLoop: () => $loops.innerHTML = ++loops,\n  onUpdate: self => $time.innerHTML = self.iterationCurrentTime\n});\n```\n\n----------------------------------------\n\nTITLE: Animating Multiple Properties with Default Units in Anime.js WAAPI\nDESCRIPTION: This example demonstrates animating multiple properties of an element using Anime.js WAAPI. It animates opacity, x-position, rotation, width, and height, relying on default units for numeric values.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationweb-animation-apiimprovements-to-the-web-animation-apidefault-units.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { waapi } from 'animejs';\n\nwaapi.animate('.square', {\n  opacity: .5,\n  x: 250,\n  rotate: 45,\n  width: 40,\n  height: 40,\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing ScrollObserver Instance\nDESCRIPTION: Creates a ScrollObserver instance using the onScroll() function, which allows tracking and controlling scroll-related animations and interactions\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscrollscrollobserver-methods.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst scrollObserver = onScroll(parameters);\n```\n\n----------------------------------------\n\nTITLE: Basic MapRange Usage in JavaScript\nDESCRIPTION: Demonstrates the basic usage of mapRange utility function to map a value from one range to another.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiesmap-range.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst mappedValue = utils.mapRange(value, fromLow, fromHigh, toLow, toHigh);\nconst mapperFunction = utils.mapRange(fromLow, fromHigh, toLow, toHigh);\n```\n\n----------------------------------------\n\nTITLE: Animating with clamp utility in Anime.js\nDESCRIPTION: Shows how to use the clamp utility in animation settings. It compares a normal animation with a clamped animation using the clamp function as a modifier.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiesclamp.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate, utils } from 'animejs';\n\nanimate('.normal', {\n  rotate: '1turn',\n  duration: 3000,\n  loop: true,\n  ease: 'inOut',\n});\n\nanimate('.clamped', {\n  rotate: '1turn',\n  modifier: utils.clamp(.25, .75), // Used as a function\n  duration: 3000,\n  loop: true,\n  ease: 'inOut',\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Global Autoplay Default in Anime.js\nDESCRIPTION: Shows how to change the default autoplay parameter value globally by updating the engine.defaults object in Anime.js.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-playback-settingsautoplay.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { engine } from 'animejs';\nengine.defaults.autoplay = false;\n```\n\n----------------------------------------\n\nTITLE: Implementing onSettle Callback with Anime.js Draggable\nDESCRIPTION: Demonstrates how to create a draggable element with an onSettle callback that counts and displays the number of times the element has stopped moving. The callback is triggered when the dragged element comes to a complete stop after being released.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-callbacksonsettle.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createDraggable, utils } from 'animejs';\n\nconst [ $value ] = utils.$('.value');\n\nlet stops = 0;\n\ncreateDraggable('.square', {\n  container: '.grid',\n  onSettle: () => $value.textContent = ++stops\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Staggered Animation with Custom Easing\nDESCRIPTION: Example showing how to create a staggered animation with a custom power-based easing function. This snippet imports the required modules and animates multiple elements with a 100ms delay between each animation.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationweb-animation-apiapi-differences-with-native-waapieasing.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { waapi, stagger } from 'animejs';\n\nwaapi.animate('.square', {\n  translate: '17rem',\n  ease: 'inOut(6)',\n  delay: stagger(100)\n});\n```\n\n----------------------------------------\n\nTITLE: Animation with onPause Callback Implementation in Anime.js\nDESCRIPTION: Complete example showing how to implement the onPause callback in an animation. This creates an animation that moves a circle element horizontally while incrementing a counter each time the animation is paused via buttons or target removal.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-callbacksonpause.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate, utils } from 'animejs';\n\nconst [ $animateButton, $pauseButton, $removeButton ] = utils.$('.button');\nconst [ $value ] = utils.$('.value');\nconst [ $circle ] = utils.$('.circle');\n\nlet paused = 0;\nlet alternate = 0;\nlet animation;\n\nconst animateX = () => {\n  alternate = !alternate;\n  animation = animate($circle, {\n    x: () => (alternate ? 16 : 0) + 'rem',\n    duration: 2000,\n    onPause: () => $value.innerHTML = ++paused,\n  });\n}\n\nconst pauseAnimation = () => {\n  if (animation) animation.pause();\n}\n\nconst removeTarget = () => {\n  utils.remove($circle);\n}\n\nanimateX();\n\n$animateButton.addEventListener('click', animateX);\n$pauseButton.addEventListener('click', pauseAnimation);\n$removeButton.addEventListener('click', removeTarget);\n```\n\n----------------------------------------\n\nTITLE: Linking an Animation with ScrollObserver in animejs\nDESCRIPTION: This JavaScript snippet demonstrates how to create an animation using the animejs library and link it to a ScrollObserver instance. The ScrollObserver watches scroll events in a specified container and updates the animation accordingly. Dependencies include the animejs library imported using named imports. The main parameters include the target element for animation and scroll-related configuration in the onScroll function. The snippet assumes the presence of elements matching class selectors within an HTML structure.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscrollscrollobserver-methodslink.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { animate, onScroll } from 'animejs';\n\nconst animation = animate('.square', {\n  x: '15rem',\n  rotate: '1turn',\n  ease: 'linear',\n});\n\nconst scrollObserver = onScroll({\n  container: '.scroll-container',\n  enter: 'bottom-=50 top',\n  leave: 'top+=60 bottom',\n  sync: true,\n  debug: true,\n});\n\nscrollObserver.link(animation);\n```\n\n----------------------------------------\n\nTITLE: Setting Global Loop Delay in AnimeJS\nDESCRIPTION: Demonstrates how to set the default loop delay globally for all animations using the engine.defaults object.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-playback-settingsplayback-loopdelay.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { engine } from 'animejs';\nengine.defaults.loopDelay = 500;\n```\n\n----------------------------------------\n\nTITLE: Practical Animation Example Using radToDeg in Anime.js\nDESCRIPTION: Demonstrates a practical application of the radToDeg utility in an animation context. Creates two clock elements, one rotating in radians and the other in degrees, showing their synchronized rotation.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiesrad-to-deg.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate, createAnimatable, utils } from 'animejs';\n\nconst degAnimatable = createAnimatable('.deg', {\n  rotate: { unit: 'deg', duration: 0 }\n});\n\nconst [ $rad ] = utils.$('.rad');\n\nconst degAnimation = animate($rad, {\n  rotate: (Math.PI * 2) + 'rad',\n  ease: 'linear',\n  loop: true,\n  onUpdate: () => {\n    const radians = utils.get($rad, 'rotate', false);\n    degAnimatable.rotate(utils.radToDeg(radians));\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Draggable Revert Method with AnimeJS\nDESCRIPTION: Demonstrates how to create a draggable element and implement revert functionality using AnimeJS. The code creates a draggable square element with buttons to revert it to its initial position and enable dragging.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-methodsrevert.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createDraggable, utils } from 'animejs';\n\nconst [ $revertButton ] = utils.$('.revert');\nconst [ $enableButton ] = utils.$('.enable');\n\nconst draggable = createDraggable('.square');\n\nconst revertDraggable = () => draggable.revert();\nconst enableDraggable = () => draggable.enable();\n\n$revertButton.addEventListener('click', revertDraggable);\n$enableButton.addEventListener('click', enableDraggable);\n```\n\n----------------------------------------\n\nTITLE: Accessing Draggable Properties in JavaScript with AnimeJS\nDESCRIPTION: This snippet shows how to access various properties of a draggable instance, such as progressX, progressY, and velocity. These properties provide information about the current state of the draggable element.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-properties.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndraggable.progressX\ndraggable.progressY\ndraggable.velocity\n```\n\n----------------------------------------\n\nTITLE: Configuring Draggable Container Padding in Anime.js\nDESCRIPTION: This snippet demonstrates how to create a draggable element with custom container padding using Anime.js. It sets up a draggable square within a grid container, specifying different padding values for each side.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-settingscontainerpadding.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createDraggable } from 'animejs';\n\ncreateDraggable('.square', {\n  container: '.grid',\n  containerPadding: [ 16, 32, -16, 64], // top, right, bottom, left\n  scrollThreshold: 0,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Scoped Animation in Anime.js using JavaScript\nDESCRIPTION: This snippet demonstrates how to use the `createScope` function from Anime.js to limit queries to a particular DOM subtree, defined by a CSS selector or a DOM element. Dependencies include the Anime.js library, and key functionality involves initializing animations within a defined scope.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscopescope-parametersroot.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createScope, animate } from 'animejs';\n\ncreateScope({ root: '.row:nth-child(2)' })\n.add(() => {\n  animate('.square', {\n    x: '17rem',\n    loop: true,\n    alternate: true\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Anime.js Scroll Animation with Numeric Thresholds\nDESCRIPTION: This JavaScript snippet uses Anime.js to create a scroll-triggered animation on an element with the class '.square'. The animation moves the element along the x-axis, rotates it, and sets its duration, easing, and loop properties.  The `onScroll` function is used to trigger the animation based on the scroll position of the element relative to the scroll container. The `enter` and `leave` properties define the scroll thresholds for triggering the animation.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscrollscrollobserver-thresholdsnumeric-values.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { animate, onScroll } from 'animejs';\n\nanimate('.square', {\n  x: '15rem',\n  rotate: '1turn',\n  duration: 2000,\n  alternate: true,\n  loop: true,\n  ease: 'inOutQuad',\n  autoplay: onScroll({\n    container: '.scroll-container',\n    // -48px from the top of the target, 80px from the top of the container \n    enter: '80 -48',\n    // 250% from the top of the target, 67.5% from the top of the container\n    leave: '67.5% 250%',\n    debug: true\n  })\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Y-Axis Draggable Behavior with Anime.js\nDESCRIPTION: This snippet demonstrates how to create draggable elements with different y-axis configurations using Anime.js. It shows enabling and disabling vertical movement for square elements.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-axes-parametersy.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createDraggable } from 'animejs';\n\ncreateDraggable('.square.enabled', {\n  y: true\n});\n\ncreateDraggable('.square.disabled', {\n  y: false\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring X-axis Draggable Behavior in Anime.js\nDESCRIPTION: This example demonstrates how to enable or disable the x-axis dragging functionality using the 'createDraggable' function from Anime.js. It shows two implementations: one with x-axis enabled (default) and another with x-axis explicitly disabled.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-axes-parametersx.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createDraggable } from 'animejs';\n\ncreateDraggable('.square.enabled', {\n  x: true\n});\n\ncreateDraggable('.square.disabled', {\n  x: false\n});\n```\n\n----------------------------------------\n\nTITLE: Using Custom Easing with Anime.js WAAPI\nDESCRIPTION: Example demonstrating how to use the custom elastic easing function with Anime.js' WAAPI implementation. The ease parameter accepts an easing function and animates an element 100px horizontally.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationweb-animation-apiapi-differences-with-native-waapieasing.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nwaapi.animate('.square', {\n  x: 100,\n  ease: eases.outElastic(1.25, .1)\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Global Default onLoop Callback in Anime.js\nDESCRIPTION: Shows how to change the default onLoop callback globally by updating the engine.defaults object. This example sets a function that logs the timeline's ID every time a loop completes.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-callbacksonloop.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { engine } from 'animejs';\nengine.defaults.onLoop = self => console.log(self.id);\n```\n\n----------------------------------------\n\nTITLE: Defining draw property values\nDESCRIPTION: Examples of different draw property values that control how much of an SVG line is visible. The values range from 0 to 1, with pairs of numbers indicating the start and end points of visibility.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationsvgcreatedrawable.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndrawable.draw = '0 1';      |[———————————————————]|\n\n                            0         .5\ndrawable.draw = '0 .5';     |[—————————]          |\n\n                                 .25       .75\ndrawable.draw = '.25 .75';  |     [—————————]     |\n\n                                      .5          1\ndrawable.draw = '.5 1';     |          [—————————]|\n\n                                                1 1\ndrawable.draw = '1 1';      |                   []|\n```\n\n----------------------------------------\n\nTITLE: Implementing Animatable Methods in Anime.js\nDESCRIPTION: This code example shows a practical implementation of animatable methods in Anime.js. It creates an animatable circle element and uses methods to animate its position and background color based on mouse movement.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimatableanimatable-methodssetters.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createAnimatable, utils } from 'animejs';\n\nconst $demos = document.querySelector('#docs-demos');\nconst $demo = $demos.querySelector('.docs-demo.is-active');\nlet bounds = $demo.getBoundingClientRect();\nconst refreshBounds = () => bounds = $demo.getBoundingClientRect();\n\nconst circle = createAnimatable('.circle', {\n  x: 0,\n  y: 0,\n  backgroundColor: 0,\n  ease: 'outExpo',\n});\n\nconst rgb = [164, 255, 79];\n\n// Sets new durations and easings\ncircle.x(0, 500, 'out(2)');\ncircle.y(0, 500, 'out(3)');\ncircle.backgroundColor(rgb, 250);\n\nconst onMouseMove = e => {\n  const { width, height, left, top } = bounds;\n  const hw = width / 2;\n  const hh = height / 2;\n  const x = utils.clamp(e.clientX - left - hw, -hw, hw);\n  const y = utils.clamp(e.clientY - top - hh, -hh, hh);\n  rgb[0] = utils.mapRange(x, -hw, hw, 0, 164);\n  rgb[2] = utils.mapRange(x, -hw, hw, 79, 255);\n  circle.x(x).y(y).backgroundColor(rgb); // Update values\n}\n\nwindow.addEventListener('mousemove', onMouseMove);\n$demos.addEventListener('scroll', refreshBounds);\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Anime.js Timeline Demo\nDESCRIPTION: This HTML snippet defines the structure for demonstrating the restart() method. It includes shape elements (triangle, square, circle) that will be animated by the timeline, and a control button to trigger the restart function.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-methodsrestart.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large row\">\n  <div class=\"medium pyramid\">\n    <div class=\"triangle\"></div>\n    <div class=\"square\"></div>\n    <div class=\"circle\"></div>\n  </div>\n</div>\n<div class=\"medium row\">\n  <fieldset class=\"controls\">\n    <button class=\"button restart\">Restart</button>\n  </fieldset>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Anime.js Scroll Animation with Relative Positions\nDESCRIPTION: This JavaScript snippet uses Anime.js to animate a '.square' element when it enters and leaves a specified scroll container. The 'onScroll' function is used to trigger the animation based on scroll position, and relative values are applied to the 'enter' and 'leave' thresholds to define when the animation should start and stop.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscrollscrollobserver-thresholdsrelative-position-values.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate, onScroll } from 'animejs';\n\nanimate('.square', {\n  x: '15rem',\n  rotate: '1turn',\n  duration: 2000,\n  alternate: true,\n  loop: true,\n  ease: 'inOutQuad',\n  autoplay: onScroll({\n    container: '.scroll-container',\n    enter: 'center+=1em top-=100%',\n    leave: 'center-=1em bottom+=100%',\n    debug: true\n  })\n});\n```\n\n----------------------------------------\n\nTITLE: Animating Elements on Scroll using Anime.js - JavaScript\nDESCRIPTION: This snippet demonstrates how to use Anime.js to animate elements when specific scroll events occur. It uses `animate` and `onScroll` functions from the Anime.js library and configures various animation settings such as `enter`, `leave`, and `autoplay`. The snippet requires Anime.js and appropriate HTML structure for the scroll container and elements.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscrollscrollobserver-methodsrefresh.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { animate, onScroll } from 'animejs';\n\nconst scrollSettings = {\n  enter: 20,\n  leave: 60,\n}\n\nconst animation = animate('.square', {\n  x: '15rem',\n  rotate: '1turn',\n  ease: 'linear',\n  autoplay: onScroll({\n    container: '.scroll-container',\n    enter: () => `bottom-=${scrollSettings.enter} top`,\n    leave: () => `top+=${scrollSettings.leave} bottom`,\n    sync: .5,\n    debug: true,\n  })\n});\n\nanimate(scrollSettings, {\n  enter: 90,\n  leave: 100,\n  loop: true,\n  alternate: true,\n  modifier: utils.round(0),\n  onUpdate: () => animation._autoplay.refresh()\n});\n```\n\n----------------------------------------\n\nTITLE: Toggling Engine Pause Behavior\nDESCRIPTION: This snippet provides the functionality to toggle the 'pauseOnDocumentHidden' setting. It updates the engine's visibility behavior and modifies the button text accordingly to reflect the current state.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationengineengine-parameterspauseondocumenthidden.md#2025-04-18_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst toggleSetting = () => {\n  const isPauseWhenHidden = engine.pauseOnDocumentHidden;\n  if (isPauseWhenHidden) {\n    engine.pauseOnDocumentHidden = false;\n    $toggle.innerHTML = '○ Disabled (Switch tab to see the effect)';\n  } else {\n    engine.pauseOnDocumentHidden = true;\n    $toggle.innerHTML = '● Enabled (Switch tab to see the effect)';\n  }\n}\n\n$toggle.addEventListener('click', toggleSetting);\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Anime.js onComplete Demo\nDESCRIPTION: Shows the HTML markup structure used for demonstrating the onComplete callback. It includes a div with class 'circle' that will be animated, and a pre element that displays the completion status of the animation.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-callbacksoncomplete.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large row\">\n  <div class=\"circle\"></div>\n  <pre class=\"large log row\">\n    <span class=\"label\">completed</span>\n    <span class=\"value\">false</span>\n  </pre>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Animating Elements on Scroll Using Anime.js - JavaScript\nDESCRIPTION: This code snippet sets up a scrolling animation using the Anime.js library, where an 'onEnterForward' callback updates a counter indicating how many times the target element has entered the viewport.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscrollscrollobserver-callbacksonenterforward.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate, onScroll, utils } from 'animejs';\n\nconst [ $value ] = utils.$('.value');\n\nlet entered = 0;\n\nanimate('.square', {\n  x: '15rem',\n  rotate: '1turn',\n  ease: 'linear',\n  autoplay: onScroll({\n    container: '.scroll-container',\n    enter: 'bottom-=50 top',\n    leave: 'top+=60 bottom',\n    sync: true,\n    debug: true,\n    onEnterForward: () => $value.textContent = ++entered,\n  })\n});\n```\n\n----------------------------------------\n\nTITLE: Anime.js ScrollObserver Thresholds Example\nDESCRIPTION: This code snippet demonstrates how to use ScrollObserver with custom enter and leave thresholds to control an animation. The animation is triggered when the bottom of the container meets the top of the target and when the top of the container meets the bottom of the target.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscrollscrollobserver-thresholds.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nanimate('.square', {\n  x: 100,\n  autoplay: onScroll({\n\n    container: '.container',\n    target: '.section',\n    axis: 'y',\n  ┬─────────────────────┐\n  │ enter: 'bottom top',     │─ Thresholds\n  │ leave: 'top bottom',     │\n  └─────────────────────┘\n    sync: true,\n    onEnter: () => {},\n    onLeave: () => {},\n    onUpdate: () => {},\n  })\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Animation Scopes with Anime.js in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to create custom scopes with Anime.js, setting default animation properties like easing. The snippet iterates through row elements and applies a specific animation to child '.square' elements. It requires 'animejs' for animation functions and an element selection utility method 'utils.$'.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscopescope-parametersdefaults.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createScope, animate } from 'animejs';\n\nconst rows = utils.$('.row');\n\nrows.forEach(($row, i) => {\n  createScope({\n    root: $row,\n    defaults: { ease: `out(${1 + i})` }\n  })\n  .add(() => {\n    animate('.square', {\n      x: '17rem',\n      loop: true,\n      alternate: true\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Animating with RGB Color Values in Anime.js\nDESCRIPTION: This example shows how to use RGB color values in Anime.js animations. It targets an element with the class 'rgb' and animates its background color to 'rgb(255, 168, 40)'.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationtween-value-typescolor-value.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nanimate('.rgb',  {\n  background: 'rgb(255, 168, 40)',\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Draggable Elements with minVelocity in Anime.js\nDESCRIPTION: This snippet demonstrates how to create draggable elements using Anime.js with different minVelocity settings. It shows two examples: one with default minVelocity and another with a custom value.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-settingsminvelocity.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createDraggable } from 'animejs';\n\ncreateDraggable('.square', {\n  container: '.grid',\n  minVelocity: 0,\n});\n\ncreateDraggable('.circle', {\n  container: '.grid',\n  minVelocity: 10,\n});\n```\n\n----------------------------------------\n\nTITLE: Animating DOM Elements with AnimeJS\nDESCRIPTION: Demonstrates how to target and animate single and multiple DOM elements using AnimeJS. Shows scaling a single element and moving multiple elements horizontally using querySelector and querySelectorAll.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationtargetsdom-elements.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate } from 'animejs';\n\nconst $demo = document.querySelector('#selector-demo');\nconst $squares = $demo.querySelectorAll('.square');\n\nanimate($demo, { scale: .75 });\nanimate($squares, { x: '23rem' });\n```\n\n----------------------------------------\n\nTITLE: Implementing Shuffle Animation with Anime.js in JavaScript\nDESCRIPTION: Shows a practical implementation of the shuffle utility in combination with other Anime.js functions. It sets up event listeners and animates shuffled elements on button click.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiesshuffle.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { utils } from 'animejs';\n\nconst [ $shuffle ] = utils.$('button');\nconst squares = utils.$('.square');\nconst x = stagger('3.2rem');\n\n// Initial squares x position\nutils.set(squares, { x });\n\nconst shuffle = () => animate(utils.shuffle(squares), { x });\n\n$shuffle.addEventListener('click', shuffle);\n```\n\n----------------------------------------\n\nTITLE: Importing and Creating an AnimJS Timer in JavaScript\nDESCRIPTION: This snippet demonstrates how to import the createTimer function from AnimJS and create a new timer with optional parameters. The createTimer function returns a Timer object.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimer.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTimer } from 'animejs';\n\nconst timer = createTimer(parameters);\n```\n\n----------------------------------------\n\nTITLE: Modifying Default onComplete Callback in Anime.js\nDESCRIPTION: This snippet shows how to change the default onComplete callback globally for all Anime.js timers. It imports the engine from Anime.js and sets a new default function that logs the timer's ID.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-callbacksoncomplete.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { engine } from 'animejs';\nengine.defaults.onComplete = self => console.log(self.id);\n```\n\n----------------------------------------\n\nTITLE: Animating with Anime.js WAAPI Module\nDESCRIPTION: Demonstrates the simplified syntax for animating an element using Anime.js WAAPI module. It applies a translation of 100 pixels to an element with the class 'circle'.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationweb-animation-apiimprovements-to-the-web-animation-apisensible-defaults.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nwaapi.animate('.circle', { translate: '100px' });\n```\n\n----------------------------------------\n\nTITLE: Creating Alternating Timer Animation with Loop Counter\nDESCRIPTION: Shows how to create a timer animation with alternating direction and loop counting functionality. Includes loop and update callbacks to display current iteration count and time.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-playback-settingsalternate.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate } from 'animejs';\n\nconst [ $loops ] = utils.$('.loops');\nconst [ $time ] = utils.$('.time');\n\nlet loops = 0;\n\ncreateTimer({\n  loop: true,\n  duration: 1000,\n  alternate: true,\n  onLoop: () => $loops.innerHTML = ++loops,\n  onUpdate: self => $time.innerHTML = self.iterationCurrentTime\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Anime.js utilities and functions\nDESCRIPTION: This snippet imports necessary functions and utilities from the Anime.js library, including `utils`, `stagger`, `createScope`, and `createTimeline`. These modules will be used to select elements, create animations with staggered delays, and manage animation scopes.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscopescope-methodsrevert.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { utils, stagger, createScope, createTimeline } from 'animejs';\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Clock Animation Demo\nDESCRIPTION: The HTML markup for the clock animation example. It defines two clock elements with labels, structured in a responsive grid layout. Each clock will demonstrate a different modifier behavior when animated.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimatableanimatable-settingsmodifier.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large centered row\">\n  <div class=\"col\">\n    <div class=\"clock clock-1\"></div>\n    <div class=\"label\">snapped</div>\n  </div>\n  <div class=\"col\">\n    <div class=\"clock clock-2\"></div>\n    <div class=\"label\">inverted</div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating a Timeline with Default Parameters in Anime.js\nDESCRIPTION: This example demonstrates how to create an Anime.js timeline with default parameters that will be applied to all animations within the timeline. The defaults include easing, duration, loop count, and direction settings.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-playback-settingsdefaults.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTimeline } from 'animejs';\n\nconst tl = createTimeline({\n  defaults: {\n    ease: 'inOutExpo',\n    duration: 500,\n    loop: 2,\n    reversed: true,\n    alternate: true,\n  }\n})\n.add('.square', { x: '15rem' })\n.add('.circle', { x: '15rem' })\n.add('.triangle', { x: '15rem' });\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Anime.js Animation Scopes\nDESCRIPTION: This HTML snippet provides the structure needed for applying the Anime.js animation. Each '.row' element contains a '.square' div that is the target for animations, demonstrating how multiple identical structures can use shared scope defaults for consistent animations.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscopescope-parametersdefaults.md#2025-04-18_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"medium row\">\n  <div class=\"square\"></div>\n  <div class=\"padded label\">scope 1</div>\n</div>\n<div class=\"medium row\">\n  <div class=\"square\"></div>\n  <div class=\"padded label\">scope 2</div>\n</div>\n<div class=\"medium row\">\n  <div class=\"square\"></div>\n  <div class=\"padded label\">scope 3</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Animating with ScrollObserver using Position Shorthands - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to use Anime.js to animate a '.square' element based on scroll position within a '.scroll-container'.  The `onScroll` function is used to trigger the animation when the element enters or leaves the specified scroll positions (center top, center bottom).\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscrollscrollobserver-thresholdspositions-shorthands.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate, onScroll } from 'animejs';\n\nanimate('.square', {\n  x: '15rem',\n  rotate: '1turn',\n  duration: 2000,\n  alternate: true,\n  loop: true,\n  ease: 'inOutQuad',\n  autoplay: onScroll({\n    container: '.scroll-container',\n    enter: 'center top',\n    leave: 'center bottom',\n    debug: true\n  })\n});\n```\n\n----------------------------------------\n\nTITLE: Animating Multiple Targets with Anime.js\nDESCRIPTION: Example showing how to animate both a JavaScript object (vector2D) and a DOM element (.square) simultaneously. Uses utils.roundPad for number formatting and updates a log element with the current vector2D state.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationtargetsarray-of-targets.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate, utils } from 'animejs';\n\nconst [ $log ] = utils.$('.demo code');\n\nconst vector2D = { x: 0, y: 0 };\n\nanimate([vector2D, '.square'], {\n  x: '17rem',\n  modifier: utils.roundPad(2).padStart(5, '0'),\n  onRender: () => $log.textContent = JSON.stringify(vector2D),\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Autoplay Default in Anime.js\nDESCRIPTION: Code snippet showing how to change the default autoplay setting globally for all timelines by updating the engine.defaults object in Anime.js.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-playback-settingsautoplay.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { engine } from 'animejs';\nengine.defaults.autoplay = false;\n```\n\n----------------------------------------\n\nTITLE: Basic Utils.get() Function Signature\nDESCRIPTION: Shows the basic syntax for using utils.get() to retrieve a target's property value. The function accepts a target element, property name, and optional unit parameter.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiesget.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst value = utils.get(target, property, unit);\n```\n\n----------------------------------------\n\nTITLE: Pausing and Resuming Anime.js Engine\nDESCRIPTION: This JavaScript code pauses the Anime.js engine, displays a countdown on a button, and resumes the engine after the countdown. It uses `engine.pause()` to stop animations and `engine.resume()` to restart them. The `setInterval` function is used to manage the countdown and update the button text.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationengineengine-methodspause.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { engine, animate, utils } from 'animejs';\n\nconst [ $container ] = utils.$('.container');\nconst [ $add, $pause ] = utils.$('button');\n\nfunction addAnimation() {\n  const $particle = document.createElement('div');\n  $particle.classList.add('particle');\n  $container.appendChild($particle);\n  animate($particle, {\n    x: utils.random(-10, 10, 2) + 'rem',\n    y: utils.random(-3, 3, 2) + 'rem',\n    scale: [{ from: 0, to: 1 }, { to: 0 }],\n    loop: true,\n  });\n}\n\nlet timeout = 3;\nlet interval;\n\nfunction pauseEngine() {\n  engine.pause();\n  $pause.setAttribute('disabled', 'true');\n  $pause.innerHTML = `Resume in ${timeout--} seconds`;\n  interval = setInterval(() => {\n    if (timeout <= 0) {\n      clearInterval(interval);\n      engine.resume();\n      $pause.removeAttribute('disabled');\n      $pause.innerHTML = 'Pause for 3 seconds';\n      timeout = 3;    \n    } else {\n      $pause.innerHTML = `Resume in ${timeout--} seconds`;\n    }\n  }, 1000);\n}\n\n$add.addEventListener('click', addAnimation);\n$pause.addEventListener('click', pauseEngine);\n```\n\n----------------------------------------\n\nTITLE: Implementing Draggable Callbacks in Anime.js\nDESCRIPTION: Example showing how to create a draggable element with snap points, container constraints, and callback functions. The code demonstrates setting up x/y snap points, modifier functions, container padding, stiffness, and ease settings along with basic callback hooks.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-callbacks.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncreateDraggable('.square', {\n  x: { snap: 100 },\n  y: { snap: 50 },\n  modifier: utils.wrap(-200, 0),\n  containerPadding: 10,\n  containerStiffness: 40,\n  containerEase: 'out(3)',\n  onGrab: () => {},\n  onDrag: () => {},\n  onRelease: () => {},\n});\n```\n\n----------------------------------------\n\nTITLE: Targeting Elements with AnimeJS CSS Selectors\nDESCRIPTION: Demonstrates different ways to target DOM elements using CSS selectors in AnimeJS animations. Shows examples of class, ID, and nth-child selectors with various animation properties.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationtargetscss-selector.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate } from 'animejs';\n\nanimate('.square', { x: '17rem' });\nanimate('#css-selector-id', { rotate: '1turn' });\nanimate('.row:nth-child(3) .square', { scale: [1, .5, 1] });\n```\n\n----------------------------------------\n\nTITLE: Implementing onAfterResize Callback in AnimeJS Draggable\nDESCRIPTION: This snippet demonstrates how to use the onAfterResize callback in AnimeJS Draggable. It creates a draggable element and updates a counter each time the container or target sizes change. The callback also triggers an animation to bring the dragged element into view.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-callbacksonafterresize.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createDraggable, utils } from 'animejs';\n\nconst [ $value ] = utils.$('.value');\n\nlet resizes = 0;\n\nconst draggable = createDraggable('.square', {\n  container: '.grid',\n  onAfterResize: self => {\n    $value.textContent = ++resizes;\n    self.animateInView(1000, 30);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Engine Pause Behavior\nDESCRIPTION: This snippet demonstrates how to configure the Anime.js engine to pause animations when the document is hidden. It sets the 'pauseOnDocumentHidden' property and outlines its effect on animation playback.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationengineengine-parameterspauseondocumenthidden.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nengine.pauseOnDocumentHidden = true;\n```\n\n----------------------------------------\n\nTITLE: Implementing Timer Restart Functionality with AnimeJS in JavaScript\nDESCRIPTION: This code snippet demonstrates how to create and restart a timer using AnimeJS. It sets up a timer that updates a time display and adds a click event listener to a restart button. The timer's current time is displayed and can be reset to 0 using the restart method.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-methodsrestart.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTimer, utils } from 'animejs';\n\nconst [ $restartButton ] = utils.$('.restart');\nconst [ $time ] = utils.$('.time');\n\nconst timer = createTimer({\n  onUpdate: self => $time.innerHTML = self.currentTime\n});\n\nconst restartTimer = () => timer.restart();\n\n$restartButton.addEventListener('click', restartTimer);\n```\n\n----------------------------------------\n\nTITLE: Creating Manual Timer Control with Anime.js\nDESCRIPTION: Demonstrates how to create a timer with autoplay disabled and manually play it using a button click event. The timer updates a time display on each update.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-playback-settingsautoplay.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst [ $time ] = utils.$('.time');\nconst [ $playButton ] = utils.$('.play');\n\nconst timer = createTimer({\n  autoplay: false,\n  onUpdate: self => $time.innerHTML = self.currentTime\n});\n\nconst playTimer = () => timer.play();\n\n$playButton.addEventListener('click', playTimer);\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Animations with Different Durations in AnimeJS\nDESCRIPTION: Example showing three animations with different durations (0ms, 500ms, and 2000ms). The first animation completes instantly, the second takes half a second, and the third takes two seconds to complete.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-playback-settingsduration.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate } from 'animejs';\n\nanimate('.dur-0', {\n  x: '17rem',\n  duration: 0,\n});\n\nanimate('.dur-500', {\n  x: '17rem',\n  duration: 500,\n});\n\nanimate('.dur-2000', {\n  x: '17rem',\n  duration: 2000\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing and Animating Circles with Anime.js\nDESCRIPTION: This snippet creates animatable circles and sets up mouse move event handling to animate their positions. It uses createAnimatable, stagger, and utility functions from Anime.js.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimatableanimatable-settingsduration.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createAnimatable, utils, stagger } from 'animejs';\n\nconst $demos = document.querySelector('#docs-demos');\nconst $demo = $demos.querySelector('.docs-demo.is-active');\nlet bounds = $demo.getBoundingClientRect();\nconst refreshBounds = () => bounds = $demo.getBoundingClientRect();\n\nconst circles = createAnimatable('.circle', {\n  x: 0, // Imediatly set the value without animation\n  y: stagger(200, { from: 'center', start: 200 }),\n  ease: 'out(4)',\n});\n\nconst onMouseMove = e => {\n  const { width, height, left, top } = bounds;\n  const hw = width / 2;\n  const hh = height / 2;\n  const x = utils.clamp(e.clientX - left - hw, -hw, hw);\n  const y = utils.clamp(e.clientY - top - hh, -hh, hh);\n  circles.x(x).y(y);\n}\n\nwindow.addEventListener('mousemove', onMouseMove);\n$demos.addEventListener('scroll', refreshBounds);\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Anime.js Animation Demo\nDESCRIPTION: The HTML markup that structures the animation demo, containing the elements being animated (triangle, square, circle) and a counter display that shows the number of updates triggered by the onUpdate callback.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-callbacksonupdate.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large row\">\n  <div class=\"medium pyramid\">\n    <div class=\"triangle\"></div>\n    <div class=\"square\"></div>\n    <div class=\"circle\"></div>\n  </div>\n  <pre class=\"large log row\">\n    <span class=\"label\">updates</span>\n    <span class=\"value\">0</span>\n  </pre>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Toggle Anime.js Time Unit Setting\nDESCRIPTION: This function `toggleSetting` toggles the Anime.js `engine.timeUnit` between seconds and milliseconds. It also disables the appropriate button based on the current time unit, enhancing user interface feedback.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationengineengine-parameterstimeunit-seconds-milliseconds.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst toggleSetting = () => {\n  const isUsingSeconds = engine.timeUnit === 's';\n  engine.timeUnit = isUsingSeconds ? 'ms' : 's';\n  $ms.disabled = isUsingSeconds;\n  $s.disabled = !isUsingSeconds;\n}\n```\n\n----------------------------------------\n\nTITLE: Set Anime.js Global Time Unit\nDESCRIPTION: This snippet shows how to globally change the time unit used by Anime.js to either seconds ('s') or milliseconds ('ms') using `engine.timeUnit`. The code also illustrates how the default duration is automatically adjusted to match the new time unit.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationengineengine-parameterstimeunit-seconds-milliseconds.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nengine.timeUnit = 's'; // Change the time unit globally to seconds\nconsole.log(engine.engine.defaults.duration); // -> Returns 1\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Anime.js Staggered Animation\nDESCRIPTION: The HTML structure used for the staggered animation example, containing a pyramid of shapes (triangle, square, and circle) that will be animated with different timing delays.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationstaggertimeline-positions-staggering.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large row\">\n  <div class=\"medium pyramid\">\n    <div class=\"triangle\"></div>\n    <div class=\"square\"></div>\n    <div class=\"circle\"></div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating Anime.js Timeline with Stagger Effect\nDESCRIPTION: This code snippet demonstrates how to create an Anime.js timeline with a stagger effect using the `stagger` function. It imports `createtimeline` and `stagger` from the animejs library and defines a timeline with multiple animations, each applying a different 'from' value to the stagger function to control the starting point of the animation on a series of square elements.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationstaggerstagger-parametersstagger-from.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createtimeline, stagger } from 'animejs';\n\nconst tl = createTimeline({\n  loop: true,\n  alternate: true,\n})\n.add('.row:nth-child(1) .square', {\n  scale: 0,\n  delay: stagger(50, { from: 8 }),\n})\n.add('.row:nth-child(2) .square', {\n  scale: 0,\n  delay: stagger(50, { from: 'first' }),\n})\n.add('.row:nth-child(3) .square', {\n  scale: 0,\n  delay: stagger(50, { from: 'center' }),\n})\n.add('.row:nth-child(4) .square', {\n  scale: 0,\n  delay: stagger(50, { from: 'last' }),\n});\n```\n\n----------------------------------------\n\nTITLE: Animating with Interpolation in JavaScript using Anime.js\nDESCRIPTION: Demonstrates how to use the interpolate utility within animation configurations. It shows two animations: one normal rotation and one using interpolation for rotation.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiesinterpolate.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate, utils } from 'animejs';\n\nanimate('.normal', {\n  rotate: '1turn',\n  duration: 3000,\n  loop: true,\n  ease: 'inOut',\n});\n\nanimate('.interpolated', {\n  rotate: '1turn',\n  modifier: utils.interpolate(0, 12), // Interpolates 0 to 12 by passing the rotate progress value 0 to 1\n  duration: 3000,\n  loop: true,\n  ease: 'inOut',\n});\n```\n\n----------------------------------------\n\nTITLE: Using clamp utility in Anime.js\nDESCRIPTION: Demonstrates how to use the clamp utility function from Anime.js to restrict values or create a clamping function. It shows basic usage and chaining with other utilities.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiesclamp.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst clampedValue = utils.clamp(value, min, max);\nconst clamperFunction = utils.clamp(min, max);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst clampBetween0and100 = utils.clamp(0, 100);\nclampBetween0and100(90);  // 90\nclampBetween0and100(120); // 100\nclampBetween0and100(-15); // 0\n\nconst clampAndRound = utils.clamp(0, 100).round(2); // Clamp then round to 2 decimal places\nclampAndRound(72.7523); // 72.75\nclampAndRound(120.2514); // 100\n```\n\n----------------------------------------\n\nTITLE: Import onScroll from Anime.js\nDESCRIPTION: Imports the `onScroll` function along with `animate` from the Anime.js library. The `onScroll` function is used to create a ScrollObserver, which triggers animations based on scroll position.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscroll.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { onScroll, animate } from 'animejs';\n```\n\n----------------------------------------\n\nTITLE: Complete Anime.js Example with Promise Handling\nDESCRIPTION: A full example showing how to import Anime.js modules, create an animation with multiple options, and use the then() method to update UI text when the animation is fulfilled.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationweb-animation-apiapi-differences-with-native-waapifinished.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { waapi, utils } from 'animejs';\n\nconst [ $value ] = utils.$('.value');\n\nconst animation = waapi.animate('.circle', {\n  translate: '16rem',\n  loop: 2,\n  alternate: true,\n});\n\nanimation.then(() => $value.textContent = 'fulfilled');\n```\n\n----------------------------------------\n\nTITLE: Enabling Draggable Elements with Anime.js in JavaScript\nDESCRIPTION: This code snippet demonstrates how to create a draggable element, disable it, and then enable it using a button click event. It utilizes the createDraggable and utils functions from the animejs library.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-methodsenable.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createDraggable, utils } from 'animejs';\n\nconst [ $enableButton ] = utils.$('.enable');\n\nconst draggable = createDraggable('.square');\n\ndraggable.disable();\n\nconst enableDraggable = () => draggable.enable();\n\n$enableButton.addEventListener('click', enableDraggable);\n```\n\n----------------------------------------\n\nTITLE: Creating Draggable Object in JavaScript\nDESCRIPTION: The snippet demonstrates how to create a Draggable object using 'createDraggable' function, detailing object initialization with target elements and parameters. This instance object 'draggable' allows managing its behavior via methods like 'disable', 'enable', and 'revert'. Requires anime.js library version 4.0.0 or higher.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-methods.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst draggable = createDraggable(target, parameters);\n```\n\n----------------------------------------\n\nTITLE: Setting Global Default Duration in AnimeJS\nDESCRIPTION: Shows how to modify the default animation duration globally using the engine.defaults object.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationtween-parametersduration.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { engine } from 'animejs';\nengine.defaults.duration = 500;\n```\n\n----------------------------------------\n\nTITLE: Interactive Timer Stretch Implementation\nDESCRIPTION: Complete implementation of a timer stretch demo that includes creating a timer with update callback and handling range input events to dynamically adjust timer duration.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-methodsstretch.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate, utils } from 'animejs';\n\nconst [ $range ] = utils.$('.range');\nconst [ $duration ] = utils.$('.duration');\nconst [ $time ] = utils.$('.time');\n\nconst timer = createTimer({\n  duration: 2000,\n  onUpdate: self => $time.innerHTML = self.currentTime\n});\n\nconst stretchTimer = () => {\n  timer.stretch(+$range.value);\n  $duration.innerHTML = utils.round(timer.duration, 0);\n  timer.restart();\n}\n\n$range.addEventListener('input', stretchTimer);\n```\n\n----------------------------------------\n\nTITLE: Implementing Timer Complete Method in AnimeJS\nDESCRIPTION: Demonstrates how to create and complete a timer using AnimeJS. The code creates a timer with a 100000ms duration that updates a display element, and includes a button to trigger instant completion.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-methodscomplete.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTimer, utils } from 'animejs';\n\nconst [ $completeButton ] = utils.$('.complete');\nconst [ $time ] = utils.$('.time');\n\nconst timer = createTimer({\n  duration: 100000,\n  onUpdate: self => $time.innerHTML = self.currentTime\n});\n\nconst completeTimer = () => timer.complete();\n\n$completeButton.addEventListener('click', completeTimer);\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Anime.js Timeline Animation\nDESCRIPTION: HTML structure containing the target elements for the Anime.js timeline animation. It includes a pyramid with triangle, square, and circle elements that will be animated according to the timeline positioning.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetime-position.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large row\">\n  <div class=\"medium pyramid\">\n    <div class=\"triangle\"></div>\n    <div class=\"square\"></div>\n    <div class=\"circle\"></div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Advanced Interpolation Examples in JavaScript using Anime.js\nDESCRIPTION: Shows more complex usage of the interpolate function, including creating a reusable interpolation function, chaining with rounding, and using it within animation configurations.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiesinterpolate.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst interpolateBetween0and100 = utils.interpolate(0, 100);\ninterpolateBetween0and100(0.5);  // 50\ninterpolateBetween0and100(0.75); // 75\ninterpolateBetween0and100(0.25); // 25\n\nconst interpolateAndRound = utils.interpolate(0, 100).round(2); // Interpolate then round to 2 decimal places\ninterpolateAndRound(0.677523); // 67.75\ninterpolateAndRound(1.202514); // 100\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for AnimeJS Timeline Example\nDESCRIPTION: This HTML snippet provides the structure for displaying the results of the AnimeJS timeline 'call' method example. It includes three columns to show the output of functions A, B, and C.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-methodscall.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large centered row\">\n  <div class=\"col\">\n    <pre class=\"large log row\">\n      <span class=\"label\">function A</span>\n      <span class=\"function-A value lcd\">--</span>\n    </pre>\n  </div>\n  <div class=\"col\">\n    <pre class=\"large log row\">\n      <span class=\"label\">function B</span>\n      <span class=\"function-B value lcd\">--</span>\n    </pre>\n  </div>\n  <div class=\"col\">\n    <pre class=\"large log row\">\n      <span class=\"label\">function C</span>\n      <span class=\"function-C value lcd\">--</span>\n    </pre>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing onComplete and onUpdate Callbacks in Anime.js Timer\nDESCRIPTION: This example demonstrates the usage of onComplete and onUpdate callbacks in an Anime.js timer. It creates a timer with a duration of 2000ms, updates the status when completed, and continuously updates the current time.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-callbacksoncomplete.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTimer, utils } from 'animejs';\n\nconst [ $status ] = utils.$('.status');\nconst [ $time ] = utils.$('.time');\n\ncreateTimer({\n  duration: 2000,\n  onComplete: self => $status.innerHTML = 'true',\n  onUpdate: self => $time.innerHTML = self.currentTime\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Animatable Clocks with Different Easing Functions in Anime.js\nDESCRIPTION: This snippet demonstrates how to create two animatable clocks using Anime.js, each with a different easing function. It includes functions to rotate the clocks based on mouse movement.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimatableanimatable-settingsease.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createAnimatable, utils, stagger } from 'animejs';\n\nconst clock1 = createAnimatable('.clock-1', {\n  rotate: { unit: 'rad' },\n  ease: 'linear',\n});\n\nconst clock2 = createAnimatable('.clock-2', {\n  rotate: { unit: 'rad' },\n  ease: 'outElastic',\n});\n\nconst rotateClock = (animatable) => {\n  const PI = Math.PI;\n  let angle = PI / 2;\n  let lastAngle = 0;\n  return e => {\n    const [ $clock ] = animatable.targets;\n    const { width, height, left, top } = $clock.getBoundingClientRect();\n    const x = e.clientX - left - width / 2;\n    const y = e.clientY - top - height / 2;\n    const currentAngle = Math.atan2(y, x);\n    const diff = currentAngle - lastAngle;\n    angle += diff > PI ? diff - 2 * PI : diff < -PI ? diff + 2 * PI : diff;\n    lastAngle = currentAngle;\n    animatable.rotate(angle);\n  }\n}\n\nconst rotateClock1 = rotateClock(clock1);\nconst rotateClock2 = rotateClock(clock2);\n\nconst onMouseMove = e => {\n  rotateClock1(e);\n  rotateClock2(e);\n}\n\nwindow.addEventListener('mousemove', onMouseMove);\n```\n\n----------------------------------------\n\nTITLE: Animating Scroll with Synchronization Mode in Anime.js\nDESCRIPTION: This snippet demonstrates how to utilize the onScroll() method from Anime.js to synchronize animation with scroll position, utilizing parameters to define the synchronization behavior.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscrollscrollobserver-synchronisation-modes.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nanimate('.square', {\n  x: 100,\n  autoplay: onScroll({\n    container: '.container',\n    target: '.section',\n    axis: 'y',\n    enter: 'bottom top',\n    leave: 'top bottom',\n    sync: true,            // Synchronisation Mode\n    onEnter: () => {},\n    onLeave: () => {},\n    onUpdate: () => {},\n  })\n});\n```\n\n----------------------------------------\n\nTITLE: Chaining Multiple Utility Functions in JavaScript\nDESCRIPTION: Demonstrates how to chain multiple utility functions together to create a more complex operation. This example normalizes a value and rounds it to one decimal place.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitieschain-able-utility-functions.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst normalizeAndRound = utils.mapRange(0, 255, 0, 1).round(1);\nnormalizeAndRound(128); // '0.5'\nnormalizeAndRound(64);  // '0.3'\n```\n\n----------------------------------------\n\nTITLE: Setting Global Framerate Defaults in AnimeJS\nDESCRIPTION: Demonstrates how to modify the default framerate globally using the engine.defaults object. This affects all subsequent timer instances.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-playback-settingsframerate.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { engine } from 'animejs';\nengine.defaults.frameRate = 30;\n```\n\n----------------------------------------\n\nTITLE: Scroll Layout Structure - HTML\nDESCRIPTION: This snippet provides the HTML structure necessary to demonstrate the scroll-enabled animations defined in the JavaScript snippet. It includes a scroll container with elements that respond to scroll events.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscrollscrollobserver-callbacksonupdate.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"scroll-container scroll-y\">\n  <div class=\"scroll-content grid square-grid\">\n    <div class=\"scroll-section padded sticky\">\n      <div class=\"large row\">\n        <pre class=\"large log row\">\n          <span class=\"label\">updates</span>\n          <span class=\"value\">0</span>\n        </pre>\n      </div>\n    </div>\n    <div class=\"scroll-section padded\">\n      <div class=\"large row\">\n        <div class=\"square\"></div>\n      </div>\n    </div>\n    <div class=\"scroll-section\">\n    </div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Anime.js Stagger Parameters\nDESCRIPTION: Demonstrates the stagger method with multiple configuration options including start, from, reversed, ease, and grid parameters. Used to create sequential or grid-based animation effects.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationstaggerstagger-parameters.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nstagger(\n  '1rem',\n  {\n    start: 100,\n    from: 2,\n    reversed: false,\n    ease: 'outQuad',\n    grid: [8, 8],\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Animatable Properties in Anime.js\nDESCRIPTION: This snippet demonstrates how to use animatable properties as methods to set new values, durations, and easing functions. It shows the syntax for calling these methods and explains their parameters and return values.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimatableanimatable-methodssetters.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nanimatable.property(value, duration, easing);\n```\n\n----------------------------------------\n\nTITLE: Implementing Draggable ScrollInView with AnimeJS\nDESCRIPTION: Creates a draggable element and implements scroll-into-view functionality. The code demonstrates how to initialize a draggable element and trigger scrolling animation when the element is outside the viewport. Includes event listener setup and position configuration.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-methodsscrollinview.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createDraggable } from 'animejs';\n\nconst [ $scrollInView ] = utils.$('.scroll-button');\n\nconst draggable = createDraggable('.square', {\n  container: '.scroll-container',\n});\n\nconst scrollInView = () => {\n  draggable.scrollInView(400, 100);\n}\n\n// Set the draggable position outside the scroll viewport\ndraggable.x = 120;\ndraggable.y = 200;\n\n$scrollInView.addEventListener('click', scrollInView);\n```\n\n----------------------------------------\n\nTITLE: Animating Scroll Updates with Anime.js - JavaScript\nDESCRIPTION: This snippet imports the necessary functions from Anime.js and sets up an animation on a square element that updates a displayed value during scroll events. It uses the onScroll callback to handle synchronization with the scroll container.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscrollscrollobserver-callbacksonupdate.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate, onScroll, utils } from 'animejs';\n\nconst [ $value ] = utils.$('.value');\n\nlet updates = 0;\n\nanimate('.square', {\n  x: '15rem',\n  rotate: '1turn',\n  ease: 'linear',\n  autoplay: onScroll({\n    container: '.scroll-container',\n    enter: 'bottom-=50 top',\n    leave: 'top+=60 bottom',\n    sync: .5,\n    debug: true,\n    onUpdate: () => $value.textContent = ++updates,\n  })\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing onBeforeUpdate Callback in Anime.js Timeline\nDESCRIPTION: This code creates an Anime.js timeline with an onBeforeUpdate callback. The callback updates a DOM element with the number of updates. The timeline animates three shapes sequentially with loops and delays.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-callbacksonbeforeupdate.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTimeline, utils } from 'animejs';\n\nconst [ $value ] = utils.$('.value');\n\nlet updates = 0;\n\nconst tl = createTimeline({\n  defaults: { duration: 500 },\n  loopDelay: 250,\n  loop: true,\n  onBeforeUpdate: self => $value.textContent = ++updates\n})\n.add('.circle', { x: '15rem' })\n.add('.triangle', { x: '15rem' }, '+=250')\n.add('.square', { x: '15rem' }, '+=250');\n```\n\n----------------------------------------\n\nTITLE: Native WAAPI Animation with Promise.all\nDESCRIPTION: Demonstrates the equivalent approach using native Web Animation API. This example creates multiple animations and uses Promise.all with the finished property to track completion of all animations.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationweb-animation-apiapi-differences-with-native-waapifinished.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst targets = document.querySelectorAll('.square');\nconst animations = [];\n\ntargets.forEach(($el, i) => {\n  animations[i] = $el.animate({\n    translate: '100px',\n  }, {\n    fill: 'forwards',\n    duration: 500,\n  });\n});\n\nPromise.all(\n  animations\n    .map((animation) => animation.finished)\n    .then(() => console.log('completed'))\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Different Composition Modes with Interactive Animation Example in Anime.js\nDESCRIPTION: This code demonstrates how to use different composition modes ('none', 'replace', and 'blend') in Anime.js animations. It sets up a base animation for three squares and adds interactive hover animations with different composition behaviors for each square.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationtween-parameterscomposition.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate, utils } from 'animejs';\n\nconst squares = utils.$('.square');\nconst [ $none, $replace, $blend ] = squares;\n\n// Animate each square with a different composition mode\n\nsquares.forEach($square => {\n  // 'none', 'replace', 'blend'\n  const mode = $square.classList[1];\n  animate($square, {\n    scale: [.5, 1],\n    alternate: true,\n    loop: true,\n    duration: 750,\n    composition: mode,\n  });\n});\n\n// Common animation parameters\n\nconst enter = { scale: 1.5, duration: 350 };\nconst leave = { scale: 1.0, duration: 250 };\n\n// Composition none animations\n\nconst enterNone = () => animate($none, {\n  composition: 'none', ...enter\n});\n\nconst leaveNone = () => animate($none, {\n  composition: 'none', ...leave\n});\n\n$none.addEventListener('mouseenter', enterNone);\n$none.addEventListener('mouseleave', leaveNone);\n\n// Composition replace animations\n\nconst enterReplace = () => animate($replace, {\n  composition: 'replace', ...enter\n});\n\nconst leaveReplace = () => animate($replace, {\n  composition: 'replace', ...leave\n});\n\n$replace.addEventListener('mouseenter', enterReplace);\n$replace.addEventListener('mouseleave', leaveReplace);\n\n// Composition blend animations\n\nconst enterBlend = () => animate($blend, {\n  composition: 'blend', ...enter\n});\n\nconst leaveBlend = () => animate($blend, {\n  composition: 'blend', ...leave\n});\n\n$blend.addEventListener('mouseenter', enterBlend);\n$blend.addEventListener('mouseleave', leaveBlend);\n```\n\n----------------------------------------\n\nTITLE: Creating and Using padStart Function with Examples\nDESCRIPTION: Examples demonstrating how to create a reusable padding function with predefined parameters and how to chain utility functions together to perform multiple operations like rounding and padding.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiespad-start.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst padTo5WithZeros = utils.padStart(5, '0');\npadTo5WithZeros('123');  // '00123'\npadTo5WithZeros(78);     // '00078'\npadTo5WithZeros('1234'); // '01234'\n\nconst roundAndPad = utils.round(2).padStart(5, '0'); // Round to 2 decimal places then pad to 5 characters\nroundAndPad(12.345);  // '12.35'\nroundAndPad(7.8);     // '07.80'\n```\n\n----------------------------------------\n\nTITLE: Importing Anime.js Engine\nDESCRIPTION: This snippet demonstrates how to import the `engine` object from the animejs library. The `engine` object provides access to global animation parameters like speed, fps, and precision, allowing you to configure the overall animation behavior.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationengineengine-parameters.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { engine } from 'animejs';\n```\n\n----------------------------------------\n\nTITLE: Timeline Stretch Method Implementation in JavaScript\nDESCRIPTION: Shows how to create and control an Anime.js timeline with the stretch method. Creates animations for multiple elements with different delays and allows dynamic duration adjustment through a range input.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-methodsstretch.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTimeline, utils } from 'animejs';\n\nconst [ $range ] = utils.$('.range');\nconst [ $totalDuration ] = utils.$('.value');\n\nconst tl = createTimeline({\n  loop: 1,\n  alternate: true,\n})\n.add('.circle',   { x: '15rem' })\n.add('.triangle', { x: '15rem' }, 500)\n.add('.square',   { x: '15rem' }, 1000);\n\nconst stretchTimeline = () => {\n  const newDuration = +$range.value;\n  $totalDuration.textContent = newDuration;\n  tl.stretch(newDuration).restart();\n}\n\nstretchTimeline();\n\n$range.addEventListener('input', stretchTimeline);\n```\n\n----------------------------------------\n\nTITLE: Configuring Draggable Cursor Settings in AnimeJS\nDESCRIPTION: This snippet demonstrates how to create draggable elements with custom cursor settings using AnimeJS. It shows two examples: one disabling custom cursor styling and another setting specific cursor styles for hover and grab states.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-settingscursor.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createDraggable } from 'animejs';\n\ncreateDraggable('.square', {\n  cursor: false\n});\n\ncreateDraggable('.circle', {\n  cursor: {\n    onHover: 'move',\n    onGrab: 'wait'\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using stretch() Method in Anime.js\nDESCRIPTION: Demonstrates how to use the stretch() method to modify animation duration. The animation moves squares horizontally with staggered timing, allowing runtime duration adjustment via a range input.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-methodsstretch.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate, utils, stagger } from 'animejs';\n\nconst [ $range ] = utils.$('.range');\nconst [ $totalDuration ] = utils.$('.value');\n\nconst animation = animate('.square', {\n  x: '17rem',\n  ease: 'inOutSine',\n  delay: stagger(200),\n});\n\nconst stretchAnimation = () => {\n  const newDuration = +$range.value;\n  $totalDuration.textContent = newDuration;\n  animation.stretch(newDuration).restart();\n}\n\nstretchAnimation();\n\n$range.addEventListener('input', stretchAnimation);\n```\n\n----------------------------------------\n\nTITLE: Creating a Timer with Custom Playback Rate and Interactive Controls\nDESCRIPTION: Demonstrates how to create a timer with a custom playback rate and implement interactive controls to adjust the speed in real-time. The timer updates a time display and allows changing the speed via a range input.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-playback-settingsplaybackrate.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTimer, utils } from 'animejs';\n\nconst [ $range ] = utils.$('.range');\nconst [ $speed ] = utils.$('.speed');\nconst [ $time ] = utils.$('.time');\n\nconst timer = createTimer({\n  playbackRate: 2,\n  onUpdate: self => $time.innerHTML = utils.round(self.currentTime, 0),\n});\n\nconst updateSpeed = () => {\n  const speed = utils.roundPad(+$range.value, 1);\n  $speed.innerHTML = speed;\n  utils.sync(() => timer.speed = speed);\n}\n\n$range.addEventListener('input', updateSpeed);\n```\n\n----------------------------------------\n\nTITLE: Setting Global Default Playback Rate in Anime.js\nDESCRIPTION: Demonstrates how to set the default playback rate globally for all animations using the engine.defaults object. This affects all animations unless overridden locally.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-playback-settingsplaybackrate.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { engine } from 'animejs';\nengine.defaults.playbackRate = .75;\n```\n\n----------------------------------------\n\nTITLE: Animating a Square on Scroll with Anime.js\nDESCRIPTION: This snippet demonstrates how to animate a square element by changing its position and rotation when the user scrolls horizontally. It uses the 'onScroll' function from the Anime.js library to trigger the animation based on the scroll container defined by the user.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscrollscrollobserver-settingsaxis.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTimer, utils, onScroll } from 'animejs';\n\nanimate('.square', {\n  x: '15rem',\n  rotate: '1turn',\n  duration: 2000,\n  alternate: true,\n  loop: true,\n  ease: 'inOutQuad',\n  autoplay: onScroll({\n    container: '.scroll-container',\n    axis: 'x',\n  })\n});\n```\n\n----------------------------------------\n\nTITLE: Animating with Duration-Based Keyframes in AnimeJS\nDESCRIPTION: Creates an animation using keyframes that define multiple property values at specific points in time. The animation will transition between each keyframe over the specified duration.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationkeyframes.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nanimate('.square', {\n  keyframes: [\n    { x: 100, y: 100 },\n    { x: 200, y: 200 },\n  ],\n  duration: 3000,\n}\n```\n\n----------------------------------------\n\nTITLE: AnimeJS Animation with MapRange Modifier\nDESCRIPTION: Demonstrates using mapRange as a modifier in AnimeJS animations, comparing normal and mapped rotation animations.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiesmap-range.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate, utils } from 'animejs';\n\nanimate('.normal', {\n  rotate: '12turn',\n  duration: 12000,\n  loop: true,\n  ease: 'inOut',\n});\n\nanimate('.mapped', {\n  rotate: '12turn',\n  modifier: utils.mapRange(0, 12, 0, 1), // Used as a modifier\n  duration: 12000,\n  loop: true,\n  ease: 'inOut',\n});\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Simple Chain-able Functions in JavaScript\nDESCRIPTION: Shows how to create a simple chain-able function using the clamp utility and how to use it without chaining.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitieschain-able-utility-functions.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst chainableClamp = utils.clamp(0, 100); // Returns a chain-able function\nconst result = chainableClamp(150); // 100\n```\n\n----------------------------------------\n\nTITLE: Removing Animations, Timers, or Timelines from Anime.js Timeline\nDESCRIPTION: Demonstrates how to remove animations, timers, or timelines from an Anime.js timeline. The method accepts an object (Animation, Timer, or Timeline) and an optional time position.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-methodsremove.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntimeline.remove([animation, timer, timeline]);\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Animated Circles\nDESCRIPTION: This HTML snippet defines the structure for the animated circles and includes a label instructing users to move the cursor around.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimatableanimatable-settingsduration.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"medium centered row\">\n  <div class=\"circle\"></div>\n  <div class=\"circle\"></div>\n  <div class=\"circle\"></div>\n  <div class=\"circle\"></div>\n  <div class=\"circle\"></div>\n</div>\n<div class=\"small centered row\">\n  <span class=\"label\"><br><br><br>Move cursor around</span>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML for Time Unit Display and Controls\nDESCRIPTION: This HTML snippet defines the structure for displaying the time in both seconds and milliseconds, along with buttons to toggle between the two time units. It includes `div` elements for layout, `pre` elements for displaying the timer values, and `button` elements for user interaction.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationengineengine-parameterstimeunit-seconds-milliseconds.md#2025-04-18_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large centered row\">\n  <div class=\"col\">\n    <pre class=\"large log row\">\n      <span class=\"label\">duration: 1</span>\n      <span class=\"time-s value lcd\">0</span>\n    </pre>\n  </div>\n  <div class=\"col\">\n    <pre class=\"large log row\">\n      <span class=\"label\">duration: 1000</span>\n      <span class=\"time-ms value lcd\">0</span>\n    </pre>\n  </div>\n</div>\n<div class=\"medium row\">\n  <fieldset class=\"controls\">\n    <button class=\"button toggle\" disabled>milliseconds</button>\n    <button class=\"button toggle\">seconds</button>\n  </fieldset>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Anime.js Animation Target\nDESCRIPTION: Provides the HTML structure for the target element of the Anime.js animation, which is a square div inside a container with specific classes.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationtween-parametersdelay.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"medium row\">\n  <div class=\"square\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Displaying Anime.js Timer Values\nDESCRIPTION: This HTML snippet creates a structure to display the iteration time and current time of an Anime.js timer animation. It uses pre-formatted elements with specific classes for styling and identification.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-playback-settingsreversed.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large centered row\">\n  <div class=\"col\">\n    <pre class=\"large log row\">\n      <span class=\"label\">iteration time</span>\n      <span class=\"iteration-time value lcd\">0</span>\n    </pre>\n  </div>\n  <div class=\"col\">\n    <pre class=\"large log row\">\n      <span class=\"label\">current time</span>\n      <span class=\"current-time value lcd\">0</span>\n    </pre>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Staggered Animations with Anime.js\nDESCRIPTION: This HTML snippet provides the structure for elements that will be animated using the stagger function in Anime.js. Each div with the class 'square' will be the target of the animations, allowing those elements to be animated in sequence according to the specified parameters in the JavaScript code.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationstagger.md#2025-04-18_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\\\"small row\\\">\\n  <div class=\\\"square\\\"></div>\\n</div>\\n<div class=\\\"small row\\\">\\n  <div class=\\\"square\\\"></div>\\n</div>\\n<div class=\\\"small row\\\">\\n  <div class=\\\"square\\\"></div>\\n</div>\\n<div class=\\\"small row\\\">\\n  <div class=\\\"square\\\"></div>\\n</div>\n```\n\n----------------------------------------\n\nTITLE: Initializing ScrollObserver with Scroll-Based Animation\nDESCRIPTION: Creates a scroll-triggered animation for an element using Anime.js onScroll configuration with revert method\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscrollscrollobserver-methodsrevert.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate, onScroll } from 'animejs';\n\nanimate('.square', {\n  x: '15rem',\n  rotate: '1turn',\n  ease: 'linear',\n  autoplay: onScroll({\n    container: '.scroll-container',\n    enter: 'bottom-=50 top',\n    leave: 'top+=60 bottom',\n    sync: 1,\n    debug: true,\n    onSyncComplete: self => self.revert()\n  })\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Timeline Remove Methods in Anime.js\nDESCRIPTION: A complete example demonstrating the usage of remove() method in different scenarios. It creates a timeline with multiple animations and provides functions to remove an animation, a target, and a specific tween property.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-methodsremove.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTimeline, utils } from 'animejs';\n\nconst [ $removeA, $removeB, $removeC ] = utils.$('.button');\n\nconst animation = animate('.circle', { x: '15rem', scale: [1, .5, 1] });\n\nconst tl = createTimeline({ loop: true, alternate: true })\n.sync(animation)\n.add('.triangle', { x: '15rem', rotate: 360 }, 100)\n.add('.square',   { x: '15rem' }, 200);\n\nconst removeAnimation = () => tl.remove(animation);\nconst removeTarget = () => tl.remove('.square');\nconst removeRotate = () => tl.remove('.triangle', 'rotate');\n\n$removeA.addEventListener('click', removeAnimation);\n$removeB.addEventListener('click', removeTarget);\n$removeC.addEventListener('click', removeRotate);\n```\n\n----------------------------------------\n\nTITLE: Animating Elements with Anime.js in JavaScript\nDESCRIPTION: This snippet illustrates adding and animating 150 particles with random positions and scale, leveraging utility functions from Anime.js. Requires imports from the Anime.js package and a container to hold particles.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationengineengine-parametersspeed.md#2025-04-18_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { engine, animate, utils } from 'animejs';\n\nconst [ $container ] = utils.$('.container');\nconst [ $range ] = utils.$('.range');\n\nfor (let i = 0; i < 150; i++) {\n  const $particle = document.createElement('div');\n  $particle.classList.add('particle');\n  $container.appendChild($particle);\n  animate($particle, {\n    x: utils.random(-10, 10, 2) + 'rem',\n    y: utils.random(-3, 3, 2) + 'rem',\n    scale: [{ from: 0, to: 1 }, { to: 0 }],\n    delay: utils.random(0, 1000),\n    loop: true,\n  });  \n}\n\nfunction onInput() {\n  utils.sync(() => engine.speed = this.value);\n}\n\n$range.addEventListener('input', onInput);\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Animation Target\nDESCRIPTION: Shows the HTML markup structure required for the animation example, containing a square element within a medium row container.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationtween-parametersduration.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"medium row\">\n  <div class=\"square\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Anime.js ScrollObserver Object Syntax\nDESCRIPTION: This snippet shows how to define ScrollObserver thresholds using an object syntax.  The `enter` property defines when the target enters the viewport (top of the target meets the bottom of the container), and the `leave` property defines when the target leaves the viewport (bottom of the target meets the top of the container).\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscrollscrollobserver-thresholds.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nonScroll({\n  // Enters when the top of the target meets the bottom of the container\n  enter: { target: 'top', container: 'bottom' },\n  // Leaves when the bottom of the target meets the top of the container\n  leave: { target: 'bottom', container: 'top' }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Timeline with Alternate and Loop Parameters in Anime.js\nDESCRIPTION: Shows how to create an Anime.js timeline with the 'alternate' parameter set to true and looping enabled. The example also includes an onLoop callback that updates a counter display element.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-playback-settingsalternate.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTimeline, utils } from 'animejs';\n\nconst [ $loops ] = utils.$('.loops');\n\nlet loops = 0;\n\nconst tl = createTimeline({\n  loop: true,\n  alternate: true,\n  onLoop: self => $loops.innerHTML = ++loops,\n})\n.add('.circle', { x: '15rem' })\n.add('.triangle', { x: '15rem' }, '-=500')\n.add('.square', { x: '15rem' }, '-=500');\n```\n\n----------------------------------------\n\nTITLE: Scroll Container and Content Structure - HTML\nDESCRIPTION: This HTML structure provides a scrollable container with sections and a square element within it. It is necessary for the scroll observer to function properly, allowing the Anime.js animations to be triggered as the user scrolls.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscrollscrollobserver-synchronisation-modessmooth-scroll.md#2025-04-18_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"scroll-container scroll-y\">\n  <div class=\"scroll-content grid square-grid\">\n    <div class=\"scroll-section padded\">\n      <div class=\"large row\">\n        <div class=\"label\">scroll down</div>\n      </div>\n    </div>\n    <div class=\"scroll-section padded\">\n      <div class=\"large row\">\n        <div class=\"square\"></div>\n      </div>\n    </div>\n    <div class=\"scroll-section\">\n    </div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Anime.js ScrollObserver with Target\nDESCRIPTION: This code snippet demonstrates how to use the `target` property within `onScroll` to specify which element triggers the scroll event. The `createTimer` function creates an animation that updates the timer's inner HTML based on the scroll position of the specified target element within the scroll container.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscrollscrollobserver-settingstarget.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTimer, utils, onScroll } from 'animejs';\n\nconst [ $timer ] = utils.$('.timer');\n\ncreateTimer({\n  duration: 2000,\n  alternate: true,\n  loop: true,\n  onUpdate: self => {\n    $timer.innerHTML = self.iterationCurrentTime\n  },\n  autoplay: onScroll({\n    target: $timer,\n    container: '.scroll-container',\n  })\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Global Frame Rate in AnimeJS\nDESCRIPTION: Code snippet demonstrating how to change the default frame rate globally in AnimeJS by updating the engine.defaults object.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-playback-settingsframerate.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { engine } from 'animejs';\nengine.defaults.frameRate = 30;\n```\n\n----------------------------------------\n\nTITLE: Importing Anime.js and Animating Input Value\nDESCRIPTION: This snippet demonstrates how to import Anime.js and create an animation that targets an input element's 'value' attribute. It uses the 'animate' function to set up a looping animation with alternating direction and rounds the value to integers.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimatable-propertieshtml-attributes.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate, utils } from 'animejs';\n\nanimate('input', {\n  value: 1000, // animate the input \"value\" attribute\n  alternate: true,\n  loop: true,\n  modifier: utils.round(0),\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing onDrag Callback with Anime.js\nDESCRIPTION: Demonstrates how to create a draggable element with a callback function that counts and displays the number of drag operations. The callback executes whenever the element is being dragged.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-callbacksondrag.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createDraggable, utils } from 'animejs';\n\nconst [ $value ] = utils.$('.value');\n\nlet drags = 0;\n\ncreateDraggable('.square', {\n  container: '.grid',\n  onDrag: () => $value.textContent = ++drags\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Global Default Playback Rate in Anime.js\nDESCRIPTION: Shows how to modify the default playbackRate value globally for all animations by updating the engine.defaults object. This allows setting a different base speed for all animations in your project.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-playback-settingsplaybackrate.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { engine } from 'animejs';\nengine.defaults.playbackRate = .75;\n```\n\n----------------------------------------\n\nTITLE: Animating with animejs in JavaScript\nDESCRIPTION: This JavaScript snippet illustrates how to use the 'stagger' function from 'animejs' to apply staggered animation effects to elements. It imports the 'animate' and 'stagger' functions and uses them to animate '.square' elements with staggered positions and delays. Dependencies include the animejs library. The key parameters are the stagger value ('1rem') and the start values for x position and delay (14 and 500 respectively).\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationstaggerstagger-parametersstagger-start.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { animate, stagger } from 'animejs';\n\nanimate('.square', {\n  x: stagger('1rem', { start: 14 }), // adds 11 to the staggered value\n  delay: stagger(100, { start: 500 }) // adds 500 to the staggered value\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Timer Reverse Functionality with AnimeJS in JavaScript\nDESCRIPTION: This code snippet demonstrates how to create and use a timer with AnimeJS, including a reverse functionality. It sets up a timer with a duration of 2000ms and updates a UI element with the current time. A button event listener is added to trigger the reverse method.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-methodsreverse.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTimer, utils } from 'animejs';\n\nconst [ $reverseButton ] = utils.$('.reverse');\nconst [ $time ] = utils.$('.time');\n\nconst timer = createTimer({\n  duration: 2000,\n  onUpdate: self => $time.innerHTML = self.iterationCurrentTime,\n});\n\nconst reverseTimer = () => timer.reverse();\n\n$reverseButton.addEventListener('click', reverseTimer);\n```\n\n----------------------------------------\n\nTITLE: Chain-able radToDeg Examples in Anime.js\nDESCRIPTION: Demonstrates how to create a chain-able radToDeg function that can be reused or combined with other utility functions. Shows examples of direct conversion and combining with the round utility.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiesrad-to-deg.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst radToDeg = utils.radToDeg();\nradToDeg(1.7453292519943295); // 100\nradToDeg(Math.PI);            // 180\n\nconst roundRadToDeg = utils.radToDeg().round(2); // Convert radians to degrees then round to 2 decimal places\nroundRadToDeg(Math.PI / 7);  // 25.71\n```\n\n----------------------------------------\n\nTITLE: Creating an Anime.js Timer with Duration Setting\nDESCRIPTION: This code demonstrates how to create a timer using Anime.js with a specified duration of 2000 milliseconds. The timer updates a DOM element with the current time value on each timer update.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-playback-settingsduration.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTimer, utils } from 'animejs';\n\nconst [ $time ] = utils.$('.time');\n\ncreateTimer({\n  duration: 2000,\n  onUpdate: self => $time.innerHTML = self.currentTime\n});\n```\n\n----------------------------------------\n\nTITLE: Dynamic Timer Framerate Control Implementation\nDESCRIPTION: Creates a timer instance with configurable framerate and implements real-time FPS updating through range input control. Includes DOM manipulation for displaying current time and FPS values.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-playback-settingsframerate.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTimer, utils } from 'animejs';\n\nconst [ $range ] = utils.$('.range');\nconst [ $fps ] = utils.$('.fps');\nconst [ $time ] = utils.$('.time');\n\nconst timer = createTimer({\n  frameRate: 60,\n  onUpdate: self => $time.innerHTML = self.currentTime,\n});\n\nconst updateFps = () => {\n  const { value } = $range;\n  $fps.innerHTML = value;\n  timer.fps = value;\n}\n\n$range.addEventListener('input', updateFps);\n```\n\n----------------------------------------\n\nTITLE: Configuring Tween Parameters in Anime.js\nDESCRIPTION: Demonstrates how to animate elements using the 'to' parameter with specific easing functions. The example shows x-axis translation and rotation animations.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationtween-parametersto.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate } from 'animejs';\n\nanimate('.square', {\n  x: {\n    to: '16rem', // From 0px to 16rem\n    ease: 'outCubic',\n  },\n  rotate: {\n    to: '.75turn', // From 0turn to .75turn\n    ease: 'inOutQuad'\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Scroll Animation\nDESCRIPTION: This snippet provides the HTML structure necessary for implementing the scroll animation. It includes a scroll container that wraps the animated square and additional sections to demonstrate the scrolling effect visually.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscrollscrollobserver-settingsaxis.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"scroll-container scroll-x\">\n  <div class=\"scroll-content grid square-grid\">\n    <div class=\"scroll-section padded\">\n      <div class=\"large centered row\">\n        <div class=\"label\">scroll right →</div>\n      </div>\n    </div>\n    <div class=\"scroll-section padded\">\n      <div class=\"large row\">\n        <div class=\"square\"></div>\n      </div>\n    </div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Setup for Scoped Animation with Anime.js\nDESCRIPTION: This HTML structure sets up three '.medium.row' divs, each containing a '.square' div. The second '.row' is targeted for scoped animation with Anime.js, allowing the animation to be contained within a specific section of the DOM.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscopescope-parametersroot.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"medium row\">\n  <div class=\"square\"></div>\n  <div class=\"padded label\">outside scope</div>\n</div>\n<div class=\"medium row\">\n  <div class=\"square\"></div>\n  <div class=\"padded label\">inside scope</div>\n</div>\n<div class=\"medium row\">\n  <div class=\"square\"></div>\n  <div class=\"padded label\">outside scope</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Draggable setX Method - JavaScript\nDESCRIPTION: Demonstrates how to use the setX method to programmatically set the x-position of a draggable element. The example shows creating a draggable instance and setting random x positions via button click.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-methodssetx.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createDraggable, utils } from 'animejs';\n\nconst [ $setButton ] = utils.$('.set');\n\nconst draggable = createDraggable('.square');\n\nconst setRandomX = () => draggable.setX(utils.random(-100, 100));\n\n$setButton.addEventListener('click', setRandomX);\n```\n\n----------------------------------------\n\nTITLE: Implementing pause() Method with AnimeJS Timeline\nDESCRIPTION: This code demonstrates how to create a timeline with AnimeJS and pause it using the pause() method. The example creates a timeline with three animations that run in sequence with specific timings, and adds a pause button event listener to control the timeline.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-methodspause.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTimeline, utils } from 'animejs';\n\nconst [ $pauseButton ] = utils.$('.pause');\n\nconst tl = createTimeline({\n  loop: true,\n  alternate: true,\n})\n.add('.circle',   { x: '15rem' })\n.add('.triangle', { x: '15rem' }, 500)\n.add('.square',   { x: '15rem' }, 1000);\n\nconst pauseTimeline = () => tl.pause();\n\n$pauseButton.addEventListener('click', pauseTimeline);\n```\n\n----------------------------------------\n\nTITLE: Setting Global Default for Alternate Parameter in Anime.js\nDESCRIPTION: Demonstrates how to change the default value of the 'alternate' parameter globally in Anime.js by updating the engine.defaults object. This affects all animations unless overridden locally.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-playback-settingsalternate.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { engine } from 'animejs';\nengine.defaults.alternate = true;\n```\n\n----------------------------------------\n\nTITLE: HTML Grid Structure\nDESCRIPTION: This HTML code defines a grid of square elements using `div` elements with the class 'square'. The grid is structured using 'row' divs to arrange the squares in rows. This markup is used by the JavaScript code to select and animate the grid elements.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationstaggerstagger-parametersstagger-grid.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"small justified row\">\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n</div>\n<div class=\"small justified row\">\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n</div>\n<div class=\"small justified row\">\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n</div>\n<div class=\"small justified row\">\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Draggable Elements\nDESCRIPTION: Shows the HTML markup required to create a grid container with draggable square and circle elements. The elements are styled with 'large centered grid' classes.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-settingsmaxvelocity.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large centered grid square-grid\">\n  <div class=\"square draggable\"></div>\n  <div class=\"circle draggable\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Wrap Function with Chaining in JavaScript\nDESCRIPTION: Examples of using the wrap utility function with specific ranges and chaining with other utilities like round(). Shows practical applications for number wrapping.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitieswrap.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst wrapBetween0and100 = utils.wrap(0, 100);\nwrapBetween0and100(105); // 5\nwrapBetween0and100(220); // 20\nwrapBetween0and100(-15); // 85\n\nconst wrapAndRound = utils.wrap(0, 100).round(2); // Wrap then round to 2 decimal places\nwrapAndRound(105.7523); // 5.75\nwrapAndRound(220.2514); // 20.25\n```\n\n----------------------------------------\n\nTITLE: Setting Default Framerate Globally in Anime.js\nDESCRIPTION: This snippet shows how to change the default framerate for all animations globally using the engine.defaults object in Anime.js. It sets the default framerate to 30 fps.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-playback-settingsframerate.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { engine } from 'animejs';\nengine.defaults.frameRate = 30;\n```\n\n----------------------------------------\n\nTITLE: Basic Timeline Synchronization in AnimeJS\nDESCRIPTION: Demonstrates basic timeline synchronization by creating and syncing a child timeline with position transformations.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-methodssync.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst tlChild = createTimeline().add(target, { x: 100 }).add(target, { y: 100 });\n\ncreatTimeline().sync(tlChild);\n```\n\n----------------------------------------\n\nTITLE: Setting Global Default Playback Rate in AnimeJS\nDESCRIPTION: Shows how to change the default playback rate for all timers globally by updating the engine.defaults object. This affects all timers that don't explicitly specify a playback rate.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-playback-settingsplaybackrate.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { engine } from 'animejs';\nengine.defaults.playbackRate = .75;\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Random Animation Demo\nDESCRIPTION: HTML markup structure showing multiple square elements that can be targeted for random animations.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiesrandom.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"small row\">\n  <div class=\"square\"></div>\n</div>\n<div class=\"small row\">\n  <div class=\"square\"></div>\n</div>\n<div class=\"small row\">\n  <div class=\"square\"></div>\n</div>\n<div class=\"small row\">\n  <div class=\"square\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Scroll Container and Animated Element\nDESCRIPTION: This HTML snippet defines the structure for a scroll container and an element that will be animated using Anime.js. The `.scroll-container` div is set to enable vertical scrolling (`scroll-y`).  Inside the container, there are nested divs to structure the content and the `.square` div, which will be the target of the Anime.js scroll animation.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscrollscrollobserver-thresholdsnumeric-values.md#2025-04-18_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"scroll-container scroll-y\">\n  <div class=\"scroll-content grid square-grid\">\n    <div class=\"scroll-section padded\">\n      <div class=\"large centered row\">\n        <div class=\"label\">scroll down</div>\n      </div>\n    </div>\n    <div class=\"scroll-section padded\">\n      <div class=\"large row\">\n        <div class=\"square\"></div>\n      </div>\n    </div>\n    <div class=\"scroll-section\">\n    </div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using AnimJS Timer with Callbacks and DOM Updates in JavaScript\nDESCRIPTION: This example shows how to create an AnimJS timer with specific parameters, including duration, loop, frameRate, and callbacks. It updates DOM elements with the current time and iteration count.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimer.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate } from 'animejs';\n\nconst [ $time, $count ] = utils.$('.value');\n\ncreateTimer({\n  duration: 1000,\n  loop: true,\n  frameRate: 30,\n  onUpdate: self => $time.innerHTML = self.currentTime,\n  onLoop: self => $count.innerHTML = self._currentIteration\n});\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for AnimeJS Animation Controls Demo\nDESCRIPTION: This HTML markup provides the structure for demonstrating animation controls in AnimeJS. It includes animated square elements and control buttons for pausing, alternating direction, and resuming animations.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-methodsresume.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"medium row\">\n  <div class=\"square\"></div>\n</div>\n<div class=\"medium row\">\n  <div class=\"square\"></div>\n</div>\n<div class=\"medium row\">\n  <fieldset class=\"controls\">\n    <button class=\"button\">Pause</button>\n    <button class=\"button\">Alternate</button>\n    <button class=\"button\">Resume</button>\n  </fieldset>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting Global Default Loop Value in Anime.js\nDESCRIPTION: Demonstrates how to change the default loop value globally by updating the engine.defaults object in Anime.js. This allows all animations to use the specified loop behavior without explicitly defining it for each animation.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-playback-settingsloop.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { engine } from 'animejs';\nengine.defaults.loop = true;\n```\n\n----------------------------------------\n\nTITLE: Implementing onUpdate Callback with AnimeJS Timer\nDESCRIPTION: This example shows how to create a timer with AnimeJS and use the onUpdate callback. It updates HTML elements with the number of updates and the current time of the timer on each frame.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-callbacksonupdate.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTimer, utils } from 'animejs';\n\nconst [ $updates ] = utils.$('.updates');\nconst [ $time ] = utils.$('.time');\n\nlet updates = 0;\n\ncreateTimer({\n  onUpdate: self => {\n    $updates.innerHTML = ++updates;\n    $time.innerHTML = self.currentTime;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Non-Repeating Scroll Observer in Anime.js\nDESCRIPTION: This code snippet creates a scroll observer that updates a value but does not repeat the event handling after the animation is complete. It utilizes 'createTimer' similarly to the repeating observer but sets the 'repeat' property to false.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscrollscrollobserver-settingsrepeat.md#2025-04-18_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst [ $noRepeat ] = utils.$('.no-repeat .value');\nlet noRepeatUpdates = 0;\n\ncreateTimer({\n  duration: 1000,\n  autoplay: onScroll({\n    container: '.scroll-container',\n    target: '.no-repeat',\n    enter: 'bottom-=40 top',\n    leave: 'top+=60 bottom',\n    onUpdate: () => $noRepeat.innerHTML = noRepeatUpdates++,\n    repeat: false,\n    debug: true,\n  })\n});\n```\n\n----------------------------------------\n\nTITLE: HTML structure for clamp demonstration in Anime.js\nDESCRIPTION: Provides the HTML structure for demonstrating the difference between normal and clamped animations using Anime.js.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiesclamp.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"x-large spaced-evenly row\">\n  <div class=\"col\">\n    <div class=\"clock normal\"></div>\n    <div class=\"label\">normal</div>\n  </div>\n  <div class=\"col\">\n    <div class=\"clock clamped\"></div>\n    <div class=\"label\">clamped [.25,.75]</div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Timer Pause Callback in AnimeJS\nDESCRIPTION: Shows how to set up a default global pause callback handler by modifying the engine defaults. The callback receives the timer instance as an argument.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-callbacksonpause.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { engine } from 'animejs';\nengine.defaults.onPause = self => console.log(self.id);\n```\n\n----------------------------------------\n\nTITLE: Using stagger function with AnimeJS for multi-target animations\nDESCRIPTION: This snippet demonstrates how to use the stagger function in AnimeJS to create staggered animations across multiple elements. It shows how to apply different y-position and rotation values to each target in sequence, with loop and alternate options enabled.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationstaggervalues-staggering.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate, stagger } from 'animejs';\n\nconst animation = animate('.square', {\n  y: stagger(['-2.75rem', '2.75rem']),\n  rotate: { from: stagger('-.125turn') },\n  loop: true,\n  alternate: true\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Global Default Delay in Anime.js\nDESCRIPTION: Demonstrates how to change the default delay value globally for all animations by updating the engine.defaults object. This code sets a 500ms delay for all animations across the application.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-playback-settingsdelay.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { engine } from 'animejs';\nengine.defaults.delay = 500;\n```\n\n----------------------------------------\n\nTITLE: Setting Global onUpdate Default in Anime.js\nDESCRIPTION: Shows how to change the default onUpdate callback globally by updating the engine.defaults object in Anime.js.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-callbacksonupdate.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { engine } from 'animejs';\nengine.defaults.onUpdate = self => console.log(self.id);\n```\n\n----------------------------------------\n\nTITLE: Setting Global Default Delay in Anime.js\nDESCRIPTION: Demonstrates how to change the default delay value globally for all animations using the engine.defaults object in Anime.js.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationtween-parametersdelay.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { engine } from 'animejs';\nengine.defaults.delay = 500;\n```\n\n----------------------------------------\n\nTITLE: Using padStart Utility Function in Anime.js\nDESCRIPTION: Shows basic usage of the padStart utility function which pads a value from the start with a specified string until it reaches a desired length. It can be used directly with a value or as a chainable function.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiespad-start.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst paddedValue = utils.padStart(value, totalLength, padString);\nconst padderFunction = utils.padStart(totalLength, padString);\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Draggable Elements in AnimeJS\nDESCRIPTION: This HTML snippet defines the structure for two draggable elements: a square and a circle. These elements are targeted by the JavaScript code to apply draggable functionality with custom cursor settings.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-settingscursor.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large centered row\">\n  <div class=\"square draggable\"></div>\n  <div class=\"circle draggable\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for AnimateJS Loop Counter Example\nDESCRIPTION: This HTML snippet provides the structure for the AnimateJS loop counter example. It includes a div for the animated circle and a pre element to display the loop count.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-callbacksonloop.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large row\">\n  <div class=\"circle\"></div>\n  <pre class=\"large log row\">\n    <span class=\"label\">loops</span>\n    <span class=\"value\">0</span>\n  </pre>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Initializing Draggable Element with Release Mass in Anime.js\nDESCRIPTION: This snippet demonstrates how to initialize a draggable element using Anime.js and set the `releaseMass` property.  The `releaseMass` affects the element's behavior after it is released, influencing its movement and bounciness. Two elements, square and circle, are initialized with different releaseMass values.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-settingsreleasemass.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createDraggable } from 'animejs';\n\ncreateDraggable('.square', {\n  container: '.grid',\n  releaseMass: .1,\n});\n\ncreateDraggable('.circle', {\n  container: '.grid',\n  releaseMass: 10,\n});\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for CSS Variable Animation Demo\nDESCRIPTION: The HTML structure shows a grid of square elements that will be animated using CSS variables. These squares are the targets for the animation examples shown in the JavaScript code.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationtween-value-typescss-variable.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"medium justified row\">\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of roundPad Function in AnimeJS\nDESCRIPTION: Shows the basic syntax for using the roundPad utility in AnimeJS. It can be used directly to round and pad a value, or to create a reusable function with a pre-defined decimal length.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiesround-pad.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst roundedPaddedValue = utils.roundPad(value, decimalLength);\nconst roundPadderFunction = utils.roundPad(decimalLength);\n```\n\n----------------------------------------\n\nTITLE: Implementing onRender Callback in Anime.js Animation\nDESCRIPTION: This example shows how to use the onRender callback in an Anime.js animation. It animates a circle element and updates a render count display on each render.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-callbacksonrender.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate, utils } from 'animejs';\n\nconst [ $rendersLog ] = utils.$('.value');\n\nlet renders = 0;\n\nconst animation = animate('.circle', {\n  x: '16rem',\n  loopDelay: 1500,\n  loop: true,\n  alternate: true,\n  onRender: self => $rendersLog.textContent = ++renders\n});\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Scroll-Triggered Animation\nDESCRIPTION: This HTML structure provides a scrollable container and a target element for the Anime.js animation. The `.scroll-container` class defines the scrollable area, and the `.square` class targets the animated element.  The structure includes sections for scrolling down and up indications.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscrollscrollobserver-settingsdebug.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"scroll-container scroll-y\">\n  <div class=\"scroll-content grid square-grid\">\n    <div class=\"scroll-section padded\">\n      <div class=\"large centered row\">\n        <div class=\"label\">scroll down</div>\n      </div>\n    </div>\n    <div class=\"scroll-section padded\">\n      <div class=\"large row\">\n        <div class=\"square\"></div>\n      </div>\n    </div>\n    <div class=\"scroll-section padded\">\n      <div class=\"large centered row\">\n        <div class=\"label\">scroll up</div>\n      </div>\n    </div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Draggable Elements\nDESCRIPTION: This HTML snippet defines the structure for the draggable elements and their container.  The `.square` and `.circle` elements are defined as draggable, and they are placed within a container element with the class `.grid`. This structure allows the Anime.js code to select and initialize the draggable behavior for these elements.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-settingsreleasemass.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large centered grid square-grid\">\n  <div class=\"square draggable\"></div>\n  <div class=\"circle draggable\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Animate with ScrollObserver\nDESCRIPTION: Animates the 'targets' element, setting its x position to 100.  The autoplay parameter uses `onScroll(parameters)` to trigger the animation based on scroll position. The parameters object configures the ScrollObserver settings, thresholds, sync modes, and callbacks.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscroll.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nanimate(targets, { x: 100, autoplay: onScroll(parameters) });\n```\n\n----------------------------------------\n\nTITLE: Configuring Draggable Elements with ReleaseDamping - JavaScript\nDESCRIPTION: Demonstrates how to create draggable elements with different damping settings using AnimeJS. Shows configuration of both square and circle elements with custom releaseDamping and releaseStiffness values.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-settingsreleasedamping.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createDraggable } from 'animejs';\n\ncreateDraggable('.square', {\n  container: '.grid',\n  releaseDamping: 5,\n});\n\ncreateDraggable('.circle', {\n  container: '.grid',\n  releaseStiffness: 30,\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Engine and Setting Default Duration in Anime.js\nDESCRIPTION: This code snippet demonstrates how to import the `engine` object from the Anime.js library and then set the default animation duration to 500 milliseconds. This will affect all subsequent Timer, Animation, and Timeline instances created.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationengineengine-defaults.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { engine } from 'animejs';\n\nengine.engine.defaults.duration = 500;\n```\n\n----------------------------------------\n\nTITLE: Creating drawable SVG element\nDESCRIPTION: Creates a proxy of an SVG element with a draw property to control line visibility. The method accepts various SVG element types as targets and returns an array of proxy SVG elements.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationsvgcreatedrawable.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst [ drawable ] = svg.createDrawable(target);\n```\n\n----------------------------------------\n\nTITLE: Initializing Draggable Elements with Release Stiffness in Anime.js\nDESCRIPTION: This snippet demonstrates how to initialize draggable elements using the `createDraggable` function from Anime.js and configure the `releaseStiffness` property. The `releaseStiffness` parameter controls the bounciness and speed of the element after it is released.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-settingsreleasestiffness.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createDraggable } from 'animejs';\n\ncreateDraggable('.square', {\n  container: '.grid',\n  releaseStiffness: 20,\n});\n\ncreateDraggable('.circle', {\n  container: '.grid',\n  releaseStiffness: 300,\n});\n```\n\n----------------------------------------\n\nTITLE: Using then() Method with Anime.js WAAPI\nDESCRIPTION: Demonstrates the inline usage of the then() method in Anime.js to execute a callback after animation completion. This replaces the finished property available in native WAAPI.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationweb-animation-apiapi-differences-with-native-waapifinished.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nwaapi.animate(target, {\n  translate: '100px',\n  duration: 500,\n}).then(callback);\n```\n\n----------------------------------------\n\nTITLE: Setting Default onPause Callback Globally in Anime.js\nDESCRIPTION: Example of how to change the default onPause callback function globally by updating the engine.defaults object. This sets a default handler that logs the animation's ID whenever any animation is paused.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-callbacksonpause.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { engine } from 'animejs';\nengine.defaults.onPause = self => console.log(self.id);\n```\n\n----------------------------------------\n\nTITLE: Using roundPad as a Modifier in AnimeJS Animation\nDESCRIPTION: Demonstrates using the roundPad utility as a modifier in an animation sequence. This example animates the innerHTML property of an element with class 'value' from its current value to '8.1', formatting the values with 3 decimal places during the animation.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiesround-pad.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate, utils } from 'animejs';\n\nanimate('.value', {\n  innerHTML: '8.1',\n  modifier: utils.roundPad(3),\n  duration: 10000,\n  ease: 'linear',\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing onLoop Callback in AnimateJS Animation\nDESCRIPTION: This example shows how to use the onLoop callback in an AnimateJS animation. It creates an animation that moves a circle element and updates a counter for each loop iteration.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-callbacksonloop.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate, utils } from 'animejs';\n\nconst [ $value ] = utils.$('.value');\n\nlet loops = 0;\n\nconst animation = animate('.circle', {\n  x: '16rem',\n  loopDelay: 1500,\n  loop: true,\n  alternate: true,\n  onLoop: self => $value.textContent = ++loops\n});\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Scroll Container\nDESCRIPTION: Defines the HTML layout for scroll-based animation with nested scroll sections and target element\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscrollscrollobserver-methodsrevert.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"scroll-container scroll-y\">\n  <div class=\"scroll-content grid square-grid\">\n    <div class=\"scroll-section padded\">\n      <div class=\"large row\">\n        <div class=\"label\">scroll down</div>\n      </div>\n    </div>\n    <div class=\"scroll-section padded\">\n      <div class=\"large row\">\n        <div class=\"square\"></div>\n      </div>\n    </div>\n    <div class=\"scroll-section\">\n    </div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Draggable Elements\nDESCRIPTION: This HTML snippet defines the structure for the draggable elements used in the Anime.js examples. It creates a grid containing a square and a circle, both marked with the 'draggable' class, enabling them to be dragged.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-settingsvelocitymultiplier.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large centered grid square-grid\">\n  <div class=\"square draggable\"></div>\n  <div class=\"circle draggable\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Alternate Option in anime.js Animations\nDESCRIPTION: This code shows three different configurations of the 'alternate' option in anime.js animations. It includes a normal animation, an alternating animation, and an alternating animation with reverse direction.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-playback-settingsalternate.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate } from 'animejs';\n\nanimate('.dir-normal', {\n  x: '17rem',\n  alternate: false, // Default\n  loop: 1,\n});\n\nanimate('.dir-alternate', {\n  x: '17rem',\n  alternate: true,\n  loop: 1, // Required to see the second iteration\n});\n\nanimate('.dir-alternate-reverse', {\n  x: '17rem',\n  alternate: true,\n  reversed: true,\n  loop: 1,\n});\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Logo and Button\nDESCRIPTION: This HTML snippet provides the structure for the logo (an SVG element) and the button that triggers the rotation animation.  The logo uses the class `logo js` for targeting in the JavaScript code, and the button is used to display the rotation count and trigger the animation.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationgetting-startedusing-with-vanilla-js.md#2025-04-18_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large centered row\">\n  <svg class=\"logo js\" preserveAspectRatio=\"xMidYMid meet\" viewBox=\"0 0 630 630\"><path fill=\"currentColor\" d=\"M577,0 C606.271092,0 630,23.7289083 630,53 L630,577 C630,606.271092 606.271092,630 577,630 L53,630 C23.7289083,630 0,606.271092 0,577 L0,53 C0,23.7289083 23.7289083,0 53,0 L577,0 Z M479.5,285.89 C426.63,285.89 392.8,319.69 392.8,364.09 C392.8,411.808 420.615238,434.63146 462.622716,452.742599 L478.7,459.64 L483.441157,461.719734 C507.57404,472.359996 521.8,479.858 521.8,498.94 C521.8,515.88 506.13,528.14 481.6,528.14 C452.4,528.14 435.89,512.91 423.2,492.19 L375.09,520.14 C392.47,554.48 427.99,580.68 482.97,580.68 C539.2,580.68 581.07,551.48 581.07,498.18 C581.07,448.74 552.67,426.75 502.37,405.18 L487.57,398.84 L485.322788,397.859899 C461.5199,387.399087 451.17,380.1172 451.17,362.89 C451.17,348.52 462.16,337.52 479.5,337.52 C496.5,337.52 507.45,344.69 517.6,362.89 L563.7,333.29 C544.2,298.99 517.14,285.89 479.5,285.89 Z M343.09,289.27 L283.89,289.27 L283.89,490.57 C283.89,520.16 271.62,527.77 252.17,527.77 C231.83,527.77 223.37,513.82 214.07,497.32 L165.88,526.495 C179.84,556.04 207.29,580.57 254.69,580.57 C307.15,580.57 343.09,552.67 343.09,491.37 L343.09,289.27 Z\"/></svg>\n</div>\n<div class=\"medium row\">\n  <fieldset class=\"controls\">\n    <button>rotations: 0</button>\n  </fieldset>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Executing Method from Anime.js Scope\nDESCRIPTION: Executes a registered method from an Anime.js scope using the `methods` object and the method name.  The method is called on the scope's method object. No specific dependencies other than a previously defined and registered method within the scope.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscoperegister-method-function.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nscope.methods.methodName(); // Execute the method\n```\n\n----------------------------------------\n\nTITLE: Implementing Timer Pause Functionality with AnimeJS\nDESCRIPTION: Demonstrates creating a timer with pause callback functionality, updating UI elements on pause and time update. Includes event listeners for pause/resume controls.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-callbacksonpause.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTimer, utils } from 'animejs';\n\nconst [ $resumeButton, $pauseButton ] = utils.$('.button');\nconst [ $paused ] = utils.$('.paused');\nconst [ $time ] = utils.$('.time');\n\nlet paused = 0;\n\nconst timer = createTimer({\n  onPause: () => $paused.innerHTML = ++paused,\n  onUpdate: self => $time.innerHTML = self.currentTime\n});\n\nconst pauseTimer = () => timer.pause();\nconst resumeTimer = () => timer.resume();\n\n$resumeButton.addEventListener('click', resumeTimer);\n$pauseButton.addEventListener('click', pauseTimer);\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Scroll Animation\nDESCRIPTION: This HTML snippet defines the structure for the scroll animation example. It includes a scrollable container with sections containing a square, a timer display, and circles that are animated based on the scroll position.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscroll.md#2025-04-18_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"scroll-container scroll-y\">\n  <div class=\"scroll-content grid square-grid\">\n    <div class=\"scroll-section padded\">\n      <div class=\"large centered row\">\n        <div class=\"label\">scroll down</div>\n      </div>\n    </div>\n    <div class=\"scroll-section padded\">\n      <div class=\"large row\">\n        <div class=\"square\"></div>\n      </div>\n    </div>\n    <div class=\"scroll-section padded\">\n      <div class=\"large centered row\">\n        <pre class=\"large log row\">\n          <span class=\"label\">timer</span>\n          <span class=\"timer value lcd\">0</span>\n        </pre>\n      </div>\n    </div>\n    <div class=\"scroll-section padded\">\n      <div class=\"large row\">\n        <div class=\"circle\"></div>\n        <div class=\"circle\"></div>\n        <div class=\"circle\"></div>\n      </div>\n    </div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Draggable Element and Resize Counter Display\nDESCRIPTION: This HTML snippet provides the structure for displaying a draggable square element within a grid container, along with a counter to show the number of resizes that have occurred.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-callbacksonresize.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"iframe-content resizable\">\n  <div class=\"large padded grid square-grid\">\n    <pre class=\"large log row\">\n      <span class=\"label\">resizes</span>\n      <span class=\"value\">0</span>\n    </pre>\n    <div class=\"square draggable\"></div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Timer Revert Functionality with AnimeJS in JavaScript\nDESCRIPTION: This code snippet demonstrates how to create and manipulate an AnimeJS timer using the revert() method. It sets up play and revert buttons, and updates a time display. The timer is created with an onUpdate callback to update the displayed time.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-methodsrevert.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTimer, utils } from 'animejs';\n\nconst [ $playButton ] = utils.$('.play');\nconst [ $revertButton ] = utils.$('.revert');\nconst [ $time ] = utils.$('.time');\n\nconst timer = createTimer({\n  onUpdate: self => $time.innerHTML = self.currentTime\n});\n\nconst playTimer = () => timer.play();\nconst revertTimer = () => {\n  timer.revert();\n  $time.innerHTML = timer.currentTime\n}\n\n$playButton.addEventListener('click', playTimer);\n$revertButton.addEventListener('click', revertTimer);\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Displaying AnimJS Timer Values\nDESCRIPTION: This HTML snippet creates a layout for displaying the current time and callback count of an AnimJS timer. It uses div elements with specific classes for styling and organization.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimer.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large centered row\">\n  <div class=\"half col\">\n    <pre class=\"large log row\">\n      <span class=\"label\">current time</span>\n      <span class=\"value lcd\">0</span>\n    </pre>\n  </div>\n  <div class=\"half col\">\n    <pre class=\"large log row\">\n      <span class=\"label\">callback fired</span>\n      <span class=\"value lcd\">0</span>\n    </pre>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Chain-able Utility Functions in JavaScript\nDESCRIPTION: Demonstrates how to create and use chain-able utility functions in Anime.js. The example shows clamping, rounding, and padding operations chained together.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitieschain-able-utility-functions.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst clampRoundPad = utils.clamp(0, 100).round(2).padStart(6, '0');\nclampRoundPad(125)   // '000100'\nclampRoundPad(75.25) // '075.25'\n```\n\n----------------------------------------\n\nTITLE: Enabling ScrollObserver Debug Mode in Anime.js\nDESCRIPTION: This snippet demonstrates how to enable debug mode for an Anime.js animation triggered by scrolling.  The `debug: true` option within the `onScroll` configuration enables visual markers representing the enter and leave thresholds, helping to understand the animation trigger points. The `container` option specifies the scrollable container.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscrollscrollobserver-settingsdebug.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate, onScroll } from 'animejs';\n\nanimate('.square', {\n  x: '15rem',\n  rotate: '1turn',\n  duration: 2000,\n  alternate: true,\n  loop: true,\n  ease: 'inOutQuad',\n  autoplay: onScroll({\n    container: '.scroll-container',\n    debug: true,\n  })\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Timer in Anime.js\nDESCRIPTION: Example of how to create a timer object using the createTimer function in Anime.js. This creates a timer with specified parameters that can be used to control animations.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-properties.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst timer = createTimer(parameters);\n```\n\n----------------------------------------\n\nTITLE: Animating with padEnd Modifier in Anime.js\nDESCRIPTION: Example of using the padEnd utility as a modifier in an animation to format the innerHTML value during animation.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiespad-end.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate, utils } from 'animejs';\n\nanimate('.value', {\n  innerHTML: 1,\n  modifier: utils.round(3).padEnd(6, '-'),\n  duration: 100000,\n  ease: 'linear',\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Normal and Reversed Animations with AnimeJS\nDESCRIPTION: Examples of creating animations with different direction settings using the 'reversed' property. One animation plays in the normal direction (false) while the other plays in reverse (true). Both animations loop continuously.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-playback-settingsreversed.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate } from 'animejs';\n\nanimate('.dir-normal', {\n  x: '17rem',\n  reversed: false, // Default behaviour\n  loop: true\n});\n\nanimate('.dir-reverse', {\n  x: '17rem',\n  reversed: true,\n  loop: true\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Global Default for Reversed Timer in Anime.js\nDESCRIPTION: This snippet demonstrates how to change the default value of the 'reversed' property globally for all Anime.js animations. It imports the engine from Anime.js and sets the default 'reversed' value to true.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-playback-settingsreversed.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { engine } from 'animejs';\nengine.defaults.reversed = true;\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Anime.js Animation Control\nDESCRIPTION: This HTML code defines the structure for the animation container and control buttons. It creates a container where the animations are displayed and two buttons: one to add animations and another to pause/resume the engine.  The classes are used for styling and selecting the elements with JavaScript.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationengineengine-methodspause.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large row container\"></div>\n<div class=\"medium row\">\n  <fieldset class=\"controls\">\n    <button>Add animation</button>\n    <button>Pause for 3 seconds</button>\n  </fieldset>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting Global Default for Alternate in anime.js\nDESCRIPTION: This snippet demonstrates how to change the default value of the 'alternate' option globally for all animations using the engine.defaults object.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-playback-settingsalternate.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { engine } from 'animejs';\nengine.defaults.alternate = true;\n```\n\n----------------------------------------\n\nTITLE: Creating a Draggable Element with Custom Scroll Threshold - JavaScript\nDESCRIPTION: This snippet demonstrates how to create a draggable element using the Anime.js library, specifying a custom scroll threshold. The 'container' option defines the scrolling element, and 'scrollThreshold' sets the number of pixels required to trigger scrolling.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-settingsscrollthreshold.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createDraggable } from 'animejs';\n\ncreateDraggable('.square', {\n  container: '.scroll-container',\n  scrollThreshold: 12,\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Global Autoplay Default in AnimeJS\nDESCRIPTION: Demonstrates how to modify the default autoplay behavior globally for all animations by updating the engine defaults.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-playback-settingsautoplay.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { engine } from 'animejs';\nengine.defaults.autoplay = false;\n```\n\n----------------------------------------\n\nTITLE: Disabling a Draggable Element in Anime.js - JavaScript\nDESCRIPTION: This code snippet demonstrates how to disable a draggable element by using the Anime.js library. It imports necessary functions, sets up an event listener on a button, and invokes the disable method on the draggable object when the button is clicked. The draggable functionality is tied to a square div, and requires the Anime.js library to function properly.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-methodsdisable.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createDraggable, utils } from 'animejs';\n\nconst [ $disableButton ] = utils.$('.disable');\n\nconst draggable = createDraggable('.square');\n\nconst disableDraggable = () => draggable.disable();\n\n$disableButton.addEventListener('click', disableDraggable);\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Clock Demo\nDESCRIPTION: Defines the HTML structure for the clock demo interface, including the clock element container and user instruction label.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimatableanimatable-settingsunit.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large centered row\">\n  <div class=\"col\">\n    <div class=\"clock\"></div>\n  </div>\n</div>\n<div class=\"small centered row\">\n  <span class=\"label\">Move cursor around</span>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for AnimeJS revert() Demo with Interactive Buttons\nDESCRIPTION: The HTML structure that accompanies the JavaScript example, containing square elements that will be animated and control buttons for triggering the revert() and restart() methods. It includes three rows with animated squares and buttons for user interaction.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-methodsrevert.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"medium row\">\n  <div class=\"square\"></div>\n</div>\n<div class=\"medium row\">\n  <div class=\"square\"></div>\n</div>\n<div class=\"medium row\">\n  <fieldset class=\"controls\">\n    <button class=\"button revert\">Revert</button>\n    <button class=\"button restart\">Restart</button>\n  </fieldset>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating a Repeating Scroll Observer in Anime.js\nDESCRIPTION: This code snippet sets up a scroll observer using Anime.js that updates a value based on scroll actions. It uses 'createTimer' to manage the animation duration and behavior on scroll events, including repeated event handling.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscrollscrollobserver-settingsrepeat.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createTimer, onScroll, utils } from 'animejs';\n\nconst [ $repeat ] = utils.$('.repeat .value');\nlet repeatUpdates = 0;\n\ncreateTimer({\n  duration: 1000,\n  autoplay: onScroll({\n    container: '.scroll-container',\n    target: '.repeat',\n    enter: 'bottom-=40 top',\n    leave: 'top+=60 bottom',\n    onUpdate: () => $repeat.innerHTML = repeatUpdates++,\n    repeat: true,\n    debug: true,\n  })\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Reversed Timeline with Anime.js\nDESCRIPTION: This code creates a reversed timeline using Anime.js. It animates three elements (.circle, .triangle, .square) along the x-axis and updates a time display. The timeline is set to play in reverse by default.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-playback-settingsreversed.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTimeline, utils } from 'animejs';\n\nconst [ $time ] = utils.$('.time');\n\nconst tl = createTimeline({\n  reversed: true,\n  onUpdate: self => $time.innerHTML = self.currentTime\n})\n.add('.circle', { x: '15rem' })\n.add('.triangle', { x: '15rem' }, '-=500')\n.add('.square', { x: '15rem' }, '-=500');\n```\n\n----------------------------------------\n\nTITLE: Using Random Utility Function in AnimeJS\nDESCRIPTION: Basic syntax for generating random numbers using AnimeJS utils.random() function. Takes minimum and maximum values with optional decimal places parameter.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiesrandom.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst randomValue = utils.random(min, max, decimalLength);\n```\n\n----------------------------------------\n\nTITLE: ScrollObserver Method Overview\nDESCRIPTION: Demonstrates the available methods for managing a ScrollObserver instance, including link(), refresh(), and revert() methods for controlling scroll behavior\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscrollscrollobserver-methods.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nscrollObserver.link()\nscrollObserver.refresh()\nscrollObserver.revert()\n```\n\n----------------------------------------\n\nTITLE: Creating an Animatable Object in Anime.js\nDESCRIPTION: Demonstrates how to create an Animatable object using the createAnimatable function with targets and parameters. This is a core functionality introduced in Anime.js version 4.0.0.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimatableanimatable-properties.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst animatable = createAnimatable(targets, parameters);\n```\n\n----------------------------------------\n\nTITLE: Applying snap utility as a modifier in anime.js animations\nDESCRIPTION: Practical example showing how to apply the snap utility as a modifier in anime.js animations to create normal and snapped rotation animations.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiessnap.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate, utils } from 'animejs';\n\nanimate('.normal', {\n  rotate: '1turn',\n  duration: 3000,\n  loop: true,\n  ease: 'inOut',\n});\n\nanimate('.snapped', {\n  rotate: '1turn',\n  modifier: utils.snap(.25), // Used as a modifier\n  duration: 3000,\n  loop: true,\n  ease: 'inOut',\n});\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Anime.js Timeline Animation\nDESCRIPTION: Defines the HTML structure for the animation elements including a pyramid of shapes (triangle, square, circle) and a control button for triggering the reverse animation.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-methodsreverse.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large row\">\n  <div class=\"medium pyramid\">\n    <div class=\"triangle\"></div>\n    <div class=\"square\"></div>\n    <div class=\"circle\"></div>\n  </div>\n</div>\n<div class=\"medium row\">\n  <fieldset class=\"controls\">\n    <button class=\"button reverse\">Reverse</button>\n  </fieldset>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Timer Display and Controls\nDESCRIPTION: HTML layout for displaying the current time of the timer and a play button to manually control the timer. Includes containers with styling classes.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-playback-settingsautoplay.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large centered row\">\n  <div class=\"half col\">\n    <pre class=\"large log row\">\n      <span class=\"label\">current time</span>\n      <span class=\"time value lcd\">0</span>\n    </pre>\n  </div>\n</div>\n<div class=\"medium row\">\n  <fieldset class=\"controls\">\n    <button class=\"play\">Play</button>\n  </fieldset>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for AnimeJS Animation Target\nDESCRIPTION: The HTML markup that defines the target element for the animation. It shows a square element inside a container with 'large row' classes.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationtween-value-typesunit-conversion-value.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large row\">\n  <div class=\"square\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Draggable Elements with maxVelocity in AnimeJS\nDESCRIPTION: Demonstrates how to create draggable elements with different maxVelocity settings. The first example shows a square with no velocity after release (0), while the second shows a circle with maximum velocity of 100.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-settingsmaxvelocity.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createDraggable } from 'animejs';\n\ncreateDraggable('.square', {\n  container: '.grid',\n  maxVelocity: 0,\n});\n\ncreateDraggable('.circle', {\n  container: '.grid',\n  maxVelocity: 100,\n});\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for ScrollObserver Example\nDESCRIPTION: This HTML snippet defines the structure for the Anime.js ScrollObserver example. It includes a scrollable container (`scroll-container`) with nested divs representing scrollable sections and content.  The 'square' div is the element animated by Anime.js, and the 'value' span is updated by the `onLeave` callback.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscrollscrollobserver-callbacksonleave.md#2025-04-18_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"scroll-container scroll-y\">\n  <div class=\"scroll-content grid square-grid\">\n    <div class=\"scroll-section padded sticky\">\n      <div class=\"large row\">\n        <pre class=\"large log row\">\n          <span class=\"label\">exits</span>\n          <span class=\"value\">0</span>\n        </pre>\n      </div>\n    </div>\n    <div class=\"scroll-section padded\">\n      <div class=\"large row\">\n        <div class=\"square\"></div>\n      </div>\n    </div>\n    <div class=\"scroll-section\">\n    </div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for AnimeJS Animation Demo\nDESCRIPTION: This HTML snippet defines the DOM structure needed for the animation demonstration. It includes two square elements that will be animated and a control button labeled 'Complete' that triggers the complete() method when clicked.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-methodscomplete.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"medium row\">\n  <div class=\"square\"></div>\n</div>\n<div class=\"medium row\">\n  <div class=\"square\"></div>\n</div>\n<div class=\"medium row\">\n  <fieldset class=\"controls\">\n    <button class=\"button complete\">Complete</button>\n  </fieldset>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Animating JavaScript Object Properties with Anime.js\nDESCRIPTION: This snippet demonstrates how to animate properties of a JavaScript object using Anime.js. It includes setting up the initial object, importing necessary functions from Anime.js, and defining the animation with a render callback to update the DOM.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimatable-propertiesjavascript-object-properties.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate, utils } from 'animejs';\n\nconst myObject = {\n  number: 1337,\n  unit: '42%',\n}\n\nconst [ $log ] = utils.$('code');\n\nanimate(myObject, {\n  number: 50,\n  unit: '100%',\n  modifier: utils.round(0),\n  onRender: function() {\n    $log.innerHTML = JSON.stringify(myObject);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Animation\nDESCRIPTION: HTML markup showing the structure of multiple circle elements that are targeted by the animations.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationweb-animation-apiimprovements-to-the-web-animation-apimulti-targets-animation.md#2025-04-18_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"medium row\">\n  <div class=\"circle\"></div>\n</div>\n<div class=\"medium row\">\n  <div class=\"circle\"></div>\n</div>\n<div class=\"medium row\">\n  <div class=\"circle\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Color Animation Example\nDESCRIPTION: HTML markup setting up multiple div elements with the 'circle' class for color animation demonstration. The structure consists of a container with multiple circle elements that will receive the animated color changes.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationtween-value-typescolor-function-value.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large justified row\">\n  <div class=\"circle\"></div>\n  <div class=\"circle\"></div>\n  <div class=\"circle\"></div>\n  <div class=\"circle\"></div>\n  <div class=\"circle\"></div>\n  <div class=\"circle\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Timeline Playback Ease with Individual Animations\nDESCRIPTION: Creates a timeline with custom playback easing and adds multiple animations with different easing functions for different elements.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-playback-settingsplaybackease.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst tl = createTimeline({\n  playbackEase: 'inOut(3)', // this ease is applied across all children\n})\n.add('.circle', { x: '15rem', ease: 'out(1)' })\n.add('.triangle', { x: '15rem', ease: 'out(2)' })\n.add('.square', { x: '15rem', ease: 'out(3)' });\n```\n\n----------------------------------------\n\nTITLE: Timer Control Interface HTML Structure\nDESCRIPTION: HTML structure for displaying the timer controls and time display. Includes a large LCD-style time display and three control buttons for resume, pause, and alternate functions.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-methodsresume.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large centered row\">\n  <div class=\"half col\">\n    <pre class=\"large log row\">\n      <span class=\"label\">iteration time</span>\n      <span class=\"time value lcd\">0</span>\n    </pre>\n  </div>\n</div>\n<div class=\"medium row\">\n  <fieldset class=\"controls\">\n    <button class=\"button\">Resume</button>\n    <button class=\"button\">Pause</button>\n    <button class=\"button\">Alternate</button>\n  </fieldset>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Basic Wrap Function Usage in JavaScript\nDESCRIPTION: Demonstrates the basic usage of the wrap utility function to constrain numbers within a range. Shows both direct value wrapping and creating a wrapper function.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitieswrap.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst wrappedValue = utils.wrap(value, min, max);\nconst wrapperFunction = utils.wrap(min, max);\n```\n\n----------------------------------------\n\nTITLE: Animating with Tween Parameters Array in AnimeJS\nDESCRIPTION: Creates an animation sequence using an array of objects with 'to' properties that specify target values for x and y properties. The animation will transition to each target value over the specified duration.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationkeyframes.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nanimate('.square', {\n  x: [{to: 100}, {to: 200}],\n  y: [{to: 100}, {to: 200}],\n  duration: 3000,\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Animation Demo\nDESCRIPTION: HTML markup demonstrating the structure needed for the animation examples, including elements with different style retention behaviors.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiesclean-inline-styles.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"medium row\">\n  <div class=\"square keep-styles\"></div>\n  <div class=\"padded label\">Keep styles (default)</div>\n</div>\n<div class=\"medium row\">\n  <div class=\"square clean-styles\"></div>\n  <div class=\"padded label\">Clean translateX and borderRadius</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Timer Loop Defaults in AnimeJS\nDESCRIPTION: Shows how to modify the default loop behavior globally in AnimeJS by updating the engine defaults. This affects all timers created afterward unless overridden.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-playback-settingsloop.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { engine } from 'animejs';\nengine.defaults.loop = true;\n```\n\n----------------------------------------\n\nTITLE: Implementing $ Utility with Global and Scoped Selections in Anime.js\nDESCRIPTION: Example showing how to use the $ utility to select elements globally and within a specific scope. It demonstrates setting scale on all squares and rotating only squares within a specific row.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiesdollar-sign.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { utils, createScope } from 'animejs';\n\n// Targets all the '.square' elements\nutils.$('.square').forEach($square => {\n  utils.set($square, { scale: .5 });\n});\n\ncreateScope({ root: '.row:nth-child(2)' }).add(() => {\n  // Limits the selection to '.row:nth-child(2) .square'\n  utils.$('.square').forEach($square => {\n    utils.set($square, { rotate: 45 });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Animation Demo HTML Structure\nDESCRIPTION: HTML structure for the animation demo containing multiple circles and a revert button control.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimatableanimatable-methodsrevert.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large centered row\">\n  <div class=\"circle\"></div>\n  <div class=\"circle\"></div>\n  <div class=\"circle\"></div>\n  <div class=\"circle\"></div>\n  <div class=\"circle\"></div>\n</div>\n<div class=\"medium row\">\n  <fieldset class=\"controls\">\n    <button class=\"button revert\">Revert</button>\n  </fieldset>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Scroll Animation - HTML\nDESCRIPTION: This code snippet provides the necessary HTML structure to complement the JavaScript animation. It defines a scrollable container with multiple sections and squares that will be animated as the user scrolls down the page. The proper division and class names ensure that the scrolling and animation functionalities work in tandem.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscrollscrollobserver-synchronisation-modeseased-scroll.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"scroll-container scroll-y\">\n  <div class=\"scroll-content grid square-grid\">\n    <div class=\"scroll-section padded\">\n      <div class=\"large row\">\n        <div class=\"label\">scroll down</div>\n      </div>\n    </div>\n    <div class=\"scroll-section padded\">\n      <div class=\"large row\">\n        <div class=\"square\"></div>\n        <div class=\"square\"></div>\n      </div>\n    </div>\n    <div class=\"scroll-section\">\n    </div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Unit Inheritance in Anime.js Animations\nDESCRIPTION: Shows how Anime.js inherits units from previous animations on the same property when no unit is specified in subsequent animations.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationtween-value-typesnumerical-value.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nanimate(target, { width: '50%' }); // Uses '%'\nanimate(target, { width: 75 });    // Inherits '%' -> '75%'\n```\n\n----------------------------------------\n\nTITLE: Create Timer with Anime.js\nDESCRIPTION: This JavaScript code creates two timers using the `createTimer` function (assumed to be defined elsewhere), one configured to run in seconds and another in milliseconds.  These timers update the HTML content with current iteration time. It showcases the usage of `utils.roundPad` to format the displayed time.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationengineengine-parameterstimeunit-seconds-milliseconds.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst [ $timeS ] = utils.$('.time-s');\nconst [ $timeMs ] = utils.$('.time-ms');\nconst [ $ms, $s ] = utils.$('.toggle');\n\nconst secondsTimer = createTimer({\n  duration: 1,\n  loop: true,\n  onUpdate: self => $timeS.innerHTML = utils.roundPad(self.iterationCurrentTime, 2)\n});\n\nconst millisecondsTimer = createTimer({\n  duration: 1000,\n  loop: true,\n  onUpdate: self => $timeMs.innerHTML = utils.roundPad(self.iterationCurrentTime, 2)\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Loop Delay for Specific Animation in AnimeJS\nDESCRIPTION: Shows how to create an animation with specific loop delay settings, including scale transformation and alternating animation.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-playback-settingsplayback-loopdelay.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst loopDelayAnimation = animate('.circle', {\n  x: '16rem',\n  scale: {\n    to: 1.8,\n    delay: 500,\n    duration: 500,\n  },\n  loopDelay: 1000,\n  loop: true,\n  alternate: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Anime.js WAAPI Module\nDESCRIPTION: Demonstrates how to import the WAAPI module from Anime.js and use it to animate an element with a translation of 16rem.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationweb-animation-apiimprovements-to-the-web-animation-apisensible-defaults.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { waapi } from 'animejs';\n\nwaapi.animate('.circle', { translate: '16rem' });\n```\n\n----------------------------------------\n\nTITLE: SVG Markup with Displacement Filter\nDESCRIPTION: HTML markup for an SVG element that includes a displacement filter and a polygon shape. This SVG demonstrates the visual output of the animation examples, showing a hexagon that can be animated.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimatable-propertiessvg-attributes.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large centered row\">\n<svg width=\"128\" height=\"128\" viewBox=\"0 0 128 128\">\n  <filter id=\"displacementFilter\">\n    <feTurbulence type=\"turbulence\" numOctaves=\"2\" baseFrequency=\"0\" result=\"turbulence\"/>\n    <feDisplacementMap in2=\"turbulence\" in=\"SourceGraphic\" scale=\"1\" xChannelSelector=\"R\" yChannelSelector=\"G\"/>\n  </filter>\n  <polygon points=\"64 128 8.574 96 8.574 32 64 0 119.426 32 119.426 96\"  fill=\"currentColor\"/>\n</svg>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing onGrab Callback for Draggable Elements in Anime.js\nDESCRIPTION: This snippet demonstrates how to use the onGrab callback with createDraggable in Anime.js. It creates a draggable square and updates a counter each time the element is grabbed.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-callbacksongrab.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createDraggable, utils } from 'animejs';\n\nconst [ $value ] = utils.$('.value');\n\nlet grabs = 0;\n\ncreateDraggable('.square', {\n  container: '.grid',\n  onGrab: () => $value.textContent = ++grabs\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing cleanInlineStyles with Animations\nDESCRIPTION: Comprehensive example showing how to use cleanInlineStyles with animations, including setting initial styles and cleaning specific properties while keeping others.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiesclean-inline-styles.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate, utils } from 'animejs';\n\nutils.set('.square', { scale: .75 });\n\nanimate('.keep-styles', {\n  x: '23rem',\n  borderRadius: '50%',\n});\n\nanimate('.clean-styles', {\n  x: '23rem',\n  borderRadius: '50%',\n  // This removes the translateX and borderRadius inline styles\n  // But keeps the scale previously added outside of this animation\n  onComplete: utils.cleanInlineStyles\n});\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Anime.js restart() Demo\nDESCRIPTION: This HTML markup creates the structure needed for the restart() method demonstration. It includes square elements that will be animated and a restart button that triggers the animation restart.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-methodsrestart.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"medium row\">\n  <div class=\"square\"></div>\n</div>\n<div class=\"medium row\">\n  <div class=\"square\"></div>\n</div>\n<div class=\"medium row\">\n  <fieldset class=\"controls\">\n    <button class=\"button restart\">Restart</button>\n  </fieldset>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Anime.js Animation\nDESCRIPTION: Provides the HTML structure for the elements being animated in the timeline example. It includes a pyramid structure with triangle, square, and circle elements.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimeline.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large row\">\n  <div class=\"medium pyramid\">\n    <div class=\"triangle\"></div>\n    <div class=\"square\"></div>\n    <div class=\"circle\"></div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Draggable Elements with containerFriction in Anime.js\nDESCRIPTION: This snippet demonstrates how to create draggable elements with different containerFriction values using Anime.js. It shows two examples: one with no friction (0) and another with maximum friction (1).\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-settingscontainerfriction.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createDraggable } from 'animejs';\n\ncreateDraggable('.square', {\n  container: '.grid',\n  containerFriction: 0,\n});\n\ncreateDraggable('.circle', {\n  container: '.grid',\n  containerFriction: 1,\n});\n```\n\n----------------------------------------\n\nTITLE: Animating Rotation in Degrees and Radians with Anime.js\nDESCRIPTION: Illustrates how to use the degToRad utility in an animation context. It creates two animatables, one for degrees and one for radians, and synchronizes their rotation using the degToRad conversion.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiesdeg-to-rad.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate, createAnimatable, utils } from 'animejs';\n\nconst radAnimatable = createAnimatable('.rad', {\n  rotate: { unit: 'rad', duration: 0 },\n});\n\nconst [ $deg ] = utils.$('.deg');\n\nconst degAnimation = animate($deg, {\n  rotate: '360deg',\n  ease: 'linear',\n  loop: true,\n  onUpdate: () => {\n    const degrees = utils.get($deg, 'rotate', false);\n    radAnimatable.rotate(utils.degToRad(degrees));\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Anime.js Timeline Demo\nDESCRIPTION: This HTML snippet provides the structure for the Anime.js timeline demo. It includes animated elements (triangle, square, circle) and control buttons for pause, alternate, and resume actions.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-methodsresume.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large row\">\n  <div class=\"medium pyramid\">\n    <div class=\"triangle\"></div>\n    <div class=\"square\"></div>\n    <div class=\"circle\"></div>\n  </div>\n</div>\n<div class=\"medium row\">\n  <fieldset class=\"controls\">\n    <button class=\"button\">Pause</button>\n    <button class=\"button\">Alternate</button>\n    <button class=\"button\">Resume</button>\n  </fieldset>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting Global Default for Reversed Timeline in Anime.js\nDESCRIPTION: This snippet demonstrates how to change the default value of the 'reversed' property globally for all timelines in Anime.js. It imports the engine from 'animejs' and sets the default reversed value to true.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-playback-settingsreversed.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { engine } from 'animejs';\nengine.defaults.reversed = true;\n```\n\n----------------------------------------\n\nTITLE: AnimeJS Round Utility in Animation Example\nDESCRIPTION: Demonstrates using the round utility in actual animations. It creates two animations, one normal and one with rotation values rounded to one decimal place using the round utility as a modifier function.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiesround.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate, utils } from 'animejs';\n\nanimate('.normal', {\n  rotate: '1turn',\n  duration: 3000,\n  loop: true,\n});\n\nanimate('.rounded', {\n  rotate: '1turn',\n  modifier: utils.round(1), // Used as a function\n  duration: 3000,\n  loop: true,\n});\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Anime.js Timeline Animation\nDESCRIPTION: This HTML structure contains the elements targeted by the Anime.js timeline animation. It includes triangle, square, and circle elements arranged in a pyramid layout.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-playback-settingsdefaults.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large row\">\n  <div class=\"medium pyramid\">\n    <div class=\"triangle\"></div>\n    <div class=\"square\"></div>\n    <div class=\"circle\"></div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Animating Squares with anime.js\nDESCRIPTION: HTML markup that creates a series of square elements organized in rows. These elements are targeted by the anime.js animation to demonstrate individual CSS transform properties.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationweb-animation-apiimprovements-to-the-web-animation-apiindividual-css-transforms.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"small row\">\n  <div class=\"square\"></div>\n</div>\n<div class=\"small row\">\n  <div class=\"square\"></div>\n</div>\n<div class=\"small row\">\n  <div class=\"square\"></div>\n</div>\n<div class=\"small row\">\n  <div class=\"square\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Staggered Grid Animation\nDESCRIPTION: This snippet provides the HTML structure necessary for rendering the animated squares in a staggered grid. Each square is contained within a div, and this layout is essential for the associated JavaScript animations to function correctly.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationstaggerstagger-parametersstagger-grid-axis.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"small justified row\">\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n</div>\n<div class=\"small justified row\">\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n</div>\n<div class=\"small justified row\">\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n</div>\n<div class=\"small justified row\">\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Animating with HEX Color Values in Anime.js\nDESCRIPTION: This snippet demonstrates how to use HEX color values in Anime.js animations. It targets an element with the class 'hex' and animates its background color to '#FF4B4B'.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationtween-value-typescolor-value.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate } from 'animejs';\n\nanimate('.hex',  {\n  background: '#FF4B4B',\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Draggable Elements\nDESCRIPTION: This snippet creates a draggable element using the `createDraggable` function. It targets elements with the class `.logo.js` and configures the draggable behavior. It also uses `createSpring` for the `releaseEase` property, providing a spring-like effect when the element is released.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationgetting-startedusing-with-vanilla-js.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Make the logo draggable around its center\ncreateDraggable('.logo.js', {\n  container: [0, 0, 0, 0],\n  releaseEase: createSpring({ stiffness: 200 })\n});\n```\n\n----------------------------------------\n\nTITLE: Using remove() Utility Function in Anime.js\nDESCRIPTION: Demonstrates the usage of the remove() utility function to remove targets from animations. It accepts targets, an optional animation instance, and an optional property name. Returns an array of removed targeted elements.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiesremove.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst removed = utils.remove(targets, instance, propertyName);\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Timeline Animation Controls\nDESCRIPTION: Defines the HTML structure for displaying animated elements and timeline controls. Includes a pyramid of shapes and a range input for controlling animation duration.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-methodsstretch.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large row\">\n  <div class=\"medium pyramid\">\n    <div class=\"triangle\"></div>\n    <div class=\"square\"></div>\n    <div class=\"circle\"></div>\n  </div>\n  <pre class=\"large log row\">\n    <span class=\"label\">total duration</span>\n    <span class=\"value\">0</span>\n  </pre>\n</div>\n<div class=\"medium centered row\">\n  <fieldset class=\"controls\">\n    <input type=\"range\" min=100 max=2000 value=1000 step=100 class=\"seek range\" />\n  </fieldset>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Anime.js Animation Demo\nDESCRIPTION: HTML markup showing the target elements for the animation. Six square div elements are arranged in a row that will be animated using the WAAPI implementation.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationweb-animation-apiimprovements-to-the-web-animation-apiindividual-property-parameters.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large row\">\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for AnimeJS Animation Demo\nDESCRIPTION: This HTML snippet provides the structure for demonstrating the AnimeJS animation refresh functionality. It includes containers for animated squares and a button to trigger the refresh and restart actions.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-methodsrefresh.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"medium row\">\n  <div class=\"square\"></div>\n</div>\n<div class=\"medium row\">\n  <div class=\"square\"></div>\n</div>\n<div class=\"medium row\">\n  <fieldset class=\"controls\">\n    <button class=\"button refresh\">Refresh & Restart</button>\n  </fieldset>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Basic AnimeJS Set Utility Syntax\nDESCRIPTION: Shows the basic syntax for using utils.set() to set property values on target elements. Returns an Animation object that can be used to revert changes.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiesset.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst setter = utils.set(targets, properties);\n```\n\n----------------------------------------\n\nTITLE: Initializing CreateScope with AnimeJS - JavaScript\nDESCRIPTION: This code snippet demonstrates the initialization of a scope using AnimeJS's 'createScope' method. It introduces several methods such as 'add', 'refresh', and 'revert' which allow users to manipulate and manage animation scopes. The snippet does not detail parameters for 'createScope'.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscopescope-methods.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst scope = createScope(parameters);\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Draggable Demo\nDESCRIPTION: Defines the HTML structure required for the draggable element and drag counter display. Includes a grid container, log display area, and the draggable square element.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-callbacksondrag.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large padded grid square-grid\">\n  <pre class=\"large log row\">\n    <span class=\"label\">drags</span>\n    <span class=\"value\">0</span>\n  </pre>\n  <div class=\"square draggable\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Advanced Anime.js Animation with Dynamic Duration\nDESCRIPTION: This snippet showcases a more advanced use of Anime.js, where the duration of each element's animation is determined by its data attribute. It also imports necessary functions from the Anime.js library.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationweb-animation-apiimprovements-to-the-web-animation-apifunction-based-values.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { waapi, utils, stagger } from 'animejs';\n\nwaapi.animate('.square', {\n  translate: () => `${utils.random(10, 17)}rem`,\n  rotate: () => utils.random(-180, 180),\n  scale: (_, i) => .25 + (i * .25),\n  duration: $el => $el.dataset.duration,\n  delay: stagger(100)\n});\n```\n\n----------------------------------------\n\nTITLE: WAAPI Native Implementation for Multiple Elements\nDESCRIPTION: Native Web Animation API implementation showing how to animate multiple elements with staggered delay using forEach loop.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationweb-animation-apiimprovements-to-the-web-animation-apimulti-targets-animation.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.querySelectorAll('.circle').forEach(($el, i) => {\n  $el.animate({\n    translate: '100px',\n  }, {\n    duration: 1000,\n    delay: i * 100,\n    easing: 'ease-out',\n  }).finished.then(() => {\n    $el.style.translate = '100px';\n  })\n});\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Animation Target\nDESCRIPTION: Provides the HTML structure for the animation target, including a container div and a square element to be animated.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationtween-value-typesnumerical-value.md#2025-04-18_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large row\">\n  <div class=\"square\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Staggered Animation Demo\nDESCRIPTION: HTML markup showing the structure for demonstrating staggered animations with multiple square elements and their corresponding timing labels. Each row contains a square element and its timing information.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationstaggertime-staggering.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"small row\">\n  <div class=\"square\"></div>\n  <div class=\"padded label\">delay: 0ms;&nbsp;&nbsp;&nbsp;duration: 500ms</div>\n</div>\n<div class=\"small row\">\n  <div class=\"square\"></div>\n  <div class=\"padded label\">delay: 100ms; duration: 700ms</div>\n</div>\n<div class=\"small row\">\n  <div class=\"square\"></div>\n  <div class=\"padded label\">delay: 200ms; duration: 900ms</div>\n</div>\n<div class=\"small row\">\n  <div class=\"square\"></div>\n  <div class=\"padded label\">delay: 300ms; duration: 1100ms</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Animating with HSL Color Values in Anime.js\nDESCRIPTION: This snippet illustrates the use of HSL color values in Anime.js animations. It targets an element with the class 'hsl' and animates its background color to 'hsl(44, 100%, 59%)'.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationtween-value-typescolor-value.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nanimate('.hsl',  {\n  background: 'hsl(44, 100%, 59%)',\n});\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for AnimeJS Animation Demo\nDESCRIPTION: This HTML snippet provides the structure for the animation demo. It includes two square elements that will be animated, and control buttons for cancelling and playing the animation.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-methodscancel.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"medium row\">\n  <div class=\"square\"></div>\n</div>\n<div class=\"medium row\">\n  <div class=\"square\"></div>\n</div>\n<div class=\"medium row\">\n  <fieldset class=\"controls\">\n    <button class=\"button cancel\">Cancel</button>\n    <button class=\"button play\">Play</button>\n  </fieldset>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Animating Elements with Native Web Animation API\nDESCRIPTION: Illustrates how to use the native Web Animation API's element.animate() method to achieve similar animation effects. It shows differences in syntax for element selection, keyframe definition, and animation option settings.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationweb-animation-apiapi-differences-with-native-waapi.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst $square = document.querySelector('.square');\n\n$square\n.animate({\ntranslate: '100px 50px',\nopacity: .5,\n}, {\nieterations: 4,\ndirection: 'alternate',\neasing: 'ease-out',\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Engine Properties in Anime.js - JavaScript\nDESCRIPTION: This snippet demonstrates how to import the engine object from the 'animejs' module, providing access to various engine properties that control animation behavior, such as time units, frame rates, and playback settings. The 'animejs' module is a dependency for using these engine properties.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationengineengine-properties.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { engine } from 'animejs';\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Animation Speed Control Demo\nDESCRIPTION: HTML markup for the animation playback rate demo, featuring a circle element that will be animated, a display for the current speed value, and a range input control for adjusting the animation speed.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-playback-settingsplaybackrate.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large row\">\n  <div class=\"circle\"></div>\n  <pre class=\"large log row\">\n    <span class=\"label\">speed</span>\n    <span class=\"speed value\">1.00</span>\n  </pre>\n</div>\n<div class=\"medium row\">\n  <fieldset class=\"controls\">\n    <input type=\"range\" min=0 max=5 value=1 step=.01 class=\"range\" />\n  </fieldset>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Animating CSS Variables with AnimeJS WAAPI method\nDESCRIPTION: This example shows how to animate CSS variables using the WAAPI animate() method. CSS variables can be directly referenced using the 'var(--variable-name)' syntax without additional helpers.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationtween-value-typescss-variable.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { waapi, animate } from 'animejs';\n\nwaapi.animate('.square',  {\n  rotate: 'var(--rotation)',\n  borderColor: ['var(--hex-orange)', 'var(--hex-red)' ],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Draggable Stop Method in AnimeJS\nDESCRIPTION: This snippet demonstrates how to use the 'stop' method on a Draggable object in AnimeJS. It creates a draggable square, animates it, and provides a button to stop all animations. The 'stop' method halts all running animations on the draggable, including container scroll and release animations.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-methodsstop.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createDraggable, animate, utils } from 'animejs';\n\nconst [ $stopButton ] = utils.$('.stop');\n\nconst draggable = createDraggable('.square');\n\nanimate(draggable, {\n  x: [-100, 100],\n  alternate: true,\n  loop: true\n});\n\nconst stopDraggable = () => draggable.stop();\n\n$stopButton.addEventListener('click', stopDraggable);\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Reverse Animation Demo\nDESCRIPTION: Defines the HTML structure for demonstrating the reverse animation, including two square elements and a control button. The layout uses rows for organization and includes a fieldset for controls.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-methodsreverse.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"medium row\">\n  <div class=\"square\"></div>\n</div>\n<div class=\"medium row\">\n  <div class=\"square\"></div>\n</div>\n<div class=\"medium row\">\n  <fieldset class=\"controls\">\n    <button class=\"button reverse\">Reverse</button>\n  </fieldset>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting Default onRender Callback Globally in Anime.js\nDESCRIPTION: This snippet demonstrates how to set a default onRender callback globally for all timelines using the engine.defaults object in Anime.js.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-callbacksonrender.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { engine } from 'animejs';\nengine.defaults.onRender = self => console.log(self.id);\n```\n\n----------------------------------------\n\nTITLE: Applying Axis Modifiers in AnimeJS Draggable\nDESCRIPTION: This snippet demonstrates how to use the 'modifier' parameter in createDraggable to limit the movement range of a draggable element. It uses the utils.wrap function to constrain the movement globally and specifically for the x-axis.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-axes-parametersmodifier.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createDraggable, utils } from 'animejs';\n\ncreateDraggable('.square', {\n  modifier: utils.wrap(-32, 32), // Global to both x and y\n  x: { modifier: utils.wrap(-128, 128) }, // Specific to x \n});\n```\n\n----------------------------------------\n\nTITLE: Configuring releaseContainerFriction for Draggable Elements in Anime.js\nDESCRIPTION: This snippet demonstrates how to create draggable elements with different releaseContainerFriction values. It shows two examples: one with no friction (0) and another with maximum friction (1).\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-settingsreleasecontainerfriction.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createDraggable } from 'animejs';\n\ncreateDraggable('.square', {\n  container: '.grid',\n  releaseContainerFriction: 0,\n});\n\ncreateDraggable('.circle', {\n  container: '.grid',\n  releaseContainerFriction: 1,\n});\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for AnimeJS Animation Targets\nDESCRIPTION: HTML markup defining the target elements for the animation. Each square element has a data-x attribute that's used in the animation to set different x values for each target.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationtween-value-typesfunction-based.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"medium row\">\n  <div class=\"square\" data-x=\"170\"></div>\n</div>\n<div class=\"medium row\">\n  <div class=\"square\" data-x=\"80\"></div>\n</div>\n<div class=\"medium row\">\n  <div class=\"square\" data-x=\"270\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining Event Listener Functions for Animation\nDESCRIPTION: These functions, `onMouseEnter` and `onMouseLeave`, define the animations that occur when the mouse enters or leaves an element.  `onMouseEnter` scales the element up, and `onMouseLeave` scales it back down. The `animate` function is assumed to be globally available and handles the actual animation logic.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscopescope-methodsrevert.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction onMouseEnter() { animate(this, { scale: 2, duration: 250 }) }\nfunction onMouseLeave() { animate(this, { scale: 1, duration: 750 }) }\n```\n\n----------------------------------------\n\nTITLE: Equivalent animation using Web Animation API\nDESCRIPTION: This code snippet shows how to achieve the same animation effect as the Anime.js example using the native Web Animation API. It selects all elements with the 'square' class and animates them to translate 100 pixels, with alternate-reverse direction for 4 iterations.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationweb-animation-apiapi-differences-with-native-waapidirection.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst targets = document.querySelectorAll('.square');\n\ntargets.forEach(($el, i) => {\n  $el.animate({\n    translate: '100px',\n  }, {\n    fill: 'forwards',\n    duration: 1000,\n    direction: 'alternate-reverse',\n    iterations: 4\n  })\n});\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Timer Display\nDESCRIPTION: This HTML snippet creates a layout for displaying the current time of the Anime.js timer. It consists of a container with a label and a value display element that will be updated by the timer.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-playback-settingsduration.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large centered row\">\n  <div class=\"half col\">\n    <pre class=\"large log row\">\n      <span class=\"label\">current time</span>\n      <span class=\"time value lcd\">0</span>\n    </pre>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Shuffling Array Elements with Anime.js Utils in JavaScript\nDESCRIPTION: Demonstrates how to use the shuffle utility function from Anime.js to randomize an array. It takes an array as input and returns the mutated array with randomized element order.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiesshuffle.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst shuffledArray = utils.shuffle(array);\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Scroll Synchronized Animation\nDESCRIPTION: The HTML snippet outlines the necessary structure for implementing scroll-synchronized animations using Anime.js. It includes a scroll container with sections and a square element that will be animated. The setup assumes integration with a JavaScript animation script using Anime.js.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscrollscrollobserver-synchronisation-modesplayback-progress.md#2025-04-18_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"scroll-container scroll-y\">\n  <div class=\"scroll-content grid square-grid\">\n    <div class=\"scroll-section padded\">\n      <div class=\"large row\">\n        <div class=\"label\">scroll down</div>\n      </div>\n    </div>\n    <div class=\"scroll-section padded\">\n      <div class=\"large row\">\n        <div class=\"square\"></div>\n      </div>\n    </div>\n    <div class=\"scroll-section\">\n    </div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Managing Timer Updates in Anime.js\nDESCRIPTION: This snippet illustrates the setup of two timers: a global timer that tracks elapsed time since the script started, and an engine timer that updates based on the current time of the Anime.js engine. The timers are linked to HTML elements for live updates.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationengineengine-parameterspauseondocumenthidden.md#2025-04-18_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst [ $globalTime ] = utils.$('.global-time');\nconst [ $engineTime ] = utils.$('.engine-time');\nconst [ $toggle ] = utils.$('.toggle');\n\nconst startTime = Date.now();\n\nconst globalTimer = setInterval(() => {\n  $globalTime.innerHTML = Date.now() - startTime;\n}, 16);\n\nconst engineTimer = createTimer({\n  onUpdate: self => $engineTime.innerHTML = self.currentTime\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Default onBegin Callback in AnimeJS\nDESCRIPTION: Demonstrates how to globally set the default onBegin callback using the engine.defaults object. The callback receives the timer instance as its argument.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-callbacksonbegin.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { engine } from 'animejs';\nengine.defaults.onBegin = self => console.log(self.id);\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Draggable Element and Control Button\nDESCRIPTION: This HTML snippet provides the structure for a draggable element within a grid container and includes a button to trigger the animateInView method.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-methodsanimateinview.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"medium padded show-bounds grid square-grid animate-in-view\">\n  <div class=\"square draggable\"></div>\n</div>\n<div class=\"large row\">\n  <fieldset class=\"controls\">\n    <button class=\"button animate-button\">Animate in view</button>\n  </fieldset>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating Timeline with onRender Callback in Anime.js\nDESCRIPTION: This code creates a timeline with an onRender callback that updates a DOM element with the number of renders. It also demonstrates adding multiple animations to the timeline.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-callbacksonrender.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTimeline, utils } from 'animejs';\n\nconst [ $value ] = utils.$('.value');\n\nlet renders = 0;\n\nconst tl = createTimeline({\n  defaults: { duration: 500 },\n  loopDelay: 250,\n  loop: true,\n  onRender: self => $value.textContent = ++renders\n})\n.add('.circle', { x: '15rem' })\n.add('.triangle', { x: '15rem' }, '+=250')\n.add('.square', { x: '15rem' }, '+=250');\n```\n\n----------------------------------------\n\nTITLE: Using loop parameter with AnimeJS WAAPI adapter\nDESCRIPTION: This example demonstrates how to use the 'loop' parameter with AnimeJS's WAAPI adapter to move elements horizontally. The loop parameter is set to 3, making the animation repeat 3 times, and alternate is set to true for back-and-forth movement.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationweb-animation-apiapi-differences-with-native-waapiiterations.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nwaapi.animate('.square', {\n  translate: '17rem',\n  loop: 3,\n  alternate: true,\n  delay: stagger(100)\n});\n```\n\n----------------------------------------\n\nTITLE: Timer Stretch Method Signature\nDESCRIPTION: Basic syntax for the timer.stretch() method that changes the total duration of a timer. Takes a duration parameter in milliseconds and returns the timer instance for method chaining.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-methodsstretch.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntimer.stretch(duration);\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Draggable Element and Stop Button\nDESCRIPTION: This HTML snippet provides the structure for a draggable square element and a 'Stop' button. It sets up the necessary DOM elements for the JavaScript code to interact with, creating a user interface for the draggable functionality demonstration.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-methodsstop.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large centered row\">\n  <div class=\"square draggable\"></div>\n</div>\n<div class=\"large row\">\n  <fieldset class=\"controls\">\n    <button class=\"button stop\">Stop</button>\n  </fieldset>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for ScrollObserver Example\nDESCRIPTION: This HTML code defines the structure for the Anime.js ScrollObserver example, including a scrollable container, sections, and a square element. It includes a sticky section that displays the 'entered' count, which is updated by the onEnter callback in the JavaScript code. The CSS classes 'scroll-container', 'scroll-y', 'scroll-section', 'padded', 'sticky', 'large', 'row', 'label', 'value', and 'square' are used for styling and layout.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscrollscrollobserver-callbacksonenter.md#2025-04-18_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"scroll-container scroll-y\">\n  <div class=\"scroll-content grid square-grid\">\n    <div class=\"scroll-section padded sticky\">\n      <div class=\"large row\">\n        <pre class=\"large log row\">\n          <span class=\"label\">entered</span>\n          <span class=\"value\">0</span>\n        </pre>\n      </div>\n    </div>\n    <div class=\"scroll-section padded\">\n      <div class=\"large row\">\n        <div class=\"square\"></div>\n      </div>\n    </div>\n    <div class=\"scroll-section\">\n    </div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Animating Element Properties with Anime.js WAAPI\nDESCRIPTION: This snippet demonstrates how to animate various properties of an element using Anime.js WAAPI. It sets x, y, width, and height values without specifying units, which will use default units.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationweb-animation-apiimprovements-to-the-web-animation-apidefault-units.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nwaapi.animate('.circle', {\n  x: 100,\n  y: 50,\n  width: 150,\n  height: 80,\n});\n```\n\n----------------------------------------\n\nTITLE: SVG Path Definition for Motion Animation\nDESCRIPTION: Defines an SVG path representing the Suzuka circuit that serves as the motion path for the animation, including viewBox and path specifications.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationsvgcreatemotionpath.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<svg viewBox=\"0 0 304 112\">\n  <title>Suzuka</title>\n  <g stroke=\"none\" fill=\"none\" fill-rule=\"evenodd\">\n    <path d=\"M189.142857,4 C227.456875,4 248.420457,4.00974888 256.864191,4.00974888 C263.817211,4.00974888 271.61219,3.69583517 274.986231,6.63061513 C276.382736,7.84531176 279.193529,11.3814152 280.479499,13.4815847 C281.719344,15.5064248 284.841964,20.3571626 275.608629,20.3571626 C265.817756,20.3571626 247.262478,19.9013915 243.955117,19.9013915 C239.27946,19.9013915 235.350655,24.7304885 228.6344,24.7304885 C224.377263,24.7304885 219.472178,21.0304113 214.535324,21.0304113 C207.18393,21.0304113 200.882842,30.4798911 194.124187,30.4798911 C186.992968,30.4798911 182.652552,23.6245972 173.457298,23.6245972 C164.83277,23.6245972 157.191045,31.5424105 157.191045,39.1815359 C157.191045,48.466779 167.088672,63.6623005 166.666679,66.9065088 C166.378668,69.1206889 155.842137,79.2568633 151.508744,77.8570506 C145.044576,75.7689355 109.126667,61.6405346 98.7556561,52.9785141 C96.4766876,51.0750861 89.3680347,39.5769094 83.4195005,38.5221785 C80.6048001,38.0231057 73.0179337,38.7426555 74.4158694,42.6956376 C76.7088819,49.1796531 86.3280337,64.1214904 87.1781062,66.9065088 C88.191957,70.2280995 86.4690152,77.0567847 82.2060607,79.2503488 C79.2489435,80.7719756 73.1324132,82.8858479 64.7015706,83.0708761 C55.1604808,83.2802705 44.4254811,80.401884 39.1722168,80.401884 C25.7762119,80.401884 24.3280517,89.1260466 22.476679,94.4501705 C21.637667,96.8629767 20.4337535,108 33.2301959,108 C37.8976087,108 45.0757044,107.252595 53.4789069,103.876424 C61.8821095,100.500252 122.090049,78.119656 128.36127,75.3523302 C141.413669,69.5926477 151.190142,68.4987755 147.018529,52.0784879 C143.007818,36.291544 143.396957,23.4057975 145.221196,19.6589263 C146.450194,17.1346449 148.420955,14.8552817 153.206723,15.7880203 C155.175319,16.1716965 155.097637,15.0525421 156.757598,11.3860986 C158.417558,7.71965506 161.842736,4.00974888 167.736963,4.00974888 C177.205308,4.00974888 184.938832,4 189.142857,4 Z\" id=\"suzuka\" stroke=\"currentColor\" stroke-width=\"2\"></path>\n  </g>\n</svg>\n<div class=\"square car motion-path-car\" style=\"transform: translateX(189px) translateY(4px);\"></div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Scroll Animation\nDESCRIPTION: This HTML snippet defines the structure for a scroll container with nested sections and a target element ('.square') for animation. The outer 'scroll-container' enables vertical scrolling, and the 'scroll-content' contains multiple 'scroll-section' elements, including one that holds the animated square.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscrollscrollobserver-thresholdsrelative-position-values.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"scroll-container scroll-y\">\n  <div class=\"scroll-content grid square-grid\">\n    <div class=\"scroll-section padded\">\n      <div class=\"large centered row\">\n        <div class=\"label\">scroll down</div>\n      </div>\n    </div>\n    <div class=\"scroll-section padded\">\n      <div class=\"large row\">\n        <div class=\"square\"></div>\n      </div>\n    </div>\n    <div class=\"scroll-section\">\n    </div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Anime.js Utility Examples\nDESCRIPTION: HTML structure used in the examples, consisting of three rows each containing eight square elements that can be targeted by the utility functions.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiesdollar-sign.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"medium justified row\">\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n</div>\n<div class=\"medium justified row\">\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n</div>\n<div class=\"medium justified row\">\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting Default onPause Callback in AnimeJS\nDESCRIPTION: Example of setting a global default onPause callback for all animations using the engine.defaults object.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-callbacksonpause.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { engine } from 'animejs';\nengine.defaults.onPause = self => console.log(self.id);\n```\n\n----------------------------------------\n\nTITLE: Animating CSS color() Function with AnimeJS WAAPI\nDESCRIPTION: Example of using AnimeJS's WAAPI method to animate background color with the CSS color() function. This code imports the waapi module from AnimeJS and applies a display-p3 color space animation to elements with the 'circle' class.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationtween-value-typescolor-function-value.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { waapi } from 'animejs';\n\nwaapi.animate('.circle',  {\n  backgroundColor: 'color(display-p3 1.0 0.267 0.267 / 1.0)',\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Animation Removal in Anime.js\nDESCRIPTION: This snippet shows a practical implementation of the remove() function in an Anime.js animation. It creates an animation for square elements and provides buttons to remove elements from the animation.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiesremove.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate, utils } from 'animejs';\n\nlet updates = 0;\n\nconst [ $removeFirstButton ] = utils.$('.remove-1');\nconst [ $removeSecondButton ] = utils.$('.remove-2');\nconst [ $updates ] = utils.$('.value');\n\nconst animation = animate('.square', {\n  x: '17rem',\n  rotate: 360,\n  alternate: true,\n  loop: true,\n  onUpdate: () => {\n    $updates.textContent = updates++;\n  }\n});\n\n$removeFirstButton.onclick = () => {\n  utils.remove('.row:nth-child(1) .square');\n}\n\n$removeSecondButton.onclick = () => {\n  utils.remove('.row:nth-child(2) .square', animation, 'x');\n}\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Structure for AnimeJS Timer UI\nDESCRIPTION: This HTML snippet defines the structure for displaying the timer's current time and a button to trigger the reverse functionality. It includes a log area to show the iteration time and a control section with a reverse button.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-methodsreverse.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large centered row\">\n  <div class=\"half col\">\n    <pre class=\"large log row\">\n      <span class=\"label\">iteration time</span>\n      <span class=\"time value lcd\">0</span>\n    </pre>\n  </div>\n</div>\n<div class=\"medium row\">\n  <fieldset class=\"controls\">\n    <button class=\"button reverse\">Reverse</button>\n  </fieldset>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Executing Callback Functions in AnimeJS Timeline\nDESCRIPTION: This snippet demonstrates how to use the 'call' method in an AnimeJS timeline to execute callback functions at specific time positions. It updates the content of HTML elements at different intervals.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-methodscall.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTimeline, utils } from 'animejs';\n\nconst [ $functionA ] = utils.$('.function-A');\nconst [ $functionB ] = utils.$('.function-B');\nconst [ $functionC ] = utils.$('.function-C');\n\nconst tl = createTimeline()\n.call(() => $functionA.innerHTML = 'A', 0)\n.call(() => $functionB.innerHTML = 'B', 800)\n.call(() => $functionC.innerHTML = 'C', 1200);\n```\n\n----------------------------------------\n\nTITLE: Setting Global Alternate Default in AnimeJS\nDESCRIPTION: Demonstrates how to globally configure the default alternate setting for all animations using the engine.defaults object.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-playback-settingsalternate.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { engine } from 'animejs';\nengine.defaults.alternate = true;\n```\n\n----------------------------------------\n\nTITLE: Chaining AnimeJS Utility Functions Example\nDESCRIPTION: Shows how to chain multiple AnimeJS utilities. In this example, the clamp utility is chained with round to first limit a value between 0 and 100, then round it to 2 decimal places.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiesround.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst clampAndRound = utils.clamp(0, 100).round(2); // Clamp then round to 2 decimal places\nclampAndRound(72.7523); // 72.75\nclampAndRound(120.2514); // 100\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Displaying Timer Status and Time\nDESCRIPTION: This HTML snippet provides the structure for displaying the completion status and current time of the Anime.js timer. It uses pre-formatted elements with specific classes for styling and identification.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-callbacksoncomplete.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large row\">\n  <div class=\"col\">\n    <pre class=\"large log row\">\n      <span class=\"label\">completed</span>\n      <span class=\"status value\">false</span>\n    </pre>\n  </div>\n  <div class=\"col\">\n    <pre class=\"large log row\">\n      <span class=\"label\">current time</span>\n      <span class=\"time value lcd\">0</span>\n    </pre>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Scroll-Based Animation\nDESCRIPTION: This HTML snippet provides the layout necessary for the JavaScript code to function. It sets up a scrollable container with nested elements where animations are applied. A '.scroll-container' class is used to define the scrolling area containing sections with '.scroll-content' and '.square-grid' for organizing the animated grid of squares. The '.value' span displays the number of times the 'onLeaveForward' condition is met. This layout is crucial for the scroll-triggered animations to work correctly.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscrollscrollobserver-callbacksonleaveforward.md#2025-04-18_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\\\"scroll-container scroll-y\\\">\n  <div class=\\\"scroll-content grid square-grid\\\">\n    <div class=\\\"scroll-section padded sticky\\\">\n      <div class=\\\"large row\\\">\n        <pre class=\\\"large log row\\\">\n          <span class=\\\"label\\\">exits</span>\n          <span class=\\\"value\\\">0</span>\n        </pre>\n      </div>\n    </div>\n    <div class=\\\"scroll-section padded\\\">\n      <div class=\\\"large row\\\">\n        <div class=\\\"square\\\"></div>\n      </div>\n    </div>\n    <div class=\\\"scroll-section\\\">\n    </div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Equivalent Animation Using Native Web Animation API\nDESCRIPTION: This code snippet shows the equivalent animation using the native Web Animation API. It animates translate, width, and height properties, explicitly specifying 'px' units. It also demonstrates setting duration, easing, and handling animation completion.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationweb-animation-apiimprovements-to-the-web-animation-apidefault-units.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst $el = document.querySelector('.circle');\n\n$el.animate({\n  translate: '100px 50px',\n  width: '150px',\n  height: '80px',\n}, {\n  duration: 1000,\n  easing: 'ease-out',\n}).finished.then(() => {\n  $el.style.translate = '100px';\n});\n```\n\n----------------------------------------\n\nTITLE: Anime.js Timeline sync() Method Syntax\nDESCRIPTION: Shows the syntax for the timeline.sync() method which is used to synchronize WAAPI animations with an Anime.js timeline. The method takes an animation object and an optional position parameter.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinesync-waapi-animations.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ntimeline.sync(animation, position);\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for AnimeJS Stagger Animation\nDESCRIPTION: This HTML structure defines a row of square elements that will be animated using the stagger function. It creates 11 div elements with the class 'square' inside a container with classes 'small justified row'.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationstaggerstagger-value-typesrange-value.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"small justified row\">\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Displaying Animated Value\nDESCRIPTION: Provides the HTML structure used to display the animated value from the previous JavaScript animation example.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitieschain-able-utility-functions.md#2025-04-18_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large row\">\n  <pre class=\"large log row\">\n    <span class=\"value lcd\">0</span>\n  </pre>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Basic radToDeg Usage in Anime.js\nDESCRIPTION: Shows the basic syntax for converting radians to degrees using the radToDeg utility function. The function accepts a radian value and returns the equivalent in degrees.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiesrad-to-deg.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst degrees = utils.radToDeg(radians);\n```\n\n----------------------------------------\n\nTITLE: Creating Anime.js Scopes and Refreshing them (JavaScript)\nDESCRIPTION: This snippet demonstrates how to create Anime.js scopes using `createScope` and add a constructor function to each scope. The `refresh()` method is then used to rebuild the scope when a button is clicked. The example includes setting up a timeline with staggering animations for circle elements within the scopes.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscopescope-methodsrefresh.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { utils, stagger, createScope, createTimeline } from 'animejs';\n\nconst [ $button1, $button2 ] = utils.$('.refresh');\n\nconst scopeConstructor = scope => {\n  const circles = utils.$('.circle');\n  if (scope.i === undefined || scope.i > circles.length - 1) scope.i = 0;\n  const i = scope.i++;\n  \n  utils.set(circles, {\n    opacity: stagger([1, .25], { from: i, ease: 'out(3)' }),\n  });\n  \n  createTimeline()\n  .add(circles, {\n    scale: [{ to: [.5, 1], duration: 250 }, { to: .5, duration: 750 }],\n    duration: 750,\n    loop: true,\n  }, stagger(50, { from: i }))\n  .seek(750)\n}\n\nconst scope1 = createScope({ root: '.row-1' }).add(scopeConstructor);\nconst scope2 = createScope({ root: '.row-2' }).add(scopeConstructor);\n\nconst refreshScope1 = () => scope1.refresh();\nconst refreshScope2 = () => scope2.refresh();\n\n$button1.addEventListener('click', refreshScope1);\n$button2.addEventListener('click', refreshScope2);\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Anime.js Timeline Remove Example\nDESCRIPTION: The HTML structure used in the Anime.js timeline remove example. It includes elements for animation and control buttons.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-methodsremove.md#2025-04-18_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large row\">\n  <div class=\"medium pyramid\">\n    <div class=\"triangle\"></div>\n    <div class=\"square\"></div>\n    <div class=\"circle\"></div>\n  </div>\n</div>\n<div class=\"medium row\">\n  <fieldset class=\"controls\">\n    <button class=\"button\">Remove anim</button>\n    <button class=\"button\">Remove target</button>\n    <button class=\"button\">remove tween</button>\n  </fieldset>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Chaining roundPad with Other AnimeJS Utilities\nDESCRIPTION: Shows how to chain the roundPad function with other utilities like snap. This example demonstrates snapping a value to the nearest 50 and then rounding and padding it to 2 decimal places.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiesround-pad.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst snapAndRoundPad = utils.snap(50).roundPad(2); // Snap to nearest 50 then roundPad to 2 decimal places\nsnapAndRoundPad(123.456); // '100.00'\nsnapAndRoundPad(175.789); // '200.00'\n```\n\n----------------------------------------\n\nTITLE: SVG markup for line drawing animation\nDESCRIPTION: HTML SVG markup defining a complex logo/text design using paths and polylines. Each element has the 'line' class which is referenced in the JavaScript animation code for drawing effects.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationsvgcreatedrawable.md#2025-04-18_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<svg viewBox=\"0 0 304 112\">\n  <g stroke=\"currentColor\" fill=\"none\" fill-rule=\"evenodd\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\">\n    <path class=\"line\" d=\"M59 90V56.136C58.66 46.48 51.225 39 42 39c-9.389 0-17 7.611-17 17s7.611 17 17 17h8.5v17H42C23.222 90 8 74.778 8 56s15.222-34 34-34c18.61 0 33.433 14.994 34 33.875V90H59z\"/>\n    <polyline class=\"line\" points=\"59 22.035 59 90 76 90 76 22 59 22\"/>\n    <path class=\"line\" d=\"M59 90V55.74C59.567 36.993 74.39 22 93 22c18.778 0 34 15.222 34 34v34h-17V56c0-9.389-7.611-17-17-17-9.225 0-16.66 7.48-17 17.136V90H59z\"/>\n    <polyline class=\"line\" points=\"127 22.055 127 90 144 90 144 22 127 22\"/>\n    <path class=\"line\" d=\"M127 90V55.74C127.567 36.993 142.39 22 161 22c18.778 0 34 15.222 34 34v34h-17V56c0-9.389-7.611-17-17-17-9.225 0-16.66 7.48-17 17.136V90h-17z\"/>\n    <path class=\"line\" d=\"M118.5 22a8.5 8.5 0 1 1-8.477 9.067v-1.134c.283-4.42 3.966-7.933 8.477-7.933z\"/>\n    <path class=\"line\" d=\"M144 73c-9.389 0-17-7.611-17-17v-8.5h-17V56c0 18.778 15.222 34 34 34V73z\"/>\n    <path class=\"line\" d=\"M178 90V55.74C178.567 36.993 193.39 22 212 22c18.778 0 34 15.222 34 34v34h-17V56c0-9.389-7.611-17-17-17-9.225 0-16.66 7.48-17 17.136V90h-17z\"/>\n    <path class=\"line\" d=\"M263 73c-9.389 0-17-7.611-17-17s7.611-17 17-17c9.18 0 16.58 7.4 17 17h-17v17h34V55.875C296.433 36.994 281.61 22 263 22c-18.778 0-34 15.222-34 34s15.222 34 34 34V73z\"/>\n    <path class=\"line\" d=\"M288.477 73A8.5 8.5 0 1 1 280 82.067v-1.134c.295-4.42 3.967-7.933 8.477-7.933z\"/>\n  </g>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Animation Comparison Demo\nDESCRIPTION: This HTML code sets up the structure for comparing WAAPI and JavaScript animations. It includes two square elements for animation and a button to toggle CPU blocking for demonstration purposes.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationweb-animation-apihardware-accelerated-animations.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"medium row\">\n  <div class=\"waapi square\"></div>\n  <span class=\"padded label\">WAAPI</span>\n</div>\n<div class=\"medium row\">\n  <div class=\"js square\"></div>\n  <span class=\"padded label\">JS</span>\n</div>\n<div class=\"medium row\">\n  <fieldset class=\"controls\">\n    <button class=\"button\">Block CPU</button>\n  </fieldset>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Draggable Element and Refresh Button\nDESCRIPTION: This HTML snippet provides the structure for a draggable square element and a refresh button. It sets up the necessary DOM elements for the JavaScript code to interact with.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-methodsrefresh.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large centered row\">\n  <div class=\"square draggable\"></div>\n</div>\n<div class=\"large row\">\n  <fieldset class=\"controls\">\n    <button class=\"button refresh\">Refresh</button>\n  </fieldset>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Advanced Anime.js Animation Example\nDESCRIPTION: Example showing import statement and advanced animation with looping and alternating features.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationweb-animation-apiimprovements-to-the-web-animation-apimulti-targets-animation.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { waapi, stagger } from 'animejs';\n\nwaapi.animate('.circle', {\n  translate: '17rem',\n  delay: stagger(100),\n  loop: true,\n  alternate: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing padEnd Utility Function in Anime.js\nDESCRIPTION: Basic usage of the padEnd utility function which pads a number or string from the end with a specified string until it reaches a given length.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiespad-end.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst paddedValue = utils.padEnd(value, totalLength, padString);\nconst padderFunction = utils.padEnd(totalLength, padString);\n```\n\n----------------------------------------\n\nTITLE: Configuring Animation Autoplay Settings\nDESCRIPTION: Shows examples of creating animations with explicit autoplay settings, both enabled and disabled.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-playback-settingsautoplay.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nanimate('.autoplay-true', {\n  x: '17rem',\n  autoplay: true, // Default\n});\n\nanimate('.autoplay-false', {\n  x: '17rem',\n  autoplay: false\n});\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Draggable Element Interface\nDESCRIPTION: HTML markup that defines the structure for a draggable square element and its control buttons for revert and enable functionality.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-methodsrevert.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large centered row\">\n  <div class=\"square draggable\"></div>\n</div>\n<div class=\"large row\">\n  <fieldset class=\"controls\">\n    <button class=\"button revert\">Revert</button>\n    <button class=\"button enable\">Enable</button>\n  </fieldset>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating a Timer with loopDelay in AnimeJS\nDESCRIPTION: Example of creating a timer with loopDelay in AnimeJS. The timer loops with a 750ms delay between iterations, has a duration of 250ms, and updates the UI with the loop count and current iteration time.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-playback-settingsplayback-loopdelay.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTimer, utils } from 'animejs';\n\nconst [ $loops ] = utils.$('.loops');\nconst [ $time ] = utils.$('.time');\n\nlet loops = 0;\n\ncreateTimer({\n  loop: true,\n  loopDelay: 750,\n  duration: 250,\n  onLoop: () => $loops.innerHTML = ++loops,\n  onUpdate: self => $time.innerHTML = utils.clamp(self.iterationCurrentTime, 0, 250)\n});\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Animation Demo - HTML\nDESCRIPTION: Defines the HTML structure for displaying animated shapes and control buttons. Includes containers for geometric shapes (triangle, square, circle) and buttons for reverting and restarting the animation.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-methodsrevert.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large row\">\n  <div class=\"medium pyramid\">\n    <div class=\"triangle\"></div>\n    <div class=\"square\"></div>\n    <div class=\"circle\"></div>\n  </div>\n</div>\n<div class=\"medium row\">\n  <fieldset class=\"controls\">\n    <button class=\"button revert\">Revert</button>\n    <button class=\"button restart\">Restart</button>\n  </fieldset>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using AnimeJS Round Utility Function\nDESCRIPTION: Demonstrates basic usage of the round utility function in AnimeJS. It can be used either to directly round a value or to create a reusable rounding function with a specified decimal length.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiesround.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst roundedValue = utils.round(value, decimalLength);\nconst roundingFunction = utils.round(decimalLength);\n```\n\n----------------------------------------\n\nTITLE: Basic Animation Promise Usage in Anime.js\nDESCRIPTION: Shows how to use the then() method inline with an animation to execute a callback after completion.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-callbacksthen.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nanimate(target, {x: 100, duration: 500}).then(callback);\n```\n\n----------------------------------------\n\nTITLE: Implementing Timeline Controls with Anime.js in JavaScript\nDESCRIPTION: This snippet demonstrates how to create and control an Anime.js timeline with pause, alternate, and resume functionality. It creates a timeline with animated elements and attaches event listeners to control buttons.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-methodsresume.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { creatTimeline, utils } from 'animejs';\n\nconst [ $pauseButton, $alternateButton, $resumeButton ] = utils.$('.button');\n\nconst tl = createTimeline({ loop: true })\n.add('.circle',   { x: '15rem' })\n.add('.triangle', { x: '15rem' }, 500)\n.add('.square',   { x: '15rem' }, 1000);\n\nconst pauseTimeline = () => tl.pause();\nconst alternateTimeline = () => tl.alternate();\nconst resumeTimeline = () => tl.resume();\n\n$pauseButton.addEventListener('click', pauseTimeline);\n$alternateButton.addEventListener('click', alternateTimeline);\n$resumeButton.addEventListener('click', resumeTimeline);\n```\n\n----------------------------------------\n\nTITLE: Setting Default onBegin Callback in Anime.js\nDESCRIPTION: This snippet demonstrates how to change the default onBegin callback globally using the engine.defaults object in Anime.js. It sets a function that logs the animation's ID when it begins.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-callbacksonbegin.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { engine } from 'animejs';\nengine.defaults.onBegin = self => console.log(self.id);\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Anime.js Animation Demo\nDESCRIPTION: This HTML snippet provides the structure for demonstrating the Anime.js timeline animation. It includes elements for the animation targets and a log display area to show the completion status.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-callbacksoncomplete.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large row\">\n  <div class=\"medium pyramid\">\n    <div class=\"triangle\"></div>\n    <div class=\"square\"></div>\n    <div class=\"circle\"></div>\n  </div>\n  <pre class=\"large log row\">\n    <span class=\"label\">completed</span>\n    <span class=\"value\">false</span>\n  </pre>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Draggable Elements in Anime.js\nDESCRIPTION: This HTML snippet shows the structure for creating a container with draggable elements. It includes a grid container with a square and a circle as draggable elements.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-settingscontainer.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large centered grid square-grid array-container\">\n  <div class=\"square draggable\"></div>\n  <div class=\"circle draggable\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Draggable Elements with Anime.js\nDESCRIPTION: This HTML snippet shows the structure required for implementing draggable elements with Anime.js. It creates two squares with different classes for demonstrating enabled and disabled x-axis dragging, along with appropriate labels.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-axes-parametersx.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large spaced-evenly row\">\n  <div class=\"square enabled draggable\"></div>\n  <div class=\"square disabled draggable\"></div>\n</div>\n<div class=\"large spaced-evenly row\">\n  <div class=\"label\">x enabled</div>\n  <div class=\"label\">x disabled</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Utils.get() Demo\nDESCRIPTION: HTML markup showing the structure needed for the utils.get() demonstration, including squares for animation and labels to display their values.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiesget.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"medium row\">\n  <div class=\"square\"></div>\n  <div class=\"padded label\"><span class=\"raw value\"></span></div>\n</div>\n<div class=\"medium row\">\n  <div class=\"square\"></div>\n  <div class=\"padded label\"><span class=\"rem value\"></span></div>\n</div>\n<div class=\"medium row\">\n  <div class=\"square\"></div>\n  <div class=\"padded label\"><span class=\"num value\"></span></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Relative Value Animation with Anime.js\nDESCRIPTION: This code demonstrates how to use Anime.js to implement relative value animations that add, subtract, or multiply the current value. It imports the animate and utils functions from the Anime.js library and sets up event listeners on buttons to trigger different types of clock rotations.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationtween-value-typesrelative-value.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate, utils } from 'animejs';\n\nconst [ $clock ] = utils.$('.clock');\nconst [ $add ] = utils.$('.add');\nconst [ $sub ] = utils.$('.sub');\nconst [ $mul ] = utils.$('.mul');\n\nconst add = () => animate($clock, { rotate: '+=90' });\nconst sub = () => animate($clock, { rotate: '-=90' });\nconst mul = () => animate($clock, { rotate: '*=.5' });\n\n$add.addEventListener('click', add);\n$sub.addEventListener('click', sub);\n$mul.addEventListener('click', mul);\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Displaying Interpolated Animations\nDESCRIPTION: This HTML snippet provides the structure for displaying three clocks side by side, demonstrating the input rotation, lerped rotation, and lerped rotation at 15fps.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitieslerp.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"x-large spaced-evenly row\">\n  <div class=\"col\">\n    <div class=\"clock input\"></div>\n    <div class=\"label\">input</div>\n  </div>\n  <div class=\"col\">\n    <div class=\"clock lerped\"></div>\n    <div class=\"label\">lerped</div>\n  </div>\n  <div class=\"col\">\n    <div class=\"clock lerped-15\"></div>\n    <div class=\"label\">lerped 15fps</div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Animejs Stagger Animation\nDESCRIPTION: This HTML code sets up the DOM structure required for the animejs stagger animation example. It includes '.square' elements within '.small row' divs and labels indicating their positions and delays. No specific prerequisites are needed, but the structure should be aligned with the JavaScript animation code to function correctly.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationstaggerstagger-parametersstagger-start.md#2025-04-18_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\\\"small row\\\">\n  <div class=\\\"square\\\"></div>\n  <div class=\\\"padded label\\\">x: 14rem, delay: 500ms</div>\n</div>\n<div class=\\\"small row\\\">\n  <div class=\\\"square\\\"></div>\n  <div class=\\\"padded label\\\">x: 15rem, delay: 600ms</div>\n</div>\n<div class=\\\"small row\\\">\n  <div class=\\\"square\\\"></div>\n  <div class=\\\"padded label\\\">x: 16rem, delay: 700ms</div>\n</div>\n<div class=\\\"small row\\\">\n  <div class=\\\"square\\\"></div>\n  <div class=\\\"padded label\\\">x: 17rem, delay: 700ms</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Display for AnimeJS Timer Demo\nDESCRIPTION: HTML structure for displaying the timer example results. Shows two columns with counters for the loop count and current iteration time.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-playback-settingsplayback-loopdelay.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large centered row\">\n  <div class=\"col\">\n    <pre class=\"large log row\">\n      <span class=\"label\">loops count</span>\n      <span class=\"loops value\">0</span>\n    </pre>\n  </div>\n  <div class=\"col\">\n    <pre class=\"large log row\">\n      <span class=\"label\">iteration time</span>\n      <span class=\"time value lcd\">0</span>\n    </pre>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Selecting DOM Elements using Anime.js utils\nDESCRIPTION: This snippet showcases the usage of Anime.js utility functions to select DOM elements. The `utils.$` function is used to select elements with the classes `logo js` and `button`, assigning them to variables `$logo` and `$button` respectively for later use in animations and event handling.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationgetting-startedusing-with-vanilla-js.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst [ $logo ] = utils.$('.logo.js');\nconst [ $button ] = utils.$('button');\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Anime.js Animation\nDESCRIPTION: Provides the HTML structure for the elements used in the Anime.js animation example. It includes a container div with class 'large row' and nested elements with classes 'medium pyramid', 'triangle', 'square', and 'circle'.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-methodsset.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large row\">\n  <div class=\"medium pyramid\">\n    <div class=\"triangle\"></div>\n    <div class=\"square\"></div>\n    <div class=\"circle\"></div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Animation (HTML)\nDESCRIPTION: This HTML snippet defines a simple structure containing a div with the class 'square', which will be animated by the JavaScript code. The `iframe-content` and `resizable` classes are likely for embedding and styling within the documentation itself.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscope.md#2025-04-18_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"iframe-content resizable\">\n  <div class=\"large centered row\">\n    <div class=\"col\">\n      <div class=\"square\"></div>\n    </div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Draggable Elements in Anime.js\nDESCRIPTION: This HTML snippet shows the structure for creating a container with two draggable elements (a square and a circle) that will be used with the Anime.js draggable functionality.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-settingscontainerfriction.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large centered grid square-grid\">\n  <div class=\"square draggable\"></div>\n  <div class=\"circle draggable\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for AnimeJS Draggable Element\nDESCRIPTION: This HTML snippet shows the structure for a draggable square element. It creates a container with the class 'large grid centered square-grid' and includes a draggable div inside it.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-axes-parametersmodifier.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large grid centered square-grid\">\n  <div class=\"square draggable\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Animating with RGBA Color Values in Anime.js\nDESCRIPTION: This snippet shows how to use RGBA color values in Anime.js animations. It targets an element with the class 'rgba' and animates its background color to 'rgba(255, 168, 40, .2)'.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationtween-value-typescolor-value.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nanimate('.rgba', {\n  background: 'rgba(255, 168, 40, .2)',\n});\n```\n\n----------------------------------------\n\nTITLE: Timeline Control HTML Structure\nDESCRIPTION: HTML structure for the timeline animation controls including shapes container and control elements with range input and play/pause button.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-methodsseek.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large row\">\n  <div class=\"medium pyramid\">\n    <div class=\"triangle\"></div>\n    <div class=\"square\"></div>\n    <div class=\"circle\"></div>\n  </div>\n</div>\n<div class=\"medium centered row\">\n  <fieldset class=\"controls\">\n    <input type=\"range\" min=0 max=2000 value=0 class=\"range\" />\n    <button style=\"flex: 0.25;\" class=\"button play-pause\">Play</button>\n  </fieldset>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating and using snapping functions with anime.js utils.snap\nDESCRIPTION: Examples showing how to create and use snap utility functions with different increments and array values, as well as how to combine with other utilities like clamp.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiessnap.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst snapTo10 = utils.snap(10);\nsnapTo10(94);  // 90\nsnapTo10(-17); // -20\n\nconst snapToArray = utils.snap([0, 50, 100]);\nsnapToArray(30);  // 50\nsnapToArray(75);  // 100\nsnapToArray(-10); // 0\n\nconst clampAndSnap = utils.clamp(0, 100).snap(30);\nclampAndSnap(72.7523); // 60\nclampAndSnap(120.2514); // 90\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Scroll Animation - HTML\nDESCRIPTION: This part of the code defines the HTML structure necessary for displaying the scrollable content and the animated square element that interacts with the ScrollObserver.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscrollscrollobserver-callbacksonenterforward.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"scroll-container scroll-y\">\n  <div class=\"scroll-content grid square-grid\">\n    <div class=\"scroll-section padded sticky\">\n      <div class=\"large row\">\n        <pre class=\"large log row\">\n          <span class=\"label\">entered</span>\n          <span class=\"value\">0</span>\n        </pre>\n      </div>\n    </div>\n    <div class=\"scroll-section padded\">\n      <div class=\"large row\">\n        <div class=\"square\"></div>\n      </div>\n    </div>\n    <div class=\"scroll-section\">\n    </div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Displaying Timer Output\nDESCRIPTION: This HTML snippet provides the structure for displaying the output of the Anime.js timer. It includes a div with a class 'time' where the current time will be displayed.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-playback-settingsdelay.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large centered row\">\n  <div class=\"half col\">\n    <pre class=\"large log row\">\n      <span class=\"label\">current time</span>\n      <span class=\"time value lcd\">0</span>\n    </pre>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Anime.js Animation with onLeaveBackward Callback\nDESCRIPTION: This JavaScript code snippet demonstrates how to use the `onLeaveBackward` callback within Anime.js ScrollObserver. The callback function increments a counter and updates the text content of an HTML element when the user scrolls backward past the specified `leave` threshold.  It depends on the animejs library and assumes the existence of HTML elements with specific class names.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscrollscrollobserver-callbacksonleavebackward.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate, onScroll, utils } from 'animejs';\n\nconst [ $value ] = utils.$('.value');\n\nlet exits = 0;\n\nanimate('.square', {\n  x: '15rem',\n  rotate: '1turn',\n  ease: 'linear',\n  autoplay: onScroll({\n    container: '.scroll-container',\n    enter: 'bottom-=50 top',\n    leave: 'top+=60 bottom',\n    sync: true,\n    debug: true,\n    onLeaveBackward: () => $value.textContent = ++exits,\n  })\n});\n```\n\n----------------------------------------\n\nTITLE: Anime.js ScrollObserver onEnter Callback\nDESCRIPTION: This JavaScript code defines an animation for a '.square' element, animating its 'x' property and rotation. It uses Anime.js's onScroll function with the 'onEnter' callback to increment and display a counter when the element enters a specific scroll threshold. The animation is linked to the scroll position within a '.scroll-container'.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscrollscrollobserver-callbacksonenter.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { animate, onScroll, utils } from 'animejs';\n\nconst [ $value ] = utils.$('.value');\n\nlet entered = 0;\n\nanimate('.square', {\n  x: '15rem',\n  rotate: '1turn',\n  ease: 'linear',\n  autoplay: onScroll({\n    container: '.scroll-container',\n    enter: 'bottom-=50 top',\n    leave: 'top+=60 bottom',\n    sync: true,\n    debug: true,\n    onEnter: () => $value.textContent = ++entered,\n  })\n});\n```\n\n----------------------------------------\n\nTITLE: Using Anime.js from CDN as ES6 module\nDESCRIPTION: This snippet demonstrates how to include Anime.js directly from a CDN (Content Delivery Network) as an ES6 module within an HTML file.  It uses the <script type=\"module\"> tag to allow ES module imports.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationgetting-startedinstallation.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  import { animate } from 'https://cdn.jsdelivr.net/npm/animejs@4.0.0/+esm';\n</script>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Loop Animation Demo\nDESCRIPTION: Defines the HTML structure for displaying animated shapes and a loop counter interface.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-playback-settingsloop.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large row\">\n  <div class=\"medium pyramid\">\n    <div class=\"triangle\"></div>\n    <div class=\"square\"></div>\n    <div class=\"circle\"></div>\n  </div>\n  <pre class=\"large log row\">\n    <span class=\"label\">loops</span>\n    <span class=\"loops value\">0</span>\n  </pre>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for WAAPI Animation Demo\nDESCRIPTION: Defines the HTML structure containing the shapes (triangle, square, circle) that will be animated with WAAPI animations synchronized to an Anime.js timeline.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinesync-waapi-animations.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large row\">\n  <div class=\"medium pyramid\">\n    <div class=\"triangle\"></div>\n    <div class=\"square\"></div>\n    <div class=\"circle\"></div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for AnimeJS Frame Rate Demo\nDESCRIPTION: HTML markup for demonstrating frame rate control in AnimeJS. It includes a circle element for animation, a display for current FPS value, and a range slider for adjusting the frame rate from 0 to 120fps.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-playback-settingsframerate.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large row\">\n  <div class=\"circle\"></div>\n  <pre class=\"large log row\">\n    <span class=\"label\">fps</span>\n    <span class=\"fps value\">60</span>\n  </pre>\n</div>\n<div class=\"medium row\">\n  <fieldset class=\"controls\">\n    <input type=\"range\" min=0 max=120 value=60 step=1 class=\"range\" />\n  </fieldset>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Draggable Elements in Anime.js\nDESCRIPTION: This HTML snippet shows the structure for creating a container with draggable elements. It includes a grid container with a square and a circle as draggable elements.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-settingsminvelocity.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large centered grid square-grid\">\n  <div class=\"square draggable\"></div>\n  <div class=\"circle draggable\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Draggable setY Method in Anime.js\nDESCRIPTION: This snippet demonstrates how to use the setY method of a draggable element created with Anime.js. It creates a draggable square and a button that sets a random y position when clicked.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-methodssety.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createDraggable, utils } from 'animejs';\n\nconst [ $setButton ] = utils.$('.set');\n\nconst draggable = createDraggable('.square');\n\nconst setRandomY = () => draggable.setY(utils.random(-40, 40));\n\n$setButton.addEventListener('click', setRandomY);\n```\n\n----------------------------------------\n\nTITLE: Importing SVG Utilities from Anime.js\nDESCRIPTION: Shows how to import the svg object from Anime.js to access SVG utility functions for morphing, line drawing, and motion path animations.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationsvg.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { svg } from 'animejs';\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Default for onUpdate Callback in AnimeJS\nDESCRIPTION: This snippet demonstrates how to change the default onUpdate callback globally for all timers in AnimeJS. It imports the engine from AnimeJS and sets a new default function that logs the timer's ID.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-callbacksonupdate.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { engine } from 'animejs';\nengine.defaults.onUpdate = self => console.log(self.id);\n```\n\n----------------------------------------\n\nTITLE: Destructuring Anime.js Global Object\nDESCRIPTION: Illustrates the use of object destructuring syntax to mimic ES Modules import style when Anime.js is used as a global object. This approach allows for accessing specified modules directly.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationgetting-startedimports.md#2025-04-18_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst {\n  animate,\n  createTimeline,\n  createTimer,\n  // ...other methods\n} = anime;\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Anime.js Remove Function Demo\nDESCRIPTION: This HTML snippet provides the structure for demonstrating the remove() function in Anime.js. It includes square elements for animation, a display for update count, and buttons to trigger removal actions.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiesremove.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"medium row\">\n  <div class=\"square\"></div>\n</div>\n<div class=\"medium row\">\n  <div class=\"square\"></div>\n</div>\n<pre class=\"large log row\">\n  <span class=\"label\">updates</span>\n  <span class=\"value\">--</span>\n</pre>\n<div class=\"medium row\">\n  <fieldset class=\"controls\">\n    <button class=\"button remove-1\">Remove all first</button>\n    <button class=\"button remove-2\">Remove x second</button>\n  </fieldset>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Removing Target Properties from Anime.js Timeline\nDESCRIPTION: Illustrates how to remove specific properties of targets from an Anime.js timeline. The method accepts targets and a valid Animatable properties String.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-methodsremove.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ntimeline.remove(targets, propertyName);\n```\n\n----------------------------------------\n\nTITLE: Using Chain-able Functions in Anime.js Animation\nDESCRIPTION: Shows how to use chain-able utility functions within an Anime.js animation. This example animates a value with wrapping, rounding, and padding applied.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitieschain-able-utility-functions.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate, utils } from 'animejs';\n\nanimate('.value', {\n  innerHTML: 1000,\n  modifier: utils.wrap(0, 10).roundPad(3).padStart(6, '0'),\n  duration: 100000,\n  alternate: true,\n  loop: true,\n  ease: 'linear',\n});\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Playback Rate Demo\nDESCRIPTION: Defines the HTML structure for displaying animated shapes and playback rate controls. Includes a range input for speed adjustment and elements for visual feedback.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-playback-settingsplaybackrate.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large row\">\n  <div class=\"medium pyramid\">\n    <div class=\"triangle\"></div>\n    <div class=\"square\"></div>\n    <div class=\"circle\"></div>\n  </div>\n  <pre class=\"large log row\">\n    <span class=\"label\">speed</span>\n    <span class=\"speed value\">2.0</span>\n  </pre>\n</div>\n<div class=\"large row\">\n  <fieldset class=\"controls\">\n    <input type=\"range\" min=0 max=10 value=2 step=.1 class=\"range\" />\n  </fieldset>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Animated Squares\nDESCRIPTION: This HTML snippet defines the structure for multiple square elements that can be animated. It creates four rows, each containing a square div element.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationweb-animation-apiimprovements-to-the-web-animation-apidefault-units.md#2025-04-18_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"small row\">\n  <div class=\"square\"></div>\n</div>\n<div class=\"small row\">\n  <div class=\"square\"></div>\n</div>\n<div class=\"small row\">\n  <div class=\"square\"></div>\n</div>\n<div class=\"small row\">\n  <div class=\"square\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Scroll Triggered Animations\nDESCRIPTION: This HTML snippet provides the basic structure required to implement scroll-based animations with Anime.js. It defines the scroll container and sections within it, including elements that will be animated as the user scrolls.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscrollscrollobserver-methodsrefresh.md#2025-04-18_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"scroll-container scroll-y\">\n  <div class=\"scroll-content grid square-grid\">\n    <div class=\"scroll-section padded\">\n      <div class=\"large row\">\n        <div class=\"label\">scroll down</div>\n      </div>\n    </div>\n    <div class=\"scroll-section padded\">\n      <div class=\"large row\">\n        <div class=\"square\"></div>\n      </div>\n    </div>\n    <div class=\"scroll-section\">\n    </div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting Global Default Delay in Anime.js\nDESCRIPTION: This snippet demonstrates how to change the default delay value globally for all Anime.js timers. It imports the engine from Anime.js and sets the default delay to 500 milliseconds.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-playback-settingsdelay.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { engine } from 'animejs';\nengine.defaults.delay = 500;\n```\n\n----------------------------------------\n\nTITLE: Draggable Element HTML Structure\nDESCRIPTION: HTML markup for a draggable square element with a control button that triggers random x-position changes.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-methodssetx.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large centered row\">\n  <div class=\"square draggable\"></div>\n</div>\n<div class=\"large row\">\n  <fieldset class=\"controls\">\n    <button class=\"button set\">Set random x</button>\n  </fieldset>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Radian and Degree Clocks\nDESCRIPTION: The HTML structure used to display the radian and degree clocks side by side. It creates a container with two columns, each containing a clock element and a label.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiesrad-to-deg.md#2025-04-18_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"x-large spaced-evenly row\">\n  <div class=\"col\">\n    <div class=\"clock rad\"></div>\n    <div class=\"label\">radians</div>\n  </div>\n  <div class=\"col\">\n    <div class=\"clock deg\"></div>\n    <div class=\"label\">degrees</div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting Default Loop Configuration in Anime.js\nDESCRIPTION: Shows how to globally configure the default loop behavior for all animations by modifying the engine defaults.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-playback-settingsloop.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { engine } from 'animejs';\nengine.defaults.loop = true;\n```\n\n----------------------------------------\n\nTITLE: Using Anime.js Global Object\nDESCRIPTION: Demonstrates how to include Anime.js in the global scope using a script tag. Once included, modules can be accessed directly from the 'anime' object, suitable for environments without module support.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationgetting-startedimports.md#2025-04-18_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\"path/to/anime.iife.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Animated Elements\nDESCRIPTION: This HTML defines the structure for the animated elements. Two rows of circles are created, each within a div with a specific class (`row-1` and `row-2`). These rows will be targeted by the Anime.js scopes. The buttons trigger the revert functionality.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscopescope-methodsrevert.md#2025-04-18_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"medium justified row row-1\">\n  <div class=\"circle\"></div>\n  <div class=\"circle\"></div>\n  <div class=\"circle\"></div>\n  <div class=\"circle\"></div>\n  <div class=\"circle\"></div>\n  <div class=\"circle\"></div>\n  <div class=\"circle\"></div>\n  <div class=\"circle\"></div>\n  <div class=\"circle\"></div>\n</div>\n<div class=\"medium justified row row-2\">\n  <div class=\"circle\"></div>\n  <div class=\"circle\"></div>\n  <div class=\"circle\"></div>\n  <div class=\"circle\"></div>\n  <div class=\"circle\"></div>\n  <div class=\"circle\"></div>\n  <div class=\"circle\"></div>\n  <div class=\"circle\"></div>\n  <div class=\"circle\"></div>\n</div>\n<div class=\"medium row\">\n  <fieldset class=\"controls\">\n    <button class=\"button revert\">Revert row 1</button>\n    <button class=\"button revert\">Revert row 2</button>\n  </fieldset>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Draggable Element - HTML\nDESCRIPTION: This HTML snippet structures the elements involved in the draggable functionality. The '.row' acts as the container for the draggable '.circle' element and the two '.square' elements are used for layout.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-settingstrigger.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large centered row\">\n  <div class=\"square\"></div>\n  <div class=\"circle draggable\"></div>\n  <div class=\"square\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Anime.js Animation\nDESCRIPTION: The HTML markup required for the animation example. It creates a container with three geometric shapes (triangle, square, and circle) that will be animated using the synchronized timelines.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinesync-timelines.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large row\">\n  <div class=\"medium pyramid\">\n    <div class=\"triangle\"></div>\n    <div class=\"square\"></div>\n    <div class=\"circle\"></div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Animating with Scroll Events - Anime.js (JavaScript)\nDESCRIPTION: This snippet imports the Anime.js library's animate and onScroll functions to animate a square element. The animation is triggered when the user scrolls within a specified container. It uses specific parameters like x position, rotation, duration, and easing functions to control the animation behavior.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscrollscrollobserver-settingscontainer.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { animate, onScroll } from 'animejs';\n\nanimate('.square', {\n  x: '15rem',\n  rotate: '1turn',\n  duration: 2000,\n  alternate: true,\n  loop: true,\n  ease: 'inOutQuad',\n  autoplay: onScroll({\n    container: '.scroll-container'\n  })\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Global Default onBegin Callback in AnimeJS\nDESCRIPTION: Shows how to set a default onBegin callback globally for all timeline instances by modifying the engine defaults object.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-callbacksonbegin.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { engine } from 'animejs';\nengine.defaults.onBegin = self => console.log(self.id);\n```\n\n----------------------------------------\n\nTITLE: Converting Degrees to Radians in Anime.js\nDESCRIPTION: Demonstrates the basic usage of the degToRad utility function to convert degrees to radians. It shows how to use the function directly and as a chainable utility.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiesdeg-to-rad.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst radians = utils.degToRad(degrees);\n\nconst degToRad = utils.degToRad();\ndegToRad(360); // 6.283185307179586\n\nconst roundDegToRad = utils.degToRad().round(2); // Convert degrees to radians then round to 2 decimal places\nroundDegToRad(180); // 3.14\nroundDegToRad(90);  // 1.57\n```\n\n----------------------------------------\n\nTITLE: Timer Demo HTML Structure\nDESCRIPTION: HTML markup for displaying timer duration and current time, including a range input control for adjusting the duration.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-methodsstretch.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large centered row\">\n  <div class=\"col\">\n    <pre class=\"large log row\">\n      <span class=\"label\">duration</span>\n      <span class=\"duration value\">2000</span>\n    </pre>\n  </div>\n  <div class=\"col\">\n    <pre class=\"large log row\">\n      <span class=\"label\">current time</span>\n      <span class=\"time value lcd\">0</span>\n    </pre>\n  </div>\n</div>\n\n<div class=\"medium row\">\n  <fieldset class=\"controls\">\n    <input type=\"range\" min=0 max=4000 value=2000 step=100 class=\"range\" />\n  </fieldset>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Draggable and Button - HTML\nDESCRIPTION: This HTML structure defines a square div as a draggable element and a button that is used to disable this draggable functionality. The button, when clicked, will trigger the associated JavaScript function to disable the draggable element. This snippet is dependent on the JavaScript code for functionality.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-methodsdisable.md#2025-04-18_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"large centered row\">\n  <div class=\"square draggable\"></div>\n</div>\n<div class=\"large row\">\n  <fieldset class=\"controls\">\n    <button class=\"button disable\">Disable</button>\n  </fieldset>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Displaying Timer Updates\nDESCRIPTION: This HTML snippet creates a structure to display the number of updates and current time of an AnimeJS timer. It uses pre-formatted elements with labels and placeholders for values.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-callbacksonupdate.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large row\">\n  <div class=\"col\">\n    <pre class=\"large log row\">\n      <span class=\"label\">updates</span>\n      <span class=\"updates value\">0</span>\n    </pre>\n  </div>\n  <div class=\"col\">\n    <pre class=\"large log row\">\n      <span class=\"label\">current time</span>\n      <span class=\"time value lcd\">0</span>\n    </pre>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Animation Examples\nDESCRIPTION: The HTML markup used for the animation examples, consisting of three square elements arranged in rows. Each square will be animated using the techniques demonstrated in the JavaScript examples.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationweb-animation-apiapi-differences-with-native-waapieasing.md#2025-04-18_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"medium row\">\n  <div class=\"square\"></div>\n</div>\n<div class=\"medium row\">\n  <div class=\"square\"></div>\n</div>\n<div class=\"medium row\">\n  <div class=\"square\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Anime.js Animation Target\nDESCRIPTION: This HTML snippet shows the structure used to create the target element for the Anime.js animation. It defines a container with a class of 'medium row' and a nested div with a class of 'square', which is the element being animated in the JavaScript example.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationkeyframesduration-based-keyframes.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"medium row\">\n  <div class=\"square\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting Global Timeline Playback Ease in Anime.js\nDESCRIPTION: Example showing how to set the default playback ease globally using the engine.defaults object.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-playback-settingsplaybackease.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { engine } from 'animejs';\nengine.defaults.playbackEase = 'inOut';\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Anime.js Animation (HTML)\nDESCRIPTION: Shows the HTML markup required for the animation example, containing a square element inside a container with 'medium row' classes.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-playback-settingsplaybackease.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"medium row\">\n  <div class=\"square\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Animation Target\nDESCRIPTION: HTML markup showing the structure of elements to be animated, consisting of a container div with 'large row' class and a target element with 'square' class.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationtween-parametersto.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large row\">\n  <div class=\"square\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Draggable Elements in Anime.js\nDESCRIPTION: This HTML snippet shows the structure for implementing draggable elements within a grid container. It includes a square and a circle element, both with the 'draggable' class.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-settingsdragspeed.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large centered grid square-grid\">\n  <div class=\"square draggable\"></div>\n  <div class=\"circle draggable\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using Helper Function for CSS Variables with AnimeJS JS animate() method\nDESCRIPTION: This code demonstrates creating a helper function to animate CSS variables with the JS animate() method. It uses utils.get() to retrieve the CSS variable values from the target elements.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationtween-value-typescss-variable.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Helper for the JS animate() method\nconst cssVar = name => $el => utils.get($el, name);\n\nanimate('.square',  {\n  scale: cssVar('--scale'),\n  background: [cssVar('--hex-red'), cssVar('--hex-orange')],\n});\n```\n\n----------------------------------------\n\nTITLE: AnimeJS Utils.get() Implementation Example\nDESCRIPTION: Demonstrates practical usage of utils.get() to retrieve x-position values from animated squares with different unit conversions. Shows how to get raw values with px units, convert to rem units, and strip units entirely.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiesget.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate, utils } from 'animejs';\n\nconst [ $raw, $rem, $num ] = utils.$('.value');\nconst [ $sq1, $sq2, $sq3 ] = utils.$('.square');\n\nconst getValues = () => {\n  // Return the raw parsed value (string with px)\n  $raw.textContent = utils.get($sq1, 'x');\n  // Return the converted value with unit (string with rem)\n  $rem.textContent = utils.get($sq2, 'x', 'rem');\n  // Return the raw value with its unit removed (number)\n  $num.textContent = utils.get($sq3, 'x', false);\n}\n\nanimate('.square', {\n  x: 270,\n  loop: true,\n  alternate: true,\n  onUpdate: getValues\n});\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Timeline Animation Elements\nDESCRIPTION: HTML markup structure defining the elements that will be animated in the timeline example.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-playback-settingsplaybackease.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large row\">\n  <div class=\"medium pyramid\">\n    <div class=\"triangle\"></div>\n    <div class=\"square\"></div>\n    <div class=\"circle\"></div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Demonstrating Alternate Animations\nDESCRIPTION: This HTML snippet creates the structure for visually demonstrating different 'alternate' configurations in anime.js animations. It includes three rows, each with a circle element and a label describing the configuration.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-playback-settingsalternate.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"medium row\">\n  <div class=\"circle dir-normal\"></div>\n  <div class=\"padded label\">alternate: false</div>\n</div>\n<div class=\"medium row\">\n  <div class=\"circle dir-alternate\"></div>\n  <div class=\"padded label\">alternate: true</div>\n</div>\n<div class=\"medium row\">\n  <div class=\"circle dir-alternate-reverse\"></div>\n  <div class=\"padded label\">alternate: true, reversed: true</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Degree and Radian Rotation Display\nDESCRIPTION: Provides the HTML structure for displaying two clock-like elements, one for degrees and one for radians. This structure is used in conjunction with the Anime.js animation to visually demonstrate the conversion.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiesdeg-to-rad.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"x-large spaced-evenly row\">\n  <div class=\"col\">\n    <div class=\"clock deg\"></div>\n    <div class=\"label\">degrees</div>\n  </div>\n  <div class=\"col\">\n    <div class=\"clock rad\"></div>\n    <div class=\"label\">radians</div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for AnimeJS Timeline Animation\nDESCRIPTION: Provides the HTML structure used for the timeline animation example. The HTML contains a container with three elements (triangle, square, and circle) that will be animated in the timeline.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-methodsinit.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large row\">\n  <div class=\"medium pyramid\">\n    <div class=\"triangle\"></div>\n    <div class=\"square\"></div>\n    <div class=\"circle\"></div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating Staggered HTML Layout for Animation\nDESCRIPTION: This HTML snippet provides a basic grid layout of div elements with the class 'square'. This layout is essential for applying stagger animations with Anime.js, as seen in accompanying JavaScript. Each div serves as a target for individual animation parameters specified in the JavaScript code.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationstaggerstagger-parametersstagger-ease.md#2025-04-18_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"small justified row\">\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Target Element for Delay Animation\nDESCRIPTION: Defines the HTML structure for the delay animation example. It creates a container with a circular element that will be animated using the delay parameter.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-playback-settingsdelay.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"medium row\">\n  <div class=\"circle delay\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Animation Controls\nDESCRIPTION: This HTML snippet provides the structure for a container to hold animated elements and a range input to control animation speed. It requires having defined CSS classes for styling.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationengineengine-parametersspeed.md#2025-04-18_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"large row container\"></div>\n<div class=\"medium row\">\n  <fieldset class=\"controls\">\n    <input type=\"range\" min=0.1 max=2 value=1 step=.01 class=\"range\" />\n  </fieldset>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Anime.js Animation\nDESCRIPTION: The HTML markup required for the keyframe animation example. It defines a container with a class 'medium row' and a target element with class 'square' that will be animated.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationkeyframespercentage-based-keyframes.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"medium row\">\n  <div class=\"square\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Displaying Animatable Clocks\nDESCRIPTION: This HTML snippet provides the structure for displaying two clocks with different easing functions. Each clock is contained within a column and labeled with its easing function.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimatableanimatable-settingsease.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large centered row\">\n  <div class=\"col\">\n    <div class=\"clock clock-1\"></div>\n    <div class=\"label\">linear</div>\n  </div>\n  <div class=\"col\">\n    <div class=\"clock clock-2\"></div>\n    <div class=\"label\">outElastic</div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Timeline.sync() Method Syntax in AnimeJS\nDESCRIPTION: Syntax for the sync() method in AnimeJS timelines. This method synchronizes an existing animation with the timeline, with tween value composition handled at animation creation time.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelineadd-animations.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst animation = animate(target, { x: 100 });\n\ntimeline.sync(animation, position);\n```\n\n----------------------------------------\n\nTITLE: Using padStart in Animation with Anime.js\nDESCRIPTION: Example showing how to use the padStart utility as a modifier in an animation to format numbers as they animate. The example animates innerHTML while formatting the number with leading dashes.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiespad-start.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate, utils } from 'animejs';\n\nanimate('.value', {\n  innerHTML: 10000,\n  modifier: utils.round(0).padStart(6, '-'),\n  duration: 100000,\n  ease: 'linear',\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Anime.js Utility Functions in JavaScript\nDESCRIPTION: Shows how to import the utility functions from the Anime.js library. These functions provide common animation utilities that can be used independently from the main animation functionality.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilities.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { utils } from 'animejs';\n```\n\n----------------------------------------\n\nTITLE: MapRange Function Examples with Chaining\nDESCRIPTION: Shows practical examples of using mapRange to create reusable mapping functions and combining with clamp functionality.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiesmap-range.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst mapFrom0and100to0and200 = utils.mapRange(0, 100, 0, 200);\nmapFrom0and100to0and200(45);  // 90\nmapFrom0and100to0and200(120); // 240\nmapFrom0and100to0and200(-15); // -30\n\nconst normalizeAndClamp = utils.mapRange(-100, 100, 0, 1).clamp(0, 1); // Normalize then clamp between 0 and 1\nnormalizeAndClamp(50);  // 0.75\nnormalizeAndClamp(120); // 1\n```\n\n----------------------------------------\n\nTITLE: Anime.js ScrollObserver Shorthand String Syntax\nDESCRIPTION: This code demonstrates the shorthand string syntax for defining ScrollObserver thresholds.  It enters when the bottom of the container meets the top of the target, and it leaves when the top of the container meets the bottom of the target.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscrollscrollobserver-thresholds.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nonScroll({\n  // Enters when the bottom of the container meets the top of the target\n  enter: 'bottom top',\n  // Leaves when the top of the container meets the bottom of the target\n  leave: 'top bottom',\n});\n```\n\n----------------------------------------\n\nTITLE: Equivalent Animation using Web Animation API\nDESCRIPTION: This snippet demonstrates how to achieve the same animation as the Anime.js example using the native Web Animation API. It shows the more verbose approach required without Anime.js, including manual looping and promise handling.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationweb-animation-apiimprovements-to-the-web-animation-apifunction-based-values.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.querySelectorAll('.square').forEach(($el, i) => {\n  $el.animate({\n    translate: `${utils.random(10, 17)}rem`,\n    rotate: utils.random(-180, 180),\n    scale: .25 + (i * .25),\n  }, {\n    duration: 1000,\n    delay: i * 100,\n    easing: 'ease-out',\n  }).finished.then(() => {\n    $el.style.translate = '100px';\n  })\n});\n```\n\n----------------------------------------\n\nTITLE: Creating and Using a roundPad Function with Examples\nDESCRIPTION: Demonstrates creating a reusable roundPad function with a preset decimal length and applying it to various number formats. The function rounds numbers and ensures they have the specified number of decimal places.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiesround-pad.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst roundPadTo2Decimals = utils.roundPad(2);\nroundPadTo2Decimals(90.12345);  // '90.12'\nroundPadTo2Decimals(120);       // '120.00'\nroundPadTo2Decimals(15.9);      // '15.90'\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Anime.js Animation Demo\nDESCRIPTION: This HTML snippet defines the structure for visualizing the Anime.js animation, including elements for the animated shapes and a display for the render count.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-callbacksonrender.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large row\">\n  <div class=\"medium pyramid\">\n    <div class=\"triangle\"></div>\n    <div class=\"square\"></div>\n    <div class=\"circle\"></div>\n  </div>\n  <pre class=\"large log row\">\n    <span class=\"label\">renders</span>\n    <span class=\"value\">0</span>\n  </pre>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Animated Squares\nDESCRIPTION: This HTML snippet defines the structure for the animated squares. Each square is given a different duration through a data attribute, which is then used in the JavaScript animation.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationweb-animation-apiimprovements-to-the-web-animation-apifunction-based-values.md#2025-04-18_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"small row\">\n  <div data-duration=\"400\" class=\"square\"></div>\n</div>\n<div class=\"small row\">\n  <div data-duration=\"600\" class=\"square\"></div>\n</div>\n<div class=\"small row\">\n  <div data-duration=\"800\" class=\"square\"></div>\n</div>\n<div class=\"small row\">\n  <div data-duration=\"1000\" class=\"square\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Draggable Demo\nDESCRIPTION: Defines the HTML structure for a draggable element demo with a snap counter display. Includes a grid container, log display for snap count, and the draggable square element.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-callbacksonsnap.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large padded grid square-grid\">\n  <pre class=\"large log row\">\n    <span class=\"label\">snaps</span>\n    <span class=\"value\">0</span>\n  </pre>\n  <div class=\"square draggable\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using cleanInlineStyles Basic Example\nDESCRIPTION: Basic usage example of the cleanInlineStyles utility function that returns the modified instance.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiesclean-inline-styles.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst cleanedInstance = utils.cleanInlineStyles(instance);\n```\n\n----------------------------------------\n\nTITLE: Timer Display HTML Structure\nDESCRIPTION: HTML markup for displaying the loop count and iteration time. Uses a two-column layout with labeled values for visual feedback of the timer's state.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-playback-settingsloop.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large centered row\">\n  <div class=\"col\">\n    <pre class=\"large log row\">\n      <span class=\"label\">loops count</span>\n      <span class=\"loops value\">0</span>\n    </pre>\n  </div>\n  <div class=\"col\">\n    <pre class=\"large log row\">\n      <span class=\"label\">iteration time</span>\n      <span class=\"time value lcd\">0</span>\n    </pre>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Scrollable Animation - HTML\nDESCRIPTION: This HTML snippet provides the necessary structure to support the scrolling functionality for the animation, containing elements for the scroll container, scroll content, and the target animated square. No external dependencies are required for this HTML.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscrollscrollobserver-callbacksonsynccomplete.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"scroll-container scroll-y\">\n  <div class=\"scroll-content grid square-grid\">\n    <div class=\"scroll-section padded sticky\">\n      <div class=\"large row\">\n        <pre class=\"large log row\">\n          <span class=\"label\">completions</span>\n          <span class=\"value\">0</span>\n        </pre>\n      </div>\n    </div>\n    <div class=\"scroll-section padded\">\n      <div class=\"large row\">\n        <div class=\"square\"></div>\n      </div>\n    </div>\n    <div class=\"scroll-section\"></div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Anime.js Animation Display\nDESCRIPTION: This HTML snippet provides the structure for displaying an animated circle and its 'began' status. It includes a div for the circle and a pre element to show the animation's status.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-callbacksonbegin.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large row\">\n  <div class=\"circle\"></div>\n  <pre class=\"large log row\">\n    <span class=\"label\">began</span>\n    <span class=\"value\">false</span>\n  </pre>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for AnimeJS Set Utility Demo\nDESCRIPTION: HTML markup showing the structure of square elements and control buttons used in the utils.set() demonstration.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiesset.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large justified row\">\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n</div>\n<div class=\"medium row\">\n  <fieldset class=\"controls\">\n    <button>Set styles</button>\n    <button disabled>Revert styles</button>\n  </fieldset>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Timeline Function Demonstration\nDESCRIPTION: Provides the HTML structure used for displaying the results of the timeline call functions. Contains three columns with labeled containers that will be updated by the JavaScript timeline functions.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinecall-functions.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large centered row\">\n  <div class=\"col\">\n    <pre class=\"large log row\">\n      <span class=\"label\">function A</span>\n      <span class=\"function-A value lcd\">--</span>\n    </pre>\n  </div>\n  <div class=\"col\">\n    <pre class=\"large log row\">\n      <span class=\"label\">function B</span>\n      <span class=\"function-B value lcd\">--</span>\n    </pre>\n  </div>\n  <div class=\"col\">\n    <pre class=\"large log row\">\n      <span class=\"label\">function C</span>\n      <span class=\"function-C value lcd\">--</span>\n    </pre>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Anime.js Timeline Animation Example\nDESCRIPTION: This HTML snippet shows the DOM structure needed for the timeline example. It includes a circle element to be animated and a display area to show the current animation time value.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-methodsadd.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large row\">\n  <div class=\"circle\"></div>\n  <pre class=\"large log row\">\n    <span class=\"label\">value</span>\n    <span class=\"value lcd\">0</span>\n  </pre>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Anime.js onPause Callback Demo\nDESCRIPTION: HTML markup for the animation demonstration. It contains a circle element that will be animated, a counter display for the number of pauses, and buttons to trigger animation, pause, and element removal actions.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-callbacksonpause.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large row\">\n  <div class=\"circle\"></div>\n  <pre class=\"large log row\">\n    <span class=\"label\">paused</span>\n    <span class=\"value\">0</span>\n  </pre>\n</div>\n<div class=\"medium row\">\n  <fieldset class=\"controls\">\n    <button class=\"button\">Animate x</button>\n    <button class=\"button\">Pause anim</button>\n    <button class=\"button\">Remove target</button>\n  </fieldset>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Animation Demo\nDESCRIPTION: HTML markup defining the structure for animated shapes and control buttons, including containers for shapes and a display for the pause counter.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-callbacksonpause.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large row\">\n  <div class=\"medium pyramid\">\n    <div class=\"shape triangle\"></div>\n    <div class=\"shape square\"></div>\n    <div class=\"shape circle\"></div>\n  </div>\n  <pre class=\"large log row\">\n    <span class=\"label\">paused</span>\n    <span class=\"value\">0</span>\n  </pre>\n</div>\n<div class=\"medium row\">\n  <fieldset class=\"controls\">\n    <button class=\"button\">Create TL</button>\n    <button class=\"button\">Pause TL</button>\n    <button class=\"button\">Remove shapes</button>\n  </fieldset>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Timer Demo with Speed Controls\nDESCRIPTION: HTML markup for the interactive timer demonstration with speed control. It includes display elements for showing the current speed and time, plus a range slider for adjusting the playback rate.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-playback-settingsplaybackrate.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large centered row\">\n  <div class=\"col\">\n    <pre class=\"large log row\">\n      <span class=\"label\">speed</span>\n      <span class=\"speed value\">2.0</span>\n    </pre>\n  </div>\n  <div class=\"col\">\n    <pre class=\"large log row\">\n      <span class=\"label\">current time</span>\n      <span class=\"time value lcd\">0</span>\n    </pre>\n  </div>\n</div>\n<div class=\"medium row\">\n  <fieldset class=\"controls\">\n    <input type=\"range\" min=0 max=10 value=2 step=.1 class=\"range\" />\n  </fieldset>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Draggable Element and Reset Button\nDESCRIPTION: This HTML snippet provides the structure for a draggable square element and a reset button. It creates a container for the draggable element and a separate section for the reset button control.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-methodsreset.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large centered row\">\n  <div class=\"square draggable\"></div>\n</div>\n<div class=\"large row\">\n  <fieldset class=\"controls\">\n    <button class=\"button reset\">Reset</button>\n  </fieldset>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Anime.js Animation with Loop Counter\nDESCRIPTION: Defines the HTML structure for displaying the animation elements (triangle, square, circle) and a counter to display the number of completed animation loops.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-callbacksonloop.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large row\">\n  <div class=\"medium pyramid\">\n    <div class=\"triangle\"></div>\n    <div class=\"square\"></div>\n    <div class=\"circle\"></div>\n  </div>\n  <pre class=\"large log row\">\n    <span class=\"label\">loops</span>\n    <span class=\"value\">0</span>\n  </pre>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Timer Display and Controls\nDESCRIPTION: HTML markup for displaying the timer's current time and a complete button. Includes a display area for the timer value and a control section with a button.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-methodscomplete.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large centered row\">\n  <div class=\"half col\">\n    <pre class=\"large log row\">\n      <span class=\"label\">current time</span>\n      <span class=\"time value lcd\">0</span>\n    </pre>\n  </div>\n</div>\n<div class=\"medium row\">\n  <fieldset class=\"controls\">\n    <button class=\"button complete\">Complete</button>\n  </fieldset>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using padEnd as Function Generator in Anime.js\nDESCRIPTION: Examples of using padEnd to create a reusable padding function, with various use cases including chaining with other utility functions like round().\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiespad-end.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst padTo5WithZeros = utils.padEnd(5, '0');\npadTo5WithZeros('123');  // '12300'\npadTo5WithZeros(78);     // '78000'\npadTo5WithZeros('1234'); // '12340'\n\nconst roundAndPadEnd = utils.round(0).padEnd(5, '0'); // Round to nearest integer then pad to 5 characters\nroundAndPadEnd(123.456); // '12300'\nroundAndPadEnd(7.8);     // '80000'\n```\n\n----------------------------------------\n\nTITLE: Registering Method within Anime.js Scope\nDESCRIPTION: Registers a method within an Anime.js scope using the `add()` method. This makes the method accessible through the `methods` object of the scope, allowing external execution while maintaining the scope's context. Takes a method name (string) and a function as arguments.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscoperegister-method-function.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscope.add('methodName', methodFunction); // Register the method\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of utils.lerp() in JavaScript\nDESCRIPTION: Demonstrates how to use the utils.lerp() function for linear interpolation between two values. The function takes start and end values, and an amount between 0 and 1 to determine the interpolation point.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitieslerp.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst lerped = utils.lerp(start, end, amount);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nutils.lerp(0, 100, 0); // 0\nutils.lerp(0, 100, 0.5); // 50\nutils.lerp(0, 100, 1); // 100\n```\n\n----------------------------------------\n\nTITLE: AnimeJS Animation with Wrap Modifier\nDESCRIPTION: Demonstrates using the wrap utility as a modifier in AnimeJS animations, comparing normal rotation with wrapped rotation values.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitieswrap.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate, utils } from 'animejs';\n\nanimate('.normal', {\n  rotate: '1turn',\n  duration: 3000,\n  loop: true,\n  ease: 'inOut',\n});\n\nanimate('.wrapped', {\n  rotate: '1turn',\n  modifier: utils.wrap(-.25, .25), // Used as a modifier\n  duration: 3000,\n  loop: true,\n  ease: 'inOut',\n});\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for ScrollObserver Example\nDESCRIPTION: This HTML snippet provides the structure for the Anime.js ScrollObserver example. It defines a scrollable container (`.scroll-container`) with content including a sticky section to display the counter and a square that is animated using Anime.js. The structure relies on CSS classes for styling and layout.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscrollscrollobserver-callbacksonleavebackward.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"scroll-container scroll-y\">\n  <div class=\"scroll-content grid square-grid\">\n    <div class=\"scroll-section padded sticky\">\n      <div class=\"large row\">\n        <pre class=\"large log row\">\n          <span class=\"label\">exits</span>\n          <span class=\"value\">0</span>\n        </pre>\n      </div>\n    </div>\n    <div class=\"scroll-section padded\">\n      <div class=\"large row\">\n        <div class=\"square\"></div>\n      </div>\n    </div>\n    <div class=\"scroll-section\">\n    </div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Target HTML Element Structure - HTML\nDESCRIPTION: HTML structure defining the target element for the animation with square class inside a medium row container.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationkeyframestween-values-keyframes.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"medium row\">\n  <div class=\"square\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating HTML UI for AnimeJS Timer Demo\nDESCRIPTION: This HTML snippet creates a user interface for demonstrating the AnimeJS timer functionality. It includes a display for the current time and buttons for playing and reverting the timer.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-methodsrevert.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large centered row\">\n  <div class=\"half col\">\n    <pre class=\"large log row\">\n      <span class=\"label\">current time</span>\n      <span class=\"time value lcd\">0</span>\n    </pre>\n  </div>\n</div>\n<div class=\"medium row\">\n  <fieldset class=\"controls\">\n    <button class=\"button play\">Play</button>\n    <button class=\"button revert\">Revert</button>\n  </fieldset>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Anime.js Timeline Animation\nDESCRIPTION: This HTML snippet provides the structure for the Anime.js timeline animation. It includes containers for the animated shapes (triangle, square, circle) and a log display for showing the number of updates.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-callbacksonbeforeupdate.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large row\">\n  <div class=\"medium pyramid\">\n    <div class=\"triangle\"></div>\n    <div class=\"square\"></div>\n    <div class=\"circle\"></div>\n  </div>\n  <pre class=\"large log row\">\n    <span class=\"label\">updates</span>\n    <span class=\"value\">0</span>\n  </pre>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Timer Display HTML Structure\nDESCRIPTION: HTML structure for displaying timer statistics and control buttons, including pause count and elapsed time displays.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-callbacksonpause.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large row\">\n  <div class=\"col\">\n    <pre class=\"large log row\">\n      <span class=\"label\">paused</span>\n      <span class=\"value paused\">0</span>\n    </pre>\n  </div>\n  <div class=\"col\">\n    <pre class=\"large log row\">\n      <span class=\"label\">elapsed time</span>\n      <span class=\"time value lcd\">0</span>\n    </pre>\n  </div>\n</div>\n<div class=\"medium row\">\n  <fieldset class=\"controls\">\n    <button class=\"button\">Resume</button>\n    <button class=\"button\">Pause</button>\n  </fieldset>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Draggable Element and Controls\nDESCRIPTION: This HTML snippet defines the structure for a draggable square element and a button to enable it. The square is contained within a centered row, and the enable button is placed within a fieldset for controls.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-methodsenable.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large centered row\">\n  <div class=\"square draggable\"></div>\n</div>\n<div class=\"large row\">\n  <fieldset class=\"controls\">\n    <button class=\"button enable\">Enable</button>\n  </fieldset>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Animation Example\nDESCRIPTION: Provides the HTML structure used in the animation examples, showing a div with class 'circle' nested within a container.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationweb-animation-apiimprovements-to-the-web-animation-apisensible-defaults.md#2025-04-18_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large row\">\n  <div class=\"circle\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Anime.js Loop Examples\nDESCRIPTION: Defines the HTML structure for displaying animation examples with different loop configurations. Each row contains a circle element that will be animated and a label describing the loop settings applied to that animation.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-playback-settingsloop.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"small row\">\n  <div class=\"circle loop\"></div>\n  <div class=\"padded label\">loop: 3</div>\n</div>\n<div class=\"small row\">\n  <div class=\"circle loop-alternate\"></div>\n  <div class=\"padded label\">loop: 3, alternate: true</div>\n</div>\n<div class=\"small row\">\n  <div class=\"circle loop-reverse\"></div>\n  <div class=\"padded label\">loop: 3, reversed: true</div>\n</div>\n<div class=\"small row\">\n  <div class=\"circle loop-infinity\"></div>\n  <div class=\"padded label\">loop: true</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Displaying Timer Values\nDESCRIPTION: This HTML snippet sets up the structure for displaying three timer values. Each timer is represented by a column with a label and a value display area.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelineadd-timers.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large centered row\">\n  <div class=\"col\">\n    <pre class=\"large log row\">\n      <span class=\"label\">timer 01</span>\n      <span class=\"timer value lcd\">0</span>\n    </pre>\n  </div>\n  <div class=\"col\">\n    <pre class=\"large log row\">\n      <span class=\"label\">timer 02</span>\n      <span class=\"timer value lcd\">0</span>\n    </pre>\n  </div>\n  <div class=\"col\">\n    <pre class=\"large log row\">\n      <span class=\"label\">timer 03</span>\n      <span class=\"timer value lcd\">0</span>\n    </pre>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Animating Elements with Anime.js waapi.animate()\nDESCRIPTION: Demonstrates how to use Anime.js waapi.animate() method to animate a square element. It shows the syntax for targeting elements, defining keyframe values, and setting playback options like looping and easing.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationweb-animation-apiapi-differences-with-native-waapi.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nwaapi.animate(\n'.square',\n{\nx: 100,\ny: 50,\nopacity: .5,\nloop: 3,\nalternate: true,\nease: 'out',\n});\n```\n\n----------------------------------------\n\nTITLE: Scroll Container Structure - HTML\nDESCRIPTION: This snippet provides the HTML structure required for the scroll animation functionality. It includes a scroll container and sections that hold the animated elements and the display for the entered count. The layout is designed to observe scrolling and trigger the associated animations effectively.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscrollscrollobserver-callbacksonenterbackward.md#2025-04-18_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"scroll-container scroll-y\">\n  <div class=\"scroll-content grid square-grid\">\n    <div class=\"scroll-section padded sticky\">\n      <div class=\"large row\">\n        <pre class=\"large log row\">\n          <span class=\"label\">entered</span>\n          <span class=\"value\">0</span>\n        </pre>\n      </div>\n    </div>\n    <div class=\"scroll-section padded\">\n      <div class=\"large row\">\n        <div class=\"square\"></div>\n      </div>\n    </div>\n    <div class=\"scroll-section\">\n    </div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Animation Demo\nDESCRIPTION: HTML markup showing the structure for displaying animation results, including a pre-formatted code block for logging and a container with a square element for visual demonstration.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationtargetsarray-of-targets.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<pre class=\"row large centered\">\n  <code>{\"x\":\"0\"}</code>\n</pre>\n<div class=\"row medium\">\n  <div class=\"square\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Anime.js Timeline Demo with Framerate Control\nDESCRIPTION: This HTML snippet provides the structure for demonstrating the Anime.js timeline with dynamic framerate control. It includes elements for animation and a range input for adjusting the framerate.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-playback-settingsframerate.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large row\">\n  <div class=\"medium pyramid\">\n    <div class=\"triangle\"></div>\n    <div class=\"square\"></div>\n    <div class=\"circle\"></div>\n  </div>\n  <pre class=\"large log row\">\n    <span class=\"label\">fps</span>\n    <span class=\"fps value\">60</span>\n  </pre>\n</div>\n<div class=\"large row\">\n  <fieldset class=\"controls\">\n    <input type=\"range\" min=0 max=120 value=60 step=1 class=\"range\" />\n  </fieldset>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Structure for Timer Display and Control in HTML\nDESCRIPTION: This HTML snippet provides the structure for displaying the current time of an AnimeJS timer and a button to restart it. It includes a large centered row for the time display and a separate row for the restart button control.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-methodsrestart.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large centered row\">\n  <div class=\"half col\">\n    <pre class=\"large log row\">\n      <span class=\"label\">current time</span>\n      <span class=\"time value lcd\">0</span>\n    </pre>\n  </div>\n</div>\n<div class=\"medium row\">\n  <fieldset class=\"controls\">\n    <button class=\"button restart\">Restart</button>\n  </fieldset>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Timer Control Interface HTML Structure\nDESCRIPTION: HTML markup for displaying and controlling timer framerate, including FPS display, current time counter, and range input slider for adjusting framerate values.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-playback-settingsframerate.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large centered row\">\n  <div class=\"col\">\n    <pre class=\"large log row\">\n      <span class=\"label\">fps</span>\n      <span class=\"fps value\">60</span>\n    </pre>\n  </div>\n  <div class=\"col\">\n    <pre class=\"large log row\">\n      <span class=\"label\">current time</span>\n      <span class=\"time value lcd\">0</span>\n    </pre>\n  </div>\n</div>\n<div class=\"medium row\">\n  <fieldset class=\"controls\">\n    <input type=\"range\" min=0 max=120 value=60 step=1 class=\"range\" />\n  </fieldset>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Draggable Element and Control Button\nDESCRIPTION: This HTML snippet provides the structure for a draggable square element and a button to set its random y position. It uses CSS classes for styling and positioning.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-methodssety.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large centered row\">\n  <div class=\"square draggable\"></div>\n</div>\n<div class=\"large row\">\n  <fieldset class=\"controls\">\n    <button class=\"button set\">Set random y</button>\n  </fieldset>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Native WAAPI Equivalent with Linear Points\nDESCRIPTION: The equivalent code using native Web Animation API, which requires defining linear points for custom easing. This example shows the more complex implementation needed to achieve the same elastic easing effect.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationweb-animation-apiapi-differences-with-native-waapieasing.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst targets = document.querySelectorAll('.square');\n\ntargets.forEach(($el, i) => {\n  $el.animate({\n    translate: '100px',\n  }, {\n    fill: 'forwards',\n    duration: 1000,\n    easing: 'linear(0, 0.0874, 0.2047, 0.3429, 0.4929, 0.6464, 0.7961, 0.9357, 1.06, 1.1656, 1.25, 1.3122, 1.3521, 1.371, 1.3706, 1.3536, 1.3227, 1.2812, 1.2323, 1.1793, 1.125, 1.0721, 1.0227, 0.9788, 0.9415, 0.9116, 0.8896, 0.8755, 0.8688, 0.869, 0.875, 0.8859, 0.9006, 0.9179, 0.9366, 0.9558, 0.9745, 0.992, 1.0075, 1.0207, 1.0313, 1.039, 1.044, 1.0464, 1.0463, 1.0442, 1.0403, 1.0351, 1.029, 1.0224, 1.0156, 1.009, 1.0028, 0.9973, 0.9927, 0.989, 0.9862, 0.9844, 0.9836, 0.9844, 0.9857, 0.9876, 0.9897, 0.9921, 0.9945, 0.9968, 0.999, 1.0009, 1.0026, 1.0039, 1.0049, 1.0055, 1.0058, 1.0055, 1.005, 1.0044, 1.0036, 1.0028, 1.002, 1.0011, 1.0004, 0.9997, 0.9991, 0.9986, 0.9983, 0.9981, 0.998, 0.9982, 0.9984, 0.9987, 0.999, 0.9993, 0.9996, 0.9999, 1.0001, 1.0003, 1)'\n  })\n});\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for AnimeJS Animation Example\nDESCRIPTION: This HTML snippet provides the structure for the AnimeJS animation example. It includes a div for the animated circle and a pre element to display the update count.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-callbacksonbeforeupdate.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large row\">\n  <div class=\"circle\"></div>\n  <pre class=\"large log row\">\n    <span class=\"label\">updates</span>\n    <span class=\"value\">0</span>\n  </pre>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Animating with Anime.js using stagger and reversed parameters\nDESCRIPTION: This snippet demonstrates how to use the 'reversed' parameter along with the 'stagger' function in Anime.js. It animates square elements to translate 17rem horizontally in reverse direction, with a staggered delay of 100ms between each animation.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationweb-animation-apiapi-differences-with-native-waapidirection.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { waapi, stagger } from 'animejs';\n\nwaapi.animate('.square', {\n  translate: '17rem',\n  reversed: true,\n  delay: stagger(100)\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Global Default for onUpdate Callback in Anime.js\nDESCRIPTION: This snippet demonstrates how to change the default onUpdate callback globally for all Anime.js animations. It imports the engine from Anime.js and sets a new default function that logs the timeline's id.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-callbacksonbeforeupdate.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { engine } from 'animejs';\nengine.defaults.onUpdate = self => console.log(self.id);\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Draggable Elements\nDESCRIPTION: Defines the HTML structure for draggable elements within a grid container. Contains two draggable elements: a square and a circle.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-settingsreleasedamping.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large centered grid square-grid\">\n  <div class=\"square draggable\"></div>\n  <div class=\"circle draggable\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML structure for square elements\nDESCRIPTION: This HTML snippet defines the structure for three square elements, each wrapped in a medium-sized row div. These elements are likely the targets for the animations demonstrated in the JavaScript examples.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationweb-animation-apiapi-differences-with-native-waapidirection.md#2025-04-18_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"medium row\">\n  <div class=\"square\"></div>\n</div>\n<div class=\"medium row\">\n  <div class=\"square\"></div>\n</div>\n<div class=\"medium row\">\n  <div class=\"square\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Displaying roundPad Animation Results\nDESCRIPTION: Shows the HTML structure used to display the results of the animation with the roundPad modifier. It includes a div containing a pre element with a span that will be updated during the animation.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiesround-pad.md#2025-04-18_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large row\">\n  <pre class=\"large log row\">\n    <span class=\"value lcd\">0.000</span>\n  </pre>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Animatable Demo\nDESCRIPTION: The HTML structure used for the animatable square demonstration, containing a container with a square element that will be animated based on mouse movement.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimatable.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large centered row\">\n  <div class=\"col\">\n    <div class=\"square\"></div>\n  </div>\n</div>\n<div class=\"small centered row\">\n  <span class=\"label\">Move cursor around</span>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Scroll-Triggered Animation\nDESCRIPTION: This HTML snippet provides the structure for a scrollable container with a square element that will be animated using Anime.js. The `scroll-container` class enables vertical scrolling, and the `square` class is the target of the animation.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscrollscrollobserver-thresholdspositions-shorthands.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"scroll-container scroll-y\">\n  <div class=\"scroll-content grid square-grid\">\n    <div class=\"scroll-section padded\">\n      <div class=\"large centered row\">\n        <div class=\"label\">scroll down</div>\n      </div>\n    </div>\n    <div class=\"scroll-section padded\">\n      <div class=\"large row\">\n        <div class=\"square\"></div>\n      </div>\n    </div>\n    <div class=\"scroll-section\">\n    </div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Anime.js Example\nDESCRIPTION: Defines the HTML structure for the Anime.js example, including a resizable iframe content area and a square element that will be animated. This HTML provides the visual elements that the Javascript code manipulates via Anime.js. Requires a CSS stylesheet for styling the square and iframe elements.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscoperegister-method-function.md#2025-04-18_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"iframe-content resizable\">\n  <div class=\"large centered row\">\n    <div class=\"col\">\n      <div class=\"square\"></div>\n    </div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Timer Display in Anime.js\nDESCRIPTION: Provides the HTML structure for displaying the timer status and current time. This snippet sets up the layout for the JavaScript timer implementation to update.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-callbacksthen.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large row\">\n  <div class=\"col\">\n    <pre class=\"large log row\">\n      <span class=\"label\">promise status</span>\n      <span class=\"status value\">pending</span>\n    </pre>\n  </div>\n  <div class=\"col\">\n    <pre class=\"large log row\">\n      <span class=\"label\">current time</span>\n      <span class=\"time value lcd\">0</span>\n    </pre>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Draggable Element in Anime.js\nDESCRIPTION: This HTML snippet shows the structure required for the draggable functionality. It creates a grid container with a draggable square element inside.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-settingscontainerpadding.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large centered padded show-bounds grid square-grid\">\n  <div class=\"square draggable\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Random Letters - HTML\nDESCRIPTION: Defines the HTML structure with multiple letter elements that can be targeted by the randomPick utility.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiesrandom-pick.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"small row\">\n  <div class=\"letter\">A</div>\n</div>\n<div class=\"small row\">\n  <div class=\"letter\">B</div>\n</div>\n<div class=\"small row\">\n  <div class=\"letter\">C</div>\n</div>\n<div class=\"small row\">\n  <div class=\"letter\">D</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML structure for AnimeJS stagger animation example\nDESCRIPTION: This HTML snippet shows the DOM structure needed for the stagger animation example. It creates a row of square elements that will be targeted by the animation using the '.square' selector.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationstaggervalues-staggering.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"small justified row\">\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Animation Demo HTML Structure\nDESCRIPTION: HTML markup for demonstrating animation callback functionality with a circle element and status display.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-callbacksthen.md#2025-04-18_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large row\">\n  <div class=\"circle\"></div>\n  <pre class=\"large log row\">\n    <span class=\"label\">promise status</span>\n    <span class=\"value\">pending</span>\n  </pre>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using WAAPI with ScrollObserver in Anime.js\nDESCRIPTION: Example of using the waapi.animate() method to create an animation linked to Anime.js's built-in ScrollObserver. This allows animations to be triggered on scroll events.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationweb-animation-apiimprovements-to-the-web-animation-api.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nwaapi.animate('.square', {\n  translate: '100px',\n  autoplay: onScroll()\n});\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Anime.js Animation Demo\nDESCRIPTION: This HTML snippet provides the structure for displaying the animated circle and render count in the Anime.js onRender callback example.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-callbacksonrender.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large row\">\n  <div class=\"circle\"></div>\n  <pre class=\"large log row\">\n    <span class=\"label\">renders</span>\n    <span class=\"value\">0</span>\n  </pre>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Draggable ScrollInView Demo\nDESCRIPTION: Defines the HTML structure required for the draggable scroll demo. Includes a container with scroll capabilities, content area with grid layout, and control buttons for triggering the scroll animation.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-methodsscrollinview.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"scroll-container scroll-x scroll-y\">\n  <div class=\"scroll-content\">\n    <div class=\"large padded grid square-grid\">\n      <div class=\"square draggable\"></div>\n    </div>\n  </div>\n</div>\n<fieldset class=\"absolute controls\">\n  <button class=\"button scroll-button\">Scroll in view</button>\n</fieldset>\n```\n\n----------------------------------------\n\nTITLE: Creating Animation with Global and Local Delays in Anime.js\nDESCRIPTION: Shows how to create an animation using Anime.js with both global and local delay settings. The global delay is applied to all properties, while the local delay is specific to the rotate property.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationtween-parametersdelay.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate } from 'animejs';\n\nconst animation = animate('.square', {\n  x: '17rem',\n  rotate: {\n    to: 360,\n    delay: 1000, // Local delay applied only to rotate property\n  },\n  delay: 500,  // Global delay applied to all properties\n  loop: true,\n  alternate: true\n});\n```\n\n----------------------------------------\n\nTITLE: Web Animations API Animation with Default Units\nDESCRIPTION: Illustrates the use of the Web Animations API (WAAPI) to animate properties, demonstrating automatic fallback to 'px' for specific properties.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationtween-value-typesnumerical-value.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { waapi } from 'animejs';\n\nwaapi.animate('.square', {\n  x: 240, //  -> 240px\n  width: 75, // -> 75px\n  rotate: '.75turn',\n});\n```\n\n----------------------------------------\n\nTITLE: Timer Status Display HTML Structure\nDESCRIPTION: HTML structure for displaying timer status and current time using a two-column layout with pre-formatted text elements.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-callbacksonbegin.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large row\">\n  <div class=\"col\">\n    <pre class=\"large log row\">\n      <span class=\"label\">began</span>\n      <span class=\"status value\">false</span>\n    </pre>\n  </div>\n  <div class=\"col\">\n    <pre class=\"large log row\">\n      <span class=\"label\">current time</span>\n      <span class=\"time value lcd\">0</span>\n    </pre>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Animation Demo\nDESCRIPTION: HTML markup structure for displaying the normal and mapped rotation animations side by side.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiesmap-range.md#2025-04-18_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"x-large spaced-evenly row\">\n  <div class=\"col\">\n    <div class=\"clock normal\"></div>\n    <div class=\"label\">normal</div>\n  </div>\n  <div class=\"col\">\n    <div class=\"clock mapped\"></div>\n    <div class=\"label\">mapped [0,12] [0,1]</div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for User Input in Anime.js - HTML\nDESCRIPTION: This snippet contains the HTML structure needed for user input to control animation precision in Anime.js. It includes a range input element within a fieldset, allowing the user to specify precision ranging from 0 to 5. The default value is set to 4.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationengineengine-parametersprecision.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large row container\"></div>\n<div class=\"medium row\">\n  <fieldset class=\"controls\">\n    <input type=\"range\" min=0 max=5 value=4 step=1 class=\"range\" />\n  </fieldset>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating Reversed Timer Animation with Anime.js\nDESCRIPTION: This code creates a timer animation using Anime.js with the 'reversed' property set to true. It updates HTML elements with the current iteration time and current time of the animation. The timer has a duration of 10000 milliseconds.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-playback-settingsreversed.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate } from 'animejs';\n\nconst [ $iterationTime ] = utils.$('.iteration-time');\nconst [ $currentTime ] = utils.$('.current-time');\n\ncreateTimer({\n  duration: 10000,\n  reversed: true,\n  onUpdate: self => {\n    $iterationTime.innerHTML = self.iterationCurrentTime;\n    $currentTime.innerHTML = self.currentTime;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Timer Playback Settings in Anime.js\nDESCRIPTION: Example of using the createTimer() function in Anime.js to configure timer playback settings. The properties shown include duration, frameRate, and loop settings, along with event callback handlers.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-playback-settings.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncreateTimer({\n┌───────────────────┐\n│ duration: 1000,   │\n│ frameRate: true,  ├─ Playback Settings\n│ loop: true,       │\n└───────────────────┘\n  onBegin: () => {},\n  onLoop: () => {},\n  onUpdate: () => {},\n});\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Draggable Element - HTML\nDESCRIPTION: This snippet outlines the necessary HTML structure to support the draggable feature provided by Anime.js. It includes the container for the scrollable area and the actual draggable element.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-settingsscrollthreshold.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"scroll-container scroll-x scroll-y\">\n  <div class=\"scroll-content\">\n    <div class=\"large padded grid square-grid\">\n      <div class=\"square draggable\"></div>\n    </div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Equivalent Native WAAPI Animation\nDESCRIPTION: Shows the equivalent native Web Animation API code to achieve the same animation as the Anime.js example. It includes setting duration, easing, and manually preserving the final state.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationweb-animation-apiimprovements-to-the-web-animation-apisensible-defaults.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst $el = document.querySelector('.circle');\n\n$el.animate({ translate: '100px' }, {\n  duration: 1000,\n  easing: 'ease-out',\n}).finished.then(() => {\n  $el.style.translate = '100px';\n});\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for AnimeJS Animation Demo\nDESCRIPTION: This HTML snippet provides the structure for demonstrating the AnimeJS animation with onUpdate callback. It includes a circle element for animation and a pre element to display the update count.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-callbacksonupdate.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large row\">\n  <div class=\"circle\"></div>\n  <pre class=\"large log row\">\n    <span class=\"label\">updates</span>\n    <span class=\"value\">0</span>\n  </pre>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for AnimeJS Modifier Examples\nDESCRIPTION: Defines the HTML structure used to demonstrate the modifier examples. Contains three rows of elements, each with a square to animate and a label showing the modifier function used.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationtween-parametersmodifier.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"medium row\">\n  <div class=\"square\"></div>\n  <div class=\"padded label\">utils.round(0)</div>\n</div>\n<div class=\"medium row\">\n  <div class=\"square\"></div>\n  <div class=\"padded label\">v => v % 17</div>\n</div>\n<div class=\"medium row\">\n  <div class=\"square\"></div>\n  <div class=\"padded label\">v => Math.cos(v) / 2</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Draggable Element\nDESCRIPTION: Provides an example of the HTML structure for a draggable element. It shows a div with class 'square' and 'draggable' inside a container with classes for layout.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggable.md#2025-04-18_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large row centered\">\n  <div class=\"square draggable\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Anime.js Animation Demo\nDESCRIPTION: This HTML snippet creates the structure for the animation demo with a clock element and three buttons for different operations. The buttons trigger add, subtract, and multiply animations on the clock element when clicked.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationtween-value-typesrelative-value.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large centered row\">\n  <div class=\"clock\"></div>\n</div>\n<div class=\"medium row\">\n  <fieldset class=\"controls\">\n    <button class=\"button add\">+ 90°</button>\n    <button class=\"button sub\">- 90°</button>\n    <button class=\"button mul\">× .5</button>\n  </fieldset>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for AnimeJS Timer Display\nDESCRIPTION: This HTML snippet provides the structure for displaying the timer's iteration time and a button to trigger the alternate() method. It includes a container for showing the current iteration time and a fieldset with a button labeled 'Alternate'.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-methodsalternate.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large centered row\">\n  <div class=\"half col\">\n    <pre class=\"large log row\">\n      <span class=\"label\">iteration time</span>\n      <span class=\"iteration-time value lcd\">0</span>\n    </pre>\n  </div>\n</div>\n<div class=\"medium row\">\n  <fieldset class=\"controls\">\n    <button class=\"button\">Alternate</button>\n  </fieldset>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Animation Demo\nDESCRIPTION: HTML markup structure for demonstrating the difference between normal and wrapped animations using clock elements.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitieswrap.md#2025-04-18_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"x-large spaced-evenly row\">\n  <div class=\"col\">\n    <div class=\"clock normal\"></div>\n    <div class=\"label\">normal</div>\n  </div>\n  <div class=\"col\">\n    <div class=\"clock wrapped\"></div>\n    <div class=\"label\">wrapped [-.25,.25]</div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Animated Inputs\nDESCRIPTION: This HTML snippet shows the structure of two input elements that can be targeted by the Anime.js animation. It includes a range input and a text input, both with initial values set to 0.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimatable-propertieshtml-attributes.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<pre class=\"row large centered\">\n  <input type=\"range\" value=\"0\" min=\"0\" max=\"1000\" />\n  <input type=\"text\" value=\"0\" size=\"5\"/>\n</pre>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Anime.js Animation with padEnd\nDESCRIPTION: HTML markup structure used for displaying the animation result with an element having class 'value' that will be modified by the animation.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiespad-end.md#2025-04-18_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large row\">\n  <pre class=\"large log row\">\n    <span class=\"value lcd\">0</span>\n  </pre>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Spring Animation Demo\nDESCRIPTION: HTML markup for demonstrating the spring animations with different stiffness values. Creates three rows, each containing a square element and a label indicating the stiffness value used for the animation.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationweb-animation-apiwaapi-convertease.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"medium row\">\n  <div class=\"square\"></div>\n  <div class=\"padded label\">stiffness: 100</div>\n</div>\n<div class=\"medium row\">\n  <div class=\"square\"></div>\n  <div class=\"padded label\">stiffness: 150</div>\n</div>\n<div class=\"medium row\">\n  <div class=\"square\"></div>\n  <div class=\"padded label\">stiffness: 200</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Demonstrating Stagger Effect in AnimeJS\nDESCRIPTION: This HTML structure shows the resulting positions and delays of elements after applying the stagger function. It displays four squares with their corresponding x positions and delay values.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationstaggerstagger-value-typesnumerical-value.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"small row\">\n  <div class=\"square\"></div>\n  <div class=\"padded label\">x: 0rem      delay: 0ms</div>\n</div>\n<div class=\"small row\">\n  <div class=\"square\"></div>\n  <div class=\"padded label\">x: 5.75rem   delay: 100ms</div>\n</div>\n<div class=\"small row\">\n  <div class=\"square\"></div>\n  <div class=\"padded label\">x: 11.5rem   delay: 200ms</div>\n</div>\n<div class=\"small row\">\n  <div class=\"square\"></div>\n  <div class=\"padded label\">x: 17.25rem  delay: 300ms</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Add Event Listeners to Toggle Buttons\nDESCRIPTION: This snippet adds event listeners to the `$ms` (milliseconds) and `$s` (seconds) buttons. When clicked, each button triggers the `toggleSetting` function, which switches the Anime.js time unit.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationengineengine-parameterstimeunit-seconds-milliseconds.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n$ms.addEventListener('click', toggleSetting);\n$s.addEventListener('click', toggleSetting);\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for AnimeJS Targets\nDESCRIPTION: Shows the HTML structure that corresponds to the animation targets, including multiple rows with square elements and specific class/ID selectors.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationtargetscss-selector.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"medium row\">\n  <div class=\"square\"></div>\n</div>\n<div class=\"medium row\">\n  <div id=\"css-selector-id\" class=\"square\"></div>\n</div>\n<div class=\"medium row\">\n  <div class=\"square\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Displaying Animated Object State in HTML\nDESCRIPTION: This HTML snippet shows how the animated object's state is displayed in the DOM. It uses a pre-formatted code block to show the current values of the vector2D object.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationtargetsjavascript-objects.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<pre class=\"row large centered\">\n  <code>{\"x\":0,\"y\":0}</code>\n</pre>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Anime.js Animation Demo\nDESCRIPTION: HTML markup that creates the visual elements for the animation demonstration. It includes shapes (triangle, square, circle) that will be animated and a counter display for tracking loop iterations.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-playback-settingsalternate.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large row\">\n  <div class=\"medium pyramid\">\n    <div class=\"triangle\"></div>\n    <div class=\"square\"></div>\n    <div class=\"circle\"></div>\n  </div>\n  <pre class=\"large log row\">\n    <span class=\"label\">loops</span>\n    <span class=\"loops value\">0</span>\n  </pre>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Shuffle Animation Demo\nDESCRIPTION: Provides the HTML structure for a demo of the shuffle animation. It includes a row of square elements to be shuffled and a button to trigger the animation.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiesshuffle.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large row\">\n  <div class=\"square\">A</div>\n  <div class=\"square\">B</div>\n  <div class=\"square\">C</div>\n  <div class=\"square\">D</div>\n  <div class=\"square\">E</div>\n  <div class=\"square\">F</div>\n</div>\n<div class=\"medium row\">\n  <fieldset class=\"controls\">\n    <button>Shuffle</button>\n  </fieldset>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for WAAPI Animation\nDESCRIPTION: HTML markup showing the structure of elements targeted by the WAAPI animation. This consists of a heading with individual span elements that will be animated.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationweb-animation-api.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<h2 class=\"large grid centered square-grid text-xl\">\n  <span>H</span>\n  <span>E</span>\n  <span>L</span>\n  <span>L</span>\n  <span>O</span>\n  <span>&nbsp;</span>\n  <span>W</span>\n  <span>A</span>\n  <span>A</span>\n  <span>P</span>\n  <span>I</span>\n</h2>\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Default for onBeforeUpdate in AnimeJS\nDESCRIPTION: This snippet demonstrates how to set a global default for the onBeforeUpdate callback in AnimeJS. It imports the engine from AnimeJS and sets a console log function as the default onBeforeUpdate callback.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-callbacksonbeforeupdate.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { engine } from 'animejs';\nengine.defaults.onBeforeUpdate = self => console.log(self.id);\n```\n\n----------------------------------------\n\nTITLE: Anime.js ScrollObserver Container Value String Syntax\nDESCRIPTION: This snippet uses the container value string syntax to define ScrollObserver thresholds.  The target value defaults to 'start' for enter and 'end' for leave. It enters when the top of the target meets the bottom of the container and leaves when the bottom of the target meets the top of the container.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscrollscrollobserver-thresholds.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nonScroll({\n  // Enters when the top of the target meets the bottom of the container\n  enter: 'bottom',\n  // Leaves when the bottom of the target meets the top of the container\n  leave: 'top'\n });\n```\n\n----------------------------------------\n\nTITLE: HTML for Staggered Squares\nDESCRIPTION: This HTML snippet creates a series of 'square' div elements within a container. These elements are targeted by the Anime.js animation to apply the staggered box-shadow effect. The classes 'small', 'justified', and 'row' are used for styling and layout purposes to arrange the squares.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationstaggerstagger-parametersstagger-modifier.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"small justified row\">\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for AnimeJS Timeline Demo\nDESCRIPTION: This HTML markup creates the structure for the AnimeJS timeline demonstration. It defines a container with animated elements (triangle, square, circle) and adds a control section with a pause button that triggers the pause() method.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-methodspause.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large row\">\n  <div class=\"medium pyramid\">\n    <div class=\"triangle\"></div>\n    <div class=\"square\"></div>\n    <div class=\"circle\"></div>\n  </div>\n</div>\n<div class=\"medium row\">\n  <fieldset class=\"controls\">\n    <button class=\"button pause\">Pause</button>\n  </fieldset>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Anime.js Seek Demo\nDESCRIPTION: This HTML snippet provides the structure for the interactive demonstration of the seek() method. It includes square elements for animation and controls for seeking and play/pause functionality.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-methodsseek.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"medium row\">\n  <div class=\"square\"></div>\n</div>\n<div class=\"medium row\">\n  <div class=\"square\"></div>\n</div>\n<div class=\"medium centered row\">\n  <fieldset class=\"controls\">\n    <input type=\"range\" min=0 max=2000 value=0 class=\"range\" />\n    <button style=\"flex: 0.25;\" class=\"button play-pause\">Play</button>\n  </fieldset>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Anime.js Timeline Demo\nDESCRIPTION: This HTML snippet provides the structure for the Anime.js timeline demonstration. It includes div elements for the animated shapes and a pre element to display the current time of the animation.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-playback-settingsreversed.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large row\">\n  <div class=\"medium pyramid\">\n    <div class=\"triangle\"></div>\n    <div class=\"square\"></div>\n    <div class=\"circle\"></div>\n  </div>\n  <pre class=\"large log row\">\n    <span class=\"label\">current time</span>\n    <span class=\"time value\">0</span>\n  </pre>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Importing Anime.js WAAPI Module and Utilities\nDESCRIPTION: Basic import statement for the Web Animation API (waapi), utilities, and stagger function from Anime.js library.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationweb-animation-apiimprovements-to-the-web-animation-apiindividual-property-parameters.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { waapi, utils, stagger } from 'animejs';\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Transform Animation Demo\nDESCRIPTION: HTML markup showing the structure for demonstrating both JavaScript and WAAPI animation methods with square elements and labels.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimatable-propertiescss-transforms.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"medium row\">\n  <div class=\"square\"></div>\n  <span class=\"padded label\">JS / WAAPI</span>\n</div>\n<div class=\"medium row\">\n  <div class=\"square\"></div>\n  <span class=\"padded label\">WAAPI</span>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Animation Target\nDESCRIPTION: The HTML structure that contains the element targeted for animation. It consists of a container div with 'large row' classes and a nested div with the 'square' class that will be animated.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimatable-propertiescss-properties.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large row\">\n  <div class=\"square\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining Revert Functions\nDESCRIPTION: These functions, `revertScope1` and `revertScope2`, call the `revert` method on their respective scopes.  This will stop the animations and execute the cleanup function defined in `scopeConstructor`, removing the event listeners.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscopescope-methodsrevert.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst revertScope1 = () => scope1.revert();\nconst revertScope2 = () => scope2.revert();\n```\n\n----------------------------------------\n\nTITLE: Implementing Animation Cancellation with AnimeJS in JavaScript\nDESCRIPTION: This snippet shows how to create an animation using AnimeJS, and implement cancel and play functionality. It uses the animate function to create a looping animation on elements with the 'square' class, and sets up event listeners for cancel and play buttons.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-methodscancel.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate, utils, stagger } from 'animejs';\n\nconst [ $cancelButton ] = utils.$('.cancel');\nconst [ $playButton ] = utils.$('.play');\n\nconst animation = animate('.square', {\n  x: '17rem',\n  alternate: true,\n  ease: 'inOutSine',\n  loop: true,\n  delay: stagger(100),\n});\n\nconst cancelAnimation = () => animation.cancel();\nconst playAnimation = () => animation.play();\n\n$cancelButton.addEventListener('click', cancelAnimation);\n$playButton.addEventListener('click', playAnimation);\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Animation Demo\nDESCRIPTION: The HTML markup used for the animation demo, consisting of a circle element that will be animated and a display area showing the promise status.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationweb-animation-apiapi-differences-with-native-waapifinished.md#2025-04-18_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large row\">\n  <div class=\"circle\"></div>\n  <pre class=\"large log row\">\n    <span class=\"label\">promise status</span>\n    <span class=\"value\">pending</span>\n  </pre>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Animating Multiple Elements with Anime.js\nDESCRIPTION: Example showing how to animate multiple elements using Anime.js syntax with the stagger effect.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationweb-animation-apiimprovements-to-the-web-animation-apimulti-targets-animation.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nwaapi.animate('.circle', {\n  translate: '100px',\n  delay: stagger(100),\n});\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Duration Demonstration in AnimeJS\nDESCRIPTION: HTML markup that creates containers for demonstrating animations with different durations. Each row contains a circle element to be animated and a label indicating the duration value.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-playback-settingsduration.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"medium row\">\n  <div class=\"circle dur-0\"></div>\n  <div class=\"padded label\">duration: 0</div>\n</div>\n<div class=\"medium row\">\n  <div class=\"circle dur-500\"></div>\n  <div class=\"padded label\">duration: 500</div>\n</div>\n<div class=\"medium row\">\n  <div class=\"circle dur-2000\"></div>\n  <div class=\"padded label\">duration: 2000</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting Global Default for onComplete Callback in Anime.js\nDESCRIPTION: This snippet demonstrates how to set a global default for the onComplete callback in Anime.js. It imports the engine from Anime.js and sets the default onComplete function to log the timeline's id.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-callbacksoncomplete.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { engine } from 'animejs';\nengine.defaults.onComplete = self => console.log(self.id);\n```\n\n----------------------------------------\n\nTITLE: Importing Anime.js and Setting Up Particle Animation\nDESCRIPTION: This JavaScript snippet imports necessary functions from Anime.js and sets up a particle animation in a web document. It initializes particles within a container and adds animations with random positions, scales, and looping, providing a visual demonstration of frame rate adjustments. Dependencies include Anime.js library and a pre-existing HTML structure.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationengineengine-parametersfps.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { engine, animate, utils } from 'animejs';\n\nconst [ $container ] = utils.$('.container');\nconst [ $range ] = utils.$('.range');\n\nfor (let i = 0; i < 150; i++) {\n  const $particle = document.createElement('div');\n  $particle.classList.add('particle');\n  $container.appendChild($particle);\n  animate($particle, {\n    x: utils.random(-10, 10, 2) + 'rem',\n    y: utils.random(-3, 3, 2) + 'rem',\n    scale: [{ from: 0, to: 1 }, { to: 0 }],\n    delay: utils.random(0, 1000),\n    loop: true,\n  });  \n}\n\nfunction onInput() {\n  engine.fps = this.value;\n}\n\n$range.addEventListener('input', onInput);\n```\n\n----------------------------------------\n\nTITLE: Implementing onUpdate Callback for Draggable in AnimeJS\nDESCRIPTION: This snippet demonstrates how to use the onUpdate callback with createDraggable in AnimeJS. It updates a counter each time the draggable element's position changes.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-callbacksonupdate.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createDraggable, utils } from 'animejs';\n\nconst [ $value ] = utils.$('.value');\n\nlet updates = 0;\n\ncreateDraggable('.square', {\n  container: '.grid',\n  onUpdate: () => $value.textContent = ++updates\n});\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Animation Elements\nDESCRIPTION: Defines the HTML structure containing the elements targeted by the animations, including triangle, square, and circle shapes.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-methodssync.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large row\">\n  <div class=\"medium pyramid\">\n    <div class=\"triangle\"></div>\n    <div class=\"square\"></div>\n    <div class=\"circle\"></div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using complete() Method with AnimeJS Animation\nDESCRIPTION: This snippet demonstrates how to use the complete() method to instantly finish an animation in AnimeJS. It creates an animation with alternating movement, applies a stagger delay to elements with the 'square' class, and sets up a button event listener to trigger the complete() method.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-methodscomplete.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate, utils, stagger } from 'animejs';\n\nconst [ $completeButton ] = utils.$('.complete');\n\nconst animation = animate('.square', {\n  x: '17rem',\n  alternate: true,\n  ease: 'inOutSine',\n  loop: true,\n  delay: stagger(100),\n});\n\nconst completeAnimation = () => animation.complete();\n\n$completeButton.addEventListener('click', completeAnimation);\n```\n\n----------------------------------------\n\nTITLE: Animating Width with Default Units in JavaScript\nDESCRIPTION: Demonstrates how to animate the width property using a number value, which defaults to pixels when no unit is specified.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationtween-value-typesnumerical-value.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nanimate(target, { width: 100 }); // Defaults to px\n```\n\n----------------------------------------\n\nTITLE: Setting Global Default for onComplete Callback in Anime.js\nDESCRIPTION: Demonstrates how to change the default onComplete callback globally by updating the engine.defaults object in Anime.js. This snippet imports the engine from Anime.js and sets the default onComplete callback to log the animation ID.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-callbacksoncomplete.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { engine } from 'animejs';\nengine.defaults.onComplete = self => console.log(self.id);\n```\n\n----------------------------------------\n\nTITLE: Basic Random Pick Usage - JavaScript\nDESCRIPTION: Demonstrates the basic usage of randomPick utility function to select a random element from a collection.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiesrandom-pick.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst ramdomElement = utils.randomPick(collection);\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Anime.js Timeline Demo\nDESCRIPTION: HTML markup that defines the structure for the animation demo. It includes containers for animated elements (triangle, square, circle), a display for the paused state, and a play button for controlling the timeline.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-playback-settingsautoplay.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large row\">\n  <div class=\"medium pyramid\">\n    <div class=\"triangle\"></div>\n    <div class=\"square\"></div>\n    <div class=\"circle\"></div>\n  </div>\n  <pre class=\"large log row\">\n    <span class=\"label\">paused</span>\n    <span class=\"paused value\">true</span>\n  </pre>\n</div>\n<div class=\"large row controls\">\n  <button class=\"play\">Play</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Timeline with Dynamic Playback Rate\nDESCRIPTION: Creates an interactive animation timeline with adjustable playback speed using range input. The timeline animates multiple shapes and allows real-time speed adjustment through a UI control.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-playback-settingsplaybackrate.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTimeline, utils } from 'animejs';\n\nconst [ $range ] = utils.$('.range');\nconst [ $speed ] = utils.$('.speed');\n\nconst tl = createTimeline({\n  playbackRate: 2,\n  loop: true,\n})\n.add('.circle', { x: '15rem' })\n.add('.triangle', { x: '15rem' }, '-=500')\n.add('.square', { x: '15rem' }, '-=500');\n\nconst updateSpeed = () => {\n  const speed = utils.roundPad(+$range.value, 1);\n  $speed.innerHTML = speed;\n  utils.sync(() => tl.speed = speed);\n}\n\n$range.addEventListener('input', updateSpeed);\n```\n\n----------------------------------------\n\nTITLE: Implementing Smooth Animation with utils.lerp() in AnimeJS\nDESCRIPTION: This snippet demonstrates how to use utils.lerp() in combination with other AnimeJS utilities to create smooth, frame-rate independent animations. It includes examples of regular and frame-rate limited interpolation.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitieslerp.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate, createTimer, utils } from 'animejs';\n\nconst [ $input ] = utils.$('.input');\nconst [ $lerped ] = utils.$('.lerped');\nconst [ $lerped15fps ] = utils.$('.lerped-15');\n\nanimate($input, {\n  rotate: '1000turn',\n  modifier: utils.snap(.25),\n  duration: 4000000,\n  loop: true,\n  ease: 'linear',\n});\n\nconst loop = createTimer({\n  onUpdate: clock => {\n    const sourceRotate = utils.get($input, 'rotate', false);\n    const lerpedRotate = utils.get($lerped, 'rotate', false);\n    utils.set($lerped, {\n      rotate: utils.lerp(lerpedRotate, sourceRotate, .075) + 'turn'\n    });\n  }\n});\n\nconst loop15fps = createTimer({\n  frameRate: 15,\n  onUpdate: clock => {\n    const sourceRotate = utils.get($input, 'rotate', false);\n    const lerpedRotate = utils.get($lerped15fps, 'rotate', false);\n    utils.set($lerped15fps, {\n      rotate: utils.lerp(lerpedRotate, sourceRotate, .0725, clock) + 'turn'\n    });\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for ScrollObserver Example\nDESCRIPTION: This HTML snippet provides a simple structure required for the ScrollObserver example. It includes a scrollable container with several sections, one of which contains a square element targeted by the animejs animation. The structure supports interaction with the ScrollObserver to trigger animations based on scroll positions.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscrollscrollobserver-methodslink.md#2025-04-18_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"scroll-container scroll-y\">\n  <div class=\"scroll-content grid square-grid\">\n    <div class=\"scroll-section padded\">\n      <div class=\"large row\">\n        <div class=\"label\">scroll down</div>\n      </div>\n    </div>\n    <div class=\"scroll-section padded\">\n      <div class=\"large row\">\n        <div class=\"square\"></div>\n      </div>\n    </div>\n    <div class=\"scroll-section\">\n    </div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting Global Default for playbackEase in Anime.js (JavaScript)\nDESCRIPTION: Shows how to modify the global default value for the playbackEase parameter by updating the engine.defaults object in Anime.js.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-playback-settingsplaybackease.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { engine } from 'animejs';\nengine.defaults.playbackEase = 'inOut';\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Draggable Element\nDESCRIPTION: Defines the HTML structure required for the draggable element implementation. Creates a container with perspective and grid styling, containing a draggable square element.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-axes-parametersmapto.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large grid centered perspective square-grid\">\n  <div class=\"square draggable\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Timeline.add() Method Syntax in AnimeJS\nDESCRIPTION: Syntax for the add() method in AnimeJS timelines. This method creates and adds an animation directly to the timeline, allowing tween value composition with existing children.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelineadd-animations.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ntimeline.add(targets, parameters, position);\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Draggable Elements Demo\nDESCRIPTION: This HTML snippet creates a layout for demonstrating draggable elements with different y-axis settings. It includes two square elements and labels to indicate their draggable status.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-axes-parametersy.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large spaced-evenly row\">\n  <div class=\"square enabled draggable\"></div>\n  <div class=\"square disabled draggable\"></div>\n</div>\n<div class=\"large spaced-evenly row\">\n  <div class=\"label\">y enabled</div>\n  <div class=\"label\">y disabled</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Importing Anime.js Engine\nDESCRIPTION: Imports the core engine module from the Anime.js library, which is responsible for managing and synchronizing animation instances and timelines\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationengine.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { engine } from 'animejs';\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Draggable Element and Counter Display\nDESCRIPTION: This HTML snippet provides the structure for displaying a draggable square and a counter for the number of grabs. It includes a grid container, a log area for the counter, and the draggable square element.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-callbacksongrab.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large padded grid square-grid\">\n  <pre class=\"large log row\">\n    <span class=\"label\">grabs</span>\n    <span class=\"value\">0</span>\n  </pre>\n  <div class=\"square draggable\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting Global Default Delay in Anime.js\nDESCRIPTION: Shows how to change the default delay value globally by updating the engine.defaults object in Anime.js.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-playback-settingsdelay.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { engine } from 'animejs';\nengine.defaults.delay = 500;\n```\n\n----------------------------------------\n\nTITLE: HTML Scroll Container and Timer Element\nDESCRIPTION: This HTML snippet defines a scrollable container with a timer element inside. The `scroll-container` class enables vertical scrolling, and the `timer` class is used to identify the element that will be updated by the Anime.js animation based on the scroll position. The `target` property in the JavaScript code is linked to this HTML.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscrollscrollobserver-settingstarget.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"scroll-container scroll-y\">\n  <div class=\"scroll-content grid square-grid\">\n    <div class=\"scroll-section padded\">\n      <div class=\"large centered row\">\n        <div class=\"label\">scroll down</div>\n      </div>\n    </div>\n    <div class=\"scroll-section padded\">\n      <div class=\"large centered row\">\n        <pre class=\"large log row\">\n          <span class=\"label\">timer</span>\n          <span class=\"timer value lcd\">0</span>\n        </pre>\n      </div>\n    </div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting Default loopDelay Globally in AnimeJS\nDESCRIPTION: Demonstrates how to change the default loopDelay value globally by updating the engine.defaults object in AnimeJS.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-playback-settingsplayback-loopdelay.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { engine } from 'animejs';\nengine.defaults.loopDelay = 500;\n```\n\n----------------------------------------\n\nTITLE: Implementing Animation Control with resume() Method in AnimeJS\nDESCRIPTION: This code demonstrates how to create and control an animation using AnimeJS. It shows how to pause, alternate direction, and resume an animation through button clicks, showcasing the resume() method in context with other animation control functions.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-methodsresume.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate, utils, stagger } from 'animejs';\n\nconst [ $pauseButton, $alternateButton, $resumeButton ] = utils.$('.button');\n\nconst animation = animate('.square', {\n  x: '17rem',\n  ease: 'inOutSine',\n  loop: true,\n  delay: stagger(100),\n});\n\nconst pauseAnimation = () => animation.pause();\nconst alternateAnimation = () => animation.alternate();\nconst resumeAnimation = () => animation.resume();\n\n$pauseButton.addEventListener('click', pauseAnimation);\n$alternateButton.addEventListener('click', alternateAnimation);\n$resumeButton.addEventListener('click', resumeAnimation);\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Text Animation\nDESCRIPTION: HTML structure showing a grid of span elements containing the text \"HELLO WORLD\". Each character is in a separate span, allowing for individual character animations.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimation.md#2025-04-18_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<h2 class=\"large grid centered square-grid text-xl\">\n  <span>H</span>\n  <span>E</span>\n  <span>L</span>\n  <span>L</span>\n  <span>O</span>\n  <span>&nbsp;</span>\n  <span>W</span>\n  <span>O</span>\n  <span>R</span>\n  <span>L</span>\n  <span>D</span>\n</h2>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Draggable Element and Update Counter\nDESCRIPTION: This HTML snippet provides the structure for displaying the update counter and the draggable square element within a grid container.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-callbacksonupdate.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large padded grid square-grid\">\n  <pre class=\"large log row\">\n    <span class=\"label\">updates</span>\n    <span class=\"value\">0</span>\n  </pre>\n  <div class=\"square draggable\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Animating Elements on Scroll using Anime.js - JavaScript\nDESCRIPTION: This snippet demonstrates how to animate a square element using Anime.js when it comes into and leaves the viewport as the user scrolls. The animations are configured to respond to specific scroll events with defined synchronization methods for playback control.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscrollscrollobserver-synchronisation-modesmethod-names.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate, onScroll } from 'animejs';\n\nanimate('.square', {\n  x: '15rem',\n  rotate: '1turn',\n  duration: 2000,\n  autoplay: onScroll({\n    container: '.scroll-container',\n    enter: 'bottom-=50 top',\n    leave: 'top+=60 bottom',\n    sync: 'resume pause reverse reset',\n    debug: true\n  })\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Animation with Dynamic Speed Control in Anime.js\nDESCRIPTION: Demonstrates how to create an animation with the playbackRate property and implement dynamic speed adjustment using a range input. The code includes event handling for updating the animation speed in real-time.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-playback-settingsplaybackrate.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate, utils } from 'animejs';\n\nconst [ $range ] = utils.$('.range');\nconst [ $speed ] = utils.$('.speed');\n\nconst animation = animate('.circle', {\n  x: '16rem',\n  loop: true,\n  alternate: true,\n  playbackRate: 1,\n});\n\nconst updateSpeed = () => {\n  const { value } = $range;\n  $speed.innerHTML = utils.roundPad(+value, 2);\n  utils.sync(() => animation.speed = value);\n}\n\n$range.addEventListener('input', updateSpeed);\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for AnimeJS Timeline Demo\nDESCRIPTION: HTML markup that creates the visual elements and controls for the AnimeJS timeline demonstration. Includes the shapes being animated (triangle, square, circle) and buttons to cancel and restart the animation.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-methodscancel.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large row\">\n  <div class=\"medium pyramid\">\n    <div class=\"triangle\"></div>\n    <div class=\"square\"></div>\n    <div class=\"circle\"></div>\n  </div>\n</div>\n<div class=\"medium row\">\n  <fieldset class=\"controls\">\n    <button class=\"button cancel\">Cancel</button>\n    <button class=\"button play\">Play</button>\n  </fieldset>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Anime.js Scope Example\nDESCRIPTION: This HTML provides the structure for displaying circles within two rows and buttons to trigger the `refresh()` method on their respective Anime.js scopes.  The circle elements are targets for the animation, and the buttons call the JavaScript functions to refresh the corresponding scopes.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscopescope-methodsrefresh.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"medium justified row row-1\">\n  <div class=\"circle\"></div>\n  <div class=\"circle\"></div>\n  <div class=\"circle\"></div>\n  <div class=\"circle\"></div>\n  <div class=\"circle\"></div>\n  <div class=\"circle\"></div>\n  <div class=\"circle\"></div>\n  <div class=\"circle\"></div>\n  <div class=\"circle\"></div>\n</div>\n<div class=\"medium justified row row-2\">\n  <div class=\"circle\"></div>\n  <div class=\"circle\"></div>\n  <div class=\"circle\"></div>\n  <div class=\"circle\"></div>\n  <div class=\"circle\"></div>\n  <div class=\"circle\"></div>\n  <div class=\"circle\"></div>\n  <div class=\"circle\"></div>\n  <div class=\"circle\"></div>\n</div>\n<div class=\"medium row\">\n  <fieldset class=\"controls\">\n    <button class=\"button refresh\">Refresh row 1</button>\n    <button class=\"button refresh\">Refresh row 2</button>\n  </fieldset>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Timer Display HTML Structure\nDESCRIPTION: HTML markup for displaying the loop count and current iteration time of the timer animation.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-playback-settingsalternate.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large centered row\">\n  <div class=\"col\">\n    <pre class=\"large log row\">\n      <span class=\"label\">loops count</span>\n      <span class=\"loops value\">0</span>\n    </pre>\n  </div>\n  <div class=\"col\">\n    <pre class=\"large log row\">\n      <span class=\"label\">iteration time</span>\n      <span class=\"time value lcd\">0</span>\n    </pre>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining HTML Structure for Draggable Elements\nDESCRIPTION: This snippet defines the HTML structure for the draggable elements, including a container (`.grid`) and the draggable elements themselves (`.square` and `.circle`). The HTML includes the necessary classes for the JavaScript code to target the correct elements.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-settingsreleasestiffness.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large centered grid square-grid\">\n  <div class=\"square draggable\"></div>\n  <div class=\"circle draggable\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Anime.js Timeline with Scroll\nDESCRIPTION: This code demonstrates how to synchronize a timeline with scrolling. It creates a timeline using `createTimeline` (assumed to be a custom function) and adds animations to multiple circle elements, triggered by the scroll position of a container.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscroll.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Timeline\n\nconst circles = utils.$('.circle');\n\ncreateTimeline({\n  alternate: true,\n  loop: true,\n  autoplay: onScroll({\n    target: circles[0],\n    container,\n    debug\n  })\n})\n.add(circles[2], { x: '9rem' })\n.add(circles[1], { x: '9rem' })\n.add(circles[0], { x: '9rem' });\n```\n\n----------------------------------------\n\nTITLE: Creating a Timer with Delay in Anime.js\nDESCRIPTION: This example shows how to create a timer with a specific delay using Anime.js. It imports necessary functions, selects a DOM element, and creates a timer with a 2-second delay that updates the element's innerHTML with the current time.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-playback-settingsdelay.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTimer, utils } from 'animejs';\n\nconst [ $time ] = utils.$('.time');\n\ncreateTimer({\n  delay: 2000,\n  onUpdate: self => $time.innerHTML = self.currentTime\n});\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Anime.js Timeline Example\nDESCRIPTION: This HTML snippet provides the structure for the animated elements (triangle, square, circle) and the control button used in the Anime.js timeline example. It sets up the necessary DOM elements for the animation to work with.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-methodscomplete.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large row\">\n  <div class=\"medium pyramid\">\n    <div class=\"triangle\"></div>\n    <div class=\"square\"></div>\n    <div class=\"circle\"></div>\n  </div>\n</div>\n<div class=\"medium row\">\n  <fieldset class=\"controls\">\n    <button class=\"button complete\">Complete</button>\n  </fieldset>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for AnimeJS Round Utility Demo\nDESCRIPTION: The HTML layout used to demonstrate the AnimeJS round utility. It contains two columns showing the difference between normal animation and animation with rounded values.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiesround.md#2025-04-18_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"x-large spaced-evenly row\">\n  <div class=\"col\">\n    <div class=\"clock normal\"></div>\n    <div class=\"label\">normal</div>\n  </div>\n  <div class=\"col\">\n    <div class=\"clock rounded\"></div>\n    <div class=\"label\">rounded (.1)</div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Import Anime.js modules\nDESCRIPTION: This code imports necessary modules from the animejs library, including `engine`, `animate`, and `utils`. These modules are used to control the animation engine, create animations, and manipulate DOM elements respectively.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationengineengine-parameterstimeunit-seconds-milliseconds.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { engine, animate, utils } from 'animejs';\n```\n\n----------------------------------------\n\nTITLE: Complex Timeline Synchronization with WAAPI\nDESCRIPTION: Shows advanced timeline synchronization using WAAPI animations and multiple timeline compositions with various animations and timing offsets.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-methodssync.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTimeline, animate, waapi } from 'animejs';\n\nconst circleAnimation = waapi.animate('.circle', {\n  x: '15rem'\n});\n\nconst tlA = createTimeline()\n.sync(circleAnimation)\n.add('.triangle', {\n  x: '15rem',\n  duration: 2000,\n})\n.add('.square', {\n  x: '15rem',\n});\n\nconst tlB = createTimeline({ defaults: { duration: 2000 } })\n.add(['.triangle', '.square'], {\n  rotate: 360,\n}, 0)\n.add('.circle', {\n  scale: [1, 1.5, 1],\n}, 0);\n\nconst tlMain = createTimeline()\n.sync(tlA)\n.sync(tlB, '-=2000');\n```\n\n----------------------------------------\n\nTITLE: SVG Structure for Shape Morphing\nDESCRIPTION: Defines the SVG markup structure with two polygons that will be used in the morphing animation. The second polygon is initially set to opacity 0.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationsvgmorphto.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<svg viewBox=\"0 0 304 112\">\n  <g stroke-width=\"2\" stroke=\"currentColor\" stroke-linejoin=\"round\" fill=\"none\" fill-rule=\"evenodd\">\n    <polygon id=\"path-1\" points=\"152,4 170,38 204,56 170,74 152,108 134,74 100,56 134,38\"></polygon>\n    <polygon style=\"opacity: 0\" id=\"path-2\" points=\"152,4 170,38 204,56 170,74 152,108 134,74 100,56 134,38\"></polygon>\n  </g>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Timer Control UI\nDESCRIPTION: This HTML snippet provides the structure for the timer control UI. It includes a display for the current time, a range input for seeking, and a play/pause button. This structure is designed to work with the JavaScript code that controls the AnimeJS timer.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-methodsseek.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large centered row\">\n  <div class=\"half col\">\n    <pre class=\"large log row\">\n      <span class=\"label\">current time</span>\n      <span class=\"time value lcd\">0</span>\n    </pre>\n  </div>\n</div>\n<div class=\"medium centered row\">\n  <fieldset class=\"controls\">\n    <input type=\"range\" min=0 max=2000 value=0 class=\"range\" />\n    <button style=\"flex: 0.25;\" class=\"button play-pause\">Play</button>\n  </fieldset>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Anime.js Timeline Demo\nDESCRIPTION: This HTML snippet shows the structure used for demonstrating the Anime.js timeline play method. It includes containers for animated shapes (triangle, square, circle) and a control button to trigger the animation playback.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-methodsplay.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large row\">\n  <div class=\"medium pyramid\">\n    <div class=\"triangle\"></div>\n    <div class=\"square\"></div>\n    <div class=\"circle\"></div>\n  </div>\n</div>\n<div class=\"medium row\">\n  <fieldset class=\"controls\">\n    <button class=\"button play\">Play</button>\n  </fieldset>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for AnimeJS Timeline Refresh Demo\nDESCRIPTION: This HTML snippet defines the structure for demonstrating the AnimeJS timeline refresh method. It includes container divs for the animated elements (triangle, square, circle) and a button that triggers the refresh and restart of the animation timeline.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-methodsrefresh.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large row\">\n  <div class=\"medium pyramid\">\n    <div class=\"triangle\"></div>\n    <div class=\"square\"></div>\n    <div class=\"circle\"></div>\n  </div>\n</div>\n<div class=\"medium row\">\n  <fieldset class=\"controls\">\n    <button class=\"button refresh\">Refresh & Restart</button>\n  </fieldset>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Anime.js Animation Demo\nDESCRIPTION: This HTML snippet provides the structure for the animation demo. It includes a container for the animated circle and a label instructing users to move their cursor around.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimatableanimatable-methodssetters.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large centered row\">\n  <div class=\"circle\"></div>\n</div>\n<div class=\"medium centered row\">\n  <span class=\"label\">Move cursor around</span>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Anime.js Animation\nDESCRIPTION: This HTML snippet provides the basic structure for displaying the anime.js animation. It includes a `div` with the class `iframe-content resizable` which likely controls the visual presentation within an iframe, and contains the animated element which is a `div` with class `square` inside a centered row and column structure.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscopescope-parametersmediaqueries.md#2025-04-18_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"iframe-content resizable\">\n  <div class=\"large centered row\">\n    <div class=\"col\">\n      <div class=\"square\"></div>\n    </div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for AnimeJS Animation\nDESCRIPTION: This HTML snippet defines the structure for the elements that will be animated in the AnimeJS timeline. It includes a pyramid shape with a triangle, square, and circle.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-methodslabel.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large row\">\n  <div class=\"medium pyramid\">\n    <div class=\"triangle\"></div>\n    <div class=\"square\"></div>\n    <div class=\"circle\"></div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting Default onLoop Callback in AnimateJS\nDESCRIPTION: This snippet demonstrates how to set a default onLoop callback function globally for all animations using the engine.defaults object in AnimateJS.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-callbacksonloop.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { engine } from 'animejs';\nengine.defaults.onLoop = self => console.log(self.id);\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Timeline Animation Demo\nDESCRIPTION: HTML markup structure showing the elements being animated and the log display for the timeline began state.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-callbacksonbegin.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large row\">\n  <div class=\"medium pyramid\">\n    <div class=\"triangle\"></div>\n    <div class=\"square\"></div>\n    <div class=\"circle\"></div>\n  </div>\n  <pre class=\"large log row\">\n    <span class=\"label\">began</span>\n    <span class=\"value\">false</span>\n  </pre>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Draggable Demo\nDESCRIPTION: Defines the HTML structure required for the draggable demonstration, including a counter display and the draggable element container.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-callbacksonrelease.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large padded grid square-grid\">\n  <pre class=\"large log row\">\n    <span class=\"label\">releases</span>\n    <span class=\"value\">0</span>\n  </pre>\n  <div class=\"square draggable\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML structure for Anime.js Stagger Example\nDESCRIPTION: This HTML snippet defines the structure of the elements to be animated by the Anime.js timeline. It consists of four rows, each containing a series of divs with the class 'square'. These elements are targeted by the JavaScript code to apply the stagger animation effect.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationstaggerstagger-parametersstagger-from.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"small justified row\">\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n</div>\n<div class=\"small justified row\">\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n</div>\n<div class=\"small justified row\">\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n</div>\n<div class=\"small justified row\">\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for padStart Animation Example\nDESCRIPTION: HTML markup showing the structure for displaying the animated value that will be padded using the padStart utility function. Contains a container div with a pre element and a span with the 'value' class that will be targeted by the animation.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiespad-start.md#2025-04-18_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large row\">\n  <pre class=\"large log row\">\n    <span class=\"value lcd\">0</span>\n  </pre>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for AnimeJS Draggable Example\nDESCRIPTION: This HTML snippet provides the structure for the AnimeJS Draggable example. It includes a container with a grid, a counter display, and a draggable square element.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-callbacksonafterresize.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"iframe-content resizable\">\n  <div class=\"large padded grid square-grid\">\n    <pre class=\"large log row\">\n      <span class=\"label\">resizes</span>\n      <span class=\"value\">0</span>\n    </pre>\n    <div class=\"square draggable\"></div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Importing createDraggable Function from AnimeJS\nDESCRIPTION: Shows how to import the createDraggable function from the AnimeJS library. This function is used to add draggable capabilities to DOM elements.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggable.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createDraggable } from 'animejs';\n```\n\n----------------------------------------\n\nTITLE: Animating with Anime.js using reversed and alternate parameters\nDESCRIPTION: This snippet demonstrates how to use the 'reversed' and 'alternate' parameters in Anime.js to control animation direction. It animates a square element, moving it 100 pixels horizontally, with reversed direction and alternating on loop for 3 iterations.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationweb-animation-apiapi-differences-with-native-waapidirection.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nwaapi.animate('.square', {\n  x: 100,\n  reversed: true,\n  alternate: true,\n  loop: 3\n});\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Animation Target\nDESCRIPTION: Defines the HTML structure containing the target element for the animation. Includes a container div with 'large row' class and an inner square element.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationtween-parametersfrom.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large row\">\n  <div class=\"square\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listener to Button\nDESCRIPTION: This snippet adds an event listener to the button element. When the button is clicked, the `rotateLogo` function is executed, triggering the logo rotation animation. This event listener sets up the interaction between the button and the animation.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationgetting-startedusing-with-vanilla-js.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n$button.addEventListener('click', rotateLogo);\n```\n\n----------------------------------------\n\nTITLE: Scroll Container Structure - HTML\nDESCRIPTION: This snippet provides the HTML structure necessary for the scroll-based animation. It includes a container div with scroll classes, and nested divs for the scroll content and trigger areas. This structure must be present for the JavaScript animation to work properly when scrolled.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscrollscrollobserver-settingscontainer.md#2025-04-18_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"scroll-container scroll-y\">\n  <div class=\"scroll-content grid square-grid\">\n    <div class=\"scroll-section padded\">\n      <div class=\"large centered row\">\n        <div class=\"label\">scroll down</div>\n      </div>\n    </div>\n    <div class=\"scroll-section padded\">\n      <div class=\"large row\">\n        <div class=\"square\"></div>\n      </div>\n    </div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: ScrollObserver Parameters\nDESCRIPTION: Explains the parameters that can be passed to the `onScroll` function, focusing on the parameters object, which defines ScrollObserver settings, thresholds, sync modes, and callbacks.  It also specifies that the `onScroll` function returns a ScrollObserver.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscroll.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nparameters\nAn Object of ScrollObserver settings, ScrollObserver thresholds, ScrollObserver sync modes and ScrollObserver callbacks\n\nReturns\nScrollObserver\n```\n\n----------------------------------------\n\nTITLE: HTML structure for animation examples\nDESCRIPTION: HTML markup creating three rows with square elements that serve as targets for the animation examples. Each square is contained in a div with 'medium row' classes for styling.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationweb-animation-apiapi-differences-with-native-waapiiterations.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"medium row\">\n  <div class=\"square\"></div>\n</div>\n<div class=\"medium row\">\n  <div class=\"square\"></div>\n</div>\n<div class=\"medium row\">\n  <div class=\"square\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML structure for demonstrating normal vs. snapped animations\nDESCRIPTION: HTML markup for comparing normal animation with snapped animation using anime.js, featuring two clock elements with labels.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiessnap.md#2025-04-18_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"x-large spaced-evenly row\">\n  <div class=\"col\">\n    <div class=\"clock normal\"></div>\n    <div class=\"label\">normal</div>\n  </div>\n  <div class=\"col\">\n    <div class=\"clock snapped\"></div>\n    <div class=\"label\">snapped (.25)</div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Draggable Elements in Anime.js\nDESCRIPTION: This HTML snippet shows the structure for containing draggable elements. It creates a grid container with two draggable elements: a square and a circle.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-settingsreleasecontainerfriction.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large centered grid square-grid\">\n  <div class=\"square draggable\"></div>\n  <div class=\"circle draggable\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for AnimeJS Animation Demo\nDESCRIPTION: HTML structure used for demonstrating the timeline animations. It contains a pyramid of geometric shapes (triangle, square, and circle) that are targeted by the animation examples.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelineadd-animations.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large row\">\n  <div class=\"medium pyramid\">\n    <div class=\"triangle\"></div>\n    <div class=\"square\"></div>\n    <div class=\"circle\"></div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Timer Display HTML Structure\nDESCRIPTION: HTML markup for displaying timer loop count and iteration time in a two-column layout with styled containers and labels.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-callbacksonloop.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large row\">\n  <div class=\"col\">\n    <pre class=\"large log row\">\n      <span class=\"label\">loops</span>\n      <span class=\"loops value\">0</span>\n    </pre>\n  </div>\n  <div class=\"col\">\n    <pre class=\"large log row\">\n      <span class=\"label\">iteration time</span>\n      <span class=\"time value lcd\">0</span>\n    </pre>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Importing AnimeJS WAAPI adapter and utilities\nDESCRIPTION: Import statement for the WAAPI adapter and stagger utility from the AnimeJS library. These are necessary for creating animations with the WAAPI adapter and adding staggered timing to animations.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationweb-animation-apiapi-differences-with-native-waapiiterations.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { waapi, stagger } from 'animejs';\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Autoplay Demo\nDESCRIPTION: HTML markup demonstrating the structure for autoplay animation examples with circles and labels.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-playback-settingsautoplay.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"medium row\">\n  <div class=\"circle autoplay-true\"></div>\n  <div class=\"padded label\">autoplay: true</div>\n</div>\n<div class=\"medium row\">\n  <div class=\"circle autoplay-false\"></div>\n  <div class=\"padded label\">autoplay: false</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Animating a Square on Scroll with onSyncComplete Callback - JavaScript\nDESCRIPTION: This code snippet demonstrates how to animate a square element as the user scrolls, using the onSyncComplete callback to update a value indicating the number of synchronizations that have occurred. Dependencies include 'animejs' library for animations and scroll utilities.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscrollscrollobserver-callbacksonsynccomplete.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate, onScroll, utils } from 'animejs';\n\nconst [ $value ] = utils.$('.value');\n\nlet completions = 0;\n\nanimate('.square', {\n  x: '15rem',\n  rotate: '1turn',\n  ease: 'linear',\n  autoplay: onScroll({\n    container: '.scroll-container',\n    enter: 'bottom top',\n    leave: 'center bottom',\n    sync: .5,\n    debug: true,\n    onSyncComplete: () => $value.textContent = ++completions,\n  })\n});\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Anime.js Timeline Animation\nDESCRIPTION: Shows the HTML structure used to display the animated elements (triangle, square, circle) and a log display for tracking the animation time.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-playback-settingsdelay.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"large row\">\n  <div class=\"medium pyramid\">\n    <div class=\"triangle\"></div>\n    <div class=\"square\"></div>\n    <div class=\"circle\"></div>\n  </div>\n  <pre class=\"large log row\">\n    <span class=\"label\">current time</span>\n    <span class=\"time value lcd\">0</span>\n  </pre>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Loop Delay Animation\nDESCRIPTION: HTML markup required for the loop delay animation example, containing a circle element within a container.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-playback-settingsplayback-loopdelay.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"medium row\">\n  <div class=\"circle\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Importing Anime.js Engine\nDESCRIPTION: Import the engine module from animejs library to access core animation control methods. Required for managing animation engine state and performance.\nSOURCE: https://github.com/Ogyeet10/animejs-docs/blob/master/documentationengineengine-methods.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { engine } from 'animejs';\n```"
  }
]