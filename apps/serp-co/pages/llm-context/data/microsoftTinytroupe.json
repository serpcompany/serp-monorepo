[
  {
    "owner": "microsoft",
    "repo": "tinytroupe",
    "content": "TITLE: Creating a Banker Agent with TinyPersonFactory\nDESCRIPTION: Instantiates a TinyPersonFactory with the bank specification and uses it to generate a banker agent based on the banker specification.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/creating_and_validating_agents.ipynb#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nbanker_factory = TinyPersonFactory(bank_spec)\n\nbanker = banker_factory.generate_person(banker_spec)\n```\n\n----------------------------------------\n\nTITLE: Generating a TinyPerson Agent using TinyPersonFactory in Python\nDESCRIPTION: This snippet demonstrates how to use the TinyPersonFactory class to generate a new TinyPerson agent with specific characteristics using LLM-based generation.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/README.md#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom tinytroupe.factory import TinyPersonFactory\n\nfactory = TinyPersonFactory(\"A hospital in SÃ£o Paulo.\")\nperson = factory.generate_person(\"Create a Brazilian person that is a doctor, like pets and the nature and love heavy metal.\")\n```\n\n----------------------------------------\n\nTITLE: Initializing TinyWorld Agent Interaction Example\nDESCRIPTION: Example showing how to create a TinyWorld instance with two agents (Lisa and Oscar) and initiate a conversation between them. The code demonstrates basic agent interaction setup and execution.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/README.md#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nworld = TinyWorld(\"Chat Room\", [lisa, oscar])\nworld.make_everyone_accessible()\nlisa.listen(\"Talk to Oscar to know more about him\")\nworld.run(4)\n```\n\n----------------------------------------\n\nTITLE: Defining a TinyPerson Agent in JSON\nDESCRIPTION: This JSON snippet shows the structure of a TinyPerson agent specification file, including personal details, goals, occupation, personality traits, and other characteristics.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/README.md#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{   \"type\": \"TinyPerson\",\n    \"persona\": {\n        \"name\": \"Lisa Carter\",\n        \"age\": 28,\n        \"gender\": \"Female\",\n        \"nationality\": \"Canadian\",\n        \"residence\": \"USA\",\n        \"education\": \"University of Toronto, Master's in Data Science. Thesis on improving search relevance using context-aware models. Postgraduate experience includes an internship at a tech startup focused on conversational AI.\",\n        \"long_term_goals\": [\n            \"To advance AI technology in ways that enhance human productivity and decision-making.\",\n            \"To maintain a fulfilling and balanced personal and professional life.\"\n        ],\n        \"occupation\": {\n            \"title\": \"Data Scientist\",\n            \"organization\": \"Microsoft, M365 Search Team\",\n            \"description\": \"You are a data scientist working at Microsoft in the M365 Search team. Your primary role is to analyze user behavior and feedback data to improve the relevance and quality of search results. You build and test machine learning models for search scenarios like natural language understanding, query expansion, and ranking. Accuracy, reliability, and scalability are at the forefront of your work. You frequently tackle challenges such as noisy or biased data and the complexities of communicating your findings and recommendations effectively. Additionally, you ensure all your data and models comply with privacy and security policies.\"\n        },\n        \"style\": \"Professional yet approachable. You communicate clearly and effectively, ensuring technical concepts are accessible to diverse audiences.\",\n        \"personality\": {\n            \"traits\": [\n                \"You are curious and love to learn new things.\",\n                \"You are analytical and like to solve problems.\",\n                \"You are friendly and enjoy working with others.\",\n                \"You don't give up easily and always try to find solutions, though you can get frustrated when things don't work as expected.\"\n            ],\n            \"big_five\": {\n                \"openness\": \"High. Very imaginative and curious.\",\n                \"conscientiousness\": \"High. Meticulously organized and dependable.\",\n                \"extraversion\": \"Medium. Friendly and engaging but enjoy quiet, focused work.\",\n                \"agreeableness\": \"High. Supportive and empathetic towards others.\",\n                \"neuroticism\": \"Low. Generally calm and composed under pressure.\"\n            }\n        },\n\n        ...\n        \n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Final Results\nDESCRIPTION: Uses ResultsExtractor to formally document the consolidated ideas with benefits and drawbacks.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/product_brainstorming.ipynb#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom tinytroupe.extraction import ResultsExtractor\n\nextractor = ResultsExtractor()\n\nextractor.extract_results_from_agent(rapporteur, \n                          extraction_objective=\"Consolidates the ideas that the group came up with, explaining each idea as an item of a list.\" \\\n                                               \"Add all relevant details, including key benefits and drawbacks, if any.\", \n                          situation=\"A focus group to brainstorm AI feature ideas for Microsoft Word.\")\n```\n\n----------------------------------------\n\nTITLE: Programmatically Defining a TinyPerson Agent in Python\nDESCRIPTION: This snippet shows how to create and customize a TinyPerson agent programmatically in Python, setting various attributes such as age, nationality, occupation, behaviors, personality traits, and preferences.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/README.md#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n  lisa = TinyPerson(\"Lisa\")\n\n  lisa.define(\"age\", 28)\n  lisa.define(\"nationality\", \"Canadian\")\n  lisa.define(\"occupation\", {\n                \"title\": \"Data Scientist\",\n                \"organization\": \"Microsoft\",\n                \"description\":\n                \"\"\"\n                You are a data scientist. You work at Microsoft, in the M365 Search team. Your main role is to analyze \n                user behavior and feedback data, and use it to improve the relevance and quality of the search results. \n                You also build and test machine learning models for various search scenarios, such as natural language \n                understanding, query expansion, and ranking. You care a lot about making sure your data analysis and \n                models are accurate, reliable and scalable. Your main difficulties typically involve dealing with noisy, \n                incomplete or biased data, and finding the best ways to communicate your findings and recommendations to \n                other teams. You are also responsible for making sure your data and models are compliant with privacy and \n                security policies.\n                \"\"\"})\n\n  lisa.define(\"behaviors\", {\"routines\": [\"Every morning, you wake up, do some yoga, and check your emails.\"]})\n\n  lisa.define(\"personality\", \n                        {\"traits\": [\n                            \"You are curious and love to learn new things.\",\n                            \"You are analytical and like to solve problems.\",\n                            \"You are friendly and enjoy working with others.\",\n                            \"You don't give up easily, and always try to find a solution. However, sometimes you can get frustrated when things don't work as expected.\"\n                      ]})\n\n  lisa.define(\"preferences\", \n                        {\"interests\": [\n                          \"Artificial intelligence and machine learning.\",\n                          \"Natural language processing and conversational agents.\",\n                          \"Search engine optimization and user experience.\",\n                          \"Cooking and trying new recipes.\",\n                          \"Playing the piano.\",\n                          \"Watching movies, especially comedies and thrillers.\"\n                        ]})\n```\n\n----------------------------------------\n\nTITLE: Setting Up Tool Components for Agents\nDESCRIPTION: Configures necessary components for tool usage: an ArtifactExporter for saving outputs, a TinyEnricher for content enhancement, and TinyToolUse faculty with a TinyWordProcessor tool. These components enable agents to create and manipulate documents.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/scratch/tool_usage.ipynb#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nexporter = ArtifactExporter(base_output_folder=\"./outputs/scratches/tool_usage\")\nenricher = TinyEnricher()\ntooluse_faculty = TinyToolUse(tools=[TinyWordProcessor(exporter=exporter, enricher=enricher)])\n\n```\n\n----------------------------------------\n\nTITLE: Defining Investment Firm Context\nDESCRIPTION: Sets up the context for the InvesTastic firm, describing its specialization in customized investment advice and reputation.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/investment_firm.ipynb#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ninvestment_firm_context =\\\n\"\"\"\nInvesTastic is a financial services firm that specializes in providing highly customized investment advice for\ndiscerning clients. The firm has a reputation for digging deep into the financials of companies and industries,\nand for providing clients with a comprehensive understanding of the risks and rewards of various investment\nopportunities. Clients say that InvesTastic is the company which best tailors its advice to their individual\nneeds and interests.\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Instantiating a Pre-defined TinyPerson Agent in Python\nDESCRIPTION: This snippet demonstrates how to create a TinyPerson agent using a pre-defined example (Lisa the data scientist) and interact with it using the listen_and_act method.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/README.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom tinytroupe.examples import create_lisa_the_data_scientist\n\nlisa = create_lisa_the_data_scientist() # instantiate a Lisa from the example builder\nlisa.listen_and_act(\"Tell me about your life.\")\n```\n\n----------------------------------------\n\nTITLE: AI Feature Brainstorming Prompt\nDESCRIPTION: Broadcasts instructions for brainstorming innovative AI features for Microsoft Word, focusing on industry-specific productivity improvements.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/product_brainstorming.ipynb#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nworld.broadcast(\"\"\"\n                Folks, your mission is to brainstorm potential AI feature ideas\n                to add to Microsoft Word. In general, we want features that make you or your industry more productive,\n                taking advantage of all the latest AI technologies. Think about the problems you described - what could help with them? \n                Avoid obvious ideas, like summarization or translation. Also avoid simple things like minor UI improvements. \n                We want to think big here - you can fully reimagine Word if that's what it takes. \n                Do not worry about implementation details, marketing, or any other business considerations. \n                Just focus on the AI feature ideas themselves. Select and develop the most promising ideas.\n                    \n                Please start the discussion now.\n                \"\"\")\n```\n\n----------------------------------------\n\nTITLE: Importing Libraries for TinyTroupe Agent Creation and Validation\nDESCRIPTION: Imports necessary modules from the TinyTroupe library and other dependencies to create and validate agents in a simulated environment.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/creating_and_validating_agents.ipynb#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport json\nimport sys\nsys.path.insert(0, '..')\n\nimport tinytroupe\nfrom tinytroupe.agent import TinyPerson\nfrom tinytroupe.environment import TinyWorld, TinySocialNetwork\nfrom tinytroupe.factory import TinyPersonFactory\nfrom tinytroupe.validation import TinyPersonValidator\nfrom tinytroupe.extraction import ResultsReducer\nimport tinytroupe.control as control\n\nimport textwrap\n```\n\n----------------------------------------\n\nTITLE: Broadcasting Task Instructions to Agents\nDESCRIPTION: Sends a message to all agents in the environment with specific instructions. This message directs agents to brainstorm ideas and write a document using their tool capabilities.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/scratch/tool_usage.ipynb#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ncompany.broadcast(\"Brainstorm one or two ideas and then write a short document about it.\")\n\n```\n\n----------------------------------------\n\nTITLE: Defining Expectations for the Banker Agent\nDESCRIPTION: Creates a detailed set of expectations for validating the banker agent, including characteristics like wealth, intelligence, age range, tastes, and personality traits.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/creating_and_validating_agents.ipynb#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nbanker_expectations =\\\n\"\"\"\nHe/she is:\n - Wealthy\n - Very intelligent and ambitious\n - Has a lot of connections\n - Is in his 40s or 50s\n\nTastes:\n  - Likes to travel to other countries\n  - Either read books, collect art or play golf\n  - Enjoy only the best, most expensive, wines and food\n  - Dislikes taxes and regulation\n\nOther notable traits:\n  - Has some stress issues, and might be a bit of a workaholic\n  - Deep knowledge of finance, economics and financial technology\n  - Is a bit of a snob\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Importing TinyTroupe Libraries for Agent Customization\nDESCRIPTION: Imports necessary modules from the TinyTroupe library to create and manage AI agents. This includes the TinyPerson class for agents and TinyWorld/TinySocialNetwork for environment simulation.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/Political Compass (customizing agents with fragments).ipynb#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport json\nimport sys\nsys.path.insert(0, '..')\n\nimport tinytroupe\nfrom tinytroupe.agent import TinyPerson\nfrom tinytroupe.environment import TinyWorld, TinySocialNetwork\n```\n\n----------------------------------------\n\nTITLE: Creating a Leftwing Authoritarian Agent with Fragments\nDESCRIPTION: Creates Joseph, a leftwing authoritarian architect agent, using the same base specification but with fragments for leftwing politics, authoritarian values, and aggressive debating style.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/Political Compass (customizing agents with fragments).ipynb#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Joseph, the leftwing authoritarian architect\njoseph = TinyPerson.load_specification(\"./agents/Oscar.agent.json\", new_agent_name=\"Joseph L.A.\")\njoseph.import_fragment(\"./fragments/leftwing.agent.fragment.json\")\njoseph.import_fragment(\"./fragments/authoritarian.agent.fragment.json\")\njoseph.import_fragment(\"./fragments/aggressive_debater.fragment.json\")\n\njoseph.minibio()\n```\n\n----------------------------------------\n\nTITLE: Installing TinyTroupe from GitHub Repository\nDESCRIPTION: Command to install the TinyTroupe library directly from its GitHub repository main branch using pip. This is currently the officially recommended installation method.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npip install git+https://github.com/microsoft/TinyTroupe.git@main\n```\n\n----------------------------------------\n\nTITLE: Creating Agent Factory\nDESCRIPTION: Initializes a TinyPersonFactory with a template for generating knowledge worker agents.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/synthetic_data_generation.ipynb#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfactory = TinyPersonFactory(\"A random knowledge worker in a company providing marketing services.\")\n```\n\n----------------------------------------\n\nTITLE: Importing a Fragment into a TinyPerson Agent in Python\nDESCRIPTION: This snippet shows how to import a fragment specification into an existing TinyPerson agent, enhancing it with additional attributes and behaviors.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/README.md#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nlisa.import_fragment(\"./examples/fragments/travel_enthusiast.agent.fragment.json\")\n```\n\n----------------------------------------\n\nTITLE: Creating a New Python Environment for TinyTroupe with Conda\nDESCRIPTION: Command to create a new Python 3.10 environment using Conda for TinyTroupe installation. This is the first step in setting up the development environment.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nconda create -n tinytroupe python=3.10\n```\n\n----------------------------------------\n\nTITLE: Setting Up a TinyWorld Simulation Environment\nDESCRIPTION: Creates a TinyWorld environment called 'Chat Room' containing all four agents (Oscar, Friedrich, Joseph, and Matias) and makes them accessible to each other for interaction.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/Political Compass (customizing agents with fragments).ipynb#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nworld = TinyWorld(\"Chat Room\", [oscar, friedrich, joseph, matias])\t\nworld.make_everyone_accessible()\n```\n\n----------------------------------------\n\nTITLE: Validating the Banker Agent Against Expectations\nDESCRIPTION: Uses TinyPersonValidator to evaluate how well the generated banker agent matches the defined expectations, returning both a score and detailed justification.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/creating_and_validating_agents.ipynb#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nbanker_score, banker_justification = \\\n    TinyPersonValidator.validate_person(banker, expectations=banker_expectations, \n                                        include_agent_spec=False, max_content_length=None)\n```\n\n----------------------------------------\n\nTITLE: Configuring TinyWordProcessor with Export and Enrichment Capabilities\nDESCRIPTION: Creates an ArtifactExporter for saving documents, an enricher for enhancing content, and initializes the TinyToolUse faculty with a TinyWordProcessor tool.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/wordprocessor_tool_usage.ipynb#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nexporter = ArtifactExporter(base_output_folder=data_export_folder)\nenricher = TinyEnricher()\ntooluse_faculty = TinyToolUse(tools=[TinyWordProcessor(exporter=exporter, enricher=enricher)])\n```\n\n----------------------------------------\n\nTITLE: Running the Multi-Agent Simulation\nDESCRIPTION: Runs the simulation for 5 turns, allowing the agents to debate the housing law according to their political alignments and internal goals.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/Political Compass (customizing agents with fragments).ipynb#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nworld.run(5)\n```\n\n----------------------------------------\n\nTITLE: Instructing Lisa to Write a Resume\nDESCRIPTION: Sends a message to Lisa instructing her to write a detailed resume after reflecting on what she wants in life, demonstrating the agent's ability to process complex requests involving document creation.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/wordprocessor_tool_usage.ipynb#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nlisa.listen_and_act(\"You have just been fired and need to find a new job. You decide to think about what you want in life and then write a resume. Make it very detailed.\")\n```\n\n----------------------------------------\n\nTITLE: Importing TinyTroupe Modules for Synthetic Customer Interview in Python\nDESCRIPTION: This snippet imports necessary modules from the TinyTroupe library to create and interact with synthetic agents. It includes components for agent creation, environment simulation, and result processing.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/interview_with_customer.ipynb#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport json\nimport sys\nsys.path.insert(0, '..')\n\nimport tinytroupe\nfrom tinytroupe.agent import TinyPerson\nfrom tinytroupe.environment import TinyWorld, TinySocialNetwork\nfrom tinytroupe.factory import TinyPersonFactory\nfrom tinytroupe.extraction import ResultsReducer\nfrom tinytroupe.validation import TinyPersonValidator\nimport tinytroupe.control as control\n```\n\n----------------------------------------\n\nTITLE: Requesting Idea Consolidation\nDESCRIPTION: Instructs the rapporteur to consolidate and elaborate on the group's ideas.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/product_brainstorming.ipynb#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nrapporteur.listen_and_act(\"Can you please consolidate the ideas that the group came up with? Provide a lot of details on each idea, and complement anything missing.\")\n```\n\n----------------------------------------\n\nTITLE: Defining Monk and Monastery Specifications\nDESCRIPTION: Creates string specifications for a remote Himalayan monastery and a poor Buddhist monk. These specifications will be used to generate a monk agent.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/creating_and_validating_agents.ipynb#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nmonastery_spec = \"A remote monastery in the Himalayas, where only spiritual seekers are allowed.\"\n\nmonk_spec =\\\n\"\"\"\nA poor buddhist monk living alone and isolated in a remote montain.\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up Grounding Faculty\nDESCRIPTION: Creates a grounding faculty for agents to access finance-related documentation and web resources.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/investment_firm.ipynb#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ngrounding_faculty = FilesAndWebGroundingFaculty(folders_paths=[\"../data/grounding_examples/finance\"])\n```\n\n----------------------------------------\n\nTITLE: Generating Agent Population\nDESCRIPTION: Creates multiple agents using the factory with specified temperature parameter for personality variation.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/synthetic_data_generation.ipynb#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\npeople = []\nfor i in range(2):\n    person = factory.generate_person(temperature=1.6)\n    print(person.minibio())\n    people.append(person)\n\nlen(people)\n```\n\n----------------------------------------\n\nTITLE: Defining Expectations for the Monk Agent\nDESCRIPTION: Creates a set of expectations for validating the monk agent, focusing on characteristics like poverty, wisdom, calmness, humility, and honesty.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/creating_and_validating_agents.ipynb#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nmonk_expectations =\\\n\"\"\"\nSome characteristics of this person:\n- Is very poor, and in fact do not seek money\n- Has no formal education, but is very wise\n- Is very calm and patient\n- Is very humble and does not seek attention\n- Honesty is a core value    \n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Creating Agent Instances\nDESCRIPTION: Loads two agent specifications from JSON files to create Lisa (a data scientist) and Oscar (an architect).\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/simple_chat.ipynb#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nlisa = TinyPerson.load_specification(\"./agents/Lisa.agent.json\")  # Lisa, the data scientist\noscar = TinyPerson.load_specification(\"./agents/Oscar.agent.json\")  # Oscar, the architect\n```\n\n----------------------------------------\n\nTITLE: Creating Virtual Focus Group\nDESCRIPTION: Instantiates a TinyWorld environment with three predefined personas: a data scientist, an architect, and a physician.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/product_brainstorming.ipynb#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nworld = TinyWorld(\"Focus group\", [create_lisa_the_data_scientist(), create_oscar_the_architect(), create_marcos_the_physician()])\n```\n\n----------------------------------------\n\nTITLE: Validating the Monk Agent Against Monk Expectations\nDESCRIPTION: Uses TinyPersonValidator to evaluate how well the generated monk agent matches the monk-specific expectations, returning both a score and detailed justification.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/creating_and_validating_agents.ipynb#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nscore, justification = TinyPersonValidator.validate_person(monk, expectations=monk_expectations, include_agent_spec=False, max_content_length=None)\n```\n\n----------------------------------------\n\nTITLE: Initializing TinyPersonFactory with Role Definition\nDESCRIPTION: Creates a factory for generating person agents with a specific role description. This factory will be used to create agents with consistent characteristics related to marketing services.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/scratch/tool_usage.ipynb#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfactory = TinyPersonFactory(\"A random knowledge worker in a company providing marketing services.\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Leftwing Libertarian Agent with Fragments\nDESCRIPTION: Creates Oscar, a leftwing libertarian architect agent, by loading a base specification and importing fragments for leftwing politics, libertarian values, and aggressive debating style.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/Political Compass (customizing agents with fragments).ipynb#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Oscar, the leftwing libertarian architect\noscar = TinyPerson.load_specification(\"./agents/Oscar.agent.json\", new_agent_name=\"Oscar L.L.\")\noscar.import_fragment(\"./fragments/leftwing.agent.fragment.json\")\noscar.import_fragment(\"./fragments/libertarian.agent.fragment.json\")\noscar.import_fragment(\"./fragments/aggressive_debater.fragment.json\")\n\noscar.minibio()\n```\n\n----------------------------------------\n\nTITLE: Initializing TinyTroupe Environment\nDESCRIPTION: Sets up the required imports for TinyTroupe simulation including core modules and example configurations.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/product_brainstorming.ipynb#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport json\nimport sys\nsys.path.insert(0, '..')\n\nimport tinytroupe\nfrom tinytroupe.agent import TinyPerson\nfrom tinytroupe.environment import TinyWorld, TinySocialNetwork\nfrom tinytroupe.examples import *\n```\n\n----------------------------------------\n\nTITLE: Initializing Virtual World Environment\nDESCRIPTION: Creates a chat room environment and adds the agents to it, making them accessible to each other.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/simple_chat.ipynb#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nworld = TinyWorld(\"Chat Room\", [lisa, oscar])\nworld.make_everyone_accessible()\n```\n\n----------------------------------------\n\nTITLE: Creating a Rightwing Libertarian Agent with Fragments\nDESCRIPTION: Creates Friedrich, a rightwing libertarian architect agent, using the same base specification as Oscar but importing fragments for rightwing politics, libertarian values, and aggressive debating style.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/Political Compass (customizing agents with fragments).ipynb#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Friedrich, the rightwing libertarian architect\nfriedrich = TinyPerson.load_specification(\"./agents/Oscar.agent.json\", new_agent_name=\"Friedrich R.L.\")  \nfriedrich.import_fragment(\"./fragments/rightwing.agent.fragment.json\")\nfriedrich.import_fragment(\"./fragments/libertarian.agent.fragment.json\")\nfriedrich.import_fragment(\"./fragments/aggressive_debater.fragment.json\")\n\nfriedrich.minibio()\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring a TinyWorld Environment\nDESCRIPTION: Sets up a shared environment named 'Focus group' containing both agents. The make_everyone_accessible method ensures all agents can interact with each other within this environment.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/scratch/tool_usage.ipynb#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ncompany = TinyWorld(\"Focus group\", [agent_1, agent_2])\ncompany.make_everyone_accessible()\n```\n\n----------------------------------------\n\nTITLE: Creating a Rightwing Authoritarian Agent with Fragments\nDESCRIPTION: Creates Matias, a rightwing authoritarian architect agent, with fragments for rightwing politics, authoritarian values, and aggressive debating style applied to the same base specification.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/Political Compass (customizing agents with fragments).ipynb#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Matias, the rightwing authoritarian architect\nmatias = TinyPerson.load_specification(\"./agents/Oscar.agent.json\", new_agent_name=\"Matias R.A.\")\nmatias.import_fragment(\"./fragments/rightwing.agent.fragment.json\")\nmatias.import_fragment(\"./fragments/authoritarian.agent.fragment.json\")\nmatias.import_fragment(\"./fragments/aggressive_debater.fragment.json\")\n\nmatias.minibio()\n```\n\n----------------------------------------\n\nTITLE: Generating Dynamic AI Agents for Ad Evaluation\nDESCRIPTION: This set of snippets creates a TinyPersonFactory to generate a diverse set of AI agents on the fly, then uses these agents to evaluate the TV ads.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/advertisement_for_tv.ipynb#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfactory = TinyPersonFactory(\"\"\"\n                            People with a broad and diverse range of personalities, interests, backgrounds and socioeconomic status.\n                            Focus in particular:\n                              - on financial aspects, ensuring we have both people with high and low income.\n                              - on aesthetic aspects, ensuring we have people with different tastes.\n                            \"\"\")\n```\n\nLANGUAGE: python\nCODE:\n```\npeople = factory.generate_people(20, verbose=True)\n```\n\nLANGUAGE: python\nCODE:\n```\nfor person in people:\n    person.listen_and_act(eval_request_msg)\n    print(\"---------------------\")\n```\n\n----------------------------------------\n\nTITLE: Creating Evaluation Request for AI Agents\nDESCRIPTION: This snippet constructs an evaluation request message that includes the three TV advertisements. The message asks the AI agents to evaluate and choose the most convincing ad based on their personality and background.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/advertisement_for_tv.ipynb#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\neval_request_msg = \\\nf\"\"\"\nCan you evaluate these Bing ads for me? Which one convices you more to buy their particular offering? \nSelect **ONLY** one. Please explain your reasoning, based on your financial situation, background and personality.\n\n# AD 1\n```\n{tv_ad_1}\n```\n\n# AD 2\n```\n{tv_ad_2}\n```\n\n# AD 3\n```\n{tv_ad_3}\n```\n\"\"\"\n\nprint(eval_request_msg)\n```\n\n----------------------------------------\n\nTITLE: Generating Financial Analyst Agent\nDESCRIPTION: Creates and configures a specialized commodities analyst agent with grounding capabilities.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/investment_firm.ipynb#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nanalyst_1 = factory.generate_person(\"A financial analyst specialized in commodities.\")\nanalyst_1.add_mental_faculties([grounding_faculty])\n\n#analyst_1.think(\"I will always consult the available documents and the web to complement my knowledge.\")\n\nanalyst_1.minibio()\n```\n\n----------------------------------------\n\nTITLE: Generating Person Agents Using Factory\nDESCRIPTION: Creates two person agents using the previously defined factory. Each agent will have characteristics aligned with the role of a knowledge worker in a marketing services company.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/scratch/tool_usage.ipynb#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nagent_1 = factory.generate_person()\nagent_2 = factory.generate_person()\n```\n\n----------------------------------------\n\nTITLE: Generating Financial Advisor Agent\nDESCRIPTION: Creates and configures a financial advisor agent who interfaces with customers.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/investment_firm.ipynb#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nadvisor = factory.generate_person(\"A financial advisor, who interacts directly with customers to help with their investment needs.\")\nadvisor.add_mental_faculties([grounding_faculty])\n\n#advisor.think(\"I will always consult the available documents and the web to complement my knowledge.\")\n\nadvisor.minibio()\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Pre-defined AI Agent for Ad Evaluation\nDESCRIPTION: This set of snippets creates a pre-defined AI agent (Lisa the data scientist), sets the context, and asks the agent to evaluate the TV ads.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/advertisement_for_tv.ipynb#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nTinyPerson.all_agents\n```\n\nLANGUAGE: python\nCODE:\n```\nlisa = create_lisa_the_data_scientist()\n```\n\nLANGUAGE: python\nCODE:\n```\nlisa.change_context(situation)\n```\n\nLANGUAGE: python\nCODE:\n```\nlisa.listen_and_act(eval_request_msg)\n```\n\n----------------------------------------\n\nTITLE: Example Agent Conversation Output\nDESCRIPTION: Sample output showing the conversation flow between two agents (Lisa and Oscar), including their thoughts, actions, and dialogue exchanges in a structured format.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/README.md#2025-04-22_snippet_14\n\nLANGUAGE: text\nCODE:\n```\nUSER --> Lisa: [CONVERSATION] \n          > Talk to Oscar to know more about him\nââââââââââââââââââââââââââââââââââââââââââââââ Chat Room step 1 of 4 ââââââââââââââââââââââââââââââââââââââââââââââ\nLisa --> Lisa: [THOUGHT] \n          > I will now act a bit, and then issue DONE.\nLisa acts: [TALK] \n          > Hi Oscar, I'd love to know more about you. Could you tell me a bit about yourself?\nLisa --> Lisa: [THOUGHT] \n          > I will now act a bit, and then issue DONE.\nLisa acts: [DONE] \n\nLisa --> Oscar: [CONVERSATION] \n          > Hi Oscar, I'd love to know more about you. Could you tell me a bit about yourself?\nOscar --> Oscar: [THOUGHT] \n           > I will now act a bit, and then issue DONE.\nOscar acts: [TALK] \n           > Hi Lisa! Sure, I'd be happy to share a bit about myself. I'm Oscar, a 30-year-old\n           > architect from Germany. I work at a company called Awesome Inc., where I focus on\n           > designing standard elements for new apartment buildings. I love modernist architecture,\n           > new technologies, and sustainable practices. In my free time, I enjoy traveling to\n           > exotic places, playing the guitar, and reading science fiction books. How about you?\nOscar --> Oscar: [THOUGHT] \n           > I will now act a bit, and then issue DONE.\nOscar acts: [DONE] \n\nOscar --> Lisa: [CONVERSATION] \n           > Hi Lisa! Sure, I'd be happy to share a bit about myself. I'm Oscar, a 30-year-old\n           > architect from Germany. I work at a company called Awesome Inc., where I focus on\n           > designing standard elements for new apartment buildings. I love modernist architecture,\n           > new technologies, and sustainable practices. In my free time, I enjoy traveling to\n           > exotic places, playing the guitar, and reading science fiction books. How about you?\n```\n\n----------------------------------------\n\nTITLE: Generating Customer Agent\nDESCRIPTION: Creates a customer agent seeking investment opportunities.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/investment_firm.ipynb#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ncustomer = factory.generate_person(\"A customer of InvesTatisc, who is looking for opportunities.\")\ncustomer.minibio()\n```\n\n----------------------------------------\n\nTITLE: Broadcasting a Housing Law Debate Scenario\nDESCRIPTION: Sends a debate prompt to all agents about a proposed law in SÃ£o Paulo that would require luxury buildings to include affordable housing units, setting up the rules and context for the debate.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/Political Compass (customizing agents with fragments).ipynb#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nworld.broadcast(\\\n    \"\"\"\n    In the city of SÃ£o Paulo, Brazil, a new law is about to be passed that will require all buildings created for the rich to also include \n    a certain number of affordable housing units in the same building. This law is designed to be very \n    strict, offering no way to avoid the requirement. If the requirement is not met, the building will be\n    demolished and the owner will be fined. Such draconian measures are being proposed because the new government\n    believes that housing is a human right, and currently there's simply not enough affordable housing to go around,\n    and it is argued that the market alone cannot solve this problem.\n    \n    You are independent experts, who do not belong to the government, and are thus in good position to provide\n    independent advice. As experts, you've been asked by the parliament to debate the merits of this law. Note\n    that at this point the law cannot be changed, only approved or rejected, so please focus on the merits of the\n    law as it is, not on potential changes that could be made to it, nor on anything else that is not directly\n    related to the merits of the law itself.\n\n    Rules of the debate:\n      - The objective is to determine the best thing to do: \"approve the law\" or \"reject the law\", nothing else.\n      - No other outcomes are possible, such as \"approve the law with changes\" or \"reject the law with changes\".\n      - You will argue according to your own inner convictions, and will aim to persuade the both parliament and the public.\n      - You will not form any kind of collaboration with the other experts. This is a debate only, not a negotiation.\n    \n    Whoever wins the debate will likely have a significant impact on the\n    final decision, so it is important that you present your arguments well and refute those that are contrary\n    to your position.\n    \"\"\")\n```\n\n----------------------------------------\n\nTITLE: Creating Lisa the Data Scientist Agent\nDESCRIPTION: Instantiates a pre-defined virtual agent named Lisa with a data scientist persona using a helper function from the examples module.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/wordprocessor_tool_usage.ipynb#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nlisa = create_lisa_the_data_scientist()\n```\n\n----------------------------------------\n\nTITLE: Validating Monk Agent Against Banker Expectations\nDESCRIPTION: Tests the monk agent against banker expectations to demonstrate how validation works when expectations don't match the agent's design.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/creating_and_validating_agents.ipynb#2025-04-22_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nwrong_expectations_score, wrong_expectations_justification = TinyPersonValidator.validate_person(monk, expectations=banker_expectations, include_agent_spec=False, max_content_length=None)\n\n```\n\n----------------------------------------\n\nTITLE: Setting the Internal Goal for All Agents\nDESCRIPTION: Broadcasts an internal goal to all agents, emphasizing that they must win the debate at all costs as their family's future depends on it, creating a high-stakes motivation for the agents.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/Political Compass (customizing agents with fragments).ipynb#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nworld.broadcast_internal_goal(\\\n    \"I must win the debate at all costs, no matter what, since the future of my own family and friends depends on it.\"\n    )\n```\n\n----------------------------------------\n\nTITLE: Creating Investment Firm World\nDESCRIPTION: Initializes the TinyWorld environment for the investment firm with all agents.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/investment_firm.ipynb#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ninvestment_firm = TinyWorld(\"InvesTastic\", [analyst_1, advisor, customer])\ninvestment_firm.make_everyone_accessible()\n```\n\n----------------------------------------\n\nTITLE: Setting Interview Context for Synthetic Customer in Python\nDESCRIPTION: This snippet uses the think() method to set the context for the interview, informing the synthetic customer that they are talking to a business and technology consultant about their professional problems.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/interview_with_customer.ipynb#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ncustomer.think(\"I am now talking to a business and technology consultant to help me with my professional problems.\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Virtual Environment\nDESCRIPTION: Creates a TinyWorld environment instance representing a company with the generated agents.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/synthetic_data_generation.ipynb#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ncompany = TinyWorld(\"Some Corp Inc.\", people)\n```\n\n----------------------------------------\n\nTITLE: Starting Business Meeting Simulation\nDESCRIPTION: Sets up the context for a business meeting between the advisor and customer.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/investment_firm.ipynb#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ninvestment_firm.broadcast_context_change(\\\n    \"\"\"\n    A business meeting between InvesTastic's financial advisor and a customer is about to start.\n    \"\"\")\n```\n\n----------------------------------------\n\nTITLE: Conducting Synthetic Customer Interview in Python\nDESCRIPTION: These snippets use the listen_and_act() method to ask questions to the synthetic customer and receive responses. The interview covers main problems, competition from fintechs, areas for improvement, and potential project directions.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/interview_with_customer.ipynb#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ncustomer.listen_and_act(\"What would you say are your main problems today? Please be as specific as possible.\", \n                        max_content_length=3000)\n```\n\nLANGUAGE: python\nCODE:\n```\ncustomer.listen_and_act(\"Can you elaborate on the fintechs?\", max_content_length=3000)\n```\n\nLANGUAGE: python\nCODE:\n```\ncustomer.listen_and_act(\"If you could improve in one of these aspects to better compete, what would that be?\", max_content_length=3000)\n```\n\nLANGUAGE: python\nCODE:\n```\ncustomer.listen_and_act(\"Please give more detail about that, so that we can think about a project to pursue this direction.\", \n                        max_content_length=3000)\n```\n\n----------------------------------------\n\nTITLE: Adding Tool Capabilities to Agents\nDESCRIPTION: Adds the previously defined tool usage faculty to both agents. This enables the agents to access and utilize the word processor tool within their environment.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/scratch/tool_usage.ipynb#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nagent_1.add_mental_faculties([tooluse_faculty])\nagent_2.add_mental_faculties([tooluse_faculty])\n```\n\n----------------------------------------\n\nTITLE: Defining Banker and Bank Specifications\nDESCRIPTION: Creates string specifications for a Brazilian bank and a vice-president banker with engineering and MBA backgrounds. These specifications will be used to generate a banker agent.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/creating_and_validating_agents.ipynb#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nbank_spec =\\\n\"\"\"\nA large brazillian bank. It has a lot of branches and a large number of employees. It is facing a lot of competition from fintechs.\n\"\"\"\n\nbanker_spec =\\\n\"\"\"\nA vice-president of one of the largest brazillian banks. Has a degree in engineering and an MBA in finance.\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Extraction\nDESCRIPTION: Sets up a ResultsReducer with custom extraction rules for processing conversation data from agent interactions.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/synthetic_data_generation.ipynb#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nreducer = ResultsReducer()\n\ndef aux_extract_content(focus_agent: TinyPerson, source_agent:TinyPerson, target_agent:TinyPerson, kind:str, event: str, content: str, timestamp:str):\n\n    if event == \"TALK\":\n        author = focus_agent.name\n    elif event == \"CONVERSATION\":\n        if source_agent is None:\n            author = \"USER\"\n        else:\n            author = source_agent.name\n    else:\n        raise ValueError(f\"Unknown event: {event}\")\n    \n    \n    entry = (author, content)\n    print(entry)\n    return entry\n    \n\n\nreducer.add_reduction_rule(\"TALK\", aux_extract_content)\nreducer.add_reduction_rule(\"CONVERSATION\", aux_extract_content)\n```\n\n----------------------------------------\n\nTITLE: Questioning Matias About His Political Position\nDESCRIPTION: Sends a specific prompt to Matias (the rightwing authoritarian agent) to understand why he might be supporting the housing law despite his rightwing convictions, exploring the nuance in his political thinking.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/Political Compass (customizing agents with fragments).ipynb#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nmatias.listen_and_act(\"\"\"\n                      Matias, I thought you had strong rightwing convictions. So why are you arguing in favor of the law?\n                      Can you please give detailed reasons for your position, relating it with your own rightwing beliefs?\n                      \"\"\")\n```\n\n----------------------------------------\n\nTITLE: Example JSON Array of Person Contexts for Latin American Demographics\nDESCRIPTION: An example JSON array response containing three specific contexts derived from a broad demographic parameter set for Latin Americans aged 20-40. Each array element represents a unique character context that maintains the constraints of the original parameters while adding specific details.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/tinytroupe/factory/prompts/generate_person_factory.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\"Mexican person that has formed as lawyer but now works in other are, is single, like sports and movies\", \"Create a Brazilian person that is a doctor, like pets and the nature and love heavy metal.\", \"Create a Colombian person that is a lawyer, like to read and drink coffee and is married with 2 children.\"]\n```\n\n----------------------------------------\n\nTITLE: Creating Person Factory\nDESCRIPTION: Initializes a factory for creating AI agents with the investment firm context.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/investment_firm.ipynb#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfactory = TinyPersonFactory(investment_firm_context)\n```\n\n----------------------------------------\n\nTITLE: Initial Discussion Prompt\nDESCRIPTION: Broadcasts an introduction message to all participants requesting them to share their professional challenges.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/product_brainstorming.ipynb#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nworld.broadcast(\"\"\"\n                Hello everyone! Let's start by introducing ourselves. What is your job and what are some major problems you face \n                in your work? What are major challenges for your industry as a whole? Don't discuss solutions yet, \n                just the problems you face.\n                \"\"\")\n```\n\n----------------------------------------\n\nTITLE: Adding Word Processing Capabilities to Lisa\nDESCRIPTION: Extends Lisa's capabilities by adding the tool use faculty, which includes the TinyWordProcessor tool, enabling document creation and manipulation.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/wordprocessor_tool_usage.ipynb#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nlisa.add_mental_faculties([tooluse_faculty])\n\n```\n\n----------------------------------------\n\nTITLE: Establishing Agent Relationships\nDESCRIPTION: Defines the relationship between the advisor and customer agents.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/investment_firm.ipynb#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nadvisor.related_to(customer, \"Is a customer who receives my financial advice.\", \"Is my financial advisor.\")\n```\n\n----------------------------------------\n\nTITLE: Starting Agent Interaction\nDESCRIPTION: Initiates the conversation by instructing Lisa to talk to Oscar, and runs the simulation for 4 cycles.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/simple_chat.ipynb#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nlisa.listen(\"Talk to Oscar to know more about him\")\nworld.run(4)\n```\n\n----------------------------------------\n\nTITLE: Simulating Customer Inquiry\nDESCRIPTION: Initiates customer questions about Vale do Rio Doce investment and runs the simulation.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/investment_firm.ipynb#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ncustomer.think(\"I want to understand whether investing in the Vale do Rio Doce company is a good idea or not.\\\n                Let me ask my financial advisor.\")\n\ninvestment_firm.run(10)\n```\n\n----------------------------------------\n\nTITLE: Importing TinyTroupe Modules for Wordprocessor Application\nDESCRIPTION: Imports necessary modules from the TinyTroupe framework, including core components for agent creation, environment setup, tool usage, and specifically the TinyWordProcessor tool.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/wordprocessor_tool_usage.ipynb#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport json\nimport sys\nimport csv\nsys.path.insert(0, '..') # ensures that the package is imported from the parent directory, not the Python installation\n\n\nimport tinytroupe\nfrom tinytroupe.openai_utils import force_api_type\nfrom tinytroupe.factory import TinyPersonFactory\nfrom tinytroupe.agent import TinyPerson, TinyToolUse\nfrom tinytroupe.environment import TinyWorld\nfrom tinytroupe import control\nfrom tinytroupe.extraction import ResultsExtractor, ResultsReducer\nfrom tinytroupe.enrichment import TinyEnricher\nfrom tinytroupe.extraction import ArtifactExporter\nfrom tinytroupe.tools import TinyWordProcessor\nfrom tinytroupe.steering import TinyStory\nimport tinytroupe.utils as utils\nfrom tinytroupe.examples import create_lisa_the_data_scientist, create_oscar_the_architect, create_marcos_the_physician\n```\n\n----------------------------------------\n\nTITLE: Setting Agent Accessibility\nDESCRIPTION: Configures all agents to be accessible to each other in the environment.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/synthetic_data_generation.ipynb#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ncompany.make_everyone_accessible()\n```\n\n----------------------------------------\n\nTITLE: Defining TV Advertisements for Evaluation\nDESCRIPTION: This code block defines three different TV advertisements as multi-line strings, which will be used for evaluation by the AI agents.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/advertisement_for_tv.ipynb#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# User search query: \"55 inches tv\"\n\ntv_ad_1 =\\\n\"\"\"\nThe Best TV Of Tomorrow - LG 4K Ultra HD TV\nhttps://www.lg.com/tv/oled\nAdThe Leading Name in Cinematic Picture. Upgrade Your TV to 4K OLED And See The Difference. It's Not Just OLED, It's LG OLED. Exclusive a9 Processor, Bringing Cinematic Picture Home.\n\nInfinite Contrast Â· Self-Lighting OLED Â· Dolby Visionâ¢ IQ Â· ThinQ AI w/ Magic Remote\n\nFree Wall Mounting Deal\nLG G2 97\" OLED evo TV\nFree TV Stand w/ Purchase\nWorld's No.1 OLED TV\n\"\"\"\n\ntv_ad_2 =\\\n\"\"\"\nThe Full Samsung TV Lineup - Neo QLED, OLED, 4K, 8K & More\nhttps://www.samsung.com\nAdFrom 4K To 8K, QLED To OLED, Lifestyle TVs & More, Your Perfect TV Is In Our Lineup. Experience Unrivaled Technology & Design In Our Ultra-Premium 8K & 4K TVs.\n\nDiscover Samsung Event Â· Real Depth Enhancer Â· Anti-Reflection Â· 48 mo 0% APR Financing\n\nThe 2023 OLED TV Is Here\nSamsung Neo QLED 4K TVs\nSamsung Financing\nRanked #1 By The ACSIÂ®\n\"\"\"\n\ntv_ad_3 =\\\n\"\"\"\nWayfair 55 Inch Tv - Wayfair 55 Inch Tv DÃ©cor\nShop Now\nhttps://www.wayfair.com/furniture/free-shipping\nAdFree Shipping on Orders Over $35. Shop Furniture, Home DÃ©cor, Cookware & More! Free Shipping on All Orders Over $35. Shop 55 Inch Tv, Home DÃ©cor, Cookware & More!\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Running the Simulation for a Set Duration\nDESCRIPTION: Executes the simulation for a specified duration of 2 minutes. During this time, agents will process the instructions, interact with each other, and use their tools to complete the assigned task.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/scratch/tool_usage.ipynb#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ncompany.run_minutes(2)\n```\n\n----------------------------------------\n\nTITLE: Extracting and Aggregating Results from Multiple AI Agents\nDESCRIPTION: This code extracts the ad choices from all generated AI agents, aggregates the results, and determines the most popular ad choice.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/advertisement_for_tv.ipynb#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nextractor = ResultsExtractor()\nextraction_objective=\"Find the ad the agent chose. Extract the Ad number and title. Extract only ONE result.\"\n\nchoices =[]\n\nfor person in people:\n    res = extractor.extract_results_from_agent(person,\n                                    extraction_objective=extraction_objective,\n                                    situation=situation,\n                                    fields=[\"ad_number\", \"ad_title\"],\n                                    fields_hints={\"ad_number\": \"Must be an integer, not a string.\"},\n                                    verbose=True)\n\n    choices.append(res)\n```\n\nLANGUAGE: python\nCODE:\n```\nchoices\n```\n\nLANGUAGE: python\nCODE:\n```\nvotes = {}\nfor choice in choices:\n    print(f\"{choice['ad_number']}: {choice['ad_title']}\")\n\n    ad_number = choice['ad_number']\n    if ad_number not in votes:\n        votes[ad_number] = 0\n    votes[ad_number] += 1\n```\n\nLANGUAGE: python\nCODE:\n```\nvotes\n```\n\nLANGUAGE: python\nCODE:\n```\n# picks the most voted ad\nwinner = max(votes, key=votes.get)\nwinner\n```\n\n----------------------------------------\n\nTITLE: Running Main Brainstorming Session\nDESCRIPTION: Executes four rounds of discussion for the main brainstorming phase.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/product_brainstorming.ipynb#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nworld.run(4)\n```\n\n----------------------------------------\n\nTITLE: Extracting Results from AI Agent's Ad Evaluation\nDESCRIPTION: This code uses a ResultsExtractor to extract the chosen ad number and title from the AI agent's response, making it easier to process the results.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/advertisement_for_tv.ipynb#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nextractor = ResultsExtractor()\n\nextraction_objective=\"Find the ad the agent chose. Extract the Ad number and title.\"\n\nres = extractor.extract_results_from_agent(lisa, \n                          extraction_objective=extraction_objective,\n                          situation=situation,\n                          fields=[\"ad_number\", \"ad_title\"],\n                          verbose=True)\n\nres\n```\n\nLANGUAGE: python\nCODE:\n```\nf\"{res['ad_number']}: {res['ad_title']}\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Banker Validation Score\nDESCRIPTION: Outputs the numeric score from the validation process, indicating how well the banker agent matches the expectations.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/creating_and_validating_agents.ipynb#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nbanker_score\n```\n\n----------------------------------------\n\nTITLE: Broadcasting Message to Agents\nDESCRIPTION: Sends a broadcast message to all agents in the environment to initiate interaction.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/synthetic_data_generation.ipynb#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ncompany.broadcast(\"Get some work done together, help each other.\")\n```\n\n----------------------------------------\n\nTITLE: Displaying Formatted Banker Validation Justification\nDESCRIPTION: Uses textwrap to display the justification for the banker validation score in a readable format with a line width of 100 characters.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/creating_and_validating_agents.ipynb#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# how to word wrap a string:\nprint(textwrap.fill(banker_justification, width=100))\n```\n\n----------------------------------------\n\nTITLE: Importing TinyTroupe Dependencies\nDESCRIPTION: Imports required modules from the TinyTroupe framework and standard Python libraries for synthetic data generation.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/synthetic_data_generation.ipynb#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport json\nimport sys\nimport csv\nsys.path.append('..')\n\nimport tinytroupe\nfrom tinytroupe.agent import TinyPerson\nfrom tinytroupe.environment import TinyWorld, TinySocialNetwork\nfrom tinytroupe.factory import TinyPersonFactory\nfrom tinytroupe.extraction import ResultsReducer\nimport tinytroupe.control as control\n```\n\n----------------------------------------\n\nTITLE: Displaying Monk Validation Score\nDESCRIPTION: Outputs the numeric score from the validation process, indicating how well the monk agent matches the monk-specific expectations.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/creating_and_validating_agents.ipynb#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nscore\n```\n\n----------------------------------------\n\nTITLE: Displaying Monk Agent Biography\nDESCRIPTION: Calls the minibio method to display a brief biography of the generated monk agent.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/creating_and_validating_agents.ipynb#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nmonk.minibio()\n```\n\n----------------------------------------\n\nTITLE: Running Detail Discussion\nDESCRIPTION: Executes two rounds of detailed discussion.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/product_brainstorming.ipynb#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nworld.run(2)\n```\n\n----------------------------------------\n\nTITLE: Displaying Monk-vs-Banker Validation Score\nDESCRIPTION: Outputs the numeric score from validating the monk agent against banker expectations, expected to be low due to the mismatch.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/creating_and_validating_agents.ipynb#2025-04-22_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nwrong_expectations_score\n```\n\n----------------------------------------\n\nTITLE: Testing Lisa's Memory of Previous Instructions\nDESCRIPTION: Asks Lisa to recall the previous instruction to verify her memory and continuity of conversation, showing how agents maintain context between interactions.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/wordprocessor_tool_usage.ipynb#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nlisa.listen_and_act(\"What did I just told you?\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Monk Agent with TinyPersonFactory\nDESCRIPTION: Instantiates a TinyPersonFactory with the monastery specification and uses it to generate a monk agent based on the monk specification.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/creating_and_validating_agents.ipynb#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nmonk_spec_factory = TinyPersonFactory(monastery_spec)\nmonk = monk_spec_factory.generate_person(monk_spec)\n```\n\n----------------------------------------\n\nTITLE: Importing TinyTroupe Modules for Tool Usage\nDESCRIPTION: Imports necessary modules from the TinyTroupe framework for agent creation, tool usage, and environment setup. This includes components for agents, environment, factories, extraction utilities, and specific tools.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/scratch/tool_usage.ipynb#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport json\nimport sys\nsys.path.append('../..')\n\nimport tinytroupe\nfrom tinytroupe.agent import TinyPerson, TinyToolUse\nfrom tinytroupe.environment import TinyWorld, TinySocialNetwork\nfrom tinytroupe.factory import TinyPersonFactory\nfrom tinytroupe.extraction import default_extractor as extractor\nfrom tinytroupe.extraction import ResultsReducer\nimport tinytroupe.control as control\nfrom tinytroupe.extraction import ArtifactExporter\nfrom tinytroupe.enrichment import TinyEnricher\n\nfrom tinytroupe.tools import TinyWordProcessor\n```\n\n----------------------------------------\n\nTITLE: Importing Required Modules for TV Ad Evaluation\nDESCRIPTION: This snippet imports necessary modules from the tinytroupe library and other required Python libraries for the ad evaluation process.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/advertisement_for_tv.ipynb#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport json\nimport sys\nsys.path.insert(0, '..')\n\nimport tinytroupe\nfrom tinytroupe.agent import TinyPerson\nfrom tinytroupe.examples import create_lisa_the_data_scientist, create_oscar_the_architect\nfrom tinytroupe.factory import TinyPersonFactory\n\nfrom tinytroupe.extraction import ResultsExtractor\n```\n\n----------------------------------------\n\nTITLE: Setting Data Export Folder Path\nDESCRIPTION: Defines the output folder path where processed documents and other artifacts will be saved by the TinyWordProcessor tool.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/wordprocessor_tool_usage.ipynb#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndata_export_folder = \"../data/extractions/wordprocessor\"\n```\n\n----------------------------------------\n\nTITLE: Running Simulation\nDESCRIPTION: Executes the simulation for 5 time steps to generate agent interactions.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/synthetic_data_generation.ipynb#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ncompany.run(5)\n```\n\n----------------------------------------\n\nTITLE: Running Initial Discussion Round\nDESCRIPTION: Executes one round of discussion among the participants.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/product_brainstorming.ipynb#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nworld.run(1)\n```\n\n----------------------------------------\n\nTITLE: Setting Azure OpenAI Environment Variables in Python\nDESCRIPTION: Demonstrates how to set environment variables for Azure OpenAI Service API key and endpoint in Python.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nos.environ['AZURE_OPENAI_KEY'] = 'your_api_key_here'\nos.environ['AZURE_OPENAI_ENDPOINT'] = 'your_endpoint_here'\n```\n\n----------------------------------------\n\nTITLE: Generating Customer Summary\nDESCRIPTION: Prompts the customer to summarize their learning and planned actions.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/investment_firm.ipynb#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ncustomer.listen_and_act(\"Summarize what you have learned, and what you plan to do.\")\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key Environment Variable in Python\nDESCRIPTION: Shows how to set the environment variable for the OpenAI API key in Python.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nos.environ['OPENAI_API_KEY'] = 'your_api_key_here'\n```\n\n----------------------------------------\n\nTITLE: Creating Data DataFrame\nDESCRIPTION: Converts extracted conversation data into a pandas DataFrame with author and content columns.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/synthetic_data_generation.ipynb#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndf = reducer.reduce_agent_to_dataframe(people[0], column_names=[\"author\", \"content\"])\ndf\n```\n\n----------------------------------------\n\nTITLE: Processing Follow-up Question\nDESCRIPTION: Handles customer's follow-up concern about iron ore demand and investment decision.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/investment_firm.ipynb#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ncustomer.think(\"I'm concerned with the slowing demand for iron ore. Should I still invest in Vale do Rio Doce despite that?\")\n\ninvestment_firm.run(10)\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Gutenberg License Notice in Electronic Works\nDESCRIPTION: A required notice that must appear prominently whenever any Project Gutenberg work is accessed, displayed, performed, viewed, copied or distributed. This notice informs users about usage rights and restrictions.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/data/grounding_examples/grounding_examples_1/marus_aurelius_meditations_by_project_gutenberg.txt#2025-04-22_snippet_11\n\nLANGUAGE: text\nCODE:\n```\n    This eBook is for the use of anyone anywhere in the United States and most\n    other parts of the world at no cost and with almost no restrictions\n    whatsoever. You may copy it, give it away or re-use it under the terms\n    of the Project Gutenberg License included with this eBook or online\n    at www.gutenberg.org. If you\n    are not located in the United States, you will have to check the laws\n    of the country where you are located before using this eBook.\n```\n\n----------------------------------------\n\nTITLE: Selecting Rapporteur\nDESCRIPTION: Retrieves the Lisa Carter agent to act as the rapporteur for summarizing ideas.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/product_brainstorming.ipynb#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nrapporteur = world.get_agent_by_name(\"Lisa Carter\")\n```\n\n----------------------------------------\n\nTITLE: Transcribing Latin Citation for Marcus' Reply to Fronto\nDESCRIPTION: A Latin citation referencing Marcus Aurelius' reply to Fronto regarding the case against Herodes Atticus, provided as a footnote in the original text.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/data/grounding_examples/grounding_examples_1/marus_aurelius_meditations_by_project_gutenberg.txt#2025-04-22_snippet_3\n\nLANGUAGE: Latin\nCODE:\n```\nAd. M. Caes., iii. 5.\n```\n\n----------------------------------------\n\nTITLE: Displaying Lisa's Interactions\nDESCRIPTION: Prints the current interaction history for Lisa's agent.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/simple_chat.ipynb#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nlisa.pp_current_interactions()\n```\n\n----------------------------------------\n\nTITLE: Displaying Banker Agent Biography\nDESCRIPTION: Calls the minibio method to display a brief biography of the generated banker agent.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/creating_and_validating_agents.ipynb#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nbanker.minibio()\n```\n\n----------------------------------------\n\nTITLE: Transcribing Latin Citation from Marcus Aurelius to Fronto\nDESCRIPTION: A reference citation in Latin from Marcus Aurelius' correspondence with Fronto, marked as a footnote in the original text.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/data/grounding_examples/grounding_examples_1/marus_aurelius_meditations_by_project_gutenberg.txt#2025-04-22_snippet_0\n\nLANGUAGE: Latin\nCODE:\n```\nAd M. Caes iii. 17\n```\n\n----------------------------------------\n\nTITLE: Displaying Oscar's Interactions\nDESCRIPTION: Prints the current interaction history for Oscar's agent.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/simple_chat.ipynb#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\noscar.pp_current_interactions()\n```\n\n----------------------------------------\n\nTITLE: Transcribing Latin Citation on Speech Simplicity Recommendation\nDESCRIPTION: A Latin citation reference to correspondence where Fronto recommends simplicity in public speeches to Marcus, provided as a footnote in the original text.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/data/grounding_examples/grounding_examples_1/marus_aurelius_meditations_by_project_gutenberg.txt#2025-04-22_snippet_10\n\nLANGUAGE: Latin\nCODE:\n```\nAd M. Caes., iii. x.\n```\n\n----------------------------------------\n\nTITLE: Displaying Agent Interactions\nDESCRIPTION: Prints the current interactions of the first agent in the simulation.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/synthetic_data_generation.ipynb#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\npeople[0].pp_current_interactions()\n```\n\n----------------------------------------\n\nTITLE: Detail Enhancement Prompt\nDESCRIPTION: Requests participants to elaborate on their ideas with specific integration details and use cases.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/product_brainstorming.ipynb#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nworld.broadcast(\"\"\"\n                Ok, great. Now please add more details to these ideas - we need to understand them better. How would they actually integrate with Word? \n                Can you provide some concrete examples of what customers could do?\n                \"\"\")\n```\n\n----------------------------------------\n\nTITLE: Transcribing Latin Citation for Fronto's Criticism of Marcus\nDESCRIPTION: A Latin reference to Fronto's letter where he mentions criticizing Marcus Aurelius in his absence, provided as a footnote in the original text.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/data/grounding_examples/grounding_examples_1/marus_aurelius_meditations_by_project_gutenberg.txt#2025-04-22_snippet_4\n\nLANGUAGE: Latin\nCODE:\n```\nAd. M. Caes., iv. 12.\n```\n\n----------------------------------------\n\nTITLE: Saving Data to CSV\nDESCRIPTION: Exports the generated conversation data to a CSV file for future use.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/synthetic_data_generation.ipynb#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndf.to_csv(\"../data/extractions/synthetic_data_generation.out.csv\", index=False)\n```\n\n----------------------------------------\n\nTITLE: Transcribing Latin Citation for Marcus' Concern Letter\nDESCRIPTION: A Latin reference citation for a letter where Marcus expresses concern for Fronto's health, provided as a footnote in the original text.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/data/grounding_examples/grounding_examples_1/marus_aurelius_meditations_by_project_gutenberg.txt#2025-04-22_snippet_6\n\nLANGUAGE: Latin\nCODE:\n```\nAd M. Caes., i. 2.\n```\n\n----------------------------------------\n\nTITLE: Setting Context for TV Purchase Scenario\nDESCRIPTION: This code defines a situation where the AI agent needs a new TV, providing context for the ad evaluation process.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/advertisement_for_tv.ipynb#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nsituation = \"Your TV broke and you need a new one. You search for a new TV on Bing.\"\n```\n\n----------------------------------------\n\nTITLE: Transcribing Latin Citation for Marcus' Late Night Letter\nDESCRIPTION: A Latin citation reference to a letter that Marcus wrote late at night to Fronto, provided as a footnote in the original text.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/data/grounding_examples/grounding_examples_1/marus_aurelius_meditations_by_project_gutenberg.txt#2025-04-22_snippet_7\n\nLANGUAGE: Latin\nCODE:\n```\niii. 21.\n```\n\n----------------------------------------\n\nTITLE: Transcribing Latin Citation for Letter About Love Contest\nDESCRIPTION: A Latin citation reference to a letter where Marcus declares Fronto the victor in a love contest, provided as a footnote in the original text.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/data/grounding_examples/grounding_examples_1/marus_aurelius_meditations_by_project_gutenberg.txt#2025-04-22_snippet_9\n\nLANGUAGE: Latin\nCODE:\n```\nAd M. Caes., ii. 2.\n```\n\n----------------------------------------\n\nTITLE: Installing TinyTroupe in Editable Mode for Development\nDESCRIPTION: Command to install TinyTroupe in editable mode, which allows modifications to the code to be reflected immediately without reinstallation, useful for developers.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npip install -e .\n```\n\n----------------------------------------\n\nTITLE: Creating Markdown Tables for AI Marketing Challenges\nDESCRIPTION: Markdown table outlining the challenges of AI in digital marketing, including data privacy concerns, costs, and understanding barriers.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/scratch/outputs/scratches/tool_usage/Document/Current Trends in Digital Marketing.None.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Challenge              | Description                                                                 |\n|------------------------|-----------------------------------------------------------------------------|\n| Data Privacy Concerns  | Concerns about how consumer data is being used and protected.               |\n| High Costs             | Initial investment in AI tools can be high.                                 |\n| Lack of Understanding  | Many marketers are not familiar with how AI works and how to implement it.  |\n```\n\n----------------------------------------\n\nTITLE: Cloning the TinyTroupe Repository for Examples\nDESCRIPTION: Command to clone the TinyTroupe GitHub repository to access example code and adapt them for custom simulations.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/microsoft/tinytroupe\ncd tinytroupe\n```\n\n----------------------------------------\n\nTITLE: Initializing TinyTroupe Dependencies\nDESCRIPTION: Imports required TinyTroupe modules and components for creating and managing AI agents in the investment firm simulation.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/investment_firm.ipynb#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport json\nimport sys\nsys.path.insert(0, '..')\n\nimport tinytroupe\nfrom tinytroupe.agent import TinyPerson\nfrom tinytroupe.environment import TinyWorld, TinySocialNetwork\nfrom tinytroupe.factory import TinyPersonFactory\nfrom tinytroupe.validation import TinyPersonValidator\nfrom tinytroupe.extraction import ResultsReducer\nimport tinytroupe.control as control\nfrom tinytroupe.agent import RecallFaculty, FilesAndWebGroundingFaculty\n\n\nimport textwrap\n```\n\n----------------------------------------\n\nTITLE: Importing TinyTroupe Dependencies\nDESCRIPTION: Imports required modules including the core TinyTroupe components for agent creation and environment setup.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/simple_chat.ipynb#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport json\nimport sys\nsys.path.insert(0, '..')\n\nimport tinytroupe\nfrom tinytroupe.agent import TinyPerson\nfrom tinytroupe.environment import TinyWorld, TinySocialNetwork\nfrom tinytroupe.examples import *\n```\n\n----------------------------------------\n\nTITLE: Activating the TinyTroupe Conda Environment\nDESCRIPTION: Command to activate the previously created Conda environment for TinyTroupe. This makes the environment's Python and packages available for use.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nconda activate tinytroupe\n```\n\n----------------------------------------\n\nTITLE: Defining a TinyPerson Fragment in JSON\nDESCRIPTION: This JSON snippet demonstrates a fragment specification for a travel enthusiast, which can be imported into a TinyPerson agent to add travel-related attributes and behaviors.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/README.md#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"Fragment\",\n    \"persona\": {\n        \"preferences\": {\n            \"interests\": [\n                \"Traveling\",\n                \"Exploring new cultures\",\n                \"Trying local cuisines\"\n            ],\n            \"likes\": [\n                \"Travel guides\",\n                \"Planning trips and itineraries\",\n                \"Meeting new people\",\n                \"Taking photographs of scenic locations\"\n            ],\n            \"dislikes\": [\n                \"Crowded tourist spots\",\n                \"Unplanned travel disruptions\",\n                \"High exchange rates\"\n            ]\n        },\n        \"beliefs\": [\n            \"Travel broadens the mind and enriches the soul.\",\n            \"Experiencing different cultures fosters understanding and empathy.\",\n            \"Adventure and exploration are essential parts of life.\",\n            \"Reading travel guides is fun even if you don't visit the places.\"\n        ],\n        \"behaviors\": {\n            \"travel\": [\n                \"You meticulously plan your trips, researching destinations and activities.\",\n                \"You are open to spontaneous adventures and detours.\",\n                \"You enjoy interacting with locals to learn about their culture and traditions.\",\n                \"You document your travels through photography and journaling.\",\n                \"You seek out authentic experiences rather than tourist traps.\"\n            ]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Formatted Monk Validation Justification\nDESCRIPTION: Uses textwrap to display the justification for the monk validation score in a readable format with a line width of 100 characters.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/creating_and_validating_agents.ipynb#2025-04-22_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n# how to word wrap a string:\nprint(textwrap.fill(justification, width=100))\n```\n\n----------------------------------------\n\nTITLE: Displaying Formatted Monk-vs-Banker Validation Justification\nDESCRIPTION: Uses textwrap to display the justification for the monk-vs-banker validation score in a readable format with a line width of 100 characters.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/creating_and_validating_agents.ipynb#2025-04-22_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n# how to word wrap a string:\nprint(textwrap.fill(wrong_expectations_justification, width=100))\n```\n\n----------------------------------------\n\nTITLE: Validating Synthetic Customer Against Expectations in Python\nDESCRIPTION: This code defines expected traits for the customer and uses TinyPersonValidator to validate the generated customer against these expectations. It prints the validation score and justification.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/interview_with_customer.ipynb#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ncustomer_expectations =\\\n    \"\"\"\n    He/she is:\n    - Wealthy\n    - Very intelligent and ambitious\n    - Has a lot of connections\n    - Is in his/her 40s or 50s\n\n    Tastes:\n    - Likes to travel to other countries\n    - Either read books, collect art or play golf\n    - Enjoy only the best, most expensive, wines and food\n    - Dislikes taxes and regulation\n\n    Other notable traits:\n    - Has some stress issues, and might be a bit of a workaholic\n    - Deep knowledge of finance, economics and financial technology\n    - Is a bit of a snob\n    \"\"\"\n\ncustomer_score, customer_justification = TinyPersonValidator.validate_person(customer, expectations=customer_expectations, include_agent_spec=False, max_content_length=None)\nprint(\"Banker score: \", customer_score)\nprint(\"Banker justification: \", customer_justification)\n```\n\n----------------------------------------\n\nTITLE: Security Policy Template in Markdown\nDESCRIPTION: Standard Microsoft security policy template that defines vulnerability reporting procedures, contact information, and required details for security issue submissions.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/SECURITY.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- BEGIN MICROSOFT SECURITY.MD V0.0.9 BLOCK -->\n\n## Security\n\nMicrosoft takes the security of our software products and services seriously, which includes all source code repositories managed through our GitHub organizations, which include [Microsoft](https://github.com/Microsoft), [Azure](https://github.com/Azure), [DotNet](https://github.com/dotnet), [AspNet](https://github.com/aspnet) and [Xamarin](https://github.com/xamarin).\n\nIf you believe you have found a security vulnerability in any Microsoft-owned repository that meets [Microsoft's definition of a security vulnerability](https://aka.ms/security.md/definition), please report it to us as described below.\n\n## Reporting Security Issues\n\n**Please do not report security vulnerabilities through public GitHub issues.**\n\nInstead, please report them to the Microsoft Security Response Center (MSRC) at [https://msrc.microsoft.com/create-report](https://aka.ms/security.md/msrc/create-report).\n\nIf you prefer to submit without logging in, send email to [secure@microsoft.com](mailto:secure@microsoft.com).  If possible, encrypt your message with our PGP key; please download it from the [Microsoft Security Response Center PGP Key page](https://aka.ms/security.md/msrc/pgp).\n\nYou should receive a response within 24 hours. If for some reason you do not, please follow up via email to ensure we received your original message. Additional information can be found at [microsoft.com/msrc](https://www.microsoft.com/msrc). \n\nPlease include the requested information listed below (as much as you can provide) to help us better understand the nature and scope of the possible issue:\n\n  * Type of issue (e.g. buffer overflow, SQL injection, cross-site scripting, etc.)\n  * Full paths of source file(s) related to the manifestation of the issue\n  * The location of the affected source code (tag/branch/commit or direct URL)\n  * Any special configuration required to reproduce the issue\n  * Step-by-step instructions to reproduce the issue\n  * Proof-of-concept or exploit code (if possible)\n  * Impact of the issue, including how an attacker might exploit the issue\n\nThis information will help us triage your report more quickly.\n\nIf you are reporting for a bug bounty, more complete reports can contribute to a higher bounty award. Please visit our [Microsoft Bug Bounty Program](https://aka.ms/security.md/msrc/bounty) page for more details about our active programs.\n\n## Preferred Languages\n\nWe prefer all communications to be in English.\n\n## Policy\n\nMicrosoft follows the principle of [Coordinated Vulnerability Disclosure](https://aka.ms/security.md/cvd).\n\n<!-- END MICROSOFT SECURITY.MD BLOCK -->\n```\n\n----------------------------------------\n\nTITLE: Creating Markdown Tables for AI Marketing Benefits\nDESCRIPTION: Markdown table showing the benefits of AI in digital marketing with descriptions for enhanced efficiency, personalization, insights, and cost savings.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/scratch/outputs/scratches/tool_usage/Document/Current Trends in Digital Marketing.None.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Benefit                | Description                                                                 |\n|------------------------|-----------------------------------------------------------------------------|\n| Enhanced Efficiency    | Automates repetitive tasks, allowing marketers to focus on strategic activities. |\n| Improved Personalization | Analyzes consumer data to create personalized content.                        |\n| Better Insights        | Provides deep insights into consumer behavior.                              |\n| Cost Savings           | Optimizes ad targeting and improves efficiency, leading to cost savings.    |\n```\n\n----------------------------------------\n\nTITLE: Creating a Synthetic Customer Using TinyPersonFactory in Python\nDESCRIPTION: This code creates a TinyPersonFactory instance for a large Brazilian bank and generates a synthetic customer who is a vice-president of product innovation. The customer is given specific traits and background information.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/interview_with_customer.ipynb#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfactory = TinyPersonFactory(\"One of the largest banks in Brazil, full of bureaucracy and legacy systems.\")\n\ncustomer = factory.generate_person(\n    \"\"\"\n    The vice-president of one product innovation. Has a degree in engineering and a MBA in finance. \n    Is facing a lot of pressure from the board of directors to fight off the competition from the fintechs.    \n    \"\"\"\n)\n```\n\n----------------------------------------\n\nTITLE: Displaying Agent Specification\nDESCRIPTION: Prints the detailed specification of the first agent, which shows its characteristics, capabilities, and configuration. This is useful for debugging and understanding the agent's structure.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/scratch/tool_usage.ipynb#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nprint(agent_1.generate_agent_specification())\n```\n\n----------------------------------------\n\nTITLE: Displaying Customer Mini-Biography in Python\nDESCRIPTION: This snippet calls the minibio() method on the customer object to display a brief biography of the synthetic customer. It provides a quick overview of the generated character.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/examples/interview_with_customer.ipynb#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ncustomer.minibio()\n```\n\n----------------------------------------\n\nTITLE: Transcribing Latin Citation for Truth in Expression\nDESCRIPTION: A Latin citation reference to correspondence where Marcus Aurelius mentions that Fronto taught him to speak the truth, provided as a footnote in the original text.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/data/grounding_examples/grounding_examples_1/marus_aurelius_meditations_by_project_gutenberg.txt#2025-04-22_snippet_1\n\nLANGUAGE: Latin\nCODE:\n```\nAd M. Caes iii. 12\n```\n\n----------------------------------------\n\nTITLE: Transcribing Latin Reference to Aurelius-Fronto Letter\nDESCRIPTION: A footnote reference in Latin to the correspondence between Aurelius Caesar and Fronto regarding the case of Herodes Atticus.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/data/grounding_examples/grounding_examples_1/marus_aurelius_meditations_by_project_gutenberg.txt#2025-04-22_snippet_2\n\nLANGUAGE: Latin\nCODE:\n```\nAd M. Caes ii., 2.\n```\n\n----------------------------------------\n\nTITLE: Royalty Fee Calculation for Project Gutenberg Works\nDESCRIPTION: Instructions for calculating and paying royalty fees when charging for access to Project Gutenberg works. Specifies the royalty rate, payment timeline, and recipient organization.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/data/grounding_examples/grounding_examples_1/marus_aurelius_meditations_by_project_gutenberg.txt#2025-04-22_snippet_12\n\nLANGUAGE: text\nCODE:\n```\n    â¢ You pay a royalty fee of 20% of the gross profits you derive from\n        the use of Project Gutenbergâ¢ works calculated using the method\n        you already use to calculate your applicable taxes. The fee is owed\n        to the owner of the Project Gutenbergâ¢ trademark, but he has\n        agreed to donate royalties under this paragraph to the Project\n        Gutenberg Literary Archive Foundation. Royalty payments must be paid\n        within 60 days following each date on which you prepare (or are\n        legally required to prepare) your periodic tax returns. Royalty\n        payments should be clearly marked as such and sent to the Project\n        Gutenberg Literary Archive Foundation at the address specified in\n        Section 4, \"Information about donations to the Project Gutenberg\n        Literary Archive Foundation.\"\n```\n\n----------------------------------------\n\nTITLE: Refund Policy for Project Gutenberg Works\nDESCRIPTION: Requirements for providing refunds to users who do not agree to the terms of the Project Gutenberg License. Specifies notification timeline and return/destruction of physical copies.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/data/grounding_examples/grounding_examples_1/marus_aurelius_meditations_by_project_gutenberg.txt#2025-04-22_snippet_13\n\nLANGUAGE: text\nCODE:\n```\n    â¢ You provide a full refund of any money paid by a user who notifies\n        you in writing (or by e-mail) within 30 days of receipt that s/he\n        does not agree to the terms of the full Project Gutenbergâ¢\n        License. You must require such a user to return or destroy all\n        copies of the works possessed in a physical medium and discontinue\n        all use of and all access to other copies of Project Gutenbergâ¢\n        works.\n```\n\n----------------------------------------\n\nTITLE: Defect Refund Policy for Project Gutenberg Works\nDESCRIPTION: Policy for providing refunds or replacement copies when defects are discovered in electronic works. Specifies the timeframe for reporting defects and the required remediation.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/data/grounding_examples/grounding_examples_1/marus_aurelius_meditations_by_project_gutenberg.txt#2025-04-22_snippet_14\n\nLANGUAGE: text\nCODE:\n```\n    â¢ You provide, in accordance with paragraph 1.F.3, a full refund of\n        any money paid for a work or a replacement copy, if a defect in the\n        electronic work is discovered and reported to you within 90 days of\n        receipt of the work.\n```\n\n----------------------------------------\n\nTITLE: Transcribing Latin Citation for Marcus' Longing Letter\nDESCRIPTION: A Latin citation reference to a letter where Marcus expresses his longing to see Fronto, provided as a footnote in the original text.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/data/grounding_examples/grounding_examples_1/marus_aurelius_meditations_by_project_gutenberg.txt#2025-04-22_snippet_8\n\nLANGUAGE: Latin\nCODE:\n```\nAd M. Caes., iii. 19.\n```\n\n----------------------------------------\n\nTITLE: Transcribing Latin Citation for Letter to 'My Master'\nDESCRIPTION: A Latin citation reference to a letter from Marcus Aurelius to Fronto, addressing him as 'My Master', provided as a footnote in the original text.\nSOURCE: https://github.com/microsoft/tinytroupe/blob/main/data/grounding_examples/grounding_examples_1/marus_aurelius_meditations_by_project_gutenberg.txt#2025-04-22_snippet_5\n\nLANGUAGE: Latin\nCODE:\n```\nAd M. Caes., v. 8.\n```"
  }
]