[
  {
    "owner": "ash-project",
    "repo": "ash_graphql",
    "content": "TITLE: Adding GraphQL Queries and Mutations to an Ash Resource\nDESCRIPTION: Demonstrates how to add GraphQL capabilities to an Ash resource, including type definition and various query and mutation operations that map to resource actions.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/tutorials/getting-started-with-graphql.md#2025-04-14_snippet_6\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule Helpdesk.Support.Ticket do\n  use Ash.Resource,\n    ...,\n    extensions: [\n      AshGraphql.Resource\n    ]\n\n  graphql do\n    type :ticket\n\n    queries do\n      # Examples\n\n      # create a field called `get_ticket` that uses the `read` read action to fetch a single ticke\n      get :get_ticket, :read\n      # create a field called `most_important_ticket` that uses the `most_important` read action to fetch a single record\n      read_one :most_important_ticket, :most_important\n\n      # create a field called `list_tickets` that uses the `read` read action to fetch a list of tickets\n      list :list_tickets, :read\n    end\n\n    mutations do\n      # Examples\n\n      create :create_ticket, :create\n      update :update_ticket, :update\n      destroy :destroy_ticket, :destroy\n    end\n  end\n\n  ...\nend\n```\n\n----------------------------------------\n\nTITLE: Defining a Create Mutation in Ash GraphQL\nDESCRIPTION: Configures a GraphQL mutation to create a new record in the resource.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/dsls/DSL-AshGraphql.Resource.md#2025-04-14_snippet_6\n\nLANGUAGE: elixir\nCODE:\n```\ncreate :create_post, :create\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL for an Ash Resource in Elixir\nDESCRIPTION: Example of configuring GraphQL queries and mutations for an Ash resource. It sets up a 'post' type with get, list, create, update, and destroy operations.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/dsls/DSL-AshGraphql.Resource.md#2025-04-14_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\ngraphql do\n  type :post\n\n  queries do\n    get :get_post, :read\n    list :list_posts, :read\n  end\n\n  mutations do\n    create :create_post, :create\n    update :update_post, :update\n    destroy :destroy_post, :destroy\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Ticket Resource with GraphQL Get Query in Elixir\nDESCRIPTION: Defines an Ash Resource for tickets with GraphQL support, including a UUID primary key, subject attribute, and a GraphQL get query to fetch a single ticket by ID.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/topics/graphql-generation.md#2025-04-14_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule Helpdesk.Support.Ticket do\n  use Ash.Resource,\n    ...,\n    extensions: [\n      AshGraphql.Resource\n    ]\n\n  attributes do\n    # Add an autogenerated UUID primary key called `:id`.\n    uuid_primary_key :id\n\n    # Add a string type attribute called `:subject`\n    attribute :subject, :string\n  end\n\n  actions do\n    # Add a set of simple actions. You'll customize these later.\n    defaults [:read, :update, :destroy]\n  end\n\n  graphql do\n    type :ticket\n\n    queries do\n      # create a field called `get_ticket` that uses the `read` read action to fetch a single ticket\n      get :get_ticket, :read\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Adding GraphQL Queries and Mutations at the Domain Level\nDESCRIPTION: Shows how to configure GraphQL operations at the domain level instead of on individual resources, which allows for a centralized definition of GraphQL capabilities across multiple resources.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/tutorials/getting-started-with-graphql.md#2025-04-14_snippet_7\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule Helpdesk.Support.Ticket do\n  use Ash.Resource,\n    ...,\n    extensions: [\n      AshGraphql.Resource\n    ]\n\n  # The resource still determines its type, and any other resource/type-based\n  # configuration\n  graphql do\n    type :ticket\n  end\n\n  ...\nend\n\ndefmodule Helpdesk.Support do\n  use Ash.Domain,\n    extensions: [\n      AshGraphql.Domain\n    ]\n\n  ...\n  graphql do\n    # equivalent queries and mutations, but the first argument\n    # is the resource because the domain can define queries for\n    # any of its resources\n    queries do\n      get Helpdesk.Support.Ticket, :get_ticket, :read\n      read_one Helpdesk.Support.Ticket, :most_important_ticket, :most_important\n      list Helpdesk.Support.Ticket, :list_tickets, :read\n    end\n\n    mutations do\n      create Helpdesk.Support.Ticket, :create_ticket, :create\n      update Helpdesk.Support.Ticket, :update_ticket, :update\n      destroy Helpdesk.Support.Ticket, :destroy_ticket, :destroy\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating an Absinthe GraphQL Schema with AshGraphQL\nDESCRIPTION: Sets up a basic Absinthe schema that incorporates AshGraphQL with your domains, including placeholders for custom queries and mutations.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/tutorials/getting-started-with-graphql.md#2025-04-14_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule Helpdesk.GraphqlSchema do\n  use Absinthe.Schema\n\n  # Add your domains here\n  use AshGraphql,\n    domains: [Your.Domains]\n\n  query do\n    # Custom absinthe queries can be placed here\n    @desc \"Remove me once you have a query of your own!\"\n    field :remove_me, :string do\n      resolve fn _, _, _ ->\n        {:ok, \"Remove me!\"}\n      end\n    end\n  end\n\n  mutation do\n    # Custom absinthe mutations can be placed here\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL for an Ash Domain\nDESCRIPTION: Basic configuration for enabling GraphQL capabilities on an Ash domain, with an option to skip authorization.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/dsls/DSL-AshGraphql.Domain.md#2025-04-14_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\ngraphql do\n  authorize? false # To skip authorization for this domain\nend\n\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Queries for an Ash Resource in Elixir\nDESCRIPTION: Example of setting up GraphQL queries for an Ash resource. It demonstrates configuring a get query for a post, a read_one query for the current user, and a list query for posts.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/dsls/DSL-AshGraphql.Resource.md#2025-04-14_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\nqueries do\n  get :get_post, :read\n  read_one :current_user, :current_user\n  list :list_posts, :read\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Post Query with AshGraphql Load Fields\nDESCRIPTION: Example of a custom GraphQL query that fetches a post by ID using AshGraphql.load_fields_on_query to ensure requested fields are loaded. Uses Ash.Query for filtering and includes error handling.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/topics/custom-queries-and-mutations.md#2025-04-14_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\nrequire Ash.Query\n\nquery do\n  field :custom_get_post, :post do\n    arg(:id, non_null(:id))\n\n    resolve(fn %{id: post_id}, resolution ->\n      MyApp.Blog.Post\n      |> Ash.Query.filter(id == ^post_id)\n      |> AshGraphql.load_fields_on_query(resolution)\n      |> Ash.read_one(not_found_error?: true)\n      |> AshGraphql.handle_errors(MyApp.Blog.Post, resolution)\n    end)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining a Ticket Resource with Enum and Mutation Support\nDESCRIPTION: Extended Ticket resource definition that includes an enum status attribute, create action, and GraphQL configuration for both queries and mutations.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/topics/graphql-generation.md#2025-04-14_snippet_8\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule Helpdesk.Support.Ticket do\n  use Ash.Resource,\n    ...,\n    extensions: [\n      AshGraphql.Resource\n    ]\n\n\n  attributes do\n    uuid_primary_key :id\n    attribute :subject, :string\n    attribute :status, :atom, constraints: [one_of: [:open, :closed]]\n  end\n\n  actions do\n    defaults [:create, :read, :update, :destroy]\n  end\n\n  graphql do\n    type :ticket\n\n    queries do\n      get :get_ticket, :read\n    end\n\n    mutations do\n      create :create_ticket, :create\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom GraphQL Subscription with Absinthe and AshGraphql\nDESCRIPTION: Example of implementing a GraphQL subscription field using Absinthe's subscription API and AshGraphql.Subscription.query_for_subscription helper. This pattern allows for user-specific subscriptions with authorization checks.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/topics/use-subscriptions-with-graphql.md#2025-04-14_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\n# in your absinthe schema file\nsubscription do\n  field :field, :type_name do\n    config(fn\n      _args, %{context: %{current_user: %{id: user_id}}} ->\n        {:ok, topic: user_id, context_id: \"user/#{user_id}\"}\n\n      _args, _context ->\n        {:error, :unauthorized}\n    end)\n\n    resolve(fn args, _, resolution ->\n      # loads all the data you need\n      AshGraphql.Subscription.query_for_subscription(\n        YourResource,\n        YourDomain,\n        resolution\n      )\n      |> Ash.Query.filter(id == ^args.id)\n      |> Ash.read(actor: resolution.context.current_user)\n    end)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Mutations in Ash Resources\nDESCRIPTION: Defines create, update, and destroy mutations for an Ash resource in GraphQL.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/dsls/DSL-AshGraphql.Resource.md#2025-04-14_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\nmutations do\n  create :create_post, :create\n  update :update_post, :update\n  destroy :destroy_post, :destroy\nend\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Queries for Resources\nDESCRIPTION: Examples of configuring different query types (get, read_one, list) for resources in an Ash domain.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/dsls/DSL-AshGraphql.Domain.md#2025-04-14_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\nqueries do\n  get Post, :get_post, :read\n  read_one User, :current_user, :current_user\n  list Post, :list_posts, :read\nend\n\n```\n\n----------------------------------------\n\nTITLE: Example of Defining GraphQL Mutations in AshGraphql\nDESCRIPTION: Demonstrates how to expose Ash resource actions as GraphQL mutations. The example shows creating mutations for create, update, and destroy operations on a Post resource.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/dsls/DSL-AshGraphql.Domain.md#2025-04-14_snippet_7\n\nLANGUAGE: elixir\nCODE:\n```\nmutations do\n  create Post, :create_post, :create\n  update Post, :update_post, :update\n  destroy Post, :destroy_post, :destroy\nend\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Phoenix Router for GraphQL Endpoints\nDESCRIPTION: Adds GraphQL routes to a Phoenix router with paths for the API endpoint and the GraphiQL playground, using AshGraphql.Plug to prepare requests.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/tutorials/getting-started-with-graphql.md#2025-04-14_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\npipeline :graphql do\n  plug AshGraphql.Plug\nend\n\nscope \"/gql\" do\n  pipe_through [:graphql]\n\n  forward \"/playground\",\n          Absinthe.Plug.GraphiQL,\n          schema: Module.concat([\"Helpdesk.GraphqlSchema\"]),\n          interface: :playground\n\n  forward \"/\",\n    Absinthe.Plug,\n    schema: Module.concat([\"Helpdesk.GraphqlSchema\"])\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Plug Router for GraphQL Endpoints\nDESCRIPTION: Sets up GraphQL endpoints using Plug.Router for applications not using Phoenix, forwarding to Absinthe.Plug for API requests and Absinthe.Plug.GraphiQL for the playground interface.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/tutorials/getting-started-with-graphql.md#2025-04-14_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\nplug AshGraphql.Plug\n\nforward \"/gql\",\n  to: Absinthe.Plug,\n  init_opts: [schema: Module.concat([\"Helpdesk.GraphqlSchema\"])]\n\nforward \"/playground\",\n  to: Absinthe.Plug.GraphiQL,\n  init_opts: [\n    schema: Module.concat([\"Helpdesk.GraphqlSchema\"]),\n    interface: :playground\n  ]\n```\n\n----------------------------------------\n\nTITLE: Defining Ash.Type.Enum with GraphQL Support in Elixir\nDESCRIPTION: This snippet shows how to define an Ash.Type.Enum that can be used with GraphQL. It includes the basic enum definition, GraphQL type specification, optional value renaming, and enum value descriptions.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/topics/use-enums-with-graphql.md#2025-04-14_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule AshPostgres.Test.Types.Status do\n  @moduledoc false\n  use Ash.Type.Enum, values: [:open, :closed]\n\n  def graphql_type(_), do: :ticket_status\n\n  # Optionally, remap the names used in GraphQL, for instance if you have a value like `:\"10\"`\n  # that value is not compatible with GraphQL\n\n  def graphql_rename_value(:\"10\"), do: :ten\n  def graphql_rename_value(value), do: value\n\n  # You can also provide descriptions for the enum values, which will be exposed in the GraphQL\n  # schema.\n  # Remember to have a fallback clause that returns nil if you don't provide descriptions for all\n  # values.\n\n  def graphql_describe_enum_value(:open), do: \"The post is open\"\n  def graphql_describe_enum_value(_), do: nil\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring AshGraphql for SDL File Generation in Elixir\nDESCRIPTION: This snippet shows how to configure AshGraphql to generate an SDL file when running mix ash.codegen. It specifies the domains to use and the output path for the SDL file.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/topics/sdl-file.md#2025-04-14_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\nuse AshGraphql,\n  domains: [Domain1, Domain2],\n  generate_sdl_file: \"priv/schema.graphql\"\n```\n\n----------------------------------------\n\nTITLE: Configuring a GraphQL Get Query for an Ash Resource in Elixir\nDESCRIPTION: Example of setting up a GraphQL get query for an Ash resource. It configures a query named 'get_post' that uses the 'read' action.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/dsls/DSL-AshGraphql.Resource.md#2025-04-14_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\nget :get_post, :read\n```\n\n----------------------------------------\n\nTITLE: Configuring AshGraphql for Automatic SDL File Generation on Recompilation in Elixir\nDESCRIPTION: This snippet demonstrates how to set up AshGraphql to automatically generate the SDL file whenever the schema recompiles. It includes the domains, output path, and enables auto-generation.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/topics/sdl-file.md#2025-04-14_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\nuse AshGraphql,\n  domains: [Domain1, Domain2],\n  generate_sdl_file: \"priv/schema.graphql\",\n  auto_generate_sdl_file?: true\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query with Filter Parameter\nDESCRIPTION: Example GraphQL query that uses the list_tickets query with a representative_id filter parameter to fetch filtered tickets, returning their id, representative_id, and subject.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/topics/graphql-generation.md#2025-04-14_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nquery ($representative_id: ID) {\n  list_tickets(representative_id: $representative_id) {\n    id\n    representative_id\n    subject\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Mutation for Creating a Ticket\nDESCRIPTION: Example GraphQL mutation for creating a ticket with input data, returning both the created ticket and any potential errors in the AshGraphql result structure.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/topics/graphql-generation.md#2025-04-14_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\nmutation ($input: CreateTicketInput!) {\n  createTicket(input: $input) {\n    result {\n      id\n      subject\n      status\n    }\n    errors {\n      code\n      fields\n      message\n      shortMessage\n      vars\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling AshGraphql Subscriptions in Configuration\nDESCRIPTION: Configuration for enabling the subscription DSL feature in AshGraphql. This setting must be added to your application config to use the subscription DSL.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/topics/use-subscriptions-with-graphql.md#2025-04-14_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\nconfig :ash_graphql, :subscriptions, true\n```\n\n----------------------------------------\n\nTITLE: Defining a GraphQL List Query\nDESCRIPTION: Examples of list queries that fetch multiple records, with options for regular and paginated (Relay) queries.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/dsls/DSL-AshGraphql.Domain.md#2025-04-14_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\nlist :list_posts, :read\n```\n\nLANGUAGE: elixir\nCODE:\n```\nlist :list_posts_paginated, :read, relay?: true\n```\n\n----------------------------------------\n\nTITLE: Defining a List Query in Ash GraphQL\nDESCRIPTION: Configures a GraphQL query to fetch a list of records. Supports pagination and Relay compatibility.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/dsls/DSL-AshGraphql.Resource.md#2025-04-14_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\nlist :list_posts, :read\n```\n\nLANGUAGE: elixir\nCODE:\n```\nlist :list_posts_paginated, :read, relay?: true\n```\n\n----------------------------------------\n\nTITLE: Custom Router Implementation with Actor Authentication\nDESCRIPTION: Complete router module implementation showing custom authentication setup with Guardian and GraphQL endpoints.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/topics/authorize-with-graphql.md#2025-04-14_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule MyAppWeb.Router do\n  pipeline :api do\n    # ...\n    plug :get_actor_from_token\n    plug AshGraphql.Plug\n  end\n\n  scope \"/\" do\n    forward \"/gql\", Absinthe.Plug, schema: YourSchema\n\n    forward \"/playground\",\n          Absinthe.Plug.GraphiQL,\n          schema: YourSchema,\n          interface: :playground\n  end\n\n  def get_actor_from_token(conn, _opts) do\n     with [\"\" <> token] <- get_req_header(conn, \"authorization\"),\n         {:ok, user, _claims} <- MyApp.Guardian.resource_from_token(token) do\n      conn\n      |> set_actor(user)\n    else\n    _ -> conn\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining a GraphQL Read One Query\nDESCRIPTION: Example of a read_one query that fetches a single record based on query parameters.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/dsls/DSL-AshGraphql.Domain.md#2025-04-14_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\nread_one :current_user, :current_user\n```\n\n----------------------------------------\n\nTITLE: Defining Generic Action Mutation in AshGraphql\nDESCRIPTION: Sets up a GraphQL mutation for executing a generic action. Takes a name and action parameter, with configuration options for description, error handling, and input customization.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/dsls/DSL-AshGraphql.Resource.md#2025-04-14_snippet_9\n\nLANGUAGE: elixir\nCODE:\n```\naction name, action\n```\n\n----------------------------------------\n\nTITLE: Defining a GraphQL Get Query\nDESCRIPTION: Example of a get query that fetches a record by primary key.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/dsls/DSL-AshGraphql.Domain.md#2025-04-14_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\nget :get_post, :read\n```\n\n----------------------------------------\n\nTITLE: Example of Create Mutation Definition in AshGraphql\nDESCRIPTION: Example showing how to define a GraphQL mutation for creating a record. It creates a mutation named :create_post that calls the :create action.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/dsls/DSL-AshGraphql.Domain.md#2025-04-14_snippet_9\n\nLANGUAGE: elixir\nCODE:\n```\ncreate :create_post, :create\n```\n\n----------------------------------------\n\nTITLE: Defining a Create Mutation in AshGraphql\nDESCRIPTION: This DSL function maps an Ash resource create action to a GraphQL mutation. It requires the resource module, mutation name, and the action name to expose as a creation mutation.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/dsls/DSL-AshGraphql.Domain.md#2025-04-14_snippet_8\n\nLANGUAGE: elixir\nCODE:\n```\ncreate resource, name, action\n```\n\n----------------------------------------\n\nTITLE: Example of Destroy Mutation Definition in AshGraphql\nDESCRIPTION: Example showing how to define a GraphQL mutation for destroying a record. It creates a mutation named :destroy_post that calls the :destroy action.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/dsls/DSL-AshGraphql.Domain.md#2025-04-14_snippet_13\n\nLANGUAGE: elixir\nCODE:\n```\ndestroy :destroy_post, :destroy\n```\n\n----------------------------------------\n\nTITLE: Defining an Update Mutation in AshGraphql\nDESCRIPTION: This DSL function maps an Ash resource update action to a GraphQL mutation. It requires the resource module, mutation name, and the action name to expose as an update mutation.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/dsls/DSL-AshGraphql.Domain.md#2025-04-14_snippet_10\n\nLANGUAGE: elixir\nCODE:\n```\nupdate resource, name, action\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Subscriptions on an Ash Resource\nDESCRIPTION: Example of defining a subscription on an Ash resource using the GraphQL extension. This creates a subscription that triggers when a resource is created.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/topics/use-subscriptions-with-graphql.md#2025-04-14_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule MyApp.Resource do\n  use Ash.Resource,\n  data_layer: Ash.DataLayer.Ets,\n  extensions: [AshGraphql.Resource]\n\n  graphql do\n    subscriptions do\n      subscribe :resource_created do\n        action_types :create\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Example of Update Mutation Definition in AshGraphql\nDESCRIPTION: Example showing how to define a GraphQL mutation for updating a record. It creates a mutation named :update_post that calls the :update action.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/dsls/DSL-AshGraphql.Domain.md#2025-04-14_snippet_11\n\nLANGUAGE: elixir\nCODE:\n```\nupdate :update_post, :update\n```\n\n----------------------------------------\n\nTITLE: Implementing a Scalar-Returning Generic Action in AshGraphql\nDESCRIPTION: Defines a GraphQL query that returns a simple string scalar. The action accepts a required 'to' argument and concatenates it with a greeting.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/topics/generic-actions.md#2025-04-14_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\ngraphql do\n  queries do\n    action :say_hello, :say_hello\n  end\nend\n\nactions do\n  action :say_hello, :string do\n    argument :to, :string, allow_nil?: false\n\n    run fn input, _ ->\n      {:ok, \"Hello, #{input.arguments.to}\"}\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Error Display in Ash GraphQL (Elixir)\nDESCRIPTION: This snippet demonstrates how to configure the display of raised errors in Ash GraphQL. It shows both inline configuration and config file setup for enabling error display in development and test environments.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/topics/handle-errors.md#2025-04-14_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\ngraphql do\n  show_raised_errors? true\nend\n\n# or it can be done in config\n# make sure you've set `otp_app` in your domain, i.e use Ash.Domain, otp_app: :my_app\n\nconfig :my_app, YourDomain, [\n  graphql: [\n    show_raised_errors?: true\n  ]\n]\n```\n\n----------------------------------------\n\nTITLE: Defining a Destroy Mutation in AshGraphql\nDESCRIPTION: This DSL function maps an Ash resource destroy action to a GraphQL mutation. It requires the resource module, mutation name, and the action name to expose as a destroy mutation.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/dsls/DSL-AshGraphql.Domain.md#2025-04-14_snippet_12\n\nLANGUAGE: elixir\nCODE:\n```\ndestroy resource, name, action\n```\n\n----------------------------------------\n\nTITLE: Testing a GraphQL Mutation with Elixir\nDESCRIPTION: Example Elixir test code that demonstrates how to execute a GraphQL mutation to create a ticket, including setting an enum value in uppercase format as required by GraphQL.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/topics/graphql-generation.md#2025-04-14_snippet_11\n\nLANGUAGE: elixir\nCODE:\n```\ninput = %{\n  subject: \"My Ticket\",\n  status: \"OPEN\"\n}\n\nresp_body =\n  post(conn, \"/api/graphql\", %{\n    query: query,\n    variables: %{input: input}\n  })\n  |> json_response(200)\n```\n\n----------------------------------------\n\nTITLE: Defining Update Mutation in AshGraphql\nDESCRIPTION: Defines a GraphQL mutation for updating a record using a specified action. Requires a name and action parameter, with optional configuration for description, identity, and other options.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/dsls/DSL-AshGraphql.Resource.md#2025-04-14_snippet_7\n\nLANGUAGE: elixir\nCODE:\n```\nupdate name, action\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Map Type with Field Constraints in Elixir\nDESCRIPTION: Creates a new type 'Metadata' as a subtype of map with constrained fields for title and description. Implements custom GraphQL type handling through the graphql_type/1 callback.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/topics/use-maps-with-graphql.md#2025-04-14_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule MyApp.Types.Metadata do\n  @moduledoc false\n  use Ash.Type.NewType, subtype_of: :map, constraints: [\n    fields: [\n      title: [\n        type: :string\n      ],\n      description: [\n        type: :string\n      ]\n    ]\n  ]\n\n  def graphql_type(_), do: :metadata\nend\n\n```\n\n----------------------------------------\n\nTITLE: Defining Destroy Mutation in AshGraphql\nDESCRIPTION: Creates a GraphQL mutation for destroying a record using a specified action. Requires a name and action parameter, with options for configuring the read action, identity, and input visibility.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/dsls/DSL-AshGraphql.Resource.md#2025-04-14_snippet_8\n\nLANGUAGE: elixir\nCODE:\n```\ndestroy name, action\n```\n\n----------------------------------------\n\nTITLE: Defining Union Types with Ash.Type.NewType in Elixir\nDESCRIPTION: This snippet demonstrates how to define a union type using Ash.Type.NewType. It includes constraints for different armor types and uses AshGraphql.Type for GraphQL integration.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/topics/use-unions-with-graphql.md#2025-04-14_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule MyApp.Armor do\n  use Ash.Type.NewType, subtype_of: :union, constraints: [\n    types: [\n      plate: [\n        # This is an embedded resource, with its own fields\n        type: MyApp.Armor.Plate\n      ],\n      chain_mail: [\n        # And so is this\n        type: MyApp.Armor.ChainMail\n      ],\n      custom: [\n        type: :string\n      ]\n    ]\n  ]\n\n  use AshGraphql.Type\n\n  # Add this to define the union in ash_graphql\n  def graphql_type(_), do: :armor\nend\n```\n\n----------------------------------------\n\nTITLE: Executing Generic Action in AshGraphql\nDESCRIPTION: Runs a generic action through GraphQL. Takes a resource, name, and action as arguments. Can be configured with description, input hiding, error handling, and relay ID translations.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/dsls/DSL-AshGraphql.Domain.md#2025-04-14_snippet_14\n\nLANGUAGE: elixir\nCODE:\n```\naction resource, name, action\n```\n\n----------------------------------------\n\nTITLE: Configuring Relay ID Translations in Mutations\nDESCRIPTION: Sets up translation between Relay global IDs and internal IDs for mutation arguments, specifically for creating a post with an author reference.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/topics/relay.md#2025-04-14_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\ncreate :create do\n  argument :author_id, :uuid\n\n  # Do stuff with author_id\nend\n```\n\n----------------------------------------\n\nTITLE: Adding a List Query to the GraphQL Configuration\nDESCRIPTION: Extension of the GraphQL configuration to include a list_tickets query that retrieves multiple tickets using the read action.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/topics/graphql-generation.md#2025-04-14_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\n  graphql do\n    type :ticket\n\n    queries do\n      # create a field called `get_ticket` that uses the `read` read action to fetch a single ticket\n      get :get_ticket, :read\n\n      # create a field called `list_tickets` that uses the `read` read action to fetch a list of tickets\n      list :list_tickets, :read\n    end\n  end\n```\n\n----------------------------------------\n\nTITLE: Specifying Domains in AshGraphQL Schema\nDESCRIPTION: Shows how to include multiple domains in your GraphQL API by listing them in the AshGraphql use statement.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/tutorials/getting-started-with-graphql.md#2025-04-14_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\nuse AshGraphql, domains: [Your.Domain1, Your.Domain2]\n```\n\n----------------------------------------\n\nTITLE: Defining a Generic Action Query in AshGraphql\nDESCRIPTION: Defines a generic action query for AshGraphql. This DSL function maps an Ash resource action to a GraphQL query. It requires the resource module, query name, and the action name to expose.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/dsls/DSL-AshGraphql.Domain.md#2025-04-14_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\naction resource, name, action\n```\n\n----------------------------------------\n\nTITLE: Action Example Usage\nDESCRIPTION: Example showing how to define a check_status action\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/dsls/DSL-AshGraphql.Domain.md#2025-04-14_snippet_15\n\nLANGUAGE: elixir\nCODE:\n```\naction :check_status, :check_status\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Pipeline with Authentication\nDESCRIPTION: Sets up the GraphQL pipeline with authentication plugs for bearer token and actor management.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/topics/authorize-with-graphql.md#2025-04-14_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\npipeline :graphql do\n  plug :load_from_bearer\n  plug :set_actor, :user\n  plug AshGraphql.Plug\nend\n```\n\n----------------------------------------\n\nTITLE: Example of Action Query Definition in AshGraphql\nDESCRIPTION: Example showing how to define a GraphQL query that maps to a check_status action on a resource. The query and action names are both set to :check_status.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/dsls/DSL-AshGraphql.Domain.md#2025-04-14_snippet_6\n\nLANGUAGE: elixir\nCODE:\n```\naction :check_status, :check_status\n```\n\n----------------------------------------\n\nTITLE: Configuring Subscriptions in AshGraphql\nDESCRIPTION: Example configuration for setting up GraphQL subscriptions in an Ash resource. Shows how to define a subscription for created records with specific read actions.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/dsls/DSL-AshGraphql.Resource.md#2025-04-14_snippet_10\n\nLANGUAGE: elixir\nCODE:\n```\nsubscriptions do\n  subscribe :bucket_created do\n    actions :create\n    read_action :read\n  end\nend\n\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Authorization Settings in Elixir\nDESCRIPTION: Disables authorization for a specific domain in GraphQL configuration.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/topics/authorize-with-graphql.md#2025-04-14_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\ngraphql do\n  authorize? false\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Error Handler in Ash GraphQL (Elixir)\nDESCRIPTION: This snippet demonstrates how to set a custom error handler in Ash GraphQL. The error handler can be used for translating errors or modifying them in some way before they are returned.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/topics/handle-errors.md#2025-04-14_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\ngraphql do\n  error_handler {MyApp.GraphqlErrorHandler, :handle_error, []}\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Nullable Fields in GraphQL Type\nDESCRIPTION: Configuration to specify which fields should be treated as nullable in the GraphQL type definition.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/topics/authorize-with-graphql.md#2025-04-14_snippet_6\n\nLANGUAGE: elixir\nCODE:\n```\ngraphql do\n  type :post\n\n  nullable_fields [:foo, :bar, :baz]\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Enum Type in Absinthe Schema for Elixir\nDESCRIPTION: This snippet demonstrates how to define a custom enum type in an Absinthe schema. It creates a :status enum with two values, each with a description.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/topics/use-enums-with-graphql.md#2025-04-14_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\n# In your absinthe schema:\n\nenum :status do\n  value(:open, description: \"The post is open\")\n  value(:closed, description: \"The post is closed\")\nend\n```\n\n----------------------------------------\n\nTITLE: Defining an Action Query in Ash GraphQL\nDESCRIPTION: Configures a GraphQL query to run a generic action on the resource.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/dsls/DSL-AshGraphql.Resource.md#2025-04-14_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\naction :check_status, :check_status\n```\n\n----------------------------------------\n\nTITLE: Configuring a Custom Tracer in Ash GraphQL Domain\nDESCRIPTION: Example of how to configure a custom tracer in an Ash GraphQL domain. This will override the global tracer configuration set in the application config.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/topics/monitoring.md#2025-04-14_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\ngraphql do\n  trace MyApp.Tracer\nend\n```\n\n----------------------------------------\n\nTITLE: Enabling Relay Global IDs in Ash GraphQL\nDESCRIPTION: Enables Relay Global ID support at the application level, allowing for node refetching using global IDs.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/topics/relay.md#2025-04-14_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\nuse AshGraphql, relay_ids?: true\n```\n\n----------------------------------------\n\nTITLE: Enabling Root Level Errors in Ash GraphQL (Elixir)\nDESCRIPTION: This code snippet shows how to configure Ash GraphQL to return action errors as root level errors instead of in the 'errors' field for mutations.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/topics/handle-errors.md#2025-04-14_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\ngraphql do\n  root_level_errors? true\nend\n```\n\n----------------------------------------\n\nTITLE: Enabling Relay in Ash GraphQL Resource\nDESCRIPTION: Configures a resource to follow the Relay specification by implementing the Node interface and Connection-based pagination.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/topics/relay.md#2025-04-14_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\ngraphql do\n  relay? true\n\n  ...\nend\n```\n\n----------------------------------------\n\nTITLE: Customizing Subscription Deduplication with Actor Function\nDESCRIPTION: Example of customizing subscription deduplication by implementing an actor function in the subscription definition. This allows for reducing the number of resolver executions by grouping similar subscribers.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/topics/use-subscriptions-with-graphql.md#2025-04-14_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule MyApp.Resource do\n  use Ash.Resource,\n  data_layer: Ash.DataLayer.Ets,\n  extensions: [AshGraphql.Resource]\n\n  graphql do\n    subscriptions do\n      subscribe :resource_created do\n        action_types :create\n        actor fn actor ->\n          if check_actor(actor) do\n            %{id: \"your generic actor\", ...}\n          else\n            actor\n          end\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Relay ID Translations in GraphQL Mutations\nDESCRIPTION: Configures the translation mapping for Relay global IDs in GraphQL mutations, connecting the action arguments to their corresponding resource types.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/topics/relay.md#2025-04-14_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\nmutations do\n  create :create_post, :create do\n    relay_id_translations [input: [author_id: :user]]\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: JSON Response Structure for Create Ticket Mutation\nDESCRIPTION: Example JSON response from a createTicket GraphQL mutation, showing the created ticket with ID, subject, and status in the nested result structure.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/topics/graphql-generation.md#2025-04-14_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"createTicket\": {\n      \"result\": {\n        \"id\": \"b771e433-0979-4d07-a280-4d12373849aa\",\n        \"subject\": \"My Ticket\",\n        \"status\": \"OPEN\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Ash's Built-in Relay Types\nDESCRIPTION: Configures Ash GraphQL to not define its own Relay types, allowing for use with Absinthe.Relay instead.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/topics/relay.md#2025-04-14_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\nuse AshGraphql, define_relay_types?: false\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Type in AshGraphql (Elixir)\nDESCRIPTION: This snippet demonstrates how to set the default JSON type for AshGraphql in the application configuration. It shows how to change the default from `:json_string` to `:json`.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/topics/use-json-with-graphql.md#2025-04-14_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\nconfig :ash_graphql, :json_type, :json\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Read Action with Filtering Arguments\nDESCRIPTION: Implementation of a custom query_tickets read action with representative_id filter parameter and the corresponding GraphQL configuration to expose it through the list_tickets field.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/topics/graphql-generation.md#2025-04-14_snippet_6\n\nLANGUAGE: elixir\nCODE:\n```\n  actions do\n    defaults [:read, :update, :destroy]\n\n    read :query_tickets do\n      argument :representative_id, :uuid\n\n      filter(\n        expr do\n          is_nil(^arg(:representative_id)) or representative_id == ^arg(:representative_id)\n        end\n      )\n    end\n  end\n\n  graphql do\n    type :ticket\n\n    queries do\n      # create a field called `list_tickets` that uses the `:query_tickets` read action to fetch a list of tickets\n      list :list_tickets, :query_tickets\n    end\n  end\n```\n\n----------------------------------------\n\nTITLE: Configuring Policy Breakdown Display\nDESCRIPTION: Configuration to enable detailed policy breakdown messages in GraphQL errors.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/topics/authorize-with-graphql.md#2025-04-14_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\nconfig :ash_graphql, :policies, show_policy_breakdowns?: true\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Listing Multiple Tickets\nDESCRIPTION: Example GraphQL query for listing multiple tickets using the listTickets field, which returns an array of ticket objects with their IDs and subjects.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/topics/graphql-generation.md#2025-04-14_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  listTickets {\n    id\n    subject\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Error Handler in Ash Resource (Elixir)\nDESCRIPTION: This snippet shows how to configure an error handler specifically for a resource in Ash GraphQL. It demonstrates setting up a resource with a custom error handler.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/topics/handle-errors.md#2025-04-14_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule MyApp.Resource do\n  use Ash.Resource,\n    domain: [MyApp.Domain],\n    extensions: [AshGraphql]\n    \n  graphql do\n    type :ticket\n    error_handler {MyApp.Resource.GraphqlErrorHandler, :handle_error, []}\n  end\n  \n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Fetching a Ticket by ID\nDESCRIPTION: Example GraphQL query to fetch a ticket by ID using the getTicket query defined in the Ticket resource. It requires an ID parameter and returns the ticket's ID and subject.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/topics/graphql-generation.md#2025-04-14_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery ($id: ID!) {\n  getTicket(id: $id) {\n    id\n    subject\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Managed Relationship in Elixir\nDESCRIPTION: Function signature for configuring behavior of managed relationships for a specific action. Takes an action and argument as parameters to define relationship management behavior.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/dsls/DSL-AshGraphql.Resource.md#2025-04-14_snippet_13\n\nLANGUAGE: elixir\nCODE:\n```\nmanaged_relationship action, argument\n```\n\n----------------------------------------\n\nTITLE: Loading Fields on Existing Post Records with AshGraphql\nDESCRIPTION: Alternative implementation showing how to load GraphQL fields on already fetched records using AshGraphql.load_fields. Demonstrates fetching a post with Ash.get and loading additional fields based on the GraphQL resolution.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/topics/custom-queries-and-mutations.md#2025-04-14_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\nquery do\n  field :custom_get_post, :post do\n    arg(:id, non_null(:id))\n\n    resolve(fn %{id: post_id}, resolution ->\n      with {:ok, post} when not is_nil(post) <- Ash.get(MyApp.Blog.Post, post_id) do\n        AshGraphql.load_fields(post, MyApp.Blog.Post, resolution)\n      end\n      |> AshGraphql.handle_errors(MyApp.Blog.Post, resolution)\n    end)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Bypassing GraphQL Type Generation in Elixir\nDESCRIPTION: Implementation of the graphql_define_type?/1 callback to prevent automatic GraphQL type generation for a custom map type.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/topics/use-maps-with-graphql.md#2025-04-14_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\n@impl true\ndef graphql_define_type?(_), do: false\n```\n\n----------------------------------------\n\nTITLE: Setting up AshGraphql.Subscription.Batcher in Supervision Tree\nDESCRIPTION: Code for adding the AshGraphql.Subscription.Batcher to your application's supervision tree. This batcher processes subscription notifications out-of-band for better performance with many subscribers.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/topics/use-subscriptions-with-graphql.md#2025-04-14_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\n  @impl true\n  def start(_type, _args) do\n    children = [\n      ...,\n      {Absinthe.Subscription, MyAppWeb.Endpoint},\n      AshGraphql.Subscription.Batcher\n    ]\n\n    # See https://hexdocs.pm/elixir/Supervisor.html\n    # for other strategies and supported options\n    opts = [strategy: :one_for_one, name: MyAppWeb.Supervisor]\n    Supervisor.start_link(children, opts)\n  end\n```\n\n----------------------------------------\n\nTITLE: Bypassing Ash's GraphQL Type Generation for Unions\nDESCRIPTION: This code snippet demonstrates how to bypass Ash's automatic GraphQL type generation for unions. This is useful when you want to define the type yourself instead of relying on Ash's generation.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/topics/use-unions-with-graphql.md#2025-04-14_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\n@impl true\ndef graphql_define_type?(_), do: false\n```\n\n----------------------------------------\n\nTITLE: Defining Individual Subscription in AshGraphql\nDESCRIPTION: Example of defining a single subscription for a specific event type. Shows configuration for listening to create actions on a post resource.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/dsls/DSL-AshGraphql.Resource.md#2025-04-14_snippet_11\n\nLANGUAGE: elixir\nCODE:\n```\nsubscribe :post_created do\n  action_types(:create)\nend\n\n```\n\n----------------------------------------\n\nTITLE: Installing AshGraphQL using Igniter\nDESCRIPTION: The recommended approach to install AshGraphQL using the Igniter tool.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/tutorials/getting-started-with-graphql.md#2025-04-14_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\nmix igniter.install ash_graphql\n```\n\n----------------------------------------\n\nTITLE: Subscribe Definition Example\nDESCRIPTION: Example showing subscription configuration with action types\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/dsls/DSL-AshGraphql.Domain.md#2025-04-14_snippet_17\n\nLANGUAGE: elixir\nCODE:\n```\nsubscribe :post_created do\n  action_types(:create)\nend\n```\n\n----------------------------------------\n\nTITLE: JSON Response Structure for List Tickets Query\nDESCRIPTION: Example JSON response structure from the listTickets GraphQL query, showing how multiple tickets are returned as an array with id and subject fields.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/topics/graphql-generation.md#2025-04-14_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"listTickets\": [\n      {\n        \"id\": \"\",\n        \"subject\": \"\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Subscription Configuration Example\nDESCRIPTION: Example demonstrating how to configure a subscription for post creation events\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/dsls/DSL-AshGraphql.Domain.md#2025-04-14_snippet_16\n\nLANGUAGE: elixir\nCODE:\n```\nsubscription do\n  subscribe Post, :post_created do\n    action_types(:create)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Root Level Errors in AshGraphql Domain\nDESCRIPTION: Example domain module configuration that enables root level errors in GraphQL responses instead of the default nested error structure.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/topics/graphql-generation.md#2025-04-14_snippet_10\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule Helpdesk.Support do\n  use Ash.Domain, extensions: [AshGraphql.Domain]\n\n  graphql do\n    root_level_errors? true\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Adding AshGraphQL Dependency to Mix.exs\nDESCRIPTION: Manual installation step to add AshGraphQL as a dependency in your Mix.exs file.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/tutorials/getting-started-with-graphql.md#2025-04-14_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\ndef deps()\n  [\n    ...,\n    {:ash_graphql, \"~> 1.7.7\"}\n  ]\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Managed Relationships in AshGraphql\nDESCRIPTION: Example of setting up managed relationships for handling nested mutations in GraphQL. Shows how to configure relationship management between posts and comments.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/dsls/DSL-AshGraphql.Resource.md#2025-04-14_snippet_12\n\nLANGUAGE: elixir\nCODE:\n```\nmanaged_relationships do\n  managed_relationship :create_post, :comments\nend\n\n```\n\n----------------------------------------\n\nTITLE: Adding Empty Subscription Block to GraphQL Schema\nDESCRIPTION: Basic setup for adding an empty subscription block to your Absinthe schema module. This is required to support subscriptions in your GraphQL API.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/topics/use-subscriptions-with-graphql.md#2025-04-14_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule MyAppWeb.Schema do\n  ...\n\n  subscription do\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Default Error Handler in Ash GraphQL (Elixir)\nDESCRIPTION: This code snippet shows the implementation of the default error handler in Ash GraphQL. It replaces variables in error messages and short messages.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/topics/handle-errors.md#2025-04-14_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule AshGraphql.DefaultErrorHandler do\n  @moduledoc \"Replaces any text in message or short_message with variables\"\n\n  def handle_error(\n        %{message: message, short_message: short_message, vars: vars} = error,\n        _context\n      ) do\n    %{\n      error\n      | message: replace_vars(message, vars),\n        short_message: replace_vars(short_message, vars)\n    }\n  end\n\n  def handle_error(other, _), do: other\n\n  defp replace_vars(string, vars) do\n    vars =\n      if is_map(vars) do\n        vars\n      else\n        List.wrap(vars)\n      end\n\n    Enum.reduce(vars, string, fn {key, value}, acc ->\n      if String.contains?(acc, \"%{#{key}}\") do\n        String.replace(acc, \"%{#{key}}\", to_string(value))\n      else\n        acc\n      end\n    end)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Example Policy Breakdown Error Response\nDESCRIPTION: Sample JSON response showing how policy breakdown errors are formatted when enabled.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/topics/authorize-with-graphql.md#2025-04-14_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"attendanceRecords\": null\n  },\n  \"errors\": [\n    {\n      \"code\": \"forbidden\",\n      \"fields\": [],\n      \"locations\": [\n        {\n          \"column\": 3,\n          \"line\": 2\n        }\n      ],\n      \"message\": \"MyApp.Authentication.User.read\\n\\n\\n\\n\\nPolicy Breakdown\\n  Policy | ⛔:\\n    forbid unless: actor is active | ✓ | ⬇    \\n    authorize if: actor is Executive | ✘ | ⬇\",\n      \"path\": [\"attendanceRecords\"],\n      \"short_message\": \"forbidden\",\n      \"vars\": {}\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Action-Specific Error Handling in Ash GraphQL (Elixir)\nDESCRIPTION: This code demonstrates how to implement action-specific error handling in Ash GraphQL. It shows a resource definition with multiple actions and an error handler that behaves differently based on the action that caused the error.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/topics/handle-errors.md#2025-04-14_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule MyApp.Resource do\n  use Ash.Resource,\n    domain: [MyApp.Domain],\n    extensions: [AshGraphql]\n    \n  graphql do\n    type :ticket\n    error_handler {MyApp.Resource.GraphqlErrorHandler, :handle_error, []}\n  end\n  \n  actions do\n    deafults [:read, :destroy, :create]\n    create :custom_create do\n      # ...\n      change manage_relationships # ...\n    end\n    \n    update :update do\n      # ...\n    end\n  end\nend\n```\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule MyApp.Resource.GraphqlErrorHandler do\n\n  def handle_error(error, context) do\n    %{action: action} = context\n\n    case action do\n      :custom_create -> custom_create_behavior(error)\n      :update -> update_behavior(error)\n      \n      _ -> deafult_behvaior(error)\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Custom Enum Type Definition\nDESCRIPTION: New way to define custom enum types using Ash.Type.Enum with GraphQL type specifications.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/topics/upgrade.md#2025-04-14_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule MyApp.PostStatus do\n  use Ash.Type.Enum, values: [:active, :archived]\n\n  def graphql_type(_), do: :post_status\n  def graphql_input_type(_), do: :post_status\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Error with Protocol in Ash GraphQL (Elixir)\nDESCRIPTION: This snippet shows how to create a custom error in Ash GraphQL and implement the necessary protocol for it to be displayed in the API. It includes the error definition and the protocol implementation.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/topics/handle-errors.md#2025-04-14_snippet_6\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule Ash.Error.Action.InvalidArgument do\n  @moduledoc \"Used when an invalid value is provided for an action argument\"\n  use Splode.Error, fields: [:field, :message, :value], class: :invalid\n\n  def message(error) do\n    \"\"\"\n    Invalid value provided#{for_field(error)}#{do_message(error)}\n\n    #{inspect(error.value)}\n    \"\"\"\n  end\n  \n  defimpl AshGraphql.Error, for: Ash.Error.Changes.InvalidArgument do\n    def to_error(error) do\n      %{\n        message: error.message,\n        short_message: error.message,\n        code: \"invalid_argument\",\n        vars: Map.new(error.vars),\n        fields: [error.field]\n      }\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using Custom Union Type\nDESCRIPTION: How to use the newly defined custom union type in an attribute.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/topics/upgrade.md#2025-04-14_snippet_8\n\nLANGUAGE: elixir\nCODE:\n```\nattribute :scale, MyApp.Scale\n```\n\n----------------------------------------\n\nTITLE: Warning about using as_mutation? with context modifications\nDESCRIPTION: A warning note explaining that when modifying the context in a query, developers should set `as_mutation?` to true and represent the operation as a mutation in GraphQL.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/topics/modifying-the-resolution.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n> ### as_mutation? {: .warning}\n>\n> If you are modifying the context in a query, then you should also set `as_mutation?` to true and represent this in your graphql as a mutation. See `as_mutation?` for more.\n```\n\n----------------------------------------\n\nTITLE: Ignoring Managed Relationships\nDESCRIPTION: New configuration option to ignore automatic type generation for specific managed relationships.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/topics/upgrade.md#2025-04-14_snippet_10\n\nLANGUAGE: elixir\nCODE:\n```\nmanaged_relationships do\n  managed_relationship :create, :comments, ignore?: true\nend\n```\n\n----------------------------------------\n\nTITLE: JSON Response Structure for Get Ticket Query\nDESCRIPTION: Example JSON response structure from the getTicket GraphQL query, showing how the ticket data is returned with id and subject fields.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/topics/graphql-generation.md#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"getTicket\": {\n      \"id\": \"\",\n      \"subject\": \"\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DateTime Type in AshGraphQL\nDESCRIPTION: Configuration for setting the UTC datetime type representation. The new default is :datetime, but can be set to :naive_datetime if needed.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/topics/upgrade.md#2025-04-14_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\nconfig :ash_graphql, :utc_datetime_type, :naive_datetime\n```\n\n----------------------------------------\n\nTITLE: Custom Union Type Definition\nDESCRIPTION: New way to define custom union types using Ash.Type.NewType with GraphQL type specifications.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/topics/upgrade.md#2025-04-14_snippet_7\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule MyApp.Scale do\n  use Ash.Type.NewType, subtype_of: :union, constraints: [\n    types: [\n      whole: [\n        type: :integer\n      ],\n      fractional: [\n        type: :decimal\n      ]\n    ]\n  ]\n\n  def graphql_type(_), do: :scale\n  def graphql_input_type(_), do: :scale\nend\n```\n\n----------------------------------------\n\nTITLE: Updated Domain Configuration\nDESCRIPTION: Updated configuration using domain instead of api in Absinthe schema definition.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/topics/upgrade.md#2025-04-14_snippet_11\n\nLANGUAGE: elixir\nCODE:\n```\n@domains [MyApp.Domain1, MyApp.Domain2]\n\nuse AshGraphql, domains: @domains\n```\n\n----------------------------------------\n\nTITLE: Customizing Union Type Representation in Ash GraphQL\nDESCRIPTION: This snippet shows how to customize the GraphQL type representation for unions by defining which types should be unnested. This can simplify the output structure for certain union types.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/topics/use-unions-with-graphql.md#2025-04-14_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\n# Put anything in here that does not need to be named/nested with `{type_name: {value: value}}`\ndef graphql_unnested_unions(_constraints), do: [:plate, :chain_mail]\n```\n\n----------------------------------------\n\nTITLE: Legacy Union Type Definition\nDESCRIPTION: Previous way of defining union types that now requires custom type definition.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/topics/upgrade.md#2025-04-14_snippet_6\n\nLANGUAGE: elixir\nCODE:\n```\nattribute :scale, :union, constraints: [\n  types: [\n    whole: [\n      type: :integer\n    ],\n    fractional: [\n      type: :decimal\n    ]\n  ]\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Ash Type for Absinthe Enum in Elixir\nDESCRIPTION: This snippet shows how to create a custom Ash Type that refers to a previously defined Absinthe enum type. It uses Ash.Type.Enum and AshGraphql.Type, and specifies not to define the GraphQL type for this enum.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/topics/use-enums-with-graphql.md#2025-04-14_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\n# Your custom Ash Type\ndefmodule AshGraphql.Test.Status do\n  use Ash.Type.Enum, values: [:open, :closed]\n\n  use AshGraphql.Type\n\n  @impl true\n  # tell Ash not to define the type for that enum\n  def graphql_define_type?(_), do: false\nend\n```\n\n----------------------------------------\n\nTITLE: Legacy Atom Attribute Definition\nDESCRIPTION: Previous way of defining atom-based attributes with constraints that now requires custom type definition.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/topics/upgrade.md#2025-04-14_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\nattribute :post_status, :atom, constraints: [one_of: [:active, :archived]]\n```\n\n----------------------------------------\n\nTITLE: Implementing a Record List-Returning Generic Action in AshGraphql\nDESCRIPTION: Defines a GraphQL query that returns a list of Post records. The action returns 10 random records from the resource where it's defined, demonstrating how to return structured data.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/topics/generic-actions.md#2025-04-14_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\ngraphql do\n  type :post\n\n  queries do\n    action :random_ten, :random_ten\n  end\nend\n\nactions do\n  action :random_ten, {:array, :struct} do\n    constraints items: [instance_of: __MODULE__]\n\n    run fn input, context ->\n      # This is just an example, not an efficient way to get\n      # ten random records\n      with {:ok, records} <-  Ash.read(__MODULE__) do\n        {:ok, Enum.take_random(records, 10)}\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Legacy DateTime Configuration\nDESCRIPTION: Previous configuration that can now be removed as :datetime is the default type.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/topics/upgrade.md#2025-04-14_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\nconfig :ash, :utc_datetime_type, :datetime\n```\n\n----------------------------------------\n\nTITLE: Legacy Non-null Mutation Arguments Config\nDESCRIPTION: Configuration that can be removed as non-null mutation arguments are now always allowed.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/topics/upgrade.md#2025-04-14_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\nconfig :ash_graphql, :allow_non_null_mutation_arguments?, true\n```\n\n----------------------------------------\n\nTITLE: Installing AshAuthentication via Mix\nDESCRIPTION: Command to install ash_authentication and ash_authentication_phoenix packages using the igniter tool.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/topics/authorize-with-graphql.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# installs ash_authentication & ash_authentication_phoenix\nmix igniter.install ash_authentication_phoenix \n```\n\n----------------------------------------\n\nTITLE: Using Custom Enum Type\nDESCRIPTION: How to use the newly defined custom enum type in an attribute.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/topics/upgrade.md#2025-04-14_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\nattribute :post_status, MyApp.PostStatus\n```\n\n----------------------------------------\n\nTITLE: Legacy Managed Relationships Configuration\nDESCRIPTION: Previous way of configuring managed relationships that is no longer needed as auto? defaults to true.\nSOURCE: https://github.com/ash-project/ash_graphql/blob/main/documentation/topics/upgrade.md#2025-04-14_snippet_9\n\nLANGUAGE: elixir\nCODE:\n```\nmanaged_relationships do\n  managed_relationship :create, :comments\nend\n```"
  }
]