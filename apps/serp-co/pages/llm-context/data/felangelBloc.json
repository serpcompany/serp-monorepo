[
  {
    "owner": "felangel",
    "repo": "bloc",
    "content": "TITLE: Using a CounterBloc in Dart\nDESCRIPTION: Demonstrates how to create, interact with, and close a CounterBloc instance. It shows state access, event triggering, and proper cleanup.\nSOURCE: https://github.com/felangel/bloc/blob/master/packages/bloc/README.md#2025-04-16_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> main() async {\n  /// Create a `CounterBloc` instance.\n  final bloc = CounterBloc();\n\n  /// Access the state of the `bloc` via `state`.\n  print(bloc.state); // 0\n\n  /// Interact with the `bloc` to trigger `state` changes.\n  bloc.add(CounterIncrementPressed());\n\n  /// Wait for next iteration of the event-loop\n  /// to ensure event has been processed.\n  await Future.delayed(Duration.zero);\n\n  /// Access the new `state`.\n  print(bloc.state); // 1\n\n  /// Close the `bloc` when it is no longer needed.\n  await bloc.close();\n}\n```\n\n----------------------------------------\n\nTITLE: Using BlocProvider in Flutter\nDESCRIPTION: Demonstrates how to use BlocProvider as a dependency injection widget to provide a bloc to its children. It's used to create new blocs and make them available to the subtree.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/flutter-bloc-concepts.mdx#2025-04-16_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nBlocProvider(\n  create: (BuildContext context) => BlocA(),\n  child: ChildA(),\n)\n```\n\n----------------------------------------\n\nTITLE: BlocBuilder Usage Pattern\nDESCRIPTION: Example showing proper usage of BlocBuilder to scope rebuilds in response to state changes.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/flutter-bloc-concepts.mdx#2025-04-16_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\nWidget build(BuildContext context) {\n  return MaterialApp(\n    home: Scaffold(\n      body: BlocBuilder<MyBloc, MyState>(\n        builder: (context, state) {\n          // Whenever the state changes, only the Text is rebuilt.\n          return Text(state.value);\n        },\n      ),\n    ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Counter Cubit Implementation in Dart\nDESCRIPTION: A Cubit class that manages the counter state with increment and decrement methods. The cubit maintains a simple integer state starting at 0.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-counter.mdx#2025-04-16_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:bloc/bloc.dart';\n\nclass CounterCubit extends Cubit<int> {\n  CounterCubit() : super(0);\n\n  void increment() => emit(state + 1);\n  void decrement() => emit(state - 1);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom BlocObserver in Dart\nDESCRIPTION: Demonstrates how to create a custom BlocObserver that can observe all Bloc instances in an application, including creation, events, changes, transitions, errors, and closure.\nSOURCE: https://github.com/felangel/bloc/blob/master/packages/bloc/README.md#2025-04-16_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nclass MyBlocObserver extends BlocObserver {\n  @override\n  void onCreate(BlocBase bloc) {\n    super.onCreate(bloc);\n    print('onCreate -- ${bloc.runtimeType}');\n  }\n\n  @override\n  void onEvent(Bloc bloc, Object? event) {\n    super.onEvent(bloc, event);\n    print('onEvent -- ${bloc.runtimeType}, $event');\n  }\n\n  @override\n  void onChange(BlocBase bloc, Change change) {\n    super.onChange(bloc, change);\n    print('onChange -- ${bloc.runtimeType}, $change');\n  }\n\n  @override\n  void onTransition(Bloc bloc, Transition transition) {\n    super.onTransition(bloc, transition);\n    print('onTransition -- ${bloc.runtimeType}, $transition');\n  }\n\n  @override\n  void onError(BlocBase bloc, Object error, StackTrace stackTrace) {\n    print('onError -- ${bloc.runtimeType}, $error');\n    super.onError(bloc, error, stackTrace);\n  }\n\n  @override\n  void onClose(BlocBase bloc) {\n    super.onClose(bloc);\n    print('onClose -- ${bloc.runtimeType}');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using BlocProvider Correctly (Good Example 1)\nDESCRIPTION: Demonstrates the correct approach for using BlocProvider to provide a bloc to the widget tree and access it via a Builder.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/faqs.mdx#2025-04-16_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nBlocProvider(\n  create: (_) => BlocA(),\n  child: Builder(\n    builder: (context) {\n      // call BlocProvider.of() in a descendant context\n      final blocA = BlocProvider.of<BlocA>(context);\n      return Container();\n    },\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Using BlocBuilder with Condition in Flutter\nDESCRIPTION: Demonstrates the use of buildWhen parameter in BlocBuilder for fine-grained control over when the builder function is called. The builder is only called when buildWhen returns true.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/flutter-bloc-concepts.mdx#2025-04-16_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nBlocBuilder<BlocA, BlocAState>(\n  buildWhen: (previous, current) {\n    // return true/false to determine whether or not\n    // to rebuild the widget with state\n  },\n  builder: (context, state) {\n    // return widget here based on BlocA's state\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic CounterCubit in Dart\nDESCRIPTION: Implementation of a simple CounterCubit class that manages an integer state with increment functionality. Shows basic Cubit setup with initial state and state mutation.\nSOURCE: https://github.com/felangel/bloc/blob/master/packages/bloc/README.md#2025-04-16_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n/// A `CounterCubit` which manages an `int` as its state.\nclass CounterCubit extends Cubit<int> {\n  /// The initial state of the `CounterCubit` is 0.\n  CounterCubit() : super(0);\n\n  /// When increment is called, the current state\n  /// of the cubit is accessed via `state` and\n  /// a new `state` is emitted via `emit`.\n  void increment() => emit(state + 1);\n}\n```\n\n----------------------------------------\n\nTITLE: Full CounterBloc Implementation\nDESCRIPTION: Complete implementation of a counter using Bloc pattern with events and state management.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/bloc-concepts.mdx#2025-04-16_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nsealed class CounterEvent {}\nclass CounterIncrementPressed extends CounterEvent {}\n\nclass CounterBloc extends Bloc<CounterEvent, int> {\n  CounterBloc() : super(0) {\n    on<CounterIncrementPressed>((event, emit) {\n      emit(state + 1);\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using BlocConsumer in Flutter\nDESCRIPTION: Shows how to use BlocConsumer to both rebuild UI and execute other reactions to state changes in the bloc. It combines the functionality of BlocBuilder and BlocListener.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/flutter-bloc-concepts.mdx#2025-04-16_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nBlocConsumer<BlocA, BlocAState>(\n  listener: (context, state) {\n    // do stuff here based on BlocA's state\n  },\n  builder: (context, state) {\n    // return widget here based on BlocA's state\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Building Login Form UI with Bloc in Flutter\nDESCRIPTION: This code shows the LoginForm widget that renders the login form based on LoginState and interacts with the LoginCubit. It includes form fields for email and password, login buttons, and navigates to the signup page.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-firebase-login.mdx#2025-04-16_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'package:flutter_bloc/flutter_bloc.dart';\nimport 'package:font_awesome_flutter/font_awesome_flutter.dart';\nimport 'package:flutter_firebase_login/login/login.dart';\nimport 'package:flutter_firebase_login/sign_up/sign_up.dart';\nimport 'package:formz/formz.dart';\n\nclass LoginForm extends StatelessWidget {\n  const LoginForm({Key? key}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return BlocListener<LoginCubit, LoginState>(\n      listener: (context, state) {\n        if (state.status.isSubmissionFailure) {\n          ScaffoldMessenger.of(context)\n            ..hideCurrentSnackBar()\n            ..showSnackBar(\n              SnackBar(\n                content: Text(state.errorMessage ?? 'Authentication Failure'),\n              ),\n            );\n        }\n      },\n      child: Align(\n        alignment: const Alignment(0, -1 / 3),\n        child: Column(\n          mainAxisSize: MainAxisSize.min,\n          children: [\n            _EmailInput(),\n            const Padding(padding: EdgeInsets.all(12)),\n            _PasswordInput(),\n            const Padding(padding: EdgeInsets.all(12)),\n            _LoginButton(),\n            const Padding(padding: EdgeInsets.all(12)),\n            _GoogleLoginButton(),\n            const Padding(padding: EdgeInsets.all(12)),\n            _SignUpButton(),\n          ],\n        ),\n      ),\n    );\n  }\n}\n\nclass _EmailInput extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return BlocBuilder<LoginCubit, LoginState>(\n      buildWhen: (previous, current) => previous.email != current.email,\n      builder: (context, state) {\n        return TextField(\n          key: const Key('loginForm_emailInput_textField'),\n          onChanged: (email) => context.read<LoginCubit>().emailChanged(email),\n          keyboardType: TextInputType.emailAddress,\n          decoration: InputDecoration(\n            labelText: 'email',\n            helperText: '',\n            errorText: state.email.invalid ? 'invalid email' : null,\n          ),\n        );\n      },\n    );\n  }\n}\n\nclass _PasswordInput extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return BlocBuilder<LoginCubit, LoginState>(\n      buildWhen: (previous, current) => previous.password != current.password,\n      builder: (context, state) {\n        return TextField(\n          key: const Key('loginForm_passwordInput_textField'),\n          onChanged: (password) =>\n              context.read<LoginCubit>().passwordChanged(password),\n          obscureText: true,\n          decoration: InputDecoration(\n            labelText: 'password',\n            helperText: '',\n            errorText: state.password.invalid ? 'invalid password' : null,\n          ),\n        );\n      },\n    );\n  }\n}\n\nclass _LoginButton extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return BlocBuilder<LoginCubit, LoginState>(\n      buildWhen: (previous, current) => previous.status != current.status,\n      builder: (context, state) {\n        return state.status.isSubmissionInProgress\n            ? const CircularProgressIndicator()\n            : ElevatedButton(\n                key: const Key('loginForm_continue_raisedButton'),\n                style: ElevatedButton.styleFrom(\n                  shape: RoundedRectangleBorder(\n                    borderRadius: BorderRadius.circular(30),\n                  ),\n                  backgroundColor: const Color(0xFFFFD600),\n                ),\n                onPressed: state.status.isValidated\n                    ? () => context.read<LoginCubit>().logInWithCredentials()\n                    : null,\n                child: const Text('LOGIN'),\n              );\n      },\n    );\n  }\n}\n\nclass _GoogleLoginButton extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    final theme = Theme.of(context);\n    return ElevatedButton.icon(\n      key: const Key('loginForm_googleLogin_raisedButton'),\n      label: const Text(\n        'SIGN IN WITH GOOGLE',\n        style: TextStyle(color: Colors.white),\n      ),\n      style: ElevatedButton.styleFrom(\n        shape: RoundedRectangleBorder(\n          borderRadius: BorderRadius.circular(30),\n        ),\n        backgroundColor: theme.colorScheme.secondary,\n      ),\n      icon: const Icon(FontAwesomeIcons.google, color: Colors.white),\n      onPressed: () => context.read<LoginCubit>().logInWithGoogle(),\n    );\n  }\n}\n\nclass _SignUpButton extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    final theme = Theme.of(context);\n    return TextButton(\n      key: const Key('loginForm_createAccount_flatButton'),\n      onPressed: () => Navigator.of(context).push<void>(SignUpPage.route()),\n      child: Text(\n        'CREATE ACCOUNT',\n        style: TextStyle(color: theme.primaryColor),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Multi-Bloc Builder Pattern\nDESCRIPTION: Example showing how to use Builder with context.watch to observe multiple blocs.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/flutter-bloc-concepts.mdx#2025-04-16_snippet_19\n\nLANGUAGE: dart\nCODE:\n```\nBuilder(\n  builder: (context) {\n    final stateA = context.watch<BlocA>().state;\n    final stateB = context.watch<BlocB>().state;\n    final stateC = context.watch<BlocC>().state;\n\n    // return a Widget which depends on the state of BlocA, BlocB, and BlocC\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Using MultiBlocProvider in Flutter\nDESCRIPTION: Demonstrates how to use MultiBlocProvider to merge multiple BlocProvider widgets into one, improving readability and eliminating nested BlocProviders.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/flutter-bloc-concepts.mdx#2025-04-16_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nMultiBlocProvider(\n  providers: [\n    BlocProvider<BlocA>(\n      create: (BuildContext context) => BlocA(),\n    ),\n    BlocProvider<BlocB>(\n      create: (BuildContext context) => BlocB(),\n    ),\n    BlocProvider<BlocC>(\n      create: (BuildContext context) => BlocC(),\n    ),\n  ],\n  child: ChildA(),\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Bloc Usage Example\nDESCRIPTION: Shows basic initialization and usage of a CounterBloc including event handling and state access.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/bloc-concepts.mdx#2025-04-16_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nfinal bloc = CounterBloc();\nprint(bloc.state); // 0\nbloc.add(CounterIncrementPressed());\nawait Future.delayed(Duration.zero);\nprint(bloc.state); // 1\nawait bloc.close();\n```\n\n----------------------------------------\n\nTITLE: Counter View Implementation in Dart\nDESCRIPTION: The main view component that renders the counter and handles user interactions. Uses BlocBuilder to rebuild on state changes and context.read for accessing the CounterCubit.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-counter.mdx#2025-04-16_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'package:flutter_bloc/flutter_bloc.dart';\n\nclass CounterView extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('Counter')),\n      body: Center(\n        child: BlocBuilder<CounterCubit, int>(\n          builder: (context, state) {\n            return Text(\n              '$state',\n              style: Theme.of(context).textTheme.displayLarge,\n            );\n          },\n        ),\n      ),\n      floatingActionButton: Column(\n        crossAxisAlignment: CrossAxisAlignment.end,\n        mainAxisAlignment: MainAxisAlignment.end,\n        children: <Widget>[\n          FloatingActionButton(\n            child: const Icon(Icons.add),\n            onPressed: () => context.read<CounterCubit>().increment(),\n          ),\n          const SizedBox(height: 8),\n          FloatingActionButton(\n            child: const Icon(Icons.remove),\n            onPressed: () => context.read<CounterCubit>().decrement(),\n          ),\n        ],\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic CounterCubit Implementation\nDESCRIPTION: Demonstrates the creation of a simple CounterCubit that manages an integer state and provides an increment method.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/bloc-concepts.mdx#2025-04-16_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass CounterCubit extends Cubit<int> {\n  CounterCubit() : super(0);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Business Logic Component (Bloc) in Dart\nDESCRIPTION: A Bloc class that represents the business logic layer. It receives events from the presentation layer, interacts with repositories, and emits new states back to the presentation layer.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/architecture.mdx#2025-04-16_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass BusinessLogicComponent extends Bloc<MyEvent, MyState> {\n  final Repository repository;\n\n  BusinessLogicComponent(this.repository) : super(MyState.initial()) {\n    on<AppStarted>((event, emit) async {\n      emit(MyState.loading());\n      try {\n        final data = await repository.getAllDataThatMeetsRequirements();\n        emit(MyState.success(data));\n      } catch (error) {\n        emit(MyState.failure(error));\n      }\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Bloc with Stream Subscription in Dart\nDESCRIPTION: A bloc that subscribes to a stream from a repository and updates its state for each new data item. This demonstrates how multiple blocs can connect through a shared data source.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/architecture.mdx#2025-04-16_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nclass AppIdeaRankingBloc extends Bloc<AppIdeaRankingEvent, AppIdeaRankingState> {\n  final AppIdeasRepository _appIdeasRepository;\n  late final StreamSubscription<AppIdea> _ideasSubscription;\n\n  AppIdeaRankingBloc(this._appIdeasRepository) : super(AppIdeaRankingState.initial()) {\n    on<_RankAppIdea>((event, emit) {\n      // Determine app idea rank based on some criteria\n      final ideaRank = _rankIdea(event.idea);\n      \n      // Emit a new state with the ranked idea\n      emit(AppIdeaRankingState.ranked(event.idea, ideaRank));\n    });\n\n    // Subscribe to app ideas stream when the bloc is created\n    _ideasSubscription = _appIdeasRepository.getAppIdeas().listen(\n      (idea) => add(_RankAppIdea(idea)),\n    );\n  }\n\n  int _rankIdea(AppIdea idea) {\n    // Algorithm to rank the idea\n    return idea.title.length + idea.description.length;\n  }\n\n  @override\n  Future<void> close() {\n    _ideasSubscription.cancel();\n    return super.close();\n  }\n}\n\n// Private event class\nclass _RankAppIdea extends AppIdeaRankingEvent {\n  final AppIdea idea;\n  \n  const _RankAppIdea(this.idea);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Reactive Repository in Dart\nDESCRIPTION: A repository that provides a Stream of data, allowing multiple blocs to listen to the same data source independently. This facilitates bloc communication through the domain layer.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/architecture.mdx#2025-04-16_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nclass AppIdeasRepository {\n  Stream<AppIdea> getAppIdeas() async* {\n    final ideas = [\n      AppIdea(\"Delivery App\", \"An app for food delivery\"),\n      AppIdea(\"Doctor Appointment\", \"Book doctor appointments\"),\n      AppIdea(\"Learning Platform\", \"An app to learn programming\")\n    ];\n    \n    for (final idea in ideas) {\n      yield idea;\n      await Future.delayed(const Duration(seconds: 1));\n    }\n    \n    // After we've gone through our ideas once,\n    // start again from the beginning\n    yield* getAppIdeas();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CounterBloc with Event Handling\nDESCRIPTION: Example of creating a Bloc class that handles CounterEvents to manage counter state, demonstrating event-driven state management.\nSOURCE: https://github.com/felangel/bloc/blob/master/packages/bloc/README.md#2025-04-16_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n/// The events which `CounterBloc` will react to.\nsealed class CounterEvent {}\n\n/// Notifies bloc to increment state.\nfinal class CounterIncrementPressed extends CounterEvent {}\n\n/// A `CounterBloc` which handles converting `CounterEvent`s into `int`s.\nclass CounterBloc extends Bloc<CounterEvent, int> {\n  /// The initial state of the `CounterBloc` is 0.\n  CounterBloc() : super(0) {\n    /// When a `CounterIncrementPressed` event is added,\n    /// the current `state` of the bloc is accessed via the `state` property\n    /// and a new state is emitted via `emit`.\n    on<CounterIncrementPressed>((event, emit) => emit(state + 1));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building PostsList with Infinite Scrolling\nDESCRIPTION: Implements the PostsList widget with a ScrollController to detect when to load more posts and uses BlocBuilder to respond to state changes.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-infinite-list.mdx#2025-04-16_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\n// Content of lib/posts/view/posts_list.dart\n```\n\n----------------------------------------\n\nTITLE: Implementing a CounterBloc with Observation Methods in Dart\nDESCRIPTION: Shows how to create a CounterBloc that overrides onEvent, onChange, onTransition, and onError methods for observation and debugging purposes.\nSOURCE: https://github.com/felangel/bloc/blob/master/packages/bloc/README.md#2025-04-16_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nsealed class CounterEvent {}\n\nfinal class CounterIncrementPressed extends CounterEvent {}\n\nclass CounterBloc extends Bloc<CounterEvent, int> {\n  CounterBloc() : super(0) {\n    on<CounterIncrementPressed>((event, emit) => emit(state + 1));\n  }\n\n  @override\n  void onEvent(CounterEvent event) {\n    super.onEvent(event);\n    print(event);\n  }\n\n  @override\n  void onChange(Change<int> change) {\n    super.onChange(change);\n    print(change);\n  }\n\n  @override\n  void onTransition(Transition<CounterEvent, int> transition) {\n    super.onTransition(transition);\n    print(transition);\n  }\n\n  @override\n  void onError(Object error, StackTrace stackTrace) {\n    print('$error, $stackTrace');\n    super.onError(error, stackTrace);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up a Global BlocObserver in Dart\nDESCRIPTION: Shows how to set up a global BlocObserver for observing all Bloc instances in a Dart application.\nSOURCE: https://github.com/felangel/bloc/blob/master/packages/bloc/README.md#2025-04-16_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  Bloc.observer = MyBlocObserver();\n  // Use blocs...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CounterBloc in Dart\nDESCRIPTION: A simple implementation of CounterBloc that handles increment and decrement events. This bloc manages a counter state and demonstrates the basic structure of a bloc with events and state changes.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/testing.mdx#2025-04-16_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:bloc/bloc.dart';\n\n// Events\nsealed class CounterEvent {}\nfinal class CounterIncrementPressed extends CounterEvent {}\nfinal class CounterDecrementPressed extends CounterEvent {}\n\nclass CounterBloc extends Bloc<CounterEvent, int> {\n  CounterBloc() : super(0) {\n    on<CounterIncrementPressed>((event, emit) => emit(state + 1));\n    on<CounterDecrementPressed>((event, emit) => emit(state - 1));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using BlocBuilder in Flutter\nDESCRIPTION: Demonstrates how to use BlocBuilder to build a widget in response to new states. BlocBuilder automatically performs a lookup using BlocProvider and the current BuildContext if no bloc is specified.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/flutter-bloc-concepts.mdx#2025-04-16_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nBlocBuilder<BlocA, BlocAState>(\n  builder: (context, state) {\n    // return widget here based on BlocA's state\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Creating GitHub Search Bloc with Debounce in Dart\nDESCRIPTION: This code implements a GithubSearchBloc using the Bloc pattern with stream transformers for debouncing search events. It handles TextChanged events, queries the GitHub repository, and emits appropriate states based on results.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/github-search.mdx#2025-04-16_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:bloc/bloc.dart';\nimport 'package:bloc_concurrency/bloc_concurrency.dart';\nimport 'package:stream_transform/stream_transform.dart';\n\nimport '../github_repository.dart';\nimport '../models/models.dart';\nimport 'github_search_event.dart';\nimport 'github_search_state.dart';\n\nconst _duration = Duration(milliseconds: 300);\n\nEventTransformer<Event> debounce<Event>(Duration duration) {\n  return (events, mapper) => events.debounce(duration).switchMap(mapper);\n}\n\nclass GithubSearchBloc extends Bloc<GithubSearchEvent, GithubSearchState> {\n  GithubSearchBloc({required this.githubRepository})\n      : super(SearchStateEmpty()) {\n    on<TextChanged>(\n      _onTextChanged,\n      transformer: debounce(_duration),\n    );\n  }\n\n  final GithubRepository githubRepository;\n\n  Future<void> _onTextChanged(\n    TextChanged event,\n    Emitter<GithubSearchState> emit,\n  ) async {\n    final text = event.text;\n\n    if (text.isEmpty) return emit(SearchStateEmpty());\n\n    emit(SearchStateLoading());\n\n    try {\n      final results = await githubRepository.search(text);\n      emit(SearchStateSuccess(results.items));\n    } catch (error) {\n      emit(error is SearchResultError\n          ? SearchStateError(error.message)\n          : const SearchStateError('something went wrong'));\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Repository Layer in Dart\nDESCRIPTION: A repository class that acts as a wrapper around one or more data providers. It can perform transformations on the data before passing it to the business logic layer.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/architecture.mdx#2025-04-16_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass Repository {\n  final DataProviderA dataProviderA;\n  final DataProviderB dataProviderB;\n  \n  Repository(this.dataProviderA, this.dataProviderB);\n  \n  Future<Data> getAllDataThatMeetsRequirements() async {\n    final rawDataA = await dataProviderA.readData();\n    final rawDataB = await dataProviderB.readData();\n    \n    final filteredData = _filterData(rawDataA, rawDataB);\n    return filteredData;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Bloc Unit Testing in Dart\nDESCRIPTION: Demonstrates basic bloc testing using blocTest helper, including empty state and single increment tests.\nSOURCE: https://github.com/felangel/bloc/blob/master/packages/bloc_test/README.md#2025-04-16_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\ngroup('CounterBloc', () {\n  blocTest(\n    'emits [] when nothing is added',\n    build: () => CounterBloc(),\n    expect: () => [],\n  );\n\n  blocTest(\n    'emits [1] when CounterIncrementPressed is added',\n    build: () => CounterBloc(),\n    act: (bloc) => bloc.add(CounterIncrementPressed()),\n    expect: () => [1],\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of a Bloc\nDESCRIPTION: This code demonstrates the basic usage of a CounterBloc. It creates an instance, checks the initial state, adds an event to trigger a state change, and then checks the updated state before closing the Bloc.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/pt-br/bloc-concepts.mdx#2025-04-16_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> main() async {\n  final bloc = CounterBloc();\n  \n  print(bloc.state); // 0\n  \n  bloc.add(CounterIncrementPressed());\n  \n  await Future.delayed(Duration.zero);\n  \n  print(bloc.state); // 1\n  \n  await bloc.close();\n}\n```\n\n----------------------------------------\n\nTITLE: Using BlocListener in Flutter\nDESCRIPTION: Shows how to use BlocListener to perform actions in response to state changes, such as navigation or showing dialogs. The listener is called once for each state change.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/flutter-bloc-concepts.mdx#2025-04-16_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nBlocListener<BlocA, BlocAState>(\n  listener: (context, state) {\n    // do stuff here based on BlocA's state\n  },\n  child: Container(),\n)\n```\n\n----------------------------------------\n\nTITLE: Using MultiRepositoryProvider in Flutter\nDESCRIPTION: Demonstrates how to use MultiRepositoryProvider to simplify the provision of multiple repositories without nesting.\nSOURCE: https://github.com/felangel/bloc/blob/master/packages/flutter_bloc/README.md#2025-04-16_snippet_24\n\nLANGUAGE: dart\nCODE:\n```\nMultiRepositoryProvider(\n  providers: [\n    RepositoryProvider<RepositoryA>(\n      create: (context) => RepositoryA(),\n    ),\n    RepositoryProvider<RepositoryB>(\n      create: (context) => RepositoryB(),\n    ),\n    RepositoryProvider<RepositoryC>(\n      create: (context) => RepositoryC(),\n    ),\n  ],\n  child: ChildA(),\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing BlocConsumer in Flutter\nDESCRIPTION: Creates a BlocConsumer widget that combines the functionality of BlocBuilder and BlocListener, allowing both UI rebuilds and side effects in response to state changes.\nSOURCE: https://github.com/felangel/bloc/blob/master/packages/flutter_bloc/README.md#2025-04-16_snippet_18\n\nLANGUAGE: dart\nCODE:\n```\nBlocConsumer<BlocA, BlocAState>(\n  listener: (context, state) {\n    // do stuff here based on BlocA's state\n  },\n  builder: (context, state) {\n    // return widget here based on BlocA's state\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Using BlocConsumer with Conditional Builds and Listens in Flutter\nDESCRIPTION: Demonstrates how to use BlocConsumer with listenWhen and buildWhen for fine-grained control over when to rebuild UI or trigger side effects.\nSOURCE: https://github.com/felangel/bloc/blob/master/packages/flutter_bloc/README.md#2025-04-16_snippet_19\n\nLANGUAGE: dart\nCODE:\n```\nBlocConsumer<BlocA, BlocAState>(\n  listenWhen: (previous, current) {\n    // return true/false to determine whether or not\n    // to invoke listener with state\n  },\n  listener: (context, state) {\n    // do stuff here based on BlocA's state\n  },\n  buildWhen: (previous, current) {\n    // return true/false to determine whether or not\n    // to rebuild the widget with state\n  },\n  builder: (context, state) {\n    // return widget here based on BlocA's state\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Accessing User ID and Handling Logout in Flutter with BLoC Pattern\nDESCRIPTION: This code snippet shows how to implement a HomePage in Flutter that accesses the current user's ID from AuthenticationBloc using context.select() and handles logout by dispatching an AuthenticationLogoutRequested event to the AuthenticationBloc when the logout button is tapped.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-login.mdx#2025-04-16_snippet_21\n\nLANGUAGE: dart\nCODE:\n```\ncontext.select((AuthenticationBloc bloc) => bloc.state.user.id)\n```\n\n----------------------------------------\n\nTITLE: Connecting Blocs through Presentation Layer in Dart\nDESCRIPTION: A proper implementation of bloc-to-bloc communication through the presentation layer using BlocListener. This approach maintains loose coupling between blocs.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/architecture.mdx#2025-04-16_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nclass MyCompositeWidget extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return BlocListener<FirstBloc, FirstState>(\n      listener: (context, state) {\n        // When FirstBloc's state changes\n        // add an event to SecondBloc\n        context.read<SecondBloc>().add(SecondEvent());\n      },\n      child: Container(),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a HydratedCubit in Dart\nDESCRIPTION: Demonstrates how to create a HydratedCubit that automatically persists and restores its state. It includes methods for incrementing the state and serializing/deserializing the state to/from JSON.\nSOURCE: https://github.com/felangel/bloc/blob/master/packages/hydrated_bloc/README.md#2025-04-16_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass CounterCubit extends HydratedCubit<int> {\n  CounterCubit() : super(0);\n\n  void increment() => emit(state + 1);\n\n  @override\n  int fromJson(Map<String, dynamic> json) => json['value'] as int;\n\n  @override\n  Map<String, int> toJson(int state) => { 'value': state };\n}\n```\n\n----------------------------------------\n\nTITLE: Using CounterCubit in Dart Application\nDESCRIPTION: Example showing how to instantiate, use, and manage a CounterCubit instance, including state access and cleanup.\nSOURCE: https://github.com/felangel/bloc/blob/master/packages/bloc/README.md#2025-04-16_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  /// Create a `CounterCubit` instance.\n  final cubit = CounterCubit();\n\n  /// Access the state of the `cubit` via `state`.\n  print(cubit.state); // 0\n\n  /// Interact with the `cubit` to trigger `state` changes.\n  cubit.increment();\n\n  /// Access the new `state`.\n  print(cubit.state); // 1\n\n  /// Close the `cubit` when it is no longer needed.\n  cubit.close();\n}\n```\n\n----------------------------------------\n\nTITLE: Complete CounterCubit Implementation\nDESCRIPTION: This code shows the complete implementation of a CounterCubit, which is a simpler approach to state management. It requires only defining the state type and methods that emit new states.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/pt-br/bloc-concepts.mdx#2025-04-16_snippet_26\n\nLANGUAGE: dart\nCODE:\n```\nclass CounterCubit extends Cubit<int> {\n  CounterCubit() : super(0);\n\n  void increment() => emit(state + 1);\n}\n```\n\n----------------------------------------\n\nTITLE: Weather Cubit Implementation in Dart\nDESCRIPTION: Implementation of the WeatherCubit class using HydratedCubit for state persistence, including methods for fetching weather, refreshing, and toggling units.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-weather.mdx#2025-04-16_snippet_25\n\nLANGUAGE: dart\nCODE:\n```\n// Code not provided in the original text\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Repository\nDESCRIPTION: The AuthenticationRepository class that abstracts the authentication implementation details. It provides methods for sign up, login with email/password, login with Google, and logout functionality, exposing a Stream of User objects.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-firebase-login.mdx#2025-04-16_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:async';\n\nimport 'package:authentication_repository/authentication_repository.dart';\nimport 'package:cache/cache.dart';\nimport 'package:firebase_auth/firebase_auth.dart' as firebase_auth;\nimport 'package:firebase_auth_platform_interface/firebase_auth_platform_interface.dart';\nimport 'package:flutter/foundation.dart' show kIsWeb;\nimport 'package:google_sign_in/google_sign_in.dart';\nimport 'package:meta/meta.dart';\n\n/// {@template sign_up_with_email_and_password_failure}\n/// Thrown if during the sign up process if a failure occurs.\n/// {@endtemplate}\nclass SignUpWithEmailAndPasswordFailure implements Exception {\n  /// {@macro sign_up_with_email_and_password_failure}\n  const SignUpWithEmailAndPasswordFailure([\n    this.message = 'An unknown exception occurred.',\n  ]);\n\n  /// Create an authentication message\n  /// from a firebase authentication exception code.\n  /// https://pub.dev/documentation/firebase_auth/latest/firebase_auth/FirebaseAuth/createUserWithEmailAndPassword.html\n  factory SignUpWithEmailAndPasswordFailure.fromCode(String code) {\n    switch (code) {\n      case 'invalid-email':\n        return const SignUpWithEmailAndPasswordFailure(\n          'Email is not valid or badly formatted.',\n        );\n      case 'user-disabled':\n        return const SignUpWithEmailAndPasswordFailure(\n          'This user has been disabled. Please contact support for help.',\n        );\n      case 'email-already-in-use':\n        return const SignUpWithEmailAndPasswordFailure(\n          'An account already exists for that email.',\n        );\n      case 'operation-not-allowed':\n        return const SignUpWithEmailAndPasswordFailure(\n          'Operation is not allowed.  Please contact support.',\n        );\n      case 'weak-password':\n        return const SignUpWithEmailAndPasswordFailure(\n          'Please enter a stronger password.',\n        );\n      default:\n        return const SignUpWithEmailAndPasswordFailure();\n    }\n  }\n\n  /// The associated error message.\n  final String message;\n}\n\n/// {@template log_in_with_email_and_password_failure}\n/// Thrown during the login process if a failure occurs.\n/// https://pub.dev/documentation/firebase_auth/latest/firebase_auth/FirebaseAuth/signInWithEmailAndPassword.html\n/// {@endtemplate}\nclass LogInWithEmailAndPasswordFailure implements Exception {\n  /// {@macro log_in_with_email_and_password_failure}\n  const LogInWithEmailAndPasswordFailure([\n    this.message = 'An unknown exception occurred.',\n  ]);\n\n  /// Create an authentication message\n  /// from a firebase authentication exception code.\n  factory LogInWithEmailAndPasswordFailure.fromCode(String code) {\n    switch (code) {\n      case 'invalid-email':\n        return const LogInWithEmailAndPasswordFailure(\n          'Email is not valid or badly formatted.',\n        );\n      case 'user-disabled':\n        return const LogInWithEmailAndPasswordFailure(\n          'This user has been disabled. Please contact support for help.',\n        );\n      case 'user-not-found':\n        return const LogInWithEmailAndPasswordFailure(\n          'Email is not found, please create an account.',\n        );\n      case 'wrong-password':\n        return const LogInWithEmailAndPasswordFailure(\n          'Incorrect password, please try again.',\n        );\n      default:\n        return const LogInWithEmailAndPasswordFailure();\n    }\n  }\n\n  /// The associated error message.\n  final String message;\n}\n\n/// {@template log_in_with_google_failure}\n/// Thrown during the sign in with google process if a failure occurs.\n/// https://pub.dev/documentation/firebase_auth/latest/firebase_auth/FirebaseAuth/signInWithCredential.html\n/// {@endtemplate}\nclass LogInWithGoogleFailure implements Exception {\n  /// {@macro log_in_with_google_failure}\n  const LogInWithGoogleFailure([\n    this.message = 'An unknown exception occurred.',\n  ]);\n\n  /// Create an authentication message\n  /// from a firebase authentication exception code.\n  factory LogInWithGoogleFailure.fromCode(String code) {\n    switch (code) {\n      case 'account-exists-with-different-credential':\n        return const LogInWithGoogleFailure(\n          'Account exists with different credentials.',\n        );\n      case 'invalid-credential':\n        return const LogInWithGoogleFailure(\n          'The credential received is malformed or has expired.',\n        );\n      case 'operation-not-allowed':\n        return const LogInWithGoogleFailure(\n          'Operation is not allowed.  Please contact support.',\n        );\n      case 'user-disabled':\n        return const LogInWithGoogleFailure(\n          'This user has been disabled. Please contact support for help.',\n        );\n      case 'user-not-found':\n        return const LogInWithGoogleFailure(\n          'Email is not found, please create an account.',\n        );\n      case 'wrong-password':\n        return const LogInWithGoogleFailure(\n          'Incorrect password, please try again.',\n        );\n      case 'invalid-verification-code':\n        return const LogInWithGoogleFailure(\n          'The credential verification code received is invalid.',\n        );\n      case 'invalid-verification-id':\n        return const LogInWithGoogleFailure(\n          'The credential verification ID received is invalid.',\n        );\n      default:\n        return const LogInWithGoogleFailure();\n    }\n  }\n\n  /// The associated error message.\n  final String message;\n}\n\n/// {@template log_out_failure}\n/// Thrown during the logout process if a failure occurs.\n/// {@endtemplate}\nclass LogOutFailure implements Exception {}\n\n/// {@template authentication_repository}\n/// Repository which manages user authentication.\n/// {@endtemplate}\nclass AuthenticationRepository {\n  /// {@macro authentication_repository}\n  AuthenticationRepository({\n    CacheClient? cache,\n    firebase_auth.FirebaseAuth? firebaseAuth,\n    GoogleSignIn? googleSignIn,\n  })\n      : _cache = cache ?? CacheClient(),\n        _firebaseAuth = firebaseAuth ?? firebase_auth.FirebaseAuth.instance,\n        _googleSignIn = googleSignIn ?? GoogleSignIn.standard();\n\n  final CacheClient _cache;\n  final firebase_auth.FirebaseAuth _firebaseAuth;\n  final GoogleSignIn _googleSignIn;\n\n  /// Whether or not the current environment is web\n  /// Should only be overridden for testing purposes. Otherwise,\n  /// defaults to [kIsWeb]\n  @visibleForTesting\n  bool isWeb = kIsWeb;\n\n  /// User cache key.\n  /// Should only be used for testing purposes.\n  @visibleForTesting\n  static const userCacheKey = '__user_cache_key__';\n\n  /// Stream of [User] which will emit the current user when\n  /// the authentication state changes.\n  ///\n  /// Emits [User.empty] if the user is not authenticated.\n  Stream<User> get user {\n    return _firebaseAuth.authStateChanges().map((firebaseUser) {\n      final user = firebaseUser == null ? User.empty : firebaseUser.toUser;\n      _cache.write(key: userCacheKey, value: user);\n      return user;\n    });\n  }\n\n  /// Returns the current cached user.\n  /// Defaults to [User.empty] if there is no cached user.\n  User get currentUser {\n    return _cache.read<User>(key: userCacheKey) ?? User.empty;\n  }\n\n  /// Creates a new user with the provided [email] and [password].\n  ///\n  /// Throws a [SignUpWithEmailAndPasswordFailure] if an exception occurs.\n  Future<void> signUp({required String email, required String password}) async {\n    try {\n      await _firebaseAuth.createUserWithEmailAndPassword(\n        email: email,\n        password: password,\n      );\n    } on FirebaseAuthException catch (e) {\n      throw SignUpWithEmailAndPasswordFailure.fromCode(e.code);\n    } catch (_) {\n      throw const SignUpWithEmailAndPasswordFailure();\n    }\n  }\n\n  /// Starts the Sign In with Google Flow.\n  ///\n  /// Throws a [LogInWithGoogleFailure] if an exception occurs.\n  Future<void> logInWithGoogle() async {\n    try {\n      late final firebase_auth.AuthCredential credential;\n      if (isWeb) {\n        final googleProvider = firebase_auth.GoogleAuthProvider();\n        final userCredential = await _firebaseAuth.signInWithPopup(\n          googleProvider,\n        );\n        credential = userCredential.credential!;\n      } else {\n        final googleUser = await _googleSignIn.signIn();\n        final googleAuth = await googleUser!.authentication;\n        credential = firebase_auth.GoogleAuthProvider.credential(\n          accessToken: googleAuth.accessToken,\n          idToken: googleAuth.idToken,\n        );\n      }\n\n      await _firebaseAuth.signInWithCredential(credential);\n    } on FirebaseAuthException catch (e) {\n      throw LogInWithGoogleFailure.fromCode(e.code);\n    } catch (_) {\n      throw const LogInWithGoogleFailure();\n    }\n  }\n\n  /// Signs in with the provided [email] and [password].\n  ///\n  /// Throws a [LogInWithEmailAndPasswordFailure] if an exception occurs.\n  Future<void> logInWithEmailAndPassword({\n    required String email,\n    required String password,\n  }) async {\n    try {\n      await _firebaseAuth.signInWithEmailAndPassword(\n        email: email,\n        password: password,\n      );\n    } on FirebaseAuthException catch (e) {\n      throw LogInWithEmailAndPasswordFailure.fromCode(e.code);\n    } catch (_) {\n      throw const LogInWithEmailAndPasswordFailure();\n    }\n  }\n\n  /// Signs out the current user which will emit\n  /// [User.empty] from the [user] Stream.\n  ///\n  /// Throws a [LogOutFailure] if an exception occurs.\n  Future<void> logOut() async {\n    try {\n      await Future.wait([\n        _firebaseAuth.signOut(),\n        _googleSignIn.signOut(),\n      ]);\n    } catch (_) {\n      throw LogOutFailure();\n    }\n  }\n}\n\nextension on firebase_auth.User {\n  /// Maps a [firebase_auth.User] into a [User].\n  User get toUser {\n    return User(\n      id: uid,\n      email: email,\n      name: displayName,\n      photo: photoURL,\n    );\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Recommended State Naming Using Subclasses in Dart\nDESCRIPTION: Examples of proper state naming using subclasses following the convention of 'BlocSubject + Verb (action) + State', where State is one of: Initial, Success, Failure, or InProgress.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/naming-conventions.mdx#2025-04-16_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nabstract class CounterState {}\n\n// Initial state follows convention: BlocSubject + Initial\nclass CounterInitial extends CounterState {}\n\nclass CounterLoadInProgress extends CounterState {}\n\nclass CounterLoadSuccess extends CounterState {\n  const CounterLoadSuccess(this.count);\n  final int count;\n}\n\nclass CounterLoadFailure extends CounterState {\n  const CounterLoadFailure(this.error);\n  final Object error;\n}\n```\n\n----------------------------------------\n\nTITLE: Using BlocSelector in Flutter\nDESCRIPTION: Shows how to use BlocSelector to filter updates by selecting a new value based on the current bloc state. It prevents unnecessary builds if the selected value doesn't change.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/flutter-bloc-concepts.mdx#2025-04-16_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nBlocSelector<BlocA, BlocAState, SelectedState>(\n  selector: (state) {\n    // return selected state based on the current state\n  },\n  builder: (context, state) {\n    // return widget here based on the selected state\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Using listenWhen in BlocListener for Fine-grained Control in Flutter\nDESCRIPTION: Demonstrates how to use the listenWhen parameter in BlocListener to control when the listener function is called based on state changes.\nSOURCE: https://github.com/felangel/bloc/blob/master/packages/flutter_bloc/README.md#2025-04-16_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nBlocListener<BlocA, BlocAState>(\n  listenWhen: (previousState, state) {\n    // return true/false to determine whether or not\n    // to call listener with state\n  },\n  listener: (context, state) {\n    // do stuff here based on BlocA's state\n  },\n  child: Container(),\n)\n```\n\n----------------------------------------\n\nTITLE: Registering Event Handlers in a Bloc\nDESCRIPTION: This snippet demonstrates how to register event handlers in a Bloc using the on<Event> method. Event handlers convert incoming events into state changes using the Emitter.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/pt-br/bloc-concepts.mdx#2025-04-16_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nclass CounterBloc extends Bloc<CounterEvent, int> {\n  CounterBloc() : super(0) {\n    on<CounterIncrementPressed>((event, emit) {\n      // event handler logic will go here\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Cubit State Change Observation\nDESCRIPTION: Example of implementing state change and error observation in a Cubit by overriding onChange and onError methods.\nSOURCE: https://github.com/felangel/bloc/blob/master/packages/bloc/README.md#2025-04-16_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass CounterCubit extends Cubit<int> {\n  CounterCubit() : super(0);\n\n  void increment() => emit(state + 1);\n\n  @override\n  void onChange(Change<int> change) {\n    super.onChange(change);\n    print(change);\n  }\n\n  @override\n  void onError(Object error, StackTrace stackTrace) {\n    print('$error, $stackTrace');\n    super.onError(error, stackTrace);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing App Bloc for Global Authentication State\nDESCRIPTION: The app_bloc.dart file implements the application's bloc that manages authentication state changes by subscribing to the user stream from the AuthenticationRepository and handling logout events.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-firebase-login.mdx#2025-04-16_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:async';\n\nimport 'package:authentication_repository/authentication_repository.dart';\nimport 'package:bloc/bloc.dart';\nimport 'package:equatable/equatable.dart';\nimport 'package:flutter_firebase_login/app/app.dart';\nimport 'package:stream_transform/stream_transform.dart';\n\npart 'app_event.dart';\npart 'app_state.dart';\n\nclass AppBloc extends Bloc<AppEvent, AppState> {\n  AppBloc({\n    required AuthenticationRepository authenticationRepository,\n  })\n      : _authenticationRepository = authenticationRepository,\n        super(authenticationRepository.currentUser.isNotEmpty\n            ? AppState.authenticated(authenticationRepository.currentUser)\n            : const AppState.unauthenticated()) {\n    on<AppUserSubscriptionRequested>(_onUserSubscriptionRequested);\n    on<AppLogoutPressed>(_onLogoutPressed);\n  }\n\n  final AuthenticationRepository _authenticationRepository;\n\n  void _onUserSubscriptionRequested(\n    AppUserSubscriptionRequested event,\n    Emitter<AppState> emit,\n  ) {\n    emit.onEach<User>(\n      _authenticationRepository.user,\n      onData: (user) => add(AppUserChanged(user)),\n      onError: (_, __) => add(const AppLogoutPressed()),\n    );\n  }\n\n  void _onLogoutPressed(AppLogoutPressed event, Emitter<AppState> emit) {\n    unauthenticated() => emit(const AppState.unauthenticated());\n    try {\n      _authenticationRepository.logOut();\n      unauthenticated();\n    } catch (_) {\n      unauthenticated();\n    }\n  }\n\n  void _onUserChanged(AppUserChanged event, Emitter<AppState> emit) {\n    emit(\n      event.user.isNotEmpty\n          ? AppState.authenticated(event.user)\n          : const AppState.unauthenticated(),\n    );\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Initializing BlocProvider in Flutter\nDESCRIPTION: Creates a new BlocProvider widget to provide a bloc to its children. It lazily creates the bloc when first accessed.\nSOURCE: https://github.com/felangel/bloc/blob/master/packages/flutter_bloc/README.md#2025-04-16_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nBlocProvider(\n  create: (BuildContext context) => BlocA(),\n  child: ChildA(),\n);\n```\n\n----------------------------------------\n\nTITLE: Complete CounterBloc Implementation\nDESCRIPTION: Provides a full implementation of a CounterBloc for comparison with CounterCubit.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/ko/bloc-concepts.mdx#2025-04-16_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nsealed class CounterEvent {}\nfinal class CounterIncrementPressed extends CounterEvent {}\n\nclass CounterBloc extends Bloc<CounterEvent, int> {\n  CounterBloc() : super(0) {\n    on<CounterIncrementPressed>((event, emit) => emit(state + 1));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing TimerBloc in Dart\nDESCRIPTION: Complete implementation of the TimerBloc class, handling various timer events and managing the timer state.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-timer.mdx#2025-04-16_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nclass TimerBloc extends Bloc<TimerEvent, TimerState> {\n  TimerBloc({required Ticker ticker})\n      : _ticker = ticker,\n        super(const TimerInitial(_duration)) {\n    on<TimerStarted>(_onStarted);\n    on<TimerPaused>(_onPaused);\n    on<TimerResumed>(_onResumed);\n    on<TimerReset>(_onReset);\n    on<_TimerTicked>(_onTicked);\n  }\n\n  final Ticker _ticker;\n  static const int _duration = 60;\n\n  StreamSubscription<int>? _tickerSubscription;\n\n  @override\n  Future<void> close() {\n    _tickerSubscription?.cancel();\n    return super.close();\n  }\n\n  void _onStarted(TimerStarted event, Emitter<TimerState> emit) {\n    emit(TimerRunInProgress(event.duration));\n    _tickerSubscription?.cancel();\n    _tickerSubscription = _ticker\n        .tick(ticks: event.duration)\n        .listen((duration) => add(_TimerTicked(duration: duration)));\n  }\n\n  void _onPaused(TimerPaused event, Emitter<TimerState> emit) {\n    if (state is TimerRunInProgress) {\n      _tickerSubscription?.pause();\n      emit(TimerRunPause(state.duration));\n    }\n  }\n\n  void _onResumed(TimerResumed resume, Emitter<TimerState> emit) {\n    if (state is TimerRunPause) {\n      _tickerSubscription?.resume();\n      emit(TimerRunInProgress(state.duration));\n    }\n  }\n\n  void _onReset(TimerReset event, Emitter<TimerState> emit) {\n    _tickerSubscription?.cancel();\n    emit(const TimerInitial(_duration));\n  }\n\n  void _onTicked(_TimerTicked event, Emitter<TimerState> emit) {\n    emit(\n      event.duration > 0\n          ? TimerRunInProgress(event.duration)\n          : const TimerRunComplete(),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Providing Existing Bloc with BlocProvider in Flutter\nDESCRIPTION: Uses BlocProvider.value to provide an existing bloc to a new portion of the widget tree, commonly used for new routes.\nSOURCE: https://github.com/felangel/bloc/blob/master/packages/flutter_bloc/README.md#2025-04-16_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nBlocProvider.value(\n  value: BlocProvider.of<BlocA>(context),\n  child: ScreenA(),\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Sequential Event Processing in a Bloc\nDESCRIPTION: This code snippet demonstrates how to implement a CounterBloc with sequential event processing using the bloc_concurrency package. The example shows how to define a CounterBloc class that processes CounterIncrementPressed events one at a time using the sequential event transformer, with a 1-second delay for each event.\nSOURCE: https://github.com/felangel/bloc/blob/master/packages/bloc_concurrency/README.md#2025-04-16_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:bloc/bloc.dart';\nimport 'package:bloc_concurrency/bloc_concurrency.dart';\n\nsealed class CounterEvent {}\n\nfinal class CounterIncrementPressed extends CounterEvent {}\n\nclass CounterBloc extends Bloc<CounterEvent, int> {\n  CounterBloc() : super(0) {\n    on<CounterIncrementPressed>(\n      (event, emit) async {\n        await Future.delayed(Duration(seconds: 1));\n        emit(state + 1);\n      },\n      /// Specify a custom event transformer from `package:bloc_concurrency`\n      /// in this case events will be processed sequentially.\n      transformer: sequential(),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using BlocSelector for Scoped Rebuilds in Flutter Bloc\nDESCRIPTION: Shows the recommended pattern of using BlocSelector to scope rebuilds when a specific part of state changes. This ensures only the necessary widgets are rebuilt when the selected property changes.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/zh-cn/flutter-bloc-concepts.mdx#2025-04-16_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nWidget build(BuildContext context) {\n  return MaterialApp(\n    home: Scaffold(\n      body: BlocSelector<ProfileBloc, ProfileState, String>(\n        selector: (state) => state.name,\n        builder: (context, name) {\n          // 当 state.name 变化时，只有 Text 会重新构建。\n          return Text(name);\n        },\n      ),\n    ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a HydratedBloc in Dart\nDESCRIPTION: Shows how to create a HydratedBloc that automatically persists and restores its state. It includes an event handler for incrementing the state and methods for serializing/deserializing the state.\nSOURCE: https://github.com/felangel/bloc/blob/master/packages/hydrated_bloc/README.md#2025-04-16_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nsealed class CounterEvent {}\nfinal class CounterIncrementPressed extends CounterEvent {}\n\nclass CounterBloc extends HydratedBloc<CounterEvent, int> {\n  CounterBloc() : super(0) {\n    on<CounterIncrementPressed>((event, emit) => emit(state + 1));\n  }\n\n  @override\n  int fromJson(Map<String, dynamic> json) => json['value'] as int;\n\n  @override\n  Map<String, int> toJson(int state) => { 'value': state };\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Data Provider in Dart\nDESCRIPTION: A generic data provider class that provides raw data with CRUD operations. This represents the lowest layer in the bloc architecture, responsible for interacting directly with data sources.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/architecture.mdx#2025-04-16_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass DataProvider {\n  Future<RawData> readData() async {\n    // Read from data source (DB, network, etc)\n  }\n  \n  Future<RawData> createData() async {\n    // Write to data source\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using HydratedMixin in Dart\nDESCRIPTION: Demonstrates how to use HydratedMixin with a Cubit to add hydration capabilities. It requires calling the hydrate() method in the constructor and implementing fromJson and toJson methods.\nSOURCE: https://github.com/felangel/bloc/blob/master/packages/hydrated_bloc/README.md#2025-04-16_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass CounterCubit extends Cubit<int> with HydratedMixin {\n  CounterCubit() : super(0) {\n    hydrate(); // You must always call `hydrate` when using `HydratedMixin`\n  }\n\n  void increment() => emit(state + 1);\n\n  @override\n  int fromJson(Map<String, dynamic> json) => json['value'] as int;\n\n  @override\n  Map<String, int> toJson(int state) => { 'value': state };\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Login State Model for Flutter Authentication\nDESCRIPTION: This code defines the LoginState model used by the LoginCubit. It uses the FormzInput pattern to validate email and password fields and keeps track of the form's submission status.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-firebase-login.mdx#2025-04-16_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:form_inputs/form_inputs.dart';\nimport 'package:formz/formz.dart';\nimport 'package:equatable/equatable.dart';\n\nclass LoginState extends Equatable {\n  const LoginState({\n    this.email = const Email.pure(),\n    this.password = const Password.pure(),\n    this.status = FormzStatus.pure,\n    this.errorMessage,\n  });\n\n  final Email email;\n  final Password password;\n  final FormzStatus status;\n  final String? errorMessage;\n\n  @override\n  List<Object> get props => [email, password, status];\n\n  LoginState copyWith({\n    Email? email,\n    Password? password,\n    FormzStatus? status,\n    String? errorMessage,\n  }) {\n    return LoginState(\n      email: email ?? this.email,\n      password: password ?? this.password,\n      status: status ?? this.status,\n      errorMessage: errorMessage ?? this.errorMessage,\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Authentication State Enum in Dart\nDESCRIPTION: Basic enum definition for representing authentication states in an application.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/bloc-concepts.mdx#2025-04-16_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\n<AuthenticationStateSnippet />\n```\n\n----------------------------------------\n\nTITLE: Implementing CounterPage with BlocBuilder in Flutter\nDESCRIPTION: Shows how to use BlocBuilder to react to state changes in a CounterCubit and build a UI accordingly, including increment and decrement buttons.\nSOURCE: https://github.com/felangel/bloc/blob/master/packages/flutter_bloc/README.md#2025-04-16_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass CounterPage extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('Counter')),\n      body: BlocBuilder<CounterCubit, int>(\n        builder: (context, count) => Center(child: Text('$count')),\n      ),\n      floatingActionButton: Column(\n        crossAxisAlignment: CrossAxisAlignment.end,\n        mainAxisAlignment: MainAxisAlignment.end,\n        children: <Widget>[\n          FloatingActionButton(\n            child: const Icon(Icons.add),\n            onPressed: () => context.read<CounterCubit>().increment(),\n          ),\n          const SizedBox(height: 4),\n          FloatingActionButton(\n            child: const Icon(Icons.remove),\n            onPressed: () => context.read<CounterCubit>().decrement(),\n          ),\n        ],\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Main App Entry Point in Flutter\nDESCRIPTION: This snippet shows the main entry point of the Flutter application. It sets up the RepositoryProvider and BlocProvider for authentication and user management.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-login.mdx#2025-04-16_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  Bloc.observer = const AppBlocObserver();\n\n  final authenticationRepository = AuthenticationRepository();\n  final userRepository = UserRepository();\n\n  runApp(\n    RepositoryProvider.value(\n      value: authenticationRepository,\n      child: BlocProvider(\n        create: (_) => AuthenticationBloc(\n          authenticationRepository: authenticationRepository,\n          userRepository: userRepository,\n        ),\n        child: const App(),\n      ),\n    ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using context.select for Partial State in Flutter\nDESCRIPTION: Demonstrates how to use context.select to retrieve and react to changes in part of a bloc's state.\nSOURCE: https://github.com/felangel/bloc/blob/master/packages/flutter_bloc/README.md#2025-04-16_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nfinal isPositive = context.select((CounterBloc b) => b.state >= 0);\n```\n\n----------------------------------------\n\nTITLE: Using context.select to Listen to Specific State Properties in Flutter Bloc\nDESCRIPTION: Demonstrates using context.select to listen to specific properties of a bloc state. This allows the widget to rebuild only when the selected property changes, rather than on any state change.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/zh-cn/flutter-bloc-concepts.mdx#2025-04-16_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nWidget build(BuildContext context) {\n  final name = context.select((ProfileBloc bloc) => bloc.state.name);\n  return Text(name);\n}\n```\n\n----------------------------------------\n\nTITLE: Using SimpleBlocObserver for Transition Monitoring\nDESCRIPTION: This snippet shows how to set up SimpleBlocObserver to monitor transitions in Blocs. It configures the observer in the main function before creating and using a CounterBloc.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/pt-br/bloc-concepts.mdx#2025-04-16_snippet_19\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> main() async {\n  Bloc.observer = SimpleBlocObserver();\n  \n  final bloc = CounterBloc();\n  \n  bloc.add(CounterIncrementPressed());\n  \n  await Future.delayed(Duration.zero);\n  await bloc.close();\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up CounterBloc Instance for Testing\nDESCRIPTION: Test setup code that creates an instance of CounterBloc for testing and ensures it's properly closed after tests complete. This uses the setUp and tearDown functions to manage test lifecycle.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/testing.mdx#2025-04-16_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nlate CounterBloc counterBloc;\n\nsetUp(() {\n  counterBloc = CounterBloc();\n});\n\ntearDown(() {\n  counterBloc.close();\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing BlocListener with Specific Bloc in Flutter\nDESCRIPTION: Creates a BlocListener widget with a specific bloc instance provided, useful when the bloc is not accessible via BlocProvider.\nSOURCE: https://github.com/felangel/bloc/blob/master/packages/flutter_bloc/README.md#2025-04-16_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nBlocListener<BlocA, BlocAState>(\n  bloc: blocA,\n  listener: (context, state) {\n    // do stuff here based on BlocA's state\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Using MultiBlocProvider in Flutter\nDESCRIPTION: Demonstrates how to use MultiBlocProvider to simplify the provision of multiple blocs without nesting.\nSOURCE: https://github.com/felangel/bloc/blob/master/packages/flutter_bloc/README.md#2025-04-16_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nMultiBlocProvider(\n  providers: [\n    BlocProvider<BlocA>(\n      create: (BuildContext context) => BlocA(),\n    ),\n    BlocProvider<BlocB>(\n      create: (BuildContext context) => BlocB(),\n    ),\n    BlocProvider<BlocC>(\n      create: (BuildContext context) => BlocC(),\n    ),\n  ],\n  child: ChildA(),\n)\n```\n\n----------------------------------------\n\nTITLE: Reading Context in Flutter Bloc Callbacks\nDESCRIPTION: Example showing correct usage of context.read to add events in callbacks like onPressed.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/flutter-bloc-concepts.mdx#2025-04-16_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nonPressed() {\n  context.read<CounterBloc>().add(CounterIncrementPressed()),\n}\n```\n\n----------------------------------------\n\nTITLE: Using context.read to Add Events in Callbacks in Flutter Bloc\nDESCRIPTION: Demonstrates the recommended way to add events to a Bloc using context.read in callback functions. This is the preferred approach for triggering events from user interactions.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/zh-cn/flutter-bloc-concepts.mdx#2025-04-16_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nonPressed() {\n  context.read<CounterBloc>().add(CounterIncrementPressed()),\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CounterBloc with Event Handlers\nDESCRIPTION: Demonstrates creation of a CounterBloc class that handles increment events and state changes.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/bloc-concepts.mdx#2025-04-16_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nclass CounterBloc extends Bloc<CounterEvent, int> {\n  CounterBloc() : super(0) {\n    on<CounterIncrementPressed>((event, emit) {\n      emit(state + 1);\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Global BlocObserver\nDESCRIPTION: Implementation of a custom BlocObserver for global state management observation across all blocs/cubits in the application.\nSOURCE: https://github.com/felangel/bloc/blob/master/packages/bloc/README.md#2025-04-16_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass MyBlocObserver extends BlocObserver {\n  @override\n  void onCreate(BlocBase bloc) {\n    super.onCreate(bloc);\n    print('onCreate -- ${bloc.runtimeType}');\n  }\n\n  @override\n  void onChange(BlocBase bloc, Change change) {\n    super.onChange(bloc, change);\n    print('onChange -- ${bloc.runtimeType}, $change');\n  }\n\n  @override\n  void onError(BlocBase bloc, Object error, StackTrace stackTrace) {\n    print('onError -- ${bloc.runtimeType}, $error');\n    super.onError(bloc, error, stackTrace);\n  }\n\n  @override\n  void onClose(BlocBase bloc) {\n    super.onClose(bloc);\n    print('onClose -- ${bloc.runtimeType}');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Builder with context.watch for Scoped Rebuilds in Flutter Bloc\nDESCRIPTION: Shows how to use a Builder widget with context.watch to scope rebuilds. This limits the rebuild to only the widgets within the Builder when state changes.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/zh-cn/flutter-bloc-concepts.mdx#2025-04-16_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return MaterialApp(\n    home: Scaffold(\n      body: Builder(\n        builder: (context) {\n          // 当状态变化时，只会重新构建 Text。\n          final state = context.watch<MyBloc>().state;\n          return Text(state.value);\n        },\n      ),\n    ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing BlocObserver for Global Change Observation\nDESCRIPTION: This code shows how to create a SimpleBlocObserver by extending BlocObserver and overriding the onChange method. This enables global observation of all state changes across multiple Cubits or Blocs.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/pt-br/bloc-concepts.mdx#2025-04-16_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass SimpleBlocObserver extends BlocObserver {\n  @override\n  void onChange(BlocBase bloc, Change change) {\n    super.onChange(bloc, change);\n    print('${bloc.runtimeType} $change');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Counter Observer Implementation in Dart\nDESCRIPTION: Implementation of a BlocObserver to monitor state changes in the application. The observer overrides onChange to log all state changes for both Bloc and Cubit instances.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-counter.mdx#2025-04-16_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:bloc/bloc.dart';\n\nclass CounterObserver extends BlocObserver {\n  @override\n  void onChange(BlocBase<dynamic> bloc, Change<dynamic> change) {\n    super.onChange(bloc, change);\n    print('${bloc.runtimeType} $change');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using BlocListener with Condition in Flutter\nDESCRIPTION: Shows how to use the listenWhen parameter in BlocListener for fine-grained control over when the listener function is called.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/flutter-bloc-concepts.mdx#2025-04-16_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nBlocListener<BlocA, BlocAState>(\n  listenWhen: (previous, current) {\n    // return true/false to determine whether or not\n    // to call listener with state\n  },\n  listener: (context, state) {\n    // do stuff here based on BlocA's state\n  },\n  child: Container(),\n)\n```\n\n----------------------------------------\n\nTITLE: Building Home Page with User Profile in Flutter\nDESCRIPTION: This code implements the HomePage widget that displays after successful authentication. It shows the user's profile information and provides a logout button that triggers the AuthenticationBloc to log the user out.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-firebase-login.mdx#2025-04-16_snippet_18\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'package:flutter_bloc/flutter_bloc.dart';\nimport 'package:flutter_firebase_login/authentication/authentication.dart';\nimport 'package:flutter_firebase_login/home/home.dart';\n\nclass HomePage extends StatelessWidget {\n  const HomePage({Key? key}) : super(key: key);\n\n  static Page page() => const MaterialPage<void>(child: HomePage());\n\n  @override\n  Widget build(BuildContext context) {\n    final textTheme = Theme.of(context).textTheme;\n    final user = context.select((AuthenticationBloc bloc) => bloc.state.user);\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('Home'),\n        actions: <Widget>[\n          IconButton(\n            key: const Key('homePage_logout_iconButton'),\n            icon: const Icon(Icons.exit_to_app),\n            onPressed: () {\n              context\n                  .read<AuthenticationBloc>()\n                  .add(AuthenticationLogoutRequested());\n            },\n          )\n        ],\n      ),\n      body: Align(\n        alignment: const Alignment(0, -1 / 3),\n        child: Column(\n          mainAxisSize: MainAxisSize.min,\n          children: <Widget>[\n            Avatar(photo: user.photo),\n            const SizedBox(height: 4),\n            Text(user.email ?? '', style: textTheme.titleLarge),\n            const SizedBox(height: 4),\n            Text(user.name ?? '', style: textTheme.headlineSmall),\n          ],\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TimerState in Dart\nDESCRIPTION: Implementation of the TimerState class and its subclasses, representing different states of the timer application.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-timer.mdx#2025-04-16_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nabstract class TimerState extends Equatable {\n  const TimerState(this.duration);\n  final int duration;\n\n  @override\n  List<Object> get props => [duration];\n}\n\nclass TimerInitial extends TimerState {\n  const TimerInitial(super.duration);\n\n  @override\n  String toString() => 'TimerInitial { duration: $duration }';\n}\n\nclass TimerRunPause extends TimerState {\n  const TimerRunPause(super.duration);\n\n  @override\n  String toString() => 'TimerRunPause { duration: $duration }';\n}\n\nclass TimerRunInProgress extends TimerState {\n  const TimerRunInProgress(super.duration);\n\n  @override\n  String toString() => 'TimerRunInProgress { duration: $duration }';\n}\n\nclass TimerRunComplete extends TimerState {\n  const TimerRunComplete() : super(0);\n}\n```\n\n----------------------------------------\n\nTITLE: Using MultiBlocListener in Flutter\nDESCRIPTION: Demonstrates how to use MultiBlocListener to merge multiple BlocListener widgets into one, improving readability and eliminating nested BlocListeners.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/flutter-bloc-concepts.mdx#2025-04-16_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nMultiBlocListener(\n  listeners: [\n    BlocListener<BlocA, BlocAState>(\n      listener: (context, state) {\n        // do stuff here based on BlocA's state\n      },\n    ),\n    BlocListener<BlocB, BlocBState>(\n      listener: (context, state) {\n        // do stuff here based on BlocB's state\n      },\n    ),\n    BlocListener<BlocC, BlocCState>(\n      listener: (context, state) {\n        // do stuff here based on BlocC's state\n      },\n    ),\n  ],\n  child: ChildA(),\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing GitHub Cache for Memoization in Dart\nDESCRIPTION: This code implements a GithubCache class that stores and retrieves previously fetched search results to avoid redundant network requests. It uses a simple in-memory Map to cache search results by query term.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/github-search.mdx#2025-04-16_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nimport 'models/models.dart';\n\nclass GithubCache {\n  final _cache = <String, SearchResult>{};\n\n  SearchResult? get(String term) => _cache[term];\n\n  void set(String term, SearchResult result) => _cache[term] = result;\n\n  bool contains(String term) => _cache.containsKey(term);\n\n  void remove(String term) => _cache.remove(term);\n}\n```\n\n----------------------------------------\n\nTITLE: Using BlocConsumer with Conditions in Flutter\nDESCRIPTION: Demonstrates how to use listenWhen and buildWhen parameters in BlocConsumer for more granular control over when listener and builder are called.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/flutter-bloc-concepts.mdx#2025-04-16_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nBlocConsumer<BlocA, BlocAState>(\n  listenWhen: (previous, current) {\n    // return true/false to determine whether or not\n    // to call listener with state\n  },\n  listener: (context, state) {\n    // do stuff here based on BlocA's state\n  },\n  buildWhen: (previous, current) {\n    // return true/false to determine whether or not\n    // to rebuild the widget with state\n  },\n  builder: (context, state) {\n    // return widget here based on BlocA's state\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Bloc from BlocProvider in Flutter\nDESCRIPTION: Shows how to retrieve a bloc from a BlocProvider using BlocProvider.of<T>(context) method.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/flutter-bloc-concepts.mdx#2025-04-16_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nBlocProvider.of<BlocA>(context)\n```\n\n----------------------------------------\n\nTITLE: Implementing Login Page with Bloc in Flutter\nDESCRIPTION: This code shows the LoginPage widget responsible for creating and providing a LoginCubit instance to the LoginForm. It follows the pattern of separating widget creation from business logic.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-firebase-login.mdx#2025-04-16_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:authentication_repository/authentication_repository.dart';\nimport 'package:flutter/material.dart';\nimport 'package:flutter_bloc/flutter_bloc.dart';\nimport 'package:flutter_firebase_login/login/login.dart';\n\nclass LoginPage extends StatelessWidget {\n  const LoginPage({Key? key}) : super(key: key);\n\n  static Page page() => const MaterialPage<void>(child: LoginPage());\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('Login')),\n      body: Padding(\n        padding: const EdgeInsets.all(8),\n        child: BlocProvider(\n          create: (_) => LoginCubit(context.read<AuthenticationRepository>()),\n          child: const LoginForm(),\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Handling in BlocObserver\nDESCRIPTION: This code shows how to override the onError method in a BlocObserver to globally handle errors from all Cubits and Blocs. It provides a central place for error monitoring and reporting.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/pt-br/bloc-concepts.mdx#2025-04-16_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nclass SimpleBlocObserver extends BlocObserver {\n  @override\n  void onChange(BlocBase bloc, Change change) {\n    super.onChange(bloc, change);\n    print('${bloc.runtimeType} $change');\n  }\n\n  @override\n  void onError(BlocBase bloc, Object error, StackTrace stackTrace) {\n    print('${bloc.runtimeType} $error $stackTrace');\n    super.onError(bloc, error, stackTrace);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Single State Class for Error Handling\nDESCRIPTION: Demonstrates how to model a bloc state using a single class that can represent both data and error states simultaneously.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/faqs.mdx#2025-04-16_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nenum Status { initial, loading, success, failure }\n\nclass MyState extends Equatable {\n  const MyState({\n    this.status = Status.initial,\n    this.data = const <String>[],\n    this.error,\n  });\n\n  final Status status;\n  final List<String> data;\n  final Exception? error;\n  \n  @override\n  List<Object?> get props => [status, data, error];\n  \n  MyState copyWith({\n    Status? status,\n    List<String>? data,\n    Exception? Function()? error,\n  }) {\n    return MyState(\n      status: status ?? this.status,\n      data: data ?? this.data,\n      error: error != null ? error() : this.error,\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using BlocBuilder with buildWhen in Flutter\nDESCRIPTION: Shows how to use the buildWhen parameter in BlocBuilder for fine-grained control over when the builder function is called based on state changes.\nSOURCE: https://github.com/felangel/bloc/blob/master/packages/flutter_bloc/README.md#2025-04-16_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nBlocBuilder<BlocA, BlocAState>(\n  buildWhen: (previousState, state) {\n    // return true/false to determine whether or not\n    // to rebuild the widget with state\n  },\n  builder: (context, state) {\n    // return widget here based on BlocA's state\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Using MultiBlocListener in Flutter\nDESCRIPTION: Demonstrates how to use MultiBlocListener to simplify listening to multiple blocs without nesting.\nSOURCE: https://github.com/felangel/bloc/blob/master/packages/flutter_bloc/README.md#2025-04-16_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\nMultiBlocListener(\n  listeners: [\n    BlocListener<BlocA, BlocAState>(\n      listener: (context, state) {},\n    ),\n    BlocListener<BlocB, BlocBState>(\n      listener: (context, state) {},\n    ),\n    BlocListener<BlocC, BlocCState>(\n      listener: (context, state) {},\n    ),\n  ],\n  child: ChildA(),\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Bloc with Events\nDESCRIPTION: This code shows how to create a CounterBloc class that extends Bloc and defines the events it can handle. Unlike Cubit, Bloc uses events to trigger state changes, providing more structured state management.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/pt-br/bloc-concepts.mdx#2025-04-16_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nsealed class CounterEvent {}\n\nfinal class CounterIncrementPressed extends CounterEvent {}\n\nclass CounterBloc extends Bloc<CounterEvent, int> {\n  CounterBloc() : super(0) {\n    // event handlers will be added here\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Equatable in Bloc State Classes (Good Example)\nDESCRIPTION: Demonstrates the correct implementation of Equatable in a bloc state class by including all properties in the props getter for proper state comparison.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/faqs.mdx#2025-04-16_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass MyState extends Equatable {\n  final int value;\n\n  const MyState({this.value = 0});\n\n  @override\n  List<Object> get props => [value];\n}\n```\n\n----------------------------------------\n\nTITLE: Weather App Widget in Dart\nDESCRIPTION: Implementation of the main WeatherApp widget, using BlocProvider to inject the WeatherCubit and building the WeatherPage view.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-weather.mdx#2025-04-16_snippet_36\n\nLANGUAGE: dart\nCODE:\n```\n// Code not provided in the original text\n```\n\n----------------------------------------\n\nTITLE: Setting up BlocProvider in Flutter main.dart\nDESCRIPTION: Demonstrates how to use BlocProvider to provide a CounterCubit to a CounterPage in the main app widget.\nSOURCE: https://github.com/felangel/bloc/blob/master/packages/flutter_bloc/README.md#2025-04-16_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() => runApp(CounterApp());\n\nclass CounterApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: BlocProvider(\n        create: (_) => CounterCubit(),\n        child: CounterPage(),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Event Transformer for Throttling\nDESCRIPTION: Implementation of event transformer to throttle PostFetched events using stream_transform package to prevent API spam.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-infinite-list.mdx#2025-04-16_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nEventTransformer<E> throttleDroppable<E>(Duration duration) {\n  return (events, mapper) {\n    return droppable<E>().call(events.throttle(duration), mapper);\n  };\n}\n\non<PostFetched>(\n  _onPostFetched,\n  transformer: throttleDroppable(const Duration(milliseconds: 100)),\n);\n```\n\n----------------------------------------\n\nTITLE: Weather Cubit Unit Tests in Dart\nDESCRIPTION: Unit tests for the WeatherCubit using bloc_test and mocktail to ensure correct behavior of the business logic.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-weather.mdx#2025-04-16_snippet_26\n\nLANGUAGE: dart\nCODE:\n```\n// Code not provided in the original text\n```\n\n----------------------------------------\n\nTITLE: Implementing Debounce Event Transformer in Bloc\nDESCRIPTION: Example of using event transformers in Bloc to implement debounced real-time search functionality.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/bloc-concepts.mdx#2025-04-16_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\n<DebounceEventTransformerSnippet />\n```\n\n----------------------------------------\n\nTITLE: Implementing PostsPage with BlocProvider\nDESCRIPTION: Creates the PostsPage widget using BlocProvider to provide PostBloc instance to the subtree and initiates post fetching.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-infinite-list.mdx#2025-04-16_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\n// Content of lib/posts/view/posts_page.dart\n```\n\n----------------------------------------\n\nTITLE: Implementing Timer Actions Widget\nDESCRIPTION: A StatelessWidget that uses BlocBuilder to render different FloatingActionButtons based on the TimerBloc state. Includes optimization using buildWhen to prevent unnecessary rebuilds on every tick.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-timer.mdx#2025-04-16_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nclass Actions extends StatelessWidget {\n  const Actions({Key? key}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return BlocBuilder<TimerBloc, TimerState>(\n      buildWhen: (prev, state) => prev.runtimeType != state.runtimeType,\n      builder: (context, state) {\n        return Row(\n          mainAxisAlignment: MainAxisAlignment.spaceEvenly,\n          children: [\n            if (state is TimerInitial) ...[]\n            if (state is TimerRunInProgress) ...[]\n            if (state is TimerRunPause) ...[]\n            if (state is TimerRunComplete) ...[]\n          ],\n        );\n      },\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Authentication Repository Public API\nDESCRIPTION: The main authentication_repository.dart file that exports the AuthenticationRepository class and associated models, serving as the public API surface for the package.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-firebase-login.mdx#2025-04-16_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n// Copyright (c) 2022, Very Good Ventures\n// https://verygood.ventures\n//\n// Use of this source code is governed by an MIT-style\n// license that can be found in the LICENSE file or at\n// https://opensource.org/licenses/MIT.\n\n/// {@template authentication_repository}\n/// Repository which manages user authentication.\n/// {@endtemplate}\nlibrary authentication_repository;\n\nexport 'src/authentication_repository.dart';\nexport 'src/models/models.dart';\n\n```\n\n----------------------------------------\n\nTITLE: Defining Authentication Events\nDESCRIPTION: Implements the AuthenticationEvent class with two events: AuthenticationSubscriptionRequested and AuthenticationLogoutPressed.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-login.mdx#2025-04-16_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\npart of 'authentication_bloc.dart';\n\nsealed class AuthenticationEvent {\n  const AuthenticationEvent();\n}\n\nfinal class AuthenticationSubscriptionRequested extends AuthenticationEvent {\n  const AuthenticationSubscriptionRequested();\n}\n\nfinal class AuthenticationLogoutPressed extends AuthenticationEvent {\n  const AuthenticationLogoutPressed();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GitHub Client for API Communication in Dart\nDESCRIPTION: This code implements a GithubClient class that makes network requests to the GitHub API to search repositories based on a query term. It uses the http package to fetch data and converts the response to either a SearchResult or SearchResultError object.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/github-search.mdx#2025-04-16_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:async';\nimport 'dart:convert';\n\nimport 'package:http/http.dart' as http;\n\nimport 'models/models.dart';\n\nclass GithubClient {\n  GithubClient({http.Client? httpClient})\n      : _httpClient = httpClient ?? http.Client();\n\n  final http.Client _httpClient;\n\n  Future<SearchResult> search(String term) async {\n    final response = await _httpClient.get(\n      Uri.https(\n        'api.github.com',\n        '/search/repositories',\n        {'q': term},\n      ),\n    );\n\n    final results = json.decode(response.body);\n\n    if (response.statusCode == 200) {\n      return SearchResult.fromJson(results);\n    } else {\n      throw SearchResultError.fromJson(results);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Main App Implementation in Flutter\nDESCRIPTION: This Dart code shows the main app implementation for the Flutter GitHub search application, including bloc provider setup.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/github-search.mdx#2025-04-16_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\n<RemoteCode\n\turl=\"https://raw.githubusercontent.com/felangel/bloc/master/examples/github_search/flutter_github_search/lib/main.dart\"\n\ttitle=\"flutter_github_search/lib/main.dart\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Context Select Usage\nDESCRIPTION: Example showing how to use context.select to listen for changes in specific parts of state.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/flutter-bloc-concepts.mdx#2025-04-16_snippet_20\n\nLANGUAGE: dart\nCODE:\n```\nWidget build(BuildContext context) {\n  final name = context.select((ProfileBloc bloc) => bloc.state.name);\n  return Text(name);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Login Cubit for Firebase Authentication\nDESCRIPTION: This LoginCubit provides methods for handling login functionality with Firebase. It manages email and password validation, login with credentials, and Google sign-in, while updating the LoginState accordingly.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-firebase-login.mdx#2025-04-16_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:authentication_repository/authentication_repository.dart';\nimport 'package:bloc/bloc.dart';\nimport 'package:form_inputs/form_inputs.dart';\nimport 'package:formz/formz.dart';\nimport 'package:flutter_firebase_login/login/login.dart';\n\nclass LoginCubit extends Cubit<LoginState> {\n  LoginCubit(this._authenticationRepository) : super(const LoginState());\n\n  final AuthenticationRepository _authenticationRepository;\n\n  void emailChanged(String value) {\n    final email = Email.dirty(value);\n    emit(\n      state.copyWith(\n        email: email,\n        status: Formz.validate([email, state.password]),\n      ),\n    );\n  }\n\n  void passwordChanged(String value) {\n    final password = Password.dirty(value);\n    emit(\n      state.copyWith(\n        password: password,\n        status: Formz.validate([state.email, password]),\n      ),\n    );\n  }\n\n  Future<void> logInWithCredentials() async {\n    if (!state.status.isValidated) return;\n    emit(state.copyWith(status: FormzStatus.submissionInProgress));\n    try {\n      await _authenticationRepository.logInWithEmailAndPassword(\n        email: state.email.value,\n        password: state.password.value,\n      );\n      emit(state.copyWith(status: FormzStatus.submissionSuccess));\n    } on LogInWithEmailAndPasswordFailure catch (e) {\n      emit(\n        state.copyWith(\n          errorMessage: e.message,\n          status: FormzStatus.submissionFailure,\n        ),\n      );\n    } catch (_) {\n      emit(state.copyWith(status: FormzStatus.submissionFailure));\n    }\n  }\n\n  Future<void> logInWithGoogle() async {\n    emit(state.copyWith(status: FormzStatus.submissionInProgress));\n    try {\n      await _authenticationRepository.logInWithGoogle();\n      emit(state.copyWith(status: FormzStatus.submissionSuccess));\n    } on LogInWithGoogleFailure catch (e) {\n      emit(\n        state.copyWith(\n          errorMessage: e.message,\n          status: FormzStatus.submissionFailure,\n        ),\n      );\n    } catch (_) {\n      emit(state.copyWith(status: FormzStatus.submissionFailure));\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using bloc_test for Advanced CounterBloc Testing\nDESCRIPTION: Advanced testing of CounterBloc using the bloc_test package. This demonstrates how to test event sequences and expected state changes in a concise manner.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/testing.mdx#2025-04-16_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nblocTest<CounterBloc, int>(\n  'emits [1] when increment is added',\n  build: () => counterBloc,\n  act: (bloc) => bloc.add(CounterIncrementPressed()),\n  expect: () => [1],\n);\n\nblocTest<CounterBloc, int>(\n  'emits [-1] when decrement is added',\n  build: () => counterBloc,\n  act: (bloc) => bloc.add(CounterDecrementPressed()),\n  expect: () => [-1],\n);\n```\n\n----------------------------------------\n\nTITLE: Using BlocSelector in Flutter\nDESCRIPTION: Demonstrates how to use BlocSelector to filter updates by selecting a new value based on the current bloc state, preventing unnecessary builds.\nSOURCE: https://github.com/felangel/bloc/blob/master/packages/flutter_bloc/README.md#2025-04-16_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nBlocSelector<BlocA, BlocAState, SelectedState>(\n  selector: (state) {\n    // return selected state based on the provided state.\n  },\n  builder: (context, state) {\n    // return widget here based on the selected state.\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: Weather Repository Unit Test in Dart\nDESCRIPTION: Unit test for the WeatherRepository using mocktail to mock the API client and test the repository logic in isolation.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-weather.mdx#2025-04-16_snippet_18\n\nLANGUAGE: dart\nCODE:\n```\n// Code not provided in the original text\n```\n\n----------------------------------------\n\nTITLE: Building Sign Up Form UI with Bloc in Flutter\nDESCRIPTION: This code implements the SignUpForm widget that renders the signup form based on the SignUpState. It includes fields for email, password, and password confirmation, as well as a submit button.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-firebase-login.mdx#2025-04-16_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'package:flutter_bloc/flutter_bloc.dart';\nimport 'package:flutter_firebase_login/sign_up/sign_up.dart';\nimport 'package:formz/formz.dart';\n\nclass SignUpForm extends StatelessWidget {\n  const SignUpForm({Key? key}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return BlocListener<SignUpCubit, SignUpState>(\n      listener: (context, state) {\n        if (state.status.isSubmissionSuccess) {\n          Navigator.of(context).pop();\n        } else if (state.status.isSubmissionFailure) {\n          ScaffoldMessenger.of(context)\n            ..hideCurrentSnackBar()\n            ..showSnackBar(\n              SnackBar(content: Text(state.errorMessage ?? 'Sign Up Failure')),\n            );\n        }\n      },\n      child: Align(\n        alignment: const Alignment(0, -1 / 3),\n        child: Column(\n          mainAxisSize: MainAxisSize.min,\n          children: [\n            _EmailInput(),\n            const SizedBox(height: 8),\n            _PasswordInput(),\n            const SizedBox(height: 8),\n            _ConfirmPasswordInput(),\n            const SizedBox(height: 8),\n            _SignUpButton(),\n          ],\n        ),\n      ),\n    );\n  }\n}\n\nclass _EmailInput extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return BlocBuilder<SignUpCubit, SignUpState>(\n      buildWhen: (previous, current) => previous.email != current.email,\n      builder: (context, state) {\n        return TextField(\n          key: const Key('signUpForm_emailInput_textField'),\n          onChanged: (email) => context.read<SignUpCubit>().emailChanged(email),\n          keyboardType: TextInputType.emailAddress,\n          decoration: InputDecoration(\n            labelText: 'email',\n            helperText: '',\n            errorText: state.email.invalid ? 'invalid email' : null,\n          ),\n        );\n      },\n    );\n  }\n}\n\nclass _PasswordInput extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return BlocBuilder<SignUpCubit, SignUpState>(\n      buildWhen: (previous, current) => previous.password != current.password,\n      builder: (context, state) {\n        return TextField(\n          key: const Key('signUpForm_passwordInput_textField'),\n          onChanged: (password) =>\n              context.read<SignUpCubit>().passwordChanged(password),\n          obscureText: true,\n          decoration: InputDecoration(\n            labelText: 'password',\n            helperText: '',\n            errorText: state.password.invalid ? 'invalid password' : null,\n          ),\n        );\n      },\n    );\n  }\n}\n\nclass _ConfirmPasswordInput extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return BlocBuilder<SignUpCubit, SignUpState>(\n      buildWhen: (previous, current) =>\n          previous.password != current.password ||\n          previous.confirmedPassword != current.confirmedPassword,\n      builder: (context, state) {\n        return TextField(\n          key: const Key('signUpForm_confirmedPasswordInput_textField'),\n          onChanged: (confirmPassword) => context\n              .read<SignUpCubit>()\n              .confirmedPasswordChanged(confirmPassword),\n          obscureText: true,\n          decoration: InputDecoration(\n            labelText: 'confirm password',\n            helperText: '',\n            errorText: state.confirmedPassword.invalid\n                ? 'passwords do not match'\n                : null,\n          ),\n        );\n      },\n    );\n  }\n}\n\nclass _SignUpButton extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return BlocBuilder<SignUpCubit, SignUpState>(\n      buildWhen: (previous, current) => previous.status != current.status,\n      builder: (context, state) {\n        return state.status.isSubmissionInProgress\n            ? const CircularProgressIndicator()\n            : ElevatedButton(\n                key: const Key('signUpForm_continue_raisedButton'),\n                style: ElevatedButton.styleFrom(\n                  shape: RoundedRectangleBorder(\n                    borderRadius: BorderRadius.circular(30),\n                  ),\n                  backgroundColor: Colors.orangeAccent,\n                ),\n                onPressed: state.status.isValidated\n                    ? () => context.read<SignUpCubit>().signUpFormSubmitted()\n                    : null,\n                child: const Text('SIGN UP'),\n              );\n      },\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Post Fetch Event Handler\nDESCRIPTION: Implementation of _onPostFetched method to handle PostFetched events, including pagination logic and API calls to fetch posts.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-infinite-list.mdx#2025-04-16_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> _onPostFetched(\n  PostFetched event,\n  Emitter<PostState> emit,\n) async {\n  if (state.hasReachedMax) return;\n  try {\n    if (state.status == PostStatus.initial) {\n      final posts = await _fetchPosts();\n      return emit(state.copyWith(\n        status: PostStatus.success,\n        posts: posts,\n        hasReachedMax: false,\n      ));\n    }\n    final posts = await _fetchPosts(state.posts.length);\n    posts.isEmpty\n        ? emit(state.copyWith(hasReachedMax: true))\n        : emit(\n            state.copyWith(\n              status: PostStatus.success,\n              posts: List.of(state.posts)..addAll(posts),\n              hasReachedMax: false,\n            ),\n          );\n  } catch (_) {\n    emit(state.copyWith(status: PostStatus.failure));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Debounce Event Transformer\nDESCRIPTION: Demonstrates how to implement a debounce event transformer for handling events in a Bloc.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/ko/bloc-concepts.mdx#2025-04-16_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\nEventTransformer<T> debounce<T>(Duration duration) {\n  return (events, mapper) => events.debounceTime(duration).flatMap(mapper);\n}\n\nclass SearchBloc extends Bloc<SearchEvent, SearchState> {\n  SearchBloc() : super(SearchState.initial()) {\n    on<TextChanged>(\n      _onTextChanged,\n      transformer: debounce(const Duration(milliseconds: 300)),\n    );\n  }\n\n  void _onTextChanged(TextChanged event, Emitter<SearchState> emit) {\n    // Handle text changed logic\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing HydratedStorage in Dart\nDESCRIPTION: Sets up HydratedStorage for persisting bloc and cubit states. It uses a platform-agnostic storage directory and initializes the storage before running the app.\nSOURCE: https://github.com/felangel/bloc/blob/master/packages/hydrated_bloc/README.md#2025-04-16_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> main() async {\n  WidgetsFlutterBinding.ensureInitialized();\n  HydratedBloc.storage = await HydratedStorage.build(\n    storageDirectory: kIsWeb\n        ? HydratedStorageDirectory.web\n        : HydratedStorageDirectory((await getTemporaryDirectory()).path),\n  );\n  runApp(App());\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing HydratedBloc Storage with Web Support\nDESCRIPTION: Example showing how to initialize HydratedBloc storage with web platform support using HydratedStorageDirectory. The code demonstrates conditional storage directory selection based on platform and integrates with Flutter's initialization.\nSOURCE: https://github.com/felangel/bloc/blob/master/packages/hydrated_bloc/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/foundation.dart';\nimport 'package:flutter/material.dart';\n\nimport 'package:flutter_bloc/flutter_bloc.dart';\nimport 'package:hydrated_bloc/hydrated_bloc.dart';\nimport 'package:path_provider/path_provider.dart';\n\nvoid main() async {\n  WidgetsFlutterBinding.ensureInitialized();\n  HydratedBloc.storage = await HydratedStorage.build(\n    storageDirectory: kIsWeb\n        ? HydratedStorageDirectory.web\n        : HydratedStorageDirectory((await getTemporaryDirectory()).path),\n  );\n  runApp(const App());\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Event Handler in Bloc\nDESCRIPTION: Demonstrates how to register an event handler using the on<Event> API in a Bloc class.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/ko/bloc-concepts.mdx#2025-04-16_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\non<CounterIncrementPressed>((event, emit) {\n  // Handle CounterIncrementPressed event\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign Up Cubit for Firebase Authentication\nDESCRIPTION: This code implements the SignUpCubit to manage the signup form state and interact with the AuthenticationRepository. It provides methods for updating form fields and submitting the signup request.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-firebase-login.mdx#2025-04-16_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:authentication_repository/authentication_repository.dart';\nimport 'package:bloc/bloc.dart';\nimport 'package:form_inputs/form_inputs.dart';\nimport 'package:formz/formz.dart';\nimport 'package:flutter_firebase_login/sign_up/sign_up.dart';\n\nclass SignUpCubit extends Cubit<SignUpState> {\n  SignUpCubit(this._authenticationRepository) : super(const SignUpState());\n\n  final AuthenticationRepository _authenticationRepository;\n\n  void emailChanged(String value) {\n    final email = Email.dirty(value);\n    emit(\n      state.copyWith(\n        email: email,\n        status: Formz.validate([\n          email,\n          state.password,\n          state.confirmedPassword,\n        ]),\n      ),\n    );\n  }\n\n  void passwordChanged(String value) {\n    final password = Password.dirty(value);\n    final confirmedPassword = ConfirmedPassword.dirty(\n      password: password.value,\n      value: state.confirmedPassword.value,\n    );\n    emit(\n      state.copyWith(\n        password: password,\n        confirmedPassword: confirmedPassword,\n        status: Formz.validate([\n          state.email,\n          password,\n          confirmedPassword,\n        ]),\n      ),\n    );\n  }\n\n  void confirmedPasswordChanged(String value) {\n    final confirmedPassword = ConfirmedPassword.dirty(\n      password: state.password.value,\n      value: value,\n    );\n    emit(\n      state.copyWith(\n        confirmedPassword: confirmedPassword,\n        status: Formz.validate([\n          state.email,\n          state.password,\n          confirmedPassword,\n        ]),\n      ),\n    );\n  }\n\n  Future<void> signUpFormSubmitted() async {\n    if (!state.status.isValidated) return;\n    emit(state.copyWith(status: FormzStatus.submissionInProgress));\n    try {\n      await _authenticationRepository.signUp(\n        email: state.email.value,\n        password: state.password.value,\n      );\n      emit(state.copyWith(status: FormzStatus.submissionSuccess));\n    } on SignUpWithEmailAndPasswordFailure catch (e) {\n      emit(\n        state.copyWith(\n          errorMessage: e.message,\n          status: FormzStatus.submissionFailure,\n        ),\n      );\n    } catch (_) {\n      emit(state.copyWith(status: FormzStatus.submissionFailure));\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Mock Bloc and Cubit Classes in Dart\nDESCRIPTION: Demonstrates how to create mock implementations of bloc and cubit classes using the bloc_test package.\nSOURCE: https://github.com/felangel/bloc/blob/master/packages/bloc_test/README.md#2025-04-16_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:bloc_test/bloc_test.dart';\n\nclass MockCounterBloc extends MockBloc<CounterEvent, int> implements CounterBloc {}\nclass MockCounterCubit extends MockCubit<int> implements CounterCubit {}\n```\n\n----------------------------------------\n\nTITLE: Creating a ReplayCubit in Dart\nDESCRIPTION: Demonstrates how to create a ReplayCubit class that extends the base ReplayCubit with an integer state. The cubit includes an increment method to modify the state.\nSOURCE: https://github.com/felangel/bloc/blob/master/packages/replay_bloc/README.md#2025-04-16_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass CounterCubit extends ReplayCubit<int> {\n  CounterCubit() : super(0);\n\n  void increment() => emit(state + 1);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Counter Cubit in Dart\nDESCRIPTION: A simple Cubit implementation for managing counter state. Provides increment and decrement functionality with an initial state of 0.\nSOURCE: https://github.com/felangel/bloc/blob/master/packages/angular_bloc/README.md#2025-04-16_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:bloc/bloc.dart';\n\nclass CounterCubit extends Cubit<int> {\n  CounterCubit() : super(0);\n\n  void increment() => emit(state + 1);\n  void decrement() => emit(state — 1);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ReplayBlocMixin with HydratedBloc in Dart\nDESCRIPTION: Shows how to use the ReplayBlocMixin with a HydratedBloc to combine replay functionality with hydration. Includes event definitions, bloc implementation, and JSON serialization methods.\nSOURCE: https://github.com/felangel/bloc/blob/master/packages/replay_bloc/README.md#2025-04-16_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nsealed class CounterEvent with ReplayEvent {}\n\nfinal class CounterIncrementPressed extends CounterEvent {}\n\nfinal class CounterDecrementPressed extends CounterEvent {}\n\nclass CounterBloc extends HydratedBloc<CounterEvent, int> with ReplayBlocMixin {\n  CounterBloc() : super(0) {\n    on<CounterIncrementPressed>((event, emit) => emit(state + 1));\n    on<CounterDecrementPressed>((event, emit) => emit(state - 1));\n  }\n\n  @override\n  int fromJson(Map<String, dynamic> json) => json['value'] as int;\n\n  @override\n  Map<String, int> toJson(int state) => {'value': state};\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing AuthenticationBloc in Flutter\nDESCRIPTION: This code defines an AuthenticationBloc that manages the authentication state of the application. It handles subscription to authentication status updates and user queries.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-login.mdx#2025-04-16_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nclass AuthenticationBloc extends Bloc<AuthenticationEvent, AuthenticationState> {\n  AuthenticationBloc({\n    required AuthenticationRepository authenticationRepository,\n    required UserRepository userRepository,\n  }) : super(const AuthenticationState.unknown()) {\n    on<AuthenticationSubscriptionRequested>(_onSubscriptionRequested);\n    // ... other event handlers\n  }\n\n  Future<void> _onSubscriptionRequested(\n    AuthenticationSubscriptionRequested event,\n    Emitter<AuthenticationState> emit,\n  ) async {\n    await emit.onEach<AuthenticationStatus>(\n      _authenticationRepository.status,\n      onData: (status) {\n        switch (status) {\n          case AuthenticationStatus.unauthenticated:\n            return emit(const AuthenticationState.unauthenticated());\n          case AuthenticationStatus.authenticated:\n            final user = await _tryGetUser();\n            return emit(\n              user != null\n                  ? AuthenticationState.authenticated(user)\n                  : const AuthenticationState.unauthenticated(),\n            );\n          case AuthenticationStatus.unknown:\n            return emit(const AuthenticationState.unknown());\n        }\n      },\n      onError: (error, stackTrace) => addError(error, stackTrace),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Observing Transitions in a Bloc\nDESCRIPTION: This code demonstrates how to override the onTransition method in a Bloc to observe transitions between states. A Transition includes the current state, the event that triggered the change, and the next state.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/pt-br/bloc-concepts.mdx#2025-04-16_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\nclass CounterBloc extends Bloc<CounterEvent, int> {\n  CounterBloc() : super(0) {\n    on<CounterIncrementPressed>((event, emit) {\n      emit(state + 1);\n    });\n  }\n\n  @override\n  void onChange(Change<int> change) {\n    super.onChange(change);\n    print(change);\n  }\n\n  @override\n  void onTransition(Transition<CounterEvent, int> transition) {\n    super.onTransition(transition);\n    print(transition);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Weather Repository in Dart\nDESCRIPTION: This code snippet shows the implementation of the WeatherRepository class, which abstracts the data layer and provides a getWeather method.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-weather.mdx#2025-04-16_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\n// Code not directly available in the provided text\n```\n\n----------------------------------------\n\nTITLE: Using emit.forEach for External Event Handling\nDESCRIPTION: Demonstrates an alternative approach to handling real-time updates using emit.forEach instead of internal events.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/faqs.mdx#2025-04-16_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\nclass MyBloc extends Bloc<MyEvent, MyState> {\n  MyBloc({\n    required UserRepository userRepository,\n  }) : _userRepository = userRepository,\n      super(MyState.initial()) {\n    on<Started>(_onStarted);\n  }\n\n  final UserRepository _userRepository;\n\n  void _onStarted(Started event, Emitter<MyState> emit) async {\n    await emit.forEach<User>(\n      _userRepository.user,\n      onData: (user) => state.copyWith(user: user),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Root App Widget in Flutter\nDESCRIPTION: This code defines the root App widget for the application. It sets up the MaterialApp and handles navigation based on authentication state changes.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-login.mdx#2025-04-16_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nclass App extends StatelessWidget {\n  const App({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: BlocProvider(\n        create: (_) => AuthenticationBloc(\n          authenticationRepository: context.read<AuthenticationRepository>(),\n          userRepository: UserRepository(),\n        ),\n        child: const AppView(),\n      ),\n    );\n  }\n}\n\nclass AppView extends StatefulWidget {\n  const AppView({super.key});\n\n  @override\n  State<AppView> createState() => _AppViewState();\n}\n\nclass _AppViewState extends State<AppView> {\n  final _navigatorKey = GlobalKey<NavigatorState>();\n\n  NavigatorState get _navigator => _navigatorKey.currentState!;\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      navigatorKey: _navigatorKey,\n      builder: (context, child) {\n        return BlocListener<AuthenticationBloc, AuthenticationState>(\n          listener: (context, state) {\n            switch (state.status) {\n              case AuthenticationStatus.authenticated:\n                _navigator.pushAndRemoveUntil<void>(\n                  HomePage.route(),\n                  (route) => false,\n                );\n              case AuthenticationStatus.unauthenticated:\n                _navigator.pushAndRemoveUntil<void>(\n                  LoginPage.route(),\n                  (route) => false,\n                );\n              case AuthenticationStatus.unknown:\n                break;\n            }\n          },\n          child: child,\n        );\n      },\n      onGenerateRoute: (_) => SplashPage.route(),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing LoginBloc for Form Management\nDESCRIPTION: This code defines the LoginBloc which manages the state of the login form, including username and password validation and form submission.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-login.mdx#2025-04-16_snippet_18\n\nLANGUAGE: dart\nCODE:\n```\nclass LoginBloc extends Bloc<LoginEvent, LoginState> {\n  LoginBloc({\n    required AuthenticationRepository authenticationRepository,\n  }) : super(const LoginState()) {\n    on<LoginUsernameChanged>(_onUsernameChanged);\n    on<LoginPasswordChanged>(_onPasswordChanged);\n    on<LoginSubmitted>(_onSubmitted);\n  }\n\n  void _onUsernameChanged(LoginUsernameChanged event, Emitter<LoginState> emit) {\n    final username = Username.dirty(event.username);\n    emit(\n      state.copyWith(\n        username: username,\n        status: Formz.validate([state.password, username]),\n      ),\n    );\n  }\n\n  void _onPasswordChanged(LoginPasswordChanged event, Emitter<LoginState> emit) {\n    final password = Password.dirty(event.password);\n    emit(\n      state.copyWith(\n        password: password,\n        status: Formz.validate([password, state.username]),\n      ),\n    );\n  }\n\n  Future<void> _onSubmitted(LoginSubmitted event, Emitter<LoginState> emit) async {\n    if (state.status.isValidated) {\n      emit(state.copyWith(status: FormzStatus.submissionInProgress));\n      try {\n        await _authenticationRepository.logIn(\n          username: state.username.value,\n          password: state.password.value,\n        );\n        emit(state.copyWith(status: FormzStatus.submissionSuccess));\n      } catch (_) {\n        emit(state.copyWith(status: FormzStatus.submissionFailure));\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete CounterBloc Implementation\nDESCRIPTION: This code shows the complete implementation of a CounterBloc, which requires defining events, state, and event handlers. The Bloc approach provides more structure and traceability at the cost of additional code.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/pt-br/bloc-concepts.mdx#2025-04-16_snippet_27\n\nLANGUAGE: dart\nCODE:\n```\nsealed class CounterEvent {}\n\nfinal class CounterIncrementPressed extends CounterEvent {}\n\nclass CounterBloc extends Bloc<CounterEvent, int> {\n  CounterBloc() : super(0) {\n    on<CounterIncrementPressed>((event, emit) {\n      emit(state + 1);\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing BlocObserver with onTransition\nDESCRIPTION: Shows how to create a custom BlocObserver to observe all Transitions in a single place.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/ko/bloc-concepts.mdx#2025-04-16_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nclass SimpleBlocObserver extends BlocObserver {\n  @override\n  void onTransition(Bloc bloc, Transition transition) {\n    super.onTransition(bloc, transition);\n    print('${bloc.runtimeType} $transition');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Hydrated Storage in Dart\nDESCRIPTION: Shows how to create a custom Storage implementation by implementing the Storage interface. This allows for customized storage behavior if the default HydratedStorage doesn't meet specific needs.\nSOURCE: https://github.com/felangel/bloc/blob/master/packages/hydrated_bloc/README.md#2025-04-16_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nclass MyHydratedStorage implements Storage {\n  @override\n  dynamic read(String key) {\n    // TODO: implement read\n  }\n\n  @override\n  Future<void> write(String key, dynamic value) async {\n    // TODO: implement write\n  }\n\n  @override\n  Future<void> delete(String key) async {\n    // TODO: implement delete\n  }\n\n  @override\n  Future<void> clear() async {\n    // TODO: implement clear\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GitHub Search Events for Bloc Pattern in Dart\nDESCRIPTION: This code defines a GithubSearchEvent class hierarchy using Equatable for equality comparisons. It creates a TextChanged event class that represents when a user types in the search field, containing the search query text.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/github-search.mdx#2025-04-16_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:equatable/equatable.dart';\n\nabstract class GithubSearchEvent extends Equatable {\n  const GithubSearchEvent();\n}\n\nclass TextChanged extends GithubSearchEvent {\n  const TextChanged({required this.text});\n\n  final String text;\n\n  @override\n  List<Object> get props => [text];\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing BlocListener in Flutter\nDESCRIPTION: Creates a BlocListener widget to perform side effects in response to state changes in a bloc.\nSOURCE: https://github.com/felangel/bloc/blob/master/packages/flutter_bloc/README.md#2025-04-16_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nBlocListener<BlocA, BlocAState>(\n  listener: (context, state) {\n    // do stuff here based on BlocA's state\n  },\n  child: Container(),\n)\n```\n\n----------------------------------------\n\nTITLE: Weather Populated Widget in Dart\nDESCRIPTION: Implementation of the WeatherPopulated widget displayed when weather data is successfully fetched and available.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-weather.mdx#2025-04-16_snippet_33\n\nLANGUAGE: dart\nCODE:\n```\n// Code not provided in the original text\n```\n\n----------------------------------------\n\nTITLE: Using SimpleBlocObserver for Global State Change Monitoring\nDESCRIPTION: This snippet shows how to set up the SimpleBlocObserver as the global observer for all Bloc-based components. It configures the observer in the main function before creating and using a CounterCubit.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/pt-br/bloc-concepts.mdx#2025-04-16_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  Bloc.observer = SimpleBlocObserver();\n  final cubit = CounterCubit();\n  cubit.increment();\n  cubit.close();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a ReplayBloc in Dart\nDESCRIPTION: Shows how to create a ReplayBloc with counter functionality. Defines event classes and implements the bloc with increment and decrement events.\nSOURCE: https://github.com/felangel/bloc/blob/master/packages/replay_bloc/README.md#2025-04-16_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass CounterEvent extends ReplayEvent {}\n\nclass CounterIncrementPressed extends CounterEvent {}\n\nclass CounterDecrementPressed extends CounterEvent {}\n\nclass CounterBloc extends ReplayBloc<CounterEvent, int> {\n  CounterBloc() : super(0) {\n    on<CounterIncrementPressed>((event, emit) => emit(state + 1));\n    on<CounterDecrementPressed>((event, emit) => emit(state - 1));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Custom Hydrated Storage in Dart\nDESCRIPTION: Demonstrates how to initialize HydratedBloc with a custom Storage implementation.\nSOURCE: https://github.com/felangel/bloc/blob/master/packages/hydrated_bloc/README.md#2025-04-16_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nHydratedBloc.storage = MyHydratedStorage();\nrunApp(MyApp());\n```\n\n----------------------------------------\n\nTITLE: Rendering Individual Post Items\nDESCRIPTION: Implements the PostListItem widget to render individual Post objects in the list.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-infinite-list.mdx#2025-04-16_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\n// Content of lib/posts/widgets/post_list_item.dart\n```\n\n----------------------------------------\n\nTITLE: Weather State Implementation in Dart\nDESCRIPTION: Definition of the WeatherState class representing different states of the weather app, including initial, loading, success, and failure.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-weather.mdx#2025-04-16_snippet_24\n\nLANGUAGE: dart\nCODE:\n```\n// Code not provided in the original text\n```\n\n----------------------------------------\n\nTITLE: Using BlocListener with Explicit Bloc in Flutter\nDESCRIPTION: Demonstrates how to use BlocListener with an explicitly provided bloc when the bloc is not accessible via BlocProvider and the current BuildContext.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/flutter-bloc-concepts.mdx#2025-04-16_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nBlocListener<BlocA, BlocAState>(\n  bloc: blocA,\n  listener: (context, state) {\n    // do stuff here based on BlocA's state\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Emitting New State Instances in Bloc (Good Example 1)\nDESCRIPTION: Shows the correct way to emit a new state instance by copying existing state values using copyWith pattern.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/faqs.mdx#2025-04-16_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n@override\nvoid someMethod() {\n  emit(state.copyWith(value: state.value + 1));\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Debounce Event Transformer for Bloc in Dart\nDESCRIPTION: Demonstrates how to use an EventTransformer in Bloc to debounce incoming events, useful for scenarios like reducing API calls in a search feature.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/pt-br/bloc-concepts.mdx#2025-04-16_snippet_31\n\nLANGUAGE: dart\nCODE:\n```\n<DebounceEventTransformerSnippet />\n```\n\n----------------------------------------\n\nTITLE: Implementing Search Form in Flutter\nDESCRIPTION: This Dart code implements the search form for the Flutter GitHub search application, including SearchBar and SearchBody widgets.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/github-search.mdx#2025-04-16_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\n<RemoteCode\n\turl=\"https://raw.githubusercontent.com/felangel/bloc/master/examples/github_search/flutter_github_search/lib/search_form.dart\"\n\ttitle=\"flutter_github_search/lib/search_form.dart\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Builder with Context Watch Pattern\nDESCRIPTION: Alternative approach using Builder and context.watch to scope rebuilds.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/flutter-bloc-concepts.mdx#2025-04-16_snippet_18\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return MaterialApp(\n    home: Scaffold(\n      body: Builder(\n        builder: (context) {\n          // Whenever the state changes, only the Text is rebuilt.\n          final state = context.watch<MyBloc>().state;\n          return Text(state.value);\n        },\n      ),\n    ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Events within a Bloc\nDESCRIPTION: Demonstrates how to add events internally within a bloc to handle real-time updates from a repository.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/faqs.mdx#2025-04-16_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nclass MyBloc extends Bloc<MyEvent, MyState> {\n  MyBloc({\n    required UserRepository userRepository,\n  }) : super(MyState.initial()) {\n    on<_UserChanged>(_onUserChanged);\n\n    _userSubscription = userRepository.user.listen(\n      (user) => add(_UserChanged(user)),\n    );\n  }\n\n  late final StreamSubscription<User> _userSubscription;\n\n  void _onUserChanged(_UserChanged event, Emitter<MyState> emit) {\n    emit(state.copyWith(user: event.user));\n  }\n\n  @override\n  Future<void> close() {\n    _userSubscription.cancel();\n    return super.close();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating GitHub Repository Layer in Dart\nDESCRIPTION: This code implements a GithubRepository class that serves as an abstraction between the data layer (GithubClient) and business logic layer (Bloc). It leverages GithubCache for memoization to improve performance by avoiding unnecessary API calls.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/github-search.mdx#2025-04-16_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nimport 'github_cache.dart';\nimport 'github_client.dart';\nimport 'models/models.dart';\n\nclass GithubRepository {\n  GithubRepository(this.cache, this.client);\n\n  final GithubCache cache;\n  final GithubClient client;\n\n  Future<SearchResult> search(String term) async {\n    if (cache.contains(term)) {\n      return cache.get(term)!;\n    }\n\n    final result = await client.search(term);\n    cache.set(term, result);\n    return result;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using BlocProvider with Eager Creation in Flutter\nDESCRIPTION: Shows how to force BlocProvider to create the bloc immediately instead of lazily by setting lazy to false.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/flutter-bloc-concepts.mdx#2025-04-16_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nBlocProvider(\n  lazy: false,\n  create: (BuildContext context) => BlocA(),\n  child: ChildA(),\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Transition Observation in BlocObserver\nDESCRIPTION: This code shows how to implement transition observation in a BlocObserver by overriding the onTransition method. This allows for global monitoring of all transitions across multiple Blocs.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/pt-br/bloc-concepts.mdx#2025-04-16_snippet_18\n\nLANGUAGE: dart\nCODE:\n```\nclass SimpleBlocObserver extends BlocObserver {\n  @override\n  void onChange(BlocBase bloc, Change change) {\n    super.onChange(bloc, change);\n    print('${bloc.runtimeType} $change');\n  }\n\n  @override\n  void onError(BlocBase bloc, Object error, StackTrace stackTrace) {\n    print('${bloc.runtimeType} $error $stackTrace');\n    super.onError(bloc, error, stackTrace);\n  }\n\n  @override\n  void onTransition(Bloc bloc, Transition transition) {\n    super.onTransition(bloc, transition);\n    print('${bloc.runtimeType} $transition');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing PostBloc State Management\nDESCRIPTION: Initial setup of PostBloc class extending Bloc<PostEvent, PostState> with constructor and state initialization. Includes http client setup for API calls.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-infinite-list.mdx#2025-04-16_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass PostBloc extends Bloc<PostEvent, PostState> {\n  PostBloc({required this.httpClient}) : super(const PostState()) {\n    on<PostFetched>(_onPostFetched);\n  }\n\n  final http.Client httpClient;\n  final _postLimit = 20;\n}\n```\n\n----------------------------------------\n\nTITLE: Verification Bloc Testing in Dart\nDESCRIPTION: Demonstrates how to verify internal bloc functionality using the verify parameter.\nSOURCE: https://github.com/felangel/bloc/blob/master/packages/bloc_test/README.md#2025-04-16_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nblocTest(\n  'emits [MyState] when MyEvent is added',\n  build: () => MyBloc(),\n  act: (bloc) => bloc.add(MyEvent()),\n  expect: () => [isA<MyState>()],\n  verify: (_) {\n    verify(() => repository.someMethod(any())).called(1);\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Search Page Widget in Dart\nDESCRIPTION: Implementation of the SearchPage widget allowing users to enter a city name for weather search.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-weather.mdx#2025-04-16_snippet_29\n\nLANGUAGE: dart\nCODE:\n```\n// Code not provided in the original text\n```\n\n----------------------------------------\n\nTITLE: Initializing SimpleBlocObserver\nDESCRIPTION: Demonstrates how to initialize and use the SimpleBlocObserver for global Bloc observation.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/ko/bloc-concepts.mdx#2025-04-16_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  Bloc.observer = SimpleBlocObserver();\n  CounterBloc()\n    ..add(CounterIncrementPressed())\n    ..close();\n}\n```\n\n----------------------------------------\n\nTITLE: Full CounterCubit Implementation\nDESCRIPTION: Complete implementation of a counter using Cubit pattern, showing state management and increment functionality.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/bloc-concepts.mdx#2025-04-16_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nclass CounterCubit extends Cubit<int> {\n  CounterCubit() : super(0);\n\n  void increment() => emit(state + 1);\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of CounterBloc\nDESCRIPTION: Demonstrates the basic usage of a CounterBloc, including creating an instance, adding an event, and observing state changes.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/ko/bloc-concepts.mdx#2025-04-16_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() async {\n  final bloc = CounterBloc();\n  print(bloc.state); // 0\n  bloc.add(CounterIncrementPressed());\n  await Future.delayed(Duration.zero);\n  print(bloc.state); // 1\n  await bloc.close();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Observation in BlocObserver\nDESCRIPTION: This code shows how to implement event observation in a BlocObserver by overriding the onEvent method. This allows for global monitoring of all events across multiple Blocs.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/pt-br/bloc-concepts.mdx#2025-04-16_snippet_22\n\nLANGUAGE: dart\nCODE:\n```\nclass SimpleBlocObserver extends BlocObserver {\n  @override\n  void onEvent(Bloc bloc, Object? event) {\n    super.onEvent(bloc, event);\n    print('${bloc.runtimeType} $event');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Authentication State Transition with Bloc\nDESCRIPTION: Example showing how Bloc tracks state transitions with detailed event information for authentication changes.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/bloc-concepts.mdx#2025-04-16_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\n<AuthenticationTransitionSnippet />\n```\n\n----------------------------------------\n\nTITLE: Implementing BlocObserver with onEvent\nDESCRIPTION: Demonstrates how to create a custom BlocObserver to observe all events globally.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/ko/bloc-concepts.mdx#2025-04-16_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nclass SimpleBlocObserver extends BlocObserver {\n  @override\n  void onEvent(Bloc bloc, Object? event) {\n    super.onEvent(bloc, event);\n    print('${bloc.runtimeType} $event');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Blocs with Equatable\nDESCRIPTION: Shows how Equatable simplifies bloc testing by allowing direct state instance comparison instead of using matchers or predicates.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/faqs.mdx#2025-04-16_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nblocTest<CounterBloc, int>(\n  'emits [1] when increment is added',\n  build: () => CounterBloc(),\n  act: (bloc) => bloc.add(CounterEvent.increment),\n  expect: () => [1],\n);\n```\n\n----------------------------------------\n\nTITLE: Defining App Events for Authentication Flow\nDESCRIPTION: The app_event.dart file defines the events that can be dispatched to the AppBloc, including subscription to user changes and logout actions.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-firebase-login.mdx#2025-04-16_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:equatable/equatable.dart';\n\nabstract class AppEvent extends Equatable {\n  const AppEvent();\n\n  @override\n  List<Object> get props => [];\n}\n\nclass AppLogoutRequested extends AppEvent {\n  const AppLogoutRequested();\n}\n\nclass AppUserChanged extends AppEvent {\n  const AppUserChanged(this.user);\n\n  final User user;\n\n  @override\n  List<Object> get props => [user];\n}\n\n```\n\n----------------------------------------\n\nTITLE: Complete CounterCubit Implementation\nDESCRIPTION: Provides a full implementation of a CounterCubit for comparison with CounterBloc.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/ko/bloc-concepts.mdx#2025-04-16_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nclass CounterCubit extends Cubit<int> {\n  CounterCubit() : super(0);\n\n  void increment() => emit(state + 1);\n}\n```\n\n----------------------------------------\n\nTITLE: Observing Bloc Changes with onChange\nDESCRIPTION: Demonstrates how to observe all state changes in a Bloc using the onChange method.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/ko/bloc-concepts.mdx#2025-04-16_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n@override\nvoid onChange(Change<int> change) {\n  super.onChange(change);\n  print(change);\n}\n```\n\n----------------------------------------\n\nTITLE: Nesting Multiple BlocListeners in Flutter\nDESCRIPTION: Shows how multiple BlocListeners can be nested to listen to multiple blocs in a widget subtree.\nSOURCE: https://github.com/felangel/bloc/blob/master/packages/flutter_bloc/README.md#2025-04-16_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\nBlocListener<BlocA, BlocAState>(\n  listener: (context, state) {},\n  child: BlocListener<BlocB, BlocBState>(\n    listener: (context, state) {},\n    child: BlocListener<BlocC, BlocCState>(\n      listener: (context, state) {},\n      child: ChildA(),\n    ),\n  ),\n)\n```\n\n----------------------------------------\n\nTITLE: Testing Blocs without Equatable\nDESCRIPTION: Demonstrates the more complex testing approach required when blocs don't use Equatable, requiring predicate-based matching.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/faqs.mdx#2025-04-16_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nblocTest<CounterBloc, Counter>(\n  'emits a Counter with value 1 when increment is added',\n  build: () => CounterBloc(),\n  act: (bloc) => bloc.add(CounterEvent.increment),\n  expect: () => [\n    predicate<Counter>((counter) => counter.value == 1)\n  ],\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Location Model for OpenMeteo API in Dart\nDESCRIPTION: Implementation of a Location data model class to store and serialize location data from the OpenMeteo API response, including properties like id, name, latitude, longitude, and country.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-weather.mdx#2025-04-16_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:json_annotation/json_annotation.dart';\n\npart 'location.g.dart';\n\n@JsonSerializable()\nclass Location {\n  const Location({\n    required this.id,\n    required this.name,\n    required this.latitude,\n    required this.longitude,\n    required this.country,\n  });\n\n  factory Location.fromJson(Map<String, dynamic> json) =>\n      _$LocationFromJson(json);\n\n  final int id;\n  final String name;\n  final double latitude;\n  final double longitude;\n  final String country;\n}\n```\n\n----------------------------------------\n\nTITLE: Observing Events in a Bloc\nDESCRIPTION: This code demonstrates how to override the onEvent method in a Bloc to observe incoming events. The onEvent method is called whenever a new event is added to the Bloc.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/pt-br/bloc-concepts.mdx#2025-04-16_snippet_21\n\nLANGUAGE: dart\nCODE:\n```\nclass CounterBloc extends Bloc<CounterEvent, int> {\n  CounterBloc() : super(0) {\n    on<CounterIncrementPressed>((event, emit) {\n      emit(state + 1);\n    });\n  }\n\n  @override\n  void onEvent(CounterEvent event) {\n    super.onEvent(event);\n    print(event);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Bloc with onError\nDESCRIPTION: This code demonstrates how to implement error handling in a Bloc by using the addError method and overriding onError. The onError method is called whenever an error occurs in the Bloc.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/pt-br/bloc-concepts.mdx#2025-04-16_snippet_24\n\nLANGUAGE: dart\nCODE:\n```\nclass CounterBloc extends Bloc<CounterEvent, int> {\n  CounterBloc() : super(0) {\n    on<CounterIncrementPressed>((event, emit) {\n      addError(Exception('increment error!'), StackTrace.current);\n      emit(state + 1);\n    });\n  }\n\n  @override\n  void onError(Object error, StackTrace stackTrace) {\n    print('$error, $stackTrace');\n    super.onError(error, stackTrace);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Observing State Changes in a Bloc with onChange\nDESCRIPTION: This code shows how to override the onChange method in a Bloc to observe state changes. Similar to Cubit, the onChange method is called whenever the Bloc emits a new state.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/pt-br/bloc-concepts.mdx#2025-04-16_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nclass CounterBloc extends Bloc<CounterEvent, int> {\n  CounterBloc() : super(0) {\n    on<CounterIncrementPressed>((event, emit) {\n      emit(state + 1);\n    });\n  }\n\n  @override\n  void onChange(Change<int> change) {\n    super.onChange(change);\n    print(change);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using BlocBuilder with BlocA in Flutter\nDESCRIPTION: Demonstrates how to use BlocBuilder to build a widget based on BlocA's state, with an optional bloc parameter for scoping.\nSOURCE: https://github.com/felangel/bloc/blob/master/packages/flutter_bloc/README.md#2025-04-16_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nBlocBuilder<BlocA, BlocAState>(\n  builder: (context, state) {\n    // return widget here based on BlocA's state\n  }\n)\n```\n\nLANGUAGE: dart\nCODE:\n```\nBlocBuilder<BlocA, BlocAState>(\n  bloc: blocA, // provide the local bloc instance\n  builder: (context, state) {\n    // return widget here based on BlocA's state\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Weather Page Widget in Dart\nDESCRIPTION: Implementation of the WeatherPage widget using BlocProvider to provide the WeatherCubit instance to the widget tree.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-weather.mdx#2025-04-16_snippet_27\n\nLANGUAGE: dart\nCODE:\n```\n// Code not provided in the original text\n```\n\n----------------------------------------\n\nTITLE: Async Wait Bloc Testing in Dart\nDESCRIPTION: Shows how to test async operations in blocs using the wait parameter.\nSOURCE: https://github.com/felangel/bloc/blob/master/packages/bloc_test/README.md#2025-04-16_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nblocTest(\n  'emits [MyState] when MyEvent is added',\n  build: () => MyBloc(),\n  act: (bloc) => bloc.add(MyEvent()),\n  wait: const Duration(milliseconds: 300),\n  expect: () => [isA<MyState>()],\n);\n```\n\n----------------------------------------\n\nTITLE: Effect of Equatable on State Emissions\nDESCRIPTION: Illustrates how Equatable affects state emissions by preventing duplicate state updates when values are equal.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/faqs.mdx#2025-04-16_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nbloc.add(EventA());\nbloc.add(EventA());\n\n// If StateA extends Equatable, the second bloc.add(EventA()) \n// will not trigger a state change notification\n// because the states will be equal.\n```\n\n----------------------------------------\n\nTITLE: Main Application Entry Point in Dart\nDESCRIPTION: Main entry point of the application, initializing WeatherApp, BlocObserver, and HydratedStorage for state persistence.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-weather.mdx#2025-04-16_snippet_35\n\nLANGUAGE: dart\nCODE:\n```\n// Code not provided in the original text\n```\n\n----------------------------------------\n\nTITLE: Using Builder with context.select for Scoped Rebuilds in Flutter Bloc\nDESCRIPTION: Demonstrates using a Builder widget with context.select to scope rebuilds. This limits rebuilds to only the widgets within the Builder when the selected property changes.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/zh-cn/flutter-bloc-concepts.mdx#2025-04-16_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return MaterialApp(\n    home: Scaffold(\n      body: Builder(\n        builder: (context) {\n          // 当 state.name 变化时，只有 Text 会重新构建。\n          final name = context.select((ProfileBloc bloc) => bloc.state.name);\n          return Text(name);\n        },\n      ),\n    ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Weather Model Implementation in Dart\nDESCRIPTION: Definition of the Weather model class used in the business logic layer to represent weather data and temperature settings.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-weather.mdx#2025-04-16_snippet_20\n\nLANGUAGE: dart\nCODE:\n```\n// Code not provided in the original text\n```\n\n----------------------------------------\n\nTITLE: Implementing an Event Handler for Increment Event\nDESCRIPTION: This code shows how to implement the event handler for CounterIncrementPressed events in a CounterBloc. The handler emits a new state by incrementing the current state value.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/pt-br/bloc-concepts.mdx#2025-04-16_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nclass CounterBloc extends Bloc<CounterEvent, int> {\n  CounterBloc() : super(0) {\n    on<CounterIncrementPressed>((event, emit) {\n      emit(state + 1);\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Search Bar Component in AngularDart\nDESCRIPTION: This Dart code implements the search bar component for the AngularDart GitHub search application, handling user input and notifying the bloc.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/github-search.mdx#2025-04-16_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\n<RemoteCode\n\turl=\"https://raw.githubusercontent.com/felangel/bloc/master/examples/github_search/angular_github_search/lib/src/search_form/search_bar/search_bar_component.dart\"\n\ttitle=\"angular_github_search/lib/src/search_form/search_bar/search_bar_component.dart\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining Weather Model in Dart\nDESCRIPTION: This snippet demonstrates the implementation of the Weather model class with JSON serialization annotations.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-weather.mdx#2025-04-16_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\n// Code not directly available in the provided text\n```\n\n----------------------------------------\n\nTITLE: Testing Initial State of CounterBloc\nDESCRIPTION: A simple test that verifies the initial state of CounterBloc is zero. This test ensures that the bloc initializes with the correct starting state.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/testing.mdx#2025-04-16_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\ntest('initial state is 0', () {\n  expect(counterBloc.state, 0);\n});\n```\n\n----------------------------------------\n\nTITLE: Exception Testing in Dart Blocs\nDESCRIPTION: Shows how to test exception handling in blocs using the errors parameter.\nSOURCE: https://github.com/felangel/bloc/blob/master/packages/bloc_test/README.md#2025-04-16_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nblocTest(\n  'throws Exception when null is added',\n  build: () => MyBloc(),\n  act: (bloc) => bloc.add(null),\n  errors: () => [isA<Exception>()]\n);\n```\n\n----------------------------------------\n\nTITLE: Using a ReplayBloc in Dart\nDESCRIPTION: Demonstrates how to use a ReplayBloc, including adding an event, waiting for state updates, and using undo and redo functionality.\nSOURCE: https://github.com/felangel/bloc/blob/master/packages/replay_bloc/README.md#2025-04-16_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  // trigger a state change\n  final bloc = CounterBloc()..add(CounterIncrementPressed());\n\n  // wait for state to update\n  await bloc.stream.first;\n  print(bloc.state); // 1\n\n  // undo the change\n  bloc.undo();\n  print(bloc.state); // 0\n\n  // redo the change\n  bloc.redo();\n  print(bloc.state); // 1\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Search Body Component in AngularDart\nDESCRIPTION: This Dart code implements the search body component for the AngularDart GitHub search application, displaying search results, errors, and loading indicators.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/github-search.mdx#2025-04-16_snippet_18\n\nLANGUAGE: dart\nCODE:\n```\n<RemoteCode\n\turl=\"https://raw.githubusercontent.com/felangel/bloc/master/examples/github_search/angular_github_search/lib/src/search_form/search_body/search_body_component.dart\"\n\ttitle=\"angular_github_search/lib/src/search_form/search_body/search_body_component.dart\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Initializing RepositoryProvider with Resource Disposal in Flutter\nDESCRIPTION: Creates a RepositoryProvider with a dispose callback to handle resource cleanup when the repository is no longer needed.\nSOURCE: https://github.com/felangel/bloc/blob/master/packages/flutter_bloc/README.md#2025-04-16_snippet_22\n\nLANGUAGE: dart\nCODE:\n```\nRepositoryProvider(\n  create: (context) => RepositoryA(),\n  dispose: (repository) => repository.dispose(),\n  child: ChildA(),\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing LoginForm Widget in Flutter\nDESCRIPTION: This code creates the LoginForm widget which handles user input for login and responds to state changes from the LoginBloc.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-login.mdx#2025-04-16_snippet_20\n\nLANGUAGE: dart\nCODE:\n```\nclass LoginForm extends StatelessWidget {\n  const LoginForm({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return BlocListener<LoginBloc, LoginState>(\n      listener: (context, state) {\n        if (state.status.isSubmissionFailure) {\n          ScaffoldMessenger.of(context)\n            ..hideCurrentSnackBar()\n            ..showSnackBar(\n              const SnackBar(content: Text('Authentication Failure')),\n            );\n        }\n      },\n      child: Align(\n        alignment: const Alignment(0, -1 / 3),\n        child: Column(\n          mainAxisSize: MainAxisSize.min,\n          children: [\n            _UsernameInput(),\n            const Padding(padding: EdgeInsets.all(12)),\n            _PasswordInput(),\n            const Padding(padding: EdgeInsets.all(12)),\n            _LoginButton(),\n          ],\n        ),\n      ),\n    );\n  }\n}\n\nclass _UsernameInput extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return BlocBuilder<LoginBloc, LoginState>(\n      buildWhen: (previous, current) => previous.username != current.username,\n      builder: (context, state) {\n        return TextField(\n          key: const Key('loginForm_usernameInput_textField'),\n          onChanged: (username) =>\n              context.read<LoginBloc>().add(LoginUsernameChanged(username)),\n          decoration: InputDecoration(\n            labelText: 'username',\n            errorText: state.username.invalid ? 'invalid username' : null,\n          ),\n        );\n      },\n    );\n  }\n}\n\nclass _PasswordInput extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return BlocBuilder<LoginBloc, LoginState>(\n      buildWhen: (previous, current) => previous.password != current.password,\n      builder: (context, state) {\n        return TextField(\n          key: const Key('loginForm_passwordInput_textField'),\n          onChanged: (password) =>\n              context.read<LoginBloc>().add(LoginPasswordChanged(password)),\n          obscureText: true,\n          decoration: InputDecoration(\n            labelText: 'password',\n            errorText: state.password.invalid ? 'invalid password' : null,\n          ),\n        );\n      },\n    );\n  }\n}\n\nclass _LoginButton extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return BlocBuilder<LoginBloc, LoginState>(\n      buildWhen: (previous, current) => previous.status != current.status,\n      builder: (context, state) {\n        return state.status.isSubmissionInProgress\n            ? const CircularProgressIndicator()\n            : ElevatedButton(\n                key: const Key('loginForm_continue_raisedButton'),\n                onPressed: state.status.isValidated\n                    ? () {\n                        context.read<LoginBloc>().add(const LoginSubmitted());\n                      }\n                    : null,\n                child: const Text('Login'),\n              );\n      },\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using context.select for Partial State in Dart\nDESCRIPTION: Demonstrates using context.select to render/update UI based on a part of a bloc's state, addressing the need for a simpler buildWhen.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/es/migration.mdx#2025-04-16_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nfinal name = context.select((UserBloc bloc) => bloc.state.user.name);\n```\n\n----------------------------------------\n\nTITLE: Using a Bloc with Stream Subscription\nDESCRIPTION: This snippet shows how to use a CounterBloc with a stream subscription to listen for state changes. It creates a Bloc, subscribes to state changes, adds an event, and properly handles cleanup.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/pt-br/bloc-concepts.mdx#2025-04-16_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> main() async {\n  final bloc = CounterBloc();\n  \n  final subscription = bloc.stream.listen(print); // print all state changes\n  \n  bloc.add(CounterIncrementPressed());\n  \n  await Future.delayed(Duration.zero);\n  \n  await subscription.cancel();\n  await bloc.close();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining App State with Authentication Status\nDESCRIPTION: The app_state.dart file defines the application state class that combines the authentication status and user information, extending Equatable for efficient state comparison.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-firebase-login.mdx#2025-04-16_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:authentication_repository/authentication_repository.dart';\nimport 'package:equatable/equatable.dart';\nimport 'package:flutter_firebase_login/app/app.dart';\n\nenum AppStatus {\n  authenticated,\n  unauthenticated,\n}\n\nclass AppState extends Equatable {\n  const AppState._(\n    this.status,\n    this.user,\n  );\n\n  const AppState.authenticated(User user)\n      : this._(AppStatus.authenticated, user);\n\n  const AppState.unauthenticated() : this._(AppStatus.unauthenticated, User.empty);\n\n  final AppStatus status;\n  final User user;\n\n  @override\n  List<Object> get props => [status, user];\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using a ReplayCubit in Dart\nDESCRIPTION: Shows how to use a ReplayCubit, including incrementing the state, undoing, and redoing changes. This example demonstrates the undo and redo functionality provided by ReplayCubit.\nSOURCE: https://github.com/felangel/bloc/blob/master/packages/replay_bloc/README.md#2025-04-16_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  final cubit = CounterCubit();\n\n  // trigger a state change\n  cubit.increment();\n  print(cubit.state); // 1\n\n  // undo the change\n  cubit.undo();\n  print(cubit.state); // 0\n\n  // redo the change\n  cubit.redo();\n  print(cubit.state); // 1\n}\n```\n\n----------------------------------------\n\nTITLE: Seeded State Bloc Testing in Dart\nDESCRIPTION: Shows how to test a bloc with an initial seeded state value.\nSOURCE: https://github.com/felangel/bloc/blob/master/packages/bloc_test/README.md#2025-04-16_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nblocTest(\n  'emits [10] when seeded with 9',\n  build: () => CounterBloc(),\n  seed: () => 9,\n  act: (bloc) => bloc.add(CounterIncrementPressed()),\n  expect: () => [10],\n);\n```\n\n----------------------------------------\n\nTITLE: Stubbing Bloc State Stream in Dart\nDESCRIPTION: Shows how to stub the state stream of a bloc using whenListen to return predefined states and verify the behavior.\nSOURCE: https://github.com/felangel/bloc/blob/master/packages/bloc_test/README.md#2025-04-16_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n// Create a mock instance\nfinal counterBloc = MockCounterBloc();\n\n// Stub the state stream\nwhenListen(\n  counterBloc,\n  Stream.fromIterable([0, 1, 2, 3]),\n  initialState: 0,\n);\n\n// Assert that the initial state is correct.\nexpect(counterBloc.state, equals(0));\n\n// Assert that the stubbed stream is emitted.\nawait expectLater(counterBloc.stream, emitsInOrder(<int>[0, 1, 2, 3]));\n\n// Assert that the current state is in sync with the stubbed stream.\nexpect(counterBloc.state, equals(3));\n```\n\n----------------------------------------\n\nTITLE: Using Single State with Error Handling in Bloc\nDESCRIPTION: Shows how to update a bloc state while retaining previous data when an error occurs using the copyWith pattern.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/faqs.mdx#2025-04-16_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\n// When an error occurs we can emit a failure state\n// while maintaining any previous data\nemit(state.copyWith(\n  status: Status.failure,\n  error: () => myException,\n));\n```\n\n----------------------------------------\n\nTITLE: Implementing onTransition in CounterBloc\nDESCRIPTION: Demonstrates how to override the onTransition method to capture state transitions in a Bloc.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/ko/bloc-concepts.mdx#2025-04-16_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\n@override\nvoid onTransition(Transition<CounterEvent, int> transition) {\n  super.onTransition(transition);\n  print(transition);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Event to Bloc in Build Method (v6.1.x)\nDESCRIPTION: Demonstrates the new way of adding an event to a bloc using context.read, which is more efficient as it accesses the bloc only when needed.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/es/migration.mdx#2025-04-16_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return ElevatedButton(\n    onPressed: () => context.read<MyBloc>().add(MyEvent()),\n    ...\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ReplayCubitMixin with HydratedCubit in Dart\nDESCRIPTION: Demonstrates how to use the ReplayCubitMixin with a HydratedCubit to combine replay functionality with hydration. Includes methods for incrementing, decrementing, and JSON serialization.\nSOURCE: https://github.com/felangel/bloc/blob/master/packages/replay_bloc/README.md#2025-04-16_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass CounterCubit extends HydratedCubit<int> with ReplayCubitMixin {\n  CounterCubit() : super(0);\n\n  void increment() => emit(state + 1);\n  void decrement() => emit(state - 1);\n\n  @override\n  int fromJson(Map<String, dynamic> json) => json['value'] as int;\n\n  @override\n  Map<String, int> toJson(int state) => {'value': state};\n}\n```\n\n----------------------------------------\n\nTITLE: Stream-based Bloc Usage\nDESCRIPTION: Demonstrates how to use a Bloc as a Stream, subscribing to state changes and handling events.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/bloc-concepts.mdx#2025-04-16_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nfinal bloc = CounterBloc();\nfinal subscription = bloc.stream.listen(print); // 1\nbloc.add(CounterIncrementPressed());\nawait Future.delayed(Duration.zero);\nawait subscription.cancel();\nawait bloc.close();\n```\n\n----------------------------------------\n\nTITLE: Customizing HydratedStorage Directory in Dart\nDESCRIPTION: Demonstrates how to use a custom storage directory when creating an instance of HydratedStorage, in this case using the application documents directory.\nSOURCE: https://github.com/felangel/bloc/blob/master/packages/hydrated_bloc/README.md#2025-04-16_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nfinal storage = await HydratedStorage.build(\n  storageDirectory: await getApplicationDocumentsDirectory(),\n);\n```\n\n----------------------------------------\n\nTITLE: Creating GitHub User Model in Dart\nDESCRIPTION: This code defines a GithubUser model that represents a GitHub user account with properties for login and avatar URL. It includes JSON serialization/deserialization support and extends Equatable for equality comparisons.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/github-search.mdx#2025-04-16_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:equatable/equatable.dart';\n\nclass GithubUser extends Equatable {\n  const GithubUser({required this.login, required this.avatarUrl});\n\n  final String login;\n  final String avatarUrl;\n\n  static GithubUser fromJson(Map<String, dynamic> json) {\n    return GithubUser(\n      login: json['login'] as String,\n      avatarUrl: json['avatar_url'] as String,\n    );\n  }\n\n  @override\n  List<Object> get props => [login, avatarUrl];\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Search Result Error Model in Dart\nDESCRIPTION: This code defines a SearchResultError model that represents API errors returned during GitHub repository searches. It includes the error message and provides JSON deserialization support.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/github-search.mdx#2025-04-16_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:equatable/equatable.dart';\n\nclass SearchResultError extends Equatable implements Exception {\n  const SearchResultError({required this.message});\n\n  final String message;\n\n  static SearchResultError fromJson(Map<String, dynamic> json) {\n    return SearchResultError(\n      message: json['message'] as String,\n    );\n  }\n\n  @override\n  List<Object> get props => [message];\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Ticker Class in Dart\nDESCRIPTION: Definition of the Ticker class, which serves as the data source for the timer application. It exposes a stream of ticks based on the specified duration.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-timer.mdx#2025-04-16_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass Ticker {\n  const Ticker();\n  Stream<int> tick({required int ticks}) {\n    return Stream.periodic(const Duration(seconds: 1), (x) => ticks - x - 1)\n        .take(ticks);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using onChange in CounterBloc\nDESCRIPTION: Shows how to update the main.dart file to use the onChange method for observing state changes.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/ko/bloc-concepts.mdx#2025-04-16_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  CounterBloc()\n    ..add(CounterIncrementPressed())\n    ..close();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Integer Stream in Dart\nDESCRIPTION: Demonstrates how to create a Stream of integers using an async generator function. The function yields integers up to a specified maximum value.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/bloc-concepts.mdx#2025-04-16_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nStream<int> countStream(int max) async* {\n  for (int i = 0; i < max; i++) {\n    yield i;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Handling in CounterBloc\nDESCRIPTION: Shows how to implement error handling in a Bloc using addError and onError methods.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/ko/bloc-concepts.mdx#2025-04-16_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\n@override\nvoid onError(Object error, StackTrace stackTrace) {\n  print('$error, $stackTrace');\n  super.onError(error, stackTrace);\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Bloc State in Build Method (v6.1.x)\nDESCRIPTION: Demonstrates the new way of accessing bloc state in the build method using context.watch, ensuring the widget rebuilds when the state changes.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/es/migration.mdx#2025-04-16_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  final state = context.watch<MyBloc>().state;\n  return Text('$state');\n}\n```\n\n----------------------------------------\n\nTITLE: Emitting New State Instances in Bloc (Good Example 2)\nDESCRIPTION: Demonstrates the correct approach for emitting a new state instance by creating a fresh object with updated values.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/faqs.mdx#2025-04-16_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n@override\nvoid someMethod() {\n  emit(MyState(\n    value: state.value + 1,\n    title: state.title,\n    items: state.items,\n  ));\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CounterBloc in Dart\nDESCRIPTION: Implementation of the CounterBloc class that handles increment and decrement events. The bloc maps CounterEvents to integer state values using Bloc library patterns.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/ngdart-counter.mdx#2025-04-16_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:bloc/bloc.dart';\n\nenum CounterEvent { increment, decrement }\n\nclass CounterBloc extends Bloc<CounterEvent, int> {\n  CounterBloc() : super(0);\n\n  @override\n  Stream<int> mapEventToState(CounterEvent event) async* {\n    switch (event) {\n      case CounterEvent.increment:\n        yield state + 1;\n        break;\n      case CounterEvent.decrement:\n        yield state - 1;\n        break;\n    }\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Counter Page Component with Bloc Integration\nDESCRIPTION: Angular component implementation that initializes and manages the CounterBloc lifecycle. Includes methods for dispatching increment and decrement events.\nSOURCE: https://github.com/felangel/bloc/blob/master/packages/angular_bloc/README.md#2025-04-16_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:angular/angular.dart';\nimport 'package:angular_bloc/angular_bloc.dart';\n\nimport './counter_bloc.dart';\n\n@Component(\n  selector: 'counter-page',\n  templateUrl: 'counter_page_component.html',\n  pipes: [BlocPipe],\n)\nclass CounterPageComponent implements OnInit, OnDestroy {\n  late final CounterBloc counterBloc;\n\n  @override\n  void ngOnInit() {\n    counterBloc = CounterBloc();\n  }\n\n  @override\n  void ngOnDestroy() {\n    counterBloc.close();\n  }\n\n  void increment() => counterBloc.add(CounterIncrementPressed());\n\n  void decrement() => counterBloc.add(CounterDecrementPressed());\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Search Result Item Model in Dart\nDESCRIPTION: This code defines a SearchResultItem model that represents an individual GitHub repository from search results. It contains properties like full name, html URL, and repository owner information with JSON serialization support.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/github-search.mdx#2025-04-16_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:equatable/equatable.dart';\n\nimport 'github_user.dart';\n\nclass SearchResultItem extends Equatable {\n  const SearchResultItem({\n    required this.fullName,\n    required this.htmlUrl,\n    required this.owner,\n  });\n\n  final String fullName;\n  final String htmlUrl;\n  final GithubUser owner;\n\n  static SearchResultItem fromJson(Map<String, dynamic> json) {\n    return SearchResultItem(\n      fullName: json['full_name'] as String,\n      htmlUrl: json['html_url'] as String,\n      owner: GithubUser.fromJson(json['owner'] as Map<String, dynamic>),\n    );\n  }\n\n  @override\n  List<Object> get props => [fullName, htmlUrl, owner];\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Counter Bloc in Dart\nDESCRIPTION: A Bloc implementation for counter functionality using events. Handles increment and decrement events to modify the counter state.\nSOURCE: https://github.com/felangel/bloc/blob/master/packages/angular_bloc/README.md#2025-04-16_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:bloc/bloc.dart';\n\nsealed class CounterEvent {}\nfinal class CounterIncrementPressed extends CounterEvent {}\nfinal class CounterDecrementPressed extends CounterEvent {}\n\nclass CounterBloc extends Bloc<CounterEvent, int> {\n  CounterBloc() : super(0) {\n    on<CounterIncrementPressed>((event, emit) => emit(state + 1));\n    on<CounterDecrementPressed>((event, emit) => emit(state - 1));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: OpenMeteo API Library Barrel File in Dart\nDESCRIPTION: A barrel file that exports the OpenMeteo API models to simplify imports in other parts of the application, exporting both Weather and Location models.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-weather.mdx#2025-04-16_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n/// Open Meteo Api Library\n///\n/// A dart API client for the Open Meteo API.\nexport 'src/models/models.dart';\n```\n\n----------------------------------------\n\nTITLE: Using a Cubit with onChange Implementation\nDESCRIPTION: This snippet shows how to use a CounterCubit with onChange implementation. It creates an instance of the Cubit, calls the increment method, and then closes the Cubit properly.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/pt-br/bloc-concepts.mdx#2025-04-16_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  final cubit = CounterCubit();\n  cubit.increment();\n  cubit.close();\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Cubit with onError\nDESCRIPTION: This code demonstrates how to implement error handling in a Cubit by using the addError method and overriding onError. The onError method is called whenever an error occurs in the Cubit.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/pt-br/bloc-concepts.mdx#2025-04-16_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nclass CounterCubit extends Cubit<int> {\n  CounterCubit() : super(0);\n\n  void increment() {\n    addError(Exception('increment error!'), StackTrace.current);\n    emit(state + 1);\n  }\n\n  @override\n  void onError(Object error, StackTrace stackTrace) {\n    print('$error, $stackTrace');\n    super.onError(error, stackTrace);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building a Presentation Component with Bloc in Dart\nDESCRIPTION: A widget that renders UI based on the state from a bloc and handles user interactions. This demonstrates how the presentation layer interacts with the business logic layer.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/architecture.mdx#2025-04-16_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nclass PresentationComponent extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    // Wrapping a component with BlocBuilder will rebuild the component\n    // every time the bloc state changes\n    return BlocBuilder<BusinessLogicComponent, MyState>(\n      builder: (context, state) {\n        // Render UI based on state\n        if (state is MyStateInitial) {\n          return WelcomeScreen();\n        } else if (state is MyStateLoading) {\n          return LoadingIndicator();\n        } else if (state is MyStateSuccess) {\n          return SuccessScreen(data: state.data);\n        } else if (state is MyStateFailure) {\n          return ErrorScreen(error: state.error);\n        }\n      },\n    );\n  }\n\n  void onButtonPressed(BuildContext context) {\n    // We can add events to our bloc, e.g. on button tap\n    context.read<BusinessLogicComponent>().add(AppStarted());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Authentication State Change with Cubit\nDESCRIPTION: Demonstrates the more limited state change logging when using Cubit for authentication management.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/bloc-concepts.mdx#2025-04-16_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\n<AuthenticationChangeSnippet />\n```\n\n----------------------------------------\n\nTITLE: Recommended Event Naming Conventions in Dart\nDESCRIPTION: Examples of proper event naming following the convention of 'BlocSubject + Noun (optional) + Verb (event)' in past tense, with the base event class named 'BlocSubject + Event'.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/naming-conventions.mdx#2025-04-16_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nabstract class CounterEvent {}\n\n// Initial load event follows convention: BlocSubject + Started\nclass CounterStarted extends CounterEvent {}\n\nclass CounterIncremented extends CounterEvent {}\n\nclass CounterDecremented extends CounterEvent {}\n\nclass CounterIncrementRetried extends CounterEvent {}\n```\n\n----------------------------------------\n\nTITLE: Settings Page Widget in Dart\nDESCRIPTION: Implementation of the SettingsPage widget allowing users to update temperature unit preferences.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-weather.mdx#2025-04-16_snippet_28\n\nLANGUAGE: dart\nCODE:\n```\n// Code not provided in the original text\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Application Entry Point\nDESCRIPTION: The main.dart file initializes Firebase and runs the application with proper configuration for handling errors and rendering the App widget with the AuthenticationRepository.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-firebase-login.mdx#2025-04-16_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:authentication_repository/authentication_repository.dart';\nimport 'package:firebase_core/firebase_core.dart';\nimport 'package:flutter/widgets.dart';\nimport 'package:flutter_firebase_login/app/app.dart';\n\nFuture<void> main() async {\n  WidgetsFlutterBinding.ensureInitialized();\n  await Firebase.initializeApp();\n  final authenticationRepository = AuthenticationRepository();\n  await authenticationRepository.user.first;\n  runApp(App(authenticationRepository: authenticationRepository));\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Handler for Counter Increment\nDESCRIPTION: Shows how to implement an event handler for the CounterIncrementPressed event in a CounterBloc.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/ko/bloc-concepts.mdx#2025-04-16_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\non<CounterIncrementPressed>((event, emit) {\n  emit(state + 1);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Weather Unit Tests in Dart\nDESCRIPTION: This code snippet demonstrates the implementation of unit tests for the Weather model.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-weather.mdx#2025-04-16_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\n// Code not directly available in the provided text\n```\n\n----------------------------------------\n\nTITLE: Defining User Model\nDESCRIPTION: Implements the User model class with an id property and Equatable for value comparisons.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-login.mdx#2025-04-16_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:equatable/equatable.dart';\n\nclass User extends Equatable {\n  const User(this.id);\n\n  final String id;\n\n  @override\n  List<Object> get props => [id];\n\n  static const empty = User('-');\n}\n```\n\n----------------------------------------\n\nTITLE: Using whenListen in Dart Tests (v6.0.0)\nDESCRIPTION: Demonstrates using whenListen in bloc tests for version 6.0.0, which only requires specifying the State type, making it compatible with both Bloc and Cubit.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/es/migration.mdx#2025-04-16_snippet_23\n\nLANGUAGE: dart\nCODE:\n```\nwhenListen<int>(bloc, Stream.fromIterable([0, 1, 2, 3]));\n```\n\n----------------------------------------\n\nTITLE: Weather Empty Widget in Dart\nDESCRIPTION: Implementation of the WeatherEmpty widget displayed when no weather data is available.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-weather.mdx#2025-04-16_snippet_30\n\nLANGUAGE: dart\nCODE:\n```\n// Code not provided in the original text\n```\n\n----------------------------------------\n\nTITLE: Creating Weather Model for OpenMeteo API in Dart\nDESCRIPTION: Implementation of a Weather data model class to store and serialize weather data from the OpenMeteo API response, including properties like temperature, weatherCode, and timestamp.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-weather.mdx#2025-04-16_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:json_annotation/json_annotation.dart';\n\npart 'weather.g.dart';\n\n@JsonSerializable()\nclass Weather {\n  const Weather({\n    required this.temperature,\n    required this.weatherCode,\n    required this.time,\n  });\n\n  factory Weather.fromJson(Map<String, dynamic> json) =>\n      _$WeatherFromJson(json);\n\n  final double temperature;\n  final double weatherCode;\n  final String time;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing RepositoryProvider in Flutter\nDESCRIPTION: Creates a RepositoryProvider widget to provide a repository instance to its children, used for dependency injection of repositories.\nSOURCE: https://github.com/felangel/bloc/blob/master/packages/flutter_bloc/README.md#2025-04-16_snippet_20\n\nLANGUAGE: dart\nCODE:\n```\nRepositoryProvider(\n  create: (context) => RepositoryA(),\n  child: ChildA(),\n);\n```\n\n----------------------------------------\n\nTITLE: Recommended State Naming Using Single Class in Dart\nDESCRIPTION: Examples of proper state naming using a single class following the convention of 'BlocSubject + State' with a status enum (initial, success, failure, loading) to represent state changes.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/naming-conventions.mdx#2025-04-16_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nenum CounterStatus { initial, loading, success, failure }\n\nclass CounterState {\n  const CounterState({\n    this.status = CounterStatus.initial,\n    this.count = 0,\n    this.error,\n  });\n\n  final CounterStatus status;\n  final int count;\n  final Object? error;\n\n  CounterState copyWith({\n    CounterStatus? status,\n    int? count,\n    Object? Function()? error,\n  }) {\n    return CounterState(\n      status: status ?? this.status,\n      count: count ?? this.count,\n      error: error != null ? error() : this.error,\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Main Function and Test Group for CounterBloc Tests\nDESCRIPTION: Setup of the main function and a test group for organizing CounterBloc tests. The test group provides a way to group related tests together under a descriptive name.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/testing.mdx#2025-04-16_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  group('CounterBloc', () {\n    // tests go here\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Using BlocProvider with Existing Bloc in Flutter\nDESCRIPTION: Demonstrates how to use BlocProvider to provide an existing bloc to a new portion of the widget tree, typically used when making an existing bloc available to a new route.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/flutter-bloc-concepts.mdx#2025-04-16_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nBlocProvider.value(\n  value: BlocProvider.of<BlocA>(context),\n  child: ScreenA(),\n)\n```\n\n----------------------------------------\n\nTITLE: CounterCubit with External Initial State\nDESCRIPTION: Shows how to create a CounterCubit that accepts an external initial state value.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/bloc-concepts.mdx#2025-04-16_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass CounterCubit extends Cubit<int> {\n  CounterCubit(int initialState) : super(initialState);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Mock Storage for Testing in Dart\nDESCRIPTION: Shows how to set up a mock Storage implementation for unit testing code that uses HydratedBloc. It uses the mocktail package for mocking.\nSOURCE: https://github.com/felangel/bloc/blob/master/packages/hydrated_bloc/README.md#2025-04-16_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter_test/flutter_test.dart';\nimport 'package:hydrated_bloc/hydrated_bloc.dart';\nimport 'package:mocktail/mocktail.dart';\n\nclass MockStorage extends Mock implements Storage {}\n\nvoid main() {\n  late Storage storage;\n\n  setUp(() {\n    storage = MockStorage();\n    when(\n      () => storage.write(any(), any<dynamic>()),\n    ).thenAnswer((_) async {});\n    HydratedBloc.storage = storage;\n  });\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Repository Instance in Flutter\nDESCRIPTION: Demonstrates how to retrieve a repository instance from the context using RepositoryProvider.\nSOURCE: https://github.com/felangel/bloc/blob/master/packages/flutter_bloc/README.md#2025-04-16_snippet_21\n\nLANGUAGE: dart\nCODE:\n```\n// with extensions\ncontext.read<RepositoryA>();\n\n// without extensions\nRepositoryProvider.of<RepositoryA>(context)\n```\n\n----------------------------------------\n\nTITLE: Implementing Search Result Item Component in AngularDart\nDESCRIPTION: This Dart code implements the search result item component for the AngularDart GitHub search application, rendering information for a single search result.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/github-search.mdx#2025-04-16_snippet_22\n\nLANGUAGE: dart\nCODE:\n```\n<RemoteCode\n\turl=\"https://raw.githubusercontent.com/felangel/bloc/master/examples/github_search/angular_github_search/lib/src/search_form/search_body/search_results/search_result_item/search_result_item_component.dart\"\n\ttitle=\"angular_github_search/lib/src/search_form/search_body/search_results/search_result_item/search_result_item_component.dart\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Initializing Flutter App with Bloc Observer\nDESCRIPTION: Sets up the main function to run the app and includes a Bloc observer for logging transitions and errors.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-infinite-list.mdx#2025-04-16_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n// Content of lib/main.dart\n```\n\n----------------------------------------\n\nTITLE: Implementing App Widget with Authentication Repository\nDESCRIPTION: The app.dart file provides the entry point of the application UI, setting up the repository provider, authentication bloc, and routing logic based on authentication state.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-firebase-login.mdx#2025-04-16_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:authentication_repository/authentication_repository.dart';\nimport 'package:flow_builder/flow_builder.dart';\nimport 'package:flutter/material.dart';\nimport 'package:flutter_bloc/flutter_bloc.dart';\nimport 'package:flutter_firebase_login/app/bloc/app_bloc.dart';\nimport 'package:flutter_firebase_login/home/home.dart';\nimport 'package:flutter_firebase_login/login/login.dart';\nimport 'package:flutter_firebase_login/theme.dart';\n\nclass App extends StatelessWidget {\n  const App({\n    required AuthenticationRepository authenticationRepository,\n    super.key,\n  }) : _authenticationRepository = authenticationRepository;\n\n  final AuthenticationRepository _authenticationRepository;\n\n  @override\n  Widget build(BuildContext context) {\n    return RepositoryProvider.value(\n      value: _authenticationRepository,\n      child: BlocProvider(\n        create: (_) => AppBloc(\n          authenticationRepository: _authenticationRepository,\n        ),\n        child: const AppView(),\n      ),\n    );\n  }\n}\n\nclass AppView extends StatelessWidget {\n  const AppView({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      theme: theme,\n      home: FlowBuilder<AppStatus>(\n        state: context.select((AppBloc bloc) => bloc.state.status),\n        onGeneratePages: onGenerateAppViewPages,\n      ),\n    );\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using a Bloc with onChange Implementation\nDESCRIPTION: This snippet demonstrates how to use a CounterBloc with onChange implementation. It creates an instance, adds an event to trigger a state change, and properly closes the Bloc.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/pt-br/bloc-concepts.mdx#2025-04-16_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> main() async {\n  final bloc = CounterBloc();\n  \n  bloc.add(CounterIncrementPressed());\n  \n  await Future.delayed(Duration.zero);\n  await bloc.close();\n}\n```\n\n----------------------------------------\n\nTITLE: Output of Event Monitoring in Bloc\nDESCRIPTION: This shows the console output when monitoring events in a CounterBloc. It displays both the local onEvent output and the global BlocObserver output for the added event.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/pt-br/bloc-concepts.mdx#2025-04-16_snippet_23\n\nLANGUAGE: text\nCODE:\n```\nInstance of 'CounterIncrementPressed'\nCounterBloc Instance of 'CounterIncrementPressed'\n```\n\n----------------------------------------\n\nTITLE: Consuming a Stream with Sum Function\nDESCRIPTION: Shows how to consume a Stream of integers and calculate their sum using async/await pattern.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/bloc-concepts.mdx#2025-04-16_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFuture<int> sumStream(Stream<int> stream) async {\n  int sum = 0;\n  await for (int value in stream) {\n    sum += value;\n  }\n  return sum;\n}\n```\n\n----------------------------------------\n\nTITLE: Stubbing Storage Read for Testing in Dart\nDESCRIPTION: Demonstrates how to stub the storage.read API in individual tests to return cached state when testing HydratedBloc implementations.\nSOURCE: https://github.com/felangel/bloc/blob/master/packages/hydrated_bloc/README.md#2025-04-16_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\ntestWidgets('...', (tester) async {\n  when<dynamic>(() => storage.read('$MyBloc')).thenReturn(MyState().toJson());\n\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Overriding Storage in HydratedCubit in Dart\nDESCRIPTION: Shows how to override the global storage instance for a specific HydratedCubit by passing a custom storage instance via the constructor.\nSOURCE: https://github.com/felangel/bloc/blob/master/packages/hydrated_bloc/README.md#2025-04-16_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nclass CounterCubit extends HydratedCubit<int> {\n  CounterCubit() : super(0, storage: EncryptedStorage());\n\n  void increment() => emit(state + 1);\n\n  @override\n  int fromJson(Map<String, dynamic> json) => json['value'] as int;\n\n  @override\n  Map<String, int> toJson(int state) => { 'value': state };\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Search AppComponent in AngularDart\nDESCRIPTION: Main application component setup for GitHub search functionality that creates and injects the GithubRepository into the SearchForm component. This component serves as the entry point for the AngularDart application.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/github-search.mdx#2025-04-16_snippet_24\n\nLANGUAGE: dart\nCODE:\n```\n// Code reference to: angular_github_search/lib/app_component.dart\n```\n\n----------------------------------------\n\nTITLE: HTML Template for App Component\nDESCRIPTION: HTML template for the main app component that renders the counter page component.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/ngdart-counter.mdx#2025-04-16_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<counter-page></counter-page>\n\n```\n\n----------------------------------------\n\nTITLE: Output of CounterCubit with onChange\nDESCRIPTION: This shows the console output when using a CounterCubit with onChange implementation. The Change object contains the currentState (0) and nextState (1).\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/pt-br/bloc-concepts.mdx#2025-04-16_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nChange { currentState: 0, nextState: 1 }\n```\n\n----------------------------------------\n\nTITLE: Defining TimerEvent in Dart\nDESCRIPTION: Implementation of the TimerEvent class and its subclasses, representing different events that can occur in the timer application.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-timer.mdx#2025-04-16_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nabstract class TimerEvent {\n  const TimerEvent();\n}\n\nclass TimerStarted extends TimerEvent {\n  const TimerStarted({required this.duration});\n  final int duration;\n}\n\nclass TimerPaused extends TimerEvent {\n  const TimerPaused();\n}\n\nclass TimerResumed extends TimerEvent {\n  const TimerResumed();\n}\n\nclass TimerReset extends TimerEvent {\n  const TimerReset();\n}\n\nclass _TimerTicked extends TimerEvent {\n  const _TimerTicked({required this.duration});\n  final int duration;\n}\n```\n\n----------------------------------------\n\nTITLE: Remote Widget Testing Code Reference\nDESCRIPTION: Reference to an external test file that demonstrates widget testing with MockWeatherCubit using mocktail's when API to stub cubit states and verify UI behavior.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-weather.mdx#2025-04-16_snippet_37\n\nLANGUAGE: dart\nCODE:\n```\n// Reference to external file: test/weather/view/weather_page_test.dart\n```\n\n----------------------------------------\n\nTITLE: Observing State Changes in a Cubit with onChange\nDESCRIPTION: This code demonstrates how to override the onChange method in a Cubit to observe state changes. The onChange method is called whenever the Cubit emits a new state, providing access to both the current and next state.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/pt-br/bloc-concepts.mdx#2025-04-16_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass CounterCubit extends Cubit<int> {\n  CounterCubit() : super(0);\n\n  void increment() => emit(state + 1);\n\n  @override\n  void onChange(Change<int> change) {\n    super.onChange(change);\n    print(change);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Sign Up State Model for Firebase Authentication\nDESCRIPTION: This code defines the SignUpState model used by the SignUpCubit. It reuses the Email and Password form input models from the login feature and handles form submission status.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-firebase-login.mdx#2025-04-16_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:form_inputs/form_inputs.dart';\nimport 'package:equatable/equatable.dart';\nimport 'package:formz/formz.dart';\n\nclass SignUpState extends Equatable {\n  const SignUpState({\n    this.email = const Email.pure(),\n    this.password = const Password.pure(),\n    this.confirmedPassword = const ConfirmedPassword.pure(),\n    this.status = FormzStatus.pure,\n    this.errorMessage,\n  });\n\n  final Email email;\n  final Password password;\n  final ConfirmedPassword confirmedPassword;\n  final FormzStatus status;\n  final String? errorMessage;\n\n  @override\n  List<Object> get props => [email, password, confirmedPassword, status];\n\n  SignUpState copyWith({\n    Email? email,\n    Password? password,\n    ConfirmedPassword? confirmedPassword,\n    FormzStatus? status,\n    String? errorMessage,\n  }) {\n    return SignUpState(\n      email: email ?? this.email,\n      password: password ?? this.password,\n      confirmedPassword: confirmedPassword ?? this.confirmedPassword,\n      status: status ?? this.status,\n      errorMessage: errorMessage ?? this.errorMessage,\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Weather Loading Widget in Dart\nDESCRIPTION: Implementation of the WeatherLoading widget displayed while fetching weather data.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-weather.mdx#2025-04-16_snippet_32\n\nLANGUAGE: dart\nCODE:\n```\n// Code not provided in the original text\n```\n\n----------------------------------------\n\nTITLE: Counter Page Component with Cubit Integration\nDESCRIPTION: Angular component implementation that initializes and manages the CounterCubit lifecycle. Uses BlocPipe for state management.\nSOURCE: https://github.com/felangel/bloc/blob/master/packages/angular_bloc/README.md#2025-04-16_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:angular/angular.dart';\nimport 'package:angular_bloc/angular_bloc.dart';\n\nimport './counter_cubit.dart';\n\n@Component(\n  selector: 'counter-page',\n  templateUrl: 'counter_page_component.html',\n  pipes: [BlocPipe],\n)\nclass CounterPageComponent implements OnInit, OnDestroy {\n  late final CounterCubit counterCubit;\n\n  @override\n  void ngOnInit() {\n    counterCubit = CounterCubit();\n  }\n\n  @override\n  void ngOnDestroy() {\n    counterCubit.close();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Username Model for Form Validation\nDESCRIPTION: This code creates a Username model using the Formz package for form input validation. It checks if the username is not empty.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-login.mdx#2025-04-16_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:formz/formz.dart';\n\nenum UsernameValidationError { empty }\n\nclass Username extends FormzInput<String, UsernameValidationError> {\n  const Username.pure() : super.pure('');\n  const Username.dirty([super.value = '']) : super.dirty();\n\n  @override\n  UsernameValidationError? validator(String value) {\n    if (value.isEmpty) return UsernameValidationError.empty;\n    return null;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Bloc CLI New Command Usage\nDESCRIPTION: Shows the usage of the 'bloc new' command, which generates new bloc components. It lists available subcommands for creating different types of blocs and cubits.\nSOURCE: https://github.com/felangel/bloc/blob/master/packages/bloc_tools/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ bloc new --help\nGenerate new bloc components.\n\nUsage: bloc new <subcommand> [arguments]\n-h, --help    Print this usage information.\n\nAvailable subcommands:\n  bloc             Generate a new Bloc in Dart. Built for the bloc state management library.\n  cubit            Generate a new Cubit in Dart. Built for the bloc state management library.\n  hydrated_bloc    Generate a new HydratedBloc in Dart. Built for the bloc state management library.\n  hydrated_cubit   Generate a new HydratedCubit in Dart. Built for the bloc state management library.\n  replay_bloc      Generate a new ReplayBloc in Dart. Built for the bloc state management library.\n  replay_cubit     Generate a new ReplayCubit in Dart. Built for the bloc state management library.\n\nRun \"bloc help\" to see global options.\n```\n\n----------------------------------------\n\nTITLE: Logging Authentication State Transition with Bloc in Dart\nDESCRIPTION: Demonstrates how Bloc logs state transitions, providing detailed information about the event that triggered the state change.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/pt-br/bloc-concepts.mdx#2025-04-16_snippet_29\n\nLANGUAGE: dart\nCODE:\n```\n<AuthenticationTransitionSnippet />\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign Up Page with Bloc in Flutter\nDESCRIPTION: This code implements the SignUpPage widget that creates and provides a SignUpCubit to the SignUpForm. It follows the same pattern as the LoginPage to maintain consistency.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-firebase-login.mdx#2025-04-16_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:authentication_repository/authentication_repository.dart';\nimport 'package:flutter/material.dart';\nimport 'package:flutter_bloc/flutter_bloc.dart';\nimport 'package:flutter_firebase_login/sign_up/sign_up.dart';\n\nclass SignUpPage extends StatelessWidget {\n  const SignUpPage({Key? key}) : super(key: key);\n\n  static Route route() {\n    return MaterialPageRoute<void>(builder: (_) => const SignUpPage());\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('Sign Up')),\n      body: Padding(\n        padding: const EdgeInsets.all(8),\n        child: BlocProvider<SignUpCubit>(\n          create: (_) => SignUpCubit(context.read<AuthenticationRepository>()),\n          child: const SignUpForm(),\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Nesting Multiple BlocProviders in Flutter\nDESCRIPTION: Shows how multiple BlocProviders can be nested to provide multiple blocs to a widget subtree.\nSOURCE: https://github.com/felangel/bloc/blob/master/packages/flutter_bloc/README.md#2025-04-16_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nBlocProvider<BlocA>(\n  create: (BuildContext context) => BlocA(),\n  child: BlocProvider<BlocB>(\n    create: (BuildContext context) => BlocB(),\n    child: BlocProvider<BlocC>(\n      create: (BuildContext context) => BlocC(),\n      child: ChildA(),\n    )\n  )\n)\n```\n\n----------------------------------------\n\nTITLE: Using Mason to Generate a Bloc in Dart\nDESCRIPTION: Command to generate a new Bloc class using Mason. This example creates a counter bloc with the basic style option.\nSOURCE: https://github.com/felangel/bloc/blob/master/bricks/bloc/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmason make bloc --name counter --style basic\n```\n\n----------------------------------------\n\nTITLE: Using BlocBuilder with Explicit Bloc in Flutter\nDESCRIPTION: Shows how to use BlocBuilder with an explicitly provided bloc, which is useful when the bloc is scoped to a single widget and isn't accessible via a parent BlocProvider.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/flutter-bloc-concepts.mdx#2025-04-16_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nBlocBuilder<BlocA, BlocAState>(\n  bloc: blocA, // provide the local bloc instance\n  builder: (context, state) {\n    // return widget here based on BlocA's state\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: HTML Template for Counter Page Component\nDESCRIPTION: HTML template for the counter page that displays the current count and provides increment/decrement buttons. It uses the BlocPipe to asynchronously display the counter state.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/ngdart-counter.mdx#2025-04-16_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"counter-page-container\">\n  <h1>Counter</h1>\n  <h2>{{ counterBloc | bloc }}</h2>\n  <button class=\"counter-button\" (click)=\"increment()\">\n    Increment\n  </button>\n  <button class=\"counter-button\" (click)=\"decrement()\">\n    Decrement\n  </button>\n</div>\n\n```\n\n----------------------------------------\n\nTITLE: Defining AuthenticationState Enum\nDESCRIPTION: Shows how to define an enum for representing AuthenticationState.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/ko/bloc-concepts.mdx#2025-04-16_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nenum AuthenticationState { unknown, authenticated, unauthenticated }\n```\n\n----------------------------------------\n\nTITLE: Using BlocProvider Incorrectly (Bad Example)\nDESCRIPTION: Shows an incorrect attempt to access a bloc from the same context in which it was provided, which will fail.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/faqs.mdx#2025-04-16_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nBlocProvider(\n  create: (_) => BlocA(),\n  child: Container(),\n);\n\n// BlocProvider.of() called with a context that is an ancestor of the context\n// used with the BlocProvider is looking for.\nBlocProvider.of<BlocA>(context);\n```\n\n----------------------------------------\n\nTITLE: Creating LoginPage Widget in Flutter\nDESCRIPTION: This snippet defines the LoginPage widget which provides the LoginBloc to the LoginForm and exposes the route for navigation.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-login.mdx#2025-04-16_snippet_19\n\nLANGUAGE: dart\nCODE:\n```\nclass LoginPage extends StatelessWidget {\n  const LoginPage({super.key});\n\n  static Route<void> route() {\n    return MaterialPageRoute<void>(builder: (_) => const LoginPage());\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('Login')),\n      body: Padding(\n        padding: const EdgeInsets.all(12),\n        child: BlocProvider(\n          create: (context) {\n            return LoginBloc(\n              authenticationRepository:\n                  context.read<AuthenticationRepository>(),\n            );\n          },\n          child: const LoginForm(),\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Authentication States\nDESCRIPTION: Implements the AuthenticationState class with three states: unknown, authenticated, and unauthenticated.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-login.mdx#2025-04-16_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\npart of 'authentication_bloc.dart';\n\nfinal class AuthenticationState extends Equatable {\n  const AuthenticationState._(\n    this.status, {\n    this.user = User.empty,\n  });\n\n  const AuthenticationState.unknown() : this._(AuthenticationStatus.unknown);\n\n  const AuthenticationState.authenticated(User user)\n      : this._(AuthenticationStatus.authenticated, user: user);\n\n  const AuthenticationState.unauthenticated()\n      : this._(AuthenticationStatus.unauthenticated);\n\n  final AuthenticationStatus status;\n  final User user;\n\n  @override\n  List<Object> get props => [status, user];\n}\n```\n\n----------------------------------------\n\nTITLE: Output Directory Structure for a Generated Flutter Bloc Feature\nDESCRIPTION: Shows the expected directory structure that will be generated by the Mason template. The output includes bloc files (bloc, event, state) and view files organized in a standardized pattern.\nSOURCE: https://github.com/felangel/bloc/blob/master/bricks/flutter_bloc_feature/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n── counter\n│   ├── bloc\n│   │   ├── counter_bloc.dart\n│   │   ├── counter_event.dart\n│   │   └── counter_state.dart\n│   ├── counter.dart\n│   └── view\n│       ├── counter_page.dart\n│       └── view.dart\n```\n\n----------------------------------------\n\nTITLE: Retrieving Bloc Instance in Flutter\nDESCRIPTION: Demonstrates different methods to retrieve a bloc instance from the context, including one-time lookup and subscription to state changes.\nSOURCE: https://github.com/felangel/bloc/blob/master/packages/flutter_bloc/README.md#2025-04-16_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\n// with extensions\ncontext.read<BlocA>();\n\n// without extensions\nBlocProvider.of<BlocA>(context);\n\n// with extensions\ncontext.watch<BlocA>();\n\n// without extensions\nBlocProvider.of<BlocA>(context, listen: true);\n```\n\n----------------------------------------\n\nTITLE: Implementing BlocObserver.onError in Dart (v6.0.0)\nDESCRIPTION: Demonstrates implementing the onError method in BlocObserver for version 6.0.0, which uses Cubit as the parameter type to support both Bloc and Cubit.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/es/migration.mdx#2025-04-16_snippet_19\n\nLANGUAGE: dart\nCODE:\n```\nclass MyBlocObserver extends BlocObserver {\n  @override\n  void onError(Cubit cubit, Object error, StackTrace stackTrace) {\n    super.onError(cubit, error, stackTrace);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Search Results Component in AngularDart\nDESCRIPTION: This Dart code implements the search results component for the AngularDart GitHub search application, displaying a list of search result items.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/github-search.mdx#2025-04-16_snippet_20\n\nLANGUAGE: dart\nCODE:\n```\n<RemoteCode\n\turl=\"https://raw.githubusercontent.com/felangel/bloc/master/examples/github_search/angular_github_search/lib/src/search_form/search_body/search_results/search_results_component.dart\"\n\ttitle=\"angular_github_search/lib/src/search_form/search_body/search_results/search_results_component.dart\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Updating Models Barrel File for Weather Repository\nDESCRIPTION: This snippet demonstrates how to update the models barrel file in the weather repository package.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-weather.mdx#2025-04-16_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\n// Code not directly available in the provided text\n```\n\n----------------------------------------\n\nTITLE: Using context.watch for Multiple Blocs in Dart\nDESCRIPTION: Shows how to use context.watch to observe multiple blocs within a single Builder, rendering UI based on multiple states.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/es/migration.mdx#2025-04-16_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nBuilder(\n  builder: (context) {\n    final stateA = context.watch<BlocA>().state;\n    final stateB = context.watch<BlocB>().state;\n    final stateC = context.watch<BlocC>().state;\n\n    // return a Widget which depends on the state of BlocA, BlocB, and BlocC\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Creating MockBloc in Dart (v6.0.0)\nDESCRIPTION: Demonstrates creating a MockBloc in version 6.0.0, which only requires specifying the State type, making it compatible with both Bloc and Cubit.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/es/migration.mdx#2025-04-16_snippet_21\n\nLANGUAGE: dart\nCODE:\n```\nclass MockCounterBloc extends MockBloc<int> implements CounterBloc {}\n```\n\n----------------------------------------\n\nTITLE: Generating a Cubit Using Mason CLI\nDESCRIPTION: Command to generate a new Cubit class named 'counter' with the 'basic' style using the Mason CLI tool. This creates the necessary files for implementing a Cubit in a Bloc-based application.\nSOURCE: https://github.com/felangel/bloc/blob/master/bricks/cubit/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmason make cubit --name counter --style basic\n```\n\n----------------------------------------\n\nTITLE: Cubit Generator Output Structure\nDESCRIPTION: Shows the expected file structure generated by the Cubit generator, which includes a cubit class file and a state file. These two files provide the foundation for implementing the Bloc pattern with a Cubit.\nSOURCE: https://github.com/felangel/bloc/blob/master/bricks/cubit/README.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n├── counter_cubit.dart\n└── counter_state.dart\n```\n\n----------------------------------------\n\nTITLE: Implementing OpenMeteo API Client in Dart\nDESCRIPTION: This code snippet shows the implementation of the OpenMeteo API client with methods for location search and weather retrieval.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-weather.mdx#2025-04-16_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\n// Code not directly available in the provided text\n```\n\n----------------------------------------\n\nTITLE: Using Mason to Generate a HydratedBloc in Dart\nDESCRIPTION: Command to generate a new HydratedBloc using Mason. This example creates a counter bloc with basic style. The command accepts parameters for customizing the bloc name and implementation style.\nSOURCE: https://github.com/felangel/bloc/blob/master/bricks/hydrated_bloc/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmason make hydrated_bloc --name counter --style basic\n```\n\n----------------------------------------\n\nTITLE: Nesting Multiple RepositoryProviders in Flutter\nDESCRIPTION: Shows how multiple RepositoryProviders can be nested to provide multiple repositories to a widget subtree.\nSOURCE: https://github.com/felangel/bloc/blob/master/packages/flutter_bloc/README.md#2025-04-16_snippet_23\n\nLANGUAGE: dart\nCODE:\n```\nRepositoryProvider<RepositoryA>(\n  create: (context) => RepositoryA(),\n  child: RepositoryProvider<RepositoryB>(\n    create: (context) => RepositoryB(),\n    child: RepositoryProvider<RepositoryC>(\n      create: (context) => RepositoryC(),\n      child: ChildA(),\n    )\n  )\n)\n```\n\n----------------------------------------\n\nTITLE: Output of Transition Monitoring in Bloc\nDESCRIPTION: This shows the console output when monitoring transitions in a CounterBloc. It displays both the local onTransition output and the global BlocObserver output, followed by the onChange outputs.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/pt-br/bloc-concepts.mdx#2025-04-16_snippet_20\n\nLANGUAGE: text\nCODE:\n```\nTransition { currentState: 0, event: Instance of 'CounterIncrementPressed', nextState: 1 }\nCounterBloc Transition { currentState: 0, event: Instance of 'CounterIncrementPressed', nextState: 1 }\nChange { currentState: 0, nextState: 1 }\nCounterBloc Change { currentState: 0, nextState: 1 }\n```\n\n----------------------------------------\n\nTITLE: Implementing onEvent in CounterBloc\nDESCRIPTION: Shows how to override the onEvent method to capture events added to a Bloc.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/ko/bloc-concepts.mdx#2025-04-16_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\n@override\nvoid onEvent(CounterEvent event) {\n  super.onEvent(event);\n  print(event);\n}\n```\n\n----------------------------------------\n\nTITLE: Output File Structure for Generated Bloc\nDESCRIPTION: The file structure that will be generated by the mason template. It creates three files: a bloc class, an event class, and a state class.\nSOURCE: https://github.com/felangel/bloc/blob/master/bricks/bloc/README.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n├── counter_bloc.dart\n├── counter_event.dart\n└── counter_state.dart\n```\n\n----------------------------------------\n\nTITLE: Creating Search Result Model in Dart\nDESCRIPTION: This code defines a SearchResult model class that represents the results of a GitHub repository search. It includes a list of SearchResultItems and provides methods for JSON serialization/deserialization.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/github-search.mdx#2025-04-16_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:equatable/equatable.dart';\n\nimport 'search_result_item.dart';\n\nclass SearchResult extends Equatable {\n  const SearchResult(this.items);\n\n  final List<SearchResultItem> items;\n\n  static SearchResult fromJson(Map<String, dynamic> json) {\n    final items = (json['items'] as List<dynamic>)\n        .map((dynamic item) =>\n            SearchResultItem.fromJson(item as Map<String, dynamic>))\n        .toList();\n    return SearchResult(items);\n  }\n\n  @override\n  List<Object> get props => [items];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Root App Widget\nDESCRIPTION: Creates the root App widget and sets PostsPage as the home screen.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-infinite-list.mdx#2025-04-16_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n// Content of lib/app.dart\n```\n\n----------------------------------------\n\nTITLE: Importing Bloc Package in Dart\nDESCRIPTION: Example of importing the core Bloc package in a Dart file. This is the basic import needed to start using Bloc in a Dart project.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/getting-started.mdx#2025-04-16_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:bloc/bloc.dart';\n```\n\n----------------------------------------\n\nTITLE: Weather Error Widget in Dart\nDESCRIPTION: Implementation of the WeatherError widget displayed when an error occurs during weather data fetching.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-weather.mdx#2025-04-16_snippet_31\n\nLANGUAGE: dart\nCODE:\n```\n// Code not provided in the original text\n```\n\n----------------------------------------\n\nTITLE: Initializing BlocProvider with Immediate Creation in Flutter\nDESCRIPTION: Creates a BlocProvider widget that immediately creates the bloc, rather than lazily on first access.\nSOURCE: https://github.com/felangel/bloc/blob/master/packages/flutter_bloc/README.md#2025-04-16_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nBlocProvider(\n  lazy: false,\n  create: (BuildContext context) => BlocA(),\n  child: ChildA(),\n);\n```\n\n----------------------------------------\n\nTITLE: Firebase Setup Instructions for Flutter App\nDESCRIPTION: Step-by-step instructions for setting up Firebase authentication in a Flutter application for both iOS and Android platforms. It includes steps for project creation, enabling authentication options, and configuring platform-specific files.\nSOURCE: https://github.com/felangel/bloc/blob/master/examples/flutter_firebase_login/README.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. Create your project\n2. Enable desired authentication options\n```\n\n----------------------------------------\n\nTITLE: Output of SimpleBlocObserver for Change Monitoring\nDESCRIPTION: This shows the console output when using SimpleBlocObserver with a CounterCubit. The output includes both the local onChange output and the global observer output with the bloc type name.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/pt-br/bloc-concepts.mdx#2025-04-16_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nChange { currentState: 0, nextState: 1 }\nCounterCubit Change { currentState: 0, nextState: 1 }\n```\n\n----------------------------------------\n\nTITLE: Output File Structure of Generated ReplayBloc\nDESCRIPTION: Shows the directory structure created when generating a ReplayBloc. The generator produces three files: a main bloc class, an event file, and a state file.\nSOURCE: https://github.com/felangel/bloc/blob/master/bricks/replay_bloc/README.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n├── counter_bloc.dart\n├── counter_event.dart\n└── counter_state.dart\n```\n\n----------------------------------------\n\nTITLE: CounterCubit State Management\nDESCRIPTION: Implements the increment functionality in CounterCubit using the emit method to update state.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/bloc-concepts.mdx#2025-04-16_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nvoid increment() => emit(state + 1);\n```\n\n----------------------------------------\n\nTITLE: Implementing App Widget in Dart\nDESCRIPTION: The root widget of the Flutter timer application, setting up the MaterialApp and TimerPage.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-timer.mdx#2025-04-16_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'package:flutter_timer/timer/timer.dart';\n\nclass App extends StatelessWidget {\n  const App({Key? key}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Flutter Timer',\n      theme: ThemeData(\n        primaryColor: const Color.fromRGBO(109, 234, 255, 1),\n        colorScheme: const ColorScheme.light(\n          secondary: Color.fromRGBO(72, 74, 126, 1),\n        ),\n      ),\n      home: const TimerPage(),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GitHub Search States for Bloc Pattern in Dart\nDESCRIPTION: This code defines different state classes for the GitHub search functionality using the Bloc pattern. It includes states for empty search, loading, success with search results, and error conditions.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/github-search.mdx#2025-04-16_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:equatable/equatable.dart';\n\nimport '../models/models.dart';\n\nabstract class GithubSearchState extends Equatable {\n  const GithubSearchState();\n\n  @override\n  List<Object> get props => [];\n}\n\nclass SearchStateEmpty extends GithubSearchState {}\n\nclass SearchStateLoading extends GithubSearchState {}\n\nclass SearchStateSuccess extends GithubSearchState {\n  const SearchStateSuccess(this.items);\n\n  final List<SearchResultItem> items;\n\n  @override\n  List<Object> get props => [items];\n}\n\nclass SearchStateError extends GithubSearchState {\n  const SearchStateError(this.error);\n\n  final String error;\n\n  @override\n  List<Object> get props => [error];\n}\n```\n\n----------------------------------------\n\nTITLE: Logging Authentication State Change with Cubit in Dart\nDESCRIPTION: Shows how Cubit logs state changes, which provides less context compared to Bloc's transition logging.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/pt-br/bloc-concepts.mdx#2025-04-16_snippet_30\n\nLANGUAGE: dart\nCODE:\n```\n<AuthenticationChangeSnippet />\n```\n\n----------------------------------------\n\nTITLE: Defining Authentication State Enum in Dart\nDESCRIPTION: Defines an enum to represent different authentication states in a Dart application.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/pt-br/bloc-concepts.mdx#2025-04-16_snippet_28\n\nLANGUAGE: dart\nCODE:\n```\n<AuthenticationStateSnippet />\n```\n\n----------------------------------------\n\nTITLE: Implementing Search Form Component in AngularDart\nDESCRIPTION: This Dart code implements the search form component for the AngularDart GitHub search application, including bloc creation and disposal.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/github-search.mdx#2025-04-16_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\n<RemoteCode\n\turl=\"https://raw.githubusercontent.com/felangel/bloc/master/examples/github_search/angular_github_search/lib/src/search_form/search_form_component.dart\"\n\ttitle=\"angular_github_search/lib/src/search_form/search_form_component.dart\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Flutter Bloc Package in Dart\nDESCRIPTION: Example of importing the Flutter Bloc package in a Dart file. This import is used when working with Bloc in Flutter projects to access Flutter-specific widgets and functionality.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/getting-started.mdx#2025-04-16_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter_bloc/flutter_bloc.dart';\n```\n\n----------------------------------------\n\nTITLE: Accessing Bloc State in Build Method (v6.0.x)\nDESCRIPTION: Shows the old way of accessing bloc state in the build method, which is prone to errors as it doesn't rebuild on state changes.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/es/migration.mdx#2025-04-16_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  final state = context.bloc<MyBloc>().state;\n  return Text('$state');\n}\n```\n\n----------------------------------------\n\nTITLE: Bloc Event Handling - Before v7.2.0\nDESCRIPTION: Example showing event handling using mapEventToState in v7.1.0\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/es/migration.mdx#2025-04-16_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nabstract class CounterEvent {}\nclass Increment extends CounterEvent {}\n\nclass CounterBloc extends Bloc<CounterEvent, int> {\n  CounterBloc() : super(0);\n\n  @override\n  Stream<int> mapEventToState(CounterEvent event) async* {\n    if (event is Increment) {\n      yield state + 1;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Location Model in Dart\nDESCRIPTION: This snippet shows the implementation of the Location model class with JSON serialization annotations.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-weather.mdx#2025-04-16_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\n// Code not directly available in the provided text\n```\n\n----------------------------------------\n\nTITLE: Implementing API Client Unit Tests in Dart\nDESCRIPTION: This code snippet shows the implementation of unit tests for the OpenMeteo API client using mocktail for mocking.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-weather.mdx#2025-04-16_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\n// Code not directly available in the provided text\n```\n\n----------------------------------------\n\nTITLE: Output of CounterBloc with onChange\nDESCRIPTION: This shows the console output when using a CounterBloc with onChange implementation. The Change object contains the currentState (0) and nextState (1).\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/pt-br/bloc-concepts.mdx#2025-04-16_snippet_16\n\nLANGUAGE: text\nCODE:\n```\nChange { currentState: 0, nextState: 1 }\n```\n\n----------------------------------------\n\nTITLE: Implementing User Model with Equatable\nDESCRIPTION: The User model class that represents an authenticated user with email, id, name, and photo properties. It extends Equatable for value-based equality comparisons and includes a static empty user instance.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-firebase-login.mdx#2025-04-16_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:equatable/equatable.dart';\n\n/// {@template user}\n/// User model\n///\n/// [User.empty] represents an unauthenticated user.\n/// {@endtemplate}\nclass User extends Equatable {\n  /// {@macro user}\n  const User({\n    required this.id,\n    this.email,\n    this.name,\n    this.photo,\n  });\n\n  /// The current user's email address.\n  final String? email;\n\n  /// The current user's id.\n  final String id;\n\n  /// The current user's name (display name).\n  final String? name;\n\n  /// Url for the current user's photo.\n  final String? photo;\n\n  /// Empty user which represents an unauthenticated user.\n  static const empty = User(id: '');\n\n  /// Convenience getter to determine whether the current user is empty.\n  bool get isEmpty => this == User.empty;\n\n  /// Convenience getter to determine whether the current user is not empty.\n  bool get isNotEmpty => this != User.empty;\n\n  @override\n  List<Object?> get props => [email, id, name, photo];\n}\n\n```\n\n----------------------------------------\n\nTITLE: Updating Barrel File for Weather Repository\nDESCRIPTION: This snippet demonstrates how to update the barrel file to export the WeatherRepository and models.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-weather.mdx#2025-04-16_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\n// Code not directly available in the provided text\n```\n\n----------------------------------------\n\nTITLE: Incorrect Bloc-to-Bloc Communication (Tight Coupling)\nDESCRIPTION: An example of tight coupling between blocs that should be avoided. This creates a direct dependency between two blocs, making the code harder to maintain.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/architecture.mdx#2025-04-16_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass SecondBloc extends Bloc<SecondEvent, SecondState> {\n  final FirstBloc firstBloc;\n  late final StreamSubscription firstBlocSubscription;\n\n  SecondBloc(this.firstBloc) : super(SecondState.initial()) {\n    firstBlocSubscription = firstBloc.stream.listen((state) {\n      // Do something with state of FirstBloc\n      add(SecondEvent());\n    });\n  }\n\n  @override\n  Future<void> close() {\n    firstBlocSubscription.cancel();\n    return super.close();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Bloc Library in Dart Project\nDESCRIPTION: This command adds the bloc library to a Dart project using the dart pub package manager.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/index.mdx#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# Add bloc to your project.\ndart pub add bloc\n```\n\n----------------------------------------\n\nTITLE: Using blocTest in Dart (v6.0.0)\nDESCRIPTION: Demonstrates using blocTest in version 6.0.0, which only requires specifying the Bloc type, making it compatible with both Bloc and Cubit.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/es/migration.mdx#2025-04-16_snippet_25\n\nLANGUAGE: dart\nCODE:\n```\nblocTest<CounterBloc, int>(\n  'emits [1] when increment is called',\n  build: () => CounterBloc(),\n  act: (bloc) => bloc.add(CounterEvent.increment),\n  expect: const <int>[1],\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Weather Repository Model in Dart\nDESCRIPTION: This snippet shows the implementation of the Weather model specific to the repository layer with JSON serialization annotations.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-weather.mdx#2025-04-16_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\n// Code not directly available in the provided text\n```\n\n----------------------------------------\n\nTITLE: CounterPageComponent Implementation in Dart\nDESCRIPTION: Angular component that provides the UI for the counter. It injects the CounterBloc and handles user interactions by adding events to the bloc.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/ngdart-counter.mdx#2025-04-16_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:angular/angular.dart';\nimport 'package:angular_bloc/angular_bloc.dart';\n\nimport 'counter_bloc.dart';\n\n@Component(\n  selector: 'counter-page',\n  templateUrl: 'counter_page_component.html',\n  pipes: [BlocPipe],\n)\nclass CounterPageComponent implements OnDestroy {\n  final CounterBloc counterBloc;\n\n  CounterPageComponent(this.counterBloc);\n\n  @override\n  void ngOnDestroy() {\n    counterBloc.close();\n  }\n\n  void increment() {\n    counterBloc.add(CounterEvent.increment);\n  }\n\n  void decrement() {\n    counterBloc.add(CounterEvent.decrement);\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Output of Cubit Error Handling\nDESCRIPTION: This shows the console output when an error occurs in a CounterCubit. It includes the local onError handling output followed by the global BlocObserver error handling output.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/pt-br/bloc-concepts.mdx#2025-04-16_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nException: increment error!, #0      CounterCubit.increment (file:///main.dart:21:5)\nCounterCubit Exception: increment error! #0      CounterCubit.increment (file:///main.dart:21:5)\nChange { currentState: 0, nextState: 1 }\nCounterCubit Change { currentState: 0, nextState: 1 }\n```\n\n----------------------------------------\n\nTITLE: Implementing Location Unit Tests in Dart\nDESCRIPTION: This code snippet shows the implementation of unit tests for the Location model.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-weather.mdx#2025-04-16_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\n// Code not directly available in the provided text\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication Repository Package Dependencies\nDESCRIPTION: The pubspec.yaml file for the authentication repository package that defines its dependencies including firebase_auth, google_sign_in, and equatable for value equality comparisons.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-firebase-login.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: authentication_repository\ndescription: Dart package which manages the authentication domain.\nversion: 1.0.0\npublish_to: none\n\nenvironment:\n  sdk: \">=3.0.0 <4.0.0\"\n\ndependencies:\n  cache:\n    path: ../cache\n  equatable: ^2.0.5\n  firebase_auth: ^4.4.0\n  firebase_core: ^2.9.0\n  flutter:\n    sdk: flutter\n  google_sign_in: ^6.0.2\n  meta: ^1.8.0\n\n```\n\n----------------------------------------\n\nTITLE: Using Mason to Generate a Flutter Bloc Feature\nDESCRIPTION: Command to generate a new Flutter feature with bloc using the Mason CLI. The example creates a counter feature with the basic bloc style.\nSOURCE: https://github.com/felangel/bloc/blob/master/bricks/flutter_bloc_feature/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmason make flutter_bloc_feature --name counter --type bloc --style basic\n```\n\n----------------------------------------\n\nTITLE: Importing Angular Bloc Package in Dart\nDESCRIPTION: Example of importing the Angular Bloc package in a Dart file. This import is used when integrating Bloc with AngularDart applications.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/getting-started.mdx#2025-04-16_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:angular_bloc/angular_bloc.dart';\n```\n\n----------------------------------------\n\nTITLE: Implementing Equatable in Bloc State Classes (Bad Example)\nDESCRIPTION: Shows an incorrect implementation of Equatable in a bloc state class where properties are missing from the props getter, causing state comparison issues.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/faqs.mdx#2025-04-16_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass MyState extends Equatable {\n  final int value;\n\n  const MyState({this.value = 0});\n\n  /// value is missing from props\n  @override\n  List<Object> get props => [];\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Barrel File for OpenMeteo API\nDESCRIPTION: This snippet demonstrates how to update the barrel file to export the API client and models.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-weather.mdx#2025-04-16_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\n// Code not directly available in the provided text\n```\n\n----------------------------------------\n\nTITLE: Defining Internal Events for Bloc\nDESCRIPTION: Shows the recommended practice of defining private internal events for use within a bloc.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/faqs.mdx#2025-04-16_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\n// Private event\nclass _UserChanged extends MyEvent {\n  const _UserChanged(this.user);\n\n  final User user;\n\n  @override\n  List<Object> get props => [user];\n}\n\n// Public events\nabstract class MyEvent extends Equatable {\n  const MyEvent();\n\n  @override\n  List<Object> get props => [];\n}\n```\n\n----------------------------------------\n\nTITLE: Skip States Bloc Testing in Dart\nDESCRIPTION: Demonstrates how to skip initial states during bloc testing using the skip parameter.\nSOURCE: https://github.com/felangel/bloc/blob/master/packages/bloc_test/README.md#2025-04-16_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nblocTest(\n  'emits [2] when CounterIncrementPressed is added twice',\n  build: () => CounterBloc(),\n  act: (bloc) => bloc..add(CounterIncrementPressed())..add(CounterIncrementPressed()),\n  skip: 1,\n  expect: () => [2],\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Repository Class\nDESCRIPTION: Defines the AuthenticationRepository class responsible for managing authentication state and operations.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-login.mdx#2025-04-16_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:async';\n\nenum AuthenticationStatus { unknown, authenticated, unauthenticated }\n\nclass AuthenticationRepository {\n  final _controller = StreamController<AuthenticationStatus>();\n\n  Stream<AuthenticationStatus> get status async* {\n    await Future<void>.delayed(const Duration(seconds: 1));\n    yield AuthenticationStatus.unauthenticated;\n    yield* _controller.stream;\n  }\n\n  Future<void> logIn({\n    required String username,\n    required String password,\n  }) async {\n    await Future.delayed(\n      const Duration(milliseconds: 300),\n      () => _controller.add(AuthenticationStatus.authenticated),\n    );\n  }\n\n  void logOut() {\n    _controller.add(AuthenticationStatus.unauthenticated);\n  }\n\n  void dispose() => _controller.close();\n}\n```\n\n----------------------------------------\n\nTITLE: Using BlocProvider Correctly (Good Example 2)\nDESCRIPTION: Shows how to correctly access a bloc provided by BlocProvider using a child widget structure.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/faqs.mdx#2025-04-16_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nBlocProvider(\n  create: (_) => BlocA(),\n  child: ChildA(),\n);\n\nclass ChildA extends StatelessWidget {\n  const ChildA({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    // call BlocProvider.of() in a descendant context\n    final blocA = BlocProvider.of<BlocA>(context);\n    return Container();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Main Flutter App Dependencies\nDESCRIPTION: The pubspec.yaml file for the main Flutter application that defines its dependencies including the authentication repository, bloc-related packages, and form validation libraries.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-firebase-login.mdx#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nname: flutter_firebase_login\ndescription: A new Flutter project.\nversion: 1.0.0+1\npublish_to: none\n\nenvironment:\n  sdk: \">=3.0.0 <4.0.0\"\n\ndependencies:\n  authentication_repository:\n    path: packages/authentication_repository\n  bloc: ^8.1.1\n  equatable: ^2.0.5\n  flow_builder: ^0.0.9\n  flutter:\n    sdk: flutter\n  flutter_bloc: ^8.1.2\n  font_awesome_flutter: ^10.4.0\n  form_inputs:\n    path: packages/form_inputs\n  formz: ^0.4.0\n  meta: ^1.8.0\n\ndev_dependencies:\n  bloc_test: ^9.1.1\n  flutter_test:\n    sdk: flutter\n  mocktail: ^0.3.0\nflutter:\n  uses-material-design: true\n  assets:\n    - assets/\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AngularDart GitHub Search\nDESCRIPTION: This YAML snippet shows the dependencies required for the AngularDart GitHub search project.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/github-search.mdx#2025-04-16_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n<RemoteCode\n\turl=\"https://raw.githubusercontent.com/felangel/bloc/master/examples/github_search/angular_github_search/pubspec.yaml\"\n\ttitle=\"angular_github_search/pubspec.yaml\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating the App Component for AngularDart\nDESCRIPTION: Main app component that defines the structure of the Angular application. It provides the CounterBloc to its children through dependency injection.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/ngdart-counter.mdx#2025-04-16_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:angular/angular.dart';\nimport 'package:angular_bloc/angular_bloc.dart';\n\nimport 'src/counter_page/counter_bloc.dart';\nimport 'src/counter_page/counter_page_component.dart';\n\n@Component(\n  selector: 'my-app',\n  templateUrl: 'app_component.html',\n  directives: [CounterPageComponent],\n  providers: [ClassProvider(CounterBloc)],\n  pipes: [BlocPipe],\n)\nclass AppComponent {}\n\n```\n\n----------------------------------------\n\nTITLE: Using blocTest in Dart (v5.x.x)\nDESCRIPTION: Shows how to use blocTest in version 5.x.x, which requires specifying both Bloc and Event types.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/es/migration.mdx#2025-04-16_snippet_24\n\nLANGUAGE: dart\nCODE:\n```\nblocTest<CounterBloc, CounterEvent, int>(\n  'emits [1] when increment is called',\n  build: () async => CounterBloc(),\n  act: (bloc) => bloc.add(CounterEvent.increment),\n  expect: const <int>[1],\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Password Model for Form Validation\nDESCRIPTION: This snippet creates a Password model using the Formz package for form input validation. It checks if the password is not empty.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-login.mdx#2025-04-16_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:formz/formz.dart';\n\nenum PasswordValidationError { empty }\n\nclass Password extends FormzInput<String, PasswordValidationError> {\n  const Password.pure() : super.pure('');\n  const Password.dirty([super.value = '']) : super.dirty();\n\n  @override\n  PasswordValidationError? validator(String value) {\n    if (value.isEmpty) return PasswordValidationError.empty;\n    return null;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating MockBloc in Dart (v5.x.x)\nDESCRIPTION: Shows how to create a MockBloc in version 5.x.x, which requires specifying both Event and State types.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/es/migration.mdx#2025-04-16_snippet_20\n\nLANGUAGE: dart\nCODE:\n```\nclass MockCounterBloc extends MockBloc<CounterEvent, int> implements CounterBloc {}\n```\n\n----------------------------------------\n\nTITLE: AuthenticationBloc Transition Example\nDESCRIPTION: Demonstrates a Transition in an AuthenticationBloc, showing the current state, event, and next state.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/ko/bloc-concepts.mdx#2025-04-16_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nTransition {\n  currentState: AuthenticationState.authenticated,\n  event: LogoutRequested(),\n  nextState: AuthenticationState.unauthenticated\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Existing State in Bloc (Bad Example)\nDESCRIPTION: Shows an incorrect approach where the existing state is modified directly instead of creating a new state instance.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/faqs.mdx#2025-04-16_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\n@override\nvoid someMethod() {\n  // This will not cause the UI to update\n  // because we are modifying the existing state instance\n  state.value = state.value + 1;\n  emit(state);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Test Imports for CounterBloc Tests\nDESCRIPTION: Import statements required for testing the CounterBloc. This includes the test package, the bloc_test package for bloc-specific testing utilities, and the CounterBloc class being tested.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/testing.mdx#2025-04-16_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:test/test.dart';\nimport 'package:bloc_test/bloc_test.dart';\nimport 'package:counter/counter_bloc.dart';\n```\n\n----------------------------------------\n\nTITLE: Updating mapEventToState signature in Dart\nDESCRIPTION: Changes the signature of the mapEventToState method to remove the unnecessary currentState argument. This update simplifies the method call and potentially improves performance.\nSOURCE: https://github.com/felangel/bloc/blob/master/packages/bloc/CHANGELOG.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n- `Stream<S> mapEventToState(S currentState, E event)` -> `Stream<S> mapEventToState(E event)`\n```\n\n----------------------------------------\n\nTITLE: Implementing CounterCubit in Dart\nDESCRIPTION: Defines a CounterCubit class that extends Cubit<int> and provides methods for incrementing and decrementing the state.\nSOURCE: https://github.com/felangel/bloc/blob/master/packages/flutter_bloc/README.md#2025-04-16_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass CounterCubit extends Cubit<int> {\n  CounterCubit() : super(0);\n\n  void increment() => emit(state + 1);\n  void decrement() => emit(state - 1);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Bloc CLI Tools via Dart Pub\nDESCRIPTION: Command to globally activate the bloc_tools package using dart pub. This makes the bloc CLI commands available system-wide.\nSOURCE: https://github.com/felangel/bloc/blob/master/packages/bloc_tools/example/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndart pub global activate bloc_tools\n```\n\n----------------------------------------\n\nTITLE: Initializing HydratedStorage in Dart (v7.0.0)\nDESCRIPTION: Demonstrates initializing HydratedStorage in version 7.0.0, which requires specifying a storage directory using path_provider.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/es/migration.mdx#2025-04-16_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:path_provider/path_provider.dart';\n\n...\n\nHydratedBloc.storage = await HydratedStorage.build(\n  storageDirectory: await getTemporaryDirectory(),\n);\n```\n\n----------------------------------------\n\nTITLE: Weather Feature Barrel File in Dart\nDESCRIPTION: Top-level barrel file for the weather feature, exporting all necessary components.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-weather.mdx#2025-04-16_snippet_23\n\nLANGUAGE: dart\nCODE:\n```\n// Code not provided in the original text\n```\n\n----------------------------------------\n\nTITLE: AuthenticationCubit Change Example\nDESCRIPTION: Shows how a Change would look in an AuthenticationCubit, lacking the event information.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/ko/bloc-concepts.mdx#2025-04-16_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\nChange {\n  currentState: AuthenticationState.authenticated,\n  nextState: AuthenticationState.unauthenticated\n}\n```\n\n----------------------------------------\n\nTITLE: Counter Page Template with Bloc\nDESCRIPTION: HTML template that displays the counter value and provides increment/decrement buttons using Bloc state management.\nSOURCE: https://github.com/felangel/bloc/blob/master/packages/angular_bloc/README.md#2025-04-16_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<div>\n  <h1>Counter App</h1>\n  <h2>Current Count: {{ $pipe.bloc(counterBloc) }}</h2>\n  <button (click)=\"increment()\">+</button>\n  <button (click)=\"decrement()\">-</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Main Function in Dart\nDESCRIPTION: The main entry point of the Flutter timer application, setting up the BlocObserver and running the app.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-timer.mdx#2025-04-16_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/widgets.dart';\nimport 'package:bloc/bloc.dart';\nimport 'package:flutter_timer/app.dart';\nimport 'package:flutter_timer/timer/timer.dart';\n\nclass TimerObserver extends BlocObserver {\n  @override\n  void onChange(BlocBase bloc, Change change) {\n    super.onChange(bloc, change);\n    print('${bloc.runtimeType} $change');\n  }\n}\n\nvoid main() {\n  Bloc.observer = TimerObserver();\n  runApp(const App());\n}\n```\n\n----------------------------------------\n\nTITLE: English Localization ARB Example\nDESCRIPTION: Example of English localization ARB file structure with string definitions and descriptions.\nSOURCE: https://github.com/felangel/bloc/blob/master/examples/flutter_todos/README.md#2025-04-16_snippet_3\n\nLANGUAGE: arb\nCODE:\n```\n{\n    \"@@locale\": \"en\",\n    \"counterAppBarTitle\": \"Counter\",\n    \"@counterAppBarTitle\": {\n        \"description\": \"Text shown in the AppBar of the Counter Page\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using blocTest with skip in Dart (v6.0.0)\nDESCRIPTION: Demonstrates using blocTest with skip parameter in version 6.0.0, where skip defaults to 0 and initial state is not emitted by default.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/es/migration.mdx#2025-04-16_snippet_27\n\nLANGUAGE: dart\nCODE:\n```\nblocTest<CounterBloc, int>(\n  'emits [] when skip is 0',\n  build: () => CounterBloc(),\n  skip: 0,\n  expect: const <int>[],\n);\n```\n\n----------------------------------------\n\nTITLE: Generating a ReplayCubit with Mason CLI\nDESCRIPTION: Command to generate a new ReplayCubit named 'counter' using the 'basic' style with the Mason CLI tool. This creates both the cubit class and state file.\nSOURCE: https://github.com/felangel/bloc/blob/master/bricks/replay_cubit/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmason make replay_cubit --name counter --style basic\n```\n\n----------------------------------------\n\nTITLE: Initializing HydratedStorage in Dart (v6.x.x)\nDESCRIPTION: Shows how to initialize HydratedStorage in version 6.x.x of the package. This version doesn't require specifying a storage directory.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/es/migration.mdx#2025-04-16_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nHydratedBloc.storage = await HydratedStorage.build();\n```\n\n----------------------------------------\n\nTITLE: Stream Usage of CounterBloc\nDESCRIPTION: Shows how to use a CounterBloc as a Stream, subscribing to state changes and adding events.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/ko/bloc-concepts.mdx#2025-04-16_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> main() async {\n  final bloc = CounterBloc();\n  final subscription = bloc.stream.listen(print); // 1\n  bloc.add(CounterIncrementPressed());\n  await Future.delayed(Duration.zero);\n  await subscription.cancel();\n  await bloc.close();\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Testing Dependencies to pubspec.yaml\nDESCRIPTION: Instructions for adding the test and bloc_test packages as development dependencies to a Dart project. These packages provide the necessary tools for testing Bloc implementations.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/testing.mdx#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndev_dependencies:\n  test: ^1.16.0\n  bloc_test: ^9.0.0\n```\n\n----------------------------------------\n\nTITLE: Defining Authentication Repository Package Dependencies\nDESCRIPTION: Specifies the pubspec.yaml file for the authentication_repository package, defining its dependencies and metadata.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-login.mdx#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: authentication_repository\ndescription: Dart package which manages the authentication domain.\nversion: 1.0.0\npublish_to: none\n\nenvironment:\n  sdk: \">=3.0.0 <4.0.0\"\n\ndependencies:\n  equatable: ^2.0.5\n  uuid: ^3.0.7\n```\n\n----------------------------------------\n\nTITLE: Using Localized Strings in Flutter\nDESCRIPTION: Example of how to use localized strings in Flutter widgets.\nSOURCE: https://github.com/felangel/bloc/blob/master/examples/flutter_todos/README.md#2025-04-16_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter_todos/l10n/l10n.dart';\n\n@override\nWidget build(BuildContext context) {\n  final l10n = context.l10n;\n  return Text(l10n.helloWorld);\n}\n```\n\n----------------------------------------\n\nTITLE: HydratedBloc Setup - After v8.0.0\nDESCRIPTION: Example showing zone-based storage configuration in hydrated_bloc v8.0.0\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/es/migration.mdx#2025-04-16_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  final storage = await HydratedStorage.build(\n    storageDirectory: await getApplicationSupportDirectory(),\n  );\n\n  HydratedBlocOverrides.runZoned(\n    () {\n      // ...\n    },\n    storage: storage,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting User Models\nDESCRIPTION: Creates a barrel file to export all user-related models for easier importing.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-login.mdx#2025-04-16_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nexport 'user.dart';\n```\n\n----------------------------------------\n\nTITLE: Global Event Transformer Configuration\nDESCRIPTION: Example showing how to configure default event transformer globally\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/es/migration.mdx#2025-04-16_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:bloc/bloc.dart';\nimport 'package:bloc_concurrency/bloc_concurrency.dart';\n\nvoid main() {\n  Bloc.transformer = sequential<dynamic>();\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing User Repository\nDESCRIPTION: Defines the UserRepository class with a getUser method to retrieve the current user.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-login.mdx#2025-04-16_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:async';\nimport 'package:uuid/uuid.dart';\nimport 'package:user_repository/src/models/models.dart';\n\nclass UserRepository {\n  User? _user;\n\n  Future<User?> getUser() async {\n    if (_user != null) return _user;\n    return Future.delayed(\n      const Duration(milliseconds: 300),\n      () => _user = User(const Uuid().v4()),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Authentication Repository Package Structure\nDESCRIPTION: Sets up the directory structure for the authentication_repository package within the Flutter project.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-login.mdx#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n├── android\n├── ios\n├── lib\n├── packages\n│   └── authentication_repository\n└── test\n```\n\n----------------------------------------\n\nTITLE: Sequential Event Transformer Example\nDESCRIPTION: Example showing how to use sequential event transformer with on<Event>\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/es/migration.mdx#2025-04-16_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:bloc/bloc.dart';\nimport 'package:bloc_concurrency/bloc_concurrency.dart';\n\nclass MyBloc extends Bloc<MyEvent, MyState> {\n  MyBloc() : super(MyState()) {\n    on<MyEvent>(_onEvent, transformer: sequential())\n  }\n\n  FutureOr<void> _onEvent(MyEvent event, Emitter<MyState> emit) async {\n    // TODO: logic goes here...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for angular_github_search in Bash\nDESCRIPTION: This code block shows the steps to change into the angular_github_search directory, install dependencies using dart pub get, and return to the root directory.\nSOURCE: https://github.com/felangel/bloc/blob/master/examples/github_search/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# change directories into flutter_github_search\ncd angular_github_search\n\n# install dependencies\ndart pub get\n\n# change directories into flutter_github_search\ncd ../\n```\n\n----------------------------------------\n\nTITLE: MockBloc Setup - After v9.0.0\nDESCRIPTION: Simplified MockBloc setup without fallback values in bloc_test v9.0.0\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/es/migration.mdx#2025-04-16_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass MyMockBloc extends MockBloc<MyEvent, MyState> implements MyBloc {}\n\nvoid main() {\n  // Tests...\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting User Repository\nDESCRIPTION: Defines the public exports for the user_repository package.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-login.mdx#2025-04-16_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nexport 'src/models/models.dart';\nexport 'src/user_repository.dart';\n```\n\n----------------------------------------\n\nTITLE: Incorrect State Naming Conventions in Dart\nDESCRIPTION: Examples of improper state naming that don't adhere to the recommended conventions, using inconsistent or ambiguous naming patterns.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/naming-conventions.mdx#2025-04-16_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nabstract class CounterStates {}\n\nclass CounterInit extends CounterStates {}\n\nclass CounterIsLoading extends CounterStates {}\n\nclass CounterLoaded extends CounterStates {\n  const CounterLoaded(this.count);\n  final int count;\n}\n\nclass CounterError extends CounterStates {\n  const CounterError(this.error);\n  final Object error;\n}\n```\n\n----------------------------------------\n\nTITLE: Search Form Component Template in AngularDart\nDESCRIPTION: This HTML template defines the structure of the search form component in the AngularDart GitHub search application.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/github-search.mdx#2025-04-16_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<RemoteCode\n\turl=\"https://raw.githubusercontent.com/felangel/bloc/master/examples/github_search/angular_github_search/lib/src/search_form/search_form_component.html\"\n\ttitle=\"angular_github_search/lib/src/search_form/search_form_component.html\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Using blocTest with skip in Dart (v5.x.x)\nDESCRIPTION: Shows how to use blocTest with skip parameter in version 5.x.x, where skip defaults to 1.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/es/migration.mdx#2025-04-16_snippet_26\n\nLANGUAGE: dart\nCODE:\n```\nblocTest<CounterBloc, CounterEvent, int>(\n  'emits [0] when skip is 0',\n  build: () async => CounterBloc(),\n  skip: 0,\n  expect: const <int>[0],\n);\n```\n\n----------------------------------------\n\nTITLE: Running Flutter Tests\nDESCRIPTION: Commands for running unit and widget tests with coverage reporting.\nSOURCE: https://github.com/felangel/bloc/blob/master/examples/flutter_todos/README.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ flutter test --coverage --test-randomize-ordering-seed random\n```\n\n----------------------------------------\n\nTITLE: BlocObserver Usage Example - Before v8.0.0\nDESCRIPTION: Example showing how BlocObserver could be instantiated directly in v7.x.x\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/es/migration.mdx#2025-04-16_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  // Era posible crear una instancia de la clase base.\n  final observer = BlocObserver();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring build.yaml for JSON Serialization\nDESCRIPTION: This YAML configuration file handles naming convention discrepancies for JSON serialization in the open_meteo_api package.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-weather.mdx#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n// Code not directly available in the provided text\n```\n\n----------------------------------------\n\nTITLE: Using Empty props in Equatable Bloc State (Bad Example)\nDESCRIPTION: Demonstrates an incorrect implementation where the props getter returns an empty list, causing state equality checks to fail.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/faqs.mdx#2025-04-16_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass MyState extends Equatable {\n  final int value;\n  final String title;\n  final List<String> items;\n\n  const MyState({\n    this.value = 0,\n    this.title = '',\n    this.items = const [],\n  });\n\n  /// value, title, and items are missing from props\n  @override\n  List<Object> get props => [];\n}\n```\n\n----------------------------------------\n\nTITLE: Bloc Event Handling - After v7.2.0\nDESCRIPTION: Example showing event handling using on<Event> in v7.2.0\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/es/migration.mdx#2025-04-16_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nabstract class CounterEvent {}\nclass Increment extends CounterEvent {}\n\nclass CounterBloc extends Bloc<CounterEvent, int> {\n  CounterBloc() : super(0) {\n    on<Increment>((event, emit) => emit(state + 1));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of context.watch in Parent Widget in Flutter Bloc\nDESCRIPTION: Shows an anti-pattern where context.watch is used at the root of a build method. This causes the entire widget to rebuild when state changes, even if only a small part depends on the state.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/zh-cn/flutter-bloc-concepts.mdx#2025-04-16_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  // 无论状态如何变化，都会重新构建 MaterialApp，\n  // 即使它只用于 Text Widget 中。\n  final state = context.watch<MyBloc>().state;\n  return MaterialApp(\n    home: Scaffold(\n      body: Text(state.value),\n    ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Running Flutter Project in Bash\nDESCRIPTION: This snippet provides the commands to change into the flutter_github_search directory and run the Flutter project using flutter run.\nSOURCE: https://github.com/felangel/bloc/blob/master/examples/github_search/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# change directories into flutter_github_search\ncd flutter_github_search\n\n# run the flutter project\nflutter run\n```\n\n----------------------------------------\n\nTITLE: Search Results Component Template in AngularDart\nDESCRIPTION: This HTML template defines the structure of the search results component in the AngularDart GitHub search application, using ngFor to render a list of search result items.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/github-search.mdx#2025-04-16_snippet_21\n\nLANGUAGE: html\nCODE:\n```\n<RemoteCode\n\turl=\"https://raw.githubusercontent.com/felangel/bloc/master/examples/github_search/angular_github_search/lib/src/search_form/search_body/search_results/search_results_component.html\"\n\ttitle=\"angular_github_search/lib/src/search_form/search_body/search_results/search_results_component.html\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing Mason Bricks using CLI\nDESCRIPTION: This command demonstrates how to install a Mason brick using the mason_cli. Replace <BRICK> with the specific brick name you want to install.\nSOURCE: https://github.com/felangel/bloc/blob/master/bricks/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmason add <BRICK>\n```\n\n----------------------------------------\n\nTITLE: Location JSON API Response Example\nDESCRIPTION: Example JSON response from the OpenMeteo geocoding API endpoint, showing the structure of location data including latitude, longitude, and other geographic information.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-weather.mdx#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"results\": [\n    {\n      \"id\": 4887398,\n      \"name\": \"Chicago\",\n      \"latitude\": 41.85003,\n      \"longitude\": -87.65005,\n      \"elevation\": 179.0,\n      \"feature_code\": \"PPLA2\",\n      \"country_code\": \"US\",\n      \"admin1_id\": 4896861,\n      \"admin2_id\": 4888671,\n      \"admin3_id\": 4887486,\n      \"admin4_id\": 4887398,\n      \"timezone\": \"America/Chicago\",\n      \"population\": 2746388,\n      \"postcodes\": [\"60601\", \"60602\", \"60603\", \"60604\", \"60605\", \"60606\", \"60607\", \"...and more\"],\n      \"country_id\": 6252001,\n      \"country\": \"United States\",\n      \"admin1\": \"Illinois\",\n      \"admin2\": \"Cook\",\n      \"admin3\": \"Chicago\",\n      \"admin4\": \"Chicago\"\n    }\n  ],\n  \"generationtime_ms\": 1.9130707\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing BlocObserver.onError in Dart (v5.x.x)\nDESCRIPTION: Shows how to implement the onError method in BlocObserver for version 5.x.x, which uses Bloc as the parameter type.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/es/migration.mdx#2025-04-16_snippet_18\n\nLANGUAGE: dart\nCODE:\n```\nclass MyBlocObserver extends BlocObserver {\n  @override\n  void onError(Bloc bloc, Object error, StackTrace stackTrace) {\n    super.onError(bloc, error, stackTrace);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Mason to Generate a ReplayBloc in Dart\nDESCRIPTION: Command to generate a new ReplayBloc using the Mason CLI. This command creates a basic counter bloc with the specified name.\nSOURCE: https://github.com/felangel/bloc/blob/master/bricks/replay_bloc/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmason make replay_bloc --name counter --style basic\n```\n\n----------------------------------------\n\nTITLE: Build Configuration for Code Generation in YAML\nDESCRIPTION: build.yaml file configuration for generating (de)serialization implementations in the business logic layer.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-weather.mdx#2025-04-16_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\n// Code not provided in the original text\n```\n\n----------------------------------------\n\nTITLE: Incorrect Event Naming Conventions in Dart\nDESCRIPTION: Examples of improper event naming that don't follow the recommended conventions, using present tense or imperative forms instead of past tense.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/naming-conventions.mdx#2025-04-16_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nabstract class CounterEvent {}\n\nclass StartCounter extends CounterEvent {}\n\nclass IncrementCounter extends CounterEvent {}\n\nclass DecrementCounter extends CounterEvent {}\n\nclass RetryCounterIncrement extends CounterEvent {}\n```\n\n----------------------------------------\n\nTITLE: HydratedBloc Setup - Before v8.0.0\nDESCRIPTION: Example showing global storage configuration in hydrated_bloc v7.x.x\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/es/migration.mdx#2025-04-16_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() async {\n  HydratedBloc.storage = await HydratedStorage.build(\n    storageDirectory: await getApplicationSupportDirectory(),\n  );\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Search Bar Component Template in AngularDart\nDESCRIPTION: This HTML template defines the structure of the search bar component in the AngularDart GitHub search application.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/github-search.mdx#2025-04-16_snippet_17\n\nLANGUAGE: html\nCODE:\n```\n<RemoteCode\n\turl=\"https://raw.githubusercontent.com/felangel/bloc/master/examples/github_search/angular_github_search/lib/src/search_form/search_bar/search_bar_component.html\"\n\ttitle=\"angular_github_search/lib/src/search_form/search_bar/search_bar_component.html\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of context.select in Parent Widget in Flutter Bloc\nDESCRIPTION: Shows an anti-pattern where context.select is used at the root of a build method. This causes the entire widget to rebuild when the selected property changes, even if only a small part depends on it.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/zh-cn/flutter-bloc-concepts.mdx#2025-04-16_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  // 当 state.value 变化时，即使它只在 Text widget 中使用，也会重新构建 MaterialApp。\n  final name = context.select((ProfileBloc bloc) => bloc.state.name);\n  return MaterialApp(\n    home: Scaffold(\n      body: Text(name),\n    ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using whenListen in Dart Tests (v5.x.x)\nDESCRIPTION: Shows how to use whenListen in bloc tests for version 5.x.x, which requires specifying both Event and State types.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/es/migration.mdx#2025-04-16_snippet_22\n\nLANGUAGE: dart\nCODE:\n```\nwhenListen<CounterEvent,int>(bloc, Stream.fromIterable([0, 1, 2, 3]));\n```\n\n----------------------------------------\n\nTITLE: Displaying Bloc CLI Help Information\nDESCRIPTION: Command to display the help menu showing all available bloc CLI commands and their usage.\nSOURCE: https://github.com/felangel/bloc/blob/master/packages/bloc_tools/example/README.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nbloc --help\n```\n\n----------------------------------------\n\nTITLE: Exporting Authentication Repository\nDESCRIPTION: Defines the public exports for the authentication_repository package.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-login.mdx#2025-04-16_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nexport 'src/authentication_repository.dart';\n```\n\n----------------------------------------\n\nTITLE: Incorrect Context Reading Pattern\nDESCRIPTION: Example showing incorrect usage of context.read within a build method, which won't react to state changes.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/flutter-bloc-concepts.mdx#2025-04-16_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  final state = context.read<MyBloc>().state;\n  return Text('$state');\n}\n```\n\n----------------------------------------\n\nTITLE: Creating BottomLoader Widget\nDESCRIPTION: Defines a simple BottomLoader widget to indicate that more posts are being loaded.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-infinite-list.mdx#2025-04-16_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\n// Content of lib/posts/widgets/bottom_loader.dart\n```\n\n----------------------------------------\n\nTITLE: Weather Widgets Barrel File in Dart\nDESCRIPTION: Barrel file exporting all weather-related widgets for easier imports.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-weather.mdx#2025-04-16_snippet_34\n\nLANGUAGE: dart\nCODE:\n```\n// Code not provided in the original text\n```\n\n----------------------------------------\n\nTITLE: Using Bloc CLI Tools in Shell\nDESCRIPTION: This snippet demonstrates the usage of the bloc command-line interface. It shows the available commands and options for generating new bloc components.\nSOURCE: https://github.com/felangel/bloc/blob/master/packages/bloc_tools/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nCommand Line Tools for the Bloc Library.\n\nUsage: bloc <command> [arguments]\n\nGlobal options:\n-h, --help       Print this usage information.\n    --version    Print the current version.\n\nAvailable commands:\n  new   bloc new <subcommand> [arguments]\n        Generate new bloc components.\n\nRun \"bloc help <command>\" for more information about a command.\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for Flutter GitHub Search\nDESCRIPTION: This YAML snippet shows the dependencies required for the Flutter GitHub search project, including the common_github_search library.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/github-search.mdx#2025-04-16_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n<RemoteCode\n\turl=\"https://raw.githubusercontent.com/felangel/bloc/master/examples/github_search/flutter_github_search/pubspec.yaml\"\n\ttitle=\"flutter_github_search/pubspec.yaml\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing Dart Dependencies\nDESCRIPTION: Command to install all the required dependencies specified in the pubspec.yaml file for the project.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/ngdart-counter.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npub get\n```\n\n----------------------------------------\n\nTITLE: Running the Flutter Firebase Login Project\nDESCRIPTION: Simple instruction for running the Flutter Firebase Login application once all the setup steps are completed.\nSOURCE: https://github.com/felangel/bloc/blob/master/examples/flutter_firebase_login/README.md#2025-04-16_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n1. `flutter run`\n```\n\n----------------------------------------\n\nTITLE: Defining Main App Dependencies\nDESCRIPTION: Specifies the pubspec.yaml file for the main Flutter app, including dependencies on the custom packages and bloc library.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-login.mdx#2025-04-16_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nname: flutter_login\ndescription: A new Flutter project.\nversion: 1.0.0+1\npublish_to: none\n\nenvironment:\n  sdk: \">=3.0.0 <4.0.0\"\n\ndependencies:\n  authentication_repository:\n    path: packages/authentication_repository\n  user_repository:\n    path: packages/user_repository\n  bloc: ^8.1.2\n  equatable: ^2.0.5\n  flutter:\n    sdk: flutter\n  flutter_bloc: ^8.1.3\n  formz: ^0.6.0\n\ndev_dependencies:\n  flutter_test:\n    sdk: flutter\n  mocktail: ^0.3.0\n  very_good_analysis: ^5.0.0+1\n\nflutter:\n  uses-material-design: true\n```\n\n----------------------------------------\n\nTITLE: Output of Bloc Error Handling\nDESCRIPTION: This shows the console output when an error occurs in a CounterBloc. It includes both the local onError handling output and the global BlocObserver error handling output.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/pt-br/bloc-concepts.mdx#2025-04-16_snippet_25\n\nLANGUAGE: text\nCODE:\n```\nException: increment error!, #0      CounterBloc.on.<anonymous closure> (file:///main.dart:36:7)\nCounterBloc Exception: increment error! #0      CounterBloc.on.<anonymous closure> (file:///main.dart:36:7)\n```\n\n----------------------------------------\n\nTITLE: Creating Timer Barrel File\nDESCRIPTION: A barrel file that consolidates timer-related exports to clean up imports in the Timer section of the application\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-timer.mdx#2025-04-16_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nexport 'bloc/timer_bloc.dart';\nexport 'view/timer_page.dart';\n```\n\n----------------------------------------\n\nTITLE: Testing Initial State in Dart\nDESCRIPTION: Shows how to test the initial state of a bloc or cubit in version 6.0.0.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/es/migration.mdx#2025-04-16_snippet_28\n\nLANGUAGE: dart\nCODE:\n```\ntest('initial state is correct', () {\n  expect(MyBloc().state, InitialState());\n});\n```\n\n----------------------------------------\n\nTITLE: Search Result Item Component Template in AngularDart\nDESCRIPTION: This HTML template defines the structure of the search result item component in the AngularDart GitHub search application.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/github-search.mdx#2025-04-16_snippet_23\n\nLANGUAGE: html\nCODE:\n```\n<RemoteCode\n\turl=\"https://raw.githubusercontent.com/felangel/bloc/master/examples/github_search/angular_github_search/lib/src/search_form/search_body/search_results/search_result_item/search_result_item_component.html\"\n\ttitle=\"angular_github_search/lib/src/search_form/search_body/search_results/search_result_item/search_result_item_component.html\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Generating Test Coverage Report\nDESCRIPTION: Commands to generate and view test coverage reports using lcov.\nSOURCE: https://github.com/felangel/bloc/blob/master/examples/flutter_todos/README.md#2025-04-16_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n# Generate Coverage Report\n$ genhtml coverage/lcov.info -o coverage/\n\n# Open Coverage Report\n$ open coverage/index.html\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of context.read for State Access in Flutter Bloc\nDESCRIPTION: Demonstrates an anti-pattern where context.read is used to access state in the build method. This approach can lead to UI not reflecting the latest state changes as it won't rebuild when state changes.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/zh-cn/flutter-bloc-concepts.mdx#2025-04-16_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  final state = context.read<MyBloc>().state;\n  return Text('$state');\n}\n```\n\n----------------------------------------\n\nTITLE: Using Mason to Generate HydratedCubit in Dart\nDESCRIPTION: Command to generate a new HydratedCubit class named 'counter' with the 'basic' style using the Mason CLI tool.\nSOURCE: https://github.com/felangel/bloc/blob/master/bricks/hydrated_cubit/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmason make hydrated_cubit --name counter --style basic\n```\n\n----------------------------------------\n\nTITLE: Counter Page Template with Cubit\nDESCRIPTION: HTML template that displays the counter value and provides increment/decrement buttons using Cubit state management.\nSOURCE: https://github.com/felangel/bloc/blob/master/packages/angular_bloc/README.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div>\n  <h1>Counter App</h1>\n  <h2>Current Count: {{ $pipe.bloc(counterCubit) }}</h2>\n  <button (click)=\"counterCubit.increment()\">➕</button>\n  <button (click)=\"counterCubit.decrement()\">➖</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: MockBloc Setup - Before v9.0.0\nDESCRIPTION: Example showing required fallback value registration in bloc_test v8.x.x\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/es/migration.mdx#2025-04-16_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass FakeMyEvent extends Fake implements MyEvent {}\nclass FakeMyState extends Fake implements MyState {}\nclass MyMockBloc extends MockBloc<MyEvent, MyState> implements MyBloc {}\n\nvoid main() {\n  setUpAll(() {\n    registerFallbackValue(FakeMyEvent());\n    registerFallbackValue(FakeMyState());\n  });\n\n  // Tests...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Splash Page in Flutter\nDESCRIPTION: This snippet defines the SplashPage widget, which is displayed while the app determines the user's authentication status.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-login.mdx#2025-04-16_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nclass SplashPage extends StatelessWidget {\n  const SplashPage({super.key});\n\n  static Route<void> route() {\n    return MaterialPageRoute<void>(builder: (_) => const SplashPage());\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return const Scaffold(\n      body: Center(child: CircularProgressIndicator()),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Weather Models Barrel File in Dart\nDESCRIPTION: Barrel file exporting weather models for easier imports throughout the application.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-weather.mdx#2025-04-16_snippet_22\n\nLANGUAGE: dart\nCODE:\n```\n// Code not provided in the original text\n```\n\n----------------------------------------\n\nTITLE: Adding New Localized String\nDESCRIPTION: Example of adding a new localizable string to the English ARB file.\nSOURCE: https://github.com/felangel/bloc/blob/master/examples/flutter_todos/README.md#2025-04-16_snippet_4\n\nLANGUAGE: arb\nCODE:\n```\n{\n    \"@@locale\": \"en\",\n    \"counterAppBarTitle\": \"Counter\",\n    \"@counterAppBarTitle\": {\n        \"description\": \"Text shown in the AppBar of the Counter Page\"\n    },\n    \"helloWorld\": \"Hello World\",\n    \"@helloWorld\": {\n        \"description\": \"Hello World Text\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: HydratedBloc Output File Structure\nDESCRIPTION: Shows the directory structure that will be generated when creating a new HydratedBloc. The output includes separate files for the bloc class, events, and state definitions.\nSOURCE: https://github.com/felangel/bloc/blob/master/bricks/hydrated_bloc/README.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n├── counter_bloc.dart\n├── counter_event.dart\n└── counter_state.dart\n```\n\n----------------------------------------\n\nTITLE: Using BlocBuilder for Scoped Rebuilds in Flutter Bloc\nDESCRIPTION: Demonstrates the recommended pattern of using BlocBuilder to scope rebuilds when state changes. This ensures only the necessary widgets are rebuilt when the bloc state changes.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/zh-cn/flutter-bloc-concepts.mdx#2025-04-16_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nWidget build(BuildContext context) {\n  return MaterialApp(\n    home: Scaffold(\n      body: BlocBuilder<MyBloc, MyState>(\n        builder: (context, state) {\n          // 当状态变化时，只会重新构建 Text。\n          return Text(state.value);\n        },\n      ),\n    ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Event to Bloc in Build Method (v6.0.x)\nDESCRIPTION: Shows the old way of accessing a bloc to add an event in the build method, which is inefficient as it results in a bloc lookup on each rebuild.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/es/migration.mdx#2025-04-16_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  final bloc = context.bloc<MyBloc>();\n  return ElevatedButton(\n    onPressed: () => bloc.add(MyEvent()),\n    ...\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Timer Background Widget\nDESCRIPTION: Creates the background visual component for the timer application. This widget provides the visual foundation for the timer interface.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-timer.mdx#2025-04-16_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nclass Background extends StatelessWidget {\n  const Background({Key? key}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return Container(\n      decoration: BoxDecoration(\n        gradient: LinearGradient(\n          begin: Alignment.topCenter,\n          end: Alignment.bottomCenter,\n          colors: [Colors.blue.shade50, Colors.blue.shade500],\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Build Status Badge in Markdown\nDESCRIPTION: This snippet shows how to include a GitHub Actions build status badge in a Markdown file. It links to the build actions page for the felangel/bloc repository.\nSOURCE: https://github.com/felangel/bloc/blob/master/examples/github_search/angular_github_search/README.md#2025-04-16_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n[![build](https://github.com/felangel/bloc/workflows/build/badge.svg)](https://github.com/felangel/bloc/actions)\n```\n\n----------------------------------------\n\nTITLE: BlocObserver Usage Example - After v8.0.0\nDESCRIPTION: Example showing how BlocObserver must be extended in v8.0.0\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/es/migration.mdx#2025-04-16_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass MyBlocObserver extends BlocObserver {...}\n\nvoid main() {\n  // No se puede instanciar la clase base.\n  final observer = BlocObserver(); // ERROR\n\n  // Extiende `BlocObserver` en su lugar.\n  final observer = MyBlocObserver(); // OK\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Starting Documentation Server\nDESCRIPTION: Commands for setting up and running the documentation server locally. This includes changing to the docs directory, installing dependencies, and starting the development server.\nSOURCE: https://github.com/felangel/bloc/blob/master/CONTRIBUTING.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# Change directories into docs\ncd ./docs\n\n# Install dependencies\nnpm install\n\n# Start the dev server\nnpm start\n\n# Navigate to http://localhost:4321 in your browser\n```\n\n----------------------------------------\n\nTITLE: Defining User Repository Package Dependencies\nDESCRIPTION: Specifies the pubspec.yaml file for the user_repository package, defining its dependencies and metadata.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-login.mdx#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nname: user_repository\ndescription: Dart package which manages the user domain.\nversion: 1.0.0\npublish_to: none\n\nenvironment:\n  sdk: \">=3.0.0 <4.0.0\"\n\ndependencies:\n  equatable: ^2.0.5\n  uuid: ^3.0.7\n```\n\n----------------------------------------\n\nTITLE: Creating a New Flutter Project\nDESCRIPTION: Command to create a new Flutter project for the timer application.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-timer.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflutter create flutter_timer\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 0.2.1\nDESCRIPTION: Minor updates to copyright and logo references\nSOURCE: https://github.com/felangel/bloc/blob/master/bricks/replay_bloc/CHANGELOG.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# 0.2.1\n\n- chore: update copyright year\n- chore: update logo image refs\n```\n\n----------------------------------------\n\nTITLE: Updating Stream Access in Bloc/Cubit 7.0.0\nDESCRIPTION: Example showing how to refactor stream access after breaking changes in version 7.0.0 where Bloc and Cubit no longer extend Stream\nSOURCE: https://github.com/felangel/bloc/blob/master/packages/bloc/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\n// Before\nmyBloc.map(...)\n\n// After\nmyBloc.stream.map(...)\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 0.1.3\nDESCRIPTION: Bug fix for missing ReplayEvent extension\nSOURCE: https://github.com/felangel/bloc/blob/master/bricks/replay_bloc/CHANGELOG.md#2025-04-16_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n# 0.1.3\n\n- fix: add missing `extends ReplayEvent`\n```\n\n----------------------------------------\n\nTITLE: Search Body Component Template in AngularDart\nDESCRIPTION: This HTML template defines the structure of the search body component in the AngularDart GitHub search application.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/github-search.mdx#2025-04-16_snippet_19\n\nLANGUAGE: html\nCODE:\n```\n<RemoteCode\n\turl=\"https://raw.githubusercontent.com/felangel/bloc/master/examples/github_search/angular_github_search/lib/src/search_form/search_body/search_body_component.html\"\n\ttitle=\"angular_github_search/lib/src/search_form/search_body/search_body_component.html\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Flutter Weather App Dependencies in YAML\nDESCRIPTION: pubspec.yaml file listing the dependencies for the Flutter weather app, including equatable, google_fonts, hydrated_bloc, and testing packages.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-weather.mdx#2025-04-16_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\n// Code not provided in the original text\n```\n\n----------------------------------------\n\nTITLE: Generating a New AngularDart Project with Stagehand\nDESCRIPTION: Command to generate a new AngularDart web application project using stagehand.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/ngdart-counter.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir angular_counter && cd angular_counter\nstagehand web-angular\n```\n\n----------------------------------------\n\nTITLE: iOS Configuration Steps for Firebase\nDESCRIPTION: Instructions for configuring Firebase in an iOS Flutter app, including replacing the GoogleService-Info.plist file and updating the info.plist with the REVERSED_CLIENT_ID.\nSOURCE: https://github.com/felangel/bloc/blob/master/examples/flutter_firebase_login/README.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n1. Replace `./ios/Runner/GoogleService-Info.plist` with your own\n2. Update `./ios/Runner/info.plist`\n   - Paste the `REVERSED_CLIENT_ID` from `GoogleService-Info.plist` to key `CFBundleURLSchemes` in `info.plist`\n```\n\n----------------------------------------\n\nTITLE: Expected Output File Structure for HydratedCubit Generation\nDESCRIPTION: Shows the file structure that will be generated when creating a new HydratedCubit, including the cubit class file and state file.\nSOURCE: https://github.com/felangel/bloc/blob/master/bricks/hydrated_cubit/README.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n├── counter_cubit.dart\n└── counter_state.dart\n```\n\n----------------------------------------\n\nTITLE: Displaying Build Status Badge in Markdown\nDESCRIPTION: This snippet shows how to embed a GitHub Actions build status badge in a Markdown file. It links to the build actions page for the 'felangel/bloc' repository.\nSOURCE: https://github.com/felangel/bloc/blob/master/examples/angular_counter/README.md#2025-04-16_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n[![build](https://github.com/felangel/bloc/workflows/build/badge.svg)](https://github.com/felangel/bloc/actions)\n```\n\n----------------------------------------\n\nTITLE: Displaying Image Gallery in Markdown\nDESCRIPTION: This snippet shows how to create a 2x3 grid of images with links using HTML tables in Markdown. Each cell contains an image linked to a tutorial for a different Flutter application built with Bloc.\nSOURCE: https://github.com/felangel/bloc/blob/master/packages/flutter_bloc/README.md#2025-04-16_snippet_25\n\nLANGUAGE: markdown\nCODE:\n```\n<div style=\"text-align: center\">\n    <table>\n        <tr>\n            <td style=\"text-align: center\">\n                <a href=\"https://bloclibrary.dev/tutorials/flutter-counter\">\n                    <img src=\"https://raw.githubusercontent.com/felangel/bloc/master/assets/examples/flutter_counter.gif\" width=\"200\"/>\n                </a>\n            </td>            \n            <td style=\"text-align: center\">\n                <a href=\"https://bloclibrary.dev/tutorials/flutter-infinite-list\">\n                    <img src=\"https://raw.githubusercontent.com/felangel/bloc/master/assets/examples/flutter_infinite_list.gif\" width=\"200\"/>\n                </a>\n            </td>\n            <td style=\"text-align: center\">\n                <a href=\"https://bloclibrary.dev/tutorials/flutter-login\">\n                    <img src=\"https://raw.githubusercontent.com/felangel/bloc/master/assets/examples/flutter_firebase_login.gif\" width=\"200\" />\n                </a>\n            </td>\n        </tr>\n        <tr>\n            <td style=\"text-align: center\">\n                <a href=\"https://bloclibrary.dev/tutorials/github-search\">\n                    <img src=\"https://raw.githubusercontent.com/felangel/bloc/master/assets/examples/flutter_github_search.gif\" width=\"200\"/>\n                </a>\n            </td>\n            <td style=\"text-align: center\">\n                <a href=\"https://bloclibrary.dev/tutorials/flutter-weather\">\n                    <img src=\"https://raw.githubusercontent.com/felangel/bloc/master/assets/examples/flutter_weather.gif\" width=\"200\"/>\n                </a>\n            </td>\n            <td style=\"text-align: center\">\n                <a href=\"https://bloclibrary.dev/tutorials/flutter-todos\">\n                    <img src=\"https://raw.githubusercontent.com/felangel/bloc/master/assets/examples/flutter_todos.gif\" width=\"200\"/>\n                </a>\n            </td>\n        </tr>\n    </table>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Android Configuration Steps for Firebase\nDESCRIPTION: Instructions for configuring Firebase in an Android Flutter app, including replacing the google-services.json file and updating the build.gradle with the correct package name.\nSOURCE: https://github.com/felangel/bloc/blob/master/examples/flutter_firebase_login/README.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n1. Replace `./android/app/google-services.json` with your own\n2. Update `./android/app/build.gradle`\n   - Replace `\"com.example.flutter_firebase_login\"` with the `package_name` from `google-services.json`\n```\n\n----------------------------------------\n\nTITLE: SDK Constraint Update for Null Safety\nDESCRIPTION: Dart SDK version constraints for null safety support\nSOURCE: https://github.com/felangel/bloc/blob/master/packages/bloc/CHANGELOG.md#2025-04-16_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\n>=2.12.0-0 <3.0.0\n```\n\n----------------------------------------\n\nTITLE: Weather JSON API Response Example\nDESCRIPTION: Example JSON response from the OpenMeteo weather API endpoint, showing the structure of weather data including temperature, wind speed, and other meteorological information.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-weather.mdx#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"latitude\": 43.0389,\n  \"longitude\": -87.90647,\n  \"generationtime_ms\": 3.8859844,\n  \"utc_offset_seconds\": 0,\n  \"timezone\": \"GMT\",\n  \"timezone_abbreviation\": \"GMT\",\n  \"elevation\": 189.0,\n  \"current_weather\": {\n    \"temperature\": 15.3,\n    \"windspeed\": 25.8,\n    \"winddirection\": 310.0,\n    \"weathercode\": 63.0,\n    \"time\": \"2022-09-12T01:00\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring build.yaml for Weather Repository\nDESCRIPTION: This YAML configuration file handles naming convention discrepancies for JSON serialization in the weather repository package.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-weather.mdx#2025-04-16_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\n// Code not directly available in the provided text\n```\n\n----------------------------------------\n\nTITLE: Spanish Localization Example\nDESCRIPTION: Example of Spanish localization ARB file with translated strings.\nSOURCE: https://github.com/felangel/bloc/blob/master/examples/flutter_todos/README.md#2025-04-16_snippet_7\n\nLANGUAGE: arb\nCODE:\n```\n{\n    \"@@locale\": \"es\",\n    \"counterAppBarTitle\": \"Contador\",\n    \"@counterAppBarTitle\": {\n        \"description\": \"Texto mostrado en la AppBar de la página del contador\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 0.1.0\nDESCRIPTION: Initial release of the package with basic replay bloc generation support\nSOURCE: https://github.com/felangel/bloc/blob/master/bricks/replay_bloc/CHANGELOG.md#2025-04-16_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n# 0.1.0\n\n- feat: initial release with support for basic replay bloc generation\n```\n\n----------------------------------------\n\nTITLE: Extension Settings Configuration\nDESCRIPTION: Configuration settings available in the extension\nSOURCE: https://github.com/felangel/bloc/blob/master/extensions/vscode/CHANGELOG.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- bloc.newBlocTemplate.createDirectory\n- bloc.newCubitTemplate.createDirectory\n- bloc.useSealedClasses\n- bloc.checkForUpdates\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 0.2.0\nDESCRIPTION: Feature update adding support for equatable and freezed libraries\nSOURCE: https://github.com/felangel/bloc/blob/master/bricks/replay_bloc/CHANGELOG.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n# 0.2.0\n\n- feat: add support for `equatable`\n- feat: add support for `freezed`\n```\n\n----------------------------------------\n\nTITLE: ReplayCubit Output File Structure\nDESCRIPTION: The file structure output when generating a ReplayCubit. It creates two files: a cubit class file and a state file.\nSOURCE: https://github.com/felangel/bloc/blob/master/bricks/replay_cubit/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n├── counter_cubit.dart\n└── counter_state.dart\n```\n\n----------------------------------------\n\nTITLE: Listing Bloc Example Projects in Markdown\nDESCRIPTION: This snippet provides a list of Flutter example projects that use the Bloc library. Each list item includes a brief description of the project and a link to either the tutorial or the source code repository.\nSOURCE: https://github.com/felangel/bloc/blob/master/packages/flutter_bloc/README.md#2025-04-16_snippet_26\n\nLANGUAGE: markdown\nCODE:\n```\n- [Counter](https://bloclibrary.dev/tutorials/flutter-counter) - an example of how to create a `CounterBloc` to implement the classic Flutter Counter app.\n- [Form Validation](https://github.com/felangel/bloc/tree/master/examples/flutter_form_validation) - an example of how to use the `bloc` and `flutter_bloc` packages to implement form validation.\n- [Bloc with Stream](https://github.com/felangel/bloc/tree/master/examples/flutter_bloc_with_stream) - an example of how to hook up a `bloc` to a `Stream` and update the UI in response to data from the `Stream`.\n- [Complex List](https://github.com/felangel/bloc/tree/master/examples/flutter_complex_list) - an example of how to manage a list of items and asynchronously delete items one at a time using `bloc` and `flutter_bloc`.\n- [Infinite List](https://bloclibrary.dev/tutorials/flutter-infinite-list) - an example of how to use the `bloc` and `flutter_bloc` packages to implement an infinite scrolling list.\n- [Login Flow](https://bloclibrary.dev/tutorials/flutter-login) - an example of how to use the `bloc` and `flutter_bloc` packages to implement a Login Flow.\n- [Firebase Login](https://bloclibrary.dev/tutorials/flutter-firebase-login) - an example of how to use the `bloc` and `flutter_bloc` packages to implement login via Firebase.\n- [Github Search](https://bloclibrary.dev/tutorials/github-search) - an example of how to create a Github Search Application using the `bloc` and `flutter_bloc` packages.\n- [Weather](https://bloclibrary.dev/tutorials/flutter-weather) - an example of how to create a Weather Application using the `bloc` and `flutter_bloc` packages. The app uses a `RefreshIndicator` to implement \"pull-to-refresh\" as well as dynamic theming.\n- [Todos](https://bloclibrary.dev/tutorials/flutter-todos) - an example of how to create a Todos Application using the `bloc` and `flutter_bloc` packages.\n- [Timer](https://bloclibrary.dev/tutorials/flutter-timer) - an example of how to create a Timer using the `bloc` and `flutter_bloc` packages.\n- [Shopping Cart](https://github.com/felangel/bloc/tree/master/examples/flutter_shopping_cart) - an example of how to create a Shopping Cart Application using the `bloc` and `flutter_bloc` packages based on [flutter samples](https://github.com/flutter/samples/tree/master/provider_shopper).\n- [Dynamic Form](https://github.com/felangel/bloc/tree/master/examples/flutter_dynamic_form) - an example of how to use the `bloc` and `flutter_bloc` packages to implement a dynamic form which pulls data from a repository.\n- [Wizard](https://github.com/felangel/bloc/tree/master/examples/flutter_wizard) - an example of how to build a multi-step wizard using the `bloc` and `flutter_bloc` packages.\n- [Fluttersaurus](https://github.com/felangel/fluttersaurus) - an example of how to use the `bloc` and `flutter_bloc` packages to create a thesuarus app -- made for Bytconf Flutter 2020.\n- [I/O Photo Booth](https://github.com/flutter/photobooth) - an example of how to use the `bloc` and `flutter_bloc` packages to create a virtual photo booth web app -- made for Google I/O 2021.\n- [I/O Pinball](https://github.com/flutter/pinball) - an example of how to use the `bloc` and `flutter_bloc` packages to create a pinball web app -- made for Google I/O 2022.\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 0.3.0\nDESCRIPTION: Latest version upgrade including mason and hooks dependency updates\nSOURCE: https://github.com/felangel/bloc/blob/master/bricks/replay_bloc/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# 0.3.0\n\n- chore(deps): upgrade to `mason ^0.1.0`\n- chore(deps): upgrade hooks to `dart ^3.5.4`\n```\n\n----------------------------------------\n\nTITLE: Version Release Notes - Markdown\nDESCRIPTION: Changelog entries detailing version updates, new features, and improvements to the bloc_test library.\nSOURCE: https://github.com/felangel/bloc/blob/master/packages/bloc_test/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# 2.1.0\n\n- Add `MockBloc` to `bloc_test` in order to simplify bloc mocks (addresses [#636](https://github.com/felangel/bloc/issues/636))\n- Documentation and example updates\n\n# 2.0.0\n\n- Updated to `bloc: ^2.0.0` and Documentation Updates\n- Adhere to [effective dart](https://dart.dev/guides/language/effective-dart) ([#561](https://github.com/felangel/bloc/issues/561))\n\n# 1.0.0\n\nUpdated to `bloc: ^1.0.0` and Documentation Updates\n\n# 0.2.1\n\n`whenListen` automatically converts `Stream` to `BroadcastStream`\n\n# 0.2.0\n\n`whenListen` handles internal `skip` from `BlocBuilder` and `BlocListener`\n\n# 0.1.0\n\nInitial Version of the library.\n\n- Includes `whenListen` to enable mocking a `Bloc` state `Stream`.\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Documentation\nDESCRIPTION: Comprehensive changelog entries detailing the package's version history, including major changes, dependency updates, feature additions, and breaking changes.\nSOURCE: https://github.com/felangel/bloc/blob/master/packages/replay_bloc/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# 0.3.0\n\n- refactor: upgrade to `bloc ^9.0.0` ([#4137](https://github.com/felangel/bloc/pull/4137))\n- chore: add `funding` to `pubspec.yaml` ([#4200](https://github.com/felangel/bloc/pull/4200))\n- chore: update sponsors\n\n# 0.2.7\n\n- refactor: use additional lint rules ([#4083](https://github.com/felangel/bloc/pull/4083))\n- chore: update copyright year\n- chore: update sponsors\n\n# 0.2.6\n\n- chore: update sponsors ([#4054](https://github.com/felangel/bloc/pull/4054))\n\n# 0.2.5\n\n- docs: fix inline doc comment macro ([#4007](https://github.com/felangel/bloc/pull/4007))\n- chore: add `topics` to `pubspec.yaml` ([#3914](https://github.com/felangel/bloc/pull/3914))\n\n# 0.2.4\n\n- docs: upgrade to Dart 3 ([#3825](https://github.com/felangel/bloc/pull/3825))\n- refactor: standardize analysis_options ([#3825](https://github.com/felangel/bloc/pull/3825))\n- chore: update sdk constraints and fix analysis warnings ([#3825](https://github.com/felangel/bloc/pull/3825))\n```\n\n----------------------------------------\n\nTITLE: iOS Localization Configuration\nDESCRIPTION: Example of configuring supported locales in iOS Info.plist file.\nSOURCE: https://github.com/felangel/bloc/blob/master/examples/flutter_todos/README.md#2025-04-16_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n    <key>CFBundleLocalizations</key>\n\t<array>\n\t\t<string>en</string>\n\t\t<string>es</string>\n\t</array>\n```\n\n----------------------------------------\n\nTITLE: Running AngularDart Project in Bash\nDESCRIPTION: This code block shows how to change into the angular_github_search directory and run the AngularDart project using webdev serve.\nSOURCE: https://github.com/felangel/bloc/blob/master/examples/github_search/README.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# change directories into angular_github_search\ncd angular_github_search\n\n# run the angular project\nwebdev serve\n```\n\n----------------------------------------\n\nTITLE: Updating mapEventToState parameter name in Dart\nDESCRIPTION: Renames the first parameter of the mapEventToState method from 'state' to 'currentState' for better clarity and consistency in the API.\nSOURCE: https://github.com/felangel/bloc/blob/master/packages/bloc/CHANGELOG.md#2025-04-16_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n- `Stream<S> mapEventToState(S state, E event)` -> `Stream<S> mapEventToState(S currentState, E event)`\n```\n\n----------------------------------------\n\nTITLE: Command Names and Snippets\nDESCRIPTION: Reference of command identifiers and code snippet shortcuts used throughout the extension\nSOURCE: https://github.com/felangel/bloc/blob/master/extensions/vscode/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- `_mockbloc`\n- `_mockcubit` \n- `_fake`\n- `_mock`\n- `ctxbloc`\n- `ctxrepo`\n- `repoof`\n- `repoprovider`\n- `multirepoprovider`\n- `blocstate`\n- `blocevent`\n- `fstate`\n- `fevent`\n- `feventwhen`\n- `feventmap`\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 0.1.2\nDESCRIPTION: Documentation updates including badges and logo changes\nSOURCE: https://github.com/felangel/bloc/blob/master/bricks/replay_bloc/CHANGELOG.md#2025-04-16_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n# 0.1.2\n\n- docs: add badges to README\n- docs: use dark logo variant\n```\n\n----------------------------------------\n\nTITLE: Running Flutter Application Flavors\nDESCRIPTION: Commands to run different flavors (development, staging, production) of the Flutter application.\nSOURCE: https://github.com/felangel/bloc/blob/master/examples/flutter_todos/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# Development\n$ flutter run --flavor development --target lib/main_development.dart\n\n# Staging\n$ flutter run --flavor staging --target lib/main_staging.dart\n\n# Production\n$ flutter run --flavor production --target lib/main_production.dart\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for common_github_search in Bash\nDESCRIPTION: This snippet shows the commands to change into the common_github_search directory, install dependencies using dart pub get, and return to the root directory.\nSOURCE: https://github.com/felangel/bloc/blob/master/examples/github_search/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# change directories into common_github_search\ncd common_github_search\n\n# install dependencies\ndart pub get\n\n# change directories back out to the root directory\ncd ../\n```\n\n----------------------------------------\n\nTITLE: Using Builder with Multiple context.watch Calls in Flutter Bloc\nDESCRIPTION: Demonstrates how to use Builder with multiple context.watch calls to create a MultiBlocBuilder effect. This pattern is useful when a widget depends on the state of multiple blocs.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/zh-cn/flutter-bloc-concepts.mdx#2025-04-16_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nBuilder(\n  builder: (context) {\n    final stateA = context.watch<BlocA>().state;\n    final stateB = context.watch<BlocB>().state;\n    final stateC = context.watch<BlocC>().state;\n\n    // 返回一个依赖于 BlocA 、BlocB, 和 BlocC 状态的 Widget。\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Activating Stagehand in Dart\nDESCRIPTION: Command to activate the stagehand package globally using the Dart package manager (pub).\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/ngdart-counter.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npub global activate stagehand\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for flutter_github_search in Bash\nDESCRIPTION: This snippet demonstrates the process of changing into the flutter_github_search directory, installing dependencies with flutter pub get, and returning to the root directory.\nSOURCE: https://github.com/felangel/bloc/blob/master/examples/github_search/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# change directories into flutter_github_search\ncd flutter_github_search\n\n# install dependencies\nflutter pub get\n\n# change directories back out to the root directory\ncd ../\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 0.1.1\nDESCRIPTION: Minor documentation update to README\nSOURCE: https://github.com/felangel/bloc/blob/master/bricks/replay_bloc/CHANGELOG.md#2025-04-16_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n# 0.1.1\n\n- docs: minor README update\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom BlocObserver\nDESCRIPTION: Creates a custom BlocObserver to log all Transitions in the application, useful for debugging and tracking state changes.\nSOURCE: https://github.com/felangel/bloc/blob/master/docs/src/content/docs/tutorials/flutter-infinite-list.mdx#2025-04-16_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\n// Content of lib/simple_bloc_observer.dart\n```"
  }
]