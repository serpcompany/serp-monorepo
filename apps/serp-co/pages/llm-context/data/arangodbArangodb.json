[
  {
    "owner": "arangodb",
    "repo": "arangodb",
    "content": "TITLE: Linking Libraries to ArangoDB Test Executable\nDESCRIPTION: Configures the library dependencies for the arangodbtests executable, including core ArangoDB libraries, test libraries, database engines, and third-party dependencies like gtest, boost, and velocypack.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/CMakeLists.txt#2025-04-22_snippet_20\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(arangodbtests\n  arango\n  arango_tests_async_registry_server\n  arango_tests_basics\n  arango_tests_replication2\n  arango_tests_replication2_pure\n  arango_tests_graph\n  arango_tests_futures\n  arango_tests_zkd\n  arango_tests_actor\n  arango_tests_inspection\n  arango_inspection_test_helper\n  arango_agency\n  arango_cluster_engine\n  arango_rocksdb\n  arangoserver\n  arango_restore\n  clienttools_utils\n  fuerte\n  rocksdb\n  snappy\n  gtest\n  boost_boost\n  fmt\n  velocypack_utils\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Lock-Free Message Queue in C++\nDESCRIPTION: References the implementation of a lock-free multi-producer-single-consumer message queue used in the actor framework. This queue is defined in the MPSCQueue.h file.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/lib/Actor/README.md#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nMPSCQueue.h\n```\n\n----------------------------------------\n\nTITLE: BOOST_OUTCOME_TRY Macro Definition\nDESCRIPTION: Macro that evaluates an expression with value checking. It assigns success values to a variable and handles error cases by returning from the function. Supports customization points for value extraction and success/failure checking.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/macros/try.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nBOOST_OUTCOME_TRY(var, expr)\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Files for arango_vocbase Target in CMake\nDESCRIPTION: This CMake directive specifies the source files that should be included in the arango_vocbase target. The listed files handle various ID implementations including DataSourceId, IndexId, LocalDocumentId, RevisionId, ServerId, and TransactionId.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/VocBase/Identifiers/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(arango_vocbase PRIVATE\n  DataSourceId.cpp\n  IndexId.cpp\n  LocalDocumentId.cpp\n  RevisionId.cpp\n  ServerId.cpp\n  TransactionId.cpp)\n```\n\n----------------------------------------\n\nTITLE: Compressing Data with Snappy in C++\nDESCRIPTION: Example of using Snappy to compress data in C++. This snippet demonstrates the simplest way to compress input data into an output string.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/snappy/snappy-1.1.9/README.md#2025-04-22_snippet_1\n\nLANGUAGE: c++\nCODE:\n```\nsnappy::Compress(input.data(), input.size(), &output);\n```\n\n----------------------------------------\n\nTITLE: Managing Animals in a Zoo Using Boost Pointer Vector\nDESCRIPTION: This snippet illustrates how to use boost::ptr_vector to manage dynamic memories of animal objects within a zoo context. It shows how to add animals without worrying about memory management.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/tutorial.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nclass zoo {\n    boost::ptr_vector<animal> the_animals;\npublic:\n    void add_animal( animal* a )\n    {\n        the_animals.push_back( a );\n    }\n};\n\nzoo the_zoo;\nthe_zoo.add_animal( new mammal(\"joe\") );\nthe_zoo.add_animal( new bird(\"dodo\") );\n```\n\n----------------------------------------\n\nTITLE: Implementing the 'arg' Utility in C++ for Argument Selection\nDESCRIPTION: This code snippet defines the entire implementation of the 'arg' utility in the Boost HOF library. The utility allows selecting specific arguments by position, with numbering starting from 1. It includes helper structures and functions for perfect forwarding and argument selection.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/arg.hpp.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nnamespace boost { namespace hof {\n\nnamespace detail {\n\ntemplate<class T>\nstruct perfect_ref\n{\n    typedef T type;\n    typedef typename std::remove_reference<T>::type value_type;\n    T&& value;\n    constexpr perfect_ref(value_type& x) noexcept\n    : value(BOOST_HOF_FORWARD(T)(x))\n    {}\n};\n\ntemplate<std::size_t N>\nstruct ignore\n{\n    template<class T>\n    constexpr ignore(T&&...) noexcept\n    {}\n};\n\ntemplate<std::size_t... N>\nstruct args_at\n{\n    template<class T, class... Ts>\n    constexpr auto operator()(ignore<N>..., T x, Ts...) const \n    BOOST_HOF_RETURNS(BOOST_HOF_FORWARD(typename T::type)(x.value));\n};\n\ntemplate<std::size_t... N>\nconstexpr args_at<N...> make_args_at(seq<N...>) noexcept\n{\n    return {};\n}\n\ntemplate<std::size_t N, class... Ts>\nconstexpr auto get_args(Ts&&... xs) BOOST_HOF_RETURNS\n(\n    boost::hof::detail::make_args_at(typename gens<N>::type())(nullptr, BOOST_HOF_RETURNS_CONSTRUCT(perfect_ref<Ts>)(xs)...)\n);\n\ntemplate<class T, T N>\nstruct make_args_f\n{\n    template<class... Ts, class=typename std::enable_if<(N <= sizeof...(Ts))>::type>\n    constexpr auto operator()(Ts&&... xs) const BOOST_HOF_RETURNS\n    (\n        boost::hof::detail::get_args<N>(BOOST_HOF_FORWARD(Ts)(xs)...)\n    );\n};\n\nstruct arg_f\n{\n    template<class IntegralConstant>\n    constexpr make_args_f<std::size_t, IntegralConstant::value> operator()(IntegralConstant) const noexcept\n    {\n        return make_args_f<std::size_t, IntegralConstant::value>();\n    }\n};\n\n}\n#if BOOST_HOF_HAS_VARIABLE_TEMPLATES\ntemplate<std::size_t N>\nBOOST_HOF_STATIC_CONSTEXPR detail::make_args_f<std::size_t, N> arg_c = {};\n#else\ntemplate<std::size_t N, class... Ts>\nconstexpr auto arg_c(Ts&&... xs) BOOST_HOF_RETURNS\n(\n    boost::hof::detail::get_args<N>(BOOST_HOF_FORWARD(Ts)(xs)...)\n);\n#endif\n\nBOOST_HOF_DECLARE_STATIC_VAR(arg, detail::arg_f);\n\n}} // namespace boost::hof\n```\n\n----------------------------------------\n\nTITLE: Configuring Linux Core Dumps for ArangoDB\nDESCRIPTION: Comprehensive instructions for enabling and configuring core dumps on Linux systems for ArangoDB. Includes shell commands, system configuration files, and methods for generating and analyzing core dumps for debugging crashes.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/CONTRIBUTING.md#2025-04-22_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nulimit -c unlimited\n```\n\nLANGUAGE: bash\nCODE:\n```\nulimit -a\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo sysctl -p\n```\n\nLANGUAGE: bash\nCODE:\n```\necho 1 > /proc/sys/kernel/core_uses_pid\necho '/var/tmp/core-%e-%p-%t' > /proc/sys/kernel/core_pattern\n```\n\nLANGUAGE: plaintext\nCODE:\n```\narangodb        -       core            infinity\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n## setting for core files\n# Any dir that is writable by the user running arangod\nWorkingDirectory=/var/lib/arangodb3\n# core limit - set this to infinity to enable cores\nLimitCORE=0\n```\n\nLANGUAGE: bash\nCODE:\n```\nsystemctl daemon-reload && systemctl restart arangodb3.service\n```\n\nLANGUAGE: bash\nCODE:\n```\necho 1 >/proc/sys/fs/suid_dumpable\n```\n\nLANGUAGE: bash\nCODE:\n```\necho \"sys.fs.suid_dumpable = 1\" >> /etc/sysctl.d/99-suid-coredump.conf\n```\n\nLANGUAGE: bash\nCODE:\n```\n# sleep 100000 &\n[2] 6942\n# gdb /bin/sleep 6942\n...\n0x00007faaa7abd4e4 in __GI___nanosleep (requested_time=0x7ffd047c9940, remaining=0x0) at ../sysdeps/unix/sysv/linux/nanosleep.c:28\ngdb> gcore\nSaved corefile core.6942\ngdb> quit\nDetaching from program: /bin/sleep, process 6942\n# ls -l core*\n-rw-r--r--  1 me users  352664 Nov 27 10:48  core.6942\n```\n\n----------------------------------------\n\nTITLE: Implementing GPU-based Vector Sorting with Boost.Compute\nDESCRIPTION: Demonstrates how to sort a vector of floating-point numbers using GPU acceleration through Boost.Compute. The example shows device initialization, data transfer between host and device, and parallel sorting execution.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/compute/README.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n#include <vector>\n#include <algorithm>\n#include <boost/compute.hpp>\n\nnamespace compute = boost::compute;\n\nint main()\n{\n    // get the default compute device\n    compute::device gpu = compute::system::default_device();\n\n    // create a compute context and command queue\n    compute::context ctx(gpu);\n    compute::command_queue queue(ctx, gpu);\n\n    // generate random numbers on the host\n    std::vector<float> host_vector(1000000);\n    std::generate(host_vector.begin(), host_vector.end(), rand);\n\n    // create vector on the device\n    compute::vector<float> device_vector(1000000, ctx);\n\n    // copy data to the device\n    compute::copy(\n        host_vector.begin(), host_vector.end(), device_vector.begin(), queue\n    );\n\n    // sort data on the device\n    compute::sort(\n        device_vector.begin(), device_vector.end(), queue\n    );\n\n    // copy data back to the host\n    compute::copy(\n        device_vector.begin(), device_vector.end(), host_vector.begin(), queue\n    );\n\n    return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Pixel Iterator Concept\nDESCRIPTION: This C++ code defines the concept 'PixelIteratorConcept', which assesses whether a given iterator is mutable, its read-only type, and whether it is an iterator adaptor. It utilizes template programming to enforce constraints on the iterator types.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/pixel_iterator.rst#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n  concept PixelIteratorConcept<RandomAccessTraversalIteratorConcept Iterator>\n      : PixelBasedConcept<Iterator>\n  {\n    where PixelValueConcept<value_type>;\n    typename const_iterator_type<It>::type;\n        where PixelIteratorConcept<const_iterator_type<It>::type>;\n    static const bool  iterator_is_mutable<It>::value;\n    static const bool  is_iterator_adaptor<It>::value;   // is it an iterator adaptor\n  };\n```\n\n----------------------------------------\n\nTITLE: Using BOOST_OUTCOME_TRY for Error Handling in C++\nDESCRIPTION: This snippet demonstrates the usage of the BOOST_OUTCOME_TRY macro for error handling in a C++ program, particularly focusing on the management of results from a function that may fail. It also explains the behavior of the macro when the input parameters change.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/tutorial/essential/result/try.md#2025-04-22_snippet_0\n\nLANGUAGE: c++\nCODE:\n```\nBOOST_OUTCOME_TRY (auto i, BigInt::fromString(text));\n```\n\n----------------------------------------\n\nTITLE: Decompressing Data with Snappy in C++\nDESCRIPTION: Example of using Snappy to decompress data in C++. This snippet shows the basic method to uncompress input data into an output string.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/snappy/snappy-1.1.9/README.md#2025-04-22_snippet_2\n\nLANGUAGE: c++\nCODE:\n```\nsnappy::Uncompress(input.data(), input.size(), &output);\n```\n\n----------------------------------------\n\nTITLE: Using Custom Error Codes with std::error_code in C++\nDESCRIPTION: Demonstration of how to use custom enumeration values with std::error_code and perform equality checks. This shows the practical application after the boilerplate code has been set up to integrate the enum with the error_code system.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/motivation/std_error_code.md#2025-04-22_snippet_2\n\nLANGUAGE: c++\nCODE:\n```\nstd::error_code ec = ConvertErrc::EmptyString;\nassert(ec == ConvertErrc::EmptyString);\n```\n\n----------------------------------------\n\nTITLE: Configuring ArangoDB Replication Library with CMake\nDESCRIPTION: This CMake configuration snippet is used to create a static library called 'arango_replication'. It compiles various source files including syncers, appliers, and utility components. The library depends on other modules such as 'arango_storage_engine', 'arango_utils', and 'arango_vocbase', which are linked using 'target_link_libraries'. The directory paths for headers are specified with 'target_include_directories'.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/Replication/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(arango_replication STATIC\n  DatabaseInitialSyncer.cpp\n  DatabaseTailingSyncer.cpp\n  GlobalInitialSyncer.cpp\n  GlobalReplicationApplier.cpp\n  GlobalTailingSyncer.cpp\n  InitialSyncer.cpp\n  ReplicationApplier.cpp\n  ReplicationApplierConfiguration.cpp\n  ReplicationApplierState.cpp\n  ReplicationClients.cpp\n  ReplicationFeature.cpp\n  ReplicationMetricsFeature.cpp\n  Syncer.cpp\n  SyncerId.cpp\n  TailingSyncer.cpp\n  common-defines.cpp\n  utilities.cpp)\n\ntarget_link_libraries(arango_replication\n  arango_storage_engine\n  arango_utils\n  arango_vocbase)\n\ntarget_include_directories(arango_replication PRIVATE\n  \"${PROJECT_SOURCE_DIR}/arangod\"\n  \"${PROJECT_SOURCE_DIR}/${ENTERPRISE_INCLUDE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Serialization for C++ Objects with Boost.Python\nDESCRIPTION: Complete example showing how to implement pickling support for C++ objects using Boost.Python's pickle_suite, enabling seamless serialization between Python and C++.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/doc/article.rst#2025-04-22_snippet_19\n\nLANGUAGE: C++\nCODE:\n```\n#include <string>\n\nstruct World\n{\n    World(std::string a_msg) : msg(a_msg) {}\n    std::string greet() const { return msg; }\n    std::string msg;\n};\n\n#include <boost/python.hpp>\nusing namespace boost::python;\n\nstruct World_picklers : pickle_suite\n{\n  static tuple\n  getinitargs(World const& w) { return make_tuple(w.greet()); }\n};\n\nBOOST_PYTHON_MODULE(hello)\n{\n    class_<World>(\"World\", init<std::string>())\n        .def(\"greet\", &World::greet)\n        .def_pickle(World_picklers())\n    ;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing ArangoDB with CMake\nDESCRIPTION: This command installs the built ArangoDB files to a specified prefix. Replace `<preset-name>` with the actual preset name used for building.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/CONTRIBUTING.md#2025-04-22_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\ncmake --install ./build-presets/<preset-name> --prefix install/usr\n```\n\n----------------------------------------\n\nTITLE: Future-based Interface Implementation\nDESCRIPTION: Shows the Future-based version of the document operation interface, returning a Future of OperationResult.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/lib/Futures/README.md#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\nFuture<OperationResult> document(std::string const& collectionName,\n                                 VPackSlice const value, OperationOptions& options);\n```\n\n----------------------------------------\n\nTITLE: Configuring RocksDB, VelocyPack, and V8 Dependencies in CMake\nDESCRIPTION: This snippet configures RocksDB with snappy dependency and optional jemalloc support, enables xxHash for VelocyPack, and sets up V8 JavaScript engine with version definitions and link directories.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/CMakeLists.txt#2025-04-22_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\n# ------------------------------------------------------------------------------\n# RocksDB\n# ------------------------------------------------------------------------------\n\nadd_dependencies(rocksdb snappy)\n\nif(USE_JEMALLOC)\n  add_dependencies(rocksdb jemalloc_build)\n  link_directories(\"${JEMALLOC_HOME}/lib\")\nendif()\n\n# ------------------------------------------------------------------------------\n# VELOCYPACK\n# ------------------------------------------------------------------------------\n\nadd_definitions(\"-DVELOCYPACK_XXHASH=1\")\n\n# ------------------------------------------------------------------------------\n# V8\n# ------------------------------------------------------------------------------\n\nset(V8_LINK_DIRECTORIES \"${LINK_DIRECTORIES}\" CACHE INTERNAL \"\" FORCE)\nadd_definitions(\"-DARANGODB_V8_VERSION=\\\"${V8_VERSION}\\\"\")\n\nforeach(LINK_DIR ${V8_LINK_DIRECTORIES})\n  link_directories(\"${LINK_DIR}\")\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Basic Future/Promise Usage Example in C++\nDESCRIPTION: Demonstrates basic usage of Future/Promise pattern with a simple function that increments a value asynchronously. Shows Promise creation, Future chaining, and value retrieval.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/lib/Futures/README.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n#include \"Futures/Future.h\"\n#include \"Logger/Logger.h\"\n\nusing namespace arangodb;\nusing namespace arangodb::futures;\n\nint foo(int x) {\n  // do something with x\n  LOG_DEVEL << \"foo(\" << x << \")\";\n  return x + 1;\n}\n\nLOG_DEVEL << \"making Promise\" << endl;\nPromise<int> p;\nFuture<int> f = p.getFuture();\nauto f2 = std::move(f).thenValue(&foo);\nLOG_DEVEL << \"Future chain made\";\n\n// ... now perhaps in another event callback\n\nLOG_DEVEL << \"fulfilling Promise\";\np.setValue(42);\n// .get() waits for the Future to be fulfilled\nLOG_DEVEL << \"Promise fulfilled f2 contains\" << f2.get();\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Options and Features\nDESCRIPTION: Defines various compile-time options for controlling ArangoDB build features like V8 JavaScript support, enterprise edition, and code coverage\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\noption(USE_FRONTEND \"build the browser-based frontend (requires yarn and nodejs)\" ON)\noption(USE_V8 \"build with V8/JavaScript support\" ON)\noption(USE_DTRACE \"enable dtrace probes\" OFF)\noption(USE_COVERAGE \"enable gcov code coverage\" OFF)\noption(USE_ENTERPRISE \"enable enterprise build\" OFF)\n\nif(USE_V8)\n  add_definitions(\"-DUSE_V8=1\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating ndarray from List in C++ using Boost.Numpy\nDESCRIPTION: Shows the creation of an ndarray from a list by first appending an element and then converting it to ndarray. Additionally, it demonstrates specifying a data type for the ndarray.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/doc/html/numpy/_sources/tutorial/ndarray.rst.txt#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\np::list l;\nl.append('a');\nnp::ndarray example_list = np::array (l);\n```\n\nLANGUAGE: C++\nCODE:\n```\nnp::dtype dt = np::dtype::get_builtin<int>();\nnp::ndarray example_list1 = np::array (l,dt);\n```\n\n----------------------------------------\n\nTITLE: Configuring Main ArangoDB V8 Library in CMake\nDESCRIPTION: Defines the main arango_v8 static library with V8 integration source files and dependencies. Includes configuration for linking with various ArangoDB components, Boost, Abseil, and other external libraries. Also sets up include directories for OpenSSL and ICU64.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/lib/V8/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(arango_v8 STATIC\n  V8PlatformFeature.cpp\n  V8SecurityFeature.cpp\n  JavaScriptSecurityContext.cpp\n  JSLoader.cpp\n  V8LineEditor.cpp\n  v8-buffer.cpp\n  v8-conv.cpp\n  v8-globals.cpp\n  v8-shell.cpp\n  v8-utils.cpp\n  v8-vpack.cpp\n  v8-environment.cpp)\ntarget_link_libraries(arango_v8\n  arango_assertions\n  arango_static_strings\n  arango_futures\n  arango_basic_errors\n  arango_basic_utils\n  arango_basic_features\n  arango_basic_logger\n  arango_inspection\n  boost_boost\n  boost_system\n  absl::flat_hash_set\n  absl::synchronization\n  arango_async\n  fmt::fmt\n  v8_interface\n  velocypack\n  immer\n)\ntarget_include_directories(arango_v8\n  PRIVATE\n  ${CMAKE_CURRENT_SOURCE_DIR}\n  ${CMAKE_CURRENT_BINARY_DIR}\n  SYSTEM PUBLIC\n  ${OPENSSL_INCLUDE_DIR}\n  ${ICU64_INCLUDE_DIR})\n```\n\n----------------------------------------\n\nTITLE: Setting Up Memory Profiling with Jemalloc\nDESCRIPTION: Instructions for configuring and using jemalloc heap profiling with ArangoDB on Linux. Includes cmake build options, environment variables, and commands for analyzing heap dumps to identify memory leaks or excessive memory usage.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/CONTRIBUTING.md#2025-04-22_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\n-DUSE_JEMALLOC_PROF\n```\n\nLANGUAGE: bash\nCODE:\n```\nexport MALLOC_CONF=\"prof:true\"\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:8529/_admin/status?memory=true\" > heap.dump\n```\n\nLANGUAGE: bash\nCODE:\n```\njeprof build/bin/arangod heap.dump\n```\n\nLANGUAGE: bash\nCODE:\n```\njeprof build/bin/arangod --base=heap.dump heap.dump2\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Boost HOF Eval Function in C++\nDESCRIPTION: Demonstrates how to use the 'eval' function to evaluate a lambda expression that returns a value. This example is included in the documentation section of the file.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/eval.hpp.txt#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/hof.hpp>\n#include <cassert>\n\nint main() {\n    assert(boost::hof::eval([]{ return 3; }) == 3);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing the parameters Class Template in Boost Parameter Library C++\nDESCRIPTION: Defines the parameters class template that assembles arguments for forwarding functions into an ArgumentPack. Includes a match metafunction for overload resolution and function call operator for argument processing.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <typename ...PSpec>\nstruct parameters\n{\n    template <typename ...Args>\n    struct |match|\n    {\n        typedef … type;\n    };\n\n    template <typename ...Args>\n    |ArgumentPack|_ |function call operator|\\(Args&&... args) const;\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing and Manipulating Heterogeneous Sequences with Boost.Hana\nDESCRIPTION: This snippet initializes heterogeneous sequences using Boost.Hana and demonstrates how to transform and reverse these sequences. It also showcases compile-time properties of these sequences, such as length. The snippet requires the Boost.Hana library headers.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hana/README.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n#include <boost/hana.hpp>\n#include <cassert>\n#include <string>\nnamespace hana = boost::hana;\nusing namespace hana::literals;\n\nstruct Fish { std::string name; };\nstruct Cat  { std::string name; };\nstruct Dog  { std::string name; };\n\nint main() {\n  // Sequences capable of holding heterogeneous objects, and algorithms\n  // to manipulate them.\n  auto animals = hana::make_tuple(Fish{\"Nemo\"}, Cat{\"Garfield\"}, Dog{\"Snoopy\"});\n  auto names = hana::transform(animals, [](auto a) {\n    return a.name;\n  });\n  assert(hana::reverse(names) == hana::make_tuple(\"Snoopy\", \"Garfield\", \"Nemo\"));\n\n  // No compile-time information is lost: even if `animals` can't be a\n  // constant expression because it contains strings, its length is constexpr.\n  static_assert(hana::length(animals) == 3u, \"\");\n\n  // Computations on types can be performed with the same syntax as that of\n  // normal C++. Believe it or not, everything is done at compile-time.\n  auto animal_types = hana::make_tuple(hana::type_c<Fish*>, hana::type_c<Cat&>, hana::type_c<Dog*>);\n  auto animal_ptrs = hana::filter(animal_types, [](auto a) {\n    return hana::traits::is_pointer(a);\n  });\n  static_assert(animal_ptrs == hana::make_tuple(hana::type_c<Fish*>, hana::type_c<Dog*>), \"\");\n\n  // And many other goodies to make your life easier, including:\n  // 1. Access to elements in a tuple with a sane syntax.\n  static_assert(animal_ptrs[0_c] == hana::type_c<Fish*>, \"\");\n  static_assert(animal_ptrs[1_c] == hana::type_c<Dog*>, \"\");\n\n  // 2. Unroll loops at compile-time without hassle.\n  std::string s;\n  hana::int_c<10>.times([&]{ s += \"x\"; });\n  // equivalent to s += \"x\"; s += \"x\"; ... s += \"x\";\n\n  // 3. Easily check whether an expression is valid.\n  //    This is usually achieved with complex SFINAE-based tricks.\n  auto has_name = hana::is_valid([](auto&& x) -> decltype((void)x.name) { });\n  static_assert(has_name(animals[0_c]), \"\");\n  static_assert(!has_name(1), \"\");\n}\n```\n\n----------------------------------------\n\nTITLE: Crash Handler Log Output Example\nDESCRIPTION: Sample output from ArangoDB's built-in crash handler showing how crash information is logged, including signal type, memory addresses, and backtrace of the call stack. This is useful for diagnosing server crashes.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/CONTRIBUTING.md#2025-04-22_snippet_18\n\nLANGUAGE: plaintext\nCODE:\n```\n2020-05-26T23:26:10Z [16657] FATAL [a7902] {crash} ArangoDB 3.7.1-devel enterprise [linux], thread 22 [Console] caught unexpected signal 11 (SIGSEGV) accessing address 0x0000000000000000: signal handler invoked\n2020-05-26T23:26:10Z [16657] INFO [308c3] {crash} frame 1 [0x00007f9124e93ece]: _ZN12_GLOBAL__N_112crashHandlerEiP9siginfo_tPv (+0x000000000000002e)\n2020-05-26T23:26:10Z [16657] INFO [308c3] {crash} frame 2 [0x00007f912687bfb2]: sigprocmask (+0x0000000000000021)\n2020-05-26T23:26:10Z [16657] INFO [308c3] {crash} frame 3 [0x00007f9123e08024]: _ZN8arangodb3aql10Expression23executeSimpleExpressionEPKNS0_7AstNodeEPNS_11transaction7MethodsERbb (+0x00000000000001c4)\n2020-05-26T23:26:10Z [16657] INFO [308c3] {crash} frame 4 [0x00007f9123e08314]: _ZN8arangodb3aql10Expression7executeEPNS0_17ExpressionContextERb (+0x0000000000000064)\n2020-05-26T23:26:10Z [16657] INFO [308c3] {crash} frame 5 [0x00007f9123feaab2]: _ZN8arangodb3aql19CalculationExecutorILNS0_15CalculationTypeE0EE12doEvaluationERNS0_15InputAqlItemRowERNS0_16OutputAqlItemRowE (+0x0000000000000062)\n2020-05-26T23:26:10Z [16657] INFO [308c3] {crash} frame 6 [0x00007f9123feae85]: _ZN8arangodb3aql19CalculationExecutorILNS0_15CalculationTypeE0EE11produceRowsERNS0_22AqlItemBlockInputRangeERNS0_16OutputAqlItemRowE (+0x00000000000000f5)\n...\n2020-05-26T23:26:10Z [16657] INFO [308c3] {crash} frame 31 [0x000018820ffc6d91]: *no symbol name available for this frame\n2020-05-26T23:26:10Z [16657] INFO [ded81] {crash} available physical memory: 41721995264, rss usage: 294256640, vsz usage: 1217839104, threads: 46\nSegmentation fault (core dumped)\n```\n\n----------------------------------------\n\nTITLE: C++ Compiler Flag Testing Function\nDESCRIPTION: Function that tests if specific C++ compiler flags are supported and adds them to a variable if they are. Similar to the C version but for C++ compiler flags.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/CMakeLists.txt#2025-04-22_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(add_cxx_flags_if_supported var)\n  foreach(flag ${ARGN})\n    set(flag_var_name \"CXX_COMPILER_SUPPORTS_${flag}\")\n    check_cxx_compiler_flag(${flag} \"${flag_var_name}\")\n    set(is_supported ${${flag_var_name}})\n    if(is_supported)\n      set(${var} \"${${var}} ${flag}\")\n    endif()\n  endforeach()\n  set(${var} \"${${var}}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Declaring Expected Return Type for Error Handling in C++\nDESCRIPTION: This snippet demonstrates how to declare a function that may return either a valid result or an error code using the expected<T, E> type. It shows the basic structure for error handling in C++.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/leaf/doc/whitepaper.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nexpected<int, error_code> compute_value();\n```\n\n----------------------------------------\n\nTITLE: Creating and Filling a 1D Histogram in C++\nDESCRIPTION: Demonstrates creating a 1D histogram with 4 regular bins from 0 to 2, filling it with values, and iterating over bin contents\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/histogram/README.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n#include <boost/histogram.hpp>\n#include <boost/format.hpp>\n#include <iostream>\n\nint main() {\n    using namespace boost::histogram;\n\n    // make 1d histogram with 4 regular bins from 0 to 2\n    auto h = make_histogram( axis::regular<>(4, 0.0, 2.0) );\n\n    // push some values into the histogram\n    for (auto&& value : { 0.4, 1.1, 0.3, 1.7, 10. })\n      h(value);\n\n    // iterate over bins\n    for (auto&& x : indexed(h)) {\n      std::cout << boost::format(\"bin %i [ %.1f, %.1f ): %i\\n\")\n        % x.index() % x.bin().lower() % x.bin().upper() % *x;\n    }\n\n    std::cout << std::flush;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Optional Type for Integer Values in C++\nDESCRIPTION: Demonstrates how to use the optional type to handle potentially nullable integer values. Shows declaration of a function returning an optional int and how to check and access the contained value using if-statement with initialization.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/optional/README.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\noptional<int> readInt(); // this function may return either an int or a not-an-int\n\nif (optional<int> oi = readInt()) // did I get a real int\n  cout << \"my int is: \" << *oi;   // use my int\nelse\n  cout << \"I have no int\";\n```\n\n----------------------------------------\n\nTITLE: Defining Named Parameter Dijkstra's Shortest Paths Function\nDESCRIPTION: This C++ template function definition for Dijkstra's algorithm accepts named parameters for improved flexibility in distributed graph implementations. It allows the user to specify graph type, start vertex, and other parameters in a more readable format.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/dijkstra_shortest_paths.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n// named parameter version\n  template <typename Graph, typename P, typename T, typename R>\n  void\n  dijkstra_shortest_paths(Graph& g,\n    typename graph_traits<Graph>::vertex_descriptor s,\n    const bgl_named_params<P, T, R>& params);\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Utils Library for ArangoDB\nDESCRIPTION: Defines the basic utilities library containing core functionality like file handling, string manipulation, threading, and various system utilities. Links against multiple dependencies including VelocyPack and Snappy.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/lib/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(arango_basic_utils STATIC\n        Basics/AttributeNameParser.cpp\n        Basics/CpuUsageSnapshot.cpp\n        Basics/DebugRaceController.cpp\n        # ... [truncated for brevity]\n        Zip/ioapi.cpp\n        Zip/unzip.cpp\n        Zip/zip.cpp\n)\ntarget_link_libraries(arango_basic_utils\n  PUBLIC velocypack\n         arango_inspection\n         arango_futures\n         arango_basic_errors\n         absl::flat_hash_set\n         fuerte\n         s2\n         linenoise-ng\n         zlib_interface\n         snappy\n)\n```\n\n----------------------------------------\n\nTITLE: Using Image Views for Efficient Manipulation in C++\nDESCRIPTION: This code snippet demonstrates how to use GIL's image views to read, transform, and write an image efficiently without copying pixel data at each step. It showcases chaining of operations on image views.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/examples.rst#2025-04-22_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\n  jpeg_read_image(\"monkey.jpg\", img);\n  step1=view(img);\n  step2=subimage_view(step1, 200,300, 150,150);\n  step3=color_converted_view<rgb8_view_t,gray8_pixel_t>(step2);\n  step4=rotated180_view(step3);\n  step5=subsampled_view(step4, 2,1);\n  jpeg_write_view(\"monkey_transform.jpg\", step5);\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Build Type Flags\nDESCRIPTION: Configures C and C++ compiler flags for different build types including debug, release, and minimal size release builds.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/CMakeLists.txt#2025-04-22_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_C_FLAGS \"\" CACHE INTERNAL \"default C compiler flags\")\nset(CMAKE_C_FLAGS_DEBUG \"${DEBUGINFO_FLAGS} -O0 -D_DEBUG=1\" CACHE INTERNAL \"C debug flags\")\nset(CMAKE_C_FLAGS_MINSIZEREL \"${NODEBUGINFO_FLAGS} -Os\" CACHE INTERNAL \"C minimal size flags\")\nset(CMAKE_C_FLAGS_RELEASE \"${NODEBUGINFO_FLAGS} -O3 -fomit-frame-pointer\" CACHE INTERNAL \"C release flags\")\n```\n\n----------------------------------------\n\nTITLE: InitializingUDPServerClassBoostASIOC++\nDESCRIPTION: Defines the udp_server class constructor to initialize a UDP socket on port 13 and to listen for requests using Boost ASIO. Asynchronously handles incoming data and calls handle_receive upon data reception.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/asio/example/cpp03/tutorial/daytime_dox.txt#2025-04-22_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\nclass udp_server {\npublic:\n    udp_server() {\n        // Initialize socket listening on UDP port 13\n    }\n    // Other class methods\nprivate:\n    // Private members\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing ArangoDB Startup with JavaScript RC File\nDESCRIPTION: A sample JavaScript configuration for ~/.arangod.rc that helps when working with the arangod rescue console. It imports essential modules and defines helper functions for database access and timing operations.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/CONTRIBUTING.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\ninternal = require(\"internal\");\nfs = require(\"fs\");\ndb = internal.db;\ntime = internal.time;\ntimed = function (cb) {\n  let s = time();\n  cb();\n  return time() - s;\n};\nprint = internal.print;\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Timer with Callback in C++\nDESCRIPTION: Shows how to use asynchronous timer functionality with a callback function. Defines a print callback that executes when the timer expires.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/asio/example/cpp03/tutorial/timer_dox.txt#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nboost::asio::io_context io;\nboost::asio::steady_timer t(io, boost::asio::chrono::seconds(5));\nt.async_wait(&print);\nio.run();\n```\n\n----------------------------------------\n\nTITLE: Handling Single and Multiple Result Parameters\nDESCRIPTION: This snippet illustrates the equivalent code generated by BOOST_OUTCOME_TRY for one and multiple input parameters. It highlights how the result is checked and how to extract the value for successful cases.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/tutorial/essential/result/try.md#2025-04-22_snippet_1\n\nLANGUAGE: c++\nCODE:\n```\nauto __result = BigInt::fromString(text);\nif (!__result)\n  return __result.as_failure();\n```\n\nLANGUAGE: c++\nCODE:\n```\nauto __result = BigInt::fromString(text);\nif (!__result)\n  return __result.as_failure();\nauto i = __result.value();\n```\n\n----------------------------------------\n\nTITLE: Building React Application for Production\nDESCRIPTION: Creates an optimized production build in the build folder with minified bundles and hashed filenames.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/js/apps/system/_admin/aardvark/APP/react/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn run build\n```\n\n----------------------------------------\n\nTITLE: Generic Grayscale Image Histogram Calculation with Boost.Lambda (GIL)\nDESCRIPTION: This template function calculates the histogram of a grayscale image using the Boost GIL and Boost.Lambda library (or C++11 lambda). It utilizes `for_each_pixel` and lambda expressions to iterate through the pixels and increment the corresponding histogram bin.  It requires the `boost::lambda` namespace to be in scope.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/tutorial/histogram.rst#2025-04-22_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nusing boost::lambda;\n\ntemplate <typename GrayView, typename R>\nvoid grayimage_histogram(GrayView& img, R& hist)\n{\n    for_each_pixel(img, ++var(hist)[_1]);\n}\n```\n\n----------------------------------------\n\nTITLE: Value Category Evaluation Helper in C++\nDESCRIPTION: Defines an enumeration and utility struct with overloaded functions to detect and report the value category of passed parameters. Used for testing the parameter passing mechanism.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_19\n\nLANGUAGE: C++\nCODE:\n```\nenum invoked\n{\n    passed_by_lvalue_reference_to_const\n  , passed_by_lvalue_reference\n  , passed_by_rvalue_reference_to_const\n  , passed_by_rvalue_reference\n};\n\nstruct U\n{\n    template <std::size_t N>\n    static invoked evaluate_category(|std_bitset|_\\<N + 1> const&)\n    {\n        return passed_by_lvalue_reference_to_const;\n    }\n\n    template <std::size_t N>\n    static invoked evaluate_category(|std_bitset|_\\<N + 1>&)\n    {\n        return passed_by_lvalue_reference;\n    }\n\n    template <std::size_t N>\n    static invoked evaluate_category(|std_bitset|_\\<N + 1> const&&)\n    {\n        return passed_by_rvalue_reference_to_const;\n    }\n\n    template <std::size_t N>\n    static invoked evaluate_category(|std_bitset|_\\<N + 1>&&)\n    {\n        return passed_by_rvalue_reference;\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Defining ArangoDB AQL Target Sources\nDESCRIPTION: This snippet defines the source files that comprise the `arango_aql` target, marking them as PRIVATE. This means these sources are only used within the `arango_aql` target itself and are not exposed to other targets.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/Aql/Optimizer/Rule/EnumeratePathsFilter/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(arango_aql PRIVATE\n    EnumeratePathsFilterMatcher.cpp\n    EnumeratePathsFilter.cpp)\n```\n\n----------------------------------------\n\nTITLE: Using Sort Algorithm with Pointer Containers in C++\nDESCRIPTION: Shows different ways to sort elements in a pointer container. The examples demonstrate sorting the entire container with default and custom comparators, as well as sorting a specific range of elements.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/tutorial.rst#2025-04-22_snippet_14\n\nLANGUAGE: cpp\nCODE:\n```\nboost::ptr_vector<animal> zoo;\n...\nzoo.sort();                               // assume 'bool operator<( const animal&, const animal& )'\nzoo.sort( std::less<animal>() );          // the same, notice no '*' is present\nzoo.sort( zoo.begin(), zoo.begin() + 5 ); // sort selected range\n```\n\n----------------------------------------\n\nTITLE: Packed Channel Reference Definition\nDESCRIPTION: Defines the `packed_channel_reference` class template in C++. This class represents a reference to a channel defined over a specified number of bits. It takes template parameters for the first bit, the number of bits, and a boolean indicating mutability. It models the ChannelConcept.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/channel.rst#2025-04-22_snippet_8\n\nLANGUAGE: cpp\nCODE:\n```\n  // Reference to a channel defined over NumBits bits. Models ChannelConcept\n  template <int FirstBit,\n          int NumBits,       // Defines the sequence of bits in the data value that contain the channel\n          bool Mutable>      // true if the reference is mutable\n  class packed_channel_reference;\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using llhttp Parser in C\nDESCRIPTION: This snippet demonstrates how to initialize the llhttp parser, set up user callbacks, and parse an HTTP request. It includes error handling and showcases the basic API usage.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/llhttp/README.md#2025-04-22_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#include \"llhttp.h\"\n\nllhttp_t parser;\nllhttp_settings_t settings;\n\n/* Initialize user callbacks and settings */\nllhttp_settings_init(&settings);\n\n/* Set user callback */\nsettings.on_message_complete = handle_on_message_complete;\n\n/* Initialize the parser in HTTP_BOTH mode, meaning that it will select between\n * HTTP_REQUEST and HTTP_RESPONSE parsing automatically while reading the first\n * input.\n */\nllhttp_init(&parser, HTTP_BOTH, &settings);\n\n/* Parse request! */\nconst char* request = \"GET / HTTP/1.1\\r\\n\\r\\n\";\nint request_len = strlen(request);\n\nenum llhttp_errno err = llhttp_execute(&parser, request, request_len);\nif (err == HPE_OK) {\n  /* Successfully parsed! */\n} else {\n  fprintf(stderr, \"Parse error: %s %s\\n\", llhttp_errno_name(err),\n          parser.reason);\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Test Information with jq\nDESCRIPTION: Commands using jq to extract specific information from test result JSON files, such as socket statistics and server PIDs.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/CONTRIBUTING.md#2025-04-22_snippet_40\n\nLANGUAGE: bash\nCODE:\n```\n# Revalidating one testcase using jq\njq '.shell_client.\"enterprise/tests/js/common/shell/smart-graph-enterprise-cluster.js\"' < \\\n  out/UNITTEST_RESULT.json |grep sockstat_TCP_tw\n\n# Getting the PIDs of the server in the testrun using jq\njq '.shell_client.\"enterprise/tests/js/common/shell/smart-graph-enterprise-cluster.js\"' < \\\n  out/UNITTEST_RESULT.json |grep '\"[0-9]*_[agent|dbserver|coordinator]'\n```\n\n----------------------------------------\n\nTITLE: Function Adaptor Template Declaration\nDESCRIPTION: Template declaration for function adaptors that take one or more functions and return an enhanced function. Shows both functional and class form usage.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/src/definitions.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate<class... Fs>\nFunctionAdaptor_adaptor<Fs...> FunctionAdaptor(Fs...);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Function with Named Parameters using Boost.Parameter in C++\nDESCRIPTION: Demonstrates the use of BOOST_PARAMETER_NO_SPEC_FUNCTION macro to create a function that accepts named parameters and evaluates their value categories.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_72\n\nLANGUAGE: cpp\nCODE:\n```\nBOOST_PARAMETER_NO_SPEC_FUNCTION((bool), evaluate)\n{\n    BOOST_TEST_EQ(\n        passed_by_lvalue_reference_to_const\n      , U::evaluate_category<0>(args[_lrc])\n    );\n    BOOST_TEST_EQ(\n        passed_by_lvalue_reference\n      , U::evaluate_category<1>(args[_lr])\n    );\n    BOOST_TEST_EQ(\n        passed_by_rvalue_reference_to_const\n      , U::evaluate_category<2>(\n            args[_rrc | rvalue_const_bitset<2>()]\n        )\n    );\n    BOOST_TEST_EQ(\n        passed_by_rvalue_reference\n      , U::evaluate_category<3>(args[_rr | rvalue_bitset<3>()])\n    );\n\n    return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Build Metadata Files\nDESCRIPTION: Configures files to capture build metadata like version information, build date, and other system-specific details\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nconfigure_file(\n  \"${CMAKE_CURRENT_SOURCE_DIR}/lib/Basics/build.h.in\"\n  \"${CMAKE_CURRENT_BINARY_DIR}/lib/Basics/build.h\"\n  NEWLINE_STYLE UNIX\n)\n\nif(ARANGODB_BUILD_DATE STREQUAL \"\" OR ARANGODB_BUILD_DATE STREQUAL \"OFF\")\n  string(TIMESTAMP ARANGODB_BUILD_DATE \"%Y-%m-%d %H:%M:%S\")\n  set(GENERATE_BUILD_DATE ON)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Boost Outcome OUTCOME_TRY Macro Usage in C++\nDESCRIPTION: Demonstrates the use of the OUTCOME_TRY macro from Boost Outcome for generic error handling in C++. This macro simplifies error checking and propagation in error-neutral functions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/leaf/doc/whitepaper.md#2025-04-22_snippet_18\n\nLANGUAGE: c++\nCODE:\n```\nOUTCOME_TRY(i, BigInt::fromString(text));\n```\n\n----------------------------------------\n\nTITLE: Exception Handling Example\nDESCRIPTION: C++ try-catch block demonstrating exception handling pattern\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/leaf/doc/whitepaper.md#2025-04-22_snippet_12\n\nLANGUAGE: c++\nCODE:\n```\ntry\n{\n  f();\n}\ncatch(my_error & e)\n{\n  ....\n}\n```\n\n----------------------------------------\n\nTITLE: Linking Agency Library Dependencies\nDESCRIPTION: Specifies library dependencies for the arango_agency static library, including core ArangoDB libraries and specific subsystem libraries\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/Agency/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(arango_agency\n  arango\n  arango_health\n  arango_iresearch\n  arango_metrics)\n```\n\n----------------------------------------\n\nTITLE: Configuring ArangoDB Installation Paths and Packages in CMake\nDESCRIPTION: This snippet sets up installation paths, documentation, frontend (if enabled), and packaging (if not skipped). It includes necessary subdirectories and CMake modules for proper installation and packaging of ArangoDB.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/CMakeLists.txt#2025-04-22_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\n################################################################################\n## PATHS, installation, packages, frontend\n################################################################################\n\nadd_subdirectory(Documentation)\ninclude(ArangoDBInstall)\nif(USE_FRONTEND)\n  include(frontend/aardvark)\nendif()\nif(NOT(SKIP_PACKAGING))\n  include(packages/packages)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories for Modules\nDESCRIPTION: These lines add several subdirectories to the build process. Each subdirectory represents a different module or component of the ArangoDB project, such as Fuerte, Assertions, and Replication2. The `add_subdirectory()` command tells CMake to process the CMakeLists.txt file in each of these subdirectories.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(Fuerte)\n\nadd_subdirectory(Assertions)\nadd_subdirectory(CrashHandler)\nadd_subdirectory(Errors)\n\nadd_subdirectory(Zkd)\nadd_subdirectory(Graph)\nadd_subdirectory(Replication2)\nadd_subdirectory(Futures)\nadd_subdirectory(BuildId)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake HTTP Server Build with Boost Beast\nDESCRIPTION: Configures a CMake build target for a synchronous HTTP server example using Boost Beast. Groups source files, defines the executable target 'http-server-sync', links required libraries (Asio, SSL, Beast), and organizes the project structure.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/beast/example/http/server/sync/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nGroupSources(include/boost/beast beast)\nGroupSources(example/http/server/sync \"/\")\n\nadd_executable (http-server-sync\n    ${BOOST_BEAST_FILES}\n    Jamfile\n    http_server_sync.cpp\n)\n\ntarget_link_libraries(http-server-sync\n    lib-asio\n    lib-asio-ssl\n    lib-beast)\n\nset_property(TARGET http-server-sync PROPERTY FOLDER \"example-http-server\")\n```\n\n----------------------------------------\n\nTITLE: STL-Style Pixel Iteration and Transformation Algorithms in Boost.GIL\nDESCRIPTION: Declarations of STL-inspired algorithms for pixel iteration and transformation. Includes for_each_pixel, generate_pixels, transform_pixels, and variants that work with pixel positions rather than just pixel values.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/image_view.rst#2025-04-22_snippet_14\n\nLANGUAGE: cpp\nCODE:\n```\n// Equivalent of std::for_each\n// where ImageViewConcept<V>, boost::UnaryFunctionConcept<F>\n// where PixelsCompatibleConcept<V::reference, F::argument_type>\ntemplate <typename V, typename F>\nF for_each_pixel(const V& view, F fun);\ntemplate <typename V, typename F>\nF for_each_pixel_position(const V& view, F fun);\n\n// Equivalent of std::generate\n// where MutableImageViewConcept<V>, boost::UnaryFunctionConcept<F>\n// where PixelsCompatibleConcept<V::reference, F::argument_type>\ntemplate <typename V, typename F>\nvoid generate_pixels(const V& dst, F fun);\n\n// Equivalent of std::transform with one source\n// where ImageViewConcept<V1>, MutableImageViewConcept<V2>\n// where boost::UnaryFunctionConcept<F>\n// where PixelsCompatibleConcept<V1::const_reference, F::argument_type>\n// where PixelsCompatibleConcept<F::result_type, V2::reference>\ntemplate <typename V1, typename V2, typename F>\nF transform_pixels(const V1& src, const V2& dst, F fun);\ntemplate <typename V1, typename V2, typename F>\nF transform_pixel_positions(const V1& src, const V2& dst, F fun);\n\n// Equivalent of std::transform with two sources\n// where ImageViewConcept<V1>, ImageViewConcept<V2>, MutableImageViewConcept<V3>\n// where boost::BinaryFunctionConcept<F>\n// where PixelsCompatibleConcept<V1::const_reference, F::first_argument_type>\n// where PixelsCompatibleConcept<V2::const_reference, F::second_argument_type>\n// where PixelsCompatibleConcept<F::result_type, V3::reference>\ntemplate <typename V1, typename V2, typename V3, typename F>\nF transform_pixels(const V1& src1, const V2& src2, const V3& dst, F fun);\ntemplate <typename V1, typename V2, typename V3, typename F>\nF transform_pixel_positions(const V1& src1, const V2& src2, const V3& dst, F fun);\n```\n\n----------------------------------------\n\nTITLE: Downloading ArangoDB Source Code with Git\nDESCRIPTION: This snippet shows how to download the ArangoDB source code using Git, including submodules. It provides options for cloning the repository depth to speed up the process when not planning to commit changes.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone --recurse-submodules --jobs 8 https://github.com/arangodb/arangodb\n```\n\nLANGUAGE: shell\nCODE:\n```\ngit clone --depth 1 --recurse-submodules --shallow-submodules --jobs 8 --branch v3.12.0 https://github.com/arangodb/arangodb\n```\n\nLANGUAGE: shell\nCODE:\n```\ngit clone --config core.autocrlf=input ...\n```\n\n----------------------------------------\n\nTITLE: General Compose Adaptor Implementation in C++\nDESCRIPTION: Defines the main compose_adaptor class template for multiple functions. This handles composition of more than two functions by recursively building a composition chain. It includes constructors for different argument patterns.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/compose.hpp.txt#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<class F, class... Fs>\nstruct compose_adaptor \n: detail::compose_kernel<detail::callable_base<F>, BOOST_HOF_JOIN(compose_adaptor, detail::callable_base<Fs>...)>\n{\n    typedef compose_adaptor fit_rewritable_tag;\n    typedef BOOST_HOF_JOIN(compose_adaptor, detail::callable_base<Fs>...) tail;\n    typedef detail::compose_kernel<detail::callable_base<F>, tail> base_type;\n\n    BOOST_HOF_INHERIT_DEFAULT(compose_adaptor, base_type)\n\n    template<class X, class... Xs, \n        BOOST_HOF_ENABLE_IF_CONSTRUCTIBLE(detail::callable_base<F>, X), \n        BOOST_HOF_ENABLE_IF_CONSTRUCTIBLE(tail, Xs...)\n    >\n    constexpr compose_adaptor(X&& f1, Xs&& ... fs)\n    BOOST_HOF_NOEXCEPT(BOOST_HOF_IS_NOTHROW_CONSTRUCTIBLE(base_type, X&&, tail) && BOOST_HOF_IS_NOTHROW_CONSTRUCTIBLE(tail, Xs&&...))\n    : base_type(BOOST_HOF_FORWARD(X)(f1), tail(BOOST_HOF_FORWARD(Xs)(fs)...))\n    {}\n\n    template<class X,\n        BOOST_HOF_ENABLE_IF_CONSTRUCTIBLE(detail::callable_base<F>, X)\n    >\n    constexpr compose_adaptor(X&& f1) \n    BOOST_HOF_NOEXCEPT_CONSTRUCTIBLE(base_type, X&&)\n    : base_type(BOOST_HOF_FORWARD(X)(f1))\n    {}\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom HTTP Library Error Handling in C++\nDESCRIPTION: Demonstrates creation of a custom exception type that wraps httplib::failure and provides enhanced error reporting through string conversion of error codes. Includes error mapping functionality and exception type erasure.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/tutorial/advanced/interop/app-map-httplib1.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nnamespace app {\n  std::string to_string(httplib::error e) noexcept\n  {\n    switch(e)\n    {\n      case httplib::error::Success: return \"Success\";\n      case httplib::error::Unknown: return \"Unknown\";\n      case httplib::error::Connection: return \"Connection\";\n      case httplib::error::BindIPAddress: return \"BindIPAddress\";\n      case httplib::error::Read: return \"Read\";\n      case httplib::error::Write: return \"Write\";\n      case httplib::error::ExceedRedirectCount: return \"ExceedRedirectCount\";\n      case httplib::error::Canceled: return \"Canceled\";\n      case httplib::error::SSLConnection: return \"SSLConnection\";\n      case httplib::error::SSLLoadingCerts: return \"SSLLoadingCerts\";\n      case httplib::error::SSLServerVerification: return \"SSLServerVerification\";\n      case httplib::error::UnsupportedMultipartBoundaryChars: return \"UnsupportedMultipartBoundaryChars\";\n      case httplib::error::Compression: return \"Compression\";\n    }\n    return \"<unknown>\";\n  }\n  \n  std::string make_httplib_exception(const httplib::failure &f) noexcept\n  {\n    std::string ret(\"HTTP library failure: \");\n    ret.append(to_string(f.code()));\n    return ret;\n  }\n  \n  class httplib_error : public std::runtime_error\n  {\n    httplib::failure _failure;\n    \n  public:\n    explicit httplib_error(httplib::failure f)\n      : std::runtime_error(make_httplib_exception(f))\n      , _failure(std::move(f))\n    {\n    }\n    \n    const httplib::failure &failure() const noexcept { return _failure; }\n  };\n  \n  std::exception_ptr convert_httplib_failure(const httplib::failure &f)\n  {\n    return std::make_exception_ptr(app::httplib_error(f));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining arango_v8server Static Library in CMake\nDESCRIPTION: Creates a static library named arango_v8server with various source files that implement V8 JavaScript engine functionality for ArangoDB. The source files include implementations for Foxx, V8 execution, collections, queries, replication, and other server components.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/V8Server/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(arango_v8server STATIC\n  FoxxFeature.cpp\n  GlobalExecutorMethods.cpp\n  V8Executor.cpp\n  V8DealerFeature.cpp\n  v8-actions.cpp\n  v8-analyzers.cpp\n  v8-collection-util.cpp\n  v8-collection.cpp\n  v8-dispatcher.cpp\n  v8-general-graph.cpp\n  v8-query.cpp\n  v8-replicated-logs.cpp\n  v8-replication.cpp\n  v8-statistics.cpp\n  v8-ttl.cpp\n  v8-user-functions.cpp\n  v8-user-structures.cpp\n  v8-users.cpp\n  v8-util.cpp\n  v8-views.cpp\n  v8-vocbase.cpp\n  v8-voccursor.cpp\n  v8-vocindex.cpp\n  ${PROJECT_SOURCE_DIR}/arangod/Cluster/v8-cluster.cpp\n  ${PROJECT_SOURCE_DIR}/arangod/Transaction/V8Context.cpp)\n```\n\n----------------------------------------\n\nTITLE: Computing Grayscale Image Histogram in C++\nDESCRIPTION: This snippet outlines a method for calculating the histogram of a grayscale image by iterating through pixel values. It provides both a straightforward and a compact version of the implementation using Boost's lambda functionalities.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/examples.rst.txt#2025-04-22_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <typename GrayView, typename R>\nvoid grayimage_histogram(const GrayView& img, R& hist)\n{\n    for (typename GrayView::iterator it=img.begin(); it!=img.end(); ++it)\n        ++hist[*it];\n}\n\n// Compact version using boost::lambda\ntemplate <typename GrayView, typename R>\nvoid grayimage_histogram(const GrayView& v, R& hist)\n{\n    for_each_pixel(v, ++var(hist)[_1]);\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Definition for Google Tests\nDESCRIPTION: This code block conditionally defines preprocessor macros based on whether Google Tests are enabled. If `USE_GOOGLE_TESTS` is true, `-DTEST_VIRTUAL=virtual` is added, otherwise `-DTEST_VIRTUAL=` is added. This controls the behavior of virtual functions during testing.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif (USE_GOOGLE_TESTS)\n  add_definitions(\"-DTEST_VIRTUAL=virtual\")\nelse()\n  add_definitions(\"-DTEST_VIRTUAL=\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Fruchterman Reingold Layout Function Template Definition\nDESCRIPTION: This code defines a template function for the Fruchterman Reingold force-directed layout algorithm, designed to work with distributed graphs.  It takes graph, position map, origin, extent, attractive and repulsive force functions, force pairs, cooling strategy, and a displacement map as parameters to compute the layout.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/fruchterman_reingold.rst#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nnamespace graph { namespace distributed {\n\n      template<typename Graph, typename PositionMap, \n               typename AttractiveForce, typename RepulsiveForce,\n               typename ForcePairs, typename Cooling, typename DisplacementMap>\n      void\n      fruchterman_reingold_force_directed_layout\n      (const Graph&    g,\n       PositionMap     position,\n       typename property_traits<PositionMap>::value_type const& origin,\n       typename property_traits<PositionMap>::value_type const& extent,\n       AttractiveForce attractive_force,\n       RepulsiveForce  repulsive_force,\n       ForcePairs      force_pairs,\n       Cooling         cool,\n       DisplacementMap displacement)\n\n      template<typename Graph, typename PositionMap, \n               typename AttractiveForce, typename RepulsiveForce,\n               typename ForcePairs, typename Cooling, typename DisplacementMap>\n      void\n      fruchterman_reingold_force_directed_layout\n      (const Graph&    g,\n       PositionMap     position,\n       typename property_traits<PositionMap>::value_type const& origin,\n       typename property_traits<PositionMap>::value_type const& extent,\n       AttractiveForce attractive_force,\n       RepulsiveForce  repulsive_force,\n       ForcePairs      force_pairs,\n       Cooling         cool,\n       DisplacementMap displacement,\n       simple_tiling   tiling)\n    } }\n```\n\n----------------------------------------\n\nTITLE: Adding ArangoDB Cache Static Library\nDESCRIPTION: This snippet uses CMake's `add_library` command to define a static library named `arango_cache`. It lists all the source files that are part of this library. These source files implement the caching functionality within ArangoDB.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/Cache/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(arango_cache STATIC\n  BucketState.cpp\n  Cache.cpp\n  CacheManagerFeature.cpp\n  CacheManagerFeatureThreads.cpp\n  CacheOptionsFeature.cpp\n  CachedValue.cpp\n  Finding.cpp\n  Manager.cpp\n  ManagerTasks.cpp\n  Metadata.cpp\n  PlainBucket.cpp\n  PlainCache.cpp\n  Rebalancer.cpp\n  Table.cpp\n  TransactionManager.cpp\n  TransactionalBucket.cpp\n  TransactionalCache.cpp)\n```\n\n----------------------------------------\n\nTITLE: Basic Class Exposure with Boost.Python\nDESCRIPTION: A Boost.Python module definition that exposes the World class to Python. The example shows how to define a Python module and expose class methods using a concise chaining syntax.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/doc/article.rst#2025-04-22_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\n#include <boost/python.hpp>\nBOOST_PYTHON_MODULE(hello)\n{\n    class_<World>(\"World\")\n        .def(\"greet\", &World::greet)\n        .def(\"set\", &World::set)\n    ;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing depth_first_search with Named Parameters in C++\nDESCRIPTION: Defines the depth_first_search function template using BOOST_PARAMETER_FUNCTION macro. Specifies required and optional parameters with their default values.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/index.rst#2025-04-22_snippet_7\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/parameter/preprocessor.hpp>\n\nnamespace graphs {\n\n    BOOST_PARAMETER_FUNCTION(\n        (void),                 // 1. parenthesized return type\n        depth_first_search,     // 2. name of the function template\n        tag,                    // 3. namespace of tag types\n        (required (graph, *) )  // 4. one required parameter, and\n        (optional               //    four optional parameters,\n                                //    with defaults\n            (visitor,     *, boost::dfs_visitor<>()) \n            (root_vertex, *, *vertices(graph).first) \n            (index_map,   *, get(boost::vertex_index,graph)) \n            (color_map,   *, \n                default_color_map(num_vertices(graph), index_map)\n            ) \n        )\n    )\n    {\n        // ... body of function goes here...\n        // use graph, visitor, index_map, and color_map\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Forwarding Function\nDESCRIPTION: This code snippet defines a forwarding function `f_fwd` that calls the member function 'f' of class X. This forwarding function is necessary for Boost.Python to correctly handle named parameters when calling 'f' from Python. The operator() overload takes care of passing arguments from Python to the C++ member function.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter_python/doc/index.rst#2025-04-22_snippet_9\n\nLANGUAGE: cpp\nCODE:\n```\n\"    struct f_fwd\n    {\n        template <class A0, class A1>\n        void operator()(boost::type<void>, X& self, A0 const& a0, A1 const& a1)\n        {\n            self.f(a0, a1);\n        }\n    };\"\n```\n\n----------------------------------------\n\nTITLE: Defining Connected Components Parallel Search Function in C++\nDESCRIPTION: The `connected_components_ps()` function computes the connected components of a graph using parallel breadth-first search. It takes a graph and a property map to output component labels, ensuring each vertex's component number is recorded. Dependencies include the Boost Graph Library and relevant graph model requirements.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/connected_components_parallel_search.rst#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nnamespace graph { namespace distributed {\n  template<typename Graph, typename ComponentMap>\n  typename property_traits<ComponentMap>::value_type\n  connected_components_ps(const Graph& g, ComponentMap c)\n} }\n```\n\n----------------------------------------\n\nTITLE: HandlingUDPSocketReceiveAsyncBoostASIOC++\nDESCRIPTION: Uses boost::asio::ip::udp::socket::async_receive_from() to listen for requests in the background. Manages errors if clients send data larger than the buffer. Calls handle_receive with error code and bytes transferred.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/asio/example/cpp03/tutorial/daytime_dox.txt#2025-04-22_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\nvoid handle_receive(const boost::system::error_code &error, std::size_t bytes_transferred) {\n    // Handle client request\n    if (!error) {\n        // Process data\n    }\n    // Set up next receive\n}\n```\n\n----------------------------------------\n\nTITLE: Directory Structure Documentation Using Markdown\nDESCRIPTION: Markdown documentation explaining three variations of a file printing program, each using different error handling approaches: leaf::result<T>, outcome::result<T>, and exception handling.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/leaf/example/print_file/readme.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Print File Example\n\nThis directory has three versions of the same simple program, which reads a\nfile, prints it to standard out and handles errors using LEAF, each using a\ndifferent variation on error handling:\n\n* [print_file_result.cpp](./print_file_result.cpp) reports errors with\n  `leaf::result<T>`, using an error code `enum` for classification of failures.\n\n* [print_file_outcome_result.cpp](./print_file_outcome_result.cpp) is the same\n  as the above, but using `outcome::result<T>`. This demonstrates the ability\n  to transport arbitrary error objects through APIs that do not use\n  `leaf::result<T>`.\n\n* [print_file_eh.cpp](./print_file_eh.cpp) throws on error, using an error code\n  `enum` for classification of failures.\n```\n\n----------------------------------------\n\nTITLE: Partial Function Example in C++\nDESCRIPTION: Demonstrates the usage of partial function application using a sum function example. Shows how partial application allows breaking down function calls into steps.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/partial.hpp.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/hof.hpp>\n#include <cassert>\nusing namespace boost::hof;\n\nstruct sum\n{\n    template<class T, class U>\n    T operator()(T x, U y) const\n    {\n        return x+y;\n    }\n};\n\nint main() {\n    assert(3 == partial(sum())(1)(2));\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a File Opening Function with Status Code Error Handling\nDESCRIPTION: Demonstrates how to implement a file opening function that returns a status_result with either a valid file handle or an appropriate error code. The function shows proper error handling with semantic comparison to standard error codes.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/experimental/outcome.md#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\ninline status_result<int> open_file(const char *path)\n{\n  FILE *f = fopen(path, \"r\");\n  if(f == nullptr)\n  {\n    // Create a file_io_error with this path being invalid\n    return file_io_error(errno, std::system_category());\n  }\n  return fileno(f);  // raw file descriptor\n}\n\nint main()\n{\n  namespace error = std::error_code_literals;\n  // Try to open a file which does not exist\n  status_result<int> m = open_file(__FILE__ \"neverexists\");\n  static_assert(!decltype(m)::has_exception_ptr, \"We know that this result can never contain an exception ptr\");\n  if(!m)\n  {\n    auto &ec = m.error();\n    std::cout << \"Returned error has a code domain of '\" << ec.domain().name()\n              << \"', a message of '\" << ec.message() << \"'\" << std::endl;\n    std::cout << std::endl;\n    std::cout << \"And semantically comparing it to 'errc::no_such_file_or_directory' = \" << (ec == std::errc::no_such_file_or_directory) << std::endl;\n  }\n  return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ArangoDB Async Library Dependencies in CMake\nDESCRIPTION: Creates an interface library for arango_async and configures its include directories and dependent libraries. Sets up the build structure by adding subdirectories for includes and Registry components.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/lib/Async/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(arango_async INTERFACE)\ntarget_include_directories(arango_async\n  INTERFACE\n  include\n)\n\ntarget_link_libraries(arango_async\n  INTERFACE\n  arango_async_registry\n  arango_async_interface\n  arango_basic_utils\n)\n\nadd_subdirectory(include)\nadd_subdirectory(Registry)\n```\n\n----------------------------------------\n\nTITLE: Process Group Operations in C++\nDESCRIPTION: This snippet defines various operations on ProcessGroup objects, including querying process IDs, transmitting messages, synchronizing processes, and performing out-of-band communication.  These operations are essential for parallel communication and synchronization within the Parallel BGL.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/process_group.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\n  // Process query\n  int process_id(const ProcessGroup&);\n  int num_processes(const ProcessGroup&);\n\n  // Message transmission\n  template<typename T>\n    void send(const ProcessGroup& pg, int dest, int tag, const T& value);\n\n  template<typename T>\n    void receive(const ProcessGroup& pg, int source, int tag, T& value);\n\n  optional<std::pair<int, int> > probe(const ProcessGroup& pg);\n\n  // Synchronization\n  void synchronize(const ProcessGroup& pg);\n\n  // Out-of-band communication\n  template<typename T>\n    void send_oob(const ProcessGroup& pg, int dest, int tag, const T& value);\n\n  template<typename T, typename U>\n    void \n    send_oob_with_reply(const ProcessGroup& pg, int dest, int\n                        tag, const T& send_value, U& receive_value);\n\n  template<typename T>\n    void receive_oob(const ProcessGroup& pg, int source, int tag, T& value);\n```\n\n----------------------------------------\n\nTITLE: Then Handler with Try Example\nDESCRIPTION: Demonstrates using the then() method with Try<T> to handle both success and failure cases in the same lambda.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/lib/Futures/README.md#2025-04-22_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\nPromise<int> p;\nFuture<int> f = p.getFuture();\nauto f2 = std::move(f).then([&](Try<int>&& t){\n  if (t.hasException()) {\n    // handle\n  } else {\n    // do something\n  }\n});\nLOG_DEVEL << \"fulfilling Promise\";\np.setException(std::logic_error(\"abc\"));\n```\n\n----------------------------------------\n\nTITLE: Generating Parser Files with Flex/Bison\nDESCRIPTION: Sets up custom commands to generate `tokens.cpp` from `tokens.ll` using Flex and `grammar.cpp` from `grammar.y` using Bison. This is conditional on being in maintainer mode and not using MSVC.  These commands are used to generate the AQL parser from the grammar definition.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/Aql/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif (USE_MAINTAINER_MODE AND NOT MSVC)\n  set_directory_properties(PROPERTIES CLEAN_NO_CUSTOM \"On\")\n\n  add_custom_command(\n    OUTPUT ${CMAKE_CURRENT_SOURCE_DIR}/tokens.cpp\n    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}\n    COMMAND ${FLEX_EXECUTABLE} -L -otokens.cpp tokens.ll\n    MAIN_DEPENDENCY ${CMAKE_CURRENT_SOURCE_DIR}/tokens.ll\n    VERBATIM\n  )\n\n  add_custom_command(\n    OUTPUT ${CMAKE_CURRENT_SOURCE_DIR}/grammar.cpp\n    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}\n    COMMAND ${CMAKE_SOURCE_DIR}/utils/bison-c.sh\n      ${BISON_EXECUTABLE} grammar.cpp grammar.y\n    MAIN_DEPENDENCY ${CMAKE_CURRENT_SOURCE_DIR}/grammar.y\n    VERBATIM\n  )\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Defining Parameter Keywords using BOOST_PARAMETER_KEYWORD\nDESCRIPTION: This code snippet demonstrates how to define parameter keywords using the BOOST_PARAMETER_KEYWORD macro. These keywords are used to define named parameters for functions that will be exposed to Python via Boost.Python. Defining these keywords allows for functions to accept parameters by name instead of position.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter_python/doc/index.rst#2025-04-22_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\n\"    BOOST_PARAMETER_KEYWORD(tag, x)\n    BOOST_PARAMETER_KEYWORD(tag, y)\"\n```\n\n----------------------------------------\n\nTITLE: Returning Error Type as Const Reference in C++\nDESCRIPTION: This function combines the usage of const rvalue reference to safely observe the stored error without introducing undefined behavior by ensuring that a valid error is always returned. It relies on the `NoValuePolicy::wide_error_check()` to retrieve the error reference.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/basic_outcome/error_rvalue_const.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n\"const error_type &&error() const && {\\n    // In the implementation, this function invokes `NoValuePolicy::wide_error_check()`\\n    // and returns the reference to the error.\\n    // This ensures that we do not run into undefined behavior.\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Optimized Y Gradient Implementation with Boost GIL using Iterators and Cache-Friendly Access\nDESCRIPTION: This C++ code implements the vertical gradient computation with a cache-friendly approach. It iterates through each row (excluding the boundary rows) and initializes three iterators: one for the row above, one for the row below, and one for the current row. The gradient is computed by accessing the pixels above and below the current pixel using the iterators and assigning the result to the destination iterator.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/tutorial/gradient.rst#2025-04-22_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\nvoid y_gradient(gray8c_view_t const& src, gray8s_view_t const& dst)\n{\n  for (int y = 1; y < src.height() - 1; ++y)\n  {\n      gray8c_view_t::x_iterator src1_it = src.row_begin(y-1);\n      gray8c_view_t::x_iterator src2_it = src.row_begin(y+1);\n      gray8s_view_t::x_iterator dst_it = dst.row_begin(y);\n\n      for (int x = 0; x < src.width(); ++x)\n      {\n          *dst_it = ((*src1_it) - (*src2_it)) / 2;\n          ++dst_it;\n          ++src1_it;\n          ++src2_it;\n      }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Arango Metrics\nDESCRIPTION: This snippet specifies the private include directories for the `arango_metrics` library. It ensures that the library can access necessary header files during compilation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/Metrics/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(arango_metrics PRIVATE\n  \"${PROJECT_SOURCE_DIR}/arangod\"\n  \"${PROJECT_SOURCE_DIR}/${ENTERPRISE_INCLUDE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Rotating and Saving Image Functionality\nDESCRIPTION: This snippet describes a function that reads a JPEG image file, rotates it by 180 degrees using dynamic image views, and writes the result back to a file using Boost.GIL's JPEG I/O extension.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/dynamic_image.rst#2025-04-22_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\n#include <boost\\gil\\extension\\io\\jpeg_dynamic_io.hpp>\n\ntemplate <typename Image>    // Could be rgb8_image_t or any_image<...>\nvoid save_180rot(const std::string& file_name)\n{\n    Image img;\n    jpeg_read_image(file_name, img);\n    jpeg_write_view(file_name, rotated180_view(view(img)));\n}\n```\n\n----------------------------------------\n\nTITLE: Ordering Argument Evaluation in C++\nDESCRIPTION: Shows how to use 'apply_eval' to ensure left-to-right evaluation order of function arguments, which is not guaranteed by the C++ standard.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/doc/src/more_examples.md.txt#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\napply_eval(f, [&]{ return foo(); }, [&]{ return bar(); });\n```\n\n----------------------------------------\n\nTITLE: Boost Parameter Example Setup\nDESCRIPTION: This code snippet sets up a Boost.Build project with the necessary requirements to use Boost Parameter. It specifies the include paths and the implicit dependency on the Boost.Headers library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/index.rst#2025-04-22_snippet_2\n\nLANGUAGE: jam\nCODE:\n```\nproject test\n        : requirements <include>. <implicit-dependency>/boost//headers ;\n```\n\n----------------------------------------\n\nTITLE: Generic Optimized Luminosity Gradient with Metafunctions\nDESCRIPTION: A generic version of the optimized luminosity gradient that uses GIL metafunctions to dynamically determine types. This implementation handles channel type conversions and constructs appropriate image types based on the source and destination views.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/tutorial/gradient.rst#2025-04-22_snippet_19\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <typename SrcView, typename DstView>\nvoid x_luminosity_gradient(const SrcView& src, const DstView& dst)\n{\n  using d_channel_t = typename channel_type<DstView>::type;\n  using channel_t = typename channel_convert_to_unsigned<d_channel_t>::type;\n  using gray_pixel_t = pixel<channel_t, gray_layout_t>;\n  using gray_image_t = image<gray_pixel_t, false>;\n\n  gray_image_t ccv_image(src.dimensions());\n  copy_pixels(color_converted_view<gray_pixel_t>(src), view(ccv_image));\n  x_gradient(const_view(ccv_image), dst);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ArangoDB Subprojects and Custom Targets in CMake\nDESCRIPTION: This snippet configures system libraries, adds various ArangoDB subprojects (lib, client-tools, arangod, tests), and creates custom targets for packages management, Enterprise edition support (if enabled), and a main 'arangodb' target.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/CMakeLists.txt#2025-04-22_snippet_21\n\nLANGUAGE: cmake\nCODE:\n```\n################################################################################\n## SUB-PROJECTS\n################################################################################\n\nlist(INSERT SYSTEM_LIBRARIES 0\n  ${BT_LIBS}\n  ${ZLIB_LIBS}\n  ${ICU_LIBS}\n  ${ICU64_LIBS}\n  ${OPENSSL_LIBRARIES}\n  ${BASE_LIBS}\n  ${SYS_LIBS}\n  ${CMAKE_DL_LIBS}\n  ${CMAKE_THREAD_LIBS_INIT}\n)\n\nadd_subdirectory(lib)\nadd_subdirectory(client-tools)\nadd_subdirectory(arangod)\n\nif(USE_GOOGLE_TESTS)\n  add_subdirectory(tests)\nendif()\n\nadd_custom_target(packages\n  DEPENDS ${PACKAGES_LIST}\n)\n\nadd_custom_target(copy_packages\n  DEPENDS ${COPY_PACKAGES_LIST}\n)\n\nadd_custom_target(clean_packages\n  DEPENDS ${CLEAN_PACKAGES_LIST}\n)\n\nadd_custom_target(clean_autogenerated_files\n  DEPENDS ${CLEAN_AUTOGENERATED_FILES}\n)\n\nmessage(STATUS \"building for git revision: ${ARANGODB_BUILD_REPOSITORY}\")\n\nif(USE_ENTERPRISE)\n  add_definitions(\"-DUSE_ENTERPRISE=1\")\n  add_subdirectory(enterprise)\nendif()\n\nadd_custom_target(arangodb\n   DEPENDS arangod client-tools)\n\nadd_subdirectory(utils/gdb-pretty-printers/immer/test)\n```\n\n----------------------------------------\n\nTITLE: Using Function Objects with Algorithms in C++\nDESCRIPTION: Shows how to instantiate and use a function object, both for direct function calls and as a parameter to std::accumulate. This demonstrates the flexibility of function objects with templated operators.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/doc/src/gettingstarted.md.txt#2025-04-22_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nauto sum = sum_f();\n// Call sum function\nauto three = sum(1, 2);\n// Or pass to an algorithm\nstd::vector<int> v = { 1, 2, 3 };\nint total = std::accumulate(v.begin(), v.end(), 0, sum);\n```\n\n----------------------------------------\n\nTITLE: Creating Pipable Lambda Functions in C++\nDESCRIPTION: Shows how to combine lambda functions with adaptors like pipable. This demonstrates the flexibility of the library in combining different features for more expressive code.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/doc/src/gettingstarted.md.txt#2025-04-22_snippet_11\n\nLANGUAGE: cpp\nCODE:\n```\n// Pipable sum\nBOOST_HOF_STATIC_LAMBDA_FUNCTION(sum) = pipable([](auto x, auto y)\n{\n    return x + y;\n});\n```\n\n----------------------------------------\n\nTITLE: Defining ColorBaseValueConcept in C++\nDESCRIPTION: This snippet defines the ColorBaseValueConcept which ensures that the color base is mutable and regular, essentially a stronger variant of MutableColorBaseConcept allowing for value characteristics.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/color_base.rst.txt#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nconcept ColorBaseValueConcept<typename T> : MutableColorBaseConcept<T>, Regular<T>\n{\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Conditional Dependencies for V8 and Enterprise in CMake\nDESCRIPTION: Adds conditional dependencies to the client-tools target for V8 and Enterprise features if enabled.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/client-tools/CMakeLists.txt#2025-04-22_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nif (USE_V8)\n  add_dependencies(client-tools arangosh)\nendif ()\n\nif (USE_ENTERPRISE)\n  add_dependencies(client-tools arangobackup)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Boost LEAF Error Handling with Exceptions in C++\nDESCRIPTION: Shows how to use Boost LEAF for error handling with exceptions in C++. This syntax is similar to the non-exception version but uses try_catch instead of handle_all.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/leaf/doc/whitepaper.md#2025-04-22_snippet_17\n\nLANGUAGE: c++\nCODE:\n```\nleaf::try_catch(\n\n  // The first function passed to handle_all is akin to a try-block.\n  []() -> T\n  {\n    // Operations which may fail, returning a T in case of success.\n    // If case of an error, any number of error objects of arbitrary\n    // types can be associated with the thrown exception object.\n  },\n\n  // The handler below is invoked if both an object of type my_error\n  // and an object of another_type are associated with the exception\n  // thrown by the try-block (above).\n  [](my_error const & e1, another_type const & e2)\n  {\n    ....\n  },\n\n  // This handler is invoked if an object of type my_error is associated\n  // with the exception thrown by the try-block.\n  [](my_error const & e1)\n  {\n    ....\n  },\n\n  // This handler is invoked in all other cases, similarly to catch(...)\n  []\n  {\n    ....\n  }\n\n);\n```\n\n----------------------------------------\n\nTITLE: Using Boost.PFR for Tuple Size and IO Operations in C++\nDESCRIPTION: This snippet utilizes Boost.PFR to determine the number of fields in a struct and serialize it. It defines a `my_struct` without an overloaded ostream operator, demonstrating the usage of Boost.PFR's `tuple_size` and `io` functions. Dependencies include the Boost.PFR library and iostream for output. The output is printed to the console and includes the number of fields and serialized struct content.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/pfr/README.md#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <iostream>\\n#include \\\"boost/pfr/precise.hpp\\\"\\n\\nstruct my_struct { // no ostream operator defined!\\n    int i;\\n    char c;\\n    double d;\\n};\\n\\nint main() {\\n    my_struct s{100, 'H', 3.141593};\\n    std::cout << \\\"my_struct has \\\" << boost::pfr::tuple_size<my_struct>::value\\n        << \\\" fields: \\\" << boost::pfr::io(s) << \\\"\\\\n\\\";\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Creating Pipable Lambda Functions with Boost.HigherOrderFunctions in C++\nDESCRIPTION: Demonstrates how to create a pipable function using a lambda and the pipable adaptor from Boost.HigherOrderFunctions, combining the conciseness of lambdas with the flexibility of adaptors.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/src/gettingstarted.md#2025-04-22_snippet_10\n\nLANGUAGE: C++\nCODE:\n```\n// Pipable sum\nBOOST_HOF_STATIC_LAMBDA_FUNCTION(sum) = pipable([](auto x, auto y)\n{\n    return x + y;\n});\n```\n\n----------------------------------------\n\nTITLE: Modeling ImageView in C++\nDESCRIPTION: The image_view class is a model for ImageViewConcept, parameterized over a pixel locator concept. It encapsulates a 2D image with member types for pixel location and dimensions. The class acts as a lightweight container for managing pixel-level operations in an image, fitting seamlessly into GIL's generalized view constructs.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/image_view.rst.txt#2025-04-22_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\n// Locator models PixelLocatorConcept, could be MutablePixelLocatorConcept template <typename Locator> class image_view { public: typedef Locator xy_locator; typedef iterator_from_2d<Locator> iterator; ... private: xy_locator _pixels; point_t _dimensions; };\n```\n\n----------------------------------------\n\nTITLE: Tsin's Depth-First Visit Function Declarations in Boost Graph\nDESCRIPTION: These functions are variations of Tsin's depth-first visit, utilizing an index map and visitor.  The functions perform a distributed depth-first traversal, accepting graph, start vertex, visitor and vertex index map or other utility maps.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/tsin_depth_first_visit.rst#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\n\"namespace graph {\n    template<typename DistributedGraph, typename DFSVisitor, \n           typename VertexIndexMap>\n    void\n    tsin_depth_first_visit(const DistributedGraph& g,\n                           typename graph_traits<DistributedGraph>::vertex_descriptor s,\n                           DFSVisitor vis);\n\n    template<typename DistributedGraph, typename DFSVisitor, \n             typename VertexIndexMap>\n    void\n    tsin_depth_first_visit(const DistributedGraph& g,\n                           typename graph_traits<DistributedGraph>::vertex_descriptor s,\n                           DFSVisitor vis, VertexIndexMap index_map);\n\n    template<typename DistributedGraph, typename ColorMap, typename ParentMap,\n             typename ExploreMap, typename NextOutEdgeMap, typename DFSVisitor>\n    void\n    tsin_depth_first_visit(const DistributedGraph& g,\n                           typename graph_traits<DistributedGraph>::vertex_descriptor s,\n                           DFSVisitor vis, ColorMap color, ParentMap parent, ExploreMap explore, \n                           NextOutEdgeMap next_out_edge);\n  } \"\n```\n\n----------------------------------------\n\nTITLE: Lifting Functions with BOOST_HOF_LIFT in C++\nDESCRIPTION: Illustrates how to use BOOST_HOF_LIFT to turn an entire overload set into a single object, similar to a function object. This is useful for passing templated functions to algorithms.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/src/gettingstarted.md#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<class T, class U>\nauto sum(T x, U y)\n{\n    return x + y;\n}\n\n// Pass sum to an algorithm\nstd::vector<int> v = { 1, 2, 3 };\nint total = std::accumulate(v.begin(), v.end(), 0, BOOST_HOF_LIFT(sum));\n```\n\n----------------------------------------\n\nTITLE: Setting C++ Standard and Extensions\nDESCRIPTION: These commands configure the C++ standard version and extensions. `CMAKE_CXX_STANDARD_REQUIRED ON` enforces the specified standard, and `CMAKE_CXX_EXTENSIONS OFF` disables compiler-specific extensions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n\"message(STATUS \\\"Boost.GIL: Require C++${CMAKE_CXX_STANDARD}\\\")\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\nset(CMAKE_CXX_EXTENSIONS OFF)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Compiler Definitions for ArangoDB\nDESCRIPTION: Sets up compiler definitions for test virtualization, remote API settings, architecture optimizations, and ICU configuration. These definitions control build-time behavior and feature flags.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/lib/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_compile_warnings_flags()\n\nif (USE_GOOGLE_TESTS)\n  add_definitions(\"-DTEST_VIRTUAL=virtual\")\nelse()\n  add_definitions(\"-DTEST_VIRTUAL=\")\nendif()\n\nadd_definitions(\"-DHAS_REMOTE_API=0\")\nadd_definitions(\"-DARCHITECTURE_OPTIMIZATIONS=\\\"${ARCHITECTURE_OPTIMIZATIONS}\\\"\")\nadd_definitions(\"-DU_HAVE_LIB_SUFFIX=1\")\nadd_definitions(\"-DU_LIB_SUFFIX_C_NAME=_64\")\n```\n\n----------------------------------------\n\nTITLE: Conditional Community Edition Source Addition\nDESCRIPTION: Adds Events.cpp source file only for community edition builds when USE_ENTERPRISE is not defined.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/Utils/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT USE_ENTERPRISE)\n  target_sources(arango_utils PRIVATE\n    Events.cpp)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Using Limit Decorator for Arity Control in C++\nDESCRIPTION: This code shows how to use the 'limit' decorator to restrict the maximum arity of a function. It helps in preventing unintended partial evaluations and provides better error messages.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/src/partialfunctions.md#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nauto sum = partial(limit_c<2>([](int x, int y)\n{\n    return x+y;\n}));\n```\n\n----------------------------------------\n\nTITLE: Creating Packed and Bit-Aligned Image Types in C++\nDESCRIPTION: This snippet provides definitions for creating packed and bit-aligned image types using metafunctions. It covers different sizes and channels, enabling the construction of images with up to five channels, utilizing templates to define specific types for memory alignment.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/metafunctions.rst.txt#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <typename BitField, unsigned Size1, typename Layout, typename Alloc=std::allocator<unsigned char> >\nstruct packed_image1_type { typedef ... type; };\n\ntemplate <typename BitField, unsigned Size1, unsigned Size2, typename Layout, typename Alloc=std::allocator<unsigned char> >\nstruct packed_image2_type { typedef ... type; };\n\ntemplate <typename BitField, unsigned Size1, unsigned Size2, unsigned Size3, typename Layout, typename Alloc=std::allocator<unsigned char> >\nstruct packed_image3_type { typedef ... type; };\n\ntemplate <typename BitField, unsigned Size1, unsigned Size2, unsigned Size3, unsigned Size4, typename Layout, typename Alloc=std::allocator<unsigned char> >\nstruct packed_image4_type { typedef ... type; };\n\ntemplate <typename BitField, unsigned Size1, unsigned Size2, unsigned Size3, unsigned Size4, unsigned Size5, typename Layout, typename Alloc=std::allocator<unsigned char> >\nstruct packed_image5_type { typedef ... type; };\n\ntemplate <unsigned Size1, typename Layout, typename Alloc=std::allocator<unsigned char> >\nstruct bit_aligned_image1_type { typedef ... type; };\n\ntemplate <unsigned Size1, unsigned Size2, typename Layout, typename Alloc=std::allocator<unsigned char> >\nstruct bit_aligned_image2_type { typedef ... type; };\n\ntemplate <unsigned Size1, unsigned Size2, unsigned Size3, typename Layout, typename Alloc=std::allocator<unsigned char> >\nstruct bit_aligned_image3_type { typedef ... type; };\n\ntemplate <unsigned Size1, unsigned Size2, unsigned Size3, unsigned Size4, typename Layout, typename Alloc=std::allocator<unsigned char> >\nstruct bit_aligned_image4_type { typedef ... type; };\n\ntemplate <unsigned Size1, unsigned Size2, unsigned Size3, unsigned Size4, unsigned Size5, typename Layout, typename Alloc=std::allocator<unsigned char> >\nstruct bit_aligned_image5_type { typedef ... type; };\n```\n\n----------------------------------------\n\nTITLE: Chaining Functions with Pipable Operators in C++\nDESCRIPTION: Illustrates how to use pipable functions to create a more readable chain of operations on a collection.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/src/more_examples.md#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nauto r = numbers\n    | filter([](int x) { return x > 2; })\n    | transform([](int x) { return x * x; });\n```\n\n----------------------------------------\n\nTITLE: SendingDataAsyncUsingAsyncSendToBoostASIOC++\nDESCRIPTION: Initiates asynchronous data sending with boost::asio::ip::udp::socket::async_send_to(), serving the request to the client. Parameters include error and bytes_transferred placeholders using boost::bind().\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/asio/example/cpp03/tutorial/daytime_dox.txt#2025-04-22_snippet_6\n\nLANGUAGE: C++\nCODE:\n```\nvoid handle_send(const boost::system::error_code &error, std::size_t bytes_transferred) {\n    // Serve data to client\n    if (!error) {\n        // Data successfully sent\n    }\n    // Handle any further client requests\n}\n```\n\n----------------------------------------\n\nTITLE: Transformer Implementation for Type Conversion in C++\nDESCRIPTION: Shows how to implement a transformer for converting between different types during serialization/deserialization.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/lib/Inspection/include/Inspection/README.md#2025-04-22_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\nstruct DummyTransformer {\n  using SerializedType = std::string;\n\n  arangodb::inspection::Status toSerialized(int v,\n                                            SerializedType& result) const {\n    result = std::to_string(v);\n    return {};\n  }\n  arangodb::inspection::Status fromSerialized(SerializedType const& v,\n                                              int& result) const {\n    result = std::stoi(v);\n    return {};\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a Function Object for Sum Operation in C++\nDESCRIPTION: Demonstrates how to create a function object that encapsulates an entire overload set for a sum operation. This allows for more flexible use in algorithms and function calls.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/src/gettingstarted.md#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\n// A sum function object\nstruct sum_f\n{\n    template<class T, class U>\n    auto operator()(T x, U y) const\n    {\n        return x + y;\n    }\n};\n\nauto sum = sum_f();\n// Call sum function\nauto three = sum(1, 2);\n// Or pass to an algorithm\nstd::vector<int> v = { 1, 2, 3 };\nint total = std::accumulate(v.begin(), v.end(), 0, sum);\n```\n\n----------------------------------------\n\nTITLE: Linking dependencies for ArangoDB scheduler library\nDESCRIPTION: This snippet links the `arango_scheduler` library with other ArangoDB libraries, such as `velocypack`, `arango_futures`, `arango_basic_utils`, and `arango_basic_errors`. These linked libraries provide necessary functionalities for the scheduler, such as data serialization, asynchronous operations, basic utilities, and error handling.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/Scheduler/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(arango_scheduler\n  PUBLIC\n  velocypack\n  arango_futures\n  arango_basic_utils\n  arango_basic_errors\n)\n```\n\n----------------------------------------\n\nTITLE: Using Iterator Adaptor Template in C++\nDESCRIPTION: Specializations of iterator_adaptor derive from iterator_facade and implement core interface functions through the Base template parameter. The Derived class can redefine core functions to customize iterator behavior.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/iterator_adaptor_abstract.rst#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\niterator_adaptor<Base>\n```\n\n----------------------------------------\n\nTITLE: 8-bit Luminosity Histogram Calculation (GIL)\nDESCRIPTION: This template function calculates the luminosity histogram of an image using the Boost GIL, specifically for 8-bit images. It converts the input image view to a grayscale view and then calls the `grayimage_histogram` function to calculate the histogram. This function handles different color spaces and channel orderings.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/tutorial/histogram.rst#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <typename View, typename R>\nvoid luminosity8bit_hist(View& img, R& hist)\n{\n    grayimage_histogram(color_converted_view<gray8_pixel_t>(img),hist);\n}\n```\n\n----------------------------------------\n\nTITLE: Parameter Specification Syntax for Boost Parameter Library in C++\nDESCRIPTION: Defines the argument specifier syntax for Boost Parameter Library functions, including optional, required, and deduced parameter specifications along with restrictions and default values.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_23\n\nLANGUAGE: reStructuredText\nCODE:\n```\nargument-specifiers ::= *specifier-group0* {*specifier-group0*\\ }\n\nspecifier-group0 ::= *specifier-group1* |\n    (\n        '**(**' '**deduced**'\n            *specifier-group1* {*specifier-group1*\\ }\n        '**)**'\n    )\n\nspecifier-group1 ::=\n    (\n        '**(**' '**optional**'\n            *optional-specifier* {*optional-specifier*\\ }\n        '**)**'\n    ) | (\n        '**(**' '**required**'\n            *required-specifier* {*required-specifier*\\ }\n        '**)**'\n    )\n\noptional-specifier ::=\n    '**(**'\n        *argument-name* '**,**' *restriction* '**,**' *default-value*\n    ')'\n\nrequired-specifier ::=\n    '**(**' *argument-name* '**,**' *restriction* ')'\n\nrestriction ::=\n    ( '**\\***' '**(**' *mfc* '**)**' ) |\n    ( '**(**' *type-name* '**)**' ) |\n    '**\\***'\n```\n\n----------------------------------------\n\nTITLE: Creating Infix Operators with Boost.HigherOrderFunctions in C++\nDESCRIPTION: Demonstrates how to define named infix operators using the infix adaptor. This allows functions to be called using custom infix notation, which can make some code more readable.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/doc/src/gettingstarted.md.txt#2025-04-22_snippet_8\n\nLANGUAGE: cpp\nCODE:\n```\nBOOST_HOF_STATIC_FUNCTION(sum) = infix(sum_f());\n\nAnd it could be called like this:\n\nauto three = 1 <sum> 2;\n```\n\n----------------------------------------\n\nTITLE: Defining copy_if Template in C++\nDESCRIPTION: Defines the copy_if template structure with Sequence, Pred, and optional In parameters. It returns a filtered copy of the original sequence containing elements that satisfy the predicate Pred.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/copy_if.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      typename Sequence\n    , typename Pred\n    , typename In = |unspecified|\n    >\nstruct copy_if\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Optimized X Gradient Implementation with Boost GIL using Iterators\nDESCRIPTION: This C++ code provides an optimized implementation of the horizontal gradient computation using pixel iterators. It iterates through each row of the image and initializes iterators for both source and destination views using `row_begin`. It then iterates through each pixel in the row (excluding boundary pixels) and calculates the gradient using iterator indexing. This version is faster than using `operator()` due to efficient pointer arithmetic.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/tutorial/gradient.rst#2025-04-22_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nvoid x_gradient(gray8c_view_t const& src, gray8s_view_t const& dst)\n{\n  for (int y = 0; y < src.height(); ++y)\n  {\n      gray8c_view_t::x_iterator src_it = src.row_begin(y);\n      gray8s_view_t::x_iterator dst_it = dst.row_begin(y);\n\n      for (int x=1; x < src.width() - 1; ++x)\n          dst_it[x] = (src_it[x-1] - src_it[x+1]) / 2;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a 2D Image Iterator in C++\nDESCRIPTION: This snippet defines a C++ class 'iterator_from_2d' that allows for random access iteration over pixels in a 2D image. It demonstrates constructor initialization and increment operator overload for iterating through pixels in memory-friendly order.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/pixel_locator.rst.txt#2025-04-22_snippet_10\n\nLANGUAGE: cpp\nCODE:\n```\n  template <typename Locator>  // Models PixelLocatorConcept\\n  class iterator_from_2d\\n  {\\n  public:\\n    iterator_from_2d(const Locator& loc, int x, int width);\\n\\n    iterator_from_2d& operator++(); // if (++_x<_width) ++_p.x(); else _p+=point_t(-_width,1);\\n\\n    ...\\n  private:\\n    int _x, _width;\\n    Locator _p;\\n  };\n```\n\n----------------------------------------\n\nTITLE: Including replace_if Header in C++\nDESCRIPTION: Shows how to include the header file for the replace_if algorithm in C++.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/replace_if.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/replace_if.h>\n```\n\n----------------------------------------\n\nTITLE: Running React Application Tests\nDESCRIPTION: Launches the test runner in interactive watch mode for running application tests.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/js/apps/system/_admin/aardvark/APP/react/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn test\n```\n\n----------------------------------------\n\nTITLE: Basic Synchronous Timer Usage in C++\nDESCRIPTION: Demonstrates how to create and use a synchronous timer with Boost.Asio. Creates an I/O context and a steady timer that expires after 5 seconds, using blocking wait.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/asio/example/cpp03/tutorial/timer_dox.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nboost::asio::io_context io;\nboost::asio::steady_timer t(io, boost::asio::chrono::seconds(5));\nt.wait();\n```\n\n----------------------------------------\n\nTITLE: Parsing Command-Line Arguments Using Descriptions\nDESCRIPTION: This snippet shows how to use two instances of 'options_description' to parse command-line arguments, allowing for both positional and named options to be processed uniformly.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/program_options/doc/post_review_plan.txt#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\noptions_description desc;\ndesc.add_options()\n    (\"magic\", \"n\", \"magic value\");\n\noptions_description pdesc;\npdesc.add_options()\n    (\"output-file\", \"n\", \"output file\")\n    (\"input-files*\", value< vector<string> >(\"n\"), \"files\");\n\nvariables_map vm;\nload_from_command_line(vm, desc, pdesc, argc, argv);\n```\n\n----------------------------------------\n\nTITLE: Coroutine Function Structure in C++\nDESCRIPTION: This snippet demonstrates the general structure of a C++ coroutine function, emphasizing the use of an awaitable return type (`AWAITABLE<int>`) and the `co_await` keyword for suspending and resuming execution. It also illustrates the correct usage of `co_return` within coroutines. Ordinary `return` statements cannot be used.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/tutorial/essential/coroutines/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: c++\nCODE:\n```\n// Coroutine functions MUST return an AWAITABLE type\nAWAITABLE<int> function_name(Args ...)\n{\n  ... ordinary C++ ...\n  if(!...)\n  {\n    co_return 5;  // CANNOT use ordinary 'return' from coroutines\n  }\n  ...\n  // Possibly suspend this coroutine's execution until the\n  // awaitable resumes execution of dependent code\n  auto x = co_await expr_resulting_in_AWAITABLE;\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Error Files for ArangoDB in CMake\nDESCRIPTION: This snippet creates custom commands to generate error handling files from error definition data files. It loops through a list of error files, generates the content using Python scripts, and copies the results to appropriate locations.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/CMakeLists.txt#2025-04-22_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\n################################################################################\n## ERRORS FILES\n################################################################################\n\n# If \"make clean\" removes these files, afterwards neither \"make\" nor \"cmake\" work any more.\nset_directory_properties(PROPERTIES CLEAN_NO_CUSTOM \"On\")\n\nset(ERROR_FILES\n  lib/Basics/voc-errors.h\n  lib/Basics/error-registry.h\n  js/common/bootstrap/errors.js\n)\n\nset(ERROR_FILES_GEN)\nset(ERRORS_DAT lib/Basics/errors.dat)\n\nforeach(m IN LISTS ERROR_FILES)\n  get_filename_component(GEN_BASENAME \"${m}\" NAME)\n  if(GEN_BASENAME STREQUAL \"errors.js\")\n    # generated errors.js is copied into the source dir\n    set(TARGET_FILENAME ${CMAKE_SOURCE_DIR}/${m})\n  else()\n    # generated C++ header files are copied into the build dir\n    set(TARGET_FILENAME ${CMAKE_BINARY_DIR}/${m})\n  endif()\n  add_custom_command(\n    OUTPUT ${CMAKE_BINARY_DIR}/${m}\n    COMMAND ${PYTHON_EXECUTABLE} ${CMAKE_SOURCE_DIR}/utils/generateErrorfile.py ${CMAKE_SOURCE_DIR}/${ERRORS_DAT} ${CMAKE_BINARY_DIR}/${GEN_BASENAME}.tmp\n    COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/${GEN_BASENAME}.tmp ${TARGET_FILENAME}\n    COMMAND ${CMAKE_COMMAND} -E remove ${CMAKE_BINARY_DIR}/${GEN_BASENAME}.tmp\n    DEPENDS ${CMAKE_SOURCE_DIR}/${ERRORS_DAT} ${CMAKE_SOURCE_DIR}/utils/generateErrorfile.py\n    WORKING_DIRECTORY ${CMAKE_BINARY_DIR}\n    COMMENT  \"Building errors file ${m}\"\n    VERBATIM\n  )\n\n  list(APPEND ERROR_FILES_GEN ${CMAKE_BINARY_DIR}/${m})\nendforeach()\n\nadd_custom_target(errorfiles ALL DEPENDS ${ERROR_FILES_GEN})\n```\n\n----------------------------------------\n\nTITLE: Configuring Lightweight Crash Handler in CMake\nDESCRIPTION: Defines and configures a lightweight version of the crash handler library with minimal dependencies. Includes only the basic project source directory in its include paths.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/lib/CrashHandler/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(arango_crashhandler_light STATIC\\n  CrashHandlerLight.cpp)\\ntarget_include_directories(arango_crashhandler_light\\n  PUBLIC ${PROJECT_SOURCE_DIR}/lib)\n```\n\n----------------------------------------\n\nTITLE: Creating Associative Containers with Boost Pointer Containers\nDESCRIPTION: This snippet demonstrates the construction of associative containers like boost::ptr_set and boost::ptr_multimap for sorted storage of animal objects based on custom properties such as name.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/tutorial.rst#2025-04-22_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\nboost::ptr_set<animal> set;\nset.insert( new monkey(\"bobo\") );\nset.insert( new whale(\"anna\") );\n\ntypedef boost::ptr_multimap<std::string,animal> zoo_type;\nzoo_type zoo;\nzoo.insert( \"bobo\", new monkey(\"bobo\") );\nzoo.insert( \"bobo\", new elephant(\"bobo\") );\nzoo.insert( \"anna\", new whale(\"anna\") );\nzoo.insert( \"anna\", new emu(\"anna\") );\n```\n\n----------------------------------------\n\nTITLE: Defining ImageViewConcept in C++\nDESCRIPTION: This concept describes image views operating on pixel value types conforming to PixelValueConcept. It includes compatibility with pixel iterators and a requirement that coordinate types are consistent across dimensions. The ImageViewConcept concept is a fundamental building block for image representation in GIL and intermediate transformations.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/image_view.rst.txt#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nconcept ImageViewConcept<RandomAccess2DImageViewConcept View> { where PixelValueConcept<value_type>; where PixelIteratorConcept<x_iterator>; where PixelIteratorConcept<y_iterator>; where x_coord_t == y_coord_t; typename coord_t = x_coord_t; std::size_t View::num_channels() const; }; concept MutableImageViewConcept<ImageViewConcept View> : MutableRandomAccess2DImageViewConcept<View> {};\n```\n\n----------------------------------------\n\nTITLE: Using transform_view to Find Largest Type in C++\nDESCRIPTION: Example demonstrating how to use transform_view to find the largest type in a sequence of types. It transforms each type to its size using size_of and then finds the maximum element.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/transform_view.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntypedef vector<int,long,char,char[50],double> types;\ntypedef max_element<\n      transform_view< types, size_of<_> >\n    >::type iter;\n\nBOOST_MPL_ASSERT_RELATION( deref<iter>::type::value, ==, 50 );\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries\nDESCRIPTION: Links the necessary libraries to the `arango_tests_inspection` object library. This ensures that the compiled object files have access to the symbols and functions provided by these linked libraries during the linking process. The libraries include gtest, velocypack, arango_lightweight, arango_inspection, and arango_inspection_test_helper.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/Inspection/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(arango_tests_inspection\n  PRIVATE gtest\n          velocypack\n          arango_lightweight # jezas.\n          arango_inspection\n          arango_inspection_test_helper)\n```\n\n----------------------------------------\n\nTITLE: Implementing Template Node Class in C++\nDESCRIPTION: Template class deriving from node_base to store typed values with concrete implementations of virtual methods.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/iterator_facade_tutorial.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <class T>\nstruct node : node_base {\n    node(T x)\n      : m_value(x)\n    {}\n    void print(std::ostream& s) const { s << this->m_value; }\n    void double_me() { m_value += m_value; }\n private:\n    T m_value;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining RGBA Color Space in Boost GIL (C++)\nDESCRIPTION: This snippet defines the RGBA color space in the Boost GIL library. It introduces custom types for each channel and uses the MPL vector to group them. This definition sets the semantic order of channels.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/color_space.rst#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nstruct red_t {};\nstruct green_t {};\nstruct blue_t {};\nstruct alpha_t {};\nrgba_t = using mpl::vector4<red_t, green_t, blue_t, alpha_t>;\n```\n\n----------------------------------------\n\nTITLE: Using Translate Function with Plural Forms in Output Streams\nDESCRIPTION: Shows how to use the translate function with singular and plural forms in combination with format for formatted output. The example displays file listings with appropriate pluralization based on the number of files.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/doc/messages_formatting.txt#2025-04-22_snippet_11\n\nLANGUAGE: C++\nCODE:\n```\ncout << format(translate(\"Listing of catalog {1}:\")) % file_name << endl;\ncout << format(translate(\"Catalog {1} contains 1 file\",\"Catalog {1} contains {2,num} files\",files_no)) \n        % file_name % files_no << endl;\n```\n\n----------------------------------------\n\nTITLE: Histogram Calculation of a Subsampled, Subimage (GIL)\nDESCRIPTION: This code snippet demonstrates how to compute a histogram on a specific region of interest within an image, utilizing GIL's view adapters. It computes the histogram of the second channel of the top-left quadrant, sampling every other row and column. It showcases GIL's flexibility in processing image regions without extra memory allocation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/tutorial/histogram.rst#2025-04-22_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\ngrayimage_histogram(\n    nth_channel_view(\n        subsampled_view(\n            subimage_view(img,\n                0,0, img.width() / 2, img.height() / 2), // upper left quadrant\n                2, 2                                     // skip every other row and column\n            ),\n        1   // index of the second channel (for example, green for RGB)\n    ),\n    hist\n);\n```\n\n----------------------------------------\n\nTITLE: Scanline Reading of Images\nDESCRIPTION: Demonstrates reading images scanline by scanline using scanline_reader and iterators for large image processing.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/io.rst#2025-04-22_snippet_6\n\nLANGUAGE: C++\nCODE:\n```\ntypedef tiff_tag tag_t;\n\ntypedef scanline_reader< typename get_read_device< const char*\n                                                 , tag_t\n                                                 >::type\n                        , tag_t\n                        > reader_t;\n\nreader_t reader = make_scanline_reader( \"C:/boost/libs/gil/test/extension/io/images/tiff/test.tif\", tag_t() );\n\ntypedef rgba8_image_t image_t;\n\nimage_t dst( reader._info._width, reader._info._height );\nfill_pixels( view(dst), image_t::value_type() );\n```\n\n----------------------------------------\n\nTITLE: Example Usage of MPL Placeholders in C++\nDESCRIPTION: Demonstrates how to use placeholders with apply_wrap to select specific arguments. In this example, _1 selects the first argument (bool) and _3 selects the third argument (short) from a list of types.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/Placeholders.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntypedef apply_wrap\\ ``5``\\< _1,bool,char,short,int,long >::type t1;\ntypedef apply_wrap\\ ``5``\\< _3,bool,char,short,int,long >::type t3;\n\nBOOST_MPL_ASSERT(( is_same< t1, bool > ));\nBOOST_MPL_ASSERT(( is_same< t3, short > ));\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Mutable Function Object Behavior in C++\nDESCRIPTION: This snippet shows why mutable function objects can lead to surprising behaviors when copied by value. It demonstrates how a counter function object fails to maintain state across calls when passed by value.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/src/faq.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nstruct counter\n{\n    int i;\n    counter() : i(0)\n    {}\n\n    template<class... Ts>\n    int operator()(Ts&&...)\n    {\n        return i++;\n    }\n};\n\n\ncounter c{};\nproj(mutable_(c))(1,1);\n// Prints 0, not 2\nstd::cout << c.i << std::endl;\n```\n\n----------------------------------------\n\nTITLE: Running Boost Config Library Tests\nDESCRIPTION: Commands to run all tests or a single test for the Boost Config Library using b2 build system.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/config/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n../../../b2                        <- run all tests\n../../../b2 config_info            <- single test\n```\n\n----------------------------------------\n\nTITLE: Bounds-Checking Index Access in Pointer Maps in C++\nDESCRIPTION: Demonstrates how to access elements in a pointer map with bounds checking using the at() method. The example includes error handling with try-catch for when a key is not found.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/tutorial.rst#2025-04-22_snippet_10\n\nLANGUAGE: cpp\nCODE:\n```\ntry\n{\n    animal& bobo = map.at(\"bobo\");\n}\ncatch( boost::bad_ptr_container_operation& e )\n{\n    // \"bobo\" not found\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Server Stackless SSL CMake Build\nDESCRIPTION: Configures the build for an HTTP server example with OpenSSL support. The configuration includes source grouping, executable definition, setting folder properties, and linking necessary libraries like OpenSSL, Asio, and Beast.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/beast/example/http/server/stackless-ssl/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif (OPENSSL_FOUND)\n    GroupSources(include/boost/beast beast)\n    GroupSources(example/common common)\n    GroupSources(example/http/server/stackless-ssl \"/\")\n\n    add_executable (http-server-stackless-ssl\n        ${BOOST_BEAST_FILES}\n        ${PROJECT_SOURCE_DIR}/example/common/server_certificate.hpp\n        Jamfile\n        http_server_stackless_ssl.cpp\n    )\n\n    set_property(TARGET http-server-stackless-ssl PROPERTY FOLDER \"example-http-server\")\n\n    target_link_libraries (http-server-stackless-ssl\n        OpenSSL::SSL OpenSSL::Crypto\n        lib-asio\n        lib-asio-ssl\n        lib-beast\n        )\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring ArangoDB Dump Tool Build in CMake\nDESCRIPTION: Configures the build and installation of the ArangoDB dump tool executable. Includes setting up the executable, linking required libraries like boost and arango components, defining include paths, and establishing build dependencies on components like zlib, ICU, and jemalloc.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/client-tools/Dump/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(${BIN_ARANGODUMP}\n  ${ProductVersionFiles_arangodump}\n  DumpFeature.cpp\n  arangodump.cpp\n)\ntarget_include_directories(${BIN_ARANGODUMP} PRIVATE ${PROJECT_SOURCE_DIR}/client-tools)\n\ntarget_link_libraries(${BIN_ARANGODUMP}\n  ${SYSTEM_LIBRARIES}\n  arango_basic_maskings\n  boost_system\n  boost_boost\n  arango_shell\n  clienttools_utils\n)\n\ninstall(\n  TARGETS ${BIN_ARANGODUMP}\n  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR})\n\ninstall_config(${BIN_ARANGODUMP})\n\nadd_dependencies(${BIN_ARANGODUMP} zlibstatic)\n\n# use ICU 64 for the client tools\nadd_dependencies(${BIN_ARANGODUMP} iculegacy_build)\n\nif (USE_JEMALLOC)\n  add_dependencies(${BIN_ARANGODUMP} jemalloc_build)\nendif ()\n\nadd_dependencies(${BIN_ARANGODUMP} man)\n```\n\n----------------------------------------\n\nTITLE: Including Necessary Directories for Private Access\nDESCRIPTION: This snippet specifies the include directories that are necessary for the target 'arangodbtests-iresearch'. These directories contain the headers required for compiling the tests.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/IResearch/CMakeLists.txt#2025-04-22_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(arangodbtests-iresearch PRIVATE\\\n  ${PROJECT_SOURCE_DIR}/arangod\\\n  ${PROJECT_SOURCE_DIR}/${ENTERPRISE_INCLUDE_DIR}\\\n  ${PROJECT_SOURCE_DIR}/tests\\\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Pipable Functions with Boost.HigherOrderFunctions in C++\nDESCRIPTION: Demonstrates how to use the pipable adaptor to create a function that supports pipeline syntax. This allows function calls to be chained using the pipe operator (|) similar to UFCS.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/doc/src/gettingstarted.md.txt#2025-04-22_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\nBOOST_HOF_STATIC_FUNCTION(sum) = pipable(sum_f());\n```\n\n----------------------------------------\n\nTITLE: Defining Mutable Pixel Iterator Concept\nDESCRIPTION: This C++ code defines 'MutablePixelIteratorConcept' as a refinement of 'PixelIteratorConcept', extending its functionality to mutable random access iterators.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/pixel_iterator.rst#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\n  template <typename Iterator>\n  concept MutablePixelIteratorConcept : PixelIteratorConcept<Iterator>, MutableRandomAccessIteratorConcept<Iterator> {};\n```\n\n----------------------------------------\n\nTITLE: Adding ArangoDB Subdirectories in CMake\nDESCRIPTION: Includes various ArangoDB component subdirectories in the build process.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/client-tools/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Benchmark)\nadd_subdirectory(Backup)\nadd_subdirectory(Dump)\nadd_subdirectory(Export)\nadd_subdirectory(Import)\nadd_subdirectory(Restore)\nadd_subdirectory(Shell)\nadd_subdirectory(Utils)\nadd_subdirectory(VPack)\n```\n\n----------------------------------------\n\nTITLE: Writing JPEG Image with Quality Parameter using Boost.GIL\nDESCRIPTION: This snippet shows how to write an image in JPEG format with a specified quality setting. The user creates an 'rgb8_image_t' object, specifies the JPEG quality as a parameter in the 'image_write_info' class, and writes the image to a file using the 'write_view' function.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/io.rst.txt#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\nstd::string filename( \"image.jpg\" );\nrgb8_image_t img( 640, 480 );\n\n// write data into image\n\nwrite_view( filename\n              , view( img )\n              , image_write_info< jpeg_tag >( 95 )\n              );\n```\n\n----------------------------------------\n\nTITLE: Handling Filesystem Errors in C++ Filesystem TS\nDESCRIPTION: The code snippet demonstrates the common design pattern before Outcome, involving dual overloads with throwing and non-throwing variants for APIs in the Filesystem TS. It highlights the benefit of having rich exception information in the throwing overload and challenges faced with the non-throwing version. The proposal is to consolidate these into a single API without losing critical error information.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/tutorial/advanced/payload/copy_file.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n\"filesystem_api_problem\"\n```\n\n----------------------------------------\n\nTITLE: Creating ArangoDB Server Executable Target\nDESCRIPTION: Defines the main ArangoDB server executable target with source files, version information, and linking dependencies\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(${BIN_ARANGOD}\n  RestServer/arangod.cpp\n  ${ProductVersionFiles}\n)\n\ntarget_link_libraries(${BIN_ARANGOD}\n  arangoserver\n  arango_iresearch\n)\n\nif (USE_JEMALLOC)\n  target_link_libraries(${BIN_ARANGOD} ${JEMALLOC_LIB})\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring SWIG and Python for S2 Library Wrapper in CMake\nDESCRIPTION: This CMake snippet sets up SWIG to generate Python bindings for the S2 library. It includes necessary files, sets SWIG flags, configures the library build, links libraries, adds a test, and specifies installation instructions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/s2geometry/master/src/python/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${SWIG_USE_FILE})\ninclude_directories(${Python3_INCLUDE_DIRS})\n\nset(CMAKE_SWIG_FLAGS \"\")\nset_property(SOURCE s2.i PROPERTY SWIG_FLAGS \"-module\" \"pywraps2\")\nset_property(SOURCE s2.i PROPERTY CPLUSPLUS ON)\n\nswig_add_library(pywraps2 LANGUAGE python SOURCES s2.i)\n\nswig_link_libraries(pywraps2 ${Python3_LIBRARIES} s2)\nenable_testing()\nadd_test(NAME pywraps2_test COMMAND\n         ${Python3_EXECUTABLE}\n         \"${PROJECT_SOURCE_DIR}/src/python/pywraps2_test.py\")\nset_property(TEST pywraps2_test PROPERTY ENVIRONMENT\n             \"PYTHONPATH=$ENV{PYTHONPATH}:${PROJECT_BINARY_DIR}/python\")\n\n# Install the wrapper.\ninstall(TARGETS _pywraps2 DESTINATION ${Python3_SITELIB})\ninstall(FILES \"${PROJECT_BINARY_DIR}/python/pywraps2.py\"\n        DESTINATION ${Python3_SITELIB})\n```\n\n----------------------------------------\n\nTITLE: Adding Static Library for Cluster Methods - CMake\nDESCRIPTION: This snippet adds a static library named 'arango_cluster_methods' that includes source files relevant to cluster management functionalities. It sets up dependencies on other libraries and specifies the directories for includes and additional compile options.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/Cluster/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(arango_cluster_methods STATIC\n  ClusterMethods.cpp\n  ClusterCollectionMethods.cpp\n  ClusterIndexMethods.cpp\n  ClusterTtlMethods.cpp)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Cluster Methods - CMake\nDESCRIPTION: This snippet specifies the directories from which the compiler should include header files when compiling the 'arango_cluster_methods'. It includes paths relative to the project's source directory and to the enterprise include directory.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/Cluster/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(arango_cluster_methods PRIVATE\n  \"${PROJECT_SOURCE_DIR}/arangod\"\n  \"${PROJECT_SOURCE_DIR}/${ENTERPRISE_INCLUDE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom File I/O with Outcome Library\nDESCRIPTION: File I/O library utilizing Outcome's advanced error handling and exception synthesis capabilities. Uses template aliases and ADL bridging to customize error handling and exception throwing mechanisms.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/tutorial/advanced/interop/filelib.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n{{% snippet \"finale.cpp\" \"filelib\" %}}\n```\n\n----------------------------------------\n\nTITLE: Defining Mutable Random Access 2D Image View Concept in C++\nDESCRIPTION: This concept represents a mutable variant of a 2D random access image view, ensuring that all references are mutable. It is derived by extending the existing Random Access 2D and ND image view concepts to allow for modification of view data.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/image_view.rst#2025-04-22_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nconcept MutableRandomAccess2DImageViewConcept<RandomAccess2DImageViewConcept View>\n  : MutableRandomAccessNDImageViewConcept<View> {};\n\n```\n\n----------------------------------------\n\nTITLE: Example Usage of reverse_iter_fold in C++\nDESCRIPTION: Demonstrates how to use reverse_iter_fold to build a list of iterators to negative elements in a sequence. It uses a vector of integers as input and creates a list of iterators pointing to negative values.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/reverse_iter_fold.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ntypedef vector_c<int,5,-1,0,-7,-2,0,-5,4> numbers;\ntypedef list_c<int,-1,-7,-2,-5> negatives;\ntypedef reverse_iter_fold<\n      numbers\n    , list<>\n    , if_< less< deref<_2>,int_<0> >, push_front<_1,_2>, _1 >\n    >::type iters;\n\nBOOST_MPL_ASSERT(( equal< \n      negatives\n    , transform_view< iters,deref<_1> >\n    > ));\n```\n\n----------------------------------------\n\nTITLE: Required Expression Interfaces for Associative Sequences\nDESCRIPTION: Core expression interface requirements for an Associative Sequence type, including key-value operations and element retrieval. All operations must maintain amortized constant time complexity.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/AssociativeSequence.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nhas_key<s,k>::type       // Returns Boolean Integral Constant\ncount<s,k>::type         // Returns Integral Constant\norder<s,k>::type         // Returns Integral Constant or void_\nat<s,k>::type            // Returns any type\nat<s,k,def>::type        // Returns any type\nkey_type<s,x>::type      // Returns any type\nvalue_type<s,x>::type    // Returns any type\n```\n\n----------------------------------------\n\nTITLE: Declaring Minimal Eager Dijkstra's Shortest Paths Function in C++\nDESCRIPTION: The most simplified function declaration for the eager Dijkstra's shortest paths algorithm. It takes only the distributed graph, start vertex, predecessor map, distance map, and lookahead value.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/dijkstra_shortest_paths.rst#2025-04-22_snippet_6\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<typename DistributedGraph, typename DijkstraVisitor,\n             typename PredecessorMap, typename DistanceMap>\nvoid\neager_dijkstra_shortest_paths\n  (const DistributedGraph& g,\n   typename graph_traits<DistributedGraph>::vertex_descriptor s,\n   PredecessorMap predecessor, DistanceMap distance,\n   typename property_traits<DistanceMap>::value_type lookahead);\n```\n\n----------------------------------------\n\nTITLE: Implementing node_iter Using Boost iterator_adaptor in C++\nDESCRIPTION: Implementation of a node iterator class template using Boost's iterator_adaptor. This version simplifies the previous implementation by inheriting from iterator_adaptor and only requiring implementation of the increment operation. Includes support for iterator conversion between compatible Value types.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/iterator_adaptor_tutorial.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <class Value>\nclass node_iter\n  : public boost::iterator_adaptor<\n        node_iter<Value>                // Derived\n      , Value*                          // Base\n      , boost::use_default              // Value\n      , boost::forward_traversal_tag    // CategoryOrTraversal\n    >\n{\n private:\n    struct enabler {};  // a private type avoids misuse\n\n public:\n    node_iter()\n      : node_iter::iterator_adaptor_(0) {}\n\n    explicit node_iter(Value* p)\n      : node_iter::iterator_adaptor_(p) {}\n\n    template <class OtherValue>\n    node_iter(\n        node_iter<OtherValue> const& other\n      , typename boost::enable_if<\n            boost::is_convertible<OtherValue*,Value*>\n          , enabler\n        >::type = enabler()\n    )\n      : node_iter::iterator_adaptor_(other.base()) {}\n\n private:\n    friend class boost::iterator_core_access;\n    void increment() { this->base_reference() = this->base()->next(); }\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Static Library for Common REST Handlers in CMake\nDESCRIPTION: This snippet defines a static library named 'arango_common_rest_handler' using source files for handling REST operations. It acts as a module that can be linked with other components of the ArangoDB.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/RestHandler/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(arango_common_rest_handler STATIC\n  RestCollectionHandler.cpp\n  RestReplicationHandler.cpp)\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamic Image Types with Boost.GIL\nDESCRIPTION: This snippet demonstrates how to define an 'any_image' type using Boost.GIL's dynamic image extension, allowing the assignment of different image types at runtime. It also shows static assertions to validate type compatibility.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/dynamic_image.rst#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n#include <boost/gil/extension/dynamic_image/dynamic_image_all.hpp>\nusing namespace boost;\n\n#define ASSERT_SAME(A,B) static_assert(is_same< A,B >::value, \"\")\n\n// Create any_image class (or any_image_view) class with a set of allowed images\ntypedef any_image<rgb8_image_t, cmyk16_planar_image_t> my_any_image_t;\n\n// Associated view types are available (equivalent to the ones in image_t)\ntypedef any_image_view<rgb8_view_t, cmyk16_planar_view_t> AV;\nASSERT_SAME(my_any_image_t::view_t, AV);\n\ntypedef any_image_view<rgb8c_view_t, cmyk16c_planar_view_t> CAV;\nASSERT_SAME(my_any_image_t::const_view_t, CAV);\nASSERT_SAME(my_any_image_t::const_view_t, my_any_image_t::view_t::const_t);\n\ntypedef any_image_view<rgb8_step_view_t, cmyk16_planar_step_view_t> SAV;\nASSERT_SAME(typename dynamic_x_step_type<my_any_image_t::view_t>::type, SAV);\n\n// Assign it a concrete image at run time:\nmy_any_image_t myImg = my_any_image_t(rgb8_image_t(100,100));\n\n// Change it to another at run time. The previous image gets destroyed\nmyImg = cmyk16_planar_image_t(200,100);\n\n// Assigning to an image not in the allowed set throws an exception\nmyImg = gray8_image_t();        // will throw std::bad_cast\n```\n\n----------------------------------------\n\nTITLE: Defining DefaultConstructible Concept in C++\nDESCRIPTION: This code snippet defines a concept named DefaultConstructible that checks if a type T can be default constructed. It ensures that the type T has a constructor that can be called without any parameters.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/concepts.rst#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nauto concept DefaultConstructible<typename T>\n{\n    T::T();\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Readable Iterator Requirements in C++\nDESCRIPTION: This code snippet outlines the requirements for a type X to model the Readable Iterator concept for value type T. It includes expressions for iterator_traits, dereferencing, and member access, along with their return types and preconditions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/ReadableIterator.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\niterator_traits<X>::value_type  // Return Type: T\n*a                              // Return Type: Convertible to T\na->m                           // Return Type: U&\n```\n\n----------------------------------------\n\nTITLE: Generating Random Docker Image Tag with Git Commit Hash in Bash\nDESCRIPTION: This snippet demonstrates how to generate a random part of a Docker image tag using the Git commit hash. It's used to create unique tags for test images based on the current branch.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/scripts/docker/test/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit rev-parse --short HEAD\n```\n\n----------------------------------------\n\nTITLE: Template Function Expansion in C++ Using Boost Parameters\nDESCRIPTION: Shows the approximate expansion of a Boost Parameter function template, including result types, parameter handling, and function overloads for different arities.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_48\n\nLANGUAGE: cpp\nCODE:\n```\n    // If **result** is a template instantiation of |boost_enable_if|_\\,\n    // |boost_enable_if_c|_\\, |boost_lazy_enable_if|_\\,\n    // |boost_lazy_enable_if_c|_\\, |boost_disable_if|_\\, |boost_disable_if_c|_\\,\n    // |boost_lazy_disable_if|_\\, |boost_lazy_disable_if_c|_\\, or\n    // |std_enable_if|_\\:\n    template <typename Args>\n    using boost_param_result\\_ ## __LINE__ ## **name** = **result**;\n\n    // If **result** is a simple return type:\n    template <typename Args>\n    struct boost_param_result\\_ ## __LINE__ ## **name**\n    {\n        typedef **result** type;\n    };\n\n    struct boost_param_params\\_ ## __LINE__ ## **name**\n      : |parameters|_\\<\n            *list of parameter specifications, based on arguments*\n        >\n    {\n    };\n\n    typedef boost_param_params\\_ ## __LINE__ ## **name**\n        boost_param_parameters\\_ ## __LINE__ ## **name**;\n\n    template <typename Args>\n    typename boost_param_result\\_ ## __LINE__ ## **name**\\<Args>::type\n        boost_param_impl ## **name**\\(Args const&);\n\n    template <typename A0, …, typename A ## **n**>\n    **result** **name**\\(\n        A0&& a0, …, A ## **n**\\&& a ## **n**\n      , typename boost_param_parameters\\_ ## __LINE__ ## **name**\n        ::match<A0, …, A ## **n**>::type\n        = boost_param_parameters\\_ ## __LINE__ ## **name**\\()\n    )\n    {\n        return boost_param_impl ## __LINE__ ## **name**\\(\n            boost_param_parameters\\_ ## __LINE__ ## **name**\\()(\n                |std_forward|_\\<A0>(a0)\n              , …\n              , |std_forward|_\\<A ## **n**>(a ## **n**)\n            )\n        );\n    }\n\n    :vellipsis:`⋮`\n\n    template <typename A0, …, typename A ## **m**>\n    **result** **name**\\(\n        A0&& a0, …, A ## **m**\\&& a ## **m**\n      , typename boost_param_parameters\\_ ## __LINE__ ## **name**\n        ::match<A0, …, A ## **m**>::type\n        = boost_param_parameters\\_ ## __LINE__ ## **name**\\()\n    )\n    {\n        return boost_param_impl ## __LINE__ ## **name**\\(\n            boost_param_parameters\\_ ## __LINE__ ## **name**\\()(\n                |std_forward|_\\<A0>(a0)\n              , …\n              , |std_forward|_\\<A ## **m**>(a ## **m**)\n            )\n        );\n    }\n\n    template <typename Args>\n    typename boost_param_result\\_ ## __LINE__ ## **name**\\<Args>::type\n        boost_param_impl ## __LINE__ ## **name**\\(Args const& args)\n```\n\n----------------------------------------\n\nTITLE: Modeling Image View with GIL's image_view Class\nDESCRIPTION: The `image_view` class template models the ImageViewConcept using a given Locator that supports PixelLocatorConcept. It supports mutable views when user specifies a locator that models MutablePixelLocatorConcept. The class uses internal types for 2D locator positioning and stores image dimensions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/image_view.rst#2025-04-22_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\n// Locator models PixelLocatorConcept, could be MutablePixelLocatorConcept\ntemplate <typename Locator>\nclass image_view\n{\npublic:\n  typedef Locator xy_locator;\n  typedef iterator_from_2d<Locator> iterator;\n  ...\nprivate:\n  xy_locator _pixels;     // 2D pixel locator at the top left corner of the image view range\n  point_t    _dimensions; // width and height\n};\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Case-Insensitive Map Using Comparator in C++\nDESCRIPTION: Shows how to create a std::map that uses a case-insensitive comparison for string keys. This is achieved by using the comparator class with the secondary collation level.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/doc/collation.txt#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nstd::map<std::string,std::string,comparator<char,collator_base::secondary> > strings;\n// Now strings uses the default system locale for string comparison\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Initialization Requirements for Boost.Python Classes\nDESCRIPTION: Example showing how Boost.Python classes require proper initialization through __init__, as C++ instance data cannot be constructed until arguments are available.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/doc/article.rst#2025-04-22_snippet_16\n\nLANGUAGE: Python\nCODE:\n```\n>>> class D(SomeBoostPythonClass):\n...      def __init__(self):\n...          pass\n...\n>>> D().some_boost_python_method()\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in ?\nTypeError: bad argument type for built-in operation\n```\n\n----------------------------------------\n\nTITLE: Defining ptr_multimap Class in Boost C++\nDESCRIPTION: The ptr_multimap class is a template-based container that inherits from ptr_multimap_adapter and uses std::multimap to manage pointers. It offers a way to store and manipulate pointers using a key-based structure, ensuring type safety and memory management. Required dependencies include the Boost libraries.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/ptr_multimap.rst#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nnamespace boost\n{\n    template\n    < \n        class Key, \n        class T, \n        class Compare        = std::less<Key>,\n        class CloneAllocator = heap_clone_allocator,\n        class Allocator      = std::allocator< std::pair<const Key,void*> >\n    >\n    class ptr_multimap : public ptr_multimap_adapter\n                                    <\n                                        T,\n                                        std::multimap<Key,void*,Compare,Allocator>,\n                                        CloneAllocator\n                                    >\n    {\n        // see references\n        \n    }; //  class 'ptr_multimap'\n\n} // namespace 'boost'  \n```\n\n----------------------------------------\n\nTITLE: Ordering Argument Evaluation in C++\nDESCRIPTION: Shows how to use 'apply_eval' to ensure left-to-right evaluation of function arguments.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/src/more_examples.md#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\napply_eval(f, [&]{ return foo(); }, [&]{ return bar(); });\n```\n\n----------------------------------------\n\nTITLE: Implementing HTTP GET in C++\nDESCRIPTION: This C++ code snippet outlines the public interface of an HTTP library designed to handle HTTP GET requests. It utilizes a mixed-failure design pattern where common failures are indicated through `httplib::failure`, and other exceptions are thrown using STL exception types. The API facilitates fetching a URL and returns either the page contents or a failure reason.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/tutorial/advanced/interop/httplib.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nfinale.cpp\n```\n\n----------------------------------------\n\nTITLE: Running Multithreaded Asio Event Loop in C++\nDESCRIPTION: This snippet shows how to set up and run a multithreaded Asio event loop. It creates a printer object and runs the io_context in two threads to demonstrate concurrent execution of timer handlers.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/asio/example/cpp03/tutorial/timer_dox.txt#2025-04-22_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\nint main()\n{\n  boost::asio::io_context io;\n  printer p(io);\n  boost::thread t(boost::bind(&boost::asio::io_context::run, &io));\n  io.run();\n  t.join();\n\n  return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries to Executable\nDESCRIPTION: Links the `arango_tests_inspection` library and other necessary libraries to the `arangodbtests_inspection` executable. This allows the executable to utilize the functionalities provided by these libraries during runtime. These include arango_tests_inspection, arango_crashhandler_light, velocypack_utils, and gtest_main.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/Inspection/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(arangodbtests_inspection\n    arango_tests_inspection\n    arango_crashhandler_light\n    velocypack_utils\n    gtest_main)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries to ArangoDB Index Library\nDESCRIPTION: This CMake command links the `arango_indexes` library with other required libraries. These include `arango_geo` for geospatial functions, `boost_boost` for Boost libraries, `arango::validation` for data validation, `arango_replication2` for replication features, `immer` for immutable data structures, and `date_interface` for date/time functionalities.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/Indexes/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(arango_indexes\n  arango_geo\n  boost_boost\n  arango::validation\n  arango_replication2\n  immer\n  date_interface)\n```\n\n----------------------------------------\n\nTITLE: Defining a Reference Proxy Class in C++\nDESCRIPTION: This snippet demonstrates the definition of a reference proxy within an RGB planar pixel iterator. The operator* returns a reference proxy, enabling dereferencing behavior which can represent pixel data.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/technicalities.rst.txt#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n  struct rgb_planar_pixel_iterator\n  {\n   typedef my_reference_proxy<T> reference;\n   reference operator*() const { return reference(red,green,blue); }\n  };\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Options and Dependencies for S2 Geometry\nDESCRIPTION: Sets up build options for the S2 Geometry library, including optional features and required dependencies like Abseil and OpenSSL.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/s2geometry/master/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\noption(WITH_GFLAGS \"Use gflags to change command line flags.\" OFF)\noption(BUILD_SHARED_LIBS \"Build shared libraries instead of static.\" ON)\noption(BUILD_EXAMPLES \"Build s2 documentation examples.\" ON)\noption(WITH_PYTHON \"Add python interface\" OFF)\n\nif (NOT TARGET absl::base)\n    find_package(absl REQUIRED)\nendif()\nfind_package(OpenSSL REQUIRED)\nfind_package(Threads REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: Add Subdirectories\nDESCRIPTION: These commands add subdirectories to the build process.  Each subdirectory likely contains source code and CMakeLists.txt files that define how to build the components within that directory. These subdirectories are related to exceptions, replicated logs, replicated state, state machines, streams, and storage.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/Replication2/CMakeLists.txt#2025-04-22_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(Exceptions)\nadd_subdirectory(ReplicatedLog)\nadd_subdirectory(ReplicatedState)\nadd_subdirectory(StateMachines)\nadd_subdirectory(Streams)\nadd_subdirectory(Storage)\n```\n\n----------------------------------------\n\nTITLE: Defining Error Types for Actor Communication in C++\nDESCRIPTION: Lists the error types that can occur during actor communication. These error types are defined in the Message.h file and include scenarios like unknown messages, actor not found, and server not found.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/lib/Actor/README.md#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nMessage.h\n```\n\n----------------------------------------\n\nTITLE: Configuring ArangoImport Utils Library\nDESCRIPTION: Defines a static library 'arangoimport_utils' containing utility functions shared with arangosh. Includes core files for import operations and sets up include directories and dependencies.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/client-tools/Import/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(arangoimport_utils OBJECT\n  AutoTuneThread.cpp\n  ImportHelper.cpp\n  SenderThread.cpp)\ntarget_include_directories(arangoimport_utils PRIVATE ${PROJECT_SOURCE_DIR}/client-tools)\ntarget_link_libraries(arangoimport_utils \n    arango_basic_utils\n    arango_basic_errors\n    arango_basic_logger\n)\n```\n\n----------------------------------------\n\nTITLE: Access Template Interface Implementation in C++\nDESCRIPTION: Defines the full interface of the Access template struct with methods for saving and loading fields with various transformations and fallbacks.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/lib/Inspection/include/Inspection/README.md#2025-04-22_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <class T>\nstruct Access {\n  template <class Inspector>\n  static bool apply(Inspector& f, T& x);\n\n  template<class Inspector>\n  static auto saveField(Inspector& f, std::string_view name,\n                        bool hasFallback, Value& val);\n\n  template<class Inspector, class Transformer>\n  static auto saveTransformedField(Inspector& f,\n                                   std::string_view name,\n                                   bool hasFallback, Value& val,\n                                   Transformer& transformer);\n\n  template<class Inspector>\n  static Status loadField(Inspector& f, std::string_view name,\n                          bool isPresent, Value& val);\n\n  template<class Inspector, class ApplyFallback>\n  static Status loadField(Inspector& f, std::string_view name,\n                          bool isPresent, Value& val,\n                          ApplyFallback&& applyFallback);\n\n  template<class Inspector, class Transformer>\n  static auto loadTransformedField(Inspector& f,\n                                   std::string_view name,\n                                   bool isPresent, Value& val,\n                                   Transformer& transformer);\n\n  template<class Inspector, class ApplyFallback, class Transformer>\n  static Status loadTransformedField(\n      Inspector& f, std::string_view name, bool isPresent, Value& val,\n      ApplyFallback&& applyFallback, Transformer& transformer);\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Copy Constructor for basic_result Class in C++\nDESCRIPTION: Copy constructor that requires both value_type and error_type to be copy constructible. The implementation propagates constexpr, triviality and noexcept properties from the underlying types. In case of exceptions, follows standard struct copy construction partial completion rules.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/basic_result/copy_constructor.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nbasic_result(const basic_result &)\n```\n\n----------------------------------------\n\nTITLE: Basic Implementation of X Gradient Function\nDESCRIPTION: This snippet depicts a basic method for calculating the horizontal gradient of a grayscale image. It demonstrates a simple nested loop structure to compute the gradient values for each pixel.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/tutorial/gradient.rst.txt#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nvoid x_gradient(gray8c_view_t const& src, gray8s_view_t const& dst)\n{\n    for (int y = 0; y < src.height(); ++y)\n        for (int x = 1; x < src.width() - 1; ++x)\n            dst(x, y) = (src(x-1, y) - src(x+1, y)) / 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Generic Image Gradient Function in C++ using GIL\nDESCRIPTION: Define a template function 'x_gradient' that computes image gradients. It supports the use of GIL’s concept checks to ensure compatibility and requires no specific construct of GIL, though it must adhere to GIL concepts. This function handles arbitrary channels by looping through them efficiently.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/tutorial/gradient.rst#2025-04-22_snippet_8\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <typename SrcView, typename DstView>\nvoid x_gradient(const SrcView& src, const DstView& dst)\n{\n  gil_function_requires<ImageViewConcept<SrcView> >();\n  gil_function_requires<MutableImageViewConcept<DstView> >();\n  gil_function_requires<\n    ColorSpacesCompatibleConcept<\n      typename color_space_type<SrcView>::type,\n      typename color_space_type<DstView>::type\n    >\n  >();\n\n  ... // compute the gradient\n}\n```\n\n----------------------------------------\n\nTITLE: Example Constructor Implementation with Named Parameters\nDESCRIPTION: Demonstrates implementation of a char_reader class using BOOST_PARAMETER_CONSTRUCTOR with named parameters and deduced arguments.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_41\n\nLANGUAGE: cpp\nCODE:\n```\nclass char_read_base\n{\n    int index;\n    char const* key;\n\n public:\n    template <typename Args>\n    explicit char_read_base(Args const& args)\n      : index(args[_y]), key(args[_z])\n    {\n    }\n\n    BOOST_PARAMETER_CONST_FUNCTION_CALL_OPERATOR((char), tag,\n        (deduced\n            (required\n                (y, (bool))\n                (z, (std_map<char const*, std_string>))\n            )\n        )\n    )\n    {\n        return y ? (\n            (z.find(this->key)->second)[this->index]\n        ) : this->key[this->index];\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Constructing the Graph for Shortest Path Calculation C++\nDESCRIPTION: This snippet creates a graph by defining the nodes and edges and their weights. It constructs the graph using an edge array and a weights array, enabling the calculation of shortest paths using Dijkstra's algorithm.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/dijkstra_example.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ntypedef std::pair<int, int> Edge;\n  const int num_nodes = 5;\n  enum nodes { A, B, C, D, E };\n  char name[] = \"ABCDE\";\n  Edge edge_array[] = { Edge(A, C), Edge(B, B), Edge(B, D), Edge(B, E),\n    Edge(C, B), Edge(C, D), Edge(D, E), Edge(E, A), Edge(E, B)\n  };\n  int weights[] = { 1, 2, 1, 2, 7, 3, 1, 1, 1 };\n  int num_arcs = sizeof(edge_array) / sizeof(Edge);\n\n  graph_t g(edge_array, edge_array + num_arcs, weights, num_nodes);\n```\n\n----------------------------------------\n\nTITLE: Formatting Date and Time with Boost.Locale in C++\nDESCRIPTION: Illustrates how to format date and time using Boost.Locale manipulators. The example shows formatting current date, time, and weekday using different manipulators.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/doc/formatting_and_parsing.txt#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntime_t now=time(0);\ncout << \"Today is \"<< as::date << now << \" and tomorrow is \" << now+24*3600 << endl;\ncout << \"Current time is \"<< as::time << now << endl;\ncout << \"The current weekday is \"<< as::ftime(\"%A\") << now << endl;\n```\n\n----------------------------------------\n\nTITLE: Boost.Python Module Definition with Function Binding\nDESCRIPTION: Defines a Boost.Python module called 'my_module' that exports a class 'window' with the 'open' function bound using 'boost::parameter::python::function'. It uses namespace aliases and MPL sequences to specify the parameter types and handle optional arguments.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter_python/doc/index.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_PYTHON_MODULE(my_module)\\n{\\n    using namespace boost::python;\\n    namespace py = boost::parameter::python;\\n    namespace mpl = boost::mpl;\\n\\n    class_<window>(\"window\")\\n        .def(\\n            \"open\", py::function<\\n                open_fwd\\n              , mpl::vector<\\n                    void\\n                  , tag::title(std::string)\\n                  , tag::width*(unsigned)\\n                  , tag::height*(unsigned)\\n              >()\\n        );\\n}\n```\n\n----------------------------------------\n\nTITLE: Optimized Luminosity Gradient Using Temporary Buffer\nDESCRIPTION: Improves performance by using a temporary image buffer to store the color-converted result. This implementation avoids performing color conversion twice for each pixel during the gradient operation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/tutorial/gradient.rst#2025-04-22_snippet_18\n\nLANGUAGE: cpp\nCODE:\n```\nvoid x_luminosity_gradient(rgb32fc_view_t const& src, gray8s_view_t const& dst)\n{\n  gray8_image_t ccv_image(src.dimensions());\n  copy_pixels(color_converted_view<gray8_pixel_t>(src), view(ccv_image));\n\n  x_gradient(const_view(ccv_image), dst);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Target Sources for C++ ArangoDB Replication\nDESCRIPTION: This snippet specifies the source files for the ArangoDB replication component. It includes various files essential for the system's functionality such as transaction management, document handling, and state management. The 'target_sources' command groups these files for compilation within the project, indicating all are part of the private interface of the replication2 module.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/Replication2/StateMachines/Document/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntarget_sources(arango_replication2 PRIVATE\n  ActiveTransactionsQueue.cpp\n  CollectionReader.cpp\n  DocumentCore.cpp\n  DocumentStateErrorHandler.cpp\n  DocumentFollowerState.cpp\n  DocumentLeaderState.cpp\n  DocumentLogEntry.cpp\n  DocumentStateHandlersFactory.cpp\n  DocumentStateMachine.cpp\n  DocumentStateMachineFeature.cpp\n  DocumentStateMethods.cpp\n  DocumentStateNetworkHandler.cpp\n  DocumentStateShardHandler.cpp\n  DocumentStateSnapshot.cpp\n  DocumentStateSnapshotHandler.cpp\n  DocumentStateTransaction.cpp\n  DocumentStateTransactionHandler.cpp\n  ReplicatedOperation.cpp\n  MaintenanceActionExecutor.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring Synchronous SSL WebSocket Server with CMake\nDESCRIPTION: This CMake snippet configures a synchronous SSL-enabled WebSocket server example. It groups source files, defines the executable target, sets folder properties, and links necessary libraries including OpenSSL. The configuration only runs if OpenSSL is found on the system.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/beast/example/websocket/server/sync-ssl/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif (OPENSSL_FOUND)\n    GroupSources(include/boost/beast beast)\n    GroupSources(example/common common)\n    GroupSources(example/websocket/server/sync-ssl \"/\")\n\n    add_executable (websocket-server-sync-ssl\n        ${BOOST_BEAST_FILES}\n        ${PROJECT_SOURCE_DIR}/example/common/server_certificate.hpp\n        Jamfile\n        websocket_server_sync_ssl.cpp\n    )\n\n    set_property(TARGET websocket-server-sync-ssl PROPERTY FOLDER \"example-websocket-server\")\n\n    target_link_libraries (websocket-server-sync-ssl\n        OpenSSL::SSL OpenSSL::Crypto\n        lib-asio\n        lib-asio-ssl\n        lib-beast\n        )\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Cache-Friendly Implementation of Y Gradient Function\nDESCRIPTION: This optimized version of the y gradient computation iterates over the rows in an outer loop to enhance cache performance during pixel access, reducing memory access overhead.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/tutorial/gradient.rst.txt#2025-04-22_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\nvoid y_gradient(gray8c_view_t const& src, gray8s_view_t const& dst)\n{\n    for (int y = 1; y < src.height() - 1; ++y)\n    {\n        gray8c_view_t::x_iterator src1_it = src.row_begin(y-1);\n        gray8c_view_t::x_iterator src2_it = src.row_begin(y+1);\n        gray8s_view_t::x_iterator dst_it = dst.row_begin(y);\n\n        for (int x = 0; x < src.width(); ++x)\n        {\n            *dst_it = ((*src1_it) - (*src2_it)) / 2;\n            ++dst_it;\n            ++src1_it;\n            ++src2_it;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: RandomAccessNDImageConcept Definition\nDESCRIPTION: This code defines the `RandomAccessNDImageConcept` which outlines the requirements for N-dimensional images in GIL. It specifies associated types like `view_t`, `const_view_t`, `point_t`, `value_type`, and `allocator_type`. It also defines constructors and methods for image creation, recreation, accessing dimensions, and obtaining const and mutable views.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/image.rst.txt#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nconcept RandomAccessNDImageConcept<typename Img> : Regular<Img>\n{\n  typename view_t; where MutableRandomAccessNDImageViewConcept<view_t>;\n  typename const_view_t = view_t::const_t;\n  typename point_t      = view_t::point_t;\n  typename value_type   = view_t::value_type;\n  typename allocator_type;\n\n  Img::Img(point_t dims, std::size_t alignment=0);\n  Img::Img(point_t dims, value_type fill_value, std::size_t alignment);\n\n  void Img::recreate(point_t new_dims, std::size_t alignment=0);\n  void Img::recreate(point_t new_dims, value_type fill_value, std::size_t alignment);\n\n  const point_t&        Img::dimensions() const;\n  const const_view_t&   const_view(const Img&);\n  const view_t&         view(Img&);\n};\n```\n\n----------------------------------------\n\nTITLE: Defining N-Dimensional Random Access Locator Concept in C++\nDESCRIPTION: This snippet defines the RandomAccessNDLocatorConcept in C++, specifying the requirements and functionalities for N-dimensional locators. It captures various attributes and operator overloads necessary for iterator-like behavior, maximum flexibility of data access, and dereferencing.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/pixel_locator.rst#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n  concept RandomAccessNDLocatorConcept<Regular Loc> {\n    typename value_type;        // value over which the locator navigates\n    typename reference;         // result of dereferencing\n    typename difference_type; where PointNDConcept<difference_type>; // return value of operator-.\n    typename const_t;           // same as Loc, but operating over immutable values\n    typename cached_location_t; // type to store relative location (for efficient repeated access)\n    typename point_t  = difference_type;\n\n    static const size_t num_dimensions; // dimensionality of the locator\n    where num_dimensions = point_t::num_dimensions;\n\n    // The difference_type and iterator type along each dimension. The iterators may only differ in\n    // difference_type. Their value_type must be the same as Loc::value_type\n    template <size_t D> struct axis {\n        typename coord_t = point_t::axis<D>::coord_t;\n        typename iterator; where RandomAccessTraversalConcept<iterator>; // iterator along D-th axis.\n        where iterator::value_type == value_type;\n    };\n\n    // Defines the type of a locator similar to this type, except it invokes Deref upon dereferencing\n    template <PixelDereferenceAdaptorConcept Deref> struct add_deref {\n        typename type;        where RandomAccessNDLocatorConcept<type>;\n        static type make(const Loc& loc, const Deref& deref);\n    };\n\n    Loc& operator+=(Loc&, const difference_type&);\n    Loc& operator-=(Loc&, const difference_type&);\n    Loc operator+(const Loc&, const difference_type&);\n    Loc operator-(const Loc&, const difference_type&);\n\n    reference operator*(const Loc&);\n    reference operator[](const Loc&, const difference_type&);\n\n    // Storing relative location for faster repeated access and accessing it\n    cached_location_t Loc::cache_location(const difference_type&) const;\n    reference operator[](const Loc&,const cached_location_t&);\n\n    // Accessing iterators along a given dimension at the current location or at a given offset\n    template <size_t D> axis<D>::iterator&       Loc::axis_iterator();\n    template <size_t D> axis<D>::iterator const& Loc::axis_iterator() const;\n    template <size_t D> axis<D>::iterator        Loc::axis_iterator(const difference_type&) const;\n  };\n```\n\n----------------------------------------\n\nTITLE: Implementing Node Iterator with Boost Iterator Facade\nDESCRIPTION: Forward iterator implementation for node_base using Boost's iterator_facade with core iterator operations.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/iterator_facade_tutorial.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nclass node_iterator\n  : public boost::iterator_facade<\n        node_iterator\n      , node_base\n      , boost::forward_traversal_tag\n    >\n{\n public:\n    node_iterator()\n      : m_node(0) {}\n    explicit node_iterator(node_base* p)\n      : m_node(p) {}\n private:\n    friend class boost::iterator_core_access;\n    void increment() { m_node = m_node->next(); }\n    bool equal(node_iterator const& other) const\n    {\n        return this->m_node == other.m_node;\n    }\n    node_base& dereference() const { return *m_node; }\n    node_base* m_node;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Base Reverse Fold Structure in C++\nDESCRIPTION: Core implementation of the reverse fold operation. Provides a variadic template structure that recursively applies a binary function to arguments in reverse order.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/reverse_fold.hpp.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nstruct v_reverse_fold\n{\n    BOOST_HOF_RETURNS_CLASS(v_reverse_fold);\n    template<class F, class State, class T, class... Ts>\n    constexpr BOOST_HOF_SFINAE_MANUAL_RESULT(const F&, result_of<const v_reverse_fold&, id_<const F&>, id_<State>, id_<Ts>...>, id_<T>)\n    operator()(const F& f, State&& state, T&& x, Ts&&... xs) const BOOST_HOF_SFINAE_MANUAL_RETURNS\n    (\n        f((*BOOST_HOF_CONST_THIS)(f, BOOST_HOF_FORWARD(State)(state), BOOST_HOF_FORWARD(Ts)(xs)...), BOOST_HOF_FORWARD(T)(x))\n    );\n\n    template<class F, class State>\n    constexpr State operator()(const F&, State&& state) const noexcept\n    {\n        return BOOST_HOF_FORWARD(State)(state);\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Deriving Image Type in GIL (C++)\nDESCRIPTION: This template structure defines a metafunction in the Generic Image Library (GIL) to derive a new image type from an existing one. It allows changing properties like channel value, layout, and planarity. This function facilitates generating specialized image types for diverse image processing scenarios.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/metafunctions.rst#2025-04-22_snippet_9\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <typename Image,\n        typename ChannelValue, typename Layout, typename IsPlanar>\nstruct derived_image_type\n{\n  typedef ... type;  // Models ImageConcept\n};\n```\n\n----------------------------------------\n\nTITLE: Registering a Simple C++ Struct in Boost.Python\nDESCRIPTION: Demonstrates the basic process of registering a simple C++ struct with Boost.Python, showing how a new Python class type is created and associated with a C++ struct\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/doc/internals.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nstruct boring {};\nclass_<boring>(\"boring\")\n    ;\n```\n\n----------------------------------------\n\nTITLE: Building ArangoShell Executable with V8 Support\nDESCRIPTION: Creates the main ArangoShell executable with V8 support, including all necessary source files and conditional components for failure testing.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/client-tools/Shell/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif (USE_V8)\n  add_executable(${BIN_ARANGOSH}\n    ${ProductVersionFiles_arangosh}\n\n    ShellFeature.cpp\n    TelemetricsHandler.cpp\n    V8ClientConnection.cpp\n    V8ShellFeature.cpp\n    ProcessMonitoringFeature.cpp\n    arangosh.cpp\n    v8-deadline.cpp\n  )\n\n  if (USE_FAILURE_TESTS)\n      target_sources(${BIN_ARANGOSH} PRIVATE RequestFuzzer.cpp)\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Function Calls with Positional Arguments in C++\nDESCRIPTION: This snippet shows different ways to call the `evaluate` function defined earlier, using positional arguments. It demonstrates calls with both full and partial argument lists.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_31\n\nLANGUAGE: cpp\nCODE:\n```\n\"    B const b = B();\n    b.evaluate(  // positional arguments\n        lvalue_const_bitset<0>()\n      , lvalue_bitset<1>()\n      , rvalue_const_bitset<2>()\n      , rvalue_bitset<3>()\n    );\n    b.evaluate(  // positional arguments\n        lvalue_const_bitset<0>()\n      , lvalue_bitset<1>()\n    );\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Bitwise OR Operator Overloads in Boost Parameter Library C++\nDESCRIPTION: Defines multiple overloads of the bitwise OR operator for the keyword template, returning tagged default objects. The requirements depend on Tag qualifiers and apply differently to const/non-const lvalue and rvalue references.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <typename T>\nconstexpr *tagged default* operator|(T const& x) const;\n\ntemplate <typename T>\nconstexpr *tagged default* operator|(T& x) const;\n\ntemplate <typename T>\nconstexpr *tagged default* operator|(T const&& x) const;\n\ntemplate <typename T>\nconstexpr *tagged default* operator|(T&& x) const;\n```\n\n----------------------------------------\n\nTITLE: Y Gradient Implementation with Boost GIL using Locators\nDESCRIPTION: This C++ code implements the vertical gradient computation using GIL locators. It initializes a locator to the first pixel of the second row. The code iterates through each row (excluding the boundary rows) and each pixel in the row, calculating the gradient using the locator to access the pixels above and below the current pixel. The locator is then advanced to the next pixel.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/tutorial/gradient.rst#2025-04-22_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\nvoid y_gradient(gray8c_view_t const& src, gray8s_view_t const& dst)\n{\n  gray8c_view_t::xy_locator src_loc = src.xy_at(0,1);\n  for (int y = 1; y < src.height() - 1; ++y)\n  {\n      gray8s_view_t::x_iterator dst_it  = dst.row_begin(y);\n\n      for (int x = 0; x < src.width(); ++x)\n  {\n          (*dst_it) = (src_loc(0,-1) - src_loc(0,1)) / 2;\n          ++dst_it;\n          ++src_loc.x(); // each dimension can be advanced separately\n      }\n      src_loc+=point<std::ptrdiff_t>(-src.width(), 1); // carriage return\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Usage of erase Metafunction in C++\nDESCRIPTION: Provides a complete example of using the erase metafunction to remove an element from a vector of integers and verify the result.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/erase.rst#2025-04-22_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\ntypedef vector_c<int,1,0,5,1,7,5,0,5> values;\ntypedef find< values, integral_c<int,7> >::type pos;\ntypedef erase<values,pos>::type result;\n\nBOOST_MPL_ASSERT_RELATION( size<result>::value, ==, 7 );\n\ntypedef find<result, integral_c<int,7> >::type iter;\nBOOST_MPL_ASSERT(( is_same< iter, end<result>::type > ));\n```\n\n----------------------------------------\n\nTITLE: Comparing Error Checking Syntax in LEAF and Boost Outcome\nDESCRIPTION: Demonstrates the syntax for checking errors and forwarding failures in both LEAF and Boost Outcome libraries. Both use similar macro-based approaches for error handling.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/leaf/benchmark/benchmark.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n// Outcome\n{\n  BOOST_OUTCOME_TRY(v, f()); // Check for errors, forward failures to the caller\n  // If control reaches here, v is the successful result (the call succeeded).\n}\n\n// LEAF\n{\n  BOOST_LEAF_AUTO(v, f()); // Check for errors, forward failures to the caller\n  // If control reaches here, v is the successful result (the call succeeded).\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom NumPy dtype\nDESCRIPTION: This snippet demonstrates creating a custom NumPy dtype with a single field named \"ha\" of type `double` using Boost.Python. It constructs a Python tuple containing the field name and dtype, adds the tuple to a Python list, and then uses the list to create the custom dtype. The `dtype` variable must already be defined as `np::dtype::get_builtin<double>()`.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/doc/numpy/tutorial/dtype.rst#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\n  p::tuple for_custom_dtype = p::make_tuple(\"ha\",dtype) ;\n\n  p::list list_for_dtype ;\n  list_for_dtype.append(for_custom_dtype) ;\n  np::dtype custom_dtype = np::dtype(list_for_dtype) ;\n```\n\n----------------------------------------\n\nTITLE: Computing Sub-Region Histogram in GIL\nDESCRIPTION: This example demonstrates how to compute a histogram for a sub-region of an image using GIL. The `grayimage_histogram` function processes every other row and column in the top-left quadrant of the image, focusing on the second channel. It operates directly on the source pixels without allocating extra memory.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/tutorial/histogram.rst.txt#2025-04-22_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\ngrayimage_histogram( nth_channel_view( subsampled_view( subimage_view(img, 0,0, img.width() / 2, img.height() / 2), // upper left quadrant 2, 2 // skip every other row and column ), 1 // index of the second channel (for example, green for RGB) ), hist );\n```\n\n----------------------------------------\n\nTITLE: Constructors for Boost.Python NumPy Dtype in C++\nDESCRIPTION: The constructor is templated to accept a type `T` which must be convertible to a Python object. It constructs a `dtype` object that can represent the data structure in NumPy.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/doc/html/numpy/_sources/reference/dtype.rst.txt#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n::\n\n  template <typename T>\n  explicit dtype(T arg, bool align=false)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Fuerte Test\nDESCRIPTION: Configures the include paths for the fuertetest build, including system directories, Fuerte source files, and project library files.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/Fuerte/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(fuertetest SYSTEM PRIVATE\n  ${INCLUDE_DIRECTORIES}\n  ${CMAKE_SOURCE_DIR}/3rdParty/fuerte/src\n  ${PROJECT_SOURCE_DIR}/lib\n)\n```\n\n----------------------------------------\n\nTITLE: Boost.Python Wrapping\nDESCRIPTION: This code snippet showcases how to wrap the `greet` function using Boost.Python. It includes the necessary header, uses the `boost::python` namespace, and defines a Python module named \"hello\" using `BOOST_PYTHON_MODULE`. Within the module definition, the `def` function is used to expose the `greet` function to Python with a specified docstring.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/doc/article.rst#2025-04-22_snippet_2\n\nLANGUAGE: c++\nCODE:\n```\n    #include <boost/python.hpp>\n    using namespace boost::python;\n    BOOST_PYTHON_MODULE(hello)\n    {\n        def(\"greet\", greet, \"return one of 3 parts of a greeting\");\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Object Inspection in C++\nDESCRIPTION: Demonstrates how to create a basic struct with an inspect function for serialization. Shows the implementation of a VertexDescription struct with string_view, uint64_t, and double fields.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/lib/Inspection/include/Inspection/README.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nstruct VertexDescription {\n  std::string_view id;\n  uint64_t depth;\n  double weight;\n};\n\ntemplate<class Inspector>\nauto inspect(Inspector& f, VertexDescription& description) {\n  return f.object(description)\n      .fields(f.field(\"vId\", description.id),\n              f.field(\"depth\", description.depth),\n              f.field(\"weight\", description.weight));\n}\n```\n\n----------------------------------------\n\nTITLE: Linking ArangoDB Cluster Engine Libraries\nDESCRIPTION: Links the arango_cluster_engine library against other ArangoDB libraries and boost. These dependencies provide necessary functionalities such as health checks, index management, and general utility functions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/ClusterEngine/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(arango_cluster_engine\n  arango_health\n  arango_indexes\n  boost_boost)\n```\n\n----------------------------------------\n\nTITLE: Using eval_if Metafunction in C++\nDESCRIPTION: Demonstrates the usage of eval_if metafunction to conditionally evaluate one of two nullary metafunctions based on a boolean condition. The example shows how to use it with true_ and false_ constants, and the identity metafunction.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/eval_if.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntypedef eval_if< true_, identity<char>, identity<long> >::type t1;\ntypedef eval_if< false_, identity<char>, identity<long> >::type t2;\n\nBOOST_MPL_ASSERT(( is_same<t1,char> ));\nBOOST_MPL_ASSERT(( is_same<t2,long> ));\n```\n\n----------------------------------------\n\nTITLE: Conditional Code Execution Based on View Mutability in GIL (C++)\nDESCRIPTION: This code snippet demonstrates how to conditionally execute code based on the mutability of a GIL view type. It uses `view_is_mutable<View>::value` to check if the `View` is mutable at compile time, and executes the code block within the `if` statement only if the view is indeed mutable.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/metafunctions.rst#2025-04-22_snippet_11\n\nLANGUAGE: cpp\nCODE:\n```\nif (view_is_mutable<View>::value)\n{\n ...\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Thread Leaks in Cluster Features - C++\nDESCRIPTION: This snippet contains references to functions that are responsible for starting various heartbeat and caching threads within cluster features, indicating known issues that require rectification of thread leaks.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tsan_arangodb_suppressions.txt#2025-04-22_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\n// TODO Fix known thread leaks\nthread:ClusterFeature::startHeartbeatThread\nthread:CacheManagerFeature::start\nthread:DatabaseFeature::start\n```\n\n----------------------------------------\n\nTITLE: Using Boost Counting Iterator and Indirect Iterator in C++\nDESCRIPTION: This code snippet demonstrates how to use Boost's counting_iterator to fill vectors and indirect_iterator to print values indirectly. It creates a vector of integers, a vector of iterators to those integers, and then prints the integers using indirection.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/counting_iterator_eg.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nint N = 7;\nstd::vector<int> numbers;\ntypedef std::vector<int>::iterator n_iter;\nstd::copy(boost::counting_iterator<int>(0),\n         boost::counting_iterator<int>(N),\n         std::back_inserter(numbers));\n\nstd::vector<std::vector<int>::iterator> pointers;\nstd::copy(boost::make_counting_iterator(numbers.begin()),\n\t      boost::make_counting_iterator(numbers.end()),\n\t      std::back_inserter(pointers));\n\nstd::cout << \"indirectly printing out the numbers from 0 to \" \n\t      << N << std::endl;\nstd::copy(boost::make_indirect_iterator(pointers.begin()),\n\t      boost::make_indirect_iterator(pointers.end()),\n\t      std::ostream_iterator<int>(std::cout, \" \"));\nstd::cout << std::endl;\n```\n\n----------------------------------------\n\nTITLE: Defining Non-Distributed Betweenness Centrality with Centrality Map and Buffer in C++\nDESCRIPTION: This function template allows the computation of betweenness centrality while specifying a centrality map and a buffer of source vertices. It emphasizes flexible customization for effective parallel processing of the graph data.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/non_distributed_betweenness_centrality.rst#2025-04-22_snippet_1\n\nLANGUAGE: c++\nCODE:\n```\ntemplate<typename ProcessGroup, typename Graph, typename CentralityMap, \n           typename Buffer>\nvoid \nnon_distributed_brandes_betweenness_centrality(const ProcessGroup& pg, const Graph& g, \n                                                 CentralityMap centrality, Buffer sources);\n```\n\n----------------------------------------\n\nTITLE: New Window Example with Named Arguments\nDESCRIPTION: This code snippet demonstrates how to use named arguments with the Boost Parameter Library. It shows how to create a new window with specified width and titlebar settings using named parameters.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/index.rst#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nnew_window(\n        \"alert\"\n      , **_width=10**\n      , **_titlebar=false**\n    );\n```\n\n----------------------------------------\n\nTITLE: Defining Result Template\nDESCRIPTION: Defines a template alias for a result type that includes success and error types, utilizing default parameters for error codes and value policies.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/tutorial/essential/result/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <typename T, typename E = std::error_code, typename NoValuePolicy = policy::default_policy<T, E, void>> result<T, E, NoValuePolicy>\n```\n\n----------------------------------------\n\nTITLE: Initializing Printer Class with Timers and Strand in C++\nDESCRIPTION: This snippet defines a printer class that manages two timers and a strand for synchronization. It demonstrates how to set up the timers and bind their handlers to the strand for thread-safe execution.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/asio/example/cpp03/tutorial/timer_dox.txt#2025-04-22_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/asio.hpp>\n#include <boost/bind/bind.hpp>\n\nclass printer\n{\npublic:\n  printer(boost::asio::io_context& io)\n    : strand_(boost::asio::make_strand(io)),\n      timer1_(io, boost::asio::chrono::seconds(1)),\n      timer2_(io, boost::asio::chrono::seconds(1)),\n      count_(0)\n  {\n    timer1_.async_wait(boost::asio::bind_executor(strand_,\n          boost::bind(&printer::print1, this)));\n\n    timer2_.async_wait(boost::asio::bind_executor(strand_,\n          boost::bind(&printer::print2, this)));\n  }\n\n  ~printer()\n  {\n    std::cout << \"Final count is \" << count_ << std::endl;\n  }\n\n  void print1()\n  {\n    if (count_ < 10)\n    {\n      std::cout << \"Timer 1: \" << count_ << std::endl;\n      ++count_;\n\n      timer1_.expires_at(timer1_.expiry() + boost::asio::chrono::seconds(1));\n\n      timer1_.async_wait(boost::asio::bind_executor(strand_,\n            boost::bind(&printer::print1, this)));\n    }\n  }\n\n  void print2()\n  {\n    if (count_ < 10)\n    {\n      std::cout << \"Timer 2: \" << count_ << std::endl;\n      ++count_;\n\n      timer2_.expires_at(timer2_.expiry() + boost::asio::chrono::seconds(1));\n\n      timer2_.async_wait(boost::asio::bind_executor(strand_,\n            boost::bind(&printer::print2, this)));\n    }\n  }\n\nprivate:\n  boost::asio::strand<boost::asio::io_context::executor_type> strand_;\n  boost::asio::steady_timer timer1_;\n  boost::asio::steady_timer timer2_;\n  int count_;\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Function Factory for Limit Adapters in C++\nDESCRIPTION: Defines the make_limit_f class template which creates limit_adaptor instances. This factory is templated with the maximum number of parameters and creates the appropriate adapter when called with a function.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/limit.hpp.txt#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<std::size_t N>\nstruct make_limit_f\n{\n    constexpr make_limit_f()\n    {}\n    template<class F>\n    constexpr limit_adaptor<N, F> operator()(F f) const\n    {\n        return limit_adaptor<N, F>(static_cast<F&&>(f));\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a Polymorphic Class with Virtual Function Forwarding in C++\nDESCRIPTION: This snippet demonstrates how to define a polymorphic class in C++, making virtual functions private while providing a public non-virtual forwarding function. This pattern ensures all calls to the virtual function go through a single access point, allowing for precondition and postcondition checks.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/guidelines.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nclass Polymorphic\n{\nprivate:\n    virtual int do_foo() = 0;\n    \npublic:\n    int foo()\n    {\n        return do_foo();\n    }\n    ...\n};\n```\n\n----------------------------------------\n\nTITLE: Using GIL Color Convert Algorithm in C++\nDESCRIPTION: This snippet uses the GIL library\\'s color_convert algorithm to transform a pixel in RGB color space to CMYK color space. It highlights the conversion abilities provided by the GIL library for handling different pixel formats.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/pixel.rst#2025-04-22_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\nrgb8_pixel_t red_in_rgb8(255,0,0);\ncmyk16_pixel_t red_in_cmyk16;\ncolor_convert(red_in_rgb8,red_in_cmyk16);\n```\n\n----------------------------------------\n\nTITLE: Defining min_element Template in C++\nDESCRIPTION: Defines the min_element template struct that finds the smallest element in a sequence based on a predicate. It takes a Sequence and an optional Pred parameter, with the result stored in the 'type' typedef.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/min_element.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      typename Sequence\n    , typename Pred = less<_1,_2>\n    >\nstruct min_element\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Caching Neighbor Pixel Locations in C++\nDESCRIPTION: This snippet demonstrates how to use locators to cache the locations of neighboring pixels in an image. It shows how to manipulate the current pixel location and compute the average of its neighbors for grayscale images, enhancing performance by caching relative positions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/pixel_locator.rst#2025-04-22_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\n  loc=img.xy_at(10,10);            // start at pixel (x=10,y=10)\n  above=loc.cache_location(0,-1);  // remember relative locations of neighbors above and below\n  below=loc.cache_location(0, 1);\n  ++loc.x();                       // move to (11,10)\n  loc.y()+=15;                     // move to (11,25)\n  loc-=point<std::ptrdiff_t>(1,1);// move to (10,24)\n  *loc=(loc(0,-1)+loc(0,1))/2;     // set pixel (10,24) to the average of (10,23) and (10,25) (grayscale pixels only)\n  *loc=(loc[above]+loc[below])/2;  // the same, but faster using cached relative neighbor locations\n```\n\n----------------------------------------\n\nTITLE: Dense Boruvka MST Algorithm Declaration\nDESCRIPTION: These are the function declarations for the dense Boruvka minimum spanning tree algorithm in the Parallel BGL. The algorithm computes the minimum spanning forest of a distributed graph.  Multiple overloads are provided to allow for optional parameters like VertexIndexMap, RankMap, ParentMap, and SupervertexMap.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/dehne_gotz_min_spanning_tree.rst#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nnamespace graph {\n    template<typename Graph, typename WeightMap, typename OutputIterator, \n             typename VertexIndexMap, typename RankMap, typename ParentMap, \n             typename SupervertexMap>\n    OutputIterator\n    dense_boruvka_minimum_spanning_tree(const Graph& g, WeightMap weight_map,\n                                      OutputIterator out, \n                                      VertexIndexMap index,\n                                      RankMap rank_map, ParentMap parent_map,\n                                      SupervertexMap supervertex_map);\n\n    template<typename Graph, typename WeightMap, typename OutputIterator, \n             typename VertexIndex>\n    OutputIterator\n    dense_boruvka_minimum_spanning_tree(const Graph& g, WeightMap weight_map,\n                                      OutputIterator out, VertexIndex index);\n\n    template<typename Graph, typename WeightMap, typename OutputIterator>\n    OutputIterator\n    dense_boruvka_minimum_spanning_tree(const Graph& g, WeightMap weight_map,\n                                      OutputIterator out);\n  }\n```\n\n----------------------------------------\n\nTITLE: Distributed BFS Visitor Example\nDESCRIPTION: This example shows the adapted BFS visitor for distributed BFS, calculating distances from the source. The key change is setting the `vertex_distance` property map role, which introduces a reduction operation to resolve multiple distance values. This ensures the shortest distance is always chosen when multiple processes update the distance map.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/breadth_first_search.rst#2025-04-22_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate<typename DistanceMap>\nstruct bfs_discovery_visitor : bfs_visitor<> \n{\n  bfs_discovery_visitor(DistanceMap distance) : distance(distance) \n  {\n    set_property_map_role(vertex_distance, distance);\n  }\n\n  template<typename Edge, typename Graph>\n  void tree_edge(Edge e, const Graph& g)\n  {\n    std::size_t new_distance = get(distance, source(e, g)) + 1;\n    put(distance, target(e, g), new_distance);\n  }\n  \n private:\n  DistanceMap distance;\n};\n```\n\n----------------------------------------\n\nTITLE: Mixing Multiple Localization Backends in C++\nDESCRIPTION: This code snippet shows how to create a mixture of localization backends, using std as the default for all categories and icu specifically for boundary analysis.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/doc/using_localization_backends.txt#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nlocalization_backend_manager my = localization_backend_manager::global(); \n// Get global backend\n\nmy.select(\"std\"); \n// select std backend as default for all categories\nmy.select(\"icu\",boundary_facet); \n// select icu backend for boundary analysis (since it is not supported by \\c std)\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost Date Time Library Build with CMake\nDESCRIPTION: CMake configuration for building the Boost Date Time library. Sets up the library target with required Boost dependencies, include paths, and compilation definitions. Handles both shared and static library builds with appropriate macro definitions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/date_time/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.16)\n\nproject(boost_date_time VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n\nadd_library(boost_date_time\n  src/gregorian/greg_month.cpp\n)\n\nadd_library(Boost::date_time ALIAS boost_date_time)\n\ntarget_include_directories(boost_date_time PUBLIC include)\n\ntarget_link_libraries(boost_date_time\n  PUBLIC\n    Boost::algorithm\n    Boost::assert\n    Boost::config\n    Boost::core\n    Boost::io\n    Boost::lexical_cast\n    Boost::numeric_conversion\n    Boost::range\n    Boost::smart_ptr\n    Boost::static_assert\n    Boost::throw_exception\n    Boost::tokenizer\n    Boost::type_traits\n    Boost::utility\n    Boost::winapi\n)\n\ntarget_compile_definitions(boost_date_time\n  PUBLIC BOOST_DATE_TIME_NO_LIB\n  PRIVATE BOOST_DATE_TIME_SOURCE\n)\n\nif(BUILD_SHARED_LIBS)\n  target_compile_definitions(boost_date_time PUBLIC BOOST_DATE_TIME_DYN_LINK)\nelse()\n  target_compile_definitions(boost_date_time PUBLIC BOOST_DATE_TIME_STATIC_LINK)\nendif()\n\nif(BUILD_TESTING AND EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/test/CMakeLists.txt\")\n  add_subdirectory(test)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Implementing Sorted Unique R-MAT Graph Generator in C++\nDESCRIPTION: This C++ code defines a class template for generating R-MAT graphs, leveraging random number generators and supporting multiple configurations for graph construction. The template requires a RandomGenerator, Graph type, and optionally, an EdgePredicate. Constructors allow for detailed configuration, including bidirectional edges and vertex permutation. Key dependencies include the Boost Graph Library and related headers for graph representation and random number generation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/sorted_unique_rmat_generator.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<typename RandomGenerator, typename Graph,\n         typename EdgePredicate = keep_all_edges>\nclass sorted_unique_rmat_iterator\n{\npublic:\n  typedef std::input_iterator_tag iterator_category;\n  typedef std::pair<vertices_size_type, vertices_size_type> value_type;\n  typedef const value_type& reference;\n  typedef const value_type* pointer;\n  typedef void difference_type;\n\n  sorted_unique_rmat_iterator();\n  sorted_unique_rmat_iterator(RandomGenerator& gen, vertices_size_type n, \n                              edges_size_type m, double a, double b, double c, \n                              double d, bool bidirectional = true,\n                              bool permute_vertices = true,\n                              EdgePredicate ep = keep_all_edges());\n  // Iterator operations\n  reference operator*() const;\n  pointer operator->() const;\n  sorted_unique_rmat_iterator& operator++();\n  sorted_unique_rmat_iterator operator++(int);\n  bool operator==(const sorted_unique_rmat_iterator& other) const;\n  bool operator!=(const sorted_unique_rmat_iterator& other) const;\n};\n```\n\n----------------------------------------\n\nTITLE: Callback-based Async Interface\nDESCRIPTION: Demonstrates the callback-based asynchronous version of the document operation interface.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/lib/Futures/README.md#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nvoid document(std::string const& collectionName, VPackSlice const value,\n              OperationOptions& options,\n              std::function<void(OperationResult)> callback);\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation for V8 Support\nDESCRIPTION: Conditionally adds `V8ErrorHandler.cpp` to the `arango_aql` library sources if the `USE_V8` flag is enabled.  This enables the library to integrate with the V8 JavaScript engine, providing additional error handling capabilities when needed.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/Aql/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif (USE_V8)\n  target_sources(arango_aql PRIVATE\n    V8ErrorHandler.cpp)\nendif()\n```\n\n----------------------------------------\n\nTITLE: C Compiler Flag Testing Function\nDESCRIPTION: Function that tests if specific C compiler flags are supported and adds them to a variable if they are. Includes support for testing multiple flags independently.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/CMakeLists.txt#2025-04-22_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(add_c_flags_if_supported var)\n  foreach(flag ${ARGN})\n    set(flag_var_name \"C_COMPILER_SUPPORTS_${flag}\")\n    check_c_compiler_flag(${flag} \"${flag_var_name}\")\n    set(is_supported ${${flag_var_name}})\n    if(is_supported)\n      set(${var} \"${${var}} ${flag}\")\n    endif()\n  endforeach()\n  set(${var} \"${${var}}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Variant Inspection Implementation in C++\nDESCRIPTION: Shows how to implement variant inspection with qualified type indicators using the inspection library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/lib/Inspection/include/Inspection/README.md#2025-04-22_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\nusing MyVariant = std::variant<std::string, int, Struct1> {};\n\ntemplate<class Inspector>\nauto inspect(Inspector& f, MyVariant& x) {\n  namespace insp = arangodb::inspection;\n  return f.variant(x).qualified(\"type\", \"value\").alternatives(\n      insp::inlineType<std::string>(),\n      insp::type<int>(\"int\"),\n      insp::type<Struct1>(\"Struct1\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Image with Margin in C++\nDESCRIPTION: This function creates a new image with a specified margin around the original image by adjusting the dimensions. It utilizes GIL's concepts to ensure type compatibility for source and destination images.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/examples.rst#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\n  template <typename SrcView,   // Models ImageViewConcept (the source view)\n          typename DstImage>  // Models ImageConcept     (the returned image)\n  void create_with_margin(const SrcView& src, int k, DstImage& result)\n  {\n    gil_function_requires<ImageViewConcept<SrcView> >();\n    gil_function_requires<ImageConcept<DstImage> >();\n    gil_function_requires<ViewsCompatibleConcept<SrcView, typename DstImage::view_t> >();\n\n    result=DstImage(src.width()+2*k, src.height()+2*k);\n    typename DstImage::view_t centerImg=subimage_view(view(result), k,k,src.width(),src.height());\n    std::copy(src.begin(), src.end(), centerImg.begin());\n  }\n```\n\n----------------------------------------\n\nTITLE: Implementing a Random Access Iterator Without Iterator Interface in C++\nDESCRIPTION: A verbose implementation of a random access iterator without using stl_interfaces. This iterator repeats characters from a source array in a cyclic manner. It includes all the required typedefs and operators for a random access iterator.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/stl_interfaces/README.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nstruct repeated_chars_iterator\n{\n    using value_type = char;\n    using difference_type = std::ptrdiff_t;\n    using pointer = char const *;\n    using reference = char const;\n    using iterator_category = std::random_access_iterator_tag;\n\n    constexpr repeated_chars_iterator() noexcept :\n        first_(nullptr),\n        size_(0),\n        n_(0)\n    {}\n    constexpr repeated_chars_iterator(\n        char const * first,\n        difference_type size,\n        difference_type n) noexcept :\n        first_(first),\n        size_(size),\n        n_(n)\n    {}\n\n    constexpr reference operator*() const noexcept\n    {\n        return first_[n_ % size_];\n    }\n\n    constexpr value_type operator[](difference_type n) const noexcept\n    {\n        return first_[(n_ + n) % size_];\n    }\n\n    constexpr repeated_chars_iterator & operator++() noexcept\n    {\n        ++n_;\n        return *this;\n    }\n    constexpr repeated_chars_iterator operator++(int)noexcept\n    {\n        repeated_chars_iterator retval = *this;\n        ++*this;\n        return retval;\n    }\n    constexpr repeated_chars_iterator & operator+=(difference_type n) noexcept\n    {\n        n_ += n;\n        return *this;\n    }\n\n    constexpr repeated_chars_iterator & operator--() noexcept\n    {\n        --n_;\n        return *this;\n    }\n    constexpr repeated_chars_iterator operator--(int)noexcept\n    {\n        repeated_chars_iterator retval = *this;\n        --*this;\n        return retval;\n    }\n    constexpr repeated_chars_iterator & operator-=(difference_type n) noexcept\n    {\n        n_ -= n;\n        return *this;\n    }\n\n    friend constexpr bool operator==(\n        repeated_chars_iterator lhs, repeated_chars_iterator rhs) noexcept\n    {\n        return lhs.first_ == rhs.first_ && lhs.n_ == rhs.n_;\n    }\n    friend constexpr bool operator!=(\n        repeated_chars_iterator lhs, repeated_chars_iterator rhs) noexcept\n    {\n        return !(lhs == rhs);\n    }\n    friend constexpr bool operator<(\n        repeated_chars_iterator lhs, repeated_chars_iterator rhs) noexcept\n    {\n        return lhs.first_ == rhs.first_ && lhs.n_ < rhs.n_;\n    }\n    friend constexpr bool operator<=(\n        repeated_chars_iterator lhs, repeated_chars_iterator rhs) noexcept\n    {\n        return lhs == rhs || lhs < rhs;\n    }\n    friend constexpr bool operator>(\n        repeated_chars_iterator lhs, repeated_chars_iterator rhs) noexcept\n    {\n        return rhs < lhs;\n    }\n    friend constexpr bool operator>=(\n        repeated_chars_iterator lhs, repeated_chars_iterator rhs) noexcept\n    {\n        return rhs <= lhs;\n    }\n\n    friend constexpr repeated_chars_iterator\n    operator+(repeated_chars_iterator lhs, difference_type rhs) noexcept\n    {\n        return lhs += rhs;\n    }\n    friend constexpr repeated_chars_iterator\n    operator+(difference_type lhs, repeated_chars_iterator rhs) noexcept\n    {\n        return rhs += lhs;\n    }\n    friend constexpr repeated_chars_iterator\n    operator-(repeated_chars_iterator lhs, difference_type rhs) noexcept\n    {\n        return lhs -= rhs;\n    }\n    friend constexpr difference_type operator-(\n        repeated_chars_iterator lhs, repeated_chars_iterator rhs) noexcept\n    {\n        return lhs.n_ - rhs.n_;\n    }\n\nprivate:\n    char const * first_;\n    difference_type size_;\n    difference_type n_;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Legacy Constructor Hook for basic_result in C++\nDESCRIPTION: Legacy ADL-discovered free function hook used by in-place constructors of basic_result. This was removed in Outcome v2.2.0 but can be enabled via BOOST_OUTCOME_ENABLE_LEGACY_SUPPORT_FOR. The hook is invoked during in-place construction operations.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/functions/hooks/hook_result_in_place_construction.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nvoid hook_result_in_place_construction(T *, in_place_type_t<U>, Args &&...) noexcept\n```\n\n----------------------------------------\n\nTITLE: Iterator Advance Operations\nDESCRIPTION: Operator overloads for advancing iterators forward and backward using static casting\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/iterator_facade_ref.rst#2025-04-22_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nstatic_cast<Derived*>(this)->advance(n);\nreturn *static_cast<Derived*>(this);\n\nstatic_cast<Derived*>(this)->advance(-n);\nreturn *static_cast<Derived*>(this);\n```\n\n----------------------------------------\n\nTITLE: Creating Compiler Flags Helper Function\nDESCRIPTION: Helper function to create compiler flags by concatenating arguments with a specified glue string. Used for building compiler flag strings in a consistent way.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/CMakeLists.txt#2025-04-22_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(CREATE_FLAGS OUTPUT GLUE)\n  set(_TMP_RESULT \"\")\n\n  foreach(arg ${ARGN})\n    set(_TMP_RESULT \"${_TMP_RESULT} ${GLUE}${arg}\")\n  endforeach()\n\n  set(${OUTPUT} \"${_TMP_RESULT}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Defining Unpack Adaptor Class in C++\nDESCRIPTION: Defines the unpack_adaptor class template that implements the core functionality of the unpack adaptor. It includes constructors, operator overloads, and failure handling mechanisms.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/unpack.hpp.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<class F>\nstruct unpack_adaptor : detail::callable_base<F>\n{\n    typedef unpack_adaptor fit_rewritable1_tag;\n    BOOST_HOF_INHERIT_CONSTRUCTOR(unpack_adaptor, detail::callable_base<F>);\n\n    template<class... Ts>\n    constexpr const detail::callable_base<F>& base_function(Ts&&... xs) const noexcept\n    {\n        return boost::hof::always_ref(*this)(xs...);\n    }\n\n    // ... (additional methods and nested structures)\n\n    BOOST_HOF_RETURNS_CLASS(unpack_adaptor);\n    template<class T, class=typename std::enable_if<(\n        is_unpackable<T>::value\n    )>::type>\n    constexpr auto operator()(T&& x) const\n    BOOST_HOF_RETURNS\n    (\n        boost::hof::detail::unpack_simple(BOOST_HOF_MANGLE_CAST(const detail::callable_base<F>&)(BOOST_HOF_CONST_THIS->base_function(x)), BOOST_HOF_FORWARD(T)(x))\n    );\n\n    // ... (additional operator overloads)\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing C++ Dispatcher for Python Virtual Function Overrides\nDESCRIPTION: C++ code showing how to create a dispatcher class that enables Python methods to override C++ virtual functions when called polymorphically from C++.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/doc/article.rst#2025-04-22_snippet_17\n\nLANGUAGE: C++\nCODE:\n```\n//\n// interface to wrap:\n//\nclass Base\n{\n public:\n    virtual int f(std::string x) { return 42; }\n    virtual ~Base();\n};\n\nint calls_f(Base const& b, std::string x) { return b.f(x); }\n\n//\n// Wrapping Code\n//\n\n// Dispatcher class\nstruct BaseWrap : Base\n{\n    // Store a pointer to the Python object\n    BaseWrap(PyObject* self_) : self(self_) {}\n    PyObject* self;\n\n    // Default implementation, for when f is not overridden\n    int f_default(std::string x) { return this->Base::f(x); }\n    // Dispatch implementation\n    int f(std::string x) { return call_method<int>(self, \"f\", x); }\n};\n\n...\n    def(\"calls_f\", calls_f);\n    class_<Base, BaseWrap>(\"Base\")\n        .def(\"f\", &Base::f, &BaseWrap::f_default)\n        ;\n```\n\n----------------------------------------\n\nTITLE: Compact X-Gradient Implementation Using GIL Iterators\nDESCRIPTION: A more compact version of the unguarded x-gradient function that uses GIL's one-dimensional iterators instead of nested loops. This approach iterates through pixels left-to-right and top-to-bottom while accessing neighbors via the x() method.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/tutorial/gradient.rst#2025-04-22_snippet_14\n\nLANGUAGE: cpp\nCODE:\n```\nvoid x_gradient_unguarded(gray8c_view_t const& src, gray8s_view_t const& dst)\n{\n  gray8c_view_t::iterator src_it = src.begin();\n  for (gray8s_view_t::iterator dst_it = dst.begin(); dst_it!=dst.end(); ++dst_it, ++src_it)\n      *dst_it = (src_it.x()[-1] - src_it.x()[1]) / 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an ndarray from a C++ Array\nDESCRIPTION: This snippet creates a numpy ndarray from an integer C++ array and demonstrates how to use the from_data method to bridge C++ and Python data types.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/doc/html/numpy/_sources/tutorial/fromdata.rst.txt#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n    int arr[] = {1,2,3,4,5};\n    np::ndarray py_array = np::from_data(arr, np::dtype::get_builtin<int>(),\n                                         p::make_tuple(5),\n\t\t\t\t\t\t\t\t\t\t\t p::make_tuple(sizeof(int)),\n\t\t\t\t\t\t\t\t\t\t\t p::object());\n```\n\n----------------------------------------\n\nTITLE: Boost Parameter Keyword Usage\nDESCRIPTION: This code snippet demonstrates the usage of `boost::parameter::keyword`. It ensures that `boost::parameter::keyword` is known to the compiler for using keyword features of Boost Parameter Library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/index.rst#2025-04-22_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\n#include <boost/parameter/keyword.hpp>\n```\n\n----------------------------------------\n\nTITLE: Basic Date Time Operations in C++\nDESCRIPTION: Demonstrates basic date and time manipulation using Boost.Locale date_time class, including creating tomorrow's date and specific date points.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/doc/dates_times_timezones.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n    using namespace boost::locale;\n    date_time now; // Create date_time class with default calendar initialized to current time\n    date_time tomorrow = now + period::day();\n    cout << \"Let's meet tomorrow at \" << as::date << tomorrow << endl;\n    date_time some_point = period::year(1995) + period::january() + period::day(1);\n    // Set some_point's date to 1995-Jan-1.\n    cout << \"The \"<< as::date << some_point << \" is the \" \n        << as::ordinal << some_point / period::day_of_week_local() << \" day of the week\"  << endl;\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for Boost Compatibility in C++\nDESCRIPTION: This CMake configuration file sets up a CMake project for Boost compatibility in C++. It requires a CMake version between 3.5 and 3.16 and creates an interface library named 'boost_compatibility'. The configuration sets target include directories and conditionally includes a 'test' subdirectory if testing is enabled and the directory exists. Dependencies include having CMake and Boost properly installed and configured.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/compatibility/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n# Generated by `boostdep --cmake compatibility`\\n# Copyright 2020 Peter Dimov\\n# Distributed under the Boost Software License, Version 1.0.\\n# https://www.boost.org/LICENSE_1_0.txt\\n\\ncmake_minimum_required(VERSION 3.5...3.16)\\n\\nproject(boost_compatibility VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\\n\\nadd_library(boost_compatibility INTERFACE)\\nadd_library(Boost::compatibility ALIAS boost_compatibility)\\n\\ntarget_include_directories(boost_compatibility INTERFACE include)\\n\\nif(BUILD_TESTING AND EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/test/CMakeLists.txt\")\\n\\n  add_subdirectory(test)\\n\\nendif()\n```\n\n----------------------------------------\n\nTITLE: Enabling AQL Execution Block Debugging\nDESCRIPTION: Instructions for debugging AQL execution blocks by enabling query logging, directing output to separate files, and running queries with profiling enabled. This helps track data flow between execution blocks.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/CONTRIBUTING.md#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n--extraArgs:log.level queries=info\n```\n\nLANGUAGE: bash\nCODE:\n```\n--extraArgs --log.output queries file://@ARANGODB_SERVER_DIR@/arangod_queries.log\n```\n\nLANGUAGE: javascript\nCODE:\n```\ndb._query('RETURN 1', {}, { profile: 4 })\n```\n\n----------------------------------------\n\nTITLE: Exposing C++ Operators with Boost.Python\nDESCRIPTION: Shows how to expose C++ operator overloads to Python, allowing for natural arithmetic expressions with exposed types.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/doc/article.rst#2025-04-22_snippet_13\n\nLANGUAGE: cpp\nCODE:\n```\nclass_<rational<int> >(\"rational_int\")\n  .def(init<int, int>()) // constructor, e.g. rational_int(3,4)\n  .def(\"numerator\", &rational<int>::numerator)\n  .def(\"denominator\", &rational<int>::denominator)\n  .def(-self)        // __neg__ (unary minus)\n  .def(self + self)  // __add__ (homogeneous)\n  .def(self * self)  // __mul__\n  .def(self + int()) // __add__ (heterogenous)\n  .def(int() + self) // __radd__\n  ...\n```\n\n----------------------------------------\n\nTITLE: Using iterator_adaptor in C++\nDESCRIPTION: The iterator_adaptor class template adapts a Base type to create a new iterator. It is derived from iterator_facade and implements core behaviors using the Base type. Users create a derived class from iterator_adaptor and selectively redefine core member functions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/iterator_adaptor_body.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nclass MyIterator : public iterator_adaptor<...> {\n    // Selectively redefine core member functions\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing ArangoDB Test Suite Structure\nDESCRIPTION: Demonstrates the basic structure of a test suite including documentation, path configuration, test execution and setup hooks. Includes functionality for test case scanning, bucket splitting and test execution via different runners.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst functionsDocumentation = {\n  'shell_server': 'shell server tests',\n};\nconst optionsDocumentation = [\n  '   - `skipAql`: if set to true the AQL tests are skipped',\n];\n\nconst testPaths = {\n  'shell_server': [ tu.pathForTesting('common/shell'), tu.pathForTesting('server/shell') ],\n};\n\nfunction shellServer (options) {\n  let testCases = tu.scanTestPaths(testPaths.shell_server, options);\n  testCases = tu.splitBuckets(options, testCases);\n\n  let rc = tu.performTests(opts, testCases, 'shell_client, tu.runThere, /* startStopHandlers*/ );\n\n  options.cleanup = options.cleanup && opts.cleanup;\n  return rc;\n}\n\nexports.setup = function (testFns, defaultFns, opts, fnDocs, optionsDoc, allTestPaths) {\n  Object.assign(allTestPaths, testPaths);\n  testFns['shell_server'] = shellServer;\n  defaultFns.push('shell_server');\n  opts['skipAql'] = false;\n\n  for (var attrname in functionsDocumentation) { fnDocs[attrname] = functionsDocumentation[attrname]; }\n  for (var i = 0; i < optionsDocumentation.length; i++) { optionsDoc.push(optionsDocumentation[i]); }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket Client with Async SSL in CMake\nDESCRIPTION: This CMake script creates an executable target for a WebSocket client that leverages asynchronous SSL connections. It includes necessary Boost Beast files, groups source files for organization, and links against OpenSSL and required libraries. The build is conditionally enabled only when OpenSSL is found in the environment.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/beast/example/websocket/client/async-ssl/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (OPENSSL_FOUND)\n    GroupSources(include/boost/beast beast)\n    GroupSources(example/common common)\n    GroupSources(example/websocket/client/async-ssl \"/\")\n\n    add_executable (websocket-client-async-ssl\n        ${BOOST_BEAST_FILES}\n        ${PROJECT_SOURCE_DIR}/example/common/root_certificates.hpp\n        Jamfile\n        websocket_client_async_ssl.cpp\n    )\n\n    set_property(TARGET websocket-client-async-ssl PROPERTY FOLDER \"example-websocket-client\")\n\n    target_link_libraries (websocket-client-async-ssl\n        OpenSSL::SSL OpenSSL::Crypto\n        lib-asio\n        lib-asio-ssl\n        lib-beast\n        )\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced Server Flex Executable with OpenSSL in CMake\nDESCRIPTION: Defines the build configuration for the advanced-server-flex example executable with OpenSSL dependencies. The configuration groups source files, creates the executable target with necessary source files, sets folder properties, and links against required libraries including OpenSSL, Asio, and Beast.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/beast/example/advanced/server-flex/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif (OPENSSL_FOUND)\n    GroupSources(include/boost/beast beast)\n    GroupSources(example/common common)\n    GroupSources(example/advanced/server-flex \"/\")\n\n    add_executable (advanced-server-flex\n        ${BOOST_BEAST_FILES}\n        ${PROJECT_SOURCE_DIR}/example/common/server_certificate.hpp\n        Jamfile\n        advanced_server_flex.cpp\n    )\n\n    set_property(TARGET advanced-server-flex PROPERTY FOLDER \"example-advanced-server\")\n    \n    target_link_libraries (advanced-server-flex\n        OpenSSL::SSL OpenSSL::Crypto\n        lib-asio\n        lib-asio-ssl\n        lib-beast\n        )\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Using boost::locale::info to Configure Message Catalog Parameters\nDESCRIPTION: Shows how to use the boost::locale::info facet to configure message catalog parameters based on the current locale. This approach automatically sets language, country, encoding, and variant from the base locale.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/doc/messages_formatting.txt#2025-04-22_snippet_14\n\nLANGUAGE: C++\nCODE:\n```\n// Configure all options for message catalog\nnamespace blg = boost::locale::gnu_gettext;\nblg::messages_info info;\n\ninfo.paths.push_back(\"\"); // You need some even empty path\ninfo.domains.push_back(blg::messages_info::domain(\"my_app\"));\ninfo.callback = some_file_loader; // Provide a callback\n\n// Create an object with default locale\nstd::locale base_locale = gen(\"\");\n\n// Use boost::locale::info to configure all parameters\n\nboost::locale::info const &properties = std::use_facet<boost::locale::info>(base_locale);\ninfo.language = properties.language();\ninfo.country  = properties.country();\ninfo.encoding = properties.encoding();\ninfo.variant  = properties.variant();\n\n// Install messages catalogs to the final locale\nstd::locale real_locale(base_locale,blg::create_messages_facet<char>(info));\n```\n\n----------------------------------------\n\nTITLE: Defining Boost.Python NumPy ndarray Class in C++\nDESCRIPTION: This snippet defines the ndarray class in the Boost.Python namespace for interacting with NumPy arrays from C++. It includes public methods for array operations such as transpose, reshape, and data type conversion. The class provides mechanisms to view, copy, and manage array data, supporting various ndarray bitflags for memory management. Required dependencies include the Boost.Python and NumPy C++ libraries.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/doc/numpy/reference/ndarray.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nnamespace boost \n{\nnamespace python\n{\nnamespace numpy \n{\n\nclass ndarray : public object \n{\n\npublic:\n\n  enum bitflag \n  {\n    NONE=0x0, C_CONTIGUOUS=0x1, F_CONTIGUOUS=0x2, V_CONTIGUOUS=0x1|0x2, \n    ALIGNED=0x4, WRITEABLE=0x8, BEHAVED=0x4|0x8,\n    CARRAY_RO=0x1|0x4, CARRAY=0x1|0x4|0x8, CARRAY_MIS=0x1|0x8,\n    FARRAY_RO=0x2|0x4, FARRAY=0x2|0x4|0x8, FARRAY_MIS=0x2|0x8,\n    UPDATE_ALL=0x1|0x2|0x4, VARRAY=0x1|0x2|0x8, ALL=0x1|0x2|0x4|0x8\n  };\n\n  ndarray view(dtype const & dt) const;\n  ndarray astype(dtype const & dt) const;\n  ndarray copy() const;\n  int const shape(int n) const;\n  int const strides(int n) const;\n  char * get_data() const;\n  dtype get_dtype() const;\n  python::object get_base() const;\n  void set_base(object const & base);\n  Py_intptr_t const * get_shape() const;\n  Py_intptr_t const * get_strides() const;\n  int const get_nd() const;\n \n  bitflag const get_flags() const;\n\n  ndarray transpose() const;\n  ndarray squeeze() const;\n  ndarray reshape(tuple const & shape) const;\n  object scalarize() const;\n};\n\nndarray zeros(tuple const & shape, dtype const & dt);\nndarray zeros(int nd, Py_intptr_t const * shape, dtype const & dt);\n\nndarray empty(tuple const & shape, dtype const & dt);\nndarray empty(int nd, Py_intptr_t const * shape, dtype const & dt);\n\nndarray array(object const & obj);\nndarray array(object const & obj, dtype const & dt);\n\ntemplate <typename Container>\nndarray from_data(void * data,dtype const & dt,Container shape,Container strides,python::object const & owner);\ntemplate <typename Container>\nndarray from_data(void const * data, dtype const & dt, Container shape, Container strides, object const & owner);\n\nndarray from_object(object const & obj, dtype const & dt,int nd_min, int nd_max, ndarray::bitflag flags=ndarray::NONE);\nndarray from_object(object const & obj, dtype const & dt,int nd, ndarray::bitflag flags=ndarray::NONE);\nndarray from_object(object const & obj, dtype const & dt, ndarray::bitflag flags=ndarray::NONE);\nndarray from_object(object const & obj, int nd_min, int nd_max,ndarray::bitflag flags=ndarray::NONE);\nndarray from_object(object const & obj, int nd, ndarray::bitflag flags=ndarray::NONE);\nndarray from_object(object const & obj, ndarray::bitflag flags=ndarray::NONE)\n\nndarray::bitflag operator|(ndarray::bitflag a, ndarray::bitflag b) ; \nndarray::bitflag operator&(ndarray::bitflag a, ndarray::bitflag b);\n\n}\n\n```\n\n----------------------------------------\n\nTITLE: Declaring on_result_in_place_construction Hook for basic_result in C++\nDESCRIPTION: Declares a static void function that serves as a hook for in-place constructors of basic_result. It takes a pointer to T, an in_place_type_t<U>, and variadic Args. The function is noexcept and available for Outcome v2.2.0 and later.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/policies/base/on_result_in_place_construction.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nstatic void on_result_in_place_construction(T *, in_place_type_t<U>, Args &&...) noexcept\n```\n\n----------------------------------------\n\nTITLE: Packed Image Metafunctions in GIL (C++)\nDESCRIPTION: These template structures define metafunctions in the Generic Image Library (GIL) to construct packed images with varying numbers of channels (from one to five). They take bitfield types, sizes for each channel, a layout, and an allocator as parameters, allowing for the creation of specialized image types with custom channel configurations.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/metafunctions.rst#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <typename BitField, unsigned Size1,\n        typename Layout, typename Alloc=std::allocator<unsigned char> >\nstruct packed_image1_type { typedef ... type; };\n\ntemplate <typename BitField, unsigned Size1, unsigned Size2,\n        typename Layout, typename Alloc=std::allocator<unsigned char> >\nstruct packed_image2_type { typedef ... type; };\n\ntemplate <typename BitField, unsigned Size1, unsigned Size2, unsigned Size3,\n        typename Layout, typename Alloc=std::allocator<unsigned char> >\nstruct packed_image3_type { typedef ... type; };\n\ntemplate <typename BitField, unsigned Size1, unsigned Size2, unsigned Size3, unsigned Size4,\n        typename Layout, typename Alloc=std::allocator<unsigned char> >\nstruct packed_image4_type { typedef ... type; };\n\ntemplate <typename BitField, unsigned Size1, unsigned Size2, unsigned Size3, unsigned Size4, unsigned Size5,\n        typename Layout, typename Alloc=std::allocator<unsigned char> >\nstruct packed_image5_type { typedef ... type; };\n```\n\n----------------------------------------\n\nTITLE: Using METIS Reader for Graph Construction in C++\nDESCRIPTION: Demonstrates using the metis_reader to build a graph from a METIS file. This snippet shows initialization of a metis_reader and constructing a graph by iterating over METIS data using provided iterator methods.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/metis.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nstd::ifstream in_graph(argv[1]);\nmetis_reader reader(in_graph);\nGraph g(reader.begin(), reader.end(),\n        reader.weight_begin(),\n        reader.num_vertices());\n```\n\n----------------------------------------\n\nTITLE: Building and Installing LZ4 with Meson\nDESCRIPTION: This snippet demonstrates the commands to set up, build, and install LZ4 using the Meson build system. It includes options for setting the build type, library type, and enabling binary programs.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/lz4/contrib/meson/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmeson setup --buildtype=release -Ddefault_library=shared -Dbin_programs=true builddir\ncd builddir\nninja             # to build\nninja install     # to install\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost.Optional CMake Interface Library\nDESCRIPTION: Sets up a CMake interface library for Boost.Optional with necessary dependencies. The configuration defines minimum CMake version, project name, creates an interface target with its include directories, and links against multiple required Boost components.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/optional/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required( VERSION 3.5 )\nproject( BoostOptional )\n\nadd_library( boost_optional INTERFACE )\nadd_library( Boost::optional ALIAS boost_optional )\n\ntarget_include_directories( boost_optional INTERFACE include )\n\ntarget_link_libraries( boost_optional\n    INTERFACE\n        Boost::assert\n        Boost::config\n        Boost::core\n        Boost::detail\n        Boost::move\n        Boost::predef\n        Boost::static_assert\n        Boost::throw_exception\n        Boost::type_traits\n        Boost::utility\n)\n```\n\n----------------------------------------\n\nTITLE: Pixel Conversion Concept Definition in C++\nDESCRIPTION: Details the requirements for converting one pixel to another, specifying a conversion process as a non-symmetric, sometimes lossy operation. Color conversion between source and destination pixels is facilitated by an explicit function.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/pixel.rst.txt#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <PixelConcept SrcPixel, MutablePixelConcept DstPixel>\\nconcept PixelConvertibleConcept\\n{\\n  void color_convert(const SrcPixel&, DstPixel&);\\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Main Crash Handler Library in CMake\nDESCRIPTION: Defines and configures the main arango_crashhandler static library with its include directories and dependencies. Links against basic errors, build ID, boost system, and velocypack libraries. Includes conditional configuration for enterprise version.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/lib/CrashHandler/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(arango_crashhandler STATIC\\n    CrashHandler.cpp)\\n\\ntarget_include_directories(arango_crashhandler\\n  PUBLIC\\n    ${PROJECT_SOURCE_DIR}/lib\\n    ${PROJECT_BINARY_DIR}/lib)\\n\\nif (USE_ENTERPRISE)\\n  target_include_directories(arango_crashhandler PUBLIC \"${PROJECT_SOURCE_DIR}/${ENTERPRISE_INCLUDE_DIR}\")\\nendif()\\n\\ntarget_link_libraries(arango_crashhandler\\n  PRIVATE\\n    arango_basic_errors\\n    arango_build_id\\n    boost_system\\n    velocypack)\n```\n\n----------------------------------------\n\nTITLE: Defining a Function Signature with result<T> Return Type in C++\nDESCRIPTION: Example showing how to define a function signature that returns a result<T> type, which can represent either a successful outcome or an error condition.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\noutcome::result<int> convert(const std::string& str) noexcept;\n```\n\n----------------------------------------\n\nTITLE: Declaring Static Lambda Functions with BOOST_HOF_STATIC_LAMBDA_FUNCTION in C++\nDESCRIPTION: Shows how to use BOOST_HOF_STATIC_LAMBDA_FUNCTION to declare a lambda as a static function, ensuring compile-time initialization and avoiding ODR violations.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/src/gettingstarted.md#2025-04-22_snippet_9\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_HOF_STATIC_LAMBDA_FUNCTION(sum) = [](auto x, auto y)\n{\n    return x + y;\n};\n```\n\n----------------------------------------\n\nTITLE: Creating ndarray from Tuple in C++ using Boost.Numpy\nDESCRIPTION: Demonstrates how to create an ndarray from a tuple using Boost.Numpy in C++. A tuple object is created using p::make_tuple and converted to ndarray with np::array.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/doc/html/numpy/_sources/tutorial/ndarray.rst.txt#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\np::object tu = p::make_tuple('a','b','c');\nnp::ndarray example_tuple = np::array(tu);\n```\n\n----------------------------------------\n\nTITLE: Using-Directive for Boost.Parameter Namespace\nDESCRIPTION: This code shows how to use a using-directive to bring the entire namespace into scope, making all names available without qualification. It is convenient but indiscriminately makes everything in the namespace available.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/index.rst#2025-04-22_snippet_47\n\nLANGUAGE: cpp\nCODE:\n```\n        **using namespace lib;**\n        int x = **f**\\ (_name = \"jill\", _index = 3);\n```\n\nLANGUAGE: cpp\nCODE:\n```\nint main() { return 0; }\n```\n\n----------------------------------------\n\nTITLE: Defining Memory Based 2D Locator Class in C++\nDESCRIPTION: This snippet introduces the memory_based_2d_locator template class, which allows navigating 2D images efficiently by leveraging pixel data stored in memory. It integrates with step iterators enabling dynamic memory addressing.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/pixel_locator.rst#2025-04-22_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\n  // StepIterator models StepIteratorConcept, MemoryBasedIteratorConcept\n  template <typename StepIterator>\n  class memory_based_2d_locator;\n```\n\n----------------------------------------\n\nTITLE: Glue Code for Computing X Gradient with Boost GIL\nDESCRIPTION: This C++ code demonstrates how to create GIL image views from raw pixel data. It takes raw pixel data, row bytes, width, and height for both source and destination images and constructs `gray8c_view_t` and `gray8s_view_t` objects using the `interleaved_view` function. It then calls the `x_gradient` function to compute the gradient.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/tutorial/gradient.rst#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nvoid ComputeXGradientGray8(\n    unsigned char const* src_pixels, ptrdiff_t src_row_bytes,\n    int w, int h,\n    signed char* dst_pixels, ptrdiff_t dst_row_bytes)\n{\n  gray8c_view_t src = interleaved_view(w, h, (gray8_pixel_t const*)src_pixels, src_row_bytes);\n  gray8s_view_t dst = interleaved_view(w, h, (gray8s_pixel_t*)dst_pixels, dst_row_bytes);\n  x_gradient(src, dst);\n}\n```\n\n----------------------------------------\n\nTITLE: Reading a TIFF Image with Boost GIL\nDESCRIPTION: Basic example of reading a TIFF image into a RGB8 image type using the GIL IO extension. Demonstrates simple image reading with automatic memory allocation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/io.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nstd::string filename( \"image.tif\" );\nrgb8_image_t img;\nread_image( filename, img, tiff_tag() );\n```\n\n----------------------------------------\n\nTITLE: Defining reverse_iter_fold Template in C++\nDESCRIPTION: Defines the template for the reverse_iter_fold algorithm. It takes a Sequence, State, BackwardOp, and optional ForwardOp as template parameters. The algorithm applies BackwardOp to each iterator in reverse order, optionally using ForwardOp on forward traversal.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/reverse_iter_fold.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      typename Sequence\n    , typename State\n    , typename BackwardOp\n    , typename ForwardOp = _1\n    >\nstruct reverse_iter_fold\n{\n    typedef |unspecified|  type;\n};\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Go Driver\nDESCRIPTION: This snippet provides the command to run Go driver tests, specifying the required parameters for the Go driver checkout and options for testing the case 'View'.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/CONTRIBUTING.md#2025-04-22_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/unittest go_driver --gosource ../go-driver/ --testCase View --goOptions:timeout 180m --cluster true\n```\n\n----------------------------------------\n\nTITLE: LZ4 Ring Buffer Compression Flow Diagram\nDESCRIPTION: ASCII diagram showing the progression of LZ4 compression using ring buffer, demonstrating prefix mode dependencies and external dictionary mode. Shows how data flows through different stages of compression from Line#1 to Line#X+2.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/lz4/examples/blockStreaming_lineByLine.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n(1)\n    Ring Buffer\n\n    +--------+\n    | Line#1 |\n    +---+----+\n        |\n        v\n     {Out#1}\n\n\n(2)\n    Prefix Mode Dependency\n          +----+\n          |    |\n          v    |\n    +--------+-+------+\n    | Line#1 | Line#2 |\n    +--------+---+----+\n                 |\n                 v\n              {Out#2}\n\n\n(3)\n          Prefix   Prefix\n          +----+   +----+\n          |    |   |    |\n          v    |   v    |\n    +--------+-+------+-+------+\n    | Line#1 | Line#2 | Line#3 |\n    +--------+--------+---+----+\n                          |\n                          v\n                       {Out#3}\n\n\n(4)\n                        External Dictionary Mode\n                +----+   +----+\n                |    |   |    |\n                v    |   v    |\n    ------+--------+-+------+-+--------+\n          |  ....  | Line#X | Line#X+1 |\n    ------+--------+--------+-----+----+\n                            ^     |\n                            |     v\n                            |  {Out#X+1}\n                            |\n                          Reset\n\n\n(5)\n                                    Prefix\n                                    +-----+\n                                    |     |\n                                    v     |\n    ------+--------+--------+----------+--+-------+\n          |  ....  | Line#X | Line#X+1 | Line#X+2 |\n    ------+--------+--------+----------+-----+----+\n                            ^                |\n                            |                v\n                            |            {Out#X+2}\n                            |\n                          Reset\n```\n\n----------------------------------------\n\nTITLE: Implementing Pack Join Function in C++\nDESCRIPTION: Defines functions for joining packs. It includes a binary join operation (make_pack_join_dual) and a variadic join operation (make_pack_join) that recursively applies the binary join.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/pack.hpp.txt#2025-04-22_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<class P1, class P2>\nconstexpr typename pack_join_result<P1, P2>::result_type make_pack_join_dual(P1&& p1, P2&& p2)\nBOOST_HOF_RETURNS_DEDUCE_NOEXCEPT(pack_join_result<P1, P2>::call(BOOST_HOF_FORWARD(P1)(p1), BOOST_HOF_FORWARD(P2)(p2)))\n{\n    return pack_join_result<P1, P2>::call(BOOST_HOF_FORWARD(P1)(p1), BOOST_HOF_FORWARD(P2)(p2));\n}\n\n// ... (join_type structure omitted for brevity)\n\ntemplate<class P1, class... Ps>\nconstexpr typename join_type<P1, Ps...>::type make_pack_join(P1&& p1, Ps&&... ps)\nBOOST_HOF_RETURNS_DEDUCE_NOEXCEPT(make_pack_join_dual(BOOST_HOF_FORWARD(P1)(p1), make_pack_join(BOOST_HOF_FORWARD(Ps)(ps)...)))\n{\n    return make_pack_join_dual(BOOST_HOF_FORWARD(P1)(p1), make_pack_join(BOOST_HOF_FORWARD(Ps)(ps)...));\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing Basic Result from Failure Type in C++\nDESCRIPTION: An implicit constructor that creates a basic_result from a failure_type<T>. This constructor is enabled when the predicate for error code compatible conversion is satisfied or when T is void. It handles the construction of the error_type and propagates constexpr, triviality, and noexcept properties.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/basic_result/implicit_failure_make_error_code_copy_constructor.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nbasic_result(const failure_type<T> &)\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Indirect Function Adaptor in C++\nDESCRIPTION: Demonstrates how to use the indirect function adaptor with a unique_ptr containing a function object. The example shows passing a unique_ptr to a 'sum' struct through the indirect adaptor to call the function.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/indirect.hpp.txt#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/hof.hpp>\n#include <cassert>\n#include <memory>\nusing namespace boost::hof;\n\nstruct sum\n{\n    template<class T, class U>\n    T operator()(T x, U y) const\n    {\n        return x+y;\n    }\n};\n\nint main() {\n    int r = indirect(std::make_unique<sum>())(3,2);\n    assert(r == 5);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Color Base Concepts in C++\nDESCRIPTION: This snippet defines various concepts for a color base in the Generic Image Library using C++. It introduces several template structures and metafunctions essential for managing color bases, including ColorBaseConcept, MutableColorBaseConcept, and others. It outlines the foundational building blocks for operations on color bases, including construction, comparison, and assignment.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/color_base.rst#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nconcept ColorBaseConcept<typename T>\n    : CopyConstructible<T>, EqualityComparable<T>\n{\n  // a GIL layout (the color space and element permutation)\n  typename layout_t;\n\n  // The type of K-th element\n  template <int K> struct kth_element_type;\n      where Metafunction<kth_element_type>;\n\n  // The result of at_c\n  template <int K> struct kth_element_const_reference_type;\n      where Metafunction<kth_element_const_reference_type>;\n\n  template <int K> kth_element_const_reference_type<T,K>::type at_c(T);\n\n  template <ColorBaseConcept T2> where { ColorBasesCompatibleConcept<T,T2> }\n      T::T(T2);\n  template <ColorBaseConcept T2> where { ColorBasesCompatibleConcept<T,T2> }\n      bool operator==(const T&, const T2&);\n  template <ColorBaseConcept T2> where { ColorBasesCompatibleConcept<T,T2> }\n      bool operator!=(const T&, const T2&);\n\n};\n\nconcept MutableColorBaseConcept<ColorBaseConcept T>\n    : Assignable<T>, Swappable<T>\n{\n  template <int K> struct kth_element_reference_type;\n      where Metafunction<kth_element_reference_type>;\n\n  template <int K> kth_element_reference_type<T,K>::type at_c(T);\n\n  template <ColorBaseConcept T2> where { ColorBasesCompatibleConcept<T,T2> }\n      T& operator=(T&, const T2&);\n};\n\nconcept ColorBaseValueConcept<typename T> : MutableColorBaseConcept<T>, Regular<T>\n{\n};\n\nconcept HomogeneousColorBaseConcept<ColorBaseConcept CB>\n{\n  // For all K in [0 ... size<C1>::value-1):\n  //     where SameType<kth_element_type<K>::type, kth_element_type<K+1>::type>;\n  kth_element_const_reference_type<0>::type dynamic_at_c(const CB&, std::size_t n) const;\n};\n\nconcept MutableHomogeneousColorBaseConcept<MutableColorBaseConcept CB>\n    : HomogeneousColorBaseConcept<CB>\n{\n  kth_element_reference_type<0>::type dynamic_at_c(const CB&, std::size_t n);\n};\n\nconcept HomogeneousColorBaseValueConcept<typename T>\n    : MutableHomogeneousColorBaseConcept<T>, Regular<T>\n{\n};\n\nconcept ColorBasesCompatibleConcept<ColorBaseConcept C1, ColorBaseConcept C2>\n{\n  where SameType<C1::layout_t::color_space_t, C2::layout_t::color_space_t>;\n  // also, for all K in [0 ... size<C1>::value):\n  //     where Convertible<kth_semantic_element_type<C1,K>::type, kth_semantic_element_type<C2,K>::type>;\n  //     where Convertible<kth_semantic_element_type<C2,K>::type, kth_semantic_element_type<C1,K>::type>;\n};\n```\n\n----------------------------------------\n\nTITLE: Adding arango_storage_engine Static Library - CMake\nDESCRIPTION: Sets up the arango_storage_engine static library with multiple source files, linking it against several other libraries. The include directories for the project are also specified for proper compilation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/StorageEngine/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(arango_storage_engine STATIC\n  EngineSelectorFeature.cpp\n  HotBackup.cpp\n  PhysicalCollection.cpp\n  TransactionCollection.cpp\n  TransactionState.cpp\n  StorageEngine.cpp\n  VPackSortMigration.cpp)\ntarget_link_libraries(arango_storage_engine\n  arango_cluster_engine\n  arango_cluster_methods\n  arango_rocksdb\n  arango::validation\n  arango_replication2\n  immer)\ntarget_include_directories(arango_storage_engine PRIVATE\n  \"${PROJECT_SOURCE_DIR}/arangod\"\n  \"${PROJECT_SOURCE_DIR}/${ENTERPRISE_INCLUDE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Defining transform_iterator Class Template in C++\nDESCRIPTION: Implements a transform_iterator class template that applies a unary function during iteration. It includes type definitions, constructors, and core iterator operations. The class supports customizable reference and value types, and adapts its iterator category based on the underlying iterator's capabilities.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/transform_iterator_ref.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <class UnaryFunction,\n            class Iterator, \n            class Reference = use_default, \n            class Value = use_default>\n  class transform_iterator\n  {\n  public:\n    typedef /* see below */ value_type;\n    typedef /* see below */ reference;\n    typedef /* see below */ pointer;\n    typedef iterator_traits<Iterator>::difference_type difference_type;\n    typedef /* see below */ iterator_category;\n\n    transform_iterator();\n    transform_iterator(Iterator const& x, UnaryFunction f);\n\n    template<class F2, class I2, class R2, class V2>\n    transform_iterator(\n          transform_iterator<F2, I2, R2, V2> const& t\n        , typename enable_if_convertible<I2, Iterator>::type* = 0      // exposition only\n        , typename enable_if_convertible<F2, UnaryFunction>::type* = 0 // exposition only\n    );\n    UnaryFunction functor() const;\n    Iterator const& base() const;\n    reference operator*() const;\n    transform_iterator& operator++();\n    transform_iterator& operator--();\n  private:\n    Iterator m_iterator; // exposition only\n    UnaryFunction m_f;   // exposition only\n  };\n```\n\n----------------------------------------\n\nTITLE: Create NumPy dtype Objects\nDESCRIPTION: This example code demonstrates how to create NumPy `dtype` objects using the `get_builtin` template function and the `dtype` constructor. It illustrates creating a `dtype` for a double and a custom `dtype` using a Python list.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/doc/numpy/reference/dtype.rst#2025-04-22_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\nnamespace p = boost::python;\nnamespace np = boost::python::numpy;\n\nnp::dtype dtype = np::dtype::get_builtin<double>();\np::tuple for_custom_dtype = p::make_tuple(\"ha\",dtype);\nnp::dtype custom_dtype = np::dtype(list_for_dtype);\n```\n\n----------------------------------------\n\nTITLE: Static Error Domain Check Function Declaration - C++\nDESCRIPTION: Declaration of a static constexpr function that checks if an error code implementation matches the POSIX errno domain. The function is noexcept and operates in constant time.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/policies/base/has_error_is_errno.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nstatic bool _has_error_is_errno(Impl &&) noexcept\n```\n\n----------------------------------------\n\nTITLE: Adjusting Stack Buffer Size for Embedded Devices in C++\nDESCRIPTION: To adjust the size of stack buffers for embedded applications, define this macro when building the library or including the function definitions. This example sets the buffer size to 1024 bytes.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/json/README.md#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\n#define BOOST_JSON_STACK_BUFFER_SIZE 1024\n#include <boost/json/src.hpp>\n```\n\n----------------------------------------\n\nTITLE: Efficient Color Conversion and Gradient Calculation with GIL in C++\nDESCRIPTION: This snippet demonstrates a more efficient approach to color conversion and gradient calculation by using a temporary buffer. It shows how to create and use image objects in GIL.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/tutorial/gradient.rst.txt#2025-04-22_snippet_15\n\nLANGUAGE: cpp\nCODE:\n```\nvoid x_luminosity_gradient(rgb32fc_view_t const& src, gray8s_view_t const& dst)\n{\n  gray8_image_t ccv_image(src.dimensions());\n  copy_pixels(color_converted_view<gray8_pixel_t>(src), view(ccv_image));\n\n  x_gradient(const_view(ccv_image), dst);\n}\n\ntemplate <typename SrcView, typename DstView>\nvoid x_luminosity_gradient(const SrcView& src, const DstView& dst)\n{\n  using d_channel_t = typename channel_type<DstView>::type;\n  using channel_t = typename channel_convert_to_unsigned<d_channel_t>::type;\n  using gray_pixel_t = pixel<channel_t, gray_layout_t>;\n  using gray_image_t = image<gray_pixel_t, false>;\n\n  gray_image_t ccv_image(src.dimensions());\n  copy_pixels(color_converted_view<gray_pixel_t>(src), view(ccv_image));\n  x_gradient(const_view(ccv_image), dst);\n}\n```\n\n----------------------------------------\n\nTITLE: Specializing Projection Adaptor for Void Functions in C++\nDESCRIPTION: Provides a specialization of 'proj_adaptor' for cases where no function is provided (void). This version applies the projection to each argument independently.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/proj.hpp.txt#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<class Projection>\nstruct proj_adaptor<Projection, void> : detail::callable_base<Projection>\n{\n    typedef proj_adaptor fit_rewritable1_tag;\n    template<class... Ts>\n    constexpr const detail::callable_base<Projection>& base_projection(Ts&&... xs) const\n    {\n        return boost::hof::always_ref(*this)(xs...);\n    }\n\n    BOOST_HOF_INHERIT_DEFAULT(proj_adaptor, detail::callable_base<Projection>)\n\n    template<class P, BOOST_HOF_ENABLE_IF_CONVERTIBLE(P, detail::callable_base<Projection>)>\n    constexpr proj_adaptor(P&& p) \n    : detail::callable_base<Projection>(BOOST_HOF_FORWARD(P)(p))\n    {}\n\n    BOOST_HOF_RETURNS_CLASS(proj_adaptor);\n\n    template<class... Ts, class=detail::holder<decltype(std::declval<Projection>()(std::declval<Ts>()))...>>\n    constexpr BOOST_HOF_BY_VOID_RETURN operator()(Ts&&... xs) const \n    {\n        // Implementation details omitted for brevity\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Semantic Definitions for Front Extensible Sequence Operations in C++\nDESCRIPTION: Semantic definitions for Front Extensible Sequence operations, showing their equivalence to more general sequence operations.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/FrontExtensibleSequence.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\npush_front<s,x>::type     // Equivalent to insert<s,begin<s>::type,x>::type\npop_front<v>::type        // Equivalent to erase<s,begin<s>::type>::type\nfront<s>::type            // The first element in the sequence\n```\n\n----------------------------------------\n\nTITLE: Configuring ArangoDB Futures Library Build\nDESCRIPTION: Creates and configures the arango_futures static library with necessary include directories and linked dependencies. The library depends on core ArangoDB components and VelocyPack serialization library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/lib/Futures/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(arango_futures STATIC\n  src/Future.cpp)\n\ntarget_include_directories(arango_futures\n  PUBLIC\n  ${PROJECT_SOURCE_DIR}/arangod\n  ${PROJECT_SOURCE_DIR}/3rdParty/iresearch/external/function2\n  include)\n\ntarget_link_libraries(arango_futures\n  PUBLIC\n  arango_inspection\n  arango_assertions\n  arango_async_interface \n  velocypack\n)\n```\n\n----------------------------------------\n\nTITLE: Defining operator!= for failure_type Comparison in C++\nDESCRIPTION: Implements the inequality operator to compare a Result object with a failure_type sugar type. Returns true if the Result is successful or if the error values are not equal. The comparison respects constexpr and noexcept properties of the underlying types.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/basic_result/inequality_failure_type.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nbool operator!=(const failure_type<A, void> &) const\n```\n\n----------------------------------------\n\nTITLE: Specializing first_of_adaptor for two functions case in C++\nDESCRIPTION: A specialization of first_of_adaptor for exactly two functions to optimize this common case. It uses the conditional_kernel directly instead of recursively nesting adapters.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/first_of.hpp.txt#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<class F1, class F2>\nstruct first_of_adaptor<F1, F2> \n: detail::conditional_kernel<F1, F2>\n{\n    typedef detail::conditional_kernel<F1, F2> base;\n    typedef first_of_adaptor fit_rewritable_tag;\n    BOOST_HOF_INHERIT_CONSTRUCTOR(first_of_adaptor, base);\n\n    struct failure\n    : failure_for<F1, F2>\n    {};\n};\n```\n\n----------------------------------------\n\nTITLE: Using BOOST_OUTCOME_CO_TRYV and BOOST_OUTCOME_CO_TRY Macros in C++ Coroutines\nDESCRIPTION: These macros evaluate expressions within coroutines, continuing execution if successful or returning try_operation_return_as(X) if unsuccessful. They rely on customization points for try_operation_has_value, try_operation_return_as, and try_operation_extract_value.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/macros/co_tryv.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_OUTCOME_CO_TRYV(expr)\n```\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_OUTCOME_CO_TRY(expr)\n```\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_OUTCOME_CO_TRY(var, expr)\n```\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_OUTCOME_CO_TRYV_FAILURE_LIKELY(expr)\n```\n\n----------------------------------------\n\nTITLE: Throwing bad_outcome_access Exception for Missing Exception in C++\nDESCRIPTION: This code snippet illustrates how the policy throws a bad_outcome_access exception when attempting to access an exception that doesn't exist in a basic_outcome object.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/policies/throw_bad_result_access.md#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_OUTCOME_THROW_EXCEPTION(bad_outcome_access(\"no exception\"));\n```\n\n----------------------------------------\n\nTITLE: Defining Scoped Channel with Custom Range in C++\nDESCRIPTION: This snippet defines a 'scoped_channel_value' which allows a channel to utilize a custom value range defined by separate structs for minimum and maximum values. This demonstrates the flexibility of channel definitions to accommodate different ranges.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/channel.rst.txt#2025-04-22_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\n  struct float_zero { static float apply() { return 0.0f; } };\\n  struct float_one  { static float apply() { return 1.0f; } };\\n  typedef scoped_channel_value<float,float_zero,float_one> bits32f;\\n\n```\n\n----------------------------------------\n\nTITLE: Defining BinaryFunctionObject Concept in C++\nDESCRIPTION: Defines a concept for an object with a const call operator that accepts exactly two parameters. This concept must satisfy the ConstFunctionObject requirements and support a function call with two arguments.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/doc/src/concepts.md.txt#2025-04-22_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nconcept UnaryFunctionObject\n{\n    template<class T, class U>\n    auto operator()(T&&, U&&) const;\n};\n```\n\n----------------------------------------\n\nTITLE: Dynamic Property Exception Hierarchy in C++\nDESCRIPTION: A set of custom exception classes for handling various error scenarios in dynamic property operations, providing detailed error reporting and inheritance-based error handling\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/property_map/doc/dynamic_property_map.rst#2025-04-22_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\nstruct dynamic_property_exception : public std::exception {\n    virtual ~dynamic_property_exception() throw() {}\n};\n\nstruct property_not_found : public std::exception {\n    std::string property;\n    property_not_found(const std::string& property);\n    virtual ~property_not_found() throw();\n    const char* what() const throw();\n}\n```\n\n----------------------------------------\n\nTITLE: Using flow Adaptor for Function Composition in C++\nDESCRIPTION: Shows how to use the flow adaptor from Boost.HigherOrderFunctions to compose multiple functions together, creating a new function from existing ones.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/src/gettingstarted.md#2025-04-22_snippet_6\n\nLANGUAGE: C++\nCODE:\n```\nauto four = flow(sum(2), sum(1))(1); \n```\n\n----------------------------------------\n\nTITLE: Color Conversion and Gradient Calculation with GIL in C++\nDESCRIPTION: This snippet shows how to compute the luminosity gradient of an RGB image by first converting it to grayscale. It demonstrates the use of color_converted_view for on-the-fly color space conversion.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/tutorial/gradient.rst.txt#2025-04-22_snippet_14\n\nLANGUAGE: cpp\nCODE:\n```\nvoid x_gradient_rgb_luminosity(rgb32fc_view_t const& src, gray8s_view_t const& dst)\n{\n  x_gradient(color_converted_view<gray8_pixel_t>(src), dst);\n}\n\ntemplate <typename SrcView, typename DstView>\nvoid x_luminosity_gradient(SrcView const& src, DstView const& dst)\n{\n  using gray_pixel_t = pixel<typename channel_type<SrcView>::type, gray_layout_t>;\n  x_gradient(color_converted_view<gray_pixel_t>(src), dst);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing first_of_adaptor template for conditional function selection in C++\nDESCRIPTION: The first_of_adaptor template combines multiple functions and calls the first one that can handle the given arguments. It uses conditional logic to select between function candidates and inherits constructors and behaviors from its base classes.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/first_of.hpp.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<class F, class... Fs>\nstruct first_of_adaptor \n: detail::conditional_kernel<F, BOOST_HOF_JOIN(first_of_adaptor, Fs...) >\n{\n    typedef first_of_adaptor fit_rewritable_tag;\n    typedef BOOST_HOF_JOIN(first_of_adaptor, Fs...) kernel_base;\n    typedef detail::conditional_kernel<F, kernel_base > base;\n\n    BOOST_HOF_INHERIT_DEFAULT(first_of_adaptor, base)\n\n    template<class X, class... Xs, \n        BOOST_HOF_ENABLE_IF_CONSTRUCTIBLE(base, X, kernel_base), \n        BOOST_HOF_ENABLE_IF_CONSTRUCTIBLE(kernel_base, Xs...)>\n    constexpr first_of_adaptor(X&& f1, Xs&& ... fs) \n    noexcept(BOOST_HOF_IS_NOTHROW_CONSTRUCTIBLE(base, X&&, kernel_base) && BOOST_HOF_IS_NOTHROW_CONSTRUCTIBLE(kernel_base, Xs&&...))\n    : base(BOOST_HOF_FORWARD(X)(f1), kernel_base(BOOST_HOF_FORWARD(Xs)(fs)...))\n    {}\n\n    template<class X, class... Xs, \n        BOOST_HOF_ENABLE_IF_CONSTRUCTIBLE(base, X)>\n    constexpr first_of_adaptor(X&& f1) \n    BOOST_HOF_NOEXCEPT_CONSTRUCTIBLE(base, X&&)\n    : base(BOOST_HOF_FORWARD(X)(f1))\n    {}\n\n    struct failure\n    : failure_for<F, Fs...>\n    {};\n};\n```\n\n----------------------------------------\n\nTITLE: Generating Random UUIDs using Boost UUID Library in C++\nDESCRIPTION: Example demonstrates how to generate random UUIDs using Boost's UUID library. The code uses boost::uuids::random_generator to create a UUID and outputs it as a string using lexical_cast. Compatible with C++03 standard.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/uuid/README.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n// Copyright 2017 James E. King III\n// Distributed under the Boost Software License, Version 1.0.\n// (See https://www.boost.org/LICENSE_1_0.txt)\n//  mkuuid.cpp example\n\n#include <boost/lexical_cast.hpp>\n#include <boost/uuid/random_generator.hpp>\n#include <boost/uuid/uuid_io.hpp>\n#include <iostream>\n\nint main(void)\n{\n    boost::uuids::random_generator gen;\n    std::cout << boost::lexical_cast<std::string>(gen()) << std::endl;\n    return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Boost Property Map Library\nDESCRIPTION: This snippet creates an INTERFACE library for Boost Property Map, making it accessible to other components in the Boost ecosystem. It also defines an alias for the library to streamline its usage within the Boost framework. This setup helps in organizing and referencing the library conveniently in other CMake projects.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/property_map/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(boost_property_map INTERFACE)\nadd_library(Boost::property_map ALIAS boost_property_map)\n```\n\n----------------------------------------\n\nTITLE: Creating a Recursive Print Function with fix Adaptor in C++\nDESCRIPTION: Implements a recursive print function using the fix adaptor to handle nested structures by passing the function itself as the first argument.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/doc/src/example_print.md.txt#2025-04-22_snippet_6\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_HOF_STATIC_LAMBDA_FUNCTION(print) = fix(first_of(\n    [](auto, const auto& x) -> decltype(std::cout << x, void())\n    {\n        std::cout << x << std::endl;\n    },\n    [](auto self, const auto& range) -> decltype(self(*adl::adl_begin(range)), void())\n    {\n        for(const auto& x:range) self(x);\n    },\n    [](auto self, const auto& tuple)\n    {\n        return for_each_tuple(tuple, self);\n    }\n));\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version and Project Name\nDESCRIPTION: This snippet sets the minimum required version for CMake and defines the project name as 'V8'. It also ensures the use of C++ standards from version 20.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/v8-build/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.21)\n\nif (POLICY CMP0048)\n  cmake_policy(SET CMP0048 NEW)\nendif ()\n\nproject(V8)\n\nset(CMAKE_CXX_STANDARD 20)\n```\n\n----------------------------------------\n\nTITLE: Creating a Distributed Road Map with Vertex and Edge Properties\nDESCRIPTION: This snippet illustrates the creation of a distributed graph specifically designed for a road map, using the previously defined City and Highway structures as properties for vertices and edges in the adjacency list.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/distributed_adjacency_list.rst#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\ntypedef adjacency_list<vecS, \n                     distributedS<parallel::mpi::bsp_process_group, vecS>,\n                     directedS,\n                     City, Highway> \n  RoadMap;\n```\n\n----------------------------------------\n\nTITLE: Defining reverse_iterator synopsis in C++\nDESCRIPTION: This code snippet provides the synopsis for the reverse_iterator class, including its constructors, operators, and member functions. It defines the interface and behavior of reverse iterators.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/reverse_iterator.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <class Iterator>\nclass reverse_iterator\n{\npublic:\n    typedef Iterator iterator_type;\n    typedef typename iterator_traits<Iterator>::iterator_category iterator_category;\n    typedef typename iterator_traits<Iterator>::value_type value_type;\n    typedef typename iterator_traits<Iterator>::difference_type difference_type;\n    typedef typename iterator_traits<Iterator>::pointer pointer;\n    typedef typename iterator_traits<Iterator>::reference reference;\n\n    reverse_iterator() {}\n    explicit reverse_iterator(Iterator x) {}\n    template <class OtherIterator>\n    reverse_iterator(const reverse_iterator<OtherIterator>& r) {}\n\n    Iterator base() const;\n    reference operator*() const;\n    pointer operator->() const;\n\n    reverse_iterator& operator++();\n    reverse_iterator operator++(int);\n    reverse_iterator& operator--();\n    reverse_iterator operator--(int);\n\n    reverse_iterator operator+ (difference_type n) const;\n    reverse_iterator& operator+=(difference_type n);\n    reverse_iterator operator- (difference_type n) const;\n    reverse_iterator& operator-=(difference_type n);\n    reference operator[](difference_type n) const;\n};\n```\n\n----------------------------------------\n\nTITLE: Calculating Tuple Size and Serializing Structs with Boost.PFR in C++\nDESCRIPTION: This C++ code snippet demonstrates using Boost.PFR to determine and print the size of a struct and its serialized content. It defines `my_struct` with various fields, including a string. Key dependencies are Boost.PFR and the iostream header. The output showcases the number of fields and serialized values printed to the console.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/pfr/README.md#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\n#include <iostream>\\n#include \\\"boost/pfr/precise.hpp\\\"\\n\\nstruct my_struct { // no ostream operator defined!\\n    std::string s;\\n    int i;\\n};\\n\\nint main() {\\n    my_struct s{{\\\"Das ist fantastisch!\\\"}, 100};\\n    std::cout << \\\"my_struct has \\\" << boost::pfr::tuple_size<my_struct>::value\\n        << \\\" fields: \\\" << boost::pfr::io(s) << \\\"\\\\n\\\";\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Backend Classes with Parameter-Specific Requirements\nDESCRIPTION: Demonstrates a series of backend classes that each require specific named parameters, showcasing how they can be chained together with the frontend template.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_76\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <typename T>\nclass backend0\n{\n    T a0;\n\n public:\n    backend0() : a0()\n    {\n    }\n\n    T const& get_a0() const\n    {\n        return this->a0;\n    }\n\n protected:\n    template <typename ArgPack>\n    void initialize_impl(ArgPack const& args)\n    {\n        this->a0 = args[_a0];\n    }\n};\n\ntemplate <typename B, typename T>\nclass backend1 : public B\n{\n    T a1;\n\n public:\n    backend1() : B(), a1()\n    {\n    }\n\n    T const& get_a1() const\n    {\n        return this->a1;\n    }\n\n protected:\n    template <typename ArgPack>\n    void initialize_impl(ArgPack const& args)\n    {\n        B::initialize_impl(args);\n        this->a1 = args[_a1];\n    }\n};\n\ntemplate <typename B, typename T>\nclass backend2 : public B\n{\n    T a2;\n\n public:\n    backend2() : B(), a2()\n    {\n    }\n\n    T const& get_a2() const\n    {\n        return this->a2;\n    }\n\n protected:\n    template <typename ArgPack>\n    void initialize_impl(ArgPack const& args)\n    {\n        B::initialize_impl(args);\n        this->a2 = args[_a2];\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing std::expected using checked<T,E> wrapper in C++\nDESCRIPTION: Example implementation showing how to create a standards-conforming expected<T,E> by wrapping Outcome's checked<T,E> type with additional functionality. Demonstrates the close design relationship between the two implementations.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/faq/_index.md#2025-04-22_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate<class T, class E>\nclass expected\n{\n    checked<T,E> _impl;\npublic:\n    // Add expected's additional constructors\n    expected() = default;\n    // Implement expected's members\n    T& operator*() & { return _impl.value(); }\n    // etc\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Graph Type Using Boost Graph Library C++\nDESCRIPTION: This snippet defines the graph type for the parallel shortest path example using an adjacency list representation. The graph is directed and employs property templates to define vertex and edge properties.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/dijkstra_example.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntypedef adjacency_list<listS, vecS, directedS,\n                         no_property,                 // Vertex properties \n                         property<edge_weight_t, int> // Edge properties\n                         > graph_t;\n  typedef graph_traits < graph_t >::vertex_descriptor vertex_descriptor;\n  typedef graph_traits < graph_t >::edge_descriptor edge_descriptor;\n```\n\n----------------------------------------\n\nTITLE: Explicit Inplace Value Constructor Implementation\nDESCRIPTION: Constructor for creating an outcome with an in-place value type, conditionally available based on argument type predicates. Supports constexpr, triviality, and noexcept propagation. Calls an internal hook for in-place construction.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/basic_outcome/explicit_inplace_value_constructor.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nexplicit basic_outcome(in_place_type_t<value_type_if_enabled>, Args ...)\n```\n\n----------------------------------------\n\nTITLE: Implementing Decay Helper Types in C++\nDESCRIPTION: Implementation of helper metafunctions used by the decay function. Defines a decay_mf struct that handles the type transformation and unwrapping of references.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/decay.hpp.txt#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<class T>\nstruct decay_mf\n: unwrap_reference<typename std::decay<T>::type>\n{};\n```\n\n----------------------------------------\n\nTITLE: Example: Creating a Distributed Graph with R-MAT Generator\nDESCRIPTION: This code snippet demonstrates how to create a distributed graph using the `scalable_rmat_iterator` and MPI. It includes necessary headers, initializes MPI, sets up a random number generator and a distribution, and then constructs a distributed graph with specified parameters. The example shows a complete usage scenario of the R-MAT graph generator within a distributed computing context.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/scalable_rmat_generator.rst#2025-04-22_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\n  #include <boost/graph/distributed/mpi_process_group.hpp>\n  #include <boost/graph/compressed_sparse_row_graph.hpp>\n  #include <boost/graph/rmat_graph_generator.hpp>\n  #include <boost/random/linear_congruential.hpp>\n\n  using boost::graph::distributed::mpi_process_group;\n\n  typedef compressed_sparse_row_graph<directedS, no_property, no_property, no_property,\n                                      distributedS<mpi_process_group> > Graph;\n  typedef boost::scalable_rmat_iterator<boost::minstd_rand, Graph> RMATGen;\n\n  int main()\n  {\n    boost::minstd_rand gen;\n    mpi_process_group pg;\n\n    int N = 100;\n\n    boost::parallel::variant_distribution<ProcessGroup> distrib \n      = boost::parallel::block(pg, N);\n\n    // Create graph with 100 nodes and 400 edges \n    Graph g(RMATGen(pg, distrib, gen, N, 400, 0.57, 0.19, 0.19, 0.05), \n            RMATGen(), N, pg, distrib);\n    return 0;\n  }\n```\n\n----------------------------------------\n\nTITLE: Using Boost Enable If for Type-Safe Iterator Conversion in C++\nDESCRIPTION: This code snippet demonstrates how to use boost::enable_if to create a type-safe converting constructor for node iterators. It ensures that conversion from const to non-const iterators is prevented at compile-time.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/iterator_facade_tutorial.rst#2025-04-22_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/type_traits/is_convertible.hpp>\n#include <boost/utility/enable_if.hpp>\n\n  ...\n\nprivate: \n  struct enabler {};\n\npublic:\n  template <class OtherValue>\n  node_iter(\n      node_iter<OtherValue> const& other\n    , typename boost::enable_if<\n          boost::is_convertible<OtherValue*,Value*>\n        , enabler\n      >::type = enabler()\n  )\n    : m_node(other.m_node) {}\n```\n\n----------------------------------------\n\nTITLE: Define Function with Required and Optional Parameters\nDESCRIPTION: This code defines a function `f` using `BOOST_PARAMETER_FUNCTION` with a required `graph` parameter and optional parameters like `visitor`, `root_vertex`, `index_map`, and `color_map`. Default values are provided for the optional parameters.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/index.rst#2025-04-22_snippet_12\n\nLANGUAGE: cpp\nCODE:\n```\n\"BOOST_PARAMETER_FUNCTION((void), f, tag,\n        (required (graph, \\*))\n        (optional\n            (visitor,     \\*, boost::dfs_visitor<>())\n            (root_vertex, \\*, \\*vertices(graph).first)\n            (index_map,   \\*, get(boost::vertex_index, graph))\n            (color_map,   \\*, \n                default_color_map(num_vertices(graph), index_map)\n            )\n        )\n    )\n    {\n    }\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Compile Definitions for Boost Thread\nDESCRIPTION: Sets up compile definitions for the thread library, handling different configurations for static and shared library builds.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/thread/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(boost_thread\n  PUBLIC BOOST_THREAD_NO_LIB\n  PRIVATE BOOST_THREAD_SOURCE\n)\n\nif(BUILD_SHARED_LIBS)\n  target_compile_definitions(boost_thread PUBLIC BOOST_THREAD_DYN_LINK INTERFACE BOOST_THREAD_USE_DLL PRIVATE BOOST_THREAD_BUILD_DLL)\nelse()\n  target_compile_definitions(boost_thread PUBLIC BOOST_THREAD_STATIC_LINK INTERFACE BOOST_THREAD_USE_LIB PRIVATE BOOST_THREAD_BUILD_LIB)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Implementing Complex Object Inspection with Validation in C++\nDESCRIPTION: Demonstrates implementation of inspection for LogTargetConfig with fallback values, invariants, and custom validation logic.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/lib/Inspection/include/Inspection/README.md#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nstruct LogTargetConfig {\n  std::size_t writeConcern = 1;\n  std::size_t softWriteConcern = 1;\n  bool waitForSync = false;\n};\n\nbool greaterZero(std::size_t v) { return v > 0; }\n\ntemplate<class Inspector>\nauto inspect(Inspector& f, LogTargetConfig& x) {\n  return f.object(x)\n      .fields(f.field(\"writeConcern\", x.writeConcern).invariant(greaterZero),\n              f.field(\"softWriteConcern\", x.softWriteConcern)\n                  .fallback(std::ref(x.writeConcern)).invariant(greaterZero),\n              f.field(\"waitForSync\", x.waitForSync).fallback(f.keep()))\n      .invariant([](LogTargetConfig& c) { return c.writeConcern >= c.softWriteConcern});\n}\n```\n\n----------------------------------------\n\nTITLE: Random Access ND Image Concept Definition in GIL\nDESCRIPTION: This concept defines the requirements for N-dimensional images, specifying associated types like view_t, const_view_t, point_t, value_type, and allocator_type. It includes constructors for initializing the image with dimensions and fill values, a recreate function for resizing the image, and functions for accessing dimensions and views.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/image.rst#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n concept RandomAccessNDImageConcept<typename Img> : Regular<Img>\n  {\n    typename view_t; where MutableRandomAccessNDImageViewConcept<view_t>;\n    typename const_view_t = view_t::const_t;\n    typename point_t      = view_t::point_t;\n    typename value_type   = view_t::value_type;\n    typename allocator_type;\n\n    Img::Img(point_t dims, std::size_t alignment=0);\n    Img::Img(point_t dims, value_type fill_value, std::size_t alignment);\n\n    void Img::recreate(point_t new_dims, std::size_t alignment=0);\n    void Img::recreate(point_t new_dims, value_type fill_value, std::size_t alignment);\n\n    const point_t&        Img::dimensions() const;\n    const const_view_t&   const_view(const Img&);\n    const view_t&         view(Img&);\n  };\n```\n\n----------------------------------------\n\nTITLE: Implementing stringify with Boost.HigherOrderFunctions in C++\nDESCRIPTION: A simplified approach to create a stringify function using Boost.HigherOrderFunctions' first_of and BOOST_HOF_RETURNS. This approach is more concise and readable than traditional SFINAE-based solutions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/doc/src/example_overloading.md.txt#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_HOF_STATIC_LAMBDA_FUNCTION(stringify) = first_of(\n    [](auto x) BOOST_HOF_RETURNS(std::to_string(x)),\n    [](auto x) BOOST_HOF_RETURNS(static_cast<std::ostringstream&>(std::ostringstream() << x).str())\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Static Lambda Function Using Factory Pattern in C++\nDESCRIPTION: This snippet shows an alternative approach to BOOST_HOF_STATIC_LAMBDA_FUNCTION using the factory pattern. It demonstrates how to create a static function without requiring a reinterpret cast.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/src/faq.md#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nstruct sum_factory\n{\n    auto operator*() const\n    {\n        return [](auto x, auto y)\n        {\n            return x + y;\n        };\n    }\n}\n\nBOOST_HOF_STATIC_FUNCTION(sum) = boost::hof::indirect(sum_factory{});\n```\n\n----------------------------------------\n\nTITLE: Packed Channel Value Definition\nDESCRIPTION: Defines the `packed_channel_value` class template in C++. This class represents a channel defined over a specified number of bits and models the ChannelValueConcept. It is used for representing channels that are packed into a smaller bit range.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/channel.rst#2025-04-22_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\n  // Value of a channel defined over NumBits bits. Models ChannelValueConcept\n  template <int NumBits> class packed_channel_value;\n```\n\n----------------------------------------\n\nTITLE: Implementing a Frontend Class with No-Spec Function Call Operator in C++\nDESCRIPTION: Example demonstrating the use of BOOST_PARAMETER_NO_SPEC_FUNCTION_CALL_OPERATOR to create a frontend class template with a configurable backend through parameterized inheritance. This allows backend classes to enforce their own parameter specifications.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_83\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <typename B>\nstruct frontend : B\n{\n    frontend() : B()\n    {\n    }\n\n    BOOST_PARAMETER_NO_SPEC_FUNCTION_CALL_OPERATOR((void))\n    {\n        this->initialize_impl(args);\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing a string parsing function with error handling in C++\nDESCRIPTION: A C++ function named 'to_string' that attempts to parse a string into a size_t value, handling potential exceptions by converting them to status codes. The function returns a status_result<size_t> which combines the parsed value with potential error information.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/experimental/c-api/example.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nstatus_result<size_t> to_string(const std::string& str) noexcept\n{\n  size_t result = 0;\n  try {\n    result = std::stoul(str);\n  }\n  catch(...) {\n    // Convert current exception to a status code\n    return error_from_exception();\n  }\n  return result;\n}\n```\n\n----------------------------------------\n\nTITLE: Compress and Uncompress Files Using Zlib in Visual Basic\nDESCRIPTION: This example demonstrates compression and decompression of files using Zlib functions in Visual Basic. It requires 'zlib.dll' and handles cases without knowledge of uncompressed size, appending it to the file. It takes file paths and (optionally) compression level as parameters, outputting a compressed or uncompressed file. The example ensures the correct file size appended and manages potential errors during the process.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/zlib/zlib-1.2.13/old/visual-basic.txt#2025-04-22_snippet_1\n\nLANGUAGE: Visual Basic\nCODE:\n```\nOption Explicit\nPrivate lngpvtPcnSml As Long 'Stores value for 'lngPercentSmaller'\nPrivate Const SUCCESS As Long = 0\nPrivate Const strFilExt As String = \".cpr\"\nPrivate Declare Function lngfncCpr Lib \"zlib.dll\" Alias \"compress2\" (ByRef\ndest As Any, ByRef destLen As Any, ByRef src As Any, ByVal srcLen As Long,\nByVal level As Integer) As Long\nPrivate Declare Function lngfncUcp Lib \"zlib.dll\" Alias \"uncompress\" (ByRef\ndest As Any, ByRef destLen As Any, ByRef src As Any, ByVal srcLen As Long)\nAs Long\n\nPublic Sub subCompressFile(ByVal strargOriFilPth As String, Optional ByVal\nstrargCprFilPth As String, Optional ByVal intLvl As Integer = 9)\n    Dim strCprPth As String\n    Dim lngOriSiz As Long\n    Dim lngCprSiz As Long\n    Dim bytaryOri() As Byte\n    Dim bytaryCpr() As Byte\n    lngOriSiz = FileLen(strargOriFilPth)\n    ReDim bytaryOri(lngOriSiz - 1)\n    Open strargOriFilPth For Binary Access Read As #1\n        Get #1, , bytaryOri()\n    Close #1\n    strCprPth = IIf(strargCprFilPth = \"\", strargOriFilPth, strargCprFilPth)\n'Select file path and name\n    strCprPth = strCprPth & IIf(Right(strCprPth, Len(strFilExt)) =\nstrFilExt, \"\", strFilExt) 'Add file extension if not exists\n    lngCprSiz = (lngOriSiz * 1.01) + 12 'Compression needs temporary a bit\nmore space then original file size\n    ReDim bytaryCpr(lngCprSiz - 1)\n    If lngfncCpr(bytaryCpr(0), lngCprSiz, bytaryOri(0), lngOriSiz, intLvl) =\nSUCCESS Then\n        lngpvtPcnSml = (1# - (lngCprSiz / lngOriSiz)) * 100\n        ReDim Preserve bytaryCpr(lngCprSiz - 1)\n        Open strCprPth For Binary Access Write As #1\n            Put #1, , bytaryCpr()\n            Put #1, , lngOriSiz 'Add the the original size value to the end\n(last 4 bytes)\n        Close #1\n    Else\n        MsgBox \"Compression error\"\n    End If\n    Erase bytaryCpr\n    Erase bytaryOri\nEnd Sub\n\nPublic Sub subUncompressFile(ByVal strargFilPth As String)\n    Dim bytaryCpr() As Byte\n    Dim bytaryOri() As Byte\n    Dim lngOriSiz As Long\n    Dim lngCprSiz As Long\n    Dim strOriPth As String\n    lngCprSiz = FileLen(strargFilPth)\n    ReDim bytaryCpr(lngCprSiz - 1)\n    Open strargFilPth For Binary Access Read As #1\n        Get #1, , bytaryCpr()\n    Close #1\n    'Read the original file size value:\n    lngOriSiz = bytaryCpr(lngCprSiz - 1) * (2 ^ 24) _\n              + bytaryCpr(lngCprSiz - 2) * (2 ^ 16) _\n              + bytaryCpr(lngCprSiz - 3) * (2 ^ 8) _\n              + bytaryCpr(lngCprSiz - 4)\n    ReDim Preserve bytaryCpr(lngCprSiz - 5) 'Cut of the original size value\n    ReDim bytaryOri(lngOriSiz - 1)\n    If lngfncUcp(bytaryOri(0), lngOriSiz, bytaryCpr(0), lngCprSiz) = SUCCESS\nThen\n        strOriPth = Left(strargFilPth, Len(strargFilPth) - Len(strFilExt))\n        Open strOriPth For Binary Access Write As #1\n            Put #1, , bytaryOri()\n        Close #1\n    Else\n        MsgBox \"Uncompression error\"\n    End If\n    Erase bytaryCpr\n    Erase bytaryOri\nEnd Sub\nPublic Property Get lngPercentSmaller() As Long\n    lngPercentSmaller = lngpvtPcnSml\nEnd Property\n```\n\n----------------------------------------\n\nTITLE: Implementing Template-Based Construction with Type Deduction in C++\nDESCRIPTION: A function object for constructing objects from a template class, automatically deducing template parameters based on the function arguments. It applies type transformations specified by the template parameter D (like decay or identity).\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/construct.hpp.txt#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<template<class...> class Template, template<class...> class D>\nstruct construct_template_f\n{\n    constexpr construct_template_f() noexcept\n    {}\n    template<class... Ts, class Result=BOOST_HOF_JOIN(Template, typename D<Ts>::type...), \n        BOOST_HOF_ENABLE_IF_CONSTRUCTIBLE(Result, Ts...)>\n    constexpr Result operator()(Ts&&... xs) const BOOST_HOF_NOEXCEPT_CONSTRUCTIBLE(Result, Ts&&...)\n    {\n        return construct_f<Result>()(BOOST_HOF_FORWARD(Ts)(xs)...);\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Installation and Dependencies Configuration\nDESCRIPTION: Sets up installation rules for the arangoimport binary and configures additional dependencies including zlib, ICU, jemalloc, and man pages. Also creates an alias command 'arangoimp'.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/client-tools/Import/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(\n  TARGETS ${BIN_ARANGOIMPORT}\n  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR})\n\ninstall_config(${BIN_ARANGOIMPORT})\n\nadd_dependencies(${BIN_ARANGOIMPORT} zlibstatic)\n\n# use ICU 64 for the client tools\nadd_dependencies(${BIN_ARANGOIMPORT} iculegacy_build)\n\nif (USE_JEMALLOC)\n  add_dependencies(${BIN_ARANGOIMPORT} jemalloc_build)\nendif ()\n\nadd_dependencies(${BIN_ARANGOIMPORT} man)\n\ninstall_command_alias(${BIN_ARANGOIMPORT}\n  ${CMAKE_INSTALL_BINDIR}\n  arangoimp\n)\n```\n\n----------------------------------------\n\nTITLE: Histogram Calculation of Image in C++\nDESCRIPTION: The `histogram.cpp` example provides an algorithm to compute an image's histogram using Boost GIL. This is a critical task in image processing for analyzing image intensity distributions. Dependencies include Boost GIL, and the input is the image to analyze, with the output being a histogram typically visualized or analyzed further in post-processing.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/example/README.md#2025-04-22_snippet_6\n\nLANGUAGE: C++\nCODE:\n```\n\"int main() {\\n  // Your code here\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Modifying and Checking Reflection of Changes in C++ Array\nDESCRIPTION: This snippet changes an element in the Python ndarray and checks if the change is reflected in the original C++ array, demonstrating the reference passing mechanism of from_data.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/doc/html/numpy/_sources/tutorial/fromdata.rst.txt#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\n    py_array[1] = 5 ;\n    std::cout << \"Is the change reflected in the C++ array used to create the ndarray ? \" << std::endl;\n    for (int j = 0; j < 5; j++)\n    {\n      std::cout << arr[j] << ' ';\n    }\n```\n\n----------------------------------------\n\nTITLE: Channel Multiply Function Definition\nDESCRIPTION: Defines the `channel_multiply` function template. This function multiplies two channel values and divides the result by `max_value`, effectively scaling the result to the channel's range. It takes the channel type as a template parameter and the two channel values as arguments.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/channel.rst#2025-04-22_snippet_15\n\nLANGUAGE: cpp\nCODE:\n```\n  // returns a * b / max_value\n  template <typename Channel>\n  typename channel_traits<Channel>::value_type channel_multiply(Channel a, Channel b);\n```\n\n----------------------------------------\n\nTITLE: Example Usage of BOOST_PARAMETER_MEMBER_FUNCTION in C++\nDESCRIPTION: Demonstrates how to use the BOOST_PARAMETER_MEMBER_FUNCTION macro to create a flexible member function that accepts various parameter passing styles. Shows utility functions for value category testing.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_18\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <std::size_t N>\n|std_bitset|_\\<N + 1> rvalue_bitset()\n{\n    return |std_bitset|_\\<N + 1>();\n}\n\ntemplate <std::size_t N>\n|std_bitset|_\\<N + 1> const rvalue_const_bitset()\n{\n    return |std_bitset|_\\<N + 1>();\n}\n\ntemplate <std::size_t N>\n|std_bitset|_\\<N + 1>& lvalue_bitset()\n{\n    static |std_bitset|_\\<N + 1> lset = |std_bitset|_\\<N + 1>();\n    return lset;\n}\n\ntemplate <std::size_t N>\n|std_bitset|_\\<N + 1> const& lvalue_const_bitset()\n{\n    static |std_bitset|_\\<N + 1> const clset = |std_bitset|_\\<N + 1>();\n    return clset;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Static Pixel Comparison with Compile-Time Recursion\nDESCRIPTION: A template metaprogramming approach to compare pixels semantically, supporting static element-wise comparison across different color spaces. Uses recursion to compare elements at compile-time with template specialization for base case.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/color_base.rst#2025-04-22_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nnamespace detail\n{\n  template <int K> struct element_recursion\n  {\n    template <typename P1,typename P2>\n    static bool static_equal(const P1& p1, const P2& p2)\n    {\n      return element_recursion<K-1>::static_equal(p1,p2) &&\n             semantic_at_c<K-1>(p1)==semantic_at_c<N-1>(p2);\n    }\n  };\n  template <> struct element_recursion<0>\n  {\n    template <typename P1,typename P2>\n    static bool static_equal(const P1&, const P2&) { return true; }\n  };\n}\n\ntemplate <typename P1,typename P2>\nbool static_equal(const P1& p1, const P2& p2)\n{\n  gil_function_requires<ColorSpacesCompatibleConcept<P1::layout_t::color_space_t,P2::layout_t::color_space_t> >();\n  return detail::element_recursion<size<P1>::value>::static_equal(p1,p2);\n}\n```\n\n----------------------------------------\n\nTITLE: Packed Pixel Model Creation in C++\nDESCRIPTION: The `packed_pixel.cpp` example demonstrates how to create a custom pixel model with non-standard channel sizes, specifically when bytes do not divide evenly. This involves manipulating lower-level pixel structures using Boost GIL. Required dependencies are primarily Boost GIL, with inputs being custom pixel configuration and outputs being images utilizing the custom model.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/example/README.md#2025-04-22_snippet_7\n\nLANGUAGE: C++\nCODE:\n```\n\"int main() {\\n  // Your code here\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Complete Localized Program Example in C++\nDESCRIPTION: Full example demonstrating how to set up message translation including dictionary path setup and locale configuration.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/doc/messages_formatting.txt#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/locale.hpp>\n#include <iostream>\n\nusing namespace std;\nusing namespace boost::locale;\n\nint main()\n{\n    generator gen;\n\n    // Specify location of dictionaries\n    gen.add_messages_path(\".\");\n    gen.add_messages_domain(\"hello\");\n\n    // Generate locales and imbue them to iostream\n    locale::global(gen(\"\"));\n    cout.imbue(locale());\n\n    // Display a message using current system locale\n    cout << translate(\"Hello World\") << endl;\n}\n```\n\n----------------------------------------\n\nTITLE: Using GIL's transform_pixel_positions for Gradient Calculation in C++\nDESCRIPTION: This snippet demonstrates the use of GIL's transform_pixel_positions algorithm to calculate the x-gradient. It uses a function object to define the pixel transformation operation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/tutorial/gradient.rst.txt#2025-04-22_snippet_13\n\nLANGUAGE: cpp\nCODE:\n```\nstruct half_x_difference\n{\n  int operator()(const gray8c_loc_t& src_loc) const\n  {\n      return (src_loc.x()[-1] - src_loc.x()[1]) / 2;\n  }\n};\n\nvoid x_gradient_unguarded(gray8c_view_t const& src, gray8s_view_t const& dst)\n{\n  transform_pixel_positions(src, dst, half_x_difference());\n}\n```\n\n----------------------------------------\n\nTITLE: ArangoDB Startup Options in C++\nDESCRIPTION: Defines and documents startup options for ArangoDB using C++ code. This snippet includes guidelines for setting description, version information, and flags for the options.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\noptions->\n    addOption(\"--section.option-name\",\n              \"A brief description of the startup option, maybe over multiple \"\n              \"lines, with an upper-case first letter and ending with a .\",\n                new XyzParameter(&_xyzVariable),\n                arangodb::options::makeFlags(\n                    arangodb::options::Flags::DefaultNoComponents,\n                    arangodb::options::Flags::OnCoordinator, // in a cluster, it only has an effect on Coordinators\n                    arangodb::options::Flags::OnSingle,      // supported in single server mode, too\n                    arangodb::options::Flags::Enterprise,    // only available in the Enterprise Edition\n                    arangodb::options::Flags::Uncommon))     // don't show with --help but only --help-all or --help-<section>\n    .setIntroducedIn(30906) // format XYYZZ, X = major, YY = minor, ZZ = bugfix version\n    .setIntroducedIn(31002) // list all versions the feature is added in but exclude versions that are implied, e.g. 31100\n    .setLongDescription(R\"(You can optionally add details here. They are only\nshown in the online documentation (and --dump-options). \n\nThe _text_ is interpreted as **Markdown**, allowing formatting like\n`inline code`, fenced code blocks, and even tables.)\");\n```\n\n----------------------------------------\n\nTITLE: Simple LEAF Function Example\nDESCRIPTION: Shows a simple function using LEAF for error handling. The function g() calls f() and returns the result plus one.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/leaf/benchmark/benchmark.md#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\nleaf::result<int> f();\n\nleaf::result<int> g()\n{\n  BOOST_LEAF_AUTO(x, f());\n  return x+1;\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking Histogram Calculation for Luminosity in C++\nDESCRIPTION: This snippet shows how to create a luminosity histogram using the grayscale version of an input image. It exemplifies how to call a previously defined histogram function with the appropriate type conversions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/examples.rst.txt#2025-04-22_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <typename View, typename R>\nvoid luminosity_histogram(const View& v, R& hist)\n{\n    grayimage_histogram(color_converted_view<gray8_pixel_t>(v),hist);\n}\n\n// Example invocation\nunsigned char hist[256];\nstd::fill(hist,hist+256,0);\nluminosity_histogram(my_view,hist);\n```\n\n----------------------------------------\n\nTITLE: Checking Tagged Arguments in C++ for Argument Pack\nDESCRIPTION: This template structure determines if the first type and all elements in a parameter pack are tagged reference types, returning a true or false indication.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_12\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <typename T0, typename ...Pack>\nstruct are_tagged_arguments\n    // : |mpl_true|_ if T0 and all elements in Pack are tagged reference types, |mpl_false|_ otherwise.\n{\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Comparison Operators for iterator_facade in C++\nDESCRIPTION: Definition of comparison operators (==, !=, <, <=, >, >=) for iterator_facade. These operators use SFINAE to ensure they are only in the overload set when the derived types are interoperable.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/iterator_facade_ref.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <class Dr1, class V1, class TC1, class R1, class D1,\n          class Dr2, class V2, class TC2, class R2, class D2>\ntypename enable_if_interoperable<Dr1,Dr2,bool>::type // exposition\noperator ==(iterator_facade<Dr1,V1,TC1,R1,D1> const& lhs,\n            iterator_facade<Dr2,V2,TC2,R2,D2> const& rhs);\n\ntemplate <class Dr1, class V1, class TC1, class R1, class D1,\n          class Dr2, class V2, class TC2, class R2, class D2>\ntypename enable_if_interoperable<Dr1,Dr2,bool>::type\noperator !=(iterator_facade<Dr1,V1,TC1,R1,D1> const& lhs,\n            iterator_facade<Dr2,V2,TC2,R2,D2> const& rhs);\n\ntemplate <class Dr1, class V1, class TC1, class R1, class D1,\n          class Dr2, class V2, class TC2, class R2, class D2>\ntypename enable_if_interoperable<Dr1,Dr2,bool>::type\noperator <(iterator_facade<Dr1,V1,TC1,R1,D1> const& lhs,\n           iterator_facade<Dr2,V2,TC2,R2,D2> const& rhs);\n\ntemplate <class Dr1, class V1, class TC1, class R1, class D1,\n          class Dr2, class V2, class TC2, class R2, class D2>\ntypename enable_if_interoperable<Dr1,Dr2,bool>::type\noperator <=(iterator_facade<Dr1,V1,TC1,R1,D1> const& lhs,\n            iterator_facade<Dr2,V2,TC2,R2,D2> const& rhs);\n\ntemplate <class Dr1, class V1, class TC1, class R1, class D1,\n          class Dr2, class V2, class TC2, class R2, class D2>\ntypename enable_if_interoperable<Dr1,Dr2,bool>::type\noperator >(iterator_facade<Dr1,V1,TC1,R1,D1> const& lhs,\n           iterator_facade<Dr2,V2,TC2,R2,D2> const& rhs);\n\ntemplate <class Dr1, class V1, class TC1, class R1, class D1,\n          class Dr2, class V2, class TC2, class R2, class D2>\ntypename enable_if_interoperable<Dr1,Dr2,bool>::type\noperator >=(iterator_facade<Dr1,V1,TC1,R1,D1> const& lhs,\n            iterator_facade<Dr2,V2,TC2,R2,D2> const& rhs);\n```\n\n----------------------------------------\n\nTITLE: Luminosity Histogram Calculation (RGB, 8-bit, Planar)\nDESCRIPTION: This code calculates the luminosity histogram for an RGB image. It iterates through each pixel, converts it to grayscale, and increments the corresponding bin in the histogram. It assumes an 8-bit image format and planar memory layout.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/tutorial/histogram.rst#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nvoid luminosity_hist(\n    std::uint8_t const* r, std::uint8_t const* g, std::uint8_t const* b,\n    int rows, int cols, int sRowBytes, Histogram* hist)\n{\n    for (int r = 0; r < rows; r++)\n    {\n        for (int c = 0; c < cols; c++)\n        {\n            int v = RGBToGray(r[c], g[c], b[c]); // call internal function or macro\n            (*hist)[v]++;\n        }\n        r += sRowBytes;\n        g += sRowBytes;\n        b += sRowBytes;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the applyN Metafunction Template in C++\nDESCRIPTION: Template definition for applyN, which invokes a Metafunction Class with N arguments. It takes template parameters F and A1 through An, and produces a type member.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/apply.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntemplate< \n      typename F, typename A1,\\ |...| typename An\n    >\nstruct apply\\ *n*\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Using Remove Algorithm in C++ with Boost MPL\nDESCRIPTION: This example demonstrates how to use the 'remove' algorithm to remove all 'float' types from a vector of types.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/remove.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntypedef vector<int,float,char,float,float,double>::type types;\ntypedef remove< types,float >::type result;\n\nBOOST_MPL_ASSERT(( equal< result, vector<int,char,double> > ));\n```\n\n----------------------------------------\n\nTITLE: Using Runtime-Specified Images with GIL in C++\nDESCRIPTION: Demonstrates how to use runtime-specified images with GIL, including reading, processing, and writing images with dynamic types.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/tutorial/gradient.rst.txt#2025-04-22_snippet_21\n\nLANGUAGE: cpp\nCODE:\n```\n#include <boost/mp11.hpp>\n#include <boost/gil/extension/io/jpeg/old.hpp>\n\ntypedef mp11::mp_list<gray8_image_t, gray16_image_t, rgb8_image_t, rgb16_image_t> my_img_types;\nany_image<my_img_types> runtime_image;\njpeg_read_image(\"input.jpg\", runtime_image);\n\ngray8s_image_t gradient(runtime_image.dimensions());\nx_luminosity_gradient(const_view(runtime_image), view(gradient));\njpeg_write_view(\"x_gradient.jpg\", color_converted_view<gray8_pixel_t>(const_view(gradient)));\n```\n\n----------------------------------------\n\nTITLE: Implementing Strong Guarantee Swap in C++\nDESCRIPTION: Defines a function `strong_swap` that attempts to perform a swap operation with a strong exception guarantee. It takes a boolean reference to indicate success and two objects to swap. The function is designed to be discoverable through ADL and is used in `basic_result::swap` when dealing with types that have throwing move operations.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/functions/strong_swap.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nvoid strong_swap(bool &all_good, T &a, T &b)\n```\n\n----------------------------------------\n\nTITLE: Using std::auto_ptr with Pointer Containers in C++\nDESCRIPTION: Shows how to use std::auto_ptr with pointer containers, allowing for automatic transfer of ownership when inserting derived class objects into a container of base class pointers.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/tutorial.rst#2025-04-22_snippet_12\n\nLANGUAGE: cpp\nCODE:\n```\nstd::auto_ptr<Derived> p( new Derived );\nvec.push_back( p );\n```\n\n----------------------------------------\n\nTITLE: Initializing Partial Sum Function in C++\nDESCRIPTION: This snippet demonstrates how to create a partial sum function using the 'partial' adaptor. It allows for both full evaluation and partial application of the function.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/doc/src/partialfunctions.md.txt#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nauto sum = partial([](int x, int y)\n{\n    return x+y;\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Build Options\nDESCRIPTION: These `option` commands define various build options for the Boost.GIL project. These options control whether to build examples, enable header tests, enable extensions (Dynamic Image, IO, Numeric, Toolbox), use Conan for dependencies, and use clang-tidy for linting.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n\"option(BOOST_GIL_BUILD_EXAMPLES \\\"Build examples\\\" ON)\noption(BOOST_GIL_BUILD_HEADER_TESTS \\\"Enable self-contained header tests\\\" ON)\noption(BOOST_GIL_ENABLE_EXT_DYNAMIC_IMAGE \\\"Enable Dynamic Image extension, tests and examples\\\" ON)\noption(BOOST_GIL_ENABLE_EXT_IO \\\"Enable IO extension, tests and examples (require libjpeg, libpng, libtiff)\\\" ON)\noption(BOOST_GIL_ENABLE_EXT_NUMERIC \\\"Enable Numeric extension, tests and examples\\\" ON)\noption(BOOST_GIL_ENABLE_EXT_TOOLBOX \\\"Enable Toolbox extension, tests and examples\\\" ON)\noption(BOOST_GIL_USE_CONAN \\\"Use Conan to install dependencies\\\" OFF)\noption(BOOST_GIL_USE_CLANG_TIDY \\\"Set CMAKE_CXX_CLANG_TIDY property on targets to enable clang-tidy linting\\\" OFF)\nset(CMAKE_CXX_STANDARD 11 CACHE STRING \\\"C++ standard version to use (default is 11)\\\")\"\n```\n\n----------------------------------------\n\nTITLE: Image Convolution with Gaussian Kernel in C++\nDESCRIPTION: The `convolution.cpp` example convolves an image with a Gaussian kernel using Boost GIL, an essential operation for image smoothing and edge detection. Boost GIL is required for its image handling and convolution features. The example presumes an input image and outputs a convolved image, typically used for blurring effects.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/example/README.md#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\n\"int main() {\\n  // Your code here\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Unnamed Placeholder Template Implementation in C++\nDESCRIPTION: Core implementation of unnamed placeholder functionality with support for partial application and operator overloading. Includes failure handling and SFINAE-based return type deduction.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/placeholders.hpp.txt#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\nstruct unamed_placeholder\n{\ntemplate<class T, class Invoker>\nstruct partial_ap\n{\n    T val;\n\n    BOOST_HOF_INHERIT_DEFAULT_EMPTY(partial_ap, T)\n\n    template<class X, class... Xs, BOOST_HOF_ENABLE_IF_CONSTRUCTIBLE(T, X&&, Xs&&...)>\n    constexpr partial_ap(X&& x, Xs&&... xs) : val(BOOST_HOF_FORWARD(X)(x), BOOST_HOF_FORWARD(Xs)(xs)...)\n    {}\n\n    BOOST_HOF_RETURNS_CLASS(partial_ap);\n\n    struct partial_ap_failure\n    {\n        template<class Failure>\n        struct apply\n        {\n            template<class... Xs>\n            struct of;\n\n            template<class X>\n            struct of<X>\n            : Failure::template of<typename std::add_const<T>::type, X>\n            {};\n        };\n    };\n\n    struct failure\n    : failure_map<partial_ap_failure, Invoker>\n    {};\n\n    template<class X>\n    constexpr BOOST_HOF_SFINAE_RESULT(const Invoker&, id_<T>, id_<X>) \n    operator()(X&& x) const BOOST_HOF_SFINAE_RETURNS\n    (\n        Invoker()(BOOST_HOF_CONST_THIS->val, BOOST_HOF_FORWARD(X)(x))\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Testing Infrastructure Interface Example - Testsuite Setup\nDESCRIPTION: Demonstrates the required structure for integrating a test suite into the testing framework. Shows the expected exports and configuration pattern for test suite registration.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/js/client/modules/@arangodb/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexports.setup = function() {\n  allTestPaths.push(/* suite directories */);\n  testFns.register(/* suite functions */);\n  fnDocs.register(/* suite documentation */);\n}\n```\n\n----------------------------------------\n\nTITLE: Writing an Image to TIFF Format using Boost.GIL\nDESCRIPTION: This code snippet demonstrates how to write an image to a TIFF file. The user initializes an 'rgb8_image_t' object, writes the image data to the file specified by the filename, and uses the 'write_view' function to perform the write operation, passing the TIFF tag as a parameter.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/io.rst.txt#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nstd::string filename( \"image.tif\" );\nrgb8_image_t img( 640, 480 );\n\n// write data into image\n\nwrite_view( filename\n              , view( img )\n              , tiff_tag()\n              );\n```\n\n----------------------------------------\n\nTITLE: Configuring Example Test List in CMake\nDESCRIPTION: Defines a list of example tests to be compiled and run as part of the build process. Each example is configured as a passing test case.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/safe_numerics/example/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(run_examples_list\n  example1\n  example2\n  example3\n  example4\n  example5\n  example6\n  example7\n  example8\n  example82\n  example83\n  example84\n  example10\n  example11\n  example13\n  example14\n  example15\n  example16\n  example18\n  example19\n  example20\n  example92\n  example93\n)\n```\n\n----------------------------------------\n\nTITLE: Specifying Message Domain When Converting Message Objects\nDESCRIPTION: Demonstrates how to specify a message domain explicitly when converting a message object to a string. This technique allows obtaining translations from different domains without changing global settings.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/doc/messages_formatting.txt#2025-04-22_snippet_8\n\nLANGUAGE: C++\nCODE:\n```\nstd::wstring foo_msg = translate(L\"Hello World\").str(\"foo\");\nstd::wstring bar_msg = translate(L\"Hello World\").str(\"bar\");\n```\n\n----------------------------------------\n\nTITLE: Using BOOST_PARAMETER_BASIC_MEMBER_FUNCTION to Define a Static Member Function\nDESCRIPTION: Implementation of a static member function 'evaluate' using Boost Parameter Library with required and optional parameters, demonstrating parameter access and value category testing.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_52\n\nLANGUAGE: cpp\nCODE:\n```\n    struct B\n    {\n        BOOST_PARAMETER_BASIC_MEMBER_FUNCTION((bool), static evaluate, kw,\n            (deduced\n                (required\n                    (lrc, (|std_bitset|_\\<1>))\n                    (lr, (|std_bitset|_\\<2>))\n                )\n                (optional\n                    (rrc, (|std_bitset|_\\<3>))\n                    (rr, (|std_bitset|_\\<4>))\n                )\n            )\n        )\n        {\n            BOOST_TEST_EQ(\n                passed_by_lvalue_reference_to_const\n              , U::evaluate_category<0>(args[_lrc])\n            );\n            BOOST_TEST_EQ(\n                passed_by_lvalue_reference\n              , U::evaluate_category<1>(args[_lr])\n            );\n            BOOST_TEST_EQ(\n                passed_by_rvalue_reference_to_const\n              , U::evaluate_category<2>(\n                    args[_rrc0 | rvalue_const_bitset<2>()]\n                )\n            );\n            BOOST_TEST_EQ(\n                passed_by_rvalue_reference\n              , U::evaluate_category<3>(\n                    args[_rr0 | rvalue_bitset<3>()]\n                )\n            );\n\n            return true;\n        }\n    };\n```\n\n----------------------------------------\n\nTITLE: Defining explicit basic_result copy constructor in C++\nDESCRIPTION: This snippet implements an explicit converting copy constructor for the `basic_result` class template. It is enabled when a specific predicate condition is true. The constructor propagates the noexcept and triviality qualities of its underlying operations.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/basic_result/explicit_make_exception_ptr_copy_converting_constructor.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nexplicit basic_result(const basic_result<R, S, P> &)\n    {\n        // Calls the on_result_copy_construction method\n        on_result_copy_construction(this, input);\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing Rank Accumulation Reducer in C++\nDESCRIPTION: A reduction operation template for PageRank algorithm that accumulates rank values across distributed processes by adding local and remote values\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/distributed_property_map.rst#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate<typename T>\nstruct rank_accumulate_reducer {\n  static const bool non_default_resolver = true;\n\n  // The default rank of an unknown node \n  template<typename K>\n  T operator()(const K&) const { return T(0); }\n\n  template<typename K>\n  T operator()(const K&, const T& x, const T& y) const { return x + y; }\n};\n```\n\n----------------------------------------\n\nTITLE: Declaring C++ Class and Method for Counting Errors\nDESCRIPTION: This code snippet illustrates a simple C++ class with a method for counting occurrences of errors based on a provided vector of 'Foo' objects. It demonstrates proper naming conventions and usage of scoping to enhance readability.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/STYLEGUIDE.md#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nclass MyClass {\n public:\n  int countFooErrors(std::vector<Foo> const& foos) {\n    int n = 0;  // Clear meaning given limited scope and context\n    for (auto const& foo : foos) {\n      ...\n      ++n;\n    }\n    return n;\n  }\n  void doSomethingImportant() {\n    std::string fqdn = ...;  // Well-known abbreviation for Fully Qualified Domain Name\n  }\n private:\n  int const kMaxAllowedConnections = ...;  // Clear meaning within context\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Embedded Fields Inspection in C++\nDESCRIPTION: Shows how to implement inspection for inherited and embedded fields, demonstrating field reuse and inheritance handling.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/lib/Inspection/include/Inspection/README.md#2025-04-22_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nstruct Inner {\n  string s;\n};\ntemplate<class Inspector>\nauto inspect(Inspector& f, Inner& v) {\n  return f.object(v).fields(f.field(\"s\", v.s));\n}\n\nstruct Base {\n  int x;\n};\ntemplate<class Inspector>\nauto inspect(Inspector& f, Base& v) {\n  return f.object(v).fields(f.field(\"x\", v.x));\n}\n\nstruct Derived : Base {\n  int y;\n  Inner i;\n};\ntemplate<class Inspector>\nauto inspect(Inspector& f, Derived& v) {\n  return f.object(v).fields(\n    f.embedFields(static_cast<Base&>(*this)),\n    f.field(\"y\", v.y),\n    f.embedFields(v.i));\n}\n```\n\n----------------------------------------\n\nTITLE: Affine Transformations with Boost GIL in C++\nDESCRIPTION: The `affine.cpp` example implements arbitrary affine transformations on images using Boost GIL. The output image is transformed following the affine matrix specifications. The essential dependency is Boost GIL, which provides the necessary tools for performing affine transformations on images. Inputs include the source image and transformation parameters; the output is the affine-transformed image saved to disk.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/example/README.md#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n\"int main() {\\n  // Your code here\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Upgrading Legacy BOOST_OUTCOME_TRY Usage with Regular Expression in C++\nDESCRIPTION: A regular expression to help upgrade code from pre-v2.2 BOOST_OUTCOME_TRY behavior to the new behavior by converting variable declarations to use auto && explicitly.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/changelog/v22.md#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\n_TRY\\(([^(]*?),(.*?)\\);\n```\n\nLANGUAGE: cpp\nCODE:\n```\n_TRY(auto &&\\1,\\2);\n```\n\n----------------------------------------\n\nTITLE: Transform Algorithm Usage Example in C++\nDESCRIPTION: Example demonstrating how to use the transform algorithm to convert a sequence of types to a sequence of pointer types using the add_pointer transformation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/transform.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ntypedef vector<char,short,int,long,float,double> types;\ntypedef vector<char*,short*,int*,long*,float*,double*> pointers;\ntypedef transform< types,boost::add_pointer<_1> >::type result;\n\nBOOST_MPL_ASSERT(( equal<result,pointers> ));\n```\n\n----------------------------------------\n\nTITLE: Split Save/Load Implementation in C++\nDESCRIPTION: Demonstrates how to split serialization and deserialization logic using Inspector::isLoading.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/lib/Inspection/include/Inspection/README.md#2025-04-22_snippet_8\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <class Inspector>\nauto inspect(Inspector& f, my_class& x) {\n  if constexpr (Inspector::isLoading) {\n    return load(f, x);\n  } else {\n    return save(f, x);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Boost Library Aliases in CMake\nDESCRIPTION: Creates alias targets with Boost:: namespace prefix for both libraries to support modern CMake dependency management. This allows dependent projects to reference the libraries using the standard Boost namespace convention.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/serialization/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(Boost::serialization ALIAS boost_serialization)\nadd_library(Boost::wserialization ALIAS boost_wserialization)\n```\n\n----------------------------------------\n\nTITLE: Integrating llhttp in a CMake Project\nDESCRIPTION: This CMake snippet shows how to include llhttp in a CMake project using FetchContent. It declares the llhttp dependency, makes it available, and links it to the project.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/llhttp/README.md#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nFetchContent_Declare(llhttp\n  URL \"https://github.com/nodejs/llhttp/releases/download/v6.0.4/llhttp-release-v6.0.4.tar.gz\")  # Using version 6.0.4\n\nFetchContent_MakeAvailable(llhttp)\n\ntarget_link_libraries(${EXAMPLE_PROJECT_NAME} ${PROJECT_LIBRARIES} llhttp ${PROJECT_NAME})\n```\n\n----------------------------------------\n\nTITLE: Creating Layouts for RGBA Color Space in Boost GIL (C++)\nDESCRIPTION: This snippet shows how to define layouts for the RGBA color space using different channel orderings in Boost GIL. Default and custom mappings are illustrated, utilizing templates and MPL vectors for flexible channel ordering.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/color_space.rst#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate\n<\n    typename ColorSpace,\n    typename ChannelMapping = mpl::range_c<int, 0, mpl::size<ColorSpace>::value>\n>\nstruct layout\n{\n  using color_space_t = ColorSpace;\n  using channel_mapping_t = ChannelMapping;\n};\n```\n\nLANGUAGE: cpp\nCODE:\n```\nusing rgba_layout_t = layout<rgba_t>; // default ordering is 0,1,2,3...\nusing bgra_layout_t = layout<rgba_t, mpl::vector4_c<int,2,1,0,3>>;\nusing argb_layout_t = layout<rgba_t, mpl::vector4_c<int,1,2,3,0>>;\nusing abgr_layout_t = layout<rgba_t, mpl::vector4_c<int,3,2,1,0>>;\n```\n\n----------------------------------------\n\nTITLE: Converting Python Objects to C++ Types\nDESCRIPTION: C++ code showing how to extract C++ values from Python objects using the extract template class.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/doc/article.rst#2025-04-22_snippet_24\n\nLANGUAGE: C++\nCODE:\n```\ndouble x = extract<double>(o);\n```\n\n----------------------------------------\n\nTITLE: UTF-8 Case Conversion Example in C++\nDESCRIPTION: Demonstrates the limitations of standard case conversion vs boost::locale when handling UTF-8 encoded strings with non-ASCII characters.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/doc/conversions.txt#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nstd::string grussen = \"grüßen\";\nstd::cout << boost::algorithm::to_upper_copy(grussen) << \" \" << boost::locale::to_upper(grussen) << std::endl;\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Boost.Python NumPy ndarray\nDESCRIPTION: This snippet demonstrates the creation of NumPy ndarrays from Python tuples and lists using Boost.Python in C++. It highlights the conversion of Python sequences to ndarrays and initialization with specific data types. The example emphasizes the integration between C++ and Python when handling numerical data with Boost.Python.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/doc/numpy/reference/ndarray.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nnamespace p = boost::python;\nnamespace np = boost::python::numpy;\n\np::object tu = p::make_tuple('a','b','c') ;\nnp::ndarray example_tuple = np::array (tu) ; \n\np::list l ;\nnp::ndarray example_list = np::array (l) ; \n\nnp::dtype dt = np::dtype::get_builtin<int>();\nnp::ndarray example_list1 = np::array (l,dt);\n\n```\n\n----------------------------------------\n\nTITLE: Deriving Pixel Reference Type in GIL (C++)\nDESCRIPTION: This template structure defines a metafunction in the Generic Image Library (GIL) to derive a new pixel reference type from an existing one, allowing modification of channel value, layout, planarity, and mutability. This enables flexible creation of specialized pixel reference types tailored to specific image processing needs.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/metafunctions.rst#2025-04-22_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <typename PixelReference,\n        typename ChannelValue, typename Layout, typename IsPlanar, typename IsMutable>\nstruct derived_pixel_reference_type\n{\n  typedef ... type;  // Models PixelConcept\n};\n```\n\n----------------------------------------\n\nTITLE: BOOST_MPL_HAS_XXX_TEMPLATE_DEF Usage Example\nDESCRIPTION: A comprehensive example showing how to use the BOOST_MPL_HAS_XXX_TEMPLATE_DEF macro to detect template members in various class types, with assertions to demonstrate the expected behavior.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/HAS_XXX_TEMPLATE_DEF.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_MPL_HAS_XXX_TEMPLATE_DEF(xxx)\n\nstruct test1  {};\nstruct test2  { void xxx(); };\nstruct test3  { int xxx; };\nstruct test4  { static int xxx(); };\nstruct test5  { typedef int xxx; };\nstruct test6  { struct xxx; };\nstruct test7  { typedef void (*xxx)(); };\nstruct test8  { typedef void (xxx)(); };\nstruct test9  { template< class T > struct xxx {}; };\n\nBOOST_MPL_ASSERT_NOT(( has_xxx<test1> ));\nBOOST_MPL_ASSERT_NOT(( has_xxx<test2> ));\nBOOST_MPL_ASSERT_NOT(( has_xxx<test3> ));\nBOOST_MPL_ASSERT_NOT(( has_xxx<test4> ));\nBOOST_MPL_ASSERT_NOT(( has_xxx<test5> ));\nBOOST_MPL_ASSERT_NOT(( has_xxx<test6> ));\nBOOST_MPL_ASSERT_NOT(( has_xxx<test7> ));\nBOOST_MPL_ASSERT_NOT(( has_xxx<test8> ));\n\n#if !defined(BOOST_MPL_CFG_NO_HAS_XXX_TEMPLATE)\nBOOST_MPL_ASSERT(( has_xxx<test9> ));\n#endif\n\nBOOST_MPL_ASSERT(( has_xxx<test9, true_> ));\n```\n\n----------------------------------------\n\nTITLE: Checking Value Presence in Implementation (C++)\nDESCRIPTION: A static function that returns true if a value is present in the passed implementation. It is constexpr where possible, has constant time complexity, and never throws exceptions. The function is always available.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/policies/base/has_value.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nstatic bool _has_value(Impl &&) noexcept\n```\n\n----------------------------------------\n\nTITLE: Repeat Integral Decorator Implementation\nDESCRIPTION: Decorator that handles runtime integral values for repeat counts. Implements recursive function application with a depth limit for constexpr support.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/repeat.hpp.txt#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<int Depth>\nstruct repeat_integral_decorator\n{\n    template<class Integral, class F, class T, class... Ts, class Self=repeat_integral_decorator<Depth-1>>\n    constexpr auto operator()(Integral n, const F& f, T&& x, Ts&&... xs) const BOOST_HOF_RETURNS\n    (\n        (n) ? \n            Self()(n-1, f, f(BOOST_HOF_FORWARD(T)(x), BOOST_HOF_FORWARD(Ts)(xs)...)) :\n            BOOST_HOF_FORWARD(T)(x)\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Using BOOST_MPL_HAS_XXX_TRAIT_NAMED_DEF Macro in C++\nDESCRIPTION: Demonstrates the usage of the BOOST_MPL_HAS_XXX_TRAIT_NAMED_DEF macro to define a 'has_xxx' trait and test it with various struct definitions. The example shows how the trait detects the presence of a nested 'xxx' type in different structs.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/HAS_XXX_TRAIT_NAMED_DEF.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_MPL_HAS_XXX_TRAIT_NAMED_DEF(has_xxx, xxx, false)\n\nstruct test1 {};\nstruct test2 { void xxx(); };\nstruct test3 { int xxx; };\nstruct test4 { static int xxx(); };\nstruct test5 { template< typename T > struct xxx {}; };\nstruct test6 { typedef int xxx; };\nstruct test7 { struct xxx; };\nstruct test8 { typedef void (*xxx)(); };\nstruct test9 { typedef void (xxx)(); };\n\nBOOST_MPL_ASSERT_NOT(( has_xxx<test1> ));\nBOOST_MPL_ASSERT_NOT(( has_xxx<test2> ));\nBOOST_MPL_ASSERT_NOT(( has_xxx<test3> ));\nBOOST_MPL_ASSERT_NOT(( has_xxx<test4> ));\nBOOST_MPL_ASSERT_NOT(( has_xxx<test5> ));\n\n#if !defined(BOOST_MPL_CFG_NO_HAS_XXX)\nBOOST_MPL_ASSERT(( has_xxx<test6> ));\nBOOST_MPL_ASSERT(( has_xxx<test7> ));\nBOOST_MPL_ASSERT(( has_xxx<test8> ));\nBOOST_MPL_ASSERT(( has_xxx<test9> ));\n#endif\n\nBOOST_MPL_ASSERT(( has_xxx<test6,true_> ));\nBOOST_MPL_ASSERT(( has_xxx<test7,true_> ));\nBOOST_MPL_ASSERT(( has_xxx<test8,true_> ));\nBOOST_MPL_ASSERT(( has_xxx<test9,true_> ));\n```\n\n----------------------------------------\n\nTITLE: Defining Interoperable Single Pass Iterator Requirements in C++\nDESCRIPTION: Specifies the expressions, return types, and semantics required for two iterator types X and Y to be considered interoperable single pass iterators. Includes operations for assignment, construction, equality, and inequality.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/InteroperableIterator.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ny = x     // Return Type: Y, Post-condition: y == x\nY(x)      // Return Type: Y, Post-condition: Y(x) == x\nx == y    // Return Type: convertible to bool\ny == x    // Return Type: convertible to bool\nx != y    // Return Type: convertible to bool\ny != x    // Return Type: convertible to bool\n```\n\n----------------------------------------\n\nTITLE: Implementing type traits with Boost.HigherOrderFunctions in C++\nDESCRIPTION: Using Boost.HigherOrderFunctions to create a type trait that detects if a type is dereferenceable (has pointer operators). Combines member function detection and conditional overloading.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/doc/src/example_overloading.md.txt#2025-04-22_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\n// Check that T has member function for operator* and ope\ntemplate<class T>\nauto has_pointer_member(const T&) -> decltype(\n    &T::operator*,\n    &T::operator->,\n    std::true_type{}\n);\n\nBOOST_HOF_STATIC_LAMBDA_FUNCTION(has_pointer_operators) = first_of(\n    BOOST_HOF_LIFT(has_pointer_member),\n    [](auto* x) -> bool_constant<(!std::is_void<decltype(*x)>())> { return {}; },\n    always(std::false_type{})\n);\n\ntemplate<class T>\nstruct is_dereferenceable\n: decltype(has_pointer_operators(std::declval<T>()))\n{};\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries to AQL\nDESCRIPTION: Links the specified libraries to the `arango_aql` library. This ensures that the AQL library has access to the functionalities provided by these other ArangoDB components such as geo, graph, indexes, iresearch, network and the external immer library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/Aql/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(arango_aql\n  arango_geo\n  arango_graph\n  arango_indexes\n  arango_iresearch\n  arango_network\n  immer)\n```\n\n----------------------------------------\n\nTITLE: Configuring GTest Test Targets for ArangoDB in CMake\nDESCRIPTION: Sets up two test targets for ArangoDB using GoogleTest - one specifically for IResearch tests and another for all non-IResearch tests. The tests use XML output format and specific test filters.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/CMakeLists.txt#2025-04-22_snippet_18\n\nLANGUAGE: CMake\nCODE:\n```\n# for CircleCI\nadd_test(NAME arangodbtests-iresearch\n  COMMAND arangodbtests --gtest_output=xml --gtest_filter=IResearch*)\n\nadd_test(NAME arangodbtests-non-iresearch\n  COMMAND arangodbtests --gtest_output=xml --gtest_filter=-*_LongRunning:IResearch*)\n```\n\n----------------------------------------\n\nTITLE: Using deref Metafunction in C++\nDESCRIPTION: Demonstrates the usage of the deref metafunction to dereference an iterator in C++ template metaprogramming. It shows how to obtain the type of the element referenced by an iterator.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/deref.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntypedef deref<iter>::type t;\n```\n\n----------------------------------------\n\nTITLE: Dynamic Image Usage Example - dynamic_image.cpp\nDESCRIPTION: This example illustrates the use of dynamic images in Boost GIL, where image properties like color space and channel type are specified at runtime. It demonstrates the flexibility of GIL in handling images with varying characteristics.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/index.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n* :download:`dynamic_image.cpp <../example/dynamic_image.cpp>`:\n  Using images whose properties (color space, channel type) are specified\n  at run time\n```\n\n----------------------------------------\n\nTITLE: Semantic Equivalent of replace_if in C++\nDESCRIPTION: Demonstrates the semantic equivalent of the replace_if algorithm using lambda expressions and the transform algorithm.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/replace_if.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntypedef lambda<pred>::type p;\ntypedef transform< s, if_< apply_wrap1<p,_1>,x,_1>, in >::type r;\n```\n\n----------------------------------------\n\nTITLE: Defining Implicit Error Type Constructor in C++\nDESCRIPTION: This snippet defines the implicit constructor for the `error_type` class, allowing for error conversion if a specific predicate condition is satisfied. It uses the `on_result_construction` function to handle the construction logic.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/basic_result/implicit_error_converting_constructor.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n+++\ntitle = \"\\\"basic_result(S &&)\\\"\"\ndescription = \"Implicit \\\"error_type\\\" constructor. Available if \\\"predicate::enable_error_converting_constructor<S>\\\" is true. Constexpr, triviality and noexcept propagating.\"\ncategories = [\"constructors\", \"implicit-constructors\", \"converting-constructors\"]\nweight = 190\n+++\n\nImplicit \\\"error_type\\\" constructor. Calls {{% api \"void on_result_construction(T *, U &&) noexcept\" %}} with \\\"this\\\" and \\\"S\\\".\n\n*Requires*: \\\"predicate::enable_error_converting_constructor<S>\\\" is true.\n\n*Complexity*: Same as for \\\"error_type\\\"'s copy or move constructor. Constexpr, triviality and noexcept of underlying operations is propagated.\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Infix Adaptor in C++\nDESCRIPTION: Example demonstrating how to use the infix adaptor with a plus_f functor to enable an infix addition operation between two values.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/infix.hpp.txt#2025-04-22_snippet_7\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/hof.hpp>\n#include <cassert>\nusing namespace boost::hof;\n\nstruct plus_f\n{\n    template<class T, class U>\n    T operator()(T x, U y) const\n    {\n        return x+y;\n    }\n};\n\nint main() {\n    constexpr infix_adaptor<plus_f> plus = {};\n    int r = 3 <plus> 2;\n    assert(r == 5);\n}\n```\n\n----------------------------------------\n\nTITLE: Using the front Metafunction in C++\nDESCRIPTION: Demonstrates the usage of the 'front' metafunction to get the first element of a sequence. It shows the expression semantics and how to typedef the result.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/front.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntypedef front<s>::type t;\n```\n\n----------------------------------------\n\nTITLE: Channel Conversion Concept in C++\nDESCRIPTION: This snippet describes the 'ChannelConvertibleConcept' which ensures that a source channel can be converted to a destination channel. It outlines a mechanism for safe type conversion between channel types.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/channel.rst.txt#2025-04-22_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\n  template <ChannelConcept Src, ChannelValueConcept Dst>\\n  concept ChannelConvertibleConcept\\n  {\\n      Dst channel_convert(Src);\\n  };\\n\n```\n\n----------------------------------------\n\nTITLE: Defining ArangoDB RocksDB Source Files\nDESCRIPTION: This snippet uses the `target_sources` function to specify the source files that comprise the `arango_rocksdb` target.  The `PRIVATE` visibility ensures that these sources are only used to build this target and are not exposed to other targets. These source files implement the interaction between ArangoDB and RocksDB.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/RocksDBEngine/Methods/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\ntarget_sources(arango_rocksdb PRIVATE\n  RocksDBBatchedBaseMethods.cpp\n  RocksDBBatchedMethods.cpp\n  RocksDBBatchedWithIndexMethods.cpp\n  RocksDBReadOnlyBaseMethods.cpp\n  RocksDBReadOnlyMethods.cpp\n  RocksDBSingleOperationReadOnlyMethods.cpp\n  RocksDBSingleOperationTrxMethods.cpp\n  RocksDBSstFileMethods.cpp\n  RocksDBTrxBaseMethods.cpp\n  RocksDBTrxMethods.cpp)\n```\n\n----------------------------------------\n\nTITLE: Defining the multi_iter Class in C++\nDESCRIPTION: This snippet defines the multi_iter class within the Boost.Python namespace, providing methods for iteration over broadcasted arrays. It allows incrementing the iterator, checking its status, and accessing dimension and shape information of the broadcasted arrays.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/doc/numpy/reference/multi_iter.rst#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nnamespace boost \n{ \nnamespace python \n{ \nnamespace numpy \n{ \nclass multi_iter : public object \n{ \npublic: \n    void next(); \n    bool not_done() const; \n    char * get_data(int n) const; \n    int const get_nd() const; \n    Py_intptr_t const * get_shape() const; \n    Py_intptr_t const shape(int n) const; \n}; \n} \n} \n}\n```\n\n----------------------------------------\n\nTITLE: Overriding BOOST_MPL_LIMIT_VECTOR_SIZE Example in C++\nDESCRIPTION: Example of overriding the BOOST_MPL_LIMIT_VECTOR_SIZE macro to set a custom limit of 10 elements for vector templates. The example shows defining valid vectors within the limit and comments on what would cause an error.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/LIMIT_VECTOR_SIZE.rst#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\n#define BOOST_MPL_CFG_NO_PREPROCESSED_HEADERS\n#define BOOST_MPL_LIMIT_VECTOR_SIZE 10\n#include <boost/mpl/vector.hpp>\n\nusing namespace boost::mpl;\n\ntypedef vector_c<int,1> v_1;\ntypedef vector_c<int,1,2,3,4,5,6,7,8,9,10> v_10;\n// typedef vector_c<int,1,2,3,4,5,6,7,8,9,10,11> v_11; // error!\n```\n\n----------------------------------------\n\nTITLE: Using min_element in C++ with Boost MPL\nDESCRIPTION: Demonstrates how to use the min_element algorithm to find the type with the smallest size in a vector of types. It uses transform_view to apply sizeof to each type before comparison.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/min_element.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntypedef vector<bool,char[50],long,double> types;\ntypedef min_element<\n      transform_view< types,sizeof_<_1> >\n    >::type iter;\n\nBOOST_MPL_ASSERT(( is_same< deref<iter::base>::type, bool> ));\n```\n\n----------------------------------------\n\nTITLE: Generating Boost Include Paths Function\nDESCRIPTION: Function that generates a list of include paths for all Boost libraries. Handles both unified and separate include directory structures.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/atomic/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(generate_boost_include_paths result)\n    if (IS_DIRECTORY \"${CMAKE_CURRENT_SOURCE_DIR}/../../boost\" AND EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/../../boost/version.hpp\")\n        set(${result} \"${CMAKE_CURRENT_SOURCE_DIR}/../..\" PARENT_SCOPE)\n        return()\n    endif()\n    file(GLOB path_list LIST_DIRECTORIES True \"${CMAKE_CURRENT_SOURCE_DIR}/../*\")\n    foreach(path IN LISTS path_list)\n        if (IS_DIRECTORY \"${path}/include\")\n            list(APPEND include_list \"${path}/include\")\n        endif()\n    endforeach()\n    set(${result} ${include_list} PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Converting HTTP Library Results to Application Outcome Types in C++\nDESCRIPTION: Implementation of a custom value_or_error concept converter that transforms httplib::result<U> into app::outcome<T>. The converter handles both successful results and error cases by type-erasing HTTP library failures into application-specific error types.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/tutorial/advanced/interop/app-map-httplib2.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nnamespace BOOST_OUTCOME_V2_NAMESPACE { namespace convert\n{\n  template<class T, class U> struct value_or_error<T, httplib::result<U>>\n  {\n    // Tell Outcome that we want other result/outcome types to be processed by this converter\n    static constexpr bool enable_result_inputs = true;\n    static constexpr bool enable_outcome_inputs = true;\n    // If input is httplib::result<U>, and T is constructible from U ...\n    template<class X,\n             class = std::enable_if_t<\n               std::is_same<std::decay_t<X>, httplib::result<U>>::value  // match httplib::result<U> exactly\n               && std::is_constructible<T, U>::value                      // T must be constructible from U\n               >>\n    constexpr app::outcome<T> operator()(X &&input) noexcept\n    {\n      if(input)\n      {\n        return app::outcome<T>(std::forward<X>(input).value());\n      }\n      return app::outcome<T>(app::make_httplib_exception(std::forward<X>(input).error()));\n    }\n  };\n}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost.WinAPI CMake Project\nDESCRIPTION: This snippet sets up the CMake project for Boost.WinAPI, including version requirements, project name, and version. It creates an interface library, sets include directories, and specifies dependencies on Boost.Config and Boost.Predef.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/winapi/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.20)\n\nproject(boost_winapi VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n\nadd_library(boost_winapi INTERFACE)\nadd_library(Boost::winapi ALIAS boost_winapi)\n\ntarget_include_directories(boost_winapi INTERFACE include)\n\ntarget_link_libraries(boost_winapi\n    INTERFACE\n        Boost::config\n        Boost::predef\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Limit Function Decorator in C++\nDESCRIPTION: Defines a limit_adaptor template class to implement parameter limiting functionality. This adapter wraps a callable object and constrains it to accept up to N parameters, improving error reporting for partially evaluated functions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/limit.hpp.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<std::size_t N, class F>\nstruct limit_adaptor : detail::callable_base<F>\n{\n    typedef std::integral_constant<std::size_t, N> fit_function_param_limit;\n    BOOST_HOF_INHERIT_CONSTRUCTOR(limit_adaptor, detail::callable_base<F>)\n\n    template<class... Ts>\n    constexpr const detail::callable_base<F>& base_function(Ts&&... xs) const\n    {\n        return boost::hof::always_ref(*this)(xs...);\n    }\n\n    BOOST_HOF_RETURNS_CLASS(limit_adaptor);\n\n    template<class... Ts, class=typename std::enable_if<(sizeof...(Ts) <= N)>::type>\n    constexpr BOOST_HOF_SFINAE_RESULT(const detail::callable_base<F>&, id_<Ts>...) \n    operator()(Ts&&... xs) const BOOST_HOF_SFINAE_RETURNS\n    (\n        (BOOST_HOF_MANGLE_CAST(const detail::callable_base<F>&)(BOOST_HOF_CONST_THIS->base_function(xs...)))\n            (BOOST_HOF_FORWARD(Ts)(xs)...)\n    );\n\n};\n```\n\n----------------------------------------\n\nTITLE: Vector Usage Example in C++\nDESCRIPTION: Demonstrates creating a vector of floating point types and adding an integer type using push_back, then verifying the type at a specific position.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/vector.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ntypedef vector<float,double,long double> floats;\ntypedef push_back<floats,int>::type types;\n\nBOOST_MPL_ASSERT(( is_same< at_c<types,3>::type, int > ));\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Server Stackless Example in CMake\nDESCRIPTION: This CMake snippet sets up the build configuration for a stackless HTTP server example using Boost.Beast. It groups source files, defines the executable, links necessary libraries, and sets project properties.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/beast/example/http/server/stackless/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nGroupSources(include/boost/beast beast)\nGroupSources(example/http/server/stackless \"/\")\n\nadd_executable (http-server-stackless\n    ${BOOST_BEAST_FILES}\n    Jamfile\n    http_server_stackless.cpp\n)\n\ntarget_link_libraries(http-server-stackless\n    lib-asio\n    lib-beast)\n\nset_property(TARGET http-server-stackless PROPERTY FOLDER \"example-http-server\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Container and Feature Tests in CMake\nDESCRIPTION: Sets up tests for additional containers (stack, vector) and features like tracking, variants, and valarrays.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/serialization/CMake/CMakeLists.txt#2025-04-22_snippet_19\n\nLANGUAGE: CMake\nCODE:\n```\narchive_test(test_stack A)\narchive_test(test_split)\narchive_test(test_tracking)\narchive_test(test_unregistered)\narchive_test(test_unique_ptr)\narchive_test(test_valarray)\narchive_test(test_variant A)\narchive_test(test_vector A)\n```\n\n----------------------------------------\n\nTITLE: Using make\\<file_handle\\> with Deferred Invocation Pattern in C++\nDESCRIPTION: The purpose of this code snippet is to demonstrate a deferred invocation pattern using make\\<file_handle\\> in C++. This pattern simplifies object construction by deferring invocation to a call operator. It requires a templated free function and is intended to improve clarity and efficiency during compile time.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/tutorial/advanced/constructors/metaprogrammg3.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nmake<file_handle>{\"hello\"}();\n```\n\n----------------------------------------\n\nTITLE: Implementing static_if with Boost.HigherOrderFunctions in C++\nDESCRIPTION: Using Boost.HigherOrderFunctions to create static_if-like functionality in pre-C++17 code. This example shows how to conditionally compile different code paths based on type traits.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/doc/src/example_overloading.md.txt#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<typename T>\nvoid decrement_kindof(T& value)\n{\n    eval(first_of(\n        if_(std::is_same<std::string, T>())([&](auto id){\n            id(value).pop_back();\n        }),\n        [&](auto id){\n            --id(value);\n        }\n    ));\n}\n```\n\n----------------------------------------\n\nTITLE: Generic Grayscale Image Histogram Calculation (GIL)\nDESCRIPTION: This template function calculates the histogram of a grayscale image using the Boost GIL. It iterates through the pixels of the grayscale image view and increments the corresponding bin in the histogram. The GrayView type is a GIL image view type that provides iterators to access the pixels.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/tutorial/histogram.rst#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <typename GrayView, typename R>\nvoid grayimage_histogram(GrayView& img, R& hist)\n{\n    for (typename GrayView::iterator it=img.begin(); it!=img.end(); ++it)\n        ++hist[*it];\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up iResearch Test Sources\nDESCRIPTION: This snippet defines the sources for iResearch tests in ArangoDB by setting the CMake variable ARANGODB_IRESEARCH_TESTS_SOURCES. It aggregates the test source files for efficient build management.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/IResearch/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(ARANGODB_IRESEARCH_TESTS_SOURCES\\\n  ${CMAKE_CURRENT_SOURCE_DIR}/ContainersTest.cpp\\\n  ${CMAKE_CURRENT_SOURCE_DIR}/ExpressionFilterTest.cpp\\\n  ${CMAKE_CURRENT_SOURCE_DIR}/GeoAnalyzerTest.cpp\\\n  ${CMAKE_CURRENT_SOURCE_DIR}/GeoFilterTest.cpp\\\n  ${CMAKE_CURRENT_SOURCE_DIR}/GeoDistanceFilterTest.cpp\\\n  ${CMAKE_CURRENT_SOURCE_DIR}/IResearchAnalyzerFeatureTest.cpp\\\n  ${CMAKE_CURRENT_SOURCE_DIR}/IResearchAqlAnalyzerTest.cpp\\\n  ${CMAKE_CURRENT_SOURCE_DIR}/IResearchComparerTest.cpp\\\n  ${CMAKE_CURRENT_SOURCE_DIR}/IResearchDocumentTest.cpp\\\n  ${CMAKE_CURRENT_SOURCE_DIR}/IResearchFeatureTest.cpp\\\n  ${CMAKE_CURRENT_SOURCE_DIR}/IResearchFilterArrayInTest.cpp\\\n  ${CMAKE_CURRENT_SOURCE_DIR}/IResearchFilterArrayIntervalTest.cpp\\\n  ${CMAKE_CURRENT_SOURCE_DIR}/IResearchFilterBooleanTest.cpp\\\n  ${CMAKE_CURRENT_SOURCE_DIR}/IResearchFilterCompareTest.cpp\\\n  ${CMAKE_CURRENT_SOURCE_DIR}/IResearchFilterFunctionTest.cpp\\\n  ${CMAKE_CURRENT_SOURCE_DIR}/IResearchFilterGeoTest.cpp\\\n  ${CMAKE_CURRENT_SOURCE_DIR}/IResearchFilterInTest.cpp\\\n  ${CMAKE_CURRENT_SOURCE_DIR}/IResearchFilterMinHashMatchTest.cpp\\\n  ${CMAKE_CURRENT_SOURCE_DIR}/IResearchFilterNestedTest.cpp\\\n  ${CMAKE_CURRENT_SOURCE_DIR}/IResearchIndexTest.cpp\\\n  ${CMAKE_CURRENT_SOURCE_DIR}/IResearchInvertedIndexConditionTest.cpp\\\n  ${CMAKE_CURRENT_SOURCE_DIR}/IResearchInvertedIndexIteratorTest.cpp\\\n  ${CMAKE_CURRENT_SOURCE_DIR}/IResearchInvertedIndexMetaTest.cpp\\\n  ${CMAKE_CURRENT_SOURCE_DIR}/IResearchLinkTest.cpp\\\n  ${CMAKE_CURRENT_SOURCE_DIR}/IResearchLinkCoordinatorTest.cpp\\\n  ${CMAKE_CURRENT_SOURCE_DIR}/IResearchLinkHelperTest.cpp\\\n  ${CMAKE_CURRENT_SOURCE_DIR}/IResearchLinkMetaTest.cpp\\\n  ${CMAKE_CURRENT_SOURCE_DIR}/IResearchOrderTest.cpp\\\n  ${CMAKE_CURRENT_SOURCE_DIR}/IResearchQueryAggregateTest.cpp\\\n  ${CMAKE_CURRENT_SOURCE_DIR}/IResearchQueryAndTest.cpp\\\n  ${CMAKE_CURRENT_SOURCE_DIR}/IResearchQueryBooleanTermTest.cpp\\\n  ${CMAKE_CURRENT_SOURCE_DIR}/IResearchQueryCommon.cpp\\\n  ${CMAKE_CURRENT_SOURCE_DIR}/IResearchQueryComplexBooleanTest.cpp\\\n  ${CMAKE_CURRENT_SOURCE_DIR}/IResearchQueryExistsTest.cpp\\\n  ${CMAKE_CURRENT_SOURCE_DIR}/IResearchQueryFilterTest.cpp\\\n  ${CMAKE_CURRENT_SOURCE_DIR}/IResearchQueryGeoIntersectsTest.cpp\\\n  ${CMAKE_CURRENT_SOURCE_DIR}/IResearchQueryGeoContainsTest.cpp\\\n  ${CMAKE_CURRENT_SOURCE_DIR}/IResearchQueryGeoDistanceTest.cpp\\\n  ${CMAKE_CURRENT_SOURCE_DIR}/IResearchQueryGeoInRangeTest.cpp\\\n  ${CMAKE_CURRENT_SOURCE_DIR}/IResearchQueryInTest.cpp\\\n  ${CMAKE_CURRENT_SOURCE_DIR}/IResearchQueryInRangeTest.cpp\\\n  ${CMAKE_CURRENT_SOURCE_DIR}/IResearchQueryJoinTest.cpp\\\n  ${CMAKE_CURRENT_SOURCE_DIR}/IResearchQueryLateMaterializationTest.cpp\\\n  ${CMAKE_CURRENT_SOURCE_DIR}/IResearchQueryMinMatchTest.cpp\\\n  ${CMAKE_CURRENT_SOURCE_DIR}/IResearchQueryNGramMatchTest.cpp\\\n  ${CMAKE_CURRENT_SOURCE_DIR}/IResearchQueryNoMaterializationTest.cpp\\\n  ${CMAKE_CURRENT_SOURCE_DIR}/IResearchQueryNullTermTest.cpp\\\n  ${CMAKE_CURRENT_SOURCE_DIR}/IResearchQueryNumericTermTest.cpp\\\n  ${CMAKE_CURRENT_SOURCE_DIR}/IResearchQueryOptimizationTest.cpp\\\n  ${CMAKE_CURRENT_SOURCE_DIR}/IResearchQueryOptionsTest.cpp\\\n  ${CMAKE_CURRENT_SOURCE_DIR}/IResearchQueryOrTest.cpp\\\n  ${CMAKE_CURRENT_SOURCE_DIR}/IResearchQueryPhraseTest.cpp\\\n  ${CMAKE_CURRENT_SOURCE_DIR}/IResearchQueryLevenshteinMatchTest.cpp\\\n  ${CMAKE_CURRENT_SOURCE_DIR}/IResearchQueryWildcardTest.cpp\\\n  ${CMAKE_CURRENT_SOURCE_DIR}/IResearchQueryScorerTest.cpp\\\n  ${CMAKE_CURRENT_SOURCE_DIR}/IResearchQuerySelectAllTest.cpp\\\n  ${CMAKE_CURRENT_SOURCE_DIR}/IResearchQueryStartsWithTest.cpp\\\n  ${CMAKE_CURRENT_SOURCE_DIR}/IResearchQueryStringTermTest.cpp\\\n  ${CMAKE_CURRENT_SOURCE_DIR}/IResearchQueryTokensTest.cpp\\\n  ${CMAKE_CURRENT_SOURCE_DIR}/IResearchQueryValueTest.cpp\\\n  ${CMAKE_CURRENT_SOURCE_DIR}/IResearchQueryTraversalTest.cpp\\\n  ${CMAKE_CURRENT_SOURCE_DIR}/IResearchPrimaryKeyReuseTest.cpp\\\n  ${CMAKE_CURRENT_SOURCE_DIR}/IResearchTestCommon.cpp\\\n  ${CMAKE_CURRENT_SOURCE_DIR}/IResearchViewTest.cpp\\\n  ${CMAKE_CURRENT_SOURCE_DIR}/IResearchViewCoordinatorTest.cpp\\\n  ${CMAKE_CURRENT_SOURCE_DIR}/IResearchViewDBServerTest.cpp\\\n  ${CMAKE_CURRENT_SOURCE_DIR}/IResearchViewMetaTest.cpp\\\n  ${CMAKE_CURRENT_SOURCE_DIR}/IResearchViewNodeTest.cpp\\\n  ${CMAKE_CURRENT_SOURCE_DIR}/IResearchViewSortTest.cpp\\\n  ${CMAKE_CURRENT_SOURCE_DIR}/IResearchViewSortedTest.cpp\\\n  ${CMAKE_CURRENT_SOURCE_DIR}/IResearchViewCountApproximateTest.cpp\\\n  ${CMAKE_CURRENT_SOURCE_DIR}/VelocyPackHelperTest.cpp)\n```\n\n----------------------------------------\n\nTITLE: Accessing Stored Exception with assume_exception in C++\nDESCRIPTION: A constexpr method that provides lvalue reference access to a stored exception. It first invokes NoValuePolicy::narrow_exception_check() and then returns a reference to the exception. The method doesn't throw exceptions and has a void return specialization for void exception_type.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/basic_outcome/assume_exception_lvalue.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nexception_type &assume_exception() & noexcept\n```\n\n----------------------------------------\n\nTITLE: Conditional Compiler Options (OS)\nDESCRIPTION: This snippet conditionally adds compiler options to the `arango_rocksdb` library based on the operating system. It defines platform-specific preprocessor macros to ensure compatibility and proper behavior on different operating systems, such as Cygwin, Darwin (macOS), Linux, SunOS, FreeBSD, NetBSD, OpenBSD, DragonFlyBSD, Android, and Windows. Includes disabling built-in memcmp for cygwin, and defining WIN32, etc. for Windows.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/RocksDBEngine/CMakeLists.txt#2025-04-22_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\n## these defines are copied from rocksdb's CMakeLists.txt\n##  because we are currently using some of their internal headers\n##  in our build\nif(CMAKE_SYSTEM_NAME MATCHES \"Cygwin\")\n  target_compile_options(arango_rocksdb PRIVATE -fno-builtin-memcmp -DCYGWIN)\nelif(CMAKE_SYSTEM_NAME MATCHES \"Darwin\")\n  target_compile_options(arango_rocksdb PRIVATE -DOS_MACOSX)\nelif(CMAKE_SYSTEM_NAME MATCHES \"Linux\")\n  target_compile_options(arango_rocksdb PRIVATE -DOS_LINUX)\nelif(CMAKE_SYSTEM_NAME MATCHES \"SunOS\")\n  target_compile_options(arango_rocksdb PRIVATE -DOS_SOLARIS)\nelif(CMAKE_SYSTEM_NAME MATCHES \"FreeBSD\")\n  target_compile_options(arango_rocksdb PRIVATE -DOS_FREEBSD)\nelif(CMAKE_SYSTEM_NAME MATCHES \"NetBSD\")\n  target_compile_options(arango_rocksdb PRIVATE -DOS_NETBSD)\nelif(CMAKE_SYSTEM_NAME MATCHES \"OpenBSD\")\n  target_compile_options(arango_rocksdb PRIVATE -DOS_OPENBSD)\nelif(CMAKE_SYSTEM_NAME MATCHES \"DragonFly\")\n  target_compile_options(arango_rocksdb PRIVATE -DOS_DRAGONFLYBSD)\nelif(CMAKE_SYSTEM_NAME MATCHES \"Android\")\n  target_compile_options(arango_rocksdb PRIVATE -DOS_ANDROID)\nelif(CMAKE_SYSTEM_NAME MATCHES \"Windows\")\n  target_compile_options(arango_rocksdb PRIVATE -DWIN32 -DOS_WIN -D_MBCS -DWIN64 -DNOMINMAX)\n  if(MINGW)\n    target_compile_options(arango_rocksdb PRIVATE -D_WIN32_WINNT=_WIN32_WINNT_VISTA)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Using Boost.Locale for UTF-8 File Output in C++\nDESCRIPTION: Demonstrates how to use Boost.Locale to generate a locale for UTF-8 encoding and use it with std::wofstream to write UTF-8 encoded text to a file.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/doc/charset_handling.txt#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nstd::locale loc= generator().generate(\"he_IL.UTF-8\");\nstd::wofstream file.\nfile.imbue(loc);\nfile.open(\"hello.txt\");\nfile << L\"שלום!\" << endl;\n```\n\n----------------------------------------\n\nTITLE: Using erase_key Metafunction in C++\nDESCRIPTION: This code snippet demonstrates the usage of the erase_key metafunction. It creates a map with two key-value pairs, then uses erase_key to remove the pair with the key 'char'. The resulting map m1 is then checked for its size and content.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/erase_key.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntypedef map< pair<int,unsigned>, pair<char,long> > m;\ntypedef erase_key<m,char>::type m1;\n\nBOOST_MPL_ASSERT_RELATION( size<m1>::type::value, ==, 1 );\nBOOST_MPL_ASSERT(( is_same< at<m1,char>::type,void_ > ));\nBOOST_MPL_ASSERT(( is_same< at<m1,int>::type,unsigned > ));\n```\n\n----------------------------------------\n\nTITLE: Define Signature for Depth-First Search Function\nDESCRIPTION: This code defines the signature for a `depth_first_search` function using Boost.Parameter, specifying the required parameters: `graph`, `visitor`, `root_vertex`, `index_map`, and `color_map`. This signature ensures that the function can be called with named or positional parameters and provides type checking.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/index.rst#2025-04-22_snippet_14\n\nLANGUAGE: cpp\nCODE:\n```\n\", (required \n        (graph, \\*)\n        (visitor, \\*)\n        (root_vertex, \\*)\n        (index_map, \\*)\n        (color_map, \\*)\n    )\n    \"\n```\n\n----------------------------------------\n\nTITLE: File Reading with Errno Error Handling in C++\nDESCRIPTION: A function that reads an integer value from a file, using errno to indicate error conditions. It demonstrates setting and clearing errno, handling special return values, and manual error propagation patterns typical in C-style programming.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/motivation/errno.md#2025-04-22_snippet_0\n\nLANGUAGE: c++\nCODE:\n```\nint readValue(const char * filename)\n{  \n  FILE* f = fopen(filename, \"r\");\n  if (f == NULL)\n    return 0; // special value indicating failure\n              // keep errno value set by fopen()\n\n  int i;\n  int r = fscanf(f, \"%d\", &i);\n  if (r == 0 || r == EOF) { // special values: i not read\n    errno = ENODATA;        // choose error value to return\n    return 0;\n\n  fclose(f);\n  errno = 0;  // clear error info (success)\n  return i;\n}\n```\n\n----------------------------------------\n\nTITLE: RFC7230 Compliance and HTTPS/WebSocket Examples\nDESCRIPTION: This entry documents the addition of RFC7230 compliance, HTTPS example, Secure WebSocket example, and fixing the message_v1 constructor, which enhances the library's adherence to HTTP standards and provides practical examples for secure communication.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/beast/CHANGELOG.md#2025-04-22_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Creating Python Properties from C++ Getter/Setter Methods\nDESCRIPTION: Shows how to create a Python property from C++ getter and setter methods, exposing private data members with proper encapsulation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/doc/article.rst#2025-04-22_snippet_11\n\nLANGUAGE: cpp\nCODE:\n```\nclass_<World>(\"World\", init<std::string>())\n    .add_property(\"msg\", &World::greet, &World::set)\n    ...\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Boost MPL Sort Algorithm\nDESCRIPTION: Example demonstrating how to use the sort algorithm with a vector of integers, verifying the result matches the expected sorted order using the BOOST_MPL_ASSERT macro.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/sort.rst#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\ntypedef vector_c<int,3,4,0,-5,8,-1,7> numbers;\ntypedef vector_c<int,-5,-1,0,3,4,7,8> expected;\ntypedef sort<numbers>::type result;\n\nBOOST_MPL_ASSERT(( equal< result, expected, equal_to<_,_> > ));\n```\n\n----------------------------------------\n\nTITLE: Implementing Iterator Adaptor Template Class in C++\nDESCRIPTION: Definition of the iterator_adaptor template class that inherits from iterator_facade. Provides a customizable iterator implementation with configurable value type, category, reference type, and difference type parameters.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/iterator_adaptor_ref.rst#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <\n    class Derived\n  , class Base\n  , class Value               = use_default\n  , class CategoryOrTraversal = use_default\n  , class Reference           = use_default\n  , class Difference = use_default\n>\nclass iterator_adaptor \n  : public iterator_facade<Derived, *V'*, *C'*, *R'*, *D'*>\n{\n    friend class iterator_core_access;\n public:\n    iterator_adaptor();\n    explicit iterator_adaptor(Base const& iter);\n    typedef Base base_type;\n    Base const& base() const;\n protected:\n    typedef iterator_adaptor iterator_adaptor_;\n    Base const& base_reference() const;\n    Base& base_reference();\n private: // Core iterator interface for iterator_facade.  \n    typename iterator_adaptor::reference dereference() const;\n\n    template <\n    class OtherDerived, class OtherIterator, class V, class C, class R, class D\n    >   \n    bool equal(iterator_adaptor<OtherDerived, OtherIterator, V, C, R, D> const& x) const;\n\n    void advance(typename iterator_adaptor::difference_type n);\n    void increment();\n    void decrement();\n\n    template <\n        class OtherDerived, class OtherIterator, class V, class C, class R, class D\n    >   \n    typename iterator_adaptor::difference_type distance_to(\n        iterator_adaptor<OtherDerived, OtherIterator, V, C, R, D> const& y) const;\n\n private:\n    Base m_iterator; // exposition only\n};\n```\n\n----------------------------------------\n\nTITLE: Defining max_element Template in C++\nDESCRIPTION: Defines the max_element template struct that finds the largest element in a sequence. It takes a Sequence and an optional Predicate as template parameters, and defines an unspecified type member.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/max_element.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      typename Sequence\n    , typename Pred = less<_1,_2>\n    >\nstruct max_element\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a Static Member Function with Named Parameters in C++\nDESCRIPTION: Example of using BOOST_PARAMETER_MEMBER_FUNCTION to define a static member function 'f' with an optional parameter.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/index.rst#2025-04-22_snippet_27\n\nLANGUAGE: C++\nCODE:\n```\nstruct somebody\n{\n    BOOST_PARAMETER_MEMBER_FUNCTION(\n        (void), static f, tag, (optional (arg1,(int),0))\n    )\n    {\n        std::cout << arg1 << std::endl;\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Value Category Detection for Boost Parameter Library in C++\nDESCRIPTION: Implements a mechanism to determine the value category (lvalue reference to const, lvalue reference, rvalue reference to const, or rvalue reference) of function parameters using function overloading.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_26\n\nLANGUAGE: C++\nCODE:\n```\nenum invoked\n{\n    passed_by_lvalue_reference_to_const\n  , passed_by_lvalue_reference\n  , passed_by_rvalue_reference_to_const\n  , passed_by_rvalue_reference\n};\n\nstruct U\n{\n    template <std::size_t N>\n    static invoked evaluate_category(|std_bitset|_\\<N + 1> const&)\n    {\n        return passed_by_lvalue_reference_to_const;\n    }\n\n    template <std::size_t N>\n    static invoked evaluate_category(|std_bitset|_\\<N + 1>&)\n    {\n        return passed_by_lvalue_reference;\n    }\n\n    template <std::size_t N>\n    static invoked evaluate_category(|std_bitset|_\\<N + 1> const&&)\n    {\n```\n\n----------------------------------------\n\nTITLE: Complex format string example with boost::locale::format\nDESCRIPTION: This snippet shows a more complex format string using various formatting options, including time formatting and quoted text.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/doc/localized_text_formatting.txt#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\n\"Ms. {1} had arrived at {2,ftime='%I o''clock'} at home. The exact time is {2,time=full}\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Simple Evaluation Strategy in C++\nDESCRIPTION: Defines a 'simple_eval' struct that implements an evaluation strategy for nullary function objects. It captures the function and returns the result of invoking it.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/eval.hpp.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nstruct simple_eval\n{\n    template<class F, class... Ts>\n    constexpr BOOST_HOF_SFINAE_RESULT(F) \n    operator()(F&& f, Ts&&...xs) const BOOST_HOF_SFINAE_RETURNS\n    (boost::hof::always_ref(f)(xs...)());\n};\n```\n\n----------------------------------------\n\nTITLE: Defining the keyword Class Template in C++\nDESCRIPTION: This snippet defines the keyword class template, which is the core of Boost.Parameter. It includes multiple overloads of the assignment and bitwise or operators for different reference qualifiers and scalar types. The template uses SFINAE techniques to enable or disable overloads based on the tag's qualifier and the argument type.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <typename Tag>\nstruct keyword\n{\n    typedef Tag tag;\n\n    template <typename T>\n    constexpr typename boost::enable_if<\n        typename mpl::eval_if<\n            boost::is_scalar<T>\n          , mpl::true_\n          , mpl::eval_if<\n                boost::is_same<\n                    typename Tag::qualifier\n                  , boost::parameter::in_reference\n                >\n              , mpl::true_\n              , mpl::if_<\n                    boost::is_same<\n                        typename Tag::qualifier\n                      , boost::parameter::forward_reference\n                    >\n                  , mpl::true_\n                  , mpl::false_\n                >\n            >\n        >::type\n      , ArgumentPack\n    >::type\n        operator=(T const& value) const;\n\n    // Additional overloads for different reference qualifiers and rvalue references\n    // ...\n\n    template <typename T>\n    constexpr typename boost::enable_if<\n        typename mpl::eval_if<\n            boost::is_scalar<T>\n          , mpl::true_\n          , mpl::eval_if<\n                boost::is_same<\n                    typename Tag::qualifier\n                  , boost::parameter::in_reference\n                >\n              , mpl::true_\n              , mpl::if_<\n                    boost::is_same<\n                        typename Tag::qualifier\n                      , boost::parameter::forward_reference\n                    >\n                  , mpl::true_\n                  , mpl::false_\n                >\n            >\n        >::type\n      , tagged default\n    >::type\n        operator|(T const& x) const;\n\n    // Additional overloads for different reference qualifiers and rvalue references\n    // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Formatting Time Zones with Boost.Locale in C++\nDESCRIPTION: Demonstrates how to format date and time in different time zones using Boost.Locale manipulators. The example shows local time, GMT, and a specific time zone (EST).\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/doc/formatting_and_parsing.txt#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\ndouble now=time(0);\ncout << as::datetime << as::local_time << \"Local time is: \"<< now << endl;\ncout << as::gmt << \"GMT Time is: \"<< now <<endl;\ncout << as::time_zone(\"EST\") << \"Eastern Standard Time is: \"<< now <<endl;\n```\n\n----------------------------------------\n\nTITLE: Implementing Gradient Function Object for Dynamic Images in C++\nDESCRIPTION: Defines a function object for computing x-gradient that can handle runtime-specified image types using GIL's dynamic_image extension.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/tutorial/gradient.rst.txt#2025-04-22_snippet_19\n\nLANGUAGE: cpp\nCODE:\n```\n#include <boost/gil/extension/dynamic_image/dynamic_image_all.hpp>\n\ntemplate <typename DstView>\nstruct x_gradient_obj\n{\n  typedef void result_type;        // required typedef\n\n  const DstView& _dst;\n  x_gradient_obj(const DstView& dst) : _dst(dst) {}\n\n  template <typename SrcView>\n  void operator()(const SrcView& src) const { x_luminosity_gradient(src, _dst); }\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Case Conversion Operations in C++\nDESCRIPTION: Demonstrates basic string case conversion operations using boost::locale functions including to_upper, to_lower, to_title, and fold_case. Shows proper handling of Unicode characters like 'ß'.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/doc/conversions.txt#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nstd::string grussen = \"grüßEN\";\nstd::cout   <<\"Upper \"<< boost::locale::to_upper(grussen) << std::endl\n            <<\"Lower \"<< boost::locale::to_lower(grussen) << std::endl\n            <<\"Title \"<< boost::locale::to_title(grussen) << std::endl\n            <<\"Fold  \"<< boost::locale::fold_case(grussen) << std::endl;\n```\n\n----------------------------------------\n\nTITLE: Writing GraphML with Boost Graph Library (BGL)\nDESCRIPTION: This code demonstrates how to write a BGL graph to a GraphML format file using the `write_graphml` function. It initializes a graph with vertices and edges, assigns properties to them, and then writes the graph to standard output in GraphML format using dynamic properties.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph/doc/write_graphml.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<typename Graph>\n  void\n  write_graphml(std::ostream& out, const Graph& g, const dynamic_properties& dp,\n\t        bool ordered_vertices=false);\n\n  template<typename Graph, typename VertexIndexMap>\n  void\n  write_graphml(std::ostream& out, const Graph& g, VertexIndexMap vertex_index,\n                const dynamic_properties& dp, bool ordered_vertices=false);\n```\n\n----------------------------------------\n\nTITLE: Implementing Node Iterator with Boost Iterator Facade in C++\nDESCRIPTION: This code snippet defines a node_iter template class using boost::iterator_facade to create a forward traversal iterator. It includes basic iterator operations like increment, dereference, and equality comparison.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/iterator_facade_tutorial.rst#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <class Value>\nclass node_iter\n  : public boost::iterator_facade<\n        node_iter<Value>\n      , Value\n      , boost::forward_traversal_tag\n    >\n{\n public:\n    node_iter()\n      : m_node(0) {}\n\n    explicit node_iter(Value* p)\n      : m_node(p) {}\n\n private:\n    friend class boost::iterator_core_access;\n\n    bool equal(node_iter<Value> const& other) const\n    {\n        return this->m_node == other.m_node;\n    }\n\n    void increment()\n    { m_node = m_node->next(); }\n\n    Value& dereference() const\n    { return *m_node; }\n\n    Value* m_node;\n};\ntypedef node_iter<node_base> node_iterator;\ntypedef node_iter<node_base const> node_const_iterator;\n```\n\n----------------------------------------\n\nTITLE: Using BOOST_OUTCOME_CO_TRY in C++ Coroutines\nDESCRIPTION: This snippet demonstrates the use of BOOST_OUTCOME_CO_TRY within a coroutine function to handle return operations. It checks if an integer is non-negative and attempts a conversion using convert(x). If the operation succeeds, it continues, otherwise, it returns early with 'out of range' using co_return. The snippet requires the Boost Outcome library to function correctly, and expects integer input for conversion with string as output if successful.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/tutorial/essential/coroutines/try.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\neager<result<std::string>> to_string(int x) {\n  if(x >= 0) {\n    BOOST_OUTCOME_CO_TRY(convert(x));\n  }\n  co_return \"out of range\";\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Custom Error Handling - C++\nDESCRIPTION: This snippet illustrates an example of using the newly implemented custom throw for the copy_file functionality in the filesystem API. The demonstration shows how a user might implement and catch errors using the Outcome library with the defined error handling mechanisms.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/tutorial/advanced/payload/copy_file3.md#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nvoid copy_file_example() {\n    std::error_code ec;\n    auto result = outcome::success(); // Simulating a filesystem operation\n\n    if (!result) {\n        try_throw_std_exception_from_error(ec, \"Copy operation failed.\");\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Image Blurring Example - convolution.cpp\nDESCRIPTION: This example demonstrates blurring images using convolution with Boost GIL and the optional Numeric extension.  It shows how to implement common image filtering techniques with the library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/index.rst#2025-04-22_snippet_8\n\nLANGUAGE: C++\nCODE:\n```\n* :download:`convolution.cpp <../example/convolution.cpp>`:\n  Blurring images (requires the optional Numeric extension)\n```\n\n----------------------------------------\n\nTITLE: Defining Template Keywords for Parameter-Enabled Class Templates in C++\nDESCRIPTION: This snippet demonstrates how to define template keywords for a parameter-enabled class template using BOOST_PARAMETER_TEMPLATE_KEYWORD. These keywords allow users to specify template parameters by name rather than position.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/index.rst#2025-04-22_snippet_29\n\nLANGUAGE: C++\nCODE:\n```\nnamespace boost { namespace python {\n\n    BOOST_PARAMETER_TEMPLATE_KEYWORD(class_type)\n    BOOST_PARAMETER_TEMPLATE_KEYWORD(base_list)\n    BOOST_PARAMETER_TEMPLATE_KEYWORD(held_type)\n    BOOST_PARAMETER_TEMPLATE_KEYWORD(copyable)\n}}\n```\n\n----------------------------------------\n\nTITLE: Defining arg Metafunction Class Template in C++\nDESCRIPTION: Declaration of the arg template metafunction class which selects the nth argument from a parameter pack. The implementation includes partial specializations for specific argument positions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/arg.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate< int n > struct arg;\n\ntemplate<> struct arg<1>\n{\n    template< typename A1, /* ... */ typename A/* n */ = /* unspecified */ >\n    struct apply\n    {\n        typedef A1 type;\n    };\n};\n\n/* ... */\n\ntemplate<> struct arg</* n */>\n{\n    template< typename A1, /* ... */ typename A/* n */ >\n    struct apply\n    {\n        typedef A/* n */ type;\n    };\n};\n```\n\n----------------------------------------\n\nTITLE: Defining the futures Test\nDESCRIPTION: Defines a test named `futures` using the `add_test` command.  The test executes the `arangodbtests_futures` executable. This CMake configuration allows the test to be discovered and run by CTest.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/Futures/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nadd_test(NAME futures\n         COMMAND arangodbtests_futures)\n```\n\n----------------------------------------\n\nTITLE: Creating Local Subgraph Free Function\nDESCRIPTION: Template function to construct a local subgraph from a given distributed graph, providing a non-copying view of local graph elements\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/local_subgraph.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<typename DistributedGraph>\nlocal_subgraph<DistributedGraph> make_local_subgraph(DistributedGraph& g);\n```\n\n----------------------------------------\n\nTITLE: Defining Base Parameters Resolution in C++\nDESCRIPTION: Resolution rules for the iterator_adaptor base class parameters V', C', R', and D'. These rules determine how template parameters are resolved when use_default is specified.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/iterator_adaptor_ref.rst#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\n*V'* = if (Value is use_default)\n           return iterator_traits<Base>::value_type\n       else\n           return Value\n\n*C'* = if (CategoryOrTraversal is use_default)\n           return iterator_traversal<Base>::type\n       else\n           return CategoryOrTraversal\n\n*R'* = if (Reference is use_default)\n           if (Value is use_default)\n               return iterator_traits<Base>::reference\n           else\n               return Value&\n       else\n           return Reference\n\n*D'* = if (Difference is use_default)\n           return iterator_traits<Base>::difference_type\n       else\n           return Difference\n```\n\n----------------------------------------\n\nTITLE: Creating Filter Iterator with Predicate and Iterators in C++\nDESCRIPTION: This function template creates a filter_iterator using a predicate and iterators. It takes a Predicate, an Iterator, and an optional end Iterator as parameters.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/make_filter_iterator.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <class Predicate, class Iterator>\nfilter_iterator<Predicate,Iterator>\nmake_filter_iterator(Predicate f, Iterator x, Iterator end = Iterator());\n```\n\n----------------------------------------\n\nTITLE: Approximate Macro Expansion for Boost Parameter Library Functions\nDESCRIPTION: Shows the approximate expansion of a Boost Parameter Library function generation macro, including template instantiations, parameter specifications, forwarding functions, and dispatcher implementations.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_24\n\nLANGUAGE: C++\nCODE:\n```\n// If **result** is a template instantiation of |boost_enable_if|_\\,\n// |boost_enable_if_c|_\\, |boost_lazy_enable_if|_\\,\n// |boost_lazy_enable_if_c|_\\, |boost_disable_if|_\\, |boost_disable_if_c|_\\,\n// |boost_lazy_disable_if|_\\, |boost_lazy_disable_if_c|_\\, or\n// |std_enable_if|_\\:\ntemplate <typename Args>\nusing boost_param_result\\_ ## __LINE__ ## **name** = **result**;\n\n// If **result** is a simple return type:\ntemplate <typename Args>\nstruct boost_param_result\\_ ## __LINE__ ## **name**\n{\n    typedef **result** type;\n};\n\nstruct boost_param_params\\_ ## __LINE__ ## **name**\n  : |parameters|_\\<\n        *list of parameter specifications, based on arguments*\n    >\n{\n};\n\ntypedef boost_param_params\\_ ## __LINE__ ## **name**\n    boost_param_parameters\\_ ## __LINE__ ## **name**;\n\ntemplate <typename A0, …, typename A ## **n**>\n**result** **name**\\(\n    A0&& a0, …, A ## **n**\\&& a ## **n**\n  , typename boost_param_parameters\\_ ## __LINE__ ## **name**\n    ::match<A0, …, A ## **n**>::type\n    = boost_param_parameters\\_ ## __LINE__ ## **name**\\()\n)\n{\n    return this->boost_param_impl ## __LINE__ ## **name**\\(\n        boost_param_parameters\\_ ## __LINE__ ## **name**\\()(\n            |std_forward|_\\<A0>(a0)\n          , …\n          , |std_forward|_\\<A ## **n**>(a ## **n**)\n        )\n    );\n}\n\n:vellipsis:`⋮`\n\ntemplate <typename A0, …, typename A ## **m**>\n**result** **name**\\(\n    A0&& a0, …, A ## **m**\\&& a ## **m**\n  , typename boost_param_parameters\\_ ## __LINE__ ## **name**\n    ::match<A0, …, A ## **m**>::type\n    = boost_param_parameters\\_ ## __LINE__ ## **name**\\()\n)\n{\n    return this->boost_param_impl ## __LINE__ ## **name**\\(\n        boost_param_parameters\\_ ## __LINE__ ## **name**\\()(\n            |std_forward|_\\<A0>(a0)\n          , …\n          , |std_forward|_\\<A ## **m**>(a ## **m**)\n        )\n    );\n}\n\ntemplate <typename Args>\ntypename boost_param_result\\_ ## __LINE__ ## **name**\\<Args>::type\n    boost_param_impl ## __LINE__ ## **name**\\(Args const& args)\n{\n    return this->boost_param_dispatch_0boost\\_ ## __LINE__ ## **name**\\(\n        static_cast<\n            typename boost_param_result\\_ ## __LINE__ ## **name**\\<\n                Args\n            >::type(*)()\n        >(|std_nullptr|_\\)\n      , args\n      , |std_forward|_\\<\n            typename |value_type|_\\<\n                Args\n              , *keyword tag type of required parameter* ## **0**\n            >::type\n        >(args[ *keyword object of required parameter* ## **0**])\n      , …\n      , |std_forward|_\\<\n            typename |value_type|_\\<\n                Args\n              , *keyword tag type of required parameter* ## **n**\n            >::type\n        >(args[ *keyword object of required parameter* ## **n**])\n    );\n}\n\ntemplate <\n    typename ResultType\n  , typename Args\n  , typename *argument name* ## **0** ## _type\n  , …\n  , typename *argument name* ## **n** ## _type\n>\nResultType\n    boost_param_dispatch_0boost\\_ ## __LINE__ ## **name**\\(\n        (ResultType(*)())\n      , Args const& args\n      , *argument name* ## **0** ## _type&& *argument name* ## **0**\n      , …\n      , *argument name* ## **n** ## _type&& *argument name* ## **n**\n    )\n{\n    return this->boost_param_dispatch_0boost\\_ ## __LINE__ ## **name**\\(\n        static_cast<ResultType(*)()>(|std_nullptr|_\\)\n      , (args, *keyword object of optional parameter* ## **n + 1** =\n            *default value of optional parameter* ## **n + 1**\n        )\n      , |std_forward|_\\<*argument name* ## **0** ## _type>(\n            *argument name* ## **0**\n        )\n      , …\n      , |std_forward|_\\<*argument name* ## **n** ## _type>(\n            *argument name* ## **n**\n        )\n      , |std_forward|_\\<\n            typename |value_type|_\\<\n                Args\n              , *keyword tag type of optional parameter* ## **n + 1**\n            >::type\n        >(*default value of optional parameter* ## **n + 1**)\n    );\n}\n\n:vellipsis:`⋮`\n\ntemplate <\n    typename ResultType\n  , typename Args\n  , typename *argument name* ## **0** ## _type\n  , …\n  , typename *argument name* ## **m** ## _type\n>\nResultType\n    boost_param_dispatch_0boost\\_ ## __LINE__ ## **name**\\(\n        (ResultType(*)())\n      , Args const& args\n      , *argument name* ## **0** ## _type&& *argument name* ## **0**\n      , …\n      , *argument name* ## **m** ## _type&& *argument name* ## **m**\n    )\n```\n\n----------------------------------------\n\nTITLE: Implementing Outcome Customization Points for Foreign Type\nDESCRIPTION: Extension of Outcome's customization points to support the foreign result type. Three functions are implemented: try_operation_has_value, try_operation_return_as, and try_operation_extract_value.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/recipes/foreign-try.md#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nBOOST_OUTCOME_V2_NAMESPACE_BEGIN\n// Tell Outcome that foreign_namespace::result is a value-or-error type\ninline bool try_operation_has_value(const foreign_namespace::result &r) { return r.has_success(); }\n// Tell Outcome how to extract a value from foreign_namespace::result\ninline decltype(auto) try_operation_extract_value(foreign_namespace::result &r) { return r.get_success().value(); }\ninline decltype(auto) try_operation_extract_value(foreign_namespace::result &&r) { return r.get_success().value(); }\n// Tell Outcome how to create a failure to return from a TRY\ninline outcome::failure_type<const char *> try_operation_return_as(const foreign_namespace::result &r)\n{\n  return outcome::failure(r.get_failure().error());\n}\ninline outcome::failure_type<const char *> try_operation_return_as(foreign_namespace::result &&r)\n{\n  return outcome::failure(r.get_failure().error());\n}\nBOOST_OUTCOME_V2_NAMESPACE_END\n```\n\n----------------------------------------\n\nTITLE: Using arg Metafunction Class with apply_wrap in C++\nDESCRIPTION: Example showing how to use the arg metafunction class with apply_wrap to extract specific arguments from a parameter list. The example demonstrates retrieving the 1st and 3rd arguments.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/arg.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ntypedef apply_wrap/* 5 */< arg<1>,bool,char,short,int,long >::type t1;\ntypedef apply_wrap/* 5 */< arg<3>,bool,char,short,int,long >::type t3;\n\nBOOST_MPL_ASSERT(( is_same< t1, bool > ));\nBOOST_MPL_ASSERT(( is_same< t3, short > ));\n```\n\n----------------------------------------\n\nTITLE: Serialization Format Example for basic_result Stream Output\nDESCRIPTION: Shows the format used when serializing a basic_result to an output stream. The format includes flags, value_type (if set and not void), and error_type (if set and not void), separated by spaces.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/functions/iostream/result_operator_out.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n<unsigned int flags><space><value_type if set and not void><error_type if set and not void>\n```\n\n----------------------------------------\n\nTITLE: Single Function Compose Adaptor Specialization in C++\nDESCRIPTION: Specialization of the compose_adaptor for a single function, which simply wraps the function in a callable_base. This serves as the base case for the recursive composition pattern.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/compose.hpp.txt#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<class F>\nstruct compose_adaptor<F> : detail::callable_base<F>\n{\n    typedef compose_adaptor fit_rewritable_tag;\n\n    BOOST_HOF_INHERIT_DEFAULT(compose_adaptor, detail::callable_base<F>)\n\n    template<class X, BOOST_HOF_ENABLE_IF_CONVERTIBLE(X, detail::callable_base<F>)>\n    constexpr compose_adaptor(X&& f1) \n    BOOST_HOF_NOEXCEPT_CONSTRUCTIBLE(detail::callable_base<F>, X&&)\n    : detail::callable_base<F>(BOOST_HOF_FORWARD(X)(f1))\n    {}\n\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Iterator Traversal Tags Hierarchy in C++\nDESCRIPTION: Declaration of iterator traversal tag hierarchy, building from incrementable traversal to random access traversal. These tags are used to categorize iterator capabilities.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/new-iter-concepts.rst#2025-04-22_snippet_12\n\nLANGUAGE: cpp\nCODE:\n```\nstruct incrementable_traversal_tag { };\nstruct single_pass_traversal_tag : incrementable_traversal_tag { };\nstruct forward_traversal_tag : single_pass_traversal_tag { };\nstruct bidirectional_traversal_tag : forward_traversal_tag { };\nstruct random_access_traversal_tag : bidirectional_traversal_tag { };\n```\n\n----------------------------------------\n\nTITLE: Compiler Requirements for Boost.Variant2\nDESCRIPTION: Lists the supported compilers and their minimum versions for using Boost.Variant2. It specifies compiler flags needed for different versions of the standard.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/variant2/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* g++ 4.8 or later with `-std=c++11` or above\n* clang++ 3.9 or later with `-std=c++11` or above\n* Visual Studio 2015, 2017, 2019\n```\n\n----------------------------------------\n\nTITLE: Vertex Addition Operations in C++\nDESCRIPTION: Functions for adding vertices to the graph, with support for properties and named vertices. Vertices are stored in the local process.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/distributed_adjacency_list.rst#2025-04-22_snippet_19\n\nLANGUAGE: C++\nCODE:\n```\nvertex_descriptor add_vertex(adjacency_list& g);\n\nunspecified add_vertex(const VertexProperties& p, adjacency_list& g);\nunspecified add_vertex(const vertex_name_type& p, adjacency_list& g);\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket Server Build Target in CMake\nDESCRIPTION: CMake configuration that sets up a WebSocket server executable target. It groups source files, specifies dependencies on Boost Beast and ASIO libraries, and organizes the project structure.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/beast/example/websocket/server/coro/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nGroupSources(include/boost/beast beast)\nGroupSources(example/websocket/server/coro \"/\")\n\nadd_executable (websocket-server-coro\n    ${BOOST_BEAST_FILES}\n    Jamfile\n    websocket_server_coro.cpp\n)\n\ntarget_link_libraries(websocket-server-coro\n    lib-asio\n    lib-beast)\n\nset_property(TARGET websocket-server-coro PROPERTY FOLDER \"example-websocket-server\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost Circular Buffer CMake Build\nDESCRIPTION: Sets up CMake configuration for Boost Circular Buffer library, specifying version requirements, creating an interface library, and defining dependencies. The configuration creates an interface library with necessary include directories and links to required Boost components.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/circular_buffer/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.20)\n\nproject(boost_circular_buffer VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n\nadd_library(boost_circular_buffer INTERFACE)\n\nadd_library(Boost::circular_buffer ALIAS boost_circular_buffer)\n\ntarget_include_directories(boost_circular_buffer INTERFACE include)\n\ntarget_link_libraries(boost_circular_buffer INTERFACE\n    Boost::assert\n    Boost::concept_check\n    Boost::config\n    Boost::core\n    Boost::move\n    Boost::static_assert\n    Boost::throw_exception\n    Boost::type_traits\n)\n```\n\n----------------------------------------\n\nTITLE: Running LLVM Symbolizer Server in Python\nDESCRIPTION: Command to start the Python HTTP server that handles symbolization requests from clients. This single server replaces multiple resource-intensive symbolizer processes that would otherwise be spawned by each instrumented process.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/utils/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./utils/llvm-symbolizer-server.py\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Error Codes with Enumeration in C++\nDESCRIPTION: Example of declaring a custom set of error codes using an enum class, which forms the basis for creating domain-specific error codes. The enumeration values start from 1 since 0 should not represent an error.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/motivation/std_error_code.md#2025-04-22_snippet_1\n\nLANGUAGE: c++\nCODE:\n```\nenum class ConvertErrc\n{\n  StringTooLong = 1, // 0 should not represent an error\n  EmptyString   = 2,\n  IllegalChar   = 3,\n};\n```\n\n----------------------------------------\n\nTITLE: Using Boost.Lambda to Simplify GIL Histogram Calculation\nDESCRIPTION: This C++ code snippet leverages Boost.Lambda to simplify the histogram computation for a grayscale image through GIL. The `for_each_pixel` function is used to update the histogram directly, illustrating the flexibility and efficiency of GIL, compatible with various image formats.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/tutorial/histogram.rst.txt#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nusing boost::lambda; template <typename GrayView, typename R> void grayimage_histogram(GrayView& img, R& hist) { for_each_pixel(img, ++var(hist)[_1]); }\n```\n\n----------------------------------------\n\nTITLE: Defining Exception Type Observer in C++\nDESCRIPTION: This code snippet defines the `exception_type` and the `assume_exception` method. It is a const rvalue reference observer used to safely access the stored exception. It ensures that no exceptions are thrown during this operation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/basic_outcome/assume_exception_rvalue_const.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nconst exception_type &&assume_exception() const && noexcept\n```\n\n----------------------------------------\n\nTITLE: Boost Parameter Const Member Function Definition in C++\nDESCRIPTION: This code defines a const member function `evaluate` within a struct `B` using `BOOST_PARAMETER_CONST_MEMBER_FUNCTION`. It defines required and optional parameters, specifying their types and default values. The function body demonstrates how to access and use the parameters, including argument forwarding.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_30\n\nLANGUAGE: cpp\nCODE:\n```\n\"    struct B\n    {\n        B()\n        {\n        }\n\n        BOOST_PARAMETER_CONST_MEMBER_FUNCTION((bool), evaluate, kw,\n            (deduced\n                (required\n                    (lrc, (|std_bitset|_<1>))\n                    (lr, (|std_bitset|_<2>))\n                )\n                (optional\n                    (rrc, (|std_bitset|_<3>), rvalue_const_bitset<2>())\n                    (rr, (|std_bitset|_<4>), rvalue_bitset<3>())\n                )\n            )\n        )\n        {\n            BOOST_TEST_EQ(\n                passed_by_lvalue_reference_to_const\n              , U::evaluate_category<0>(lrc)\n            );\n            BOOST_TEST_EQ(\n                passed_by_lvalue_reference\n              , U::evaluate_category<1>(lr)\n            );\n            BOOST_TEST_EQ(\n                passed_by_rvalue_reference_to_const\n              , U::evaluate_category<2>(|std_forward|_<rrc0_type>(rrc0))\n            );\n            BOOST_TEST_EQ(\n                passed_by_rvalue_reference\n              , U::evaluate_category<3>(args[_rr0])\n            );\n\n            return true;\n        }\n    };\"\n```\n\n----------------------------------------\n\nTITLE: Defining ptr_map_adapter Class in Boost\nDESCRIPTION: This code snippet defines the ptr_map_adapter class template in the Boost C++ library. It is designed to create pointer containers with a map-like interface, extending the associative_ptr_container class. The class template accepts a type T, a map type VoidPtrMap, and an optional CloneAllocator. Key functionalities include inserting elements, basic lookup, and transferring elements between containers. This snippet is part of creating performant and intuitive pointer-based data structures in C++.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/ptr_map_adapter.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nnamespace boost\n{\n    template\n    < \n        class T,\n        class VoidPtrMap, \n        class CloneAllocator = heap_clone_allocator \n    >\n    class ptr_map_adapter \n    {\npublic: // `typedefs`_\n    typedef VoidPtrMap::key_type key_type;\n    typedef T*                   mapped_type;\n    typedef T&                   mapped_reference;\n    typedef const T&             const_mapped_reference;\n    typedef ...                  value_type;\n    typedef ...                  reference;\n    typedef ...                  const_reference;\n    typedef ...                  pointer;\n    typedef ...                  const_pointer;  \n    \npublic: // `modifiers`_         \n    std::pair<iterator,bool>  insert( key_type& k, T* x );                         \n    template< class U >\n    std::pair<iterator,bool>  insert( const key_type& k, compatible-smart-ptr<U> x );                         \n\npublic; // `lookup`_\n    T&       operator[]( const key_type& key );\n    T&       at( const key_type& key );\n    const T& at( const key_type& key ) const;\n    \npublic: // `pointer container requirements`_\n    bool      transfer( iterator object, ptr_map_adapter& from );\n    size_type transfer( iterator first, iterator last, ptr_map_adapter& from );\n    template< class Range >\n    size_type transfer( const Range& r, ptr_map_adapter& from );\n    size_type transfer( ptr_map_adapter& from );\n    \n}; //  class 'ptr_map_adapter'\n\n} // namespace 'boost'\n```\n\n----------------------------------------\n\nTITLE: Using MPL Find Algorithm in C++\nDESCRIPTION: Demonstrates how to use the 'find' algorithm to locate the position of a type in a vector of types. It also shows how to assert the correctness of the result using MPL assert macros.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/find.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntypedef vector<char,int,unsigned,long,unsigned long> types;\ntypedef find<types,unsigned>::type iter;\n\nBOOST_MPL_ASSERT(( is_same< deref<iter>::type, unsigned > ));\nBOOST_MPL_ASSERT_RELATION( iter::pos::value, ==, 2 );\n```\n\n----------------------------------------\n\nTITLE: Implementing Iterator Equality Comparison in C++\nDESCRIPTION: Template function implementation for comparing iterator equality between two iterator_adaptor instances.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/iterator_adaptor_ref.rst#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <\nclass OtherDerived, class OtherIterator, class V, class C, class R, class D\n>   \nbool equal(iterator_adaptor<OtherDerived, OtherIterator, V, C, R, D> const& x) const;\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Library Build with CMake\nDESCRIPTION: Creates a static library named clienttools_utils from source files and configures its dependencies. The library links against core ArangoDB libraries, Boost components, Fuerte client, and V8 interface. It also sets up include paths and ensures V8 is built before the library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/client-tools/Utils/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(clienttools_utils STATIC\n  ClientManager.cpp\n  ManagedDirectory.cpp\n)\n\ntarget_link_libraries(clienttools_utils\n  ${SYSTEM_LIBRARIES}\n  arango_basic_errors\n  arango_basic_strings\n  arango_basic_utils\n  arango_basic_features\n  arango_basic_logger\n  arango_basic_http_client\n  arango_scheduler\n  boost_system\n  boost_boost\n  fuerte\n  v8_interface\n)\ntarget_include_directories(clienttools_utils PRIVATE ${CMAKE_SOURCE_DIR}/client-tools)\n\nadd_dependencies(clienttools_utils v8_build)\n```\n\n----------------------------------------\n\nTITLE: Using Deduced Parameters in Function Definitions with BOOST_PARAMETERS\nDESCRIPTION: This C++ snippet demonstrates the use of deduced parameters in a BOOST_PARAMETER_FUNCTION, allowing for flexibility in function calls without specifying keywords, shown in the context of a hypothetical new_window function. Prerequisites include understanding of template programming and BOOST library syntax.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/index.rst#2025-04-22_snippet_23\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_PARAMETER_NAME((name_, keywords) name)\nBOOST_PARAMETER_NAME((movable_, keywords) movable)\n\nBOOST_PARAMETER_FUNCTION((window*), new_window, keywords,\n    (deduced\n        (required\n            (name, *(char const*)*)\n            (movable, *(bool)*)\n        )\n    )\n)\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Core Iterator Behaviors in C++\nDESCRIPTION: Table showing the required member functions for different iterator categories when using iterator_facade. These functions implement core behaviors like dereferencing, incrementing, and comparison.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/iterator_facade_body.rst#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n+------------------------+-------------------------------+\n|Expression              |Effects                        |\n+========================+===============================+\n|``i.dereference()``     |Access the value referred to   |\n+------------------------+-------------------------------+\n|``i.equal(j)``          |Compare for equality with ``j``|\n+------------------------+-------------------------------+\n|``i.increment()``       |Advance by one position        |\n+------------------------+-------------------------------+\n|``i.decrement()``       |Retreat by one position        |\n+------------------------+-------------------------------+\n|``i.advance(n)``        |Advance by ``n`` positions     |\n+------------------------+-------------------------------+\n|``i.distance_to(j)``    |Measure the distance to ``j``  |\n+------------------------+-------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Making Specialized Distributed Iterator Property Map in C++\nDESCRIPTION: Factory function to create a specialized distributed iterator property map with explicit value type and reference parameters.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/distributed_property_map.rst#2025-04-22_snippet_22\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate<typename RandomAccessIterator, typename ProcessGroup,\n         typename GlobalKey, typename LocalMap, typename ValueType,\n         typename Reference>\niterator_property_map<RandomAccessIterator, \n                      local_property_map<ProcessGroup, GlobalKey, LocalMap>,\n                                         ValueType, Reference>\nmake_iterator_property_map(RandomAccessIterator iter, \n                           local_property_map<ProcessGroup, GlobalKey, LocalMap>,\n                                              ValueType, Reference> id);\n```\n\n----------------------------------------\n\nTITLE: Implementing function_param_limit Metafunction in C++\nDESCRIPTION: Defines the function_param_limit metafunction that inherits from std::integral_constant to provide the maximum number of parameters a function can accept. It defaults to SIZE_MAX for most types but can be specialized via the fit_function_param_limit member type.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/function_param_limit.hpp.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<class F, class=void>\nstruct function_param_limit\n: std::integral_constant<std::size_t, SIZE_MAX>\n{};\n\ntemplate<class F>\nstruct function_param_limit<F, typename detail::holder<typename F::fit_function_param_limit>::type>\n: F::fit_function_param_limit\n{};\n```\n\n----------------------------------------\n\nTITLE: Creating Boost Core Library\nDESCRIPTION: This snippet initializes the Boost Core library as an INTERFACE library in CMake. It specifies the project name, version, and the languages used. Key dependencies are linked, including Boost libraries for assertions and configuration. The alias Boost::core is also created for easier access.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/core/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.20)\n\nproject(boost_core VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n\nadd_library(boost_core INTERFACE)\nadd_library(Boost::core ALIAS boost_core)\n\ntarget_include_directories(boost_core INTERFACE include)\n\ntarget_link_libraries(boost_core\n  INTERFACE\n    Boost::assert\n    Boost::config\n    Boost::static_assert\n    Boost::throw_exception\n)\n```\n\n----------------------------------------\n\nTITLE: Sentence Boundary Analysis with Rules in C++\nDESCRIPTION: Shows how to perform sentence boundary analysis with custom rules and full select option for proper sentence segmentation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/doc/boundary_analysys.txt#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\nboost::locale::generator gen;\nusing namespace boost::locale::boundary;\nstd::string text=   \"Hello! How\\n\"\n                    \"are you?\\n\";\nssegment_index map(sentence,text.begin(),text.end(),gen(\"en_US.UTF-8\")); \nmap.rule(sentence_term);\nmap.full_select(true);\nfor(ssegment_index::iterator it=map.begin(),e=map.end();it!=e;++it) \n    std::cout << \"Sentence [\" << *it << \"]\" << std::endl;\n```\n\n----------------------------------------\n\nTITLE: Configuring Core VocBase Sources in CMake\nDESCRIPTION: Specifies the core source files to be compiled for the arango_vocbase target. Includes essential components like Collections, Databases, Indexes, and Queries management.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/VocBase/Methods/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(arango_vocbase PRIVATE\n  Collections.cpp\n  Databases.cpp\n  Indexes.cpp\n  Queries.cpp\n  Ttl.cpp\n  Upgrade.cpp\n  UpgradeTasks.cpp\n  Version.cpp)\n```\n\n----------------------------------------\n\nTITLE: Sorting with Projection in C++\nDESCRIPTION: Demonstrates how to use the 'proj' adaptor from Boost.HigherOrderFunctions to simplify sorting of a container of Person objects by year of birth.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/doc/src/more_examples.md.txt#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nstd::sort(std::begin(people), std::end(people),\n            proj(&Person::year_of_birth, _ < _));\n```\n\n----------------------------------------\n\nTITLE: Installing NPM Dependencies\nDESCRIPTION: Install npm dependencies with specific options to ensure correct package.json updates and prevent nested dependencies. Remember to update licensing information.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/CONTRIBUTING.md#2025-04-22_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nnpm install [<@scope>/]<name> --global-style --save --save-exact\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm install [<@scope>/]<name> --global-style -s -E\n```\n\n----------------------------------------\n\nTITLE: Asynchronous TCP Server Handler Code\nDESCRIPTION: Code showing the async handlers and connection management for an asynchronous TCP server implementation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/asio/example/cpp03/tutorial/daytime_dox.txt#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nclass tcp_connection\n  : public boost::enable_shared_from_this<tcp_connection>\n{\npublic:\n  typedef boost::shared_ptr<tcp_connection> pointer;\n\n  static pointer create(boost::asio::io_context& io_context)\n  {\n    return pointer(new tcp_connection(io_context));\n  }\n\n  tcp::socket& socket()\n  {\n    return socket_;\n  }\n\n  void start()\n  {\n    message_ = make_daytime_string();\n\n    boost::asio::async_write(socket_, boost::asio::buffer(message_),\n        boost::bind(&tcp_connection::handle_write, shared_from_this(),\n          boost::asio::placeholders::error,\n          boost::asio::placeholders::bytes_transferred));\n  }\n```\n\n----------------------------------------\n\nTITLE: Implementing Value Category Detection in C++\nDESCRIPTION: Definition of an enumeration and a struct with static member functions to identify the value category of a passed parameter. This is used to test parameter forwarding behavior.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_87\n\nLANGUAGE: cpp\nCODE:\n```\nenum invoked\n{\n    passed_by_lvalue_reference_to_const\n  , passed_by_lvalue_reference\n  , passed_by_rvalue_reference_to_const\n  , passed_by_rvalue_reference\n};\n\nstruct U\n{\n    template <std::size_t N>\n    static invoked evaluate_category(std::bitset<N + 1> const&)\n    {\n        return passed_by_lvalue_reference_to_const;\n    }\n\n    template <std::size_t N>\n    static invoked evaluate_category(std::bitset<N + 1>&)\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL HTTP Server Build in CMake\nDESCRIPTION: CMake configuration that sets up build parameters for an async SSL HTTP server example. Groups source files, creates executable target, and links required SSL and Boost Beast dependencies. Only executes if OpenSSL is found on the system.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/beast/example/http/server/async-ssl/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif (OPENSSL_FOUND)\n    GroupSources(include/boost/beast beast)\n    GroupSources(example/common common)\n    GroupSources(example/http/server/async-ssl \"/\")\n\n    add_executable (http-server-async-ssl\n        ${BOOST_BEAST_FILES}\n        ${PROJECT_SOURCE_DIR}/example/common/server_certificate.hpp\n        Jamfile\n        http_server_async_ssl.cpp\n    )\n\n    set_property(TARGET http-server-async-ssl PROPERTY FOLDER \"example-http-server\")\n\n    target_link_libraries (http-server-async-ssl\n        OpenSSL::SSL OpenSSL::Crypto\n        lib-asio\n        lib-asio-ssl\n        lib-beast\n        )\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Exception Reference Getter in C++\nDESCRIPTION: A static method that returns a reference to an exception stored in an implementation object. The method is constexpr, has constant time complexity, and never throws exceptions. It performs no validation to ensure an error exists.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/policies/base/exception.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nstatic auto &&_exception(Impl &&) noexcept\n```\n\n----------------------------------------\n\nTITLE: Implicit Conversion with BOOST_OUTCOME_TRY in C++\nDESCRIPTION: This code demonstrates how the `BOOST_OUTCOME_TRY` macro handles implicit conversion from `outcome::result<int, std::errc>` to `outcome::result<int, std::error_code>`. The TRY macro automatically performs the conversion, eliminating the need for explicit construction, as it implicitly converts if either the value type or error type can implicitly construct from the source.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/tutorial/essential/result/try_greedy.md#2025-04-22_snippet_1\n\nLANGUAGE: c++\nCODE:\n```\n```c++\noutcome::result<int, std::error_code> test(outcome::result<int, std::errc> r)\n{\n    BOOST_OUTCOME_TRY(r);    // no explicit conversion needed\n    return r.value();\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Python Virtual Function Overriding\nDESCRIPTION: Python code showing how to override C++ virtual functions from Python using the dispatcher class mechanism.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/doc/article.rst#2025-04-22_snippet_18\n\nLANGUAGE: Python\nCODE:\n```\n>>> class Derived(Base):\n...     def f(self, s):\n...          return len(s)\n...\n>>> calls_f(Base(), 'foo')\n42\n>>> calls_f(Derived(), 'forty-two')\n9\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket Server with SSL in CMake\nDESCRIPTION: This CMake snippet sets up a target for a WebSocket server example using Boost.Beast with SSL support. It checks for OpenSSL, groups source files, adds an executable target, sets its folder property, and links against required libraries including OpenSSL, Asio, and Beast.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/beast/example/websocket/server/coro-ssl/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (OPENSSL_FOUND)\n    GroupSources(include/boost/beast beast)\n    GroupSources(example/common common)\n    GroupSources(example/websocket/server/coro-ssl \"/\")\n\n    add_executable (websocket-server-coro-ssl\n        ${BOOST_BEAST_FILES}\n        ${PROJECT_SOURCE_DIR}/example/common/server_certificate.hpp\n        Jamfile\n        websocket_server_coro_ssl.cpp\n    )\n\n    set_property(TARGET websocket-server-coro-ssl PROPERTY FOLDER \"example-websocket-server\")\n\n    target_link_libraries (websocket-server-coro-ssl\n        OpenSSL::SSL OpenSSL::Crypto\n        lib-asio\n        lib-asio-ssl\n        lib-beast\n        )\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating a Distributed Adjacency List with Vertices in STL Vectors\nDESCRIPTION: This snippet demonstrates the creation of a distributed adjacency list using the Boost Graph Library, with directed edges and MPI for process communication. The vertices are stored in STL vectors, and no additional properties are defined.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/distributed_adjacency_list.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nusing namespace boost;\ntypedef adjacency_list<vecS, \n                     distributedS<parallel::mpi::bsp_process_group, vecS>,\n                     directedS> \n  Graph;\n```\n\n----------------------------------------\n\nTITLE: Defining Distributed Data Structure Selector in C++\nDESCRIPTION: The C++ template 'distributedS' allows for the definition of a data structure selector capable of distributing graph storage across multiple processes. It uses a 'ProcessGroup' type to manage distributed properties and communication, alongside a 'LocalSelector' for storing vertices or edges within each process. This template is pivotal in the transition from sequential to distributed adjacency lists in graph data structures.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/distributedS.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<typename ProcessGroup, typename LocalSelector = vecS>\\nstruct distributedS;\n```\n\n----------------------------------------\n\nTITLE: Writing a BGL Graph to GraphML\nDESCRIPTION: This code snippet provides a complete example of writing a BGL graph to a GraphML file. It showcases how to define a graph, add vertices and edges with associated properties, and then use `write_graphml` to export the graph data to standard output.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph/doc/write_graphml.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nenum files_e { dax_h, yow_h, boz_h, zow_h, foo_cpp,\n                 foo_o, bar_cpp, bar_o, libfoobar_a,\n                 zig_cpp, zig_o, zag_cpp, zag_o,\n                 libzigzag_a, killerapp, N };\n  const char* name[] = { \"dax.h\", \"yow.h\", \"boz.h\", \"zow.h\", \"foo.cpp\",\n                         \"foo.o\", \"bar.cpp\", \"bar.o\", \"libfoobar.a\",\n                         \"zig.cpp\", \"zig.o\", \"zag.cpp\", \"zag.o\",\n                         \"libzigzag.a\", \"killerapp\" };\n\n  int main(int,char*[])\n  {\n      typedef pair<int,int> Edge;\n      Edge used_by[] = {\n          Edge(dax_h, foo_cpp), Edge(dax_h, bar_cpp), Edge(dax_h, yow_h),\n          Edge(yow_h, bar_cpp), Edge(yow_h, zag_cpp),\n          Edge(boz_h, bar_cpp), Edge(boz_h, zig_cpp), Edge(boz_h, zag_cpp),\n          Edge(zow_h, foo_cpp),\n          Edge(foo_cpp, foo_o),\n          Edge(foo_o, libfoobar_a),\n          Edge(bar_cpp, bar_o),\n          Edge(bar_o, libfoobar_a),\n          Edge(libfoobar_a, libzigzag_a),\n          Edge(zig_cpp, zig_o),\n          Edge(zig_o, libzigzag_a),\n          Edge(zag_cpp, zag_o),\n          Edge(zag_o, libzigzag_a),\n          Edge(libzigzag_a, killerapp)\n       };\n\n      const int nedges = sizeof(used_by)/sizeof(Edge);\n\n      typedef adjacency_list< vecS, vecS, directedS,\n          property< vertex_color_t, string >,\n          property< edge_weight_t, int >\n          > Graph;\n      Graph g(used_by, used_by + nedges, N);\n\n      graph_traits<Graph>::vertex_iterator v, v_end;\n      for (tie(v,v_end) = vertices(g); v != v_end; ++v)\n          put(vertex_color_t(), g, *v, name[*v]);\n\n      graph_traits<Graph>::edge_iterator e, e_end;\n      for (tie(e,e_end) = edges(g); e != e_end; ++e)\n          put(edge_weight_t(), g, *e, 3);\n\n      dynamic_properties dp;\n      dp.property(\"name\", get(vertex_color_t(), g));\n      dp.property(\"weight\", get(edge_weight_t(), g));\n\n      write_graphml(std::cout, g, dp, true);\n   }\n```\n\n----------------------------------------\n\nTITLE: Basic Structure of std::error_code Class in C++\nDESCRIPTION: The core representation of the std::error_code class, showing its internal structure with a domain pointer to identify the error category and a value integer to represent the specific error within that domain.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/motivation/std_error_code.md#2025-04-22_snippet_0\n\nLANGUAGE: c++\nCODE:\n```\nclass error_code\n{\n  error_category* domain; // domain from which the error originates\n  int             value;  // numeric value of error within the domain\n};\n```\n\n----------------------------------------\n\nTITLE: Defining CopyConstructible Concept - C++\nDESCRIPTION: This snippet defines the CopyConstructible concept which ensures that a type T can be initialized from another object of the same type and destructed properly.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/concepts.rst.txt#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nauto concept CopyConstructible<typename T>\n{\n    T::T(T);\n    T::~T();\n};\n```\n\n----------------------------------------\n\nTITLE: Adding V8-Dependent VocBase Sources in CMake\nDESCRIPTION: Conditionally adds V8-dependent source files to the arango_vocbase target when V8 support is enabled. Includes AQL user functions, Tasks, and Transactions components.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/VocBase/Methods/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif (USE_V8) \n  target_sources(arango_vocbase PRIVATE\n    AqlUserFunctions.cpp\n    Tasks.cpp\n    Transactions.cpp)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating and Pushing ArangoDB Build Image Manifest\nDESCRIPTION: Command to create the manifest for the ArangoDB build image, combining AMD64 and ARM64 versions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/scripts/docker/build/linux/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake manifest\n```\n\n----------------------------------------\n\nTITLE: Defining UnaryFunctionObject Concept in C++\nDESCRIPTION: This code snippet defines the UnaryFunctionObject concept, which represents an object with a const call operator that accepts one parameter.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/src/concepts.md#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nconcept UnaryFunctionObject\n{\n    template<class T>\n    auto operator()(T&&) const;\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: Specifies the include directories for the `arango_aql` target.  These directories contain the header files required to compile the AQL source code. It includes both the core ArangoDB include directory and the enterprise-specific include directory.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/Aql/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(arango_aql PRIVATE\n  \"${PROJECT_SOURCE_DIR}/arangod\"\n  \"${PROJECT_SOURCE_DIR}/${ENTERPRISE_INCLUDE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: C++ Success Function Template Declaration\nDESCRIPTION: Function template that returns appropriate type sugar for constructing successful results in Boost.Outcome. Provides two overloads: one for value-based success with optional spare storage, and another for void-based success.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/functions/success.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nauto success(T &&, ...)\n```\n\n----------------------------------------\n\nTITLE: Defining and Using the `add_example` Macro in CMake\nDESCRIPTION: This snippet defines a macro named `add_example` to automate the process of adding example executables to the build using CMake. The macro checks for necessary arguments, such as the `NAME` and `SRCS`, and sets properties for the resulting target. It also links required libraries. The macro facilitates the organization of example code in the project.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/property_tree/examples/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nmacro(add_example)\n    cmake_parse_arguments(\"addex\" \"\" \"NAME\" \"SRCS;DEPS\" ${ARGN})\n    if(\"${addex_NAME}\" STREQUAL \"\")\n        message(FATAL_ERROR \"add_example: no NAME\")\n    endif()\n    if(\"${addex_SRCS}\" STREQUAL \"\")\n        message(FATAL_ERROR \"add_example: no SRCS\")\n    endif()\n    message(STATUS \"add_example: ${addex_NAME} SRCS: ${addex_SRCS} DEPS: ${addex_DEPS}\")\n    add_executable(\"${PROJECT_NAME}-example-${addex_NAME}\"\n        ${addex_SRCS})\n    set_property(TARGET \"${PROJECT_NAME}-example-${addex_NAME}\" PROPERTY FOLDER \"example\")\n    target_link_libraries(\"${PROJECT_NAME}-example-${addex_NAME}\" PRIVATE ${addex_DEPS})\nendmacro()\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamic Y Step Type Concept in C++\nDESCRIPTION: This snippet defines the HasDynamicYStepTypeConcept which checks for the existence of dynamic Y stepping capabilities within locators. This allows locators to change their stepping behavior dynamically, enhancing navigational flexibility.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/pixel_locator.rst#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\n  concept HasDynamicYStepTypeConcept<typename T> {\n    typename dynamic_y_step_type<T>;\n        where Metafunction<dynamic_y_step_type<T> >;\n  };\n```\n\n----------------------------------------\n\nTITLE: Defining ADL Helper Function for begin in C++\nDESCRIPTION: Implements a helper function adl_begin to use ADL lookup for std::begin.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/src/example_print.md#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nnamespace adl {\n\nusing std::begin;\n\ntemplate<class R>\nauto adl_begin(R&& r) BOOST_HOF_RETURNS(begin(r));\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Unique R-MAT Graph Generator in C++\nDESCRIPTION: This code defines a template class `unique_rmat_iterator` for generating R-MAT graphs using a random generator in C++. The graph generated is scale-free w.r.t. vertex degree due to Recursive-Matrix partitioning and ensures no parallel edges. Dependencies include a RandomGenerator and the Boost library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/unique_rmat_generator.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<typename RandomGenerator, typename Graph>\n  class unique_rmat_iterator\n  {\n  public:\n    typedef std::input_iterator_tag iterator_category;\n    typedef std::pair<vertices_size_type, vertices_size_type> value_type;\n    typedef const value_type& reference;\n    typedef const value_type* pointer;\n    typedef void difference_type;\n\n    unique_rmat_iterator();\n    unique_rmat_iterator(RandomGenerator& gen, vertices_size_type n, \n                  edges_size_type m, double a, double b, double c, \n                  double d, bool permute_vertices = true);\n    // Iterator operations\n    reference operator*() const;\n    pointer operator->() const;\n    unique_rmat_iterator& operator++();\n    unique_rmat_iterator operator++(int);\n    bool operator==(const unique_rmat_iterator& other) const;\n    bool operator!=(const unique_rmat_iterator& other) const;\n };\n```\n\n----------------------------------------\n\nTITLE: Converting Strings to/from UTF Encodings in C++\nDESCRIPTION: Demonstrates usage of Boost.Locale conversion functions to_utf, from_utf, and utf_to_utf for converting between different character encodings and UTF formats.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/doc/charset_handling.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nstd::string utf8_string = to_utf<char>(latin1_string,\"Latin1\");\nstd::wstring wide_string = to_utf<wchar_t>(latin1_string,\"Latin1\");\nstd::string latin1_string = from_utf(wide_string,\"Latin1\");\nstd::string utf8_string2 = utf_to_utf<char>(wide_string);\n```\n\n----------------------------------------\n\nTITLE: Creating Forwarding Overloads for Python Binding\nDESCRIPTION: This snippet defines a 'open_fwd' struct with a templated operator() for forwarding calls to the 'open' function of the 'window' class, preserving the number of parameters. This is necessary for binding function templates to Python.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter_python/doc/index.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nstruct open_fwd\\n{\\n    template <class A0, class A1, class A2>\\n    void operator()(\\n        boost::type<void>, window& self\\n      , A0 const& a0, A1 const& a1, A2 const& a2\\n    )\\n    {\\n        self.open(a0, a1, a2);\\n    }\\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Function using BOOST_OUTCOME_TRY Control Statement in C++\nDESCRIPTION: Example showing how to implement a function that uses the BOOST_OUTCOME_TRY control statement to handle errors from nested result<T> function calls.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/_index.md#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\noutcome::result<user_id> get_user_id(const std::string& str) noexcept\n{\n  BOOST_OUTCOME_TRY(i, convert(str));   // if convert() fails, return its error\n  return user_id{i};                   // return successful result\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Static Mutable Function in C++\nDESCRIPTION: Declares a static variable 'mutable_' using the BOOST_HOF_DECLARE_STATIC_VAR macro, which creates an instance of the mutable_adaptor using the detail::make template.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/mutable.hpp.txt#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_HOF_DECLARE_STATIC_VAR(mutable_, detail::make<mutable_adaptor>);\n```\n\n----------------------------------------\n\nTITLE: Creating Interface Library\nDESCRIPTION: Defines a header-only interface library named `json` (and `taocpp::json` alias).  It also specifies include directories for both build and install interfaces, utilizing generator expressions for conditional paths.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/taocpp-json/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library (json INTERFACE)\nadd_library (taocpp::json ALIAS json)\ntarget_include_directories (json INTERFACE\n  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>\n  $<INSTALL_INTERFACE:${TAOCPP_JSON_INSTALL_INCLUDE_DIR}>\n)\n```\n\n----------------------------------------\n\nTITLE: Modifying Values Through Zip Iterator in C++\nDESCRIPTION: Example showing how to modify values through a zip iterator using the get<0>() accessor to modify the first element.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/zip_iterator_ref.rst#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nzip_it->get<0>() = 42.0;\n```\n\n----------------------------------------\n\nTITLE: Configuring ArangoBench Executable in CMake\nDESCRIPTION: Defines the ArangoBench executable, specifies its source files, includes directories, and links required libraries. It also sets up installation rules and dependencies.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/client-tools/Benchmark/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(${BIN_ARANGOBENCH}\n  ${ProductVersionFiles_arangobench}\n  arangobench.cpp\n  BenchFeature.cpp\n  BenchmarkOperation.cpp\n  testcases/helpers.cpp\n)\ntarget_include_directories(${BIN_ARANGOBENCH} PRIVATE ${PROJECT_SOURCE_DIR}/client-tools)\n\ntarget_link_libraries(${BIN_ARANGOBENCH}\n  ${SYSTEM_LIBRARIES}\n  boost_system\n  boost_boost\n  arango_shell\n  clienttools_utils\n)\n\ninstall(\n  TARGETS ${BIN_ARANGOBENCH}\n  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR})\n\ninstall_config(${BIN_ARANGOBENCH})\n\nadd_dependencies(${BIN_ARANGOBENCH} zlibstatic)\n\n# use ICU 64 for the client tools\nadd_dependencies(${BIN_ARANGOBENCH} iculegacy_build)\n\nif (USE_JEMALLOC)\n  add_dependencies(${BIN_ARANGOBENCH} jemalloc_build)\nendif ()\n\nadd_dependencies(${BIN_ARANGOBENCH} man)\n```\n\n----------------------------------------\n\nTITLE: Declaring Static Function for Undefined Behavior in C++\nDESCRIPTION: Declares a static function '_ub' that takes an rvalue reference to an Impl type. This function is designed to cause noticeable hard undefined behavior when called, allowing for stronger compiler optimizations.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/policies/base/ub.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nstatic void _ub(Impl &&)\n```\n\n----------------------------------------\n\nTITLE: Scharr Filter Example\nDESCRIPTION: This snippet provides an example of a 3x3 Scharr filter (ScharrX) used to calculate the gradient in the X (horizontal) direction of a single-channel image (intensity/luminance). This filter is a common tool for edge detection and feature extraction in image processing.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/image_processing/basics.rst#2025-04-22_snippet_0\n\nLANGUAGE: NA\nCODE:\n```\n\"ScharrX = [1,0,-1][1,0,-1][1,0,-1]\"\n```\n\n----------------------------------------\n\nTITLE: Adding Test Subdirectory\nDESCRIPTION: This snippet conditionally adds a subdirectory named 'test' to the build process if testing is enabled (BUILD_TESTING) and the test/CMakeLists.txt file exists. This allows including unit tests for the library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/rational/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n\"if(BUILD_TESTING AND EXISTS \\\"${CMAKE_CURRENT_SOURCE_DIR}/test/CMakeLists.txt\\\")\n\n  add_subdirectory(test)\n\nendif()\"\n```\n\n----------------------------------------\n\nTITLE: Loading Distributed Graph with Named Vertices\nDESCRIPTION: Shows how to construct a distributed graph using named vertices, where edges are added by specifying vertex names. Only process 0 loads the graph from standard input, and vertices and edges are automatically created and distributed.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/distributed_adjacency_list.rst#2025-04-22_snippet_10\n\nLANGUAGE: C++\nCODE:\n```\nGraph g;\nif (process_id(g.process_group()) == 0) {\n  // Only process 0 loads the graph, which is distributed automatically\n  std:string source, target;\n  for(std::cin >> source >> target)\n    add_edge(source, target, g);\n}\n\n// All processes synchronize at this point, then the graph is complete\nsynchronize(g.process_group());\n```\n\n----------------------------------------\n\nTITLE: Constructing a Distributed Graph using Sequence Constructors\nDESCRIPTION: This snippet demonstrates how to construct a distributed graph using sequence constructors from a pair of iterators, which is beneficial for generating graphs in parallel and maintaining consistency across processes.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/distributed_adjacency_list.rst#2025-04-22_snippet_8\n\nLANGUAGE: C++\nCODE:\n```\ntypedef boost::sorted_erdos_renyi_iterator<boost::minstd_rand, Graph> ERIter;\nboost::minstd_rand gen;\nunsigned long n = 1000000; // 1M vertices\nGraph g(ERIter(gen, n, 0.00005), ERIter(), n);\n```\n\n----------------------------------------\n\nTITLE: Adding Fuzzer Library Target for Parse Function in CMake\nDESCRIPTION: Defines a library target for the parse function fuzzer. It sets the target folder and links against the Boost::json library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/json/fuzzing/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(fuzzerlib_parse fuzz_parse.cpp)\nset_property(TARGET fuzzerlib_parse PROPERTY FOLDER \"fuzzing\")\ntarget_link_libraries(fuzzerlib_parse PRIVATE Boost::json)\n```\n\n----------------------------------------\n\nTITLE: Declaring is_basic_result<T> Type Trait in C++\nDESCRIPTION: Declaration of the is_basic_result<T> type trait, which is an integral constant type that evaluates to true for basic_result<T, E, NoValuePolicy> types. It is not overridable and resides in the BOOST_OUTCOME_V2_NAMESPACE namespace.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/traits/is_basic_result.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nnamespace BOOST_OUTCOME_V2_NAMESPACE {\n  template<class T>\n  struct is_basic_result;\n\n  template<class T>\n  inline constexpr bool is_basic_result_v = is_basic_result<T>::value;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL HTTP Server Build with CMake\nDESCRIPTION: CMake configuration that sets up build requirements for an SSL-enabled HTTP server. Includes necessary source files, sets up executable properties, and links required libraries including OpenSSL, Asio, and Beast. The configuration is only applied when OpenSSL is detected on the system.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/beast/example/http/server/coro-ssl/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif (OPENSSL_FOUND)\n    GroupSources(include/boost/beast beast)\n    GroupSources(example/common common)\n    GroupSources(example/http/server/coro-ssl \"/\")\n\n    add_executable (http-server-coro-ssl\n        ${BOOST_BEAST_FILES}\n        ${PROJECT_SOURCE_DIR}/example/common/server_certificate.hpp\n        Jamfile\n        http_server_coro_ssl.cpp\n    )\n\n    set_property(TARGET http-server-coro-ssl PROPERTY FOLDER \"example-http-server\")\n\n    target_link_libraries (http-server-coro-ssl\n        OpenSSL::SSL OpenSSL::Crypto\n        lib-asio\n        lib-asio-ssl\n        lib-beast\n        )\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Compiler and Linker Options for MSVC\nDESCRIPTION: Sets compiler and linker flags for Microsoft Visual C++ compiler, including runtime library selection and subsystem configuration.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/linenoise-ng/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nelseif(MSVC) \n  message(STATUS \"Compiler type MSVC: ${CMAKE_CXX_COMPILER}\")\n  add_definitions(\"-D_CRT_SECURE_NO_WARNINGS=1\")\n\n  foreach (flag_var\n           CMAKE_CXX_FLAGS\n           CMAKE_CXX_FLAGS_DEBUG\n           CMAKE_CXX_FLAGS_RELEASE\n           CMAKE_CXX_FLAGS_MINSIZEREL\n           CMAKE_CXX_FLAGS_RELWITHDEBINFO)\n    if (flag_var MATCHES \"DEBUG\")\n      set(${flag_var} \"${${flag_var}} /MTd\")\n    else ()\n      set(${flag_var} \"${${flag_var}} /MT\")\n    endif ()\n  endforeach()\n  set(CMAKE_EXE_LINKER_FLAGS_DEBUG \"${CMAKE_EXE_LINKER_FLAGS_DEBUG} /INCREMENTAL:NO /SUBSYSTEM:CONSOLE /LTCG /ignore:4099 /NODEFAULTLIB:libc.lib /NODEFAULTLIB:libcmt.lib /NODEFAULTLIB:msvcrt.lib /NODEFAULTLIB:libcd.lib /NODEFAULTLIB:msvcrtd.lib\")\n  set(CMAKE_EXE_LINKER_FLAGS_MINSIZEREL \"${CMAKE_EXE_LINKER_FLAGS_MINSIZEREL} /SUBSYSTEM:CONSOLE /ignore:4099 /NODEFAULTLIB:libc.lib /NODEFAULTLIB:libcmtd.lib /NODEFAULTLIB:msvcrt.lib /NODEFAULTLIB:libcd.lib /NODEFAULTLIB:msvcrtd.lib\")\n  set(CMAKE_EXE_LINKER_FLAGS_RELEASE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE} /SUBSYSTEM:CONSOLE /ignore:4099 /NODEFAULTLIB:libc.lib /NODEFAULTLIB:libcmtd.lib /NODEFAULTLIB:msvcrt.lib /NODEFAULTLIB:libcd.lib /NODEFAULTLIB:msvcrtd.lib\")\n  set(CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO \"${CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO} /SUBSYSTEM:CONSOLE /ignore:4099 /NODEFAULTLIB:libc.lib /NODEFAULTLIB:libcmtd.lib /NODEFAULTLIB:msvcrt.lib /NODEFAULTLIB:libcd.lib /NODEFAULTLIB:msvcrtd.lib\")\n```\n\n----------------------------------------\n\nTITLE: Creating NumPy ndarray from 2D Multidimensional Array in C++\nDESCRIPTION: Demonstrates creating a NumPy ndarray from a 2D uint8_t array with specified shape and stride values. The example shows two different approaches to initialize the array, using inline parameters and previously defined variables.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/doc/html/numpy/_sources/reference/ndarray.rst.txt#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nuint8_t mul_data[][4] = {{1,2,3,4},{5,6,7,8},{1,3,5,7}};\nshape = p::make_tuple(3,2) ;\nstride = p::make_tuple(4,2) ; \nnp::dtype dt1 = np::dtype::get_builtin<uint8_t>();\n\nnp::ndarray mul_data_ex = np::from_data(mul_data,dt1, p::make_tuple(3,4),p::make_tuple(4,1),p::object());\nmul_data_ex = np::from_data(mul_data,dt1, shape,stride,p::object());\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories\nDESCRIPTION: Adds the specified subdirectories to the build process. These subdirectories likely contain additional source code related to specific aspects of the AQL functionality, such as execution node, executor, function, and optimizer components.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/Aql/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(ExecutionNode)\nadd_subdirectory(Executor)\nadd_subdirectory(Function)\nadd_subdirectory(Optimizer)\n```\n\n----------------------------------------\n\nTITLE: Channel Convert Function Definition\nDESCRIPTION: Defines the `channel_convert` function template. This function converts a source channel value into a destination channel value, linearly mapping the source's value into the range of the destination. It takes the destination and source channel types as template parameters and the source channel value as an argument.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/channel.rst#2025-04-22_snippet_13\n\nLANGUAGE: cpp\nCODE:\n```\n  // Converts a source channel value into a destination channel.\n  // Linearly maps the value of the source into the range of the destination.\n  template <typename DstChannel, typename SrcChannel>\n  typename channel_traits<DstChannel>::value_type channel_convert(SrcChannel src);\n```\n\n----------------------------------------\n\nTITLE: Optimized X-Gradient Calculation Using GIL Iterators in C++\nDESCRIPTION: This snippet shows an optimized version of the x_gradient_unguarded function using GIL's one-dimensional pixel iterators. It demonstrates the use of begin() and end() methods for efficient pixel traversal.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/tutorial/gradient.rst.txt#2025-04-22_snippet_12\n\nLANGUAGE: cpp\nCODE:\n```\nvoid x_gradient_unguarded(gray8c_view_t const& src, gray8s_view_t const& dst)\n{\n  gray8c_view_t::iterator src_it = src.begin();\n  for (gray8s_view_t::iterator dst_it = dst.begin(); dst_it!=dst.end(); ++dst_it, ++src_it)\n      *dst_it = (src_it.x()[-1] - src_it.x()[1]) / 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Stored Error with assume_error() Method in C++\nDESCRIPTION: This method provides an lvalue reference to the stored error. It first invokes NoValuePolicy::narrow_error_check() and then returns the reference to the error. For void error_type, only a const overload returning void is available.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/basic_result/assume_error_lvalue.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nerror_type &assume_error() & noexcept\n```\n\n----------------------------------------\n\nTITLE: First Implementation of X Gradient with Boost GIL\nDESCRIPTION: This C++ code implements the horizontal gradient computation using the `operator()` method of the image view. It iterates through each pixel in the image (excluding the boundary pixels) and calculates the gradient as the half-difference of its left and right neighbors. The result is then assigned to the corresponding pixel in the destination view.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/tutorial/gradient.rst#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nvoid x_gradient(gray8c_view_t const& src, gray8s_view_t const& dst)\n{\n  for (int y = 0; y < src.height(); ++y)\n      for (int x = 1; x < src.width() - 1; ++x)\n          dst(x, y) = (src(x-1, y) - src(x+1, y)) / 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Comparison Operator for Failure Types in C++\nDESCRIPTION: Implements the comparison operator `operator==` to evaluate if the current result is equivalent to another failure type. This method allows checking the equality of errors using the specified error types. Dependencies include ensuring that `operator==` is valid for the specific error types involved.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/basic_result/equality_failure_type.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nbool operator==(const failure_type<A, void> &) const\n```\n\n----------------------------------------\n\nTITLE: Demonstrating MPL String Usage with Push Back Operation in C++\nDESCRIPTION: This example demonstrates how to create an MPL string with multi-character literals and modify it using push_back operation. The example also shows how to convert the compile-time string to a null-terminated character array using c_str metafunction for runtime validation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/string.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntypedef mpl::string<'hell','o wo','rld'> hello;\ntypedef mpl::push_back<hello, mpl::char_<'!'> >::type hello2;\n\nBOOST_ASSERT(0 == std::strcmp(mpl::c_str<hello2>::value, \"hello world!\"));\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version and Project Configuration\nDESCRIPTION: Defines the minimum CMake version, sets project version, and configures language and version for the Boost Property Tree library\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/property_tree/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.19)\n\nset(BOOST_PROPERTY_TREE_VERSION ${BOOST_SUPERPROJECT_VERSION})\n\nproject(boost_property_tree VERSION \"${BOOST_PROPERTY_TREE_VERSION}\" LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Defining Parameter Signature with Deducible Optional Parameters\nDESCRIPTION: This snippet shows how to rewrite a class template signature to support deducible optional parameters. It uses parameter::parameters to create a signature with one required parameter and three optional parameters that can be deduced.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/index.rst#2025-04-22_snippet_34\n\nLANGUAGE: cpp\nCODE:\n```\ntypedef parameter::parameters<\n    required<tag::class_type, is_class<_> >\n\n  , parameter::optional<\n        deduced<tag::base_list>\n      , is_base_and_derived<detail::bases_base,_>\n    >\n\n  , parameter::optional<\n        deduced<tag::held_type>\n      , mpl::not_<\n            mpl::or_<\n                is_base_and_derived<detail::bases_base,_>\n              , is_same<noncopyable,_>\n            >\n        >\n    >\n\n  , parameter::optional<\n        deduced<tag::copyable>\n      , is_same<noncopyable,_>\n    >\n\n> class_signature;\n```\n\n----------------------------------------\n\nTITLE: X Gradient Interface with Boost GIL\nDESCRIPTION: This C++ code snippet defines the interface for computing the horizontal gradient of an 8-bit unsigned grayscale image. It takes a read-only view of the source image (`gray8c_view_t`) and a mutable view of the destination image (`gray8s_view_t`) as input. The function asserts that the dimensions of the source and destination views are the same and provides a placeholder for the gradient computation logic.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/tutorial/gradient.rst#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n#include <boost/gil.hpp>\nusing namespace boost::gil;\n\nvoid x_gradient(gray8c_view_t const& src, gray8s_view_t const& dst)\n{\n  assert(src.dimensions() == dst.dimensions());\n  ...    // compute the gradient\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking Member Function with Named Parameters in C++\nDESCRIPTION: Example showing how to invoke a member function using named parameters bound to specific values. The example uses different types of parameter passing including rvalue, lvalue, and const variants.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_82\n\nLANGUAGE: cpp\nCODE:\n```\nD const d = D();\nd.evaluate_m(\n    _rr0 = rvalue_bitset<3>()\n  , _lrc0 = lvalue_const_bitset<0>()\n  , _lr0 = lvalue_bitset<1>()\n  , _rrc0 = rvalue_const_bitset<2>()\n);\nd.evaluate_m(\n    _lr0 = lvalue_bitset<1>()\n  , _lrc0 = lvalue_const_bitset<0>()\n);\n```\n\n----------------------------------------\n\nTITLE: Using BOOST_OUTCOME_CO_TRY for Error Handling in C++ Coroutines\nDESCRIPTION: The BOOST_OUTCOME_CO_TRY operation is designed for performing the TRY operation within C++ Coroutines. It provides coroutine-aware error handling.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/changelog/_index.md#2025-04-22_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_OUTCOME_CO_TRY()\n```\n\n----------------------------------------\n\nTITLE: Defining Image Metafunctions in GIL (C++)\nDESCRIPTION: These template structures define metafunctions in the Generic Image Library (GIL) to derive various image-related types such as pixel references, pixel values, iterators, locators, views, and images based on specified channel types, layouts, and other properties like planarity, mutability, and step size. They provide a way to programmatically generate commonly used image types within the GIL framework.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/metafunctions.rst#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <typename ChannelValue, typename Layout, bool IsPlanar=false, bool IsMutable=true>\nstruct pixel_reference_type { typedef ... type; };\n\ntemplate <typename Channel, typename Layout>\nstruct pixel_value_type { typedef ... type; };\n\ntemplate <typename ChannelValue, typename Layout, bool IsPlanar=false, bool IsStep=false,  bool IsMutable=true>\nstruct iterator_type { typedef ... type; };\n\ntemplate <typename ChannelValue, typename Layout, bool IsPlanar=false, bool IsXStep=false, bool IsMutable=true>\nstruct locator_type { typedef ... type; };\n\ntemplate <typename ChannelValue, typename Layout, bool IsPlanar=false, bool IsXStep=false, bool IsMutable=true>\nstruct view_type { typedef ... type; };\n\ntemplate <typename ChannelValue, typename Layout, bool IsPlanar=false, typename Alloc=std::allocator<unsigned char> >\nstruct image_type { typedef ... type; };\n\ntemplate <typename BitField, typename ChannelBitSizeVector, typename Layout, typename Alloc=std::allocator<unsigned char> >\nstruct packed_image_type { typedef ... type; };\n\ntemplate <typename ChannelBitSizeVector, typename Layout, typename Alloc=std::allocator<unsigned char> >\nstruct bit_aligned_image_type { typedef ... type; };\n```\n\n----------------------------------------\n\nTITLE: Linking RocksDB Library\nDESCRIPTION: This snippet links the `arango_rocksdb` library with various other ArangoDB components and third-party libraries like `rocksdb`, `snappy`, and `faiss`. It ensures that the `arango_rocksdb` library has access to the necessary functions and data structures from these dependencies for its operation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/RocksDBEngine/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(arango_rocksdb\n  arango_cache\n  arango_common_rest_handler\n  arango_geo\n  arango_health\n  arango_indexes\n  arango_restart_action\n  arango_storage_engine_common\n  arango::validation\n  arango_zkd\n  boost_boost\n  rocksdb\n  rocksdb_interface\n  snappy\n  faiss)\n```\n\n----------------------------------------\n\nTITLE: Adding Boost Rational Library\nDESCRIPTION: This snippet adds the boost_rational library as an INTERFACE library and creates an alias for it. An interface library allows defining usage requirements without producing any build artifacts.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/rational/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n\"add_library(boost_rational INTERFACE)\nadd_library(Boost::rational ALIAS boost_rational)\"\n```\n\n----------------------------------------\n\nTITLE: Defining Boost Library Dependencies for Units\nDESCRIPTION: Specifies the other Boost libraries that Boost Units depends on, setting them up as interface dependencies.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/units/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(boost_units\n  INTERFACE\n    Boost::assert\n    Boost::config\n    Boost::core\n    Boost::integer\n    Boost::io\n    Boost::lambda\n    Boost::math\n    Boost::mpl\n    Boost::preprocessor\n    Boost::static_assert\n    Boost::type_traits\n    Boost::typeof\n)\n```\n\n----------------------------------------\n\nTITLE: Installing GIL Dependencies via vcpkg on Windows\nDESCRIPTION: Demonstrates how to install the necessary dependencies for Boost.GIL using vcpkg in a Windows environment, targeting both 32-bit and 64-bit architectures. Dependencies include libjpeg-turbo, libpng, and tiff. Ensure vcpkg is installed and accessible from the command line.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/example/b2/README.md#2025-04-22_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nC:\\vcpkg --triplet x86-windows install libjpeg-turbo libpng tiff\nC:\\vcpkg --triplet x64-windows install libjpeg-turbo libpng tiff\n```\n\n----------------------------------------\n\nTITLE: LZ4 CLI Usage Example\nDESCRIPTION: Demonstrates the full list of commands available in the LZ4 Command Line Interface, including compression levels, input/output options, and advanced arguments.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/lz4/programs/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nUsage :\n      lz4 [arg] [input] [output]\n\ninput   : a filename\n          with no FILE, or when FILE is - or stdin, read standard input\nArguments :\n -1     : Fast compression (default)\n -9     : High compression\n -d     : decompression (default for .lz4 extension)\n -z     : force compression\n -D FILE: use FILE as dictionary\n -f     : overwrite output without prompting\n -k     : preserve source files(s)  (default)\n--rm    : remove source file(s) after successful de/compression\n -h/-H  : display help/long help and exit\n\nAdvanced arguments :\n -V     : display Version number and exit\n -v     : verbose mode\n -q     : suppress warnings; specify twice to suppress errors too\n -c     : force write to standard output, even if it is the console\n -t     : test compressed file integrity\n -m     : multiple input files (implies automatic output filenames)\n -r     : operate recursively on directories (sets also -m)\n -l     : compress using Legacy format (Linux kernel compression)\n -B#    : cut file into blocks of size # bytes [32+]\n                     or predefined block size [4-7] (default: 7)\n -BD    : Block dependency (improve compression ratio)\n -BX    : enable block checksum (default:disabled)\n--no-frame-crc : disable stream checksum (default:enabled)\n--content-size : compressed frame includes original size (default:not present)\n--[no-]sparse  : sparse mode (default:enabled on file, disabled on stdout)\n--favor-decSpeed: compressed files decompress faster, but are less compressed\n--fast[=#]: switch to ultra fast compression level (default: 1)\n\nBenchmark arguments :\n -b#    : benchmark file(s), using # compression level (default : 1)\n -e#    : test all compression levels from -bX to # (default : 1)\n -i#    : minimum evaluation time in seconds (default : 3s)\n```\n\n----------------------------------------\n\nTITLE: Reading and Writing In-Memory Buffers\nDESCRIPTION: Complex example showing reading from a file stream, writing to a memory buffer, and subsequent operations with in-memory image data.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/io.rst#2025-04-22_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\n// 1. Read an image.\nifstream in( \"test.tif\", ios::binary );\n\nrgb8_image_t img;\nread_image( in, img, tiff_tag() );\n\n// 2. Write image to in-memory buffer.\nstringstream out_buffer( ios_base::out | ios_base::binary );\n\nrgb8_image_t src;\nwrite_view( out_buffer, view( src ), tiff_tag() );\n```\n\n----------------------------------------\n\nTITLE: Initializing a Custom Comparator for STL Containers in C++\nDESCRIPTION: Demonstrates how to create a custom comparator with a specific locale and comparison level, then use it to initialize an STL map. This allows for flexible string comparison in containers.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/doc/collation.txt#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ncomparator<char> comp(some_locale,some_level);\nstd::map<std::string,std::string,comparator<char> > strings(comp);\n```\n\n----------------------------------------\n\nTITLE: Building ARM64 ArangoDB Build Image\nDESCRIPTION: Command to build the ArangoDB build image for ARM64 architecture.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/scripts/docker/build/linux/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake arm64\n```\n\n----------------------------------------\n\nTITLE: Application Code Using Multiple Libraries with Error Handling\nDESCRIPTION: Example demonstrating how to use three different libraries together with explicit error handling transitions marked by ext(). Shows integration of httplib, tidylib, and filelib while maintaining proper error boundary documentation through the ext() function.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/tutorial/advanced/interop/app-go.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n{{% snippet \"finale.cpp\" \"app_go\" %}}\n```\n\n----------------------------------------\n\nTITLE: Implementing METIS Graph Reader in C++\nDESCRIPTION: Defines the metis_reader class with methods for reading METIS graph files. It includes various iterator interfaces and functions for retrieving vertices and edge information. Primarily used to construct Boost Parallel BGL graphs efficiently.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/metis.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nclass metis_reader\n  {\n   public:\n    typedef std::size_t vertices_size_type;\n    typedef std::size_t edges_size_type;\n    typedef double vertex_weight_type;\n    typedef double edge_weight_type;\n\n    class edge_iterator;\n    class edge_weight_iterator;\n    \n    metis_reader(std::istream& in);\n\n    edge_iterator begin();\n    edge_iterator end();\n    edge_weight_iterator weight_begin();\n\n    vertices_size_type num_vertices() const;\n    edges_size_type num_edges() const;\n\n    std::size_t num_vertex_weights() const;\n\n    vertex_weight_type vertex_weight(vertices_size_type v, std::size_t n);\n\n    bool has_edge_weights() const;\n  };\n```\n\n----------------------------------------\n\nTITLE: Evaluating Named Arguments in C++\nDESCRIPTION: Examples of function evaluation using named arguments. Shows explicit parameter naming and assignment with different bitset types.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_60\n\nLANGUAGE: cpp\nCODE:\n```\nb.evaluate(  // named arguments\n    _rr0 = rvalue_bitset<3>()\n  , _lrc0 = lvalue_const_bitset<0>()\n  , _lr0 = lvalue_bitset<1>()\n  , _rrc0 = rvalue_const_bitset<2>()\n);\nb.evaluate(  // named arguments\n    _lr0 = lvalue_bitset<1>()\n  , _lrc0 = lvalue_const_bitset<0>()\n);\n```\n\n----------------------------------------\n\nTITLE: Local Property Map Class Definition\nDESCRIPTION: Template class definition for a local property map that handles mapping between global and local keys in a distributed environment.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/distributed_property_map.rst#2025-04-22_snippet_25\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<typename ProcessGroup, typename GlobalKey, typename LocalMap>\n  class local_property_map\n  {\n  public:\n  typedef typename property_traits<LocalMap>::value_type value_type;\n  typedef GlobalKey                                      key_type;\n  typedef typename property_traits<LocalMap>::reference  reference;\n  typedef typename property_traits<LocalMap>::category   category;\n\n  explicit \n  local_property_map(const ProcessGroup& process_group = ProcessGroup(),\n                       const LocalMap& local_map = LocalMap());\n\n  reference operator[](const key_type& key);\n  };\n```\n\n----------------------------------------\n\nTITLE: Configuring ArangoDB Server Permissions Test\nDESCRIPTION: Example of a server permissions test configuration that controls startup parameters of ArangoDB processes. Shows how to restrict port testing through javascript configuration.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nif (getOptions === true) {\n  return {\n    'javascript.allow-port-testing': false\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BOOST_HOF_STATIC_LAMBDA macro for C++\nDESCRIPTION: This snippet defines the BOOST_HOF_STATIC_LAMBDA macro, which allows for initializing non-capturing lambdas at compile-time in a constexpr expression. The implementation varies based on compiler support for constexpr lambdas.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/lambda.hpp.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n#if BOOST_HOF_HAS_CONSTEXPR_LAMBDA\n#define BOOST_HOF_STATIC_LAMBDA []\n#else\n#define BOOST_HOF_DETAIL_MAKE_STATIC BOOST_HOF_DETAIL_CONSTEXPR_DEDUCE boost::hof::detail::static_function_wrapper_factor()\n#define BOOST_HOF_STATIC_LAMBDA BOOST_HOF_DETAIL_MAKE_STATIC = []\n#endif\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Errors Library for ArangoDB\nDESCRIPTION: Sets up the basic error handling library with its dependencies and include directories. Includes error codes, shell colors, and application exit handling.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/lib/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(arango_basic_errors STATIC\n        ApplicationFeatures/ShellColorsFeature.cpp\n        Basics/ErrorCode.cpp\n        Basics/application-exit.cpp\n        Basics/error.cpp\n)\n\ntarget_include_directories(arango_basic_errors PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})\ntarget_include_directories(arango_basic_errors PUBLIC ${CMAKE_CURRENT_BINARY_DIR})\ntarget_include_directories(arango_basic_errors PUBLIC\n        ${FROZEN_INCLUDE_DIR}\n)\n\ntarget_link_libraries(arango_basic_errors\n  PUBLIC velocypack\n         arango_inspection\n         absl::flat_hash_set\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost Coroutine Library Build Settings in CMake\nDESCRIPTION: Main CMake configuration for building the Boost Coroutine library. Sets up project requirements, configures platform-specific source files, defines library targets, and establishes compilation settings and dependencies.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/coroutine/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.16)\n\nproject(boost_coroutine VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n\nif(WIN32 AND NOT CMAKE_CXX_PLATFORM_ID MATCHES \"Cygwin\")\n  set(STACK_TRAITS_SOURCES\n    src/windows/stack_traits.cpp\n  )\nelse()\n  set(STACK_TRAITS_SOURCES\n    src/posix/stack_traits.cpp\n  )\nendif()\n\nadd_library(boost_coroutine\n  src/detail/coroutine_context.cpp\n  src/exceptions.cpp\n  ${STACK_TRAITS_SOURCES}\n)\n\nadd_library(Boost::coroutine ALIAS boost_coroutine)\n\ntarget_include_directories(boost_coroutine PUBLIC include)\n\ntarget_link_libraries(boost_coroutine\n  PUBLIC\n    Boost::assert\n    Boost::config\n    Boost::context\n    Boost::core\n    Boost::exception\n    Boost::move\n    Boost::system\n    Boost::throw_exception\n    Boost::type_traits\n    Boost::utility\n)\n\ntarget_compile_definitions(boost_coroutine\n  PUBLIC BOOST_COROUTINE_NO_LIB\n  PRIVATE BOOST_COROUTINE_SOURCE BOOST_COROUTINES_SOURCE\n)\n\nif(BUILD_SHARED_LIBS)\n  target_compile_definitions(boost_coroutine PUBLIC BOOST_COROUTINE_DYN_LINK BOOST_COROUTINES_DYN_LINK)\nelse()\n  target_compile_definitions(boost_coroutine PUBLIC BOOST_COROUTINE_STATIC_LINK)\nendif()\n\nif(BUILD_TESTING AND EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/test/CMakeLists.txt\")\n\n  add_subdirectory(test)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Iterating and Modifying MFC Collection with Boost\nDESCRIPTION: This code snippet demonstrates using Boost's range capabilities to iterate over and modify elements in an MFC collection. It uses CTypedPtrArray to store lists of CString objects and applies transformations such as converting to uppercase and sorting. Requires Boost C++ Libraries Version 1.34.0 or later, and Visual C++ 7.1 or 8.0.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/range/doc/mfc_atl.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nCTypedPtrArray<CPtrArray, CList<CString> *> myArray;\n...\nBOOST_FOREACH (CList<CString> *theList, myArray)\n{\n    BOOST_FOREACH (CString& str, *theList)\n    {\n        boost::to_upper(str);\n        std::sort(boost::begin(str), boost::end(str));\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Usage of R-MAT Iterator in C++\nDESCRIPTION: This snippet provides an example of how to use the rmat_iterator to create a graph with a specified number of nodes and edges. It demonstrates the setup of a random number generator and the instantiation of a Boost graph using the R-MAT generator.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/rmat_generator.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/graph/adjacency_list.hpp>\n#include <boost/graph/rmat_graph_generator.hpp>\n#include <boost/random/linear_congruential.hpp>\n\ntypedef boost::adjacency_list<> Graph;\ntypedef boost::rmat_iterator<boost::minstd_rand, Graph> RMATGen;\n\nint main()\n{\n    boost::minstd_rand gen;\n    // Create graph with 100 nodes and 400 edges \n    Graph g(RMATGen(gen, 100, 400, 0.57, 0.19, 0.19, 0.05), RMATGen(), 100);\n    return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Add Static Library: arango_replication2\nDESCRIPTION: This CMake command adds a static library named `arango_replication2`. It specifies the source files to be included in the library. It also links the necessary libraries and includes the required directories.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/Replication2/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(arango_replication2 STATIC\n        AgencyCollectionSpecification.cpp\n        Supervision/CollectionGroupSupervision.cpp\n        AgencyMethods.cpp\n        Methods.cpp\n        MetricsHelper.cpp\n        Version.cpp\n        ${PROJECT_SOURCE_DIR}/arangod/RestHandler/RestLogHandler.cpp\n        ${PROJECT_SOURCE_DIR}/arangod/RestHandler/RestLogInternalHandler.cpp\n        ${PROJECT_SOURCE_DIR}/arangod/RestHandler/RestDocumentStateHandler.cpp)\n```\n\n----------------------------------------\n\nTITLE: Alternative Factory Pattern to BOOST_HOF_STATIC_LAMBDA_FUNCTION in C++\nDESCRIPTION: This code demonstrates an alternative to BOOST_HOF_STATIC_LAMBDA_FUNCTION using the factory pattern, which avoids the need for a reinterpret cast. It creates a factory that returns a lambda when dereferenced.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/doc/src/faq.md.txt#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nstruct sum_factory\n{\n    auto operator*() const\n    {\n        return [](auto x, auto y)\n        {\n            return x + y;\n        };\n    }\n}\n\nBOOST_HOF_STATIC_FUNCTION(sum) = boost::hof::indirect(sum_factory{});\n```\n\n----------------------------------------\n\nTITLE: Defining the 'always' Function Object in C++\nDESCRIPTION: Implements the main 'always_f' function object that creates appropriate specializations of always_base. This provides the primary interface for the 'always' function, handling both value and void cases.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/always.hpp.txt#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\nstruct always_f\n{\n    template<class T>\n    constexpr always_detail::always_base<T> operator()(T x) const noexcept(BOOST_HOF_IS_NOTHROW_COPY_CONSTRUCTIBLE(T))\n    {\n        return always_detail::always_base<T>(x);\n    }\n\n    constexpr always_detail::always_base<void> operator()() const noexcept\n    {\n        return always_detail::always_base<void>();\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Zip Iterator Constructor Template in C++\nDESCRIPTION: Template constructor implementation for zip_iterator that enables conversion from compatible iterator tuple types.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/zip_iterator_ref.rst#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate<typename OtherIteratorTuple>\nzip_iterator(\n      const zip_iterator<OtherIteratorTuple>& other\n    , typename enable_if_convertible<\n            OtherIteratorTuple\n          , IteratorTuple>::type* = 0     // exposition only\n);\n```\n\n----------------------------------------\n\nTITLE: Using BOOST_MPL_HAS_XXX_TRAIT_DEF Macro for Type Member Detection in C++\nDESCRIPTION: This example demonstrates how to use the BOOST_MPL_HAS_XXX_TRAIT_DEF macro to check for the presence of a nested type member 'xxx' in various struct definitions. The macro generates a metafunction 'has_xxx' that returns true only when a class has a proper type member named 'xxx'.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/HAS_XXX_TRAIT_DEF.rst#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nBOOST_MPL_HAS_XXX_TRAIT_DEF(xxx)\n\nstruct test1 {};\nstruct test2 { void xxx(); };\nstruct test3 { int xxx; };\nstruct test4 { static int xxx(); };\nstruct test5 { template< typename T > struct xxx {}; };\nstruct test6 { typedef int xxx; };\nstruct test7 { struct xxx; };\nstruct test8 { typedef void (*xxx)(); };\nstruct test9 { typedef void (xxx)(); };\n\nBOOST_MPL_ASSERT_NOT(( has_xxx<test1> ));\nBOOST_MPL_ASSERT_NOT(( has_xxx<test2> ));\nBOOST_MPL_ASSERT_NOT(( has_xxx<test3> ));\nBOOST_MPL_ASSERT_NOT(( has_xxx<test4> ));\nBOOST_MPL_ASSERT_NOT(( has_xxx<test5> ));\n\n#if !defined(BOOST_MPL_CFG_NO_HAS_XXX)\nBOOST_MPL_ASSERT(( has_xxx<test6> ));\nBOOST_MPL_ASSERT(( has_xxx<test7> ));\nBOOST_MPL_ASSERT(( has_xxx<test8> ));\nBOOST_MPL_ASSERT(( has_xxx<test9> ));\n#endif\n    \nBOOST_MPL_ASSERT(( has_xxx<test6,true_> ));\nBOOST_MPL_ASSERT(( has_xxx<test7,true_> ));\nBOOST_MPL_ASSERT(( has_xxx<test8,true_> ));\nBOOST_MPL_ASSERT(( has_xxx<test9,true_> ));\n```\n\n----------------------------------------\n\nTITLE: Creating Graph Tests Executable\nDESCRIPTION: Defines an executable target for graph tests that is excluded from default build targets.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/Graph/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(arangodbtests_graph\n        EXCLUDE_FROM_ALL)\n```\n\n----------------------------------------\n\nTITLE: Implementing Pointee Template Struct in C++\nDESCRIPTION: Template struct definition that determines the element type of dereferenceable objects. Requires that *x is well-formed for objects of type Dereferenceable.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/pointee_ref.rst#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <class Dereferenceable>\nstruct pointee\n{\n    typedef /* see below */ type;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Image Write Info Structure for Custom Format\nDESCRIPTION: Template specialization that defines the structure for holding write information specific to the new format. Contains all information necessary for writing an image in the custom format.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/io.rst#2025-04-22_snippet_11\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate<> struct image_write_info< xxx_tag > {};\n```\n\n----------------------------------------\n\nTITLE: Example of Using Sorted R-MAT Generator in C++\nDESCRIPTION: This C++ code demonstrates how to use the `sorted_rmat_iterator` to create a `compressed_sparse_row_graph`.  It includes necessary headers, defines a graph type, and instantiates a random number generator.  The graph is then constructed using two `sorted_rmat_iterator` instances, one to begin edge generation and another as the end iterator, along with the number of vertices.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/sorted_rmat_generator.rst#2025-04-22_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\n  #include <boost/graph/compressed_sparse_row_graph.hpp>\n  #include <boost/graph/rmat_graph_generator.hpp>\n  #include <boost/random/linear_congruential.hpp>\n\n  typedef boost::compressed_sparse_row_graph<> Graph;\n  typedef boost::sorted_rmat_iterator<boost::minstd_rand, Graph> \n    RMATGen;\n\n  int main()\n  {\n    boost::minstd_rand gen;\n    // Create graph with 100 nodes and 400 edges \n    Graph g(RMATGen(gen, 100, 400, 0.57, 0.19, 0.19, 0.05), \n            RMATGen(), 100);\n    return 0;\n  }\n```\n\n----------------------------------------\n\nTITLE: Defining decoration template class in C++\nDESCRIPTION: Implementation of the decoration template class which stores a decorator and the data to be passed to it. It provides a function call operator that creates a decorator_invoke object when a function is provided.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/decorate.hpp.txt#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<class D, class T>\nstruct decoration\n: compressed_pair<D, T>\n{\n    typedef compressed_pair<D, T> base;\n    BOOST_HOF_INHERIT_CONSTRUCTOR(decoration, base)\n\n    template<class... Ts>\n    constexpr const D& get_decorator(Ts&&... xs) const noexcept\n    {\n        return this->first(xs...);\n    }\n\n    template<class... Ts>\n    constexpr const T& get_data(Ts&&... xs) const noexcept\n    {\n        return this->second(xs...);\n    }\n\n    template<class F>\n    constexpr decorator_invoke<D, T, detail::callable_base<F>> operator()(F f) const\n    BOOST_HOF_NOEXCEPT(BOOST_HOF_IS_NOTHROW_CONSTRUCTIBLE(decorator_invoke<D, T, detail::callable_base<F>>, compressed_pair<D, T>, detail::callable_base<F>&&))\n    {\n        return decorator_invoke<D, T, detail::callable_base<F>>(\n            *this, static_cast<detail::callable_base<F>&&>(f)\n        );\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Nth Channel View using Boost GIL\nDESCRIPTION: This template function generates a view of a specific color channel from an image view, allowing access to individual channels for processing independently. This is useful for image analysis and manipulation tasks.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/image_view.rst.txt#2025-04-22_snippet_16\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <typename View>\nnth_channel_view_type<View>::view_t nth_channel_view(const View& view, int n);\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Unique R-MAT Graph Generator in C++\nDESCRIPTION: This C++ code provides an example of how to use the `unique_rmat_iterator` to create a graph with 100 nodes and 400 edges. It demonstrates the integration of the Boost library for defining and using graph generator iterators.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/unique_rmat_generator.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/graph/adjacency_list.hpp>\n  #include <boost/graph/rmat_graph_generator.hpp>\n  #include <boost/random/linear_congruential.hpp>\n\n  typedef boost::adjacency_list<> Graph;\n  typedef boost::unique_rmat_iterator<boost::minstd_rand, Graph> RMATGen;\n\n  int main()\n  {\n    boost::minstd_rand gen;\n    // Create graph with 100 nodes and 400 edges \n    Graph g(RMATGen(gen, 100, 400, 0.57, 0.19, 0.19, 0.05,), \n            RMATGen(), 100);\n    return 0;\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring ArangoShell Dependencies and Installation\nDESCRIPTION: Sets up dependencies, linking, and installation rules for the ArangoShell executable, including ICU data files and configuration.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/client-tools/Shell/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n  target_include_directories(${BIN_ARANGOSH} PRIVATE ${PROJECT_SOURCE_DIR}/client-tools)\n\n  target_link_libraries(${BIN_ARANGOSH}\n    arango_v8\n    arango_basic_http_client\n    ${V8_LIBS}\n    fuerte\n    ${SYSTEM_LIBRARIES}\n    boost_system\n    boost_boost\n    arango_shell\n    arangoimport_utils\n    clienttools_utils\n  )\n\n  install(FILES ${ICU_DT}\n    DESTINATION \"${INSTALL_ICU_DT_DEST}\"\n    RENAME ${ICU_DT_DEST})\n\n  install(\n    TARGETS ${BIN_ARANGOSH}\n    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR})\n\n  install_config(${BIN_ARANGOSH})\n```\n\n----------------------------------------\n\nTITLE: Declaring Unpack Static Variable in C++\nDESCRIPTION: Declares a static variable named 'unpack' using the BOOST_HOF_DECLARE_STATIC_VAR macro, which creates an instance of the unpack_adaptor.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/unpack.hpp.txt#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_HOF_DECLARE_STATIC_VAR(unpack, detail::make<unpack_adaptor>);\n```\n\n----------------------------------------\n\nTITLE: Building Specific Targets with CMake\nDESCRIPTION: This command builds specific targets within the ArangoDB project. Replace the listed targets with the ones you want to build.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/CONTRIBUTING.md#2025-04-22_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\ncmake --build --preset community --target arangod arangosh arangodump arangorestore arangoimport arangoexport arangobench arangovpack frontend\n```\n\n----------------------------------------\n\nTITLE: Using std::unique_ptr with Pointer Containers in C++\nDESCRIPTION: Demonstrates how to use std::unique_ptr with pointer containers. This example shows how to move ownership from a unique_ptr to the container using std::move.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/tutorial.rst#2025-04-22_snippet_13\n\nLANGUAGE: cpp\nCODE:\n```\nstd::unique_ptr<Derived> p( new Derived );\nvec.push_back( std::move( p ) );\n```\n\n----------------------------------------\n\nTITLE: Defining counting_iterator Class Template in C++\nDESCRIPTION: Declaration of the counting_iterator class template with template parameters for Incrementable type, category/traversal, and difference type. Includes member type definitions and function declarations.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/counting_iterator_ref.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <\n    class Incrementable\n  , class CategoryOrTraversal = use_default\n  , class Difference = use_default\n>\nclass counting_iterator\n{\npublic:\n    typedef Incrementable value_type;\n    typedef const Incrementable& reference;\n    typedef const Incrementable* pointer;\n    typedef /* see below */ difference_type;\n    typedef /* see below */ iterator_category;\n\n    counting_iterator();\n    counting_iterator(counting_iterator const& rhs);\n    explicit counting_iterator(Incrementable x);\n    Incrementable const& base() const;\n    reference operator*() const;\n    counting_iterator& operator++();\n    counting_iterator& operator--();\nprivate:\n    Incrementable m_inc; // exposition\n};\n```\n\n----------------------------------------\n\nTITLE: Cluster Test Suite Configuration\nDESCRIPTION: Configuration for cluster-based test scenarios including chaos, restart, and load balancing tests\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/test-definitions.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchaos cluster !coverage !full -- --dumpAgencyOnError true parallelity=8\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost ASIO Library with CMake\nDESCRIPTION: Sets up the Boost ASIO library project using CMake. It defines the project, creates an interface library, sets include directories, and specifies dependencies on other Boost libraries. Also includes optional testing configuration.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/asio/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.16)\n\nproject(boost_asio VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n\nadd_library(boost_asio INTERFACE)\nadd_library(Boost::asio ALIAS boost_asio)\n\ntarget_include_directories(boost_asio INTERFACE include)\n\ntarget_link_libraries(boost_asio\n  INTERFACE\n    Boost::align\n    Boost::array\n    Boost::assert\n    Boost::bind\n    Boost::chrono\n    Boost::config\n    Boost::core\n    Boost::coroutine\n    Boost::date_time\n    Boost::function\n    Boost::regex\n    Boost::smart_ptr\n    Boost::system\n    Boost::throw_exception\n    Boost::type_traits\n    Boost::utility\n)\n\nif(BUILD_TESTING AND EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/test/CMakeLists.txt\")\n\n  add_subdirectory(test)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Random Access ND Image View Concept in C++\nDESCRIPTION: This snippet defines a concept for a random access N-dimensional image view in C++. It introduces types and methods necessary for image views like pixel type, reference, and iterators. The concept supports operations such as accessing dimensions, size, and elements through iterators. Requires adherence to the related RandomAccessNDImageViewConcept.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/image_view.rst#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nconcept RandomAccessNDImageViewConcept<Regular View>\n{\n  typename value_type;      // for pixel-based views, the pixel type\n  typename reference;       // result of dereferencing\n  typename difference_type; // result of operator-(iterator,iterator) (1-dimensional!)\n  typename const_t;  where RandomAccessNDImageViewConcept<View>; // same as View, but over immutable values\n  typename point_t;  where PointNDConcept<point_t>; // N-dimensional point\n  typename locator;  where RandomAccessNDLocatorConcept<locator>; // N-dimensional locator.\n  typename iterator; where RandomAccessTraversalConcept<iterator>; // 1-dimensional iterator over all values\n  typename reverse_iterator; where RandomAccessTraversalConcept<reverse_iterator>;\n  typename size_type;       // the return value of size()\n\n  // Equivalent to RandomAccessNDLocatorConcept::axis\n  template <size_t D> struct axis {\n      typename coord_t = point_t::axis<D>::coord_t;\n      typename iterator; where RandomAccessTraversalConcept<iterator>;   // iterator along D-th axis.\n      where SameType<coord_t, iterator::difference_type>;\n      where SameType<iterator::value_type,value_type>;\n  };\n\n  // Defines the type of a view similar to this type, except it invokes Deref upon dereferencing\n  template <PixelDereferenceAdaptorConcept Deref> struct add_deref {\n      typename type;        where RandomAccessNDImageViewConcept<type>;\n      static type make(const View& v, const Deref& deref);\n  };\n\n  static const size_t num_dimensions = point_t::num_dimensions;\n\n  // Create from a locator at the top-left corner and dimensions\n  View::View(const locator&, const point_type&);\n\n  size_type        View::size()       const; // total number of elements\n  reference        operator[](View, const difference_type&) const; // 1-dimensional reference\n  iterator         View::begin()      const;\n  iterator         View::end()        const;\n  reverse_iterator View::rbegin()     const;\n  reverse_iterator View::rend()       const;\n  iterator         View::at(const point_t&);\n  point_t          View::dimensions() const; // number of elements along each dimension\n  bool             View::is_1d_traversable() const;   // Does an iterator over the first dimension visit each value?\n\n  // iterator along a given dimension starting at a given point\n  template <size_t D> View::axis<D>::iterator View::axis_iterator(const point_t&) const;\n\n  reference operator()(View,const point_t&) const;\n};\n```\n\n----------------------------------------\n\nTITLE: Starting React Development Server\nDESCRIPTION: Runs the React application in development mode on localhost:3000 with hot reload functionality and lint error reporting.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/js/apps/system/_admin/aardvark/APP/react/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost Beast Websocket SSL Client in CMake\nDESCRIPTION: A CMake configuration block that creates an executable for a websocket client with SSL support using coroutines. The configuration groups source files, adds the executable with necessary dependencies, sets folder properties, and links against OpenSSL and Boost libraries.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/beast/example/websocket/client/coro-ssl/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif (OPENSSL_FOUND)\n    GroupSources(include/boost/beast beast)\n    GroupSources(example/common common)\n    GroupSources(example/websocket/client/coro-ssl \"/\")\n\n    add_executable (websocket-client-coro-ssl\n        ${BOOST_BEAST_FILES}\n        ${PROJECT_SOURCE_DIR}/example/common/root_certificates.hpp\n        Jamfile\n        websocket_client_coro_ssl.cpp\n    )\n\n    set_property(TARGET websocket-client-coro-ssl PROPERTY FOLDER \"example-websocket-client\")\n\n    target_link_libraries (websocket-client-coro-ssl\n        OpenSSL::SSL OpenSSL::Crypto\n        lib-asio\n        lib-asio-ssl\n        lib-beast\n        )\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Multi-Stream Translation Example in C++\nDESCRIPTION: Example showing how to handle message translation across multiple output streams with different locales.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/doc/messages_formatting.txt#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\n// Several output stream that we write a message to\n// English, Japanese, Hebrew etc.\n// Each one them has installed std::locale object that represents\n// their specific locale\nstd::ofstream en,ja,he,de,ar;\n\n// Send single message to multiple streams\nvoid send_to_all(message const &msg)\n{\n    // in each of the cases below\n    // the message is translated to different\n    // language\n    en << msg;\n    ja << msg;\n    he << msg;\n    de << msg;\n    ar << msg;\n}\n\nint main()\n{\n    ...\n    send_to_all(translate(\"Hello World\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Decay Function Object in C++\nDESCRIPTION: The actual implementation of the decay function object that decays and forwards its argument. It uses SFINAE to ensure the decayed type is constructible from the argument.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/decay.hpp.txt#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nstruct decay_f\n{\n    template<\n        class T, \n        class Result=typename unwrap_reference<typename std::decay<T>::type>::type, \n        class=typename std::enable_if<(BOOST_HOF_IS_CONSTRUCTIBLE(Result, T))>::type\n    >\n    constexpr Result operator()(T&& x) const BOOST_HOF_NOEXCEPT_CONSTRUCTIBLE(Result, T&&)\n    {\n        return BOOST_HOF_FORWARD(T)(x);\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Declaring Static Constructor Hook for basic_outcome in C++\nDESCRIPTION: Static member function declaration for a constructor hook that is invoked during converting copy construction of basic_outcome objects. The function is noexcept and takes a pointer to type T and an rvalue reference to type U as parameters.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/policies/base/on_outcome_copy_construction.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nstatic void on_outcome_copy_construction(T *, U &&) noexcept\n```\n\n----------------------------------------\n\nTITLE: Image Rescaling Example - resize.cpp\nDESCRIPTION: This example demonstrates rescaling an image using bilinear sampling with Boost GIL and the optional Numeric extension. It showcases an image processing operation requiring external dependencies.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/index.rst#2025-04-22_snippet_6\n\nLANGUAGE: C++\nCODE:\n```\n* :download:`resize.cpp <../example/resize.cpp>`:\n  Rescaling an image using bilinear sampling (requires the optional\n  Numeric extension)\n```\n\n----------------------------------------\n\nTITLE: Using Partial Application and Function Composition in C++\nDESCRIPTION: Shows how to use partial application and function composition adaptors from Boost.HigherOrderFunctions. These functional programming techniques allow creating new functions from existing ones.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/doc/src/gettingstarted.md.txt#2025-04-22_snippet_9\n\nLANGUAGE: cpp\nCODE:\n```\nauto add_1 = partial(sum)(1);\nauto add_2 = compose(add_1, add_1);\nauto three = add_2(1);\n```\n\n----------------------------------------\n\nTITLE: Strong Components Function Declaration in C++\nDESCRIPTION: This function computes the strongly connected components of a directed graph and assigns each component an integer label using a distributed property map. It requires a graph type that models the Distributed Graph and Incidence Graph concepts. The function returns the number of strongly-connected components in the graph.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/strong_components.rst#2025-04-22_snippet_0\n\nLANGUAGE: c++\nCODE:\n```\n\"  template<typename Graph, typename ComponentMap>\n  inline typename property_traits<ComponentMap>::value_type\n  strong_components( const Graph& g, ComponentMap c);\"\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Null Pointer Handling in Boost Containers\nDESCRIPTION: Shows how pointer containers handle null pointer insertions by throwing bad_ptr exceptions to prevent null pointer storage.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/examples.rst#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nmy_container.push_back( 0 );            // throws bad_ptr \nmy_container.replace( an_iterator, 0 ); // throws bad_ptr\nmy_container.insert( an_iterator, 0 );  // throws bad_ptr       \nstd::auto_ptr<T> p( 0 );\nmy_container.push_back( p );            // throws bad_ptr\n```\n\n----------------------------------------\n\nTITLE: Character Array Processing with Boost Indirect Iterator\nDESCRIPTION: Demonstrates three different approaches to using indirect iterators: basic usage with character pointers, mutable/constant iterator transformation, and using make_indirect_iterator helper function. Shows how to traverse and modify data through pointer indirection.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/indirect_iterator_eg.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nchar characters[] = \"abcdefg\";\nconst int N = sizeof(characters)/sizeof(char) - 1; // -1 since characters has a null char\nchar* pointers_to_chars[N];                        // at the end.\nfor (int i = 0; i < N; ++i)\n  pointers_to_chars[i] = &characters[i];\n\n// Example of using indirect_iterator\n\nboost::indirect_iterator<char**, char>\n  indirect_first(pointers_to_chars), indirect_last(pointers_to_chars + N);\n\nstd::copy(indirect_first, indirect_last, std::ostream_iterator<char>(std::cout, \",\"));\nstd::cout << std::endl;\n\n\n// Example of making mutable and constant indirect iterators\n\nchar mutable_characters[N];\nchar* pointers_to_mutable_chars[N];\nfor (int j = 0; j < N; ++j)\n  pointers_to_mutable_chars[j] = &mutable_characters[j];\n\nboost::indirect_iterator<char* const*> mutable_indirect_first(pointers_to_mutable_chars),\n  mutable_indirect_last(pointers_to_mutable_chars + N);\nboost::indirect_iterator<char* const*, char const> const_indirect_first(pointers_to_chars),\n  const_indirect_last(pointers_to_chars + N);\n\nstd::transform(const_indirect_first, const_indirect_last,\n\t\t   mutable_indirect_first, std::bind1st(std::plus<char>(), 1));\n\nstd::copy(mutable_indirect_first, mutable_indirect_last,\n\t      std::ostream_iterator<char>(std::cout, \",\"));\nstd::cout << std::endl;\n\n\n// Example of using make_indirect_iterator()\n\nstd::copy(boost::make_indirect_iterator(pointers_to_chars), \n\t      boost::make_indirect_iterator(pointers_to_chars + N),\n\t      std::ostream_iterator<char>(std::cout, \",\"));\nstd::cout << std::endl;\n```\n\n----------------------------------------\n\nTITLE: Random Access 2D Image Concept Definition in GIL\nDESCRIPTION: This concept refines the RandomAccessNDImageConcept for two-dimensional images. It introduces types for x and y coordinates and provides constructors for initializing images with width, height, and fill values. It also includes functions for getting width and height, and recreating the image with new dimensions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/image.rst#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\n concept RandomAccess2DImageConcept<RandomAccessNDImageConcept Img>\n  {\n    typename x_coord_t = const_view_t::x_coord_t;\n    typename y_coord_t = const_view_t::y_coord_t;\n\n    Img::Img(x_coord_t width, y_coord_t height, std::size_t alignment=0);\n    Img::Img(x_coord_t width, y_coord_t height, value_type fill_value, std::size_t alignment);\n\n    x_coord_t Img::width() const;\n    y_coord_t Img::height() const;\n\n    void Img::recreate(x_coord_t width, y_coord_t height, std::size_t alignment=1);\n    void Img::recreate(x_coord_t width, y_coord_t height, value_type fill_value, std::size_t alignment);\n  };\n```\n\n----------------------------------------\n\nTITLE: Defining RandomAccess2DLocatorConcept in C++\nDESCRIPTION: This C++ concept refines the RandomAccessNDLocatorConcept for two-dimensional locators. It introduces specific types and methods related to X and Y axis navigation, including iterators, coordinate types, and functions for accessing and manipulating pixel data at specific coordinates.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/pixel_locator.rst.txt#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\n\"concept RandomAccess2DLocatorConcept<RandomAccessNDLocatorConcept Loc>\\n  {\\n    where num_dimensions==2;\\n    where Point2DConcept<point_t>;\\n\\n    typename x_iterator = axis<0>::iterator;\\n    typename y_iterator = axis<1>::iterator;\\n    typename x_coord_t  = axis<0>::coord_t;\\n    typename y_coord_t  = axis<1>::coord_t;\\n\\n    // Only available to locators that have dynamic step in Y\\n    //Loc::Loc(const Loc& loc, y_coord_t);\\n\\n    // Only available to locators that have dynamic step in X and Y\\n    //Loc::Loc(const Loc& loc, x_coord_t, y_coord_t, bool transposed=false);\\n\\n    x_iterator&       Loc::x();\\n    x_iterator const& Loc::x() const;\\n    y_iterator&       Loc::y();\\n    y_iterator const& Loc::y() const;\\n\\n    x_iterator Loc::x_at(const difference_type&) const;\\n    y_iterator Loc::y_at(const difference_type&) const;\\n    Loc Loc::xy_at(const difference_type&) const;\\n\\n    // x/y versions of all methods that can take difference type\\n    x_iterator        Loc::x_at(x_coord_t, y_coord_t) const;\\n    y_iterator        Loc::y_at(x_coord_t, y_coord_t) const;\\n    Loc               Loc::xy_at(x_coord_t, y_coord_t) const;\\n    reference         operator()(const Loc&, x_coord_t, y_coord_t);\\n    cached_location_t Loc::cache_location(x_coord_t, y_coord_t) const;\\n\\n    bool      Loc::is_1d_traversable(x_coord_t width) const;\\n    y_coord_t Loc::y_distance_to(const Loc& loc2, x_coord_t x_diff) const;\\n  };\"\n```\n\n----------------------------------------\n\nTITLE: Creating NumPy ndarray from 1D Integer Array in C++\nDESCRIPTION: Creates a NumPy ndarray from a C++ integer array by specifying the data, data type, shape, stride, and ownership information. This demonstrates the basic usage of np::from_data to convert a simple 1D array.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/doc/html/numpy/_sources/reference/ndarray.rst.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nint data[] = {1,2,3,4} ;\np::tuple shape = p::make_tuple(4) ;\np::tuple stride = p::make_tuple(4) ; \np::object own ;\nnp::ndarray data_ex = np::from_data(data,dt,shape,stride,own);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating upper_bound usage in C++\nDESCRIPTION: Example showing how to use the upper_bound algorithm on a vector of integers to find the upper bound of value 3. It also demonstrates how to verify the result using assertions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/upper_bound.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ntypedef vector_c<int,1,2,3,3,3,5,8> numbers;\ntypedef upper_bound< numbers, int_<3> >::type iter;\n\nBOOST_MPL_ASSERT_RELATION(\n      (distance< begin<numbers>::type,iter >::value), ==, 5\n    );\n\nBOOST_MPL_ASSERT_RELATION( deref<iter>::type::value, ==, 5 );\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Abort Policy in C++\nDESCRIPTION: This code snippet defines a custom no-value policy named `abort_policy`.  This policy inherits from `base` and overrides the `no_value` and `no_error` methods to call `std::abort()`. This will terminate the program if `.value()` or `.error()` is called on a `basic_outcome` or `basic_result` that does not contain a value or error, respectively.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/tutorial/essential/no-value/custom.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nnamespace OUTCOME_V2_NAMESPACE\n{\n  template <typename T>\n  struct abort_policy : public base\n  {\n    template <class Traits, class ValueType, class ErrorType, class Policy>\n    static constexpr void no_value(basic_result<ValueType, ErrorType, Policy> const &res)\n    {\n      std::abort();\n    }\n    template <class Traits, class ValueType, class ErrorType, class Policy>\n    static constexpr void no_error(basic_outcome<ValueType, ErrorType, Policy> const &res)\n    {\n      std::abort();\n    }\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Value Type Template Declaration\nDESCRIPTION: Template metafunction declaration that determines the value type for an element X in a Sequence. Returns an unspecified type that represents the value associated with the element.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/value_type.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n    typename Sequence\n    , typename X\n    >\nstruct value_type\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing Error Reference in C++\nDESCRIPTION: Method signature for retrieving a reference to the stored error value. Implements wide contract with NoValuePolicy error checking and guaranteed valid default constructed error state. Special handling for void error_type with const-only overload.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/basic_result/error_lvalue.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nerror_type &error() &\n```\n\n----------------------------------------\n\nTITLE: Defining a Map with Boost MPL in C++\nDESCRIPTION: This code snippet defines a map using the Boost MPL library, consisting of pairs of types. It utilizes typedef to create a map with predefined key-value pairs. Dependencies include the Boost MPL map library header. This map supports various associative sequence operations.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/map.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntypedef map<\n      pair<int,unsigned>\n    , pair<char,unsigned char>\n    , pair<long_<5>,char[17]>\n    , pair<int[42],bool>\n    > m;\n\nBOOST_MPL_ASSERT_RELATION( size<m>::value, ==, 4 );\nBOOST_MPL_ASSERT_NOT(( empty<m> ));\n\nBOOST_MPL_ASSERT(( is_same< at<m,int>::type, unsigned > ));\nBOOST_MPL_ASSERT(( is_same< at<m,long_<5> >::type, char[17] > ));\nBOOST_MPL_ASSERT(( is_same< at<m,int[42]>::type, bool > ));\nBOOST_MPL_ASSERT(( is_same< at<m,long>::type, void\\_ > ));\n```\n\n----------------------------------------\n\nTITLE: Git Version Detection Function in CMake\nDESCRIPTION: CMake function to determine repository version information. Extracts git commit hash and branch/tag information based on build mode (default, release, or nightly).\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(determine_repository_version source_dir build_repository have_build_repository)\n  # Get commit hash \n  execute_process(\n    WORKING_DIRECTORY ${source_dir}\n    COMMAND ${GIT_EXE} rev-parse --short HEAD\n    OUTPUT_VARIABLE COMMIT_RAW\n  )\n  if(NOT COMMIT_RAW)\n    message(FATAL_ERROR \"Can't extract current commit with the command: 'git rev-parse --short HEAD'\")\n  endif()\n\n  string(STRIP ${COMMIT_RAW} COMMIT_SHORT)\n\n  if(NOT DEFINED BUILD_REPO_INFO OR BUILD_REPO_INFO STREQUAL \"default\")\n    execute_process(\n      WORKING_DIRECTORY ${source_dir}\n      COMMAND ${GIT_EXE} branch --show-current\n      OUTPUT_VARIABLE BRANCH_NAME_RAW)\n    if(NOT BRANCH_NAME_RAW)\n      # For example, in docker we do 'checkout'. Hence, it is impossible to detect branch\n      set(${build_repository} \"${COMMIT_SHORT}\" PARENT_SCOPE)\n      set(${have_build_repository} \"1\" PARENT_SCOPE)\n    else()\n      string(STRIP ${BRANCH_NAME_RAW} BRANCH_NAME)\n      set(${build_repository} \"refs/${BRANCH_NAME} ${COMMIT_SHORT}\" PARENT_SCOPE)\n      set(${have_build_repository} \"1\" PARENT_SCOPE)\n    endif()\n  elseif(BUILD_REPO_INFO STREQUAL \"release\")\n    if(\"${ARANGODB_VERSION_RELEASE_NUMBER}\" STREQUAL \"\" AND ARANGODB_VERSION_RELEASE_TYPE MATCHES \"^[1-9][0-9]*$\")\n      string(REPLACE \"-\" \".\" RELEASE_TAG ${ARANGODB_VERSION})\n    else()\n      set(RELEASE_TAG ${ARANGODB_VERSION})\n    endif()\n    set(RELEASE_TAG \"v${RELEASE_TAG}\")\n    execute_process(\n      WORKING_DIRECTORY ${source_dir}\n      COMMAND ${GIT_EXE} describe --all --tags --match ${RELEASE_TAG}\n      OUTPUT_VARIABLE TAG_RAW)\n    if(NOT TAG_RAW)\n      message(FATAL_ERROR \"Can't extract tag using the command: 'git describe --all --tags --match v${ARANGODB_PLAIN_VERSION}\")\n    else()\n      string(STRIP ${TAG_RAW} TAG)\n      set(${build_repository} \"refs/${TAG} ${COMMIT_SHORT}\" PARENT_SCOPE)\n      set(${have_build_repository} \"1\" PARENT_SCOPE)\n    endif()\n  elseif(BUILD_REPO_INFO STREQUAL \"nightly\")\n    set(${build_repository} \"refs/head/${ARANGODB_VERSION_MAJOR}.${ARANGODB_VERSION_MINOR} ${COMMIT_SHORT}\" PARENT_SCOPE)\n    set(${have_build_repository} \"1\" PARENT_SCOPE)\n  else()\n    set(${build_repository} \"GIT FAILED TO RETRIEVE THE VERSION - UNSUPPORTED BUILD MODE\" PARENT_SCOPE)\n    set(${have_build_repository} \"1\" PARENT_SCOPE)\n  endif()\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Defining Copy Assignment Operator for basic_result in C++\nDESCRIPTION: This snippet defines the copy assignment operator for the basic_result class, ensuring that both value_type and error_type properly implement copy assignment. It maintains the contracts of noexcept and triviality, and propagates the properties of underlying operations.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/basic_result/copy_assignment.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nconstexpr basic_result &operator=(const basic_result &other) {\n    // Check if the assignment is to self\n    if (this != &other) {\n        // Copy assignment for value_type\n        if constexpr (has_copy_assignment<value_type>::value) {\n            value = other.value;\n        } else {\n            // Handle copy constructor or destruct\n            value = value_type(other.value);\n        }\n        // Always use error_type's copy assignment\n        error = other.error;\n    }\n    return *this;\n}\n```\n\n----------------------------------------\n\nTITLE: Single Element Ownership Transfer\nDESCRIPTION: Shows how to transfer ownership of individual elements using auto_type and container operations.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/examples.rst#2025-04-22_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\nptr_deque<T>                    deq; \ntypedef ptr_deque<T>::auto_type auto_type;\n\n// ... fill the container somehow\n\nauto_type ptr  = deq.pop_back();                 // remove back element from container and give up ownership\nauto_type ptr2 = deq.release( deq.begin() + 2 ); // use an iterator to determine the element to release\nptr            = deq.pop_front();                // supported for 'ptr_list' and 'ptr_deque'\n                                        \ndeq.push_back( ptr.release() );                  // give ownership back to the container\n```\n\n----------------------------------------\n\nTITLE: Custom Completion Token Wrapper for Outcome Integration\nDESCRIPTION: Implementation of a type wrapper and factory function to adapt Outcome to ASIO completion tokens, enabling result<T> return values.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/recipes/asio-integration.md#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\n// Type sugar for wrapping a CompletionToken with this adaptor\ntemplate <typename CompletionToken>\nstruct as_result_t\n{\n  CompletionToken token;\n};\n\n// Factory function for creating an instance, deducing the type of the token\ntemplate <typename CompletionToken>\nconst as_result_t<std::decay_t<CompletionToken>> as_result(CompletionToken &&token)\n{\n  return {std::forward<CompletionToken>(token)};\n}\n```\n\n----------------------------------------\n\nTITLE: Analyzing Sentence Boundaries with Rules in C++ using Boost.Locale\nDESCRIPTION: Demonstrates how to use boundary rules to analyze sentence boundaries in a text. It creates a sentence boundary index and iterates over boundary points, checking for sentence terminators and separators.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/doc/boundary_analysys.txt#2025-04-22_snippet_6\n\nLANGUAGE: C++\nCODE:\n```\nusing namespace boost::locale::boundary;\nboost::locale::generator gen;\n// our text sample\nstd::string const text= \"First sentence. Second\\n\"\n                        \"sentence! Third one?\";\nsboundary_point_index map(sentence,text.begin(),text.end(),gen(\"en_US.UTF-8\"));\n\nfor(sboundary_point_index::iterator p = map.begin(),e=map.end();p!=e;++p) {\n    if(p->rule() & sentence_term)\n        std::cout << \"There is a sentence terminator: \";\n    else if(p->rule() & sentence_sep)\n        std::cout << \"There is a sentence separator: \";\n    if(p->rule()!=0) // print if some rule exists\n        std::cout   << \"[\" << std::string(text.begin(),p->iterator()) \n                    << \"|\" << std::string(p->iterator(),text.end()) \n                    << \"]\\n\";\n}\n```\n\n----------------------------------------\n\nTITLE: Building LZ4 Command-Line Programs\nDESCRIPTION: Creates executable targets for the LZ4 command-line interface programs. Includes conditional compilation of the legacy lz4c program with specific compile definitions. Each program is linked with the appropriate library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/lz4/build/cmake/CMakeLists.txt#2025-04-22_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\n# lz4\nif (LZ4_BUILD_CLI)\n  set(LZ4_PROGRAMS_BUILT lz4cli)\n  add_executable(lz4cli ${LZ4_CLI_SOURCES})\n  set_target_properties(lz4cli PROPERTIES OUTPUT_NAME lz4)\n  target_link_libraries(lz4cli ${LZ4_LINK_LIBRARY})\nendif()\n\n# lz4c\nif (LZ4_BUILD_LEGACY_LZ4C)\n  list(APPEND LZ4_PROGRAMS_BUILT lz4c)\n  add_executable(lz4c ${LZ4_CLI_SOURCES})\n  set_target_properties(lz4c PROPERTIES COMPILE_DEFINITIONS \"ENABLE_LZ4C_LEGACY_OPTIONS\")\n  target_link_libraries(lz4c ${LZ4_LINK_LIBRARY})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost Graph Library with CMake\nDESCRIPTION: This snippet configures the Boost Graph Library using CMake. It defines the minimum CMake version, the project name, sources, and specifies public and private dependencies, include directories, and compile definitions based on whether shared or static libraries are to be built. It also includes a conditional check for adding test directories.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.16)\n\nproject(boost_graph VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n\nadd_library(boost_graph\n  src/graphml.cpp\n  src/read_graphviz_new.cpp\n)\n\nadd_library(Boost::graph ALIAS boost_graph)\n\ntarget_include_directories(boost_graph PUBLIC include)\n\ntarget_link_libraries(boost_graph\n  PUBLIC\n    Boost::algorithm\n    Boost::any\n    Boost::array\n    Boost::assert\n    Boost::bimap\n    Boost::bind\n    Boost::concept_check\n    Boost::config\n    Boost::container_hash\n    Boost::conversion\n    Boost::core\n    Boost::detail\n    Boost::foreach\n    Boost::function\n    Boost::integer\n    Boost::iterator\n    Boost::lexical_cast\n    Boost::math\n    Boost::move\n    Boost::mpl\n    Boost::multi_index\n    Boost::optional\n    Boost::parameter\n    Boost::preprocessor\n    Boost::property_map\n    Boost::property_tree\n    Boost::random\n    Boost::range\n    Boost::serialization\n    Boost::smart_ptr\n    Boost::spirit\n    Boost::static_assert\n    Boost::throw_exception\n    Boost::tti\n    Boost::tuple\n    Boost::type_traits\n    Boost::typeof\n    Boost::unordered\n    Boost::utility\n    Boost::xpressive\n  PRIVATE\n    Boost::regex\n)\n\ntarget_compile_definitions(boost_graph\n  PUBLIC BOOST_GRAPH_NO_LIB\n  # Source files already define BOOST_GRAPH_SOURCE\n  # PRIVATE BOOST_GRAPH_SOURCE\n)\n\nif(BUILD_SHARED_LIBS)\n  target_compile_definitions(boost_graph PUBLIC BOOST_GRAPH_DYN_LINK)\nelse()\n  target_compile_definitions(boost_graph PUBLIC BOOST_GRAPH_STATIC_LINK)\nendif()\n\nif(BUILD_TESTING AND EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/test/CMakeLists.txt\")\n\n  add_subdirectory(test)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Implementing apply_eval Function Template with Ordered Evaluation\nDESCRIPTION: Defines the apply_eval function that applies a function to arguments after evaluating each one in left-to-right order. It includes specialized implementations for both non-void and void return types, with conditional compilation based on ordered brace initialization support.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/apply_eval.hpp.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nstruct apply_eval_f\n{\n    template<class F, class... Ts, class R=decltype(\n        boost::hof::apply(std::declval<const F&>(), boost::hof::eval(std::declval<Ts>())...)\n    ),\n    class=typename std::enable_if<(!std::is_void<R>::value)>::type \n    >\n    constexpr R operator()(const F& f, Ts&&... xs) const BOOST_HOF_RETURNS_DEDUCE_NOEXCEPT(boost::hof::apply(f, boost::hof::eval(BOOST_HOF_FORWARD(Ts)(xs))...))\n    {\n        return\n#if BOOST_HOF_NO_ORDERED_BRACE_INIT\n        boost::hof::detail::eval_ordered<R>\n            (f, boost::hof::pack(), BOOST_HOF_FORWARD(Ts)(xs)...);\n#else\n        boost::hof::detail::eval_helper<R>\n            {f, boost::hof::eval(BOOST_HOF_FORWARD(Ts)(xs))...}.result;\n#endif\n    }\n\n    template<class F, class... Ts, class R=decltype(\n        boost::hof::apply(std::declval<const F&>(), boost::hof::eval(std::declval<Ts>())...)\n    ),\n    class=typename std::enable_if<(std::is_void<R>::value)>::type \n    >\n    constexpr typename detail::holder<Ts...>::type \n    operator()(const F& f, Ts&&... xs) const BOOST_HOF_RETURNS_DEDUCE_NOEXCEPT(boost::hof::apply(f, boost::hof::eval(BOOST_HOF_FORWARD(Ts)(xs))...))\n    {\n        return (typename detail::holder<Ts...>::type)\n#if BOOST_HOF_NO_ORDERED_BRACE_INIT\n        boost::hof::detail::eval_ordered<R>\n            (f, boost::hof::pack(), BOOST_HOF_FORWARD(Ts)(xs)...);\n#else\n        boost::hof::detail::eval_helper<R>\n            {f, boost::hof::eval(BOOST_HOF_FORWARD(Ts)(xs))...};\n#endif\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Trigger Execution Context in C++\nDESCRIPTION: Obtains the current context of trigger invocation for a process group, helping manage message processing states\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/process_group.rst#2025-04-22_snippet_7\n\nLANGUAGE: C++\nCODE:\n```\ntrigger_receive_context trigger_context() const;\n```\n\n----------------------------------------\n\nTITLE: Reading an Image in TIFF Format using Boost.GIL\nDESCRIPTION: This code snippet demonstrates how to read a TIFF image file using the Boost.GIL library. The 'read_image' function is called to load the image data into an 'rgb8_image_t' object, which is compatible with the TIFF format. The function allocates the necessary memory for the image during the read operation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/io.rst.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nstd::string filename( \"image.tif\" );\nrgb8_image_t img;\nread_image( filename, img, tiff_tag() );\n```\n\n----------------------------------------\n\nTITLE: Indirected Interface of Boost Pointer Containers\nDESCRIPTION: This snippet explains the indirect interface feature in boost pointer containers, allowing users to operate directly on objects of stored pointers while abstracting away pointer dereferencing.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/tutorial.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nboost::ptr_vector<animal> vec;\nvec.push_back( new animal ); // you add it as pointer ...\nvec[0].eat();                // but get a reference back\n\ntypedef std::vector<animal*> std_vec;\nstd_vec vec;\nstd_vec::iterator i = vec.begin();\n(*i)->eat(); // '*' needed\n\ntypedef boost::ptr_vector<animal>  ptr_vec;\nptr_vec vec;\nptr_vec::iterator i = vec.begin();\ni->eat(); // no indirection needed\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost Convert Library with CMake\nDESCRIPTION: Configures the Boost Convert library as an interface library with its dependencies and include directories. Sets up version requirements, project configuration, and links required Boost components. Includes conditional test directory inclusion.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/convert/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.16)\n\nproject(boost_convert VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n\nadd_library(boost_convert INTERFACE)\nadd_library(Boost::convert ALIAS boost_convert)\n\ntarget_include_directories(boost_convert INTERFACE include)\n\ntarget_link_libraries(boost_convert\n  INTERFACE\n    Boost::config\n    Boost::core\n    Boost::function_types\n    Boost::lexical_cast\n    Boost::math\n    Boost::mpl\n    Boost::optional\n    Boost::parameter\n    Boost::range\n    Boost::spirit\n    Boost::type_traits\n)\n\nif(BUILD_TESTING AND EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/test/CMakeLists.txt\")\n\n  add_subdirectory(test)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Combining Iterations with Zip Iterator\nDESCRIPTION: Demonstrates how to combine multiple iterations into a single one using boost::make_zip_iterator.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/zip_iterator_eg.rst#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nstd::for_each(\n  boost::make_zip_iterator(\n    boost::make_tuple(beg1, beg2)\n    ),\n  boost::make_zip_iterator(\n    boost::make_tuple(end1, end2)\n    ),\n  zip_func()\n  );\n```\n\n----------------------------------------\n\nTITLE: PointNDConcept Definition in C++\nDESCRIPTION: This C++ code defines the PointNDConcept, a concept representing an N-dimensional point. It specifies the requirements for a type T to be considered a model of this concept, including the existence of an axis type for each dimension and accessors/modifiers for the value of each axis.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/point.rst#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n.. code-block:: cpp\n\n  concept PointNDConcept<typename T> : Regular<T>\n  {\n      // the type of a coordinate along each axis\n      template <size_t K> struct axis; where Metafunction<axis>;\n\n      const size_t num_dimensions;\n\n      // accessor/modifier of the value of each axis.\n      template <size_t K> const typename axis<K>::type& T::axis_value() const;\n      template <size_t K>       typename axis<K>::type& T::axis_value();\n  };\n```\n\n----------------------------------------\n\nTITLE: Using Pipable Functions and Flow Adaptor in C++\nDESCRIPTION: Shows how to use pipable functions with the pipe operator and how to chain functions with the flow adaptor. These provide alternative syntax for function composition.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/doc/src/gettingstarted.md.txt#2025-04-22_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\nauto three = 1 | sum(2);\n\nPipable function can be chained mutliple times just like the `.` operator:\n\nauto four = 1 | sum(2) | sum(1);\n\nAlternatively, instead of using the `|` operator, pipable functions can be chained together using the [`flow`](/include/boost/hof/flow) adaptor:\n\nauto four = flow(sum(2), sum(1))(1); \n```\n\n----------------------------------------\n\nTITLE: Reading Partial Image with Read Settings\nDESCRIPTION: Demonstrates reading a specific sub-area of an image by specifying coordinates and dimensions using image_read_settings.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/io.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nread_image( filename\n            , img\n            , image_read_settings< tiff_tag >( point_t( 0, 0 ), point_t( 50, 50 ) )\n            );\n```\n\n----------------------------------------\n\nTITLE: Calculating Gray Image Histogram with GIL\nDESCRIPTION: In this GIL-based C++ implementation, a histogram is computed for a grayscale image. This template function iterates through image pixels to update the histogram. It removes constraints of specific channel depths or color spaces, thereby offering more flexibility than the traditional C++ method.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/tutorial/histogram.rst.txt#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <typename GrayView, typename R> void grayimage_histogram(GrayView& img, R& hist) { for (typename GrayView::iterator it=img.begin(); it!=img.end(); ++it) ++hist[*it]; }\n```\n\n----------------------------------------\n\nTITLE: Creating ArangoDB Index Static Library\nDESCRIPTION: This CMake command creates a static library named `arango_indexes`. It lists all the C++ source files that will be compiled and linked into this library. The sources include core index files, geo-index implementations, and attribute matching utilities.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/Indexes/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(arango_indexes STATIC\n  Index.cpp\n  IndexFactory.cpp\n  IndexIterator.cpp\n  SimpleAttributeEqualityMatcher.cpp\n  SortedIndexAttributeMatcher.cpp\n  ${PROJECT_SOURCE_DIR}/arangod/GeoIndex/Index.cpp\n  ${PROJECT_SOURCE_DIR}/arangod/GeoIndex/Covering.cpp\n  ${PROJECT_SOURCE_DIR}/arangod/GeoIndex/Near.cpp)\n```\n\n----------------------------------------\n\nTITLE: Creating Postfix Adaptor Factory Function in C++\nDESCRIPTION: Helper function that creates a postfix_adaptor instance with the provided value and function, enabling move semantics and perfect forwarding.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/infix.hpp.txt#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<class T, class F>\nconstexpr postfix_adaptor<T, F> make_postfix_adaptor(T&& x, F f)\nBOOST_HOF_NOEXCEPT_CONSTRUCTIBLE(postfix_adaptor<T, F>, T&&, F&&)\n{\n    return postfix_adaptor<T, F>(BOOST_HOF_FORWARD(T)(x), static_cast<F&&>(f));\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Global Variables in ArangoDB JavaScript Environment\nDESCRIPTION: List of permitted global variables and functions in ArangoDB's JavaScript modules. These include essential system functions for module management and output handling.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/js/GUIDELINES.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Allowed global variables\nrequire\nmodule\n\n// Restricted global functions\nprint\nprintf\nprint_plain\nstart_pretty_print\nstop_pretty_print\nstart_color_print\nstop_color_print\nstart_pager\nstop_pager\n```\n\n----------------------------------------\n\nTITLE: Using erase_if with Pointer Containers in C++\nDESCRIPTION: Shows how to remove elements that satisfy a predicate from a pointer container using the erase_if method.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/tutorial.rst#2025-04-22_snippet_16\n\nLANGUAGE: cpp\nCODE:\n```\nzoo.erase_if( my_predicate() );\n```\n\n----------------------------------------\n\nTITLE: Defining a Const Member Function with Named Parameters in C++\nDESCRIPTION: Example of using BOOST_PARAMETER_CONST_MEMBER_FUNCTION to define a const member function 'call' with required parameters.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/index.rst#2025-04-22_snippet_26\n\nLANGUAGE: C++\nCODE:\n```\nstruct callable2\n{\n    BOOST_PARAMETER_CONST_MEMBER_FUNCTION(\n        (void), call, tag, (required (arg1,(int))(arg2,(int)))\n    )\n    {\n        std::cout << arg1 << \", \" << arg2;\n        std::cout << std::endl;\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Outcome-Enhanced ASIO Coroutines\nDESCRIPTION: Example of using Outcome with ASIO coroutines to return result<T> objects instead of throwing exceptions, providing better error handling.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/recipes/asio-integration.md#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nasio::awaitable<void> MySock::async_read_and_process()\n{\n  asio::experimental::await_token token =\n    co_await asio::experimental::this_coro::token();\n  \n  // Instead of throwing exceptions on failure, co_await returns a\n  // result<T> which you can examine.\n  for(;;)\n  {\n    OUTCOME_TRY(bytes_transferred, co_await skt.async_read_some(buffer(read_buffer_), as_result(token)));\n    process_read_buffer(bytes_transferred);\n    if(!still_reading())\n      break;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Breadth-First Search Function Signature (Non-Named Parameters)\nDESCRIPTION: Defines the function signature for the breadth-first search algorithm using non-named parameters. It accepts a graph, a starting vertex, a buffer, a BFS visitor, and a color map. The algorithm performs a breadth-first traversal of the graph, utilizing the provided components for customization and control.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/breadth_first_search.rst#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\n// non-named parameter version\ntemplate <class Graph, class Buffer, class BFSVisitor, \n          class ColorMap>\nvoid breadth_first_search(const Graph& g, \n   typename graph_traits<Graph>::vertex_descriptor s, \n   Buffer& Q, BFSVisitor vis, ColorMap color);\n```\n\n----------------------------------------\n\nTITLE: Channel Convertible Concept Definition\nDESCRIPTION: Defines the ChannelConvertibleConcept in C++. This concept checks if a source channel is convertible to a destination channel. It requires a function channel_convert that performs the conversion.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/channel.rst#2025-04-22_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\n  template <ChannelConcept Src, ChannelValueConcept Dst>\n  concept ChannelConvertibleConcept\n  {\n      Dst channel_convert(Src);\n  };\n```\n\n----------------------------------------\n\nTITLE: Overloading Equality Operator for Outcome and Failure Type in C++\nDESCRIPTION: This snippet defines an overloaded equality operator for comparing an `outcome` object with a `failure_type`. The comparison utilizes `operator==` on both `error_type` and `A`, as well as on `exception_type` and `B`. The comparison only succeeds if these operators are valid, or if respective types are void. This function is `constexpr` and `noexcept`, contingent upon the underlying operations. No guarantees are provided on the outcome of this operation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/basic_outcome/equality_failure_type.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nbool operator==(const failure_type<A, B> &) const\n```\n\n----------------------------------------\n\nTITLE: Planar Pixel Reference Struct in C++\nDESCRIPTION: Describes the struct for planar pixel references, highlighting its templating over color space and use of canonical channel ordering. It contrasts planar pixel references with interleaved pixels.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/pixel.rst.txt#2025-04-22_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\n// models HomogeneousPixel\\ntemplate <typename ChannelReference, typename ColorSpace> struct planar_pixel_reference;\\n\\n// Define the type of a mutable and read-only reference. (These typedefs are already provided by GIL)\\ntypedef planar_pixel_reference<      bits8&,rgb_t> rgb8_planar_ref_t;\\ntypedef planar_pixel_reference<const bits8&,rgb_t> rgb8c_planar_ref_t;\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Code Return in C++ File Reading Function\nDESCRIPTION: Demonstrates error code handling in a file reading function that attempts to read an integer from a file. The function uses return values to indicate success (0) or various error conditions, with output parameters for the actual data.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/motivation/error_codes.md#2025-04-22_snippet_0\n\nLANGUAGE: c++\nCODE:\n```\nint readInt(const char * filename, int& val)\n{\n  FILE* fd;\n  int r = openFile(filename, /*out*/ fd);\n  if (r != 0)\n    return r; // return whatever error openFile() returned\n\n  r = readInt(fd, /*out*/ val);\n  if (r != 0)\n    return READERRC_NOINT; // my error code\n\n  return 0;   // success\n}\n```\n\n----------------------------------------\n\nTITLE: Linking Dependencies for HTTP Server\nDESCRIPTION: Links required libraries (Asio and Beast) to the http-server-fast executable target.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/beast/example/http/server/fast/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(http-server-fast\n    lib-asio\n    lib-beast)\n```\n\n----------------------------------------\n\nTITLE: Altering C++ Array and Checking Python ndarray Synchronization\nDESCRIPTION: Changes an element in the C++ array and verifies the corresponding change in the Python ndarray, demonstrating bidirectional data binding.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/doc/numpy/tutorial/fromdata.rst#2025-04-22_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\narr[2] = 8;\nstd::cout << std::endl\n          << \"Is the change reflected in the Python ndarray ?\" << std::endl\n\t  << p::extract<char const *>(p::str(py_array)) << std::endl;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Context-Specific Translation in Windows Message Box\nDESCRIPTION: Demonstrates using context-specific translation functions in a Windows application. The example shows a message box with text translated in the 'File Dialog' context using pgettext and regular gettext functions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/doc/messages_formatting.txt#2025-04-22_snippet_10\n\nLANGUAGE: C++\nCODE:\n```\nMessageBoxW(0,pgettext(L\"File Dialog\",L\"Open?\").c_str(),gettext(L\"Question\").c_str(),MB_YESNO);\n```\n\n----------------------------------------\n\nTITLE: Configuring IMMER Library Build Options\nDESCRIPTION: Sets build configuration options for the IMMER library, disabling examples, extras, tests and documentation building.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nUpdateModule(${GIT_EXECUTABLE} \"immer\" ${CMAKE_CURRENT_SOURCE_DIR} \"README.rst\")\nset(immer_BUILD_EXAMPLES    OFF CACHE BOOL \"don't build examples\")\nset(immer_BUILD_EXTRAS    OFF CACHE BOOL \"don't build extras\")\nset(immer_BUILD_TESTS OFF CACHE BOOL \"don't build tests\")\nset(immer_BUILD_DOCS OFF CACHE BOOL \"don't docs\")\nadd_subdirectory(immer)\n```\n\n----------------------------------------\n\nTITLE: Implementing stringify with metaprogramming in C++\nDESCRIPTION: A traditional metaprogramming approach to create a stringify function that calls std::to_string when available and falls back to stream operations when it's not. Uses SFINAE with std::enable_if and type traits.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/doc/src/example_overloading.md.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<class T>\nusing to_string_t = decltype(std::to_string(std::declval<T>()));\n\ntemplate<class T>\nusing has_to_string = std::experimental::is_detected<to_string_t, T>;\n\ntemplate<typename T> \ntypename std::enable_if<has_to_string<T>{}, std::string>::type \nstringify(T t)\n{\n    return std::to_string(t);\n}\ntemplate<typename T> \ntypename std::enable_if<!has_to_string<T>{}, std::string>::type \nstringify(T t)\n{\n    return static_cast<std::ostringstream&>(std::ostringstream() << t).str();\n}\n```\n\n----------------------------------------\n\nTITLE: Simplified Variant Return Type for Error Handling in C++\nDESCRIPTION: This snippet presents an alternative approach to the previous example, using a variant type directly to represent multiple possible return values including an error code. It shows a more compact way of handling errors.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/leaf/doc/whitepaper.md#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nvariant<int, float, error_code> compute_value(); // (B)\n```\n\n----------------------------------------\n\nTITLE: Building ArangoDB with CMake\nDESCRIPTION: These commands build ArangoDB using CMake, specifying the Clang compiler and linker flags for a release-like build. It requires being inside the Docker build container or having the necessary build tools installed.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/CONTRIBUTING.md#2025-04-22_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\ncd /root/project\n    cmake --preset community -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_EXE_LINKER_FLAGS=\"-fuse-ld=lld\" -DCMAKE_LIBRARY_PATH=$OPENSSL_ROOT_DIR/lib -DOPENSSL_ROOT_DIR=/opt\n    cmake --build --preset community --parallel (nproc)\n```\n\n----------------------------------------\n\nTITLE: at_c Metafunction Definition in C++\nDESCRIPTION: Defines the at_c metafunction template that retrieves the nth element from a sequence. It takes a Sequence type and a compile-time long integer n as parameters and provides the element type through its nested ::type typedef.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/at_c.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      typename Sequence\n    , long n\n    >\nstruct at_c\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Subimage View from an Image using Boost GIL\nDESCRIPTION: This template function extracts a subimage from a source view based on specified top-left coordinates and dimensions. It is useful for focusing on specific areas in an image without needing to copy data.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/image_view.rst.txt#2025-04-22_snippet_13\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <typename View>\nView subimage_view(const View& src,\n             const View::point_t& top_left, const View::point_t& dimensions);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Random Access Iterator Using Iterator Interface in C++\nDESCRIPTION: A concise implementation of the same random access iterator using boost::stl_interfaces::iterator_interface. This simplified version requires only three methods: dereference, increment, and subtraction, with all other operations provided by the interface.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/stl_interfaces/README.md#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nstruct repeated_chars_iterator : boost::stl_interfaces::iterator_interface<\n                                     repeated_chars_iterator,\n                                     std::random_access_iterator_tag,\n                                     char,\n                                     char>\n{\n    constexpr repeated_chars_iterator() noexcept :\n        first_(nullptr),\n        size_(0),\n        n_(0)\n    {}\n    constexpr repeated_chars_iterator(\n        char const * first, difference_type size, difference_type n) noexcept :\n        first_(first),\n        size_(size),\n        n_(n)\n    {}\n\n    constexpr char operator*() const noexcept { return first_[n_ % size_]; }\n    constexpr repeated_chars_iterator & operator+=(std::ptrdiff_t i) noexcept\n    {\n        n_ += i;\n        return *this;\n    }\n    constexpr auto operator-(repeated_chars_iterator other) const noexcept\n    {\n        return n_ - other.n_;\n    }\n\nprivate:\n    char const * first_;\n    difference_type size_;\n    difference_type n_;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining 2D Random Access Locator Concept in C++\nDESCRIPTION: This snippet adds specific requirements for 2D locators by extending the RandomAccessNDLocatorConcept. It includes functionalities for accessing coordinates and iterators strictly related to 2D spatial navigation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/pixel_locator.rst#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\n  concept RandomAccess2DLocatorConcept<RandomAccessNDLocatorConcept Loc> {\n    where num_dimensions==2;\n    where Point2DConcept<point_t>;\n\n    typename x_iterator = axis<0>::iterator;\n    typename y_iterator = axis<1>::iterator;\n    typename x_coord_t  = axis<0>::coord_t;\n    typename y_coord_t  = axis<1>::coord_t;\n\n    // Only available to locators that have dynamic step in Y\n    //Loc::Loc(const Loc& loc, y_coord_t);\n\n    // Only available to locators that have dynamic step in X and Y\n    //Loc::Loc(const Loc& loc, x_coord_t, y_coord_t, bool transposed=false);\n\n    x_iterator&       Loc::x();\n    x_iterator const& Loc::x() const;\n    y_iterator&       Loc::y();\n    y_iterator const& Loc::y() const;\n\n    x_iterator Loc::x_at(const difference_type&) const;\n    y_iterator Loc::y_at(const difference_type&) const;\n    Loc Loc::xy_at(const difference_type&) const;\n\n    // x/y versions of all methods that can take difference type\n    x_iterator        Loc::x_at(x_coord_t, y_coord_t) const;\n    y_iterator        Loc::y_at(x_coord_t, y_coord_t) const;\n    Loc               Loc::xy_at(x_coord_t, y_coord_t) const;\n    reference         operator()(const Loc&, x_coord_t, y_coord_t);\n    cached_location_t Loc::cache_location(x_coord_t, y_coord_t) const;\n\n    bool      Loc::is_1d_traversable(x_coord_t width) const;\n    y_coord_t Loc::y_distance_to(const Loc& loc2, x_coord_t x_diff) const;\n  };\n```\n\n----------------------------------------\n\nTITLE: C++ Template Class Declaration\nDESCRIPTION: Template class success_type<T> that serves as a wrapper type for successful results, providing value access and spare storage functionality. Includes specialization for void type.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/success_type.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate<typename T>\nclass success_type {\npublic:\n    using value_type = T;\n    // Defaulted constructors and assignments\n    constexpr success_type() = default;\n    constexpr success_type(const success_type &) = default;\n    constexpr success_type(success_type &&) = default;\n    constexpr success_type &operator=(const success_type &) = default;\n    constexpr success_type &operator=(success_type &&) = default;\n    ~success_type() = default;\n\n    // Initializing constructor\n    template<typename U>\n    explicit constexpr success_type(U&& v, spare_storage_type spare = spare_storage_type());\n\n    // Value observers\n    constexpr T& value() & noexcept;\n    constexpr const T& value() const & noexcept;\n    constexpr T&& value() && noexcept;\n    constexpr const T&& value() const && noexcept;\n\n    // Spare storage observer\n    constexpr spare_storage_type spare_storage() const noexcept;\n};\n```\n\n----------------------------------------\n\nTITLE: Multi-condition static_if with Boost.HigherOrderFunctions in C++\nDESCRIPTION: Extending the static_if example to handle multiple conditions with first_of. Shows how to check for multiple traits and provide different implementations accordingly.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/doc/src/example_overloading.md.txt#2025-04-22_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<typename T>\nvoid decrement_kindof(T& value)\n{\n    eval(first_of(\n        if_(is_stack<T>())([&](auto id){\n            id(value).pop();\n        }),\n        if_(std::is_same<std::string, T>())([&](auto id){\n            id(value).pop_back();\n        }),\n        [&](auto id){\n            --id(value);\n        }\n    ));\n}\n```\n\n----------------------------------------\n\nTITLE: Using BOOST_OUTCOME_TRYV and BOOST_OUTCOME_TRY Macros in C++\nDESCRIPTION: These macros evaluate an expression and continue execution if successful, or immediately return from the calling function if unsuccessful. They use customization points for try_operation_has_value, try_operation_return_as, and try_operation_extract_value. BOOST_OUTCOME_TRY can also set a variable if multiple arguments are provided.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/macros/tryv.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_OUTCOME_TRYV(expr)\n```\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_OUTCOME_TRY(expr)\n```\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_OUTCOME_TRY(var, expr)\n```\n\n----------------------------------------\n\nTITLE: Defining Target Sources for AQL Nodes in C++\nDESCRIPTION: This snippet sets the target sources for the AQL (ArangoDB Query Language) nodes in the ArangoDB project. It determines which source files to include during the compilation process, thereby constructing various nodes essential for handling AQL queries. The dependencies for compiling these nodes include C++ source files related to AQL node implementations.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/Aql/ExecutionNode/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(arango_aql PRIVATE\n  AsyncNode.cpp\n  CalculationNode.cpp\n  CollectNode.cpp\n  CollectionAccessingNode.cpp  \n  DataAccessingNode.h\n  DistributeConsumerNode.cpp\n  DistributeNode.cpp\n  DocumentProducingNode.cpp  \n  EnumerateCollectionNode.cpp\n  EnumerateListNode.cpp\n  EnumerateNearVectorNode.cpp\n  EnumeratePathsNode.cpp\n  ExecutionNode.cpp\n  FilterNode.cpp\n  GatherNode.cpp\n  GraphNode.cpp\n  IResearchViewNode.cpp\n  IndexCollectNode.cpp\n  IndexNode.cpp\n  InsertNode.cpp\n  JoinNode.cpp\n  LimitNode.cpp\n  MaterializeNode.cpp\n  MaterializeRocksDBNode.cpp\n  MaterializeSearchNode.cpp\n  ModificationNode.cpp\n  MultipleRemoteModificationNode.cpp  \n  MutexNode.cpp\n  NoResultsNode.cpp\n  RemoteNode.cpp\n  RemoveNode.cpp\n  ReplaceNode.cpp\n  ReturnNode.cpp\n  ScatterNode.cpp\n  ShortestPathNode.cpp\n  SingleRemoteOperationNode.cpp\n  SingletonNode.cpp\n  SortNode.cpp\n  SubqueryEndExecutionNode.cpp\n  SubqueryNode.cpp\n  SubqueryStartExecutionNode.cpp\n  TraversalNode.cpp\n  UpdateNode.cpp\n  UpdateReplaceNode.cpp\n  UpsertNode.cpp\n  WindowNode.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Boost Parameter Function Implementation Example\nDESCRIPTION: Example usage of BOOST_PARAMETER_BASIC_FUNCTION macro to create a function with flexible parameter handling.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_46\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_PARAMETER_BASIC_FUNCTION((bool), evaluate, kw,\n    (deduced\n        (required\n            (lrc, (std_bitset<1>))\n            (lr, (std_bitset<2>))\n        )\n        (optional\n            (rrc, (std_bitset<3>))\n            (rr, (std_bitset<4>))\n        )\n    )\n)\n{\n    BOOST_TEST_EQ(\n        passed_by_lvalue_reference_to_const\n      , U::evaluate_category<0>(args[_lrc])\n    );\n    BOOST_TEST_EQ(\n        passed_by_lvalue_reference\n      , U::evaluate_category<1>(args[_lr])\n    );\n    BOOST_TEST_EQ(\n        passed_by_rvalue_reference_to_const\n      , U::evaluate_category<2>(\n            args[_rrc0 | rvalue_const_bitset<2>()]\n        )\n    );\n    BOOST_TEST_EQ(\n        passed_by_rvalue_reference\n      , U::evaluate_category<3>(args[_rr0 | rvalue_bitset<3>()])\n    );\n\n    return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ConstFunctionObject Concept in C++\nDESCRIPTION: Defines a concept for an object with a const call operator that can accept any number of parameters. The object must satisfy std::is_object and provide a valid call operator that accepts the given arguments.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/doc/src/concepts.md.txt#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nconcept ConstFunctionObject\n{\n    template<class... Ts>\n    auto operator()(Ts&&...) const;\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Flipped Up-Down View using Boost GIL\nDESCRIPTION: This template function creates a view that flips the source image view upside down. It utilizes the ImageViewConcept to ensure type compliance at compile time for the provided image view. The output view's pixel dimensions remain the same, with the y-coordinates inverted.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/image_view.rst.txt#2025-04-22_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <typename View>\ntypename dynamic_y_step_type<View>::type flipped_up_down_view(const View& src)\n{\n    gil_function_requires<ImageViewConcept<View> >();\n    typedef typename dynamic_y_step_type<View>::type RView;\n    return RView(src.dimensions(),typename RView::xy_locator(src.xy_at(0,src.height()-1),-1));\n}\n```\n\n----------------------------------------\n\nTITLE: Defining result<T, E, NoValuePolicy> Type Alias in C++\nDESCRIPTION: A type alias that points to either std_result (standalone edition) or boost_result (Boost edition) with default error types and policies. This provides a consistent interface regardless of which edition of Outcome is being used.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/aliases/result.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nresult<T, E = varies, NoValuePolicy = policy::default_policy<T, E, void>>\n```\n\n----------------------------------------\n\nTITLE: Channel-Specific Image Gradient Computation in C++ using GIL\nDESCRIPTION: The function 'nth_channel_x_gradient' allows for calculating the gradient of a specific channel within an image view. It demonstrates the flexibility by computing gradients on individual channels using the nth_channel_view transformation function.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/tutorial/gradient.rst#2025-04-22_snippet_11\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <typename SrcView, typename DstView>\nvoid nth_channel_x_gradient(const SrcView& src, int n, const DstView& dst)\n{\n  x_gradient(nth_channel_view(src, n), dst);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Client Build with SSL in CMake\nDESCRIPTION: This CMake snippet configures the build for an HTTP client example using Boost.Beast with async SSL and system executor. It sets up the executable, includes necessary source files, and links required libraries including OpenSSL.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/beast/example/http/client/async-ssl-system-executor/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (OPENSSL_FOUND)\n    GroupSources(include/boost/beast beast)\n    GroupSources(example/common common)\n    GroupSources(example/http/client/async-ssl-system-executor \"/\")\n\n    add_executable (http-client-async-ssl-system-executor\n        ${BOOST_BEAST_FILES}\n        ${PROJECT_SOURCE_DIR}/example/common/root_certificates.hpp\n        Jamfile\n        http_client_async_ssl_system_executor.cpp\n    )\n\n    set_property(TARGET http-client-async-ssl-system-executor PROPERTY FOLDER \"example-http-client\")\n\n    target_link_libraries (http-client-async-ssl-system-executor\n        OpenSSL::SSL OpenSSL::Crypto\n        lib-asio\n        lib-asio-ssl\n        lib-beast\n        )\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost.NumPy Library with CMake\nDESCRIPTION: This CMake configuration snippet is responsible for building the Boost.NumPy library if NumPy is available. It sets up the project to compile source files, link against required Boost and NumPy dependencies, and manage compile definitions for both dynamic and static library modes.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(Python_NumPy_FOUND)\n\n# boost_numpyXY\n\nset(_boost_numpy boost_numpy${_pyver})\n\nadd_library(${_boost_numpy}\n  src/numpy/dtype.cpp\n  src/numpy/matrix.cpp\n  src/numpy/ndarray.cpp\n  src/numpy/numpy.cpp\n  src/numpy/scalars.cpp\n  src/numpy/ufunc.cpp\n)\n\nadd_library(Boost::numpy${_pyver} ALIAS ${_boost_numpy})\n\ntarget_include_directories(${_boost_numpy} PUBLIC include)\n\ntarget_link_libraries(${_boost_numpy}\n  PUBLIC\n    Boost::config\n    Boost::core\n    Boost::detail\n    Boost::mpl\n    Boost::python\n    Boost::smart_ptr\n\n    Python::NumPy\n)\n\ntarget_compile_definitions(${_boost_numpy}\n  PUBLIC BOOST_NUMPY_NO_LIB\n  PRIVATE BOOST_NUMPY_SOURCE\n)\n\nif(BUILD_SHARED_LIBS)\n  target_compile_definitions(${_boost_numpy} PUBLIC BOOST_NUMPY_DYN_LINK)\nelse()\n  target_compile_definitions(${_boost_numpy} PUBLIC BOOST_NUMPY_STATIC_LINK BOOST_NUMPY_STATIC_LIB)\nendif()\n\n# Boost::numpy alias\n\nadd_library(boost_numpy INTERFACE)\nadd_library(Boost::numpy ALIAS boost_numpy)\ntarget_link_libraries(boost_numpy INTERFACE Boost::numpy${_pyver})\n\n# Installation\n\nif(BOOST_SUPERPROJECT_VERSION AND NOT CMAKE_VERSION VERSION_LESS 3.13)\n  boost_install(TARGETS ${_boost_numpy} boost_numpy VERSION ${BOOST_SUPERPROJECT_VERSION})\nendif()\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Implementing Iterator Distance Function in C++\nDESCRIPTION: Template function that computes the signed distance between two iterators. It works with Single Pass Iterators and provides optimized constant-time operation for Random Access Traversal Iterators. The function is constexpr in C++14 and later.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/distance.rst#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <typename Iterator>\nconstexpr typename iterator_difference<Iterator>::type\ndistance(Iterator first, Iterator last);\n```\n\n----------------------------------------\n\nTITLE: Implementing copy_file Function in C++\nDESCRIPTION: This snippet implements the copy_file function that returns an fs_result<void> to handle filesystem copy operations. It simplifies error handling by returning a failure_info structure on failure. Dependencies include the Outcome library for managing results and error codes.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/tutorial/advanced/payload/copy_file2.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nvoid copy_file() {\n    // Implementation of copy_file function\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Remove Algorithm Template in C++\nDESCRIPTION: This code snippet defines the template structure for the 'remove' algorithm in Boost MPL. It takes a Sequence, a type T to remove, and an optional Inserter.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/remove.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      typename Sequence\n    , typename T\n    , typename In = |unspecified|\n    >\nstruct remove\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Executing Module Functions in CommonJS JavaScript\nDESCRIPTION: The 'program.js' example demonstrates requiring the 'increment' function from 'increment.js' and using it to increment a variable. It shows the application of module systems to build functionality in a modular way.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/js/common/test-data/modules/commonjs/docs/specs/modules/1.0.html.markdown#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar inc = require('increment').increment;\nvar a = 1;\ninc(a); // 2\n```\n\n----------------------------------------\n\nTITLE: C++ Class Definition for Boost.Python Wrapping\nDESCRIPTION: A C++ struct definition for a simple World class that will be exposed to Python. The class has methods to set and retrieve a message string.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/doc/article.rst#2025-04-22_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\nstruct World\n{\n    void set(std::string msg) { this->msg = msg; }\n    std::string greet() { return msg; }\n    std::string msg;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining the optional and required Templates in Boost Parameter Library C++\nDESCRIPTION: Implements templates for describing requirements on function parameters. Both use a Tag and an optional Predicate, with default predicates that always return true in both MPL and MP11 styles.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_6\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <typename Tag, typename Predicate = *unspecified*>\nstruct optional;\n\ntemplate <typename Tag, typename Predicate = *unspecified*>\nstruct required;\n```\n\n----------------------------------------\n\nTITLE: Implementing print_half function in C++\nDESCRIPTION: This snippet outlines the logic for implementing `print_half`. Conversion to `int` is attempted first, and failing that, a custom `BigInt` implementation is used for larger values. It utilizes a previously defined `convert` function.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/tutorial/essential/result/inspecting.md#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n\"{{% snippet \\\"using_result.cpp\\\" \\\"half_impl\\\" %}}\"\n```\n\n----------------------------------------\n\nTITLE: Reading GraphML to Build BGL Graph - C++\nDESCRIPTION: The read_graphml function interprets a graph described in GraphML format, enabling the construction of a BGL graph from textual data. It requires a MutableGraph and dynamic_properties to handle graph attributes. Users can specify the graph_index to select which graph to load if multiple graphs are present in the input file. The function enforces restrictions on graph types based on the GraphML data provided and includes error handling for specific cases like parallel edges and graph directionality.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph/doc/read_graphml.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nvoid read_graphml(std::istream& in, MutableGraph& graph,\n                    dynamic_properties& dp, size_t graph_index = 0);\n```\n\n----------------------------------------\n\nTITLE: Reverse Transform Expression Semantics (Unary)\nDESCRIPTION: This code snippet describes the semantics of using `reverse_transform` with a single sequence and a unary operation. It demonstrates the equivalent operation using `reverse_fold` with a `lambda` and an `inserter` to achieve the reversed transformation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/reverse_transform.rst#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\ntypedef reverse_transform<s,op,in>::type r;\n\n:Return type:\nA type.\n\n:Postcondition:\nEquivalent to \n    \ntypedef lambda<op>::type f;\ntypedef lambda<in::operation>::type in_op;\n    \ntypedef reverse_fold< \n      s\n    , in::state\n    , bind< in_op, _1, bind<f, _2> > \n    >::type r;\n```\n\n----------------------------------------\n\nTITLE: Using the Exposed World Class in Python\nDESCRIPTION: Python code demonstrating how to use the World class exposed through Boost.Python. Creates an instance, sets a message, and retrieves it.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/doc/article.rst#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> import hello\n>>> planet = hello.World()\n>>> planet.set('howdy')\n>>> planet.greet()\n'howdy'\n```\n\n----------------------------------------\n\nTITLE: Safely constructing objects using std::optional in C++\nDESCRIPTION: Example showing the use of std::optional for member variables that can't be constexpr initialized. This approach ensures exception safety by separating object construction into two distinct phases.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/tutorial/advanced/constructors/two-phase-init.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nstd::optional<T>\n```\n\n----------------------------------------\n\nTITLE: Enhancing Print Function with Constrained Overloads in C++\nDESCRIPTION: Improves the print function with constrained overloads for both single values and ranges.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/src/example_print.md#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_HOF_STATIC_LAMBDA_FUNCTION(print) = first_of(\n    [](const auto& x) -> decltype(std::cout << x, void())\n    {\n        std::cout << x << std::endl;\n    },\n    [](const auto& range) -> decltype(std::cout << *adl::adl_begin(range), void())\n    {\n        for(const auto& x:range) std::cout << x << std::endl;\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Stackless WebSocket Server Build in CMake\nDESCRIPTION: This CMake code configures the build for a stackless WebSocket server example. It groups source files, defines an executable target with its source files, links necessary libraries (Asio and Beast), and sets the target folder property.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/beast/example/websocket/server/stackless/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nGroupSources(include/boost/beast beast)\nGroupSources(example/websocket/server/stackless \"/\")\n\nadd_executable (websocket-server-stackless\n    ${BOOST_BEAST_FILES}\n    Jamfile\n    websocket_server_stackless.cpp\n)\n\ntarget_link_libraries(websocket-server-stackless\n    lib-asio\n    lib-beast)\n\nset_property(TARGET websocket-server-stackless PROPERTY FOLDER \"example-websocket-server\")\n```\n\n----------------------------------------\n\nTITLE: Declaring Global Function Objects with BOOST_HOF_STATIC_FUNCTION in C++\nDESCRIPTION: Shows how to use BOOST_HOF_STATIC_FUNCTION to declare a global function object following best practices for initialization and ODR compliance.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/src/gettingstarted.md#2025-04-22_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_HOF_STATIC_FUNCTION(sum) = sum_f();\n```\n\n----------------------------------------\n\nTITLE: Defining at Metafunction for Associative Sequences in C++\nDESCRIPTION: Template metafunction that returns the element associated with a Key in an Associative Sequence, or a Default value if not found. Takes an AssocSeq, Key, and optional Default type as template parameters.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/at.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      typename AssocSeq\n    , typename Key\n    , typename Default = |unspecified|\n    >\nstruct at\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Static Hook Method Declaration for Outcome Move Construction\nDESCRIPTION: Defines a static hook method that is invoked by converting move constructors of basic_outcome when consuming two arguments. The method is guaranteed to be noexcept and is available in Outcome v2.2.0 and later.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/policies/base/on_outcome_move_construction2.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nstatic void on_outcome_move_construction(T *, U &&, V &&) noexcept\n```\n\n----------------------------------------\n\nTITLE: Crauser et al.'s Algorithm for Shortest Paths\nDESCRIPTION: This C++ template function implements Crauser et al.'s algorithm for solving the shortest path problem in distributed graphs. The implementation focuses on enhancing the scalability of parallel algorithms while maintaining user accessibility through simple function signatures.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/dijkstra_shortest_paths.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nnamespace graph {\n    template<typename DistributedGraph, typename DijkstraVisitor,\n             typename PredecessorMap, typename DistanceMap, typename WeightMap,\n             typename IndexMap, typename ColorMap, typename Compare,\n             typename Combine, typename DistInf, typename DistZero>\n    void\n    crauser_et_al_shortest_paths\n      (const DistributedGraph& g,\n       typename graph_traits<DistributedGraph>::vertex_descriptor s,\n       PredecessorMap predecessor, DistanceMap distance, WeightMap weight,\n       IndexMap index_map, ColorMap color_map,\n       Compare compare, Combine combine, DistInf inf, DistZero zero,\n       DijkstraVisitor vis);\n\n    template<typename DistributedGraph, typename DijkstraVisitor,\n             typename PredecessorMap, typename DistanceMap, typename WeightMap>\n    void\n    crauser_et_al_shortest_paths\n      (const DistributedGraph& g,\n       typename graph_traits<DistributedGraph>::vertex_descriptor s,\n       PredecessorMap predecessor, DistanceMap distance, WeightMap weight);\n\n    template<typename DistributedGraph, typename DijkstraVisitor,\n             typename PredecessorMap, typename DistanceMap>\n    void\n    crauser_et_al_shortest_paths\n      (const DistributedGraph& g,\n       typename graph_traits<DistributedGraph>::vertex_descriptor s,\n       PredecessorMap predecessor, DistanceMap distance);\n  }\n```\n\n----------------------------------------\n\nTITLE: OUTCOME_TRY Macro Expansion in C++\nDESCRIPTION: Shows the expanded form of the OUTCOME_TRY macro, illustrating how it checks for errors and automatically propagates them if present. This demonstrates the mechanism behind generic error handling in Boost Outcome.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/leaf/doc/whitepaper.md#2025-04-22_snippet_19\n\nLANGUAGE: c++\nCODE:\n```\nauto&& __result = BigInt::fromString(text);\nif (!__result)\n  return __result.as_failure();\nauto&& i = __result.value();\n```\n\n----------------------------------------\n\nTITLE: Testing Complex Number Operations in C++\nDESCRIPTION: Demonstrates the usage of the implemented complex number operations, including conversion from integral to complex and addition of complex numbers.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/numeric_cast.rst#2025-04-22_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\ntypedef int_<2> i;\ntypedef complex< int_<5>, int_<-1> > c1;\ntypedef complex< int_<-5>, int_<1> > c2;\n\ntypedef plus<c1,i> r4;\nBOOST_MPL_ASSERT_RELATION( real<r4>::value, ==, 7 );\nBOOST_MPL_ASSERT_RELATION( imag<r4>::value, ==, -1 );\n\ntypedef plus<i,c2> r5;\nBOOST_MPL_ASSERT_RELATION( real<r5>::value, ==, -3 );\nBOOST_MPL_ASSERT_RELATION( imag<r5>::value, ==, 1 );\n```\n\n----------------------------------------\n\nTITLE: Make Distributed Queue Function in C++\nDESCRIPTION: This inline function constructs a new distributed queue using specified process group and buffer. It provides an option to enable polling, which changes how the queue behaves during message receiving.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/distributed_queue.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<typename ProcessGroup, typename Buffer>\ninline distributed_queue<ProcessGroup, Buffer>\nmake_distributed_queue(const ProcessGroup& process_group, const Buffer& buffer,\n                     bool polling = false);\n```\n\n----------------------------------------\n\nTITLE: Setting Build and Install Targets - CMake\nDESCRIPTION: This snippet configures custom build and install targets for the whole project, managing both the compilation tests and file installations. Dependencies include CMake and the CTest module. Outputs include compiled tests, binary directories, and installed headers.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/callable_traits/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n##############################################################################\n# Setup the `check` target to build and then run all the tests and examples.\n##############################################################################\n\nadd_custom_target(callable_traits_check\n    COMMAND ${CMAKE_CTEST_COMMAND} --output-on-failure\n    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n    COMMENT \"Build and then run all the tests and examples.\")\nif (NOT TARGET check)\n    add_custom_target(check DEPENDS callable_traits_check)\nelse()\n    add_dependencies(check callable_traits_check)\nendif()\n\nadd_subdirectory(example)\nadd_subdirectory(test)\n\n##############################################################################\n# Setup the 'install' target and the package config file.\n##############################################################################\ninstall(TARGETS boost_callable_traits     EXPORT CallableTraitsConfig)\ninstall(EXPORT CallableTraitsConfig DESTINATION lib/cmake/CallableTraits)\ninstall(DIRECTORY include/boost     DESTINATION include FILES_MATCHING PATTERN \"*.hpp\")\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining ArangoDB Version Configuration\nDESCRIPTION: Sets up version management for ArangoDB, including major, minor, and patch versions with support for pre-release and development builds\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(ARANGODB_VERSION_MAJOR \"3\")\nset(ARANGODB_VERSION_MINOR \"12\")\n\nif(NOT DEFINED ARANGODB_VERSION_PATCH)\n  set(ARANGODB_VERSION_PATCH \"5\")\n  set(ARANGODB_VERSION_RELEASE_TYPE \"devel\")\n  set(ARANGODB_VERSION_RELEASE_NUMBER \"\")\nelse()\n  unset(ARANGODB_VERSION_RELEASE_TYPE)\n  unset(ARANGODB_VERSION_RELEASE_NUMBER)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Handling Conversion Errors in Boost.Locale UTF Conversions\nDESCRIPTION: Shows how to use the 'stop' flag to make Boost.Locale conversion functions throw an exception on invalid input, instead of skipping illegal characters.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/doc/charset_handling.txt#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nstd::wstring s=to_utf<wchar_t>(\"\\xFF\\xFF\",\"UTF-8\",stop); \n// Throws because this string is illegal in UTF-8\n```\n\n----------------------------------------\n\nTITLE: Iterator Operations and Value Indirection\nDESCRIPTION: Demonstrates how pointer container iterators handle value indirection compared to standard containers of raw pointers.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/examples.rst#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nptr_vector<X> pvec; \nstd::vector<X*> vec;\n*vec.begin()  = new X;   // fine, memory leak\n*pvec.begin() = new X;   // compile time error\n( *vec.begin() )->foo(); // call X::foo(), a bit clumsy\npvec.begin()->foo();     // no indirection needed\n*vec.front()  = X();     // overwrite first element\npvec.front()  = X();     // no indirection needed\n```\n\n----------------------------------------\n\nTITLE: Using Boost to Generate R-MAT Graphs in C++\nDESCRIPTION: This example demonstrates creating a distributed graph using the Boost Graph Library and a sorted unique R-MAT graph generator. It integrates multiple Boost headers for distributed processes, compressed sparse row graphs, and random generation, constructing a graph with 100 nodes and 400 edges using specified R-MAT parameters.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/sorted_unique_rmat_generator.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/graph/distributed/mpi_process_group.hpp>\n#include <boost/graph/compressed_sparse_row_graph.hpp>\n#include <boost/graph/rmat_graph_generator.hpp>\n#include <boost/random/linear_congruential.hpp>\n\nusing boost::graph::distributed::mpi_process_group;\n\ntypedef compressed_sparse_row_graph<directedS, no_property, no_property, no_property,\n                                    distributedS<mpi_process_group> > Graph;\ntypedef keep_local_edges<boost::parallel::variant_distribution<mpi_process_group>,\n                         mpi_process_group::process_id_type> EdgeFilter; \ntypedef boost::sorted_unique_rmat_iterator<boost::minstd_rand, Graph> RMATGen;\n\nint main()\n{\n  boost::minstd_rand gen;\n  mpi_process_group pg;\n\n  int N = 100;\n\n  boost::parallel::variant_distribution<ProcessGroup> distrib \n    = boost::parallel::block(pg, N);\n\n  mpi_process_group::process_id_type id = process_id(pg);\n\n  // Create graph with 100 nodes and 400 edges \n  Graph g(RMATGen(gen, N, 400, 0.57, 0.19, 0.19, 0.05, true, \n                  true, EdgeFilter(distrib, id)), \n          RMATGen(), N, pg, distrib);\n  return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Member Function with Boost.Parameter\nDESCRIPTION: This code snippet demonstrates how to define a member function within a class using Boost.Parameter. The BOOST_PARAMETER_MEMBER_FUNCTION macro is used to specify required and optional parameters with associated tags. This allows the member function 'f' to accept parameters 'x' and 'y' by name when called from C++.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter_python/doc/index.rst#2025-04-22_snippet_8\n\nLANGUAGE: cpp\nCODE:\n```\n\"    class X\n    {\n    public:\n        BOOST_PARAMETER_MEMBER_FUNCTION((void), f, tag,\n            (required (x, \\*))\n            (optional (y, \\*, 1))\n        )\n        {\n            \\*…\\*/\n        }\n    };\"\n```\n\n----------------------------------------\n\nTITLE: Affine Transformation Example - affine.cpp\nDESCRIPTION: This example demonstrates applying an affine transformation to an image using Boost GIL and the optional Numeric extension. It showcases an image processing operation that relies on the external Numeric extension.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/index.rst#2025-04-22_snippet_7\n\nLANGUAGE: C++\nCODE:\n```\n* :download:`affine.cpp <../example/affine.cpp>`:\n  Applying an affine transformation to an image (requires the optional\n  Numeric extension)\n```\n\n----------------------------------------\n\nTITLE: Pointer Container Sorting Algorithm\nDESCRIPTION: Provides sorting functionality for pointer containers with optional custom comparison operators\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/ptr_sequence_adapter.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nvoid sort();\nvoid sort( iterator first, iterator last );\ntemplate< class Compare > void sort( Compare comp );\n```\n\n----------------------------------------\n\nTITLE: Defining Regular Concept in C++\nDESCRIPTION: The Regular concept is defined by this snippet, which aggregates several concepts: DefaultConstructible, CopyConstructible, EqualityComparable, Assignable, and Swappable, ensuring that a type meets all these requirements.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/concepts.rst#2025-04-22_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\nauto concept Regular<typename T> :\n    DefaultConstructible<T>,\n    CopyConstructible<T>,\n    EqualityComparable<T>,\n    Assignable<T>,\n    Swappable<T>\n{};\n```\n\n----------------------------------------\n\nTITLE: Declaring Simplified Delta-Stepping Shortest Paths Function in C++\nDESCRIPTION: A simplified function declaration for the delta-stepping shortest paths algorithm. It omits the delta parameter, which will be automatically determined based on the graph properties.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/dijkstra_shortest_paths.rst#2025-04-22_snippet_8\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <typename Graph, typename PredecessorMap, \n              typename DistanceMap, typename WeightMap>\nvoid delta_stepping_shortest_paths\n  (const Graph& g,\n   typename graph_traits<Graph>::vertex_descriptor s, \n   PredecessorMap predecessor, DistanceMap distance, WeightMap weight)\n```\n\n----------------------------------------\n\nTITLE: Implementing String References in C++ Error Handling\nDESCRIPTION: Demonstrates the implementation of get_string() method in a file I/O error domain class. The method returns a string_ref to a statically stored domain name, utilizing a cached value pattern for efficiency.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/experimental/worked-example/string_ref.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nsystem_error2::status_code_domain::string_ref file_io_error_domain::name() const noexcept\n{\n  static const auto cached = string_ref(\"file i/o error domain\");\n  return cached;\n}\n```\n\n----------------------------------------\n\nTITLE: Overloading Color Conversion in C++\nDESCRIPTION: This snippet provides an implementation of a custom color converter that extends default conversion functionality. It defines a structure that inverts colors for grayscale conversion while allowing the default conversion for all other types.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/extending.rst#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\n  // make the default use GIL's default\n  template <typename SrcColorSpace, typename DstColorSpace>\n  struct my_color_converter_impl\n  : public default_color_converter_impl<SrcColorSpace,DstColorSpace> {};\n\n  // provide specializations only for cases you care about\n  // (in this case, if the destination is grayscale, invert it)\n  template <typename SrcColorSpace>\n  struct my_color_converter_impl<SrcColorSpace,gray_t>\n  {\n    template <typename SrcP, typename DstP>  // Model PixelConcept\n    void operator()(const SrcP& src, DstP& dst) const\n    {\n        default_color_converter_impl<SrcColorSpace,gray_t>()(src,dst);\n        get_color(dst,gray_color_t())=channel_invert(get_color(dst,gray_color_t()));\n    }\n  };\n\n  // create a color converter object that dispatches to your own implementation\n  struct my_color_converter\n  {\n    template <typename SrcP, typename DstP>  // Model PixelConcept\n    void operator()(const SrcP& src,DstP& dst) const\n    {\n        typedef typename color_space_type<SrcP>::type SrcColorSpace;\n        typedef typename color_space_type<DstP>::type DstColorSpace;\n        my_color_converter_impl<SrcColorSpace,DstColorSpace>()(src,dst);\n    }\n  };\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Error Codes with boost::system::error_code in C++\nDESCRIPTION: This code demonstrates how to define a custom error code enum and integrate it with the boost::system::error_code framework. The example creates a complete error handling system for string-to-integer conversion errors including error category definition, message generation, and condition mapping.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/motivation/plug_error_code2.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nenum class ConversionErrc\n{\n  Success = 0,     // 0 should not represent an error\n  EmptyString = 1,\n  IllegalChar = 2,\n  TooLong = 3,\n};\n\nnamespace boost { namespace system {\n  // Tell the C++ 11 STL metaprogramming that enum ConversionErrc \n  // is registered with the standard error code system\n  template <> struct is_error_code_enum<ConversionErrc> : std::true_type\n  {\n  };\n}}\n\nnamespace detail {\n  // Define a custom error code category derived from boost::system::error_category\n  class ConversionErrc_category : public boost::system::error_category\n  {\n  public:\n    // Return a short descriptive name for the category\n    virtual const char *name() const noexcept override { return \"ConversionError\"; }\n    // Return what each enum means in text form\n    virtual std::string message(int c) const override\n    {\n      switch(static_cast<ConversionErrc>(c))\n      {\n      case ConversionErrc::Success:\n        return \"conversion successful\";\n      case ConversionErrc::EmptyString:\n        return \"converting empty string\";\n      case ConversionErrc::IllegalChar:\n        return \"converting illegal character\";\n      case ConversionErrc::TooLong:\n        return \"converting too long input\";\n      default:\n        return \"unknown\";\n      }\n    }\n    // Boilerplate required by Boost.System's design\n    virtual boost::system::error_condition default_error_condition(int c) const noexcept override\n    {\n      switch(static_cast<ConversionErrc>(c))\n      {\n      case ConversionErrc::EmptyString:\n        return make_error_condition(boost::system::errc::invalid_argument);\n      case ConversionErrc::IllegalChar:\n        return make_error_condition(boost::system::errc::invalid_argument);\n      case ConversionErrc::TooLong:\n        return make_error_condition(boost::system::errc::result_out_of_range);\n      default:\n        // I have no mapping for this code\n        return boost::system::error_condition(c, *this);\n      }\n    }\n  };\n}\n\n// Declare a global function returning a static instance of the defined category\nconst detail::ConversionErrc_category& ConversionErrc_category()\n{\n  static detail::ConversionErrc_category c;\n  return c;\n}\n\n// Overload the global make_error_code() free function with our\n// custom enum. It will be found via ADL by the compiler if needed.\ninline boost::system::error_code make_error_code(ConversionErrc e)\n{\n  return {static_cast<int>(e), ConversionErrc_category()};\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Distributed Graph Type Using Boost Graph Library C++\nDESCRIPTION: This snippet shows how to define a distributed graph type utilizing the Boost Graph Library for parallel processing via MPI. The graph's vertices and edges are distributed across multiple processors to enhance processing efficiency.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/dijkstra_example.rst#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\ntypedef mpi::process_group<mpi::immediateS> process_group_type;\n\n  typedef adjacency_list<listS, \n                         distributedS<process_group_type, vecS>, \n                         directedS,\n                         no_property,                 // Vertex properties \n                         property<edge_weight_t, int> // Edge properties\n                         > graph_t;\n  typedef graph_traits < graph_t >::vertex_descriptor vertex_descriptor;\n  typedef graph_traits < graph_t >::edge_descriptor edge_descriptor;\n```\n\n----------------------------------------\n\nTITLE: Initializing UTF-8 Arguments in C++ Main Function\nDESCRIPTION: Example showing how to initialize command line arguments to use UTF-8 encoding on Windows platforms. Uses boost::nowide::args to handle argument conversion.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/nowide/README.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nint main(int argc, char **argv)\n{\n    boost::nowide::args _(argc, argv); // Must use an instance!\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Boost.Locale with Boost.Iostreams for Character Conversion\nDESCRIPTION: A complete example showing how to use Boost.Locale with Boost.Iostreams to create a stream that converts wide characters to narrow characters in UTF-8 encoding.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/doc/charset_handling.txt#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/iostreams/stream.hpp>\n#include <boost/iostreams/categories.hpp> \n#include <boost/iostreams/code_converter.hpp>\n\n#include <boost/locale.hpp>\n#include <iostream>\n\nnamespace io = boost::iostreams;\n\n// Device that consumes the converted text,\n// In our case it just writes to standard output\nclass consumer {\npublic:\n    typedef char char_type;\n    typedef io::sink_tag category;\n    std::streamsize write(const char* s, std::streamsize n)\n    {\n        std::cout.write(s,n);\n        return n;\n    }\n};\n\n\nint main()\n{ \n    // the device that converts wide characters\n    // to narrow\n    typedef io::code_converter<consumer> converter_device;\n    // the stream that uses this device\n    typedef io::stream<converter_device> converter_stream;\n\n\n    consumer cons;\n    // setup out converter to work\n    // with he_IL.UTF-8 locale \n    converter_device dev;\n    boost::locale::generator gen;\n    dev.imbue(gen(\"he_IL.UTF-8\"));\n    dev.open(cons);\n    converter_stream stream;\n    stream.open(dev);\n    // Now wide characters that are written\n    // to the stream would be given to\n    // our consumer as narrow characters \n    // in UTF-8 encoding\n    stream << L\"שלום\" << std::flush;\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Value Category Evaluation Functions in C++\nDESCRIPTION: Defines functions that return different value categories (rvalue, lvalue, const) of std::bitset objects, used for demonstrating perfect forwarding in Boost.Parameter.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_69\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <std::size_t N>\n|std_bitset|_\\<N + 1> rvalue_bitset()\n{\n    return |std_bitset|_\\<N + 1>();\n}\n\ntemplate <std::size_t N>\n|std_bitset|_\\<N + 1> const rvalue_const_bitset()\n{\n    return |std_bitset|_\\<N + 1>();\n}\n\ntemplate <std::size_t N>\n|std_bitset|_\\<N + 1>& lvalue_bitset()\n{\n    static |std_bitset|_\\<N + 1> lset = |std_bitset|_\\<N + 1>();\n    return lset;\n}\n\ntemplate <std::size_t N>\n|std_bitset|_\\<N + 1> const& lvalue_const_bitset()\n{\n    static |std_bitset|_\\<N + 1> const clset = |std_bitset|_\\<N + 1>();\n    return clset;\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Clear Metafunction in C++\nDESCRIPTION: This example demonstrates how to use the 'clear' metafunction to create an empty sequence from an existing vector of integers.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/clear.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntypedef vector_c<int,1,3,5,7,9,11> odds;\ntypedef clear<odds>::type nothing;\n\nBOOST_MPL_ASSERT(( empty<nothing> ));\n```\n\n----------------------------------------\n\nTITLE: Handling Coroutine Exceptions for result<T, std::exception_ptr>\nDESCRIPTION: This snippet explains how a coroutine returning a result with std::exception_ptr handles exceptions. If an unhandled exception occurs, the coroutine will return an errored Result containing a pointer to the thrown exception.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/tutorial/essential/coroutines/returning.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n// If your Coroutine were returning a result<T, std::exception_ptr>, \n// an errored Result with a pointer to the exception thrown would be returned.\n```\n\n----------------------------------------\n\nTITLE: Serializing basic_outcome to std::ostream in C++\nDESCRIPTION: This code snippet demonstrates the serialization format for a basic_outcome object to a std::ostream. The format includes flags, value_type, error_type, and exception_type if set and not void. It's important to note that this is not intended for human-readable output.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/functions/iostream/outcome_operator_out.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n<unsigned int flags><space><value_type if set and not void><error_type if set and not void><exception_type if set and not void>\n```\n\n----------------------------------------\n\nTITLE: Filter Iterator Constructor Implementation in C++\nDESCRIPTION: Template constructor implementation for converting between compatible filter iterator types. Allows construction from other filter iterators when their underlying iterator types are convertible.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/filter_iterator_ref.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <class OtherIterator>\nfilter_iterator(\n    filter_iterator<Predicate, OtherIterator> const& t\n    , typename enable_if_convertible<OtherIterator, Iterator>::type* = 0 // exposition\n    );\n```\n\n----------------------------------------\n\nTITLE: color_map_predicate Class Validating Color Map Parameters\nDESCRIPTION: This metafunction class ensures compatibility between a color map's key type and a graph's vertex descriptor. The result is a boolean indicating type compliance, leveraging Boost MPL constructs.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/index.rst#2025-04-22_snippet_20\n\nLANGUAGE: C++\nCODE:\n```\nstruct color_map_predicate\n{\n    template <typename T, typename Args>\n    struct apply\n      : boost::mpl::if_<\n            boost::is_same<\n                typename boost::property_traits<T>::key_type\n              , typename boost::graph_traits<\n                    typename boost::parameter::value_type<\n                        Args\n                      , graphs::graph\n                    >::type\n                >::vertex_descriptor\n            >\n          , boost::mpl::true_\n          , boost::mpl::false_\n        >\n    {\n    };\n};\n```\n\n----------------------------------------\n\nTITLE: Out-of-Band Message Sending\nDESCRIPTION: High-priority message transmission with immediate delivery through a separate communication channel\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/process_group.rst#2025-04-22_snippet_11\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<typename T>\n  void send_oob(const ProcessGroup& pg, int dest, int tag, const T& value);\n```\n\n----------------------------------------\n\nTITLE: Using insert Metafunction with Map in C++\nDESCRIPTION: Shows how to use the 'insert' metafunction to add a new key-value pair to a map in the Boost MPL library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/insert.rst#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\ntypedef map< mpl::pair<int,unsigned> > m;\ntypedef insert<m,mpl::pair<char,long> >::type m1;\n\nBOOST_MPL_ASSERT_RELATION( size<m1>::value, ==, 2 );\nBOOST_MPL_ASSERT(( is_same< at<m1,int>::type,unsigned > ));\nBOOST_MPL_ASSERT(( is_same< at<m1,char>::type,long > ));\n```\n\n----------------------------------------\n\nTITLE: Smart Pointer Example with Named Template Arguments\nDESCRIPTION: This code snippet demonstrates how to use named arguments with class templates using the Boost Parameter Library.  It shows how to create a smart pointer with a custom deleter and copy policy specified by name.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/index.rst#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nsmart_ptr<\n        Foo\n      , **deleter<Deallocate<Foo> >**\n      , **copy_policy<DeepCopy>**\n    > p(new Foo);\n```\n\n----------------------------------------\n\nTITLE: Equality Operator Implementation for basic_result Class Template in C++\nDESCRIPTION: Implements equality comparison between two basic_result objects. The operator returns true if both results have the same state and their contained values or errors compare equal using operator==. The function is constexpr and propagates noexcept from underlying comparisons.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/basic_result/equality_basic_result.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nbool operator==(const basic_result<A, B, C> &) const\n```\n\n----------------------------------------\n\nTITLE: Defining Transform Iterator Template in C++\nDESCRIPTION: Declares a class template for transform_iterator, which applies a unary function to the dereferenced value of an underlying iterator, useful for on-the-fly transformations during iteration.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/facade-and-adaptor.rst#2025-04-22_snippet_6\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <\n    class UnaryFunction\n  , class Iterator\n  , class Reference = use_default\n  , class Value = use_default\n>\nclass transform_iterator;\n```\n\n----------------------------------------\n\nTITLE: Computing RGB Luminosity Gradient with GIL Color Conversion\nDESCRIPTION: Demonstrates how to compute a gradient on the luminosity of an RGB image. This function converts a 32-bit float RGB image to 8-bit grayscale using color_converted_view before applying the gradient operation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/tutorial/gradient.rst#2025-04-22_snippet_16\n\nLANGUAGE: cpp\nCODE:\n```\nvoid x_gradient_rgb_luminosity(rgb32fc_view_t const& src, gray8s_view_t const& dst)\n{\n  x_gradient(color_converted_view<gray8_pixel_t>(src), dst);\n}\n```\n\n----------------------------------------\n\nTITLE: Histogram Creation Example - histogram.cpp\nDESCRIPTION: This example demonstrates creating a histogram using the Boost GIL library. It showcases a common image processing task implemented with the library's generic image representation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/index.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\n* :download:`histogram.cpp <../example/histogram.cpp>`: Creating a histogram\n```\n\n----------------------------------------\n\nTITLE: Constructing Interleaved Image Views in C++\nDESCRIPTION: This snippet exemplifies the construction of interleaved views from raw pixel data in C++. It uses the `interleaved_view` function, requiring image dimensions, and pointers to the first pixel in the image. This facilitates constructing views with interleaved color channels.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/image_view.rst#2025-04-22_snippet_8\n\nLANGUAGE: cpp\nCODE:\n```\n// Iterator models pixel iterator (e.g. rgb8_ptr_t or rgb8c_ptr_t)\ntemplate <typename Iterator>\nimage_view<...> interleaved_view(ptrdiff_t width, ptrdiff_t height, Iterator pixels, ptrdiff_t rowsize)\n\n```\n\n----------------------------------------\n\nTITLE: Initializing ndarrays from Python sequences in C++\nDESCRIPTION: This snippet demonstrates creating ndarrays from Python tuples and lists and optionally setting a dtype. It uses namespaces from Boost.Python and Boost.Numpy. The input is a Python sequence (tuple or list), and the output is an initialized ndarray.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/doc/numpy/tutorial/ndarray.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/python/numpy.hpp>\\n#include <iostream>\\n\\nnamespace p = boost::python;\\nnamespace np = boost::python::numpy;\\n\\nint main(int argc, char **argv)\\n{\\n  Py_Initialize();\\n  np::initialize();\n```\n\nLANGUAGE: C++\nCODE:\n```\np::object tu = p::make_tuple('a','b','c');\\nnp::ndarray example_tuple = np::array(tu);\n```\n\nLANGUAGE: C++\nCODE:\n```\np::list l;\\nl.append('a');\\nnp::ndarray example_list = np::array(l);\n```\n\nLANGUAGE: C++\nCODE:\n```\nnp::dtype dt = np::dtype::get_builtin<int>();\\nnp::ndarray example_list1 = np::array(l, dt);\n```\n\n----------------------------------------\n\nTITLE: Policy Set Event Hooks API (Outcome v2.2+)\nDESCRIPTION: Modern policy-based event hooks for intercepting result and outcome construction, copying, and moving operations. These hooks are implemented through custom NoValuePolicy.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/tutorial/advanced/hooks/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nvoid on_result_construction(T *, U &&) noexcept\nvoid on_outcome_construction(T *, U &&) noexcept\nvoid on_result_in_place_construction(T *, in_place_type_t<U>, Args &&...) noexcept\nvoid on_outcome_in_place_construction(T *, in_place_type_t<U>, Args &&...) noexcept\nvoid on_result_copy_construction(T *, U &&) noexcept\nvoid on_outcome_copy_construction(T *, U &&) noexcept\nvoid on_result_move_construction(T *, U &&) noexcept\nvoid on_outcome_move_construction(T *, U &&) noexcept\n```\n\n----------------------------------------\n\nTITLE: Throwing bad_result_access Exception for Missing Error in C++\nDESCRIPTION: This code snippet shows how the policy throws a bad_result_access exception when trying to access an error that isn't present in a basic_outcome object.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/policies/throw_bad_result_access.md#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_OUTCOME_THROW_EXCEPTION(bad_result_access(\"no error\"));\n```\n\n----------------------------------------\n\nTITLE: Using Direct Message Translation with Specific Domain\nDESCRIPTION: Shows how to use the direct translation interface with a specific domain. This example uses the dgettext function to translate an error message from the 'gui' domain.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/doc/messages_formatting.txt#2025-04-22_snippet_9\n\nLANGUAGE: C++\nCODE:\n```\nMessageBox(dgettext(\"gui\",\"Error Occurred\"));\n```\n\n----------------------------------------\n\nTITLE: Defining Views Compatibility Concept in C++\nDESCRIPTION: This concept ensures compatibility between two image views. It checks that two views have compatible pixel types and the same dimensions. Views with compatible scaling and adequate pixel dimensions can pair for image processing tasks like blend or transformation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/image_view.rst#2025-04-22_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\nconcept ViewsCompatibleConcept<ImageViewConcept V1, ImageViewConcept V2>\n{\n  where PixelsCompatibleConcept<V1::value_type, V2::value_type>;\n  where V1::num_dimensions == V2::num_dimensions;\n};\n\n```\n\n----------------------------------------\n\nTITLE: Defining reverse_replace template in C++\nDESCRIPTION: Template definition for the reverse_replace algorithm. It takes a Sequence, OldType, NewType, and an optional Inserter as template parameters. The algorithm returns a reversed copy of the original sequence with OldType replaced by NewType.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/reverse_replace.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      typename Sequence\n    , typename OldType\n    , typename NewType\n    , typename In = |unspecified|\n    >\nstruct reverse_replace\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Unpacking outcome in Layer3::z (C++)\nDESCRIPTION: This code snippet demonstrates how to unpack an `outcome<int>` returned from `Layer2_old::h()` in `Layer3::z()`. It checks if the outcome stores an `std::exception_ptr` and rethrows it if so. Otherwise, it checks if it stores an `std::error_code` and throws a `std::system_error` wrapping the error code.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/tutorial/essential/outcome/inspecting.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n \"auto o = old::h();\\nif (o.has_exception()) {\\n  std::rethrow_exception(o.exception());\\n} else if (o.has_error()) {\\n  throw std::system_error(o.error());\\n} else {\\n  return o.value();\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Linking Dependencies for ArangoDB Shell Library\nDESCRIPTION: Links required libraries to the arango_shell target, including basic utilities, system libraries, boost components, and fuerte.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/client-tools/Shell/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(arango_shell\n  arango_basic_utils\n  ${SYSTEM_LIBRARIES}\n  boost_system\n  boost_boost\n  fuerte\n)\n```\n\n----------------------------------------\n\nTITLE: Decay Function Object Synopsis in C++\nDESCRIPTION: A code synopsis showing the implementation of the 'decay' function object, which returns its input after decaying its type. This demonstrates the intended interface of the function.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/decay.hpp.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nstruct\n{\n    template<class T>\n    constexpr typename decay<T>::type operator()(T&& x) const\n    {\n        return boost::hof::forward<T>(x);\n    }\n} decay;\n```\n\n----------------------------------------\n\nTITLE: Declaring Lambda Functions with BOOST_HOF_STATIC_LAMBDA_FUNCTION in C++\nDESCRIPTION: Demonstrates how to declare lambda functions at global or namespace scope using BOOST_HOF_STATIC_LAMBDA_FUNCTION. This allows for a more concise syntax while maintaining proper initialization and ODR compliance.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/doc/src/gettingstarted.md.txt#2025-04-22_snippet_10\n\nLANGUAGE: cpp\nCODE:\n```\nBOOST_HOF_STATIC_LAMBDA_FUNCTION(sum) = [](auto x, auto y)\n{\n    return x + y;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining PageRank Template Function in Graph Namespace\nDESCRIPTION: Template function for computing PageRank with configurable parameters including graph, rank map, termination condition, and damping factor\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/page_rank.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nnamespace graph { \n  template<typename Graph, typename RankMap, typename Done>\n  inline void\n  page_rank(const Graph& g, RankMap rank_map, Done done, \n            typename property_traits<RankMap>::value_type damping = 0.85);\n\n  template<typename Graph, typename RankMap>\n  inline void\n  page_rank(const Graph& g, RankMap rank_map);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost Conversion Library Build with CMake\nDESCRIPTION: Sets up CMake configuration for Boost Conversion library with minimum CMake version requirements, project definition, and library dependencies. Creates an interface library with necessary Boost component linkages.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/conversion/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required( VERSION 3.5...3.20 )\nproject( boost_conversion VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX )\n\nadd_library( boost_conversion INTERFACE )\nadd_library( Boost::conversion ALIAS boost_conversion )\n\ntarget_include_directories( boost_conversion INTERFACE include )\n\ntarget_link_libraries( boost_conversion\n    INTERFACE\n        Boost::assert\n        Boost::config\n        Boost::core\n        Boost::smart_ptr\n        Boost::throw_exception\n        Boost::type_traits\n        Boost::typeof\n)\n```\n\n----------------------------------------\n\nTITLE: Determining Iterator Category in C++\nDESCRIPTION: This code snippet defines the logic for determining the iterator category based on the convertibility of the iterator to various traversal tags and iterator categories. It handles input, output, forward, bidirectional, and random access iterators, as well as different traversal tags.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/facade_iterator_category.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n*iterator-category*\\ (C,R,V) :=\n   if (C is convertible to std::input_iterator_tag\n       || C is convertible to std::output_iterator_tag\n   )\n       return C\n\n   else if (C is not convertible to incrementable_traversal_tag)\n       *the program is ill-formed*\n\n   else return a type X satisfying the following two constraints:\n\n      1. X is convertible to X1, and not to any more-derived\n         type, where X1 is defined by:\n\n           if (R is a reference type\n               && C is convertible to forward_traversal_tag)\n           {\n               if (C is convertible to random_access_traversal_tag)\n                   X1 = random_access_iterator_tag\n               else if (C is convertible to bidirectional_traversal_tag)\n                   X1 = bidirectional_iterator_tag\n               else\n                   X1 = forward_iterator_tag\n           }\n           else\n           {\n               if (C is convertible to single_pass_traversal_tag\n                   && R is convertible to V)\n                   X1 = input_iterator_tag\n               else\n                   X1 = C\n           }\n\n      2. |category-to-traversal|_\\ (X) is convertible to the most\n         derived traversal tag type to which X is also\n         convertible, and not to any more-derived traversal tag\n         type.\n```\n\n----------------------------------------\n\nTITLE: Using boost_unchecked<T, E> type alias in C++\nDESCRIPTION: A type alias to basic_result configured with boost::system::error_code and policy::all_narrow. Unlike the generic unchecked<T, E> type, this alias always references the boost edition.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/aliases/boost_unchecked.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nboost_unchecked<T, E = boost::system::error_code>\n```\n\n----------------------------------------\n\nTITLE: Defining upper_bound template in C++\nDESCRIPTION: Template definition for the upper_bound algorithm that finds the last position in a sorted sequence where a value can be inserted without violating the ordering. It takes a Sequence, a value T, and an optional predicate Pred.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/upper_bound.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      typename Sequence\n    , typename T\n    , typename Pred = less<_1,_2>\n    >\nstruct upper_bound\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Creating an empty n-dimensional array\nDESCRIPTION: This snippet demonstrates how to create an empty n-dimensional array with the defined shape and data type using NumPy functionality within C++. It allows for initializing an array that can be populated later.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/doc/html/numpy/_sources/tutorial/simple.rst.txt#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\n  np::ndarray b = np::empty(shape,dtype);\n```\n\n----------------------------------------\n\nTITLE: Setting Up Boost Dependencies for Boost.Nowide\nDESCRIPTION: Configures dependencies on Boost libraries, handling both superproject and standalone builds with appropriate linking.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/nowide/CMakeLists.txt#2025-04-22_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nif(BOOST_SUPERPROJECT_SOURCE_DIR OR TARGET Boost::config)\n  target_link_libraries(boost_nowide PUBLIC\n    Boost::config\n  )\nelse()\n  if(NOT TARGET Boost::boost)\n    # Default boost libs are static on windows and dynamic on linux\n    if(WIN32 AND NOT DEFINED Boost_USE_STATIC_LIBS)\n      set(Boost_USE_STATIC_LIBS ON)\n    endif()\n    find_package(Boost 1.56 REQUIRED)\n  endif()\n  target_link_libraries(boost_nowide PUBLIC Boost::boost)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Match Adaptor Template Structure in C++\nDESCRIPTION: Main template implementation of the match_adaptor that combines multiple function objects. It recursively inherits from both callable_base<F> and match_adaptor<Fs...> to enable function overloading through C++ resolution mechanisms.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/match.hpp.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<class F, class...Fs>\nstruct match_adaptor<F, Fs...> : detail::callable_base<F>, match_adaptor<Fs...>\n{\n    typedef match_adaptor<Fs...> base;\n    typedef match_adaptor fit_rewritable_tag;\n\n    struct failure\n    : failure_for<detail::callable_base<F>, Fs...>\n    {};\n\n    BOOST_HOF_INHERIT_DEFAULT(match_adaptor, detail::callable_base<F>, base);\n\n    template<class X, class... Xs, BOOST_HOF_ENABLE_IF_CONVERTIBLE(X, detail::callable_base<F>), BOOST_HOF_ENABLE_IF_CONSTRUCTIBLE(base, Xs...)>\n    constexpr match_adaptor(X&& f1, Xs&& ... fs) \n    : detail::callable_base<F>(BOOST_HOF_FORWARD(X)(f1)), base(BOOST_HOF_FORWARD(Xs)(fs)...)\n    {}\n\n    using F::operator();\n    using base::operator();\n};\n```\n\n----------------------------------------\n\nTITLE: Channel Value Concept Definition\nDESCRIPTION: Defines the ChannelValueConcept in C++. This concept refines the ChannelConcept by adding the requirement of Regular. Channels that are regular types support default construction.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/channel.rst#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\n  concept ChannelValueConcept<ChannelConcept T> : Regular<T> {};\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost.Outcome Library Build\nDESCRIPTION: Sets up CMake configuration for Boost.Outcome library including version requirements, dependencies, and build settings. Defines an interface library with required Boost dependencies and C++14 requirement.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.16)\n\nproject(boost_outcome VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n\nadd_library(boost_outcome INTERFACE)\nadd_library(Boost::outcome ALIAS boost_outcome)\n\ntarget_include_directories(boost_outcome INTERFACE include)\n\ntarget_link_libraries(boost_outcome\n  INTERFACE\n    Boost::config\n    Boost::exception\n    Boost::system\n    Boost::throw_exception\n)\n\ntarget_compile_features(boost_outcome\n  INTERFACE\n    cxx_std_14\n)\n\nif(BUILD_TESTING AND EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/test/CMakeLists.txt\")\n\n  add_subdirectory(test)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting VocBase Include Directories\nDESCRIPTION: Configures the private include directories for the arango_vocbase library, including main arangod directory and enterprise includes.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/VocBase/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(arango_vocbase PRIVATE\n  \"${PROJECT_SOURCE_DIR}/arangod\"\n  \"${PROJECT_SOURCE_DIR}/${ENTERPRISE_INCLUDE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Defining Image Read Info Structure for Custom Format\nDESCRIPTION: Template specialization that defines the structure for holding read information specific to the new format. Should be filled and returned by the get_info member of the reader class.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/io.rst#2025-04-22_snippet_10\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate<> struct image_read_info< xxx_tag > {};\n```\n\n----------------------------------------\n\nTITLE: Configuring ArangoBackup Executable Build in CMake\nDESCRIPTION: This CMake snippet configures the build process for the ArangoBackup executable. It specifies source files, include directories, linked libraries, and installation instructions. The build is only performed when USE_ENTERPRISE is enabled.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/client-tools/Backup/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (USE_ENTERPRISE)\n\n  add_executable(${BIN_ARANGOBACKUP}\n    ${ProductVersionFiles_arangobackup}\n    BackupFeature.cpp\n    arangobackup.cpp\n  )\n  target_include_directories(${BIN_ARANGOBACKUP} PRIVATE ${PROJECT_SOURCE_DIR}/client-tools)\n  target_include_directories(${BIN_ARANGOBACKUP} PRIVATE ${PROJECT_SOURCE_DIR}/arangod)\n\n  target_link_libraries(${BIN_ARANGOBACKUP}\n    ${SYSTEM_LIBRARIES}\n    boost_system\n    boost_boost\n    arango_shell\n    clienttools_utils\n    fuerte\n  )\n\n  install(\n    TARGETS ${BIN_ARANGOBACKUP}\n    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR})\n\n  install_config(${BIN_ARANGOBACKUP})\n\n  add_dependencies(${BIN_ARANGOBACKUP} zlibstatic)\n\n  # use ICU 64 for the client tools\n  add_dependencies(${BIN_ARANGOBACKUP} iculegacy_build)\n\n  if (USE_JEMALLOC)\n    add_dependencies(${BIN_ARANGOBACKUP} jemalloc_build)\n  endif ()\n\n  add_dependencies(${BIN_ARANGOBACKUP} man)\nendif () # USE_ENTERPRISE\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for WebSocket Chat Server Application\nDESCRIPTION: Configures the build process for a multi-client WebSocket chat server application. It groups source files, defines the executable target, sets up dependencies on Boost.Beast and Asio libraries, and organizes the project structure.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/beast/example/websocket/server/chat-multi/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nGroupSources(include/boost/beast beast)\nGroupSources(example/websocket/server/chat-multi \"/\")\n\nfile (GLOB APP_FILES\n  beast.hpp\n  http_session.cpp\n  http_session.hpp\n  Jamfile\n  listener.cpp\n  listener.hpp\n  main.cpp\n  net.hpp\n  shared_state.cpp\n  shared_state.hpp\n  websocket_session.cpp\n  websocket_session.hpp\n  chat_client.html\n  README.md\n)\n\nsource_group (\"\" FILES ${APP_FILES})\n\nadd_executable (websocket-chat-multi\n    ${APP_FILES}\n    ${BOOST_BEAST_FILES}\n)\n\ntarget_link_libraries(websocket-chat-multi\n    lib-asio\n    lib-beast)\n\nset_property(TARGET websocket-chat-multi PROPERTY FOLDER \"example-websocket-server\")\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket Client Executable in CMake\nDESCRIPTION: CMake configuration that sets up a WebSocket client executable using Boost Beast and Asio libraries. The configuration groups source files, defines the executable target with required source files, links necessary libraries, and sets the project folder structure.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/beast/example/websocket/client/coro/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nGroupSources(include/boost/beast beast)\nGroupSources(example/websocket/client/coro \"/\")\n\nadd_executable (websocket-client-coro\n    ${BOOST_BEAST_FILES}\n    Jamfile\n    websocket_client_coro.cpp\n)\n\ntarget_link_libraries(websocket-client-coro\n    lib-asio\n    lib-beast)\n\nset_property(TARGET websocket-client-coro PROPERTY FOLDER \"example-websocket-client\")\n```\n\n----------------------------------------\n\nTITLE: Finding Text Segment in C++ using Boost.Locale\nDESCRIPTION: Demonstrates how to use ssegment_index to find a specific text segment in a string. It creates a word segmentation index and locates the segment containing a specific character position.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/doc/boundary_analysys.txt#2025-04-22_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\ntext=\"to be or \";\nssegment_index map(word,text.begin(),text.end(),gen(\"en_US.UTF-8\"));\nssegment_index::iterator  p = map.find(text.begin() + 4);\nif(p!=map.end())\n    std::cout << *p << std::endl;\n```\n\n----------------------------------------\n\nTITLE: Using iter_fold_if with Boost MPL in C++\nDESCRIPTION: This example uses the `iter_fold` as a base for determining the maximum element in a list of integers using conditional iteration. It showcases folding from a start iterator, processing with a conditional operation, and confirms the result by a static assertion. Prerequisite: Boost MPL library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/iter_fold_if.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ntypedef list_c<int,5,-1,0,7,2,0,-5,4> numbers;\ntypedef iter_fold<\n      numbers\n    , begin<numbers>::type\n    , if_< less< deref<_1>, deref<_2> >,_2,_1 >\n    >::type max_element_iter;\n\nBOOST_STATIC_ASSERT(max_element_iter::type::value == 7);\n```\n\n----------------------------------------\n\nTITLE: Boost Parameter Constructor Implementation\nDESCRIPTION: Example of using BOOST_PARAMETER macros to implement a constructor with named parameters and inheritance. Shows backend class templates with parameter requirements.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_89\n\nLANGUAGE: cpp\nCODE:\n```\nstruct D\n{\n    D()\n    {\n    }\n\n    BOOST_PARAMETER_NO_SPEC_CONST_FUNCTION_CALL_OPERATOR((bool))\n    {\n        BOOST_TEST_EQ(\n            passed_by_lvalue_reference_to_const\n          , U::evaluate_category<0>(args[_lrc])\n        );\n        BOOST_TEST_EQ(\n            passed_by_lvalue_reference\n          , U::evaluate_category<1>(args[_lr])\n        );\n        BOOST_TEST_EQ(\n            passed_by_rvalue_reference_to_const\n          , U::evaluate_category<2>(\n                args[_rrc | rvalue_const_bitset<2>()]\n            )\n        );\n        BOOST_TEST_EQ(\n            passed_by_rvalue_reference\n          , U::evaluate_category<3>(\n                args[_rr | rvalue_bitset<3>()]\n            )\n        );\n\n        return true;\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing the Value Type of an Integral Sequence Wrapper\nDESCRIPTION: Demonstrates how to access the value_type of an Integral Sequence Wrapper, which is the integral type T used to create the sequence.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/IntegralSequenceWrapper.rst#2025-04-22_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\ntypedef seq_c<T, c1...cn>::value_type t;\ntypedef seq_n_c<T, c1...cn>::value_type t;\n```\n\n----------------------------------------\n\nTITLE: Integrating boost::locale::format with message translation\nDESCRIPTION: This example demonstrates how to use boost::locale::format with the translate function for localized message formatting.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/doc/localized_text_formatting.txt#2025-04-22_snippet_7\n\nLANGUAGE: C++\nCODE:\n```\ncout<< format(translate(\"Adding {1} to {2}, we get {3}\")) % a % b % (a+b) << endl;\n```\n\n----------------------------------------\n\nTITLE: Vertex Degree Calculation in C++\nDESCRIPTION: Functions for calculating in and out degree of vertices in the graph. Vertex must be local to the executing process.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/distributed_adjacency_list.rst#2025-04-22_snippet_14\n\nLANGUAGE: C++\nCODE:\n```\ndegree_size_type\nout_degree(vertex_descriptor u, const adjacency_list& g);\n\ndegree_size_type\nin_degree(vertex_descriptor u, const adjacency_list& g);\n```\n\n----------------------------------------\n\nTITLE: Defining the Boost Ptr List Class\nDESCRIPTION: This code snippet defines the ptr_list class template within the Boost namespace. It inherits from ptr_sequence_adapter and employs an std::list to manage void pointers. Essential methods like push_front and pop_front are declared, offering strong exception safety guarantees.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/ptr_list.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nnamespace boost\n{\n\ttemplate\n\t< \n\t\tclass T, \n\t\tclass CloneAllocator = heap_clone_allocator,\n\t\tclass Allocator      = std::allocator<void*>\n\t>\n\tclass ptr_list : public ptr_sequence_adapter\n\t\t\t\t\t\t\t<\n\t\t\t\t\t\t\t\tT,\n\t\t\t\t\t\t\t\tstd::list<void*,Allocator>,\n\t\t\t\t\t\t\t\tCloneAllocator\n\t\t\t\t\t\t\t>\n\t{\n\t\n\tpublic: // modifiers_\n\t\tvoid                push_front( T* x );\n\t\ttemplate< class U >\n\t\tvoid                push_front( compatible-smart-ptr<U> x );\n\t\tauto_type           pop_front();\n\t \n\tpublic: // `list operations`_\n\t\tvoid  reverse();\n\n\t}; // class 'ptr_list'\n\n} // namespace 'boost'\n```\n\n----------------------------------------\n\nTITLE: Implementing Is Implicit Callable Check in C++\nDESCRIPTION: Defines a type trait 'is_implicit_callable' to check if a function can be implicitly called with given parameters and return type.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/implicit.hpp.txt#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<class F, class Pack, class X, class=void>\nstruct is_implicit_callable\n: std::false_type\n{};\n\n#if BOOST_HOF_NO_EXPRESSION_SFINAE\ntemplate<class F, class Pack, class X>\nstruct is_implicit_callable<F, Pack, X, typename std::enable_if<\n    std::is_convertible<typename result_of<Pack, id_<F>>::type, X>::value\n>::type>\n: std::true_type\n{};\n#else\ntemplate<class F, class Pack, class X>\nstruct is_implicit_callable<F, Pack, X, typename std::enable_if<\n    std::is_convertible<decltype(std::declval<Pack>()(std::declval<F>())), X>::value\n>::type>\n: std::true_type\n{};\n#endif\n```\n\n----------------------------------------\n\nTITLE: Throwing filesystem_error with Payload - C++\nDESCRIPTION: This snippet demonstrates how to configure the Outcome library to throw a filesystem_error with the payload indicating failing paths. It utilizes the Outcome framework to manage the state of the filesystem operations and respond appropriately when errors occur.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/tutorial/advanced/payload/copy_file3.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n#include <outcome.hpp>\n\nvoid try_throw_std_exception_from_error(std::error_code ec, const std::string &msg = std::string{}) {\n    if (ec) {\n        throw std::filesystem::filesystem_error(msg, ec);\n    }\n}\n\n// Usage of this function inside your filesystem operations.\n\n```\n\n----------------------------------------\n\nTITLE: Writing Image Views with Tags in C++\nDESCRIPTION: This C++ code snippet illustrates writing an image view to a file using the `write_view` function. It demonstrates how to specify the filename, the image view, and a tag (e.g., `tiff_tag`) to define the output format.  The view is extracted from an `any_image` object.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/io.rst#2025-04-22_snippet_8\n\nLANGUAGE: c++\nCODE:\n```\n    typedef mpl::vector< gray8_image_t\n                       , gray16_image_t\n                       , rgb8_image_t\n                       , rgba_image_t\n                       > my_img_types;\n\n\n    any_image< my_img_types > runtime_image;\n\n    // fill any_image\n\n    write_view( filename\n              , view( runtime_image )\n              , tiff_tag()\n              );\n```\n\n----------------------------------------\n\nTITLE: BOOST_MPL_HAS_XXX_TEMPLATE_NAMED_DEF Example Usage\nDESCRIPTION: Example demonstrating how to use the BOOST_MPL_HAS_XXX_TEMPLATE_NAMED_DEF macro to define a has_xxx metafunction that detects nested templates. The example shows testing against various struct types to verify detection behavior.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/HAS_XXX_TEMPLATE_NAMED_DEF.rst#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nBOOST_MPL_HAS_XXX_TEMPLATE_NAMED_DEF(\n    has_xxx, xxx, false\n)\n\nstruct test1  {};\nstruct test2  { void xxx(); };\nstruct test3  { int xxx; };\nstruct test4  { static int xxx(); };\nstruct test5  { typedef int xxx; };\nstruct test6  { struct xxx; };\nstruct test7  { typedef void (\\*xxx)(); };\nstruct test8  { typedef void (xxx)(); };\nstruct test9  { template< class T > struct xxx {}; };\n\nBOOST_MPL_ASSERT_NOT(( has_xxx<test1> ));\nBOOST_MPL_ASSERT_NOT(( has_xxx<test2> ));\nBOOST_MPL_ASSERT_NOT(( has_xxx<test3> ));\nBOOST_MPL_ASSERT_NOT(( has_xxx<test4> ));\nBOOST_MPL_ASSERT_NOT(( has_xxx<test5> ));\nBOOST_MPL_ASSERT_NOT(( has_xxx<test6> ));\nBOOST_MPL_ASSERT_NOT(( has_xxx<test7> ));\nBOOST_MPL_ASSERT_NOT(( has_xxx<test8> ));\n\n#if !defined(BOOST_MPL_CFG_NO_HAS_XXX_TEMPLATE)\nBOOST_MPL_ASSERT(( has_xxx<test9> ));\n#endif\n\nBOOST_MPL_ASSERT(( has_xxx<test9, true\\_> ));\n```\n\n----------------------------------------\n\nTITLE: Creating Boost Serialization Libraries with CMake\nDESCRIPTION: Defines two main library targets, boost_serialization and boost_wserialization (wide character version), listing all their component source files. These libraries provide serialization functionality for C++ objects.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/serialization/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(boost_serialization\n  src/archive_exception.cpp\n  src/basic_archive.cpp\n  src/basic_iarchive.cpp\n  src/basic_iserializer.cpp\n  src/basic_oarchive.cpp\n  src/basic_oserializer.cpp\n  src/basic_pointer_iserializer.cpp\n  src/basic_pointer_oserializer.cpp\n  src/basic_serializer_map.cpp\n  src/basic_text_iprimitive.cpp\n  src/basic_text_oprimitive.cpp\n  src/basic_xml_archive.cpp\n  src/binary_iarchive.cpp\n  src/binary_oarchive.cpp\n  src/codecvt_null.cpp\n  src/extended_type_info.cpp\n  src/extended_type_info_no_rtti.cpp\n  src/extended_type_info_typeid.cpp\n  src/polymorphic_binary_iarchive.cpp\n  src/polymorphic_binary_oarchive.cpp\n  src/polymorphic_iarchive.cpp\n  src/polymorphic_oarchive.cpp\n  src/polymorphic_text_iarchive.cpp\n  src/polymorphic_text_oarchive.cpp\n  src/polymorphic_xml_iarchive.cpp\n  src/polymorphic_xml_oarchive.cpp\n  src/stl_port.cpp\n  src/text_iarchive.cpp\n  src/text_oarchive.cpp\n  src/utf8_codecvt_facet.cpp\n  src/void_cast.cpp\n  src/xml_archive_exception.cpp\n  src/xml_grammar.cpp\n  src/xml_iarchive.cpp\n  src/xml_oarchive.cpp\n)\n\nadd_library(boost_wserialization\n  src/basic_text_wiprimitive.cpp\n  src/basic_text_woprimitive.cpp\n  src/binary_wiarchive.cpp\n  src/binary_woarchive.cpp\n  src/polymorphic_text_wiarchive.cpp\n  src/polymorphic_text_woarchive.cpp\n  src/polymorphic_xml_wiarchive.cpp\n  src/polymorphic_xml_woarchive.cpp\n  src/text_wiarchive.cpp\n  src/text_woarchive.cpp\n  src/xml_wgrammar.cpp\n  src/xml_wiarchive.cpp\n  src/xml_woarchive.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Snappy Include Directory\nDESCRIPTION: This snippet sets the `SNAPPY_INCLUDE_DIR` variable and adds it as a public include directory for the `arango_rocksdb` library. It allows the `arango_rocksdb` library to find the necessary header files for the Snappy compression library, which is used for data compression within RocksDB.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/RocksDBEngine/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(SNAPPY_INCLUDE_DIR \"${SNAPPY_SOURCE_DIR};${SNAPPY_BUILD_DIR}\" CACHE PATH \"relation to snappy\")\ntarget_include_directories(arango_rocksdb PUBLIC ${SNAPPY_INCLUDE_DIR})\n```\n\n----------------------------------------\n\nTITLE: Creating a C++ Array and Converting to ndarray\nDESCRIPTION: Creates a static array in C++ and converts it into a numpy ndarray using the from_data method of boost::python::numpy. This bridges the data between C++ and Python.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/doc/numpy/tutorial/fromdata.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nint arr[] = {1,2,3,4,5};\nnp::ndarray py_array = np::from_data(arr, np::dtype::get_builtin<int>(),\n                                     p::make_tuple(5),\n\t\t\t     p::make_tuple(sizeof(int)),\n\t\t\t     p::object());\n```\n\n----------------------------------------\n\nTITLE: Including Boost MPL List Headers in C++\nDESCRIPTION: Shows how to include the necessary headers for using Boost MPL lists, both for variadic and numbered forms.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/list.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/list.hpp>\n```\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/list/list<n>.hpp>\n```\n\n----------------------------------------\n\nTITLE: Managing MPI Process Groups in C++ with Boost\nDESCRIPTION: This C++ code snippet defines the `mpi_process_group` class within the `boost::graph::distributed` namespace. It provides constructors for creating MPI process groups using Boost MPI communicators. Key functionalities include message passing (send, receive), process querying, and synchronization across distributed nodes. Dependencies include the Boost MPI library and suitable configurations for MPI environments. Inputs include optional communicator settings or performance tuning parameters, and outputs involve diverse communication actions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/mpi_bsp_process_group.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nnamespace boost { namespace graph { namespace distributed {\n\n  class mpi_process_group \n  {\n  public:\n    typedef boost::mpi::communicator communicator_type;\n    \n    // Process group constructors\n    mpi_process_group(communicator_type comm = communicator_type());\n    mpi_process_group(std::size_t num_headers, std::size_t buffer_size, \n                      communicator_type comm = communicator_type());\n    \n    mpi_process_group();\n    mpi_process_group(const mpi_process_group&, boost::parallel::attach_distributed_object);\n\n    // Triggers\n    template<typename Type, typename Handler>\n      void trigger(int tag, const Handler& handler);\n\n    template<typename Type, typename Handler>\n      void trigger_with_reply(int tag, const Handler& handler);\n\n    trigger_receive_context trigger_context() const;\n\n    // Helper operations\n    void poll();\n    mpi_process_group base() const;\n  };\n\n  // Process query\n  int process_id(const mpi_process_group&);\n  int num_processes(const mpi_process_group&);\n\n  // Message transmission\n  template<typename T>\n    void send(const mpi_process_group& pg, int dest, int tag, const T& value);\n\n  template<typename T>\n    void receive(const mpi_process_group& pg, int source, int tag, T& value);\n\n  optional<std::pair<int, int> > probe(const mpi_process_group& pg);\n\n  // Synchronization\n  void synchronize(const mpi_process_group& pg);\n\n  // Out-of-band communication\n  template<typename T>\n    void send_oob(const mpi_process_group& pg, int dest, int tag, const T& value);\n\n  template<typename T, typename U>\n    void \\\n    send_oob_with_reply(const mpi_process_group& pg, int dest, int\\\n                        tag, const T& send_value, U& receive_value);\n\n  template<typename T>\n    void receive_oob(const mpi_process_group& pg, int source, int tag, T& value);\n\n  } } }\n```\n\n----------------------------------------\n\nTITLE: Setting Architecture Detection for ArangoDB Debug Package\nDESCRIPTION: Determines the target architecture for the debug package based on the CMAKE_TARGET_ARCHITECTURES variable. Maps common architecture identifiers (x86_64, aarch64, armv7) to Debian package architecture names (amd64, arm64, armhf).\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/cmake/packages/dbg/deb.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(CMAKE_TARGET_ARCHITECTURES MATCHES \".*x86_64.*\")\n  set(ARANGODB_PACKAGE_ARCHITECTURE \"amd64\")\nelseif(CMAKE_TARGET_ARCHITECTURES MATCHES \"aarch64\")\n  set(ARANGODB_PACKAGE_ARCHITECTURE \"arm64\")\nelseif(CMAKE_TARGET_ARCHITECTURES MATCHES \"armv7\")\n  set(ARANGODB_PACKAGE_ARCHITECTURE \"armhf\")\nelse()\n  set(ARANGODB_PACKAGE_ARCHITECTURE \"i386\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Pointee Type Resolution Algorithm in C++\nDESCRIPTION: Algorithm that determines the type member based on properties of the Dereferenceable type. Considers whether increment is well-formed and checks the mutability of the dereferenced value.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/pointee_ref.rst#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nif ( ++x is ill-formed )\n{\n    return ``Dereferenceable::element_type``\n}\nelse if (``*x`` is a mutable reference to\n         std::iterator_traits<Dereferenceable>::value_type)\n{\n    return iterator_traits<Dereferenceable>::value_type\n}\nelse\n{\n    return iterator_traits<Dereferenceable>::value_type const\n}\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Sentence Boundary Points in C++ with Boost.Locale\nDESCRIPTION: Shows how to use sboundary_point_index to iterate over sentence boundaries in a text. It creates a sentence boundary index and counts the first two sentence boundaries.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/doc/boundary_analysys.txt#2025-04-22_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\nusing namespace boost::locale::boundary;\nboost::locale::generator gen;\n\n// our text sample\nstd::string const text=\"First sentence. Second sentence! Third one?\";\n// Create an index \nsboundary_point_index map(sentence,text.begin(),text.end(),gen(\"en_US.UTF-8\"));\n\n// Count two boundary points\nsboundary_point_index::iterator p = map.begin(),e=map.end();\nint count = 0;\nwhile(p!=e && count < 2) {\n    ++count;\n    ++p;\n}\n\nif(p!=e) {\n    std::cout   << \"First two sentences are: \" \n                << std::string(text.begin(),p->iterator()) \n                << std::endl;\n}\nelse {\n    std::cout   <<\"There are less then two sentences in this \"\n                <<\"text: \" << text << std::endl;\n}\n```\n\n----------------------------------------\n\nTITLE: Improving the Print Function with Constrained Range Overload in C++\nDESCRIPTION: Adds constraints to the range overload using decltype and the adl_begin helper to ensure proper overload resolution.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/doc/src/example_print.md.txt#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_HOF_STATIC_LAMBDA_FUNCTION(print) = first_of(\n    [](const auto& x) -> decltype(std::cout << x, void())\n    {\n        std::cout << x << std::endl;\n    },\n    [](const auto& range) -> decltype(std::cout << *adl::adl_begin(range), void())\n    {\n        for(const auto& x:range) std::cout << x << std::endl;\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Manipulating Python Objects from C++ with the Object Interface\nDESCRIPTION: C++ code showing intuitive interactions with Python objects, including automatic type conversions and operator overloading.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/doc/article.rst#2025-04-22_snippet_23\n\nLANGUAGE: C++\nCODE:\n```\nobject ten_Os = 10 * s[4]; // -> \"oooooooooo\"\n```\n\n----------------------------------------\n\nTITLE: Including Boost Pointer Container Classes\nDESCRIPTION: This code lists various header files to include from the Boost Pointer Container Library. Each header corresponds to a specific class or functionality, enabling users to utilize pointer container features in C++. The headers include classes for different container types such as deque, list, vector, and set, along with their serialization support.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/headers.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n\"<boost/ptr_container/clone_allocator.hpp>\"\n```\n\nLANGUAGE: C++\nCODE:\n```\n\"<boost/ptr_container/ptr_deque.hpp>\"\n```\n\nLANGUAGE: C++\nCODE:\n```\n\"<boost/ptr_container/ptr_list.hpp>\"\n```\n\nLANGUAGE: C++\nCODE:\n```\n\"<boost/ptr_container/ptr_vector.hpp>\"\n```\n\nLANGUAGE: C++\nCODE:\n```\n\"<boost/ptr_container/ptr_array.hpp>\"\n```\n\nLANGUAGE: C++\nCODE:\n```\n\"<boost/ptr_container/ptr_set.hpp>\"\n```\n\nLANGUAGE: C++\nCODE:\n```\n\"<boost/ptr_container/ptr_map.hpp>\"\n```\n\nLANGUAGE: C++\nCODE:\n```\n\"<boost/ptr_container/ptr_inserter.hpp>\"\n```\n\nLANGUAGE: C++\nCODE:\n```\n\"<boost/ptr_container/ptr_container.hpp>\"\n```\n\nLANGUAGE: C++\nCODE:\n```\n\"<boost/ptr_container/ptr_sequence_adapter.hpp>\"\n```\n\nLANGUAGE: C++\nCODE:\n```\n\"<boost/ptr_container/ptr_set_adapter.hpp>\"\n```\n\nLANGUAGE: C++\nCODE:\n```\n\"<boost/ptr_container/ptr_map_adapter.hpp>\"\n```\n\nLANGUAGE: C++\nCODE:\n```\n\"<boost/ptr_container/exception.hpp>\"\n```\n\nLANGUAGE: C++\nCODE:\n```\n\"<boost/ptr_container/indirect_fun.hpp>\"\n```\n\nLANGUAGE: C++\nCODE:\n```\n\"<boost/ptr_container/nullable.hpp>\"\n```\n\nLANGUAGE: C++\nCODE:\n```\n\"<boost/ptr_container/serialize_ptr_deque.hpp>\"\n```\n\nLANGUAGE: C++\nCODE:\n```\n\"<boost/ptr_container/serialize_ptr_list.hpp>\"\n```\n\nLANGUAGE: C++\nCODE:\n```\n\"<boost/ptr_container/serialize_ptr_vector.hpp>\"\n```\n\nLANGUAGE: C++\nCODE:\n```\n\"<boost/ptr_container/serialize_ptr_array.hpp>\"\n```\n\nLANGUAGE: C++\nCODE:\n```\n\"<boost/ptr_container/serialize_ptr_set.hpp>\"\n```\n\nLANGUAGE: C++\nCODE:\n```\n\"<boost/ptr_container/serialize_ptr_map.hpp>\"\n```\n\nLANGUAGE: C++\nCODE:\n```\n\"<boost/ptr_container/serialize_ptr_container.hpp>\"\n```\n\n----------------------------------------\n\nTITLE: Combine Adaptor Base Implementation in C++\nDESCRIPTION: Defines the core implementation of the combine adaptor base class, which inherits from the main function F and a pack of functions Gs. It implements the function call operator that applies each function to its corresponding argument.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/combine.hpp.txt#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<class S, class F, class... Gs>\nstruct combine_adaptor_base;\n\ntemplate<std::size_t... Ns, class F, class... Gs>\nstruct combine_adaptor_base<seq<Ns...>, F, Gs...>\n: F, pack_base<seq<Ns...>, Gs...>\n{\n    typedef pack_base<seq<Ns...>, Gs...> base_type;\n\n    BOOST_HOF_INHERIT_DEFAULT(combine_adaptor_base, base_type, F)\n\n    template<class X, class... Xs, \n        BOOST_HOF_ENABLE_IF_CONSTRUCTIBLE(F, X),\n        BOOST_HOF_ENABLE_IF_CONSTRUCTIBLE(base_type, Xs...)>\n    constexpr combine_adaptor_base(X&& x, Xs&&... xs) \n    : F(BOOST_HOF_FORWARD(X)(x)), base_type(BOOST_HOF_FORWARD(Xs)(xs)...)\n    {}\n\n    template<class... Ts>\n    constexpr const F& base_function(Ts&&... xs) const\n    {\n        return boost::hof::always_ref(*this)(xs...);\n    }\n\n    BOOST_HOF_RETURNS_CLASS(combine_adaptor_base);\n\n// Result needs to be calculated in a separate class to avoid confusing the\n// compiler on MSVC\n#if BOOST_HOF_NO_EXPRESSION_SFINAE || BOOST_HOF_HAS_MANUAL_DEDUCTION\n    template<class... Ts>\n    struct combine_result\n    : result_of<const F&,  result_of<const Gs&, id_<Ts>>...>\n    {};\n#endif\n\n    template<class... Ts>\n#if BOOST_HOF_NO_EXPRESSION_SFINAE || BOOST_HOF_HAS_MANUAL_DEDUCTION\n    constexpr typename combine_result<Ts...>::type\n#else\n    constexpr auto\n#endif\n    operator()(Ts&&... xs) const BOOST_HOF_SFINAE_MANUAL_RETURNS\n    (\n        (BOOST_HOF_MANGLE_CAST(const F&)(BOOST_HOF_CONST_THIS->base_function(xs...)))\n            (boost::hof::alias_value<pack_tag<seq<Ns>, Gs...>, Gs>(*BOOST_HOF_CONST_THIS, xs)(BOOST_HOF_FORWARD(Ts)(xs))...)\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Snappy Library in CMake\nDESCRIPTION: Sets up the main Snappy library target, including source files, include directories, and version properties. It also handles shared library configuration and compiler definitions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/snappy/snappy-1.1.9/CMakeLists.txt#2025-04-22_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(snappy \"\")\ntarget_sources(snappy\n  PRIVATE\n    \"snappy-internal.h\"\n    \"snappy-stubs-internal.h\"\n    \"snappy-c.cc\"\n    \"snappy-sinksource.cc\"\n    \"snappy-stubs-internal.cc\"\n    \"snappy.cc\"\n    \"${PROJECT_BINARY_DIR}/config.h\"\n\n  # Only CMake 3.3+ supports PUBLIC sources in targets exported by \"install\".\n  $<$<VERSION_GREATER:CMAKE_VERSION,3.2>:PUBLIC>\n    $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/snappy-c.h>\n    $<INSTALL_INTERFACE:include/snappy-c.h>\n    $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/snappy-sinksource.h>\n    $<INSTALL_INTERFACE:include/snappy-sinksource.h>\n    $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/snappy.h>\n    $<INSTALL_INTERFACE:include/snappy.h>\n    $<BUILD_INTERFACE:${PROJECT_BINARY_DIR}/snappy-stubs-public.h>\n    $<INSTALL_INTERFACE:include/snappy-stubs-public.h>\n)\ntarget_include_directories(snappy\n  PUBLIC\n    $<BUILD_INTERFACE:${PROJECT_BINARY_DIR}>\n    $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}>\n    $<INSTALL_INTERFACE:include>\n)\nset_target_properties(snappy\n  PROPERTIES VERSION ${PROJECT_VERSION} SOVERSION ${PROJECT_VERSION_MAJOR})\n\ntarget_compile_definitions(snappy PRIVATE -DHAVE_CONFIG_H)\nif(BUILD_SHARED_LIBS)\n  set_target_properties(snappy PROPERTIES WINDOWS_EXPORT_ALL_SYMBOLS ON)\nendif(BUILD_SHARED_LIBS)\n```\n\n----------------------------------------\n\nTITLE: Returning Failure from Outcome in C++\nDESCRIPTION: This method returns the output from free function failure() containing a move from any errored and/or excepted state, leaving the outcome's error and exception values in a moved-from state. The moved states can be accessed through assume_error() and assume_exception() methods.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/basic_outcome/as_failure_rvalue.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nfailure_type<error_type, exception_type> as_failure() &&\n```\n\n----------------------------------------\n\nTITLE: Complete BOOST_PARAMETER_MEMBER_FUNCTION Implementation Example in C++\nDESCRIPTION: A complete example of implementing a class with a parameterized static member function using the BOOST_PARAMETER_MEMBER_FUNCTION macro. Shows how to handle required and optional parameters with deduction.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_21\n\nLANGUAGE: C++\nCODE:\n```\nstruct B\n{\n    BOOST_PARAMETER_MEMBER_FUNCTION((bool), static evaluate, kw,\n        (deduced\n            (required\n                (lrc, (|std_bitset|_\\<1>))\n                (lr, (|std_bitset|_\\<2>))\n            )\n            (optional\n                (rrc, (|std_bitset|_\\<3>), rvalue_const_bitset<2>())\n                (rr, (|std_bitset|_\\<4>), rvalue_bitset<3>())\n            )\n        )\n    )\n    {\n        BOOST_TEST_EQ(\n            passed_by_lvalue_reference_to_const\n          , U::evaluate_category<0>(lrc)\n        );\n        BOOST_TEST_EQ(\n            passed_by_lvalue_reference\n          , U::evaluate_category<1>(lr)\n        );\n        BOOST_TEST_EQ(\n            passed_by_rvalue_reference_to_const\n          , U::evaluate_category<2>(|std_forward|_\\<rrc0_type>(rrc0))\n        );\n        BOOST_TEST_EQ(\n            passed_by_rvalue_reference\n          , U::evaluate_category<3>(args[_rr0])\n        );\n\n        return true;\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Variadic Max Function using Boost.HOF\nDESCRIPTION: This snippet demonstrates how to implement a variadic max function using Boost.HOF's fold adaptor and LIFT adaptor.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/doc/src/point_free.md.txt#2025-04-22_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_HOF_STATIC_FUNCTION(max) = fold(BOOST_HOF_LIFT(std::max));\n```\n\n----------------------------------------\n\nTITLE: Defining Non-Distributed Betweenness Centrality with Named Parameters in C++\nDESCRIPTION: This snippet defines a template function for calculating the betweenness centrality of a graph's vertices using named parameters, allowing customization of various aspects of the computation through the Boost Graph Library. The parameters include process groups, graphs, centrality maps, and buffers for sources.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/non_distributed_betweenness_centrality.rst#2025-04-22_snippet_0\n\nLANGUAGE: c++\nCODE:\n```\ntemplate<typename ProcessGroup, typename Graph, typename Param, typename Tag, typename Rest>\nvoid \nnon_distributed_brandes_betweenness_centrality(const ProcessGroup& pg, const Graph& g, \n                                                 const bgl_named_params<Param,Tag,Rest>& params);\n```\n\n----------------------------------------\n\nTITLE: Returning Twice the Value of Index Parameter using Boost.Parameter\nDESCRIPTION: This snippet demonstrates how to define a named parameter \"index\" using `BOOST_PARAMETER_NAME` and how to access its value within a function using `boost::parameter::value_type`. The function `twice_index` returns twice the value of the \"index\" parameter, using a default value of 42 if the parameter is not provided.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/index.rst#2025-04-22_snippet_40\n\nLANGUAGE: cpp\nCODE:\n```\n        BOOST_PARAMETER_NAME(index)\n\n    template <typename ArgumentPack>\n    typename boost::parameter::value_type<ArgumentPack,tag::index,int>::type\n        twice_index(ArgumentPack const& args)\n    {\n        return 2 * args[_index | 42];\n    }\n```\n\nLANGUAGE: cpp\nCODE:\n```\n    #include <boost/parameter.hpp>\n    \n```\n\nLANGUAGE: cpp\nCODE:\n```\n    #include <boost/core/lightweight_test.hpp>\n\n    int main()\n    {\n        int six = twice_index(_index = 3);\n        BOOST_TEST_EQ(six, 6);\n        return boost::report_errors();\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring ArangoDB Graph Tests Library\nDESCRIPTION: Creates an object library 'arango_tests_graph' containing various graph-related test source files. Includes test implementations for traverser cache, path finding algorithms, queues, and graph providers.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/Graph/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(arango_tests_graph OBJECT\n        ClusterTraverserCacheTest.cpp\n        TraverserCacheTest.cpp\n        GenericGraphProviderTest.cpp\n        GraphMockProviderInstances.cpp\n        GraphTestTools.cpp\n        KPathFinderTest.cpp\n        AllShortestPathsFinderTest.cpp\n        DFSFinderTest.cpp\n        PathStoreTest.cpp\n        PathValidatorTest.cpp\n        FifoQueueTest.cpp\n        LifoQueueTest.cpp\n        WeightedQueueTest.cpp\n        KShortestPathsFinderTest.cpp\n        WeightedShortestPathTest.cpp\n        SingleServerProviderTest.cpp)\n```\n\n----------------------------------------\n\nTITLE: Using equal_to Metafunction in C++ Assertions\nDESCRIPTION: This example demonstrates how to use the equal_to metafunction in C++ assertions to compare integral constants.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/equal_to.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_MPL_ASSERT_NOT(( equal_to< int_<0>, int_<10> > ));\nBOOST_MPL_ASSERT_NOT(( equal_to< long_<10>, int_<0> > ));\nBOOST_MPL_ASSERT(( equal_to< long_<10>, int_<10> > ));\n```\n\n----------------------------------------\n\nTITLE: Describing ptr_sequence_adapter Operations in C++\nDESCRIPTION: Defines the class `ptr_sequence_adapter` within the Boost namespace to facilitate operations on pointer containers. These operations include assigning, element access, and modifying pointer sequences. A concrete class for creating custom pointer containers, it supports templates for flexible use. Dependencies include the Boost library, and required parameters are `T`, `VoidPtrSeq`, and optional `CloneAllocator`, with functionality covering various operations like sorting, inserting, and merging.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/ptr_sequence_adapter.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nnamespace boost\n{\n\n    template\n    <\n        class T,\n        class VoidPtrSeq,\n        class CloneAllocator = heap_clone_allocator\n    >\n    class ptr_sequence_adapter\n    {\n    public: // `construct/copy/destroy`_\n        template< class InputIterator >\n        assign( InputIterator first, InputIterator last );\n        template< class InputRange >\n        assign( const InputRange& e );\n\n    public: // `element access`_\n        T&        front();\n        const T&  front() const;\n        T&        back();\n        const T&  back() const;\n\n    public: // `modifiers`_\n        void      push_back( T* x );\n        template< class U >\n        void      push_back( compatible-smart-ptr<U> x );\n        auto_type pop_back();\n        iterator  insert( iterator position, T* x );\n        template< class U >\n        iterator  insert( iterator position, compatible-smart-ptr<U> x );\n        template< class InputIterator >\n        void      insert( iterator position, InputIterator first, InputIterator last );\n        template< class InputRange >\n        void      insert( iterator position, const InputRange& r );\n        iterator  erase( iterator position );\n        iterator  erase( iterator first, iterator last );\n        template< class Range >\n        iterator  erase( const Range& r );\n        void      resize( size_type size );\n        void      resize( size_type size, T* to_clone );\n\n    public: // `pointer container requirements`_\n        template< class PtrSequence >\n        void transfer( iterator before, typename PtrSequence::iterator object,\n                       PtrSequence& from );                             \n        template< class PtrSequence >\n        void transfer( iterator before, typename PtrSequence::iterator first, typename PtrSequence::iterator last,\n                       PtrSequence& from );\n        void template< class PtrSequence, class Range >\n        void transfer( iterator before, const Range& r, PtrSequence& from );\n        template< class PtrSequence >\n        void transfer( iterator before, PtrSequence& from );\n\n    public: // `algorithms`_\n\n        void sort();\n        void sort( iterator first, iterator last );\n        template< class Compare >\n        void sort( Compare comp );\n        template< class Compare >\n        void sort( iterator begin, iterator end, Compare comp );\n\n        void unique();\n        void unique( iterator first, iterator last );\n        template< class Compare >\n        void unique( Compare comp );\n        template< class Compare >\n        void unique( iterator begin, iterator end, Compare comp );\n\n        template< class Pred >\n        void erase_if( Pred pred );\n        template< class Pred >\n        void erase_if( iterator begin, iterator end, Pred pred );\n\n        void merge( ptr_sequence_adapter& r );\n        template< class Compare >\n        void merge( ptr_sequence_adapter& r, Compare comp );\n        void merge( iterator first, iterator last, ptr_sequence_adapter& from );\n        template< class Compare >\n        void merge( iterator first, iterator last, ptr_sequence_adapter& from, Compare comp );\n\n    public: // `ptr_list interface`_\n\n    public: // `ptr_vector interface`_\n\n    public: // `ptr_deque interface`_\n\n    }; //  class 'ptr_sequence_adapter'\n\n} // namespace 'boost'\n```\n\n----------------------------------------\n\nTITLE: Reading a Sub-Part of an Image using Boost.GIL\nDESCRIPTION: This snippet illustrates how to read a specific region of a TIFF image by utilizing the 'image_read_settings' class. It allows users to define the area of the image to be read, with the top-left coordinate set to (0, 0) and the dimensions of the region specified as (50, 50).\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/io.rst.txt#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nread_image( filename\n              , img\n              , image_read_settings< tiff_tag >( point_t( 0, 0 ), point_t( 50, 50 ) )\n              );\n```\n\n----------------------------------------\n\nTITLE: Compose Kernel Implementation in C++\nDESCRIPTION: Defines the compose_kernel struct that handles the core composition functionality between two functions. It inherits from compressed_pair to store the two functions and implements the operator() that applies the functions in composition order.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/compose.hpp.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<class F1, class F2>\nstruct compose_kernel : detail::compressed_pair<F1, F2>, compose_function_result_type<F1, F2>\n{\n    typedef detail::compressed_pair<F1, F2> base_type;\n\n    BOOST_HOF_INHERIT_CONSTRUCTOR(compose_kernel, base_type)\n\n    BOOST_HOF_RETURNS_CLASS(compose_kernel);\n\n    template<class... Ts>\n    constexpr BOOST_HOF_SFINAE_RESULT(const F1&, result_of<const F2&, id_<Ts>...>) \n    operator()(Ts&&... xs) const BOOST_HOF_SFINAE_RETURNS\n    (\n        BOOST_HOF_MANGLE_CAST(const F1&)(BOOST_HOF_CONST_THIS->first(xs...))(BOOST_HOF_MANGLE_CAST(const F2&)(BOOST_HOF_CONST_THIS->second(xs...))(BOOST_HOF_FORWARD(Ts)(xs)...))\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Converting C++ Exceptions to Error Codes in ArangoDB\nDESCRIPTION: This function takes an exception pointer and converts standard C++ exceptions to their equivalent error codes. If no match is found, it returns a default error code. It requires C++ exceptions to be enabled globally.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/functions/error_from_exception.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nstd::error_code error_from_exception(std::exception_ptr &&ep = std::current_exception(), std::error_code not_matched = std::make_error_code(std::errc::resource_unavailable_try_again)) noexcept\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Locale Caching with Boost.Locale Generator\nDESCRIPTION: Demonstrates how to enable and use locale caching with Boost.Locale generator. Shows the creation of multiple locales with cache enabled, including initial generation and subsequent fetching from cache.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/doc/working_with_multiple_locales.txt#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n    generator gen;\n    gen.locale_cache_enabled(true);\n    gen(\"en_US.UTF-8\");\n    gen(\"de_DE.UTF-8\");\n    gen(\"ja_JP.UTF-8\");\n    // Create all locales\n\n    std::locale en=gen(\"en_US.UTF-8\"); \n    // Fetch an existing locale from the cache\n    std::locale ar=gen(\"ar_EG.UTF-8\");\n    // Because ar_EG not in the cache, a new locale is generated (and cached)\n```\n\n----------------------------------------\n\nTITLE: Defining and Manipulating Boost MPL Lists in C++\nDESCRIPTION: Demonstrates how to define a list of floating-point types, add an integer to the front, and verify the first element using BOOST_MPL_ASSERT.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/list.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ntypedef list<float,double,long double> floats;\ntypedef push_front<floats,int>::type types;\n\nBOOST_MPL_ASSERT(( is_same< front<types>::type, int > ));\n```\n\n----------------------------------------\n\nTITLE: New Window Example Implementation with Boost Parameter\nDESCRIPTION: This code snippet defines a function `new_window` using the Boost Parameter Library. It shows how to define named parameters for title, width, and titlebar and create a function that accepts those parameters by name.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/index.rst#2025-04-22_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\n#include <boost/parameter.hpp>\n\n    namespace test {\n\n        BOOST_PARAMETER_NAME(title)\n        BOOST_PARAMETER_NAME(width)\n        BOOST_PARAMETER_NAME(titlebar)\n\n        BOOST_PARAMETER_FUNCTION(\n            (int), new_window, tag, (required (title,*)(width,*)(titlebar,*))\n        )\n        {\n            return 0;\n        }\n\n        BOOST_PARAMETER_TEMPLATE_KEYWORD(deleter)\n        BOOST_PARAMETER_TEMPLATE_KEYWORD(copy_policy)\n\n        template <typename T>\n        struct Deallocate\n        {\n        };\n\n        struct DeepCopy\n        {\n        };\n\n        namespace parameter = boost::parameter;\n\n        struct Foo\n        {\n        };\n\n        template <typename T, typename A0, typename A1>\n        struct smart_ptr\n        {\n            smart_ptr(Foo*);\n        };\n    }\n    using namespace test;\n    int x =\n```\n\n----------------------------------------\n\nTITLE: Declaring Delta-Stepping Shortest Paths Function in C++\nDESCRIPTION: Function declaration for the delta-stepping shortest paths algorithm. It takes a graph, start vertex, predecessor map, distance map, weight map, and delta value for bucket size determination.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/dijkstra_shortest_paths.rst#2025-04-22_snippet_7\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <typename Graph, typename PredecessorMap, \n              typename DistanceMap, typename WeightMap>\nvoid delta_stepping_shortest_paths\n  (const Graph& g,\n   typename graph_traits<Graph>::vertex_descriptor s, \n   PredecessorMap predecessor, DistanceMap distance, WeightMap weight, \n   typename property_traits<WeightMap>::value_type delta)\n```\n\n----------------------------------------\n\nTITLE: Configuring LibUnwind Support in CMake\nDESCRIPTION: Conditional configuration for libunwind support in the crash handler. Adds library linkage and include directories when USE_LIBUNWIND is enabled. Includes dependency management for libunwind build.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/lib/CrashHandler/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif (USE_LIBUNWIND)\\n  target_link_libraries(arango_crashhandler\\n    PUBLIC\\n      ${LIBUNWIND_LIB})\\n\\n  target_include_directories(arango_crashhandler\\n    PRIVATE\\n      \"${LIBUNWIND_HOME}/include\")\\n\\n  add_dependencies(arango_crashhandler libunwind_build)\\nendif ()\n```\n\n----------------------------------------\n\nTITLE: MPL min Header\nDESCRIPTION: Specifies the header file required to use the `min` metafunction in Boost MPL. The header file is `<boost/mpl/min_max.hpp>`.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/min.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/min_max.hpp>\n```\n\n----------------------------------------\n\nTITLE: Georgian Unicode Character Ranges\nDESCRIPTION: Defines Unicode code point ranges for Georgian capital and small letters, covering the complete Georgian script\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/spirit/workbench/unicode/Scripts.txt#2025-04-22_snippet_8\n\nLANGUAGE: Unicode\nCODE:\n```\n10A0..2D25; Georgian # Capital and small letters\n```\n\n----------------------------------------\n\nTITLE: Using BOOST_MPL_ASSERT_RELATION in a C++ Template\nDESCRIPTION: Demonstrates the usage of BOOST_MPL_ASSERT_RELATION macro within a template to check the size relationship between two types.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/ASSERT_RELATION.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntemplate< typename T, typename U > struct my\n{\n    // ...\n    BOOST_MPL_ASSERT_RELATION( sizeof(T), <, sizeof(U) );\n};\n\nmy<char[50],char[10]> test;\n```\n\n----------------------------------------\n\nTITLE: Configuring ArangoExport Executable Build in CMake\nDESCRIPTION: Defines the ArangoExport executable build configuration including source files, include directories, linked libraries, installation paths, and dependencies. The executable requires Boost libraries, ArangoDB shell library, and optionally uses JEMalloc and ICU for internationalization support.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/client-tools/Export/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(${BIN_ARANGOEXPORT}\n  ${ProductVersionFiles_arangoexport}\n  ExportFeature.cpp\n  arangoexport.cpp\n)\ntarget_include_directories(${BIN_ARANGOEXPORT} PRIVATE ${PROJECT_SOURCE_DIR}/client-tools)\n\ntarget_link_libraries(${BIN_ARANGOEXPORT}\n  ${SYSTEM_LIBRARIES}\n  boost_system\n  boost_boost\n  arango_shell\n  clienttools_utils\n)\n\ninstall(\n  TARGETS ${BIN_ARANGOEXPORT}\n  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR})\n\ninstall_config(${BIN_ARANGOEXPORT})\n\nadd_dependencies(${BIN_ARANGOEXPORT} zlibstatic)\n\n# use ICU 64 for the client tools\nadd_dependencies(${BIN_ARANGOEXPORT} iculegacy_build)\n\nif (USE_JEMALLOC)\n  add_dependencies(${BIN_ARANGOEXPORT} jemalloc_build)\nendif ()\n\nadd_dependencies(${BIN_ARANGOEXPORT} man)\n```\n\n----------------------------------------\n\nTITLE: Synchronous Transaction Methods Interface\nDESCRIPTION: Shows the original synchronous interface for document operations in ArangoDB's transaction methods.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/lib/Futures/README.md#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nclass Methods {\n  // ...\n  public:\n  OperationResult document(\n    std::string const& collectionName, VPackSlice const value,\n    OperationOptions& options) {...}\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Storage Selection with if_ in C++\nDESCRIPTION: Shows a practical example of using if_ metafunction to conditionally select between inplace storage and heap storage for a lightweight object wrapper based on the size of the wrapped type.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/if_.rst#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\n// allocates space for an object of class T on heap or \"inplace\"\n// depending on its size\ntemplate< typename T > struct lightweight\n{\n    // ...\n    typedef typename if_<\n          less_equal< sizeof_<T>, sizeof_<T*> >\n        , inplace_storage<T>\n        , heap_storage<T>\n        >::type impl_t;\n\n    impl_t impl;\n};\n```\n\n----------------------------------------\n\nTITLE: BOOST_HOF_STATIC_FUNCTION Macro Definition with C++17 and Legacy Support\nDESCRIPTION: Defines the BOOST_HOF_STATIC_FUNCTION macro with two different implementations - one using inline variables for C++17 and later, and another using static const variables for older compilers.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/function.hpp.txt#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\n#if BOOST_HOF_HAS_INLINE_VARIABLES\n#define BOOST_HOF_STATIC_FUNCTION(name) inline const constexpr auto name = boost::hof::detail::reveal_static_const_factory()\n#else\n#define BOOST_HOF_STATIC_FUNCTION(name) BOOST_HOF_STATIC_CONST_VAR(name) = BOOST_HOF_DETAIL_MSVC_CONSTEXPR_DEDUCE boost::hof::detail::reveal_static_const_factory()\n#endif\n```\n\n----------------------------------------\n\nTITLE: Using less_equal Metafunction in C++ Assertions\nDESCRIPTION: This example demonstrates how to use the less_equal metafunction in compile-time assertions. It checks various integer comparisons using the metafunction.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/less_equal.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_MPL_ASSERT(( less_equal< int_<0>, int_<10> > ));\nBOOST_MPL_ASSERT_NOT(( less_equal< long_<10>, int_<0> > ));\nBOOST_MPL_ASSERT(( less_equal< long_<10>, int_<10> > ));\n```\n\n----------------------------------------\n\nTITLE: Defining Argument Specifiers Syntax in C++\nDESCRIPTION: Specifies the syntax for argument specifiers used in Boost.Parameter, including optional and required arguments, restrictions, and type specifications.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_68\n\nLANGUAGE: cpp\nCODE:\n```\nargument-specifiers ::= *specifier-group0* {*specifier-group0*\\}\n\nspecifier-group0 ::= *specifier-group1* |\n    (\n        '**(**' '**deduced**'\n            *specifier-group1* {*specifier-group1*\\}\n        '**)**'\n    )\n\nspecifier-group1 ::=\n    (\n        '**(**' '**optional**'\n            *specifier* {*specifier*\\}\n        '**)**'\n    ) | (\n        '**(**' '**required**'\n            *specifier* {*specifier*\\}\n        '**)**'\n    )\n\nspecifier ::=\n    '**(**' *argument-name* '**,**' *restriction* ')'\n\nrestriction ::=\n    ( '**\\***' '**(**' *mfc* '**)**' ) |\n    ( '**(**' *type-name* '**)**' ) |\n    '**\\***'\n```\n\n----------------------------------------\n\nTITLE: Defining and Using list_c in C++\nDESCRIPTION: Demonstrates how to define a list_c sequence of Fibonacci numbers and perform operations on it.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/list_c.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ntypedef list_c<int,1,2,3,5,7,12,19,31> fibonacci;\ntypedef push_front<fibonacci,int_<1> >::type fibonacci2;\n\nBOOST_MPL_ASSERT_RELATION( front<fibonacci2>::type::value, ==, 1 );\n```\n\n----------------------------------------\n\nTITLE: Defining Point2DConcept in C++\nDESCRIPTION: This code refines the PointNDConcept to specify a two-dimensional point with identical coordinate types for both axes. The 2D concept introduces value type definitions and indexing operators for easy access to point coordinates.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/point.rst.txt#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nconcept Point2DConcept<typename T> : PointNDConcept<T> {\n    where num_dimensions == 2;\n    where SameType<axis<0>::type, axis<1>::type>;\n\n    typename value_type = axis<0>::type;\n\n    const value_type& operator[](const T&, size_t i);\n        value_type& operator[](      T&, size_t i);\n\n    value_type x,y;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Warning Flags for Compilation\nDESCRIPTION: Iterates through a list of compiler warning flags and applies them if supported by the compiler. This enhances code quality by enabling additional warnings during compilation for both GCC-style and MSVC-style flags.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/lz4/build/cmake/CMakeLists.txt#2025-04-22_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\n# Extra warning flags\ninclude (CheckCCompilerFlag)\nforeach (flag\n    # GCC-style\n    -Wall\n    -Wextra\n    -Wundef\n    -Wcast-qual\n    -Wcast-align\n    -Wshadow\n    -Wswitch-enum\n    -Wdeclaration-after-statement\n    -Wstrict-prototypes\n    -Wpointer-arith\n\n    # MSVC-style\n    /W4)\n  # Because https://gcc.gnu.org/wiki/FAQ#wnowarning\n  string(REGEX REPLACE \"\\\\-Wno\\\\-(.+)\" \"-W\\\\1\" flag_to_test \"${flag}\")\n  string(REGEX REPLACE \"[^a-zA-Z0-9]+\" \"_\" test_name \"CFLAG_${flag_to_test}\")\n\n  check_c_compiler_flag(\"${ADD_COMPILER_FLAGS_PREPEND} ${flag_to_test}\" ${test_name})\n\n  if(${test_name})\n    set(CMAKE_C_FLAGS \"${flag} ${CMAKE_C_FLAGS}\")\n  endif()\n\n  unset(test_name)\n  unset(flag_to_test)\nendforeach (flag)\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost Integer Library with CMake\nDESCRIPTION: This CMake script sets up the Boost Integer library project, defines the library target as an interface library, and specifies its dependencies. It also sets the include directories and links against other Boost libraries.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/integer/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.20)\n\nproject(boost_integer VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n\nadd_library(boost_integer INTERFACE)\nadd_library(Boost::integer ALIAS boost_integer)\n\ntarget_include_directories(boost_integer INTERFACE include)\n\ntarget_link_libraries(boost_integer\n    INTERFACE\n        Boost::assert\n        Boost::config\n        Boost::core\n        Boost::static_assert\n        Boost::throw_exception\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Variadic Print Function with proj Adaptor in C++\nDESCRIPTION: Creates a variadic print function that handles multiple arguments by renaming the original function and applying proj adaptor to it.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/doc/src/example_print.md.txt#2025-04-22_snippet_7\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_HOF_STATIC_LAMBDA_FUNCTION(simple_print) = fix(first_of(\n    [](auto, const auto& x) -> decltype(std::cout << x, void())\n    {\n        std::cout << x << std::endl;\n    },\n    [](auto self, const auto& range) -> decltype(self(*adl::adl_begin(range)), void())\n    {\n        for(const auto& x:range) self(x);\n    },\n    [](auto self, const auto& tuple)\n    {\n        return for_each_tuple(tuple, self);\n    }\n));\n```\n\n----------------------------------------\n\nTITLE: Graph Size Operations in C++\nDESCRIPTION: Functions for retrieving the number of vertices and edges stored in the executing process.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/distributed_adjacency_list.rst#2025-04-22_snippet_15\n\nLANGUAGE: C++\nCODE:\n```\nvertices_size_type\nnum_vertices(const adjacency_list& g);\n\nedges_size_type\nnum_edges(const adjacency_list& g);\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket SSL Client Build with CMake\nDESCRIPTION: Configures build settings for a WebSocket client executable using OpenSSL, Beast, and Asio libraries. Sets up source groups, defines the executable target, and links required dependencies including OpenSSL, Asio, and Beast libraries.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/beast/example/websocket/client/async-ssl-system-executor/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif (OPENSSL_FOUND)\n    GroupSources(include/boost/beast beast)\n    GroupSources(example/common common)\n    GroupSources(example/websocket/client/async-ssl-system-executor \"/\")\n\n    add_executable (websocket-client-async-ssl-system-executor\n        ${BOOST_BEAST_FILES}\n        ${PROJECT_SOURCE_DIR}/example/common/root_certificates.hpp\n        Jamfile\n        websocket_client_async_ssl_system_executor.cpp\n    )\n\n    set_property(TARGET websocket-client-async-ssl-system-executor PROPERTY FOLDER \"example-websocket-client\")\n\n    target_link_libraries (websocket-client-async-ssl-system-executor\n        OpenSSL::SSL OpenSSL::Crypto\n        lib-asio\n        lib-asio-ssl\n        lib-beast\n        )\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Japanese Text Segmentation Analysis in C++\nDESCRIPTION: Demonstrates analysis of Japanese text segments with rules to identify different character types including kana and ideographic characters.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/doc/boundary_analysys.txt#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nboost::locale::generator gen;\nusing namespace boost::locale::boundary;\nstd::string text=\"生きるか死ぬか、それが問題だ。\";\nssegment_index map(word,text.begin(),text.end(),gen(\"ja_JP.UTF-8\")); \nfor(ssegment_index::iterator it=map.begin(),e=map.end();it!=e;++it) {\n    std::cout << \"Segment \" << *it << \" contains: \";\n    if(it->rule() & word_none)\n        std::cout << \"white space or punctuation marks \";\n    if(it->rule() & word_kana)\n        std::cout << \"kana characters \";\n    if(it->rule() & word_ideo)\n        std::cout << \"ideographic characters\";\n    std::cout<< std::endl;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Construct Function for Literal Types in C++\nDESCRIPTION: A specialized function object that constructs literal types more efficiently. Since literal types can be constructed at compile time, this specialization avoids the aligned storage overhead and constructs objects directly.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/construct.hpp.txt#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<class T>\nstruct construct_f<T, typename std::enable_if<BOOST_HOF_IS_LITERAL(T)>::type>\n{\n    constexpr construct_f() noexcept\n    {}\n    template<class... Ts, BOOST_HOF_ENABLE_IF_CONSTRUCTIBLE(T, Ts...)>\n    constexpr T operator()(Ts&&... xs) const noexcept\n    {\n        return T(BOOST_HOF_FORWARD(Ts)(xs)...);\n    }\n\n    template<class X, BOOST_HOF_ENABLE_IF_CONSTRUCTIBLE(T, std::initializer_list<X>&&)>\n    constexpr T operator()(std::initializer_list<X>&& x) const noexcept\n    {\n        return T(static_cast<std::initializer_list<X>&&>(x));\n    }\n\n    template<class X, BOOST_HOF_ENABLE_IF_CONSTRUCTIBLE(T, std::initializer_list<X>&)>\n    constexpr T operator()(std::initializer_list<X>& x) const noexcept\n    {\n        return T(x);\n    }\n\n    template<class X, BOOST_HOF_ENABLE_IF_CONSTRUCTIBLE(T, const std::initializer_list<X>&)>\n    constexpr T operator()(const std::initializer_list<X>& x) const noexcept\n    {\n        return T(x);\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Boost.Fiber NUMA Library\nDESCRIPTION: This snippet sets up the boost_fiber_numa library based on the platform-specific source files, including dependency definitions and linking with core Boost libraries. It also handles shared and static linking options.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/fiber/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# boost_fiber_numa\n\nif(BOOST_FIBER_NUMA_TARGET_OS STREQUAL none)\n  set(NUMA_SOURCES\n    src/numa/pin_thread.cpp\n    src/numa/topology.cpp\n  )\nelse()\n  set(NUMA_SOURCES\n    src/numa/${BOOST_FIBER_NUMA_TARGET_OS}/pin_thread.cpp\n    src/numa/${BOOST_FIBER_NUMA_TARGET_OS}/topology.cpp\n  )\nendif()\n\nadd_library(boost_fiber_numa\n  ${NUMA_SOURCES}\n  src/numa/algo/work_stealing.cpp\n)\n\nadd_library(Boost::fiber_numa ALIAS boost_fiber_numa)\n\ntarget_include_directories(boost_fiber_numa PUBLIC include)\n\ntarget_link_libraries(boost_fiber_numa\n  PUBLIC\n    Boost::assert\n    Boost::config\n    Boost::context\n    Boost::fiber\n    Boost::smart_ptr\n  PRIVATE\n    Boost::algorithm\n    Boost::filesystem\n    Boost::format\n)\n\ntarget_compile_definitions(boost_fiber_numa\n  PUBLIC BOOST_FIBER_NO_LIB\n  PRIVATE BOOST_FIBER_SOURCE BOOST_FIBERS_SOURCE\n)\n\nif(BUILD_SHARED_LIBS)\n  target_compile_definitions(boost_fiber_numa PUBLIC BOOST_FIBER_DYN_LINK BOOST_FIBERS_DYN_LINK)\nelse()\n  target_compile_definitions(boost_fiber_numa PUBLIC BOOST_FIBER_STATIC_LINK)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Running LZ4 Speed Test with Custom Parameters\nDESCRIPTION: Example command for running the test-lz4-speed.py script with specific test files, email notification, and custom message parameter. Demonstrates basic usage with two test files and a 60-second check interval.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/lz4/tests/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./test-lz4-speed.py \"silesia.tar calgary.tar\" \"email@gmail.com\" --message \"tested on my laptop\" --sleepTime 60\n```\n\n----------------------------------------\n\nTITLE: Example Usage of reverse_stable_partition in C++\nDESCRIPTION: Provides an example of using reverse_stable_partition to partition a range of integers based on whether they are odd or even.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/reverse_stable_partition.rst#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\ntemplate< typename N > struct is_odd : bool_<(N::value % 2)> {};\n\ntypedef reverse_stable_partition<\n      range_c<int,0,10> \n    , is_odd<_1>\n    , back_inserter< vector<> >\n    , back_inserter< vector<> >\n    >::type r;\n\nBOOST_MPL_ASSERT(( equal< r::first, vector_c<int,9,7,5,3,1> > ));\nBOOST_MPL_ASSERT(( equal< r::second, vector_c<int,8,6,4,2,0> > ));\n```\n\n----------------------------------------\n\nTITLE: Creating arango_tests_futures Object Library\nDESCRIPTION: Creates an object library named `arango_tests_futures` composed of several C++ source files, which likely contain the implementations for future-related test cases. The `OBJECT` keyword signifies that this is an object library, meaning it will be linked into other targets.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/Futures/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(arango_tests_futures OBJECT\n  FutureTest.cpp\n  FutureCoroutineTest.cpp\n  PromiseTest.cpp\n  TryTest.cpp)\n```\n\n----------------------------------------\n\nTITLE: Preferentially Choosing Erroneous Outcome\nDESCRIPTION: This snippet outlines the case for coroutines returning outcome<T, std::error_code, std::exception_ptr>. It states that an Errored Outcome is chosen over an Excepted Outcome in the event of an error.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/tutorial/essential/coroutines/returning.md#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\n// If your Coroutine were returning an outcome<T, std::error_code, std::exception_ptr>, \n// an Errored Outcome is chosen preferentially to an Excepted Outcome.\n```\n\n----------------------------------------\n\nTITLE: Implementing Fold Function Adaptor without Initial State in C++\nDESCRIPTION: This code snippet defines a specialization of the fold_adaptor class template for cases where no initial state is provided. It uses the first argument as the initial state and applies the fold operation to the remaining arguments.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/fold.hpp.txt#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<class F>\nstruct fold_adaptor<F, void>\n: detail::callable_base<F>\n{\n    BOOST_HOF_INHERIT_CONSTRUCTOR(fold_adaptor, detail::callable_base<F>)\n\n    template<class... Ts>\n    constexpr const detail::callable_base<F>& base_function(Ts&&... xs) const noexcept\n    {\n        return boost::hof::always_ref(*this)(xs...);\n    }\n\n    BOOST_HOF_RETURNS_CLASS(fold_adaptor);\n\n    template<class... Ts>\n    constexpr BOOST_HOF_SFINAE_RESULT(detail::v_fold, id_<const detail::callable_base<F>&>, id_<Ts>...)\n    operator()(Ts&&... xs) const BOOST_HOF_SFINAE_RETURNS\n    (\n        detail::v_fold()(\n            BOOST_HOF_MANGLE_CAST(const detail::callable_base<F>&)(BOOST_HOF_CONST_THIS->base_function(xs...)), \n            BOOST_HOF_FORWARD(Ts)(xs)...\n        )\n    )\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a Unary Ufunc Template in C++\nDESCRIPTION: The snippet defines a C++ template struct \"unary_ufunc\" within the Boost.Python and Boost.Numpy namespaces. It provides static methods `call` and `make` to assist with creating Python-callable ufuncs. It requires definition of `TUnaryFunctor`, `TArgument`, and `TResult` template parameters.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/doc/html/numpy/_sources/reference/unary_ufunc.rst.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nnamespace boost \n{\nnamespace python\n{\nnamespace numpy \n{\n\ntemplate <typename TUnaryFunctor, \n          typename TArgument=typename TUnaryFunctor::argument_type, \n          typename TResult=typename TUnaryFunctor::result_type>\nstruct unary_ufunc \n{\n\n  static object call(TUnaryFunctor & self, \n                     object const & input, \n                     object const & output) ;\n\n  static object make(); \n\n};\n}\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Properties Put Template Function in C++\nDESCRIPTION: A template function that adds a key-value pair to a property map, with complex behavior for handling property map generation and error conditions\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/property_map/doc/dynamic_property_map.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<typename Key, typename Value>\nbool put(const std::string& name, dynamic_properties& dp, const Key& key, const Value& value)\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL HTTP Client Build in CMake\nDESCRIPTION: Configures CMake build settings for an SSL-enabled asynchronous HTTP client using Boost Beast and OpenSSL. Groups source files, creates executable target, and links required SSL and networking libraries.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/beast/example/http/client/async-ssl/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif (OPENSSL_FOUND)\n    GroupSources(include/boost/beast beast)\n    GroupSources(example/common common)\n    GroupSources(example/http/client/async-ssl \"/\")\n\n    add_executable (http-client-async-ssl\n        ${BOOST_BEAST_FILES}\n        ${PROJECT_SOURCE_DIR}/example/common/root_certificates.hpp\n        Jamfile\n        http_client_async_ssl.cpp\n    )\n\n    set_property(TARGET http-client-async-ssl PROPERTY FOLDER \"example-http-client\")\n\n    target_link_libraries (http-client-async-ssl\n        OpenSSL::SSL OpenSSL::Crypto\n        lib-asio\n        lib-asio-ssl\n        lib-beast\n        )\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Implementing Generic Construct Function for Non-Literal Types in C++\nDESCRIPTION: A function object that constructs objects of non-literal types using aligned storage. It supports regular arguments and various forms of initializer lists. The implementation uses placement new and a storage holder to manage object lifetime.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/construct.hpp.txt#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<class T, class=void>\nstruct construct_f\n{\n    typedef typename std::aligned_storage<sizeof(T)>::type storage;\n\n    struct storage_holder\n    {\n        storage * s;\n        storage_holder(storage* x) noexcept : s(x)\n        {}\n\n        T& data() noexcept\n        {\n            return *reinterpret_cast<T*>(s);\n        }\n\n        ~storage_holder() noexcept(noexcept(std::declval<T>().~T()))\n        {\n            this->data().~T();\n        }\n    };\n\n    constexpr construct_f() noexcept\n    {}\n    template<class... Ts, BOOST_HOF_ENABLE_IF_CONSTRUCTIBLE(T, Ts...)>\n    T operator()(Ts&&... xs) const BOOST_HOF_NOEXCEPT_CONSTRUCTIBLE(T, Ts&&...)\n    {\n        storage buffer{};\n        new(&buffer) T(BOOST_HOF_FORWARD(Ts)(xs)...);\n        storage_holder h(&buffer);\n        return boost::hof::move(h.data());\n    }\n\n    template<class X, BOOST_HOF_ENABLE_IF_CONSTRUCTIBLE(T, std::initializer_list<X>&&)>\n    T operator()(std::initializer_list<X>&& x) const BOOST_HOF_NOEXCEPT_CONSTRUCTIBLE(T, std::initializer_list<X>&&)\n    {\n        storage buffer{};\n        new(&buffer) T(static_cast<std::initializer_list<X>&&>(x));\n        storage_holder h(&buffer);\n        return h.data();\n    }\n\n    template<class X, BOOST_HOF_ENABLE_IF_CONSTRUCTIBLE(T, std::initializer_list<X>&)>\n    T operator()(std::initializer_list<X>& x) const BOOST_HOF_NOEXCEPT_CONSTRUCTIBLE(T, std::initializer_list<X>&)\n    {\n        storage buffer{};\n        new(&buffer) T(x);\n        storage_holder h(&buffer);\n        return h.data();\n    }\n\n    template<class X, BOOST_HOF_ENABLE_IF_CONSTRUCTIBLE(T, const std::initializer_list<X>&)>\n    T operator()(const std::initializer_list<X>& x) const BOOST_HOF_NOEXCEPT_CONSTRUCTIBLE(T, const std::initializer_list<X>&)\n    {\n        storage buffer{};\n        new(&buffer) T(x);\n        storage_holder h(&buffer);\n        return h.data();\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Public Type Aliases in basic_outcome\nDESCRIPTION: List of public member type aliases available in the basic_outcome template, including value_type, error_type, exception_type, and rebind template for creating new basic_outcome types with different template parameters.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/basic_outcome/_index.md#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\n- `value_type` is `T`.\n- `error_type` is `EC`.\n- `exception_type` is `EP`.\n- `no_value_policy_type` is `NoValuePolicy`.\n- `value_type_if_enabled` is `T` if construction from `T` is available, else it is a usefully named unusable internal type.\n- `error_type_if_enabled` is `EC` if construction from `EC` is available, else it is a usefully named unusable internal type.\n- `exception_type_if_enabled` is `EP` if construction from `EP` is available, else it is a usefully named unusable internal type.\n- `rebind<A, B = EC, C = EP, D = NoValuePolicy>` is `basic_outcome<A, B, C, D>`.\n```\n\n----------------------------------------\n\nTITLE: Stable Partition Template Declaration\nDESCRIPTION: Template declaration for the stable_partition algorithm that splits a sequence into two groups based on a predicate while maintaining relative order.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/stable_partition.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      typename Seq\n    , typename Pred\n    , typename In1 = |unspecified|\n    , typename In2 = |unspecified|\n    >\nstruct stable_partition\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Boost Container Library Project in CMake\nDESCRIPTION: Sets up the CMake project for Boost Container library, defining the project name, version, and required languages.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/container/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.16)\n\nproject(boost_container VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES C CXX)\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost STL Interfaces Library in CMake\nDESCRIPTION: Sets up the Boost STL Interfaces library as an interface target, including its include directories and dependencies. It also configures C++14 as the minimum required standard.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/stl_interfaces/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(boost_stl_interfaces INTERFACE)\nadd_library(Boost::stl_interfaces ALIAS boost_stl_interfaces)\n\ntarget_include_directories(boost_stl_interfaces INTERFACE include)\n\ntarget_link_libraries(boost_stl_interfaces\n  INTERFACE\n    Boost::assert\n    Boost::config\n)\n\ntarget_compile_features(boost_stl_interfaces INTERFACE cxx_std_14)\n```\n\n----------------------------------------\n\nTITLE: Boost MPL and_ Usage Examples in C++\nDESCRIPTION: Examples demonstrating the use of the and_ metafunction with various combinations of true_ and false_ constants, including short-circuit evaluation with an unknown type.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/and_.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nstruct unknown;\n\nBOOST_MPL_ASSERT(( and_< true\\_,true\\_ > ));\nBOOST_MPL_ASSERT_NOT(( and_< false\\_,true\\_ > ));\nBOOST_MPL_ASSERT_NOT(( and_< true\\_,false\\_ > ));\nBOOST_MPL_ASSERT_NOT(( and_< false\\_,false\\_ > ));\nBOOST_MPL_ASSERT_NOT(( and_< false\\_,unknown > )); // OK\nBOOST_MPL_ASSERT_NOT(( and_< false\\_,unknown,unknown > )); // OK too\n```\n\n----------------------------------------\n\nTITLE: Implementing the unpack_impl_f Functor in C++\nDESCRIPTION: Implementation of unpack_impl_f which provides the core functionality for unpacking sequences. It forwards the sequence to the appropriate unpack_sequence specialization.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/is_unpackable.hpp.txt#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nstruct unpack_impl_f\n{\n    template<class F, class Sequence>\n    constexpr auto operator()(F&& f, Sequence&& s) const BOOST_HOF_RETURNS\n    (\n        boost::hof::unpack_sequence<typename std::remove_cv<typename std::remove_reference<Sequence>::type>::type>::\n                apply(BOOST_HOF_FORWARD(F)(f), BOOST_HOF_FORWARD(Sequence)(s))\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Reverse Fold Adaptor with State in C++\nDESCRIPTION: Implementation of the reverse fold adaptor that includes state management. This version handles cases where an initial state is provided.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/reverse_fold.hpp.txt#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<class F, class State=void>\nstruct reverse_fold_adaptor\n: detail::compressed_pair<detail::callable_base<F>, State>\n{\n    typedef detail::compressed_pair<detail::callable_base<F>, State> base_type;\n    BOOST_HOF_INHERIT_CONSTRUCTOR(reverse_fold_adaptor, base_type)\n\n    template<class... Ts>\n    constexpr const detail::callable_base<F>& base_function(Ts&&... xs) const noexcept\n    {\n        return this->first(xs...);\n    }\n\n    template<class... Ts>\n    constexpr State get_state(Ts&&... xs) const noexcept\n    {\n        return this->second(xs...);\n    }\n\n    BOOST_HOF_RETURNS_CLASS(reverse_fold_adaptor);\n\n    template<class... Ts>\n    constexpr BOOST_HOF_SFINAE_RESULT(detail::v_reverse_fold, id_<const detail::callable_base<F>&>, id_<State>, id_<Ts>...)\n    operator()(Ts&&... xs) const BOOST_HOF_SFINAE_RETURNS\n    (\n        detail::v_reverse_fold()(\n            BOOST_HOF_MANGLE_CAST(const detail::callable_base<F>&)(BOOST_HOF_CONST_THIS->base_function(xs...)), \n            BOOST_HOF_MANGLE_CAST(State)(BOOST_HOF_CONST_THIS->get_state(xs...)), \n            BOOST_HOF_FORWARD(Ts)(xs)...\n        )\n    )\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Checksum Masking in C\nDESCRIPTION: This function masks a CRC-32C checksum by rotating it and adding a constant. It's used to protect data integrity in certain chunk types of the Snappy framing format.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/snappy/snappy-1.1.9/framing_format.txt#2025-04-22_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nuint32_t mask_checksum(uint32_t x) {\n  return ((x >> 15) | (x << 17)) + 0xa282ead8;\n}\n```\n\n----------------------------------------\n\nTITLE: Boost Include Paths Generation Function\nDESCRIPTION: Defines a function to generate include paths for Boost libraries, supporting both unified and separate include trees.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/log/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(generate_boost_include_paths result)\n    if (IS_DIRECTORY \"${CMAKE_CURRENT_SOURCE_DIR}/../../boost\" AND EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/../../boost/version.hpp\")\n        set(${result} \"${CMAKE_CURRENT_SOURCE_DIR}/../..\" PARENT_SCOPE)\n        return()\n    endif()\n    file(GLOB path_list LIST_DIRECTORIES True \"${CMAKE_CURRENT_SOURCE_DIR}/../*\")\n    foreach(path IN LISTS path_list)\n        if (IS_DIRECTORY \"${path}/include\")\n            list(APPEND include_list \"${path}/include\")\n        endif()\n    endforeach()\n    set(${result} ${include_list} PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Function Decorator in C++\nDESCRIPTION: This code snippet defines the core implementation of the 'if_' and 'if_c' function decorators. It includes template metaprogramming techniques to enable or disable function calls based on compile-time boolean conditions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/if.hpp.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nnamespace boost { namespace hof {\n\nnamespace detail {\n\ntemplate<class C, class...>\nstruct if_depend\n: C\n{};\n\ntemplate<bool Cond, class F>\nstruct if_adaptor : detail::callable_base<F>\n{\n    BOOST_HOF_INHERIT_CONSTRUCTOR(if_adaptor, detail::callable_base<F>)\n};\n\ntemplate<class F>\nstruct if_adaptor<false, F>\n{\n    template<class... Ts>\n    constexpr if_adaptor(Ts&&...) noexcept\n    {}\n};\n\ntemplate<bool Cond>\nstruct make_if_f\n{\n    constexpr make_if_f() noexcept\n    {}\n    template<class F>\n    constexpr if_adaptor<Cond, F> operator()(F f) const BOOST_HOF_NOEXCEPT_CONSTRUCTIBLE(F, F&&)\n    {\n        return if_adaptor<Cond, F>(static_cast<F&&>(f));\n    }\n};\n\nstruct if_f\n{\n    constexpr if_f()\n    {}\n    template<class Cond, bool B=Cond::type::value>\n    constexpr make_if_f<B> operator()(Cond) const noexcept\n    {\n        return {};\n    }\n};\n\n}\n#if BOOST_HOF_HAS_VARIABLE_TEMPLATES\ntemplate<bool B>\nBOOST_HOF_STATIC_CONSTEXPR detail::make_if_f<B> if_c = {};\n#else\ntemplate<bool B, class F>\nconstexpr detail::if_adaptor<B, F> if_c(F f) BOOST_HOF_NOEXCEPT_CONSTRUCTIBLE(F, F&&)\n{\n    return detail::if_adaptor<B, F>(static_cast<F&&>(f));\n}\n#endif\n\nBOOST_HOF_DECLARE_STATIC_VAR(if_, detail::if_f);\n\n}} // namespace boost::hof\n```\n\n----------------------------------------\n\nTITLE: Configuring ArangoDB Build ID Test Library and Executable\nDESCRIPTION: Creates and configures build components for ArangoDB build ID testing. Sets up an object library for build ID tests, configures test executable with required dependencies, and specifies linker options for build ID generation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/BuildId/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(arango_tests_build_id OBJECT\n  BuildIdTest.cpp)\n\ntarget_link_libraries(arango_tests_build_id\n  PUBLIC\n    gtest\n    arango_build_id)\n\nadd_executable(arangodbtests_build_id\n  EXCLUDE_FROM_ALL)\ntarget_link_libraries(arangodbtests_build_id\n  gtest_main\n  arango_build_id\n  arango_tests_build_id)\ntarget_link_options(arangodbtests_build_id\n  PUBLIC\n  -Wl,--build-id)\n```\n\n----------------------------------------\n\nTITLE: Using insert_range Metafunction in C++\nDESCRIPTION: Demonstrates the usage of insert_range metafunction to insert a range of integers into a vector of integers at a specific position.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/insert_range.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntypedef vector_c<int,0,1,7,8,9> numbers;\ntypedef find< numbers,integral_c<int,7> >::type pos;\ntypedef insert_range< numbers,pos,range_c<int,2,7> >::type range;\n\nBOOST_MPL_ASSERT_RELATION( size<range>::value, ==, 10 );\nBOOST_MPL_ASSERT(( equal< range,range_c<int,0,10> > ));\n```\n\n----------------------------------------\n\nTITLE: Implementing Addition Assignment Operator for Random Access Traversal Iterator in C++\nDESCRIPTION: Implementation of the += operator for Random Access Traversal Iterators that moves the iterator forward or backward by n positions, depending on the sign of the Distance parameter.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/new-iter-concepts.rst#2025-04-22_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\n{\n  Distance m = n;\n  if (m >= 0)\n    while (m--)\n      ++r;\n  else\n    while (m++)\n      --r;\n  return r;\n}\n```\n\n----------------------------------------\n\nTITLE: Ejecting from Create React App\nDESCRIPTION: Removes the single build dependency and copies all configuration files and dependencies directly into the project for full control. This is a one-way operation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/js/apps/system/_admin/aardvark/APP/react/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn run eject\n```\n\n----------------------------------------\n\nTITLE: Helper Functions for Value Category Testing\nDESCRIPTION: Defines helper functions that return different value categories (rvalue, const rvalue, lvalue, const lvalue) of std::bitset objects for testing parameter passing modes.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_78\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <std::size_t N>\nstd::bitset<N + 1> rvalue_bitset()\n{\n    return std::bitset<N + 1>();\n}\n\ntemplate <std::size_t N>\nstd::bitset<N + 1> const rvalue_const_bitset()\n{\n    return std::bitset<N + 1>();\n}\n\ntemplate <std::size_t N>\nstd::bitset<N + 1>& lvalue_bitset()\n{\n    static std::bitset<N + 1> lset = std::bitset<N + 1>();\n    return lset;\n}\n\ntemplate <std::size_t N>\nstd::bitset<N + 1> const& lvalue_const_bitset()\n{\n    static std::bitset<N + 1> const clset = std::bitset<N + 1>();\n    return clset;\n}\n```\n\n----------------------------------------\n\nTITLE: Determining ST Connectivity without Color Map - C++\nDESCRIPTION: This snippet provides an overload of the 'st_connected' function that checks for connectivity in a distributed graph without requiring a color map. This allows for simpler connectivity checks when vertex color tracking is not necessary.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/st_connected.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nnamespace graph { namespace distributed {\n    template<typename DistributedGraph>\n    inline bool \n    st_connected(const DistributedGraph& g, \n                 typename graph_traits<DistributedGraph>::vertex_descriptor s,\n                 typename graph_traits<DistributedGraph>::vertex_descriptor t)\n  } }\n```\n\n----------------------------------------\n\nTITLE: Writing JPEG with Custom Quality\nDESCRIPTION: Demonstrates writing a JPEG image with a specific quality setting using image_write_info.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/io.rst#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\nstd::string filename( \"image.jpg\" );\nrgb8_image_t img( 640, 480 );\n\n// write data into image\n\nwrite_view( filename\n          , view( img )\n          , image_write_info< jpeg_tag >( 95 )\n          );\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Error Codes with std::error_code in C++\nDESCRIPTION: A complete example showing how to define a custom error enum for string-to-int conversion errors and properly register it with the std::error_code system. The implementation includes defining the error enum, creating a custom error category, and registering it with the standard library error system.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/motivation/plug_error_code.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nenum class ConversionErrc\n{\n  Success     = 0, // 0 should not represent an error\n  EmptyString = 1,\n  IllegalChar = 2,\n  TooLong     = 3,\n};\n\nnamespace std\n{\n  template <>\n  struct is_error_code_enum<ConversionErrc> : std::true_type {};\n}\n\nstd::error_code make_error_code(ConversionErrc);  // fwd declaration\n\nclass ConversionCategory : public std::error_category\n{\npublic:\n  const char* name() const noexcept override { return \"Conversion\"; }\n  std::string message(int ev) const override\n  {\n    switch (static_cast<ConversionErrc>(ev))\n    {\n    case ConversionErrc::Success:\n      return \"conversion successful\";\n    case ConversionErrc::EmptyString:\n      return \"empty string provided\";\n    case ConversionErrc::IllegalChar:\n      return \"illegal character encountered\";\n    case ConversionErrc::TooLong:\n      return \"resulting number would be too long\";\n    default:\n      return \"(unknown conversion error)\";\n    }\n  }\n  \n  // Optional: also override the default error condition\n  std::error_condition default_error_condition(int ev) const noexcept override\n  {\n    switch (static_cast<ConversionErrc>(ev))\n    {\n    case ConversionErrc::EmptyString:\n      return make_error_condition(std::errc::invalid_argument);\n    case ConversionErrc::IllegalChar:\n      return make_error_condition(std::errc::invalid_argument);\n    case ConversionErrc::TooLong:\n      return make_error_condition(std::errc::result_out_of_range);\n    default:\n      // I have no mapping for this code\n      return std::error_condition(ev, *this);\n    }\n  }\n};\n\nconst ConversionCategory TheConversionCategory {};\n\nstd::error_code make_error_code(ConversionErrc e)\n{\n  return {static_cast<int>(e), TheConversionCategory};\n}\n\noutcome::result<int> convert(const std::string& s) noexcept\n{\n  if (s.empty())\n    return ConversionErrc::EmptyString;\n\n  if (!std::all_of(s.begin(), s.end(), ::isdigit))\n    return ConversionErrc::IllegalChar;\n\n  if (s.length() > 9)\n    return ConversionErrc::TooLong;\n\n  return atoi(s.c_str());\n}\n```\n\n----------------------------------------\n\nTITLE: Example Usage of times Metafunction in C++\nDESCRIPTION: Demonstrates how to use the times metafunction with different integral constant types and how to assert the expected results with static assertions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/times.rst#2025-04-22_snippet_6\n\nLANGUAGE: C++\nCODE:\n```\ntypedef times< int_<-10>, int_<3>, long_<1> >::type r;\nBOOST_MPL_ASSERT_RELATION( r::value, ==, -30 );\nBOOST_MPL_ASSERT(( is_same< r::value_type, long > ));\n```\n\n----------------------------------------\n\nTITLE: Creating Format Tag Structure in C++\nDESCRIPTION: Defines a tag structure for the new format that serves as a format identifier in the GIL I/O system.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/io.rst#2025-04-22_snippet_9\n\nLANGUAGE: cpp\nCODE:\n```\nstruct xxx_tag : format_tag {};\n```\n\n----------------------------------------\n\nTITLE: Creating Simple Print Function using Boost.HOF\nDESCRIPTION: This snippet demonstrates how to create a simple print function using Boost.HOF's LIFT adaptor and placeholders.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/doc/src/point_free.md.txt#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_HOF_STATIC_FUNCTION(simple_print) = BOOST_HOF_LIFT(std::ref(std::cout) << _);\n```\n\n----------------------------------------\n\nTITLE: Using Variant with Expected for Complex Return Types in C++\nDESCRIPTION: This example shows how to use expected<T, E> with a variant type to handle multiple possible return types along with an error code. It demonstrates more complex error handling scenarios.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/leaf/doc/whitepaper.md#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nexpected<variant<int,float>, error_code> compute_value(); // (A)\n```\n\n----------------------------------------\n\nTITLE: Using Transform Iterators with Array Multiplication and Addition\nDESCRIPTION: Demonstrates two uses of transform_iterators: first to multiply each array element by 2, then to add 4 to each element. Uses boost::binder1st and std::multiplies/plus for transformations.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/transform_iterator_eg.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nint x[] = { 1, 2, 3, 4, 5, 6, 7, 8 };\nconst int N = sizeof(x)/sizeof(int);\n\ntypedef boost::binder1st< std::multiplies<int> > Function;\ntypedef boost::transform_iterator<Function, int*> doubling_iterator;\n\ndoubling_iterator i(x, boost::bind1st(std::multiplies<int>(), 2)),\n  i_end(x + N, boost::bind1st(std::multiplies<int>(), 2));\n\nstd::cout << \"multiplying the array by 2:\" << std::endl;\nwhile (i != i_end)\n  std::cout << *i++ << \" \";\nstd::cout << std::endl;\n\nstd::cout << \"adding 4 to each element in the array:\" << std::endl;\nstd::copy(boost::make_transform_iterator(x, boost::bind1st(std::plus<int>(), 4)),\n\t  boost::make_transform_iterator(x + N, boost::bind1st(std::plus<int>(), 4)),\n\t  std::ostream_iterator<int>(std::cout, \" \"));\nstd::cout << std::endl;\n```\n\n----------------------------------------\n\nTITLE: Building Tests for Selected Extension with Boost.Build\nDESCRIPTION: This code snippet illustrates how to run all tests for a selected extension in the Boost.GIL library using Boost.Build, useful for verifying specific components of the library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/CONTRIBUTING.md#2025-04-22_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\n./b2 cxxstd=11 libs/gil/test/io\n./b2 cxxstd=11 libs/gil/test/numeric\n./b2 cxxstd=11 libs/gil/test/toolbox\n```\n\n----------------------------------------\n\nTITLE: Horizontal Gradient Computation in C++\nDESCRIPTION: The `x_gradient.cpp` example calculates the horizontal gradient of an image, primarily from a tutorial. Boost GIL is used here to process the image data effectively. Inputs include an image file, and the output is the gradient image, useful in edge detection or image analysis tasks. Constraints include working within GIL-supported file formats.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/example/README.md#2025-04-22_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\n\"int main() {\\n  // Your code here\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Defining accumulate Template in C++\nDESCRIPTION: Template definition for the accumulate algorithm. It takes a Sequence, State, and ForwardOp as template parameters and defines an unspecified type.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/accumulate.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      typename Sequence\n    , typename State\n    , typename ForwardOp\n    >\nstruct accumulate\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Boost JSON Property Setup Function\nDESCRIPTION: Defines a function to configure common build properties for Boost JSON targets, including compiler features, definitions, and dependencies.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/json/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(boost_json_setup_properties target)\n    target_compile_features(${target} PUBLIC cxx_constexpr)\n    target_compile_definitions(${target} PUBLIC BOOST_JSON_NO_LIB=1)\n\n    if(BOOST_SUPERPROJECT_VERSION)\n        target_include_directories(${target} PUBLIC \"${PROJECT_SOURCE_DIR}/include\")\n    else()\n        target_include_directories(${target}\n            PUBLIC\n                \"$<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/include>\"\n                \"$<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>\"\n        )\n    endif()\n\n  if(BOOST_JSON_STANDALONE)\n      target_compile_definitions(${target} PUBLIC BOOST_JSON_STANDALONE)\n      target_compile_features(${target} PUBLIC cxx_std_17)\n  else()\n      target_link_libraries(${target}\n          PUBLIC\n              Boost::align\n              Boost::assert\n              Boost::config\n              Boost::container\n              Boost::exception\n              Boost::mp11\n              Boost::system\n              Boost::throw_exception\n              Boost::utility\n      )\n  endif()\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Format Writer in Boost GIL\nDESCRIPTION: Template for implementing a writer class for a new image format. Includes the required apply() methods that must be implemented with format-specific writing functionality.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/io.rst#2025-04-22_snippet_13\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate< typename Device >\nclass writer< Device\n            , xxx_tag\n            >\n{\npublic:\n\n    writer( Device & file )\n    : out(file)\n    {}\n\n    template<typename View>\n    void apply( const View& view )\n    {\n        // your implementation here\n    }\n\n    template<typename View>\n    void apply( const View&                        view\n              , const image_write_info< xxx_tag >& info )\n    {\n        // your implementation here\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: VelocyPack Serialization/Deserialization Functions in ArangoDB\nDESCRIPTION: Defines free-standing helper functions for serializing and deserializing data to/from VelocyPack. Includes safe and unsafe variants, with the unsafe versions being needed for types like std::string_view or velocypack::Slice that store pointers to the original buffer.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/lib/Inspection/include/Inspection/README.md#2025-04-22_snippet_9\n\nLANGUAGE: cpp\nCODE:\n```\nnamespace arangodb::velocypack {\n  template<class T>\n  void serialize(Builder& builder, T& value);\n\n  template<class T>\n  void deserialize(Slice slice, T& result,\n                  inspection::ParseOptions options = {});\n\n  template<class T>\n  void deserializeUnsafe(Slice slice, T& result,\n                        inspection::ParseOptions options = {});\n\n  template<class T>\n  T deserialize(Slice slice, inspection::ParseOptions options = {});\n\n  template<class T>\n  T deserializeUnsafe(Slice slice, inspection::ParseOptions options = {});\n}  // namespace arangodb::velocypack\n```\n\n----------------------------------------\n\nTITLE: Defining Outcome v2 Namespace Alias (C++)\nDESCRIPTION: This code snippet demonstrates how to define a namespace alias for Outcome v2 to simplify access to its entities. It clarifies the preferred namespace as `outcome_v2`, but notes the use of `BOOST_OUTCOME_V2_NAMESPACE` as a temporary alias due to binary compatibility concerns on standalone Outcome. On Boost.Outcome, `BOOST_OUTCOME_V2_NAMESPACE` always expands to `boost::outcome_v2`.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/tutorial/essential/before.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n\"namespace result = BOOST_OUTCOME_V2_NAMESPACE;\"\n```\n\n----------------------------------------\n\nTITLE: Creating Point-free Style Max Function in C++\nDESCRIPTION: Implementation of a variadic max function using point-free style with the fold adaptor. This approach uses std::max and works with any comparable types.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/src/point_free.md#2025-04-22_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_HOF_STATIC_FUNCTION(max) = fold(BOOST_HOF_LIFT(std::max));\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Code Extended Hook Functions in C++\nDESCRIPTION: Defines hook functions that handle the copy and move construction of outcomes, including exception handling for poke_exception() calls. These functions must be placed in an ADL-searched namespace for Outcome pre-v2.2, or in a custom no value policy for v2.2+.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/tutorial/advanced/hooks/hook_outcome.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\ninline void hook_outcome_copy_construction(std::error_code *new_error_code,std::error_code *old_error_code,std::string *new_message,std::string *old_message) noexcept\n{\n  if(old_error_code != nullptr && old_message != nullptr)\n  {\n    try\n    {\n      poke_exception(new_message, new_error_code);\n    }\n    catch(...)\n    {\n    }\n  }\n}\ninline void hook_outcome_move_construction(std::error_code *new_error_code,std::error_code *old_error_code,std::string *new_message,std::string *old_message) noexcept\n{\n  if(old_error_code != nullptr && old_message != nullptr)\n  {\n    try\n    {\n      poke_exception(new_message, new_error_code);\n    }\n    catch(...)\n    {\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using max_element in C++ Template Metaprogramming\nDESCRIPTION: Demonstrates how to use the max_element algorithm to find the type with the largest size in a vector of types. It uses transform_view to apply sizeof to each type before finding the maximum.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/max_element.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntypedef vector<bool,char[50],long,double> types;\ntypedef max_element<\n      transform_view< types,sizeof_<_1> >\n    >::type iter;\n\nBOOST_MPL_ASSERT(( is_same< deref<iter::base>::type, char[50]> ));\n```\n\n----------------------------------------\n\nTITLE: Defining ConstFunctionObject Concept in C++\nDESCRIPTION: This code snippet defines the ConstFunctionObject concept, which represents an object with a const call operator that can accept any number of arguments.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/src/concepts.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nconcept ConstFunctionObject\n{\n    template<class... Ts>\n    auto operator()(Ts&&...) const;\n};\n```\n\n----------------------------------------\n\nTITLE: Distributed Iterator Property Map Free Functions in C++\nDESCRIPTION: Free functions for getting and putting values in a distributed iterator property map.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/distributed_property_map.rst#2025-04-22_snippet_16\n\nLANGUAGE: cpp\nCODE:\n```\nreference get(iterator_property_map pm, const key_type& key);\nvoid put(iterator_property_map pm, const key_type& key, const value_type& value);\n```\n\n----------------------------------------\n\nTITLE: Defining Assignable Concept - C++\nDESCRIPTION: This snippet defines the Assignable concept which requires that a type T can be assigned a value of type U through an assignment operator.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/concepts.rst.txt#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nauto concept Assignable<typename T, typename U = T>\n{\n    typename result_type;\n    result_type operator=(T&, U);\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Up ICU Support for Boost.Regex\nDESCRIPTION: Configures ICU support by finding the ICU package and setting up a separate target for ICU-enabled Boost.Regex.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/regex/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(ICU COMPONENTS data i18n uc QUIET)\n\nif(ICU_FOUND)\n\n   add_library(boost_regex_icu INTERFACE)\n   add_library(Boost::regex_icu ALIAS boost_regex_icu)\n\n   target_include_directories(boost_regex_icu INTERFACE include)\n\n   if(NOT BOOST_REGEX_STANDALONE)\n\n      target_link_libraries(boost_regex_icu\n        INTERFACE\n          Boost::config\n          Boost::throw_exception\n          Boost::predef\n          Boost::assert\n      )\n\n   else()\n\n      target_compile_definitions(boost_regex_icu\n        INTERFACE BOOST_REGEX_STANDALONE\n      )\n\n   endif()\n\n   find_package(ICU COMPONENTS data i18n uc REQUIRED)\n\n   target_link_libraries(boost_regex_icu INTERFACE ICU::data ICU::i18n ICU::uc)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost.Locale Windows API Backend\nDESCRIPTION: Sets up the Windows API backend for Boost.Locale if enabled, including additional source files.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/CMakeLists.txt#2025-04-22_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nif(BOOST_LOCALE_ENABLE_WINAPI)\n\n  target_sources(boost_locale PRIVATE\n    src/win32/collate.cpp\n    src/win32/converter.cpp\n    src/win32/numeric.cpp\n    src/win32/win_backend.cpp\n  )\n\nelse()\n\n  target_compile_definitions(boost_locale PRIVATE BOOST_LOCALE_NO_WINAPI_BACKEND=1)\n\nendif()\n\nif(BOOST_LOCALE_ENABLE_WINAPI OR (BOOST_LOCALE_ENABLE_STD AND WIN32))\n\n  target_sources(boost_locale PRIVATE\n    src/win32/lcid.cpp\n  )\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Snappy Installation in CMake\nDESCRIPTION: Sets up the installation rules for Snappy library, including headers, CMake configuration files, and targets. It uses GNUInstallDirs for standard installation directories.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/snappy/snappy-1.1.9/CMakeLists.txt#2025-04-22_snippet_16\n\nLANGUAGE: CMake\nCODE:\n```\n# Must be included before CMAKE_INSTALL_INCLUDEDIR is used.\ninclude(GNUInstallDirs)\n\nif(SNAPPY_INSTALL)\n  install(TARGETS snappy\n    EXPORT SnappyTargets\n    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}\n    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}\n    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}\n  )\n  install(\n    FILES\n      \"snappy-c.h\"\n      \"snappy-sinksource.h\"\n      \"snappy.h\"\n      \"${PROJECT_BINARY_DIR}/snappy-stubs-public.h\"\n    DESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}\"\n  )\n\n  include(CMakePackageConfigHelpers)\n  configure_package_config_file(\n    \"cmake/${PROJECT_NAME}Config.cmake.in\"\n    \"${PROJECT_BINARY_DIR}/cmake/${PROJECT_NAME}Config.cmake\"\n    INSTALL_DESTINATION \"${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}\"\n  )\n  write_basic_package_version_file(\n    \"${PROJECT_BINARY_DIR}/cmake/${PROJECT_NAME}ConfigVersion.cmake\"\n    COMPATIBILITY SameMajorVersion\n  )\n  install(\n    EXPORT SnappyTargets\n    NAMESPACE Snappy::\n    DESTINATION \"${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}\"\n  )\n  install(\n    FILES\n      \"${PROJECT_BINARY_DIR}/cmake/${PROJECT_NAME}Config.cmake\"\n      \"${PROJECT_BINARY_DIR}/cmake/${PROJECT_NAME}ConfigVersion.cmake\"\n    DESTINATION \"${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}\"\n  )\nendif(SNAPPY_INSTALL)\n```\n\n----------------------------------------\n\nTITLE: Defining Number of Local Vertices Access Method for Distributed Vertex List Graph in C++\nDESCRIPTION: This snippet describes the method to retrieve the number of vertices stored locally in the Distributed Vertex List Graph using the num_vertices function. It illustrates the expected return type of the function.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/DistributedVertexListGraph.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n``num_vertices(g)``\\n  |Returns the number of vertices       \\n  |stored locally in the graph.         \n```\n\n----------------------------------------\n\nTITLE: File Handle Class Implementation in C++\nDESCRIPTION: A simplified file handle implementation demonstrating two-phase construction, move semantics, and RAII-based file descriptor management. The class uses default member initializers for phase 1 construction and includes a constexpr constructor. Copy operations are disabled in favor of move semantics due to the high cost of duplicating file descriptors.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/tutorial/advanced/constructors/file_handle.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n{{% snippet \"constructors.cpp\" \"file_handle\" %}}\n```\n\n----------------------------------------\n\nTITLE: Homogeneous Pixel Type Implementation\nDESCRIPTION: Creates standard pixel type with fixed channel value and layout, supporting RGB and BGR representations\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/pixel.rst#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <typename ChannelValue, typename Layout> struct pixel;\n\ntypedef pixel<bits8, rgb_layout_t> rgb8_pixel_t;\ntypedef pixel<bits8, bgr_layout_t> bgr8_pixel_t;\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost.Locale Backend Options\nDESCRIPTION: Sets up build options for various backends (iconv, ICU, POSIX, std::locale, Windows API) and configures the library accordingly.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(Iconv QUIET) # requires CMake 3.11\nfind_package(ICU COMPONENTS data i18n uc QUIET)\n\nset(_default_posix OFF)\n\nif(CMAKE_SYSTEM_NAME MATCHES \"Linux|Darwin\")\n  set(_default_posix ON)\nendif()\n\noption(BOOST_LOCALE_ENABLE_ICONV \"Boost.Locale: enable iconv backend\" ${ICONV_FOUND})\noption(BOOST_LOCALE_ENABLE_ICU \"Boost.Locale: enable ICU backend\" ${ICU_FOUND})\noption(BOOST_LOCALE_ENABLE_POSIX \"Boost.Locale: enable POSIX backend\" ${_default_posix})\noption(BOOST_LOCALE_ENABLE_STD \"Boost.Locale: enable std::locale backend\" ON)\noption(BOOST_LOCALE_ENABLE_WINAPI \"Boost.Locale: enable Windows API backend\" ${WIN32})\n\nunset(_default_posix)\n```\n\n----------------------------------------\n\nTITLE: Configuring CPack for ArangoDB Debug Package\nDESCRIPTION: Sets up CPack variables for Debian package generation. Configures package metadata including name, version, vendor, contact information, and architecture. Uses xz compression and sets up component selection for the debug package.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/cmake/packages/dbg/deb.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(CPACK_PACKAGE_VERSION \"${ARANGODB_DEBIAN_UPSTREAM}\")\nset(CPACK_PACKAGE_NAME \"${CPACK_PACKAGE_NAME}-dbg\")\nset(CPACK_DEBIAN_PACKAGE_SECTION \"devel\")\nset(CPACK_PACKAGE_VENDOR  \"${ARANGODB_PACKAGE_VENDOR}\")\nset(CPACK_PACKAGE_CONTACT ${ARANGODB_PACKAGE_CONTACT})\nset(CPACK_DEBIAN_PACKAGE_HOMEPAGE ${ARANGODB_URL_INFO_ABOUT})\nset(CPACK_DEBIAN_PACKAGE_SHLIBDEPS OFF)\nset(CPACK_DEBIAN_COMPRESSION_TYPE \"xz\")\nset(CPACK_COMPONENTS_ALL debian-extras)\nset(CPACK_GENERATOR \"DEB\")\nset(CPACK_SET_DESTDIR ON)\n\nset(CPACK_PACKAGING_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX})\n\nif (USE_ENTERPRISE)\n  set(CPACK_RESOURCE_FILE_LICENSE \"${PROJECT_SOURCE_DIR}/enterprise/LICENSE\")\nelse ()\n  set(CPACK_RESOURCE_FILE_LICENSE \"${PROJECT_SOURCE_DIR}/LICENSE\")\nendif ()\n\nfile(READ \"${PROJECT_SOURCE_DIR}/Installation/debian/dbg_packagedesc.txt\"\n  CPACK_DEBIAN_PACKAGE_DESCRIPTION)\n```\n\n----------------------------------------\n\nTITLE: Conditional Compiler Warnings\nDESCRIPTION: This block conditionally sets compiler warning levels based on whether the build is a CI build or not. It checks for the presence of CI environment variables to determine the build type and adjusts the verbosity of compiler warnings accordingly.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n\"if(DEFINED ENV{CI} OR DEFINED ENV{AGENT_JOBSTATUS} OR DEFINED ENV{GITHUB_ACTIONS})\n  set(BOOST_GIL_BUILD_CI ON)\n  message(STATUS \\\"Boost.GIL: Turning off detailed compiler warnings for CI build short log\\\")\nelse()\n  set(BOOST_GIL_BUILD_CI OFF)\n  message(STATUS \\\"Boost.GIL: Turning on detailed compiler warnings\\\")\nendif()\"\n```\n\n----------------------------------------\n\nTITLE: Semantics of remove_if Algorithm in C++\nDESCRIPTION: Demonstrates the equivalent semantics of the remove_if algorithm using lambda expressions and fold operation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/remove_if.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntypedef lambda<pred>::type p;\ntypedef lambda<in::operation>::type op;\n\ntypedef fold<\n      s\n    , in::state\n    , eval_if<\n          apply_wrap1<p,_2>\n        , identity<_1>\n        , apply_wrap2<op,_1,_2>\n        >\n    >::type r;\n```\n\n----------------------------------------\n\nTITLE: Invoking Available Testsuites with Shell Scripts\nDESCRIPTION: This snippet demonstrates how to invoke different testsuites and options using the shell script './scripts/unittest'. It supports finding specific tests and running them in either single server or cluster mode.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/CONTRIBUTING.md#2025-04-22_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/unittest\n./scripts/unittest find --test tests/js/client/shell/api/aqlfunction.js\n./scripts/unittest auto --test tests/js/client/shell/api/aqlfunction.js\n./scripts/unittest auto --cluster true --test tests/js/client/shell/api/aqlfunction.js\n./scripts/unittest gtest\n./scripts/unittest gtest --testCase \"IResearchDocumentTest.*:*ReturnExecutor*\"\nTMPDIR=/some/other/path ./scripts/unittest shell_client_aql\n```\n\n----------------------------------------\n\nTITLE: Using lower_bound Algorithm in C++\nDESCRIPTION: Demonstrates the usage of the lower_bound algorithm with a vector of integers, searching for the position of the value 3.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/lower_bound.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntypedef vector_c<int,1,2,3,3,3,5,8> numbers;\ntypedef lower_bound< numbers, int_<3> >::type iter;\n\nBOOST_MPL_ASSERT_RELATION( \n      (distance< begin<numbers>::type,iter >::value), ==, 2\n    );\n\nBOOST_MPL_ASSERT_RELATION( deref<iter>::type::value, ==, 3 );\n```\n\n----------------------------------------\n\nTITLE: Defining Boost.Iostreams Option Function in CMake\nDESCRIPTION: Creates a function to handle optional dependencies for Boost.Iostreams, such as ZLIB, BZip2, LZMA, and Zstd. It checks for the package, sets an option, and links the library if enabled.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iostreams/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(boost_iostreams_option name description package version found target) # sources...\n\n  find_package(${package} ${version} QUIET)\n\n  if(${found} AND TARGET ${target})\n\n    option(${name} ${description} ON)\n\n  else()\n\n    option(${name} ${description} OFF)\n\n  endif()\n\n  if(${name})\n\n    find_package(${package} ${version} REQUIRED)\n    target_sources(boost_iostreams PRIVATE ${ARGN})\n    target_link_libraries(boost_iostreams PRIVATE ${target})\n\n  endif()\n\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Defining the limit_c and limit API Functions in C++\nDESCRIPTION: Implements the public API functions for creating parameter-limited functions. limit_c is a direct function that takes a parameter count and a function, while limit is declared as a static variable for more convenient usage.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/limit.hpp.txt#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<std::size_t N, class F>\nconstexpr detail::limit_adaptor<N, F> limit_c(F f)\n{\n    return detail::limit_adaptor<N, F>(static_cast<F&&>(f));\n}\n\nBOOST_HOF_DECLARE_STATIC_VAR(limit, detail::limit_f);\n```\n\n----------------------------------------\n\nTITLE: Setting Private Include Directories\nDESCRIPTION: This snippet adds private include directories to the `arango_rocksdb` library, including the ArangoDB source directory (`arangod`) and the enterprise include directory (if applicable).  These directories contain header files that are specific to ArangoDB's internal implementation and are not intended for external use.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/RocksDBEngine/CMakeLists.txt#2025-04-22_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(arango_rocksdb PRIVATE\n  \"${PROJECT_SOURCE_DIR}/arangod\"\n  \"${PROJECT_SOURCE_DIR}/${ENTERPRISE_INCLUDE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Conditional Edge Removal in C++\nDESCRIPTION: Template functions for removing edges that satisfy given predicates, including specific operations for in-edges and out-edges.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/distributed_adjacency_list.rst#2025-04-22_snippet_18\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <class Predicate>\nvoid remove_out_edge_if(vertex_descriptor u, Predicate predicate, adjacency_list& g);\n\ntemplate <class Predicate>\nvoid remove_in_edge_if(vertex_descriptor v, Predicate predicate, adjacency_list& g);\n\ntemplate <class Predicate>\nvoid remove_edge_if(Predicate predicate, adjacency_list& g);\n```\n\n----------------------------------------\n\nTITLE: Defining Mutable Image View Concept in C++\nDESCRIPTION: This snippet extends the ImageViewConcept to the mutable variant, allowing for modification of pixel values within the image view. It leverages the existing concept for mutable 2D random access image views, ensuring mutability of the pixels.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/image_view.rst#2025-04-22_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\nconcept MutableImageViewConcept<ImageViewConcept View>\n  : MutableRandomAccess2DImageViewConcept<View>\n{};\n\n```\n\n----------------------------------------\n\nTITLE: Implementing eval_ordered Helper Function for Ordered Evaluation\nDESCRIPTION: Helper function template that ensures arguments are evaluated from left to right when ordered brace initialization is not available. It uses pack operations to build up the evaluated arguments recursively.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/apply_eval.hpp.txt#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#if BOOST_HOF_NO_ORDERED_BRACE_INIT\ntemplate<class R, class F, class Pack>\nconstexpr R eval_ordered(const F& f, Pack&& p)\n{\n    return p(f);\n}\n\ntemplate<class R, class F, class Pack, class T, class... Ts>\nconstexpr R eval_ordered(const F& f, Pack&& p, T&& x, Ts&&... xs)\n{\n    return boost::hof::detail::eval_ordered<R>(f, boost::hof::pack_join(BOOST_HOF_FORWARD(Pack)(p), boost::hof::pack_forward(boost::hof::eval(x))), BOOST_HOF_FORWARD(Ts)(xs)...);\n}\n#else\n```\n\n----------------------------------------\n\nTITLE: Using-Directive for Boost.Parameter Keywords Namespace\nDESCRIPTION: This snippet demonstrates how to use a using-directive to bring in only the names of the keywords, which are now grouped into a namespace called `keywords`.  This approach provides better control over namespace pollution.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/index.rst#2025-04-22_snippet_49\n\nLANGUAGE: cpp\nCODE:\n```\n    **using namespace lib::keywords;**\n    int y = lib::f(_name = \"bob\", _index = 2);\n```\n\nLANGUAGE: cpp\nCODE:\n```\nint main() { return 0; }\n```\n\n----------------------------------------\n\nTITLE: Using BOOST_OUTCOME_TRYX for Simple Initialization in C++\nDESCRIPTION: This snippet shows the usage of the BOOST_OUTCOME_TRYX macro, which allows for a more concise error handling approach in C++. It demonstrates how to use the macro inline for variable initialization, including within expressions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/tutorial/essential/result/try.md#2025-04-22_snippet_2\n\nLANGUAGE: c++\nCODE:\n```\nint i = BOOST_OUTCOME_TRYX (BigInt::fromString(text));\n```\n\nLANGUAGE: c++\nCODE:\n```\nif (int i = BOOST_OUTCOME_TRYX(BigInt::fromString(text)))\n  use_a_non_zero_int(i);\n```\n\nLANGUAGE: c++\nCODE:\n```\nint ans = BOOST_OUTCOME_TRYX(BigInt::fromString(\"1\")) + BOOST_OUTCOME_TRYX(BigInt::fromString(\"2\"));\n```\n\n----------------------------------------\n\nTITLE: Defining Memory Layout for Non-Trivially Copyable Types in C++\nDESCRIPTION: Structure definition showing the memory layout of basic_outcome when value_type and error_type are not trivially copyable. Uses separate members instead of union.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/basic_outcome/_index.md#2025-04-22_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nstruct outcome_layout {\n  struct non_trivially_copyable_result_layout {\n    value_type value;\n    unsigned int flags;\n    error_type error;\n  };\n  exception_type exception;\n};\n```\n\n----------------------------------------\n\nTITLE: Expected Return Type with Error Info in C++\nDESCRIPTION: Example of using expected return type for error handling that combines a success value with error information.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/leaf/doc/whitepaper.md#2025-04-22_snippet_4\n\nLANGUAGE: c++\nCODE:\n```\nexpected<int, error_info> compute_value(....);\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost IO Library with CMake\nDESCRIPTION: This CMake script sets up the Boost IO library project. It defines the project version, creates an interface library, sets include directories, and specifies dependencies.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/io/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Copyright 2018 Mike Dev\n# Distributed under the Boost Software License, Version 1.0.\n# (http://www.boost.org/LICENSE_1_0.txt)\n\ncmake_minimum_required(VERSION 3.5...3.20)\n\nproject(boost_io VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n\nadd_library(boost_io INTERFACE)\nadd_library(Boost::io ALIAS boost_io)\n\ntarget_include_directories(boost_io INTERFACE include)\n\ntarget_link_libraries(boost_io\n  INTERFACE\n    Boost::config\n)\n```\n\n----------------------------------------\n\nTITLE: Defining HTTP Server Executable Target\nDESCRIPTION: Defines the http-server-fast executable target with its source files including Beast library files, common files, and server implementation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/beast/example/http/server/fast/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable (http-server-fast\n    ${BOOST_BEAST_FILES}\n    ${COMMON_FILES}\n    Jamfile\n    fields_alloc.hpp\n    http_server_fast.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Declaring greater_equal Metafunction Template in C++\nDESCRIPTION: Defines the template structure for the greater_equal metafunction, which compares two Integral Constants and returns an unspecified type representing the result of the comparison.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/greater_equal.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      typename T1\n    , typename T2\n    >\nstruct greater_equal\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Including Boost.JSON as Header-Only in C++\nDESCRIPTION: To use Boost.JSON as a header-only library, include this line in exactly one source file of your project. This eliminates the need to link against a static or dynamic library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/json/README.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/json/src.hpp>\n```\n\n----------------------------------------\n\nTITLE: Constructor Helper Function Signature\nDESCRIPTION: Helper function called during result construction to handle the conversion. Takes a pointer to the target type T and a universal reference to the source type U.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/basic_result/implicit_value_converting_constructor.md#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nvoid on_result_construction(T *, U &&) noexcept\n```\n\n----------------------------------------\n\nTITLE: Example Function Calls Using Boost.Parameter Various Argument Styles\nDESCRIPTION: Demonstrates different ways to call a function using Boost.Parameter features, including positional, composed, named, and deduced arguments.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_67\n\nLANGUAGE: cpp\nCODE:\n```\nB const b = B();\nb(  // positional arguments\n    lvalue_const_bitset<0>()\n  , lvalue_bitset<1>()\n  , rvalue_const_bitset<2>()\n  , rvalue_bitset<3>()\n);\nb(  // positional arguments\n    lvalue_const_bitset<0>()\n  , lvalue_bitset<1>()\n);\nb((  // composed arguments\n    _rr0 = rvalue_bitset<3>()\n  , _lrc0 = lvalue_const_bitset<0>()\n  , _lr0 = lvalue_bitset<1>()\n  , _rrc0 = rvalue_const_bitset<2>()\n));\nb(  // named arguments\n    _rr0 = rvalue_bitset<3>()\n  , _lrc0 = lvalue_const_bitset<0>()\n  , _lr0 = lvalue_bitset<1>()\n  , _rrc0 = rvalue_const_bitset<2>()\n);\nb(  // named arguments\n    _lr0 = lvalue_bitset<1>()\n  , _lrc0 = lvalue_const_bitset<0>()\n);\n\nb(  // deduced arguments\n    rvalue_bitset<3>()\n  , lvalue_const_bitset<0>()\n  , lvalue_bitset<1>()\n  , rvalue_const_bitset<2>()\n);\nb(  // deduced arguments\n    lvalue_bitset<1>()\n  , lvalue_const_bitset<0>()\n);\n```\n\n----------------------------------------\n\nTITLE: MPL min Expression Semantics\nDESCRIPTION: Illustrates the expression semantics of the `min` metafunction. It shows that `min<x,y>::type r` is equivalent to `if_< less<x,y>,x,y >::type r`, where `x` and `y` are arbitrary types.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/min.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntypedef min<x,y>::type r;\n```\n\n----------------------------------------\n\nTITLE: Implementing Infix Adaptor Class Template in C++\nDESCRIPTION: Main implementation of the infix_adaptor class template that enables using a function in infix notation. Inherits from callable_base and provides necessary base function access methods.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/infix.hpp.txt#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<class F>\nstruct infix_adaptor : detail::callable_base<F>\n{\n    typedef infix_adaptor fit_rewritable1_tag;\n    BOOST_HOF_INHERIT_CONSTRUCTOR(infix_adaptor, detail::callable_base<F>);\n\n    template<class... Ts>\n    constexpr const detail::callable_base<F>& base_function(Ts&&... xs) const noexcept\n    {\n        return boost::hof::always_ref(*this)(xs...);\n    }\n\n    template<class... Ts>\n    constexpr const detail::callable_base<F>& infix_base_function(Ts&&... xs) const noexcept\n    {\n        return boost::hof::always_ref(*this)(xs...);\n    }\n\n    BOOST_HOF_RETURNS_CLASS(infix_adaptor);\n\n    template<class... Ts>\n    constexpr auto operator()(Ts&&... xs) const BOOST_HOF_RETURNS\n    (\n        (BOOST_HOF_MANGLE_CAST(const detail::callable_base<F>&)(BOOST_HOF_CONST_THIS->base_function(xs...)))(BOOST_HOF_FORWARD(Ts)(xs)...)\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Running Mocha Tests\nDESCRIPTION: This snippet illustrates how to run tests that utilize the Mocha testing framework, using the arangosh client to execute tests from the specified file.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/CONTRIBUTING.md#2025-04-22_snippet_25\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@arangodb/mocha-runner\").runTest('tests/js/client/endpoint-spec.js', true)\n```\n\n----------------------------------------\n\nTITLE: Declaring is_basic_outcome Type Trait in C++\nDESCRIPTION: Declares an integral constant type that evaluates to true for basic_outcome<T, EC, EP, NoValuePolicy> types. It is not overridable and resides in the BOOST_OUTCOME_V2_NAMESPACE namespace.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/traits/is_basic_outcome.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nis_basic_outcome<T>\n```\n\n----------------------------------------\n\nTITLE: Declaring Global Function Objects with BOOST_HOF_STATIC_FUNCTION in C++\nDESCRIPTION: Shows how to declare a function object at global or namespace scope using BOOST_HOF_STATIC_FUNCTION. This follows best practices for avoiding global state and initialization issues.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/doc/src/gettingstarted.md.txt#2025-04-22_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\nBOOST_HOF_STATIC_FUNCTION(sum) = sum_f();\n```\n\n----------------------------------------\n\nTITLE: Rotating Images at Runtime with Boost.GIL\nDESCRIPTION: This C++ snippet demonstrates a function to rotate an image 180 degrees using the Boost.GIL library. The function reads an image from disk, rotates it, and then writes it back to disk. It supports dynamic image types by leveraging Boost's apply_operation to cater to runtime constructs. Dependencies include Boost.GIL and Boost.Variant2 libraries for proper execution.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/dynamic_image.rst.txt#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\n#include <boost\\gil\\extension\\io\\jpeg_dynamic_io.hpp>\n\ntemplate <typename Image>    // Could be rgb8_image_t or any_image<...>\nvoid save_180rot(const std::string& file_name)\n{\n  Image img;\n  jpeg_read_image(file_name, img);\n  jpeg_write_view(file_name, rotated180_view(view(img)));\n}\n\n// implementation using templated view\ntemplate <typename View>\ntypename dynamic_xy_step_type<View>::type rotated180_view(const View& src) { ... }\n\nnamespace detail\n{\n  // the function, wrapped inside a function object\n  template <typename Result> struct rotated180_view_fn\n  {\n      typedef Result result_type;\n      template <typename View> result_type operator()(const View& src) const\n{\n          return result_type(rotated180_view(src));\n      }\n  };\n}\n\n// overloading of the function using variant. Takes and returns run-time bound view.\n// The returned view has a dynamic step\ntemplate <typename ViewTypes> inline // Models MPL Random Access Container of models of ImageViewConcept\ntypename dynamic_xy_step_type<any_image_view<ViewTypes> >::type rotated180_view(const any_image_view<ViewTypes>& src)\n{\n  return apply_operation(src,detail::rotated180_view_fn<typename dynamic_xy_step_type<any_image_view<ViewTypes> >::type>());\n}\n```\n\n----------------------------------------\n\nTITLE: Deriving a Base Class from Boost Noncopyable in C++\nDESCRIPTION: This code snippet illustrates how to derive a base class from boost::noncopyable, which is useful in preventing slicing when classes are used in inheritance hierarchies. This is ideal in scenarios where maintaining object integrity is crucial.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/guidelines.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nclass Polymorphic : boost::noncopyable\n{\n  ...\n};\n```\n\n----------------------------------------\n\nTITLE: Repeating Timer with Bound Arguments in C++\nDESCRIPTION: Implements a timer that fires every second using boost::bind to pass additional parameters to the handler function. Includes a counter to stop after 6 iterations.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/asio/example/cpp03/tutorial/timer_dox.txt#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nvoid print(const boost::system::error_code&,\n    boost::asio::steady_timer* t, int* count)\n{\n    if (*count < 5)\n    {\n        ++(*count);\n        t->expires_at(t->expiry() + boost::asio::chrono::seconds(1));\n        t->async_wait(boost::bind(print, boost::asio::placeholders::error, t, count));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Properties Get Template Function in C++\nDESCRIPTION: A template function for retrieving values from property maps with specialized string conversion and error handling mechanisms\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/property_map/doc/dynamic_property_map.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<typename Value, typename Key>\nValue get(const std::string& name, const dynamic_properties& dp, const Key& key)\n```\n\n----------------------------------------\n\nTITLE: Depth-First Visit Function Declaration in Boost Graph\nDESCRIPTION: This is the main depth-first visit function, which performs a distributed depth-first traversal of an undirected graph. It takes the graph, a starting vertex, and a DFS visitor as parameters.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/tsin_depth_first_visit.rst#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n\"template<typename DistributedGraph, typename DFSVisitor>\n  void\n  depth_first_visit(const DistributedGraph& g,\n                    typename graph_traits<DistributedGraph>::vertex_descriptor s,\n                    DFSVisitor vis);\"\n```\n\n----------------------------------------\n\nTITLE: Defining the and_ Metafunction Template in C++\nDESCRIPTION: Template definition for the and_ metafunction which performs short-circuit logical AND operations on its arguments. It accepts multiple metafunction parameters and returns an unspecified type representing the result.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/and_.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate< \n      typename F1\n    , typename F2\n    |...|\n    , typename F\\ *n* = |unspecified|\n    >\nstruct and_\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Capture Invoke Template in C++\nDESCRIPTION: Defines a template class to invoke functions with captured arguments. It handles the combination of captured values with new function arguments using compressed pairs and pack operations.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/capture.hpp.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<class F, class Pack>\nstruct capture_invoke : detail::compressed_pair<detail::callable_base<F>, Pack>, detail::function_result_type<F>\n{\n    typedef capture_invoke fit_rewritable1_tag;\n    typedef detail::compressed_pair<detail::callable_base<F>, Pack> base;\n    BOOST_HOF_INHERIT_CONSTRUCTOR(capture_invoke, base)\n    template<class... Ts>\n    constexpr const detail::callable_base<F>& base_function(Ts&&... xs) const noexcept\n    {\n        return this->first(xs...);\n    }\n\n    template<class... Ts>\n    constexpr const Pack& get_pack(Ts&&...xs) const noexcept\n    {\n        return this->second(xs...);\n    }\n\n    template<class Failure, class... Ts>\n    struct unpack_capture_failure\n    {\n        template<class... Us>\n        struct apply\n        {\n            typedef typename Failure::template of<Us..., Ts...> type;\n        };\n    };\n\n    struct capture_failure\n    {\n        template<class Failure>\n        struct apply\n        {\n            template<class... Ts>\n            struct of\n            : Pack::template apply<unpack_capture_failure<Failure, Ts...>>::type\n            {};\n        };\n    };\n\n    struct failure\n    : failure_map<capture_failure, detail::callable_base<F>>\n    {};\n\n    BOOST_HOF_RETURNS_CLASS(capture_invoke);\n\n    template<class... Ts>\n    constexpr BOOST_HOF_SFINAE_RESULT\n    (\n        typename result_of<decltype(boost::hof::pack_join), \n            id_<const Pack&>, \n            result_of<decltype(boost::hof::pack_forward), id_<Ts>...> \n        >::type,\n        id_<detail::callable_base<F>&&>\n    ) \n    operator()(Ts&&... xs) const BOOST_HOF_SFINAE_RETURNS\n    (\n        boost::hof::pack_join\n        (\n            BOOST_HOF_MANGLE_CAST(const Pack&)(BOOST_HOF_CONST_THIS->get_pack(xs...)), \n            boost::hof::pack_forward(BOOST_HOF_FORWARD(Ts)(xs)...)\n        )\n        (BOOST_HOF_RETURNS_C_CAST(detail::callable_base<F>&&)(BOOST_HOF_CONST_THIS->base_function(xs...)))\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: BOOST_OUTCOME_CO_TRY Macro Usage in C++\nDESCRIPTION: Macro that evaluates an expression within a coroutine, assigns successful results to a variable, and handles errors by returning from the function. Supports customization points for value checking, return type conversion, and value extraction.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/macros/co_try.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_OUTCOME_CO_TRY(var, expr)\n```\n\n----------------------------------------\n\nTITLE: Defining std_result Type Alias in C++\nDESCRIPTION: The std_result is a type alias to basic_result configured with std::error_code and policy::default_policy. It's defined in the BOOST_OUTCOME_V2_NAMESPACE namespace and is included via the boost/outcome/std_result.hpp header.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/aliases/std_result.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nstd_result<T, E = std::error_code, NoValuePolicy = policy::default_policy<T, E, void>>\n```\n\n----------------------------------------\n\nTITLE: Defining Vertex and Edge Structures for Properties\nDESCRIPTION: This snippet defines two structures, City and Highway, which represent vertex and edge properties respectively in the distributed graph. Serialization functions are also included for data transfer between processes.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/distributed_adjacency_list.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nstruct City {\n  City() { }\n  City(const std::string& name, const std::string& mayor = \"Unknown\", int population = 0)\n    : name(name), mayor(mayor), population(population) { }\n\n  std::string name;\n  std::string mayor;\n  int population;\n\n  // Serialization support is required!\n  template<typename Archiver>\n  void serialize(Archiver& ar, const unsigned int /*version*/) {\n    ar & name & mayor & population;\n  }\n};\n\nstruct Highway {\n  Highway() { }\n  Highway(const std::string& name, int lanes, int miles_per_hour, int length) \n    : name(name), lanes(lanes), miles_per_hour(miles_per_hour), length(length) { }\n\n  std::string name;\n  int lanes;\n  int miles_per_hour;\n  int length;\n\n  // Serialization support is required!\n  template<typename Archiver>\n  void serialize(Archiver& ar, const unsigned int /*version*/) {\n    ar & name & lanes & miles_per_hour & length;\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Image Reader Class\nDESCRIPTION: Creates a template-based reader class for a custom image format with configurable device and color conversion policy, providing methods for reading image information and applying image data\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/io.rst.txt#2025-04-22_snippet_10\n\nLANGUAGE: C++\nCODE:\n```\ntemplate< typename Device, typename ConversionPolicy >\nclass reader< Device, xxx_tag, ConversionPolicy >\n    : public reader_base< xxx_tag, ConversionPolicy >\n{\nprivate:\n    typedef typename ConversionPolicy::color_converter_type cc_t;\n\npublic:\n    reader( Device& device )\n    : _io_dev( device )\n    {}\n\n    reader( Device& device, const cc_t& cc )\n    : _io_dev( device )\n    , reader_base< xxx_tag, ConversionPolicy >( cc )\n    {}\n\n    image_read_info< xxx_tag > get_info()\n    {\n        // your implementation here\n    }\n\n    template< typename View >\n    void apply( const View& dst_view )\n    {\n        // your implementation here\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Indirect Comparison Function Template in C++\nDESCRIPTION: This snippet defines a template class `indirect_fun` that allows a comparison function to be applied to the objects pointed to by pointers. It handles both single and double pointer comparisons, ensuring that the comparison logic remains clean and avoids boilerplate code.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/indirect_fun.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nnamespace boost\n{      \n    template< class Fun >\n    struct indirect_fun\n    {\n        indirect_fun() : fun(Fun())\n        { }\n        \n        indirect_fun( Fun f ) : fun(f)\n        { }\n        \n        template< class T >\n        typename result_of< Fun( typename pointee<T>::type ) >::type \n        operator()( const T& r ) const\n        { \n            return fun( *r );\n        }\n        \n        template< class T, class U >\n        typename result_of< Fun( typename pointee<T>::type, \n                                 typename pointee<U>::type ) >::type \n        operator()( const T& r, const U& r2 ) const\n        { \n            return fun( *r, *r2 );\n        }\n        \n    private:\n        Fun fun;\n    };\n    \n    template< class Fun >\n    inline indirect_fun<Fun> make_indirect_fun( Fun f )\n    {\n        return indirect_fun<Fun>( f );\n    }        \n} // namespace 'boost'\n```\n\n----------------------------------------\n\nTITLE: Using Partial Application and Function Composition in C++\nDESCRIPTION: Demonstrates partial application and function composition using adaptors from Boost.HigherOrderFunctions, allowing for the creation of new functions from existing ones.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/src/gettingstarted.md#2025-04-22_snippet_8\n\nLANGUAGE: C++\nCODE:\n```\nauto add_1 = partial(sum)(1);\nauto add_2 = compose(add_1, add_1);\nauto three = add_2(1);\n```\n\n----------------------------------------\n\nTITLE: Declaring reverse_replace_if Template in C++\nDESCRIPTION: Defines the template for the reverse_replace_if algorithm. It takes a Sequence, a Predicate, and an optional Inserter as template parameters. The algorithm returns a reversed copy of the original sequence with elements replaced based on the predicate.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/reverse_replace_if.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      typename Sequence\n    , typename Pred\n    , typename In = |unspecified|\n    >\nstruct reverse_replace_if\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Iterator Concepts in C++\nDESCRIPTION: This code snippet defines various iterator concept classes in the boost_concepts namespace. It includes concepts for iterator access (Readable, Writable, Swappable, Lvalue) and traversal (Incrementable, SinglePass, Forward, Bidirectional, RandomAccess). These concepts are used for better error reporting in template instantiations.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/iterator_concepts.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nnamespace boost_concepts {\n\n    // Iterator Access Concepts\n\n    template <typename Iterator>\n    class ReadableIteratorConcept;\n\n    template <\n        typename Iterator\n      , typename ValueType = std::iterator_traits<Iterator>::value_type\n    >\n    class WritableIteratorConcept;\n\n    template <typename Iterator>\n    class SwappableIteratorConcept;\n\n    template <typename Iterator>\n    class LvalueIteratorConcept;\n\n    // Iterator Traversal Concepts\n\n    template <typename Iterator>\n    class IncrementableIteratorConcept;\n\n    template <typename Iterator>\n    class SinglePassIteratorConcept;\n\n    template <typename Iterator>\n    class ForwardTraversalConcept;\n\n    template <typename Iterator>\n    class BidirectionalTraversalConcept;\n\n    template <typename Iterator>\n    class RandomAccessTraversalConcept;\n\n    // Interoperability\n\n    template <typename Iterator, typename ConstIterator>\n    class InteroperableIteratorConcept;\n\n}\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Binary UFunc with Boost.Python - C++\nDESCRIPTION: Demonstrates usage of a user-defined struct 'BinarySquare' with Boost.Python to create a callable Python object. The object computes the square of list elements using a binary C++ functor, showcasing how to bind C++ functionality to Python seamlessly. Requires a predefined C++ struct and uses Boost.Python’s 'class_' for binding.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/doc/html/numpy/_sources/reference/binary_ufunc.rst.txt#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\nnamespace p = boost::python;\nnamespace np = boost::python::numpy;\n\nstruct BinarySquare\n{\n  typedef double first_argument_type;\n  typedef double second_argument_type;\n  typedef double result_type;\n\n  double operator()(double a,double b) const { return (a*a + b*b) ; }\n};\n\np::object ud = p::class_<BinarySquare, boost::shared_ptr<BinarySquare> >(\"BinarySquare\").def(\"__call__\", np::binary_ufunc<BinarySquare>::make());\np::object inst = ud();\nresult_array = inst.attr(\"__call__\")(demo_array,demo_array) ;\nstd::cout << \"Square of list with binary ufunc is \" << p::extract <char const * > (p::str(result_array)) << std::endl ;\n```\n\n----------------------------------------\n\nTITLE: Initializing Boost.Locale CMake Project\nDESCRIPTION: Sets up the CMake project for Boost.Locale, including version and language requirements.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.20)\n\nproject(boost_locale VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Using copy_if Algorithm in C++\nDESCRIPTION: Provides an example of using the copy_if algorithm to filter numbers less than 5 from a range of 0 to 9, inserting the results into a vector.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/copy_if.rst#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\ntypedef copy_if<\n      range_c<int,0,10>\n    , less< _1, int_<5> >\n    , back_inserter< vector<> >\n    >::type result;\n\nBOOST_MPL_ASSERT_RELATION( size<result>::value, ==, 5 );\nBOOST_MPL_ASSERT(( equal<result,range_c<int,0,5> > ));\n```\n\n----------------------------------------\n\nTITLE: Defining the CMake Project\nDESCRIPTION: This snippet defines the CMake project named `boost_property_map_parallel`. It sets the project version using the `BOOST_SUPERPROJECT_VERSION` variable and specifies CXX as the programming language.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/property_map_parallel/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nproject(boost_property_map_parallel VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Structure Reflection with Boost.PFR in C++\nDESCRIPTION: This C++ example showcases the use of Boost.PFR to access structure elements by index and serialize it with `boost::pfr::io`. The code defines a `some_person` struct and demonstrates accessing its elements using Boost.PFR's `get` function. Dependencies include the Boost.PFR library and the iostream/fstream standard headers. Inputs include optional command-line arguments for file output. Outputs go to the standard console and optionally to a file specified by command-line arguments.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/pfr/README.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n#include <iostream>\\n#include <fstream>\\n#include <string>\\n\\n#include \\\"boost/pfr.hpp\\\"\\n\\nstruct some_person {\\n  std::string name;\\n  unsigned birth_year;\\n};\\n\\nint main(int argc, const char* argv[]) {\\n  some_person val{\\\"Edgar Allan Poe\\\", 1809};\\n\\n  std::cout << boost::pfr::get<0>(val)                // No macro!\\n      << \\\" was born in \\\" << boost::pfr::get<1>(val);  // Works with any aggregate initializables!\\n\\n  if (argc > 1) {\\n    std::ofstream ofs(argv[1]);\\n    ofs << boost::pfr::io(val);                       // File now contains: {\\\"Edgar Allan Poe\\\", 1809}\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost Locale Library with Platform-Specific Settings in CMake\nDESCRIPTION: Sets up platform-specific source files and compile definitions for the Boost Locale library. It handles differences between MSVC, Apple, and other platforms.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(MSVC)\n  list(APPEND BOOST_LOCALE_PLATFORM_DEFINE \"BOOST_LOCALE_NO_POSIX_BACKEND=1\")\n  list(APPEND BOOST_LOCALE_PLATFORM_SRC\n    ${boost_src}/libs/locale/src/win32/collate.cpp\n    ${boost_src}/libs/locale/src/win32/converter.cpp\n    ${boost_src}/libs/locale/src/win32/lcid.cpp\n    ${boost_src}/libs/locale/src/win32/numeric.cpp\n    ${boost_src}/libs/locale/src/win32/win_backend.cpp\n  )\nelseif(APPLE)\n  list(APPEND BOOST_LOCALE_PLATFORM_DEFINE \"BOOST_LOCALE_NO_WINAPI_BACKEND=1\" \"BOOST_LOCALE_WITH_ICU=1\")\n  list(APPEND BOOST_LOCALE_PLATFORM_SRC\n    ${boost_src}/libs/locale/src/posix/codecvt.cpp\n    ${boost_src}/libs/locale/src/posix/collate.cpp\n    ${boost_src}/libs/locale/src/posix/converter.cpp\n    ${boost_src}/libs/locale/src/posix/numeric.cpp\n    ${boost_src}/libs/locale/src/posix/posix_backend.cpp\n  )\nelse()\n  list(APPEND BOOST_LOCALE_PLATFORM_DEFINE \"BOOST_LOCALE_NO_WINAPI_BACKEND=1\" \"BOOST_LOCALE_WITH_ICONV=1\")\n  list(APPEND BOOST_LOCALE_PLATFORM_SRC\n    ${boost_src}/libs/locale/src/posix/codecvt.cpp\n    ${boost_src}/libs/locale/src/posix/collate.cpp\n    ${boost_src}/libs/locale/src/posix/converter.cpp\n    ${boost_src}/libs/locale/src/posix/numeric.cpp\n    ${boost_src}/libs/locale/src/posix/posix_backend.cpp\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Calendar Conversion in C++\nDESCRIPTION: Example of converting dates between different calendar systems (Hebrew and Gregorian) using locale settings.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/doc/dates_times_timezones.txt#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\n    using namespace boost::locale;\n    using namespace boost::locale::period;\n    generator gen;\n    // Create locales with Hebrew and Gregorian (default) calendars.\n    std::locale l_hebrew=gen(\"en_US.UTF-8@calendar=hebrew\");\n    std::locale l_gregorian=gen(\"en_US.UTF-8\");\n    \n    // Create a Gregorian date from fields\n    date_time greg(year(2010) + february() + day(5),l_gregorian);\n    // Assign a time point taken from the Gregorian date to date_time with\n    // the Hebrew calendar\n    date_time heb(greg.time(),l_hebrew);\n    // Now we can query the year.\n    std::cout << \"Hebrew year is \" << heb / year << std::endl;\n```\n\n----------------------------------------\n\nTITLE: Defining Enumeration for Conversion Errors\nDESCRIPTION: This snippet defines an enumeration that describes the various failure situations that may occur during the conversion process, aimed at enriching error handling.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/tutorial/essential/result/_index.md#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nenum ConversionErrc { InvalidInput, Overflow, Underflow };\n```\n\n----------------------------------------\n\nTITLE: Final Optimized Implementation\nDESCRIPTION: Final proposed solution that allows for both simple usage and performance optimization through overloading.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/interoperability-revisited.rst#2025-04-22_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n    class Derived1\n  , class Derived2\n>\nenable_if<is_convertible<Derived2, Derived1>, bool> operator==(\n    Derived1 const& lhs\n  , Derived2 const& rhs\n)\n{\n  return static_cast<Derived1 const&>(lhs).equal_to(static_cast<Derived2 const&(rhs));\n} \n\ntemplate<\n    class Derived1\n  , class Derived2\n>\nenable_if<is_convertible<Derived1, Derived2>, bool> operator==(\n    Derived1 const& lhs\n  , Derived2 const& rhs\n)\n{\n  return static_cast<Derived2 const&>(rhs).equal_to(static_cast<Derived1 const&(lhs));\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Printing ndarrays with Non-Unit Strides in Boost.Numpy\nDESCRIPTION: Demonstrates creating a multi-dimensional ndarray using non-unit strides from 8-bit integer data. The example also covers printing the created arrays and handles the shape and stride configuration.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/doc/html/numpy/_sources/tutorial/ndarray.rst.txt#2025-04-22_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\nuint8_t mul_data[][4] = {{1,2,3,4},{5,6,7,8},{1,3,5,7}};\nshape = p::make_tuple(3,2);\nstride = p::make_tuple(sizeof(uint8_t)*2,sizeof(uint8_t));\n\nnp::dtype dt1 = np::dtype::get_builtin<uint8_t>();\n\nnp::ndarray mul_data_ex = np::from_data(mul_data, dt1,\n                                        p::make_tuple(3,4),\n\t\t\t    p::make_tuple(4,1),\n\t\t\t    p::object());\nstd::cout << \"Original multi dimensional array :: \" << std::endl\n          << p::extract<char const *>(p::str(mul_data_ex)) << std::endl;\n\nmul_data_ex = np::from_data(mul_data, dt1, shape, stride, p::object());\nstd::cout << \"Selective multidimensional array :: \"<<std::endl\n          << p::extract<char const *>(p::str(mul_data_ex)) << std::endl ;\n```\n\n----------------------------------------\n\nTITLE: Linking Dependencies for Arango Metrics\nDESCRIPTION: This snippet links the `arango_metrics` library with its required dependencies. It depends on `arango_metrics_base` and other ArangoDB components like validation, replication, and the RocksDB interface. The `immer` library is also included.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/Metrics/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(arango_metrics\n  arango_metrics_base\n  arango\n  arango::validation\n  arango_replication2\n  immer\n  rocksdb_interface)\n```\n\n----------------------------------------\n\nTITLE: Working with Python Built-in Types from C++\nDESCRIPTION: C++ code demonstrating how to work with Python's built-in types like dict and list using Boost.Python's specialized object interfaces.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/doc/article.rst#2025-04-22_snippet_25\n\nLANGUAGE: C++\nCODE:\n```\ndict d;\nd[\"some\"] = \"thing\";\nd[\"lucky_number\"] = 13;\nlist l = d.keys();\n```\n\n----------------------------------------\n\nTITLE: Function Call Examples with Boost.Parameter in C++\nDESCRIPTION: Shows different ways to call a function created with BOOST_PARAMETER_MEMBER_FUNCTION, including positional arguments, composed arguments, named arguments, and deduced arguments.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_22\n\nLANGUAGE: C++\nCODE:\n```\nB::evaluate(  // positional arguments\n    lvalue_const_bitset<0>()\n  , lvalue_bitset<1>()\n  , rvalue_const_bitset<2>()\n  , rvalue_bitset<3>()\n);\nB::evaluate(  // positional arguments\n    lvalue_const_bitset<0>()\n  , lvalue_bitset<1>()\n);\nB::evaluate((  // composed arguments\n    _rr0 = rvalue_bitset<3>()\n  , _lrc0 = lvalue_const_bitset<0>()\n  , _lr0 = lvalue_bitset<1>()\n  , _rrc0 = rvalue_const_bitset<2>()\n));\nB::evaluate(  // named arguments\n    _rr0 = rvalue_bitset<3>()\n  , _lrc0 = lvalue_const_bitset<0>()\n  , _lr0 = lvalue_bitset<1>()\n  , _rrc0 = rvalue_const_bitset<2>()\n);\nB::evaluate(  // named arguments\n    _lr0 = lvalue_bitset<1>()\n  , _lrc0 = lvalue_const_bitset<0>()\n);\n\nB::evaluate(  // deduced arguments\n    rvalue_bitset<3>()\n  , lvalue_const_bitset<0>()\n  , lvalue_bitset<1>()\n  , rvalue_const_bitset<2>()\n);\nB::evaluate(  // deduced arguments\n    lvalue_bitset<1>()\n  , lvalue_const_bitset<0>()\n);\n```\n\n----------------------------------------\n\nTITLE: Accessing Iterator Functions in multi_iter\nDESCRIPTION: This snippet lists various member functions of the multi_iter class that provide functionality for interacting with the iterator, including methods to retrieve data and shape information of broadcasted arrays.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/doc/numpy/reference/multi_iter.rst#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nvoid next(); \nbool not_done() const; \nchar * get_data(int n) const; \nint const get_nd() const; \nPy_intptr_t const * get_shape() const; \nPy_intptr_t const shape(int n) const;\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Boost.Build\nDESCRIPTION: Commands to run tests using Boost.Build system after copying to the boost source tree.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/src/building.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd test\nb2\n```\n\n----------------------------------------\n\nTITLE: Creating Interface Target for Header-Only Usage\nDESCRIPTION: Creates a date_interface target to allow projects to use just the header-only parts of the Date library without linking to the tz library, providing include paths for both build and install configurations.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/date/CMakeLists.txt#2025-04-22_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(date_interface INTERFACE) # an interface (not a library), to enable automatic include_directory (for when just date.h, but not \"tz.h and its lib\" are needed)\n\n# add include folders to the INTERFACE and targets that consume it\ntarget_include_directories(date_interface INTERFACE\n    $<BUILD_INTERFACE:\n        ${CMAKE_CURRENT_SOURCE_DIR}/${HEADER_FOLDER}\n    >\n    $<INSTALL_INTERFACE:\n        include\n    >\n)\n```\n\n----------------------------------------\n\nTITLE: MainFunctionCombinedTCPUDPServerBoostASIOC++\nDESCRIPTION: In the main() function, initialize both TCP and UDP server objects to handle respective client connections. Coordinate boost::asio::io_context to manage multiple asynchronous tasks for both protocols.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/asio/example/cpp03/tutorial/daytime_dox.txt#2025-04-22_snippet_7\n\nLANGUAGE: C++\nCODE:\n```\nint main() {\n    boost::asio::io_context io_context;\n    tcp_server tcp_server(io_context);\n    udp_server udp_server(io_context);\n    // Manage io_context operations\n    return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost.Locale std::locale Backend\nDESCRIPTION: Sets up the std::locale backend for Boost.Locale if enabled, including additional source files.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/CMakeLists.txt#2025-04-22_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nif(BOOST_LOCALE_ENABLE_STD)\n\n  target_sources(boost_locale PRIVATE\n    src/std/codecvt.cpp\n    src/std/collate.cpp\n    src/std/converter.cpp\n    src/std/numeric.cpp\n    src/std/std_backend.cpp\n  )\n\nelse()\n\n  target_compile_definitions(boost_locale PRIVATE BOOST_LOCALE_NO_STD_BACKEND=1)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Target Sources for arango_replication2 in C++\nDESCRIPTION: This snippet defines the source files that are part of the 'arango_replication2' target in the ArangoDB build system. It includes several implementation files to encapsulate replication feature functionalities.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/Replication2/ReplicatedState/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntarget_sources(arango_replication2 PRIVATE\n  ReplicatedStateFeature.cpp\n  ReplicatedStateMetrics.cpp\n  StateCommon.cpp\n  WaitForQueue.cpp)\n```\n\n----------------------------------------\n\nTITLE: Defining METIS Partition Reader in C++\nDESCRIPTION: Defines the metis_distribution class for loading and handling a METIS partition file. It provides methods to interpret partitioning and determine which part of a graph belongs to which process in a distributed setup.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/metis.rst#2025-04-22_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\nclass metis_distribution\n  {\n   public:  \n    typedef int process_id_type;\n    typedef std::size_t size_type;\n\n    metis_distribution(std::istream& in, process_id_type my_id);\n    \n    size_type block_size(process_id_type id, size_type) const;\n    process_id_type operator()(size_type n);\n    size_type local(size_type n) const;\n    size_type global(size_type n) const;\n    size_type global(process_id_type id, size_type n) const;\n\n   private:\n    std::istream& in;\n    process_id_type my_id;\n    std::vector<process_id_type> vertices;\n  };\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries for Cluster Methods - CMake\nDESCRIPTION: This snippet links the 'arango_cluster_methods' static library with other necessary libraries including 'arango', 'arango_network', and 'zlib_interface'. This ensures that the cluster methods have the required dependencies at link time.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/Cluster/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(arango_cluster_methods\n  arango\n  arango_network\n  zlib_interface)\n```\n\n----------------------------------------\n\nTITLE: Using Flow for Function Composition in C++\nDESCRIPTION: Demonstrates an alternative to pipable operators using the 'flow' function for composing multiple operations.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/src/more_examples.md#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\nauto r = flow(\n    filter([](int x) { return x > 2; }),\n    transform([](int x) { return x * x; })\n)(numbers);\n```\n\n----------------------------------------\n\nTITLE: Creating Flipped Left-Right View using Boost GIL\nDESCRIPTION: This template function generates a view that mirrors the source image view from left to right. It is designed to work seamlessly with any compatible image view provided as input.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/image_view.rst.txt#2025-04-22_snippet_8\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <typename View>\ntypename dynamic_x_step_type<View>::type flipped_left_right_view(const View& src);\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost Log Console Sink\nDESCRIPTION: Defines a console sink with custom format and filtering for messages with severity higher than info or with specific tags.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/log/example/settings_file/settings.txt#2025-04-22_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[Sinks.1]\n\nDestination=Console\nFormat=\"%TimeStamp% [%Severity%] *** %Message%\"\nFilter=\"%Tag% | %Severity% > info\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Platform-Specific Source Files for Boost Thread\nDESCRIPTION: Sets up the source file lists based on the detected threading API. Uses different source files for win32 and pthread implementations.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/thread/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(BOOST_THREAD_THREADAPI STREQUAL win32)\n\n  set(THREAD_SOURCES\n    src/win32/thread.cpp\n    src/win32/tss_dll.cpp\n    src/win32/tss_pe.cpp\n    src/win32/thread_primitives.cpp\n    src/future.cpp\n  )\n\nelse()\n\n  set(THREAD_SOURCES\n    src/pthread/thread.cpp\n    src/pthread/once.cpp\n    src/future.cpp\n  )\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Example Usage of reverse_remove_if in C++\nDESCRIPTION: Provides an example of using reverse_remove_if to filter elements from a vector of integers, removing elements greater than 4 in reverse order.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/reverse_remove_if.rst#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\ntypedef vector_c<int,1,4,5,2,7,5,3,5>::type numbers;\ntypedef reverse_remove_if< numbers, greater<_,int_<4> > >::type result;\n\nBOOST_MPL_ASSERT(( equal< result,vector_c<int,3,2,4,1>,equal_to<_,_> > ));\n```\n\n----------------------------------------\n\nTITLE: Building Boost Locale Library in CMake\nDESCRIPTION: Configures the Boost Locale library as a static library, including all necessary source files, dependencies, and compile definitions. It also handles platform-specific settings.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(boost_locale STATIC\n    ${boost_src}/libs/locale/src/encoding/codepage.cpp\n    ${boost_src}/libs/locale/src/icu/boundary.cpp\n    ${boost_src}/libs/locale/src/icu/codecvt.cpp\n    ${boost_src}/libs/locale/src/icu/collator.cpp\n    ${boost_src}/libs/locale/src/icu/conversion.cpp\n    ${boost_src}/libs/locale/src/icu/date_time.cpp\n    ${boost_src}/libs/locale/src/icu/formatter.cpp\n    ${boost_src}/libs/locale/src/icu/icu_backend.cpp\n    ${boost_src}/libs/locale/src/icu/numeric.cpp\n    ${boost_src}/libs/locale/src/icu/time_zone.cpp\n    ${boost_src}/libs/locale/src/shared/date_time.cpp\n    ${boost_src}/libs/locale/src/shared/format.cpp\n    ${boost_src}/libs/locale/src/shared/formatting.cpp\n    ${boost_src}/libs/locale/src/shared/generator.cpp\n    ${boost_src}/libs/locale/src/shared/ids.cpp\n    ${boost_src}/libs/locale/src/shared/localization_backend.cpp\n    ${boost_src}/libs/locale/src/shared/message.cpp\n    ${boost_src}/libs/locale/src/shared/mo_lambda.cpp\n    ${boost_src}/libs/locale/src/std/codecvt.cpp\n    ${boost_src}/libs/locale/src/std/collate.cpp\n    ${boost_src}/libs/locale/src/std/converter.cpp\n    ${boost_src}/libs/locale/src/std/numeric.cpp\n    ${boost_src}/libs/locale/src/std/std_backend.cpp\n    ${boost_src}/libs/locale/src/util/codecvt_converter.cpp\n    ${boost_src}/libs/locale/src/util/default_locale.cpp\n    ${boost_src}/libs/locale/src/util/gregorian.cpp\n    ${boost_src}/libs/locale/src/util/info.cpp\n    ${boost_src}/libs/locale/src/util/locale_data.cpp\n    ${BOOST_LOCALE_PLATFORM_SRC}\n)\nadd_dependencies(boost_locale v8_build)\ntarget_link_libraries(boost_locale PUBLIC boost_boost)\ntarget_include_directories(boost_locale SYSTEM PRIVATE ${ICU_INCLUDE_DIR})\ntarget_compile_definitions(boost_locale PRIVATE \"BOOST_SYSTEM_STATIC_LINK=1\")\ntarget_compile_definitions(boost_locale PUBLIC  \"BOOST_ALL_NO_LIB=1\")\n\nif(APPLE)\n  target_link_libraries(boost_locale PUBLIC boost_thread)\nendif()\n\nforeach(ELEMENT ${BOOST_LOCALE_PLATFORM_DEFINE})\n  target_compile_definitions(boost_locale PRIVATE \"${ELEMENT}\")\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Static Assertion Example in GIL (C++)\nDESCRIPTION: This code snippet demonstrates the use of `static_assert` to verify a property of a GIL type at compile time.  Specifically, it checks if `rgb8_planar_view_t` is a planar view, ensuring that the condition `is_planar<rgb8_planar_view_t>::value == true` holds during compilation. This helps catch potential errors early in the development process.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/metafunctions.rst#2025-04-22_snippet_10\n\nLANGUAGE: cpp\nCODE:\n```\nstatic_assert(is_planar<rgb8_planar_view_t>::value == true, \"\");\n```\n\n----------------------------------------\n\nTITLE: Defining Implicit Error Type Constructor in C++\nDESCRIPTION: This code snippet provides an implicit constructor for the `error_type` class, which is enabled based on the template predicate. The constructor delegates the construction operation to the `on_outcome_construction` method, ensuring that it conforms to certain conditions like constexpr and noexcept.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/basic_outcome/implicit_error_converting_constructor.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n+++\n\ntitle = \"`basic_outcome(S &&)`\"\ndescription = \"Implicit `error_type` constructor. Available if `predicate::enable_error_converting_constructor<S>` is true. Constexpr, triviality and noexcept propagating.\"\ncategories = [\"constructors\", \"implicit-constructors\", \"converting-constructors\"]\nweight = 190\n+++\n\nImplicit `error_type` constructor. Calls {{% api \"void on_outcome_construction(T *, U &&) noexcept\" %}} with `this` and `S`.\n\n*Requires*: `predicate::enable_error_converting_constructor<S>` is true.\n\n*Complexity*: Same as for `error_type`'s copy or move constructor. Constexpr, triviality and noexcept of underlying operations is propagated.\n```\n\n----------------------------------------\n\nTITLE: Iterator/View Metafunctions from Pixel Type in GIL (C++)\nDESCRIPTION: These template structures define metafunctions to derive iterator and view types from a given pixel type within the Generic Image Library (GIL). The structures allow customization of properties like planarity, step size, and mutability, enabling the creation of iterators and views tailored to specific pixel formats and access patterns.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/metafunctions.rst#2025-04-22_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <typename Pixel, bool IsPlanar=false, bool IsStep=false, bool IsMutable=true>\nstruct iterator_type_from_pixel { typedef ... type; };\n\ntemplate <typename Pixel, bool IsPlanar=false, bool IsStepX=false, bool IsMutable=true>\nstruct view_type_from_pixel { typedef ... type; };\n```\n\n----------------------------------------\n\nTITLE: Defining METIS Reader and Exception Classes in Boost C++\nDESCRIPTION: Defines a namespace and classes related to METIS input handling in Boost Graph Library. The classes include metis_reader for input operations, and exception classes for error handling. The namespace provides a structured way to interact with METIS data formats in graphs.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/metis.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nnamespace boost { \n    namespace graph {\n      class metis_reader;\n      class metis_exception;\n      class metis_input_exception;\n      class metis_distribution;\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Exposing Multiple Constructors with Boost.Python\nDESCRIPTION: Shows how to expose multiple constructors for a C++ class, allowing for constructor overloading in the Python interface.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/doc/article.rst#2025-04-22_snippet_8\n\nLANGUAGE: cpp\nCODE:\n```\nclass_<World>(\"World\", init<std::string>())\n    .def(init<double, double>())\n    ...\n```\n\n----------------------------------------\n\nTITLE: Checking for Boost.Log Compiler and Architecture Features in CMake\nDESCRIPTION: Checks for specific architecture features and compiler capabilities to determine available optimizations for Boost.Log. It specifically tests for x86 architecture support and atomic operations compatibility.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/log/CMakeLists.txt#2025-04-22_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\ngenerate_boost_include_paths(BOOST_LIBRARY_INCLUDES)\n\nset(CMAKE_REQUIRED_INCLUDES ${BOOST_LIBRARY_INCLUDES})\n\ncheck_cxx_source_compiles(\"#include <${CMAKE_CURRENT_SOURCE_DIR}/../config/checks/architecture/x86.cpp>\\nint main() {}\" BOOST_LOG_TARGET_X86)\n\nset(CMAKE_REQUIRED_DEFINITIONS \"-DBOOST_ALL_NO_LIB\")\ncheck_cxx_source_compiles(\"#include <${CMAKE_CURRENT_SOURCE_DIR}/config/atomic-int32/atomic_int32.cpp>\" BOOST_LOG_HAS_LOCK_FREE_ATOMIC_INT32)\nunset(CMAKE_REQUIRED_DEFINITIONS)\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket Server with SSL in CMake\nDESCRIPTION: Conditionally builds a stackless SSL WebSocket server example when OpenSSL is found. The configuration groups source files, defines the executable target with its sources, sets folder properties, and links against required libraries including OpenSSL, Asio, and Beast.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/beast/example/websocket/server/stackless-ssl/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif (OPENSSL_FOUND)\n    GroupSources(include/boost/beast beast)\n    GroupSources(example/common common)\n    GroupSources(example/websocket/server/stackless-ssl \"/\")\n\n    add_executable (websocket-server-stackless-ssl\n        ${BOOST_BEAST_FILES}\n        ${PROJECT_SOURCE_DIR}/example/common/server_certificate.hpp\n        Jamfile\n        websocket_server_stackless_ssl.cpp\n    )\n\n    set_property(TARGET websocket-server-stackless-ssl PROPERTY FOLDER \"example-websocket-server\")\n\n    target_link_libraries (websocket-server-stackless-ssl\n        OpenSSL::SSL OpenSSL::Crypto\n        lib-asio\n        lib-asio-ssl\n        lib-beast\n        )\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Using BOOST_OUTCOME_TRYV2 Macro in C++\nDESCRIPTION: Macro that evaluates an expression and continues execution if successful, or returns try_operation_return_as(X) if unsuccessful. Relies on three customization points: try_operation_has_value(), try_operation_return_as(), and try_operation_extract_value().\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/macros/tryv2.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nBOOST_OUTCOME_TRYV2(spec, expr)\n```\n\n----------------------------------------\n\nTITLE: Testing sizeof_ Metafunction with Various Types in C++\nDESCRIPTION: Example code demonstrating how to use the sizeof_ metafunction with different types and verify the results using the BOOST_MPL_ASSERT_RELATION macro.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/sizeof_.rst#2025-04-22_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\nstruct udt { char a[100]; };\n\nBOOST_MPL_ASSERT_RELATION( sizeof_<char>::value, ==, sizeof(char) );\nBOOST_MPL_ASSERT_RELATION( sizeof_<int>::value, ==, sizeof(int) );\nBOOST_MPL_ASSERT_RELATION( sizeof_<double>::value, ==, sizeof(double) );\nBOOST_MPL_ASSERT_RELATION( sizeof_<udt>::value, ==, sizeof(my) );\n```\n\n----------------------------------------\n\nTITLE: Explicit Converting Move Constructor for basic_outcome\nDESCRIPTION: Implements a type-safe move constructor that allows converting between compatible `basic_result` types with specific conversion constraints. Uses `predicate::enable_make_error_code_compatible_conversion` to validate type compatibility and calls an internal move construction hook.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/basic_outcome/explicit_result_make_error_code_move_converting_constructor.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nexplicit basic_outcome(basic_result<A, B, C> &&)\n```\n\n----------------------------------------\n\nTITLE: Defining fromString function in C++\nDESCRIPTION: This snippet shows the definition of the `fromString` function, crucial for processing string integer representation conversions. The control statement using `BOOST_OUTCOME_TRY` validates successful or failed conversions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/tutorial/essential/result/inspecting.md#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\n\"{{% snippet \\\"using_result.cpp\\\" \\\"from_string\\\" %}}\"\n```\n\n----------------------------------------\n\nTITLE: Defining erase_key Metafunction Template in C++\nDESCRIPTION: This code snippet defines the template structure for the erase_key metafunction. It takes two template parameters: AssocSeq (the associative sequence) and Key (the key to erase). The metafunction returns an unspecified type.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/erase_key.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      typename AssocSeq\n    , typename Key\n    >\nstruct erase_key\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a Function with Deduced Parameters in C++\nDESCRIPTION: Example of using BOOST_PARAMETER_FUNCTION to define a function 'def' with both required and deduced optional parameters. The function mimics Boost.Python's def() function.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/index.rst#2025-04-22_snippet_24\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_PARAMETER_FUNCTION(\n    (bool), def, tag,\n\n    (required (name, (char const*)) (func,*) )  // nondeduced\n\n    (deduced\n        (optional \n            (docstring, (char const*), \"\")\n\n            (keywords\n                // see [#is_keyword_expression]_\n              , *(is_keyword_expression<boost::mpl::_>)\n              , no_keywords()\n            )\n\n            (policies\n              , *(\n                    boost::mpl::eval_if<\n                        boost::is_convertible<boost::mpl::_,char const*>\n                      , boost::mpl::false_\n                      , boost::mpl::if_<\n                            // see [#is_keyword_expression]_\n                            is_keyword_expression<boost::mpl::_>\n                          , boost::mpl::false_\n                          , boost::mpl::true_\n                        >\n                    >\n                )\n              , default_call_policies()\n            )\n        )\n    )\n)\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CMake Minimum Version and Project Metadata\nDESCRIPTION: This snippet specifies the minimum required version of CMake and the metadata for the Boost Detail project, including its versioning information and supported languages. It ensures compatibility with a specific range of CMake versions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/detail/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.20)\n\nproject(boost_detail VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Defining the back_inserter template in C++\nDESCRIPTION: Template definition for back_inserter which creates an inserter that adds elements to the end of a sequence.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/back_inserter.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      typename Seq\n    >\nstruct back_inserter\n{\n    // |unspecified|\n    // |...|\n};\n```\n\n----------------------------------------\n\nTITLE: Using the 'less' Metafunction for Integral Constant Comparison in C++\nDESCRIPTION: Demonstrates how to use the 'less' metafunction to compare integral constants in C++ template metaprogramming.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/less.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_MPL_ASSERT(( less< int_<0>, int_<10> > ));\nBOOST_MPL_ASSERT_NOT(( less< long_<10>, int_<0> > ));\nBOOST_MPL_ASSERT_NOT(( less< long_<10>, int_<10> > ));\n```\n\n----------------------------------------\n\nTITLE: Defining is_exception_ptr_available<T> Trait in C++\nDESCRIPTION: This trait determines if an exception_ptr can be constructed from a type T. It uses ADL to discover a free function make_exception_ptr(T). The trait is part of the BOOST_OUTCOME_V2_NAMESPACE::trait namespace and is defined in the <boost/outcome/trait.hpp> header.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/traits/is_exception_ptr_available.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nis_exception_ptr_available<T>\n```\n\n----------------------------------------\n\nTITLE: Channel Concept Definition\nDESCRIPTION: Defines the ChannelConcept in C++. This concept represents a color component and specifies associated types like value_type, reference, and pointer, as well as static methods for retrieving minimum and maximum values and a boolean indicating mutability. It serves as a base requirement for channel types in the GIL.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/channel.rst#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n  concept ChannelConcept<typename T> : EqualityComparable<T>\n  {\n      typename value_type      = T;        // use channel_traits<T>::value_type to access it\n      where ChannelValueConcept<value_type>;\n      typename reference       = T&;       // use channel_traits<T>::reference to access it\n      typename pointer         = T*;       // use channel_traits<T>::pointer to access it\n      typename const_reference = const T&; // use channel_traits<T>::const_reference to access it\n      typename const_pointer   = const T*; // use channel_traits<T>::const_pointer to access it\n      static const bool is_mutable;        // use channel_traits<T>::is_mutable to access it\n\n      static T min_value();                // use channel_traits<T>::min_value to access it\n      static T max_value();                // use channel_traits<T>::min_value to access it\n  };\n```\n\n----------------------------------------\n\nTITLE: Constructor Usage Examples\nDESCRIPTION: Shows various ways to use the generated constructor including positional arguments, named arguments and deduced arguments.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_42\n\nLANGUAGE: cpp\nCODE:\n```\nchar const* keys[] = {\"foo\", \"bar\", \"baz\"};\nstd_map<char const*, std_string> k2s;\nk2s[keys[0]] = std_string(\"qux\");\nk2s[keys[1]] = std_string(\"wmb\");\nk2s[keys[2]] = std_string(\"zxc\");\n\n// positional arguments\nchar_reader r0(0, keys[0]);\nBOOST_TEST_EQ('q', (r0(true, k2s)));\nBOOST_TEST_EQ('f', (r0(false, k2s)));\n\n// named arguments\nchar_reader r1(_z = keys[1], _y = 1);\nBOOST_TEST_EQ('m', (r1(_z = k2s, _y = true)));\nBOOST_TEST_EQ('a', (r1(_z = k2s, _y = false)));\n\n// deduced arguments\nchar_reader r2(keys[2], 2);\nBOOST_TEST_EQ('c', (r2(k2s, true)));\nBOOST_TEST_EQ('z', (r2(k2s, false)));\n```\n\n----------------------------------------\n\nTITLE: STL-Style X-Gradient Using GIL's transform_pixel_positions Algorithm\nDESCRIPTION: Uses GIL's transform_pixel_positions algorithm to apply a function object to each pixel position. This implementation demonstrates how to abstract the gradient operation into a function object called half_x_difference.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/tutorial/gradient.rst#2025-04-22_snippet_15\n\nLANGUAGE: cpp\nCODE:\n```\nstruct half_x_difference\n{\n  int operator()(const gray8c_loc_t& src_loc) const\n  {\n      return (src_loc.x()[-1] - src_loc.x()[1]) / 2;\n  }\n};\n\nvoid x_gradient_unguarded(gray8c_view_t const& src, gray8s_view_t const& dst)\n{\n  transform_pixel_positions(src, dst, half_x_difference());\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Indirect Adaptor Class Template for General Types in C++\nDESCRIPTION: Defines the indirect_adaptor template class for general types that inherits from its template parameter F. It dereferences the underlying object before calling it with provided arguments. Includes SFINAE result type deduction to handle various return types.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/indirect.hpp.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<class F>\nstruct indirect_adaptor : F\n{\n    typedef indirect_adaptor fit_rewritable1_tag;\n    BOOST_HOF_INHERIT_CONSTRUCTOR(indirect_adaptor, F);\n\n    template<class... Ts>\n    constexpr const F& base_function(Ts&&... xs) const noexcept\n    {\n        return boost::hof::always_ref(*this)(xs...);\n    }\n\n    struct failure\n    : failure_for<decltype(*std::declval<F>())>\n    {};\n\n    BOOST_HOF_RETURNS_CLASS(indirect_adaptor);\n\n    template<class... Ts>\n    constexpr BOOST_HOF_SFINAE_RESULT(decltype(*std::declval<F>()), id_<Ts>...) \n    operator()(Ts&&... xs) const BOOST_HOF_SFINAE_RETURNS\n    (\n        (*BOOST_HOF_MANGLE_CAST(const F&)(BOOST_HOF_CONST_THIS->base_function(xs...)))(BOOST_HOF_FORWARD(Ts)(xs)...)\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Conditional Benchmarking with Threading Support\nDESCRIPTION: This part of the CMake file checks for threading support through the Threads package and conditionally adds a benchmark for histogram data processing with parallel filling if the necessary Threads package is found.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/histogram/benchmark/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(Threads)\nif (Threads_FOUND)\n  add_benchmark(histogram_parallel_filling)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining the 'order' Metafunction Template in C++\nDESCRIPTION: This code snippet defines the template for the 'order' metafunction. It takes two template parameters: Sequence and Key. The metafunction returns an unspecified type.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/order.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      typename Sequence\n    , typename Key\n    >\nstruct order\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Exposing C++ Class with Constructor Arguments\nDESCRIPTION: Demonstrates how to expose a C++ class with a constructor that takes arguments. The init<> template is used to specify constructor parameter types.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/doc/article.rst#2025-04-22_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\nclass_<World>(\"World\", init<std::string>())\n    ...\n```\n\n----------------------------------------\n\nTITLE: Checking for Consistency After Swap in C++\nDESCRIPTION: The function 'has_lost_consistency' checks whether a prior swap operation maintained the strong guarantee of consistency. It is marked as constexpr and noexcept, ensuring that it does not throw exceptions and can be evaluated at compile-time when possible. The function has a constant time complexity and requires no additional dependencies.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/basic_result/has_lost_consistency.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nbool has_lost_consistency() const noexcept\n```\n\n----------------------------------------\n\nTITLE: Setting Installation Directories\nDESCRIPTION: Sets the installation directories for include files, documentation, and CMake configuration files. These variables are cached to allow users to easily modify them.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/taocpp-json/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset (TAOCPP_JSON_INSTALL_INCLUDE_DIR \"include\" CACHE STRING \"The installation include directory\")\nset (TAOCPP_JSON_INSTALL_DOC_DIR \"share/doc/tao/json\" CACHE STRING \"The installation doc directory\")\nset (TAOCPP_JSON_INSTALL_CMAKE_DIR \"share/taocpp-json/cmake\" CACHE STRING \"The installation cmake directory\")\n```\n\n----------------------------------------\n\nTITLE: Helper Function for Creating Permutation Iterator in C++\nDESCRIPTION: Template function make_permutation_iterator that constructs a permutation iterator from element and index iterators.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/permutation_iterator_ref.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <class ElementIterator, class IndexIterator>\npermutation_iterator<ElementIterator, IndexIterator> \nmake_permutation_iterator( ElementIterator e, IndexIterator i);\n```\n\n----------------------------------------\n\nTITLE: Defining Sorted R-MAT Iterator Constructor in C++\nDESCRIPTION: This C++ code defines a constructor for the `sorted_rmat_iterator` class. The constructor initializes the R-MAT graph generator with parameters for the number of vertices (`n`), edges (`m`), probabilities for quadrant selection (`a`, `b`, `c`, `d`), vertex permutation (`permute_vertices`), and an edge predicate (`ep`).  It uses a random number generator (`gen`) to draw probabilities.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/sorted_rmat_generator.rst#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\n  sorted_rmat_iterator(RandomGenerator& gen, vertices_size_type n, \n                       edges_size_type m, double a, double b, double c, \n                       double d, bool permute_vertices = true,\n                       EdgePredicate ep = keep_all_edges());\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost::any CMake Build\nDESCRIPTION: Sets up CMake configuration for the Boost::any library. Defines minimum CMake version, creates an interface library, and configures dependencies to other Boost components. Includes version requirements, project setup, and library linkage specifications.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/any/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required( VERSION 3.5...3.20 )\nproject( boost_any VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX )\n\nadd_library( boost_any INTERFACE )\nadd_library( Boost::any ALIAS boost_any )\n\ntarget_include_directories( boost_any INTERFACE include )\n\ntarget_link_libraries( boost_any\n    INTERFACE\n        Boost::config\n        Boost::core\n        Boost::static_assert\n        Boost::throw_exception\n        Boost::type_index\n        Boost::type_traits\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing the 'always' Function Base Template in C++\nDESCRIPTION: Defines the primary template for the 'always' function implementation. This template creates a function object that will always return the stored value regardless of parameters passed to it. It handles copying of the stored value and manages noexcept specifiers appropriately.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/always.hpp.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<class T, class=void>\nstruct always_base\n{\n    T x;\n\n    BOOST_HOF_DELEGATE_CONSTRUCTOR(always_base, T, x)\n\n    typedef typename detail::unwrap_reference<T>::type result_type;\n\n    template<class... As>\n    constexpr result_type\n    operator()(As&&...) const\n    noexcept(std::is_reference<result_type>::value || BOOST_HOF_IS_NOTHROW_COPY_CONSTRUCTIBLE(result_type))\n    {\n        return this->x;\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Enumeration Classes in C++\nDESCRIPTION: Examples of proper and improper enum class naming conventions. Enumerators should use kEnumName style constants rather than MACRO_STYLE naming.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/STYLEGUIDE.md#2025-04-22_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\nenum class UrlTableError {\n  kOk = 0,\n  kOutOfMemory,\n  kMalformedInput,\n};\n```\n\nLANGUAGE: cpp\nCODE:\n```\n// BAD practice\nenum class AlternateUrlTableError {\n  OK = 0,\n  OUT_OF_MEMORY = 1,\n  MALFORMED_INPUT = 2,\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Output Without Translation in C++\nDESCRIPTION: Example showing basic console output without translation functionality.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/doc/messages_formatting.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ncout << \"Hello World\" << endl;\n```\n\n----------------------------------------\n\nTITLE: Declaring reverse_remove_if Template in C++\nDESCRIPTION: Defines the template structure for the reverse_remove_if algorithm. It takes a Sequence, a Predicate, and an optional Inserter as template parameters.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/reverse_remove_if.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      typename Sequence\n    , typename Pred\n    , typename In = |unspecified|\n    >\nstruct reverse_remove_if\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Transform Iterator with Custom Function in C++\nDESCRIPTION: This function creates a transform_iterator with a custom unary function and an iterator. It initializes the m_f member with the provided function and m_iterator with the given iterator.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/make_transform_iterator.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <class UnaryFunction, class Iterator>\ntransform_iterator<UnaryFunction, Iterator>\nmake_transform_iterator(Iterator it, UnaryFunction fun);\n```\n\n----------------------------------------\n\nTITLE: Alternative Result Type Aliases\nDESCRIPTION: Shows predefined result type aliases with different no-value policies for error handling and value access\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/tutorial/essential/no-value/_index.md#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\n// Unchecked result: undefined behavior on missing value\nunchecked<T, E> = basic_result<T, E, all_narrow>\n\n// Checked result: throws exception on missing value\nchecked<T, E> = basic_result<T, E, throw_bad_result_access<EC>>\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost Wave Library Properties in CMake\nDESCRIPTION: Sets up include directories, links dependencies, and defines compile definitions for the Boost Wave library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/wave/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(boost_wave PUBLIC include)\n\ntarget_link_libraries(boost_wave\n  PUBLIC\n    Boost::assert\n    Boost::concept_check\n    Boost::config\n    Boost::core\n    Boost::filesystem\n    Boost::iterator\n    Boost::lexical_cast\n    Boost::mpl\n    Boost::multi_index\n    Boost::optional\n    Boost::pool\n    Boost::preprocessor\n    Boost::serialization\n    Boost::smart_ptr\n    Boost::spirit\n    Boost::static_assert\n    Boost::throw_exception\n    Boost::type_traits\n)\n\ntarget_compile_definitions(boost_wave\n  PUBLIC BOOST_WAVE_NO_LIB\n  PRIVATE BOOST_WAVE_SOURCE\n)\n\nif(BUILD_SHARED_LIBS)\n  target_compile_definitions(boost_wave PUBLIC BOOST_WAVE_DYN_LINK)\nelse()\n  target_compile_definitions(boost_wave PUBLIC BOOST_WAVE_STATIC_LINK)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Checking System Endianness and Including Required Headers\nDESCRIPTION: Determines the system's endianness and checks for the presence of various system headers.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/snappy/snappy-1.1.9/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(TestBigEndian)\ntest_big_endian(SNAPPY_IS_BIG_ENDIAN)\n\ninclude(CheckIncludeFile)\ncheck_include_file(\"sys/mman.h\" HAVE_SYS_MMAN_H)\ncheck_include_file(\"sys/resource.h\" HAVE_SYS_RESOURCE_H)\ncheck_include_file(\"sys/time.h\" HAVE_SYS_TIME_H)\ncheck_include_file(\"sys/uio.h\" HAVE_SYS_UIO_H)\ncheck_include_file(\"unistd.h\" HAVE_UNISTD_H)\ncheck_include_file(\"windows.h\" HAVE_WINDOWS_H)\n```\n\n----------------------------------------\n\nTITLE: Implementing Subtraction Operator for Random Access Traversal Iterator in C++\nDESCRIPTION: Implementation of the - operator for Random Access Traversal Iterators that returns a new iterator moved backward by n positions, using the -= operator internally.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/new-iter-concepts.rst#2025-04-22_snippet_10\n\nLANGUAGE: cpp\nCODE:\n```\n{ X tmp = a; return tmp -= n; }\n```\n\n----------------------------------------\n\nTITLE: Lazy Default Computation using boost::bind with Boost.Parameter\nDESCRIPTION: This snippet demonstrates lazy default computation using `boost::bind` in conjunction with Boost.Parameter. By using `boost::bind`, the default value (concatenation of s1 and s2) is only computed if the s3 parameter is not provided, avoiding unnecessary computation. This code builds on the prior eager evaluation example.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/index.rst#2025-04-22_snippet_42\n\nLANGUAGE: cpp\nCODE:\n```\n    typename parameter::binding<\n        ArgumentPack,tag::s3,std::string\n    >::type s3 = args[\n        _s3 **|| boost::bind(\n            std::plus<std::string>(), boost::ref(s1), boost::ref(s2)\n        )**\n    ];\n```\n\nLANGUAGE: cpp\nCODE:\n```\n    #include <boost/bind.hpp>\n    #include <boost/ref.hpp>\n    #include <boost/parameter.hpp>\n    #include <string>\n    #include <functional>\n\n    namespace parameter = boost::parameter;\n\n    BOOST_PARAMETER_NAME(s1)\n    BOOST_PARAMETER_NAME(s2)\n    BOOST_PARAMETER_NAME(s3)\n\n    template <typename ArgumentPack>\n    std::string f(ArgumentPack const& args)\n    {\n        std::string const& s1 = args[_s1];\n        std::string const& s2 = args[_s2];\n    \n```\n\nLANGUAGE: cpp\nCODE:\n```\n        return s3;\n    }\n\n    std::string x = f((_s1=\"hello,\", _s2=\" world\", _s3=\"hi world\"));\n\n    int main()\n    {\n        return 0;\n    }\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Python Module Built with Boost.Python\nDESCRIPTION: A simple Python example showing how to import and use a module built with Boost.Python. The example demonstrates calling a greeting function with different arguments.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/doc/article.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> import hello\n>>> for x in range(3):\n...     print hello.greet(x)\n...\nhello\nBoost.Python\nworld!\n```\n\n----------------------------------------\n\nTITLE: Creating Function Objects with Operator Overloading in C++\nDESCRIPTION: Demonstrates how to define a function object by creating a class that overrides the call operator. This approach encapsulates an entire overload set into one object and supports template parameters.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/doc/src/gettingstarted.md.txt#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\n// A sum function object\nstruct sum_f\n{\n    template<class T, class U>\n    auto operator()(T x, U y) const\n    {\n        return x + y;\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Boost.Python NumPy Dtype Class in C++\nDESCRIPTION: Defines the `dtype` class in the `boost::python::numpy` namespace, which provides functionality for converting C++ types to NumPy dtype objects. It includes methods to retrieve size and obtain built-in NumPy types for C++ scalar types.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/doc/html/numpy/_sources/reference/dtype.rst.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n::\n\n  namespace boost \n  {\n  namespace python\n  {\n  namespace numpy \n  {\n\n  class dtype : public object \n  {\n    static python::detail::new_reference convert(object::object_cref arg, bool align);\n  public:\n\n    // Convert an arbitrary Python object to a data-type descriptor object.\n    template <typename T>\n    explicit dtype(T arg, bool align=false);\n\n    // Get the built-in numpy dtype associated with the given scalar template type.\n    template <typename T> static dtype get_builtin();\n\n    // Return the size of the data type in bytes.\n    int get_itemsize() const;\n  };\n\n  } \n  } \n  }\n```\n\n----------------------------------------\n\nTITLE: Defining key_type Metafunction in C++\nDESCRIPTION: This code snippet defines the key_type metafunction template. It takes two template parameters: Sequence and X. The metafunction returns an unspecified type that represents the key used to identify X in Sequence.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/key_type.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      typename Sequence\n    , typename X\n    >\nstruct key_type\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Additional Interoperable Random Access Traversal Iterator Requirements in C++\nDESCRIPTION: Specifies additional expressions, return types, and semantics required for two iterator types X and Y to be considered interoperable random access traversal iterators. Includes comparison operations and distance calculations.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/InteroperableIterator.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nx < y     // Return Type: convertible to bool, Semantics: y - x > 0\ny < x     // Return Type: convertible to bool, Semantics: x - y > 0\nx > y     // Return Type: convertible to bool, Semantics: y < x\ny > x     // Return Type: convertible to bool, Semantics: x < y\nx >= y    // Return Type: convertible to bool, Semantics: !(x < y)\ny >= x    // Return Type: convertible to bool, Semantics: !(y < x)\nx <= y    // Return Type: convertible to bool, Semantics: !(x > y)\ny <= x    // Return Type: convertible to bool, Semantics: !(y > x)\ny - x     // Return Type: Distance, Semantics: distance(Y(x),y)\nx - y     // Return Type: Distance, Semantics: distance(y,Y(x))\n```\n\n----------------------------------------\n\nTITLE: Defining and Using the always_true Metafunction in C++\nDESCRIPTION: This example demonstrates how to define an 'always_true' metafunction using the 'always' template, and then applies it with different arguments to show that it always returns true.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/always.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntypedef always<true_> always_true;\n\nBOOST_MPL_ASSERT(( apply< always_true,false_> ));\nBOOST_MPL_ASSERT(( apply< always_true,false_,false_ > ));\nBOOST_MPL_ASSERT(( apply< always_true,false_,false_,false_ > ));\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket Server Fast Executable in CMake\nDESCRIPTION: This CMake script configures the build for a 'fast' WebSocket server example. It groups source files, defines the executable target with necessary source files, links required libraries (asio and beast), and sets the target folder property for organization.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/beast/example/websocket/server/fast/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nGroupSources(include/boost/beast beast)\nGroupSources(example/websocket/server/fast \"/\")\n\nadd_executable (websocket-server-fast\n    ${BOOST_BEAST_FILES}\n    Jamfile\n    websocket_server_fast.cpp\n)\n\ntarget_link_libraries(websocket-server-fast\n    lib-asio\n    lib-beast)\n\nset_property(TARGET websocket-server-fast PROPERTY FOLDER \"example-websocket-server\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Constrained Templates in C++ with Boost.Outcome Macros\nDESCRIPTION: This code snippet demonstrates the usage of Boost.Outcome macros to create a constrained template constructor. It shows how to specify template arguments, requirements, expressions, and predicates for conditional template instantiation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/macros/template.md#2025-04-22_snippet_0\n\nLANGUAGE: c++\nCODE:\n```\nBOOST_OUTCOME_TEMPLATE(class ErrorCondEnum)\n  BOOST_OUTCOME_TREQUIRES(\n    // If this is a valid expression\n    BOOST_OUTCOME_TEXPR(error_type(make_error_code(ErrorCondEnum()))),\n    // If this predicate is true\n    BOOST_OUTCOME_TPRED(predicate::template enable_error_condition_converting_constructor<ErrorCondEnum>)\n    // Any additional requirements follow here ...\n  )\n  constexpr basic_result(ErrorCondEnum &&t, error_condition_converting_constructor_tag /*unused*/ = {});\n```\n\n----------------------------------------\n\nTITLE: Including less_equal Metafunction Headers in C++\nDESCRIPTION: This snippet shows the headers required to use the less_equal metafunction. It includes both the specific less_equal header and the general comparison header.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/less_equal.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/less_equal.hpp>\n#include <boost/mpl/comparison.hpp>\n```\n\n----------------------------------------\n\nTITLE: Initializing and Permuting a Range using Boost Permutation Iterator in C++\nDESCRIPTION: This snippet demonstrates how to create a range of elements, define an index for permutation, and use Boost's permutation_iterator to create a permuted view of the range. It also shows various operations on the permuted range, such as forward and backward iteration with different strides.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/permutation_iterator_eg.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nusing namespace boost;\nint i = 0;\n\ntypedef std::vector< int > element_range_type;\ntypedef std::list< int > index_type;\n\nstatic const int element_range_size = 10;\nstatic const int index_size = 4;\n\nelement_range_type elements( element_range_size );\nfor(element_range_type::iterator el_it = elements.begin() ; el_it != elements.end() ; ++el_it)\n  *el_it = std::distance(elements.begin(), el_it);\n\nindex_type indices( index_size );\nfor(index_type::iterator i_it = indices.begin() ; i_it != indices.end() ; ++i_it ) \n  *i_it = element_range_size - index_size + std::distance(indices.begin(), i_it);\nstd::reverse( indices.begin(), indices.end() );\n\ntypedef permutation_iterator< element_range_type::iterator, index_type::iterator > permutation_type;\npermutation_type begin = make_permutation_iterator( elements.begin(), indices.begin() );\npermutation_type it = begin;\npermutation_type end = make_permutation_iterator( elements.begin(), indices.end() );\n\nstd::cout << \"The original range is : \";\nstd::copy( elements.begin(), elements.end(), std::ostream_iterator< int >( std::cout, \" \" ) );\nstd::cout << \"\\n\";\n\nstd::cout << \"The reindexing scheme is : \";\nstd::copy( indices.begin(), indices.end(), std::ostream_iterator< int >( std::cout, \" \" ) );\nstd::cout << \"\\n\";\n\nstd::cout << \"The permutated range is : \";\nstd::copy( begin, end, std::ostream_iterator< int >( std::cout, \" \" ) );\nstd::cout << \"\\n\";\n\nstd::cout << \"Elements at even indices in the permutation : \";\nit = begin;\nfor(i = 0; i < index_size / 2 ; ++i, it+=2 ) std::cout << *it << \" \";\nstd::cout << \"\\n\";\n\nstd::cout << \"Permutation backwards : \";\nit = begin + (index_size);\nassert( it != begin );\nfor( ; it-- != begin ; ) std::cout << *it << \" \";\nstd::cout << \"\\n\";\n\nstd::cout << \"Iterate backward with stride 2 : \";\nit = begin + (index_size - 1);\nfor(i = 0 ; i < index_size / 2 ; ++i, it-=2 ) std::cout << *it << \" \";\nstd::cout << \"\\n\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost Contract Library Build\nDESCRIPTION: Configures the build system for the Boost Contract library, setting up the library target, dependencies, include directories, and compilation definitions. Handles both shared and static library builds and includes test configuration.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/contract/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.16)\n\nproject(boost_contract VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n\nadd_library(boost_contract\n  src/contract.cpp\n)\n\nadd_library(Boost::contract ALIAS boost_contract)\n\ntarget_include_directories(boost_contract PUBLIC include)\n\ntarget_link_libraries(boost_contract\n  PUBLIC\n    Boost::any\n    Boost::assert\n    Boost::config\n    Boost::core\n    Boost::exception\n    Boost::function\n    Boost::function_types\n    Boost::mpl\n    Boost::optional\n    Boost::preprocessor\n    Boost::smart_ptr\n    Boost::static_assert\n    Boost::thread\n    Boost::type_traits\n    Boost::typeof\n    Boost::utility\n)\n\ntarget_compile_definitions(boost_contract\n  PUBLIC BOOST_CONTRACT_NO_LIB\n)\n\nif(BUILD_SHARED_LIBS)\n  target_compile_definitions(boost_contract PUBLIC BOOST_CONTRACT_DYN_LINK)\nelse()\n  target_compile_definitions(boost_contract PUBLIC BOOST_CONTRACT_STATIC_LINK)\nendif()\n\nif(BUILD_TESTING AND EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/test/CMakeLists.txt\")\n  add_subdirectory(test)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Template Function with Named Parameters in C++\nDESCRIPTION: A template function that implements named parameter forwarding pattern. It demonstrates parameter forwarding using the Boost Parameter library's pattern matching and std::forward mechanism.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_95\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <typename A1, typename A2, …, typename A ## **h**>\nr\n    name(\n        A1 && a1, A2 && a2, …, A ## **h** && x ## **h**\n      , typename **p**::match<A1, A2, …, A ## **h**>::type p = **p**\\()\n    )\n{\n    return **name**\\_with_named_params(\n        **p**\\(\n            |std_forward|_\\<A1>(a1)\n          , |std_forward|_\\<A2>(a2)\n          , …\n          , |std_forward|_\\<A ## **h**>(a ## **h**)\n        )\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost Tokenizer Library in CMake\nDESCRIPTION: Defines the Boost Tokenizer library as an interface library with its dependencies and include directories. Sets up the project with version information and configures optional test inclusion.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/tokenizer/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.16)\n\nproject(boost_tokenizer VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n\nadd_library(boost_tokenizer INTERFACE)\nadd_library(Boost::tokenizer ALIAS boost_tokenizer)\n\ntarget_include_directories(boost_tokenizer INTERFACE include)\n\ntarget_link_libraries(boost_tokenizer\n  INTERFACE\n    Boost::assert\n    Boost::config\n    Boost::iterator\n    Boost::mpl\n    Boost::throw_exception\n    Boost::type_traits\n)\n\nif(BUILD_TESTING AND EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/test/CMakeLists.txt\")\n\n  add_subdirectory(test)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Piped View Transformations for Gradient Computation in C++ using GIL\nDESCRIPTION: Illustrate compound view transformations by combining 'nth_channel_view' and 'subsampled_view' for efficient channel-based and subsampling operations, showcasing GIL's ability to optimize compounded view transformations.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/tutorial/gradient.rst#2025-04-22_snippet_12\n\nLANGUAGE: cpp\nCODE:\n```\ny_gradient(subsampled_view(nth_channel_view(src, 1), 2,2), dst);\n```\n\n----------------------------------------\n\nTITLE: Creating Boost Log Setup Alias and Installing Targets in CMake\nDESCRIPTION: Creates an alias for the boost_log_setup library and configures installation rules when building as part of the Boost superproject. This allows users to refer to the library as Boost::log_setup.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/log/CMakeLists.txt#2025-04-22_snippet_20\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(Boost::log_setup ALIAS boost_log_setup)\n\nif (BOOST_SUPERPROJECT_VERSION AND NOT CMAKE_VERSION VERSION_LESS 3.13)\n    boost_install(TARGETS ${boost_log_install_targets} VERSION \"${BOOST_SUPERPROJECT_VERSION}\" HEADER_DIRECTORY include)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Implementing Thread-Local Ring Buffer for Error Info in C++\nDESCRIPTION: Creates a thread-local ring buffer implementation for storing extended error information without dynamic memory allocation. Uses a 16-item buffer with a wrapping 16-bit index to detect recycled storage access.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/tutorial/advanced/hooks/keeping_state.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nstruct error_code_extended\n{\n  uint16_t _idx{0};\n  struct item_t\n  {\n    uint16_t idx;\n    uint16_t line;\n    const char *file;\n    // other fields as needed\n  };\n  thread_local static std::array<item_t, 16> _items;\n\n  void store_error_info(const char *file, uint16_t line)\n  {\n    auto &item = _items[_idx % 16];\n    item.idx = _idx++;\n    item.line = line;\n    item.file = file;\n  }\n\n  bool get_error_info(uint16_t idx, const char *&file, uint16_t &line) const noexcept\n  {\n    const auto &item = _items[idx % 16];\n    if(item.idx != idx)\n      return false;\n    file = item.file;\n    line = item.line;\n    return true;\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Dynamic Image Type Usage in C++\nDESCRIPTION: The `dynamic_image.cpp` example showcases how to employ dynamic image types, being instantiated at runtime rather than compile-time. This flexibility is enabled through Boost GIL's dynamic capabilities, allowing greater adaptability in image processing tasks. Inputs are runtime-defined image configurations, and outputs include images processed using these types.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/example/README.md#2025-04-22_snippet_8\n\nLANGUAGE: C++\nCODE:\n```\n\"int main() {\\n  // Your code here\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Using BOOST_PARAMETER_BASIC_CONST_MEMBER_FUNCTION in C++\nDESCRIPTION: Demonstrates the use of BOOST_PARAMETER_BASIC_CONST_MEMBER_FUNCTION macro to define a member function 'evaluate' with named and optional parameters. The function body tests the value categories of passed arguments.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_57\n\nLANGUAGE: C++\nCODE:\n```\nstruct B\n{\n    B()\n    {\n    }\n\n    BOOST_PARAMETER_BASIC_CONST_MEMBER_FUNCTION((bool), evaluate, kw,\n        (deduced\n            (required\n                (lrc, (std::bitset<1>))\n                (lr, (std::bitset<2>))\n            )\n            (optional\n                (rrc, (std::bitset<3>))\n                (rr, (std::bitset<4>))\n            )\n        )\n    )\n    {\n        BOOST_TEST_EQ(\n            passed_by_lvalue_reference_to_const,\n            U::evaluate_category<0>(args[_lrc])\n        );\n        BOOST_TEST_EQ(\n            passed_by_lvalue_reference,\n            U::evaluate_category<1>(args[_lr])\n        );\n        BOOST_TEST_EQ(\n            passed_by_rvalue_reference_to_const,\n            U::evaluate_category<2>(\n                args[_rrc | rvalue_const_bitset<2>()]\n            )\n        );\n        BOOST_TEST_EQ(\n            passed_by_rvalue_reference,\n            U::evaluate_category<3>(\n                args[_rr | rvalue_bitset<3>()]\n            )\n        );\n\n        return true;\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring FAISS Build Options in CMake\nDESCRIPTION: This code configures linker flags for FAISS, preserves the original linker flags, adds FAISS-specific flags, and then configures FAISS build options to disable GPU optimizations, Python bindings, and RAFT before adding the FAISS subdirectory.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/CMakeLists.txt#2025-04-22_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\n# It could be so easy if add_subdirectory allowed to pass variables\n# Instead be need to save the original, modify, add, and restore\n# thew flags.\nset(CMAKE_EXE_LINKER_FLAGS_ORIG \"${CMAKE_EXE_LINKER_FLAGS}\")\nset(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} ${FAISS_EXE_LINKER_FLAGS}\")\n\nset(FAISS_ENABLE_GPU OFF CACHE BOOL \"Disable GPU optimizations\")\nset(FAISS_ENABLE_PYTHON OFF CACHE BOOL \"Disable Python bindings\")\nset(FAISS_ENABLE_RAFT OFF CACHE BOOL \"Disable RAFT\")\n\nadd_subdirectory(3rdParty/faiss EXCLUDE_FROM_ALL)\n\nset(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS_ORIG}\")\n```\n\n----------------------------------------\n\nTITLE: Using BOOST_OUTCOME_CO_TRYX_FAILURE_LIKELY in C++ Coroutines\nDESCRIPTION: This macro evaluates an expression within a coroutine, emitting the result if successful or returning a failure value if unsuccessful. It uses customization points for try_operation_has_value, try_operation_return_as, and try_operation_extract_value. The macro is optimized for cases where failure is more likely.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/macros/co_tryx_failure_likely.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_OUTCOME_CO_TRYX_FAILURE_LIKELY(expr)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Linking V8 Libraries in CMake\nDESCRIPTION: Conditionally links the V8 JavaScript engine server library if V8 support is enabled in the build configuration.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/CMakeLists.txt#2025-04-22_snippet_21\n\nLANGUAGE: CMake\nCODE:\n```\nif (USE_V8)\n  target_link_libraries(arangodbtests arango_v8server)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring External C++ Project with CMake and Hana\nDESCRIPTION: Sets up a CMake project with minimum version 3.0, declares an external project in C++, finds the Hana library, creates an executable, and links Hana library\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hana/example/cmake_integration/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.0)\nproject(external CXX)\n\nfind_package(Hana REQUIRED)\nadd_executable(external main.cpp)\ntarget_link_libraries(external hana)\n```\n\n----------------------------------------\n\nTITLE: Operating System Detection in CMake\nDESCRIPTION: CMake configuration block for detecting various operating systems and setting corresponding variables.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(CMAKE_SYSTEM_NAME MATCHES \".*Linux\")\n  set(LINUX TRUE)\nelseif(CMAKE_SYSTEM_NAME MATCHES \"kFreeBSD.*\")\n  set(FREEBSD TRUE)\nelseif(CMAKE_SYSTEM_NAME MATCHES \"kNetBSD.*|NetBSD.*\")\n  set(NETBSD TRUE)\nelseif(CMAKE_SYSTEM_NAME MATCHES \"kOpenBSD.*|OpenBSD.*\")\n  set(OPENBSD TRUE)\nelseif(CMAKE_SYSTEM_NAME MATCHES \".*GNU.*\")\n  set(GNU TRUE)\nelseif(CMAKE_SYSTEM_NAME MATCHES \".*BSDI.*\")\n  set(BSDI TRUE)\nelseif(CMAKE_SYSTEM_NAME MATCHES \"DragonFly.*|FreeBSD\")\n  set(FREEBSD TRUE)\nelseif(CMAKE_SYSTEM_NAME MATCHES \"SYSV5.*\")\n  set(SYSV5 TRUE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Implementing Assignment Operator Overloads in Boost Parameter Library C++\nDESCRIPTION: Defines multiple overloads of the assignment operator for the keyword template, handling various reference qualifiers. These methods create ArgumentPack objects containing tagged references with specific requirements based on Tag qualifiers.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <typename T>\nconstexpr |ArgumentPack|_ operator=(T const& value) const;\n\ntemplate <typename T>\nconstexpr |ArgumentPack|_ operator=(T& value) const;\n\ntemplate <typename T>\nconstexpr |ArgumentPack|_ operator=(T const&& value) const;\n\ntemplate <typename T>\nconstexpr |ArgumentPack|_ operator=(T&& value) const;\n```\n\n----------------------------------------\n\nTITLE: Move Constructor Declaration for basic_result\nDESCRIPTION: Move constructor implementation that transfers ownership of both value_type and error_type members. The constructor is constexpr-capable and propagates the noexcept and triviality properties of the underlying types' move constructors.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/basic_result/move_constructor.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nbasic_result(basic_result &&)\n```\n\n----------------------------------------\n\nTITLE: Third-Party Library Configuration\nDESCRIPTION: Sets up third-party library dependencies including Boost and ZLIB, configuring version definitions and linker settings.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/CMakeLists.txt#2025-04-22_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DBOOST_UUID_RANDOM_PROVIDER_FORCE_POSIX=1)\nadd_definitions(-DBOOST_ALL_NO_LIB=1)\nadd_subdirectory(3rdParty EXCLUDE_FROM_ALL)\n\nadd_definitions(\"-DARANGODB_BOOST_VERSION=\\\"${BOOST_VERSION}\\\"\")\nadd_definitions(\"-DARANGODB_ZLIB_VERSION=\\\"${ZLIB_VERSION}\\\"\")\nlink_directories(\"${PROJECT_BINARY_DIR}/bin\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Stringify with Boost.HigherOrderFunctions\nDESCRIPTION: Simplified implementation of stringify function using Boost.HigherOrderFunctions first_of to select between std::to_string and stringstream approaches.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/src/example_overloading.md#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nBOOST_HOF_STATIC_LAMBDA_FUNCTION(stringify) = first_of(\n    [](auto x) BOOST_HOF_RETURNS(std::to_string(x)),\n    [](auto x) BOOST_HOF_RETURNS(static_cast<std::ostringstream&>(std::ostringstream() << x).str())\n);\n```\n\n----------------------------------------\n\nTITLE: Lazy Default Computation with Boost.Parameter\nDESCRIPTION: This code demonstrates the issue of eagerly constructing default values in Boost.Parameter and provides context for the subsequent example using lazy evaluation. It shows how `parameter::binding` and `operator|` can lead to unnecessary construction of default values, even when the parameter is explicitly provided by the user.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/index.rst#2025-04-22_snippet_41\n\nLANGUAGE: cpp\nCODE:\n```\n    BOOST_PARAMETER_NAME(s1)\n    BOOST_PARAMETER_NAME(s2)\n    BOOST_PARAMETER_NAME(s3)\n\n    template <typename ArgumentPack>\n    std::string f(ArgumentPack const& args)\n    {\n        std::string const& s1 = args[_s1];\n        std::string const& s2 = args[_s2];\n        typename parameter::binding<\n            ArgumentPack,tag::s3,std::string\n        >::type s3 = args[_s3 | (s1 + s2)];  // always constructs s1 + s2\n        return s3;\n    }\n\n    std::string x = f((\n        _s1=\"hello,\", _s2=\" world\", _s3=\"hi world\"\n    ));\n```\n\nLANGUAGE: cpp\nCODE:\n```\n    #include <boost/parameter.hpp>\n    #include <string>\n\n    namespace parameter = boost::parameter;\n    \n```\n\nLANGUAGE: cpp\nCODE:\n```\n    int main()\n    {\n        return 0;\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining Implicit Error-from-Failure-Type-Sugar Copy Constructor in C++\nDESCRIPTION: This snippet defines the implicit copy constructor for the error type which uses the failure type template. It allows for the construction of error types when converting from failure types under specific conditions, primarily focusing on compatible conversion and the handling of void types.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/basic_result/implicit_failure_copy_constructor.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n+++\ntitle = \"`basic_result(const failure_type<T> &)`\"\ndescription = \"Implicit error-from-failure-type-sugar copy constructor. Available if `predicate::enable_compatible_conversion<void, T, void>` is true, or `T` is `void`. Constexpr, triviality and noexcept propagating.\"\ncategories = [\"constructors\", \"implicit-constructors\", \"tagged-constructors\"]\nweight = 520\n+++\n\nImplicit error-from-failure-type-sugar copy constructor used to disambiguate the construction of the error type.\nNote that if `T = void`, `error_type` will be default constructed.  Calls {{% api \"void on_result_copy_construction(T *, U &&) noexcept\" %}} with `this` and `const failure_type<T> &`.\n\n*Requires*: `predicate::enable_compatible_conversion<void, T, void>` is true, or `T` is `void`.\n\n*Complexity*: Same as for the `error_type` constructor which accepts `T`, or the `error_type` default constructor if `T` is `void`. Constexpr, triviality and noexcept of underlying operations is propagated.\n```\n\n----------------------------------------\n\nTITLE: Setting Public Include Directories\nDESCRIPTION: Sets the public include directories for the arango_cluster_engine library.  This makes the IRESEARCH_INCLUDE directory available to other libraries or executables that depend on arango_cluster_engine.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/ClusterEngine/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(arango_cluster_engine PUBLIC\n  ${IRESEARCH_INCLUDE})\n```\n\n----------------------------------------\n\nTITLE: ASIO with Outcome Integration Example\nDESCRIPTION: Shows how to use ASIO with Outcome to return result<T> from coroutines.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/recipes/asio-integration-1-70.md#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\noutcome::result<size_t> bytes = co_await socket_.async_read_some(\n  boost::asio::buffer(buffer_),\n  as_result(boost::asio::use_awaitable));\n```\n\n----------------------------------------\n\nTITLE: Configuring Set Container Tests in CMake\nDESCRIPTION: Sets up tests for various set container implementations including standard sets, Boost unordered sets, and conditionally for hash_set and C++11 unordered sets.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/serialization/CMake/CMakeLists.txt#2025-04-22_snippet_16\n\nLANGUAGE: CMake\nCODE:\n```\narchive_test(test_set A)\narchive_test(test_set_boost_unordered A)\nCHECK_INCLUDE_FILE_CXX(hash_set HASH_SET_FOUND)\nif(HASH_SET_FOUND)\n  archive_test(test_set_hashed A)\nendif()\nif(COMPILER_SUPPORTS_CXX11)\n  archive_test(test_set_unordered A)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring CrashHandler Light Test Executable in CMake\nDESCRIPTION: Creates and configures a test executable for the light version of ArangoDB's crash handler. Sets up the build target, links required libraries including gtest, and adds it to the test suite. The target is excluded from default build.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/CrashHandler/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n#add_executable(arangodbtests_crashhandler\n#  CrashHandlerTest.cpp)\n\nadd_executable(arangodbtests_crashhandler_light\n  EXCLUDE_FROM_ALL\n  CrashHandlerLightTest.cpp)\n\ntarget_link_libraries(arangodbtests_crashhandler_light\n  arango_crashhandler_light\n  gtest\n  gtest_main)\n\nadd_test(crashhandler_light\n  COMMAND arangodbtests_crashhandler_light)\n```\n\n----------------------------------------\n\nTITLE: Defining filter_view Template in C++\nDESCRIPTION: Defines the filter_view template structure that creates a view into a subset of Sequence's elements satisfying the predicate Pred. The actual implementation is unspecified.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/filter_view.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      typename Sequence\n    , typename Pred\n    >\nstruct filter_view\n{\n    // |unspecified|\n    // |...|\n};\n```\n\n----------------------------------------\n\nTITLE: Reflecting Changes from C++ Array to Python ndarray\nDESCRIPTION: This snippet modifies the original C++ array and checks if this change is reflected in the Python ndarray, showcasing the syncing of data between the two languages.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/doc/html/numpy/_sources/tutorial/fromdata.rst.txt#2025-04-22_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\n    arr[2] = 8;\n    std::cout << std::endl\n              << \"Is the change reflected in the Python ndarray ?\" << std::endl\n\t      << p::extract<char const *>(p::str(py_array)) << std::endl;\n  }\n```\n\n----------------------------------------\n\nTITLE: Creating 1D NumPy Array from C++ Integer Array\nDESCRIPTION: This snippet demonstrates how to create a 1D NumPy array from a C++ integer array. It specifies the data, shape, and stride for the array creation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/doc/numpy/reference/ndarray.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nint data[] = {1,2,3,4} ;\np::tuple shape = p::make_tuple(4) ;\np::tuple stride = p::make_tuple(4) ; \np::object own ;\nnp::ndarray data_ex = np::from_data(data,dt,shape,stride,own);\n```\n\n----------------------------------------\n\nTITLE: Using Custom Facet for Distance Formatting in C++\nDESCRIPTION: Demonstrates how to use a custom measure facet to format distances according to locale settings. The example shows retrieving the facet from a stream's locale and using it for output formatting.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/doc/std_locales.txt#2025-04-22_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\nvoid print_distance(std::ostream &out,double value)\n{\n    measure const &m = std::use_facet<measure>(out.getloc());\n    // Fetch locale information from stream\n    out << m.from_metric(value) << \" \" << m.name();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Interoperable Node Iterators with Boost Iterator Facade in C++\nDESCRIPTION: This snippet extends the previous node_iter implementation to support interoperability between const and non-const iterators. It adds a templatized converting constructor and equality comparison to allow conversion and comparison between different iterator types.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/iterator_facade_tutorial.rst#2025-04-22_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <class Value>\nclass node_iter\n  : public boost::iterator_facade<\n        node_iter<Value>\n      , Value\n      , boost::forward_traversal_tag\n    >\n{\n public:\n    node_iter()\n      : m_node(0) {}\n\n    explicit node_iter(Value* p)\n      : m_node(p) {}\n\n    template <class OtherValue>\n    node_iter(node_iter<OtherValue> const& other)\n      : m_node(other.m_node) {}\n\n private:\n    friend class boost::iterator_core_access;\n    template <class> friend class node_iter;\n\n    template <class OtherValue>\n    bool equal(node_iter<OtherValue> const& other) const\n    { \n        return this->m_node == other.m_node;\n    }\n\n    void increment()\n    { m_node = m_node->next(); }\n\n    Value& dereference() const\n    { return *m_node; }\n\n    Value* m_node;\n};\ntypedef impl::node_iterator<node_base> node_iterator;\ntypedef impl::node_iterator<node_base const> node_const_iterator;\n```\n\n----------------------------------------\n\nTITLE: Setting Property Value in Adjacency List (C++)\nDESCRIPTION: Sets the property value for a vertex or edge descriptor in an adjacency list. The value must be convertible to the property map's value type.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/distributed_adjacency_list.rst#2025-04-22_snippet_26\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <class PropertyTag , class X, class Value>\nvoid put(PropertyTag, const adjacency_list& g, X x, const Value& value);\n```\n\n----------------------------------------\n\nTITLE: Boost LEAF Error Handling without Exceptions in C++\nDESCRIPTION: Illustrates how to use Boost LEAF for error handling without exceptions in C++. It shows the syntax for handling multiple error types and providing fallback handlers.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/leaf/doc/whitepaper.md#2025-04-22_snippet_16\n\nLANGUAGE: c++\nCODE:\n```\nleaf::handle_all(\n\n  // The first function passed to handle_all is akin to a try-block.\n  []() -> leaf::result<T>\n  {\n    // Operations which may fail, returning a T in case of success.\n    // If case of an error, any number of error objects of arbitrary\n    // types can be associated with the returned result<T> object.\n  },\n\n  // The handler below is invoked if both an object of type my_error\n  // and an object of another_type are associated with the error returned\n  // by the try-block (above).\n  [](my_error const & e1, another_type const & e2)\n  {\n    ....\n  },\n\n  // This handler is invoked if an object of type my_error is associated\n  // with the error returned by the try-block.\n  [](my_error const & e1)\n  {\n    ....\n  },\n\n  // This handler is invoked in all other cases, similarly to catch(...)\n  []\n  {\n    ....\n  }\n\n);\n```\n\n----------------------------------------\n\nTITLE: Declaring Protect Adaptor Class in C++\nDESCRIPTION: Defines the protect_adaptor class template that inherits from detail::callable_base<F>. This class is used to wrap a function and prevent it from being recognized as a bind expression.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/protect.hpp.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<class F>\nstruct protect_adaptor : detail::callable_base<F>\n{\n    typedef protect_adaptor fit_rewritable1_tag;\n    BOOST_HOF_INHERIT_CONSTRUCTOR(protect_adaptor, detail::callable_base<F>)\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Variadic Max Function in C++\nDESCRIPTION: Traditional implementation of a variadic max function using recursive template instantiation. This function returns the maximum value among all arguments.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/src/point_free.md#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\n// Base case\ntemplate<class T>\nT max(const T& x)\n{\n    return x;\n}\n\ntemplate<class T, class... Ts>\nT max(const T& x, const T& y, const Ts&... xs)\n{\n    return std::max(x, max(y, xs...));\n}\n```\n\n----------------------------------------\n\nTITLE: Observing Value with Narrow Contract using `assume_value()` in C++\nDESCRIPTION: This method provides a const rvalue reference observer with narrow contract semantics. It first invokes the policy check then returns a reference to the value. Undefined behavior occurs if no value is present, though the policy check can mitigate this. For `void` value types, only a const overload returning void exists.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/basic_result/assume_value_rvalue_const.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nconst value_type &&assume_value() const && noexcept\n```\n\n----------------------------------------\n\nTITLE: Using if_c Metafunction for Type Selection in C++\nDESCRIPTION: Example usage of the if_c metafunction to select between char and long types based on boolean constants. It demonstrates how the metafunction selects the appropriate type based on the condition.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/if_c.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ntypedef if_c<true,char,long>::type t1;\ntypedef if_c<false,char,long>::type t2;\n\nBOOST_MPL_ASSERT(( is_same<t1, char> ));\nBOOST_MPL_ASSERT(( is_same<t2, long> ));\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories\nDESCRIPTION: This snippet adds the `Listeners` and `Methods` subdirectories to the build process. This allows for the inclusion of modules or components that are logically organized within those subdirectories as part of the broader ArangoDB RocksDB library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/RocksDBEngine/CMakeLists.txt#2025-04-22_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(Listeners)\nadd_subdirectory(Methods)\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Code Extended with ADL Bridging in C++\nDESCRIPTION: Demonstrates the creation of a thin clone of std::error_code in the local namespace to ensure compiler discovery of event hooks. The code includes template aliases for result and outcome types bound to the ADL bridging error_code.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/tutorial/advanced/hooks/adl_bridging.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nerror_code_extended2\n```\n\n----------------------------------------\n\nTITLE: Checking for System Functions\nDESCRIPTION: Checks for the availability of specific system functions like mmap and sysconf.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/snappy/snappy-1.1.9/CMakeLists.txt#2025-04-22_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(CheckSymbolExists)\ncheck_symbol_exists(\"mmap\" \"sys/mman.h\" HAVE_FUNC_MMAP)\ncheck_symbol_exists(\"sysconf\" \"unistd.h\" HAVE_FUNC_SYSCONF)\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced Server Executable with CMake\nDESCRIPTION: This CMake snippet configures the build for an advanced server example using Boost.Beast. It groups source files, defines the executable target, links required libraries, and sets folder properties.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/beast/example/advanced/server/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nGroupSources(include/boost/beast beast)\nGroupSources(example/advanced/server \"/\")\n\nadd_executable (advanced-server\n    ${BOOST_BEAST_FILES}\n    Jamfile\n    advanced_server.cpp\n)\n\ntarget_link_libraries(advanced-server\n    lib-asio\n    lib-beast)\n\nset_property(TARGET advanced-server PROPERTY FOLDER \"example-advanced-server\")\n```\n\n----------------------------------------\n\nTITLE: Passing Function Pointer to std::accumulate in C++\nDESCRIPTION: Demonstrates how to pass a custom sum function as a function pointer to std::accumulate. This example shows basic usage of higher-order functions in C++.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/src/gettingstarted.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nint sum(int x, int y)\n{\n    return x + y;\n}\n// Pass sum to accumulate\nstd::vector<int> v = { 1, 2, 3 };\nint total = std::accumulate(v.begin(), v.end(), 0, &sum);\n```\n\n----------------------------------------\n\nTITLE: Example unary_ufunc struct definition\nDESCRIPTION: Defines an example struct that can be used with the `unary_ufunc` template.  It specifies the `argument_type` and `result_type` as `any_valid_type`, which must be defined as a valid C++ type. This struct demonstrates the basic structure needed to use `unary_ufunc`.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/doc/numpy/reference/unary_ufunc.rst#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\n  struct example_unary_ufunc\n  {\n    typedef any_valid_type argument_type;\n    typedef any_valid_type result_type;\n  };\n```\n\n----------------------------------------\n\nTITLE: Implementing Overloaded Print Function with first_of for Ranges in C++\nDESCRIPTION: Creates a print function using first_of adaptor to support printing both direct values and ranges like std::vector.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/doc/src/example_print.md.txt#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_HOF_STATIC_LAMBDA_FUNCTION(print) = first_of(\n    [](const auto& x) -> decltype(std::cout << x, void())\n    {\n        std::cout << x << std::endl;\n    },\n    [](const auto& range)\n    {\n        for(const auto& x:range) std::cout << x << std::endl;\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a for_each_tuple Function with unpack and proj Adaptors in C++\nDESCRIPTION: Implements a helper function that applies a function to each element in a tuple using unpack and proj adaptors.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/doc/src/example_print.md.txt#2025-04-22_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_HOF_STATIC_LAMBDA_FUNCTION(for_each_tuple) = [](const auto& sequence, auto f)\n{\n    return unpack(proj(f))(sequence);\n};\n```\n\n----------------------------------------\n\nTITLE: Computing Histogram of Grayscale Image in GIL\nDESCRIPTION: This snippet defines a function to compute the histogram of pixel values in a grayscale image. It uses both traditional iteration and a more concise approach leveraging GIL's algorithms and the Boost library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/examples.rst#2025-04-22_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\n  template <typename GrayView, typename R>\n  void grayimage_histogram(const GrayView& img, R& hist)\n  {\n    for (typename GrayView::iterator it=img.begin(); it!=img.end(); ++it)\n        ++hist[*it];\n  }\n```\n\nLANGUAGE: cpp\nCODE:\n```\n  template <typename GrayView, typename R>\n  void grayimage_histogram(const GrayView& v, R& hist)\n  {\n    for_each_pixel(v, ++var(hist)[_1]);\n  }\n```\n\nLANGUAGE: cpp\nCODE:\n```\n  template <typename View, typename R>\n  void luminosity_histogram(const View& v, R& hist)\n  {\n    grayimage_histogram(color_converted_view<gray8_pixel_t>(v),hist);\n  }\n```\n\n----------------------------------------\n\nTITLE: Using Flow for Function Composition in C++\nDESCRIPTION: Demonstrates an alternative to pipable operators using the 'flow' function for composing multiple operations on a container.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/doc/src/more_examples.md.txt#2025-04-22_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nauto r = flow(\n        filter([](int x) { return x > 2; }),\n        transform([](int x) { return x * x; })\n    )(numbers);\n```\n\n----------------------------------------\n\nTITLE: Defining Eager Coroutine Awaitable\nDESCRIPTION: This code snippet explains the implementation of the 'eager<T>' awaitable type. It is designed for eagerly evaluated coroutines where execution begins immediately upon calling 'co_await'.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/tutorial/essential/coroutines/awaitables.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\neager<T>\\n\\n    An eagerly evaluated Coroutine: invoking `co_await` upon a function returning one\\n    of these immediately begins the execution of the function now. If the function never\\n    suspends, the overhead is similar to calling an ordinary function.\n```\n\n----------------------------------------\n\nTITLE: Creating 180-Degree Rotated View using Boost GIL\nDESCRIPTION: This function template creates a 180-degree rotation view of the source image. It is useful for applications where images need to be viewed in an inverted manner without altering the original data.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/image_view.rst.txt#2025-04-22_snippet_10\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <typename View>\ntypename dynamic_xy_step_type<View>::type rotated180_view(const View& src);\n```\n\n----------------------------------------\n\nTITLE: Configuring libunwind Build Flags for Linux in CMake\nDESCRIPTION: Sets up compiler variables and flags specifically for Linux builds. It captures the compiler settings from the parent CMake configuration and adds build-type specific flags to ensure they are properly passed to the libunwind build.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/libunwind/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# generate external project\nif (LINUX)\n  set(LIBUNWIND_CC_TMP \"${CMAKE_C_COMPILER}\")\n  set(LIBUNWIND_CXX_TMP \"${CMAKE_CXX_COMPILER}\")\n  \n  # add build-type specific c flags and cxx flags here, because otherwise\n  # they would be lost\n  set(LIBUNWIND_C_FLAGS \"${CMAKE_C_FLAGS} ${CMAKE_C_FLAGS_${CMAKE_BUILD_TYPE_UPPER}}\")\n  set(LIBUNWIND_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${CMAKE_CXX_FLAGS_${CMAKE_BUILD_TYPE_UPPER}}\")\n  message(DEBUG \"LIBUNWIND_C_FLAGS=${LIBUNWIND_C_FLAGS} LIBUNWIND_CXX_FLAGS=${LIBUNWIND_CXX_FLAGS}\")\n\n  set(LIBUNWIND_LIB \"${CMAKE_CURRENT_BINARY_DIR}/v${LIBUNWIND_VERSION}/src/.libs/libunwind.a\")\n```\n\n----------------------------------------\n\nTITLE: Push Front Method in Ptr List\nDESCRIPTION: The method void push_front( T* x ) is responsible for inserting a pointer into the container, taking ownership of it. It requires x to be non-null and ensures strong exception safety, throwing a bad_pointer exception if x is null.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/ptr_list.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nvoid push_front( T* x );\n```\n\n----------------------------------------\n\nTITLE: Defining reverse_stable_partition Template in C++\nDESCRIPTION: Defines the template structure for the reverse_stable_partition algorithm. It takes a sequence, a predicate, and optional input inserters as template parameters.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/reverse_stable_partition.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      typename Seq\n    , typename Pred\n    , typename In1 = |unspecified|\n    , typename In2 = |unspecified|\n    >\nstruct reverse_stable_partition\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Proxy Example Executable Configuration\nDESCRIPTION: Configures the 'proxy' executable target with its source files and links it against Boost::json library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/json/example/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(proxy\n    file.hpp\n    proxy.cpp\n)\nset_property(TARGET proxy PROPERTY FOLDER \"example\")\ntarget_link_libraries(proxy PRIVATE Boost::json)\n```\n\n----------------------------------------\n\nTITLE: Configuring Binary Format for Boost.Context\nDESCRIPTION: Sets up a CMake cache variable for the binary format, with default values based on the target platform.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/context/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(WIN32)\n  set(_default_binfmt pe)\nelseif(APPLE)\n  set(_default_binfmt mach-o)\nelse()\n  set(_default_binfmt elf)\nendif()\n\nset(BOOST_CONTEXT_BINARY_FORMAT \"${_default_binfmt}\" CACHE STRING \"Boost.Context binary format (elf, mach-o, pe, xcoff)\")\nset_property(CACHE BOOST_CONTEXT_BINARY_FORMAT PROPERTY STRINGS elf mach-o pe xcoff)\n\nunset(_default_binfmt)\n```\n\n----------------------------------------\n\nTITLE: Defining Static Library Sources for ArangoDB Agency\nDESCRIPTION: Specifies a list of source files to compile into the arango_agency static library, including various Agency-related implementation files\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/Agency/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(arango_agency STATIC\n  AddFollower.cpp\n  AgencyComm.cpp\n  AgencyFeature.cpp\n  AgencyPaths.cpp\n  Agent.cpp\n  AgentCallback.cpp\n  AgentConfiguration.cpp\n  AsyncAgencyComm.cpp\n  CleanOutServer.cpp\n  Compactor.cpp\n  Constituent.cpp\n  FailedFollower.cpp\n  FailedLeader.cpp\n  FailedServer.cpp\n  Helpers.cpp\n  Inception.cpp\n  Job.cpp\n  JobContext.cpp\n  MoveShard.cpp\n  Node.cpp\n  PathComponent.cpp\n  ReconfigureReplicatedLog.cpp\n  RemoveFollower.cpp\n  ResignLeadership.cpp\n  RestAgencyHandler.cpp\n  RestAgencyPrivHandler.cpp\n  State.cpp\n  Store.cpp\n  Supervision.cpp)\n```\n\n----------------------------------------\n\nTITLE: Including the copy algorithm header in C++\nDESCRIPTION: Shows the header file that needs to be included to use the copy algorithm in C++.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/copy.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/copy.hpp>\n```\n\n----------------------------------------\n\nTITLE: Defining Boost.Log Source Files List\nDESCRIPTION: Lists all the source files that comprise the core Boost.Log library. These files implement the fundamental logging functionality, including attribute handling, formatting, and backend implementations.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/log/CMakeLists.txt#2025-04-22_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nset(boost_log_sources\n    src/alignment_gap_between.hpp\n    src/attribute_name.cpp\n    src/attribute_set_impl.hpp\n    src/attribute_set.cpp\n    src/attribute_value_set.cpp\n    src/bit_tools.hpp\n    src/code_conversion.cpp\n    src/stateless_allocator.hpp\n    src/unique_ptr.hpp\n    src/core.cpp\n    src/record_ostream.cpp\n    src/severity_level.cpp\n    src/global_logger_storage.cpp\n    src/named_scope.cpp\n    src/process_name.cpp\n    src/process_id.cpp\n    src/thread_id.cpp\n    src/id_formatting.hpp\n    src/murmur3.hpp\n    src/timer.cpp\n    src/exceptions.cpp\n    src/default_attribute_names.cpp\n    src/default_sink.hpp\n    src/default_sink.cpp\n    src/text_ostream_backend.cpp\n    src/text_file_backend.cpp\n    src/text_multifile_backend.cpp\n    src/thread_specific.cpp\n    src/once_block.cpp\n    src/timestamp.cpp\n    src/threadsafe_queue.cpp\n    src/event.cpp\n    src/trivial.cpp\n    src/spirit_encoding.hpp\n    src/spirit_encoding.cpp\n    src/format_parser.cpp\n    src/date_time_format_parser.cpp\n    src/named_scope_format_parser.cpp\n    src/permissions.cpp\n    src/dump.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Value Printer in C++\nDESCRIPTION: This struct defines a function object that prints values. It's used as an example of how to create a function object for use with for_each.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/for_each.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nstruct value_printer\n{\n    template< typename U > void operator()(U x)\n    {\n        std::cout << x << '\\n';\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Smart Pointer Parameter Interface Example in C++\nDESCRIPTION: Example showing the push_back interface that accepts compatible smart pointer types. The actual implementation provides overloads for std::auto_ptr and/or std::unique_ptr depending on compiler support.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/compatible_smart_ptr.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nvoid container::push_back( compatible-smart-ptr<T> );\n```\n\n----------------------------------------\n\nTITLE: Configuring Core Container Tests in CMake\nDESCRIPTION: Sets up archive tests for core container types like lists, maps, and related functionality. Tests include standard implementations and smart pointer variations.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/serialization/CMake/CMakeLists.txt#2025-04-22_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\narchive_test(test_helper_support)\narchive_test(test_interrupts)\narchive_test(test_list A)\narchive_test(test_list_ptrs A)\n\narchive_test(test_map A)\narchive_test(test_map_boost_unordered A)\n```\n\n----------------------------------------\n\nTITLE: Implementing Base Node Class in C++\nDESCRIPTION: Defines a polymorphic base class for linked list nodes with virtual methods for printing and value modification.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/iterator_facade_tutorial.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nstruct node_base {\n    node_base() : m_next(0) {}\n    virtual ~node_base() { delete m_next; }\n    node_base* next() const { return m_next; }\n    virtual void print(std::ostream& s) const = 0;\n    virtual void double_me() = 0;\n    void append(node_base* p) {\n        if (m_next) \n            m_next->append(p); \n        else\n            m_next = p; \n    }\n private:\n    node_base* m_next;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Non-Named Parameter Dijkstra's Shortest Paths Function\nDESCRIPTION: This C++ template function definition for Dijkstra's algorithm allows specifying multiple parameters without named arguments. Suitable for cases where users prefer a more traditional function call, it facilitates greater backward compatibility with existing sequential implementations.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/dijkstra_shortest_paths.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n// non-named parameter version\n  template <typename Graph, typename DijkstraVisitor, \n            typename PredecessorMap, typename DistanceMap,\n            typename WeightMap, typename VertexIndexMap, typename CompareFunction, typename CombineFunction, \n            typename DistInf, typename DistZero>\n  void dijkstra_shortest_paths\n    (const Graph& g,\n     typename graph_traits<Graph>::vertex_descriptor s, \n     PredecessorMap predecessor, DistanceMap distance, WeightMap weight, \n     VertexIndexMap index_map,\n     CompareFunction compare, CombineFunction combine, DistInf inf, DistZero zero,\n     DijkstraVisitor vis);\n```\n\n----------------------------------------\n\nTITLE: Basic Word Boundary Analysis in C++\nDESCRIPTION: Demonstrates basic word boundary analysis using segment_index to split text into word segments with the en_US.UTF-8 locale.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/doc/boundary_analysys.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nusing namespace boost::locale::boundary;\nboost::locale::generator gen;\nstd::string text=\"To be or not to be, that is the question.\"\n// Create mapping of text for token iterator using global locale.\nssegment_index map(word,text.begin(),text.end(),gen(\"en_US.UTF-8\")); \n// Print all \"words\" -- chunks of word boundary\nfor(ssegment_index::iterator it=map.begin(),e=map.end();it!=e;++it)\n    std::cout <<\"\\\"\"<< * it << \"\\\", \";\nstd::cout << std::endl;\n```\n\n----------------------------------------\n\nTITLE: ptr_multiset_adapter::transfer(iterator object, ptr_multiset_adapter& from) Method\nDESCRIPTION: Describes the behavior of the `transfer(iterator object, ptr_multiset_adapter& from)` method. It moves the element pointed to by `object` from the `from` container to the current container, increasing the size of the current container by one and decreasing the size of `from` by one.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/ptr_multiset_adapter.rst#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\nvoid transfer( iterator object, ptr_multiset_adapter& from );\n```\n\n----------------------------------------\n\nTITLE: Element Access Methods in ptr_deque\nDESCRIPTION: This snippet describes the element access methods for the ptr_deque class, including operator[] and at, detailing their requirements and behavior.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/ptr_deque.rst#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nT& operator[]( size_type n );\nconst T& operator[]( size_type n ) const;\nT& at( size_type n );\nconst T& at( size_type n ) const;\n// Requirements: n < size()\n// Effects: Returns a reference to the n'th element\n// Throws: Nothing\n// Throws: bad_index if n >= size()\n```\n\n----------------------------------------\n\nTITLE: Using eager<T> Coroutine Awaitable in C++\nDESCRIPTION: Demonstrates how to define and use the eager<T> coroutine awaitable. The function immediately executes and returns a value without unnecessary suspend-resume cycles if the function doesn't suspend during execution.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/awaitables/eager.md#2025-04-22_snippet_0\n\nLANGUAGE: c++\nCODE:\n```\neager<int> func(int x)\n{\n  co_return x + 1;\n}\n...\n// Executes like a non-coroutine function i.e. r is immediately set to 6.\nint r = co_await func(5);\n```\n\n----------------------------------------\n\nTITLE: Adding RocksDB Library\nDESCRIPTION: This snippet defines the `arango_rocksdb` static library by listing all the source files that comprise it. It specifies the source code files to be compiled into the `arango_rocksdb` library, which forms a core part of ArangoDB's storage engine.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/RocksDBEngine/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(arango_rocksdb STATIC\n  RocksDBBackgroundThread.cpp\n  ReplicatedRocksDBTransactionCollection.cpp\n  RocksDBBuilderIndex.cpp\n  RocksDBChecksumEnv.cpp\n  RocksDBCollection.cpp\n  RocksDBColumnFamilyManager.cpp\n  RocksDBCommon.cpp\n  RocksDBComparator.cpp\n  RocksDBCuckooIndexEstimator.cpp\n  RocksDBDumpContext.cpp\n  RocksDBDumpManager.cpp\n  RocksDBEdgeIndex.cpp\n  RocksDBEngine.cpp\n  RocksDBFormat.cpp\n  RocksDBFulltextIndex.cpp\n  RocksDBGeoIndex.cpp\n  RocksDBIncrementalSync.cpp\n  RocksDBIndex.cpp\n  RocksDBIndexCacheRefillFeature.cpp\n  RocksDBIndexCacheRefillThread.cpp\n  RocksDBIndexFactory.cpp\n  RocksDBIndexingDisabler.cpp\n  RocksDBIterators.cpp\n  RocksDBKey.cpp\n  RocksDBKeyBounds.cpp\n  RocksDBLogValue.cpp\n  RocksDBMetaCollection.cpp\n  RocksDBMetadata.cpp\n  RocksDBMethods.cpp\n  RocksDBMethodsMemoryTracker.cpp\n  RocksDBMultiDimIndex.cpp\n  RocksDBOptimizerRules.cpp\n  RocksDBOptionFeature.cpp\n  RocksDBOptionsProvider.cpp\n  RocksDBPrimaryIndex.cpp\n  RocksDBRecoveryManager.cpp\n  RocksDBReplicationCommon.cpp\n  RocksDBReplicationContext.cpp\n  RocksDBReplicationContextGuard.cpp\n  RocksDBReplicationIterator.cpp\n  RocksDBReplicationManager.cpp\n  RocksDBReplicationTailing.cpp\n  RocksDBRestCollectionHandler.cpp\n  RocksDBRestHandlers.cpp\n  RocksDBRestReplicationHandler.cpp\n  RocksDBRestWalHandler.cpp\n  RocksDBSavePoint.cpp\n  RocksDBSettingsManager.cpp\n  RocksDBSortedRowsStorageContext.cpp\n  RocksDBSyncThread.cpp\n  RocksDBTempStorage.cpp\n  RocksDBTransactionCollection.cpp\n  RocksDBTransactionMethods.cpp\n  RocksDBTransactionState.cpp\n  RocksDBTtlIndex.cpp\n  RocksDBTypes.cpp\n  RocksDBUpgrade.cpp\n  RocksDBVPackIndex.cpp\n  RocksDBValue.cpp\n  RocksDBVectorIndex.cpp\n  RocksDBWalAccess.cpp\n  ReplicatedRocksDBTransactionState.cpp\n  SimpleRocksDBTransactionState.cpp\n  SortedRowsStorageBackendRocksDB.cpp)\n```\n\n----------------------------------------\n\nTITLE: Betweenness Centrality Function Signatures in C++\nDESCRIPTION: This code snippet presents various overloaded signatures of the `brandes_betweenness_centrality` function within the Boost Graph Library. These functions compute the betweenness centrality of vertices and edges in a graph using Brandes' algorithm. The overloads differ in the parameters they accept, accommodating named parameters, centrality maps, edge centrality maps, and various property maps for fine-grained control over the algorithm's execution.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/betweenness_centrality.rst#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n// named parameter versions\n  template<typename Graph, typename Param, typename Tag, typename Rest>\n  void \n  brandes_betweenness_centrality(const Graph& g, \n                                 const bgl_named_params<Param,Tag,Rest>& params);\n\n  template<typename Graph, typename CentralityMap>\n  void \n  brandes_betweenness_centrality(const Graph& g, CentralityMap centrality);\n\n  template<typename Graph, typename CentralityMap, typename EdgeCentralityMap>\n  void \n  brandes_betweenness_centrality(const Graph& g, CentralityMap centrality,\n                                 EdgeCentralityMap edge_centrality_map);\n\n  // non-named parameter versions\n  template<typename Graph, typename CentralityMap, typename EdgeCentralityMap,\n           typename IncomingMap, typename DistanceMap, typename DependencyMap, \n           typename PathCountMap, typename VertexIndexMap, typename Buffer>\n  void  \n  brandes_betweenness_centrality(const Graph& g, \n                                 CentralityMap centrality,\n                                 EdgeCentralityMap edge_centrality_map,\n                                 IncomingMap incoming, \n                                 DistanceMap distance, \n                                 DependencyMap dependency,     \n                                 PathCountMap path_count,   \n                                 VertexIndexMap vertex_index,\n                                 Buffer sources,\n                                 typename property_traits<DistanceMap>::value_type delta);\n\n  template<typename Graph, typename CentralityMap, typename EdgeCentralityMap, \n           typename IncomingMap, typename DistanceMap, typename DependencyMap, \n           typename PathCountMap, typename VertexIndexMap, typename WeightMap, \n           typename Buffer>    \n  void \n  brandes_betweenness_centrality(const Graph& g, \n                                 CentralityMap centrality,\n                                 EdgeCentralityMap edge_centrality_map,\n                                 IncomingMap incoming, \n                                 DistanceMap distance, \n                                 DependencyMap dependency,\n                                 PathCountMap path_count, \n                                 VertexIndexMap vertex_index,\n                                 Buffer sources,\n                                 typename property_traits<WeightMap>::value_type delta,\n                                 WeightMap weight_map);\n\n  // helper functions\n  template<typename Graph, typename CentralityMap>\n  typename property_traits<CentralityMap>::value_type\n  central_point_dominance(const Graph& g, CentralityMap centrality);\n```\n\n----------------------------------------\n\nTITLE: Defining RandomAccess2DImageViewConcept in C++\nDESCRIPTION: The RandomAccess2DImageViewConcept specializes the N-dimensional concept for two-dimensional image views, adding specific requirements and member types for 2D navigation and traversal. The concept assumes the image view is two-dimensional, introducing x and y axis iterators, coordinates, and locator attributes tailored for 2D image data handling.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/image_view.rst.txt#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nconcept RandomAccess2DImageViewConcept<RandomAccessNDImageViewConcept View> { where num_dimensions==2; typename x_iterator = axis<0>::iterator; typename y_iterator = axis<1>::iterator; typename x_coord_t = axis<0>::coord_t; typename y_coord_t = axis<1>::coord_t; typename xy_locator = locator; x_coord_t View::width() const; y_coord_t View::height() const; x_iterator View::x_at(const point_t&) const; x_iterator View::row_begin(y_coord_t) const; x_iterator View::row_end(y_coord_t) const; y_iterator View::y_at(const point_t&) const; y_iterator View::col_begin(x_coord_t) const; y_iterator View::col_end(x_coord_t) const; xy_locator View::xy_at(const point_t&) const; View::View(x_coord_t,y_coord_t,const locator&); iterator View::at(x_coord_t,y_coord_t) const; reference operator()(View,x_coord_t,y_coord_t) const; xy_locator View::xy_at(x_coord_t,y_coord_t) const; x_iterator View::x_at(x_coord_t,y_coord_t) const; y_iterator View::y_at(x_coord_t,y_coord_t) const; }; concept MutableRandomAccess2DImageViewConcept<RandomAccess2DImageViewConcept View> : MutableRandomAccessNDImageViewConcept<View> {};\n```\n\n----------------------------------------\n\nTITLE: Error Handler for Incorrect is_invocable Syntax in C++\nDESCRIPTION: A specialization that produces a static_assert error when the incorrect syntax form is_invocable<F(Args...)> is used instead of the correct is_invocable<F, Args...> form. This helps guide users to the proper API usage.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/is_invocable.hpp.txt#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<class F, class... Ts, class... Us>\nstruct is_invocable<F(Ts...), Us...>\n{\n    static_assert(!std::is_same<F, F>::value, \n        \"The is_invocable<F(Args...)> form is not supported because it is problematic.\"\n        \"Please use is_invocable<F, Args...> instead.\"\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Using push_front Metafunction in C++\nDESCRIPTION: Demonstrates the usage of push_front metafunction to insert an element at the beginning of a sequence. It shows the syntax for typedef and the expected semantics.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/push_front.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntypedef push_front<s,x>::type r;\n```\n\n----------------------------------------\n\nTITLE: Configuring S2 Test Executables in CMake\nDESCRIPTION: Iterates through S2 test files to create test executables. Each test is linked against the s2testing and s2 libraries, along with various Abseil dependencies and Google Test framework.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/s2geometry/master/CMakeLists.txt#2025-04-22_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nforeach (test_cc ${S2TestFiles})\n    get_filename_component(test ${test_cc} NAME_WE)\n    add_executable(${test} ${test_cc})\n    target_link_libraries(\n        ${test}\n        s2testing s2\n        absl::base\n        absl::btree\n        absl::core_headers\n        absl::flags_reflection\n        absl::memory\n        absl::span\n        absl::strings\n        absl::synchronization\n        gtest_main)\n    add_test(${test} ${test})\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Accessing Property Maps for Distributed Graphs\nDESCRIPTION: This snippet demonstrates how to create a property map for a distributed graph to access the length of highways, ensuring that operations can be performed on non-local vertices and edges.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/distributed_adjacency_list.rst#2025-04-22_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\nRoadMap map; // distributed graph instance\n\ntypedef property_map<RoadMap, int Highway::*>::type \n  road_length = get(&Highway::length, map);\n```\n\n----------------------------------------\n\nTITLE: Windows GetLastError Function Declaration\nDESCRIPTION: Windows API function to retrieve extended error information after a function failure\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/leaf/doc/whitepaper.md#2025-04-22_snippet_7\n\nLANGUAGE: c\nCODE:\n```\nDWORD GetLastError();\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Filesystem Support for Message Catalogs\nDESCRIPTION: Demonstrates how to set up custom filesystem support for loading message catalogs. This example configures message catalog options and installs a custom messages facet with a callback for loading catalog files.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/doc/messages_formatting.txt#2025-04-22_snippet_13\n\nLANGUAGE: C++\nCODE:\n```\n// Configure all options for message catalog\nnamespace blg = boost::locale::gnu_gettext;\nblg::messages_info info;\ninfo.language = \"he\";\ninfo.country = \"IL\";\ninfo.encoding=\"UTF-8\";\ninfo.paths.push_back(\"\"); // You need some even empty path\ninfo.domains.push_back(blg::messages_info::domain(\"my_app\"));\ninfo.callback = some_file_loader; // Provide a callback\n\n// Create a basic locale without messages support\nboost::locale::generator gen;\nstd::locale base_locale = gen(\"he_IL.UTF-8\");\n\n// Install messages catalogs for \"char\" support to the final locale\n// we are going to use\nstd::locale real_locale(base_locale,blg::create_messages_facet<char>(info));\n```\n\n----------------------------------------\n\nTITLE: Invoking Dijkstra's Algorithm C++\nDESCRIPTION: This snippet demonstrates how to invoke Dijkstra's algorithm using the Boost Graph Library. It manages the storage of distances and predecessors for shortest path results and calls the algorithm with the necessary property maps.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/dijkstra_example.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\n// Keeps track of the predecessor of each vertex\n  std::vector<vertex_descriptor> p(num_vertices(g));\n  // Keeps track of the distance to each vertex\n  std::vector<int> d(num_vertices(g));\n\n  vertex_descriptor s = vertex(A, g);\n  dijkstra_shortest_paths\n    (g, s, \n     predecessor_map(\n       make_iterator_property_map(p.begin(), get(vertex_index, g))).\n     distance_map(\n       make_iterator_property_map(d.begin(), get(vertex_index, g)))\n     );\n```\n\n----------------------------------------\n\nTITLE: Defining Lazy Binding Type in C++ for Argument Pack\nDESCRIPTION: This template structure returns the result type of indexing an argument pack with a tagged lazy default. It requires type A to be a model of ArgumentPack and returns the referenced type or a result of type F.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_9\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <typename A, typename K, typename F>\nstruct lazy_binding\n{\n    typedef … type;\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling Abort on Configuration Errors in Jemalloc\nDESCRIPTION: Recommended addition to any jemalloc configuration that causes immediate program abortion when invalid options are specified, helping to catch configuration mistakes early.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/jemalloc/jemalloc/TUNING.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nabort_conf:true\n```\n\n----------------------------------------\n\nTITLE: Implementing Post-Increment Iterator Operation in C++\nDESCRIPTION: Demonstrates the semantic implementation of the post-increment (r++) operation for an incrementable iterator. Shows how the operation should maintain a temporary copy before incrementing.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/IncrementableIterator.rst#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n{\n    X tmp = r;\n    ++r;\n    return tmp;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost.Locale Generator for Specific Categories and Character Types in C++\nDESCRIPTION: Demonstrates how to configure the generator to generate facets for specific categories and character types. This example sets up the generator for wide characters and only collation and formatting facets.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/doc/locale_gen.txt#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ngenerator gen;\ngen.characters(wchar_t_facet);\ngen.categories(collation_facet | formatting_facet);\nstd::locale::global(gen(\"de_DE.UTF-8\"));\n```\n\n----------------------------------------\n\nTITLE: Target Compile Options\nDESCRIPTION: This command sets compile options for the `gil_compile_options` interface library. It uses generator expressions to apply different options based on the compiler and build configuration. These options include warning levels, strict aliasing, and other compiler-specific flags.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/CMakeLists.txt#2025-04-22_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\n\"target_compile_options(gil_compile_options\n  INTERFACE\n    $<$<AND:$<CXX_COMPILER_ID:MSVC>,$<BOOL:${BOOST_GIL_BUILD_CI}>>:-W1>\n    $<$<AND:$<CXX_COMPILER_ID:MSVC>,$<NOT:$<BOOL:${BOOST_GIL_BUILD_CI}>>>:-W4>\n    $<$<CXX_COMPILER_ID:MSVC>:-bigobj>\n    $<$<CXX_COMPILER_ID:MSVC>:-FC> # Need absolute path for __FILE__ used in tests\n    $<$<OR:$<CXX_COMPILER_ID:GNU>,$<CXX_COMPILER_ID:Clang>>:-fstrict-aliasing>\n    $<$<AND:$<OR:$<CXX_COMPILER_ID:GNU>,$<CXX_COMPILER_ID:Clang>>,$<NOT:$<BOOL:${BOOST_GIL_BUILD_CI}>>>:-Wall -Wconversion -Wextra -Wfloat-equal -Wshadow -Wsign-promo -Wstrict-aliasing -Wunused-parameter -pedantic>)\"\n```\n\n----------------------------------------\n\nTITLE: Point2DConcept Definition in C++\nDESCRIPTION: This C++ code defines the Point2DConcept, a refinement of PointNDConcept for two-dimensional points.  It requires that the two dimensions have the same type and provides accessors for the x and y coordinates of the point. It inherits from PointNDConcept.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/point.rst#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\n.. code-block:: cpp\n\n  concept Point2DConcept<typename T> : PointNDConcept<T>\n  {\n      where num_dimensions == 2;\n      where SameType<axis<0>::type, axis<1>::type>;\n\n      typename value_type = axis<0>::type;\n\n      const value_type& operator[](const T&, size_t i);\n          value_type& operator[](      T&, size_t i);\n\n      value_type x,y;\n  };\n```\n\n----------------------------------------\n\nTITLE: Replace Element at Position Method in Reversible Pointer Container in C++\nDESCRIPTION: This method releases ownership of an element at the specified position in the container, ensuring that the size is adjusted appropriately and throwing exceptions for invalid operations.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/reversible_ptr_container.rst#2025-04-22_snippet_19\n\nLANGUAGE: C++\nCODE:\n```\nauto_type release( iterator position );\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost TTI Library in CMake\nDESCRIPTION: Sets up the Boost TTI library as an interface library, defines its dependencies, and configures testing. It requires CMake version 3.5 or higher, sets the project name and version, and links against other Boost libraries.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/tti/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.16)\n\nproject(boost_tti VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n\nadd_library(boost_tti INTERFACE)\nadd_library(Boost::tti ALIAS boost_tti)\n\ntarget_include_directories(boost_tti INTERFACE include)\n\ntarget_link_libraries(boost_tti\n  INTERFACE\n    Boost::config\n    Boost::function_types\n    Boost::mpl\n    Boost::preprocessor\n    Boost::type_traits\n)\n\nif(BUILD_TESTING AND EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/test/CMakeLists.txt\")\n\n  add_subdirectory(test)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring CPack Variables for Debian Packaging\nDESCRIPTION: Configures CPack variables for creating Debian packages including package metadata, dependencies, and packaging options.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/cmake/packages/client/deb.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(CPACK_PACKAGE_VERSION \"${ARANGODB_DEBIAN_UPSTREAM}\")\nset(CPACK_DEBIAN_PACKAGE_SECTION \"shell\")\nset(CPACK_PACKAGE_VENDOR  ${ARANGODB_PACKAGE_VENDOR})\nset(CPACK_PACKAGE_CONTACT ${ARANGODB_PACKAGE_CONTACT})\nset(CPACK_DEBIAN_PACKAGE_HOMEPAGE ${ARANGODB_URL_INFO_ABOUT})\nset(CPACK_DEBIAN_PACKAGE_SHLIBDEPS ON)\nset(CPACK_DEBIAN_PACKAGE_CONFLICTS \"arangodb, ${CPACKG_PACKAGE_CONFLICTS}, ${CPACKG_PACKAGE_CONFLICTS}-client, ${CPACK_PACKAGE_NAME}\")\nset(CPACK_DEBIAN_COMPRESSION_TYPE \"xz\")\nset(CPACK_COMPONENTS_ALL debian-extras)\nset(CPACK_GENERATOR \"DEB\")\nset(CPACK_SET_DESTDIR ON)\n```\n\n----------------------------------------\n\nTITLE: Image Class Template Definition in GIL\nDESCRIPTION: This template defines the image class in GIL. It takes a pixel type, a boolean indicating whether the image is planar or interleaved, and an allocator type. The image class models the ImageConcept, providing a concrete implementation for image storage and manipulation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/image.rst#2025-04-22_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\n    template\n    <\n        typename Pixel, // Models PixelValueConcept\n        bool IsPlanar,  // planar or interleaved image\n        typename A=std::allocator<unsigned char>\n    >\n   class image;\n```\n\n----------------------------------------\n\nTITLE: Overriding configuration variables with a cache file\nDESCRIPTION: This snippet demonstrates how to override configuration variables defined in configure.ac using a cache file.  This is useful for working around configuration results that do not match reality, such as when building on a host with MADV_FREE support and deploying to a target without.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/jemalloc/jemalloc/INSTALL.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n\"echo \\\"je_cv_madv_free=no\\\" > config.cache && ./configure -C\"\n```\n\n----------------------------------------\n\nTITLE: Cleaning Web Interface with CMake\nDESCRIPTION: This command cleans the installed Node.js modules and starts a clean installation of the web interface build.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/CONTRIBUTING.md#2025-04-22_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\ncmake --build --preset community --target frontend_clean\n```\n\n----------------------------------------\n\nTITLE: Declaring bad_result_access_with<EC> Exception Class in C++\nDESCRIPTION: Declaration of the bad_result_access_with<EC> exception class, which inherits from bad_result_access and provides access to the error value. It is used in the Boost.Outcome library to handle incorrect value observations in result types.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/bad_result_access_with.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nnamespace BOOST_OUTCOME_V2_NAMESPACE {\n  template<typename EC>\n  class bad_result_access_with : public bad_result_access {\n    // Implementation details...\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Example Usage of remove_if in C++\nDESCRIPTION: Demonstrates how to use the remove_if algorithm to filter elements from a vector of integers based on a condition.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/remove_if.rst#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\ntypedef vector_c<int,1,4,5,2,7,5,3,5>::type numbers;\ntypedef remove_if< numbers, greater<_,int_<4> > >::type result;\n\nBOOST_MPL_ASSERT(( equal< result,vector_c<int,1,4,2,3>,equal_to<_,_> > ));\n```\n\n----------------------------------------\n\nTITLE: Defining for_each Function Templates in C++\nDESCRIPTION: These function templates define the for_each algorithm for iterating over sequences. The first overload applies a function to each element, while the second applies a transformation before calling the function.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/for_each.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      typename Sequence\n    , typename F\n    >\nvoid for_each( F f );\n\ntemplate<\n      typename Sequence\n    , typename TransformOp\n    , typename F\n    >\nvoid for_each( F f );\n```\n\n----------------------------------------\n\nTITLE: Transforming a Range Using Inserter in C++\nDESCRIPTION: Demonstrates using a back_inserter with a transform algorithm to double each value in a range from 0 to 9 and insert the results into a vector.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/Inserter.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntypedef transform<\n      range_c<int,0,10>\n    , plus<_1,_1>\n    , back_inserter< vector0<> >\n    >::type result;\n```\n\n----------------------------------------\n\nTITLE: Initializing Python Runtime and Numpy Module in C++\nDESCRIPTION: This snippet initializes the Python runtime and the numpy module using Boost.Python. It sets up the necessary namespaces for using these functionalities in C++.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/doc/html/numpy/_sources/tutorial/fromdata.rst.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/python/numpy.hpp>\n#include <iostream>\n\nnamespace p = boost::python;\nnamespace np = boost::python::numpy;\n\nint main(int argc, char **argv)\n{\n  Py_Initialize();\n  np::initialize();\n```\n\n----------------------------------------\n\nTITLE: Y Gradient Function Using Locators\nDESCRIPTION: This snippet showcases the use of locators in GIL to access neighboring pixels for gradient computation in the y direction. It demonstrates movement in both horizontal and vertical dimensions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/tutorial/gradient.rst.txt#2025-04-22_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\nvoid y_gradient(gray8c_view_t const& src, gray8s_view_t const& dst)\n{\n    gray8c_view_t::xy_locator src_loc = src.xy_at(0,1);\n    for (int y = 1; y < src.height() - 1; ++y)\n    {\n        gray8s_view_t::x_iterator dst_it  = dst.row_begin(y);\n\n        for (int x = 0; x < src.width(); ++x)\n        {\n            (*dst_it) = (src_loc(0,-1) - src_loc(0,1)) / 2;\n            ++dst_it;\n            ++src_loc.x(); // each dimension can be advanced separately\n        }\n        src_loc+=point<std::ptrdiff_t>(-src.width(), 1); // carriage return\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Clone Method for Reversible Pointer Container in C++\nDESCRIPTION: This method creates a deep copy of the reversible pointer container, handling memory allocation internally and throwing exceptions if the current memory cannot accommodate the clone.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/reversible_ptr_container.rst#2025-04-22_snippet_17\n\nLANGUAGE: C++\nCODE:\n```\ncompatible-smart-ptr< reversible_ptr_container > clone() const;\n```\n\n----------------------------------------\n\nTITLE: Defining Unit Conversions for Runtime Input\nDESCRIPTION: This code snippet specifies unit conversions for a runtime unit input system. It defines relationships between feet, centimeters, and meters, and includes exit instructions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/units/example/runtime_unit_input.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nreturn foot\n2.0 centimeter\nreturn centimeter\n3.0 meter\nexit\n```\n\n----------------------------------------\n\nTITLE: Implementing try_operation_return_as Template Function in C++\nDESCRIPTION: Default implementation that returns the result of .as_failure() if available, otherwise wraps .error() result into a failure type. This is used by BOOST_OUTCOME_TRY for error handling logic. Requires either .as_failure() or .error() member functions to be valid expressions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/functions/try_operation_return_as.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\ndecltype(auto) try_operation_return_as(X)\n```\n\n----------------------------------------\n\nTITLE: Efficient Image Gradient Computation Abstraction in C++\nDESCRIPTION: Improve gradient calculation by abstracts for per-channel operations using static methods like static_transform. This increases performance particularly when pairwise channel operations need to be semantically correct across different color spaces.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/tutorial/gradient.rst#2025-04-22_snippet_9\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <typename Out>\nstruct halfdiff_cast_channels\n{\n  template <typename T> Out operator()(T const& in1, T const& in2) const\n  {\n      return Out((in1 - in2) / 2);\n  }\n};\n\ntemplate <typename SrcView, typename DstView>\nvoid x_gradient(const SrcView& src, const DstView& dst)\n{\n  typedef typename channel_type<DstView>::type dst_channel_t;\n\n  for (int y=0; y < src.height(); ++y)\n  {\n      typename SrcView::x_iterator src_it = src.row_begin(y);\n      typename DstView::x_iterator dst_it = dst.row_begin(y);\n\n      for (int x=1; x < src.width() - 1; ++x)\n      {\n          static_transform(src_it[x-1], src_it[x+1], dst_it[x],\n              halfdiff_cast_channels<dst_channel_t>());\n      }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Mutable Iterator Adaptor Concept\nDESCRIPTION: The 'MutableIteratorAdaptorConcept' extends the 'IteratorAdaptorConcept' to ensure the iterator adheres to mutable characteristics, providing further specificity for implementation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/pixel_iterator.rst#2025-04-22_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\n  template <boost_concepts::Mutable_ForwardIteratorConcept Iterator>\n  concept MutableIteratorAdaptorConcept : IteratorAdaptorConcept<Iterator> {};\n```\n\n----------------------------------------\n\nTITLE: Importing Beast Library in C++\nDESCRIPTION: Shows how to include the Boost.Beast header in a C++ source file. Beast is header-only so this is the minimum required to use the library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/beast/README.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/beast.hpp>\n```\n\n----------------------------------------\n\nTITLE: Exception Pointer Rethrow Policy\nDESCRIPTION: A policy for rethrowing exceptions from result and outcome types, with different handling for basic_result and basic_outcome instances based on exception availability.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/tutorial/essential/no-value/builtin.md#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\nexception_ptr_rethrow<T, EC, EP>\n```\n\n----------------------------------------\n\nTITLE: Using find_if Algorithm in C++\nDESCRIPTION: Demonstrates how to use the find_if algorithm to find the first unsigned type in a vector of types. It also shows how to assert the correctness of the result using Boost MPL assert macros.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/find_if.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntypedef vector<char,int,unsigned,long,unsigned long> types;\ntypedef find_if<types, is_same<_1,unsigned> >::type iter;\n\nBOOST_MPL_ASSERT(( is_same< deref<iter>::type, unsigned > ));\nBOOST_MPL_ASSERT_RELATION( iter::pos::value, ==, 2 );\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Suite\nDESCRIPTION: Conditionally enables testing when building as root project by including CTest and test directory.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/math/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(CMAKE_SOURCE_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR)\n\n  include(CTest)\n  add_subdirectory(test)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Implementing Phase 2 Constructor in C++\nDESCRIPTION: A constructor method that performs two-phase object initialization, first establishing a legally destructible state and then completing object construction. The method uses an initializer list for efficient object return and includes error reporting via a result parameter.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/tutorial/advanced/constructors/static-constructor.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n// Snippet from constructors.cpp\n// Phase 2 constructor implementation\n```\n\n----------------------------------------\n\nTITLE: Planar Pixel Iterator Structure Definition\nDESCRIPTION: Defines the structure of a `planar_pixel_iterator` templated over a channel pointer and a color space. It also provides typedefs for mutable and immutable planar RGB iterators over unsigned char.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/pixel_iterator.rst.txt#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <typename ChannelPtr, typename ColorSpace>\nstruct planar_pixel_iterator;\n\n// GIL provided typedefs\ntypedef planar_pixel_iterator<const bits8*, rgb_t> rgb8c_planar_ptr_t;\ntypedef planar_pixel_iterator<      bits8*, rgb_t> rgb8_planar_ptr_t;\n```\n\n----------------------------------------\n\nTITLE: Setting ICU and V8 Library Paths\nDESCRIPTION: This snippet establishes the paths for the ICU and V8 libraries after build, defining debug and release versions. It sets the libraries to be cached internally for reuse in the CMake context.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/v8-build/CMakeLists.txt#2025-04-22_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nset(ICU_LIBRARY_DEBUG   \"${CMAKE_CURRENT_BINARY_DIR}/${V8_SUB_DIR}/third_party/icu/Debug\")\n  set(ICU_LIBRARY_RELEASE \"${CMAKE_CURRENT_BINARY_DIR}/${V8_SUB_DIR}/third_party/icu/Release\")\n\n  set(ICU_LIBS\n    debug \"${ICU_LIBRARY_DEBUG}/lib/icui18n.lib\"\n    optimized \"${ICU_LIBRARY_RELEASE}/lib/icui18n.lib\"\n    debug \"${ICU_LIBRARY_DEBUG}/lib/icuucx.lib\"\n    optimized \"${ICU_LIBRARY_RELEASE}/lib/icuucx.lib\"\n    debug \"${ICU_LIBRARY_DEBUG}/lib/icustubdata.lib\"\n    optimized \"${ICU_LIBRARY_RELEASE}/lib/icustubdata.lib\"\n    CACHE INTERNAL\n    \"ICU: Libraries\"\n    FORCE\n  )\n```\n\n----------------------------------------\n\nTITLE: Using BOOST_PARAMETER_NO_SPEC_CONST_MEMBER_FUNCTION for Value Category Testing\nDESCRIPTION: Demonstrates using BOOST_PARAMETER_NO_SPEC_CONST_MEMBER_FUNCTION to create a const member function that tests the value categories of passed parameters.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_81\n\nLANGUAGE: C++\nCODE:\n```\nstruct D\n{\n    D()\n    {\n    }\n\n    BOOST_PARAMETER_NO_SPEC_CONST_MEMBER_FUNCTION((bool), evaluate_m)\n    {\n        BOOST_TEST_EQ(\n            passed_by_lvalue_reference_to_const\n          , U::evaluate_category<0>(args[_lrc])\n        );\n        BOOST_TEST_EQ(\n            passed_by_lvalue_reference\n          , U::evaluate_category<1>(args[_lr])\n        );\n        BOOST_TEST_EQ(\n            passed_by_rvalue_reference_to_const\n          , U::evaluate_category<2>(\n                args[_rrc | rvalue_const_bitset<2>()]\n            )\n        );\n        BOOST_TEST_EQ(\n            passed_by_rvalue_reference\n          , U::evaluate_category<3>(\n                args[_rr | rvalue_bitset<3>()]\n            )\n        );\n\n        return true;\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Declaring Static Variable for Combine Function in C++\nDESCRIPTION: Creates a static variable 'combine' using the BOOST_HOF_DECLARE_STATIC_VAR macro to make the combine adaptor available as a function object.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/combine.hpp.txt#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_HOF_DECLARE_STATIC_VAR(combine, detail::make<combine_adaptor>);\n```\n\n----------------------------------------\n\nTITLE: Processing Incoming Messages in C++\nDESCRIPTION: Allows a process group to receive and process incoming messages during long-running computations\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/process_group.rst#2025-04-22_snippet_8\n\nLANGUAGE: C++\nCODE:\n```\nvoid poll();\n```\n\n----------------------------------------\n\nTITLE: Declaring reverse_fold Template in C++\nDESCRIPTION: Defines the template structure for the reverse_fold algorithm. It takes a Sequence, State, BackwardOp, and optional ForwardOp as template parameters.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/reverse_fold.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      typename Sequence\n    , typename State\n    , typename BackwardOp\n    , typename ForwardOp = _1\n    >\nstruct reverse_fold\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Using or_ Metafunction in C++ Assertions\nDESCRIPTION: Demonstrates how to use the or_ metafunction in C++ code with various boolean combinations and the BOOST_MPL_ASSERT macro.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/or_.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nstruct unknown;\n\nBOOST_MPL_ASSERT(( or_< true_,true_ > ));\nBOOST_MPL_ASSERT(( or_< false_,true_ > ));\nBOOST_MPL_ASSERT(( or_< true_,false_ > ));\nBOOST_MPL_ASSERT_NOT(( or_< false_,false_ > ));\nBOOST_MPL_ASSERT(( or_< true_,unknown > )); // OK\nBOOST_MPL_ASSERT(( or_< true_,unknown,unknown > )); // OK too\n```\n\n----------------------------------------\n\nTITLE: Iterating through Image Scanlines in C++\nDESCRIPTION: This C++ code snippet demonstrates iterating through image scanlines using iterators. It shows how to access scanline data using `x_iterator` and perform operations on subimage views. The code reads image data scanline by scanline, copies parts of it and writes to another image.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/io.rst#2025-04-22_snippet_7\n\nLANGUAGE: c++\nCODE:\n```\n\t\t\t\t\t\t, ( image_t::view_t::x_iterator ) *it\n                                        , reader._scanline_length\n                                        )\n                    , subimage_view( view( dst )\n                                    , 0\n                                    , row\n                                    , reader._info._width\n                                    , 1\n                                    )\n                    );\n```\n\n----------------------------------------\n\nTITLE: Implementing MetafunctionTemplate-Based Construction in C++\nDESCRIPTION: A function object for constructing objects using metafunction templates. It applies a MetafunctionTemplate to deduce the result type from the arguments, then constructs an object of that type.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/construct.hpp.txt#2025-04-22_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<template<class...> class MetafunctionTemplate>\nstruct construct_meta_template_f\n{\n    constexpr construct_meta_template_f() noexcept\n    {}\n    template<class... Ts, \n        class Metafunction=BOOST_HOF_JOIN(MetafunctionTemplate, Ts...), \n        class Result=typename Metafunction::type, \n        BOOST_HOF_ENABLE_IF_CONSTRUCTIBLE(Result, Ts...)>\n    constexpr Result operator()(Ts&&... xs) const BOOST_HOF_NOEXCEPT_CONSTRUCTIBLE(Result, Ts&&...)\n    {\n        return construct_f<Result>()(BOOST_HOF_FORWARD(Ts)(xs)...);\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Adding arango_storage_engine_common Static Library - CMake\nDESCRIPTION: Defines the arango_storage_engine_common static library in CMake, including its source files and linking it with dependencies. It also specifies include directories that are necessary for its compilation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/StorageEngine/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# arango_storage_engine uses arango_rocksdb.\n# In turn, arango_storage_engine_common provides something for both.\nadd_library(arango_storage_engine_common STATIC\n  ReplicationIterator.cpp\n  WalAccess.cpp)\ntarget_link_libraries(arango_storage_engine_common\n  arango::validation\n  arango_replication2\n  immer)\ntarget_include_directories(arango_storage_engine_common PRIVATE\n  \"${PROJECT_SOURCE_DIR}/arangod\"\n  \"${PROJECT_SOURCE_DIR}/${ENTERPRISE_INCLUDE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video in Documentation using HTML\nDESCRIPTION: This snippet embeds a YouTube video lecture about GIL using HTML. The video is integrated using an iframe tag, which sets the dimensions and source of the video. Permissions are set to disallow autoplay and encrypted media playback. The snippet ensures the video can be played directly in the documentation without external navigation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/tutorial/video.rst#2025-04-22_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div style=\"position: relative; overflow: hidden; max-width: 100%; height: auto;\">\n    <iframe width=\"800\" height=\"450\" src=\"https://www.youtube.com/embed/sR8Wjg0pceE?rel=0\" frameborder=\"0\" allow=\"autoplay=false; encrypted-media\" allowfullscreen></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Compiler Settings for Different Compilers\nDESCRIPTION: Detects the compiler being used (GNU, MSVC, or AppleClang) and sets appropriate compiler flags and definitions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/serialization/CMake/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif( CMAKE_CXX_COMPILER_ID STREQUAL \"GNU\" )\n  add_definitions( -ftemplate-depth=255 )\n  add_definitions( -std=c++03 )\n  set(COMPILER_SUPPORTS_CXX11 FALSE)\nelseif( CMAKE_CXX_COMPILER_ID STREQUAL \"MSVC\" )\n  add_definitions( /wd4996 )\n  set(COMPILER_SUPPORTS_CXX11 TRUE)\nelseif( CMAKE_CXX_COMPILER_ID STREQUAL \"AppleClang\" )\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -ftemplate-depth=300\")\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -std=c++03\")\n  set(CMAKE_CXX_FLAGS_DEBUG \"-g -O0\" )\n  set(CMAKE_CXX_FLAGS_RELWITHDEBINFO \"-g -O3\" )\n  set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -stdlib=libc++ -dead_strip\")\n  set(COMPILER_SUPPORTS_CXX11 FALSE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining a Foreign Expected-like Type\nDESCRIPTION: Implementation of a non-standard pseudo-Expected type that will be made compatible with BOOST_OUTCOME_TRY. It includes nested success/failure types and domain-specific error handling.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/recipes/foreign-try.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nnamespace foreign_namespace\n{\n  struct result\n  {\n    struct success\n    {\n      explicit success(int v) : _v(v) {}\n      int value() const { return _v; }\n    private:\n      int _v;\n    };\n    struct failure\n    {\n      explicit failure(const char *e) : _e(e) {}\n      const char *error() const { return _e; }\n    private:\n      const char *_e;\n    };\n    \n    result() = delete;\n    result(success s) : _state(1), _s(s) {}\n    result(failure f) : _state(2), _f(f) {}\n    \n    bool has_success() const { return _state == 1; }\n    explicit operator bool() const { return has_success(); }\n    bool has_failure() const { return _state == 2; }\n    \n    // NOTE: UB if not success, failure\n    const success &get_success() const & { return _s; }\n    success &&get_success() && { return static_cast<success &&>(_s); }\n    const failure &get_failure() const & { return _f; }\n    failure &&get_failure() && { return static_cast<failure &&>(_f); }\n    \n  private:\n    int _state;\n    union\n    {\n      success _s;\n      failure _f;\n    };\n  };\n  \n  inline result old_code(int i)\n  {\n    if(i != 0) return result::success(i);\n    return result::failure(\"argument out of domain\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Variance for Bernoulli Sampling Per-Allocation in LaTeX\nDESCRIPTION: This LaTeX snippet shows the calculation of variance for Bernoulli sampling per allocation. It simplifies the general variance formula for this specific sampling strategy.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/jemalloc/jemalloc/doc_internal/PROFILING_INTERNALS.md#2025-04-22_snippet_2\n\nLANGUAGE: latex\nCODE:\n```\n$$ \\sum_i S_i^2 \\frac{1 - \\frac{1}{N}}{\\frac{1}{N}}  = (N-1) \\sum_i S_i^2.$$\n```\n\n----------------------------------------\n\nTITLE: Setting Local Value in Distributed Property Map in C++\nDESCRIPTION: Function to update a value in a distributed property map without sending messages to remote processes.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/distributed_property_map.rst#2025-04-22_snippet_11\n\nLANGUAGE: cpp\nCODE:\n```\nvoid\nlocal_put(distributed_property_map pm, const key_type& key, const value_type& value);\n```\n\n----------------------------------------\n\nTITLE: Defining Gradient Function Interface using GIL\nDESCRIPTION: This code snippet defines the interface for computing the x gradient of an image in GIL. It asserts that the dimensions of the source and destination images match, thus ensuring valid input.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/tutorial/gradient.rst.txt#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n#include <boost/gil.hpp>\nusing namespace boost::gil;\n\nvoid x_gradient(gray8c_view_t const& src, gray8s_view_t const& dst)\n{\n    assert(src.dimensions() == dst.dimensions());\n    ...    // compute the gradient\n}\n```\n\n----------------------------------------\n\nTITLE: Boost Log Library Target Configuration\nDESCRIPTION: Defines the main Boost Log library target, configures its include directories, and sets up library dependencies including required Boost components and platform-specific libraries.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/log/CMakeLists.txt#2025-04-22_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(boost_log\n    ${boost_log_sources}\n    ${boost_log_sources_ssse3}\n    ${boost_log_sources_avx2}\n)\ntarget_include_directories(boost_log\n    PUBLIC\n        include\n    PRIVATE\n        src\n        \"${CMAKE_CURRENT_BINARY_DIR}/src\"\n)\ntarget_link_libraries(boost_log\n    PUBLIC\n        Boost::array\n        Boost::assert\n        Boost::config\n        # ... other dependencies\n)\n```\n\n----------------------------------------\n\nTITLE: Implicit Failure Type Move Constructor in C++\nDESCRIPTION: A move constructor that enables construction of error and exception types from a failure type, with strict type compatibility requirements. Calls an internal move construction handler and requires compile-time type conversion validation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/basic_outcome/implicit_failure_error_exception_move_constructor.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nbasic_outcome(failure_type<EC, EP> &&)\n```\n\n----------------------------------------\n\nTITLE: Implementing Pipe Closure in C++\nDESCRIPTION: Defines a pipe_closure structure that combines a function and a parameter pack. It provides the core functionality for piping operations, including invoking the function with piped arguments.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/pipable.hpp.txt#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<class F, class Pack>\nstruct pipe_closure : F, Pack\n{\n    template<class X, class P>\n    constexpr pipe_closure(X&& fp, P&& packp) \n    BOOST_HOF_NOEXCEPT(BOOST_HOF_IS_NOTHROW_CONSTRUCTIBLE(F, X&&) && BOOST_HOF_IS_NOTHROW_CONSTRUCTIBLE(Pack, P&&))\n    : F(BOOST_HOF_FORWARD(X)(fp)), Pack(BOOST_HOF_FORWARD(P)(packp))\n    {}\n\n    template<class... Ts>\n    constexpr const F& base_function(Ts&&...) const noexcept\n    {\n        return *this;\n    }\n\n    template<class... Ts>\n    constexpr const Pack& get_pack(Ts&&...) const noexcept\n    {\n        return *this;\n    }\n\n    // ... (additional nested structures and methods)\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Up Boost Thread Library Target and Dependencies\nDESCRIPTION: Creates the library target, sets up include directories, and configures dependencies. Links against many other Boost libraries and the system threading library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/thread/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(boost_thread ${THREAD_SOURCES})\n\nadd_library(Boost::thread ALIAS boost_thread)\n\ntarget_include_directories(boost_thread PUBLIC include)\n\ntarget_link_libraries(boost_thread\n  PUBLIC\n    Boost::assert\n    Boost::atomic\n    Boost::bind\n    Boost::chrono\n    Boost::concept_check\n    Boost::config\n    Boost::container\n    Boost::container_hash\n    Boost::core\n    Boost::date_time\n    Boost::exception\n    Boost::function\n    Boost::intrusive\n    Boost::io\n    Boost::iterator\n    Boost::move\n    Boost::optional\n    Boost::predef\n    Boost::preprocessor\n    Boost::smart_ptr\n    Boost::static_assert\n    Boost::system\n    Boost::throw_exception\n    Boost::tuple\n    Boost::type_traits\n    Boost::utility\n    Boost::winapi\n\n    Threads::Threads\n\n  PRIVATE\n    Boost::algorithm\n    Boost::lexical_cast\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Extended Non-Distributed Betweenness Centrality in C++\nDESCRIPTION: This variant of the betweenness centrality function template includes additional parameters for edge centrality maps and expands the ability to customize various data structures used during the algorithm's execution, enhancing its versatility.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/non_distributed_betweenness_centrality.rst#2025-04-22_snippet_2\n\nLANGUAGE: c++\nCODE:\n```\ntemplate<typename ProcessGroup, typename Graph, typename CentralityMap, \n           typename EdgeCentralityMap, typename Buffer>\nvoid \nnon_distributed_brandes_betweenness_centrality(const ProcessGroup& pg, const Graph& g, \n                                                 CentralityMap centrality,\n                                                 EdgeCentralityMap edge_centrality_map, \n                                                 Buffer sources);\n```\n\n----------------------------------------\n\nTITLE: Creating Boost Log with Support Dependencies Interface Library in CMake\nDESCRIPTION: Creates an interface library named boost_log_with_support that includes Boost::log and additional support dependencies. This provides a convenient target for including the log library with all its optional dependencies.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/log/CMakeLists.txt#2025-04-22_snippet_17\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(boost_log_with_support INTERFACE)\nadd_library(Boost::log_with_support ALIAS boost_log_with_support)\n\ntarget_link_libraries(boost_log_with_support\n    INTERFACE\n        Boost::log\n\n        Boost::exception\n        Boost::regex\n        Boost::spirit\n        Boost::xpressive\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Infix Operators with Boost.HigherOrderFunctions in C++\nDESCRIPTION: Illustrates how to create named infix operators using the infix adaptor from Boost.HigherOrderFunctions, providing a more readable syntax for binary operations.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/src/gettingstarted.md#2025-04-22_snippet_7\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_HOF_STATIC_FUNCTION(sum) = infix(sum_f());\n\nauto three = 1 <sum> 2;\n```\n\n----------------------------------------\n\nTITLE: Boruvka-then-Merge MST Algorithm Declaration\nDESCRIPTION: These are the function declarations for the Boruvka-then-merge minimum spanning tree algorithm. It's a hybrid approach combining Boruvka's algorithm with a merging strategy. Overloads are provided to allow for optional parameters like VertexIndexMap, RankMap, ParentMap, and SupervertexMap.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/dehne_gotz_min_spanning_tree.rst#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nnamespace graph {\n    template<typename Graph, typename WeightMap, typename OutputIterator,\n             typename VertexIndexMap, typename RankMap, typename ParentMap,\n             typename SupervertexMap>\n    OutputIterator\n    boruvka_then_merge(const Graph& g, WeightMap weight, OutputIterator out,\n                       VertexIndexMap index, RankMap rank_map, \n                       ParentMap parent_map, SupervertexMap\n                       supervertex_map);\n\n    template<typename Graph, typename WeightMap, typename OutputIterator,\n             typename VertexIndexMap>\n    inline OutputIterator\n    boruvka_then_merge(const Graph& g, WeightMap weight, OutputIterator out,\n                        VertexIndexMap index);\n\n    template<typename Graph, typename WeightMap, typename OutputIterator>\n    inline OutputIterator\n```\n\n----------------------------------------\n\nTITLE: Swap Method for Reversible Pointer Container in C++\nDESCRIPTION: This method swaps the contents of two reversible pointer containers, ensuring that data integrity is maintained and no exceptions are thrown during the swap operation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/reversible_ptr_container.rst#2025-04-22_snippet_13\n\nLANGUAGE: C++\nCODE:\n```\nvoid swap( reversible_ptr_container& r );\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: This snippet sets the include directories for the `boost_endian` library.  It specifies that the `include` directory should be used as an interface include directory, meaning that dependent targets will automatically have this directory added to their include paths.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/endian/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n\"target_include_directories(boost_endian INTERFACE include)\"\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Specific Arangod Instance\nDESCRIPTION: This snippet shows how to run tests with a previously started arangod instance instead of launching a new one. It specifies the server's TCP address.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/CONTRIBUTING.md#2025-04-22_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/unittest shell_client --server tcp://127.0.0.1:8529/\n```\n\n----------------------------------------\n\nTITLE: Using pop_back Metafunction in C++\nDESCRIPTION: Demonstrates the usage of pop_back metafunction with different vector types. It shows how to remove the last element from vectors of various sizes and assert the results.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/pop_back.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntypedef vector<long>::type types1;\ntypedef vector<long,int>::type types2;\ntypedef vector<long,int,char>::type types3;\n\ntypedef pop_back<types1>::type result1;\ntypedef pop_back<types2>::type result2;\ntypedef pop_back<types3>::type result3;\n    \nBOOST_MPL_ASSERT_RELATION( size<result1>::value, ==, 0 );\nBOOST_MPL_ASSERT_RELATION( size<result2>::value, ==, 1 );\nBOOST_MPL_ASSERT_RELATION( size<result3>::value, ==, 2 );\n    \nBOOST_MPL_ASSERT(( is_same< back<result2>::type, long> ));\nBOOST_MPL_ASSERT(( is_same< back<result3>::type, int > ));\n```\n\n----------------------------------------\n\nTITLE: Defining Parameter Grammar and Restrictions in C++\nDESCRIPTION: Specifies the grammar for defining parameters and restrictions in Boost Parameter Library, including argument naming, type specifications, and metafunction classes.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_47\n\nLANGUAGE: cpp\nCODE:\n```\n        ) | (\n            '**(**' '**required**'\n                *specifier* {*specifier*\\ }\n            '**)**'\n        )\n\n    specifier ::=\n        '**(**' *argument-name* '**,**' *restriction* ')'\n\n    restriction ::=\n        ( '**\\***' '**(**' *mfc* '**)**' ) |\n        ( '**(**' *type-name* '**)**' ) |\n        '**\\***'\n```\n\n----------------------------------------\n\nTITLE: Defining the not_ Metafunction Template in C++\nDESCRIPTION: This code snippet defines the template structure for the not_ metafunction. It takes a single template parameter F and defines an internal type that represents the result of the logical NOT operation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/not_.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate< \n    typename F\n>\nstruct not_\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: V8 Abseil Library Removal Patch\nDESCRIPTION: Patch to remove dependency on abseil library, allowing ArangoDB to use its own version\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/v8-build/README.md#2025-04-22_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\ndiff --git a\\/src\\/zone\\/zone-containers.h b\\/src\\/zone\\/zone-containers.h\\nindex 1238ab2b..1dba0409 100644\\n--- a\\/src\\/zone\\/zone-containers.h\\n+++ b\\/src\\/zone\\/zone-containers.h\\n@@ -17,8 +17,8 @@\\n #include <unordered_map>\\n #include <unordered_set>\\n\\n-#include \"absl\\/container\\/flat_hash_map.h\"\\n-#include \"absl\\/container\\/flat_hash_set.h\"\\n+\\/\\/#include \"absl\\/container\\/flat_hash_map.h\"\\n+\\/\\/#include \"absl\\/container\\/flat_hash_set.h\"\n```\n\n----------------------------------------\n\nTITLE: Using has_key Metafunction in C++\nDESCRIPTION: Demonstrates the usage of has_key metafunction with a map of pairs. It checks for the presence of keys in the original map and in a modified version with an inserted key-value pair.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/has_key.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntypedef map< pair<int,unsigned>, pair<char,long> > m;\nBOOST_MPL_ASSERT_NOT(( has_key<m,long> ));\n\ntypedef insert< m, pair<long,unsigned long> > m1;\nBOOST_MPL_ASSERT(( has_key<m1,long> ));\n```\n\n----------------------------------------\n\nTITLE: Creating ndarrays from data arrays in C++\nDESCRIPTION: This code snippet showcases creating an ndarray using data pointers, specifying shape, strides, and an owner in C++. The shape and strides determine the memory layout. The snippet includes error handling for mismatched shape and stride values.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/doc/numpy/tutorial/ndarray.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nint data[] = {1, 2, 3, 4, 5};\\np::tuple shape = p::make_tuple(5);\\np::tuple stride = p::make_tuple(sizeof(int));\\np::object own;\\nnp::ndarray data_ex1 = np::from_data(data, dt, shape, stride, own);\n```\n\nLANGUAGE: C++\nCODE:\n```\nstd::cout << \"Single dimensional array ::\" << std::endl\\n          << p::extract<char const *>(p::str(data_ex)) << std::endl;\n```\n\n----------------------------------------\n\nTITLE: Composing Argument Packs using the Comma Operator\nDESCRIPTION: This example demonstrates how to compose ArgumentPacks using the comma operator. The parentheses are used to group the composed arguments into a single argument pack for the function call.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/index.rst#2025-04-22_snippet_37\n\nLANGUAGE: cpp\nCODE:\n```\nBOOST_PARAMETER_NAME(name)\n\ntemplate <typename ArgumentPack>\nint print_name_and_index(ArgumentPack const& args)\n{\n    std::cout << \"name = \" << args[_name];\n    std::cout << \"; \";\n    return print_index(args);\n}\n\nint y = print_name_and_index((_index = 3, _name = \"jones\"));\n```\n\n----------------------------------------\n\nTITLE: Procedure for Adding New Algorithms to Documentation\nDESCRIPTION: This snippet provides detailed steps necessary for integrating new algorithms into the documentation system, ensuring proper grouping and inclusion in various related files.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/geometry/doc/readme.txt#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nPer new algorithm (e.g. foo), one should add:\n1) in file boost/geometry/algorithms/foo.hpp, include a \"\\ingroup foo\" in the doxygen comments\n2) in file doc/doxy/doxygen_input/groups/groups.hpp, define the group \"foo\"\n3) in file doc/make_qbk.py, include the algorithm \"foo\"\n4) in file doc/reference.qbk, include the foo.qbk ([include generated/foo.qbk])\n5) in file doc/quickref.xml, include a section on foo conform other sections\n6) in file doc/src/docutils/tools/support_status/support_status.cpp include the algorithm (3 places) (optionally)\n7) in file doc/reference/foo.qbk (to be created), include the support status and write other text, and include examples (optionally)\n8) in file doc/imports.qbk, include the example foo.cpp (if any)\n9) create file doc/src/examples/algorithm/foo.cpp (optional)\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost.Nowide Project in CMake\nDESCRIPTION: Sets up the main CMake project configuration for Boost.Nowide library with version information and language requirements.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/nowide/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.9)\n# Version number starts at 10 to avoid conflicts with Boost version\nset(_version 11.1.3)\nif(BOOST_SUPERPROJECT_SOURCE_DIR)\n  set(_version ${BOOST_SUPERPROJECT_VERSION})\nendif()\nproject(boost_nowide VERSION ${_version} LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost Intrusive Library with CMake\nDESCRIPTION: This CMake script sets up the Boost Intrusive library as an interface library. It specifies the minimum CMake version, project details, and library dependencies. The script creates a target for the library and aliases it to Boost::intrusive.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/intrusive/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required( VERSION 3.5...3.20 )\n\nproject( boost_intrusive VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX )\n\nadd_library( boost_intrusive INTERFACE )\nadd_library( Boost::intrusive ALIAS boost_intrusive )\n\ntarget_include_directories( boost_intrusive INTERFACE include )\n\ntarget_link_libraries( boost_intrusive\n    INTERFACE\n        Boost::assert\n        Boost::config\n        Boost::container_hash\n        Boost::core\n        Boost::move\n        Boost::static_assert\n)\n```\n\n----------------------------------------\n\nTITLE: Using BOOST_OUTCOME_CO_TRY() in C++\nDESCRIPTION: This snippet suggests utilizing 'BOOST_OUTCOME_CO_TRY()' for handling coroutines effectively, as it helps maintain code readability and future compatibility. It's recommended to avoid custom implementations unless necessary and to document them properly.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/tutorial/essential/coroutines/co_await.md#2025-04-22_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Accessing an Exposed Data Member in Python\nDESCRIPTION: Python code showing how to access a C++ class data member that has been exposed as a Python attribute.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/doc/article.rst#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n>>> planet = hello.World('howdy')\n>>> planet.msg\n'howdy'\n```\n\n----------------------------------------\n\nTITLE: Handling Platform-Specific ssize_t Type\nDESCRIPTION: Checks for ssize_t type size and defines it as int if not available on the platform, matching POSIX behavior.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/fuerte/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(CheckTypeSize)\ncheck_type_size(\"ssize_t\" SIZEOF_SSIZE_T)\nif(SIZEOF_SSIZE_T STREQUAL \"\")\n  target_compile_definitions(fuerte PRIVATE ssize_t=int)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Explicit Converting Move Constructor in C++\nDESCRIPTION: This snippet defines an explicit converting move constructor for the `basic_result` class template, enabling conversion from compatible types when a specific predicate condition is met. It ensures that underlying operations' exception guarantees are maintained while propagating noexcept and triviality.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/basic_outcome/explicit_result_move_converting_constructor.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n+++\ntitle = \"\\\"explicit basic_outcome(basic_result<A, B, C> &&)\\\"\"\ndescription = \"Explicit converting move constructor from compatible `basic_result`. Available if `predicate::enable_compatible_conversion<A, B, void, C>` is true. Constexpr, triviality and noexcept propagating.\"\ncategories = [\"constructors\", \"explicit-constructors\", \"converting-constructors\"]\nweight = 340\n+++\n\nExplicit converting move constructor from compatible `basic_result`. Calls {{% api \"void on_outcome_move_construction(T *, U &&) noexcept\" %}} with `this` and the input.\n\n*Requires*: `predicate::enable_compatible_conversion<A, B, void, C>` is true.\n\n*Complexity*: Same as for the move constructors of the underlying types. Constexpr, triviality and noexcept of underlying operations is propagated.\n\n*Guarantees*: If an exception is thrown during the operation, the object is left in a partially completed state, as per the normal rules for the same operation on a `struct`.\n```\n\n----------------------------------------\n\nTITLE: Implementing Projection Adaptor in C++\nDESCRIPTION: Defines the main 'proj_adaptor' template structure which adapts a projection to a function. It inherits from a compressed pair of callable bases and implements the function call operator to apply the projection before calling the adapted function.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/proj.hpp.txt#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<class Projection, class F>\nstruct proj_adaptor : detail::compressed_pair<detail::callable_base<Projection>, detail::callable_base<F>>, detail::function_result_type<F>\n{\n    typedef proj_adaptor fit_rewritable_tag;\n    typedef detail::compressed_pair<detail::callable_base<Projection>, detail::callable_base<F>> base;\n    template<class... Ts>\n    constexpr const detail::callable_base<F>& base_function(Ts&&... xs) const\n    {\n        return this->second(xs...);;\n    }\n\n    template<class... Ts>\n    constexpr const detail::callable_base<Projection>& base_projection(Ts&&... xs) const\n    {\n        return this->first(xs...);\n    }\n\n    // ... (additional members)\n\n    template<class... Ts>\n    constexpr BOOST_HOF_SFINAE_RESULT(const detail::callable_base<F>&, result_of<const detail::callable_base<Projection>&, id_<Ts>>...) \n    operator()(Ts&&... xs) const BOOST_HOF_SFINAE_RETURNS\n    (\n        boost::hof::detail::by_eval(\n            BOOST_HOF_MANGLE_CAST(const detail::callable_base<Projection>&)(BOOST_HOF_CONST_THIS->base_projection(xs...)),\n            BOOST_HOF_MANGLE_CAST(const detail::callable_base<F>&)(BOOST_HOF_CONST_THIS->base_function(xs...)),\n            BOOST_HOF_FORWARD(Ts)(xs)...\n        )\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining String for Stemming Algorithm\nDESCRIPTION: This snippet shows how to define a string with the U+ notation for non-ASCII character representation in stemming algorithms. It emphasizes avoiding direct non-ASCII characters and using string definitions for compatibility with various encodings.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/snowball/CONTRIBUTING.rst#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nstringdef o\" {U+00F6}\ndefine foo 'o{o\"}'\n```\n\n----------------------------------------\n\nTITLE: Implementing Random Access Iterator Addition in C++\nDESCRIPTION: This code snippet demonstrates the operational semantics for the '+=' operator in a Random Access Traversal iterator. It shows how to implement forward and backward traversal based on the sign of the distance.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/RandomAccessTraversal.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n{\n  Distance m = n;\n  if (m >= 0)\n    while (m--)\n      ++r;\n  else\n    while (m++)\n      --r;\n  return r;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Collator Facet for String Comparison in C++\nDESCRIPTION: Demonstrates how to use the collator facet directly to compare two strings at the secondary level. This example checks if 'Façade' and 'facade' are considered identical when ignoring case but considering accents.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/doc/collation.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nwstring a=L\"Façade\", b=L\"facade\";\nbool eq = 0 == use_facet<collator<wchar_t> >(loc).compare(collator_base::secondary,a,b);\nwcout << a <<L\" and \"<<b<<L\" are \" << (eq ? L\"identical\" : L\"different\")<<endl;\n```\n\n----------------------------------------\n\nTITLE: Defining MutableFunctionObject Concept in C++\nDESCRIPTION: This code snippet defines the MutableFunctionObject concept, which represents an object with a mutable call operator that can accept any number of arguments.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/src/concepts.md#2025-04-22_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\nconcept MutableFunctionObject\n{\n    template<class... Ts>\n    auto operator()(Ts&&...);\n};\n```\n\n----------------------------------------\n\nTITLE: Auto Pointer Parameter Implementation in C++\nDESCRIPTION: Concrete implementation of push_back that accepts std::auto_ptr, available in C++98/03/11/14.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/compatible_smart_ptr.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nvoid container::push_back( std::auto_ptr<T> );\n```\n\n----------------------------------------\n\nTITLE: Configuring SIMD-Optimized Source Files for Boost.Log\nDESCRIPTION: Sets up SIMD-optimized source files with appropriate compiler flags when the detected architecture and compiler support them. This enables hardware-accelerated operations for Boost.Log binary data processing.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/log/CMakeLists.txt#2025-04-22_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nif (BOOST_LOG_COMPILER_HAS_SSSE3)\n    set(boost_log_sources_ssse3 src/dump_ssse3.cpp)\n    set_source_files_properties(${boost_log_sources_ssse3} PROPERTIES COMPILE_FLAGS \"${boost_log_ssse3_cflags}\")\n    list(APPEND boost_log_private_defines BOOST_LOG_USE_SSSE3)\nendif()\nif (BOOST_LOG_COMPILER_HAS_AVX2)\n    set(boost_log_sources_avx2 src/dump_avx2.cpp)\n    set_source_files_properties(${boost_log_sources_avx2} PROPERTIES COMPILE_FLAGS \"${boost_log_avx2_cflags}\")\n    list(APPEND boost_log_private_defines BOOST_LOG_USE_AVX2)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Initializing Graph Traverser Cache Sources in CMake\nDESCRIPTION: This snippet configures the initialization of source files related to graph traverser cache components in ArangoDB using CMake. The target_sources command specifies source files that are part of the arango_graph library. Necessary dependencies include having a CMake build environment. The expected inputs are CMakeLists.txt configuration files, and the output is a correctly set up build environment including the graph traverser cache components.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/Graph/Cache/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(arango_graph PRIVATE\n  RefactoredTraverserCache.cpp\n  RefactoredClusterTraverserCache.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost Log Setup Library with Parser Support in CMake\nDESCRIPTION: Configures the boost_log_setup library with parser support enabled, setting up source files, dependencies, include paths, compile definitions, and link flags. This conditional block executes when settings parsers are enabled.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/log/CMakeLists.txt#2025-04-22_snippet_19\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT BOOST_LOG_WITHOUT_SETTINGS_PARSERS)\n    set(boost_log_setup_sources\n        src/setup/parser_utils.hpp\n        src/setup/parser_utils.cpp\n        src/setup/init_from_stream.cpp\n        src/setup/init_from_settings.cpp\n        src/setup/settings_parser.cpp\n        src/setup/filter_parser.cpp\n        src/setup/formatter_parser.cpp\n    )\n\n    if (NOT BOOST_LOG_WITHOUT_DEFAULT_FACTORIES)\n        list(APPEND boost_log_setup_sources\n            src/setup/default_filter_factory.hpp\n            src/setup/default_filter_factory.cpp\n            src/setup/matches_relation_factory.cpp\n            src/setup/default_formatter_factory.hpp\n            src/setup/default_formatter_factory.cpp\n        )\n    endif()\n\n    add_library(boost_log_setup ${boost_log_setup_sources})\n    if (BOOST_SUPERPROJECT_VERSION)\n        set_target_properties(boost_log_setup PROPERTIES VERSION \"${BOOST_SUPERPROJECT_VERSION}\")\n    endif()\n    list(APPEND boost_log_install_targets boost_log_setup)\n\n    target_include_directories(boost_log_setup\n        PUBLIC\n            include\n        PRIVATE\n            src\n    )\n\n    target_link_libraries(boost_log_setup\n        PUBLIC\n            ${boost_log_setup_public_deps}\n\n        PRIVATE\n            Boost::asio\n            Boost::bind\n            Boost::date_time\n            Boost::exception\n            Boost::filesystem\n            Boost::io\n            Boost::spirit\n            Boost::throw_exception\n            Boost::utility\n    )\n\n    if (NOT BOOST_LOG_WITHOUT_DEFAULT_FACTORIES)\n        target_link_libraries(boost_log_setup\n            PRIVATE\n                Boost::fusion\n                Boost::mpl\n                ${boost_log_regex_backend_private_libs}\n        )\n    endif()\n\n    target_compile_definitions(boost_log_setup\n        PUBLIC\n            ${boost_log_common_public_defines}\n        PRIVATE\n            ${boost_log_common_private_defines}\n            ${boost_log_setup_private_defines}\n    )\n\n    target_compile_options(boost_log_setup\n        PRIVATE\n            ${boost_log_common_private_cxxflags}\n    )\n\n    target_link_libraries(boost_log_setup\n        PRIVATE\n            ${boost_log_common_private_linkflags}\n    )\nelse()\n    add_library(boost_log_setup INTERFACE)\n    target_include_directories(boost_log_setup INTERFACE include)\n    target_compile_definitions(boost_log_setup INTERFACE ${boost_log_common_public_defines})\n    target_link_libraries(boost_log_setup INTERFACE ${boost_log_setup_public_deps})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building and Running Tests\nDESCRIPTION: Shell commands for creating a build directory, configuring with CMake, and running project tests to ensure modifications do not break existing functionality\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hana/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmkdir build\ncd build\ncmake ..\ncmake --build . --target check\n```\n\n----------------------------------------\n\nTITLE: Declaration of boost_outcome Template Alias with Boost Error Types\nDESCRIPTION: A type alias template that configures basic_outcome with boost::system::error_code, boost::exception_ptr and the default policy. Unlike the generic outcome<T> alias, this always uses Boost's error types.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/aliases/boost_outcome.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nboost_outcome<T, EC = boost::system::error_code, EP = boost::exception_ptr, NoValuePolicy = policy::default_policy<T, EC, EP>>\n```\n\n----------------------------------------\n\nTITLE: Implementing Stateless Reverse Fold Adaptor in C++\nDESCRIPTION: Specialized implementation of the reverse fold adaptor for cases where no initial state is provided. Uses the first argument as the initial state.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/reverse_fold.hpp.txt#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<class F>\nstruct reverse_fold_adaptor<F, void>\n: detail::callable_base<F>\n{\n    BOOST_HOF_INHERIT_CONSTRUCTOR(reverse_fold_adaptor, detail::callable_base<F>)\n\n    template<class... Ts>\n    constexpr const detail::callable_base<F>& base_function(Ts&&... xs) const noexcept\n    {\n        return boost::hof::always_ref(*this)(xs...);\n    }\n\n    BOOST_HOF_RETURNS_CLASS(reverse_fold_adaptor);\n\n    template<class... Ts>\n    constexpr BOOST_HOF_SFINAE_RESULT(detail::v_reverse_fold, id_<const detail::callable_base<F>&>, id_<Ts>...)\n    operator()(Ts&&... xs) const BOOST_HOF_SFINAE_RETURNS\n    (\n        detail::v_reverse_fold()(\n            BOOST_HOF_MANGLE_CAST(const detail::callable_base<F>&)(BOOST_HOF_CONST_THIS->base_function(xs...)), \n            BOOST_HOF_FORWARD(Ts)(xs)...\n        )\n    )\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL WebSocket Client Build in CMake\nDESCRIPTION: CMake script that sets up build configuration for a synchronous SSL WebSocket client. Groups source files, creates executable target, and links required SSL and networking libraries. Only executes if OpenSSL is available in the build environment.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/beast/example/websocket/client/sync-ssl/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif (OPENSSL_FOUND)\n    GroupSources(include/boost/beast beast)\n    GroupSources(example/common common)\n    GroupSources(example/websocket/client/sync-ssl \"/\")\n\n    add_executable (websocket-client-sync-ssl\n        ${BOOST_BEAST_FILES}\n        ${PROJECT_SOURCE_DIR}/example/common/root_certificates.hpp\n        Jamfile\n        websocket_client_sync_ssl.cpp\n    )\n\n    set_property(TARGET websocket-client-sync-ssl PROPERTY FOLDER \"example-websocket-client\")\n\n    target_link_libraries (websocket-client-sync-ssl\n        OpenSSL::SSL OpenSSL::Crypto\n        lib-asio\n        lib-asio-ssl\n        lib-beast\n        )\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Define ArangoDB Graph Target Sources\nDESCRIPTION: This snippet defines the source files that are part of the `arango_graph` target.  It includes various path-related classes and utilities.  These source files are compiled and linked together to form the `arango_graph` library or executable.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/Graph/PathManagement/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(arango_graph PRIVATE\n  PathResult.cpp\n  SingleProviderPathResult.cpp\n  PathStore.cpp\n  PathStoreTracer.cpp\n  PathValidator.cpp\n  PathValidatorTabooWrapper.cpp\n  PathValidatorTracer.cpp\n  PathValidatorOptions.cpp)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating locale-specific formatting issues with boost::format\nDESCRIPTION: This snippet illustrates how boost::format uses the global locale instead of the stream's locale, leading to incorrect formatting for different locales.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/doc/localized_text_formatting.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nstd::locale::global(std::locale(\"en_US.UTF-8\"));\noutput.imbue(std::locale(\"de_DE.UTF-8\"))\noutput << boost::format(\"%1%\") % 1234.345;\n```\n\n----------------------------------------\n\nTITLE: Include Headers and Define Named Parameters for DFS\nDESCRIPTION: This code includes necessary headers like `<boost/parameter.hpp>` and `<iostream>`, and defines named parameters for a depth-first search function including `graph`, `visitor`, `root_vertex`, `index_map`, and `color_map`. This sets up the infrastructure for using named parameters in the `depth_first_search` function.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/index.rst#2025-04-22_snippet_13\n\nLANGUAGE: cpp\nCODE:\n```\n\"#include <boost/parameter.hpp>\n    #include <iostream>\n\n    BOOST_PARAMETER_NAME(graph)\n    BOOST_PARAMETER_NAME(visitor)\n    BOOST_PARAMETER_NAME(root_vertex)\n    BOOST_PARAMETER_NAME(index_map)\n    BOOST_PARAMETER_NAME(color_map)\"\n```\n\n----------------------------------------\n\nTITLE: Checking Error State in C++\nDESCRIPTION: A constant member function that returns true if an error condition is present. The method is constexpr where possible, has constant time complexity, and provides a no-throw guarantee.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/basic_result/has_error.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nbool has_error() const noexcept\n```\n\n----------------------------------------\n\nTITLE: Using int_ in C++ with Boost MPL Assertions\nDESCRIPTION: Demonstrates example usage of the int_ template class, including type checks, value comparisons, and next/prior operations using Boost MPL assertions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/int_.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntypedef int_<8> eight;\n\nBOOST_MPL_ASSERT(( is_same< eight::value_type, int > ));\nBOOST_MPL_ASSERT(( is_same< eight::type, eight > ));\nBOOST_MPL_ASSERT(( is_same< next< eight >::type, int_<9> > ));\nBOOST_MPL_ASSERT(( is_same< prior< eight >::type, int_<7> > ));\nBOOST_MPL_ASSERT_RELATION( (eight::value), ==, 8 );\nassert( eight() == 8 );\n```\n\n----------------------------------------\n\nTITLE: Y Gradient Implementation with Boost GIL using Iterators\nDESCRIPTION: This C++ code implements the vertical gradient computation using pixel iterators. It iterates through each column of the image and initializes iterators for both source and destination views using `col_begin`. It then iterates through each pixel in the column (excluding boundary pixels) and calculates the gradient using iterator indexing.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/tutorial/gradient.rst#2025-04-22_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\nvoid y_gradient(gray8c_view_t const& src, gray8s_view_t const& dst)\n{\n  for (int x = 0; x < src.width(); ++x)\n  {\n      gray8c_view_t::y_iterator src_it = src.col_begin(x);\n      gray8s_view_t::y_iterator dst_it = dst.col_begin(x);\n\n      for (int y = 1; y < src.height() - 1; ++y)\n          dst_it[y] = (src_it[y-1] - src_it[y+1]) / 2;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Const-Qualified Reference Type in C++\nDESCRIPTION: This code shows how to define the `reference` type of an iterator with the `const` qualifier using `iterator_traits`. This prevents modification of the referenced object through the iterator.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/technicalities.rst#2025-04-22_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nstruct iterator_traits<rgb_planar_pixel_iterator>\n    {\n      typedef const my_reference_proxy<T> reference;\n    };\n```\n\n----------------------------------------\n\nTITLE: Implementing value_or_error Template Converter in C++\nDESCRIPTION: Template structure defining a converter between value_or_error concept matching types. Includes configuration flags for result/outcome input handling and an operator() for performing the actual conversion. The converter supports both void and non-void value/error types with automatic value construction.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/converters/value_or_error.md#2025-04-22_snippet_0\n\nLANGUAGE: c++\nCODE:\n```\n// `T` will be the destination basic_result or basic_outcome.\n// `U` will be the decayed form of the `value_or_error<T, E>` concept matching input type.\ntemplate <class T> struct value_or_error<T, U>\n{\n  // False to indicate that this converter wants `basic_result`/`basic_outcome` to reject all other `basic_result`\n  static constexpr bool enable_result_inputs = false;\n  // False to indicate that this converter wants `basic_outcome` to reject all other `basic_outcome`\n  static constexpr bool enable_outcome_inputs = false;\n  \n  // `X` will be the raw input form of `U`. It must return a `T`.\n  template<class X> constexpr T operator()(X &&v);\n};\n```\n\n----------------------------------------\n\nTITLE: Get Built-in NumPy Dtype in C++\nDESCRIPTION: Static method that returns a NumPy dtype object for a given C++ builtin scalar type `T`. It requires `T` to be compatible with types supported by NumPy.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/doc/html/numpy/_sources/reference/dtype.rst.txt#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\n::\n\n  template <typename T> static dtype get_builtin();\n```\n\n----------------------------------------\n\nTITLE: STL Random Access Iterator Operations\nDESCRIPTION: Lists STL algorithms that require Random Access Iterator with both Read and Write capabilities.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/new-iter-concepts.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nrandom_shuffle, sort, stable_sort, partial_sort, nth_element, push_heap, pop_heap\nmake_heap, sort_heap\n```\n\n----------------------------------------\n\nTITLE: SFINAE Usage and Parser Enhancements\nDESCRIPTION: This entry includes SFINAE usage on return values, error_code usage, generation documentation updates, obsolete RFC2616 functions removal, message swap members addition, HTTP field value parser containers addition, basic_parser_v1 fixes, and configurable limits on headers and body sizes in basic_parser_v1, enhancing the library's advanced features and parser robustness.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/beast/CHANGELOG.md#2025-04-22_snippet_12\n\n\n\n----------------------------------------\n\nTITLE: Printing C++ Array and Corresponding Python ndarray\nDESCRIPTION: This snippet prints the content of the original C++ array and the newly created numpy ndarray to verify their equivalence.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/doc/html/numpy/_sources/tutorial/fromdata.rst.txt#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\n    std::cout << \"C++ array :\" << std::endl;\n    for (int j=0;j<4;j++)\n    {\n      std::cout << arr[j] << ' ';\n    }\n    std::cout << std::endl\n              << \"Python ndarray :\" << p::extract<char const *>(p::str(py_array)) << std::endl;\n```\n\n----------------------------------------\n\nTITLE: Enum Inspection Implementation in C++\nDESCRIPTION: Demonstrates how to implement enum value mappings for serialization and deserialization.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/lib/Inspection/include/Inspection/README.md#2025-04-22_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\nenum class MyStringEnum {\n  kValue1,\n  kValue2,\n  kValue3 = kValue2,\n};\n\ntemplate<class Inspector>\nauto inspect(Inspector& f, MyStringEnum& x) {\n  return f.enumeration(x).values(MyStringEnum::kValue1, \"value1\",  //\n                                 MyStringEnum::kValue2, \"value2\");\n}\n```\n\n----------------------------------------\n\nTITLE: Fixed TRY Syntax with Reference Specification in C++\nDESCRIPTION: Example showing the new TRY syntax that correctly handles rvalue and lvalue propagation using preprocessor overloading to specify storage for both internal temporary and output variable.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/changelog/_index.md#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nFoo &&foo;\nBOOST_OUTCOME_TRY((auto &&, v), filter2(foo))\n```\n\n----------------------------------------\n\nTITLE: Generic Object Construction Pattern in C++\nDESCRIPTION: Template syntax for a generic make function that handles object construction, returning a result type containing either the successfully constructed object or an error.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/tutorial/advanced/constructors/two-phase-init.md#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nmake<T>{Args...}()\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost Tuple Library Build with CMake\nDESCRIPTION: Sets up CMake configuration for building the Boost Tuple library as an interface library. Defines minimum CMake version, project settings, and links required Boost dependencies including config, core, static_assert, and type_traits.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/tuple/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.20)\nproject(boost_tuple VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n\nadd_library(boost_tuple INTERFACE)\nadd_library(Boost::tuple ALIAS boost_tuple)\n\ntarget_include_directories(boost_tuple INTERFACE include)\n\ntarget_link_libraries(boost_tuple\n    INTERFACE\n        Boost::config\n        Boost::core\n        Boost::static_assert\n        Boost::type_traits\n)\n```\n\n----------------------------------------\n\nTITLE: Pixel Concept Definition in C++\nDESCRIPTION: Defines comprehensive requirements for pixel types, including value types, references, mutability, and comparison operations\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/pixel.rst#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nconcept PixelConcept<typename P> : ColorBaseConcept<P>, PixelBasedConcept<P>\n{\n    typename value_type;\n    typename reference;\n    typename const_reference;\n    static const bool P::is_mutable;\n}\n```\n\n----------------------------------------\n\nTITLE: Printing Characters in Reverse Order using Boost reverse_iterator in C++\nDESCRIPTION: This snippet demonstrates how to use Boost's reverse_iterator to print a character array in reverse order. It also shows how to double-reverse the sequence to obtain the original order. The example uses std::copy and std::ostream_iterator for output.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/reverse_iterator_eg.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nchar letters_[] = \"hello world!\";\nconst int N = sizeof(letters_)/sizeof(char) - 1;\ntypedef char* base_iterator;\nbase_iterator letters(letters_);\nstd::cout << \"original sequence of letters:\\t\\t\\t\" << letters_ << std::endl;\n\nboost::reverse_iterator<base_iterator>\n  reverse_letters_first(letters + N),\n  reverse_letters_last(letters);\n\nstd::cout << \"sequence in reverse order:\\t\\t\\t\";\nstd::copy(reverse_letters_first, reverse_letters_last,\n          std::ostream_iterator<char>(std::cout));\nstd::cout << std::endl;\n\nstd::cout << \"sequence in double-reversed (normal) order:\\t\";\nstd::copy(boost::make_reverse_iterator(reverse_letters_last),\n          boost::make_reverse_iterator(reverse_letters_first),\n          std::ostream_iterator<char>(std::cout));\nstd::cout << std::endl;\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Boost HOF Combine Adaptor in C++\nDESCRIPTION: Demonstrates how to use the combine adaptor to construct a compound function that creates a tuple of pairs. The example shows how combine zips multiple functions with their respective arguments.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/combine.hpp.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/hof.hpp>\n#include <cassert>\n#include <tuple>\n#include <utility>\n\nint main() {\n    auto f = boost::hof::combine(\n        boost::hof::construct<std::tuple>(),\n        boost::hof::capture(1)(boost::hof::construct<std::pair>()),\n        boost::hof::capture(2)(boost::hof::construct<std::pair>()));\n    assert(f(3, 7) == std::make_tuple(std::make_pair(1, 3), std::make_pair(2, 7)));\n}\n```\n\n----------------------------------------\n\nTITLE: Usage Example of BOOST HOF arg Function\nDESCRIPTION: This example demonstrates how to use the 'arg' function to select the third argument from a list of arguments. It shows the 'arg' function being used with an std::integral_constant to specify which argument to select.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/arg.hpp.txt#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/hof.hpp>\n#include <cassert>\nusing namespace boost::hof;\n\nint main() {\n    assert(arg(std::integral_constant<int, 3>())(1,2,3,4,5) == 3);\n}\n```\n\n----------------------------------------\n\nTITLE: BOOST_PARAMETER_KEYWORD Macro Implementation in C++\nDESCRIPTION: The implementation of the BOOST_PARAMETER_KEYWORD macro, which generates a keyword tag type and corresponding keyword object. This macro is deprecated in favor of BOOST_PARAMETER_NAME.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_96\n\nLANGUAGE: cpp\nCODE:\n```\nnamespace **n** {\n\n    struct **k**\n    {\n        static constexpr char const* keyword_name()\n        {\n            return ## *k*;\n        }\n\n        typedef *unspecified* _;\n        typedef *unspecified* _1;\n        typedef boost::parameter::forward_reference qualifier;\n\n        // The following definitions are available only when\n        // |BOOST_PARAMETER_CAN_USE_MP11|_ is defined.\n\n        template <typename ArgumentPack>\n        using binding_fn = typename |binding|_\\<\n            ArgumentPack\n          , *k*\n        >::type;\n\n        template <typename ArgumentPack>\n        using fn = typename |value_type|_\\<ArgumentPack, *k*>::type;\n    };\n}\n\nnamespace { \n\n    |keyword|_\\<*n*::**k**> const& **k**\n        = |keyword|_\\<*n*::**k**>::instance;\n}\n```\n\n----------------------------------------\n\nTITLE: User Extensible Conversion for ValueOrError\nDESCRIPTION: Describes how to implement user-defined specializations of the value_or_error<T, U> type for converting types within Outcome without causing issues in constexpr contexts, focusing on the exclusion of specific types from the default conversion mechanism.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/tutorial/advanced/interop/value-or-error.md#2025-04-22_snippet_1\n\nLANGUAGE: c++\nCODE:\n```\nOutcome's machinery for implementing concepts::value_or_error conversion is user extensible by injection\nof specialisations of the value_or_error<T, U> type into the BOOST_OUTCOME_V2_NAMESPACE::convert namespace.\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for Async HTTP Server\nDESCRIPTION: Creates and configures a CMake executable target for an asynchronous HTTP server using Boost Beast. Links required libraries and organizes source files into groups. Includes Boost Beast files, main server implementation, and necessary dependencies.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/beast/example/http/server/async/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nGroupSources(include/boost/beast beast)\nGroupSources(example/http/server/async \"/\")\n\nadd_executable (http-server-async\n    ${BOOST_BEAST_FILES}\n    Jamfile\n    http_server_async.cpp\n)\n\ntarget_link_libraries(http-server-async\n    lib-asio\n    lib-asio-ssl\n    lib-beast)\n\nset_property(TARGET http-server-async PROPERTY FOLDER \"example-http-server\")\n```\n\n----------------------------------------\n\nTITLE: Defining the always Metafunction Template in C++\nDESCRIPTION: This code snippet defines the template structure for the 'always' metafunction. It is a variadic Metafunction Class that always returns the same type X, regardless of the number and types of passed arguments.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/always.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate< \n    typename X\n>\nstruct always\n{\n    // |unspecified|\n    // |...|\n};\n```\n\n----------------------------------------\n\nTITLE: 4x4 Integer Matrix Data\nDESCRIPTION: A 4x4 matrix of negative integers, with the first line indicating matrix dimensions (0 4). Contains mostly large negative numbers like -1073741800 arranged in 4 rows of 4 columns.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/polygon/example/input_data/primary/primary_051.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n0 4\n-1073741800 -1073741800 -687194752 -1159641144\n-1073741800 -1073741800 -408021884 -923417948\n-1073741800 -1073741800 -343597376 -2061584256\n-2147483600 -837518604 -1073741800 -1073741800\n```\n\n----------------------------------------\n\nTITLE: Defining BOOST_MPL_LIMIT_UNROLLING Macro in C++\nDESCRIPTION: This snippet shows the default definition of the BOOST_MPL_LIMIT_UNROLLING macro. It sets the unrolling depth for MPL iteration algorithms if not already defined. The default value is 4, but it can be overridden by defining it before including any library headers.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/LIMIT_UNROLLING.rst#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n#if !defined(BOOST_MPL_LIMIT_UNROLLING)\n#   define BOOST_MPL_LIMIT_UNROLLING \\\n            |idic| \\\n/**/\n#endif\n```\n\n----------------------------------------\n\nTITLE: Retrieving Value from Distributed Property Map in C++\nDESCRIPTION: Function to get a value from a distributed property map. Handles both local and remote data with ghost cells.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/distributed_property_map.rst#2025-04-22_snippet_9\n\nLANGUAGE: cpp\nCODE:\n```\nreference get(distributed_property_map pm, const key_type& key);\n```\n\n----------------------------------------\n\nTITLE: Using BOOST_OUTCOME_CO_TRY_FAILURE_LIKELY Macro in C++ Coroutines\nDESCRIPTION: This macro evaluates an expression within a coroutine, assigning the result to a variable if successful, or returning from the function if unsuccessful. It uses customization points for try_operation_has_value, try_operation_return_as, and try_operation_extract_value. The macro is optimized for scenarios where failure is more likely.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/macros/co_try_failure_likely.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_OUTCOME_CO_TRY_FAILURE_LIKELY(var, expr)\n```\n\n----------------------------------------\n\nTITLE: Including replace header in C++\nDESCRIPTION: Shows how to include the header file for the replace algorithm in a C++ program.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/replace.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/replace.hpp>\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost Unordered Library in CMake\nDESCRIPTION: This CMake script defines the configuration for Boost's unordered library. It creates an interface library, sets include directories, and specifies dependencies on other Boost libraries. It also conditionally includes tests if testing is enabled.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/unordered/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.16)\n\nproject(boost_unordered VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n\nadd_library(boost_unordered INTERFACE)\nadd_library(Boost::unordered ALIAS boost_unordered)\n\ntarget_include_directories(boost_unordered INTERFACE include)\n\ntarget_link_libraries(boost_unordered\n  INTERFACE\n    Boost::assert\n    Boost::config\n    Boost::container\n    Boost::container_hash\n    Boost::core\n    Boost::detail\n    Boost::move\n    Boost::predef\n    Boost::preprocessor\n    Boost::smart_ptr\n    Boost::throw_exception\n    Boost::tuple\n    Boost::type_traits\n)\n\nif(BUILD_TESTING AND EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/test/CMakeLists.txt\")\n\n  add_subdirectory(test)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Invoking a Function with Named Parameters in C++\nDESCRIPTION: Shows how to call a function that uses Boost.Parameter named parameters, binding arguments to specific parameter names.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_73\n\nLANGUAGE: cpp\nCODE:\n```\nevaluate(\n    _rr0 = rvalue_bitset<3>()\n  , _lrc0 = lvalue_const_bitset<0>()\n  , _lr0 = lvalue_bitset<1>()\n  , _rrc0 = rvalue_const_bitset<2>()\n);\nevaluate(\n    _lr0 = lvalue_bitset<1>()\n  , _lrc0 = lvalue_const_bitset<0>()\n);\n```\n\n----------------------------------------\n\nTITLE: Placeholder Template Class Definition\nDESCRIPTION: Core template class implementing placeholder functionality with operator overloading for bind expressions\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/placeholders.hpp.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<int N>\nstruct placeholder\n{\n#if BOOST_HOF_HAS_MANGLE_OVERLOAD\n    template<class... Ts>\n    constexpr auto operator()(Ts&&... xs) const BOOST_HOF_RETURNS \n    ( boost::hof::lazy(operators::call())(detail::simple_placeholder<N>(), BOOST_HOF_FORWARD(Ts)(xs)...) );\n#else\n    template<class... Ts>\n    struct result_call\n    { typedef decltype(boost::hof::lazy(operators::call())(detail::simple_placeholder<N>(), std::declval<Ts>()...)) type; };\n    template<class... Ts>\n    constexpr typename result_call<Ts...>::type operator()(Ts&&... xs) const \n    { return boost::hof::lazy(operators::call())(detail::simple_placeholder<N>(), BOOST_HOF_FORWARD(Ts)(xs)...); };\n#endif\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Configuring ArangoVPack Executable in CMake\nDESCRIPTION: Sets up the ArangoVPack executable by defining source files, include directories, linked libraries, installation paths, and dependencies. The configuration includes system-specific libraries, Boost dependencies, and conditional components like jemalloc based on build options.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/client-tools/VPack/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(${BIN_ARANGOVPACK}\n  ${ProductVersionFiles_arangovpack}\n  VPackFeature.cpp\n  arangovpack.cpp\n)\ntarget_include_directories(${BIN_ARANGOVPACK} PRIVATE ${PROJECT_SOURCE_DIR}/client-tools)\n\ntarget_link_libraries(${BIN_ARANGOVPACK}\n  ${SYSTEM_LIBRARIES}\n  boost_system\n  boost_boost\n  arango_shell\n  clienttools_utils\n)\n\ninstall(\n  TARGETS ${BIN_ARANGOVPACK}\n  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR})\n\ninstall_config(${BIN_ARANGOVPACK})\n\nadd_dependencies(${BIN_ARANGOVPACK} zlibstatic)\n\n# use ICU 64 for the client tools\nadd_dependencies(${BIN_ARANGOVPACK} iculegacy_build)\n\nif (USE_JEMALLOC)\n  add_dependencies(${BIN_ARANGOVPACK} jemalloc_build)\nendif ()\n\nadd_dependencies(${BIN_ARANGOVPACK} man)\n```\n\n----------------------------------------\n\nTITLE: Setting Error State Flag in C++\nDESCRIPTION: Static method that sets or clears an error flag in the implementation's state. The method is constexpr, has constant time complexity, and provides a no-throw guarantee. Takes an Impl parameter by rvalue reference and a boolean flag.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/policies/base/set_has_error.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nstatic void _set_has_error(Impl &&, bool) noexcept\n```\n\n----------------------------------------\n\nTITLE: Defining indirect_iterator Class Template in C++\nDESCRIPTION: Declares the indirect_iterator class template with its member types and functions. It takes Iterator, Value, CategoryOrTraversal, Reference, and Difference as template parameters, with default values for all except Iterator.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/indirect_iterator_ref.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <\n    class Iterator\n  , class Value = use_default\n  , class CategoryOrTraversal = use_default\n  , class Reference = use_default\n  , class Difference = use_default\n>\nclass indirect_iterator\n{\n public:\n    typedef /* see below */ value_type;\n    typedef /* see below */ reference;\n    typedef /* see below */ pointer;\n    typedef /* see below */ difference_type;\n    typedef /* see below */ iterator_category;\n\n    indirect_iterator();\n    indirect_iterator(Iterator x);\n\n    template <\n        class Iterator2, class Value2, class Category2\n      , class Reference2, class Difference2\n    >\n    indirect_iterator(\n        indirect_iterator<\n             Iterator2, Value2, Category2, Reference2, Difference2\n        > const& y\n      , typename enable_if_convertible<Iterator2, Iterator>::type* = 0 // exposition\n    );\n\n    Iterator const& base() const;\n    reference operator*() const;\n    indirect_iterator& operator++();\n    indirect_iterator& operator--();\nprivate:\n   Iterator m_iterator; // exposition\n};\n```\n\n----------------------------------------\n\nTITLE: Benchmarking leaf::result<T> in C++\nDESCRIPTION: This snippet includes a header file for benchmarking the performance of leaf::result<T> error handling approach. It uses a deep stack implementation from the LEAF library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/leaf/benchmark/benchmark.md#2025-04-22_snippet_7\n\nLANGUAGE: c++\nCODE:\n```\n#include \"https://raw.githubusercontent.com/boostorg/leaf/master/benchmark/deep_stack_leaf.cpp\"\n```\n\n----------------------------------------\n\nTITLE: Inverting a Pixel with a Proxy Reference in C++\nDESCRIPTION: This code illustrates the issue of dereferencing a temporary object into a function that requires a mutable reference, leading to a compilation error, demonstrating the limitations of temporary objects in C++.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/technicalities.rst.txt#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\n  template <typename Pixel>    // Models MutablePixelConcept\n  void invert_pixel(Pixel& p);\n\n  rgb_planar_pixel_iterator myIt;\n  invert_pixel(*myIt);        // compile error!\n```\n\n----------------------------------------\n\nTITLE: Defining Color Converted View Type in C++ GIL\nDESCRIPTION: This code snippet outlines the creation of a type definition for a color converted view in GIL. It defines the mechanism to add a dereference function object to an image view, allowing for color conversion upon dereferencing. This snippet is crucial for developers aiming to implement customized views for image processing.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/extending.rst.txt#2025-04-22_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <typename SrcView, typename DstP>\nstruct color_converted_view_type\n{\nprivate:\n    typedef typename SrcView::const_t::reference src_pix_ref;  // const reference to pixel in SrcView\n    typedef color_convert_deref_fn<src_pix_ref, DstP> deref_t; // the dereference adaptor that performs color conversion\n    typedef typename SrcView::template add_deref<deref_t> add_ref_t;\npublic:\n    typedef typename add_ref_t::type type; // the color converted view type\n    static type make(const SrcView& sv) { return add_ref_t::make(sv, deref_t()); }\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Image View Concept in C++\nDESCRIPTION: This concept complements the 2D random access image view with pixel-specific requirements. It constrains views to have pixel-compatible iterators, ensuring the view's value type satisfies the PixelValueConcept, and sets single-dimensional type constraints. It also introduces functionality for getting the number of channels in the image view.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/image_view.rst#2025-04-22_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\nconcept ImageViewConcept<RandomAccess2DImageViewConcept View>\n{\n  where PixelValueConcept<value_type>;\n  where PixelIteratorConcept<x_iterator>;\n  where PixelIteratorConcept<y_iterator>;\n  where x_coord_t == y_coord_t;\n\n  typename coord_t = x_coord_t;\n\n  std::size_t View::num_channels() const;\n};\n\n```\n\n----------------------------------------\n\nTITLE: Defining Random Access 2D Image View Concept in C++\nDESCRIPTION: This snippet details a concept specifically for two-dimensional random access image views in C++. It extends the ND image view concept with additional requirements for two-dimensional navigation like width, height, and iterators over rows and columns. The concept presumes a dimensional constraint of two for efficient 2D image traversal.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/image_view.rst#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nconcept RandomAccess2DImageViewConcept<RandomAccessNDImageViewConcept View>\n{\n  where num_dimensions==2;\n\n  typename x_iterator = axis<0>::iterator;\n  typename y_iterator = axis<1>::iterator;\n  typename x_coord_t  = axis<0>::coord_t;\n  typename y_coord_t  = axis<1>::coord_t;\n  typename xy_locator = locator;\n\n  x_coord_t View::width()  const;\n  y_coord_t View::height() const;\n\n  // X-navigation\n  x_iterator View::x_at(const point_t&) const;\n  x_iterator View::row_begin(y_coord_t) const;\n  x_iterator View::row_end  (y_coord_t) const;\n\n  // Y-navigation\n  y_iterator View::y_at(const point_t&) const;\n  y_iterator View::col_begin(x_coord_t) const;\n  y_iterator View::col_end  (x_coord_t) const;\n\n  // navigating in 2D\n  xy_locator View::xy_at(const point_t&) const;\n\n  // (x,y) versions of all methods taking point_t\n  View::View(x_coord_t,y_coord_t,const locator&);\n  iterator View::at(x_coord_t,y_coord_t) const;\n  reference operator()(View,x_coord_t,y_coord_t) const;\n  xy_locator View::xy_at(x_coord_t,y_coord_t) const;\n  x_iterator View::x_at(x_coord_t,y_coord_t) const;\n  y_iterator View::y_at(x_coord_t,y_coord_t) const;\n};\n```\n\n----------------------------------------\n\nTITLE: MRView Properties Slice Method Implementation in C++\nDESCRIPTION: Implementation of the properties method that extracts view properties and converts them to VelocyPack format. This function provides a standardized way to access MapReduce view configuration.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/static_string/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\narangodb::Result MRView::properties(velocypack::Slice const& properties,\n                           bool partialUpdate) {\n  try {\n    if (!partialUpdate && !properties.hasKey(StaticStrings::ViewType)) {\n      // partial update was not requested and no value for 'type' specified, use defaults\n      auto meta = std::make_shared<Meta>(*_meta);\n\n      // reset non-updatable values to current meta\n      meta->updateProperties(properties);\n\n      if (meta->_collections != _meta->_collections) {\n        std::vector<std::shared_ptr<arangodb::LogicalCollection>> collections;\n\n        for (auto& pair : meta->_collections) {\n          auto cid = pair.first;\n          auto collection = vocbase().lookupCollection(cid);\n\n          if (!collection) {\n            return arangodb::Result(\n                TRI_ERROR_ARANGO_DATA_SOURCE_NOT_FOUND,\n                std::string(\"failed to find collection while updating view: \") +\n                    std::to_string(cid));\n          }\n\n          collections.emplace_back(collection);\n        }\n\n        // create new collection\n        for (auto& collection : collections) {\n          auto collection_id = collection->id();\n\n          if (!_meta->_collections.contains(collection_id)) {\n            auto res = collection->getPhysical()->createView(this, meta->_mapReduce);\n\n            if (!res.ok()) {\n              return res;\n            }\n          }\n        }\n      }\n\n      _meta = std::move(meta);\n\n      return arangodb::Result();\n    }\n  } catch (std::exception const& e) {\n    LOG_TOPIC(\"59f53\", WARN, arangodb::iresearch::TOPIC)\n        << \"caught exception while updating properties for arangosearch view '\"\n        << name() << \"': \" << e.what();\n    IR_LOG_EXCEPTION();\n  } catch (...) {\n    LOG_TOPIC(\"5a5a3\", WARN, arangodb::iresearch::TOPIC)\n        << \"caught exception while updating properties for arangosearch view '\"\n        << name() << \"'\";\n    IR_LOG_EXCEPTION();\n  }\n\n  return arangodb::Result(TRI_ERROR_BAD_PARAMETER,\n                          std::string(\"error updating view '\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Message Triggers in C++\nDESCRIPTION: Registers a trigger to watch for messages with a specific tag, enabling asynchronous message handling for distributed computing\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/process_group.rst#2025-04-22_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<typename Type, typename Handler>\n  void trigger(int tag, const Handler& handler);\n```\n\n----------------------------------------\n\nTITLE: Creating Named Parameter Member Functions with function Template\nDESCRIPTION: Template class for defining named parameter enabled member functions in C++. Allows exposing member functions with named and optional parameters to Python.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter_python/doc/index.rst#2025-04-22_snippet_6\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <class Fwd, class ParameterSpecs>\nstruct function : python::def_visitor<function<Fwd, ParameterSpecs> >\n{\n    template <class Class, class Options> \n    void def(Class& class_, char const* name, Options const& options);\n};\n```\n\n----------------------------------------\n\nTITLE: Defining is_sequence Metafunction Template in C++\nDESCRIPTION: Declares the is_sequence metafunction template that determines if a type X is a Forward Sequence. It returns an unspecified type that resolves to a boolean Integral Constant.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/is_sequence.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      typename X\n    >\nstruct is_sequence\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Building Static or Shared TZ Library Based on Option\nDESCRIPTION: Creates either a static or shared library named 'tz' depending on the BUILD_TZ_STATIC option value. The library is built from the header files and tz.cpp source file.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/date/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif( BUILD_TZ_STATIC )\n\tadd_library( tz STATIC ${HEADER_FILES} ${SOURCE_FOLDER}/tz.cpp )\nelse( )\n\tadd_library( tz SHARED ${HEADER_FILES} ${SOURCE_FOLDER}/tz.cpp )\nendif( )\n```\n\n----------------------------------------\n\nTITLE: Error Handling in LEAF\nDESCRIPTION: Demonstrates error handling in LEAF using try_handle_all. This approach explicitly states the intention to handle errors and uses lambda functions for different error cases.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/leaf/benchmark/benchmark.md#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\n// LEAF\nleaf::try_handle_all\n\n  []() -> leaf::result<T>\n  {\n    BOOST_LEAF_AUTO(v, f());\n    // No error, use v\n  },\n\n  []( leaf::match<error_enum, error_enum::error1> )\n  {\n    /* handle error_enum::error1 */\n  },\n\n  []( leaf::match<error_enum, error_enum::error2> )\n  {\n    /* handle error_enum::error2 */\n  },\n\n  []\n  {\n    /* handle any other failure */\n  } );\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Image Writer Class\nDESCRIPTION: Creates a template-based writer class for a custom image format with methods for writing image data with optional write configuration\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/io.rst.txt#2025-04-22_snippet_11\n\nLANGUAGE: C++\nCODE:\n```\ntemplate< typename Device >\nclass writer< Device, xxx_tag >\n{\npublic:\n    writer( Device & file )\n    : out(file)\n    {}\n\n    template<typename View>\n    void apply( const View& view )\n    {\n        // your implementation here\n    }\n\n    template<typename View>\n    void apply( const View& view, const image_write_info< xxx_tag >& info )\n    {\n        // your implementation here\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost.Compute Interface Library in CMake\nDESCRIPTION: This snippet sets up the Boost.Compute library as an interface library in CMake, defining its version and including directories. It also creates an alias for easier linking in other projects.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/compute/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT CMAKE_SOURCE_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR)\n\n# Generated by `boostdep --cmake compute`\n# Copyright 2020, 2021 Peter Dimov\n# Distributed under the Boost Software License, Version 1.0.\n# https://www.boost.org/LICENSE_1_0.txt\n\ncmake_minimum_required(VERSION 3.5...3.20)\n\nproject(boost_compute VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n\nadd_library(boost_compute INTERFACE)\nadd_library(Boost::compute ALIAS boost_compute)\n\ntarget_include_directories(boost_compute INTERFACE include)\n\ntarget_link_libraries(boost_compute\n  INTERFACE\n    Boost::algorithm\n    Boost::array\n    Boost::assert\n    Boost::atomic\n    Boost::chrono\n    Boost::config\n    Boost::core\n    Boost::filesystem\n    Boost::function\n    Boost::function_types\n    Boost::fusion\n    Boost::iterator\n    Boost::lexical_cast\n    Boost::mpl\n    Boost::optional\n    Boost::preprocessor\n    Boost::property_tree\n    Boost::proto\n    Boost::range\n    Boost::smart_ptr\n    Boost::static_assert\n    Boost::thread\n    Boost::throw_exception\n    Boost::tuple\n    Boost::type_traits\n    Boost::typeof\n    Boost::utility\n    Boost::uuid\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Variadic Print Function in C++\nDESCRIPTION: Traditional implementation of a variadic print function using recursive template instantiation. This function prints each argument to std::cout.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/src/point_free.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n// Base case\nvoid print()\n{}\n\ntemplate<class T, class... Ts>\nvoid print(const T& x, const Ts&... xs)\n{\n    std::cout << x;\n    print(xs...);\n}\n```\n\n----------------------------------------\n\nTITLE: Using std::ref to Correctly Mutate Function Objects in C++\nDESCRIPTION: This example demonstrates the correct approach to mutating function objects by using std::ref to pass the object by reference rather than by value, ensuring that mutations affect the original object.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/doc/src/faq.md.txt#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\ncounter c{};\nproj(std::ref(c))(1,1);\n// Prints 2\nstd::cout << c.i << std::endl;\n```\n\n----------------------------------------\n\nTITLE: Glue Code for Gradient Computation\nDESCRIPTION: This glue code demonstrates how to convert raw pixel data into GIL-compatible view types before invoking the gradient computation functions. It initializes source and destination views based on given pixel data.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/tutorial/gradient.rst.txt#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nvoid ComputeXGradientGray8(\n    unsigned char const* src_pixels, ptrdiff_t src_row_bytes,\n    int w, int h,\n    signed char* dst_pixels, ptrdiff_t dst_row_bytes)\n{\n    gray8c_view_t src = interleaved_view(w, h, (gray8_pixel_t const*)src_pixels, src_row_bytes);\n    gray8s_view_t dst = interleaved_view(w, h, (gray8s_pixel_t*)dst_pixels, dst_row_bytes);\n    x_gradient(src, dst);\n}\n```\n\n----------------------------------------\n\nTITLE: Reading and Writing In-Memory Buffers using Boost.GIL\nDESCRIPTION: This code snippet demonstrates how to read an image from an input stream, and write an image to an output stream using in-memory buffers. It showcases reading from a TIFF file into an 'rgb8_image_t', writing to a stringstream, and then again writing out to a file. Ensuring proper stream handling is crucial for custom classes.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/io.rst.txt#2025-04-22_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\n// 1. Read an image.\nifstream in( \"test.tif\", ios::binary );\n\nrgb8_image_t img;\nread_image( in, img, tiff_tag() );\n\n// 2. Write image to in-memory buffer.\nstringstream out_buffer( ios_base::out | ios_base::binary );\n\nrgb8_image_t src;\nwrite_view( out_buffer, view( src ), tiff_tag() );\n\n// 3. Copy in-memory buffer to another.\nstringstream in_buffer( ios_base::in | ios_base::binary );\nin_buffer << out_buffer.rdbuf();\n\n// 4. Read in-memory buffer to gil image\nrgb8_image_t dst;\nread_image( in_buffer, dst, tag_t() );\n\n// 5. Write out image.\nstring filename( \"out.tif\" );\nofstream out( filename.c_str(), ios_base::binary );\nwrite_view( out, view( dst ), tiff_tag() );\n```\n\n----------------------------------------\n\nTITLE: Overloading Swap for Reference Proxy Class in C++\nDESCRIPTION: The snippet demonstrates how to overload the swap function correctly for the my_reference_proxy class, ensuring the standard swap functionality is correctly used in STL algorithms.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/technicalities.rst.txt#2025-04-22_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\n  namespace std\n  {\n   template <typename T>\n   void swap(my_reference_proxy<T>& x, my_reference_proxy<T>& y)\n   {\n      my_value<T> tmp=x;\n      x=y;\n      y=tmp;\n   }\n  }\n```\n\n----------------------------------------\n\nTITLE: Boost Pointer Container Insert Iterators Templates\nDESCRIPTION: This section defines several template classes for creating various types of insert iterators for pointer containers in Boost, allowing flexible insertion methods.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/ptr_inserter.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nnamespace boost\n{\n    namespace ptr_container\n    {\n        template< class PtrContainer >\n        class ptr_back_insert_iterator;\n        \n        template< class PtrContainer >\n        class ptr_front_insert_iterator;\n        \n        template< class PtrContainer >\n        class ptr_insert_iterator;\n        \n        template< class PtrContainer >\n        ptr_back_insert_iterator<PtrContainer> \n        ptr_back_inserter( PtrContainer& cont );\n        \n        template< class PtrContainer >\n        ptr_front_insert_iterator<PtrContainer> \n        ptr_front_inserter( PtrContainer& cont );\n        \n        template< class PtrContainer >\n        ptr_insert_iterator<PtrContainer> \n        ptr_inserter( PtrContainer& cont, typename PtrContainer::iterator before );\n    } // namespace 'ptr_container'\n} // namespace 'boost'\n```\n\n----------------------------------------\n\nTITLE: Defining BOOST_HOF_LIFT_CLASS macro for creating function object wrappers\nDESCRIPTION: A macro that defines a class with a templated operator() to wrap a template function. This approach preserves constexpr functionality and works on compilers that don't support generic lambdas.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/lift.hpp.txt#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\n#define BOOST_HOF_LIFT_CLASS(name, ...) \\\nstruct name \\\n{ \\\n    template<class... Ts> \\\n    constexpr auto operator()(Ts&&... xs) const \\\n    BOOST_HOF_RETURNS((__VA_ARGS__)(BOOST_HOF_FORWARD(Ts)(xs)...)) \\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Indirect Iterator Template in C++\nDESCRIPTION: Declares a class template for indirect_iterator, which is used to create an iterator that dereferences the elements it points to, useful for containers of pointers or smart pointers.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/facade-and-adaptor.rst#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <\n    class Iterator\n  , class Value = use_default\n  , class CategoryOrTraversal = use_default\n  , class Reference = use_default\n  , class Difference = use_default\n>\nclass indirect_iterator;\n```\n\n----------------------------------------\n\nTITLE: Compiling LZ4 with gcc/MinGW\nDESCRIPTION: Example command for compiling a C program with LZ4 DLL using gcc/MinGW, showing include paths and linking options.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/lz4/lib/dll/example/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n    gcc $(CFLAGS) -Iinclude\\ test-dll.c -o test-dll dll\\liblz4.dll\n```\n\n----------------------------------------\n\nTITLE: Setting Private Include Directories\nDESCRIPTION: Sets the private include directories for the arango_cluster_engine library. These directories, which include \"${PROJECT_SOURCE_DIR}/arangod\" and \"${PROJECT_SOURCE_DIR}/${ENTERPRISE_INCLUDE_DIR}\", are only used during the compilation of arango_cluster_engine itself and not exposed to other dependent libraries.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/ClusterEngine/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(arango_cluster_engine PRIVATE\n  \"${PROJECT_SOURCE_DIR}/arangod\"\n  \"${PROJECT_SOURCE_DIR}/${ENTERPRISE_INCLUDE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Example Usage of apply_wrap in C++\nDESCRIPTION: Demonstrates how to use apply_wrap with different metafunction classes and argument counts. Includes examples of apply_wrap0, apply_wrap2, and type assertions to verify results.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/apply_wrap.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nstruct f0\n{\n    template< typename T = int > struct apply\n    {\n        typedef char type;\n    };\n};\n    \nstruct g0\n{\n    struct apply { typedef char type; };\n};\n\nstruct f2\n{\n    template< typename T1, typename T2 > struct apply\n    {\n        typedef T2 type;\n    };\n};\n\n\ntypedef apply_wrap\\0\\< f0 >::type r1;\ntypedef apply_wrap\\0\\< g0 >::type r2;\ntypedef apply_wrap\\2\\< f2,int,char >::type r3;\n\nBOOST_MPL_ASSERT(( is_same<r1,char> ));\nBOOST_MPL_ASSERT(( is_same<r2,char> ));\nBOOST_MPL_ASSERT(( is_same<r3,char> ));\n```\n\n----------------------------------------\n\nTITLE: Configuring GNU and Clang Compiler Flags in CMake\nDESCRIPTION: Sets up compiler-specific flags and warnings for GNU and Clang compilers, including version-specific adjustments and debug/release build configurations.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/CMakeLists.txt#2025-04-22_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nset(EXTRA_C_FLAGS \"\")\nset(EXTRA_CXX_FLAGS \"\")\n\nif(CMAKE_CXX_COMPILER_ID STREQUAL \"GNU\")\n  message(STATUS \"Compiler type GNU: ${CMAKE_CXX_COMPILER}\")\n  set(BASE_FLAGS \"-Wall -Wextra -Wno-unused-parameter -Wno-deprecated-declarations ${BASE_FLAGS}\")\n  set(EXTRA_CXX_FLAGS \"-Wsuggest-override -Wnon-virtual-dtor\")\n  if(CMAKE_CXX_COMPILER_VERSION VERSION_EQUAL \"11.1.0\")\n    set(EXTRA_CXX_FLAGS \"${EXTRA_CXX_FLAGS} -Wno-error=nonnull\")\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Implementing a Narrow Contract Function with Null Pointer Expectation in C++\nDESCRIPTION: A simple function that demonstrates a narrow contract by expecting a non-null pointer. The function dereferences the pointer directly, assuming it is valid.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/motivation/narrow_contract.md#2025-04-22_snippet_0\n\nLANGUAGE: c++\nCODE:\n```\nint f(int * pi) // expects: pi != nullptr\n{\n  return *pi + 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Testing with RTA Framework\nDESCRIPTION: This snippet describes how to run the MakeData or CheckData suite tests using the RTA framework for verifying production integration.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/CONTRIBUTING.md#2025-04-22_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/unittest rta_makedata --cluster true\n```\n\n----------------------------------------\n\nTITLE: Using empty_sequence in C++\nDESCRIPTION: Demonstrates how to use the empty_sequence struct, including checking its size and transforming it. This example shows that the sequence is indeed empty and maintains its emptiness even after transformation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/empty_sequence.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntypedef begin<empty_sequence>::type first;\ntypedef end<empty_sequence>::type last;\n\nBOOST_MPL_ASSERT(( is_same<first,last> ));\nBOOST_MPL_ASSERT_RELATION( size<empty_sequence>::value, ==, 0 );\n\ntypedef transform_view<\n      empty_sequence\n    , add_pointer<_>\n    > empty_view;\n\nBOOST_MPL_ASSERT_RELATION( size<empty_sequence>::value, ==, 0 );\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Client Coroutine Example in CMake\nDESCRIPTION: This CMake snippet sets up an executable target for an HTTP client example using Boost.Beast and coroutines. It groups source files, adds the executable, links required libraries, and sets project properties.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/beast/example/http/client/coro/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nGroupSources(include/boost/beast beast)\nGroupSources(example/http/client/coro \"/\")\n\nadd_executable (http-client-coro\n    ${BOOST_BEAST_FILES}\n    Jamfile\n    http_client_coro.cpp\n    )\n\ntarget_link_libraries(http-client-coro\n    lib-asio\n    lib-beast)\n\nset_property(TARGET http-client-coro PROPERTY FOLDER \"example-http-client\")\n```\n\n----------------------------------------\n\nTITLE: Running tcpdump for Network Debugging\nDESCRIPTION: Command to run unittest with tcpdump packet capture for network debugging, saving the pcap file to the test's temporary directory.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/CONTRIBUTING.md#2025-04-22_snippet_37\n\nLANGUAGE: bash\nCODE:\n```\nsudo /bin/true; ./scripts/unittest http_server \\\n  --sniff sudo --cleanup false\n```\n\n----------------------------------------\n\nTITLE: Including iterator_range Header in C++\nDESCRIPTION: Shows how to include the necessary header file for using the iterator_range template in C++ code.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/iterator_range.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/fold.hpp>\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost Filesystem Library in CMake\nDESCRIPTION: Adds the Boost Filesystem library as a static library, specifying source files and compile definitions. It links against the boost_boost interface target.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(boost_filesystem STATIC\n    ${boost_src}/libs/filesystem/src/codecvt_error_category.cpp\n    ${boost_src}/libs/filesystem/src/operations.cpp\n    ${boost_src}/libs/filesystem/src/path.cpp\n    ${boost_src}/libs/filesystem/src/path_traits.cpp\n    ${boost_src}/libs/filesystem/src/portability.cpp\n    ${boost_src}/libs/filesystem/src/unique_path.cpp\n    ${boost_src}/libs/filesystem/src/utf8_codecvt_facet.cpp\n    ${boost_src}/libs/filesystem/src/windows_file_codecvt.cpp\n)\ntarget_link_libraries(boost_filesystem PUBLIC boost_boost)\ntarget_compile_definitions(boost_filesystem PRIVATE \"BOOST_SYSTEM_STATIC_LINK=1\")\ntarget_compile_definitions(boost_filesystem PRIVATE \"BOOST_FILESYSTEM_NO_CXX20_ATOMIC_REF=1\")\ntarget_compile_definitions(boost_filesystem PUBLIC  \"BOOST_ALL_NO_LIB=1\")\n```\n\n----------------------------------------\n\nTITLE: Implementing operator* for reverse_iterator in C++\nDESCRIPTION: Defines the dereference operator for reverse_iterator. It decrements a temporary iterator before dereferencing to access the correct element.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/reverse_iterator_ref.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nIterator tmp = m_iterator;\nreturn *--tmp;\n```\n\n----------------------------------------\n\nTITLE: Defining Pixel Locator Concept in C++\nDESCRIPTION: This snippet establishes the PixelLocatorConcept linking pixel characteristics with 2D random access locators. It sets constraints based on pixel value and iterator types for both x and y coordinates.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/pixel_locator.rst#2025-04-22_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\n  concept PixelLocatorConcept<RandomAccess2DLocatorConcept Loc> {\n    where PixelValueConcept<value_type>;\n    where PixelIteratorConcept<x_iterator>;\n    where PixelIteratorConcept<y_iterator>;\n    where x_coord_t == y_coord_t;\n\n    typename coord_t = x_coord_t;\n  };\n```\n\n----------------------------------------\n\nTITLE: Including equal_to Metafunction Headers in C++\nDESCRIPTION: This snippet shows the necessary header files to include when using the equal_to metafunction in C++.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/equal_to.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/equal_to.hpp>\n#include <boost/mpl/comparison.hpp>\n```\n\n----------------------------------------\n\nTITLE: Declaring unchecked<T, E> Type Alias in C++\nDESCRIPTION: Type alias declaration that maps to either std_unchecked<T, E> in standalone edition or boost_unchecked<T, E> in Boost edition. The default error type E varies based on the edition - std::error_code for standalone and boost::system::error_code for Boost edition.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/aliases/unchecked.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nunchecked<T, E = varies>\n```\n\n----------------------------------------\n\nTITLE: LEAF Function with Error Handling\nDESCRIPTION: Demonstrates a LEAF function with error handling. The function f() returns either 42 or an error based on a random condition, and g() calls f() and adds 1 to the result.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/leaf/benchmark/benchmark.md#2025-04-22_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\nleaf::result<int> f()\n{\n  if( rand()%2 )\n    return 42;\n  else\n    return leaf::new_error();\n}\n\nleaf::result<int> g()\n{\n  BOOST_LEAF_AUTO(x, f());\n  return x+1;\n}\n```\n\n----------------------------------------\n\nTITLE: Result Function Implementation with Variable Templates\nDESCRIPTION: Conditional implementation using variable templates when BOOST_HOF_HAS_VARIABLE_TEMPLATES is defined. Provides a more modern syntax for creating result adaptors.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/result.hpp.txt#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\n#if BOOST_HOF_HAS_VARIABLE_TEMPLATES\nnamespace result_detail {\ntemplate<class Result>\nstruct result_f\n{\n    template<class F>\n    constexpr result_adaptor<Result, F> operator()(F f) const\n    {\n        return result_adaptor<Result, F>(boost::hof::move(f));\n    }\n};\n\n}\n\ntemplate<class Result>\nstatic constexpr auto result = result_detail::result_f<Result>{};\n#else\ntemplate<class Result, class F>\nconstexpr result_adaptor<Result, F> result(F f)\n{\n    return result_adaptor<Result, F>(boost::hof::move(f));\n}\n#endif\n```\n\n----------------------------------------\n\nTITLE: Building Web Interface with CMake\nDESCRIPTION: These commands build the ArangoDB web interface using CMake. It requires a properly configured build environment.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/CONTRIBUTING.md#2025-04-22_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\ncmake --preset community\n    cmake --build --preset community --target frontend\n```\n\n----------------------------------------\n\nTITLE: Configuring ABI for Boost.Context\nDESCRIPTION: Sets up a CMake cache variable for the ABI, with default values based on the target architecture and platform.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/context/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nmath(EXPR _bits \"${CMAKE_SIZEOF_VOID_P}*8\")\n\nif(WIN32)\n  set(_default_abi ms)\nelseif(CMAKE_SYSTEM_PROCESSOR MATCHES \"^arm\" OR CMAKE_SYSTEM_PROCESSOR STREQUAL \"aarch64\")\n  set(_default_abi aapcs)\nelseif(CMAKE_SYSTEM_PROCESSOR MATCHES \"^mips\")\n  if(_bits EQUAL 32)\n    set(_default_abi o32)\n  else()\n    set(_default_abi n64)\n  endif()\nelse()\n  set(_default_abi sysv)\nendif()\n\nset(BOOST_CONTEXT_ABI \"${_default_abi}\" CACHE STRING \"Boost.Context ABI (aapcs, eabi, ms, n32, n64, o32, o64, sysv, x32)\")\nset_property(CACHE BOOST_CONTEXT_ABI PROPERTY STRINGS aapcs eabi ms n32 n64 o32 o64 sysv x32)\n\nunset(_default_abi)\n```\n\n----------------------------------------\n\nTITLE: Implementing Logical OR Operator Overloads in Boost Parameter Library C++\nDESCRIPTION: Defines overloads of the logical OR operator for lazy parameter evaluation. These operators take function objects as arguments and return tagged lazy default objects with the function and keyword Tag.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <typename F>\nconstexpr *tagged lazy default* operator||(F const& g) const;\n\ntemplate <typename F>\nconstexpr *tagged lazy default* operator||(F& g) const;\n```\n\n----------------------------------------\n\nTITLE: Using not_ Metafunction in C++ Template Metaprogramming\nDESCRIPTION: This example demonstrates how to use the not_ metafunction in C++ template metaprogramming. It shows assertions for both true and false cases, illustrating the logical NOT behavior of the metafunction.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/not_.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_MPL_ASSERT_NOT(( not_< true_ > ));\nBOOST_MPL_ASSERT(( not_< false_ > ));\n```\n\n----------------------------------------\n\nTITLE: Defining the Sort Template in Boost MPL\nDESCRIPTION: C++ template definition for the sort algorithm in Boost MPL. It takes a sequence, a predicate for comparison (defaulting to less<_1,_2>), and an optional inserter parameter. Returns a new sequence with all elements sorted according to the predicate.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/sort.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      typename Seq\n    , typename Pred = less<_1,_2>\n    , typename In = |unspecified|\n    >\nstruct sort\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Virtual Modifier\nDESCRIPTION: Conditionally defines TEST_VIRTUAL macro based on Google Tests usage, allowing dynamic method visibility for testing\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (USE_GOOGLE_TESTS)\n  add_definitions(\"-DTEST_VIRTUAL=virtual\")\nelse()\n  add_definitions(\"-DTEST_VIRTUAL=\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: PixelBasedConcept Metafunctions Validation\nDESCRIPTION: Uses Boost MPL assertions to validate pixel type properties such as number of channels, channel type, color space, and channel mapping\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/pixel.rst.txt#2025-04-22_snippet_8\n\nLANGUAGE: cpp\nCODE:\n```\nBOOST_MPL_ASSERT(num_channels<rgb8_pixel_t>::value == 3);\nBOOST_MPL_ASSERT((is_same<channel_type<rgb8_pixel_t>::type, bits8>));\nBOOST_MPL_ASSERT((is_same<color_space_type<bgr8_pixel_t>::type, rgb_t> ));\nBOOST_MPL_ASSERT((is_same<channel_mapping_type<bgr8_pixel_t>::type, mpl::vector3_c<int,2,1,0> > ));\nBOOST_MPL_ASSERT(sizeof(rgb8_pixel_t)==3)\n```\n\n----------------------------------------\n\nTITLE: Complete Example Using BOOST_PARAMETER_BASIC_CONST_FUNCTION_CALL_OPERATOR Macro\nDESCRIPTION: Shows a complete example using the BOOST_PARAMETER_BASIC_CONST_FUNCTION_CALL_OPERATOR macro to implement a function call operator that handles different argument types and preserves value categories.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_66\n\nLANGUAGE: cpp\nCODE:\n```\nstruct B\n{\n    B()\n    {\n    }\n\n    BOOST_PARAMETER_BASIC_CONST_FUNCTION_CALL_OPERATOR((bool), kw,\n        (deduced\n            (required\n                (lrc, (|std_bitset|_\\<1>))\n                (lr, (|std_bitset|_\\<2>))\n            )\n            (optional\n                (rrc, (|std_bitset|_\\<3>))\n                (rr, (|std_bitset|_\\<4>))\n            )\n        )\n    )\n    {\n        BOOST_TEST_EQ(\n            passed_by_lvalue_reference_to_const\n          , U::evaluate_category<0>(args[_lrc])\n        );\n        BOOST_TEST_EQ(\n            passed_by_lvalue_reference\n          , U::evaluate_category<1>(args[_lr])\n        );\n        BOOST_TEST_EQ(\n            passed_by_rvalue_reference_to_const\n          , U::evaluate_category<2>(\n                args[_rrc0 | rvalue_const_bitset<2>()]\n            )\n        );\n        BOOST_TEST_EQ(\n            passed_by_rvalue_reference\n          , U::evaluate_category<3>(\n                args[_rr0 | rvalue_bitset<3>()]\n            )\n        );\n\n        return true;\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Error Info Structure in C++\nDESCRIPTION: Definition of a basic error_info structure containing an error code and file name for error handling.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/leaf/doc/whitepaper.md#2025-04-22_snippet_3\n\nLANGUAGE: c++\nCODE:\n```\nstruct error_info\n{\n  int error_code;\n  std::string file_name;\n};\n```\n\n----------------------------------------\n\nTITLE: Using Unchecked Result Type in C++ with Outcome\nDESCRIPTION: Shows the usage of the unchecked result type in Outcome, which guarantees that exceptions can never be thrown. This is useful for scenarios where predictable execution is paramount.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/faq/_index.md#2025-04-22_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\noutcome::unchecked<T, E = varies> unchecked_result;\n```\n\n----------------------------------------\n\nTITLE: Implementing reverse_iterator Class Template in C++\nDESCRIPTION: Defines the reverse_iterator class template with member types, constructors, and basic operations. It uses iterator_traits to derive types from the underlying Iterator.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/reverse_iterator_ref.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <class Iterator>\nclass reverse_iterator\n{\npublic:\n  typedef iterator_traits<Iterator>::value_type value_type;\n  typedef iterator_traits<Iterator>::reference reference;\n  typedef iterator_traits<Iterator>::pointer pointer;\n  typedef iterator_traits<Iterator>::difference_type difference_type;\n  typedef /* see below */ iterator_category;\n\n  reverse_iterator() {}\n  explicit reverse_iterator(Iterator x) ;\n\n  template<class OtherIterator>\n  reverse_iterator(\n      reverse_iterator<OtherIterator> const& r\n    , typename enable_if_convertible<OtherIterator, Iterator>::type* = 0 // exposition\n  );\n  Iterator const& base() const;\n  reference operator*() const;\n  reverse_iterator& operator++();\n  reverse_iterator& operator--();\nprivate:\n  Iterator m_iterator; // exposition\n};\n```\n\n----------------------------------------\n\nTITLE: Template Replace Method for Smart Pointers in C++\nDESCRIPTION: This template method allows replacing an element using a compatible smart pointer, facilitating smarter memory management by wrapping the operation in a replacement method that requires strong exception guarantees.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/reversible_ptr_container.rst#2025-04-22_snippet_16\n\nLANGUAGE: C++\nCODE:\n```\ntemplate< class U > auto_type replace( iterator position, compatible-smart-ptr<U> x );\n```\n\n----------------------------------------\n\nTITLE: Using boost::locale::format::str() for locale-specific string generation\nDESCRIPTION: This snippet shows how to generate formatted strings for different locales using the str() member function of boost::locale::format.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/doc/localized_text_formatting.txt#2025-04-22_snippet_8\n\nLANGUAGE: C++\nCODE:\n```\nstd::wstring de = (wformat(translate(\"Adding {1} to {2}, we get {3}\")) % a % b % (a+b)).str(de_locale);\nstd::wstring fr = (wformat(translate(\"Adding {1} to {2}, we get {3}\")) % a % b % (a+b)).str(fr_locale);\n```\n\n----------------------------------------\n\nTITLE: Namespace and Header Definition C++\nDESCRIPTION: Specifies the namespace and header file location for the basic_result concept implementation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/concepts/basic_result.md#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nBOOST_OUTCOME_V2_NAMESPACE::concepts\\n#include <boost/outcome/basic_result.hpp>\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost Safe Numerics as Part of Larger Project in CMake\nDESCRIPTION: This snippet configures the Boost Safe Numerics library when it's part of a larger project. It sets up the library as an interface target and defines its dependencies.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/safe_numerics/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.8...3.20)\n\nproject(boost_safe_numerics VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n\nadd_library(boost_safe_numerics INTERFACE)\nadd_library(Boost::safe_numerics ALIAS boost_safe_numerics)\n\ntarget_include_directories(boost_safe_numerics INTERFACE include)\n\ntarget_link_libraries(boost_safe_numerics\n  INTERFACE\n    Boost::concept_check\n    Boost::config\n    Boost::core\n    Boost::integer\n    Boost::logic\n    Boost::mp11\n)\n\ntarget_compile_features(boost_safe_numerics INTERFACE cxx_std_14)\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost Thread Library with Platform-Specific Settings in CMake\nDESCRIPTION: Sets up platform-specific source files for the Boost Thread library, handling differences between MSVC and other platforms.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/CMakeLists.txt#2025-04-22_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nif(MSVC)\n  list(APPEND BOOST_THREAD_PLATFORM_SRC\n    ${boost_src}/libs/thread/src/win32/thread.cpp\n    ${boost_src}/libs/thread/src/win32/tss_dll.cpp\n    ${boost_src}/libs/thread/src/win32/tss_pe.cpp\n  )\nelse()\n  list(APPEND BOOST_THREAD_PLATFORM_SRC\n    ${boost_src}/libs/thread/src/pthread/once.cpp\n    ${boost_src}/libs/thread/src/pthread/once_atomic.cpp\n    ${boost_src}/libs/thread/src/pthread/thread.cpp\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Evaluating Deduced Arguments in C++\nDESCRIPTION: Examples of function evaluation using deduced arguments, showing how parameter types can be automatically deduced from the provided values.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_61\n\nLANGUAGE: cpp\nCODE:\n```\nb.evaluate(  // deduced arguments\n    rvalue_bitset<3>()\n  , lvalue_const_bitset<0>()\n  , lvalue_bitset<1>()\n  , rvalue_const_bitset<2>()\n);\nb.evaluate(  // deduced arguments\n    lvalue_bitset<1>()\n  , lvalue_const_bitset<0>()\n);\n```\n\n----------------------------------------\n\nTITLE: Installing S2 Header Files for S2 Library in CMake\nDESCRIPTION: This snippet installs multiple header files for the S2 library, organizing them into directories based on functionality. The installation destination is defined according to the CMAKE_INSTALL_INCLUDEDIR directory variable. This is crucial for users to integrate the library correctly in their projects.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/s2geometry/master/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(FILES src/s2/_fp_contract_off.h\n              src/s2/encoded_s2cell_id_vector.h\n              src/s2/encoded_s2point_vector.h\n              src/s2/encoded_s2shape_index.h\n              src/s2/encoded_string_vector.h\n              src/s2/encoded_uint_vector.h\n              src/s2/id_set_lexicon.h\n              src/s2/mutable_s2shape_index.h\n              src/s2/r1interval.h\n              src/s2/r2.h\n              src/s2/r2rect.h\n              src/s2/s1angle.h\n              src/s2/s1chord_angle.h\n              src/s2/s1interval.h\n              src/s2/s2boolean_operation.h\n              src/s2/s2buffer_operation.h\n              src/s2/s2builder.h\n              src/s2/s2builder_graph.h\n              src/s2/s2builder_layer.h\n              src/s2/s2builderutil_closed_set_normalizer.h\n              src/s2/s2builderutil_find_polygon_degeneracies.h\n              src/s2/s2builderutil_get_snapped_winding_delta.h\n              src/s2/s2builderutil_graph_shape.h\n              src/s2/s2builderutil_lax_polygon_layer.h\n              src/s2/s2builderutil_lax_polyline_layer.h\n              src/s2/s2builderutil_s2point_vector_layer.h\n              src/s2/s2builderutil_s2polygon_layer.h\n              src/s2/s2builderutil_s2polyline_layer.h\n              src/s2/s2builderutil_s2polyline_vector_layer.h\n              src/s2/s2builderutil_snap_functions.h\n              src/s2/s2builderutil_testing.h\n              src/s2/s2cap.h\n              src/s2/s2cell.h\n              src/s2/s2cell_id.h\n              src/s2/s2cell_index.h\n              src/s2/s2cell_union.h\n              src/s2/s2centroids.h\n              src/s2/s2closest_cell_query.h\n              src/s2/s2closest_cell_query_base.h\n              src/s2/s2closest_edge_query.h\n              src/s2/s2closest_edge_query_base.h\n              src/s2/s2closest_point_query.h\n              src/s2/s2closest_point_query_base.h\n              src/s2/s2contains_point_query.h\n              src/s2/s2contains_vertex_query.h\n              src/s2/s2convex_hull_query.h\n              src/s2/s2coords_internal.h\n              src/s2/s2coords.h\n              src/s2/s2crossing_edge_query.h\n              src/s2/s2debug.h\n              src/s2/s2distance_target.h\n              src/s2/s2earth.h\n              src/s2/s2edge_clipping.h\n              src/s2/s2edge_crosser.h\n              src/s2/s2edge_crossings.h\n              src/s2/s2edge_crossings_internal.h\n              src/s2/s2edge_distances.h\n              src/s2/s2edge_tessellator.h\n              src/s2/s2edge_vector_shape.h\n              src/s2/s2error.h\n              src/s2/s2furthest_edge_query.h\n              src/s2/s2hausdorff_distance_query.h\n              src/s2/s2latlng.h\n              src/s2/s2latlng_rect.h\n              src/s2/s2latlng_rect_bounder.h\n              src/s2/s2lax_loop_shape.h\n              src/s2/s2lax_polygon_shape.h\n              src/s2/s2lax_polyline_shape.h\n              src/s2/s2loop.h\n              src/s2/s2loop_measures.h\n              src/s2/s2measures.h\n              src/s2/s2memory_tracker.h\n              src/s2/s2metrics.h\n              src/s2/s2max_distance_targets.h\n              src/s2/s2min_distance_targets.h\n              src/s2/s2padded_cell.h\n              src/s2/s2point.h\n              src/s2/s2point_vector_shape.h\n              src/s2/s2point_compression.h\n              src/s2/s2point_index.h\n              src/s2/s2point_region.h\n              src/s2/s2point_span.h\n              src/s2/s2pointutil.h\n              src/s2/s2polygon.h\n              src/s2/s2polyline.h\n              src/s2/s2polyline_alignment.h\n              src/s2/s2polyline_measures.h\n              src/s2/s2polyline_simplifier.h\n              src/s2/s2predicates.h\n              src/s2/s2predicates_internal.h\n              src/s2/s2projections.h\n              src/s2/s2r2rect.h\n              src/s2/s2region.h\n              src/s2/s2region_term_indexer.h\n              src/s2/s2region_coverer.h\n              src/s2/s2region_intersection.h\n              src/s2/s2region_union.h\n              src/s2/s2shape.h\n              src/s2/s2shape_index.h\n              src/s2/s2shape_index_buffered_region.h\n              src/s2/s2shape_index_region.h\n              src/s2/s2shape_measures.h\n              src/s2/s2shape_nesting_query.h\n              src/s2/s2shapeutil_build_polygon_boundaries.h\n              src/s2/s2shapeutil_coding.h\n              src/s2/s2shapeutil_contains_brute_force.h\n              src/s2/s2shapeutil_conversion.h\n              src/s2/s2shapeutil_count_edges.h\n              src/s2/s2shapeutil_edge_iterator.h\n              src/s2/s2shapeutil_get_reference_point.h\n              src/s2/s2shapeutil_range_iterator.h\n              src/s2/s2shapeutil_shape_edge.h\n              src/s2/s2shapeutil_shape_edge_id.h\n              src/s2/s2shapeutil_testing.h\n              src/s2/s2shapeutil_visit_crossing_edge_pairs.h\n              src/s2/s2testing.h\n              src/s2/s2text_format.h\n              src/s2/s2wedge_relations.h\n              src/s2/s2winding_operation.h\n              src/s2/s2wrapped_shape.h\n              src/s2/sequence_lexicon.h\n              src/s2/thread_testing.h\n              src/s2/value_lexicon.h\n        DESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}/s2\")\n```\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(FILES src/s2/base/casts.h\n              src/s2/base/commandlineflags.h\n              src/s2/base/integral_types.h\n              src/s2/base/log_severity.h\n              src/s2/base/logging.h\n              src/s2/base/port.h\n              src/s2/base/spinlock.h\n        DESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}/s2/base\")\n```\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(FILES src/s2/util/bitmap/bitmap.h\n        DESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}/s2/util/bitmap\")\n```\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(FILES src/s2/util/bits/bits.h\n        DESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}/s2/util/bits\")\n```\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(FILES src/s2/util/coding/coder.h\n              src/s2/util/coding/varint.h\n        DESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}/s2/util/coding\")\n```\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(FILES src/s2/util/endian/endian.h\n        DESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}/s2/util/endian\")\n```\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(FILES src/s2/util/gtl/compact_array.h\n              src/s2/util/gtl/container_logging.h\n              src/s2/util/gtl/dense_hash_set.h\n              src/s2/util/gtl/densehashtable.h\n              src/s2/util/gtl/hashtable_common.h\n        DESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}/s2/util/gtl\")\n```\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(FILES src/s2/util/hash/mix.h\n        DESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}/s2/util/hash\")\n```\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(FILES src/s2/util/math/mathutil.h\n              src/s2/util/math/matrix3x3.h\n              src/s2/util/math/vector.h\n        DESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}/s2/util/math\")\n```\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(FILES src/s2/util/math/exactfloat/exactfloat.h\n        DESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}/s2/util/math/exactfloat\")\n```\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(FILES src/s2/util/units/length-units.h\n              src/s2/util/units/physical-units.h\n        DESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}/s2/util/units\")\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Agency Library\nDESCRIPTION: Configures private include directories for the arango_agency library, specifying paths for ArangoDB source and potential enterprise includes\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/Agency/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(arango_agency PRIVATE\n  \"${PROJECT_SOURCE_DIR}/arangod\"\n  \"${PROJECT_SOURCE_DIR}/${ENTERPRISE_INCLUDE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Variadic Fold Helper Function in C++\nDESCRIPTION: This code snippet defines a helper struct v_fold that implements the core logic for performing a variadic fold operation. It recursively applies the binary function to the arguments and handles the base case.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/fold.hpp.txt#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nstruct v_fold\n{\n    BOOST_HOF_RETURNS_CLASS(v_fold);\n    template<class F, class State, class T, class... Ts>\n    constexpr BOOST_HOF_SFINAE_MANUAL_RESULT(const v_fold&, id_<const F&>, result_of<const F&, id_<State>, id_<T>>, id_<Ts>...)\n    operator()(const F& f, State&& state, T&& x, Ts&&... xs) const BOOST_HOF_SFINAE_MANUAL_RETURNS\n    (\n        (*BOOST_HOF_CONST_THIS)(f, f(BOOST_HOF_FORWARD(State)(state), BOOST_HOF_FORWARD(T)(x)), BOOST_HOF_FORWARD(Ts)(xs)...)\n    );\n\n    template<class F, class State>\n    constexpr State operator()(const F&, State&& state) const noexcept\n    {\n        return BOOST_HOF_FORWARD(State)(state);\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Checking Exception Presence in C++ Implementation\nDESCRIPTION: This static function checks if an exception is present in the given implementation. It is constexpr where possible, has constant time complexity, and never throws an exception. It's always available in the library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/policies/base/has_exception.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nstatic bool _has_exception(Impl &&) noexcept\n```\n\n----------------------------------------\n\nTITLE: Defining apply function signature and semantics in C++\nDESCRIPTION: Defines the function signature for boost::hof::apply that calls a function with its arguments. The documentation includes the requirements, semantics, and usage examples.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/apply.hpp.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<class F, class... Ts>\nconstexpr auto apply(F&& f, Ts&&... xs);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating TRY Corner Case Bug in C++\nDESCRIPTION: Code example showing a corner case where BOOST_OUTCOME_TRY was broken for reference passthrough filter functions, which could cause undefined behavior due to premature result destruction.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/changelog/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\noutcome::result<Foo>    get_foo();\noutcome::result<Foo>    filter1(outcome::result<Foo> &&);\noutcome::result<Foo> && filter2(outcome::result<Foo> &&);\n\n// This works fine, and always has\nBOOST_OUTCOME_TRY(auto v, filter1(get_foo()))\n\n// This causes UB due to result<Foo> being destructed before move of value into v\nBOOST_OUTCOME_TRY(auto v, filter2(get_foo()))\n```\n\n----------------------------------------\n\nTITLE: Creating Layouts for RGBA Color Space in Boost.GIL\nDESCRIPTION: This snippet provides templates to create different layouts for the RGBA color space in Boost.GIL by manipulating channel order using mpl::vector4_c. The default and customized orders like bgra, argb, and abgr are shown, enabling flexible memory ordering of channels.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/color_space.rst.txt#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate\\n<\\n    typename ColorSpace,\\n    typename ChannelMapping = mpl::range_c<int, 0, mpl::size<ColorSpace>::value>\\n>\\nstruct layout\\n{\\n  using color_space_t = ColorSpace;\\n  using channel_mapping_t = ChannelMapping;\\n};\n```\n\nLANGUAGE: cpp\nCODE:\n```\nusing rgba_layout_t = layout<rgba_t>; // default ordering is 0,1,2,3...\\nusing bgra_layout_t = layout<rgba_t, mpl::vector4_c<int,2,1,0,3>>;\\nusing argb_layout_t = layout<rgba_t, mpl::vector4_c<int,1,2,3,0>>;\\nusing abgr_layout_t = layout<rgba_t, mpl::vector4_c<int,3,2,1,0>>;\n```\n\n----------------------------------------\n\nTITLE: Exporting Functions in CommonJS JavaScript Modules\nDESCRIPTION: This code snippet exports an 'add' function that sums an arbitrary number of arguments using the CommonJS module format. It is a part of 'math.js' and should be used where 'math' need be required. The 'exports' object is central for making the API available outside of this module.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/js/common/test-data/modules/commonjs/docs/specs/modules/1.0.html.markdown#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexports.add = function() {\n    var sum = arguments[0];\n    for (var i=1; i < arguments.length; i++) {\n        sum += arguments[i];\n    }\n    return sum;\n};\n```\n\n----------------------------------------\n\nTITLE: Using Unique Algorithm with Pointer Containers in C++\nDESCRIPTION: Demonstrates how to remove adjacent duplicate elements from pointer containers using the unique method. The example shows both using the default equality operator and a custom comparison predicate.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/tutorial.rst#2025-04-22_snippet_15\n\nLANGUAGE: cpp\nCODE:\n```\nzoo.unique();                             // assume 'bool operator==( const animal&, const animal& )'\nzoo.unique( zoo.begin(), zoo.begin() + 5, my_comparison_predicate() );\n```\n\n----------------------------------------\n\nTITLE: Implementing Failure Combination and Transformation in C++\nDESCRIPTION: Defines structures for combining multiple failures and applying transformations. It uses variadic templates and SFINAE techniques for flexible failure handling.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/reveal.hpp.txt#2025-04-22_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<class Failure, class... Failures>\nstruct failures \n{\n    template<class Transform>\n    BOOST_HOF_USING(transform, with_failures<detail::transform_failures<Failure, Transform>, detail::transform_failures<Failures, Transform>...>);\n\n    template<class F, class FailureBase=BOOST_HOF_JOIN(failures, Failures...)>\n    struct overloads\n    : detail::traverse_failure<F, Failure>, FailureBase::template overloads<F>\n    {\n        constexpr overloads()\n        {}\n        using detail::traverse_failure<F, Failure>::operator();\n        using FailureBase::template overloads<F>::operator();\n    };\n};\n\ntemplate<class Failure>\nstruct failures<Failure>\n{\n    template<class Transform>\n    BOOST_HOF_USING(transform, with_failures<detail::transform_failures<Failure, Transform>>);\n\n    template<class F>\n    BOOST_HOF_USING(overloads, detail::traverse_failure<F, Failure>);\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Boost ptr_set Template Class\nDESCRIPTION: Template definition for ptr_set with configurable key type, comparison, clone allocator, and allocator. Inherits from ptr_set_adapter and uses std::set as underlying container.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/ptr_set.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate\n< \n    class Key, \n    class Compare        = std::less<Key>, \n    class CloneAllocator = heap_clone_allocator, \n    class Allocator      = std::allocator<void*>\n>\nclass ptr_set : public ptr_set_adapter\n    <\n        Key,\n        std::set<void*,\n        void_ptr_indirect_fun<Compare,Key>,Allocator>,\n        CloneAllocator\n    >\n{\n    // see references\n};\n```\n\n----------------------------------------\n\nTITLE: Including Deque Header in C++\nDESCRIPTION: This snippet shows how to include the necessary header file for using the deque data structure in C++.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/deque.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/deque.hpp>\n```\n\n----------------------------------------\n\nTITLE: Constructing Image Views from Raw Data in C++\nDESCRIPTION: Interleaved and planar image views can be constructed from raw data arrays with various color spaces and channel orderings using these functions. The interleaved_view and planar_rgb_view templates allow for specification of pixel location, dimensions, and layout in memory when creating image view objects.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/image_view.rst.txt#2025-04-22_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\n// Iterator models pixel iterator (e.g. rgb8_ptr_t or rgb8c_ptr_t) template <typename Iterator> image_view<...> interleaved_view(ptrdiff_t width, ptrdiff_t height, Iterator pixels, ptrdiff_t rowsize)\n```\n\nLANGUAGE: cpp\nCODE:\n```\n// Iterator models channel iterator (e.g. bits8* or bits8 const*) template <typename Iterator> image_view<...> planar_rgb_view( ptrdiff_t width, ptrdiff_t height, IC r, IC g, IC b, ptrdiff_t rowsize);\n```\n\n----------------------------------------\n\nTITLE: Including CMake Modules and Setting Global Options\nDESCRIPTION: Includes necessary CMake modules and sets global project options like C++ standard and compiler flags.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/s2geometry/master/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(CMakeDependentOption)\ninclude(CheckCXXCompilerFlag)\ninclude(FeatureSummary)\ninclude(FindPackageHandleStandardArgs)\ninclude(GNUInstallDirs)\n\nset(CMAKE_EXPORT_COMPILE_COMMANDS ON)\n# Avoid \"Policy CMP0042 is not set\" warning on macOS.\nif (APPLE)\n    set(CMAKE_MACOSX_RPATH TRUE)\nendif()\n\nset(CMAKE_CXX_STANDARD 11 CACHE STRING \"The C++ standard to build with\")\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\nset(CMAKE_CXX_EXTENSIONS OFF)\n```\n\n----------------------------------------\n\nTITLE: Generating Compile Commands Database\nDESCRIPTION: Shell command to generate a compilation database for clang-tidy refactoring process using CMake export feature\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/CONTRIBUTING.md#2025-04-22_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\ncd libs/gil\ncmake -S . -B _build -DCMAKE_EXPORT_COMPILE_COMMANDS=ON\n```\n\n----------------------------------------\n\nTITLE: Implementing Metafunction-Based Construction in C++\nDESCRIPTION: A function object for constructing objects using metafunctions. It applies a MetafunctionClass to deduce the result type, then constructs an object of that type with the provided arguments.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/construct.hpp.txt#2025-04-22_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<class MetafunctionClass>\nstruct construct_meta_f\n{\n    constexpr construct_meta_f() noexcept\n    {}\n\n    template<class... Ts>\n    struct apply\n    : MetafunctionClass::template apply<Ts...>\n    {};\n\n    template<class... Ts, \n        class Metafunction=BOOST_HOF_JOIN(apply, Ts...), \n        class Result=typename Metafunction::type, \n        BOOST_HOF_ENABLE_IF_CONSTRUCTIBLE(Result, Ts...)>\n    constexpr Result operator()(Ts&&... xs) const BOOST_HOF_NOEXCEPT_CONSTRUCTIBLE(Result, Ts&&...)\n    {\n        return construct_f<Result>()(BOOST_HOF_FORWARD(Ts)(xs)...);\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Static Exception Check Function Declaration\nDESCRIPTION: Defines a static function that performs a narrow exception check with undefined behavior if no exception is present. The function is constexpr-capable and guaranteed to never throw exceptions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/policies/base/narrow_exception_check.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nstatic void narrow_exception_check(Impl &&) noexcept\n```\n\n----------------------------------------\n\nTITLE: Defining LZ4 Source Files for Library and CLI\nDESCRIPTION: Lists all source files needed for building the LZ4 library and command-line interface programs. This includes core compression functionality, benchmarking tools, and I/O handling components.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/lz4/build/cmake/CMakeLists.txt#2025-04-22_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\n# CLI sources\nset(LZ4_SOURCES\n  \"${LZ4_LIB_SOURCE_DIR}/lz4.c\"\n  \"${LZ4_LIB_SOURCE_DIR}/lz4hc.c\"\n  \"${LZ4_LIB_SOURCE_DIR}/lz4.h\"\n  \"${LZ4_LIB_SOURCE_DIR}/lz4hc.h\"\n  \"${LZ4_LIB_SOURCE_DIR}/lz4frame.c\"\n  \"${LZ4_LIB_SOURCE_DIR}/lz4frame.h\"\n  \"${LZ4_LIB_SOURCE_DIR}/xxhash.c\")\nset(LZ4_CLI_SOURCES\n  \"${LZ4_PROG_SOURCE_DIR}/bench.c\"\n  \"${LZ4_PROG_SOURCE_DIR}/lz4cli.c\"\n  \"${LZ4_PROG_SOURCE_DIR}/lz4io.c\"\n  \"${LZ4_PROG_SOURCE_DIR}/datagen.c\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Python call Interface with call Template\nDESCRIPTION: Template class for defining a __call__ operator in Python, mapped to operator() in C++. Used for exposing C++ functors to Python with named parameters.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter_python/doc/index.rst#2025-04-22_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <class ParameterSpecs>\nstruct call : python::def_visitor<call<ParameterSpecs> >\n{\n    template <class Class> \n    void def(Class& class_);\n\n    template <class CallPolicies>\n    *def_visitor* operator[](CallPolicies const& policies) const;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Pixel Base Concepts in C++\nDESCRIPTION: Defines core metafunctions and requirements for pixel-based types, including color space, channel mapping, and pixel characteristics\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/pixel.rst#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nconcept PixelBasedConcept<typename T>\n{\n    typename color_space_type<T>;\n    typename channel_mapping_type<T>;\n    typename is_planar<T>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Identity-Based Evaluation Strategy in C++\nDESCRIPTION: Defines an 'id_eval' struct that implements an evaluation strategy for unary functions that take the identity function as a parameter. This allows for delayed compile-time checking.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/eval.hpp.txt#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nstruct id_eval\n{\n    template<class F, class... Ts>\n    constexpr BOOST_HOF_SFINAE_RESULT(F, id_<decltype(boost::hof::identity)>) \n    operator()(F&& f, Ts&&...xs) const BOOST_HOF_SFINAE_RETURNS\n    (boost::hof::always_ref(f)(xs...)(boost::hof::identity));\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Zip Iterator Class Template in C++\nDESCRIPTION: Core implementation of the zip_iterator template class that combines multiple iterators into a single iterator. Includes basic iterator type definitions and constructors.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/zip_iterator_ref.rst#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate<typename IteratorTuple>\nclass zip_iterator\n{  \n\npublic:\n  typedef /* see below */ reference;\n  typedef reference value_type;\n  typedef value_type* pointer;\n  typedef /* see below */ difference_type;\n  typedef /* see below */ iterator_category;\n\n  zip_iterator();\n  zip_iterator(IteratorTuple iterator_tuple);\n\n  template<typename OtherIteratorTuple>\n  zip_iterator(\n        const zip_iterator<OtherIteratorTuple>& other\n      , typename enable_if_convertible<\n              OtherIteratorTuple\n            , IteratorTuple>::type* = 0     // exposition only\n  );\n\n  const IteratorTuple& get_iterator_tuple() const;\n\nprivate:\n  IteratorTuple m_iterator_tuple;     // exposition only\n};\n\ntemplate<typename IteratorTuple> \nzip_iterator<IteratorTuple> \nmake_zip_iterator(IteratorTuple t);\n```\n\n----------------------------------------\n\nTITLE: Adding Edges by Vertex Name in a Distributed Graph\nDESCRIPTION: This snippet illustrates how to add an edge to the distributed graph using the names of the vertices instead of their descriptors, facilitating user-friendly manipulation of the graph by name.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/distributed_adjacency_list.rst#2025-04-22_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\nadd_edge(\"Indianapolis\", \"Chicago\", Highway(\"I-65\", 4, 65, 151), map);\n```\n\n----------------------------------------\n\nTITLE: CMake project setup and Boost/wxWidgets package finding\nDESCRIPTION: This snippet sets up the CMake project, specifies the C++ standard, and attempts to locate the Boost and wxWidgets packages. It relies on environment variables BOOST_ROOT and WX_ROOT to be set correctly for the package finding to work as intended.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/geometry/example/with_external_libs/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n\nproject(with_external_libs)\n\nset(CMAKE_CXX_STANDARD 14)\nset(CMAKE_CXX_STANDARD_REQUIRED True)\n\n# Set BOOST_ROOT in your environment (this is cmake default)\nfind_package(Boost)\n\n# Set WX_ROOT, similarly, also in your environment\nset(WX_ROOT $ENV{WX_ROOT})\nmessage(STATUS \"Using wxWidgets from this folder: \" $ENV{WX_ROOT})\n```\n\n----------------------------------------\n\nTITLE: Function Declaration for boost::iterators::advance\nDESCRIPTION: Template function declaration for advancing an iterator by a specified distance. The function moves an iterator forward by n increments or backward by |n| decrements if n is negative. Requires Iterator to model Incrementable Iterator.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/advance.rst#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <typename Iterator, typename Distance>\nconstexpr void advance(Iterator& it, Distance n);\n```\n\n----------------------------------------\n\nTITLE: Building Argument Packs with Positional Arguments\nDESCRIPTION: This code shows how to use a ParameterSpec to build an ArgumentPack with positional arguments. The spec describes the order of parameters and their type requirements, and can be invoked with both positional and named arguments.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/index.rst#2025-04-22_snippet_38\n\nLANGUAGE: cpp\nCODE:\n```\nparameter::parameters<\n    required<tag::name, is_convertible<_,char const*> >\n  , optional<tag::index, is_convertible<_,int> >\n> spec;\n\nchar const sam[] = \"sam\";\nint twelve = 12;\n\nint z0 = print_name_and_index(\n    spec( sam, twelve )\n);\n\nint z1 = print_name_and_index( \n    spec( _index=12, _name=\"sam\" ) \n);\n```\n\n----------------------------------------\n\nTITLE: Template Implementation of Boost Parameter Function Call Operator\nDESCRIPTION: Core template implementation that handles parameter dispatching and forwarding for the function call operator. Supports multiple argument types and value categories.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_37\n\nLANGUAGE: C++\nCODE:\n```\nboost_param_impl ## __LINE__ ## operator(Args const& args)\n{\n    return this->boost_param_dispatch_0boost\\_ ## __LINE__ ## operator(\n        static_cast<\n            typename boost_param_result\\_ ## __LINE__ ## operator<\n                Args\n            >::type(*)()>\n        >(|std_nullptr|_\\)\n      , args\n      , |std_forward|_\\<\n            typename |value_type|_\\<\n                Args\n              , *keyword tag type of required parameter* ## **0**\n            >::type\n        >(args[ *keyword object of required parameter* ## **0**])\n      , …\n      , |std_forward|_\\<\n            typename |value_type|_\\<\n                Args\n              , *keyword tag type of required parameter* ## **n**\n            >::type\n        >(args[ *keyword object of required parameter* ## **n**])\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Function Output Iterator Class Template in C++\nDESCRIPTION: This snippet defines the function_output_iterator class template. It includes typedefs for iterator traits and declares constructors and operators. The class uses a private member m_f of type UnaryFunction.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/func_output_iter_ref.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <class UnaryFunction>\nclass function_output_iterator {\npublic:\n  typedef std::output_iterator_tag iterator_category;\n  typedef void                     value_type;\n  typedef void                     difference_type;\n  typedef void                     pointer;\n  typedef void                     reference;\n\n  explicit function_output_iterator();\n\n  explicit function_output_iterator(const UnaryFunction& f);\n\n  /* see below */ operator*();\n  function_output_iterator& operator++();\n  function_output_iterator& operator++(int);\nprivate:\n  UnaryFunction m_f;     // exposition only\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Unicode Conversion with mbrtowc and wcrtomb in C\nDESCRIPTION: This snippet describes the suggested approach for handling Unicode conversion in C when dealing with locale-specific multi-byte encodings. It recommends using `mbrtowc` and `wcrtomb` to convert between Unicode and the locale-dependent multi-byte encoding used in filenames and text files, particularly when the `__STDC_ISO_10646__` symbol is defined, indicating that `wchar_t` is equivalent to UCS.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/filesystem/doc/POSIX_filename_encoding.txt#2025-04-22_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n\"Simply use mbrtowc and wcrtomb to\nconvert between Unicode and the locale-dependent multi-byte encoding\nused in file names and text files if the ISO C 99 symbol\n__STDC_ISO_10646__ is defined (which guarantees that wchar_t = UCS). On\nLinux, this has been the case since glibc 2.2.\"\n```\n\n----------------------------------------\n\nTITLE: Repeater Template Implementation in C++\nDESCRIPTION: Core implementation of the repeater functionality that recursively applies a function N times. The template recursively decrements N until reaching the base case of 0.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/repeat.hpp.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<int N>\nstruct repeater\n{\n    template<class F, class... Ts>\n    constexpr BOOST_HOF_SFINAE_RESULT(repeater<N-1>, id_<const F&>, result_of<const F&, id_<Ts>...>) \n    operator()(const F& f, Ts&&... xs) const BOOST_HOF_SFINAE_RETURNS\n    (\n        repeater<N-1>()(f, f(BOOST_HOF_FORWARD(Ts)(xs)...))\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Using lambda Template with int_plus in C++\nDESCRIPTION: Demonstrates the usage of lambda template with a custom int_plus template. It shows how lambda transforms the placeholder expression into a metafunction class and compares it with an equivalent bind expression.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/lambda.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ntemplate< typename N1, typename N2 > struct int_plus\n    : int_<( N1::value + N2::value )>\n{\n};\n\ntypedef lambda< int_plus<_1, int_<42> > >::type f1;\ntypedef bind< quote2<int_plus>, _1, int_<42> > f2;\n\ntypedef f1::apply<42>::type r1;\ntypedef f2::apply<42>::type r2;\n\nBOOST_MPL_ASSERT_RELATION( r1::value, ==, 84 );\nBOOST_MPL_ASSERT_RELATION( r2::value, ==, 84 );\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost Concept Check CMake Build\nDESCRIPTION: Sets up CMake configuration for the Boost Concept Check library including version requirements, project definition, library targets, and dependencies. Creates an interface library with necessary include directories and links to required Boost components.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/concept_check/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.20)\n\nproject(boost_concept_check VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n\nadd_library(boost_concept_check INTERFACE)\n\nadd_library(Boost::concept_check ALIAS boost_concept_check)\n\ntarget_include_directories(boost_concept_check INTERFACE include)\n\ntarget_link_libraries(boost_concept_check INTERFACE\n    Boost::config\n    Boost::preprocessor\n    Boost::static_assert\n    Boost::type_traits\n)\n```\n\n----------------------------------------\n\nTITLE: Defining a New RGB Channel Type in C++\nDESCRIPTION: This snippet demonstrates how to define a new RGB channel type, including its pixel and image type definitions, using template programming in C++. It utilizes existing templates to create types for a 64-bit RGB pixel and its pointer reference.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/extending.rst#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n  typedef pixel<double,rgb_layout_t>   rgb64_pixel_t;    // 64 bit RGB pixel\n  typedef rgb64_pixel*                 rgb64_pixel_ptr_t;// pointer to 64-bit interleaved data\n  typedef image_type<double,rgb_layout_t>::type rgb64_image_t;    // 64-bit interleaved image\n```\n\n----------------------------------------\n\nTITLE: Implementing Fold Function Adaptor in C++\nDESCRIPTION: This code snippet defines the fold_adaptor class template, which implements the core functionality of the fold operation. It handles both cases with and without an initial state, and uses SFINAE and perfect forwarding for optimal performance.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/fold.hpp.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<class F, class State=void>\nstruct fold_adaptor\n: detail::compressed_pair<detail::callable_base<F>, State>\n{\n    typedef detail::compressed_pair<detail::callable_base<F>, State> base_type;\n    BOOST_HOF_INHERIT_CONSTRUCTOR(fold_adaptor, base_type)\n\n    template<class... Ts>\n    constexpr const detail::callable_base<F>& base_function(Ts&&... xs) const noexcept\n    {\n        return this->first(xs...);\n    }\n\n    template<class... Ts>\n    constexpr State get_state(Ts&&... xs) const noexcept\n    {\n        return this->second(xs...);\n    }\n\n    BOOST_HOF_RETURNS_CLASS(fold_adaptor);\n\n    template<class... Ts>\n    constexpr BOOST_HOF_SFINAE_RESULT(detail::v_fold, id_<const detail::callable_base<F>&>, id_<State>, id_<Ts>...)\n    operator()(Ts&&... xs) const BOOST_HOF_SFINAE_RETURNS\n    (\n        detail::v_fold()(\n            BOOST_HOF_MANGLE_CAST(const detail::callable_base<F>&)(BOOST_HOF_CONST_THIS->base_function(xs...)), \n            BOOST_HOF_MANGLE_CAST(State)(BOOST_HOF_CONST_THIS->get_state(xs...)), \n            BOOST_HOF_FORWARD(Ts)(xs)...\n        )\n    )\n};\n```\n\n----------------------------------------\n\nTITLE: Link arango_replication2 with arango_replication2_pure\nDESCRIPTION: This command links the `arango_replication2` library with `arango_replication2_pure`, indicating that `arango_replication2` depends on the functionalities provided by `arango_replication2_pure`.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/Replication2/CMakeLists.txt#2025-04-22_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(arango_replication2\n        arango_replication2_pure)\n```\n\n----------------------------------------\n\nTITLE: Category Evaluation Implementation\nDESCRIPTION: Implementation of value category evaluation helpers that determine how parameters are passed to functions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_39\n\nLANGUAGE: C++\nCODE:\n```\nenum invoked\n{\n    passed_by_lvalue_reference_to_const\n  , passed_by_lvalue_reference\n  , passed_by_rvalue_reference_to_const\n  , passed_by_rvalue_reference\n};\n\nstruct U\n{\n    template <std::size_t N>\n    static invoked evaluate_category(|std_bitset|_\\<N + 1> const&)\n    {\n        return passed_by_lvalue_reference_to_const;\n    }\n\n    template <std::size_t N>\n    static invoked evaluate_category(|std_bitset|_\\<N + 1>&)\n    {\n        return passed_by_lvalue_reference;\n    }\n\n    template <std::size_t N>\n    static invoked evaluate_category(|std_bitset|_\\<N + 1> const&&)\n    {\n        return passed_by_rvalue_reference_to_const;\n    }\n\n    template <std::size_t N>\n    static invoked evaluate_category(|std_bitset|_\\<N + 1>&&)\n    {\n        return passed_by_rvalue_reference;\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Mandelbrot Set Image Generation in C++\nDESCRIPTION: The `mandelbrot.cpp` generates an image depicting the Mandelbrot set, a popular complex fractal. This example uses fundamental C++ capabilities alongside Boost GIL for image creation and manipulation, if necessary. The output is a synthetic image based on the Mandelbrot set, saved as a PNG file or similar format. The expected input is parameter configurations for the fractal generation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/example/README.md#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\n\"int main() {\\n  // Your code here\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Synthesizing Exception from Error Type in C++ Outcome Library\nDESCRIPTION: This function synthesizes an exception type from an error type, used by the `.failure()` observers. It is ADL discovered and has default overloads for `std::error_code` and `boost::system::error_code`. The function is overridable through argument dependent lookup.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/functions/policy/basic_outcome_failure_exception_from_error.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nauto basic_outcome_failure_exception_from_error(const EC &)\n```\n\n----------------------------------------\n\nTITLE: Implementing C Shim Function for C++ Exception Handling\nDESCRIPTION: A traditional approach to exposing C++ functions to C code by creating a C shim that catches exceptions and converts them to error codes. This pattern is used when C code needs to call C++ functions that might throw exceptions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/experimental/c-api/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: c++\nCODE:\n```\n// The API we wish to expose to C\nconst char *get_value(double v);\n\n// The C shim function for the C++ get_value() function.\nextern \"C\" int c_get_value(const char **ret, double v)\n{\n  try\n  {\n    *ret = get_value(v);\n    return 0;  // success\n  }\n  catch(const std::range_error &)\n  {\n    return ERANGE;\n  }\n  // More catch clauses may go in here ...\n  catch(...)\n  {\n    return EAGAIN;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Serialize with Boost.HigherOrderFunctions\nDESCRIPTION: Implementation of a serialize function that attempts stringify first, then falls back to calling .serialize() method if available.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/src/example_overloading.md#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nBOOST_HOF_STATIC_LAMBDA_FUNCTION(serialize) = first_of(\n    [](auto x) BOOST_HOF_RETURNS(stringify(x)),\n    [](auto x) BOOST_HOF_RETURNS(x.serialize())\n);\n```\n\n----------------------------------------\n\nTITLE: Defining the 'back' Metafunction Template in C++\nDESCRIPTION: Declaration of the 'back' metafunction template from the Boost MPL library. This metafunction returns the last element in a bidirectional sequence when applied to a sequence type.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/back.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      typename Sequence\n    >\nstruct back\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Server Flex Example with OpenSSL in CMake\nDESCRIPTION: This CMake snippet configures the build for an HTTP server example using Boost.Beast and OpenSSL. It groups source files, defines the executable 'http-server-flex', sets its folder property, and links it with OpenSSL and other required libraries.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/beast/example/http/server/flex/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (OPENSSL_FOUND)\n    GroupSources(include/boost/beast beast)\n    GroupSources(example/common common)\n    GroupSources(example/http/server/flex \"/\")\n\n    add_executable (http-server-flex\n        ${BOOST_BEAST_FILES}\n        ${PROJECT_SOURCE_DIR}/example/common/server_certificate.hpp\n        Jamfile\n        http_server_flex.cpp\n    )\n\n    set_property(TARGET http-server-flex PROPERTY FOLDER \"example-http-server\")\n\n    target_link_libraries (http-server-flex\n        OpenSSL::SSL OpenSSL::Crypto\n        lib-asio\n        lib-asio-ssl\n        lib-beast\n        )\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Basic Result Structure Definition in C++\nDESCRIPTION: Defines the underlying C++ structure layout for basic_result<T, E> when used with C code. The structure contains a union of value and error members along with flags, and is designed to be trivially copyable and maintain standard layout when T and E are trivially copyable.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/experimental/c-api/reference.md#2025-04-22_snippet_0\n\nLANGUAGE: c++\nCODE:\n```\nstruct cxx_result_##ident\n{\n  union\n  {\n    T value;\n    E error;\n  };\n  unsigned flags;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Trivially Copyable Result Layout in C++\nDESCRIPTION: Demonstrates the memory layout of result when both value_type and error_type are trivially copyable. Shows the union-based structure with value, error and flags.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/faq/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: c++\nCODE:\n```\nstruct trivially_copyable_result_layout {\n  union {\n    value_type value;\n    error_type error;\n  };\n  unsigned int flags;\n};\n```\n\n----------------------------------------\n\nTITLE: Linking Dependencies for Boost Property Map Library\nDESCRIPTION: This snippet links several Boost libraries as dependencies for the Boost Property Map library. By declaring these as INTERFACE, it ensures that those linking against boost_property_map also inherit these dependencies, thus establishing necessary relationships between the libraries.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/property_map/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(boost_property_map\n  INTERFACE\n    Boost::any\n    Boost::assert\n    Boost::concept_check\n    Boost::config\n    Boost::core\n    Boost::function\n    Boost::iterator\n    Boost::lexical_cast\n    Boost::mpl\n    Boost::smart_ptr\n    Boost::static_assert\n    Boost::throw_exception\n    Boost::type_traits\n    Boost::utility\n)\n```\n\n----------------------------------------\n\nTITLE: Synchronous TCP Daytime Server Code Snippet\nDESCRIPTION: Code showing the implementation of a synchronous TCP server that listens for connections and sends the current time to clients.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/asio/example/cpp03/tutorial/daytime_dox.txt#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nboost::asio::io_context io_context;\n\ntcp::acceptor acceptor(io_context, tcp::endpoint(tcp::v4(), 13));\n\nfor (;;)\n{\n  tcp::socket socket(io_context);\n  acceptor.accept(socket);\n\n  std::string message = make_daytime_string();\n\n  boost::system::error_code ignored_error;\n  boost::asio::write(socket, boost::asio::buffer(message), ignored_error);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories in CMake for ArangoDB\nDESCRIPTION: This CMake snippet adds several subdirectories to the build process. It includes directories for async, chat-multi, coro, fast, stackless, and sync examples.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/beast/example/websocket/server/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory (async)\nadd_subdirectory (chat-multi)\nadd_subdirectory (coro)\nadd_subdirectory (fast)\nadd_subdirectory (stackless)\nadd_subdirectory (sync)\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost Throw Exception CMake Project\nDESCRIPTION: Configures a CMake build for the Boost throw_exception library. Sets up an interface library with required Boost dependencies and include directories. Optionally enables testing if BUILD_TESTING is enabled.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/throw_exception/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.16)\nproject(boost_throw_exception VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n\nadd_library(boost_throw_exception INTERFACE)\nadd_library(Boost::throw_exception ALIAS boost_throw_exception)\n\ntarget_include_directories(boost_throw_exception INTERFACE include)\n\ntarget_link_libraries(boost_throw_exception\n  INTERFACE\n    Boost::assert\n    Boost::config\n)\n\nif(BUILD_TESTING)\n\n  add_subdirectory(test)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Using Generated Go Stemmer\nDESCRIPTION: This Go code snippet demonstrates the usage of a generated stemmer. It creates a new Snowball environment for the word 'beautiful', applies stemming using the 'english' package, and prints the stemmed result. The snippet requires the Snowball runtime and an imported stemmer package. Inputs include the word to stem, and it outputs the stemmed variant. It allows for environment reuse by setting new words.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/snowball/go/README.md#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nenv := snowball.NewEnv(\"beautiful\")\nenglish.Stem(env)\nfmt.Printf(\"stemmed word is: %s\", env.Current())\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Boost TypeTraits Library\nDESCRIPTION: Commands to run tests for the Boost TypeTraits library. Users can either run all tests defined in the Jamfile.v2 or run a specific test by name.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/type_traits/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n../../../b2                        <- run all tests\n../../../b2 config_info            <- single test\n```\n\n----------------------------------------\n\nTITLE: Defining BOOST_OUTCOME_THREAD_LOCAL Macro for Thread Local Storage in C++\nDESCRIPTION: This macro is used to mark variables as having thread local storage duration. It defaults to 'thread_local' for C++11 compliant compilers, or '__thread' for older compilers (specifically older Mac OS XCode) that don't support C++11 thread_local.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/macros/thread_local.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nBOOST_OUTCOME_THREAD_LOCAL\n```\n\n----------------------------------------\n\nTITLE: Constructing Basic Result from Failure Type in C++\nDESCRIPTION: Implicit move constructor that takes a failure_type<T> and constructs a basic_result. The constructor is constexpr and propagates triviality and noexcept properties. It requires predicate::enable_make_error_code_compatible_conversion<void, T, void> to be true, or T to be void.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/basic_result/implicit_failure_make_error_code_move_constructor.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nbasic_result(failure_type<T> &&)\n```\n\n----------------------------------------\n\nTITLE: Defining is_error_type_enum trait in C++\nDESCRIPTION: A customizable integral constant trait that determines whether error types (E) constructible from enumeration types (Enum) should receive error throwing no-value policies. The trait can be overridden via template specialization and has default implementations for boost::system::error_code and std::error_code.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/traits/is_error_type_enum.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nis_error_type_enum<E, Enum>\n```\n\n----------------------------------------\n\nTITLE: MPL min Example Usage\nDESCRIPTION: Provides an example of how to use the `min` metafunction with `fold` to find the minimum value in a `vector_c`.  It initializes with `int_<-10>` and compares it against each element using `min<_1,_2>`. The result `r` will be `int_<-10>`.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/min.rst#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\ntypedef fold<\n      vector_c<int,1,7,0,-2,5,-1>\n    , int_<-10>\n    , min<_1,_2>\n    >::type r;\n\nBOOST_MPL_ASSERT(( is_same< r, int_<-10> > ));\n```\n\n----------------------------------------\n\nTITLE: Adjacent Vertices Iterator Implementation in C++\nDESCRIPTION: Returns iterator pair for accessing vertices adjacent to a given vertex in the graph. The vertex must be local to the current process.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/distributed_adjacency_list.rst#2025-04-22_snippet_11\n\nLANGUAGE: C++\nCODE:\n```\nstd::pair<adjacency_iterator, adjacency_iterator>\nadjacent_vertices(vertex_descriptor u, const adjacency_list& g);\n```\n\n----------------------------------------\n\nTITLE: Using Boost.Parameter with Namespaces\nDESCRIPTION: This example demonstrates how to use Boost.Parameter keywords within a namespace. It covers full qualification, using-declarations, and using-directives, outlining the pros and cons of each approach. The example highlights how nesting the keywords within a further sub-namespace gives the user finer control over which names get exposed.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/index.rst#2025-04-22_snippet_44\n\nLANGUAGE: cpp\nCODE:\n```\n    namespace lib {\n\n        **BOOST_PARAMETER_NAME(name)\n        BOOST_PARAMETER_NAME(index)**\n\n        BOOST_PARAMETER_FUNCTION(\n            (int), f, tag, \n            (optional (name,\\*,\"bob\")(index,(int),1))\n        )\n        {\n            std::cout << name << \":\" << index;\n            std::cout << std::endl;\n            return index;\n        }\n    }\n```\n\nLANGUAGE: cpp\nCODE:\n```\n    #include <boost/parameter.hpp>\n    #include <iostream>\n    \n```\n\n----------------------------------------\n\nTITLE: Adding Test Subdirectory\nDESCRIPTION: This snippet conditionally adds the `test` subdirectory to the build if the `BUILD_TESTING` variable is enabled. This allows for building and running tests for the Boost Endian library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/endian/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n\"if(BUILD_TESTING)\n\n  add_subdirectory(test)\n\nendif()\"\n```\n\n----------------------------------------\n\nTITLE: Unary ufunc call method\nDESCRIPTION: Defines the `call` method within the `unary_ufunc` struct. This method accepts a functor, an input object, and an output object, and passes the Python object to the underlying C++ functor after broadcasting its arguments. The `TUnaryFunctor`, `TArgument`, and `TResult` typenames must be specified.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/doc/numpy/reference/unary_ufunc.rst#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\n  template <typename TUnaryFunctor, \n            typename TArgument=typename TUnaryFunctor::argument_type,\n            typename TResult=typename TUnaryFunctor::result_type>\n  static object call(TUnaryFunctor & self, \n                     object const & input, \n                     object const & output);\n```\n\n----------------------------------------\n\nTITLE: Setting Value in Distributed Property Map in C++\nDESCRIPTION: Function to put a value into a distributed property map. Updates local data immediately and sends updates for remote cells.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/distributed_property_map.rst#2025-04-22_snippet_10\n\nLANGUAGE: cpp\nCODE:\n```\nvoid\nput(distributed_property_map pm, const key_type& key, const value_type& value);\n```\n\n----------------------------------------\n\nTITLE: Defining Parameter Names with BOOST_PARAMETER_NAME\nDESCRIPTION: Creates named parameter tags using BOOST_PARAMETER_NAME macro that will be used with functions created by BOOST_PARAMETER_NO_SPEC_MEMBER_FUNCTION.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_75\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_PARAMETER_NAME(a0)\nBOOST_PARAMETER_NAME(a1)\nBOOST_PARAMETER_NAME(a2)\n```\n\n----------------------------------------\n\nTITLE: Defining BOOST_OUTCOME_NODISCARD Macro for Return Value Examination in C++\nDESCRIPTION: This macro is used to tell the compiler that the return value of a function should not be discarded without examining it. It's overridable and has different default implementations based on the C++ version and compiler being used.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/macros/nodiscard.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_OUTCOME_NODISCARD\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Nullable Elements in a Pointer Map in C++\nDESCRIPTION: Shows how to iterate through a pointer map containing nullable elements. The example demonstrates checking for null values and accessing element properties when iterating through the map.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/tutorial.rst#2025-04-22_snippet_9\n\nLANGUAGE: cpp\nCODE:\n```\ntypedef boost::ptr_map<std::string, boost::nullable<animal> > animal_map;\nanimal_map map;\n...\nfor( animal_map::const_iterator i = map.begin(), e = map.end(); i != e; ++i )\n{\n    std::cout << \"\\n key: \" << i->first;\n    std::cout << \"\\n age: \";\n    \n    if( boost::is_null(i) )\n        std::cout << \"unknown\";\n    else\n        std::cout << i->second->age(); \n }\n```\n\n----------------------------------------\n\nTITLE: Defining HomogeneousColorBaseConcept in C++\nDESCRIPTION: This snippet describes the HomogeneousColorBaseConcept which focuses on ensuring all elements in a color base are of the same type. It provides a dynamic access method for elements based on their index.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/color_base.rst.txt#2025-04-22_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nconcept HomogeneousColorBaseConcept<ColorBaseConcept CB>\n{\n    // For all K in [0 ... size<C1>::value-1):\n    //     where SameType<kth_element_type<K>::type, kth_element_type<K+1>::type>;\n    kth_element_const_reference_type<0>::type dynamic_at_c(const CB&, std::size_t n) const;\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Parameter Specifications for Class Templates in C++\nDESCRIPTION: This snippet demonstrates how to create a ParameterSpec that defines the signature of a class template. It specifies required and optional parameters in positional order, along with type requirements using the Boost.Parameter library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/index.rst#2025-04-22_snippet_31\n\nLANGUAGE: C++\nCODE:\n```\nnamespace boost { namespace python {\n\n    using boost::mpl::_;\n\n    typedef parameter::parameters<\n        required<tag::class_type, boost::is_class<_> >\n      , parameter::optional<tag::base_list, mpl::is_sequence<_> >\n      , parameter::optional<tag::held_type>\n      , parameter::optional<tag::copyable>\n    > class_signature;\n}}\n```\n\n----------------------------------------\n\nTITLE: Defining RandomAccessNDImageViewConcept in C++\nDESCRIPTION: This code defines the RandomAccessNDImageViewConcept for N-dimensional image views, laying out expected type members and functions for interaction and traversal through dimensions. The concept includes point, locator, iterator, and many other critical types, describing a flexible interface for non-owning multi-dimensional image views. It requires types to conform to various underlying concepts like PointNDConcept and RandomAccessTraversalConcept.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/image_view.rst.txt#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nconcept RandomAccessNDImageViewConcept<Regular View> { typename value_type; typename reference; typename difference_type; typename const_t; where RandomAccessNDImageViewConcept<View>; typename point_t; where PointNDConcept<point_t>; typename locator; where RandomAccessNDLocatorConcept<locator>; typename iterator; where RandomAccessTraversalConcept<iterator>; typename reverse_iterator; where RandomAccessTraversalConcept<reverse_iterator>; typename size_type; // the return value of size() // Equivalent to RandomAccessNDLocatorConcept::axis template <size_t D> struct axis { typename coord_t = point_t::axis<D>::coord_t; typename iterator; where RandomAccessTraversalConcept<iterator>; // iterator along D-th axis. where SameType<coord_t, iterator::difference_type>; where SameType<iterator::value_type,value_type>; }; template <PixelDereferenceAdaptorConcept Deref> struct add_deref { typename type; where RandomAccessNDImageViewConcept<type>; static type make(const View& v, const Deref& deref); }; static const size_t num_dimensions = point_t::num_dimensions; View::View(const locator&, const point_type&); size_type View::size() const; reference operator[](View, const difference_type&) const; iterator View::begin() const; iterator View::end() const; reverse_iterator View::rbegin() const; reverse_iterator View::rend() const; iterator View::at(const point_t&); point_t View::dimensions() const; bool View::is_1d_traversable() const; template <size_t D> View::axis<D>::iterator View::axis_iterator(const point_t&) const; reference operator()(View,const point_t&) const; }; concept MutableRandomAccessNDImageViewConcept<RandomAccessNDImageViewConcept View> { where Mutable<reference>; };\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Serialization Tests in CMake\nDESCRIPTION: Sets up a series of serialization tests for various features like private constructors, object addresses, void casting, and more. Each test is created using the serialization_test macro.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/serialization/CMake/CMakeLists.txt#2025-04-22_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nserialization_test(test_private_ctor)\nserializaion_test(test_reset_object_address A)\nserializaion_test(test_void_cast)\nserializaion_test(test_mult_archive_types)\nserializaion_test(test_iterators)\nserializaion_test(test_iterators_base64)\nserializaion_test(test_inclusion)\nserializaion_test(test_inclusion2)\nserializaion_test(test_smart_cast)\nserializaion_test(test_codecvt_null)\nserializaion_test(test_strong_typedef)\nserializaion_test(test_singleton)\nserializaion_test(test_singleton_inherited)\nserializaion_test(test_singleton_plain)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Image Format Tag\nDESCRIPTION: Defines a custom image format tag for use in Boost GIL I/O framework, which serves as a type identifier for the specific image format\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/io.rst.txt#2025-04-22_snippet_7\n\nLANGUAGE: C++\nCODE:\n```\nstruct xxx_tag : format_tag {};\n```\n\n----------------------------------------\n\nTITLE: Running Basic Parser Fuzzer in Shell\nDESCRIPTION: Commands to create an output directory and run the basic_parser fuzzer. This demonstrates how to execute a specific fuzzer and generate output.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/json/fuzzing/Readme.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmkdir -p out\n./fuzzer_basic_parser out/\n```\n\n----------------------------------------\n\nTITLE: C++ Status Code Comparison\nDESCRIPTION: Demonstrates semantic comparison between status codes with non-identical domains, highlighting how the comparison is always based on semantic equivalence rather than exact equality.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/experimental/differences.md#2025-04-22_snippet_0\n\nLANGUAGE: c++\nCODE:\n```\nif(code1 == code2) ...\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Tifinagh Script Character Ranges\nDESCRIPTION: Lists Unicode character ranges for the Tifinagh script, including letters and modifiers. Tifinagh is used to write Berber languages of North Africa, particularly the Amazigh language.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/spirit/workbench/unicode/Scripts.txt#2025-04-22_snippet_42\n\nLANGUAGE: unicode\nCODE:\n```\n2D30..2D65    ; Tifinagh # Lo  [54] TIFINAGH LETTER YA..TIFINAGH LETTER YAZZ\n2D6F          ; Tifinagh # Lm       TIFINAGH MODIFIER LETTER LABIALIZATION MARK\n\n# Total code points: 55\n```\n\n----------------------------------------\n\nTITLE: Implementing Non-Empty 'always' Function Specialization in C++\nDESCRIPTION: Specializes the 'always_base' template for non-empty types. This implementation explicitly handles constructor initialization and provides a function call operator that returns the stored value regardless of arguments passed.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/always.hpp.txt#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<class T>\nstruct always_base<T, typename std::enable_if<!BOOST_HOF_IS_EMPTY(T)>::type>\n{\n    T x;\n\n    constexpr always_base(T xp) noexcept(BOOST_HOF_IS_NOTHROW_COPY_CONSTRUCTIBLE(T))\n    : x(xp)\n    {}\n\n    typedef typename detail::unwrap_reference<T>::type result_type;\n\n    template<class... As>\n    constexpr result_type \n    operator()(As&&...) const \n    noexcept(std::is_reference<result_type>::value || BOOST_HOF_IS_NOTHROW_COPY_CONSTRUCTIBLE(result_type))\n    {\n        return this->x;\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Color Converted View in C++\nDESCRIPTION: This code defines a template structure for creating a color-converted view of an image. It incorporates a custom color conversion function that is applied when pixels are accessed in the view.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/extending.rst#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\n  template <typename SrcConstRefP,  // const reference to the source pixel\n          typename DstP>          // Destination pixel value (models PixelValueConcept)\n  class color_convert_deref_fn\n  {\n  public:\n    typedef color_convert_deref_fn const_t;\n    typedef DstP                value_type;\n    typedef value_type          reference;      // read-only dereferencing\n    typedef const value_type&   const_reference;\n    typedef SrcConstRefP        argument_type;\n    typedef reference           result_type;\n    static bool constexpr is_mutable = false;\n\n    result_type operator()(argument_type srcP) const {\n        result_type dstP;\n        color_convert(srcP,dstP);\n        return dstP;\n    }\n  };\n```\n\n----------------------------------------\n\nTITLE: Defining NullaryFunctionObject Concept in C++\nDESCRIPTION: This code snippet defines the NullaryFunctionObject concept, which represents an object with a const call operator that accepts no parameters.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/src/concepts.md#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nconcept NullaryFunctionObject\n{\n    auto operator()() const;\n};\n```\n\n----------------------------------------\n\nTITLE: Testing Geodesic Inverse Program\nDESCRIPTION: Example command to test the inverse program with sample coordinates using pipe input\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/lib/Geo/karney/00README.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\necho 30 0 29.5 179.5 | ./inverse\n```\n\n----------------------------------------\n\nTITLE: Default Conversion Exclusions\nDESCRIPTION: Explains the default implementation for value_or_error which excludes Outcome result and outcome types to avoid potential issues with calling '.value()' in constexpr contexts, ensuring that the conversion mechanism functions reliably.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/tutorial/advanced/interop/value-or-error.md#2025-04-22_snippet_2\n\nLANGUAGE: c++\nCODE:\n```\nOutcome's default convert::value_or_error<T, U> implementation explicitly\nexcludes Outcome result and outcome types from the default mechanism as\nthere is a major gotcha: the value_or_error matched type's .value() is often\nnot callable in constexpr as it can throw.\n```\n\n----------------------------------------\n\nTITLE: Synchronous TCP Daytime Client Code Snippet\nDESCRIPTION: Code showing error handling and socket operations for synchronous TCP client using Boost.Asio to connect to a daytime service and read the response.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/asio/example/cpp03/tutorial/daytime_dox.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nboost::asio::io_context io_context;\n\ntcp::resolver resolver(io_context);\ntcp::resolver::results_type endpoints =\n    resolver.resolve(argv[1], \"daytime\");\n\ntcp::socket socket(io_context);\nboost::asio::connect(socket, endpoints);\n\nboost::array<char, 128> buf;\nboost::system::error_code error;\n\nfor (;;)\n{\n  size_t len = socket.read_some(boost::asio::buffer(buf), error);\n\n  if (error == boost::asio::error::eof)\n    break; // Connection closed cleanly by peer\n  else if (error)\n    throw boost::system::system_error(error); // Some other error\n\n  std::cout.write(buf.data(), len);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost MPI Library Dependencies in CMake\nDESCRIPTION: Sets up the include directories and links the required Boost libraries for the Boost MPI library. It specifies both public and private dependencies.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpi/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(boost_mpi PUBLIC include)\n\ntarget_link_libraries(boost_mpi\n  PUBLIC\n    Boost::assert\n    Boost::config\n    Boost::core\n    Boost::foreach\n    Boost::function\n    Boost::graph\n    Boost::integer\n    Boost::iterator\n    Boost::mpl\n    Boost::optional\n    Boost::serialization\n    Boost::smart_ptr\n    Boost::static_assert\n    Boost::throw_exception\n    Boost::type_traits\n\n  PRIVATE\n    Boost::lexical_cast\n    Boost::utility\n)\n```\n\n----------------------------------------\n\nTITLE: Using Function Pointer with Templated Function in C++\nDESCRIPTION: Shows how to use a function pointer with a templated sum function, requiring an explicit cast to select the correct overload for use with std::accumulate.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/src/gettingstarted.md#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<class T, class U>\nauto sum(T x, U y)\n{\n    return x + y;\n}\n\nauto sum_int = (int (*)(int, int))&sum;\n// Call integer overload\nint i = sum_int(1, 2);\n// Or pass to an algorithm\nstd::vector<int> v = { 1, 2, 3 };\nint total = std::accumulate(v.begin(), v.end(), 0, sum_int);\n```\n\n----------------------------------------\n\nTITLE: Defining BOOST_MPL_LIMIT_SET_SIZE Macro in C++\nDESCRIPTION: Default definition of the BOOST_MPL_LIMIT_SET_SIZE configuration macro that regulates the maximum arity of set and set_c variadic forms. By default, it's set to 20.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/LIMIT_SET_SIZE.rst#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n#if !defined(BOOST_MPL_LIMIT_SET_SIZE)\n#   define BOOST_MPL_LIMIT_SET_SIZE \\\n            |idic| \\\n/**/\n#endif\n```\n\n----------------------------------------\n\nTITLE: Using Partial Sum Function in C++\nDESCRIPTION: This code shows how to use the partial sum function, demonstrating both full evaluation and partial application. It highlights the flexibility of the partial adaptor.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/doc/src/partialfunctions.md.txt#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nint i = sum(1, 2); // Returns 3\nauto f = sum(1);\nint j = f(2); // returns 3\n```\n\n----------------------------------------\n\nTITLE: Defining MetafunctionClass Concept in C++\nDESCRIPTION: Specifies the requirements for the MetafunctionClass concept, which is similar to Metafunction but uses an 'apply' member. It shows two forms: one for a simple apply member and another for a template apply with variadic arguments.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/src/concepts.md#2025-04-22_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\nf::apply::type\n```\n\nLANGUAGE: cpp\nCODE:\n```\nf::apply<args...>::type\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for Boost Parameter\nDESCRIPTION: Sets up include directories for the Boost Parameter library as an interface library, allowing header-only usage\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(boost_parameter INTERFACE include)\n```\n\n----------------------------------------\n\nTITLE: Example Usage of push_front in C++\nDESCRIPTION: Provides a complete example of using push_front to insert an element at the beginning of a vector of integers. It also demonstrates how to assert the size and contents of the resulting sequence.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/push_front.rst#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\ntypedef vector_c<int,1,2,3,5,8,13,21> v;\nBOOST_MPL_ASSERT_RELATION( size<v>::value, ==, 7 );\n\ntypedef push_front< v,integral_c<int,1> >::type fibonacci;\nBOOST_MPL_ASSERT_RELATION( size<fibonacci>::value, ==, 8 );\n\nBOOST_MPL_ASSERT(( equal< \n      fibonacci\n    , vector_c<int,1,1,2,3,5,8,13,21>\n    , equal_to<_,_>\n    > ));\n```\n\n----------------------------------------\n\nTITLE: Defining Pack Base Template in C++\nDESCRIPTION: Implements the base template for the pack function, handling different cases for parameter packs of various sizes. It uses SFINAE and tag dispatching for different specializations.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/pack.hpp.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<std::size_t... Ns, class... Ts>\nstruct pack_base<seq<Ns...>, Ts...>\n: pack_holder<Ts, pack_tag<seq<Ns>, Ts...>>::type...\n{\n    // BOOST_HOF_INHERIT_DEFAULT(pack_base, typename std::remove_cv<typename std::remove_reference<Ts>::type>::type...);\n    BOOST_HOF_INHERIT_DEFAULT(pack_base, Ts...);\n    \n    template<class... Xs, BOOST_HOF_ENABLE_IF_CONVERTIBLE_UNPACK(Xs&&, typename pack_holder<Ts, pack_tag<seq<Ns>, Ts...>>::type)>\n    constexpr pack_base(Xs&&... xs) \n    BOOST_HOF_NOEXCEPT(BOOST_HOF_AND_UNPACK(BOOST_HOF_IS_NOTHROW_CONSTRUCTIBLE(typename pack_holder<Ts, pack_tag<seq<Ns>, Ts...>>::type, Xs&&)))\n    : pack_holder<Ts, pack_tag<seq<Ns>, Ts...>>::type(BOOST_HOF_FORWARD(Xs)(xs))...\n    {}\n\n    BOOST_HOF_RETURNS_CLASS(pack_base);\n  \n    template<class F>\n    constexpr auto operator()(F&& f) const BOOST_HOF_RETURNS\n    (\n        f(boost::hof::detail::pack_get<Ts, pack_tag<seq<Ns>, Ts...>>(*BOOST_HOF_CONST_THIS, f)...)\n    );\n\n    typedef std::integral_constant<std::size_t, sizeof...(Ts)> fit_function_param_limit;\n\n    template<class F>\n    struct apply\n    : F::template apply<Ts...>\n    {};\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Value Category Test Functions in C++\nDESCRIPTION: Example of template functions returning values in different categories (rvalue, lvalue, const rvalue, const lvalue) using std::bitset for testing value category preservation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_86\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <std::size_t N>\nstd::bitset<N + 1> rvalue_bitset()\n{\n    return std::bitset<N + 1>();\n}\n\ntemplate <std::size_t N>\nstd::bitset<N + 1> const rvalue_const_bitset()\n{\n    return std::bitset<N + 1>();\n}\n\ntemplate <std::size_t N>\nstd::bitset<N + 1>& lvalue_bitset()\n{\n    static std::bitset<N + 1> lset = std::bitset<N + 1>();\n    return lset;\n}\n\ntemplate <std::size_t N>\nstd::bitset<N + 1> const& lvalue_const_bitset()\n{\n    static std::bitset<N + 1> const clset = std::bitset<N + 1>();\n    return clset;\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Parameter Types Using Function Template Deduction\nDESCRIPTION: This snippet demonstrates how to extract the types of arguments passed to a parameter-enabled function. It uses a helper function template to perform type deduction on the extracted parameters.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/index.rst#2025-04-22_snippet_39\n\nLANGUAGE: cpp\nCODE:\n```\nBOOST_PARAMETER_NAME(name)\nBOOST_PARAMETER_NAME(index)\n\ntemplate <typename Name, typename Index>\nint deduce_arg_types_impl(Name&& name, Index&& index)\n{\n    // we know the types\n    Name&& n2 = boost::forward<Name>(name);\n    Index&& i2 = boost::forward<Index>(index);\n    return index;\n}\n\ntemplate <typename ArgumentPack>\nint deduce_arg_types(ArgumentPack const& args)\n{\n    return deduce_arg_types_impl(args[_name], args[_index | 42]);\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Pixel Components in GIL using C++\nDESCRIPTION: Defines how to extract and manipulate pixel-related types such as color space, channel mapping, and whether the type is planar using GIL metafunctions. These functions enable the examination and modification of pixel constructs, utilizing accompanying type traits for analysis.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/metafunctions.rst.txt#2025-04-22_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <typename T> struct color_space_type { typedef ... type; };\ntemplate <typename T> struct channel_mapping_type { typedef ... type; };\ntemplate <typename T> struct is_planar { typedef ... type; };\n\ntemplate <typename T> struct channel_type { typedef ... type; };\ntemplate <typename T> struct num_channels { typedef ... type; };\n```\n\n----------------------------------------\n\nTITLE: Defining Iterator Traits Metafunctions in C++\nDESCRIPTION: This code snippet defines metafunctions for accessing iterator-associated types. It includes templates for iterator_value, iterator_reference, iterator_pointer, iterator_difference, and iterator_category. Each metafunction provides access to a specific type from std::iterator_traits.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/iterator_traits.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <class Iterator>\nstruct iterator_value\n{\n    typedef typename \n      std::iterator_traits<Iterator>::value_type \n    type;\n};\n\ntemplate <class Iterator>\nstruct iterator_reference\n{\n    typedef typename \n      std::iterator_traits<Iterator>::reference\n    type;\n};\n\n\ntemplate <class Iterator>\nstruct iterator_pointer\n{\n    typedef typename \n      std::iterator_traits<Iterator>::pointer \n    type;\n};\n\ntemplate <class Iterator>\nstruct iterator_difference\n{\n    typedef typename\n      detail::iterator_traits<Iterator>::difference_type\n    type;\n};\n\ntemplate <class Iterator>\nstruct iterator_category\n{\n    typedef typename\n      detail::iterator_traits<Iterator>::iterator_category\n    type;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Standard Archive Tests in CMake\nDESCRIPTION: Sets up a comprehensive list of archive tests for various data structures and serialization features, including basic types, containers, and object relationships.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/serialization/CMake/CMakeLists.txt#2025-04-22_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\narchive_test(test_binary)\narchive_test(test_bitset)\narchive_test(test_class_info_save)\narchive_test(test_class_info_load)\narchive_test(test_complex)\narchive_test(test_contained_class A)\narchive_test(test_cyclic_ptrs A)\narchive_test(test_delete_pointer)\narchive_test(test_deque A)\narchive_test(test_derived)\narchive_test(test_derived_class A)\narchive_test(test_diamond)\narchive_test(test_diamond_complex)\n```\n\n----------------------------------------\n\nTITLE: Creating Build Directory for Linenoise on Linux\nDESCRIPTION: Creates a build directory for compiling the Linenoise library on Linux systems. This is the first step in the build process.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/linenoise-ng/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p build\n```\n\n----------------------------------------\n\nTITLE: Graph Coloring Function Declarations in C++\nDESCRIPTION: These template functions define the interface for `boman_et_al_graph_coloring`.  The functions take a distributed graph and a color map, and optionally parameters to control superstep size, color selection, vertex ordering, and vertex indexing. The function returns the number of colors used to color the graph.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/boman_et_al_graph_coloring.rst#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nnamespace graph { \n    template<typename DistributedGraph, typename ColorMap>\n    typename property_traits<ColorMap>::value_type\n    boman_et_al_graph_coloring\n      (const DistributedGraph& g,\n       ColorMap color,\n       typename graph_traits<DistributedGraph>::vertices_size_type s = 100);\n\n    template<typename DistributedGraph, typename ColorMap, typename ChooseColor>\n    typename property_traits<ColorMap>::value_type\n    boman_et_al_graph_coloring\n      (const DistributedGraph& g,\n       ColorMap color,\n       typename graph_traits<DistributedGraph>::vertices_size_type s,\n       ChooseColor choose_color);\n\n    template<typename DistributedGraph, typename ColorMap, typename ChooseColor, \n             typename VertexOrdering>\n    typename property_traits<ColorMap>::value_type\n    boman_et_al_graph_coloring\n      (const DistributedGraph& g, ColorMap color,\n       typename graph_traits<DistributedGraph>::vertices_size_type s,\n       ChooseColor choose_color, VertexOrdering ordering);\n\n    template<typename DistributedGraph, typename ColorMap, typename ChooseColor,\n             typename VertexOrdering, typename VertexIndexMap>\n    typename property_traits<ColorMap>::value_type\n    boman_et_al_graph_coloring\n      (const DistributedGraph& g,\n       ColorMap color,\n       typename graph_traits<DistributedGraph>::vertices_size_type s,\n       ChooseColor choose_color,\n       VertexOrdering ordering, VertexIndexMap vertex_index);\n  } \n```\n\n----------------------------------------\n\nTITLE: Implicit Error Type Constructor for ErrorCondEnum in C++\nDESCRIPTION: This snippet defines the implicit error_type constructor for ErrorCondEnum. It facilitates the conversion of error conditions when the predicate for enabling the constructor is true. The operation called is noexcept and its complexity adheres to the standard copy or move constructor complexity of error_type.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/basic_outcome/implicit_error_condition_converting_constructor.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n+++\n\ntitle = \"\\`basic_outcome(ErrorCondEnum &&)\\``\ndescription = \"Implicit \\`error_type\\` from \\`ErrorCondEnum\\` constructor. Available if \\`predicate::enable_error_condition_converting_constructor<ErrorCondEnum>\\` is true. Constexpr, triviality and noexcept propagating.\"\ncategories = [\"constructors\", \"implicit-constructors\", \"converting-constructors\"]\nweight = 200\n+++\n\nImplicit \\`error_type\\` from \\`ErrorCondEnum\\` constructor. Calls {{% api \"void on_outcome_construction(T *, U &&) noexcept\" %}} with \\`this\\` and \\`ErrorCondEnum\\`.\n\n*Requires*: \\`predicate::enable_error_condition_converting_constructor<R>\\` is true.\n\n*Complexity*: Same as for \\`error_type\\`'s copy or move constructor from the result of \\`make_error_code(ErrorCondEnum)\\`. Constexpr, triviality and noexcept of underlying operations is propagated.\n\n*Guarantees*: If an exception is thrown during the operation, the state of the input is left indeterminate.\n```\n\n----------------------------------------\n\nTITLE: Installing Bash Completion for unittest Script\nDESCRIPTION: Commands to generate and install bash completion for the unittest script, improving command-line productivity when running tests.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/CONTRIBUTING.md#2025-04-22_snippet_41\n\nLANGUAGE: bash\nCODE:\n```\n# Generate completion script\n./scripts/buildUnittestBashCompletion.bash > ~/arango_unittest_comp.bash\n\n# Source in .bashrc or .bash_profile\n. ~/arango_unittest_comp.bash\n\n# Alternative direct installation\neval \"$(./scripts/buildUnittestBashCompletion.bash)\"\n```\n\n----------------------------------------\n\nTITLE: RandomAccess2DImageConcept Definition\nDESCRIPTION: This code defines the `RandomAccess2DImageConcept`, which extends the `RandomAccessNDImageConcept` for 2D images. It introduces specific types for x and y coordinates (`x_coord_t`, `y_coord_t`). It also specifies constructors and the `recreate` method that take width and height as parameters, and methods for accessing width and height.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/image.rst.txt#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nconcept RandomAccess2DImageConcept<RandomAccessNDImageConcept Img>\n{\n  typename x_coord_t = const_view_t::x_coord_t;\n  typename y_coord_t = const_view_t::y_coord_t;\n\n  Img::Img(x_coord_t width, y_coord_t height, std::size_t alignment=0);\n  Img::Img(x_coord_t width, y_coord_t height, value_type fill_value, std::size_t alignment);\n\n  x_coord_t Img::width() const;\n  y_coord_t Img::height() const;\n\n  void Img::recreate(x_coord_t width, y_coord_t height, std::size_t alignment=1);\n  void Img::recreate(x_coord_t width, y_coord_t height, value_type fill_value, std::size_t alignment);\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Compiler Warning Flags in CMake\nDESCRIPTION: Adds compiler warning flags to the build configuration.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/client-tools/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_compile_warnings_flags()\n```\n\n----------------------------------------\n\nTITLE: Using Const Qualifiers in Proxy Object Members in C++\nDESCRIPTION: This snippet shows how to use const qualifiers on members of the reference proxy object to allow for compatibility with functions requiring mutable references, thereby preventing compile errors.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/technicalities.rst.txt#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\n    template <typename T>\n    struct my_reference_proxy\n    {\n      const my_reference_proxy& operator=(const my_reference_proxy& p) const;\n      const my_reference_proxy* operator->() const { return this; }\n      ...\n    };\n```\n\n----------------------------------------\n\nTITLE: Date Difference Calculation in C++\nDESCRIPTION: Shows how to calculate the difference between dates using period division and multiplication operations.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/doc/dates_times_timezones.txt#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n    date_time now;\n    cout << \" There are \" << (now + 2 * period::month() - now) / period::day() << \" days \"\n            \"between \" << as::date << now << \" and \" << now + 2*period::month() << endl;\n```\n\n----------------------------------------\n\nTITLE: Defining transform_view Template in C++\nDESCRIPTION: Declaration of the transform_view template that creates a view of transformed elements from a sequence. It takes a Sequence parameter that must be a Forward Sequence and a unary Lambda Expression F that defines the transformation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/transform_view.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      typename Sequence\n    , typename F\n    >\nstruct transform_view\n{\n    // |unspecified|\n    // |...|\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Function Implementations Using Foreign and Outcome Types\nDESCRIPTION: Two functions are defined: old_code which returns the foreign result type, and new_code which uses BOOST_OUTCOME_TRY to call the old code and return an Outcome result.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/recipes/foreign-try.md#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\n// old code returns the foreign expected\ninline foreign_namespace::result old_code(int i) { return foreign_namespace::old_code(i); }\n\n// new code returns outcome::result, but internally calls the old code\ninline outcome::result<int> new_code(int i)\n{\n  BOOST_OUTCOME_TRY(v, old_code(i));\n  return v;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Fuerte Static Library Sources\nDESCRIPTION: Creates a static library target named 'fuerte' and specifies its source files.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/fuerte/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(fuerte STATIC\n  src/connection.cpp\n  src/ConnectionBuilder.cpp\n  src/helper.cpp\n  src/http.cpp\n  src/H1Connection.cpp\n  src/H2Connection.cpp\n  src/jwt.cpp\n  src/loop.cpp\n  src/message.cpp\n  src/requests.cpp\n  src/types.cpp\n  src/connection.cpp)\n```\n\n----------------------------------------\n\nTITLE: Implementing Random Access Iterator Addition with Temporary in C++\nDESCRIPTION: This code snippet shows how to implement the '+' operator for a Random Access Traversal iterator using a temporary object and the '+=' operator.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/RandomAccessTraversal.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n{ X tmp = a; return tmp += n; }\n```\n\n----------------------------------------\n\nTITLE: Defining Boost ptr_multimap_adapter Class\nDESCRIPTION: Defines a C++ class ptr_multimap_adapter in the Boost namespace, facilitating the creation of custom pointer containers using multimap-like structures. This snippet details typedefs, modifiers, and transfer methods essential for managing pointer-container specifics. Dependencies include the Boost library, particularly the heap_clone_allocator. Key inputs are keys and mapped objects, facilitating operations like insert and transfer with strong exception safety guarantees.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/ptr_multimap_adapter.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nnamespace boost\n{\n    template\n    < \n        T,\n        class VoidPtrMultiMap,\n        class CloneAllocator = heap_clone_allocator \n    >\n    class ptr_multimap_adapter \n    {\n    public: // `typedefs`_\n        typedef VoidPtrMap::key_type key_type;\n        typedef T*                   mapped_type;\n        typedef T&                   mapped_reference;\n        typedef const T&             const_mapped_reference;\n        typedef ...                  value_type;\n        typedef ...                  reference;\n        typedef ...                  const_reference;\n        typedef ...                  pointer;\n        typedef ...                  const_pointer;  \n        \n    public: // `modifiers`_         \n            iterator  insert( key_type& k, T* x ); \n            template< class U >\n            iterator  insert( const key_type&, compatible-smart-ptr<U> x );                        \n    \n    public: // `pointer container requirements`_\n            void      transfer( iterator object, ptr_multimap_adapter& from );\n            size_type transfer( iterator first, iterator last, ptr_multimap_adapter& from );\n            template< class Range >\n            size_type transfer( const Range& r, ptr_multimap_adapter& from );\n            void      transfer( ptr_multimap_adapter& from );\n\n    }; //  class 'ptr_multimap_adapter'\n\n} // namespace 'boost'\n```\n\n----------------------------------------\n\nTITLE: Modifying Python ndarray and Reflecting in C++ Array\nDESCRIPTION: Alters an element in the Python ndarray and checks if the corresponding change is visible in the original C++ array, illustrating interoperability.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/doc/numpy/tutorial/fromdata.rst#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\npy_array[1] = 5 ;\nstd::cout << \"Is the change reflected in the C++ array used to create the ndarray ? \" << std::endl;\nfor (int j = 0; j < 5; j++)\n{\n  std::cout << arr[j] << ' ';\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Noncopyable Class in C++\nDESCRIPTION: This code snippet defines a noncopyable class. The class is likely used as a base class to prevent derived classes from being copied. It includes a copyright notice and license information.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/asio/doc/noncopyable_dox.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n//\n// Copyright (c) 2003-2021 Christopher M. Kohlhoff (chris at kohlhoff dot com)\n//\n// Distributed under the Boost Software License, Version 1.0. (See accompanying\n// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)\n//\n\n/**\n\\class noncopyable\n*/\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost Describe Interface Library\nDESCRIPTION: Sets up a CMake project for the Boost Describe library with version, language, and interface library definition\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/describe/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.16)\n\nproject(boost_describe VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n\nadd_library(boost_describe INTERFACE)\nadd_library(Boost::describe ALIAS boost_describe)\n\ntarget_include_directories(boost_describe INTERFACE include)\n\ntarget_link_libraries(boost_describe\n  INTERFACE\n    Boost::mp11\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Conversion Function\nDESCRIPTION: This snippet implements a function that utilizes the defined result type to handle conversions from string to int, incorporating error management.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/tutorial/essential/result/_index.md#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nresult<int, ConversionErrc> convert(const std::string& str) { /* conversion logic */ }\n```\n\n----------------------------------------\n\nTITLE: Defining ColorBasesCompatibleConcept in C++\nDESCRIPTION: This snippet introduces the ColorBasesCompatibleConcept, focusing on defining compatibility between different color bases based on their color spaces and element types, ensuring proper interaction among various color base models.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/color_base.rst.txt#2025-04-22_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\nconcept ColorBasesCompatibleConcept<ColorBaseConcept C1, ColorBaseConcept C2>\n{\n    where SameType<C1::layout_t::color_space_t, C2::layout_t::color_space_t>;\n    // also, for all K in [0 ... size<C1>::value):\n    //     where Convertible<kth_semantic_element_type<C1,K>::type, kth_semantic_element_type<C2,K>::type>;\n    //     where Convertible<kth_semantic_element_type<C2,K>::type, kth_semantic_element_type<C1,K>::type>;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Atomic Eager Awaitable\nDESCRIPTION: The 'atomic_eager<T>' version extends the 'eager<T>' type by providing thread synchronization during resumptions. It ensures correctness when traversing kernel threads during suspend-resume cycles.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/tutorial/essential/coroutines/awaitables.md#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\natomic_eager<T>\\n\\n    `eager<T>` does not employ thread synchronisation during resumption of dependent\\n    coroutines which is fine if you do not traverse kernel threads during a\\n    suspend-resume cycle. If you do however potentially traverse kernel threads\\n    during suspend-resume, you ought to use `atomic_eager<T>` instead -- this uses\\n    atomics to synchronise the setting and checking of state to ensure correctness.\n```\n\n----------------------------------------\n\nTITLE: Using BOOST_OUTCOME_TRY_FAILURE_LIKELY Macro in C++\nDESCRIPTION: Similar to BOOST_OUTCOME_TRYV_FAILURE_LIKELY, but can set a variable if two or more macro arguments are present. It's used for expressions that are expected to fail, providing hints to the compiler for optimization.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/macros/tryv_failure_likely.md#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_OUTCOME_TRY_FAILURE_LIKELY(expr)\n```\n\n----------------------------------------\n\nTITLE: Declaring Named Parameters with BOOST_PARAMETER_NAME in C++\nDESCRIPTION: Demonstrates usage of BOOST_PARAMETER_NAME macro to define named parameters with in/out specifiers for reference handling.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_92\n\nLANGUAGE: C++\nCODE:\n```\n|BOOST_PARAMETER_NAME|_\\((_lrc, kw0) in(lrc))\n|BOOST_PARAMETER_NAME|_\\((_lr, kw1) in_out(lr))\n|BOOST_PARAMETER_NAME|_\\((_rrc, kw2) in(rrc))\n|BOOST_PARAMETER_NAME|_\\((_rr, kw3) consume(rr))\n```\n\n----------------------------------------\n\nTITLE: Channel Traits Implementation in C++\nDESCRIPTION: This snippet provides an implementation of the 'channel_traits' structure, which defines the types and methods for accessing the properties of channel types. It leverages C++ type traits to ensure the correct functionality of channels based on their inherent types.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/channel.rst.txt#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\n  template <typename T>\\n  struct channel_traits\\n  {\\n      typedef T         value_type;\\n      typedef T&        reference;\\n      typedef T*        pointer;\\n      typedef T& const  const_reference;\\n      typedef T* const  const_pointer;\\n\\n      static value_type min_value() { return std::numeric_limits<T>::min(); }\\n      static value_type max_value() { return std::numeric_limits<T>::max(); }\\n  };\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost Type Erasure Library with CMake\nDESCRIPTION: This CMake script sets up the build configuration for the Boost Type Erasure library. It defines the library target, includes necessary directories, links required Boost dependencies, and sets appropriate compile definitions based on the build type (shared or static).\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/type_erasure/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Copyright 2020, 2021 Peter Dimov\n# Distributed under the Boost Software License, Version 1.0.\n# https://www.boost.org/LICENSE_1_0.txt\n\ncmake_minimum_required(VERSION 3.5...3.16)\n\nproject(boost_type_erasure VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n\nadd_library(boost_type_erasure\n  src/dynamic_binding.cpp\n)\n\nadd_library(Boost::type_erasure ALIAS boost_type_erasure)\n\ntarget_include_directories(boost_type_erasure PUBLIC include)\n\ntarget_link_libraries(boost_type_erasure\n  PUBLIC\n    Boost::assert\n    Boost::config\n    Boost::core\n    Boost::fusion\n    Boost::iterator\n    Boost::mp11\n    Boost::mpl\n    Boost::preprocessor\n    Boost::smart_ptr\n    Boost::throw_exception\n    Boost::type_traits\n    Boost::typeof\n    Boost::vmd\n  PRIVATE\n    Boost::thread\n)\n\ntarget_compile_definitions(boost_type_erasure\n  PUBLIC BOOST_TYPE_ERASURE_NO_LIB\n  # Source files already define BOOST_TYPE_ERASURE_SOURCE\n  # PRIVATE BOOST_TYPE_ERASURE_SOURCE\n)\n\nif(BUILD_SHARED_LIBS)\n  target_compile_definitions(boost_type_erasure PUBLIC BOOST_TYPE_ERASURE_DYN_LINK)\nelse()\n  target_compile_definitions(boost_type_erasure PUBLIC BOOST_TYPE_ERASURE_STATIC_LINK)\nendif()\n\nif(BUILD_TESTING AND EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/test/CMakeLists.txt\")\n\n  add_subdirectory(test)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Accessing Semantic Color Channels\nDESCRIPTION: Demonstrates multiple methods of accessing color channels in pixel types, showing semantic and named color channel retrieval\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/pixel.rst.txt#2025-04-22_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\nassert(semantic_at_c<0>(rgb8) == semantic_at_c<0>(bgr8));\nassert(get_color<red_t>(rgb8) == get_color<red_t>(bgr8));\nassert(get_color(rgb8,red_t()) == get_color(bgr8,red_t()))\n```\n\n----------------------------------------\n\nTITLE: Additional Configuration Options for Boost.Hana\nDESCRIPTION: This snippet adds various configuration options for the Boost.Hana library, allowing users to enable or disable features such as concept checks, debug mode, exceptions, and string user-defined literals.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hana/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\noption(BOOST_HANA_ENABLE_CONCEPT_CHECKS \"Enable concept checking in the interface methods.\" ON)\noption(BOOST_HANA_ENABLE_DEBUG_MODE \"Enable Hana's debug mode.\" OFF)\n\noption(BOOST_HANA_ENABLE_STRING_UDL\n\"Enable the GNU extension allowing the special string literal operator\\\n template, which enables the _s suffix for creating compile-time strings.\" ON)\n\noption(BOOST_HANA_ENABLE_EXCEPTIONS\n\"Build with exceptions enabled. Note that Hana does not make use of exceptions,\\\n but this switch can be disabled when building the tests to assess that it is\\\n really the case.\" ON)\n\n```\n\n----------------------------------------\n\nTITLE: Setting Compile Definitions for Boost Container in CMake\nDESCRIPTION: Configures compile definitions for the Boost Container library, including settings for shared or static linking.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/container/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(boost_container\n  PUBLIC BOOST_CONTAINER_NO_LIB\n  # Source files already define BOOST_CONTAINER_SOURCE\n  # PRIVATE BOOST_CONTAINER_SOURCE\n)\n\nif(BUILD_SHARED_LIBS)\n  target_compile_definitions(boost_container PUBLIC BOOST_CONTAINER_DYN_LINK)\nelse()\n  target_compile_definitions(boost_container PUBLIC BOOST_CONTAINER_STATIC_LINK)\nendif()\n```\n\n----------------------------------------\n\nTITLE: C++ Result Type Definition\nDESCRIPTION: Shows replacement of boost::result_of<F()>::type with F::result_type for function return type determination.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_100\n\nLANGUAGE: cpp\nCODE:\n```\nboost_result_of<F()>::type\n```\n\nLANGUAGE: cpp\nCODE:\n```\nF::result_type\n```\n\n----------------------------------------\n\nTITLE: Initializing Boost.Numpy and Python Runtimes in C++\nDESCRIPTION: This snippet initializes the necessary namespaces and runtimes required for Boost.Numpy operations in a C++ program. It sets up the Python environment using Py_Initialize() and initializes the numpy module.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/doc/html/numpy/_sources/tutorial/ndarray.rst.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/python/numpy.hpp>\n#include <iostream>\n\nnamespace p = boost::python;\nnamespace np = boost::python::numpy;\n\nint main(int argc, char **argv)\n{\n  Py_Initialize();\n  np::initialize();\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Exception Pointer Synthesis in C++\nDESCRIPTION: Function that synthesizes an exception pointer by fetching TLS slot data for a 16-bit value in spare storage, symbolizing the stack backtrace into a string, and creating an exception pointer with runtime error. The implementation overrides the payload/exception member in the localized outcome with the new exception pointer.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/tutorial/advanced/hooks/poke_exception.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n{{% snippet \"error_code_extended.cpp\" \"error_code_extended4\" %}}\n```\n\n----------------------------------------\n\nTITLE: Defining arango_tests_basics Library in CMake\nDESCRIPTION: Creates an object library for basic ArangoDB test components, including mock implementations and test utilities.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/CMakeLists.txt#2025-04-22_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(arango_tests_basics OBJECT\n  ${CMAKE_CURRENT_SOURCE_DIR}/Mocks/ClusterInfoMock.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/Mocks/FakeScheduler.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/Mocks/FakeScheduler.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/Mocks/IResearchLinkMock.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/Mocks/IResearchInvertedIndexMock.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/Mocks/LogLevels.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/Mocks/PreparedResponseConnectionPool.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/Mocks/PhysicalCollectionMock.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/Mocks/StorageEngineMock.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/Mocks/Servers.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/Mocks/MockGraph.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/Mocks/MockGraphProvider.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/Basics/icu-helper.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/IResearch/AgencyMock.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/IResearch/common.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/IResearch/ExpressionContextMock.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/IResearch/RestHandlerMock.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/Aql/VelocyPackHelper.cpp\n  main.cpp)\n```\n\n----------------------------------------\n\nTITLE: Legacy Basic Outcome Move Construction Hook Declaration\nDESCRIPTION: Function declaration for the ADL-discovered hook that is called during converting move construction of basic_outcome. This hook was deprecated in v2.2.0 and replaced with on_outcome_move_construction.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/functions/hooks/hook_outcome_move_construction2.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nvoid hook_outcome_move_construction(T *, U &&, V &&) noexcept\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Storage Selection with if_c in C++\nDESCRIPTION: Example of using if_c metafunction in a template class to conditionally select between inplace or heap storage based on the size of the type T. This demonstrates a practical application of the if_c metafunction in template metaprogramming.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/if_c.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\n// allocates space for an object of class T on heap or \"inplace\"\n// depending on its size\ntemplate< typename T > struct lightweight\n{\n    // ...\n    typedef typename if_c<\n          sizeof(T) <= sizeof(T*)\n        , inplace_storage<T>\n        , heap_storage<T>\n        >::type impl_t;\n\n    impl_t impl;\n};\n```\n\n----------------------------------------\n\nTITLE: Throwing exception on incorrect wide error observation (C++)\nDESCRIPTION: This code snippet shows the action performed when an incorrect wide error observation occurs when using the `error_code_throw_as_system_error` policy. Specifically, it throws a `bad_result_access` exception with the message \"no error\".\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/policies/error_code_throw_as_system_error_result.md#2025-04-22_snippet_0\n\nLANGUAGE: c++\nCODE:\n```\n\"BOOST_OUTCOME_THROW_EXCEPTION(bad_result_access(\\\"no error\\\"));\"\n```\n\n----------------------------------------\n\nTITLE: Defining V8 Build Targets\nDESCRIPTION: This snippet defines custom build targets for V8 using the ExternalProject_Add function for different configurations (Debug, Release). It sets dependencies for building V8 components ensuring correct order of operations in the build process.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/v8-build/CMakeLists.txt#2025-04-22_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nforeach (MS_TARGET_CONF ${V8_TARGET_ARCHS})\n    string(TOLOWER ${MS_TARGET_CONF} MS_TARGET_CONF_LOWER)\n    ExternalProject_Add(v8_build_${MS_TARGET_CONF_LOWER}\n      BUILD_IN_SOURCE\n        TRUE\n      WORKING_DIRECTORY\n        ${V8_DIR}/gypfiles\n      SOURCE_DIR\n        \"${V8_DIR}\"\n      CONFIGURE_COMMAND\n        ${CMAKE_COMMAND} -E env GYP_MSVS_VERSION=${GYP_MSVS_VERSION} GYP_GENERATORS=${GYP_GENERATORS} GYP_MSVS_OVERRIDE_PATH=${GYP_MSVS_OVERRIDE_PATH} \"${PYTHON_EXECUTABLE}\" ${GYP_MAIN} ${V8_GYP_ARGS} -Dmode=${MS_TARGET_CONF_LOWER} \n      BUILD_COMMAND\n        \"\"\n      INSTALL_COMMAND\n        \"\"\n    )\n\n    add_dependencies(v8_build v8_build_${MS_TARGET_CONF_LOWER})\n\n    foreach (V8_ONE_TARGET ${V8_TARGETS})\n      ExternalProject_Add_Step(v8_build_${MS_TARGET_CONF_LOWER} v8_build_${V8_ONE_TARGET}_${MS_TARGET_CONF_LOWER}\n        WORKING_DIRECTORY\n          ${V8_TARGET_DIR}/../gypfiles\n        COMMAND\n          msbuild ${V8_ONE_TARGET}.vcxproj /p:Configuration=${MS_TARGET_CONF} /p:Platform=${MS_TARGET_PLATFORM}\n        DEPENDEES\n          configure\n        DEPENDERS\n          build\n      )\n    endforeach ()\n  endforeach ()\n```\n\n----------------------------------------\n\nTITLE: Using at with a Range in C++\nDESCRIPTION: Example demonstrating how to use the at metafunction with a numeric range to access elements at specific indices, using compile-time assertions to verify the values.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/at.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntypedef range_c<long,10,50> range;\nBOOST_MPL_ASSERT_RELATION( (at< range, int_<0> >::value), ==, 10 );\nBOOST_MPL_ASSERT_RELATION( (at< range, int_<10> >::value), ==, 20 );\nBOOST_MPL_ASSERT_RELATION( (at< range, int_<40> >::value), ==, 50 );\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for Boost Ptr Container\nDESCRIPTION: This CMake configuration file sets up a Boost Ptr Container project. It defines the minimum required CMake version, and establishes project and library targets. Dependencies include various Boost libraries that are required to build the Boost Ptr Container successfully. If testing is enabled and a test directory exists, it adds a test subdirectory.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Generated by `boostdep --cmake ptr_container`\n# Copyright 2020 Peter Dimov\n# Distributed under the Boost Software License, Version 1.0.\n# https://www.boost.org/LICENSE_1_0.txt\n\ncmake_minimum_required(VERSION 3.5...3.16)\n\nproject(boost_ptr_container VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n\nadd_library(boost_ptr_container INTERFACE)\nadd_library(Boost::ptr_container ALIAS boost_ptr_container)\n\ntarget_include_directories(boost_ptr_container INTERFACE include)\n\ntarget_link_libraries(boost_ptr_container\n  INTERFACE\n    Boost::array\n    Boost::assert\n    Boost::circular_buffer\n    Boost::config\n    Boost::core\n    Boost::iterator\n    Boost::mpl\n    Boost::range\n    Boost::serialization\n    Boost::smart_ptr\n    Boost::static_assert\n    Boost::type_traits\n    Boost::unordered\n    Boost::utility\n)\n\nif(BUILD_TESTING AND EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/test/CMakeLists.txt\")\n\n  add_subdirectory(test)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Passing Function Pointers to Higher-Order Functions in C++\nDESCRIPTION: Demonstrates how to define a simple sum function and pass it to std::accumulate using a function pointer. This is a basic approach to passing functions as arguments to higher-order functions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/doc/src/gettingstarted.md.txt#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nint sum(int x, int y)\n{\n    return x + y;\n}\n// Pass sum to accumulate\nstd::vector<int> v = { 1, 2, 3 };\nint total = std::accumulate(v.begin(), v.end(), 0, &sum);\n```\n\n----------------------------------------\n\nTITLE: Named Parameter Definition for Boost.Parameter in C++\nDESCRIPTION: Shows how to define named parameters with their binding modes (in, in_out, consume) using BOOST_PARAMETER_NAME macro. These parameters are later used in the BOOST_PARAMETER_MEMBER_FUNCTION.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_20\n\nLANGUAGE: C++\nCODE:\n```\n|BOOST_PARAMETER_NAME|_\\((_lrc, kw) in(lrc))\n|BOOST_PARAMETER_NAME|_\\((_lr, kw) in_out(lr))\n|BOOST_PARAMETER_NAME|_\\((_rrc, kw) in(rrc))\n|BOOST_PARAMETER_NAME|_\\((_rr, kw) consume(rr))\n```\n\n----------------------------------------\n\nTITLE: Defining Step Iterator Concept\nDESCRIPTION: The 'StepIteratorConcept' defines how to set and manage the step size for traversing pixels differently than the fundamental pixel iterators, which allows for customized traversal configurations.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/pixel_iterator.rst#2025-04-22_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\n  concept StepIteratorConcept<boost_concepts::ForwardTraversalConcept Iterator>\n  {\n    template <Integral D> void Iterator::set_step(D step);\n  };\n```\n\n----------------------------------------\n\nTITLE: Defining Example Binary Functor\nDESCRIPTION: An example binary functor struct `example_binary_ufunc` defines types for its first and second arguments as well as the result type, which must be specified using typedef. It must be exposed and instantiated as a Python class to use the `call` method.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/doc/numpy/reference/binary_ufunc.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nstruct example_binary_ufunc\n{\n  typedef any_valid first_argument_type;\n  typedef any_valid second_argument_type;\n  typedef any_valid result_type;\n};\n```\n\n----------------------------------------\n\nTITLE: Conditional V8 Sources\nDESCRIPTION: This snippet conditionally adds the `RocksDBV8Functions.cpp` source file to the `arango_rocksdb` library if the `USE_V8` option is enabled. It integrates V8 JavaScript engine functionalities into the RocksDB library, enabling features that require JavaScript processing within the storage engine.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/RocksDBEngine/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif (USE_V8)\n  target_sources(arango_rocksdb PRIVATE\n    RocksDBV8Functions.cpp)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Error Message in C++ Status Code Domain\nDESCRIPTION: Demonstrates how to override the _do_message() function to append file and line information to POSIX error descriptions. This implementation enhances error messages by including additional context from the error payload.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/experimental/worked-example/message.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nvirtual std::string _do_message(status_code<void> code) const noexcept override\n{\n  // Get the status message from the base class\n  std::string base = outcome_e::posix_code::domain_type::_do_message(code);\n  // Get my custom file info error code\n  const auto &c = static_cast<const _file_io_error_code &>(code);\n  // Return the combined string\n  return base + \" [file='\" + c._file + \"', line=\" + std::to_string(c._line) + \"]\"; \n}\n```\n\n----------------------------------------\n\nTITLE: Writing Images with Boost GIL in C++\nDESCRIPTION: This code snippet demonstrates how to write images using Boost GIL's `write_view` function. It specifies the image format using a tag and demonstrates handling of different image types via `any_image`. The snippet requires Boost GIL and optionally Boost Filesystem for path support. Key parameters include filename and image view, with JPEG quality configurable via format-specific settings.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/io.rst.txt#2025-04-22_snippet_6\n\nLANGUAGE: C++\nCODE:\n```\ntypedef mpl::vector< gray8_image_t, gray16_image_t, rgb8_image_t, rgba_image_t > my_img_types; any_image< my_img_types > runtime_image; // fill any_image write_view( filename, view( runtime_image ), tiff_tag() );\n```\n\n----------------------------------------\n\nTITLE: 16-bit Pixel Channel Construction\nDESCRIPTION: This code demonstrates how to construct and manipulate the three channels of a 16-bit \"565\" pixel using `packed_channel_reference`. It creates three channel references (`channel1`, `channel2`, `channel3`) that access the red, green, and blue components of a 16-bit integer, respectively.  It then sets these channels to their maximum values and asserts that the resulting 16-bit integer is equal to 65535.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/channel.rst#2025-04-22_snippet_10\n\nLANGUAGE: cpp\nCODE:\n```\n  using channel16_0_5_reference_t  = packed_channel_reference<0, 5, true>;\n  using channel16_5_6_reference_t  = packed_channel_reference<5, 6, true>;\n  using channel16_11_5_reference_t = packed_channel_reference<11, 5, true>;\n\n  std::uint16_t data=0;\n  channel16_0_5_reference_t  channel1(&data);\n  channel16_5_6_reference_t  channel2(&data);\n  channel16_11_5_reference_t channel3(&data);\n\n  channel1 = channel_traits<channel16_0_5_reference_t>::max_value();\n  channel2 = channel_traits<channel16_5_6_reference_t>::max_value();\n  channel3 = channel_traits<channel16_11_5_reference_t>::max_value();\n  assert(data == 65535);\n```\n\n----------------------------------------\n\nTITLE: Safe Iterator Property Map Template Definition\nDESCRIPTION: Template class definition for a safe iterator property map that provides bounds-checked access to distributed data structures. Uses local property maps to handle global-to-local index mapping.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/distributed_property_map.rst#2025-04-22_snippet_23\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<typename RandomAccessIterator, typename ProcessGroup,\n           typename GlobalKey, typename LocalMap, typename ValueType,\n           typename Reference>\nclass safe_iterator_property_map<RandomAccessIterator, \n                                   local_property_map<ProcessGroup, GlobalKey, LocalMap>,\n                                   ValueType, Reference>\n{\npublic:\n  typedef local_property_map<ProcessGroup, GlobalKey, LocalMap> index_map_type;\n\n  safe_iterator_property_map();\n  safe_iterator_property_map(RandomAccessIterator iter, std::size_t n, \n                               const index_map_type& id);\n};\n```\n\n----------------------------------------\n\nTITLE: Declaring iter_fold Template in C++\nDESCRIPTION: Declaration of the iter_fold template struct, which takes a Sequence, State, and ForwardOp as template parameters. The struct contains a nested type alias 'type' for the result.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/iter_fold.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      typename Sequence\n    , typename State\n    , typename ForwardOp\n    >\nstruct iter_fold\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Incomplete Type Pattern in C++ Header Files\nDESCRIPTION: Demonstrates how to properly declare and implement classes with pointer containers when dealing with incomplete types across header and implementation files.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/faq.rst#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n// foo.hpp\nclass Foo { ... };\nnew_clone( const Foo& ) { ... }\ndelete_clone( const Foo* )     { ... }\n\n// x.hpp\nclass Foo; // Foo is incomplete here\nclass X { ptr_deque<Foo> container; ... }\n\n// x.cpp\n#include <x.hpp>\n#include <foo.hpp> // now Foo is not incomplete anymore\n...\n```\n\n----------------------------------------\n\nTITLE: Defining Pointee and Indirect Reference Structs in C++\nDESCRIPTION: Declares struct templates for pointee and indirect_reference, which are utility classes used in conjunction with indirect iterators to determine the type being pointed to.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/facade-and-adaptor.rst#2025-04-22_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <class Dereferenceable>\nstruct pointee;\n\ntemplate <class Dereferenceable>\nstruct indirect_reference;\n```\n\n----------------------------------------\n\nTITLE: Defining apply_wrap Metafunction Templates in C++\nDESCRIPTION: Defines template structures for apply_wrap with 0 to n arguments. These structures are used to invoke metafunction classes with varying numbers of arguments.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/apply_wrap.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate< \n      typename F\n    >\nstruct apply_wrap0\n{\n    typedef |unspecified| type;\n};\n\ntemplate< \n      typename F, typename A1\n    >\nstruct apply_wrap1\n{\n    typedef |unspecified| type;\n};\n\n|...|\n\ntemplate< \n      typename F, typename A1,\\ |...| typename An\n    >\nstruct apply_wrap\\ *n*\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: This Pointer Support Macros\nDESCRIPTION: Macros for handling incomplete this pointer types in template code. Includes type checking to ensure correct usage of this pointers.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/returns.hpp.txt#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#define BOOST_HOF_THIS BOOST_HOF_PP_RAIL(BOOST_HOF_RETURNS_THAT)(fit_this_type)\n#define BOOST_HOF_CONST_THIS BOOST_HOF_PP_RAIL(BOOST_HOF_RETURNS_THAT)(fit_const_this_type)\n\n#define BOOST_HOF_RETURNS_CLASS(...) typedef __VA_ARGS__* fit_this_type; typedef const __VA_ARGS__* fit_const_this_type\n```\n\n----------------------------------------\n\nTITLE: Making Non-copyable Types Cloneable\nDESCRIPTION: Shows how to make non-copyable types work with pointer containers by implementing cloning functionality.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/examples.rst#2025-04-22_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\n// a class that has no normal copy semantics\nclass X : boost::noncopyable { public: X* clone() const; ... };\n                                                                           \n// this will be found by the library by argument dependent lookup (ADL)                                                                  \nX* new_clone( const X& x ) \n{ return x.clone(); }\n                                                                           \n// we can now use the interface that requires cloneability\nptr_vector<X> vec1, vec2;\n...\nvec2 = vec1.clone();                                 // 'clone()' requires cloning <g> \nvec2.insert( vec2.end(), vec1.begin(), vec1.end() ); // inserting always means inserting clones\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories\nDESCRIPTION: Sets up include directories for the Fuerte library, including both public and system includes.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/fuerte/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(fuerte\n  PUBLIC\n    src\n  SYSTEM PUBLIC\n    include\n    \"${OPENSSL_INCLUDE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Defining hook_result_copy_construction Function in C++\nDESCRIPTION: This function is an ADL-discovered free function hook invoked by the converting copy constructors of basic_result. It was removed in Outcome v2.2.0 and replaced with on_result_copy_construction.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/functions/hooks/hook_result_copy_construction.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nvoid hook_result_copy_construction(T *, U &&) noexcept\n```\n\n----------------------------------------\n\nTITLE: Implementing Constexpr Domain Source Function in C++\nDESCRIPTION: Implementation of the `.get()` function that returns a constexpr static instance of the domain. Since the implementation is fully constexpr, the compiler can evaluate it entirely at compile-time with no runtime representation when optimization is enabled.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/experimental/worked-example/source.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nconstexpr inline const domain_type &domain::get() noexcept\n{\n  static constexpr domain_type v;\n  return v;\n}\n```\n\n----------------------------------------\n\nTITLE: Example Usage of unpack_args in C++\nDESCRIPTION: Example demonstrating how to use unpack_args with is_same metafunction to compare two integers wrapped in a vector.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/unpack_args.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_MPL_ASSERT(( apply< \n      unpack_args< is_same<_1,_2> >\n    , vector<int,int>\n    > ));\n```\n\n----------------------------------------\n\nTITLE: Preprocessor Definitions for ICU\nDESCRIPTION: This snippet defines preprocessor macros related to the International Components for Unicode (ICU) library.  It specifies that ICU has a library suffix and defines the suffix's C name. This is necessary for the build process to correctly link against the ICU library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(\"-DU_HAVE_LIB_SUFFIX=1\")\nadd_definitions(\"-DU_LIB_SUFFIX_C_NAME=_64\")\n```\n\n----------------------------------------\n\nTITLE: Pixel Iterator Concept Definition\nDESCRIPTION: Defines the `PixelIteratorConcept` for random access traversal iterators. It specifies that the value type must model `PixelValueConcept`, provides access to the immutable iterator type, indicates mutability and whether the iterator is an adaptor.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/pixel_iterator.rst.txt#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nconcept PixelIteratorConcept<RandomAccessTraversalIteratorConcept Iterator>\n    : PixelBasedConcept<Iterator>\n{\n  where PixelValueConcept<value_type>;\n  typename const_iterator_type<It>::type;\n      where PixelIteratorConcept<const_iterator_type<It>::type>;\n  static const bool  iterator_is_mutable<It>::value;\n  static const bool  is_iterator_adaptor<It>::value;   // is it an iterator adaptor\n};\n\ntemplate <typename Iterator>\nconcept MutablePixelIteratorConcept : PixelIteratorConcept<Iterator>, MutableRandomAccessIteratorConcept<Iterator> {};\n```\n\n----------------------------------------\n\nTITLE: Using iter_fold for Finding Maximum Element in C++\nDESCRIPTION: Example usage of iter_fold to find the maximum element in a vector of integers. It demonstrates how to define the sequence, initial state, and comparison operation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/iter_fold.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntypedef vector_c<int,5,-1,0,7,2,0,-5,4> numbers;\ntypedef iter_fold<\n      numbers\n    , begin<numbers>::type\n    , if_< less< deref<_1>, deref<_2> >,_2,_1 >\n    >::type max_element_iter;\n\nBOOST_MPL_ASSERT_RELATION( deref<max_element_iter>::type::value, ==, 7 );\n```\n\n----------------------------------------\n\nTITLE: Implementing Forward Pack Structure in C++\nDESCRIPTION: Defines a pack_forward_f structure that creates a pack while preserving the value category of the forwarded arguments. It uses perfect forwarding to maintain the original type information.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/pack.hpp.txt#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\nstruct pack_forward_f\n{\n    template<class... Ts>\n    constexpr auto operator()(Ts&&... xs) const BOOST_HOF_RETURNS\n    (\n        pack_base<typename gens<sizeof...(Ts)>::type, Ts&&...>(BOOST_HOF_FORWARD(Ts)(xs)...)\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Building Beast Library Components with b2/bjam in Bash\nDESCRIPTION: Commands for building Beast tests, examples, and documentation using the b2/bjam build tool. Requires b2 to be in your PATH and uses C++11 standard.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/beast/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nexport PATH=$PWD:$PATH\nb2 -j2 libs/beast/test cxxstd=11      # bjam must be in your $PATH\nb2 -j2 libs/beast/example cxxstd=11   # \"-j2\" means use two processors\nb2 libs/beast/doc                     # Doxygen and Saxon are required for this\n```\n\n----------------------------------------\n\nTITLE: Building Boost Thread Library in CMake\nDESCRIPTION: Configures the Boost Thread library as a static library, including platform-specific source files and setting compile definitions. It links against the boost_boost interface target and is linked by boost_locale.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/CMakeLists.txt#2025-04-22_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(boost_thread STATIC\n    ${boost_src}/libs/thread/src/future.cpp\n    ${boost_src}/libs/thread/src/tss_null.cpp\n    ${BOOST_THREAD_PLATFORM_SRC}\n)\ntarget_link_libraries(boost_thread PUBLIC boost_boost)\ntarget_link_libraries(boost_locale PUBLIC boost_thread)\ntarget_compile_definitions(boost_thread PRIVATE \"BOOST_SYSTEM_STATIC_LINK=1\")\ntarget_compile_definitions(boost_thread PUBLIC  \"BOOST_ALL_NO_LIB=1\")\n```\n\n----------------------------------------\n\nTITLE: Creating Step Iterators with Dynamic Steps in C++\nDESCRIPTION: This C++ template function 'make_step_iterator' constructs a step iterator from a base iterator. It accepts a base iterator and a step size as parameters and returns a dynamically configurable step iterator adhering to the MemoryBasedIteratorConcept and HasDynamicXStepTypeConcept.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/pixel_iterator.rst#2025-04-22_snippet_10\n\nLANGUAGE: C++\nCODE:\n```\n// Iterator models MemoryBasedIteratorConcept, HasDynamicXStepTypeConcept\ntemplate <typename Iterator>\ntypename dynamic_x_step_type<Iterator>::type make_step_iterator(Iterator const& it, std::ptrdiff_t step);\n```\n\n----------------------------------------\n\nTITLE: Including bool_ Header in C++\nDESCRIPTION: This snippet shows how to include the header file for the bool_ template in a C++ program.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/bool_.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/bool.hpp>\n```\n\n----------------------------------------\n\nTITLE: Implementing Unpack Simple Function in C++\nDESCRIPTION: Defines the unpack_simple function template in the detail namespace. This function unpacks a single sequence and applies it to the given function.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/unpack.hpp.txt#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nnamespace detail {\n\ntemplate<class F, class Sequence>\nconstexpr auto unpack_simple(F&& f, Sequence&& s) BOOST_HOF_RETURNS\n(\n    detail::unpack_impl(BOOST_HOF_FORWARD(F)(f), BOOST_HOF_FORWARD(Sequence)(s))\n)\n\n}\n```\n\n----------------------------------------\n\nTITLE: Autodiff Example Configuration\nDESCRIPTION: Sets up build configuration for the autodiff example, including dependencies and library linking. Includes special handling for Clang on Linux platforms.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/yap/example/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(autodiff autodiff_example.cpp)\nadd_dependencies(autodiff autodiff_library)\ntarget_link_libraries(autodiff yap boost autodiff_library)\nif (clang_on_linux)\n    target_link_libraries(autodiff c++)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: LZ4 Block Structure ASCII Diagram\nDESCRIPTION: ASCII diagram showing how dictionary compression is applied to individual blocks, where each block uses the same dictionary as history but remains independent for compression.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/lz4/examples/dictionaryRandomAccess.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n    Dictionary\n         +\n         |\n         v\n    +---------+\n    | Block#1 |\n    +----+----+\n         |\n         v\n      {Out#1}\n\n\n    Dictionary\n         +\n         |\n         v\n    +---------+\n    | Block#2 |\n    +----+----+\n         |\n         v\n      {Out#2}\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: Configures private include paths for the library including arangod core, enterprise-specific includes, and third-party function2 library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/Utils/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(arango_utils PRIVATE\n  \"${PROJECT_SOURCE_DIR}/arangod\"\n  \"${PROJECT_SOURCE_DIR}/${ENTERPRISE_INCLUDE_DIR}\"\n  \"${PROJECT_SOURCE_DIR}/3rdParty/iresearch/external/function2\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket Client Executable with CMake\nDESCRIPTION: Configures CMake build for an asynchronous WebSocket client example. Groups source files, creates executable target, links required libraries (Asio and Beast), and sets the project folder organization.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/beast/example/websocket/client/async/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nGroupSources(include/boost/beast beast)\nGroupSources(example/websocket/client/async \"/\")\n\nadd_executable (websocket-client-async\n    ${BOOST_BEAST_FILES}\n    Jamfile\n    websocket_client_async.cpp\n)\n\ntarget_link_libraries(websocket-client-async\n    lib-asio\n    lib-beast)\n\nset_property(TARGET websocket-client-async PROPERTY FOLDER \"example-websocket-client\")\n```\n\n----------------------------------------\n\nTITLE: Filtering GDB Stack Traces\nDESCRIPTION: Command for filtering GDB stack traces using a JavaScript utility script, with an option for verbose output to help with updating filters.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/CONTRIBUTING.md#2025-04-22_snippet_35\n\nLANGUAGE: bash\nCODE:\n```\nscripts/filter_stacktraces.js [list of gdb output files] --extremeVerbosity true\n```\n\n----------------------------------------\n\nTITLE: Sequential BFS Visitor Example\nDESCRIPTION: This code snippet demonstrates a basic BFS visitor that calculates the distance from the source vertex to all other vertices. It uses a `DistanceMap` to store the distances. This visitor is designed for sequential BFS and needs to be adapted for distributed BFS to handle potential race conditions and data inconsistencies.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/breadth_first_search.rst#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate<typename DistanceMap>\nstruct bfs_discovery_visitor : bfs_visitor<> \n{\n  bfs_discovery_visitor(DistanceMap distance) : distance(distance) {}\n\n  template<typename Edge, typename Graph>\n  void tree_edge(Edge e, const Graph& g)\n  {\n    std::size_t new_distance = get(distance, source(e, g)) + 1;\n    put(distance, target(e, g), new_distance);\n  }\n  \n private:\n  DistanceMap distance;\n};\n```\n\n----------------------------------------\n\nTITLE: Serialization Method for Reversible Pointer Container in C++\nDESCRIPTION: This serialization method integrates with Boost.Serialization to facilitate saving and loading of the container's state, while handling exceptions during the loading process.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/reversible_ptr_container.rst#2025-04-22_snippet_21\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<class Archive, class T, class CA, class VPC> void serialize( Archive& ar, reversible_ptr_container<T,CA,VPC>& c, const unsigned int version );\n```\n\n----------------------------------------\n\nTITLE: Copying Elements with Boost Pointer Containers\nDESCRIPTION: This snippet illustrates the use of Boost's ptr_container insert iterators to copy elements from a ptr_list to a ptr_vector, including the handling of NULL pointers during insertion.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/ptr_inserter.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nboost::ptr_list<Base> coll1;\n// ...\nboost::ptr_vector<Base> coll2;\nstd::copy( coll1.begin(), coll1.end(),  \n           boost::ptr_container::ptr_back_inserter(coll2) );\n```\n\n----------------------------------------\n\nTITLE: Expression Semantics for times Metafunction with Type Alias in C++\nDESCRIPTION: Shows how the times metafunction is used with a typedef to compute the product of multiple Integral Constants. The resulting type r contains the computed product value.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/times.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntypedef times<c1,\\ |...|\\ c\\ *n*\\>::type r;\n```\n\n----------------------------------------\n\nTITLE: Plural Forms Translation Example in C++\nDESCRIPTION: Example demonstrating how to handle plural forms in message translation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/doc/messages_formatting.txt#2025-04-22_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\ncout << format(translate( \"You have {1} file in the directory\",\n                          \"You have {1} files in the directory\",\n                          files)) % files << endl;\n```\n\n----------------------------------------\n\nTITLE: Adding Beast Project Subdirectories in CMake\nDESCRIPTION: Adds client and server subdirectories to the CMake build system. This enables the build process to include all source files from these directories in the compilation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/beast/example/http/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory (client)\nadd_subdirectory (server)\n```\n\n----------------------------------------\n\nTITLE: Equivalent implementation of back_inserter in C++\nDESCRIPTION: Shows the semantic implementation of back_inserter using push_back with placeholders.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/back_inserter.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nstruct in : inserter<s,push_back<_1,_2> > {};\n```\n\n----------------------------------------\n\nTITLE: Boost.Log Configuration Options\nDESCRIPTION: Defines various cache variables for configuring Boost.Log build options, including threading support, character types, and platform-specific features.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/log/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(BOOST_LOG_NO_THREADS OFF CACHE BOOL \"Disable multithreading support in Boost.Log\")\nset(BOOST_LOG_WITHOUT_CHAR OFF CACHE BOOL \"Disable support for narrow character logging in Boost.Log\")\nset(BOOST_LOG_WITHOUT_WCHAR_T OFF CACHE BOOL \"Disable support for wide character logging in Boost.Log\")\nset(BOOST_LOG_WITHOUT_DEFAULT_FACTORIES OFF CACHE BOOL \"Disable default factories for filters and formatters in Boost.Log\")\nset(BOOST_LOG_WITHOUT_SETTINGS_PARSERS OFF CACHE BOOL \"Disable settings, filter and formatter parsers in Boost.Log\")\n```\n\n----------------------------------------\n\nTITLE: Reverse Transform Synopsis (Unary)\nDESCRIPTION: This code snippet shows the synopsis for the unary version of the reverse_transform algorithm. It takes a sequence `Seq`, an operation `Op`, and an optional inserter `In` as template parameters. The `type` member is the resulting transformed sequence.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/reverse_transform.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      typename Seq\n    , typename Op\n    , typename In = |unspecified|\n    >\nstruct reverse_transform\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Named Parameters with Boost.Parameter in C++\nDESCRIPTION: Uses Boost.Parameter macros to define named parameters for a function, specifying input/output characteristics for each parameter.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_71\n\nLANGUAGE: cpp\nCODE:\n```\n|BOOST_PARAMETER_NAME|_\\((_lrc, kw0) in(lrc))\n|BOOST_PARAMETER_NAME|_\\((_lr, kw1) in_out(lr))\n|BOOST_PARAMETER_NAME|_\\((_rrc, kw2) in(rrc))\n|BOOST_PARAMETER_NAME|_\\((_rr, kw3) consume(rr))\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for ArangoDB Cache\nDESCRIPTION: This snippet uses CMake's `target_include_directories` command to specify the include directories for the `arango_cache` library. It sets the private include directories to `${PROJECT_SOURCE_DIR}/arangod` and `${PROJECT_SOURCE_DIR}/${ENTERPRISE_INCLUDE_DIR}`. These directories contain header files required for compiling the cache library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/Cache/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(arango_cache PRIVATE\n  \"${PROJECT_SOURCE_DIR}/arangod\"\n  \"${PROJECT_SOURCE_DIR}/${ENTERPRISE_INCLUDE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Implementing make_reverse_iterator function in C++\nDESCRIPTION: This code snippet defines the make_reverse_iterator function template, which creates a reverse_iterator from a given iterator. It simplifies the process of creating reverse iterators.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/reverse_iterator.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <class BidirectionalIterator>\nreverse_iterator<BidirectionalIterator>\nmake_reverse_iterator(BidirectionalIterator i)\n{\n    return reverse_iterator<BidirectionalIterator>(i);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Keyword Objects for depth_first_search Parameters in C++\nDESCRIPTION: Creates keyword objects for each parameter of depth_first_search using the BOOST_PARAMETER_NAME macro. This allows the parameters to be used as named arguments.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/index.rst#2025-04-22_snippet_6\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/parameter/name.hpp>\n\nnamespace graphs {\n\n    BOOST_PARAMETER_NAME(graph)    // Note: no semicolon\n    BOOST_PARAMETER_NAME(visitor)\n    BOOST_PARAMETER_NAME(root_vertex)\n    BOOST_PARAMETER_NAME(index_map)\n    BOOST_PARAMETER_NAME(color_map)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BinaryFunctionObject Concept in C++\nDESCRIPTION: This code snippet defines the BinaryFunctionObject concept, which represents an object with a const call operator that accepts two parameters.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/src/concepts.md#2025-04-22_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nconcept UnaryFunctionObject\n{\n    template<class T, class U>\n    auto operator()(T&&, U&&) const;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining function h using outcome to handle failures\nDESCRIPTION: This snippet defines a function `h` that uses `outcome<int>` as its return type to report failures.  It calls functions `f` and `g` and uses the `TRY` macro to forward failures encoded in `result<T, EC>` as `outcome<T, EC, EP>` without any loss in information. It also demonstrates how to store the current exception through `std::exception_ptr` inside `outcome<T, EC, EP>`.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/tutorial/essential/outcome/_index.md#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\n// clang-format off\noutcome<int> h() {\n  TRY(f());\n  TRY(g());\n  return 1;\n}\n// clang-format on\n```\n\n----------------------------------------\n\nTITLE: Tokenizing with Boost.Tokenizer using Range-based for Loop in C++11\nDESCRIPTION: Shows a more modern approach to using Boost.Tokenizer with C++11's range-based for loop. This simplifies the code by eliminating explicit iterator management.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/tokenizer/README.md#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <iostream>\n#include <boost/tokenizer.hpp>\n#include <string>\n\nint main(){\n    std::string s = \"This is,  a test\";\n    boost::tokenizer<> tok(s);\n    for (auto token: tok) {\n        std::cout << token << \"\\n\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Function Signature with Parameterized Constraints using BOOST_PARAMETERS\nDESCRIPTION: This snippet displays a complex function signature utilizing BOOST_PARAMETER macros for defining constraints on function parameters, such as graph, root_vertex, index_map, and color_map, using previously declared metafunction predicates. It showcases how optional and required parameters are structured.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/index.rst#2025-04-22_snippet_22\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_PARAMETER_FUNCTION((void), depth_first_search, graphs,\n(required\n    (graph, *(**graph_predicate**))\n)\n(optional\n    (visitor\n      , *  // not easily checkable\n      , boost::dfs_visitor<>()\n    )\n    (root_vertex\n      , (**vertex_descriptor_predicate**)\n      , *vertices(graph).first\n    )\n    (index_map\n      , *(**index_map_predicate**)\n      , get(boost::vertex_index, graph)\n    )\n    (color_map\n      , *(**color_map_predicate**)\n      , default_color_map(num_vertices(graph), index_map)\n    )\n)\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost Phoenix Library with CMake\nDESCRIPTION: This CMake script sets up the Boost Phoenix library as an interface library. It defines the project, creates the library target, sets include directories, and specifies dependencies on other Boost libraries. It also conditionally includes a test subdirectory if testing is enabled.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/phoenix/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.16)\n\nproject(boost_phoenix VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n\nadd_library(boost_phoenix INTERFACE)\nadd_library(Boost::phoenix ALIAS boost_phoenix)\n\ntarget_include_directories(boost_phoenix INTERFACE include)\n\ntarget_link_libraries(boost_phoenix\n  INTERFACE\n    Boost::assert\n    Boost::bind\n    Boost::config\n    Boost::core\n    Boost::function\n    Boost::fusion\n    Boost::mpl\n    Boost::predef\n    Boost::preprocessor\n    Boost::proto\n    Boost::range\n    Boost::smart_ptr\n    Boost::type_traits\n    Boost::utility\n)\n\nif(BUILD_TESTING AND EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/test/CMakeLists.txt\")\n\n  add_subdirectory(test)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Linking Dependencies for arango_common_rest_handler\nDESCRIPTION: This snippet specifies the libraries that 'arango_common_rest_handler' depends on, ensuring that the necessary functionalities from these libraries are available during the build process.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/RestHandler/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(arango_common_rest_handler\n  arango_cluster_methods\n  arango_utils\n  arango_iresearch)\n```\n\n----------------------------------------\n\nTITLE: Example of Using read_graphviz Function for Graph Initialization\nDESCRIPTION: This example demonstrates how to use the read_graphviz function to read a directed graph representation into a custom-defined adjacency_list graph, setting up property maps for graph vertices and edges along with parsing a simple DOT graph input.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph/doc/read_graphviz.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\n// Vertex properties\ntypedef property < vertex_name_t, std::string,\n            property < vertex_color_t, float > > vertex_p;\n// Edge properties\ntypedef property < edge_weight_t, double > edge_p;\n// Graph properties\ntypedef property < graph_name_t, std::string > graph_p;\n// adjacency_list-based type\ntypedef adjacency_list < vecS, vecS, directedS,\n    vertex_p, edge_p, graph_p > graph_t;\n\n// Construct an empty graph and prepare the dynamic_property_maps.\ngraph_t graph(0);\ndynamic_properties dp;\n\nproperty_map<graph_t, vertex_name_t>::type name =\n    get(vertex_name, graph);\ndp.property(\"node_id\",name);\n\nproperty_map<graph_t, vertex_color_t>::type mass =\n    get(vertex_color, graph);\ndp.property(\"mass\",mass);\n\nproperty_map<graph_t, edge_weight_t>::type weight =\n    get(edge_weight, graph);\ndp.property(\"weight\",weight);\n\n// Sample graph as an std::istream;\nstd::istringstream\n    gvgraph(\"digraph { graph [name=\\\"graphname\\\"]  a  c e [mass = 6.66] }\\\");\n\nbool status = read_graphviz(gvgraph,graph,dp,\"node_id\");\n```\n\n----------------------------------------\n\nTITLE: Defining count Template in C++\nDESCRIPTION: Defines the count template structure for counting occurrences of a type T in a Sequence. It returns an unspecified type representing the count.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/count.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      typename Sequence\n    , typename T\n    >\nstruct count\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining char_ Template Class in C++\nDESCRIPTION: Defines the char_ template class, which wraps a char value as an Integral Constant. It takes a single non-type template parameter N of type char.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/char_.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      char N\n    >\nstruct char_\n{\n    // |unspecified|\n    // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Single View Usage Example\nDESCRIPTION: Example demonstrating the usage of single_view including type definitions and assertions to verify sequence behavior.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/single_view.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ntypedef single_view<int> view;\ntypedef begin<view>::type first;\ntypedef end<view>::type last;\n\nBOOST_MPL_ASSERT(( is_same< deref<first>::type,int > ));\nBOOST_MPL_ASSERT(( is_same< next<first>::type,last > ));\nBOOST_MPL_ASSERT(( is_same< prior<last>::type,first > ));\n\nBOOST_MPL_ASSERT_RELATION( size<view>::value, ==, 1 );\n```\n\n----------------------------------------\n\nTITLE: Defining Han Unicode Block\nDESCRIPTION: Lists the code point ranges for the Han (Chinese) script in Unicode. This block contains 75,738 code points including unified ideographs, radicals, and compatibility ideographs across multiple planes.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/spirit/workbench/unicode/Scripts.txt#2025-04-22_snippet_20\n\nLANGUAGE: unicode\nCODE:\n```\n2E80..2E99    ; Han # So  [26] CJK RADICAL REPEAT..CJK RADICAL RAP\n2E9B..2EF3    ; Han # So  [89] CJK RADICAL CHOKE..CJK RADICAL C-SIMPLIFIED TURTLE\n2F00..2FD5    ; Han # So [214] KANGXI RADICAL ONE..KANGXI RADICAL FLUTE\n3005          ; Han # Lm       IDEOGRAPHIC ITERATION MARK\n3007          ; Han # Nl       IDEOGRAPHIC NUMBER ZERO\n3021..3029    ; Han # Nl   [9] HANGZHOU NUMERAL ONE..HANGZHOU NUMERAL NINE\n3038..303A    ; Han # Nl   [3] HANGZHOU NUMERAL TEN..HANGZHOU NUMERAL THIRTY\n303B          ; Han # Lm       VERTICAL IDEOGRAPHIC ITERATION MARK\n3400..4DB5    ; Han # Lo [6582] CJK UNIFIED IDEOGRAPH-3400..CJK UNIFIED IDEOGRAPH-4DB5\n4E00..9FCB    ; Han # Lo [20940] CJK UNIFIED IDEOGRAPH-4E00..CJK UNIFIED IDEOGRAPH-9FCB\nF900..FA2D    ; Han # Lo [302] CJK COMPATIBILITY IDEOGRAPH-F900..CJK COMPATIBILITY IDEOGRAPH-FA2D\nFA30..FA6D    ; Han # Lo  [62] CJK COMPATIBILITY IDEOGRAPH-FA30..CJK COMPATIBILITY IDEOGRAPH-FA6D\nFA70..FAD9    ; Han # Lo [106] CJK COMPATIBILITY IDEOGRAPH-FA70..CJK COMPATIBILITY IDEOGRAPH-FAD9\n20000..2A6D6  ; Han # Lo [42711] CJK UNIFIED IDEOGRAPH-20000..CJK UNIFIED IDEOGRAPH-2A6D6\n2A700..2B734  ; Han # Lo [4149] CJK UNIFIED IDEOGRAPH-2A700..CJK UNIFIED IDEOGRAPH-2B734\n2F800..2FA1D  ; Han # Lo [542] CJK COMPATIBILITY IDEOGRAPH-2F800..CJK COMPATIBILITY IDEOGRAPH-2FA1D\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost Align Library with CMake\nDESCRIPTION: This CMake script sets up the Boost Align library as an interface library. It specifies the minimum CMake version, defines the project, creates the library target, sets include directories, and links against required Boost dependencies.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/align/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5)\n\nproject(BoostAlign LANGUAGES CXX)\n\nadd_library(boost_align INTERFACE)\n\nadd_library(Boost::align ALIAS boost_align)\n\ntarget_include_directories(boost_align INTERFACE include)\n\ntarget_link_libraries(boost_align INTERFACE\n    Boost::assert\n    Boost::config\n    Boost::core\n    Boost::static_assert)\n```\n\n----------------------------------------\n\nTITLE: Adding Boost Process Library\nDESCRIPTION: This snippet adds two libraries: boost_process as an interface library and Boost::process as an alias for boost_process. Interface libraries are used to define include directories and link dependencies without containing any source code themselves.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/process/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n\"add_library(boost_process INTERFACE)\nadd_library(Boost::process ALIAS boost_process)\"\n```\n\n----------------------------------------\n\nTITLE: Defining Iterators and Views in GIL with C++ Templates\nDESCRIPTION: This snippet explains how to create iterators and views using GIL by defining metafunctions based on pixel types. It includes templates for creating iterators and views from pixels, as well as deriving types from horizontal iterators, catering to specific image layouts and properties.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/metafunctions.rst.txt#2025-04-22_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <typename Pixel, bool IsPlanar=false, bool IsStep=false, bool IsMutable=true>\nstruct iterator_type_from_pixel { typedef ... type; };\n\ntemplate <typename Pixel, bool IsPlanar=false, bool IsStepX=false, bool IsMutable=true>\nstruct view_type_from_pixel { typedef ... type; };\n\ntemplate <typename XIterator>\nstruct type_from_x_iterator\n{\n  typedef ... step_iterator_t;\n  typedef ... xy_locator_t;\n  typedef ... view_t;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining HasTransposedTypeConcept in C++\nDESCRIPTION: This concept checks if a type T has a nested type transposed_type, which is a metafunction, indicating whether the type is transposable.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/pixel_locator.rst.txt#2025-04-22_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\n\"concept HasTransposedTypeConcept<typename T>\\n  {\\n    typename transposed_type<T>;\\n        where Metafunction<transposed_type<T> >;\\n  };\"\n```\n\n----------------------------------------\n\nTITLE: Creating Client Tools Target in CMake\nDESCRIPTION: Defines a custom target for ArangoDB client tools, including dependencies on various components.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/client-tools/CMakeLists.txt#2025-04-22_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_target(client-tools\n    DEPENDS arangodump\n            arangoexport\n            arangoimport\n            arangorestore\n            arangobench\n            arangovpack)\n```\n\n----------------------------------------\n\nTITLE: Defining not_equal_to Metafunction Template in C++\nDESCRIPTION: Defines the template structure for the not_equal_to metafunction. It takes two template parameters T1 and T2, and defines an unspecified type member.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/not_equal_to.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      typename T1\n    , typename T2\n    >\nstruct not_equal_to\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Result Type Dependencies\nDESCRIPTION: Lists the minimal header dependencies required for basic_result implementation, ensuring lightweight integration\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/basic_result/_index.md#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\n#include <cstdint>\n#include <initializer_list>\n#include <iosfwd>\n#include <new>\n#include <type_traits>\n```\n\n----------------------------------------\n\nTITLE: Defining Iterator Traits with Const Qualifiers in C++\nDESCRIPTION: This code defines the reference type of an iterator using const qualifiers to ensure correctness with proxy references, especially under mutable conditions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/technicalities.rst.txt#2025-04-22_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\n    struct iterator_traits<rgb_planar_pixel_iterator>\n    {\n      typedef const my_reference_proxy<T> reference;\n    };\n```\n\n----------------------------------------\n\nTITLE: Implementing Postfix Decrement Operator for Bidirectional Traversal in C++\nDESCRIPTION: This code snippet demonstrates the implementation of the postfix decrement operator (r--) for a Bidirectional Traversal Iterator. It returns a copy of the original iterator and then decrements the original.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/BidirectionalTraversal.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n{\n  X tmp = r;\n  --r;\n  return tmp;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Project Evaluation Structure in C++\nDESCRIPTION: Defines a template structure 'project_eval' for evaluating projections on values. It stores a reference to the value and the projection, with a callable operator that applies the projection.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/proj.hpp.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<class T, class Projection>\nstruct project_eval\n{\n    T&& x;\n    const Projection& p;\n\n    template<class X, class P>\n    constexpr project_eval(X&& xp, const P& pp) : x(BOOST_HOF_FORWARD(X)(xp)), p(pp)\n    {}\n\n    constexpr auto operator()() const BOOST_HOF_RETURNS\n    (p(BOOST_HOF_FORWARD(T)(x)));\n};\n```\n\n----------------------------------------\n\nTITLE: Requesting Remote Keys in Distributed Property Map in C++\nDESCRIPTION: Function to request that a specific element be available after the next synchronization step, establishing ghost cells if needed.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/distributed_property_map.rst#2025-04-22_snippet_13\n\nLANGUAGE: cpp\nCODE:\n```\nvoid request(distributed_property_map pm, const key_type& key);\n```\n\n----------------------------------------\n\nTITLE: Building HTTP Client Library\nDESCRIPTION: Sets up the arango_basic_http_client static library with HTTP and endpoint-related components\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/lib/CMakeLists.txt#2025-04-22_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(arango_basic_http_client STATIC\n        Rest/CommonDefines.cpp\n        Rest/GeneralRequest.cpp\n        Rest/GeneralResponse.cpp\n        Rest/HttpRequest.cpp\n        Rest/HttpResponse.cpp\n        Rest/PathMatch.h\n        Rest/Version.cpp\n        SimpleHttpClient/ClientConnection.cpp\n        SimpleHttpClient/ConnectionCache.cpp\n        SimpleHttpClient/GeneralClientConnection.cpp\n        SimpleHttpClient/HttpResponseChecker.cpp\n        SimpleHttpClient/SimpleHttpClient.cpp\n        SimpleHttpClient/SimpleHttpResult.cpp\n        SimpleHttpClient/SslClientConnection.cpp\n        Ssl/SslFeature.cpp\n        Ssl/SslInterface.cpp\n        Ssl/ssl-helper.cpp\n\n        Endpoint/Endpoint.cpp\n        Endpoint/EndpointIp.cpp\n        Endpoint/EndpointIpV4.cpp\n        Endpoint/EndpointIpV6.cpp\n        Endpoint/EndpointList.cpp\n        Endpoint/EndpointSrv.cpp\n        Endpoint/EndpointUnixDomain.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Linking V8 Interface Library in CMake\nDESCRIPTION: Conditionally links the V8 interface library when V8 support is enabled in the build configuration.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/CMakeLists.txt#2025-04-22_snippet_28\n\nLANGUAGE: CMake\nCODE:\n```\nif (USE_V8)\n  target_link_libraries(arangodbtests v8_interface)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Printing and reshaping an array\nDESCRIPTION: This part of the code prints the original and reshaped arrays. It converts the original array to a string format and reshapes the array to a 1D format before printing it again.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/doc/html/numpy/_sources/tutorial/simple.rst.txt#2025-04-22_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\n  std::cout << \"Original array:\\n\" << p::extract<char const *>(p::str(a)) << std::endl;\n\n  // Reshape the array into a 1D array\n  a = a.reshape(p::make_tuple(9));\n  // Print it again.\n  std::cout << \"Reshaped array:\\n\" << p::extract<char const *>(p::str(a)) << std::endl;\n}\n```\n\n----------------------------------------\n\nTITLE: MPL Library Usage Example: Element-wise Sum of Three Vectors\nDESCRIPTION: Example demonstrating how to use zip_view with transform_view to calculate the element-wise sum of three vectors. The example defines three vectors of integers and combines them using zip_view, then applies the plus operation to each trio of elements.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/zip_view.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ntypedef vector_c<int,1,2,3,4,5> v1;\ntypedef vector_c<int,5,4,3,2,1> v2;\ntypedef vector_c<int,1,1,1,1,1> v3;\n\ntypedef transform_view<\n      zip_view< vector<v1,v2,v3> >\n    , unpack_args< plus<_1,_2,_3> >\n    > sum;\n\nBOOST_MPL_ASSERT(( equal< sum, vector_c<int,7,7,7,7,7> > ));\n```\n\n----------------------------------------\n\nTITLE: Including bitand_ Metafunction Headers in C++\nDESCRIPTION: Header files required to use the bitand_ metafunction in C++ code.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/bitand_.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/bitand.hpp>\n#include <boost/mpl/bitwise.hpp>\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost Variant2 Library with CMake\nDESCRIPTION: Defines the Boost Variant2 library project, sets up the library target, specifies include directories and dependencies, and configures optional testing. Requires CMake 3.8 or higher and C++11 support.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/variant2/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.8...3.20)\n\nproject(boost_variant2 VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n\nadd_library(boost_variant2 INTERFACE)\nadd_library(Boost::variant2 ALIAS boost_variant2)\n\ntarget_include_directories(boost_variant2 INTERFACE include)\n\ntarget_link_libraries(boost_variant2\n  INTERFACE\n    Boost::assert\n    Boost::config\n    Boost::mp11\n)\n\ntarget_compile_features(boost_variant2 INTERFACE cxx_std_11)\n\nif(BUILD_TESTING AND EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/test/CMakeLists.txt\")\n\n  add_subdirectory(test)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Channel Compatibility Concept in C++\nDESCRIPTION: This snippet defines the 'ChannelsCompatibleConcept' which checks if two channel concepts are compatible based on their value types. This concept facilitates safe operations between channels of potentially different types.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/channel.rst.txt#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\n  concept ChannelsCompatibleConcept<ChannelConcept T1, ChannelConcept T2>\\n  {\\n      where SameType<T1::value_type, T2::value_type>;\\n  };\\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Property Map in Adjacency List (C++)\nDESCRIPTION: Returns the property map object for a specified vertex property in an adjacency list. The property tag must match one of the properties in the VertexProperty template argument.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/distributed_adjacency_list.rst#2025-04-22_snippet_24\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <class PropertyTag>\nproperty_map<adjacency_list, PropertyTag>::type\nget(PropertyTag, adjacency_list& g);\n\ntemplate <class PropertyTag>\nproperty_map<adjacency_list, Tag>::const_type\nget(PropertyTag, const adjacency_list& g);\n```\n\n----------------------------------------\n\nTITLE: Displaying Configuration Options Table in reStructuredText\nDESCRIPTION: This RST code snippet creates a table that lists and describes various configuration macros for the Boost.HigherOrderFunctions library. It includes options for unpack sequence checking, expression SFINAE control, and recursive constexpr depth limitation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/src/configurations.md#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n```eval_rst\n+-----------------------------------------+--------------------------------------------------------------------------------+\n| Name                                    | Description                                                                    |\n+=========================================+================================================================================+\n| ``BOOST_HOF_CHECK_UNPACK_SEQUENCE``     | Unpack has extra checks to ensure that the function will be invoked with the   |\n|                                         | sequence. This extra check can help improve error reporting but it can slow    |\n|                                         | down compilation. This is enabled by default.                                  |\n+-----------------------------------------+--------------------------------------------------------------------------------+\n| ``BOOST_HOF_NO_EXPRESSION_SFINAE``      | This controls whether the library will use expression SFINAE to detect the     |\n|                                         | callability of functions. On MSVC, this is enabled by default, since it does   |\n|                                         | not have full support for expression SFINAE.                                   |\n+-----------------------------------------+--------------------------------------------------------------------------------+\n| ``BOOST_HOF_RECURSIVE_CONSTEXPR_DEPTH`` | Because C++ instantiates `constexpr` functions eagerly, recursion with         |\n|                                         | `constexpr` functions can cause the compiler to reach its internal limits. The |\n|                                         | setting is used by the library to set a limit on recursion depth to avoid      |\n|                                         | infinite template instantiations. The default is 16, but increasing the limit  |\n|                                         | can increase compile times.                                                    |\n+-----------------------------------------+--------------------------------------------------------------------------------+\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Inequality Operator for Outcome Objects\nDESCRIPTION: Compares two outcome objects for inequality by checking their value, error, and exception types. Returns true if the objects are not equal based on their current state and underlying type comparisons.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/basic_outcome/inequality_basic_outcome.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nbool operator!=(const basic_outcome<A, B, C, D> &) const\n```\n\n----------------------------------------\n\nTITLE: Scaling Images with Boost GIL in C++\nDESCRIPTION: The `resize.cpp` example demonstrates how to scale an image by leveraging bilinear or nearest-neighbour resampling techniques using Boost GIL. It generates an output image named `out-resize.jpg`. No additional external dependencies are specified, aside from Boost GIL, which must be included. The input is assumed to be an image file suitable for scaling, and the output is the rescaled image saved with a specified naming pattern.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/example/README.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n\"int main() {\\n  // Your code here\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Throwing bad_result_access Exception for Missing Value in C++\nDESCRIPTION: This code snippet demonstrates how the policy throws a bad_result_access exception when attempting to access a value that doesn't exist in a basic_outcome object.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/policies/throw_bad_result_access.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_OUTCOME_THROW_EXCEPTION(bad_result_access(\"no value\"));\n```\n\n----------------------------------------\n\nTITLE: Correct usage of boost::locale::format with temporary values\nDESCRIPTION: This example demonstrates the correct way to use boost::locale::format when dealing with temporary values that need to persist until formatting occurs.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/doc/localized_text_formatting.txt#2025-04-22_snippet_9\n\nLANGUAGE: C++\nCODE:\n```\nformat fmt(\"Adding {1} to {2}, we get {3}\");\nfmt % a;\nfmt % b;\nint a_plus_b = a+b;\nfmt % a_plus_b;\ncout << fmt;\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost Algorithm Library with CMake\nDESCRIPTION: Sets up a CMake interface library for Boost Algorithm with all required Boost dependencies. Configures include directories and links against other Boost components. Includes conditional test directory inclusion.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/algorithm/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.16)\n\nproject(boost_algorithm VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n\nadd_library(boost_algorithm INTERFACE)\nadd_library(Boost::algorithm ALIAS boost_algorithm)\n\ntarget_include_directories(boost_algorithm INTERFACE include)\n\ntarget_link_libraries(boost_algorithm\n  INTERFACE\n    Boost::array\n    Boost::assert\n    Boost::bind\n    Boost::concept_check\n    Boost::config\n    Boost::core\n    Boost::exception\n    Boost::function\n    Boost::iterator\n    Boost::mpl\n    Boost::range\n    Boost::regex\n    Boost::static_assert\n    Boost::throw_exception\n    Boost::tuple\n    Boost::type_traits\n    Boost::unordered\n)\n\nif(BUILD_TESTING AND EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/test/CMakeLists.txt\")\n\n  add_subdirectory(test)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost Bimap Library with CMake\nDESCRIPTION: This CMake script sets up the Boost Bimap library as an interface library. It defines the project, creates the library target, sets include directories, and specifies dependencies on other Boost libraries. It also conditionally includes tests if BUILD_TESTING is enabled.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/bimap/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.16)\n\nproject(boost_bimap VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n\nadd_library(boost_bimap INTERFACE)\nadd_library(Boost::bimap ALIAS boost_bimap)\n\ntarget_include_directories(boost_bimap INTERFACE include)\n\ntarget_link_libraries(boost_bimap\n  INTERFACE\n    Boost::concept_check\n    Boost::config\n    Boost::container_hash\n    Boost::core\n    Boost::iterator\n    Boost::lambda\n    Boost::mpl\n    Boost::multi_index\n    Boost::preprocessor\n    Boost::serialization\n    Boost::static_assert\n    Boost::throw_exception\n    Boost::type_traits\n    Boost::utility\n)\n\nif(BUILD_TESTING AND EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/test/CMakeLists.txt\")\n\n  add_subdirectory(test)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Using BOOST_OUTCOME_TRY_FAILURE_LIKELY for Optimizing Expected Failure Paths in C++\nDESCRIPTION: This suite of macros hint to the compiler that failure is the expected outcome, which can help with optimization of error-heavy code paths.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/changelog/_index.md#2025-04-22_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_OUTCOME_TRY_FAILURE_LIKELY\n```\n\n----------------------------------------\n\nTITLE: Defining get_color Function for ColorBase in C++\nDESCRIPTION: This snippet provides two overloads of the get_color function, which returns a reference to elements corresponding to a specified color in a given color base. It facilitates accessing color components efficiently.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/color_base.rst.txt#2025-04-22_snippet_8\n\nLANGUAGE: cpp\nCODE:\n```\n// Returns a reference to the element corresponding to the given color\ntemplate <typename ColorBase, typename Color>\ntypename color_reference_t<Color,ColorBase>::type get_color(ColorBase& cb, Color=Color());\ntemplate <typename ColorBase, typename Color>\ntypename color_const_reference_t<Color,ColorBase>::type get_color(const ColorBase& cb, Color=Color());\n```\n\n----------------------------------------\n\nTITLE: Configuring Optional Example Builds in CMake\nDESCRIPTION: Conditionally adds the examples subdirectory if BUILD_EXAMPLES is enabled and s2testing target exists.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/s2geometry/master/CMakeLists.txt#2025-04-22_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nif (BUILD_EXAMPLES AND TARGET s2testing)\n  add_subdirectory(\"doc/examples\" examples)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Implementing Single Function Match Adaptor in C++\nDESCRIPTION: Specialization of match_adaptor for a single function that inherits from callable_base<F> and provides the termination case for the recursive template pattern.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/match.hpp.txt#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<class F>\nstruct match_adaptor<F> : detail::callable_base<F>\n{\n    typedef detail::callable_base<F> base;\n    typedef match_adaptor fit_rewritable_tag;\n    using F::operator();\n\n    BOOST_HOF_INHERIT_CONSTRUCTOR(match_adaptor, detail::callable_base<F>);\n};\n```\n\n----------------------------------------\n\nTITLE: Using BOOST_MPL_ASSERT_MSG in a C++ Template\nDESCRIPTION: Demonstrates the usage of BOOST_MPL_ASSERT_MSG within a template to ensure that the template type parameter is an integral type.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/ASSERT_MSG.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntemplate< typename T > struct my\n{\n    // ...\n    BOOST_MPL_ASSERT_MSG( \n          is_integral<T>::value\n        , NON_INTEGRAL_TYPES_ARE_NOT_ALLOWED\n        , (T)\n        );\n};\n\nmy<void*> test;\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation Targets for LZ4\nDESCRIPTION: Sets up installation targets for libraries, executables, header files, man pages, and pkg-config files. This includes platform-specific symlink creation for Unix systems. Installation is only performed when not in bundled mode.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/lz4/build/cmake/CMakeLists.txt#2025-04-22_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT LZ4_BUNDLED_MODE)\n  include(GNUInstallDirs)\n\n  install(TARGETS ${LZ4_PROGRAMS_BUILT}\n    BUNDLE\tDESTINATION \"${CMAKE_INSTALL_BINDIR}\"\n    RUNTIME DESTINATION \"${CMAKE_INSTALL_BINDIR}\")\n  install(TARGETS ${LZ4_LIBRARIES_BUILT}\n    LIBRARY DESTINATION \"${CMAKE_INSTALL_LIBDIR}\"\n    ARCHIVE DESTINATION \"${CMAKE_INSTALL_LIBDIR}\"\n    RUNTIME DESTINATION \"${CMAKE_INSTALL_BINDIR}\")\n  install(FILES\n    \"${LZ4_LIB_SOURCE_DIR}/lz4.h\"\n    \"${LZ4_LIB_SOURCE_DIR}/lz4frame.h\"\n    \"${LZ4_LIB_SOURCE_DIR}/lz4hc.h\"\n    DESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}\")\n  install(FILES \"${LZ4_PROG_SOURCE_DIR}/lz4.1\"\n    DESTINATION \"${CMAKE_INSTALL_MANDIR}/man1\")\n  install(FILES \"${CMAKE_CURRENT_BINARY_DIR}/liblz4.pc\"\n    DESTINATION \"${CMAKE_INSTALL_LIBDIR}/pkgconfig\")\n\n  # install lz4cat and unlz4 symlinks on *nix\n  if(UNIX AND LZ4_BUILD_CLI)\n    install(CODE \"\n      foreach(f lz4cat unlz4)\n        set(dest \\\"\\$ENV{DESTDIR}${CMAKE_INSTALL_FULL_BINDIR}/\\${f}\\\")\n        message(STATUS \\\"Symlinking: \\${dest} -> lz4\\\")\n        execute_process(\n          COMMAND \\\"${CMAKE_COMMAND}\\\" -E create_symlink lz4 \\\"\\${dest}\\\")\n      endforeach()\n    \")\n\n    # create manpage aliases\n    foreach(f lz4cat unlz4)\n      file(WRITE \"${CMAKE_CURRENT_BINARY_DIR}/${f}.1\" \".so man1/lz4.1\\n\")\n      install(FILES \"${CMAKE_CURRENT_BINARY_DIR}/${f}.1\"\n        DESTINATION \"${CMAKE_INSTALL_MANDIR}/man1\")\n    endforeach()\n  endif(UNIX AND LZ4_BUILD_CLI)\nendif(NOT LZ4_BUNDLED_MODE)\n```\n\n----------------------------------------\n\nTITLE: Copyright Declaration in reStructuredText\nDESCRIPTION: Defines a copyright directive for Boost-related content, including license information and a reference to the Boost Software License.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/Algorithms-Querying.rst#2025-04-22_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. copyright:: Copyright �  2001-2009 Aleksey Gurtovoy and David Abrahams\n   Distributed under the Boost Software License, Version 1.0. (See accompanying\n   file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)\n```\n\n----------------------------------------\n\nTITLE: Copy Semantics for Pointer Containers\nDESCRIPTION: Illustrates different ways of copying pointer containers including deep copying, ownership transfer, and release operations.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/examples.rst#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nptr_vector<T> vec1; \n...\nptr_vector<T> vec2( vec1.clone() ); // deep copy objects of 'vec1' and use them to construct 'vec2', could be very expensive\nvec2 = vec1.release();              // give up ownership of pointers in 'vec1' and pass the ownership to 'vec2', rather cheap\nvec2.release();                     // give up ownership; the objects will be deallocated if not assigned to another container\nvec1 = vec2;                        // deep copy objects of 'vec2' and assign them to 'vec1', could be very expensive \nptr_vector<T> vec3( vec1 );         // deep copy objects of 'vec1', could be very expensive\n```\n\n----------------------------------------\n\nTITLE: Defining a Function with Parameter-Dependent Return Type in C++\nDESCRIPTION: Example of using BOOST_PARAMETER_FUNCTION to define a function 'return_y' with a return type that depends on one of its parameters. It uses lazy_enable_if to handle cases where the parameter may not be present.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/index.rst#2025-04-22_snippet_25\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_PARAMETER_FUNCTION(\n    (\n        boost::lazy_enable_if<\n            typename mpl::has_key<Args,tag::y>::type\n          , parameter::value_type<Args,tag::y>\n        >\n    ), return_y, tag,\n    (deduced\n        (required\n            (x, (std::map<char const*,std::string>))\n            (y, (char const*))\n        )\n        (optional\n            (z, (int), 4)\n        )\n    )\n)\n{\n    return y;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Target Properties for Tests\nDESCRIPTION: This snippet defines a function to configure common compiler flags for test targets in the Boost.Hana library. It checks for specific compiler flags and sets the appropriate compiler options based on the environment and configurations.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hana/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(boost_hana_set_test_properties target)\n    target_link_libraries(${target} PRIVATE hana)\n    set_target_properties(${target} PROPERTIES CXX_EXTENSIONS NO)\n\n    macro(setflag testname flag)\n        check_cxx_compiler_flag(${flag} ${testname})\n        if (${testname})\n            target_compile_options(${target} PRIVATE ${flag})\n        endif()\n    endmacro()\n\n    if (NOT MSVC)\n        setflag(BOOST_HANA_HAS_FDIAGNOSTICS_COLOR         -fdiagnostics-color)\n        setflag(BOOST_HANA_HAS_FTEMPLATE_BACKTRACE_LIMIT  -ftemplate-backtrace-limit=0)\n        setflag(BOOST_HANA_HAS_PEDANTIC                   -pedantic)\n        setflag(BOOST_HANA_HAS_WALL                       -Wall)\n        setflag(BOOST_HANA_HAS_WERROR                     -Werror)\n        setflag(BOOST_HANA_HAS_WEXTRA                     -Wextra)\n        setflag(BOOST_HANA_HAS_WNO_SELF_ASSIGN_OVERLOADED -Wno-self-assign-overloaded)\n        setflag(BOOST_HANA_HAS_WNO_UNUSED_LOCAL_TYPEDEFS  -Wno-unused-local-typedefs)\n        setflag(BOOST_HANA_HAS_WWRITE_STRINGS             -Wwrite-strings)\n    else()\n        setflag(BOOST_HANA_HAS_MSVC_EHSC                 -EHsc)\n        setflag(BOOST_HANA_HAS_MSVC_BIGOBJ               -bigobj)\n        setflag(BOOST_HANA_HAS_MSVC_TERNARY              -Zc:ternary)\n    endif()\n\n    if (NOT BOOST_HANA_ENABLE_EXCEPTIONS)\n        setflag(BOOST_HANA_HAS_FNO_EXCEPTIONS -fno-exceptions)\n    endif()\n\n    if (NOT BOOST_HANA_ENABLE_CONCEPT_CHECKS)\n        target_compile_definitions(${target} PRIVATE -DBOOST_HANA_CONFIG_DISABLE_CONCEPT_CHECKS)\n    endif()\n\n    if (BOOST_HANA_ENABLE_DEBUG_MODE)\n        target_compile_definitions(${target} PRIVATE -DBOOST_HANA_CONFIG_ENABLE_DEBUG_MODE)\n    endif()\n\n    if (BOOST_HANA_ENABLE_STRING_UDL)\n        if (NOT MSVC)\n            target_compile_definitions(${target} PRIVATE -DBOOST_HANA_CONFIG_ENABLE_STRING_UDL)\n            if (NOT ${CMAKE_CXX_COMPILER_ID} STREQUAL \"GNU\")\n                setflag(BOOST_HANA_HAS_WNO_GNU_STRING_UDL -Wno-gnu-string-literal-operator-template)\n            endif()\n        endif()\n    endif()\nendfunction()\n\n```\n\n----------------------------------------\n\nTITLE: Using __builtin_trap() to Enforce Narrow Contracts in C++\nDESCRIPTION: Demonstrates using the GCC/Clang compiler builtin function __builtin_trap() to enforce a narrow contract that requires a non-negative integer input.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/motivation/narrow_contract.md#2025-04-22_snippet_3\n\nLANGUAGE: c++\nCODE:\n```\nvoid h(int i) // expects: i >= 0\n{\n  if (i < 0) __builtin_trap();\n\n  // normal program logic follows ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost Xpressive Library with CMake\nDESCRIPTION: This CMake script sets up the Boost Xpressive library project, defines the library target, specifies include directories, and links against required Boost libraries. It also includes a conditional block for adding tests if BUILD_TESTING is enabled.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/xpressive/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.16)\n\nproject(boost_xpressive VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n\nadd_library(boost_xpressive INTERFACE)\nadd_library(Boost::xpressive ALIAS boost_xpressive)\n\ntarget_include_directories(boost_xpressive INTERFACE include)\n\ntarget_link_libraries(boost_xpressive\n  INTERFACE\n    Boost::assert\n    Boost::config\n    Boost::conversion\n    Boost::core\n    Boost::exception\n    Boost::fusion\n    Boost::integer\n    Boost::iterator\n    Boost::lexical_cast\n    Boost::mpl\n    Boost::numeric_conversion\n    Boost::optional\n    Boost::preprocessor\n    Boost::proto\n    Boost::range\n    Boost::smart_ptr\n    Boost::static_assert\n    Boost::throw_exception\n    Boost::type_traits\n    Boost::typeof\n    Boost::utility\n)\n\nif(BUILD_TESTING AND EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/test/CMakeLists.txt\")\n\n  add_subdirectory(test)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building LZ4 CLI using Make\nDESCRIPTION: Instructions for building the LZ4 Command Line Interface using the make command. It supports standard conventions and offers different CLI variations.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/lz4/programs/README.md#2025-04-22_snippet_0\n\nLANGUAGE: makefile\nCODE:\n```\nmake\n```\n\n----------------------------------------\n\nTITLE: Implementing Variadic Print Function using Boost.HOF\nDESCRIPTION: This snippet shows how to implement a variadic print function using Boost.HOF's proj adaptor.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/doc/src/point_free.md.txt#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_HOF_STATIC_FUNCTION(print) = proj(simple_print);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Format Reader in Boost GIL\nDESCRIPTION: Template for implementing a reader class for a new image format. Includes the required interface methods get_info() and apply() that must be implemented to provide format-specific reading functionality.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/io.rst#2025-04-22_snippet_12\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate< typename Device\n        , typename ConversionPolicy\n        >\nclass reader< Device\n            , xxx_tag\n            , ConversionPolicy\n            >\n            : public reader_base< xxx_tag\n                                , ConversionPolicy\n                                >\n{\nprivate:\n\n    typedef typename ConversionPolicy::color_converter_type cc_t;\n\npublic:\n\n    reader( Device& device )\n    : _io_dev( device )\n    {}\n\n    reader( Device&     device\n          , const cc_t& cc\n          )\n    : _io_dev( device )\n    , reader_base< xxx_tag\n                 , ConversionPolicy\n                 >( cc )\n    {}\n\n    image_read_info< xxx_tag > get_info()\n    {\n        // your implementation here\n    }\n\n    template< typename View >\n    void apply( const View& dst_view )\n    {\n        // your implementation here\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Declaring outcome_throw_as_system_error_with_payload for std::error_code in C++\nDESCRIPTION: Function declaration for a specialization of outcome_throw_as_system_error_with_payload that handles std::error_code. It throws a std::system_error constructed from the input error_code using BOOST_OUTCOME_THROW_EXCEPTION.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/functions/policy/outcome_throw_as_system_error_with_payload_std_error_code.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nvoid outcome_throw_as_system_error_with_payload(const std::error_code &)\n```\n\n----------------------------------------\n\nTITLE: Name Mangling Support Macros\nDESCRIPTION: Macros for handling name mangling issues on older compilers, providing cast operations that work correctly with template code.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/returns.hpp.txt#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\n#define BOOST_HOF_MANGLE_CAST(...) BOOST_HOF_REM\n\n#define BOOST_HOF_RETURNS_C_CAST(...) (__VA_ARGS__) BOOST_HOF_REM\n#define BOOST_HOF_RETURNS_REINTERPRET_CAST(...) reinterpret_cast<__VA_ARGS__>\n#define BOOST_HOF_RETURNS_STATIC_CAST(...) static_cast<__VA_ARGS__>\n#define BOOST_HOF_RETURNS_CONSTRUCT(...) __VA_ARGS__\n```\n\n----------------------------------------\n\nTITLE: Combine Adaptor Definition in C++\nDESCRIPTION: Defines the combine_adaptor struct which encapsulates the functionality to combine multiple functions. It inherits from the combine_adaptor_base, using detail::gens to generate sequence indices.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/combine.hpp.txt#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<class F, class... Gs>\nstruct combine_adaptor\n: detail::combine_adaptor_base<typename detail::gens<sizeof...(Gs)>::type, detail::callable_base<F>, detail::callable_base<Gs>...>\n{\n    typedef detail::combine_adaptor_base<typename detail::gens<sizeof...(Gs)>::type, detail::callable_base<F>, detail::callable_base<Gs>...> base_type;\n    BOOST_HOF_INHERIT_CONSTRUCTOR(combine_adaptor, base_type)\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost Move Library with CMake\nDESCRIPTION: This CMake script sets up the Boost Move library project. It defines the project, creates an interface library target, sets include directories, and specifies dependencies on other Boost libraries. It also conditionally includes a test subdirectory if BUILD_TESTING is enabled.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/move/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.16)\n\nproject(boost_move VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n\nadd_library(boost_move INTERFACE)\nadd_library(Boost::move ALIAS boost_move)\n\ntarget_include_directories(boost_move INTERFACE include)\n\ntarget_link_libraries(boost_move\n  INTERFACE\n    Boost::assert\n    Boost::config\n    Boost::core\n    Boost::static_assert\n)\n\nif(BUILD_TESTING)\n\n  add_subdirectory(test)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Basic Exception Handling in C++\nDESCRIPTION: Demonstrates a simple try-catch block with std::exception in C++. This snippet is used to illustrate the overhead of exception handling even in trivial cases.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/leaf/doc/whitepaper.md#2025-04-22_snippet_13\n\nLANGUAGE: c++\nCODE:\n```\n#include <exception>\n\nint main()\n{\n  try\n  {\n    throw std::exception();\n  }\n  catch(std::exception & e)\n  {\n  }\n  return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Static Equal with Compile-Time Recursion in C++\nDESCRIPTION: This C++ code snippet implements a compile-time recursion mechanism for determining element equality using the `static_equal` function. The `element_recursion` template structure is defined for recursive comparison, with a base case specialization for when the recursion level reaches zero. It requires that all color bases in the involved data structures share the same color space. Key dependencies include `gil_function_requires` and `ColorSpacesCompatibleConcept` for validating color space compatibility. The input parameters `p1` and `p2` are compared semantically, not physically, using `semantic_at_c` accessor functionality.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/color_base.rst.txt#2025-04-22_snippet_9\n\nLANGUAGE: cpp\nCODE:\n```\nnamespace detail\n{\n  template <int K> struct element_recursion\n  {\n    template <typename P1,typename P2>\n    static bool static_equal(const P1& p1, const P2& p2)\n    {\n      return element_recursion<K-1>::static_equal(p1,p2) &&\n             semantic_at_c<K-1>(p1)==semantic_at_c<N-1>(p2);\n    }\n  };\n  template <> struct element_recursion<0>\n  {\n    template <typename P1,typename P2>\n    static bool static_equal(const P1&, const P2&) { return true; }\n  };\n}\n\ntemplate <typename P1,typename P2>\nbool static_equal(const P1& p1, const P2& p2)\n{\n  gil_function_requires<ColorSpacesCompatibleConcept<P1::layout_t::color_space_t,P2::layout_t::color_space_t> >();\n  return detail::element_recursion<size<P1>::value>::static_equal(p1,p2);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost Beast Example Builds with CMake\nDESCRIPTION: CMake configuration that sets up build directories for Boost Beast examples. Includes conditional compilation of SSL-enabled examples when OpenSSL is available on the system.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/beast/example/http/client/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory (async)\nadd_subdirectory (coro)\nadd_subdirectory (crawl)\nadd_subdirectory (sync)\n\nif (OPENSSL_FOUND)\n    add_subdirectory (async-ssl)\n    add_subdirectory (async-ssl-system-executor)\n    add_subdirectory (coro-ssl)\n    add_subdirectory (sync-ssl)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost Container Hash Library with CMake\nDESCRIPTION: This CMake script sets up the Boost Container Hash library. It defines the project, creates an interface library, sets up include directories, and specifies dependencies on other Boost libraries.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/container_hash/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.20)\nproject(boost_container_hash VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n\nadd_library(boost_container_hash INTERFACE)\nadd_library(Boost::container_hash ALIAS boost_container_hash)\n\ntarget_include_directories(boost_container_hash INTERFACE include)\n\ntarget_link_libraries(boost_container_hash\n    INTERFACE\n        Boost::assert\n        Boost::config\n        Boost::core\n        Boost::detail\n        Boost::integer\n        Boost::static_assert\n        Boost::type_traits\n)\n```\n\n----------------------------------------\n\nTITLE: ProcessGroup Constructor in C++\nDESCRIPTION: This C++ snippet shows how a new process group is constructed to create a different communication space. The new process group will be independent from any existing process group.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/process_group.rst#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\n    ProcessGroup();\n```\n\n----------------------------------------\n\nTITLE: ptr_multiset_adapter::transfer(ptr_multiset_adapter& from) Method\nDESCRIPTION: Describes the behavior of the `transfer(ptr_multiset_adapter& from)` method. This method transfers all elements from the `from` container to the current container, effectively emptying the `from` container. It uses iterators `from.begin()` and `from.end()` to specify the range of elements to move.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/ptr_multiset_adapter.rst#2025-04-22_snippet_6\n\nLANGUAGE: C++\nCODE:\n```\nvoid transfer( ptr_multiset_adapter& from );\n```\n\n----------------------------------------\n\nTITLE: Defining Local Vertex Set Access Method for Distributed Vertex List Graph in C++\nDESCRIPTION: This snippet outlines how to obtain the local vertex set from a Distributed Vertex List Graph using the vertices function. It provides an iterator range that grants access to the local vertices available in the graph.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/DistributedVertexListGraph.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n``vertices(g)``\\n  |Returns an iterator range            \\n  |providing access to the local        \\n  |vertices in the graph.               \n```\n\n----------------------------------------\n\nTITLE: Channel Invert Function Definition\nDESCRIPTION: Defines the `channel_invert` function template. This function inverts a channel value, returning `max_value - x + min_value`. It takes the channel type as a template parameter and the channel value as an argument.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/channel.rst#2025-04-22_snippet_14\n\nLANGUAGE: cpp\nCODE:\n```\n  // returns max_value - x + min_value\n  template <typename Channel>\n  typename channel_traits<Channel>::value_type channel_invert(Channel x);\n```\n\n----------------------------------------\n\nTITLE: Implementing Permutation Iterator Class Template in C++\nDESCRIPTION: Template class definition for permutation_iterator that combines element and index iterators. Includes constructors, operators, and helper functions for creating permuted sequences.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/permutation_iterator_ref.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate< class ElementIterator\n    , class IndexIterator\n    , class ValueT        = use_default\n    , class CategoryT     = use_default\n    , class ReferenceT    = use_default\n    , class DifferenceT   = use_default >\nclass permutation_iterator\n{\npublic:\n  permutation_iterator();\n  explicit permutation_iterator(ElementIterator x, IndexIterator y);\n\n  template< class OEIter, class OIIter, class V, class C, class R, class D >\n  permutation_iterator(\n      permutation_iterator<OEIter, OIIter, V, C, R, D> const& r\n      , typename enable_if_convertible<OEIter, ElementIterator>::type* = 0\n      , typename enable_if_convertible<OIIter, IndexIterator>::type* = 0\n      );\n  reference operator*() const;\n  permutation_iterator& operator++();\n  ElementIterator const& base() const;\nprivate:\n  ElementIterator m_elt;      // exposition only\n  IndexIterator m_order;      // exposition only\n};\n```\n\n----------------------------------------\n\nTITLE: Smart Pointer Assignment Operator for Reversible Pointer Container in C++\nDESCRIPTION: This operator receives a compatible smart pointer, deletes the current stored objects, and takes ownership of new pointers. It ensures that resources are managed correctly and throws no exceptions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/reversible_ptr_container.rst#2025-04-22_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\nreversible_ptr_container& operator=( compatible-smart-ptr<reversible_ptr_container> r );\n```\n\n----------------------------------------\n\nTITLE: Defining the Identity Metafunction in C++\nDESCRIPTION: This code snippet defines the 'identity' metafunction template. It takes a single type parameter X and defines a nested 'type' that is identical to X. This metafunction effectively returns its input type unchanged.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/identity.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate< \n      typename X\n    >\nstruct identity\n{\n    typedef X type;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Cloneability in Boost Pointer Containers\nDESCRIPTION: This snippet demonstrates how to define cloneability for objects in a class hierarchy and how to use it within boost pointer containers for effective object management.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/tutorial.rst#2025-04-22_snippet_6\n\nLANGUAGE: C++\nCODE:\n```\nanimal* animal::clone() const\n{\n    return do_clone(); // implemented by private virtual function\n}\n\ninline animal* new_clone( const animal& a )\n{\n    return a.clone();\n}\n\ntypedef boost::ptr_list<animal> zoo_type;\nzoo_type zoo, another_zoo;\nanother_zoo.assign( zoo.begin(), zoo.end() );\n```\n\n----------------------------------------\n\nTITLE: Defining Utility Functions for Boost Callable Traits - CMake\nDESCRIPTION: These function definitions handle target names and test case setups for the Boost Callable Traits library. Dependencies include knowledge of CMake functions and macros. Key parameters include source and target names, commands, and optional extensions for managing source files and testing configurations.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/callable_traits/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(boost_callable_traits INTERFACE)\nset_property(TARGET boost_callable_traits PROPERTY EXPORT_NAME callable_traits)\nadd_library(Boost::callable_traits ALIAS boost_callable_traits)\n\ntarget_include_directories(boost_callable_traits INTERFACE\n    \"$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>\"\n    $<INSTALL_INTERFACE:include>)\n\n#\n#find_package(Doxygen)\n##find_package(Meta)\n#find_package(PythonInterp 2.7)\n#find_package(Ruby 2.1)\n\n##############################################################################\n# boost_callable_traits_target_name_for(<output variable> <source file> [ext])\n# Returns the target name associated to a source file. If the path of the\n# source file relative from the root of boost_callable_traits is `path/to/source/file.ext`,\n# the target name associated to it will be `path.to.source.file`.\n#\n# The extension of the file should be specified as a last argument. If no\n# extension is specified, the `.cpp` extension is assumed.\n##############################################################################\n\nfunction(boost_callable_traits_target_name_for out file)\n    if (NOT ARGV2)\n        set(_extension \".cpp\")\n    else()\n        set(_extension \"${ARGV2}\")\n    endif()\n\n    file(RELATIVE_PATH _relative ${boost_callable_traits_SOURCE_DIR} ${file})\n    string(REPLACE \"${_extension}\" \"\" _name ${_relative})\n    string(REGEX REPLACE \"/\" \".\" _name ${_name})\n    set(${out} \"${_name}\" PARENT_SCOPE)\nendfunction()\n\n##############################################################################\n# boost_callable_traits_add_test(<name> <command> [<arg>...])\n# Creates a test called `name`, which runs the given `command` with the given args.\n##############################################################################\n\nfunction(boost_callable_traits_add_test name)\n    if (boost_callable_traits_ENABLE_MEMCHECK)\n        add_test(${name} ${Valgrind_EXECUTABLE} --leak-check=full --error-exitcode=1 ${ARGN})\n    else()\n        add_test(${name} ${ARGN})\n    endif()\nendfunction()\n\n```\n\n----------------------------------------\n\nTITLE: Implementing any_image_view and any_image Classes\nDESCRIPTION: This C++ snippet defines the implementation of any_image_view and any_image classes built upon the Boost.Variant2's variant class. The classes are designed to manage images with dynamic parameters at runtime. They define several methods to handle image dimensions, channels, and assignment operations. The code also outlines type relationships and construction methods for dynamically managed images and views. These classes require inclusion of the Boost.Variant2 library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/dynamic_image.rst.txt#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <typename ...ImageViewTypes>\nclass any_image_view : public variant<ImageViewTypes...>\n{\npublic:\n  typedef ... const_t; // immutable equivalent of this\n  typedef std::ptrdiff_t x_coord_t;\n  typedef std::ptrdiff_t y_coord_t;\n  typedef point<std::ptrdiff_t> point_t;\n  using size_type = std::size_t;\n\n  any_image_view();\n  template <typename T> explicit any_image_view(const T& obj);\n  any_image_view(const any_image_view& v);\n\n  template <typename T> any_image_view& operator=(const T& obj);\n  any_image_view&                       operator=(const any_image_view& v);\n\n  // parameters of the currently instantiated view\n  std::size_t num_channels()  const;\n  point_t     dimensions()    const;\n  size_type   size()          const;\n  x_coord_t   width()         const;\n  y_coord_t   height()        const;\n};\n\ntemplate <typename ...ImageTypes>\nclass any_image : public variant<ImageTypes...>\n{\npublic:\n  typedef ... const_view_t;\n  typedef ... view_t;\n  typedef std::ptrdiff_t x_coord_t;\n  typedef std::ptrdiff_t y_coord_t;\n  typedef point<std::ptrdiff_t> point_t;\n\n  any_image();\n  template <typename T> explicit any_image(const T& obj);\n  template <typename T> explicit any_image(T& obj, bool do_swap);\n  any_image(const any_image& v);\n\n  template <typename T> any_image& operator=(const T& obj);\n  any_image&                       operator=(const any_image& v);\n\n  void recreate(const point_t& dims, unsigned alignment=1);\n  void recreate(x_coord_t width, y_coord_t height, unsigned alignment=1);\n\n  std::size_t num_channels()  const;\n  point_t     dimensions()    const;\n  x_coord_t   width()         const;\n  y_coord_t   height()        const;\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Pipable Functions with Boost.HigherOrderFunctions in C++\nDESCRIPTION: Demonstrates how to create a pipable function using the pipable adaptor from Boost.HigherOrderFunctions, allowing for chained function calls.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/src/gettingstarted.md#2025-04-22_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_HOF_STATIC_FUNCTION(sum) = pipable(sum_f());\n\nauto three = 1 | sum(2);\n\nauto four = 1 | sum(2) | sum(1);\n```\n\n----------------------------------------\n\nTITLE: Configuring ArangoDB Dump Test Files\nDESCRIPTION: Configuration for dump and restore test procedures, showing how to specify different test files for setup, validation, and cleanup operations in both single server and cluster modes.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n  let tstFiles = {\n    dumpSetup: 'dump-setup' + c.cluster + '.js',\n    dumpCheckDumpFiles: 'dump-check-dump-files-encrypted.js',\n    dumpCleanup: 'cleanup-nothing.js',\n    dumpAgain: 'dump' + c.cluster + '.js',\n    dumpTearDown: 'dump-teardown' + c.cluster + '.js',\n    foxxTest: 'check-foxx.js'\n  };\n```\n\n----------------------------------------\n\nTITLE: Declaring outcome_throw_as_system_error_with_payload for Error Code Enums in C++\nDESCRIPTION: Function declaration for a specialization of outcome_throw_as_system_error_with_payload that handles error code and condition enums. It constructs and throws a std::system_error using the result of make_error_code(ErrorCodeEnum).\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/functions/policy/outcome_throw_as_system_error_with_payload_std_enum.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nvoid outcome_throw_as_system_error_with_payload(ErrorCodeEnum &&)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: This snippet adds the 'include' directory to the interface properties of the 'boost_process' library. This makes the headers in the 'include' directory available to any target that links against 'boost_process'.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/process/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n\"target_include_directories(boost_process INTERFACE include)\"\n```\n\n----------------------------------------\n\nTITLE: graph_predicate Metafunction Class for Graph Type Verification\nDESCRIPTION: This code snippet defines a metafunction class to verify if a graph type T meets certain traversal category requirements, specifically if it can be used with vertex list graph operations. It evaluates through a series of convertible checks using Boost MPL.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/index.rst#2025-04-22_snippet_18\n\nLANGUAGE: C++\nCODE:\n```\nstruct graph_predicate\n{\n    template <typename T, typename Args>\n    struct apply\n      : boost::mpl::eval_if<\n            boost::is_convertible<\n                typename boost::graph_traits<T>::traversal_category\n              , boost::incidence_graph_tag\n            >\n          , boost::mpl::if_<\n                boost::is_convertible<\n                    typename boost::graph_traits<T>::traversal_category\n                  , boost::vertex_list_graph_tag\n                >\n              , boost::mpl::true_\n              , boost::mpl::false_\n            >\n        >\n    {\n    };\n};\n```\n\n----------------------------------------\n\nTITLE: Defining the copy algorithm template in C++\nDESCRIPTION: Defines the template structure for the copy algorithm, which takes a Sequence and an optional Inserter as template parameters.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/copy.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      typename Sequence\n    , typename In = |unspecified|\n    >\nstruct copy\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring the Boost.Nowide Library Target\nDESCRIPTION: Builds the Boost.Nowide library target with source files and headers, setting properties for visibility, versioning, and creating an alias for consistent target naming.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/nowide/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n# Using glob here is ok as it is only for headers\nfile(GLOB_RECURSE headers include/*.hpp)\nadd_library(boost_nowide src/console_buffer.cpp src/cstdio.cpp src/cstdlib.cpp src/filebuf.cpp src/iostream.cpp src/stat.cpp ${headers})\nadd_library(Boost::nowide ALIAS boost_nowide)\nset_target_properties(boost_nowide PROPERTIES\n    CXX_VISIBILITY_PRESET hidden\n    VISIBILITY_INLINES_HIDDEN ON\n    VERSION ${PROJECT_VERSION}\n    EXPORT_NAME nowide\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Mutable Step Iterator Concept\nDESCRIPTION: This C++ code extends the 'StepIteratorConcept' to allow for mutable step iterators, thereby adding the functionality to change the step size while iterating.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/pixel_iterator.rst#2025-04-22_snippet_8\n\nLANGUAGE: cpp\nCODE:\n```\n  concept MutableStepIteratorConcept<boost_concepts::Mutable_ForwardIteratorConcept Iterator>\n      : StepIteratorConcept<Iterator>\n  {};\n```\n\n----------------------------------------\n\nTITLE: Declaring is_failure_type<T> Type Trait in C++\nDESCRIPTION: Defines the `is_failure_type<T>` type trait as an integral constant boolean variable. It returns true for `failure_type<EC, E = void>` types. This trait is not overridable and is defined in the `BOOST_OUTCOME_V2_NAMESPACE` namespace.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/traits/is_failure_type.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<typename T>\nstruct is_failure_type : std::false_type {};\n\ntemplate<typename EC, typename E>\nstruct is_failure_type<failure_type<EC, E>> : std::true_type {};\n```\n\n----------------------------------------\n\nTITLE: Implementing iter_swap Operation in C++\nDESCRIPTION: Demonstrates the iter_swap operation requirement for Swappable Iterator concept. The operation must exchange values between two iterators, returning void. Requires Copy Constructible type compatibility.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/SwappableIterator.rst#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\niter_swap(a, b)\n```\n\n----------------------------------------\n\nTITLE: Linking Boost Libraries\nDESCRIPTION: This snippet links the 'boost_process' library against several other Boost libraries using the INTERFACE keyword. This propagates the link dependencies to any target that links against 'boost_process', ensuring that all necessary Boost libraries are available at compile time.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/process/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n\"target_link_libraries(boost_process\n  INTERFACE\n    Boost::algorithm\n    Boost::asio\n    Boost::config\n    Boost::core\n    Boost::filesystem\n    Boost::fusion\n    Boost::iterator\n    Boost::move\n    Boost::optional\n    Boost::system\n    Boost::tokenizer\n    Boost::type_index\n    Boost::winapi\n)\"\n```\n\n----------------------------------------\n\nTITLE: Defining CMake Options for Date Library Configuration\nDESCRIPTION: Sets up CMake options for controlling the Date library's behavior, including whether to use the system timezone database, where to store the timezone database, and whether to build a static library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/date/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\noption( USE_SYSTEM_TZ_DB \"Use the operating system's timezone database\" OFF )\noption( USE_TZ_DB_IN_DOT \"Save the timezone database in the current folder\" OFF )\noption( BUILD_TZ_STATIC  \"Build a static version of library\" ON )\n```\n\n----------------------------------------\n\nTITLE: Building jemalloc using vcpkg\nDESCRIPTION: This snippet shows how to download and install jemalloc using the vcpkg dependency manager.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/jemalloc/jemalloc/INSTALL.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n\"git clone https://github.com/Microsoft/vcpkg.git\ncd vcpkg\n./bootstrap-vcpkg.sh  # ./bootstrap-vcpkg.bat for Windows\n./vcpkg integrate install\n./vcpkg install jemalloc\"\n```\n\n----------------------------------------\n\nTITLE: Implementing a Generic Functor with Template Metaprogramming in C++\nDESCRIPTION: Defines a functor template that can operate on different tag types, demonstrating the use of template metaprogramming with Boost.Parameter. The functor is used in a check0 function that applies the functor to each element in a type sequence.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_98\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <typename Args>\nstruct some_functor\n{\n    template <typename K>\n    void operator()(K) const\n    {\n        // K is one of tag\\:\\:x, tag\\:\\:y, etc.\n    }\n};\n\ntemplate <typename E, typename Args>\nvoid check0(E const& e, Args const& args)\n{\n    boost::mpl::for_each<E>(some_functor<Args>());\n}\n```\n\n----------------------------------------\n\nTITLE: Defining lower_bound Template in C++\nDESCRIPTION: Defines the lower_bound template struct for finding the first position in a sorted sequence where a value could be inserted without violating the ordering.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/lower_bound.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      typename Sequence\n    , typename T\n    , typename Pred = less<_1,_2>\n    >\nstruct lower_bound\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Pipable Function Adaptor in C++\nDESCRIPTION: Implements the pipable_adaptor class template that allows functions to be used with the pipe operator. It includes nested structures for implementation details and operator overloads.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/pipable.hpp.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<class F>\nstruct pipable_adaptor \n: detail::basic_first_of_adaptor<detail::callable_base<F>, detail::pipe_pack<pipable_adaptor<F>, detail::callable_base<F>> >\n{\n    typedef detail::basic_first_of_adaptor<detail::callable_base<F>, detail::pipe_pack<pipable_adaptor<F>, detail::callable_base<F>> > base;\n    typedef pipable_adaptor fit_rewritable_tag;\n\n    BOOST_HOF_INHERIT_CONSTRUCTOR(pipable_adaptor, base);\n\n    constexpr const detail::callable_base<F>& base_function() const noexcept\n    {\n        return *this;\n    }\n};\n\ntemplate<class A, class F>\nconstexpr auto operator|(A&& a, const pipable_adaptor<F>& p) BOOST_HOF_RETURNS\n(p(BOOST_HOF_FORWARD(A)(a)));\n\nBOOST_HOF_DECLARE_STATIC_VAR(pipable, detail::make<pipable_adaptor>);\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Rotate Function in C++\nDESCRIPTION: Demonstrates how to use the rotate function adaptor with a simple arithmetic operation, subtracting the second parameter from the first after rotation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/rotate.hpp.txt#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nint main() {\n    int r = boost::hof::rotate(boost::hof::_ - boost::hof::_)(2, 5);\n    assert(r == 3);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Planar Pixel Iterator Structure\nDESCRIPTION: This C++ snippet defines the structure 'planar_pixel_iterator', which is a template designed for creating iterators over planar homogeneous pixels. It also includes typedefs for specific RGB channel configurations.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/pixel_iterator.rst#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\n  template <typename ChannelPtr, typename ColorSpace>\n  struct planar_pixel_iterator;\n\n  // GIL provided typedefs\n  typedef planar_pixel_iterator<const bits8*, rgb_t> rgb8c_planar_ptr_t;\n  typedef planar_pixel_iterator<      bits8*, rgb_t> rgb8_planar_ptr_t;\n```\n\n----------------------------------------\n\nTITLE: Defining Lazy Coroutine Awaitable\nDESCRIPTION: This snippet describes the 'lazy<T>' awaitable type, which allows for the lazy evaluation of coroutines. The coroutine is suspended immediately on the first call, and its execution resumes later.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/tutorial/essential/coroutines/awaitables.md#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nlazy<T>\\n\\n    A lazily evaluated Coroutine (often named `task<T>` in most C++ Coroutine\\n    literature): invoking `co_await` upon a function returning one of these causes the\\n    function to be immediately suspended as soon as execution begins. Only resuming\\n    the execution of the coroutine proceeds execution.\n```\n\n----------------------------------------\n\nTITLE: Creating a Step Iterator in C++\nDESCRIPTION: This snippet illustrates the implementation of a function template `make_step_iterator` that creates a step iterator from a base iterator and a specified step. It ensures that the iterator models both `MemoryBasedIteratorConcept` and `HasDynamicXStepTypeConcept`.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/pixel_iterator.rst.txt#2025-04-22_snippet_8\n\nLANGUAGE: cpp\nCODE:\n```\n// Iterator models MemoryBasedIteratorConcept, HasDynamicXStepTypeConcept\ntemplate <typename Iterator>\ntypename dynamic_x_step_type<Iterator>::type make_step_iterator(Iterator const& it, std::ptrdiff_t step);\n```\n\n----------------------------------------\n\nTITLE: Generic Luminosity Gradient Function with Dynamic Type Resolution\nDESCRIPTION: A template function that computes the luminosity gradient for any source view type. It automatically determines the appropriate grayscale pixel type while preserving the source's channel depth for color conversion.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/tutorial/gradient.rst#2025-04-22_snippet_17\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <typename SrcView, typename DstView>\nvoid x_luminosity_gradient(SrcView const& src, DstView const& dst)\n{\n  using gray_pixel_t = pixel<typename channel_type<SrcView>::type, gray_layout_t>;\n  x_gradient(color_converted_view<gray_pixel_t>(src), dst);\n}\n```\n\n----------------------------------------\n\nTITLE: Computing Luminosity Histogram in C++\nDESCRIPTION: This C++ function calculates the luminosity histogram for an 8-bit RGB image. It uses the `RGBToGray` function or macro to convert each pixel to a grayscale value, which is then incremented in the histogram. The function processes planar images, assuming sequential memory layout with specified row bytes.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/tutorial/histogram.rst.txt#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nvoid luminosity_hist( std::uint8_t const* r, std::uint8_t const* g, std::uint8_t const* b, int rows, int cols, int sRowBytes, Histogram* hist) { for (int r = 0; r < rows; r++) { for (int c = 0; c < cols; c++) { int v = RGBToGray(r[c], g[c], b[c]); // call internal function or macro (*hist)[v]++; } r += sRowBytes; g += sRowBytes; b += sRowBytes; } }\n```\n\n----------------------------------------\n\nTITLE: Generating Test Coverage Report\nDESCRIPTION: Commands to generate a local test coverage report using b2 and a coverage script\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/histogram/CONTRIBUTING.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nb2 toolset=gcc-8 cxxstd=latest coverage=on test\ntools/cov.sh\n```\n\n----------------------------------------\n\nTITLE: Defining boost_checked<T, E> Type Alias in C++\nDESCRIPTION: This code snippet shows the declaration of the boost_checked type alias. It's configured with boost::system::error_code as the default error type and uses the throw_bad_result_access policy for error handling.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/aliases/boost_checked.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nboost_checked<T, E = boost::system::error_code>\n```\n\n----------------------------------------\n\nTITLE: C++ Boolean Status Code Check\nDESCRIPTION: Shows the ambiguous error checking pattern in system_error that system_error2 aims to improve by requiring explicit success/failure checks instead of implicit boolean conversion.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/experimental/differences.md#2025-04-22_snippet_1\n\nLANGUAGE: c++\nCODE:\n```\nif(ec) ...\n```\n\n----------------------------------------\n\nTITLE: Reverse End Iterator for Reversible Pointer Container in C++\nDESCRIPTION: This method returns a reverse iterator pointing to one element before the first element of the container, supporting both mutable and immutable contexts, with no exceptions thrown.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/reversible_ptr_container.rst#2025-04-22_snippet_9\n\nLANGUAGE: C++\nCODE:\n```\nreverse_iterator rend();\n```\n\nLANGUAGE: C++\nCODE:\n```\nconst_reverse_iterator rend() const;\n```\n\n----------------------------------------\n\nTITLE: Defining Regular Concept - C++\nDESCRIPTION: This snippet combines several concepts to define the Regular concept, which requires a type T to fulfill multiple criteria including being default constructible, copy constructible, and equality comparable.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/concepts.rst.txt#2025-04-22_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\nauto concept Regular<typename T> :\n    DefaultConstructible<T>,\n    CopyConstructible<T>,\n    EqualityComparable<T>,\n    Assignable<T>,\n    Swappable<T>\n{};\n```\n\n----------------------------------------\n\nTITLE: Chaining Functions with Pipable Operators in C++\nDESCRIPTION: Illustrates how to use pipable functions to create a more readable chain of operations on a container, similar to extension methods.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/doc/src/more_examples.md.txt#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nauto r = numbers\n        | filter([](int x) { return x > 2; })\n        | transform([](int x) { return x * x; });\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries to the Test Executable\nDESCRIPTION: This snippet links various libraries, including Google Test and ArangoDB-specific libraries, to the executable target 'arangodbtests-iresearch'. These libraries are essential for the tests to function correctly.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/IResearch/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(arangodbtests-iresearch\\\n  gtest\\\n  arango_tests_basics\\\n  arango_agency\\\n  arango_cluster_engine\\\n  arango_rocksdb\\\n  arangoserver\\\n  boost_boost\\\n)\n```\n\n----------------------------------------\n\nTITLE: Defining the 'less' Metafunction Template in C++\nDESCRIPTION: Declares the 'less' metafunction template that compares two types T1 and T2. It returns an unspecified type that resolves to a boolean integral constant.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/less.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      typename T1\n    , typename T2\n    >\nstruct less\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Merge Pointer Containers\nDESCRIPTION: Transfers and merges elements between containers while maintaining sorting order\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/ptr_sequence_adapter.rst#2025-04-22_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\nvoid merge( ptr_sequence_adapter& r );\ntemplate< class Compare > void merge( ptr_sequence_adapter& r, Compare comp );\n```\n\n----------------------------------------\n\nTITLE: Defining BOOST_OUTCOME_THROW_EXCEPTION Macro in C++\nDESCRIPTION: This macro is used to throw a C++ exception or perform an equivalent action. Its behavior can be overridden by defining it before inclusion. The default behavior varies depending on the configuration of Boost.Outcome and whether C++ exceptions are enabled.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/macros/throw_exception.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_OUTCOME_THROW_EXCEPTION(expr)\n```\n\n----------------------------------------\n\nTITLE: Configuring ArangoDB Actor Libraries in CMake\nDESCRIPTION: Sets up two interface libraries for ArangoDB's actor system: a standard version with crash handling and a standalone version. Both libraries include the necessary header files and link to dependencies like VelocyPack and fmt, but the standalone version adds a STANDALONE compile definition.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/lib/Actor/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(arango_actor INTERFACE)\ntarget_include_directories(arango_actor INTERFACE include/)\ntarget_link_libraries(arango_actor INTERFACE arango_crashhandler velocypack fmt)\n\nadd_library(arango_actor_standalone INTERFACE)\ntarget_include_directories(arango_actor_standalone INTERFACE include/)\ntarget_link_libraries(arango_actor_standalone INTERFACE velocypack fmt)\ntarget_compile_definitions(arango_actor_standalone INTERFACE STANDALONE)\n```\n\n----------------------------------------\n\nTITLE: Partition and Join Based Implementation of Sort\nDESCRIPTION: The recursive implementation of the sort algorithm using partition and join operations. It selects a pivot, partitions the sequence, recursively sorts each partition, and then combines them with the pivot element in the middle.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/sort.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntypedef back_inserter< vector<> > aux_in;\ntypedef lambda<pred>::type p;\n\ntypedef begin<s>::type pivot;\ntypedef partition<\n      iterator_range< next<pivot>::type, end<s>::type >\n    , apply_wrap2<p,_1,deref<pivot>::type>\n    , aux_in\n    , aux_in\n    >::type partitioned;\n\ntypedef sort<partitioned::first,p,aux_in >::type part1;\ntypedef sort<partitioned::second,p,aux_in >::type part2;\n\ntypedef copy<\n      joint_view< \n          joint_view<part1,single_view< deref<pivot>::type > >\n        , part2\n        >\n    , in\n    >::type r;\n```\n\n----------------------------------------\n\nTITLE: PlantUML Diagram for POSIX Exec Error Scenario\nDESCRIPTION: This PlantUML diagram illustrates the scenario where a POSIX process encounters an error during the `execve` call. It shows the child process reporting the error back to the parent process, and the parent process handling the error.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/process/doc/images/plantuml.txt#2025-04-22_snippet_2\n\nLANGUAGE: PlantUML\nCODE:\n```\n\"/**\\n\\plantuml\\nactivate Father \\n\\nFather->Father : on_setup\\nactivate Father\\ndeactivate Father\\nFather->Child : fork\\nactivate Child \\nFather -> Father : wait for error\\ndeactivate Father\\n\\nChild->Child : on_exec_setup\\nactivate Child\\ndeactivate Child\\nChild->Child : execve\\nChild->Child : on_exec_error\\nactivate Child\\ndeactivate Child\\nChild->Father : report\\ndeactivate Child\\nactivate Father \\nFather -> Father : on_error\\nactivate Father\\ndeactivate Father\\n\\endplantuml \"\n\n```\n\n----------------------------------------\n\nTITLE: Semantics of reverse_stable_partition in C++\nDESCRIPTION: Demonstrates the equivalent semantics of the reverse_stable_partition algorithm using lambda expressions and reverse_fold.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/reverse_stable_partition.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntypedef lambda<pred>::type p;\ntypedef lambda<in1::operation>::type in1_op;\ntypedef lambda<in2::operation>::type in2_op;\n\ntypedef reverse_fold<\n      s\n    , pair< in1::state, in2::state >\n    , if_< \n          apply_wrap1<p,_2>\n        , pair< apply_wrap2<in1_op,first<_1>,_2>, second<_1> >\n        , pair< first<_1>, apply_wrap2<in2_op,second<_1>,_2> >\n        >\n    >::type r;\n```\n\n----------------------------------------\n\nTITLE: Template Push Front Method with Smart Ptr\nDESCRIPTION: This template method inserts a compatible smart pointer into the container by releasing its ownership using push_front(x.release()).\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/ptr_list.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntemplate< class U > void push_front( compatible-smart-ptr<U> x );\n```\n\n----------------------------------------\n\nTITLE: Using long_ Template for Type Assertions in C++\nDESCRIPTION: This snippet demonstrates the usage of the 'long_' template structure with specific integral values. It asserts type relationships and values using Boost MPL assertions, ensuring type safety and compliance with expected integral values.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/long_.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ntypedef long_<8> eight;\n\nBOOST_MPL_ASSERT(( is_same< eight::value_type, long > ));\nBOOST_MPL_ASSERT(( is_same< eight::type, eight > ));\nBOOST_MPL_ASSERT(( is_same< next< eight >::type, long_<9> > ));\nBOOST_MPL_ASSERT(( is_same< prior< eight >::type, long_<7> > ));\nBOOST_MPL_ASSERT_RELATION( (eight::value), ==, 8 );\nassert( eight() == 8 );\n```\n\n----------------------------------------\n\nTITLE: Demonstrating front_inserter Usage in C++\nDESCRIPTION: Example usage of front_inserter to reverse and insert elements into a vector. It reverses a range of integers and inserts them at the front of an existing vector.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/front_inserter.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntypedef reverse_copy<\n      range_c<int,0,5>\n    , front_inserter< vector_c<int,5,6,7,8,9> >\n    >::type range;\n   \nBOOST_MPL_ASSERT(( equal< range, range_c<int,0,10> > ));\n```\n\n----------------------------------------\n\nTITLE: Configuring ICU Library Definitions in CMake\nDESCRIPTION: Sets up definitions for the ICU (International Components for Unicode) library, including suffix and include directory.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/client-tools/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_definitions(\"-DU_HAVE_LIB_SUFFIX=1\")\nadd_definitions(\"-DU_LIB_SUFFIX_C_NAME=_64\")\ninclude_directories(BEFORE SYSTEM ${ICU64_INCLUDE_DIR})\n```\n\n----------------------------------------\n\nTITLE: Using Function Input Iterator with Bounded Range in C++\nDESCRIPTION: This example demonstrates how to use the function_input_iterator class to create a bounded, lazy-generated range of random numbers. It uses a custom generator struct and the make_function_input_iterator function to create iterators with a range from 0 to 10.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/function_input_iterator.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nstruct generator {\n    typedef int result_type;\n    generator() { srand(time(0)); }\n    result_type operator() () const {\n        return rand();\n    }\n};\n\nint main(int argc, char * argv[]) {\n    generator f;\n    copy(\n            make_function_input_iterator(f, 0),\n            make_function_input_iterator(f, 10),\n            ostream_iterator<int>(cout, \" \")\n        );\n    return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting libunwind Paths to Parent Scope in CMake\nDESCRIPTION: Exports the libunwind home directory and library file paths to the parent scope, allowing other parts of the build system to locate and link against the compiled libunwind library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/libunwind/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n  set(LIBUNWIND_HOME \"${CMAKE_CURRENT_BINARY_DIR}/v${LIBUNWIND_VERSION}\" PARENT_SCOPE)\n  set(LIBUNWIND_LIB \"${LIBUNWIND_LIB}\" PARENT_SCOPE)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Implementing Unguarded X-Gradient Calculation in C++ with GIL\nDESCRIPTION: Defines a function to calculate the horizontal gradient of a grayscale image using 8-bit source and signed 8-bit destination. This implementation processes every pixel without boundary checks, operating directly on rows and iterators.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/tutorial/gradient.rst#2025-04-22_snippet_13\n\nLANGUAGE: cpp\nCODE:\n```\nvoid x_gradient_unguarded(gray8c_view_t const& src, gray8s_view_t const& dst)\n{\n  for (int y=0; y < src.height(); ++y)\n  {\n      gray8c_view_t::x_iterator src_it = src.row_begin(y);\n      gray8s_view_t::x_iterator dst_it = dst.row_begin(y);\n\n      for (int x = 0; x < src.width(); ++x)\n          dst_it[x] = (src_it[x-1] - src_it[x+1]) / 2;\n  }\n}\n\nvoid x_gradient(gray8c_view_t const& src, gray8s_view_t const& dst)\n{\n  assert(src.width()>=2);\n  x_gradient_unguarded(subimage_view(src, 1, 0, src.width()-2, src.height()),\n                       subimage_view(dst, 1, 0, src.width()-2, src.height()));\n}\n```\n\n----------------------------------------\n\nTITLE: Linking VocBase Library Dependencies\nDESCRIPTION: Specifies the libraries that should be linked against the arango_vocbase library, including internal ArangoDB components and external dependencies.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/VocBase/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(arango_vocbase\n  arango_agency\n  arango_cluster_methods\n  arango_indexes\n  arango_replication\n  arango_replication2\n  arango_vocbase_api\n  boost_system\n  arango::validation)\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Utils Library Build\nDESCRIPTION: Sets up the build configuration for arango_basic_utils library, including include directories and dependencies\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/lib/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif (USE_ENTERPRISE)\n  target_include_directories(arango_basic_utils PUBLIC \"${PROJECT_SOURCE_DIR}/${ENTERPRISE_INCLUDE_DIR}\")\nendif()\n\nadd_dependencies(arango_basic_utils snappy)\ntarget_include_directories(arango_basic_utils PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})\ntarget_include_directories(arango_basic_utils PUBLIC ${CMAKE_CURRENT_BINARY_DIR})\ntarget_include_directories(arango_basic_utils PUBLIC\n        ${FUNCTION2_INCLUDE_DIR}\n        ${FROZEN_INCLUDE_DIR}\n)\n\ntarget_include_directories(arango_basic_utils PUBLIC ${BUILD_DIR})\ntarget_include_directories(arango_basic_utils SYSTEM PUBLIC ${Lz4_INCLUDE_DIR})\n```\n\n----------------------------------------\n\nTITLE: YAP Library Target Configuration in CMake\nDESCRIPTION: CMake configuration for the YAP library target, setting up include directories, dependencies, and compiler features.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/yap/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(yap INTERFACE)\ntarget_include_directories(yap INTERFACE ${CMAKE_CURRENT_SOURCE_DIR}/include)\ntarget_link_libraries(yap INTERFACE boost)\ntarget_compile_features(yap INTERFACE cxx_variadic_templates cxx_constexpr)\ntarget_compile_definitions(yap INTERFACE ${constexpr_if_define} BOOST_ALL_NO_LIB=1)\nif (link_flags)\n    target_link_libraries(yap INTERFACE ${link_flags})\n    target_compile_options(yap INTERFACE ${compile_flags})\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Explicit Converting Move Constructor for basic_result in C++\nDESCRIPTION: Explicit converting move constructor that enables conversion from a compatible basic_result type. The constructor is conditional on the predicate::enable_make_error_code_compatible_conversion trait and calls on_result_move_construction() during construction. It propagates constexpr, triviality, and noexcept properties from underlying types.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/basic_result/explicit_make_error_code_move_converting_constructor.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nexplicit basic_result(basic_result<R, S, P> &&)\n```\n\n----------------------------------------\n\nTITLE: Implementing Class with BOOST_PARAMETER_NO_SPEC_NO_BASE_CONSTRUCTOR in C++\nDESCRIPTION: Creates a struct D using BOOST_PARAMETER_NO_SPEC_NO_BASE_CONSTRUCTOR to generate a constructor that delegates to an evaluation function that tests parameter categories.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_93\n\nLANGUAGE: C++\nCODE:\n```\nstruct D\n{\n    BOOST_PARAMETER_NO_SPEC_NO_BASE_CONSTRUCTOR(D, D::_evaluate)\n\n private:\n    template <typename Args>\n    static bool _evaluate(Args const& args)\n    {\n        BOOST_TEST_EQ(\n            passed_by_lvalue_reference_to_const\n          , U::evaluate_category<0>(args[_lrc])\n        );\n        BOOST_TEST_EQ(\n            passed_by_lvalue_reference\n          , U::evaluate_category<1>(args[_lr])\n        );\n        BOOST_TEST_EQ(\n            passed_by_rvalue_reference_to_const\n          , U::evaluate_category<2>(\n                args[_rrc | rvalue_const_bitset<2>()]\n            )\n        );\n        BOOST_TEST_EQ(\n            passed_by_rvalue_reference\n          , U::evaluate_category<3>(\n                args[_rr | rvalue_bitset<3>()]\n            )\n        );\n\n        return true;\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Throwing Standard Exceptions from Error Codes in C++\nDESCRIPTION: This function attempts to throw a standard library exception type equivalent to the supplied error code, with an optional custom message. It maps specific error codes to corresponding exception types, such as EINVAL to std::invalid_argument.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/functions/try_throw_std_exception_from_error.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nvoid try_throw_std_exception_from_error(std::error_code ec, const std::string &msg = std::string{})\n```\n\n----------------------------------------\n\nTITLE: Including necessary headers for Boost.Python and NumPy in C++\nDESCRIPTION: This snippet includes the required headers for Boost.Python and NumPy to enable seamless integration of Python and C++ functionalities. It defines namespaces to simplify code usage.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/doc/html/numpy/_sources/tutorial/simple.rst.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/python/numpy.hpp>\n#include <iostream>\n\nnamespace p = boost::python;\nnamespace np = boost::python::numpy;\n```\n\n----------------------------------------\n\nTITLE: Transform Algorithm Synopsis in C++\nDESCRIPTION: Template declaration for the transform algorithm in two forms: unary (with one sequence) and binary (with two sequences). It transforms elements by applying operations to sequence elements.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/transform.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      typename Sequence\n    , typename Op\n    , typename In = |unspecified|\n    >\nstruct transform\n{\n    typedef |unspecified| type;\n};\n\ntemplate<\n      typename Seq1\n    , typename Seq2\n    , typename BinaryOp\n    , typename In = |unspecified|\n    >\nstruct transform\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Using inherit_linearly for Tuple-like Structure in C++\nDESCRIPTION: Example of using inherit_linearly to create a tuple-like structure with fields of different types. It demonstrates how to define and access fields using the created type.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/inherit_linearly.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ntemplate< typename T > struct tuple_field\n{\n    T field;\n};\n\ntemplate< typename T >\ninline\nT& field(tuple_field<T>& t)\n{\n    return t.field;\n}\n\ntypedef inherit_linearly<\n      vector<int,char const*,bool>\n    , inherit< _1, tuple_field<_2> >\n    >::type tuple;\n\n\nint main()\n{\n    tuple t;\n    \n    field<int>(t) = -1;\n    field<char const*>(t) = \"text\";\n    field<bool>(t) = false;\n\n    std::cout\n        << field<int>(t) << '\\n'\n        << field<char const*>(t) << '\\n'\n        << field<bool>(t) << '\\n'\n        ;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost Sort Library in CMake\nDESCRIPTION: Configures the Boost Sort library as an interface library with its dependencies and include paths. Sets up project version, dependencies on other Boost components, and conditionally includes tests if testing is enabled.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/sort/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.16)\n\nproject(boost_sort VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n\nadd_library(boost_sort INTERFACE)\nadd_library(Boost::sort ALIAS boost_sort)\n\ntarget_include_directories(boost_sort INTERFACE include)\n\ntarget_link_libraries(boost_sort\n  INTERFACE\n    Boost::config\n    Boost::core\n    Boost::range\n    Boost::static_assert\n    Boost::type_traits\n)\n\nif(BUILD_TESTING AND EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/test/CMakeLists.txt\")\n\n  add_subdirectory(test)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Using std::ref for Mutable Function Objects in C++\nDESCRIPTION: This snippet demonstrates the correct way to use mutable function objects by passing them by reference using std::ref. This ensures that the state is maintained across function calls.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/src/faq.md#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\ncounter c{};\nproj(std::ref(c))(1,1);\n// Prints 2\nstd::cout << c.i << std::endl;\n```\n\n----------------------------------------\n\nTITLE: BOOST_PARAMETER_MATCH Macro Definition in C++\nDESCRIPTION: The BOOST_PARAMETER_MATCH macro generates a defaulted parameter declaration for a forwarding function. It takes a parameter tag, a sequence of argument types, and a parameter name.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_97\n\nLANGUAGE: cpp\nCODE:\n```\ntypename **p**::match<**A0**\\, **A1**\\, …, **A** ## *n*>::type\n    **x** = **p**\\()\n```\n\n----------------------------------------\n\nTITLE: Example Usage of count_if in C++\nDESCRIPTION: Provides an example of using count_if to count floating-point types, characters, and void types in a vector of types.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/count_if.rst#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\ntypedef vector<int,char,long,short,char,long,double,long> types;\n    \nBOOST_MPL_ASSERT_RELATION( (count_if< types, is_float<_> >::value), ==, 1 );\nBOOST_MPL_ASSERT_RELATION( (count_if< types, is_same<_,char> >::value), ==, 2 );\nBOOST_MPL_ASSERT_RELATION( (count_if< types, is_same<_,void> >::value), ==, 0 );\n```\n\n----------------------------------------\n\nTITLE: MPL min Metafunction Synopsis\nDESCRIPTION: Defines the synopsis for the `min` metafunction in Boost MPL, which takes two template type parameters `N1` and `N2` and has a nested `type` member. The `type` member represents the smaller of the two input types.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/min.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      typename N1\n    , typename N2\n    >\nstruct min\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Back Extensible Sequence Operations in C++\nDESCRIPTION: Core operations defined for Back Extensible Sequence including push_back, pop_back and back operations with amortized constant time complexity.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/BackExtensibleSequence.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\npush_back<s,x>::type    // Insert element x at end of sequence s\npop_back<s>::type       // Remove last element from sequence s\nback<s>::type          // Access last element of sequence s\n```\n\n----------------------------------------\n\nTITLE: Defining ConstInvocable Concept in C++\nDESCRIPTION: Specifies the requirements for the ConstInvocable concept, which defines the invocation of a const object with two arguments. The expression INVOKE(f, arg1, arg2) must be well-formed in an unevaluated context.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/src/concepts.md#2025-04-22_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\nINVOKE(f, arg1, arg2)\n```\n\n----------------------------------------\n\nTITLE: GCC-3.03 Performance Results with -O Flag\nDESCRIPTION: This snippet presents the performance results of printf, ostream, stored format, and format operations when compiled with gcc-3.03 and the -O flag. The snippet shows the execution times and ratios relative to printf and ostream times.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/format/benchmark/results.txt#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n/***\nprintf time         :1.16\nostream time        :1.94,  = 1.67241 * printf \nstored format time  :3.68,  = 1.89691 * stream \nformat time         :6.31,  = 3.25258 * stream \nformat3 time        :9.04,  = 4.65979 * stream \n***/\n```\n\n----------------------------------------\n\nTITLE: Function Call with Composed Arguments in C++\nDESCRIPTION: This example demonstrates calling the `evaluate` function with composed arguments, where arguments are assigned using named parameters.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_32\n\nLANGUAGE: cpp\nCODE:\n```\n\"    b.evaluate((  // composed arguments\n        _rr0 = rvalue_bitset<3>()\n      , _lrc0 = lvalue_const_bitset<0>()\n      , _lr0 = lvalue_bitset<1>()\n      , _rrc0 = rvalue_const_bitset<2>()\n    ));\"\n```\n\n----------------------------------------\n\nTITLE: Building Snappy using CMake\nDESCRIPTION: Commands to build Snappy using CMake. This process involves initializing submodules, creating a build directory, and running CMake and make commands.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/snappy/snappy-1.1.9/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit submodule update --init\nmkdir build\ncd build && cmake ../ && make\n```\n\n----------------------------------------\n\nTITLE: Defining pop_back Metafunction Template in C++\nDESCRIPTION: Defines the pop_back metafunction template for removing the last element from a sequence. It takes a Sequence parameter and returns an unspecified type.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/pop_back.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      typename Sequence\n    >\nstruct pop_back\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring FAISS Dependencies for Static and Dynamic Builds in CMake\nDESCRIPTION: This snippet configures FAISS dependencies differently based on whether static executables are being built. For static builds, it uses hardcoded paths to LAPACK and BLAS libraries based on architecture. For dynamic builds, it uses system packages with OpenMP, LAPACK, and BLAS libraries.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/CMakeLists.txt#2025-04-22_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(ZLIB REQUIRED) # TODO should be removed, see ZLIB above\n\nif(STATIC_EXECUTABLES)\n  # These variables are used when linking BIN_ARANGOD\n  # and are specific for how we build our docker build\n  # containers\n  # TODO avoid hard coded paths\n  if(ARCH_AMD64)\n    set(LAPACK_LIBRARIES \"/usr/lib/x86_64-linux-gnu/lapack/liblapack.a\" CACHE PATH \"LAPACK static library path\")\n    set(BLAS_LIBRARIES \"/usr/lib/x86_64-linux-gnu/blas/libblas.a\" CACHE PATH \"BLAS static library path\")\n  else()\n    set(LAPACK_LIBRARIES \"/usr/lib/aarch64-linux-gnu/lapack/liblapack.a\" CACHE PATH \"LAPACK static library path\")\n    set(BLAS_LIBRARIES \"/usr/lib/aarch64-linux-gnu/blas/libblas.a\" CACHE PATH \"BLAS static library path\")\n  endif()\n  message(\"LAPACK: ${LAPACK_LIBRARIES} and BLAS: to ${BLAS_LIBRARIES}\")\n\n  find_library(LIBOMP omp PATHS /opt/omp NO_DEFAULT_PATH)\n\n  if(LIBOMP)\n    message(STATUS \"Using hardcoded paths '-fopenmp=libomp -L/opt/omp -llapack -lgfortran'\")\n  else()\n    message(FATAL_ERROR \"libomp.a not found in /opt/omp\")\n  endif()\n\n  # TODO avoid hard coded paths\n  set(FAISS_EXE_LINKER_FLAGS \"-fopenmp=libomp -L/opt/omp -llapack -lgfortran\")\nelse()\n  set(BLA_STATIC Off)\n  set(BLA_VENDOR OpenBLAS)\n  find_package(OpenMP)\n  find_package(LAPACK)\n  find_package(BLAS)\n\n  set(FAISS_EXE_LINKER_FLAGS \"${OpenMP_CXX_FLAGS}\")\n\n  foreach(lapack_lib ${LAPACK_LIBRARIES})\n    message(STATUS \"Using LAPACK library: ${lapack_lib}\")\n    set(FAISS_EXE_LINKER_FLAGS \"${FAISS_EXE_LINKER_FLAGS} ${lapack_lib}\")\n  endforeach()\n\n  set(FAISS_EXE_LINKER_FLAGS \"${FAISS_EXE_LINKER_FLAGS}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost Bind CMake Build\nDESCRIPTION: Sets up CMake build configuration for Boost.Bind library. Defines version requirements, creates interface library target, sets include directories and dependencies. Optional test configuration is included based on BUILD_TESTING flag.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/bind/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.16)\n\nproject(boost_bind VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n\nadd_library(boost_bind INTERFACE)\nadd_library(Boost::bind ALIAS boost_bind)\n\ntarget_include_directories(boost_bind INTERFACE include)\n\ntarget_link_libraries(boost_bind\n  INTERFACE\n    Boost::config\n    Boost::core\n)\n\nif(BUILD_TESTING)\n\n  add_subdirectory(test)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Up OpenSSL Dependencies for IResearch in CMake\nDESCRIPTION: Finds and configures OpenSSL dependencies, adding them to the IResearch library resources list for both debug and release builds.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/CMakeLists.txt#2025-04-22_snippet_31\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(OpenSSL REQUIRED)\nlist(APPEND IRESEARCH_LIB_RESOURCES\n  \"${LIB_EAY_DEBUG_DLL}\"\n  \"${SSL_EAY_DEBUG_DLL}\"\n  \"${LIB_EAY_RELEASE_DLL}\"\n  \"${SSL_EAY_RELEASE_DLL}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Value Category Evaluation Functions in C++\nDESCRIPTION: Defines a struct U with static member functions to evaluate the value category of passed std::bitset objects. This is used to test how arguments are forwarded.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_55\n\nLANGUAGE: C++\nCODE:\n```\nenum invoked\n{\n    passed_by_lvalue_reference_to_const,\n    passed_by_lvalue_reference,\n    passed_by_rvalue_reference_to_const,\n    passed_by_rvalue_reference\n};\n\nstruct U\n{\n    template <std::size_t N>\n    static invoked evaluate_category(std::bitset<N + 1> const&)\n    {\n        return passed_by_lvalue_reference_to_const;\n    }\n\n    template <std::size_t N>\n    static invoked evaluate_category(std::bitset<N + 1>&)\n    {\n        return passed_by_lvalue_reference;\n    }\n\n    template <std::size_t N>\n    static invoked evaluate_category(std::bitset<N + 1> const&&)\n    {\n        return passed_by_rvalue_reference_to_const;\n    }\n\n    template <std::size_t N>\n    static invoked evaluate_category(std::bitset<N + 1>&&)\n    {\n        return passed_by_rvalue_reference;\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Modeling Homogeneous Color Base in C++\nDESCRIPTION: This snippet provides an internal model for homogeneous color bases using C++. It defines a template structure 'homogeneous_color_base' within a namespace, which is used to represent elements with the same type in GIL's color model, facilitating operations like pixel manipulation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/color_base.rst#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nnamespace detail\n{\n  template <typename Element, typename Layout, int K>\n  struct homogeneous_color_base;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Robust Mutex Lock File in C++\nDESCRIPTION: This code snippet defines a class MyRobustMutexLockFile for handling a robust mutex lock file. It includes methods for creating, locking, and managing the lock file in a multi-process environment.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/interprocess/proj/to-do.txt#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nclass MyRobustMutexLockFile\n{\n   int fd;\n};\n\nMyRobustMutexLockFile()\n{\n   //loop create_and_lock because another process\n   //can lock and erase it\n\n   //better create, lock and rename?\n   fd = create_file(lockfilename);\n   while(1){\n      lock_file(fd);\n      int fd2 = create_exclusive(lockfilename);\n      if(fd2){\n         close(fd);\n         fd = fd2;\n         continue;\n      }\n      else if(already_exist_error){ //must already exist\n         break;\n      }\n      else{\n         close(fd);\n         throw exception;\n      }\n   }\n}\n\n~MyRobustMutexLockFile()\n{\n   close(fd);\n   //No race condition because\n   //if any other thread tries to create the file\n   //the shm has a lock so constructor/destructor is serialized\n   unlink(lockfilename)\n}\n\nipcdetail::intermodule_singleton<MyRobustMutexLockFile>::get();\n```\n\n----------------------------------------\n\nTITLE: Configuring Echo-Op Executable in CMake\nDESCRIPTION: This CMake snippet configures the echo-op executable. It groups source files, adds the executable target, links required libraries, and sets folder properties for organization.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/beast/example/echo-op/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nGroupSources(include/boost/beast beast)\nGroupSources(example/echo-op \"/\")\n\nadd_executable (echo-op\n    ${BOOST_BEAST_FILES}\n    Jamfile\n    echo_op.cpp\n)\n\ntarget_link_libraries(echo-op\n    lib-asio\n    lib-beast)\n\nset_property(TARGET echo-op PROPERTY FOLDER \"example\")\n```\n\n----------------------------------------\n\nTITLE: Flip Adaptor Class Template Definition in C++\nDESCRIPTION: Defines a flip_adaptor class template that inherits from callable_base and implements function call operator overloading to swap first two arguments. Includes SFINAE return type deduction and failure handling mechanisms.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/flip.hpp.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<class F>\nstruct flip_adaptor : detail::callable_base<F>\n{\n    typedef flip_adaptor fit_rewritable1_tag;\n    BOOST_HOF_INHERIT_CONSTRUCTOR(flip_adaptor, detail::callable_base<F>);\n\n    template<class... Ts>\n    constexpr const detail::callable_base<F>& base_function(Ts&&... xs) const\n    {\n        return boost::hof::always_ref(*this)(xs...);\n    }\n\n    struct flip_failure\n    {\n        template<class Failure>\n        struct apply\n        {\n            template<class T, class U, class... Ts>\n            struct of\n            : Failure::template of<U, T, Ts...>\n            {};\n        };\n    };\n\n    struct failure\n    : failure_map<flip_failure, detail::callable_base<F>>\n    {};\n\n    BOOST_HOF_RETURNS_CLASS(flip_adaptor);\n\n    template<class T, class U, class... Ts>\n    constexpr BOOST_HOF_SFINAE_RESULT(const detail::callable_base<F>&, id_<U>, id_<T>, id_<Ts>...) \n    operator()(T&& x, U&& y, Ts&&... xs) const BOOST_HOF_SFINAE_RETURNS\n    (\n        (BOOST_HOF_MANGLE_CAST(const detail::callable_base<F>&)(BOOST_HOF_CONST_THIS->base_function(xs...)))\n            (BOOST_HOF_FORWARD(U)(y), BOOST_HOF_FORWARD(T)(x), BOOST_HOF_FORWARD(Ts)(xs)...)\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Static-If with Boost.HigherOrderFunctions\nDESCRIPTION: Implementation of static_if-like functionality using Boost.HigherOrderFunctions for pre-C++17 compilers.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/src/example_overloading.md#2025-04-22_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate<typename T>\nvoid decrement_kindof(T& value)\n{\n    eval(first_of(\n        if_(std::is_same<std::string, T>())([&](auto id){\n            id(value).pop_back();\n        }),\n        [&](auto id){\n            --id(value);\n        }\n    ));\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Messages in Distributed Systems\nDESCRIPTION: Non-blocking message transmission to a specific process within a process group, supporting serializable data types\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/process_group.rst#2025-04-22_snippet_9\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<typename T>\n  void send(const ProcessGroup& pg, int dest, int tag, const T& value);\n```\n\n----------------------------------------\n\nTITLE: Conditional V8 Library Linking\nDESCRIPTION: Conditionally links V8 interface library when V8 support is enabled.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/client-tools/Shell/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif (USE_V8)\n  target_link_libraries(arango_shell v8_interface)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: GIL Algorithms for Color Bases in C++\nDESCRIPTION: This snippet introduces functions and metafunctions that operate on color bases within the GIL framework using C++. It covers a variety of operations including semantic referencing, color referencing, element type retrieval, and several algorithms equivalent to standard STL functions. These functions hinge on the properties of the color base concepts defined earlier.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/color_base.rst#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\n// Metafunction returning an mpl::int_ equal to the number of elements in the color base\ntemplate <class ColorBase> struct size;\n\n// Returns the type of the return value of semantic_at_c<K>(color_base)\ntemplate <class ColorBase, int K> struct kth_semantic_element_reference_type;\ntemplate <class ColorBase, int K> struct kth_semantic_element_const_reference_type;\n\n// Returns a reference to the element with K-th semantic index.\ntemplate <class ColorBase, int K>\ntypename kth_semantic_element_reference_type<ColorBase,K>::type       semantic_at_c(ColorBase& p)\ntemplate <class ColorBase, int K>\ntypename kth_semantic_element_const_reference_type<ColorBase,K>::type semantic_at_c(const ColorBase& p)\n\n// Returns the type of the return value of get_color<Color>(color_base)\ntemplate <typename Color, typename ColorBase> struct color_reference_t;\ntemplate <typename Color, typename ColorBase> struct color_const_reference_t;\n\n// Returns a reference to the element corresponding to the given color\ntemplate <typename ColorBase, typename Color>\ntypename color_reference_t<Color,ColorBase>::type get_color(ColorBase& cb, Color=Color());\ntemplate <typename ColorBase, typename Color>\ntypename color_const_reference_t<Color,ColorBase>::type get_color(const ColorBase& cb, Color=Color());\n\n// Returns the element type of the color base. Defined for homogeneous color bases only\ntemplate <typename ColorBase> struct element_type;\ntemplate <typename ColorBase> struct element_reference_type;\ntemplate <typename ColorBase> struct element_const_reference_type;\n```\n\nLANGUAGE: cpp\nCODE:\n```\n// Equivalents to std::equal, std::copy, std::fill, std::generate\ntemplate <typename CB1,typename CB2>   bool static_equal(const CB1& p1, const CB2& p2);\ntemplate <typename Src,typename Dst>   void static_copy(const Src& src, Dst& dst);\ntemplate <typename CB, typename Op>    void static_generate(CB& dst,Op op);\n\n// Equivalents to std::transform\ntemplate <typename CB ,             typename Dst,typename Op> Op static_transform(      CB&,Dst&,Op);\ntemplate <typename CB ,             typename Dst,typename Op> Op static_transform(const CB&,Dst&,Op);\ntemplate <typename CB1,typename CB2,typename Dst,typename Op> Op static_transform(      CB1&,      CB2&,Dst&,Op);\ntemplate <typename CB1,typename CB2,typename Dst,typename Op> Op static_transform(const CB1&,      CB2&,Dst&,Op);\ntemplate <typename CB1,typename CB2,typename Dst,typename Op> Op static_transform(      CB1&,const CB2&,Dst&,Op);\ntemplate <typename CB1,typename CB2,typename Dst,typename Op> Op static_transform(const CB1&,const CB2&,Dst&,Op);\n\n// Equivalents to std::for_each\ntemplate <typename CB1,                          typename Op> Op static_for_each(      CB1&,Op);\ntemplate <typename CB1,                          typename Op> Op static_for_each(const CB1&,Op);\ntemplate <typename CB1,typename CB2,             typename Op> Op static_for_each(      CB1&,      CB2&,Op);\ntemplate <typename CB1,typename CB2,             typename Op> Op static_for_each(      CB1&,const CB2&,Op);\ntemplate <typename CB1,typename CB2,             typename Op> Op static_for_each(const CB1&,      CB2&,Op);\ntemplate <typename CB1,typename CB2,             typename Op> Op static_for_each(const CB1&,const CB2&,Op);\ntemplate <typename CB1,typename CB2,typename CB3,typename Op> Op static_for_each(      CB1&,      CB2&,      CB3&,Op);\ntemplate <typename CB1,typename CB2,typename CB3,typename Op> Op static_for_each(      CB1&,      CB2&,const CB3&,Op);\ntemplate <typename CB1,typename CB2,typename CB3,typename Op> Op static_for_each(      CB1&,const CB2&,      CB3&,Op);\ntemplate <typename CB1,typename CB2,typename CB3,typename Op> Op static_for_each(      CB1&,const CB2&,const CB3&,Op);\ntemplate <typename CB1,typename CB2,typename CB3,typename Op> Op static_for_each(const CB1&,      CB2&,      CB3&,Op);\ntemplate <typename CB1,typename CB2,typename CB3,typename Op> Op static_for_each(const CB1&,      CB2&,const CB3&,Op);\ntemplate <typename CB1,typename CB2,typename CB3,typename Op> Op static_for_each(const CB1&,const CB2&,      CB3&,Op);\ntemplate <typename CB1,typename CB2,typename CB3,typename Op> Op static_for_each(const CB1&,const CB2&,const CB3&,Op);\n\n// The following algorithms are only defined for homogeneous color bases:\n// Equivalent to std::fill\ntemplate <typename HCB, typename Element> void static_fill(HCB& p, const Element& v);\n\n// Equivalents to std::min_element and std::max_element\ntemplate <typename HCB> typename element_const_reference_type<HCB>::type static_min(const HCB&);\ntemplate <typename HCB> typename element_reference_type<HCB>::type       static_min(      HCB&);\ntemplate <typename HCB> typename element_const_reference_type<HCB>::type static_max(const HCB&);\ntemplate <typename HCB> typename element_reference_type<HCB>::type       static_max(      HCB&);\n```\n\n----------------------------------------\n\nTITLE: Defining the zip_view Template in C++\nDESCRIPTION: Template declaration for zip_view which provides a zipped view onto several sequences. It represents multiple sequences as a single sequence where each element is a sequence of corresponding elements from the input sequences.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/zip_view.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      typename Sequences\n    >\nstruct zip_view\n{\n    // |unspecified|\n    // |...|\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost VMD Library with CMake\nDESCRIPTION: Sets up the Boost VMD (Variadic Macro Data) library as an interface library in CMake. It creates the main library target, sets up include directories, and defines the dependency on Boost::preprocessor.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/vmd/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.20)\nproject(boost_vmd VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES NONE)\n\nadd_library(boost_vmd INTERFACE)\nadd_library(Boost::vmd ALIAS boost_vmd)\n\ntarget_include_directories(boost_vmd INTERFACE include)\n\ntarget_link_libraries(boost_vmd\n    INTERFACE\n        Boost::preprocessor\n)\n```\n\n----------------------------------------\n\nTITLE: Receiving Messages in Distributed Systems\nDESCRIPTION: Synchronous message receipt from a specific source process within a process group\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/process_group.rst#2025-04-22_snippet_10\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<typename T>\n  void receive(const ProcessGroup& pg, int source, int tag, T& value);\n```\n\n----------------------------------------\n\nTITLE: Breadth-First Search Function Signature (Named Parameters)\nDESCRIPTION: Defines the function signature for the breadth-first search algorithm using named parameters. It takes a graph, a starting vertex, and a set of named parameters as input. The named parameters allow for customization of the BFS algorithm.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/breadth_first_search.rst#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n// named parameter version\ntemplate <class Graph, class P, class T, class R>\nvoid breadth_first_search(Graph& G, \n  typename graph_traits<Graph>::vertex_descriptor s, \n  const bgl_named_params<P, T, R>& params);\n```\n\n----------------------------------------\n\nTITLE: RGB Planar Pixel Iterator Definition in C++\nDESCRIPTION: This code defines a struct `rgb_planar_pixel_iterator` that overloads the `operator*` to return a reference proxy. The proxy is constructed as a temporary object from underlying data (red, green, blue components). This approach is common when dealing with planar image data.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/technicalities.rst#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nstruct rgb_planar_pixel_iterator\n  {\n   typedef my_reference_proxy<T> reference;\n   reference operator*() const { return reference(red,green,blue); }\n  };\n```\n\n----------------------------------------\n\nTITLE: Creating Benchmark Executable Target\nDESCRIPTION: Creates an executable target named 'bench' with source files Jamfile and bench.cpp\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/json/bench/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(bench\n    Jamfile\n    bench.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Build Options for Snappy\nDESCRIPTION: Sets various build options for Snappy, including shared library building, test and benchmark building, and installation preferences.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/snappy/snappy-1.1.9/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\noption(BUILD_SHARED_LIBS \"Build shared libraries(DLLs).\" OFF)\n\noption(SNAPPY_BUILD_TESTS \"Build Snappy's own tests.\" ON)\n\noption(SNAPPY_BUILD_BENCHMARKS \"Build Snappy's benchmarks\" ON)\n\noption(SNAPPY_FUZZING_BUILD \"Build Snappy for fuzzing.\" OFF)\n\noption(SNAPPY_REQUIRE_AVX \"Target processors with AVX support.\" OFF)\n\noption(SNAPPY_REQUIRE_AVX2 \"Target processors with AVX2 support.\" OFF)\n\noption(SNAPPY_INSTALL \"Install Snappy's header and library\" ON)\n```\n\n----------------------------------------\n\nTITLE: Extended Non-Distributed Betweenness Centrality Function Including Weight Map in C++\nDESCRIPTION: This function template variation adds the capability to include an optional weight map for weighted calculations of betweenness centrality, making the computation adaptable to different graph scenarios.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/non_distributed_betweenness_centrality.rst#2025-04-22_snippet_4\n\nLANGUAGE: c++\nCODE:\n```\ntemplate<typename ProcessGroup, typename Graph, typename CentralityMap, \n           typename EdgeCentralityMap, typename IncomingMap, typename DistanceMap, \n           typename DependencyMap, typename PathCountMap, typename VertexIndexMap, \n           typename WeightMap, typename Buffer>\nvoid \nnon_distributed_brandes_betweenness_centrality(const ProcessGroup& pg,\n                                                 const Graph& g, \n                                                 CentralityMap centrality,\n                                                 EdgeCentralityMap edge_centrality_map,\n                                                 IncomingMap incoming, \n                                                 DistanceMap distance, \n                                                 DependencyMap dependency,\n                                                 PathCountMap path_count, \n                                                 VertexIndexMap vertex_index,\n                                                 WeightMap weight_map,\n                                                 Buffer sources);\n```\n\n----------------------------------------\n\nTITLE: Defining Default Sorted R-MAT Iterator Constructor in C++\nDESCRIPTION: This C++ code defines the default constructor for the `sorted_rmat_iterator` class. This constructor creates a past-the-end iterator, which is commonly used to signal the end of a sequence. It does not require any parameters.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/sorted_rmat_generator.rst#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\n  sorted_rmat_iterator();\n```\n\n----------------------------------------\n\nTITLE: Simplified Function Signature Example\nDESCRIPTION: Example of the simplified function signature used in documentation, equivalent to the more verbose function object implementation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/src/definitions.md#2025-04-22_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate<class IntegralConstant>\nconstexpr auto if_(IntegralConstant);\n```\n\n----------------------------------------\n\nTITLE: Semantic Implementation of times Metafunction in C++\nDESCRIPTION: Shows the equivalent semantic implementation of the times metafunction, which computes the product of the first two arguments and recursively combines with remaining arguments.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/times.rst#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\ntypedef integral_c<\n      typeof(c1::value * c2::value)\n    , ( c1::value * c2::value )\n    > c;\n    \ntypedef times<c,c3,\\ |...|\\ c\\ *n*\\>::type r;\n```\n\n----------------------------------------\n\nTITLE: Linking Boost Libraries to Boost Fusion\nDESCRIPTION: This snippet links several other Boost libraries to the `boost_fusion` target, using the `INTERFACE` keyword. This ensures that any project that links to `boost_fusion` will also transitively link to these Boost dependencies.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/fusion/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(boost_fusion\n    INTERFACE\n        Boost::config\n        Boost::container_hash\n        Boost::core\n        Boost::function_types\n        Boost::mpl\n        Boost::preprocessor\n        Boost::static_assert\n        Boost::tuple\n        Boost::type_traits\n        Boost::typeof\n        Boost::utility\n)\n```\n\n----------------------------------------\n\nTITLE: Compiler Optimization Based on Undefined Behavior in C++\nDESCRIPTION: Shows how compilers can optimize code by eliminating branches that would lead to undefined behavior. The example function assumes a non-null pointer, allowing the compiler to eliminate the null check.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/motivation/narrow_contract.md#2025-04-22_snippet_1\n\nLANGUAGE: c++\nCODE:\n```\npair<int, int> g(int * pi) // expects: pi != nullptr\n{\n  int i = *pi + 1;\n  int j = (pi == nullptr) ? 1 : 0;\n  return {i, j};\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Character Case Conversion using std::ctype Facet in C++\nDESCRIPTION: Demonstrates how to use std::ctype facet to perform character case conversion. The example shows fetching the ctype facet from a locale and using it to convert a lowercase character to uppercase.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/doc/std_locales.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nstd::ctype<char> const &ctype_facet = std::use_facet<std::ctype<char> >(some_locale);\nchar upper_a = ctype_facet.toupper('a');\n```\n\n----------------------------------------\n\nTITLE: Viewing MPL Pre-processing Help Options\nDESCRIPTION: Command to display all available options for fine-grained pre-processing of MPL containers, allowing customization of element capacity per container type.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/preprocessed/README.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npython boost_mpl_preprocess.py --help\n```\n\n----------------------------------------\n\nTITLE: Configuring No-Deadline V8 Library in CMake\nDESCRIPTION: Defines an additional V8 library arango_v8_no_deadline for handling V8 operations without deadlines. Links with core ArangoDB library, V8 interface, and VelocyPack.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/lib/V8/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(arango_v8_no_deadline STATIC\n  v8-no-deadline.cpp)\ntarget_link_libraries(arango_v8_no_deadline\n  arango\n  v8_interface\n  velocypack)\ntarget_include_directories(arango_v8_no_deadline PRIVATE\n  ${CMAKE_CURRENT_SOURCE_DIR})\n```\n\n----------------------------------------\n\nTITLE: Implementing Implicit Conversion from Custom Status Code to Error Type in C++\nDESCRIPTION: This snippet demonstrates how to define an ADL-discovered free function `make_status_code()` that enables implicit conversion from a custom status code type (`file_io_error`) to a more general error type (`error`), overcoming size limitations in the error handling framework.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/experimental/worked-example/implicit_conversion.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\ninline SYSTEM_ERROR2_NAMESPACE::status_code<SYSTEM_ERROR2_NAMESPACE::erased<int>> make_status_code(const file_io_error &code) noexcept\n{\n  return SYSTEM_ERROR2_NAMESPACE::erased_status_code<int>(static_cast<int>(code.value()), code.domain());\n}\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Reverse Unique Algorithm in C++\nDESCRIPTION: Demonstrates how to use the reverse_unique algorithm with a vector of different types, comparing elements using is_same predicate.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/reverse_unique.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ntypedef vector<int,float,float,char,int,int,int,double> types;\ntypedef vector<double,int,char,float,int> expected;\ntypedef reverse_unique< types, is_same<_1,_2> >::type result;\n\nBOOST_MPL_ASSERT(( equal< result,expected > ));\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version for Boost Format\nDESCRIPTION: This snippet specifies the minimum required version of CMake to be 3.5, with a maximum of 3.16 for the Boost format project. It sets the project name and version as well as the languages used, which is C++. This setup ensures compatibility with the specified CMake versions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/format/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.16)\n\nproject(boost_format VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Including times Metafunction Headers in C++\nDESCRIPTION: Header files required to use the times metafunction from the Boost MPL library. These includes make the metafunction available in your code.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/times.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/times.hpp>\n#include <boost/mpl/arithmetic.hpp>\n```\n\n----------------------------------------\n\nTITLE: Defining Image Write Information Structure\nDESCRIPTION: Creates a template specialization for image write information specific to the custom format, which stores metadata and parameters needed for writing an image\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/io.rst.txt#2025-04-22_snippet_9\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<> struct image_write_info< xxx_tag > {};\n```\n\n----------------------------------------\n\nTITLE: Setting Up Python Runtime and Numpy in C++\nDESCRIPTION: Initializes the Python runtime environment and the numpy module using Boost.Python. This is necessary for using Python libraries within C++ code.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/doc/numpy/tutorial/fromdata.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/python/numpy.hpp>\n#include <iostream>\n\nnamespace p = boost::python;\nnamespace np = boost::python::numpy;\n\nint main(int argc, char **argv)\n{\n  Py_Initialize();\n  np::initialize();\n```\n\n----------------------------------------\n\nTITLE: Conditional Inclusion of Test Subdirectory\nDESCRIPTION: Conditionally adds the 'test' subdirectory to the build process if the BUILD_TESTING variable is enabled and if the CMakeLists.txt file exists within the 'test' directory. This enables testing functionality if it is configured.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/qvm/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(BUILD_TESTING AND EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/test/CMakeLists.txt\")\n\n  add_subdirectory(test)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Composing Multiple Image View Operations in Boost.GIL\nDESCRIPTION: Demonstrates how to compose multiple view transformations in a chain. This example creates a grayscale view of the green channel, then applies upside-down flipping and subsampling. No pixel data is copied during these operations.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/image_view.rst#2025-04-22_snippet_12\n\nLANGUAGE: cpp\nCODE:\n```\nrgb16_image_t img(100,100);    // an RGB interleaved image\n\n// grayscale view over the green (index 1) channel of img\ngray16_step_view_t green=nth_channel_view(view(img),1);\n\n// 50x50 view of the green channel of img, upside down and taking every other pixel in X and in Y\ngray16_step_view_t ud_fud=flipped_up_down_view(subsampled_view(green,2,2));\n```\n\n----------------------------------------\n\nTITLE: Release Method for Reversible Pointer Container in C++\nDESCRIPTION: This method releases ownership of the container's resources, effectively emptying it while ensuring proper exception handling for memory allocation failures.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/reversible_ptr_container.rst#2025-04-22_snippet_18\n\nLANGUAGE: C++\nCODE:\n```\ncompatible-smart-ptr< reversible_ptr_container > release();\n```\n\n----------------------------------------\n\nTITLE: ImageConcept Definition\nDESCRIPTION: This code defines the `ImageConcept`, which builds upon the `RandomAccess2DImageConcept`. It requires that the view type (`view_t`) models `MutableImageViewConcept` and defines a coordinate type (`coord_t`). This concept represents a mutable 2D image.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/image.rst.txt#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nconcept ImageConcept<RandomAccess2DImageConcept Img>\n{\n  where MutableImageViewConcept<view_t>;\n  typename coord_t  = view_t::coord_t;\n};\n```\n\n----------------------------------------\n\nTITLE: Using lazy<T> in a Coroutine Function in C++\nDESCRIPTION: Demonstrates how to use lazy<T> in a coroutine function. The function suspends immediately and resumes when co_await is called. This example shows a simple lazy<int> function that adds 1 to its input.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/awaitables/lazy.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nlazy<int> func(int x)\n{\n  co_return x + 1;\n}\n...\n// Always suspends perhaps causing other coroutines to execute, then resumes.\nint r = co_await func(5);\n```\n\n----------------------------------------\n\nTITLE: Function Calls with Named Arguments in C++\nDESCRIPTION: These examples show how to call the `evaluate` function using named arguments. It includes calls with both complete and partial parameter sets.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_33\n\nLANGUAGE: cpp\nCODE:\n```\n\"    b.evaluate(  // named arguments\n        _rr0 = rvalue_bitset<3>()\n      , _lrc0 = lvalue_const_bitset<0>()\n      , _lr0 = lvalue_bitset<1>()\n      , _rrc0 = rvalue_const_bitset<2>()\n    );\n    b.evaluate(  // named arguments\n        _lr0 = lvalue_bitset<1>()\n      , _lrc0 = lvalue_const_bitset<0>()\n    );\"\n```\n\n----------------------------------------\n\nTITLE: Complex Template Solution\nDESCRIPTION: Shows the more complex implementation required to make iterators interoperable under current specification.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/interoperability-revisited.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nstruct Mutable : Facade<Mutable>\n{\n  template <class T>\n  enable_if<is_convertible<Mutable, T> || is_convertible<T, Mutable>, bool>::type equal_to(T const&);  \n};\n\nstruct Constant : Tag<Constant>\n{\n  Constant();\n  Constant(Constant const&);\n  Constant(Mutable const&);\n\n  template <class T>\n  enable_if<is_convertible<Constant, T> || is_convertible<T, Constant>, bool>::type equal_to(T const&);  \n};\n```\n\n----------------------------------------\n\nTITLE: Function for Color Converted View Creation in C++\nDESCRIPTION: This function allows users to create a color-converted view from a source image view. It defines a template function that utilizes previously defined types to return a new view with the specified pixel type.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/extending.rst#2025-04-22_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\n  template <typename DstP, typename View> inline\n  typename color_converted_view_type<View,DstP>::type color_convert_view(const View& src)\n  {\n    return color_converted_view_type<View,DstP>::make(src);\n  }\n```\n\n----------------------------------------\n\nTITLE: Using BOOST_OUTCOME_TRY with Immovable Objects in C++\nDESCRIPTION: This snippet demonstrates how to use the BOOST_OUTCOME_TRY macro to handle result values containing immovable objects. It efficiently creates a reference to the result instead of making a copy, which is beneficial in scenarios where resource management is critical.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/tutorial/essential/result/try_ref.md#2025-04-22_snippet_0\n\nLANGUAGE: c++\nCODE:\n```\n// This refers to a Result containing an immovable object\noutcome::result<Immovable> &&res;\n\n// For when you do want to extract the value\n// This creates an auto &&unique = res, followed by an\n// auto &&v = std::move(unique).assume_value()\nBOOST_OUTCOME_TRY((auto &&, v), res);\n```\n\n----------------------------------------\n\nTITLE: Using modulus Metafunction in C++\nDESCRIPTION: Example usage of the modulus metafunction with integral constants, demonstrating the result type and value.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/modulus.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntypedef modulus< int_<10>, long_<3> >::type r;\nBOOST_MPL_ASSERT_RELATION( r::value, ==, 1 );\nBOOST_MPL_ASSERT(( is_same< r::value_type, long > ));\n```\n\n----------------------------------------\n\nTITLE: Custom Pixel Reference and Iterator Creation in C++\nDESCRIPTION: The `interleaved_ptr.cpp` example illustrates creation of custom pixel references and iterators, allowing a GIL image view over user-supplied data. It showcases how to operate without a default GIL pixel type, granting flexibility and efficiency for specific data layouts. Only Boost GIL is required, with inputs being raw image data and outputs being processed images via custom iterators.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/example/README.md#2025-04-22_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\n\"int main() {\\n  // Your code here\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Overriding BOOST_MPL_LIMIT_METAFUNCTION_ARITY Example in C++\nDESCRIPTION: Example of overriding the default metafunction arity limit by defining BOOST_MPL_LIMIT_METAFUNCTION_ARITY to 2 before including any library headers. This limits metafunctions to accept a maximum of 2 arguments.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/LIMIT_METAFUNCTION_ARITY.rst#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\n#define BOOST_MPL_CFG_NO_PREPROCESSED_HEADERS\n#define BOOST_MPL_LIMIT_METAFUNCTION_ARITY 2\n#include <boost/mpl/apply.hpp>\n\nusing namespace boost::mpl;\n\ntemplate< typename T1, typename T2 > struct second\n{\n    typedef T2 type;\n};\n\ntemplate< typename T1, typename T2, typename T3 > struct third\n{\n    typedef T3 type;\n};\n\ntypedef apply< second<_1,_2_>,int,long >::type r1;\n// typedef apply< third<_1,_2_,_3>,int,long,float >::type r2; // error!\n```\n\n----------------------------------------\n\nTITLE: Configuring Target Properties\nDESCRIPTION: Sets include directories and links Boost::json library for the bench target. Includes private test directory headers.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/json/bench/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(bench PRIVATE ../test)\ntarget_link_libraries(bench PRIVATE Boost::json)\n```\n\n----------------------------------------\n\nTITLE: Running Unittests - Shell\nDESCRIPTION: This snippet shows the command to run unit tests for the Python package. It utilizes Python's unittest framework to discover and execute tests.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/AsyncRegistryServer/PrettyPrinter/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m unittest discover\n```\n\n----------------------------------------\n\nTITLE: Custom Swap Function for Reference Proxy in C++\nDESCRIPTION: This code defines a custom `swap` function for the `my_reference_proxy` class within the `std` namespace. This is necessary because the default `std::swap` may not work correctly with reference proxies and some STL implementations may call `std::swap` qualified.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/technicalities.rst#2025-04-22_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\nnamespace std\n  {\n   template <typename T>\n   void swap(my_reference_proxy<T>& x, my_reference_proxy<T>& y)\n   {\n      my_value<T> tmp=x;\n      x=y;\n      y=tmp;\n   }\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring VocBase Static Library Sources\nDESCRIPTION: Defines the source files to be compiled into the arango_vocbase static library, including core components and utilities from various directories.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/VocBase/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(arango_vocbase STATIC\n  ComputedValues.cpp\n  KeyGenerator.cpp\n  LogicalCollection.cpp\n  LogicalDataSource.cpp\n  LogicalView.cpp\n  Validators.cpp\n  VocbaseInfo.cpp\n  VocBaseLogManager.cpp\n  ticks.cpp\n  vocbase.cpp\n  VocbaseMetrics.cpp\n  ${PROJECT_SOURCE_DIR}/arangod/Aql/QueryCursor.cpp\n  ${PROJECT_SOURCE_DIR}/arangod/Aql/StandaloneCalculation.cpp\n  ${PROJECT_SOURCE_DIR}/arangod/Replication/DatabaseReplicationApplier.cpp\n  ${PROJECT_SOURCE_DIR}/arangod/Utils/CollectionNameResolver.cpp\n  ${PROJECT_SOURCE_DIR}/arangod/Utils/CursorRepository.cpp\n  ${PROJECT_SOURCE_DIR}/arangod/Utils/DatabaseGuard.cpp\n  ${PROJECT_SOURCE_DIR}/arangod/Utils/SingleCollectionTransaction.cpp)\n```\n\n----------------------------------------\n\nTITLE: Constructors for ValueOrError\nDESCRIPTION: Defines constructors for 'basic_result' and 'basic_outcome' that accept types matching the value_or_error concept, allowing seamless interoperability with std::expected when certain conditions are met regarding constructibility.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/tutorial/advanced/interop/value-or-error.md#2025-04-22_snippet_0\n\nLANGUAGE: c++\nCODE:\n```\nexplicit basic_result(concepts::value_or_error<T, E> &&)\nexplicit basic_outcome(concepts::value_or_error<T, E> &&)\n```\n\n----------------------------------------\n\nTITLE: Defining Iterator Facade Template in C++\nDESCRIPTION: Declares a class template for iterator_facade with various template parameters for customization. It serves as a base class for creating iterators with specific behaviors.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/facade-and-adaptor.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <\n    class Derived\n  , class Value\n  , class CategoryOrTraversal\n  , class Reference  = Value&\n  , class Difference = ptrdiff_t\n>\nclass iterator_facade;\n```\n\n----------------------------------------\n\nTITLE: Handling IO Extension Dependencies (JPEG, PNG, TIFF, LibRaw)\nDESCRIPTION: This section handles dependencies for the IO extension, including libjpeg, libpng, libtiff, and libraw. It uses either Conan or `find_package` to locate these libraries and then sets the include directories and links the libraries to the `gil_dependencies` target. LibRaw is handled as an optional dependency.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/CMakeLists.txt#2025-04-22_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\n\"if(BOOST_GIL_ENABLE_EXT_IO)\n  if (BOOST_GIL_USE_CONAN)\n    target_link_libraries(gil_dependencies\n      INTERFACE\n        CONAN_PKG::libjpeg\n        CONAN_PKG::libpng\n        CONAN_PKG::libtiff)\n  else()\n    find_package(JPEG REQUIRED)\n    find_package(PNG REQUIRED)\n    find_package(TIFF REQUIRED)\n    target_include_directories(gil_dependencies\n      INTERFACE\n        ${JPEG_INCLUDE_DIR})\n\n    target_link_libraries(gil_dependencies\n      INTERFACE\n        ${JPEG_LIBRARIES}\n        PNG::PNG\n        TIFF::TIFF)\n\n    if (TIFF_LIBRARY)\n      set(TIFFXX_NAMES tiffxx)\n      foreach(name ${TIFFXX_NAMES})\n        list(APPEND TIFFXX_NAMES_DEBUG \\\"${name}d\\\")\n      endforeach()\n      find_library(TIFFXX_LIBRARY_RELEASE NAMES ${TIFFXX_NAMES})\n      find_library(TIFFXX_LIBRARY_DEBUG NAMES ${TIFFXX_NAMES_DEBUG})\n      find_path(TIFFXX_INCLUDE_DIR NAMES tiffio.hxx)\n      include(SelectLibraryConfigurations)\n      select_library_configurations(TIFFXX)\n      mark_as_advanced(TIFFXX_LIBRARY_RELEASE TIFFXX_LIBRARY_DEBUG)\n      include(FindPackageHandleStandardArgs)\n      find_package_handle_standard_args(TIFFXX REQUIRED_VARS TIFFXX_LIBRARY TIFFXX_INCLUDE_DIR)\n      target_include_directories(gil_dependencies INTERFACE ${TIFFXX_INCLUDE_DIR})\n      target_link_libraries(gil_dependencies INTERFACE ${TIFFXX_LIBRARY})\n    endif()\n\n    # LibRaw is optional, because it is not easy to install pre-built libraw on Windows and Mac OSX\n    if(NOT EXISTS \\\"${CMAKE_BINARY_DIR}/cmake/FindLibRaw.cmake\\\")\n      message(STATUS \\\"Boost.GIL: Downloading FindLibRaw.cmake from https://github.com/LibRaw/LibRaw-cmake\\\")\n      file(DOWNLOAD\n        \\\"https://raw.githubusercontent.com/LibRaw/LibRaw-cmake/master/cmake/modules/FindLibRaw.cmake\\\"\n        \\\"${CMAKE_BINARY_DIR}/cmake/FindLibRaw.cmake\\\")\n    endif()\n    find_package(LibRaw)\n    set(BOOST_GIL_ENABLE_EXT_IO_RAW ${LibRaw_FOUND} CACHE BOOL \\\"Enable IO RAW extension (requires libraw)\\\" FORCE)\n    if(BOOST_GIL_ENABLE_EXT_IO_RAW)\n      target_include_directories(gil_dependencies INTERFACE ${LibRaw_INCLUDE_DIR})\n      target_link_libraries(gil_dependencies INTERFACE ${LibRaw_LIBRARIES})\n      target_compile_definitions(gil_dependencies INTERFACE ${LibRaw_DEFINITIONS})\n    endif()\n  endif()\nendif()\"\n```\n\n----------------------------------------\n\nTITLE: Defining Unpack Sequence Template in C++\nDESCRIPTION: Defines a template structure 'unpack_sequence' that can be specialized to unpack different sequence types into function parameters. The default implementation marks sequences as not unpackable using a typedef.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/unpack_sequence.hpp.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<class Sequence, class=void>\nstruct unpack_sequence\n{\n    typedef void not_unpackable;\n};\n```\n\n----------------------------------------\n\nTITLE: Runtime Integer Division Function\nDESCRIPTION: A division helper function for integer division operations. This function was called once during profiling with negligible execution time.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/serialization/doc/profile1.txt#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\n__divdi3\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost Flyweight with CMake\nDESCRIPTION: This CMake script sets up the Boost Flyweight library as an interface target in a CMake project. It requires multiple Boost libraries as dependencies, which are linked to the target. A conditional check is included to add a test directory if a CMakeLists.txt file is present in the specified location, indicating support for project testing. Minimum CMake version 3.5 is required and the script should be used within a C++ project aligned with Boost.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/flyweight/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Generated by `boostdep --cmake flyweight`\n# Copyright 2020 Peter Dimov\n# Distributed under the Boost Software License, Version 1.0.\n# https://www.boost.org/LICENSE_1_0.txt\n\ncmake_minimum_required(VERSION 3.5...3.16)\n\nproject(boost_flyweight VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n\nadd_library(boost_flyweight INTERFACE)\nadd_library(Boost::flyweight ALIAS boost_flyweight)\n\ntarget_include_directories(boost_flyweight INTERFACE include)\n\ntarget_link_libraries(boost_flyweight\n  INTERFACE\n    Boost::assert\n    Boost::config\n    Boost::container_hash\n    Boost::core\n    Boost::detail\n    Boost::interprocess\n    Boost::mpl\n    Boost::multi_index\n    Boost::parameter\n    Boost::preprocessor\n    Boost::serialization\n    Boost::smart_ptr\n    Boost::throw_exception\n    Boost::type_traits\n)\n\nif(BUILD_TESTING AND EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/test/CMakeLists.txt\")\n\n  add_subdirectory(test)\n\nendif()\n\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Potential Naming Conflicts with Boost.Parameter Keywords\nDESCRIPTION: This code illustrates a potential naming conflict that can occur when using Boost.Parameter keywords without a leading underscore. The example shows how a local variable with the same name as a parameter keyword can inadvertently shadow the keyword, leading to unexpected behavior.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/index.rst#2025-04-22_snippet_43\n\nLANGUAGE: cpp\nCODE:\n```\n    namespace people\n    {\n        namespace tag\n        {\n            struct name\n            {\n                typedef boost::parameter::forward_reference qualifier;\n            };\n\n            struct age\n            {\n                typedef boost::parameter::forward_reference qualifier;\n            };\n        }\n\n        namespace // unnamed\n        {\n            boost::parameter::keyword<tag::name>& **name**\n                = boost::parameter::keyword<tag::name>::instance;\n            boost::parameter::keyword<tag::age>& **age**\n                = boost::parameter::keyword<tag::age>::instance;\n        }\n\n        BOOST_PARAMETER_FUNCTION(\n            (void), g, tag, (optional (name, \\*, \"bob\")(age, \\*, 42))\n        )\n        {\n            std::cout << name << \":\" << age;\n        }\n\n        void f(int age)\n        {\n            :vellipsis:`\\ \n            .\n            .\n            .\n            ` \n            g(**age** = 3);  // whoops!\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing basic_first_of_adaptor for two functions in C++\nDESCRIPTION: A helper template in the detail namespace that implements the core conditional logic for two functions. It selects between two function objects based on which one can be called with the given arguments.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/first_of.hpp.txt#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<class F1, class F2>\nstruct basic_first_of_adaptor : F1, F2\n{\n    BOOST_HOF_INHERIT_DEFAULT(basic_first_of_adaptor, F1, F2)\n\n    template<class A, class B,\n        BOOST_HOF_ENABLE_IF_CONVERTIBLE(A, F1),\n        BOOST_HOF_ENABLE_IF_CONVERTIBLE(B, F2)>\n    constexpr basic_first_of_adaptor(A&& f1, B&& f2)\n    noexcept(BOOST_HOF_IS_NOTHROW_CONSTRUCTIBLE(F1, A&&) && BOOST_HOF_IS_NOTHROW_CONSTRUCTIBLE(F2, B&&))\n    : F1(BOOST_HOF_FORWARD(A)(f1)), F2(BOOST_HOF_FORWARD(B)(f2))\n    {}\n\n    template<class X,\n        class=typename std::enable_if<\n        BOOST_HOF_IS_CONVERTIBLE(X, F1) && \n        BOOST_HOF_IS_DEFAULT_CONSTRUCTIBLE(F2)\n    >::type>\n    constexpr basic_first_of_adaptor(X&& x) \n    BOOST_HOF_NOEXCEPT_CONSTRUCTIBLE(F1, X&&)\n    : F1(BOOST_HOF_FORWARD(X)(x))\n    {} \n\n    template<class... Ts>\n    struct select\n    : std::conditional\n    <\n        is_invocable<F1, Ts...>::value, \n        F1,\n        F2\n    >\n    {};\n\n    BOOST_HOF_RETURNS_CLASS(basic_first_of_adaptor);\n\n    template<class... Ts, class F=typename select<Ts...>::type>\n    constexpr BOOST_HOF_SFINAE_RESULT(typename select<Ts...>::type, id_<Ts>...) \n    operator()(Ts && ... xs) const\n    BOOST_HOF_SFINAE_RETURNS\n    (\n        BOOST_HOF_RETURNS_STATIC_CAST(const F&)(*BOOST_HOF_CONST_THIS)(BOOST_HOF_FORWARD(Ts)(xs)...)\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost System Library Build with CMake\nDESCRIPTION: Sets up CMake configuration for Boost System library, defining it as an interface library with required dependencies. Includes version requirements, project setup, library definition, and dependency specifications.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/system/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.16)\n\nproject(boost_system VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n\nadd_library(boost_system INTERFACE)\nadd_library(Boost::system ALIAS boost_system)\n\ntarget_include_directories(boost_system INTERFACE include)\n\ntarget_link_libraries(boost_system\n  INTERFACE\n    Boost::assert\n    Boost::config\n    Boost::throw_exception\n    Boost::variant2\n    Boost::winapi\n)\n\nif(BUILD_TESTING)\n\n  add_subdirectory(test)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Static Library arango_iresearch\nDESCRIPTION: Creates a static library named arango_iresearch with multiple source files for IResearch components in ArangoDB\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/IResearch/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(arango_iresearch STATIC\n  ApplicationServerHelper.cpp\n  ApplicationServerHelper.h\n  ...\n  Wildcard/Options.h\n  ${PROJECT_SOURCE_DIR}/arangod/RestHandler/RestAnalyzerHandler.cpp\n  ${PROJECT_SOURCE_DIR}/arangod/RestHandler/RestAnalyzerHandler.h)\n```\n\n----------------------------------------\n\nTITLE: Defining QVM Enable Unit Tests Configuration Option - JavaScript\nDESCRIPTION: This snippet defines a boolean configuration option that enables or disables the building of unit test programs in ArangoDB. Setting this option to true allows for unit test programs to be built during the compilation process.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/qvm/meson_options.txt#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\noption('qvm_enable_unit_tests',type:'boolean',value:true,description:'Enable the building of unit test programs')\n```\n\n----------------------------------------\n\nTITLE: ptr_multiset_adapter Class Definition in Boost\nDESCRIPTION: Defines the `ptr_multiset_adapter` class template within the `boost` namespace. This class is designed to adapt an underlying multiset-like container to store pointers.  It includes member functions for inserting elements and transferring ownership between `ptr_multiset_adapter` instances. The class uses a CloneAllocator to manage object cloning.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/ptr_multiset_adapter.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nnamespace boost\n{\n    template\n    <\n        class Key,\n        class VoidPtrMultiSet,\n        class CloneAllocator = heap_clone_allocator\n    >\n    class ptr_multiset_adapter\n    {\n\n    public: // `modifiers`_\n        iterator  insert( Key* x );\n\t\ttemplate< class Key2 >\n\t\titerator  insert( compatible-smart-ptr<Key2> x );\n\n    public: // `pointer container requirements`_\n        void      transfer( iterator object, ptr_multiset_adapter& from );\n        size_type transfer( iterator first, iterator last, ptr_multiset_adapter& from );\n        template< class Range >\n        size_type transfer( const Range& r, ptr_multiset_adapter& from );\n        void      transfer( ptr_multiset_adapter& from );\n\n    }; //  class 'ptr_multiset_adapter'\n\n} // namespace 'boost'\n```\n\n----------------------------------------\n\nTITLE: Building Basic Features Library\nDESCRIPTION: Defines the arango_basic_features static library build configuration with source files and dependencies\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/lib/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(arango_basic_features STATIC\n        ApplicationFeatures/ApplicationFeature.cpp\n        ApplicationFeatures/ApplicationServer.cpp\n        ApplicationFeatures/LazyApplicationFeatureReference.h\n        ApplicationFeatures/ShellColorsFeature.cpp\n        ApplicationFeatures/ApplicationFeaturePhase.cpp\n        ApplicationFeatures/BumpFileDescriptorsFeature.cpp\n        ApplicationFeatures/CommunicationFeaturePhase.cpp\n        ApplicationFeatures/ConfigFeature.cpp\n        ApplicationFeatures/FileSystemFeature.cpp\n        ApplicationFeatures/GreetingsFeature.cpp\n        ApplicationFeatures/LanguageFeature.cpp\n        ApplicationFeatures/OptionsCheckFeature.cpp\n        ApplicationFeatures/ShutdownFeature.cpp\n        ApplicationFeatures/TempFeature.cpp\n        ApplicationFeatures/VersionFeature.cpp\n)\ntarget_link_libraries(arango_basic_features\n  PUBLIC velocypack\n         arango_inspection\n         arango_basic_errors\n         arango_futures\n         absl::flat_hash_set\n         fuerte\n         s2\n)\n```\n\n----------------------------------------\n\nTITLE: Using Integral Sequence Wrapper with Standard Pattern\nDESCRIPTION: Demonstrates the standard notation for using an Integral Sequence Wrapper, where seq is the name of the wrapper's underlying sequence, T is the integral type, and c1...cn are integral constants to be stored in the sequence.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/IntegralSequenceWrapper.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nseq_c<T, c1...cn>\n```\n\n----------------------------------------\n\nTITLE: Displaying times in different time zones with boost::locale::format\nDESCRIPTION: This example demonstrates how to format the same time in local time and a specific time zone using boost::locale::format.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/doc/localized_text_formatting.txt#2025-04-22_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\ncout << format(\"Time is: Local {1,time}, ({1,time,tz=EET} Eastern European Time)\") % date;\n```\n\n----------------------------------------\n\nTITLE: Destructor for Reversible Pointer Container in C++\nDESCRIPTION: The destructor for the reversible_ptr_container class handles the cleanup of stored objects by utilizing the clone allocator, ensuring proper resource management without throwing exceptions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/reversible_ptr_container.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n~reversible_ptr_container();\n```\n\n----------------------------------------\n\nTITLE: Constructing basic_result from success_type in C++\nDESCRIPTION: Implicit constructor that takes a success_type<T> rvalue reference and constructs a basic_result. The constructor works with both void and non-void T types, propagating constexpr, triviality and noexcept properties. For void T, the value_type is default constructed.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/basic_result/implicit_success_move_constructor.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nbasic_result(success_type<T> &&)\n```\n\n----------------------------------------\n\nTITLE: Defining the ptr_deque Class in C++\nDESCRIPTION: This snippet defines the ptr_deque class which is a pointer container utilizing std::deque to store pointers. It outlines the class template, its methods for element access, modification, and pointer container requirements.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/ptr_deque.rst#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nnamespace boost\n{\n    template\n    < \n        class T, \n        class CloneAllocator = heap_clone_allocator\n        class Allocator      = std::allocator<void*>\n    >\n    class ptr_deque : public ptr_sequence_adapter\n                                 <\n                                    T,\n                                    std::deque<void*,Allocator>,\n                                    CloneAllocator\n                                 >\n    {\n    public: // `element access`_\n        T&        operator[]( size_type n );\n        const T&  operator[]( size_type n ) const;\n        T&        at( size_type n );\n        const T&  at( size_type n ) const;\n    public: // modifiers_\n        void      push_front( T* x );\n        template< class U >\n        void      push_front( compatible-smart-ptr<U> x );\n        auto_type pop_front();\n    public: // `pointer container requirements`_\n       auto_type replace( size_type idx, T* x );\n       template< class U >\n       auto_type replace( size_type idx, compatible-smart-ptr<U> x );    \n       bool      is_null( size_type idx ) const;   \n    };\n} // namespace 'boost'  \n```\n\n----------------------------------------\n\nTITLE: Declaring size_t Template Structure in C++\nDESCRIPTION: Template structure definition for size_t that wraps std::size_t values as integral constants. Takes a single template parameter N representing the value to wrap.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/size_t.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      std::size_t N\n    >\nstruct size_t\n{\n    // |unspecified|\n    // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Capture Function Template in C++\nDESCRIPTION: Defines the core capture function template that creates a capture operation with the specified capture strategy (basic, forward, or decay). It forwards the captured values to create a capture pack.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/capture.hpp.txt#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<class F>\nstruct capture_f\n{\n    template<class... Ts>\n    constexpr auto operator()(Ts&&... xs) const BOOST_HOF_RETURNS\n    (\n        BOOST_HOF_RETURNS_CONSTRUCT(make_capture_pack_f)()(BOOST_HOF_RETURNS_CONSTRUCT(F)()(BOOST_HOF_FORWARD(Ts)(xs)...))\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost Numeric Interval Library in CMake\nDESCRIPTION: Sets up CMake configuration for the Boost Numeric Interval library including version requirements, project setup, library targets, dependencies, and optional test inclusion. Defines interface library with required Boost dependencies and include directories.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/numeric/interval/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.16)\n\nproject(boost_numeric_interval VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n\nadd_library(boost_numeric_interval INTERFACE)\nadd_library(Boost::numeric_interval ALIAS boost_numeric_interval)\n\ntarget_include_directories(boost_numeric_interval INTERFACE include)\n\ntarget_link_libraries(boost_numeric_interval\n  INTERFACE\n    Boost::config\n    Boost::detail\n    Boost::logic\n)\n\nif(BUILD_TESTING AND EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/test/CMakeLists.txt\")\n\n  add_subdirectory(test)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost Smart Pointer Library in CMake\nDESCRIPTION: This CMake script configures the Boost smart_ptr library as an interface library. It defines version requirements, project metadata, include directories, and dependencies on other Boost components. It also conditionally adds the test subdirectory when BUILD_TESTING is enabled.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/smart_ptr/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.16)\n\nproject(boost_smart_ptr VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n\nadd_library(boost_smart_ptr INTERFACE)\nadd_library(Boost::smart_ptr ALIAS boost_smart_ptr)\n\ntarget_include_directories(boost_smart_ptr INTERFACE include)\n\ntarget_link_libraries(boost_smart_ptr\n  INTERFACE\n    Boost::assert\n    Boost::config\n    Boost::core\n    Boost::move\n    Boost::static_assert\n    Boost::throw_exception\n    Boost::type_traits\n)\n\nif(BUILD_TESTING)\n\n  add_subdirectory(test)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Result Adaptor Template Implementation for void Type\nDESCRIPTION: Specialized template class implementing the result adaptor for void return type. Contains similar functionality but handles void returns differently.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/result.hpp.txt#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<class F>\nstruct result_adaptor<void, F> : detail::callable_base<F>\n{\n    BOOST_HOF_INHERIT_CONSTRUCTOR(result_adaptor, detail::callable_base<F>)\n\n    typedef void result_type;\n\n    template<class... Ts>\n    constexpr const detail::callable_base<F>& base_function(Ts&&... xs) const\n    {\n        return boost::hof::always_ref(*this)(xs...);\n    }\n\n    template<class... Ts, class=typename std::enable_if<(boost::hof::is_invocable<F, Ts...>::value)>::type>\n    constexpr typename detail::holder<Ts...>::type operator()(Ts&&... xs) const\n    {\n        return (typename detail::holder<Ts...>::type)this->base_function(xs...)(BOOST_HOF_FORWARD(Ts)(xs)...);\n    };\n};\n```\n\n----------------------------------------\n\nTITLE: Demonstrating fold usage in C++\nDESCRIPTION: Demonstrates how to use fold to count the number of float types in a vector of types.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/fold.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntypedef vector<long,float,short,double,float,long,long double> types;\ntypedef fold<\n      types\n    , int_<0>\n    , if_< is_float<_2>,next<_1>,_1 >\n    >::type number_of_floats;\n\nBOOST_MPL_ASSERT_RELATION( number_of_floats::value, ==, 4 );\n```\n\n----------------------------------------\n\nTITLE: Using GIL View Transformation for Y-Gradient Computation in C++\nDESCRIPTION: Utilize the GIL view transformation function 'rotated90ccw_view' to perform image rotations. This approach leverages coordinate transformations to calculate gradients by rotating the image.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/tutorial/gradient.rst#2025-04-22_snippet_10\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <typename SrcView, typename DstView>\nvoid y_gradient(const SrcView& src, const DstView& dst)\n{\n  x_gradient(rotated90ccw_view(src), rotated90ccw_view(dst));\n}\n```\n\n----------------------------------------\n\nTITLE: Repeater Base Case Implementation\nDESCRIPTION: Specialization of the repeater template for N=0, which serves as the base case for the recursive template. Returns the input value without further function application.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/repeat.hpp.txt#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<>\nstruct repeater<0>\n{\n    template<class F, class T>\n    constexpr T operator()(const F&, T&& x) const\n    BOOST_HOF_RETURNS_DEDUCE_NOEXCEPT(T(x))\n    {\n        return x;\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Defining insert_range Metafunction Template in C++\nDESCRIPTION: Declares the insert_range metafunction template for inserting a range of elements into a sequence at a specified position. It takes three template parameters: Sequence, Pos, and Range.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/insert_range.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      typename Sequence\n    , typename Pos\n    , typename Range\n    >\nstruct insert_range\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Building Boost.Python with Faber\nDESCRIPTION: This snippet demonstrates how to build the Boost.Python library using the 'faber' build system. The library depends on pre-installed Boost and Python packages along with Faber to compile successfully.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nfaber\n```\n\n----------------------------------------\n\nTITLE: Defining copy_if Semantics in C++\nDESCRIPTION: Demonstrates the equivalent semantics of the copy_if algorithm using lambda expressions, fold, and eval_if constructs.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/copy_if.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntypedef lambda<pred>::type p;\ntypedef lambda<in::operation>::type op;\n\ntypedef fold<\n      s\n    , in::state\n    , eval_if<\n          apply_wrap1<p,_2>\n        , apply_wrap2<op,_1,_2>\n        , identity<_1>\n        >\n    >::type r;\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost Multi-Index Library Build\nDESCRIPTION: Sets up a CMake project for Boost Multi-Index library, defining version requirements, project structure, and dependencies. Creates an interface library and configures all required Boost dependencies.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/multi_index/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.16)\n\nproject(boost_multi_index VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n\nadd_library(boost_multi_index INTERFACE)\nadd_library(Boost::multi_index ALIAS boost_multi_index)\n\ntarget_include_directories(boost_multi_index INTERFACE include)\n\ntarget_link_libraries(boost_multi_index\n  INTERFACE\n    Boost::assert\n    Boost::bind\n    Boost::config\n    Boost::container_hash\n    Boost::core\n    Boost::foreach\n    Boost::integer\n    Boost::iterator\n    Boost::move\n    Boost::mpl\n    Boost::preprocessor\n    Boost::serialization\n    Boost::smart_ptr\n    Boost::static_assert\n    Boost::throw_exception\n    Boost::tuple\n    Boost::type_traits\n    Boost::utility\n)\n\nif(BUILD_TESTING AND EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/test/CMakeLists.txt\")\n\n  add_subdirectory(test)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Packed Channel Reference and Value Type Definitions in C++\nDESCRIPTION: This snippet defines two models for channel references based on the number of bits. The 'packed_channel_value' and 'packed_channel_reference' enable efficient representation and manipulation of channels within specified bit ranges.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/channel.rst.txt#2025-04-22_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\n  template <int NumBits> class packed_channel_value;\\n\\n  template <int FirstBit,\\n          int NumBits,       // Defines the sequence of bits in the data value that contain the channel\\n          bool Mutable>      // true if the reference is mutable\\n  class packed_channel_reference;\\n\n```\n\n----------------------------------------\n\nTITLE: Template Value Category Detection in C++\nDESCRIPTION: Implementation of templates to detect value category of function arguments using std::bitset. Shows overloads for handling lvalue/rvalue references.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_88\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <std::size_t N>\nstatic invoked evaluate_category(|std_bitset|_\\<N + 1> const&) \n{\n    return passed_by_lvalue_reference_to_const;\n}\n\ntemplate <std::size_t N>\nstatic invoked evaluate_category(|std_bitset|_\\<N + 1> const&&)\n{\n    return passed_by_rvalue_reference_to_const;\n}\n\ntemplate <std::size_t N>\nstatic invoked evaluate_category(|std_bitset|_\\<N + 1>&&)\n{\n    return passed_by_rvalue_reference;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing the limit Function Object in C++\nDESCRIPTION: Defines the limit_f struct to provide the main interface for the limit function decorator. It accepts an integral constant representing the parameter limit and returns a function factory for creating limit adaptors.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/limit.hpp.txt#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nstruct limit_f\n{\n    template<class IntegralConstant, std::size_t N=IntegralConstant::type::value>\n    constexpr make_limit_f<N> operator()(IntegralConstant) const\n    {\n        return {};\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Boost.Locale Library Target\nDESCRIPTION: Creates the boost_locale library target and adds source files to it.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(boost_locale\n  src/encoding/codepage.cpp\n  src/shared/date_time.cpp\n  src/shared/format.cpp\n  src/shared/formatting.cpp\n  src/shared/generator.cpp\n  src/shared/ids.cpp\n  src/shared/localization_backend.cpp\n  src/shared/message.cpp\n  src/shared/mo_lambda.cpp\n  src/util/codecvt_converter.cpp\n  src/util/default_locale.cpp\n  src/util/info.cpp\n  src/util/locale_data.cpp\n)\n\nadd_library(Boost::locale ALIAS boost_locale)\n```\n\n----------------------------------------\n\nTITLE: Define Named Parameters with 'in' and 'in_out' Modifiers\nDESCRIPTION: This snippet showcases the usage of `in` and `in_out` modifiers when defining named parameters. `in` indicates a read-only parameter, passed by `const` lvalue reference, while `in_out` signifies a read-write parameter, passed by mutable lvalue reference.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/index.rst#2025-04-22_snippet_11\n\nLANGUAGE: cpp\nCODE:\n```\n\"BOOST_PARAMETER_NAME(graph)\n        BOOST_PARAMETER_NAME(visitor)\n        BOOST_PARAMETER_NAME(**in(root_vertex)**)\n        BOOST_PARAMETER_NAME(**in(index_map)**)\n        BOOST_PARAMETER_NAME(**in_out(color_map)**)\"\n```\n\n----------------------------------------\n\nTITLE: Defining ptr_vector Class in C++ Boost Library\nDESCRIPTION: This snippet defines the ptr_vector class template within the boost namespace. It utilizes std::vector<void*> for storing pointers and provides various functionalities such as construction, capacity management, element access, and pointer container requirements.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/ptr_vector.rst#2025-04-22_snippet_0\n\nLANGUAGE: c++\nCODE:\n```\nnamespace boost\n{\n    template\n    < \n        class T, \n        class CloneAllocator = heap_clone_allocator,\n        class Allocator      = std::allocator<void*>\n    >\n    class ptr_vector : public ptr_sequence_adapter\n                                  <\n                                      T,\n                                      std::vector<void*,Allocator>,\n                                      CloneAllocator\n                                  >\n    {\n    public: // `construction`_\n        explicit ptr_vector( size_type to_reserve );\n    \n    public: // capacity_\n        size_type  capacity() const;\n        void       reserve( size_type n );\n    \n    public: // `element access`_\n        T&        operator[]( size_type n );\n        const T&  operator[]( size_type n ) const;\n        T&        at( size_type n );\n        const T&  at( size_type n ) const;\n    \n    public: // `pointer container requirements`_\n       auto_type replace( size_type idx, T* x );  \n       template< class U >\n       auto_type replace( size_type idx, compatible-smart-ptr<U> x );  \n       bool      is_null( size_type idx ) const;\n       \n    public: // `C-array support`_\n       void transfer( iterator before, T** from, size_type size, bool delete_from = true );\n       T**  c_array();\n    \n    };\n} // namespace 'boost'\n```\n\n----------------------------------------\n\nTITLE: Corner Response Function Calculation\nDESCRIPTION: Demonstrates response computation for corner detection using determinant and trace with a discrimination constant\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/image_processing/affine-region-detectors.rst.txt#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nresponse = det - k * trace^2 = a * c - b * d - k * (a + d)^2\n```\n\n----------------------------------------\n\nTITLE: Implementing Arithmetic Operators for iterator_facade in C++\nDESCRIPTION: Definition of arithmetic operators (-, +) for iterator_facade. These operators allow for iterator arithmetic and interoperability between different iterator types.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/iterator_facade_ref.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <class Dr1, class V1, class TC1, class R1, class D1,\n          class Dr2, class V2, class TC2, class R2, class D2>\n/* see below__ */\noperator-(iterator_facade<Dr1,V1,TC1,R1,D1> const& lhs,\n          iterator_facade<Dr2,V2,TC2,R2,D2> const& rhs);\n\ntemplate <class Dr, class V, class TC, class R, class D>\nDerived operator+ (iterator_facade<Dr,V,TC,R,D> const&,\n                   typename Derived::difference_type n);\n\ntemplate <class Dr, class V, class TC, class R, class D>\nDerived operator+ (typename Derived::difference_type n,\n                   iterator_facade<Dr,V,TC,R,D> const&);\n```\n\n----------------------------------------\n\nTITLE: Defining eval_if_c Metafunction Template in C++\nDESCRIPTION: Defines the template structure for eval_if_c, which takes a boolean condition and two nullary metafunctions as arguments. It evaluates one of the metafunctions based on the condition.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/eval_if_c.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate< \n    bool c\n  , typename F1\n  , typename F2\n  >\nstruct eval_if_c\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost Variant Library Build with CMake\nDESCRIPTION: Sets up CMake configuration for Boost Variant library. Defines minimum CMake version, creates an interface library, and configures dependencies to other Boost components. Includes version specification and target include directories setup.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/variant/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required( VERSION 3.5...3.20 )\nproject( boost_variant VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX )\n\nadd_library( boost_variant INTERFACE )\nadd_library( Boost::variant ALIAS boost_variant )\n\ntarget_include_directories( boost_variant INTERFACE include )\n\ntarget_link_libraries( boost_variant\n    INTERFACE\n        Boost::assert\n        Boost::bind\n        Boost::config\n        Boost::container_hash\n        Boost::core\n        Boost::detail\n        Boost::integer\n        Boost::move\n        Boost::mpl\n        Boost::preprocessor\n        Boost::static_assert\n        Boost::throw_exception\n        Boost::type_index\n        Boost::type_traits\n        Boost::utility\n)\n```\n\n----------------------------------------\n\nTITLE: Namespace Alias for Boost Parameter\nDESCRIPTION: This code snippet creates a namespace alias for `boost::parameter` for convenience. This reduces verbosity in the code by allowing users to refer to components of the library using `parameter::xxx` instead of `boost::parameter::xxx`.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/index.rst#2025-04-22_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\nnamespace parameter = boost::parameter;\n```\n\n----------------------------------------\n\nTITLE: Creating Counting Iterator Template - C++\nDESCRIPTION: Template function that constructs and returns a counting_iterator instance from an incrementable type. The function takes an incrementable value and wraps it in a counting_iterator template class.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/make_counting_iterator.rst#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <class Incrementable>\ncounting_iterator<Incrementable> make_counting_iterator(Incrementable x);\n```\n\n----------------------------------------\n\nTITLE: Defining a Boost.Python Module\nDESCRIPTION: This code snippet demonstrates how to define a Boost.Python module that exposes the class 'X' and its member function 'f' to Python. It uses the `class_` and `def` functions from Boost.Python to register the class and expose the member function with proper handling of named parameters via boost::parameter::python::function. The mpl::vector specifies the return type and parameter specifications.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter_python/doc/index.rst#2025-04-22_snippet_10\n\nLANGUAGE: cpp\nCODE:\n```\n\"    BOOST_PYTHON_MODULE(\\*module name\\*)\n    {\n        using namespace boost::python;\n        namespace py = boost::parameter::python;\n        namespace mpl = boost::mpl;\n\n        class_<X>(\"X\")\n            .def(\"f\",\n                py::function<\n                    f_fwd\n                  , mpl::vector<void, tag::x(int), tag::y\\*(int)>\n                >()\n            );\n    }\"\n```\n\n----------------------------------------\n\nTITLE: Creating Interface Library with Boost Dependencies\nDESCRIPTION: Configures an interface library for Boost Property Tree with different dependency strategies based on build context\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/property_tree/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(boost_property_tree INTERFACE)\nadd_library(Boost::property_tree ALIAS boost_property_tree)\n\ntarget_include_directories(boost_property_tree INTERFACE include)\n```\n\n----------------------------------------\n\nTITLE: Defining ArangoDB AQL Target Sources with CMake\nDESCRIPTION: This CMake command, `target_sources`, defines the source files that will be compiled and linked into the `arango_aql` target. This target is part of the ArangoDB AQL engine and includes various executors for query processing. Each `.cpp` file listed represents a different executor responsible for a specific AQL operation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/Aql/Executor/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(arango_aql PRIVATE\n  AsyncExecutor.cpp\n  CalculationExecutor.cpp\n  ConstrainedSortExecutor.cpp\n  CountCollectExecutor.cpp\n  DistinctCollectExecutor.cpp\n  DistributeExecutor.cpp\n  EmptyExecutorInfos.h\n  EnumerateCollectionExecutor.cpp\n  EnumerateListExecutor.cpp\n  EnumerateNearVectorExecutor.cpp\n  EnumeratePathsExecutor.cpp\n  FilterExecutor.cpp\n  GroupedSortExecutor.cpp\n  GroupedSortExecutorBackend.cpp\n  HashedCollectExecutor.cpp\n  IResearchViewExecutor.cpp\n  IResearchViewExecutorBase.cpp\n  IResearchViewHeapSortExecutor.cpp\n  IResearchViewMergeExecutor.cpp\n  IdExecutor.cpp\n  IndexAggregateScanExecutor.cpp\n  IndexDistinctScanExecutor.cpp\n  IndexExecutor.cpp\n  JoinExecutor.cpp\n  LimitExecutor.cpp\n  MaterializeExecutor.cpp\n  ModificationExecutor.cpp\n  ModificationExecutorAccumulator.h\n  ModificationExecutorHelpers.cpp\n  ModificationExecutorInfos.cpp\n  MultipleRemoteModificationExecutor.cpp\n  MutexExecutor.cpp\n  NoResultsExecutor.cpp\n  ParallelUnsortedGatherExecutor.cpp\n  RemoteExecutor.cpp\n  ReturnExecutor.cpp\n  ScatterExecutor.cpp\n  ShortestPathExecutor.cpp\n  SingleRemoteModificationExecutor.cpp\n  SortExecutor.cpp\n  SortedCollectExecutor.cpp\n  SortingGatherExecutor.cpp\n  SubqueryEndExecutor.cpp\n  SubqueryStartExecutor.cpp\n  TraversalExecutor.cpp\n  UnsortedGatherExecutor.cpp\n  WindowExecutor.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Template Concept value_or_none<T>\nDESCRIPTION: A C++ concept that matches types with an optional value interface, specifically requiring .has_value() returning bool and .value() observer methods. Works with std::optional<T> and std::expected<T,E>.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/concepts/value_or_none.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nvalue_or_none<T>\n```\n\n----------------------------------------\n\nTITLE: Using the Composed Frontend-Backend Classes with Named Parameters\nDESCRIPTION: Shows how to create and use composed objects with the frontend and backend templates, passing named parameters to initialize them in different orders.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_77\n\nLANGUAGE: C++\nCODE:\n```\nchar const* p = \"foo\";\nfrontend<\n    backend2<backend1<backend0<char const*>, char>, int>\n> composed_obj0;\nfrontend<\n    backend1<backend2<backend0<char const*>, int>, char>\n> composed_obj1;\ncomposed_obj0.initialize(_a2 = 4, _a1 = ' ', _a0 = p);\ncomposed_obj1.initialize(_a0 = p, _a1 = ' ', _a2 = 4);\nBOOST_TEST_EQ(composed_obj0.get_a0(), composed_obj1.get_a0());\nBOOST_TEST_EQ(composed_obj0.get_a1(), composed_obj1.get_a1());\nBOOST_TEST_EQ(composed_obj0.get_a2(), composed_obj1.get_a2());\n```\n\n----------------------------------------\n\nTITLE: Non-MSVC Compiler Configuration\nDESCRIPTION: Compiler settings for non-Microsoft compilers, including GCC and Clang, with specific warning flags and C++11 support.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/static_string/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nelse()\n    set (THREADS_PREFER_PTHREAD_FLAG ON)\n    find_package (Threads)\n\n    set( CMAKE_CXX_FLAGS\n      \"${CMAKE_CXX_FLAGS} -std=c++11 -Wall -Wextra -Wpedantic -Wno-unused-parameter\")\n\n    if (\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"Clang\")\n        set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wrange-loop-analysis\")\n    endif ()\n```\n\n----------------------------------------\n\nTITLE: Converting Move Constructor Declaration - C++\nDESCRIPTION: Explicit converting move constructor that enables compatible basic_result conversion when predicate::enable_make_exception_ptr_compatible_conversion<R, S, P> is true. The constructor propagates constexpr, triviality and noexcept properties from underlying types.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/basic_result/explicit_make_exception_ptr_move_converting_constructor.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nexplicit basic_result(basic_result<R, S, P> &&)\n```\n\n----------------------------------------\n\nTITLE: Running Single Test with Valgrind\nDESCRIPTION: This snippet provides a command line example for running single tests using Valgrind, with additional server performance options specified through extra arguments.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/CONTRIBUTING.md#2025-04-22_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/unittest shell_client --test tests/js/server/aql/aql-escaping.js \\\n  --cluster true \\\n  --extraArgs:server.threads 1 \\\n  --extraArgs:scheduler.threads 1 \\\n  --extraArgs:javascript.gc-frequency 1000000 \\\n  --extraArgs:javascript.gc-interval 65536 \\\n  --extraArgs:agent.log.level trace \\\n  --extraArgs:log.level request=debug \\\n  --extraArgs:log.force-direct true \\\n  --javascript.v8-contexts 2 \\\n  --valgrind /usr/bin/valgrind \\\n  --valgrindargs:log-file /tmp/valgrindlog.%p\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Locale with Boost.Locale Generator in C++\nDESCRIPTION: Shows how to create a specific locale (English, United States with UTF-8 encoding) using the generator class.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/doc/locale_gen.txt#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nstd::locale loc = gen(\"en_US.UTF-8\"); \n// Use English, United States locale\n```\n\n----------------------------------------\n\nTITLE: Submitting a Pull Request - Shell\nDESCRIPTION: Guides the user in creating a new feature branch from the develop branch and explains how to push the changes to their forked repository for review.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/CONTRIBUTING.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ncd libs/gil\n    git checkout develop\n    git checkout -b feature/foo\n```\n\n----------------------------------------\n\nTITLE: Creating a composite serialize function with Boost.HigherOrderFunctions in C++\nDESCRIPTION: Extending the stringify concept to create a serialize function that first tries to call stringify, then falls back to a member serialize method. Demonstrates the composability of functions created with first_of.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/doc/src/example_overloading.md.txt#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_HOF_STATIC_LAMBDA_FUNCTION(serialize) = first_of(\n    [](auto x) BOOST_HOF_RETURNS(stringify(x)),\n    [](auto x) BOOST_HOF_RETURNS(x.serialize())\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Library Target\nDESCRIPTION: Sets up the static library target with source files, compile features, dependencies, and include directories.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/json-schema-validation/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(arango-validation STATIC\n    src/validation.cpp\n)\ntarget_compile_features(arango-validation PUBLIC cxx_std_17)\ntarget_link_libraries(arango-validation PUBLIC\n   taocpp::json\n   velocypack\n)\ntarget_include_directories(arango-validation PUBLIC\n    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>\n    $<INSTALL_INTERFACE:${CMAKE_INSTALL_PREFIX}/include>\n)\n```\n\n----------------------------------------\n\nTITLE: Constructing a Distributed Property Map in C++\nDESCRIPTION: Default constructor for distributed_property_map which creates an invalid property map that must be reassigned before use.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/distributed_property_map.rst#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\ndistributed_property_map();\n```\n\n----------------------------------------\n\nTITLE: Extended Static-If with Multiple Conditions\nDESCRIPTION: Enhanced version of static_if implementation supporting multiple conditions using first_of.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/src/example_overloading.md#2025-04-22_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate<typename T>\nvoid decrement_kindof(T& value)\n{\n    eval(first_of(\n        if_(is_stack<T>())([&](auto id){\n            id(value).pop();\n        }),\n        if_(std::is_same<std::string, T>())([&](auto id){\n            id(value).pop_back();\n        }),\n        [&](auto id){\n            --id(value);\n        }\n    ));\n}\n```\n\n----------------------------------------\n\nTITLE: Clear Method for Reversible Pointer Container in C++\nDESCRIPTION: This method destroys all objects within the container, effectively resetting it to an empty state while ensuring that all necessary postconditions are met and no exceptions are thrown.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/reversible_ptr_container.rst#2025-04-22_snippet_14\n\nLANGUAGE: C++\nCODE:\n```\nvoid clear();\n```\n\n----------------------------------------\n\nTITLE: Packed Pixel Definition for RGB Formats in C++\nDESCRIPTION: Demonstrates the definition of packed pixel types like rgb565 and bgr556, which are byte-aligned. This allows the use of C++ references and pointers, facilitating efficient memory management.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/pixel.rst.txt#2025-04-22_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\n// define an rgb565 pixel\\ntypedef packed_pixel_type<uint16_t, mpl::vector3_c<unsigned,5,6,5>, rgb_layout_t>::type rgb565_pixel_t;\\n\\nfunction_requires<PixelValueConcept<rgb565_pixel_t> >();\\nstatic_assert(sizeof(rgb565_pixel_t) == 2, \"\");\\n\\n// define a bgr556 pixel\\ntypedef packed_pixel_type<uint16_t, mpl::vector3_c<unsigned,5,6,5>, bgr_layout_t>::type bgr556_pixel_t;\\n\\nfunction_requires<PixelValueConcept<bgr556_pixel_t> >();\\n\\n// rgb565 is compatible with bgr556.\\nfunction_requires<PixelsCompatibleConcept<rgb565_pixel_t,bgr556_pixel_t> >();\n```\n\n----------------------------------------\n\nTITLE: Fleischer-Hendrickson-Pinar Strong Components Algorithm in C++\nDESCRIPTION: This namespace contains functions for computing strongly connected components using the Fleischer-Hendrickson-Pinar algorithm in a distributed graph.  It provides overloads that accept different combinations of graph types, property maps, and isomorphism maps for flexibility.  The algorithms require the graph to be directed and distributed.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/strong_components.rst#2025-04-22_snippet_1\n\nLANGUAGE: c++\nCODE:\n```\n\"  namespace graph {\n    template<typename Graph, typename VertexComponentMap>\n    void\n    fleischer_hendrickson_pinar_strong_components(const Graph& g, VertexComponentMap r);\n\n    template<typename Graph, typename ReverseGraph, \n             typename ComponentMap, typename IsoMapFR, typename IsoMapRF>\n    inline typename property_traits<ComponentMap>::value_type\n    fleischer_hendrickson_pinar_strong_components(const Graph& g, \n                                                  ComponentMap c,\n                                                  const ReverseGraph& gr, \n                                                  IsoMapFR fr, IsoMapRF rf);\n  }\"\n```\n\n----------------------------------------\n\nTITLE: Defining Iterator Adaptor Concept\nDESCRIPTION: This C++ code defines the 'IteratorAdaptorConcept' which describes the required features of an iterator adaptor including functions to manipulate the base iterator.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/pixel_iterator.rst#2025-04-22_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\n  concept IteratorAdaptorConcept<RandomAccessTraversalIteratorConcept Iterator>\n  {\n    where SameType<is_iterator_adaptor<Iterator>::type, mpl::true_>;\n\n    typename iterator_adaptor_get_base<Iterator>;\n        where Metafunction<iterator_adaptor_get_base<Iterator> >;\n        where boost_concepts::ForwardTraversalConcept<iterator_adaptor_get_base<Iterator>::type>;\n\n    typename another_iterator;\n    typename iterator_adaptor_rebind<Iterator,another_iterator>::type;\n        where boost_concepts::ForwardTraversalConcept<another_iterator>;\n        where IteratorAdaptorConcept<iterator_adaptor_rebind<Iterator,another_iterator>::type>;\n\n    const iterator_adaptor_get_base<Iterator>::type& Iterator::base() const;\n  };\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost Utility Library with CMake\nDESCRIPTION: Sets up the Boost Utility library as an interface library with its required dependencies and include directories. The configuration requires CMake 3.5 or higher and links against several other Boost libraries.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/utility/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.20)\n\nproject(boost_utility VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n\nadd_library(boost_utility INTERFACE)\nadd_library(Boost::utility ALIAS boost_utility)\n\ntarget_include_directories(boost_utility INTERFACE include)\n\ntarget_link_libraries(boost_utility\n    INTERFACE\n        Boost::config\n        Boost::core\n        Boost::io\n        Boost::preprocessor\n        Boost::static_assert\n        Boost::throw_exception\n        Boost::type_traits\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Iterator Adaptor Template in C++\nDESCRIPTION: Declares a class template for iterator_adaptor with various template parameters. It allows for the creation of new iterators based on existing ones, with customizable behavior.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/facade-and-adaptor.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <\n    class Derived\n  , class Base\n  , class Value      = use_default\n  , class CategoryOrTraversal  = use_default\n  , class Reference  = use_default\n  , class Difference = use_default\n>\nclass iterator_adaptor;\n```\n\n----------------------------------------\n\nTITLE: Configuring Library Dependencies\nDESCRIPTION: Sets up conditional compilation definitions and library dependencies based on standalone mode.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/math/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(BOOST_MATH_STANDALONE)\n\n  target_compile_definitions(boost_math INTERFACE BOOST_MATH_STANDALONE=1)\n\nelse()\n\n  target_link_libraries(boost_math\n    INTERFACE\n      Boost::assert\n      Boost::concept_check\n      Boost::config\n      Boost::core\n      Boost::integer\n      Boost::lexical_cast\n      Boost::predef\n      Boost::random\n      Boost::static_assert\n      Boost::throw_exception\n  )\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Linux-Specific Compiler Flags for Tests in CMake\nDESCRIPTION: Adds Linux-specific compiler optimization flags to improve compilation speed on Linux systems, particularly disabling variable tracking and potentially global common subexpression elimination.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/CMakeLists.txt#2025-04-22_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nif (LINUX)\n  # add \"-fno-var-tracking\" to the compiler flags\n  # this speeds up the compilation with optimizations and newer g++ versions\n  # and prevents the \"variable tracking size limit exceeded warnings\" from\n  # occurring\n  if (CMAKE_COMPILER_IS_GNUCC)\n    # also turn off super-expensive global common subexpression elimination for tests\n    set_source_files_properties(${ARANGODB_TESTS_SOURCES} PROPERTIES COMPILE_FLAGS \"-fno-var-tracking -fno-gcse\")\n  else ()\n    set_source_files_properties(${ARANGODB_TESTS_SOURCES} PROPERTIES COMPILE_FLAGS -fno-var-tracking)\n  endif ()\nendif ()\n```\n\n----------------------------------------\n\nTITLE: MRView Implementation in C++ for ArangoDB\nDESCRIPTION: Implementation of the MapReduceView class which extends LogicalView. It includes constructors for new view instances and for handling view instantiation from persistence storage. This code defines the core functionality of MapReduce views in ArangoDB.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/static_string/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nMRView::MRView(TRI_vocbase_t& vocbase, velocypack::Slice const& info)\n    : LogicalView(vocbase, info), _meta{} {\n  TRI_ASSERT(info.isObject());\n\n  // update server defaults with values from creation request\n  _meta = std::make_shared<Meta>(info, *_meta);\n}\n\nMRView::MRView(TRI_vocbase_t& vocbase, velocypack::Slice info,\n               std::shared_ptr<MRView::Meta> meta)\n    : LogicalView(vocbase, info), _meta(std::move(meta)) {\n  TRI_ASSERT(info.isObject());\n  TRI_ASSERT(_meta);\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Static Function Variable for apply_eval\nDESCRIPTION: Creates a static constant function object that provides the apply_eval functionality. This follows the Boost HOF pattern of exposing functions through static variables for optimal inlining and usage.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/apply_eval.hpp.txt#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_HOF_DECLARE_STATIC_VAR(apply_eval, detail::apply_eval_f)\n```\n\n----------------------------------------\n\nTITLE: Adding ArangoDB Cluster Engine Library\nDESCRIPTION: Defines the arango_cluster_engine as a static library, listing the source files that compose the library. These source files include classes and functions for managing collections, indexes, replication, transactions, and WAL within a cluster environment.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/ClusterEngine/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(arango_cluster_engine STATIC\n  ClusterCollection.cpp\n  ClusterEngine.cpp\n  ClusterIndex.cpp\n  ClusterIndexFactory.cpp\n  ClusterRestCollectionHandler.cpp\n  ClusterRestHandlers.cpp\n  ClusterRestReplicationHandler.cpp\n  ClusterRestWalHandler.cpp\n  ClusterSelectivityEstimates.cpp\n  ClusterTransactionCollection.cpp\n  ClusterTransactionState.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring ArangoDB Replication Target Sources\nDESCRIPTION: CMake target_sources directive specifying source files for the arango_replication2_pure target, including file management and logging implementations\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/Replication2/Storage/WAL/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(arango_replication2_pure PRIVATE\n  FileIterator.cpp\n  FileManager.cpp\n  FileReaderImpl.cpp\n  FileWriterImpl.cpp\n  LogPersistor.cpp\n  LogReader.cpp\n  WalManager.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Checking for Errors or Exceptions in ArangoDB Result Object in C++\nDESCRIPTION: A const member function that returns a boolean indicating whether a Result object contains an error or exception. The method is constexpr where possible, has constant time complexity, and never throws exceptions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/basic_result/has_failure.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nbool has_failure() const noexcept\n```\n\n----------------------------------------\n\nTITLE: Setting up Sphinx Documentation Table of Contents in reStructuredText\nDESCRIPTION: Creates a table of contents using Sphinx's toctree directive that organizes the ArangoDB reference documentation into five main sections. The maxdepth parameter is set to 2, limiting the depth of the displayed table of contents.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/doc/src/reference.rst.txt#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :maxdepth: 2\n\n    adaptors\n    decorators\n    functions\n    traits\n    utilities\n```\n\n----------------------------------------\n\nTITLE: Attaching Distributed Object to Process Group in C++\nDESCRIPTION: This C++ code snippet demonstrates how a distributed data structure attaches itself to a process group by creating a copy of the process group and passing an attach_distributed_object flag to the process group constructor. The copy of the process group persists as long as the distributed data structure is attached to the process group. This ensures a separate communication space for the distributed data structure.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/process_group.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n  template<typename ProcessGroup>\n  struct distributed_data_structure \n  {\n    explicit distributed_data_structure(const ProcessGroup& pg)\n      : process_group(pg, boost::parallel::attach_distributed_object())\n    { }\n\n  private:\n    ProcessGroup process_group;\n  };\n```\n\n----------------------------------------\n\nTITLE: Creating a 2D Image Iterator in C++\nDESCRIPTION: This code snippet defines a class for iterating over pixels in a 2D image using a random access traversal iterator. The iterator operates in a memory-friendly order to enhance performance when processing large images.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/pixel_locator.rst#2025-04-22_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\n  template <typename Locator>  // Models PixelLocatorConcept\n  class iterator_from_2d\n  {\n  public:\n    iterator_from_2d(const Locator& loc, int x, int width);\n\n    iterator_from_2d& operator++(); // if (++_x<_width) ++_p.x(); else _p+=point_t(-_width,1);\n\n    ...\n  private:\n    int _x, _width;\n    Locator _p;\n  };\n```\n\n----------------------------------------\n\nTITLE: Running Docker build container (PowerShell)\nDESCRIPTION: This command starts a Docker container for building ArangoDB, mounting the current directory as a volume and mapping port 3000 for accessing the web interface. Uses PowerShell syntax.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/CONTRIBUTING.md#2025-04-22_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\ndocker run -it -v ${pwd}:/root/project -p 3000:3000 arangodb/ubuntubuildarangodb-devel:3\n```\n\n----------------------------------------\n\nTITLE: Declaring Static Variable for Indirect Function in C++\nDESCRIPTION: Creates a static variable named 'indirect' that serves as a function object factory for creating indirect_adaptor instances. This enables the library's typical usage pattern without explicitly specifying template parameters.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/indirect.hpp.txt#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_HOF_DECLARE_STATIC_VAR(indirect, detail::make<indirect_adaptor>);\n```\n\n----------------------------------------\n\nTITLE: Implementing main apply function object in C++\nDESCRIPTION: Defines the main apply_f function object with multiple operator() overloads to handle different invocation patterns including regular function calls, member function calls, and member data access.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/apply.hpp.txt#2025-04-22_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\nstruct apply_f\n{\n#if BOOST_HOF_HAS_MANUAL_DEDUCTION || BOOST_HOF_NO_EXPRESSION_SFINAE\n    template<class F, class T, class... Ts, class=typename std::enable_if<(\n        std::is_member_function_pointer<typename std::decay<F>::type>::value\n    )>::type>\n    constexpr BOOST_HOF_SFINAE_MANUAL_RESULT(apply_mem_fn, id_<F>, id_<T>, id_<Ts>...) \n    operator()(F&& f, T&& obj, Ts&&... xs) const BOOST_HOF_SFINAE_MANUAL_RETURNS\n    (\n        apply_mem_fn()(f, BOOST_HOF_FORWARD(T)(obj), BOOST_HOF_FORWARD(Ts)(xs)...)\n    );\n\n    template<class F, class T, class... Ts, class U=typename apply_deref<T>::type, class=typename std::enable_if<(\n        std::is_member_function_pointer<typename std::decay<F>::type>::value\n    )>::type>\n    constexpr BOOST_HOF_SFINAE_MANUAL_RESULT(apply_mem_fn, id_<F>, id_<U>, id_<Ts>...) \n    operator()(F&& f, T&& obj, Ts&&... xs) const BOOST_HOF_SFINAE_MANUAL_RETURNS\n    (\n        apply_mem_fn()(f, *BOOST_HOF_FORWARD(T)(obj), BOOST_HOF_FORWARD(Ts)(xs)...)\n    );\n\n    template<class F, class T, class... Ts, class=typename std::enable_if<(\n        std::is_member_function_pointer<typename std::decay<F>::type>::value\n    )>::type>\n    constexpr BOOST_HOF_SFINAE_MANUAL_RESULT(apply_mem_fn, id_<F>, id_<T&>, id_<Ts>...) \n    operator()(F&& f, const std::reference_wrapper<T>& ref, Ts&&... xs) const BOOST_HOF_SFINAE_MANUAL_RETURNS\n    (\n        apply_mem_fn()(f, ref.get(), BOOST_HOF_FORWARD(Ts)(xs)...)\n    );\n\n    template<class F, class T, class=typename std::enable_if<(\n        std::is_member_object_pointer<typename std::decay<F>::type>::value\n    )>::type>\n    constexpr BOOST_HOF_SFINAE_MANUAL_RESULT(apply_mem_data, id_<F>, id_<T>) \n    operator()(F&& f, T&& obj) const BOOST_HOF_SFINAE_MANUAL_RETURNS\n    (\n        apply_mem_data()(f, BOOST_HOF_FORWARD(T)(obj))\n    );\n\n    template<class F, class T, class U=typename apply_deref<T>::type, class=typename std::enable_if<(\n        std::is_member_object_pointer<typename std::decay<F>::type>::value\n    )>::type>\n    constexpr BOOST_HOF_SFINAE_MANUAL_RESULT(apply_mem_data, id_<F>, id_<U>) \n    operator()(F&& f, T&& obj) const BOOST_HOF_SFINAE_MANUAL_RETURNS\n    (\n        apply_mem_data()(f, *BOOST_HOF_FORWARD(T)(obj))\n    );\n    \n    template<class F, class T, class=typename std::enable_if<(\n        std::is_member_object_pointer<typename std::decay<F>::type>::value\n    )>::type>\n    constexpr BOOST_HOF_SFINAE_MANUAL_RESULT(apply_mem_data, id_<F>, id_<T&>) \n    operator()(F&& f, const std::reference_wrapper<T>& ref) const BOOST_HOF_SFINAE_MANUAL_RETURNS\n    (\n        apply_mem_data()(f, ref.get())\n    );\n\n#else\n\n    template <class Base, class T, class Derived>\n    constexpr auto operator()(T Base::*pmd, Derived&& ref) const\n    BOOST_HOF_RETURNS(BOOST_HOF_FORWARD(Derived)(ref).*pmd);\n     \n    template <class PMD, class Pointer>\n    constexpr auto operator()(PMD&& pmd, Pointer&& ptr) const\n    BOOST_HOF_RETURNS((*BOOST_HOF_FORWARD(Pointer)(ptr)).*BOOST_HOF_FORWARD(PMD)(pmd));\n\n    template <class Base, class T, class Derived>\n    constexpr auto operator()(T Base::*pmd, const std::reference_wrapper<Derived>& ref) const\n    BOOST_HOF_RETURNS(ref.get().*pmd);\n     \n    template <class Base, class T, class Derived, class... Args>\n    constexpr auto operator()(T Base::*pmf, Derived&& ref, Args&&... args) const\n    BOOST_HOF_RETURNS((BOOST_HOF_FORWARD(Derived)(ref).*pmf)(BOOST_HOF_FORWARD(Args)(args)...));\n     \n    template <class PMF, class Pointer, class... Args>\n    constexpr auto operator()(PMF&& pmf, Pointer&& ptr, Args&&... args) const\n    BOOST_HOF_RETURNS(((*BOOST_HOF_FORWARD(Pointer)(ptr)).*BOOST_HOF_FORWARD(PMF)(pmf))(BOOST_HOF_FORWARD(Args)(args)...));\n\n    template <class Base, class T, class Derived, class... Args>\n    constexpr auto operator()(T Base::*pmf, const std::reference_wrapper<Derived>& ref, Args&&... args) const\n    BOOST_HOF_RETURNS((ref.get().*pmf)(BOOST_HOF_FORWARD(Args)(args)...));\n\n#endif\n    template<class F, class... Ts>\n    constexpr BOOST_HOF_SFINAE_MANUAL_RESULT(F, id_<Ts>...) \n    operator()(F&& f, Ts&&... xs) const BOOST_HOF_SFINAE_MANUAL_RETURNS\n    (\n        f(BOOST_HOF_FORWARD(Ts)(xs)...)\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating 90-Degree Counterclockwise Rotated View using Boost GIL\nDESCRIPTION: This function template generates a view of the image rotated 90 degrees counterclockwise. It is optimized for use with the Boost GIL library's capabilities.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/image_view.rst.txt#2025-04-22_snippet_12\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <typename View>\ntypename dynamic_xy_step_transposed_type<View>::type rotated90ccw_view(const View& src);\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost.Log Preprocessor Definitions\nDESCRIPTION: Sets up common preprocessor definitions for the Boost.Log library, including configurations for static/dynamic linking, disabling autolinking, and various build-specific settings.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/log/CMakeLists.txt#2025-04-22_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nset(boost_log_common_public_defines\n    # NOTE:\n    # We deactivate autolinking, because cmake based builds don't need it\n    # and we don't implement name mangling for the library file anyway.\n    # Ususally the parent CMakeLists.txt file should already have globally defined BOOST_ALL_NO_LIB\n    BOOST_LOG_NO_LIB\n)\n\nset(boost_log_common_private_defines\n    __STDC_CONSTANT_MACROS\n    BOOST_SPIRIT_USE_PHOENIX_V3=1\n    BOOST_THREAD_DONT_USE_CHRONO=1 # Don't introduce false dependency on Boost.Chrono\n)\n\nset(boost_log_private_defines\n    BOOST_LOG_BUILDING_THE_LIB\n)\n\nset(boost_log_setup_private_defines\n    BOOST_LOG_SETUP_BUILDING_THE_LIB\n)\n\nif (BUILD_SHARED_LIBS)\n    list(APPEND boost_log_common_public_defines BOOST_LOG_DYN_LINK)\n    list(APPEND boost_log_private_defines BOOST_LOG_DLL)\n    list(APPEND boost_log_setup_private_defines BOOST_LOG_SETUP_DLL)\nelse()\n    list(APPEND boost_log_common_public_defines BOOST_LOG_STATIC_LINK)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Memory Layout for Trivially Copyable basic_result in C++\nDESCRIPTION: Shows the memory layout structure of basic_result when both value_type and error_type are trivially copyable. The structure contains a union of value and error, plus a flags field to track which union member is active.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/basic_result/_index.md#2025-04-22_snippet_2\n\nLANGUAGE: c++\nCODE:\n```\nstruct trivially_copyable_result_layout {\n  union {\n    value_type value;\n    error_type error;\n  };\n  unsigned int flags;\n};\n```\n\n----------------------------------------\n\nTITLE: Declaring pop_front Metafunction Template in C++\nDESCRIPTION: Declaration of the pop_front metafunction template for removing the first element from a sequence. It takes a Sequence parameter and returns an unspecified type.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/pop_front.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      typename Sequence\n    >\nstruct pop_front\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Zip Function Implementation\nDESCRIPTION: Implementation of a zip_func struct that operates on tuples of references to process multiple sequences in parallel.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/zip_iterator_eg.rst#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nstruct zip_func\n{\n  void operator()(const boost::tuple<const double&, const int&>& t) const\n  {\n    m_f0(t.get<0>());\n    m_f1(t.get<1>());\n  }\n\nprivate:\n  func_0 m_f0;\n  func_1 m_f1;\n};\n```\n\n----------------------------------------\n\nTITLE: Manipulating Pixel Locations with C++ GIL Locators\nDESCRIPTION: This code snippet demonstrates how to use locators to navigate and manipulate pixel locations within an image. It shows various operations such as caching locations of neighboring pixels and modifying pixel values based on their neighbors.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/pixel_locator.rst.txt#2025-04-22_snippet_9\n\nLANGUAGE: cpp\nCODE:\n```\n  loc=img.xy_at(10,10);            // start at pixel (x=10,y=10)\\n  above=loc.cache_location(0,-1);  // remember relative locations of neighbors above and below\\n  below=loc.cache_location(0, 1);\\n  ++loc.x();                       // move to (11,10)\\n  loc.y()+=15;                     // move to (11,25)\\n  loc-=point<std::ptrdiff_t>(1,1);// move to (10,24)\\n  *loc=(loc(0,-1)+loc(0,1))/2;     // set pixel (10,24) to the average of (10,23) and (10,25) (grayscale pixels only)\\n  *loc=(loc[above]+loc[below])/2;  // the same, but faster using cached relative neighbor locations\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost CRC Library Build with CMake\nDESCRIPTION: Configures CMake build settings for Boost CRC library. Sets minimum CMake version, creates an interface library, configures include directories, and establishes dependencies on other Boost components like array, config, integer, and type_traits.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/crc/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.16)\n\nproject(boost_crc VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n\nadd_library(boost_crc INTERFACE)\nadd_library(Boost::crc ALIAS boost_crc)\n\ntarget_include_directories(boost_crc INTERFACE include)\n\ntarget_link_libraries(boost_crc\n  INTERFACE\n    Boost::array\n    Boost::config\n    Boost::integer\n    Boost::type_traits\n)\n\nif(BUILD_TESTING AND EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/test/CMakeLists.txt\")\n\n  add_subdirectory(test)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost Type Index Library with CMake\nDESCRIPTION: Sets up the CMake configuration for the Boost type_index library. This includes defining the required CMake version, creating the project, defining the library as an interface library, and specifying its dependencies on other Boost components.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/type_index/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.20)\nproject(boost_type_index VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n\nadd_library(boost_type_index INTERFACE)\nadd_library(Boost::type_index ALIAS boost_type_index)\n\ntarget_include_directories(boost_type_index INTERFACE include)\n\ntarget_link_libraries(boost_type_index\n    INTERFACE\n        Boost::config\n        Boost::container_hash\n        Boost::core\n        Boost::preprocessor\n        Boost::smart_ptr\n        Boost::static_assert\n        Boost::throw_exception\n        Boost::type_traits\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost Leaf Library in CMake\nDESCRIPTION: Sets up the Boost Leaf library project, defines the library target as an interface library, and configures include directories. It also conditionally adds the test subdirectory if testing is enabled.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/leaf/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.16)\n\nproject(boost_leaf VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n\nadd_library(boost_leaf INTERFACE)\nadd_library(Boost::leaf ALIAS boost_leaf)\n\ntarget_include_directories(boost_leaf INTERFACE include)\n\nif(BUILD_TESTING AND EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/test/CMakeLists.txt\")\n\n  add_subdirectory(test)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Timezone Database Settings Based on Options\nDESCRIPTION: Sets compilation definitions based on user options for timezone database usage. When using the system timezone database, it disables autoloading and remote API, while enabling OS timezone database on non-Windows platforms.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/date/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif( USE_SYSTEM_TZ_DB )\n\tadd_definitions( -DUSE_AUTOLOAD=0 )\n\tadd_definitions( -DHAS_REMOTE_API=0 )\n\t# cannot set USE_OS_TZDB to 1 on Windows\n\tif( NOT WIN32 )\n\t\tadd_definitions( -DUSE_OS_TZDB=1 )\n\tendif( )\nelse( )\n\tadd_definitions( -DUSE_AUTOLOAD=1 )\n\tadd_definitions( -DHAS_REMOTE_API=1 )\n\tadd_definitions( -DUSE_OS_TZDB=0 )\n\tfind_package( CURL REQUIRED )\n\tinclude_directories( SYSTEM ${CURL_INCLUDE_DIRS} )\n\tset( OPTIONAL_LIBRARIES ${CURL_LIBRARIES} )\nendif( )\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost Timer Library with CMake\nDESCRIPTION: This CMake script sets up the build configuration for the Boost Timer library. It defines the library components, sets up the necessary include directories, handles shared/static library linking, and configures the required Boost dependencies.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/timer/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Copyright 2018, 2019 Peter Dimov\n# Distributed under the Boost Software License, Version 1.0.\n# See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt\n\ncmake_minimum_required(VERSION 3.5...3.16)\n\nproject(boost_timer VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n\nadd_library(boost_timer\n    src/auto_timers_construction.cpp\n    src/cpu_timer.cpp\n)\n\nadd_library(Boost::timer ALIAS boost_timer)\n\ntarget_include_directories(boost_timer PUBLIC include)\n\ntarget_compile_definitions(boost_timer\n  PUBLIC\n    BOOST_TIMER_NO_LIB\n)\n\nif(BUILD_SHARED_LIBS)\n  target_compile_definitions(boost_timer PUBLIC BOOST_TIMER_DYN_LINK)\nelse()\n  target_compile_definitions(boost_timer PUBLIC BOOST_TIMER_STATIC_LINK)\nendif()\n\ntarget_link_libraries(boost_timer\n  PUBLIC\n    Boost::config\n    Boost::core\n    Boost::system\n  PRIVATE\n    Boost::chrono\n    Boost::io\n    Boost::predef\n    Boost::throw_exception\n)\n\nif(BUILD_TESTING)\n\n    add_subdirectory(test)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining count_if Template in C++\nDESCRIPTION: Defines the count_if template struct for counting elements in a sequence that satisfy a predicate. It takes a Sequence and a Pred (predicate) as template parameters and returns an unspecified type.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/count_if.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      typename Sequence\n    , typename Pred\n    >\nstruct count_if\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Joint View Structure - C++ Boost MPL\nDESCRIPTION: This code snippet defines a template structure 'joint_view' that takes two sequences and provides a view into their concatenation. It showcases how to include the relevant Boost MPL header and outlines the necessary parameters for construction.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/joint_view.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/joint_view.hpp>\n\ntemplate<\n      typename Sequence1\n    , typename Sequence2\n    >\nstruct joint_view\n{\n    // |unspecified|\n    // |...|\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost Text File Sink Settings\nDESCRIPTION: Defines settings for a text file logging sink including the output file name, auto-flush behavior, severity filtering, and message formatting. The configuration specifies synchronous logging with custom timestamp and severity formatting.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/log/example/settings_file_custom_factories/settings.txt#2025-04-22_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[Sinks.TextFileSettings]\nDestination=TextFile\nFileName=test.log\nAutoFlush=true\nFilter=\"%Severity% > normal\"\nFormat=\"[%TimeStamp%] [%Severity%]\\n%MyScopes%\\n\\t:: %Message%\"\nAsynchronous=false\n```\n\n----------------------------------------\n\nTITLE: Defining Pixel Concepts in C++\nDESCRIPTION: Specifies pixel-related concepts, including pixel base, value, and compatibility concepts. These concepts facilitate pixel object manipulation and operations such as equality checks and conversions in color imaging.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/pixel.rst.txt#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nconcept PixelConcept<typename P> : ColorBaseConcept<P>, PixelBasedConcept<P>\\n{\\n  where is_pixel<P>::value==true;\\n  typename value_type;       where PixelValueConcept<value_type>;\\n  typename reference;        where PixelConcept<reference>;\\n  typename const_reference;  where PixelConcept<const_reference>;\\n  static const bool P::is_mutable;\\n\\n  template <PixelConcept P2> where { PixelConcept<P,P2> }\\n      P::P(P2);\\n  template <PixelConcept P2> where { PixelConcept<P,P2> }\\n      bool operator==(const P&, const P2&);\\n  template <PixelConcept P2> where { PixelConcept<P,P2> }\\n      bool operator!=(const P&, const P2&);\\n};\\n\\nconcept MutablePixelConcept<typename P> : PixelConcept<P>, MutableColorBaseConcept<P>\\n{\\n  where is_mutable==true;\\n};\\n\\nconcept HomogeneousPixelConcept<PixelConcept P> : HomogeneousColorBaseConcept<P>, HomogeneousPixelBasedConcept<P>\\n{\\n  P::template element_const_reference_type<P>::type operator[](P p, std::size_t i) const { return dynamic_at_c(P,i); }\\n};\\n\\nconcept MutableHomogeneousPixelConcept<MutablePixelConcept P> : MutableHomogeneousColorBaseConcept<P>\\n{\\n  P::template element_reference_type<P>::type operator[](P p, std::size_t i) { return dynamic_at_c(p,i); }\\n};\\n\\nconcept PixelValueConcept<typename P> : PixelConcept<P>, Regular<P>\\n{\\n  where SameType<value_type,P>;\\n};\\n\\nconcept PixelsCompatibleConcept<PixelConcept P1, PixelConcept P2> : ColorBasesCompatibleConcept<P1,P2>\\n{\\n  // where for each K [0..size<P1>::value):\\n  //    ChannelsCompatibleConcept<kth_semantic_element_type<P1,K>::type, kth_semantic_element_type<P2,K>::type>;}\\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Color Converted Views in C++ GIL\nDESCRIPTION: This snippet defines a function object that performs color conversion when dereferencing a pixel iterator. It showcases how to create a color converted view that modifies pixel access to automatically convert pixel colors using a specified converter. Requirements include understanding GIL's pixel and image view systems.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/extending.rst.txt#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <typename SrcConstRefP,  // const reference to the source pixel\n        typename DstP>          // Destination pixel value (models PixelValueConcept)\nclass color_convert_deref_fn\n{\npublic:\n    typedef color_convert_deref_fn const_t;\n    typedef DstP                value_type;\n    typedef value_type          reference;      // read-only dereferencing\n    typedef const value_type&   const_reference;\n    typedef SrcConstRefP        argument_type;\n    typedef reference           result_type;\n    static bool constexpr is_mutable = false;\n\n    result_type operator()(argument_type srcP) const {\n        result_type dstP;\n        color_convert(srcP,dstP);\n        return dstP;\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Python Virtual Environment for Boost.GIL Documentation\nDESCRIPTION: This snippet shows how to create and activate a Python virtual environment, which is a prerequisite for installing the necessary documentation tools for Boost.GIL.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/README.md#2025-04-22_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ python3 -m venv .venv\n$ source ~/.venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Testing Boost.Python with Faber\nDESCRIPTION: This snippet shows how to execute tests for the Boost.Python library using the 'faber test.report' command. The command runs all tests associated with the library ensuring the integrity and proper functioning of the codebase.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nfaber test.report\n```\n\n----------------------------------------\n\nTITLE: Declaring the decorate static variable in C++\nDESCRIPTION: Declaration of the decorate static variable that provides the global access point to the decorate functionality. It uses the BOOST_HOF_DECLARE_STATIC_VAR macro to create a static instance of the decorate_adaptor.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/decorate.hpp.txt#2025-04-22_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_HOF_DECLARE_STATIC_VAR(decorate, detail::make<decorate_adaptor>);\n```\n\n----------------------------------------\n\nTITLE: Conditional Build Macro in CMake\nDESCRIPTION: Macro for conditionally building different components of the YAP project based on user options.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/yap/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nmacro(cond_build subdir)\n    set(SUBDIRU \"\")\n    string(TOUPPER ${subdir} SUBDIRU)\n    option(YAP_BUILD_${SUBDIRU} \"Build ${subdir}\" ON)\n    if(YAP_BUILD_${SUBDIRU})\n        add_subdirectory(${subdir})\n    endif()\nendmacro()\n```\n\n----------------------------------------\n\nTITLE: Defining numeric_cast Metafunction Template in C++\nDESCRIPTION: Template declaration for the numeric_cast metafunction. It takes two template parameters: SourceTag and TargetTag, which are Integral Constant types representing the source and target numeric types for conversion.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/numeric_cast.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate< \n      typename SourceTag\n    , typename TargetTag\n    >\nstruct numeric_cast;\n```\n\n----------------------------------------\n\nTITLE: Defining Function for Adding Pass Test Cases\nDESCRIPTION: Creates a function that automatically sets up executable targets and tests for all non-failing test files in a specified glob pattern, linking them with the tz library and setting the appropriate C++ standard.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/date/CMakeLists.txt#2025-04-22_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nfunction( add_pass_tests TEST_GLOB TEST_PREFIX )\n\tfile( GLOB_RECURSE FILENAMES ${TEST_GLOB} )\n\tinclude_directories( \"${HEADER_FOLDER}/date\" )\n\n\tforeach( TEST_FILE ${FILENAMES} )\n\t\tget_filename_component( TEST_NAME ${TEST_FILE} NAME_WE )\n\t\tget_filename_component( TEST_EXT ${TEST_FILE} EXT )\n\t\tif( NOT ${TEST_EXT} STREQUAL \".fail.cpp\" )\n\t\t\tset( PREFIX \"${TEST_PREFIX}_pass_${TEST_NAME}\" )\n\t\t\tset( BIN_NAME ${PREFIX}_bin )\n\t\t\tset( TST_NAME ${PREFIX}_test )\n\t\t\tadd_executable( ${BIN_NAME} EXCLUDE_FROM_ALL ${TEST_FILE} )\n\t\t\tset_property(TARGET ${BIN_NAME} PROPERTY CXX_STANDARD ${TZ_CXX_STANDARD})\n\t\t\tadd_test( ${TST_NAME} ${BIN_NAME} )\n\t\t\ttarget_link_libraries( ${BIN_NAME} tz )\n\t\t\tadd_dependencies( testit ${BIN_NAME} )\n\t\tendif( )\n\tendforeach( )\nendfunction( )\n```\n\n----------------------------------------\n\nTITLE: Defining a Function with Boost.Parameter\nDESCRIPTION: This code snippet demonstrates how to define a free function `f` using Boost.Parameter. The BOOST_PARAMETER_FUNCTION macro is used to specify required and optional parameters with associated tags. This allows the function 'f' to accept parameters 'x' and 'y' by name when called from C++.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter_python/doc/index.rst#2025-04-22_snippet_11\n\nLANGUAGE: cpp\nCODE:\n```\n\"    BOOST_PARAMETER_FUNCTION((void), f, tag,\n        (required (x, \\*))\n        (optional (y, \\*, 1))\n    )\n    {\n        \\*…\\*/\n    }\"\n```\n\n----------------------------------------\n\nTITLE: Defining MutablePixelLocatorConcept in C++\nDESCRIPTION: This concept requires that the Locator is a PixelLocatorConcept and a MutableRandomAccess2DLocatorConcept.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/pixel_locator.rst.txt#2025-04-22_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\n\"concept MutablePixelLocatorConcept<PixelLocatorConcept Loc> : MutableRandomAccess2DLocatorConcept<Loc> {};\"\n```\n\n----------------------------------------\n\nTITLE: Defining Boost Foreach Library in CMake\nDESCRIPTION: This snippet initializes the Boost Foreach library as an INTERFACE library and sets its dependencies. It also includes the necessary headers and creates an alias for better usability. The intended use is to facilitate dependency management for projects using the Boost Foreach library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/foreach/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.16)\n\nproject(boost_foreach VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n\nadd_library(boost_foreach INTERFACE)\nadd_library(Boost::foreach ALIAS boost_foreach)\n\ntarget_include_directories(boost_foreach INTERFACE include)\n\ntarget_link_libraries(boost_foreach\n  INTERFACE\n    Boost::config\n    Boost::core\n    Boost::iterator\n    Boost::mpl\n    Boost::range\n    Boost::type_traits\n)\n```\n\n----------------------------------------\n\nTITLE: Specializing Vertex Name Extraction for Named Vertices\nDESCRIPTION: This snippet showcases how to specialize the internal vertex name structure for the City type, ensuring that the vertex properties can be referenced by their names when manipulating the distributed graph.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/distributed_adjacency_list.rst#2025-04-22_snippet_6\n\nLANGUAGE: C++\nCODE:\n```\nnamespace boost { namespace graph { \n\ntemplate<>\nstruct internal_vertex_name<City>\n{\n  typedef multi_index::member<City, std::string, &City::name> type;\n};\n\n} }\n```\n\n----------------------------------------\n\nTITLE: Defining RandomAccessNDLocatorConcept in C++\nDESCRIPTION: This C++ concept defines the requirements for a RandomAccessNDLocator, including value types, reference types, difference types, and the number of dimensions. It specifies the operators and methods that a conforming locator must implement for navigation and access.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/pixel_locator.rst.txt#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n\"concept RandomAccessNDLocatorConcept<Regular Loc>\\n  {\\n    typename value_type;        // value over which the locator navigates\\n    typename reference;         // result of dereferencing\\n    typename difference_type; where PointNDConcept<difference_type>; // return value of operator-.\\n    typename const_t;           // same as Loc, but operating over immutable values\\n    typename cached_location_t; // type to store relative location (for efficient repeated access)\\n    typename point_t  = difference_type;\\n\\n    static const size_t num_dimensions; // dimensionality of the locator\\n    where num_dimensions = point_t::num_dimensions;\\n\\n    // The difference_type and iterator type along each dimension. The iterators may only differ in\\n    // difference_type. Their value_type must be the same as Loc::value_type\\n    template <size_t D> struct axis {\\n        typename coord_t = point_t::axis<D>::coord_t;\\n        typename iterator; where RandomAccessTraversalConcept<iterator>; // iterator along D-th axis.\\n        where iterator::value_type == value_type;\\n    };\\n\\n    // Defines the type of a locator similar to this type, except it invokes Deref upon dereferencing\\n    template <PixelDereferenceAdaptorConcept Deref> struct add_deref {\\n        typename type;        where RandomAccessNDLocatorConcept<type>;\\n        static type make(const Loc& loc, const Deref& deref);\\n    };\\n\\n    Loc& operator+=(Loc&, const difference_type&);\\n    Loc& operator-=(Loc&, const difference_type&);\\n    Loc operator+(const Loc&, const difference_type&);\\n    Loc operator-(const Loc&, const difference_type&);\\n\\n    reference operator*(const Loc&);\\n    reference operator[](const Loc&, const difference_type&);\\n\\n    // Storing relative location for faster repeated access and accessing it\\n    cached_location_t Loc::cache_location(const difference_type&) const;\\n    reference operator[](const Loc&,const cached_location_t&);\\n\\n    // Accessing iterators along a given dimension at the current location or at a given offset\\n    template <size_t D> axis<D>::iterator&       Loc::axis_iterator();\\n    template <size_t D> axis<D>::iterator const& Loc::axis_iterator() const;\\n    template <size_t D> axis<D>::iterator        Loc::axis_iterator(const difference_type&) const;\\n  };\"\n```\n\n----------------------------------------\n\nTITLE: Defining Memory Layout for Non-Trivially Copyable basic_result in C++\nDESCRIPTION: Shows the memory layout structure of basic_result when either value_type or error_type are not trivially copyable. The structure separates value and error fields to handle non-trivial copy/move operations.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/basic_result/_index.md#2025-04-22_snippet_3\n\nLANGUAGE: c++\nCODE:\n```\nstruct non_trivially_copyable_result_layout {\n  value_type value;\n  unsigned int flags;\n  error_type error;\n};\n```\n\n----------------------------------------\n\nTITLE: Dynamic Image Gradient Implementation in C++\nDESCRIPTION: Implements the x_luminosity_gradient function that works with image view variants using apply_operation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/tutorial/gradient.rst.txt#2025-04-22_snippet_20\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <typename SrcViews, typename DstView>\nvoid x_luminosity_gradient(const any_image_view<SrcViews>& src, const DstView& dst)\n{\n  apply_operation(src, x_gradient_obj<DstView>(dst));\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Simple Trigger with Void Return\nDESCRIPTION: Registers a trigger that invokes a member function without a return value when a message is received. Takes a process group, tag, object instance, and member function pointer as arguments.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/simple_trigger.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<typename ProcessGroup, typename Class, typename T>\n  void \n  simple_trigger(ProcessGroup& pg, int tag, Class* self, \n                 void (Class::*pmf)(int source, int tag, const T& data, \n                                    trigger_receive_context context))\n```\n\n----------------------------------------\n\nTITLE: Configuring Examples with CMake\nDESCRIPTION: This CMake script configures example projects for the Boost.GIL library. It sets up compilation and linking specifics depending on the CMake version. When using a CMake version that is 3.12.0 or higher, the script adds the CONFIGURE_DEPEND option for the GLOB_RECURSE command, which affects how the example files are gathered. The script also handles linking with Boost and other image libraries, such as libjpeg, libpng, and libtiff, depending on whether Conan is used as a package manager.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/example/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nmessage(STATUS \"Boost.GIL: Configuring examples\")\n\nif(CMAKE_VERSION VERSION_GREATER_EQUAL 3.12.0)\n  file(GLOB_RECURSE _examples ${CMAKE_CURRENT_LIST_DIR}/*.cpp CONFIGURE_DEPEND)\nelse()\n  file(GLOB_RECURSE _examples ${CMAKE_CURRENT_LIST_DIR}/*.cpp)\nendif()\n\nforeach(_example ${_examples})\n  get_filename_component(_name ${_example} NAME_WE)\n  add_executable(example_${_name} ${_name}.cpp)\n  target_compile_definitions(example_${_name} PRIVATE BOOST_GIL_USE_CONCEPT_CHECK=1)\n  # Unfortunately, ALIAS of imported target is not supported\n  # see https://github.com/conan-io/conan/issues/2125\n  if(BOOST_GIL_USE_CONAN)\n    target_link_libraries(example_${_name}\n      PRIVATE\n        gil_compile_options\n        gil_include_directories\n        Boost::disable_autolinking\n        Boost::filesystem\n        CONAN_PKG::libjpeg\n        CONAN_PKG::libpng\n        CONAN_PKG::libtiff)\n  else()\n    target_link_libraries(example_${_name}\n      PRIVATE\n        gil_compile_options\n        gil_include_directories\n        gil_dependencies)\n  endif()\n\n  unset(_name)\nendforeach()\n\nunset(_example)\nunset(_examples)\n```\n\n----------------------------------------\n\nTITLE: Initializing Boost MPI Project in CMake\nDESCRIPTION: Sets up the Boost MPI project with version information and specifies C++ as the project language. It also defines the minimum required CMake version.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpi/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.20)\n\nproject(boost_mpi VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Calculating Distance Between Random Access Iterators in C++\nDESCRIPTION: This code snippet demonstrates how to calculate the distance between two Random Access Traversal iterators, handling both forward and backward distances.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/RandomAccessTraversal.rst#2025-04-22_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\na < b ?  distance(a,b) : -distance(b,a)\n```\n\n----------------------------------------\n\nTITLE: Zip Iterator Factory Function in C++\nDESCRIPTION: Helper function template for creating zip_iterator instances from iterator tuples.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/zip_iterator_ref.rst#2025-04-22_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate<typename IteratorTuple> \nzip_iterator<IteratorTuple> \nmake_zip_iterator(IteratorTuple t);\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost Coroutine2 Library Build in CMake\nDESCRIPTION: Sets up a CMake build configuration for Boost Coroutine2 library. Defines an interface library with necessary dependencies including Boost Assert, Config, and Context. Also includes conditional testing setup.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/coroutine2/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.16)\n\nproject(boost_coroutine2 VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n\nadd_library(boost_coroutine2 INTERFACE)\nadd_library(Boost::coroutine2 ALIAS boost_coroutine2)\n\ntarget_include_directories(boost_coroutine2 INTERFACE include)\n\ntarget_link_libraries(boost_coroutine2\n  INTERFACE\n    Boost::assert\n    Boost::config\n    Boost::context\n)\n\nif(BUILD_TESTING AND EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/test/CMakeLists.txt\")\n\n  add_subdirectory(test)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining ArangoDB Test Sources in CMake\nDESCRIPTION: Sets up a comprehensive list of all test source files categorized by components like Agency, AQL, Cache, Cluster, and more. These sources will be compiled into the arangodbtests executable.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/CMakeLists.txt#2025-04-22_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nset(ARANGODB_TESTS_SOURCES\n  ${ARANGODB_IRESEARCH_TESTS_SOURCES}\n  ${RCFILE}\n  Agency/AddFollowerTest.cpp\n  Agency/CleanOutServerTest.cpp\n  Agency/CleanUpLostCollectionTest.cpp\n  Agency/FailedFollowerTest.cpp\n  Agency/FailedLeaderTest.cpp\n  Agency/FailedServerTest.cpp\n  Agency/MoveShardTest.cpp\n  Agency/NodeLoadTest.cpp\n  Agency/NodeTest.cpp\n  Agency/RemoveFollowerTest.cpp\n  Agency/StoreTest.cpp\n  Agency/StoreTestAPI.cpp\n  Agency/SupervisionTest.cpp\n  Agency/TransactionBuilderTests.cpp\n  Aql/AqlCallListTest.cpp\n  Aql/AqlHelper.cpp\n  Aql/AqlItemBlockInputRangeTest.cpp\n  Aql/AqlItemBlockTest.cpp\n  Aql/AqlItemRowPrinter.cpp\n  Aql/AqlItemRowTest.cpp\n  Aql/AqlShadowRowTest.cpp\n  Aql/AqlValueCompare.cpp\n  Aql/AqlValueMemoryLayoutTest.cpp\n  Aql/AstNodeTest.cpp\n  Aql/AstResourcesTest.cpp\n  Aql/AttributeNamePathTest.cpp\n  Aql/BlockCollector.cpp\n  Aql/DependencyProxyMock.cpp\n  Aql/EngineInfoContainerCoordinatorTest.cpp\n  Aql/ExecutionBlockImplTest.cpp\n  Aql/ExecutionNode/EnumeratePathsNodeTest.cpp\n  Aql/ExecutionNode/ExecutionNodeTest.cpp\n  Aql/ExecutionNode/IndexNodeTest.cpp\n  Aql/ExecutionNode/MockTypedNode.cpp\n  Aql/ExecutionNode/ShortestPathNodeTest.cpp\n  Aql/ExecutionNode/TraversalNodeTest.cpp\n  Aql/Executor/AqlExecutorTestCase.cpp\n  Aql/Executor/AsyncExecutorTest.cpp\n  Aql/Executor/CalculationExecutorTest.cpp\n  Aql/Executor/CountCollectExecutorTest.cpp\n  Aql/Executor/DistinctCollectExecutorTest.cpp\n  Aql/Executor/EnumerateCollectionExecutorTest.cpp\n  Aql/Executor/EnumerateListExecutorTest.cpp\n  Aql/Executor/EnumeratePathsExecutorTest.cpp\n  Aql/Executor/ExecutorTestHelper.cpp\n  Aql/Executor/FilterExecutorTest.cpp\n  Aql/Executor/GatherExecutorCommonTest.cpp\n  Aql/Executor/GroupedSortExecutorTest.cpp\n  Aql/Executor/HashedCollectExecutorTest.cpp\n  Aql/Executor/IdExecutorTest.cpp\n  Aql/Executor/IndexAggregateScanExecutorTest.cpp\n  Aql/Executor/InsertExecutorTest.cpp\n  Aql/Executor/LimitExecutorTest.cpp\n  Aql/Executor/NoResultsExecutorTest.cpp\n  Aql/Executor/RemoteExecutorTest.cpp\n  Aql/Executor/RemoveExecutorTest.cpp\n  Aql/Executor/ReplaceExecutorTest.cpp\n  Aql/Executor/ReturnExecutorTest.cpp\n  Aql/Executor/ScatterExecutorTest.cpp\n  Aql/Executor/ShortestPathExecutorTest.cpp\n  Aql/Executor/SortExecutorTest.cpp\n  Aql/Executor/SortedCollectExecutorTest.cpp\n  Aql/Executor/SubqueryEndExecutorTest.cpp\n  Aql/Executor/SubqueryStartExecutorTest.cpp\n  Aql/Executor/TestEmptyExecutorHelper.cpp\n  Aql/Executor/TestLambdaExecutor.cpp\n  Aql/Executor/UpdateExecutorTest.cpp\n  Aql/Executor/UpsertExecutorTest.cpp\n  Aql/Executor/WindowExecutorTest.cpp\n  Aql/FixedOutputExecutionBlockMock.cpp\n  Aql/Function/BitFunctionsTest.cpp\n  Aql/Function/DateFunctionsTest.cpp\n  Aql/Function/DecaysFunctionTest.cpp\n  Aql/Function/DistanceFunctionTest.cpp\n  Aql/Function/InRangeFunctionTest.cpp\n  Aql/Function/JaccardFunctionTest.cpp\n  Aql/Function/LevenshteinMatchFunctionTest.cpp\n  Aql/Function/MinHashFunctionsTest.cpp\n  Aql/Function/NgramMatchFunctionTest.cpp\n  Aql/Function/NgramPosSimilarityFunctionTest.cpp\n  Aql/Function/NgramSimilarityFunctionTest.cpp\n  Aql/InputRangeTest.cpp\n  Aql/JoinStrategy/GenericAndTwoNonUniqueJoinTest.cpp\n  Aql/JoinStrategy/TwoIndicesUniqueJoinTest.cpp\n  Aql/NodeWalkerTest.cpp\n  Aql/ParserTest.cpp\n  Aql/ProjectionsTest.cpp\n  Aql/QueryCursorTest.cpp\n  Aql/QueryHelper.cpp\n  Aql/QueryLimitsTest.cpp\n  Aql/RegisterPlanTest.cpp\n  Aql/RowFetcherHelper.cpp\n  Aql/ShadowRowForwardingTest.cpp\n  Aql/SkipResultTest.cpp\n  Aql/SortLimitTest.cpp\n  Aql/SpliceSubqueryOptimizerRuleTest.cpp\n  Aql/SplicedSubqueryIntegrationTest.cpp\n  Aql/WaitingExecutionBlockMock.cpp\n  AsyncAgencyComm/AsyncAgencyCommTest.cpp\n  Auth/UserManagerClusterTest.cpp\n  Auth/UserManagerTest.cpp\n  Cache/BucketState.cpp\n  Cache/CachedValue.cpp\n  Cache/FrequencyBuffer.cpp\n  Cache/Manager.cpp\n  Cache/Metadata.cpp\n  Cache/MockScheduler.cpp\n  Cache/PlainBucket.cpp\n  Cache/PlainCache.cpp\n  Cache/Rebalancer.cpp\n  Cache/Table.cpp\n  Cache/TransactionManager.cpp\n  Cache/TransactionalBucket.cpp\n  Cache/TransactionalCache.cpp\n  Cache/TransactionalCacheVPackKeyHasher.cpp\n  Cache/TransactionalStore.cpp\n  Cache/TransactionsWithBackingStore.cpp\n  Cluster/AgencyPathsTest.cpp\n  Cluster/ClusterHelpersTest.cpp\n  Cluster/ClusterInfoTest.cpp\n  Cluster/EvenDistributionTest.cpp\n  Cluster/PlanCollectionEntryTest.cpp\n  Cluster/PlanCollectionToAgencyWriterTest.cpp\n  Cluster/QueryAnalyzerRevisionsTest.cpp\n  Cluster/RebootTrackerTest.cpp\n  Cluster/ShardAutoRebalancerTest.cpp\n  Cluster/ShardIDTest.cpp\n  Cluster/ServerStateTest.cpp\n  Containers/EnumerateTest.cpp\n  Containers/HashSetTest.cpp\n  Containers/MerkleTreeTest.cpp\n  Containers/SmallVectorTest.cpp\n  Errors/ErrorTTest.cpp\n  Geo/GeoConstructorTest.cpp\n  Geo/GeoFunctionsTest.cpp\n  Geo/GeoJsonTest.cpp\n  Geo/NearUtilsTest.cpp\n  Geo/ShapeContainerTest.cpp\n  Logger/EscaperTest.cpp\n  Logger/LogContextTest.cpp\n  Maintenance/MaintenanceFeatureTest.cpp\n  Maintenance/MaintenanceRestHandlerTest.cpp\n  Maintenance/MaintenanceTest.cpp\n  Metrics/MetricsFeatureTest.cpp\n  Metrics/MetricsServerTest.cpp\n  Metrics/MetricsTest.cpp\n  Network/ConnectionPoolTest.cpp\n  Network/MethodsTest.cpp\n  Network/UtilsTest.cpp\n  ProgramOptions/InifileParserTest.cpp\n  ProgramOptions/ParametersTest.cpp\n  Replication/ReplicationClientsProgressTrackerTest.cpp\n  Rest/HttpRequestTest.cpp\n  Rest/PathMatchTest.cpp\n  RestHandler/RestAnalyzerHandlerTest.cpp\n  RestHandler/RestDocumentHandlerTest.cpp\n  RestHandler/RestUsersHandlerTest.cpp\n  RestHandler/RestViewHandlerTest.cpp\n  RestServer/FlushFeatureTest.cpp\n  RestServer/LanguageFeatureTest.cpp\n  Restore/CollectionRestoreOrder.cpp\n  RocksDBEngine/CachedCollectionNameTest.cpp\n  RocksDBEngine/ChecksumCalculatorTest.cpp\n  RocksDBEngine/ChecksumHelperTest.cpp\n  RocksDBEngine/EncryptionProviderTest.cpp\n  RocksDBEngine/EndianTest.cpp\n  RocksDBEngine/IndexEstimatorTest.cpp\n  RocksDBEngine/KeyTest.cpp\n  RocksDBEngine/MemoryUsageTest.cpp\n  RocksDBEngine/TransactionManagerTest.cpp\n  Sharding/ShardDistributionReporterTest.cpp\n  SimpleHttpClient/ConnectionCacheTest.cpp\n  SimpleHttpClient/HttpResponseCheckerTest.cpp\n  StorageEngine/PhysicalCollectionTest.cpp\n  Transaction/ContextTest.cpp\n  Transaction/CountCacheTest.cpp\n  Transaction/ManagerTest.cpp\n  Transaction/RestTransactionHandlerTest.cpp\n  Utils/CollectionNameResolverTest.cpp\n  Utils/NameValidatorTest.cpp\n  Utils/QuickGen.cpp\n  VocBase/ComputedValuesTest.cpp\n  VocBase/KeyGeneratorTest.cpp\n  VocBase/LogicalDataSourceTest.cpp\n  VocBase/LogicalViewTest.cpp\n  VocBase/VersionTest.cpp\n  VocBase/VocbaseTest.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Using accumulate Algorithm in C++\nDESCRIPTION: Example usage of the accumulate algorithm to count the number of float types in a vector of types.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/accumulate.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntypedef vector<long,float,short,double,float,long,long double> types;\ntypedef accumulate<\n      types\n    , int_<0>\n    , if_< is_float<_2>,next<_1>,_1 >\n    >::type number_of_floats;\n\nBOOST_MPL_ASSERT_RELATION( number_of_floats::value, ==, 4 );\n```\n\n----------------------------------------\n\nTITLE: Bidirectional Iterator Prior Operation\nDESCRIPTION: Definition of the prior operation semantic requirements for decrementable iterators.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/BidirectionalIterator.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ntypedef prior<i>::type j;\n```\n\n----------------------------------------\n\nTITLE: Conditional Benchmark Support with ROOT\nDESCRIPTION: This section evaluates the availability of the ROOT package and conditionally adds a histogram benchmark that utilizes ROOT libraries, including specific compile options to ensure the right linking behavior.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/histogram/benchmark/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(ROOT QUIET)\nif (ROOT_FOUND)\n  add_benchmark(\n    histogram_filling_root\n    INCLUDE_DIRECTORIES ${ROOT_INCLUDE_DIRS}\n    LINK_LIBRARIES ${ROOT_LIBRARIES}\n    COMPILE_OPTIONS -frtti -fexceptions\n  )\n  # add ROOT linker flags? ${ROOT_EXE_LINKER_FLAGS}\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost Dependencies in CMake\nDESCRIPTION: Handles Boost library dependencies configuration including conditional components based on build options and platform specifics. Sets up required Boost components and manages duplicate entries.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/compute/example/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EXAMPLE_BOOST_COMPONENTS program_options)\n\nif (${BOOST_COMPUTE_USE_OFFLINE_CACHE})\n  set(EXAMPLE_BOOST_COMPONENTS ${EXAMPLE_BOOST_COMPONENTS} system filesystem)\nendif()\n\nif(${BOOST_COMPUTE_THREAD_SAFE} AND NOT ${BOOST_COMPUTE_USE_CPP11})\n  set(EXAMPLE_BOOST_COMPONENTS ${EXAMPLE_BOOST_COMPONENTS} system thread)\nendif()\n\nif(MSVC AND EXAMPLE_BOOST_COMPONENTS)\n  set(EXAMPLE_BOOST_COMPONENTS ${EXAMPLE_BOOST_COMPONENTS} chrono)\nendif()\n\nif(EXAMPLE_BOOST_COMPONENTS)\n  list(REMOVE_DUPLICATES EXAMPLE_BOOST_COMPONENTS)\nendif()\nfind_package(Boost 1.54 REQUIRED COMPONENTS ${EXAMPLE_BOOST_COMPONENTS})\ninclude_directories(SYSTEM ${Boost_INCLUDE_DIRS})\n```\n\n----------------------------------------\n\nTITLE: Edge Addition Operations in C++\nDESCRIPTION: Multiple overloads for adding edges to the graph with optional properties. Supports both vertex descriptors and named vertices.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/distributed_adjacency_list.rst#2025-04-22_snippet_16\n\nLANGUAGE: C++\nCODE:\n```\nunspecified add_edge(vertex_descriptor u, vertex_descriptor v, adjacency_list& g);\nunspecified add_edge(vertex_name_type u, vertex_descriptor v, adjacency_list& g);\nunspecified add_edge(vertex_descriptor u, vertex_name_type v, adjacency_list& g);\nunspecified add_edge(vertex_name_type u, vertex_name_type v, adjacency_list& g);\n```\n\n----------------------------------------\n\nTITLE: Configuring Async WebSocket Server Example in CMake\nDESCRIPTION: Defines the CMake build configuration for an asynchronous WebSocket server example using Boost.Beast. The configuration groups source files, creates an executable, links required libraries, and sets folder properties for organization.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/beast/example/websocket/server/async/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nGroupSources(include/boost/beast beast)\nGroupSources(example/websocket/server/async \"/\")\n\nadd_executable (websocket-server-async\n    ${BOOST_BEAST_FILES}\n    Jamfile\n    websocket_server_async.cpp\n)\n\ntarget_link_libraries(websocket-server-async\n    lib-asio\n    lib-beast)\n\nset_property(TARGET websocket-server-async PROPERTY FOLDER \"example-websocket-server\")\n```\n\n----------------------------------------\n\nTITLE: Using Partition Algorithm with Range and Predicate in C++\nDESCRIPTION: Demonstrates usage of the partition algorithm with a range of integers from 0 to 9, using an is_odd predicate to split the numbers into odd and even groups. The result is stored in two separate vectors.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/partition.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ntemplate< typename N > struct is_odd : bool_<(N::value % 2)> {};\n\ntypedef partition<\n      range_c<int,0,10> \n    , is_odd<_1>\n    , back_inserter< vector<> >\n    , back_inserter< vector<> >\n    >::type r;\n\nBOOST_MPL_ASSERT(( equal< r::first, vector_c<int,1,3,5,7,9> > ));\nBOOST_MPL_ASSERT(( equal< r::second, vector_c<int,0,2,4,6,8> > ));\n```\n\n----------------------------------------\n\nTITLE: Exception on incorrect wide error observation\nDESCRIPTION: This code snippet shows the exception thrown when an incorrect wide error observation occurs using the `exception_ptr_rethrow` policy. It utilizes `BOOST_OUTCOME_THROW_EXCEPTION` with a `bad_outcome_access` object.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/policies/exception_ptr_rethrow_outcome.md#2025-04-22_snippet_0\n\nLANGUAGE: c++\nCODE:\n```\n```c++\nBOOST_OUTCOME_THROW_EXCEPTION(bad_outcome_access(\"no error\"));\n```\n```\n\n----------------------------------------\n\nTITLE: Defining PixelLocatorConcept in C++\nDESCRIPTION: This C++ concept specializes RandomAccess2DLocatorConcept for pixel data.  It ensures that the value type is a PixelValueConcept, that the x and y iterators are PixelIteratorConcepts and the x and y coordinate types are the same.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/pixel_locator.rst.txt#2025-04-22_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\n\"concept PixelLocatorConcept<RandomAccess2DLocatorConcept Loc>\\n  {\\n    where PixelValueConcept<value_type>;\\n    where PixelIteratorConcept<x_iterator>;\\n    where PixelIteratorConcept<y_iterator>;\\n    where x_coord_t == y_coord_t;\\n\\n    typename coord_t = x_coord_t;\\n  };\"\n```\n\n----------------------------------------\n\nTITLE: Example Usage of BOOST_PARAMETER_BASIC_CONST_FUNCTION_CALL_OPERATOR Macro\nDESCRIPTION: Demonstrates how to use the BOOST_PARAMETER_BASIC_CONST_FUNCTION_CALL_OPERATOR macro to create a function call operator that accepts various argument types and preserves value categories.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_63\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <std::size_t N>\n|std_bitset|_\\<N + 1> rvalue_bitset()\n{\n    return |std_bitset|_\\<N + 1>();\n}\n\ntemplate <std::size_t N>\n|std_bitset|_\\<N + 1> const rvalue_const_bitset()\n{\n    return |std_bitset|_\\<N + 1>();\n}\n\ntemplate <std::size_t N>\n|std_bitset|_\\<N + 1>& lvalue_bitset()\n{\n    static |std_bitset|_\\<N + 1> lset = |std_bitset|_\\<N + 1>();\n    return lset;\n}\n\ntemplate <std::size_t N>\n|std_bitset|_\\<N + 1> const& lvalue_const_bitset()\n{\n    static |std_bitset|_\\<N + 1> const clset = |std_bitset|_\\<N + 1>();\n    return clset;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Value Type Observer Function\nDESCRIPTION: This snippet defines the `value()` function which acts as an observer for a value of type `value_type`. It first checks the value's existence using `NoValuePolicy::wide_value_check()` and then returns a reference to the value. Special considerations are made when `value_type` is `void` to ensure only a const overload is available.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/basic_outcome/value_lvalue.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ntitle = \"`value_type &value() &`\"\n\ndescription = \"Wide contract lvalue reference observer of any value present. Constexpr propagating.\"\n\ncategories = [\"observers\"]\nweight = 640\n\n```\n\n----------------------------------------\n\nTITLE: Packed Pixel Format Definition\nDESCRIPTION: Implements non-byte-aligned pixel formats with custom bit allocation for color channels\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/pixel.rst#2025-04-22_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\ntypedef packed_pixel_type<uint16_t, mpl::vector3_c<unsigned,5,6,5>, rgb_layout_t>::type rgb565_pixel_t;\n\ntypedef packed_pixel_type<uint16_t, mpl::vector3_c<unsigned,5,6,5>, bgr_layout_t>::type bgr556_pixel_t;\n```\n\n----------------------------------------\n\nTITLE: C++ Function Definition\nDESCRIPTION: This C++ function, `greet`, returns a string from a static array based on the input index `x`. It throws a `std::range_error` if the index is out of bounds (greater than 2). The function showcases a simple C++ function that can be exposed to Python using Boost.Python.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/doc/article.rst#2025-04-22_snippet_0\n\nLANGUAGE: c++\nCODE:\n```\n    char const* greet(unsigned x)\n    {\n       static char const* const msgs[] = { \"hello\", \"Boost.Python\", \"world!\" };\n\n       if (x > 2) \n           throw std::range_error(\"greet: index out of range\");\n\n       return msgs[x];\n    }\n```\n\n----------------------------------------\n\nTITLE: Referencing Iterator Facade Class\nDESCRIPTION: Code reference to the iterator_facade base class template that implements standard iterator interfaces.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/iterator_facade_abstract.rst#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\niterator_facade\n```\n\n----------------------------------------\n\nTITLE: Include Boost.Parameter and Define Namespace\nDESCRIPTION: This code snippet includes the Boost.Parameter header and defines a namespace with a sample variable and a template struct. It sets up a basic environment for using Boost.Parameter in subsequent examples.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/index.rst#2025-04-22_snippet_8\n\nLANGUAGE: cpp\nCODE:\n```\n\"#include <boost/parameter.hpp>\n\n    namespace boost {\n\n        int vertex_index = 0;\n\n        template <typename T = int>\n        struct dfs_visitor\n        {\n        };\n    }\"\n```\n\n----------------------------------------\n\nTITLE: Example Usage of 'always' Function in C++\nDESCRIPTION: Demonstrates how to use the 'always' function in practice, showing that it returns a constant value regardless of input parameters. Also includes an example of using it with standard algorithms for predicates.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/always.hpp.txt#2025-04-22_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/hof.hpp>\n#include <algorithm>\n#include <cassert>\nusing namespace boost::hof;\n\nint main() {\n    int ten = 10;\n    assert( always(ten)(1,2,3,4,5) == 10 );\n}\n\n// Count all\ntemplate<class Iterator, class T>\nauto count(Iterator first, Iterator last)\n{\n    return std::count_if(first, last, always(true));\n}\n```\n\n----------------------------------------\n\nTITLE: ArangoDB Executable Installation Configuration\nDESCRIPTION: Configures installation paths and creates command aliases for the ArangoDB server executable\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY \"${PROJECT_BINARY_DIR}/bin/\")\n\ninstall(\n  TARGETS ${BIN_ARANGOD}\n  RUNTIME DESTINATION ${CMAKE_INSTALL_SBINDIR}\n)\n\ninstall_command_alias(${BIN_ARANGOD}\n  ${CMAKE_INSTALL_SBINDIR}\n  arango-secure-installation\n)\n\ninstall_command_alias(${BIN_ARANGOD}\n  ${CMAKE_INSTALL_SBINDIR}\n  arango-init-database\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Snappy Benchmarks in CMake\nDESCRIPTION: Configures the Snappy benchmark executable and integrates the Google Benchmark library for performance testing.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/snappy/snappy-1.1.9/CMakeLists.txt#2025-04-22_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\nif(SNAPPY_BUILD_BENCHMARKS)\n  add_executable(snappy_benchmark \"\")\n  target_sources(snappy_benchmark\n    PRIVATE\n      \"snappy_benchmark.cc\"\n  )\n  target_link_libraries(snappy_benchmark snappy_test_support benchmark_main)\n\n  # This project uses Google benchmark for benchmarking.\n  set(BENCHMARK_ENABLE_TESTING OFF CACHE BOOL \"\" FORCE)\n  set(BENCHMARK_ENABLE_EXCEPTIONS OFF CACHE BOOL \"\" FORCE)\n  add_subdirectory(\"third_party/benchmark\")\nendif(SNAPPY_BUILD_BENCHMARKS)\n```\n\n----------------------------------------\n\nTITLE: Declaring on_outcome_construction Hook for basic_outcome in C++\nDESCRIPTION: Declares a static member function hook that is called during the construction of basic_outcome objects. This hook is available in Outcome v2.2.0 and later, and is guaranteed to never throw exceptions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/policies/base/on_outcome_construction2.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nstatic void on_outcome_construction(T *, U &&, V &&) noexcept\n```\n\n----------------------------------------\n\nTITLE: Checking Error Presence in ArangoDB Implementation (C++)\nDESCRIPTION: This static method checks if an error is present in the implementation passed as an argument. It is constexpr where possible, has constant time complexity, and never throws exceptions. The function is always available and returns a boolean value.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/policies/base/has_error.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nstatic bool _has_error(Impl &&) noexcept\n```\n\n----------------------------------------\n\nTITLE: Allocator Getter for Reversible Pointer Container in C++\nDESCRIPTION: This method retrieves a copy of the allocator used by the reversible pointer container, allowing users to understand or modify the allocation strategy if necessary.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/reversible_ptr_container.rst#2025-04-22_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\nallocator_type get_allocator() const;\n```\n\n----------------------------------------\n\nTITLE: Dynamic Image View Class Definition\nDESCRIPTION: This snippet shows the definition of the 'any_image_view' class, which inherits from a variant class, allowing versatility in representing different image views at runtime. It includes various member functions to interact with image properties.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/dynamic_image.rst#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <typename ...ImageViewTypes>\nclass any_image_view : public variant<ImageViewTypes...>\n{\npublic:\n    typedef ... const_t; // immutable equivalent of this\n    typedef std::ptrdiff_t x_coord_t;\n    typedef std::ptrdiff_t y_coord_t;\n    typedef point<std::ptrdiff_t> point_t;\n    using size_type = std::size_t;\n\n    any_image_view();\n    template <typename T> explicit any_image_view(const T& obj);\n    any_image_view(const any_image_view& v);\n\n    template <typename T> any_image_view& operator=(const T& obj);\n    any_image_view&                       operator=(const any_image_view& v);\n\n    // parameters of the currently instantiated view\n    std::size_t num_channels()  const;\n    point_t     dimensions()    const;\n    size_type   size()          const;\n    x_coord_t   width()         const;\n    y_coord_t   height()        const;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket SSL Server Build in CMake\nDESCRIPTION: CMake configuration that creates an executable for an asynchronous SSL-enabled WebSocket server. Groups source files, defines the executable target, and links required dependencies including OpenSSL, Asio, and Beast libraries. The build is conditional on OpenSSL being available.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/beast/example/websocket/server/async-ssl/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif (OPENSSL_FOUND)\n    GroupSources(include/boost/beast beast)\n    GroupSources(example/common common)\n    GroupSources(example/websocket/server/async-ssl \"/\")\n\n    add_executable (websocket-server-async-ssl\n        ${BOOST_BEAST_FILES}\n        ${PROJECT_SOURCE_DIR}/example/common/server_certificate.hpp\n        Jamfile\n        websocket_server_async_ssl.cpp\n    )\n\n    set_property(TARGET websocket-server-async-ssl PROPERTY FOLDER \"example-websocket-server\")\n\n    target_link_libraries (websocket-server-async-ssl\n        OpenSSL::SSL OpenSSL::Crypto\n        lib-asio\n        lib-asio-ssl\n        lib-beast\n        )\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Pull Request Branch with Upstream Develop\nDESCRIPTION: This snippet demonstrates how to synchronize your feature branch with the main development branch using Git commands. It ensures that your work is up-to-date with the latest changes from the upstream repository.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/CONTRIBUTING.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ncd libs/gil\ngit checkout develop\ngit pull origin develop\ngit checkout feature/foo\n```\n\n----------------------------------------\n\nTITLE: Defining HasDynamicYStepTypeConcept in C++\nDESCRIPTION: This C++ concept checks if a type T has a nested type dynamic_y_step_type, which is a metafunction.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/pixel_locator.rst.txt#2025-04-22_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\n\"concept HasDynamicYStepTypeConcept<typename T>\\n  {\\n    typename dynamic_y_step_type<T>;\\n        where Metafunction<dynamic_y_step_type<T> >;\\n  };\"\n```\n\n----------------------------------------\n\nTITLE: Channel Traits Definition\nDESCRIPTION: Defines the default implementation of channel_traits for a given type T. It specifies the value_type, reference, pointer, and const_reference/pointer types associated with the channel, as well as static functions for obtaining the minimum and maximum values of the channel. It relies on std::numeric_limits to determine these min/max values.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/channel.rst#2025-04-22_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\n  template <typename T>\n  struct channel_traits\n  {\n      typedef T         value_type;\n      typedef T&        reference;\n      typedef T*        pointer;\n      typedef T& const  const_reference;\n      typedef T* const  const_pointer;\n\n      static value_type min_value() { return std::numeric_limits<T>::min(); }\n      static value_type max_value() { return std::numeric_limits<T>::max(); }\n  };\n```\n\n----------------------------------------\n\nTITLE: Configuring Sanitizers in CMake\nDESCRIPTION: Sets up CMake options to enable Address Sanitizer (ASAN) or Undefined Behavior Sanitizer (UBSAN) when building tests. These options are mutually exclusive.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/stl_interfaces/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(USE_ASAN false CACHE BOOL \"Set to true to enable -fsanitize=address when building tests.\") \nset(USE_UBSAN false CACHE BOOL \"Set to true to enable -fsanitize=undefined when building tests.\")\nif (USE_ASAN AND USE_UBSAN)\n    message(FATAL_ERROR \"USE_ASAN and USE_UBSAN must not be enabled at the same time\")\nelseif (USE_ASAN)\n    set(compile_flags -fsanitize=address)\n    set(link_flags -fsanitize=address)\n    message(\"-- Using -fsanitize=address\") \nelseif (USE_UBSAN)\n    set(compile_flags -fsanitize=undefined)\n    set(link_flags -fsanitize=undefined)\n    message(\"-- Using -fsanitize=undefined\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Unicode Symbol Range Mapping\nDESCRIPTION: Unicode code point ranges defining various symbols and their classifications including mathematical operators, arrows, brackets, and other special characters. Each line maps code points to their common classifications and descriptions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/spirit/workbench/unicode/Scripts.txt#2025-04-22_snippet_2\n\nLANGUAGE: unicode\nCODE:\n```\n214B          ; Common # Sm       TURNED AMPERSAND\n214C..214D    ; Common # So   [2] PER SIGN..AKTIESELSKAB\n214F          ; Common # So       SYMBOL FOR SAMARITAN SOURCE\n2150..215F    ; Common # No  [16] VULGAR FRACTION ONE SEVENTH..FRACTION NUMERATOR ONE\n2189          ; Common # No       VULGAR FRACTION ZERO THIRDS\n```\n\n----------------------------------------\n\nTITLE: Defining vertex_descriptor_predicate Metafunction Class\nDESCRIPTION: This C++ snippet declares a metafunction class utilizing Boost's MPL utilities to determine if a given type T is convertible to a graph's vertex descriptor type. Dependencies include Boost MPL and Boost Graph traits.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/index.rst#2025-04-22_snippet_17\n\nLANGUAGE: C++\nCODE:\n```\nstruct vertex_descriptor_predicate\n{\n    template <typename T, typename Args>\n    struct apply\n      : boost::mpl::if_<\n            boost::is_convertible<\n                T\n              , typename boost::graph_traits<\n                    typename boost::parameter::value_type<\n                        Args\n                      , graphs::graph\n                    >::type\n                >::vertex_descriptor\n            >\n          , boost::mpl::true_\n          , boost::mpl::false_\n        >\n    {\n    };\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing helper function for selecting between functions in C++\nDESCRIPTION: Two helper functions named 'which' that select between two function objects based on a compile-time boolean condition. Used internally by the conditional_kernel to delegate to the appropriate function.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/first_of.hpp.txt#2025-04-22_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <class F1, class F2>\nconstexpr const F1& which(std::true_type, const F1& f1, const F2&) noexcept\n{ \n    return f1; \n}\n\ntemplate <class F1, class F2>\nconstexpr const F2& which(std::false_type, const F1&, const F2& f2) noexcept\n{ \n    return f2; \n}\n```\n\n----------------------------------------\n\nTITLE: Checking for Compiler-Specific Features\nDESCRIPTION: Performs checks for various compiler-specific features and intrinsics, such as __builtin_expect, __builtin_ctz, and SSSE3/BMI2 support.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/snappy/snappy-1.1.9/CMakeLists.txt#2025-04-22_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(CheckCXXSourceCompiles)\ncheck_cxx_source_compiles(\"\nint main() {\n  return __builtin_expect(0, 1);\n}\" HAVE_BUILTIN_EXPECT)\n\ncheck_cxx_source_compiles(\"\nint main() {\n  return __builtin_ctzll(0);\n}\" HAVE_BUILTIN_CTZ)\n\ncheck_cxx_source_compiles(\"\n__attribute__((always_inline)) int zero() { return 0; }\n\nint main() {\n  return zero();\n}\" HAVE_ATTRIBUTE_ALWAYS_INLINE)\n\nif (NOT WINDOWS)\ncheck_cxx_source_compiles(\"\n#include <tmmintrin.h>\n\nint main() {\n  const __m128i *src = 0;\n  __m128i dest;\n  const __m128i shuffle_mask = _mm_load_si128(src);\n  const __m128i pattern = _mm_shuffle_epi8(_mm_loadl_epi64(src), shuffle_mask);\n  _mm_storeu_si128(&dest, pattern);\n  return 0;\n}\" SNAPPY_HAVE_SSSE3)\n\ncheck_cxx_source_compiles(\"\n#include <immintrin.h>\nint main() {\n  return _bzhi_u32(0, 1);\n}\" SNAPPY_HAVE_BMI2)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Graph Edge List for ArangoDB\nDESCRIPTION: This snippet defines a graph structure using an edge list format. The first line indicates the number of edges (2), and the subsequent lines represent individual edges with source and target vertex indices (0->0 and 1->0).\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/polygon/example/input_data/primary/primary_002.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n2\n0 0\n1 0\n```\n\n----------------------------------------\n\nTITLE: Example Usage with Bitset Value Categories\nDESCRIPTION: Example showing how to use the function call operator with different value categories (rvalue, lvalue, const) using std::bitset.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_38\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <std::size_t N>\n|std_bitset|_\\<N + 1> rvalue_bitset()\n{\n    return |std_bitset|_\\<N + 1>();\n}\n\ntemplate <std::size_t N>\n|std_bitset|_\\<N + 1> const rvalue_const_bitset()\n{\n    return |std_bitset|_\\<N + 1>();\n}\n\ntemplate <std::size_t N>\n|std_bitset|_\\<N + 1>& lvalue_bitset()\n{\n    static |std_bitset|_\\<N + 1> lset = |std_bitset|_\\<N + 1>();\n    return lset;\n}\n\ntemplate <std::size_t N>\n|std_bitset|_\\<N + 1> const& lvalue_const_bitset()\n{\n    static |std_bitset|_\\<N + 1> const clset = |std_bitset|_\\<N + 1>();\n    return clset;\n}\n```\n\n----------------------------------------\n\nTITLE: Building README File\nDESCRIPTION: This snippet creates a command for generating the README file from the provided markdown file. It sets the necessary dependencies to ensure the README is up-to-date.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/Documentation/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_command(\n  WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}\n  OUTPUT  ${CMAKE_SOURCE_DIR}/README\n  COMMAND ${CMAKE_SOURCE_DIR}/utils/generateREADME.sh ${CMAKE_SOURCE_DIR}/README.md ${CMAKE_SOURCE_DIR}/README\n  DEPENDS ${CMAKE_SOURCE_DIR}/README.md\n  COMMENT \"Building README\"\n  VERBATIM\n  )\n\nlist(APPEND MAN_FILES ${CMAKE_SOURCE_DIR}/README)\n```\n\n----------------------------------------\n\nTITLE: Writing an Image with Boost GIL\nDESCRIPTION: Example of writing an RGB8 image to a TIFF file using the write_view function with basic initialization.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/io.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nstd::string filename( \"image.tif\" );\nrgb8_image_t img( 640, 480 );\n\n// write data into image\n\nwrite_view( filename\n          , view( img )\n          , tiff_tag()\n          );\n```\n\n----------------------------------------\n\nTITLE: Overloading Operators for Static Function Wrappers in C++\nDESCRIPTION: Specialized operator overloads for static_function_wrapper and static_default_function adaptors, enabling infix notation with these wrapper types.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/infix.hpp.txt#2025-04-22_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\nnamespace detail {\n\ntemplate<class F>\nstruct static_function_wrapper;\n\n// Operators for static_function_wrapper adaptor\ntemplate<class T, class F>\nauto operator<(T&& x, const boost::hof::detail::static_function_wrapper<F>& f) BOOST_HOF_RETURNS\n(\n    detail::make_postfix_adaptor(BOOST_HOF_FORWARD(T)(x), boost::hof::move(f.base_function().infix_base_function()))\n);\n\ntemplate<class F>\nstruct static_default_function;\n\n// Operators for static_default_function adaptor\ntemplate<class T, class F>\nauto operator<(T&& x, const boost::hof::detail::static_default_function<F>&) BOOST_HOF_RETURNS\n(\n    detail::make_postfix_adaptor(BOOST_HOF_FORWARD(T)(x), boost::hof::move(F().infix_base_function()))\n);\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Enterprise Includes and Linking\nDESCRIPTION: This snippet conditionally adds include directories and links an additional library (`arango_rclone`) for the `arango_rocksdb` library if the `USE_ENTERPRISE` option is enabled.  Specifically, it adds the iresearch include path. This configures the library with enterprise-specific features and dependencies, such as hot backup and views flushing.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/RocksDBEngine/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif (USE_ENTERPRISE)\n  # this is required for hotbackup. Views need to be flushed.\n  target_include_directories(arango_rocksdb PUBLIC\n    ${IRESEARCH_INCLUDE})\n  target_link_libraries(arango_rocksdb\n    arango_rclone \n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Replacing Elements in Pointer Containers in C++\nDESCRIPTION: Demonstrates how to replace elements in pointer containers. The example shows replacing an element at the beginning of a container and at a specific index using the replace method.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/tutorial.rst#2025-04-22_snippet_8\n\nLANGUAGE: cpp\nCODE:\n```\nzoo_type::auto_type old_animal = zoo.replace( zoo.begin(), new monkey(\"bibi\") ); \nzoo.replace( 2, old_animal.release() ); // for random access containers\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Boost Fusion\nDESCRIPTION: This snippet specifies the include directories for the `boost_fusion` library target. The `INTERFACE` keyword means that any target linking to `boost_fusion` will automatically have these include directories added to their own include paths.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/fusion/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(boost_fusion INTERFACE include)\n```\n\n----------------------------------------\n\nTITLE: Implementing Random Access Iterator Subtraction in C++\nDESCRIPTION: This code snippet demonstrates how to implement the '-=' operator for a Random Access Traversal iterator using the '+=' operator with a negated distance.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/RandomAccessTraversal.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nreturn r += -n\n```\n\n----------------------------------------\n\nTITLE: Compiler-Specific Flags Configuration\nDESCRIPTION: Sets up compiler-specific flags and warning suppressions for MSVC and Intel compilers. Includes handling of specific warning codes and optimization flags.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/log/CMakeLists.txt#2025-04-22_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nif (CMAKE_CXX_COMPILER_ID STREQUAL \"MSVC\")\n    list(APPEND boost_log_common_private_cxxflags\n        /bigobj\n        /wd4503 # decorated name length exceeded, name was truncated\n        /wd4456 # declaration of 'A' hides previous local declaration\n        /wd4459 # declaration of 'A' hides global declaration\n        /wd4003 # not enough actual parameters for macro 'X'\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost MSM Library in CMake\nDESCRIPTION: Defines and configures the Boost MSM library as an interface library in CMake. The configuration sets minimum CMake version requirements, creates the library target, sets up include paths, and specifies all Boost library dependencies. It also conditionally includes tests if BUILD_TESTING is enabled.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/msm/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.16)\n\nproject(boost_msm VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n\nadd_library(boost_msm INTERFACE)\nadd_library(Boost::msm ALIAS boost_msm)\n\ntarget_include_directories(boost_msm INTERFACE include)\n\ntarget_link_libraries(boost_msm\n  INTERFACE\n    Boost::any\n    Boost::assert\n    Boost::bind\n    Boost::circular_buffer\n    Boost::config\n    Boost::core\n    Boost::function\n    Boost::fusion\n    Boost::mpl\n    Boost::parameter\n    Boost::phoenix\n    Boost::preprocessor\n    Boost::proto\n    Boost::serialization\n    Boost::tuple\n    Boost::type_traits\n    Boost::typeof\n)\n\nif(BUILD_TESTING AND EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/test/CMakeLists.txt\")\n\n  add_subdirectory(test)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost.Atomic Library Target\nDESCRIPTION: Sets up the Boost.Atomic library target with include directories, link dependencies, and compile definitions for different build configurations.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/atomic/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(boost_atomic ${boost_atomic_sources})\nadd_library(Boost::atomic ALIAS boost_atomic)\n\ntarget_include_directories(boost_atomic PUBLIC include)\ntarget_include_directories(boost_atomic PRIVATE src)\n\ntarget_link_libraries(boost_atomic\n    PUBLIC\n        Boost::assert\n        Boost::config\n        Boost::static_assert\n        Boost::type_traits\n    PRIVATE\n        Boost::align\n        Boost::predef\n        Boost::preprocessor\n        Threads::Threads\n)\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Source Files and Definitions Configuration\nDESCRIPTION: Configures platform-specific source files and definitions for Windows, POSIX systems, and Cygwin. Sets up necessary compiler definitions and library dependencies based on the target platform.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/log/CMakeLists.txt#2025-04-22_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nif (WIN32 OR CYGWIN)\n    list(APPEND boost_log_common_private_defines\n        BOOST_USE_WINDOWS_H\n        WIN32_LEAN_AND_MEAN\n        NOMINMAX\n        SECURITY_WIN32\n    )\n    list(APPEND boost_log_private_libs\n        ws2_32\n        mswsock\n        advapi32\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Implementing Random Access Iterator Indexing in C++\nDESCRIPTION: This code snippet shows how to implement the indexing operator for a Random Access Traversal iterator using pointer arithmetic.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/RandomAccessTraversal.rst#2025-04-22_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\n*(a + n)\n```\n\n----------------------------------------\n\nTITLE: Bidirectional Iterator Type Expression Requirements\nDESCRIPTION: Core type expressions that must be supported by Bidirectional Iterator implementations, including next/prior type operations and category specifications.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/BidirectionalIterator.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nnext<i>::type     // Returns Bidirectional Iterator\nprior<i>::type    // Returns Bidirectional Iterator\ni::category       // Returns bidirectional_iterator_tag\n```\n\n----------------------------------------\n\nTITLE: Inserting into Empty List using insert_range in C++\nDESCRIPTION: Shows how to use insert_range to insert elements into an empty list, demonstrating its functionality with edge cases.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/insert_range.rst#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\ntypedef insert_range< \n      list``0``<>\n    , end< list``0``<> >::type\n    , list<int>\n    >::type result2;\n\nBOOST_MPL_ASSERT_RELATION( size<result2>::value, ==, 1 );\n```\n\n----------------------------------------\n\nTITLE: Setting SSE Compiler Flags\nDESCRIPTION: Configures compiler-specific flags for SSE2 and SSE4.1 instruction sets across different compilers (MSVC, Intel, GCC/Clang).\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/atomic/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif (CMAKE_CXX_COMPILER_ID STREQUAL \"MSVC\")\n    if (CMAKE_SIZEOF_VOID_P EQUAL 4)\n        set(boost_atomic_sse2_cflags \"/arch:SSE2\")\n        set(boost_atomic_sse41_cflags \"/arch:SSE2\")\n    endif()\nelseif (CMAKE_CXX_COMPILER_ID STREQUAL \"Intel\")\n    if (WIN32)\n        set(boost_atomic_sse2_cflags \"/QxSSE2\")\n        set(boost_atomic_sse41_cflags \"/QxSSE4.1\")\n    else()\n        set(boost_atomic_sse2_cflags \"-xSSE2\")\n        set(boost_atomic_sse41_cflags \"-xSSE4.1\")\n    endif()\nelse()\n    set(boost_atomic_sse2_cflags \"-msse -msse2\")\n    set(boost_atomic_sse41_cflags \"-msse -msse2 -msse3 -mssse3 -msse4.1\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost Math Library Target\nDESCRIPTION: Creates and configures the boost_math interface library target with include directories and alias.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/math/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(boost_math INTERFACE)\n\nadd_library(Boost::math ALIAS boost_math)\n\ntarget_include_directories(boost_math INTERFACE include)\n```\n\n----------------------------------------\n\nTITLE: Local Subgraph Constructor\nDESCRIPTION: Constructor for local subgraph that takes a reference to a distributed graph and creates a local view\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/local_subgraph.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nlocal_subgraph(DistributedGraph& g);\n```\n\n----------------------------------------\n\nTITLE: Step Iterator Concept Definition\nDESCRIPTION: Defines the `StepIteratorConcept` for forward traversal iterators, allowing for changes to the step between adjacent values. It also includes a `MutableStepIteratorConcept` for mutable iterators.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/pixel_iterator.rst.txt#2025-04-22_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\nconcept StepIteratorConcept<boost_concepts::ForwardTraversalConcept Iterator>\n{\n  template <Integral D> void Iterator::set_step(D step);\n};\n\nconcept MutableStepIteratorConcept<boost_concepts::Mutable_ForwardIteratorConcept Iterator>\n    : StepIteratorConcept<Iterator>\n{};\n```\n\n----------------------------------------\n\nTITLE: Boost Parameter Name Definition in C++\nDESCRIPTION: These lines define named parameters using the `BOOST_PARAMETER_NAME` macro from the Boost Parameter Library. They specify parameter names (`_lrc`, `_lr`, `_rrc`, `_rr`), namespaces (`kw`), and roles (in, in_out, consume) for argument specification.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_29\n\nLANGUAGE: cpp\nCODE:\n```\n\"    |BOOST_PARAMETER_NAME|_((_lrc, kw) in(lrc))\n    |BOOST_PARAMETER_NAME|_((_lr, kw) in_out(lr))\n    |BOOST_PARAMETER_NAME|_((_rrc, kw) in(rrc))\n    |BOOST_PARAMETER_NAME|_((_rr, kw) consume(rr))\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation Options for Boost.Mp11 in CMake\nDESCRIPTION: Sets up installation options and includes BoostInstall module for handling Boost.Mp11 installation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mp11/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(BOOST_INSTALL_LAYOUT \"system\" CACHE STRING \"Installation layout (versioned, tagged, or system)\")\n\ninclude(BoostInstall)\n\nboost_install(TARGETS boost_mp11 HEADER_DIRECTORY include/)\n```\n\n----------------------------------------\n\nTITLE: Defining Swappable Concept - C++\nDESCRIPTION: This snippet defines the Swappable concept which requires that a type T can swap its values with another instance of T.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/concepts.rst.txt#2025-04-22_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\nauto concept Swappable<typename T>\n{\n    void swap(T& t, T& u);\n};\n```\n\n----------------------------------------\n\nTITLE: Definition of BOOST_MPL_AUX_LAMBDA_SUPPORT Macro in C++\nDESCRIPTION: The macro definition for BOOST_MPL_AUX_LAMBDA_SUPPORT, which takes parameters for arity, function name, and parameters. It expands to an unspecified token sequence on non-conforming compilers and to nothing on conforming ones.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/AUX_LAMBDA_SUPPORT.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n#define BOOST_MPL_AUX_LAMBDA_SUPPORT(arity, fun, params) \\\n    |unspecified-token-seq| \\\n/**/\n```\n\n----------------------------------------\n\nTITLE: Building libunwind for PowerPC64 on Linux\nDESCRIPTION: Configuration command for building libunwind specifically for PowerPC64 architecture on Linux. Sets 64-bit mode with the m64 flag for both C and C++ compilation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/libunwind/v1.7.2/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ ./configure CFLAGS=\"-g -O2 -m64\" CXXFLAGS=\"-g -O2 -m64\"\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for Boost Config Library\nDESCRIPTION: This CMake script sets up the Boost Config library project. It specifies the minimum CMake version, defines the project with version information, and creates an interface library target for Boost Config.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/config/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Copyright 2018 Mike Dev\n# Copyright 2019 Peter Dimov\n# Distributed under the Boost Software License, Version 1.0.\n# See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt\n\n# We support CMake 3.5, but prefer 3.16 policies and behavior\ncmake_minimum_required(VERSION 3.5...3.16)\n\nproject(boost_config VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n\nadd_library(boost_config INTERFACE)\nadd_library(Boost::config ALIAS boost_config)\n\ntarget_include_directories(boost_config INTERFACE include)\n```\n\n----------------------------------------\n\nTITLE: Using BOOST_OUTCOME_CO_TRYX Macro in C++ Coroutines\nDESCRIPTION: The BOOST_OUTCOME_CO_TRYX macro evaluates an expression within a coroutine, emitting the result if successful or returning a failure condition. It uses customization points for try_operation_has_value, try_operation_return_as, and try_operation_extract_value. Available only in GCC and Clang.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/macros/co_tryx.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_OUTCOME_CO_TRYX(expr)\n```\n\n----------------------------------------\n\nTITLE: Adding Testing Subdirectory if Present\nDESCRIPTION: This snippet checks if testing is enabled and if a CMakeLists.txt file exists in the test directory. If both conditions are met, it adds the test subdirectory to the project.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/dll/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(BUILD_TESTING AND EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/test/CMakeLists.txt\")\n\n  add_subdirectory(test)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating Arango Metrics Base Library\nDESCRIPTION: This CMake code snippet creates the `arango_metrics_base` static library, listing the source files that comprise it.  The library provides fundamental metric functionalities.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/Metrics/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(arango_metrics_base STATIC\n  Builder.cpp\n  Counter.cpp\n  Metric.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost Parameter Library CMake Project\nDESCRIPTION: Sets up a CMake project for the Boost Parameter library with minimum version requirements, project definition, and interface library creation\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.16)\n\nproject(boost_parameter VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n\nadd_library(boost_parameter INTERFACE)\nadd_library(Boost::parameter ALIAS boost_parameter)\n```\n\n----------------------------------------\n\nTITLE: Sort Algorithm Expression Semantics Implementation\nDESCRIPTION: Detailed implementation semantics of the sort algorithm. It shows how the algorithm recursively partitions the sequence around a pivot, sorts each partition, and then joins the results together.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/sort.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ntypedef sort<s,pred,in>::type r;\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost Serialization Installation and Tests\nDESCRIPTION: Sets up the installation rules for the libraries and conditionally includes the test subdirectory if testing is enabled. This ensures proper packaging of the libraries and optional test execution.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/serialization/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif(BOOST_SUPERPROJECT_VERSION AND NOT CMAKE_VERSION VERSION_LESS 3.13)\n  boost_install(TARGETS boost_serialization boost_wserialization VERSION ${BOOST_SUPERPROJECT_VERSION} HEADER_DIRECTORY include)\nendif()\n\nif(BUILD_TESTING AND EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/test/CMakeLists.txt\")\n\n  add_subdirectory(test)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Specializing pointee Template for Third-Party Smart Pointers\nDESCRIPTION: Example showing how to specialize the pointee template for custom smart pointer types when the default deduction fails.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/pointee.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nnamespace boost\n{\n  template <class T>\n  struct pointee<third_party_lib::smart_pointer<T> >\n  {\n      typedef T type;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Using push_back Metafunction in C++\nDESCRIPTION: This code snippet demonstrates the usage of the push_back metafunction. It creates a vector of boolean values and adds a false value to the end using push_back.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/push_back.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntypedef vector_c<bool,false,false,false,\n    true,true,true,false,false> bools;\n\ntypedef push_back<bools,false_>::type message;\n\nBOOST_MPL_ASSERT_RELATION( back<message>::type::value, ==, false );\nBOOST_MPL_ASSERT_RELATION( \n      ( count_if<message, equal_to<_1,false_> >::value ), ==, 6\n    );\n```\n\n----------------------------------------\n\nTITLE: Creating ndarrays from multidimensional arrays with non-unit strides in C++\nDESCRIPTION: This snippet creates a 3x2 ndarray from a 3x4 multidimensional byte array using specific strides in C++. It allows for selective element access and emphasize flexibility by adjusting shape and stride arguments in the function call.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/doc/numpy/tutorial/ndarray.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nuint8_t mul_data[][4] = {{1, 2, 3, 4}, {5, 6, 7, 8}, {1, 3, 5, 7}};\\nshape = p::make_tuple(3, 2);\\nstride = p::make_tuple(sizeof(uint8_t) * 2, sizeof(uint8_t));\\nnp::dtype dt1 = np::dtype::get_builtin<uint8_t>();\n```\n\nLANGUAGE: C++\nCODE:\n```\nnp::ndarray mul_data_ex = np::from_data(mul_data, dt1,\\n                                          p::make_tuple(3, 4),\\n                                          p::make_tuple(4, 1),\\n                                          p::object());\\nstd::cout << \"Original multi dimensional array :: \" << std::endl\\n          << p::extract<char const *>(p::str(mul_data_ex)) << std::endl;\n```\n\nLANGUAGE: C++\nCODE:\n```\nmul_data_ex = np::from_data(mul_data, dt1, shape, stride, p::object());\\nstd::cout << \"Selective multidimensional array :: \" << std::endl\\n          << p::extract<char const *>(p::str(mul_data_ex)) << std::endl;\n```\n\n----------------------------------------\n\nTITLE: Creating Boost Fusion Library Interface\nDESCRIPTION: This creates an interface library named `boost_fusion`.  An alias `Boost::fusion` is also created, pointing to the `boost_fusion` target. Interface libraries are used for header-only libraries or to propagate usage requirements.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/fusion/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(boost_fusion INTERFACE)\nadd_library(Boost::fusion ALIAS boost_fusion)\n```\n\n----------------------------------------\n\nTITLE: Configuring V8 Build Arguments\nDESCRIPTION: This snippet sets various V8 build arguments for MSBuild including paths, options for ICU, and other configuration flags necessary for a successful build. It specifies options like building static libraries, disabling dynamic libraries, and optimization parameters.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/v8-build/CMakeLists.txt#2025-04-22_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND V8_GYP_ARGS\n    -Dgenerator_output=${V8_TARGET_DIR}\n    -Ggenerator_output=${V8_TARGET_DIR}\n    -DINSPECTOR_ROOT=${V8_DIR}\n    --depth=.\n    -Dforce_dynamic_crt=0\n    -Dos_posix=0\n    -Dwerror=\n    -Dv8_embed_script=\n    -Dembedded_builtins_snapshot_src=\n    -Dv8_enable_handle_zapping=0\n    -Dv8_use_zlib=0\n    -Dv8_enable_webassembly=0\n    -Dv8_optimized_debug=1\n    -Dicu_use_data_file_flag=1\n    -Denable_lto=0\n    -Dcomponent=static_library\n    -Dlibrary=static_library\n    -Dicu_small=false\n    -Dicu_ver_major=73\n    -Dicu_data_in=${CMAKE_BINARY_DIR}/bin/icudt73l.dat\n    -Dicu_path=${V8_RELATIVE_SOURCE_DIR}/third_party/icu/\n    -Dicu_endianness=l\n    -Dpython=${PYTHON_EXECUTABLE}\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring C++ Standard Version in CMake\nDESCRIPTION: Sets up a CMake cache variable to select the C++ standard version for the project. It defaults to C++14.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/stl_interfaces/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(CXX_STD 14 CACHE STRING \"Set to X to enable C++X builds.\")\nmessage(\"-- Using -std=c++${CXX_STD}\")\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamic X Step Type Concept in C++\nDESCRIPTION: This C++ code snippet defines a concept 'HasDynamicXStepTypeConcept' that enforces the presence of a 'dynamic_x_step_type' metafunction. It is utilized by various pixel iterators, locators, and image views in GIL for dynamic step specification.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/pixel_iterator.rst#2025-04-22_snippet_9\n\nLANGUAGE: C++\nCODE:\n```\nconcept HasDynamicXStepTypeConcept<typename T>\n{\n  typename dynamic_x_step_type<T>;\n      where Metafunction<dynamic_x_step_type<T> >;\n};\n```\n\n----------------------------------------\n\nTITLE: Pixel Color Conversion and Equality Algorithms in Boost.GIL\nDESCRIPTION: Declarations of algorithms for copying pixels between views with color conversion and checking pixel equality between views. These include copy_and_convert_pixels with optional custom color converter and equal_pixels.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/image_view.rst#2025-04-22_snippet_15\n\nLANGUAGE: cpp\nCODE:\n```\n// Copies a view into another, color converting the pixels if needed, with the default or user-defined color converter\n// where ImageViewConcept<V1>, MutableImageViewConcept<V2>\n// V1::value_type must be convertible to V2::value_type.\ntemplate <typename V1, typename V2>\nvoid copy_and_convert_pixels(const V1& src, const V2& dst);\ntemplate <typename V1, typename V2, typename ColorConverter>\nvoid copy_and_convert_pixels(const V1& src, const V2& dst, ColorConverter ccv);\n\n// Equivalent of std::equal\n// where ImageViewConcept<V1>, ImageViewConcept<V2>, ViewsCompatibleConcept<V1,V2>\ntemplate <typename V1, typename V2>\nbool equal_pixels(const V1& view1, const V2& view2);\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Boost.QVM\nDESCRIPTION: Sets the include directories for the boost_qvm library. It specifies that the include directory should be the 'include' directory relative to the source directory, ensuring that the necessary header files are found during compilation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/qvm/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(boost_qvm INTERFACE include)\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Options for Tests and Examples\nDESCRIPTION: Provides CMake options to control building of tests and examples for the Boost Property Tree library, defaulting to test build settings\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/property_tree/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\noption(BOOST_PROPERTY_TREE_BUILD_TESTS \"Build boost::property_tree tests\" ${BUILD_TESTING})\noption(BOOST_PROPERTY_TREE_BUILD_EXAMPLES \"Build boost::property_tree examples\" ${BOOST_PROPERTY_TREE_BUILD_TESTS})\n```\n\n----------------------------------------\n\nTITLE: Defining boost_result Type Alias in C++\nDESCRIPTION: A type alias to basic_result configured with boost::system::error_code and policy::default_policy. Unlike the generic result type, this alias always references the boost edition of components.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/aliases/boost_result.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nboost_result<T, E = boost::system::error_code, NoValuePolicy = policy::default_policy<T, E, void>>\n```\n\n----------------------------------------\n\nTITLE: Example of using the decorate function adaptor in C++\nDESCRIPTION: Demonstrates how to create and use a logger decorator with the decorate function adaptor. The example shows a logger function that prints a message before calling the wrapped function, in this case a simple sum function.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/decorate.hpp.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/hof.hpp>\n#include <cassert>\n#include <iostream>\n#include <string>\nusing namespace boost::hof;\n\nstruct logger_f\n{\n    template<class F, class... Ts>\n    auto operator()(const std::string& message, F&& f, Ts&&... xs) const \n        -> decltype(f(std::forward<Ts>(xs)...))\n    {\n        // Message to print out when the function is called\n        std::cout << message << std::endl;\n        // Call the function\n        return f(std::forward<Ts>(xs)...);\n    }\n};\n// The logger decorator\nBOOST_HOF_STATIC_FUNCTION(logger) = boost::hof::decorate(logger_f());\n\nstruct sum_f\n{\n    template<class T, class U>\n    T operator()(T x, U y) const\n    {\n        return x+y;\n    }\n};\n\nBOOST_HOF_STATIC_FUNCTION(sum) = sum_f();\nint main() {\n    // Use the logger decorator to print \"Calling sum\" when the function is called\n    assert(3 == logger(\"Calling sum\")(sum)(1, 2));\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL-Enabled HTTP Server Build in CMake\nDESCRIPTION: This CMake snippet sets up the build configuration for an SSL-enabled HTTP server example. It groups source files, adds the executable, sets up folder structure, and links necessary libraries including OpenSSL, Asio, and Beast.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/beast/example/http/server/sync-ssl/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (OPENSSL_FOUND)\n    GroupSources(include/boost/beast beast)\n    GroupSources(example/common common)\n    GroupSources(example/http/server/sync-ssl \"/\")\n\n    add_executable (http-server-sync-ssl\n        ${BOOST_BEAST_FILES}\n        ${PROJECT_SOURCE_DIR}/example/common/server_certificate.hpp\n        Jamfile\n        http_server_sync_ssl.cpp\n    )\n\n    set_property(TARGET http-server-sync-ssl PROPERTY FOLDER \"example-http-server\")\n    \n    target_link_libraries (http-server-sync-ssl\n        OpenSSL::SSL OpenSSL::Crypto\n        lib-asio\n        lib-asio-ssl\n        lib-beast\n        )\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining NullaryFunctionObject Concept in C++\nDESCRIPTION: Defines a concept for an object with a const call operator that accepts no parameters. This concept must satisfy the ConstFunctionObject requirements and support a parameter-less function call.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/doc/src/concepts.md.txt#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nconcept NullaryFunctionObject\n{\n    auto operator()() const;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost UUID Library with CMake\nDESCRIPTION: Sets up the Boost UUID library as an interface library with its dependencies and include directories. It also configures testing if enabled.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/uuid/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.16)\n\nproject(boost_uuid VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n\nadd_library(boost_uuid INTERFACE)\nadd_library(Boost::uuid ALIAS boost_uuid)\n\ntarget_include_directories(boost_uuid INTERFACE include)\n\ntarget_link_libraries(boost_uuid\n  INTERFACE\n    Boost::assert\n    Boost::config\n    Boost::container_hash\n    Boost::core\n    Boost::io\n    Boost::move\n    Boost::numeric_conversion\n    Boost::predef\n    Boost::random\n    Boost::serialization\n    Boost::static_assert\n    Boost::throw_exception\n    Boost::tti\n    Boost::type_traits\n    Boost::winapi\n)\n\nif(BUILD_TESTING AND EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/test/CMakeLists.txt\")\n\n  add_subdirectory(test)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Invoking Constructor with Named Parameters in C++\nDESCRIPTION: Shows how to invoke a constructor that uses BOOST_PARAMETER_NO_SPEC_NO_BASE_CONSTRUCTOR by binding all arguments to named parameters.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_94\n\nLANGUAGE: C++\nCODE:\n```\nD dp0(\n    _rr0 = rvalue_bitset<3>()\n  , _lrc0 = lvalue_const_bitset<0>()\n  , _lr0 = lvalue_bitset<1>()\n  , _rrc0 = rvalue_const_bitset<2>()\n);\nD dp1(\n    _lr0 = lvalue_bitset<1>()\n  , _lrc0 = lvalue_const_bitset<0>()\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Counting Iterator Template in C++\nDESCRIPTION: Declares a class template for counting_iterator, which generates a sequence of values by repeatedly incrementing an initial value, useful for generating ranges of numbers.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/facade-and-adaptor.rst#2025-04-22_snippet_8\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <\n    class Incrementable\n  , class CategoryOrTraversal  = use_default\n  , class Difference = use_default\n>\nclass counting_iterator;\n```\n\n----------------------------------------\n\nTITLE: Extracting Named Parameters from Argument Packs in C++\nDESCRIPTION: This snippet demonstrates how to use ParameterSpec to bundle arguments into an ArgumentPack and then extract logical parameters using value_type metafunction. It shows how to specify default values for optional parameters in a class template.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/index.rst#2025-04-22_snippet_32\n\nLANGUAGE: C++\nCODE:\n```\nnamespace boost { namespace python {\n\n    template <\n        typename A0\n      , typename A1 = boost::parameter::void_\n      , typename A2 = boost::parameter::void_\n      , typename A3 = boost::parameter::void_\n    >\n    struct class_\n    {\n        // Create ArgumentPack\n        typedef typename class_signature::template bind<\n            A0, A1, A2, A3\n        >::type args;\n\n        // Extract first logical parameter.\n        typedef typename parameter::value_type<\n            args, tag::class_type\n        >::type class_type;\n\n        typedef typename parameter::value_type<\n            args, tag::base_list, bases<>\n        >::type base_list;\n\n        typedef typename parameter::value_type<\n            args, tag::held_type, class_type\n        >::type held_type;\n\n        typedef typename parameter::value_type<\n            args, tag::copyable, void\n        >::type copyable;\n    };\n}}\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Contains in C++\nDESCRIPTION: Demonstration of using the 'contains' algorithm to check if a vector of types contains a specific type (bool in this case).\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/contains.rst#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\ntypedef vector<char,int,unsigned,long,unsigned long> types;\nBOOST_MPL_ASSERT_NOT(( contains<types,bool> ));\n```\n\n----------------------------------------\n\nTITLE: Expression Semantics for Contains in C++\nDESCRIPTION: Semantic representation of using the 'contains' algorithm, which is equivalent to checking if the result of 'find' is not the end of the sequence.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/contains.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntypedef contains<s,t>::type r;\n```\n\n----------------------------------------\n\nTITLE: Configuring ArangoDB Async Registry Library Build\nDESCRIPTION: Creates a static library for ArangoDB's async registry component with source files, include paths, and library dependencies. Links against arango_assertions privately and arango_metrics_base publicly.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/lib/Async/Registry/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(arango_async_registry STATIC\n  promise.cpp\n  registry.cpp\n  registry_variable.cpp\n  thread_registry.cpp)\ntarget_include_directories(arango_async_registry PRIVATE\n  ${PROJECT_SOURCE_DIR}/arangod)\ntarget_link_libraries(arango_async_registry\n  PRIVATE\n  arango_assertions\n  PUBLIC\n  arango_metrics_base)\n```\n\n----------------------------------------\n\nTITLE: Creating arangodbtests_futures Executable\nDESCRIPTION: Creates an executable named `arangodbtests_futures`, and specifies that it should be excluded from the default build targets using `EXCLUDE_FROM_ALL`. This likely indicates that it is a test executable and is built separately when running tests.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/Futures/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(arangodbtests_futures EXCLUDE_FROM_ALL)\n```\n\n----------------------------------------\n\nTITLE: Defining the apply0 Metafunction Template in C++\nDESCRIPTION: Template definition for apply0, which invokes a Metafunction Class with no arguments. It takes a single template parameter F and produces a type member.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/apply.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate< \n      typename F\n    >\nstruct apply0\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: at_c Usage Example in C++\nDESCRIPTION: Demonstrates practical usage of the at_c metafunction with a range of long integers, showing how to access values at different positions in the sequence and verify them using the BOOST_MPL_ASSERT_RELATION macro.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/at_c.rst#2025-04-22_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\ntypedef range_c<long,10,50> range;\nBOOST_MPL_ASSERT_RELATION( (at_c< range,0 >::type::value), ==, 10 );\nBOOST_MPL_ASSERT_RELATION( (at_c< range,10 >::type::value), ==, 20 );\nBOOST_MPL_ASSERT_RELATION( (at_c< range,40 >::type::value), ==, 50 );\n```\n\n----------------------------------------\n\nTITLE: Example of Applying Binary Ufunc\nDESCRIPTION: An example shows applying a defined `BinarySquare` functor to compute square of a list through binary ufunc. It involves creating a class in Python using Boost.Python, defining `__call__` for the functor execution, and executing it with input arrays.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/doc/numpy/reference/binary_ufunc.rst#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\nnamespace p = boost::python;\nnamespace np = boost::python::numpy;\n\nstruct BinarySquare\n{\n  typedef double first_argument_type;\n  typedef double second_argument_type;\n  typedef double result_type;\n\n  double operator()(double a,double b) const { return (a*a + b*b) ; }\n};\n\np::object ud = p::class_<BinarySquare, boost::shared_ptr<BinarySquare> >(\"BinarySquare\").def(\"__call__\", np::binary_ufunc<BinarySquare>::make());\np::object inst = ud();\nresult_array = inst.attr(\"__call__\")(demo_array,demo_array) ;\nstd::cout << \"Square of list with binary ufunc is \" << p::extract <char const * > (p::str(result_array)) << std::endl ;\n```\n\n----------------------------------------\n\nTITLE: Declaring bind Metafunction Templates in C++\nDESCRIPTION: Declares template structs for bind0, bind1, and bindn metafunctions. These are used for metafunction class composition and argument binding in Boost MPL.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/bind.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate< \n    typename F\n>\nstruct bind0\n{\n    // |unspecified|\n    // |...|\n};\n\ntemplate< \n    typename F, typename A1\n>\nstruct bind1\n{\n    // |unspecified|\n    // |...|\n};\n\n|...|\n\ntemplate< \n    typename F, typename A1,\\ |...| typename An\n>\nstruct bind\\ *n*\n{\n    // |unspecified|\n    // |...|\n};\n\ntemplate< \n    typename F\n  , typename A1 = |unspecified|\n  |...|\n  , typename An = |unspecified|\n  >\nstruct bind\n{\n    // |unspecified|\n    // |...|\n};\n```\n\n----------------------------------------\n\nTITLE: Defining target sources for ArangoDB replication2 pure tests\nDESCRIPTION: This CMake command defines the source files that will be used to build the `arango_tests_replication2_pure` target. It specifies `LogPersistorTest.cpp` and `RecordTest.cpp` as the source files to be included in the build process.  The `PRIVATE` keyword indicates that these sources are only used within this target and not exposed to other targets.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/Replication2/Storage/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(arango_tests_replication2_pure PRIVATE\nLogPersistorTest.cpp\nRecordTest.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: ptr_multiset_adapter::transfer(iterator first, iterator last, ptr_multiset_adapter& from) Method\nDESCRIPTION: Describes the behavior of the `transfer(iterator first, iterator last, ptr_multiset_adapter& from)` method. It moves elements within the range `[first, last)` from the `from` container to the current container.  The size of the current container increases by the number of transferred elements, while the size of `from` decreases by the same amount.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/ptr_multiset_adapter.rst#2025-04-22_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\nvoid transfer( iterator first, iterator last, ptr_multiset_adapter& from );\n```\n\n----------------------------------------\n\nTITLE: CMake Project Configuration\nDESCRIPTION: This snippet initializes the CMake project named boost_rational, specifying the minimum required CMake version and project language. It sets the project version using a variable BOOST_SUPERPROJECT_VERSION.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/rational/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n\"cmake_minimum_required(VERSION 3.5...3.16)\n\nproject(boost_rational VERSION \\\"${BOOST_SUPERPROJECT_VERSION}\\\" LANGUAGES CXX)\"\n```\n\n----------------------------------------\n\nTITLE: Adding Boost Graph Parallel Library\nDESCRIPTION: Adds the boost_graph_parallel library, specifying the source files used to build it.  The source files, mpi_process_group.cpp and tag_allocator.cpp, will be compiled into the library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(boost_graph_parallel\n  src/mpi_process_group.cpp\n  src/tag_allocator.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for HTTP Client Sync Example\nDESCRIPTION: Configures CMake build settings for a synchronous HTTP client example. Groups source files, creates executable target, links required libraries, and sets project folder structure. Uses Boost.Beast and Asio as dependencies.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/beast/example/http/client/sync/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nGroupSources(include/boost/beast beast)\nGroupSources(example/http/client/sync \"/\")\n\nadd_executable (http-client-sync\n    ${BOOST_BEAST_FILES}\n    Jamfile\n    http_client_sync.cpp\n)\n\ntarget_link_libraries(http-client-sync\n    lib-asio\n    lib-beast)\n\nset_property(TARGET http-client-sync PROPERTY FOLDER \"example-http-client\")\n```\n\n----------------------------------------\n\nTITLE: Using sizeof_ Metafunction with size_t in C++\nDESCRIPTION: Semantic equivalent of the sizeof_ metafunction, showing how it wraps the sizeof result in a size_t Integral Constant.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/sizeof_.rst#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\ntypedef size_t< sizeof(x) > n;\n```\n\n----------------------------------------\n\nTITLE: Example Usage of BOOST_PARAMETER_CONST_MEMBER_FUNCTION in C++\nDESCRIPTION: Demonstrates an example usage of Boost Parameter Library with value category detection for std::bitset objects, showing how to handle different value categories (lvalue/rvalue references).\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_25\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <std::size_t N>\n|std_bitset|_\\<N + 1> rvalue_bitset()\n{\n    return |std_bitset|_\\<N + 1>();\n}\n\ntemplate <std::size_t N>\n|std_bitset|_\\<N + 1> const rvalue_const_bitset()\n{\n    return |std_bitset|_\\<N + 1>();\n}\n\ntemplate <std::size_t N>\n|std_bitset|_\\<N + 1>& lvalue_bitset()\n{\n    static |std_bitset|_\\<N + 1> lset = |std_bitset|_\\<N + 1>();\n    return lset;\n}\n\ntemplate <std::size_t N>\n|std_bitset|_\\<N + 1> const& lvalue_const_bitset()\n{\n    static |std_bitset|_\\<N + 1> const clset = |std_bitset|_\\<N + 1>();\n    return clset;\n}\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Variant Implementations with VS 2017 (Unoptimized)\nDESCRIPTION: Compile time and run time benchmarks for variant2, boost::variant, and std::variant using VS 2017 with /Od optimization level. Shows compilation times and execution times for 100 million iterations.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/variant2/benchmark/benchmark2.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n      variant2 (-DONLY_V2): 1403 ms\nboost::variant (-DONLY_BV): 2972 ms\n  std::variant (-DONLY_SV): 1057 ms\n```\n\nLANGUAGE: text\nCODE:\n```\nN=100000000:\n        prefix:   7016 ms; S=416666583333336\n      variant2:  24723 ms; S=416666583333336\nboost::variant:  60438 ms; S=416666583333336\n  std::variant:  20707 ms; S=416666583333336\n```\n\n----------------------------------------\n\nTITLE: Grid Coordinate Initialization Data in ArangoDB\nDESCRIPTION: A structured set of numeric values representing grid coordinates or positions. The file begins with dimension values (2, 0 0, 1 6) followed by a count (8) and eight sets of coordinate pairs that likely define points or connections in a grid system.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/polygon/example/input_data/primary/primary_027.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n2\n0 0\n1 6\n8\n-6 5 2 -7\n3 -11 13 -1\n-4 5 5 -1\n4 4 11 4\n4 4 8 10\n11 4 8 10\n8 10 5 13\n8 10 11 13\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on Ubuntu\nDESCRIPTION: Commands to install required dependencies for S2 Geometry Library on Ubuntu using apt-get.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/s2geometry/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install cmake libgflags-dev libgoogle-glog-dev libgtest-dev libssl-dev\n```\n\n----------------------------------------\n\nTITLE: Adding Dependency on jemalloc Build\nDESCRIPTION: If jemalloc is used, this snippet adds a dependency for 'arangodbtests-iresearch' on the 'jemalloc_build', ensuring that jemalloc is built before these tests.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/IResearch/CMakeLists.txt#2025-04-22_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nif (USE_JEMALLOC)\\\n  add_dependencies(arangodbtests-iresearch jemalloc_build)\\\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Iterators with make_multi_iter\nDESCRIPTION: This snippet includes the make_multi_iter function overloads which create instances of multi_iter, allowing users to pass one to three sequences for iteration. It returns a multi_iter object that can iterate over the provided input sequences.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/doc/numpy/reference/multi_iter.rst#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nmulti_iter make_multi_iter(object const & a1); \nmulti_iter make_multi_iter(object const & a1, object const & a2); \nmulti_iter make_multi_iter(object const & a1, object const & a2, object const & a3);\n```\n\n----------------------------------------\n\nTITLE: Configuring Scope Name Sorting in Doxygen\nDESCRIPTION: This option specifies whether the class list is sorted by fully-qualified names, including namespaces. Setting it to YES will sort by fully-qualified names.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/sort/doc/doxygen/sort_doxyfile.txt#2025-04-22_snippet_47\n\nLANGUAGE: Doxygen\nCODE:\n```\n\"SORT_BY_SCOPE_NAME     = NO\"\n```\n\n----------------------------------------\n\nTITLE: Boruvka Then Merge Function Declaration in C++\nDESCRIPTION: This code snippet declares the `boruvka_then_merge` function. It takes a graph, a weight map, and an output iterator as input and returns an output iterator. The purpose of this function is to apply both Boruvka steps and local MSF merging steps to achieve better asymptotic performance for MST computation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/dehne_gotz_min_spanning_tree.rst#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\nnamespace {\n    template<typename Graph, typename WeightMap, typename OutputIterator>\n    OutputIterator\n    boruvka_then_merge(const Graph& g, WeightMap weight, OutputIterator out);\n  }\n```\n\n----------------------------------------\n\nTITLE: Conditional Compile Definitions for Shared/Static Library\nDESCRIPTION: Conditionally sets compile definitions based on whether the library is built as a shared or static library.  If BUILD_SHARED_LIBS is true, BOOST_GRAPH_PARALLEL_DYN_LINK is defined. Otherwise, BOOST_GRAPH_PARALLEL_STATIC_LINK is defined.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/CMakeLists.txt#2025-04-22_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nif(BUILD_SHARED_LIBS)\n  target_compile_definitions(boost_graph_parallel PUBLIC BOOST_GRAPH_PARALLEL_DYN_LINK)\nelse()\n  target_compile_definitions(boost_graph_parallel PUBLIC BOOST_GRAPH_PARALLEL_STATIC_LINK)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining BOOST_MPL_CFG_NO_PREPROCESSED_HEADERS Configuration Macro in C++\nDESCRIPTION: An example showing how to define the BOOST_MPL_CFG_NO_PREPROCESSED_HEADERS macro. When defined, it instructs the MPL library to discard pre-generated headers in the boost/mpl/aux_/preprocessed directory and generate library components on the fly using preprocessor metaprogramming techniques.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/CFG_NO_PREPROCESSED.rst#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n// #define BOOST_MPL_CFG_NO_PREPROCESSED_HEADERS\n```\n\n----------------------------------------\n\nTITLE: Development with autogen.sh\nDESCRIPTION: This snippet describes the usage of autogen.sh script rather than 'configure' when making non-trivial changes to jemalloc, it enables the re-generation of 'configure'.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/jemalloc/jemalloc/INSTALL.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n\"autoconf\nmkdir obj\ncd obj\n../configure --enable-autogen\nmake\"\n```\n\n----------------------------------------\n\nTITLE: Creating Variadic Print Function with proj Adaptor in C++\nDESCRIPTION: Extends the print function to handle multiple arguments using the proj adaptor.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/src/example_print.md#2025-04-22_snippet_7\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_HOF_STATIC_LAMBDA_FUNCTION(simple_print) = fix(first_of(\n    [](auto, const auto& x) -> decltype(std::cout << x, void())\n    {\n        std::cout << x << std::endl;\n    },\n    [](auto self, const auto& range) -> decltype(self(*adl::adl_begin(range)), void())\n    {\n        for(const auto& x:range) self(x);\n    },\n    [](auto self, const auto& tuple)\n    {\n        return for_each_tuple(tuple, self);\n    }\n));\n```\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_HOF_STATIC_LAMBDA_FUNCTION(print) = proj(simple_print);\n```\n\n----------------------------------------\n\nTITLE: Declaring inherit Template Metafunction in C++\nDESCRIPTION: Declaration of the inherit template metafunction for 2 and n parameters. It returns an unspecified class type derived from the provided base classes, with special handling for empty_base optimization.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/inherit.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      typename T1, typename T2\n    >\nstruct inherit2\n{\n    typedef |unspecified| type;\n};\n\n|...|\n\ntemplate<\n      typename T1, typename T2,|...| typename T*n*\n    >\nstruct inherit*n*\n{\n    typedef |unspecified| type;\n};\n\ntemplate<\n      typename T1\n    , typename T2\n    |...|\n    , typename T*n* = |unspecified|\n    >\nstruct inherit\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Transform Iterator with Default Function in C++\nDESCRIPTION: This function creates a transform_iterator with a default-constructed unary function and an iterator. It initializes m_f with a default-constructed function and m_iterator with the given iterator.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/make_transform_iterator.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <class UnaryFunction, class Iterator>\ntransform_iterator<UnaryFunction, Iterator>\nmake_transform_iterator(Iterator it);\n```\n\n----------------------------------------\n\nTITLE: Implementing Associative Pointer Container Class Template in C++\nDESCRIPTION: Template class definition for associative_ptr_container that provides common operations for associative pointer containers. It includes typedefs, observers, modifiers and algorithm methods for managing pointer-based collections.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/associative_ptr_container.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nnamespace boost\n{\n    template\n    < \n        class Key, \n        class CloneAllocator = heap_clone_allocator \n    >\n    class associative_ptr_container \n    {\n    public: // typedefs\n        typedef ...   key_type;\n        typedef ...   key_compare;\n        typedef ...   value_compare;\n\n    public: // observers\n        key_compare    key_comp() const;\n        value_compare  value_comp() const;\n\n    public: // modifiers         \n        template< typename InputIterator >\n        void       insert( InputIterator first, InputIterator last );     \n        template< class InputRange >\n        void       insert( const InputRange& r );\n        void       erase( iterator position ); \n        size_type  erase( const key_type& x );\n        template< class Range >\n        void       erase( const Range& r );\n        void       erase( iterator first, iterator last );\n\n    public: // algorithms\n        iterator                        find( const key_type& x );\n        const_iterator                  find( const key_type& x ) const;\n        size_type                       count( const key_type& x ) const;              \n        iterator                        lower_bound( const key_type& x );                     \n        const_iterator                  lower_bound( const key_type& x ) const;\n        iterator                        upper_bound( const key_type& x );                           \n        const_iterator                  upper_bound( const key_type& x ) const;\n        iterator_range<iterator>        equal_range( const key_type& x );                 \n        iterator_range<const_iterator>  equal_range( const key_type& x ) const;\n     \n    }; //  class 'associative_ptr_container'\n    \n} // namespace 'boost'\n```\n\n----------------------------------------\n\nTITLE: Defining if_c Metafunction Template in C++\nDESCRIPTION: Definition of the if_c metafunction template that selects between two types based on a boolean condition. It takes a boolean constant and two types as parameters, returning one of the types based on the condition.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/if_c.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate< \n    bool c\n  , typename T1\n  , typename T2\n>\nstruct if_c\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Declaring Move Construction Hook Function in C++\nDESCRIPTION: Declaration of the legacy hook function for move construction in basic_outcome. This function was removed in Outcome v2.2.0 but can be enabled for backward compatibility. It is invoked during the converting move construction of basic_outcome objects.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/functions/hooks/hook_outcome_move_construction.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nvoid hook_outcome_move_construction(T *, U &&) noexcept\n```\n\n----------------------------------------\n\nTITLE: Defining bool_ Template in C++\nDESCRIPTION: This snippet shows the definition of the bool_ template struct and its typedefs for true_ and false_. It wraps a boolean integral constant.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/bool_.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      bool C\n    >\nstruct bool_\n{\n    // |unspecified|\n    // ...\n};\n\ntypedef bool_<true>  true_;\ntypedef bool_<false> false_;\n```\n\n----------------------------------------\n\nTITLE: Defining Backend Class Templates with Parameter Requirements in C++\nDESCRIPTION: Example showing backend class templates that require specific parameters to be present in the argument pack. Each backend stores its own parameter and exposes a getter method.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_84\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <typename T>\nclass backend0\n{\n    T a0;\n\n public:\n    backend0() : a0()\n    {\n    }\n\n    T const& get_a0() const\n    {\n        return this->a0;\n    }\n\n protected:\n    template <typename ArgPack>\n    void initialize_impl(ArgPack const& args)\n    {\n        this->a0 = args[_a0];\n    }\n};\n\ntemplate <typename B, typename T>\nclass backend1 : public B\n{\n    T a1;\n\n public:\n    backend1() : B(), a1()\n    {\n    }\n\n    T const& get_a1() const\n    {\n        return this->a1;\n    }\n\n protected:\n    template <typename ArgPack>\n    void initialize_impl(ArgPack const& args)\n    {\n        B::initialize_impl(args);\n        this->a1 = args[_a1];\n    }\n};\n\ntemplate <typename B, typename T>\nclass backend2 : public B\n{\n    T a2;\n\n public:\n    backend2() : B(), a2()\n    {\n    }\n\n    T const& get_a2() const\n    {\n        return this->a2;\n    }\n\n protected:\n    template <typename ArgPack>\n    void initialize_impl(ArgPack const& args)\n    {\n        B::initialize_impl(args);\n        this->a2 = args[_a2];\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Code Coverage in CMake\nDESCRIPTION: Sets up a CMake option to enable code coverage when building tests on Unix systems (Linux and macOS). It configures the necessary compiler and linker flags for coverage.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/stl_interfaces/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif (UNIX)\n    set(BUILD_COVERAGE false CACHE BOOL \"Set to true to enable code coverage when building tests.  Only Linux and Mac are supported.\")\n    if (BUILD_COVERAGE)\n        message(\"-- Building for code coverage; disabling any sanitizers\")\n        if (APPLE)\n            set(compile_flags -fprofile-arcs -ftest-coverage)\n            set(CMAKE_BUILD_TYPE Debug)\n            set(link_flags --coverage)\n        else ()\n            set(compile_flags --coverage)\n            set(CMAKE_BUILD_TYPE Debug)\n            set(link_flags --coverage)\n        endif ()\n    endif ()\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Using BOOST_OUTCOME_TRYX_FAILURE_LIKELY Macro\nDESCRIPTION: A macro that evaluates expressions returning success/failure types. On success, emits T; on failure, returns try_operation_return_as(X). Includes compiler hints indicating likely failure. Available only in GCC and Clang. Located in boost/outcome/try.hpp header.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/macros/tryx_failure_likely.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_OUTCOME_TRYX_FAILURE_LIKELY(expr)\n```\n\nLANGUAGE: C++\nCODE:\n```\nauto x = y + BOOST_OUTCOME_TRYX(foo(z));\n```\n\n----------------------------------------\n\nTITLE: Adding Test Subdirectory\nDESCRIPTION: This snippet conditionally adds the `test` subdirectory to the build if testing is enabled (`BUILD_TESTING` is true) and a `CMakeLists.txt` file exists in the `test` directory. This allows for including unit tests in the build process.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/property_map_parallel/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(BUILD_TESTING AND EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/test/CMakeLists.txt\")\n\n  add_subdirectory(test)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Implicit Conversion Failure with outcome::result in C++\nDESCRIPTION: This code demonstrates that implicit conversion from `outcome::result<int, std::errc>` to `outcome::result<int, std::error_code>` is not allowed. It showcases the scenario where explicit construction of the return value is required due to the non-trivial conversion between `std::errc` and `std::error_code`.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/tutorial/essential/result/try_greedy.md#2025-04-22_snippet_0\n\nLANGUAGE: c++\nCODE:\n```\n```c++\noutcome::result<int, std::error_code> test(outcome::result<int, std::errc> r)\n{\n    return r;  // you need to use explicit construction here\n    // i.e. return outcome::result<int>(r);\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Creating and Setting Global Locale with Boost.Locale Generator in C++\nDESCRIPTION: Demonstrates how to create a generator object and set the system default locale as the global locale. This is the simplest way to use the generator class.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/doc/locale_gen.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/locale.hpp>\n\nusing namespace boost::locale;\nint main()\n{\n    generator gen;\n    // Create locale generator \n    std::locale::global(gen(\"\")); \n    // \"\" - the system default locale, set\n    // it globally\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading from Boost v. 1.33.* - Map Iterator Example\nDESCRIPTION: Demonstrates the change in map iterator syntax between Boost versions, showing how to access keys and values in pointer containers\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/ptr_container.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n// Old syntax\nfor( boost::ptr_map<std::string,T>::iterator i = m.begin(), e = m.end();\n     i != e; ++i )\n{\n  std::cout << \"key:\" << i.key();\n  std::cout << \"value:\" << *i;\n  i->foo(); // call T::foo()\n}\n```\n\nLANGUAGE: C++\nCODE:\n```\n// New syntax\nfor( boost::ptr_map<std::string,T>::iterator i = m.begin(), e = m.end();\n     i != e; ++i )\n{\n  std::cout << \"key:\" << i->first;\n  std::cout << \"value:\" << *i->second;\n  i->second->foo(); // call T::foo()\n}\n```\n\n----------------------------------------\n\nTITLE: Constructors of R-MAT Iterator Class in C++\nDESCRIPTION: This snippet describes the constructors of the rmat_iterator class. The first constructor initializes a past-the-end iterator, while the second one sets up an R-MAT generator with parameters defining the graph's structure and edge distribution probabilities.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/rmat_generator.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nrmat_iterator();\n\n// Constructs a past-the-end iterator.\n\nrmat_iterator(RandomGenerator& gen, vertices_size_type n, \n              edges_size_type m, double a, double b, double c, \n              double d, bool permute_vertices = true);\n\n// Constructs an R-MAT generator iterator that creates a graph with ``n``\n// vertices and ``m`` edges.  ``a``, ``b``, ``c``, and ``d`` represent\n// the probability that a generated edge is placed of each of the 4\n// quadrants of the partitioned adjacency matrix.  Probabilities are\n// drawn from the random number generator gen.  Vertex indices are\n// permuted to eliminate locality when ``permute_vertices`` is true.\n```\n\n----------------------------------------\n\nTITLE: Coordinate Data Input for ArangoDB Testing\nDESCRIPTION: This plaintext data represents 5 coordinate pairs in a format often used for geometric testing. The first line specifies the total count (5), followed by each x-y coordinate pair on separate lines.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/polygon/example/input_data/primary/primary_057.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n5\n-4 -4\n-6 0\n-2 2\n0 4\n-10 2\n```\n\n----------------------------------------\n\nTITLE: Defining the Clear Metafunction Template in C++\nDESCRIPTION: This code snippet defines the template structure for the 'clear' metafunction. It takes a Sequence type parameter and defines an unspecified type alias.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/clear.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      typename Sequence\n    >\nstruct clear\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Stringify with Traditional Metaprogramming\nDESCRIPTION: Traditional metaprogramming approach to implement a stringify function using SFINAE and type traits to conditionally call std::to_string or fallback to stringstream.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/src/example_overloading.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate<class T>\nusing to_string_t = decltype(std::to_string(std::declval<T>()));\n\ntemplate<class T>\nusing has_to_string = std::experimental::is_detected<to_string_t, T>;\n\ntemplate<typename T> \ntypename std::enable_if<has_to_string<T>{}, std::string>::type \nstringify(T t)\n{\n    return std::to_string(t);\n}\ntemplate<typename T> \ntypename std::enable_if<!has_to_string<T>{}, std::string>::type \nstringify(T t)\n{\n    return static_cast<std::ostringstream&>(std::ostringstream() << t).str();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Jemalloc for Extreme Memory Conservation\nDESCRIPTION: Ultra-conservative jemalloc configuration that minimizes memory usage at the expense of performance. Disables thread caching completely and returns memory to the OS immediately. Only suitable for applications with very infrequent allocation activity.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/jemalloc/jemalloc/TUNING.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnarenas:1,tcache:false,dirty_decay_ms:0,muzzy_decay_ms:0\n```\n\n----------------------------------------\n\nTITLE: Configuring Testing Options in CMake for Boost.Mp11\nDESCRIPTION: Sets up testing options and fetches necessary Boost dependencies for testing when BUILD_TESTING is enabled.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mp11/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\noption(BUILD_TESTING \"Build the tests.\" OFF)\ninclude(CTest)\n\nif(BUILD_TESTING)\n\n  set(BUILD_TESTING OFF) # hide cache variable\n\n  boost_fetch(boostorg/assert TAG develop EXCLUDE_FROM_ALL)\n  boost_fetch(boostorg/config TAG develop EXCLUDE_FROM_ALL)\n  boost_fetch(boostorg/core TAG develop EXCLUDE_FROM_ALL)\n  boost_fetch(boostorg/static_assert TAG develop EXCLUDE_FROM_ALL)\n  boost_fetch(boostorg/throw_exception TAG develop EXCLUDE_FROM_ALL)\n\n  unset(BUILD_TESTING)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Non-Assignable Value Type Example - C++\nDESCRIPTION: Example class demonstrating a value type with private assignment operator that causes issues with writability traits\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/issues.rst#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nclass B {\npublic:\n  ...\nprivate:\n  B& operator=(const B&);\n};\n```\n\n----------------------------------------\n\nTITLE: default_color_map Function Template for Color Map Defaults\nDESCRIPTION: This function template creates and returns a default color map, valid for use in graph traversal algorithms. It initializes a static vector of colors and maps it using an index map. Input parameters include the number of vertices and the index map.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/index.rst#2025-04-22_snippet_21\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <typename Size, typename IndexMap>\nboost::iterator_property_map<\n    std::vector<boost::default_color_type>::iterator\n  , IndexMap\n  , boost::default_color_type\n  , boost::default_color_type&\n>&\n    default_color_map(Size num_vertices, IndexMap const& index_map)\n{\n    static std::vector<boost::default_color_type> colors(num_vertices);\n    static boost::iterator_property_map<\n        std::vector<boost::default_color_type>::iterator\n      , IndexMap\n      , boost::default_color_type\n      , boost::default_color_type&\n    > m(colors.begin(), index_map);\n    return m;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up a toctree for Boost HOF Functions in RST\nDESCRIPTION: Creates a table of contents tree in reStructuredText format that links to various Boost HOF function documentation pages. The tree is configured with a maximum depth of 1 and references paths to include files for specific functions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/doc/src/functions.rst.txt#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :maxdepth: 1\n    \n    ../../include/boost/hof/always\n    ../../include/boost/hof/arg\n    ../../include/boost/hof/construct\n    ../../include/boost/hof/decay\n    ../../include/boost/hof/identity\n    ../../include/boost/hof/placeholders\n```\n\n----------------------------------------\n\nTITLE: Loading Pickled C++ Objects in Python\nDESCRIPTION: Python code showing how to load previously pickled C++ objects, potentially on a different system or in a different script.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/doc/article.rst#2025-04-22_snippet_21\n\nLANGUAGE: Python\nCODE:\n```\n>>> import pickle\n>>> resurrected_world = pickle.load(open(\"my_world\", \"r\"))\n>>> resurrected_world.greet()\n'howdy'\n```\n\n----------------------------------------\n\nTITLE: Using eval_if_c for Conditional Type Selection in C++\nDESCRIPTION: Demonstrates how to use eval_if_c to conditionally select between char and long types based on a boolean condition. The example uses the identity metafunction to wrap the types.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/eval_if_c.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntypedef eval_if_c< true, identity<char>, identity<long> >::type t1;\ntypedef eval_if_c< false, identity<char>, identity<long> >::type t2;\n\nBOOST_MPL_ASSERT(( is_same<t1,char> ));\nBOOST_MPL_ASSERT(( is_same<t2,long> ));\n```\n\n----------------------------------------\n\nTITLE: Building Boost.Locale with bjam on Unix\nDESCRIPTION: Command to build Boost.Locale library using bjam on Unix-like systems. This compiles the library and stages it for use.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/doc/building_boost_locale.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./bjam --with-locale stage\n```\n\n----------------------------------------\n\nTITLE: Defining Image Read Information Structure\nDESCRIPTION: Creates a template specialization for image read information specific to the custom format, which stores metadata and parameters needed for reading an image\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/io.rst.txt#2025-04-22_snippet_8\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<> struct image_read_info< xxx_tag > {};\n```\n\n----------------------------------------\n\nTITLE: Implementing the is_unpackable_impl Template Specialization in C++\nDESCRIPTION: Primary template specialization of is_unpackable_impl that determines if a type can be unpacked. Includes conditional static assertions when the BOOST_HOF_CHECK_UNPACK_SEQUENCE flag is enabled.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/is_unpackable.hpp.txt#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<class Sequence, class=void>\nstruct is_unpackable_impl\n: std::true_type\n{\n#if BOOST_HOF_CHECK_UNPACK_SEQUENCE\n    static_assert(is_proper_sequence<Sequence>::value,\n        \"Unpack is invalid for this sequence. The function used to unpack this sequence does not invoke the function.\"\n    );\n#endif\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Snapshot Releases with Compiler Optimizations - C++\nDESCRIPTION: This code snippet explains a situation concerning compiler optimizations within 'DBImpl::ReleaseSnapshot()', leading to potential race conditions due to non-atomic reads during the snapshot release process, accompanied by a GitHub issue link for further insights.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tsan_arangodb_suppressions.txt#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\n// A compiler optimization in DBImpl::ReleaseSnapshot() produces code where a\n// register is populated with different addresses based on some condition, and\n// this register is later read to populate the variable `oldest_snapshot`.\n// However, this generated read is a non-atomic read, which therefore results in\n// a false positive race warning. I have created an according GitHub issue:\n// https://github.com/google/sanitizers/issues/1398\nrace:VersionSet::SetLastSequence\n```\n\n----------------------------------------\n\nTITLE: Defining Mutable Adaptor Class in C++\nDESCRIPTION: Implements the mutable_adaptor class template that wraps a function object and allows it to be used in a mutable context. It includes a constructor delegation and a templated call operator that forwards calls to the wrapped function.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/mutable.hpp.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<class F>\nstruct mutable_adaptor\n{\n    mutable F f;\n\n    BOOST_HOF_DELEGATE_CONSTRUCTOR(mutable_adaptor, F, f);\n\n    BOOST_HOF_RETURNS_CLASS(mutable_adaptor);\n\n    template<class... Ts>\n    BOOST_HOF_SFINAE_RESULT(F, id_<Ts>...) \n    operator()(Ts&&... xs) const BOOST_HOF_SFINAE_RETURNS(BOOST_HOF_CONST_THIS->f(BOOST_HOF_FORWARD(Ts)(xs)...));\n};\n```\n\n----------------------------------------\n\nTITLE: Defining the void_ Structure in C++\nDESCRIPTION: Declaration of the void_ structure which serves as a generic type placeholder representing \"nothing\". The structure includes a type definition and a template for checking if a type is void.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/void_.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nstruct void_\n{\n    typedef void_ type;\n};\n\ntemplate< typename T > struct is_void;\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version and Project Definition\nDESCRIPTION: This snippet sets the minimum required version for CMake and defines the Boost.Fiber project with its version and C++ language specifications. It also determines the default target based on the platform.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/fiber/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# cmake_minimum_required\ncmake_minimum_required(VERSION 3.8...3.20)\n\nproject(boost_fiber VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n\nif(WIN32 AND NOT CMAKE_CXX_PLATFORM_ID MATCHES \"Cygwin\")\n  set(_default_target windows)\nelseif(CMAKE_SYSTEM_NAME STREQUAL Linux)\n  set(_default_target linux)\nelse()\n  set(_default_target none)\nendif()\n\nset(BOOST_FIBER_NUMA_TARGET_OS \"${_default_target}\" CACHE STRING \"Boost.Fiber target OS (aix, freebsd, hpux, linux, solaris, windows, none)\")\nset_property(CACHE BOOST_FIBER_NUMA_TARGET_OS PROPERTY STRINGS aix freebsd hpux linux solaris windows none)\n\nunset(_default_target)\n\nmessage(STATUS \"Boost.Fiber: NUMA target OS is ${BOOST_FIBER_NUMA_TARGET_OS}\")\n```\n\n----------------------------------------\n\nTITLE: Adding View and Container Implementation Examples to STL Interfaces Tests\nDESCRIPTION: Adds view and container implementation examples as test executables. These samples demonstrate how to implement custom views and containers using the STL interfaces library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/stl_interfaces/example/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_sample(drop_while_view)\n\nadd_sample(static_vector)\n```\n\n----------------------------------------\n\nTITLE: Setting C++ Standard for Snappy Project\nDESCRIPTION: Configures the C++ standard to be used for the project, defaulting to C++11 if not overridden.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/snappy/snappy-1.1.9/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT CMAKE_CXX_STANDARD)\n  # This project requires C++11.\n  set(CMAKE_CXX_STANDARD 11)\n  set(CMAKE_CXX_STANDARD_REQUIRED ON)\n  set(CMAKE_CXX_EXTENSIONS OFF)\nendif(NOT CMAKE_CXX_STANDARD)\n```\n\n----------------------------------------\n\nTITLE: Creating ndarray from Data Arrays in C++ using Boost.Numpy\nDESCRIPTION: Illustrates creating an ndarray from a data array with specified shape, stride, and ownership. This method is useful for complex data layout and memory management.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/doc/html/numpy/_sources/tutorial/ndarray.rst.txt#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\nint data[] = {1,2,3,4,5};\np::tuple shape = p::make_tuple(5);\np::tuple stride = p::make_tuple(sizeof(int));\np::object own;\nnp::ndarray data_ex1 = np::from_data(data,dt, shape,stride,own);\n```\n\n----------------------------------------\n\nTITLE: Defining Boost Fusion Project\nDESCRIPTION: This defines the CMake project named `boost_fusion` and specifies the CXX language.  It also sets the version of the project using the `BOOST_SUPERPROJECT_VERSION` variable.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/fusion/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nproject(boost_fusion VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Configuring ArangoDB Build ID Library in CMake\nDESCRIPTION: This CMake snippet conditionally sets up the arango_build_id library. If USE_BUILD_ID_READER is true, it creates a static library with specific source files, include directories, and link options. Otherwise, it creates an interface library with only include directories.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/lib/BuildId/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (USE_BUILD_ID_READER)\n\n  add_library(arango_build_id\n    STATIC\n      src/BuildId.cpp)\n\n  target_include_directories(arango_build_id\n    PUBLIC\n      include)\n\n  target_link_options(arango_build_id\n    PUBLIC\n      ${CMAKE_CURRENT_SOURCE_DIR}/BuildId.ld\n      -Wl,--build-id=sha1)\n\nelse ()\n\n  add_library(arango_build_id INTERFACE)\n  target_include_directories(arango_build_id\n    INTERFACE\n      include)\n\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Defining the equal algorithm template in C++\nDESCRIPTION: This snippet shows the template definition for the 'equal' algorithm. It takes two sequences and an optional predicate for comparison.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/equal.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      typename Seq1\n    , typename Seq2\n    , typename Pred = is_same<_1,_2>\n    >\nstruct equal\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Using Parameter-Enabled Constructor with Named and Positional Arguments in C++\nDESCRIPTION: This snippet defines a parameter-enabled constructor that prints its arguments. It shows how to use BOOST_PARAMETER_CONSTRUCTOR to create a class that accepts both named and positional parameters, along with default values marked by the bitwise or operator.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/index.rst#2025-04-22_snippet_28\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_PARAMETER_NAME(name)\nBOOST_PARAMETER_NAME(index)\n\nstruct myclass_impl\n{\n    template <typename ArgumentPack>\n    myclass_impl(ArgumentPack const& args)\n    {\n        std::cout << \"name = \" << args[_name];\n        std::cout << \"; index = \" << args[_index | 42];\n        std::cout << std::endl;\n    }\n};\n\nstruct myclass : myclass_impl\n{\n    BOOST_PARAMETER_CONSTRUCTOR(\n        myclass, (myclass_impl), tag\n      , (required (name,*)) (optional (index,*))\n    ) // no semicolon\n};\n\nmyclass x(\"bob\", 3);                      // positional\nmyclass y(_index = 12, _name = \"sally\");  // named\nmyclass z(\"june\");                        // positional/defaulted\n```\n\n----------------------------------------\n\nTITLE: Defining insert Metafunction Template for Sequences in C++\nDESCRIPTION: Defines the template structure for the 'insert' metafunction, which inserts an element of type T at position Pos in a Sequence.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/insert.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate< \n      typename Sequence\n    , typename Pos\n    , typename T \n>\nstruct insert\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Building Core Examples with CMake\nDESCRIPTION: Creates build targets for each example program, linking against OpenCL and Boost libraries. Optionally adds examples to test suite if testing is enabled.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/compute/example/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nforeach(EXAMPLE ${EXAMPLES})\n  add_executable(${EXAMPLE} ${EXAMPLE}.cpp)\n  target_link_libraries(${EXAMPLE} ${OpenCL_LIBRARIES} ${Boost_LIBRARIES})\n\n  # add example program to list of tests (if testing is enabled)\n  if(${BOOST_COMPUTE_BUILD_TESTS})\n    add_test(\"example.${EXAMPLE}\" ${EXAMPLE})\n  endif()\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Building Boost System Library in CMake\nDESCRIPTION: Configures the Boost System library as a static library with a single source file. It sets compile definitions and links against the boost_boost interface target.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(boost_system STATIC\n    ${boost_src}/libs/system/src/error_code.cpp\n)\ntarget_link_libraries(boost_system PUBLIC boost_boost)\ntarget_compile_definitions(boost_system PRIVATE \"BOOST_SYSTEM_STATIC_LINK=1\")\ntarget_compile_definitions(boost_system PUBLIC  \"BOOST_ALL_NO_LIB=1\")\n```\n\n----------------------------------------\n\nTITLE: Defining Test Functions for Boost Safe Numerics in CMake\nDESCRIPTION: This snippet defines custom functions for setting up different types of tests (run pass, compile pass, compile fail) for the Boost Safe Numerics library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/safe_numerics/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(test_run_pass base_name )\n  message(STATUS ${base_name})\n  add_executable(${base_name} ${base_name}.cpp)\n  add_test(NAME ${base_name} COMMAND ${base_name})\nendfunction(test_run_pass)\n\nfunction(test_compile_pass base_name )\n  message(STATUS ${base_name} - compile only)\n  add_library(${base_name} OBJECT ${base_name})\nendfunction(test_compile_pass)\n\nfunction(test_compile_fail base_name )\n  message(STATUS ${base_name})\n  add_executable(${base_name} ${base_name}.cpp)\n  set_target_properties(${base_name} PROPERTIES\n    EXCLUDE_FROM_ALL TRUE\n    EXCLUDE_FROM_DEFAULT_BUILD TRUE\n  )\n  add_test(NAME ${base_name}\n    COMMAND ${CMAKE_COMMAND} --build . --target ${base_name} --config $<CONFIGURATION>\n    WORKING_DIRECTORY ${CMAKE_BINARY_DIR}\n  )\n  set_tests_properties(${base_name} PROPERTIES WILL_FAIL TRUE)\nendfunction( test_compile_fail base_name )\n```\n\n----------------------------------------\n\nTITLE: Conditional Test and Example Build Configuration\nDESCRIPTION: Adds test and example subdirectories based on configuration options, with special handling for superproject builds\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/property_tree/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif(BOOST_PROPERTY_TREE_BUILD_TESTS)\n    include(CTest)\n    add_subdirectory(test)\nendif()\n\nif(BOOST_PROPERTY_TREE_BUILD_EXAMPLES)\n    if (BOOST_SUPERPROJECT_VERSION)\n        message(STATUS \"[property_tree] superproject build - skipping examples\")\n    else()\n        add_subdirectory(examples)\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Protect Template Metafunction in C++\nDESCRIPTION: Declaration of the 'protect' template struct that wraps a Metafunction Class. It prevents the wrapped metafunction from being recognized as a bind expression.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/protect.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate< \n    typename F\n>\nstruct protect\n{\n    // |unspecified|\n    // |...|\n};\n```\n\n----------------------------------------\n\nTITLE: Bit-Aligned Pixel and Iterator Implementation\nDESCRIPTION: Supports pixel formats with non-standard bit alignments, including custom reference and iterator types\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/pixel.rst#2025-04-22_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\ntypedef const bit_aligned_pixel_reference<unsigned char, mpl::vector3_c<unsigned,2,3,2>, bgr_layout_t, true> bgr232_ref_t;\n\ntypedef bit_aligned_pixel_iterator<bgr232_ref_t> bgr232_ptr_t;\n```\n\n----------------------------------------\n\nTITLE: Defining Static Function Adaptor Class in C++\nDESCRIPTION: Implements the static_ class template that wraps a function object F. It provides static initialization and forwarding of function calls to a static instance of F.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/static.hpp.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<class F>\nstruct static_\n{\n    struct failure\n    : failure_for<F>\n    {};\n\n    const F& base_function() const\n    BOOST_HOF_NOEXCEPT_CONSTRUCTIBLE(F)\n    {\n        static F f;\n        return f;\n    }\n\n    BOOST_HOF_RETURNS_CLASS(static_);\n\n    template<class... Ts>\n    BOOST_HOF_SFINAE_RESULT(F, id_<Ts>...) \n    operator()(Ts && ... xs) const\n    BOOST_HOF_SFINAE_RETURNS(BOOST_HOF_CONST_THIS->base_function()(BOOST_HOF_FORWARD(Ts)(xs)...));\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Iterator Implementation Examples to STL Interfaces Tests\nDESCRIPTION: Adds various iterator implementation examples as test executables. Each sample demonstrates a different kind of iterator implementation using the STL interfaces library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/stl_interfaces/example/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_sample(repeated_chars_iterator)\nadd_sample(filtered_int_iterator)\nadd_sample(node_iterator)\nadd_sample(random_access_iterator)\nadd_sample(interoperability)\nadd_sample(zip_proxy_iterator)\nadd_sample(back_insert_iterator)\nadd_sample(reverse_iterator)\n```\n\n----------------------------------------\n\nTITLE: Example Usage of advance Metafunction in C++\nDESCRIPTION: Demonstrates practical usage of the advance metafunction with a range of integers. Shows how to advance forward and backward through a sequence, with assertions to verify correctness.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/advance.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntypedef range_c<int,0,10> numbers;\ntypedef begin<numbers>::type first;\ntypedef end<numbers>::type last;\n\ntypedef advance<first,int_<10> >::type i1;\ntypedef advance<last,int_<-10> >::type i2;\n\nBOOST_MPL_ASSERT(( boost::is_same<i1,last> ));\nBOOST_MPL_ASSERT(( boost::is_same<i2,first> ));\n```\n\n----------------------------------------\n\nTITLE: Accessing Graph Property in Adjacency List (C++)\nDESCRIPTION: Returns the graph property specified by GraphPropertyTag attached to the adjacency list. Note: This functionality is not implemented yet.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/distributed_adjacency_list.rst#2025-04-22_snippet_27\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <class GraphProperties, class GraphPropertyTag>\ntypename graph_property<adjacency_list, GraphPropertyTag>::type&\nget_property(adjacency_list& g, GraphPropertyTag);\n\ntemplate <class GraphProperties, class GraphPropertyTag >\nconst typename graph_property<adjacency_list, GraphPropertyTag>::type&\nget_property(const adjacency_list& g, GraphPropertyTag);\n```\n\n----------------------------------------\n\nTITLE: Defining Repeat While Function Decorator in C++\nDESCRIPTION: Implements the repeat_while function decorator that repeatedly applies a function while a predicate returns true. It supports both compile-time and runtime evaluation depending on the predicate type.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/repeat_while.hpp.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nnamespace boost { namespace hof { namespace detail {\n\ntemplate<class P, class... Ts>\nstruct compute_predicate\n{\n    typedef decltype(std::declval<P>()(std::declval<Ts>()...)) type;\n};\n\ntemplate<bool B>\nstruct while_repeater\n{\n    template<class F, class P, class... Ts>\n    constexpr BOOST_HOF_SFINAE_RESULT(while_repeater<\n        compute_predicate<P, typename result_of<const F&, id_<Ts>...>::type>::type::value\n    >, id_<const F&>, id_<const P&>, result_of<const F&, id_<Ts>...>) \n    operator()(const F& f, const P& p, Ts&&... xs) const BOOST_HOF_SFINAE_RETURNS\n    (\n        while_repeater<\n            compute_predicate<P, decltype(f(BOOST_HOF_FORWARD(Ts)(xs)...))>::type::value\n        >()(f, p, f(BOOST_HOF_FORWARD(Ts)(xs)...))\n    );\n};\n\ntemplate<>\nstruct while_repeater<false>\n{\n    template<class F, class P, class T>\n    constexpr T operator()(const F&, const P&, T&& x) const \n    BOOST_HOF_RETURNS_DEDUCE_NOEXCEPT(x)\n    {\n        return x;\n    }\n};\n\n// ... (other implementation details)\n\n}}}\n```\n\n----------------------------------------\n\nTITLE: Using greater Metafunction in C++ Assertions\nDESCRIPTION: Example usage of the 'greater' metafunction in compile-time assertions to compare integral constants.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/greater.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_MPL_ASSERT(( greater< int_<10>, int_<0> > ));\nBOOST_MPL_ASSERT_NOT(( greater< long_<0>, int_<10> > ));\nBOOST_MPL_ASSERT_NOT(( greater< long_<10>, int_<10> > ));\n```\n\n----------------------------------------\n\nTITLE: Configuring Date Interface Library\nDESCRIPTION: Creates an interface library for the date functionality and sets up include directories.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(date_interface INTERFACE)\ntarget_include_directories(date_interface SYSTEM INTERFACE ${CMAKE_CURRENT_SOURCE_DIR}/date/include)\n```\n\n----------------------------------------\n\nTITLE: Compiler-Optimized Version of the Narrow Contract Function in C++\nDESCRIPTION: Shows the optimized version of the previous function where the compiler has eliminated the null check, since it would lead to undefined behavior if executed.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/motivation/narrow_contract.md#2025-04-22_snippet_2\n\nLANGUAGE: c++\nCODE:\n```\npair<int, int> g(int * pi) // expects: pi != nullptr\n{\n  int i = *pi + 1;\n  int j = 0;\n  return {i, j};\n}\n```\n\n----------------------------------------\n\nTITLE: Building Logger Library\nDESCRIPTION: Configures the arango_basic_logger static library with logging-related source files and dependencies\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/lib/CMakeLists.txt#2025-04-22_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(arango_basic_logger STATIC\n        Logger/Appenders.cpp\n        Logger/Escaper.cpp\n        Logger/LogAppender.cpp\n        Logger/LogAppenderFile.cpp\n        Logger/LogAppenderStdStream.cpp\n        Logger/LogAppenderStream.cpp\n        Logger/LogAppenderSyslog.cpp\n        Logger/LogContext.cpp\n        Logger/LogLevel.cpp\n        Logger/LogThread.cpp\n        Logger/LogTopic.cpp\n        Logger/Logger.cpp\n        Logger/LoggerFeature.cpp\n        Logger/LoggerStream.cpp\n        Logger/LogTimeFormat.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Defining at Metafunction for Forward Sequences in C++\nDESCRIPTION: Template metafunction that returns the N-th element from a Forward Sequence. Takes a Sequence and an index N as template parameters and defines an internal type alias for the result.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/at.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      typename Sequence\n    , typename N\n    >\nstruct at\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining end Metafunction Template in C++\nDESCRIPTION: Defines the template structure for the 'end' metafunction. It takes a type parameter X and defines an internal type alias. This metafunction returns the past-the-end iterator for a sequence.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/end.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      typename X\n    >\nstruct end\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Switching Message Domains with Stream Manipulators\nDESCRIPTION: Shows how to switch between different message domains when using iostream. The example demonstrates using the as::domain manipulator to switch domains within a single output statement.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/doc/messages_formatting.txt#2025-04-22_snippet_7\n\nLANGUAGE: C++\nCODE:\n```\ncout << as::domain(\"foo\") << translate(\"Hello\") << as::domain(\"bar\") << translate(\"Hello\");\n// First translation is taken from dictionary foo and the other from dictionary bar\n```\n\n----------------------------------------\n\nTITLE: Evaluating Positional Arguments in C++\nDESCRIPTION: Example showing function evaluation with positional arguments using different bitset types. Demonstrates passing lvalue, rvalue, const and non-const parameters.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_58\n\nLANGUAGE: cpp\nCODE:\n```\nb.evaluate(  // positional arguments\n    lvalue_const_bitset<0>()\n  , lvalue_bitset<1>()\n  , rvalue_const_bitset<2>()\n  , rvalue_bitset<3>()\n);\nb.evaluate(  // positional arguments\n    lvalue_const_bitset<0>()\n  , lvalue_bitset<1>()\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Graph Edges in Plain Text Format\nDESCRIPTION: A text-based representation of a graph with 10 edges. Each line after the first represents an edge from the first number (source vertex) to the second number (destination vertex). The first line specifies the total number of edges in the graph.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/polygon/example/input_data/random/random_001.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n10\n9 1\n4 3\n9 6\n9 8\n3 9\n6 8\n0 5\n9 5\n3 0\n2 1\n```\n\n----------------------------------------\n\nTITLE: Configuring LibSSH2 and OpenSSL Usage in CMake for ArangoDB\nDESCRIPTION: Disables the use of libssh2 and enables the use of OpenSSL in the project. These settings are forced and cached.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/s2geometry/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_USE_LIBSSH2 OFF CACHE BOOL \"Use libssh2\" FORCE)\nset(CMAKE_USE_OPENSSL ON CACHE BOOL \"Use OpenSSL\" FORCE)\n```\n\n----------------------------------------\n\nTITLE: Configuring Beast Library Build Subdirectories with CMake\nDESCRIPTION: CMake configuration that adds core and SSL-enabled subdirectories to the build. Core components are always included, while SSL-dependent directories are only added when OpenSSL is detected on the system.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/beast/example/http/server/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory (async)\nadd_subdirectory (coro)\nadd_subdirectory (fast)\nadd_subdirectory (small)\nadd_subdirectory (stackless)\nadd_subdirectory (sync)\n\nif (OPENSSL_FOUND)\n    add_subdirectory (async-ssl)\n    add_subdirectory (coro-ssl)\n    add_subdirectory (flex)\n    add_subdirectory (stackless-ssl)\n    add_subdirectory (sync-ssl)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Using OUTCOME21_TRY Macro for Legacy Behavior in C++\nDESCRIPTION: The OUTCOME21_TRY macro preserves the pre-v2.2 behavior of BOOST_OUTCOME_TRY, allowing for backwards compatibility in existing code.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/changelog/v22.md#2025-04-22_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nOUTCOME21_TRY\n```\n\n----------------------------------------\n\nTITLE: Extending Print Function to Handle Tuples in C++\nDESCRIPTION: Adds support for printing tuples to the print function using for_each_tuple.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/src/example_print.md#2025-04-22_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_HOF_STATIC_LAMBDA_FUNCTION(print) = first_of(\n    [](const auto& x) -> decltype(std::cout << x, void())\n    {\n        std::cout << x << std::endl;\n    },\n    [](const auto& range) -> decltype(std::cout << *adl::adl_begin(range), void())\n    {\n        for(const auto& x:range) std::cout << x << std::endl;\n    },\n    [](const auto& tuple)\n    {\n        for_each_tuple(tuple, [](const auto& x)\n        {\n            std::cout << x << std::endl;\n        });\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Complex Number Conversion in C++\nDESCRIPTION: Example implementation of numeric_cast specialization for converting integral constants to complex numbers, and a plus_impl specialization for adding complex numbers.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/numeric_cast.rst#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\nstruct complex_tag : int_<10> {};\n\ntemplate< typename Re, typename Im > struct complex\n{\n    typedef complex_tag tag;\n    typedef complex type;\n    typedef Re real;\n    typedef Im imag;\n};\n\ntemplate< typename C > struct real : C::real {};\ntemplate< typename C > struct imag : C::imag {};\n\nnamespace boost { namespace mpl {\n\ntemplate<> struct numeric_cast< integral_c_tag,complex_tag >\n{\n    template< typename N > struct apply\n        : complex< N, integral_c< typename N::value_type, 0 > >\n    {\n    };\n};\n\ntemplate<>\nstruct plus_impl< complex_tag,complex_tag >\n{\n    template< typename N1, typename N2 > struct apply\n        : complex<\n              plus< typename N1::real, typename N2::real >\n            , plus< typename N1::imag, typename N2::imag >\n            >\n    {\n    };\n};\n\n}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Compound Reference Hiding in Doxygen\nDESCRIPTION: This option specifies whether doxygen appends additional text to a page's title, such as Class Reference. Setting it to YES hides the compound reference.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/sort/doc/doxygen/sort_doxyfile.txt#2025-04-22_snippet_38\n\nLANGUAGE: Doxygen\nCODE:\n```\n\"HIDE_COMPOUND_REFERENCE= NO\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost Type Traits Library with CMake\nDESCRIPTION: Sets up the Boost Type Traits library as an interface library with required dependencies. The configuration specifies CMake version requirements, creates the library target, and defines its dependencies on Boost::config and Boost::static_assert.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/type_traits/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# We support CMake 3.5, but prefer 3.16 policies and behavior\ncmake_minimum_required(VERSION 3.5...3.16)\n\nproject(boost_type_traits VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n\nadd_library(boost_type_traits INTERFACE)\nadd_library(Boost::type_traits ALIAS boost_type_traits)\n\ntarget_include_directories(boost_type_traits INTERFACE include)\n\ntarget_link_libraries(boost_type_traits\n  INTERFACE\n    Boost::config\n    Boost::static_assert\n)\n```\n\n----------------------------------------\n\nTITLE: Error Output from Sweepline Algorithm Test\nDESCRIPTION: Error output from a C++ unit test for a sweepline algorithm showing failures in vertex and edge record count comparisons between small and large test outputs. The test is from a file named 'sweepline_test.cpp'.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/polygon/example/input_data/primary/primary_071.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n../../SOC_2010/sweepline/libs/sweepline/test/sweepline_test.cpp(723): error in \"segment_random_test2<double>\": check test_output_small.num_vertex_records() == test_output_large.num_vertex_records() failed [476 != 526]\n../../SOC_2010/sweepline/libs/sweepline/test/sweepline_test.cpp(725): error in \"segment_random_test2<double>\": check test_output_small.num_edge_records() == test_output_large.num_edge_records() failed [734 != 795]\n```\n\n----------------------------------------\n\nTITLE: Addressing Lock Order Inversions - C++\nDESCRIPTION: This code snippet identifies a deadlock situation related to locking order inversions in 'consensus::Agent::setPersistedState', necessitating attention for resolution.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tsan_arangodb_suppressions.txt#2025-04-22_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\n// TODO Fix lock order inversion\ndeadlock:consensus::Agent::setPersistedState\n```\n\n----------------------------------------\n\nTITLE: Defining Mutable Random Access ND Image View Concept in C++\nDESCRIPTION: Introduces the concept for mutable N-dimensional image views extending the RandomAccessNDImageViewConcept in C++. This ensures that the reference for the view is mutable, allowing modifications to the underlying data. It requires conformance with the mutable concept requirements of the language.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/image_view.rst#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nconcept MutableRandomAccessNDImageViewConcept<RandomAccessNDImageViewConcept View>\n{\n  where Mutable<reference>;\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Boost Range Library and Include Directories\nDESCRIPTION: This section creates a new interface library for Boost Range and specifies the include directories for the library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/range/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(boost_range INTERFACE)\nadd_library(Boost::range ALIAS boost_range)\n\ntarget_include_directories(boost_range INTERFACE include)\n```\n\n----------------------------------------\n\nTITLE: Configuring Shared and Static Library Options\nDESCRIPTION: Sets up build options for shared and static libraries with dependencies between options. In bundled mode, static libraries are always used. This ensures at least one library type is built by enforcing option consistency.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/lz4/build/cmake/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n# Allow people to choose whether to build shared or static libraries\n# via the BUILD_SHARED_LIBS option unless we are in bundled mode, in\n# which case we always use static libraries.\ninclude(CMakeDependentOption)\nCMAKE_DEPENDENT_OPTION(BUILD_SHARED_LIBS \"Build shared libraries\" ON \"NOT LZ4_BUNDLED_MODE\" OFF)\nCMAKE_DEPENDENT_OPTION(BUILD_STATIC_LIBS \"Build static libraries\" OFF \"BUILD_SHARED_LIBS\" ON)\n\nif(NOT BUILD_SHARED_LIBS AND NOT BUILD_STATIC_LIBS)\n  message(FATAL_ERROR \"Both BUILD_SHARED_LIBS and BUILD_STATIC_LIBS have been disabled\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: BOOST_MPL_ASSERT_NOT Macro Declaration in C++\nDESCRIPTION: The macro definition of BOOST_MPL_ASSERT_NOT that generates a compilation error when a predicate is true. The actual implementation is represented by unspecified token sequence.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/ASSERT_NOT.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n#define BOOST_MPL_ASSERT_NOT( pred ) \\\n    |unspecified-token-seq| \\\n/**/\n```\n\n----------------------------------------\n\nTITLE: Comparison of String Algo vs Locale Conversion in C++\nDESCRIPTION: Compares the difference between Boost.StringAlgo's to_upper and boost::locale's to_upper functions, highlighting the proper Unicode character handling in the latter.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/doc/conversions.txt#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nstd::wstring grussen = L\"grüßen\";\nstd::wcout << boost::algorithm::to_upper_copy(grussen) << \" \" << boost::locale::to_upper(grussen) << std::endl;\n```\n\n----------------------------------------\n\nTITLE: Debugging ArangoDB Storage Engine\nDESCRIPTION: GDB debugging setup for ArangoDB storage engine with commands to catch exceptions and run tests.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/CONTRIBUTING.md#2025-04-22_snippet_34\n\nLANGUAGE: bash\nCODE:\n```\nrm -fr ../arangodb-data-rocksdb/; \\\n   gdb --args ./build/bin/arangod \\\n       --console \\\n       --foxx.queues false \\\n       --server.statistics false \\\n       --server.endpoint http+tcp://0.0.0.0:7777 \\\n       ../arangodb-data-rocksdb\n(gdb) catch throw\n(gdb) r\narangod> require(\"jsunity\").runTest(\"tests/js/client/shell/shell-client.js\");\n```\n\n----------------------------------------\n\nTITLE: Defining Value Category Test Functions in C++\nDESCRIPTION: Defines template functions that return std::bitset objects with different value categories (rvalue, const rvalue, lvalue, const lvalue). These are used to test argument passing behavior.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_54\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <std::size_t N>\nstd::bitset<N + 1> rvalue_bitset()\n{\n    return std::bitset<N + 1>();\n}\n\ntemplate <std::size_t N>\nstd::bitset<N + 1> const rvalue_const_bitset()\n{\n    return std::bitset<N + 1>();\n}\n\ntemplate <std::size_t N>\nstd::bitset<N + 1>& lvalue_bitset()\n{\n    static std::bitset<N + 1> lset = std::bitset<N + 1>();\n    return lset;\n}\n\ntemplate <std::size_t N>\nstd::bitset<N + 1> const& lvalue_const_bitset()\n{\n    static std::bitset<N + 1> const clset = std::bitset<N + 1>();\n    return clset;\n}\n```\n\n----------------------------------------\n\nTITLE: Using c_str Metafunction in C++\nDESCRIPTION: Demonstrates the usage of c_str metafunction to convert a vector of integral constants representing characters to a null-terminated string and comparing it with a C-style string literal.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/c_str.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntypedef vector_c<char,'h','e','l','l','o'> hello;\nassert( 0 == std::strcmp( c_str<hello>::value, \"hello\" ) );\n```\n\n----------------------------------------\n\nTITLE: Building ZLib in Microsoft Visual C++\nDESCRIPTION: Instructions for compiling zlib using Visual Studio project files located in the contrib/vstudio/ directory\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/zlib/zlib-1.2.13/win32/VisualC.txt#2025-04-22_snippet_0\n\nLANGUAGE: instructions\nCODE:\n```\nUse project files from contrib/vstudio/ directory\n```\n\n----------------------------------------\n\nTITLE: Declaring Simplified Eager Dijkstra's Shortest Paths Function in C++\nDESCRIPTION: A simplified function declaration for the eager Dijkstra's shortest paths algorithm. It takes fewer parameters, including the distributed graph, start vertex, predecessor map, distance map, lookahead value, and weight map.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/dijkstra_shortest_paths.rst#2025-04-22_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<typename DistributedGraph, typename DijkstraVisitor,\n             typename PredecessorMap, typename DistanceMap, typename WeightMap>\nvoid\neager_dijkstra_shortest_paths\n  (const DistributedGraph& g,\n   typename graph_traits<DistributedGraph>::vertex_descriptor s,\n   PredecessorMap predecessor, DistanceMap distance, \n   typename property_traits<DistanceMap>::value_type lookahead,\n   WeightMap weight);\n```\n\n----------------------------------------\n\nTITLE: Configuring Testing for Boost Wave in CMake\nDESCRIPTION: Conditionally adds the test subdirectory if testing is enabled and the test CMakeLists.txt file exists.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/wave/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(BUILD_TESTING AND EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/test/CMakeLists.txt\")\n\n  add_subdirectory(test)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Boost Graph Parallel Library\nDESCRIPTION: Sets the include directories for the boost_graph_parallel library.  The include directory is set to \"include\", making the headers in that directory available to other parts of the project and any dependent projects.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(boost_graph_parallel PUBLIC include)\n```\n\n----------------------------------------\n\nTITLE: Building Boost.Nowide with CMake\nDESCRIPTION: Commands for building and installing Boost.Nowide using CMake build system. Shows the standard CMake workflow for configuring, building and installing the library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/nowide/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir build && cd build\ncmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local\nmake install\n```\n\n----------------------------------------\n\nTITLE: Unique Template Declaration - C++\nDESCRIPTION: Template declaration for the unique algorithm that takes a sequence, predicate, and optional inserter to remove consecutive duplicate elements.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/unique.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      typename Seq\n    , typename Pred\n    , typename In = |unspecified|\n    >\nstruct unique\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Composing and Using Parameterized Inheritance Classes in C++\nDESCRIPTION: Example of composing frontend and backend classes in different orders and using them with named parameters. This demonstrates how backend classes can be chained in different arrangements while maintaining the same functionality.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_85\n\nLANGUAGE: cpp\nCODE:\n```\nchar const* p = \"foo\";\nfrontend<\n    backend2<backend1<backend0<char const*>, char>, int>\n> composed_obj0;\nfrontend<\n    backend1<backend2<backend0<char const*>, int>, char>\n> composed_obj1;\ncomposed_obj0(_a2 = 4, _a1 = ' ', _a0 = p);\ncomposed_obj1(_a0 = p, _a1 = ' ', _a2 = 4);\nBOOST_TEST_EQ(composed_obj0.get_a0(), composed_obj1.get_a0());\nBOOST_TEST_EQ(composed_obj0.get_a1(), composed_obj1.get_a1());\nBOOST_TEST_EQ(composed_obj0.get_a2(), composed_obj1.get_a2());\n```\n\n----------------------------------------\n\nTITLE: Defining modulus Metafunction Template in C++\nDESCRIPTION: Template definition for the modulus metafunction, which returns the modulus of its two integral constant arguments.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/modulus.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      typename T1\n    , typename T2\n    >\nstruct modulus\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Memory Leak Suppression Rules for ArangoDB\nDESCRIPTION: Configuration rules to suppress memory leak warnings in ASan (Address Sanitizer) for specific functions and components. Includes temporary suppressions for known issues in connection creation, crypto operations, snowball library, V8 buffer handling, and logging context.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/lsan_arangodb_suppressions.txt#2025-04-22_snippet_0\n\nLANGUAGE: config\nCODE:\n```\nleak:create_conn\nleak:CRYPTO_zalloc\n# TODO(MBkkt) Should be removed when we update snowball\nleak:snowball\n\n# TODO(MBkkt) Should be fixed, but now we don't know how\n# Also it probably only last Buffer, so we don't really care\n# Direct leak of 80 byte(s) in 1 object(s) allocated from:\n#  0 in operator new(unsigned long)\n#  1 in V8Buffer::New(v8::FunctionCallbackInfo<v8::Value> const&) /work/ArangoDB/lib/V8/v8-buffer.cpp:567\n#  2 in v8::internal::FunctionCallbackArguments::Call(v8::internal::CallHandlerInfo)\n# Indirect leak of 59 byte(s) in 1 object(s) allocated from:\n#  0 in operator new[](unsigned long)\n#  1 in V8Buffer::replace(v8::Isolate*, char*, unsigned long, void (*)(char*, void*), void*, bool) /work/ArangoDB/lib/V8/v8-buffer.cpp:735\n#  2 in V8Buffer /work/ArangoDB/lib/V8/v8-buffer.cpp:678\n#  3 in V8Buffer::New(v8::FunctionCallbackInfo<v8::Value> const&) /work/ArangoDB/lib/V8/v8-buffer.cpp:567\n#  4 in v8::internal::FunctionCallbackArguments::Call(v8::internal::CallHandlerInfo) \n# SUMMARY: AddressSanitizer: 139 byte(s) leaked in 2 allocation(s).\nleak:V8Buffer::New\n\n# Suppressed to see other issue\n# TODO(mpoeter) ?\nleak:LogContext::Current::appendEntry\n```\n\n----------------------------------------\n\nTITLE: Adding Test Subdirectory in CMake for Boost.Mp11\nDESCRIPTION: Conditionally adds the test subdirectory when BUILD_TESTING is enabled.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mp11/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(BUILD_TESTING)\n\n  add_subdirectory(test)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Including BOOST_MPL_AUX_LAMBDA_SUPPORT Header File in C++\nDESCRIPTION: The header file inclusion statement for using the BOOST_MPL_AUX_LAMBDA_SUPPORT macro in C++ code.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/AUX_LAMBDA_SUPPORT.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/aux_/lambda_support.hpp>\n```\n\n----------------------------------------\n\nTITLE: Defining the times Metafunction Template in C++\nDESCRIPTION: Template declaration for the times metafunction that takes multiple template parameters and returns their product as a type. The metafunction accepts variable number of Integral Constant parameters.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/times.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      typename T1\n    , typename T2\n    , typename T3 = |unspecified|\n    |...|\n    , typename T\\ *n* = |unspecified|\n    >\nstruct times\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Using as_failure() method in C++ to create a failure object\nDESCRIPTION: This method returns the output from free function failure() containing a copy of any errored and/or excepted state. The error and exception state can be accessed using assume_error() and assume_exception() methods. It's always available, with complexity dependent on the copy constructors of error_type and exception_type.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/basic_outcome/as_failure_lvalue.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nfailure_type<error_type, exception_type> as_failure() const &\n```\n\n----------------------------------------\n\nTITLE: Using not_equal_to Metafunction in C++ with Boost MPL\nDESCRIPTION: Demonstrates how to use the not_equal_to metafunction with Boost MPL assertions to compare integral constants.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/not_equal_to.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_MPL_ASSERT(( not_equal_to< int_<0>, int_<10> > ));\nBOOST_MPL_ASSERT(( not_equal_to< long_<10>, int_<0> > ));\nBOOST_MPL_ASSERT_NOT(( not_equal_to< long_<10>, int_<10> > ));\n```\n\n----------------------------------------\n\nTITLE: Type Definition for Color Converted Views in C++\nDESCRIPTION: This snippet constructs a view type that incorporates a color conversion function when pixels are dereferenced. It relies on existing structures to define a new view type suitable for color conversion.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/extending.rst#2025-04-22_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\n  template <typename SrcView, typename DstP>\n  struct color_converted_view_type\n  {\n  private:\n    typedef typename SrcView::const_t::reference src_pix_ref;  // const reference to pixel in SrcView\n    typedef color_convert_deref_fn<src_pix_ref, DstP> deref_t; // the dereference adaptor that performs color conversion\n    typedef typename SrcView::template add_deref<deref_t> add_ref_t;\n  public:\n    typedef typename add_ref_t::type type; // the color converted view type\n    static type make(const SrcView& sv) { return add_ref_t::make(sv, deref_t()); }\n  };\n```\n\n----------------------------------------\n\nTITLE: Declaring ptr_set_adapter in Boost\nDESCRIPTION: This code snippet shows the declaration of the `ptr_set_adapter` class template within the `boost` namespace.  It defines the template parameters `Key`, `VoidPtrSet`, and `CloneAllocator`, and includes member functions for inserting elements and transferring elements from another `ptr_set_adapter`.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/ptr_set_adapter.rst#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nnamespace boost\n{\n    template\n    <\n        class Key,\n        class VoidPtrSet,\n        class CloneAllocator = heap_clone_allocator\n    >\n    class ptr_set_adapter\n    {\n\n    public: // `modifiers`_\n        std::pair<iterator,bool>  insert( Key* x );\n\t\ttemplate< class Key2 >\n\t\tstd::pair<iterator,bool>  insert( compatible-smart-ptr<Key2> x );\n\n    public: // `pointer container requirements`_\n        bool      transfer( iterator object, ptr_set_adapter& from );\n        size_type transfer( iterator first, iterator last, ptr_set_adapter& from );\n        template< class Range >\n        size_type transfer( const Range& r, ptr_set_adapter& from );\n        size_type transfer( ptr_set_adapter& from );\n\n    }; //  class 'ptr_set_adapter'\n\n} // namespace 'boost'  \n```\n\n----------------------------------------\n\nTITLE: Out Edges Iterator Implementation in C++\nDESCRIPTION: Returns iterator pair for accessing outgoing edges from a vertex. For undirected graphs, provides access to all incident edges. Source vertex must be local.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/distributed_adjacency_list.rst#2025-04-22_snippet_12\n\nLANGUAGE: C++\nCODE:\n```\nstd::pair<out_edge_iterator, out_edge_iterator>\nout_edges(vertex_descriptor u, const adjacency_list& g);\n```\n\n----------------------------------------\n\nTITLE: Swapping basic_outcome with Strong Guarantee\nDESCRIPTION: A method to swap two basic_outcome instances with complex move and exception handling logic. Provides strong exception safety by attempting to restore original state if swap fails. Supports noexcept move constructors and handles potential inconsistent states.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/basic_outcome/swap.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nvoid swap(basic_outcome &)\n```\n\n----------------------------------------\n\nTITLE: Creating Shared Library Targets for Tests\nDESCRIPTION: Defines shared library targets 'dll_a', 'dll_polymorphic_base', and 'dll_polymorphic_derived2' used in tests.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/serialization/CMake/CMakeLists.txt#2025-04-22_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nmessage(STATUS dll_a)\nadd_library(dll_a SHARED ../test/dll_a.cpp)\ntarget_link_libraries(dll_a serialization)\n\nmessage(STATUS dll_polymorphic_base)\nadd_library(dll_polymorphic_base SHARED ../test/dll_polymorphic_base.cpp)\ntarget_link_libraries(dll_polymorphic_base serialization)\n\nmessage(STATUS dll_polymorphic_derived2)\nadd_library(dll_polymorphic_derived2 SHARED ../test/dll_polymorphic_derived2.cpp)\ntarget_link_libraries(dll_polymorphic_derived2 dll_polymorphic_base serialization)\n```\n\n----------------------------------------\n\nTITLE: Synthetic Image Creation Example - mandelbrot.cpp\nDESCRIPTION: This example demonstrates creating a synthetic image defined by a function, specifically the Mandelbrot set, using Boost GIL.  It showcases the library's ability to generate images programmatically.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/index.rst#2025-04-22_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\n* :download:`mandelbrot.cpp <../example/mandelbrot.cpp>`:\n  Creating a synthetic image defined by a function\n```\n\n----------------------------------------\n\nTITLE: Channel-Level Gradient Computation with Static Transform\nDESCRIPTION: A generic x-gradient implementation using GIL's static_transform to perform per-channel gradient calculations with compile-time loop unrolling and semantic channel matching.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/tutorial/gradient.rst.txt#2025-04-22_snippet_8\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <typename Out>\nstruct halfdiff_cast_channels\n{\n  template <typename T> Out operator()(T const& in1, T const& in2) const\n  {\n    return Out((in1 - in2) / 2);\n  }\n};\n\ntemplate <typename SrcView, typename DstView>\nvoid x_gradient(const SrcView& src, const DstView& dst)\n{\n  typedef typename channel_type<DstView>::type dst_channel_t;\n\n  for (int y=0; y < src.height(); ++y)\n  {\n    typename SrcView::x_iterator src_it = src.row_begin(y);\n    typename DstView::x_iterator dst_it = dst.row_begin(y);\n\n    for (int x=1; x < src.width() - 1; ++x)\n    {\n      static_transform(src_it[x-1], src_it[x+1], dst_it[x],\n        halfdiff_cast_channels<dst_channel_t>());\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implicit Failure Type Move Constructor Signature in C++\nDESCRIPTION: Constructor signature for basic_result that takes a failure_type<T> rvalue reference. Enables implicit conversion from compatible failure types and handles void type cases with default error construction. Includes noexcept and constexpr propagation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/basic_result/implicit_failure_move_constructor.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nbasic_result(failure_type<T> &&)\n```\n\n----------------------------------------\n\nTITLE: Linking Dependencies for Boost Exception\nDESCRIPTION: This snippet links the Boost Exception library to its required Boost components, ensuring that features such as assertions and smart pointers are available. It uses the PUBLIC scope to expose these dependencies.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/exception/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(boost_exception\n  PUBLIC\n    Boost::assert\n    Boost::config\n    Boost::core\n    Boost::smart_ptr\n    Boost::throw_exception\n    Boost::tuple\n    Boost::type_traits\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional System Includes for V8 Headers\nDESCRIPTION: This snippet conditionally adds V8 internal include directories as system includes for the 'arangodbtests-iresearch' target. This is included only if V8 is enabled.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/IResearch/CMakeLists.txt#2025-04-22_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nif (USE_V8) \\ \n  target_include_directories(arangodbtests-iresearch SYSTEM PRIVATE\\\n    ${V8_INTERNAL_INCLUDE_DIR})\\\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Setting up CMake Testing Environment for STL Interfaces\nDESCRIPTION: Configures CMake testing environment by including necessary directories, enabling testing, and defining a custom target to run all examples. This snippet establishes the base testing infrastructure.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/stl_interfaces/example/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude_directories(${CMAKE_HOME_DIRECTORY})\n\ninclude(CTest)\n\nenable_testing()\n\nadd_custom_target(run_examples COMMAND ${CMAKE_CTEST_COMMAND} -VV -C ${CMAKE_CFG_INTDIR})\n```\n\n----------------------------------------\n\nTITLE: Using indirect_iterator with Container of Pointers - C++\nDESCRIPTION: Example showing how indirect_iterator adapts a list<foo*> to behave like list<foo> by adding an extra dereference operation. The adaptor uses pointee and indirect_reference traits for iterators whose value_type is not an iterator.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/indirect_iterator_abstract.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nlist<foo*>    // Original container of pointers\nlist<foo>     // How container appears when used with indirect_iterator\n```\n\n----------------------------------------\n\nTITLE: Including negate Metafunction Headers in C++\nDESCRIPTION: This snippet shows the necessary headers to include when using the negate metafunction in your C++ code.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/negate.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/negate.hpp>\n#include <boost/mpl/arithmetic.hpp>\n```\n\n----------------------------------------\n\nTITLE: Configuring ArangoDB Test Source Files with CMake\nDESCRIPTION: Adds source files RegistryTest.cpp and ThreadRegistryTest.cpp to the arangodbtests target compilation. These files contain unit tests for the Registry and ThreadRegistry components of ArangoDB.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/Async/Registry/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(arangodbtests\n  PRIVATE\n  RegistryTest.cpp\n  ThreadRegistryTest.cpp)\n```\n\n----------------------------------------\n\nTITLE: Including has_key Header in C++\nDESCRIPTION: Shows how to include the necessary header file to use the has_key metafunction in C++ code.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/has_key.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/has_key.hpp>\n```\n\n----------------------------------------\n\nTITLE: Nullable Vector Usage in C++\nDESCRIPTION: Demonstrates how to use nullable types with pointer containers to allow null values.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/conventions.rst#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nboost::ptr_vector< boost::nullable<animal> > vec;\nvec.push_back( 0 ); // ok\n```\n\n----------------------------------------\n\nTITLE: Defining Operator!= for Failure Types in C++\nDESCRIPTION: This snippet defines the operator!= function for comparing instances of the failure_type template. It checks if the outcome either has a successful state or its error/exception does not equate with defined types. The implementation requires valid operator!= expressions between specified types and handles void types accordingly. It also propagates constexpr and noexcept from the underlying comparison operator.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/basic_outcome/inequality_failure_type.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nbool operator!=(const failure_type<A, B> &) const {\n    // Implementation details for comparing outcomes\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost.Locale ICU Backend\nDESCRIPTION: Sets up the ICU backend for Boost.Locale if enabled, including additional source files.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/CMakeLists.txt#2025-04-22_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nif(BOOST_LOCALE_ENABLE_ICU)\n\n  find_package(ICU COMPONENTS data i18n uc REQUIRED)\n\n  target_compile_definitions(boost_locale PRIVATE BOOST_LOCALE_WITH_ICU=1)\n  target_link_libraries(boost_locale PRIVATE ICU::data ICU::i18n ICU::uc)\n\n  target_sources(boost_locale PRIVATE\n    src/icu/boundary.cpp\n    src/icu/codecvt.cpp\n    src/icu/collator.cpp\n    src/icu/conversion.cpp\n    src/icu/date_time.cpp\n    src/icu/formatter.cpp\n    src/icu/icu_backend.cpp\n    src/icu/numeric.cpp\n    src/icu/time_zone.cpp\n  )\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Other_Math Unicode Property\nDESCRIPTION: This snippet defines the Other_Math Unicode property, which includes various mathematical symbols and digits. It specifies ranges of Unicode code points for bold, italic, and sans-serif variations of Greek letters and digits.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/spirit/workbench/unicode/PropList.txt#2025-04-22_snippet_7\n\nLANGUAGE: Unicode\nCODE:\n```\n1D6DC..1D6FA  ; Other_Math # L&  [31] MATHEMATICAL BOLD EPSILON SYMBOL..MATHEMATICAL ITALIC CAPITAL OMEGA\n1D6FC..1D714  ; Other_Math # L&  [25] MATHEMATICAL ITALIC SMALL ALPHA..MATHEMATICAL ITALIC SMALL OMEGA\n1D716..1D734  ; Other_Math # L&  [31] MATHEMATICAL ITALIC EPSILON SYMBOL..MATHEMATICAL BOLD ITALIC CAPITAL OMEGA\n1D736..1D74E  ; Other_Math # L&  [25] MATHEMATICAL BOLD ITALIC SMALL ALPHA..MATHEMATICAL BOLD ITALIC SMALL OMEGA\n1D750..1D76E  ; Other_Math # L&  [31] MATHEMATICAL BOLD ITALIC EPSILON SYMBOL..MATHEMATICAL SANS-SERIF BOLD CAPITAL OMEGA\n1D770..1D788  ; Other_Math # L&  [25] MATHEMATICAL SANS-SERIF BOLD SMALL ALPHA..MATHEMATICAL SANS-SERIF BOLD SMALL OMEGA\n1D78A..1D7A8  ; Other_Math # L&  [31] MATHEMATICAL SANS-SERIF BOLD EPSILON SYMBOL..MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL OMEGA\n1D7AA..1D7C2  ; Other_Math # L&  [25] MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL ALPHA..MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL OMEGA\n1D7C4..1D7CB  ; Other_Math # L&   [8] MATHEMATICAL SANS-SERIF BOLD ITALIC EPSILON SYMBOL..MATHEMATICAL BOLD SMALL DIGAMMA\n1D7CE..1D7FF  ; Other_Math # Nd  [50] MATHEMATICAL BOLD DIGIT ZERO..MATHEMATICAL MONOSPACE DIGIT NINE\n```\n\n----------------------------------------\n\nTITLE: Sample Applications Configuration\nDESCRIPTION: Configures multiple sample applications using the add_sample macro. Includes conditional compilation for certain samples based on constexpr support.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/yap/example/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_sample(minimal)\nadd_sample(hello_world)\nadd_sample(hello_world_redux)\nadd_sample(calc1)\nadd_sample(calc2a)\nadd_sample(calc2b)\nadd_sample(calc3)\nadd_sample(lazy_vector)\nadd_sample(tarray)\nadd_sample(vec3)\nadd_sample(vector)\nadd_sample(mixed)\nadd_sample(map_assign)\nadd_sample(future_group)\nadd_sample(transform_terminals)\nadd_sample(pipable_algorithms)\nif (constexpr_if_define STREQUAL \"-DBOOST_NO_CONSTEXPR_IF=0\")\n    add_sample(let)\n    add_sample(self_evaluation)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Defining deref Metafunction Template in C++\nDESCRIPTION: Defines the deref metafunction template that dereferences an iterator. It takes an Iterator type parameter and defines an internal type alias.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/deref.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      typename Iterator\n    >\nstruct deref\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Mixed-Type Operations with Complex Numbers in C++ Template Metaprogramming\nDESCRIPTION: This example demonstrates how to implement a complex number type and specialize the plus_impl metafunction to handle complex number addition. It shows tag-based dispatching with a complex_tag and verification of the operations using assertions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/NumericMetafunction.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nstruct complex_tag : int_<10> {};\n\ntemplate< typename Re, typename Im > struct complex\n{\n    typedef complex_tag tag;\n    typedef complex type;\n    typedef Re real;\n    typedef Im imag;\n};\n\ntemplate< typename C > struct real : C::real {};\ntemplate< typename C > struct imag : C::imag {};\n\nnamespace boost { namespace mpl {\n\ntemplate<>\nstruct plus_impl< complex_tag,complex_tag >\n{\n    template< typename N1, typename N2 > struct apply\n        : complex<\n              plus< typename N1::real, typename N2::real >\n            , plus< typename N1::imag, typename N2::imag >\n            >\n    {\n    };\n};\n\n}}\n\ntypedef complex< int_<5>, int_<-1> > c1;\ntypedef complex< int_<-5>, int_<1> > c2;\n\ntypedef plus<c1,c2> r1;\nBOOST_MPL_ASSERT_RELATION( real<r1>::value, ==, 0 );\nBOOST_MPL_ASSERT_RELATION( imag<r1>::value, ==, 0 );\n\ntypedef plus<c1,c1> r2;\nBOOST_MPL_ASSERT_RELATION( real<r2>::value, ==, 10 );\nBOOST_MPL_ASSERT_RELATION( imag<r2>::value, ==, -2 );\n\ntypedef plus<c2,c2> r3;\nBOOST_MPL_ASSERT_RELATION( real<r3>::value, ==, -10 );\nBOOST_MPL_ASSERT_RELATION( imag<r3>::value, ==, 2 );\n```\n\n----------------------------------------\n\nTITLE: Specifying Include Directories for Boost Property Map\nDESCRIPTION: This code specifies that the include directories for the Boost Property Map library should be set up. By declaring these directories as INTERFACE, it ensures that any target linking to this library will also have access to these include paths. This is vital for proper header file accessibility during compilation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/property_map/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(boost_property_map INTERFACE include)\n```\n\n----------------------------------------\n\nTITLE: Using Sequence Containers with Boost Pointer Containers\nDESCRIPTION: This snippet shows how to utilize sequence containers like boost::ptr_deque for operations that require no ordering while managing animal objects.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/tutorial.rst#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\nboost::ptr_deque<animal> deq;\ndeq.push_front( new animal );    \ndeq.pop_front();\n```\n\n----------------------------------------\n\nTITLE: Defining inherit_linearly Metafunction in C++\nDESCRIPTION: Declaration of the inherit_linearly metafunction template. It uses fold to apply a binary Node to Types and Root.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/inherit_linearly.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      typename Types\n    , typename Node\n    , typename Root = empty_base\n    >\nstruct inherit_linearly\n    : fold<Types,Root,Node>\n{\n};\n```\n\n----------------------------------------\n\nTITLE: Creating an Interface Library\nDESCRIPTION: This snippet creates an interface library named 'boost_function_types' and sets an alias 'Boost::function_types' for it, allowing it to be referred to in other parts of the project.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/function_types/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library( boost_function_types INTERFACE )\nadd_library( Boost::function_types ALIAS boost_function_types )\n```\n\n----------------------------------------\n\nTITLE: Dependencies List Entry Format\nDESCRIPTION: The standard format used for documenting each Node.js package dependency, including name, version, project home, license URL, license name and ID.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/LICENSES-OTHER-COMPONENTS.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#### [package-name]\n\nName: [package-name]\nVersion: [x.x.x]\nProject Home: [url]\nLicense: [license-url]\nLicense Name: [license-name]\nLicense Id: [license-id]\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding Testing Subdirectory\nDESCRIPTION: This snippet checks whether testing should be built by verifying the existence of a test directory and, if found, adds it as a subdirectory to the build process. This allows modular testing of the Boost Functional library, contributing to better maintainability.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/functional/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(BUILD_TESTING AND EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/test/CMakeLists.txt\")\n\n  add_subdirectory(test)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Including bitxor_ Metafunction Headers in C++\nDESCRIPTION: Header files required to use the bitxor_ metafunction in C++ code.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/bitxor_.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/bitxor.hpp>\n#include <boost/mpl/bitwise.hpp>\n```\n\n----------------------------------------\n\nTITLE: Applying numeric_cast Metafunction in C++\nDESCRIPTION: Demonstrates the usage of numeric_cast metafunction. It applies the metafunction to convert a value x of type with tag x_tag to a type with tag y_tag.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/numeric_cast.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntypedef apply_wrap2< numeric_cast<x_tag,y_tag>,x >::type  r;\n```\n\n----------------------------------------\n\nTITLE: Setting Private Include Directories for ArangoDB Index Library\nDESCRIPTION: This CMake command sets the private include directories for the `arango_indexes` library. These directories contain headers that are only used internally by the library and are not exposed to external projects. Includes directories for arangod, Enterprise features and IResearch 3rd party function2 are defined.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/Indexes/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(arango_indexes PRIVATE\n  \"${PROJECT_SOURCE_DIR}/arangod\"\n  \"${PROJECT_SOURCE_DIR}/${ENTERPRISE_INCLUDE_DIR}\"\n  \"${PROJECT_SOURCE_DIR}/3rdParty/iresearch/external/function2\"\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Linking to V8 Server\nDESCRIPTION: If the V8 engine is enabled, this snippet links the 'arango_v8server' library to the test executable, allowing the tests to utilize V8 features if required.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/IResearch/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif (USE_V8)\\\n  target_link_libraries(arangodbtests-iresearch arango_v8server)\\\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Move Assignment Operation for basic_result Class in C++\nDESCRIPTION: Move assignment operator that propagates constexpr, triviality and noexcept properties. Requires both value_type and error_type to implement move assignment. Complexity depends on value_type presence and uses move assignment or construction as appropriate.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/basic_result/move_assignment.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nbasic_result &operator=(basic_result &&)\n```\n\n----------------------------------------\n\nTITLE: Example Usage of front Metafunction in C++\nDESCRIPTION: Provides examples of using the 'front' metafunction with different list types and asserting the expected results using BOOST_MPL_ASSERT.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/front.rst#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\ntypedef list<long>::type types1;\ntypedef list<int,long>::type types2;\ntypedef list<char,int,long>::type types3;\n\nBOOST_MPL_ASSERT(( is_same< front<types1>::type, long > ));\nBOOST_MPL_ASSERT(( is_same< front<types2>::type, int> ));\nBOOST_MPL_ASSERT(( is_same< front<types3>::type, char> ));\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries for Fuerte Test\nDESCRIPTION: Specifies the required library dependencies for the fuertetest executable, including ArangoDB core libraries, testing framework, and system libraries.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/Fuerte/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(fuertetest\n    arango\n    fuerte\n    gtest\n    boost_boost\n    ${OPENSSL_LIBRARIES}\n    ${CMAKE_THREAD_LIBS_INIT}\n)\n```\n\n----------------------------------------\n\nTITLE: Assignment Operator for Reversible Pointer Container in C++\nDESCRIPTION: This assignment operator takes another reversible pointer container as input, creating a clone of its contents. It guarantees exception safety and ensures the integrity of the container's data.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/reversible_ptr_container.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nreversible_ptr_container& operator=( const reversible_ptr_container& r );\n```\n\n----------------------------------------\n\nTITLE: Using BOOST_OUTCOME_TRYX Macro in C++\nDESCRIPTION: Demonstrates the usage of BOOST_OUTCOME_TRYX macro to evaluate an expression and handle potential failures. The macro emits the result if successful or returns from the function if unsuccessful.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/macros/tryx.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nauto x = y + BOOST_OUTCOME_TRYX(foo(z));\n```\n\n----------------------------------------\n\nTITLE: Defining max Metafunction Template in C++\nDESCRIPTION: Defines the template structure for the max metafunction, which takes two type parameters N1 and N2 and returns an unspecified type.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/max.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      typename N1\n    , typename N2\n    >\nstruct max\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode IDS_Trinary_Operator Characters\nDESCRIPTION: Lists Unicode code points classified as IDS_Trinary_Operator with their corresponding character classes. These are Ideographic Description Sequence operators that take three operands, used for describing complex CJK ideographs. The list contains 2 total code points.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/spirit/workbench/unicode/PropList.txt#2025-04-22_snippet_18\n\nLANGUAGE: unicode\nCODE:\n```\n2FF2..2FF3    ; IDS_Trinary_Operator # So   [2] IDEOGRAPHIC DESCRIPTION CHARACTER LEFT TO MIDDLE AND RIGHT..IDEOGRAPHIC DESCRIPTION CHARACTER ABOVE TO MIDDLE AND BELOW\n\n# Total code points: 2\n```\n\n----------------------------------------\n\nTITLE: Join_Control Character Property Definitions in Unicode 5.2.0\nDESCRIPTION: Lists all Unicode code points classified as Join_Control, which affect the joining behavior of surrounding characters. Contains 2 total code points with their Unicode categories and descriptions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/spirit/workbench/unicode/PropList.txt#2025-04-22_snippet_2\n\nLANGUAGE: Plain Text\nCODE:\n```\n200C..200D    ; Join_Control # Cf   [2] ZERO WIDTH NON-JOINER..ZERO WIDTH JOINER\n\n# Total code points: 2\n```\n\n----------------------------------------\n\nTITLE: Initializing a Backend Reader for Image Reading\nDESCRIPTION: This snippet shows how to set up a backend reader to interact directly with an image format in Boost.GIL. The backend is created by specifying the image filename and format tag, allowing access to image metadata such as width and height via the backend interface.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/io.rst.txt#2025-04-22_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\ntypedef get_reader_backend< const std::string\n                              , tag_t\n                              >::type backend_t;\n\nbackend_t backend = read_image_info( bmp_filename\n                                       , tag_t()\n                                       );\n\nBOOST_CHECK_EQUAL( backend._info._width , 127 );\nBOOST_CHECK_EQUAL( backend._info._height, 64 );\n```\n\n----------------------------------------\n\nTITLE: Dynamic Image Type Reading\nDESCRIPTION: Example of using dynamic image types with GIL IO to read images with flexible type matching.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/io.rst#2025-04-22_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\ntypedef mpl::vector< gray8_image_t\n               , gray16_image_t\n               , rgb8_image_t\n               , rgba_image_t\n               > my_img_types;\n\nany_image< my_img_types > runtime_image;\n\nread_image( filename\n          , runtime_image\n          , tiff_tag()\n          );\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Pattern Syntax Characters\nDESCRIPTION: This code snippet defines Unicode characters with the Pattern_Syntax property. It includes their hexadecimal codes, category abbreviations, and descriptions. The characters range from ornamental quotation marks to mathematical symbols and braille patterns.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/spirit/workbench/unicode/PropList.txt#2025-04-22_snippet_31\n\nLANGUAGE: Unicode\nCODE:\n```\n276F          ; Pattern_Syntax # Pe       HEAVY RIGHT-POINTING ANGLE QUOTATION MARK ORNAMENT\n2770          ; Pattern_Syntax # Ps       HEAVY LEFT-POINTING ANGLE BRACKET ORNAMENT\n2771          ; Pattern_Syntax # Pe       HEAVY RIGHT-POINTING ANGLE BRACKET ORNAMENT\n2772          ; Pattern_Syntax # Ps       LIGHT LEFT TORTOISE SHELL BRACKET ORNAMENT\n2773          ; Pattern_Syntax # Pe       LIGHT RIGHT TORTOISE SHELL BRACKET ORNAMENT\n2774          ; Pattern_Syntax # Ps       MEDIUM LEFT CURLY BRACKET ORNAMENT\n2775          ; Pattern_Syntax # Pe       MEDIUM RIGHT CURLY BRACKET ORNAMENT\n2794          ; Pattern_Syntax # So       HEAVY WIDE-HEADED RIGHTWARDS ARROW\n2795..2797    ; Pattern_Syntax # Cn   [3] <reserved-2795>..<reserved-2797>\n2798..27AF    ; Pattern_Syntax # So  [24] HEAVY SOUTH EAST ARROW..NOTCHED LOWER RIGHT-SHADOWED WHITE RIGHTWARDS ARROW\n27B0          ; Pattern_Syntax # Cn       <reserved-27B0>\n27B1..27BE    ; Pattern_Syntax # So  [14] NOTCHED UPPER RIGHT-SHADOWED WHITE RIGHTWARDS ARROW..OPEN-OUTLINED RIGHTWARDS ARROW\n27BF          ; Pattern_Syntax # Cn       <reserved-27BF>\n27C0..27C4    ; Pattern_Syntax # Sm   [5] THREE DIMENSIONAL ANGLE..OPEN SUPERSET\n27C5          ; Pattern_Syntax # Ps       LEFT S-SHAPED BAG DELIMITER\n27C6          ; Pattern_Syntax # Pe       RIGHT S-SHAPED BAG DELIMITER\n27C7..27CA    ; Pattern_Syntax # Sm   [4] OR WITH DOT INSIDE..VERTICAL BAR WITH HORIZONTAL STROKE\n27CB          ; Pattern_Syntax # Cn       <reserved-27CB>\n27CC          ; Pattern_Syntax # Sm       LONG DIVISION\n27CD..27CF    ; Pattern_Syntax # Cn   [3] <reserved-27CD>..<reserved-27CF>\n27D0..27E5    ; Pattern_Syntax # Sm  [22] WHITE DIAMOND WITH CENTRED DOT..WHITE SQUARE WITH RIGHTWARDS TICK\n27E6          ; Pattern_Syntax # Ps       MATHEMATICAL LEFT WHITE SQUARE BRACKET\n27E7          ; Pattern_Syntax # Pe       MATHEMATICAL RIGHT WHITE SQUARE BRACKET\n27E8          ; Pattern_Syntax # Ps       MATHEMATICAL LEFT ANGLE BRACKET\n27E9          ; Pattern_Syntax # Pe       MATHEMATICAL RIGHT ANGLE BRACKET\n27EA          ; Pattern_Syntax # Ps       MATHEMATICAL LEFT DOUBLE ANGLE BRACKET\n27EB          ; Pattern_Syntax # Pe       MATHEMATICAL RIGHT DOUBLE ANGLE BRACKET\n27EC          ; Pattern_Syntax # Ps       MATHEMATICAL LEFT WHITE TORTOISE SHELL BRACKET\n27ED          ; Pattern_Syntax # Pe       MATHEMATICAL RIGHT WHITE TORTOISE SHELL BRACKET\n27EE          ; Pattern_Syntax # Ps       MATHEMATICAL LEFT FLATTENED PARENTHESIS\n27EF          ; Pattern_Syntax # Pe       MATHEMATICAL RIGHT FLATTENED PARENTHESIS\n27F0..27FF    ; Pattern_Syntax # Sm  [16] UPWARDS QUADRUPLE ARROW..LONG RIGHTWARDS SQUIGGLE ARROW\n2800..28FF    ; Pattern_Syntax # So [256] BRAILLE PATTERN BLANK..BRAILLE PATTERN DOTS-12345678\n2900..2982    ; Pattern_Syntax # Sm [131] RIGHTWARDS TWO-HEADED ARROW WITH VERTICAL STROKE..Z NOTATION TYPE COLON\n2983          ; Pattern_Syntax # Ps       LEFT WHITE CURLY BRACKET\n2984          ; Pattern_Syntax # Pe       RIGHT WHITE CURLY BRACKET\n2985          ; Pattern_Syntax # Ps       LEFT WHITE PARENTHESIS\n2986          ; Pattern_Syntax # Pe       RIGHT WHITE PARENTHESIS\n2987          ; Pattern_Syntax # Ps       Z NOTATION LEFT IMAGE BRACKET\n2988          ; Pattern_Syntax # Pe       Z NOTATION RIGHT IMAGE BRACKET\n2989          ; Pattern_Syntax # Ps       Z NOTATION LEFT BINDING BRACKET\n298A          ; Pattern_Syntax # Pe       Z NOTATION RIGHT BINDING BRACKET\n298B          ; Pattern_Syntax # Ps       LEFT SQUARE BRACKET WITH UNDERBAR\n298C          ; Pattern_Syntax # Pe       RIGHT SQUARE BRACKET WITH UNDERBAR\n298D          ; Pattern_Syntax # Ps       LEFT SQUARE BRACKET WITH TICK IN TOP CORNER\n298E          ; Pattern_Syntax # Pe       RIGHT SQUARE BRACKET WITH TICK IN BOTTOM CORNER\n298F          ; Pattern_Syntax # Ps       LEFT SQUARE BRACKET WITH TICK IN BOTTOM CORNER\n2990          ; Pattern_Syntax # Pe       RIGHT SQUARE BRACKET WITH TICK IN TOP CORNER\n2991          ; Pattern_Syntax # Ps       LEFT ANGLE BRACKET WITH DOT\n2992          ; Pattern_Syntax # Pe       RIGHT ANGLE BRACKET WITH DOT\n2993          ; Pattern_Syntax # Ps       LEFT ARC LESS-THAN BRACKET\n2994          ; Pattern_Syntax # Pe       RIGHT ARC GREATER-THAN BRACKET\n2995          ; Pattern_Syntax # Ps       DOUBLE LEFT ARC GREATER-THAN BRACKET\n2996          ; Pattern_Syntax # Pe       DOUBLE RIGHT ARC LESS-THAN BRACKET\n2997          ; Pattern_Syntax # Ps       LEFT BLACK TORTOISE SHELL BRACKET\n2998          ; Pattern_Syntax # Pe       RIGHT BLACK TORTOISE SHELL BRACKET\n2999..29D7    ; Pattern_Syntax # Sm  [63] DOTTED FENCE..BLACK HOURGLASS\n29D8          ; Pattern_Syntax # Ps       LEFT WIGGLY FENCE\n29D9          ; Pattern_Syntax # Pe       RIGHT WIGGLY FENCE\n29DA          ; Pattern_Syntax # Ps       LEFT DOUBLE WIGGLY FENCE\n29DB          ; Pattern_Syntax # Pe       RIGHT DOUBLE WIGGLY FENCE\n29DC..29FB    ; Pattern_Syntax # Sm  [32] INCOMPLETE INFINITY..TRIPLE PLUS\n29FC          ; Pattern_Syntax # Ps       LEFT-POINTING CURVED ANGLE BRACKET\n29FD          ; Pattern_Syntax # Pe       RIGHT-POINTING CURVED ANGLE BRACKET\n29FE..2AFF    ; Pattern_Syntax # Sm [258] TINY..N-ARY WHITE VERTICAL BAR\n2B00..2B2F    ; Pattern_Syntax # So  [48] NORTH EAST WHITE ARROW..WHITE VERTICAL ELLIPSE\n2B30..2B44    ; Pattern_Syntax # Sm  [21] LEFT ARROW WITH SMALL CIRCLE..RIGHTWARDS ARROW THROUGH SUPERSET\n2B45..2B46    ; Pattern_Syntax # So   [2] LEFTWARDS QUADRUPLE ARROW..RIGHTWARDS QUADRUPLE ARROW\n2B47..2B4C    ; Pattern_Syntax # Sm   [6] REVERSE TILDE OPERATOR ABOVE RIGHTWARDS ARROW..RIGHTWARDS ARROW ABOVE REVERSE TILDE OPERATOR\n2B4D..2B4F    ; Pattern_Syntax # Cn   [3] <reserved-2B4D>..<reserved-2B4F>\n2B50..2B59    ; Pattern_Syntax # So  [10] WHITE MEDIUM STAR..HEAVY CIRCLED SALTIRE\n2B5A..2BFF    ; Pattern_Syntax # Cn [166] <reserved-2B5A>..<reserved-2BFF>\n2E00..2E01    ; Pattern_Syntax # Po   [2] RIGHT ANGLE SUBSTITUTION MARKER..RIGHT ANGLE DOTTED SUBSTITUTION MARKER\n2E02          ; Pattern_Syntax # Pi       LEFT SUBSTITUTION BRACKET\n2E03          ; Pattern_Syntax # Pf       RIGHT SUBSTITUTION BRACKET\n2E04          ; Pattern_Syntax # Pi       LEFT DOTTED SUBSTITUTION BRACKET\n2E05          ; Pattern_Syntax # Pf       RIGHT DOTTED SUBSTITUTION BRACKET\n2E06..2E08    ; Pattern_Syntax # Po   [3] RAISED INTERPOLATION MARKER..DOTTED TRANSPOSITION MARKER\n2E09          ; Pattern_Syntax # Pi       LEFT TRANSPOSITION BRACKET\n2E0A          ; Pattern_Syntax # Pf       RIGHT TRANSPOSITION BRACKET\n2E0B          ; Pattern_Syntax # Po       RAISED SQUARE\n2E0C          ; Pattern_Syntax # Pi       LEFT RAISED OMISSION BRACKET\n2E0D          ; Pattern_Syntax # Pf       RIGHT RAISED OMISSION BRACKET\n2E0E..2E16    ; Pattern_Syntax # Po   [9] EDITORIAL CORONIS..DOTTED RIGHT-POINTING ANGLE\n2E17          ; Pattern_Syntax # Pd       DOUBLE OBLIQUE HYPHEN\n2E18..2E19    ; Pattern_Syntax # Po   [2] INVERTED INTERROBANG..PALM BRANCH\n2E1A          ; Pattern_Syntax # Pd       HYPHEN WITH DIAERESIS\n2E1B          ; Pattern_Syntax # Po       TILDE WITH RING ABOVE\n2E1C          ; Pattern_Syntax # Pi       LEFT LOW PARAPHRASE BRACKET\n2E1D          ; Pattern_Syntax # Pf       RIGHT LOW PARAPHRASE BRACKET\n2E1E..2E1F    ; Pattern_Syntax # Po   [2] TILDE WITH DOT ABOVE..TILDE WITH DOT BELOW\n2E20          ; Pattern_Syntax # Pi       LEFT VERTICAL BAR WITH QUILL\n2E21          ; Pattern_Syntax # Pf       RIGHT VERTICAL BAR WITH QUILL\n2E22          ; Pattern_Syntax # Ps       TOP LEFT HALF BRACKET\n2E23          ; Pattern_Syntax # Pe       TOP RIGHT HALF BRACKET\n2E24          ; Pattern_Syntax # Ps       BOTTOM LEFT HALF BRACKET\n2E25          ; Pattern_Syntax # Pe       BOTTOM RIGHT HALF BRACKET\n2E26          ; Pattern_Syntax # Ps       LEFT SIDEWAYS U BRACKET\n2E27          ; Pattern_Syntax # Pe       RIGHT SIDEWAYS U BRACKET\n2E28          ; Pattern_Syntax # Ps       LEFT DOUBLE PARENTHESIS\n2E29          ; Pattern_Syntax # Pe       RIGHT DOUBLE PARENTHESIS\n2E2A..2E2E    ; Pattern_Syntax # Po   [5] TWO DOTS OVER ONE DOT PUNCTUATION..REVERSED QUESTION MARK\n2E2F          ; Pattern_Syntax # Lm       VERTICAL TILDE\n2E30..2E31    ; Pattern_Syntax # Po   [2] RING POINT..WORD SEPARATOR MIDDLE DOT\n2E32..2E7F    ; Pattern_Syntax # Cn  [78] <reserved-2E32>..<reserved-2E7F>\n3001..3003    ; Pattern_Syntax # Po   [3] IDEOGRAPHIC COMMA..DITTO MARK\n3008          ; Pattern_Syntax # Ps       LEFT ANGLE BRACKET\n3009          ; Pattern_Syntax # Pe       RIGHT ANGLE BRACKET\n300A          ; Pattern_Syntax # Ps       LEFT DOUBLE ANGLE BRACKET\n300B          ; Pattern_Syntax # Pe       RIGHT DOUBLE ANGLE BRACKET\n300C          ; Pattern_Syntax # Ps       LEFT CORNER BRACKET\n300D          ; Pattern_Syntax # Pe       RIGHT CORNER BRACKET\n300E          ; Pattern_Syntax # Ps       LEFT WHITE CORNER BRACKET\n300F          ; Pattern_Syntax # Pe       RIGHT WHITE CORNER BRACKET\n3010          ; Pattern_Syntax # Ps       LEFT BLACK LENTICULAR BRACKET\n3011          ; Pattern_Syntax # Pe       RIGHT BLACK LENTICULAR BRACKET\n3012..3013    ; Pattern_Syntax # So   [2] POSTAL MARK..GETA MARK\n3014          ; Pattern_Syntax # Ps       LEFT TORTOISE SHELL BRACKET\n3015          ; Pattern_Syntax # Pe       RIGHT TORTOISE SHELL BRACKET\n3016          ; Pattern_Syntax # Ps       LEFT WHITE LENTICULAR BRACKET\n3017          ; Pattern_Syntax # Pe       RIGHT WHITE LENTICULAR BRACKET\n3018          ; Pattern_Syntax # Ps       LEFT WHITE TORTOISE SHELL BRACKET\n3019          ; Pattern_Syntax # Pe       RIGHT WHITE TORTOISE SHELL BRACKET\n301A          ; Pattern_Syntax # Ps       LEFT WHITE SQUARE BRACKET\n301B          ; Pattern_Syntax # Pe       RIGHT WHITE SQUARE BRACKET\n301C          ; Pattern_Syntax # Pd       WAVE DASH\n301D          ; Pattern_Syntax # Ps       REVERSED DOUBLE PRIME QUOTATION MARK\n301E..301F    ; Pattern_Syntax # Pe   [2] DOUBLE PRIME QUOTATION MARK..LOW DOUBLE PRIME QUOTATION MARK\n3020          ; Pattern_Syntax # So       POSTAL MARK FACE\n3030          ; Pattern_Syntax # Pd       WAVY DASH\nFD3E          ; Pattern_Syntax # Ps       ORNATE LEFT PARENTHESIS\n```\n\n----------------------------------------\n\nTITLE: Including the always Metafunction Header in C++\nDESCRIPTION: This code snippet shows how to include the header file for the 'always' metafunction in a C++ program. It is necessary to use the metafunction in your code.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/always.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/always.hpp>\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost Lexical Cast Library in CMake\nDESCRIPTION: Sets up the Boost Lexical Cast library as an interface library, defines its dependencies, and configures include directories. It also sets up an alias for the library and conditionally includes tests.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/lexical_cast/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.16)\n\nproject(boost_lexical_cast VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n\nadd_library(boost_lexical_cast INTERFACE)\nadd_library(Boost::lexical_cast ALIAS boost_lexical_cast)\n\ntarget_include_directories(boost_lexical_cast INTERFACE include)\n\ntarget_link_libraries(boost_lexical_cast\n  INTERFACE\n    Boost::array\n    Boost::assert\n    Boost::config\n    Boost::container\n    Boost::core\n    Boost::integer\n    Boost::numeric_conversion\n    Boost::range\n    Boost::static_assert\n    Boost::throw_exception\n    Boost::type_traits\n)\n\nif(BUILD_TESTING AND EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/test/CMakeLists.txt\")\n\n  add_subdirectory(test)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating static function object for first_of in C++\nDESCRIPTION: Creates a static variable named first_of that can be used to construct first_of_adaptor instances. This provides a convenient function-like interface for creating the adaptors.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/first_of.hpp.txt#2025-04-22_snippet_6\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_HOF_DECLARE_STATIC_VAR(first_of, detail::make<first_of_adaptor>);\n```\n\n----------------------------------------\n\nTITLE: Accessing Stored Error in Result Object in C++\nDESCRIPTION: Method that provides narrow contract access to the stored error. It invokes NoValuePolicy::narrow_error_check() before returning a reference to the error. For void error_type, only a const overload returning void is available.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/basic_result/assume_error_lvalue_const.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nconst error_type &assume_error() const & noexcept\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost.Python Library with CMake\nDESCRIPTION: This CMake configuration snippet sets up the Boost.Python library project, finds Python components, and defines a shared or static library depending on the CMake build settings. It ensures the project compiles and links against necessary Boost and Python dependencies, and sets compile definitions for dynamic and static linking modes.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14...3.20)\n\nproject(boost_python VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n\nfind_package(Python REQUIRED COMPONENTS Development OPTIONAL_COMPONENTS NumPy)\n\nif(Python_NumPy_FOUND)\n  message(STATUS \"Boost.Python: using Python ${Python_VERSION} with NumPy at ${Python_NumPy_INCLUDE_DIRS}\")\nelse()\n  message(STATUS \"Boost.Python: using Python ${Python_VERSION} without NumPy\")\nendif()\n\n# boost_pythonXY\n\nset(_pyver ${Python_VERSION_MAJOR}${Python_VERSION_MINOR})\nset(_boost_python boost_python${_pyver})\n\nadd_library(${_boost_python}\n  src/dict.cpp\n  src/errors.cpp\n  src/exec.cpp\n  src/import.cpp\n  src/list.cpp\n  src/long.cpp\n  src/module.cpp\n  src/object_operators.cpp\n  src/object_protocol.cpp\n  src/slice.cpp\n  src/str.cpp\n  src/tuple.cpp\n  src/wrapper.cpp\n  src/converter/from_python.cpp\n  src/converter/registry.cpp\n  src/converter/type_id.cpp\n  src/converter/builtin_converters.cpp\n  src/converter/arg_to_python_base.cpp\n  src/object/enum.cpp\n  src/object/class.cpp\n  src/object/function.cpp\n  src/object/inheritance.cpp\n  src/object/life_support.cpp\n  src/object/pickle_support.cpp\n  src/object/iterator.cpp\n  src/object/stl_iterator.cpp\n  src/object_protocol.cpp\n  src/object_operators.cpp\n  src/object/function_doc_signature.cpp\n)\n\nadd_library(Boost::python${_pyver} ALIAS ${_boost_python})\n\ntarget_include_directories(${_boost_python} PUBLIC include)\n\ntarget_link_libraries(${_boost_python}\n  PUBLIC\n    Boost::align\n    Boost::bind\n    Boost::config\n    Boost::conversion\n    Boost::core\n    Boost::detail\n    Boost::foreach\n    Boost::function\n    Boost::iterator\n    Boost::lexical_cast\n    Boost::mpl\n    Boost::numeric_conversion\n    Boost::preprocessor\n    Boost::smart_ptr\n    Boost::static_assert\n    Boost::tuple\n    Boost::type_traits\n    Boost::utility\n\n    Python::Module\n\n  PRIVATE\n    Boost::graph\n    Boost::integer\n    Boost::property_map\n)\n\ntarget_compile_definitions(${_boost_python}\n  PUBLIC BOOST_PYTHON_NO_LIB\n  PRIVATE BOOST_PYTHON_SOURCE\n)\n\nif(BUILD_SHARED_LIBS)\n  target_compile_definitions(${_boost_python} PUBLIC BOOST_PYTHON_DYN_LINK)\nelse()\n  target_compile_definitions(${_boost_python} PUBLIC BOOST_PYTHON_STATIC_LINK BOOST_PYTHON_STATIC_LIB)\nendif()\n\n# Boost::python alias\n\nadd_library(boost_python INTERFACE)\nadd_library(Boost::python ALIAS boost_python)\ntarget_link_libraries(boost_python INTERFACE Boost::python${_pyver})\n\n# Installation\n\nif(BOOST_SUPERPROJECT_VERSION AND NOT CMAKE_VERSION VERSION_LESS 3.13)\n  boost_install(TARGETS ${_boost_python} boost_python VERSION ${BOOST_SUPERPROJECT_VERSION} HEADER_DIRECTORY include)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building with CMake\nDESCRIPTION: Series of commands to build the project using CMake build system on Linux\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/lib/Geo/karney/00README.txt#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmkdir BUILD\ncd BUILD\ncmake ..\nmake\necho 30 0 29.5 179.5 | ./inverse\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Options in CMake for ArangoDB\nDESCRIPTION: Sets various build options including disabling shared libraries, examples, and header installation. These settings are forced and cached.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/s2geometry/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nset(BUILD_SHARED_LIBS OFF CACHE BOOL \"Build shared libraries\" FORCE)\nset(BUILD_EXAMPLES OFF CACHE BOOL \"Build examples\" FORCE)\nset(INSTALL_HEADERS OFF CACHE BOOL \"Install headers\" FORCE)\n```\n\n----------------------------------------\n\nTITLE: Extending Size Metafunction for Custom Bitset Types in C++\nDESCRIPTION: This example demonstrates how to extend the MPL size metafunction for a custom family of bitset types. It defines a custom tag and types that use it, then specializes the size_impl template for that tag.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/TagDispatchedMetafunction.rst#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\n#include <boost/mpl/size.hpp>\n\nnamespace user {\n\nstruct bitset_tag;\n\nstruct bitset0\n{\n    typedef bitset_tag tag;\n    // ...\n};\n\ntemplate< typename B0 > struct bitset1\n{\n    typedef bitset_tag tag;\n    // ...\n};\n\ntemplate< typename B0, *...,* typename B\\ *n* > struct bitset\\ *n*\n{\n    typedef bitset_tag tag;\n    // ...\n};\n\n} // namespace user\n\nnamespace boost { namespace mpl {\ntemplate<> struct size_impl<user::bitset_tag>\n{\n    template< typename Bitset > struct apply\n    {\n        typedef typename Bitset::size type;\n    };\n};\n}}\n```\n\n----------------------------------------\n\nTITLE: Implementing Storage Holder Class for Object Construction in C++\nDESCRIPTION: A helper class for safely constructing objects in aligned storage. It manages the storage pointer, provides access to the constructed object, and handles proper destruction of the object when the holder goes out of scope.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/construct.hpp.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nstruct storage_holder\n{\n    storage * s;\n    storage_holder(storage* x) noexcept : s(x)\n    {}\n\n    T& data() noexcept\n    {\n        return *reinterpret_cast<T*>(s);\n    }\n\n    ~storage_holder() noexcept(noexcept(std::declval<T>().~T()))\n    {\n        this->data().~T();\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Beast Library Components with CMake\nDESCRIPTION: CMake directives to include various subdirectories for building Beast library components. Includes advanced features, HTTP, WebSocket implementations, and an echo operation example.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/beast/example/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory (advanced)\nadd_subdirectory (http)\nadd_subdirectory (websocket)\n\nadd_subdirectory (echo-op)\n```\n\n----------------------------------------\n\nTITLE: Defining Include Directories for Boost DLL\nDESCRIPTION: This snippet specifies the include directories for the Boost DLL interface library. It ensures that other targets using this library can find the necessary header files.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/dll/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(boost_dll INTERFACE include)\n```\n\n----------------------------------------\n\nTITLE: Defining MutableHomogeneousColorBaseConcept in C++\nDESCRIPTION: This snippet defines the MutableHomogeneousColorBaseConcept, which extends the HomogeneousColorBaseConcept, providing mutability to the structure. It includes a method to dynamically access elements.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/color_base.rst.txt#2025-04-22_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\nconcept MutableHomogeneousColorBaseConcept<MutableColorBaseConcept CB>\n    : HomogeneousColorBaseConcept<CB>\n{\n    kth_element_reference_type<0>::type dynamic_at_c(const CB&, std::size_t n);\n};\n```\n\n----------------------------------------\n\nTITLE: Reverse Begin Iterator for Reversible Pointer Container in C++\nDESCRIPTION: This method provides a reverse iterator starting from the last element of the container, allowing traversal backward while ensuring exception safety.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/reversible_ptr_container.rst#2025-04-22_snippet_8\n\nLANGUAGE: C++\nCODE:\n```\nreverse_iterator rbegin();\n```\n\nLANGUAGE: C++\nCODE:\n```\nconst_reverse_iterator rbegin() const;\n```\n\n----------------------------------------\n\nTITLE: Formatting Currency with Boost.Locale in C++\nDESCRIPTION: Demonstrates how to format a number as currency using Boost.Locale manipulators. The example shows outputting a currency value and parsing a currency input.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/doc/formatting_and_parsing.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ncout << as::currency << 123.45 << endl;\n// display 123.45 in local currency representation.\ncin >> as::currency >> x ;\n// Parse currency representation and store it in x\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version and Project Metadata\nDESCRIPTION: This snippet sets the minimum required version of CMake and defines the project metadata for building the Boost DLL. It uses C++ as the language for the project and specifies the Boost version.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/dll/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.16)\n\nproject(boost_dll VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Defining c_str Metafunction Template in C++\nDESCRIPTION: Declares the c_str metafunction template that converts a sequence of integral constants to a null-terminated byte string. It defines a type member and a static const char array.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/c_str.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n    typename Sequence\n>\nstruct c_str\n{\n    typedef |unspecified| type;\n    static char const value[];\n};\n```\n\n----------------------------------------\n\nTITLE: Creating arangodbtests Executable in CMake\nDESCRIPTION: Defines the main arangodbtests executable target using all the previously specified test source files.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/CMakeLists.txt#2025-04-22_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(arangodbtests\n  ${ARANGODB_TESTS_SOURCES})\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition Using Boost Parameter Macros\nDESCRIPTION: Definition of named parameters using BOOST_PARAMETER_NAME macro for value category testing.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_45\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_PARAMETER_NAME((_lrc, kw) in(lrc))\nBOOST_PARAMETER_NAME((_lr, kw) in_out(lr))\nBOOST_PARAMETER_NAME((_rrc, kw) in(rrc))\nBOOST_PARAMETER_NAME((_rr, kw) consume(rr))\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Variant Implementations with g++ 7.4.0 (Unoptimized)\nDESCRIPTION: Compile time and run time benchmarks for variant2, boost::variant, and std::variant using g++ 7.4.0 with -O0 optimization level. Shows compilation times and execution times for 100 million iterations.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/variant2/benchmark/benchmark2.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n      variant2 (-DONLY_V2): 1739 ms\nboost::variant (-DONLY_BV): 3113 ms\n  std::variant (-DONLY_SV): 1719 ms\n```\n\nLANGUAGE: text\nCODE:\n```\nN=100000000:\n        prefix:   5163 ms; S=416666583333336\n      variant2:  20628 ms; S=416666583333336\nboost::variant:  43308 ms; S=416666583333336\n  std::variant:  42375 ms; S=416666583333336\n```\n\n----------------------------------------\n\nTITLE: Evaluating Composed Arguments in C++\nDESCRIPTION: Examples of function evaluation using composed arguments with assignment operators. Shows assignment of different bitset types to named parameters.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_59\n\nLANGUAGE: cpp\nCODE:\n```\nb.evaluate((  // composed arguments\n    _rr0 = rvalue_bitset<3>()\n  , _lrc0 = lvalue_const_bitset<0>()\n  , _lr0 = lvalue_bitset<1>()\n  , _rrc0 = rvalue_const_bitset<2>()\n));\n```\n\n----------------------------------------\n\nTITLE: Using for_each with Range in C++ Main Function\nDESCRIPTION: This main function demonstrates how to use the for_each algorithm with a range of integers from 0 to 9, applying the value_printer function object to each element.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/for_each.rst#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\nint main()\n{\n    for_each< range_c<int,0,10> >( value_printer() );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Pickled C++ Objects in Python\nDESCRIPTION: Python code demonstrating how to pickle and unpickle C++ objects with Boost.Python's serialization support.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/doc/article.rst#2025-04-22_snippet_20\n\nLANGUAGE: Python\nCODE:\n```\n>>> import hello\n>>> import pickle\n>>> a_world = hello.World(\"howdy\")\n>>> pickle.dump(a_world, open(\"my_world\", \"w\"))\n```\n\n----------------------------------------\n\nTITLE: Creating Pipable Triple Sum Function in C++\nDESCRIPTION: This code demonstrates creating a pipable triple sum function using the 'pipable' adaptor and 'limit' decorator. It shows a limitation where partial application doesn't cause an immediate error.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/doc/src/partialfunctions.md.txt#2025-04-22_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nauto sum = pipable(limit_c<3>([](int x, int y, int z)\n{\n    return x+y+z;\n}));\n```\n\n----------------------------------------\n\nTITLE: Coroutine-Based ASIO with Exception Throwing\nDESCRIPTION: Example of using C++ Coroutines with ASIO to simplify asynchronous code. The default implementation throws exceptions on failure.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/recipes/asio-integration.md#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nasio::awaitable<void> MySock::async_read_and_process()\n{\n  // Type sugaring\n  asio::experimental::await_token token =\n    co_await asio::experimental::this_coro::token();\n  \n  try\n  {\n    // We can now write code that looks synchronous, but is still asynchronous.\n    for(;;)\n    {\n      size_t bytes_transferred = co_await skt.async_read_some(buffer(read_buffer_), token);\n      process_read_buffer(bytes_transferred);\n      if(!still_reading())\n        break;\n    }\n  }\n  catch(const system_error &e)\n  {\n    process_error(e.code());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Error Code Throw as System Error Policy\nDESCRIPTION: A policy that converts errors to system_error when observations fail. Handles exception rethrowing and error code conversion with specific behavior for result and outcome types.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/tutorial/essential/no-value/builtin.md#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nerror_code_throw_as_system_error<T, EC, EP>\n```\n\n----------------------------------------\n\nTITLE: Channel Conversion Example\nDESCRIPTION: This code demonstrates channel conversion using `channel_convert`. It initializes `channel1` with its maximum value, asserts its value, converts it to a `bits16` type using `channel_convert`, and then asserts the converted value. This exemplifies converting between different channel types while preserving the relative intensity.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/channel.rst#2025-04-22_snippet_12\n\nLANGUAGE: cpp\nCODE:\n```\n  channel1 = channel_traits<channel16_0_5_reference_t>::max_value();\n  assert(channel1 == 31);\n\n  bits16 chan16 = channel_convert<bits16>(channel1);\n  assert(chan16 == 65535);\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Options\nDESCRIPTION: Defines build options for tests and shared library builds, and sets up C++17 standard requirement with validation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/json-schema-validation/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\noption(ARANGO_VALIDATION_TESTS \"build tests\" OFF)\noption(ARANGO_VALIDATION_BUILD_SHARED \"build shared lib\" OFF)\n\nset(CMAKE_CXX_STANDARD 17 CACHE STRING \"Required C++ standard\")\nif(CMAKE_CXX_STANDARD LESS 17)\n    message(FATAL_ERROR \"Incorrect C++ standard was set. 'arangodb-validation' requires C++17 minimum\")\nendif()\n\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n```\n\n----------------------------------------\n\nTITLE: Configuring Testing for Boost Chrono\nDESCRIPTION: Sets up testing for the Boost Chrono library if testing is enabled and the test directory exists.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/chrono/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(BUILD_TESTING AND EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/test/CMakeLists.txt\")\n\n  add_subdirectory(test)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Checking Platform Features for Boost.Nowide\nDESCRIPTION: Performs platform capability checks for large file support (LFS) and attribute initialization priority, setting appropriate compiler definitions based on the results.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/nowide/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nfile(READ ${CMAKE_CURRENT_SOURCE_DIR}/config/check_lfs_support.cpp lfsSource)\ncheck_cxx_source_compiles(\"${lfsSource}\" BOOST_NOWIDE_HAS_LFS)\nfile(READ ${CMAKE_CURRENT_SOURCE_DIR}/config/check_attribute_init_priority.cpp attributeInitPrioritySource)\ncheck_cxx_source_compiles(\"${attributeInitPrioritySource}\" BOOST_NOWIDE_HAS_INIT_PRIORITY)\n```\n\n----------------------------------------\n\nTITLE: Building Boost.Locale with std Backend Only on Linux\nDESCRIPTION: Command to build Boost.Locale library on Linux using only the std backend, disabling POSIX and ICU backends.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/doc/building_boost_locale.txt#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n./bjam boost.locale.posix=off boost.locale.icu=off --with-locale stage\n```\n\n----------------------------------------\n\nTITLE: Memory Based Iterator Concept Definition\nDESCRIPTION: Defines the `MemoryBasedIteratorConcept` for random access traversal iterators. It specifies the requirement for byte-to-memunit conversion, and the functions to determine the memory unit step and distance, and for advancing the iterator by a given memory-unit distance.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/pixel_iterator.rst.txt#2025-04-22_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\nconcept MemoryBasedIteratorConcept\n<\n    boost_concepts::RandomAccessTraversalConcept Iterator\n>\n{\n  typename byte_to_memunit<Iterator>; where metafunction<byte_to_memunit<Iterator> >;\n  std::ptrdiff_t      memunit_step(const Iterator&);\n  std::ptrdiff_t      memunit_distance(const Iterator& , const Iterator&);\n  void                memunit_advance(Iterator&, std::ptrdiff_t diff);\n  Iterator            memunit_advanced(const Iterator& p, std::ptrdiff_t diff) { Iterator tmp; memunit_advance(tmp,diff); return tmp; }\n  Iterator::reference memunit_advanced_ref(const Iterator& p, std::ptrdiff_t diff) { return *memunit_advanced(p,diff); }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost Logic Library Build with CMake\nDESCRIPTION: Sets up CMake build configuration for Boost Logic library. Defines minimum CMake version, creates an interface library target, and specifies dependencies on Boost Config and Core components.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/logic/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required( VERSION 3.5...3.20 )\nproject( boost_logic VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX )\n\nadd_library( boost_logic INTERFACE )\nadd_library( Boost::logic ALIAS boost_logic )\n\ntarget_include_directories( boost_logic INTERFACE include )\n\ntarget_link_libraries( boost_logic\n    INTERFACE\n        Boost::config\n        Boost::core\n)\n```\n\n----------------------------------------\n\nTITLE: Declaring functions f and g using outcome and result\nDESCRIPTION: This snippet shows the declaration of two functions, `f` and `g`.  `f` returns an `outcome<int>`, representing either a successful integer value or a failure represented by an `std::exception_ptr`. `g` returns a `result<int, std::error_code>`, representing either a successful integer value or a failure represented by an `std::error_code`.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/tutorial/essential/outcome/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n\n// clang-format off\noutcome<int> f();\nresult<int, std::error_code> g();\n// clang-format on\n\n```\n\n----------------------------------------\n\nTITLE: Defining Sample Addition Macro for STL Interfaces Tests\nDESCRIPTION: Creates a reusable macro for adding sample executables that link against the stl_interfaces library. The macro handles compilation flags, testing setup, and platform-specific linking for Clang on Linux.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/stl_interfaces/example/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nmacro(add_sample name)\n    add_executable(${name} ${name}.cpp)\n    target_link_libraries(${name} stl_interfaces)\n    set_property(TARGET ${name} PROPERTY CXX_STANDARD ${CXX_STD})\n    add_test(${name} ${CMAKE_CURRENT_BINARY_DIR}/${name})\n    if (clang_on_linux)\n        target_link_libraries(${name} c++)\n    endif ()\nendmacro()\n```\n\n----------------------------------------\n\nTITLE: Calculating X-Gradient with GIL in C++\nDESCRIPTION: This snippet shows two functions for calculating the x-gradient of a grayscale image. The first function operates on the full image, while the second uses a subimage view to exclude the first and last columns.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/tutorial/gradient.rst.txt#2025-04-22_snippet_11\n\nLANGUAGE: cpp\nCODE:\n```\nvoid x_gradient_unguarded(gray8c_view_t const& src, gray8s_view_t const& dst)\n{\n  for (int y=0; y < src.height(); ++y)\n  {\n      gray8c_view_t::x_iterator src_it = src.row_begin(y);\n      gray8s_view_t::x_iterator dst_it = dst.row_begin(y);\n\n      for (int x = 0; x < src.width(); ++x)\n          dst_it[x] = (src_it[x-1] - src_it[x+1]) / 2;\n  }\n}\n\nvoid x_gradient(gray8c_view_t const& src, gray8s_view_t const& dst)\n{\n  assert(src.width()>=2);\n  x_gradient_unguarded(subimage_view(src, 1, 0, src.width()-2, src.height()),\n                       subimage_view(dst, 1, 0, src.width()-2, src.height()));\n}\n```\n\n----------------------------------------\n\nTITLE: Legacy Support Definition\nDESCRIPTION: The legacy naming convention for the concept, available when BOOST_OUTCOME_ENABLE_LEGACY_SUPPORT_FOR is defined to less than 220.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/concepts/value_or_none.md#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nconvert::ValueOrNone<T>\n```\n\n----------------------------------------\n\nTITLE: Source Grouping Functions\nDESCRIPTION: Helper functions for organizing source files into groups within the IDE, particularly useful for Visual Studio.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/static_string/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfunction (DoGroupSources curdir rootdir folder)\n    file (GLOB children RELATIVE ${PROJECT_SOURCE_DIR}/${curdir} ${PROJECT_SOURCE_DIR}/${curdir}/*)\n    foreach (child ${children})\n        if (IS_DIRECTORY ${PROJECT_SOURCE_DIR}/${curdir}/${child})\n            DoGroupSources (${curdir}/${child} ${rootdir} ${folder})\n        elseif (${child} STREQUAL \"CMakeLists.txt\")\n            source_group(\"\" FILES ${PROJECT_SOURCE_DIR}/${curdir}/${child})\n        else()\n            string (REGEX REPLACE ^${rootdir} ${folder} groupname ${curdir})\n            string (REPLACE \"/\" \"\\\\\" groupname ${groupname})\n            source_group (${groupname} FILES ${PROJECT_SOURCE_DIR}/${curdir}/${child})\n        endif()\n    endforeach()\nendfunction()\n\nfunction (GroupSources curdir folder)\n    DoGroupSources (${curdir} ${curdir} ${folder})\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Including lower_bound Header in C++\nDESCRIPTION: Specifies the header file to include for using the lower_bound algorithm in C++.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/lower_bound.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/lower_bound.hpp>\n```\n\n----------------------------------------\n\nTITLE: Defining a Python Module with Function\nDESCRIPTION: This code snippet demonstrates how to define a Boost.Python module that exposes the function 'f' to Python. It uses the `def` function from Boost.Python to register the function. The forwarding function `f_fwd` is used in conjunction with mpl::vector to define the parameter specifications for the function f.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter_python/doc/index.rst#2025-04-22_snippet_12\n\nLANGUAGE: cpp\nCODE:\n```\n\"    BOOST_PYTHON_MODULE(…)\n    {\n        def<\n            f_fwd\n          , mpl::vector<\n                void, tag::\\ x(int), tag::\\ y\\*(int)\n            >\n        >(\"f\");\n    }\"\n```\n\n----------------------------------------\n\nTITLE: Including list_c Header Files in C++\nDESCRIPTION: Shows how to include the necessary header files for using list_c in variadic and numbered forms.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/list_c.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/list_c.hpp>\n```\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/list/list*n*_c.hpp>\n```\n\n----------------------------------------\n\nTITLE: Boost Copyright Notice in ReStructured Text\nDESCRIPTION: Copyright notice for Boost library documentation using ReStructured Text syntax. Includes license information and a link to the Boost Software License.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/Metafunctions-Composition.rst#2025-04-22_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. copyright:: Copyright �  2001-2009 Aleksey Gurtovoy and David Abrahams\n   Distributed under the Boost Software License, Version 1.0. (See accompanying\n   file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories\nDESCRIPTION: Sets system and private include directories for the IResearch library to ensure proper header resolution\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/IResearch/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(arango_iresearch SYSTEM PUBLIC\n  ${IRESEARCH_INCLUDE})\ntarget_include_directories(arango_iresearch PRIVATE\n  \"${PROJECT_SOURCE_DIR}/arangod\"\n  \"${PROJECT_SOURCE_DIR}/${ENTERPRISE_INCLUDE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: MSVC Compiler Configuration\nDESCRIPTION: Specific compiler and linker settings for Microsoft Visual C++ compiler, including optimization flags and debug options.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/static_string/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif (MSVC)\n    set (CMAKE_VERBOSE_MAKEFILE FALSE)\n\n    add_definitions (\n        -D_WIN32_WINNT=0x0601\n    )\n\n    add_compile_options(\n        /permissive-  # strict C++\n        /W4           # enable all warnings\n        /MP           # Multi-processor compilation\n        )\n\n    set (Boost_USE_STATIC_LIBS ON)\n    set (Boost_USE_STATIC_RUNTIME ON)\n\n    set (CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} /MTd\")\n    set (CMAKE_CXX_FLAGS_RELEASE \"${CMAKE_CXX_FLAGS_RELEASE} /Ob2 /Oi /Ot /GL /MT\")\n    set (CMAKE_CXX_FLAGS_RELWITHDEBINFO \"${CMAKE_CXX_FLAGS_RELWITHDEBINFO} /Oi /Ot /MT\")\n\n    set (CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} /SAFESEH:NO\")\n    set (CMAKE_EXE_LINKER_FLAGS_RELEASE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE} /LTCG\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost Polygon Library with CMake\nDESCRIPTION: Sets up the CMake project for the Boost Polygon library. It defines the project, creates an interface library, sets include directories, and specifies dependencies.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/polygon/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.20)\n\nproject(boost_polygon VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n\nadd_library(boost_polygon INTERFACE)\n\nadd_library(Boost::polygon ALIAS boost_polygon)\n\ntarget_include_directories(boost_polygon INTERFACE include)\n\ntarget_link_libraries(boost_polygon\n  INTERFACE\n    Boost::config\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Channel Values for a 16-bit Pixel in C++\nDESCRIPTION: This snippet demonstrates how to create references for the three channels of a 16-bit pixel and set their values to the maximum defined by their traits. This shows how channel references can be used to manipulate the data of a pixel.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/channel.rst.txt#2025-04-22_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\n  using channel16_0_5_reference_t  = packed_channel_reference<0, 5, true>;\\n  using channel16_5_6_reference_t  = packed_channel_reference<5, 6, true>;\\n  using channel16_11_5_reference_t = packed_channel_reference<11, 5, true>;\\n\\n  std::uint16_t data=0;\\n  channel16_0_5_reference_t  channel1(&data);\\n  channel16_5_6_reference_t  channel2(&data);\\n  channel16_11_5_reference_t channel3(&data);\\n\\n  channel1 = channel_traits<channel16_0_5_reference_t>::max_value();\\n  channel2 = channel_traits<channel16_5_6_reference_t>::max_value();\\n  channel3 = channel_traits<channel16_11_5_reference_t>::max_value();\\n  assert(data == 65535);\\n\n```\n\n----------------------------------------\n\nTITLE: C++ Function Declaration for C Compatibility\nDESCRIPTION: Example of how to declare a C++-compatible function that can be called from C code, using extern \"C\" and noexcept.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/experimental/c-api/limitations.md#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nextern \"C\" noexcept\n```\n\n----------------------------------------\n\nTITLE: Partial Adaptor Invoke Implementation\nDESCRIPTION: Core implementation of the partial adaptor invoke functionality that handles function invocation with partial application.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/partial.hpp.txt#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<class Derived, class F, class Pack>\nstruct partial_adaptor_invoke\n{\n    template<class... Ts>\n    constexpr const F& get_function(Ts&&...) const noexcept\n    {\n        return static_cast<const F&>(static_cast<const Derived&>(*this));\n    }\n\n    template<class... Ts>\n    constexpr const Pack& get_pack(Ts&&...) const noexcept\n    {\n        return static_cast<const Pack&>(static_cast<const Derived&>(*this));\n    }\n\n    BOOST_HOF_RETURNS_CLASS(partial_adaptor_invoke);\n\n    template<class... Ts>\n    constexpr BOOST_HOF_SFINAE_RESULT\n    (\n        typename result_of<decltype(boost::hof::pack_join), \n            id_<const Pack&>, \n            result_of<decltype(boost::hof::pack_forward), id_<Ts>...> \n        >::type,\n        id_<F&&>\n    ) \n    operator()(Ts&&... xs) const BOOST_HOF_SFINAE_RETURNS\n    (\n        boost::hof::pack_join\n        (\n            BOOST_HOF_MANGLE_CAST(const Pack&)(BOOST_HOF_CONST_THIS->get_pack(xs...)), \n            boost::hof::pack_forward(BOOST_HOF_FORWARD(Ts)(xs)...)\n        )\n        (BOOST_HOF_RETURNS_C_CAST(F&&)(BOOST_HOF_CONST_THIS->get_function(xs...)))\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating an ADL Helper for std::begin in C++\nDESCRIPTION: Defines a namespace with a helper function that calls std::begin with ADL lookup, used for properly constraining the range overload.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/doc/src/example_print.md.txt#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nnamespace adl {\n\nusing std::begin;\n\ntemplate<class R>\nauto adl_begin(R&& r) BOOST_HOF_RETURNS(begin(r));\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Exception in C++ Boost Outcome Library\nDESCRIPTION: This function overrides the exception in a basic_outcome object. It's intended for very specific corner cases and should be used with caution. The function is part of the BOOST_OUTCOME_V2_NAMESPACE::hooks namespace and is defined in the <boost/outcome/basic_outcome.hpp> header.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/functions/hooks/override_outcome_exception.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nvoid override_outcome_exception(basic_outcome<T, EC, EP, NoValuePolicy> *, U &&) noexcept\n```\n\n----------------------------------------\n\nTITLE: Installing LZ4 using vcpkg package manager\nDESCRIPTION: A series of commands to install LZ4 using the vcpkg dependency manager. This includes cloning the vcpkg repository, bootstrapping it, and installing LZ4.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/lz4/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/Microsoft/vcpkg.git\ncd vcpkg\n./bootstrap-vcpkg.sh\n./vcpkg integrate install\nvcpkg install lz4\n```\n\n----------------------------------------\n\nTITLE: Conditional Testing Setup for Boost.Signals2\nDESCRIPTION: This CMake snippet conditionally adds the test subdirectory if both BUILD_TESTING is enabled and the test directory contains a CMakeLists.txt file.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/signals2/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(BUILD_TESTING AND EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/test/CMakeLists.txt\")\n\n  add_subdirectory(test)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Sample Application Build Macro Definition\nDESCRIPTION: Defines a macro 'add_sample' that creates executable targets for sample applications, links required libraries, and sets up corresponding tests. Includes special handling for Clang on Linux.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/yap/example/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nmacro(add_sample name)\n    add_executable(${name} ${name}.cpp)\n    target_link_libraries(${name} yap)\n    add_test(${name} ${CMAKE_CURRENT_BINARY_DIR}/${name})\n    if (clang_on_linux)\n        target_link_libraries(${name} c++)\n    endif ()\nendmacro()\n```\n\n----------------------------------------\n\nTITLE: Windows CreateFile Function Declaration\nDESCRIPTION: Windows API function signature for file creation, showing HANDLE return type with special failure value\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/leaf/doc/whitepaper.md#2025-04-22_snippet_8\n\nLANGUAGE: c\nCODE:\n```\nHANDLE CreateFileW(\n  LPCWSTR               lpFileName,\n  DWORD                 dwDesiredAccess,\n  DWORD                 dwShareMode,\n  LPSECURITY_ATTRIBUTES lpSecurityAttributes,\n  DWORD                 dwCreationDisposition,\n  DWORD                 dwFlagsAndAttributes,\n  HANDLE                hTemplateFile\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Output With Translation in C++\nDESCRIPTION: Example showing how to modify code to use the translate function for internationalization.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/doc/messages_formatting.txt#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ncout << translate(\"Hello World\") << endl;\n```\n\n----------------------------------------\n\nTITLE: Python Property Equivalent Using Python's Native Property\nDESCRIPTION: Demonstrates the Python code equivalent to the Boost.Python property exposure, using Python's built-in property feature.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/doc/article.rst#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n>>> class World(object):\n...     __init__(self, msg):\n...         self.__msg = msg\n...     def greet(self):\n...         return self.__msg\n...     def set(self, msg):\n...         self.__msg = msg\n...     msg = property(greet, set)\n```\n\n----------------------------------------\n\nTITLE: Including end Metafunction Header in C++\nDESCRIPTION: Specifies the header file to include for using the 'end' metafunction in C++ code. This header is part of the Boost MPL library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/end.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/begin_end.hpp>\n```\n\n----------------------------------------\n\nTITLE: Using replace algorithm in C++\nDESCRIPTION: Demonstrates how to use the replace algorithm to replace float with double in a vector of types.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/replace.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntypedef vector<int,float,char,float,float,double> types;\ntypedef vector<int,double,char,double,double,double> expected;\ntypedef replace< types,float,double >::type result;\n\nBOOST_MPL_ASSERT(( equal< result,expected > ));\n```\n\n----------------------------------------\n\nTITLE: Linking Graph Tests Library Dependencies\nDESCRIPTION: Links required dependencies to the arango_tests_graph library including arango_lightweight, test basics, velocypack, and fmt libraries.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/Graph/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(arango_tests_graph\n        PRIVATE\n        arango_lightweight\n        arango_tests_basics\n        velocypack\n        fmt)\n```\n\n----------------------------------------\n\nTITLE: Connected Components Function Definitions in PBGL\nDESCRIPTION: These are the function declarations for the connected components algorithm within the `graph` namespace. The algorithm finds connected components in a distributed graph and assigns each component a label using either a default constructed or user-supplied ParentMap.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/connected_components.rst#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n  namespace graph {\n    // Default constructed ParentMap\n    template<typename Graph, typename ComponentMap, typename ParentMap>\n    typename property_traits<ComponentMap>::value_type\n    connected_components( const Graph& g, ComponentMap c);\n\n    // User supplied ParentMap\n    template<typename Graph, typename ComponentMap, typename ParentMap>\n    typename property_traits<ComponentMap>::value_type\n    connected_components( const Graph& g, ComponentMap c, ParentMap p);\n  }\n```\n\n----------------------------------------\n\nTITLE: Defining Command-Line Options with Boost in C++\nDESCRIPTION: This snippet demonstrates the new interface for defining command-line options using the Boost library, allowing users to directly create an 'options_description' instance and load it from the command line with a 'variables_map'.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/program_options/doc/post_review_plan.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\noptions_description desc;\n....\nvariables_map vm;\nload_from_command_line(vm, desc, argc, argv);\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost Interprocess Library with CMake\nDESCRIPTION: This CMake script sets up the Boost Interprocess library as an interface library. It defines the project, creates the library target, sets include directories, and specifies dependencies on other Boost libraries. It also includes an optional section for building tests if testing is enabled.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/interprocess/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.16)\n\nproject(boost_interprocess VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n\nadd_library(boost_interprocess INTERFACE)\nadd_library(Boost::interprocess ALIAS boost_interprocess)\n\ntarget_include_directories(boost_interprocess INTERFACE include)\n\ntarget_link_libraries(boost_interprocess\n  INTERFACE\n    Boost::assert\n    Boost::config\n    Boost::container\n    Boost::core\n    Boost::integer\n    Boost::intrusive\n    Boost::move\n    Boost::static_assert\n    Boost::type_traits\n    Boost::unordered\n    Boost::winapi\n)\n\nif(BUILD_TESTING AND EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/test/CMakeLists.txt\")\n\n  add_subdirectory(test)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Pixel Component Metafunctions in GIL (C++)\nDESCRIPTION: These template structures define metafunctions within the Generic Image Library (GIL) to extract information about pixel components, such as color space, channel mapping, and planarity. They operate on pixel-based GIL constructs like pixels, iterators, locators, and views, providing a way to analyze and understand the structure of image data.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/metafunctions.rst#2025-04-22_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <typename T> struct color_space_type { typedef ... type; };\ntemplate <typename T> struct channel_mapping_type { typedef ... type; };\ntemplate <typename T> struct is_planar { typedef ... type; };\n\n// Defined by homogeneous constructs\ntemplate <typename T> struct channel_type { typedef ... type; };\ntemplate <typename T> struct num_channels { typedef ... type; };\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Glagolitic Script Character Ranges\nDESCRIPTION: Lists Unicode character ranges for the Glagolitic script, including capital and small letters. Glagolitic is an early Slavic writing system created by Saint Cyril in the 9th century.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/spirit/workbench/unicode/Scripts.txt#2025-04-22_snippet_41\n\nLANGUAGE: unicode\nCODE:\n```\n2C00..2C2E    ; Glagolitic # L&  [47] GLAGOLITIC CAPITAL LETTER AZU..GLAGOLITIC CAPITAL LETTER LATINATE MYSLITE\n2C30..2C5E    ; Glagolitic # L&  [47] GLAGOLITIC SMALL LETTER AZU..GLAGOLITIC SMALL LETTER LATINATE MYSLITE\n\n# Total code points: 94\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Extender Characters\nDESCRIPTION: Lists Unicode code points classified as Extender characters with their corresponding character classes. Extenders are characters used to extend the length of other characters or sequences, such as the Arabic tatweel. The list contains 28 total code points.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/spirit/workbench/unicode/PropList.txt#2025-04-22_snippet_12\n\nLANGUAGE: unicode\nCODE:\n```\n00B7          ; Extender # Po       MIDDLE DOT\n02D0..02D1    ; Extender # Lm   [2] MODIFIER LETTER TRIANGULAR COLON..MODIFIER LETTER HALF TRIANGULAR COLON\n0640          ; Extender # Lm       ARABIC TATWEEL\n07FA          ; Extender # Lm       NKO LAJANYALAN\n0E46          ; Extender # Lm       THAI CHARACTER MAIYAMOK\n0EC6          ; Extender # Lm       LAO KO LA\n1843          ; Extender # Lm       MONGOLIAN LETTER TODO LONG VOWEL SIGN\n1AA7          ; Extender # Lm       TAI THAM SIGN MAI YAMOK\n1C36          ; Extender # Mn       LEPCHA SIGN RAN\n1C7B          ; Extender # Lm       OL CHIKI RELAA\n3005          ; Extender # Lm       IDEOGRAPHIC ITERATION MARK\n3031..3035    ; Extender # Lm   [5] VERTICAL KANA REPEAT MARK..VERTICAL KANA REPEAT MARK LOWER HALF\n309D..309E    ; Extender # Lm   [2] HIRAGANA ITERATION MARK..HIRAGANA VOICED ITERATION MARK\n30FC..30FE    ; Extender # Lm   [3] KATAKANA-HIRAGANA PROLONGED SOUND MARK..KATAKANA VOICED ITERATION MARK\nA015          ; Extender # Lm       YI SYLLABLE WU\nA60C          ; Extender # Lm       VAI SYLLABLE LENGTHENER\nA9CF          ; Extender # Lm       JAVANESE PANGRANGKEP\nAA70          ; Extender # Lm       MYANMAR MODIFIER LETTER KHAMTI REDUPLICATION\nAADD          ; Extender # Lm       TAI VIET SYMBOL SAM\nFF70          ; Extender # Lm       HALFWIDTH KATAKANA-HIRAGANA PROLONGED SOUND MARK\n\n# Total code points: 28\n```\n\n----------------------------------------\n\nTITLE: Implementing Recursive Print Function with fix Adaptor in C++\nDESCRIPTION: Creates a recursive print function using the fix adaptor to handle nested structures.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/src/example_print.md#2025-04-22_snippet_6\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_HOF_STATIC_LAMBDA_FUNCTION(print) = fix(first_of(\n    [](auto, const auto& x) -> decltype(std::cout << x, void())\n    {\n        std::cout << x << std::endl;\n    },\n    [](auto self, const auto& range) -> decltype(self(*adl::adl_begin(range)), void())\n    {\n        for(const auto& x:range) self(x);\n    },\n    [](auto self, const auto& tuple)\n    {\n        return for_each_tuple(tuple, self);\n    }\n));\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Boost.Predef Library Target\nDESCRIPTION: Sets up a CMake INTERFACE library target for Boost.Predef with include directory configuration and alias target for FindBoost compatibility. The configuration is minimal and focused on header-only integration.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/predef/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required( VERSION 3.0 )\n\nproject( BoostPredef LANGUAGES NONE )\n\nadd_library( boost_predef INTERFACE )\n\ntarget_include_directories( boost_predef INTERFACE include )\n\nadd_library( Boost::predef ALIAS boost_predef )\n```\n\n----------------------------------------\n\nTITLE: Defining Boost Wave Library Sources in CMake\nDESCRIPTION: Creates the boost_wave library target and specifies its source files, including core implementation and lexer components.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/wave/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(boost_wave\n  src/instantiate_cpp_exprgrammar.cpp\n  src/instantiate_cpp_grammar.cpp\n  src/instantiate_cpp_literalgrs.cpp\n  src/instantiate_defined_grammar.cpp\n  src/instantiate_has_include_grammar.cpp\n  src/instantiate_predef_macros.cpp\n  src/instantiate_re2c_lexer.cpp\n  src/instantiate_re2c_lexer_str.cpp\n  src/token_ids.cpp\n  src/wave_config_constant.cpp\n\n  src/cpplexer/re2clex/aq.cpp\n  src/cpplexer/re2clex/cpp_re.cpp\n)\n\nadd_library(Boost::wave ALIAS boost_wave)\n```\n\n----------------------------------------\n\nTITLE: Including MPL Find Algorithm Header in C++\nDESCRIPTION: Shows the header file that needs to be included to use the 'find' algorithm in the Boost MPL library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/find.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/find.hpp>\n```\n\n----------------------------------------\n\nTITLE: Defining Swappable Concept in C++\nDESCRIPTION: This snippet defines a Swappable concept that requires a type T to have a function swap, which swaps two objects of type T.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/concepts.rst#2025-04-22_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\nauto concept Swappable<typename T>\n{\n    void swap(T& t, T& u);\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode IDS_Binary_Operator Characters\nDESCRIPTION: Lists Unicode code points classified as IDS_Binary_Operator with their corresponding character classes. These are Ideographic Description Sequence operators that take two operands, used for describing CJK ideographs. The list contains 10 total code points.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/spirit/workbench/unicode/PropList.txt#2025-04-22_snippet_17\n\nLANGUAGE: unicode\nCODE:\n```\n2FF0..2FF1    ; IDS_Binary_Operator # So   [2] IDEOGRAPHIC DESCRIPTION CHARACTER LEFT TO RIGHT..IDEOGRAPHIC DESCRIPTION CHARACTER ABOVE TO BELOW\n2FF4..2FFB    ; IDS_Binary_Operator # So   [8] IDEOGRAPHIC DESCRIPTION CHARACTER FULL SURROUND..IDEOGRAPHIC DESCRIPTION CHARACTER OVERLAID\n\n# Total code points: 10\n```\n\n----------------------------------------\n\nTITLE: Deriving Iterator Type in GIL (C++)\nDESCRIPTION: This template structure defines a metafunction in the Generic Image Library (GIL) to derive a new iterator type from an existing one. This function lets you change characteristics such as channel value, layout, planarity, step, and mutability. This allows for creating custom iterators that suit specific image manipulation tasks.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/metafunctions.rst#2025-04-22_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <typename Iterator,\n        typename ChannelValue, typename Layout, typename IsPlanar, typename IsStep, typename IsMutable>\nstruct derived_iterator_type\n{\n  typedef ... type;  // Models PixelIteratorConcept\n};\n```\n\n----------------------------------------\n\nTITLE: Using bitxor_ Metafunction in C++ Compile-Time Assertions\nDESCRIPTION: Example usage of the bitxor_ metafunction with integral constants, demonstrating compile-time bitwise XOR operations and assertions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/bitxor_.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntypedef integral_c<unsigned,0> u0;\ntypedef integral_c<unsigned,1> u1;\ntypedef integral_c<unsigned,2> u2;\ntypedef integral_c<unsigned,8> u8;\ntypedef integral_c<unsigned,0xffffffff> uffffffff;\n\nBOOST_MPL_ASSERT_RELATION( (bitxor_<u0,u0>::value), ==, 0 );\nBOOST_MPL_ASSERT_RELATION( (bitxor_<u1,u0>::value), ==, 1 );\nBOOST_MPL_ASSERT_RELATION( (bitxor_<u0,u1>::value), ==, 1 );\n\nBOOST_MPL_ASSERT_RELATION( (bitxor_<u0,uffffffff>::value), ==, 0xffffffff ^ 0 );\nBOOST_MPL_ASSERT_RELATION( (bitxor_<u1,uffffffff>::value), ==, 0xffffffff ^ 1 );\nBOOST_MPL_ASSERT_RELATION( (bitxor_<u8,uffffffff>::value), ==, 0xffffffff ^ 8 );\n```\n\n----------------------------------------\n\nTITLE: C++ Standard Flag Detection in CMake\nDESCRIPTION: Function to test compiler support for different C++ standard flags and configure constexpr if support accordingly.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/yap/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(try_std_flag std_flag)\n    try_compile(\n        std_supported\n        ${CMAKE_BINARY_DIR}\n        ${CMAKE_CURRENT_SOURCE_DIR}/cmake/constexpr_if.cpp\n        COMPILE_DEFINITIONS ${std_flag} -DCHECK_CONSTEXPR_IF=0\n    )\n    if (std_supported)\n        message(\"-- Checking compiler flag ${std_flag} -- success\")\n        set(std_flag ${std_flag} PARENT_SCOPE)\n        constexpr_if_std(${std_flag} have_constexpr_if)\n        if (have_constexpr_if)\n            set(constexpr_if_define -DBOOST_NO_CONSTEXPR_IF=0 PARENT_SCOPE)\n            message(\"-- Checking constexpr if support -- success\")\n        else ()\n            set(constexpr_if_define -DBOOST_NO_CONSTEXPR_IF=1 PARENT_SCOPE)\n            message(\"-- Checking constexpr if support -- failed to compile\")\n        endif ()\n    else ()\n        message(\"-- Checking compiler flag ${std_flag} -- failed to compile\")\n    endif ()\nendfunction ()\n```\n\n----------------------------------------\n\nTITLE: Defining the Boost Exception Library\nDESCRIPTION: This snippet initializes the Boost Exception library as a static library, specifying the source files and creating an alias for ease of reference. It sets up the include directories for public access to the headers.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/exception/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.20)\n\nproject(boost_exception VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n\nadd_library(boost_exception STATIC\n  src/clone_current_exception_non_intrusive.cpp\n)\n\nadd_library(Boost::exception ALIAS boost_exception)\n\ntarget_include_directories(boost_exception PUBLIC include)\n```\n\n----------------------------------------\n\nTITLE: Path Example Executable Configuration\nDESCRIPTION: Configures the 'path' executable target with its source file and links it against Boost::json library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/json/example/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(path\n    path.cpp\n)\nset_property(TARGET path PROPERTY FOLDER \"example\")\ntarget_link_libraries(path PRIVATE Boost::json)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries to arango_tests_basics Target in CMake\nDESCRIPTION: Specifies the libraries that the arango_tests_basics target depends on, including Google Test, VelocyPack, fmt, fuerte, and ArangoDB's IResearch module.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/CMakeLists.txt#2025-04-22_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(arango_tests_basics gtest velocypack fmt fuerte arango_iresearch)\n```\n\n----------------------------------------\n\nTITLE: Restarting ArangoDB server with CORS enabled\nDESCRIPTION: Restarts the ArangoDB server with cross-origin requests enabled using the `--http.trusted-origin '*'` flag. Replace `<preset-name>` with the appropriate preset name.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/CONTRIBUTING.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n./build-presets/<preset-name>/bin/arangod ../Arango --http.trusted-origin '*'\n```\n\n----------------------------------------\n\nTITLE: Checking Argument Pack Type in C++\nDESCRIPTION: This template structure checks if a type T is a model of ArgumentPack, returning true or false accordingly, and is useful for type trait checks.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_13\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <typename T>\nstruct is_argument_pack\n    // : |mpl_true|_ if T is a model of |ArgumentPack|_\n    // |mpl_false|_ otherwise.\n{\n};\n```\n\n----------------------------------------\n\nTITLE: Invert Pixel Template Function in C++\nDESCRIPTION: This code defines a template function `invert_pixel` that takes a mutable pixel reference as input. This highlights the issue of passing temporary objects to functions expecting modifiable arguments.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/technicalities.rst#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <typename Pixel>    // Models MutablePixelConcept\n  void invert_pixel(Pixel& p);\n```\n\n----------------------------------------\n\nTITLE: ASIO Result Token Implementation\nDESCRIPTION: Helper type and factory function implementation for wrapping completion tokens.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/recipes/asio-integration-1-70.md#2025-04-22_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate<typename CompletionToken>\nstruct as_result_t\n{\n  CompletionToken token_;\n};\n\ntemplate<typename CompletionToken>\nas_result_t<std::decay_t<CompletionToken>>\nas_result(CompletionToken&& token)\n{\n  return {std::forward<CompletionToken>(token)};\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up libunwind Version and Paths in CMake\nDESCRIPTION: Initializes the libunwind project with version 1.7.2 and defines source and binary directories for the build process. The version is also exported to the parent scope for use in other CMake files.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/libunwind/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nproject(libunwind C)\ninclude(ExternalProject)\n\n# set version and paths\nset(LIBUNWIND_VERSION \"1.7.2\")\nset(LIBUNWIND_SOURCE_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/v${LIBUNWIND_VERSION}\")\nset(LIBUNWIND_BINARY_DIR \"${CMAKE_CURRENT_BINARY_DIR}/v${LIBUNWIND_VERSION}\")\n\n# export to paths to parent scope\nset(LIBUNWIND_VERSION \"${LIBUNWIND_VERSION}\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories\nDESCRIPTION: This snippet configures the include directories for the 'boost_function_types' library, ensuring that the 'include' directory is available for users of the library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/function_types/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories( boost_function_types INTERFACE include )\n```\n\n----------------------------------------\n\nTITLE: Declaring try_operation_extract_value Function Template in C++\nDESCRIPTION: Declares the function template for try_operation_extract_value, which returns the result of .assume_value() or .value() member functions, preferring .assume_value() when both are available. It requires that at least one of these member functions is a valid expression for the type.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/functions/try_operation_extract_value.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ndecltype(auto) try_operation_extract_value(X)\n```\n\n----------------------------------------\n\nTITLE: Testing noexcept Conditions in C++\nDESCRIPTION: Demonstrates how to use static_assert to test noexcept conditions at compile-time, as suggested by Howard Hinnant. This approach ensures that specific functions are marked as noexcept.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/container/proj/to-do.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n#include <type_traits>\n\nstruct A\n{\n   void foo() noexcept;\n};\n\nstatic_assert(noexcept(std::declval<A&>().foo()), \"A::foo() should be noexcept\");\n```\n\n----------------------------------------\n\nTITLE: Using the 'back' Metafunction with Integer Ranges in C++\nDESCRIPTION: Example showing how to use the 'back' metafunction with various range_c integer sequences. The examples demonstrate retrieving the last element from different ranges.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/back.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntypedef range_c<int,0,1> range1;\ntypedef range_c<int,0,10> range2;\ntypedef range_c<int,-10,0> range3;\n    \nBOOST_MPL_ASSERT_RELATION( back<range1>::value, ==, 0 );\nBOOST_MPL_ASSERT_RELATION( back<range2>::value, ==, 9 );\nBOOST_MPL_ASSERT_RELATION( back<range3>::value, ==, -1 );\n```\n\n----------------------------------------\n\nTITLE: Function Calls with Deduced Arguments in C++\nDESCRIPTION: This demonstrates calling the `evaluate` function with deduced arguments.  The order of arguments does not need to match the original definition due to the `(deduced ...)` clause.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_34\n\nLANGUAGE: cpp\nCODE:\n```\n\"    b.evaluate(  // deduced arguments\n        rvalue_bitset<3>()\n      , lvalue_const_bitset<0>()\n      , lvalue_bitset<1>()\n      , rvalue_const_bitset<2>()\n    );\n    b.evaluate(  // deduced arguments\n        lvalue_bitset<1>()\n      , lvalue_const_bitset<0>()\n    );\"\n```\n\n----------------------------------------\n\nTITLE: Including Function Output Iterator Header in C++\nDESCRIPTION: This snippet shows how to include the header file for the function_output_iterator class from the Boost library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/func_output_iter_ref.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/function_output_iterator.hpp>\n```\n\n----------------------------------------\n\nTITLE: Character Statistics Generator Reference\nDESCRIPTION: References the script used to analyze and regenerate character distribution statistics from Boost header files.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/metaparse/tools/benchmark/README.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nchar_stat.py\n```\n\n----------------------------------------\n\nTITLE: Defining Hex_Digit Unicode Property\nDESCRIPTION: This snippet defines the Hex_Digit Unicode property, which includes characters that can be used as hexadecimal digits. It covers standard digits, Latin letters A-F (both uppercase and lowercase), and their fullwidth counterparts.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/spirit/workbench/unicode/PropList.txt#2025-04-22_snippet_8\n\nLANGUAGE: Unicode\nCODE:\n```\n0030..0039    ; Hex_Digit # Nd  [10] DIGIT ZERO..DIGIT NINE\n0041..0046    ; Hex_Digit # L&   [6] LATIN CAPITAL LETTER A..LATIN CAPITAL LETTER F\n0061..0066    ; Hex_Digit # L&   [6] LATIN SMALL LETTER A..LATIN SMALL LETTER F\nFF10..FF19    ; Hex_Digit # Nd  [10] FULLWIDTH DIGIT ZERO..FULLWIDTH DIGIT NINE\nFF21..FF26    ; Hex_Digit # L&   [6] FULLWIDTH LATIN CAPITAL LETTER A..FULLWIDTH LATIN CAPITAL LETTER F\nFF41..FF46    ; Hex_Digit # L&   [6] FULLWIDTH LATIN SMALL LETTER A..FULLWIDTH LATIN SMALL LETTER F\n```\n\n----------------------------------------\n\nTITLE: Problematic Iterator Implementation Example\nDESCRIPTION: Demonstrates how the current specification leads to issues with seemingly obvious implementations of interoperable types.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/interoperability-revisited.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nstruct Mutable : Facade<Mutable>\n{\n  bool equal_to(Mutable const&);  \n};\n\nstruct Constant : Facade<Constant>\n{\n  Constant();\n  Constant(Constant const&);\n  Constant(Mutable const&);\n\n  ...\n\n  bool equal_to(Constant const&);  \n};\n```\n\n----------------------------------------\n\nTITLE: Running Tests with CMake\nDESCRIPTION: Step-by-step process to build and test Boost Histogram using CMake build system\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/histogram/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nmkdir build\ncd build\ncmake ..\nctest -C Debug --output-on-failure\n```\n\n----------------------------------------\n\nTITLE: Graph Edge List Format\nDESCRIPTION: A text-based representation of graph edges where each line after the first represents an edge between two vertices. The first line (10) indicates the total number of edges in the graph. Each subsequent line contains two space-separated integers representing the vertices that form an edge.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/polygon/example/input_data/random/random_002.txt#2025-04-22_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n10\n9 9\n2 6\n3 1\n6 4\n9 1\n9 7\n6 2\n2 4\n3 7\n6 7\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Boost HOF Functions in RST\nDESCRIPTION: This RST code defines a table of contents for various Boost HOF functions. It sets up a toctree directive with a maximum depth of 1 and lists the relative paths to the documentation files for each function.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/src/functions.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :maxdepth: 1\n    \n    ../../include/boost/hof/always\n    ../../include/boost/hof/arg\n    ../../include/boost/hof/construct\n    ../../include/boost/hof/decay\n    ../../include/boost/hof/identity\n    ../../include/boost/hof/placeholders\n```\n\n----------------------------------------\n\nTITLE: Using is_move_bitcopying Trait for P1029 Emulation in C++\nDESCRIPTION: A new trait 'is_move_bitcopying<T>' is added to opt types into library-based emulation of P1029 move = bitcopies. This trait enables Outcome to track moved-from status and only call destructors when necessary, improving codegen quality.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/changelog/v22.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nis_move_bitcopying<T>\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost Libraries for Beast\nDESCRIPTION: Sets up Boost library dependencies and configuration options for building Boost Beast.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/beast/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nget_filename_component (BOOST_ROOT ../../ ABSOLUTE)\n\nadd_definitions (-DBOOST_ALL_STATIC_LINK=1)\n\nadd_definitions (-DBOOST_ASIO_NO_DEPRECATED=1)\nadd_definitions (-DBOOST_ASIO_DISABLE_BOOST_ARRAY=1)\nadd_definitions (-DBOOST_ASIO_DISABLE_BOOST_BIND=1)\nadd_definitions (-DBOOST_ASIO_DISABLE_BOOST_DATE_TIME=1)\nadd_definitions (-DBOOST_ASIO_DISABLE_BOOST_REGEX=1)\nadd_definitions (-DBOOST_COROUTINES_NO_DEPRECATION_WARNING=1)\n\nif (MSVC)\n    include_directories (${BOOST_ROOT})\n    link_libraries( bcrypt.lib )\nelse()\n    set(BOOST_INCLUDEDIR ${BOOST_ROOT})\n    set(BOOST_LIBRARYDIR ${BOOST_ROOT}/stage/lib)\n    find_package(Boost COMPONENTS coroutine filesystem system thread REQUIRED)\n    link_libraries(Boost::coroutine Boost::filesystem Boost::system Boost::thread)\nendif()\n\nlink_directories(${BOOST_ROOT}/stage/lib)\n\nif (MINGW)\n    link_libraries(ws2_32 mswsock)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating Boost Format Library\nDESCRIPTION: This snippet creates the Boost format library as an interface library. It also creates an alias for the library, allowing it to be referenced as 'Boost::format'. This setup helps in organizing and managing the library usage in projects.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/format/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(boost_format INTERFACE)\nadd_library(Boost::format ALIAS boost_format)\n```\n\n----------------------------------------\n\nTITLE: Defining Boost Log Setup Public Dependencies in CMake\nDESCRIPTION: Sets up a variable containing all the public dependencies required by the Boost log_setup library. These dependencies will be linked to the log_setup target.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/log/CMakeLists.txt#2025-04-22_snippet_18\n\nLANGUAGE: CMake\nCODE:\n```\nset(boost_log_setup_public_deps\n    Boost::log\n\n    Boost::assert\n    Boost::config\n    Boost::core\n    Boost::iterator\n    Boost::lexical_cast\n    Boost::move\n    Boost::optional\n    Boost::parameter\n    Boost::phoenix\n    Boost::preprocessor\n    Boost::property_tree\n    Boost::smart_ptr\n    Boost::type_traits\n)\n```\n\n----------------------------------------\n\nTITLE: Scoped Channel Value Example\nDESCRIPTION: This code snippet defines a `[0..1]` floating point channel type using `scoped_channel_value`. It defines two structs, `float_zero` and `float_one`, which return 0.0f and 1.0f, respectively, and then uses these structs to define the bounds of the `bits32f` channel type. This effectively creates a floating-point channel that is constrained to the range of 0 to 1.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/channel.rst#2025-04-22_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\n  struct float_zero { static float apply() { return 0.0f; } };\n  struct float_one  { static float apply() { return 1.0f; } };\n  typedef scoped_channel_value<float,float_zero,float_one> bits32f;\n```\n\n----------------------------------------\n\nTITLE: Utilizing New Functions with Boost Pointer Containers\nDESCRIPTION: This snippet highlights new functions in boost pointer containers such as releasing ownership and transferring objects between containers.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/tutorial.rst#2025-04-22_snippet_7\n\nLANGUAGE: C++\nCODE:\n```\nzoo_type::auto_type the_animal = zoo.release( zoo.begin() );\nthe_animal->eat();\nanimal* the_animal_ptr = the_animal.release(); // now this is not deleted\n\nanother_zoo.transfer( another_zoo.end(), // insert before end \n                      zoo.begin(),       // insert this animal ... \n                      zoo );             // from this container\n```\n\n----------------------------------------\n\nTITLE: Linking Dependencies to Boost Format Library\nDESCRIPTION: This snippet links several Boost libraries as dependencies to the Boost format library. Libraries like Boost::assert, Boost::config, and others are included to provide essential functionalities. This ensures that any project using Boost format has access to these required libraries.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/format/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(boost_format\n  INTERFACE\n    Boost::assert\n    Boost::config\n    Boost::core\n    Boost::optional\n    Boost::smart_ptr\n    Boost::throw_exception\n    Boost::utility\n)\n```\n\n----------------------------------------\n\nTITLE: Using if_ Metafunction for Type Selection in C++\nDESCRIPTION: Demonstrates how to use the if_ metafunction to select between two types based on a boolean condition. It shows examples of selecting char or long based on true_ and false_ conditions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/if_.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntypedef if_<true_,char,long>::type t1;\ntypedef if_<false_,char,long>::type t2;\n\nBOOST_MPL_ASSERT(( is_same<t1, char> ));\nBOOST_MPL_ASSERT(( is_same<t2, long> ));\n```\n\n----------------------------------------\n\nTITLE: Configuring ArangoDB Graph Components with CMake\nDESCRIPTION: The CMake file sets up the build process for the graph components of ArangoDB by defining the source files, linking essential ArangoDB libraries, and including necessary directories. Dependencies include ArangoDB core libraries like 'arango', 'arango_aql', among others, and the Boost library, which are critical for the build process. Various source files are categorized and added from multiple directories reflecting the architecture of ArangoDB's graph subsystem.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/Graph/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(arango_graph STATIC\n  BaseOptions.cpp\n  ClusterGraphDatalake.cpp\n  ClusterTraverserCache.cpp\n  Graph.cpp\n  GraphManager.cpp\n  GraphOperations.cpp\n  ShortestPathOptions.cpp\n  PathType.cpp\n  SingleServerEdgeCursor.cpp\n  TraverserCache.cpp # maybe remove\n  TraverserCacheFactory.cpp\n  TraverserDocumentCache.cpp\n  TraverserOptions.cpp\n  ${PROJECT_SOURCE_DIR}/arangod/Cluster/CallbackGuard.cpp\n  ${PROJECT_SOURCE_DIR}/arangod/Cluster/ClusterEdgeCursor.cpp\n  ${PROJECT_SOURCE_DIR}/arangod/Cluster/ServerDefaults.cpp\n  ${PROJECT_SOURCE_DIR}/arangod/Cluster/TraverserEngine.cpp\n  ${PROJECT_SOURCE_DIR}/arangod/InternalRestHandler/InternalRestTraverserHandler.cpp\n  ${PROJECT_SOURCE_DIR}/arangod/RestHandler/RestGraphHandler.cpp)\n\ntarget_link_libraries(arango_graph\n  arango\n  arango_aql\n  arango_cache\n  arango_vocbase\n  boost_boost)\n\ntarget_include_directories(arango_graph PRIVATE\n  \"${PROJECT_SOURCE_DIR}/arangod\"\n  \"${PROJECT_SOURCE_DIR}/${ENTERPRISE_INCLUDE_DIR}\")\n\nadd_subdirectory(Cache)\nadd_subdirectory(Cursors)\nadd_subdirectory(Enumerators)\nadd_subdirectory(Helpers)\nadd_subdirectory(Options)\nadd_subdirectory(PathManagement)\nadd_subdirectory(Providers)\nadd_subdirectory(Queues)\nadd_subdirectory(Steps)\nadd_subdirectory(Types)\n```\n\n----------------------------------------\n\nTITLE: Y-Gradient Using View Rotation Transformation\nDESCRIPTION: An efficient method to compute vertical image gradients by utilizing GIL's view rotation transformation without explicit pixel copying.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/tutorial/gradient.rst.txt#2025-04-22_snippet_9\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <typename SrcView, typename DstView>\nvoid y_gradient(const SrcView& src, const DstView& dst)\n{\n  x_gradient(rotated90ccw_view(src), rotated90ccw_view(dst));\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for HTTP Server Example\nDESCRIPTION: Defines CMake build configuration for a small HTTP server example using Boost Beast library. Groups source files, creates executable target, links required libraries, and sets folder organization properties.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/beast/example/http/server/small/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nGroupSources(include/boost/beast beast)\nGroupSources(example/http/server/small \"/\")\n\nadd_executable (http-server-small\n    ${BOOST_BEAST_FILES}\n    Jamfile\n    http_server_small.cpp\n)\n\ntarget_link_libraries(http-server-small\n    lib-asio\n    lib-beast)\n\nset_property(TARGET http-server-small PROPERTY FOLDER \"example-http-server\")\n```\n\n----------------------------------------\n\nTITLE: Listing Boost-Dependent Example Files\nDESCRIPTION: Appends all .cpp files that depend on Boost to a variable for specific handling. This includes tutorials and extensions that require Boost's functionality.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hana/example/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND EXAMPLES_REQUIRING_BOOST\n        \"ext/boost/*.cpp\"\n        \"tutorial/appendix_mpl.cpp\"\n        \"tutorial/ext/fusion_to_hana.cpp\"\n        \"tutorial/ext/mpl_vector.cpp\"\n        \"tutorial/integral.cpp\"\n        \"tutorial/introduction.cpp\"\n        \"tutorial/mpl_cheatsheet.cpp\"\n        \"tutorial/quadrants.cpp\"\n        \"tutorial/quickstart.switchAny.cpp\"\n        \"tutorial/rationale.container.cpp\"\n        \"tutorial/type.cpp\"\n        \"type/basic_type.cpp\")\nfile(GLOB_RECURSE EXAMPLES_REQUIRING_BOOST ${EXAMPLES_REQUIRING_BOOST})\n```\n\n----------------------------------------\n\nTITLE: Including ToolBox Header in C++\nDESCRIPTION: This snippet shows how to include the main header file for the Boost.GIL ToolBox extension. This is required to use any of the functionalities provided by the toolbox such as color conversions or image types.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/toolbox.rst.txt#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n\"#include <boost/gil/extension/toolbox.hpp>\"\n```\n\n----------------------------------------\n\nTITLE: Checking for Required Ruby and Gems in CMake\nDESCRIPTION: This snippet checks for Ruby installation and specific gems such as 'ruby-progressbar' and 'tilt'. If they are not found, a warning is issued and benchmarks are disabled. Dependencies include Ruby >= 2.1. No inputs or outputs; benchmarks depend on the presence of these gems.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hana/benchmark/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(Ruby 2.1)\nif(NOT ${RUBY_FOUND})\n    message(WARNING \"Ruby >= 2.1 was not found; the benchmarks will be unavailable.\")\n    return()\nendif()\n\nexecute_process(COMMAND ${RUBY_EXECUTABLE} -r ruby-progressbar -r tilt -e \"\"\n                RESULT_VARIABLE __BOOST_HANA_MISSING_GEMS\n                OUTPUT_QUIET ERROR_QUIET)\nif(${__BOOST_HANA_MISSING_GEMS})\n    message(WARNING\n        \"The 'ruby-progressbar' and/or 'tilt' gems were not found; \"\n        \"the benchmarks will be unavailable.\"\n        \"Use `gem install ruby-progressbar tilt` to install the missing gems.\")\n    return()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining memory_based_2d_locator class template in C++\nDESCRIPTION: This C++ template defines a 2D locator that operates on pixel data stored in memory.  It takes a StepIterator as a template parameter, where the step is the number of memory units per row.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/pixel_locator.rst.txt#2025-04-22_snippet_8\n\nLANGUAGE: cpp\nCODE:\n```\n\"// StepIterator models StepIteratorConcept, MemoryBasedIteratorConcept\\n  template <typename StepIterator>\\n  class memory_based_2d_locator;\"\n```\n\n----------------------------------------\n\nTITLE: Defining Target Sources for arango_replication2_pure in C++\nDESCRIPTION: This snippet sets the source files for the 'arango_replication2_pure' target, primarily including headers and common state definitions necessary for pure replication functionality without any additional features.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/Replication2/ReplicatedState/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ntarget_sources(arango_replication2_pure PRIVATE\n  StateStatus.h\n  StateCommon.cpp\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining BOOST_MPL_HAS_XXX_TRAIT_NAMED_DEF Macro in C++\nDESCRIPTION: Defines the BOOST_MPL_HAS_XXX_TRAIT_NAMED_DEF macro, which expands into a definition of a boolean unary Metafunction. The macro takes three parameters: trait (metafunction name), name (member being detected), and default_ (fallback value).\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/HAS_XXX_TRAIT_NAMED_DEF.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n#define BOOST_MPL_HAS_XXX_TRAIT_NAMED_DEF(trait, name, default_) \\\n    |unspecified-token-seq| \\\n/**/\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost.Locale Include Directories and Dependencies\nDESCRIPTION: Sets up include directories and links required Boost libraries for the Boost.Locale target.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(boost_locale PUBLIC include)\n\ntarget_link_libraries(boost_locale\n  PUBLIC\n    Boost::assert\n    Boost::config\n    Boost::function\n    Boost::iterator\n    Boost::smart_ptr\n    Boost::static_assert\n    Boost::type_traits\n  PRIVATE\n    Boost::thread\n    Boost::unordered\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Diacritic Characters\nDESCRIPTION: Lists Unicode code points classified as Diacritic characters with their corresponding character classes. Includes combining marks, accents, and other diacritical signs across various scripts. The list contains 639 total code points.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/spirit/workbench/unicode/PropList.txt#2025-04-22_snippet_11\n\nLANGUAGE: unicode\nCODE:\n```\nFE20..FE26    ; Diacritic # Mn   [7] COMBINING LIGATURE LEFT HALF..COMBINING CONJOINING MACRON\nFF3E          ; Diacritic # Sk       FULLWIDTH CIRCUMFLEX ACCENT\nFF40          ; Diacritic # Sk       FULLWIDTH GRAVE ACCENT\nFF70          ; Diacritic # Lm       HALFWIDTH KATAKANA-HIRAGANA PROLONGED SOUND MARK\nFF9E..FF9F    ; Diacritic # Lm   [2] HALFWIDTH KATAKANA VOICED SOUND MARK..HALFWIDTH KATAKANA SEMI-VOICED SOUND MARK\nFFE3          ; Diacritic # Sk       FULLWIDTH MACRON\n110B9..110BA  ; Diacritic # Mn   [2] KAITHI SIGN VIRAMA..KAITHI SIGN NUKTA\n1D167..1D169  ; Diacritic # Mn   [3] MUSICAL SYMBOL COMBINING TREMOLO-1..MUSICAL SYMBOL COMBINING TREMOLO-3\n1D16D..1D172  ; Diacritic # Mc   [6] MUSICAL SYMBOL COMBINING AUGMENTATION DOT..MUSICAL SYMBOL COMBINING FLAG-5\n1D17B..1D182  ; Diacritic # Mn   [8] MUSICAL SYMBOL COMBINING ACCENT..MUSICAL SYMBOL COMBINING LOURE\n1D185..1D18B  ; Diacritic # Mn   [7] MUSICAL SYMBOL COMBINING DOIT..MUSICAL SYMBOL COMBINING TRIPLE TONGUE\n1D1AA..1D1AD  ; Diacritic # Mn   [4] MUSICAL SYMBOL COMBINING DOWN BOW..MUSICAL SYMBOL COMBINING SNAP PIZZICATO\n\n# Total code points: 639\n```\n\n----------------------------------------\n\nTITLE: Size Metafunction Usage Example in C++\nDESCRIPTION: Example demonstrating the usage of size metafunction with different sequence types including empty list, vector, and range.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/size.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ntypedef list0<> empty_list;\ntypedef vector_c<int,0,1,2,3,4,5> numbers;\ntypedef range_c<int,0,100> more_numbers;\n\nBOOST_MPL_ASSERT_RELATION( size<list>::value, ==, 0 );\nBOOST_MPL_ASSERT_RELATION( size<numbers>::value, ==, 5 );\nBOOST_MPL_ASSERT_RELATION( size<more_numbers>::value, ==, 100 );\n```\n\n----------------------------------------\n\nTITLE: Observing Error Value with assume_error() Method in C++ Result Type\nDESCRIPTION: A const rvalue reference method that returns the stored error. It first invokes NoValuePolicy::narrow_error_check() and then returns the reference to the error. This method never throws exceptions and is constexpr propagating.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/basic_outcome/assume_error_rvalue_const.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nconst error_type &&assume_error() const && noexcept\n```\n\n----------------------------------------\n\nTITLE: ArangoDB Module Exports Structure\nDESCRIPTION: Structure of exports from the @arangodb module, including prototypes, global variables, functions, and error codes.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/js/GUIDELINES.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Exported prototypes\nArangoCollection\nArangoConnection // client-only\nArangoDatabase\nArangoError\nArangoQueryCursor // client-only\nArangoStatement\nShapedJson // server-only\n\n// Exported global variables\ndb\narango // client-only\n\n// Exported functions\noutput\nprint\nprintf\nprintObject\n\n// Error codes\nERROR_NO_ERROR\nERROR_HTTP_NO_FOUND\n// ...\n\n// Error hash\nerrors\n```\n\n----------------------------------------\n\nTITLE: Managing Clean Targets for Generated Files\nDESCRIPTION: This snippet defines custom targets that manage the deletion of autogenerated files. It ensures that the README file isn't deleted during a general 'make clean' operation while still removing autogenerated man files.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/Documentation/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_target(clean_man_autogenerated\n  COMMAND rm -f ${CMAKE_SOURCE_DIR}/README\n  COMMAND rm -f ${MAN_FILES})\n\nlist(APPEND CLEAN_AUTOGENERATED_FILES clean_man_autogenerated)\nset(CLEAN_AUTOGENERATED_FILES ${CLEAN_AUTOGENERATED_FILES} PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding VocBase Subdirectories\nDESCRIPTION: Adds additional subdirectories to the build process for Identifiers, Methods, and Properties components.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/VocBase/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(Identifiers)\nadd_subdirectory(Methods)\nadd_subdirectory(Properties)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Benchmark Targets in CMake\nDESCRIPTION: Sets up custom CMake targets for creating and running benchmarks. It includes finding and linking dependencies, generating executable targets, and defining custom commands for benchmark data generation. Dependencies may include MPL11, Meta, and Boost libraries, and the targets require correct directory and file setups.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hana/benchmark/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_target(benchmarks COMMENT \"Generate all the benchmarks.\")\n\nadd_custom_target(travis_compiler_slug USES_TERMINAL\n    COMMAND ${CMAKE_COMMAND} -E echo \"travis_compiler_slug: $<LOWER_CASE:${CMAKE_CXX_COMPILER_ID}-${CMAKE_CXX_COMPILER_VERSION}>\")\nadd_custom_target(travis_config_slug USES_TERMINAL\n    COMMAND ${CMAKE_COMMAND} -E echo \"travis_config_slug: $<LOWER_CASE:$<CONFIG>>\")\n\nfile(GLOB_RECURSE BOOST_HANA_BENCHMARKS *.erb.json)\nforeach(benchmark IN LISTS BOOST_HANA_BENCHMARKS)\n    boost_hana_target_name_for(target ${benchmark} \".erb.json\")\n    get_filename_component(directory \"${benchmark}\" DIRECTORY)\n    file(GLOB cpp_files \"${directory}/*.erb.cpp\")\n    configure_file(\"${benchmark}\" \"${CMAKE_CURRENT_BINARY_DIR}/${target}.erb.json\" @ONLY)\n\n    file(WRITE \"${CMAKE_CURRENT_BINARY_DIR}/${target}.measure.cpp\" \"\")\n    add_executable(${target}.measure EXCLUDE_FROM_ALL \"${CMAKE_CURRENT_BINARY_DIR}/${target}.measure.cpp\")\n    target_include_directories(${target}.measure PRIVATE \"${CMAKE_CURRENT_SOURCE_DIR}\")\n    if (MPL11_FOUND)\n        target_include_directories(${target}.measure PRIVATE \"${MPL11_INCLUDE_DIR}\")\n    endif()\n    if (Meta_FOUND)\n        target_include_directories(${target}.measure PRIVATE \"${Meta_INCLUDE_DIR}\")\n    endif()\n    if (Boost_FOUND)\n        target_link_libraries(${target}.measure PRIVATE Boost::boost)\n    endif()\n    boost_hana_set_test_properties(${target}.measure)\n    if (BOOST_HANA_HAS_FTEMPLATE_DEPTH)\n        target_compile_options(${target}.measure PRIVATE -ftemplate-depth=-1)\n    endif()\n    set_target_properties(${target}.measure PROPERTIES RULE_LAUNCH_COMPILE \"${CMAKE_CURRENT_BINARY_DIR}/measure.rb\")\n    set_property(TARGET ${target}.measure APPEND PROPERTY INCLUDE_DIRECTORIES \"${directory}\")\n    add_custom_target(${target}.measure.run COMMAND ${target}.measure)\n\n    add_custom_command(OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/${target}.json\"\n        COMMAND ${RUBY_EXECUTABLE} -r tilt -r \"${CMAKE_CURRENT_BINARY_DIR}/measure.rb\"\n            -e \"MEASURE_FILE = '${CMAKE_CURRENT_BINARY_DIR}/${target}.measure.cpp'\"\n            -e \"MEASURE_TARGET = '${target}.measure'\"\n            -e \"json = Tilt::ERBTemplate.new('${CMAKE_CURRENT_BINARY_DIR}/${target}.erb.json').render\"\n            -e \"File.open('${CMAKE_CURRENT_BINARY_DIR}/${target}.json', 'w') { |f| f.write(json) } \"\n        WORKING_DIRECTORY ${directory}\n        DEPENDS \"${CMAKE_CURRENT_BINARY_DIR}/${target}.erb.json\" ${cpp_files}\n        VERBATIM USES_TERMINAL\n        COMMENT \"Generating dataset for ${target}\"\n    )\n\n    add_custom_target(${target} DEPENDS \"${CMAKE_CURRENT_BINARY_DIR}/${target}.json\")\n    add_dependencies(benchmarks ${target})\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Exception Pointer Function Declaration in C++\nDESCRIPTION: Function declaration for extracting exception pointers via ADL discovery, supporting both boost::exception_ptr and std::exception_ptr types. The function uses argument dependent lookup to find an appropriate make_exception_ptr implementation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/functions/policy/exception_ptr.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\ndecltype(auto) exception_ptr(T &&)\n```\n\n----------------------------------------\n\nTITLE: Including the back_inserter header in C++\nDESCRIPTION: Header file needed to use the back_inserter template in your code.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/back_inserter.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/back_inserter.hpp>\n```\n\n----------------------------------------\n\nTITLE: Including reverse_remove_if Header in C++\nDESCRIPTION: Shows the header file that needs to be included to use the reverse_remove_if algorithm.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/reverse_remove_if.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/remove_if.h>\n```\n\n----------------------------------------\n\nTITLE: Configuring ArangoDB Test Sources in CMake\nDESCRIPTION: Adds source files to the arangodbtests target and includes the Registry subdirectory for building. Specifies AsyncTest.cpp and ExpectedTest.cpp as private source files.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/Async/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(arangodbtests\n  PRIVATE\n  AsyncTest.cpp\n  ExpectedTest.cpp)\n\nadd_subdirectory(Registry)\n```\n\n----------------------------------------\n\nTITLE: Using reverse_copy Algorithm in C++\nDESCRIPTION: Demonstrates the usage of reverse_copy algorithm to create a reversed copy of a sequence and insert it into another sequence.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/reverse_copy.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntypedef list_c<int,10,11,12,13,14,15,16,17,18,19>::type numbers;\ntypedef reverse_copy<\n      range_c<int,0,10>\n    , front_inserter< numbers >\n    >::type result;\n\nBOOST_MPL_ASSERT_RELATION( size<result>::value, ==, 20 );\nBOOST_MPL_ASSERT(( equal< result,range_c<int,0,20> > ));\n```\n\n----------------------------------------\n\nTITLE: Locating Word Boundaries in C++ with Boost.Locale\nDESCRIPTION: Shows how to use boundary_point_index to locate specific word boundaries in a text. It creates a word boundary index and finds boundaries around a specific position in the text.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/doc/boundary_analysys.txt#2025-04-22_snippet_7\n\nLANGUAGE: C++\nCODE:\n```\nusing namespace boost::locale::boundary;\nboost::locale::generator gen;\n// our text sample\nstd::string const text= \"To be or not to be, that is the question.\";\n\n// Create a mapping\nsboundary_point_index map(word,text.begin(),text.end(),gen(\"en_US.UTF-8\"));\n// Ignore wite space\nmap.rule(word_any);\n\n// define our arbitraty point\nstd::string::const_iterator pos = text.begin() + 12; // \"no|t\";\n\n// Get the search range\nsboundary_point_index::iterator \n    begin =map.begin(),\n    end = map.end(),\n    it = map.find(pos); // find a boundary\n\n// go 3 words backward\nfor(int count = 0;count <3 && it!=begin; count ++) \n    --it;\n\n// Save the start\nstd::string::const_iterator start = *it;\n\n// go 6 words forward\nfor(int count = 0;count < 6 && it!=end; count ++)\n    ++it;\n\n// make sure we at valid position\nif(it==end)\n    --it;\n\n// print the text\nstd::cout << std::string(start,it->iterator()) << std::endl;\n```\n\n----------------------------------------\n\nTITLE: Defining and Undefining a Macro in C/C++\nDESCRIPTION: This snippet demonstrates basic C/C++ preprocessor directives. It first defines a macro named 'MACRO' with the value 'foo', then immediately undefines it using the #undef directive.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/spirit/repository/example/qi/flush_multi_pass.txt#2025-04-22_snippet_0\n\nLANGUAGE: C/C++\nCODE:\n```\n#define MACRO foo\n#undef MACRO\n```\n\n----------------------------------------\n\nTITLE: Installing Custom Facet into Global Locale in C++\nDESCRIPTION: Shows how to install a custom facet into the global locale. The example demonstrates creating a new locale with a custom measurement facet added to an existing en_US locale.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/doc/std_locales.txt#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\nstd::locale::global(std::locale(std::locale(\"en_US.UTF-8\"),new measure(measure::inches)));\n/// Create default locale built from en_US locale and add paper size facet.\n```\n\n----------------------------------------\n\nTITLE: V8 Integration and Thread Sanitizer Limitations - C++\nDESCRIPTION: This segment discusses the challenges faced when building V8 with sanitizers disabled, leading to potential data races reported by TSAN when interfacing with non-instrumented V8 code. A strategy to ignore data races arising from V8 is outlined.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tsan_arangodb_suppressions.txt#2025-04-22_snippet_9\n\nLANGUAGE: cpp\nCODE:\n```\n// ATM we build V8 with sanitizers _disabled_, so the V8 code is not instrumented\n// which means the sanitizer cannot observe the synchronizations inside that code.\n// So when the V8 code calls back into instrumented code (e.g. the C runtime), TSan\n// might report potential data races because of these missing synchronizations.\n// For that reason we simply need to ignore _all_ data races coming from V8.\nrace:v8::*\n```\n\n----------------------------------------\n\nTITLE: Including reverse_remove Header in C++\nDESCRIPTION: Shows the header file that needs to be included to use the reverse_remove algorithm in C++ code.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/reverse_remove.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/remove.hpp>\n```\n\n----------------------------------------\n\nTITLE: Configuring ArangoDB Examples Library with CMake\nDESCRIPTION: This CMake snippet configures the compilation of ArangoDB example code. It collects all C++ source files, creates a library named 'examples', sets the C++17 standard, and specifies include directories.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/math/example/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nfile(GLOB SOURCES \"*.cpp\")\nadd_library(examples ${SOURCES})\ntarget_compile_features(examples PRIVATE cxx_std_17)\ntarget_include_directories(compile_tests PUBLIC ${CMAKE_SOURCE_DIR}/include)\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Status Code Domain by Inheriting from Posix Code Domain in C++\nDESCRIPTION: This snippet demonstrates the initial setup for defining a custom status code domain by aliasing the Outcome namespace and declaring a status code type. It inherits from posix_code::domain_type to reuse existing implementation rather than building from scratch.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/experimental/worked-example/preamble.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nnamespace outcome_e = OUTCOME_V2_NAMESPACE::experimental;\n\n// A custom status code representing something went wrong with ArangoDB\nclass arango_code : public outcome_e::status_code<arango_code>\n{\n  using _base = outcome_e::status_code<arango_code>;\n\npublic:\n  // Standard constructors\n  using _base::_base;\n\n  // Domain for these status codes\n  class domain_type : public outcome_e::posix_code::domain_type\n  {\n  public:\n```\n\n----------------------------------------\n\nTITLE: Defining Channel Concepts and Traits in C++\nDESCRIPTION: This snippet defines the concept 'ChannelConcept' along with its associated types and traits. It outlines the core functionality and properties required for channel implementations, including methods to obtain the minimum and maximum values for channels.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/channel.rst.txt#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n  concept ChannelConcept<typename T> : EqualityComparable<T>\\n  {\\n      typename value_type      = T;        // use channel_traits<T>::value_type to access it\\n      where ChannelValueConcept<value_type>;\\n      typename reference       = T&;       // use channel_traits<T>::reference to access it\\n      typename pointer         = T*;       // use channel_traits<T>::pointer to access it\\n      typename const_reference = const T&; // use channel_traits<T>::const_reference to access it\\n      typename const_pointer   = const T*; // use channel_traits<T>::const_pointer to access it\\n      static const bool is_mutable;        // use channel_traits<T>::is_mutable to access it\\n\\n      static T min_value();                // use channel_traits<T>::min_value to access it\\n      static T max_value();                // use channel_traits<T>::min_value to access it\\n  };\\n\\n  concept MutableChannelConcept<ChannelConcept T> : Swappable<T>, Assignable<T> {};\\n\\n  concept ChannelValueConcept<ChannelConcept T> : Regular<T> {};\\n\n```\n\n----------------------------------------\n\nTITLE: Creating the Final Variadic Print Function with proj Adaptor in C++\nDESCRIPTION: Defines the final print function that applies the simple_print function to each argument using the proj adaptor.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/doc/src/example_print.md.txt#2025-04-22_snippet_8\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_HOF_STATIC_LAMBDA_FUNCTION(print) = proj(simple_print);\n```\n\n----------------------------------------\n\nTITLE: Setting Up Manual Pages Generation\nDESCRIPTION: This snippet defines a list of manual page names and iteratively sets up commands to generate them using a external script. It handles dependencies and specifies the output location of the generated man pages.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/Documentation/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# manual pages\nset(MAN_NAMES\n  man1/arangobench.1\n  man1/arangodump.1\n  man1/arangoimport.1\n  man1/arangorestore.1\n  man1/arangoexport.1\n  man1/arangosh.1\n  man8/rcarangod.8\n  man8/arangod.8\n  man8/foxx-manager.8\n  )\n\nset(MAN_FILES \"\") #empty list\n\nforeach (m IN LISTS MAN_NAMES)\n    set(msrc ${CMAKE_SOURCE_DIR}/Documentation/${m})\n    set(mdst ${CMAKE_CURRENT_BINARY_DIR}/man/${m})\n\n  add_custom_command(\n    WORKING_DIRECTORY ${CMAKE_BINARY_DIR}\n    OUTPUT  ${mdst}\n    COMMAND ${CMAKE_SOURCE_DIR}/utils/manPages.sh ${msrc} ${mdst} ${ARANGODB_VERSION}\n    DEPENDS ${msrc}\n    COMMENT \"Building manpage ${mdst}\"\n    VERBATIM\n    )\n  list(APPEND MAN_FILES ${mdst})\nendforeach ()\nset(ARANGO_MAN_DIR \"${CMAKE_CURRENT_BINARY_DIR}/man\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring Jemalloc for Memory-Optimized Applications\nDESCRIPTION: Configuration example for applications prioritizing memory usage efficiency. Enables background threads, limits thread cache size, uses shorter decay times for faster memory reclamation, and reduces arena count.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/jemalloc/jemalloc/TUNING.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbackground_thread:true,tcache_max:4096,dirty_decay_ms:5000,muzzy_decay_ms:5000\n```\n\n----------------------------------------\n\nTITLE: Defining Boost Parameter Function Call Operator in C++\nDESCRIPTION: This snippet demonstrates how to define a function call operator that utilizes Boost.Parameter for managing required and optional parameters in a flexible manner. The template enables the specification of parameter types and the use of both positional and named arguments.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_35\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <\n    typename ResultType\n  , typename Args\n  , typename *argument name* ## **0** ## _type\n  , …\n  , typename *argument name* ## **n** ## _type\n>\nResultType\n    boost_param_dispatch_const_0boost\\_ ## __LINE__ ## **name**\\ (\n        (ResultType(*)())\n      , Args const& args\n      , *argument name* ## **0** ## _type&& *argument name* ## **0**\n      , …\n      , *argument name* ## **n** ## _type&& *argument name* ## **n**\n    ) const\n{\n    return this->\n    boost_param_dispatch_const_0boost\\_ ## __LINE__ ## **name**\\ (\n        static_cast<ResultType(*)()>(|std_nullptr|_\\)\n      , (args, *keyword object of optional parameter* ## **n + 1** =\n            *default value of optional parameter* ## **n + 1**\n        )\n      , |std_forward|_\\<*argument name* ## **0** ## _type>(\n            *argument name* ## **0**\n        )\n      , …\n      , |std_forward|_\\<*argument name* ## **n** ## _type>(\n            *argument name* ## **n**\n        )\n      , |std_forward|_\\<\n            typename |value_type|_\\<\n                Args\n              , *keyword tag type of optional parameter* ## **n + 1**\n            >::type\n        >(*default value of optional parameter* ## **n + 1**)\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Stored Error via Const Reference in C++\nDESCRIPTION: A method signature for accessing the stored error object as a const lvalue reference. It first invokes NoValuePolicy::wide_error_check() and then returns a reference to the error. A valid default constructed error is always present to prevent undefined behavior.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/basic_result/error_lvalue_const.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nconst error_type &error() const &\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost Ratio Project with CMake\nDESCRIPTION: This snippet sets up the CMake project for the Boost Ratio library. It defines the minimum CMake version, project name and version, and adds the library.  The project version is obtained from BOOST_SUPERPROJECT_VERSION.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ratio/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n\"cmake_minimum_required(VERSION 3.5...3.16)\n\nproject(boost_ratio VERSION \\\"${BOOST_SUPERPROJECT_VERSION}\\\" LANGUAGES CXX)\n\nadd_library(boost_ratio INTERFACE)\nadd_library(Boost::ratio ALIAS boost_ratio)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for Test Build\nDESCRIPTION: Sets up the include paths for the test executable, pointing to ArangoDB source directories.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/VocBase/Properties/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(arangodb_vocbase_properties_test PRIVATE\n    ${PROJECT_SOURCE_DIR}/arangod\n    ${PROJECT_SOURCE_DIR}/lib\n    ${PROJECT_BINARY_DIR}/lib\n)\n```\n\n----------------------------------------\n\nTITLE: Defining EqualityComparable Concept in C++\nDESCRIPTION: This snippet introduces the EqualityComparable concept, requiring that two objects of types T and U can be compared for equality using the equality (==) and inequality (!=) operators.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/concepts.rst#2025-04-22_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nauto concept EqualityComparable<typename T, typename U = T>\n{\n    bool operator==(T x, U y);\n    bool operator!=(T x, U y) { return !(x==y); }\n};\n```\n\n----------------------------------------\n\nTITLE: Packed Dynamic Channel Reference Definition\nDESCRIPTION: Defines the `packed_dynamic_channel_reference` class template in C++. This class represents a reference to a channel defined over a specified number of bits, where the first bit is a runtime parameter. It takes template parameters for the number of bits and a boolean indicating mutability. It models the ChannelConcept.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/channel.rst#2025-04-22_snippet_9\n\nLANGUAGE: cpp\nCODE:\n```\n  // Reference to a channel defined over NumBits bits. Its FirstBit is a run-time parameter. Models ChannelConcept\n  template <int NumBits,       // Defines the sequence of bits in the data value that contain the channel\n          bool Mutable>      // true if the reference is mutable\n  class packed_dynamic_channel_reference;\n```\n\n----------------------------------------\n\nTITLE: Attaching Distributed Object to Process Group constructor in C++\nDESCRIPTION: This C++ snippet shows how a new distributed data structure is attached to an existing process group. The new process group can be used for communication within the new distributed data structure. The distributed data structure is detached from the process group when the newly-constructed process group is destroyed.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/process_group.rst#2025-04-22_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\n    ProcessGroup(const ProcessGroup& pg, boost::parallel::attach_distributed_object);\n```\n\n----------------------------------------\n\nTITLE: Configuring Compilation Failure Tests in CMake\nDESCRIPTION: Sets up specific examples that are expected to fail compilation as part of the test suite. These are organized in the 'safe numeric compile fail tests' folder.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/safe_numerics/example/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ntest_compile_fail(example17)\nset_target_properties(example17 PROPERTIES FOLDER \"safe numeric compile fail tests\")\ntest_compile_fail(example81)\nset_target_properties(example81 PROPERTIES FOLDER \"safe numeric compile fail tests\")\n```\n\n----------------------------------------\n\nTITLE: Implementing 'tap' Function in C++ for Boost HOF Library\nDESCRIPTION: Defines the 'tap' function structure and its pipable adaptor. The function takes an argument and a callable, applies the callable to the argument, and returns the original argument. It's designed to be used in function pipelines.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/tap.hpp.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nstruct tap_f\n{\n    template<class T, class F>\n    constexpr T operator()(T&& x, const F& f) const\n    BOOST_HOF_RETURNS_DEDUCE_NOEXCEPT((boost::hof::apply(f, x), BOOST_HOF_FORWARD(T)(x)))\n    {\n        return boost::hof::apply(f, x), BOOST_HOF_FORWARD(T)(x);\n    }\n};\n```\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_HOF_DECLARE_STATIC_VAR(tap, pipable_adaptor<detail::tap_f>);\n```\n\n----------------------------------------\n\nTITLE: ProcessGroup class definition in C++\nDESCRIPTION: This is the placeholder class definition for ProcessGroup, showing constructors and trigger functions. It also defines helper operations, such as poll() and base(), to manage the process group and trigger context.  This class outlines the basic interface for process group implementations in the Parallel BGL.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/process_group.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n  enum trigger_receive_context {\n    trc_none,\n    trc_in_synchronization,\n    trc_early_receive,\n    trc_out_of_band\n  };\n  \n  class ProcessGroup \n  {\n    // Process group constructors\n    ProcessGroup();\n    ProcessGroup(const ProcessGroup&, boost::parallel::attach_distributed_object);\n\n    // Triggers\n    template<typename Type, typename Handler>\n      void trigger(int tag, const Handler& handler);\n\n    template<typename Type, typename Handler>\n      void trigger_with_reply(int tag, const Handler& handler);\n\n    trigger_receive_context trigger_context() const;\n\n    // Helper operations\n    void poll();\n    ProcessGroup base() const;\n  };\n```\n\n----------------------------------------\n\nTITLE: Adding Serialization Headers to IDE in CMake\nDESCRIPTION: Adds serialization-related header files to the IDE for better organization. Groups headers into custom targets with appropriate folder properties.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/serialization/CMake/CMakeLists.txt#2025-04-22_snippet_23\n\nLANGUAGE: CMake\nCODE:\n```\nfile(GLOB x \n  RELATIVE \"${CMAKE_CURRENT_SOURCE_DIR}\" \n  \"${CMAKE_CURRENT_SOURCE_DIR}/../include/boost/serialization/*.hpp\"\n)\nadd_custom_target(serialization-headers SOURCES ${x})\nset_property(TARGET serialization-headers PROPERTY FOLDER \"serialization\")\n\nfile(GLOB x \n  RELATIVE \"${CMAKE_CURRENT_SOURCE_DIR}\" \n  \"${CMAKE_CURRENT_SOURCE_DIR}/../include/boost/serialization/detail/*.hpp\"\n)\nadd_custom_target(serialization-detail SOURCES ${x})\nset_property(TARGET serialization-detail PROPERTY FOLDER \"serialization\")\n```\n\n----------------------------------------\n\nTITLE: Using locale-specific formatting with boost::locale::format\nDESCRIPTION: This snippet shows how to use different locales and calendars within the same format string for date formatting.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/doc/localized_text_formatting.txt#2025-04-22_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\ncout << format(\"This article was published at {1,date=l} (Gregorian) {1,locale=he_IL@calendar=hebrew,date=l} (Hebrew)\") % date;\n```\n\n----------------------------------------\n\nTITLE: Using iterator_range in C++ with MPL\nDESCRIPTION: Demonstrates how to use iterator_range with MPL range and iterators. It creates a range of integers, advances iterators, and uses iterator_range to create a subset view.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/iterator_range.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntypedef range_c<int,0,100> r;\ntypedef advance_c< begin<r>::type,10 >::type first;\ntypedef advance_c< end<r>::type,-10 >::type last;\n\nBOOST_MPL_ASSERT(( equal< \n      iterator_range<first,last>\n    , range_c<int,10,90>\n    > ));\n```\n\n----------------------------------------\n\nTITLE: R-MAT Graph Generator Class Definition\nDESCRIPTION: This code snippet defines the `scalable_rmat_iterator` class template, which is used to generate R-MAT graphs. It includes type definitions, constructors, and iterator operations for traversing the generated graph edges. The class depends on template parameters for process group, distribution, random number generator, and graph type.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/scalable_rmat_generator.rst#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n template<typename ProcessGroup, typename Distribution, \n           typename RandomGenerator, typename Graph>\n  class scalable_rmat_iterator\n  {\n  public:\n    typedef std::input_iterator_tag iterator_category;\n    typedef std::pair<vertices_size_type, vertices_size_type> value_type;\n    typedef const value_type& reference;\n    typedef const value_type* pointer;\n    typedef void difference_type;\n\n    scalable_rmat_iterator();\n    scalable_rmat_iterator(ProcessGroup pg, Distribution distrib,\n                           RandomGenerator& gen, vertices_size_type n, \n                           edges_size_type m, double a, double b, double c, \n                           double d, bool permute_vertices = true);\n\n    // Iterator operations\n    reference operator*() const;\n    pointer operator->() const;\n    scalable_rmat_iterator& operator++();\n    scalable_rmat_iterator operator++(int);\n    bool operator==(const scalable_rmat_iterator& other) const;\n    bool operator!=(const scalable_rmat_iterator& other) const;\n };\n```\n\n----------------------------------------\n\nTITLE: Implementing Status Code Domain Constructor in C++\nDESCRIPTION: This code demonstrates how status code domains are implemented using a random 64-bit number for domain identification. The constructor initializes the domain with a unique value taken from a random source to enable safe comparison of domains even in constexpr contexts.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/experimental/worked-example/constructor.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n//! Construct from a unique random 64 bit value.\\n//! PLEASE ensure that the value supplied is globally unique.\\n_base() noexcept : _id(0xb87a710dfc305aec) {}\\n\n```\n\n----------------------------------------\n\nTITLE: Using bind Metafunction in C++ with Boost MPL\nDESCRIPTION: Demonstrates usage of the bind metafunction with different metafunction classes and placeholders. Shows how to compose and bind arguments for compile-time metafunction invocation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/bind.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nstruct f1\n{\n    template< typename T1 > struct apply\n    {\n        typedef T1 type;\n    };\n};\n\nstruct f5\n{\n    template< typename T1, typename T2, typename T3, typename T4, typename T5 >\n    struct apply\n    {\n        typedef T5 type;\n    };\n};\n\ntypedef apply_wrap\\ ``1``\\< \n      bind\\ ``1``\\<f1,_1>\n    , int \n    >::type r11;\n\ntypedef apply_wrap\\ ``5``\\< \n      bind\\ ``1``\\<f1,_5>\n    , void,void,void,void,int \n    >::type r12;\n\nBOOST_MPL_ASSERT(( is_same<r11,int> ));\nBOOST_MPL_ASSERT(( is_same<r12,int> ));\n\ntypedef apply_wrap\\ ``5``\\< \n      bind\\ ``5``\\<f5,_1,_2,_3,_4,_5>\n    , void,void,void,void,int \n    >::type r51;\n\ntypedef apply_wrap\\ ``5``\\<\n      bind\\ ``5``\\<f5,_5,_4,_3,_2,_1>\n    , int,void,void,void,void\n    >::type r52;\n\nBOOST_MPL_ASSERT(( is_same<r51,int> ));\nBOOST_MPL_ASSERT(( is_same<r52,int> ));\n```\n\n----------------------------------------\n\nTITLE: Adding Algorithm Entry in Modules\nDESCRIPTION: An outline of the entry format for a new stemming algorithm in the modules.txt file, which includes the algorithm name, supported encodings, and associated language codes.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/snowball/CONTRIBUTING.rst#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n# Algorithm name (needs to match the .sbl source without extension)\n# Encodings to support. Wide-character Unicode is always supported\n# Names and ISO-639 codes for the language.\n```\n\n----------------------------------------\n\nTITLE: Generated x86 Assembly for Basic Exception Handling\nDESCRIPTION: Shows the x86 assembly code generated for the simple try-catch block. This demonstrates the significant overhead introduced by exception handling machinery even for a trivial case.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/leaf/doc/whitepaper.md#2025-04-22_snippet_14\n\nLANGUAGE: x86asm\nCODE:\n```\nmain:\n        push    rcx\n        mov     edi, 8\n        call    __cxa_allocate_exception\n        mov     edx, OFFSET FLAT:_ZNSt9exceptionD1Ev\n        mov     esi, OFFSET FLAT:_ZTISt9exception\n        mov     QWORD PTR [rax], OFFSET FLAT:_ZTVSt9exception+16\n        mov     rdi, rax\n        call    __cxa_throw\n        mov     rdi, rax\n        dec     rdx\n        je      .L3\n        call    _Unwind_Resume\n.L3:\n        call    __cxa_begin_catch\n        call    __cxa_end_catch\n        xor     eax, eax\n        pop     rdx\n        ret\n```\n\n----------------------------------------\n\nTITLE: Displaying Boost.Locale Configuration Status\nDESCRIPTION: Outputs the enabled backends for Boost.Locale.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/CMakeLists.txt#2025-04-22_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nmessage(STATUS \"Boost.Locale: \"\n  \"iconv ${BOOST_LOCALE_ENABLE_ICONV}, \"\n  \"ICU ${BOOST_LOCALE_ENABLE_ICU}, \"\n  \"POSIX ${BOOST_LOCALE_ENABLE_POSIX}, \"\n  \"std ${BOOST_LOCALE_ENABLE_STD}, \"\n  \"winapi ${BOOST_LOCALE_ENABLE_WINAPI}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Get Size of Data Type\nDESCRIPTION: This accessor function returns the size, in bytes, of the data type represented by the `dtype` object.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/doc/numpy/reference/dtype.rst#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\nint get_itemsize() const;\n```\n\n----------------------------------------\n\nTITLE: Including the 'less' Metafunction Header Files in C++\nDESCRIPTION: Specifies the header files required to use the 'less' metafunction in C++ code.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/less.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/less.hpp>\n#include <boost/mpl/comparison.hpp>\n```\n\n----------------------------------------\n\nTITLE: Creating Point-free Style Print Function in C++\nDESCRIPTION: Implementation of a variadic print function using point-free style with the proj adaptor. This approach avoids explicit template recursion.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/src/point_free.md#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_HOF_STATIC_FUNCTION(simple_print) = BOOST_HOF_LIFT(std::ref(std::cout) << _);\n\nBOOST_HOF_STATIC_FUNCTION(print) = proj(simple_print);\n```\n\n----------------------------------------\n\nTITLE: Defining Contains Template in C++\nDESCRIPTION: Template definition for the 'contains' algorithm in Boost MPL. It takes a Sequence and a type T as parameters and returns an unspecified type.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/contains.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      typename Sequence\n    , typename T\n    >\nstruct contains\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Ignore Other Properties Function in C++\nDESCRIPTION: A function that allows dynamic properties to disregard attempts to add values to unknown keys without signaling an error during construction\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/property_map/doc/dynamic_property_map.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nignore_other_properties(const std::string&, const boost::any&, const boost::any&)\n```\n\n----------------------------------------\n\nTITLE: Setting Compilation Definitions for Boost MPI in CMake\nDESCRIPTION: Configures compilation definitions for the Boost MPI library, including settings for static or dynamic linking.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpi/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(boost_mpi\n  PUBLIC BOOST_MPI_NO_LIB\n  PRIVATE BOOST_MPI_SOURCE\n)\n\nif(BUILD_SHARED_LIBS)\n  target_compile_definitions(boost_mpi PUBLIC BOOST_MPI_DYN_LINK)\nelse()\n  target_compile_definitions(boost_mpi PUBLIC BOOST_MPI_STATIC_LINK)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Code Extension with ADL in Outcome\nDESCRIPTION: Demonstrates how to implement a custom hook for failure construction in Outcome before v2.2 using ADL (Argument Dependent Lookup). The code shows how to increment TLS storage and write stack backtrace on failure construction.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/tutorial/advanced/hooks/hook_result.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nerror_code_extended3\n```\n\n----------------------------------------\n\nTITLE: Building OpenSSL Path Configuration on Windows Bash\nDESCRIPTION: Bash shell commands for setting up OpenSSL path using vcpkg on Windows.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/beast/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nvcpkg.exe install openssl --triplet x32-windows\nexport OPENSSL_ROOT=path/x32-windows\n```\n\n----------------------------------------\n\nTITLE: Incrementing a Forward Iterator in C++\nDESCRIPTION: Shows how to obtain the next iterator in a sequence from a forward iterator 'i'. The result is another Forward Iterator, and the operation has amortized constant time complexity.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/ForwardIterator.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ntypedef next<i>::type j;\n```\n\n----------------------------------------\n\nTITLE: Defining Memory Layout for Trivially Copyable Types in C++\nDESCRIPTION: Structure definition showing the memory layout of basic_outcome when value_type and error_type are trivially copyable. Demonstrates union-based implementation with flags.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/basic_outcome/_index.md#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nstruct outcome_layout {\n  struct trivially_copyable_result_layout {\n    union {\n      value_type value;\n      error_type error;\n    };\n    unsigned int flags;\n  };\n  exception_type exception;\n};\n```\n\n----------------------------------------\n\nTITLE: Running Boost Math Library Tests in C++\nDESCRIPTION: Commands for running tests for the Boost Math Library, including options for running all tests or individual tests with specific compiler flags.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/math/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntest$ ../../../b2                        <- run all tests\ntest$ ../../../b2 static_assert_test     <- single test\ntest$ # A more advanced syntax, demoing various options for building the tests:\ntest$ ../../../b2 -a -j2 -q --reconfigure toolset=clang cxxflags=\"--std=c++14 -fsanitize=address -fsanitize=undefined\" linkflags=\"-fsanitize=undefined -fsanitize=address\"\n```\n\n----------------------------------------\n\nTITLE: Pop Front Method in Ptr List\nDESCRIPTION: The auto_type pop_front() method removes and returns the first element from the container, assuming it is not empty, and maintains strong exception safety.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/ptr_list.rst#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\nauto_type pop_front();\n```\n\n----------------------------------------\n\nTITLE: Adding AQL Library with Source Files\nDESCRIPTION: Defines the `arango_aql` static library and includes a comprehensive list of source files that constitute the AQL functionality. This includes components for query parsing, optimization, execution, and data handling within the ArangoDB system.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/Aql/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(arango_aql STATIC\n  Aggregator.cpp\n  AqlCall.cpp\n  AqlCallList.cpp\n  AqlCallSet.cpp\n  AqlCallStack.cpp\n  AqlExecuteResult.cpp\n  AqlFunctionFeature.cpp\n  AqlFunctionsInternalCache.cpp\n  AqlItemBlock.cpp\n  AqlItemBlockInputRange.cpp\n  AqlItemBlockManager.cpp\n  AqlItemBlockUtils.cpp\n  AqlTransaction.cpp\n  AqlValue.cpp\n  AqlValueGroup.cpp\n  AqlValueMaterializer.cpp\n  Arithmetic.cpp\n  Ast.cpp\n  AstHelper.cpp\n  AstNode.cpp\n  AstResources.cpp\n  AsyncPrefetchSlotsManager.cpp\n  AttributeAccessor.cpp\n  AttributeNamePath.cpp\n  BindParameters.cpp\n  BlocksWithClients.cpp\n  CalculationNodeVarFinder.cpp\n  ClusterQuery.cpp\n  CollectOptions.cpp\n  Collection.cpp\n  CollectionAccess.cpp\n  Collections.cpp\n  Condition.cpp\n  ConditionFinder.cpp\n  ConstFetcher.cpp\n  CostEstimate.cpp\n  DependencyProxy.cpp\n  DistributeClientBlock.cpp\n  DocumentExpressionContext.cpp\n  DocumentProducingHelper.cpp\n  EdgeConditionBuilder.cpp\n  EdgeConditionBuilderContainer.cpp\n  EngineInfoContainerCoordinator.cpp\n  EngineInfoContainerDBServerServerBased.cpp\n  ExecutionBlock.cpp\n  ExecutionEngine.cpp\n  ExecutionNodeId.cpp\n  ExecutionPlan.cpp\n  ExecutionState.cpp\n  ExecutionStats.cpp\n  ExecutorExpressionContext.cpp\n  Expression.cpp\n  FixedVarExpressionContext.cpp\n  Function.cpp\n  Functions.cpp\n  InAndOutRowExpressionContext.cpp\n  IndexHint.cpp\n  IndexJoinStrategy.cpp\n  InputAqlItemRow.cpp\n  InsertModifier.cpp\n  LateMaterializedExpressionContext.cpp\n  LazyConditions.cpp\n  LimitStats.cpp\n  ModificationExecutorFlags.h\n  ModificationOptions.cpp\n  MultiAqlItemBlockInputRange.cpp\n  MultiDependencySingleRowFetcher.cpp\n  NodeFinder.cpp\n  NonConstExpression.cpp\n  NonConstExpressionContainer.cpp\n  Optimizer.cpp\n  OptimizerRules.cpp\n  OptimizerRulesFeature.cpp\n  OptimizerUtils.cpp\n  OutputAqlItemRow.cpp\n  Parser.cpp\n  Projections.cpp\n  PruneExpressionEvaluator.cpp\n  Quantifier.cpp\n  Query.cpp\n  QueryCache.cpp\n  QueryContext.cpp\n  QueryExecutionState.cpp\n  QueryExpressionContext.cpp\n  QueryInfoLoggerFeature.cpp\n  QueryList.cpp\n  QueryOptions.cpp\n  QueryPlanCache.cpp\n  QueryProfile.cpp\n  QueryRegistry.cpp\n  QuerySnippet.cpp\n  QueryString.cpp\n  QueryWarnings.cpp\n  Range.cpp\n  RegisterId.cpp\n  RegisterInfos.cpp\n  RegisterPlan.cpp\n  RemoveModifier.cpp\n  RestAqlHandler.cpp\n  Scopes.cpp\n  ShadowAqlItemRow.cpp\n  ShardLocking.cpp\n  SharedAqlItemBlockPtr.cpp\n  SharedQueryState.cpp\n  ShortStringStorage.cpp\n  SimpleModifier.cpp\n  SingleRowFetcher.cpp\n  SkipResult.cpp\n  SortCondition.cpp\n  SortElement.cpp\n  SortInformation.cpp\n  SortRegister.cpp\n  SortedRowsStorageBackendMemory.cpp\n  SortedRowsStorageBackendStaged.cpp\n  Timing.cpp\n  TraversalConditionFinder.cpp\n  TraverserEngineShardLists.cpp\n  UpdateReplaceModifier.cpp\n  UpsertModifier.cpp\n  VarUsageFinder.cpp\n  Variable.cpp\n  VariableGenerator.cpp\n  grammar.cpp\n  tokens.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Setting up Boost.JSON Development Environment using Bash Commands\nDESCRIPTION: This code snippet provides a series of bash commands to set up a development environment for Boost.JSON. It includes cloning the Boost superproject and Boost.JSON repository, bootstrapping Boost, and building tests, benchmarks, and examples.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/json/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone --recurse-submodules --jobs 8 https://github.com/boostorg/boost.git\ncd boost/libs\ngit clone --recurse-submodules https://github.com/cppalliance/json.git\ncd ..\n./bootstrap.sh\n./b2 headers\ncd libs/json\n../../b2 test\n../../b2 bench\n../../b2 example\n```\n\n----------------------------------------\n\nTITLE: Boruvka Mixed Merge Function Declarations in C++\nDESCRIPTION: These code snippets declare overloaded versions of the `boruvka_mixed_merge` function. The function is templated, taking a graph, a weight map, and an output iterator as input. Different versions accept additional parameters like vertex index map, rank map, parent map, and supervertex map to offer flexibility for different graph representations and performance optimizations during MST computation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/dehne_gotz_min_spanning_tree.rst#2025-04-22_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\nnamespace {\n    template<typename Graph, typename WeightMap, typename OutputIterator, \n             typename VertexIndexMap, typename RankMap, typename ParentMap, \n             typename SupervertexMap>\n    OutputIterator\n    boruvka_mixed_merge(const Graph& g, WeightMap weight, OutputIterator out,\n                        VertexIndexMap index, RankMap rank_map, \n                        ParentMap parent_map, SupervertexMap\n                        supervertex_map);\n\n    template<typename Graph, typename WeightMap, typename OutputIterator, \n             typename VertexIndexMap>\n    inline OutputIterator\n    boruvka_mixed_merge(const Graph& g, WeightMap weight, OutputIterator out,\n                        VertexIndexMap index);\n\n    template<typename Graph, typename WeightMap, typename OutputIterator>\n    inline OutputIterator\n    boruvka_mixed_merge(const Graph& g, WeightMap weight, OutputIterator out);\n  }\n```\n\n----------------------------------------\n\nTITLE: V8 GYP Build Configuration\nDESCRIPTION: Configures GYP build system arguments for V8, including platform-specific settings, ICU configuration, and various build options like WebAssembly and optimization settings.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/v8-build/CMakeLists.txt#2025-04-22_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND V8_GYP_ARGS\n    -DINSPECTOR_ROOT=${V8_RELATIVE_SOURCE_DIR}\n    -Dclang_cxx_language_standard=c++17\n    -Dmac_deployment_target=${CMAKE_OSX_DEPLOYMENT_TARGET}\n    --depth=.\n    -Dforce_dynamic_crt=0\n    -Dos_posix=1\n    -Dstandalone_static_library=1\n    -Dv8_no_strict_aliasing=1\n    -Dwerror=\n    -Dclang=0\n    -Dv8_embed_script=\n    -Dembedded_builtins_snapshot_src=\n    -Dv8_enable_handle_zapping=0\n    -Dv8_use_zlib=0\n    -Dv8_enable_webassembly=0\n    -Dv8_optimized_debug=1\n    -Dicu_use_data_file_flag=1\n    -Denable_lto=0\n    -Dcomponent=static_library\n    -Dlibrary=static_library\n    -Dicu_small=false\n    -Dicu_ver_major=73\n    -Dicu_data_in=${CMAKE_BINARY_DIR}/bin/icudt73l.dat\n    -Dicu_path=${V8_RELATIVE_SOURCE_DIR}/third_party/icu/\n    -Dicu_endianness=l\n    -Dpython=${PYTHON_EXECUTABLE}\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: This command specifies the minimum required version of CMake for the project.  It ensures that the CMake version used to build the project is at least 3.10.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n\"cmake_minimum_required(VERSION 3.10)\"\n```\n\n----------------------------------------\n\nTITLE: dtype Class Declaration\nDESCRIPTION: This code snippet shows the declaration of the `dtype` class within the `boost::python::numpy` namespace. It defines the interface for creating and manipulating NumPy data type objects from C++.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/doc/numpy/reference/dtype.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nnamespace boost \n{\nnamespace python\n{\nnamespace numpy \n{\n\nclass dtype : public object \n{\n  static python::detail::new_reference convert(object::object_cref arg, bool align);\npublic:\n\n  // Convert an arbitrary Python object to a data-type descriptor object.\n  template <typename T>\n  explicit dtype(T arg, bool align=false);\n\n  // Get the built-in numpy dtype associated with the given scalar template type.\n  template <typename T> static dtype get_builtin();\n\n  // Return the size of the data type in bytes.\n  int get_itemsize() const;\n};\n\n} \n} \n}\n```\n\n----------------------------------------\n\nTITLE: Fetching BoostFetch.cmake in CMake\nDESCRIPTION: Downloads the BoostFetch.cmake file from the Boost CMake repository and includes it for managing Boost dependencies.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mp11/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nmessage(STATUS \"Fetching BoostFetch.cmake\")\n\nfile(DOWNLOAD\n  \"https://raw.githubusercontent.com/boostorg/cmake/develop/include/BoostFetch.cmake\"\n  \"${CMAKE_BINARY_DIR}/fetch_and_include/BoostFetch.cmake\"\n)\n\ninclude(\"${CMAKE_BINARY_DIR}/fetch_and_include/BoostFetch.cmake\")\n\nboost_fetch(boostorg/cmake TAG develop NO_ADD_SUBDIR)\n\nFetchContent_GetProperties(boostorg_cmake)\n\nlist(APPEND CMAKE_MODULE_PATH ${boostorg_cmake_SOURCE_DIR}/include)\n```\n\n----------------------------------------\n\nTITLE: Including find_if Header in C++\nDESCRIPTION: Shows the header file that needs to be included to use the find_if algorithm in C++.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/find_if.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/find_if.h>\n```\n\n----------------------------------------\n\nTITLE: Setting Compile Options for Cluster Methods - CMake\nDESCRIPTION: This snippet augments the compilation of 'arango_cluster_methods' by applying specified compile options which may include deprecation warnings or other compiler flags that affect how the library is built.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/Cluster/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_options(arango_cluster_methods PRIVATE\n\t${CMAKE_DEPRECATE_OPTIONS})\n```\n\n----------------------------------------\n\nTITLE: Defining Old Italic Unicode Block\nDESCRIPTION: Lists the code point ranges for the Old Italic script in Unicode. This block contains 35 code points including letters and numerals from ancient writing systems of Italy.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/spirit/workbench/unicode/Scripts.txt#2025-04-22_snippet_22\n\nLANGUAGE: unicode\nCODE:\n```\n10300..1031E  ; Old_Italic # Lo  [31] OLD ITALIC LETTER A..OLD ITALIC LETTER UU\n10320..10323  ; Old_Italic # No   [4] OLD ITALIC NUMERAL ONE..OLD ITALIC NUMERAL FIFTY\n```\n\n----------------------------------------\n\nTITLE: Adding YAP Library Snippet Executables Macro\nDESCRIPTION: Defines a CMake macro that creates executables for code snippets, linking them with the YAP library and C++ runtime library when using Clang on Linux\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/stl_interfaces/doc/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nmacro(add_snippets name)\n    add_executable(${name} ${name}.cpp)\n    target_link_libraries(${name} yap)\n    if (clang_on_linux)\n        target_link_libraries(${name} c++)\n    endif ()\nendmacro()\n```\n\n----------------------------------------\n\nTITLE: Using Pair in Template Metaprogramming with C++\nDESCRIPTION: This example demonstrates using the 'pair' structure in a fold operation to count the total number of elements and the number of negative elements in a sequence.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/pair.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ntypedef fold<\n      vector_c<int,-1,0,5,-7,-2,4,5,7>\n    , pair< int_<0>, int_<0> >\n    , pair< \n          next< first<_1> >\n        , if_< \n              less< _2, int_<0> >\n            , next< second<_1> >\n            , second<_1> \n            >\n        >\n    >::type p;\n\nBOOST_MPL_ASSERT_RELATION( p::first::value, ==, 8 );\nBOOST_MPL_ASSERT_RELATION( p::second::value, ==, 3 );\n```\n\n----------------------------------------\n\nTITLE: Testing Configuration for Boost Libraries\nDESCRIPTION: This snippet enables the building of tests if the BUILD_TESTING flag is set and if the test directory exists. It conditionally includes the test directory for building test cases.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/fiber/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# Test\n\nif(BUILD_TESTING AND EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/test/CMakeLists.txt\")\n\n  add_subdirectory(test)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Declaring eval_if Metafunction Template in C++\nDESCRIPTION: Defines the template structure for the eval_if metafunction, which takes three template parameters: a condition C and two nullary metafunctions F1 and F2. The metafunction evaluates to an unspecified type.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/eval_if.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate< \n      typename C\n    , typename F1\n    , typename F2\n    >\nstruct eval_if\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Conditionally linking V8 libraries to ArangoDB scheduler\nDESCRIPTION: This snippet conditionally links the `arango_scheduler` library with V8 libraries (`${V8_LIBS}` and `v8_interface`) if the `USE_V8` option is enabled.  This indicates that the scheduler might have dependencies on the V8 JavaScript engine for certain features.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/Scheduler/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif (USE_V8)\n  target_link_libraries(arango_scheduler PUBLIC ${V8_LIBS})\n  target_link_libraries(arango_scheduler PUBLIC v8_interface)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Docker Image Structure Overview\nDESCRIPTION: Directory structure and naming conventions for Docker build images, including Linux multiarch manifest based on x86-64 and arm64v8 architectures, and Windows-based images.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/scripts/docker/build/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- The folder named `linux` is the Ubuntu-based docker build image (Linux docker mutiarch manifest based on x86-64 and arm64v8 images)\n- The folder named `windows` is the Windows-base docker build image (Windows docker x86-64 image)\n```\n\n----------------------------------------\n\nTITLE: Const Reference Value Observer Method Signature\nDESCRIPTION: Method signature for a const lvalue reference observer that first performs a wide value check via NoValuePolicy before returning a reference to the contained value. Special case exists for void value types where only a const void-returning overload is available.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/basic_result/value_lvalue_const.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nconst value_type &value() const &\n```\n\n----------------------------------------\n\nTITLE: Creating an Image Canvas with a Margin in C++\nDESCRIPTION: This function demonstrates how to create a new image with a specified margin around a source image. It uses GIL concepts to ensure the result is compatible with different types of source images.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/examples.rst.txt#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <typename SrcView,   // Models ImageViewConcept (the source view)\n        typename DstImage>  // Models ImageConcept     (the returned image)\nvoid create_with_margin(const SrcView& src, int k, DstImage& result)\n{\n    gil_function_requires<ImageViewConcept<SrcView> >();\n    gil_function_requires<ImageConcept<DstImage> >();\n    gil_function_requires<ViewsCompatibleConcept<SrcView, typename DstImage::view_t> >();\n\n    result=DstImage(src.width()+2*k, src.height()+2*k);\n    typename DstImage::view_t centerImg=subimage_view(view(result), k,k,src.width(),src.height());\n    std::copy(src.begin(), src.end(), centerImg.begin());\n}\n\n// Alternative implementation with copy_pixels algorithm\ntemplate <typename SrcView, typename DstImage>\nvoid create_with_margin(const SrcView& src, int k, DstImage& result)\n{\n    result.recreate(src.width()+2*k, src.height()+2*k);\n    copy_pixels(src, subimage_view(view(result), k,k,src.width(),src.height()));\n}\n```\n\n----------------------------------------\n\nTITLE: Including reverse_stable_partition Header in C++\nDESCRIPTION: Shows the header file that needs to be included to use the reverse_stable_partition algorithm.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/reverse_stable_partition.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/stable_partition.hpp>\n```\n\n----------------------------------------\n\nTITLE: Cross-Compiling LZ4 DLL for Windows - Bash\nDESCRIPTION: Make command for cross-compiling LZ4 DLL on Linux with mingw-w64 64-bit toolchain.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/lz4/lib/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake BUILD_STATIC=no CC=x86_64-w64-mingw32-gcc DLLTOOL=x86_64-w64-mingw32-dlltool OS=Windows_NT\n```\n\n----------------------------------------\n\nTITLE: Checking System-Specific Features for Boost.Log\nDESCRIPTION: Performs checks for system-specific features like native syslog support and Solaris header compatibility for proper configuration of the Boost.Log library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/log/CMakeLists.txt#2025-04-22_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT BOOST_LOG_WITHOUT_SYSLOG AND NOT BOOST_LOG_USE_NATIVE_SYSLOG)\n    check_cxx_source_compiles(\"#include <${CMAKE_CURRENT_SOURCE_DIR}/config/native-syslog/native_syslog.cpp>\" BOOST_LOG_HAS_NATIVE_SYSLOG)\nendif()\n\nif (CMAKE_SYSTEM_NAME STREQUAL \"SunOS\")\n    # Solaris headers are broken and cannot be included in C++03 when _XOPEN_SOURCE=600. At the same time, they cannot be included with _XOPEN_SOURCE=500 in C++11 and later.\n    # This is because the system headers check the C language version and error out if the version does not match. We have to test if we can request _XOPEN_SOURCE=600.\n    check_cxx_source_compiles(\"#include <${CMAKE_CURRENT_SOURCE_DIR}/config/xopen-source-600/xopen_source_600.cpp>\" BOOST_LOG_HAS_XOPEN_SOURCE_600)\nendif()\n\nunset(CMAKE_REQUIRED_INCLUDES)\n```\n\n----------------------------------------\n\nTITLE: Defining the front Metafunction Template in C++\nDESCRIPTION: Defines the template structure for the 'front' metafunction, which returns the first element of a sequence. It takes a Sequence parameter and defines an unspecified type.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/front.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      typename Sequence\n    >\nstruct front\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining is_success_type<T> Template in C++ for Boost.Outcome\nDESCRIPTION: Declares an integral constant boolean variable that is true for success_type<T> types. It is not overridable and is defined in the BOOST_OUTCOME_V2_NAMESPACE namespace. This template is part of the Boost.Outcome library used in ArangoDB.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/traits/is_success_type.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<typename T>\nstruct is_success_type : std::false_type {};\n\ntemplate<typename T>\nstruct is_success_type<success_type<T>> : std::true_type {};\n```\n\n----------------------------------------\n\nTITLE: Reverse Transform Expression Semantics (Binary)\nDESCRIPTION: This code snippet describes the semantics of using `reverse_transform` with two sequences and a binary operation. It showcases the equivalent operation using `reverse_fold`, `pair_view`, `lambda`, and `inserter` to perform the reversed transformation on pairs of elements from the two sequences.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/reverse_transform.rst#2025-04-22_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\ntypedef transform<s1,s2,op,in>::type r;\n\n:Return type:\nA type.\n\n:Postcondition:\nEquivalent to \n    \ntypedef lambda<op2>::type f;\ntypedef lambda<in::operation>::type in_op;\n\ntypedef reverse_fold< \n      pair_view<s1,s2>\n    , in::state\n    , bind< \n          in_op\n        , _1\n        , bind<f, bind<first<>,_2>, bind<second<>,_2> >\n        > \n    >::type r;\n```\n\n----------------------------------------\n\nTITLE: Configuring ArangoDB Geo Library Sources in CMake\nDESCRIPTION: CMake directive to add geodesic.c source file to the arango_geo target library. This configuration specifies the source files needed to build the geographic calculation components.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/lib/Geo/karney/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(arango_geo PRIVATE\n  geodesic.c)\n```\n\n----------------------------------------\n\nTITLE: Forward Traversal Iterator Expression Requirements in C++\nDESCRIPTION: Defines required expressions and their semantics for Forward Traversal iterators. Includes constructor, increment operator, and type traits specifications.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/ForwardTraversal.rst#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nX u;           // Default construction, may have singular value\n++r             // Pre-increment operator returning X&\niterator_traits<X>::difference_type  // Signed integral type for iterator distance\niterator_traversal<X>::type         // Must be convertible to forward_traversal_tag\n```\n\n----------------------------------------\n\nTITLE: Function Signature for outcome_throw_as_system_error_with_payload Specialization in C++\nDESCRIPTION: This code snippet shows the function signature for the specialization of outcome_throw_as_system_error_with_payload for boost::system::error_code. It throws a boost::system::system_error constructed from the input error code.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/functions/policy/outcome_throw_as_system_error_with_payload_boost_error_code.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nvoid outcome_throw_as_system_error_with_payload(const boost::system::error_code &)\n```\n\n----------------------------------------\n\nTITLE: Defining Parameter Names with Attributes for Value Category Testing\nDESCRIPTION: Creates named parameter tags with different attributes (in, in_out, consume) to test different parameter passing modes with BOOST_PARAMETER_NAME macro.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_80\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_PARAMETER_NAME((_lrc, kw0) in(lrc))\nBOOST_PARAMETER_NAME((_lr, kw1) in_out(lr))\nBOOST_PARAMETER_NAME((_rrc, kw2) in(rrc))\nBOOST_PARAMETER_NAME((_rr, kw3) consume(rr))\n```\n\n----------------------------------------\n\nTITLE: Demonstrating reverse_copy_if Usage in C++\nDESCRIPTION: Provides an example of using the reverse_copy_if algorithm to filter and reverse a range of integers, keeping only those less than 5. The result is then inserted into a vector using a front inserter.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/reverse_copy_if.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntypedef reverse_copy_if<\n      range_c<int,0,10>\n    , less< _1, int_<5> >\n    , front_inserter< vector<> >\n    >::type result;\n\nBOOST_MPL_ASSERT_RELATION( size<result>::value, ==, 5 );\nBOOST_MPL_ASSERT(( equal<result,range_c<int,0,5> > ));\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories and Dependencies\nDESCRIPTION: Sets up include directories and links required Boost libraries for the Chrono library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/chrono/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(boost_chrono PUBLIC include)\n\ntarget_link_libraries(boost_chrono\n  PUBLIC\n    Boost::assert\n    Boost::config\n    Boost::core\n    Boost::integer\n    Boost::move\n    Boost::mpl\n    Boost::predef\n    Boost::ratio\n    Boost::static_assert\n    Boost::system\n    Boost::throw_exception\n    Boost::type_traits\n    Boost::typeof\n    Boost::utility\n    Boost::winapi\n)\n```\n\n----------------------------------------\n\nTITLE: Code Usage Example\nDESCRIPTION: Only one code snippet is present in the text, showing a simple statement referring to `if` usage in basic_stream::transfer_op\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/beast/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nif statement in basic_stream::transfer_op\n```\n\n----------------------------------------\n\nTITLE: Traditional ASIO Completion Handler Pattern\nDESCRIPTION: Example of the traditional ASIO completion handler approach, which requires passing callback functions that get executed when I/O operations complete.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/recipes/asio-integration.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nvoid MySock::async_read_and_process()\n{\n  // The \"pulling\" function which initiates async I/O, passing a callback\n  // which processes the result of the operation.\n  skt.async_read_some(buffer(read_buffer_),\n    [this](const error_code &ec, size_t bytes_transferred)\n    {\n      // If successful, process bytes and issue new read, otherwise handle error\n      if(!ec)\n      {\n        process_read_buffer(bytes_transferred);\n        if(still_reading())\n          async_read_and_process();\n      }\n      else\n        process_error(ec);\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost Metaparse Library Build\nDESCRIPTION: Sets up an interface library for Boost Metaparse with required dependencies and include directories. Configures version requirements, project settings, and links against other Boost libraries. Includes optional test directory setup.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/metaparse/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.16)\n\nproject(boost_metaparse VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n\nadd_library(boost_metaparse INTERFACE)\nadd_library(Boost::metaparse ALIAS boost_metaparse)\n\ntarget_include_directories(boost_metaparse INTERFACE include)\n\ntarget_link_libraries(boost_metaparse\n  INTERFACE\n    Boost::config\n    Boost::mpl\n    Boost::predef\n    Boost::preprocessor\n    Boost::static_assert\n    Boost::type_traits\n)\n\nif(BUILD_TESTING AND EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/test/CMakeLists.txt\")\n\n  add_subdirectory(test)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Using reverse_remove Algorithm in C++\nDESCRIPTION: Demonstrates the usage of the reverse_remove algorithm to remove all occurrences of float from a vector of types and reverse the order of the remaining elements.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/reverse_remove.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntypedef vector<int,float,char,float,float,double>::type types;\ntypedef reverse_remove< types,float >::type result;\n\nBOOST_MPL_ASSERT(( equal< result, vector<double,char,int> > ));\n```\n\n----------------------------------------\n\nTITLE: Example PO File Generated by xgettext\nDESCRIPTION: Shows the content of a messages.po file generated by xgettext after extracting translatable strings from source code. The file contains entries for singular and plural forms with placeholders for translations.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/doc/messages_formatting.txt#2025-04-22_snippet_12\n\nLANGUAGE: PO\nCODE:\n```\n#: dir.cpp:1\nmsgid \"Listing of catalog {1}:\"\nmsgstr \"\"\n\n#: dir.cpp:2\nmsgid \"Catalog {1} contains 1 file\"\nmsgid_plural \"Catalog {1} contains {2,num} files\"\nmsgstr[0] \"\"\nmsgstr[1] \"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Example Binary UFunc Structure - C++\nDESCRIPTION: Provides an example implementation of a struct 'example_binary_ufunc' which specifies typedefs for the argument and result types. It is necessary to expose this struct as a Python class using Boost.Python to utilize the 'call' method.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/doc/html/numpy/_sources/reference/binary_ufunc.rst.txt#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nstruct example_binary_ufunc\n{\n  typedef any_valid first_argument_type;\n  typedef any_valid second_argument_type;\n  typedef any_valid result_type;\n};\n```\n\n----------------------------------------\n\nTITLE: Creating RGB Pixel and Comparing Colors with GIL\nDESCRIPTION: This snippet shows how to create RGB and BGR pixel values and demonstrates color channel comparisons. It illustrates the relationships between the channels and how they can be accessed using both pointers and references.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/examples.rst#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n  rgb8_pixel_t p1(255,0,0);     // make a red RGB pixel\n  bgr8_pixel_t p2 = p1;         // RGB and BGR are compatible and the channels will be properly mapped.\n  assert(p1==p2);               // p2 will also be red.\n  assert(p2[0]!=p1[0]);         // operator[] gives physical channel order (as laid down in memory)\n  assert(semantic_at_c<0>(p1)==semantic_at_c<0>(p2)); // this is how to compare the two red channels\n  get_color(p1,green_t()) = get_color(p2,blue_t());  // channels can also be accessed by name\n\n  const unsigned char* r;\n  const unsigned char* g;\n  const unsigned char* b;\n  rgb8c_planar_ptr_t ptr(r,g,b); // constructing const planar pointer from const pointers to each plane\n\n  rgb8c_planar_ref_t ref=*ptr;   // just like built-in reference, dereferencing a planar pointer returns a planar reference\n\n  p2=ref; p2=p1; p2=ptr[7]; p2=rgb8_pixel_t(1,2,3);    // planar/interleaved references and values to RGB/BGR can be freely mixed\n\n  //rgb8_planar_ref_t ref2;      // compile error: References have no default constructors\n  //ref2=*ptr;                   // compile error: Cannot construct non-const reference by dereferencing const pointer\n  //ptr[3]=p1;                   // compile error: Cannot set the fourth pixel through a const pointer\n  //p1 = pixel<float, rgb_layout_t>();// compile error: Incompatible channel depth\n  //p1 = pixel<bits8, rgb_layout_t>();// compile error: Incompatible color space (even though it has the same number of channels)\n  //p1 = pixel<bits8,rgba_layout_t>();// compile error: Incompatible color space (even though it contains red, green and blue channels)\n```\n\n----------------------------------------\n\nTITLE: Coordinate Data Points in Plain Text\nDESCRIPTION: A structured list of numeric pairs, each line containing two space-separated numbers. The values appear to represent x-y coordinates or related two-dimensional data points.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/polygon/benchmark/input_data/voronoi_segment.txt#2025-04-22_snippet_3\n\nLANGUAGE: txt\nCODE:\n```\n-237637829 -25018100 -234013683 -25851821\n-234013683 -25851821 -196355142 -34515027\n-196355142 -34515027 -168879851 -40835614\n-168879851 -40835614 -167728132 -41100563\n-167728132 -41100563 -95049558 -57819995\n-95049558 -57819995 -75139838 -62400151\n-75139838 -62400151 -18553073 -75417723\n-18553073 -75417723 14667139 -83059908\n14667139 -83059908 42720297 -89513431\n42720297 -89513431 121637981 -107668147\n121637981 -107668147 146272269 -113335172\n146272269 -113335172 166112542 -117899352\n166112542 -117899352 168114551 -118359907\n168114551 -118359907 246241613 -136332743\n246241613 -136332743 291656469 -146780259\n291656469 -146780259 309311321 -150841692\n309311321 -150841692 433645260 -179444246\n433645260 -179444246 449097079 -182998879\n449097079 -182998879 462922079 -186179268\n462922079 -186179268 464438395 -186528091\n464438395 -186528091 587396604 -214814163\n587396604 -214814163 589715491 -215347615\n589715491 -215347615 646174149 -228335716\n646174149 -228335716 661285806 -231812096\n661285806 -231812096 679490759 -236000077\n679490759 -236000077 686458869 -237603064\n686458869 -237603064 689361812 -238270875\n689361812 -238270875 708646185 -242707173\n708646185 -242707173 721363977 -245632853\n721363977 -245632853 723465290 -246116252\n723465290 -246116252 745232404 -251123695\n745232404 -251123695 762431526 -255080288\n762431526 -255080288 841865950 -273353878\n841865950 -273353878 918890880 -291073173\n918890880 -291073173 957658150 -299991437\n957658150 -299991437 1001874673 -310163282\n1001874673 -310163282 1018358603 -313955348\n1018358603 -313955348 1124420849 -338354568\n1124420849 -338354568 1496853683 -424031338\n1496853683 -424031338 1638842537 -456695339\n1638842537 -456695339 1715841182 -474408587\n1715841182 -474408587 1763935115 -485472415\n1763935115 -485472415 1861986607 -508028792\n1861986607 -508028792 2028932301 -546434019\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Pattern Syntax Characters\nDESCRIPTION: This snippet defines a range of Unicode characters classified as Pattern_Syntax. It includes their code points, general category, and character descriptions. The list covers various punctuation marks, symbols, and special characters used in different writing systems and notations.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/spirit/workbench/unicode/PropList.txt#2025-04-22_snippet_30\n\nLANGUAGE: Unicode\nCODE:\n```\n0021..0023    ; Pattern_Syntax # Po   [3] EXCLAMATION MARK..NUMBER SIGN\n0024          ; Pattern_Syntax # Sc       DOLLAR SIGN\n0025..0027    ; Pattern_Syntax # Po   [3] PERCENT SIGN..APOSTROPHE\n0028          ; Pattern_Syntax # Ps       LEFT PARENTHESIS\n0029          ; Pattern_Syntax # Pe       RIGHT PARENTHESIS\n002A          ; Pattern_Syntax # Po       ASTERISK\n002B          ; Pattern_Syntax # Sm       PLUS SIGN\n002C          ; Pattern_Syntax # Po       COMMA\n002D          ; Pattern_Syntax # Pd       HYPHEN-MINUS\n002E..002F    ; Pattern_Syntax # Po   [2] FULL STOP..SOLIDUS\n003A..003B    ; Pattern_Syntax # Po   [2] COLON..SEMICOLON\n003C..003E    ; Pattern_Syntax # Sm   [3] LESS-THAN SIGN..GREATER-THAN SIGN\n003F..0040    ; Pattern_Syntax # Po   [2] QUESTION MARK..COMMERCIAL AT\n005B          ; Pattern_Syntax # Ps       LEFT SQUARE BRACKET\n005C          ; Pattern_Syntax # Po       REVERSE SOLIDUS\n005D          ; Pattern_Syntax # Pe       RIGHT SQUARE BRACKET\n005E          ; Pattern_Syntax # Sk       CIRCUMFLEX ACCENT\n0060          ; Pattern_Syntax # Sk       GRAVE ACCENT\n007B          ; Pattern_Syntax # Ps       LEFT CURLY BRACKET\n007C          ; Pattern_Syntax # Sm       VERTICAL LINE\n007D          ; Pattern_Syntax # Pe       RIGHT CURLY BRACKET\n007E          ; Pattern_Syntax # Sm       TILDE\n```\n\n----------------------------------------\n\nTITLE: Configuring Jemalloc for Low Resource Applications\nDESCRIPTION: Configuration for applications with low memory requirements. Uses a single arena, limits thread cache size, and employs aggressive memory reclamation with short dirty decay time and immediate muzzy decay.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/jemalloc/jemalloc/TUNING.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnarenas:1,tcache_max:1024,dirty_decay_ms:1000,muzzy_decay_ms:0\n```\n\n----------------------------------------\n\nTITLE: Specifying Boost Assign Dependencies\nDESCRIPTION: Links the Boost Assign library with its required Boost dependencies using target_link_libraries.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/assign/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(boost_assign\n  INTERFACE\n    Boost::array\n    Boost::config\n    Boost::core\n    Boost::move\n    Boost::mpl\n    Boost::preprocessor\n    Boost::ptr_container\n    Boost::range\n    Boost::static_assert\n    Boost::throw_exception\n    Boost::tuple\n    Boost::type_traits\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Files and Compiler Flags for Boost.Context\nDESCRIPTION: Sets up the source files, compiler flags, and library dependencies based on the configured options for Boost.Context.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/context/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif(BOOST_CONTEXT_IMPLEMENTATION STREQUAL \"fcontext\")\n  if(BOOST_CONTEXT_ASSEMBLER STREQUAL gas)\n    if(CMAKE_CXX_PLATFORM_ID MATCHES \"Cygwin\")\n      enable_language(ASM-ATT)\n    else()\n      enable_language(ASM)\n    endif()\n  else()\n    enable_language(ASM_MASM)\n  endif()\nendif()\n\nif(BOOST_CONTEXT_BINARY_FORMAT STREQUAL mach-o)\n  set(BOOST_CONTEXT_BINARY_FORMAT macho)\nendif()\n\nset(_asm_suffix ${BOOST_CONTEXT_ARCHITECTURE}_${BOOST_CONTEXT_ABI}_${BOOST_CONTEXT_BINARY_FORMAT}_${BOOST_CONTEXT_ASSEMBLER}${BOOST_CONTEXT_ASM_SUFFIX})\n\nset(ASM_SOURCES\n  src/asm/make_${_asm_suffix}\n  src/asm/jump_${_asm_suffix}\n  src/asm/ontop_${_asm_suffix}\n)\n\nunset(_asm_suffix)\n\nif(BOOST_CONTEXT_IMPLEMENTATION STREQUAL \"fcontext\")\n  set(IMPL_SOURCES ${ASM_SOURCES})\n  if(BOOST_CONTEXT_ASSEMBLER STREQUAL masm AND BOOST_CONTEXT_ARCHITECTURE STREQUAL i386)\n      set_source_files_properties(${ASM_SOURCES} PROPERTIES COMPILE_FLAGS \"/safeseh\")\n  endif()\n  if(CMAKE_CXX_COMPILER_ID STREQUAL \"GNU\")\n    set_property(SOURCE ${ASM_SOURCES} APPEND PROPERTY COMPILE_OPTIONS \"-x\" \"assembler-with-cpp\")\n  endif()\nelse()\n  set(IMPL_SOURCES\n    src/continuation.cpp\n    src/fiber.cpp\n  )\nendif()\n\nif(WIN32 AND NOT CMAKE_CXX_PLATFORM_ID MATCHES \"Cygwin\")\n  set(STACK_TRAITS_SOURCES\n    src/windows/stack_traits.cpp\n  )\nelse()\n  set(STACK_TRAITS_SOURCES\n    src/posix/stack_traits.cpp\n  )\nendif()\n\nadd_library(boost_context\n  ${IMPL_SOURCES}\n  ${STACK_TRAITS_SOURCES}\n)\n\nadd_library(Boost::context ALIAS boost_context)\n\ntarget_include_directories(boost_context PUBLIC include)\n\ntarget_link_libraries(boost_context\n  PUBLIC\n    Boost::assert\n    Boost::config\n    Boost::core\n    Boost::mp11\n    Boost::pool\n    Boost::predef\n    Boost::smart_ptr\n)\n\ntarget_compile_definitions(boost_context\n  PUBLIC BOOST_CONTEXT_NO_LIB\n  PRIVATE BOOST_CONTEXT_SOURCE\n)\n\nif(BUILD_SHARED_LIBS)\n  target_compile_definitions(boost_context PUBLIC BOOST_CONTEXT_DYN_LINK BOOST_CONTEXT_EXPORT=EXPORT)\nelse()\n  target_compile_definitions(boost_context PUBLIC BOOST_CONTEXT_STATIC_LINK BOOST_CONTEXT_EXPORT=)\nendif()\n\nif(BOOST_CONTEXT_IMPLEMENTATION STREQUAL \"ucontext\")\n  target_compile_definitions(boost_context PUBLIC BOOST_USE_UCONTEXT)\nendif()\n\nif(BOOST_CONTEXT_IMPLEMENTATION STREQUAL \"winfib\")\n  target_compile_definitions(boost_context PUBLIC BOOST_USE_WINFIB)\nendif()\n\nif(BUILD_TESTING AND EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/test/CMakeLists.txt\")\n  add_subdirectory(test)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Linking Boost Libraries\nDESCRIPTION: This snippet links various Boost libraries as interface dependencies to boost_rational. This means that any project using boost_rational will automatically link against these Boost libraries (assert, config, core, integer, static_assert, throw_exception, type_traits, utility).\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/rational/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n\"target_link_libraries(boost_rational\n  INTERFACE\n    Boost::assert\n    Boost::config\n    Boost::core\n    Boost::integer\n    Boost::static_assert\n    Boost::throw_exception\n    Boost::type_traits\n    Boost::utility\n)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for arango_tests_basics in CMake\nDESCRIPTION: Sets up the include directories for the arango_tests_basics target, ensuring it can access all necessary header files from the project.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/CMakeLists.txt#2025-04-22_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(arango_tests_basics\n  PUBLIC\n    ${PROJECT_SOURCE_DIR}/arangod/\n    ${PROJECT_SOURCE_DIR}/lib/\n    ${PROJECT_SOURCE_DIR}/${ENTERPRISE_INCLUDE_DIR}\n    ${PROJECT_SOURCE_DIR}/tests\n    ${PROJECT_SOURCE_DIR}/tests/Mocks/)\n```\n\n----------------------------------------\n\nTITLE: STL-Style Pixel Copy and Fill Algorithms for Image Views in Boost.GIL\nDESCRIPTION: Declarations of STL-inspired pixel copying and filling algorithms that operate on image views. These include copy_pixels, uninitialized_copy_pixels, fill_pixels, and uninitialized_fill_pixels functions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/image_view.rst#2025-04-22_snippet_13\n\nLANGUAGE: cpp\nCODE:\n```\n// Equivalents of std::copy and std::uninitialized_copy\n// where ImageViewConcept<V1>, MutableImageViewConcept<V2>, ViewsCompatibleConcept<V1,V2>\ntemplate <typename V1, typename V2>\nvoid copy_pixels(const V1& src, const V2& dst);\ntemplate <typename V1, typename V2>\nvoid uninitialized_copy_pixels(const V1& src, const V2& dst);\n\n// Equivalents of std::fill and std::uninitialized_fill\n// where MutableImageViewConcept<V>, PixelConcept<Value>, PixelsCompatibleConcept<Value,V::value_type>\ntemplate <typename V, typename Value>\nvoid fill_pixels(const V& dst, const Value& val);\ntemplate <typename V, typename Value>\nvoid uninitialized_fill_pixels(const V& dst, const Value& val);\n```\n\n----------------------------------------\n\nTITLE: Jemalloc Memory Protection Patch\nDESCRIPTION: Critical patch for jemalloc to maintain consistent memory protection flags and prevent memory mapping table growth\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/README_maintainers.md#2025-04-22_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\ndiff --git a/3rdParty/jemalloc/jemalloc/src/pages.c b/3rdParty/jemalloc/jemalloc/src/pages.c\nindex 8cf2fd9f876..11489b3f03d 100644\n--- a/3rdParty/jemalloc/jemalloc/src/pages.c\n+++ b/3rdParty/jemalloc/jemalloc/src/pages.c\n@@ -37,7 +37,7 @@ size_t        os_page;\n \n #ifndef _WIN32\n #  define PAGES_PROT_COMMIT (PROT_READ | PROT_WRITE)\n-#  define PAGES_PROT_DECOMMIT (PROT_NONE)\n+#  define PAGES_PROT_DECOMMIT (PROT_READ | PROT_WRITE)\n static int     mmap_flags;\n #endif\n static bool    os_overcommits;\n```\n\n----------------------------------------\n\nTITLE: Flushing Ghost Cell Changes in Distributed Property Map in C++\nDESCRIPTION: Method to emit messages sending the contents of all local ghost cells to their owners.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/distributed_property_map.rst#2025-04-22_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\nvoid flush();\n```\n\n----------------------------------------\n\nTITLE: Architecture Detection\nDESCRIPTION: This snippet checks the target architecture of the build system and sets related CMake variables accordingly for either 32-bit or 64-bit architectures.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/v8-build/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# detect 32bit or 64bit and target architecture\nif(\"${CMAKE_TARGET_ARCHITECTURES}\" STREQUAL \"aarch64\")\n  set(V8_PROC_ARCH \"arm64\")\n  list(APPEND V8_GYP_ARGS -Darm_fpu=default -Darm_float_abi=default)\nelse ()\n  if (\"${BITS}\" STREQUAL \"64\")\n    set(V8_PROC_ARCH \"x64\")\n  else ()\n    set(V8_PROC_ARCH \"ia32\")\n  endif ()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Macros for Standalone Shared Library in C++\nDESCRIPTION: When building Boost.JSON as a standalone shared library, define these macros appropriately for your toolchain. This example shows the definitions for MSVC when building the DLL and when using the DLL in an application.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/json/README.md#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n// When building the DLL\n#define BOOST_JSON_DECL       __declspec(dllexport)\n#define BOOST_JSON_CLASS_DECL __declspec(dllexport)\n\n// When building the application which uses the DLL\n#define BOOST_JSON_DECL       __declspec(dllimport)\n#define BOOST_JSON_CLASS_DECL __declspec(dllimport)\n```\n\n----------------------------------------\n\nTITLE: Generating Visual Studio Solution with CMake\nDESCRIPTION: These CMake commands generate Visual Studio solutions for 32-bit and 64-bit builds of Boost.JSON using MSVC toolchain.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/json/README.md#2025-04-22_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ncmake -G \"Visual Studio 16 2019\" -A Win32 -B bin -DCMAKE_TOOLCHAIN_FILE=cmake/toolchains/msvc.cmake\ncmake -G \"Visual Studio 16 2019\" -A x64 -B bin64 -DCMAKE_TOOLCHAIN_FILE=cmake/toolchains/msvc.cmake\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost.Signals2 Examples Build in CMake\nDESCRIPTION: This CMake script configures the build process for Boost.Signals2 examples. It finds all .cpp files in the directory, sets up dependencies including Boost::signals2, Boost::io, and Threads, and creates an executable target for each example file.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/signals2/example/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nfile( GLOB example_src_files *.cpp )\n\nfind_package(Threads REQUIRED)\n\nforeach( file IN LISTS example_src_files )\n\n    get_filename_component( example_name ${file} NAME_WE )\n\n    add_executable( boost_signals2_example_${example_name} ${file} )\n    target_link_libraries( boost_signals2_example_${example_name}\n        PUBLIC\n            Boost::signals2\n            Boost::io\n            Threads::Threads\n    )\n\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Minimum Version and Build Type\nDESCRIPTION: Sets the minimum CMake version requirement and configures default build type with validation logic\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.21)\nmessage(STATUS \"CMake version: ${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}.${CMAKE_PATCH_VERSION}\")\nset(CMAKE_POLICY_DEFAULT_CMP0077 NEW)\n\nif(NOT CMAKE_BUILD_TYPE)\n  set(CMAKE_BUILD_TYPE Release\n      CACHE STRING\n      \"Choose the type of build, options are: None Debug Release RelWithDebInfo MinSizeRel.\"\n      FORCE\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Boost.Locale Compile Definitions\nDESCRIPTION: Configures compile definitions for the Boost.Locale library, including linking options.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(boost_locale\n  PUBLIC BOOST_LOCALE_NO_LIB\n  # Source files already define BOOST_LOCALE_SOURCE\n  # PRIVATE BOOST_LOCALE_SOURCE\n)\n\nif(BUILD_SHARED_LIBS)\n  target_compile_definitions(boost_locale PUBLIC BOOST_LOCALE_DYN_LINK)\nelse()\n  target_compile_definitions(boost_locale PUBLIC BOOST_LOCALE_STATIC_LINK)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Library Target Configuration\nDESCRIPTION: Sets up the main library target with source files, linking options, and installation configurations.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/json/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nfile(GLOB_RECURSE BOOST_JSON_HEADERS CONFIGURE_DEPENDS\n    include/boost/*.hpp\n    include/boost/*.ipp\n    include/boost/*.natvis\n)\n\nset(BOOST_JSON_SOURCES src/src.cpp)\n\nset_property(GLOBAL PROPERTY USE_FOLDERS ON)\n\nsource_group(TREE ${CMAKE_CURRENT_SOURCE_DIR}/include/boost PREFIX \"\" FILES ${BOOST_JSON_HEADERS})\nsource_group(TREE ${CMAKE_CURRENT_SOURCE_DIR}/src PREFIX \"\" FILES ${BOOST_JSON_SOURCES})\n\nadd_library(boost_json ${BOOST_JSON_HEADERS} ${BOOST_JSON_SOURCES})\nadd_library(Boost::json ALIAS boost_json)\nboost_json_setup_properties(boost_json)\n```\n\n----------------------------------------\n\nTITLE: Defining Macro for Adding ArangoDB Snippet Executables in CMake\nDESCRIPTION: Creates a macro 'add_snippets' that adds an executable, links it with the 'yap' library, and conditionally links with 'c++' library on Linux with Clang.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/yap/doc/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nmacro(add_snippets name)\n    add_executable(${name} ${name}.cpp)\n    target_link_libraries(${name} yap)\n    if (clang_on_linux)\n        target_link_libraries(${name} c++)\n    endif ()\nendmacro()\n```\n\n----------------------------------------\n\nTITLE: Declaring or_ Metafunction Template in C++\nDESCRIPTION: Defines the template structure for the or_ metafunction, which takes multiple metafunction arguments and returns an unspecified type.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/or_.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate< \n      typename F1\n    , typename F2\n    |...|\n    , typename F\\*n* = |unspecified|\n    >\nstruct or_\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Usage Example of BOOST_MPL_ASSERT_NOT in C++\nDESCRIPTION: Example demonstrating how to use BOOST_MPL_ASSERT_NOT to ensure two template parameters are not the same type. The example also shows the error message that would be generated if the assertion fails.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/ASSERT_NOT.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntemplate< typename T, typename U > struct my\n{\n    // ...\n    BOOST_MPL_ASSERT_NOT(( is_same< T,U > ));\n};\n\nmy<void,void> test;\n\n// In instantiation of `my<void, void>':\n//   instantiated from here\n// conversion from `\n//   mpl_::failed************boost::mpl::not_<boost::is_same<void, void> \n//   >::************' to non-scalar type `mpl_::assert<false>' requested\n```\n\n----------------------------------------\n\nTITLE: Reverse Transform Example\nDESCRIPTION: This code snippet demonstrates an example of using `reverse_transform`. It transforms a `vector` of types into a `vector` of pointers to those types, using `boost::add_pointer` as the transformation operation. `BOOST_MPL_ASSERT` is used to ensure the result is the expected `pointers` type.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/reverse_transform.rst#2025-04-22_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\ntypedef vector<char,short,int,long,float,double> types;\ntypedef vector<double*,float*,long*,int*,short*,char*> pointers;\ntypedef reverse_transform< types,boost::add_pointer<_1> >::type result;\n\nBOOST_MPL_ASSERT(( equal<result,pointers> ));\n```\n\n----------------------------------------\n\nTITLE: Setting Linker Flags for FAISS in CMake\nDESCRIPTION: Appends FAISS-specific linker flags to the global executable linker flags to ensure proper linking with the FAISS library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/CMakeLists.txt#2025-04-22_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} ${FAISS_EXE_LINKER_FLAGS}\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Explicit Boolean Operator in C++\nDESCRIPTION: A constexpr boolean operator that checks if a value is present. This is an alias for has_value() method, operates in constant time, and provides a no-throw guarantee.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/basic_result/operator_bool.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nexplicit operator bool() const noexcept\n```\n\n----------------------------------------\n\nTITLE: Adding Test Subdirectories in CMake\nDESCRIPTION: Adds various test subdirectories to the build, including Actor, Async, AsyncRegistryServer, sepp, and VocBase/Properties tests.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/CMakeLists.txt#2025-04-22_snippet_33\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Actor)\nadd_subdirectory(Async)\nadd_subdirectory(AsyncRegistryServer)\nadd_subdirectory(sepp)\nadd_subdirectory(VocBase/Properties)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Python Class Inheritance Issues with Built-in Types\nDESCRIPTION: Example showing how Python's built-in types allow derived classes to avoid calling __init__ while still maintaining functionality, since invariants are established in __new__.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/doc/article.rst#2025-04-22_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\n>>> class L(list):\n...      def __init__(self):\n...          pass\n...\n>>> L().reverse()\n>>> \n```\n\n----------------------------------------\n\nTITLE: ptr_array Class Synopsis in Boost\nDESCRIPTION: Defines the structure and member functions of the `ptr_array` class within the boost namespace. Includes constructors, assignment operators, element access methods, modifiers, and functions related to pointer container requirements. The template parameters specify the type of the contained pointers (T), the size of the array (N), and the allocator to be used.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/ptr_array.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nnamespace boost\n{\n\n    template\n    <\n        class T,\n        size_t N,\n        CloneAllocator = heap_clone_allocator\n    >\n    class ptr_array : public *implementation-defined*\n    {\n    public: // `construct/copy/destroy`_\n        ptr_array();\n        explicit ptr_array( const ptr_array& r );\n        template< class U >\n        explicit ptr_array( const ptr_array<U,N>& r );\n        explicit ptr_array( compatible-smart-ptr<ptr_array>& r );\n\n        ptr_array& operator=( const ptr_array& r );\n        template< class U >\n        ptr_array& operator=( const ptr_array<U,N>& r );\n        ptr_array& operator=( compatible-smart-ptr<this_type> r );\n\n    public: // `iterators`_\n\n    public: // `capacity`_\n\n    public: // `element access`_\n        T&        front();\n        const T&  front() const;\n        T&        back();\n        const T&  back() const;\n\n        template< size_t idx >\n        T&        at();\n        template< size_t idx >\n        const T&  at() const;\n        T&        at( size_t );\n        const T&  at( size_t );\n\n        T&        operator[]( size_t );\n        const T&  operator[]( size_t ) const;\n\n    public: // `modifiers`_\n        void  swap( ptr_array& r );\n\n        template< size_t idx >\n        auto_type replace( T* r );\n        template< size_t idx, class U >\n        auto_type replace( compatible-smart-ptr<U> r );\n        auto_type replace( size_t idx, T* r );\n        template< class U >\n        auto_type replace( size_t idx, compatible-smart-ptr<U> r );\n\n    public: // `pointer container requirements`_\n        compatible-smart-ptr<ptr_array>  clone() const;\n        compatible-smart-ptr<ptr_array>  release();\n        template< size_t idx >\n        bool                      is_null() const;\n        bool                      is_null( size_t idx ) const;\n\n    }; //  class 'ptr_sequence_adapter'\n\n} // namespace 'boost'\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Files with CMake\nDESCRIPTION: This CMake snippet specifies the source files to be compiled within the ArangoDB project, particularly for RocksDB integration. The snippet targets private compilation of the listed C++ files: RocksDBBackgroundErrorListener.cpp, RocksDBMetricsListener.cpp, and RocksDBThrottle.cpp. There are no additional dependencies mentioned, but these files are expected to be part of the source directory.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/RocksDBEngine/Listeners/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(arango_rocksdb PRIVATE\n  RocksDBBackgroundErrorListener.cpp\n  RocksDBMetricsListener.cpp\n  RocksDBThrottle.cpp)\n```\n\n----------------------------------------\n\nTITLE: Graph Exception Handling Structs - C++\nDESCRIPTION: This section defines various exception structs derived from graph_exception to handle errors that may occur during graph reading operations. Each struct specializes in a particular error type, such as bad_parallel_edge, directed_graph_error, undirected_graph_error, and parse_error. These exceptions provide detailed information about the errors encountered, including the specifics of the inputs that caused them, making debugging easier.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph/doc/read_graphml.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nstruct graph_exception : public std::exception {\n    virtual ~graph_exception() throw();\n    virtual const char* what() const throw() = 0;\n};\n\nstruct bad_parallel_edge : public graph_exception {\n    std::string from;\n    std::string to;\n\n    bad_parallel_edge(const std::string&, const std::string&);\n    virtual ~bad_parallel_edge() throw();\n    const char* what() const throw();\n};\n\nstruct directed_graph_error : public graph_exception {\n    virtual ~directed_graph_error() throw();\n    virtual const char* what() const throw();\n};\n\nstruct undirected_graph_error : public graph_exception {\n    virtual ~undirected_graph_error() throw();\n    virtual const char* what() const throw();\n};\n\nstruct parse_error : public graph_exception {\n    parse_error(const std::string&);\n    virtual ~parse_error() throw() {}\n    virtual const char* what() const throw();\n    std::string statement;\n    std::string error;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining ArangoDB Replication Target Sources with CMake\nDESCRIPTION: This CMake command specifies the source files for the `arango_replication2` target. It indicates that the `BlackHoleStateMachine.cpp` and `BlackHoleStateMachineFeature.cpp` files should be compiled and linked into the `arango_replication2` library or executable. The `PRIVATE` keyword means these sources are only needed when building `arango_replication2` and not any targets that depend on it.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/Replication2/StateMachines/BlackHole/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(arango_replication2 PRIVATE\n  BlackHoleStateMachine.cpp\n  BlackHoleStateMachineFeature.cpp)\n```\n\n----------------------------------------\n\nTITLE: Implementing Template Class with Parameter Evaluation Categories in C++\nDESCRIPTION: Defines a structure U with template methods for evaluating parameter categories (lvalue reference, rvalue reference, const references) using std_bitset.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_91\n\nLANGUAGE: C++\nCODE:\n```\nstruct U\n{\n    template <std::size_t N>\n    static invoked evaluate_category(|std_bitset|_\\<N + 1> const&)\n    {\n        return passed_by_lvalue_reference_to_const;\n    }\n\n    template <std::size_t N>\n    static invoked evaluate_category(|std_bitset|_\\<N + 1>&)\n    {\n        return passed_by_lvalue_reference;\n    }\n\n    template <std::size_t N>\n    static invoked evaluate_category(|std_bitset|_\\<N + 1> const&&)\n    {\n        return passed_by_rvalue_reference_to_const;\n    }\n\n    template <std::size_t N>\n    static invoked evaluate_category(|std_bitset|_\\<N + 1>&&)\n    {\n        return passed_by_rvalue_reference;\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Defining BOOST_OUTCOME_SYMBOL_VISIBLE for Boost.Outcome\nDESCRIPTION: Default definition of BOOST_OUTCOME_SYMBOL_VISIBLE when used within Boost.Outcome. It maps to the BOOST_SYMBOL_VISIBLE macro.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/macros/symbol_visible.md#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_SYMBOL_VISIBLE\n```\n\n----------------------------------------\n\nTITLE: Defining Google Benchmark Setup Function in CMake\nDESCRIPTION: This function, `add_benchmark`, is defined to streamline the process of adding benchmark executables in a CMake project. It accepts parameters for include directories, link libraries, and compile options while ensuring proper dependency handling and configuration based on the testing options provided.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/histogram/benchmark/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(add_benchmark NAME)\n\n  cmake_parse_arguments(PARSE_ARGV 1 _ \"\" \"\" \";INCLUDE_DIRECTORIES;LINK_LIBRARIES;COMPILE_OPTIONS\")\n\n  if(__UNPARSED_ARGUMENTS)\n    message(AUTHOR_WARNING \"add_benchmark: extra arguments ignored: ${__UNPARSED_ARGUMENTS}\")\n  endif()\n\n  set(SOURCE ${NAME}.cpp)\n  set(NAME benchmark_${NAME})\n\n  if(DEFINED BUILD_TESTING AND NOT BUILD_TESTING)\n    return()\n  endif()\n\n  add_executable(${NAME} ${SOURCE})\n  target_include_directories(${NAME} PRIVATE ${__INCLUDE_DIRECTORIES})\n  target_link_libraries(${NAME} PRIVATE Boost::histogram benchmark_main ${__LINK_LIBRARIES})\n  target_compile_options(${NAME} PRIVATE -DNDEBUG -O3 -march=native -funsafe-math-optimizations ${__COMPILE_OPTIONS})\n\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Building LZ4 Libraries (Shared and Static)\nDESCRIPTION: Creates shared and static library targets with appropriate properties and configuration. Sets version information, output names, and compiler definitions. The built libraries are tracked in a list for installation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/lz4/build/cmake/CMakeLists.txt#2025-04-22_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\n# liblz4\nset(LZ4_LIBRARIES_BUILT)\nif(BUILD_SHARED_LIBS)\n  add_library(lz4_shared SHARED ${LZ4_SOURCES})\n  set_target_properties(lz4_shared PROPERTIES\n    OUTPUT_NAME lz4\n    SOVERSION \"${LZ4_VERSION_MAJOR}\"\n    VERSION \"${LZ4_VERSION_STRING}\")\n  if(MSVC)\n    target_compile_definitions(lz4_shared PRIVATE\n      LZ4_DLL_EXPORT=1)\n  endif()\n  list(APPEND LZ4_LIBRARIES_BUILT lz4_shared)\nendif()\nif(BUILD_STATIC_LIBS)\n  add_library(lz4_static STATIC ${LZ4_SOURCES})\n  set_target_properties(lz4_static PROPERTIES\n    OUTPUT_NAME lz4\n    POSITION_INDEPENDENT_CODE ${LZ4_POSITION_INDEPENDENT_LIB})\n  list(APPEND LZ4_LIBRARIES_BUILT lz4_static)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Cloning the Boost Super-Project - Shell\nDESCRIPTION: Clones the Boost super-project repository along with its submodules. This is the first step required before making contributions to Boost.GIL.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone --recurse-submodules --jobs 8 https://github.com/boostorg/boost.git\n```\n\n----------------------------------------\n\nTITLE: Auto Pointer Return Implementation in C++\nDESCRIPTION: Concrete implementation of release that returns std::auto_ptr, used in C++98/03/11/14.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/compatible_smart_ptr.rst#2025-04-22_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\nstd::auto_ptr<T> container::release( );\n```\n\n----------------------------------------\n\nTITLE: Generating Configuration Header\nDESCRIPTION: Configures and generates a header file with build-specific settings.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/snappy/snappy-1.1.9/CMakeLists.txt#2025-04-22_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nconfigure_file(\n  \"cmake/config.h.in\"\n  \"${PROJECT_BINARY_DIR}/config.h\"\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Include Headers to IDE in ArangoDB CMake Configuration\nDESCRIPTION: This CMake snippet collects all .hpp files in the current directory, adds them to a custom target called 'safe_numerics', and sets up a subdirectory. This helps in organizing header files for IDE visibility and project structure.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/boost/safe_numerics/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nfile(GLOB include_files \n  RELATIVE \"${CMAKE_CURRENT_SOURCE_DIR}\" \n  \"*.hpp\"\n)\nadd_custom_target(safe_numerics SOURCES ${include_files})\n\nadd_subdirectory(\"concept\")\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Boost Function\nDESCRIPTION: This snippet configures the include directories for the Boost Function library, allowing header files to be found during compilation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/function/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(boost_function INTERFACE include)\n```\n\n----------------------------------------\n\nTITLE: Implementing Pack Join Base in C++\nDESCRIPTION: Defines a template for joining two parameter packs. It calculates the total size of the joined pack and provides a call method to create the joined pack.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/pack.hpp.txt#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<std::size_t... Ns1, class... Ts1, std::size_t... Ns2, class... Ts2>\nstruct pack_join_base<pack_base<seq<Ns1...>, Ts1...>, pack_base<seq<Ns2...>, Ts2...>>\n{\n    static constexpr long total_size = sizeof...(Ts1) + sizeof...(Ts2);\n    typedef pack_base<typename detail::gens<total_size>::type, Ts1..., Ts2...> result_type;\n\n    template<class P1, class P2>\n    static constexpr result_type call(P1&& p1, P2&& p2)\n    BOOST_HOF_RETURNS_DEDUCE_NOEXCEPT(\n        result_type(\n            boost::hof::detail::pack_get<Ts1, pack_tag<seq<Ns1>, Ts1...>>(BOOST_HOF_FORWARD(P1)(p1))..., \n            boost::hof::detail::pack_get<Ts2, pack_tag<seq<Ns2>, Ts2...>>(BOOST_HOF_FORWARD(P2)(p2))...)\n    )\n    {\n        return result_type(\n            boost::hof::detail::pack_get<Ts1, pack_tag<seq<Ns1>, Ts1...>>(BOOST_HOF_FORWARD(P1)(p1))..., \n            boost::hof::detail::pack_get<Ts2, pack_tag<seq<Ns2>, Ts2...>>(BOOST_HOF_FORWARD(P2)(p2))...);\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Output Directory for Binaries in CMake\nDESCRIPTION: Specifies the output directory for compiled binaries in the build process.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/client-tools/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY \"${PROJECT_BINARY_DIR}/bin/\")\n```\n\n----------------------------------------\n\nTITLE: Function Object Implementation Example\nDESCRIPTION: Example showing how function objects are actually implemented using structs with operator(), though documentation uses simpler function signatures.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/src/definitions.md#2025-04-22_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nstruct if_f\n{\n    template<class IntegralConstant>\n    constexpr auto operator()(IntegralConstant) const;\n};\nconst constexpr if_f if_ = {};\n```\n\n----------------------------------------\n\nTITLE: Debug Mode Option for V8\nDESCRIPTION: This snippet creates an option to compile V8 in debug mode, which can be enabled or disabled based on user preference.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/v8-build/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\noption(USE_DEBUG_V8 \"compile V8 in DEBUG mode\" OFF)\n```\n\n----------------------------------------\n\nTITLE: Defining Failure Traversal Logic in C++\nDESCRIPTION: This snippet implements the 'traverse_failure' struct template, which is responsible for traversing through nested failures and revealing them. It uses SFINAE to handle different cases.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/reveal.hpp.txt#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<class F, class Failure=get_failure<F>, class=void>\nstruct traverse_failure \n: reveal_failure<F, Failure>\n{\n    constexpr traverse_failure()\n    {}\n};\n\ntemplate<class F, class Failure>\nstruct traverse_failure<F, Failure, typename holder< \n    typename Failure::children\n>::type> \n: Failure::children::template overloads<F>\n{\n    constexpr traverse_failure()\n    {}\n};\n```\n\n----------------------------------------\n\nTITLE: Synopsis of unpack_args Metafunction in C++\nDESCRIPTION: Template declaration for the unpack_args metafunction which transforms an n-ary Lambda Expression into a unary Metafunction Class that accepts a sequence of arguments.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/unpack_args.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate< \n      typename F\n    >\nstruct unpack_args\n{\n    // |unspecified|\n    // |...|\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Named Parameters with Boost Parameter in C++\nDESCRIPTION: Uses BOOST_PARAMETER_NAME macro to define named parameters for use with the BOOST_PARAMETER_BASIC_CONST_MEMBER_FUNCTION macro. These parameters will be used in the function signature.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_56\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_PARAMETER_NAME((_lrc, kw) in(lrc))\nBOOST_PARAMETER_NAME((_lr, kw) in_out(lr))\nBOOST_PARAMETER_NAME((_rrc, kw) in(rrc))\nBOOST_PARAMETER_NAME((_rr, kw) consume(rr))\n```\n\n----------------------------------------\n\nTITLE: Configuring Shared Library Target\nDESCRIPTION: Conditionally sets up the shared library target with the same configuration as the static library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/json-schema-validation/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(ARANGO_VALIDATION_BUILD_SHARED)\nadd_library(arango-validation-shared SHARED\n    src/validation.cpp\n)\ntarget_compile_features(arango-validation-shared PUBLIC cxx_std_17)\ntarget_link_libraries(arango-validation-shared PUBLIC\n   taocpp::json\n   velocypack\n)\ntarget_include_directories(arango-validation-shared PUBLIC\n    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>\n    $<INSTALL_INTERFACE:${CMAKE_INSTALL_PREFIX}/include>\n)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Including BOOST_MPL_HAS_XXX_TEMPLATE_DEF Macro Header\nDESCRIPTION: Shows how to include the necessary header file to use the BOOST_MPL_HAS_XXX_TEMPLATE_DEF macro in your code.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/HAS_XXX_TEMPLATE_DEF.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/has_xxx.hpp>\n```\n\n----------------------------------------\n\nTITLE: Configuring Snappy Fuzzing Targets in CMake\nDESCRIPTION: Sets up fuzzing targets for Snappy compression and decompression when SNAPPY_FUZZING_BUILD is enabled. It configures the necessary compiler and linker flags for fuzzing.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/snappy/snappy-1.1.9/CMakeLists.txt#2025-04-22_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\nif(SNAPPY_FUZZING_BUILD)\n  add_executable(snappy_compress_fuzzer \"\")\n  target_sources(snappy_compress_fuzzer\n    PRIVATE \"snappy_compress_fuzzer.cc\"\n  )\n  target_link_libraries(snappy_compress_fuzzer snappy)\n  set_target_properties(snappy_compress_fuzzer\n    PROPERTIES LINK_FLAGS \"-fsanitize=fuzzer\"\n  )\n\n  add_executable(snappy_uncompress_fuzzer \"\")\n  target_sources(snappy_uncompress_fuzzer\n    PRIVATE \"snappy_uncompress_fuzzer.cc\"\n  )\n  target_link_libraries(snappy_uncompress_fuzzer snappy)\n  set_target_properties(snappy_uncompress_fuzzer\n    PROPERTIES LINK_FLAGS \"-fsanitize=fuzzer\"\n  )\nendif(SNAPPY_FUZZING_BUILD)\n```\n\n----------------------------------------\n\nTITLE: Declaring on_result_construction Hook for basic_result in C++\nDESCRIPTION: This static function is a constructor hook for basic_result<T, E, NoValuePolicy>. It is invoked by implicit constructors and is always available. The function is guaranteed to never throw an exception.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/policies/base/on_result_construction.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nstatic void on_result_construction(T *, U &&) noexcept\n```\n\n----------------------------------------\n\nTITLE: Using range_c in C++ with Boost MPL Assertions\nDESCRIPTION: Demonstrates the usage of range_c with different ranges and uses Boost MPL assertions to verify the properties of the created ranges, including size, emptiness, and element values.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/range_c.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntypedef range_c<int,0,0> range0;\ntypedef range_c<int,0,1> range1;\ntypedef range_c<int,0,10> range10;\n\nBOOST_MPL_ASSERT_RELATION( size<range0>::value, ==, 0 );\nBOOST_MPL_ASSERT_RELATION( size<range1>::value, ==, 1 );\nBOOST_MPL_ASSERT_RELATION( size<range10>::value, ==, 10 );\n\nBOOST_MPL_ASSERT(( empty<range0> ));\nBOOST_MPL_ASSERT_NOT(( empty<range1> ));\nBOOST_MPL_ASSERT_NOT(( empty<range10> ));\n\nBOOST_MPL_ASSERT(( is_same< begin<range0>::type, end<range0>::type > ));\nBOOST_MPL_ASSERT_NOT(( is_same< begin<range1>::type, end<range1>::type > ));\nBOOST_MPL_ASSERT_NOT(( is_same< begin<range10>::type, end<range10>::type > ));\n\nBOOST_MPL_ASSERT_RELATION( front<range1>::type::value, ==, 0 );\nBOOST_MPL_ASSERT_RELATION( back<range1>::type::value, ==, 0 );\nBOOST_MPL_ASSERT_RELATION( front<range10>::type::value, ==, 0 );\nBOOST_MPL_ASSERT_RELATION( back<range10>::type::value, ==, 9 );\n```\n\n----------------------------------------\n\nTITLE: Using Auto Pointer with Pointer Containers in C++\nDESCRIPTION: Demonstrates how to use std::auto_ptr with pointer containers. Shows basic insertion of raw pointers and illustrates how compatible smart pointers can be used with the same containers.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/tutorial.rst#2025-04-22_snippet_11\n\nLANGUAGE: cpp\nCODE:\n```\nstd::ptr_vector<Base> vec;\nvec.push_back( new Base );\n```\n\n----------------------------------------\n\nTITLE: Using count Algorithm in C++\nDESCRIPTION: Demonstrates how to use the count algorithm to count occurrences of a type in a sequence. It defines a vector of types and counts the occurrences of 'short'.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/count.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntypedef vector<int,char,long,short,char,short,double,long> types;\ntypedef count<types, short>::type n;\n\nBOOST_MPL_ASSERT_RELATION( n::value, ==, 2 );\n```\n\n----------------------------------------\n\nTITLE: Eager Dijkstra's Algorithm Implementation\nDESCRIPTION: This C++ template function implements the Eager Dijkstra's algorithm, enhancing the standard approach by allowing the algorithm to speculatively process vertices, which may accelerate the termination of the algorithm under specific conditions. It includes parameters for customizable processing behavior.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/dijkstra_shortest_paths.rst#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\nnamespace graph {\n    template<typename DistributedGraph, typename DijkstraVisitor,\n             typename PredecessorMap, typename DistanceMap, typename WeightMap,\n             typename IndexMap, typename ColorMap, typename Compare,\n             typename Combine, typename DistInf, typename DistZero>\n    void\n    eager_dijkstra_shortest_paths\n      (const DistributedGraph& g,\n```\n\n----------------------------------------\n\nTITLE: Defining Target Sources for arango_replication2_pure\nDESCRIPTION: This snippet defines the target sources for the 'arango_replication2_pure' component, listing private source files that encompass various log handling and management functionalities. The included files are critical for implementing the in-memory log system and replication log entries.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/Replication2/ReplicatedLog/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ntarget_sources(arango_replication2_pure PRIVATE\n  AgencyLogSpecification.cpp\n  Algorithms.cpp\n  ILogInterfaces.cpp\n  InMemoryLog.cpp\n  InMemoryLogEntry.cpp\n  IRebootIdCache.h\n  LogCommon.cpp\n  LogEntry.cpp\n  LogEntryView.cpp\n  LogLeader.cpp\n  LogMetaPayload.cpp\n  LogPayload.cpp\n  LogStatus.cpp\n  NetworkMessages.cpp\n  ReplicatedLog.cpp\n  ReplicatedLogMetrics.tpp\n  Supervision.cpp\n  SupervisionAction.cpp\n  TermIndexMapping.cpp\n  types.cpp\n  WaitForBag.cpp\n  Components/AppendEntriesManager.cpp Components/AppendEntriesManager.h\n  Components/CompactionManager.cpp Components/CompactionManager.h\n  Components/ExclusiveBool.h\n  Components/FollowerCommitManager.cpp Components/FollowerCommitManager.h\n  Components/IAppendEntriesManager.h\n  Components/ICompactionManager.h\n  Components/IFollowerCommitManager.h\n  Components/IInMemoryLogManager.h\n  Components/IMessageIdManager.h\n  Components/IMethodsProvider.h\n  Components/ISnapshotManager.h\n  Components/IStateHandleManager.h\n  Components/IStorageManager.h\n  Components/InMemoryLogManager.cpp Components/InMemoryLogManager.h\n  Components/LogFollower.cpp Components/LogFollower.h\n  Components/MessageIdManager.cpp Components/MessageIdManager.h\n  Components/MethodsProvider.cpp Components/MethodsProvider.h\n  Components/SnapshotManager.cpp Components/SnapshotManager.h\n  Components/StateHandleManager.cpp Components/StateHandleManager.h\n  Components/StorageManager.cpp Components/StorageManager.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Linking Boost Libraries\nDESCRIPTION: This snippet links various Boost libraries as dependencies to the Boost Range library, ensuring all necessary features are available.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/range/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(boost_range\n  INTERFACE\n    Boost::array\n    Boost::assert\n    Boost::concept_check\n    Boost::config\n    Boost::container_hash\n    Boost::conversion\n    Boost::core\n    Boost::detail\n    Boost::iterator\n    Boost::mpl\n    Boost::optional\n    Boost::preprocessor\n    Boost::regex\n    Boost::static_assert\n    Boost::tuple\n    Boost::type_traits\n    Boost::utility\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing lift_noexcept template for preserving noexcept specifications\nDESCRIPTION: A template class in the boost::hof::detail namespace that inherits from a function object and preserves its noexcept specification when forwarding calls. Used by the Clang-specific implementation of BOOST_HOF_LIFT.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/lift.hpp.txt#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\nnamespace boost { namespace hof { namespace detail {\n\ntemplate<class F, class NoExcept>\nstruct lift_noexcept : F\n{\n    BOOST_HOF_INHERIT_CONSTRUCTOR(lift_noexcept, F);\n\n    template<class... Ts>\n    constexpr auto operator()(Ts&&... xs) const\n    noexcept(decltype(std::declval<NoExcept>()(BOOST_HOF_FORWARD(Ts)(xs)...)){}))\n    -> decltype(std::declval<F>()(BOOST_HOF_FORWARD(Ts)(xs)...))\n    { return F(*this)(BOOST_HOF_FORWARD(Ts)(xs)...);}\n};\n\ntemplate<class F, class NoExcept>\nconstexpr lift_noexcept<F, NoExcept> make_lift_noexcept(F f, NoExcept)\n{\n    return {f};\n}\n\n}}}\n```\n\n----------------------------------------\n\nTITLE: Configuring ArangoDB Geo Library Build\nDESCRIPTION: CMake configuration that sets up the arango_geo static library. Includes core geographic processing source files, conditional enterprise compilation logic, external dependencies like Boost and S2, and adds subdirectories for Karney and S2 components.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/lib/Geo/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(arango_geo STATIC\n  GeoJson.cpp\n  GeoParams.cpp\n  ShapeContainer.cpp\n  Utils.cpp)\n\nif (NOT USE_ENTERPRISE)\n  target_sources(arango_geo PRIVATE Coding.cpp)\nendif ()\n\ntarget_link_libraries(arango_geo\n  arango_basic_utils\n  boost_system\n  boost_boost\n  s2)\n\nadd_subdirectory(karney)\nadd_subdirectory(S2)\n```\n\n----------------------------------------\n\nTITLE: Configuring Private Member Extraction in Doxygen\nDESCRIPTION: Setting to include private class members in the documentation. When disabled, private members are excluded. Default is NO.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/sort/doc/doxygen/sort_doxyfile.txt#2025-04-22_snippet_25\n\nLANGUAGE: text\nCODE:\n```\nEXTRACT_PRIVATE        = NO\n```\n\n----------------------------------------\n\nTITLE: Declaring Standard Exception Namespace and Class\nDESCRIPTION: Doxygen documentation declaring the std namespace and exception class used for error handling. Part of the core exception handling infrastructure.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/asio/doc/std_exception_dox.txt#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n/**\n\\namespace std\n*/\n\n/**\n\\class std::exception\n*/\n```\n\n----------------------------------------\n\nTITLE: HTTP Server and Parser Fixes\nDESCRIPTION: This entry documents several fixes including init call, example HTTP server improvements, MIME-type calculation, SSL teardown fixes, RFC7230 javadocs example code, extraneous header removal, and skip_body parser option, improving the library's HTTP server and parser functionalities.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/beast/CHANGELOG.md#2025-04-22_snippet_11\n\n\n\n----------------------------------------\n\nTITLE: Locating Boost Library and Configuring Project Settings\nDESCRIPTION: Finds the required Boost components and sets project-wide options like BUILD_SHARED_LIBS.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/serialization/CMake/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\noption(BUILD_SHARED_LIBS \"Build Shared Libraries\" true)\n\nfind_package(Boost 1.74 REQUIRED COMPONENTS system filesystem)\n\nif(NOT Boost_FOUND)\n  message(\"Boost NOT Found!\")\nelse()\n  message(STATUS \"Boost Found!\")\nendif()\nset(CMAKE_CXX_VISIBILITY_PRESET hidden)\nset(VISIBILITY_INLINES_HIDDEN YES)\n```\n\n----------------------------------------\n\nTITLE: Configuring File Page Generation in Doxygen\nDESCRIPTION: This option specifies whether the Files page is generated.  Setting it to NO disables the Files page.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/sort/doc/doxygen/sort_doxyfile.txt#2025-04-22_snippet_56\n\nLANGUAGE: Doxygen\nCODE:\n```\n\"SHOW_FILES             = YES\"\n```\n\n----------------------------------------\n\nTITLE: V8 Memory Protection Patch\nDESCRIPTION: Patch to disable memory protection functionality that may cause crashes on certain Linux kernels\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/v8-build/README.md#2025-04-22_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\ndiff --git a\\/src\\/base\\/build_config.h b\\/src\\/base\\/build_config.h\\nindex 673330236ce..30e752bc843 100644\\n--- a\\/src\\/base\\/build_config.h\\n+++ b\\/src\\/base\\/build_config.h\\n@@ -36,7 +36,7 @@\\n \\n #if defined(V8_OS_LINUX) && defined(V8_HOST_ARCH_X64)\\n-#define V8_HAS_PKU_JIT_WRITE_PROTECT 1\\n+#define V8_HAS_PKU_JIT_WRITE_PROTECT 0\\n #else\\n #define V8_HAS_PKU_JIT_WRITE_PROTECT 0\\n #endif\n```\n\n----------------------------------------\n\nTITLE: Declaring bitor_ Metafunction Template in C++\nDESCRIPTION: Defines the template structure for the bitor_ metafunction, which takes multiple integral constant types as arguments and returns a type representing their bitwise OR.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/bitor_.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      typename T1\n    , typename T2\n    , typename T3 = |unspecified|\n    |...|\n    , typename T\n* = |unspecified|\n    >\nstruct bitor_\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Displaying Elements of C++ Array and Python ndarray\nDESCRIPTION: Prints the contents of both the C++ array and the Python ndarray to verify they are synchronized. Uses standard output for display.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/doc/numpy/tutorial/fromdata.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nstd::cout << \"C++ array :\" << std::endl;\nfor (int j=0;j<4;j++)\n{\n  std::cout << arr[j] << ' ';\n}\nstd::cout << std::endl\n          << \"Python ndarray :\" << p::extract<char const *>(p::str(py_array)) << std::endl;\n```\n\n----------------------------------------\n\nTITLE: Adding Boost Endian Library\nDESCRIPTION: This snippet adds an interface library named `boost_endian` and creates an alias `Boost::endian` for it. Interface libraries are used to propagate usage requirements to dependent targets.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/endian/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n\"add_library(boost_endian INTERFACE)\nadd_library(Boost::endian ALIAS boost_endian)\"\n```\n\n----------------------------------------\n\nTITLE: Parsing LZ4 Version Information from Header File\nDESCRIPTION: Extracts version information from lz4.h header file using regex patterns to identify major, minor, and release version numbers. This information is then used for package versioning and library naming.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/lz4/build/cmake/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Parse version information\nfile(STRINGS \"${LZ4_TOP_SOURCE_DIR}/lib/lz4.h\" LZ4_VERSION_MAJOR REGEX \"^#define LZ4_VERSION_MAJOR +([0-9]+) +.*$\")\nstring(REGEX REPLACE \"^#define LZ4_VERSION_MAJOR +([0-9]+) +.*$\" \"\\\\1\" LZ4_VERSION_MAJOR \"${LZ4_VERSION_MAJOR}\")\nfile(STRINGS \"${LZ4_TOP_SOURCE_DIR}/lib/lz4.h\" LZ4_VERSION_MINOR REGEX \"^#define LZ4_VERSION_MINOR +([0-9]+) +.*$\")\nstring(REGEX REPLACE \"^#define LZ4_VERSION_MINOR +([0-9]+) +.*$\" \"\\\\1\" LZ4_VERSION_MINOR \"${LZ4_VERSION_MINOR}\")\nfile(STRINGS \"${LZ4_TOP_SOURCE_DIR}/lib/lz4.h\" LZ4_VERSION_RELEASE REGEX \"^#define LZ4_VERSION_RELEASE +([0-9]+) +.*$\")\nstring(REGEX REPLACE \"^#define LZ4_VERSION_RELEASE +([0-9]+) +.*$\" \"\\\\1\" LZ4_VERSION_RELEASE \"${LZ4_VERSION_RELEASE}\")\nset(LZ4_VERSION_STRING \"${LZ4_VERSION_MAJOR}.${LZ4_VERSION_MINOR}.${LZ4_VERSION_RELEASE}\")\nmark_as_advanced(LZ4_VERSION_STRING LZ4_VERSION_MAJOR LZ4_VERSION_MINOR LZ4_VERSION_RELEASE)\n```\n\n----------------------------------------\n\nTITLE: Link Libraries for arango_replication2\nDESCRIPTION: This command links the `arango_replication2` library with other necessary libraries.  These linked libraries provide functionalities such as basic utilities, networking, server functions, futures, actors, formatting, and immutable data structures.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/Replication2/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(arango_replication2\n        arango_basic_utils\n        arango_network # NetworkWorkAttachedFollower\n        arangoserver # RestHandler, arango_rocksdb\n        arango_futures\n        arango_actor\n        fmt\n        immer)\n```\n\n----------------------------------------\n\nTITLE: S2 Geometry Library Modifications\nDESCRIPTION: Patches for the S2 geometry library including CMake configuration changes and header modifications\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/README_maintainers.md#2025-04-22_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\ndiff --git a/3rdParty/s2geometry/master/CMakeLists.txt b/3rdParty/s2geometry/master/CMakeLists.txt\nindex 4044cd90a00..f22895951e7 100644\n--- a/3rdParty/s2geometry/master/CMakeLists.txt\n+++ b/3rdParty/s2geometry/master/CMakeLists.txt\n@@ -260,13 +260,14 @@ endif()\n # list(APPEND CMAKE_MODULE_PATH \"<path_to_s2geometry_dir>/third_party/cmake\")\n # add_subdirectory(<path_to_s2geometry_dir> s2geometry)\n # target_link_libraries(<target_name> s2)\n-target_include_directories(s2 PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/src)\n+target_include_directories(s2 SYSTEM PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/src)\n \n # Add version information to the target\n set_target_properties(s2 PROPERTIES\n     SOVERSION ${PROJECT_VERSION_MAJOR}\n     VERSION ${PROJECT_VERSION})\n```\n\n----------------------------------------\n\nTITLE: Initial CMake Setup and Version Configuration\nDESCRIPTION: Sets up the CMake project with minimum version requirement and defines the Boost.Log project with version information.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/log/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5)\nproject(BoostLog VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Configuring Replication2 Test Sources\nDESCRIPTION: Defines main test source files for the Replication2 test suite, including integration and unit tests.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/Replication2/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(ARANGODB_REPLICATION2_TEST_SOURCES\n  ReplicatedLog/Integration/MaintenanceTests.cpp\n  ReplicatedLog/Integration/StorageEngineMethodsTest.cpp\n  ReplicatedState/StateManagerTest.cpp\n  ReplicatedState/StateHandleManagerTest.cpp\n  ReplicatedState/StateMachines/DocumentState/CoreTest.cpp\n  ReplicatedState/StateMachines/DocumentState/ErrorHandlerTest.cpp\n  ReplicatedState/StateMachines/DocumentState/FollowerTest.cpp\n  ReplicatedState/StateMachines/DocumentState/LeaderTest.cpp\n  ReplicatedState/StateMachines/DocumentState/ShardHandlerTest.cpp\n  ReplicatedState/StateMachines/DocumentState/SnapshotTest.cpp\n  ReplicatedState/StateMachines/DocumentState/TransactionHandlerTest.cpp\n  CollectionGroups/CollectionGroupsSupervision.cpp)\n```\n\n----------------------------------------\n\nTITLE: Merging Sorted Pointer Containers in C++\nDESCRIPTION: Demonstrates how to merge two sorted pointer containers. The example shows sorting a container and then merging it into another container, which transfers ownership of all elements.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/tutorial.rst#2025-04-22_snippet_17\n\nLANGUAGE: cpp\nCODE:\n```\nboost::ptr_vector<animal> another_zoo = ...;\nanother_zoo.sort();                      // sorted wrt. to same order as 'zoo'\nzoo.merge( another_zoo );\nBOOST_ASSERT( another_zoo.empty() );\n```\n\n----------------------------------------\n\nTITLE: Implementing Post-Decrement Operator for Bidirectional Traversal Iterator in C++\nDESCRIPTION: Code snippet showing the implementation of the post-decrement operator (--r) for a Bidirectional Traversal Iterator, which returns a copy of the iterator before decrementing.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/new-iter-concepts.rst#2025-04-22_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\n{\n  X tmp = r;\n  --r;\n  return tmp;\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing Ghost Cells from Distributed Property Map in C++\nDESCRIPTION: Method to remove all ghost cells from the distributed property map.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/distributed_property_map.rst#2025-04-22_snippet_8\n\nLANGUAGE: cpp\nCODE:\n```\nvoid clear();\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding Tests for Boost Thread\nDESCRIPTION: Adds the test subdirectory if testing is enabled and the test directory exists. This allows for conditional compilation of test cases.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/thread/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(BUILD_TESTING AND EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/test/CMakeLists.txt\")\n\n  add_subdirectory(test)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Generating Benchmark Data with File Generator\nDESCRIPTION: This command generates a binary file with random information for use in benchmarking. It creates an input file of approximately 1.25 GB.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/sort/benchmark/parallel/README.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./file_generator input.bin 1250000000\n```\n\n----------------------------------------\n\nTITLE: Traversal Category Implementation - C++\nDESCRIPTION: Logic for determining iterator traversal category based on iterator traits category conversion\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/issues.rst#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\ntraversal-category(Iterator) =\n    let cat = iterator_traits<Iterator>::iterator_category\n    if (cat is convertible to incrementable_iterator_tag)\n      return cat; // Iterator is a new iterator\n    else if (cat is convertible to random_access_iterator_tag)\n        return random_access_traversal_tag;\n    else if (cat is convertible to bidirectional_iterator_tag)\n        return bidirectional_traversal_tag;\n    else if (cat is convertible to forward_iterator_tag)\n        return forward_traversal_tag;\n    else if (cat is convertible to input_iterator_tag)\n        return single_pass_iterator_tag;\n    else if (cat is convertible to output_iterator_tag)\n        return incrementable_iterator_tag;\n    else\n        return null_category_tag;\n```\n\n----------------------------------------\n\nTITLE: Target Compile Definitions\nDESCRIPTION: This command defines preprocessor definitions for the `gil_compile_options` interface library. It sets different definitions based on the compiler, such as suppressing deprecation warnings and disabling certain features in MSVC.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/CMakeLists.txt#2025-04-22_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\n\"target_compile_definitions(gil_compile_options\n  INTERFACE\n    $<$<CXX_COMPILER_ID:MSVC>:_CRT_NONSTDC_NO_DEPRECATE>\n    $<$<CXX_COMPILER_ID:MSVC>:_SCL_SECURE_NO_DEPRECATE>\n    $<$<CXX_COMPILER_ID:MSVC>:_CRT_SECURE_NO_WARNINGS>\n    $<$<CXX_COMPILER_ID:MSVC>:NOMINMAX>\n    $<$<CXX_COMPILER_ID:MSVC>:BOOST_CONFIG_SUPPRESS_OUTDATED_MESSAGE>)\"\n```\n\n----------------------------------------\n\nTITLE: Creating Stemmer Template\nDESCRIPTION: Instructions to create a new stemmer template file in the website repo that describes the algorithm and links to related resources, emphasizing proper citation of academic papers.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/snowball/CONTRIBUTING.rst#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nCreate stemmer.tt which describes the stemming algorithm. If it is based on an academic paper, cite the paper.\n```\n\n----------------------------------------\n\nTITLE: Calculating Unbiased Estimator for Space Consumption in LaTeX\nDESCRIPTION: This LaTeX snippet shows the formula for calculating an unbiased estimator of space consumption from sampling strategies. It sums the product of allocation size, sampling indicator, and inverse of expected sampling probability.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/jemalloc/jemalloc/doc_internal/PROFILING_INTERNALS.md#2025-04-22_snippet_0\n\nLANGUAGE: latex\nCODE:\n```\n$$ \\sum_i S_i I_i \\frac{1}{\\mathrm{E}[I_i]} $$\n```\n\n----------------------------------------\n\nTITLE: Creating Capture Pack Factory Function in C++\nDESCRIPTION: Defines a factory function structure that creates capture_pack instances. This is used to simplify the creation of capture packs with appropriate forwarding semantics.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/capture.hpp.txt#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nstruct make_capture_pack_f\n{\n    template<class Pack>\n    constexpr capture_pack<Pack> operator()(Pack p) const\n    BOOST_HOF_NOEXCEPT_CONSTRUCTIBLE(capture_pack<Pack>, Pack&&)\n    {\n        return capture_pack<Pack>(static_cast<Pack&&>(p));\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Constructing basic_result from ErrorCondEnum\nDESCRIPTION: Implicit constructor that creates a basic_result from an ErrorCondEnum. It requires predicate::enable_error_condition_converting_constructor<ErrorCondEnum> to be true. The constructor propagates constexpr, triviality and noexcept properties from underlying operations.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/basic_result/implicit_error_condition_converting_constructor.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nbasic_result(ErrorCondEnum &&)\n```\n\n----------------------------------------\n\nTITLE: Optimized Implementation of X Gradient Function\nDESCRIPTION: This snippet optimizes the previous x gradient computation by using iterators for faster pixel access, thus improving performance by reducing pixel position calculations.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/tutorial/gradient.rst.txt#2025-04-22_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nvoid x_gradient(gray8c_view_t const& src, gray8s_view_t const& dst)\n{\n    for (int y = 0; y < src.height(); ++y)\n    {\n        gray8c_view_t::x_iterator src_it = src.row_begin(y);\n        gray8s_view_t::x_iterator dst_it = dst.row_begin(y);\n\n        for (int x=1; x < src.width() - 1; ++x)\n            dst_it[x] = (src_it[x-1] - src_it[x+1]) / 2;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Typedef Struct Hiding in Doxygen\nDESCRIPTION: Setting to display typedefs of structs/unions/enums as the struct/union/enum with the typedef name. Useful for C code where all compound types are typedef'ed. Default is NO.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/sort/doc/doxygen/sort_doxyfile.txt#2025-04-22_snippet_22\n\nLANGUAGE: text\nCODE:\n```\nTYPEDEF_HIDES_STRUCT   = NO\n```\n\n----------------------------------------\n\nTITLE: Link Libraries for arango_replication2_pure\nDESCRIPTION: This command links the `arango_replication2_pure` library with its dependencies, which includes lightweight components, velocypack serialization, immutable data structures, formatting utilities, metrics base, and futures.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/Replication2/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(arango_replication2_pure PUBLIC arango_lightweight\n        velocypack immer fmt arango_metrics_base arango_futures)\n```\n\n----------------------------------------\n\nTITLE: Including the prior Iterator Metafunction Header in C++\nDESCRIPTION: Specifies the header file to include for using the prior metafunction in C++ code.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/prior.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/next_prior.hpp>\n```\n\n----------------------------------------\n\nTITLE: Using erase Metafunction with Single Element in C++\nDESCRIPTION: Shows how to use the erase metafunction to remove a single element from a sequence at a specific position.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/erase.rst#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\ntypedef erase<s,pos>::type r;\n```\n\n----------------------------------------\n\nTITLE: Including max Metafunction Header in C++\nDESCRIPTION: Shows the header file that needs to be included to use the max metafunction in C++ code.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/max.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/min_max.h>\n```\n\n----------------------------------------\n\nTITLE: Using boost::locale::format for localized text formatting\nDESCRIPTION: This example demonstrates how to use boost::locale::format to create a localized formatted string with date and name placeholders.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/doc/localized_text_formatting.txt#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nwcout << wformat(L\"Today {1,date} I would meet {2} at home\") % time(0) % name <<endl;\n```\n\n----------------------------------------\n\nTITLE: Size Metafunction Declaration in C++\nDESCRIPTION: Template metafunction declaration that computes the size of a sequence. Returns an unspecified type that represents the number of elements.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/size.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      typename Sequence\n    >\nstruct size\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Include ICU Directory\nDESCRIPTION: This snippet adds the ICU include directory to the list of include directories, ensuring the compiler can find the ICU header files. The `BEFORE SYSTEM` argument ensures that the ICU directory is searched before system directories. `ICU64_INCLUDE_DIR` is a variable containing the path to the ICU include directory.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ninclude_directories(BEFORE SYSTEM ${ICU64_INCLUDE_DIR})\n```\n\n----------------------------------------\n\nTITLE: Implementing Reference Wrapper Unwrapping in C++\nDESCRIPTION: Template metaprogramming implementation for unwrapping reference wrappers and handling type decay. This is used as a utility for polymorphic constructor implementation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/src/example_polymorphic_constructors.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <class T>\nstruct unwrap_refwrapper\n{\n    typedef T type;\n};\n \ntemplate <class T>\nstruct unwrap_refwrapper<std::reference_wrapper<T>>\n{\n    typedef T& type;\n};\n \ntemplate <class T>\nstruct unwrap_ref_decay\n: unwrap_refwrapper<typename std::decay<T>::type>\n{};\n```\n\n----------------------------------------\n\nTITLE: Handling Null Values in Boost Pointer Containers\nDESCRIPTION: This snippet illustrates how to declare pointer containers that can accept null values explicitly and access elements safely by checking for null before usage.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/tutorial.rst#2025-04-22_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\nboost::ptr_vector< boost::nullable<animal> > animals_type;\nanimals_type animals;\n...\nanimals.insert( animals.end(), new dodo(\"fido\") );\nanimals.insert( animals.begin(), 0 ); // ok\n\nfor( animals_type::iterator i = animals.begin(); i != animals.end(); ++i )\n{\n    if( !boost::is_null(i) ) // always check for validity\n        i->eat();\n}\n```\n\n----------------------------------------\n\nTITLE: Placeholder Declarations\nDESCRIPTION: Declaration of standard placeholder variables _1 through _9 in the placeholders namespace\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/placeholders.hpp.txt#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nnamespace placeholders {\nBOOST_HOF_DECLARE_STATIC_VAR(_1, placeholder<1>);\nBOOST_HOF_DECLARE_STATIC_VAR(_2, placeholder<2>);\nBOOST_HOF_DECLARE_STATIC_VAR(_3, placeholder<3>);\nBOOST_HOF_DECLARE_STATIC_VAR(_4, placeholder<4>);\nBOOST_HOF_DECLARE_STATIC_VAR(_5, placeholder<5>);\nBOOST_HOF_DECLARE_STATIC_VAR(_6, placeholder<6>);\nBOOST_HOF_DECLARE_STATIC_VAR(_7, placeholder<7>);\nBOOST_HOF_DECLARE_STATIC_VAR(_8, placeholder<8>);\nBOOST_HOF_DECLARE_STATIC_VAR(_9, placeholder<9>);\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring error_code Function in C++\nDESCRIPTION: Declaration of a function that extracts error codes from input. It uses decltype(auto) return type and takes a forwarding reference parameter. The function is overridable via ADL and is always available.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/functions/policy/error_code.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ndecltype(auto) error_code(T &&)\n```\n\n----------------------------------------\n\nTITLE: C++ Legacy Compatibility Macro\nDESCRIPTION: Backwards compatibility version of the BOOST_OUTCOME_CO_TRY macro for pre-v2.2 behavior where var was always declared as an automatic rvalue reference.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/macros/co_try.md#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nOUTCOME21_CO_TRY()\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost.Locale POSIX Backend\nDESCRIPTION: Sets up the POSIX backend for Boost.Locale if enabled, including additional source files.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/CMakeLists.txt#2025-04-22_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nif(BOOST_LOCALE_ENABLE_POSIX)\n\n  target_sources(boost_locale PRIVATE\n    src/posix/collate.cpp\n    src/posix/converter.cpp\n    src/posix/numeric.cpp\n    src/posix/codecvt.cpp\n    src/posix/posix_backend.cpp\n  )\n\nelse()\n\n  target_compile_definitions(boost_locale PRIVATE BOOST_LOCALE_NO_POSIX_BACKEND=1)\n\nendif()\n\nif(BOOST_LOCALE_ENABLE_WINAPI OR BOOST_LOCALE_ENABLE_STD OR BOOST_LOCALE_ENABLE_POSIX)\n\n  target_sources(boost_locale PRIVATE\n    src/util/gregorian.cpp\n  )\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Compiler Warnings Configuration Function\nDESCRIPTION: Function to configure compiler warning flags, including handling of warnings as errors and specific warning suppressions for different compilers.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/CMakeLists.txt#2025-04-22_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(add_compile_warnings_flags)\n  if(USE_FAIL_ON_WARNINGS)\n    add_compile_options(-Werror -Wno-error=deprecated-declarations)\n    if(CMAKE_CXX_COMPILER_ID STREQUAL \"GNU\")\n      add_compile_options(-Wno-error=maybe-uninitialized)\n      add_compile_options(-Wno-missing-field-initializers)\n    endif()\n  endif()\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Variant Implementations with clang++ 5.0.1 (Unoptimized)\nDESCRIPTION: Compile time and run time benchmarks for variant2, boost::variant, and std::variant using clang++ 5.0.1 with -O0 optimization level. Shows compilation times and execution times for 100 million iterations.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/variant2/benchmark/benchmark2.md#2025-04-22_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n      variant2 (-DONLY_V2): 1578 ms\nboost::variant (-DONLY_BV): 2623 ms\n  std::variant (-DONLY_SV): 1508 ms\n```\n\nLANGUAGE: text\nCODE:\n```\nN=100000000:\n        prefix:   4447 ms; S=416666583333336\n      variant2:  16016 ms; S=416666583333336\nboost::variant:  42365 ms; S=416666583333336\n  std::variant:  17817 ms; S=416666583333336\n```\n\n----------------------------------------\n\nTITLE: Including Remove Algorithm Header in C++\nDESCRIPTION: This code snippet shows how to include the header file for the 'remove' algorithm in Boost MPL.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/remove.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/remove.hpp>\n```\n\n----------------------------------------\n\nTITLE: BOOST_MPL_HAS_XXX_TEMPLATE_DEF Macro Definition Syntax\nDESCRIPTION: Demonstrates the basic syntax for using the BOOST_MPL_HAS_XXX_TEMPLATE_DEF macro, which expands into a metafunction definition that detects nested template members.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/HAS_XXX_TEMPLATE_DEF.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n#define BOOST_MPL_HAS_XXX_TEMPLATE_DEF(name) \\\n    |unspecified-token-seq| \\\n/**/\n```\n\n----------------------------------------\n\nTITLE: Defining ZLIB_WINAPI Macro\nDESCRIPTION: Important note for using zlibwapi.dll in your application. The ZLIB_WINAPI macro must be defined during compilation of your source files.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/zlib/zlib-1.2.13/contrib/vstudio/readme.txt#2025-04-22_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n- To use zlibwapi.dll in your application, you must define the\n  macro ZLIB_WINAPI when compiling your application's source files.\n```\n\n----------------------------------------\n\nTITLE: Defining Failure Mapping and Revealing Adaptor in C++\nDESCRIPTION: Implements structures for mapping failures and creating a revealing adaptor. The reveal_adaptor is designed to expose underlying failure handling mechanisms.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/reveal.hpp.txt#2025-04-22_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<class Transform, class... Fs>\nstruct failure_map\n: with_failures<detail::transform_failures<get_failure<Fs>, Transform>...>\n{};\n\ntemplate<class... Fs>\nstruct failure_for\n: with_failures<get_failure<Fs>...>\n{};\n\ntemplate<class F, class Base=detail::callable_base<F>>\nstruct reveal_adaptor\n: detail::traverse_failure<Base>, Base\n{\n    typedef reveal_adaptor fit_rewritable1_tag;\n    using detail::traverse_failure<Base>::operator();\n    using Base::operator();\n\n    BOOST_HOF_INHERIT_CONSTRUCTOR(reveal_adaptor, Base);\n};\n// Avoid double reveals, it causes problem on gcc 4.6\ntemplate<class F>\nstruct reveal_adaptor<reveal_adaptor<F>>\n: reveal_adaptor<F>\n{\n    typedef reveal_adaptor fit_rewritable1_tag;\n    BOOST_HOF_INHERIT_CONSTRUCTOR(reveal_adaptor, reveal_adaptor<F>);\n};\n\nBOOST_HOF_DECLARE_STATIC_VAR(reveal, detail::make<reveal_adaptor>);\n```\n\n----------------------------------------\n\nTITLE: Linking Boost Libraries to Boost DLL\nDESCRIPTION: This snippet specifies the libraries that Boost DLL depends on. It links several Boost components to ensure that features from those libraries are available when building targets that depend on Boost DLL.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/dll/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(boost_dll\n  INTERFACE\n    Boost::assert\n    Boost::config\n    Boost::core\n    Boost::filesystem\n    Boost::function\n    Boost::move\n    Boost::predef\n    Boost::smart_ptr\n    Boost::spirit\n    Boost::static_assert\n    Boost::system\n    Boost::throw_exception\n    Boost::type_index\n    Boost::type_traits\n    Boost::winapi\n)\n```\n\n----------------------------------------\n\nTITLE: Begin Iterator for Reversible Pointer Container in C++\nDESCRIPTION: This function returns an iterator pointing to the first element of the container, supporting both mutable and immutable access. It ensures that no exceptions are thrown during the operation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/reversible_ptr_container.rst#2025-04-22_snippet_6\n\nLANGUAGE: C++\nCODE:\n```\niterator begin();\n```\n\nLANGUAGE: C++\nCODE:\n```\nconst_iterator begin() const;\n```\n\n----------------------------------------\n\nTITLE: Enabling Examples\nDESCRIPTION: Conditionally adds the `src/example/json` subdirectory if the `TAOCPP_JSON_BUILD_EXAMPLES` option is enabled. This allows building example programs.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/taocpp-json/CMakeLists.txt#2025-04-22_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\noption (TAOCPP_JSON_BUILD_EXAMPLES \"Build example programs\" ON)\nif (TAOCPP_JSON_BUILD_EXAMPLES)\n  add_subdirectory (src/example/json)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Defining BOOST_HOF_LIFT_IS_NOEXCEPT macro for C++\nDESCRIPTION: A macro that creates a std::integral_constant to determine if an expression is noexcept. This is used as part of the lift functionality to preserve noexcept specifications.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/lift.hpp.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n#define BOOST_HOF_LIFT_IS_NOEXCEPT(...) std::integral_constant<bool, noexcept(decltype(__VA_ARGS__)(__VA_ARGS__))>{}\n```\n\n----------------------------------------\n\nTITLE: Setting Public Include Directories for ArangoDB Index Library\nDESCRIPTION: This CMake command sets the public include directories for the `arango_indexes` library. The `IRESEARCH_INCLUDE` variable specifies the directory containing the headers for the IResearch library, making them accessible to other projects that depend on `arango_indexes`.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/Indexes/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(arango_indexes\n    PUBLIC ${IRESEARCH_INCLUDE}\n)\n```\n\n----------------------------------------\n\nTITLE: Assembly Output for LEAF Function with Error Handling\nDESCRIPTION: Shows the assembly code generated by clang for the LEAF function with error handling. This demonstrates how LEAF handles more complex error scenarios at the assembly level.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/leaf/benchmark/benchmark.md#2025-04-22_snippet_6\n\nLANGUAGE: x86 Assembly\nCODE:\n```\ng():                                  # @g()\n        push    rbx\n        mov     rbx, rdi\n        call    rand\n        test    al, 1\n        jne     .LBB1_2\n        mov     eax, 4\n        lock            xadd    dword ptr [rip + boost::leaf::leaf_detail::id_factory<void>::counter], eax\n        add     eax, 4\n        mov     dword ptr fs:[boost::leaf::leaf_detail::id_factory<void>::current_id@TPOFF], eax\n        and     eax, -4\n        or      eax, 1\n        mov     dword ptr [rbx + 16], eax\n        mov     rax, rbx\n        pop     rbx\n        ret\n.LBB1_2:\n        mov     dword ptr [rbx], 43\n        mov     eax, 3\n        mov     dword ptr [rbx + 16], eax\n        mov     rax, rbx\n        pop     rbx\n        ret\n```\n\n----------------------------------------\n\nTITLE: Implementing the Secondary is_unpackable_impl Specialization in C++\nDESCRIPTION: Secondary template specialization of is_unpackable_impl for types that have the not_unpackable member defined in their unpack_sequence specialization.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/is_unpackable.hpp.txt#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<class Sequence>\nstruct is_unpackable_impl<Sequence, typename detail::holder<\n    typename unpack_sequence<Sequence>::not_unpackable\n>::type>\n: std::false_type\n{};\n```\n\n----------------------------------------\n\nTITLE: Defining front_inserter Template in C++\nDESCRIPTION: Template definition for front_inserter, which is used to insert elements at the beginning of a sequence. It takes a Seq parameter representing the sequence to bind the inserter to.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/front_inserter.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      typename Seq\n    >\nstruct front_inserter\n{\n    // |unspecified|\n    // |...|\n};\n```\n\n----------------------------------------\n\nTITLE: Defining decorator_invoke template class in C++\nDESCRIPTION: Implementation of the decorator_invoke template class which handles the invocation of decorated functions. It manages the storage and access of the decorator, the data passed to the decorator, and the function being decorated.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/decorate.hpp.txt#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<class D, class T, class F>\nstruct decorator_invoke\n// : compressed_pair<compressed_pair<F, T>, D>\n: compressed_pair<compressed_pair<D, T>, F>\n{\n    // typedef compressed_pair<F, T> base;\n    typedef compressed_pair<compressed_pair<D, T>, F> base;\n\n    BOOST_HOF_INHERIT_CONSTRUCTOR(decorator_invoke, base)\n\n    template<class... Ts>\n    constexpr const compressed_pair<D, T>& get_pair(Ts&&... xs) const noexcept\n    {\n        return this->first(xs...);\n    }\n\n    template<class... Ts>\n    constexpr const F& base_function(Ts&&... xs) const noexcept\n    {\n        return this->second(xs...);\n    }\n\n    template<class... Ts>\n    constexpr const D& get_decorator(Ts&&... xs) const noexcept\n    {\n        return this->get_pair(xs...).first(xs...);\n    }\n\n    template<class... Ts>\n    constexpr const T& get_data(Ts&&... xs) const noexcept\n    {\n        return this->get_pair(xs...).second(xs...);\n    }\n\n    BOOST_HOF_RETURNS_CLASS(decorator_invoke);\n\n    struct decorator_invoke_failure\n    {\n        template<class Failure>\n        struct apply\n        {\n            template<class... Ts>\n            struct of\n            : Failure::template of<const T&, const F&, Ts...>\n            {};\n        };\n    };\n\n    struct failure\n    : failure_map<decorator_invoke_failure, D>\n    {};\n\n    template<class... Ts>\n    constexpr BOOST_HOF_SFINAE_RESULT(const D&, id_<const T&>, id_<const F&>, id_<Ts>...) \n    operator()(Ts&&... xs) const BOOST_HOF_SFINAE_RETURNS\n    (\n        BOOST_HOF_MANGLE_CAST(const D&)(BOOST_HOF_CONST_THIS->get_decorator(xs...))(BOOST_HOF_MANGLE_CAST(const T&)(BOOST_HOF_CONST_THIS->get_data(xs...)),\n            BOOST_HOF_MANGLE_CAST(const F&)(BOOST_HOF_CONST_THIS->base_function(xs...)),\n            BOOST_HOF_FORWARD(Ts)(xs)...\n        )\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Template Assignment Operator for Derived Types in C++\nDESCRIPTION: This template assignment operator allows assignment from derived reversible pointer containers, ensuring that the derived type adheres to the base type's constraints and providing strong exception safety guarantees.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/reversible_ptr_container.rst#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<class Derived> reversible_ptr_container& operator=( const reversible_ptr_container<Derived>& r );\n```\n\n----------------------------------------\n\nTITLE: Declaring is_move_bitcopying Trait in C++\nDESCRIPTION: Declaration of the `is_move_bitcopying<T>` trait in the Boost Outcome library. This trait is used to identify types that are safe for move bitcopying, based on specific criteria including constexpr default constructor, memcpy-equivalent move constructor, and no-side-effect destruction of default-constructed instances.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/traits/is_move_bitcopying.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nnamespace BOOST_OUTCOME_V2_NAMESPACE {\n  namespace trait {\n    template<typename T>\n    struct is_move_bitcopying;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Term Index Executable with S2 Dependencies in CMake\nDESCRIPTION: Creates an executable named 'term_index' from the source file 'term_index.cc' and links it with the S2testing and S2 libraries.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/s2geometry/master/doc/examples/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(term_index term_index.cc)\ntarget_link_libraries(term_index LINK_PUBLIC s2testing s2)\n```\n\n----------------------------------------\n\nTITLE: Custom Converter Implementation Example\nDESCRIPTION: Sets up an example implementation for a user-defined convert::value_or_error<T, U> converter, providing insights on how to manage exception states when converting between Outcome and std types.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/tutorial/advanced/interop/value-or-error.md#2025-04-22_snippet_3\n\nLANGUAGE: c++\nCODE:\n```\nExamples of how to implement your own convert::value_or_error<T, U> converter\nis demonstrated in the worked example, next.\n```\n\n----------------------------------------\n\nTITLE: Setting Depot Tools Path\nDESCRIPTION: Configuring environment path to include depot_tools for V8 source management\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/v8-build/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport PATH=\\/path\\/to\\/depot_tools:$PATH\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Compiler Flags - CMake\nDESCRIPTION: This snippet configures compiler flags for the Boost Callable Traits project. It utilizes functions to check compiler support for various flags and applies them as compile options. Necessary dependencies include CMake support for CheckCXXCompilerFlag macro. This configuration is essential for managing warnings and standards compliance across different compiler environments.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/callable_traits/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(CheckCXXCompilerFlag)\nmacro(boost_callable_traits_append_flag testname flag)\n    check_cxx_compiler_flag(${flag} ${testname})\n    if (${testname})\n        add_compile_options(${flag})\n    endif()\nendmacro()\n\nif(NOT MSVC OR ${CMAKE_CXX_COMPILER_ID} STREQUAL \"Clang\")\n\n    # enable all warnings and treat them all as errors\n    boost_callable_traits_append_flag(boost_callable_traits_HAS_WERROR -Werror)\n    boost_callable_traits_append_flag(boost_callable_traits_HAS_WX -WX)\n    boost_callable_traits_append_flag(boost_callable_traits_HAS_W                          -W)\n    boost_callable_traits_append_flag(boost_callable_traits_HAS_WALL                       -Wall)\n    boost_callable_traits_append_flag(boost_callable_traits_HAS_WEXTRA                     -Wextra)\nendif()\n\nif(MSVC)\n\n    # MSVC/Clang-cl builds need -Qunused-arguments\n    boost_callable_traits_append_flag(boost_callable_traits_HAS_QUNUSED_ARGUMENTS          -Qunused-arguments)\nelse()\n\n    # for better template error debugging\n    boost_callable_traits_append_flag(boost_callable_traits_HAS_FTEMPLATE_BACKTRACE_LIMIT  -ftemplate-backtrace-limit=0)\n    \n    # enforce strict standards compliance\n    boost_callable_traits_append_flag(boost_callable_traits_HAS_PEDANTIC                   -pedantic)\n    \n    # use the most recent C++ standard available\n    boost_callable_traits_append_flag(boost_callable_traits_HAS_STDCXX0x                   -std=c++0x)\n    boost_callable_traits_append_flag(boost_callable_traits_HAS_STDCXX1y                   -std=c++1y)\n    boost_callable_traits_append_flag(boost_callable_traits_HAS_STDCXX1z                   -std=c++1z)\n    boost_callable_traits_append_flag(boost_callable_traits_HAS_STDCXX17                   -std=c++17)\n    boost_callable_traits_append_flag(boost_callable_traits_HAS_STDCXX2a                   -std=c++2a)\n    boost_callable_traits_append_flag(boost_callable_traits_HAS_STDCXX20                   -std=c++20)\n    boost_callable_traits_append_flag(boost_callable_traits_HAS_STDCXX2b                   -std=c++2b)\nendif()\n\n# transactional memory - currently only available in GCC 6 and later\nif(NOT ${CMAKE_CXX_COMPILER_ID} STREQUAL \"Clang\")\n    boost_callable_traits_append_flag(boost_callable_traits_HAS_FGNU_TM                    -fgnu-tm)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Outcome Move Construction Hook in C++\nDESCRIPTION: This static method is a hook for the basic_outcome class, invoked by converting move constructors. It's always available and guaranteed not to throw exceptions. The method takes two parameters: a pointer to type T and an rvalue reference to type U.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/policies/base/on_outcome_move_construction.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nstatic void on_outcome_move_construction(T *, U &&) noexcept\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Print Function with Lambda in C++\nDESCRIPTION: Defines a basic print function using BOOST_HOF_STATIC_LAMBDA_FUNCTION that prints to std::cout.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/src/example_print.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_HOF_STATIC_LAMBDA_FUNCTION(print) = [](const auto& x)\n{\n    std::cout << x << std::endl;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining graph_exception and Derived Exception Classes\nDESCRIPTION: This snippet defines a base exception class graph_exception and specific exceptions for handling graph-related errors in Boost. This includes bad_parallel_edge, directed_graph_error, undirected_graph_error, and bad_graphviz_syntax, enabling tailored error handling when interpreting graphs.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph/doc/read_graphviz.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nstruct graph_exception : public std::exception {\n    virtual ~graph_exception() throw();\n    virtual const char* what() const throw() = 0;\n};\n\nstruct bad_parallel_edge : public graph_exception {\n    std::string from;\n    std::string to;\n\n    bad_parallel_edge(const std::string&, const std::string&);\n    virtual ~bad_parallel_edge() throw();\n    const char* what() const throw();\n};\n\nstruct directed_graph_error : public graph_exception {\n    virtual ~directed_graph_error() throw();\n    virtual const char* what() const throw();\n};\n\nstruct undirected_graph_error : public graph_exception {\n    virtual ~undirected_graph_error() throw();\n    virtual const char* what() const throw();\n};\n\nstruct bad_graphviz_syntax: public graph_exception {\n    std::string errmsg;\n\n    bad_graphviz_syntax(const std::string&);\n    virtual ~bad_graphviz_syntax() throw();\n    virtual const char* what() const throw();\n};\n```\n\n----------------------------------------\n\nTITLE: Nth Channel X-Gradient Computation\nDESCRIPTION: A template function demonstrating GIL's ability to extract and process specific color channels using view transformation techniques.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/tutorial/gradient.rst.txt#2025-04-22_snippet_10\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <typename SrcView, typename DstView>\nvoid nth_channel_x_gradient(const SrcView& src, int n, const DstView& dst)\n{\n  x_gradient(nth_channel_view(src, n), dst);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Expression Requirements for Extensible Sequence in C++\nDESCRIPTION: This code snippet defines the valid expressions and their types for an Extensible Sequence 's', including operations like insert, insert_range, erase, and clear. It specifies the expected return types and complexity for each operation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/ExtensibleSequence.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ninsert<s,pos,x>::type         // Type: Extensible Sequence, Complexity: Unspecified\ninsert_range<s,pos,r>::type   // Type: Extensible Sequence, Complexity: Unspecified\nerase<s,pos>::type            // Type: Extensible Sequence, Complexity: Unspecified\nerase<s,pos,last>::type       // Type: Extensible Sequence, Complexity: Unspecified\nclear<s>::type                // Type: Extensible Sequence, Complexity: Constant time\n```\n\n----------------------------------------\n\nTITLE: Configuring CPack for Linenoise Package Generation\nDESCRIPTION: Sets up CPack configuration for generating distribution packages, including package metadata and file selections.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/linenoise-ng/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(CPack)\n\nif (MSVC)\nelse ()\n  set(CPACK_SET_DESTDIR ON)\nendif ()\n\nset(CPACK_PACKAGE_VENDOR  \"ArangoDB GmbH\")\nset(CPACK_PACKAGE_CONTACT \"info@arangodb.com\")\nset(CPACK_PACKAGE_VERSION \"${LINENOISE_VERSION}\")\n\nset(CPACK_RESOURCE_FILE_LICENSE \"${PROJECT_SOURCE_DIR}/LICENSE\")\n\nset(CPACK_STRIP_FILES \"ON\")\n\nset(CPACK_PACKAGE_NAME \"linenoise\")\nset(CPACK_DEBIAN_PACKAGE_SECTION \"utilities\")\n```\n\n----------------------------------------\n\nTITLE: Using the prior Iterator Metafunction in C++\nDESCRIPTION: Example usage of the prior metafunction with a vector of integers. It demonstrates how to use prior with begin and end iterators of a vector.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/prior.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntypedef vector_c<int,1> v;\ntypedef begin<v>::type first;\ntypedef end<v>::type last;\n\nBOOST_MPL_ASSERT(( is_same< prior<last>::type, first > ));\n```\n\n----------------------------------------\n\nTITLE: Overloading Less-Than Operator for Infix Syntax in C++\nDESCRIPTION: Operator overload that enables the left part of the infix notation. Takes a value and an infix_adaptor and returns a postfix_adaptor holding both for later completion.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/infix.hpp.txt#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<class T, class F>\nconstexpr auto operator<(T&& x, const infix_adaptor<F>& i) BOOST_HOF_RETURNS\n(detail::make_postfix_adaptor(BOOST_HOF_FORWARD(T)(x), boost::hof::move(i.base_function(x))));\n```\n\n----------------------------------------\n\nTITLE: Declaring std_checked Template Type Alias in C++\nDESCRIPTION: Type alias template that configures basic_result with std::error_code as the error type and policy::throw_bad_result_access<EC> as the error handling policy. Located in the BOOST_OUTCOME_V2_NAMESPACE namespace and included via boost/outcome/std_result.hpp header.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/aliases/std_checked.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate<class T, class E = std::error_code>\nusing std_checked = basic_result<T, E, policy::throw_bad_result_access<EC>>;\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project for S2 Geometry Library\nDESCRIPTION: Sets up the CMake project for S2 Geometry, including version number and required CMake version.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/s2geometry/master/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.12)\n\nproject(s2-geometry\n\tVERSION 0.10.0)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Random Access Iterator Category Type Expression\nDESCRIPTION: Shows the type expression for the category of a Random Access Iterator, which returns an Integral Constant convertible to random_access_iterator_tag in constant time.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/RandomAccessIterator.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ni::category\n```\n\n----------------------------------------\n\nTITLE: Distributed Iterator Property Map Class Template in C++\nDESCRIPTION: Class template for creating distributed property maps from random access iterators, allowing mapping from global descriptors to local indices.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/distributed_property_map.rst#2025-04-22_snippet_15\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate<typename RandomAccessIterator, typename ProcessGroup,\n         typename GlobalKey, typename LocalMap, typename ValueType,\n         typename Reference>\nclass iterator_property_map<RandomAccessIterator, \n                            local_property_map<ProcessGroup, GlobalKey, LocalMap>,\n                            ValueType, Reference>\n{\npublic:\n  typedef local_property_map<ProcessGroup, GlobalKey, LocalMap> index_map_type;\n\n  iterator_property_map();\n  iterator_property_map(RandomAccessIterator iter, const index_map_type& id);\n};\n```\n\n----------------------------------------\n\nTITLE: Detection of False Positive Race Warnings - C++\nDESCRIPTION: A detailed explanation of possible false positives flagged by Thread Sanitizer (TSAN) regarding leadership establishment and recovery processes within the replicated log and state manager system. The dependencies between threads and the guarantees around locking orders are clarified.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tsan_arangodb_suppressions.txt#2025-04-22_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\n// The following scenario is flagged by TSAN: T1(M0 -> M1), T2(M1 -> M2), T3(M2 -> M0)\n// T1 establishes leadership\n//   - calls `LogLeader::executeAppendEntriesRequests` and acquires M0 (LogLeader::_guardedLeaderData)\n//   - calls `ReplicatedStateManager::leadershipEstablished` and acquires M1 (ReplicatedStateManager::_guarded)\n// T2 creates the shard\n//   - calls `ReplicatedStateManager::getLeader` and acquires M1 (ReplicatedStateManager::_guarded)\n//   - calls `LeaderStateManager::getStateMachine` and acquires M2 (LeaderStateManager::_guardedData)\n// T3 does recovery\n//   - calls `LeaderStateManager::recoverEntries` and acquires M2 (LeaderStateManager::_guardedData)\n//   - calls `LogLeader::triggerAsyncReplication` and acquires M0 (LogLeader::_guardedLeaderData)\n// It is a false positive because:\n// * T3 (recovery) is spawned due to T1 (leadership established) and it is guaranteed that T1 already holds M0 and\n//   M1 before T3 is started. T1 will definitely finish and release its locks, regardless of what other threads are\n//   doing.\n// * T2 (shard creation) may only do significant work if T3 (recovery) has already finished\n//   (see `LeaderStateManager<S>::getStateMachine()`). Therefore, if T2 acquires M2 before T3 has started,\n//   it will release its locks and try again later, because the leader state is unusable unless recovery is completed.\ndeadlock:replication2::replicated_log::LogLeader::triggerAsyncReplication\ndeadlock:replication2::replicated_state::ReplicatedStateManager\n```\n\n----------------------------------------\n\nTITLE: Windows Console UTF-8 Command\nDESCRIPTION: Command to change Windows console codepage to UTF-8 (65001)\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/doc/running_examples_under_windows.txt#2025-04-22_snippet_0\n\nLANGUAGE: batch\nCODE:\n```\nchcp 65001\n```\n\n----------------------------------------\n\nTITLE: Defining reStructuredText Substitutions for MPL Documentation\nDESCRIPTION: This snippet defines reStructuredText substitutions for common terms and links used in the MPL documentation. It includes definitions for 'Transformation Algorithms' and related terms, as well as copyright information.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/Algorithms-Transformation.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. |Transformation Algorithms| replace:: `Transformation Algorithms`_\n\n.. |transformation algorithm| replace:: `transformation algorithm`_\n.. _transformation algorithm: `Transformation Algorithms`_\n.. |transformation algorithms| replace:: `transformation algorithms`_\n\n\n.. copyright:: Copyright �  2001-2009 Aleksey Gurtovoy and David Abrahams\n   Distributed under the Boost Software License, Version 1.0. (See accompanying\n   file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)\n```\n\n----------------------------------------\n\nTITLE: Setting MSBuild Version and Architecture for V8\nDESCRIPTION: This snippet configures the MSBuild version based on the detected Visual Studio generator. It initializes the build arguments and decides the target architecture (x64 or Win32) based on the BIT setting.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/v8-build/CMakeLists.txt#2025-04-22_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nif (WIN32)\n  MESSAGE(STATUS \"Building V8 for Windows with MSBUILD\")\n\n  if (USE_CLCACHE_MODE)\n    list(APPEND V8_GYP_ARGS \"-Duse_clcache_mode=true\")\n  else ()\n    list(APPEND V8_GYP_ARGS \"-Duse_clcache_mode=false\")\n  endif()\n\n  if (${CMAKE_GENERATOR} MATCHES \"2013\")\n    set(GYP_MSVS_VERSION \"2013\")\n    MESSAGE(STATUS \"setting GYP_MSVS_VERSION to 2013\")\n  elseif (${CMAKE_GENERATOR} MATCHES \"2015\")\n    set(GYP_MSVS_VERSION \"2015\")\n    MESSAGE(STATUS \"setting GYP_MSVS_VERSION to 2015\")\n  elseif (${CMAKE_GENERATOR} MATCHES \"2017\")\n    set(GYP_MSVS_VERSION \"2017\")\n    MESSAGE(STATUS \"setting GYP_MSVS_VERSION to 2017\")\n  elseif (${CMAKE_GENERATOR} MATCHES \"2019\")\n    set(GYP_MSVS_VERSION \"2019\")\n    MESSAGE(STATUS \"setting GYP_MSVS_VERSION to 2019\")\n  elseif (${CMAKE_GENERATOR} MATCHES \"2022\")\n    set(GYP_MSVS_VERSION \"2022\")\n    MESSAGE(STATUS \"setting GYP_MSVS_VERSION to 2022\")\n  else ()\n    set(GYP_MSVS_VERSION \"2017\")\n    MESSAGE(STATUS \"setting GYP_MSVS_VERSION to 2017 by default\")\n  endif()\n\n  list(APPEND V8_GYP_ARGS \"-Dmsvs_cygwin_shell=0\")\n\n  if (\"${BITS}\" STREQUAL \"64\")\n    set(MS_TARGET_PLATFORM x64)\n  else ()\n    set(MS_TARGET_PLATFORM Win32)\n  endif ()\n\n  list(APPEND V8_GYP_ARGS -Dtarget_arch=${V8_PROC_ARCH} -Dhost_arch=${V8_PROC_ARCH})\n  list(APPEND V8_GYP_ARGS ../gypfiles/v8.gyp)\n\n  list(APPEND V8_TARGET_ARCHS \"Release\")\n  if (USE_DEBUG_V8)\n    list(APPEND V8_TARGET_ARCHS \"Debug\")\n  endif()\n  set(GYP_GENERATORS \"msvs\")\n  set(GYP_MSVS_OVERRIDE_PATH \"${CMAKE_CXX_COMPILER}\")\n```\n\n----------------------------------------\n\nTITLE: Defining Boost MPI Library Source Files in CMake\nDESCRIPTION: Creates the boost_mpi library target and specifies all the source files to be compiled into the library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpi/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(boost_mpi\n  src/broadcast.cpp\n  src/cartesian_communicator.cpp\n  src/communicator.cpp\n  src/computation_tree.cpp\n  src/content_oarchive.cpp\n  src/environment.cpp\n  src/error_string.cpp\n  src/exception.cpp\n  src/graph_communicator.cpp\n  src/group.cpp\n  src/intercommunicator.cpp\n  src/mpi_datatype_cache.cpp\n  src/mpi_datatype_oarchive.cpp\n  src/offsets.cpp\n  src/packed_iarchive.cpp\n  src/packed_oarchive.cpp\n  src/packed_skeleton_iarchive.cpp\n  src/packed_skeleton_oarchive.cpp\n  src/point_to_point.cpp\n  src/request.cpp\n  src/status.cpp\n  src/text_skeleton_oarchive.cpp\n  src/timer.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Defining ptr_map Class in Boost C++ Library\nDESCRIPTION: This C++ snippet defines the ptr_map class in the Boost library. It is a template class that manages pointers using an std::map underneath. The class employs template parameters to allow customization of key comparison, allocation strategies, and clone allocation. It inherits from the ptr_map_adapter class. Essential components include Key, T, Compare, CloneAllocator, and Allocator template parameters.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/ptr_map.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nnamespace boost\n{\n\n    template\n    < \n        class Key, \n        class T, \n        class Compare        = std::less<Key>, \n        class CloneAllocator = heap_clone_allocator,\n        class Allocator      = std::allocator< std::pair<const Key,void*> >\n    >\n    class ptr_map : public ptr_map_adapter\n                               <\n                                   T,\n                                   std::map<Key,void*,Compare,Allocator>,\n                                   CloneAllocator\n                               >\n    {\n        // see references\n        \n    }; //  class 'ptr_map'\n\n} // namespace 'boost'\n```\n\n----------------------------------------\n\nTITLE: Configuring JeMalloc as External Project in CMake\nDESCRIPTION: Configures JeMalloc memory allocator version 5.3.0 as an external project dependency. The script handles platform-specific settings (Linux vs macOS), optional profiling and safety checks, and compiler flag management. It sets up source and binary directories, copies files, and defines the build and install commands.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/jemalloc/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# -*- mode: CMAKE; -*-\n\nproject(jemalloc C)\ninclude(ExternalProject)\n\nset(JEMALLOC_VERSION \"5.3.0\")\nset(JEMALLOC_SOURCE_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/jemalloc\")\nset(JEMALLOC_BINARY_DIR \"${CMAKE_CURRENT_BINARY_DIR}/jemalloc\")\n\n# copy files into binary directory\nfile(\n  COPY\n    \"${JEMALLOC_SOURCE_DIR}\"\n  DESTINATION\n    \"${CMAKE_CURRENT_BINARY_DIR}\"\n)\n\n# generate external project\nif (LINUX OR DARWIN)\n  if (DARWIN)\n    set(JEMALLOC_CC \"cc\")\n    set(JEMALLOC_CXX \"c++}\")\n    set(JEMALLOC_CONFIG \"background_thread:false\")\n  else ()\n    set(JEMALLOC_CC \"${CMAKE_C_COMPILER}\")\n    set(JEMALLOC_CXX \"${CMAKE_CXX_COMPILER}\")\n    set(JEMALLOC_CONFIG \"background_thread:true,cache_oblivious:false\")\n  endif ()\n\n  if (USE_JEMALLOC_CHECKS)\n    set(JEMALLOC_CHECKS \"--enable-opt-safety-checks\" \"--enable-opt-size-checks\")\n  else ()\n    set(JEMALLOC_CHECKS \"\")\n  endif ()\n\n  if (USE_JEMALLOC_PROF)\n    if (USE_LIBUNWIND)\n      # Note that CPPFLAGS are passed by jemalloc to both C and C++ compilers,\n      # and to the preprocessor, and to dependency file generation. This is the\n      # right place for includes.\n      set(JEMALLOC_CPPFLAGS \"-I${LIBUNWIND_HOME}/include\")\n      set(JEMALLOC_PROF \"--enable-prof\" \"--enable-prof-libunwind\" \"--with-static-libunwind=${LIBUNWIND_LIB}\")\n    else ()\n      set(JEMALLOC_PROF \"--enable-prof\")\n    endif()\n  endif ()\n\n  # add build-type specific c flags and cxx flags here, because otherwise\n  # they would be lost\n  set(JEMALLOC_C_FLAGS \"${CMAKE_C_FLAGS} ${CMAKE_C_FLAGS_${CMAKE_BUILD_TYPE_UPPER}}\")\n  set(JEMALLOC_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${CMAKE_CXX_FLAGS_${CMAKE_BUILD_TYPE_UPPER}}\")\n  message(DEBUG \"JEMALLOC_C_FLAGS=${JEMALLOC_C_FLAGS} JEMALLOC_CXX_FLAGS=${JEMALLOC_CXX_FLAGS}\")\n\n  set(JEMALLOC_LIB \"${CMAKE_CURRENT_BINARY_DIR}/lib/libjemalloc.a\")\n  ExternalProject_Add(\n    jemalloc_build\n    SOURCE_DIR\n      ${JEMALLOC_SOURCE_DIR}\n    BINARY_DIR\n      ${JEMALLOC_BINARY_DIR}\n    PREFIX\n      ${JEMALLOC_BINARY_DIR}\n    PATCH_COMMAND\n      cmake -E touch\n        ${JEMALLOC_BINARY_DIR}/doc/jemalloc.html\n        ${JEMALLOC_BINARY_DIR}/doc/jemalloc.3\n    CONFIGURE_COMMAND\n# One could run autogen.sh (which is needed if jemalloc becomes a submodule), otherwise\n# it's fine to just commit the configure script to the arangodb repository.\n#      ./autogen.sh\n#      COMMAND\n      ./configure\n        CC=${JEMALLOC_CC}\n        CXX=${JEMALLOC_CXX}\n        CFLAGS=${JEMALLOC_C_FLAGS}\n        CXXFLAGS=${JEMALLOC_CXX_FLAGS}\n        CPPFLAGS=${JEMALLOC_CPPFLAGS}\n        --prefix=${CMAKE_CURRENT_BINARY_DIR}\n        --with-malloc-conf=${JEMALLOC_CONFIG}\n        --with-version=${JEMALLOC_VERSION}-0-g0\n        ${JEMALLOC_PROF}\n        ${JEMALLOC_CHECKS}\n    BUILD_COMMAND\n      $(MAKE) build_lib_static\n    INSTALL_COMMAND\n      $(MAKE) install_include\n        && ${CMAKE_COMMAND} -E make_directory ${CMAKE_CURRENT_BINARY_DIR}/lib\n        && ${CMAKE_COMMAND} -E copy ${JEMALLOC_BINARY_DIR}/lib/libjemalloc.a ${CMAKE_CURRENT_BINARY_DIR}/lib\n    STEP_TARGETS\n      ${JEMALLOC_LIB} jemalloc\n  )\n\n  set(JEMALLOC_HOME \"${CMAKE_CURRENT_BINARY_DIR}\" PARENT_SCOPE)\n  set(JEMALLOC_LIB \"${JEMALLOC_LIB}\" PARENT_SCOPE)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Common Test Suite Configuration\nDESCRIPTION: Shared test configurations across single server and cluster environments for import/export and backup operations\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/test-definitions.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nimporting,export name=import_export parallelity=5 size=small cluster -- --dumpAgencyOnError true\n```\n\n----------------------------------------\n\nTITLE: Including char_ Header in C++\nDESCRIPTION: Shows the header file that needs to be included to use the char_ template class in a C++ program.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/char_.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/char.hpp>\n```\n\n----------------------------------------\n\nTITLE: Static Function Adaptor Class Declaration\nDESCRIPTION: Template class declaration for static function adaptors that require DefaultConstructible functions. These adaptors only exist in class form.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/src/definitions.md#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate<class... Fs>\nclass StaticFunctionAdaptor;\n```\n\n----------------------------------------\n\nTITLE: Configuring Slist Tests in CMake\nDESCRIPTION: Checks if the slist header is available and conditionally sets up related tests. Provides diagnostic messages about the availability of slist.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/serialization/CMake/CMakeLists.txt#2025-04-22_snippet_18\n\nLANGUAGE: CMake\nCODE:\n```\nCHECK_INCLUDE_FILE_CXX(slist SLIST_FOUND)\nif(SLIST_FOUND)\n  message(STATUS \"slist header found\")\n  archive_test(test_slist A)\n  archive_test(test_slist_ptr A)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating NumPy Array with Built-in dtype\nDESCRIPTION: This snippet demonstrates creating a 3x3 NumPy array of doubles using Boost.Python. It utilizes `np::zeros` to initialize the array with zeros, specifying the shape as a Python tuple and the dtype using `np::dtype::get_builtin<double>()`.  The shape is created using `p::make_tuple`.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/doc/numpy/tutorial/dtype.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n  p::tuple shape = p::make_tuple(3, 3);\n  np::dtype dtype = np::dtype::get_builtin<double>();\n  np::ndarray a = np::zeros(shape, dtype);\n```\n\n----------------------------------------\n\nTITLE: Using at with an Associative Set in C++\nDESCRIPTION: Example showing how to use the at metafunction with an associative set to retrieve elements by key, using compile-time assertions to verify the results including the default case when a key is not found.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/at.rst#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\ntypedef set< int const,long*,double > s;\n\nBOOST_MPL_ASSERT(( is_same< at<s,char>::type, void\\_ > ));\nBOOST_MPL_ASSERT(( is_same< at<s,int>::type, int > ));\n```\n\n----------------------------------------\n\nTITLE: Creating Alias for Boost Graph Parallel Library\nDESCRIPTION: Creates an alias for the boost_graph_parallel library.  This allows referring to the library as Boost::graph_parallel, which is a common convention for Boost libraries. This also simplifies linking the library in other parts of the project.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(Boost::graph_parallel ALIAS boost_graph_parallel)\n```\n\n----------------------------------------\n\nTITLE: Building and Installing Jemalloc from Packaged Release\nDESCRIPTION: Commands for configuring, building, and installing jemalloc from a packaged release. Must be executed from the root directory of the source tree.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/jemalloc/jemalloc/INSTALL.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./configure\nmake\nmake install\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Other_Grapheme_Extend Characters\nDESCRIPTION: Lists Unicode code points classified as Other_Grapheme_Extend with their corresponding character classes. These include characters that modify or extend graphemes in various scripts, including vowel signs, length marks, and zero-width joiners. The list contains 23 total code points.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/spirit/workbench/unicode/PropList.txt#2025-04-22_snippet_16\n\nLANGUAGE: unicode\nCODE:\n```\n09BE          ; Other_Grapheme_Extend # Mc       BENGALI VOWEL SIGN AA\n09D7          ; Other_Grapheme_Extend # Mc       BENGALI AU LENGTH MARK\n0B3E          ; Other_Grapheme_Extend # Mc       ORIYA VOWEL SIGN AA\n0B57          ; Other_Grapheme_Extend # Mc       ORIYA AU LENGTH MARK\n0BBE          ; Other_Grapheme_Extend # Mc       TAMIL VOWEL SIGN AA\n0BD7          ; Other_Grapheme_Extend # Mc       TAMIL AU LENGTH MARK\n0CC2          ; Other_Grapheme_Extend # Mc       KANNADA VOWEL SIGN UU\n0CD5..0CD6    ; Other_Grapheme_Extend # Mc   [2] KANNADA LENGTH MARK..KANNADA AI LENGTH MARK\n0D3E          ; Other_Grapheme_Extend # Mc       MALAYALAM VOWEL SIGN AA\n0D57          ; Other_Grapheme_Extend # Mc       MALAYALAM AU LENGTH MARK\n0DCF          ; Other_Grapheme_Extend # Mc       SINHALA VOWEL SIGN AELA-PILLA\n0DDF          ; Other_Grapheme_Extend # Mc       SINHALA VOWEL SIGN GAYANUKITTA\n200C..200D    ; Other_Grapheme_Extend # Cf   [2] ZERO WIDTH NON-JOINER..ZERO WIDTH JOINER\nFF9E..FF9F    ; Other_Grapheme_Extend # Lm   [2] HALFWIDTH KATAKANA VOICED SOUND MARK..HALFWIDTH KATAKANA SEMI-VOICED SOUND MARK\n1D165         ; Other_Grapheme_Extend # Mc       MUSICAL SYMBOL COMBINING STEM\n1D16E..1D172  ; Other_Grapheme_Extend # Mc   [5] MUSICAL SYMBOL COMBINING FLAG-1..MUSICAL SYMBOL COMBINING FLAG-5\n\n# Total code points: 23\n```\n\n----------------------------------------\n\nTITLE: Implementing Static In-Place Construction Hook for basic_outcome in C++\nDESCRIPTION: A static hook method that is called during in-place construction of basic_outcome objects. Takes a pointer to type T, an in_place_type_t<U>, and variadic forwarding references. This hook is noexcept and is always available.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/policies/base/on_outcome_in_place_construction.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nstatic void on_outcome_in_place_construction(T *, in_place_type_t<U>, Args &&...) noexcept\n```\n\n----------------------------------------\n\nTITLE: Configuring Built-in STL Support in Doxygen\nDESCRIPTION: Setting to enable better handling of STL classes in function declarations without including STL sources. Helps create more accurate inheritance and collaboration diagrams for STL classes. Default is NO.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/sort/doc/doxygen/sort_doxyfile.txt#2025-04-22_snippet_14\n\nLANGUAGE: text\nCODE:\n```\nBUILTIN_STL_SUPPORT    = NO\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Test Virtual Definitions in CMake\nDESCRIPTION: Sets up definitions for virtual functions in Google Tests, if enabled.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/client-tools/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif (USE_GOOGLE_TESTS)\n  add_definitions(\"-DTEST_VIRTUAL=virtual\")\nelse()\n  add_definitions(\"-DTEST_VIRTUAL=\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining WSerialization Library Target\nDESCRIPTION: Creates the 'wserialization' library target for wide character support, specifies its source files, and links it with the 'serialization' library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/serialization/CMake/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(wserialization\n  ../src/basic_text_wiprimitive.cpp\n  ../src/basic_text_woprimitive.cpp\n  # ... (other source files)\n  ../src/basic_xml_grammar.ipp\n)\ntarget_include_directories(wserialization PUBLIC ${Boost_INCLUDE_DIR})\ntarget_link_libraries(wserialization PUBLIC serialization)\n```\n\n----------------------------------------\n\nTITLE: Defining the template_keyword Class in Boost Parameter Library C++\nDESCRIPTION: Implements the template_keyword class that encapsulates a named template parameter. This class stores key_type, value_type, and a reference type with implementation-defined details.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <typename Tag, typename T>\nstruct template_keyword\n{\n    typedef Tag key_type;\n    typedef T value_type;\n    typedef *implementation defined* reference;\n};\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Boost.HigherOrderFunctions with Boost.Build in Bash\nDESCRIPTION: Commands to run tests for the Boost.HigherOrderFunctions library using Boost.Build after copying the library to the Boost source tree.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/doc/src/building.md.txt#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd test\nb2\n```\n\n----------------------------------------\n\nTITLE: Building Boost Program Options Library in CMake\nDESCRIPTION: Configures the Boost Program Options library as a static library, specifying source files and compile definitions. It links against the boost_boost interface target.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(boost_program_options STATIC\n    ${boost_src}/libs/program_options/src/cmdline.cpp\n    ${boost_src}/libs/program_options/src/config_file.cpp\n    ${boost_src}/libs/program_options/src/convert.cpp\n    ${boost_src}/libs/program_options/src/options_description.cpp\n    ${boost_src}/libs/program_options/src/parsers.cpp\n    ${boost_src}/libs/program_options/src/positional_options.cpp\n    ${boost_src}/libs/program_options/src/split.cpp\n    ${boost_src}/libs/program_options/src/utf8_codecvt_facet.cpp\n    ${boost_src}/libs/program_options/src/value_semantic.cpp\n    ${boost_src}/libs/program_options/src/variables_map.cpp\n    ${boost_src}/libs/program_options/src/winmain.cpp\n)\ntarget_link_libraries(boost_program_options PUBLIC boost_boost)\ntarget_compile_definitions(boost_program_options PRIVATE \"BOOST_SYSTEM_STATIC_LINK=1\")\ntarget_compile_definitions(boost_program_options PUBLIC  \"BOOST_ALL_NO_LIB=1\")\n```\n\n----------------------------------------\n\nTITLE: Installing Documentation Requirements with pip\nDESCRIPTION: This snippet shows how to install the necessary Python packages to build the documentation using pip. It installs the packages listed in the 'doc/requirements.txt' file.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n\"pip install -r doc/requirements.txt\"\n```\n\n----------------------------------------\n\nTITLE: Implementing the Main is_unpackable Trait in C++\nDESCRIPTION: The main is_unpackable trait that inherits from is_unpackable_impl with additional compile-time checks when BOOST_HOF_CHECK_UNPACK_SEQUENCE is enabled.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/is_unpackable.hpp.txt#2025-04-22_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<class Sequence>\nstruct is_unpackable\n: detail::is_unpackable_impl<\n    typename std::remove_cv<typename std::remove_reference<Sequence>::type>::type\n>\n{\n#if BOOST_HOF_CHECK_UNPACK_SEQUENCE\ntypedef detail::is_unpackable_impl<\n    typename std::remove_cv<typename std::remove_reference<Sequence>::type>::type\n> base;\n\ntypedef std::conditional<base::value, detail::is_proper_sequence<Sequence>, std::true_type> check;\nstatic_assert(check::type::value,\n    \"Unpack is invalid for this sequence. The function used to unpack this sequence does not invoke the function.\"\n);\n#endif\n};\n```\n\n----------------------------------------\n\nTITLE: Deriving Image View Types in C++\nDESCRIPTION: This snippet illustrates view type derivation using metafunctions, allowing transformations of views like dynamic stepping and channel extraction. It enables changing data interpretation of source views while adhering to desired pixel and channel constraints.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/image_view.rst#2025-04-22_snippet_10\n\nLANGUAGE: cpp\nCODE:\n```\n// Some result view types\ntemplate <typename View>\nstruct dynamic_xy_step_type : public dynamic_y_step_type<typename dynamic_x_step_type<View>::type> {};\n\ntemplate <typename View>\nstruct dynamic_xy_step_transposed_type : public dynamic_xy_step_type<typename transposed_type<View>::type> {};\n\n// color and bit depth converted view to match pixel type P\ntemplate <typename SrcView, // Models ImageViewConcept\n        typename DstP,    // Models PixelConcept\n        typename ColorConverter=gil::default_color_converter>\nstruct color_converted_view_type\n{\n  typedef ... type;     // image view adaptor with value type DstP, over SrcView\n};\n\n// single-channel view of the N-th channel of a given view\ntemplate <typename SrcView>\nstruct nth_channel_view_type\n{\n  typedef ... type;\n};\n\n```\n\n----------------------------------------\n\nTITLE: Adding testing subdirectory\nDESCRIPTION: Conditionally adds a subdirectory for tests if testing is enabled (BUILD_TESTING is true) and a CMakeLists.txt file exists in the test directory. This allows the project to include and run tests as part of the build process.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/dynamic_bitset/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(BUILD_TESTING AND EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/test/CMakeLists.txt\")\n\n  add_subdirectory(test)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Executing Python Toolbox with Custom Parameters\nDESCRIPTION: Example command for running the main.py script with specific startup parameters including RocksDB block cache size configuration. The script accepts mode, initialization flag, and startup parameters as arguments.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/scripts/toolbox/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython3 main.py --mode=single --init=true --startupParameters='{\"rocksdb.block-cache-size\": \"133713371337\"}'\n```\n\n----------------------------------------\n\nTITLE: Setting Compile Definitions for Boost Graph Parallel Library\nDESCRIPTION: Sets compile definitions for the boost_graph_parallel library.  `BOOST_GRAPH_PARALLEL_NO_LIB` and `BOOST_GRAPH_PARALLEL_SOURCE` are defined to control the compilation behavior. The `PUBLIC` keyword makes `BOOST_GRAPH_PARALLEL_NO_LIB` visible to dependent projects, while `PRIVATE` restricts `BOOST_GRAPH_PARALLEL_SOURCE` to the library itself.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/CMakeLists.txt#2025-04-22_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_compile_definitions(boost_graph_parallel\n  PUBLIC BOOST_GRAPH_PARALLEL_NO_LIB\n  PRIVATE BOOST_GRAPH_PARALLEL_SOURCE\n)\n```\n\n----------------------------------------\n\nTITLE: Assembly Output for Simple LEAF Function\nDESCRIPTION: Shows the assembly code generated by clang for the simple LEAF function example. This demonstrates how LEAF handles error checking and result processing at the assembly level.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/leaf/benchmark/benchmark.md#2025-04-22_snippet_4\n\nLANGUAGE: x86 Assembly\nCODE:\n```\ng():                                  # @g()\n        push    rbx\n        sub     rsp, 32\n        mov     rbx, rdi\n        lea     rdi, [rsp + 8]\n        call    f()\n        mov     eax, dword ptr [rsp + 24]\n        mov     ecx, eax\n        and     ecx, 3\n        cmp     ecx, 3\n        jne     .LBB0_1\n        mov     eax, dword ptr [rsp + 8]\n        add     eax, 1\n        mov     dword ptr [rbx], eax\n        mov     eax, 3\n        jmp     .LBB0_3\n.LBB0_1:\n        cmp     ecx, 2\n        jne     .LBB0_3\n        mov     rax, qword ptr [rsp + 8]\n        mov     qword ptr [rbx], rax\n        mov     rax, qword ptr [rsp + 16]\n        mov     qword ptr [rbx + 8], rax\n        mov     eax, 2\n.LBB0_3:\n        mov     dword ptr [rbx + 16], eax\n        mov     rax, rbx\n        add     rsp, 32\n        pop     rbx\n        ret\n```\n\n----------------------------------------\n\nTITLE: Computing and Saving Mandelbrot Gradient in C++\nDESCRIPTION: Shows how to compute the x-gradient of a rotated Mandelbrot view and save both the original and gradient images.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/tutorial/gradient.rst.txt#2025-04-22_snippet_18\n\nLANGUAGE: cpp\nCODE:\n```\ngray8s_image_t img(dims);\nx_gradient(rotated90cw_view(mandel), view(img));\n\n// Save the Mandelbrot set and its 90-degree rotated gradient (jpeg cannot save signed char; must convert to unsigned char)\njpeg_write_view(\"mandel.jpg\",mandel);\njpeg_write_view(\"mandel_grad.jpg\",color_converted_view<gray8_pixel_t>(const_view(img)));\n```\n\n----------------------------------------\n\nTITLE: Adding External Dependencies\nDESCRIPTION: Defines build dependencies for the ArangoRestore executable including zlib, ICU, jemalloc (conditional), and man pages.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/client-tools/Restore/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_dependencies(${BIN_ARANGORESTORE} zlibstatic)\n\n# use ICU 64 for the client tools\nadd_dependencies(${BIN_ARANGORESTORE} iculegacy_build)\n\nif (USE_JEMALLOC)\n  add_dependencies(${BIN_ARANGORESTORE} jemalloc_build)\nendif ()\n\nadd_dependencies(${BIN_ARANGORESTORE} man)\n```\n\n----------------------------------------\n\nTITLE: Building Boost.Locale with Custom ICU Path on Windows\nDESCRIPTION: Command to build Boost.Locale library using bjam on Windows, specifying a custom path for the ICU library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/doc/building_boost_locale.txt#2025-04-22_snippet_3\n\nLANGUAGE: batch\nCODE:\n```\n.\\bjam --with-locale -sICU_PATH=c:\\icu46  stage\n```\n\n----------------------------------------\n\nTITLE: Defining Boost Functional Library\nDESCRIPTION: This snippet defines an interface library for Boost Functional and sets its version and language requirements. It establishes the library's name and includes necessary directories for headers. The configuration ensures the library is built as an interface allowing other modules to depend on it without linking directly.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/functional/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.16)\n\nproject(boost_functional VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n\nadd_library(boost_functional INTERFACE)\nadd_library(Boost::functional ALIAS boost_functional)\n\ntarget_include_directories(boost_functional INTERFACE include)\n```\n\n----------------------------------------\n\nTITLE: Declaring on_outcome_construction Method for basic_outcome in C++\nDESCRIPTION: Declares a static method 'on_outcome_construction' that serves as a constructor hook for basic_outcome objects. It takes two parameters: a pointer to T and an rvalue reference to U. The method is noexcept, meaning it never throws exceptions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/policies/base/on_outcome_construction.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nstatic void on_outcome_construction(T *, U &&) noexcept\n```\n\n----------------------------------------\n\nTITLE: Configuring Symbol Mangling in ArangoDB Build\nDESCRIPTION: This example shows how to use the --with-mangling option to mangle public symbols. It's useful for overriding libc's malloc implementation using ld's --wrap option.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/jemalloc/jemalloc/INSTALL.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n--with-mangling=malloc:__wrap_malloc,free:__wrap_free[...]\n```\n\n----------------------------------------\n\nTITLE: Building Linenoise-NG Static Library\nDESCRIPTION: Configures the build for linenoise-ng static library with its source files and include directories.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(linenoise-ng STATIC\n  linenoise-ng/src/ConvertUTF.cpp\n  linenoise-ng/src/linenoise.cpp\n  linenoise-ng/src/wcwidth.cpp)\n\ntarget_include_directories(linenoise-ng SYSTEM PUBLIC\n  ${PROJECT_SOURCE_DIR}/3rdParty/linenoise-ng/include)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Bind Expressions in C++ Template Metaprogramming\nDESCRIPTION: Examples of valid and invalid bind expressions in template metaprogramming. Valid expressions include different forms of the bind template with various parameters, while invalid examples show constructs that don't qualify as bind expressions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/Terminology.rst#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nbind< quote3<if_>, _1,int,long >\nbind< _1, bind< plus<>, int_<5>, _2> >\nbind< times<>, int_<2>, int_<2> >\n```\n\nLANGUAGE: cpp\nCODE:\n```\nif_< _1, bind< plus<>, int_<5>, _2>, _2 >        \nprotect< bind< quote3<if_>, _1,int,long > >\n_2\n```\n\n----------------------------------------\n\nTITLE: Running libunwind Performance Tests\nDESCRIPTION: Commands to execute the performance test suite that measures the cost of various libunwind operations after building the library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/libunwind/v1.7.2/README.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ cd tests\n$ make perf\n```\n\n----------------------------------------\n\nTITLE: Public API for Construct Functions in C++\nDESCRIPTION: The public interface for the construct functionality, providing various factory functions that return specialized function objects for constructing objects. Includes variants for different forwarding behaviors and metafunction-based construction.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/construct.hpp.txt#2025-04-22_snippet_7\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<class T>\nconstexpr detail::construct_f<T> construct() noexcept\n{\n    return {};\n}\n// These overloads are provide for consistency\ntemplate<class T>\nconstexpr detail::construct_f<T> construct_forward() noexcept\n{\n    return {};\n}\n\ntemplate<class T>\nconstexpr detail::construct_f<T> construct_basic() noexcept\n{\n    return {};\n}\n\ntemplate<template<class...> class Template>\nconstexpr detail::construct_template_f<Template, detail::decay_mf> construct() noexcept\n{\n    return {};\n}\n\ntemplate<template<class...> class Template>\nconstexpr detail::construct_template_f<Template, detail::construct_id> construct_forward() noexcept\n{\n    return {};\n}\n\ntemplate<template<class...> class Template>\nconstexpr detail::construct_template_f<Template, detail::remove_rvalue_reference> construct_basic() noexcept\n{\n    return {};\n}\n\ntemplate<class T>\nconstexpr detail::construct_meta_f<T> construct_meta() noexcept\n{\n    return {};\n}\n\ntemplate<template<class...> class Template>\nconstexpr detail::construct_meta_template_f<Template> construct_meta() noexcept\n{\n    return {};\n}\n```\n\n----------------------------------------\n\nTITLE: Linking ArangoDB Utils Dependencies\nDESCRIPTION: Specifies external and internal library dependencies including boost, validation, basic utils, indexes, fmt, and immer libraries.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/Utils/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(arango_utils\n  boost_boost\n  arango::validation\n  arango_basic_errors\n  arango_basic_utils\n  arango_indexes\n  fmt\n  immer\n)\n```\n\n----------------------------------------\n\nTITLE: Linking Boost Libraries\nDESCRIPTION: Links the `boost_geometry` library against other Boost libraries. The `INTERFACE` keyword ensures that these dependencies are also propagated to any target that links against `boost_geometry`. This section defines the library's dependencies.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/geometry/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n\"target_link_libraries(boost_geometry\n  INTERFACE\n    Boost::algorithm\n    Boost::array\n    Boost::assert\n    Boost::concept_check\n    Boost::config\n    Boost::container\n    Boost::core\n    Boost::endian\n    Boost::function_types\n    Boost::fusion\n    Boost::integer\n    Boost::iterator\n    Boost::lexical_cast\n    Boost::math\n    Boost::move\n    Boost::mpl\n    Boost::multiprecision\n    Boost::numeric_conversion\n    Boost::polygon\n    Boost::qvm\n    Boost::range\n    Boost::rational\n    Boost::serialization\n    Boost::smart_ptr\n    Boost::static_assert\n    Boost::thread\n    Boost::throw_exception\n    Boost::tokenizer\n    Boost::tuple\n    Boost::type_traits\n    Boost::utility\n    Boost::variant\n)\"\n```\n\n----------------------------------------\n\nTITLE: gyp usage options\nDESCRIPTION: This snippet outlines the available command options for gyp, detailing how to invoke help, configuration options, and a format check.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/v8-build/gyp/README.md#2025-04-22_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n\"usage: usage: gyp [options ...] [build_file ...]\\n\\noptions:\\n  -h, --help            show this help message and exit\\n  --build CONFIGS       configuration for build after project generation\\n  --check               check format of gyp files\\n  [ ... ]\"\n```\n\n----------------------------------------\n\nTITLE: Python Package Requirements\nDESCRIPTION: A requirements.txt style list of Python package dependencies including python-arango for ArangoDB connectivity, prometheus_client for metrics, requests for HTTP operations, numpy for numerical computing, matplotlib for plotting, and termcolor for colored terminal output.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/scripts/toolbox/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\npython-arango\nprometheus_client\nrequests\nnumpy\nmatplotlib\ntermcolor\n```\n\n----------------------------------------\n\nTITLE: Accessing Forward Iterator Category in C++\nDESCRIPTION: Demonstrates how to access the category of a forward iterator 'i'. The result is an Integral Constant convertible to forward_iterator_tag, and the operation has constant time complexity.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/ForwardIterator.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntypedef i::category c;\n```\n\n----------------------------------------\n\nTITLE: Defining ptr_multiset Class Template in C++\nDESCRIPTION: This code snippet defines a class template 'ptr_multiset' within the Boost namespace, which serves as a pointer container utilizing 'std::multiset<void*>'. It inherits from 'ptr_multiset_adapter' and allows customization via key type, comparison functor, allocator types, and clone allocator. The provided class template supports standard behaviors of multiset while managing pointers.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/ptr_multiset.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nnamespace boost\n{\n    template\n    < \n        class Key, \n        class Compare        = std::less<Key>,\n        class CloneAllocator = heap_clone_allocator,\n        class Allocator      = std::allocator<void*> \n    >\n    class ptr_multiset : public ptr_multiset_adapter\n                                    <\n                                        Key,\n                                        std::multiset<void*,void_ptr_indirect_fun<Compare,Key>,Allocator>,\n                                        CloneAllocator\n                                    >\n    {\n        // see references\n        \n    }; //  class 'ptr_multiset'\n} // namespace 'boost'  \n```\n\n----------------------------------------\n\nTITLE: HTMLTidy C API Error Handling\nDESCRIPTION: Example of a split Type-Error (T|E) API implementation using C-style error handling with return codes and minimal side effects\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/tutorial/advanced/interop/tidylib.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n{{% snippet \"finale.cpp\" \"tidylib\" %}}\n```\n\n----------------------------------------\n\nTITLE: Defining Single Pass Iterator Requirements in C++\nDESCRIPTION: This code snippet specifies the requirements for the Single Pass Iterator concept, including valid expressions, return types, and semantics. It builds upon the Incrementable Iterator and Equality Comparable concepts.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/SinglePassIterator.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n++r                         X&                       pre: r is dereferenceable; post: r is dereferenceable or r is past-the-end\n\na == b                      convertible to bool      == is an equivalence relation over its domain\n\na != b                      convertible to bool      !(a == b)\n\niterator_traversal<X>::type Convertible to single_pass_traversal_tag\n```\n\n----------------------------------------\n\nTITLE: Defining Metafunction Concept in C++\nDESCRIPTION: This snippet introduces a Metafunction concept that requires a type T to define a type alias named type.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/concepts.rst#2025-04-22_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\nauto concept Metafunction<typename T>\n{\n    typename type;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Inequality Operator for basic_result Class in C++\nDESCRIPTION: Operator overload that compares two basic_result objects for inequality. The comparison uses operator!= on matching states (value_type or error_type) and returns true if states differ. Requires valid operator!= expressions between value_type/A and error_type/B pairs.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/basic_result/inequality_basic_result.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nbool operator!=(const basic_result<A, B, C> &) const\n```\n\n----------------------------------------\n\nTITLE: Using BOOST_OUTCOME_TRY Macro for Error Handling in C++\nDESCRIPTION: The BOOST_OUTCOME_TRY macro has been modified to use the variable as-is rather than declaring it as auto &&var. This allows TRY to be used for both initialization and assignment operations.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/changelog/v22.md#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nBOOST_OUTCOME_TRY(var, expr)\n```\n\n----------------------------------------\n\nTITLE: Installing libunwind from Source (Generic Build Instructions)\nDESCRIPTION: General commands for building and installing the libunwind library from source code. Requires autoreconf for git builds and follows the standard configure, make, install workflow pattern.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/libunwind/v1.7.2/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ autoreconf -i # Needed only for building from git. Depends on libtool.\n$ ./configure --prefix=PREFIX\n$ make\n$ make install\n```\n\n----------------------------------------\n\nTITLE: Configuring Jemalloc for High CPU Priority Applications\nDESCRIPTION: Configuration example for applications prioritizing CPU utilization. Enables background threads and transparent huge pages for metadata, with relaxed decay times to reduce CPU overhead from frequent memory purging.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/jemalloc/jemalloc/TUNING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbackground_thread:true,metadata_thp:auto,dirty_decay_ms:30000,muzzy_decay_ms:30000\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost Proto with CMake\nDESCRIPTION: This CMake file configures the Boost Proto library by declaring it as an interface library and linking it with necessary Boost components. It specifies the CMake version requirement and adds a subdirectory for tests if applicable.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/proto/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Generated by `boostdep --cmake proto`\\n# Copyright 2020 Peter Dimov\\n# Distributed under the Boost Software License, Version 1.0.\\n# https://www.boost.org/LICENSE_1_0.txt\\n\\ncmake_minimum_required(VERSION 3.5...3.16)\\n\\nproject(boost_proto VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\\n\\nadd_library(boost_proto INTERFACE)\\nadd_library(Boost::proto ALIAS boost_proto)\\n\\ntarget_include_directories(boost_proto INTERFACE include)\\n\\ntarget_link_libraries(boost_proto\\n  INTERFACE\\n    Boost::config\\n    Boost::core\\n    Boost::fusion\\n    Boost::mpl\\n    Boost::preprocessor\\n    Boost::range\\n    Boost::static_assert\\n    Boost::type_traits\\n    Boost::typeof\\n    Boost::utility\\n)\\n\\nif(BUILD_TESTING AND EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/test/CMakeLists.txt\")\\n\\n  add_subdirectory(test)\\n\\nendif()\n```\n\n----------------------------------------\n\nTITLE: Optimized Y Gradient with Boost GIL using Cached Locators\nDESCRIPTION: This C++ code optimizes the vertical gradient computation using cached locator offsets. It pre-calculates and caches the location of the pixels above and below the current pixel using `cache_location`. This avoids recomputing the offsets for each pixel, improving performance.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/tutorial/gradient.rst#2025-04-22_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\nvoid y_gradient(gray8c_view_t const& src, gray8s_view_t const& dst)\n{\n  gray8c_view_t::xy_locator src_loc = src.xy_at(0,1);\n  gray8c_view_t::xy_locator::cached_location_t above = src_loc.cache_location(0,-1);\n  gray8c_view_t::xy_locator::cached_location_t below = src_loc.cache_location(0, 1);\n\n  for (int y = 1; y < src.height() - 1; ++y)\n  {\n\n```\n\n----------------------------------------\n\nTITLE: Depth-First Search Implementation with Parameter Printing\nDESCRIPTION: This code snippet implements a depth-first search function using Boost.Parameter and prints the values of the parameters.  It also includes a `main` function demonstrating the use of both positional and named arguments. It showcases how Boost.Parameter simplifies the handling of function arguments.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/index.rst#2025-04-22_snippet_15\n\nLANGUAGE: cpp\nCODE:\n```\n\"#include <boost/graph/depth_first_search.hpp>  // for dfs_visitor\n\n        BOOST_PARAMETER_FUNCTION(\n            (bool), depth_first_search, tag\n            \\*…signature goes here…\\*\n        )\n        {\n            std::cout << \\\"graph=\\\" << graph;\n            std::cout << std::endl;\n            std::cout << \\\"visitor=\\\" << visitor;\n            std::cout << std::endl;\n            std::cout << \\\"root_vertex=\\\" << root_vertex;\n            std::cout << std::endl;\n            std::cout << \\\"index_map=\\\" << index_map;\n            std::cout << std::endl;\n            std::cout << \\\"color_map=\\\" << color_map;\n            std::cout << std::endl;\n            return true;\n        }\n\n        #include <boost/core/lightweight_test.hpp>\n\n        int main()\n        {\n            char const\\* g = \\\"1\\\";\n            depth_first_search(1, 2, 3, 4, 5);\n            depth_first_search(\n                g, '2', _color_map = '5',\n                _index_map = \\\"4\\\", _root_vertex = \\\"3\\\"\n            );\n            return boost::report_errors();\n        }\"\n```\n\n----------------------------------------\n\nTITLE: Observing Stored Exception in C++\nDESCRIPTION: This method provides a const lvalue reference to an observer of the stored exception in the error handling system of ArangoDB. It ensures that a valid default constructed exception is always returned, thus preventing undefined behavior.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/basic_outcome/exception_lvalue_const.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n\"const exception_type &exception() const &\"\n```\n\n----------------------------------------\n\nTITLE: Configuring STL Interfaces Library Target in CMake\nDESCRIPTION: Defines the stl_interfaces library target as an interface library, sets up its include directories, links it with Boost, and applies any configured flags for sanitizers or coverage.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/stl_interfaces/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(stl_interfaces INTERFACE)\n\ntarget_include_directories(stl_interfaces INTERFACE ${CMAKE_CURRENT_SOURCE_DIR}/include)\ntarget_link_libraries(stl_interfaces INTERFACE boost)\nif (link_flags)\n    target_link_libraries(stl_interfaces INTERFACE ${link_flags})\n    target_compile_options(stl_interfaces INTERFACE ${compile_flags})\nendif ()\nif (NOT MSVC)\n    target_compile_options(stl_interfaces INTERFACE -Wall)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Distributed Property Map in C++\nDESCRIPTION: Function to synchronize values across all processes, ensuring ghost cells reflect actual values from owning processes.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/distributed_property_map.rst#2025-04-22_snippet_12\n\nLANGUAGE: cpp\nCODE:\n```\nvoid synchronize(distributed_property_map& pm);\n```\n\n----------------------------------------\n\nTITLE: Unique Pointer Parameter Implementation in C++\nDESCRIPTION: Concrete implementation of push_back that accepts std::unique_ptr, available in C++11 and later.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/compatible_smart_ptr.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nvoid container::push_back( std::unique_ptr<T> );\n```\n\n----------------------------------------\n\nTITLE: Returning errored Result for experimental::status_result\nDESCRIPTION: This snippet describes how coroutines return errored Results when the return type is experimental::status_result<T, system_code>. It notes that system_code can transport error codes or exception pointers.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/tutorial/essential/coroutines/returning.md#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\n// If your Coroutine were returning an experimental::status_result<T, system_code>, \n// an errored Result is returned due to the capabilities of system_code.\n```\n\n----------------------------------------\n\nTITLE: Configuring Outcome for Predictable Execution in C++\nDESCRIPTION: Demonstrates how to configure Outcome for predictable execution times by using a non-throwing policy. This is suitable for scenarios requiring fixed latency, such as high-frequency trading or audio processing.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/faq/_index.md#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\noutcome::result<T, E = varies> result_variable;\n```\n\n----------------------------------------\n\nTITLE: Namespaces Around Boost.Parameter Keyword Declarations\nDESCRIPTION: This code demonstrates an improved approach to namespace management with Boost.Parameter keywords. By nesting keyword declarations within a `keywords` sub-namespace, users can selectively import only the keyword names, providing finer-grained control over namespace pollution.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/index.rst#2025-04-22_snippet_48\n\nLANGUAGE: cpp\nCODE:\n```\n    namespace lib {\n        **namespace keywords {**\n\n            BOOST_PARAMETER_NAME(name)\n            BOOST_PARAMETER_NAME(index)\n        **}**\n\n        BOOST_PARAMETER_FUNCTION(\n            (int), f, **keywords::**\\ tag,\n            (optional (name,\\*,\"bob\")(index,(int),1))\n        )\n        {\n            std::cout << name << \":\" << index;\n            std::cout << std::endl;\n            return index;\n        }\n    }\n```\n\nLANGUAGE: cpp\nCODE:\n```\n    #include <boost/parameter.hpp>\n    #include <iostream>\n    \n```\n\n----------------------------------------\n\nTITLE: Defining BOOST_MPL_ASSERT_RELATION Macro in C++\nDESCRIPTION: Defines the BOOST_MPL_ASSERT_RELATION macro used for checking numerical conditions. It generates a compilation error when the specified relation doesn't hold.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/ASSERT_RELATION.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n#define BOOST_MPL_ASSERT_RELATION( x, relation, y ) \\\n    |unspecified-token-seq| \\\n/**/\n```\n\n----------------------------------------\n\nTITLE: Including int_ Header in C++\nDESCRIPTION: Shows the header file that needs to be included to use the int_ template class in a C++ program.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/int_.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/int.hpp>\n```\n\n----------------------------------------\n\nTITLE: Unary ufunc make method\nDESCRIPTION: Defines the `make` method within the `unary_ufunc` struct. This method returns a Python function object that, when called, invokes the overloaded () operator in the struct.  It requires the `TUnaryFunctor` and optionally `TArgument` and `TResult` typenames to be specified.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/doc/numpy/reference/unary_ufunc.rst#2025-04-22_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\n  template <typename TUnaryFunctor, \n            typename TArgument=typename TUnaryFunctor::argument_type,\n            typename TResult=typename TUnaryFunctor::result_type>\n  static object make(); \n```\n\n----------------------------------------\n\nTITLE: Configuring Target Architecture in CMake for libunwind\nDESCRIPTION: Determines the target architecture based on the TARGET environment variable and sets appropriate definitions and variables.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/libunwind/v1.7.2/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif ('$ENV{TARGET}' STREQUAL 'x86_64-linux-gnu')\n  set(TARGET_AMD64 1)\n  set(arch x86_64)\n  add_definitions(-D__x86_64__)\n  add_definitions(-D__amd64__)\n  add_definitions(-D__linux__)\nelseif ('$ENV{TARGET}' STREQUAL 'aarch64-linux-gnu')\n  set(TARGET_AARCH64 1)\n  set(arch aarch64)\n  add_definitions(-D__aarch64__)\n  add_definitions(-D__linux__)\nelseif ('$ENV{TARGET}' STREQUAL 'arm-linux-gnueabihf')\n  set(TARGET_ARM 1)\n  set(arch arm)\n  add_definitions(-D__arm__)\n  add_definitions(-D__linux__)\nelseif ('$ENV{TARGET}' STREQUAL 's390x-linux-gnu')\n  set(TARGET_S390X 1)\n  set(arch s390x)\n  add_definitions(-D__s390x__)\n  add_definitions(-D__linux__)\nelseif ('$ENV{TARGET}' STREQUAL 'loongarch64-linux-gnu')\n  set(TARGET_LOONGARCH64 1)\n  set(arch loongarch64)\n  add_definitions(-D__loongarch64)\n  add_definitions(-D__linux__)\nelse ()\n  message(FATAL_ERROR \"Unrecognize value in environment variable TARGET\")\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Building Boost.Locale with ICU Backend Only on Windows\nDESCRIPTION: Command to build Boost.Locale library on Windows using only the ICU backend, disabling WinAPI and std backends.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/doc/building_boost_locale.txt#2025-04-22_snippet_4\n\nLANGUAGE: batch\nCODE:\n```\n.\\bjam boost.locale.winapi=off boost.locale.std=off -sICU_PATH=c:\\icu46 --with-locale stage\n```\n\n----------------------------------------\n\nTITLE: Implementing Unpack Join Function in C++\nDESCRIPTION: Defines the unpack_join function template in the detail namespace. This function handles unpacking and joining multiple sequences before applying them to the given function.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/unpack.hpp.txt#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nnamespace detail {\n\ntemplate<class F, class... Sequences>\nconstexpr auto unpack_join(F&& f, Sequences&&... s) BOOST_HOF_RETURNS\n(\n    boost::hof::pack_join(unpack_simple(boost::hof::pack_forward, BOOST_HOF_FORWARD(Sequences)(s))...)(BOOST_HOF_FORWARD(F)(f))\n);\n\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Legacy Constructor Hook Function in C++\nDESCRIPTION: Declaration of the deprecated `hook_outcome_construction` function used for ADL-discovered constructor hooks in Boost.Outcome library versions prior to 2.2.0. This function is invoked by implicit constructors of `basic_outcome` and can be overridden using Argument Dependent Lookup.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/functions/hooks/hook_outcome_construction2.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nvoid hook_outcome_construction(T *, U &&, V &&) noexcept\n```\n\n----------------------------------------\n\nTITLE: Compiling Project with LZ4 DLL - Bash\nDESCRIPTION: Generic compilation command showing how to link a project with LZ4 DLL using gcc/MinGW.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/lz4/lib/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$(CC) $(CFLAGS) -Iinclude/ test-dll.c -o test-dll dll\\liblz4.dll\n```\n\n----------------------------------------\n\nTITLE: Defining Template iter_fold_if in C++\nDESCRIPTION: The `iter_fold_if` template structure performs iterative folding over a sequence, applying the `ForwardOp` operation while iterating based on `ForwardPred`. An optional `BackwardOp` can also be specified for backward traversing based on `BackwardPred`. Required headers include `<boost/mpl/iter_fold_if.hpp>`. It is crucial for situations where conditional logic determines iteration behavior.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/iter_fold_if.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      typename Sequence\n    , typename State\n    , typename ForwardOp\n    , typename ForwardPred\n    , typename BackwardOp = |unspecified|\n    , typename BackwardPred = |unspecified|\n    >\nstruct iter_fold_if\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Shift Left Template Declaration\nDESCRIPTION: Template structure declaration for the shift_left metafunction that performs bitwise left shift operations.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/shift_left.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate< \n      typename T\n    , typename Shift\n    >\nstruct shift_left\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for HTTP Server Coroutine Example\nDESCRIPTION: Sets up a CMake build configuration for a coroutine-based HTTP server example. The configuration groups source files, creates an executable target, links required libraries (Asio and Beast), and organizes the project structure.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/beast/example/http/server/coro/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nGroupSources(include/boost/beast beast)\nGroupSources(example/http/server/coro \"/\")\n\nadd_executable (http-server-coro\n    ${BOOST_BEAST_FILES}\n    Jamfile\n    http_server_coro.cpp\n)\n\ntarget_link_libraries(http-server-coro\n    lib-asio\n    lib-beast)\n\nset_property(TARGET http-server-coro PROPERTY FOLDER \"example-http-server\")\n```\n\n----------------------------------------\n\nTITLE: Configuring TCL Word-Keyword Mappings in Doxygen\nDESCRIPTION: Setting for defining TCL-specific word-keyword mappings for documentation. The default is empty.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/sort/doc/doxygen/sort_doxyfile.txt#2025-04-22_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nTCL_SUBST              = \n```\n\n----------------------------------------\n\nTITLE: Configuring Inline Info Display in Doxygen\nDESCRIPTION: This option specifies whether a tag [inline] is inserted in the documentation for inline members. Setting it to YES will show the inline tag.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/sort/doc/doxygen/sort_doxyfile.txt#2025-04-22_snippet_42\n\nLANGUAGE: Doxygen\nCODE:\n```\n\"INLINE_INFO            = YES\"\n```\n\n----------------------------------------\n\nTITLE: Defining Inserter Class Template in C++\nDESCRIPTION: Declaration of the inserter class template with State and Operation template parameters. It defines two typedefs: state and operation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/inserter_.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      typename State\n    , typename Operation\n    >\nstruct inserter\n{\n    typedef State state;\n    typedef Operation operation;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Class Extraction in Doxygen\nDESCRIPTION: Setting to include locally-defined classes in the documentation. When enabled, classes defined in source files are included. When disabled, only header-defined classes are included. Default is YES.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/sort/doc/doxygen/sort_doxyfile.txt#2025-04-22_snippet_28\n\nLANGUAGE: text\nCODE:\n```\nEXTRACT_LOCAL_CLASSES  = YES\n```\n\n----------------------------------------\n\nTITLE: Creating Boost DLL Interface Library\nDESCRIPTION: This snippet adds an interface library for Boost DLL and creates an alias for it. This library can be included by other targets without depending on compilation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/dll/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(boost_dll INTERFACE)\nadd_library(Boost::dll ALIAS boost_dll)\n```\n\n----------------------------------------\n\nTITLE: Channel Assignment Example\nDESCRIPTION: This code snippet demonstrates channel assignment between compatible `packed_channel_value` instances. It shows that assignment is possible between channels with the same value type, while attempting to assign incompatible channels results in a compilation error (commented out in the code).\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/channel.rst#2025-04-22_snippet_11\n\nLANGUAGE: cpp\nCODE:\n```\n  packed_channel_value<5> channel_6bit = channel1;\n  channel_6bit = channel3;\n\n  // compile error: Assignment between incompatible channels\n  //channel_6bit = channel2;\n```\n\n----------------------------------------\n\nTITLE: Default Constructor for Distributed Iterator Property Map in C++\nDESCRIPTION: Default constructor for distributed iterator property map that creates an invalid map that must be reassigned before use.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/distributed_property_map.rst#2025-04-22_snippet_18\n\nLANGUAGE: cpp\nCODE:\n```\niterator_property_map();\n```\n\n----------------------------------------\n\nTITLE: Installing Sphinx and Extensions for Boost.GIL Documentation\nDESCRIPTION: This code snippet demonstrates how to navigate to the Boost root directory and install the required Sphinx packages using a requirements file, specifically for the Boost.GIL documentation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/README.md#2025-04-22_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n(.venv)$ cd boost-root\n(.venv)$ pip install -r libs/gil/doc/requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost.Locale iconv Backend\nDESCRIPTION: Sets up the iconv backend for Boost.Locale if enabled.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif(BOOST_LOCALE_ENABLE_ICONV)\n\n  find_package(Iconv REQUIRED)\n\n  target_compile_definitions(boost_locale PRIVATE BOOST_LOCALE_WITH_ICONV=1)\n  target_link_libraries(boost_locale PRIVATE Iconv::Iconv)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation Settings for ARM and AArch64 in CMake\nDESCRIPTION: Adds specific compiler definitions and include directories for ARM and AArch64 targets to handle architecture-specific requirements.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/libunwind/v1.7.2/src/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(TARGET_ARM)\n    # Ensure that the remote and local unwind code can reside in the same binary without name clashing\n    add_definitions(\"-Darm_search_unwind_table=UNW_OBJ(arm_search_unwind_table)\")\n    # We compile code with -std=c99 and the asm keyword is not recognized as it is a gnu extension\n    add_definitions(-Dasm=__asm__)\n    # The arm sources include ex_tables.h from include/tdep-arm without going through a redirection\n    # in include/tdep like it works for similar files on other architectures. So we need to add\n    # the include/tdep-arm to include directories\n    include_directories(../include/tdep-arm)\nelseif(TARGET_AARCH64)\n    # We compile code with -std=c99 and the asm keyword is not recognized as it is a gnu extension\n    add_definitions(-Dasm=__asm__)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining greater Metafunction Template in C++\nDESCRIPTION: Declaration of the 'greater' metafunction template for comparing two types. It returns an unspecified type that resolves to a boolean integral constant.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/greater.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      typename T1\n    , typename T2\n    >\nstruct greater\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Optimizing Unsigned Overflow Checking in C\nDESCRIPTION: This code snippet demonstrates an optimization for unsigned overflow checking in C. It uses a fast initial test to potentially avoid a more expensive division operation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/interprocess/proj/to-do.txt#2025-04-22_snippet_2\n\nLANGUAGE: C\nCODE:\n```\n# define GC_SIZE_MAX (~(size_t)0)\n #endif\n+#define GC_SQRT_SIZE_MAX ((1U << (WORDSZ / 2)) - 1)\n+\nvoid * calloc(size_t n, size_t lb)\n{\n-    if (lb && n > GC_SIZE_MAX / lb)\n+    if ((lb | n) > GC_SQRT_SIZE_MAX /* fast initial test */\n+        && lb && n > GC_SIZE_MAX / lb)\n       return NULL;\n```\n\n----------------------------------------\n\nTITLE: Compiling ArangoDB Benchmark Programs in C++\nDESCRIPTION: These are the C++ source files for the ArangoDB benchmark programs. They need to be compiled separately and will display detailed benchmark information on the screen in a compact mode when run.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/sort/benchmark/parallel/README.txt#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nbenchmark_objects.cpp\nbenchmark_strings.cpp\nbenchmark_numbers.cpp\n```\n\n----------------------------------------\n\nTITLE: Conditional Test Directory Inclusion\nDESCRIPTION: This snippet checks if testing is enabled and if the test directory exists. If both conditions are met, it adds the test subdirectory to the build process, allowing for unit tests to be included.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/core/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(BUILD_TESTING AND EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/test/CMakeLists.txt\")\n\n  add_subdirectory(test)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Include Directories for arango_replication2_pure\nDESCRIPTION: This command specifies the include directories for `arango_replication2_pure`, which are the same as `arango_replication2`. It includes the `arangod` directory and the enterprise include directory.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/Replication2/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(arango_replication2_pure PUBLIC\n        \"${PROJECT_SOURCE_DIR}/arangod\"\n        \"${PROJECT_SOURCE_DIR}/${ENTERPRISE_INCLUDE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Using Hugo Children Shortcode in Markdown\nDESCRIPTION: This snippet demonstrates how to use Hugo's children shortcode to generate navigation for child pages in the documentation. The shortcode is configured to display descriptions and limit the depth to 2 levels.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{{% children description=\"true\" depth=\"2\" %}}\n```\n\n----------------------------------------\n\nTITLE: CMake Project Setup and Library Definition\nDESCRIPTION: This snippet sets the minimum required CMake version, defines the project with its version (BOOST_SUPERPROJECT_VERSION), and adds a library named 'boost_preprocessor' of type INTERFACE. It also creates an alias for the library, 'Boost::preprocessor'.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/preprocessor/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.16)\n\nproject(boost_preprocessor VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n\nadd_library(boost_preprocessor INTERFACE)\nadd_library(Boost::preprocessor ALIAS boost_preprocessor)\n```\n\n----------------------------------------\n\nTITLE: ASIO async_result Specialization for Outcome Integration (Part 1)\nDESCRIPTION: First part of the implementation that teaches ASIO about the Outcome library by specializing the async_result template for the custom completion token wrapper.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/recipes/asio-integration.md#2025-04-22_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\nnamespace asio\n{\n  namespace detail\n  {\n    // Some helper type sugar\n    template <typename T>\n    struct result_signature\n    {\n      using type = void(::outcome::result<T, error_code>);\n    };\n    \n    // Create a rebind_t which maps void(error_code, T) to void(result<T, error_code>)\n    template <typename R, typename... Args>\n    struct result_signature<R(error_code, Args...)>\n    {\n      using type = void(::outcome::result<std::tuple<Args...>, error_code>);\n    };\n    \n    template <typename R>\n    using result_signature_t = typename result_signature<R>::type;\n  }\n  \n  // Tell ASIO about a new kind of completion token it ought to recognise\n  template <typename CompletionToken, typename Signature>\n  class async_result<as_result_t<CompletionToken>, Signature> :\n    // We will inherit all the defaults from the async_result of the supplied completion\n    // token, but overriding the completion handler type and return type.\n    public async_result<CompletionToken, detail::result_signature_t<Signature>>\n```\n\n----------------------------------------\n\nTITLE: Configuring SEPP Build using CMake\nDESCRIPTION: This snippet uses CMake to configure the build of the SEPP executable if the BUILD_SEPP option is enabled. It specifies the source files to compile, the include directories to use, and the libraries to link against.  The executable is named 'sepp' and is excluded from the ALL target by default.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/sepp/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\noption(BUILD_SEPP \"Build SEPP (Storage Engine Performance Prediction)\" OFF)\n\nif (BUILD_SEPP)\n  add_executable(sepp EXCLUDE_FROM_ALL\n    main.cpp\n    CacheOptions.cpp\n    Execution.cpp\n    ExecutionThread.cpp\n    Runner.cpp\n    RocksDBOptions.cpp\n    Server.cpp\n    ValueGenerators/RandomStringGenerator.cpp\n    Workloads/EdgeCache.cpp\n    Workloads/GetByPrimaryKey.cpp\n    Workloads/InsertDocuments.cpp\n    Workloads/IterateDocuments.cpp\n    Workloads/WriteWriteConflict.cpp)\n\n  target_include_directories(sepp PRIVATE\n    .\n    ${PROJECT_SOURCE_DIR}/arangod)\n\n  target_link_libraries(sepp\n    arango_rocksdb\n    arangoserver\n    rocksdb\n    snappy\n    boost_boost)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring ArangoDB Inspection Interface Library\nDESCRIPTION: Creates and configures an interface library named arango_inspection with required dependencies including date_interface and fmt::fmt. Sets up the include directories for the library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/lib/Inspection/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(arango_inspection INTERFACE)\n\ntarget_link_libraries(arango_inspection\n  INTERFACE\n    date_interface\n    fmt::fmt)\n\ntarget_include_directories(arango_inspection\n  INTERFACE\n  include)\n```\n\n----------------------------------------\n\nTITLE: Creating the arango_zkd Static Library in CMake\nDESCRIPTION: Defines a static library named arango_zkd that includes ZkdHelper.cpp source file. This library appears to be part of the ArangoDB database system and provides Zero Knowledge Database (ZKD) helper functionality.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/Zkd/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(arango_zkd STATIC\n  ZkdHelper.cpp)\n```\n\n----------------------------------------\n\nTITLE: Running Snowball Module Generation Script\nDESCRIPTION: Command to generate the modules.h file for Snowball stemming library integration\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/README_maintainers.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nlibstemmer/mkmodules.pl temp_modules.h . libstemmer/modules.txt libstemmer/mkinc.mak\n```\n\n----------------------------------------\n\nTITLE: Adding Jemalloc Build Dependency in CMake\nDESCRIPTION: Conditionally adds a build dependency on jemalloc_build when the jemalloc memory allocator is enabled.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/CMakeLists.txt#2025-04-22_snippet_30\n\nLANGUAGE: CMake\nCODE:\n```\nif (USE_JEMALLOC)\n  add_dependencies(arangodbtests jemalloc_build)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring Interface Library for Stacktrace Components\nDESCRIPTION: Creates an interface library named arango_async_registry_stacktrace with header files and sets include directories for the ArangoDB project\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/AsyncRegistryServer/Stacktrace/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(arango_async_registry_stacktrace INTERFACE\n  depth_first.h\n  forest.h)\n```\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(arango_async_registry_stacktrace\n  INTERFACE\n  ${PROJECT_SOURCE_DIR}/arangod)\n```\n\n----------------------------------------\n\nTITLE: Example Commit Message Format\nDESCRIPTION: Demonstrates a structured commit message with a tag, short description, and detailed explanation of changes made\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hana/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[Searchable] Refactor the interface\n\n- Rename elem to contains\n- Rename subset to is_subset, and make is_subset applicable in infix notation\n- Add the at_key method\n- operator[] is now bound to at_key instead of find\n```\n\n----------------------------------------\n\nTITLE: Defining Named Parameters with Boost Parameter Library\nDESCRIPTION: Example of defining named parameters using BOOST_PARAMETER_NAME macro with different parameter types (in, in_out, consume) in a shared namespace.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_51\n\nLANGUAGE: cpp\nCODE:\n```\n    |BOOST_PARAMETER_NAME|_\\((_lrc, kw) in(lrc))\n    |BOOST_PARAMETER_NAME|_\\((_lr, kw) in_out(lr))\n    |BOOST_PARAMETER_NAME|_\\((_rrc, kw) in(rrc))\n    |BOOST_PARAMETER_NAME|_\\((_rr, kw) consume(rr))\n```\n\n----------------------------------------\n\nTITLE: Declaring Print Function for Basic Outcome in C++\nDESCRIPTION: Function signature for printing a human-readable representation of a basic_outcome object. It takes a const reference to a basic_outcome and returns a std::string. This function is not overridable and is always available in the BOOST_OUTCOME_V2_NAMESPACE.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/functions/iostream/outcome_print.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nstd::string print(const basic_outcome<T, EC, EP, NoValuePolicy> &)\n```\n\n----------------------------------------\n\nTITLE: Crash Handler Signal Management - C++\nDESCRIPTION: This section outlines the handling of crash signals in the ArangoDB project, detailing the interaction between 'logCrashInfo' and 'LOG_TOPIC', as well as the crash handler mechanism.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tsan_arangodb_suppressions.txt#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\n// logCrashInfo calls LOG_TOPIC which in turn calls std::string::reserve\nsignal:lib/Basics/CrashHandler.cpp\nsignal:crashHandlerSignalHandler\n\nsignal:c_exit_handler\n```\n\n----------------------------------------\n\nTITLE: Using BOOST_OUTCOME_TRY_FAILURE_LIKELY Macro in C++\nDESCRIPTION: Macro for evaluating expressions that return a result type, with built-in failure handling. Creates a temporary variable to store the expression result, with customization points for value extraction and error handling. Optimized for cases where failure is more likely than success.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/macros/try_failure_likely.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nBOOST_OUTCOME_TRY_FAILURE_LIKELY(var, expr)\n```\n\n----------------------------------------\n\nTITLE: Linking External Dependencies\nDESCRIPTION: Links required external libraries to the Fuerte target including nghttp2, llhttp, boost_system, and others.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/fuerte/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(fuerte PUBLIC\n  nghttp2\n  llhttp\n  boost_system\n  absl::strings\n  velocypack)\n```\n\n----------------------------------------\n\nTITLE: Defining vertex_list_adaptor class template\nDESCRIPTION: This code snippet defines the `vertex_list_adaptor` class template, which adapts a distributed vertex list graph. The class takes a graph and a global index map as template parameters and provides a constructor.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/vertex_list_adaptor.rst#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n  template<typename Graph, typename GlobalIndexMap>\n  class vertex_list_adaptor\n  {\n  public:\n    vertex_list_adaptor(const Graph& g, \n                        const GlobalIndexMap& index_map = GlobalIndexMap());\n  };\n```\n\n----------------------------------------\n\nTITLE: POSIX Open Function Declaration\nDESCRIPTION: POSIX file opening function demonstrating errno-based error handling pattern\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/leaf/doc/whitepaper.md#2025-04-22_snippet_9\n\nLANGUAGE: c\nCODE:\n```\nint open(const char *pathname, int flags);\n```\n\n----------------------------------------\n\nTITLE: Example Usage of begin Metafunction with Vector in C++\nDESCRIPTION: Demonstrates using the begin metafunction with a vector of unsigned integer types, as well as with a non-sequence type (int). Shows how to access the first element and verify the expected behavior.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/begin.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ntypedef vector< unsigned char,unsigned short,\n    unsigned int,unsigned long > unsigned_types;\n\ntypedef begin<unsigned_types>::type iter;\nBOOST_MPL_ASSERT(( is_same< deref<iter>::type, unsigned char > ));\n\nBOOST_MPL_ASSERT(( is_same< begin<int>::type, void\\_ > ));\n```\n\n----------------------------------------\n\nTITLE: Determining ST Connectivity with Color and Owner Maps - C++\nDESCRIPTION: This version of the 'st_connected' function incorporates both a color map and an owner map, providing a comprehensive connectivity check in more complex distributed graph scenarios. It caters to cases where the ownership of vertices is significant in the traversal.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/st_connected.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nnamespace graph { namespace distributed {\n    template<typename DistributedGraph, typename ColorMap, typename OwnerMap>\n    bool \n    st_connected(const DistributedGraph& g, \n                 typename graph_traits<DistributedGraph>::vertex_descriptor s,\n                 typename graph_traits<DistributedGraph>::vertex_descriptor t,\n                 ColorMap color, OwnerMap owner)\n  } }\n```\n\n----------------------------------------\n\nTITLE: Converting Grayscale Pixels to RGB in C++\nDESCRIPTION: This snippet illustrates a template function that converts a grayscale pixel to RGB format. It ensures type safety through static assertions and employs GIL concepts for pixel handling.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/examples.rst.txt#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <typename GrayPixel, typename RGBPixel>\nvoid gray_to_rgb(const GrayPixel& src, RGBPixel& dst)\n{\ngil_function_requires<PixelConcept<GrayPixel> >();\ngil_function_requires<MutableHomogeneousPixelConcept<RGBPixel> >();\n\ntypedef typename color_space_type<GrayPixel>::type gray_cs_t;\nstatic_assert(boost::is_same<gray_cs_t,gray_t>::value, \"\");\n\ntypedef typename color_space_type<RGBPixel>::type  rgb_cs_t;\nstatic_assert(boost::is_same<rgb_cs_t,rgb_t>::value, \"\");\n\ntypedef typename channel_type<GrayPixel>::type gray_channel_t;\ntypedef typename channel_type<RGBPixel>::type  rgb_channel_t;\n\ngray_channel_t gray = get_color(src,gray_color_t());\nstatic_fill(dst, channel_convert<rgb_channel_t>(gray));\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring in_place_type_t Template in C++\nDESCRIPTION: Defines a template type in_place_type_t<T> that either uses the standard library implementation or provides a local emulation based on the BOOST_OUTCOME_USE_STD_IN_PLACE_TYPE macro. Located in boost/outcome/config.hpp and defined in the BOOST_OUTCOME_V2_NAMESPACE namespace.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/in_place_type_t.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nin_place_type_t<T>\n```\n\n----------------------------------------\n\nTITLE: Including Contains Header in C++\nDESCRIPTION: Header file inclusion for using the 'contains' algorithm in Boost MPL.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/contains.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/contains.hpp>\n```\n\n----------------------------------------\n\nTITLE: Using empty metafunction in C++\nDESCRIPTION: Demonstrates how to use the empty metafunction to check if sequences are empty. It shows examples with an empty range and a non-empty vector of types.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/empty.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntypedef range_c<int,0,0> empty_range;\ntypedef vector<long,float,double> types;\n\nBOOST_MPL_ASSERT( empty<empty_range> );\nBOOST_MPL_ASSERT_NOT( empty<types> );\n```\n\n----------------------------------------\n\nTITLE: Using METIS Partition for Graph Distribution in C++\nDESCRIPTION: Illustrates how to utilize the metis_distribution class with a METIS partition file to distribute a graph's adjacency list across processes. It highlights the process of loading partitioning data and applying it to the graph.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/metis.rst#2025-04-22_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\nstd::ifstream in_graph(argv[1]);\nmetis_reader reader(in_graph);\n\nstd::ifstream in_partitions(argv[2]);\nmetis_distribution dist(in_partitions, process_id(pg));\nGraph g(reader.begin(), reader.end(),\n        reader.weight_begin(),\n        reader.num_vertices(),\n        pg,\n        dist);\n```\n\n----------------------------------------\n\nTITLE: Declaring outcome_throw_as_system_error_with_payload for Boost Error Code Enums in C++\nDESCRIPTION: Function declaration for a specialization of outcome_throw_as_system_error_with_payload that handles Boost error code and condition enums. It constructs and throws a boost::system::system_error using the provided enum value.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/functions/policy/outcome_throw_as_system_error_with_payload_boost_enum.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nvoid outcome_throw_as_system_error_with_payload(BoostErrorCodeEnum &&)\n```\n\n----------------------------------------\n\nTITLE: In Edges Iterator Implementation in C++\nDESCRIPTION: Returns iterator pair for accessing incoming edges to a vertex. Only available for bidirectional graphs. Target vertex must be local.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/distributed_adjacency_list.rst#2025-04-22_snippet_13\n\nLANGUAGE: C++\nCODE:\n```\nstd::pair<in_edge_iterator, in_edge_iterator>\nin_edges(vertex_descriptor v, const adjacency_list& g);\n```\n\n----------------------------------------\n\nTITLE: Including Vector Headers in C++\nDESCRIPTION: Shows the different ways to include the vector header files, including both variadic and numbered forms.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/vector.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/vector.hpp>\n#include <boost/mpl/vector/vector_n.hpp>\n```\n\n----------------------------------------\n\nTITLE: Dereferencing a Forward Iterator in C++\nDESCRIPTION: Demonstrates the syntax for dereferencing a forward iterator 'i'. The result type is any type, and the operation has amortized constant time complexity.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/ForwardIterator.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntypedef deref<i>::type j;\n```\n\n----------------------------------------\n\nTITLE: Color Convert View Function Implementation in C++ GIL\nDESCRIPTION: This snippet provides an inline function to create a color-converted image view from a source view. The function utilizes the previously defined type for color converted view, making it easier to apply custom color converters on image views in GIL. It highlights the flexibility of GIL in handling image processing transformations.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/extending.rst.txt#2025-04-22_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <typename DstP, typename View> inline\ntypename color_converted_view_type<View,DstP>::type color_convert_view(const View& src)\n{\n    return color_converted_view_type<View,DstP>::make(src);\n}\n```\n\n----------------------------------------\n\nTITLE: Reformatting Code with Local Shell Script for Clang-Format\nDESCRIPTION: This snippet outlines the steps needed to manually reformat code using a local shell script. It indicates the necessary setup before the script can be executed, including prerequisites like Docker and Git installation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/STYLEGUIDE.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd arangodb\n./scripts/clang-format.sh\n```\n\n----------------------------------------\n\nTITLE: Defining Version Numbers in ArangoDB Project\nDESCRIPTION: A comma-separated list of version numbers, possibly representing different releases or components of the ArangoDB project.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/spirit/example/support/multi_pass.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n1.0,2.0,3.0\n```\n\n----------------------------------------\n\nTITLE: LZ4 Speed Test Script Arguments\nDESCRIPTION: Complete list of available command-line arguments for the test-lz4-speed.py script, including both required and optional parameters.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/lz4/tests/README.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\npositional arguments:\n  testFileNames         file names list for speed benchmark\n  emails                list of e-mail addresses to send warnings\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --message MESSAGE     attach an additional message to e-mail\n  --lowerLimit LOWERLIMIT\n                        send email if speed is lower than given limit\n  --maxLoadAvg MAXLOADAVG\n                        maximum load average to start testing\n  --lastCLevel LASTCLEVEL\n                        last compression level for testing\n  --sleepTime SLEEPTIME\n                        frequency of repository checking in seconds\n```\n\n----------------------------------------\n\nTITLE: Defining R-MAT Iterator Class Template in C++\nDESCRIPTION: This snippet defines the rmat_iterator class template, which generates R-MAT graphs suitable for initializing graph structures. It includes methods for iteration and constructors that specify the generation parameters including vertex count and edge count.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/rmat_generator.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<typename RandomGenerator, typename Graph>\nclass rmat_iterator\n{\npublic:\n    typedef std::input_iterator_tag iterator_category;\n    typedef std::pair<vertices_size_type, vertices_size_type> value_type;\n    typedef const value_type& reference;\n    typedef const value_type* pointer;\n    typedef void difference_type;\n\n    rmat_iterator();\n    rmat_iterator(RandomGenerator& gen, vertices_size_type n, \n                  edges_size_type m, double a, double b, double c, \n                  double d, bool permute_vertices = true);\n    // Iterator operations\n    reference operator*() const;\n    pointer operator->() const;\n    rmat_iterator& operator++();\n    rmat_iterator operator++(int);\n    bool operator==(const rmat_iterator& other) const;\n    bool operator!=(const rmat_iterator& other) const;\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Executable\nDESCRIPTION: Creates an executable named `arangodbtests_inspection`. `EXCLUDE_FROM_ALL` prevents this executable from being built by default when building the entire project.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/Inspection/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(arangodbtests_inspection\n  EXCLUDE_FROM_ALL)\n```\n\n----------------------------------------\n\nTITLE: Setting C++ Standard Based on CMake Version\nDESCRIPTION: Determines whether to use C++17 or C++14 standard for the tz library based on the CMake minor version. For minor versions greater than 7, it uses C++17; otherwise, it defaults to C++14.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/date/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif ( ${CMAKE_MINOR_VERSION} GREATER 7 )\n  set( TZ_CXX_STANDARD 17 )\nelse( )\n  set( TZ_CXX_STANDARD 14 )\nendif( )\n```\n\n----------------------------------------\n\nTITLE: Observing Values with Reference in C++\nDESCRIPTION: Wide contract lvalue reference observer method that returns a reference to any present value. Invokes NoValuePolicy::wide_value_check() before returning the reference. Special handling for void value_type with const overload only.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/basic_result/value_lvalue.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nvalue_type &value() &\n```\n\n----------------------------------------\n\nTITLE: Demo of Legal Function Calls with Boost Parameter Library\nDESCRIPTION: Examples of different ways to call a function defined with BOOST_PARAMETER_BASIC_MEMBER_FUNCTION, including positional arguments, composed arguments, named arguments, and deduced arguments.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_53\n\nLANGUAGE: cpp\nCODE:\n```\n    B::evaluate(  // positional arguments\n        lvalue_const_bitset<0>()\n      , lvalue_bitset<1>()\n      , rvalue_const_bitset<2>()\n      , rvalue_bitset<3>()\n    );\n    B::evaluate(  // positional arguments\n        lvalue_const_bitset<0>()\n      , lvalue_bitset<1>()\n    );\n    B::evaluate((  // composed arguments\n        _rr0 = rvalue_bitset<3>()\n      , _lrc0 = lvalue_const_bitset<0>()\n      , _lr0 = lvalue_bitset<1>()\n      , _rrc0 = rvalue_const_bitset<2>()\n    ));\n    B::evaluate(  // named arguments\n        _rr0 = rvalue_bitset<3>()\n      , _lrc0 = lvalue_const_bitset<0>()\n      , _lr0 = lvalue_bitset<1>()\n      , _rrc0 = rvalue_const_bitset<2>()\n    );\n    B::evaluate(  // named arguments\n        _lr0 = lvalue_bitset<1>()\n      , _lrc0 = lvalue_const_bitset<0>()\n    );\n\n    B::evaluate(  // deduced arguments\n        rvalue_bitset<3>()\n      , lvalue_const_bitset<0>()\n      , lvalue_bitset<1>()\n      , rvalue_const_bitset<2>()\n    );\n```\n\n----------------------------------------\n\nTITLE: Defining reStructuredText Directives for MPL Manual\nDESCRIPTION: Sets up various reStructuredText directives and substitutions for formatting the MPL reference manual, including copyright notices, table of contents, and text replacements.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/refmanual.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. raw:: latex\n\n   \\setcounter{secnumdepth}{2}\n   \\setcounter{tocdepth}{2}\n\n\n.. TOC copyright:\n.. copyright:: Copyright ©  2001-2009 Aleksey Gurtovoy and David Abrahams\n   Distributed under the Boost Software License, Version 1.0. (See accompanying\n   file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)\n    \n.. contents:: Table of Contents\n    :depth: 3\n\n\n.. |Boost.Bind| replace:: `Boost.Bind <http://www.boost.org/libs/bind/bind.html>`__\n.. |Boost.Lambda| replace:: `Boost.Lambda <http://www.boost.org/libs/lambda/doc/index.html>`__\n\n.. role:: refentry(literal)\n\n.. |t1| replace:: \\ *t*\\ :sub:`1`\n.. |t2| replace:: \\ *t*\\ :sub:`2`\n.. |tn| replace:: \\ *t*\\ :sub:`n`\n.. workaround weird substitution bug (used to work!):\n.. |t1...tn| replace:: \\ *t*\\ :sub:`1`,\\ *t*\\ :sub:`2`,... |tn|\n\n.. |p1...pn| replace:: \\ *p*\\ :sub:`1`,\\ *p*\\ :sub:`2`,... \\ *p*\\ :sub:`n`\n\n\n.. |c1| replace:: \\ *c*\\ :sub:`1`\n.. |c2| replace:: \\ *c*\\ :sub:`2`\n.. |cn| replace:: \\ *c*\\ :sub:`n`\n.. workaround weird substitution bug (works with t's!):\n.. |c1...cn| replace:: \\ *c*\\ :sub:`1`,\\ *c*\\ :sub:`2`,... \\ *c*\\ :sub:`n`\n\n.. |x1...xn| replace:: *x*\\ :sub:`1`,\\ *x*\\ :sub:`2`,... \\ *x*\\ :sub:`n`\n\n.. |...| replace:: *...*\n.. |T1...Tn| replace:: ``T1``, ``T2``,... ``Tn``\n\n.. |F1...Fn| replace:: ``F1``, ``F2``,... ``Fn``\n.. |f1...fn| replace:: ``f1``, ``f2``,... ``fn``\n\n.. |A1...An| replace:: ``A1``,... ``An``\n.. |a1...an| replace:: ``a1``,... ``an``\n\n\n\n.. |begin/end<Sequence>| replace:: [``begin<Sequence>::type``, ``end<Sequence>::type``)\n.. |begin/end<Seq>| replace:: [``begin<Seq>::type``, ``end<Seq>::type``)\n.. |begin/end<Seq1>| replace:: [``begin<Seq1>::type``, ``end<Seq1>::type``)\n.. |begin/end<Seq2>| replace:: [``begin<Seq2>::type``, ``end<Seq2>::type``)\n\n.. |begin/end<s>| replace:: [``begin<s>::type``, ``end<s>::type``)\n.. |begin/end<v>| replace:: [``begin<v>::type``, ``end<v>::type``)\n.. |begin/end<s1>| replace:: [``begin<s1>::type``, ``end<s1>::type``)\n.. |begin/end<s2>| replace:: [``begin<s2>::type``, ``end<s2>::type``)\n\n.. |is_same| replace:: is_same\n.. |unspecified| replace:: *unspecified*\n.. |unspecified-token-seq| replace:: *unspecified token sequence*\n\n.. |idic| replace:: *implementation-defined integral constant*\n\n.. |true if and only if| replace:: A boolean `Integral Constant`_ ``c`` such that\n   ``c::value == true`` if and only if \n\n\n.. |O(1)| replace:: *O(1)*\n\n.. |--| unicode:: U+02014 .. EM DASH\n\n\n.. |Note:| replace:: [*Note:*\n.. |-- end note| replace:: |--| *end note*\\]\n\n\n.. |Semantics disclaimer...| replace:: The semantics of an expression are defined only \n   where they differ from, or are not defined in\n\n\n.. |numeric metafunction note| replace:: The requirements listed in this specification \n   are the ones imposed by the default implementation. See |Numeric Metafunction| concept \n   for the details on how to provide an implementation for a user-defined numeric type \n   that does not satisfy the `Integral Constant`_ requirements.\n   \n\n.. \"[*Note:*\" instead of \"|Note:|\" to workaround another subst. bug\n\n\n.. |preprocessed headers disclaimer| replace:: [*Note:* Overriding will take effect \n   *only* if the library is configured not to use |preprocessed headers|. See \n   |BOOST_MPL_CFG_NO_PREPROCESSED_HEADERS| for more information. |--| *end note*\\]\n\n.. |transformation algorithm disclaimer| replace:: \n   [*Note:* This wording applies to a no-inserter version(s) of the algorithm. See the \n   `Expression semantics` subsection for a precise specification of the algorithm's \n   details in all cases |--| *end note*\\]\n\n.. |In the following table...| replace:: In the following table and subsequent specifications, \n```\n\n----------------------------------------\n\nTITLE: Including reverse_fold Header in C++\nDESCRIPTION: Shows the header file that needs to be included to use the reverse_fold algorithm in C++.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/reverse_fold.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/reverse_fold.hpp>\n```\n\n----------------------------------------\n\nTITLE: Running ArangoJS Driver Tests\nDESCRIPTION: Command for running JavaScript driver tests for ArangoDB, specifying the source directory, test case, and cluster configuration.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/CONTRIBUTING.md#2025-04-22_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/unittest js_driver --jssource ../arangojs/ \\\n    --testCase 'kills the given query' \\\n    --cluster true\n```\n\n----------------------------------------\n\nTITLE: Generating LZ4 Manual Example\nDESCRIPTION: Example commands showing how to compile the program and generate the LZ4 manual with specific version and file paths.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/lz4/contrib/gen_manual/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake\n./gen_manual.exe 1.7.3 ../../lib/lz4.h lz4_manual.html\n```\n\n----------------------------------------\n\nTITLE: Setting Runtime Options for ArangoDB Memory Allocator\nDESCRIPTION: This snippet demonstrates how to embed run-time options for the memory allocator using the --with-malloc-conf option. In this example, it changes the default decay time to 30 seconds.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/jemalloc/jemalloc/INSTALL.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n--with-malloc-conf=decay_ms:30000\n```\n\n----------------------------------------\n\nTITLE: Defining insert Metafunction Template for Associative Sequences in C++\nDESCRIPTION: Defines an overloaded template structure for the 'insert' metafunction, specifically for inserting an element of type T into an Extensible Associative Sequence.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/insert.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ntemplate< \n      typename Sequence\n    , typename T \n>\nstruct insert\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Declaring try_operation_has_value function template in C++\nDESCRIPTION: Default implementation that delegates to the .has_value() member function of the input type. Requires that the type supports the .has_value() member function call. Located in boost/outcome/try.hpp header.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/functions/try_operation_has_value.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nbool try_operation_has_value(X)\n```\n\n----------------------------------------\n\nTITLE: Configuring Compiler Flags for AVX and AVX2 Support\nDESCRIPTION: Checks for and configures compiler flags to enable AVX and AVX2 support if required.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/snappy/snappy-1.1.9/CMakeLists.txt#2025-04-22_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(CheckCXXCompilerFlag)\nCHECK_CXX_COMPILER_FLAG(\"/arch:AVX\" HAVE_VISUAL_STUDIO_ARCH_AVX)\nCHECK_CXX_COMPILER_FLAG(\"/arch:AVX2\" HAVE_VISUAL_STUDIO_ARCH_AVX2)\nCHECK_CXX_COMPILER_FLAG(\"-mavx\" HAVE_CLANG_MAVX)\nCHECK_CXX_COMPILER_FLAG(\"-mbmi2\" HAVE_CLANG_MBMI2)\nif(SNAPPY_REQUIRE_AVX2)\n  if(HAVE_VISUAL_STUDIO_ARCH_AVX2)\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /arch:AVX2\")\n  endif(HAVE_VISUAL_STUDIO_ARCH_AVX2)\n  if(HAVE_CLANG_MAVX)\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -mavx\")\n  endif(HAVE_CLANG_MAVX)\n  if(HAVE_CLANG_MBMI2)\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -mbmi2\")\n  endif(HAVE_CLANG_MBMI2)\nelseif (SNAPPY_REQUIRE_AVX)\n  if(HAVE_VISUAL_STUDIO_ARCH_AVX)\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /arch:AVX\")\n  endif(HAVE_VISUAL_STUDIO_ARCH_AVX)\n  if(HAVE_CLANG_MAVX)\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -mavx\")\n  endif(HAVE_CLANG_MAVX)\nendif(SNAPPY_REQUIRE_AVX2)\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Hanunoo Script Character Ranges\nDESCRIPTION: Lists Unicode character ranges for the Hanunoo script, including letters and diacritical marks. The Hanunoo script is used by the Hanunoo people in the Philippines.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/spirit/workbench/unicode/Scripts.txt#2025-04-22_snippet_27\n\nLANGUAGE: unicode\nCODE:\n```\n1720..1731    ; Hanunoo # Lo  [18] HANUNOO LETTER A..HANUNOO LETTER HA\n1732..1734    ; Hanunoo # Mn   [3] HANUNOO VOWEL SIGN I..HANUNOO SIGN PAMUDPOD\n\n# Total code points: 21\n```\n\n----------------------------------------\n\nTITLE: Installing and Exporting Target\nDESCRIPTION: Installs the `json` target and exports it as `taocpp-json-targets`. It also installs the CMake configuration file for finding the package.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/taocpp-json/CMakeLists.txt#2025-04-22_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\ninstall (TARGETS json EXPORT taocpp-json-targets)\n\ninstall (EXPORT taocpp-json-targets\n  FILE taocpp-json-config.cmake\n  NAMESPACE taocpp::\n  DESTINATION ${TAOCPP_JSON_INSTALL_CMAKE_DIR}\n)\n```\n\n----------------------------------------\n\nTITLE: Running Basic MPL Pre-processing from Boost Directory\nDESCRIPTION: Command to pre-process all MPL container types when already in the Boost source directory, requiring no arguments.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/preprocessed/README.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npython boost_mpl_preprocess.py\n```\n\n----------------------------------------\n\nTITLE: Setting ICU Versions and Paths\nDESCRIPTION: This snippet defines the versioning for ICU and specifies the include directories for ICU by setting several CMake variables.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/v8-build/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(ICU_COMPACT_VERSION\n  \"73\"\n  CACHE INTERNAL\n  \"ICU: compact Version\"\n)\n\nset(ICU_VERSION\n  \"${ICU_COMPACT_VERSION}.1\"\n  CACHE INTERNAL\n  \"ICU: Version\"\n)\n\nset(ICU_BASEDIR ${V8_DIR}/third_party/icu)\n\nset(ICU_INCLUDE_DIR\n  ${ICU_BASEDIR}/source/common;${ICU_BASEDIR}/source/i18n;${ICU_BASEDIR}/source/io\n  CACHE INTERNAL\n  \"ICU: include path\"\n  FORCE\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Test Functions for Serialization Tests\nDESCRIPTION: Creates functions 'serialization_test', 'archive_test', and 'polymorphic_archive_test' for generating test targets with different archive types.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/serialization/CMake/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nfunction( serialization_test test_name)\n  # ... (function body)\nendfunction(serialization_test)\n\nfunction(archive_test test_name)\n  # ... (function body)\nendfunction(archive_test)\n\nfunction(polymorphic_archive_test test_name)\n  # ... (function body)\nendfunction(polymorphic_archive_test)\n```\n\n----------------------------------------\n\nTITLE: Configuring OS-Specific Source Files for Libunwind in CMake\nDESCRIPTION: Sets up conditional compilation for different operating systems (Linux, FreeBSD, Solaris) and their corresponding source files for various architectures.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/libunwind/v1.7.2/src/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(UNW_CMAKE_TARGET_LINUX)\n    SET(libunwind_la_SOURCES_os                 ${libunwind_la_SOURCES_os_linux})\n    SET(libunwind_la_SOURCES_os_local           ${libunwind_la_SOURCES_os_linux_local})\n    SET(libunwind_la_SOURCES_x86_os             x86/Gos-linux.c)\n    SET(libunwind_x86_la_SOURCES_os             x86/getcontext-linux.S)\n    SET(libunwind_la_SOURCES_x86_os_local       x86/Los-linux.c)\n    SET(libunwind_la_SOURCES_x86_64_os          x86_64/Gos-linux.c)\n    SET(libunwind_la_SOURCES_x86_64_os_local    x86_64/Los-linux.c)\n    SET(libunwind_la_SOURCES_arm_os             arm/Gos-linux.c)\n    SET(libunwind_la_SOURCES_arm_os_local       arm/Los-linux.c)\n    list(APPEND libunwind_coredump_la_SOURCES   coredump/_UCD_access_reg_linux.c\n                                                coredump/_UCD_get_threadinfo_prstatus.c\n                                                coredump/_UCD_get_mapinfo_linux.c)\nelseif(UNW_CMAKE_TARGET_FREEBSD)\n    SET(libunwind_la_SOURCES_os                 ${libunwind_la_SOURCES_os_freebsd})\n    SET(libunwind_la_SOURCES_os_local           ${libunwind_la_SOURCES_os_freebsd_local})\n    SET(libunwind_la_SOURCES_x86_os             x86/Gos-freebsd.c)\n    SET(libunwind_x86_la_SOURCES_os             x86/getcontext-freebsd.S)\n    SET(libunwind_la_SOURCES_x86_os_local       x86/Los-freebsd.c)\n    SET(libunwind_la_SOURCES_x86_64_os          x86_64/Gos-freebsd.c)\n    SET(libunwind_la_SOURCES_x86_64_os_local    x86_64/Los-freebsd.c)\n    SET(libunwind_la_SOURCES_arm_os             arm/Gos-freebsd.c)\n    SET(libunwind_la_SOURCES_arm_os_local       arm/Los-freebsd.c)\n    list(APPEND libunwind_coredump_la_SOURCES   coredump/_UCD_access_reg_freebsd.c\n                                                coredump/_UCD_get_threadinfo_prstatus.c\n                                                coredump/_UCD_get_mapinfo_generic.c)\nelseif(UNW_CMAKE_HOST_SUNOS)\n    SET(libunwind_la_SOURCES_os                 ${libunwind_la_SOURCES_os_solaris})\n    SET(libunwind_la_SOURCES_os_local           ${libunwind_la_SOURCES_os_solaris_local})\n    SET(libunwind_la_SOURCES_x86_64_os          x86_64/Gos-solaris.c)\n    SET(libunwind_la_SOURCES_x86_64_os_local    x86_64/Los-solaris.c)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Static String Library for ArangoDB\nDESCRIPTION: Defines the static strings library component that contains basic string handling functionality.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/lib/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(arango_static_strings STATIC\n  Basics/StaticStrings.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing the is_unpackable Trait Example in C++\nDESCRIPTION: Example code demonstrating how to use the is_unpackable trait to check if a std::tuple can be unpacked.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/is_unpackable.hpp.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/hof.hpp>\n#include <cassert>\n\nint main() {\n    static_assert(boost::hof::is_unpackable<std::tuple<int>>::value, \"Failed\");\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Image Tag Formatting\nDESCRIPTION: Specification for Docker image tag format and manifest requirements, including naming conventions and versioning requirements for CI/CD pipeline.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/scripts/docker/build/README.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- The main devel build image is always `docker.io/arangodb/ubuntubuildarangodb-devel:<TAG>` manifest\n- A `<TAG>` is a is a positive natural number\n- It's based on `arangodb/ubuntubuildarangodb-devel:<TAG>(-amd64 | -arm64v8)` images\n- In order to make a change a PR tag should be used instead: it must be current `<TAG>` value plus 1\n- `linux/README.md` contains the guide on how to build and push images and a manifest\n- `docker.io/arangodb/ubuntubuildarangodb-devel:<TAG>` manifest should be used as a parameter for CI (CircleCI by default, see https://circleci.com/docs/selecting-a-workflow-to-run-using-pipeline-parameters/) to check changes\n- If a PR is ready to be merged one can put a new `<TAG>` within `.circleci/base_config.yaml` prior to merge\n- For a better convenience it makes sense to do `./regctl image copy arangodb/ubuntubuildarangodb-devel:<TAG> arangodb/ubuntubuildarangodb-devel:latest`\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project for Boost Assign\nDESCRIPTION: Sets up the CMake project for Boost Assign, specifying the minimum required CMake version and project details.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/assign/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.16)\n\nproject(boost_assign VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Example Usage of BOOST_HOF_STATIC_FUNCTION in C++\nDESCRIPTION: Demonstrates how to use the BOOST_HOF_STATIC_FUNCTION macro to create static function objects in C++. The example shows defining a sum function and a partial sum function using the macro, and then verifying their behavior.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/function.hpp.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/hof.hpp>\n#include <cassert>\n\nstruct sum_f\n{\n    template<class T, class U>\n    T operator()(T x, U y) const\n    {\n        return x+y;\n    }\n};\n\nBOOST_HOF_STATIC_FUNCTION(sum) = sum_f();\nBOOST_HOF_STATIC_FUNCTION(partial_sum) = boost::hof::partial(sum_f());\n\nint main() {\n    assert(sum(1, 2) == partial_sum(1)(2));\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Interface Library\nDESCRIPTION: Creates an interface library named `arango_inspection_test_helper`. Interface libraries are used to group include directories and other build properties without generating any actual compiled output.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/Inspection/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(arango_inspection_test_helper INTERFACE)\n```\n\n----------------------------------------\n\nTITLE: New depth_first_search overload\nDESCRIPTION: This code snippet demonstrates a new overload for the `depth_first_search` function using `BOOST_PARAMETER_FUNCTION`. It requires a `graph` parameter, but allows for potentially different algorithm implementations based on the type of graph.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/index.rst#2025-04-22_snippet_16\n\nLANGUAGE: cpp\nCODE:\n```\n\"// new overload\n    BOOST_PARAMETER_FUNCTION((void), depth_first_search, (tag),\n        (required (graph,\\*))( … )\n    )\n    {\n        // new algorithm implementation\n    }\"\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Mutable Function Object Behavior with Unexpected Results in C++\nDESCRIPTION: This example shows why mutable function objects can lead to surprising behavior. It illustrates that when a counter function object is copied by value, mutations only affect the copy, not the original object.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/doc/src/faq.md.txt#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nstruct counter\n{\n    int i;\n    counter() : i(0)\n    {}\n\n    template<class... Ts>\n    int operator()(Ts&&...)\n    {\n        return i++;\n    }\n};\n\n\ncounter c{};\nproj(mutable_(c))(1,1);\n// Prints 0, not 2\nstd::cout << c.i << std::endl;\n```\n\n----------------------------------------\n\nTITLE: Defining iterator_category Metafunction in C++\nDESCRIPTION: Defines the iterator_category metafunction template that returns the category of a given iterator. It extracts the category type from the iterator's own category typedef.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/iterator_category.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      typename Iterator\n    >\nstruct iterator_category\n{\n    typedef typename Iterator::category type;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Function for Adding Failure Test Cases\nDESCRIPTION: Creates a function that sets up custom targets and tests for files expected to fail compilation, using shell scripts to verify that they properly fail to compile, which is important for testing compile-time errors.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/date/CMakeLists.txt#2025-04-22_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nfunction( add_fail_tests TEST_GLOB TEST_PREFIX )\n\tfile( GLOB_RECURSE FILENAMES ${TEST_GLOB} )\n\n\tforeach( TEST_FILE ${FILENAMES} )\n\t\tget_filename_component( TEST_NAME ${TEST_FILE} NAME_WE )\n\t\tget_filename_component( TEST_EXT ${TEST_FILE} EXT )\n\n\t\t\tset( TEST_TYPE \"_fail\" )\n\n\t\tset( PREFIX \"${TEST_PREFIX}_fail_${TEST_NAME}\" )\n\t\tset( BIN_NAME ${PREFIX}_bin )\n\t\tset( TST_NAME ${PREFIX}_test )\n\n\t\t#target_compile_definitions( ${BIN_NAME} PRIVATE ${TST_NAME} )\n\t\tset( TEST_BIN_NAME ${CMAKE_BINARY_DIR}/${BIN_NAME} )\n\t\tadd_custom_target( ${BIN_NAME}\n\t\t\tCOMMAND ${PROJECT_SOURCE_DIR}/compile_fail.sh ${TEST_BIN_NAME} ${CMAKE_CXX_COMPILER} -std=c++17 -L${CMAKE_BINARY_DIR}/ -ltz -I${PROJECT_SOURCE_DIR}/${HEADER_FOLDER}/date -o ${BIN_NAME} ${TEST_FILE}\n\t\t\tWORKING_DIRECTORY ${CMAKE_BINARY_DIR}\n\t\t\tCOMMENT ${TST_NAME}\n\t\t\t)\n\t\tadd_test( ${TST_NAME} \"${PROJECT_SOURCE_DIR}/test_fail.sh\" ${CMAKE_BINARY_DIR}/${BIN_NAME} WORKING_DIRECTORY \"${PROJECT_SOURCE_DIR}/\" )\n\t\t#set_tests_properties( ${TST_NAME} PROPERTIES WILL_FAIL TRUE)\n\t\tadd_dependencies( testit ${BIN_NAME} )\n\tendforeach( )\nendfunction( )\n```\n\n----------------------------------------\n\nTITLE: Setting Source Directories and Includes for LZ4\nDESCRIPTION: Defines paths to LZ4 library and program source directories, and configures include paths for building. These paths are used throughout the build configuration for locating source files.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/lz4/build/cmake/CMakeLists.txt#2025-04-22_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nset(LZ4_LIB_SOURCE_DIR \"${LZ4_TOP_SOURCE_DIR}/lib\")\nset(LZ4_PROG_SOURCE_DIR \"${LZ4_TOP_SOURCE_DIR}/programs\")\n\ninclude_directories(\"${LZ4_LIB_SOURCE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Defining Compiler Options for GCC\nDESCRIPTION: This snippet conditionally defines compiler options for the target 'arangodbtests-iresearch', specifically for the GNU compiler, to disable devirtualization. It addresses a specific issue with the FakeIt testing framework.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/IResearch/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(CMAKE_CXX_COMPILER_ID STREQUAL GNU)\\\n  target_compile_options(arangodbtests-iresearch PRIVATE -fno-devirtualize)\\\nendif()\n```\n\n----------------------------------------\n\nTITLE: Using is_exception_ptr_available<T> Trait in C++\nDESCRIPTION: The trait provides a ::value member which is true if an exception_ptr can be constructed from T, and a ::type member which is the resulting type if ::value is true, otherwise void. It can be overridden by template specialization in the trait namespace.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/traits/is_exception_ptr_available.md#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nis_exception_ptr_available<T>::value\n```\n\nLANGUAGE: C++\nCODE:\n```\nis_exception_ptr_available<T>::type\n```\n\n----------------------------------------\n\nTITLE: Declaring remove_if Template in C++\nDESCRIPTION: Defines the remove_if template structure with parameters for Sequence, Pred, and an optional In parameter. The structure contains a typedef for the resulting type.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/remove_if.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      typename Sequence\n    , typename Pred\n    , typename In = |unspecified|\n    >\nstruct remove_if\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Registering Triggers with Reply in C++\nDESCRIPTION: Registers a trigger that requires immediate response, used for synchronous message exchanges in distributed systems\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/process_group.rst#2025-04-22_snippet_6\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<typename Type, typename Handler>\n  void trigger_with_reply(int tag, const Handler& handler);\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Flags in CMake for ArangoDB\nDESCRIPTION: Adds specific compiler flags for C and C++ to suppress certain warnings. These flags are added only if they are supported by the compiler.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/s2geometry/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_c_flags_if_supported(CMAKE_C_FLAGS -Wno-sign-compare -Wno-unused-const-variable -Wno-mismatched-tags -Wno-unused-function)\nadd_cxx_flags_if_supported(CMAKE_CXX_FLAGS -Wno-sign-compare -Wno-unused-const-variable -Wno-mismatched-tags -Wno-unused-function)\n```\n\n----------------------------------------\n\nTITLE: Configuring ArangoDB Error Tests CMake Build\nDESCRIPTION: Configures the build settings for ArangoDB error tests executable. Sets up the test binary with required source files, include directories, and links against the Google Test framework.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/Errors/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(arangodbtests_errors EXCLUDE_FROM_ALL\n  main.cpp\n  ErrorTTest.cpp)\n\ntarget_include_directories(arangodbtests_errors PRIVATE\n  ${PROJECT_SOURCE_DIR}/lib)\n\ntarget_link_libraries(arangodbtests_errors\n  gtest)\n```\n\n----------------------------------------\n\nTITLE: Defining has_key Metafunction Template in C++\nDESCRIPTION: Template definition for the has_key metafunction. It takes two template parameters: Sequence and Key. The metafunction returns an unspecified type that resolves to an Integral Constant indicating whether the key exists in the sequence.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/has_key.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      typename Sequence\n    , typename Key\n    >\nstruct has_key\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Building and Installing Linenoise at Default Location\nDESCRIPTION: Builds the Linenoise library and installs it to the default system location. This requires sudo permissions for the installation step.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/linenoise-ng/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n(cd build && cmake -DCMAKE_BUILD_TYPE=Release .. && make && sudo make install)\n```\n\n----------------------------------------\n\nTITLE: Running Boost Graph Library Tests\nDESCRIPTION: Commands for executing test suites in the Boost Graph Library, supporting both comprehensive test runs and individual test case selection\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n../../../b2\n../../../b2 cycle_canceling_test\n```\n\n----------------------------------------\n\nTITLE: Defining ArangoDB Graph Target Sources with CMake\nDESCRIPTION: This CMake command `target_sources` defines the source files required to build the `arango_graph` private target. It includes source files for cluster and single-server graph providers, base provider options, and a provider tracer. The `PRIVATE` keyword indicates that these source files are only used for building this target and are not exposed to other targets.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/Graph/Providers/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(arango_graph PRIVATE\n  ClusterProvider.cpp\n  SingleServerProvider.cpp\n  BaseProviderOptions.cpp\n  ProviderTracer.cpp)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Shell Library\nDESCRIPTION: Configures private include directories for the arango_shell target.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/client-tools/Shell/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(arango_shell PRIVATE ${CMAKE_SOURCE_DIR}/client-tools)\n```\n\n----------------------------------------\n\nTITLE: Generating Table of Contents with Hugo Shortcode\nDESCRIPTION: This Hugo shortcode generates a table of contents for child pages, including descriptions and a depth of 2 levels.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/traits/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: hugo\nCODE:\n```\n{{% children description=\"true\" depth=\"2\" %}}\n```\n\n----------------------------------------\n\nTITLE: STL Bidirectional Read-Only Operations\nDESCRIPTION: Lists STL algorithms that require Bidirectional Iterator with only Readable capabilities.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/new-iter-concepts.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nreverse_copy\n```\n\n----------------------------------------\n\nTITLE: Swapping Basic Result Objects in C++\nDESCRIPTION: Member function that swaps two basic_result objects with strong exception guarantee. The operation is noexcept when the underlying value_type and error_type have noexcept move operations. In case of exceptions, it attempts to restore the original state of both operands.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/basic_result/swap.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nvoid swap(basic_result &)\n```\n\n----------------------------------------\n\nTITLE: Class Template for Distributed Queue In C++\nDESCRIPTION: This class template defines a distributed queue which allows multiple processes to manage a local queue that interfaces with a process group. It provides functionality to push and pop elements, check if the queue is empty, and determine its size. It supports options for message polling during operations.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/distributed_queue.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<typename ProcessGroup, typename Buffer>\nclass distributed_queue\n{\npublic:\n    typedef ProcessGroup                     process_group_type;\n    typedef Buffer                           buffer_type;\n    typedef typename buffer_type::value_type value_type;\n    typedef typename buffer_type::size_type  size_type;\n\n    explicit \n    distributed_queue(const ProcessGroup& process_group = ProcessGroup(), \n                      const Buffer& buffer = Buffer(),\n                      bool polling = false);\n\n    distributed_queue(const ProcessGroup& process_group, bool polling);\n\n    void push(const value_type& x);\n    void pop(); \n    value_type& top();\n    const value_type& top() const;\n    bool empty() const;\n    size_type size() const;\n};\n```\n\n----------------------------------------\n\nTITLE: VS2017 Variant Compile Time Benchmarks (/Od)\nDESCRIPTION: Compilation time comparison between variant implementations using VS2017 without optimizations.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/variant2/benchmark/benchmark1.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n      variant2 (-DONLY_V2): 1837 ms\nboost::variant (-DONLY_BV): 2627 ms\n  std::variant (-DONLY_SV): 1425 ms\n```\n\n----------------------------------------\n\nTITLE: Reverse Transform Synopsis (Binary)\nDESCRIPTION: This code snippet shows the synopsis for the binary version of the reverse_transform algorithm. It takes two sequences `Seq1` and `Seq2`, a binary operation `BinaryOp`, and an optional inserter `In` as template parameters. The `type` member is the resulting transformed sequence.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/reverse_transform.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      typename Seq1\n    , typename Seq2\n    , typename BinaryOp\n    , typename In = |unspecified|\n    >\nstruct reverse_transform\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Demonstrating BOOST_HOF_STATIC_LAMBDA_FUNCTION Usage\nDESCRIPTION: Code references showing the use of BOOST_HOF_STATIC_LAMBDA_FUNCTION for constexpr lambda function initialization, particularly relevant for MSVC and gcc 4.6 compatibility.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/src/index.md#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_HOF_STATIC_LAMBDA_FUNCTION\n```\n\n----------------------------------------\n\nTITLE: Category-to-traversal Conversion Algorithm in Pseudocode\nDESCRIPTION: Algorithm that maps standard iterator categories to traversal tags. This conversion is used by iterator_traversal to determine the appropriate traversal capability for an iterator type.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/new-iter-concepts.rst#2025-04-22_snippet_14\n\nLANGUAGE: cpp\nCODE:\n```\n*category-to-traversal*\\ (C) =\n    if (C is convertible to incrementable_traversal_tag)\n        return C;\n    else if (C is convertible to random_access_iterator_tag)\n        return random_access_traversal_tag;\n    else if (C is convertible to bidirectional_iterator_tag)\n        return bidirectional_traversal_tag;\n    else if (C is convertible to forward_iterator_tag)\n        return forward_traversal_tag;\n    else if (C is convertible to input_iterator_tag)\n        return single_pass_traversal_tag;\n    else if (C is convertible to output_iterator_tag)\n        return incrementable_traversal_tag;\n    else\n        *the program is ill-formed*\n```\n\n----------------------------------------\n\nTITLE: Defining Boost Testing Platform Maintainers in Plaintext\nDESCRIPTION: This code snippet defines the maintainers for various Boost testing platforms. It includes runner names, platform details, and maintainer email addresses. The format is consistent across all entries, making it easy to parse and use for automated processes.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/platform_maintainers.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nSandia-darwin-intel    darwin-4.0.1\t       Noel Belcourt <kbelco -at- sandia.gov>\nSandia-darwin-ppc      darwin-4.0.1\t       Noel Belcourt <kbelco -at- sandia.gov>\nSandia-intel           intel-linux-8.1         Noel Belcourt <kbelco -at- sandia.gov>\nSandia-intel           intel-linux-9.0         Noel Belcourt <kbelco -at- sandia.gov>\nSandia-intel           intel-linux-9.1         Noel Belcourt <kbelco -at- sandia.gov>\nSandia-gcc             gcc-4.2.1               Noel Belcourt <kbelco -at- sandia.gov>\nSandia-gcc             gcc-3.4.3               Noel Belcourt <kbelco -at- sandia.gov>\nSandia-gcc             gcc-4.0.1               Noel Belcourt <kbelco -at- sandia.gov>\nSandia-gcc-64          gcc-4.2.1               Noel Belcourt <kbelco -at- sandia.gov>\nSandia-gcc-64          gcc-4.1.1               Noel Belcourt <kbelco -at- sandia.gov>\nSandia-sun             gcc-3.4.6               Noel Belcourt <kbelco -at- sandia.gov>\nSandia-sun             sun-5.7                 Noel Belcourt <kbelco -at- sandia.gov>\nSandia-sun             sun-5.8                 Noel Belcourt <kbelco -at- sandia.gov>\nSandia-sun             sun-5.9                 Noel Belcourt <kbelco -at- sandia.gov>\n\"Martin Wille x86_64\"  gcc-4.2.1_linux_x86_64  Martin Wille <mw8329 -at- yahoo.com.au>\n\"Martin Wille x86_64\"  gcc-3.4.6_linux_x86_64  Martin Wille <mw8329 -at- yahoo.com.au>\nHuang-WinXP-x86_32     intel-vc8-win-10.0      Sean Huang <huangsean -at- hotmail.com>\nHuang-WinXP-x86_32     msvc-8.0                Sean Huang <huangsean -at- hotmail.com>\nHuang-Vista-x64        msvc-8.0_64             Sean Huang <huangsean -at- hotmail.com>\nHuang-Vista-x64        intel-vc8-win-10.0_x86_64  Sean Huang <huangsean -at- hotmail.com>\nHuang-Vista-x64        msvc-8.0_x86_64         Sean Huang <huangsean -at- hotmail.com>\nIBM_Canada_Ltd         vacpp                   Chris Cambly <ccambly -at- ca.ibm.com>\nRW_WinXP_VC            msvc-7.1                Richard Webb <richard.webb -at- boldonjames.com>\nRW_WinXP_VC            msvc-9.0                Richard Webb <richard.webb -at- boldonjames.com>\n```\n\n----------------------------------------\n\nTITLE: dtype Constructor from Arbitrary Python Object\nDESCRIPTION: This code shows the template constructor for the `dtype` class, which allows creating a NumPy data type from an arbitrary Python object.  The template parameter `T` must be either a built-in C++ type convertible to a Python object or a valid Python object itself.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/doc/numpy/reference/dtype.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <typename T>\nexplicit dtype(T arg, bool align=false)\n```\n\n----------------------------------------\n\nTITLE: Running ArangoDB in Docker\nDESCRIPTION: This command starts an ArangoDB instance within a Docker container. It sets the root password to \"test123\", maps port 8529 on the host machine to port 8529 on the container, and runs the container in detached mode.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/README.md#2025-04-22_snippet_0\n\nLANGUAGE: docker\nCODE:\n```\ndocker run -e ARANGO_ROOT_PASSWORD=test123 -p 8529:8529 -d arangodb\n```\n\n----------------------------------------\n\nTITLE: Declaring make<T> Base Template in C++\nDESCRIPTION: This snippet declares the base `make<T>` template that ensures a static assert failure if an unspecialized type is instantiated. This mechanism provides a safeguard against the unintended use of unimplemented specializations.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/tutorial/advanced/constructors/metaprogrammg2.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n{{% snippet \\\"constructors.cpp\\\" \\\"construct-declaration\\\" %}}\n```\n\n----------------------------------------\n\nTITLE: Defining ReStructuredText Substitutions for ArangoDB Documentation\nDESCRIPTION: This snippet defines substitutions for 'Comparisons' and 'comparison' terms, creating hyperlinks to the same target. It also includes a copyright notice and license information for Boost Software.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/Metafunctions-Comparisons.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. |Comparisons| replace:: `Comparisons`_\n.. |comparison| replace:: `comparison`_\n.. _`comparison`: `Comparisons`_\n\n\n.. copyright:: Copyright ©  2001-2009 Aleksey Gurtovoy and David Abrahams\n   Distributed under the Boost Software License, Version 1.0. (See accompanying\n   file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)\n```\n\n----------------------------------------\n\nTITLE: Dynamic Image Class Definition\nDESCRIPTION: This snippet presents the definition of the 'any_image' class which extends the variant class to support multiple image types. It includes methods for constructing new images and accessing their properties.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/dynamic_image.rst#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <typename ...ImageTypes>\nclass any_image : public variant<ImageTypes...>\n{\npublic:\n    typedef ... const_view_t;\n    typedef ... view_t;\n    typedef std::ptrdiff_t x_coord_t;\n    typedef std::ptrdiff_t y_coord_t;\n    typedef point<std::ptrdiff_t> point_t;\n\n    any_image();\n    template <typename T> explicit any_image(const T& obj);\n    template <typename T> explicit any_image(T& obj, bool do_swap);\n    any_image(const any_image& v);\n\n    template <typename T> any_image& operator=(const T& obj);\n    any_image&                       operator=(const any_image& v);\n\n    void recreate(const point_t& dims, unsigned alignment=1);\n    void recreate(x_coord_t width, y_coord_t height, unsigned alignment=1);\n\n    std::size_t num_channels()  const;\n    point_t     dimensions()    const;\n    x_coord_t   width()         const;\n    y_coord_t   height()        const;\n};\n```\n\n----------------------------------------\n\nTITLE: Quaternion Unit Operations\nDESCRIPTION: Demonstrates the fundamental quaternion unit operations showing the relationships between i, j, and k units and their multiplication results, verifying the basic quaternion multiplication rules.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/math/doc/quaternion/output_more.txt#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nReal 1: 1 ; Complex 1: (1,0) ; Quaternion 1: (1,0,0,0) .\nComplex i: (0,1) ; Quaternion i: (0,1,0,0) .\nQuaternion j: (0,0,1,0) .\nQuaternion k: (0,0,0,1) .\n\ni*i: (-1,0,0,0) ; j*j: (-1,0,0,0) ; k*k: (-1,0,0,0) .\ni*j: (0,0,0,1) ; j*i: (0,0,0,-1) .\nj*k: (0,1,0,0) ; k*j: (0,-1,0,0) .\nk*i: (0,0,1,0) ; i*k: (0,0,-1,0) .\n```\n\n----------------------------------------\n\nTITLE: Enabling C++11 char16_t and char32_t Support in Boost.Locale Build\nDESCRIPTION: Command-line flags to pass to b2 for enabling C++11 char16_t and char32_t support when building Boost.Locale. These flags define the necessary macros to enable the experimental support.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/doc/status_of_cpp0x_characters_support.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncxxflags=\"-DBOOST_LOCALE_ENABLE_CHAR32_T -DBOOST_LOCALE_ENABLE_CHAR16_T\"\n```\n\n----------------------------------------\n\nTITLE: MetafunctionClass Requirements Table in ReStructuredText\nDESCRIPTION: Specifies the requirements for the MetafunctionClass concept in a ReStructuredText table. Defines two expression patterns for accessing the result type through the ::apply member template, either directly or with template arguments.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/doc/src/concepts.md.txt#2025-04-22_snippet_7\n\nLANGUAGE: rst\nCODE:\n```\n+-----------------------------+--------------------------------------------+\n| Expression                  | Requirements                               |\n+=============================+============================================+\n| ``f::apply::type``          | The type is the result of the metafunction |\n+-----------------------------+--------------------------------------------+\n| ``f::apply<args...>::type`` | The type is the result of the metafunction |\n+-----------------------------+--------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Defining Boost Geometry Project\nDESCRIPTION: Defines the project name and version using the `project` command.  It also specifies that the project uses the CXX language. The version is obtained from the `BOOST_SUPERPROJECT_VERSION` variable.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/geometry/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n\"project(boost_geometry VERSION \\\"${BOOST_SUPERPROJECT_VERSION}\\\" LANGUAGES CXX)\"\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Random Access Iterator Type Expression for distance\nDESCRIPTION: Shows the type expression for the distance operation between two Random Access Iterators, which returns an Integral Constant in amortized constant time.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/RandomAccessIterator.rst#2025-04-22_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\ndistance<i,j>::type\n```\n\n----------------------------------------\n\nTITLE: Overloading Color Conversion for Grayscale in C++ GIL\nDESCRIPTION: This code snippet illustrates how to create a custom color converter in GIL that inverts colors during conversion to grayscale. It defines a template struct for color conversion and a struct to encapsulate the conversion logic, allowing default conversions to be overridden for specific cases. Dependencies include GIL's existing color conversion utilities.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/extending.rst.txt#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\n// make the default use GIL's default\ntemplate <typename SrcColorSpace, typename DstColorSpace>\nstruct my_color_converter_impl\n: public default_color_converter_impl<SrcColorSpace,DstColorSpace> {};\n\n// provide specializations only for cases you care about\n// (in this case, if the destination is grayscale, invert it)\ntemplate <typename SrcColorSpace>\nstruct my_color_converter_impl<SrcColorSpace,gray_t>\n{\n    template <typename SrcP, typename DstP>  // Model PixelConcept\n    void operator()(const SrcP& src, DstP& dst) const\n    {\n        default_color_converter_impl<SrcColorSpace,gray_t>()(src,dst);\n        get_color(dst,gray_color_t())=channel_invert(get_color(dst,gray_color_t()));\n    }\n};\n\n// create a color converter object that dispatches to your own implementation\nstruct my_color_converter\n{\n    template <typename SrcP, typename DstP>  // Model PixelConcept\n    void operator()(const SrcP& src,DstP& dst) const\n    {\n        typedef typename color_space_type<SrcP>::type SrcColorSpace;\n        typedef typename color_space_type<DstP>::type DstColorSpace;\n        my_color_converter_impl<SrcColorSpace,DstColorSpace>()(src,dst);\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Compiler Options for GCC and Clang\nDESCRIPTION: Sets compiler flags for GCC and Clang compilers, including C++17 standard, warning flags, and optimization levels for different build types.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/linenoise-ng/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(CMAKE_COMPILER_IS_GNUCXX)\n  message(STATUS \"Compiler type GNU: ${CMAKE_CXX_COMPILER}\")\n  set(BASE_COMPILER_OPTIONS \"-std=c++17 -Wall -Wextra\")\n  set(CMAKE_CXX_FLAGS                \"${CMAKE_CXX_FLAGS} ${BASE_COMPILER_OPTIONS}\")\n  set(CMAKE_CXX_FLAGS_DEBUG          \"${CMAKE_CXX_FLAGS_DEBUG} ${BASE_COMPILER_OPTIONS} -O0 -g\")\n  set(CMAKE_CXX_FLAGS_MINSIZEREL     \"${CMAKE_CXX_FLAGS_MINSIZEREL} ${BASE_COMPILER_OPTIONS} -Os\")\n  set(CMAKE_CXX_FLAGS_RELEASE        \"${CMAKE_CXX_FLAGS_RELEASE} ${BASE_COMPILER_OPTIONS} -O3 -fomit-frame-pointer\")\n  set(CMAKE_CXX_FLAGS_RELWITHDEBINFO \"${CMAKE_CXX_FLAGS_RELWITHDEBINFO} ${BASE_COMPILER_OPTIONS} -O3 -g\")\n\nelseif(CMAKE_COMPILER_IS_CLANGCXX OR CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")\n  message(STATUS \"Compiler type CLANG: ${CMAKE_CXX_COMPILER}\")\n  set(BASE_COMPILER_OPTIONS \"-std=c++17 -Wall -Wextra\")\n  set(CMAKE_CXX_FLAGS                \"${CMAKE_CXX_FLAGS} ${BASE_COMPILER_OPTIONS}\")\n  set(CMAKE_CXX_FLAGS_DEBUG          \"${CMAKE_CXX_FLAGS_DEBUG} ${BASE_COMPILER_OPTIONS} -O0 -g\")\n  set(CMAKE_CXX_FLAGS_MINSIZEREL     \"${CMAKE_CXX_FLAGS_MINSIZEREL} ${BASE_COMPILER_OPTIONS} -Os\")\n  set(CMAKE_CXX_FLAGS_RELEASE        \"${CMAKE_CXX_FLAGS_RELEASE} ${BASE_COMPILER_OPTIONS} -O3 -fomit-frame-pointer\")\n  set(CMAKE_CXX_FLAGS_RELWITHDEBINFO \"${CMAKE_CXX_FLAGS_RELWITHDEBINFO} ${BASE_COMPILER_OPTIONS} -O3 -g\")\n```\n\n----------------------------------------\n\nTITLE: Invoking a Nullary Metafunction Class in C++\nDESCRIPTION: Demonstrates how to invoke a nullary metafunction class using the nested 'apply' metafunction. This form is used when the metafunction class takes no arguments.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/MetafunctionClass.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntypedef f::apply::type x;\n```\n\n----------------------------------------\n\nTITLE: Parameter Checking Without Boost.MP11 in C++\nDESCRIPTION: Demonstrates verbose parameter checking without using Boost.MP11 library. The code checks parameter types and relationships using nested template expressions with MPL conditionals and type traits.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_99\n\nLANGUAGE: cpp\nCODE:\n```\ncheck<\n    |parameters|_\\<\n        tag\\:\\:x\n      , |optional|_\\<\n            |deduced|_\\<tag\\:\\:y>\n          , |mpl_if|_\\<\n                |boost_is_same|_\\<\n                    |boost_add_lvalue_reference|_\\<|mp11_1|_\\>\n                  , |binding|_\\<|mp11_2|_\\, tag\\:\\:x>\n                >\n              , |mpl_true|_\\   // Still have to convert to a\n              , |mpl_false|_\\  // `Boolean Integral Constant`_.\n            >\n        >\n    >\n>((_x = 0, _y = 1), 0, 1);\n\n// Use tag\\:\\:x\\:\\:_ or tag\\:\\:x\\:\\:_1 to access the value type of _x.\ncheck<\n    |parameters|_\\<\n        tag\\:\\:x\n      , |optional|_\\<\n            |deduced|_\\<tag\\:\\:y>\n          , |mpl_if|_\\<\n                |boost_is_convertible|_\\<|mp11_1|_\\, tag\\:\\:x\\:\\:_1>\n              , |mpl_true|_\\   // Still have to convert to a\n              , |mpl_false|_\\  // `Boolean Integral Constant`_.\n            >\n        >\n    >\n>((_x = 0U, _y = 1U), 0U, 1U);\n```\n\n----------------------------------------\n\nTITLE: Windows API DeleteFile Function Declaration\nDESCRIPTION: Windows API function signature for deleting files, demonstrating the BOOL return type pattern for error handling\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/leaf/doc/whitepaper.md#2025-04-22_snippet_6\n\nLANGUAGE: c\nCODE:\n```\nBOOL DeleteFileW(\n  LBCWSTR lpFileName\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring RTF Output Generation\nDESCRIPTION: This snippet provides configurations for generating RTF output using Doxygen. It includes tags such as `GENERATE_RTF`, `RTF_OUTPUT`, and `COMPACT_RTF`, which determine RTF-specific output characteristics. Dependencies include enabling `GENERATE_RTF` for these settings to apply.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/sort/doc/doxygen/sort_doxyfile.txt#2025-04-22_snippet_63\n\nLANGUAGE: configuration\nCODE:\n```\nGENERATE_RTF           = NO\nRTF_OUTPUT             = rtf\nCOMPACT_RTF            = NO\n```\n\n----------------------------------------\n\nTITLE: Including Boost MPL Pair Header for First and Second Metafunctions\nDESCRIPTION: Header inclusion for using the 'first' and 'second' metafunctions from Boost MPL library. These metafunctions are typically used with pair-like structures.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/Metafunctions-Trivial-Summary.rst#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n#include <boost/mpl/pair.hpp>\n```\n\n----------------------------------------\n\nTITLE: Configuring Fast Double Memory Comparison Encoding Option in CMake\nDESCRIPTION: Defines a CMake option for enabling fast double memory comparison encoding. This option is enabled by default and likely controls a performance optimization for how double values are encoded in the database.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/Zkd/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\noption(USE_FAST_DOUBLE_MEMCMP_ENCODING \n  \"Used to trigger the use for a faster double encode\"\n  ON)\n```\n\n----------------------------------------\n\nTITLE: Building libunwind on HP-UX\nDESCRIPTION: Configuration command for building libunwind on HP-UX systems using GCC. Sets 64-bit mode with the mlp64 flag for both C and C++ compilation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/libunwind/v1.7.2/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ ./configure CFLAGS=\"-g -O2 -mlp64\" CXXFLAGS=\"-g -O2 -mlp64\"\n```\n\n----------------------------------------\n\nTITLE: Value Type Usage Example\nDESCRIPTION: Example demonstrating the usage of value_type with map and set containers, showing how the value type differs between these container types.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/value_type.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ntypedef value_type< map<>,pair<int,unsigned> >::type v1;\ntypedef value_type< set<>,pair<int,unsigned> >::type v2;\n\nBOOST_MPL_ASSERT(( is_same< v1,unsigned > ));\nBOOST_MPL_ASSERT(( is_same< v2,pair<int,unsigned> > ));\n```\n\n----------------------------------------\n\nTITLE: Configuring Bundled Mode for LZ4 in CMake\nDESCRIPTION: Determines whether LZ4 is being used as part of another project (bundled mode). This affects installation behavior and library configuration. The default is set based on whether LZ4 is the top-level project.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/lz4/build/cmake/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# If LZ4 is being bundled in another project, we don't want to\n# install anything.  However, we want to let people override this, so\n# we'll use the LZ4_BUNDLED_MODE variable to let them do that; just\n# set it to OFF in your project before you add_subdirectory(lz4/contrib/cmake_unofficial).\nget_directory_property(LZ4_PARENT_DIRECTORY PARENT_DIRECTORY)\nif(\"${LZ4_BUNDLED_MODE}\" STREQUAL \"\")\n  # Bundled mode hasn't been set one way or the other, set the default\n  # depending on whether or not we are the top-level project.\n  if(\"${LZ4_PARENT_DIRECTORY}\" STREQUAL \"\")\n    set(LZ4_BUNDLED_MODE OFF)\n  else()\n    set(LZ4_BUNDLED_MODE ON)\n  endif()\nendif()\nmark_as_advanced(LZ4_BUNDLED_MODE)\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Properties for Fullwidth Characters\nDESCRIPTION: This snippet defines Unicode properties for fullwidth characters in the Common script, including punctuation marks, digits, and symbols.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/spirit/workbench/unicode/Scripts.txt#2025-04-22_snippet_4\n\nLANGUAGE: Unicode\nCODE:\n```\nFF01..FF03    ; Common # Po   [3] FULLWIDTH EXCLAMATION MARK..FULLWIDTH NUMBER SIGN\nFF04          ; Common # Sc       FULLWIDTH DOLLAR SIGN\nFF05..FF07    ; Common # Po   [3] FULLWIDTH PERCENT SIGN..FULLWIDTH APOSTROPHE\nFF08          ; Common # Ps       FULLWIDTH LEFT PARENTHESIS\nFF09          ; Common # Pe       FULLWIDTH RIGHT PARENTHESIS\nFF0A          ; Common # Po       FULLWIDTH ASTERISK\nFF0B          ; Common # Sm       FULLWIDTH PLUS SIGN\nFF0C          ; Common # Po       FULLWIDTH COMMA\nFF0D          ; Common # Pd       FULLWIDTH HYPHEN-MINUS\nFF0E..FF0F    ; Common # Po   [2] FULLWIDTH FULL STOP..FULLWIDTH SOLIDUS\nFF10..FF19    ; Common # Nd  [10] FULLWIDTH DIGIT ZERO..FULLWIDTH DIGIT NINE\n```\n\n----------------------------------------\n\nTITLE: Stable Partition Usage Example\nDESCRIPTION: Example demonstrating how to use stable_partition to separate odd and even numbers in a range.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/stable_partition.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntemplate< typename N > struct is_odd : bool_<(N::value % 2)> {};\n\ntypedef stable_partition<\n      range_c<int,0,10> \n    , is_odd<_1>\n    , back_inserter< vector<> >\n    , back_inserter< vector<> >\n    >::type r;\n\nBOOST_MPL_ASSERT(( equal< r::first, vector_c<int,1,3,5,7,9> > ));\nBOOST_MPL_ASSERT(( equal< r::second, vector_c<int,0,2,4,6,8> > ));\n```\n\n----------------------------------------\n\nTITLE: Requiring C++17 Standard\nDESCRIPTION: Sets the required C++ standard to C++17 for the interface library `json`. This ensures that the compiler supports C++17 features when using the library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/taocpp-json/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_compile_features (json INTERFACE cxx_std_17)\n```\n\n----------------------------------------\n\nTITLE: Defining Boost Container Library Target in CMake\nDESCRIPTION: Creates the main library target for Boost Container, specifying source files and setting up an alias.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/container/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(boost_container\n  src/alloc_lib.c\n  src/dlmalloc.cpp\n  src/global_resource.cpp\n  src/monotonic_buffer_resource.cpp\n  src/pool_resource.cpp\n  src/synchronized_pool_resource.cpp\n  src/unsynchronized_pool_resource.cpp\n)\n\nadd_library(Boost::container ALIAS boost_container)\n```\n\n----------------------------------------\n\nTITLE: Conditional Test Subdirectory Inclusion\nDESCRIPTION: This snippet checks if testing is enabled and verifies the existence of a test CMakeLists.txt file before adding the test subdirectory to the build process.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/function/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(BUILD_TESTING AND EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/test/CMakeLists.txt\")\n\n  add_subdirectory(test)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: This snippet sets the include directories for the `boost_property_map_parallel` target. It specifies that the `include` directory should be used when compiling against this library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/property_map_parallel/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(boost_property_map_parallel INTERFACE include)\n```\n\n----------------------------------------\n\nTITLE: Configuring Assembler and Implementation for Boost.Context\nDESCRIPTION: Sets up CMake cache variables for the assembler type, assembler source suffix, and implementation method for Boost.Context.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/context/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(MSVC)\n  set(_default_asm masm)\nelse()\n  set(_default_asm gas)\nendif()\n\nset(BOOST_CONTEXT_ASSEMBLER \"${_default_asm}\" CACHE STRING \"Boost.Context assembler (masm, gas, armasm)\")\nset_property(CACHE BOOST_CONTEXT_ASSEMBLER PROPERTY STRINGS masm gas armasm)\n\nunset(_default_asm)\n\nif(BOOST_CONTEXT_BINARY_FORMAT STREQUAL pe)\n  set(_default_ext .asm)\nelseif(BOOST_CONTEXT_ASSEMBLER STREQUAL gas)\n  set(_default_ext .S)\nelse()\n  set(_default_ext .asm)\nendif()\n\nset(BOOST_CONTEXT_ASM_SUFFIX \"${_default_ext}\" CACHE STRING \"Boost.Context assembler source suffix (.asm, .S)\")\nset_property(CACHE BOOST_CONTEXT_ASM_SUFFIX PROPERTY STRINGS .asm .S)\n\nunset(_default_ext)\n\nset(_default_impl fcontext)\n\nset(BOOST_CONTEXT_IMPLEMENTATION \"${_default_impl}\" CACHE STRING \"Boost.Context implementation (fcontext, ucontext, winfib)\")\nset_property(CACHE BOOST_CONTEXT_IMPLEMENTATION PROPERTY STRINGS fcontext ucontext winfib)\n\nunset(_default_impl)\n```\n\n----------------------------------------\n\nTITLE: Using Boost.Python's Object Interface\nDESCRIPTION: C++ code demonstrating Boost.Python's object interface for managing Python objects, which simplifies reference counting and conversions between C++ and Python types.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/doc/article.rst#2025-04-22_snippet_22\n\nLANGUAGE: C++\nCODE:\n```\nobject s(\"hello, world\");  // s manages a Python string\n```\n\n----------------------------------------\n\nTITLE: Configuring Doxygen Aliases in ArangoDB\nDESCRIPTION: Setting for specifying command aliases in Doxygen documentation that can be used as shortcuts for common documentation elements. The default is empty.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/sort/doc/doxygen/sort_doxyfile.txt#2025-04-22_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nALIASES                = \n```\n\n----------------------------------------\n\nTITLE: Setting Up Valgrind for Memory Checking\nDESCRIPTION: This snippet checks for the presence of Valgrind and sets up the memory check command if it is found. It also includes error handling for cases when Valgrind is not available.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hana/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nfind_program(MEMORYCHECK_COMMAND valgrind)\nif (MEMORYCHECK_COMMAND)\n    message(STATUS \"Found Valgrind: ${MEMORYCHECK_COMMAND}\")\n    set(MEMORYCHECK_COMMAND_OPTIONS \"--leak-check=full --error-exitcode=1\")\nelse()\n    message(\"Valgrind not found\")\nendif()\n\n```\n\n----------------------------------------\n\nTITLE: Custom Locale Facet Implementation in C++\nDESCRIPTION: Demonstrates creation of a custom measurement facet that extends std::locale::facet. The example shows the basic structure of a custom facet class with measurement functionality.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/doc/std_locales.txt#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nclass measure : public std::locale::facet {\npublic:\n    typedef enum { inches, ... } measure_type;\n    measure(measure_type m,size_t refs=0) \n    double from_metric(double value) const;\n    std::string name() const;\n    ...\n};\n```\n\n----------------------------------------\n\nTITLE: Building AMD64 ArangoDB Build Image\nDESCRIPTION: Command to build the ArangoDB build image for AMD64 architecture.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/scripts/docker/build/linux/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake amd64\n```\n\n----------------------------------------\n\nTITLE: Reverse Method in Ptr List\nDESCRIPTION: The void reverse() method inverts the order of elements in the container, ensuring the sequence is reversed without throwing exceptions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/ptr_list.rst#2025-04-22_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\nvoid reverse();\n```\n\n----------------------------------------\n\nTITLE: Setting Reduction Operation for Distributed Property Map in C++\nDESCRIPTION: Method to replace the current reduction operation with a new one in a distributed property map.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/distributed_property_map.rst#2025-04-22_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate<typename Reduce> void set_reduce(const Reduce& reduce);\n```\n\n----------------------------------------\n\nTITLE: Defining project properties\nDESCRIPTION: Defines the project name, version, and supported languages (CXX in this case). The BOOST_SUPERPROJECT_VERSION variable likely comes from a higher-level CMake configuration in a superproject setting.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/dynamic_bitset/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nproject(boost_dynamic_bitset VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Calculate CRC of a Buffer in C\nDESCRIPTION: This function calculates the CRC of a buffer of bytes. It calls the `update_crc` function with an initial CRC value of 0 to calculate the CRC of the entire buffer.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/zlib/zlib-1.2.13/doc/rfc1952.txt#2025-04-22_snippet_3\n\nLANGUAGE: c\nCODE:\n```\n/* Return the CRC of the bytes buf[0..len-1]. */\nunsigned long crc(unsigned char *buf, int len)\n{\n  return update_crc(0L, buf, len);\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Capture Function Variants in C++\nDESCRIPTION: Declares three static variations of the capture function: capture_basic (captures lvalues by reference and rvalues by value), capture_forward (captures by reference), and capture (captures by decaying each value).\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/capture.hpp.txt#2025-04-22_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_HOF_DECLARE_STATIC_VAR(capture_basic, detail::capture_f<detail::pack_basic_f>);\nBOOST_HOF_DECLARE_STATIC_VAR(capture_forward, detail::capture_f<detail::pack_forward_f>);\nBOOST_HOF_DECLARE_STATIC_VAR(capture, detail::capture_f<detail::pack_f>);\n```\n\n----------------------------------------\n\nTITLE: Configuring pkg-config Settings for LZ4\nDESCRIPTION: Sets up variables for the pkg-config file generation, handling path resolution for library and include directories. This enables other projects to easily link against LZ4 using pkg-config for dependency management.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/lz4/build/cmake/CMakeLists.txt#2025-04-22_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\n# pkg-config\nset(PREFIX \"${CMAKE_INSTALL_PREFIX}\")\n\nif(\"${CMAKE_INSTALL_FULL_LIBDIR}\" STREQUAL \"${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}\")\n  set(LIBDIR \"\\${prefix}/${CMAKE_INSTALL_LIBDIR}\")\nelse()\n  set(LIBDIR \"${CMAKE_INSTALL_FULL_LIBDIR}\")\nendif()\n\nif(\"${CMAKE_INSTALL_FULL_INCLUDEDIR}\" STREQUAL \"${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_INCLUDEDIR}\")\n  set(INCLUDEDIR \"\\${prefix}/${CMAKE_INSTALL_INCLUDEDIR}\")\nelse()\n  set(INCLUDEDIR \"${CMAKE_INSTALL_FULL_INCLUDEDIR}\")\nendif()\n\n# for liblz4.pc substitution\nset(VERSION ${LZ4_VERSION_STRING})\nconfigure_file(${LZ4_LIB_SOURCE_DIR}/liblz4.pc.in liblz4.pc @ONLY)\n```\n\n----------------------------------------\n\nTITLE: Setting Spare Storage Function Signature - C++\nDESCRIPTION: Function declaration for setting sixteen bits of spare storage in Boost Outcome result or outcome types. The function is non-overridable and works with both basic_result and basic_outcome types.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/functions/hooks/set_spare_storage.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nvoid set_spare_storage(basic_result|basic_outcome *, uint16_t) noexcept\n```\n\n----------------------------------------\n\nTITLE: Generating HTML Documentation\nDESCRIPTION: Command to generate HTML documentation using Sphinx build system.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/src/building.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsphinx-build -b html doc/ doc/html/\n```\n\n----------------------------------------\n\nTITLE: Including greater Metafunction Headers in C++\nDESCRIPTION: Header files required to use the 'greater' metafunction in C++ code.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/greater.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/greater.hpp>\n#include <boost/mpl/comparison.hpp>\n```\n\n----------------------------------------\n\nTITLE: Repository Structure for Beast Library\nDESCRIPTION: Directory layout for the Beast library repository, showing the organization of source files, documentation, examples, tests, and tools.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/beast/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n./\n    bin/            Create this to hold executables and project files\n    bin64/          Create this to hold 64-bit Windows executables and project files\n    doc/            Source code and scripts for the documentation\n    include/        Where the header files are located\n    example/        Self contained example programs\n    meta/           Metadata for Boost integration\n    test/           The unit tests for Beast\n    tools/          Scripts used for CI testing\n```\n\n----------------------------------------\n\nTITLE: Binary Function Compose Adaptor Specialization in C++\nDESCRIPTION: Specialization of the compose_adaptor for exactly two functions, which uses the compose_kernel directly without the recursive composition pattern. This is an optimization for the common case of composing just two functions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/compose.hpp.txt#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<class F1, class F2>\nstruct compose_adaptor<F1, F2>\n: detail::compose_kernel<detail::callable_base<F1>, detail::callable_base<F2>>\n{\n    typedef compose_adaptor fit_rewritable_tag;\n    typedef detail::compose_kernel<detail::callable_base<F1>, detail::callable_base<F2>> base_type;\n\n    BOOST_HOF_INHERIT_CONSTRUCTOR(compose_adaptor, base_type)\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Python and GTest Directories in CMake for ArangoDB\nDESCRIPTION: Sets empty values for Python include directory and GTest root directory. These may be populated later in the build process.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/s2geometry/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(PYTHON_INCLUDE_DIR \"\")\nset(GTEST_ROOT \"\")\n```\n\n----------------------------------------\n\nTITLE: Configuring ArangoDB Test Sources in CMake\nDESCRIPTION: CMake configuration that adds source files to the 'arangodbtests' target. Includes various test files for core functionality like string handling, locks, memory allocation, and VelocyPack operations.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/Basics/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(arangodbtests\n  PRIVATE\n  AtomicListTest.cpp\n  ConversionsTest.cpp\n  CsvTest.cpp\n  datetime.cpp\n  FilesTest.cpp\n  FpConvTest.cpp\n  FutureSharedLockTest.cpp\n  HashesTest.cpp\n  HybridLogicalClockTest.cpp\n  InputProcessorsTest.cpp\n  OverloadTest.cpp\n  SizeLimitedStringTest.cpp\n  SourceLocationTest.cpp\n  StringBufferTest.cpp\n  StringBufferInternalTest.cpp\n  StringTest.cpp\n  StringUtf8NormalizeTest.cpp\n  StringUtf8Test.cpp\n  ApplicationServerTest.cpp\n  AttributeNameParserTest.cpp\n  CpuUsageSnapshotTest.cpp\n  EncodingUtilsTest.cpp\n  EndpointTest.cpp\n  FixedSizeAllocatorTest.cpp\n  GuardedTest.cpp\n  LoggerTest.cpp\n  MemoryUsageTest.cpp\n  NumberUtilsTest.cpp\n  RandomTest.cpp\n  ReadWriteLockTest.cpp\n  RecursiveLockerTest.cpp\n  ResourceUsageAllocatorTest.cpp\n  SpinLockTest.cpp\n  StringBufferTest.cpp\n  StringUtilsTest.cpp\n  TypeListTests.cpp\n  UnshackledMutexTest.cpp\n  VelocyPackHelperTest.cpp\n  VelocyPackHelperCompareRandomTest.cpp)\n```\n\n----------------------------------------\n\nTITLE: Setting Up External Dependencies\nDESCRIPTION: Configures external dependencies including taocpp::json, velocypack, and optional Google Test framework.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/json-schema-validation/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(TAOCPP_JSON_BUILD_TESTS OFF CACHE BOOL \"Build test programs\" FORCE)\nset(TAOCPP_JSON_BUILD_EXAMPLES OFF CACHE BOOL \"Build example programs\" FORCE)\n\nif(NOT TARGET taocpp::json)\n    add_subdirectory(external_libs/json EXCLUDE_FROM_ALL)\nendif()\n\nif(NOT TARGET velocypack)\n    add_subdirectory(external_libs/velocypack EXCLUDE_FROM_ALL)\nendif()\n\nif(ARANGO_VALIDATION_TESTS AND NOT TARGET gtest)\n    add_subdirectory(external_libs/googletest EXCLUDE_FROM_ALL)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating Filter Iterator with Iterators Only in C++\nDESCRIPTION: This function template creates a filter_iterator using only iterators. It takes an Iterator and an optional end Iterator as parameters, assuming the Predicate is default-constructed.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/make_filter_iterator.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <class Predicate, class Iterator>\nfilter_iterator<Predicate,Iterator>\nmake_filter_iterator(Iterator x, Iterator end = Iterator());\n```\n\n----------------------------------------\n\nTITLE: Building Boost.HigherOrderFunctions with CMake in Bash\nDESCRIPTION: Commands to create a build directory and configure the Boost.HigherOrderFunctions library with CMake.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/doc/src/building.md.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir build\ncd build\ncmake ..\n```\n\n----------------------------------------\n\nTITLE: Asio Tutorial Program Structure Documentation\nDESCRIPTION: Documentation describing the structure and contents of Asio tutorial programs, organized into sections covering basic timer operations and socket programming using TCP and UDP implementations of the daytime protocol.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/asio/example/cpp03/tutorial/index_dox.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n//\n// Copyright (c) 2003-2021 Christopher M. Kohlhoff (chris at kohlhoff dot com)\n//\n// Distributed under the Boost Software License, Version 1.0. (See accompanying\n// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)\n//\n\n/**\n\\mainpage asio Tutorial\n\n\\section tuttimer Basic Skills\n\nThe tutorial programs in this first section introduce the fundamental concepts\nrequired to use the asio toolkit. Before plunging into the complex world of\nnetwork programming, these tutorial programs illustrate the basic skills using\nsimple asynchronous timers.\n\n\\li \\ref tuttimer1\n\\li \\ref tuttimer2\n\\li \\ref tuttimer3\n\\li \\ref tuttimer4\n\\li \\ref tuttimer5\n\n\\section tutdaytime Introduction to Sockets\n\nThe tutorial programs in this section show how to use asio to develop simple\nclient and server programs. These tutorial programs are based around the <a\nhref=\"http://www.ietf.org/rfc/rfc867.txt\">daytime</a> protocol, which supports\nboth TCP and UDP. \n\nThe first three tutorial programs implement the daytime protocol using TCP.\n\n\\li \\ref tutdaytime1\n\\li \\ref tutdaytime2\n\\li \\ref tutdaytime3\n\nThe next three tutorial programs implement the daytime protocol using UDP.\n\n\\li \\ref tutdaytime4\n\\li \\ref tutdaytime5\n\\li \\ref tutdaytime6\n\nThe last tutorial program in this section demonstrates how asio allows the TCP\nand UDP servers to be easily combined into a single program.\n\n\\li \\ref tutdaytime7\n\n*/\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Groups for Fuzzing Tests in CMake\nDESCRIPTION: Sets up a source group for the fuzzing test files. This helps organize the files in IDEs that support source grouping.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/json/fuzzing/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nsource_group(\"\" FILES\n    fuzz_basic_parser.cpp\n    fuzz_parse.cpp\n    fuzz_parser.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Scope Name Hiding in Doxygen\nDESCRIPTION: This option controls whether doxygen shows members with their full class and namespace scopes.  Setting it to YES hides the scope.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/sort/doc/doxygen/sort_doxyfile.txt#2025-04-22_snippet_37\n\nLANGUAGE: Doxygen\nCODE:\n```\n\"HIDE_SCOPE_NAMES       = NO\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Method Extraction in Doxygen\nDESCRIPTION: This configuration option determines whether local methods should be extracted and included in the generated documentation. Setting it to YES enables the extraction, while NO disables it.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/sort/doc/doxygen/sort_doxyfile.txt#2025-04-22_snippet_29\n\nLANGUAGE: Doxygen\nCODE:\n```\n\"EXTRACT_LOCAL_METHODS  = YES\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Replication2 Test Helper Sources\nDESCRIPTION: Defines source files for the Replication2 test helper library, including mocks and test setup utilities.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/Replication2/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(ARANGODB_REPLICATION2_TEST_HELPER_SOURCES\n  Mocks/DelayedLogFollower.h\n  Mocks/FakeAbstractFollower.h\n  Mocks/FakeFollower.cpp\n  Mocks/FakeFollower.h\n  Helper/ReplicatedLogTestSetup.h\n  Mocks/ParticipantsFactoryMock.h\n  Mocks/FakeReplicatedState.cpp Mocks/FakeReplicatedState.h\n  Mocks/ReplicatedStateMetricsMock.cpp Mocks/ReplicatedStateMetricsMock.h\n  Mocks/DocumentStateMocks.cpp Mocks/DocumentStateMocks.h\n  Mocks/MockOracle.h\n  Mocks/MockVocbase.h\n  Mocks/LeaderCommunicatorMock.h\n  Mocks/RebootIdCacheMock.h\n  Mocks/StorageManagerMock.h\n  Mocks/StateHandleManagerMock.h\n  Mocks/LogLeaderMock.h\n  Mocks/LogFollowerMock.h\n  Mocks/ReplicatedStateHandleMock.h\n  Mocks/FakeFollowerFactory.h\n  Mocks/IHasScheduler.h\n  Helper/ReplicatedLogTestSetup.cpp\n  Mocks/DelayedLogFollower.cpp)\n```\n\n----------------------------------------\n\nTITLE: Upgrading from Boost v. 1.34.* - Container Copy and Transfer\nDESCRIPTION: Illustrates the new capabilities of pointer containers, including copy construction, assignment, and derived-to-base class conversions\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/ptr_container.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nboost::ptr_vector<Derived> derived = ...;\nboost::ptr_vector<Base>    base( derived );\nbase = derived;\n```\n\n----------------------------------------\n\nTITLE: Defining Result Type with Boost Outcome\nDESCRIPTION: Shows the core structure of a basic_result type with template parameters for value, error, and no-value policy\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/basic_result/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <typename T, typename E, typename NoValuePolicy>\nclass basic_result\n```\n\n----------------------------------------\n\nTITLE: Implementing Variadic Max Function using Traditional C++ Approach\nDESCRIPTION: This snippet shows a traditional C++ implementation of a variadic max function using recursive template instantiation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/doc/src/point_free.md.txt#2025-04-22_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\n// Base case\ntemplate<class T>\nT max(const T& x)\n{\n    return x;\n}\n\ntemplate<class T, class... Ts>\nT max(const T& x, const T& y, const Ts&... xs)\n{\n    return std::max(x, max(y, xs...));\n}\n```\n\n----------------------------------------\n\nTITLE: White_Space Character Property Definitions in Unicode 5.2.0\nDESCRIPTION: Lists all Unicode code points classified as White_Space, including control characters, spaces, and various types of whitespace. Contains 26 total code points with their Unicode categories and descriptions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/spirit/workbench/unicode/PropList.txt#2025-04-22_snippet_0\n\nLANGUAGE: Plain Text\nCODE:\n```\n0009..000D    ; White_Space # Cc   [5] <control-0009>..<control-000D>\n0020          ; White_Space # Zs       SPACE\n0085          ; White_Space # Cc       <control-0085>\n00A0          ; White_Space # Zs       NO-BREAK SPACE\n1680          ; White_Space # Zs       OGHAM SPACE MARK\n180E          ; White_Space # Zs       MONGOLIAN VOWEL SEPARATOR\n2000..200A    ; White_Space # Zs  [11] EN QUAD..HAIR SPACE\n2028          ; White_Space # Zl       LINE SEPARATOR\n2029          ; White_Space # Zp       PARAGRAPH SEPARATOR\n202F          ; White_Space # Zs       NARROW NO-BREAK SPACE\n205F          ; White_Space # Zs       MEDIUM MATHEMATICAL SPACE\n3000          ; White_Space # Zs       IDEOGRAPHIC SPACE\n\n# Total code points: 26\n```\n\n----------------------------------------\n\nTITLE: Defining 2D Vertex Coordinates in Plaintext\nDESCRIPTION: This snippet lists 8 pairs of 2D coordinates, each on a separate line. The coordinates appear to define vertices of a shape, starting and ending at (0, 0). The values represent x and y coordinates in a 2D plane.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/polygon/example/input_data/polygon/polygon_004.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n0 0 0 8\n0 8 4 12\n4 12 9 13\n9 13 7 7\n7 7 13 4\n13 4 10 0\n10 0 5 -1\n5 -1 0 0\n```\n\n----------------------------------------\n\nTITLE: Restored Schedule Log Format\nDESCRIPTION: Restored schedule entries showing the same data structure but with updated memory addresses. Format includes timestamp, memory address, latitude/longitude coordinates and location description.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/serialization/example/demo_output.txt#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n6:24  \n0x0032A2F8  34°135'52.56\" 134°22'78.3\" 24th Street and 10th Avenue\n0x0032A508  35°137'23.456\" 133°35'54.12\" State street and Cathedral Vista Lane\n0x0032A628  35°136'15.456\" 133°32'15.3\" White House\n```\n\n----------------------------------------\n\nTITLE: Unique Elements in Pointer Containers\nDESCRIPTION: Removes adjacent duplicate elements from the container using default or custom equality comparisons\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/ptr_sequence_adapter.rst#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\nvoid unique();\nvoid unique( iterator first, iterator last );\ntemplate< class Compare > void unique( Compare comp );\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost Scope Exit Library with CMake\nDESCRIPTION: This CMake script sets up the Boost Scope Exit library as an interface library. It defines the project, creates the library target, sets include directories, and specifies dependencies on other Boost libraries.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/scope_exit/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.16)\n\nproject(boost_scope_exit VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n\nadd_library(boost_scope_exit INTERFACE)\nadd_library(Boost::scope_exit ALIAS boost_scope_exit)\n\ntarget_include_directories(boost_scope_exit INTERFACE include)\n\ntarget_link_libraries(boost_scope_exit\n  INTERFACE\n    Boost::config\n    Boost::function\n    Boost::preprocessor\n    Boost::type_traits\n    Boost::typeof\n)\n\nif(BUILD_TESTING AND EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/test/CMakeLists.txt\")\n\n  add_subdirectory(test)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Visualizing Outcome Library History with Mermaid Gantt Chart\nDESCRIPTION: A Mermaid Gantt chart showing the timeline of Outcome library development from 2014 to 2022, including major milestones, version releases, and significant events in the library's evolution.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/history/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngantt\n  dateFormat YYYY-MM\n  title History of the Outcome library\n  Outcome v1: done, des1, 2014-06,2017-05\n  Boost peer review of v1: done, des2, after des1, 30d\n  Outcome v2 (complete redesign based on first review feedback): done, des3, after des2, 2018-01\n  Boost peer review of v2: done, des4, after des3, 30d\n  Outcome v2.1 (changes from second review): active, des5, 2018-03, 2021-04 \n  Outcome v2.2 (changes from user feedback on v2.1): des6, after des5, 2022-04 \n  section Events\n  Separated from AFIO v1: crit, done, 2014-06,4d\n  Boost.Expected added: crit, done, 2014-10,4d\n  Boost.Expected replaced with feature complete basic_monad: crit, done, 2015-08,4d\n  Non-allocating future-promise implementation dropped: crit, done, 2016-05,4d\n  C++ 11 support dropped: crit, done, 2016-06,4d\n  Implemented LEWG expected&lt;T, E&gt; using basic_monad: crit, done, 2017-02,4d\n  Outcome v1 replaced with prototype v2 in git repo: crit, done, 2017-07,4d\n  Boost.Outcome generated by script from Outcome repo: crit, done, 2017-10,4d\n  New tutorial finally complete: crit, done, 2017-12,4d\n  Outcome v2.1 feature complete, maturation begins: crit, done, 2018-04,4d\n  Boost.Outcome docs gain BoostDoc theming: crit, done, 2018-12,4d\n  Release of v2.1 into Boost 1.70: crit, active, 2019-04,4d\n  Planned release of v2.2 into Boost 1.76: crit, active, 2021-04,4d\n```\n\n----------------------------------------\n\nTITLE: ConstInvocable Requirements Table in ReStructuredText\nDESCRIPTION: Defines the requirements for the ConstInvocable concept in a ReStructuredText table format. The table shows the expression syntax for invoking a const object with two arguments and specifies that this expression must be well-formed in an unevaluated context.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/doc/src/concepts.md.txt#2025-04-22_snippet_5\n\nLANGUAGE: rst\nCODE:\n```\n+----------------------------------------+-------------------------------------------------------+\n| Expression                             | Requirements                                          |\n+========================================+=======================================================+\n| ``INVOKE(f, arg1, arg2)``              | the expression is well-formed in unevaluated context  |\n+----------------------------------------+-------------------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Using Boost Locale with Boost.Filesystem for UTF-8 Handling in C++\nDESCRIPTION: This snippet demonstrates how to set up a global locale using Boost Locale and configure Boost.Filesystem to work with UTF-8 encoded filenames on Windows. It creates a file with a non-ASCII name.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/doc/default_encoding_under_windows.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/locale.hpp>\n#include <boost/filesystem/path.hpp>\n#include <boost/filesystem/fstream.hpp>\n\nint main()\n{\n    // Create and install global locale\n    std::locale::global(boost::locale::generator().generate(\"\"));\n    // Make boost.filesystem use it\n    boost::filesystem::path::imbue(std::locale());\n    // Now Works perfectly fine with UTF-8!\n    boost::filesystem::ofstream hello(\"שלום.txt\"); \n}\n```\n\n----------------------------------------\n\nTITLE: Setting LZ4 Source Directory and Build Options in CMake\nDESCRIPTION: Sets the path to the LZ4 source directory and defines build options for CLI programs. This initializes the basic configuration needed for the LZ4 build system.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/lz4/build/cmake/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(LZ4_TOP_SOURCE_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/../..\")\n\noption(LZ4_BUILD_CLI \"Build lz4 program\" ON)\noption(LZ4_BUILD_LEGACY_LZ4C \"Build lz4c progam with legacy argument support\" ON)\n```\n\n----------------------------------------\n\nTITLE: Hyphen Character Property Definitions in Unicode 5.2.0\nDESCRIPTION: Lists all Unicode code points classified specifically as Hyphen, a subset of dash characters used for hyphenation. Contains 11 total code points with their Unicode categories and descriptions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/spirit/workbench/unicode/PropList.txt#2025-04-22_snippet_4\n\nLANGUAGE: Plain Text\nCODE:\n```\n002D          ; Hyphen # Pd       HYPHEN-MINUS\n00AD          ; Hyphen # Cf       SOFT HYPHEN\n058A          ; Hyphen # Pd       ARMENIAN HYPHEN\n1806          ; Hyphen # Pd       MONGOLIAN TODO SOFT HYPHEN\n2010..2011    ; Hyphen # Pd   [2] HYPHEN..NON-BREAKING HYPHEN\n2E17          ; Hyphen # Pd       DOUBLE OBLIQUE HYPHEN\n30FB          ; Hyphen # Po       KATAKANA MIDDLE DOT\nFE63          ; Hyphen # Pd       SMALL HYPHEN-MINUS\nFF0D          ; Hyphen # Pd       FULLWIDTH HYPHEN-MINUS\nFF65          ; Hyphen # Po       HALFWIDTH KATAKANA MIDDLE DOT\n\n# Total code points: 11\n```\n\n----------------------------------------\n\nTITLE: Example Usage of apply Metafunction with Lambda Expressions in C++\nDESCRIPTION: Example demonstrating how to use the apply metafunction with both direct lambda expressions and quoted metafunctions. Creates an int_plus template and applies it with different syntax approaches.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/apply.rst#2025-04-22_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\ntemplate< typename N1, typename N2 > struct int_plus\n    : int_<( N1::value + N2::value )>\n{\n};\n\ntypedef apply< int_plus<_1,_2>, int_<2>, int_<3> >::type r1;\ntypedef apply< quote\\2\\<int_plus>, int_<2>, int_<3> >::type r2;\n\nBOOST_MPL_ASSERT_RELATION( r1::value, ==, 5 );\nBOOST_MPL_ASSERT_RELATION( r2::value, ==, 5 );\n```\n\n----------------------------------------\n\nTITLE: Named Parameter Definition for Boost.Parameter Example\nDESCRIPTION: Defines named parameters with tag types in the 'kw' namespace for use with the Boost.Parameter macro example.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_65\n\nLANGUAGE: cpp\nCODE:\n```\n|BOOST_PARAMETER_NAME|_\\((_lrc, kw) in(lrc))\n|BOOST_PARAMETER_NAME|_\\((_lr, kw) in_out(lr))\n|BOOST_PARAMETER_NAME|_\\((_rrc, kw) in(rrc))\n|BOOST_PARAMETER_NAME|_\\((_rr, kw) consume(rr))\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: Sets the include directory for the `boost_geometry` library.  The `INTERFACE` keyword ensures that this include directory is also used by any target that links against `boost_geometry`.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/geometry/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n\"target_include_directories(boost_geometry INTERFACE include)\"\n```\n\n----------------------------------------\n\nTITLE: Setting Thread API Detection in CMake for Boost Thread\nDESCRIPTION: Detects the appropriate threading API (pthread or win32) based on the platform. Sets pthread as default but changes to win32 on Windows platforms except Cygwin.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/thread/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(THREADS_PREFER_PTHREAD_FLAG ON)\nfind_package(Threads REQUIRED)\n\nset(_default_threadapi pthread)\n\nif(WIN32 AND NOT CMAKE_CXX_PLATFORM_ID MATCHES \"Cygwin\")\n  set(_default_threadapi win32)\nendif()\n\nset(BOOST_THREAD_THREADAPI ${_default_threadapi} CACHE STRING \"Boost.Thread threading API (pthread or win32)\")\nset_property(CACHE BOOST_THREAD_THREADAPI PROPERTY STRINGS pthread win32)\n\nunset(_default_threadapi)\n\nmessage(STATUS \"Boost.Thread: threading API is ${BOOST_THREAD_THREADAPI}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Jemalloc Memory Allocator in CMake\nDESCRIPTION: Conditionally configures the jemalloc memory allocator, including optional profiling features with libunwind support if enabled.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/CMakeLists.txt#2025-04-22_snippet_24\n\nLANGUAGE: CMake\nCODE:\n```\nif (USE_JEMALLOC)\n  target_link_libraries(arangodbtests ${JEMALLOC_LIB})\n  if (USE_JEMALLOC_PROF AND USE_LIBUNWIND)\n    target_link_libraries(arangodbtests ${LIBUNWIND_LIB})\n  endif ()\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Defining the plus Metafunction Template in C++\nDESCRIPTION: Template definition for the 'plus' metafunction, which takes multiple type parameters and returns their sum. The exact number of parameters is unspecified, allowing for variadic usage.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/plus.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      typename T1\n    , typename T2\n    , typename T3 = |unspecified|\n    |...|\n    , typename T\\ *n* = |unspecified|\n    >\nstruct plus\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining the prior Iterator Metafunction in C++\nDESCRIPTION: Template definition for the prior metafunction. It takes an Iterator type parameter and returns an unspecified type representing the previous iterator in the sequence.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/prior.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      typename Iterator\n    >\nstruct prior\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Matrix Data Structure\nDESCRIPTION: A 5x4 numeric matrix containing coordinate points or measurement values. The first line indicates 0, second line shows 5, followed by five rows of four space-separated integers each.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/polygon/example/input_data/random/random_021.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n0\n5\n-47 32 0 28\n-20 -22 9 -13\n-13 37 21 30\n-7 47 2 47\n26 47 32 1\n```\n\n----------------------------------------\n\nTITLE: Using bitand_ Metafunction in C++ Compile-Time Assertions\nDESCRIPTION: Example usage of the bitand_ metafunction with integral constants to perform compile-time bitwise AND operations and assertions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/bitand_.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntypedef integral_c<unsigned,0> u0;\ntypedef integral_c<unsigned,1> u1;\ntypedef integral_c<unsigned,2> u2;\ntypedef integral_c<unsigned,8> u8;\ntypedef integral_c<unsigned,0xffffffff> uffffffff;\n\nBOOST_MPL_ASSERT_RELATION( (bitand_<u0,u0>::value), ==, 0 );\nBOOST_MPL_ASSERT_RELATION( (bitand_<u1,u0>::value), ==, 0 );\nBOOST_MPL_ASSERT_RELATION( (bitand_<u0,u1>::value), ==, 0 );\nBOOST_MPL_ASSERT_RELATION( (bitand_<u0,uffffffff>::value), ==, 0 );\nBOOST_MPL_ASSERT_RELATION( (bitand_<u1,uffffffff>::value), ==, 1 );\nBOOST_MPL_ASSERT_RELATION( (bitand_<u8,uffffffff>::value), ==, 8 );\n```\n\n----------------------------------------\n\nTITLE: Listing Pattern White Space Characters in Unicode\nDESCRIPTION: Lists Unicode code points classified as Pattern_White_Space. These characters are considered whitespace in regular expression patterns. The list includes common control characters like tab and line feed, as well as spaces and bidirectional formatting characters.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/spirit/workbench/unicode/PropList.txt#2025-04-22_snippet_29\n\nLANGUAGE: Unicode data format\nCODE:\n```\n0009..000D    ; Pattern_White_Space # Cc   [5] <control-0009>..<control-000D>\n0020          ; Pattern_White_Space # Zs       SPACE\n0085          ; Pattern_White_Space # Cc       <control-0085>\n200E..200F    ; Pattern_White_Space # Cf   [2] LEFT-TO-RIGHT MARK..RIGHT-TO-LEFT MARK\n2028          ; Pattern_White_Space # Zl       LINE SEPARATOR\n2029          ; Pattern_White_Space # Zp       PARAGRAPH SEPARATOR\n\n# Total code points: 11\n```\n\n----------------------------------------\n\nTITLE: Adding Archive Headers to IDE in CMake\nDESCRIPTION: Adds archive-related header files to the IDE for better organization. Groups headers by their location and functionality into custom targets with appropriate folder properties.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/serialization/CMake/CMakeLists.txt#2025-04-22_snippet_22\n\nLANGUAGE: CMake\nCODE:\n```\nfile(GLOB x \n  RELATIVE \"${CMAKE_CURRENT_SOURCE_DIR}\" \n  \"${CMAKE_CURRENT_SOURCE_DIR}/../include/boost/archive/*.hpp\"\n)\nadd_custom_target(archive SOURCES ${x})\nset_property(TARGET archive PROPERTY FOLDER \"serialization\")\n\nfile(GLOB x \n  RELATIVE \"${CMAKE_CURRENT_SOURCE_DIR}\" \n  \"${CMAKE_CURRENT_SOURCE_DIR}/../include/boost/archive/detail/*.hpp\"\n)\nadd_custom_target(archive-detail SOURCES ${x})\nset_property(TARGET archive-detail PROPERTY FOLDER \"serialization\")\n\nfile(GLOB x \n  RELATIVE \"${CMAKE_CURRENT_SOURCE_DIR}\" \n  \"${CMAKE_CURRENT_SOURCE_DIR}/../include/boost/archive/impl/*.ipp\"\n)\nadd_custom_target(archive-impl SOURCES ${x})\nset_property(TARGET archive-impl PROPERTY FOLDER \"serialization\")\n\nfile(GLOB x\n  RELATIVE \"${CMAKE_CURRENT_SOURCE_DIR}\" \n  \"${CMAKE_CURRENT_SOURCE_DIR}/../include/boost/archive/iterators/*.hpp\"\n)\nadd_custom_target(archive-iterators SOURCES ${x})\nset_property(TARGET archive-iterators PROPERTY FOLDER \"serialization\")\n```\n\n----------------------------------------\n\nTITLE: Using end Metafunction with Vector in C++\nDESCRIPTION: Demonstrates how to use the 'end' metafunction with a vector of long integers. It shows the relationship between the begin, end, and next metafunctions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/end.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntypedef vector<long> v;\ntypedef begin<v>::type first;\ntypedef end<v>::type last;\n\nBOOST_MPL_ASSERT(( is_same< next<first>::type, last > ));\n```\n\n----------------------------------------\n\nTITLE: Generating header files for MSVC\nDESCRIPTION: This snippet generates header files required for building jemalloc with MSVC solutions by invoking autogen.sh script with CC set to cl.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/jemalloc/jemalloc/INSTALL.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n\"sh -c \\\"CC=cl ./autogen.sh\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring V8 JavaScript Client in CMake\nDESCRIPTION: Conditionally includes the ArangoDB JavaScript client setup if V8 is enabled.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/client-tools/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (USE_V8)\n  include(InstallArangoDBJSClient)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring Undocumented Member Hiding in Doxygen\nDESCRIPTION: This option specifies whether undocumented members inside documented classes or files are hidden from the documentation. Setting it to YES hides these members.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/sort/doc/doxygen/sort_doxyfile.txt#2025-04-22_snippet_31\n\nLANGUAGE: Doxygen\nCODE:\n```\n\"HIDE_UNDOC_MEMBERS     = YES\"\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version\nDESCRIPTION: This snippet specifies the minimum required CMake version for the project.  It ensures that the CMake version used to build the project is within the range of 3.5 to 3.16.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/property_map_parallel/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.16)\n```\n\n----------------------------------------\n\nTITLE: Implementing Value Category Evaluation in C++\nDESCRIPTION: Defines a struct U with static member functions to evaluate and return the value category of passed std::bitset objects, used in conjunction with Boost.Parameter.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_70\n\nLANGUAGE: cpp\nCODE:\n```\nenum invoked\n{\n    passed_by_lvalue_reference_to_const\n  , passed_by_lvalue_reference\n  , passed_by_rvalue_reference_to_const\n  , passed_by_rvalue_reference\n};\n\nstruct U\n{\n    template <std::size_t N>\n    static invoked evaluate_category(|std_bitset|_\\<N + 1> const&)\n    {\n        return passed_by_lvalue_reference_to_const;\n    }\n\n    template <std::size_t N>\n    static invoked evaluate_category(|std_bitset|_\\<N + 1>&)\n    {\n        return passed_by_lvalue_reference;\n    }\n\n    template <std::size_t N>\n    static invoked evaluate_category(|std_bitset|_\\<N + 1> const&&)\n    {\n        return passed_by_rvalue_reference_to_const;\n    }\n\n    template <std::size_t N>\n    static invoked evaluate_category(|std_bitset|_\\<N + 1>&&)\n    {\n        return passed_by_rvalue_reference;\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Variant Implementations with g++ 7.4.0 (Optimized)\nDESCRIPTION: Compile time and run time benchmarks for variant2, boost::variant, and std::variant using g++ 7.4.0 with -O3 -DNDEBUG optimization level. Shows compilation times and execution times for 100 million iterations.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/variant2/benchmark/benchmark2.md#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n      variant2 (-DONLY_V2): 1595 ms\nboost::variant (-DONLY_BV): 3084 ms\n  std::variant (-DONLY_SV): 1620 ms\n```\n\nLANGUAGE: text\nCODE:\n```\nN=100000000:\n        prefix:    853 ms; S=416666583333336\n      variant2:   1681 ms; S=416666583333336\nboost::variant:   1773 ms; S=416666583333336\n  std::variant:   3989 ms; S=416666583333336\n```\n\n----------------------------------------\n\nTITLE: Adding Custom CMake Targets and Dependencies\nDESCRIPTION: Defines a custom target 'examples' and makes 'hana_check' depend on it. This setup prepares the project for building all example files together, leveraging CMake's build mechanism.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hana/example/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_target(examples COMMENT \"Build all the examples.\")\nadd_dependencies(hana_check examples)\n```\n\n----------------------------------------\n\nTITLE: Comparing Result with Success Type Using Inequality Operator in C++\nDESCRIPTION: This operator returns true if the result is not successful or if its value doesn't compare equal to the value in the success type sugar. When A is void, this call is equivalent to has_error(). The operator requires valid expressions between value_type and A types.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/basic_result/equality_success_type.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nbool operator!=(const success_type<A> &) const\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Groups in CMake\nDESCRIPTION: Defines source file grouping for the benchmark project files including Jamfile and bench.cpp\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/json/bench/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nsource_group(\"\" FILES\n    Jamfile\n    bench.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Building Zlib with Visual Studio 2015\nDESCRIPTION: Instructions for building Zlib using Microsoft Visual C++ 2015. Decompress the Zlib files first before continuing with the solution file.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/zlib/zlib-1.2.13/contrib/vstudio/readme.txt#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n- Decompress current zlib, including all contrib/* files\n- Open contrib\\vstudio\\vc14\\zlibvc.sln with Microsoft Visual C++ 2015\n```\n\n----------------------------------------\n\nTITLE: Building Point Index Executable with S2 Dependencies in CMake\nDESCRIPTION: Creates an executable named 'point_index' from the source file 'point_index.cc' and links it with the S2testing and S2 libraries.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/s2geometry/master/doc/examples/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(point_index point_index.cc)\ntarget_link_libraries(point_index LINK_PUBLIC s2testing s2)\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows-Specific Features for Boost.Log\nDESCRIPTION: Sets up Windows-specific source files, security definitions, and optional features like debug output, IPC (Inter-Process Communication), and Event Log support when building on Windows platforms.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/log/CMakeLists.txt#2025-04-22_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nif (WIN32)\n    list(APPEND boost_log_sources\n        src/windows/light_rw_mutex.cpp\n        src/windows/is_debugger_present.cpp\n    )\n    list(APPEND boost_log_common_private_defines\n        # Disable warnings about using 'insecure' standard C functions.\n        # These affect MSVC C/C++ library headers, which are used by various compilers.\n        _SCL_SECURE_NO_WARNINGS\n        _SCL_SECURE_NO_DEPRECATE\n        _CRT_SECURE_NO_WARNINGS\n        _CRT_SECURE_NO_DEPRECATE\n    )\n\n    if (NOT BOOST_LOG_WITHOUT_DEBUG_OUTPUT)\n        list(APPEND boost_log_sources src/windows/debug_output_backend.cpp)\n    endif()\n\n    if (NOT BOOST_LOG_WITHOUT_IPC)\n        list(APPEND boost_log_sources\n            src/windows/auto_handle.hpp\n            src/windows/object_name.cpp\n            src/windows/utf_code_conversion.hpp\n            src/windows/mapped_shared_memory.hpp\n            src/windows/mapped_shared_memory.cpp\n            src/windows/ipc_sync_wrappers.hpp\n            src/windows/ipc_sync_wrappers.cpp\n            src/windows/ipc_reliable_message_queue.cpp\n        )\n        list(APPEND boost_log_private_libs\n            secur32\n        )\n    endif()\n\n    if (NOT BOOST_LOG_WITHOUT_EVENT_LOG)\n        # Find message compiler (mc)\n        if (NOT CMAKE_MC_COMPILER AND DEFINED ENV{MC} AND EXISTS \"$ENV{MC}\" AND NOT IS_DIRECTORY \"$ENV{MC}\")\n            set(CMAKE_MC_COMPILER \"$ENV{MC}\")\n        endif()\n        if (NOT CMAKE_MC_COMPILER)\n            if (CMAKE_CXX_COMPILER_ID STREQUAL \"GNU\")\n                set(mc_executable \"windmc.exe\")\n            else()\n                set(mc_executable \"mc.exe\")\n            endif()\n            if (CMAKE_RC_COMPILER)\n                # Use resource compiler directory as a hint. CMake will initialize CMAKE_RC_COMPILER\n                # automatically based on environment variables, and message compiler typically resides\n                # in the same directory in the Windows SDK installation. Reusing resource compiler\n                # directory also provides user's choice of Windows SDK version and host and target\n                # architecture.\n                get_filename_component(rc_compiler_path \"${CMAKE_RC_COMPILER}\" DIRECTORY)\n                list(APPEND mc_search_hints \"${rc_compiler_path}\")\n            endif()\n            if (CMAKE_CXX_COMPILER)\n                # Message compiler can be located next to the compiler, e.g. on MinGW installations.\n                get_filename_component(cxx_compiler_path \"${CMAKE_CXX_COMPILER}\" DIRECTORY)\n                list(APPEND mc_search_hints \"${cxx_compiler_path}\")\n            endif()\n            message(DEBUG \"Boost.Log: ${mc_executable} search hints: ${mc_search_hints}\")\n            find_program(CMAKE_MC_COMPILER \"${mc_executable}\" HINTS \"${mc_search_hints}\")\n            if (CMAKE_MC_COMPILER STREQUAL \"CMAKE_MC_COMPILER-NOTFOUND\")\n                message(STATUS \"Boost.Log: Message compiler ${mc_executable} not found, event log support will be disabled.\")\n                unset(CMAKE_MC_COMPILER)\n            else()\n                message(STATUS \"Boost.Log: Message compiler found: ${CMAKE_MC_COMPILER}\")\n            endif()\n        endif()\n\n        if (CMAKE_MC_COMPILER)\n            add_custom_command(\n                OUTPUT\n                    \"${CMAKE_CURRENT_BINARY_DIR}/src/windows/simple_event_log.h\"\n                    \"${CMAKE_CURRENT_BINARY_DIR}/src/windows/simple_event_log.rc\"\n                COMMAND \"${CMAKE_MC_COMPILER}\"\n                ARGS\n                    -h \"${CMAKE_CURRENT_BINARY_DIR}/src/windows\"\n                    -r \"${CMAKE_CURRENT_BINARY_DIR}/src/windows\"\n                    \"${CMAKE_CURRENT_SOURCE_DIR}/src/windows/simple_event_log.mc\"\n                MAIN_DEPENDENCY\n                    \"${CMAKE_CURRENT_SOURCE_DIR}/src/windows/simple_event_log.mc\"\n                COMMENT\n                    \"Building src/windows/simple_event_log.mc\"\n                VERBATIM\n            )\n            set_source_files_properties(\"${CMAKE_CURRENT_BINARY_DIR}/src/windows/simple_event_log.h\" PROPERTIES GENERATED TRUE)\n            set_source_files_properties(\"${CMAKE_CURRENT_BINARY_DIR}/src/windows/simple_event_log.rc\" PROPERTIES GENERATED TRUE)\n\n            list(APPEND boost_log_sources\n                \"${CMAKE_CURRENT_BINARY_DIR}/src/windows/simple_event_log.h\"\n                \"${CMAKE_CURRENT_BINARY_DIR}/src/windows/simple_event_log.rc\"\n                src/windows/event_log_registry.hpp\n                src/windows/event_log_backend.cpp\n            )\n            list(APPEND boost_log_private_libs\n                psapi\n            )\n        endif()\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: C++ Stream Output Operator for Pointer Display\nDESCRIPTION: An overloaded stream output operator for displaying void pointers. This function was called once during profiling but consumed negligible execution time.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/serialization/doc/profile1.txt#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nstd::ostream::operator<<(void const*)\n```\n\n----------------------------------------\n\nTITLE: Configuring Inline Simple Structs in Doxygen\nDESCRIPTION: Setting to display simple structs, classes, and unions inline in their scope's documentation. Applies to structures with only public data fields or simple typedef fields. Default is NO.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/sort/doc/doxygen/sort_doxyfile.txt#2025-04-22_snippet_21\n\nLANGUAGE: text\nCODE:\n```\nINLINE_SIMPLE_STRUCTS  = NO\n```\n\n----------------------------------------\n\nTITLE: Setting Compile Definitions for Boost Chrono\nDESCRIPTION: Configures compile definitions for the Boost Chrono library, including options for shared or static linking.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/chrono/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(boost_chrono\n  PUBLIC BOOST_CHRONO_NO_LIB\n  # Source files already define BOOST_CHRONO_SOURCE\n  # PRIVATE BOOST_CHRONO_SOURCE\n)\n\nif(BUILD_SHARED_LIBS)\n  target_compile_definitions(boost_chrono PUBLIC BOOST_CHRONO_DYN_LINK)\nelse()\n  target_compile_definitions(boost_chrono PUBLIC BOOST_CHRONO_STATIC_LINK)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring clang-tidy\nDESCRIPTION: This section configures clang-tidy for linting. It checks if `BOOST_GIL_USE_CLANG_TIDY` is enabled and CMake version is greater than or equal to 3.6. It then finds the clang-tidy executable and sets the `CMAKE_CXX_CLANG_TIDY` variable to enable clang-tidy analysis.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/CMakeLists.txt#2025-04-22_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\n\"if(BOOST_GIL_USE_CLANG_TIDY AND CMAKE_VERSION VERSION_GREATER_EQUAL 3.6)\n  find_program(_clang_tidy\n    NAMES clang-tidy-7 clang-tidy-6.0 clang-tidy-5.0 clang-tidy-4.0 clang-tidy\n    DOC \\\"Path to clang-tidy executable\\\")\n\n  if(_clang_tidy)\n    message(STATUS \\\"Boost.GIL: Configuring ${_clang_tidy} to run linting analysis for targets\\\")\n    set(CMAKE_CXX_CLANG_TIDY ${_clang_tidy})\n  endif()\n  unset(_clang_tidy)\nendif()\"\n```\n\n----------------------------------------\n\nTITLE: Building Zlib with Visual Studio 2010\nDESCRIPTION: Instructions for building Zlib using Microsoft Visual C++ 2010. You need to decompress the Zlib files before opening the project in Visual Studio.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/zlib/zlib-1.2.13/contrib/vstudio/readme.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n- Decompress current zlib, including all contrib/* files\n- Open contrib\\vstudio\\vc10\\zlibvc.sln with Microsoft Visual C++ 2010\n```\n\n----------------------------------------\n\nTITLE: Implementing Parameter Dispatching in C++\nDESCRIPTION: Functions demonstrating how to dispatch based on parameter presence. Uses template metaprogramming to handle cases where a parameter is present or absent.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter_python/doc/index.rst#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\nvoid dfs_dispatch(ArgumentPack const& args, mpl::false_)\n{\n    *…compute and use default color map…*\n}\n\ntemplate <class ArgumentPack, class ColorMap>\nvoid dfs_dispatch(ArgumentPack const& args, ColorMap colormap)\n{\n    *…use colormap…*\n}\n\ntemplate <class ArgumentPack>\nvoid depth_first_search(ArgumentPack const& args)\n{\n    core::dfs_dispatch(args, args[color | mpl::false_()]);\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking N-ary Metafunction with Arguments\nDESCRIPTION: Demonstrates how to invoke an n-ary metafunction with actual type arguments and access its result through the nested 'type' typedef. The metafunction accepts multiple type parameters.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/Metafunction.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntypedef f<a1, ... an>::type x;\n```\n\n----------------------------------------\n\nTITLE: Pretty Example Executable Configuration\nDESCRIPTION: Configures the 'pretty' executable target with its source files and links it against Boost::json library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/json/example/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(pretty\n    file.hpp\n    pretty.cpp\n)\nset_property(TARGET pretty PROPERTY FOLDER \"example\")\ntarget_link_libraries(pretty PRIVATE Boost::json)\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectory for Testing\nDESCRIPTION: This conditional block will add a subdirectory for running tests if the BUILD_TESTING flag is set and a CMakeLists.txt file exists in the test directory.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/range/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(BUILD_TESTING AND EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/test/CMakeLists.txt\")\n\n  add_subdirectory(test)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Listing Other ID Start Characters in Unicode\nDESCRIPTION: Lists Unicode code points classified as Other_ID_Start. These characters can be used as the starting character in an identifier but don't meet the criteria for other identifier categories. The list includes special symbols like Script Capital P and the estimated symbol.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/spirit/workbench/unicode/PropList.txt#2025-04-22_snippet_25\n\nLANGUAGE: Unicode data format\nCODE:\n```\n2118          ; Other_ID_Start # So       SCRIPT CAPITAL P\n212E          ; Other_ID_Start # So       ESTIMATED SYMBOL\n309B..309C    ; Other_ID_Start # Sk   [2] KATAKANA-HIRAGANA VOICED SOUND MARK..KATAKANA-HIRAGANA SEMI-VOICED SOUND MARK\n\n# Total code points: 4\n```\n\n----------------------------------------\n\nTITLE: Implementing Mandelbrot Set Function Object in C++\nDESCRIPTION: Defines a function object that computes the Mandelbrot set value at given coordinates. It models the PixelDereferenceAdaptorConcept and produces grayscale pixel values.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/tutorial/gradient.rst.txt#2025-04-22_snippet_16\n\nLANGUAGE: cpp\nCODE:\n```\nstruct mandelbrot_fn\n{\n  typedef point<ptrdiff_t>   point_t;\n\n  typedef mandelbrot_fn       const_t;\n  typedef gray8_pixel_t       value_type;\n  typedef value_type          reference;\n  typedef value_type          const_reference;\n  typedef point_t             argument_type;\n  typedef reference           result_type;\n  static bool constexpr is_mutable = false;\n\n  mandelbrot_fn() {}\n  mandelbrot_fn(const point_t& sz) : _img_size(sz) {}\n\n  result_type operator()(const point_t& p) const\n  {\n      double t=get_num_iter(point<double>(p.x/(double)_img_size.x*3-2, p.y/(double)_img_size.y*3-1.5f));\n      return value_type((bits8)(pow(t,0.2)*255));\n  }\nprivate:\n  point_t _img_size;\n\n  double get_num_iter(const point<double>& p) const\n  {\n      point<double> Z(0,0);\n      for (int i=0; i<100; ++i)\n  {\n          Z = point<double>(Z.x*Z.x - Z.y*Z.y + p.x, 2*Z.x*Z.y + p.y);\n          if (Z.x*Z.x + Z.y*Z.y > 4)\n              return i/(double)100;\n      }\n      return 0;\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Reverse Iterator Template in C++\nDESCRIPTION: Declares a class template for reverse_iterator, which adapts an existing bidirectional or random-access iterator to iterate in the opposite direction.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/facade-and-adaptor.rst#2025-04-22_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <class Iterator>\nclass reverse_iterator;\n```\n\n----------------------------------------\n\nTITLE: Configuring BOOST_LEAF Build Options in Meson\nDESCRIPTION: This snippet defines multiple Meson build system options for configuring the compilation and testing of the BOOST_LEAF library. It includes settings for header inclusion, example building, diagnostics, warning suppression, and enabling various build types.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/leaf/meson_options.txt#2025-04-22_snippet_0\n\nLANGUAGE: meson\nCODE:\n```\noption('leaf_hpp',type:'boolean',value:false,description:'Unit tests #include <boost/leaf.hpp> instead of individual headers')\noption('leaf_boost_examples',type:'boolean',value:false,description:'Builds the Boost examples and Boost Outcome benchmark')\noption('leaf_lua_examples',type:'boolean',value:false,description:'Enable or disable downloading of Lua and building the Lua examples')\noption('leaf_diagnostics',type:'integer',value:1,description:'BOOST_LEAF_DIAGNOSTICS value')\noption('leaf_suppress_warnings',type:'boolean',value:true,description:'Suppress compiler warnings (#pragma system_header)')\noption('leaf_enable_unit_tests',type:'boolean',value:true,description:'Enable the building of unit test programs')\noption('leaf_enable_examples',type:'boolean',value:true,description:'Enable the building of example programs')\noption('leaf_enable_benchmarks',type:'boolean',value:false,description:'Enable the building of benchmark programs')\n```\n\n----------------------------------------\n\nTITLE: Checking for Required Libraries\nDESCRIPTION: Checks for the presence of zlib, lzo2, and lz4 libraries on the system.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/snappy/snappy-1.1.9/CMakeLists.txt#2025-04-22_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(CheckLibraryExists)\ncheck_library_exists(z zlibVersion \"\" HAVE_LIBZ)\ncheck_library_exists(lzo2 lzo1x_1_15_compress \"\" HAVE_LIBLZO2)\ncheck_library_exists(lz4 LZ4_compress_default \"\" HAVE_LIBLZ4)\n```\n\n----------------------------------------\n\nTITLE: MSVC Compiler Flag Adjustments\nDESCRIPTION: This code snippet adjusts compiler flags specifically for MSVC. It removes `/W3` and `-W3` from `CMAKE_CXX_FLAGS` to customize warning levels.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/CMakeLists.txt#2025-04-22_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\n\"if(\\\"${CMAKE_CXX_COMPILER_ID}\\\" STREQUAL \\\"MSVC\\\")\n  string(REGEX REPLACE \\\"/W3\\\" \\\"\\\" CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS})\n  string(REGEX REPLACE \\\"-W3\\\" \\\"\\\" CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS})\nendif()\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Inline Documentation Hiding in Doxygen\nDESCRIPTION: This option specifies whether documentation blocks found inside function bodies are hidden. Setting it to YES hides these blocks.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/sort/doc/doxygen/sort_doxyfile.txt#2025-04-22_snippet_34\n\nLANGUAGE: Doxygen\nCODE:\n```\n\"HIDE_IN_BODY_DOCS      = NO\"\n```\n\n----------------------------------------\n\nTITLE: Defining Concrete Types for Image Processing in C++\nDESCRIPTION: This code snippet demonstrates the naming convention for concrete types in the Generic Image Library, focusing on different formats and representations of color images. It illustrates the application of components such as ColorSpace, BitDepth, and ClassType, which are crucial for accurately representing image data.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/naming.rst.txt#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nbgr8_image_t             a;    // 8-bit interleaved BGR image\ncmyk16_pixel_t           b;    // 16-bit CMYK pixel value;\ncmyk16c_planar_ref_t     c(b); // const reference to a 16-bit planar CMYK pixel.\nrgb32f_planar_step_ptr_t d;    // step pointer to a 32-bit planar RGB pixel.\n```\n\n----------------------------------------\n\nTITLE: Configuring Debug Level Option in Meson for ArangoDB\nDESCRIPTION: Sets up a Meson option for configuring the debug level. It allows values from 0 to 7, with a default of 1. This option is used to enable run-time debugging, as referenced in the lib/lz4hc.c file.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/lz4/contrib/meson/meson_options.txt#2025-04-22_snippet_0\n\nLANGUAGE: meson\nCODE:\n```\noption('debug_level', type: 'integer', min: 0, max: 7, value: 1,\n  description: 'Enable run-time debug. See lib/lz4hc.c')\n```\n\n----------------------------------------\n\nTITLE: Displaying Build Status for Boost PolyCollection in Markdown\nDESCRIPTION: This snippet shows how to create a table in Markdown to display build status for different branches of the Boost PolyCollection library, including links to Travis CI, AppVeyor, and regression test results.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/poly_collection/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# Boost PolyCollection library\n\nBranch   | Travis | AppVeyor | Regression tests\n---------|--------|----------|-----------------\ndevelop  | [![Build Status](https://travis-ci.org/boostorg/poly_collection.svg?branch=develop)](https://travis-ci.org/boostorg/poly_collection) | [![Build Status](https://ci.appveyor.com/api/projects/status/github/boostorg/poly_collection?branch=develop&svg=true)](https://ci.appveyor.com/project/joaquintides/poly-collection) | [![Test Results](./test_results.svg)](https://www.boost.org/development/tests/develop/developer/poly_collection.html)\nmaster   | [![Build Status](https://travis-ci.org/boostorg/poly_collection.svg?branch=master)](https://travis-ci.org/boostorg/poly_collection) | [![Build Status](https://ci.appveyor.com/api/projects/status/github/boostorg/poly_collection?branch=master&svg=true)](https://ci.appveyor.com/project/joaquintides/poly-collection) | [![Test Results](./test_results.svg)](https://www.boost.org/development/tests/master/developer/poly_collection.html)\n```\n\n----------------------------------------\n\nTITLE: Linking V8 Interface Library\nDESCRIPTION: This snippet links the 'v8_interface' library to the 'arangodbtests-iresearch' executable, allowing interaction with the V8 JavaScript engine if it is included.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/IResearch/CMakeLists.txt#2025-04-22_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(arangodbtests-iresearch v8_interface)\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost.Iostreams LZMA Multithreading Support in CMake\nDESCRIPTION: Checks for LZMA multithreading support and sets appropriate compile definitions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iostreams/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(_lzma_mt \"\")\n\nif(BOOST_IOSTREAMS_ENABLE_LZMA)\n\n  iostreams_check(BOOST_IOSTREAMS_HAS_LZMA_CPUTHREADS has_lzma_cputhreads.cpp \"\" \"LibLZMA::LibLZMA\" \"\")\n\n  if(BOOST_IOSTREAMS_HAS_LZMA_CPUTHREADS)\n    set(_lzma_mt \" (multithreaded)\")\n  else()\n    target_compile_definitions(boost_iostreams PRIVATE BOOST_IOSTREAMS_LZMA_NO_MULTITHREADED=1)\n  endif()\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Using the plus Metafunction for Compile-Time Addition in C++\nDESCRIPTION: Example usage of the 'plus' metafunction to perform compile-time addition of integral constants. The result is a new integral constant with the sum of the input values.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/plus.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntypedef plus< int_<-10>, int_<3>, long_<1> >::type r;\nBOOST_MPL_ASSERT_RELATION( r::value, ==, -6 );\nBOOST_MPL_ASSERT(( is_same< r::value_type, long > ));\n```\n\n----------------------------------------\n\nTITLE: Including the distance metafunction header in C++\nDESCRIPTION: Shows how to include the header file for the distance metafunction in C++.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/distance.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/distance.hpp>\n```\n\n----------------------------------------\n\nTITLE: Incrementally Rehashing Intrusive Containers in C++\nDESCRIPTION: Demonstrates how to trigger incremental rehashing in intrusive containers. The user must manually invoke these methods since intrusive containers don't allocate memory automatically.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/intrusive/proj/vc7ide/to-do.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nincremental_rehash(bool)\n```\n\nLANGUAGE: C++\nCODE:\n```\nincremental_rehash(bucket_traits)\n```\n\n----------------------------------------\n\nTITLE: Version Number Macros\nDESCRIPTION: Core version number macros used for cmake and DLL version stamping\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/macros/version.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nBOOST_OUTCOME_VERSION_MAJOR <number>\nBOOST_OUTCOME_VERSION_MINOR <number>\nBOOST_OUTCOME_VERSION_PATCH <number>\nBOOST_OUTCOME_VERSION_REVISION <number>\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for ArangoDB in CMake\nDESCRIPTION: Adds the CMake home directory to the include path for the project.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/yap/doc/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories(${CMAKE_HOME_DIRECTORY})\n```\n\n----------------------------------------\n\nTITLE: Building OpenSSL Path Configuration on Windows PowerShell\nDESCRIPTION: PowerShell commands for configuring OpenSSL path using vcpkg on Windows.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/beast/README.md#2025-04-22_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nvcpkg install openssl --triplet x32-windows\n$env:OPENSSL_ROOT = \"path\\x32-windows\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Member Extraction in Doxygen\nDESCRIPTION: Setting to include static file members in the documentation. When disabled, static members are excluded. Default is NO.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/sort/doc/doxygen/sort_doxyfile.txt#2025-04-22_snippet_27\n\nLANGUAGE: text\nCODE:\n```\nEXTRACT_STATIC         = NO\n```\n\n----------------------------------------\n\nTITLE: Creating static apply function instance in C++\nDESCRIPTION: Declares a static variable instance of the apply_f function object to provide the apply function as a callable object in the boost::hof namespace.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/apply.hpp.txt#2025-04-22_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_HOF_DECLARE_STATIC_VAR(apply, detail::apply_f);\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost Spirit CMake Build\nDESCRIPTION: Sets up CMake configuration for Boost Spirit library including version requirements, project definition, library targets, and dependencies. Creates an interface library with necessary Boost component linkages and include directories.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/spirit/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.16)\n\nproject(boost_spirit VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n\nadd_library(boost_spirit INTERFACE)\nadd_library(Boost::spirit ALIAS boost_spirit)\n\ntarget_include_directories(boost_spirit INTERFACE include)\n\ntarget_link_libraries(boost_spirit\n  INTERFACE\n    Boost::array\n    Boost::assert\n    Boost::config\n    Boost::core\n    Boost::endian\n    Boost::function\n    Boost::function_types\n    Boost::fusion\n    Boost::integer\n    Boost::io\n    Boost::iterator\n    Boost::move\n    Boost::mpl\n    Boost::optional\n    Boost::phoenix\n    Boost::pool\n    Boost::preprocessor\n    Boost::proto\n    Boost::range\n    Boost::regex\n    Boost::smart_ptr\n    Boost::static_assert\n    Boost::thread\n    Boost::throw_exception\n    Boost::type_traits\n    Boost::typeof\n    Boost::unordered\n    Boost::utility\n    Boost::variant\n)\n\nif(BUILD_TESTING AND EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/test/CMakeLists.txt\")\n\n  add_subdirectory(test)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Coordinate Data in Plaintext\nDESCRIPTION: This snippet contains a set of numerical coordinates, likely representing points or vectors in a coordinate system. The first line may indicate the number of coordinate sets, while subsequent lines contain the actual coordinate values.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/polygon/example/input_data/primary/primary_031.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n1\n0 0\n12\n-1 10 1 10\n10 -1 10 1\n-1 -10 1 -10\n-10 -1 -10 1\n-6 8 -2 11\n-8 6 -11 2\n6 8 2 11\n8 6 11 2\n6 -8 2 -11\n8 -6 11 -2\n-6 -8 -2 -11\n-8 -6 -11 -2\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Components Options in Meson for ArangoDB\nDESCRIPTION: Sets up boolean options for enabling or disabling the build of various components including programs, tests, contributions, and examples. All options default to false.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/lz4/contrib/meson/meson_options.txt#2025-04-22_snippet_2\n\nLANGUAGE: meson\nCODE:\n```\noption('bin_programs', type: 'boolean', value: false,\n  description: 'Enable programs build')\noption('bin_tests', type: 'boolean', value: false,\n  description: 'Enable tests build')\noption('bin_contrib', type: 'boolean', value: false,\n  description: 'Enable contrib build')\noption('bin_examples', type: 'boolean', value: false,\n  description: 'Enable examples build')\n```\n\n----------------------------------------\n\nTITLE: Setting Up Standalone Mode Option\nDESCRIPTION: Configures a dependent option for standalone mode operation of Boost Math library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/math/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(CMakeDependentOption)\n\ncmake_dependent_option(BOOST_MATH_STANDALONE \"Use Boost.Math in standalone mode\" ON \"NOT BOOST_SUPERPROJECT_VERSION\" OFF)\n\nmessage(STATUS \"Boost.Math: standalone mode ${BOOST_MATH_STANDALONE}\")\n```\n\n----------------------------------------\n\nTITLE: Packed Pixel Definition Example - packed_pixel.cpp\nDESCRIPTION: This example demonstrates defining bitmasks and images whose channels or pixels are not byte-aligned, utilizing Boost GIL. It showcases the library's capabilities in handling non-standard image formats.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/index.rst#2025-04-22_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\n* :download:`packed_pixel.cpp <../example/packed_pixel.cpp>`:\n  Defining bitmasks and images whose channels or pixels are not byte-aligned\n```\n\n----------------------------------------\n\nTITLE: Building Boost.Locale with bjam on Windows\nDESCRIPTION: Command to build Boost.Locale library using bjam on Windows systems. This compiles the library and stages it for use.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/doc/building_boost_locale.txt#2025-04-22_snippet_1\n\nLANGUAGE: batch\nCODE:\n```\n.\\bjam --with-locale stage\n```\n\n----------------------------------------\n\nTITLE: Including Boost MPL and_ Header Files in C++\nDESCRIPTION: Header files required to use the and_ metafunction from the Boost MPL library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/and_.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/and.hpp>\n#include <boost/mpl/logical.hpp>\n```\n\n----------------------------------------\n\nTITLE: BOOST_OUTCOME_TRYV2_FAILURE_LIKELY Macro Usage\nDESCRIPTION: Macro that evaluates an expression which should return a type compatible with try_operation customization points. Optimized for the failure path with hints to the compiler. If operation fails, returns try_operation_return_as(X) from the calling function.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/macros/tryv2_failure_likely.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_OUTCOME_TRYV2_FAILURE_LIKELY(spec, expr)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Linking Enterprise Features in CMake\nDESCRIPTION: Conditionally links the rclone library if building the enterprise edition of ArangoDB.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/CMakeLists.txt#2025-04-22_snippet_22\n\nLANGUAGE: CMake\nCODE:\n```\nif (USE_ENTERPRISE)\n  target_link_libraries(arangodbtests arango_rclone)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Boost.Compute Dependencies and Options\nDESCRIPTION: This snippet configures the project by finding required packages, setting options for compiler flags, and defining threading options. It integrates necessary dependencies such as OpenCL and Boost and also provides various compilation options for safety and performance.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/compute/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nelse()\n\n# ---------------------------------------------------------------------------\n#  Copyright (c) 2013 Kyle Lutz <kyle.r.lutz@gmail.com>\n#\n#  Distributed under the Boost Software License, Version 1.0\n#  See accompanying file LICENSE_1_0.txt or copy at\n#  http://www.boost.org/LICENSE_1_0.txt\n#\n# ---------------------------------------------------------------------------\n\ncmake_minimum_required(VERSION 2.8)\n\nproject(BoostCompute)\n\nset(CMAKE_MODULE_PATH ${BoostCompute_SOURCE_DIR}/cmake)\nif (CMAKE_VERSION VERSION_LESS \"3.1.0\")\n    list(APPEND CMAKE_MODULE_PATH \"${BoostCompute_SOURCE_DIR}/cmake/opencl\")\nendif()\n\n# find OpenCL\nfind_package(OpenCL REQUIRED)\ninclude_directories(SYSTEM ${OpenCL_INCLUDE_DIRS})\n\n# find Boost\nfind_package(Boost 1.54 REQUIRED)\ninclude_directories(SYSTEM ${Boost_INCLUDE_DIRS})\n\n# optional support for c++11\noption(BOOST_COMPUTE_USE_CPP11 \"Use C++11 features\" OFF)\nif(NOT MSVC)\n  if(${BOOST_COMPUTE_USE_CPP11})\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -std=c++11\")\n  endif()\nendif()\n\n# optional support for offline-caching\noption(BOOST_COMPUTE_USE_OFFLINE_CACHE \"Use offline cache for OpenCL program binaries\" OFF)\nif(${BOOST_COMPUTE_USE_OFFLINE_CACHE})\n  add_definitions(-DBOOST_COMPUTE_USE_OFFLINE_CACHE)\nendif()\n\n# thread-safety options\noption(BOOST_COMPUTE_THREAD_SAFE \"Compile with BOOST_COMPUTE_THREAD_SAFE defined\" OFF)\nif(${BOOST_COMPUTE_THREAD_SAFE})\n  add_definitions(-DBOOST_COMPUTE_THREAD_SAFE)\n  if(${BOOST_COMPUTE_USE_CPP11})\n    if(MSVC)\n      if (MSVC_VERSION GREATER 1800)\n        add_definitions(-DBOOST_COMPUTE_HAVE_THREAD_LOCAL)\n      endif()\n    else()\n      add_definitions(-DBOOST_COMPUTE_HAVE_THREAD_LOCAL)\n    endif()\n  endif()\nendif()\n\n# optional third-party libraries\noption(BOOST_COMPUTE_HAVE_EIGEN \"Have Eigen\" OFF)\noption(BOOST_COMPUTE_HAVE_OPENCV \"Have OpenCV\" OFF)\noption(BOOST_COMPUTE_HAVE_QT \"Have Qt\" OFF)\noption(BOOST_COMPUTE_HAVE_VTK \"Have VTK\" OFF)\noption(BOOST_COMPUTE_HAVE_CUDA \"Have CUDA\" OFF)\noption(BOOST_COMPUTE_HAVE_TBB \"Have TBB\" OFF)\noption(BOOST_COMPUTE_HAVE_BOLT \"Have BOLT\" OFF)\n\ninclude_directories(include)\n\nif(${OpenCL_HEADER_CL_EXT_FOUND})\n  add_definitions(-DBOOST_COMPUTE_HAVE_HDR_CL_EXT)\nendif()\n\nif(WIN32)\n  # optional support for boost dynamic libraries\n  option(BOOST_COMPUTE_BOOST_ALL_DYN_LINK \"Use boost dynamic link libraries\" OFF)\n  if(${BOOST_COMPUTE_BOOST_ALL_DYN_LINK})\n    add_definitions(-DBOOST_ALL_DYN_LINK)\n  else()\n    # for default use statis libs\n    set(Boost_USE_STATIC_LIBS ON)\n  endif()\n  link_directories(${Boost_LIBRARY_DIRS})\nendif()\n\n# compiler options\noption(BOOST_COMPUTE_ENABLE_COVERAGE \"Enable code coverage generation\" OFF)\n\n# Visual Studio C++\nif(MSVC)\n  add_definitions(-D_CRT_SECURE_NO_WARNINGS)\n  add_definitions(-D_SCL_SECURE_NO_WARNINGS)\n  add_definitions(-DNOMINMAX)\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /bigobj\")\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /wd4003\") # Not enough actual parameters for a BOOST_PP macro\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /wd4244\") # Warning C4244: 'initializing': conversion from 'double' to 'int', possible loss of data\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /wd4305\") # Warning C4305: 'initializing': truncation from 'double' to 'float'\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /wd4800\") # Warning C4800: 'uint32_t' : forcing value to bool 'true' or 'false' (performance warning)\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /wd4838\") # Warning C4838: conversion from 'double' to 'float' requires a narrowing conversion\nendif()\n\noption(BOOST_COMPUTE_BUILD_TESTS \"Build the Boost.Compute tests\" OFF)\nif(${BOOST_COMPUTE_BUILD_TESTS})\n  enable_testing()\n  add_subdirectory(test)\nendif()\n\noption(BOOST_COMPUTE_BUILD_BENCHMARKS \"Build the Boost.Compute benchmarks\" OFF)\nif(${BOOST_COMPUTE_BUILD_BENCHMARKS})\n  add_subdirectory(perf)\nendif()\n\noption(BOOST_COMPUTE_BUILD_EXAMPLES \"Build the Boost.Compute examples\" OFF)\nif(${BOOST_COMPUTE_BUILD_EXAMPLES})\n  add_subdirectory(example)\nendif()\n\n# configure cmake config file\nconfigure_file(\n  cmake/BoostComputeConfig.cmake.in\n  ${BoostCompute_BINARY_DIR}/BoostComputeConfig.cmake\n  @ONLY\n)\n\n# install cmake config file\ninstall(\n  FILES ${BoostCompute_BINARY_DIR}/BoostComputeConfig.cmake\n  DESTINATION lib/cmake/BoostCompute\n)\n\n# install header files\ninstall(DIRECTORY include/boost DESTINATION include/compute)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring FAISS Linker Flags\nDESCRIPTION: Sets executable linker flags for FAISS integration, potentially modifying link-time behavior for the ArangoDB server\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} ${FAISS_EXE_LINKER_FLAGS}\")\n```\n\n----------------------------------------\n\nTITLE: Including filter_view Header in C++\nDESCRIPTION: Shows the header file that needs to be included to use the filter_view template.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/filter_view.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/filter_view.hpp>\n```\n\n----------------------------------------\n\nTITLE: Generic Function Template Example Using Dereferenceable Objects\nDESCRIPTION: Example showing the challenge of determining the type that a dereferenceable object points to in a generic function context.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/pointee.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <class Dereferenceable>\nvoid f(Dereferenceable p)\n{\n    *what-goes-here?* value = *p;\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Iterator Traits Reference Type in C++\nDESCRIPTION: This snippet illustrates the use of iterator_traits<X>::reference in the context of Readable and Lvalue Iterator requirements. It shows that the return type of *a must be iterator_traits<X>::reference for Readable Iterators, and that iterator_traits<X>::reference must be T& or const T& for Lvalue Iterators.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/ref_problem.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\niterator_traits<X>::reference\n```\n\n----------------------------------------\n\nTITLE: Pretty Printing Async Registry from REST Call - Shell\nDESCRIPTION: This snippet demonstrates how to use curl to fetch active async operations from the ArangoDB REST API and pipe the output to the pretty-printer Python script for enhanced readability.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/AsyncRegistryServer/PrettyPrinter/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncurl -s <server>/_admin/async-registry -u root: | ./src/pretty-printer.py\n```\n\n----------------------------------------\n\nTITLE: Implementing Filter Iterator with Positive Number Predicate\nDESCRIPTION: Example demonstrating how to use Boost's filter_iterator to process an array of integers. The code shows three different approaches: using filter_iterator directly, using make_filter_iterator, and using make_filter_iterator with a bind predicate to filter numbers greater than -2.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/filter_iterator_eg.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nstruct is_positive_number {\n  bool operator()(int x) { return 0 < x; }\n};\n\nint main()\n{\n  int numbers_[] = { 0, -1, 4, -3, 5, 8, -2 };\n  const int N = sizeof(numbers_)/sizeof(int);\n\n  typedef int* base_iterator;\n  base_iterator numbers(numbers_);\n\n  // Example using filter_iterator\n  typedef boost::filter_iterator<is_positive_number, base_iterator>\n    FilterIter;\n\n  is_positive_number predicate;\n  FilterIter filter_iter_first(predicate, numbers, numbers + N);\n  FilterIter filter_iter_last(predicate, numbers + N, numbers + N);\n\n  std::copy(filter_iter_first, filter_iter_last, std::ostream_iterator<int>(std::cout, \" \"));\n  std::cout << std::endl;\n\n  // Example using make_filter_iterator()\n  std::copy(boost::make_filter_iterator<is_positive_number>(numbers, numbers + N),\n        boost::make_filter_iterator<is_positive_number>(numbers + N, numbers + N),\n        std::ostream_iterator<int>(std::cout, \" \"));\n  std::cout << std::endl;\n\n  // Another example using make_filter_iterator()\n  std::copy(\n      boost::make_filter_iterator(\n          std::bind2nd(std::greater<int>(), -2)\n        , numbers, numbers + N)\n\n    , boost::make_filter_iterator(\n          std::bind2nd(std::greater<int>(), -2)\n        , numbers + N, numbers + N)\n\n    , std::ostream_iterator<int>(std::cout, \" \")\n  );\n\n  std::cout << std::endl;\n\n  return boost::exit_success;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Boost Chrono CMake Project\nDESCRIPTION: Sets up the CMake project for Boost Chrono, specifying the minimum required CMake version and project details.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/chrono/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.16)\n\nproject(boost_chrono VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Configuring VelocyPack Utils Static Library in CMake\nDESCRIPTION: Creates a static library named velocypack_utils from VelocyPackStringLiteral.cpp source file and links it with the velocypack library. The library is made publicly available to other targets that link against it.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/lib/VelocypackUtils/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(velocypack_utils STATIC\n  VelocyPackStringLiteral.cpp)\ntarget_link_libraries(velocypack_utils PUBLIC\n  velocypack)\n```\n\n----------------------------------------\n\nTITLE: Configuring Testing Environment\nDESCRIPTION: Sets up testing configuration when ARANGO_VALIDATION_TESTS is enabled, including Google Test integration.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/json-schema-validation/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(ARANGO_VALIDATION_TESTS)\n    ext_log(\"arango-validation tests enabled\")\n    include(CTest)\n    set(gtest_force_shared_crt ON CACHE BOOL \"\" FORCE)\n    ext_add_test_subdirectory(\"google\" tests)\nelse()\n    ext_log(\"arango-validation tests disabled\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining empty metafunction template in C++\nDESCRIPTION: Defines the empty metafunction template that takes a Sequence type parameter and returns an unspecified type. This metafunction is used to check if a sequence is empty.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/empty.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      typename Sequence\n    >\nstruct empty\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining reverse_remove Template in C++\nDESCRIPTION: Defines the reverse_remove template structure for transforming sequences. It takes a Sequence, a type T to remove, and an optional Inserter. The algorithm returns a new sequence with elements in reverse order, excluding those identical to T.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/reverse_remove.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      typename Sequence\n    , typename T\n    , typename In = |unspecified|\n    >\nstruct reverse_remove\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining the apply1 Metafunction Template in C++\nDESCRIPTION: Template definition for apply1, which invokes a Metafunction Class with one argument. It takes template parameters F and A1, and produces a type member.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/apply.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ntemplate< \n      typename F, typename A1\n    >\nstruct apply1\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Including max_element Header in C++\nDESCRIPTION: Shows the header file that needs to be included to use the max_element algorithm in C++ code.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/max_element.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/max_element.hpp>\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: Specifies the minimum required CMake version for the project. This ensures that the CMake version used to build the project is compatible with the CMake commands and features used in the CMakeLists.txt file.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/geometry/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n\"cmake_minimum_required(VERSION 3.5...3.16)\"\n```\n\n----------------------------------------\n\nTITLE: Registering Simple Trigger with Return Value\nDESCRIPTION: Registers a trigger that invokes a member function with a return value when a message is received. Can only be used with out-of-band sends expecting a reply. Takes a process group, tag, object instance, and member function pointer as arguments.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/simple_trigger.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<typename ProcessGroup, typename Class, typename T, typename Result>\n  void \n  simple_trigger(ProcessGroup& pg, int tag, Class* self, \n                 Result (Class::*pmf)(int source, int tag, const T& data, \n                                      trigger_receive_context context))\n```\n\n----------------------------------------\n\nTITLE: Stable Partition Implementation Semantics\nDESCRIPTION: Semantic implementation showing how stable_partition processes the sequence using fold and conditional operations.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/stable_partition.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ntypedef lambda<pred>::type p;\ntypedef lambda<in1::operation>::type in1_op;\ntypedef lambda<in2::operation>::type in2_op;\n\ntypedef fold<\n      s\n    , pair< in1::state, in2::state >\n    , if_< \n          apply_wrap1<p,_2>\n        , pair< apply_wrap2<in1_op,first<_1>,_2>, second<_1> >\n        , pair< first<_1>, apply_wrap2<in2_op,second<_1>,_2> >\n        >\n    >::type r;\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Variant Implementations with clang++ 5.0.1 (Optimized)\nDESCRIPTION: Compile time and run time benchmarks for variant2, boost::variant, and std::variant using clang++ 5.0.1 with -O3 -DNDEBUG optimization level. Shows compilation times and execution times for 100 million iterations.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/variant2/benchmark/benchmark2.md#2025-04-22_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n      variant2 (-DONLY_V2): 1720 ms\nboost::variant (-DONLY_BV): 2806 ms\n  std::variant (-DONLY_SV): 1737 ms\n```\n\nLANGUAGE: text\nCODE:\n```\nN=100000000:\n        prefix:    603 ms; S=416666583333336\n      variant2:   1608 ms; S=416666583333336\nboost::variant:   2696 ms; S=416666583333336\n  std::variant:   2668 ms; S=416666583333336\n```\n\n----------------------------------------\n\nTITLE: Configuring Smart Pointer and Container Tests in CMake\nDESCRIPTION: Sets up tests for various smart pointers, container types, and other serialization features including shared_ptr, unique_ptr, and standard container types.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/serialization/CMake/CMakeLists.txt#2025-04-22_snippet_17\n\nLANGUAGE: CMake\nCODE:\n```\narchive_test(test_shared_ptr)\narchive_test(test_shared_ptr_multi_base)\narchive_test(test_shared_ptr_132)\narchive_test(test_simple_class A)\narchive_test(test_simple_class_ptr A)\n```\n\n----------------------------------------\n\nTITLE: Full Qualification of Boost.Parameter Keywords\nDESCRIPTION: This snippet demonstrates the full qualification approach when using Boost.Parameter keywords defined within a namespace. This is more verbose than other methods.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/index.rst#2025-04-22_snippet_45\n\nLANGUAGE: cpp\nCODE:\n```\n        int x = **lib::**\\ f(\n            **lib::**\\ _name = \"jill\"\n          , **lib::**\\ _index = 1\n        );\n```\n\nLANGUAGE: cpp\nCODE:\n```\nint main() { return 0; }\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories and Dependencies\nDESCRIPTION: Sets include directories for the Boost Heap library and links multiple Boost library dependencies required for implementation\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/heap/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(boost_heap INTERFACE include)\n\ntarget_link_libraries(boost_heap\n  INTERFACE\n    Boost::array\n    Boost::assert\n    Boost::bind\n    Boost::concept_check\n    Boost::config\n    Boost::core\n    Boost::intrusive\n    Boost::iterator\n    Boost::parameter\n    Boost::static_assert\n    Boost::throw_exception\n    Boost::type_traits\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Canadian Aboriginal Unicode Block\nDESCRIPTION: Lists the code point ranges for Canadian Aboriginal syllabics in Unicode. This block contains 710 code points including syllabics, punctuation, and special characters.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/spirit/workbench/unicode/Scripts.txt#2025-04-22_snippet_12\n\nLANGUAGE: unicode\nCODE:\n```\n1400          ; Canadian_Aboriginal # Pd       CANADIAN SYLLABICS HYPHEN\n1401..166C    ; Canadian_Aboriginal # Lo [620] CANADIAN SYLLABICS E..CANADIAN SYLLABICS CARRIER TTSA\n166D..166E    ; Canadian_Aboriginal # Po   [2] CANADIAN SYLLABICS CHI SIGN..CANADIAN SYLLABICS FULL STOP\n166F..167F    ; Canadian_Aboriginal # Lo  [17] CANADIAN SYLLABICS QAI..CANADIAN SYLLABICS BLACKFOOT W\n18B0..18F5    ; Canadian_Aboriginal # Lo  [70] CANADIAN SYLLABICS OY..CANADIAN SYLLABICS CARRIER DENTAL S\n```\n\n----------------------------------------\n\nTITLE: Installing gyp-next using pipx\nDESCRIPTION: This snippet explains how to install gyp-next globally using pipx. It initializes a virtual environment and installs the package, making it available for use without affecting the global Python environment.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/v8-build/gyp/README.md#2025-04-22_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n\"pipx install gyp-next\"\n```\n\n----------------------------------------\n\nTITLE: Example Usage of max Metafunction in C++\nDESCRIPTION: Provides an example of using the max metafunction with fold and vector_c to find the maximum value in a sequence of integers.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/max.rst#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\ntypedef fold<\n      vector_c<int,1,7,0,-2,5,-1>\n    , int_<10>\n    , max<_1,_2>\n    >::type r;\n\nBOOST_MPL_ASSERT(( is_same< r, int_<10> > ));\n```\n\n----------------------------------------\n\nTITLE: Configuring DLL Plugin Tests in CMake\nDESCRIPTION: Sets up testing for DLL serialization functionality with shared libraries. This conditional block checks if shared libraries are being built and sets up the test_dll_simple test accordingly.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/serialization/CMake/CMakeLists.txt#2025-04-22_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nif(BUILD_SHARED_LIBS)\n  # this test can only be made to work if we're linking with shared\n  # libraries. Basically the build systems like to have all shared\n  # or all static so if we're building with static C++ libraries\n  # then linking with a shared one - we need multiple C++ libraries\n  # and things get complex.  So just run this test when we're\n  # building with shared libraries (dll in windows speak)\n  serialization_test(test_dll_simple)\n  target_link_libraries(test_dll_simple dll_a serialization)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Mapping File I/O Library with ValueOrError Converters in C++\nDESCRIPTION: Demonstrates the implementation of custom ValueOrError converters for handling File I/O library integration. The code duplicates the throw_as_system_error_with_payload functionality from the filelib namespace, though in production it's recommended to call the actual function and catch its exception for better maintainability.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/tutorial/advanced/interop/app-map-filelib.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n{{% snippet \"finale.cpp\" \"app_map_filelib\" %}}\n```\n\n----------------------------------------\n\nTITLE: Linking library dependencies\nDESCRIPTION: Links the `boost_dynamic_bitset` target to other Boost libraries. These libraries are declared as INTERFACE dependencies, meaning that any project using `boost_dynamic_bitset` will also inherit these dependencies.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/dynamic_bitset/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(boost_dynamic_bitset\n  INTERFACE\n    Boost::assert\n    Boost::config\n    Boost::container_hash\n    Boost::core\n    Boost::integer\n    Boost::move\n    Boost::static_assert\n    Boost::throw_exception\n)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding Test Subdirectory for Boost Container in CMake\nDESCRIPTION: Adds the test subdirectory to the build if testing is enabled and the test CMakeLists.txt file exists.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/container/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(BUILD_TESTING AND EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/test/CMakeLists.txt\")\n\n  add_subdirectory(test)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Syntax Rules and Grammar for Parameter Specifications\nDESCRIPTION: Defines the grammar rules for required and optional parameter specifications including argument names, restrictions and default values.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_40\n\nLANGUAGE: cpp\nCODE:\n```\noptional-specifier ::=\n    '**(**'\n        *argument-name* '**,**' *restriction* '**,**' *default-value*\n    '**)**'\n\nrequired-specifier ::=\n    '**(**' *argument-name* '**,**' *restriction* '**)**'\n\nrestriction ::=\n    ( '**\\***' '**(**' *mfc* '**)**' ) |\n    ( '**(**' *type-name* '**)**' ) |\n    '**\\***'\n```\n\n----------------------------------------\n\nTITLE: BOOST_MPL_HAS_XXX_TEMPLATE_NAMED_DEF Macro Syntax\nDESCRIPTION: The macro syntax for defining a metafunction that detects whether a type has a specific named template member. Takes three parameters: trait name, member name to detect, and default fallback value.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/HAS_XXX_TEMPLATE_NAMED_DEF.rst#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n#define BOOST_MPL_HAS_XXX_TEMPLATE_NAMED_DEF(trait, name, default_) \\\n    |unspecified-token-seq| \\\n/**/\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories in CMake for Beast Project\nDESCRIPTION: This CMake snippet adds the 'client' and 'server' subdirectories to the build process. It ensures that the build system will process the CMakeLists.txt files in these subdirectories, compiling the client and server components of the Beast project.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/beast/example/websocket/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory (client)\nadd_subdirectory (server)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for Immer Pretty Printer Test\nDESCRIPTION: This CMake script configures a project to test immer's pretty printer functionality. It creates a test executable, links against the immer and fmt libraries, sets output directories, and defines a test that uses GDB with custom debugging scripts.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/utils/gdb-pretty-printers/immer/test/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20)\n\nproject(immer-pretty-printer-test CXX)\n\nadd_executable(flex_vector_test flex_vector_test.cpp)\n\ntarget_link_libraries(flex_vector_test immer)\ntarget_link_libraries(flex_vector_test fmt::fmt)\n\nset_target_properties(flex_vector_test\n        PROPERTIES\n        ARCHIVE_OUTPUT_DIRECTORY \"${CMAKE_CURRENT_BINARY_DIR}/lib\"\n        LIBRARY_OUTPUT_DIRECTORY \"${CMAKE_CURRENT_BINARY_DIR}/lib\"\n        RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_CURRENT_BINARY_DIR}/bin\"\n        )\n\nenable_testing()\n\n# Note that the working directory is important, because the `gdbinit` file includes the python modules with a path\n# relative to the source directory.\nadd_test(NAME flex_vector_test\n        COMMAND gdb\n        $<TARGET_FILE:flex_vector_test>\n        -x ${CMAKE_CURRENT_SOURCE_DIR}/../gdbinit\n        -x ${CMAKE_CURRENT_SOURCE_DIR}/flex_vector_test.gdbscript\n        -batch\n\n        WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}\n        )\n```\n\n----------------------------------------\n\nTITLE: Defining Partition Algorithm Template in C++\nDESCRIPTION: Defines the template structure for the partition algorithm, which splits a sequence into two groups based on a predicate. It takes a sequence, predicate, and optional input inserters as template parameters.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/partition.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      typename Seq\n    , typename Pred\n    , typename In1 = |unspecified|\n    , typename In2 = |unspecified|\n    >\nstruct partition\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Compile Options Interface Library\nDESCRIPTION: This command creates an interface library named `gil_compile_options` which is used to group compile options. Interface libraries are used to propagate compile options to dependent targets without building any actual code.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n\"add_library(gil_compile_options INTERFACE)\"\n```\n\n----------------------------------------\n\nTITLE: Using integral_c Template in C++\nDESCRIPTION: Example usage of the integral_c template, demonstrating type definitions, assertions, and value comparisons. It shows how to create an integral constant, check its properties, and perform operations.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/integral_c.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntypedef integral_c<short,8> eight;\n\nBOOST_MPL_ASSERT(( is_same< eight::value_type, short > ));\nBOOST_MPL_ASSERT(( is_same< eight::type, eight > ));\nBOOST_MPL_ASSERT(( is_same< next< eight >::type, integral_c<short,9> > ));\nBOOST_MPL_ASSERT(( is_same< prior< eight >::type, integral_c<short,7> > ));\nBOOST_MPL_ASSERT_RELATION( (eight::value), ==, 8 );\nassert( eight() == 8 );\n```\n\n----------------------------------------\n\nTITLE: Including not_ Metafunction Headers in C++\nDESCRIPTION: This snippet shows the necessary header files to include when using the not_ metafunction in C++ code. It includes both the specific not.hpp header and the more general logical.hpp header from the Boost MPL library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/not_.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/not.hpp>\n#include <boost/mpl/logical.hpp>\n```\n\n----------------------------------------\n\nTITLE: ASIO Async Result Specialization\nDESCRIPTION: Implementation of async_result specialization for Outcome integration.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/recipes/asio-integration-1-70.md#2025-04-22_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate<typename T, typename CompletionToken>\nstruct boost::asio::async_result<\n  as_result_t<CompletionToken>,\n  void(boost::system::error_code, T)>\n```\n\n----------------------------------------\n\nTITLE: Testing bool_ Template Properties in C++\nDESCRIPTION: This example demonstrates how to use the bool_ template and assert various properties about it, including its value type, equality with predefined types, and value.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/bool_.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_MPL_ASSERT(( is_same< bool_<true>::value_type, bool > ));\nBOOST_MPL_ASSERT(( is_same< bool_<true>, true_ > )); }\nBOOST_MPL_ASSERT(( is_same< bool_<true>::type, bool_<true> > ));\nBOOST_MPL_ASSERT_RELATION( bool_<true>::value, ==, true );\nassert( bool_<true>() == true );\n```\n\n----------------------------------------\n\nTITLE: Example Docker Image Tag Format for ArangoDB Test Images\nDESCRIPTION: This snippet shows the format for tagging ArangoDB test images. It includes a placeholder for a random part, which would be replaced by the Git commit hash, and specifies the architecture.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/scripts/docker/test/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\narangodb/test-ubuntu:<RAND>-amd64\n```\n\n----------------------------------------\n\nTITLE: Configuring C++11 Unordered Map Tests in CMake\nDESCRIPTION: Conditionally sets up tests for C++11 unordered maps if the compiler supports C++11 features.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/serialization/CMake/CMakeLists.txt#2025-04-22_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\nif(COMPILER_SUPPORTS_CXX11)\n  archive_test(test_map_unordered A)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Missing Rebind and Error Handling Fixes\nDESCRIPTION: This entry addresses a missing rebind in handler_alloc, fixes error handling in HTTP server examples, and adjusts CMake scripts for MinGW, improving the library's stability and build process across different platforms.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/beast/CHANGELOG.md#2025-04-22_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Defining Unicode Shavian Script Character Ranges\nDESCRIPTION: Lists Unicode character ranges for the Shavian script, an alternative alphabet for English designed by playwright George Bernard Shaw. Consists of 48 letters.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/spirit/workbench/unicode/Scripts.txt#2025-04-22_snippet_34\n\nLANGUAGE: unicode\nCODE:\n```\n10450..1047F  ; Shavian # Lo  [48] SHAVIAN LETTER PEEP..SHAVIAN LETTER YEW\n\n# Total code points: 48\n```\n\n----------------------------------------\n\nTITLE: Get Built-in NumPy dtype\nDESCRIPTION: This code shows the template function for getting the built-in NumPy `dtype` associated with the given scalar template type `T`.  `T` must be a built-in C++ type supported by NumPy.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/doc/numpy/reference/dtype.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <typename T> static dtype get_builtin();\n```\n\n----------------------------------------\n\nTITLE: Building Boost.Locale with Custom ICU Path on Unix\nDESCRIPTION: Command to build Boost.Locale library using bjam on Unix-like systems, specifying a custom path for the ICU library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/doc/building_boost_locale.txt#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./bjam --with-locale -sICU_PATH=/opt/icu46  stage\n```\n\n----------------------------------------\n\nTITLE: Flip Static Variable Declaration in C++\nDESCRIPTION: Declares a static variable for the flip adaptor using the BOOST_HOF_DECLARE_STATIC_VAR macro, making the flip functionality globally accessible.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/flip.hpp.txt#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_HOF_DECLARE_STATIC_VAR(flip, detail::make<flip_adaptor>);\n```\n\n----------------------------------------\n\nTITLE: Configuring synchronous WebSocket client build with CMake\nDESCRIPTION: Sets up the build configuration for a synchronous WebSocket client example. It groups source files, defines an executable target with its source files, links required libraries (asio and beast), and sets folder organization properties.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/beast/example/websocket/client/sync/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nGroupSources(include/boost/beast beast)\nGroupSources(example/websocket/client/sync \"/\")\n\nadd_executable (websocket-client-sync\n    ${BOOST_BEAST_FILES}\n    Jamfile\n    websocket_client_sync.cpp\n)\n\ntarget_link_libraries(websocket-client-sync\n    lib-asio\n    lib-beast)\n\nset_property(TARGET websocket-client-sync PROPERTY FOLDER \"example-websocket-client\")\n```\n\n----------------------------------------\n\nTITLE: Generating Exit Code Files for ArangoDB in CMake\nDESCRIPTION: This snippet creates custom commands to generate exit code files for ArangoDB from a definition file. It generates header files, JavaScript files, and Windows NSIS plugin files with exit code definitions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/CMakeLists.txt#2025-04-22_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\nset(EXIT_CODE_FILES\n  lib/Basics/exitcodes.h\n  js/common/bootstrap/exitcodes.js\n  Installation/Windows/Plugins/exitcodes.nsh\n)\n\nset(EXIT_CODE_FILES_GEN)\nset(EXIT_CODES_DAT lib/Basics/exitcodes.dat)\n\nforeach(m IN LISTS EXIT_CODE_FILES)\n  get_filename_component(GEN_BASENAME \"${m}\" NAME)\n  add_custom_command(\n    OUTPUT ${CMAKE_BINARY_DIR}/${m}\n    COMMAND ${PYTHON_EXECUTABLE} ${CMAKE_SOURCE_DIR}/utils/generateExitCodesFiles.py ${CMAKE_SOURCE_DIR}/${EXIT_CODES_DAT} ${CMAKE_BINARY_DIR}/${GEN_BASENAME}.tmp\n    COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/${GEN_BASENAME}.tmp ${CMAKE_BINARY_DIR}/${m}\n    COMMAND ${CMAKE_COMMAND} -E remove ${CMAKE_BINARY_DIR}/${GEN_BASENAME}.tmp\n    DEPENDS ${CMAKE_SOURCE_DIR}/${EXIT_CODES_DAT} ${CMAKE_SOURCE_DIR}/utils/generateExitCodesFiles.py\n    WORKING_DIRECTORY ${CMAKE_BINARY_DIR}\n    COMMENT  \"Building exitcode file ${m}\"\n    VERBATIM\n  )\n\n  list(APPEND EXIT_CODE_FILES_GEN ${CMAKE_BINARY_DIR}/${m})\nendforeach()\n\nadd_custom_target(exitcodefiles ALL DEPENDS ${EXIT_CODE_FILES_GEN})\n```\n\n----------------------------------------\n\nTITLE: Benchmark Source Generator Reference\nDESCRIPTION: References the script that generates benchmark source files from templates in src/ directory to the generated/ directory.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/metaparse/tools/benchmark/README.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ngenerate.py\n```\n\n----------------------------------------\n\nTITLE: Tibetan Unicode Character Ranges\nDESCRIPTION: Defines Unicode code point ranges for Tibetan script characters, including letters, digits, marks, and symbols across various Unicode categories\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/spirit/workbench/unicode/Scripts.txt#2025-04-22_snippet_6\n\nLANGUAGE: Unicode\nCODE:\n```\n0F00..0FCC; Tibetan # Various character ranges\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for Boost Units\nDESCRIPTION: Sets up the include directories that will be used when building with the Boost Units library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/units/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(boost_units INTERFACE include)\n```\n\n----------------------------------------\n\nTITLE: Including erase_key Metafunction Header in C++\nDESCRIPTION: This code snippet shows how to include the header file for the erase_key metafunction in a C++ program. The metafunction is part of the Boost MPL library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/erase_key.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/erase_key.hpp>\n```\n\n----------------------------------------\n\nTITLE: Importing vector_c Header Files in C++\nDESCRIPTION: Shows the header files required to use vector_c in either variadic or numbered form.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/vector_c.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/vector_c.hpp>\n```\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/vector/vector10_c.hpp>\n```\n\n----------------------------------------\n\nTITLE: Including insert_range Header in C++\nDESCRIPTION: Shows how to include the necessary header file for using the insert_range metafunction in C++ code.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/insert_range.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/insert_range.hpp>\n```\n\n----------------------------------------\n\nTITLE: Adding Dependency Interface Library\nDESCRIPTION: This command creates an interface library named `gil_dependencies` which is used to group dependencies. Interface libraries are used to propagate linking requirements to dependent targets without building any actual code.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/CMakeLists.txt#2025-04-22_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\n\"add_library(gil_dependencies INTERFACE)\"\n```\n\n----------------------------------------\n\nTITLE: Adding S2 Geometry Library Subdirectory in CMake for ArangoDB\nDESCRIPTION: Adds the S2 Geometry library as a subdirectory to the project, using the version specified earlier.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/s2geometry/CMakeLists.txt#2025-04-22_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(${ARANGO_S2GEOMETRY_VERSION})\n```\n\n----------------------------------------\n\nTITLE: Implementing Tag Dispatched Metafunction Pattern in C++\nDESCRIPTION: This code snippet shows the general structure of a tag dispatched metafunction implementation. It includes the main metafunction template, the implementation class template, and specializations for different tags.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/TagDispatchedMetafunction.rst#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate< typename Tag > struct *name*\\_impl; \n\ntemplate<\n      typename X\n    *[, ...]*\n    >\nstruct *name*\n    : *name*\\_impl< typename *tag-metafunction*\\<X>::type >\n        ::template apply<X *[, ...]*>\n{\n};\n\ntemplate< typename Tag > struct *name*\\_impl\n{\n    template< typename X *[, ...]* > struct apply\n    {\n        // *default implementation*\n    };\n};\n\ntemplate<> struct *name*\\_impl<*tag*>\n{\n    template< typename X *[, ...]* > struct apply\n    {\n        // *tag-specific implementation*\n    };\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring ArangoDB Restore Library\nDESCRIPTION: Creates and configures the arango_restore library target with necessary include directories and link dependencies.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/client-tools/Restore/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(arango_restore\n  RestoreFeature.cpp\n)\ntarget_include_directories(arango_restore PUBLIC ${PROJECT_SOURCE_DIR}/client-tools)\nif (USE_ENTERPRISE)\n  target_include_directories(arango_restore PUBLIC \"${PROJECT_SOURCE_DIR}/${ENTERPRISE_INCLUDE_DIR}\")\nendif()\ntarget_link_libraries(arango_restore arango_shell)\n```\n\n----------------------------------------\n\nTITLE: Sample Numeric Test Data for ArangoDB Processing\nDESCRIPTION: A structured set of numeric values organized in rows, likely representing test input for graph processing or algorithm testing in ArangoDB. The format appears to include counts, vertex indices, edge definitions, or other numeric parameters.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/polygon/example/input_data/primary/primary_053.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n2\n1 0\n0 10\n1\n-2 10 -1 0\n```\n\n----------------------------------------\n\nTITLE: Configuring Max Initializer Lines in Doxygen\nDESCRIPTION: This option determines the maximum number of lines for an initializer to appear in documentation.  Values exceeding this limit are hidden. Use a value of 0 to hide all initializers.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/sort/doc/doxygen/sort_doxyfile.txt#2025-04-22_snippet_54\n\nLANGUAGE: Doxygen\nCODE:\n```\n\"MAX_INITIALIZER_LINES  = 30\"\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Flags for SIMD Extensions in Boost.Log\nDESCRIPTION: Configures compiler-specific flags for SIMD extensions (SSSE3 and AVX2) based on the detected compiler type (MSVC, Intel, or GCC/Clang) and platform. These flags enable architecture-specific optimizations for the Boost.Log library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/log/CMakeLists.txt#2025-04-22_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nif (BOOST_LOG_TARGET_X86)\n    if (CMAKE_CXX_COMPILER_ID STREQUAL \"MSVC\")\n        if (CMAKE_SIZEOF_VOID_P EQUAL 4)\n            set(boost_log_ssse3_cflags \"/arch:SSE2\")\n            set(boost_log_avx2_cflags \"/arch:AVX\")\n        endif()\n    elseif (CMAKE_CXX_COMPILER_ID STREQUAL \"Intel\")\n        if (WIN32)\n            set(boost_log_ssse3_cflags \"/QxSSSE3\")\n            set(boost_log_avx2_cflags \"/arch:CORE-AVX2\")\n        else()\n            set(boost_log_ssse3_cflags \"-xSSSE3\")\n            set(boost_log_avx2_cflags \"-xCORE-AVX2 -fabi-version=0\")\n        endif()\n    else()\n        set(boost_log_ssse3_cflags \"-msse -msse2 -msse3 -mssse3\")\n        set(boost_log_avx2_cflags \"-mavx -mavx2\")\n        if (NOT CMAKE_CXX_COMPILER_ID STREQUAL \"Clang\")\n            string(APPEND boost_log_avx2_cflags \" -fabi-version=0\")\n        endif()\n    endif()\n\n    set(CMAKE_REQUIRED_FLAGS \"${boost_log_ssse3_cflags}\")\n    check_cxx_source_compiles(\"#include <${CMAKE_CURRENT_SOURCE_DIR}/config/x86-ext/ssse3.cpp>\" BOOST_LOG_COMPILER_HAS_SSSE3)\n    unset(CMAKE_REQUIRED_FLAGS)\n    set(CMAKE_REQUIRED_FLAGS \"${boost_log_avx2_cflags}\")\n    check_cxx_source_compiles(\"#include <${CMAKE_CURRENT_SOURCE_DIR}/config/x86-ext/avx2.cpp>\" BOOST_LOG_COMPILER_HAS_AVX2)\n    unset(CMAKE_REQUIRED_FLAGS)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Checking Doxygen Availability and Generating HTML Documentation\nDESCRIPTION: This snippet configures the Doxygen documentation generation for HTML output. It checks if Doxygen is found and sets various parameters to control the documentation generation process. If Doxygen is not available, a warning message is displayed.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hana/doc/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(Doxygen)\nif (NOT DOXYGEN_FOUND)\n    message(WARNING \"Doxygen was not found; the 'doc' and 'docset' targets \\\n                    \"will be unavailable.\")\n    return()\nendif()\n\nset(HANA_HTML_OUTPUT       html)\nset(HANA_GENERATE_DOCSET   NO)\nset(HANA_GENERATE_TREEVIEW YES)\nset(HANA_SEARCHENGINE      YES)\nconfigure_file(Doxyfile.in documentation.doxygen @ONLY)\nadd_custom_target(doc\n    COMMAND ${CMAKE_COMMAND} -E remove_directory html\n    COMMAND ${DOXYGEN_EXECUTABLE} documentation.doxygen\n    COMMENT \"Generating API documentation with Doxygen\"\n    VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version and Project\nDESCRIPTION: This snippet specifies the minimum required version of CMake and initializes the Boost Function Types project with the given version and language.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/function_types/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required( VERSION 3.5...3.20 )\nproject( boost_function_types VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX )\n```\n\n----------------------------------------\n\nTITLE: Creating Table of Contents for ArangoDB Examples in RST\nDESCRIPTION: This RST code creates a table of contents for example documentation pages in the ArangoDB project. It uses the toctree directive with maxdepth set to 1 to list various example pages that users can navigate to.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/doc/src/examples.rst.txt#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :maxdepth: 1\n\n    example_print\n    example_overloading\n    example_polymorphic_constructors\n    more_examples\n```\n\n----------------------------------------\n\nTITLE: Including the front Metafunction Header in C++\nDESCRIPTION: Shows how to include the header file for the 'front' metafunction in a C++ program.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/front.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/front.hpp>\n```\n\n----------------------------------------\n\nTITLE: Handling Unsupported Examples\nDESCRIPTION: Adds example files requiring Boost to an exclusion list if Boost is not found, preventing them from being built.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hana/example/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT Boost_FOUND)\n    list(APPEND EXCLUDED_EXAMPLES ${EXAMPLES_REQUIRING_BOOST})\nendif()\n\nlist(APPEND EXCLUDED_EXAMPLES \"cmake_integration/main.cpp\")\n```\n\n----------------------------------------\n\nTITLE: Defining erase Metafunction Template in C++\nDESCRIPTION: Defines the template for the erase metafunction, which takes a Sequence, First iterator, and optional Last iterator as parameters. It returns an unspecified type representing the modified sequence.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/erase.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      typename Sequence\n    , typename First\n    , typename Last = |unspecified|\n    >\nstruct erase\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Formatting Percentage with Boost.Locale in C++\nDESCRIPTION: Shows how to format a number as a percentage using Boost.Locale manipulators. The example demonstrates converting a decimal to a percentage representation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/doc/formatting_and_parsing.txt#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ncout << as::percent << 0.25 <<endl;\n```\n\n----------------------------------------\n\nTITLE: Defining Macros in C++\nDESCRIPTION: Examples of macro naming conventions using all capitals with underscores, though macros are generally discouraged.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/STYLEGUIDE.md#2025-04-22_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\n#define ROUND(x) ...\n#define PI_ROUNDED 3.0\n```\n\n----------------------------------------\n\nTITLE: HTML Table Implementation List\nDESCRIPTION: An HTML table listing various CommonJS implementations, their API versions, and supported JavaScript interpreters. The table includes projects like Narwhal, v8cgi, Helma, and others.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/js/common/test-data/modules/commonjs/docs/index.html.markdown#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<table id=\"implementations\" class=\"tablesorter\">\n  <thead>\n  <tr><th>Project</th><th>API Version</th><th>Interpreter</tr>\n  </thead>\n  <tbody>\n  <tr><td><a href=\"impl/narwhal.html\">Narwhal</a></td><td>0.1+</td><td><a href=\"interp/rhino.html\">Rhino</a>, <a href=\"interp/mozilla.html\">Mozilla</a></td></tr>\n  <tr><td><a href=\"impl/v8cgi.html\">v8cgi</a></td><td>0.1+</td><td><a href=\"interp/v8.html\">v8</a></td></tr>\n  <tr><td><a href=\"impl/helma.html\">Helma</a></td><td>0.1+</td><td><a href=\"interp/rhino.html\">Rhino</a></td></tr>\n  <tr><td><a href=\"impl/persevere.html\">Persevere</a></td><td>0.1+</td><td><a href=\"interp/rhino.html\">Rhino</a></td></tr>\n  <tr><td><a href=\"impl/gpsee.html\">GPSEE</a></td><td>0.1+</td><td><a href=\"interp/spidermonkey.html\">SpiderMonkey</a></td></tr>\n  <tr><td><a href=\"impl/flusspferd.html\">Flusspferd</a></td><td>0.1+</td><td><a href=\"interp/spidermonkey.html\">SpiderMonkey</a></td></tr>\n  <tr><td><a href=\"impl/monkeyscript.html\">MonkeyScript</a></td><td>0.0</td><td><a href=\"interp/rhino.html\">Rhino</a></td></tr>\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Configuring Optional MPI Support in CMake\nDESCRIPTION: Adds MPI support to the Boost MPI library if the BOOST_ENABLE_MPI option is set. It finds the MPI package and links it to the library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpi/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(BOOST_ENABLE_MPI)\n\n  find_package(MPI REQUIRED COMPONENTS CXX)\n  target_link_libraries(boost_mpi PUBLIC MPI::MPI_CXX)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Initializing Boost Lockfree Library in CMake\nDESCRIPTION: Sets up the Boost Lockfree library as an interface library with its dependencies and include directories. It defines the project, creates the library target, and links necessary Boost components.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/lockfree/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.16)\n\nproject(boost_lockfree VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n\nadd_library(boost_lockfree INTERFACE)\nadd_library(Boost::lockfree ALIAS boost_lockfree)\n\ntarget_include_directories(boost_lockfree INTERFACE include)\n\ntarget_link_libraries(boost_lockfree\n  INTERFACE\n    Boost::align\n    Boost::array\n    Boost::assert\n    Boost::atomic\n    Boost::config\n    Boost::core\n    Boost::integer\n    Boost::iterator\n    Boost::mpl\n    Boost::parameter\n    Boost::predef\n    Boost::static_assert\n    Boost::tuple\n    Boost::type_traits\n    Boost::utility\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Deseret Unicode Block\nDESCRIPTION: Lists the code point range for the Deseret script in Unicode. This block contains 80 code points representing letters in both capital and small forms for the Deseret alphabet.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/spirit/workbench/unicode/Scripts.txt#2025-04-22_snippet_24\n\nLANGUAGE: unicode\nCODE:\n```\n10400..1044F  ; Deseret # L&  [80] DESERET CAPITAL LETTER LONG I..DESERET SMALL LETTER EW\n```\n\n----------------------------------------\n\nTITLE: Configuring ArangoDB Async Interface Library with CMake\nDESCRIPTION: Creates an INTERFACE library named arango_async_interface and sets up its include directories. The INTERFACE keyword indicates this is a header-only library that only specifies interface requirements.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/lib/Async/include/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(arango_async_interface INTERFACE)\ntarget_include_directories(arango_async_interface INTERFACE .)\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost Beast CMake Project\nDESCRIPTION: Sets up the main CMake project for Boost Beast, including version, build options, and compiler flags.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/beast/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required (VERSION 3.5.1)\n\nproject (Beast VERSION 322)\n\nset_property (GLOBAL PROPERTY USE_FOLDERS ON)\noption (Beast_BUILD_EXAMPLES \"Build examples\" ON)\noption (Beast_BUILD_TESTS \"Build tests\" ON)\noption (Beast_ENABLE_HANDLER_TRACKING \"Define BOOST_ASIO_ENABLE_HANDLER_TRACKING when building libraries\" OFF)\noption (Boost_USE_STATIC_LIBS \"Use Static Boost libraries\" ON)\n```\n\n----------------------------------------\n\nTITLE: Configuring and Adding libunwind Source in CMake\nDESCRIPTION: Configures necessary header files and adds the source directory for libunwind compilation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/libunwind/v1.7.2/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DHAVE_CONFIG_H)\n\nconfigure_file(include/config.h.cmake.in ${CMAKE_CURRENT_BINARY_DIR}/include/config.h)\nconfigure_file(include/libunwind-common.h.in ${CMAKE_CURRENT_BINARY_DIR}/include/libunwind-common.h)\nconfigure_file(include/libunwind.h.in ${CMAKE_CURRENT_BINARY_DIR}/include/libunwind.h)\nconfigure_file(include/tdep/libunwind_i.h.in ${CMAKE_CURRENT_BINARY_DIR}/include/tdep/libunwind_i.h)\n\nadd_subdirectory(src)\n```\n\n----------------------------------------\n\nTITLE: Adding library targets\nDESCRIPTION: Adds two library targets: `boost_dynamic_bitset` and `Boost::dynamic_bitset`. The latter is an alias for the former, providing a namespaced target name.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/dynamic_bitset/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(boost_dynamic_bitset INTERFACE)\nadd_library(Boost::dynamic_bitset ALIAS boost_dynamic_bitset)\n```\n\n----------------------------------------\n\nTITLE: Implementing Iterator Distance Calculation in C++\nDESCRIPTION: Template function implementation for calculating the distance between two iterator_adaptor instances.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/iterator_adaptor_ref.rst#2025-04-22_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <\n    class OtherDerived, class OtherIterator, class V, class C, class R, class D\n>   \ntypename iterator_adaptor::difference_type distance_to(\n    iterator_adaptor<OtherDerived, OtherIterator, V, C, R, D> const& y) const;\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Policies and Module Paths for Boost.Nowide\nDESCRIPTION: Configures CMake policies and module paths. Sets the runtime output directory to ensure all binaries are placed in one location for testing.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/nowide/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(POLICY CMP0074)\n  cmake_policy(SET CMP0074 NEW)\nendif()\n\nlist(INSERT CMAKE_MODULE_PATH 0 ${CMAKE_CURRENT_SOURCE_DIR}/cmake)\n\nif(NOT CMAKE_RUNTIME_OUTPUT_DIRECTORY)\n  # Make sure all binarys (especially exe/dll) are in one directory for tests to work\n  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Declaring Static Decay Function Object Instance in C++\nDESCRIPTION: Declaration of the static 'decay' variable that provides the decay functionality. Uses BOOST_HOF_DECLARE_STATIC_VAR macro to ensure proper initialization across different compilation units.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/decay.hpp.txt#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_HOF_DECLARE_STATIC_VAR(decay, detail::decay_f);\n```\n\n----------------------------------------\n\nTITLE: Adding Wide Character Serialization Headers to IDE in CMake\nDESCRIPTION: Adds wide character serialization-related header files to the IDE for better organization. Uses a glob pattern to identify wide character-specific headers.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/serialization/CMake/CMakeLists.txt#2025-04-22_snippet_24\n\nLANGUAGE: CMake\nCODE:\n```\nfile(GLOB x \n  RELATIVE \"${CMAKE_CURRENT_SOURCE_DIR}\" \n  \"${CMAKE_CURRENT_SOURCE_DIR}/../include/boost/archive/*_w*.hpp\"\n)\nadd_custom_target(wserialization_headers SOURCES ${x})\nset_property(TARGET wserialization_headers PROPERTY FOLDER \"wserialization\")\n```\n\n----------------------------------------\n\nTITLE: Configuring VHDL-Optimized Output in Doxygen\nDESCRIPTION: Setting to optimize Doxygen output for VHDL source projects. Tailors documentation specifically for VHDL code. Default is NO.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/sort/doc/doxygen/sort_doxyfile.txt#2025-04-22_snippet_10\n\nLANGUAGE: text\nCODE:\n```\nOPTIMIZE_OUTPUT_VHDL   = NO\n```\n\n----------------------------------------\n\nTITLE: Cloning Boost Project with Submodules\nDESCRIPTION: Git command sequence to clone the entire Boost project and initialize graph library submodules, enabling access to Boost Graph Library sources\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/boostorg/boost\ncd boost\ngit submodule update --init\n```\n\n----------------------------------------\n\nTITLE: Python Class Registration Mechanism\nDESCRIPTION: Shows the internal Python registration process when creating a new class through Boost.Python, illustrating type creation, module association, and default behaviors\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/doc/internals.rst#2025-04-22_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nboring = Boost.Python.class(\n    'boring'\n  , bases_tuple       # in this case, just ()\n  , { \n        '__module__' : module_name\n      , '__doc__' : doc_string # optional\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Dynamic Rotation View Implementation\nDESCRIPTION: The implementation of a function for generating a 180-degree rotated view of an image. This allows both compile-time and runtime specified views to be handled uniformly.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/dynamic_image.rst#2025-04-22_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\n// implementation using templated view\ntemplate <typename View>\ntypename dynamic_xy_step_type<View>::type rotated180_view(const View& src) { ... }\n\nnamespace detail\n{\n    // the function, wrapped inside a function object\n    template <typename Result> struct rotated180_view_fn\n    {\n        typedef Result result_type;\n        template <typename View> result_type operator()(const View& src) const\n        {\n            return result_type(rotated180_view(src));\n        }\n    };\n}\n\n// overloading of the function using variant. Takes and returns run-time bound view.\n// The returned view has a dynamic step\ntemplate <typename ViewTypes> inline // Models MPL Random Access Container of models of ImageViewConcept\ntypename dynamic_xy_step_type<any_image_view<ViewTypes>>::type rotated180_view(const any_image_view<ViewTypes>& src)\n{\n    return apply_operation(src, detail::rotated180_view_fn<typename dynamic_xy_step_type<any_image_view<ViewTypes>>::type>());\n}\n```\n\n----------------------------------------\n\nTITLE: PlantUML Diagram for POSIX No Error Scenario\nDESCRIPTION: This PlantUML diagram illustrates the scenario where a POSIX process successfully forks and executes a new program without errors. It depicts the interactions between the parent process (Father), the child process (Child), and the executed program (Exe), showing the flow from fork to successful execution.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/process/doc/images/plantuml.txt#2025-04-22_snippet_1\n\nLANGUAGE: PlantUML\nCODE:\n```\n\"/**\\n\\plantuml\\nactivate Father \\n\\nbox \\\"Child Process\\\" #LightGrey\\n    participant Child\\n    participant Exe\\nend box\\n\\nFather->Father : on_setup\\nactivate Father\\ndeactivate Father\\nFather->Child : fork\\nactivate Child \\nFather -> Father : wait for error\\ndeactivate Father\\n\\n\\nChild->Child : on_exec_setup\\nactivate Child\\ndeactivate Child\\nChild->Exe : execve\\ndeactivate Child\\nactivate Father\\nactivate Exe \\n\\nFather -> Father : on_success \\nactivate Father\\ndeactivate Father\\n\\endplantuml */\"\n```\n\n----------------------------------------\n\nTITLE: Defining TOC for Boost HOF Traits in reStructuredText\nDESCRIPTION: This snippet defines a table of contents (TOC) for the Boost HOF traits documentation using reStructuredText syntax. It specifies the maximum depth of the TOC and lists the paths to individual trait documentation files.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/src/traits.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n    :maxdepth: 1\n    \n    ../../include/boost/hof/function_param_limit\n    ../../include/boost/hof/is_invocable\n    ../../include/boost/hof/is_unpackable\n    ../../include/boost/hof/unpack_sequence\n```\n\n----------------------------------------\n\nTITLE: Setting Up Include Directories for ArangoDB Tests\nDESCRIPTION: Configures the private include directories for the ArangoDB test suite, including paths to core components, enterprise features, and test-specific directories.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/CMakeLists.txt#2025-04-22_snippet_25\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(arangodbtests PRIVATE\n  ${PROJECT_SOURCE_DIR}/arangod\n  ${PROJECT_SOURCE_DIR}/${ENTERPRISE_INCLUDE_DIR}\n  ${CMAKE_CURRENT_SOURCE_DIR}\n  ${CMAKE_CURRENT_SOURCE_DIR}/Mocks/\n)\n```\n\n----------------------------------------\n\nTITLE: Installing LZ4 using Make commands\nDESCRIPTION: Commands for installing LZ4 using Make. These commands compile and install LZ4, potentially requiring root permissions for the installation step.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/lz4/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake\nmake install     # this command may require root permissions\n```\n\n----------------------------------------\n\nTITLE: Conditional Test Directory Inclusion\nDESCRIPTION: This snippet checks if testing is enabled and includes a subdirectory for tests if the corresponding CMakeLists.txt file exists. This is useful for automatically setting up test configurations based on the project setup.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/foreach/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(BUILD_TESTING AND EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/test/CMakeLists.txt\")\n\n  add_subdirectory(test)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Parsing ArangoDB Serialization Archive in Binary\nDESCRIPTION: This binary data represents a serialized archive for ArangoDB. It contains structured information, possibly including geographical coordinates, street names, and other location data. The format is specific to ArangoDB's serialization mechanism.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/serialization/example/demofile.txt#2025-04-22_snippet_0\n\nLANGUAGE: Binary\nCODE:\n```\n22 serialization::archive 3 0 2 0 0 6 0 0 0 0 6 24 4 1 0\n0 0 0 3 5 1 0\n1 0 0 0 0 34 135 52.560001 134 22 78.300003 11 24th Street 11 10th Avenue 5\n2 35 137 23.455999 133 35 54.119999 12 State street 20 Cathedral Vista Lane 6 1 0\n3 35 136 15.456 133 32 15.3 11 White House 9 57 4\n0 11 2 4\n0 7 17 4\n4 3 6\n5 35 134 48.789001 133 32 16.23 16 Lincoln Memorial 6\n3 5\n2 9 38 4\n4 11 47 4\n4\n```\n\n----------------------------------------\n\nTITLE: Building API documentation with Docker Compose\nDESCRIPTION: These commands set up environment variables and use Docker Compose to build the ArangoDB API documentation.  It requires a working Docker Compose installation and the documentation repository.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/CONTRIBUTING.md#2025-04-22_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nexport ENV=static  # Bash\n   set -xg ENV static # Fish\n   $Env:ENV='static'  # PowerShell\n```\n\nLANGUAGE: shell\nCODE:\n```\ndocker compose -f docker-compose.plain-build.yml up --abort-on-container-exit\n```\n\n----------------------------------------\n\nTITLE: Configuring Hashed Map Tests in CMake\nDESCRIPTION: Checks if the hash_map header is available and conditionally sets up related tests. This accommodates systems where hash_map may not be available.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/serialization/CMake/CMakeLists.txt#2025-04-22_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nCHECK_INCLUDE_FILE_CXX(hash_map HASH_MAP_FOUND)\nif(HASH_MAP_FOUND)\n  archive_test(test_map_hashed A)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Pointer Ownership Transfer Between Containers\nDESCRIPTION: Demonstrates how to transfer pointer ownership between different pointer containers without cloning.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/examples.rst#2025-04-22_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\nptr_list<X> list; ptr_vector<X> vec;\n...\n//\n// note: no cloning happens in these examples                                \n//\nlist.transfer( list.begin(), vec.begin(), vec );           // make the first element of 'vec' the first element of 'list'\nvec.transfer( vec.end(), list.begin(), list.end(), list ); // put all the lists element into the vector\n```\n\n----------------------------------------\n\nTITLE: Configuring Architecture for Boost.Context\nDESCRIPTION: Sets up a CMake cache variable for the architecture, automatically detecting the appropriate architecture based on the system processor.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/context/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(_all_archs arm arm64 mips32 mips64 ppc32 ppc64 riscv64 s390x i386 x86_64 combined)\n\n# Try at start to auto determine arch from CMake.\nif(CMAKE_SYSTEM_PROCESSOR IN_LIST _all_archs)\n  set(_default_arch ${CMAKE_SYSTEM_PROCESSOR})\nelseif(_bits EQUAL 32)\n  if(CMAKE_SYSTEM_PROCESSOR MATCHES \"^arm\")\n    set(_default_arch arm)\n  elseif(CMAKE_SYSTEM_PROCESSOR MATCHES \"^mips\")\n    set(_default_arch mips32)\n  else()\n    set(_default_arch i386)\n  endif()\nelse()\n  if(CMAKE_SYSTEM_PROCESSOR STREQUAL \"aarch64\" OR\n    CMAKE_SYSTEM_PROCESSOR MATCHES \"^arm\") # armv8\n    set(_default_arch arm64)\n  elseif(CMAKE_SYSTEM_PROCESSOR MATCHES \"^mips\")\n    set(_default_arch mips64)\n  else()\n    set(_default_arch x86_64)\n  endif()\nendif()\n\nset(BOOST_CONTEXT_ARCHITECTURE \"${_default_arch}\" CACHE STRING \"Boost.Context architecture (arm, arm64, mips32, mips64, ppc32, ppc64, riscv64, s390x, i386, x86_64, combined)\")\nset_property(CACHE BOOST_CONTEXT_ARCHITECTURE PROPERTY STRINGS ${_all_archs})\n\nunset(_all_archs)\nunset(_bits)\nunset(_default_arch)\n```\n\n----------------------------------------\n\nTITLE: Setting S2 Targets Based on GTEST_ROOT\nDESCRIPTION: This snippet configures S2 library targets for installation. If GTEST_ROOT is defined, it adds the 's2testing' target. Otherwise, it only sets 's2' as the target. This dynamic configuration allows for testing setup when Google Test is available.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/s2geometry/master/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif (GTEST_ROOT)\n  set(S2_TARGETS s2 s2testing)\nelse()\n  set(S2_TARGETS s2)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Example Implementation of Unpack Sequence Specialization\nDESCRIPTION: Demonstrates how to specialize the unpack_sequence template for a custom sequence type 'my_sequence'. Shows implementation of the static apply function that unpacks the sequence members.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/unpack_sequence.hpp.txt#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nstruct my_sequence\n{\n    int x;\n    int y;\n};\n\nnamespace boost { namespace hof {\n    template<>\n    struct unpack_sequence<my_sequence>\n    {\n        template<class F, class Sequence>\n        constexpr static auto apply(F&& f, Sequence&& s) BOOST_HOF_RETURNS\n        (\n            f(s.x, s.y)\n        );\n    };\n}} // namespace boost::hof\n```\n\n----------------------------------------\n\nTITLE: Example Usage of replace_if in C++\nDESCRIPTION: Provides an example of using the replace_if algorithm to replace elements greater than 4 with 0 in a vector of integers.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/replace_if.rst#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\ntypedef vector_c<int,1,4,5,2,7,5,3,5> numbers;\ntypedef vector_c<int,1,4,0,2,0,0,3,0> expected;\ntypedef replace_if< numbers, greater<_,int_<4> >, int_<0> >::type result;\n\nBOOST_MPL_ASSERT(( equal< result,expected, equal_to<_,_> > ));\n```\n\n----------------------------------------\n\nTITLE: Using inherit Template Metafunction in C++\nDESCRIPTION: Example usage of the inherit template metafunction to create derived classes from various combinations of base classes, including empty_base. Demonstrates type checks using BOOST_MPL_ASSERT.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/inherit.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nstruct udt1 { int n; };\nstruct udt2 {};\n\ntypedef inherit<udt1,udt2>::type r1;\ntypedef inherit<empty_base,udt1>::type r2;\ntypedef inherit<empty_base,udt1,empty_base,empty_base>::type r3;\ntypedef inherit<udt1,empty_base,udt2>::type r4;\ntypedef inherit<empty_base,empty_base>::type r5;\n\nBOOST_MPL_ASSERT(( is_base_and_derived< udt1, r1> ));\nBOOST_MPL_ASSERT(( is_base_and_derived< udt2, r1> ));\nBOOST_MPL_ASSERT(( is_same< r2, udt1> ));\nBOOST_MPL_ASSERT(( is_same< r3, udt1 > ));\nBOOST_MPL_ASSERT(( is_base_and_derived< udt1, r4 > ));\nBOOST_MPL_ASSERT(( is_base_and_derived< udt2, r4 > ));\nBOOST_MPL_ASSERT(( is_same< r5, empty_base > ));\n```\n\n----------------------------------------\n\nTITLE: Defining Bopomofo Unicode Block\nDESCRIPTION: Lists the code point ranges for the Bopomofo script in Unicode. This block contains 65 code points representing phonetic symbols used for Chinese.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/spirit/workbench/unicode/Scripts.txt#2025-04-22_snippet_19\n\nLANGUAGE: unicode\nCODE:\n```\n3105..312D    ; Bopomofo # Lo  [41] BOPOMOFO LETTER B..BOPOMOFO LETTER IH\n31A0..31B7    ; Bopomofo # Lo  [24] BOPOMOFO LETTER BU..BOPOMOFO FINAL LETTER H\n```\n\n----------------------------------------\n\nTITLE: Conditional Boost Dependency Management\nDESCRIPTION: Implements different strategies for linking Boost dependencies based on build environment (superproject, in-tree, or out-of-tree)\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/property_tree/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(BOOST_SUPERPROJECT_VERSION)\n    target_link_libraries(boost_property_tree\n      INTERFACE\n        Boost::any\n        Boost::assert\n        ...\n    )\nelseif(BOOST_PROPERTY_TREE_IN_BOOST_TREE)\n    find_package(Boost COMPONENTS serialization REQUIRED)\n    target_include_directories(boost_property_tree INTERFACE ${BOOST_ROOT})\nelse()\n    find_package(Boost REQUIRED)\n    target_link_libraries(boost_property_tree\n        INTERFACE\n            Boost::boost\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining BOOST MPL Configuration Macro\nDESCRIPTION: Configuration macro that determines whether a compiler supports the has_xxx trait functionality. When defined, indicates that the compiler does not support BOOST_MPL_HAS_XXX_TRAIT_DEF and BOOST_MPL_HAS_XXX_TRAIT_NAMED_DEF introspection macros.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/CFG_NO_HAS_XXX.rst#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n// #define BOOST_MPL_CFG_NO_HAS_XXX\n```\n\n----------------------------------------\n\nTITLE: Running Docker build container\nDESCRIPTION: This command starts a Docker container for building ArangoDB, mounting the current directory as a volume and mapping port 3000 for accessing the web interface.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/CONTRIBUTING.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd arangodb\n    docker run -it -v $(pwd):/root/project -p 3000:3000 arangodb/ubuntubuildarangodb-devel:3\n```\n\n----------------------------------------\n\nTITLE: Configuring Graph Source File in CMake\nDESCRIPTION: Adds a private source file for the arango_graph target, specifically including the RefactoredSingleServerEdgeCursor.cpp implementation\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/Graph/Cursors/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(arango_graph PRIVATE\n  RefactoredSingleServerEdgeCursor.cpp)\n```\n\n----------------------------------------\n\nTITLE: Building Gettext from Source on Windows using MinGW\nDESCRIPTION: Shell commands for building GNU Gettext and its dependency libiconv from source code using MinGW environment. The code configures and builds static versions of both libraries with a custom installation prefix.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/doc/gettext_for_windows.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd libiconv-SOMEVERSION\n./configure --prefix=c:/mygettext --disable-shared\nmake\nmake install\ncd ..\ncd gettext-SOMEVERSION\n./configure --prefix=c:/mygettext --disable-shared --with-libiconv-prefix=c:/mygettext\nmake\nmake install\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Osmanya Script Character Ranges\nDESCRIPTION: Lists Unicode character ranges for the Osmanya script, including letters and digits. Osmanya was created in the 1920s to write the Somali language.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/spirit/workbench/unicode/Scripts.txt#2025-04-22_snippet_35\n\nLANGUAGE: unicode\nCODE:\n```\n10480..1049D  ; Osmanya # Lo  [30] OSMANYA LETTER ALEF..OSMANYA LETTER OO\n104A0..104A9  ; Osmanya # Nd  [10] OSMANYA DIGIT ZERO..OSMANYA DIGIT NINE\n\n# Total code points: 40\n```\n\n----------------------------------------\n\nTITLE: Channels Compatible Concept Definition\nDESCRIPTION: Defines the ChannelsCompatibleConcept in C++. This concept checks if two channels are compatible, which means they have the same value type. It relies on SameType to determine if the value types of the two channels are identical.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/channel.rst#2025-04-22_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\n  concept ChannelsCompatibleConcept<ChannelConcept T1, ChannelConcept T2>\n  {\n      where SameType<T1::value_type, T2::value_type>;\n  };\n```\n\n----------------------------------------\n\nTITLE: Building S2 Geometry Library from Source\nDESCRIPTION: Steps to build the S2 Geometry Library from source, including creating a build directory, running CMake, and compiling the project.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/s2geometry/master/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmkdir build\ncd build\ncmake -DGTEST_ROOT=/usr/src/gtest -DCMAKE_PREFIX_PATH=/path/to/absl/install -DCMAKE_CXX_STANDARD=11 ..\nmake -j $(nproc)\nmake test ARGS=\"-j$(nproc)\"\nsudo make install\n```\n\n----------------------------------------\n\nTITLE: CMakeLists.txt Fix\nDESCRIPTION: This entry notes a fix to the CMakeLists.txt file, resolving build system issues.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/beast/CHANGELOG.md#2025-04-22_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: V8 External Project Configuration\nDESCRIPTION: Sets up the V8 build as an external project in CMake, configuring build targets, compiler flags, and build commands for V8 and ICU components.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/v8-build/CMakeLists.txt#2025-04-22_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nExternalProject_Add(v8_build\n    BUILD_IN_SOURCE\n      TRUE\n    SOURCE_DIR\n      \"${V8_DIR}\"\n    CONFIGURE_COMMAND\n      ${CMAKE_COMMAND} -E env CFLAGS=${V8_CFLAGS} CXXFLAGS=${V8_CXXFLAGS} cflags_c=${V8_CFLAGS} cflags_cc=${V8_CXXFLAGS} \"${PYTHON_EXECUTABLE}\" ${GYP_MAIN} ${V8_GYP_ARGS} \n    BUILD_COMMAND\n      $(MAKE) ${V8_COMPILE_TARGETS} ${V8_COMPILE_ARGS}\n    STEP_TARGETS\n      icui18n icuuc v8_libbase v8_libplatform v8_snapshot\n    INSTALL_COMMAND\n      \"\"\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining fold template in C++\nDESCRIPTION: Defines the fold template structure with Sequence, State, and ForwardOp parameters. The type member is unspecified.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/fold.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      typename Sequence\n    , typename State\n    , typename ForwardOp\n    >\nstruct fold\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Buhid Script Character Ranges\nDESCRIPTION: Lists Unicode character ranges for the Buhid script, including letters and vowel signs. The Buhid script is used by the Buhid people of the Philippines.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/spirit/workbench/unicode/Scripts.txt#2025-04-22_snippet_28\n\nLANGUAGE: unicode\nCODE:\n```\n1740..1751    ; Buhid # Lo  [18] BUHID LETTER A..BUHID LETTER HA\n1752..1753    ; Buhid # Mn   [2] BUHID VOWEL SIGN I..BUHID VOWEL SIGN U\n\n# Total code points: 20\n```\n\n----------------------------------------\n\nTITLE: Installing Foxx Manager and ArangoInspect Aliases\nDESCRIPTION: Creates and installs command aliases for foxx-manager and arangoinspect tools.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/client-tools/Shell/CMakeLists.txt#2025-04-22_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\n  install_command_alias(${BIN_ARANGOSH}\n    ${CMAKE_INSTALL_BINDIR}\n    foxx-manager)\n\n  install_config(foxx-manager)\n\n################################################################################\n## arangoinspect\n################################################################################\n  install_command_alias(${BIN_ARANGOSH}\n    ${CMAKE_INSTALL_BINDIR}\n    arangoinspect)\n\n  install_config(arangoinspect)\n```\n\n----------------------------------------\n\nTITLE: Including empty_base header in C++\nDESCRIPTION: Shows the header file that needs to be included to use the empty_base struct in C++ code. This header is part of the Boost MPL library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/empty_base.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/empty_base.hpp>\n```\n\n----------------------------------------\n\nTITLE: Implementing Postfix Adaptor in C++\nDESCRIPTION: Implementation of a postfix_adaptor class template that serves as an intermediate representation when using the infix adaptor. It holds the left-hand operand and the function to be applied.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/infix.hpp.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nnamespace detail{\ntemplate<class T, class F>\nstruct postfix_adaptor : F\n{\n    T x;\n\n    template<class X, class XF>\n    constexpr postfix_adaptor(X&& xp, XF&& fp)\n    BOOST_HOF_NOEXCEPT(BOOST_HOF_IS_NOTHROW_CONSTRUCTIBLE(F, XF&&) && BOOST_HOF_IS_NOTHROW_CONSTRUCTIBLE(T, X&&)) \n    : F(BOOST_HOF_FORWARD(XF)(fp)), x(BOOST_HOF_FORWARD(X)(xp))\n    {}\n\n    template<class... Ts>\n    constexpr const F& base_function(Ts&&... xs) const noexcept\n    {\n        return boost::hof::always_ref(*this)(xs...);\n    }\n\n    BOOST_HOF_RETURNS_CLASS(postfix_adaptor);\n\n    template<class... Ts>\n    constexpr BOOST_HOF_SFINAE_RESULT(const F&, id_<T&&>, id_<Ts>...)\n    operator()(Ts&&... xs) const BOOST_HOF_SFINAE_RETURNS\n    (\n        (BOOST_HOF_MANGLE_CAST(const F&)(BOOST_HOF_CONST_THIS->base_function(xs...)))(BOOST_HOF_RETURNS_C_CAST(T&&)(BOOST_HOF_CONST_THIS->x), BOOST_HOF_FORWARD(Ts)(xs)...)\n    );\n\n    template<class A>\n    constexpr BOOST_HOF_SFINAE_RESULT(const F&, id_<T&&>, id_<A>)\n    operator>(A&& a) const BOOST_HOF_SFINAE_RETURNS\n    (\n        (BOOST_HOF_MANGLE_CAST(const F&)(BOOST_HOF_CONST_THIS->base_function(a)))(BOOST_HOF_RETURNS_C_CAST(T&&)(BOOST_HOF_CONST_THIS->x), BOOST_HOF_FORWARD(A)(a))\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Including Reverse Algorithm Header in C++\nDESCRIPTION: Shows the header file that needs to be included to use the 'reverse' algorithm in C++ code.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/reverse.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/reverse.hpp>\n```\n\n----------------------------------------\n\nTITLE: Using BOOST_PARAMETER_NO_SPEC_MEMBER_FUNCTION in a Frontend Class Template\nDESCRIPTION: Demonstrates how to use BOOST_PARAMETER_NO_SPEC_MEMBER_FUNCTION to create a member function that takes named arguments, delegating to back-end classes via parameterized inheritance.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_74\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <typename B>\nstruct frontend : B\n{\n    frontend() : B()\n    {\n    }\n\n    BOOST_PARAMETER_NO_SPEC_MEMBER_FUNCTION((void), initialize)\n    {\n        this->initialize_impl(args);\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Incrementing Planar Pixel Iterator\nDESCRIPTION: This code snippet provides the implementation of the increment operator 'operator++' for the 'planar_pixel_iterator', utilizing compile-time recursion for pointer increments.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/pixel_iterator.rst#2025-04-22_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\n  template <typename T>\n  struct inc : public std::unary_function<T,T>\n  {\n    T operator()(T x) const { return ++x; }\n  };\n\n  template <typename ChannelPtr, typename ColorSpace>\n  planar_pixel_iterator<ChannelPtr,ColorSpace>&\n  planar_pixel_iterator<ChannelPtr,ColorSpace>::operator++()\n  {\n    static_transform(*this,*this,inc<ChannelPtr>());\n    return *this;\n  }\n```\n\n----------------------------------------\n\nTITLE: Limiting Arity with Partial Sum Function in C++\nDESCRIPTION: This snippet shows how to use the 'limit' decorator to restrict the maximum arity of a partial function, preventing unintended partial evaluations and improving error messages.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/doc/src/partialfunctions.md.txt#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nauto sum = partial(limit_c<2>([](int x, int y)\n{\n    return x+y;\n}));\n```\n\n----------------------------------------\n\nTITLE: Configuring Case Sensitivity for Filenames in Doxygen\nDESCRIPTION: This option specifies whether doxygen generates filenames in lower-case letters only. Set to YES to allow uppercase letters.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/sort/doc/doxygen/sort_doxyfile.txt#2025-04-22_snippet_36\n\nLANGUAGE: Doxygen\nCODE:\n```\n\"CASE_SENSE_NAMES       = NO\"\n```\n\n----------------------------------------\n\nTITLE: Listing Other ID Continue Characters in Unicode\nDESCRIPTION: Lists Unicode code points classified as Other_ID_Continue. These characters can be used as non-initial characters in an identifier but don't meet the criteria for other identifier continuation categories. The list includes punctuation marks and numerals from various scripts.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/spirit/workbench/unicode/PropList.txt#2025-04-22_snippet_26\n\nLANGUAGE: Unicode data format\nCODE:\n```\n00B7          ; Other_ID_Continue # Po       MIDDLE DOT\n0387          ; Other_ID_Continue # Po       GREEK ANO TELEIA\n1369..1371    ; Other_ID_Continue # No   [9] ETHIOPIC DIGIT ONE..ETHIOPIC DIGIT NINE\n\n# Total code points: 11\n```\n\n----------------------------------------\n\nTITLE: Configuring Include File Display in Doxygen\nDESCRIPTION: This option specifies whether doxygen puts a list of the files that are included by a file in the documentation of that file. Setting it to YES includes the list.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/sort/doc/doxygen/sort_doxyfile.txt#2025-04-22_snippet_39\n\nLANGUAGE: Doxygen\nCODE:\n```\n\"SHOW_INCLUDE_FILES     = YES\"\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: This snippet sets the include directories for the boost_rational library. The include directory specified is 'include', relative to the source directory, which is added as an INTERFACE include directory for consumers of the library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/rational/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n\"target_include_directories(boost_rational INTERFACE include)\"\n```\n\n----------------------------------------\n\nTITLE: Path and File Name Configuration in Doxygen\nDESCRIPTION: Settings for path handling, file name formatting, and include path configuration.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/sort/doc/doxygen/sort_doxyfile.txt#2025-04-22_snippet_3\n\nLANGUAGE: INI\nCODE:\n```\nFULL_PATH_NAMES        = YES\nSTRIP_FROM_PATH        = \nSTRIP_FROM_INC_PATH    = \nSHORT_NAMES            = NO\n```\n\n----------------------------------------\n\nTITLE: Accessing Nullary Metafunction Result\nDESCRIPTION: Demonstrates how to access the result of a nullary metafunction through its nested 'type' typedef. A nullary metafunction is represented as a (template) class with a nested type member.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/Metafunction.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntypedef f::type x;\n```\n\n----------------------------------------\n\nTITLE: Including System Directories to Suppress Warnings\nDESCRIPTION: This snippet adds directories as system include directories to suppress compiler warnings for the FakeIt framework files. It ensures smoother compilation without unwanted warnings.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/IResearch/CMakeLists.txt#2025-04-22_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(arangodbtests-iresearch SYSTEM PRIVATE\\\n  ${CMAKE_SOURCE_DIR}/3rdParty/fakeit-gtest\\\n)\n```\n\n----------------------------------------\n\nTITLE: Approximate Expansion of Boost.Parameter Function Call Operator Macro\nDESCRIPTION: Shows the approximate expansion of the Boost.Parameter function call operator macro, including template parameter handling, result type determination, and function overloading for different arities.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_62\n\nLANGUAGE: cpp\nCODE:\n```\n// If **result** is a template instantiation of |boost_enable_if|_\\,\n// |boost_enable_if_c|_\\, |boost_lazy_enable_if|_\\,\n// |boost_lazy_enable_if_c|_\\, |boost_disable_if|_\\, |boost_disable_if_c|_\\,\n// |boost_lazy_disable_if|_\\, |boost_lazy_disable_if_c|_\\, or\n// |std_enable_if|_\\:\ntemplate <typename Args>\nusing boost_param_result\\_ ## __LINE__ ## operator = **result**;\n\n// If **result** is a simple return type:\ntemplate <typename Args>\nstruct boost_param_result\\_ ## __LINE__ ## operator\n{\n    typedef **result** type;\n};\n\nstruct boost_param_params\\_ ## __LINE__ ## operator\n  : |parameters|_\\<\n        *list of parameter specifications, based on arguments*\n    >\n{\n};\n\ntypedef boost_param_params\\_ ## __LINE__ ## operator\n    boost_param_parameters\\_ ## __LINE__ ## operator;\n\ntemplate <typename A0, …, typename A ## **n**>\n**result** operator()(\n    A0&& a0, …, A ## **n**\\ && a ## **n**\n  , typename boost_param_parameters\\_ ## __LINE__ ## operator::match<\n        A0, …, A ## **n**\n    >::type = boost_param_parameters\\_ ## __LINE__ ## operator()\n)\n{\n    return this->boost_param_impl ## __LINE__ ## operator(\n        boost_param_parameters\\_ ## __LINE__ ## operator()(\n            |std_forward|_\\<A0>(a0)\n          , …\n          , |std_forward|_\\<A ## **n**>(a ## **n**)\n        )\n    );\n}\n\n:vellipsis:`⋮`\n\ntemplate <typename A0, …, typename A ## **m**>\n**result** operator()(\n    A0&& a0, …, A ## **m**\\ && a ## **m**\n  , typename boost_param_parameters\\_ ## __LINE__ ## operator::match<\n        A0, …, A ## **m**\n    >::type = boost_param_parameters\\_ ## __LINE__ ## operator()\n)\n{\n    return this->boost_param_impl ## __LINE__ ## operator(\n        boost_param_parameters\\_ ## __LINE__ ## operator()(\n            |std_forward|_\\<A0>(a0)\n          , …\n          , |std_forward|_\\<A ## **m**>(a ## **m**)\n        )\n    );\n}\n\ntemplate <typename Args>\ntypename boost_param_result\\_ ## __LINE__ ## operator<Args>::type\n    boost_param_impl ## __LINE__ ## operator(Args const& args)\n```\n\n----------------------------------------\n\nTITLE: Upgrading from Boost v. 1.35.* - New Container Types\nDESCRIPTION: Lists the new pointer container types introduced in Boost v. 1.35.*, including unordered and circular buffer containers\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/ptr_container.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\n// New container types\n- boost::ptr_unordered_set<T>\n- boost::ptr_unordered_map<Key,T>\n- boost::ptr_circular_buffer<T>\n```\n\n----------------------------------------\n\nTITLE: Generating Parameter Function in C++ using Macros\nDESCRIPTION: This macro generates a function capable of accepting various types of arguments, including positional, composed, named, and deduced arguments with flexibility in return types.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_16\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <std::size_t N>\n|std_bitset|_<N + 1> rvalue_bitset()\n{\n    return |std_bitset|_<N + 1>();\n}\n\ntemplate <std::size_t N>\n|std_bitset|_<N + 1> const rvalue_const_bitset()\n{\n    return |std_bitset|_<N + 1>();\n}\n\ntemplate <std::size_t N>\n|std_bitset|_<N + 1>& lvalue_bitset()\n{\n    static |std_bitset|_<N + 1> lset = |std_bitset|_<N + 1>();\n    return lset;\n}\n\ntemplate <std::size_t N>\n|std_bitset|_<N + 1> const& lvalue_const_bitset()\n{\n    static |std_bitset|_<N + 1> const clset = |std_bitset|_<N + 1>();\n    return clset;\n}\n```\n\n----------------------------------------\n\nTITLE: Using char_ Template Class in C++\nDESCRIPTION: Demonstrates the usage of char_ template class, including type checks, value comparisons, and next/prior operations.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/char_.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntypedef char_<'c'> c;\n\nBOOST_MPL_ASSERT(( is_same< c::value_type, char > ));\nBOOST_MPL_ASSERT(( is_same< c::type, c > ));\nBOOST_MPL_ASSERT(( is_same< next< c >::type, char_<'d'> > ));\nBOOST_MPL_ASSERT(( is_same< prior< c >::type, char_<'b'> > ));\nBOOST_MPL_ASSERT_RELATION( (c::value), ==, 'c' );\nassert( c() == 'c' );\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation Structure in RST\nDESCRIPTION: Sets up the documentation table of contents tree using Sphinx directives. Includes copyright header and links to partialfunctions and FAQ sections.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/src/discussion.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. Copyright 2018 Paul Fultz II\n   Distributed under the Boost Software License, Version 1.0.\n   (http://www.boost.org/LICENSE_1_0.txt)\n\nDiscussion\n==========\n\n.. toctree::\n    :maxdepth: 2\n\n    partialfunctions\n    faq\n```\n\n----------------------------------------\n\nTITLE: Initializing libunwind Project and Version in CMake\nDESCRIPTION: Sets up the project name, minimum CMake version, C standard, and package version information for libunwind.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/libunwind/v1.7.2/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nproject(libunwind)\n\ncmake_minimum_required(VERSION 3.16.1)\n\nset(CMAKE_C_STANDARD 11)\n\nset(PKG_MAJOR \"1\")\nset(PKG_MINOR \"6\")\nset(PKG_EXTRA \"-rc1\")\nset(PACKAGE_STRING \"libunwind\")\nset(PACKAGE_BUGREPORT \"\")\n```\n\n----------------------------------------\n\nTITLE: Expression Semantics for times Metafunction with Struct Inheritance in C++\nDESCRIPTION: Shows how the times metafunction can be used with struct inheritance to compute the product of multiple Integral Constants.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/times.rst#2025-04-22_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\ntypedef times<c1,\\ |...|\\ c\\ *n*\\> r;\n```\n\n----------------------------------------\n\nTITLE: Defining BOOST_MPL_LIMIT_METAFUNCTION_ARITY Macro in C++\nDESCRIPTION: The default definition of BOOST_MPL_LIMIT_METAFUNCTION_ARITY macro if not already defined by the user. By default, it's set to a value of 5 in the library implementation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/LIMIT_METAFUNCTION_ARITY.rst#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n#if !defined(BOOST_MPL_LIMIT_METAFUNCTION_ARITY)\n#   define BOOST_MPL_LIMIT_METAFUNCTION_ARITY \\\n            |idic| \\\n/*/\n#endif\n```\n\n----------------------------------------\n\nTITLE: Converting Copy Constructor Hook Definition in C++\nDESCRIPTION: Static method signature for a constructor hook that is called during converting copy construction of basic_result objects. This hook is available from Outcome v2.2.0 onwards and guarantees no exception throwing.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/policies/base/on_result_copy_construction.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nstatic void on_result_copy_construction(T *, U &&) noexcept\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Warnings Flags\nDESCRIPTION: This snippet likely contains a function call to add compiler warning flags, ensuring that the compilation process catches potential issues in the code.  The exact flags being added would be determined by the implementation of `add_compile_warnings_flags()`. It is likely a custom function.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_compile_warnings_flags()\n```\n\n----------------------------------------\n\nTITLE: Cloning Boost Project with Config Library Submodule\nDESCRIPTION: Commands to clone the entire Boost project, which includes individual Boost projects as submodules, including the Config Library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/config/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/boostorg/boost\ncd boost\ngit submodule update --init\n```\n\n----------------------------------------\n\nTITLE: Hugo Front Matter Configuration for ArangoDB Concepts Page\nDESCRIPTION: Defines front matter in TOML format for a Hugo documentation page about ArangoDB concepts. Sets the title to 'Concepts' and assigns a weight of 20 to determine the page's position in the navigation hierarchy.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/concepts/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n+++\ntitle = \"Concepts\"\nweight = 20\n+++\n```\n\n----------------------------------------\n\nTITLE: Declaring is_basic_outcome_v Variable Template in C++\nDESCRIPTION: Declares a variable template alias for the is_basic_outcome type trait, providing a more convenient way to use the trait in template metaprogramming contexts.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/traits/is_basic_outcome.md#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nis_basic_outcome_v<T>\n```\n\n----------------------------------------\n\nTITLE: Defining iterator_range Template in C++\nDESCRIPTION: Defines the iterator_range template structure that takes two template parameters, First and Last, representing iterators. The structure provides a view into a subset of sequence elements identified by these iterators.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/iterator_range.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      typename First\n    , typename Last\n    >\nstruct iterator_range\n{\n    // |unspecified|\n    // |...|\n};\n```\n\n----------------------------------------\n\nTITLE: Including push_front Header in C++\nDESCRIPTION: Specifies the header file that needs to be included to use the push_front metafunction in a C++ program.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/push_front.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/push_front.hpp>\n```\n\n----------------------------------------\n\nTITLE: Project Configuration Settings in Doxygen\nDESCRIPTION: Basic project configuration settings including file encoding, project name, and output directory configuration for the Boost.Sort documentation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/sort/doc/doxygen/sort_doxyfile.txt#2025-04-22_snippet_0\n\nLANGUAGE: INI\nCODE:\n```\nDOXYFILE_ENCODING      = UTF-8\nPROJECT_NAME           = Boost.Sort\nPROJECT_NUMBER         = \nPROJECT_BRIEF          = \nPROJECT_LOGO           = \nOUTPUT_DIRECTORY       = I:/modular-boost/libs/sort/doc/doxygen\n```\n\n----------------------------------------\n\nTITLE: Declaring Static Eval Function Variable with First-of Adaptor in C++\nDESCRIPTION: Declares a static variable 'eval' that combines both evaluation strategies using the 'first_of_adaptor'. The adaptor tries the first strategy, and if that fails, it falls back to the second strategy.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/eval.hpp.txt#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_HOF_DECLARE_STATIC_VAR(eval, boost::hof::first_of_adaptor<detail::simple_eval, detail::id_eval>);\n```\n\n----------------------------------------\n\nTITLE: Using Exceptions for Success Dependency in C++\nDESCRIPTION: This snippet demonstrates how exceptions enable a clean expression of success dependency between function calls. If f() fails, g() and h() won't be executed, showing the sequential dependency pattern without explicit error checking.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/motivation/exceptions.md#2025-04-22_snippet_0\n\nLANGUAGE: c++\nCODE:\n```\nint a()\n{\n  f();\n  g();        // don't call g() and further if f() fails\n  return h(); // don't call h() if g() fails\n}\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Version Requirement\nDESCRIPTION: Specifies the minimum required CMake version for the project, ensuring compatibility with CMake versions from 3.5 up to (but not including) 3.16.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/qvm/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.16)\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Tagbanwa Script Character Ranges\nDESCRIPTION: Lists Unicode character ranges for the Tagbanwa script, including letters and vowel signs. The Tagbanwa script is used by the Tagbanwa people in Palawan, Philippines.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/spirit/workbench/unicode/Scripts.txt#2025-04-22_snippet_29\n\nLANGUAGE: unicode\nCODE:\n```\n1760..176C    ; Tagbanwa # Lo  [13] TAGBANWA LETTER A..TAGBANWA LETTER YA\n176E..1770    ; Tagbanwa # Lo   [3] TAGBANWA LETTER LA..TAGBANWA LETTER SA\n1772..1773    ; Tagbanwa # Mn   [2] TAGBANWA VOWEL SIGN I..TAGBANWA VOWEL SIGN U\n\n# Total code points: 18\n```\n\n----------------------------------------\n\nTITLE: Numeric Matrix Data\nDESCRIPTION: A 3x4 matrix representation using space-separated numeric values. Each row contains 4 integers, with values ranging from 0 to 4.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/polygon/example/input_data/primary/primary_022.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n0\n3\n0 0 4 0\n4 0 0 4\n0 4 4 4\n```\n\n----------------------------------------\n\nTITLE: Defining decorate_adaptor template class in C++\nDESCRIPTION: Implementation of the decorate_adaptor template class which serves as the main entry point for the decorate functionality. It inherits from callable_base and provides an operator() that creates a decoration object with the provided data.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/decorate.hpp.txt#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<class F>\nstruct decorate_adaptor : detail::callable_base<F>\n{\n    typedef decorate_adaptor fit_rewritable1_tag;\n    typedef detail::callable_base<F> base;\n    BOOST_HOF_INHERIT_CONSTRUCTOR(decorate_adaptor, detail::callable_base<F>)\n\n    template<class... Ts>\n    constexpr const base& base_function(Ts&&... xs) const noexcept\n    {\n        return boost::hof::always_ref(*this)(xs...);\n    }\n\n    // TODO: Add predicate for constraints\n\n    template<class T>\n    constexpr detail::decoration<base, T> operator()(T x) const \n    BOOST_HOF_NOEXCEPT(BOOST_HOF_IS_NOTHROW_CONSTRUCTIBLE(base, const base&) && BOOST_HOF_IS_NOTHROW_CONSTRUCTIBLE(T, T&&))\n    {\n        return detail::decoration<base, T>(this->base_function(x), static_cast<T&&>(x));\n    }\n\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Up Snappy Test Support Library in CMake\nDESCRIPTION: Configures a support library for Snappy tests and benchmarks. It includes necessary source files, compiler definitions, and links against required libraries like zlib, lzo2, and lz4 if available.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/snappy/snappy-1.1.9/CMakeLists.txt#2025-04-22_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\nif(SNAPPY_BUILD_TESTS OR SNAPPY_BUILD_BENCHMARKS)\n  add_library(snappy_test_support \"\")\n  target_sources(snappy_test_support\n    PRIVATE\n      \"snappy-test.cc\"\n      \"snappy-test.h\"\n      \"snappy_test_data.cc\"\n      \"snappy_test_data.h\"\n      \"${PROJECT_BINARY_DIR}/config.h\"\n  )\n\n  # Test files include snappy-test.h, HAVE_CONFIG_H must be defined.\n  target_compile_definitions(snappy_test_support PUBLIC -DHAVE_CONFIG_H)\n\n  target_link_libraries(snappy_test_support snappy)\n\n  if(HAVE_LIBZ)\n    target_link_libraries(snappy_test_support z)\n  endif(HAVE_LIBZ)\n  if(HAVE_LIBLZO2)\n    target_link_libraries(snappy_test_support lzo2)\n  endif(HAVE_LIBLZO2)\n  if(HAVE_LIBLZ4)\n    target_link_libraries(snappy_test_support lz4)\n  endif(HAVE_LIBLZ4)\n\n  target_include_directories(snappy_test_support\n    BEFORE PUBLIC\n      \"${PROJECT_SOURCE_DIR}\"\n  )\nendif(SNAPPY_BUILD_TESTS OR SNAPPY_BUILD_BENCHMARKS)\n```\n\n----------------------------------------\n\nTITLE: Installing Boost.HigherOrderFunctions in Bash\nDESCRIPTION: Command to install the Boost.HigherOrderFunctions library using CMake's install target.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/doc/src/building.md.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncmake --build . --target install\n```\n\n----------------------------------------\n\nTITLE: Disabling Google Logging and Flags in CMake for ArangoDB\nDESCRIPTION: Turns off the use of Google logging module and Google commandline flags processing. These settings are forced and cached.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/s2geometry/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(WITH_GLOG OFF CACHE BOOL \"With Google logging module\" FORCE)\nset(WITH_GFLAGS OFF CACHE BOOL \"With Google commandline flags processing\" FORCE)\n```\n\n----------------------------------------\n\nTITLE: Defining Khmer Unicode Block\nDESCRIPTION: Lists the code point ranges for the Khmer script in Unicode. This block contains 146 code points including letters, vowel signs, digits, and special symbols.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/spirit/workbench/unicode/Scripts.txt#2025-04-22_snippet_15\n\nLANGUAGE: unicode\nCODE:\n```\n1780..17B3    ; Khmer # Lo  [52] KHMER LETTER KA..KHMER INDEPENDENT VOWEL QAU\n17B4..17B5    ; Khmer # Cf   [2] KHMER VOWEL INHERENT AQ..KHMER VOWEL INHERENT AA\n17B6          ; Khmer # Mc       KHMER VOWEL SIGN AA\n17B7..17BD    ; Khmer # Mn   [7] KHMER VOWEL SIGN I..KHMER VOWEL SIGN UA\n17BE..17C5    ; Khmer # Mc   [8] KHMER VOWEL SIGN OE..KHMER VOWEL SIGN AU\n17C6          ; Khmer # Mn       KHMER SIGN NIKAHIT\n17C7..17C8    ; Khmer # Mc   [2] KHMER SIGN REAHMUK..KHMER SIGN YUUKALEAPINTU\n17C9..17D3    ; Khmer # Mn  [11] KHMER SIGN MUUSIKATOAN..KHMER SIGN BATHAMASAT\n17D4..17D6    ; Khmer # Po   [3] KHMER SIGN KHAN..KHMER SIGN CAMNUC PII KUUH\n17D7          ; Khmer # Lm       KHMER SIGN LEK TOO\n17D8..17DA    ; Khmer # Po   [3] KHMER SIGN BEYYAL..KHMER SIGN KOOMUUT\n17DB          ; Khmer # Sc       KHMER CURRENCY SYMBOL RIEL\n17DC          ; Khmer # Lo       KHMER SIGN AVAKRAHASANYA\n17DD          ; Khmer # Mn       KHMER SIGN ATTHACAN\n17E0..17E9    ; Khmer # Nd  [10] KHMER DIGIT ZERO..KHMER DIGIT NINE\n17F0..17F9    ; Khmer # No  [10] KHMER SYMBOL LEK ATTAK SON..KHMER SYMBOL LEK ATTAK PRAM-BUON\n19E0..19FF    ; Khmer # So  [32] KHMER SYMBOL PATHAMASAT..KHMER SYMBOL DAP-PRAM ROC\n```\n\n----------------------------------------\n\nTITLE: Running Boost.Locale Unit Tests\nDESCRIPTION: Command to run the unit tests for Boost.Locale library using bjam.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/doc/building_boost_locale.txt#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n./bjam libs/locale/test\n```\n\n----------------------------------------\n\nTITLE: Implementing Partial Sum Function in C++\nDESCRIPTION: This snippet demonstrates how to create a partial sum function using the 'partial' adaptor. It allows for both full evaluation and partial application of the sum function.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/src/partialfunctions.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nauto sum = partial([](int x, int y)\n{\n    return x+y;\n});\n```\n\n----------------------------------------\n\nTITLE: Using is_sequence Metafunction in C++\nDESCRIPTION: Demonstrates the usage of is_sequence metafunction to determine if various types are sequences. It uses BOOST_MPL_ASSERT and BOOST_MPL_ASSERT_NOT macros for compile-time assertions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/is_sequence.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nstruct UDT {};\n\nBOOST_MPL_ASSERT_NOT(( is_sequence< std::vector<int> > ));\nBOOST_MPL_ASSERT_NOT(( is_sequence< int > ));\nBOOST_MPL_ASSERT_NOT(( is_sequence< int& > ));\nBOOST_MPL_ASSERT_NOT(( is_sequence< UDT > ));\nBOOST_MPL_ASSERT_NOT(( is_sequence< UDT* > ));\nBOOST_MPL_ASSERT(( is_sequence< range_c<int,0,0> > ));\nBOOST_MPL_ASSERT(( is_sequence< list<> > ));\nBOOST_MPL_ASSERT(( is_sequence< list<int> > ));\nBOOST_MPL_ASSERT(( is_sequence< vector<> > ));\nBOOST_MPL_ASSERT(( is_sequence< vector<int> > ));\n```\n\n----------------------------------------\n\nTITLE: Building and Using Argument Packs in Boost.Parameter\nDESCRIPTION: This snippet shows how to build and manipulate ArgumentPacks, which are key to the Boost.Parameter library. It demonstrates creating ArgumentPacks through keyword assignment and composition with the comma operator.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/index.rst#2025-04-22_snippet_36\n\nLANGUAGE: cpp\nCODE:\n```\nBOOST_PARAMETER_NAME(index)\n\ntemplate <typename ArgumentPack>\nint print_index(ArgumentPack const& args)\n{\n    std::cout << \"index = \" << args[_index];\n    std::cout << std::endl;\n    return 0;\n}\n\nint x = print_index(_index = 3);  // prints \"index = 3\"\n```\n\n----------------------------------------\n\nTITLE: Build Variant Configuration\nDESCRIPTION: Configuration for different build variants including coverage, UBSan, debug, and release builds with specific compiler and linker flags.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/static_string/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif (\"${VARIANT}\" STREQUAL \"coverage\")\n    if (MSVC)\n    else()\n        set (CMAKE_BUILD_TYPE DEBUG)\n        set (CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -msse4.2 --coverage\")\n        set (CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} --coverage\")\n    endif()\n\nelseif (\"${VARIANT}\" STREQUAL \"ubasan\")\n    if (MSVC)\n    else()\n        set (CMAKE_BUILD_TYPE RELWITHDEBINFO)\n        set (CMAKE_CXX_FLAGS\n          \"${CMAKE_CXX_FLAGS} -msse4.2 -funsigned-char -fno-omit-frame-pointer -fsanitize=address,undefined -fno-sanitize-recover=address,undefined -fsanitize-blacklist=${PROJECT_SOURCE_DIR}/tools/blacklist.supp\")\n        set (CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -fsanitize=address,undefined -fno-sanitize-recover=address,undefined\")\n    endif()\n\nelseif (\"${VARIANT}\" STREQUAL \"debug\")\n    set (CMAKE_BUILD_TYPE DEBUG)\n\nelseif (\"${VARIANT}\" STREQUAL \"release\")\n    set (CMAKE_BUILD_TYPE RELEASE)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Including Boost MPL plus Header Files in C++\nDESCRIPTION: Header files required to use the 'plus' metafunction in a C++ program. These headers are part of the Boost MPL library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/plus.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/plus.hpp>\n#include <boost/mpl/arithmetic.hpp>\n```\n\n----------------------------------------\n\nTITLE: UnaryFunctor Constructor Example\nDESCRIPTION: The snippet illustrates defining a constructor for a C++ struct specialized as a functor for `unary_ufunc`. The `example_unary_ufunc` struct uses `typedef` to define `argument_type` and `result_type`. The user needs to ensure the existence of proper typedefs for valid C++ types.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/doc/html/numpy/_sources/reference/unary_ufunc.rst.txt#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nstruct example_unary_ufunc\n{\n  typedef any_valid_type argument_type;\n  typedef any_valid_type result_type;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining empty_base struct in C++\nDESCRIPTION: Defines the empty_base struct, which is an empty base class used for inheritance in metaprogramming. It is typically used with the inherit metafunction where inheriting from empty_base is a no-op.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/empty_base.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nstruct empty_base {};\n```\n\n----------------------------------------\n\nTITLE: BOOST_MPL_ASSERT Macro Definition\nDESCRIPTION: Basic macro definition showing the structure of BOOST_MPL_ASSERT. Used to generate compilation errors when predicates are false.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/ASSERT.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n#define BOOST_MPL_ASSERT( pred ) \\\n    |unspecified-token-seq| \\\n/**/\n```\n\n----------------------------------------\n\nTITLE: Defining Boost Graph Parallel Project\nDESCRIPTION: Defines the project name, version, and specifies that C++ is used. The version is obtained from the BOOST_SUPERPROJECT_VERSION variable, and the LANGUAGES option specifies that this project uses C++.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nproject(boost_graph_parallel VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Declaring Static Match Variable in C++\nDESCRIPTION: Creates a static variable named 'match' that allows for convenient function syntax when using the match adaptor. It uses the detail::make template to construct match_adaptor instances.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/match.hpp.txt#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_HOF_DECLARE_STATIC_VAR(match, detail::make<match_adaptor>);\n```\n\n----------------------------------------\n\nTITLE: Adding Git Remote for Forked Repository - Shell\nDESCRIPTION: Adds a remote reference to a forked Boost.GIL repository on GitHub, allowing the user to push their changes to their personal copy of the repository.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/CONTRIBUTING.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncd libs/gil\n    git remote add <username> https://github.com/<username>/gil.git\n```\n\n----------------------------------------\n\nTITLE: Configuring ICU Library Definitions\nDESCRIPTION: Sets library suffix and include path for ICU (International Components for Unicode), ensuring correct library and namespace configuration\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_definitions(\"-DU_HAVE_LIB_SUFFIX=1\")\nadd_definitions(\"-DU_LIB_SUFFIX_C_NAME=_64\")\ninclude_directories(BEFORE SYSTEM ${ICU64_INCLUDE_DIR})\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies\nDESCRIPTION: Commands to install additional dependencies required for Python support in S2 Geometry Library on Ubuntu.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/s2geometry/master/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install swig python3-dev\n```\n\n----------------------------------------\n\nTITLE: Unicode Ranges for Cham Script\nDESCRIPTION: Defines Unicode code point ranges for Cham script characters including letters, vowel signs, consonant signs, digits and punctuation marks.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/spirit/workbench/unicode/Scripts.txt#2025-04-22_snippet_44\n\nLANGUAGE: unicode\nCODE:\n```\nAA00..AA28    ; Cham # Lo  [41] CHAM LETTER A..CHAM LETTER HA\nAA29..AA2E    ; Cham # Mn   [6] CHAM VOWEL SIGN AA..CHAM VOWEL SIGN OE\nAA2F..AA30    ; Cham # Mc   [2] CHAM VOWEL SIGN O..CHAM VOWEL SIGN AI\nAA31..AA32    ; Cham # Mn   [2] CHAM VOWEL SIGN AU..CHAM VOWEL SIGN UE\nAA33..AA34    ; Cham # Mc   [2] CHAM CONSONANT SIGN YA..CHAM CONSONANT SIGN RA\nAA35..AA36    ; Cham # Mn   [2] CHAM CONSONANT SIGN LA..CHAM CONSONANT SIGN WA\nAA40..AA42    ; Cham # Lo   [3] CHAM LETTER FINAL K..CHAM LETTER FINAL NG\nAA43          ; Cham # Mn       CHAM CONSONANT SIGN FINAL NG\nAA44..AA4B    ; Cham # Lo   [8] CHAM LETTER FINAL CH..CHAM LETTER FINAL SS\nAA4C          ; Cham # Mn       CHAM CONSONANT SIGN FINAL M\nAA4D          ; Cham # Mc       CHAM CONSONANT SIGN FINAL H\nAA50..AA59    ; Cham # Nd  [10] CHAM DIGIT ZERO..CHAM DIGIT NINE\nAA5C..AA5F    ; Cham # Po   [4] CHAM PUNCTUATION SPIRAL..CHAM PUNCTUATION TRIPLE DANDA\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Incorrect Usage of Boost.Locale with Global Locale\nDESCRIPTION: This snippet shows an example of incorrectly using Boost.Locale by setting the global locale without imbuing it to the stream. This results in unexpected output when trying to format a date.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/doc/faq.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/locale.hpp>\n#include <iostream>\nint main()\n{\n    boost::locale::generator gen;\n    std::locale::global(gen(\"\"));\n    std::cout << boost::locale::as::date << std::time(0) << std::endl;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Build Directory for Linenoise on Windows\nDESCRIPTION: Commands to create and navigate to a build directory for Windows compilation. This is the initial step for building on Windows systems.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/linenoise-ng/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmd build\ncd build\n```\n\n----------------------------------------\n\nTITLE: Graph Data Definition\nDESCRIPTION: This snippet demonstrates how to define vertices and edges in a graph data format. Vertices are identified by 'v' and edges by 'e', followed by relevant data. The example interleaves vertices and edges.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph/example/data3.txt#2025-04-22_snippet_0\n\nLANGUAGE: Data\nCODE:\n```\n\"# Copyright (c) 2002 Trustees of Indiana University\n#\n# Distributed under the Boost Software License, Version 1.0.\n# (See accompanying file LICENSE_1_0.txt or copy at\n# http://www.boost.org/LICENSE_1_0.txt)\n# vertices and edges can be interleaved\nv 3.14 0\nv 3.15 1\ne 0 1 0.1\ne 1 0 1.0\nv 3.16 2\ne 1 2 1.2\"\n```\n\n----------------------------------------\n\nTITLE: Defining BOOST_MPL_ASSERT_MSG Macro in C++\nDESCRIPTION: Defines the BOOST_MPL_ASSERT_MSG macro used for generating compilation errors with custom messages when a condition doesn't hold.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/ASSERT_MSG.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n#define BOOST_MPL_ASSERT_MSG( condition, message, types ) \\\n    |unspecified-token-seq| \\\n/**/\n```\n\n----------------------------------------\n\nTITLE: Custom Exception Class Definition\nDESCRIPTION: Simple C++ exception class definition inheriting from std::exception\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/leaf/doc/whitepaper.md#2025-04-22_snippet_11\n\nLANGUAGE: c++\nCODE:\n```\nstruct my_error: std::exception {};\n```\n\n----------------------------------------\n\nTITLE: Configuring Standalone Boost Safe Numerics Project in CMake\nDESCRIPTION: This snippet sets up the CMake configuration for building Boost Safe Numerics as a standalone project. It includes compiler settings, dependency management, and test setup.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/safe_numerics/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.8.6)\n\nproject(\"SafeIntegers\")\nenable_language(CXX)\n\nadd_library(boost_safe_numerics INTERFACE)\nadd_library(Boost::safe_numerics ALIAS boost_safe_numerics)\n\ntarget_include_directories(boost_safe_numerics INTERFACE \"${Boost_INCLUDE_DIRS}\")\ntarget_compile_features(boost_safe_numerics INTERFACE cxx_std_14)\n\nset(CMAKE_CXX_STANDARD 14)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\nset(CMAKE_CXX_EXTENSIONS OFF)\n\n# Compiler-specific settings\nif( CMAKE_CXX_COMPILER_ID STREQUAL \"GNU\" )\n  add_compile_options(-Wnon-virtual-dtor -ansi -Wcast-align -Wchar-subscripts -Wall -Wextra -W -Wshadow -Wsign-compare )\n  add_compile_options( -ftemplate-depth=255 )\nelseif( CMAKE_CXX_COMPILER_ID STREQUAL \"MSVC\" )\n  add_compile_options(/W4 /WX /wd4996 /wd4068)\nelseif( CMAKE_CXX_COMPILER_ID STREQUAL \"AppleClang\" )\n  add_compile_options(-Wnon-virtual-dtor -ansi -Wcast-align -Wchar-subscripts -Wall -Wextra -W -Wshadow -Wsign-compare )\n  add_compile_options( -ftemplate-depth=255 )\n  add_compile_options( -fbracket-depth=2048 )\nelseif( CMAKE_CXX_COMPILER_ID STREQUAL \"Clang\" )\n  add_compile_options(-Wnon-virtual-dtor -ansi -Wcast-align -Wchar-subscripts -Wall -Wextra -W -Wshadow -Wsign-compare )\n  add_compile_options( -ftemplate-depth=255 )\n  add_compile_options( -fbracket-depth=2048 )\nendif()\n\nfind_package(Boost )\n\n# Test setup\nenable_testing()\n\nadd_subdirectory(\"include/boost/safe_numerics\")\nadd_subdirectory(\"example\")\nadd_subdirectory(\"test\")\n```\n\n----------------------------------------\n\nTITLE: Unicode Script Property Configuration Header\nDESCRIPTION: Header metadata for the Unicode Character Database Scripts file, including version, date, and copyright information. Specifies redistribution terms and default script property values.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/spirit/workbench/unicode/Scripts.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n# Scripts-5.2.0.txt\n# Date: 2009-08-22, 04:58:43 GMT [MD]\n#\n# Unicode Character Database\n# Copyright (c) 1991-2009 Unicode, Inc.\n# For terms of use, see http://www.unicode.org/terms_of_use.html\n# For documentation, see http://www.unicode.org/reports/tr44/\n\n# It is ok to redistribute this file \"solely for informational \n# purposes in the creation of products supporting the Unicode Standard\".\n# We don't nee to add a Boost License to this file: boostinspect:nolicense.\n\n# ================================================\n\n# Property:\tScript\n\n#  All code points not explicitly listed for Script\n#  have the value Unknown (Zzzz).\n\n# @missing: 0000..10FFFF; Unknown\n```\n\n----------------------------------------\n\nTITLE: Configuring Group Name Sorting in Doxygen\nDESCRIPTION: This option specifies whether doxygen sorts the hierarchy of group names into alphabetical order. Setting it to YES will sort them alphabetically.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/sort/doc/doxygen/sort_doxyfile.txt#2025-04-22_snippet_46\n\nLANGUAGE: Doxygen\nCODE:\n```\n\"SORT_GROUP_NAMES       = NO\"\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Structure\nDESCRIPTION: ReStructuredText documentation listing the decorator components of Boost HOF library with copyright and license information.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/src/decorators.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. Copyright 2018 Paul Fultz II\n   Distributed under the Boost Software License, Version 1.0.\n   (http://www.boost.org/LICENSE_1_0.txt)\n\nDecorators\n==========\n\n.. toctree::\n    :maxdepth: 1\n\n    ../../include/boost/hof/capture\n    ../../include/boost/hof/if\n    ../../include/boost/hof/limit\n    ../../include/boost/hof/repeat\n    ../../include/boost/hof/repeat_while\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Boost Ratio in CMake\nDESCRIPTION: This snippet specifies the include directories for the Boost Ratio library target. It uses target_include_directories to set the INTERFACE include directory to 'include', making the library's headers accessible to dependent projects.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ratio/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n\"target_include_directories(boost_ratio INTERFACE include)\"\n```\n\n----------------------------------------\n\nTITLE: Including copy_if Header in C++\nDESCRIPTION: Specifies the header file to include for using the copy_if algorithm in C++ code.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/copy_if.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/copy_if.h>\n```\n\n----------------------------------------\n\nTITLE: Displaying Configuration Macros Table in RST Format\nDESCRIPTION: A restructured text (RST) table that documents the configuration macros available in the Boost.HigherOrderFunctions library. The table outlines three key configuration options: BOOST_HOF_CHECK_UNPACK_SEQUENCE for error reporting, BOOST_HOF_NO_EXPRESSION_SFINAE for SFINAE detection, and BOOST_HOF_RECURSIVE_CONSTEXPR_DEPTH for controlling recursion depth in constexpr functions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/doc/src/configurations.md.txt#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n+-----------------------------------------+--------------------------------------------------------------------------------+\n| Name                                    | Description                                                                    |\n+=========================================+================================================================================+\n| ``BOOST_HOF_CHECK_UNPACK_SEQUENCE``     | Unpack has extra checks to ensure that the function will be invoked with the   |\n|                                         | sequence. This extra check can help improve error reporting but it can slow    |\n|                                         | down compilation. This is enabled by default.                                  |\n+-----------------------------------------+--------------------------------------------------------------------------------+\n| ``BOOST_HOF_NO_EXPRESSION_SFINAE``      | This controls whether the library will use expression SFINAE to detect the     |\n|                                         | callability of functions. On MSVC, this is enabled by default, since it does   |\n|                                         | not have full support for expression SFINAE.                                   |\n+-----------------------------------------+--------------------------------------------------------------------------------+\n| ``BOOST_HOF_RECURSIVE_CONSTEXPR_DEPTH`` | Because C++ instantiates `constexpr` functions eagerly, recursion with         |\n|                                         | `constexpr` functions can cause the compiler to reach its internal limits. The |\n|                                         | setting is used by the library to set a limit on recursion depth to avoid      |\n|                                         | infinite template instantiations. The default is 16, but increasing the limit  |\n|                                         | can increase compile times.                                                    |\n+-----------------------------------------+--------------------------------------------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Defining sizeof_ Metafunction Template in C++\nDESCRIPTION: Template structure definition for the sizeof_ metafunction that provides a typedef for an unspecified type. This metafunction wraps sizeof(X) expressions into Integral Constants.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/sizeof_.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      typename X\n    >\nstruct sizeof_\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Including Child Pages in Hugo Documentation\nDESCRIPTION: This Hugo shortcode includes child pages in the documentation, displaying their descriptions up to a depth of 2 levels.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/functions/_index.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{{% children description=\"true\" depth=\"2\" %}}\n```\n\n----------------------------------------\n\nTITLE: Unicode Mathematical Character Ranges and Code Points\nDESCRIPTION: Defines Unicode code points for mathematical symbols and characters including various types like Other_Math category. Each line specifies either a single code point or a range of code points along with their category and description.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/spirit/workbench/unicode/PropList.txt#2025-04-22_snippet_6\n\nLANGUAGE: unicode\nCODE:\n```\n005E          ; Other_Math # Sk       CIRCUMFLEX ACCENT\n03D0..03D2    ; Other_Math # L&   [3] GREEK BETA SYMBOL..GREEK UPSILON WITH HOOK SYMBOL\n03D5          ; Other_Math # L&       GREEK PHI SYMBOL\n03F0..03F1    ; Other_Math # L&   [2] GREEK KAPPA SYMBOL..GREEK RHO SYMBOL\n03F4..03F5    ; Other_Math # L&   [2] GREEK CAPITAL THETA SYMBOL..GREEK LUNATE EPSILON SYMBOL\n```\n\n----------------------------------------\n\nTITLE: Configuring File Extension Mapping in Doxygen\nDESCRIPTION: Setting for assigning specific parsers to file extensions, overriding Doxygen's default extension-to-language mapping. The default is empty.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/sort/doc/doxygen/sort_doxyfile.txt#2025-04-22_snippet_11\n\nLANGUAGE: text\nCODE:\n```\nEXTENSION_MAPPING      = \n```\n\n----------------------------------------\n\nTITLE: Adding Test\nDESCRIPTION: Adds a test named `inspection` that executes the `arangodbtests_inspection` executable. This integrates the test into the CTest framework, allowing for automated testing and reporting.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/Inspection/CMakeLists.txt#2025-04-22_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nadd_test(NAME inspection\n         COMMAND arangodbtests_inspection)\n```\n\n----------------------------------------\n\nTITLE: Specifying Dependencies for Boost Serialization Library\nDESCRIPTION: Configures the dependencies for the boost_serialization library, linking it with various other Boost libraries it requires. This ensures all necessary Boost components are available during compilation and linking.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/serialization/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(boost_serialization\n  PUBLIC\n    Boost::array\n    Boost::assert\n    Boost::config\n    Boost::core\n    Boost::detail\n    Boost::integer\n    Boost::io\n    Boost::iterator\n    Boost::move\n    Boost::mpl\n    Boost::optional\n    Boost::predef\n    Boost::preprocessor\n    Boost::smart_ptr\n    Boost::spirit\n    Boost::static_assert\n    Boost::type_traits\n    Boost::unordered\n    Boost::utility\n    Boost::variant\n  PRIVATE\n    Boost::function\n)\n\ntarget_link_libraries(boost_wserialization PUBLIC boost_serialization)\n```\n\n----------------------------------------\n\nTITLE: Configuring Symbol Lookup Cache Size in Doxygen\nDESCRIPTION: Setting to specify the symbol lookup cache size. Affects resolution speed of symbols by name and scope. Valid range is 0-9, with 0 corresponding to a cache size of 65536 symbols. Default is 0.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/sort/doc/doxygen/sort_doxyfile.txt#2025-04-22_snippet_23\n\nLANGUAGE: text\nCODE:\n```\nLOOKUP_CACHE_SIZE      = 0\n```\n\n----------------------------------------\n\nTITLE: Including range_c Header in C++\nDESCRIPTION: Shows how to include the necessary header file for using the range_c template class in a C++ program.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/range_c.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/range_c.hpp>\n```\n\n----------------------------------------\n\nTITLE: Initializing Boost.Mp11 Library Project in CMake\nDESCRIPTION: Sets up the basic project configuration for Boost.Mp11, including version, language, and creating the interface library target.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mp11/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.16)\n\nproject(boost_mp11 VERSION 1.78.0 LANGUAGES CXX)\n\nadd_library(boost_mp11 INTERFACE)\nadd_library(Boost::mp11 ALIAS boost_mp11)\n\ntarget_include_directories(boost_mp11 INTERFACE include)\ntarget_compile_features(boost_mp11 INTERFACE cxx_alias_templates cxx_variadic_templates cxx_decltype)\n```\n\n----------------------------------------\n\nTITLE: Defining Iterator Archetype Access Categories in C++\nDESCRIPTION: Defines typedef aliases for various iterator access categories used in the iterator_archetype class. These categories correspond to different combinations of iterator access concepts.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/iterator_archetypes.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nnamespace iterator_archetypes\n{\n    // Access categories\n\n    typedef /*implementation  defined*/ readable_iterator_t;\n    typedef /*implementation  defined*/ writable_iterator_t;\n    typedef /*implementation  defined*/ readable_writable_iterator_t;\n    typedef /*implementation  defined*/ readable_lvalue_iterator_t;\n    typedef /*implementation  defined*/ writable_lvalue_iterator_t;\n\n}\n```\n\n----------------------------------------\n\nTITLE: Setting MSVC Compiler Options for Boost Beast\nDESCRIPTION: Configures compiler and linker options specifically for Microsoft Visual C++ when building Boost Beast.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/beast/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (MSVC)\n    set (CMAKE_VERBOSE_MAKEFILE FALSE)\n\n    add_definitions (\n        -D_WIN32_WINNT=0x0601\n        -D_SCL_SECURE_NO_WARNINGS=1\n        -D_CRT_SECURE_NO_WARNINGS=1\n        -D_SILENCE_CXX17_ALLOCATOR_VOID_DEPRECATION_WARNING\n        -D_SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING\n    )\n\n    add_compile_options(\n        /bigobj       # large object file format\n        /permissive-  # strict C++\n        #/wd4503      # decorated name length exceeded, name was truncated\n        /W4           # enable all warnings\n        /MP           # Multi-processor compilation\n        )\n\n    set (Boost_USE_STATIC_RUNTIME ON)\n\n    set (CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} /MTd\")\n    set (CMAKE_CXX_FLAGS_RELEASE \"${CMAKE_CXX_FLAGS_RELEASE} /Ob2 /Oi /Ot /GL /MT\")\n    set (CMAKE_CXX_FLAGS_RELWITHDEBINFO \"${CMAKE_CXX_FLAGS_RELWITHDEBINFO} /Oi /Ot /MT\")\n\n    set (CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} /SAFESEH:NO\")\n    set (CMAKE_EXE_LINKER_FLAGS_RELEASE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE} /LTCG\")\n\n    string (REPLACE \"/INCREMENTAL\" \"/INCREMENTAL:NO\" replacement_flags\n        ${CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO})\n    set (CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO ${replacement_flags})\nelse()\n    set (THREADS_PREFER_PTHREAD_FLAG ON)\n    find_package (Threads)\n    link_libraries(Threads::Threads)\n\n    set( CMAKE_CXX_FLAGS\n      \"${CMAKE_CXX_FLAGS} -std=c++11 -Wall -Wextra -Wpedantic -Wno-unused-parameter\")\n\n    if (\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"Clang\")\n        set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wrange-loop-analysis\")\n    endif ()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Restructured Text Link References for MPL Documentation\nDESCRIPTION: ReStructured Text link definitions for documentation of MPL composition and argument binding features. These definitions create named references that can be used throughout the document.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/Metafunctions-Composition.rst#2025-04-22_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. |Composition and Argument Binding| replace:: `Composition and Argument Binding`_\n\n.. |composition| replace:: `composition`_\n.. _`composition`: `Composition and Argument Binding`_\n\n.. |argument binding| replace:: `argument binding`_\n.. _`argument binding`: `Composition and Argument Binding`_\n```\n\n----------------------------------------\n\nTITLE: Shift Left Usage Example\nDESCRIPTION: Example demonstrating the usage of shift_left metafunction with various integral constants and shift values.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/shift_left.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ntypedef integral_c<unsigned,0> u0;\ntypedef integral_c<unsigned,1> u1;\ntypedef integral_c<unsigned,2> u2;\ntypedef integral_c<unsigned,8> u8;\n\nBOOST_MPL_ASSERT_RELATION( (shift_left<u0,u0>::value), ==, 0 );\nBOOST_MPL_ASSERT_RELATION( (shift_left<u1,u0>::value), ==, 1 );\nBOOST_MPL_ASSERT_RELATION( (shift_left<u1,u1>::value), ==, 2 );\nBOOST_MPL_ASSERT_RELATION( (shift_left<u2,u1>::value), ==, 4 );\nBOOST_MPL_ASSERT_RELATION( (shift_left<u8,u1>::value), ==, 16 );\n```\n\n----------------------------------------\n\nTITLE: Implementing Type Traits Detection\nDESCRIPTION: Implementation of a type trait to detect pointer operators using Boost.HigherOrderFunctions first_of.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/src/example_overloading.md#2025-04-22_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate<class T>\nauto has_pointer_member(const T&) -> decltype(\n    &T::operator*,\n    &T::operator->,\n    std::true_type{}\n);\n\nBOOST_HOF_STATIC_LAMBDA_FUNCTION(has_pointer_operators) = first_of(\n    BOOST_HOF_LIFT(has_pointer_member),\n    [](auto* x) -> bool_constant<(!std::is_void<decltype(*x)>())> { return {}; },\n    always(std::false_type{})\n);\n\ntemplate<class T>\nstruct is_dereferenceable\n: decltype(has_pointer_operators(std::declval<T>()))\n{};\n```\n\n----------------------------------------\n\nTITLE: Adding Specific ArangoDB Snippet Executables in CMake\nDESCRIPTION: Applies the 'add_snippets' macro to create executables for 'user_macros_snippets' and 'other_snippets'.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/yap/doc/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_snippets(user_macros_snippets)\nadd_snippets(other_snippets)\n```\n\n----------------------------------------\n\nTITLE: Declaring Static Variable for Protect Function in C++\nDESCRIPTION: Creates a static variable 'protect' using the BOOST_HOF_DECLARE_STATIC_VAR macro. This variable is an instance of the protect_adaptor created using detail::make.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/protect.hpp.txt#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_HOF_DECLARE_STATIC_VAR(protect, detail::make<protect_adaptor>);\n```\n\n----------------------------------------\n\nTITLE: Exception Specification Example in C++\nDESCRIPTION: Example of the now-deprecated exception specification syntax in C++.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/leaf/doc/whitepaper.md#2025-04-22_snippet_5\n\nLANGUAGE: c++\nCODE:\n```\nint compute_value(....) throw(error_info);\n```\n\n----------------------------------------\n\nTITLE: Installing Documentation Dependencies\nDESCRIPTION: Command to install Python dependencies for building documentation using pip.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/src/building.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npip install -r doc/requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Character Type Reference in C++\nDESCRIPTION: Code reference showing the C++ character types and their usage in Boost.Locale, specifically referencing ptime, std::ios_base, and locale-specific formatting.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/doc/rationale.txt#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nptime\n```\n\nLANGUAGE: cpp\nCODE:\n```\nstd::ios_base\n```\n\n----------------------------------------\n\nTITLE: Listing Variation Selector Characters in Unicode\nDESCRIPTION: Lists Unicode code points classified as Variation_Selector. These characters are used to specify variant forms of the preceding character. The list includes Mongolian variation selectors and the standard variation selectors used in emoji and other contexts.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/spirit/workbench/unicode/PropList.txt#2025-04-22_snippet_28\n\nLANGUAGE: Unicode data format\nCODE:\n```\n180B..180D    ; Variation_Selector # Mn   [3] MONGOLIAN FREE VARIATION SELECTOR ONE..MONGOLIAN FREE VARIATION SELECTOR THREE\nFE00..FE0F    ; Variation_Selector # Mn  [16] VARIATION SELECTOR-1..VARIATION SELECTOR-16\nE0100..E01EF  ; Variation_Selector # Mn [240] VARIATION SELECTOR-17..VARIATION SELECTOR-256\n\n# Total code points: 259\n```\n\n----------------------------------------\n\nTITLE: Defining integral_c Template in C++\nDESCRIPTION: Synopsis of the integral_c template, which is a generic wrapper for integral constants. It takes two template parameters: T (an integral type) and N (an integral constant value).\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/integral_c.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      typename T, T N\n    >\nstruct integral_c\n{\n    // |unspecified|\n    // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Subgrouping in Doxygen\nDESCRIPTION: Setting to enable subgrouping of class members of the same type. When enabled, members like public functions can be grouped together under their section. Default is YES.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/sort/doc/doxygen/sort_doxyfile.txt#2025-04-22_snippet_19\n\nLANGUAGE: text\nCODE:\n```\nSUBGROUPING            = YES\n```\n\n----------------------------------------\n\nTITLE: Declaring Eager Dijkstra's Shortest Paths Function in C++\nDESCRIPTION: Function declaration for the eager Dijkstra's shortest paths algorithm. It takes a distributed graph, start vertex, predecessor map, distance map, lookahead value, and various other parameters for customization.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/dijkstra_shortest_paths.rst#2025-04-22_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<typename DistributedGraph, typename DijkstraVisitor,\n             typename PredecessorMap, typename DistanceMap, typename WeightMap,\n             typename IndexMap, typename ColorMap, typename Compare,\n             typename Combine, typename DistInf, typename DistZero>\nvoid\neager_dijkstra_shortest_paths\n  (const DistributedGraph& g,\n   typename graph_traits<DistributedGraph>::vertex_descriptor s,\n   PredecessorMap predecessor, DistanceMap distance, \n   typename property_traits<DistanceMap>::value_type lookahead,\n   WeightMap weight, IndexMap index_map, ColorMap color_map,\n   Compare compare, Combine combine, DistInf inf, DistZero zero,\n   DijkstraVisitor vis);\n```\n\n----------------------------------------\n\nTITLE: Defining shift_right Metafunction Template in C++\nDESCRIPTION: Template metafunction declaration that performs bitwise right shift operation on integral constants. Takes a value T and shift distance as template parameters.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/shift_right.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate< \n    typename T\n    , typename Shift\n    >\nstruct shift_right\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: GYP Arguments Configuration\nDESCRIPTION: This snippet appends various configuration arguments for the GYP build system, setting dependencies and output directory for V8.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/v8-build/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND V8_GYP_ARGS\n  --generator-output=${V8_TARGET_DIR}\n  -DV8_ROOT=${V8_RELATIVE_SOURCE_DIR}\n  -DABSL_INCLUDE_DIR=${CMAKE_SOURCE_DIR}/3rdParty/abseil-cpp\n  -Dicu_path=${V8_RELATIVE_SOURCE_DIR}/third_party/icu/\n  -Dv8_target_arch=${V8_PROC_ARCH}\n  -Dtarget_arch=${V8_PROC_ARCH}\n  -Dv8_host_arch=${V8_PROC_ARCH}\n  -Dhost_arch=${V8_PROC_ARCH}\n  -Dbyteorder=${ENDIANESS}\n  -Dv8_enable_i18n_support=1\n  -DV8_SRC_ROOT=${GYP_FILES_DIR}/\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Table of Contents in reStructuredText for ArangoDB Documentation\nDESCRIPTION: This snippet defines a table of contents for the ArangoDB documentation using reStructuredText. It specifies a maximum depth of 2 and includes links to 'definitions' and 'concepts' pages.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/doc/src/overview.rst.txt#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n    :maxdepth: 2\n\n    definitions\n    concepts\n```\n\n----------------------------------------\n\nTITLE: Configuring C++/CLI Support in Doxygen\nDESCRIPTION: Setting to enable parsing support for Microsoft's C++/CLI language in documentation. Default is NO.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/sort/doc/doxygen/sort_doxyfile.txt#2025-04-22_snippet_15\n\nLANGUAGE: text\nCODE:\n```\nCPP_CLI_SUPPORT        = NO\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Structure for Boost HOF Utilities\nDESCRIPTION: ReStructuredText documentation structure defining the table of contents for Boost HOF utility components documentation. Lists the paths to individual component documentation files.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/src/utilities.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :maxdepth: 1\n    \n    ../../include/boost/hof/apply\n    ../../include/boost/hof/apply_eval\n    ../../include/boost/hof/eval\n    ../../include/boost/hof/function\n    ../../include/boost/hof/lambda\n    ../../include/boost/hof/lift\n    ../../include/boost/hof/pack\n    ../../include/boost/hof/returns\n    ../../include/boost/hof/tap\n```\n\n----------------------------------------\n\nTITLE: Combining LZ4 Source Files - Bash\nDESCRIPTION: Command to amalgamate LZ4 source code into a single file by combining core implementation files.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/lz4/lib/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncat lz4.c lz4hc.c lz4frame.c > lz4_all.c\n```\n\n----------------------------------------\n\nTITLE: Observing Stored Error with assume_error() in C++\nDESCRIPTION: This method provides a narrow contract const lvalue reference observer of the stored error. It invokes NoValuePolicy::narrow_error_check() before returning the reference to the error. A valid default constructed error is always present, ensuring no undefined behavior unless NoValuePolicy::narrow_error_check() introduces it.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/basic_outcome/assume_error_lvalue_const.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nconst error_type &assume_error() const & noexcept\n```\n\n----------------------------------------\n\nTITLE: Automated Testing for New Language Generator\nDESCRIPTION: Steps to ensure that the new programming language generator is properly tested within the automated CI pipeline, emphasizing the need to update necessary files and scripts.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/snowball/CONTRIBUTING.rst#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n# Add your new source to COMPILER_SOURCES in GNUmakefile.\n# Hook up automated testing via CI in .travis.yml.\n```\n\n----------------------------------------\n\nTITLE: Comparing C++ Error Handling Systems\nDESCRIPTION: This code snippet shows various C++ error handling components from std::system_error, Boost.System, and the proposed system_error2. It demonstrates how the new system provides more precise and accurate error handling semantics compared to previous implementations.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/experimental/map.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nstd::errc                        // C++17 <system_error>\nboost::system::errc               // Boost.System\nexperimental::errc                // Proposed <system_error2> (almost identical)\n```\n\n----------------------------------------\n\nTITLE: Factorial Implementation Example using Fix Adaptor\nDESCRIPTION: Demonstrates how to implement a recursive factorial function using the fix adaptor with lambda expressions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/fix.hpp.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nauto factorial = boost::hof::fix(\n    [](auto recurse, auto x) -> decltype(x) { \n        return x == 0 ? 1 : x * recurse(x-1); \n    }\n);\nint r = boost::hof::result<int>(factorial)(5);\nassert(r == 5*4*3*2*1);\n```\n\n----------------------------------------\n\nTITLE: Value Category Helper Functions in C++\nDESCRIPTION: Helper function templates that return std::bitset objects in different value categories for testing. Includes rvalue, const rvalue, lvalue and const lvalue variants.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_90\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <std::size_t N>\n|std_bitset|_\\<N + 1> rvalue_bitset()\n{\n    return |std_bitset|_\\<N + 1>();\n}\n\ntemplate <std::size_t N>\n|std_bitset|_\\<N + 1> const rvalue_const_bitset()\n{\n    return |std_bitset|_\\<N + 1>();\n}\n\ntemplate <std::size_t N>\n|std_bitset|_\\<N + 1>& lvalue_bitset()\n{\n    static |std_bitset|_\\<N + 1> lset = |std_bitset|_\\<N + 1>();\n    return lset;\n}\n\ntemplate <std::size_t N>\n|std_bitset|_\\<N + 1> const& lvalue_const_bitset()\n{\n    static |std_bitset|_\\<N + 1> const clset = |std_bitset|_\\<N + 1>();\n    return clset;\n}\n```\n\n----------------------------------------\n\nTITLE: Including the advance Metafunction Header in C++\nDESCRIPTION: Shows how to include the necessary header file to use the advance metafunction in your code.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/advance.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/advance.hpp>\n```\n\n----------------------------------------\n\nTITLE: Creating a Typedef with Integral Sequence Wrapper\nDESCRIPTION: Examples of creating typedefs using both standard and numbered forms of Integral Sequence Wrapper. The wrapper creates a sequence of integral constant wrappers based on the provided type and values.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/IntegralSequenceWrapper.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntypedef seq_c<T, c1...cn> s;\ntypedef seq_n_c<T, c1...cn> s;\n```\n\n----------------------------------------\n\nTITLE: Using erase Metafunction with Extensible Sequence in C++\nDESCRIPTION: Demonstrates the usage of the erase metafunction with an Extensible Sequence, showing how to erase a range of elements.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/erase.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntypedef erase<s,first,last>::type r;\n```\n\n----------------------------------------\n\nTITLE: Setting CMake minimum required version\nDESCRIPTION: Specifies the minimum required version of CMake to use for the project. This ensures that the CMake features used in the file are supported by the CMake version available on the system.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.16)\n```\n\n----------------------------------------\n\nTITLE: Defining Static Observer Policy for Error Checking in C++\nDESCRIPTION: This code snippet defines a static observer policy function 'narrow_error_check' that performs error checking. It is constexpr, never throws, and causes undefined behavior if no error is present by calling a static '_ub' function.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/policies/base/narrow_error_check.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nstatic void narrow_error_check(Impl &&) noexcept\n```\n\n----------------------------------------\n\nTITLE: Initializing Boost.Hana Project with CMake\nDESCRIPTION: This snippet initializes the Boost.Hana project, setting the minimum CMake version, project version, and library properties. It defines the library target and sets the include directories and compile features.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hana/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT CMAKE_SOURCE_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR)\n\ncmake_minimum_required(VERSION 3.8...3.20)\n\nproject(boost_hana VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n\nadd_library(boost_hana INTERFACE)\nadd_library(Boost::hana ALIAS boost_hana)\n\ntarget_include_directories(boost_hana INTERFACE include)\n\ntarget_link_libraries(boost_hana\n  INTERFACE\n    Boost::config\n    Boost::core\n    Boost::fusion\n    Boost::mpl\n    Boost::tuple\n)\n\ntarget_compile_features(boost_hana INTERFACE cxx_std_14)\n\n```\n\n----------------------------------------\n\nTITLE: Example of advance operation in Random Access Iterator\nDESCRIPTION: Demonstrates the semantics of the advance operation which moves an iterator by n positions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/RandomAccessIterator.rst#2025-04-22_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\ntypedef advance<i,n>::type j;\n```\n\n----------------------------------------\n\nTITLE: Defining Circle Coordinates in Plaintext\nDESCRIPTION: This snippet contains a list of x and y coordinates that define points on a circle. Each line represents a pair of points, with four numbers: x1 y1 x2 y2. The coordinates are precise to 2 decimal places and range from -100 to 100.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/polygon/example/input_data/primary/primary_036.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n0\n100\n100 0 99 6\n99 6 99 12\n99 12 98 18\n98 18 96 24\n96 24 95 30\n95 30 92 36\n92 36 90 42\n90 42 87 48\n87 48 84 53\n84 53 80 58\n80 58 77 63\n77 63 72 68\n72 68 68 72\n68 72 63 77\n63 77 58 80\n58 80 53 84\n53 84 48 87\n48 87 42 90\n42 90 36 92\n36 92 30 95\n30 95 24 96\n24 96 18 98\n18 98 12 99\n12 99 6 99\n6 99 0 99\n0 99 -6 99\n-6 99 -12 99\n-12 99 -18 98\n-18 98 -24 96\n-24 96 -30 95\n-30 95 -36 92\n-36 92 -42 90\n-42 90 -48 87\n-48 87 -53 84\n-53 84 -58 80\n-58 80 -63 77\n-63 77 -68 72\n-68 72 -72 68\n-72 68 -77 63\n-77 63 -80 58\n-80 58 -84 53\n-84 53 -87 48\n-87 48 -90 42\n-90 42 -92 36\n-92 36 -95 30\n-95 30 -96 24\n-96 24 -98 18\n-98 18 -99 12\n-99 12 -99 6\n-99 6 -99 0\n-99 0 -99 -6\n-99 -6 -99 -12\n-99 -12 -98 -18\n-98 -18 -96 -24\n-96 -24 -95 -30\n-95 -30 -92 -36\n-92 -36 -90 -42\n-90 -42 -87 -48\n-87 -48 -84 -53\n-84 -53 -80 -58\n-80 -58 -77 -63\n-77 -63 -72 -68\n-72 -68 -68 -72\n-68 -72 -63 -77\n-63 -77 -58 -80\n-58 -80 -53 -84\n-53 -84 -48 -87\n-48 -87 -42 -90\n-42 -90 -36 -92\n-36 -92 -30 -95\n-30 -95 -24 -96\n-24 -96 -18 -98\n-18 -98 -12 -99\n-12 -99 -6 -99\n-6 -99 0 -99\n0 -99 6 -99\n6 -99 12 -99\n12 -99 18 -98\n18 -98 24 -96\n24 -96 30 -95\n30 -95 36 -92\n36 -92 42 -90\n42 -90 48 -87\n48 -87 53 -84\n53 -84 58 -80\n58 -80 63 -77\n63 -77 68 -72\n68 -72 72 -68\n72 -68 77 -63\n77 -63 80 -58\n80 -58 84 -53\n84 -53 87 -48\n87 -48 90 -42\n90 -42 92 -36\n92 -36 95 -30\n95 -30 96 -24\n96 -24 98 -18\n98 -18 99 -12\n99 -12 99 -6\n99 -6 100 0\n```\n\n----------------------------------------\n\nTITLE: Defining replace template in C++\nDESCRIPTION: Defines the template structure for the replace algorithm. It takes a Sequence, OldType, NewType, and an optional Inserter as template parameters.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/replace.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      typename Sequence\n    , typename OldType\n    , typename NewType\n    , typename In = |unspecified|\n    >\nstruct replace\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Vector<bool> Iterator Specification\nDESCRIPTION: Specification for vector<bool>::iterator classification as Random Access Traversal Iterator with Read/Write capabilities.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/new-iter-concepts.rst#2025-04-22_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\nvector<bool>::iterator\n```\n\n----------------------------------------\n\nTITLE: Listing Other Default Ignorable Code Points in Unicode\nDESCRIPTION: Lists Unicode code points classified as Other_Default_Ignorable_Code_Point. These are characters that should typically be ignored in text processing. The list includes combining marks, fillers, and reserved code points with their Unicode categories and descriptions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/spirit/workbench/unicode/PropList.txt#2025-04-22_snippet_21\n\nLANGUAGE: Unicode data format\nCODE:\n```\n034F          ; Other_Default_Ignorable_Code_Point # Mn       COMBINING GRAPHEME JOINER\n115F..1160    ; Other_Default_Ignorable_Code_Point # Lo   [2] HANGUL CHOSEONG FILLER..HANGUL JUNGSEONG FILLER\n2065..2069    ; Other_Default_Ignorable_Code_Point # Cn   [5] <reserved-2065>..<reserved-2069>\n3164          ; Other_Default_Ignorable_Code_Point # Lo       HANGUL FILLER\nFFA0          ; Other_Default_Ignorable_Code_Point # Lo       HALFWIDTH HANGUL FILLER\nFFF0..FFF8    ; Other_Default_Ignorable_Code_Point # Cn   [9] <reserved-FFF0>..<reserved-FFF8>\nE0000         ; Other_Default_Ignorable_Code_Point # Cn       <reserved-E0000>\nE0002..E001F  ; Other_Default_Ignorable_Code_Point # Cn  [30] <reserved-E0002>..<reserved-E001F>\nE0080..E00FF  ; Other_Default_Ignorable_Code_Point # Cn [128] <reserved-E0080>..<reserved-E00FF>\nE01F0..E0FFF  ; Other_Default_Ignorable_Code_Point # Cn [3600] <reserved-E01F0>..<reserved-E0FFF>\n\n# Total code points: 3778\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost Local Function CMake Build\nDESCRIPTION: Sets up CMake build configuration for Boost Local Function library including version requirements, project setup, library targets, and dependencies. Creates an interface library with necessary Boost component dependencies and configures include directories.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/local_function/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.16)\n\nproject(boost_local_function VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n\nadd_library(boost_local_function INTERFACE)\nadd_library(Boost::local_function ALIAS boost_local_function)\n\ntarget_include_directories(boost_local_function INTERFACE include)\n\ntarget_link_libraries(boost_local_function\n  INTERFACE\n    Boost::config\n    Boost::mpl\n    Boost::preprocessor\n    Boost::scope_exit\n    Boost::type_traits\n    Boost::typeof\n    Boost::utility\n)\n\nif(BUILD_TESTING AND EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/test/CMakeLists.txt\")\n\n  add_subdirectory(test)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Git Configuration for Merging Files\nDESCRIPTION: Configures Git to use a custom merge driver for specific files. This configuration is global and affects how Git automatically handles merges for generated files in ArangoDB.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit config --global merge.ours.driver true\n```\n\n----------------------------------------\n\nTITLE: Parsing Graph Input Data for ArangoDB\nDESCRIPTION: This snippet shows the format of input data for graph processing in ArangoDB. It includes vertex counts, edge definitions, and weights. The first line indicates the number of vertices, followed by lines defining edges and their weights.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/polygon/example/input_data/primary/primary_046.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n2\n2 -5\n3 -3\n1\n0 0 2 -7\n```\n\n----------------------------------------\n\nTITLE: Configuring Exhaustive Documentation Extraction in Doxygen\nDESCRIPTION: Setting to extract documentation for all entities even without explicit documentation. When enabled, Doxygen assumes everything is documented. Disables undocumented member warnings. Default is NO, but set to YES in this configuration.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/sort/doc/doxygen/sort_doxyfile.txt#2025-04-22_snippet_24\n\nLANGUAGE: text\nCODE:\n```\nEXTRACT_ALL            = YES\n```\n\n----------------------------------------\n\nTITLE: Creating Boost Detail Library and Alias\nDESCRIPTION: This snippet defines the Boost Detail library as an interface library and creates an alias for it. The use of an interface library indicates that it does not contain any implementation, only interface requirements.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/detail/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(boost_detail INTERFACE)\nadd_library(Boost::detail ALIAS boost_detail)\n```\n\n----------------------------------------\n\nTITLE: Defining BOOST_OUTCOME_ENABLE_LEGACY_SUPPORT_FOR Macro in C++\nDESCRIPTION: This macro enables backwards compatibility features and naming for earlier versions of Boost.Outcome. It can be defined before including the library to override the default value. The default value is set to the current version of Outcome, expressed in hundreds.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/macros/enable_legacy_support_for.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n#define BOOST_OUTCOME_ENABLE_LEGACY_SUPPORT_FOR 210\n```\n\n----------------------------------------\n\nTITLE: STL Bidirectional Iterator Operations\nDESCRIPTION: Lists STL algorithms that require Bidirectional Iterator with Readable and Writable capabilities.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/new-iter-concepts.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nstable_partition, inplace_merge\n```\n\n----------------------------------------\n\nTITLE: Configuring Inline Grouped Classes in Doxygen\nDESCRIPTION: Setting to display classes, structs and unions inline within their group rather than on separate pages. Doesn't work with SEPARATE_MEMBER_PAGES. Default is NO.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/sort/doc/doxygen/sort_doxyfile.txt#2025-04-22_snippet_20\n\nLANGUAGE: text\nCODE:\n```\nINLINE_GROUPED_CLASSES = NO\n```\n\n----------------------------------------\n\nTITLE: Source Files Grouping Configuration\nDESCRIPTION: Groups source files including file.hpp and various implementation files into the root source group.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/json/example/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nsource_group(\"\" FILES\n    file.hpp\n    path.cpp\n    pretty.cpp\n    proxy.cpp\n    validate.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Reverse Algorithm Template in C++\nDESCRIPTION: Defines the template structure for the 'reverse' algorithm. It takes a Sequence and an optional Inserter as template parameters and defines a 'type' member.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/reverse.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      typename Sequence\n    , typename In = |unspecified|\n    >\nstruct reverse\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Using size_t Template Example in C++\nDESCRIPTION: Example demonstrating usage of size_t template including type checks and value comparisons. Shows integration with MPL assertions and type relationships.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/size_t.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ntypedef size_t<8> eight;\n\nBOOST_MPL_ASSERT(( is_same< eight::value_type, std::size_t > ));\nBOOST_MPL_ASSERT(( is_same< eight::type, eight > ));\nBOOST_MPL_ASSERT(( is_same< next< eight >::type, size_t<9> > ));\nBOOST_MPL_ASSERT(( is_same< prior< eight >::type, size_t<7> > ));\nBOOST_MPL_ASSERT_RELATION( (eight::value), ==, 8 );\nassert( eight() == 8 );\n```\n\n----------------------------------------\n\nTITLE: Initializing Boost Version and Source Directory in CMake\nDESCRIPTION: Sets the Boost version and source directory for the project. It also adds compiler flags and creates an interface target for Boost header-only libraries.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nproject(boost)\n\nset(boost_version \"1.78.0\")\nset(BOOST_VERSION ${boost_version} PARENT_SCOPE)\nset(boost_src \"${CMAKE_CURRENT_SOURCE_DIR}/${boost_version}\")\n\nif (MSVC)\n  add_definitions(-DBOOST_THREAD_BUILD_LIB)\nendif()\n\nadd_c_flags_if_supported(CMAKE_C_FLAGS -Wno-suggest-override)\nadd_cxx_flags_if_supported(CMAKE_CXX_FLAGS -Wno-suggest-override)\n\nmessage(STATUS \"using 3rdParty BOOST\")\nadd_library(boost_boost INTERFACE)\ntarget_include_directories(boost_boost SYSTEM INTERFACE \"${boost_src}\")\n```\n\n----------------------------------------\n\nTITLE: Defining Yi Unicode Block\nDESCRIPTION: Lists the code point ranges for the Yi script in Unicode. This block contains 1,220 code points including syllables and radicals used in the Yi writing system.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/spirit/workbench/unicode/Scripts.txt#2025-04-22_snippet_21\n\nLANGUAGE: unicode\nCODE:\n```\nA000..A014    ; Yi # Lo  [21] YI SYLLABLE IT..YI SYLLABLE E\nA015          ; Yi # Lm       YI SYLLABLE WU\nA016..A48C    ; Yi # Lo [1143] YI SYLLABLE BIT..YI SYLLABLE YYR\nA490..A4C6    ; Yi # So  [55] YI RADICAL QOT..YI RADICAL KE\n```\n\n----------------------------------------\n\nTITLE: at_c Expression Semantics in C++\nDESCRIPTION: Demonstrates the syntax for using the at_c metafunction and its equivalence to using the at metafunction with a long_<n> type.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/at_c.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntypedef at_c<Sequence,n>::type t;\n```\n\n----------------------------------------\n\nTITLE: Initializing Boost.Regex CMake Project\nDESCRIPTION: Sets up the CMake project for Boost.Regex, specifying minimum CMake version and project details.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/regex/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.16)\n\nproject(boost_regex VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: CRC Table Generation in C\nDESCRIPTION: This function generates the CRC lookup table used for efficient CRC calculation.  It iterates through all possible byte values and calculates the corresponding CRC value based on polynomial division.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/zlib/zlib-1.2.13/doc/rfc1952.txt#2025-04-22_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n/* Make the table for a fast CRC. */\nvoid make_crc_table(void)\n{\n  unsigned long c;\n  int n, k;\n  for (n = 0; n < 256; n++) {\n    c = (unsigned long) n;\n    for (k = 0; k < 8; k++) {\n      if (c & 1) {\n        c = 0xedb88320L ^ (c >> 1);\n      } else {\n        c = c >> 1;\n      }\n    }\n    crc_table[n] = c;\n  }\n  crc_table_computed = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Snappy Unit Tests in CMake\nDESCRIPTION: Sets up the Snappy unit test executable, including GoogleTest integration. It adds the test to CMake's test suite and configures compiler options for GoogleTest.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/snappy/snappy-1.1.9/CMakeLists.txt#2025-04-22_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nif(SNAPPY_BUILD_TESTS)\n  enable_testing()\n\n  # Prevent overriding the parent project's compiler/linker settings on Windows.\n  set(gtest_force_shared_crt ON CACHE BOOL \"\" FORCE)\n  set(install_gtest OFF)\n  set(install_gmock OFF)\n  set(build_gmock ON)\n\n  # This project is tested using GoogleTest.\n  add_subdirectory(\"third_party/googletest\")\n\n  # GoogleTest triggers a missing field initializers warning.\n  if(SNAPPY_HAVE_NO_MISSING_FIELD_INITIALIZERS)\n    set_property(TARGET gtest\n        APPEND PROPERTY COMPILE_OPTIONS -Wno-missing-field-initializers)\n    set_property(TARGET gmock\n        APPEND PROPERTY COMPILE_OPTIONS -Wno-missing-field-initializers)\n  endif(SNAPPY_HAVE_NO_MISSING_FIELD_INITIALIZERS)\n\n  add_executable(snappy_unittest \"\")\n  target_sources(snappy_unittest\n    PRIVATE\n      \"snappy_unittest.cc\"\n  )\n  target_link_libraries(snappy_unittest snappy_test_support gmock_main gtest)\n\n  add_test(\n    NAME snappy_unittest\n    WORKING_DIRECTORY \"${PROJECT_SOURCE_DIR}\"\n    COMMAND \"${PROJECT_BINARY_DIR}/snappy_unittest\")\n\n  add_executable(snappy_test_tool \"\")\n  target_sources(snappy_test_tool\n    PRIVATE\n      \"snappy_test_tool.cc\"\n  )\n  target_link_libraries(snappy_test_tool snappy_test_support)\nendif(SNAPPY_BUILD_TESTS)\n```\n\n----------------------------------------\n\nTITLE: Defining less_equal Metafunction Template in C++\nDESCRIPTION: This snippet defines the template structure for the less_equal metafunction. It takes two template parameters T1 and T2, and defines an unspecified type.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/less_equal.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      typename T1\n    , typename T2\n    >\nstruct less_equal\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Range Difference and Range Pointer Types in C++\nDESCRIPTION: This snippet demonstrates the equivalence of range_difference and range_pointer types for const Range to standard C++ types. It shows how these types are defined using template metaprogramming techniques.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/range/doc/mfc_atl.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nrange_difference<const Range>::type\n```\n\nLANGUAGE: C++\nCODE:\n```\nstd::ptrdiff_t\n```\n\nLANGUAGE: C++\nCODE:\n```\nrange_pointer<const Range>::type\n```\n\nLANGUAGE: C++\nCODE:\n```\nadd_pointer<remove_reference<range_reference<const Range>::type>::type>::type\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Definitions for Boost Serialization Libraries\nDESCRIPTION: Defines compilation preprocessor macros for both libraries to control library linkage. These control whether the library should use dynamic or static linking based on the build configuration.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/serialization/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(boost_serialization\n  PUBLIC BOOST_SERIALIZATION_NO_LIB\n  # Source files already define BOOST_SERIALIZATION_SOURCE\n  # PRIVATE BOOST_SERIALIZATION_SOURCE\n)\n\ntarget_compile_definitions(boost_wserialization\n  PUBLIC BOOST_SERIALIZATION_NO_LIB\n  # Source files already define BOOST_SERIALIZATION_SOURCE\n  # PRIVATE BOOST_SERIALIZATION_SOURCE\n)\n\nif(BUILD_SHARED_LIBS)\n  target_compile_definitions(boost_serialization PUBLIC BOOST_SERIALIZATION_DYN_LINK)\n  target_compile_definitions(boost_wserialization PUBLIC BOOST_SERIALIZATION_DYN_LINK)\nelse()\n  target_compile_definitions(boost_serialization PUBLIC BOOST_SERIALIZATION_STATIC_LINK)\n  target_compile_definitions(boost_wserialization PUBLIC BOOST_SERIALIZATION_STATIC_LINK)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost Multi Array CMake Build\nDESCRIPTION: Defines a CMake build configuration for the Boost Multi Array library. Sets up an interface library with required Boost dependencies and include directories. Includes test directory conditionally if testing is enabled.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/multi_array/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.16)\n\nproject(boost_multi_array VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n\nadd_library(boost_multi_array INTERFACE)\nadd_library(Boost::multi_array ALIAS boost_multi_array)\n\ntarget_include_directories(boost_multi_array INTERFACE include)\n\ntarget_link_libraries(boost_multi_array\n  INTERFACE\n    Boost::array\n    Boost::assert\n    Boost::concept_check\n    Boost::config\n    Boost::core\n    Boost::functional\n    Boost::iterator\n    Boost::mpl\n    Boost::static_assert\n    Boost::type_traits\n)\n\nif(BUILD_TESTING AND EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/test/CMakeLists.txt\")\n\n  add_subdirectory(test)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Using Homogeneous Memory-Based GIL Constructs in C++\nDESCRIPTION: This code defines metafunctions for creating standard homogeneous GIL constructs such as pixel references, pixel values, iterators, locators, views, and images, based on channel type, layout, and other properties. It highlights how parameters like 'IsPlanar', 'IsStep', and 'IsMutable' can affect type definitions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/metafunctions.rst.txt#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <typename ChannelValue, typename Layout, bool IsPlanar=false, bool IsMutable=true>\nstruct pixel_reference_type { typedef ... type; };\n\ntemplate <typename Channel, typename Layout>\nstruct pixel_value_type { typedef ... type; };\n\ntemplate <typename ChannelValue, typename Layout, bool IsPlanar=false, bool IsStep=false,  bool IsMutable=true>\nstruct iterator_type { typedef ... type; };\n\ntemplate <typename ChannelValue, typename Layout, bool IsPlanar=false, bool IsXStep=false, bool IsMutable=true>\nstruct locator_type { typedef ... type; };\n\ntemplate <typename ChannelValue, typename Layout, bool IsPlanar=false, bool IsXStep=false, bool IsMutable=true>\nstruct view_type { typedef ... type; };\n\ntemplate <typename ChannelValue, typename Layout, bool IsPlanar=false, typename Alloc=std::allocator<unsigned char> >\nstruct image_type { typedef ... type; };\n\ntemplate <typename BitField, typename ChannelBitSizeVector, typename Layout, typename Alloc=std::allocator<unsigned char> >\nstruct packed_image_type { typedef ... type; };\n\ntemplate <typename ChannelBitSizeVector, typename Layout, typename Alloc=std::allocator<unsigned char> >\nstruct bit_aligned_image_type { typedef ... type; };\n```\n\n----------------------------------------\n\nTITLE: Including sizeof_ Metafunction Header in C++\nDESCRIPTION: Header file inclusion directive for the sizeof_ metafunction from Boost MPL library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/sizeof_.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/sizeof.hpp>\n```\n\n----------------------------------------\n\nTITLE: Implementing sequence_tag Template Metafunction in C++\nDESCRIPTION: Template metafunction that takes any type X and returns an unspecified tag type. Used for tag dispatching in intrinsic sequence operations with amortized constant time complexity.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/sequence_tag.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n    typename X\n>\nstruct sequence_tag\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: This snippet sets the minimum required CMake version for the project to 3.5 or versions 3.20 and later. It ensures compatibility with the specified CMake features.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/fusion/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.20)\n```\n\n----------------------------------------\n\nTITLE: Defining ASCII_Hex_Digit Unicode Property\nDESCRIPTION: This snippet defines the ASCII_Hex_Digit Unicode property, which includes only the standard ASCII characters that can be used as hexadecimal digits. It covers digits 0-9 and Latin letters A-F (both uppercase and lowercase).\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/spirit/workbench/unicode/PropList.txt#2025-04-22_snippet_9\n\nLANGUAGE: Unicode\nCODE:\n```\n0030..0039    ; ASCII_Hex_Digit # Nd  [10] DIGIT ZERO..DIGIT NINE\n0041..0046    ; ASCII_Hex_Digit # L&   [6] LATIN CAPITAL LETTER A..LATIN CAPITAL LETTER F\n0061..0066    ; ASCII_Hex_Digit # L&   [6] LATIN SMALL LETTER A..LATIN SMALL LETTER F\n```\n\n----------------------------------------\n\nTITLE: CRC Table Definition in C\nDESCRIPTION: Defines the CRC lookup table and a flag to indicate if the table has been computed. The table is used for efficient CRC calculation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/zlib/zlib-1.2.13/doc/rfc1952.txt#2025-04-22_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n/* Table of CRCs of all 8-bit messages. */\nunsigned long crc_table[256];\n\n/* Flag: has the table been computed? Initially false. */\nint crc_table_computed = 0;\n```\n\n----------------------------------------\n\nTITLE: Overloading Operator for Reveal Adaptor in C++\nDESCRIPTION: Special operator overload for the reveal_adaptor to enable infix notation, specifically needed for GCC compatibility.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/infix.hpp.txt#2025-04-22_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<class T, class F>\nconstexpr auto operator<(T&& x, const boost::hof::reveal_adaptor<F>& f) BOOST_HOF_RETURNS\n(\n    detail::make_postfix_adaptor(BOOST_HOF_FORWARD(T)(x), f.infix_base_function())\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Include Directories for Boost Format\nDESCRIPTION: This snippet specifies the include directories for the Boost format library, allowing it to be used in other projects. It sets the interface include directory to 'include'. This is critical for users of the library to access its headers.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/format/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(boost_format INTERFACE include)\n```\n\n----------------------------------------\n\nTITLE: Including eval_if_c Header in C++\nDESCRIPTION: Shows how to include the necessary header file to use the eval_if_c metafunction in C++ code.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/eval_if_c.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/eval_if.hpp>\n```\n\n----------------------------------------\n\nTITLE: Declaring basic_outcome Template in C++\nDESCRIPTION: Definition of the basic_outcome template class that can carry a success value T, a disappointment EC, a failure EP, or both EC and EP with a NoValuePolicy specifying behavior when accessing unavailable state.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/basic_outcome/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n+++\ntitle = \"`basic_outcome<T, EC, EP, NoValuePolicy>`\"\ndescription = \"A type carrying one of (i) a successful `T` (ii) a disappointment `EC` (iii) a failure `EP` (iv) both a disappointment `EC` and a failure `EP`, with `NoValuePolicy` specifying what to do if one tries to read state which isn't there.\"\n+++\n```\n\n----------------------------------------\n\nTITLE: Declaring bitand_ Metafunction Template in C++\nDESCRIPTION: Template declaration for the bitand_ metafunction, which takes multiple integral constant arguments and returns their bitwise AND result.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/bitand_.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      typename T1\n    , typename T2\n    , typename T3 = |unspecified|\n    |...|\n    , typename T\n* = |unspecified|\n    >\nstruct bitand_\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Variadic and Numbered Sequence Forms in C++\nDESCRIPTION: Examples showing the syntax for defining both variadic and numbered forms of a sequence. The variadic form allows for a variable number of elements up to a configurable limit, while numbered forms accept an exact number of elements specified in the template name.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/VariadicSequence.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nseq<t1...tn>\n```\n\nLANGUAGE: C++\nCODE:\n```\nseqn<t1...tn>\n```\n\n----------------------------------------\n\nTITLE: Updating Adler-32 Checksum\nDESCRIPTION: This C function updates an Adler-32 checksum with the bytes from a buffer. It takes the current checksum and a buffer of data, then computes and returns the new checksum. The initial checksum should be set to 1. The function iterates over the buffer to update the checksum.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/zlib/zlib-1.2.13/doc/rfc1950.txt#2025-04-22_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define BASE 65521 /* largest prime smaller than 65536 */\n\n/*\n   Update a running Adler-32 checksum with the bytes buf[0..len-1]\n and return the updated checksum. The Adler-32 checksum should be\n initialized to 1.\n\n Usage example:\n\n   unsigned long adler = 1L;\n\n   while (read_buffer(buffer, length) != EOF) {\n     adler = update_adler32(adler, buffer, length);\n   }\n   if (adler != original_adler) error();\n*/\nunsigned long update_adler32(unsigned long adler,\n unsigned char *buf, int len)\n{\n  unsigned long s1 = adler & 0xffff;\n  unsigned long s2 = (adler >> 16) & 0xffff;\n  int n;\n\n  for (n = 0; n < len; n++) {\n```\n\n----------------------------------------\n\nTITLE: Including remove_if Header in C++\nDESCRIPTION: Specifies the header file to include for using the remove_if algorithm in C++ code.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/remove_if.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/remove_if.hpp>\n```\n\n----------------------------------------\n\nTITLE: Invariant Example for Random Access Iterator\nDESCRIPTION: Demonstrates an invariant for Random Access Iterators where advancing an iterator by n positions and then by -n positions should be a null operation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/RandomAccessIterator.rst#2025-04-22_snippet_7\n\nLANGUAGE: C++\nCODE:\n```\nadvance< advance<i,n>::type, negate<n>::type >::type\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video with HTML Iframe\nDESCRIPTION: Responsive iframe embed for a video lecture with custom styling and playback settings\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/tutorial/video.rst.txt#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div style=\"position: relative; overflow: hidden; max-width: 100%; height: auto;\">\n    <iframe width=\"800\" height=\"450\" src=\"https://www.youtube.com/embed/sR8Wjg0pceE?rel=0\" frameborder=\"0\" allow=\"autoplay=false; encrypted-media\" allowfullscreen></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining Named Parameter Constructor with init Template\nDESCRIPTION: Template class for defining named parameter enabled constructors in C++. Enables Python binding of C++ constructors that use the Parameter library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter_python/doc/index.rst#2025-04-22_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <class ParameterSpecs>\nstruct init : python::def_visitor<init<ParameterSpecs> >\n{\n    template <class Class> \n    void def(Class& class_);\n\n    template <class CallPolicies>\n    *def_visitor* operator[](CallPolicies const& policies) const;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining push_front Metafunction Template in C++\nDESCRIPTION: Template definition for the push_front metafunction, which takes a Sequence and a type T as parameters. It returns an unspecified type that represents the new sequence with T inserted at the beginning.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/push_front.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      typename Sequence\n    , typename T\n    >\nstruct push_front\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Non-Distributed Betweenness Centrality Function with Multiple Maps in C++\nDESCRIPTION: This definition extends the functionality to include multiple maps for incoming edges, distances, dependencies, path counts, and vertex indices, providing a robust solution for calculating betweenness centrality in complex graph structures.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/non_distributed_betweenness_centrality.rst#2025-04-22_snippet_3\n\nLANGUAGE: c++\nCODE:\n```\ntemplate<typename ProcessGroup, typename Graph, typename CentralityMap, \n           typename EdgeCentralityMap, typename IncomingMap, typename DistanceMap, \n           typename DependencyMap, typename PathCountMap, typename VertexIndexMap, \n           typename Buffer>\nvoid \nnon_distributed_brandes_betweenness_centrality(const ProcessGroup& pg,\n                                                 const Graph& g, \n                                                 CentralityMap centrality,\n                                                 EdgeCentralityMap edge_centrality_map,\n                                                 IncomingMap incoming, \n                                                 DistanceMap distance, \n                                                 DependencyMap dependency,     \n                                                 PathCountMap path_count,      \n                                                 VertexIndexMap vertex_index,\n                                                 Buffer sources);\n```\n\n----------------------------------------\n\nTITLE: Tagged Overloadings with std::in_place_type_t for Object Construction in C++\nDESCRIPTION: This snippet demonstrates an alternative approach using tagged overloading alongside templated functions for object construction in C++. It involves the use of std::in_place_type_t to specify type tags, allowing for explicit overload resolution during compilation. This method prioritizes compiler efficiency and clarity at the cost of verbosity.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/tutorial/advanced/constructors/metaprogrammg3.md#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<class... Args>\ninline outcome::result<file_handle> make(std::in_place_type_t<file_handle>, Args&& ... args)\n{\n  return file_handle::file(std::forward<Args>(args)...);\n}\n...\n// Now you must always write this:\nmake(std::in_place_type<file_handle>, \"hello\");\n```\n\n----------------------------------------\n\nTITLE: Building OpenSSL Path Configuration on Windows CMD\nDESCRIPTION: Command line instructions for setting up OpenSSL path using vcpkg on Windows Command Prompt.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/beast/README.md#2025-04-22_snippet_1\n\nLANGUAGE: batch\nCODE:\n```\nvcpkg install openssl --triplet x32-windows\nSET OPENSSL_ROOT=path\\installed\\x32-windows\n```\n\n----------------------------------------\n\nTITLE: Defining if_ Metafunction Template in C++\nDESCRIPTION: Defines the if_ metafunction template that selects between two types based on a boolean condition. It takes three template parameters: a condition C, and two types T1 and T2 to choose from.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/if_.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate< \n      typename C\n    , typename T1\n    , typename T2\n    >\nstruct if_\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Using the equal algorithm to compare sequences in C++\nDESCRIPTION: This example demonstrates how to use the 'equal' algorithm to compare two sequences (a vector and a list) with identical elements.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/equal.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntypedef vector<char,int,unsigned,long,unsigned long> s1;\ntypedef list<char,int,unsigned,long,unsigned long> s2;\n\nBOOST_MPL_ASSERT(( equal<s1,s2> ));\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for Boost.Python with Faber\nDESCRIPTION: This snippet is used to generate the HTML documentation for the Boost.Python library using the 'faber doc.html' command. It creates detailed documentation based on the current codebase, useful for developers to understand the library usage and functionality.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nfaber doc.html\n```\n\n----------------------------------------\n\nTITLE: Defining Non-POSIX System Support for Outcome Library\nDESCRIPTION: Macro definition required for using Outcome in its Experimental form on non-Windows non-POSIX platforms, typically used in embedded systems.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/requirements/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nBOOST_OUTCOME_SYSTEM_ERROR2_NOT_POSIX\n```\n\n----------------------------------------\n\nTITLE: Configuring Object Relationship Tests in CMake\nDESCRIPTION: Sets up archive tests for various object relationship scenarios including multiple inheritance, pointers, non-default constructors, and other complex object interactions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/serialization/CMake/CMakeLists.txt#2025-04-22_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\narchive_test(test_mi)\narchive_test(test_multiple_ptrs A)\narchive_test(test_multiple_inheritance)\narchive_test(test_new_operator A)\narchive_test(test_non_intrusive)\narchive_test(test_non_default_ctor)\narchive_test(test_non_default_ctor2)\narchive_test(test_null_ptr)\narchive_test(test_nvp A)\narchive_test(test_object)\narchive_test(test_optional)\narchive_test(test_primitive)\narchive_test(test_priority_queue A)\narchive_test(test_private_base)\narchive_test(test_private_base2)\narchive_test(test_queue A)\narchive_test(test_recursion A)\narchive_test(test_registered)\n```\n\n----------------------------------------\n\nTITLE: Usage Example of shift_right Metafunction\nDESCRIPTION: Demonstrates how to use the shift_right metafunction with various unsigned integral constants and verify results using assertions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/shift_right.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ntypedef integral_c<unsigned,0> u0;\ntypedef integral_c<unsigned,1> u1;\ntypedef integral_c<unsigned,2> u2;\ntypedef integral_c<unsigned,8> u8;\n\nBOOST_MPL_ASSERT_RELATION( (shift_right<u0,u0>::value), ==, 0 );\nBOOST_MPL_ASSERT_RELATION( (shift_right<u1,u0>::value), ==, 1 );\nBOOST_MPL_ASSERT_RELATION( (shift_right<u1,u1>::value), ==, 0 );\nBOOST_MPL_ASSERT_RELATION( (shift_right<u2,u1>::value), ==, 1 );\nBOOST_MPL_ASSERT_RELATION( (shift_right<u8,u1>::value), ==, 4 );\n```\n\n----------------------------------------\n\nTITLE: Including front_inserter Header in C++\nDESCRIPTION: Specifies the header file to include for using the front_inserter template in C++ code.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/front_inserter.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/front_inserter.hpp>\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost ICL Library with CMake\nDESCRIPTION: Sets up the Boost ICL library as an interface library, defines its dependencies, and configures include directories. It also sets up an alias and optionally includes tests if BUILD_TESTING is enabled.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/icl/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.16)\n\nproject(boost_icl VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n\nadd_library(boost_icl INTERFACE)\nadd_library(Boost::icl ALIAS boost_icl)\n\ntarget_include_directories(boost_icl INTERFACE include)\n\ntarget_link_libraries(boost_icl\n  INTERFACE\n    Boost::assert\n    Boost::concept_check\n    Boost::config\n    Boost::container\n    Boost::core\n    Boost::date_time\n    Boost::detail\n    Boost::iterator\n    Boost::move\n    Boost::mpl\n    Boost::range\n    Boost::rational\n    Boost::static_assert\n    Boost::type_traits\n    Boost::utility\n)\n\nif(BUILD_TESTING AND EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/test/CMakeLists.txt\")\n\n  add_subdirectory(test)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Inserter Usage with Filtering in C++\nDESCRIPTION: Example of using the inserter class template to create a filtering 'push_back' inserter. It copies odd numbers from a range to a vector.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/inserter_.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntemplate< typename N > struct is_odd : bool_< ( N::value % 2 ) > {};\n\ntypedef copy<\n      range_c<int,0,10>\n    , inserter< // a filtering 'push_back' inserter\n          vector<>\n        , if_< is_odd<_2>, push_back<_1,_2>, _1 >\n        >\n    >::type odds;\n   \nBOOST_MPL_ASSERT(( equal< odds, vector_c<int,1,3,5,7,9>, equal_to<_,_> > ));\n```\n\n----------------------------------------\n\nTITLE: Numeric Graph Data Format\nDESCRIPTION: Sample data format showing numeric values that could represent a graph structure. First line indicates total entries, followed by edge pairs and vertex data.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/polygon/example/input_data/primary/primary_019.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n2\n3 2\n2 3\n1\n4 0 0 4\n```\n\n----------------------------------------\n\nTITLE: Using key_type Metafunction in C++\nDESCRIPTION: This code snippet demonstrates the usage of the key_type metafunction. It shows how to get the key type for a pair<int,unsigned> in both a map and a set.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/key_type.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntypedef key_type< map<>,pair<int,unsigned> >::type k1;\ntypedef key_type< set<>,pair<int,unsigned> >::type k2;\n\nBOOST_MPL_ASSERT(( is_same< k1,int > ));\nBOOST_MPL_ASSERT(( is_same< k2,pair<int,unsigned> > ));\n```\n\n----------------------------------------\n\nTITLE: Hugo Children Shortcode for Page Listing\nDESCRIPTION: Uses the Hugo 'children' shortcode to automatically generate a list of child pages under the concepts section. The shortcode is configured to display descriptions and include pages up to a depth of 2 in the hierarchy.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/concepts/_index.md#2025-04-22_snippet_1\n\nLANGUAGE: hugo\nCODE:\n```\n{{% children description=\"true\" depth=\"2\" %}}\n```\n\n----------------------------------------\n\nTITLE: Implementing Deduced Template Parameters in Boost.Python\nDESCRIPTION: This code snippet demonstrates how to implement a deduced parameter interface for Boost.Python by making type requirements more specific. It creates a bases template that derives from a common base class for identification.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/index.rst#2025-04-22_snippet_33\n\nLANGUAGE: cpp\nCODE:\n```\nnamespace boost { namespace python {\n    namespace detail {\n\n        struct bases_base\n        {\n        };\n    }\n\n    template <\n        typename A0 = void, typename A1 = void, typename A2 = void /*…*/\n    >\n    struct bases : detail::bases_base\n    {\n    };\n}}  \n```\n\n----------------------------------------\n\nTITLE: Listing Logical Order Exception Characters in Unicode\nDESCRIPTION: Lists Unicode code points classified as Logical_Order_Exception. These characters have special ordering rules in bidirectional text. The list includes vowel signs from Thai, Lao, and Tai Viet scripts.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/spirit/workbench/unicode/PropList.txt#2025-04-22_snippet_24\n\nLANGUAGE: Unicode data format\nCODE:\n```\n0E40..0E44    ; Logical_Order_Exception # Lo   [5] THAI CHARACTER SARA E..THAI CHARACTER SARA AI MAIMALAI\n0EC0..0EC4    ; Logical_Order_Exception # Lo   [5] LAO VOWEL SIGN E..LAO VOWEL SIGN AI\nAAB5..AAB6    ; Logical_Order_Exception # Lo   [2] TAI VIET VOWEL E..TAI VIET VOWEL O\nAAB9          ; Logical_Order_Exception # Lo       TAI VIET VOWEL UEA\nAABB..AABC    ; Logical_Order_Exception # Lo   [2] TAI VIET VOWEL AUE..TAI VIET VOWEL AY\n\n# Total code points: 15\n```\n\n----------------------------------------\n\nTITLE: Concatenating LZ4 Files in Bash\nDESCRIPTION: Demonstrates how to concatenate multiple LZ4 compressed files into a single file using bash commands. This allows for decompressing multiple files as if they were a single compressed file.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/lz4/programs/lz4.1.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nlz4 file1  > foo.lz4\nlz4 file2 >> foo.lz4\n```\n\n----------------------------------------\n\nTITLE: Null Pointer Precondition Check in C++\nDESCRIPTION: Shows how precondition checks for null pointers are handled, especially when using nullable types.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/conventions.rst#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nx != 0;\n```\n\n----------------------------------------\n\nTITLE: Original Schedule Log Format\nDESCRIPTION: Log entries showing user activity with memory addresses, GPS coordinates and location names captured at specific times. Format includes timestamp, username, memory address, latitude/longitude coordinates and location description.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/serialization/example/demo_output.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n6:24 bob \n0x003265C8  34°135'52.56\" 134°22'78.3\" 24th Street and 10th Avenue\n0x00326648  35°137'23.456\" 133°35'54.12\" State street and Cathedral Vista Lane\n0x00326768  35°136'15.456\" 133°32'15.3\" White House\n```\n\n----------------------------------------\n\nTITLE: Defining the 'next' Metafunction Template in C++\nDESCRIPTION: This code snippet defines the template structure for the 'next' metafunction. It takes an Iterator type parameter and defines an internal 'type' typedef. The actual implementation is not shown and is implementation-defined.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/next.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n    typename Iterator\n>\nstruct next\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Throw Bad Result Access Policy\nDESCRIPTION: A policy that throws bad_result_access or bad_outcome_access exceptions when value or error observations fail, with specific error handling for different result types.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/tutorial/essential/no-value/builtin.md#2025-04-22_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\nthrow_bad_result_access<EC>\n```\n\n----------------------------------------\n\nTITLE: Iterator Addition Operation\nDESCRIPTION: Operator overload for adding a value to an iterator using a temporary object\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/iterator_facade_ref.rst#2025-04-22_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\nDerived tmp(static_cast<Derived const*>(this));\nreturn tmp += n;\n```\n\n----------------------------------------\n\nTITLE: Configuring Fortran-Optimized Output in Doxygen\nDESCRIPTION: Setting to optimize Doxygen output for Fortran source projects. Tailors documentation specifically for Fortran code. Default is NO.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/sort/doc/doxygen/sort_doxyfile.txt#2025-04-22_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nOPTIMIZE_FOR_FORTRAN   = NO\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation Structure in RST\nDESCRIPTION: Sets up the documentation structure using reStructuredText with a table of contents that includes index, building instructions, getting started guide, examples, and point-free documentation sections. Configured with maxdepth of 2 levels.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/src/intro.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :maxdepth: 2\n\n    index\n    building\n    gettingstarted\n    examples\n    point_free\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for ArangoDB Examples in reStructuredText\nDESCRIPTION: This snippet defines a table of contents for ArangoDB example documentation using reStructuredText. It includes links to specific example pages and sets the maximum depth for the table of contents.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/src/examples.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n    :maxdepth: 1\n\n    example_print\n    example_overloading\n    example_polymorphic_constructors\n    more_examples\n```\n\n----------------------------------------\n\nTITLE: Static Function Adaptor Class Declaration in C++\nDESCRIPTION: Defines a static function adaptor as a class-only adaptor requiring DefaultConstructible functions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/doc/src/definitions.md.txt#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate<class... Fs>\nclass StaticFunctionAdaptor;\n```\n\n----------------------------------------\n\nTITLE: Adding Miscellaneous Files to IDE in CMake\nDESCRIPTION: Collects all header and C source files in the current directory and adds them to a custom target for IDE organization under the 'examples' folder.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/safe_numerics/example/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfile(GLOB misc_files \n  RELATIVE \"${CMAKE_CURRENT_SOURCE_DIR}\" \n  \"${CMAKE_CURRENT_SOURCE_DIR}/*.h\" \"${CMAKE_CURRENT_SOURCE_DIR}/*.c\"\n)\nadd_custom_target(miscellaneous SOURCES ${misc_files})\nset_target_properties(miscellaneous PROPERTIES FOLDER \"examples\")\n```\n\n----------------------------------------\n\nTITLE: Adding the Boost.QVM Interface Library\nDESCRIPTION: Adds an interface library named boost_qvm. It also creates an alias target named Boost::qvm that points to boost_qvm, allowing for easier referencing of the library in other parts of the project.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/qvm/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(boost_qvm INTERFACE)\nadd_library(Boost::qvm ALIAS boost_qvm)\n```\n\n----------------------------------------\n\nTITLE: Copyright and License Information for C++ Unicode Documentation\nDESCRIPTION: This snippet contains the copyright notice and license information for the Unicode recommendations and myths documentation. It specifies the Boost Software License version 1.0.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/doc/recommendations_and_myths.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n//\n//  Copyright (c) 2009-2011 Artyom Beilis (Tonkikh)\n//\n//  Distributed under the Boost Software License, Version 1.0. (See\n//  accompanying file LICENSE_1_0.txt or copy at\n//  http://www.boost.org/LICENSE_1_0.txt)\n//\n```\n\n----------------------------------------\n\nTITLE: Including empty metafunction header in C++\nDESCRIPTION: Shows the header file that needs to be included to use the empty metafunction in C++ code.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/empty.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/empty.hpp>\n```\n\n----------------------------------------\n\nTITLE: Linking Dependencies to Boost Detail Library\nDESCRIPTION: This snippet links several Boost libraries as dependencies to the Boost Detail library. Linking these libraries will ensure that any target using Boost Detail has access to the required Boost components.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/detail/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(boost_detail\n    INTERFACE\n        Boost::config\n        Boost::core\n        Boost::preprocessor\n        Boost::static_assert\n        Boost::type_traits\n)\n```\n\n----------------------------------------\n\nTITLE: Discovering and Setting Up Tests for All Subdirectories\nDESCRIPTION: Iterates through all child directories in the test folder, setting up pass tests for all platforms and fail tests for non-Windows platforms, maintaining a consistent naming structure based on the directory names.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/date/CMakeLists.txt#2025-04-22_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nfile( GLOB children RELATIVE \"${PROJECT_SOURCE_DIR}/${TEST_FOLDER}\" \"${PROJECT_SOURCE_DIR}/${TEST_FOLDER}/*\" )\nforeach( child ${children} )\n\tif( IS_DIRECTORY \"${PROJECT_SOURCE_DIR}/${TEST_FOLDER}/${child}\" )\n\t\tset( CUR_FOLDER \"${PROJECT_SOURCE_DIR}/${TEST_FOLDER}/${child}\" )\n\t\tadd_pass_tests( \"${CUR_FOLDER}/*.cpp\" ${child} )\n\t\tif( NOT WIN32 )\n\t\t\tadd_fail_tests( \"${CUR_FOLDER}/*.fail.cpp\" ${child} )\n\t\tendif( )\n\tendif( )\nendforeach( )\n```\n\n----------------------------------------\n\nTITLE: Installing concat-map with npm\nDESCRIPTION: Command for installing the concat-map package from npm (Node Package Manager) using the command line.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/js/node/node_modules/minimatch/node_modules/concat-map/README.markdown#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install concat-map\n```\n\n----------------------------------------\n\nTITLE: Declaring the equal_to Metafunction Template in C++\nDESCRIPTION: This snippet shows the template declaration for the equal_to metafunction. It takes two template parameters T1 and T2, and returns an unspecified type.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/equal_to.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      typename T1\n    , typename T2\n    >\nstruct equal_to\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Boost Endian Project\nDESCRIPTION: This snippet defines the Boost Endian project using the `project` command. It sets the project name to `boost_endian`, specifies the version using the `BOOST_SUPERPROJECT_VERSION` variable, and indicates that the project uses the CXX language.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/endian/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n\"project(boost_endian VERSION \\\"${BOOST_SUPERPROJECT_VERSION}\\\" LANGUAGES CXX)\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Implicit Function Adaptor in C++\nDESCRIPTION: Defines the 'implicit' struct template that creates an invoker object. This invoker uses type conversion to deduce the template parameter for the wrapped function object.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/implicit.hpp.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<template <class...> class F>\nstruct implicit\n{\n    template<class Pack>\n    struct invoker\n    {\n        Pack p;\n\n        constexpr invoker(Pack pp) BOOST_HOF_NOEXCEPT_CONSTRUCTIBLE(Pack, Pack&&)\n        : p(boost::hof::move(pp))\n        {}\n\n        template<class X, class=typename std::enable_if<detail::is_implicit_callable<F<X>, Pack, X>::value>::type>\n        constexpr operator X() const BOOST_HOF_NOEXCEPT(noexcept(p(F<X>())))\n        {\n            return p(F<X>());\n        }\n\n#if !(defined(__GNUC__) && !defined (__clang__) && __GNUC__ == 4 && __GNUC_MINOR__ < 7)\n        invoker (const invoker&) = delete;\n        invoker& operator= (const invoker&) = delete;\n\n    private:\n        friend struct implicit;\n        invoker (invoker&&) = default;\n#endif\n    };\n\n    struct make_invoker\n    {\n        template<class Pack>\n        constexpr invoker<Pack> operator()(Pack p) const BOOST_HOF_NOEXCEPT(noexcept(invoker<Pack>(boost::hof::move(p))))\n        {\n            return invoker<Pack>(boost::hof::move(p));\n        }\n\n    };\n\n    template<class... Ts>\n    constexpr auto operator()(Ts&&... xs) const \n    BOOST_HOF_RETURNS\n    (\n        BOOST_HOF_RETURNS_CONSTRUCT(make_invoker)()(boost::hof::pack_basic(BOOST_HOF_FORWARD(Ts)(xs)...))\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Outcome with Error and Exception Types\nDESCRIPTION: A constructor that enables implicit conversion of error and exception types with specific predicate conditions. Supports constexpr, trivial, and noexcept operations.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/basic_outcome/implicit_error_exception_converting_constructor.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nbasic_outcome(S &&, P &&)\n```\n\n----------------------------------------\n\nTITLE: Configuring V8 Link Directories in CMake for ArangoDB Tests\nDESCRIPTION: Sets up link directories for V8 JavaScript engine if it's enabled in the build configuration.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif (USE_V8)\n  foreach (LINK_DIR ${V8_LINK_DIRECTORIES})\n    link_directories(\"${LINK_DIR}\")\n  endforeach()\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Implementing Pack Structure with Decay in C++\nDESCRIPTION: Defines a pack_f structure that creates a pack with decayed types. It uses boost::hof::decay to remove references and cv-qualifiers from the packed types.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/pack.hpp.txt#2025-04-22_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\nstruct pack_f\n{\n    template<class... Ts>\n    constexpr auto operator()(Ts&&... xs) const BOOST_HOF_RETURNS\n    (\n        pack_basic_f()(boost::hof::decay(BOOST_HOF_FORWARD(Ts)(xs))...)\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Generating HTML Documentation with Sphinx\nDESCRIPTION: This snippet demonstrates how to generate HTML documentation using Sphinx.  The command uses the 'sphinx-build' tool to generate the HTML files from the reStructuredText source files in the 'doc/' directory, placing the output in the 'doc/html/' directory.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n\"sphinx-build -b html doc/ doc/html/\"\n```\n\n----------------------------------------\n\nTITLE: Basic Quaternion Operations and Transformations Output\nDESCRIPTION: Shows the output of various quaternion mathematical operations including basic arithmetic, trigonometric functions, exponential, and different coordinate system representations. The test demonstrates operations on the quaternion (1,2,3,4) with detailed calculations of norms, conjugates, and transcendental functions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/math/doc/quaternion/output_more.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nThe value of the quaternion represented in spherical form by rho = 2.82843 , theta = 0.785398 , phi1 = 0.785398 , phi2 = 0.785398 is (1,1,1.41421,2)\nThe value of the quaternion represented in semipolar form by rho = 2.82843 , alpha = 0.785398 , phi1 = 0.785398 , phi2 = 0.785398 is (1.41421,1.41421,1.41421,1.41421)\nThe value of the quaternion represented in multipolar form by rho1 = 1 , theta1 = 0 , rho2 = 2 , theta2 = 1.5708 is (1,0,-8.74228e-08,2)\nThe value of the quaternion represented in cylindrospherical form by t = 5 , radius = 1.41421 , longitude = 0.785398 , latitude = 1.0472 is (5,0.5,0.5,1.22474)\nThe value of the quaternion represented in cylindrical form by r = 1.41421 , angle = 0.785398 , h1 = 3 , h2 = 4 is (1,1,3,4)\n```\n\n----------------------------------------\n\nTITLE: Configuring TZ Data Files and Build Commands\nDESCRIPTION: Sets up timezone data files list and creates custom build commands for copying timezone data files to appropriate directories based on the build configuration.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nLIST(APPEND TZ_DATA_FILES\n  \"${CMAKE_CURRENT_SOURCE_DIR}/tzdata/africa\"\n  \"${CMAKE_CURRENT_SOURCE_DIR}/tzdata/antarctica\"\n  \"${CMAKE_CURRENT_SOURCE_DIR}/tzdata/asia\"\n  \"${CMAKE_CURRENT_SOURCE_DIR}/tzdata/australasia\"\n  \"${CMAKE_CURRENT_SOURCE_DIR}/tzdata/backward\"\n  \"${CMAKE_CURRENT_SOURCE_DIR}/tzdata/backzone\"\n  \"${CMAKE_CURRENT_SOURCE_DIR}/tzdata/calendars\"\n  \"${CMAKE_CURRENT_SOURCE_DIR}/tzdata/etcetera\"\n  \"${CMAKE_CURRENT_SOURCE_DIR}/tzdata/europe\"\n  \"${CMAKE_CURRENT_SOURCE_DIR}/tzdata/NEWS\"\n  \"${CMAKE_CURRENT_SOURCE_DIR}/tzdata/northamerica\"\n  \"${CMAKE_CURRENT_SOURCE_DIR}/tzdata/southamerica\"\n  \"${CMAKE_CURRENT_SOURCE_DIR}/tzdata/version\"\n  \"${CMAKE_CURRENT_SOURCE_DIR}/tzdata/windowsZones.xml\")\n\nset(TZ_DATA_FILES ${TZ_DATA_FILES} PARENT_SCOPE)\n\nadd_custom_target(tzdata)\n\nif (MSVC)\n  add_custom_command(\n    TARGET tzdata POST_BUILD\n    COMMAND ${CMAKE_COMMAND} -E make_directory ${CMAKE_BINARY_DIR}/bin/$<CONFIG>/tzdata\n    COMMAND ${CMAKE_COMMAND} -E make_directory ${CMAKE_BINARY_DIR}/tests/$<CONFIG>/tzdata\n    COMMAND ${CMAKE_COMMAND} -E copy ${TZ_DATA_FILES} ${CMAKE_BINARY_DIR}/bin/$<CONFIG>/tzdata\n    COMMAND ${CMAKE_COMMAND} -E copy ${TZ_DATA_FILES} ${CMAKE_BINARY_DIR}/tests/$<CONFIG>/tzdata)\nelse()\n  add_custom_command(\n    TARGET tzdata POST_BUILD\n    COMMAND ${CMAKE_COMMAND} -E make_directory ${CMAKE_BINARY_DIR}/bin/tzdata\n    COMMAND ${CMAKE_COMMAND} -E make_directory ${CMAKE_BINARY_DIR}/tests/tzdata\n    COMMAND ${CMAKE_COMMAND} -E copy ${TZ_DATA_FILES} ${CMAKE_BINARY_DIR}/bin/tzdata\n    COMMAND ${CMAKE_COMMAND} -E copy ${TZ_DATA_FILES} ${CMAKE_BINARY_DIR}/tests/tzdata)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Implementing Double Buffer Compression with LZ4 Streaming API in C\nDESCRIPTION: The provided diagram explains the use of a double buffer for handling input blocks and compressed data. The double buffer consists of two pages, allowing LZ4 to apply prefix and external dictionary dependency modes to enhance compression ratios. The diagram outlines the sequence of compression for blocks and how dependencies are managed. The decompression sequence follows in reverse order.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/lz4/examples/blockStreaming_doubleBuffer.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n        Double Buffer\n\n      Page#1    Page#2\n    +---------+---------+\n    | Block#1 |         |\n    +----+----+---------+\n         |\n         v\n      {Out#1}\n\n\n      Prefix Dependency\n         +---------+\n         |         |\n         v         |\n    +---------+----+----+\n    | Block#1 | Block#2 |\n    +---------+----+----+\n                   |\n                   v\n                {Out#2}\n\n\n   External Dictionary Mode\n         +---------+\n         |         |\n         |         v\n    +----+----+---------+\n    | Block#3 | Block#2 |\n    +----+----+---------+\n         |\n         v\n      {Out#3}\n\n\n      Prefix Dependency\n         +---------+\n         |         |\n         v         |\n    +---------+----+----+\n    | Block#3 | Block#4 |\n    +---------+----+----+\n                   |\n                   v\n                {Out#4}\n\n```\n\n----------------------------------------\n\nTITLE: Including the Identity Metafunction Header in C++\nDESCRIPTION: This code snippet shows how to include the header file for the 'identity' metafunction in a C++ program. This header is part of the Boost MPL library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/identity.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/identity.hpp>\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Coptic Script Character Ranges\nDESCRIPTION: Lists Unicode character ranges for the Coptic script, including letters, symbols, combinings marks, punctuation, and numbers. Used for writing Coptic, the latest stage of ancient Egyptian.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/spirit/workbench/unicode/Scripts.txt#2025-04-22_snippet_39\n\nLANGUAGE: unicode\nCODE:\n```\n03E2..03EF    ; Coptic # L&  [14] COPTIC CAPITAL LETTER SHEI..COPTIC SMALL LETTER DEI\n2C80..2CE4    ; Coptic # L& [101] COPTIC CAPITAL LETTER ALFA..COPTIC SYMBOL KAI\n2CE5..2CEA    ; Coptic # So   [6] COPTIC SYMBOL MI RO..COPTIC SYMBOL SHIMA SIMA\n2CEB..2CEE    ; Coptic # L&   [4] COPTIC CAPITAL LETTER CRYPTOGRAMMIC SHEI..COPTIC SMALL LETTER CRYPTOGRAMMIC GANGIA\n2CEF..2CF1    ; Coptic # Mn   [3] COPTIC COMBINING NI ABOVE..COPTIC COMBINING SPIRITUS LENIS\n2CF9..2CFC    ; Coptic # Po   [4] COPTIC OLD NUBIAN FULL STOP..COPTIC OLD NUBIAN VERSE DIVIDER\n2CFD          ; Coptic # No       COPTIC FRACTION ONE HALF\n2CFE..2CFF    ; Coptic # Po   [2] COPTIC FULL STOP..COPTIC MORPHOLOGICAL DIVIDER\n\n# Total code points: 135\n```\n\n----------------------------------------\n\nTITLE: Fixing MPL Source Files Explicitly\nDESCRIPTION: Command to explicitly fix header comments in Boost MPL source files that are needed for pre-processing, addressing issues that might cause pre-processing to fail.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/preprocessed/README.txt#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npython fix_boost_mpl_preprocess.py <path-to-boost-sourcedir>\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for Boost Pool Library\nDESCRIPTION: This code snippet initializes a CMake project for the Boost Pool library, specifying its version and the required CMake version. It defines the library as an INTERFACE library and includes the necessary dependencies for building with Boost components.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/pool/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.20)\nproject(boost_pool VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(boost_pool INTERFACE)\nadd_library(Boost::pool ALIAS boost_pool)\n```\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(boost_pool INTERFACE include)\n```\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(boost_pool\n    INTERFACE\n        Boost::assert\n        Boost::config\n        Boost::integer\n        Boost::throw_exception\n        Boost::type_traits\n        Boost::winapi\n)\n```\n\n----------------------------------------\n\nTITLE: Including integral_c Header in C++\nDESCRIPTION: The header file required to use the integral_c template in a C++ program.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/integral_c.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/integral_c.hpp>\n```\n\n----------------------------------------\n\nTITLE: Defining Implicit Error and Exception Copy Constructor in C++\nDESCRIPTION: This code snippet defines an implicit copy constructor for failure types in C++ that enables copying from one type of error/exception to another when a compatibility predicate holds true. The constructor's complexity and properties are specified to ensure compatibility with existing error and exception types.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/basic_outcome/implicit_failure_error_exception_copy_constructor.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n+++\ntitle = \"`basic_outcome(const failure_type<EC, EP> &)`\"\ndescription = \"Implicit error-and-exception-from-failure-type-sugar copy constructor. Available if `predicate::enable_compatible_conversion<void, EC, EP, void>` is true. Constexpr, triviality and noexcept propagating.\"\ncategories = [\"constructors\", \"implicit-constructors\", \"tagged-constructors\"]\nweight = 536\n+++\n\nImplicit error-and-exception-from-failure-type-sugar copy constructor used to disambiguate the construction of the error + exception types.\nCalls {{% api \"void on_outcome_copy_construction(T *, U &&, V &&) noexcept\" %}} with `this`, `const failure_type<EC> &` and `const failure_type<EP> &`.\n\n*Requires*: `predicate::enable_compatible_conversion<void, EC, EP, void>` is true.\n\n*Complexity*: Same as for the `error_type` and `exception_type` constructors which accept `EC` and `EP`. Constexpr, triviality and noexcept of underlying operations is propagated.\n```\n\n----------------------------------------\n\nTITLE: Inserting Hugo Children Shortcode\nDESCRIPTION: Hugo shortcode that generates a list of child pages with descriptions, limited to a depth of 2 levels in the documentation hierarchy.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/macros/_index.md#2025-04-22_snippet_1\n\nLANGUAGE: hugo\nCODE:\n```\n{{% children description=\"true\" depth=\"2\" %}}\n```\n\n----------------------------------------\n\nTITLE: R-MAT Graph Generator Default Constructor\nDESCRIPTION: This code snippet shows the default constructor for the `scalable_rmat_iterator`. It constructs a past-the-end iterator, which is commonly used to mark the end of a sequence in iterator-based algorithms.  No specific dependencies are applicable for this constructor.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/scalable_rmat_generator.rst#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\n  scalable_rmat_iterator();\n```\n\n----------------------------------------\n\nTITLE: Using Accessor Methods in Binary Ufunc\nDESCRIPTION: The `call` method takes a functor and input/output objects to apply the C++ function, while the `make` method returns a Python function object. Requires specifying types for functor and arguments.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/doc/numpy/reference/binary_ufunc.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <typename TBinaryFunctor,\n          typename TArgument1=typename TBinaryFunctor::first_argument_type,\n          typename TArgument2=typename TBinaryFunctor::second_argument_type,\n          typename TResult=typename TBinaryFunctor::result_type>\nstatic object call(TBinaryFunctor & self, \n                   object const & input, \n                   object const & output);\n```\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <typename TBinaryFunctor,\n          typename TArgument1=typename TBinaryFunctor::first_argument_type,\n          typename TArgument2=typename TBinaryFunctor::second_argument_type,\n          typename TResult=typename TBinaryFunctor::result_type>\nstatic object make();\n```\n\n----------------------------------------\n\nTITLE: Including the 'next' Metafunction Header in C++\nDESCRIPTION: This code snippet shows how to include the header file containing the 'next' metafunction definition in a C++ program.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/next.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/next_prior.hpp>\n```\n\n----------------------------------------\n\nTITLE: Numeric Array Data for ArangoDB Test Input in JavaScript\nDESCRIPTION: This appears to be test data formatted as arrays of numbers for ArangoDB testing. The first line contains '1', the second line contains '9 72', and the remaining lines contain pairs of negative numbers, possibly representing coordinates or test parameters.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/polygon/example/input_data/primary/primary_056.txt#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n1\n9 72\n2\n-2 0 -1 -50\n-1 -50 0 -99\n```\n\n----------------------------------------\n\nTITLE: Namespace Configuration Macros\nDESCRIPTION: Macros for namespace configuration and C++ module integration in Outcome v2\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/macros/version.md#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nBOOST_OUTCOME_V2 <tokens>\nBOOST_OUTCOME_V2_NAMESPACE <identifier>\nBOOST_OUTCOME_V2_NAMESPACE_BEGIN <keywords and identifiers>\nBOOST_OUTCOME_V2_NAMESPACE_EXPORT_BEGIN <keywords and identifiers>\nBOOST_OUTCOME_V2_NAMESPACE_END <keywords and identifiers>\n```\n\n----------------------------------------\n\nTITLE: Defining BOOST_MPL_LIMIT_LIST_SIZE Macro in C++\nDESCRIPTION: Default definition of the BOOST_MPL_LIMIT_LIST_SIZE macro if not already defined by the user. This macro controls the maximum number of elements in MPL lists.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/LIMIT_LIST_SIZE.rst#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n#if !defined(BOOST_MPL_LIMIT_LIST_SIZE)\n#   define BOOST_MPL_LIMIT_LIST_SIZE \\\n            |idic| \\\n/\\*\\*/\n#endif\n```\n\n----------------------------------------\n\nTITLE: Throwing Exception on Incorrect Wide Error Observation in C++\nDESCRIPTION: This code snippet demonstrates the behavior of incorrect wide error observation when using the `exception_ptr_rethrow` policy. It throws a `bad_result_access` exception with the message \"no error\".\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/policies/exception_ptr_rethrow_result.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_OUTCOME_THROW_EXCEPTION(bad_result_access(\"no error\"));\n```\n\n----------------------------------------\n\nTITLE: Boost.Locale Documentation Header\nDESCRIPTION: Copyright notice and file metadata for Boost.Locale documentation, including vim editor settings and license information.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/doc/using_boost_locale.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n//\n//  Copyright (c) 2009-2011 Artyom Beilis (Tonkikh)\n//\n//  Distributed under the Boost Software License, Version 1.0. (See\n//  accompanying file LICENSE_1_0.txt or copy at\n//  http://www.boost.org/LICENSE_1_0.txt)\n//\n\n// vim: tabstop=4 expandtab shiftwidth=4 softtabstop=4 filetype=cpp.doxygen\n```\n\n----------------------------------------\n\nTITLE: Defining Markdown Reference Link for CI Badge\nDESCRIPTION: This code snippet defines a reference-style link in Markdown for the CI badge image. It associates the 'badge.CI' reference with the actual URL of the GitHub Actions workflow badge.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/callable_traits/README.md#2025-04-22_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n[badge.CI]: https://github.com/boostorg/callable_traits/actions/workflows/ci.yml/badge.svg\n```\n\n----------------------------------------\n\nTITLE: Project Definition\nDESCRIPTION: This command defines the project name, supported languages, and description. It specifies that the project is named \"Boost.GIL\", uses CXX (C++) as the language, and provides a description of the library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n\"project(Boost.GIL\n  LANGUAGES CXX\n  DESCRIPTION \\\"Boost.GIL - Generic Image Library | Requires C++11 since Boost 1.68\\\")\"\n```\n\n----------------------------------------\n\nTITLE: Using BOOST_OUTCOME_ENABLE_LEGACY_SUPPORT_FOR Macro for Backward Compatibility in C++\nDESCRIPTION: This macro allows for enabling compatibility with older naming and features when using newer versions of Outcome. It helps maintain backward compatibility when upgrading to newer Outcome versions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/changelog/_index.md#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_OUTCOME_ENABLE_LEGACY_SUPPORT_FOR\n```\n\n----------------------------------------\n\nTITLE: Observing Stored Exception in C++\nDESCRIPTION: This method provides a narrow contract const lvalue reference observer of the stored exception. It invokes NoValuePolicy::narrow_exception_check() before returning the reference to the exception. It's always available, has complexity dependent on NoValuePolicy::narrow_exception_check(), and never throws an exception.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/basic_outcome/assume_exception_lvalue_const.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nconst exception_type &assume_exception() const & noexcept\n```\n\n----------------------------------------\n\nTITLE: Repeat Constant Decorator Implementation\nDESCRIPTION: Decorator that handles compile-time integral constants for repeat counts. Uses the repeater template to perform the function application.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/repeat.hpp.txt#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nstruct repeat_constant_decorator\n{\n    template<class Integral, class F, class... Ts>\n    constexpr auto operator()(Integral, const F& f, Ts&&... xs) const BOOST_HOF_RETURNS\n    (\n        detail::repeater<Integral::type::value>()\n        (\n            f, \n            BOOST_HOF_FORWARD(Ts)(xs)...\n        )\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Including reverse_copy Header in C++\nDESCRIPTION: Specifies the header file required to use the reverse_copy algorithm in C++.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/reverse_copy.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/copy.hpp>\n```\n\n----------------------------------------\n\nTITLE: Creating Executable for iResearch Tests\nDESCRIPTION: This snippet creates an executable target named 'arangodbtests-iresearch' using the sources defined earlier. It configures this target to be excluded from all builds by default.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/IResearch/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(\\\n  arangodbtests-iresearch\\\n  ${ARANGODB_IRESEARCH_TESTS_SOURCES}\\\n)\n```\n\n----------------------------------------\n\nTITLE: Example of External Dispatcher Implementation in C++\nDESCRIPTION: Mentions an example implementation of an external dispatcher used for sending messages between actors on different servers. This basic example is provided in the MultiRuntimeTest.cpp file.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/lib/Actor/README.md#2025-04-22_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nMultiRuntimeTest.cpp\n```\n\n----------------------------------------\n\nTITLE: Printing NumPy Array and dtype Information\nDESCRIPTION: This snippet shows how to print a NumPy array and its dtype information in C++ using Boost.Python.  It converts the array and dtype to Python strings using `p::str`, then extracts the string as a C++ character array for printing to standard output. This requires the array `a` to be previously defined.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/doc/numpy/tutorial/dtype.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\n  std::cout << \"Original array:\\n\" << p::extract<char const *>(p::str(a)) << std::endl;\n\n  std::cout << \"Datatype is:\\n\" << p::extract<char const *>(p::str(a.get_dtype())) << std::endl ;\n```\n\n----------------------------------------\n\nTITLE: Copyright Declaration in reStructuredText\nDESCRIPTION: Defines a copyright notice for content created by Aleksey Gurtovoy and David Abrahams, distributed under the Boost Software License. Includes the license date range and a reference to the full license text.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/Macros-Configuration.rst#2025-04-22_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. copyright:: Copyright �  2001-2009 Aleksey Gurtovoy and David Abrahams\n   Distributed under the Boost Software License, Version 1.0. (See accompanying\n   file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)\n```\n\n----------------------------------------\n\nTITLE: Defining negate Metafunction Template in C++\nDESCRIPTION: This code snippet defines the template structure for the negate metafunction. It takes a single template parameter T and defines an unspecified type alias.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/negate.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      typename T\n    >\nstruct negate\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Writability Trait Logic Example - C++\nDESCRIPTION: Pseudocode showing the logic for determining if an iterator is writable based on its category and reference type\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/issues.rst#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nif (cat is convertible to output_iterator_tag)\n    return true;\nelse if (cat is convertible to forward_iterator_tag\n         and iterator_traits<Iterator>::reference is a \n             mutable reference)\n    return true;\nelse\n    return false;\n```\n\n----------------------------------------\n\nTITLE: Managing Exception Pointer Reference Counting - C++\nDESCRIPTION: This code snippet discusses the reference counting behavior of 'exception_ptr' within the glibc library, highlighting its lack of instrumentation by Thread Sanitizer, and the resultant need to disregard race conditions that arise in destructors of exceptions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tsan_arangodb_suppressions.txt#2025-04-22_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\n// the reference counting of exception_ptr is part of the prebuilt glibc and is\n// therefore not instrumented by TSan, so TSan is not aware of the synchronization\n// that happens there. That means we have to ignore all races in destructors of\n// exceptions as a result of a __exception_ptr release that causes the refcnt to\n// drop to zero.\nrace:std::__exception_ptr\n```\n\n----------------------------------------\n\nTITLE: Success Type Equality Operator Implementation in C++\nDESCRIPTION: Implements equality comparison between a result and success_type. Returns true if the result is successful and values compare equal. For void types, behaves like has_value().\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/basic_result/inequality_success_type.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nbool operator==(const success_type<A> &) const\n```\n\n----------------------------------------\n\nTITLE: License Header and Compiler Support Documentation for Boost.Locale\nDESCRIPTION: Copyright notice and documentation for Boost.Locale library compatibility across different compilers and platforms. Lists supported compiler versions and operating systems, along with known implementation issues.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/doc/tested_compilers_and_paltforms.txt#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n//\n//  Copyright (c) 2009-2011 Artyom Beilis (Tonkikh)\n//\n//  Distributed under the Boost Software License, Version 1.0. (See\n//  accompanying file LICENSE_1_0.txt or copy at\n//  http://www.boost.org/LICENSE_1_0.txt)\n//\n\n// vim: tabstop=4 expandtab shiftwidth=4 softtabstop=4 filetype=cpp.doxygen\n\n/*!\n\\page tested_compilers_and_paltforms Tested Compilers and Platforms\n\nFollowing compilers are tested and known to work with Boost.Locale\n\n- GCC 3.4 to 4.6\n- Microsoft Visual Studio 2005 to 2010\n- Intel 10 to 12\n- Clang 2.8\n- Path Scale 4\n- Visual Age 10.1\n\nFollowing operating systems are tested with Boost.Locale\n\n- Linux\n- Windows\n- FreeBSD\n- Solaris\n- Darwin\n- Cygwin\n- AIX\n\n\\section tested_compilers_and_paltforms_issues Known Issues\n\n-   Path Scale and MSVC 9 with STLPort has some test faults\n    regarding invalid UTF-8 sequences in wide file I/O.\n-   The native iconv library on AIX platform does not support\n    required character encodings, thus either ICU or GNU iconv\n    library should be used.\n-   Mingw/GCC version 4.5 and above is required to support shared\n    builds of Boost.Locale - versions that allow dynamic link\n    with libstdc++ and libgcc. There is no problems with Cygwin's\n    gcc-4.3 that provides shared versions of runtime libraries.\n-   In some cases the build system fails to link with iconv library\n    on Darwin system, in such cases explicit path to the\n    location of iconv library should be given using -sICONV_PATH\n    build option.\n\n*/\n```\n\n----------------------------------------\n\nTITLE: Character Distribution Analysis Reference\nDESCRIPTION: References the chars.py file that contains character distribution data derived from Boost 1.61.0 header files. This data is used to generate realistic test cases for benchmarking.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/metaparse/tools/benchmark/README.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nchars.py\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents in reStructuredText for ArangoDB Documentation\nDESCRIPTION: This snippet defines a table of contents for the ArangoDB project documentation using reStructuredText syntax. It includes links to 'definitions' and 'concepts' pages with a maximum depth of 2 levels.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/src/overview.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n    :maxdepth: 2\n\n    definitions\n    concepts\n```\n\n----------------------------------------\n\nTITLE: Installation and Execution Steps for Doxygen and QuickBook Integration\nDESCRIPTION: This snippet provides a step-by-step guide for setting up Doxygen and QuickBook to generate documentation. It highlights dependencies and execution steps to prepare the documentation tools for use.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/geometry/doc/readme.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n1) install Doxygen\n2) install QuickBook using http://www.boost.org/doc/libs/release/doc/html/quickbook/install.html\n3) run b2 in src/docutils/tools/doxygen_xml2qbk to build doxygen_xml2qbk executable\n4) put binary in your PATH, e.g. in /usr/local/bin/doxygen_xml2qbk\n5) execute python file \"make_qbk.py\" (calling doxygen, doxygen_xml2qbk, bjam)\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost Statechart Library in CMake\nDESCRIPTION: Sets up the Boost Statechart library as an interface library, defines its include directories, and specifies its dependencies on other Boost libraries. It also conditionally includes tests if testing is enabled.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/statechart/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.16)\n\nproject(boost_statechart VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n\nadd_library(boost_statechart INTERFACE)\nadd_library(Boost::statechart ALIAS boost_statechart)\n\ntarget_include_directories(boost_statechart INTERFACE include)\n\ntarget_link_libraries(boost_statechart\n  INTERFACE\n    Boost::assert\n    Boost::bind\n    Boost::config\n    Boost::conversion\n    Boost::core\n    Boost::detail\n    Boost::function\n    Boost::mpl\n    Boost::smart_ptr\n    Boost::static_assert\n    Boost::thread\n    Boost::type_traits\n)\n\nif(BUILD_TESTING AND EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/test/CMakeLists.txt\")\n\n  add_subdirectory(test)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for Boost Random Library\nDESCRIPTION: This CMake configuration file sets up the Boost Random library as part of a larger project. It requires CMake version 3.5 to 3.16 and sets the project to use the CXX language. The file adds the Boost Random library, sets its include directories and dependencies, and defines compile-time flags based on whether the library is being built shared or static. If testing is enabled and a test CMake file exists, it adds the test subdirectory. There are no special inputs or outputs for this configuration, and it primarily affects how the library is compiled and linked.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/random/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.16)\n\nproject(boost_random VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n\nadd_library(boost_random\n  src/random_device.cpp\n)\n\nadd_library(Boost::random ALIAS boost_random)\n\ntarget_include_directories(boost_random PUBLIC include)\n\ntarget_link_libraries(boost_random\n  PUBLIC\n    Boost::array\n    Boost::assert\n    Boost::config\n    Boost::core\n    Boost::dynamic_bitset\n    Boost::integer\n    Boost::io\n    Boost::range\n    Boost::static_assert\n    Boost::system\n    Boost::throw_exception\n    Boost::type_traits\n    Boost::utility\n)\n\ntarget_compile_definitions(boost_random\n  PUBLIC BOOST_RANDOM_NO_LIB\n  # Source files already define BOOST_RANDOM_SOURCE\n  # PRIVATE BOOST_RANDOM_SOURCE\n)\n\nif(BUILD_SHARED_LIBS)\n  target_compile_definitions(boost_random PUBLIC BOOST_RANDOM_DYN_LINK)\nelse()\n  target_compile_definitions(boost_random PUBLIC BOOST_RANDOM_STATIC_LINK)\nendif()\n\nif(BUILD_TESTING AND EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/test/CMakeLists.txt\")\n\n  add_subdirectory(test)\n\nendif()\n\n```\n\n----------------------------------------\n\nTITLE: Requiring and Using Module Functions in JavaScript\nDESCRIPTION: This snippet demonstrates requiring and leveraging an exported function from another module. Specifically, 'increment.js' imports 'add' from 'math.js' and utilizes it to define an 'increment' function that increases its input by one.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/js/common/test-data/modules/commonjs/docs/specs/modules/1.0.html.markdown#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar add = require('math').add;\n\nexports.increment = function(val) {\n    return add(val, 1);\n};\n```\n\n----------------------------------------\n\nTITLE: Linking Dependencies for Arango Metrics Base\nDESCRIPTION: This snippet links the `arango_metrics_base` library with its required dependencies. These dependencies provide necessary functionalities for string manipulation, error handling, and basic utilities.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/Metrics/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(arango_metrics_base\n  PUBLIC\n  absl::strings\n  arango_basic_errors\n  arango_basic_utils\n)\n```\n\n----------------------------------------\n\nTITLE: Defining push_back Metafunction Template in C++\nDESCRIPTION: This code snippet defines the template structure for the push_back metafunction. It takes two template parameters: Sequence and T. The metafunction returns an unspecified type.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/push_back.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      typename Sequence\n    , typename T\n    >\nstruct push_back\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Clearing In-Edges in Adjacency List (C++)\nDESCRIPTION: Removes all in-edges from a specified vertex in an adjacency list. The vertex remains in the vertex set. This operation is only applicable to bidirectional graphs.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/distributed_adjacency_list.rst#2025-04-22_snippet_22\n\nLANGUAGE: C++\nCODE:\n```\nvoid clear_in_edges(vertex_descriptor u, adjacency_list& g);\n```\n\n----------------------------------------\n\nTITLE: Using the copy algorithm with back_inserter in C++\nDESCRIPTION: Demonstrates how to use the copy algorithm to copy a range of integers and insert them at the back of an existing vector.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/copy.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntypedef vector_c<int,0,1,2,3,4,5,6,7,8,9> numbers;\ntypedef copy<\n      range_c<int,10,20>\n    , back_inserter< numbers >\n    >::type result;\n\nBOOST_MPL_ASSERT_RELATION( size<result>::value, ==, 20 );\nBOOST_MPL_ASSERT(( equal< result,range_c<int,0,20> > ));\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost.Iostreams Library Properties in CMake\nDESCRIPTION: Sets up include directories, linked libraries, and compile definitions for the Boost.Iostreams library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iostreams/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(Boost::iostreams ALIAS boost_iostreams)\n\ntarget_include_directories(boost_iostreams PUBLIC include)\n\ntarget_link_libraries(boost_iostreams\n  PUBLIC\n    Boost::assert\n    Boost::config\n    Boost::core\n    Boost::detail\n    Boost::function\n    Boost::integer\n    Boost::iterator\n    Boost::mpl\n    Boost::preprocessor\n    Boost::random\n    Boost::range\n    Boost::regex\n    Boost::smart_ptr\n    Boost::static_assert\n    Boost::throw_exception\n    Boost::type_traits\n    Boost::utility\n  PRIVATE\n    Boost::numeric_conversion\n)\n\ntarget_compile_definitions(boost_iostreams\n  PUBLIC BOOST_IOSTREAMS_NO_LIB\n  # Source files already define BOOST_IOSTREAMS_SOURCE\n  # PRIVATE BOOST_IOSTREAMS_SOURCE\n)\n\nif(BUILD_SHARED_LIBS)\n  target_compile_definitions(boost_iostreams PUBLIC BOOST_IOSTREAMS_DYN_LINK)\nelse()\n  target_compile_definitions(boost_iostreams PUBLIC BOOST_IOSTREAMS_STATIC_LINK)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Error Observer Method Declaration in C++\nDESCRIPTION: Declares a const rvalue reference method for observing stored errors with narrow contract semantics. The method invokes NoValuePolicy::narrow_error_check() before returning the error reference. Always available and never throws exceptions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/basic_result/assume_error_rvalue_const.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nconst error_type &&assume_error() const && noexcept\n```\n\n----------------------------------------\n\nTITLE: Defining Boost Assign Library Target\nDESCRIPTION: Creates an interface library target for Boost Assign and sets up an alias for it.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/assign/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(boost_assign INTERFACE)\nadd_library(Boost::assign ALIAS boost_assign)\n\ntarget_include_directories(boost_assign INTERFACE include)\n```\n\n----------------------------------------\n\nTITLE: Defining Value Category Helper Functions in C++\nDESCRIPTION: Example of helper functions to return std::bitset objects with different value categories (rvalue, lvalue, const) for testing the Boost Parameter Library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_49\n\nLANGUAGE: cpp\nCODE:\n```\n    template <std::size_t N>\n    |std_bitset|_\\<N + 1> rvalue_bitset()\n    {\n        return |std_bitset|_\\<N + 1>();\n    }\n\n    template <std::size_t N>\n    |std_bitset|_\\<N + 1> const rvalue_const_bitset()\n    {\n        return |std_bitset|_\\<N + 1>();\n    }\n\n    template <std::size_t N>\n    |std_bitset|_\\<N + 1>& lvalue_bitset()\n    {\n        static |std_bitset|_\\<N + 1> lset = |std_bitset|_\\<N + 1>();\n        return lset;\n    }\n\n    template <std::size_t N>\n    |std_bitset|_\\<N + 1> const& lvalue_const_bitset()\n    {\n        static |std_bitset|_\\<N + 1> const clset = |std_bitset|_\\<N + 1>();\n        return clset;\n    }\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding Test Subdirectory\nDESCRIPTION: Adds the test subdirectory if testing is enabled and the test CMakeLists.txt file exists.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/assign/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(BUILD_TESTING AND EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/test/CMakeLists.txt\")\n\n  add_subdirectory(test)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost Parameter Python Library with CMake\nDESCRIPTION: This CMake script is used to set up the Boost Parameter Python library. It specifies the minimum CMake version required, defines the project, and sets up library aliases and dependencies. Key dependencies include Boost MPL, Parameter, Preprocessor, and Python. It also provides testing configurations when a test directory is available.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter_python/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.16)\n\nproject(boost_parameter_python VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n\nadd_library(boost_parameter_python INTERFACE)\nadd_library(Boost::parameter_python ALIAS boost_parameter_python)\n\ntarget_include_directories(boost_parameter_python INTERFACE include)\n\ntarget_link_libraries(boost_parameter_python\n  INTERFACE\n    Boost::mpl\n    Boost::parameter\n    Boost::preprocessor\n    Boost::python\n)\n\nif(BUILD_TESTING AND EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/test/CMakeLists.txt\")\n\n  add_subdirectory(test)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Constructor Hook for Basic Outcome in C++\nDESCRIPTION: Static hook method invoked during converting copy construction of basic_outcome. Takes three parameters and provides no-throw guarantee. Available in Outcome v2.2.0 and later.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/policies/base/on_outcome_copy_construction2.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nstatic void on_outcome_copy_construction(T *, U &&, V &&) noexcept\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project for Boost Math\nDESCRIPTION: Sets up the basic CMake project configuration including minimum version requirements and project name/version.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/math/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.16)\n\nproject(boost_math VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Linking Dependencies\nDESCRIPTION: This snippet specifies the libraries that 'boost_function_types' depends on. These libraries are linked as interface dependencies, meaning users of 'boost_function_types' will automatically link against them as well.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/function_types/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries( boost_function_types\n    INTERFACE\n        Boost::config\n        Boost::core\n        Boost::detail\n        Boost::mpl\n        Boost::preprocessor\n        Boost::type_traits\n)\n```\n\n----------------------------------------\n\nTITLE: Including reverse_replace header in C++\nDESCRIPTION: Header file inclusion for using the reverse_replace algorithm in C++ code.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/reverse_replace.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/replace.hpp>\n```\n\n----------------------------------------\n\nTITLE: Implicit Value Type Constructor Implementation\nDESCRIPTION: A constructor that allows converting between value types with compile-time predicate checks. Ensures type safety and preserves constructor properties like constexpr, triviality, and noexcept.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/basic_outcome/implicit_value_converting_constructor.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nbasic_outcome(R &&) requires predicate::enable_value_converting_constructor<R>\n```\n\n----------------------------------------\n\nTITLE: Building libunwind for PowerPC64 with Altivec Support\nDESCRIPTION: Configuration command for building libunwind on PowerPC64 with Altivec vector register support. Adds the maltivec flag to enable vector operations.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/libunwind/v1.7.2/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ ./configure CFLAGS=\"-g -O2 -m64 -maltivec\" CXXFLAGS=\"-g -O2 -m64 -maltivec\"\n```\n\n----------------------------------------\n\nTITLE: Matrix Data in Plain Text Format\nDESCRIPTION: A 4x4 numeric matrix with row-wise data representation. The first line indicates 0, the second line shows 4, followed by four rows of four integers each. Values range from -34 to 47.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/polygon/example/input_data/random/random_008.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n0\n4\n-34 7 -21 13\n-9 37 39 10\n7 21 26 -18\n8 45 47 22\n```\n\n----------------------------------------\n\nTITLE: Implementing Random Access Iterator Comparison in C++\nDESCRIPTION: This code snippet demonstrates how to implement the '<' operator for Random Access Traversal iterators using iterator subtraction.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/RandomAccessTraversal.rst#2025-04-22_snippet_6\n\nLANGUAGE: C++\nCODE:\n```\nb - a > 0\n```\n\n----------------------------------------\n\nTITLE: Configuring Graph Generation Settings in Doxygen\nDESCRIPTION: Comprehensive configuration settings for Doxygen's graph generation capabilities, including caller graphs, hierarchy visualization, directory dependencies, and image format settings. Includes options for DOT tool integration, node limits, graph depth, and various visualization parameters.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/sort/doc/doxygen/sort_doxyfile.txt#2025-04-22_snippet_64\n\nLANGUAGE: doxygen\nCODE:\n```\nCALLER_GRAPH           = NO\nGRAPHICAL_HIERARCHY    = YES\nDIRECTORY_GRAPH        = YES\nDOT_IMAGE_FORMAT       = png\nINTERACTIVE_SVG        = NO\nDOT_PATH               = \nDOTFILE_DIRS           = \nMSCFILE_DIRS           = \nDIAFILE_DIRS           = \nPLANTUML_JAR_PATH      = \nPLANTUML_INCLUDE_PATH  = \nDOT_GRAPH_MAX_NODES    = 50\nMAX_DOT_GRAPH_DEPTH    = 0\nDOT_TRANSPARENT        = NO\nDOT_MULTI_TARGETS      = NO\nGENERATE_LEGEND        = YES\nDOT_CLEANUP            = YES\n```\n\n----------------------------------------\n\nTITLE: Iterator Helper Header Synopsis in C++\nDESCRIPTION: Core declarations for the iterator helper components including the iterator_core_access class and template declarations. This code defines the basic structure for iterator facades and adaptors.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/facade-and-adaptor.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nstruct use_default;\n\nstruct iterator_core_access { /* implementation detail */ };\n\ntemplate <\n    class Derived\n  , class Value\n  , class CategoryOrTraversal\n```\n\n----------------------------------------\n\nTITLE: Finding and Setting Boost Dependency\nDESCRIPTION: This section handles the Boost library dependency. It first checks if `BOOST_ROOT` is defined; if not, it tries to locate Boost in the current source tree or a stage directory. Then it uses `find_package` to locate Boost with the `filesystem` component, requiring version 1.72.0 or later.  Finally, it sets the include and library directories and links the Boost::filesystem library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/CMakeLists.txt#2025-04-22_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\n\"if(NOT DEFINED BOOST_ROOT AND NOT DEFINED ENV{BOOST_ROOT})\n  message(STATUS \\\"Boost.GIL: Looking for Boost from current source tree and libraries from stage.\\\")\n  message(STATUS \\\"Boost.GIL: Disable stage look-up with passing -DBOOST_ROOT=/path/to/your/boost.\\\")\n  get_filename_component(_boost_root ../../ ABSOLUTE)\n  if(EXISTS ${_boost_root}/boost-build.jam)\n    set(BOOST_ROOT ${_boost_root})\n    message(STATUS \\\"Boost.GIL: Using Boost libraries from stage directory in BOOST_ROOT=${BOOST_ROOT}\\\")\n  endif()\nendif()\n\nset(Boost_DETAILED_FAILURE_MSG ON)\nif(\\\"${CMAKE_CXX_COMPILER_ID}\\\" STREQUAL \\\"MSVC\\\")\n  set(Boost_USE_STATIC_LIBS ON)\n  set(Boost_USE_STATIC_RUNTIME OFF)\nendif()\n\nfind_package(Boost 1.72.0 REQUIRED COMPONENTS filesystem)\nmessage(STATUS \\\"Boost.GIL: Using Boost_INCLUDE_DIRS=${Boost_INCLUDE_DIRS}\\\")\nmessage(STATUS \\\"Boost.GIL: Using Boost_LIBRARY_DIRS=${Boost_LIBRARY_DIRS}\\\")\n\ntarget_link_libraries(gil_dependencies INTERFACE Boost::filesystem)\n\nif(\\\"${CMAKE_CXX_COMPILER_ID}\\\" STREQUAL \\\"MSVC\\\")\n  target_link_libraries(gil_dependencies INTERFACE Boost::disable_autolinking)\nendif()\n\ntarget_compile_definitions(gil_dependencies\n  INTERFACE\n    $<$<NOT:$<CXX_COMPILER_ID:MSVC>>:BOOST_TEST_DYN_LINK>)\"\n```\n\n----------------------------------------\n\nTITLE: Creating Virtual Mandelbrot View in C++\nDESCRIPTION: Demonstrates how to create a virtual 2D image view of the Mandelbrot set using GIL's virtual_2d_locator.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/tutorial/gradient.rst.txt#2025-04-22_snippet_17\n\nLANGUAGE: cpp\nCODE:\n```\ntypedef mandelbrot_fn::point_t point_t;\ntypedef virtual_2d_locator<mandelbrot_fn,false> locator_t;\ntypedef image_view<locator_t> my_virt_view_t;\n\npoint_t dims(200,200);\n\n// Construct a Mandelbrot view with a locator, taking top-left corner (0,0) and step (1,1)\nmy_virt_view_t mandel(dims, locator_t(point_t(0,0), point_t(1,1), mandelbrot_fn(dims)));\n```\n\n----------------------------------------\n\nTITLE: Numeric Data Structure for ArangoDB\nDESCRIPTION: This snippet represents a structured set of numeric data. The first line contains a single number, followed by three lines each containing two space-separated integers. This format may be used for specific configuration or testing scenarios in the ArangoDB project.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/polygon/example/input_data/primary/primary_010.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n3\n0 0\n2005 2005\n10025 10025\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Properties for Mathematical Symbols\nDESCRIPTION: This snippet defines Unicode properties for various mathematical symbols in the Common script, including bold, italic, and script variations of letters and numbers.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/spirit/workbench/unicode/Scripts.txt#2025-04-22_snippet_5\n\nLANGUAGE: Unicode\nCODE:\n```\n1D400..1D454  ; Common # L&  [85] MATHEMATICAL BOLD CAPITAL A..MATHEMATICAL ITALIC SMALL G\n1D456..1D49C  ; Common # L&  [71] MATHEMATICAL ITALIC SMALL I..MATHEMATICAL SCRIPT CAPITAL A\n1D49E..1D49F  ; Common # L&   [2] MATHEMATICAL SCRIPT CAPITAL C..MATHEMATICAL SCRIPT CAPITAL D\n1D4A2         ; Common # L&       MATHEMATICAL SCRIPT CAPITAL G\n1D4A5..1D4A6  ; Common # L&   [2] MATHEMATICAL SCRIPT CAPITAL J..MATHEMATICAL SCRIPT CAPITAL K\n1D4A9..1D4AC  ; Common # L&   [4] MATHEMATICAL SCRIPT CAPITAL N..MATHEMATICAL SCRIPT CAPITAL Q\n1D4AE..1D4B9  ; Common # L&  [12] MATHEMATICAL SCRIPT CAPITAL S..MATHEMATICAL SCRIPT SMALL D\n```\n\n----------------------------------------\n\nTITLE: Implementing Pack Base Structure in C++\nDESCRIPTION: Defines a pack_base structure template for holding multiple types and values. It uses variadic templates and perfect forwarding to handle different type scenarios.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/pack.hpp.txt#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nstruct pack_basic_f\n{\n    template<class... Ts>\n    constexpr auto operator()(Ts&&... xs) const BOOST_HOF_RETURNS\n    (\n        pack_base<typename gens<sizeof...(Ts)>::type, typename remove_rvalue_reference<Ts>::type...>(BOOST_HOF_FORWARD(Ts)(xs)...)\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Boost Outcome and tl::expected\nDESCRIPTION: Shows how to handle errors in Boost Outcome and tl::expected. This approach directly accesses the error object stored in the return value.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/leaf/benchmark/benchmark.md#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n// Outcome, tl::expected\nif( auto r = f() )\n{\n  auto v = r.value();\n  // No error, use v\n}\nelse\n{ // Error!\n  switch( r.error() )\n  {\n  error_enum::error1:\n    /* handle error_enum::error1 */\n    break;\n\n  error_enum::error2:\n    /* handle error_enum::error2 */\n    break;\n\n  default:\n    /* handle any other failure */\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using BOOST_OUTCOME_USE_STD_IN_PLACE_TYPE in C++\nDESCRIPTION: This macro controls whether to use std::in_place_type_t<T> from <utility> or a local emulation. It's overridable and defaults based on the C++ standard version.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/macros/in_place_type.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nBOOST_OUTCOME_USE_STD_IN_PLACE_TYPE\n```\n\n----------------------------------------\n\nTITLE: Generic Value-or-Error Type Pattern\nDESCRIPTION: Representation of the generic split return type pattern for handling both values and errors, commonly written as T|E in documentation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/tutorial/advanced/interop/_index.md#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nT|E\n```\n\n----------------------------------------\n\nTITLE: Utility Type for Identity Type Transformation in C++\nDESCRIPTION: A simple identity metafunction that returns the same type as it was given. Used for forwarding types unchanged through the template machinery.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/construct.hpp.txt#2025-04-22_snippet_6\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<class T>\nstruct construct_id\n{\n    typedef T type;\n};\n```\n\n----------------------------------------\n\nTITLE: Conditional Test Directory Addition in CMake\nDESCRIPTION: Adds a subdirectory for tests if testing is enabled and the test CMakeLists.txt file exists. This allows for optional compilation of test cases.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/lockfree/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(BUILD_TESTING AND EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/test/CMakeLists.txt\")\n\n  add_subdirectory(test)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Using insert Metafunction with Vector in C++\nDESCRIPTION: Demonstrates how to use the 'insert' metafunction to insert an element into a vector of integers at a specific position.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/insert.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntypedef vector_c<int,0,1,3,4,5,6,7,8,9> numbers;\ntypedef find< numbers,integral_c<int,3> >::type pos;\ntypedef insert< numbers,pos,integral_c<int,2> >::type range;\n\nBOOST_MPL_ASSERT_RELATION( size<range>::value, ==, 10 );\nBOOST_MPL_ASSERT(( equal< range,range_c<int,0,10> > ));\n```\n\n----------------------------------------\n\nTITLE: Creating a zero-filled n-dimensional array\nDESCRIPTION: This code snippet shows how to create a zero-filled n-dimensional array using the specified shape and data type. Here the shape specified is 3x3 and the data type is float.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/doc/html/numpy/_sources/tutorial/simple.rst.txt#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\n  p::tuple shape = p::make_tuple(3, 3);\n  np::dtype dtype = np::dtype::get_builtin<float>();\n  np::ndarray a = np::zeros(shape, dtype);\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost.Signals2 Interface Library in CMake\nDESCRIPTION: This snippet defines the Boost.Signals2 library as an interface library in CMake. It sets up the project, creates the library targets, configures include directories, and defines dependencies on other Boost libraries.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/signals2/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.20)\n\nproject(boost_signals2 VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n\nadd_library(boost_signals2 INTERFACE)\nadd_library(Boost::signals2 ALIAS boost_signals2)\n\ntarget_include_directories(boost_signals2 INTERFACE include)\n\ntarget_link_libraries(boost_signals2\n  INTERFACE\n    Boost::assert\n    Boost::bind\n    Boost::config\n    Boost::core\n    Boost::function\n    Boost::iterator\n    Boost::mpl\n    Boost::optional\n    Boost::parameter\n    Boost::predef\n    Boost::preprocessor\n    Boost::smart_ptr\n    Boost::throw_exception\n    Boost::tuple\n    Boost::type_traits\n    Boost::variant\n)\n```\n\n----------------------------------------\n\nTITLE: Update CRC Function in C\nDESCRIPTION: This function updates a running CRC value with a buffer of bytes. It initializes the CRC, checks if the CRC table is computed and then iterates through the buffer, updating the CRC with each byte.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/zlib/zlib-1.2.13/doc/rfc1952.txt#2025-04-22_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n/*\n   Update a running crc with the bytes buf[0..len-1] and return\n the updated crc. The crc should be initialized to zero. Pre- and\n post-conditioning (one's complement) is performed within this\n function so it shouldn't be done by the caller. Usage example:\n\n   unsigned long crc = 0L;\n\n   while (read_buffer(buffer, length) != EOF) {\n     crc = update_crc(crc, buffer, length);\n   }\n   if (crc != original_crc) error();\n*/\nunsigned long update_crc(unsigned long crc,\n                unsigned char *buf, int len)\n{\n  unsigned long c = crc ^ 0xffffffffL;\n  int n;\n\n  if (!crc_table_computed)\n    make_crc_table();\n  for (n = 0; n < len; n++) {\n    c = crc_table[(c ^ buf[n]) & 0xff] ^ (c >> 8);\n  }\n  return c ^ 0xffffffffL;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring is_nothrow_swappable Implementation in Boost.Outcome C++\nDESCRIPTION: Configuration macro that controls whether to use std::is_nothrow_swappable<T> from the standard library (when C++17 or later) or fall back to a local emulation. Default is 1 for C++17 and later, 0 otherwise.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/macros/is_nothrow_swappable.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nBOOST_OUTCOME_USE_STD_IS_NOTHROW_SWAPPABLE\n```\n\n----------------------------------------\n\nTITLE: Setting Up Pre-Commit Git Hook for Clang-Format\nDESCRIPTION: This snippet provides a one-time setup procedure to establish a pre-commit git hook that automatically verifies if all files are correctly formatted before committing. It lists the requirements and commands necessary for setup, specifically for Unix-like systems.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/STYLEGUIDE.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd arangodb\ncp .githooks/pre-commit .git/hooks/pre-commit\ngit config core.hooksPath .git/hooks\ncd enterprise\ncp .githooks/pre-commit .git/hooks/pre-commit\ngit config core.hooksPath .git/hooks\n```\n\n----------------------------------------\n\nTITLE: Implementing Indirect Adaptor Specialization for Pointer Types in C++\nDESCRIPTION: Specializes the indirect_adaptor template for pointer types. It stores the pointer and dereferences it before invoking with provided arguments. This specialization handles raw pointers to function objects.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/indirect.hpp.txt#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<class F>\nstruct indirect_adaptor<F*>\n{\n    typedef indirect_adaptor fit_rewritable1_tag;\n    F* f;\n    constexpr indirect_adaptor() noexcept\n    {}\n\n    constexpr indirect_adaptor(F* x) noexcept\n    : f(x)\n    {}\n\n    template<class... Ts>\n    constexpr F& base_function(Ts&&...) const noexcept\n    {\n        return *f;\n    }\n\n    struct failure\n    : failure_for<F>\n    {};\n\n    BOOST_HOF_RETURNS_CLASS(indirect_adaptor);\n\n    template<class... Ts>\n    constexpr BOOST_HOF_SFINAE_RESULT(F, id_<Ts>...) \n    operator()(Ts&&... xs) const BOOST_HOF_SFINAE_RETURNS\n    (\n        (BOOST_HOF_MANGLE_CAST(F&)(BOOST_HOF_CONST_THIS->base_function(xs...)))(BOOST_HOF_FORWARD(Ts)(xs)...)\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Function Adaptor Template Declaration in C++\nDESCRIPTION: Shows the template declaration for function adaptors, which take functions and return enhanced functions. Both functional and class forms can be used.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/doc/src/definitions.md.txt#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate<class... Fs>\nFunctionAdaptor_adaptor<Fs...> FunctionAdaptor(Fs...);\n```\n\n----------------------------------------\n\nTITLE: Creating ArangoDB Async Registry Server Test Executable\nDESCRIPTION: Defines the main test executable for async registry server and links it with the previously defined test library and Google Test main entry point.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/AsyncRegistryServer/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(arangodbtests_async_registry_server EXCLUDE_FROM_ALL)\ntarget_link_libraries(arangodbtests_async_registry_server\n  arango_tests_async_registry_server\n  gtest_main)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Libunwind Components in CMake\nDESCRIPTION: Sets up lists of source files for various components of Libunwind, including ptrace, coredump, and architecture-specific implementations.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/libunwind/v1.7.2/src/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nSET(libunwind_ptrace_la_SOURCES\n    ptrace/_UPT_elf.c\n    ptrace/_UPT_accessors.c ptrace/_UPT_access_fpreg.c\n    ptrace/_UPT_access_mem.c ptrace/_UPT_access_reg.c\n    ptrace/_UPT_create.c ptrace/_UPT_destroy.c\n    ptrace/_UPT_find_proc_info.c ptrace/_UPT_get_dyn_info_list_addr.c\n    ptrace/_UPT_put_unwind_info.c ptrace/_UPT_get_proc_name.c\n    ptrace/_UPT_reg_offset.c ptrace/_UPT_resume.c\n)\n\nSET(libunwind_coredump_la_SOURCES\n    coredump/_UCD_accessors.c\n    coredump/_UCD_create.c\n    coredump/_UCD_destroy.c\n    coredump/_UCD_access_mem.c\n    coredump/_UCD_elf_map_image.c\n    coredump/_UCD_find_proc_info.c\n    coredump/_UCD_get_proc_name.c\n\n    coredump/_UPT_elf.c\n    coredump/_UPT_access_fpreg.c\n    coredump/_UPT_get_dyn_info_list_addr.c\n    coredump/_UPT_put_unwind_info.c\n    coredump/_UPT_resume.c\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost Static Assert Library with CMake\nDESCRIPTION: Sets up the Boost Static Assert library as an interface library with its dependencies and includes. The configuration supports CMake 3.5 or newer with a preference for 3.16 policies, and conditionally enables testing when BUILD_TESTING is set.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/static_assert/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Copyright 2018 Mike Dev\n# Copyright 2019 Peter Dimov\n# Distributed under the Boost Software License, Version 1.0.\n# See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt\n\n# We support CMake 3.5, but prefer 3.16 policies and behavior\ncmake_minimum_required(VERSION 3.5...3.16)\n\nproject(boost_static_assert VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n\nadd_library(boost_static_assert INTERFACE)\nadd_library(Boost::static_assert ALIAS boost_static_assert)\n\ntarget_include_directories(boost_static_assert INTERFACE include)\n\ntarget_link_libraries(boost_static_assert\n  INTERFACE\n    Boost::config\n)\n\n# BUILD_TESTING is the standard CTest variable that enables testing\n\nif(BUILD_TESTING)\n\n  add_subdirectory(test)\n  add_subdirectory(example)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Target Sources for arango_replication2\nDESCRIPTION: This snippet defines the target sources for the 'arango_replication2' component, specifying the private source files that are part of this module. It includes multiple C++ files which provide functionalities related to agency specifications, logs, and network messages.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/Replication2/ReplicatedLog/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntarget_sources(arango_replication2 PRIVATE\n  AgencySpecificationInspectors.cpp\n  Algorithms.cpp\n  ILogInterfaces.cpp\n  NetworkAttachedFollower.cpp\n  NetworkMessages.cpp\n  ReplicatedLog.cpp\n  SupervisionAgencyTrx.cpp\n  ReplicatedLogFeature.cpp\n  ReplicatedLogMetrics.tpp\n  DefaultRebootIdCache.cpp DefaultRebootIdCache.h\n  )\n```\n\n----------------------------------------\n\nTITLE: PlantUML Style Configuration\nDESCRIPTION: This PlantUML snippet defines the styling for sequence diagrams, setting background colors, arrow colors, lifeline colors, and participant colors. It customizes the appearance of the diagrams for better readability and visual consistency.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/process/doc/images/plantuml.txt#2025-04-22_snippet_0\n\nLANGUAGE: PlantUML\nCODE:\n```\n\"// Style\\n\\nskinparam backgroundColor #FFFFFF\\n\\nskinparam sequence {\\n    ActorBorderColor DeepSkyBlue\\n    ArrowColor #4a6484\\n    \\n    LifeLineBorderColor #4a6484\\n    ParticipantBackgroundColor  #91c6ff\\n    ParticipantBorderColor black\\n    BoxBorderColor black\\n}\\n\"\n```\n\n----------------------------------------\n\nTITLE: Defining Explicit Conversion Logic\nDESCRIPTION: This snippet details the logic for explicit conversions using tagged constructors to ensure type safety when converting between result types.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/tutorial/essential/result/_index.md#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\nexplicit result(T t) { /* logic */ }\n```\n\n----------------------------------------\n\nTITLE: Basic Implementation of Y Gradient Function\nDESCRIPTION: This function implements the basic calculation of the vertical gradient for a grayscale image using a nested loop structure similar to the x gradient implementation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/tutorial/gradient.rst.txt#2025-04-22_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\nvoid y_gradient(gray8c_view_t const& src, gray8s_view_t const& dst)\n{\n    for (int x = 0; x < src.width(); ++x)\n    {\n        gray8c_view_t::y_iterator src_it = src.col_begin(x);\n        gray8s_view_t::y_iterator dst_it = dst.col_begin(x);\n\n        for (int y = 1; y < src.height() - 1; ++y)\n            dst_it[y] = (src_it[y-1] - src_it[y+1]) / 2;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Animal Class Hierarchy in C++ Using Boost\nDESCRIPTION: This snippet demonstrates the creation of an object-oriented class hierarchy of animals, implementing a noncopyable base class for animals. It provides the necessary structure for managing derived classes like mammal and bird.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/tutorial.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nclass animal : boost::noncopyable {\npublic:\n    virtual      ~animal()   {}\n    virtual void eat()       = 0;\n    virtual int  age() const = 0;\n    // ...\n};\n\nclass mammal : public animal\n{\n    // ...\n};\n\nclass bird : public animal\n{\n    // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Lvalue Iterator Requirements in C++\nDESCRIPTION: This code snippet illustrates the core requirement of the Lvalue Iterator concept. It specifies that the dereference operator (*) must return a reference to the value type of the iterator, which may be cv-qualified.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/LvalueIterator.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n*a\n```\n\n----------------------------------------\n\nTITLE: Initializing Distributed Iterator Property Map in C++\nDESCRIPTION: Constructor for distributed iterator property map using a random access iterator and index property map.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/distributed_property_map.rst#2025-04-22_snippet_19\n\nLANGUAGE: cpp\nCODE:\n```\niterator_property_map(RandomAccessIterator iter, const index_map_type& id);\n```\n\n----------------------------------------\n\nTITLE: Defining CMake Project for Boost Property Map\nDESCRIPTION: This snippet begins the configuration of the CMake project specifically for the Boost Property Map library. It sets the minimum CMake version required and declares the project name along with its version and language, which is C++. This is essential for setting up the standard properties of the project.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/property_map/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.16)\n\nproject(boost_property_map VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost Program Options Library Build with CMake\nDESCRIPTION: Configures the CMake build system for Boost Program Options library. Sets up the library target with source files, include directories, dependencies, and compilation definitions. Handles both shared and static library builds.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/program_options/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.16)\n\nproject(boost_program_options VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n\nadd_library(boost_program_options\n  src/cmdline.cpp\n  src/config_file.cpp\n  src/convert.cpp\n  src/options_description.cpp\n  src/parsers.cpp\n  src/positional_options.cpp\n  src/split.cpp\n  src/utf8_codecvt_facet.cpp\n  src/value_semantic.cpp\n  src/variables_map.cpp\n  src/winmain.cpp\n)\n\nadd_library(Boost::program_options ALIAS boost_program_options)\n\ntarget_include_directories(boost_program_options PUBLIC include)\n\ntarget_link_libraries(boost_program_options\n  PUBLIC\n    Boost::any\n    Boost::config\n    Boost::core\n    Boost::detail\n    Boost::function\n    Boost::iterator\n    Boost::lexical_cast\n    Boost::smart_ptr\n    Boost::static_assert\n    Boost::throw_exception\n    Boost::type_traits\n  PRIVATE\n    Boost::bind\n    Boost::tokenizer\n)\n\ntarget_compile_definitions(boost_program_options\n  PUBLIC BOOST_PROGRAM_OPTIONS_NO_LIB\n)\n\nif(BUILD_SHARED_LIBS)\n  target_compile_definitions(boost_program_options PUBLIC BOOST_PROGRAM_OPTIONS_DYN_LINK)\nelse()\n  target_compile_definitions(boost_program_options PUBLIC BOOST_PROGRAM_OPTIONS_STATIC_LINK)\nendif()\n\nif(BUILD_TESTING AND EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/test/CMakeLists.txt\")\n  add_subdirectory(test)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Definition of the advance Metafunction Template in C++\nDESCRIPTION: Declaration of the advance metafunction template that moves an MPL iterator by a specified distance N. The template takes an Iterator parameter and a distance N, returning an unspecified type.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/advance.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      typename Iterator\n    , typename N\n    >\nstruct advance\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Return Statement in C++\nDESCRIPTION: This snippet shows a simple return statement in C++. It is part of a larger code block that focuses on evaluating a category based on parameter passing.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_27\n\nLANGUAGE: cpp\nCODE:\n```\n\"            return passed_by_rvalue_reference_to_const;\"\n```\n\n----------------------------------------\n\nTITLE: Minimizing and Cleaning Crash Input in Shell\nDESCRIPTION: Series of commands to minimize and clean a crash input for the basic_parser fuzzer. This process helps in reducing the crash file size and removing irrelevant parts, making it easier to analyze and commit.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/json/fuzzing/Readme.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n./fuzzer_basic_parser out \n# ...crashes and writes the crash-... file\n# minimize it:\n./fuzzer_basic_parser crash-1f8f27db1fcb30f32727472867633b7cee66d045 -minimize_crash=1 -exact_artifact_path=minimized_crash.json -max_total_time=100\n# minimized_crash.json shrank from 38493 bytes to 4102\n\n# replace irrelevant parts with space:\n./fuzzer_basic_parser minimized_crash.json -cleanse_crash=1 -exact_artifact_path=cleaned_crash.json\n\n# result is in cleaned_crash.json, commit it\ncp cleaned_crash.json old_crashes/basic_parser/20200903.json\ngit add old_crashes/basic_parser/20200903.json\n```\n\n----------------------------------------\n\nTITLE: Analyzing Test Results with Tabular Output\nDESCRIPTION: Command for analyzing test results with tabular output, showing duration and socket statistics.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/CONTRIBUTING.md#2025-04-22_snippet_39\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/examine_results.js -- 'unitTestTabularPrintResults' \\\n   --readFile out/UNITTEST_RESULT.json \\\n   --tableColumns 'duration,processStats.sum_servers.sockstat_TCP_orphan,processStats.sum_servers.sockstat_TCP_tw\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project with Version Management\nDESCRIPTION: Configures the CMake project with version compatibility handling for different CMake versions. For CMake 3.0 and newer, it uses the new project versioning syntax with the extracted LZ4 version values.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/lz4/build/cmake/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(\"${CMAKE_VERSION}\" VERSION_LESS \"3.0\")\n  project(LZ4 C)\nelse()\n  cmake_policy (SET CMP0048 NEW)\n  project(LZ4\n    VERSION ${LZ4_VERSION_STRING}\n    LANGUAGES C)\nendif()\n\ncmake_minimum_required (VERSION 3.21)\n```\n\n----------------------------------------\n\nTITLE: Including empty_sequence header in C++\nDESCRIPTION: Shows how to include the header file for the empty_sequence struct in a C++ program using the Boost MPL library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/empty_sequence.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/empty_sequence.hpp>\n```\n\n----------------------------------------\n\nTITLE: Deleted Implicit Constructor Declaration in C++\nDESCRIPTION: Declares a deleted implicit constructor for basic_result to prevent implicit conversions when predicate::implicit_constructors_enabled is false. This provides better compiler diagnostics when attempting invalid implicit constructions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/basic_result/disabling_implicit_constructor.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nbasic_result(X &&) = delete\n```\n\n----------------------------------------\n\nTITLE: Running Fuzzer with Specific Input in Shell\nDESCRIPTION: Command to run the basic_parser fuzzer with a specific input file, such as an old crash. This is useful for reproducing and analyzing specific crash scenarios.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/json/fuzzing/Readme.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n./fuzzer_basic_parser path/to/crash.json\n```\n\n----------------------------------------\n\nTITLE: Numeric Pairs Data\nDESCRIPTION: A sequence of paired integer values, possibly representing internal database mappings, memory addresses, or reference relationships in ArangoDB's internal structure.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/polygon/benchmark/input_data/voronoi_segment.txt#2025-04-22_snippet_2\n\nLANGUAGE: txt\nCODE:\n```\n-599296394 29926489 -618201519 -8305172\n-586752267 55294361 -599296394 29926489\n-568825269 91547963 -586752267 55294361\n[...additional lines omitted for brevity...]\n```\n\n----------------------------------------\n\nTITLE: Configuring LaTeX Output Generation\nDESCRIPTION: This snippet details LaTeX output settings in a Doxygen configuration file. Tags such as `GENERATE_LATEX`, `LATEX_OUTPUT`, and others customize how LaTeX documents are produced. Dependencies include setting `GENERATE_LATEX` to YES for these options to take effect.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/sort/doc/doxygen/sort_doxyfile.txt#2025-04-22_snippet_62\n\nLANGUAGE: configuration\nCODE:\n```\nGENERATE_LATEX         = NO\nLATEX_OUTPUT           = latex\nLATEX_CMD_NAME         = latex\nMAKEINDEX_CMD_NAME     = makeindex\nCOMPACT_LATEX          = NO\nPAPER_TYPE             = a4\nEXTRA_PACKAGES         = \nLATEX_HEADER           = \nLATEX_FOOTER           = \nLATEX_EXTRA_STYLESHEET = \nLATEX_EXTRA_FILES      = \nPDF_HYPERLINKS         = YES\nUSE_PDFLATEX           = YES\nLATEX_BATCHMODE        = NO\nLATEX_HIDE_INDICES     = NO\nLATEX_SOURCE_CODE      = NO\nLATEX_BIB_STYLE        = plain\n```\n\n----------------------------------------\n\nTITLE: Accessing Element with Key Type in C++\nDESCRIPTION: This code snippet demonstrates how to access elements in an Extensible Associative Sequence using the key type. This is part of the semantics for the insert operation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/ExtensibleAssociativeSeq.rst#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nat< r, key_type<s,x>::type >::type\n```\n\n----------------------------------------\n\nTITLE: Defining a Status Result Type Alias in C++\nDESCRIPTION: Creates a type alias for status_result that uses the experimental file_io_error_domain for error reporting. The code defines a convenient type to represent operation results in file I/O operations.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/experimental/outcome.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n// An alias to the non-TRY returning form of status_expected\ntemplate <class T>\nusing status_result = OUTCOME_V2_NAMESPACE::experimental::status_result<T, system_error2::default_status_result_policy>;\n```\n\n----------------------------------------\n\nTITLE: Initializing Boost.Iostreams Library in CMake\nDESCRIPTION: Sets up the basic project configuration for Boost.Iostreams, including version, language, and core source files.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iostreams/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.16)\n\nproject(boost_iostreams VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n\nadd_library(boost_iostreams\n  src/file_descriptor.cpp\n  src/mapped_file.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing for_each_tuple Function in C++\nDESCRIPTION: Creates a for_each_tuple function using proj and unpack adaptors to iterate over tuple elements.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/src/example_print.md#2025-04-22_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_HOF_STATIC_LAMBDA_FUNCTION(for_each_tuple) = [](const auto& sequence, auto f)\n{\n    return unpack(proj(f))(sequence);\n};\n```\n\n----------------------------------------\n\nTITLE: Defining iterator_facade Template Class in C++\nDESCRIPTION: Declaration of the iterator_facade template class, which serves as a base for implementing various types of iterators. It includes typedefs and operator declarations for common iterator operations.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/iterator_facade_ref.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <\n    class Derived\n  , class Value\n  , class CategoryOrTraversal\n  , class Reference  = Value&\n  , class Difference = ptrdiff_t\n>\nclass iterator_facade {\n public:\n    typedef remove_const<Value>::type value_type;\n    typedef Reference reference;\n    typedef Value* pointer;\n    typedef Difference difference_type;\n    typedef /* see below__ */ iterator_category;\n\n    reference operator*() const;\n    /* see below__ */ operator->() const;\n    /* see below__ */ operator[](difference_type n) const;\n    Derived& operator++();\n    Derived operator++(int);\n    Derived& operator--();\n    Derived operator--(int);\n    Derived& operator+=(difference_type n);\n    Derived& operator-=(difference_type n);\n    Derived operator-(difference_type n) const;\n protected:\n    typedef iterator_facade iterator_facade_;\n};\n```\n\n----------------------------------------\n\nTITLE: Writable Iterator Expression Specification in C++\nDESCRIPTION: Specifies the required expression '*a = o' for implementing the Writable Iterator concept. The value type of 'o' must be in the set of value types of the iterator type X, and X must be Copy Constructible.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/WritableIterator.rst#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n*a = o\n```\n\n----------------------------------------\n\nTITLE: Defining Result Type of Compose Function in C++\nDESCRIPTION: This template structure provides the result type of the compose function utilized in the context of tagged arguments and requires that all elements in TaggedArgs are tagged reference types.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_14\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <typename ...TaggedArgs>\nstruct compose\n  : |boost_enable_if|_<|are_tagged_arguments|_<T0,Pack...>,|ArgumentPack|_>\n{\n};\n\ntemplate <>\nstruct compose<>\n{\n    typedef *empty* |ArgumentPack|_ type;\n};\n```\n\n----------------------------------------\n\nTITLE: Huffman Code Generation Algorithm (Step 3) in C-like language\nDESCRIPTION: This code snippet represents step 3 of the Huffman code generation algorithm. It assigns numerical values to all codes based on their length and the base values calculated in the previous step.  It iterates through each symbol and assigns a code if the symbol's bit length is not zero.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/zlib/zlib-1.2.13/doc/rfc1951.txt#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nfor (n = 0;  n <= max_code; n++) {\n    len = tree[n].Len;\n    if (len != 0) {\n        tree[n].Code = next_code[len];\n        next_code[len]++;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Dynamic Images in Boost.GIL\nDESCRIPTION: This C++ snippet illustrates the creation and usage of dynamic images using Boost.GIL. It defines custom image and image view types using any_image and any_image_view, demonstrating how operations can be performed on these dynamic types at runtime. The snippet also includes examples of assigning new images at runtime and handling exceptions when assigning disallowed types. Required dependencies include the Boost.GIL and Boost.Variant2 libraries.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/dynamic_image.rst.txt#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n#include <boost/gil/extension/dynamic_image/dynamic_image_all.hpp>\nusing namespace boost;\n\n#define ASSERT_SAME(A,B) static_assert(is_same< A,B >::value, \"\")\n\n// Create any_image class (or any_image_view) class with a set of allowed images\ntypedef any_image<rgb8_image_t, cmyk16_planar_image_t> my_any_image_t;\n\n// Associated view types are available (equivalent to the ones in image_t)\ntypedef any_image_view<rgb8_view_t, cmyk16_planar_view_t> AV;\nASSERT_SAME(my_any_image_t::view_t, AV);\n\ntypedef any_image_view<rgb8c_view_t, cmyk16c_planar_view_t>> CAV;\nASSERT_SAME(my_any_image_t::const_view_t, CAV);\nASSERT_SAME(my_any_image_t::const_view_t, my_any_image_t::view_t::const_t);\n\ntypedef any_image_view<rgb8_step_view_t, cmyk16_planar_step_view_t> SAV;\nASSERT_SAME(typename dynamic_x_step_type<my_any_image_t::view_t>::type, SAV);\n\n// Assign it a concrete image at run time:\nmy_any_image_t myImg = my_any_image_t(rgb8_image_t(100,100));\n\n// Change it to another at run time. The previous image gets destroyed\nmyImg = cmyk16_planar_image_t(200,100);\n\n// Assigning to an image not in the allowed set throws an exception\nmyImg = gray8_image_t();        // will throw std::bad_cast\n```\n\n----------------------------------------\n\nTITLE: Implementing Template Dispatching for Boost.Parameter in C++\nDESCRIPTION: Shows template metaprogramming implementation for the parameter dispatching mechanism in Boost.Parameter library. This snippet demonstrates the core template structures that handle parameter forwarding.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_17\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <\n    typename ResultType\n  , typename Args\n  , typename *argument name* ## **0** ## _type\n  , …\n  , typename *argument name* ## **m** ## _type\n>\nResultType\n    boost_param_dispatch_0boost\\_ ## __LINE__ ## **name**\\ (\n        (ResultType(*)())\n      , Args const& args\n      , *argument name* ## **0** ## _type&& *argument name* ## **0**\n      , …\n      , *argument name* ## **m** ## _type&& *argument name* ## **m**\n    );\n\ntemplate <typename Args>\ntypename boost_param_result\\_ ## __LINE__ ## **name**\\ <Args>::type\n    boost_param_impl ## __LINE__ ## **name**\\ (Args const& args)\n{\n    return boost_param_dispatch_0boost\\_ ## __LINE__ ## **name**\\ (\n        static_cast<\n            typename boost_param_result\\_ ## __LINE__ ## **name**\\ <\n                Args\n            >::type(*)()\n        >(|std_nullptr|_\\)\n      , args\n      , |std_forward|_\\<\n            typename |value_type|_\\<\n                Args\n              , *keyword tag type of required parameter* ## **0**\n            >::type\n        >(args[ *keyword object of required parameter* ## **0**])\n      , …\n      , |std_forward|_\\<\n            typename |value_type|_\\<\n                Args\n              , *keyword tag type of required parameter* ## **n**\n            >::type\n        >(args[ *keyword object of required parameter* ## **n**])\n    );\n}\n\ntemplate <\n    typename ResultType\n  , typename Args\n  , typename *argument name* ## **0** ## _type\n  , …\n  , typename *argument name* ## **n** ## _type\n>\nResultType\n    boost_param_dispatch_0boost\\_ ## __LINE__ ## **name**\\ (\n        (ResultType(*)())\n      , Args const& args\n      , *argument name* ## **0** ## _type&& *argument name* ## **0**\n      , …\n      , *argument name* ## **n** ## _type&& *argument name* ## **n**\n    )\n{\n    return boost_param_dispatch_0boost\\_ ## __LINE__ ## **name**\\ (\n        static_cast<ResultType(*)()>(|std_nullptr|_\\)\n      , (args, *keyword object of optional parameter* ## **n + 1** =\n            *default value of optional parameter* ## **n + 1**\n        )\n      , |std_forward|_\\<*argument name* ## **0** ## _type>(\n            *argument name* ## **0**\n        )\n      , …\n      , |std_forward|_\\<*argument name* ## **n** ## _type>(\n            *argument name* ## **n**\n        )\n      , |std_forward|_\\<\n            typename |value_type|_\\<\n                Args\n              , *keyword tag type of optional parameter* ## **n + 1**\n            >::type\n        >(*default value of optional parameter* ## **n + 1**)\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Using pop_front Metafunction with Vector Types in C++\nDESCRIPTION: Example usage of the pop_front metafunction with different vector types. It demonstrates removing the first element from vectors of various sizes and checking the results.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/pop_front.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntypedef vector<long>::type types1;\ntypedef vector<int,long>::type types2;\ntypedef vector<char,int,long>::type types3;\n\ntypedef pop_front<types1>::type result1;\ntypedef pop_front<types2>::type result2;\ntypedef pop_front<types3>::type result3;\n    \nBOOST_MPL_ASSERT_RELATION( size<result1>::value, ==, 0 );\nBOOST_MPL_ASSERT_RELATION( size<result2>::value, ==, 1 );\nBOOST_MPL_ASSERT_RELATION( size<result3>::value, ==, 2 );\n    \nBOOST_MPL_ASSERT(( is_same< front<result2>::type, long > ));\nBOOST_MPL_ASSERT(( is_same< front<result3>::type, int > ));\n```\n\n----------------------------------------\n\nTITLE: Example usage of back_inserter with copy algorithm in C++\nDESCRIPTION: Demonstrates using back_inserter with the copy algorithm to append a range of values to a vector.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/back_inserter.rst#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\ntypedef copy<\n      range_c<int,5,10>\n    , back_inserter< vector_c<int,0,1,2,3,4> >\n    >::type range;\n   \nBOOST_MPL_ASSERT(( equal< range, range_c<int,0,10> > ));\n```\n\n----------------------------------------\n\nTITLE: Using filter_view to Find Largest Floating Type in C++\nDESCRIPTION: Demonstrates how to use filter_view along with other MPL components to find the largest floating-point type in a sequence of types.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/filter_view.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntypedef vector<int,float,long,float,char[50],long double,char> types;\ntypedef max_element<\n      transform_view< filter_view< types,boost::is_float<_> >, size_of<_> >\n    >::type iter;\n\nBOOST_MPL_ASSERT(( is_same< deref<iter::base>::type, long double > ));\n```\n\n----------------------------------------\n\nTITLE: Using negate Metafunction in C++\nDESCRIPTION: This example demonstrates how to use the negate metafunction with an integral constant. It negates -10 and asserts that the result is 10 and of type int.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/negate.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntypedef negate< int_<-10> >::type r;\nBOOST_MPL_ASSERT_RELATION( r::value, ==, 10 );\nBOOST_MPL_ASSERT(( is_same< r::value_type, int > ));\n```\n\n----------------------------------------\n\nTITLE: Adding FakeIt System Include Directories in CMake\nDESCRIPTION: Adds the FakeIt mocking framework as a system include to suppress compiler warnings from the third-party header files.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/CMakeLists.txt#2025-04-22_snippet_26\n\nLANGUAGE: CMake\nCODE:\n```\n# add these includes as system includes because otherwise\n# the compiler will emit warnings for fakeit.hpp\ntarget_include_directories(arangodbtests SYSTEM PRIVATE\n  ${CMAKE_SOURCE_DIR}/3rdParty/fakeit-gtest\n)\n```\n\n----------------------------------------\n\nTITLE: Declaring narrow_value_check Observer Policy in C++\nDESCRIPTION: Declares a static function named narrow_value_check that takes an rvalue reference to Impl. It is marked as noexcept and performs hard undefined behavior if no value is present.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/policies/base/narrow_value_check.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nstatic void narrow_value_check(Impl &&) noexcept\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Buginese Script Character Ranges\nDESCRIPTION: Lists Unicode character ranges for the Buginese script, including letters, vowel signs, and punctuation. Used for writing the Buginese language in South Sulawesi, Indonesia.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/spirit/workbench/unicode/Scripts.txt#2025-04-22_snippet_38\n\nLANGUAGE: unicode\nCODE:\n```\n1A00..1A16    ; Buginese # Lo  [23] BUGINESE LETTER KA..BUGINESE LETTER HA\n1A17..1A18    ; Buginese # Mn   [2] BUGINESE VOWEL SIGN I..BUGINESE VOWEL SIGN U\n1A19..1A1B    ; Buginese # Mc   [3] BUGINESE VOWEL SIGN E..BUGINESE VOWEL SIGN AE\n1A1E..1A1F    ; Buginese # Po   [2] BUGINESE PALLAWA..BUGINESE END OF SECTION\n\n# Total code points: 30\n```\n\n----------------------------------------\n\nTITLE: Quotation_Mark Character Property Definitions in Unicode 5.2.0\nDESCRIPTION: Lists all Unicode code points classified as Quotation_Mark, including various quotation marks, brackets, and apostrophes across different scripts and styles. Contains 29 total code points with their Unicode categories and descriptions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/spirit/workbench/unicode/PropList.txt#2025-04-22_snippet_5\n\nLANGUAGE: Plain Text\nCODE:\n```\n0022          ; Quotation_Mark # Po       QUOTATION MARK\n0027          ; Quotation_Mark # Po       APOSTROPHE\n00AB          ; Quotation_Mark # Pi       LEFT-POINTING DOUBLE ANGLE QUOTATION MARK\n00BB          ; Quotation_Mark # Pf       RIGHT-POINTING DOUBLE ANGLE QUOTATION MARK\n2018          ; Quotation_Mark # Pi       LEFT SINGLE QUOTATION MARK\n2019          ; Quotation_Mark # Pf       RIGHT SINGLE QUOTATION MARK\n201A          ; Quotation_Mark # Ps       SINGLE LOW-9 QUOTATION MARK\n201B..201C    ; Quotation_Mark # Pi   [2] SINGLE HIGH-REVERSED-9 QUOTATION MARK..LEFT DOUBLE QUOTATION MARK\n201D          ; Quotation_Mark # Pf       RIGHT DOUBLE QUOTATION MARK\n201E          ; Quotation_Mark # Ps       DOUBLE LOW-9 QUOTATION MARK\n201F          ; Quotation_Mark # Pi       DOUBLE HIGH-REVERSED-9 QUOTATION MARK\n2039          ; Quotation_Mark # Pi       SINGLE LEFT-POINTING ANGLE QUOTATION MARK\n203A          ; Quotation_Mark # Pf       SINGLE RIGHT-POINTING ANGLE QUOTATION MARK\n300C          ; Quotation_Mark # Ps       LEFT CORNER BRACKET\n300D          ; Quotation_Mark # Pe       RIGHT CORNER BRACKET\n300E          ; Quotation_Mark # Ps       LEFT WHITE CORNER BRACKET\n300F          ; Quotation_Mark # Pe       RIGHT WHITE CORNER BRACKET\n301D          ; Quotation_Mark # Ps       REVERSED DOUBLE PRIME QUOTATION MARK\n301E..301F    ; Quotation_Mark # Pe   [2] DOUBLE PRIME QUOTATION MARK..LOW DOUBLE PRIME QUOTATION MARK\nFE41          ; Quotation_Mark # Ps       PRESENTATION FORM FOR VERTICAL LEFT CORNER BRACKET\nFE42          ; Quotation_Mark # Pe       PRESENTATION FORM FOR VERTICAL RIGHT CORNER BRACKET\nFE43          ; Quotation_Mark # Ps       PRESENTATION FORM FOR VERTICAL LEFT WHITE CORNER BRACKET\nFE44          ; Quotation_Mark # Pe       PRESENTATION FORM FOR VERTICAL RIGHT WHITE CORNER BRACKET\nFF02          ; Quotation_Mark # Po       FULLWIDTH QUOTATION MARK\nFF07          ; Quotation_Mark # Po       FULLWIDTH APOSTROPHE\nFF62          ; Quotation_Mark # Ps       HALFWIDTH LEFT CORNER BRACKET\nFF63          ; Quotation_Mark # Pe       HALFWIDTH RIGHT CORNER BRACKET\n\n# Total code points: 29\n```\n\n----------------------------------------\n\nTITLE: Implementing Overloaded Print Function with first_of in C++\nDESCRIPTION: Creates an overloaded print function using first_of adaptor to handle both single values and ranges.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/src/example_print.md#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_HOF_STATIC_LAMBDA_FUNCTION(print) = first_of(\n    [](const auto& x) -> decltype(std::cout << x, void())\n    {\n        std::cout << x << std::endl;\n    },\n    [](const auto& range)\n    {\n        for(const auto& x:range) std::cout << x << std::endl;\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Pixel Reference and Mutable Assignment\nDESCRIPTION: Demonstrates creating a planar pixel reference, modifying channel values, and verifying reference-based modifications\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/pixel.rst.txt#2025-04-22_snippet_9\n\nLANGUAGE: cpp\nCODE:\n```\nrgb8_planar_ref_t ref(bgr8);\nget_color<red_t>(ref) = 10;\nassert(get_color<red_t>(bgr8)==10)\n```\n\n----------------------------------------\n\nTITLE: Header Include for unpack_args in C++\nDESCRIPTION: The header file that needs to be included to use the unpack_args metafunction in Boost MPL.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/unpack_args.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/unpack_args.h>\n```\n\n----------------------------------------\n\nTITLE: Configuring Fuerte Test Executable Sources\nDESCRIPTION: Defines the source files to be compiled into the fuertetest executable. Includes various connection test files and a main entry point.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/Fuerte/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(fuertetest\n  ConnectionBasicTest.cpp\n  ConnectionConcurrentTest.cpp\n  ConnectionFailuresTest.cpp\n  ConnectionTimeoutsTest.cpp\n#    test_10000_writes.cpp\n  main.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Accessing Spare Storage Bits in C++\nDESCRIPTION: Function declaration for retrieving the 16-bit spare storage from basic_result or basic_outcome objects. The function is non-overridable, requires no prerequisites, and is located in the BOOST_OUTCOME_V2_NAMESPACE::hooks namespace.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/functions/hooks/spare_storage.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nuint16_t spare_storage(const basic_result|basic_outcome *) noexcept\n```\n\n----------------------------------------\n\nTITLE: Observing Value Types with RValue References in C++\nDESCRIPTION: Wide contract rvalue reference observer method that returns a reference to any present value. It first invokes NoValuePolicy::wide_value_check() before returning the value reference. For void value_type, only a const overload returning void is available.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/basic_result/value_rvalue.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nvalue_type &&value() &&\n```\n\n----------------------------------------\n\nTITLE: Bit-aligned Pixel Reference and Iterator in C++\nDESCRIPTION: Defines and uses bit-aligned pixel reference and iterator classes for RGB 2-3-2 formats. Highlights their complexity compared to packed pixels and demonstrates initialization and operation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/pixel.rst.txt#2025-04-22_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\n// Mutable reference to a BGR232 pixel\\ntypedef const bit_aligned_pixel_reference<unsigned char, mpl::vector3_c<unsigned,2,3,2>, bgr_layout_t, true>  bgr232_ref_t;\\n\\n// A mutable iterator over BGR232 pixels\\ntypedef bit_aligned_pixel_iterator<bgr232_ref_t> bgr232_ptr_t;\\n\\n// BGR232 pixel value. It is a packed_pixel of size 1 byte. (The last bit is unused)\\ntypedef std::iterator_traits<bgr232_ptr_t>::value_type bgr232_pixel_t;\\nstatic_assert(sizeof(bgr232_pixel_t) == 1, \"\");\\n\\nbgr232_pixel_t red(0,0,3); // = 0RRGGGBB, = 01100000 = 0x60\\n\\n// a buffer of 7 bytes fits exactly 8 BGR232 pixels.\\nunsigned char pix_buffer[7];\\nstd::fill(pix_buffer,pix_buffer+7,0);\\n\\n// Fill the 8 pixels with red\\nbgr232_ptr_t pix_it(&pix_buffer[0],0);  // start at bit 0 of the first pixel\\nfor (int i=0; i<8; ++i)\\n{\\n  *pix_it++ = red;\\n}\\n// Result: 0x60 0x30 0x11 0x0C 0x06 0x83 0xC1\n```\n\n----------------------------------------\n\nTITLE: Example Usage of deref Metafunction in C++\nDESCRIPTION: Provides an example of using the deref metafunction with a vector of types. It demonstrates how to obtain the first element type from the vector using begin and deref.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/deref.rst#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\ntypedef vector<char,short,int,long> types;\ntypedef begin<types>::type iter;\n\nBOOST_MPL_ASSERT(( is_same< deref<iter>::type, char > ));\n```\n\n----------------------------------------\n\nTITLE: Building and Installing Jemalloc from Developer Sources\nDESCRIPTION: Commands for generating configuration files, building, and installing jemalloc from unpackaged developer sources.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/jemalloc/jemalloc/INSTALL.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./autogen.sh\nmake\nmake install\n```\n\n----------------------------------------\n\nTITLE: Example Usage of limit Function in C++\nDESCRIPTION: Demonstrates how to use the limit function to create a constrained sum function that accepts exactly two parameters. This showcases the practical application of the limit function decorator.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/limit.hpp.txt#2025-04-22_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/hof.hpp>\n#include <cassert>\nusing namespace boost::hof;\n\nstruct sum_f\n{\n    template<class T>\n    int operator()(T x, T y) const\n    {\n        return x+y;\n    }\n};\nBOOST_HOF_STATIC_FUNCTION(sum) = limit_c<2>(sum_f());\n\nint main() {\n    assert(3 == sum(1, 2));\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring IDL Property Support in Doxygen\nDESCRIPTION: Setting to enable replacing get and set methods with properties in Microsoft IDL documentation. Works when methods operate on simple types. Default is YES.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/sort/doc/doxygen/sort_doxyfile.txt#2025-04-22_snippet_17\n\nLANGUAGE: text\nCODE:\n```\nIDL_PROPERTY_SUPPORT   = YES\n```\n\n----------------------------------------\n\nTITLE: Conditional Inclusion of Test Subdirectory\nDESCRIPTION: This snippet conditionally adds the 'test' subdirectory to the build process if the 'BUILD_TESTING' variable is defined. This allows for building and running tests as part of the project.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/preprocessor/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(BUILD_TESTING)\n\n  add_subdirectory(test)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Assignable Concept in C++\nDESCRIPTION: The Assignable concept is defined by this code snippet. It requires a type T to support assignment from type U, where U defaults to T. It ensures the existance of an assignment operator.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/concepts.rst#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nauto concept Assignable<typename T, typename U = T>\n{\n    typename result_type;\n    result_type operator=(T&, U);\n};\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Variant Implementations with VS 2017 (Optimized)\nDESCRIPTION: Compile time and run time benchmarks for variant2, boost::variant, and std::variant using VS 2017 with /O2 /DNDEBUG optimization level. Shows compilation times and execution times for 100 million iterations.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/variant2/benchmark/benchmark2.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n      variant2 (-DONLY_V2): 1778 ms\nboost::variant (-DONLY_BV): 3252 ms\n  std::variant (-DONLY_SV): 1372 ms\n```\n\nLANGUAGE: text\nCODE:\n```\nN=100000000:\n        prefix:    803 ms; S=416666583333336\n      variant2:   2124 ms; S=416666583333336\nboost::variant:   6191 ms; S=416666583333336\n  std::variant:   2193 ms; S=416666583333336\n```\n\n----------------------------------------\n\nTITLE: Building Documentation with Python Script\nDESCRIPTION: Command to execute the documentation build script that generates HTML documentation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/README.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython build.py\n```\n\n----------------------------------------\n\nTITLE: Running Ada Stemmer Tests\nDESCRIPTION: Shell command for executing Ada stemmer test suite using make utility\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/snowball/ada/README.md#2025-04-22_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n$ make check_ada\n```\n\n----------------------------------------\n\nTITLE: Const-Qualified Reference Proxy Members in C++\nDESCRIPTION: This code snippet shows how to add the `const` qualifier to all members of a reference proxy object, including the assignment operator and `operator->`. This is a common technique to resolve issues when a temporary object is bound to a non-constant reference.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/technicalities.rst#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <typename T>\n    struct my_reference_proxy\n    {\n      const my_reference_proxy& operator=(const my_reference_proxy& p) const;\n      const my_reference_proxy* operator->() const { return this; }\n      ...\n    };\n```\n\n----------------------------------------\n\nTITLE: Defining Hugo Frontmatter Configuration\nDESCRIPTION: YAML frontmatter block that configures the documentation page metadata, setting the title to 'Macros' and defining its position in the navigation with a weight of 10.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/macros/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n+++\ntitle = \"Macros\"\nweight = 10\n+++\n```\n\n----------------------------------------\n\nTITLE: Asserting and Modifying Pixel Colors with BOOST\nDESCRIPTION: This snippet shows how to assert channel data, modify the red channel, and handle pixel references. It uses BOOST library metafunctions to check pixel properties and assignments to alter pixel color values.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/pixel.rst#2025-04-22_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\n// This is how to access the first semantic channel (red)\nassert(semantic_at_c<0>(rgb8) == semantic_at_c<0>(bgr8));\n\n// This is how to access the red channel by name\nassert(get_color<red_t>(rgb8) == get_color<red_t>(bgr8));\n\n// This is another way of doing it (some compilers don\\'t like the first one)\nassert(get_color(rgb8,red_t()) == get_color(bgr8,red_t()));\n\n// This is how to use the PixelBasedConcept metafunctions\nBOOST_MPL_ASSERT(num_channels<rgb8_pixel_t>::value == 3);\nBOOST_MPL_ASSERT((is_same<channel_type<rgb8_pixel_t>::type, bits8>));\nBOOST_MPL_ASSERT((is_same<color_space_type<bgr8_pixel_t>::type, rgb_t> ));\nBOOST_MPL_ASSERT((is_same<channel_mapping_type<bgr8_pixel_t>::type, mpl::vector3_c<int,2,1,0> > ));\n\n// Pixels contain just the three channels and nothing extra\nBOOST_MPL_ASSERT(sizeof(rgb8_pixel_t)==3);\n\nrgb8_planar_ref_t ref(bgr8);    // copy construction is allowed from a compatible mutable pixel type\n\nget_color<red_t>(ref) = 10;     // assignment is ok because the reference is mutable\nassert(get_color<red_t>(bgr8)==10);  // references modify the value they are bound to\n```\n\n----------------------------------------\n\nTITLE: Defining Implicit Move Constructor for Success Type\nDESCRIPTION: This snippet defines the implicit value-from-success-type-sugar move constructor that constructs the value type either from a success type or defaults to trivial construction when T is void. It requires a specific predicate for compatibility in conversion. The complexity associated with the constructor matches that of standard value type constructors.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/basic_outcome/implicit_success_move_constructor.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n+++\n\ntitle = \"`basic_outcome(success_type<T> &&)`\"\ndescription = \"Implicit value-from-success-type-sugar move constructor. Available if `predicate::enable_compatible_conversion<T, void, void>` is true, or `T` is `void`. Constexpr, triviality and noexcept propagating.\"\ncategories = [\"constructors\", \"implicit-constructors\", \"tagged-constructors\"]\nweight = 510\n+++\n\nImplicit value-from-success-type-sugar move constructor used to disambiguate the construction of the value type.\nNote that if `T = void`, `value_type` will be default constructed.  Calls {{% api \"void on_outcome_move_construction(T *, U &&) noexcept\" %}} with `this` and `success_type<T> &&`.\n\n*Requires*: `predicate::enable_compatible_conversion<T, void, void>` is true, or `T` is `void`.\n\n*Complexity*: Same as for the `value_type` constructor which accepts `T`, or the `value_type` default constructor if `T` is `void`. Constexpr, triviality and noexcept of underlying operations is propagated.\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost.Locale Testing\nDESCRIPTION: Sets up testing for Boost.Locale if testing is enabled and the test directory exists.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/CMakeLists.txt#2025-04-22_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nif(BUILD_TESTING AND EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/test/CMakeLists.txt\")\n\n  add_subdirectory(test)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Using BOOST_OUTCOME_TRY with Extended Foreign Type\nDESCRIPTION: Example code demonstrating the use of BOOST_OUTCOME_TRY with the foreign result type after implementing the customization points.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/recipes/foreign-try.md#2025-04-22_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nint main()\n{\n  // Success case\n  {\n    auto r = new_code(5);\n    std::cout << \"new_code(5) returns successful \" << r.value() << std::endl;\n    std::cout << std::endl;\n  }\n  \n  // Failure case\n  {\n    auto r = new_code(0);\n    std::cout << \"new_code(0) returns failure \" << r.error() << std::endl;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Options for Boost.Nowide\nDESCRIPTION: Sets up CMake options for installation and warning handling, with defaults determined by the build context.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/nowide/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT BOOST_SUPERPROJECT_SOURCE_DIR)\n  option(Boost_NOWIDE_INSTALL \"Install library\" \"${def_INSTALL}\")\nendif()\noption(Boost_NOWIDE_WERROR \"Treat warnings as errors\" \"${def_WERROR}\")\n```\n\n----------------------------------------\n\nTITLE: Declaring Copy Construction Hook for Outcome in C++\nDESCRIPTION: This function signature defines a hook invoked during copy construction of basic_outcome objects. It takes pointers to the constructed and source objects as parameters and returns void. The function is marked noexcept for exception safety.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/functions/hooks/hook_outcome_copy_construction.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nvoid hook_outcome_copy_construction(T *, U &&) noexcept\n```\n\n----------------------------------------\n\nTITLE: Expression Semantics of count_if in C++\nDESCRIPTION: Demonstrates the semantic equivalent of using count_if, which uses a fold operation with a conditional increment based on the predicate.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/count_if.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntypedef lambda<pred>::type p;\ntypedef fold< \n      s\n    , long_<0>\n    , if_< apply_wrap\\1\\<p,_2>, next<_1>, _1 >\n    >::type n;\n```\n\n----------------------------------------\n\nTITLE: Creating a Value Category Evaluator in C++\nDESCRIPTION: Definition of an enum and struct to evaluate and categorize the value category of a passed object as lvalue, rvalue, const lvalue, or const rvalue.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_50\n\nLANGUAGE: cpp\nCODE:\n```\n    enum invoked\n    {\n        passed_by_lvalue_reference_to_const\n      , passed_by_lvalue_reference\n      , passed_by_rvalue_reference_to_const\n      , passed_by_rvalue_reference\n    };\n\n    struct U\n    {\n        template <std::size_t N>\n        static invoked evaluate_category(|std_bitset|_\\<N + 1> const&)\n        {\n            return passed_by_lvalue_reference_to_const;\n        }\n\n        template <std::size_t N>\n        static invoked evaluate_category(|std_bitset|_\\<N + 1>&)\n        {\n            return passed_by_lvalue_reference;\n        }\n\n        template <std::size_t N>\n        static invoked evaluate_category(|std_bitset|_\\<N + 1> const&&)\n        {\n            return passed_by_rvalue_reference_to_const;\n        }\n\n        template <std::size_t N>\n        static invoked evaluate_category(|std_bitset|_\\<N + 1>&&)\n        {\n            return passed_by_rvalue_reference;\n        }\n    };\n```\n\n----------------------------------------\n\nTITLE: Configuration Macro for Legacy Hook Support in C++\nDESCRIPTION: Setting BOOST_OUTCOME_ENABLE_LEGACY_SUPPORT_FOR to less than 220 enables emulation of ADL-discovered event hooks for backwards compatibility with pre-v2.2 code.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/changelog/v22.md#2025-04-22_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\nBOOST_OUTCOME_ENABLE_LEGACY_SUPPORT_FOR\n```\n\n----------------------------------------\n\nTITLE: Declaring Repeat While Static Variable in C++\nDESCRIPTION: Declares a static variable for the repeat_while function decorator using the BOOST_HOF_DECLARE_STATIC_VAR macro. It combines constant and integral decorators for different use cases.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/repeat_while.hpp.txt#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_HOF_DECLARE_STATIC_VAR(repeat_while, decorate_adaptor<\n    boost::hof::first_of_adaptor<\n        detail::repeat_while_constant_decorator,\n        detail::repeat_while_integral_decorator<BOOST_HOF_REPEAT_WHILE_CONSTEXPR_DEPTH>\n    >\n>);\n```\n\n----------------------------------------\n\nTITLE: Creating Value Descriptors for Command-Line Options\nDESCRIPTION: This snippet provides a template for implementing a more user-friendly interface in defining options with the 'value' function, enabling the automatic creation of 'typed_value_descriptor' instances for command-line options.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/program_options/doc/post_review_plan.txt#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n(\n    \"magic\", value<int>(\"n\", &n)->default_value(10), \"magic value\"\n);\n```\n\n----------------------------------------\n\nTITLE: Stopping ArangoDB backend process\nDESCRIPTION: A basic command to stop a currently running background process. Typically used in a terminal environment.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/CONTRIBUTING.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ncmd + c\n```\n\n----------------------------------------\n\nTITLE: Defining long_ Template Structure in C++\nDESCRIPTION: This code snippet defines a template structure 'long_' which serves as an integral constant wrapper for the type 'long'. It provides mechanisms to retrieve the wrapped value and is intended for use with the Boost MPL framework.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/long_.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/long.hpp>\n\ntemplate<\n      long N\n    >\nstruct long_\n{\n    // |unspecified|\n    // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Local Subgraph Template Class\nDESCRIPTION: Template class declaration for creating a local subgraph adaptor that filters a distributed graph to show only local elements\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/local_subgraph.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<typename DistributedGraph> class local_subgraph;\n```\n\n----------------------------------------\n\nTITLE: Serializing JSON Files with Different Libraries (CSV)\nDESCRIPTION: Benchmark results for serializing JSON files using boost, rapidjson, and nlohmann libraries. Each row represents a single test run, showing the file name, compiler/architecture, library used, iterations, time taken (in microseconds), and throughput (in MB/s).\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/json/bench/samples.txt#2025-04-22_snippet_0\n\nLANGUAGE: csv\nCODE:\n```\nSerialize apache_builds.json,gcc x64/sse2,rapidjson (pool),57000,5027,1424\nSerialize apache_builds.json,gcc x64/sse2,rapidjson (pool),56680,5148,1383\nSerialize apache_builds.json,gcc x64/sse2,rapidjson (pool),57792,5095,1425\nSerialize apache_builds.json,gcc x64/sse2,rapidjson (pool),56700,5102,1396\nSerialize apache_builds.json,gcc x64/sse2,rapidjson (pool),58338,5135,1427\nSerialize apache_builds.json,gcc x64/sse2,rapidjson (pool),56800,5008,1424\nSerialize apache_builds.json,gcc x64/sse2,rapidjson,60000,5018,1502\nSerialize apache_builds.json,gcc x64/sse2,rapidjson,62769,5164,1527\nSerialize apache_builds.json,gcc x64/sse2,rapidjson,60760,5008,1524\nSerialize apache_builds.json,gcc x64/sse2,rapidjson,60660,5090,1497\nSerialize apache_builds.json,gcc x64/sse2,rapidjson,62559,5138,1529\nSerialize apache_builds.json,gcc x64/sse2,rapidjson,60860,5003,1528\nSerialize apache_builds.json,gcc x64/sse2,nlohmann,18000,5050,448\nSerialize apache_builds.json,gcc x64/sse2,nlohmann,17820,5003,447\nSerialize apache_builds.json,gcc x64/sse2,nlohmann,18690,5242,448\nSerialize apache_builds.json,gcc x64/sse2,nlohmann,17820,5024,445\nSerialize apache_builds.json,gcc x64/sse2,nlohmann,18606,5205,449\nSerialize apache_builds.json,gcc x64/sse2,nlohmann,17860,5034,446\nSerialize canada.json,gcc x64/sse2,boost (pool),2000,7511,572\nSerialize canada.json,gcc x64/sse2,boost (pool),1320,5034,563\nSerialize canada.json,gcc x64/sse2,boost (pool),1365,5211,562\nSerialize canada.json,gcc x64/sse2,boost (pool),1365,5211,562\nSerialize canada.json,gcc x64/sse2,boost (pool),1365,5206,563\nSerialize canada.json,gcc x64/sse2,boost (pool),1365,5200,564\nSerialize canada.json,gcc x64/sse2,boost,2000,7726,556\nSerialize canada.json,gcc x64/sse2,boost,1280,5083,541\nSerialize canada.json,gcc x64/sse2,boost,1302,5175,540\nSerialize canada.json,gcc x64/sse2,boost,1302,5164,541\nSerialize canada.json,gcc x64/sse2,boost,1323,5239,542\nSerialize canada.json,gcc x64/sse2,boost,1260,5003,541\nSerialize canada.json,gcc x64/sse2,rapidjson (pool),1000,6305,340\nSerialize canada.json,gcc x64/sse2,rapidjson (pool),780,5002,335\nSerialize canada.json,gcc x64/sse2,rapidjson (pool),798,5117,335\nSerialize canada.json,gcc x64/sse2,rapidjson (pool),798,5117,335\nSerialize canada.json,gcc x64/sse2,rapidjson (pool),798,5133,334\nSerialize canada.json,gcc x64/sse2,rapidjson (pool),798,5122,334\nSerialize canada.json,gcc x64/sse2,rapidjson,1000,6376,337\nSerialize canada.json,gcc x64/sse2,rapidjson,780,5118,327\nSerialize canada.json,gcc x64/sse2,rapidjson,798,5230,328\nSerialize canada.json,gcc x64/sse2,rapidjson,798,5237,327\nSerialize canada.json,gcc x64/sse2,rapidjson,798,5237,327\nSerialize canada.json,gcc x64/sse2,rapidjson,798,5236,327\nSerialize canada.json,gcc x64/sse2,nlohmann,1000,9690,222\nSerialize canada.json,gcc x64/sse2,nlohmann,400,5180,166\nSerialize canada.json,gcc x64/sse2,nlohmann,361,5060,153\nSerialize canada.json,gcc x64/sse2,nlohmann,357,5190,148\nSerialize canada.json,gcc x64/sse2,nlohmann,357,5180,148\nSerialize canada.json,gcc x64/sse2,nlohmann,357,5196,147\nSerialize citm_catalog.json,gcc x64/sse2,boost (pool),11000,5206,3480\nSerialize citm_catalog.json,gcc x64/sse2,boost (pool),11088,5243,3484\nSerialize citm_catalog.json,gcc x64/sse2,boost (pool),10560,5020,3465\nSerialize citm_catalog.json,gcc x64/sse2,boost (pool),10500,5016,3448\nSerialize citm_catalog.json,gcc x64/sse2,boost (pool),10983,5211,3472\nSerialize citm_catalog.json,gcc x64/sse2,boost (pool),11046,5243,3470\nSerialize citm_catalog.json,gcc x64/sse2,boost,10000,5018,3283\nSerialize citm_catalog.json,gcc x64/sse2,boost,9960,5024,3266\nSerialize citm_catalog.json,gcc x64/sse2,boost,10395,5243,3266\nSerialize citm_catalog.json,gcc x64/sse2,boost,9900,5034,3239\nSerialize citm_catalog.json,gcc x64/sse2,boost,10311,5212,3259\nSerialize citm_catalog.json,gcc x64/sse2,boost,10374,5243,3259\nSerialize citm_catalog.json,gcc x64/sse2,rapidjson (pool),8000,5354,2461\nSerialize citm_catalog.json,gcc x64/sse2,rapidjson (pool),7460,5018,2449\nSerialize citm_catalog.json,gcc x64/sse2,rapidjson (pool),7791,5237,2450\nSerialize citm_catalog.json,gcc x64/sse2,rapidjson (pool),7791,5221,2458\nSerialize citm_catalog.json,gcc x64/sse2,rapidjson (pool),7460,5018,2449\nSerialize citm_catalog.json,gcc x64/sse2,rapidjson (pool),7791,5237,2450\nSerialize citm_catalog.json,gcc x64/sse2,rapidjson,8000,5314,2480\nSerialize citm_catalog.json,gcc x64/sse2,rapidjson,7520,5003,2476\nSerialize citm_catalog.json,gcc x64/sse2,rapidjson,7500,5018,2462\nSerialize citm_catalog.json,gcc x64/sse2,rapidjson,7460,5008,2454\nSerialize citm_catalog.json,gcc x64/sse2,rapidjson,7812,5221,2465\nSerialize citm_catalog.json,gcc x64/sse2,rapidjson,7854,5246,2466\nSerialize citm_catalog.json,gcc x64/sse2,nlohmann,4000,5274,1249\nSerialize citm_catalog.json,gcc x64/sse2,nlohmann,3780,5174,1203\nSerialize citm_catalog.json,gcc x64/sse2,nlohmann,3822,5243,1201\nSerialize citm_catalog.json,gcc x64/sse2,nlohmann,3822,5227,1204\nSerialize citm_catalog.json,gcc x64/sse2,nlohmann,3822,5237,1202\nSerialize citm_catalog.json,gcc x64/sse2,nlohmann,3822,5222,1206\nSerialize github_events.json,gcc x64/sse2,boost (pool),165000,5024,2084\nSerialize github_events.json,gcc x64/sse2,boost (pool),172410,5227,2093\nSerialize github_events.json,gcc x64/sse2,boost (pool),173166,5230,2101\nSerialize github_events.json,gcc x64/sse2,boost (pool),165540,5018,2093\nSerialize github_events.json,gcc x64/sse2,boost (pool),164940,5117,2045\nSerialize github_events.json,gcc x64/sse2,boost (pool),169218,5142,2088\nSerialize github_events.json,gcc x64/sse2,boost,163000,5018,2061\nSerialize github_events.json,gcc x64/sse2,boost,170520,5227,2070\nSerialize github_events.json,gcc x64/sse2,boost,163100,5008,2066\nSerialize github_events.json,gcc x64/sse2,boost,170961,5237,2071\nSerialize github_events.json,gcc x64/sse2,boost,163220,5003,2070\nSerialize github_events.json,gcc x64/sse2,boost,163120,5008,2066\nSerialize github_events.json,gcc x64/sse2,rapidjson (pool),116000,5008,1469\nSerialize github_events.json,gcc x64/sse2,rapidjson (pool),115800,5096,1442\nSerialize github_events.json,gcc x64/sse2,rapidjson (pool),119280,5111,1481\nSerialize github_events.json,gcc x64/sse2,rapidjson (pool),116680,5023,1474\nSerialize github_events.json,gcc x64/sse2,rapidjson (pool),121947,5239,1477\nSerialize github_events.json,gcc x64/sse2,rapidjson (pool),116380,5009,1474\nSerialize github_events.json,gcc x64/sse2,rapidjson,131000,5023,1655\nSerialize github_events.json,gcc x64/sse2,rapidjson,130400,5002,1654\nSerialize github_events.json,gcc x64/sse2,rapidjson,136857,5226,1661\nSerialize github_events.json,gcc x64/sse2,rapidjson,130920,5023,1654\nSerialize github_events.json,gcc x64/sse2,rapidjson,136836,5227,1661\nSerialize github_events.json,gcc x64/sse2,rapidjson,130880,5008,1658\nSerialize github_events.json,gcc x64/sse2,nlohmann,33000,5086,412\nSerialize github_events.json,gcc x64/sse2,nlohmann,34062,5223,414\nSerialize github_events.json,gcc x64/sse2,nlohmann,34230,5237,415\nSerialize github_events.json,gcc x64/sse2,nlohmann,32680,5070,409\nSerialize github_events.json,gcc x64/sse2,nlohmann,32220,5008,408\nSerialize github_events.json,gcc x64/sse2,nlohmann,33768,5174,414\nSerialize gsoc-2018.json,gcc x64/sse2,boost (pool),4000,6142,2081\nSerialize gsoc-2018.json,gcc x64/sse2,boost (pool),3240,5055,2048\nSerialize gsoc-2018.json,gcc x64/sse2,boost (pool),3200,5011,2041\nSerialize gsoc-2018.json,gcc x64/sse2,boost (pool),3339,5221,2044\nSerialize gsoc-2018.json,gcc x64/sse2,boost (pool),3339,5196,2053\nSerialize gsoc-2018.json,gcc x64/sse2,boost (pool),3200,5008,2042\nSerialize gsoc-2018.json,gcc x64/sse2,boost,4000,6292,2031\nSerialize gsoc-2018.json,gcc x64/sse2,boost,3160,5072,1991\nSerialize gsoc-2018.json,gcc x64/sse2,boost,3255,5227,1990\nSerialize gsoc-2018.json,gcc x64/sse2,boost,3255,5221,1992\nSerialize gsoc-2018.json,gcc x64/sse2,boost,3255,5227,1990\nSerialize gsoc-2018.json,gcc x64/sse2,boost,3255,5243,1984\nSerialize gsoc-2018.json,gcc x64/sse2,rapidjson (pool),5000,5394,2962\nSerialize gsoc-2018.json,gcc x64/sse2,rapidjson (pool),4620,5097,2896\nSerialize gsoc-2018.json,gcc x64/sse2,rapidjson (pool),4746,5227,2901\nSerialize gsoc-2018.json,gcc x64/sse2,rapidjson (pool),4746,5247,2890\nSerialize gsoc-2018.json,gcc x64/sse2,rapidjson (pool),4746,5219,2906\nSerialize gsoc-2018.json,gcc x64/sse2,rapidjson (pool),4540,5008,2897\nSerialize gsoc-2018.json,gcc x64/sse2,rapidjson,5000,5065,3154\nSerialize gsoc-2018.json,gcc x64/sse2,rapidjson,4920,5129,3065\nSerialize gsoc-2018.json,gcc x64/sse2,rapidjson,5019,5206,3081\nSerialize gsoc-2018.json,gcc x64/sse2,rapidjson,4820,5024,3066\nSerialize gsoc-2018.json,gcc x64/sse2,rapidjson,5019,5220,3072\nSerialize gsoc-2018.json,gcc x64/sse2,rapidjson,4800,5003,3066\nSerialize gsoc-2018.json,gcc x64/sse2,nlohmann,1000,8195,390\nSerialize gsoc-2018.json,gcc x64/sse2,nlohmann,600,5246,365\nSerialize gsoc-2018.json,gcc x64/sse2,nlohmann,588,5143,365\nSerialize gsoc-2018.json,gcc x64/sse2,nlohmann,588,5158,364\nSerialize gsoc-2018.json,gcc x64/sse2,nlohmann,588,5164,364\nSerialize gsoc-2018.json,gcc x64/sse2,nlohmann,588,5152,365\nSerialize instruments.json,gcc x64/sse2,boost (pool),55000,5050,2376\nSerialize instruments.json,gcc x64/sse2,boost (pool),57162,5243,2378\nSerialize instruments.json,gcc x64/sse2,boost (pool),54500,5050,2354\nSerialize instruments.json,gcc x64/sse2,boost (pool),56658,5190,2382\nSerialize instruments.json,gcc x64/sse2,boost (pool),57309,5242,2385\nSerialize instruments.json,gcc x64/sse2,boost (pool),54660,5003,2383\nSerialize instruments.json,gcc x64/sse2,boost,52000,5002,2268\nSerialize instruments.json,gcc x64/sse2,boost,54558,5133,2319\nSerialize instruments.json,gcc x64/sse2,boost,55797,5242,2322\nSerialize instruments.json,gcc x64/sse2,boost,53220,5003,2321\nSerialize instruments.json,gcc x64/sse2,boost,53180,5008,2317\nSerialize instruments.json,gcc x64/sse2,boost,53080,5008,2312\nSerialize instruments.json,gcc x64/sse2,rapidjson (pool),34000,5097,1455\nSerialize instruments.json,gcc x64/sse2,rapidjson (pool),33340,5003,1454\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost Lambda Library with CMake\nDESCRIPTION: Sets up the Boost Lambda library project using CMake. It defines the project, creates library targets, sets include directories, and specifies dependencies on other Boost libraries. Also includes conditional testing setup.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/lambda/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.16)\n\nproject(boost_lambda VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n\nadd_library(boost_lambda INTERFACE)\nadd_library(Boost::lambda ALIAS boost_lambda)\n\ntarget_include_directories(boost_lambda INTERFACE include)\n\ntarget_link_libraries(boost_lambda\n  INTERFACE\n    Boost::bind\n    Boost::config\n    Boost::core\n    Boost::detail\n    Boost::iterator\n    Boost::mpl\n    Boost::preprocessor\n    Boost::tuple\n    Boost::type_traits\n    Boost::utility\n)\n\nif(BUILD_TESTING AND EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/test/CMakeLists.txt\")\n\n  add_subdirectory(test)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building ArangoImport Executable\nDESCRIPTION: Configures the main arangoimport executable build settings including source files and dependencies. Links against system libraries, boost components, and custom ArangoDB libraries.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/client-tools/Import/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(${BIN_ARANGOIMPORT}\n  ${ProductVersionFiles_arangoimport}\n  ImportFeature.cpp\n  arangoimport.cpp\n)\ntarget_include_directories(${BIN_ARANGOIMPORT} PRIVATE ${PROJECT_SOURCE_DIR}/client-tools)\n\ntarget_link_libraries(${BIN_ARANGOIMPORT}\n  ${SYSTEM_LIBRARIES}\n  boost_system\n  boost_boost\n  arango_shell\n  arangoimport_utils\n  clienttools_utils\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Version Macros for Boost HOF in C++\nDESCRIPTION: This code snippet defines version macros for the Boost HOF library. It includes major, minor, and patch version numbers, as well as a combined version number using bitwise operations.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/version.hpp.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n#ifndef BOOST_HOF_GUARD_VERSION_HPP\n#define BOOST_HOF_GUARD_VERSION_HPP\n\n#define BOOST_HOF_VERSION_MAJOR 0\n#define BOOST_HOF_VERSION_MINOR 6\n#define BOOST_HOF_VERSION_PATCH 0\n#define BOOST_HOF_VERSION (((BOOST_HOF_VERSION_MAJOR) << 24) + ((BOOST_HOF_VERSION_MINOR) << 16) + (BOOST_HOF_VERSION_PATCH))\n\n#endif\n```\n\n----------------------------------------\n\nTITLE: Configuring Qt Examples in CMake\nDESCRIPTION: Handles Qt framework detection and configuration, supporting both Qt4 and Qt5. Sets up build targets for Qt-specific examples with appropriate framework linkage.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/compute/example/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(${BOOST_COMPUTE_HAVE_QT})\n  find_package(Qt4 QUIET)\n\n  if(${QT4_FOUND})\n    find_package(Qt4 REQUIRED COMPONENTS QtCore QtGui QtOpenGL)\n    set(QT_USE_QTOPENGL TRUE)\n    include(${QT_USE_FILE})\n  else()\n    find_package(Qt5Widgets QUIET)\n\n    if(${Qt5Widgets_FOUND})\n      find_package(Qt5Core REQUIRED)\n      find_package(Qt5Widgets REQUIRED)\n      find_package(Qt5OpenGL REQUIRED)\n      include_directories(${Qt5OpenGL_INCLUDE_DIRS})\n      set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${Qt5OpenGL_EXECUTABLE_COMPILE_FLAGS}\")\n      set(QT_LIBRARIES ${Qt5OpenGL_LIBRARIES})\n    else()\n      message(FATAL_ERROR \"Error: Did not find Qt4 or Qt5\")\n    endif()\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Deprecated List Generation in Doxygen\nDESCRIPTION: This option enables or disables the generation of the deprecated list, created by \\deprecated commands. Setting it to YES enables the list.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/sort/doc/doxygen/sort_doxyfile.txt#2025-04-22_snippet_52\n\nLANGUAGE: Doxygen\nCODE:\n```\n\"GENERATE_DEPRECATEDLIST= YES\"\n```\n\n----------------------------------------\n\nTITLE: Configuring VocBase Test Sources in CMake\nDESCRIPTION: Defines the source files for VocBase properties tests, including various clustering and collection property test files along with the DataSourceId implementation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/VocBase/Properties/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(ARANGODB_VOCBASE_PROPERTIES_TEST_SOURCES\n        ClusteringConstantPropertiesTest.cpp\n        ClusteringMutablePropertiesTest.cpp\n        ClusteringPropertiesTest.cpp\n        CollectionPropertiesTest.cpp\n        CollectionConstantPropertiesTest.cpp\n        CollectionMutablePropertiesTest.cpp\n        CollectionInternalPropertiesTest.cpp\n        CollectionCreateOptionsTest.cpp\n        CreateCollectionBodyTest.cpp\n        KeyGeneratorPropertiesTest.cpp\n\n        ${PROJECT_SOURCE_DIR}/arangod/VocBase/Identifiers/DataSourceId.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Include and Basic Headers Fixes\nDESCRIPTION: This entry addresses an include error in example code and fixes to the basic_headers for RFC2616 Section 4.2 compliance, enhancing the library's correctness and example usability.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/beast/CHANGELOG.md#2025-04-22_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: Defining Front Extensible Sequence Operations in C++\nDESCRIPTION: Specifications for the required operations of a Front Extensible Sequence, including push_front, pop_front, and front, along with their complexity requirements.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/FrontExtensibleSequence.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\npush_front<s,x>::type     // Front Extensible Sequence  - Amortized constant time\npop_front<s>::type        // Front Extensible Sequence  - Amortized constant time\nfront<s>::type            // Any type                   - Amortized constant time\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries to Boost Endian\nDESCRIPTION: This snippet specifies the libraries that the `boost_endian` library depends on. It links Boost::config, Boost::core, Boost::static_assert, and Boost::type_traits as interface dependencies, which means that dependent targets will also link against these libraries.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/endian/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n\"target_link_libraries(boost_endian\n  INTERFACE\n    Boost::config\n    Boost::core\n    Boost::static_assert\n    Boost::type_traits\n)\"\n```\n\n----------------------------------------\n\nTITLE: Decorator Template Declaration\nDESCRIPTION: Template declaration for decorators that return function adaptors. The return type may be an unspecified or private type.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/src/definitions.md#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate<class... Ts>\nFunctionAdaptor Decorator(Ts...);\n```\n\n----------------------------------------\n\nTITLE: Defining Ogham Unicode Block\nDESCRIPTION: Lists the code point ranges for the Ogham script in Unicode. This block contains 29 code points including space mark, letters, and feather marks used as brackets.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/spirit/workbench/unicode/Scripts.txt#2025-04-22_snippet_13\n\nLANGUAGE: unicode\nCODE:\n```\n1680          ; Ogham # Zs       OGHAM SPACE MARK\n1681..169A    ; Ogham # Lo  [26] OGHAM LETTER BEITH..OGHAM LETTER PEITH\n169B          ; Ogham # Ps       OGHAM FEATHER MARK\n169C          ; Ogham # Pe       OGHAM REVERSED FEATHER MARK\n```\n\n----------------------------------------\n\nTITLE: Adding Test Subdirectory\nDESCRIPTION: Conditionally includes the `test` subdirectory if building tests is enabled (`BUILD_TESTING`) and the `CMakeLists.txt` file exists in the test directory.  This allows for the inclusion of unit tests as part of the build process.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/geometry/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n\"if(BUILD_TESTING AND EXISTS \\\"${CMAKE_CURRENT_SOURCE_DIR}/test/CMakeLists.txt\\\")\n\n  add_subdirectory(test)\n\nendif()\"\n```\n\n----------------------------------------\n\nTITLE: Building and Running clang-tidy Checks\nDESCRIPTION: This snippet outlines the steps to run 'clang-tidy' on the Boost.GIL library, including the commands to enable clang-tidy checks during the build process via CMake.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/CONTRIBUTING.md#2025-04-22_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\ncd libs/gil\ncmake -S . -B _build -DGIL_USE_CLANG_TIDY=ON\ncmake --build _build\ncmake --build _build --target test_headers_all_in_one\n```\n\n----------------------------------------\n\nTITLE: Defining ColorBaseConcept in C++\nDESCRIPTION: This snippet defines the ColorBaseConcept, which is a C++ concept that ensures a type is copy constructible and equality comparable. It provides a formal structure for creating color bases with associated methods for accessing elements and comparing instances.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/color_base.rst.txt#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nconcept ColorBaseConcept<typename T>\n    : CopyConstructible<T>, EqualityComparable<T>\n{\n    // a GIL layout (the color space and element permutation)\n    typename layout_t;\n\n    // The type of K-th element\n    template <int K> struct kth_element_type;\n        where Metafunction<kth_element_type>;\n\n    // The result of at_c\n    template <int K> struct kth_element_const_reference_type;\n        where Metafunction<kth_element_const_reference_type>;\n\n    template <int K> kth_element_const_reference_type<T,K>::type at_c(T);\n\n    template <ColorBaseConcept T2> where { ColorBasesCompatibleConcept<T,T2> }\n        T::T(T2);\n    template <ColorBaseConcept T2> where { ColorBasesCompatibleConcept<T,T2> }\n        bool operator==(const T&, const T2&);\n    template <ColorBaseConcept T2> where { ColorBasesCompatibleConcept<T,T2> }\n        bool operator!=(const T&, const T2&);\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Sorted R-MAT Iterator in C++\nDESCRIPTION: This C++ code defines the `sorted_rmat_iterator` class template. This iterator generates edges for an R-MAT graph. It takes a random number generator, graph type, and an edge predicate as template parameters. The class provides standard iterator operations such as dereferencing, incrementing, and comparison.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/sorted_rmat_generator.rst#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n template<typename RandomGenerator, typename Graph,\n           typename EdgePredicate = keep_all_edges>\n  class sorted_rmat_iterator\n  {\n  public:\n    typedef std::input_iterator_tag iterator_category;\n    typedef std::pair<vertices_size_type, vertices_size_type> value_type;\n    typedef const value_type& reference;\n    typedef const value_type* pointer;\n    typedef void difference_type;\n\n    sorted_rmat_iterator();\n    sorted_rmat_iterator(RandomGenerator& gen, vertices_size_type n, \n                         edges_size_type m, double a, double b, double c, \n                         double d, bool permute_vertices = true);\n    // Iterator operations\n    reference operator*() const;\n    pointer operator->() const;\n    sorted_rmat_iterator& operator++();\n    sorted_rmat_iterator operator++(int);\n    bool operator==(const sorted_rmat_iterator& other) const;\n    bool operator!=(const sorted_rmat_iterator& other) const;\n };\n```\n\n----------------------------------------\n\nTITLE: Dependency Management with Conan\nDESCRIPTION: This section handles dependency management using Conan. It downloads `conan.cmake` if it doesn't exist and then uses `conan_cmake_run` to install dependencies specified in `conanfile.txt`. It also adjusts `CMAKE_BUILD_TYPE` for compatibility with Conan.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/CMakeLists.txt#2025-04-22_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\n\"if(BOOST_GIL_USE_CONAN)\n  # Download automatically, you can also just copy the conan.cmake file\n  if(NOT EXISTS \\\"${CMAKE_BINARY_DIR}/conan.cmake\\\")\n    message(STATUS \\\"Boost.GIL: Downloading conan.cmake from https://github.com/conan-io/cmake-conan\\\")\n    file(DOWNLOAD \\\"https://raw.githubusercontent.com/conan-io/cmake-conan/v0.15/conan.cmake\\\"\n      \\\"${CMAKE_BINARY_DIR}/conan.cmake\\\")\n  endif()\n\n  # NOTE: See RelWithDebInfo for Release builds, http://docs.conan.io/en/latest/howtos/vs2017_cmake.html\n  set(_build_type_saved ${CMAKE_BUILD_TYPE})\n  if(CMAKE_BUILD_TYPE STREQUAL \\\"MinSizeRel\\\" OR CMAKE_BUILD_TYPE STREQUAL \\\"RelWithDebInfo\\\")\n    set(CMAKE_BUILD_TYPE \\\"Release\\\")\n  endif()\n\n  include(${CMAKE_BINARY_DIR}/conan.cmake)\n  conan_cmake_run(CONANFILE conanfile.txt BASIC_SETUP CMAKE_TARGETS BUILD missing)\n\n  set(CMAKE_BUILD_TYPE ${_build_type_saved})\n  unset(_build_type_saved)\nendif()\"\n```\n\n----------------------------------------\n\nTITLE: Copyright and Maintainer List Configuration\nDESCRIPTION: Shell script header containing copyright notice and documentation about the purpose of the maintainers list file. Used by regression-reporting scripts to route library-specific emails to appropriate maintainers.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/maintainers.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Copyright (C) 2005, 2007  Douglas Gregor <doug.gregor -at- gmail.com>\n# Distributed under the Boost Software License, Version 1.0. \n# See www.boost.org/LICENSE_1_0.txt\n#\n# This file lists the names and e-mail addresses of the maintainers\n# of each Boost library, and is used by the regression-reporting \n# scripts to direct e-mail related to those libraries to the \n# maintainers.\n#\n```\n\n----------------------------------------\n\nTITLE: Creating Option Printing Function in CMake\nDESCRIPTION: Defines a function that prints the current value of a specified option, but only if the value has changed since the last time it was printed, to avoid redundant output.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/date/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfunction( print_option OPT )\n\tif ( NOT DEFINED PRINT_OPTION_CURR_${OPT} OR ( NOT PRINT_OPTION_CURR_${OPT} STREQUAL ${OPT} ) )\n\t\tset( PRINT_OPTION_CURR_${OPT} ${${OPT}} CACHE BOOL \"\" )\n\t\tmark_as_advanced(PRINT_OPTION_CURR_${OPT})\n\t\tmessage( \"# date: ${OPT} ${${OPT}}\" )\n\tendif( )\nendfunction( )\n```\n\n----------------------------------------\n\nTITLE: Including is_sequence Header in C++\nDESCRIPTION: Shows how to include the header file for the is_sequence metafunction in a C++ program.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/is_sequence.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/is_sequence.hpp>\n```\n\n----------------------------------------\n\nTITLE: Configuring Snappy Compression Library Build\nDESCRIPTION: Function to configure and build the Snappy compression library with specific version and build options. Disables testing, benchmarks and sets processor optimization flags.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfunction (add_snappy)\n  add_c_flags_if_supported(CMAKE_C_FLAGS -Wno-suggest-override -Wno-sign-compare)\n  add_cxx_flags_if_supported(CMAKE_CXX_FLAGS -Wno-suggest-override -Wno-sign-compare)\n  set(SNAPPY_VERSION \"1.1.9\")\n  set(SNAPPY_SOURCE_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/snappy/snappy-${SNAPPY_VERSION}\")\n  set(SNAPPY_SOURCE_DIR \"${SNAPPY_SOURCE_DIR}\" PARENT_SCOPE)\n  set(SNAPPY_BUILD_DIR \"${CMAKE_CURRENT_BINARY_DIR}/snappy/snappy-${SNAPPY_VERSION}\" PARENT_SCOPE)\n  set(SNAPPY_LIB \"snappy\")\n  set(SNAPPY_FUZZING_BUILD OFF CACHE BOOL \"build Snappy for fuzzing\")\n  set(SNAPPY_BUILD_TESTS OFF CACHE BOOL \"disable Snappy tests\" FORCE)\n  set(SNAPPY_BUILD_BENCHMARKS OFF CACHE BOOL \"disable Snappy benchmarks\" FORCE)\n  set(SNAPPY_INSTALL OFF CACHE BOOL \"disable Snappy installation\")\n  set(SNAPPY_REQUIRE_AVX ON CACHE BOOL \"target processors with AVX support\" FORCE)\n  set(SNAPPY_REQUIRE_AVX2 OFF CACHE BOOL \"target processors with AVX2 support\" FORCE)\n  set(SNAPPY_HAVE_BMI2 OFF CACHE BOOL \"target processors with BMI2 support\" FORCE)\n  add_subdirectory(${SNAPPY_SOURCE_DIR})\nendfunction ()\n```\n\n----------------------------------------\n\nTITLE: Commit index_map_predicate Metafunction for Index Map Validation\nDESCRIPTION: This meta class checks if an index map adheres to integral types for its values and matches the expected graph vertex descriptor for keys. It uses Boost property traits for validation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/index.rst#2025-04-22_snippet_19\n\nLANGUAGE: C++\nCODE:\n```\nstruct index_map_predicate\n{\n    template <typename T, typename Args>\n    struct apply\n      : boost::mpl::eval_if<\n            boost::is_integral<\n                typename boost::property_traits<T>::value_type\n            >\n          , boost::mpl::if_<\n                boost::is_same<\n                    typename boost::property_traits<T>::key_type\n                  , typename boost::graph_traits<\n                        typename boost::parameter::value_type<\n                            Args\n                          , graphs::graph\n                        >::type\n                    >::vertex_descriptor\n                >\n              , boost::mpl::true_\n              , boost::mpl::false_\n            >\n        >\n    {\n    };\n};\n```\n\n----------------------------------------\n\nTITLE: Example Output from concat-map Operation\nDESCRIPTION: Shows the resulting array after applying the concatenative mapping function to the input array, demonstrating how the odd numbers are transformed and even numbers are filtered out.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/js/node/node_modules/minimatch/node_modules/concat-map/README.markdown#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n[ 0.9, 1, 1.1, 2.9, 3, 3.1, 4.9, 5, 5.1 ]\n```\n\n----------------------------------------\n\nTITLE: Result Adaptor Template Implementation for Non-void Types\nDESCRIPTION: Template class implementing the result adaptor for non-void return types. Inherits from callable_base and provides result_type typedef and function call operator.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/result.hpp.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<class Result, class F>\nstruct result_adaptor : detail::callable_base<F>\n{\n    BOOST_HOF_INHERIT_CONSTRUCTOR(result_adaptor, detail::callable_base<F>)\n\n    typedef Result result_type;\n\n    struct failure\n    : failure_for<detail::callable_base<F>>\n    {};\n\n    template<class... Ts>\n    constexpr const detail::callable_base<F>& base_function(Ts&&... xs) const\n    {\n        return boost::hof::always_ref(*this)(xs...);\n    }\n\n    template<class... Ts, class=typename std::enable_if<(boost::hof::is_invocable<F, Ts...>::value)>::type>\n    constexpr result_type operator()(Ts&&... xs) const\n    {\n        return this->base_function(xs...)(BOOST_HOF_FORWARD(Ts)(xs)...);\n    };\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Random Access Iterator Subtraction with Temporary in C++\nDESCRIPTION: This code snippet shows how to implement the '-' operator for a Random Access Traversal iterator using a temporary object and the '-=' operator.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/RandomAccessTraversal.rst#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\n{ X tmp = a; return tmp -= n; }\n```\n\n----------------------------------------\n\nTITLE: Initializing Client Package CMake Project\nDESCRIPTION: Sets up the initial CMake project configuration for the ArangoDB client package, including minimum CMake version requirement.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/cmake/packages/client/deb.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nproject(PACKAGE-CLIENT)\ncmake_minimum_required(VERSION 2.8)\n```\n\n----------------------------------------\n\nTITLE: Using Generated Ada Stemmer\nDESCRIPTION: Example of importing and using a generated English stemmer, demonstrating context creation, stemming a word, and retrieving the result\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/snowball/ada/README.md#2025-04-22_snippet_2\n\nLANGUAGE: Ada\nCODE:\n```\nwith Stemmer.English;\n\nCtx : Stemmer.English.Context_Type;\nResult : Boolean;\n\nCtx.Stem_Word (\"zealously\", Result);\nif Result then\n   Ada.Text_IO.Put_Line (Ctx.Get_Result);\nend if;\n```\n\n----------------------------------------\n\nTITLE: Adding V8 Build Dependency in CMake\nDESCRIPTION: Conditionally adds a build dependency on v8_build if not using precompiled V8 binaries, ensuring V8 is built before the test target.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/CMakeLists.txt#2025-04-22_snippet_29\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT USE_PRECOMPILED_V8)\n  add_dependencies(arangodbtests v8_build)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Basic Usage Example of concat-map in JavaScript\nDESCRIPTION: Demonstrates how to use concat-map to filter and transform an array, returning only odd numbers with additional decimal variations and filtering out even numbers completely.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/js/node/node_modules/minimatch/node_modules/concat-map/README.markdown#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar concatMap = require('concat-map');\nvar xs = [ 1, 2, 3, 4, 5, 6 ];\nvar ys = concatMap(xs, function (x) {\n    return x % 2 ? [ x - 0.1, x, x + 0.1 ] : [];\n});\nconsole.dir(ys);\n```\n\n----------------------------------------\n\nTITLE: Alternative Parameter Naming Convention in Boost.Parameter\nDESCRIPTION: This code demonstrates an alternative syntax for naming parameters in Boost.Parameter when you don't want to use the leading underscore convention or need the tag namespace for something else.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/index.rst#2025-04-22_snippet_35\n\nLANGUAGE: cpp\nCODE:\n```\nBOOST_PARAMETER_NAME(\n    (\n        pass_foo, keywords\n    ) foo\n)\n\nBOOST_PARAMETER_FUNCTION(\n    (int), f, \n    keywords, (required (foo, *))\n)\n{\n    return foo + 1;\n}\n\nint x = f(pass_foo = 41);\n```\n\n----------------------------------------\n\nTITLE: Codecvt API Reference\nDESCRIPTION: Reference to the std::codecvt API used for character set conversion in streams.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/doc/rationale.txt#2025-04-22_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nstd::codecvt\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Limbu Script Character Ranges\nDESCRIPTION: Lists Unicode character ranges for the Limbu script, including letters, vowel signs, small letters, digits, and punctuation marks. Limbu script is used by the Limbu people of eastern Nepal and northeastern India.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/spirit/workbench/unicode/Scripts.txt#2025-04-22_snippet_30\n\nLANGUAGE: unicode\nCODE:\n```\n1900..191C    ; Limbu # Lo  [29] LIMBU VOWEL-CARRIER LETTER..LIMBU LETTER HA\n1920..1922    ; Limbu # Mn   [3] LIMBU VOWEL SIGN A..LIMBU VOWEL SIGN U\n1923..1926    ; Limbu # Mc   [4] LIMBU VOWEL SIGN EE..LIMBU VOWEL SIGN AU\n1927..1928    ; Limbu # Mn   [2] LIMBU VOWEL SIGN E..LIMBU VOWEL SIGN O\n1929..192B    ; Limbu # Mc   [3] LIMBU SUBJOINED LETTER YA..LIMBU SUBJOINED LETTER WA\n1930..1931    ; Limbu # Mc   [2] LIMBU SMALL LETTER KA..LIMBU SMALL LETTER NGA\n1932          ; Limbu # Mn       LIMBU SMALL LETTER ANUSVARA\n1933..1938    ; Limbu # Mc   [6] LIMBU SMALL LETTER TA..LIMBU SMALL LETTER LA\n1939..193B    ; Limbu # Mn   [3] LIMBU SIGN MUKPHRENG..LIMBU SIGN SA-I\n1940          ; Limbu # So       LIMBU SIGN LOO\n1944..1945    ; Limbu # Po   [2] LIMBU EXCLAMATION MARK..LIMBU QUESTION MARK\n1946..194F    ; Limbu # Nd  [10] LIMBU DIGIT ZERO..LIMBU DIGIT NINE\n\n# Total code points: 66\n```\n\n----------------------------------------\n\nTITLE: Configuring S2 Geometry Library Version in CMake for ArangoDB\nDESCRIPTION: Sets the version of the S2 Geometry library to be used in the ArangoDB project. The version is set to 'master' with a specific commit hash.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/s2geometry/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(ARANGO_S2GEOMETRY_VERSION \"master\") # 254c13666f65f35f5343d34dfbc749e1fb7772ca\n```\n\n----------------------------------------\n\nTITLE: Configuring SIP Support in Doxygen\nDESCRIPTION: Setting to enable support for SIP (Python binding) sources. When enabled, Doxygen parses SIP like C++ but assumes public inheritance when no explicit protection keyword is present. Default is NO.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/sort/doc/doxygen/sort_doxyfile.txt#2025-04-22_snippet_16\n\nLANGUAGE: text\nCODE:\n```\nSIP_SUPPORT            = NO\n```\n\n----------------------------------------\n\nTITLE: Unique Algorithm Example Usage - C++\nDESCRIPTION: Example demonstrating how to use the unique algorithm with a vector of types to remove consecutive duplicates using is_same predicate.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/unique.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ntypedef vector<int,float,float,char,int,int,int,double> types;\ntypedef vector<int,float,char,int,double> expected;\ntypedef unique< types, is_same<_1,_2> >::type result;\n\nBOOST_MPL_ASSERT(( equal< result,expected > ));\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenCV Examples in CMake\nDESCRIPTION: Sets up build configuration for OpenCV-specific examples when OpenCV support is enabled. Configures include paths and links against OpenCV libraries.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/compute/example/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(${BOOST_COMPUTE_HAVE_OPENCV})\n  find_package(OpenCV REQUIRED)\n  include_directories(SYSTEM ${OpenCV_INCLUDE_DIRS})\n\n  set(OPENCV_EXAMPLES\n    k_means\n    opencv_flip\n    random_walk\n    opencv_optical_flow\n    opencv_convolution\n    opencv_sobel_filter\n    opencv_histogram\n  )\n\n  foreach(EXAMPLE ${OPENCV_EXAMPLES})\n    add_executable(${EXAMPLE} ${EXAMPLE}.cpp)\n    target_link_libraries(${EXAMPLE} ${OpenCL_LIBRARIES} ${Boost_LIBRARIES} ${OpenCV_LIBS})\n  endforeach()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Running Basic MPL Pre-processing with Boost Source Directory Path\nDESCRIPTION: Basic command to pre-process all MPL container types (vector, list, set, map) using the boost_mpl_preprocess.py script with the path to Boost source directory as an argument.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/preprocessed/README.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython boost_mpl_preprocess.py <path-to-boost-sourcedir>\n```\n\n----------------------------------------\n\nTITLE: Dynamic Property Map Interface Class in C++\nDESCRIPTION: An abstract interface class defining polymorphic methods for interacting with dynamic property maps, including type-safe key and value retrieval\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/property_map/doc/dynamic_property_map.rst#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\nclass dynamic_property_map\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Structure for Zip Iterator\nDESCRIPTION: ReStructuredText markup for documenting the Zip Iterator component, including metadata, header information, and document structure.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/zip_iterator.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. Distributed under the Boost\n.. Software License, Version 1.0. (See accompanying\n.. file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)\n\n+++++++++++++\n Zip Iterator\n+++++++++++++\n\n:Author: David Abrahams, Thomas Becker\n:Contact: dave@boost-consulting.com, thomas@styleadvisor.com\n:organization: `Boost Consulting`_, `Zephyr Associates, Inc.`_\n:date: $Date$\n:copyright: Copyright David Abrahams and Thomas Becker 2003.\n\n.. _`Boost Consulting`: http://www.boost-consulting.com\n.. _`Zephyr Associates, Inc.`: http://www.styleadvisor.com\n\n:abstract:\n\n  .. include:: zip_iterator_abstract.rst\n\n.. contents:: Table of Contents\n\n``zip_iterator`` synopsis\n...............................\n\n.. include:: zip_iterator_ref.rst\n.. include:: make_zip_iterator.rst\n.. include:: zip_iterator_eg.rst\n```\n\n----------------------------------------\n\nTITLE: object-inspect API Documentation\nDESCRIPTION: Shows the main function signature and describes its options for controlling depth, quote style, string length limits, custom inspection methods, indentation, and numeric separators.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/js/node/node_modules/qs/node_modules/object-inspect/readme.markdown#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar s = inspect(obj, opts={})\n```\n\n----------------------------------------\n\nTITLE: Defining private target sources with CMake\nDESCRIPTION: This snippet uses the `target_sources` command in CMake to specify the source files required to build the `arango_graph` target. The `PRIVATE` keyword indicates that these source files are only used internally within the `arango_graph` target and are not exposed to other targets that depend on it. This helps in encapsulation and reduces the risk of unintended dependencies.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/Graph/Options/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(arango_graph PRIVATE\n  OneSidedEnumeratorOptions.cpp\n  TwoSidedEnumeratorOptions.cpp)\n```\n\n----------------------------------------\n\nTITLE: Specifying Documentation Dependencies in requirements.txt\nDESCRIPTION: This requirements file lists the Python packages needed for documentation generation. It specifies Sphinx version 1.5.x, a custom fork of recommonmark, and sphinx-boost version greater than 0.0.2.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nsphinx>=1.5,<1.6\n# recommonmark==0.4.0\ngit+https://github.com/pfultz2/recommonmark@develop\nsphinx-boost>0.0.2\n```\n\n----------------------------------------\n\nTITLE: Configuring Test List Generation in Doxygen\nDESCRIPTION: This option enables or disables the generation of the test list, created by \\test commands. Setting it to YES enables the list.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/sort/doc/doxygen/sort_doxyfile.txt#2025-04-22_snippet_50\n\nLANGUAGE: Doxygen\nCODE:\n```\n\"GENERATE_TESTLIST      = YES\"\n```\n\n----------------------------------------\n\nTITLE: Initializing RGB and BGR Pixel Operations in C++\nDESCRIPTION: This snippet demonstrates the creation and manipulation of RGB and BGR pixel values using the GIL library. It includes assertions to verify the properties of pixel values and showcases pointer and reference operations for pixel channels.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/examples.rst.txt#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nrgb8_pixel_t p1(255,0,0);     // make a red RGB pixel\nbgr8_pixel_t p2 = p1;         // RGB and BGR are compatible and the channels will be properly mapped.\nassert(p1==p2);               // p2 will also be red.\nassert(p2[0]!=p1[0]);         // operator[] gives physical channel order (as laid down in memory)\nassert(semantic_at_c<0>(p1)==semantic_at_c<0>(p2)); // this is how to compare the two red channels\nget_color(p1,green_t()) = get_color(p2,blue_t());  // channels can also be accessed by name\n\nconst unsigned char* r;\nconst unsigned char* g;\nconst unsigned char* b;\nrgb8c_planar_ptr_t ptr(r,g,b); // constructing const planar pointer from const pointers to each plane\n\nrgb8c_planar_ref_t ref=*ptr;   // just like built-in reference, dereferencing a planar pointer returns a planar reference\n\np2=ref; p2=p1; p2=ptr[7]; p2=rgb8_pixel_t(1,2,3);    // planar/interleaved references and values to RGB/BGR can be freely mixed\n```\n\n----------------------------------------\n\nTITLE: Formatting Currency and Date in C++ with Boost.Locale\nDESCRIPTION: Demonstrates how to use Boost.Locale to format currency and date-time values in a natural C++ way using iostream manipulators.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/doc/rationale.txt#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\ncout << \"You have \"<<as::currency << 134.45 << \" in your account as of \"<<as::datetime << std::time(0) << endl;\n```\n\n----------------------------------------\n\nTITLE: Using max Metafunction in C++ Expression\nDESCRIPTION: Demonstrates the usage of the max metafunction in a C++ expression, where x and y are arbitrary types.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/max.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntypedef max<x,y>::type r;\n```\n\n----------------------------------------\n\nTITLE: Defining Appendix Structure in C++ Documentation\nDESCRIPTION: This code snippet defines the structure of an appendix section for the ArangoDB project documentation using Doxygen-style comments. It includes a table of contents with links to various subsections.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/doc/appendix.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n/*!\\n\\page appendix Appendix\\n\\n\\section appendix_toc Table of Contents \\n\\n- \\subpage rationale\\n- \\subpage faq\\n- \\subpage default_encoding_under_windows\\n- \\subpage running_examples_under_windows \\n- \\subpage gettext_for_windows \\n- \\subpage glossary\\n- \\subpage tested_compilers_and_paltforms \\n- \\subpage status_of_cpp0x_characters_support\\n- \\subpage special_thanks\\n\\n*/\n```\n\n----------------------------------------\n\nTITLE: Defining the Boost Function Project and its Interface Library\nDESCRIPTION: This snippet sets the minimum required CMake version and defines the Boost Function project, specifying the necessary languages. It also creates an interface library for Boost Function and sets its alias.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/function/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.16)\n\nproject(boost_function VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n\nadd_library(boost_function INTERFACE)\nadd_library(Boost::function ALIAS boost_function)\n```\n\n----------------------------------------\n\nTITLE: Defining Filter Iterator Template in C++\nDESCRIPTION: Declares a class template for filter_iterator, which selectively iterates over elements that satisfy a given predicate, skipping those that don't.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/facade-and-adaptor.rst#2025-04-22_snippet_7\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <class Predicate, class Iterator>\nclass filter_iterator;\n```\n\n----------------------------------------\n\nTITLE: Bit-Aligned Image Metafunctions in GIL (C++)\nDESCRIPTION: These template structures define metafunctions in the Generic Image Library (GIL) for creating bit-aligned images with up to five channels. The metafunctions are parameterized by the size of each channel and the image layout, and allocator, providing flexibility in defining images with non-standard bit depths for each channel.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/metafunctions.rst#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <unsigned Size1,\n        typename Layout, typename Alloc=std::allocator<unsigned char> >\nstruct bit_aligned_image1_type { typedef ... type; };\n\ntemplate <unsigned Size1, unsigned Size2,\n        typename Layout, typename Alloc=std::allocator<unsigned char> >\nstruct bit_aligned_image2_type { typedef ... type; };\n\ntemplate <unsigned Size1, unsigned Size2, unsigned Size3,\n        typename Layout, typename Alloc=std::allocator<unsigned char> >\nstruct bit_aligned_image3_type { typedef ... type; };\n\ntemplate <unsigned Size1, unsigned Size2, unsigned Size3, unsigned Size4,\n        typename Layout, typename Alloc=std::allocator<unsigned char> >\nstruct bit_aligned_image4_type { typedef ... type; };\n\ntemplate <unsigned Size1, unsigned Size2, unsigned Size3, unsigned Size4, unsigned Size5,\n        typename Layout, typename Alloc=std::allocator<unsigned char> >\nstruct bit_aligned_image5_type { typedef ... type; };\n```\n\n----------------------------------------\n\nTITLE: Adding arango_health Static Library - CMake\nDESCRIPTION: Defines the arango_health static library in CMake, including the necessary source files and dependencies. It specifies the include directories needed for building the library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/StorageEngine/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(arango_health STATIC\n  HealthData.cpp)\ntarget_link_libraries(arango_health arango)\ntarget_include_directories(arango_health PRIVATE\n  \"${PROJECT_SOURCE_DIR}/arangod\"\n  \"${PROJECT_SOURCE_DIR}/${ENTERPRISE_INCLUDE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project for Snappy Compression Library\nDESCRIPTION: Sets up the CMake project for Snappy, specifying the minimum required CMake version, project name, version, and languages used.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/snappy/snappy-1.1.9/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.21)\nproject(Snappy VERSION 1.1.9 LANGUAGES C CXX)\n```\n\n----------------------------------------\n\nTITLE: Defining Binary Ufunc Structure in C++\nDESCRIPTION: The `binary_ufunc` struct in C++ is defined to facilitate converting C++ functions into ufunc-like functions that can process two input arguments in Python. The template allows customization of argument and result types through templated functors. Required dependencies: Boost.Python and NumPy.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/doc/numpy/reference/binary_ufunc.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nnamespace boost\n{\nnamespace python\n{\nnamespace numpy \n{\n\ntemplate <typename TBinaryFunctor,\n          typename TArgument1=typename TBinaryFunctor::first_argument_type,\n          typename TArgument2=typename TBinaryFunctor::second_argument_type,\n          typename TResult=typename TBinaryFunctor::result_type>\n\nstruct binary_ufunc \n{\n\n  static object call(TBinaryFunctor & self, \n                     object const & input1, \n                     object const & input2,\n                     object const & output);\n\n  static object make(); \n};\n\n}\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Mongolian Unicode Block\nDESCRIPTION: Lists the code point ranges for the Mongolian script in Unicode. This block contains 153 code points including punctuation, digits, letters, and special markers.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/spirit/workbench/unicode/Scripts.txt#2025-04-22_snippet_16\n\nLANGUAGE: unicode\nCODE:\n```\n1800..1801    ; Mongolian # Po   [2] MONGOLIAN BIRGA..MONGOLIAN ELLIPSIS\n1804          ; Mongolian # Po       MONGOLIAN COLON\n1806          ; Mongolian # Pd       MONGOLIAN TODO SOFT HYPHEN\n1807..180A    ; Mongolian # Po   [4] MONGOLIAN SIBE SYLLABLE BOUNDARY MARKER..MONGOLIAN NIRUGU\n180B..180D    ; Mongolian # Mn   [3] MONGOLIAN FREE VARIATION SELECTOR ONE..MONGOLIAN FREE VARIATION SELECTOR THREE\n180E          ; Mongolian # Zs       MONGOLIAN VOWEL SEPARATOR\n1810..1819    ; Mongolian # Nd  [10] MONGOLIAN DIGIT ZERO..MONGOLIAN DIGIT NINE\n1820..1842    ; Mongolian # Lo  [35] MONGOLIAN LETTER A..MONGOLIAN LETTER CHI\n1843          ; Mongolian # Lm       MONGOLIAN LETTER TODO LONG VOWEL SIGN\n1844..1877    ; Mongolian # Lo  [52] MONGOLIAN LETTER TODO E..MONGOLIAN LETTER MANCHU ZHA\n1880..18A8    ; Mongolian # Lo  [41] MONGOLIAN LETTER ALI GALI ANUSVARA ONE..MONGOLIAN LETTER MANCHU ALI GALI BHA\n18A9          ; Mongolian # Mn       MONGOLIAN LETTER ALI GALI DAGALGA\n18AA          ; Mongolian # Lo       MONGOLIAN LETTER MANCHU ALI GALI LHA\n```\n\n----------------------------------------\n\nTITLE: Defining int_ Template Class in C++\nDESCRIPTION: Synopsis of the int_ template class, which wraps int values as Integral Constants. It takes a single template parameter N representing the integer value to wrap.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/int_.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      int N\n    >\nstruct int_\n{\n    // |unspecified|\n    // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Issue Cross Reference List\nDESCRIPTION: A listing of issue numbers and their relationships showing cross-references between different issue IDs in the ArangoDB project.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/polygon/example/input_data/primary/primary_070.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n1\n-49400 -49572\n2\n-49431 -49703 -49427 -49798\n-49427 -49798 -49423 -49892\n```\n\n----------------------------------------\n\nTITLE: Type Derivation from X Iterator in GIL (C++)\nDESCRIPTION: This template structure defines a metafunction in the Generic Image Library (GIL) to derive various image-related types (step iterator, xy locator, and view) from a horizontal iterator (XIterator). It provides a way to automatically generate associated types based on the properties of the given horizontal iterator, simplifying the creation of complex image processing workflows.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/metafunctions.rst#2025-04-22_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <typename XIterator>\nstruct type_from_x_iterator\n{\n  typedef ... step_iterator_t;\n  typedef ... xy_locator_t;\n  typedef ... view_t;\n};\n```\n\n----------------------------------------\n\nTITLE: Example Output of DOM Element Inspection\nDESCRIPTION: Shows the output format when inspecting an array containing a DOM element and a complex nested object.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/js/node/node_modules/qs/node_modules/object-inspect/readme.markdown#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n[ <div id=\"beep\">...</div>, { a: 3, b: 4, c: [ 5, 6, [ 7, [ 8, [ ... ] ] ] ] } ]\n```\n\n----------------------------------------\n\nTITLE: Including accumulate Header in C++\nDESCRIPTION: Header file inclusion for using the accumulate algorithm in C++.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/accumulate.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/accumulate.hpp>\n```\n\n----------------------------------------\n\nTITLE: Declaring read_graphviz Function Overloads in Boost C++\nDESCRIPTION: This section declares multiple overloads of the read_graphviz function, enabling graph representation reading from a variety of input sources, such as std::istream or string. Each overload requires a MutableGraph and dynamic_properties to capture graph attributes.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph/doc/read_graphviz.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nnamespace boost {\n\n    template <typename MutableGraph>\n    bool read_graphviz(std::istream& in, MutableGraph& graph,\n                       dynamic_properties& dp,\n                       const std::string& node_id = \"node_id\");\n\n    template <typename MutableGraph>\n    bool read_graphviz(std::string& str, MutableGraph& graph,\n                       dynamic_properties& dp,\n                       const std::string& node_id = \"node_id\");\n\n    template <typename InputIterator, typename MutableGraph>\n    bool read_graphviz(InputIterator begin, InputIterator end,\n                       MutableGraph& graph, dynamic_properties& dp,\n                       const std::string& node_id = \"node_id\");\n\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Lambda Expression Examples in C++ Metaprogramming\nDESCRIPTION: Examples of Lambda Expressions in C++ template metaprogramming, including the 'always' metafunction, 'unpack_args', and more complex expressions using placeholders and metafunctions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/LambdaExpression.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nalways\nunpack_args\nplus<_, int_<2> >\nif_< less<_1, int_<7> >, plus<_1,_2>, _1 >\n```\n\n----------------------------------------\n\nTITLE: Including iter_fold Header in C++\nDESCRIPTION: Directive to include the necessary header file for using the iter_fold algorithm in C++ code.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/iter_fold.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/iter_fold.h>\n```\n\n----------------------------------------\n\nTITLE: Explicit Inplace Value Constructor Implementation in C++\nDESCRIPTION: Defines an explicit constructor that initializes an object in a given inplace manner using an initializer list and variadic arguments. The constructor is conditionally available based on the predicate for the constructor's availability. The complexity and guarantees of the constructor's behavior under exceptions are also specified.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/basic_outcome/explicit_inplace_value_constructor_il.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nexplicit basic_outcome(in_place_type_t<value_type_if_enabled>, std::initializer_list<U>, Args ...) {\n    // Implementation details here\n    // Calls on_outcome_in_place_construction with appropriate parameters\n}\n```\n\n----------------------------------------\n\nTITLE: Simplified Function Signature in Documentation\nDESCRIPTION: Shows the simplified function signature used in documentation for clarity, even though the actual implementation uses function objects.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/doc/src/definitions.md.txt#2025-04-22_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate<class IntegralConstant>\nconstexpr auto if_(IntegralConstant);\n```\n\n----------------------------------------\n\nTITLE: Implementation of reveal_static_const_factory for Function Object Creation in C++\nDESCRIPTION: Defines a factory class that creates function objects wrapped in the reveal_adaptor. The factory includes a conditional static_assert that ensures function objects are default constructible in pre-C++17 code.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/function.hpp.txt#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nnamespace boost { namespace hof {\n\nnamespace detail {\n\nstruct reveal_static_const_factory\n{\n    constexpr reveal_static_const_factory()\n    {}\n    template<class F>\n    constexpr reveal_adaptor<F> operator=(const F& f) const\n    {\n#if BOOST_HOF_HAS_INLINE_VARIABLES\n#else\n        static_assert(BOOST_HOF_IS_DEFAULT_CONSTRUCTIBLE(F), \"Static functions must be default constructible\");\n#endif\n        return reveal_adaptor<F>(f);\n    }\n};\n}}} // namespace boost::hof\n```\n\n----------------------------------------\n\nTITLE: Initializing Boost Wave Project in CMake\nDESCRIPTION: Sets up the CMake project for Boost Wave, specifying the minimum CMake version and project details.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/wave/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.16)\n\nproject(boost_wave VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Boost.Locale with Stream Imbuing\nDESCRIPTION: This snippet demonstrates the correct way to use Boost.Locale by not only setting the global locale but also imbuing it to the stream. This ensures proper formatting of the date output.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/doc/faq.txt#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/locale.hpp>\n#include <iostream>\nint main()\n{\n    boost::locale::generator gen;\n    std::locale l = gen(\"\");\n    std::locale::global(l);\n    std::cout.imbue(l);\n    std::cout << boost::locale::as::date << std::time(0) << std::endl;\n}\n```\n\n----------------------------------------\n\nTITLE: Matrix Data Structure in Plain Text\nDESCRIPTION: Represents a 9x4 matrix with integer values, first line indicating size (8) followed by coordinates or binary relationships. Each row appears to represent directional or relational data with values -1, 0, and 1.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/polygon/example/input_data/primary/primary_029.txt#2025-04-22_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n0\n8\n0 0 0 1\n0 0 1 0\n0 0 -1 0\n0 0 0 -1\n0 0 1 1\n0 0 1 -1\n0 0 -1 1\n0 0 -1 -1\n```\n\n----------------------------------------\n\nTITLE: Implementing dereferencing helper in C++\nDESCRIPTION: Defines a helper template struct to get the dereferenced type of a pointer, used for pointer-to-member operations through a pointer.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/apply.hpp.txt#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<class T, class U=decltype(*std::declval<T>())>\nstruct apply_deref\n{ typedef U type; };\n```\n\n----------------------------------------\n\nTITLE: C++ Code Snippet from ArangoDB\nDESCRIPTION: This snippet is extracted from an ArangoDB source file using delimiters. It showcases a specific functionality within the ArangoDB codebase. The code is presented with syntax highlighting for improved readability and understanding.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/layouts/shortcodes/snippet.md#2025-04-22_snippet_0\n\nLANGUAGE: c++\nCODE:\n```\n<div class=\\\"code-snippet\\\">{{ $snippet := split (readFile (printf \\\"snippets/%s\\\" (.Get 0))) (printf \\\"//! [%s]\\\" (.Get 1)) }}{{ $lineno := split (index $snippet 0) \\\"\\n\\\" | len }}{{highlight (strings.TrimLeft \\\"\\r\\n\\\" (strings.TrimRight \\\"\\r\\n \\\" (index $snippet 1))) \\\"c++\\\" \\\"\\\"}}<a href=\\\"{{ $.Site.Params.snippetsURL }}{{ .Get 0 }}#L{{ add 1 $lineno }}\\\" class=\\\"code-snippet-url\\\" target=\\\"_blank\\\">View this code on Github</a></div>\n```\n\n----------------------------------------\n\nTITLE: Defining CopyConstructible Concept in C++\nDESCRIPTION: This snippet defines the CopyConstructible concept, which requires that a type T has a copy constructor and a destructor. It ensures that instances of type T can be created from existing instances.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/concepts.rst#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nauto concept CopyConstructible<typename T>\n{\n    T::T(T);\n    T::~T();\n};\n```\n\n----------------------------------------\n\nTITLE: Checking for Altivec Support on PowerPC Processors\nDESCRIPTION: Command to check if a PowerPC processor supports Altivec vector registers by examining the CPU information in the proc filesystem.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/libunwind/v1.7.2/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncat /proc/cpuinfo | grep altivec\n```\n\n----------------------------------------\n\nTITLE: Creating Reverse Iterator from Bidirectional Iterator in C++\nDESCRIPTION: This function template creates a reverse_iterator from a given bidirectional iterator. It returns an instance of reverse_iterator<BidirectionalIterator> with its current member constructed from the input iterator.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/make_reverse_iterator.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <class BidirectionalIterator>\nreverse_iterator<BidirectionalIterator>n\nmake_reverse_iterator(BidirectionalIterator x);\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost Multiprecision Library with CMake\nDESCRIPTION: Sets up the Boost Multiprecision library as an interface target with necessary dependencies. The configuration specifies minimum CMake version, project details, include directories, and required Boost components. It also conditionally includes tests if BUILD_TESTING is enabled.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/multiprecision/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.16)\n\nproject(boost_multiprecision VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n\nadd_library(boost_multiprecision INTERFACE)\nadd_library(Boost::multiprecision ALIAS boost_multiprecision)\n\ntarget_include_directories(boost_multiprecision INTERFACE include)\n\ntarget_link_libraries(boost_multiprecision\n  INTERFACE\n    Boost::assert\n    Boost::config\n    Boost::core\n    Boost::integer\n    Boost::lexical_cast\n    Boost::math\n    Boost::predef\n    Boost::random\n    Boost::rational\n)\n\nif(BUILD_TESTING AND EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/test/CMakeLists.txt\")\n\n  add_subdirectory(test)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Customizing Vertex Construction from Names\nDESCRIPTION: This snippet provides a specialization of the internal vertex constructor for the City type, allowing for vertex creation directly from the name, thus simplifying the process of adding edges by name.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/distributed_adjacency_list.rst#2025-04-22_snippet_7\n\nLANGUAGE: C++\nCODE:\n```\nnamespace boost { namespace graph {\n\ntemplate<>\nstruct internal_vertex_constructor<City>\n{\n  typedef vertex_from_name<City> type;\n};\n\n} }\n```\n\n----------------------------------------\n\nTITLE: Using the 'order' Metafunction with a Map in C++\nDESCRIPTION: This example demonstrates how to use the 'order' metafunction with a map in C++. It checks if the 'order' metafunction returns a valid type for an existing key (int) and void_ for a non-existing key (long).\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/order.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntypedef map< pair<int,unsigned>, pair<char,long> > m;\n\nBOOST_MPL_ASSERT_NOT(( is_same< order<m,int>::type, void_ > ));\nBOOST_MPL_ASSERT(( is_same< order<m,long>::type,void_ > ));\n```\n\n----------------------------------------\n\nTITLE: Using object-inspect with DOM Elements\nDESCRIPTION: Shows how to use object-inspect to represent DOM elements in a readable format, along with nested object structures.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/js/node/node_modules/qs/node_modules/object-inspect/readme.markdown#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar inspect = require('object-inspect');\n\nvar d = document.createElement('div');\nd.setAttribute('id', 'beep');\nd.innerHTML = '<b>wooo</b><i>iiiii</i>';\n\nconsole.log(inspect([ d, { a: 3, b : 4, c: [5,6,[7,[8,[9]]]] } ]));\n```\n\n----------------------------------------\n\nTITLE: Implementing Filter Iterator Template Class in C++\nDESCRIPTION: A template class implementation for a filter iterator that wraps another iterator and filters elements based on a predicate. The class provides iterator functionality with additional filtering capabilities while maintaining the underlying iterator's characteristics.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/filter_iterator_ref.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <class Predicate, class Iterator>\nclass filter_iterator\n{\n public:\n    typedef iterator_traits<Iterator>::value_type value_type;\n    typedef iterator_traits<Iterator>::reference reference;\n    typedef iterator_traits<Iterator>::pointer pointer;\n    typedef iterator_traits<Iterator>::difference_type difference_type;\n    typedef /* see below */ iterator_category;\n\n    filter_iterator();\n    filter_iterator(Predicate f, Iterator x, Iterator end = Iterator());\n    filter_iterator(Iterator x, Iterator end = Iterator());\n    template<class OtherIterator>\n    filter_iterator(\n        filter_iterator<Predicate, OtherIterator> const& t\n        , typename enable_if_convertible<OtherIterator, Iterator>::type* = 0 // exposition\n        );\n    Predicate predicate() const;\n    Iterator end() const;\n    Iterator const& base() const;\n    reference operator*() const;\n    filter_iterator& operator++();\nprivate:\n    Predicate m_pred; // exposition only\n    Iterator m_iter;  // exposition only\n    Iterator m_end;   // exposition only\n};\n```\n\n----------------------------------------\n\nTITLE: Installing gyp-next using pip\nDESCRIPTION: This snippet shows how to install the gyp-next package using pip, which requires Python 3. The installation command creates a virtual environment and installs the package.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/v8-build/gyp/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n\"python3 -m pip install gyp-next\"\n```\n\n----------------------------------------\n\nTITLE: Linking Boost Libraries to Boost Ratio in CMake\nDESCRIPTION: This snippet links other Boost libraries as dependencies to the Boost Ratio library. It uses target_link_libraries with the INTERFACE keyword to specify the public dependencies which will be propagated to projects using Boost Ratio.  Dependencies include Boost::config, Boost::core, Boost::integer, Boost::mpl, Boost::rational, Boost::static_assert, and Boost::type_traits.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ratio/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n\"target_link_libraries(boost_ratio\n  INTERFACE\n    Boost::config\n    Boost::core\n    Boost::integer\n    Boost::mpl\n    Boost::rational\n    Boost::static_assert\n    Boost::type_traits\n)\"\n```\n\n----------------------------------------\n\nTITLE: Basic CMake Project Setup\nDESCRIPTION: Initial CMake configuration including version requirements, project definition, and basic library setup for Boost Static String.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/static_string/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.16)\n\nproject(boost_static_string VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n\nif(NOT CMAKE_SOURCE_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR)\n\nadd_library(boost_static_string INTERFACE)\nadd_library(Boost::static_string ALIAS boost_static_string)\n\ntarget_include_directories(boost_static_string INTERFACE include)\n\ntarget_link_libraries(boost_static_string\n  INTERFACE\n    Boost::assert\n    Boost::container_hash\n    Boost::static_assert\n    Boost::throw_exception\n    Boost::utility\n)\n```\n\n----------------------------------------\n\nTITLE: Simplified Make Tuple Using BOOST_HOF in C++\nDESCRIPTION: Simplified implementation of make_tuple using the BOOST_HOF library's construct function to eliminate boilerplate code.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/src/example_polymorphic_constructors.md#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_HOF_STATIC_FUNCTION(make_tuple) = construct<std::tuple>();\n```\n\n----------------------------------------\n\nTITLE: ptr_multiset_adapter::insert(compatible-smart-ptr<Key2> x) Method\nDESCRIPTION: Describes the behavior of the `insert(compatible-smart-ptr<Key2> x)` template method of the `ptr_multiset_adapter` class. It releases the raw pointer from the compatible smart pointer `x` using `x.release()` and then calls the `insert` method with the raw pointer.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/ptr_multiset_adapter.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntemplate< class Key2 > iterator insert( compatible-smart-ptr<Key2> x );\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories and Dependencies for Boost Container in CMake\nDESCRIPTION: Sets up include directories and links required Boost libraries for the Boost Container target.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/container/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(boost_container PUBLIC include)\n\ntarget_link_libraries(boost_container\n  PUBLIC\n    Boost::assert\n    Boost::config\n    Boost::core\n    Boost::intrusive\n    Boost::move\n    Boost::static_assert\n    Boost::type_traits\n    Boost::winapi\n)\n```\n\n----------------------------------------\n\nTITLE: Escaping curly braces in boost::locale::format strings\nDESCRIPTION: This example demonstrates how to include literal curly braces in a format string by doubling them.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/doc/localized_text_formatting.txt#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\ncout << format(translate(\"Unexpected `{{' in line {1} in file {2}\")) % pos % file;\n```\n\n----------------------------------------\n\nTITLE: Local Property Map Operations\nDESCRIPTION: Free functions for accessing and modifying values in the local property map, including get and put operations for local process access.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/distributed_property_map.rst#2025-04-22_snippet_26\n\nLANGUAGE: C++\nCODE:\n```\nreference get(const local_property_map& pm, key_type key);\nvoid put(local_property_map pm, const key_type& key, const value_type& value);\n```\n\n----------------------------------------\n\nTITLE: ASIO async_result Specialization for Outcome Integration (Part 2)\nDESCRIPTION: Second part of the async_result specialization, implementing the completion handler that converts asynchronous operation results into Outcome result<T> objects.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/recipes/asio-integration.md#2025-04-22_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\n{\n  public:\n    using completion_handler_type = typename async_result<CompletionToken,\n                                                        detail::result_signature_t<Signature>>::completion_handler_type;\n\n    explicit async_result(completion_handler_type &h)\n      : async_result<CompletionToken, detail::result_signature_t<Signature>>(h)\n    {\n    }\n  \n    // Our proxy completion handler which converts conventional two-parameter\n    // completion into a single result<T, error_code>\n    template <typename ResultType>\n    struct handler\n    {\n      completion_handler_type &h;\n      \n      template <typename... Args>\n      void operator()(const error_code &ec, Args &&... args)\n      {\n        if constexpr(sizeof...(Args) == 0)\n        {\n          if(ec)\n            h(::outcome::failure(ec));\n          else\n            h(::outcome::success());\n        }\n        else if constexpr(sizeof...(Args) == 1)\n        {\n          if(ec)\n            h(::outcome::failure(ec));\n          else\n            h(::outcome::success(std::forward<Args>(args)...));\n        }\n        else\n        {\n          if(ec)\n            h(::outcome::failure(ec));\n          else\n            h(::outcome::success(std::make_tuple(std::forward<Args>(args)...)));\n        }\n      }\n    };\n  };\n```\n\n----------------------------------------\n\nTITLE: Hangul Unicode Character Ranges\nDESCRIPTION: Comprehensive specification of Unicode code point ranges for Hangul script, including syllables, letters, and halfwidth characters\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/spirit/workbench/unicode/Scripts.txt#2025-04-22_snippet_9\n\nLANGUAGE: Unicode\nCODE:\n```\n1100..D7FB; Hangul # Various character ranges\n```\n\n----------------------------------------\n\nTITLE: Deriving and Manipulating GIL Types in C++\nDESCRIPTION: This snippet shows how to use metafunctions to derive and manipulate types by altering their properties using existing structures. Functions like 'derived_pixel_reference_type', 'derived_iterator_type', and 'derived_view_type' allow for modifying attributes and applying defaults where needed.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/metafunctions.rst.txt#2025-04-22_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <typename PixelReference, typename ChannelValue, typename Layout, typename IsPlanar, typename IsMutable>\nstruct derived_pixel_reference_type\n{\n  typedef ... type;  // Models PixelConcept\n};\n\ntemplate <typename Iterator, typename ChannelValue, typename Layout, typename IsPlanar, typename IsStep, typename IsMutable>\nstruct derived_iterator_type\n{\n  typedef ... type;  // Models PixelIteratorConcept\n};\n\ntemplate <typename View, typename ChannelValue, typename Layout, typename IsPlanar, typename IsXStep, typename IsMutable>\nstruct derived_view_type\n{\n  typedef ... type;  // Models ImageViewConcept\n};\n\ntemplate <typename Image, typename ChannelValue, typename Layout, typename IsPlanar>\nstruct derived_image_type\n{\n  typedef ... type;  // Models ImageConcept\n};\n\nusing VT = typename derived_view_type<View, boost::use_default, gray_t, mpl::true_>::type;\n```\n\n----------------------------------------\n\nTITLE: Accessing Nullary Metafunction Result with Empty Angle Brackets\nDESCRIPTION: Shows an alternative syntax for accessing the result of a nullary metafunction using empty angle brackets followed by the nested 'type' typedef.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/Metafunction.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ntypedef f<>::type x;\n```\n\n----------------------------------------\n\nTITLE: Organizing Documentation Files and Folders\nDESCRIPTION: This snippet describes the structure of folders and files necessary for the documentation process, detailing the purpose of each folder and its contents.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/geometry/doc/readme.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nFolders in this folder:\n- concept: manually written documentation QBK files, on concept\n- doxy: folders and files needed for doxygen input and output\n- html: contains generated HTML files\n- other: older documentation (subject to update or deletion)\n- ref: manually written documentation QBK files, included from .hpp files\n- reference: generated documentation QBK files (by doxygen_xml2qbk)\n\t[note: this book cannot be called \"generated\" or something like that,\n\tbecause it is used in the final URL and we want to have \"reference\" in it]\n- src: examples used in documentation and tools (doxygen_xml2qbk)\n```\n\n----------------------------------------\n\nTITLE: Configuring Visual Studio Build for libunwind in CMake\nDESCRIPTION: Sets up compiler options, include directories, and definitions specifically for Visual Studio builds of libunwind. Includes handling of missing C11 features in MSVC.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/libunwind/v1.7.2/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif (\"${CMAKE_GENERATOR}\" MATCHES \"^Visual Studio.*$\")\n  message(VERBOSE \"Using generator ${CMAKE_GENERATOR}\")\n  # Assume we are using default MSVC compiler\n  add_compile_options(/std:c++latest)\n  add_compile_options(/TC) # compile all files as C\n  add_compile_options(/permissive-)\n\n  # files for cross os compilation\n  include_directories(include/remote)\n  include_directories(include/remote/win)\n\n  # Warnings in release builds\n  add_compile_options(-wd4068) # ignore unknown pragma warnings (gcc pragmas)\n  add_compile_options(-wd4334) # 32-bit shift implicitly converted to 64 bits\n\n  # Disable warning due to incorrect format specifier in debugging printf via the Debug macro\n  add_compile_options(-wd4311) # pointer truncation from 'unw_word_t *' to 'long'\n  add_compile_options(-wd4475) # 'fprintf' : length modifier 'L' cannot be used\n  add_compile_options(-wd4477) # fprintf argument type\n\n  # Windows builds will only support remote unwind\n  add_definitions(-DUNW_REMOTE_ONLY)\n\n  # Disable security warnings\n  add_definitions(-D_CRT_SECURE_NO_WARNINGS)\n\n  # Our posix abstraction layer will provide these headers\n  set(HAVE_ELF_H 1)\n  set(HAVE_ENDIAN_H 1)\n\n  # MSVC compiler is currently missing C11 stdalign.h header\n  # Fake it until support is added\n  check_include_files(stdalign.h HAVE_STDALIGN_H)\n  if (NOT HAVE_STDALIGN_H)\n    configure_file(include/remote/win/fakestdalign.h.in ${CMAKE_CURRENT_BINARY_DIR}/include/stdalign.h)\n  endif (NOT HAVE_STDALIGN_H)\n\n  # MSVC compiler is currently missing C11 stdatomic.h header\n  # Fake it until support is added\n  check_include_files(stdatomic.h HAVE_STDATOMIC_H)\n  if (NOT HAVE_STDATOMIC_H)\n    configure_file(include/remote/win/fakestdatomic.h.in ${CMAKE_CURRENT_BINARY_DIR}/include/stdatomic.h)\n  endif (NOT HAVE_STDATOMIC_H)\n\n  # MSVC compiler is currently missing C11 _Thread_local\n  check_c_source_compiles(\"void main() { _Thread_local int a; }\"  HAVE_THREAD_LOCAL)\n  if (NOT HAVE_THREAD_LOCAL)\n    add_definitions(-D_Thread_local=)\n  endif (NOT HAVE_THREAD_LOCAL)\nelse ()\n  message(FATAL_ERROR \"This CMake file is currently only designed for building on Visual Studio\")\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Defining Metafunction Concept in C++\nDESCRIPTION: Outlines the requirements for the Metafunction concept, which defines type computations. It shows two forms: one for a simple type member and another for a template with variadic arguments.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/src/concepts.md#2025-04-22_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\nf::type\n```\n\nLANGUAGE: cpp\nCODE:\n```\nf<args...>::type\n```\n\n----------------------------------------\n\nTITLE: Defining URL Reference in reStructuredText\nDESCRIPTION: Creates a text substitution directive that replaces '|Querying Algorithms|' with a reference link to 'Querying Algorithms' in reStructuredText documentation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/Algorithms-Querying.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. |Querying Algorithms| replace:: `Querying Algorithms`_\n```\n\n----------------------------------------\n\nTITLE: Configuring Emscripten Binaries for Meson Crosscompilation\nDESCRIPTION: This snippet defines the binaries section of the Meson crossfile for Emscripten. It specifies the C and C++ compilers, and the archiver to be used in the build process.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/leaf/wasm.txt#2025-04-22_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[binaries]\nc = 'emcc'\ncpp = 'em++'\nar = 'emar'\n# exe_wrapper = ['node', '--experimental-wasm-threads', '--experimental-wasm-bulk-memory', '--max-old-space-size=4096']\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for Boost Detail Library\nDESCRIPTION: This snippet configures the include directories for the Boost Detail library, making the headers in the 'include' directory available to any targets that link against this library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/detail/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(boost_detail INTERFACE include)\n```\n\n----------------------------------------\n\nTITLE: Creating Boost Geometry Library\nDESCRIPTION: Creates an interface library named `boost_geometry` and an alias `Boost::geometry` for it. Interface libraries are used to propagate usage requirements, such as include directories and linked libraries, to dependent targets.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/geometry/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n\"add_library(boost_geometry INTERFACE)\"\n\n```\n\nLANGUAGE: cmake\nCODE:\n```\n\"add_library(Boost::geometry ALIAS boost_geometry)\"\n```\n\n----------------------------------------\n\nTITLE: Placeholder Integration with STL and Boost\nDESCRIPTION: Specializations for std::is_placeholder and boost::is_placeholder to integrate custom placeholders with standard library and Boost functionality.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/placeholders.hpp.txt#2025-04-22_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\nnamespace std {\n    template<int N>\n    struct is_placeholder<boost::hof::placeholder<N>>\n    : std::integral_constant<int, N>\n    {};\n}\n\nnamespace boost {\n    template<class T> \n    struct is_placeholder;\n\n    template<int N>\n    struct is_placeholder<boost::hof::placeholder<N>>\n    : std::integral_constant<int, N>\n    {};\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation Structure for Boost.HOF\nDESCRIPTION: RST-formatted table of contents configuration for Boost.HOF documentation, specifying the document hierarchy and included sections with a maximum depth of 3 levels.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/index.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :maxdepth: 3\n\n    src/intro\n    src/overview\n    src/reference\n\n    src/configurations\n    src/discussion\n    src/acknowledgements\n    src/license\n```\n\n----------------------------------------\n\nTITLE: Copying Elements with Insert Iterators in C++\nDESCRIPTION: This snippet demonstrates how to use insert iterators to copy elements from a standard list to a Boost pointer vector, utilizing back inserters for memory management and pointer handling.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/ptr_inserter.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nstd::list<int> coll1;\n// ...\nstd::vector<int> coll2;\nstd::copy( coll1.begin(), coll1.end(),  \n           back_inserter(coll2) );\n```\n\n----------------------------------------\n\nTITLE: Implementing conditional_kernel for function selection in C++\nDESCRIPTION: A core implementation class that manages two functions and selects between them based on invocability with given arguments. Uses compressed_pair for optimized storage and provides SFINAE-friendly operator() implementation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/first_of.hpp.txt#2025-04-22_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<class F1, class F2>\nstruct conditional_kernel : compressed_pair<F1, F2>\n{\n    typedef compressed_pair<F1, F2> base;\n    BOOST_HOF_INHERIT_CONSTRUCTOR(conditional_kernel, base)\n\n    template<class... Ts>\n    struct select\n    : std::conditional\n    <\n        is_invocable<F1, Ts...>::value, \n        F1,\n        F2\n    >\n    {};\n\n    BOOST_HOF_RETURNS_CLASS(conditional_kernel);\n\n    template<class... Ts, class PickFirst=is_invocable<F1, Ts...>>\n    constexpr BOOST_HOF_SFINAE_RESULT(typename select<Ts...>::type, id_<Ts>...) \n    operator()(Ts && ... xs) const\n    BOOST_HOF_SFINAE_RETURNS\n    (\n        boost::hof::detail::which(\n            BOOST_HOF_RETURNS_CONSTRUCT(PickFirst)(),\n            BOOST_HOF_MANGLE_CAST(const F1&)(BOOST_HOF_CONST_THIS->first(xs...)),\n            BOOST_HOF_MANGLE_CAST(const F2&)(BOOST_HOF_CONST_THIS->second(xs...))\n        )\n        (BOOST_HOF_FORWARD(Ts)(xs)...)\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Linenoise Library and Example Targets\nDESCRIPTION: Configures the Linenoise library as a static library and sets up an example executable target linking against the library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/linenoise-ng/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories(${PROJECT_SOURCE_DIR}/include ${PROJECT_SOURCE_DIR}/src)\n\n# build liblinenoise\nadd_library(\n  linenoise\n  STATIC\n  src/ConvertUTF.cpp\n  src/linenoise.cpp\n  src/wcwidth.cpp\n)\n\n# install\ninstall(TARGETS linenoise DESTINATION lib)\n\n# headers\ninstall(FILES include/linenoise.h DESTINATION include)\n\n# build example\nadd_executable(\n  example\n  tst/example.c\n)\n\ntarget_link_libraries(\n  example\n  linenoise\n)\n```\n\n----------------------------------------\n\nTITLE: Including numeric_cast Header in C++\nDESCRIPTION: Shows how to include the header file for using the numeric_cast metafunction in C++ code.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/numeric_cast.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/numeric_cast.hpp>\n```\n\n----------------------------------------\n\nTITLE: Conditional Compiler Options (AES)\nDESCRIPTION: This snippet conditionally adds the `-maes` compiler option to the `arango_rocksdb` library if the compiler is GCC or Clang and the architecture is AMD64. It enables AES (Advanced Encryption Standard) instructions for optimized encryption performance on supported platforms.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/RocksDBEngine/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif ((CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_CLANG) AND ARCH_AMD64)\n  target_compile_options(arango_rocksdb PUBLIC \"-maes\")\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Defining DefaultConstructible Concept - C++\nDESCRIPTION: This snippet defines the DefaultConstructible concept which requires a type T to be default constructible, meaning an instance of T can be created without any arguments.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/concepts.rst.txt#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nauto concept DefaultConstructible<typename T>\n{\n    T::T();\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Hugo Front Matter in Markdown\nDESCRIPTION: Hugo front matter configuration block defining the title, description and weight of the documentation page for ArangoDB policy functions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/functions/policy/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n+++\ntitle = \"Policy\"\ndescription = \"Functions used to customise how the policy classes operate.\"\nweight = 40\n+++\n```\n\n----------------------------------------\n\nTITLE: Using BOOST_MPL_LIMIT_MAP_SIZE in C++\nDESCRIPTION: Demonstrates how to override the default BOOST_MPL_LIMIT_MAP_SIZE and use it with Boost MPL maps. It sets the limit to 10 and creates maps up to that size.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/LIMIT_MAP_SIZE.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#define BOOST_MPL_CFG_NO_PREPROCESSED_HEADERS\n#define BOOST_MPL_LIMIT_MAP_SIZE 10\n#include <boost/mpl/map.hpp>\n#include <boost/mpl/pair.hpp>\n#include <boost/mpl/int.hpp>\n\nusing namespace boost::mpl;\n\ntemplate< int i > struct ints : pair< int_<i>,int_<i> > {};\n\ntypedef map< ints<1> > m_1;\ntypedef map< ints<1>, ints<2>, ints<3>, ints<4>, ints<5>\n    ints<6>, ints<7>, ints<8>, ints<9>, ints<10> > m_10;\n\n// typedef map< ints<1>, ints<2>, ints<3>, ints<4>, ints<5>\n//     ints<6>, ints<7>, ints<8>, ints<9>, ints<10>, ints<11> > m_11; // error!\n```\n\n----------------------------------------\n\nTITLE: Non-Enterprise License Header Template\nDESCRIPTION: Standard license header template for non-enterprise ArangoDB source files, including Apache 2.0 license notice and copyright information.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/STYLEGUIDE.md#2025-04-22_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\n////////////////////////////////////////////////////////////////////////////////\n/// DISCLAIMER\n///\n/// Copyright 2014-2021 ArangoDB GmbH, Cologne, Germany\n/// Copyright 2004-2014 triAGENS GmbH, Cologne, Germany\n///\n/// Licensed under the Apache License, Version 2.0 (the \"License\");\n/// you may not use this file except in compliance with the License.\n/// You may obtain a copy of the License at\n///\n///     http://www.apache.org/licenses/LICENSE-2.0\n///\n/// Unless required by applicable law or agreed to in writing, software\n/// distributed under the License is distributed on an \"AS IS\" BASIS,\n/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n/// See the License for the specific language governing permissions and\n/// limitations under the License.\n///\n/// Copyright holder is ArangoDB GmbH, Cologne, Germany\n///\n/// @author Jan Steemann\n////////////////////////////////////////////////////////////////////////////////\n```\n\n----------------------------------------\n\nTITLE: VS2017 Variant Runtime Performance (/Od)\nDESCRIPTION: Runtime performance comparison between variant implementations using VS2017 without optimizations, showing two separate test runs.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/variant2/benchmark/benchmark1.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nN=100000000:\n        double:   9041 ms; S=7.14286e+14\n      variant2:  48367 ms; S=7.14286e+14\nboost::variant: 102776 ms; S=7.14286e+14\n  std::variant:  40590 ms; S=7.14286e+14\n\nN=100000000:\n        double:   9029 ms; S=7.14286e+14\n      variant2:  92962 ms; S=7.14286e+14\nboost::variant: 110441 ms; S=7.14286e+14\n  std::variant:  92974 ms; S=7.14286e+14\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project for Linenoise\nDESCRIPTION: Sets up the CMake project for Linenoise, including minimum required version, project name, and build type configuration.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/linenoise-ng/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 2.6)\n\nproject(linenoise)\n\nset(CMAKE_BINARY_DIR \"${CMAKE_SOURCE_DIR}/build\")\n\nif(NOT CMAKE_BUILD_TYPE)\n  set(CMAKE_BUILD_TYPE Release CACHE string \"Choose the type of build, options are: None Debug Release RelWithDebInfo MinSizeRel.\" FORCE)\nendif()\n\nmessage(STATUS \"Build mode: ${CMAKE_BUILD_TYPE}\")\n```\n\n----------------------------------------\n\nTITLE: wxWidgets linking and executable creation\nDESCRIPTION: This section configures the wxWidgets library linking, creates the executable 'wx', and specifies the necessary include directories for both Boost and wxWidgets.  It also sets compile definitions and links specific wxWidgets libraries required for the application to function correctly, targeting the GTK2 version of wxWidgets.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/geometry/example/with_external_libs/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n# WX Widgets\nlink_directories(${WX_ROOT}/lib)\nadd_executable(wx x04_wxwidgets_world_mapper.cpp)\ntarget_include_directories(wx PRIVATE ${Boost_INCLUDE_DIRS})\ntarget_include_directories(wx PRIVATE ${WX_ROOT}/include)\ntarget_include_directories(wx PRIVATE ${WX_ROOT}/include/wx-3.1)\n\n# WX configuration (get the values using wx-config --cxxflags and wx-config --libs)\ntarget_compile_definitions(wx PRIVATE WXUSINGDLL __WXGTK2__ __WXGTK__)\ntarget_link_libraries(wx PRIVATE wx_gtk2u_html-3.1 wx_gtk2u_core-3.1 wx_baseu_net-3.1 wx_baseu-3.1)\n```\n\n----------------------------------------\n\nTITLE: Is Null Predicate Method in C++\nDESCRIPTION: This template method checks if the iterator points to a null object, ensuring that the iterator is valid and returning the appropriate boolean response based on the dereferenced base.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/reversible_ptr_container.rst#2025-04-22_snippet_20\n\nLANGUAGE: C++\nCODE:\n```\ntemplate< class Iterator > bool is_null( Iterator i );\n```\n\n----------------------------------------\n\nTITLE: Returning a Reference to Implementation Value in C++\nDESCRIPTION: This C++ function template returns a constant reference to a value in an implementation passed to it. It is constexpr, ensuring that it can be evaluated at compile time and will never throw an exception. The function does not perform any checks to confirm the existence of the value in the implementation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/policies/base/value.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nstatic auto &&_value(Impl &&) noexcept\n```\n\n----------------------------------------\n\nTITLE: Thread Support Configuration\nDESCRIPTION: Configures thread support for Boost.Log when threading is enabled.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/log/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT BOOST_LOG_NO_THREADS)\n    set(THREADS_PREFER_PTHREAD_FLAG ON)\n    find_package(Threads REQUIRED)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Compiler Feature Configuration in CMake\nDESCRIPTION: CMake configuration for compiler features including version checks, C++ standard setting, and thread support configuration.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/CMakeLists.txt#2025-04-22_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nif(CMAKE_CXX_COMPILER_ID STREQUAL \"Clang\")\n  set(CMAKE_COMPILER_IS_CLANG 1)\nelseif(CMAKE_CXX_COMPILER_ID STREQUAL \"AppleClang\")\n  set(CMAKE_COMPILER_IS_CLANG 1)\nendif()\n\nset(BASE_FLAGS     \"\"                                  CACHE STRING \"base flags\")\nset(BASE_C_FLAGS   \"${CMAKE_C_FLAGS}   $ENV{CFLAGS}\"   CACHE STRING \"base C flags\")\nset(BASE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} $ENV{CXXFLAGS}\" CACHE STRING \"base C++ flags\")\nset(BASE_LD_FLAGS                     \"$ENV{LDFLAGS}\"  CACHE STRING \"base linker flags\")\nset(BASE_LIBS                         \"$ENV{LIBS}\"     CACHE STRING \"base libraries\")\n\nif(CMAKE_COMPILER_IS_CLANG) \n  if(CMAKE_CXX_COMPILER_VERSION VERSION_LESS \"16.0\")\n    message(WARNING \"ArangoDB requires clang 16.0 or newer, building with older compiler versions is unsupported\")\n  endif()\n  list(APPEND BASE_LIBS atomic)\nendif()\n\nset(CMAKE_CXX_STANDARD 20)\nset(CMAKE_CXX_EXTENSIONS OFF)\n\nset(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} ${BASE_LD_FLAGS}\")\n\nset(THREADS_PREFER_PTHREAD_FLAG ON)\nfind_package(Threads REQUIRED)\n\nif(THREADS_HAVE_PTHREAD_ARG)\n  set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -pthread\")\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -pthread\")\n  set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -pthread\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Shell Script for Upgrading TRY Macros in Outcome v2.1 to v2.2\nDESCRIPTION: A set of find and sed commands that update the Outcome v2.1 _TRY macro syntax to match the new requirements in v2.2. These commands modify all relevant .hpp and .cpp files in a project directory.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/changelog/upgrade_v21_v22.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfind /path/to/project -type f -name \"*.hpp\" | xargs sed -i \"s/_TRY\\(([^(]*?),(.*?)\\);/_TRY((auto &&, \\1),\\2);/g\"\nfind /path/to/project -type f -name \"*.cpp\" | xargs sed -i \"s/_TRY\\(([^(]*?),(.*?)\\);/_TRY((auto &&, \\1),\\2);/g\"\nfind /path/to/project -type f -name \"*.hpp\" | xargs sed -i \"s/_TRY\\(([^(]*?)\\);/_TRYV2(auto &&, \\1);/g\"\nfind /path/to/project -type f -name \"*.cpp\" | xargs sed -i \"s/_TRY\\(([^(]*?)\\);/_TRYV2(auto &&, \\1);/g\"\n```\n\n----------------------------------------\n\nTITLE: Building Boost Math Library Documentation\nDESCRIPTION: Steps for setting up the environment and building documentation for the Boost Math Library using tools like docbook-xsl, xsltproc, and quickbook.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/math/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nlibs/math/doc$ brew install docbook-xsl # on mac\nlibs/math/doc$ touch ~/user-config.jam\nlibs/math/doc$ # now edit so that:\nlibs/math/doc$ cat ~/user-config.jam\nusing darwin ;\n\nusing xsltproc ;\n\nusing boostbook\n    : /usr/local/opt/docbook-xsl/docbook-xsl\n    ;\n\nusing doxygen ;\nusing quickbook ;\nlibs/math/doc$ ../../../b2\n```\n\n----------------------------------------\n\nTITLE: Installing object-inspect with npm\nDESCRIPTION: Command to install the object-inspect package using npm.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/js/node/node_modules/qs/node_modules/object-inspect/readme.markdown#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm install object-inspect\n```\n\n----------------------------------------\n\nTITLE: Iterator Adaptor Concept Definition\nDESCRIPTION: Defines the `IteratorAdaptorConcept` for random access traversal iterators. It requires the `is_iterator_adaptor` metafunction to evaluate to true and provides member methods to return the base iterator, a metafunction to get its type, and a metafunction to rebind to another base iterator.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/pixel_iterator.rst.txt#2025-04-22_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nconcept IteratorAdaptorConcept<RandomAccessTraversalIteratorConcept Iterator>\n{\n  where SameType<is_iterator_adaptor<Iterator>::type, mpl::true_>;\n\n  typename iterator_adaptor_get_base<Iterator>;\n      where Metafunction<iterator_adaptor_get_base<Iterator> >;\n      where boost_concepts::ForwardTraversalConcept<iterator_adaptor_get_base<Iterator>::type>;\n\n  typename another_iterator;\n  typename iterator_adaptor_rebind<Iterator,another_iterator>::type;\n      where boost_concepts::ForwardTraversalConcept<another_iterator>;\n      where IteratorAdaptorConcept<iterator_adaptor_rebind<Iterator,another_iterator>::type>;\n\n  const iterator_adaptor_get_base<Iterator>::type& Iterator::base() const;\n};\n\ntemplate <boost_concepts::Mutable_ForwardIteratorConcept Iterator>\nconcept MutableIteratorAdaptorConcept : IteratorAdaptorConcept<Iterator> {};\n```\n\n----------------------------------------\n\nTITLE: Creating Exception Type Observer in C++\nDESCRIPTION: This snippet implements a rvalue reference observer for exceptions. It utilizes the `NoValuePolicy::wide_exception_check()` method to verify the exception's state before returning a reference. The implementation ensures that valid exceptions are always present, preventing undefined behavior even when the exception type is void.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/basic_outcome/exception_rvalue.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n+++\n\ntitle = \"`exception_type &&exception() &&`\"\ndescription = \"Wide contract rvalue reference observer of the stored exception. Constexpr propagating.\"\ncategories = [\"observers\"]\nweight = 787\n+++\n\nWide contract rvalue reference observer of the stored exception. `NoValuePolicy::wide_exception_check()` is first invoked, then the reference to the exception is returned. As a valid default constructed exception is always present, no undefined behaviour occurs if `NoValuePolicy::wide_exception_check()` returns.\n\nNote that if `exception_type` is `void`, only a `const` overload returning `void` is present.\n\n*Requires*: Always available.\n\n*Complexity*: Depends on `NoValuePolicy::wide_exception_check()`.\n\n*Guarantees*: None.\n```\n\n----------------------------------------\n\nTITLE: Converting Gray Pixels to RGB with GIL\nDESCRIPTION: This snippet provides a template function that converts a gray pixel to an RGB pixel, enforcing type constraints using concepts from GIL. It demonstrates the flexibility of the conversion, allowing for both references and values as inputs.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/examples.rst#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\n  template <typename GrayPixel, typename RGBPixel>\n  void gray_to_rgb(const GrayPixel& src, RGBPixel& dst)\n  {\n    gil_function_requires<PixelConcept<GrayPixel> >();\n    gil_function_requires<MutableHomogeneousPixelConcept<RGBPixel> >();\n\n    typedef typename color_space_type<GrayPixel>::type gray_cs_t;\n    static_assert(boost::is_same<gray_cs_t,gray_t>::value, \"\");\n\n    typedef typename color_space_type<RGBPixel>::type  rgb_cs_t;\n    static_assert(boost::is_same<rgb_cs_t,rgb_t>::value, \"\");\n\n    typedef typename channel_type<GrayPixel>::type gray_channel_t;\n    typedef typename channel_type<RGBPixel>::type  rgb_channel_t;\n\n    gray_channel_t gray = get_color(src,gray_color_t());\n    static_fill(dst, channel_convert<rgb_channel_t>(gray));\n  }\n```\n\n----------------------------------------\n\nTITLE: Defining Typedef Patterns for GIL Constructs in C++\nDESCRIPTION: This snippet illustrates the typedef naming pattern for various image and pixel types in GIL, providing a structured way to define image constructs based on their color space, bit depth, and other properties. Examples include different combinations of GIL constructs such as 'bgr8_image_t' and 'cmyk16_pixel_t'.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/metafunctions.rst.txt#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nbgr8_image_t               i;     // 8-bit unsigned (unsigned char) interleaved BGR image\ncmyk16_pixel_t;            x;     // 16-bit unsigned (unsigned short) CMYK pixel value;\ncmyk16sc_planar_ref_t      p(x);  // const reference to a 16-bit signed integral (signed short) planar CMYK pixel x.\nrgb32f_planar_step_ptr_t   ii;    // step iterator to a floating point 32-bit (float) planar RGB pixel.\n```\n\n----------------------------------------\n\nTITLE: Listing Unicode Diacritic Characters\nDESCRIPTION: This snippet lists Unicode characters and their properties, specifically focusing on diacritics. Each line represents a character or a range of characters, indicating their code point, category (e.g., Mn, Sk), and description. This information can be used for identifying and processing diacritic characters.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/spirit/workbench/unicode/PropList.txt#2025-04-22_snippet_10\n\nLANGUAGE: text\nCODE:\n```\n\"; Diacritic # Sk       CIRCUMFLEX ACCENT\n0060          ; Diacritic # Sk       GRAVE ACCENT\n00A8          ; Diacritic # Sk       DIAERESIS\n00AF          ; Diacritic # Sk       MACRON\n00B4          ; Diacritic # Sk       ACUTE ACCENT\n00B7          ; Diacritic # Po       MIDDLE DOT\n00B8          ; Diacritic # Sk       CEDILLA\n02B0..02C1    ; Diacritic # Lm  [18] MODIFIER LETTER SMALL H..MODIFIER LETTER REVERSED GLOTTAL STOP\n02C2..02C5    ; Diacritic # Sk   [4] MODIFIER LETTER LEFT ARROWHEAD..MODIFIER LETTER DOWN ARROWHEAD\n02C6..02D1    ; Diacritic # Lm  [12] MODIFIER LETTER CIRCUMFLEX ACCENT..MODIFIER LETTER HALF TRIANGULAR COLON\n02D2..02DF    ; Diacritic # Sk  [14] MODIFIER LETTER CENTRED RIGHT HALF RING..MODIFIER LETTER CROSS ACCENT\n02E0..02E4    ; Diacritic # Lm   [5] MODIFIER LETTER SMALL GAMMA..MODIFIER LETTER SMALL REVERSED GLOTTAL STOP\n02E5..02EB    ; Diacritic # Sk   [7] MODIFIER LETTER EXTRA-HIGH TONE BAR..MODIFIER LETTER YANG DEPARTING TONE MARK\n02EC          ; Diacritic # Lm       MODIFIER LETTER VOICING\n02ED          ; Diacritic # Sk       MODIFIER LETTER UNASPIRATED\n02EE          ; Diacritic # Lm       MODIFIER LETTER DOUBLE APOSTROPHE\n02EF..02FF    ; Diacritic # Sk  [17] MODIFIER LETTER LOW DOWN ARROWHEAD..MODIFIER LETTER LOW LEFT ARROW\n0300..034E    ; Diacritic # Mn  [79] COMBINING GRAVE ACCENT..COMBINING UPWARDS ARROW BELOW\n0350..0357    ; Diacritic # Mn   [8] COMBINING RIGHT ARROWHEAD ABOVE..COMBINING RIGHT HALF RING ABOVE\n035D..0362    ; Diacritic # Mn   [6] COMBINING DOUBLE BREVE..COMBINING DOUBLE RIGHTWARDS ARROW BELOW\n0374          ; Diacritic # Lm       GREEK NUMERAL SIGN\n0375          ; Diacritic # Sk       GREEK LOWER NUMERAL SIGN\n037A          ; Diacritic # Lm       GREEK YPOGEGRAMMENI\n0384..0385    ; Diacritic # Sk   [2] GREEK TONOS..GREEK DIALYTIKA TONOS\n0483..0487    ; Diacritic # Mn   [5] COMBINING CYRILLIC TITLO..COMBINING CYRILLIC POKRYTIE\n0559          ; Diacritic # Lm       ARMENIAN MODIFIER LETTER LEFT HALF RING\n0591..05A1    ; Diacritic # Mn  [17] HEBREW ACCENT ETNAHTA..HEBREW ACCENT PAZER\n05A3..05BD    ; Diacritic # Mn  [27] HEBREW ACCENT MUNAH..HEBREW POINT METEG\n05BF          ; Diacritic # Mn       HEBREW POINT RAFE\n05C1..05C2    ; Diacritic # Mn   [2] HEBREW POINT SHIN DOT..HEBREW POINT SIN DOT\n05C4          ; Diacritic # Mn       HEBREW MARK UPPER DOT\n064B..0652    ; Diacritic # Mn   [8] ARABIC FATHATAN..ARABIC SUKUN\n0657..0658    ; Diacritic # Mn   [2] ARABIC INVERTED DAMMA..ARABIC MARK NOON GHUNNA\n06DF..06E0    ; Diacritic # Mn   [2] ARABIC SMALL HIGH ROUNDED ZERO..ARABIC SMALL HIGH UPRIGHT RECTANGULAR ZERO\n06E5..06E6    ; Diacritic # Lm   [2] ARABIC SMALL WAW..ARABIC SMALL YEH\n06EA..06EC    ; Diacritic # Mn   [3] ARABIC EMPTY CENTRE LOW STOP..ARABIC ROUNDED HIGH STOP WITH FILLED CENTRE\n0730..074A    ; Diacritic # Mn  [27] SYRIAC PTHAHA ABOVE..SYRIAC BARREKH\n07A6..07B0    ; Diacritic # Mn  [11] THAANA ABAFILI..THAANA SUKUN\n07EB..07F3    ; Diacritic # Mn   [9] NKO COMBINING SHORT HIGH TONE..NKO COMBINING DOUBLE DOT ABOVE\n07F4..07F5    ; Diacritic # Lm   [2] NKO HIGH TONE APOSTROPHE..NKO LOW TONE APOSTROPHE\n0818..0819    ; Diacritic # Mn   [2] SAMARITAN MARK OCCLUSION..SAMARITAN MARK DAGESH\n093C          ; Diacritic # Mn       DEVANAGARI SIGN NUKTA\n094D          ; Diacritic # Mn       DEVANAGARI SIGN VIRAMA\n0951..0954    ; Diacritic # Mn   [4] DEVANAGARI STRESS SIGN UDATTA..DEVANAGARI ACUTE ACCENT\n0971          ; Diacritic # Lm       DEVANAGARI SIGN HIGH SPACING DOT\n09BC          ; Diacritic # Mn       BENGALI SIGN NUKTA\n09CD          ; Diacritic # Mn       BENGALI SIGN VIRAMA\n0A3C          ; Diacritic # Mn       GURMUKHI SIGN NUKTA\n0A4D          ; Diacritic # Mn       GURMUKHI SIGN VIRAMA\n0ABC          ; Diacritic # Mn       GUJARATI SIGN NUKTA\n0ACD          ; Diacritic # Mn       GUJARATI SIGN VIRAMA\n0B3C          ; Diacritic # Mn       ORIYA SIGN NUKTA\n0B4D          ; Diacritic # Mn       ORIYA SIGN VIRAMA\n0BCD          ; Diacritic # Mn       TAMIL SIGN VIRAMA\n0C4D          ; Diacritic # Mn       TELUGU SIGN VIRAMA\n0CBC          ; Diacritic # Mn       KANNADA SIGN NUKTA\n0CCD          ; Diacritic # Mn       KANNADA SIGN VIRAMA\n0D4D          ; Diacritic # Mn       MALAYALAM SIGN VIRAMA\n0DCA          ; Diacritic # Mn       SINHALA SIGN AL-LAKUNA\n0E47..0E4C    ; Diacritic # Mn   [6] THAI CHARACTER MAITAIKHU..THAI CHARACTER THANTHAKHAT\n0E4E          ; Diacritic # Mn       THAI CHARACTER YAMAKKAN\n0EC8..0ECC    ; Diacritic # Mn   [5] LAO TONE MAI EK..LAO CANCELLATION MARK\n0F18..0F19    ; Diacritic # Mn   [2] TIBETAN ASTROLOGICAL SIGN -KHYUD PA..TIBETAN ASTROLOGICAL SIGN SDONG TSHUGS\n0F35          ; Diacritic # Mn       TIBETAN MARK NGAS BZUNG NYI ZLA\n0F37          ; Diacritic # Mn       TIBETAN MARK NGAS BZUNG SGOR RTAGS\n0F39          ; Diacritic # Mn       TIBETAN MARK TSA -PHRU\n0F3E..0F3F    ; Diacritic # Mc   [2] TIBETAN SIGN YAR TSHES..TIBETAN SIGN MAR TSHES\n0F82..0F84    ; Diacritic # Mn   [3] TIBETAN SIGN NYI ZLA NAA DA..TIBETAN MARK HALANTA\n0F86..0F87    ; Diacritic # Mn   [2] TIBETAN SIGN LCI RTAGS..TIBETAN SIGN YANG RTAGS\n0FC6          ; Diacritic # Mn       TIBETAN SYMBOL PADMA GDAN\n1037          ; Diacritic # Mn       MYANMAR SIGN DOT BELOW\n1039..103A    ; Diacritic # Mn   [2] MYANMAR SIGN VIRAMA..MYANMAR SIGN ASAT\n1087..108C    ; Diacritic # Mc   [6] MYANMAR SIGN SHAN TONE-2..MYANMAR SIGN SHAN COUNCIL TONE-3\n108D          ; Diacritic # Mn       MYANMAR SIGN SHAN COUNCIL EMPHATIC TONE\n108F          ; Diacritic # Mc       MYANMAR SIGN RUMAI PALAUNG TONE-5\n109A..109B    ; Diacritic # Mc   [2] MYANMAR SIGN KHAMTI TONE-1..MYANMAR SIGN KHAMTI TONE-3\n17C9..17D3    ; Diacritic # Mn  [11] KHMER SIGN MUUSIKATOAN..KHMER SIGN BATHAMASAT\n17DD          ; Diacritic # Mn       KHMER SIGN ATTHACAN\n1939..193B    ; Diacritic # Mn   [3] LIMBU SIGN MUKPHRENG..LIMBU SIGN SA-I\n1A75..1A7C    ; Diacritic # Mn   [8] TAI THAM SIGN TONE-1..TAI THAM SIGN KHUEN-LUE KARAN\n1A7F          ; Diacritic # Mn       TAI THAM COMBINING CRYPTOGRAMMIC DOT\n1B34          ; Diacritic # Mn       BALINESE SIGN REREKAN\n1B44          ; Diacritic # Mc       BALINESE ADEG ADEG\n1B6B..1B73    ; Diacritic # Mn   [9] BALINESE MUSICAL SYMBOL COMBINING TEGEH..BALINESE MUSICAL SYMBOL COMBINING GONG\n1BAA          ; Diacritic # Mc       SUNDANESE SIGN PAMAAEH\n1C36..1C37    ; Diacritic # Mn   [2] LEPCHA SIGN RAN..LEPCHA SIGN NUKTA\n1C78..1C7D    ; Diacritic # Lm   [6] OL CHIKI MU TTUDDAG..OL CHIKI AHAD\n1CD0..1CD2    ; Diacritic # Mn   [3] VEDIC TONE KARSHANA..VEDIC TONE PRENKHA\n1CD3          ; Diacritic # Po       VEDIC SIGN NIHSHVASA\n1CD4..1CE0    ; Diacritic # Mn  [13] VEDIC SIGN YAJURVEDIC MIDLINE SVARITA..VEDIC TONE RIGVEDIC KASHMIRI INDEPENDENT SVARITA\n1CE1          ; Diacritic # Mc       VEDIC TONE ATHARVAVEDIC INDEPENDENT SVARITA\n1CE2..1CE8    ; Diacritic # Mn   [7] VEDIC SIGN VISARGA SVARITA..VEDIC SIGN VISARGA ANUDATTA WITH TAIL\n1CED          ; Diacritic # Mn       VEDIC SIGN TIRYAK\n1D2C..1D61    ; Diacritic # Lm  [54] MODIFIER LETTER CAPITAL A..MODIFIER LETTER SMALL CHI\n1D62..1D6A    ; Diacritic # L&   [9] LATIN SUBSCRIPT SMALL LETTER I..GREEK SUBSCRIPT SMALL LETTER CHI\n1DC4..1DCF    ; Diacritic # Mn  [12] COMBINING MACRON-ACUTE..COMBINING ZIGZAG BELOW\n1DFD..1DFF    ; Diacritic # Mn   [3] COMBINING ALMOST EQUAL TO BELOW..COMBINING RIGHT ARROWHEAD AND DOWN ARROWHEAD BELOW\n1FBD          ; Diacritic # Sk       GREEK KORONIS\n1FBF..1FC1    ; Diacritic # Sk   [3] GREEK PSILI..GREEK DIALYTIKA AND PERISPOMENI\n1FCD..1FCF    ; Diacritic # Sk   [3] GREEK PSILI AND VARIA..GREEK PSILI AND PERISPOMENI\n1FDD..1FDF    ; Diacritic # Sk   [3] GREEK DASIA AND VARIA..GREEK DASIA AND PERISPOMENI\n1FED..1FEF    ; Diacritic # Sk   [3] GREEK DIALYTIKA AND VARIA..GREEK VARIA\n1FFD..1FFE    ; Diacritic # Sk   [2] GREEK OXIA..GREEK DASIA\n2CEF..2CF1    ; Diacritic # Mn   [3] COPTIC COMBINING NI ABOVE..COPTIC COMBINING SPIRITUS LENIS\n2E2F          ; Diacritic # Lm       VERTICAL TILDE\n302A..302F    ; Diacritic # Mn   [6] IDEOGRAPHIC LEVEL TONE MARK..HANGUL DOUBLE DOT TONE MARK\n3099..309A    ; Diacritic # Mn   [2] COMBINING KATAKANA-HIRAGANA VOICED SOUND MARK..COMBINING KATAKANA-HIRAGANA SEMI-VOICED SOUND MARK\n309B..309C    ; Diacritic # Sk   [2] KATAKANA-HIRAGANA VOICED SOUND MARK..KATAKANA-HIRAGANA SEMI-VOICED SOUND MARK\n30FC          ; Diacritic # Lm       KATAKANA-HIRAGANA PROLONGED SOUND MARK\nA66F          ; Diacritic # Mn       COMBINING CYRILLIC VZMET\nA67C..A67D    ; Diacritic # Mn   [2] COMBINING CYRILLIC KAVYKA..COMBINING CYRILLIC PAYEROK\nA67F          ; Diacritic # Lm       CYRILLIC PAYEROK\nA6F0..A6F1    ; Diacritic # Mn   [2] BAMUM COMBINING MARK KOQNDON..BAMUM COMBINING MARK TUKWENTIS\nA717..A71F    ; Diacritic # Lm   [9] MODIFIER LETTER DOT VERTICAL BAR..MODIFIER LETTER LOW INVERTED EXCLAMATION MARK\nA720..A721    ; Diacritic # Sk   [2] MODIFIER LETTER STRESS AND HIGH TONE..MODIFIER LETTER STRESS AND LOW TONE\nA788          ; Diacritic # Lm       MODIFIER LETTER LOW CIRCUMFLEX ACCENT\nA8C4          ; Diacritic # Mn       SAURASHTRA SIGN VIRAMA\nA8E0..A8F1    ; Diacritic # Mn  [18] COMBINING DEVANAGARI DIGIT ZERO..COMBINING DEVANAGARI SIGN AVAGRAHA\nA92B..A92D    ; Diacritic # Mn   [3] KAYAH LI TONE PLOPHU..KAYAH LI TONE CALYA PLOPHU\nA92E          ; Diacritic # Po       KAYAH LI SIGN CWI\nA953          ; Diacritic # Mc       REJANG VIRAMA\nA9B3          ; Diacritic # Mn       JAVANESE SIGN CECAK TELU\nA9C0          ; Diacritic # Mc       JAVANESE PANGKON\nAA7B          ; Diacritic # Mc       MYANMAR SIGN PAO KAREN TONE\nAABF          ; Diacritic # Mn       TAI VIET TONE MAI EK\nAAC0          ; Diacritic # Lo       TAI VIET TONE MAI NUENG\nAAC1          ; Diacritic # Mn       TAI VIET TONE MAI THO\nAAC2          ; Diacritic # Lo       TAI VIET TONE MAI SONG\nABEC          ; Diacritic # Mc       MEETEI MAYEK LUM IYEK\nABED          ; Diacritic # Mn       MEETEI MAYEK APUN IYEK\nFB1E          ; Diacritic # Mn       HEBREW POINT JUDEO-SPANISH VARIKA\n```\n\n----------------------------------------\n\nTITLE: Hessian Matrix Derivative Computation\nDESCRIPTION: Computes second-order derivatives for Hessian corner detection, creating a matrix of cross and squared derivatives\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/image_processing/affine-region-detectors.rst.txt#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nHessianMatrix = [dxdx, dxdy][dxdy, dydy]\n```\n\n----------------------------------------\n\nTITLE: R-MAT Graph Generator Constructor\nDESCRIPTION: This code snippet shows the constructor for the `scalable_rmat_iterator` that initializes the R-MAT graph generator. It takes parameters such as process group, distribution, random generator, number of vertices, number of edges, and probabilities for quadrant partitioning. The constructor creates a generator that produces edges for a graph with the specified characteristics using distributed processes.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/scalable_rmat_generator.rst#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\n  scalable_rmat_iterator(ProcessGroup pg, Distribution distrib,\n                         RandomGenerator& gen, vertices_size_type n, \n                         edges_size_type m, double a, double b, double c, \n                         double d, bool permute_vertices = true);\n```\n\n----------------------------------------\n\nTITLE: Defining Non-Trivially Copyable Result Layout in C++\nDESCRIPTION: Shows the memory layout of result when either value_type or error_type are not trivially copyable. Uses a non-union based structure with separate fields.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/faq/_index.md#2025-04-22_snippet_1\n\nLANGUAGE: c++\nCODE:\n```\nstruct non_trivially_copyable_result_layout {\n  value_type value;\n  unsigned int flags;\n  error_type error;\n};\n```\n\n----------------------------------------\n\nTITLE: LZ4 Command Line Usage Syntax\nDESCRIPTION: Basic command line syntax for using the LZ4 compression utility to compress input files to output files.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/lz4/lib/dll/example/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n    Usage: lz4 [arg] [input] [output]\n```\n\n----------------------------------------\n\nTITLE: Class Member Function Timer Handler in C++\nDESCRIPTION: Demonstrates using a class member function as a callback handler for the timer. Encapsulates timer and counter state within a printer class.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/asio/example/cpp03/tutorial/timer_dox.txt#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\nclass printer\n{\npublic:\n    printer(boost::asio::io_context& io)\n        : timer_(io, boost::asio::chrono::seconds(1)),\n          count_(0)\n    {\n        timer_.async_wait(boost::bind(&printer::print, this));\n    }\n    ~printer() { std::cout << \"Final count is \" << count_ << std::endl; }\n    void print();\nprivate:\n    boost::asio::steady_timer timer_;\n    int count_;\n};\n```\n\n----------------------------------------\n\nTITLE: Transforming Image Views in C++\nDESCRIPTION: This section details the methods to derive new image views by altering existing views' policies, applicable in color conversion, channel extraction, or coordinate system transformation. It defines meta-programming constructs capturing transformation types derived from given view types.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/image_view.rst.txt#2025-04-22_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\n// Some result view types template <typename View> struct dynamic_xy_step_type : public dynamic_y_step_type<typename dynamic_x_step_type<View>::type> {}; template <typename View> struct dynamic_xy_step_transposed_type : public dynamic_xy_step_type<typename transposed_type<View>::type> {}; template <typename SrcView, typename DstP, typename ColorConverter=gil::default_color_converter> struct color_converted_view_type { typedef ... type; }; template <typename SrcView> struct nth_channel_view_type { typedef ... type; };\n```\n\n----------------------------------------\n\nTITLE: ArangoDB MIT License Declaration\nDESCRIPTION: The MIT License text granting permissions for using, modifying and distributing the software, with copyright notice for Fredrik Fornwall.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/linenoise-ng/LICENSE-wcwidth.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nThe MIT License (MIT)\n\nCopyright (c) 2016 Fredrik Fornwall <fredrik@fornwall.net>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: Configuring ArangoDB Utils Library Sources\nDESCRIPTION: Defines the core source files for the arango_utils static library including cursor, execution context, and URL helper implementations.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/Utils/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(arango_utils STATIC\n  Cursor.cpp\n  ExecContext.cpp\n  OperationOptions.cpp\n  SupportInfoBuilder.cpp\n  UrlHelper.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Boost Process Project\nDESCRIPTION: This snippet defines the CMake project named 'boost_process', sets the version based on 'BOOST_SUPERPROJECT_VERSION', and specifies that the project uses the CXX language. The version variable is used to define the project's version.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/process/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n\"project(boost_process VERSION \\\"${BOOST_SUPERPROJECT_VERSION}\\\" LANGUAGES CXX)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost PFR Library with CMake\nDESCRIPTION: The purpose of this code snippet is to configure the Boost PFR library using CMake. It requires CMake version between 3.5 and 3.16. The script defines a project named 'boost_pfr', sets up an interface library, and includes necessary directories. If testing is enabled and test configurations exist, it will add the test subdirectory for further setup.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/pfr/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Generated by \\`boostdep --cmake pfr\\`\n# Copyright 2020 Peter Dimov\n# Distributed under the Boost Software License, Version 1.0.\n# https://www.boost.org/LICENSE_1_0.txt\n\ncmake_minimum_required(VERSION 3.5...3.16)\n\nproject(boost_pfr VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n\nadd_library(boost_pfr INTERFACE)\nadd_library(Boost::pfr ALIAS boost_pfr)\n\ntarget_include_directories(boost_pfr INTERFACE include)\n\nif(BUILD_TESTING AND EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/test/CMakeLists.txt\")\n\n  add_subdirectory(test)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Fix Adaptor Base Template Implementation\nDESCRIPTION: Core implementation of the fix adaptor base template that handles recursive function calls with configurable depth.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/fix.hpp.txt#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<class F, class Result, int N>\nstruct fix_adaptor_base : F\n{\n    BOOST_HOF_INHERIT_CONSTRUCTOR(fix_adaptor_base, F);\n\n    typedef typename compute_indirect_ref<F>::type base_ref_type;\n    typedef fix_adaptor_base<base_ref_type, Result, N-1> derived;\n\n    template<class... Ts>\n    constexpr const F& base_function(Ts&&... xs) const noexcept\n    {\n        return boost::hof::always_ref(*this)(xs...);\n    }\n\n    template<class... Ts>\n    constexpr derived derived_function(Ts&&... xs) const noexcept\n    {\n        return derived(boost::hof::detail::make_indirect_ref(this->base_function(xs...)));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Semantic Implementation of reverse_remove_if in C++\nDESCRIPTION: Demonstrates the equivalent semantic implementation of the reverse_remove_if algorithm using reverse_fold and lambda expressions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/reverse_remove_if.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntypedef lambda<pred>::type p;\ntypedef lambda<in::operation>::type op;\n\ntypedef reverse_fold<\n      s\n    , in::state\n    , eval_if<\n          apply_wrap1<p,_2>\n        , identity<_1>\n        , apply_wrap2<op,_1,_2>\n        >\n    >::type r;\n```\n\n----------------------------------------\n\nTITLE: Build Status Table in Markdown\nDESCRIPTION: A markdown table showing the Travis CI build status for different branches of the Boost.Wave library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/wave/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nBranch   | Travis\n---------|--------\nDevelop  | [![Build Status](https://travis-ci.org/boostorg/wave.svg?branch=develop)](https://travis-ci.org/boostorg/wave)\nMaster   | [![Build Status](https://travis-ci.org/boostorg/wave.svg?branch=master)](https://travis-ci.org/boostorg/wave)\n```\n\n----------------------------------------\n\nTITLE: Using BOOST_OUTCOME_CO_TRYV2_FAILURE_LIKELY Macro in C++\nDESCRIPTION: This macro evaluates an expression and continues execution if successful, or immediately returns try_operation_return_as(X) if unsuccessful. It uses customization points for try_operation_has_value, try_operation_return_as, and try_operation_extract_value. The macro is designed with the expectation that the expression is likely to fail.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/macros/co_tryv2_failure_likely.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_OUTCOME_CO_TRYV2_FAILURE_LIKELY(spec, expr)\n```\n\n----------------------------------------\n\nTITLE: Including the 'order' Metafunction Header in C++\nDESCRIPTION: This code snippet shows how to include the header file for the 'order' metafunction in a C++ program.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/order.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/order.hpp>\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost Accumulators Library in CMake\nDESCRIPTION: This CMake script sets up the Boost Accumulators library. It defines the project, creates an interface library, sets include directories, and specifies dependencies on other Boost libraries. It also conditionally includes tests if testing is enabled.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/accumulators/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.16)\n\nproject(boost_accumulators VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n\nadd_library(boost_accumulators INTERFACE)\nadd_library(Boost::accumulators ALIAS boost_accumulators)\n\ntarget_include_directories(boost_accumulators INTERFACE include)\n\ntarget_link_libraries(boost_accumulators\n  INTERFACE\n    Boost::array\n    Boost::assert\n    Boost::circular_buffer\n    Boost::concept_check\n    Boost::config\n    Boost::core\n    Boost::fusion\n    Boost::iterator\n    Boost::mpl\n    Boost::numeric_conversion\n    Boost::numeric_ublas\n    Boost::parameter\n    Boost::preprocessor\n    Boost::range\n    Boost::serialization\n    Boost::static_assert\n    Boost::throw_exception\n    Boost::tuple\n    Boost::type_traits\n    Boost::typeof\n)\n\nif(BUILD_TESTING AND EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/test/CMakeLists.txt\")\n\n  add_subdirectory(test)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Test Directory Inclusion\nDESCRIPTION: Conditionally adds the test subdirectory if testing is enabled and the test CMakeLists.txt file exists.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/units/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(BUILD_TESTING AND EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/test/CMakeLists.txt\")\n\n  add_subdirectory(test)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing Linenoise to Custom Location\nDESCRIPTION: Installs the compiled Linenoise library to a custom location specified by the DESTDIR environment variable. This example installs to /tmp.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/linenoise-ng/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n(cd build && make DESTDIR=/tmp install)\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost Typeof Library with CMake\nDESCRIPTION: This CMake script sets up the Boost Typeof library as an interface library. It defines the minimum CMake version, project details, and library dependencies. The script also sets up include directories and links against other Boost libraries.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/typeof/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.20)\nproject(boost_typeof VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n\nadd_library(boost_typeof INTERFACE)\nadd_library(Boost::typeof ALIAS boost_typeof)\n\ntarget_include_directories(boost_typeof INTERFACE include)\n\ntarget_link_libraries(boost_typeof\n    INTERFACE\n        Boost::config\n        Boost::preprocessor\n        Boost::type_traits\n)\n```\n\n----------------------------------------\n\nTITLE: Defining MPL Find Algorithm Template in C++\nDESCRIPTION: Defines the template structure for the 'find' algorithm in the Boost MPL library. It takes a Sequence and a type T as template parameters and returns an unspecified type.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/find.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      typename Sequence\n    , typename T\n    >\nstruct find\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Library Dependencies\nDESCRIPTION: Specifies external dependencies required for the IResearch library, including build and linking requirements\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/IResearch/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_dependencies(arango_iresearch\n  v8_build # for ICU required by iResearch\n)\n\ntarget_link_libraries(arango_iresearch\n  arango_cluster_engine\n  arango_indexes\n  arango_vocbase\n  boost_thread # required by IResearchView upgrade_mutex\n  iresearch-static\n  s2 # needed for some includes\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Test Subdirectory in CMake (Conditional)\nDESCRIPTION: This snippet conditionally adds a test subdirectory to the build if BUILD_TESTING is enabled and a CMakeLists.txt file exists in the test directory.  It uses add_subdirectory to include the test build.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ratio/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n\"if(BUILD_TESTING AND EXISTS \\\"${CMAKE_CURRENT_SOURCE_DIR}/test/CMakeLists.txt\\\")\n\n  add_subdirectory(test)\n\nendif()\"\n```\n\n----------------------------------------\n\nTITLE: Defining range_c Template Class in C++\nDESCRIPTION: Declaration of the range_c template class, which creates a sorted Random Access Sequence of Integral Constants. It takes a type T and two values Start and Finish as template parameters.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/range_c.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      typename T\n    , T Start\n    , T Finish\n    >\nstruct range_c\n{\n    typedef integral_c<T,Start> start;\n    typedef integral_c<T,Finish> finish;\n    // |unspecified|\n    // |...|\n};\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version and Project Details for Boost.Context\nDESCRIPTION: Defines the minimum required CMake version and sets up the project name and version for Boost.Context.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/context/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.16)\n\nproject(boost_context VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Initializing and Loading Distributed Graph with Numerical Vertex IDs\nDESCRIPTION: Demonstrates initializing a distributed graph with a fixed number of vertices, where only process 0 loads the graph edges from standard input. The graph is automatically distributed across processes and synchronized when complete.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/distributed_adjacency_list.rst#2025-04-22_snippet_9\n\nLANGUAGE: C++\nCODE:\n```\nGraph g(n); // initialize with the total number of vertices, n\nif (process_id(g.process_group()) == 0) {\n  // Only process 0 loads the graph, which is distributed automatically\n  int source, target;\n  for (std::cin >> source >> target)\n    add_edge(vertex(source, g), vertex(target, g), g);\n}\n\n// All processes synchronize at this point, then the graph is complete\nsynchronize(g.process_group());\n```\n\n----------------------------------------\n\nTITLE: Manual Python 'C' API Wrapping\nDESCRIPTION: This code demonstrates the manual approach to wrapping the `greet` function using the Python 'C' API. It involves creating a wrapper function `greet_wrap` to handle argument parsing, result conversion, and error checking.  The `methods` array defines the mapping between Python function names and the C++ wrapper functions, and `init_hello` initializes the module.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/doc/article.rst#2025-04-22_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n    extern \"C\" // all Python interactions use 'C' linkage and calling convention\n    {\n        // Wrapper to handle argument/result conversion and checking\n        PyObject* greet_wrap(PyObject* args, PyObject * keywords)\n        {\n             int x;\n             if (PyArg_ParseTuple(args, \"i\", &x))    // extract/check arguments\n             {\n                 char const* result = greet(x);      // invoke wrapped function\n                 return PyString_FromString(result); // convert result to Python\n             }\n             return 0;                               // error occurred\n        }\n\n        // Table of wrapped functions to be exposed by the module\n        static PyMethodDef methods[] = {\n            { \"greet\", greet_wrap, METH_VARARGS, \"return one of 3 parts of a greeting\" }\n            , { NULL, NULL, 0, NULL } // sentinel\n        };\n\n        // module initialization function\n        DL_EXPORT init_hello()\n        {\n            (void) Py_InitModule(\"hello\", methods); // add the methods to the module\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Arango Metrics Base\nDESCRIPTION: This snippet specifies the private include directories for the `arango_metrics_base` library.  It ensures that the library can access necessary header files during compilation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/Metrics/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(arango_metrics_base PRIVATE\n  \"${PROJECT_SOURCE_DIR}/arangod\"\n  \"${PROJECT_SOURCE_DIR}/${ENTERPRISE_INCLUDE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Defining Multi-Iter Class in Boost.Python\nDESCRIPTION: Defines the multi_iter class and its member functions within the Boost.Python library. It includes methods like next(), not_done(), and get_data, catering to iteration over multiple sequences. The class utilizes methods for accessing shapes and data, essential for iteration in Python using C++ objects. Dependencies include Boost.Python and Python header files.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/doc/html/numpy/_sources/reference/multi_iter.rst.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nnamespace boost \n{\nnamespace python\n{\nnamespace numpy \n{\n\nclass multi_iter : public object \n{\npublic:\n  void next();\n  bool not_done() const;\n  char * get_data(int n) const;\n  int const get_nd() const;\n  Py_intptr_t const * get_shape() const;\n  Py_intptr_t const shape(int n) const;\n};\n\n\nmulti_iter make_multi_iter(object const & a1);\nmulti_iter make_multi_iter(object const & a1, object const & a2);\nmulti_iter make_multi_iter(object const & a1, object const & a2, object const & a3);\n\n}\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Using Boost Parameter Functionality in C++\nDESCRIPTION: This snippet provides an example of how to implement a class that utilizes Boost.Parameter for defining named and deduced parameters in function call operators. It showcases how positional, named, and deduced argument types are processed.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_36\n\nLANGUAGE: C++\nCODE:\n```\nclass char_reader\n{\n    int index;\n    char const* key;\n\n public:\n    explicit char_reader(char const* k) : index(0), key(k)\n    {\n    }\n\n    BOOST_PARAMETER_FUNCTION_CALL_OPERATOR((void), tag,\n        (deduced\n            (required\n                (y, (int))\n                (z, (char const*))\n            )\n        )\n    )\n    {\n        this->index = y;\n        this->key = z;\n    }\n\n    |BOOST_PARAMETER_CONST_FUNCTION_CALL_OPERATOR|_\\((char), tag,\n        (deduced\n            (required\n                (y, (bool))\n                (z, (|std_map|_\\<char const*, |std_string|_\\>))\n            )\n        )\n    )\n    {\n        return y ? (\n            (z.find(this->key)->second)[this->index]\n        ) : this->key[this->index];\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Example Executables in CMake Using add_example\nDESCRIPTION: This sequence of `add_example` calls demonstrates its usage to create example executables tailored for testing different components, such as `custom_data_type` and `debug_settings`. It specifies the source files and dependencies on Boost libraries needed for each executable, streamlining the build process for consistent project organization.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/property_tree/examples/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_example(NAME custom_data_type SRCS custom_data_type.cpp DEPS Boost::property_tree)\nadd_example(NAME debug_settings SRCS debug_settings.cpp DEPS Boost::property_tree)\nconfigure_file(debug_settings.xml debug_settings.xml COPYONLY)\nadd_example(NAME empty_ptree_trick SRCS empty_ptree_trick.cpp DEPS Boost::property_tree)\nadd_example(NAME info_grammar_spirit SRCS info_grammar_spirit.cpp DEPS Boost::property_tree)\nadd_example(NAME speed_test SRCS speed_test.cpp DEPS Boost::property_tree)\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost Poly Collection Library in CMake\nDESCRIPTION: Sets up the Boost Poly Collection library as an interface target, defines its include directories and dependencies, and optionally includes tests. It requires CMake version 3.5 or higher and sets up the project with C++ language support.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/poly_collection/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.16)\n\nproject(boost_poly_collection VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n\nadd_library(boost_poly_collection INTERFACE)\nadd_library(Boost::poly_collection ALIAS boost_poly_collection)\n\ntarget_include_directories(boost_poly_collection INTERFACE include)\n\ntarget_link_libraries(boost_poly_collection\n  INTERFACE\n    Boost::assert\n    Boost::config\n    Boost::core\n    Boost::iterator\n    Boost::mp11\n    Boost::mpl\n    Boost::type_erasure\n    Boost::type_traits\n)\n\nif(BUILD_TESTING AND EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/test/CMakeLists.txt\")\n\n  add_subdirectory(test)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining is_error_type<E> Trait in C++\nDESCRIPTION: This code snippet defines the `is_error_type<E>` trait in the Boost Outcome library. It's a customizable integral constant type that's true for E types which should receive error throwing no-value policies. It allows for special weakened implicit construction for integral T types when combined with E types in this whitelist.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/traits/is_error_type.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<typename E>\nstruct is_error_type : std::false_type {};\n\n// Specializations for various error types\ntemplate<> struct is_error_type<boost::system::error_code> : std::true_type {};\ntemplate<> struct is_error_type<boost::system::errc::errc_t> : std::true_type {};\ntemplate<> struct is_error_type<boost::exception_ptr> : std::true_type {};\ntemplate<> struct is_error_type<std::error_code> : std::true_type {};\ntemplate<> struct is_error_type<std::errc> : std::true_type {};\ntemplate<> struct is_error_type<std::exception_ptr> : std::true_type {};\n```\n\n----------------------------------------\n\nTITLE: Initializing Boost Callable Traits with CMake - CMake\nDESCRIPTION: This snippet initializes the Boost Callable Traits project with CMake, sets minimum CMake requirements, and defines library alias. Dependencies include a CMake installation with a version between 3.8 to 3.20 and C++ language support. The snippet defines basic directory structure and interfaces for building the library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/callable_traits/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT CMAKE_SOURCE_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR)\n\n# Generated by `boostdep --cmake callable_traits`\n# Copyright 2020, 2021 Peter Dimov\n# Distributed under the Boost Software License, Version 1.0.\n# https://www.boost.org/LICENSE_1_0.txt\n\ncmake_minimum_required(VERSION 3.8...3.20)\n\nproject(boost_callable_traits VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n\nadd_library(boost_callable_traits INTERFACE)\nadd_library(Boost::callable_traits ALIAS boost_callable_traits)\n\ntarget_include_directories(boost_callable_traits INTERFACE include)\n\ntarget_compile_features(boost_callable_traits INTERFACE cxx_std_11)\n\nelse()\n```\n\n----------------------------------------\n\nTITLE: Conditional Installation of Boost Preprocessor\nDESCRIPTION: This snippet conditionally includes the 'BoostInstall' module and installs the 'boost_preprocessor' target if the 'BOOST_SUPERPROJECT_VERSION' variable is defined. The header files are installed to the 'include/' directory.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/preprocessor/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(BOOST_SUPERPROJECT_VERSION)\n\n  include(BoostInstall)\n  boost_install(TARGETS boost_preprocessor HEADER_DIRECTORY include/)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Invoking an N-ary Metafunction Class in C++\nDESCRIPTION: Illustrates how to invoke a metafunction class that takes multiple arguments. The arguments a1 through an are passed within the angle brackets of the 'apply' metafunction.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/MetafunctionClass.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntypedef f::apply<a1,...an>::type x;\n```\n\n----------------------------------------\n\nTITLE: PE/COFF Runtime Relocator Function\nDESCRIPTION: A runtime function for handling PE/COFF relocations in Windows executables. It was called 150 times during profiling but consumed negligible execution time.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/serialization/doc/profile1.txt#2025-04-22_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\n_pei386_runtime_relocator\n```\n\n----------------------------------------\n\nTITLE: CreatingServerObjectBoostASIOC++\nDESCRIPTION: Initialize a server object using Boost ASIO in C++, creating an io_context for handling client requests. This snippet runs the io_context object to accept incoming connections. Necessary to handle asynchronous operations for server IO tasks.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/asio/example/cpp03/tutorial/daytime_dox.txt#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\nint main() {\n    // Create server object and io_context for handling client requests\n    boost::asio::io_context io_context;\n    // Additional server setup\n    return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Improper Declaration of C++ Class Method for Counting Errors\nDESCRIPTION: This snippet provides an alternative implementation of the same C++ class, highlighting poor naming practices as a contrast to effective naming conventions. This serves as an example of how not to follow the coding guidelines.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/STYLEGUIDE.md#2025-04-22_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nclass MyClass {\n public:\n  int countFooErrors(std::vector<Foo> const& foos) {\n    int totalNumberOfFooErrors = 0;  // Overly verbose given limited scope and context\n    for (size_t fooIndex = 0; fooIndex < foos.size(); ++fooIndex) {  // Use idiomatic `i`\n      ...\n      ++totalNumberOfFooErrors;\n    }\n    return totalNumberOfFooErrors;\n  }\n  void doSomethingImportant() {\n    int cstmrId = ...;  // Deletes internal letters\n  }\n private:\n  int const kNum = ...;  // Unclear meaning within broad scope\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Libunwind in CMake\nDESCRIPTION: Configures include directories for the Libunwind library build, including current directory, tdep-specific includes, and generated files.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/libunwind/v1.7.2/src/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_INCLUDE_CURRENT_DIR ON)\n\n# other source files\ninclude_directories(../include/tdep)\ninclude_directories(../include)\ninclude_directories(${CMAKE_CURRENT_BINARY_DIR}/../include/tdep)\ninclude_directories(${CMAKE_CURRENT_BINARY_DIR}/../include)\n```\n\n----------------------------------------\n\nTITLE: Displaying CI Badge in Markdown\nDESCRIPTION: This code snippet shows how to embed a CI status badge from GitHub Actions into a Markdown document. It uses an HTML img tag with a target attribute for opening the link in a new tab.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/callable_traits/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n<a target=\"_blank\" href=\"https://github.com/boostorg/callable_traits/actions/workflows/ci.yml\">![CI][badge.CI]</a>\n```\n\n----------------------------------------\n\nTITLE: Defining Keywords for Boost Parameter\nDESCRIPTION: The code snippet defines keywords using BOOST_PARAMETER_KEYWORD for a class 'window' that contains a member function 'open' with one required parameter (title) and two optional parameters (width, height). Dependencies include Boost.Parameter and Boost.Python headers.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter_python/doc/index.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/parameter/keyword.hpp>\\n#include <boost/parameter/preprocessor.hpp>\\n#include <boost/parameter/python.hpp>\\n#include <boost/python.hpp>\\n\\n// First the keywords\\nBOOST_PARAMETER_KEYWORD(tag, title)\\nBOOST_PARAMETER_KEYWORD(tag, width)\\nBOOST_PARAMETER_KEYWORD(tag, height)\\n\\nclass window\\n{\\npublic:\\n    BOOST_PARAMETER_MEMBER_FUNCTION(\\n      (void), open, tag,\\n      (required (title, (std::string)))\\n      (optional (width, (unsigned), 400)\\n                (height, (unsigned), 400))\\n    )\\n    {\\n        *… function implementation …*\\n    }\\n};\n```\n\n----------------------------------------\n\nTITLE: Generating HTML Documentation for Boost.HigherOrderFunctions with Sphinx in Bash\nDESCRIPTION: Command to build HTML documentation for the Boost.HigherOrderFunctions library using Sphinx. The generated documentation will be placed in the doc/html folder.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/doc/src/building.md.txt#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsphinx-build -b html doc/ doc/html/\n```\n\n----------------------------------------\n\nTITLE: Validate Example Executable Configuration\nDESCRIPTION: Configures the 'validate' executable target with its source files and links it against Boost::json library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/json/example/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(validate\n    file.hpp\n    validate.cpp\n)\nset_property(TARGET validate PROPERTY FOLDER \"example\")\ntarget_link_libraries(validate PRIVATE Boost::json)\n```\n\n----------------------------------------\n\nTITLE: at_c Include Header in C++\nDESCRIPTION: Shows the header file that needs to be included to use the at_c metafunction in C++ code.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/at_c.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/at.hpp>\n```\n\n----------------------------------------\n\nTITLE: Implementing Pipable Triple Sum Function in C++\nDESCRIPTION: This snippet demonstrates creating a pipable triple sum function using the 'pipable' adaptor and 'limit' decorator. It shows a limitation where partial application doesn't immediately trigger a compiler error.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/src/partialfunctions.md#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nauto sum = pipable(limit_c<3>([](int x, int y, int z)\n{\n    return x+y+z;\n}));\n```\n\n----------------------------------------\n\nTITLE: Calculating Variance Contribution for Bernoulli Sampling Per-Byte in LaTeX\nDESCRIPTION: This LaTeX snippet shows the calculation of variance contribution for an allocation in Bernoulli sampling per-byte strategy. It uses the allocation size and sampling rate.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/jemalloc/jemalloc/doc_internal/PROFILING_INTERNALS.md#2025-04-22_snippet_4\n\nLANGUAGE: latex\nCODE:\n```\n$$Z^2 \\frac{(1-\\frac{1}{R})^{Z}}{1-(1-\\frac{1}{R})^{Z}}.$$\n```\n\n----------------------------------------\n\nTITLE: Implementing member data access in C++\nDESCRIPTION: Implements the apply_mem_data struct which handles accessing member data through pointers. Uses template specializations to match qualifiers between the object reference and the return type.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/apply.hpp.txt#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nstruct apply_mem_data\n{\n    template<class T, class R>\n    struct match_qualifier\n    { typedef R type; };\n\n#define BOOST_HOF_APPLY_MEM_DATA_MATCH(cv, ref) \\\n    template<class T, class R> \\\n    struct match_qualifier<cv T ref, R> \\\n    : match_qualifier<T, cv R ref> \\\n    {};\n\n    BOOST_HOF_DETAIL_FOREACH_QUAL(BOOST_HOF_APPLY_MEM_DATA_MATCH,&)\n    BOOST_HOF_DETAIL_FOREACH_QUAL(BOOST_HOF_APPLY_MEM_DATA_MATCH,&&)\n\n    template <class Base, class R, class Derived, class=typename std::enable_if<(\n        std::is_base_of<Base, typename std::decay<Derived>::type>::value\n    )>::type>\n    constexpr typename match_qualifier<Derived, R>::type \n    operator()(R Base::*pmd, Derived&& ref) const noexcept\n    {\n        return BOOST_HOF_FORWARD(Derived)(ref).*pmd;\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Using greater_equal Metafunction in C++ Assertions\nDESCRIPTION: Demonstrates how to use the greater_equal metafunction in compile-time assertions to compare integral constants.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/greater_equal.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_MPL_ASSERT(( greater_equal< int_<10>, int_<0> > ));\nBOOST_MPL_ASSERT_NOT(( greater_equal< long_<0>, int_<10> > ));\nBOOST_MPL_ASSERT(( greater_equal< long_<10>, int_<10> > ));\n```\n\n----------------------------------------\n\nTITLE: Implementing Transparent Type Inspection in C++\nDESCRIPTION: Shows how to implement inspection for an Identifier class that acts as a strong typedef, making it transparent to inspectors by directly exposing the underlying value.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/lib/Inspection/include/Inspection/README.md#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <class Inspector>\nauto inspect(Inspector& f, Identifier& x) {\n  return f.apply(x.id);\n}\n```\n\n----------------------------------------\n\nTITLE: Running jsUnity Tests\nDESCRIPTION: This snippet outlines how to run tests using the jsUnity framework, providing example test suite code and corresponding commands to execute the tests.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/CONTRIBUTING.md#2025-04-22_snippet_24\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction exampleTestSuite () {\n  return {\n    testSizeOfTestCollection : function () {\n    assertEqual(5, 5);\n  };\n}\n\njsUnity.run(aqlTestSuite);\n\nreturn jsunity.done();\n```\n\nLANGUAGE: bash\nCODE:\n```\narangosh> require(\"jsunity\").runTest(\"test.js\");\n```\n\n----------------------------------------\n\nTITLE: Vim Editor Settings for C++ Unicode Documentation\nDESCRIPTION: This comment specifies Vim editor settings for the file, including tab settings and file type for syntax highlighting. It's intended to maintain consistent formatting across different environments.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/doc/recommendations_and_myths.txt#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n// vim: tabstop=4 expandtab shiftwidth=4 softtabstop=4 filetype=cpp.doxygen\n```\n\n----------------------------------------\n\nTITLE: Print Function Signature for Basic Result Type in C++\nDESCRIPTION: Function signature for printing a basic_result object to a string. The function is not overridable, always available in the BOOST_OUTCOME_V2_NAMESPACE namespace, and requires inclusion of the boost/outcome/iostream_support.hpp header.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/functions/iostream/result_print.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nstd::string print(const basic_result<T, E, NoValuePolicy> &)\n```\n\n----------------------------------------\n\nTITLE: Running PHP Driver Tests\nDESCRIPTION: Command for running PHP driver tests, specifying the source directory, test case, cluster configuration, and connection keepalive settings.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/CONTRIBUTING.md#2025-04-22_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/unittest php_driver --phpsource ../arangodb-php/ \\\n    --testCase testSaveVerticesAndEdgeBetweenThemAndRemoveOneByOne \\\n    --cluster true \\\n    --phpkeepalive false\n```\n\n----------------------------------------\n\nTITLE: Homogeneous Pixel Struct Definition in C++\nDESCRIPTION: Defines a homogeneous pixel structure templated over channel value and layout. It includes typedefs for common pixel types and demonstrates direct channel initialization and compatible pixel construction.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/pixel.rst.txt#2025-04-22_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\n// models HomogeneousPixelValueConcept\\ntemplate <typename ChannelValue, typename Layout> struct pixel;\\n\\n// Those typedefs are already provided by GIL\\ntypedef pixel<bits8, rgb_layout_t> rgb8_pixel_t;\\ntypedef pixel<bits8, bgr_layout_t> bgr8_pixel_t;\\n\\nbgr8_pixel_t bgr8(255,0,0);     // pixels can be initialized with the channels directly\\nrgb8_pixel_t rgb8(bgr8);        // compatible pixels can also be copy-constructed\\nrgb8 = bgr8;            // assignment and equality is defined between compatible pixels\\nassert(rgb8 == bgr8);   // assignment and equality operate on the semantic channels\\n\\n// The first physical channels of the two pixels are different\\nassert(at_c<0>(rgb8) != at_c<0>(bgr8));\\nassert(dynamic_at_c(bgr8,0) != dynamic_at_c(rgb8,0));\\nassert(rgb8[0] != bgr8[0]); // same as above (but operator[] is defined for pixels only)\n```\n\n----------------------------------------\n\nTITLE: Running LZ4 Speed Test in Background\nDESCRIPTION: Command to execute the test-lz4-speed.py script in background mode using nohup, allowing the process to continue running after terminal disconnection.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/lz4/tests/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnohup ./test-lz4-speed.py testFileNames emails &\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding V8 System Include Directories in CMake\nDESCRIPTION: Conditionally adds the V8 JavaScript engine internal include directories as system includes when V8 support is enabled.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/CMakeLists.txt#2025-04-22_snippet_27\n\nLANGUAGE: CMake\nCODE:\n```\nif (USE_V8)\n  target_include_directories(arangodbtests SYSTEM PRIVATE\n    ${V8_INTERNAL_INCLUDE_DIR})\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Example Usage of BOOST_MPL_AUX_LAMBDA_SUPPORT in a Custom Metafunction\nDESCRIPTION: A complete example of using BOOST_MPL_AUX_LAMBDA_SUPPORT in a custom metafunction 'f' with two template parameters, followed by its application in a lambda expression and assertion to verify the expected result.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/AUX_LAMBDA_SUPPORT.rst#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\ntemplate< typename T, typename U = int > struct f\n{\n    typedef T type[sizeof(U)];\n\n    BOOST_MPL_AUX_LAMBDA_SUPPORT(2, f, (T,U))\n};\n\ntypedef apply1< f<char,_1>,long >::type r;\nBOOST_MPL_ASSERT(( is_same< r, char[sizeof(long)] > ));\n```\n\n----------------------------------------\n\nTITLE: Default C++ Copyright Header\nDESCRIPTION: Standard copyright notice for C++ source files in the Boost Geometry Library, specifying authorship, dates, and Boost Software License\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/geometry/doc/copyright_note_policy.txt#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n// Boost.Geometry (aka GGL, Generic Geometry Library)\n\n// Copyright (c) 2007-2011 Barend Gehrels, Amsterdam, the Netherlands.\n// Copyright (c) 2008-2011 Bruno Lalande, Paris, France.\n// Copyright (c) 2009-2011 Mateusz Loskot, London, UK.\n\n// Parts of Boost.Geometry are redesigned from Geodan's Geographic Library\n// (geolib/GGL), copyright (c) 1995-2010 Geodan, Amsterdam, the Netherlands.\n\n// Use, modification and distribution is subject to the Boost Software License,\n// Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at\n// http://www.boost.org/LICENSE_1_0.txt)\n```\n\n----------------------------------------\n\nTITLE: Declaring status_result and status_outcome Type Aliases in C++\nDESCRIPTION: Declaration of the status_result and status_outcome template aliases in the experimental namespace. The default error type is experimental::error (which is an alias for system_code), and status_outcome has an additional exception_ptr parameter.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/experimental/status_result.md#2025-04-22_snippet_0\n\nLANGUAGE: c++\nCODE:\n```\nexperimental::status_result<T, E = experimental::error>\nexperimental::status_outcome<T, E = experimental::error, EP = std::exception_ptr>\n```\n\n----------------------------------------\n\nTITLE: Get Function for Distributed Iterator Property Map in C++\nDESCRIPTION: Free function to retrieve a value associated with a key from a distributed iterator property map.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/distributed_property_map.rst#2025-04-22_snippet_20\n\nLANGUAGE: cpp\nCODE:\n```\nreference get(iterator_property_map pm, const key_type& key);\n```\n\n----------------------------------------\n\nTITLE: Calculating Sampling Probability for Bernoulli Sampling Per-Byte in LaTeX\nDESCRIPTION: This LaTeX snippet calculates the probability of an allocation being sampled in Bernoulli sampling per-byte strategy. It uses the size of the allocation and the sampling rate.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/jemalloc/jemalloc/doc_internal/PROFILING_INTERNALS.md#2025-04-22_snippet_3\n\nLANGUAGE: latex\nCODE:\n```\n$$1-(1-\\frac{1}{R})^{Z}$$\n```\n\n----------------------------------------\n\nTITLE: Generating Vocabulary List for New Language\nDESCRIPTION: Instruction for creating a vocabulary list for a new stemmer using a script that extracts common words from a Wikipedia dump, requiring specification of the Unicode script and a minimum frequency threshold.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/snowball/CONTRIBUTING.rst#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://www.unicode.org/Public/13.0.0/ucd/Scripts.txt\n# Specify the minimum frequency to select.\n```\n\n----------------------------------------\n\nTITLE: Approximating Variance Contribution for Large R in LaTeX\nDESCRIPTION: This LaTeX snippet provides an approximation of the variance contribution for Bernoulli sampling per-byte when the sampling rate R is large. It uses an exponential approximation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/jemalloc/jemalloc/doc_internal/PROFILING_INTERNALS.md#2025-04-22_snippet_5\n\nLANGUAGE: latex\nCODE:\n```\n$$Z^2 \\frac{e^{-Z/R}}{1 - e^{-Z/R}} .$$\n```\n\n----------------------------------------\n\nTITLE: Including count Header in C++\nDESCRIPTION: Specifies the header file to include for using the count algorithm in C++.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/count.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/count.hpp>\n```\n\n----------------------------------------\n\nTITLE: Linking Boost Parameter Library Dependencies\nDESCRIPTION: Configures interface dependencies for the Boost Parameter library, including various Boost components required for compilation\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(boost_parameter\n  INTERFACE\n    Boost::config\n    Boost::core\n    Boost::function\n    Boost::fusion\n    Boost::mp11\n    Boost::mpl\n    Boost::optional\n    Boost::preprocessor\n    Boost::type_traits\n    Boost::utility\n)\n```\n\n----------------------------------------\n\nTITLE: Installation Configuration for Boost Libraries\nDESCRIPTION: This snippet checks for the Boost superproject version and compiles the install command to install the specified Boost libraries if conditions are met. This is used for correctly setting up the library installation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/fiber/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# Install\n\nif(BOOST_SUPERPROJECT_VERSION AND NOT CMAKE_VERSION VERSION_LESS 3.13)\n  boost_install(TARGETS boost_fiber boost_fiber_numa VERSION ${BOOST_SUPERPROJECT_VERSION} HEADER_DIRECTORY include)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Including Boost MPL Base Header for Base Metafunction\nDESCRIPTION: Header inclusion for using the 'base' metafunction from Boost MPL library. This metafunction is used to access the base class of a given type.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/Metafunctions-Trivial-Summary.rst#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\n#include <boost/mpl/base.hpp>\n```\n\n----------------------------------------\n\nTITLE: Configuring ArangoDB Assertion Tests with CMake\nDESCRIPTION: This CMake snippet sets up an executable for ArangoDB assertion tests, links required libraries, and adds a test command. It creates a target named 'arangodbtests_assertions', links it with necessary libraries including crash handler, assertions, and Google Test, and defines a test command to run the assertions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/Assertions/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(arangodbtests_assertions\n  EXCLUDE_FROM_ALL\n  AssertionsTests.cpp)\n\ntarget_link_libraries(arangodbtests_assertions\n  arango_crashhandler_light\n  arango_assertions\n  gtest\n  gtest_main)\n\nadd_test(assertions\n  COMMAND arangodbtests_assertions)\n```\n\n----------------------------------------\n\nTITLE: Optimized x86 Assembly for Trivial Exception Handling\nDESCRIPTION: Demonstrates the proposed optimized assembly code for the trivial try-catch case where the throw and catch are in the same stack frame. This optimization eliminates all exception handling overhead.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/leaf/doc/whitepaper.md#2025-04-22_snippet_15\n\nLANGUAGE: x86asm\nCODE:\n```\nmain:\n        xor     eax, eax\n        ret\n```\n\n----------------------------------------\n\nTITLE: Configuring Array Archive Tests in CMake\nDESCRIPTION: Sets up archive tests for different array types, including native arrays and Boost arrays. Conditionally includes the C++11 array test if the compiler supports it.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/serialization/CMake/CMakeLists.txt#2025-04-22_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\narchive_test(test_native_array A)\narchive_test(test_boost_array A)\nif(COMPILER_SUPPORTS_CXX11)\n  archive_test(test_array A)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Constructing Planar RGB Image Views in C++\nDESCRIPTION: Construction of planar RGB image views is facilitated with this function, allowing separate planes for each channel. It builds an image view from iterators for red, green, and blue channels and row size, supporting diverse color spaces.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/image_view.rst#2025-04-22_snippet_9\n\nLANGUAGE: cpp\nCODE:\n```\n// Iterator models channel iterator (e.g. bits8* or bits8 const*)\ntemplate <typename Iterator>\nimage_view<...> planar_rgb_view(\n    ptrdiff_t width, ptrdiff_t height,\n    IC r, IC g, IC b, ptrdiff_t rowsize);\n\n```\n\n----------------------------------------\n\nTITLE: Implementing the deduced Template in Boost Parameter Library C++\nDESCRIPTION: Defines the deduced template that wraps keyword tag arguments to optional or required templates. This simple wrapper has no special requirements.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_7\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <typename Tag>\nstruct deduced;\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building Boost Callable Traits Examples in CMake\nDESCRIPTION: This CMake script sets up the build process for examples in the Boost Callable Traits project. It creates a custom target for examples, sets include directories, handles experimental examples conditionally, and compiles individual example files.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/callable_traits/example/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_target(examples COMMENT \"Build all the examples.\")\nadd_dependencies(callable_traits_check examples)\n\ninclude_directories(${boost_callable_traits_SOURCE_DIR}/include)\n\nfile(GLOB_RECURSE EXAMPLES \"*.cpp\")\nfile(GLOB_RECURSE EXPERIMENTAL_EXAMPLES \"experimental*.cpp\")\n\nif (NOT BOOST_CLBL_TRTS_BUILD_EXPERIMENTAL)\n    foreach(_experimental IN LISTS EXPERIMENTAL_EXAMPLES)\n        list(REMOVE_ITEM EXAMPLES ${_experimental})\n    endforeach()\nendif()\n\nforeach(_file IN LISTS EXAMPLES)\n    boost_callable_traits_target_name_for(_target \"${_file}\")\n    add_executable(${_target} EXCLUDE_FROM_ALL \"${_file}\")\n    boost_callable_traits_add_test(${_target} ${CMAKE_CURRENT_BINARY_DIR}/${_target})\n    add_dependencies(examples ${_target})\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Defining Binary UFunc Structure in Boost.Python - C++\nDESCRIPTION: Defines a C++ template struct 'binary_ufunc' which facilitates the conversion of a C++ binary function into a ufunc-like callable in Python using Boost.Python. Requires Boost.Python and numpy. Template parameters define argument and result types, and includes methods such as 'call' and 'make'. Expects predefined types for arguments and result.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/doc/html/numpy/_sources/reference/binary_ufunc.rst.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nnamespace boost\n{\nnamespace python\n{\nnamespace numpy \n{\n\ntemplate <typename TBinaryFunctor,\n          typename TArgument1=typename TBinaryFunctor::first_argument_type,\n          typename TArgument2=typename TBinaryFunctor::second_argument_type,\n          typename TResult=typename TBinaryFunctor::result_type>\n\nstruct binary_ufunc \n{\n\n  static object call(TBinaryFunctor & self, \n                     object const & input1, \n                     object const & input2,\n                     object const & output);\n\n  static object make(); \n};\n\n}\n}\n}\n\n```\n\n----------------------------------------\n\nTITLE: Explicit Casting of Templated Functions for Higher-Order Functions in C++\nDESCRIPTION: Shows how to use explicit casting to select a specific overload from a templated function when passing it to std::accumulate. This demonstrates the limitations of function pointers with overloaded functions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/doc/src/gettingstarted.md.txt#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate<class T, class U>\nauto sum(T x, U y)\n{\n    return x + y;\n}\n\nauto sum_int = (int (*)(int, int))&sum;\n// Call integer overload\nint i = sum_int(1, 2);\n// Or pass to an algorithm\nstd::vector<int> v = { 1, 2, 3 };\nint total = std::accumulate(v.begin(), v.end(), 0, sum_int);\n```\n\n----------------------------------------\n\nTITLE: Declaring outcome<T, EC, EP, NoValuePolicy> Type Alias in C++\nDESCRIPTION: This is a type alias that resolves to either std_outcome or boost_outcome based on the Outcome edition in use. It resides in the BOOST_OUTCOME_V2_NAMESPACE namespace and is available in the boost/outcome/outcome.hpp header.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/aliases/outcome.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\noutcome<T, EC = varies, EP = varies, NoValuePolicy = policy::default_policy<T, EC, EP>>\n```\n\n----------------------------------------\n\nTITLE: Generating Docset Documentation\nDESCRIPTION: This snippet configures Doxygen to generate a Docset format documentation. It sets parameters such as generating the Docset and controls whether tree view and search engine features are included. The commands specify how the Docset is built and prepared for use.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hana/doc/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HANA_HTML_OUTPUT       _docset)\nset(HANA_GENERATE_DOCSET   YES)\nset(HANA_GENERATE_TREEVIEW NO)\nset(HANA_SEARCHENGINE      NO)\nconfigure_file(Doxyfile.in docset.doxygen @ONLY)\nadd_custom_target(docset\n    COMMAND ${DOXYGEN_EXECUTABLE} docset.doxygen\n    COMMAND ${CMAKE_COMMAND} -E chdir _docset make\n    COMMAND ${CMAKE_COMMAND} -E remove_directory boost.hana.docset\n    COMMAND ${CMAKE_COMMAND} -E copy_directory _docset/boost.hana.docset boost.hana.docset\n    COMMAND ${CMAKE_COMMAND} -E remove_directory _docset\n    COMMENT \"Generating documentation Docset\"\n    VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Harris Matrix Derivative Computation\nDESCRIPTION: Computes first-order derivatives for Harris corner detection, creating a matrix of squared and cross derivatives\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/image_processing/affine-region-detectors.rst.txt#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nHarrisMatrix = [(dx)^2, dxdy], [dxdy, (dy)^2]\n```\n\n----------------------------------------\n\nTITLE: Defining the distance metafunction template in C++\nDESCRIPTION: Defines the distance metafunction template that calculates the distance between two iterators First and Last. The result is an unspecified Integral Constant type.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/distance.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      typename First\n    , typename Last\n    >\nstruct distance\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Tai Le Script Character Ranges\nDESCRIPTION: Lists Unicode character ranges for the Tai Le script, including letters and tone markers. The Tai Le script is used by the Tai Le (Dehong Dai) people of Yunnan Province, China.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/spirit/workbench/unicode/Scripts.txt#2025-04-22_snippet_31\n\nLANGUAGE: unicode\nCODE:\n```\n1950..196D    ; Tai_Le # Lo  [30] TAI LE LETTER KA..TAI LE LETTER AI\n1970..1974    ; Tai_Le # Lo   [5] TAI LE LETTER TONE-2..TAI LE LETTER TONE-6\n\n# Total code points: 35\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies on macOS\nDESCRIPTION: Command to install SWIG for Python support in S2 Geometry Library on macOS using MacPorts.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/s2geometry/master/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo port install swig\n```\n\n----------------------------------------\n\nTITLE: Defining Deleted Default Constructor for basic_result in C++\nDESCRIPTION: Declaration of a deleted default constructor for the basic_result class, preventing default construction of instances.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/basic_result/default.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nbasic_result() = delete;\n```\n\n----------------------------------------\n\nTITLE: Creating Set from Non-Unique Types\nDESCRIPTION: Shows how to construct a set from a vector of potentially non-unique types using fold and insert operations.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/set.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ntypedef fold<\n      vector<int,int,long,long>\n    , set0<>\n    , insert<_1,_2>\n    >::type s;\n\nBOOST_MPL_ASSERT_RELATION( size<s>::value, ==, 2 );\n```\n\n----------------------------------------\n\nTITLE: Linking Test Dependencies\nDESCRIPTION: Links the test executable with required libraries including the VocBase API and Google Test framework.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/VocBase/Properties/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(\n  arangodb_vocbase_properties_test\n  arango_vocbase_api\n  gtest\n)\n```\n\n----------------------------------------\n\nTITLE: Defining BOOST_HOF_STATIC_LAMBDA_FUNCTION macro for C++\nDESCRIPTION: This snippet defines the BOOST_HOF_STATIC_LAMBDA_FUNCTION macro, which allows for initializing global function objects containing non-capturing lambdas. The implementation varies based on compiler support for inline lambdas.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/lambda.hpp.txt#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#if BOOST_HOF_HAS_INLINE_LAMBDAS\n#define BOOST_HOF_STATIC_LAMBDA_FUNCTION BOOST_HOF_STATIC_FUNCTION\n#else\n#define BOOST_HOF_DETAIL_MAKE_REVEAL_STATIC(T) BOOST_HOF_DETAIL_CONSTEXPR_DEDUCE_UNIQUE(T) boost::hof::detail::reveal_static_lambda_function_wrapper_factor<T>()\n#define BOOST_HOF_STATIC_LAMBDA_FUNCTION(name) \\\nstruct fit_private_static_function_ ## name {}; \\\nBOOST_HOF_STATIC_AUTO_REF name = BOOST_HOF_DETAIL_MAKE_REVEAL_STATIC(fit_private_static_function_ ## name)\n#endif\n```\n\n----------------------------------------\n\nTITLE: Building Zlib with Visual Studio 2012\nDESCRIPTION: Instructions for building Zlib using Microsoft Visual C++ 2012. Make sure to decompress all files before opening the project.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/zlib/zlib-1.2.13/contrib/vstudio/readme.txt#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n- Decompress current zlib, including all contrib/* files\n- Open contrib\\vstudio\\vc11\\zlibvc.sln with Microsoft Visual C++ 2012\n```\n\n----------------------------------------\n\nTITLE: Selecting and Configuring Localization Backends in C++\nDESCRIPTION: This snippet demonstrates how to create a custom localization_backend_manager, select a specific backend (std in this case), create a generator using the custom backend, and set it as the global backend.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/doc/using_localization_backends.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nlocalization_backend_manager my = localization_backend_manager::global(); \n// Get global backend\n\nmy.select(\"std\"); \n// select std backend as default\n\ngenerator gen(my); \n// create a generator that uses this backend.\n\nlocalization_backend_manager::global(my);\n// set this backend globally\n\ngenerator gen2();\n// now this one would use the new global backend.\n```\n\n----------------------------------------\n\nTITLE: Running tests for the Boost StaticAssert library\nDESCRIPTION: Commands for running tests for the StaticAssert library using Boost's build system. Shows how to run either all tests or a single specific test from the test directory.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/static_assert/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n../../../b2                        <- run all tests\n../../../b2 static_assert_test     <- single test\n```\n\n----------------------------------------\n\nTITLE: Accessing is_exception_ptr_available<T> Trait Using Variable Alias in C++\nDESCRIPTION: A variable alias is provided for convenient access to the trait's value. This alias is defined in the same namespace and header as the main trait.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/traits/is_exception_ptr_available.md#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nis_exception_ptr_available_v<T>\n```\n\n----------------------------------------\n\nTITLE: Overriding BOOST_MPL_LIMIT_SET_SIZE with Custom Value in C++\nDESCRIPTION: Example showing how to override the default BOOST_MPL_LIMIT_SET_SIZE value to 10, disabling preprocessed headers, and using the set_c template with the new limit.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/LIMIT_SET_SIZE.rst#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\n#define BOOST_MPL_CFG_NO_PREPROCESSED_HEADERS\n#define BOOST_MPL_LIMIT_SET_SIZE 10\n#include <boost/mpl/set.hpp>\n\nusing namespace boost::mpl;\n\ntypedef set_c<int,1> s_1;\ntypedef set_c<int,1,2,3,4,5,6,7,8,9,10> s_10;\n// typedef set_c<int,1,2,3,4,5,6,7,8,9,10,11> s_11; // error!\n```\n\n----------------------------------------\n\nTITLE: Unary Ufunc Example with Boost Integration\nDESCRIPTION: Demonstrates creating a Python class `UnarySquare` using Boost.Python, defining it with a `unary_ufunc`, and then instantiating an object to execute a mathematical operation. The example uses `boost::shared_ptr` for object management and demonstrates calling ufuncs with Python attributes.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/doc/html/numpy/_sources/reference/unary_ufunc.rst.txt#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\nnamespace p = boost::python;\nnamespace np = boost::python::numpy;\n\nstruct UnarySquare \n{\n  typedef double argument_type;\n  typedef double result_type;\n  double operator()(double r) const { return r * r;}\n};\n\np::object ud = p::class_<UnarySquare, boost::shared_ptr<UnarySquare> >(\"UnarySquare\").def(\"__call__\", np::unary_ufunc<UnarySquare>::make());\np::object inst = ud();\nstd::cout << \"Square of unary scalar 1.0 is \" << p::extract <char const * > (p::str(inst.attr(\"__call__\")(1.0))) << std::endl ;\n```\n\n----------------------------------------\n\nTITLE: Setting Up IDE Integration for Header Files in CMake\nDESCRIPTION: Configures the CMake build system to include header files in the IDE project view. It enables folder organization, collects all .hpp files in the current directory, creates a custom target named 'concept' containing these files, and places this target in a 'safe_numerics' folder in the IDE's project hierarchy.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/boost/safe_numerics/concept/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n####################\n# add include headers to IDE\n\nset(USE_FOLDERS TRUE)\n\nfile(GLOB include_files\n  RELATIVE \"${CMAKE_CURRENT_SOURCE_DIR}\"\n  \"${CMAKE_CURRENT_SOURCE_DIR}/*.hpp\"\n)\nadd_custom_target(concept SOURCES ${include_files})\nset_target_properties(concept PROPERTIES FOLDER \"safe_numerics\")\n\n# end headers in IDE\n####################\n```\n\n----------------------------------------\n\nTITLE: Directory Management and Endianness Detection\nDESCRIPTION: This snippet creates a target directory and checks the system's endianness, setting a corresponding CMake variable.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/v8-build/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# create target directory\nfile(MAKE_DIRECTORY ${V8_TARGET_DIR})\n\n# detect endianess, and translate to gyp/v8 proper string\ninclude(TestBigEndian)\nTEST_BIG_ENDIAN(IS_BIGENDIAN)\n\nif (${IS_BIGENDIAN})\n  set(ENDIANESS 'big')\nelse()\n  set(ENDIANESS 'little')\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring V8 Build Flags Based on Build Type\nDESCRIPTION: Sets up compiler flags for V8 based on CMake build type (Debug, MinSizeRel, Release, RelWithDebInfo). Configures C and C++ flags including sanitizer removal and warning handling.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/v8-build/CMakeLists.txt#2025-04-22_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nif (CMAKE_BUILD_TYPE STREQUAL \"Debug\")\n    set(V8_CFLAGS   \"${CMAKE_C_FLAGS}   ${CMAKE_C_FLAGS_DEBUG}\")\n    set(V8_CXXFLAGS \"${CMAKE_CXX_FLAGS} ${CMAKE_CXX_FLAGS_DEBUG}\")\n  elseif (CMAKE_BUILD_TYPE STREQUAL \"MinSizeRel\")\n    set(V8_CFLAGS   \"${CMAKE_C_FLAGS}   ${CMAKE_C_FLAGS_MINSIZEREL}\")\n    set(V8_CXXFLAGS \"${CMAKE_CXX_FLAGS} ${CMAKE_CXX_FLAGS_MINSIZEREL}\")\n  elseif (CMAKE_BUILD_TYPE STREQUAL \"Release\")\n    set(V8_CFLAGS   \"${CMAKE_C_FLAGS}   ${CMAKE_C_FLAGS_RELEASE}\")\n    set(V8_CXXFLAGS \"${CMAKE_CXX_FLAGS} ${CMAKE_CXX_FLAGS_RELEASE}\")\n  elseif (CMAKE_BUILD_TYPE STREQUAL \"RelWithDebInfo\")\n    set(V8_CFLAGS   \"${CMAKE_C_FLAGS}   ${CMAKE_C_FLAGS_RELWITHDEBINFO}\")\n    set(V8_CXXFLAGS \"${CMAKE_CXX_FLAGS} ${CMAKE_CXX_FLAGS_RELWITHDEBINFO}\")\n  endif ()\n```\n\n----------------------------------------\n\nTITLE: HTML Footer with Validation Links and Copyright\nDESCRIPTION: This snippet generates the footer section of a webpage. It includes links to the W3C CSS and XHTML validators, along with copyright information and a link to the Boost Software License. The links use images and alt text for accessibility.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/exception/doc/source/html_suffix.txt#2025-04-22_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div id=\"footer\">\n<p>\n<a class=\"logo\" href=\"http://jigsaw.w3.org/css-validator/check/referer\"><img class=\"logo_pic\" src=\"valid-css.png\" alt=\"Valid CSS\" height=\"31\" width=\"88\"/></a>\n<a class=\"logo\" href=\"http://validator.w3.org/check?uri=referer\"><img class=\"logo_pic\" src=\"valid-xhtml.png\" alt=\"Valid XHTML 1.0\" height=\"31\" width=\"88\"/></a>\n<small>Copyright (c) 2006-2009 by Emil Dotchevski and Reverge Studios, Inc.<br/>\nDistributed under the <a href=\"http://www.boost.org/LICENSE_1_0.txt\">Boost Software License, Version 1.0</a>.</small>\n</p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining RGB64 Pixel and Image Types in C++ GIL\nDESCRIPTION: This snippet demonstrates how to define a new pixel type and a corresponding image type using GIL's template system. It showcases the use of the existing rgb_layout_t to create a 64-bit RGB pixel type, a pointer type for that pixel, and a type for the image. Dependencies include the GIL library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/extending.rst.txt#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\ntypedef pixel<double,rgb_layout_t>   rgb64_pixel_t;    // 64 bit RGB pixel\ntypedef rgb64_pixel*                 rgb64_pixel_ptr_t;// pointer to 64-bit interleaved data\ntypedef image_type<double,rgb_layout_t>::type rgb64_image_t;    // 64-bit interleaved image\n```\n\n----------------------------------------\n\nTITLE: Static Assertion Message for Fail to Compile Observers Policy in C++\nDESCRIPTION: This code snippet shows the static assertion message that occurs when attempting to compile wide observer policy functions with unrecognized types. It explains the issue and suggests solutions such as specifying a NoValuePolicy or using more specific type aliases.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/policies/fail_to_compile_observers.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nAttempt to wide observe value, error or exception for a result/outcome given an EC or E type which is not void, and for whom trait::has_error_code_v<EC>, trait::has_exception_ptr_v<EC>, and trait::has_exception_ptr_v<E> are all false. Please specify a NoValuePolicy to tell result/outcome what to do, or else use a more specific convenience type alias such as unchecked<T, E> to indicate you want the wide observers to be narrow, or checked<T, E> to indicate you always want an exception throw etc.\n```\n\n----------------------------------------\n\nTITLE: Defining all_narrow Policy Class in C++\nDESCRIPTION: This snippet defines the `all_narrow` policy class, which inherits from `base` and specifies that hard undefined behavior should occur on incorrect narrow and wide value, error, or exception observation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/policies/all_narrow.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nnamespace BOOST_OUTCOME_V2_NAMESPACE::policy {\n  class all_narrow : public base {\n    // Implementation details not shown\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Including key_type Header in C++\nDESCRIPTION: This code snippet shows how to include the header file for the key_type metafunction in a C++ program.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/key_type.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/key_type.hpp>\n```\n\n----------------------------------------\n\nTITLE: Default No-Value Policy Behavior\nDESCRIPTION: Explains the default policy's behavior when accessing a value without checking existence, which throws a std::system_error if no value is present\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/tutorial/essential/no-value/_index.md#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\n// Default policy for std::error_code\n// If r.has_value() == false, throws std::system_error{r.error()}\n```\n\n----------------------------------------\n\nTITLE: Defining Host Machine Properties for WebAssembly Compilation\nDESCRIPTION: This section specifies the host machine properties for the Meson build system when targeting WebAssembly. It defines the system as Emscripten, sets the CPU family and CPU to wasm32, and specifies little-endian architecture.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/leaf/wasm.txt#2025-04-22_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[host_machine]\nsystem = 'emscripten'\ncpu_family = 'wasm32'\ncpu = 'wasm32'\nendian = 'little'\n```\n\n----------------------------------------\n\nTITLE: Single View Template Declaration\nDESCRIPTION: Template struct declaration for single_view that creates a view of type T as a single-element sequence.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/single_view.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n    typename T\n>\nstruct single_view\n{\n    // |unspecified|\n    // |...|\n};\n```\n\n----------------------------------------\n\nTITLE: Adding New Commits to Pull Request\nDESCRIPTION: This code snippet illustrates how to add new commits to an existing pull request in response to feedback from reviewers. It shows the essential git commands for updating the pull request effectively.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/CONTRIBUTING.md#2025-04-22_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ncd libs/gil\ngit checkout feature/foo\ngit add -A\ngit commit -m \"Fix CI build failure\"\ngit push <username> feature/foo\n```\n\n----------------------------------------\n\nTITLE: Iterator Subtraction Operation\nDESCRIPTION: Operator overload for subtracting a value from an iterator using a temporary object\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/iterator_facade_ref.rst#2025-04-22_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\nDerived tmp(static_cast<Derived const*>(this));\nreturn tmp -= n;\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Inherited Script Character Ranges\nDESCRIPTION: Lists Unicode character ranges that belong to the Inherited script category. Includes combining marks, variation selectors, and other special characters that inherit their script from surrounding characters.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/spirit/workbench/unicode/Scripts.txt#2025-04-22_snippet_25\n\nLANGUAGE: unicode\nCODE:\n```\n0300..036F    ; Inherited # Mn [112] COMBINING GRAVE ACCENT..COMBINING LATIN SMALL LETTER X\n0485..0486    ; Inherited # Mn   [2] COMBINING CYRILLIC DASIA PNEUMATA..COMBINING CYRILLIC PSILI PNEUMATA\n064B..0655    ; Inherited # Mn  [11] ARABIC FATHATAN..ARABIC HAMZA BELOW\n0670          ; Inherited # Mn       ARABIC LETTER SUPERSCRIPT ALEF\n0951..0952    ; Inherited # Mn   [2] DEVANAGARI STRESS SIGN UDATTA..DEVANAGARI STRESS SIGN ANUDATTA\n1CD0..1CD2    ; Inherited # Mn   [3] VEDIC TONE KARSHANA..VEDIC TONE PRENKHA\n1CD4..1CE0    ; Inherited # Mn  [13] VEDIC SIGN YAJURVEDIC MIDLINE SVARITA..VEDIC TONE RIGVEDIC KASHMIRI INDEPENDENT SVARITA\n1CE2..1CE8    ; Inherited # Mn   [7] VEDIC SIGN VISARGA SVARITA..VEDIC SIGN VISARGA ANUDATTA WITH TAIL\n1CED          ; Inherited # Mn       VEDIC SIGN TIRYAK\n1DC0..1DE6    ; Inherited # Mn  [39] COMBINING DOTTED GRAVE ACCENT..COMBINING LATIN SMALL LETTER Z\n1DFD..1DFF    ; Inherited # Mn   [3] COMBINING ALMOST EQUAL TO BELOW..COMBINING RIGHT ARROWHEAD AND DOWN ARROWHEAD BELOW\n200C..200D    ; Inherited # Cf   [2] ZERO WIDTH NON-JOINER..ZERO WIDTH JOINER\n20D0..20DC    ; Inherited # Mn  [13] COMBINING LEFT HARPOON ABOVE..COMBINING FOUR DOTS ABOVE\n20DD..20E0    ; Inherited # Me   [4] COMBINING ENCLOSING CIRCLE..COMBINING ENCLOSING CIRCLE BACKSLASH\n20E1          ; Inherited # Mn       COMBINING LEFT RIGHT ARROW ABOVE\n20E2..20E4    ; Inherited # Me   [3] COMBINING ENCLOSING SCREEN..COMBINING ENCLOSING UPWARD POINTING TRIANGLE\n20E5..20F0    ; Inherited # Mn  [12] COMBINING REVERSE SOLIDUS OVERLAY..COMBINING ASTERISK ABOVE\n302A..302F    ; Inherited # Mn   [6] IDEOGRAPHIC LEVEL TONE MARK..HANGUL DOUBLE DOT TONE MARK\n3099..309A    ; Inherited # Mn   [2] COMBINING KATAKANA-HIRAGANA VOICED SOUND MARK..COMBINING KATAKANA-HIRAGANA SEMI-VOICED SOUND MARK\nFE00..FE0F    ; Inherited # Mn  [16] VARIATION SELECTOR-1..VARIATION SELECTOR-16\nFE20..FE26    ; Inherited # Mn   [7] COMBINING LIGATURE LEFT HALF..COMBINING CONJOINING MACRON\n101FD         ; Inherited # Mn       PHAISTOS DISC SIGN COMBINING OBLIQUE STROKE\n1D167..1D169  ; Inherited # Mn   [3] MUSICAL SYMBOL COMBINING TREMOLO-1..MUSICAL SYMBOL COMBINING TREMOLO-3\n1D17B..1D182  ; Inherited # Mn   [8] MUSICAL SYMBOL COMBINING ACCENT..MUSICAL SYMBOL COMBINING LOURE\n1D185..1D18B  ; Inherited # Mn   [7] MUSICAL SYMBOL COMBINING DOIT..MUSICAL SYMBOL COMBINING TRIPLE TONGUE\n1D1AA..1D1AD  ; Inherited # Mn   [4] MUSICAL SYMBOL COMBINING DOWN BOW..MUSICAL SYMBOL COMBINING SNAP PIZZICATO\nE0100..E01EF  ; Inherited # Mn [240] VARIATION SELECTOR-17..VARIATION SELECTOR-256\n\n# Total code points: 523\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode New Tai Lue Script Character Ranges\nDESCRIPTION: Lists Unicode character ranges for the New Tai Lue script, including letters, vowel signs, tone marks, and digits. Used to write the Tai Lü language in China's Yunnan Province.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/spirit/workbench/unicode/Scripts.txt#2025-04-22_snippet_40\n\nLANGUAGE: unicode\nCODE:\n```\n1980..19AB    ; New_Tai_Lue # Lo  [44] NEW TAI LUE LETTER HIGH QA..NEW TAI LUE LETTER LOW SUA\n19B0..19C0    ; New_Tai_Lue # Mc  [17] NEW TAI LUE VOWEL SIGN VOWEL SHORTENER..NEW TAI LUE VOWEL SIGN IY\n19C1..19C7    ; New_Tai_Lue # Lo   [7] NEW TAI LUE LETTER FINAL V..NEW TAI LUE LETTER FINAL B\n19C8..19C9    ; New_Tai_Lue # Mc   [2] NEW TAI LUE TONE MARK-1..NEW TAI LUE TONE MARK-2\n19D0..19DA    ; New_Tai_Lue # Nd  [11] NEW TAI LUE DIGIT ZERO..NEW TAI LUE THAM DIGIT ONE\n19DE..19DF    ; New_Tai_Lue # Po   [2] NEW TAI LUE SIGN LAE..NEW TAI LUE SIGN LAEV\n\n# Total code points: 83\n```\n\n----------------------------------------\n\nTITLE: CMake: Conditional OpenSSL Configuration\nDESCRIPTION: This snippet checks if OpenSSL is found and, if so, configures source groups, adds an executable target (http-client-coro-ssl), sets the folder property for the target, and links the necessary libraries (OpenSSL, ASIO, and Boost.Beast). This section ensures that the SSL-related client is only built when OpenSSL is available.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/beast/example/http/client/coro-ssl/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (OPENSSL_FOUND)\n    GroupSources(include/boost/beast beast)\n    GroupSources(example/common common)\n    GroupSources(example/http/client/coro-ssl \"/\")\n\n    add_executable (http-client-coro-ssl\n        ${BOOST_BEAST_FILES}\n        ${PROJECT_SOURCE_DIR}/example/common/root_certificates.hpp\n        Jamfile\n        http_client_coro_ssl.cpp\n    )\n\n    set_property(TARGET http-client-coro-ssl PROPERTY FOLDER \"example-http-client\")\n\n    target_link_libraries (http-client-coro-ssl\n        OpenSSL::SSL OpenSSL::Crypto\n        lib-asio\n        lib-asio-ssl\n        lib-beast\n        )\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Including reverse_replace_if Header in C++\nDESCRIPTION: Shows how to include the header file for the reverse_replace_if algorithm in a C++ program.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/reverse_replace_if.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/replace_if.h>\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost Array Library with CMake\nDESCRIPTION: Sets up the Boost Array library as an interface library with its dependencies. Defines the minimum CMake version, project details, and links required Boost components like assert, config, core, static_assert, and throw_exception.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/array/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.20)\nproject(boost_array VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n\nadd_library(boost_array INTERFACE)\nadd_library(Boost::array ALIAS boost_array)\n\ntarget_include_directories(boost_array INTERFACE include)\n\ntarget_link_libraries(boost_array\n    INTERFACE\n        Boost::assert\n        Boost::config\n        Boost::core\n        Boost::static_assert\n        Boost::throw_exception\n)\n```\n\n----------------------------------------\n\nTITLE: Building Boost.GIL Tests and Examples with Boost.Build\nDESCRIPTION: This snippet shows how to build all tests for Boost.GIL, specifying the use of Boost.Build with basic commands to compile the necessary files for testing.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/CONTRIBUTING.md#2025-04-22_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\ncd libs/gil\n../../b2\n```\n\n----------------------------------------\n\nTITLE: Defining Boost.Fiber Library and Dependencies\nDESCRIPTION: This snippet creates the boost_fiber library and specifies its source files along with the target include directories and library dependencies. It manages the inclusion of core Boost libraries and defines compile features.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/fiber/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# boost_fiber\n\nadd_library(boost_fiber\n  src/algo/algorithm.cpp\n  src/algo/round_robin.cpp\n  src/algo/shared_work.cpp\n  src/algo/work_stealing.cpp\n  src/barrier.cpp\n  src/condition_variable.cpp\n  src/context.cpp\n  src/fiber.cpp\n  src/future.cpp\n  src/mutex.cpp\n  src/properties.cpp\n  src/recursive_mutex.cpp\n  src/recursive_timed_mutex.cpp\n  src/scheduler.cpp\n  src/timed_mutex.cpp\n  src/waker.cpp\n)\n\nadd_library(Boost::fiber ALIAS boost_fiber)\n\ntarget_include_directories(boost_fiber PUBLIC include)\n\ntarget_link_libraries(boost_fiber\n  PUBLIC\n    Boost::assert\n    Boost::config\n    Boost::context\n    Boost::core\n    Boost::intrusive\n    Boost::predef\n    Boost::smart_ptr\n)\n\ntarget_compile_features(boost_fiber PUBLIC cxx_std_11)\n\ntarget_compile_definitions(boost_fiber\n  PUBLIC BOOST_FIBER_NO_LIB\n  PRIVATE BOOST_FIBER_SOURCE BOOST_FIBERS_SOURCE\n)\n\nif(BUILD_SHARED_LIBS)\n  target_compile_definitions(boost_fiber PUBLIC BOOST_FIBER_DYN_LINK BOOST_FIBERS_DYN_LINK)\nelse()\n  target_compile_definitions(boost_fiber PUBLIC BOOST_FIBER_STATIC_LINK)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Cloning the Boost project with StaticAssert library\nDESCRIPTION: Commands for cloning the entire Boost project repository, which includes the StaticAssert library as a submodule. This setup is required for development and testing of the library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/static_assert/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/boostorg/boost\ncd boost\ngit submodule update --init\n```\n\n----------------------------------------\n\nTITLE: Boost.Locale Documentation Structure\nDESCRIPTION: Doxygen documentation structure defining the main page and subpages for Boost.Locale usage guide, including various features and functionalities of the library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/doc/using_boost_locale.txt#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n/*!\n\\page using_boost_locale Using Boost.Locale\n\nIn this section we'll talk mostly about the ICU backend, as it is both the default and the most powerful\nlocalization backend provided by this library. In later sections we will note the features that are\nsupported by other localization backends.\n\n\n- \\subpage locale_gen\n- \\subpage collation\n- \\subpage conversions\n- \\subpage formatting_and_parsing\n- \\subpage messages_formatting\n- \\subpage charset_handling\n- \\subpage boundary_analysys\n- \\subpage localized_text_formatting\n- \\subpage dates_times_timezones\n- \\subpage locale_information\n- \\subpage working_with_multiple_locales \n\n*/\n```\n\n----------------------------------------\n\nTITLE: Using sizeof_ Metafunction with Type Parameter in C++\nDESCRIPTION: Example of how to use the sizeof_ metafunction to get the size of a type wrapped as an Integral Constant.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/sizeof_.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntypedef sizeof_<x>::type n;\n```\n\n----------------------------------------\n\nTITLE: Declaring C++ Function in C\nDESCRIPTION: C function declaration for a C++ string conversion function, using extern \"C\" linkage to make it callable from C code.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/experimental/c-api/example2.md#2025-04-22_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n{{% snippet \"c_api.c\" \"preamble\" %}}\n```\n\n----------------------------------------\n\nTITLE: Linking Dependencies for arango_v8server\nDESCRIPTION: Specifies the library dependencies for arango_v8server, including internal ArangoDB components like agency, iresearch, replication, and V8 libraries, as well as external V8 JavaScript engine libraries.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/V8Server/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(arango_v8server\n  arango_agency\n  arango_iresearch\n  arango_replication\n  arango_v8\n  arango_v8_no_deadline\n  ${V8_LIBS})\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Transform and Reverse Transform Algorithms in C++ Template Metaprogramming\nDESCRIPTION: This example shows how to use the transform and reverse_transform algorithms in C++ template metaprogramming. It demonstrates creating a range, transforming it with various operations, and then using the reverse transform to get back to the original range.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/ReversibleAlgorithm.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntypedef transform< \n      range_c<int,0,10>\n    , plus<_1,int_<7> >\n    , back_inserter< vector0<> > \n    >::type r1;\n\ntypedef transform< r1, minus<_1,int_<2> > >::type r2;\ntypedef reverse_transform< \n      r2\n    , minus<_1,5> \n    , front_inserter< vector0<> > \n    >::type r3;\n\nBOOST_MPL_ASSERT(( equal<r1, range_c<int,7,17> > ));\nBOOST_MPL_ASSERT(( equal<r2, range_c<int,5,15> > ));\nBOOST_MPL_ASSERT(( equal<r3, range_c<int,0,10> > ));\n```\n\n----------------------------------------\n\nTITLE: Linking Boost Graph Parallel Library\nDESCRIPTION: Links the boost_graph_parallel library against other Boost libraries. The PUBLIC keyword means these dependencies are also propagated to dependent projects. Libraries like Boost::assert, Boost::mpi, and Boost::serialization are linked for the boost_graph_parallel library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(boost_graph_parallel\n  PUBLIC\n    Boost::assert\n    Boost::concept_check\n    Boost::config\n    Boost::container_hash\n    Boost::core\n    Boost::detail\n    Boost::dynamic_bitset\n    Boost::filesystem\n    Boost::foreach\n    Boost::function\n    Boost::graph\n    Boost::iterator\n    Boost::lexical_cast\n    Boost::mpi\n    Boost::mpl\n    Boost::optional\n    Boost::property_map\n    Boost::property_map_parallel\n    Boost::random\n    Boost::serialization\n    Boost::smart_ptr\n    Boost::static_assert\n    Boost::tuple\n    Boost::type_traits\n    Boost::variant\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Indirect Reference Metafunction in C++\nDESCRIPTION: This code snippet defines a template struct 'indirect_reference' that determines the reference type for a dereferenceable object. The actual type is determined based on whether the object can be incremented and the availability of certain type traits.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/indirect_reference_ref.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <class Dereferenceable>\nstruct indirect_reference\n{\n    typedef /* see below */ type;\n};\n```\n\nLANGUAGE: C++\nCODE:\n```\nif ( ++x is ill-formed )\n    return ``pointee<Dereferenceable>::type&``\nelse\n    std::iterator_traits<Dereferenceable>::reference\n```\n\n----------------------------------------\n\nTITLE: Calculating Variance of Sampling Strategies in LaTeX\nDESCRIPTION: This LaTeX snippet demonstrates the step-by-step calculation of variance for sampling strategies. It starts with the variance of the sum and simplifies to a final expression involving allocation sizes and sampling probabilities.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/jemalloc/jemalloc/doc_internal/PROFILING_INTERNALS.md#2025-04-22_snippet_1\n\nLANGUAGE: latex\nCODE:\n```\n$$\n\\begin{aligned}\n& \\mathrm{Var}[\\sum_i S_i I_i \\frac{1}{\\mathrm{E}[I_i]}]  \\\\\n=& \\sum_i \\mathrm{Var}[S_i I_i \\frac{1}{\\mathrm{E}[I_i]}] \\\\\n=& \\sum_i \\frac{S_i^2}{\\mathrm{E}[I_i]^2} \\mathrm{Var}[I_i] \\\\\n=& \\sum_i \\frac{S_i^2}{\\mathrm{E}[I_i]^2} \\mathrm{Var}[I_i] \\\\\n=& \\sum_i \\frac{S_i^2}{\\mathrm{E}[I_i]^2} \\mathrm{E}[I_i](1 - \\mathrm{E}[I_i]) \\\\\n=& \\sum_i S_i^2 \\frac{1 - \\mathrm{E}[I_i]}{\\mathrm{E}[I_i]}.\n\\end{aligned}\n$$\n```\n\n----------------------------------------\n\nTITLE: Defining the 'reveal' Function Adaptor Template in C++\nDESCRIPTION: This snippet defines the main 'reveal_adaptor' template class that implements the core functionality of the 'reveal' adaptor. It includes SFINAE-friendly operator() overloads and utilizes failure reporting mechanisms.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/reveal.hpp.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<class F, class Failure=get_failure<F>>\nstruct reveal_adaptor : detail::traverse_failure<F, Failure>, F\n{\n    typedef detail::traverse_failure<F, Failure> base;\n    using F::operator();\n\n    BOOST_HOF_INHERIT_CONSTRUCTOR(reveal_adaptor, F);\n\n    template<class... Ts>\n    constexpr auto operator()(Ts&&... xs) const\n    BOOST_HOF_RETURNS(F::operator()(BOOST_HOF_FORWARD(Ts)(xs)...));\n\n    // This overload is only enabled when the function is not invocable\n    template<\n        class... Ts,\n        class=typename std::enable_if<(!is_invocable<F, Ts...>::value)>::type\n    >\n    constexpr auto operator()(Ts&&... xs) const\n    BOOST_HOF_RETURNS(base::operator()(BOOST_HOF_FORWARD(Ts)(xs)...));\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Hugo Page Metadata for ArangoDB Policies Documentation\nDESCRIPTION: This Hugo frontmatter defines the title and weight for a documentation page about ArangoDB policies. It also includes a shortcode to display child pages with descriptions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/policies/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: hugo\nCODE:\n```\n+++\ntitle = \"Policies\"\nweight = 40\n+++\n\n{{% children description=\"true\" depth=\"2\" %}}\n```\n\n----------------------------------------\n\nTITLE: Implementing eval_helper Struct for Result Management\nDESCRIPTION: Helper structure that manages the evaluation of functions with both void and non-void return types. For non-void returns, it stores and provides access to the result, while for void returns it performs the evaluation without storing a result.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/apply_eval.hpp.txt#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<class R>\nstruct eval_helper\n{\n    R result;\n\n    template<class F, class... Ts>\n    constexpr eval_helper(const F& f, Ts&&... xs) : result(boost::hof::apply(f, BOOST_HOF_FORWARD(Ts)(xs)...))\n    {}\n};\n\ntemplate<>\nstruct eval_helper<void>\n{\n    int x;\n    template<class F, class... Ts>\n    constexpr eval_helper(const F& f, Ts&&... xs) : x((boost::hof::apply(f, BOOST_HOF_FORWARD(Ts)(xs)...), 0))\n    {}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining target sources for ArangoDB graph (CMake)\nDESCRIPTION: This CMake command specifies the source files that are compiled and linked to create the `arango_graph` target. The `PRIVATE` keyword indicates that these sources are only used internally within the `arango_graph` target and not exposed for linking by other targets. The specified C++ files, `UniquenessLevel.cpp` and `ValidationResult.cpp`, are included in the compilation process for `arango_graph`.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/Graph/Types/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(arango_graph PRIVATE\n  UniquenessLevel.cpp\n  ValidationResult.cpp)\n```\n\n----------------------------------------\n\nTITLE: Globbing and Excluding Example Files\nDESCRIPTION: Uses file globs to gather all example files and excludes certain ones based on specified conditions. Prepares a list of files ready to be compiled, excluding unsupported ones.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hana/example/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nfile(GLOB_RECURSE EXAMPLES \"*.cpp\")\nfile(GLOB_RECURSE EXCLUDED_EXAMPLES ${EXCLUDED_EXAMPLES})\nlist(REMOVE_ITEM EXAMPLES \"\" ${EXCLUDED_EXAMPLES})\n```\n\n----------------------------------------\n\nTITLE: Adding Beast Library Subdirectories in CMake\nDESCRIPTION: This CMake snippet adds subdirectories for the core components of the Beast library: async, coro, and sync. It also conditionally adds SSL-related subdirectories if OpenSSL is found on the system.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/beast/example/websocket/client/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory (async)\nadd_subdirectory (coro)\nadd_subdirectory (sync)\n\nif (OPENSSL_FOUND)\n    add_subdirectory (async-ssl)\n    add_subdirectory (async-ssl-system-executor)\n    add_subdirectory (coro-ssl)\n    add_subdirectory (sync-ssl)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining RGBA Color Space with Boost.GIL\nDESCRIPTION: This snippet defines the RGBA color space in Boost.GIL using MPL types. It delineates the semantic ordering of channels, where red_t is the first channel, followed by green_t, blue_t, and alpha_t. The example demonstrates the use of mpl::vector4 to set up the color space.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/color_space.rst.txt#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nstruct red_t {};\\nstruct green_t {};\\nstruct blue_t {};\\nstruct alpha_t {};\\nrgba_t = using mpl::vector4<red_t, green_t, blue_t, alpha_t>;\n```\n\n----------------------------------------\n\nTITLE: Template Usage in std::expected<T, E>\nDESCRIPTION: Template syntax demonstrating the usage of std::expected with generic type parameters T and E for value and error handling.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/tutorial/advanced/interop/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nstd::expected<T, E>\n```\n\n----------------------------------------\n\nTITLE: Merging Local MSTs Algorithm Declaration\nDESCRIPTION: These are the function declarations for the merge local minimum spanning trees algorithm in the Parallel BGL. This algorithm computes minimum spanning forests from local edges and merges them along a tree structure. The overloads allow specifying a VertexIndexMap.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/dehne_gotz_min_spanning_tree.rst#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nnamespace graph {\n    template<typename Graph, typename WeightMap, typename OutputIterator,\n             typename VertexIndexMap>\n    OutputIterator\n    merge_local_minimum_spanning_trees(const Graph& g, WeightMap weight,\n                                       OutputIterator out, \n                                       VertexIndexMap index);\n\n    template<typename Graph, typename WeightMap, typename OutputIterator>\n    inline OutputIterator\n    merge_local_minimum_spanning_trees(const Graph& g, WeightMap weight,\n                                       OutputIterator out);\n  }\n```\n\n----------------------------------------\n\nTITLE: Including not_equal_to Metafunction Headers in C++\nDESCRIPTION: Specifies the necessary header files to include for using the not_equal_to metafunction in C++ code.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/not_equal_to.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/not_equal_to.hpp>\n#include <boost/mpl/comparison.hpp>\n```\n\n----------------------------------------\n\nTITLE: Numeric Matrix Data Structure\nDESCRIPTION: A 4x4 matrix or grid containing two distinct numeric values (2134582590 and 2141031480) with a header line specifying '0 4', which may represent dimensions or configuration parameters.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/polygon/example/input_data/primary/primary_050.txt#2025-04-22_snippet_0\n\nLANGUAGE: data\nCODE:\n```\n0 4\n2134582590 2134582590 2134582590 2141031480\n2134582590 2134582590 2141031480 2134582590\n2141031480 2134582590 2141031480 2141031480\n2134582590 2141031480 2141031480 2141031480\n```\n\n----------------------------------------\n\nTITLE: Using Context Information in Translations with Boost.Locale\nDESCRIPTION: Demonstrates how to add context information to translatable strings to disambiguate words with multiple meanings in different contexts. This example shows how to set a button label with the appropriate translation of 'open' in the context of files.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/doc/messages_formatting.txt#2025-04-22_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\nbutton->setLabel(translate(\"File\",\"open\"));\n```\n\n----------------------------------------\n\nTITLE: Building with CMake\nDESCRIPTION: Commands to create a build directory and configure the project using CMake.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/src/building.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir build\ncd build\ncmake ..\n```\n\n----------------------------------------\n\nTITLE: Dstream Improvements and Directory Cleanup\nDESCRIPTION: This entry notes improvements to the dstream functionality and the removal of bin and bin64 directories, streamlining the library's structure and potentially enhancing performance.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/beast/CHANGELOG.md#2025-04-22_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Hugo Front Matter Block for Types Documentation\nDESCRIPTION: TOML format front matter block that defines the page title and weight for Hugo static site generation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n+++\ntitle = \"Types\"\nweight = 50\n+++\n```\n\n----------------------------------------\n\nTITLE: Defining Implicit Exception Type Constructor in C++\nDESCRIPTION: This snippet defines an implicit constructor for the `exception_type` class. It is available when the predicate for enabling this constructor is satisfied. It leverages the `on_outcome_construction` function to initialize the object gracefully while supporting constexpr evaluation and ensuring noexcept for operations.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/basic_outcome/implicit_exception_converting_constructor.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n+++\n\ntitle = \"`basic_outcome(P &&)`\"\n\ndescription = \"Implicit `exception_type` constructor. Available if `predicate::enable_exception_converting_constructor<P>` is true. Constexpr, triviality and noexcept propagating.\"\n\ncategories = [\"constructors\", \"implicit-constructors\", \"converting-constructors\"]\n\nweight = 201\n+++\n\nImplicit `exception_type` constructor. Calls {{% api \"void on_outcome_construction(T *, U &&) noexcept\" %}} with `this` and `P`.\n\n*Requires*: `predicate::enable_exception_converting_constructor<P>` is true.\n\n*Complexity*: Same as for `exception_type`'s copy or move constructor. Constexpr, triviality and noexcept of underlying operations is propagated.\n```\n\n----------------------------------------\n\nTITLE: Replace Method for Reversible Pointer Container in C++\nDESCRIPTION: This method replaces the element at the specified iterator position with a new pointer, throwing appropriate exceptions if the conditions for replacement are not met, while providing strong guarantee of exception safety.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/reversible_ptr_container.rst#2025-04-22_snippet_15\n\nLANGUAGE: C++\nCODE:\n```\nauto_type replace( iterator position, T* x );\n```\n\n----------------------------------------\n\nTITLE: Creating the Boost Units Interface Library\nDESCRIPTION: Creates an interface library for Boost Units and sets up an alias using the Boost namespace convention.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/units/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(boost_units INTERFACE)\nadd_library(Boost::units ALIAS boost_units)\n```\n\n----------------------------------------\n\nTITLE: Basic Set Operations in Boost MPL\nDESCRIPTION: Demonstrates basic set operations and invariants including size checking, emptiness testing, and type lookups.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/set.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntypedef set< int,long,double,int_<5> > s;\n\nBOOST_MPL_ASSERT_RELATION( size<s>::value, ==, 4 );\nBOOST_MPL_ASSERT_NOT(( empty<s> ));\n\nBOOST_MPL_ASSERT(( is_same< at<s,int>::type, int > ));\nBOOST_MPL_ASSERT(( is_same< at<s,long>::type, long > ));\nBOOST_MPL_ASSERT(( is_same< at<s,int_<5> >::type, int_<5> > ));\nBOOST_MPL_ASSERT(( is_same< at<s,char>::type, void_ > ));\n```\n\n----------------------------------------\n\nTITLE: Defining Target Sources for ArangoDB Cluster Methods in C++\nDESCRIPTION: This snippet defines the target source files required for the ArangoDB cluster methods module, which includes functionalities related to shard distribution and replication. The files specified are essential for building features that manage collections and their distribution across servers in a clustered setting.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/Cluster/Utils/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntarget_sources(arango_cluster_methods PRIVATE\\n    CollectionGroupUpdates.cpp\\n    CurrentCollectionEntry.cpp\\n    CurrentWatcher.cpp\\n    DistributeShardsLike.cpp\\n    EvenDistribution.cpp\\n    IShardDistributionFactory.cpp\\n    PlanCollectionEntry.cpp\\n    PlanCollectionEntryReplication2.cpp\\n    PlanCollectionToAgencyWriter.cpp\\n    ResponsibleServerList.cpp\\n    SatelliteDistribution.cpp\\n    ShardDistribution.cpp\\n    ShardID.cpp\\n    TargetCollectionAgencyWriter.cpp\\n)\n```\n\n----------------------------------------\n\nTITLE: Callable Template Methods in Unary Ufunc\nDESCRIPTION: The snippet outlines the static methods `call` and `make` within a template in the C++ `unary_ufunc` struct, which pass Python objects to the functor and convert them into callable Python functions. It requires specifying both the `TUnaryFunctor` type and the argument and result types, if different from defaults.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/doc/html/numpy/_sources/reference/unary_ufunc.rst.txt#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <typename TUnaryFunctor, \n          typename TArgument=typename TUnaryFunctor::argument_type,\n          typename TResult=typename TUnaryFunctor::result_type>\nstatic object call(TUnaryFunctor & self, \n                   object const & input, \n                   object const & output);\n```\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <typename TUnaryFunctor, \n          typename TArgument=typename TUnaryFunctor::argument_type,\n          typename TResult=typename TUnaryFunctor::result_type>\nstatic object make();\n```\n\n----------------------------------------\n\nTITLE: String Concatenation using Boost Function Iterator in C++\nDESCRIPTION: Demonstrates string concatenation using a vector of strings and Boost's function output iterator. The example creates a custom string_appender functor that appends strings to a target string, then uses it with std::copy to concatenate vector elements.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/function_output_iterator_eg.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nstruct string_appender\n{\n    string_appender(std::string& s)\n        : m_str(&s)\n    {}\n\n    void operator()(const std::string& x) const\n    {\n        *m_str += x;\n    }\n\n    std::string* m_str;\n};\n\nint main(int, char*[])\n{\n  std::vector<std::string> x;\n  x.push_back(\"hello\");\n  x.push_back(\" \");\n  x.push_back(\"world\");\n  x.push_back(\"!\");\n\n  std::string s = \"\";\n  std::copy(x.begin(), x.end(), \n        boost::make_function_output_iterator(string_appender(s)));\n\n  std::cout << s << std::endl;\n\n  return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Alternative Generic Luminosity Gradient Using Type Factory Metafunctions\nDESCRIPTION: An equivalent implementation of the generic luminosity gradient that uses GIL's type factory metafunctions instead of direct class instantiation. This approach demonstrates GIL's type generation capabilities through image_type and related metafunctions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/tutorial/gradient.rst#2025-04-22_snippet_20\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <typename SrcView, typename DstView>\nvoid x_luminosity_gradient(SrcView const& src, DstView const& dst)\n{\n  typedef typename channel_type<DstView>::type d_channel_t;\n  typedef typename channel_convert_to_unsigned<d_channel_t>::type channel_t;\n  typedef typename image_type<channel_t, gray_layout_t>::type gray_image_t;\n  typedef typename gray_image_t::value_type gray_pixel_t;\n\n  gray_image_t ccv_image(src.dimensions());\n  copy_and_convert_pixels(src, view(ccv_image));\n  x_gradient(const_view(ccv_image), dst);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ZKD Test Library and Executable in CMake\nDESCRIPTION: Sets up the ZKD test environment by creating object libraries, configuring test executables, and establishing dependencies. Includes conditional compilation for fast double memcmp encoding and proper test linking with GTest framework.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/Zkd/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(arango_tests_zkd OBJECT\n  Conversion.cpp\n  Library.cpp)\ntarget_link_libraries(arango_tests_zkd\n  PRIVATE\n    arango_rocksdb\n    gtest)\ntarget_include_directories(arango_tests_zkd\n  PRIVATE\n    ${PROJECT_SOURCE_DIR}/arangod)\n\nif (USE_FAST_DOUBLE_MEMCMP_ENCODING)\n    target_compile_definitions(arango_tests_zkd PRIVATE USE_FAST_DOUBLE_MEMCMP_ENCODING)\nendif ()\n\nadd_executable(arangodbtests_zkd EXCLUDE_FROM_ALL)\ntarget_link_libraries(arangodbtests_zkd\n  arango_tests_zkd\n  gtest_main)\n\nadd_test(NAME zkd\n         COMMAND arangodbtests_zkd)\n```\n\n----------------------------------------\n\nTITLE: Configuring ArangoDB Actor Tests Library and Executable\nDESCRIPTION: Creates a test library for actor-related unit tests, sets up include directories and dependencies, and configures the test executable. The configuration includes necessary linking to core ArangoDB libraries, Google Test framework, and VelocyPack utilities.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/Actor/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(arango_tests_actor OBJECT\n  ActorListTest.cpp\n  ActorTest.cpp\n  RuntimeTest.cpp\n  EgressActorTest.cpp\n  MultiRuntimeTest.cpp\n  MPSCQueueTest.cpp)\ntarget_include_directories(arango_tests_actor PRIVATE\n  ${PROJECT_SOURCE_DIR}/lib)\ntarget_link_libraries(arango_tests_actor PRIVATE\n  arango_actor_standalone\n  arango_inspection\n  gtest\n  velocypack_utils)\n\nadd_executable(arangodbtests_actor EXCLUDE_FROM_ALL)\ntarget_link_libraries(arangodbtests_actor\n  arango_tests_actor\n  gtest_main)\n\nadd_test(\n  NAME actor\n  COMMAND arangodbtests_actor)\n```\n\n----------------------------------------\n\nTITLE: Huffman Code Generation Algorithm (Step 2) in C-like language\nDESCRIPTION: This code snippet outlines step 2 of the algorithm for generating Huffman codes, as described in RFC 1951.  It calculates the numerical value of the smallest code for each code length. The calculated values are stored in the `next_code` array.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/zlib/zlib-1.2.13/doc/rfc1951.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ncode = 0;\nbl_count[0] = 0;\nfor (bits = 1; bits <= MAX_BITS; bits++) {\n    code = (code + bl_count[bits-1]) << 1;\n    next_code[bits] = code;\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Test Directory Configuration\nDESCRIPTION: Adds test subdirectory if testing is enabled and the test directory exists\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/heap/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(BUILD_TESTING AND EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/test/CMakeLists.txt\")\n\n  add_subdirectory(test)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: HTTP Parser Functions Now Reporting Bytes Consumed\nDESCRIPTION: List of HTTP parser functions that now report the number of bytes consumed by the parser. The bytes_transferred return value will now indicate the number of bytes consumed when parsing an HTTP message.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/beast/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n- http::read\n- http::read_header\n- http::read_some\n- http::async_read\n- http::async_read_header\n- http::async_read_some\n```\n\n----------------------------------------\n\nTITLE: at_c Semantic Equivalence in C++\nDESCRIPTION: Shows the equivalent expression using the at metafunction instead of at_c, demonstrating that at_c is a shorthand for using at with a long_<n> type.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/at_c.rst#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\ntypedef at< Sequence, long_<n> >::type t;\n```\n\n----------------------------------------\n\nTITLE: Defining Boost Chrono Library Target\nDESCRIPTION: Creates the Boost Chrono library target and specifies its source files.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/chrono/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(boost_chrono\n  src/chrono.cpp\n  src/process_cpu_clocks.cpp\n  src/thread_clock.cpp\n)\n\nadd_library(Boost::chrono ALIAS boost_chrono)\n```\n\n----------------------------------------\n\nTITLE: Using the Identity Metafunction with Apply in C++\nDESCRIPTION: This example demonstrates how to use the 'identity' metafunction with the 'apply' metafunction and placeholders. It shows that the identity function returns its input type unchanged for different input types.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/identity.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntypedef apply< identity<_1>, char >::type t1;\ntypedef apply< identity<_2>, char,int >::type t2;\n\nBOOST_MPL_ASSERT(( is_same< t1, char > ));\nBOOST_MPL_ASSERT(( is_same< t2, int > ));\n```\n\n----------------------------------------\n\nTITLE: Using iterator_category in C++ Template Metaprogramming\nDESCRIPTION: Demonstrates how to use the iterator_category metafunction in template metaprogramming to implement algorithm specializations based on iterator categories.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/iterator_category.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntemplate< typename Tag, typename Iterator >\nstruct algorithm_impl\n{\n    // *O(n)* implementation\n};\n\ntemplate< typename Iterator >\nstruct algorithm_impl<random_access_iterator_tag,Iterator>\n{\n    // *O(1)* implementation\n};\n\ntemplate< typename Iterator >\nstruct algorithm\n    : algorithm_impl<\n          iterator_category<Iterator>::type\n        , Iterator\n        >\n{\n};\n```\n\n----------------------------------------\n\nTITLE: Using set_c for Integer Constants in C++\nDESCRIPTION: Demonstrates creating and using a set of odd integers with set_c, including size checking and key existence verification.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/set_c.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ntypedef set_c< int,1,3,5,7,9 > odds;\n\nBOOST_MPL_ASSERT_RELATION( size<odds>::value, ==, 5 );\nBOOST_MPL_ASSERT_NOT(( empty<odds> ));\n\nBOOST_MPL_ASSERT(( has_key< odds, integral_c<int,5> > ));\nBOOST_MPL_ASSERT_NOT(( has_key< odds, integral_c<int,4> > ));\nBOOST_MPL_ASSERT_NOT(( has_key< odds, integral_c<int,15> > ));\n```\n\n----------------------------------------\n\nTITLE: Implementing Flipped Up-Down View in Boost.GIL\nDESCRIPTION: Creates a view that flips an image upside down by starting from the bottom left pixel of the original view and using a negated y-step. This function demonstrates how to create a transformed view without copying pixel data.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/image_view.rst#2025-04-22_snippet_11\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <typename View>\ntypename dynamic_y_step_type<View>::type flipped_up_down_view(const View& src)\n{\n  gil_function_requires<ImageViewConcept<View> >();\n  typedef typename dynamic_y_step_type<View>::type RView;\n  return RView(src.dimensions(),typename RView::xy_locator(src.xy_at(0,src.height()-1),-1));\n}\n```\n\n----------------------------------------\n\nTITLE: Unit Test and Build Requirement Updates\nDESCRIPTION: This entry focuses on unit test improvements, adding reason strings to test failures, fixing the unit test runner, updating the README for build requirements, and renaming the changelog file, enhancing the testing framework and documentation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/beast/CHANGELOG.md#2025-04-22_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Defining Boost.Iostreams Check Function in CMake\nDESCRIPTION: Creates a function to check for specific C++ features or libraries using CheckCXXSourceCompiles module.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iostreams/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(CheckCXXSourceCompiles)\n\nfunction(iostreams_check var source incs libs defs)\n\n  set(CMAKE_REQUIRED_INCLUDES \"${incs}\")\n  list(APPEND CMAKE_REQUIRED_INCLUDES \"${CMAKE_CURRENT_SOURCE_DIR}/build\")\n  set(CMAKE_REQUIRED_LIBRARIES \"${libs}\")\n  set(CMAKE_REQUIRED_DEFINITIONS \"${defs}\")\n  check_cxx_source_compiles(\"#include \\\"${source}\\\"\" ${var})\n  set(${var} ${${var}} PARENT_SCOPE)\n\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for Async HTTP Client\nDESCRIPTION: Configures CMake build settings for an asynchronous HTTP client example. Groups source files, creates executable target, links required libraries, and sets folder property for organization.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/beast/example/http/client/async/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nGroupSources(include/boost/beast beast)\nGroupSources(example/http/client/async \"/\")\n\nadd_executable (http-client-async\n    ${BOOST_BEAST_FILES}\n    Jamfile\n    http_client_async.cpp\n)\n\ntarget_link_libraries(http-client-async\n    lib-asio\n    lib-beast)\n\nset_property(TARGET http-client-async PROPERTY FOLDER \"example-http-client\")\n```\n\n----------------------------------------\n\nTITLE: Adding Additional Test Subdirectories in CMake\nDESCRIPTION: Includes the Basics and Inspection subdirectories in the build process to compile additional test components.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/CMakeLists.txt#2025-04-22_snippet_16\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Basics)\nadd_subdirectory(Inspection)\n```\n\n----------------------------------------\n\nTITLE: Building Documentation with Doxygen for Boost.GIL\nDESCRIPTION: This snippet illustrates how to configure Doxygen, navigate to the Boost root directory, and initiate the build process for the Boost.GIL documentation using the b2 build system.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/README.md#2025-04-22_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ echo \"using doxygen ;\" > ~/user-config.jam\n$ cd boost-root\n$ b2 libs/gil/doc\n```\n\n----------------------------------------\n\nTITLE: Declaring Static Identity Function Object in C++\nDESCRIPTION: Uses a macro to declare a static variable 'identity' of type 'identity_base'. This allows for efficient, inline use of the identity function throughout the codebase.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/identity.hpp.txt#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_HOF_DECLARE_STATIC_VAR(identity, identity_detail::identity_base);\n```\n\n----------------------------------------\n\nTITLE: Adding Benchmarks via CMake\nDESCRIPTION: This section of the CMake file illustrates how to utilize the `add_benchmark` function to define specific benchmarks for testing various functionalities related to histograms. Each benchmark is configured as an executable, clearly indicating its name and source file.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/histogram/benchmark/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_benchmark(axis_size)\nadd_benchmark(axis_index)\nadd_benchmark(histogram_filling)\nadd_benchmark(histogram_iteration)\n```\n\n----------------------------------------\n\nTITLE: Creating VocBase Properties Test Executable\nDESCRIPTION: Creates a dedicated test executable for VocBase properties tests, including all test sources and the main entry point.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/VocBase/Properties/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(\n        arangodb_vocbase_properties_test EXCLUDE_FROM_ALL\n        ${ARANGODB_VOCBASE_PROPERTIES_TEST_SOURCES}\n        main.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Running Tests with CMake\nDESCRIPTION: This snippet demonstrates how to build and run the tests using CMake. The command builds the 'check' target, which executes the tests defined in the CMake configuration.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n\"cmake --build . --target check\"\n```\n\n----------------------------------------\n\nTITLE: Conditional V8 Source Compilation\nDESCRIPTION: Adds v8-agency.cpp source file to the library when V8 support is enabled, allowing optional integration of V8 functionality\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/Agency/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (USE_V8) \n  target_sources(arango_agency PRIVATE\n    v8-agency.cpp)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Document Subdirectory in CMake\nDESCRIPTION: Includes the Document module as a subdirectory in the ArangoDB build configuration, enabling compilation and integration of the Document component\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/Replication2/StateMachines/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Document)\n```\n\n----------------------------------------\n\nTITLE: Adding Graph Test Targets\nDESCRIPTION: Defines test targets for running graph-related tests using CTest framework.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/Graph/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nadd_test(test_all_graphs arango_tests_graph)\n\nadd_test(NAME graph\n        COMMAND arangodbtests_graph)\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for TZ Library\nDESCRIPTION: Sets up the include directories for the tz library using modern CMake target_include_directories, distinguishing between build-time and install-time include paths for better integration with consuming projects.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/date/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(tz PUBLIC\n    $<BUILD_INTERFACE:\n        ${CMAKE_CURRENT_SOURCE_DIR}/${HEADER_FOLDER}\n    >\n    $<INSTALL_INTERFACE:\n        include\n    >\n)\n```\n\n----------------------------------------\n\nTITLE: Actual Function Object Declaration Example in C++\nDESCRIPTION: Shows how functions are actually implemented as function objects in the library, using the if_f struct as an example.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/doc/src/definitions.md.txt#2025-04-22_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nstruct if_f\n{\n    template<class IntegralConstant>\n    constexpr auto operator()(IntegralConstant) const;\n};\nconst constexpr if_f if_ = {};\n```\n\n----------------------------------------\n\nTITLE: Including MPL Placeholders Header in C++\nDESCRIPTION: Shows how to include the Boost MPL placeholders header file to make placeholder types available in user code.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/Placeholders.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/placeholders.hpp>\n```\n\n----------------------------------------\n\nTITLE: Including transform_view Header in C++\nDESCRIPTION: Shows how to include the transform_view header file in your C++ code to use the transform_view template functionality.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/transform_view.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/transform_view.hpp>\n```\n\n----------------------------------------\n\nTITLE: Including count_if Header in C++\nDESCRIPTION: Shows the header file that needs to be included to use the count_if algorithm in C++.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/count_if.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/count_if.hpp>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Error Reference in C++ for ArangoDB\nDESCRIPTION: This static function returns a reference to the error in the implementation passed as an argument. It is constexpr where possible, never throws exceptions, and has constant time complexity. No validation is performed to ensure an error exists.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/policies/base/error.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nstatic auto &&_error(Impl &&) noexcept\n```\n\n----------------------------------------\n\nTITLE: Including iterator_category Header Files in C++\nDESCRIPTION: Specifies the necessary header files to include for using the iterator_category metafunction and related iterator tags.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/iterator_category.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/iterator_category.hpp>\n#include <boost/mpl/iterator_tags.hpp>\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Notice Template\nDESCRIPTION: This snippet provides a template for the Apache License 2.0 notice to be included in project files. It includes placeholders for the copyright year and owner, as well as the full text of the license notice.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/js/apps/system/_admin/aardvark/APP/frontend/fonts/roboto/Roboto-500/LICENSE.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Boost Multiprecision Library\nDESCRIPTION: Commands for running tests in the Boost Multiprecision Library. Shows how to run all tests specified in the Jamfile.v2 or run a single specific test.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/multiprecision/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n../../../b2                        <- run all tests\n../../../b2 test_complex           <- single test\n```\n\n----------------------------------------\n\nTITLE: Integer Matrix Data Definition\nDESCRIPTION: Raw matrix data representing a 5-row, 4-column integer matrix with mixed positive and negative values\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/polygon/example/input_data/random/random_020.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n0\n5\n-14 -43 37 -49\n-12 41 -10 -43\n-7 -20 18 -38\n7 34 47 -38\n23 26 42 -3\n```\n\n----------------------------------------\n\nTITLE: Defining Pixel-Based Concepts in C++\nDESCRIPTION: Defines core pixel-based concepts in C++ for color imaging, including color_space_type, channel_mapping_type, and is_planar. These properties are essential for handling color pixel operations and ensure compatibility among homogeneous and heterogeneous pixels.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/pixel.rst.txt#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nconcept PixelBasedConcept<typename T>\\n{\\n  typename color_space_type<T>;\\n      where Metafunction<color_space_type<T> >;\\n      where ColorSpaceConcept<color_space_type<T>::type>;\\n  typename channel_mapping_type<T>;\\n      where Metafunction<channel_mapping_type<T> >;\\n      where ChannelMappingConcept<channel_mapping_type<T>::type>;\\n  typename is_planar<T>;\\n      where Metafunction<is_planar<T> >;\\n      where SameType<is_planar<T>::type, bool>;\\n};\\n\\nconcept HomogeneousPixelBasedConcept<PixelBasedConcept T>\\n{\\n  typename channel_type<T>;\\n      where Metafunction<channel_type<T> >;\\n      where ChannelConcept<channel_type<T>::type>;\\n};\n```\n\n----------------------------------------\n\nTITLE: Determining ST Connectivity with Color Map - C++\nDESCRIPTION: This snippet defines a templated function 'st_connected' that checks if there is a direct path between two vertices in a distributed graph, utilizing a color map for vertex status tracking. It requires a graph model that meets specified criteria as well as a color map that adheres to a monotonic darkening principle.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/st_connected.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nnamespace graph { namespace distributed {\n    template<typename DistributedGraph, typename ColorMap>\n    inline bool \n    st_connected(const DistributedGraph& g, \n                 typename graph_traits<DistributedGraph>::vertex_descriptor s,\n                 typename graph_traits<DistributedGraph>::vertex_descriptor t,\n                 ColorMap color)\n  } }\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Include Directories\nDESCRIPTION: Sets up include directories by adding the CMake home directory to the include path\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/stl_interfaces/doc/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude_directories(${CMAKE_HOME_DIRECTORY})\n```\n\n----------------------------------------\n\nTITLE: Creating Object Library\nDESCRIPTION: Creates an object library named `arango_tests_inspection`.  Object libraries contain compiled object files from the specified source files, which can be linked into other libraries or executables.  This includes several C++ test files.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/Inspection/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(arango_tests_inspection OBJECT\n  InspectionTest.cpp\n  JsonPrintTest.cpp\n  TransformerTest.cpp\n  ValidateTest.cpp\n  ValidateTest.cpp\n  VPackLoadTest.cpp\n  VPackSaveTest.cpp)\n```\n\n----------------------------------------\n\nTITLE: Handling Non-ASCII Keys with Specified Source Encoding\nDESCRIPTION: Demonstrates how to handle non-ASCII characters in translation keys by specifying the source encoding. This example shows how to properly handle a copyright symbol in Windows-1255 encoding for correct translation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/doc/messages_formatting.txt#2025-04-22_snippet_15\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/locale.hpp>\n#include <iostream>\n\nusing namespace std;\nusing namespace boost::locale;\n\nint main()\n{\n    generator gen;\n\n    // Specify location of dictionaries\n    gen.add_messages_path(\".\");\n    // Specify the encoding of the source string\n    gen.add_messages_domain(\"copyrighted/windows-1255\");\n\n    // Generate locales and imbue them to iostream\n    locale::global(gen(\"\"));\n    cout.imbue(locale());\n    \n    // In Windows 1255 (C) symbol is encoded as 0xA9\n    cout << translate(\"© 2001 All Rights Reserved\") << endl;\n}\n```\n\n----------------------------------------\n\nTITLE: MRView Properties Object Method Implementation in C++\nDESCRIPTION: Implementation of the properties method that returns MapReduce view properties as a VelocyPack builder object. This method handles serialization of view metadata to VelocyPack format.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/static_string/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\narangodb::Result MRView::properties(velocypack::Builder& builder,\n                           bool forPersistence) const {\n  TRI_ASSERT(builder.isOpenObject());\n\n  try {\n    _meta->json(builder, forPersistence);\n\n    return arangodb::Result();\n  } catch (std::exception const& e) {\n    LOG_TOPIC(\"5eaa4\", WARN, arangodb::iresearch::TOPIC)\n        << \"caught exception while adding properties for arangosearch view '\"\n        << name() << \"': \" << e.what();\n    IR_LOG_EXCEPTION();\n  } catch (...) {\n    LOG_TOPIC(\"5d7f3\", WARN, arangodb::iresearch::TOPIC)\n        << \"caught exception while adding properties for arangosearch view '\"\n        << name() << \"'\";\n    IR_LOG_EXCEPTION();\n  }\n\n  return arangodb::Result(TRI_ERROR_BAD_PARAMETER,\n                          std::string(\"error adding view '\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up CPack Configuration for LZ4 Distribution\nDESCRIPTION: Configures packaging settings for CPack to create distribution packages. This includes setting package metadata, description files, license information, and version numbers. Only applied when not in bundled mode.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/lz4/build/cmake/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# CPack\nif(NOT LZ4_BUNDLED_MODE AND NOT CPack_CMake_INCLUDED)\n  set(CPACK_PACKAGE_DESCRIPTION_SUMMARY \"LZ4 compression library\")\n  set(CPACK_PACKAGE_DESCRIPTION_FILE \"${LZ4_TOP_SOURCE_DIR}/README.md\")\n  set(CPACK_RESOURCE_FILE_LICENSE \"${LZ4_TOP_SOURCE_DIR}/LICENSE\")\n  set(CPACK_PACKAGE_VERSION_MAJOR ${LZ4_VERSION_MAJOR})\n  set(CPACK_PACKAGE_VERSION_MINOR ${LZ4_VERSION_MINOR})\n  set(CPACK_PACKAGE_VERSION_PATCH ${LZ4_VERSION_RELEASE})\n  include(CPack)\nendif(NOT LZ4_BUNDLED_MODE AND NOT CPack_CMake_INCLUDED)\n```\n\n----------------------------------------\n\nTITLE: Operator Overloading Macros for Placeholders\nDESCRIPTION: Macro definitions for generating unary, binary, and assignment operator overloads for placeholder types. Enables operator-based syntax for placeholder operations.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/placeholders.hpp.txt#2025-04-22_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\n#define BOOST_HOF_UNAMED_PLACEHOLDER_UNARY_OP(op, name) \\\n    constexpr auto operator op () const BOOST_HOF_RETURNS \\\n    ( operators::name() );\n\n#define BOOST_HOF_UNAMED_PLACEHOLDER_BINARY_OP(op, name) \\\n    template<class T> \\\n    constexpr inline auto operator op (const unamed_placeholder&, const T& x) BOOST_HOF_RETURNS \\\n    ( unamed_placeholder::make_partial_ap<unamed_placeholder::right<operators::name>>(boost::hof::decay(x)) ); \\\n    template<class T> \\\n    constexpr inline auto operator op (const T& x, const unamed_placeholder&) BOOST_HOF_RETURNS \\\n    ( unamed_placeholder::make_partial_ap<unamed_placeholder::left<operators::name>>(boost::hof::decay(x)) ); \\\n    constexpr inline auto operator op (const unamed_placeholder&, const unamed_placeholder&) BOOST_HOF_RETURNS \\\n    ( operators::name() );\n```\n\n----------------------------------------\n\nTITLE: Configuring Used File Display in Doxygen\nDESCRIPTION: This option specifies whether the list of files generated at the bottom of classes and structs documentation is displayed. Setting it to NO disables the list.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/sort/doc/doxygen/sort_doxyfile.txt#2025-04-22_snippet_55\n\nLANGUAGE: Doxygen\nCODE:\n```\n\"SHOW_USED_FILES        = YES\"\n```\n\n----------------------------------------\n\nTITLE: Declaring Static Infix Variable in C++\nDESCRIPTION: Declaration of a static infix variable using the BOOST_HOF_DECLARE_STATIC_VAR macro, making the infix adaptor globally accessible as a function object.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/infix.hpp.txt#2025-04-22_snippet_6\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_HOF_DECLARE_STATIC_VAR(infix, detail::make<infix_adaptor>);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating BOOST_HOF_STATIC_FUNCTION Usage\nDESCRIPTION: Code references showing the use of BOOST_HOF_STATIC_FUNCTION for constexpr function initialization, particularly relevant for MSVC and gcc 4.6 compatibility.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/src/index.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_HOF_STATIC_FUNCTION\n```\n\n----------------------------------------\n\nTITLE: Defining Katakana Unicode Block\nDESCRIPTION: Lists the code point ranges for the Katakana script in Unicode. This block contains 299 code points including letters, iteration marks, and special symbols in both full-width and half-width forms.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/spirit/workbench/unicode/Scripts.txt#2025-04-22_snippet_18\n\nLANGUAGE: unicode\nCODE:\n```\n30A1..30FA    ; Katakana # Lo  [90] KATAKANA LETTER SMALL A..KATAKANA LETTER VO\n30FD..30FE    ; Katakana # Lm   [2] KATAKANA ITERATION MARK..KATAKANA VOICED ITERATION MARK\n30FF          ; Katakana # Lo       KATAKANA DIGRAPH KOTO\n31F0..31FF    ; Katakana # Lo  [16] KATAKANA LETTER SMALL KU..KATAKANA LETTER SMALL RO\n32D0..32FE    ; Katakana # So  [47] CIRCLED KATAKANA A..CIRCLED KATAKANA WO\n3300..3357    ; Katakana # So  [88] SQUARE APAATO..SQUARE WATTO\nFF66..FF6F    ; Katakana # Lo  [10] HALFWIDTH KATAKANA LETTER WO..HALFWIDTH KATAKANA LETTER SMALL TU\nFF71..FF9D    ; Katakana # Lo  [45] HALFWIDTH KATAKANA LETTER A..HALFWIDTH KATAKANA LETTER N\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Result Type with No-Value Policy\nDESCRIPTION: Demonstrates the basic result type configuration with default no-value policy for error handling using std::error_code\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/tutorial/essential/no-value/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nresult<T> = basic_result<T, std::error_code, default_policy<T, EC, EP>>\n```\n\n----------------------------------------\n\nTITLE: Configuring Optional Syslog Support for Boost.Log\nDESCRIPTION: Adds syslog backend support to Boost.Log when not explicitly disabled, with the option to use native syslog implementation if available on the platform.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/log/CMakeLists.txt#2025-04-22_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT BOOST_LOG_WITHOUT_SYSLOG)\n    list(APPEND boost_log_sources src/syslog_backend.cpp)\n    if (BOOST_LOG_USE_NATIVE_SYSLOG OR BOOST_LOG_HAS_NATIVE_SYSLOG)\n        list(APPEND boost_log_common_private_defines BOOST_LOG_USE_NATIVE_SYSLOG)\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Making Distributed Iterator Property Map Factory Function in C++\nDESCRIPTION: Factory function to create a distributed iterator property map from an iterator and local index property map.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/distributed_property_map.rst#2025-04-22_snippet_17\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate<typename RandomAccessIterator, typename ProcessGroup,\n         typename GlobalKey, typename LocalMap>\niterator_property_map<RandomAccessIterator, \n                      local_property_map<ProcessGroup, GlobalKey, LocalMap> >\nmake_iterator_property_map(RandomAccessIterator iter, \n                           local_property_map<ProcessGroup, GlobalKey, LocalMap> id);\n```\n\n----------------------------------------\n\nTITLE: Refactored Buffer Types for Beast Dynamic Buffers\nDESCRIPTION: API changes listing the dynamic buffer types that had their nested const and mutable buffer types refactored. This affects several buffer implementations in the Beast library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/beast/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\n- buffers_adapter\n- flat_buffer\n- flat_static_buffer\n- multi_buffer\n- static_buffer\n```\n\n----------------------------------------\n\nTITLE: Value Category Evaluation for Boost.Parameter Examples\nDESCRIPTION: Defines functions to evaluate the value categories of parameters, used in the demonstration of the Boost.Parameter macro.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_64\n\nLANGUAGE: cpp\nCODE:\n```\nenum invoked\n{\n    passed_by_lvalue_reference_to_const\n  , passed_by_lvalue_reference\n  , passed_by_rvalue_reference_to_const\n  , passed_by_rvalue_reference\n};\n\nstruct U\n{\n    template <std::size_t N>\n    static invoked evaluate_category(|std_bitset|_\\<N + 1> const&)\n    {\n        return passed_by_lvalue_reference_to_const;\n    }\n\n    template <std::size_t N>\n    static invoked evaluate_category(|std_bitset|_\\<N + 1>&)\n    {\n        return passed_by_lvalue_reference;\n    }\n\n    template <std::size_t N>\n    static invoked evaluate_category(|std_bitset|_\\<N + 1> const&&)\n    {\n        return passed_by_rvalue_reference_to_const;\n    }\n\n    template <std::size_t N>\n    static invoked evaluate_category(|std_bitset|_\\<N + 1>&&)\n    {\n        return passed_by_rvalue_reference;\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Including pop_front Header in C++\nDESCRIPTION: Specifies the header file to include for using the pop_front metafunction in C++ code.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/pop_front.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/pop_front.hpp>\n```\n\n----------------------------------------\n\nTITLE: Using BOOST_OUTCOME_CO_TRYV2 Macro in C++\nDESCRIPTION: The BOOST_OUTCOME_CO_TRYV2 macro evaluates an expression and continues execution if successful, or returns try_operation_return_as(X) if unsuccessful. It uses customization points for try_operation_has_value, try_operation_return_as, and try_operation_extract_value.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/macros/co_tryv2.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_OUTCOME_CO_TRYV2(spec, expr)\n```\n\n----------------------------------------\n\nTITLE: Distributed Property Map Adaptor Class Synopsis\nDESCRIPTION: Class definition for distributed property map with template parameters defining process group, local property map, key type, and ghost cell strategy\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/distributed_property_map.rst#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate<typename ProcessGroup, typename LocalPropertyMap, typename Key,\n           typename GhostCellS = gc_mapS>\nclass distributed_property_map\n{\npublic:\n  typedef ... ghost_regions_type;\n \n  distributed_property_map();\n\n  distributed_property_map(const ProcessGroup& pg, \n                           const LocalPropertyMap& pm);\n\n  template<typename Reduce>\n  distributed_property_map(const ProcessGroup& pg, \n                           const LocalPropertyMap& pm,\n                           const Reduce& reduce);\n\n  template<typename Reduce> void set_reduce(const Reduce& reduce);\n  void set_consistency_model(int model);\n\n  void flush();\n  void reset();\n  void clear();\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Transposed View using Boost GIL\nDESCRIPTION: This template function creates a transposed view of the source image, effectively switching its width and height, allowing for operations on the rotated data. This can be particularly useful for certain image processing tasks.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/image_view.rst.txt#2025-04-22_snippet_9\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <typename View>\ntypename dynamic_xy_step_transposed_type<View>::type transposed_view(const View& src);\n```\n\n----------------------------------------\n\nTITLE: Documentation Style Configuration in Doxygen\nDESCRIPTION: Configuration for member descriptions, brief documentation behavior, and text abbreviation settings.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/sort/doc/doxygen/sort_doxyfile.txt#2025-04-22_snippet_2\n\nLANGUAGE: INI\nCODE:\n```\nBRIEF_MEMBER_DESC      = YES\nREPEAT_BRIEF           = YES\nABBREVIATE_BRIEF       = \"The $name class\" \\\n                         \"The $name widget\" \\\n                         \"The $name file\" \\\n                         is \\\n                         provides \\\n                         specifies \\\n                         contains \\\n                         represents \\\n                         a \\\n                         an \\\n                         the\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Vocbase API\nDESCRIPTION: Configures include directories for the vocbase API library, including paths to arangod, lib directories and binary lib directory.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/VocBase/Properties/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(arango_vocbase_api PRIVATE\n        ${PROJECT_SOURCE_DIR}/arangod\n        ${PROJECT_SOURCE_DIR}/lib\n        ${PROJECT_BINARY_DIR}/lib\n)\n```\n\n----------------------------------------\n\nTITLE: Calculating Central Point Dominance in C++\nDESCRIPTION: This helper function calculates the dominance of a central point (vertex) based on the given graph and centrality map, returning the centrality value associated with that point.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/non_distributed_betweenness_centrality.rst#2025-04-22_snippet_5\n\nLANGUAGE: c++\nCODE:\n```\ntemplate<typename Graph, typename CentralityMap>\ntypename property_traits<CentralityMap>::value_type\ncentral_point_dominance(const Graph& g, CentralityMap centrality);\n```\n\n----------------------------------------\n\nTITLE: Configuring Strict Prototype Matching in Doxygen\nDESCRIPTION: This option enables or disables strict prototype matching. Disabling allows doxygen to accept matches even if type resolution fails.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/sort/doc/doxygen/sort_doxyfile.txt#2025-04-22_snippet_48\n\nLANGUAGE: Doxygen\nCODE:\n```\n\"STRICT_PROTO_MATCHING  = NO\"\n```\n\n----------------------------------------\n\nTITLE: Running Specific Core Tests with Boost.Build\nDESCRIPTION: This snippet provides the command to run only the core tests of Boost.GIL using Boost.Build, allowing for targeted testing of the core functionalities.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/CONTRIBUTING.md#2025-04-22_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\ncd libs/gil\n../../b2 cxxstd=11 test/core\n```\n\n----------------------------------------\n\nTITLE: Adding Miscellaneous Test Project in CMake\nDESCRIPTION: Sets up an additional executable test project named test_z that links against the serialization libraries. This appears to be a general test harness for the library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/serialization/CMake/CMakeLists.txt#2025-04-22_snippet_25\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable( test_z ../test/test_z.cpp)\ntarget_link_libraries(test_z serialization wserialization ${Boost_LIBRARIES})\n```\n\n----------------------------------------\n\nTITLE: Defining semantic_at_c Function for ColorBase in C++\nDESCRIPTION: This snippet defines two overloads of the semantic_at_c function, which returns references to elements in a color base based on semantic indices. This allows for flexible access to color data based on its meaning rather than its physical layout.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/color_base.rst.txt#2025-04-22_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\n// Returns a reference to the element with K-th semantic index.\ntemplate <class ColorBase, int K>\ntypename kth_semantic_element_reference_type<ColorBase,K>::type semantic_at_c(ColorBase& p);\ntemplate <class ColorBase, int K>\ntypename kth_semantic_element_const_reference_type<ColorBase,K>::type semantic_at_c(const ColorBase& p);\n```\n\n----------------------------------------\n\nTITLE: Linking Executable Dependencies for arangodbtests_futures\nDESCRIPTION: Links the `arangodbtests_futures` executable with its dependencies, including `arango_crashhandler_light`, `gtest_main` (which provides the main function for running Google Tests), and `arango_tests_futures` (the object library created earlier). These dependencies are necessary for compiling and running the future-related tests.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/Futures/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(arangodbtests_futures\n  arango_crashhandler_light\n  gtest_main\n  arango_tests_futures)\n```\n\n----------------------------------------\n\nTITLE: Unary ufunc struct definition\nDESCRIPTION: Defines the `unary_ufunc` struct within the `boost::python::numpy` namespace. This struct is used as an intermediary step to broadcast a single argument, allowing a C++ function to be converted into a ufunc-like function compatible with NumPy.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/doc/numpy/reference/unary_ufunc.rst#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n  namespace boost \n  {\n  namespace python\n  {\n  namespace numpy \n  {\n\n  template <typename TUnaryFunctor, \n            typename TArgument=typename TUnaryFunctor::argument_type, \n            typename TResult=typename TUnaryFunctor::result_type>\n  struct unary_ufunc \n  {\n\n    static object call(TUnaryFunctor & self, \n                       object const & input, \n                       object const & output) ;\n\n    static object make(); \n\n  };\n  }\n  }\n  }\n```\n\n----------------------------------------\n\nTITLE: Adding Fuzzer Library Target for Parser in CMake\nDESCRIPTION: Defines a library target for the parser fuzzer. It sets the target folder and links against the Boost::json library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/json/fuzzing/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(fuzzerlib_parser fuzz_parser.cpp)\nset_property(TARGET fuzzerlib_parser PROPERTY FOLDER \"fuzzing\")\ntarget_link_libraries(fuzzerlib_parser PRIVATE Boost::json)\n```\n\n----------------------------------------\n\nTITLE: Configuring Group Documentation Distribution in Doxygen\nDESCRIPTION: Setting to enable reuse of the first member's documentation for other members in a group. When enabled, documentation is distributed across all group members. Default is NO.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/sort/doc/doxygen/sort_doxyfile.txt#2025-04-22_snippet_18\n\nLANGUAGE: text\nCODE:\n```\nDISTRIBUTE_GROUP_DOC   = NO\n```\n\n----------------------------------------\n\nTITLE: Retrieving Locale Language Code using Boost.Locale in C++\nDESCRIPTION: This snippet demonstrates how to use the boost::locale::info facet to retrieve the language code of a specific locale. It uses std::use_facet to access the info facet and calls the language() member function.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/doc/locale_information.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ncout << \"The language code is \" << std::use_facet<boost::locale::info>(some_locale).language() << endl;\n```\n\n----------------------------------------\n\nTITLE: Defining ArangoDB Logo Shape Coordinates\nDESCRIPTION: This snippet provides a series of coordinate pairs that, when connected, form the outline of the ArangoDB logo. Each line represents a point in the shape, with the format 'x y' for each coordinate. The coordinates are designed to be used in a 20x10 grid.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/polygon/example/input_data/polygon/polygon_006.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n0\n7\n0 0 0 10\n0 10 6 10\n6 10 10 7\n10 7 14 10\n14 10 20 10\n20 10 20 0\n20 0 0 0\n```\n\n----------------------------------------\n\nTITLE: Configuring Backtrace Option in Meson for ArangoDB\nDESCRIPTION: Defines a boolean Meson option to enable or disable stack backtrace display when a runtime exception occurs. The default value is set to false.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/lz4/contrib/meson/meson_options.txt#2025-04-22_snippet_1\n\nLANGUAGE: meson\nCODE:\n```\noption('backtrace', type: 'boolean', value: false,\n  description: 'Display a stack backtrace when execution generates a runtime exception')\n```\n\n----------------------------------------\n\nTITLE: Creating RST Table of Contents for Discussion Section in ArangoDB Docs\nDESCRIPTION: A reStructuredText directive that creates a table of contents with a maximum depth of 2 levels. It includes links to sections about partial functions and frequently asked questions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/doc/src/discussion.rst.txt#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :maxdepth: 2\n\n    partialfunctions\n    faq\n```\n\n----------------------------------------\n\nTITLE: Integer Pair Dataset for ArangoDB Testing\nDESCRIPTION: A dataset containing 10 pairs of integers, each on a separate line. The data includes both positive and negative integers of varying magnitudes and appears to be formatted for consumption by an ArangoDB process or test.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/polygon/example/input_data/primary/primary_040.txt#2025-04-22_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n10\n858993458 1717986916\n-429496729 1288490187\n-2147483645 -1288490187\n-2147483645 -858993458\n-1717986916 858993458\n-2147483645 -429496729\n429496729 -2147483645\n858993458 -429496729\n-429496729 1717986916\n1717986916 -858993458\n```\n\n----------------------------------------\n\nTITLE: ThenValue and ThenError Chaining Example\nDESCRIPTION: Shows how to chain thenValue() and thenError() handlers to process successful results and handle exceptions separately.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/lib/Futures/README.md#2025-04-22_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\nPromise<int> p;\nFuture<int> f = p.getFuture();\nauto f2 = std::move(f)\n.thenValue([&](int i) {\n  LOG_DEVEL << \"got \" << i;\n  throw std::logic_error(\"some error\"); // will propagate to matching thenError\n})\n.thenValue([&](int i) { \n  // will be skipped due to the exception\n})\n.thenError<std::logic_error&>([&](std::logic_error& t){\n  // handle\n  return 0;\n});\np.setValue(1);\n```\n\n----------------------------------------\n\nTITLE: Defining Failure Transformation Structure in C++\nDESCRIPTION: Defines a template structure for transforming failures. It uses template specialization to handle different failure types and their children.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/reveal.hpp.txt#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\nstruct transform_failures \n: Transform::template apply<Failure>\n{};\n\ntemplate<class Failure, class Transform>\nstruct transform_failures<Failure, Transform, typename holder< \n    typename Failure::children\n>::type> \n: Failure::children::template transform<Transform>\n{};\n```\n\n----------------------------------------\n\nTITLE: Including pop_back Header in C++\nDESCRIPTION: Shows how to include the header file for the pop_back metafunction in C++.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/pop_back.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/pop_back.hpp>\n```\n\n----------------------------------------\n\nTITLE: Parsing 2D Coordinate Path Data\nDESCRIPTION: Data format represents coordinates for a path with each line containing x y coordinates. First line contains a single value (0), second line contains path length (3), and subsequent lines contain coordinate pairs forming the path trajectory.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/polygon/example/input_data/primary/primary_028.txt#2025-04-22_snippet_0\n\nLANGUAGE: data\nCODE:\n```\n0\n3\n0 0 4 2\n4 2 4 -2\n4 -2 0 0\n```\n\n----------------------------------------\n\nTITLE: Rendering Child Pages with Hugo Shortcode\nDESCRIPTION: Uses Hugo's children shortcode to display child pages with descriptions to a depth of 2 levels.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/tutorial/_index.md#2025-04-22_snippet_1\n\nLANGUAGE: hugo\nCODE:\n```\n{{% children description=\"true\" depth=\"2\" %}}\n```\n\n----------------------------------------\n\nTITLE: Generating Test Data File with File Generator\nDESCRIPTION: Command line usage for the file_generator program which creates a binary file with random test data. Takes two parameters: output filename and size of data to generate.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/sort/benchmark/single/README.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./file_generator input.bin 1250000000\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Include Forcing in Doxygen\nDESCRIPTION: This option specifies whether doxygen lists include files with double quotes rather than with sharp brackets.  Setting it to YES forces local includes.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/sort/doc/doxygen/sort_doxyfile.txt#2025-04-22_snippet_41\n\nLANGUAGE: Doxygen\nCODE:\n```\n\"FORCE_LOCAL_INCLUDES   = NO\"\n```\n\n----------------------------------------\n\nTITLE: ptr_multiset_adapter::transfer(const Range& r, ptr_multiset_adapter& from) Method\nDESCRIPTION: Describes the behavior of the `transfer(const Range& r, ptr_multiset_adapter& from)` template method.  It transfers elements from the `from` container to the current container, using a range `r` to specify the elements to be transferred from the range. This is achieved by using `boost::begin(r)` and `boost::end(r)` to iterate through the range.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/ptr_multiset_adapter.rst#2025-04-22_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\ntemplate< class Range > void transfer( const Range& r, ptr_multiset_adapter& from );\n```\n\n----------------------------------------\n\nTITLE: Configuring TSAN to Use LLVM Symbolizer Client\nDESCRIPTION: Environment variable configuration to make ThreadSanitizer use the lightweight Python client instead of spawning a full symbolizer process. The client forwards symbolization requests to the central server via HTTP.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/utils/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport TSAN_OPTIONS=\"external_symbolizer_path=$(pwd)/utils/llvm-symbolizer-client.py\"\n```\n\n----------------------------------------\n\nTITLE: Building ArangoDB Shell Static Library\nDESCRIPTION: Creates a static library 'arango_shell' from source files containing shell and client feature implementations.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/client-tools/Shell/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(arango_shell STATIC\n  ClientFeature.cpp\n  ShellConsoleFeature.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Custom Pixel Reference/Iterator Example - interleaved_ptr.cpp\nDESCRIPTION: This set of examples demonstrates how to create custom pixel references and pixel iterators using Boost GIL.  This provides advanced users with the ability to tailor pixel access and traversal to specific image formats or performance needs.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/index.rst#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\n* :download:`interleaved_ptr.cpp <../example/interleaved_ptr.cpp>`,\n  :download:`interleaved_ptr.hpp <../example/interleaved_ptr.hpp>`,\n  :download:`interleaved_ref.hpp <../example/interleaved_ref.hpp>`:\n  Creating your own pixel reference and pixel iterator\n```\n\n----------------------------------------\n\nTITLE: Creating Arango Metrics Library\nDESCRIPTION: This CMake code snippet creates the `arango_metrics` static library, listing the source files that comprise it. It builds upon the base metrics library and provides higher-level metric functionalities, particularly for cluster metrics and REST handlers.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/Metrics/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(arango_metrics STATIC\n  MetricsFeature.cpp\n  ClusterMetricsFeature.cpp\n  ${PROJECT_SOURCE_DIR}/arangod/RestHandler/RestMetricsHandler.cpp\n  ${PROJECT_SOURCE_DIR}/arangod/RestHandler/RestUsageMetricsHandler.cpp)\n```\n\n----------------------------------------\n\nTITLE: Defining BOOST_OUTCOME_SYMBOL_VISIBLE for GCC and Clang on ELF\nDESCRIPTION: Default definition of BOOST_OUTCOME_SYMBOL_VISIBLE for standalone Outcome when using GCC or Clang and targeting ELF. This ensures throwable types have default symbol visibility.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/macros/symbol_visible.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n__attribute__((visibility(\"default\")))\n```\n\n----------------------------------------\n\nTITLE: Benchmark Execution Script Reference\nDESCRIPTION: References the script that executes benchmarks on generated source files and produces visualization diagrams for documentation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/metaparse/tools/benchmark/README.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nbenchmark.py\n```\n\n----------------------------------------\n\nTITLE: Adding Fuzzer Library Target for Basic Parser in CMake\nDESCRIPTION: Defines a library target for the basic parser fuzzer. It sets the target folder and links against the Boost::json library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/json/fuzzing/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(fuzzerlib_basic_parser fuzz_basic_parser.cpp)\nset_property(TARGET fuzzerlib_basic_parser PROPERTY FOLDER \"fuzzing\")\ntarget_link_libraries(fuzzerlib_basic_parser PRIVATE Boost::json)\n```\n\n----------------------------------------\n\nTITLE: Adding Library Targets\nDESCRIPTION: This snippet adds two library targets: `boost_property_map_parallel` and `Boost::property_map_parallel`. The second target is an alias for the first, providing a namespaced way to reference the library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/property_map_parallel/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(boost_property_map_parallel INTERFACE)\nadd_library(Boost::property_map_parallel ALIAS boost_property_map_parallel)\n```\n\n----------------------------------------\n\nTITLE: Pixel Dereference Adaptor Concept Definition\nDESCRIPTION: Defines the `PixelDereferenceAdaptorConcept` as a unary function applied upon dereferencing a pixel iterator. It requires default constructibility, copy constructibility, and assignability, along with certain typedefs and a convertible result type.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/pixel_iterator.rst.txt#2025-04-22_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <boost::UnaryFunctionConcept D>\nconcept PixelDereferenceAdaptorConcept:\n    DefaultConstructibleConcept<D>,\n    CopyConstructibleConcept<D>,\n    AssignableConcept<D>\n{\n  typename const_t;         where PixelDereferenceAdaptorConcept<const_t>;\n  typename value_type;      where PixelValueConcept<value_type>;\n  typename reference;       where PixelConcept<remove_reference<reference>::type>;  // may be mutable\n  typename const_reference;   // must not be mutable\n  static const bool D::is_mutable;\n\n  where Convertible<value_type, result_type>;\n};\n```\n\n----------------------------------------\n\nTITLE: Put Function for Distributed Iterator Property Map in C++\nDESCRIPTION: Free function to associate a value with a key in a distributed iterator property map.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/distributed_property_map.rst#2025-04-22_snippet_21\n\nLANGUAGE: cpp\nCODE:\n```\nvoid put(iterator_property_map pm, const key_type& key, const value_type& value);\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for Boost Serialization\nDESCRIPTION: Sets up the include directories for both serialization libraries. This allows the library headers to be found during compilation when the libraries are used in other projects.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/serialization/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(boost_serialization PUBLIC include)\ntarget_include_directories(boost_wserialization PUBLIC include)\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation Structure with Table of Contents\nDESCRIPTION: Sets up a table of contents tree for the ArangoDB documentation using Sphinx's toctree directive. The directive is configured with maxdepth parameter of 2 and includes various documentation pages such as index, building instructions, getting started guide, examples, and a 'point_free' section.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/doc/src/intro.rst.txt#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :maxdepth: 2\n\n    index\n    building\n    gettingstarted\n    examples\n    point_free\n```\n\n----------------------------------------\n\nTITLE: Parsing Vertex Sampling Data for ArangoDB\nDESCRIPTION: This snippet contains numeric data representing vertex samples. The first line indicates the number of datasets. Each dataset starts with the number of vertices, followed by vertex data. This format is likely used for graph processing or testing in ArangoDB.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/polygon/example/input_data/primary/primary_026.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n2\n0 0\n1 6\n2\n-4 5 5 -1\n3 -11 13 -1\n```\n\n----------------------------------------\n\nTITLE: Basic BOOST_HOF_RETURNS Macro Definition\nDESCRIPTION: Core implementation of BOOST_HOF_RETURNS macro that deduces return type and noexcept specification from an expression. Handles platform differences between MSVC and other compilers.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/returns.hpp.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n#if BOOST_HOF_HAS_COMPLETE_DECLTYPE && BOOST_HOF_HAS_MANGLE_OVERLOAD\n#ifdef _MSC_VER\n#define BOOST_HOF_RETURNS_DEDUCE_NOEXCEPT(...) BOOST_HOF_NOEXCEPT(noexcept(__VA_ARGS__))\n#else\n#define BOOST_HOF_RETURNS_DEDUCE_NOEXCEPT(...) BOOST_HOF_NOEXCEPT(noexcept(static_cast<decltype(__VA_ARGS__)>(__VA_ARGS__)))\n#endif\n#define BOOST_HOF_RETURNS(...) \\\nBOOST_HOF_RETURNS_DEDUCE_NOEXCEPT(__VA_ARGS__) \\\n-> decltype(__VA_ARGS__) { return __VA_ARGS__; }\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Outcome Constructor in C++\nDESCRIPTION: This snippet documents the construction of a value type using a copy constructor that leverages success type conversion. It is conditionally compiled based on compatibility checks defined in the `predicate`.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/basic_outcome/implicit_success_copy_constructor.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n+++\ntitle = \"`basic_outcome(const success_type<T> &)`\"\ndescription = \"Implicit value-from-success-type-sugar copy constructor. Available if `predicate::enable_compatible_conversion<T, void, void>` is true, or `T` is `void`. Constexpr, triviality and noexcept propagating.\"\ncategories = [\"constructors\", \"implicit-constructors\", \"tagged-constructors\"]\nweight = 500\n+++\n```\n\n----------------------------------------\n\nTITLE: Configuring Brief Documentation Sorting in Doxygen\nDESCRIPTION: This option specifies whether doxygen sorts the brief descriptions of file, namespace, and class members alphabetically. Setting it to YES will sort them.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/sort/doc/doxygen/sort_doxyfile.txt#2025-04-22_snippet_44\n\nLANGUAGE: Doxygen\nCODE:\n```\n\"SORT_BRIEF_DOCS        = NO\"\n```\n\n----------------------------------------\n\nTITLE: Myanmar Unicode Character Ranges\nDESCRIPTION: Specifies Unicode code point ranges for Myanmar script characters, including letters, digits, vowel signs, and consonant marks across multiple Unicode categories\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/spirit/workbench/unicode/Scripts.txt#2025-04-22_snippet_7\n\nLANGUAGE: Unicode\nCODE:\n```\n1000..10FF; Myanmar # Various character ranges\n```\n\n----------------------------------------\n\nTITLE: Single Server Replication Tests Configuration\nDESCRIPTION: Configuration for single server replication tests with tracing and vector index experimental features\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/test-definitions.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nreplication_fuzz priority=500 parallelity=4 size=small single -- --extraArgs:log.level replication=trace\n```\n\n----------------------------------------\n\nTITLE: Defining Project with Version and Language\nDESCRIPTION: Defines the CMake project named boost_qvm and sets its version using the BOOST_SUPERPROJECT_VERSION variable. It also specifies that the project uses the CXX language.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/qvm/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nproject(boost_qvm VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Configuring Forward List Tests in CMake\nDESCRIPTION: Checks if the C++ forward_list header is available and conditionally sets up related tests. Provides diagnostic messages about the availability of forward_list.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/serialization/CMake/CMakeLists.txt#2025-04-22_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nCHECK_INCLUDE_FILE_CXX(forward_list FORWARD_LIST_FOUND)\nif(FORWARD_LIST_FOUND)\n  message(STATUS \"forward_list header found\")\n  archive_test(test_forward_list A)\n  archive_test(test_forward_list_ptrs A)\nelse()\n  message(STATUS \"forward_list header NOT found\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Pixel Dereference Adaptor Concept\nDESCRIPTION: This code snippet defines 'PixelDereferenceAdaptorConcept', a concept ensuring that a unary function can be applied to a pixel iterator, maintaining the necessary properties for pixel manipulation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/pixel_iterator.rst#2025-04-22_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\n  template <boost::UnaryFunctionConcept D>\n  concept PixelDereferenceAdaptorConcept:\n      DefaultConstructibleConcept<D>,\n      CopyConstructibleConcept<D>,\n      AssignableConcept<D>\n  {\n    typename const_t;         where PixelDereferenceAdaptorConcept<const_t>;\n    typename value_type;      where PixelValueConcept<value_type>;\n    typename reference;       where PixelConcept<remove_reference<reference>::type>;  // may be mutable\n    typename const_reference;   // must not be mutable\n    static const bool D::is_mutable;\n\n    where Convertible<value_type, result_type>;\n  };\n```\n\n----------------------------------------\n\nTITLE: Configuring Member Documentation Sorting in Doxygen\nDESCRIPTION: This option specifies whether doxygen sorts the (detailed) documentation of file and class members alphabetically by member name. Setting it to YES will sort them.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/sort/doc/doxygen/sort_doxyfile.txt#2025-04-22_snippet_43\n\nLANGUAGE: Doxygen\nCODE:\n```\n\"SORT_MEMBER_DOCS       = YES\"\n```\n\n----------------------------------------\n\nTITLE: Defining ViewsCompatibleConcept in C++\nDESCRIPTION: This concept ensures that two image views are compatible, requiring that their pixel types and number of dimensions are compatible. It is a key component for algorithms that need to work with multiple image views simultaneously, requiring both types to adhere to ImageViewConcept.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/image_view.rst.txt#2025-04-22_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nconcept ViewsCompatibleConcept<ImageViewConcept V1, ImageViewConcept V2> { where PixelsCompatibleConcept<V1::value_type, V2::value_type>; where V1::num_dimensions == V2::num_dimensions; };\n```\n\n----------------------------------------\n\nTITLE: Image Class Template Definition\nDESCRIPTION: This code defines the `image` class template in GIL. It is parameterized by the pixel type (`Pixel`), a boolean indicating whether the image is planar (`IsPlanar`), and an allocator type (`A`). This class models the `ImageConcept` and provides a concrete implementation of an image with pixel data ownership.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/image.rst.txt#2025-04-22_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate\n<\n    typename Pixel, // Models PixelValueConcept\n    bool IsPlanar,  // planar or interleaved image\n    typename A=std::allocator<unsigned char>\n>\nclass image;\n```\n\n----------------------------------------\n\nTITLE: OpenSSL Version Configuration\nDESCRIPTION: Configures OpenSSL version requirements by reading from VERSIONS file and setting up appropriate compiler definitions and checks.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/CMakeLists.txt#2025-04-22_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT EXISTS \"${CMAKE_CURRENT_LIST_DIR}/VERSIONS\")\n  message(FATAL_ERROR \"expecting ${CMAKE_CURRENT_LIST_DIR}/VERSIONS\")\nelse()\n  file(READ \"${CMAKE_CURRENT_LIST_DIR}/VERSIONS\" ARANGODB_VERSIONS_CONTENT)\n  set(TARGET_OS \"LINUX\")\n\n  if(USE_STRICT_OPENSSL_VERSION)\n    set(OPENSSL_VERSION_PATTERN \".*OPENSSL_${TARGET_OS}[ ]+\\\"([^\\\"]*).*\")\n  else()\n    set(OPENSSL_VERSION_PATTERN \".*OPENSSL_${TARGET_OS}[ ]+\\\"([0-9]\\.[0-9]\\.[^0-9\\\"]*).*\")\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Defining Status Code Payload Type in C++\nDESCRIPTION: Defines a value_type struct that contains a POSIX errno value, line number, and const char pointer. The type is designed to be TriviallyCopyable to allow implicit conversions to status_code<erased<T>> where appropriate size constraints are met.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/experimental/worked-example/value_type.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nstruct value_type\n{\n  int _errno{0};       // POSIX errno code\n  unsigned _lineno{0};  // Line number\n  const char *_msgptr{nullptr};\n};\n```\n\n----------------------------------------\n\nTITLE: PlantUML Diagram for Windows Process Creation\nDESCRIPTION: This PlantUML diagram illustrates the scenario where a Windows process creates a new process using `CreateProcess`. It shows the parent process (Father) creating the child process (Child) and handling both successful launch and error scenarios.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/process/doc/images/plantuml.txt#2025-04-22_snippet_4\n\nLANGUAGE: PlantUML\nCODE:\n```\n\"//windows.\\n\\plantuml\\nactivate Father \\n\\nFather->Father : on_setup\\nactivate Father\\ndeactivate Father\\nFather->Child : CreateProcess\\nactivate Child\\n\\nalt Successful Launch\\n\\nFather -> Father : on_success\\nactivate Father\\ndeactivate Father\\n\\nelse Error during launch\\n\\nFather -> Father : on_error\\nactivate Father\\ndeactivate Father\\n\\nend\\n\\endplantuml\"\n```\n\n----------------------------------------\n\nTITLE: Initializing NumPy and Boost.Python\nDESCRIPTION: This snippet initializes the Python runtime and the NumPy module within a C++ application using Boost.Python.  It's a necessary step before any interaction with Python or NumPy functionalities. Includes necessary header files for boost python and numpy.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/doc/numpy/tutorial/dtype.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/python/numpy.hpp>\n#include <iostream>\n\nnamespace p = boost::python;\nnamespace np = boost::python::numpy;\n\nint main(int argc, char **argv)\n{\n  Py_Initialize();\n  np::initialize();\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Print Function with Static Lambda in C++\nDESCRIPTION: Defines a simple print function using BOOST_HOF_STATIC_LAMBDA_FUNCTION to output values to std::cout.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/doc/src/example_print.md.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_HOF_STATIC_LAMBDA_FUNCTION(print) = [](const auto& x)\n{\n    std::cout << x << std::endl;\n};\n```\n\n----------------------------------------\n\nTITLE: Hugo Children Shortcode Implementation\nDESCRIPTION: Hugo shortcode that displays child pages with descriptions up to 2 levels deep in the documentation hierarchy.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/_index.md#2025-04-22_snippet_1\n\nLANGUAGE: hugo\nCODE:\n```\n{{% children description=\"true\" depth=\"2\" %}}\n```\n\n----------------------------------------\n\nTITLE: Output and Unicode Configuration in Doxygen\nDESCRIPTION: Settings for output directory structure, Unicode support, and output language configuration.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/sort/doc/doxygen/sort_doxyfile.txt#2025-04-22_snippet_1\n\nLANGUAGE: INI\nCODE:\n```\nCREATE_SUBDIRS         = NO\nALLOW_UNICODE_NAMES    = NO\nOUTPUT_LANGUAGE        = English\n```\n\n----------------------------------------\n\nTITLE: Coordinate Data Points\nDESCRIPTION: A collection of paired numeric values arranged in two columns. Each line contains four numbers that may represent coordinate pairs or transformation points.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/polygon/benchmark/input_data/voronoi_segment.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n-392064042 2063203344 -350214066 1823581892\n-350214066 1823581892 -335135758 1737247646\n-335135758 1737247646 -309270957 1589152908\n[...additional lines omitted for brevity...]\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding Compile Definition for Fast Double Encoding\nDESCRIPTION: Conditionally adds a compile definition to the arango_zkd library based on the USE_FAST_DOUBLE_MEMCMP_ENCODING option. This allows the C++ code to use preprocessor directives to enable the fast double encoding implementation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/Zkd/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif (USE_FAST_DOUBLE_MEMCMP_ENCODING)\n  target_compile_definitions(arango_zkd PRIVATE USE_FAST_DOUBLE_MEMCMP_ENCODING)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Defining Ethiopic Unicode Block\nDESCRIPTION: Lists the code point ranges belonging to the Ethiopic script in Unicode, including syllables, punctuation, numbers, and tonal marks. The block contains a total of 461 code points.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/spirit/workbench/unicode/Scripts.txt#2025-04-22_snippet_10\n\nLANGUAGE: unicode\nCODE:\n```\n1200..1248    ; Ethiopic # Lo  [73] ETHIOPIC SYLLABLE HA..ETHIOPIC SYLLABLE QWA\n124A..124D    ; Ethiopic # Lo   [4] ETHIOPIC SYLLABLE QWI..ETHIOPIC SYLLABLE QWE\n1250..1256    ; Ethiopic # Lo   [7] ETHIOPIC SYLLABLE QHA..ETHIOPIC SYLLABLE QHO\n1258          ; Ethiopic # Lo       ETHIOPIC SYLLABLE QHWA\n125A..125D    ; Ethiopic # Lo   [4] ETHIOPIC SYLLABLE QHWI..ETHIOPIC SYLLABLE QHWE\n1260..1288    ; Ethiopic # Lo  [41] ETHIOPIC SYLLABLE BA..ETHIOPIC SYLLABLE XWA\n128A..128D    ; Ethiopic # Lo   [4] ETHIOPIC SYLLABLE XWI..ETHIOPIC SYLLABLE XWE\n1290..12B0    ; Ethiopic # Lo  [33] ETHIOPIC SYLLABLE NA..ETHIOPIC SYLLABLE KWA\n12B2..12B5    ; Ethiopic # Lo   [4] ETHIOPIC SYLLABLE KWI..ETHIOPIC SYLLABLE KWE\n12B8..12BE    ; Ethiopic # Lo   [7] ETHIOPIC SYLLABLE KXA..ETHIOPIC SYLLABLE KXO\n12C0          ; Ethiopic # Lo       ETHIOPIC SYLLABLE KXWA\n12C2..12C5    ; Ethiopic # Lo   [4] ETHIOPIC SYLLABLE KXWI..ETHIOPIC SYLLABLE KXWE\n12C8..12D6    ; Ethiopic # Lo  [15] ETHIOPIC SYLLABLE WA..ETHIOPIC SYLLABLE PHARYNGEAL O\n12D8..1310    ; Ethiopic # Lo  [57] ETHIOPIC SYLLABLE ZA..ETHIOPIC SYLLABLE GWA\n1312..1315    ; Ethiopic # Lo   [4] ETHIOPIC SYLLABLE GWI..ETHIOPIC SYLLABLE GWE\n1318..135A    ; Ethiopic # Lo  [67] ETHIOPIC SYLLABLE GGA..ETHIOPIC SYLLABLE FYA\n135F          ; Ethiopic # Mn       ETHIOPIC COMBINING GEMINATION MARK\n1360          ; Ethiopic # So       ETHIOPIC SECTION MARK\n1361..1368    ; Ethiopic # Po   [8] ETHIOPIC WORDSPACE..ETHIOPIC PARAGRAPH SEPARATOR\n1369..137C    ; Ethiopic # No  [20] ETHIOPIC DIGIT ONE..ETHIOPIC NUMBER TEN THOUSAND\n1380..138F    ; Ethiopic # Lo  [16] ETHIOPIC SYLLABLE SEBATBEIT MWA..ETHIOPIC SYLLABLE PWE\n1390..1399    ; Ethiopic # So  [10] ETHIOPIC TONAL MARK YIZET..ETHIOPIC TONAL MARK KURT\n2D80..2D96    ; Ethiopic # Lo  [23] ETHIOPIC SYLLABLE LOA..ETHIOPIC SYLLABLE GGWE\n2DA0..2DA6    ; Ethiopic # Lo   [7] ETHIOPIC SYLLABLE SSA..ETHIOPIC SYLLABLE SSO\n2DA8..2DAE    ; Ethiopic # Lo   [7] ETHIOPIC SYLLABLE CCA..ETHIOPIC SYLLABLE CCO\n2DB0..2DB6    ; Ethiopic # Lo   [7] ETHIOPIC SYLLABLE ZZA..ETHIOPIC SYLLABLE ZZO\n2DB8..2DBE    ; Ethiopic # Lo   [7] ETHIOPIC SYLLABLE CCHA..ETHIOPIC SYLLABLE CCHO\n2DC0..2DC6    ; Ethiopic # Lo   [7] ETHIOPIC SYLLABLE QYA..ETHIOPIC SYLLABLE QYO\n2DC8..2DCE    ; Ethiopic # Lo   [7] ETHIOPIC SYLLABLE KYA..ETHIOPIC SYLLABLE KYO\n2DD0..2DD6    ; Ethiopic # Lo   [7] ETHIOPIC SYLLABLE XYA..ETHIOPIC SYLLABLE XYO\n2DD8..2DDE    ; Ethiopic # Lo   [7] ETHIOPIC SYLLABLE GYA..ETHIOPIC SYLLABLE GYO\n```\n\n----------------------------------------\n\nTITLE: Creating Subsampled View in Boost GIL\nDESCRIPTION: This function template allows for the creation of a subsampled view of the image, skipping pixels in both X and Y directions based on specified step values. This can reduce the image size effectively for processing.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/image_view.rst.txt#2025-04-22_snippet_14\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <typename View>\ntypename dynamic_xy_step_type<View>::type subsampled_view(const View& src,\n             const View::point_t& step);\n```\n\n----------------------------------------\n\nTITLE: Installing the Library\nDESCRIPTION: Command to install the library using CMake build system.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/src/building.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncmake --build . --target install\n```\n\n----------------------------------------\n\nTITLE: Defining Pipe Pack in C++\nDESCRIPTION: Implements a pipe_pack structure that serves as a base for the pipable adaptor. It handles the creation of pipe closures and provides the core piping functionality.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/pipable.hpp.txt#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<class Derived, class F>\nstruct pipe_pack\n{\n    template<class... Ts>\n    constexpr const F& get_function(Ts&&...) const noexcept\n    {\n        return static_cast<const F&>(static_cast<const Derived&>(*this));\n    }\n\n    BOOST_HOF_RETURNS_CLASS(pipe_pack);\n\n    template<class... Ts, class=typename std::enable_if<\n        (sizeof...(Ts) < function_param_limit<F>::value)\n    >::type>\n    constexpr auto operator()(Ts&&... xs) const BOOST_HOF_RETURNS\n    (make_pipe_closure(BOOST_HOF_RETURNS_C_CAST(F&&)(BOOST_HOF_CONST_THIS->get_function(xs...)), boost::hof::pack_forward(BOOST_HOF_FORWARD(Ts)(xs)...)));\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Testing for Boost MPI in CMake\nDESCRIPTION: Sets up testing for the Boost MPI library if BUILD_TESTING is enabled and a test CMakeLists.txt file exists.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpi/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif(BUILD_TESTING AND EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/test/CMakeLists.txt\")\n\n  add_subdirectory(test)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Implementing Reference Version of 'always' Function in C++\nDESCRIPTION: Defines the 'always_ref_f' function object that creates reference-based versions of 'always', which stores and returns references to values rather than copies.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/always.hpp.txt#2025-04-22_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\nstruct always_ref_f\n{\n    template<class T>\n    constexpr always_detail::always_base<T&> operator()(T& x) const noexcept\n    {\n        return always_detail::always_base<T&>(x);\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Define Named Parameters with Boost.Parameter\nDESCRIPTION: This code snippet demonstrates how to define named parameters using the `BOOST_PARAMETER_NAME` macro.  It defines named parameters for graph, visitor, root_vertex, index_map, and color_map, which can then be used to define functions with named parameter support.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/index.rst#2025-04-22_snippet_9\n\nLANGUAGE: cpp\nCODE:\n```\n\"BOOST_PARAMETER_NAME(graph)\n    BOOST_PARAMETER_NAME(visitor)\n    BOOST_PARAMETER_NAME(in(root_vertex))\n    BOOST_PARAMETER_NAME(in(index_map))\n    BOOST_PARAMETER_NAME(in_out(color_map))\"\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version\nDESCRIPTION: This snippet specifies the minimum required CMake version for the project. It ensures that the CMake version used is within the range of 3.5 to 3.16.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/endian/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n\"cmake_minimum_required(VERSION 3.5...3.16)\"\n```\n\n----------------------------------------\n\nTITLE: Creating NumPy Array with Custom dtype\nDESCRIPTION: This snippet shows how to create a NumPy array with a custom dtype using Boost.Python. It uses `np::zeros` to create an array with the dimensions specified by the `shape` tuple and the custom dtype previously defined as `custom_dtype`. The `shape` and `custom_dtype` variables must be initialized before this snippet.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/doc/numpy/tutorial/dtype.rst#2025-04-22_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\n  np::ndarray new_array = np::zeros(shape,custom_dtype);\n}\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries to ArangoDB Cache\nDESCRIPTION: This snippet uses CMake's `target_link_libraries` command to link the `arango_cache` library with other necessary libraries. It links against `arango`, `arango::validation`, and `boost_system`. This ensures that the cache library has access to the functionalities provided by these libraries during compilation and runtime.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/Cache/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(arango_cache\n  arango\n  arango::validation\n  boost_system)\n```\n\n----------------------------------------\n\nTITLE: Configuring execinfo.h Usage in Boost.Outcome\nDESCRIPTION: A configuration macro that when defined disables the use of execinfo.h header or its Windows emulation. This is particularly useful for embedded Linux toolchains that don't provide execinfo.h, preventing build failures when C++ exceptions are disabled. The macro is automatically defined for Android platforms.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/macros/disable_execinfo.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nBOOST_OUTCOME_DISABLE_EXECINFO\n```\n\n----------------------------------------\n\nTITLE: Graph Data Definition\nDESCRIPTION: Defines vertices and edges for a graph. Vertices are represented by an index, x-coordinate, and y-coordinate. Edges are represented by source vertex index, target vertex index, and weight. Comments can be added after the data.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph/example/data2.txt#2025-04-22_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n\"# Copyright (c) 2002 Trustees of Indiana University\n#\n# Distributed under the Boost Software License, Version 1.0.\n# (See accompanying file LICENSE_1_0.txt or copy at\n# http://www.boost.org/LICENSE_1_0.txt)\n# vertices\nv\n0 0.5 4.1 #\n1 1.5 5.1 # second vertex\n2 2.5 6.1\n\n# the edges\ne\n1 2 0.1\n0 1 0.2\n1 0 0.3\"\n```\n\n----------------------------------------\n\nTITLE: Specializing Unpack Sequence for Pack Base in C++\nDESCRIPTION: Specializes the unpack_sequence template for pack_base, allowing unpacking of pack_base objects. This enables the use of pack_base with other Boost.HOF utilities that expect unpackable sequences.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/pack.hpp.txt#2025-04-22_snippet_7\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<class T, class... Ts>\nstruct unpack_sequence<detail::pack_base<T, Ts...>>\n{\n    template<class F, class P>\n    constexpr static auto apply(F&& f, P&& p) BOOST_HOF_RETURNS\n    (\n        boost::hof::detail::unpack_pack_base(BOOST_HOF_FORWARD(F)(f), BOOST_HOF_FORWARD(P)(p))\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Other_Uppercase Characters\nDESCRIPTION: Lists Unicode code points classified as Other_Uppercase characters with their corresponding character classes. These include Roman numerals and circled Latin capital letters. The list contains 42 total code points.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/spirit/workbench/unicode/PropList.txt#2025-04-22_snippet_14\n\nLANGUAGE: unicode\nCODE:\n```\n2160..216F    ; Other_Uppercase # Nl  [16] ROMAN NUMERAL ONE..ROMAN NUMERAL ONE THOUSAND\n24B6..24CF    ; Other_Uppercase # So  [26] CIRCLED LATIN CAPITAL LETTER A..CIRCLED LATIN CAPITAL LETTER Z\n\n# Total code points: 42\n```\n\n----------------------------------------\n\nTITLE: Complex Combining Iterator Setup\nDESCRIPTION: Shows how to create a combining iterator that calculates products of elements from two vectors on-the-fly using zip_iterator and transform_iterator.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/zip_iterator_eg.rst#2025-04-22_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\ntypedef boost::tuple<\n  std::vector<double>::const_iterator,\n  std::vector<double>::const_iterator\n  > the_iterator_tuple;\n\ntypedef boost::zip_iterator<\n  the_iterator_tuple\n  > the_zip_iterator;\n\ntypedef boost::transform_iterator<\n  tuple_multiplies<double>,\n  the_zip_iterator\n  > the_transform_iterator;\n\nthe_transform_iterator it_begin(\n  the_zip_iterator(\n    the_iterator_tuple(\n      vect_1.begin(),\n      vect_2.begin()\n      )\n    ),\n  tuple_multiplies<double>()\n  );\n\nthe_transform_iterator it_end(\n  the_zip_iterator(\n    the_iterator_tuple(\n      vect_1.end(),\n      vect_2.end()\n      )\n    ),\n  tuple_multiplies<double>()\n  );\n```\n\n----------------------------------------\n\nTITLE: Generic X-Gradient Computation with Concept Checking\nDESCRIPTION: A template function for computing horizontal image gradients with compile-time type validation using Boost concept checks. Supports flexible image view types and color spaces.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/tutorial/gradient.rst.txt#2025-04-22_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <typename SrcView, typename DstView>\nvoid x_gradient(const SrcView& src, const DstView& dst)\n{\n  gil_function_requires<ImageViewConcept<SrcView> >();\n  gil_function_requires<MutableImageViewConcept<DstView> >();\n  gil_function_requires<ColorSpacesCompatibleConcept<\n    typename color_space_type<SrcView>::type,\n    typename color_space_type<DstView>::type\n  > >();\n\n  ... // compute the gradient\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Static Libraries for Boost Beast\nDESCRIPTION: Creates static libraries for Asio, Asio SSL, and Beast, which are used in the Boost Beast project.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/beast/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nadd_definitions (-DBOOST_ASIO_SEPARATE_COMPILATION=1)\nadd_definitions (-DBOOST_BEAST_SEPARATE_COMPILATION=1)\n\nGroupSources (test \"/\")\n\nadd_library (\n    lib-asio STATIC\n    test/lib_asio.cpp\n)\nif(Beast_ENABLE_HANDLER_TRACKING)\n    target_compile_definitions(lib-asio\n        PUBLIC BOOST_ASIO_ENABLE_HANDLER_TRACKING=1)\nendif()\n\nset_property(TARGET lib-asio PROPERTY FOLDER \"static-libs\")\n\nadd_library (\n    lib-asio-ssl STATIC\n    test/lib_asio_ssl.cpp\n)\n\nset_property(TARGET lib-asio-ssl PROPERTY FOLDER \"static-libs\")\n\nadd_library (\n    lib-beast STATIC\n    test/lib_beast.cpp\n)\n\nset_property(TARGET lib-beast PROPERTY FOLDER \"static-libs\")\n\ntarget_link_libraries(lib-beast lib-asio)\n```\n\n----------------------------------------\n\nTITLE: Including reverse_partition Header in C++\nDESCRIPTION: Shows the header file that needs to be included to use the reverse_partition algorithm in C++ code.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/reverse_partition.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/partition.hpp>\n```\n\n----------------------------------------\n\nTITLE: Generating Snowball Ada Source Code\nDESCRIPTION: Command-line invocation for generating Ada source code from a Snowball algorithm specification file, specifying output directory and package name\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/snowball/ada/README.md#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ snowball path/to/algorithm.sbl -ada -P <algorithm-name> -o src/stemmer-<algorithm>\n```\n\n----------------------------------------\n\nTITLE: Configuring C-Optimized Output in Doxygen\nDESCRIPTION: Setting to optimize Doxygen output specifically for C source projects. This changes the generated documentation structure to better suit C code. Default is NO.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/sort/doc/doxygen/sort_doxyfile.txt#2025-04-22_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nOPTIMIZE_OUTPUT_FOR_C  = NO\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Boost.Build\nDESCRIPTION: This snippet describes how to run the tests using Boost.Build. It assumes the library is copied to the Boost source tree, then navigates to the test directory and executes 'b2'.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n\"cd test\\nb2\"\n```\n\n----------------------------------------\n\nTITLE: Defining Atomic Lazy Awaitable\nDESCRIPTION: This snippet introduces 'atomic_lazy<T>', which functions similarly to 'lazy<T>' but provides thread safety through atomic operations during coroutine resumption.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/tutorial/essential/coroutines/awaitables.md#2025-04-22_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\natomic_lazy<T>\\n\\n    Same for `lazy<T>` as `atomic_eager<T>` is for `eager<T>`.\n```\n\n----------------------------------------\n\nTITLE: Semantic Implementation of times with Struct Inheritance in C++\nDESCRIPTION: Shows the equivalent semantic implementation when using struct inheritance with the times metafunction.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/times.rst#2025-04-22_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\nstruct r : times<c1,\\ |...|\\ c\\ *n*\\>::type {};\n```\n\n----------------------------------------\n\nTITLE: Including BOOST_MPL_ASSERT_MSG Header in C++\nDESCRIPTION: Shows how to include the header file necessary for using the BOOST_MPL_ASSERT_MSG macro.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/ASSERT_MSG.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/assert.hpp>\n```\n\n----------------------------------------\n\nTITLE: Declaring on_result_move_construction Hook for basic_result in C++\nDESCRIPTION: This function signature defines a static hook that is called during the converting move construction of basic_result objects. It takes pointers to the target object and an rvalue reference to the source object, and is guaranteed to never throw exceptions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/policies/base/on_result_move_construction.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nstatic void on_result_move_construction(T *, U &&) noexcept\n```\n\n----------------------------------------\n\nTITLE: Using BOOST_OUTCOME_TRYV2 for Value Extraction in C++\nDESCRIPTION: This snippet illustrates the use of the BOOST_OUTCOME_TRYV2 macro for scenarios where the value does not need to be extracted from a result. It maintains a reference to the result, which can enhance performance by avoiding unnecessary copies.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/tutorial/essential/result/try_ref.md#2025-04-22_snippet_1\n\nLANGUAGE: c++\nCODE:\n```\n// For when you don't want to extract the value\n// This creates an auto &&unique = res\nBOOST_OUTCOME_TRYV2(auto &&, res);\n```\n\n----------------------------------------\n\nTITLE: Configuring Anonymous Namespace Extraction in Doxygen\nDESCRIPTION: This setting controls whether members of anonymous namespaces are extracted and included in the documentation. If set to YES, anonymous namespace members appear under the namespace 'anonymous_namespace{file}'.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/sort/doc/doxygen/sort_doxyfile.txt#2025-04-22_snippet_30\n\nLANGUAGE: Doxygen\nCODE:\n```\n\"EXTRACT_ANON_NSPACES   = NO\"\n```\n\n----------------------------------------\n\nTITLE: PO File Format Example with Context Information\nDESCRIPTION: Illustrates how context information appears in a .po translation file. This example shows translations for the word 'open' in two different contexts: 'File' and 'Internet Connection', with appropriate German translations for each context.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/doc/messages_formatting.txt#2025-04-22_snippet_6\n\nLANGUAGE: PO\nCODE:\n```\nmsgctxt \"File\"\nmsgid \"open\"\nmsgstr \"öffnen\"\n\nmsgctxt \"Internet Connection\"\nmsgid \"open\"\nmsgstr \"aufbauen\"\n```\n\n----------------------------------------\n\nTITLE: Conditional Error Type Observation\nDESCRIPTION: Special handling for void error type with const-only overload, preventing mutable access to void errors\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/basic_outcome/error_rvalue.md#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n// Special case: If error_type is void, only const overload available\n```\n\n----------------------------------------\n\nTITLE: Configuring Enterprise Include Directories for V8\nDESCRIPTION: Conditional configuration for enterprise version include directories. Adds enterprise-specific include paths when USE_ENTERPRISE flag is enabled.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/lib/V8/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif (USE_ENTERPRISE)\n  target_include_directories(arango_v8 PUBLIC \"${PROJECT_SOURCE_DIR}/${ENTERPRISE_INCLUDE_DIR}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Boost.Regex Library Target\nDESCRIPTION: Creates an interface library target for Boost.Regex and sets up include directories.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/regex/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(boost_regex INTERFACE)\nadd_library(Boost::regex ALIAS boost_regex)\n\ntarget_include_directories(boost_regex INTERFACE include)\n```\n\n----------------------------------------\n\nTITLE: Conditional Test Directory Inclusion\nDESCRIPTION: This snippet checks if the BUILD_TESTING flag is set and if a specific CMakeLists.txt file exists in the test directory. If both conditions are met, it adds the test subdirectory, allowing for the integration of unit tests for the library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/exception/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(BUILD_TESTING AND EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/test/CMakeLists.txt\")\n\n  add_subdirectory(test)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Static Function Adaptor in C++\nDESCRIPTION: Demonstrates how to use the static_ adaptor with a custom function object that cannot be statically initialized normally. The example shows static initialization and usage of a times_function wrapped in static_.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/static.hpp.txt#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/hof.hpp>\n#include <cassert>\nusing namespace boost::hof;\n\n// In C++ this class can't be static-initialized, because of the non-\n// trivial default constructor.\nstruct times_function\n{\n    double factor;\n    times_function() : factor(2)\n    {}\n    template<class T>\n    T operator()(T x) const\n    {\n        return x*factor;\n    }\n};\n\nstatic constexpr static_<times_function> times2 = {};\n\nint main() {\n    assert(6 == times2(3));\n}\n```\n\n----------------------------------------\n\nTITLE: Base64 Transformation Performance Test Functions\nDESCRIPTION: Core functions involved in base64 encoding/decoding performance testing, including transform_width operations and base64 binary conversions. Shows execution time and call counts for each function.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/serialization/doc/profile3.txt#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nboost::archive::iterators::transform_width<char*, 6, 8, char>::fill()\nboost::archive::iterators::transform_width<boost::archive::iterators::binary_from_base64<boost::archive::iterators::remove_whitespace<std::_List_iterator<char> >, char>, 8, 6, char>::fill()\n__static_initialization_and_destruction_0(int, int)\nvoid test_base64<char>()\nstd::_List_base<char, std::allocator<char> >::_M_clear()\n```\n\n----------------------------------------\n\nTITLE: Installing and Testing Outcome in an Older Boost Installation\nDESCRIPTION: Commands for cloning the Outcome library into an existing Boost installation, generating the necessary headers, and running the test suite with C++14 support. This setup is useful for Boost versions that do not include Outcome by default.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/Readme.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd boost/libs\ngit clone --depth 1 https://github.com/boostorg/outcome.git outcome\ncd ..\n./b2 headers\n./b2 libs/outcome/test cxxflags=--std=c++14\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Crawler Build in CMake\nDESCRIPTION: Configures the build for an HTTP crawler executable named 'http-crawl'. Groups source files, adds the executable target with required source files, links necessary libraries (asio and beast), and sets the target folder property.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/beast/example/http/client/crawl/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nGroupSources(include/boost/beast beast)\nGroupSources(example/http/client/crawl \"/\")\n\nadd_executable (http-crawl\n    ${BOOST_BEAST_FILES}\n    Jamfile\n    urls_large_data.hpp\n    urls_large_data.cpp\n    http_crawl.cpp\n)\n\ntarget_link_libraries(http-crawl\n    lib-asio\n    lib-beast)\n\nset_property(TARGET http-crawl PROPERTY FOLDER \"example-http-client\")\n```\n\n----------------------------------------\n\nTITLE: Setting Exception Status in ArangoDB C++ Error Handling\nDESCRIPTION: This static method sets a flag indicating whether the implementation's error code matches POSIX errno. It modifies the relevant bit in the flags. The method is constexpr where possible, always available, has constant time complexity, and never throws exceptions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/policies/base/set_has_error_is_errno.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nstatic void _set_has_exception(Impl &&, bool) noexcept\n```\n\n----------------------------------------\n\nTITLE: Integer Array Dataset in Plain Text Format\nDESCRIPTION: A dataset containing integer values structured in rows. The first line contains a single value (0), the second line indicates the number of rows (3), and the following three lines contain four space-separated integers each.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/polygon/example/input_data/random/random_010.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n0\n3\n-39 -43 -6 -22\n13 -21 33 38\n24 -42 42 43\n```\n\n----------------------------------------\n\nTITLE: Pointer Container Requirements in ptr_deque\nDESCRIPTION: This code snippet explains the requirements and operations related to pointer management in the ptr_deque class, focusing on the replace and is_null methods.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/ptr_deque.rst#2025-04-22_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nauto_type replace( size_type idx, T* x );\n// Requirements: x != 0 and idx < size()\n// Effects: returns the object indexed by idx and replaces it with x.\n// Throws: bad_index if idx >= size() and bad_pointer if x == 0.\n// Exception safety: Strong guarantee\n\ntemplate< class U >\nauto_type replace( size_type idx, compatible-smart-ptr<U> x );\n// Effects: return replace( idx, x.release() );\n\nbool is_null( size_type idx ) const;\n// Requirements: idx < size()\n// Effects: returns whether the pointer at index idx is null\n```\n\n----------------------------------------\n\nTITLE: Defining MutableColorBaseConcept in C++\nDESCRIPTION: This snippet introduces the MutableColorBaseConcept, extending the ColorBaseConcept by adding assignable and swappable characteristics. It allows for mutable operations on color bases and defines how to access elements by reference.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/color_base.rst.txt#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nconcept MutableColorBaseConcept<ColorBaseConcept T>\n    : Assignable<T>, Swappable<T>\n{\n    template <int K> struct kth_element_reference_type;\n        where Metafunction<kth_element_reference_type>;\n\n    template <int K> kth_element_reference_type<T,K>::type at_c(T);\n\n    template <ColorBaseConcept T2> where { ColorBasesCompatibleConcept<T,T2> }\n        T& operator=(T&, const T2&);\n};\n```\n\n----------------------------------------\n\nTITLE: Adding BlackHole Subdirectory in CMake\nDESCRIPTION: Includes the BlackHole module as a subdirectory in the ArangoDB build configuration, enabling compilation and integration of the BlackHole component\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/Replication2/StateMachines/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(BlackHole)\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Linear B Script Character Ranges\nDESCRIPTION: Lists Unicode character ranges for the Linear B script, including syllabic signs, symbols, and ideograms. Linear B was used for writing Mycenaean Greek from about 1500-1200 BCE.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/spirit/workbench/unicode/Scripts.txt#2025-04-22_snippet_32\n\nLANGUAGE: unicode\nCODE:\n```\n10000..1000B  ; Linear_B # Lo  [12] LINEAR B SYLLABLE B008 A..LINEAR B SYLLABLE B046 JE\n1000D..10026  ; Linear_B # Lo  [26] LINEAR B SYLLABLE B036 JO..LINEAR B SYLLABLE B032 QO\n10028..1003A  ; Linear_B # Lo  [19] LINEAR B SYLLABLE B060 RA..LINEAR B SYLLABLE B042 WO\n1003C..1003D  ; Linear_B # Lo   [2] LINEAR B SYLLABLE B017 ZA..LINEAR B SYLLABLE B074 ZE\n1003F..1004D  ; Linear_B # Lo  [15] LINEAR B SYLLABLE B020 ZO..LINEAR B SYLLABLE B091 TWO\n10050..1005D  ; Linear_B # Lo  [14] LINEAR B SYMBOL B018..LINEAR B SYMBOL B089\n10080..100FA  ; Linear_B # Lo [123] LINEAR B IDEOGRAM B100 MAN..LINEAR B IDEOGRAM VESSEL B305\n\n# Total code points: 211\n```\n\n----------------------------------------\n\nTITLE: Building Zlib with Visual Studio 2008\nDESCRIPTION: Instructions for building Zlib using Microsoft Visual C++ 2008. You must decompress the current Zlib files before opening the solution file for compilation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/zlib/zlib-1.2.13/contrib/vstudio/readme.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n- Decompress current zlib, including all contrib/* files\n- Open contrib\\vstudio\\vc9\\zlibvc.sln with Microsoft Visual C++ 2008\n- Or run: vcbuild /rebuild contrib\\vstudio\\vc9\\zlibvc.sln \"Release|Win32\"\n```\n\n----------------------------------------\n\nTITLE: Building Boost Graph Library Components\nDESCRIPTION: Build commands for compiling Boost Graph Library headers and compiled components using the b2 build system, with options for header-only or full build\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./bootstrap.sh\n./b2 headers\n./b2\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket Server Sync Example in CMake\nDESCRIPTION: This CMake snippet sets up a synchronous WebSocket server example using Boost.Beast. It groups source files, defines the executable, links required libraries, and organizes the project structure.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/beast/example/websocket/server/sync/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nGroupSources(include/boost/beast beast)\nGroupSources(example/websocket/server/sync \"/\")\n\nadd_executable (websocket-server-sync\n    ${BOOST_BEAST_FILES}\n    Jamfile\n    websocket_server_sync.cpp\n)\n\ntarget_link_libraries(websocket-server-sync\n    lib-asio\n    lib-beast)\n\nset_property(TARGET websocket-server-sync PROPERTY FOLDER \"example-websocket-server\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost Heap CMake Project\nDESCRIPTION: Sets minimum CMake version, defines project with C++ language, and creates an interface library for Boost Heap\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/heap/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.16)\n\nproject(boost_heap VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n\nadd_library(boost_heap INTERFACE)\nadd_library(Boost::heap ALIAS boost_heap)\n```\n\n----------------------------------------\n\nTITLE: Defining make_vertex_list_adaptor function template\nDESCRIPTION: This code defines the `make_vertex_list_adaptor` function templates, which construct a vertex list adaptor from a graph and an optional property map. The graph type must model `Distributed Vertex List Graph`.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/vertex_list_adaptor.rst#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\n  template<typename Graph, typename GlobalIndexMap>\n  vertex_list_adaptor<Graph, GlobalIndexMap>\n  make_vertex_list_adaptor(const Graph& g, const GlobalIndexMap& index_map);\n\n  template<typename Graph>\n  vertex_list_adaptor<Graph, *unspecified*>\n  make_vertex_list_adaptor(const Graph& g);\n```\n\n----------------------------------------\n\nTITLE: Declaring explicit inplace value constructor for basic_result with std::initializer_list in C++\nDESCRIPTION: An explicit constructor for basic_result that constructs a value in-place using std::initializer_list and variable arguments. This constructor is only available when the predicate::enable_inplace_value_constructor condition is true. It propagates constexpr, triviality, and noexcept from the underlying operations.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/basic_result/explicit_inplace_value_constructor_il.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nexplicit basic_result(in_place_type_t<value_type_if_enabled>, std::initializer_list<U>, Args ...)\n```\n\n----------------------------------------\n\nTITLE: Define a Function with Boost.Parameter\nDESCRIPTION: This code snippet defines a function `f` using the `BOOST_PARAMETER_FUNCTION` macro.  It specifies the function's return type, name, tag, and required parameters. This macro allows defining functions with named and positional arguments.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/index.rst#2025-04-22_snippet_10\n\nLANGUAGE: cpp\nCODE:\n```\n\"BOOST_PARAMETER_FUNCTION((void), f, tag,\n        (required (graph, \\*))\n    ''')\n\n.. @example.append(') {}\")\n```\n\n----------------------------------------\n\nTITLE: Evaluating GIL Type Traits in C++ Metafunctions\nDESCRIPTION: Demonstrates the use of metafunctions and type traits to evaluate properties of GIL constructs, such as whether a view is planar or mutable. These traits assist in conditional processing based on image properties and utilize static assertions for compile-time verification.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/metafunctions.rst.txt#2025-04-22_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\nstatic_assert(is_planar<rgb8_planar_view_t>::value == true, \"\");\n\nif (view_is_mutable<View>::value)\n{\n ...\n}\n```\n\n----------------------------------------\n\nTITLE: Debugging ArangoShell with GDB\nDESCRIPTION: Commands for setting up server and client debugging sessions using GDB with ArangoDB.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/CONTRIBUTING.md#2025-04-22_snippet_33\n\nLANGUAGE: bash\nCODE:\n```\n# Server command\n./scripts/unittest shell_client --test api-import.js --server tcp://127.0.0.1:7777\n\n# Client command\ngdb --args ./build/bin/arangod --server.endpoint http+tcp://127.0.0.1:6666 \\\n                           --server.authentication false \\\n                           --log.level communication=trace \\\n                           ../arangodb-data-test\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Outcome with Policy in C++\nDESCRIPTION: This code snippet demonstrates how to create a custom `basic_outcome` specialization using the `abort_policy` defined previously. By specifying `abort_policy` as the policy type, the custom outcome will use the defined behavior when attempting to access a missing value or error.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/tutorial/essential/no-value/custom.md#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <>\nclass basic_outcome<int, std::string, OUTCOME_V2_NAMESPACE::abort_policy<void>>\n{\n  //...\n};\n\n```\n\n----------------------------------------\n\nTITLE: Defining MPL Placeholders in C++\nDESCRIPTION: Defines placeholder types in the placeholders namespace, creating aliases for arg<n> specializations that can be used in metaprogramming expressions. The unnamed placeholder '_' has special meaning in bind and lambda expressions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/Placeholders.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nnamespace placeholders {\ntypedef |unspecified| _;\ntypedef arg<1>      _1;\ntypedef arg<2>      _2;\n|...|\ntypedef arg<\\ *n*\\ >      _\\ *n*\\ ;\n}\n\nusing placeholders::_;\nusing placeholders::_1;\nusing placeholders::_2;\n|...|\nusing placeholders::_\\ *n*\\ ;\n```\n\n----------------------------------------\n\nTITLE: Defining Constructor Hook for basic_result in C++\nDESCRIPTION: Defines a free function hook that is invoked by implicit constructors of basic_result. This function was removed in Outcome v2.2.0 but can be enabled with legacy support. It is discovered through Argument Dependent Lookup and has no specific requirements.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/functions/hooks/hook_result_construction.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nvoid hook_result_construction(T *, U &&) noexcept\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamic X Step Type Concept in C++\nDESCRIPTION: This snippet defines a concept named `HasDynamicXStepTypeConcept` which checks if a type `T` has a corresponding dynamic x step type using a metafunction. It is utilized in various models of pixel iterators and image views provided by GIL.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/pixel_iterator.rst.txt#2025-04-22_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\nconcept HasDynamicXStepTypeConcept<typename T>\n{\n    typename dynamic_x_step_type<T>;\n        where Metafunction<dynamic_x_step_type<T> >;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining QVM Header Mode Configuration Option - JavaScript\nDESCRIPTION: This snippet defines a configuration option for setting the header mode for unit tests in ArangoDB. The option allows values like 'multi', 'single', or 'single_lite'. It is useful for customizing how unit test headers are included in the output.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/qvm/meson_options.txt#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\noption('qvm_header_mode',type:'string',value:'multi',description:'Unit test header inclusion option: multi, single, single_lite')\n```\n\n----------------------------------------\n\nTITLE: Using auto as_failure() && operation in C++\nDESCRIPTION: Returns the output from free function failure() containing a move of any errored state, leaving the result's error value in a moved-from state. The error state is accessed using assume_error(). This operation may be destructive depending on the error_type.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/basic_result/as_failure_rvalue.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nauto as_failure() &&\n```\n\n----------------------------------------\n\nTITLE: Including Inserter Header in C++\nDESCRIPTION: Specifies the header file to include for using the inserter class template in C++.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/inserter_.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/inserter.hpp>\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Radical Characters\nDESCRIPTION: Lists Unicode code points classified as Radical with their corresponding character classes. These include CJK and Kangxi radicals that form the building blocks of Chinese characters. The list contains 329 total code points.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/spirit/workbench/unicode/PropList.txt#2025-04-22_snippet_19\n\nLANGUAGE: unicode\nCODE:\n```\n2E80..2E99    ; Radical # So  [26] CJK RADICAL REPEAT..CJK RADICAL RAP\n2E9B..2EF3    ; Radical # So  [89] CJK RADICAL CHOKE..CJK RADICAL C-SIMPLIFIED TURTLE\n2F00..2FD5    ; Radical # So [214] KANGXI RADICAL ONE..KANGXI RADICAL FLUTE\n\n# Total code points: 329\n```\n\n----------------------------------------\n\nTITLE: Creating a Build Directory with CMake\nDESCRIPTION: This snippet demonstrates how to create a build directory and navigate into it, preparing the environment for CMake configuration. It sets up the directory where the build process will occur.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"mkdir build\\ncd build\\ncmake ..\"\n```\n\n----------------------------------------\n\nTITLE: Declaring find_if Template in C++\nDESCRIPTION: Declares the find_if template struct that takes a Sequence and a Pred (predicate) as template parameters. It returns an unspecified type that represents an iterator to the first element satisfying the predicate.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/find_if.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      typename Sequence\n    , typename Pred\n    >\nstruct find_if\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Including deref Metafunction Header in C++\nDESCRIPTION: Shows how to include the header file containing the deref metafunction definition in C++ code.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/deref.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/deref.hpp>\n```\n\n----------------------------------------\n\nTITLE: Enterprise License Header Template\nDESCRIPTION: Proprietary license header template for enterprise edition ArangoDB source files, including confidentiality notice and usage restrictions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/STYLEGUIDE.md#2025-04-22_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\n////////////////////////////////////////////////////////////////////////////////\n/// DISCLAIMER\n///\n/// Copyright 2021 ArangoDB GmbH, Cologne, Germany\n///\n/// The Programs (which include both the software and documentation) contain\n/// proprietary information of ArangoDB GmbH; they are provided under a license\n/// agreement containing restrictions on use and disclosure and are also\n/// protected by copyright, patent and other intellectual and industrial\n/// property laws. Reverse engineering, disassembly or decompilation of the\n/// Programs, except to the extent required to obtain interoperability with\n/// other independently created software or as specified by law, is prohibited.\n///\n/// It shall be the licensee's responsibility to take all appropriate fail-safe,\n/// backup, redundancy, and other measures to ensure the safe use of\n/// applications if the Programs are used for purposes such as nuclear,\n/// aviation, mass transit, medical, or other inherently dangerous applications,\n/// and ArangoDB GmbH disclaims liability for any damages caused by such use of\n/// the Programs.\n///\n/// This software is the confidential and proprietary information of ArangoDB\n/// GmbH. You shall not disclose such confidential and proprietary information\n/// and shall use it only in accordance with the terms of the license agreement\n/// you entered into with ArangoDB GmbH.\n///\n/// Copyright holder is ArangoDB GmbH, Cologne, Germany\n///\n/// @author Dr. Frank Celler\n////////////////////////////////////////////////////////////////////////////////\n```\n\n----------------------------------------\n\nTITLE: Accessor Methods for Binary UFunc - C++\nDESCRIPTION: Defines accessor methods 'call' and 'make' within the 'binary_ufunc' template struct. These methods require template typenames and serve to convert a functor's parameters for Python usage. This allows Python to call complex C++ operations via Boost.Python.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/doc/html/numpy/_sources/reference/binary_ufunc.rst.txt#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <typename TBinaryFunctor,\n          typename TArgument1=typename TBinaryFunctor::first_argument_type,\n          typename TArgument2=typename TBinaryFunctor::second_argument_type,\n          typename TResult=typename TBinaryFunctor::result_type>\nstatic object call(TBinaryFunctor & self, \n                   object const & input, \n                   object const & output);\n```\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <typename TBinaryFunctor,\n          typename TArgument1=typename TBinaryFunctor::first_argument_type,\n          typename TArgument2=typename TBinaryFunctor::second_argument_type,\n          typename TResult=typename TBinaryFunctor::result_type>\nstatic object make();\n```\n\n----------------------------------------\n\nTITLE: Size Method for Reversible Pointer Container in C++\nDESCRIPTION: This method provides the number of elements currently stored in the container, allowing checks for size without throwing exceptions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/reversible_ptr_container.rst#2025-04-22_snippet_10\n\nLANGUAGE: C++\nCODE:\n```\nsize_type size() const;\n```\n\n----------------------------------------\n\nTITLE: Markdown Build Status Badges\nDESCRIPTION: Markdown code showing build status badges for Travis CI and AppVeyor continuous integration services.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/metaparse/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![Build Status](https://secure.travis-ci.org/boostorg/metaparse.svg?branch=master \"Build Status\")](http://travis-ci.org/boostorg/metaparse)\n[![Windows build status](https://ci.appveyor.com/api/projects/status/u7ysxkssmrgr7vau/branch/master?svg=true)](https://ci.appveyor.com/project/sabel83/metaparse-04v04/branch/master)\n```\n\n----------------------------------------\n\nTITLE: Running Boost Regex Tests\nDESCRIPTION: Commands to run tests for the Boost Regex library. These instructions assume you are in the 'libs/regex/test' directory. You can run all tests or a single specific test.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/regex/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n../../../b2                        <- run all tests\n../../../b2 regex_regress          <- single test\n```\n\n----------------------------------------\n\nTITLE: Appending S2 Geometry Library to Link Directories in CMake for ArangoDB\nDESCRIPTION: Adds the binary directory of the S2 Geometry library to the list of link directories for the project.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/s2geometry/CMakeLists.txt#2025-04-22_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND LINK_DIRECTORIES \"${CMAKE_CURRENT_BINARY_DIR}/s2geometry/${ARANGO_S2GEOMETRY_VERSION}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Boost Preprocessor\nDESCRIPTION: This snippet specifies the include directories for the 'boost_preprocessor' target.  It sets the 'include' directory as an INTERFACE include directory, ensuring that consumers of this library can find the necessary header files.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/preprocessor/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(boost_preprocessor INTERFACE include)\n```\n\n----------------------------------------\n\nTITLE: Configuring Core Examples Build in CMake\nDESCRIPTION: Sets up build configuration for core Boost.Compute examples including dependency setup and target creation. Configures include paths, defines example programs, and sets up Boost dependencies.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/compute/example/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude_directories(../include)\n\nset(EXAMPLES\n  amd_cpp_kernel\n  black_scholes\n  copy_data\n  fizz_buzz\n  hello_world\n  host_sort\n  inline_ptx\n  longest_vector\n  list_devices\n  mapped_view\n  memory_limits\n  monte_carlo\n  point_centroid\n  price_cross\n  print_vector\n  sort_vector\n  simple_kernel\n  time_copy\n  transform_sqrt\n  vector_addition\n  simple_moving_average\n  matrix_transpose\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Position Independent Code Option for Static Library\nDESCRIPTION: Sets an option to control whether position independent code (PIC) is used for the static library. This affects code generation for the static library but is ignored for shared libraries which always use PIC.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/lz4/build/cmake/CMakeLists.txt#2025-04-22_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\n# Whether to use position independent code for the static library.  If\n# we're building a shared library this is ignored and PIC is always\n# used.\noption(LZ4_POSITION_INDEPENDENT_LIB \"Use position independent code for static library (if applicable)\" ON)\n```\n\n----------------------------------------\n\nTITLE: Configuring Compiler Definitions for Boost.Nowide\nDESCRIPTION: Sets compile definitions based on build options and platform capabilities, including dynamic linking, LFS support, and initialization priority.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/nowide/CMakeLists.txt#2025-04-22_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nif(BUILD_SHARED_LIBS)\n  target_compile_definitions(boost_nowide PUBLIC BOOST_NOWIDE_DYN_LINK)\nendif()\nif(NOT BOOST_NOWIDE_HAS_LFS)\n  target_compile_definitions(boost_nowide PRIVATE BOOST_NOWIDE_NO_LFS)\nendif()\nif(BOOST_NOWIDE_HAS_INIT_PRIORITY)\n  target_compile_definitions(boost_nowide PRIVATE BOOST_NOWIDE_HAS_INIT_PRIORITY)\nendif()\ntarget_compile_definitions(boost_nowide PUBLIC BOOST_NOWIDE_NO_LIB)\ntarget_include_directories(boost_nowide PUBLIC include)\nboost_add_warnings(boost_nowide pedantic ${Boost_NOWIDE_WERROR})\ntarget_compile_features(boost_nowide PUBLIC cxx_std_11)\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost Lambda2 CMake Project\nDESCRIPTION: Sets up a CMake project for Boost Lambda2 library, defining it as an interface library with version information from BOOST_SUPERPROJECT_VERSION. Configures include directories and sets up optional test directory inclusion.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/lambda2/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.16)\n\nproject(boost_lambda2 VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n\nadd_library(boost_lambda2 INTERFACE)\nadd_library(Boost::lambda2 ALIAS boost_lambda2)\n\ntarget_include_directories(boost_lambda2 INTERFACE include)\n\nif(BUILD_TESTING AND EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/test/CMakeLists.txt\")\n  add_subdirectory(test)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring External Search For Documentation\nDESCRIPTION: This snippet configures the use of an external search engine for documentation indexed by Doxygen. It requires setting `EXTERNAL_SEARCH` to YES and defining `SEARCHENGINE_URL`. When enabled, the search data is managed externally with Xapian-based tools.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/sort/doc/doxygen/sort_doxyfile.txt#2025-04-22_snippet_61\n\nLANGUAGE: configuration\nCODE:\n```\nEXTERNAL_SEARCH        = NO\nSEARCHENGINE_URL       = \nSEARCHDATA_FILE        = searchdata.xml\nEXTERNAL_SEARCH_ID     = \nEXTRA_SEARCH_MAPPINGS  = \n```\n\n----------------------------------------\n\nTITLE: Defining Function Input Iterator Class and Helper Functions in C++\nDESCRIPTION: This snippet defines the function_input_iterator class template, a make_function_input_iterator helper function, and an infinite struct. The class takes Function and State as template parameters to encapsulate the function type and internal state value type.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/function_input_iterator.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nnamespace {\n    template <class Function, class State>\n    class function_input_iterator;\n\n    template <class Function, class State>\n    typename function_input_iterator<Function, State>\n    make_function_input_iterator(Function & f, State s);\n\n    struct infinite;\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Optional Value Presence in C++\nDESCRIPTION: Member function that returns a boolean indicating whether an optional value is present. This is a constant expression where possible and provides a no-throw guarantee. It has constant time complexity and serves as an alias for the explicit bool operator.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/basic_result/has_value.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nbool has_value() const noexcept\n```\n\n----------------------------------------\n\nTITLE: Defining MutableFunctionObject Concept in C++\nDESCRIPTION: Defines a concept for an object with a mutable call operator that can accept any number of parameters. The object must satisfy std::is_object and provide a valid non-const call operator that accepts the given arguments.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/doc/src/concepts.md.txt#2025-04-22_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\nconcept MutableFunctionObject\n{\n    template<class... Ts>\n    auto operator()(Ts&&...);\n};\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding Test Subdirectory\nDESCRIPTION: This snippet conditionally adds a subdirectory for tests if the build option BUILD_TESTING is set and if a test CMakeLists.txt file exists in the specified path. This allows for configuring and running tests associated with the library if testing is enabled.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/format/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(BUILD_TESTING AND EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/test/CMakeLists.txt\")\n\n  add_subdirectory(test)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Using reverse_fold to Remove Non-negative Elements in C++\nDESCRIPTION: Demonstrates how to use reverse_fold to remove non-negative elements from a sequence of integers. It uses if_ and less metafunctions to conditionally push elements to the result list.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/reverse_fold.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntypedef list_c<int,5,-1,0,-7,-2,0,-5,4> numbers;\ntypedef list_c<int,-1,-7,-2,-5> negatives;\ntypedef reverse_fold<\n      numbers\n    , list_c<int>\n    , if_< less< _2,int_<0> >, push_front<_1,_2,>, _1 >\n    >::type result;\n\nBOOST_MPL_ASSERT(( equal< negatives,result > ));\n```\n\n----------------------------------------\n\nTITLE: Problematic Global Locale Setting in C++\nDESCRIPTION: Illustrates a common issue with global locale settings affecting file output. The example shows how setting a system default locale can lead to unexpected number formatting in CSV files.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/doc/std_locales.txt#2025-04-22_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\nint main()\n{\n    std::locale::global(std::locale(\"\"));\n    // Set system's default locale as global\n    std::ofstream csv(\"test.csv\");\n    csv << 1.1 << \",\"  << 1.3 << std::endl;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Tagalog Script Character Ranges\nDESCRIPTION: Lists Unicode character ranges for the Tagalog script, including letters and diacritical marks. The Tagalog script (Baybayin) is a pre-Hispanic writing system used in the Philippines.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/spirit/workbench/unicode/Scripts.txt#2025-04-22_snippet_26\n\nLANGUAGE: unicode\nCODE:\n```\n1700..170C    ; Tagalog # Lo  [13] TAGALOG LETTER A..TAGALOG LETTER YA\n170E..1711    ; Tagalog # Lo   [4] TAGALOG LETTER LA..TAGALOG LETTER HA\n1712..1714    ; Tagalog # Mn   [3] TAGALOG VOWEL SIGN I..TAGALOG SIGN VIRAMA\n\n# Total code points: 20\n```\n\n----------------------------------------\n\nTITLE: Using BOOST_OUTCOME_CO_TRYV_FAILURE_LIKELY in C++ Coroutines\nDESCRIPTION: This macro evaluates an expression within a coroutine, continuing execution if successful, or immediately returning try_operation_return_as(X) if unsuccessful. It's optimized for failure-likely scenarios and requires the result type to be void.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/macros/co_tryv_failure_likely.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_OUTCOME_CO_TRYV_FAILURE_LIKELY(expr)\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost Iterator Library in CMake\nDESCRIPTION: Sets up the Boost Iterator library as an interface library in CMake, defining its version, include directories, and dependencies on other Boost libraries.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.20)\n\nproject(boost_iterator VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n\nadd_library(boost_iterator INTERFACE)\nadd_library(Boost::iterator ALIAS boost_iterator)\n\ntarget_include_directories(boost_iterator INTERFACE include)\n\ntarget_link_libraries(boost_iterator\n    INTERFACE\n        Boost::assert\n        Boost::concept_check\n        Boost::config\n        Boost::conversion\n        Boost::core\n        Boost::detail\n        Boost::function_types\n        Boost::fusion\n        Boost::mpl\n        Boost::optional\n        Boost::smart_ptr\n        Boost::static_assert\n        Boost::type_traits\n        Boost::utility\n)\n```\n\n----------------------------------------\n\nTITLE: MRView Lookup and Meta Retrieval Methods in C++\nDESCRIPTION: Implementation of lookup and meta handling methods for MapReduce views. These methods provide access to collection references and allow fetching the metadata configuration of the view.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/static_string/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nstd::shared_ptr<const MRView::Meta> MRView::meta() const { return _meta; }\n\nstd::unordered_set<TRI_voc_cid_t> MRView::getCollections() const {\n  std::unordered_set<TRI_voc_cid_t> cids;\n  for (auto& pair : _meta->_collections) {\n    cids.insert(pair.first);\n  }\n\n  return cids;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Color Converted View with Boost GIL\nDESCRIPTION: These two template functions create a color converted view of an image based on the specified color model. This is important for ensuring compatibility of color formats while processing images.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/image_view.rst.txt#2025-04-22_snippet_15\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <typename View, typename P, typename CCV>\ncolor_converted_view_type<View,P,CCV>::type color_converted_view(const View& src);\n```\n\n----------------------------------------\n\nTITLE: Linking Boost Libraries\nDESCRIPTION: This snippet links the `boost_property_map_parallel` target against various Boost libraries. It specifies that these libraries are required for using `boost_property_map_parallel`.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/property_map_parallel/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(boost_property_map_parallel\n  INTERFACE\n    Boost::assert\n    Boost::bind\n    Boost::concept_check\n    Boost::config\n    Boost::function\n    Boost::mpi\n    Boost::mpl\n    Boost::multi_index\n    Boost::optional\n    Boost::property_map\n    Boost::serialization\n    Boost::smart_ptr\n    Boost::static_assert\n    Boost::type_traits\n)\n```\n\n----------------------------------------\n\nTITLE: Deriving View Type in GIL (C++)\nDESCRIPTION: This template structure defines a metafunction in the Generic Image Library (GIL) for deriving a new view type from an existing one, allowing modifications to channel value, layout, planarity, X-step, and mutability.  This metafunction aids in generating specialized view types tailored to specific image processing algorithms and data representations.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/metafunctions.rst#2025-04-22_snippet_8\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <typename View,\n        typename ChannelValue, typename Layout, typename IsPlanar, typename IsXStep, typename IsMutable>\nstruct derived_view_type\n{\n  typedef ... type;  // Models ImageViewConcept\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Member Extraction in Doxygen\nDESCRIPTION: Setting to include members with package or internal scope in the documentation. When disabled, these members are excluded. Default is NO.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/sort/doc/doxygen/sort_doxyfile.txt#2025-04-22_snippet_26\n\nLANGUAGE: text\nCODE:\n```\nEXTRACT_PACKAGE        = NO\n```\n\n----------------------------------------\n\nTITLE: Defining PointNDConcept in C++\nDESCRIPTION: This C++ code snippet defines a template concept for N-dimensional points, providing a foundation for modeling points across multiple dimensions. It declares the number of dimensions and accessor methods for axis values, requiring a regular type for the coordinates.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/point.rst.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nconcept PointNDConcept<typename T> : Regular<T> {\n    // the type of a coordinate along each axis\n    template <size_t K> struct axis; where Metafunction<axis>;\n\n    const size_t num_dimensions;\n\n    // accessor/modifier of the value of each axis.\n    template <size_t K> const typename axis<K>::type& T::axis_value() const;\n    template <size_t K>       typename axis<K>::type& T::axis_value();\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Constructor Sorting in Doxygen\nDESCRIPTION: This option specifies whether doxygen sorts constructors and destructors to be listed first. If set to NO the constructors will appear in the respective orders defined by SORT_BRIEF_DOCS and SORT_MEMBER_DOCS.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/sort/doc/doxygen/sort_doxyfile.txt#2025-04-22_snippet_45\n\nLANGUAGE: Doxygen\nCODE:\n```\n\"SORT_MEMBERS_CTORS_1ST = NO\"\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL-enabled HTTP Client Build in CMake\nDESCRIPTION: CMake configuration that conditionally builds an SSL-enabled HTTP client example when OpenSSL is available. The configuration groups source files, sets up the executable target, and links required libraries including OpenSSL, Asio, and Beast.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/beast/example/http/client/sync-ssl/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif (OPENSSL_FOUND)\n    GroupSources(include/boost/beast beast)\n    GroupSources(example/common common)\n    GroupSources(example/http/client/sync-ssl \"/\")\n\n    add_executable (http-client-sync-ssl\n        ${BOOST_BEAST_FILES}\n        ${PROJECT_SOURCE_DIR}/example/common/root_certificates.hpp\n        Jamfile\n        http_client_sync_ssl.cpp\n    )\n\n    set_property(TARGET http-client-sync-ssl PROPERTY FOLDER \"example-http-client\")\n\n    target_link_libraries (http-client-sync-ssl\n        OpenSSL::SSL OpenSSL::Crypto\n        lib-asio\n        lib-asio-ssl\n        lib-beast\n        )\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Lifting Functions with BOOST_HOF_LIFT in C++\nDESCRIPTION: Demonstrates how to use BOOST_HOF_LIFT to turn an entire function overload set into a single object. This is an alternative to creating a function object class, but doesn't preserve constexpr in C++14.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/doc/src/gettingstarted.md.txt#2025-04-22_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate<class T, class U>\nauto sum(T x, U y)\n{\n    return x + y;\n}\n\n// Pass sum to an algorithm\nstd::vector<int> v = { 1, 2, 3 };\nint total = std::accumulate(v.begin(), v.end(), 0, BOOST_HOF_LIFT(sum));\n```\n\n----------------------------------------\n\nTITLE: Proposed Interoperable Base Solution\nDESCRIPTION: Initial proposed solution using type conversion in binary operator implementation with interoperable_base.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/interoperability-revisited.rst#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n    class T1\n  , class T2\n>\nstruct interoperable_base :\n    if_< \n        is_convertible<\n            T2\n          , T1\n        >\n      , T1\n      , T2>\n{};\n\ntemplate<\n    class Derived1\n  , class Derived2\n>\nenable_if<is_interoperable<Derived1, Derived2>, bool> operator==(\n    Derived1 const& lhs\n  , Derived2 const& rhs\n)\n{\n  typedef interoperable_base<\n              Derived1\n            , Derived2\n          >::type Base;\n\n  return static_cast<Base const&>(lhs).equal_to(static_cast<Derived2 const&(rhs));\n}\n```\n\n----------------------------------------\n\nTITLE: Defining and Extending a Fibonacci Sequence with vector_c in C++\nDESCRIPTION: Example showing how to define a vector_c containing the Fibonacci sequence and extend it with push_back. Also demonstrates using front and back operations with assertions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/vector_c.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ntypedef vector_c<int,1,1,2,3,5,8,13,21,34> fibonacci;\ntypedef push_back<fibonacci,int_<55> >::type fibonacci2;\n\nBOOST_MPL_ASSERT_RELATION( front<fibonacci2>::type::value, ==, 1 );\nBOOST_MPL_ASSERT_RELATION( back<fibonacci2>::type::value, ==, 55 );\n```\n\n----------------------------------------\n\nTITLE: Defining size Metafunction for ColorBase in C++\nDESCRIPTION: This snippet declares a metafunction called size, which calculates the number of elements in a given color base. It is useful for determining the structure of different color base types at compile time.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/color_base.rst.txt#2025-04-22_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\n// Metafunction returning an mpl::int_ equal to the number of elements in the color base\ntemplate <class ColorBase> struct size;\n```\n\n----------------------------------------\n\nTITLE: Rebasing Work in Progress Pull Request\nDESCRIPTION: This code snippet demonstrates how to rebase your work-in-progress pull request with the develop branch using Git. This method is suitable only if the pull request has not yet been reviewed.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/CONTRIBUTING.md#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ngit rebase develop\ngit push --force <username> feature/foo\n```\n\n----------------------------------------\n\nTITLE: Word Rule-Based Segmentation in C++\nDESCRIPTION: Shows how to use word boundary rules to filter specific types of segments like numbers, letters, and Kana characters.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/doc/boundary_analysys.txt#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nusing namespace boost::locale::boundary;\nstd::string text=\"To be or not to be, that is the question.\"\n// Create mapping of text for token iterator using global locale.\nssegment_index map(word,text.begin(),text.end()); \n// Define a rule\nmap.rule(word_any);\n// Print all \"words\" -- chunks of word boundary\nfor(ssegment_index::iterator it=map.begin(),e=map.end();it!=e;++it)\n    std::cout <<\"\\\"\"<< * it << \"\\\", \";\nstd::cout << std::endl;\n```\n\n----------------------------------------\n\nTITLE: Running Boost.JSON Benchmarks in Markdown\nDESCRIPTION: Instructions for cloning third-party repositories and running the benchmark program. It mentions using the clone.sh script to fetch repositories and running the bench program without arguments to see available options.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/json/bench/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# Boost.JSON Benchmarks\n\nTo run the benchmarks first run clone.sh to\nfetch the third party repositories. Then run\nthe bench program with no arguments for a\nlist of command line options.\n\nThe benchmarked files were sourced from the\n[simdjson](https://github.com/simdjson/simdjson) repository.\n```\n\n----------------------------------------\n\nTITLE: Generic Image Algorithm Example - x_gradient.cpp\nDESCRIPTION: This example demonstrates writing an algorithm that operates on generic images using the Boost GIL library. It showcases how to create algorithms that are independent of specific image types, enabling code reuse and flexibility.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/index.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n* :download:`x_gradient.cpp <../example/x_gradient.cpp>`: \n  Writing an algorithm that operates on generic images\n```\n\n----------------------------------------\n\nTITLE: Using the 'next' Metafunction in C++\nDESCRIPTION: This code snippet demonstrates the usage of the 'next' metafunction. It defines a vector of integers, gets iterators to its beginning and end, and uses the 'next' metafunction to increment the first iterator.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/next.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntypedef vector_c<int,1> v;\ntypedef begin<v>::type first;\ntypedef end<v>::type last;\n\nBOOST_MPL_ASSERT(( is_same< next<first>::type, last > ));\n```\n\n----------------------------------------\n\nTITLE: Defining is_error_code_available Trait in C++\nDESCRIPTION: This code snippet defines the `is_error_code_available<T>` trait. It determines if an error code can be constructed from a type T, typically through an ADL-discovered free function `make_error_code(T)`. The trait provides a `::value` boolean and a `::type` typedef.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/traits/is_error_code_available.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nis_error_code_available<T>\n```\n\n----------------------------------------\n\nTITLE: Observing Stored Exceptions with assume_exception in C++\nDESCRIPTION: Method signature for assume_exception() that returns an rvalue reference to the stored exception. The method first invokes NoValuePolicy::narrow_exception_check() before returning the reference. For void exception_type, only a const overload returning void is available.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/basic_outcome/assume_exception_rvalue.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nexception_type &&assume_exception() && noexcept\n```\n\n----------------------------------------\n\nTITLE: Defining reverse_copy_if Template in C++\nDESCRIPTION: Defines the reverse_copy_if template struct, which returns a reversed, filtered copy of the original sequence containing elements that satisfy a given predicate. It takes a Sequence, a Predicate, and an optional Inserter as template parameters.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/reverse_copy_if.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      typename Sequence\n    , typename Pred\n    , typename In = |unspecified|\n    >\nstruct reverse_copy_if\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Amending Last Commit of Pull Request\nDESCRIPTION: In this snippet, commands are provided to amend the last commit of a pull request that is still a work-in-progress. This is useful for making quick changes without creating a new commit.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/CONTRIBUTING.md#2025-04-22_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ncd libs/gil\ngit checkout feature/foo\ngit add -A\ngit commit --amend\ngit push --force <username> feature/foo\n```\n\n----------------------------------------\n\nTITLE: Configuring ArangoDB Graph Target Sources with CMake\nDESCRIPTION: This CMake command configures the source files for the `arango_graph` target.  It adds `TraceEntry.cpp` as a private source, meaning it's used internally within the `arango_graph` target and not exposed to other targets.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/Graph/Helpers/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(arango_graph PRIVATE\n  TraceEntry.cpp)\n```\n\n----------------------------------------\n\nTITLE: Constructor Hook Function Declaration in C++\nDESCRIPTION: Declaration of a deprecated ADL-discovered free function hook used during move construction of basic_result objects. This function was removed in Outcome v2.2.0 but can be enabled with legacy support flags.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/functions/hooks/hook_result_move_construction.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nvoid hook_result_move_construction(T *, U &&) noexcept\n```\n\n----------------------------------------\n\nTITLE: Configuring Meson Build Options\nDESCRIPTION: This command demonstrates how to access the Meson configuration interface to adjust build options for LZ4.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/lz4/contrib/meson/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nmeson configure\n```\n\n----------------------------------------\n\nTITLE: Configuring ArangoDB Async Registry Server Test Library\nDESCRIPTION: Creates an object library for async registry server tests and links it with required dependencies including the stacktrace module and Google Test framework.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/AsyncRegistryServer/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(arango_tests_async_registry_server OBJECT\n  StacktraceTest.cpp)\ntarget_link_libraries(arango_tests_async_registry_server PRIVATE\n  arango_async_registry_stacktrace\n  gtest)\n```\n\n----------------------------------------\n\nTITLE: Using reverse_partition Algorithm in C++\nDESCRIPTION: Demonstrates how to use the reverse_partition algorithm with a range of integers and a predicate to separate odd and even numbers.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/reverse_partition.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntemplate< typename N > struct is_odd : bool_<(N::value % 2)> {};\n\ntypedef partition<\n      range_c<int,0,10> \n    , is_odd<_1>\n    , back_inserter< vector<> >\n    , back_inserter< vector<> >\n    >::type r;\n\nBOOST_MPL_ASSERT(( equal< r::first, vector_c<int,9,7,5,3,1> > ));\nBOOST_MPL_ASSERT(( equal< r::second, vector_c<int,8,6,4,2,0> > ));\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Failure Reporting with 'as_failure' in C++\nDESCRIPTION: This snippet defines the 'as_failure' struct template that allows custom reporting of failures by instantiating a provided template. It's used to provide more detailed error messages.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/reveal.hpp.txt#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<template<class...> class Template>\nstruct as_failure\n{\n    template<class... Ts>\n    struct of\n    {\n#if BOOST_HOF_REVEAL_USE_TEMPLATE_ALIAS\n        template<class Id>\n        using apply = typename Id::template defer<Template, Ts...>;\n#else\n        template<class Id>\n        static auto apply(Id) -> decltype(Id::template defer<Template, Ts...>());\n#endif\n    };\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Grouped Member Include Display in Doxygen\nDESCRIPTION: This option specifies whether doxygen adds an include statement to the documentation for each grouped member. Setting it to YES will add the include statement.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/sort/doc/doxygen/sort_doxyfile.txt#2025-04-22_snippet_40\n\nLANGUAGE: Doxygen\nCODE:\n```\n\"SHOW_GROUPED_MEMB_INC  = NO\"\n```\n\n----------------------------------------\n\nTITLE: Defining Lazy Value Type in C++ for Argument Pack\nDESCRIPTION: This template structure returns the result type of indexing an argument pack with a tagged lazy default. It must adhere to the ArgumentPack model and provides a fallback type from a callable F.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_11\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <typename A, typename K, typename F>\nstruct lazy_value_type\n{\n    typedef … type;\n};\n```\n\n----------------------------------------\n\nTITLE: Template Function Definition in C++\nDESCRIPTION: This snippet defines a static template function named `evaluate_category`. It takes an rvalue reference to a `std_bitset` as input and returns `passed_by_rvalue_reference`. This is part of defining argument evaluation logic.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_28\n\nLANGUAGE: cpp\nCODE:\n```\n\"        template <std::size_t N>\n        static invoked evaluate_category(|std_bitset|_<N + 1>&&)\n        {\n            return passed_by_rvalue_reference;\n        }\"\n```\n\n----------------------------------------\n\nTITLE: ptr_multiset_adapter::insert(Key* x) Method\nDESCRIPTION: Describes the behavior of the `insert(Key* x)` method of the `ptr_multiset_adapter` class. It specifies that the method takes ownership of the pointer `x`, inserts it into the container, and returns an iterator to the inserted element.  A `bad_pointer` exception is thrown if `x` is a null pointer.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/ptr_multiset_adapter.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\niterator insert( key_type* x );\n```\n\n----------------------------------------\n\nTITLE: Defining UnaryFunctionObject Concept in C++\nDESCRIPTION: Defines a concept for an object with a const call operator that accepts exactly one parameter. This concept must satisfy the ConstFunctionObject requirements and support a function call with a single argument.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/doc/src/concepts.md.txt#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nconcept UnaryFunctionObject\n{\n    template<class T>\n    auto operator()(T&&) const;\n};\n```\n\n----------------------------------------\n\nTITLE: Transfer Elements Between Pointer Containers\nDESCRIPTION: Allows moving elements between containers of the same or compatible types, with specific insertion and removal behavior\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/ptr_sequence_adapter.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ntemplate< class PtrSequence > void transfer( iterator before, typename PtrSequence::iterator object, PtrSequence& from );\n```\n\n----------------------------------------\n\nTITLE: Legacy Constructor Hook Function Declaration in C++\nDESCRIPTION: Function signature for a legacy ADL-discovered free function hook that was invoked by in-place constructors of basic_outcome. This hook has been deprecated since v2.2.0 unless explicitly enabled through BOOST_OUTCOME_ENABLE_LEGACY_SUPPORT_FOR.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/functions/hooks/hook_outcome_in_place_construction.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nvoid hook_outcome_in_place_construction(T *, in_place_type_t<U>, Args &&...) noexcept\n```\n\n----------------------------------------\n\nTITLE: Compiling Geodesic Inverse Program in C\nDESCRIPTION: Command to compile the inverse geodesic calculation program using C compiler with math library linking\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/lib/Geo/karney/00README.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncc -o inverse inverse.c geodesic.c -lm\n```\n\n----------------------------------------\n\nTITLE: Implementing Value Category Test Functions in C++\nDESCRIPTION: Template functions that return std::bitset objects in different value categories to test parameter passing behavior.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_43\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <std::size_t N>\nstd::bitset<N + 1> rvalue_bitset()\n{\n    return std::bitset<N + 1>();\n}\n\ntemplate <std::size_t N>\nstd::bitset<N + 1> const rvalue_const_bitset()\n{\n    return std::bitset<N + 1>();\n}\n\ntemplate <std::size_t N>\nstd::bitset<N + 1>& lvalue_bitset()\n{\n    static std::bitset<N + 1> lset = std::bitset<N + 1>();\n    return lset;\n}\n\ntemplate <std::size_t N>\nstd::bitset<N + 1> const& lvalue_const_bitset()\n{\n    static std::bitset<N + 1> const clset = std::bitset<N + 1>();\n    return clset;\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional SSL Subdirectory Addition in CMake for ArangoDB\nDESCRIPTION: This CMake snippet checks if OpenSSL is found and conditionally adds SSL-related subdirectories to the build process. It includes async-ssl, coro-ssl, stackless-ssl, and sync-ssl directories if OpenSSL is available.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/beast/example/websocket/server/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (OPENSSL_FOUND)\n    add_subdirectory (async-ssl)\n    add_subdirectory (coro-ssl)\n    add_subdirectory (stackless-ssl)\n    add_subdirectory (sync-ssl)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Merging Develop into Work in Progress Pull Request\nDESCRIPTION: This snippet shows how to merge changes from the develop branch into your feature branch when the pull request is still a work-in-progress. It helps keep your branch updated without rebasing.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/CONTRIBUTING.md#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ngit merge develop\ngit push <username> feature/foo\n```\n\n----------------------------------------\n\nTITLE: Installing Directories and Files\nDESCRIPTION: Installs the `include/` directory to the specified installation include directory, and installs the `LICENSE` file to the specified installation documentation directory.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/taocpp-json/CMakeLists.txt#2025-04-22_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\ninstall (DIRECTORY include/ DESTINATION ${TAOCPP_JSON_INSTALL_INCLUDE_DIR})\ninstall (FILES LICENSE DESTINATION ${TAOCPP_JSON_INSTALL_DOC_DIR})\n```\n\n----------------------------------------\n\nTITLE: Copyright Header for Boost Library Implementation\nDESCRIPTION: Standard copyright header and configuration for the Boost library source file, including vim editor settings and documentation formatting.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/doc/glossary.txt#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n//\n//  Copyright (c) 2009-2011 Artyom Beilis (Tonkikh)\n//\n//  Distributed under the Boost Software License, Version 1.0. (See\n//  accompanying file LICENSE_1_0.txt or copy at\n//  http://www.boost.org/LICENSE_1_0.txt)\n//\n\n// vim: tabstop=4 expandtab shiftwidth=4 softtabstop=4 filetype=cpp.doxygen\n```\n\n----------------------------------------\n\nTITLE: Configuring S2 Geometry Source Files for ArangoDB Geo Module\nDESCRIPTION: Adds source files for S2 geometry implementations including MultiPoint and MultiPolyline regions to the arango_geo target. These files are essential for ArangoDB's geospatial querying capabilities.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/lib/Geo/S2/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(arango_geo PRIVATE\n  S2MultiPointRegion.cpp\n  S2MultiPolylineRegion.cpp\n  )\n```\n\n----------------------------------------\n\nTITLE: Installing S2 Library Targets\nDESCRIPTION: This snippet defines the installation process for the specified S2 library targets. It specifies the different destination paths for runtime, archive, and library files based on the predefined CMake variables for installation directories.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/s2geometry/master/CMakeLists.txt#2025-04-22_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(TARGETS ${S2_TARGETS}\n        RUNTIME DESTINATION \"${CMAKE_INSTALL_BINDIR}\"\n        ARCHIVE DESTINATION \"${CMAKE_INSTALL_LIBDIR}\"\n        LIBRARY DESTINATION \"${CMAKE_INSTALL_LIBDIR}\")\n```\n\n----------------------------------------\n\nTITLE: Using checked<T, E> Type Alias in C++ with Outcome Library\nDESCRIPTION: The checked<T, E> type alias maps to either std_checked<T, E> in the standalone edition or boost_checked<T, E> in the Boost edition. The default error type varies based on the edition - std::error_code for standalone and boost::system::error_code for Boost edition.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/aliases/checked.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nBOOST_OUTCOME_V2_NAMESPACE::checked<T, E>\n```\n\n----------------------------------------\n\nTITLE: Configuring measure.rb Script for CMake\nDESCRIPTION: Configures the Ruby benchmarking script by copying from a template file to the binary directory. It uses configure_file CMake functionality. It relies on the measure.in.rb template as input and outputs measure.rb in the build directory.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hana/benchmark/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nconfigure_file(${CMAKE_CURRENT_SOURCE_DIR}/measure.in.rb #input\n               ${CMAKE_CURRENT_BINARY_DIR}/measure.rb    #output\n               @ONLY)\n```\n\n----------------------------------------\n\nTITLE: Pixel Channel Conversion and Packing\nDESCRIPTION: Shows converting between different pixel types with different channel representations, including conversion and packing of color channels\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/pixel.rst.txt#2025-04-22_snippet_10\n\nLANGUAGE: cpp\nCODE:\n```\nrgb565_pixel_t r565;\nrgb8_pixel_t rgb_full(255,255,255);\n\nget_color(r565,red_t())   = channel_convert<rgb565_channel0_t>(get_color(rgb_full,red_t()));\nget_color(r565,green_t()) = channel_convert<rgb565_channel1_t>(get_color(rgb_full,green_t()));\nget_color(r565,blue_t())  = channel_convert<rgb565_channel2_t>(get_color(rgb_full,blue_t()));\nassert(r565 == rgb565_pixel_t((uint16_t)65535))\n```\n\n----------------------------------------\n\nTITLE: Current Iterator Facade Implementation\nDESCRIPTION: Shows the current implementation of iterator_facade with binary operators, demonstrating issues with operator forwarding.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/interoperability-revisited.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <class Derived>\nstruct Facade\n{\n};\n\ntemplate <class T1, T2>\nstruct is_interoperable :\n  or_< \n       is_convertible<T1, T2>\n     , is_convertible<T2, T1>\n  > \n{};\n\ntemplate<\n    class Derived1\n  , class Derived2\n>\nenable_if<is_interoperable<Derived1, Derived2>, bool> operator==(\n    Derived1 const& lhs\n  , Derived2 const& rhs\n)\n{\n  return static_cast<Derived1 const&>(lhs).equal_to(static_cast<Derived2 const&(rhs));\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Infinite Stream with Function Input Iterator in C++\nDESCRIPTION: This snippet shows how to create an endless stream of random numbers using the function_input_iterator with the boost::infinite helper class. The infinite state ensures that the iterator range is always infinite.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/function_input_iterator.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ncopy(\n        make_function_input_iterator(f,infinite()),\n        make_function_input_iterator(f,infinite()),\n        ostream_iterator<int>(cout, \" \")\n    );\n```\n\n----------------------------------------\n\nTITLE: Configuring BOOST_OUTCOME_TRY_LIKELY Macro for Performance Optimization in C++\nDESCRIPTION: This shows how to configure the BOOST_OUTCOME_TRY_LIKELY macro to restore the original behavior without compiler hints about likelihood of success. The macro can be defined to return to previously unhinted behavior.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/changelog/_index.md#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_OUTCOME_TRY_LIKELY(expr) (!!expr)\n```\n\n----------------------------------------\n\nTITLE: Cloning Depot Tools for V8 Source Code Retrieval\nDESCRIPTION: Method to clone depot_tools repository for fetching V8 source code and dependencies using recommended Google approach\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/v8-build/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https:\\/\\/chromium.googlesource.com\\/chromium\\/tools\\/depot_tools.git\n```\n\n----------------------------------------\n\nTITLE: Creating Data Types Reference Link in reStructuredText\nDESCRIPTION: Defines a link reference named 'Data' and creates a text substitution for 'Data Types' that points to that reference. This is part of the documentation structure for ArangoDB.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/Data.rst#2025-04-22_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. _`Data`:\n\n.. |Data Types| replace:: `Data Types`_\n```\n\n----------------------------------------\n\nTITLE: Defining Binding Type in C++ for Argument Pack\nDESCRIPTION: This template structure returns the result type of indexing an argument pack with a keyword tag type or a tagged default. It requires that the type A is a model of ArgumentPack and returns the referenced type.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_8\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <typename A, typename K, typename D = void_>\nstruct binding\n{\n    typedef … type;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Outcome Move Constructor in C++\nDESCRIPTION: Move constructor that propagates constexpr, triviality, and noexcept characteristics from underlying types. Requires move constructors for value, error, and exception types. Follows standard move semantics with potential partial completion on exception.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/basic_outcome/move_constructor.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nbasic_outcome(basic_outcome &&)\n```\n\n----------------------------------------\n\nTITLE: Configuring File Version Filter in Doxygen\nDESCRIPTION: This option specifies a program or script used to get the current version for each file from the version control system. It is invoked by doxygen to get the file version.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/sort/doc/doxygen/sort_doxyfile.txt#2025-04-22_snippet_58\n\nLANGUAGE: Doxygen\nCODE:\n```\n\"FILE_VERSION_FILTER    = \"\n```\n\n----------------------------------------\n\nTITLE: Initializing Python and NumPy runtime\nDESCRIPTION: This snippet initializes the Python runtime and the NumPy module, which is essential for performing any operations related to NumPy arrays. Neglecting to call these can lead to segmentation faults.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/doc/html/numpy/_sources/tutorial/simple.rst.txt#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nint main(int argc, char **argv)\n{\n  Py_Initialize();\n  np::initialize();\n```\n\n----------------------------------------\n\nTITLE: Conditional Test Configuration\nDESCRIPTION: Adds test subdirectory if testing is enabled and the test CMakeLists.txt exists\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(BUILD_TESTING AND EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/test/CMakeLists.txt\")\n\n  add_subdirectory(test)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Simplified Polymorphic Constructor using Boost HOF in C++\nDESCRIPTION: This snippet demonstrates how to create the same make_tuple polymorphic constructor using the Boost HOF library's construct function. It significantly reduces boilerplate code by abstracting away the reference unwrapping and forwarding logic.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/doc/src/example_polymorphic_constructors.md.txt#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_HOF_STATIC_FUNCTION(make_tuple) = construct<std::tuple>();\n```\n\n----------------------------------------\n\nTITLE: Configuring C++ Standards for Fuerte\nDESCRIPTION: Sets the C++ standard to C++20 and disables compiler-specific extensions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/fuerte/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_CXX_STANDARD 20)\nset(CMAKE_CXX_EXTENSIONS OFF)\n```\n\n----------------------------------------\n\nTITLE: Configuring Automatic Linking Support in Doxygen\nDESCRIPTION: Setting to enable automatic linking of words that correspond to documented classes or namespaces to their documentation. Default value is YES, but set to NO in this configuration.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/sort/doc/doxygen/sort_doxyfile.txt#2025-04-22_snippet_13\n\nLANGUAGE: text\nCODE:\n```\nAUTOLINK_SUPPORT       = NO\n```\n\n----------------------------------------\n\nTITLE: Equivalent Expanded Template Keyword Definition in C++\nDESCRIPTION: This snippet shows the expanded form of a template keyword declaration, defining both a tag type and a parameter passing template. This is equivalent to using the BOOST_PARAMETER_TEMPLATE_KEYWORD macro.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/index.rst#2025-04-22_snippet_30\n\nLANGUAGE: C++\nCODE:\n```\nnamespace boost { namespace python {\n    namespace tag {\n\n        struct class_type;  // keyword tag type\n    }\n\n    template <typename T>\n    struct class_type\n      : parameter::template_keyword<tag::class_type,T>\n    {\n    };\n}}\n```\n\n----------------------------------------\n\nTITLE: Object Cloning and Pointer Ownership\nDESCRIPTION: Demonstrates how objects are cloned before insertion and how pointer ownership is handled by containers.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/examples.rst#2025-04-22_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\nclass X { ... };                     // assume 'X' is Cloneable \nX x;                                 // and 'X' can be stack-allocated \nptr_list<X> list; \nlist.push_back( new_clone( x ) );    // insert a clone\nlist.push_back( new X );             // always give the pointer directly to the container to avoid leaks\nlist.push_back( &x );                // don't do this!!! \nstd::auto_ptr<X> p( new X );\nlist.push_back( p );                 // give up ownership\nBOOST_ASSERT( p.get() == 0 );\n```\n\n----------------------------------------\n\nTITLE: Defining Legacy Hook Function in C++\nDESCRIPTION: Legacy ADL-discovered free function hook used by basic_outcome's converting copy constructors. Deprecated since v2.2.0 and replaced by on_outcome_copy_construction. Function is called during copy construction operations that take two arguments.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/functions/hooks/hook_outcome_copy_construction2.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nvoid hook_outcome_copy_construction(T *, U &&, V &&) noexcept\n```\n\n----------------------------------------\n\nTITLE: Creating 90-Degree Clockwise Rotated View using Boost GIL\nDESCRIPTION: This function template allows the user to create a view of the image that is rotated 90 degrees clockwise. It leverages Boost GIL's efficient view handling mechanisms.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/image_view.rst.txt#2025-04-22_snippet_11\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <typename View>\ntypename dynamic_xy_step_transposed_type<View>::type rotated90cw_view(const View& src);\n```\n\n----------------------------------------\n\nTITLE: Configuring ArangoDB Assertions Library with CMake\nDESCRIPTION: Configures a static library named arango_assertions with source files for assertion logging. Links against arango_crashhandler and sets up include directories for library headers.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/lib/Assertions/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(arango_assertions STATIC\n  AssertionConditionalLogger.cpp\n  AssertionLogger.cpp)\n\ntarget_link_libraries(arango_assertions\n  PUBLIC\n  arango_crashhandler\n)\n\ntarget_include_directories(arango_assertions\n  PUBLIC\n  ${PROJECT_SOURCE_DIR}/lib\n  ${PROJECT_BINARY_DIR}/lib)\n```\n\n----------------------------------------\n\nTITLE: Running gdb with Async Registry Pretty Printer - Shell\nDESCRIPTION: This snippet describes how to start gdb with the .gdbinit file to enable the async registry pretty-printer. It includes the command needed to invoke gdb with the proper initialization file.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/AsyncRegistryServer/PrettyPrinter/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngdb -ix <path to the .gdbinit file in this directory> <executable via --args or pid via -p>\n```\n\n----------------------------------------\n\nTITLE: Setting Installation Prefix in ArangoDB Configuration\nDESCRIPTION: This snippet demonstrates how to set the base directory for installation using the --prefix option. It specifies that files will be installed in /usr/local/include, /usr/local/lib, and /usr/local/man.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/jemalloc/jemalloc/INSTALL.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./configure --prefix=/usr/local\n```\n\n----------------------------------------\n\nTITLE: Basic Parallel Iteration Setup with Vectors\nDESCRIPTION: Shows the setup of iterators for parallel iteration over two vectors containing doubles and ints.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/zip_iterator_eg.rst#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nstd::vector<double>::const_iterator beg1 = vect_of_doubles.begin();\nstd::vector<double>::const_iterator end1 = vect_of_doubles.end();\nstd::vector<int>::const_iterator beg2 = vect_of_ints.begin();\nstd::vector<int>::const_iterator end2 = vect_of_ints.end();\n\nstd::for_each(beg1, end1, func_0());\nstd::for_each(beg2, end2, func_1());\n```\n\n----------------------------------------\n\nTITLE: Doxygen Special Thanks Page for Boost.Locale\nDESCRIPTION: This Doxygen comment creates a 'Special Thanks' page for the Boost.Locale documentation. It lists contributors in alphabetical order, specifying their names and contributions to the project.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/doc/special_thanks.txt#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\n/*!\n\\page special_thanks Special Thanks \n\n(in alphabetical order)\n\n-   Chad Nelson - for volunteering to manage the formal review and for the great language corrections \n    for this tutorial.\n-   Vladimir Prus - for development of Boost.Build support for Boost.Locale.\n\n\n*/\n```\n\n----------------------------------------\n\nTITLE: Declaring Iterator Archetype Class Template in C++\nDESCRIPTION: Declares the iterator_archetype class template with template parameters for Value type, AccessCategory, and TraversalCategory. The class includes typedefs for standard iterator-related types.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/iterator_archetypes.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <\n    class Value\n  , class AccessCategory\n  , class TraversalCategory\n>\nclass iterator_archetype\n{\n    typedef /* see below */ value_type;\n    typedef /* see below */ reference;\n    typedef /* see below */ pointer;\n    typedef /* see below */ difference_type;\n    typedef /* see below */ iterator_category;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Pair Template Structure in C++\nDESCRIPTION: This code snippet defines a template structure 'pair' that holds two arbitrary types T1 and T2. It includes typedefs for the pair itself and its two component types.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/pair.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      typename T1\n    , typename T2\n    >\nstruct pair\n{\n    typedef pair type;\n    typedef T1 first;\n    typedef T2 second;\n};\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Documentation Headers\nDESCRIPTION: RST documentation headers defining author information, organizational affiliations, and copyright details for the Boost counting iterator documentation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/counting_iterator.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n+++++++++++++++++++\n Counting Iterator\n+++++++++++++++++++\n\n:Author: David Abrahams, Jeremy Siek, Thomas Witt\n:Contact: dave@boost-consulting.com, jsiek@osl.iu.edu, witt@ive.uni-hannover.de\n:organization: `Boost Consulting`_, Indiana University `Open Systems\n               Lab`_, University of Hanover `Institute for Transport\n               Railway Operation and Construction`_\n:date: $Date$\n:copyright: Copyright David Abrahams, Jeremy Siek, and Thomas Witt 2003.\n```\n\n----------------------------------------\n\nTITLE: Converting Exception to std::error_code\nDESCRIPTION: This snippet describes the behavior when a coroutine is returning result<T, std::error_code>. It shows that the exception pointer is passed to error_from_exception to attempt a conversion to std::error_code.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/tutorial/essential/coroutines/returning.md#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n// If your Coroutine were returning a result<T, std::error_code>, \n// the exception ptr is passed to error_from_exception to see if it can be converted.\n```\n\n----------------------------------------\n\nTITLE: Configuring llhttp Library Build\nDESCRIPTION: Configuration for building the llhttp HTTP parsing library as a static library, including source files and include directories.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nSET(LLHTTP_SOURCES\n  ${CMAKE_CURRENT_SOURCE_DIR}/llhttp/src/api.c\n  ${CMAKE_CURRENT_SOURCE_DIR}/llhttp/src/http.c\n  ${CMAKE_CURRENT_SOURCE_DIR}/llhttp/src/llhttp.c\n)\n\nadd_library(llhttp STATIC\n  ${LLHTTP_SOURCES}\n)\n\ntarget_include_directories(llhttp PUBLIC \"${CMAKE_CURRENT_SOURCE_DIR}/llhttp/include\")\n```\n\n----------------------------------------\n\nTITLE: Defining ArangoDB Vocbase API Library Sources\nDESCRIPTION: Creates a static library target with vocbase API source files that handle collection, clustering, and database properties.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/VocBase/Properties/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(arango_vocbase_api STATIC\n        ClusteringConstantProperties.cpp\n        ClusteringMutableProperties.cpp\n        ClusteringProperties.cpp\n        CollectionConstantProperties.cpp\n        CollectionCreateOptions.cpp\n        CollectionIndexesProperties.cpp\n        CollectionInternalProperties.cpp\n        CollectionMutableProperties.cpp\n        CreateCollectionBody.cpp\n        DatabaseConfiguration.cpp\n        KeyGeneratorProperties.cpp\n        UserInputCollectionProperties.cpp\n        UtilityInvariants.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: PlantUML Diagram for POSIX Fork Error Scenario\nDESCRIPTION: This PlantUML diagram illustrates the scenario where a POSIX process encounters an error during the `fork` call. The diagram shows the parent process handling the error directly.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/process/doc/images/plantuml.txt#2025-04-22_snippet_3\n\nLANGUAGE: PlantUML\nCODE:\n```\n\"//posix fork error\\n\\plantuml\\nactivate Father \\n\\nFather->Father : on_setup\\nactivate Father\\ndeactivate Father\\nFather->Father : fork\\nFather -> Father : on_fork_error\\nactivate Father\\ndeactivate Father\\nFather -> Father : on_error\\nactivate Father\\ndeactivate Father\\n\\endplantuml\\n\"\n```\n\n----------------------------------------\n\nTITLE: Running Java Driver Tests with Custom Options\nDESCRIPTION: Command for running specific tests with the Java driver, specifying the source directory, test case, and cluster configuration.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/CONTRIBUTING.md#2025-04-22_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/unittest java_driver --javasource ../arangodb-java-driver/ \\\n    --javaOptions:failIfNoTests false \\\n    --testCase com.arangodb.next.api.collection.CollectionApiTest#countAndDropCollection \\\n    --cluster true\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Polymorphic Tests in CMake\nDESCRIPTION: Sets up additional polymorphic archive tests for various scenarios including RTTI, exported classes, and polymorphic helpers.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/serialization/CMake/CMakeLists.txt#2025-04-22_snippet_21\n\nLANGUAGE: CMake\nCODE:\n```\npolymorphic_archive_test(test_no_rtti polymorphic_base polymorphic_derived1 polymorphic_derived2)\npolymorphic_archive_test(test_exported polymorphic_base polymorphic_derived1 polymorphic_derived2)\npolymorphic_archive_test(test_polymorphic test_polymorphic_A A)\npolymorphic_archive_test(test_polymorphic2 test_polymorphic2imp)\npolymorphic_archive_test(test_p_helper)\n```\n\n----------------------------------------\n\nTITLE: Using Pipable Triple Sum Function in C++\nDESCRIPTION: This snippet illustrates the usage of the pipable triple sum function, showing that partial application doesn't cause an immediate error, but piping additional values does.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/doc/src/partialfunctions.md.txt#2025-04-22_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\nauto f = sum(1); // No error here\nauto i = 2 | f; // Compile error\n```\n\n----------------------------------------\n\nTITLE: Defining type_can_be_used_in_basic_result Trait in C++\nDESCRIPTION: A constexpr boolean trait that determines if a type R can be used in basic_result<T, E, NoValuePolicy>. It checks for various conditions including not being a reference, special type, or array, and being either void or a destructible object.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/traits/type_can_be_used_in_basic_result.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nnamespace BOOST_OUTCOME_V2_NAMESPACE::trait {\n  template<typename R>\n  constexpr bool type_can_be_used_in_basic_result = /* implementation */;\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Vertex from Adjacency List (C++)\nDESCRIPTION: Removes a specified vertex from the vertex set of an adjacency list. Assumes no edges are connected to the vertex. The vertex must be stored locally.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/distributed_adjacency_list.rst#2025-04-22_snippet_23\n\nLANGUAGE: C++\nCODE:\n```\nvoid remove_vertex(vertex_descriptor u, adjacency_list& g);\n```\n\n----------------------------------------\n\nTITLE: Including CMake Modules and Setting Default Options for Boost.Nowide\nDESCRIPTION: Includes necessary CMake modules and sets defaults for installation and warning options based on the build context (standalone, superproject, or external project).\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/nowide/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(BoostAddWarnings)\ninclude(CheckCXXSourceCompiles)\nif(CMAKE_SOURCE_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR)\n  include(CTest)\n  set(def_INSTALL ON)\n  set(def_WERROR ON)\nelseif(BOOST_SUPERPROJECT_SOURCE_DIR)\n  set(Boost_NOWIDE_INSTALL OFF) # Done by the superproject\n  set(def_WERROR ON)\nelse()\n  set(def_INSTALL OFF)\n  set(def_WERROR OFF)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Enum and Utility Class for Value Category Evaluation\nDESCRIPTION: Defines an enum for value categories and a utility class with static member functions to evaluate the category of a passed bitset object.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_79\n\nLANGUAGE: C++\nCODE:\n```\nenum invoked\n{\n    passed_by_lvalue_reference_to_const\n  , passed_by_lvalue_reference\n  , passed_by_rvalue_reference_to_const\n  , passed_by_rvalue_reference\n};\n\nstruct U\n{\n    template <std::size_t N>\n    static invoked evaluate_category(std::bitset<N + 1> const&)\n    {\n        return passed_by_lvalue_reference_to_const;\n    }\n\n    template <std::size_t N>\n    static invoked evaluate_category(std::bitset<N + 1>&)\n    {\n        return passed_by_lvalue_reference;\n    }\n\n    template <std::size_t N>\n    static invoked evaluate_category(std::bitset<N + 1> const&&)\n    {\n        return passed_by_rvalue_reference_to_const;\n    }\n\n    template <std::size_t N>\n    static invoked evaluate_category(std::bitset<N + 1>&&)\n    {\n        return passed_by_rvalue_reference;\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Observing Value Type Reference in C++\nDESCRIPTION: Method signature for narrow contract lvalue reference observer that returns a reference to the contained value. Invokes NoValuePolicy::narrow_value_check() before returning. Exhibits undefined behavior if no value is present, unless handled by the policy check.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/basic_result/assume_value_lvalue.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nvalue_type &assume_value() & noexcept\n```\n\n----------------------------------------\n\nTITLE: Copyright and License Header for Boost.Locale\nDESCRIPTION: This snippet contains the copyright notice and license information for the Boost.Locale project. It specifies the copyright holder, year range, and references the Boost Software License.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/doc/special_thanks.txt#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n//\n//  Copyright (c) 2009-2011 Artyom Beilis (Tonkikh)\n//\n//  Distributed under the Boost Software License, Version 1.0. (See\n//  accompanying file LICENSE_1_0.txt or copy at\n//  http://www.boost.org/LICENSE_1_0.txt)\n//\n```\n\n----------------------------------------\n\nTITLE: Clearing Vertex in Adjacency List (C++)\nDESCRIPTION: Removes all edges to and from a specified vertex in an adjacency list. The vertex remains in the vertex set. This operation is not applicable to directed graphs.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/distributed_adjacency_list.rst#2025-04-22_snippet_20\n\nLANGUAGE: C++\nCODE:\n```\nvoid clear_vertex(vertex_descriptor u, adjacency_list& g);\n```\n\n----------------------------------------\n\nTITLE: Adding IResearch Test Subdirectory in CMake\nDESCRIPTION: Includes the IResearch subdirectory in the build process to compile additional IResearch-related tests.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/CMakeLists.txt#2025-04-22_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(IResearch)\n```\n\n----------------------------------------\n\nTITLE: Detecting Constexpr If Support in CMake\nDESCRIPTION: CMake function to detect if the compiler supports constexpr if statements by attempting compilation with different C++ standard flags.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/yap/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(constexpr_if_std std_flag var)\n    try_compile(\n        worked\n        ${CMAKE_BINARY_DIR}\n        ${CMAKE_CURRENT_SOURCE_DIR}/cmake/constexpr_if.cpp\n        COMPILE_DEFINITIONS ${std_flag} -DCHECK_CONSTEXPR_IF=1\n    )\n    set(${var} ${worked} PARENT_SCOPE)\nendfunction ()\n```\n\n----------------------------------------\n\nTITLE: Understanding GIL Type Naming in C++\nDESCRIPTION: This snippet provides examples of naming conventions for various GIL types, demonstrating how different attributes like color space, bit depth, and mutability are encoded within type names. It helps developers properly define and understand types used within the GIL framework.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/naming.rst#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nbgr8_image_t             a;    // 8-bit interleaved BGR image\ncmyk16_pixel_t           b;    // 16-bit CMYK pixel value;\ncmyk16c_planar_ref_t     c(b); // const reference to a 16-bit planar CMYK pixel.\nrgb32f_planar_step_ptr_t d;    // step pointer to a 32-bit planar RGB pixel.\n```\n\n----------------------------------------\n\nTITLE: Composing Argument Packs using C++\nDESCRIPTION: This function template facilitates the composition of variadic arguments into an ArgumentPack, enforcing that all args are tagged references and limiting the number of arguments as per specifications.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_15\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <typename ...Pack>\nconstexpr typename |result_of_compose|_<Pack...>::type\n    compose(Pack const&... args);\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost Tests with CMake\nDESCRIPTION: Sets up conditional Boost test configuration by including the BoostTestJamfile module and configuring tests only if it's available. The test configuration links against Boost::static_assert and Boost::type_traits libraries.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/static_assert/example/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(BoostTestJamfile OPTIONAL RESULT_VARIABLE HAVE_BOOST_TEST)\n\nif(HAVE_BOOST_TEST)\n\nboost_test_jamfile(FILE Jamfile.v2 LINK_LIBRARIES Boost::static_assert Boost::type_traits)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Copyright Notice Definition in reStructuredText\nDESCRIPTION: Defines a copyright directive with information about the copyright holders, years, and license details. It references the Boost Software License with distribution terms.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/Data.rst#2025-04-22_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. copyright:: Copyright �  2001-2009 Aleksey Gurtovoy and David Abrahams\n   Distributed under the Boost Software License, Version 1.0. (See accompanying\n   file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)\n```\n\n----------------------------------------\n\nTITLE: Add Static Library: arango_replication2_pure\nDESCRIPTION: This CMake command adds a static library named `arango_replication2_pure`. It specifies `MetricsHelper.cpp` and `IScheduler.h` as source files. This library seems to represent a \"pure\" subset of replication functionalities.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/Replication2/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(arango_replication2_pure STATIC\n  MetricsHelper.cpp\n  IScheduler.h)\n```\n\n----------------------------------------\n\nTITLE: Defining Runic Unicode Block\nDESCRIPTION: Lists the code point ranges for the Runic script in Unicode. This block contains 78 code points including runic letters and symbols.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/spirit/workbench/unicode/Scripts.txt#2025-04-22_snippet_14\n\nLANGUAGE: unicode\nCODE:\n```\n16A0..16EA    ; Runic # Lo  [75] RUNIC LETTER FEHU FEOH FE F..RUNIC LETTER X\n16EE..16F0    ; Runic # Nl   [3] RUNIC ARLAUG SYMBOL..RUNIC BELGTHOR SYMBOL\n```\n\n----------------------------------------\n\nTITLE: Fix Adaptor Specialization for Base Case\nDESCRIPTION: Specialization of the fix adaptor for the base case (N=0) that terminates the recursion.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/fix.hpp.txt#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<class F, class Result>\nstruct fix_adaptor_base<F, Result, 0> : F\n{\n    BOOST_HOF_INHERIT_CONSTRUCTOR(fix_adaptor_base, F);\n\n    template<class... Ts>\n    const F& base_function(Ts&&...) const noexcept\n    {\n        return *this;\n    }\n\n    template<class... Ts>\n    typename Result::template apply<fix_adaptor_base, Ts...>::type\n    operator()(Ts&&... xs) const\n    {\n        return this->base_function(xs...)(*this, BOOST_HOF_FORWARD(Ts)(xs)...);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Benchmarking outcome::result<T, E> in C++\nDESCRIPTION: This snippet includes a header file for benchmarking the performance of outcome::result<T, E> error handling approach. It uses a deep stack implementation from the LEAF library and sets a benchmark flag.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/leaf/benchmark/benchmark.md#2025-04-22_snippet_9\n\nLANGUAGE: c++\nCODE:\n```\n#define BENCHMARK_WHAT 1\n#include \"https://raw.githubusercontent.com/boostorg/leaf/master/benchmark/deep_stack_other.cpp\"\n```\n\n----------------------------------------\n\nTITLE: Declaring assume_value() Method Signature in C++\nDESCRIPTION: Method signature for a constexpr-propagating, noexcept rvalue reference observer that performs a narrow contract check before returning the contained value. Special handling exists for void value_type.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/basic_result/assume_value_rvalue.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nvalue_type &&assume_value() && noexcept\n```\n\n----------------------------------------\n\nTITLE: Iterator Comparison Templates\nDESCRIPTION: Template functions for comparing iterators with support for interoperability between different iterator types\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/iterator_facade_ref.rst#2025-04-22_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <class Dr1, class V1, class TC1, class R1, class D1,\n          class Dr2, class V2, class TC2, class R2, class D2>\ntypename enable_if_interoperable<Dr1,Dr2,bool>::type\noperator ==(iterator_facade<Dr1,V1,TC1,R1,D1> const& lhs,\n            iterator_facade<Dr2,V2,TC2,R2,D2> const& rhs);\n```\n\n----------------------------------------\n\nTITLE: Creating and Manipulating Deque in C++\nDESCRIPTION: This example demonstrates how to create a deque of floating-point types and push an integer to the back. It also shows how to access elements using the at_c template.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/deque.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ntypedef deque<float,double,long double> floats;\ntypedef push_back<floats,int>::type types;\n\nBOOST_MPL_ASSERT(( is_same< at_c<types,3>::type, int > ));\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Groups for Beast HTTP Server\nDESCRIPTION: Groups source files into logical directories for better organization in IDE project views.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/beast/example/http/server/fast/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nGroupSources(include/boost/beast beast)\nGroupSources(example/common common)\nGroupSources(example/http/server/fast \"/\")\n```\n\n----------------------------------------\n\nTITLE: Image Concept Definition in GIL\nDESCRIPTION: This concept specializes RandomAccess2DImageConcept, further defining the requirements for an Image. It uses MutableImageViewConcept for its view type and defines coord_t as the coordinate type for the view.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/image.rst#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\n concept ImageConcept<RandomAccess2DImageConcept Img>\n  {\n    where MutableImageViewConcept<view_t>;\n    typename coord_t  = view_t::coord_t;\n  };\n```\n\n----------------------------------------\n\nTITLE: Smart Pointer Return Type Interface in C++\nDESCRIPTION: Example showing the release function that returns a compatible smart pointer type. The actual return type will be either std::auto_ptr or std::unique_ptr based on compiler support.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/compatible_smart_ptr.rst#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\ncompatible-smart-ptr<T> container::release( );\n```\n\n----------------------------------------\n\nTITLE: RST Header Definition for Transform Iterator\nDESCRIPTION: ReStructuredText header content defining the document structure, authors, and metadata for the Transform Iterator documentation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/transform_iterator.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n++++++++++++++++++++\n Transform Iterator\n++++++++++++++++++++\n\n:Author: David Abrahams, Jeremy Siek, Thomas Witt\n:Contact: dave@boost-consulting.com, jsiek@osl.iu.edu, witt@ive.uni-hannover.de\n:organization: `Boost Consulting`_, Indiana University `Open Systems\n               Lab`_, University of Hanover `Institute for Transport\n               Railway Operation and Construction`_\n:date: $Date$\n:copyright: Copyright David Abrahams, Jeremy Siek, and Thomas Witt 2003.\n```\n\n----------------------------------------\n\nTITLE: Defining bitxor_ Metafunction Template in C++\nDESCRIPTION: Template definition for the bitxor_ metafunction, which takes multiple integral constant arguments and returns their bitwise XOR result.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/bitxor_.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      typename T1\n    , typename T2\n    , typename T3 = |unspecified|\n    |...|\n    , typename T\n* = |unspecified|\n    >\nstruct bitxor_\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining SameType Concept in C++\nDESCRIPTION: This code defines a concept, SameType, that checks whether T and U are of the same type. It includes a concept_map for identical types.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/concepts.rst#2025-04-22_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\nconcept SameType<typename T, typename U> { /* unspecified */ };\n  template<typename T> concept_map SameType<T, T> { /* unspecified */ };\n```\n\n----------------------------------------\n\nTITLE: Processing Test Examples in CMake Loop\nDESCRIPTION: Iterates through the example list to configure each test case with proper build settings and organization in the 'run test examples' folder.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/safe_numerics/example/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nforeach(test_name ${run_examples_list})\n  test_run_pass(${test_name})\n  set_target_properties(${test_name} PROPERTIES FOLDER \"run test examples\")\nendforeach(test_name)\n```\n\n----------------------------------------\n\nTITLE: Setting Installation Rules for ArangoRestore\nDESCRIPTION: Configures installation rules for the ArangoRestore executable and its configuration files.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/client-tools/Restore/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(\n  TARGETS ${BIN_ARANGORESTORE}\n  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR})\n\ninstall_config(${BIN_ARANGORESTORE})\n```\n\n----------------------------------------\n\nTITLE: Matrix Data Representation in Plaintext\nDESCRIPTION: A numerical matrix representation with 4 rows. The first row contains a single value, the second row contains a single value, and the remaining rows contain space-separated integers that form a matrix structure.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/polygon/example/input_data/primary/primary_055.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n0\n3\n-3 -4 -1 -2\n-2 4 4 -1\n0 -2 0 1\n```\n\n----------------------------------------\n\nTITLE: Implementing member function application in C++\nDESCRIPTION: Implements the apply_mem_fn struct which handles calling member functions through various qualified references. Uses template metaprogramming to ensure proper type conversion and compatibility.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/apply.hpp.txt#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#define BOOST_HOF_APPLY_MEM_FN_CALL(cv, data) \\\n    template <class R, class Base, class Derived, class... Ts, class... Us, class=typename std::enable_if<and_< \\\n        is_compatible<Derived, cv Base>, \\\n        is_convertible_args<convertible_args<Us...>, convertible_args<Ts...>> \\\n    >::value>::type> \\\n    constexpr R operator()(R (Base::*mf)(Ts...) cv, Derived&& ref, Us &&... xs) const \\\n    BOOST_HOF_RETURNS_DEDUCE_NOEXCEPT((BOOST_HOF_FORWARD(Derived)(ref).*mf)(BOOST_HOF_FORWARD(Us)(xs)...)) \\\n    { \\\n        return (BOOST_HOF_FORWARD(Derived)(ref).*mf)(BOOST_HOF_FORWARD(Us)(xs)...); \\\n    }\n    BOOST_HOF_DETAIL_FOREACH_QUAL(BOOST_HOF_APPLY_MEM_FN_CALL, ~)\n```\n\n----------------------------------------\n\nTITLE: wcwidth Repository License Declaration\nDESCRIPTION: The MIT License text for code originating from the wcwidth repository, including copyright notices for Jeff Quast and additional permissions from Markus Kuhn.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/linenoise-ng/LICENSE-wcwidth.txt#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nThe MIT License (MIT)\n\nCopyright (c) 2014 Jeff Quast <contact@jeffquast.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\nMarkus Kuhn -- 2007-05-26 (Unicode 5.0)\n\nPermission to use, copy, modify, and distribute this software\nfor any purpose and without fee is hereby granted. The author\ndisclaims all warranties with regard to this software.\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Targets in CMake\nDESCRIPTION: Sets up test targets for CTest, including a default test that excludes long-running tests and a full test target that runs all tests.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/CMakeLists.txt#2025-04-22_snippet_17\n\nLANGUAGE: CMake\nCODE:\n```\n# This is the default from the Jenkins setup\nadd_test(NAME arangodbtests\n  COMMAND arangodbtests --gtest_output=xml --gtest_filter=-*_LongRunning)\n\n# Run all tests\nadd_test(NAME arangodbtests-full\n  COMMAND arangodbtests --gtest_output=xml)\n```\n\n----------------------------------------\n\nTITLE: Building Linenoise Library on Linux\nDESCRIPTION: Compiles the Linenoise library in Release mode using CMake and make. This command should be run after creating the build directory.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/linenoise-ng/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n(cd build && cmake -DCMAKE_BUILD_TYPE=Release .. && make)\n```\n\n----------------------------------------\n\nTITLE: Specializing make<T> for file_handle in C++\nDESCRIPTION: The snippet shows the specialization of the `make<T>` template for the `file_handle` type. It demonstrates the use of default member initializers and lists to initialize `make`, which can simplify the implementation before more complex custom constructors are needed.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/tutorial/advanced/constructors/metaprogrammg2.md#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\n{{% snippet \\\"constructors.cpp\\\" \\\"construct-specialisation\\\" %}}\n```\n\n----------------------------------------\n\nTITLE: Conditional V8 Source Inclusion\nDESCRIPTION: Conditionally includes ClusterV8Functions.cpp as a source file for the arango_cluster_engine library if USE_V8 is defined. This allows the library to integrate with the V8 JavaScript engine when enabled.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/ClusterEngine/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif (USE_V8) \n  target_sources(arango_cluster_engine PRIVATE\n    ClusterV8Functions.cpp)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Function Output Iterator Template in C++\nDESCRIPTION: Declares a class template for function_output_iterator, which wraps a unary function and calls it for each value assigned to the iterator, useful for applying a function to a range of values.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/facade-and-adaptor.rst#2025-04-22_snippet_9\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <class UnaryFunction>\nclass function_output_iterator;\n```\n\n----------------------------------------\n\nTITLE: Converting Constructor Declaration for basic_result\nDESCRIPTION: Implicit constructor that converts from type R to value_type, enabled when predicate::enable_value_converting_constructor<R> is true. The constructor propagates constexpr, triviality, and noexcept properties from the underlying operations.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/basic_result/implicit_value_converting_constructor.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nbasic_result(R &&)\n```\n\n----------------------------------------\n\nTITLE: Analyzing Test Results with examine_results.js\nDESCRIPTION: Commands for evaluating JSON test reports with different analyzers to extract information about test performance, system resource usage, and more.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/CONTRIBUTING.md#2025-04-22_snippet_38\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/examine_results.js -- 'yaml,locateLongRunning' --readFile out/UNITTEST_RESULT.json\n```\n\n----------------------------------------\n\nTITLE: Defining is_invocable Metafunction in C++\nDESCRIPTION: Implements the is_invocable metafunction that checks if a function F is callable with parameters Ts. It uses detail::can_be_called and detail::apply_f internally to perform the invocability check.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/is_invocable.hpp.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<class F, class... Ts>\nstruct is_invocable \n: detail::can_be_called<detail::apply_f, F, Ts...>\n{};\n```\n\n----------------------------------------\n\nTITLE: Defining Ada Snowball Package Structure\nDESCRIPTION: Template for generating an Ada child package for a Snowball stemming algorithm, defining the context type and stem procedure with a private implementation\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/snowball/ada/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Ada\nCODE:\n```\npackage Stemmer.<Algorithm-name> is\n   type Context_Type is new Stemmer.Context_Type with private;\n   procedure Stem (Z : in out Context_Type; Result : out Boolean);\nprivate\n   type Context_Type is new Stemmer.Context_Type with record\n      ...\n   end record;\nend Stemmer.<Algorithm-name>;\n```\n\n----------------------------------------\n\nTITLE: Declaring hook_outcome_construction Function in C++\nDESCRIPTION: Declares the hook_outcome_construction function, which is an ADL-discovered free function used by implicit constructors of basic_outcome. It has been removed in Outcome v2.2.0 unless legacy support is enabled.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/functions/hooks/hook_outcome_construction.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nvoid hook_outcome_construction(T *, U &&) noexcept\n```\n\n----------------------------------------\n\nTITLE: Creating Zip Iterator from Iterator Tuple in C++\nDESCRIPTION: Template function that constructs a zip_iterator instance from a tuple of iterators. Returns a zip_iterator object with its internal iterator tuple initialized to the provided tuple parameter.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/make_zip_iterator.rst#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate<typename IteratorTuple> \nzip_iterator<IteratorTuple> \nmake_zip_iterator(IteratorTuple t);\n```\n\n----------------------------------------\n\nTITLE: Installing System Dependencies for Boost.GIL\nDESCRIPTION: This snippet describes how to install necessary system dependencies for Boost.GIL image processing library. These dependencies are crucial for enabling support for various image formats.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/CONTRIBUTING.md#2025-04-22_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt-get install libjpeg-dev libpng-dev libtiff5-dev libraw-dev\n```\n\n----------------------------------------\n\nTITLE: Vim Editor Settings for C++ Doxygen Documentation\nDESCRIPTION: This comment sets specific Vim editor settings for working with C++ Doxygen documentation. It defines tab settings and specifies the file type as cpp.doxygen.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/doc/special_thanks.txt#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\n// vim: tabstop=4 expandtab shiftwidth=4 softtabstop=4 filetype=cpp.doxygen\n```\n\n----------------------------------------\n\nTITLE: Declaring Failure Function Signature in C++\nDESCRIPTION: Declares the signature of the `failure()` function, which returns appropriate type sugar for constructing an unsuccessful result or outcome. It typically returns a `failure_type<EC, EP = void>` with a decayed `T`.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/functions/failure.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nauto failure(T &&, ...);\n```\n\n----------------------------------------\n\nTITLE: Configuring Java-Optimized Output in Doxygen\nDESCRIPTION: Setting to optimize Doxygen output for Java or Python projects. When enabled, namespaces are presented as packages and qualified scopes appear differently. Default is NO.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/sort/doc/doxygen/sort_doxyfile.txt#2025-04-22_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nOPTIMIZE_OUTPUT_JAVA   = NO\n```\n\n----------------------------------------\n\nTITLE: Header File Globbing with Conditional Configuration Depends\nDESCRIPTION: Recursively finds header files with optional configuration dependency tracking for CMake 3.12 and newer\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/property_tree/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfile(GLOB_RECURSE BOOST_PROPERTY_TREE_HEADERS $<$<VERSION_GREATER_EQUAL:${CMAKE_VERSION},3.12>:CONFIGURE_DEPENDS>\n    include/boost/*.hpp\n    include/boost/*.ipp\n    include/boost/*.natvis\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Layout File in Doxygen\nDESCRIPTION: This option specifies a layout file which will be parsed by doxygen. The layout file controls the global structure of the generated output files in an output format independent way.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/sort/doc/doxygen/sort_doxyfile.txt#2025-04-22_snippet_59\n\nLANGUAGE: Doxygen\nCODE:\n```\n\"LAYOUT_FILE            = \"\n```\n\n----------------------------------------\n\nTITLE: Setting include directories\nDESCRIPTION: Specifies the include directory for the `boost_dynamic_bitset` target. This allows the compiler to find the header files for the library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/dynamic_bitset/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(boost_dynamic_bitset INTERFACE include)\n```\n\n----------------------------------------\n\nTITLE: Building libunwind with Intel Compiler (Version 8+)\nDESCRIPTION: Configure command for building libunwind with Intel's ICC compiler version 8 or later. Sets up appropriate compiler flags including optimization and linking options.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/libunwind/v1.7.2/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ ./configure CC=icc CFLAGS=\"-g -O3 -ip\" CXX=icc CCAS=gcc CCASFLAGS=-g \\\n    LDFLAGS=\"-L$PWD/src/.libs\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Testing and Installation for Boost.Nowide\nDESCRIPTION: Sets up testing directory if testing is enabled and configures installation targets when installation is requested.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/nowide/CMakeLists.txt#2025-04-22_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nif(BUILD_TESTING)\n  add_subdirectory(test)\nendif()\n\nif(Boost_NOWIDE_INSTALL)\n  include(InstallTargets)\n  install_targets(TARGETS boost_nowide NAMESPACE Boost CONFIG_FILE ${PROJECT_SOURCE_DIR}/Config.cmake.in)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Including BOOST_MPL_ASSERT_NOT Header in C++\nDESCRIPTION: Shows how to include the header file required for using the BOOST_MPL_ASSERT_NOT macro.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/ASSERT_NOT.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/assert.hpp>\n```\n\n----------------------------------------\n\nTITLE: Checking Out Boost.GIL Development Branch - Shell\nDESCRIPTION: Changes the directory to the Boost.GIL library submodule, checks out the develop branch, and updates it to ensure it's up to date with the latest changes.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/CONTRIBUTING.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncd libs/gil\n    git checkout develop\n    git branch -vv\n    git pull origin develop\n```\n\n----------------------------------------\n\nTITLE: Extending Point-free Print Function with Newlines in C++\nDESCRIPTION: Enhanced version of the point-free print function that adds a newline after each item. Uses function composition with the flow adaptor.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/src/point_free.md#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_HOF_STATIC_FUNCTION(print_lines) = proj(flow(simple_print, _ << std::integral_constant<char, '\\n'>{}));\n```\n\n----------------------------------------\n\nTITLE: Terminate Policy for Unhandled Result States\nDESCRIPTION: A policy that calls std::terminate() when a missing value, error, or exception is observed. Default when error or exception types are set to void.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/tutorial/essential/no-value/builtin.md#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nEC = void or EP = void\n```\n\n----------------------------------------\n\nTITLE: Compilation Warning Fixes and Websocketpp Comparison\nDESCRIPTION: This entry documents the fixing of compilation warnings and the addition of a websocketpp comparison to the HTML documentation, improving the library's code quality and providing comparative information for users.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/beast/CHANGELOG.md#2025-04-22_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: Manually Inspecting a result<T> Object in C++\nDESCRIPTION: Code demonstrating how to manually check if a result object contains a value or an error, and handle each case accordingly.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/_index.md#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\noutcome::result<int> r = convert(\"42\");\nif(r) {\n  // use r.value()\n  int n = r.value();\n}\nelse {\n  // use r.error()\n  std::error_code ec = r.error();\n}\n```\n\n----------------------------------------\n\nTITLE: Linking Dependencies for Vocbase API\nDESCRIPTION: Specifies library dependencies for the vocbase API, including public dependencies (velocypack, fmt) and private dependencies (arango, arango_replication2).\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/VocBase/Properties/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(arango_vocbase_api PUBLIC\n        velocypack\n        fmt\n\n        # Required for Result / ResultT\n        PRIVATE arango\n\n        # Required for immer, exposed by the AgencySpecification\n        PRIVATE arango_replication2\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenSSL for Boost Beast\nDESCRIPTION: Sets up OpenSSL dependency for Boost Beast, including special handling for macOS using Homebrew.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/beast/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif (APPLE AND NOT DEFINED ENV{OPENSSL_ROOT_DIR})\n  find_program(HOMEBREW brew)\n  if (NOT HOMEBREW STREQUAL \"HOMEBREW-NOTFOUND\")\n    execute_process(COMMAND brew --prefix openssl\n      OUTPUT_VARIABLE OPENSSL_ROOT_DIR\n      OUTPUT_STRIP_TRAILING_WHITESPACE)\n  endif()\nendif()\n\nfind_package(OpenSSL)\nif (NOT MSVC)\n    link_libraries(${OPENSSL_LIBRARIES})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents in reStructuredText for ArangoDB Reference\nDESCRIPTION: This snippet defines a table of contents for the ArangoDB reference documentation using reStructuredText syntax. It specifies a maximum depth of 2 and includes links to various component sections.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/src/reference.rst#2025-04-22_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n    :maxdepth: 2\n\n    adaptors\n    decorators\n    functions\n    traits\n    utilities\n```\n\n----------------------------------------\n\nTITLE: Parsing 2D Coordinate Points\nDESCRIPTION: A dataset of coordinates representing different points in a two-dimensional space, with values ranging from -5 to 5 on both x and y axes\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/polygon/example/input_data/primary/primary_014.txt#2025-04-22_snippet_0\n\nLANGUAGE: plain text\nCODE:\n```\n12\n0 5\n0 -5\n-4 -3\n4 -3\n4 3\n-4 3\n3 -4\n-3 4\n-3 -4\n3 4\n-5 0\n5 0\n```\n\n----------------------------------------\n\nTITLE: Include Directories for arango_replication2\nDESCRIPTION: This command specifies the include directories required for compiling `arango_replication2`. It includes the `arangod` directory and the enterprise include directory, allowing access to necessary header files.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/Replication2/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(arango_replication2 PRIVATE\n        \"${PROJECT_SOURCE_DIR}/arangod\"\n        \"${PROJECT_SOURCE_DIR}/${ENTERPRISE_INCLUDE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Defining EqualityComparable Concept - C++\nDESCRIPTION: This snippet establishes the EqualityComparable concept which mandates that a type T can be compared for equality or inequality with another type U.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/concepts.rst.txt#2025-04-22_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nauto concept EqualityComparable<typename T, typename U = T>\n{\n    bool operator==(T x, U y);\n    bool operator!=(T x, U y) { return !(x==y); }\n};\n```\n\n----------------------------------------\n\nTITLE: Declaring Static Variables for Pack Operations in C++\nDESCRIPTION: Declares static variables for pack operations using BOOST_HOF_DECLARE_STATIC_VAR macro. This allows for convenient use of pack operations as function objects.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/pack.hpp.txt#2025-04-22_snippet_6\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_HOF_DECLARE_STATIC_VAR(pack_basic, detail::pack_basic_f);\nBOOST_DECLARE_STATIC_VAR(pack_forward, detail::pack_forward_f);\nBOOST_HOF_DECLARE_STATIC_VAR(pack, detail::pack_f);\n\nBOOST_HOF_DECLARE_STATIC_VAR(pack_join, detail::pack_join_f);\n```\n\n----------------------------------------\n\nTITLE: Including set_c Headers in C++\nDESCRIPTION: Shows the header includes needed for using set_c in both variadic and numbered forms.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/set_c.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/set_c.hpp>\n#include <boost/mpl/set/set_n_c.hpp>\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes to Forked Repository - Shell\nDESCRIPTION: Shows how to push changes made in the feature branch to the user's forked repository on GitHub, preparing it for submission as a pull request.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/CONTRIBUTING.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ncd libs/gil\n    git checkout feature/foo\n    git push <username> feature/foo\n```\n\n----------------------------------------\n\nTITLE: Binary Operators Implementation\nDESCRIPTION: Macro-based implementation of binary operators for placeholders including arithmetic, comparison, and logical operators\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/placeholders.hpp.txt#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#define BOOST_HOF_FOREACH_BINARY_OP(m) \\\n    m(+, add) \\\n    m(-, subtract) \\\n    m(*, multiply) \\\n    m(/, divide) \\\n    m(%, remainder) \\\n    m(>>, shift_right) \\\n    m(<<, shift_left) \\\n    m(>, greater_than) \\\n    m(<, less_than) \\\n    m(<=, less_than_equal) \\\n    m(>=, greater_than_equal) \\\n    m(==, equal) \\\n    m(!=, not_equal) \\\n    m(&, bit_and) \\\n    m(^, xor_) \\\n    m(|, bit_or) \\\n    m(&&, and_) \\\n    m(||, or_)\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Noncharacter_Code_Point Ranges\nDESCRIPTION: Lists Unicode code points classified as Noncharacter_Code_Point with their corresponding character classes. These are code points permanently reserved for internal use and should never be used in open interchange. The list contains 66 total code points.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/spirit/workbench/unicode/PropList.txt#2025-04-22_snippet_15\n\nLANGUAGE: unicode\nCODE:\n```\nFDD0..FDEF    ; Noncharacter_Code_Point # Cn  [32] <noncharacter-FDD0>..<noncharacter-FDEF>\nFFFE..FFFF    ; Noncharacter_Code_Point # Cn   [2] <noncharacter-FFFE>..<noncharacter-FFFF>\n1FFFE..1FFFF  ; Noncharacter_Code_Point # Cn   [2] <noncharacter-1FFFE>..<noncharacter-1FFFF>\n2FFFE..2FFFF  ; Noncharacter_Code_Point # Cn   [2] <noncharacter-2FFFE>..<noncharacter-2FFFF>\n3FFFE..3FFFF  ; Noncharacter_Code_Point # Cn   [2] <noncharacter-3FFFE>..<noncharacter-3FFFF>\n4FFFE..4FFFF  ; Noncharacter_Code_Point # Cn   [2] <noncharacter-4FFFE>..<noncharacter-4FFFF>\n5FFFE..5FFFF  ; Noncharacter_Code_Point # Cn   [2] <noncharacter-5FFFE>..<noncharacter-5FFFF>\n6FFFE..6FFFF  ; Noncharacter_Code_Point # Cn   [2] <noncharacter-6FFFE>..<noncharacter-6FFFF>\n7FFFE..7FFFF  ; Noncharacter_Code_Point # Cn   [2] <noncharacter-7FFFE>..<noncharacter-7FFFF>\n8FFFE..8FFFF  ; Noncharacter_Code_Point # Cn   [2] <noncharacter-8FFFE>..<noncharacter-8FFFF>\n9FFFE..9FFFF  ; Noncharacter_Code_Point # Cn   [2] <noncharacter-9FFFE>..<noncharacter-9FFFF>\nAFFFE..AFFFF  ; Noncharacter_Code_Point # Cn   [2] <noncharacter-AFFFE>..<noncharacter-AFFFF>\nBFFFE..BFFFF  ; Noncharacter_Code_Point # Cn   [2] <noncharacter-BFFFE>..<noncharacter-BFFFF>\nCFFFE..CFFFF  ; Noncharacter_Code_Point # Cn   [2] <noncharacter-CFFFE>..<noncharacter-CFFFF>\nDFFFE..DFFFF  ; Noncharacter_Code_Point # Cn   [2] <noncharacter-DFFFE>..<noncharacter-DFFFF>\nEFFFE..EFFFF  ; Noncharacter_Code_Point # Cn   [2] <noncharacter-EFFFE>..<noncharacter-EFFFF>\nFFFFE..FFFFF  ; Noncharacter_Code_Point # Cn   [2] <noncharacter-FFFFE>..<noncharacter-FFFFF>\n10FFFE..10FFFF; Noncharacter_Code_Point # Cn   [2] <noncharacter-10FFFE>..<noncharacter-10FFFF>\n\n# Total code points: 66\n```\n\n----------------------------------------\n\nTITLE: Creating External Project for libunwind with Configure Options in CMake\nDESCRIPTION: Defines an external project for building libunwind with specific configuration options. It disables many features to create a minimal build, avoids C++ exceptions to prevent duplicate symbols, and specifies build and install commands.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/libunwind/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n  # note: in the following configure, turning on cxx exceptions will cause duplicate\n  # symbols (_Unwind_Resume and such) when linking, as some libc++ implementations\n  # also use it internally\n  ExternalProject_Add(\n    libunwind_build\n    SOURCE_DIR\n      ${LIBUNWIND_BINARY_DIR}\n    PREFIX\n      ${LIBUNWIND_BINARY_DIR}\n    CONFIGURE_COMMAND\n      \"${LIBUNWIND_SOURCE_DIR}/configure\" CC=${LIBUNWIND_CC_TMP}\n                  CXX=${LIBUNWIND_CXX_TMP}\n                  CFLAGS=${LIBUNWIND_C_FLAGS}\n                  CXXFLAGS=${LIBUNWIND_CXX_FLAGS}\n                  --prefix=${CMAKE_CURRENT_BINARY_DIR}\n                  --disable-shared --enable-static --disable-tests --disable-documentation --disable-per-thread-cache --disable-coredump --disable-ptrace --disable-setjmp --disable-debug --enable-debug-frame --disable-zlibdebuginfo --disable-minidebuginfo --disable-cxx-exceptions --disable-weak-backtrace --disable-unwind-header\n    BUILD_COMMAND\n      $(MAKE)\n    BUILD_IN_SOURCE\n      1\n    INSTALL_COMMAND\n      $(MAKE) install prefix=${CMAKE_CURRENT_BINARY_DIR} DESTDIR=${CMAKE_CURRENT_BINARY_DIR}\n    STEP_TARGETS\n      ${LIBUNWIND_LIB} libunwind\n  )\n```\n\n----------------------------------------\n\nTITLE: Implementing Iterator Distance Calculation in C++\nDESCRIPTION: Implementation of the iterator difference operation that calculates the distance between two random access iterators, handling both forward and backward distances.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/new-iter-concepts.rst#2025-04-22_snippet_11\n\nLANGUAGE: cpp\nCODE:\n```\na < b ?  distance(a,b) : -distance(b,a)\n```\n\n----------------------------------------\n\nTITLE: Defining BOOST_MPL_LIMIT_STRING_SIZE Macro in C++\nDESCRIPTION: Shows the definition of the BOOST_MPL_LIMIT_STRING_SIZE macro which controls the maximum arity of string's variadic forms in Boost MPL, with a default value of 32.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/LIMIT_STRING_SIZE.rst#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n#if !defined(BOOST_MPL_LIMIT_STRING_SIZE)\n#   define BOOST_MPL_LIMIT_STRING_SIZE \\\n            |idic| \\\n/**/\n#endif\n```\n\n----------------------------------------\n\nTITLE: Declaring reverse_partition Template in C++\nDESCRIPTION: Defines the template structure for the reverse_partition algorithm. It takes a sequence, a predicate, and optional input inserters as template parameters.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/reverse_partition.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      typename Seq\n    , typename Pred\n    , typename In1 = |unspecified|\n    , typename In2 = |unspecified|\n    >\nstruct reverse_partition\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementation of BOOST_MPL_AUX_LAMBDA_SUPPORT in a Metafunction Template\nDESCRIPTION: Example showing how to use BOOST_MPL_AUX_LAMBDA_SUPPORT within a metafunction template. This demonstrates the proper placement of the macro at the end of the metafunction scope.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/AUX_LAMBDA_SUPPORT.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntemplate< typename A1, ... typename An > struct fun\n{\n    // ...\n    \n    BOOST_MPL_AUX_LAMBDA_SUPPORT(n, fun, (A1, ... An))\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Hugo Front Matter for Tutorial Page\nDESCRIPTION: Sets up the Hugo front matter metadata for the Tutorial section page, including the title and navigation weight. Uses the children shortcode to display nested child pages.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/tutorial/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n+++\ntitle = \"Tutorial\"\nweight = 10\n+++\n```\n\n----------------------------------------\n\nTITLE: Extending Variadic Print Function to Print Lines\nDESCRIPTION: This snippet demonstrates how to extend the variadic print function to print each item on a new line using Boost.HOF's flow adaptor.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/doc/src/point_free.md.txt#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_HOF_STATIC_FUNCTION(print_lines) = proj(flow(simple_print, _ << std::integral_constant<char, '\\n'>{}));\n```\n\n----------------------------------------\n\nTITLE: Traditional ASIO Async Operation Example\nDESCRIPTION: Example showing traditional ASIO asynchronous operation using completion handlers.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/recipes/asio-integration-1-70.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nboost::asio::async_read_some(\n  socket_,\n  boost::asio::buffer(buffer_),\n  [](const boost::system::error_code &ec, size_t bytes_transferred) {\n    // ...\n  });\n```\n\n----------------------------------------\n\nTITLE: Forcing VPack to JSON Downgrade for Debugging\nDESCRIPTION: Command to force ArangoDB to use JSON instead of VPack for network communication, making tcpdump output more readable for debugging.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/CONTRIBUTING.md#2025-04-22_snippet_36\n\nLANGUAGE: bash\nCODE:\n```\narangosh --server.force-json true --server.endpoint ...\n```\n\n----------------------------------------\n\nTITLE: Color Space Conversion\nDESCRIPTION: Demonstrates the color_convert algorithm for converting pixels between different color spaces and channel types\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/pixel.rst.txt#2025-04-22_snippet_11\n\nLANGUAGE: cpp\nCODE:\n```\nrgb8_pixel_t red_in_rgb8(255,0,0);\ncmyk16_pixel_t red_in_cmyk16;\ncolor_convert(red_in_rgb8,red_in_cmyk16)\n```\n\n----------------------------------------\n\nTITLE: Accessing Error Reference with Wide Contract\nDESCRIPTION: Method to retrieve a reference to the stored error, invoking wide error checking before access. Supports both mutable and const access depending on error type.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/basic_outcome/error_lvalue.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nerror_type &error()\n```\n\n----------------------------------------\n\nTITLE: Defining MutableRandomAccess2DLocatorConcept in C++\nDESCRIPTION: This concept combines the requirements of MutableRandomAccessNDLocatorConcept and RandomAccess2DLocatorConcept, providing a 2D locator that allows modification of the underlying data.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/pixel_locator.rst.txt#2025-04-22_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\n\"concept MutableRandomAccess2DLocatorConcept<RandomAccess2DLocatorConcept Loc>\\n      : MutableRandomAccessNDLocatorConcept<Loc> {};\"\n```\n\n----------------------------------------\n\nTITLE: Traditional Make Tuple Implementation in C++\nDESCRIPTION: Classic implementation of a make_tuple function that handles perfect forwarding and type unwrapping for tuple construction.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/src/example_polymorphic_constructors.md#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <class... Types>\nstd::tuple<typename unwrap_ref_decay<Types>::type...> make_tuple(Types&&... args)\n{\n    return std::tuple<typename unwrap_ref_decay<Types>::type...>(std::forward<Types>(args)...);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for arango_v8server\nDESCRIPTION: Configures the private include directories for the arango_v8server library, pointing to the arangod directory and any enterprise-specific include directories if applicable.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/V8Server/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(arango_v8server PRIVATE\n  \"${PROJECT_SOURCE_DIR}/arangod\"\n  \"${PROJECT_SOURCE_DIR}/${ENTERPRISE_INCLUDE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Creating ArangoRestore Executable\nDESCRIPTION: Defines the ArangoRestore executable target and configures its source files and library dependencies.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/client-tools/Restore/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(${BIN_ARANGORESTORE}\n  ${ProductVersionFiles_arangorestore}\n  arangorestore.cpp\n)\n\ntarget_link_libraries(${BIN_ARANGORESTORE}\n  arango_restore\n  ${SYSTEM_LIBRARIES}\n  boost_system\n  boost_boost\n  arango_shell\n  clienttools_utils\n)\n```\n\n----------------------------------------\n\nTITLE: Invoking a Nullary Metafunction Class with Empty Angle Brackets in C++\nDESCRIPTION: Shows an alternative syntax for invoking a nullary metafunction class, using empty angle brackets. This form is equivalent to the previous one for nullary metafunction classes.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/MetafunctionClass.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ntypedef f::apply<>::type x;\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for Serialization Tests\nDESCRIPTION: Sets up the CMake project with minimum required version, compiler policies, and project name.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/serialization/CMake/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.0)\n\nif (POLICY CMP0054)\n  cmake_policy (SET CMP0054 NEW)\nendif (POLICY CMP0054)\n\nif (POLICY CMP0063)\n  cmake_policy (SET CMP0063 NEW)\nendif (POLICY CMP0063)\n\nproject(\"serialization\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Subtraction Assignment Operator for Random Access Traversal Iterator in C++\nDESCRIPTION: Implementation of the -= operator for Random Access Traversal Iterators that utilizes the += operator with a negated value to move the iterator backward by n positions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/new-iter-concepts.rst#2025-04-22_snippet_9\n\nLANGUAGE: cpp\nCODE:\n```\nreturn r += -n\n```\n\n----------------------------------------\n\nTITLE: Basic Result Template Declaration C++\nDESCRIPTION: Template declaration defining a concept or SFINAE constraint for types convertible to basic_result. Requires value_type, error_type and no_value_policy_type member typedefs and inheritance from basic_result.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/concepts/basic_result.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nbasic_result<T>\n```\n\n----------------------------------------\n\nTITLE: Configuring Enabled Sections in Doxygen\nDESCRIPTION: This option can be used to enable conditional documentation sections marked by \\if ... \\endif and \\cond ... \\endcond blocks.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/sort/doc/doxygen/sort_doxyfile.txt#2025-04-22_snippet_53\n\nLANGUAGE: Doxygen\nCODE:\n```\n\"ENABLED_SECTIONS       = \"\n```\n\n----------------------------------------\n\nTITLE: Including the back Metafunction Header in C++\nDESCRIPTION: The include directive required to use the 'back' metafunction in C++ code.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/back.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/back.hpp>\n```\n\n----------------------------------------\n\nTITLE: Adding Test Subdirectory\nDESCRIPTION: This snippet conditionally adds the 'test' subdirectory to the build process if testing is enabled (BUILD_TESTING is true) and if the CMakeLists.txt file exists within the test directory. This allows the project to include unit tests.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/process/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n\"if(BUILD_TESTING AND EXISTS \\\"${CMAKE_CURRENT_SOURCE_DIR}/test/CMakeLists.txt\\\")\n\n  add_subdirectory(test)\n\nendif()\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost.Iostreams Optional Dependencies in CMake\nDESCRIPTION: Applies the boost_iostreams_option function to configure optional support for ZLIB, BZip2, LZMA, and Zstd libraries.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iostreams/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nboost_iostreams_option(BOOST_IOSTREAMS_ENABLE_ZLIB \"Boost.Iostreams: Enable ZLIB support\" ZLIB \"\" ZLIB_FOUND ZLIB::ZLIB src/zlib.cpp src/gzip.cpp)\nboost_iostreams_option(BOOST_IOSTREAMS_ENABLE_BZIP2 \"Boost.Iostreams: Enable BZip2 support\" BZip2 \"\" BZIP2_FOUND BZip2::BZip2 src/bzip2.cpp)\nboost_iostreams_option(BOOST_IOSTREAMS_ENABLE_LZMA \"Boost.Iostreams: Enable LZMA support\" LibLZMA \"\" LIBLZMA_FOUND LibLZMA::LibLZMA src/lzma.cpp)\nboost_iostreams_option(BOOST_IOSTREAMS_ENABLE_ZSTD \"Boost.Iostreams: Enable Zstd support\" zstd \"1.0\" zstd_FOUND zstd::libzstd_shared src/zstd.cpp)\n```\n\n----------------------------------------\n\nTITLE: Creating Boost Headers Directory - Shell\nDESCRIPTION: Creates a virtual directory with all Boost headers linked from the individual modular Boost libraries, which is crucial for running tests.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/CONTRIBUTING.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n./b2 headers\n```\n\n----------------------------------------\n\nTITLE: Using BOOST_MPL_LIMIT_STRING_SIZE in C++\nDESCRIPTION: Demonstrates how to override the default BOOST_MPL_LIMIT_STRING_SIZE limit by defining it before including any Boost MPL headers, setting it to 8 in this example.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/LIMIT_STRING_SIZE.rst#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\n#define BOOST_MPL_LIMIT_STRING_SIZE 8\n#include <boost/mpl/string.hpp>\n\nusing namespace boost::mpl;\n\ntypedef string<'a'> s_1;\ntypedef string<'abcd','efgh'> s_8;\n// typedef string<'abcd','efgh','i'> s_9; // error!\n```\n\n----------------------------------------\n\nTITLE: Including modulus Metafunction Headers in C++\nDESCRIPTION: Header files required to use the modulus metafunction in C++ code.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/modulus.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/modulus.hpp>\n#include <boost/mpl/arithmetic.hpp>\n```\n\n----------------------------------------\n\nTITLE: Clearing Out-Edges in Adjacency List (C++)\nDESCRIPTION: Removes all out-edges from a specified vertex in an adjacency list. The vertex remains in the vertex set. This operation is not applicable to undirected graphs.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/distributed_adjacency_list.rst#2025-04-22_snippet_21\n\nLANGUAGE: C++\nCODE:\n```\nvoid clear_out_edges(vertex_descriptor u, adjacency_list& g);\n```\n\n----------------------------------------\n\nTITLE: Using BOOST_OUTCOME_CO_TRY_FAILURE_LIKELY in C++ Coroutines\nDESCRIPTION: Similar to BOOST_OUTCOME_CO_TRYV_FAILURE_LIKELY, but allows setting a variable if two or more macro arguments are present. It's used for non-void result types and is optimized for failure-likely scenarios.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/macros/co_tryv_failure_likely.md#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_OUTCOME_CO_TRY_FAILURE_LIKELY(expr)\n```\n\n----------------------------------------\n\nTITLE: Invoking Static Use of File Handles in C++\nDESCRIPTION: Demonstrates a traditional approach to constructing file handles in C++, where static methods are used to create instances. It uses simple syntax and serves as a baseline for comparison with more advanced techniques. The inputs are straightforward arguments for file handle construction, and outputs involve initialized file handle objects.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/tutorial/advanced/constructors/metaprogrammg1.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n{{% snippet \"constructors.cpp\" \"static-use\" %}}\n```\n\n----------------------------------------\n\nTITLE: Running Boost.Build for GIL Tests\nDESCRIPTION: Displays how to execute Boost.Build for running GIL tests using the previously installed GIL dependencies on Windows, specifying the x64 address model. Replace 'address-model=64' with 'address-model=32' for 32-bit targets. Requires b2.exe from Boost library installations.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/example/b2/README.md#2025-04-22_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nC:\\boost-root> b2.exe toolset=msvc-14.2 address-model=64 libs/gil/test/extension/io//simple\nPerforming configuration checks\n...\n    - libjpeg                  : yes\n    - zlib                     : yes\n    - libpng                   : yes\n    - libtiff                  : yes\n```\n\n----------------------------------------\n\nTITLE: Transform Iterator Example Output\nDESCRIPTION: Shows the output of running the transform iterator example, displaying the results of multiplying array elements by 2 and adding 4 to each element.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/transform_iterator_eg.rst#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nmultiplying the array by 2:\n2 4 6 8 10 12 14 16 \nadding 4 to each element in the array:\n5 6 7 8 9 10 11 12\n```\n\n----------------------------------------\n\nTITLE: Declaration of MPL begin Metafunction in C++\nDESCRIPTION: Template metafunction declaration that returns an iterator to the first element of a sequence. For Forward Sequences, it returns an iterator to the first element; otherwise, it returns void_.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/begin.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      typename X\n    >\nstruct begin\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Metafunction Concept - C++\nDESCRIPTION: This snippet defines the Metafunction concept which serves as a template for types that can provide a 'type' associated with them.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/concepts.rst.txt#2025-04-22_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\nauto concept Metafunction<typename T>\n{\n    typename type;\n};\n```\n\n----------------------------------------\n\nTITLE: Running Clang-Tidy Parallel Refactoring\nDESCRIPTION: Shell command to run clang-tidy for applying code modernization checks across Boost.GIL library source code\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/CONTRIBUTING.md#2025-04-22_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\nrun-clang-tidy.py -p=_build -header-filter='boost\\/gil\\/.*' -checks='-*,modernize-use-using' -fix > cl.log 2>&1\n```\n\n----------------------------------------\n\nTITLE: Standard C++ Type Traits for C Compatibility\nDESCRIPTION: Code references for the two required type traits that must be true for C++-to-C compatible types: standard layout and trivially copyable.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/experimental/c-api/limitations.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nstd::is_standard_layout_v<T>\n```\n\nLANGUAGE: C++\nCODE:\n```\nstd::is_polymorphic_v<T>\n```\n\n----------------------------------------\n\nTITLE: Adding V8-Specific Test Sources in CMake\nDESCRIPTION: Conditionally adds V8-specific test sources when V8 JavaScript engine is enabled in the build configuration.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/CMakeLists.txt#2025-04-22_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nif (USE_V8)\n  set(ARANGODB_TESTS_SOURCES ${ARANGODB_TESTS_SOURCES}\n    Scheduler/ThreadPoolTest.cpp\n    V8Server/V8AnalyzersTest.cpp\n    V8Server/V8UsersTest.cpp\n    V8Server/V8ViewsTest.cpp)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Compiler Warnings and Flags for MSVC\nDESCRIPTION: Sets compiler warning levels and flags specifically for Microsoft Visual Studio Compiler, including disabling exceptions and RTTI.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/snappy/snappy-1.1.9/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(MSVC)\n  # Use the highest warning level for Visual Studio.\n  set(CMAKE_CXX_WARNING_LEVEL 4)\n  if(CMAKE_CXX_FLAGS MATCHES \"/W[0-4]\")\n    string(REGEX REPLACE \"/W[0-4]\" \"/W4\" CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS}\")\n  else(CMAKE_CXX_FLAGS MATCHES \"/W[0-4]\")\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /W4\")\n  endif(CMAKE_CXX_FLAGS MATCHES \"/W[0-4]\")\n\n  # Disable C++ exceptions.\n  string(REGEX REPLACE \"/EH[a-z]+\" \"\" CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS}\")\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /EHs-c-\")\n  add_definitions(-D_HAS_EXCEPTIONS=0)\n\n  # Mixing -fno-rtti with -frtti (the default for C++) leads to unwanted\n  # consequences, in particular with exception handling. Since the snappy\n  # developers will not allow fixes in their repository, we fix it here.\n  # Disable RTTI.\n  #string(REGEX REPLACE \"/GR\" \"\" CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS}\")\n  #set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /GR-\")\nelse(MSVC)\n```\n\n----------------------------------------\n\nTITLE: Declaring empty_sequence struct in C++\nDESCRIPTION: Defines the empty_sequence struct, which represents a sequence with no elements. It is part of the Boost MPL library and behaves as a Random Access Sequence.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/empty_sequence.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nstruct empty_sequence\n{\n    // |unspecified|\n    // |...|\n};\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Random Access Iterator Type Expression for prior\nDESCRIPTION: Shows the type expression for the prior operation on a Random Access Iterator, which returns another Random Access Iterator in amortized constant time.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/RandomAccessIterator.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nprior<i>::type\n```\n\n----------------------------------------\n\nTITLE: Alternative Date Difference Syntax in C++\nDESCRIPTION: Demonstrates an alternative syntax for date calculations with less operator overloading.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/doc/dates_times_timezones.txt#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\n    date_time now;\n    cout << \" There are \" << period::day(now + period::month(2) - now) << \" days \"\n            \"between \" << as::date << now << \" and \" << now + period::month(2) << endl;\n```\n\n----------------------------------------\n\nTITLE: Cloning Boost Project with Regex Submodule\nDESCRIPTION: Commands to clone the entire Boost project, which includes Boost Regex as a submodule. This is necessary for development and testing of the Regex library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/regex/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/boostorg/boost\ncd boost\ngit submodule update --init\n```\n\n----------------------------------------\n\nTITLE: Declaring Error Type Observer with Wide Contract\nDESCRIPTION: Method to access stored error with optional policy-based pre-check, ensuring safe error observation without undefined behavior\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/basic_outcome/error_rvalue.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nerror_type &&error() &&\n```\n\n----------------------------------------\n\nTITLE: Defining Serialization Library Target\nDESCRIPTION: Creates the 'serialization' library target and specifies its source files and include directories.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/serialization/CMake/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(serialization\n  ../src/archive_exception.cpp\n  ../src/basic_archive.cpp\n  # ... (other source files)\n  ../src/basic_xml_grammar.ipp\n)\ntarget_include_directories(serialization PUBLIC ${Boost_INCLUDE_DIR})\n```\n\n----------------------------------------\n\nTITLE: Defining reverse_copy Template in C++\nDESCRIPTION: Defines the reverse_copy template struct that returns a reversed copy of the original sequence. It takes a Sequence and an optional Inserter as template parameters.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/reverse_copy.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      typename Sequence\n    , typename In = |unspecified|\n    >\nstruct reverse_copy\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring All Narrow Policy for Result Handling\nDESCRIPTION: A policy that generates optimal code by creating undefined behavior when an invalid observation occurs. Useful for error detection tools but requires careful implementation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/tutorial/essential/no-value/builtin.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nunchecked<T, E = varies>\n```\n\n----------------------------------------\n\nTITLE: Conditional Element Removal in Pointer Containers\nDESCRIPTION: Removes elements from the container based on a predicate function applied to each element\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/ptr_sequence_adapter.rst#2025-04-22_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\ntemplate< class Pred > void erase_if( Pred pred );\ntemplate< class Pred > void erase_if( iterator begin, iterator end, Pred pred );\n```\n\n----------------------------------------\n\nTITLE: Implementing Addition Operator for Random Access Traversal Iterator in C++\nDESCRIPTION: Implementation of the + operator for Random Access Traversal Iterators that returns a new iterator advanced by n positions, using the += operator internally.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/new-iter-concepts.rst#2025-04-22_snippet_8\n\nLANGUAGE: cpp\nCODE:\n```\n{ X tmp = a; return tmp += n; }\n```\n\n----------------------------------------\n\nTITLE: Hugo Shortcode for Displaying Child Pages in ArangoDB Documentation\nDESCRIPTION: A Hugo shortcode that displays child pages with descriptions to a depth of 2 levels. This is used for organizing the recipes section of the ArangoDB documentation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/recipes/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: hugo\nCODE:\n```\n{{% children description=\"true\" depth=\"2\" %}}\n```\n\n----------------------------------------\n\nTITLE: Using reverse_replace algorithm in C++\nDESCRIPTION: Example usage of the reverse_replace algorithm. It demonstrates replacing float with double in a reversed sequence of types.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/reverse_replace.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntypedef vector<int,float,char,float,float,double> types;\ntypedef vector<double,double,double,char,double,int> expected;\ntypedef reverse_replace< types,float,double >::type result;\n\nBOOST_MPL_ASSERT(( equal< result,expected > ));\n```\n\n----------------------------------------\n\nTITLE: Iterator Traits Template Declarations for C++\nDESCRIPTION: Declaration of iterator traits templates used to determine iterator characteristics. Includes is_readable_iterator and iterator_traversal templates.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/new-iter-concepts.rst#2025-04-22_snippet_13\n\nLANGUAGE: cpp\nCODE:\n```\n// lib.iterator.traits, traits and tags\ntemplate <class Iterator> struct is_readable_iterator;\ntemplate <class Iterator> struct iterator_traversal;\n```\n\n----------------------------------------\n\nTITLE: Implementing Variadic Print Function using Traditional C++ Approach\nDESCRIPTION: This snippet shows a traditional C++ implementation of a variadic print function using recursive template instantiation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/doc/src/point_free.md.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n// Base case\nvoid print()\n{}\n\ntemplate<class T, class... Ts>\nvoid print(const T& x, const Ts&... xs)\n{\n    std::cout << x;\n    print(xs...);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing PHPUnit for PHP Driver Tests\nDESCRIPTION: Commands to download and install PHPUnit 6.5.14 for PHP driver testing.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/CONTRIBUTING.md#2025-04-22_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\nwget \"https://phar.phpunit.de/phpunit-6.5.14.phar\"\nmv phpunit-6.5.14.phar /usr/bin/phpunit\nchmod a+x /usr/bin/phpunit\n```\n\n----------------------------------------\n\nTITLE: Implementing Copy Constructor for basic_outcome\nDESCRIPTION: Copy constructor that requires copy constructors for value_type, error_type, and exception_type. Propagates underlying operation characteristics and follows standard struct copy semantics.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/basic_outcome/copy_constructor.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nbasic_outcome(const basic_outcome &)\n```\n\n----------------------------------------\n\nTITLE: Configuring Bug List Generation in Doxygen\nDESCRIPTION: This option enables or disables the generation of the bug list, created by \\bug commands. Setting it to YES enables the list.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/sort/doc/doxygen/sort_doxyfile.txt#2025-04-22_snippet_51\n\nLANGUAGE: Doxygen\nCODE:\n```\n\"GENERATE_BUGLIST       = YES\"\n```\n\n----------------------------------------\n\nTITLE: Building Zlib with Visual Studio 2013\nDESCRIPTION: Instructions for building Zlib using Microsoft Visual C++ 2013. Decompressing the current Zlib files is required prior to opening the solution.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/zlib/zlib-1.2.13/contrib/vstudio/readme.txt#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n- Decompress current zlib, including all contrib/* files\n- Open contrib\\vstudio\\vc12\\zlibvc.sln with Microsoft Visual C++ 2013\n```\n\n----------------------------------------\n\nTITLE: Defining Void Pointer Indirect Comparison Function Template in C++\nDESCRIPTION: This snippet defines the `void_ptr_indirect_fun` class, which provides similar functionality for comparisons involving raw void pointers, enabling indirect comparisons for raw pointers of any type without casting before comparison.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/indirect_fun.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ntemplate< class Fun, class Arg1, class Arg2 = Arg1 >\nstruct void_ptr_indirect_fun\n{\n    void_ptr_indirect_fun() : fun(Fun())\n    { }\n    \n    void_ptr_indirect_fun( Fun f ) : fun(f)\n    { }\n    \n    typename result_of< Fun( Arg1 ) >::type \n    operator()( const void* r ) const\n    { \n        return fun( * static_cast<const Arg1*>( r ) );\n    }\n    \n    typename result_of< Fun( Arg1, Arg2 ) >::type \n    operator()( const void* l, const void* r ) const\n    { \n        return fun( * static_cast<const Arg1*>( l ), * static_cast<const Arg2*>( r ) );\n    }\n    \nprivate:\n    Fun fun;   \n};\n\ntemplate< class Fun, class Arg >\ninline void_ptr_indirect_fun<Fun,Arg> \nmake_void_ptr_indirect_fun( Fun f )\n{\n    return void_ptr_indirect_fun<Fun,Arg>( f );\n}\n```\n\n----------------------------------------\n\nTITLE: Implicit Error-from-Failure-Type Copy Constructor\nDESCRIPTION: Copy constructor that handles conversion of failure types with specific type constraints. Provides disambiguation for error type construction, with special handling when T is void. Calls an internal copy construction hook and supports constexpr, triviality, and noexcept semantics.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/basic_result/implicit_failure_make_exception_ptr_copy_constructor.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nbasic_result(const failure_type<T> &)\n```\n\n----------------------------------------\n\nTITLE: Fetching V8 Source Code\nDESCRIPTION: Procedure for checking out V8 repository and specific version using depot_tools\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/v8-build/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmkdir ~\\/v8\\ncd ~\\/v8\\nfetch v8\\ncd v8\n```\n\n----------------------------------------\n\nTITLE: Error Neutral Function Example\nDESCRIPTION: Example function showing error propagation pattern using special return values\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/leaf/doc/whitepaper.md#2025-04-22_snippet_10\n\nLANGUAGE: c\nCODE:\n```\nfloat read_data_and_compute_value(const char *pathname)\n{\n  // Open the file, return INVALID_VALUE in case that fails:\n  int fh = open(pathname, O_RDONLY);\n  if (fh == -1)\n    return INVALID_VALUE;\n\n  // Read data, compute the value\n  ....\n}\n```\n\n----------------------------------------\n\nTITLE: Including the Clear Metafunction Header in C++\nDESCRIPTION: This snippet shows how to include the header file for the 'clear' metafunction in a C++ program.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/clear.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/clear.hpp>\n```\n\n----------------------------------------\n\nTITLE: Header Include Guard Convention\nDESCRIPTION: C++ header include guard template demonstrating Boost.GIL naming convention for preventing multiple inclusions\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/CONTRIBUTING.md#2025-04-22_snippet_21\n\nLANGUAGE: cpp\nCODE:\n```\n#ifndef BOOST_GIL_<DIR1>_<DIR2>_<FILE>_HPP\n#define BOOST_GIL_<DIR1>_<DIR2>_<FILE>_HPP\n...\n#endif\n```\n\n----------------------------------------\n\nTITLE: Declaring replace_if Template in C++\nDESCRIPTION: Declaration of the replace_if template struct. It takes a Sequence, a Predicate, a NewType, and an optional Inserter as template parameters. The struct defines a nested 'type' typedef.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/replace_if.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      typename Sequence\n    , typename Pred\n    , typename NewType\n    , typename In = |unspecified|\n    >\nstruct replace_if\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Regular Expression Backend Configuration\nDESCRIPTION: Configures the regular expression backend options for Boost.Log, allowing selection between different regex implementations.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/log/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(BOOST_LOG_REGEX_BACKENDS \"std::regex\" \"Boost.Regex\" \"Boost.Xpressive\")\nset(BOOST_LOG_USE_REGEX_BACKEND \"Boost.Regex\" CACHE STRING \"Regular expressions backend to use in Boost.Log\")\nset_property(CACHE BOOST_LOG_USE_REGEX_BACKEND PROPERTY STRINGS ${BOOST_LOG_REGEX_BACKENDS})\nif (NOT BOOST_LOG_USE_REGEX_BACKEND IN_LIST BOOST_LOG_REGEX_BACKENDS)\n    message(FATAL_ERROR \"BOOST_LOG_USE_REGEX_BACKEND must be one of: ${BOOST_LOG_REGEX_BACKENDS}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Using assume_error() as rvalue reference observer in C++\nDESCRIPTION: A narrow contract rvalue reference observer for the stored error. The function first invokes NoValuePolicy::narrow_error_check() before returning a reference to the error. For void error_type, only a const overload returning void is available.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/basic_outcome/assume_error_rvalue.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nerror_type &&assume_error() && noexcept\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project Configuration\nDESCRIPTION: Sets up basic CMake project configuration including minimum version, project name, and C++ standard requirements.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/json-schema-validation/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.9)\nproject(arangodb-validation VERSION 0.0.1 LANGUAGES CXX)\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_LIST_DIR}/cmake\")\nset(CMAKE_EXPORT_COMPILE_COMMANDS ON)\n```\n\n----------------------------------------\n\nTITLE: Configuring Internal Documentation Inclusion in Doxygen\nDESCRIPTION: This option determines whether documentation typed after the \\internal command is included.  Setting it to YES includes the internal documentation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/sort/doc/doxygen/sort_doxyfile.txt#2025-04-22_snippet_35\n\nLANGUAGE: Doxygen\nCODE:\n```\n\"INTERNAL_DOCS          = NO\"\n```\n\n----------------------------------------\n\nTITLE: Windows-Specific Configuration Options\nDESCRIPTION: Sets Windows-specific configuration options for Boost.Log when building on Windows platforms.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/log/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif (WIN32)\n    set(BOOST_LOG_NO_QUERY_PERFORMANCE_COUNTER OFF CACHE BOOL \"Disable using QueryPerformanceCounter API on Windows in Boost.Log\")\n    set(BOOST_LOG_WITHOUT_DEBUG_OUTPUT OFF CACHE BOOL \"Disable support for debugger output on Windows in Boost.Log\")\n    set(BOOST_LOG_WITHOUT_EVENT_LOG OFF CACHE BOOL \"Disable support for event log on Windows in Boost.Log\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating Development Branch in Git\nDESCRIPTION: Git command for creating a new branch based on the develop branch with a specific naming convention for bug fixes or features\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hana/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout -b your_branch develop\n```\n\n----------------------------------------\n\nTITLE: Factory Functions for Results\nDESCRIPTION: Defines helper functions that create successful or failed results without explicitly calling constructors, simplifying result handling.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/tutorial/essential/result/_index.md#2025-04-22_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\nauto failure(T &&t) { /* return failure result */ }\n```\n\nLANGUAGE: C++\nCODE:\n```\nauto success(T &&t) { /* return success result */ }\n```\n\n----------------------------------------\n\nTITLE: Installing ICU Data File\nDESCRIPTION: Configures the installation of the ICU (International Components for Unicode) data file to the specified destination.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/cmake/packages/client/deb.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES ${ICU_DT}\n  DESTINATION \"${INSTALL_ICU_DT_DEST}\"\n  RENAME ${ICU_DT_DEST})\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Cypriot Script Character Ranges\nDESCRIPTION: Lists Unicode character ranges for the Cypriot syllabic script, used to write the Cypriot dialect of Greek from about 800-200 BCE. Contains syllabic characters.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/spirit/workbench/unicode/Scripts.txt#2025-04-22_snippet_36\n\nLANGUAGE: unicode\nCODE:\n```\n10800..10805  ; Cypriot # Lo   [6] CYPRIOT SYLLABLE A..CYPRIOT SYLLABLE JA\n10808         ; Cypriot # Lo       CYPRIOT SYLLABLE JO\n1080A..10835  ; Cypriot # Lo  [44] CYPRIOT SYLLABLE KA..CYPRIOT SYLLABLE WO\n10837..10838  ; Cypriot # Lo   [2] CYPRIOT SYLLABLE XA..CYPRIOT SYLLABLE XE\n1083C         ; Cypriot # Lo       CYPRIOT SYLLABLE ZA\n1083F         ; Cypriot # Lo       CYPRIOT SYLLABLE ZO\n\n# Total code points: 55\n```\n\n----------------------------------------\n\nTITLE: Linking Dependencies for Boost Functional\nDESCRIPTION: This snippet specifies the libraries that Boost Functional depends on for successful compilation and functionality, establishing links to various Boost components related to type traits, function handling, and utilities.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/functional/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(boost_functional\n  INTERFACE\n    Boost::config\n    Boost::core\n    Boost::function\n    Boost::function_types\n    Boost::mpl\n    Boost::preprocessor\n    Boost::type_traits\n    Boost::typeof\n    Boost::utility\n)\n```\n\n----------------------------------------\n\nTITLE: Representing C++ Inheritance in Boost.Python\nDESCRIPTION: Demonstrates how to represent C++ inheritance relationships in Boost.Python, allowing derived classes to inherit methods exposed in base classes.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/doc/article.rst#2025-04-22_snippet_14\n\nLANGUAGE: cpp\nCODE:\n```\nclass_<Derived, bases<Base1,Base2> >(\"Derived\")\n     ...\n```\n\n----------------------------------------\n\nTITLE: Including c_str Metafunction Header in C++\nDESCRIPTION: Specifies the header file to include for using the c_str metafunction in C++ code.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/c_str.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/string.hpp>\n```\n\n----------------------------------------\n\nTITLE: Defining Value Type in C++ for Argument Pack\nDESCRIPTION: This template structure defines the result type of indexing an argument pack with either a keyword tag type or tagged default, with dependencies on ArgumentPack. It returns the type or a default.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_10\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <typename A, typename K, typename D = void_>\nstruct value_type\n{\n    typedef … type;\n};\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Random Access Iterator Type Expression for advance\nDESCRIPTION: Shows the type expression for the advance operation on a Random Access Iterator, which returns another Random Access Iterator in amortized constant time.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/RandomAccessIterator.rst#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\nadvance<i,n>::type\n```\n\n----------------------------------------\n\nTITLE: Accessing the Underlying Type of an Integral Sequence Wrapper\nDESCRIPTION: Shows how to access the underlying type of an Integral Sequence Wrapper. The type is identical to the sequence with wrapped integral constants.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/IntegralSequenceWrapper.rst#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\ntypedef seq_c<T, c1...cn>::type s;\ntypedef seq_n_c<T, c1...cn>::type s;\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Library for Restart Action\nDESCRIPTION: Creates a static library named arango_restart_action using the RestartAction.cpp source file for ArangoDB's restart mechanism\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/RestServer/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(arango_restart_action STATIC\n  RestartAction.cpp)\n```\n\n----------------------------------------\n\nTITLE: Handling Implicit Collections - C++\nDESCRIPTION: This race condition involves the 'AllowImplicitCollectionsSwitcher', emphasizing the ongoing work needed in relation to thread safety, which is captured as a TODO item awaiting resolution.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tsan_arangodb_suppressions.txt#2025-04-22_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\n// TODO - this should be removed once BTS-685 is fixed\nrace:AllowImplicitCollectionsSwitcher\n```\n\n----------------------------------------\n\nTITLE: Comment Parsing Configuration in Doxygen\nDESCRIPTION: Settings for handling different comment styles and documentation inheritance behavior.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/sort/doc/doxygen/sort_doxyfile.txt#2025-04-22_snippet_4\n\nLANGUAGE: INI\nCODE:\n```\nJAVADOC_AUTOBRIEF      = NO\nQT_AUTOBRIEF           = NO\nMULTILINE_CPP_IS_BRIEF = NO\nINHERIT_DOCS           = YES\nSEPARATE_MEMBER_PAGES  = NO\nTAB_SIZE               = 4\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Documentation Links\nDESCRIPTION: RST link definitions for organizational references used in the documentation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/counting_iterator.rst#2025-04-22_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. _`Boost Consulting`: http://www.boost-consulting.com\n.. _`Open Systems Lab`: http://www.osl.iu.edu\n.. _`Institute for Transport Railway Operation and Construction`: http://www.ive.uni-hannover.de\n```\n\n----------------------------------------\n\nTITLE: Including void_ Header in C++\nDESCRIPTION: The header file inclusion required to use the void_ type in a C++ program, referencing the Boost MPL library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/void_.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/void.hpp>\n```\n\n----------------------------------------\n\nTITLE: Configuring Namespace Page Generation in Doxygen\nDESCRIPTION: This option specifies whether the Namespaces page is generated. Setting it to NO disables the Namespaces page.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/sort/doc/doxygen/sort_doxyfile.txt#2025-04-22_snippet_57\n\nLANGUAGE: Doxygen\nCODE:\n```\n\"SHOW_NAMESPACES        = YES\"\n```\n\n----------------------------------------\n\nTITLE: Using multiplies metafunction in C++ template metaprogramming\nDESCRIPTION: The 'multiplies' metafunction is a synonym for the 'times' operation. It is provided for backward compatibility with earlier versions of the library. Users should refer to the 'times' metafunction documentation for detailed specifications.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/multiplies.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nmultiplies\n```\n\n----------------------------------------\n\nTITLE: Conditional Test Subdirectory Support\nDESCRIPTION: Adds test subdirectory if BUILD_TESTING is enabled and test/CMakeLists.txt exists\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/describe/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(BUILD_TESTING AND EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/test/CMakeLists.txt\")\n\n  add_subdirectory(test)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Benchmarking tl::expected<T, E> in C++\nDESCRIPTION: This snippet includes header files for benchmarking the performance of tl::expected<T, E> error handling approach. It uses the TartanLlama expected implementation and a deep stack implementation from the LEAF library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/leaf/benchmark/benchmark.md#2025-04-22_snippet_8\n\nLANGUAGE: c++\nCODE:\n```\n#include \"https://raw.githubusercontent.com/TartanLlama/expected/master/include/tl/expected.hpp\"\n#include \"https://raw.githubusercontent.com/boostorg/leaf/master/benchmark/deep_stack_other.cpp\"\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Braille Script Character Ranges\nDESCRIPTION: Lists Unicode character ranges for the Braille patterns, used in the tactile writing system for blind people. Covers all possible 8-dot Braille pattern combinations.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/spirit/workbench/unicode/Scripts.txt#2025-04-22_snippet_37\n\nLANGUAGE: unicode\nCODE:\n```\n2800..28FF    ; Braille # So [256] BRAILLE PATTERN BLANK..BRAILLE PATTERN DOTS-12345678\n\n# Total code points: 256\n```\n\n----------------------------------------\n\nTITLE: Configuring Post-Build Copy Commands for Library Resources\nDESCRIPTION: Sets up post-build commands to copy library resources (like OpenSSL DLLs) to the test executable directory, first attempting to use hard links for efficiency.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/CMakeLists.txt#2025-04-22_snippet_32\n\nLANGUAGE: CMake\nCODE:\n```\nforeach(ELEMENT ${IRESEARCH_LIB_RESOURCES})\n  if (ELEMENT)\n    add_custom_command(\n      TARGET arangodbtests POST_BUILD\n      COMMAND ${CMAKE_COMMAND} -E echo \"copying library resource:\" \"${ELEMENT}\" \" -> \" \"$<TARGET_FILE_DIR:arangodbtests>\"\n      COMMAND cp -lf ${ELEMENT} $<TARGET_FILE_DIR:arangodbtests> || ${CMAKE_COMMAND} -E copy ${ELEMENT} $<TARGET_FILE_DIR:arangodbtests>\n    )\n  endif()\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Configuring Bibliography Files in Doxygen\nDESCRIPTION: This option specifies one or more bib files containing the reference definitions. This must be a list of .bib files.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/sort/doc/doxygen/sort_doxyfile.txt#2025-04-22_snippet_60\n\nLANGUAGE: Doxygen\nCODE:\n```\n\"CITE_BIB_FILES    = \"\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost.Regex Standalone Mode\nDESCRIPTION: Defines an option for standalone mode and sets up dependencies or compile definitions based on the choice.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/regex/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\noption(BOOST_REGEX_STANDALONE \"Boost.Regex: Enable Standalone Mode (i.e. no Boost dependencies)\")\n\nif(NOT BOOST_REGEX_STANDALONE)\n\n   target_link_libraries(boost_regex\n     INTERFACE\n       Boost::config\n       Boost::throw_exception\n       Boost::predef\n       Boost::assert\n   )\n\nelse()\n\n   target_compile_definitions(boost_regex\n     INTERFACE BOOST_REGEX_STANDALONE\n   )\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Has Value Flag in C++ ArangoDB Implementation\nDESCRIPTION: This static function sets whether an implementation has a value by manipulating a flag. It's constexpr, has constant time complexity, and never throws exceptions. It takes an Impl&& and a bool as parameters.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/policies/base/set_has_value.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nstatic void _set_has_value(Impl &&, bool) noexcept\n```\n\n----------------------------------------\n\nTITLE: Documentation Copyright Header\nDESCRIPTION: Copyright notice and licensing information for Spirit documentation\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/spirit/doc/outline.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n# Copyright (C) 2001-2008 Joel de Guzman\n# Copyright (C) 2001-2008 Hartmut Kaiser\n#\n# Distributed under the Boost Software License, Version 1.0. (See accompanying\n# file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)\n```\n\n----------------------------------------\n\nTITLE: Implementing Identity Function Object in C++\nDESCRIPTION: Defines the 'identity_base' struct with overloaded call operators for different types. It handles general types, std::initializer_list, and uses SFINAE for move constructibility. The identity function object is then declared as a static variable.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/identity.hpp.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nstruct identity_base\n{\n    template<class T>\n    constexpr T operator()(T&& x) const \n    noexcept(std::is_reference<T>::value || BOOST_HOF_IS_NOTHROW_MOVE_CONSTRUCTIBLE(T))\n    {\n        return BOOST_HOF_FORWARD(T)(x);\n    }\n\n    template<class T>\n    constexpr std::initializer_list<T>& operator()(std::initializer_list<T>& x) const noexcept\n    {\n        return x;\n    }\n\n    template<class T>\n    constexpr const std::initializer_list<T>& operator()(const std::initializer_list<T>& x) const noexcept\n    {\n        return x;\n    }\n\n    template<class T>\n    constexpr std::initializer_list<T> operator()(std::initializer_list<T>&& x) const noexcept(noexcept(std::initializer_list<T>(std::move(x))))\n    {\n        return BOOST_HOF_FORWARD(std::initializer_list<T>)(x);\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Using Integral Sequence Wrapper with Numbered Forms\nDESCRIPTION: Shows the numbered notation for using an Integral Sequence Wrapper with Variadic Sequences, where n indicates the sequence variant.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/IntegralSequenceWrapper.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nseqn_c<T, c1...cn>\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Boost.HigherOrderFunctions with CMake in Bash\nDESCRIPTION: Command to build and run tests for the Boost.HigherOrderFunctions library using CMake's check target.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/doc/src/building.md.txt#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncmake --build . --target check\n```\n\n----------------------------------------\n\nTITLE: Running Tests with CMake\nDESCRIPTION: Command to build and run tests using the CMake check target.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/src/building.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncmake --build . --target check\n```\n\n----------------------------------------\n\nTITLE: Calling C++ Function from C Example\nDESCRIPTION: Implementation showing how to call the declared C++ function from C code with various numeric inputs.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/experimental/c-api/example2.md#2025-04-22_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n{{% snippet \"c_api.c\" \"example\" %}}\n```\n\n----------------------------------------\n\nTITLE: Listing Soft Dotted Characters in Unicode\nDESCRIPTION: Lists Unicode code points classified as Soft_Dotted. These are characters that have a visible dot that disappears when certain diacritical marks are placed above them. The list primarily includes variations of the letters 'i' and 'j' across different scripts and styles.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/spirit/workbench/unicode/PropList.txt#2025-04-22_snippet_23\n\nLANGUAGE: Unicode data format\nCODE:\n```\n0069..006A    ; Soft_Dotted # L&   [2] LATIN SMALL LETTER I..LATIN SMALL LETTER J\n012F          ; Soft_Dotted # L&       LATIN SMALL LETTER I WITH OGONEK\n0249          ; Soft_Dotted # L&       LATIN SMALL LETTER J WITH STROKE\n0268          ; Soft_Dotted # L&       LATIN SMALL LETTER I WITH STROKE\n029D          ; Soft_Dotted # L&       LATIN SMALL LETTER J WITH CROSSED-TAIL\n02B2          ; Soft_Dotted # Lm       MODIFIER LETTER SMALL J\n03F3          ; Soft_Dotted # L&       GREEK LETTER YOT\n0456          ; Soft_Dotted # L&       CYRILLIC SMALL LETTER BYELORUSSIAN-UKRAINIAN I\n0458          ; Soft_Dotted # L&       CYRILLIC SMALL LETTER JE\n1D62          ; Soft_Dotted # L&       LATIN SUBSCRIPT SMALL LETTER I\n1D96          ; Soft_Dotted # L&       LATIN SMALL LETTER I WITH RETROFLEX HOOK\n1DA4          ; Soft_Dotted # Lm       MODIFIER LETTER SMALL I WITH STROKE\n1DA8          ; Soft_Dotted # Lm       MODIFIER LETTER SMALL J WITH CROSSED-TAIL\n1E2D          ; Soft_Dotted # L&       LATIN SMALL LETTER I WITH TILDE BELOW\n1ECB          ; Soft_Dotted # L&       LATIN SMALL LETTER I WITH DOT BELOW\n2071          ; Soft_Dotted # Lm       SUPERSCRIPT LATIN SMALL LETTER I\n2148..2149    ; Soft_Dotted # L&   [2] DOUBLE-STRUCK ITALIC SMALL I..DOUBLE-STRUCK ITALIC SMALL J\n2C7C          ; Soft_Dotted # L&       LATIN SUBSCRIPT SMALL LETTER J\n1D422..1D423  ; Soft_Dotted # L&   [2] MATHEMATICAL BOLD SMALL I..MATHEMATICAL BOLD SMALL J\n1D456..1D457  ; Soft_Dotted # L&   [2] MATHEMATICAL ITALIC SMALL I..MATHEMATICAL ITALIC SMALL J\n1D48A..1D48B  ; Soft_Dotted # L&   [2] MATHEMATICAL BOLD ITALIC SMALL I..MATHEMATICAL BOLD ITALIC SMALL J\n1D4BE..1D4BF  ; Soft_Dotted # L&   [2] MATHEMATICAL SCRIPT SMALL I..MATHEMATICAL SCRIPT SMALL J\n1D4F2..1D4F3  ; Soft_Dotted # L&   [2] MATHEMATICAL BOLD SCRIPT SMALL I..MATHEMATICAL BOLD SCRIPT SMALL J\n1D526..1D527  ; Soft_Dotted # L&   [2] MATHEMATICAL FRAKTUR SMALL I..MATHEMATICAL FRAKTUR SMALL J\n1D55A..1D55B  ; Soft_Dotted # L&   [2] MATHEMATICAL DOUBLE-STRUCK SMALL I..MATHEMATICAL DOUBLE-STRUCK SMALL J\n1D58E..1D58F  ; Soft_Dotted # L&   [2] MATHEMATICAL BOLD FRAKTUR SMALL I..MATHEMATICAL BOLD FRAKTUR SMALL J\n1D5C2..1D5C3  ; Soft_Dotted # L&   [2] MATHEMATICAL SANS-SERIF SMALL I..MATHEMATICAL SANS-SERIF SMALL J\n1D5F6..1D5F7  ; Soft_Dotted # L&   [2] MATHEMATICAL SANS-SERIF BOLD SMALL I..MATHEMATICAL SANS-SERIF BOLD SMALL J\n1D62A..1D62B  ; Soft_Dotted # L&   [2] MATHEMATICAL SANS-SERIF ITALIC SMALL I..MATHEMATICAL SANS-SERIF ITALIC SMALL J\n1D65E..1D65F  ; Soft_Dotted # L&   [2] MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL I..MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL J\n1D692..1D693  ; Soft_Dotted # L&   [2] MATHEMATICAL MONOSPACE SMALL I..MATHEMATICAL MONOSPACE SMALL J\n\n# Total code points: 46\n```\n\n----------------------------------------\n\nTITLE: Rerunning Old Crashes in Shell\nDESCRIPTION: Command to rerun an old crash test case using the basic_parser fuzzer. This is useful for verifying if previously identified issues have been resolved.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/json/fuzzing/Readme.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n./fuzzer_basic_parser testcase.json\n```\n\n----------------------------------------\n\nTITLE: Setting CMake minimum version\nDESCRIPTION: Specifies the minimum required CMake version for the project. This ensures that the CMake version used to build the project is compatible with the commands and features used in the CMakeLists.txt file.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/dynamic_bitset/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.16)\n```\n\n----------------------------------------\n\nTITLE: Adding Sources to ArangoDB Tests Target\nDESCRIPTION: Adds the VocBase properties test sources to the main ArangoDB test suite target.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/VocBase/Properties/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(\n        arangodbtests PUBLIC\n        ${ARANGODB_VOCBASE_PROPERTIES_TEST_SOURCES}\n)\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Documentation Includes\nDESCRIPTION: RST include directives for additional documentation files related to the counting iterator implementation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/counting_iterator.rst#2025-04-22_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: counting_iterator_ref.rst\n.. include:: make_counting_iterator.rst\n\n.. include:: counting_iterator_eg.rst\n```\n\n----------------------------------------\n\nTITLE: STL Input Iterator Comparison Operations\nDESCRIPTION: Lists STL algorithms that require Input Iterator with Readable capabilities for comparison operations.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/new-iter-concepts.rst#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\nequal, mismatch\n```\n\n----------------------------------------\n\nTITLE: Installing Documentation Dependencies for Boost.HigherOrderFunctions in Bash\nDESCRIPTION: Command to install the required Python packages for building documentation using pip.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/doc/src/building.md.txt#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npip install -r doc/requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Example of distance operation in Random Access Iterator\nDESCRIPTION: Demonstrates the semantics of the distance operation which calculates the separation between two iterators.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/RandomAccessIterator.rst#2025-04-22_snippet_6\n\nLANGUAGE: C++\nCODE:\n```\ntypedef distance<i,j>::type n;\n```\n\n----------------------------------------\n\nTITLE: Running libunwind Regression Tests\nDESCRIPTION: Command to execute the regression test suite after building the libunwind library to verify functionality.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/libunwind/v1.7.2/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ make check\n```\n\n----------------------------------------\n\nTITLE: Generating Visual Studio Projects with CMake for Beast Library\nDESCRIPTION: Commands for using CMake to generate Visual Studio solution files for 32-bit or 64-bit Windows builds of the Beast library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/beast/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncd libs/beast\nmkdir bin\ncd bin\ncmake ..                                    # for 32-bit Windows builds, or\ncmake -G\"Visual Studio 15 2017 Win64\" ..    # for 64-bit Windows builds (VS2017)\n```\n\n----------------------------------------\n\nTITLE: Configuring Friend Compound Hiding in Doxygen\nDESCRIPTION: This option specifies whether friend (class|struct|union) declarations are hidden from the documentation. If set to YES, friend declarations are hidden.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/sort/doc/doxygen/sort_doxyfile.txt#2025-04-22_snippet_33\n\nLANGUAGE: Doxygen\nCODE:\n```\n\"HIDE_FRIEND_COMPOUNDS  = NO\"\n```\n\n----------------------------------------\n\nTITLE: Conditional V8 Library Linking\nDESCRIPTION: Conditionally links the arango_cluster_engine library with the arango_v8 and arango_v8_no_deadline libraries if USE_V8 is defined. This adds the V8 engine as a dependency when V8 support is enabled.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/ClusterEngine/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif (USE_V8)\n  target_link_libraries(arango_cluster_engine arango_v8 arango_v8_no_deadline)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Using Reverse Algorithm in C++\nDESCRIPTION: Demonstrates the usage of the 'reverse' algorithm to reverse a vector of integers and assert its equality with a range.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/reverse.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntypedef vector_c<int,9,8,7,6,5,4,3,2,1,0> numbers;\ntypedef reverse< numbers >::type result;\n\nBOOST_MPL_ASSERT(( equal< result, range_c<int,0,10> > ));\n```\n\n----------------------------------------\n\nTITLE: Listing Deprecated Unicode Characters\nDESCRIPTION: Lists Unicode code points classified as Deprecated. These are characters that are no longer recommended for use in text. The list includes various letters, vowel signs, and special symbols with their Unicode categories and descriptions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/spirit/workbench/unicode/PropList.txt#2025-04-22_snippet_22\n\nLANGUAGE: Unicode data format\nCODE:\n```\n0149          ; Deprecated # L&       LATIN SMALL LETTER N PRECEDED BY APOSTROPHE\n0F77          ; Deprecated # Mn       TIBETAN VOWEL SIGN VOCALIC RR\n0F79          ; Deprecated # Mn       TIBETAN VOWEL SIGN VOCALIC LL\n17A3..17A4    ; Deprecated # Lo   [2] KHMER INDEPENDENT VOWEL QAQ..KHMER INDEPENDENT VOWEL QAA\n206A..206F    ; Deprecated # Cf   [6] INHIBIT SYMMETRIC SWAPPING..NOMINAL DIGIT SHAPES\n2329          ; Deprecated # Ps       LEFT-POINTING ANGLE BRACKET\n232A          ; Deprecated # Pe       RIGHT-POINTING ANGLE BRACKET\nE0001         ; Deprecated # Cf       LANGUAGE TAG\nE0020..E007F  ; Deprecated # Cf  [96] TAG SPACE..CANCEL TAG\n\n# Total code points: 110\n```\n\n----------------------------------------\n\nTITLE: Numeric Matrix Data Sample\nDESCRIPTION: A matrix of numeric values with 3 rows and 4 columns. The file starts with two single numbers (0 and 3) followed by three rows of space-separated integer values.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/polygon/example/input_data/random/random_022.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n0\n3\n-19 17 -10 9\n-1 -50 25 40\n26 15 48 -3\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Bindings in CMake\nDESCRIPTION: Conditionally adds Python bindings subdirectory if both SWIG and Python3 are found on the system.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/s2geometry/master/CMakeLists.txt#2025-04-22_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nif (${SWIG_FOUND} AND ${Python3_FOUND})\n  add_subdirectory(\"src/python\" python)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Including for_each Header in C++\nDESCRIPTION: This code snippet shows how to include the header file for the for_each algorithm in a C++ program.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/for_each.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/for_each.hpp>\n```\n\n----------------------------------------\n\nTITLE: Adding GCC-Specific Compiler Options for FakeIt Mock Framework\nDESCRIPTION: Adds a specific compiler option for GNU compiler to disable devirtualization, which is required by the FakeIt mocking framework's destructor mock functionality.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/CMakeLists.txt#2025-04-22_snippet_19\n\nLANGUAGE: CMake\nCODE:\n```\n#required by fakeit dtor mock -- https://github.com/eranpeer/FakeIt/issues/84\nif(CMAKE_CXX_COMPILER_ID STREQUAL GNU)\n  target_compile_options(arangodbtests PRIVATE -fno-devirtualize)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Exception Flag in C++ Implementation\nDESCRIPTION: A constexpr method to set or clear an exception flag for an implementation, providing constant-time, no-throw guarantee. The method modifies internal flags to indicate exception presence without generating runtime exceptions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/policies/base/set_has_exception.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nstatic void _set_has_exception(Impl &&, bool) noexcept\n```\n\n----------------------------------------\n\nTITLE: Image Processing Example Snippets\nDESCRIPTION: A collection of example code snippets demonstrating various image processing techniques using Boost GIL library\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/index.rst.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nx_gradient.cpp\n```\n\nLANGUAGE: C++\nCODE:\n```\ndynamic_image.cpp\n```\n\nLANGUAGE: C++\nCODE:\n```\nhistogram.cpp\n```\n\nLANGUAGE: C++\nCODE:\n```\ninterleaved_ptr.cpp\n```\n\nLANGUAGE: C++\nCODE:\n```\nmandelbrot.cpp\n```\n\nLANGUAGE: C++\nCODE:\n```\npacked_pixel.cpp\n```\n\nLANGUAGE: C++\nCODE:\n```\nresize.cpp\n```\n\nLANGUAGE: C++\nCODE:\n```\naffine.cpp\n```\n\nLANGUAGE: C++\nCODE:\n```\nconvolution.cpp\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Options for Vocbase API\nDESCRIPTION: Applies deprecation compiler options to the vocbase API library build.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/VocBase/Properties/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_compile_options(arango_vocbase_api PRIVATE\n        ${CMAKE_DEPRECATE_OPTIONS})\n```\n\n----------------------------------------\n\nTITLE: Linking Graph Tests Executable Dependencies\nDESCRIPTION: Links the graph tests executable with required test libraries.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/Graph/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(arangodbtests_graph\n        arango_tests_graph\n        arango_tests_basics)\n```\n\n----------------------------------------\n\nTITLE: Including reverse_copy_if Header in C++\nDESCRIPTION: Shows the header file that needs to be included to use the reverse_copy_if algorithm in C++ code.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/reverse_copy_if.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/copy_if.h>\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on macOS with MacPorts\nDESCRIPTION: Commands to install required dependencies for S2 Geometry Library on macOS using MacPorts.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/s2geometry/master/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo port install cmake gflags google-glog openssl\n```\n\n----------------------------------------\n\nTITLE: Installing Docutils Python Package\nDESCRIPTION: Command to install the Docutils package from source directory using Python setup tools.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/README.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython setup.py install\n```\n\n----------------------------------------\n\nTITLE: Defining Cherokee Unicode Block\nDESCRIPTION: Lists the code point range for the Cherokee script in Unicode. This block contains 85 code points representing Cherokee letters from A to YV.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/spirit/workbench/unicode/Scripts.txt#2025-04-22_snippet_11\n\nLANGUAGE: unicode\nCODE:\n```\n13A0..13F4    ; Cherokee # Lo  [85] CHEROKEE LETTER A..CHEROKEE LETTER YV\n```\n\n----------------------------------------\n\nTITLE: Implementing Capture Pack Template in C++\nDESCRIPTION: Defines a wrapper class for function packs that enables the capture functionality. It inherits from Pack and adds functionality to combine captured arguments with functions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/capture.hpp.txt#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<class Pack>\nstruct capture_pack : Pack\n{\n    BOOST_HOF_INHERIT_CONSTRUCTOR(capture_pack, Pack);\n\n    BOOST_HOF_RETURNS_CLASS(capture_pack);\n\n    // TODO: Should use rvalue ref qualifier\n    template<class F>\n    constexpr auto operator()(F f) const BOOST_HOF_SFINAE_RETURNS\n    (\n        capture_invoke<F, Pack>(BOOST_HOF_RETURNS_STATIC_CAST(F&&)(f), \n            BOOST_HOF_RETURNS_C_CAST(Pack&&)(\n                BOOST_HOF_RETURNS_STATIC_CAST(const Pack&)(*boost::hof::always(BOOST_HOF_CONST_THIS)(f))\n            )\n        )\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost Assert Library in CMake\nDESCRIPTION: This CMake script configures the Boost Assert library project. It sets the minimum required CMake version, defines the project, creates the library target, sets include directories, and specifies dependencies. It also conditionally includes tests if BUILD_TESTING is enabled.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/assert/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Copyright 2018, 2019 Peter Dimov\n# Distributed under the Boost Software License, Version 1.0.\n# See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt\n\n# We support CMake 3.5, but prefer 3.16 policies and behavior\ncmake_minimum_required(VERSION 3.5...3.16)\n\nproject(boost_assert VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n\nadd_library(boost_assert INTERFACE)\nadd_library(Boost::assert ALIAS boost_assert)\n\ntarget_include_directories(boost_assert INTERFACE include)\n\ntarget_link_libraries(boost_assert\n  INTERFACE\n    Boost::config\n)\n\n# BUILD_TESTING is the standard CTest variable that enables testing\n\nif(BUILD_TESTING)\n\n  add_subdirectory(test)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Linking arango_tests_futures Library Dependencies\nDESCRIPTION: Links the `arango_tests_futures` library with its required dependencies, including `arango_futures` (likely containing the future implementation), `gtest` (Google Test framework), `velocypack` (a data serialization format used by ArangoDB), and `fmt` (a formatting library). The `PRIVATE` keyword indicates that these dependencies are only needed for building the library itself, and not for other targets that link against it.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/Futures/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(arango_tests_futures\n  PRIVATE\n    arango_futures\n    gtest\n    velocypack\n    fmt)\n```\n\n----------------------------------------\n\nTITLE: Edge Removal Operations in C++\nDESCRIPTION: Functions for removing edges from the graph using different identification methods including vertex pairs and edge descriptors.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/distributed_adjacency_list.rst#2025-04-22_snippet_17\n\nLANGUAGE: C++\nCODE:\n```\nvoid remove_edge(vertex_descriptor u, vertex_descriptor v, adjacency_list& g);\n\nvoid remove_edge(edge_descriptor e, adjacency_list& g);\n\nvoid remove_edge(out_edge_iterator iter, adjacency_list& g);\n```\n\n----------------------------------------\n\nTITLE: Including BOOST_MPL_ASSERT_RELATION Header in C++\nDESCRIPTION: Shows how to include the header file containing the BOOST_MPL_ASSERT_RELATION macro definition.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/ASSERT_RELATION.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/assert.hpp>\n```\n\n----------------------------------------\n\nTITLE: Including Protect Header in C++\nDESCRIPTION: Header file inclusion for using the 'protect' metafunction in C++ code.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/protect.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/protect.hpp>\n```\n\n----------------------------------------\n\nTITLE: Configuring Compilation Target for arango_replication2 in CMake\nDESCRIPTION: The snippet sets up the 'arango_replication2' build target in a CMakeLists file. It uses the 'target_sources' command to add 'Streams.tpp' as a private source file to this target.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/Replication2/Streams/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(arango_replication2 PRIVATE\n  Streams.tpp)\n```\n\n----------------------------------------\n\nTITLE: Handling Versioning for Boost.Hana\nDESCRIPTION: This snippet handles the versioning of the Boost.Hana library by reading the version number from a header file, and sets up the project accordingly. It also checks the compiler support for the current configuration.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hana/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nforeach(level MAJOR MINOR PATCH)\n    file(STRINGS include/boost/hana/version.hpp\n                 _define_${level}\n                 REGEX \"#define BOOST_HANA_${level}_VERSION\")\n    string(REGEX MATCH \"([0-9]+)\" _version_${level} \"${_define_${level}}\")\nendforeach()\n\nset(Boost.Hana_VERSION_STRING \"${_version_MAJOR}.${_version_MINOR}.${_version_PATCH}\")\nproject(Boost.Hana VERSION ${Boost.Hana_VERSION_STRING} LANGUAGES CXX)\n\ninclude(CheckCxxCompilerSupport)\n\n```\n\n----------------------------------------\n\nTITLE: Defining Gothic Unicode Block\nDESCRIPTION: Lists the code point ranges for the Gothic script in Unicode. This block contains 27 code points including letters and numerals from the 4th century Gothic alphabet.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/spirit/workbench/unicode/Scripts.txt#2025-04-22_snippet_23\n\nLANGUAGE: unicode\nCODE:\n```\n10330..10340  ; Gothic # Lo  [17] GOTHIC LETTER AHSA..GOTHIC LETTER PAIRTHRA\n10341         ; Gothic # Nl       GOTHIC LETTER NINETY\n10342..10349  ; Gothic # Lo   [8] GOTHIC LETTER RAIDA..GOTHIC LETTER OTHAL\n1034A         ; Gothic # Nl       GOTHIC LETTER NINE HUNDRED\n```\n\n----------------------------------------\n\nTITLE: Listing Sentence Terminal Characters in Unicode\nDESCRIPTION: Lists Unicode code points classified as STerm. These characters mark the end of a sentence. The list includes various punctuation marks that serve as sentence terminators across different writing systems, such as full stops, question marks, and exclamation marks.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/spirit/workbench/unicode/PropList.txt#2025-04-22_snippet_27\n\nLANGUAGE: Unicode data format\nCODE:\n```\n0021          ; STerm # Po       EXCLAMATION MARK\n002E          ; STerm # Po       FULL STOP\n003F          ; STerm # Po       QUESTION MARK\n055C          ; STerm # Po       ARMENIAN EXCLAMATION MARK\n055E          ; STerm # Po       ARMENIAN QUESTION MARK\n0589          ; STerm # Po       ARMENIAN FULL STOP\n061F          ; STerm # Po       ARABIC QUESTION MARK\n06D4          ; STerm # Po       ARABIC FULL STOP\n0700..0702    ; STerm # Po   [3] SYRIAC END OF PARAGRAPH..SYRIAC SUBLINEAR FULL STOP\n07F9          ; STerm # Po       NKO EXCLAMATION MARK\n0964..0965    ; STerm # Po   [2] DEVANAGARI DANDA..DEVANAGARI DOUBLE DANDA\n104A..104B    ; STerm # Po   [2] MYANMAR SIGN LITTLE SECTION..MYANMAR SIGN SECTION\n1362          ; STerm # Po       ETHIOPIC FULL STOP\n1367..1368    ; STerm # Po   [2] ETHIOPIC QUESTION MARK..ETHIOPIC PARAGRAPH SEPARATOR\n166E          ; STerm # Po       CANADIAN SYLLABICS FULL STOP\n1803          ; STerm # Po       MONGOLIAN FULL STOP\n1809          ; STerm # Po       MONGOLIAN MANCHU FULL STOP\n1944..1945    ; STerm # Po   [2] LIMBU EXCLAMATION MARK..LIMBU QUESTION MARK\n1B5A..1B5B    ; STerm # Po   [2] BALINESE PANTI..BALINESE PAMADA\n1B5E..1B5F    ; STerm # Po   [2] BALINESE CARIK SIKI..BALINESE CARIK PAREREN\n1C3B..1C3C    ; STerm # Po   [2] LEPCHA PUNCTUATION TA-ROL..LEPCHA PUNCTUATION NYET THYOOM TA-ROL\n1C7E..1C7F    ; STerm # Po   [2] OL CHIKI PUNCTUATION MUCAAD..OL CHIKI PUNCTUATION DOUBLE MUCAAD\n203C..203D    ; STerm # Po   [2] DOUBLE EXCLAMATION MARK..INTERROBANG\n2047..2049    ; STerm # Po   [3] DOUBLE QUESTION MARK..EXCLAMATION QUESTION MARK\n2E2E          ; STerm # Po       REVERSED QUESTION MARK\n3002          ; STerm # Po       IDEOGRAPHIC FULL STOP\nA4FF          ; STerm # Po       LISU PUNCTUATION FULL STOP\nA60E..A60F    ; STerm # Po   [2] VAI FULL STOP..VAI QUESTION MARK\nA6F3          ; STerm # Po       BAMUM FULL STOP\nA6F7          ; STerm # Po       BAMUM QUESTION MARK\nA876..A877    ; STerm # Po   [2] PHAGS-PA MARK SHAD..PHAGS-PA MARK DOUBLE SHAD\nA8CE..A8CF    ; STerm # Po   [2] SAURASHTRA DANDA..SAURASHTRA DOUBLE DANDA\nA92F          ; STerm # Po       KAYAH LI SIGN SHYA\nA9C8..A9C9    ; STerm # Po   [2] JAVANESE PADA LINGSA..JAVANESE PADA LUNGSI\nAA5D..AA5F    ; STerm # Po   [3] CHAM PUNCTUATION DANDA..CHAM PUNCTUATION TRIPLE DANDA\nABEB          ; STerm # Po       MEETEI MAYEK CHEIKHEI\nFE52          ; STerm # Po       SMALL FULL STOP\nFE56..FE57    ; STerm # Po   [2] SMALL QUESTION MARK..SMALL EXCLAMATION MARK\nFF01          ; STerm # Po       FULLWIDTH EXCLAMATION MARK\nFF0E          ; STerm # Po       FULLWIDTH FULL STOP\nFF1F          ; STerm # Po       FULLWIDTH QUESTION MARK\nFF61          ; STerm # Po       HALFWIDTH IDEOGRAPHIC FULL STOP\n110BE..110C1  ; STerm # Po   [4] KAITHI SECTION MARK..KAITHI DOUBLE DANDA\n\n# Total code points: 66\n```\n\n----------------------------------------\n\nTITLE: Modifiers in ptr_deque\nDESCRIPTION: The snippet details the modifying methods of the ptr_deque class, including push_front and pop_front, along with their requirements and exception guarantees.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/ptr_deque.rst#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nvoid push_front( T* x );\n// Requirements: x != 0\n// Effects: Inserts the pointer into container and takes ownership of it\n// Throws: bad_pointer if x == 0\n\ntemplate< class U >\nvoid push_front( compatible-smart-ptr<U> x );\n// Effects: push_front( x.release() );\n\nauto_type pop_front();\n// Requirements: not empty()\n// Effects: Removes the first element in the container\n// Throws: bad_ptr_container_operation if empty() == true\n```\n\n----------------------------------------\n\nTITLE: Unicode Common Script Category Definition\nDESCRIPTION: A comprehensive mapping of Unicode code points assigned to the 'Common' script category. Each line defines either a single code point or a range, followed by the script name and character description.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/spirit/workbench/unicode/Scripts.txt#2025-04-22_snippet_1\n\nLANGUAGE: unicode\nCODE:\n```\n0000..001F    ; Common # Cc  [32] <control-0000>..<control-001F>\n0020          ; Common # Zs       SPACE\n0021..0023    ; Common # Po   [3] EXCLAMATION MARK..NUMBER SIGN\n0024          ; Common # Sc       DOLLAR SIGN\n# ... additional entries truncated for brevity\n```\n\n----------------------------------------\n\nTITLE: Defining C++20 Requires Clause Macro in Boost Outcome\nDESCRIPTION: A configuration macro that conditionally enables C++20 requires clauses. Expands to a requires(...) expression when C++20 is available, otherwise expands to nothing for backward compatibility.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/macros/requires.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nBOOST_OUTCOME_REQUIRES(...)\n```\n\n----------------------------------------\n\nTITLE: Configuring Compiler Warnings and Flags for GCC and Clang\nDESCRIPTION: Sets compiler warning levels and flags for GCC and Clang compilers, including enabling -Wall and -Wextra, and disabling exceptions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/snappy/snappy-1.1.9/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n  # Use -Wall for clang and gcc.\n  if(NOT CMAKE_CXX_FLAGS MATCHES \"-Wall\")\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wall\")\n  endif(NOT CMAKE_CXX_FLAGS MATCHES \"-Wall\")\n\n  # Use -Wextra for clang and gcc.\n  if(NOT CMAKE_CXX_FLAGS MATCHES \"-Wextra\")\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wextra\")\n  endif(NOT CMAKE_CXX_FLAGS MATCHES \"-Wextra\")\n\n  # Use -Werror for clang only.\n  if(CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")\n    if(NOT CMAKE_CXX_FLAGS MATCHES \"-Werror\")\n      set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Werror\")\n    endif(NOT CMAKE_CXX_FLAGS MATCHES \"-Werror\")\n  endif(CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")\n\n  # Disable C++ exceptions.\n  string(REGEX REPLACE \"-fexceptions\" \"\" CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS}\")\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fno-exceptions\")\n\n  # Mixing -fno-rtti with -frtti (the default for C++) leads to unwanted\n  # consequences, in particular with exception handling. Since the snappy\n  # developers will not allow fixes in their repository, we fix it here.\n  # Disable RTTI.\n  #string(REGEX REPLACE \"-frtti\" \"\" CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS}\")\n  #set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fno-rtti\")\nendif(MSVC)\n```\n\n----------------------------------------\n\nTITLE: Conditional Benchmark Support with GSL\nDESCRIPTION: This snippet includes a conditional check for the GSL package to determine if it's available before adding benchmarks that require GSL-specific include directories and libraries, ensuring proper compilation and linking.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/histogram/benchmark/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(GSL)\nif (GSL_FOUND)\n  add_benchmark(\n    histogram_filling_gsl\n    INCLUDE_DIRECTORIES ${GSL_INCLUDE_DIRS}\n    LINK_LIBRARIES ${GSL_LIBRARIES})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost Numeric Conversion Library Build\nDESCRIPTION: Sets up CMake configuration for building the Boost Numeric Conversion library as an interface library. Defines version requirements, project settings, include directories, and required Boost dependencies. Also configures optional test directory inclusion.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/numeric/conversion/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.16)\n\nproject(boost_numeric_conversion VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n\nadd_library(boost_numeric_conversion INTERFACE)\nadd_library(Boost::numeric_conversion ALIAS boost_numeric_conversion)\n\ntarget_include_directories(boost_numeric_conversion INTERFACE include)\n\ntarget_link_libraries(boost_numeric_conversion\n  INTERFACE\n    Boost::config\n    Boost::conversion\n    Boost::core\n    Boost::mpl\n    Boost::preprocessor\n    Boost::throw_exception\n    Boost::type_traits\n)\n\nif(BUILD_TESTING AND EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/test/CMakeLists.txt\")\n\n  add_subdirectory(test)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Importing object-inspect Module\nDESCRIPTION: Shows how to require the object-inspect module in a Node.js environment.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/js/node/node_modules/qs/node_modules/object-inspect/readme.markdown#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar inspect = require('object-inspect')\n```\n\n----------------------------------------\n\nTITLE: Defining Hiragana Unicode Block\nDESCRIPTION: Lists the code point ranges for the Hiragana script in Unicode. This block contains 90 code points including letters, iteration marks, and special characters.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/spirit/workbench/unicode/Scripts.txt#2025-04-22_snippet_17\n\nLANGUAGE: unicode\nCODE:\n```\n3041..3096    ; Hiragana # Lo  [86] HIRAGANA LETTER SMALL A..HIRAGANA LETTER SMALL KE\n309D..309E    ; Hiragana # Lm   [2] HIRAGANA ITERATION MARK..HIRAGANA VOICED ITERATION MARK\n309F          ; Hiragana # Lo       HIRAGANA DIGRAPH YORI\n1F200         ; Hiragana # So       SQUARE HIRAGANA HOKA\n```\n\n----------------------------------------\n\nTITLE: Enabling Testing\nDESCRIPTION: Enables testing using `enable_testing()` and conditionally adds the `src/test/json` subdirectory if the `TAOCPP_JSON_BUILD_TESTS` option is enabled.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/taocpp-json/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nenable_testing ()\noption (TAOCPP_JSON_BUILD_TESTS \"Build test programs\" ON)\nif (TAOCPP_JSON_BUILD_TESTS)\n  add_subdirectory (src/test/json)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Example usage of unary_ufunc with UnarySquare\nDESCRIPTION: Demonstrates how to use `unary_ufunc` to create a Python callable `UnarySquare` that squares a double value. It defines the `UnarySquare` struct with an overloaded `operator()` and then uses `boost::python` to expose the struct and create a Python object with the `__call__` attribute mapped to the `unary_ufunc`'s `make` method.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/doc/numpy/reference/unary_ufunc.rst#2025-04-22_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\n  namespace p = boost::python;\n  namespace np = boost::python::numpy;\n\n  struct UnarySquare \n  {\n    typedef double argument_type;\n    typedef double result_type;\n    double operator()(double r) const { return r * r;}\n  };\n\n  p::object ud = p::class_<UnarySquare, boost::shared_ptr<UnarySquare> >(\"UnarySquare\").def(\"__call__\", np::unary_ufunc<UnarySquare>::make());\n  p::object inst = ud();\n  std::cout << \"Square of unary scalar 1.0 is \" << p::extract <char const * > (p::str(inst.attr(\"__call__\")(1.0))) << std::endl ; \n```\n\n----------------------------------------\n\nTITLE: Including if_ Metafunction Header in C++\nDESCRIPTION: Shows the header file that needs to be included to use the if_ metafunction in C++ code.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/if_.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/if.hpp>\n```\n\n----------------------------------------\n\nTITLE: Dash Character Property Definitions in Unicode 5.2.0\nDESCRIPTION: Lists all Unicode code points classified as Dash, including various hyphen, minus sign, and dash characters across different scripts. Contains 25 total code points with their Unicode categories and descriptions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/spirit/workbench/unicode/PropList.txt#2025-04-22_snippet_3\n\nLANGUAGE: Plain Text\nCODE:\n```\n002D          ; Dash # Pd       HYPHEN-MINUS\n058A          ; Dash # Pd       ARMENIAN HYPHEN\n05BE          ; Dash # Pd       HEBREW PUNCTUATION MAQAF\n1400          ; Dash # Pd       CANADIAN SYLLABICS HYPHEN\n1806          ; Dash # Pd       MONGOLIAN TODO SOFT HYPHEN\n2010..2015    ; Dash # Pd   [6] HYPHEN..HORIZONTAL BAR\n2053          ; Dash # Po       SWUNG DASH\n207B          ; Dash # Sm       SUPERSCRIPT MINUS\n208B          ; Dash # Sm       SUBSCRIPT MINUS\n2212          ; Dash # Sm       MINUS SIGN\n2E17          ; Dash # Pd       DOUBLE OBLIQUE HYPHEN\n2E1A          ; Dash # Pd       HYPHEN WITH DIAERESIS\n301C          ; Dash # Pd       WAVE DASH\n3030          ; Dash # Pd       WAVY DASH\n30A0          ; Dash # Pd       KATAKANA-HIRAGANA DOUBLE HYPHEN\nFE31..FE32    ; Dash # Pd   [2] PRESENTATION FORM FOR VERTICAL EM DASH..PRESENTATION FORM FOR VERTICAL EN DASH\nFE58          ; Dash # Pd       SMALL EM DASH\nFE63          ; Dash # Pd       SMALL HYPHEN-MINUS\nFF0D          ; Dash # Pd       FULLWIDTH HYPHEN-MINUS\n\n# Total code points: 25\n```\n\n----------------------------------------\n\nTITLE: Configuring Todo List Generation in Doxygen\nDESCRIPTION: This option enables or disables the generation of the todo list, created by \\todo commands. Setting it to YES enables the list.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/sort/doc/doxygen/sort_doxyfile.txt#2025-04-22_snippet_49\n\nLANGUAGE: Doxygen\nCODE:\n```\n\"GENERATE_TODOLIST      = YES\"\n```\n\n----------------------------------------\n\nTITLE: Overriding BOOST_MPL_LIMIT_LIST_SIZE Example in C++\nDESCRIPTION: Example showing how to override the default BOOST_MPL_LIMIT_LIST_SIZE to a custom value (10 in this case), and using it with list_c template.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/LIMIT_LIST_SIZE.rst#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\n#define BOOST_MPL_CFG_NO_PREPROCESSED_HEADERS\n#define BOOST_MPL_LIMIT_LIST_SIZE 10\n``#``\\ include <boost/mpl/list.hpp>\n\nusing namespace boost::mpl;\n\ntypedef list_c<int,1> l_1;\ntypedef list_c<int,1,2,3,4,5,6,7,8,9,10> l_10;\n// typedef list_c<int,1,2,3,4,5,6,7,8,9,10,11> l_11; // error!\n```\n\n----------------------------------------\n\nTITLE: Unicode Block Definitions for Multiple Scripts\nDESCRIPTION: Defines Unicode character blocks for various scripts including their codepoint ranges, character types (Lo, Mn, Mc, etc.), and descriptions. Each block includes the total number of code points and specific character assignments.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/spirit/workbench/unicode/Scripts.txt#2025-04-22_snippet_43\n\nLANGUAGE: unicode\nCODE:\n```\nA800..A801    ; Syloti_Nagri # Lo   [2] SYLOTI NAGRI LETTER A..SYLOTI NAGRI LETTER I\nA802          ; Syloti_Nagri # Mn       SYLOTI NAGRI SIGN DVISVARA\nA803..A805    ; Syloti_Nagri # Lo   [3] SYLOTI NAGRI LETTER U..SYLOTI NAGRI LETTER O\n# Total code points: 44\n```\n\n----------------------------------------\n\nTITLE: Running Single ArangoShell Client Test\nDESCRIPTION: Command for running a single test case using the ArangoShell client.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/CONTRIBUTING.md#2025-04-22_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/unittest shell_client --test api-import.js\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Unified_Ideograph Characters\nDESCRIPTION: Lists Unicode code points classified as Unified_Ideograph with their corresponding character classes. These include CJK unified and compatibility ideographs from various blocks in the Unicode standard. The list contains 74,394 total code points.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/spirit/workbench/unicode/PropList.txt#2025-04-22_snippet_20\n\nLANGUAGE: unicode\nCODE:\n```\n3400..4DB5    ; Unified_Ideograph # Lo [6582] CJK UNIFIED IDEOGRAPH-3400..CJK UNIFIED IDEOGRAPH-4DB5\n4E00..9FCB    ; Unified_Ideograph # Lo [20940] CJK UNIFIED IDEOGRAPH-4E00..CJK UNIFIED IDEOGRAPH-9FCB\nFA0E..FA0F    ; Unified_Ideograph # Lo   [2] CJK COMPATIBILITY IDEOGRAPH-FA0E..CJK COMPATIBILITY IDEOGRAPH-FA0F\nFA11          ; Unified_Ideograph # Lo       CJK COMPATIBILITY IDEOGRAPH-FA11\nFA13..FA14    ; Unified_Ideograph # Lo   [2] CJK COMPATIBILITY IDEOGRAPH-FA13..CJK COMPATIBILITY IDEOGRAPH-FA14\nFA1F          ; Unified_Ideograph # Lo       CJK COMPATIBILITY IDEOGRAPH-FA1F\nFA21          ; Unified_Ideograph # Lo       CJK COMPATIBILITY IDEOGRAPH-FA21\nFA23..FA24    ; Unified_Ideograph # Lo   [2] CJK COMPATIBILITY IDEOGRAPH-FA23..CJK COMPATIBILITY IDEOGRAPH-FA24\nFA27..FA29    ; Unified_Ideograph # Lo   [3] CJK COMPATIBILITY IDEOGRAPH-FA27..CJK COMPATIBILITY IDEOGRAPH-FA29\n20000..2A6D6  ; Unified_Ideograph # Lo [42711] CJK UNIFIED IDEOGRAPH-20000..CJK UNIFIED IDEOGRAPH-2A6D6\n2A700..2B734  ; Unified_Ideograph # Lo [4149] CJK UNIFIED IDEOGRAPH-2A700..CJK UNIFIED IDEOGRAPH-2B734\n\n# Total code points: 74394\n```\n\n----------------------------------------\n\nTITLE: Hugo Shortcode for Children Pages in ArangoDB Documentation\nDESCRIPTION: A Hugo shortcode that displays child pages with descriptions. The shortcode is configured to show descriptions and limit depth to 2 levels.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/aliases/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{{% children description=\"true\" depth=\"2\" %}}\n```\n\n----------------------------------------\n\nTITLE: Defining the Generic apply Metafunction Template in C++\nDESCRIPTION: Template definition for the generic apply metafunction, which invokes a Metafunction Class with optional arguments. It takes template parameter F and optional A1 through An, and produces a type member.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/apply.rst#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\ntemplate< \n      typename F\n    , typename A1 = |unspecified|\n    |...|\n    , typename An = |unspecified|\n    >\nstruct apply\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining BOOST_MPL_LIMIT_VECTOR_SIZE Macro in C++\nDESCRIPTION: The default definition of the BOOST_MPL_LIMIT_VECTOR_SIZE macro if not already defined. This macro controls the maximum number of elements that can be used in vector and vector_c templates in Boost MPL.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/LIMIT_VECTOR_SIZE.rst#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n#if !defined(BOOST_MPL_LIMIT_VECTOR_SIZE)\n#   define BOOST_MPL_LIMIT_VECTOR_SIZE \\\n            |idic| \\\n/**/\n#endif\n```\n\n----------------------------------------\n\nTITLE: Locale-Specific Number Formatting in C++ Streams\nDESCRIPTION: Shows how to use different locales for number formatting in output streams. The example demonstrates changing locale settings to display numbers according to US and Russian formatting conventions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/doc/std_locales.txt#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ncout.imbue(std::locale(\"en_US.UTF-8\"));\ncout << 1345.45 << endl;\ncout.imbue(std::locale(\"ru_RU.UTF-8\"));\ncout << 1345.45 << endl;\n```\n\n----------------------------------------\n\nTITLE: Adding Utils Subdirectory - CMake\nDESCRIPTION: This snippet includes the 'Utils' subdirectory in the build process, which likely contains additional utility functions or configurations necessary for the cluster methods.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/Cluster/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Utils)\n```\n\n----------------------------------------\n\nTITLE: Copying libunwind Source Files to Binary Directory in CMake\nDESCRIPTION: Copies all libunwind source files from the source directory to the binary directory for the build process. This ensures that the original source files remain untouched during the build.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/libunwind/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# copy files into binary directory\nfile(\n  COPY\n    \"${LIBUNWIND_SOURCE_DIR}\"\n  DESTINATION\n    \"${CMAKE_CURRENT_BINARY_DIR}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Using BOOST_OUTCOME_TRYV_FAILURE_LIKELY Macro in C++\nDESCRIPTION: This macro evaluates an expression that returns a type with customization points for try_operation_has_value, try_operation_return_as, and try_operation_extract_value. It continues execution if successful, or returns try_operation_return_as(X) if unsuccessful. It's optimized for expressions likely to fail.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/macros/tryv_failure_likely.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_OUTCOME_TRYV_FAILURE_LIKELY(expr)\n```\n\n----------------------------------------\n\nTITLE: Adding ICU Legacy Dependency in CMake\nDESCRIPTION: Adds a build dependency on iculegacy_build to ensure proper internationalization support is built before the test target.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/CMakeLists.txt#2025-04-22_snippet_23\n\nLANGUAGE: CMake\nCODE:\n```\nadd_dependencies(arangodbtests iculegacy_build)\n```\n\n----------------------------------------\n\nTITLE: Creating Distributed Property Map Factory Functions in C++\nDESCRIPTION: Factory functions to create distributed property maps from a process group and local property map, with optional reduction operation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/distributed_property_map.rst#2025-04-22_snippet_14\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate<typename Key, typename ProcessGroup, typename LocalPropertyMap>\ndistributed_property_map<ProcessGroup, LocalPropertyMap, Key>\nmake_distributed_property_map(const ProcessGroup& pg, LocalPropertyMap pmap);\n\ntemplate<typename Key, typename ProcessGroup, typename LocalPropertyMap,\n         typename Reduce>\ndistributed_property_map<ProcessGroup, LocalPropertyMap, Key>\nmake_distributed_property_map(const ProcessGroup& pg, LocalPropertyMap pmap,\n                              Reduce reduce);\n```\n\n----------------------------------------\n\nTITLE: Creating 2D NumPy Array from C++ uint8_t Array\nDESCRIPTION: This snippet shows how to create a 2D NumPy array from a C++ uint8_t 2D array. It demonstrates setting up the data, shape, stride, and data type for a more complex array structure.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/doc/numpy/reference/ndarray.rst#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\nuint8_t mul_data[][4] = {{1,2,3,4},{5,6,7,8},{1,3,5,7}};\nshape = p::make_tuple(3,2) ;\nstride = p::make_tuple(4,2) ; \nnp::dtype dt1 = np::dtype::get_builtin<uint8_t>();\n\nnp::ndarray mul_data_ex = np::from_data(mul_data,dt1, p::make_tuple(3,4),p::make_tuple(4,1),p::object());\nmul_data_ex = np::from_data(mul_data,dt1, shape,stride,p::object());\n```\n\n----------------------------------------\n\nTITLE: Value Category Evaluation Class in C++\nDESCRIPTION: Class U with static member functions to determine how arguments are passed based on their value categories.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/reference.rst#2025-04-22_snippet_44\n\nLANGUAGE: C++\nCODE:\n```\nenum invoked\n{\n    passed_by_lvalue_reference_to_const\n  , passed_by_lvalue_reference\n  , passed_by_rvalue_reference_to_const\n  , passed_by_rvalue_reference\n};\n\nstruct U\n{\n    template <std::size_t N>\n    static invoked evaluate_category(std::bitset<N + 1> const&)\n    {\n        return passed_by_lvalue_reference_to_const;\n    }\n\n    template <std::size_t N>\n    static invoked evaluate_category(std::bitset<N + 1>&)\n    {\n        return passed_by_lvalue_reference;\n    }\n\n    template <std::size_t N>\n    static invoked evaluate_category(std::bitset<N + 1> const&&)\n    {\n        return passed_by_rvalue_reference_to_const;\n    }\n\n    template <std::size_t N>\n    static invoked evaluate_category(std::bitset<N + 1>&&)\n    {\n        return passed_by_rvalue_reference;\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Switching Branch in Boost Super-Project - Shell\nDESCRIPTION: Changes the current directory to the cloned Boost super-project and checks out the desired branch, either master or develop, for further actions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd boost\n    git checkout master\n```\n\n----------------------------------------\n\nTITLE: Example Usage of is_invocable Metafunction in C++\nDESCRIPTION: Demonstrates how to use the is_invocable metafunction to check if a class with operator() is callable with a specific parameter type. The static_assert verifies the invocability at compile-time.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/is_invocable.hpp.txt#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/hof.hpp>\nusing namespace boost::hof;\n\nstruct is_invocable_class\n{\n    void operator()(int) const\n    {\n    }\n};\nstatic_assert(is_invocable<is_invocable_class, int>(), \"Not callable\");\n\nint main() {}\n```\n\n----------------------------------------\n\nTITLE: Deserializing basic_outcome Format Specification\nDESCRIPTION: Specifies the serialization format for basic_outcome which includes flags, value_type, error_type, and exception_type fields separated by spaces. The operator requires valid input stream operations for T, EC, and EP types.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/functions/iostream/outcome_operator_in.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n<unsigned int flags><space><value_type if set and not void><error_type if set and not void><exception_type if set and not void>\n```\n\n----------------------------------------\n\nTITLE: Defining lambda Template in C++\nDESCRIPTION: Defines the lambda template structure with two template parameters X and Tag. It transforms X into a corresponding Metafunction Class if X is a placeholder expression, otherwise returns X unchanged.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/lambda.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate< \n    typename X\n    , typename Tag = |unspecified|\n    >\nstruct lambda\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Coordinate or Graph Data Input Format\nDESCRIPTION: A structured numerical data format that appears to represent coordinate pairs or graph points. The data is organized into sections indicated by count numbers, with each subsequent line containing coordinate pairs.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/polygon/example/input_data/primary/primary_020.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n3\n-2 -2\n-2 4\n-2 10\n1\n0 0\n0 8\n```\n\n----------------------------------------\n\nTITLE: Unique Pointer Return Implementation in C++\nDESCRIPTION: Concrete implementation of release that returns std::unique_ptr, used in C++17 and later when std::auto_ptr is not available.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/compatible_smart_ptr.rst#2025-04-22_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\nstd::unique_ptr<T> container::release( );\n```\n\n----------------------------------------\n\nTITLE: Specifying template parameters for iterator_adaptor in C++\nDESCRIPTION: iterator_adaptor uses use_default as a placeholder for several template parameters. This allows users to specify parameters later in the list and simplifies implementation of default associated types.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/iterator_adaptor_body.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <\n    class Derived,\n    class Base,\n    class Value = use_default,\n    class CategoryOrTraversal = use_default,\n    class Reference = use_default,\n    class Difference = use_default\n>\nclass iterator_adaptor;\n```\n\n----------------------------------------\n\nTITLE: BOOST_MPL_ASSERT Usage Example\nDESCRIPTION: Example showing how to use BOOST_MPL_ASSERT to verify type equality in a template class. Demonstrates the required double parentheses syntax and shows a typical compilation error message.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/ASSERT.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ntemplate< typename T, typename U > struct my\n{\n    // ...\n    BOOST_MPL_ASSERT(( is_same< T,U > ));\n};\n\nmy<void*,char*> test;\n```\n\n----------------------------------------\n\nTITLE: Documenting REST API Endpoints in Markdown\nDESCRIPTION: Lists the available REST API endpoints for the Itzpapalotl application including the index page, random deity generator, and deity summoning functionality.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/js/common/test-data/apps/itzpapalotl/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `GET /itzpapalotl/index`: shows an HTML overview page\n* `GET /itzpapalotl/random`: returns a random deity name as JSON\n* `GET /itzpapalotl/{deity}/summon`: summon a deity\n```\n\n----------------------------------------\n\nTITLE: Implementing Robust Mutex Emulation in C++\nDESCRIPTION: This code snippet outlines the structure and key functions for implementing a robust mutex emulation. It includes methods for locking, unlocking, and checking for dead owners in a multi-process environment.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/interprocess/proj/to-do.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nLOCK\n  if (broken_id){\n    throw exception;\n  }\n\n  lock_own_unique_file();\n\n  while(1){\n    if (try_lock_mtx){\n      write unique_id\n    }\n    else{\n      sleep();\n      ++tries;\n      if(tries > 100)\n        if(!robust_check()){\n          tries = 0;\n        }\n        else{\n          break;\n        }\n      }\n    }\n  }\n\n\nUNLOCK\n  if (fixing_mode){\n    write_broken_id\n  }\n  else{\n    write invalid_id\n  }\n\n  unlock_mtx\n\nROBUST_CHECK\n\n  if(check_if_owner_dead_and_take_ownership_atomically()){\n    return false;\n  }\n  write fixing_id\n\nCHECK_IF_OWNER_DEAD_AND_TAKE_OWNERSHIP_ATOMICALLY\n\n   do{\n      old_owner = read_owner_atomically()\n      if(check_owner_unique_resource_is_dead(old_owner){\n         return true;\n      }\n   }while(cas(old_owner, cur_owner) == old_owner);\n   return false;\n\nCHECK_OWNER_UNIQUE_RESOURCE_IS_DEAD(owner)\n\n   file = file_to_owner(owner);\n   if(file_exists(file)){\n      if(try_lock(file)){\n         write_owner_atomically();\n         remove(file);\n         unlock(file)\n         return true;\n      }\n   }\n   return false;\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Flags\nDESCRIPTION: Sets compiler flags for `tokens.cpp` when using the GNU compiler and for `grammar.cpp` when using the Clang compiler.  This suppresses specific warnings that may arise during compilation. `-Wno-sign-compare` is used with GNU and `-Wno-unused-but-set-variable` is used with Clang.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/Aql/CMakeLists.txt#2025-04-22_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nif (CMAKE_CXX_COMPILER_ID STREQUAL \"GNU\")\n  set_source_files_properties(tokens.cpp PROPERTIES COMPILE_FLAGS -Wno-sign-compare)\nendif ()\nif (CMAKE_CXX_COMPILER_ID STREQUAL \"Clang\")\n  set_source_files_properties(grammar.cpp PROPERTIES COMPILE_FLAGS -Wno-unused-but-set-variable)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Initializing Distributed Property Map with Process Group and Local Map in C++\nDESCRIPTION: Constructors for distributed_property_map using a process group, local property map, and optional reduction operation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/distributed_property_map.rst#2025-04-22_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\ndistributed_property_map(const ProcessGroup& pg, \n                         const LocalPropertyMap& pm);\n\ntemplate<typename Reduce>\ndistributed_property_map(const ProcessGroup& pg, \n                         const LocalPropertyMap& pm,\n                         const Reduce& reduce);\n```\n\n----------------------------------------\n\nTITLE: Declaring print_half function in C++\nDESCRIPTION: The snippet provides the declaration for the function `print_half`, which takes a `std::string` representing an integer and intends to process the value. The result<void> type indicates operations may fail with no value returned on success.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/tutorial/essential/result/inspecting.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n\"{{% snippet \\\"using_result.cpp\\\" \\\"half_decl\\\" %}}\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Void Specialization for 'always' Function in C++\nDESCRIPTION: Specializes the 'always_base' template for void return type. This implementation returns either void or a private empty type (void_) depending on compiler support for constexpr functions returning void.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/always.hpp.txt#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<>\nstruct always_base<void>\n{\n    \n    constexpr always_base() noexcept\n    {}\n\n    struct void_ {};\n\n    template<class... As>\n    constexpr BOOST_HOF_ALWAYS_VOID_RETURN \n    operator()(As&&...) const noexcept\n    {\n#if BOOST_HOF_NO_CONSTEXPR_VOID\n        return void_();\n#endif\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Test Subdirectory\nDESCRIPTION: Conditionally adds the test subdirectory if testing is enabled (BUILD_TESTING is true) and the test/CMakeLists.txt file exists. The add_subdirectory command includes the CMakeLists.txt file in the test directory, incorporating the tests into the build process.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/CMakeLists.txt#2025-04-22_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nif(BUILD_TESTING AND EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/test/CMakeLists.txt\")\n\n  add_subdirectory(test)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Ugaritic Script Character Ranges\nDESCRIPTION: Lists Unicode character ranges for the Ugaritic script, including letters and word divider. Ugaritic was used around 1400-1200 BCE in what is now Syria.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/spirit/workbench/unicode/Scripts.txt#2025-04-22_snippet_33\n\nLANGUAGE: unicode\nCODE:\n```\n10380..1039D  ; Ugaritic # Lo  [30] UGARITIC LETTER ALPA..UGARITIC LETTER SSU\n1039F         ; Ugaritic # Po       UGARITIC WORD DIVIDER\n\n# Total code points: 31\n```\n\n----------------------------------------\n\nTITLE: Sequence Type Definition in C++\nDESCRIPTION: Examples of type definitions for both variadic and numbered sequence forms. These create sequence objects that contain the specified elements and maintain their ordering.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/VariadicSequence.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ntypedef seq<t1...tn> s;\ntypedef seqn<t1...tn> s;\n```\n\nLANGUAGE: C++\nCODE:\n```\ntypedef seq<t1...tn>::type s;\ntypedef seqn<t1...tn>::type s;\n```\n\n----------------------------------------\n\nTITLE: Implementing Reference Unwrapping for Polymorphic Constructors in C++\nDESCRIPTION: This snippet shows the traditional boilerplate required to implement reference unwrapping in polymorphic constructors like make_tuple. It defines helper metafunctions to handle std::reference_wrapper types correctly when constructing tuples.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/doc/src/example_polymorphic_constructors.md.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <class T>\nstruct unwrap_refwrapper\n{\n    typedef T type;\n};\n \ntemplate <class T>\nstruct unwrap_refwrapper<std::reference_wrapper<T>>\n{\n    typedef T& type;\n};\n \ntemplate <class T>\nstruct unwrap_ref_decay\n: unwrap_refwrapper<typename std::decay<T>::type>\n{};\n\ntemplate <class... Types>\nstd::tuple<typename unwrap_ref_decay<Types>::type...> make_tuple(Types&&... args)\n{\n    return std::tuple<typename unwrap_ref_decay<Types>::type...>(std::forward<Types>(args)...);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining implicit constructor with predicate in C++\nDESCRIPTION: This snippet defines the implicit inplace value or error constructor `basic_result(A1 &&, A2 &&, Args ...)` which is conditioned on the availability of `predicate::enable_inplace_value_error_constructor<A1, A2, Args ...>`. It aims to construct an object with either a value or an error while preserving exception safety and ensuring indeterminate states for the arguments when exceptions are thrown.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/basic_result/implicit_inplace_value_error_constructor.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n+++\n\ntitle = \"`basic_result(A1 &&, A2 &&, Args ...)`\"\n\ndescription = \"Implicit inplace value or error constructor. Available if `predicate::enable_inplace_value_error_constructor<A1, A2, Args ...>` is true. Constexpr, triviality and noexcept propagating.\"\n\ncategories = [\"constructors\", \"implicit-constructors\", \"inplace-constructors\"]\nweight = 440\n+++\n\nImplicit inplace value or error constructor. Delegates to an appropriate explicit inplace constructor depending on input.\n\n*Requires*: predicate::enable_inplace_value_error_constructor<A1, A2, Args ...>` is true.\n\n*Complexity*: Same as for the `value_type` or `error_type` constructor which accepts `A1, A2, Args ...`. Constexpr, triviality and noexcept of underlying operations is propagated.\n\n*Guarantees*: If an exception is thrown during the operation, the state of the Args is left indeterminate.\n```\n\n----------------------------------------\n\nTITLE: Numeric Edge Data\nDESCRIPTION: Large dataset of numeric pairs with each line containing two tuples of numbers. The numbers appear to be integer values representing some form of node mapping or edge relationship.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/polygon/benchmark/input_data/voronoi_segment.txt#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\n651216600 -172282895 673718830 -195812466\n673718830 -195812466 675786742 -197974788\n675786742 -197974788 697245853 -220413615\n...\n```\n\n----------------------------------------\n\nTITLE: Defining MutableRandomAccessNDLocatorConcept in C++\nDESCRIPTION: This concept extends RandomAccessNDLocatorConcept and adds the requirement that the reference type must be mutable. This allows for modifying the underlying data being accessed through the locator.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/pixel_locator.rst.txt#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\n\"template <typename Loc>\\n  concept MutableRandomAccessNDLocatorConcept\\n      : RandomAccessNDLocatorConcept<Loc>\\n  {\\n    where Mutable<reference>;\\n  };\"\n```\n\n----------------------------------------\n\nTITLE: Increment Operation Implementation for Planar Pixel Iterator\nDESCRIPTION: Illustrates an approximate implementation of the `operator++` for `planar_pixel_iterator`. It uses `static_transform` and compile-time recursion to increment the channel pointers.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/html/_sources/design/pixel_iterator.rst.txt#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <typename T>\nstruct inc : public std::unary_function<T,T>\n{\n  T operator()(T x) const { return ++x; }\n};\n\ntemplate <typename ChannelPtr, typename ColorSpace>\nplanar_pixel_iterator<ChannelPtr,ColorSpace>&\nplanar_pixel_iterator<ChannelPtr,ColorSpace>::operator++()\n{\n  static_transform(*this,*this,inc<ChannelPtr>());\n  return *this;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost MPL Project with CMake\nDESCRIPTION: Sets up the Boost MPL project using CMake, defining minimum CMake version, project details, and creating an interface library. It also specifies include directories and links against other Boost libraries.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required( VERSION 3.5...3.20 )\nproject( boost_mpl VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX )\n\nadd_library( boost_mpl INTERFACE )\nadd_library( Boost::mpl ALIAS boost_mpl )\n\ntarget_include_directories( boost_mpl INTERFACE include )\n\ntarget_link_libraries( boost_mpl\n    INTERFACE\n        Boost::config\n        Boost::core\n        Boost::predef\n        Boost::preprocessor\n        Boost::static_assert\n        Boost::type_traits\n        Boost::utility\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectory for Actor Management in C++ ArangoDB\nDESCRIPTION: This snippet introduces a subdirectory for the Actor module within the ArangoDB project. It allows for better modularization of code by separating actor-related functionalities, which can help in maintaining and extending the system.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/Replication2/StateMachines/Document/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nadd_subdirectory(Actor)\n```\n\n----------------------------------------\n\nTITLE: Running Snowball Algorithm to Generate Go Code\nDESCRIPTION: This shell command generates Go source code from a Snowball algorithm file. The output file is created using the '-o' option. Required prerequisites include having the Snowball tool installed and the necessary Snowball algorithm files available. It outputs a Go file that can be compiled using the Go compiler.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/snowball/go/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ snowball path/to/algorithm.sbl -go -o algorithm\n```\n\n----------------------------------------\n\nTITLE: Adding Performance Test Sources in CMake\nDESCRIPTION: Conditionally adds performance test sources when performance testing is enabled in the build configuration.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/CMakeLists.txt#2025-04-22_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\nif (USE_PERF_TESTS)\n  set(ARANGODB_TESTS_SOURCES ${ARANGODB_TESTS_SOURCES}\n    Scheduler/ThreadPoolPerfTest.cpp)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Empty Check for Reversible Pointer Container in C++\nDESCRIPTION: This method checks whether the container is empty, allowing for efficient control flow without exceptions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/reversible_ptr_container.rst#2025-04-22_snippet_12\n\nLANGUAGE: C++\nCODE:\n```\nbool empty() const;\n```\n\n----------------------------------------\n\nTITLE: Checking if MPL Source Files Need Fixing\nDESCRIPTION: Command to check if any Boost MPL source files need fixing before pre-processing, without making any changes to the files.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/preprocessed/README.txt#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython fix_boost_mpl_preprocess.py --check-only <path-to-boost-sourcedir>\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Jemalloc\nDESCRIPTION: Command for uninstalling jemalloc build artifacts after installation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/jemalloc/jemalloc/INSTALL.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake uninstall\n```\n\n----------------------------------------\n\nTITLE: Disabling LIBUNWIND on ARM with CMake\nDESCRIPTION: This command disables the `USE_LIBUNWIND` option during CMake configuration, which is necessary for ARM builds.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/CONTRIBUTING.md#2025-04-22_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\ncmake --preset community -DUSE_LIBUNWIND=Off ...\n```\n\n----------------------------------------\n\nTITLE: Running Test Examples with b2\nDESCRIPTION: Command to execute project examples using b2 with parallel build option\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/histogram/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nb2 cxxstd=latest examples -j4\n```\n\n----------------------------------------\n\nTITLE: Defining Trivial Metafunction Usage in C++\nDESCRIPTION: This code snippet demonstrates the syntax and usage of a Trivial Metafunction in C++ template metaprogramming. It shows how to access a nested type member of a class type using the metafunction.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/TrivialMetafunction.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntypedef name<x>::type r;\n```\n\n----------------------------------------\n\nTITLE: Defining Hugo Frontmatter for ArangoDB Functions Documentation\nDESCRIPTION: This TOML snippet defines the title and weight for the Hugo page about ArangoDB functions. It sets up the page structure within the documentation hierarchy.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/functions/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n+++\ntitle = \"Functions\"\nweight = 70\n+++\n```\n\n----------------------------------------\n\nTITLE: Declaring Zlib Functions in Visual Basic\nDESCRIPTION: This snippet contains declarations for Zlib functions in Visual Basic, compatible with both 16-bit and 32-bit Windows systems. Dependencies include the ZLIB.DLL for 16-bit and ZLIB32.DLL for 32-bit systems. Major functions include 'compress', 'uncompress', 'gzopen', 'gzread', 'gzwrite', and 'gzclose'. These functions facilitate file compression and decompression, with necessary inputs like file buffers and lengths. Proper buffer handling is crucial to avoid common errors.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/zlib/zlib-1.2.13/old/visual-basic.txt#2025-04-22_snippet_0\n\nLANGUAGE: Visual Basic\nCODE:\n```\n#If Win16 Then   'Use Win16 calls.\nDeclare Function compress Lib \"ZLIB.DLL\" (ByVal compr As\n        String, comprLen As Any, ByVal buf As String, ByVal buflen\n        As Long) As Integer\nDeclare Function uncompress Lib \"ZLIB.DLL\" (ByVal uncompr\n        As String, uncomprLen As Any, ByVal compr As String, ByVal\n        lcompr As Long) As Integer\nDeclare Function gzopen Lib \"ZLIB.DLL\" (ByVal filePath As\n        String, ByVal mode As String) As Long\nDeclare Function gzread Lib \"ZLIB.DLL\" (ByVal file As\n        Long, ByVal uncompr As String, ByVal uncomprLen As Integer)\n        As Integer\nDeclare Function gzwrite Lib \"ZLIB.DLL\" (ByVal file As\n        Long, ByVal uncompr As String, ByVal uncomprLen As Integer)\n        As Integer\nDeclare Function gzclose Lib \"ZLIB.DLL\" (ByVal file As\n        Long) As Integer\n#Else\nDeclare Function compress Lib \"ZLIB32.DLL\"\n        (ByVal compr As String, comprLen As Any, ByVal buf As\n        String, ByVal buflen As Long) As Integer\nDeclare Function uncompress Lib \"ZLIB32.DLL\"\n        (ByVal uncompr As String, uncomprLen As Any, ByVal compr As\n        String, ByVal lcompr As Long) As Long\nDeclare Function gzopen Lib \"ZLIB32.DLL\"\n        (ByVal file As String, ByVal mode As String) As Long\nDeclare Function gzread Lib \"ZLIB32.DLL\"\n        (ByVal file As Long, ByVal uncompr As String, ByVal\n        uncomprLen As Long) As Long\nDeclare Function gzwrite Lib \"ZLIB32.DLL\"\n        (ByVal file As Long, ByVal uncompr As String, ByVal\n        uncomprLen As Long) As Long\nDeclare Function gzclose Lib \"ZLIB32.DLL\"\n        (ByVal file As Long) As Long\n#End If\n```\n\n----------------------------------------\n\nTITLE: Using reverse_replace_if Algorithm in C++\nDESCRIPTION: Demonstrates the usage of the reverse_replace_if algorithm. It replaces elements greater than 4 with 0 in a reversed sequence of integers, using front insertion to build the result.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/reverse_replace_if.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntypedef vector_c<int,1,4,5,2,7,5,3,5> numbers;\ntypedef vector_c<int,1,4,0,2,0,0,3,0> expected;\ntypedef reverse_replace_if< \n      numbers\n    , greater< _, int_<4> >\n    , int_<0>\n    , front_inserter< vector<> >\n    >::type result;\n\nBOOST_MPL_ASSERT(( equal< result,expected, equal_to<_,_> > ));\n```\n\n----------------------------------------\n\nTITLE: Including push_back Header in C++\nDESCRIPTION: This code snippet shows how to include the necessary header file for using the push_back metafunction in C++.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/push_back.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/push_back.hpp>\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost Log Core Filter\nDESCRIPTION: Sets the core filter to log messages with severity level of debug or higher.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/log/example/settings_file/settings.txt#2025-04-22_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[Core]\n\nFilter=\"%Severity% >= debug\"\n```\n\n----------------------------------------\n\nTITLE: Basic Tokenizing with Boost.Tokenizer in C++\nDESCRIPTION: Demonstrates how to use Boost.Tokenizer to break a string into words using iterator-based access. This example shows the traditional iterator approach for accessing tokens.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/tokenizer/README.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n#include <iostream>\n#include <boost/tokenizer.hpp>\n#include <string>\n\nint main(){\n    std::string s = \"This is,  a test\";\n    typedef boost::tokenizer<> Tok;\n    Tok tok(s);\n    for (Tok::iterator beg = tok.begin(); beg != tok.end(); ++beg){\n        std::cout << *beg << \"\\n\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Reverse Transform Header\nDESCRIPTION: This code snippet specifies the header file required to use the reverse_transform algorithm.  The algorithm is located in the `<boost/mpl/transform.hpp>` header file.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/reverse_transform.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/transform.hpp>\n```\n\n----------------------------------------\n\nTITLE: Expression Requirements for Bidirectional Sequence in C++\nDESCRIPTION: Defines the expression requirements for Bidirectional Sequences, including the types and complexities of begin, end, and back operations.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/BidirectionalSequence.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nbegin<s>::type        // Bidirectional Iterator, Amortized constant time\nend<s>::type          // Bidirectional Iterator, Amortized constant time\nback<s>::type         // Any type, Amortized constant time\n```\n\n----------------------------------------\n\nTITLE: Specifying Target Architecture with CMake\nDESCRIPTION: This command configures the CMake build with a specific target architecture. Replace `native` with the desired architecture (e.g., `sandybridge`).\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/CONTRIBUTING.md#2025-04-22_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\ncmake --preset community -DTARGET_ARCHITECTURE=native ...\n```\n\n----------------------------------------\n\nTITLE: Running Pretty Printer Tests in Shell\nDESCRIPTION: Command to build and run tests for the GDB pretty printers using a shell script. The tests verify that the pretty printers format data structures correctly when debugging.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/utils/gdb-pretty-printers/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./utils/build_and_run_tests.sh\n```\n\n----------------------------------------\n\nTITLE: Installing the Library with CMake\nDESCRIPTION: This snippet shows how to build and install the library using CMake. The command builds the 'install' target, which copies the necessary files to the installation directory.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"cmake --build . --target install\"\n```\n\n----------------------------------------\n\nTITLE: Declaring std_outcome Type Alias with Standard Library Components in C++\nDESCRIPTION: Type alias declaration for std_outcome that configures basic_outcome with std::error_code, std::exception_ptr and policy::default_policy. This alias is part of BOOST_OUTCOME_V2_NAMESPACE and always references the std edition of components.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/aliases/std_outcome.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nstd_outcome<T, EC = std::error_code, EP = std::exception_ptr, NoValuePolicy = policy::default_policy<T, EC, EP>>\n```\n\n----------------------------------------\n\nTITLE: Exception on incorrect wide exception observation\nDESCRIPTION: This code snippet illustrates the exception thrown when an incorrect wide exception observation occurs using the `exception_ptr_rethrow` policy. Similar to the error case, it uses `BOOST_OUTCOME_THROW_EXCEPTION` with a `bad_outcome_access` object.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/policies/exception_ptr_rethrow_outcome.md#2025-04-22_snippet_1\n\nLANGUAGE: c++\nCODE:\n```\n```c++\nBOOST_OUTCOME_THROW_EXCEPTION(bad_outcome_access(\"no exception\"));\n```\n```\n\n----------------------------------------\n\nTITLE: Using Manual Generator Command Line Interface\nDESCRIPTION: Command line syntax for running the gen_manual program, showing the three required parameters: LZ4 version, input file path, and output HTML file path.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/lz4/contrib/gen_manual/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngen_manual [lz4_version] [input_file] [output_html]\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version\nDESCRIPTION: Specifies the minimum CMake version required to build the project. It ensures that the CMake version being used is at least 3.8.0, otherwise, it will result in a fatal error.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/taocpp-json/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required (VERSION 3.8.0 FATAL_ERROR)\n```\n\n----------------------------------------\n\nTITLE: Linking Dependencies for Boost Function Library\nDESCRIPTION: This snippet links various Boost libraries to the Boost Function library as interface dependencies, ensuring that all necessary components are available at compile time.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/function/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(boost_function\n  INTERFACE\n    Boost::assert\n    Boost::bind\n    Boost::config\n    Boost::core\n    Boost::integer\n    Boost::preprocessor\n    Boost::throw_exception\n    Boost::type_index\n    Boost::type_traits\n    Boost::typeof\n)\n```\n\n----------------------------------------\n\nTITLE: Getting Property Value in Adjacency List (C++)\nDESCRIPTION: Retrieves the property value for a vertex or edge descriptor in an adjacency list. The entity referred to by the descriptor must be stored in the local process.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/distributed_adjacency_list.rst#2025-04-22_snippet_25\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <class PropertyTag , class X>\ntypename property_traits<property_map<adjacency_list, PropertyTag>::const_type>::value_type\nget(PropertyTag, const adjacency_list& g, X x);\n```\n\n----------------------------------------\n\nTITLE: Including eval_if Header in C++\nDESCRIPTION: Shows the header file that needs to be included to use the eval_if metafunction in C++ code.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/eval_if.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/eval_if.h>\n```\n\n----------------------------------------\n\nTITLE: Declaring Static Rotate Variable in C++\nDESCRIPTION: Declares a static variable 'rotate' using the BOOST_HOF_DECLARE_STATIC_VAR macro, which creates an instance of the rotate_adaptor.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/rotate.hpp.txt#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_HOF_DECLARE_STATIC_VAR(rotate, detail::make<rotate_adaptor>);\n```\n\n----------------------------------------\n\nTITLE: Testing Generated Go Stemmers\nDESCRIPTION: This shell command runs tests for the generated Go stemmers. It is part of the validation process to check the correctness of generated code, ensuring the expected behavior of stemming operations with Snowball algorithms. The command requires a makefile setup for the Go environment. The command performs checks and reports any discrepancies found during testing.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/snowball/go/README.md#2025-04-22_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n$ make check_go\n```\n\n----------------------------------------\n\nTITLE: Generating the roff manual page\nDESCRIPTION: This snippet shows how to format the roff manual page prior to installation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/jemalloc/jemalloc/INSTALL.md#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n\"nroff -man -t doc/jemalloc.3\"\n```\n\n----------------------------------------\n\nTITLE: Project Definition\nDESCRIPTION: Defines the project named `taocpp-json` with a version of 1.0.0 and specifies CXX as the programming language.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/taocpp-json/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nproject (taocpp-json VERSION 1.0.0 LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: This snippet sets the minimum required CMake version for the project. It ensures that the CMake version used is compatible with the commands and features used in the script. Versions 3.5 to 3.16 are accepted.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/process/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n\"cmake_minimum_required(VERSION 3.5...3.16)\"\n```\n\n----------------------------------------\n\nTITLE: WebSocket Upgrade Request URI and Build Support Updates\nDESCRIPTION: This entry includes setting the URI in generated WebSocket Upgrade requests, renaming the echo server, updating documentation, fixing integer warnings in Windows builds, adding 32/64 bit Windows build support, updating the README, and adding repository and documentation banners, expanding the library's WebSocket capabilities and build compatibility.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/beast/CHANGELOG.md#2025-04-22_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: Including erase Metafunction Header in C++\nDESCRIPTION: Shows how to include the header file for the erase metafunction in a C++ program.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/erase.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/erase.hpp>\n```\n\n----------------------------------------\n\nTITLE: Specializing first_of_adaptor for single function case in C++\nDESCRIPTION: A specialization of first_of_adaptor for a single function, which simply inherits from the function type directly. This handles the base case for the template recursion.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/first_of.hpp.txt#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<class F>\nstruct first_of_adaptor<F> : F\n{\n    typedef first_of_adaptor fit_rewritable_tag;\n    BOOST_HOF_INHERIT_CONSTRUCTOR(first_of_adaptor, F);\n\n    struct failure\n    : failure_for<F>\n    {};\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Rotate Function Adaptor in C++\nDESCRIPTION: Defines the rotate_adaptor struct template that implements the rotation functionality. It inherits from detail::callable_base<F> and overloads the function call operator to perform the parameter rotation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/rotate.hpp.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<class F>\nstruct rotate_adaptor : detail::callable_base<F>\n{\n    typedef rotate_adaptor fit_rewritable1_tag;\n    BOOST_HOF_INHERIT_CONSTRUCTOR(rotate_adaptor, detail::callable_base<F>);\n\n    template<class... Ts>\n    constexpr const detail::callable_base<F>& base_function(Ts&&... xs) const noexcept\n    {\n        return boost::hof::always_ref(*this)(xs...);\n    }\n\n    struct rotate_failure\n    {\n        template<class Failure>\n        struct apply\n        {\n            template<class T, class... Ts>\n            struct of\n            : Failure::template of<Ts..., T>\n            {};\n        };\n    };\n\n    struct failure\n    : failure_map<rotate_failure, detail::callable_base<F>>\n    {};\n\n    BOOST_HOF_RETURNS_CLASS(rotate_adaptor);\n\n    template<class T, class... Ts>\n    constexpr BOOST_HOF_SFINAE_RESULT(const detail::callable_base<F>&, id_<Ts>..., id_<T>) \n    operator()(T&& x, Ts&&... xs) const BOOST_HOF_SFINAE_RETURNS\n    (\n        (BOOST_HOF_MANGLE_CAST(const detail::callable_base<F>&)(BOOST_HOF_CONST_THIS->base_function(xs...)))\n            (BOOST_HOF_FORWARD(Ts)(xs)..., BOOST_HOF_FORWARD(T)(x))\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Declaring Reverse Unique Template Algorithm in C++\nDESCRIPTION: Template declaration for the reverse_unique algorithm that takes a sequence, predicate, and optional inserter to transform sequences.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/reverse_unique.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<\n      typename Seq\n    , typename Pred\n    , typename In = |unspecified|\n    >\nstruct reverse_unique\n{\n    typedef |unspecified| type;\n};\n```\n\n----------------------------------------\n\nTITLE: Unstable Version Macro\nDESCRIPTION: Macro defined between stable releases to ensure ABI uniqueness through namespace permutation\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/macros/version.md#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nBOOST_OUTCOME_UNSTABLE_VERSION <number>\n```\n\n----------------------------------------\n\nTITLE: Compose Function Static Variable Declaration in C++\nDESCRIPTION: Declares a static variable 'compose' that creates compose_adaptor instances. This allows for a cleaner function-like interface when using the composition functionality in client code.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/compose.hpp.txt#2025-04-22_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_HOF_DECLARE_STATIC_VAR(compose, detail::make<compose_adaptor>);\n```\n\n----------------------------------------\n\nTITLE: Defining Macros for C++11 char16_t and char32_t Support in Boost.Locale\nDESCRIPTION: Macros that need to be defined when using Boost.Locale with C++11 char16_t and char32_t support. These macros enable the experimental features in the library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/doc/status_of_cpp0x_characters_support.txt#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#define BOOST_LOCALE_ENABLE_CHAR32_T\n#define BOOST_LOCALE_ENABLE_CHAR16_T\n```\n\n----------------------------------------\n\nTITLE: Configuring Polymorphic Tests in CMake\nDESCRIPTION: Sets up polymorphic archive tests for DLL exported classes, linking against required libraries for each test in the test list.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/serialization/CMake/CMakeLists.txt#2025-04-22_snippet_20\n\nLANGUAGE: CMake\nCODE:\n```\npolymorphic_archive_test(test_dll_exported polymorphic_derived1)\nforeach(test_name IN ITEMS ${test_list} )\n    target_link_libraries(${test_name} dll_polymorphic_derived2 dll_polymorphic_base serialization wserialization)\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Legacy ADL Event Hooks API (pre-v2.2)\nDESCRIPTION: Legacy ADL-discovered event hooks for intercepting result and outcome lifecycle events. These hooks are available when BOOST_OUTCOME_ENABLE_LEGACY_SUPPORT_FOR is set below 220.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/tutorial/advanced/hooks/_index.md#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nvoid hook_result_construction(T *, U &&) noexcept\nvoid hook_outcome_construction(T *, U &&) noexcept\nvoid hook_result_in_place_construction(T *, in_place_type_t<U>, Args &&...) noexcept\nvoid hook_outcome_in_place_construction(T *, in_place_type_t<U>, Args &&...) noexcept\nvoid hook_result_copy_construction(T *, U &&) noexcept\nvoid hook_outcome_copy_construction(T *, U &&) noexcept\nvoid hook_result_move_construction(T *, U &&) noexcept\nvoid hook_outcome_move_construction(T *, U &&) noexcept\n```\n\n----------------------------------------\n\nTITLE: Using __builtin_unreachable() to Indicate Narrow Contracts in C++\nDESCRIPTION: Shows how to use the GCC/Clang compiler builtin function __builtin_unreachable() to indicate to the compiler that certain code paths should never be reached, enabling additional optimizations.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/motivation/narrow_contract.md#2025-04-22_snippet_4\n\nLANGUAGE: c++\nCODE:\n```\nvoid h(int i) // expects: i >= 0\n{\n  if (i < 0) __builtin_unreachable();\n\n  // normal program logic follows ...\n}\n```\n\n----------------------------------------\n\nTITLE: Converting and Asserting Packed and Unpacked Pixels\nDESCRIPTION: This snippet demonstrates how to convert unpacked pixel channels to a packed format and verify the conversion with assertions. It shows the conversion of RGB channels into a RGB565 packed format using channel_convert functions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/pixel.rst#2025-04-22_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\n// Create a zero packed pixel and a full regular unpacked pixel.\nrgb565_pixel_t r565;\nrgb8_pixel_t rgb_full(255,255,255);\n\n// Convert all channels of the unpacked pixel to the packed one & assert the packed one is full\nget_color(r565,red_t())   = channel_convert<rgb565_channel0_t>(get_color(rgb_full,red_t()));\nget_color(r565,green_t()) = channel_convert<rgb565_channel1_t>(get_color(rgb_full,green_t()));\nget_color(r565,blue_t())  = channel_convert<rgb565_channel2_t>(get_color(rgb_full,blue_t()));\nassert(r565 == rgb565_pixel_t((uint16_t)65535));\n```\n\n----------------------------------------\n\nTITLE: Cleaning and Resetting Repository - Shell\nDESCRIPTION: Cleans up the cloned repository of Boost super-project and resets all modifications to start fresh. This is essential to resolve any conflicts or errors.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/CONTRIBUTING.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngit clean -xfd\n    git submodule foreach --recursive git clean -xfd\n    git reset --hard\n    git submodule foreach --recursive git reset --hard\n    git submodule update --init --recursive --jobs 8\n```\n\n----------------------------------------\n\nTITLE: Implementing BOOST_HOF_LIFT macro with platform-specific optimizations\nDESCRIPTION: Platform-specific implementations of the BOOST_HOF_LIFT macro for MSVC, Clang, and other compilers. Each implementation handles wrapping a template function in a function object differently based on compiler capabilities.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/include/boost/hof/lift.hpp.txt#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#if defined (_MSC_VER)\n#define BOOST_HOF_LIFT(...) (BOOST_HOF_STATIC_LAMBDA { BOOST_HOF_LIFT_CLASS(fit_local_lift_t, __VA_ARGS__); return fit_local_lift_t(); }())\n#elif defined (__clang__)\n#define BOOST_HOF_LIFT(...) (boost::hof::detail::make_lift_noexcept( \\\n    BOOST_HOF_STATIC_LAMBDA(auto&&... xs) \\\n    -> decltype((__VA_ARGS__)(BOOST_HOF_FORWARD(decltype(xs))(xs)...)) \\\n    { return (__VA_ARGS__)(BOOST_HOF_FORWARD(decltype(xs))(xs)...); }, \\\n    BOOST_HOF_STATIC_LAMBDA(auto&&... xs) { return BOOST_HOF_LIFT_IS_NOEXCEPT((__VA_ARGS__)(BOOST_HOF_FORWARD(decltype(xs))(xs)...)); } \\\n))\n#else\n#define BOOST_HOF_LIFT(...) (BOOST_HOF_STATIC_LAMBDA(auto&&... xs) BOOST_HOF_RETURNS((__VA_ARGS__)(BOOST_HOF_FORWARD(decltype(xs))(xs)...)))\n#endif\n```\n\n----------------------------------------\n\nTITLE: Exposing Data Members as Python Attributes\nDESCRIPTION: Demonstrates how to expose a C++ class data member as a read-only Python attribute using def_readonly.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/doc/article.rst#2025-04-22_snippet_9\n\nLANGUAGE: cpp\nCODE:\n```\nclass_<World>(\"World\", init<std::string>())\n    .def_readonly(\"msg\", &World::msg)\n    ...\n```\n\n----------------------------------------\n\nTITLE: Observing Value with Const LValue Reference in C++\nDESCRIPTION: A const lvalue reference observer method that returns a reference to the contained value. It first invokes NoValuePolicy::narrow_value_check() before returning the reference. Undefined behavior occurs if no value is present, unless handled by the policy. For void value_type, only a const void-returning overload exists.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/basic_result/assume_value_lvalue_const.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nconst value_type &assume_value() const & noexcept\n```\n\n----------------------------------------\n\nTITLE: Safe Iterator Property Map Operations\nDESCRIPTION: Free functions for accessing and modifying values in the safe iterator property map, including get and put operations.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/distributed_property_map.rst#2025-04-22_snippet_24\n\nLANGUAGE: C++\nCODE:\n```\nreference get(safe_iterator_property_map pm, const key_type& key);\nvoid put(safe_iterator_property_map pm, const key_type& key, const value_type& value);\n```\n\n----------------------------------------\n\nTITLE: Defining Text Substitution in reStructuredText\nDESCRIPTION: Creates a text substitution rule that replaces the |Configuration| reference with a `Configuration`_ link. This is a standard reStructuredText directive for creating reusable text elements.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/Macros-Configuration.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. |Configuration| replace:: `Configuration`_\n```\n\n----------------------------------------\n\nTITLE: Metafunction Requirements Table in ReStructuredText\nDESCRIPTION: Documents the requirements for the Metafunction concept in a ReStructuredText table. Shows two expression patterns for accessing the result type of a metafunction, either directly or with template arguments.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/doc/src/concepts.md.txt#2025-04-22_snippet_6\n\nLANGUAGE: rst\nCODE:\n```\n+--------------------------+--------------------------------------------+\n| Expression               | Requirements                               |\n+==========================+============================================+\n| ``f::type``              | The type is the result of the metafunction |\n+--------------------------+--------------------------------------------+\n| ``f<args...>::type``     | The type is the result of the metafunction |\n+--------------------------+--------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Defining BOOST_MPL_LIMIT_MAP_SIZE in C++\nDESCRIPTION: Shows the default definition of BOOST_MPL_LIMIT_MAP_SIZE if not already defined. It sets the limit to a default value (represented by |idic|).\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/LIMIT_MAP_SIZE.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n#if !defined(BOOST_MPL_LIMIT_MAP_SIZE)\n#   define BOOST_MPL_LIMIT_MAP_SIZE \\\n        |idic| \\\n/*/\n#endif\n```\n\n----------------------------------------\n\nTITLE: Deserializing basic_result from std::istream in C++\nDESCRIPTION: This code snippet demonstrates the serialization format for deserializing a basic_result object from a std::istream. It includes an unsigned int for flags, followed by a space, and then the value_type and error_type if they are set and not void.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/functions/iostream/result_operator_in.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n<unsigned int flags><space><value_type if set and not void><error_type if set and not void>\n```\n\n----------------------------------------\n\nTITLE: Running Tests with b2\nDESCRIPTION: Command to run tests using Boost's b2 build system with specific configuration options for the Boost Histogram project\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/histogram/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nb2 cxxstd=latest warnings-as-errors=on test\n```\n\n----------------------------------------\n\nTITLE: Implicit Copy Constructor from success_type<T> in C++\nDESCRIPTION: Implicit value-from-success-type-sugar copy constructor used to disambiguate the construction of the value type. If T is void, value_type will be default constructed. The constructor calls on_result_copy_construction() with this and the success_type parameter.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/types/basic_result/implicit_success_copy_constructor.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nbasic_result(const success_type<T> &)\n```\n\n----------------------------------------\n\nTITLE: Getting Item Size for NumPy Dtype in C++\nDESCRIPTION: Accessor method that returns an integer representing the byte size of the type described by the dtype object.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/python/doc/html/numpy/_sources/reference/dtype.rst.txt#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\n::\n\n  int get_itemsize() const;\n```\n\n----------------------------------------\n\nTITLE: Resolving Data Races in Tests - C++\nDESCRIPTION: This snippet indicates the presence of data races in 'arangodbtests', marking the necessity for resolution. This highlights a concern regarding testing and concurrent execution in ArangoDB.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tsan_arangodb_suppressions.txt#2025-04-22_snippet_8\n\nLANGUAGE: cpp\nCODE:\n```\n// TODO Fix data race in arangodbtests\nrace:DummyConnection::sendRequest\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Protect Metafunction in C++\nDESCRIPTION: Demonstrates the usage of 'protect' metafunction in comparison with unprotected bind expressions. It shows how 'protect' prevents the evaluation of a nested bind expression.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/protect.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nstruct f\n{\n    template< typename T1, typename T2 > struct apply\n    {\n        typedef T2 type;\n    };\n};\n \ntypedef bind< quote3<if_>,_1,_2,bind<f,_1,_2> > b1;\ntypedef bind< quote3<if_>,_1,_2,protect< bind<f,_1,_2> > > b2;\n \ntypedef apply_wrap2< b1,false_,char >::type r1;\ntypedef apply_wrap2< b2,false_,char >::type r2;\n \nBOOST_MPL_ASSERT(( is_same<r1,char> ));\nBOOST_MPL_ASSERT(( is_same<r2,protect< bind<f,_1,_2> > > ));\n```\n\n----------------------------------------\n\nTITLE: Including min_element Header in C++\nDESCRIPTION: Shows the header file that needs to be included to use the min_element algorithm in C++.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/min_element.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/min_element.hpp>\n```\n\n----------------------------------------\n\nTITLE: Resetting Ghost Cell Values in Distributed Property Map in C++\nDESCRIPTION: Method to replace the values stored in each ghost cell with the default value generated by the reduction operation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/distributed_property_map.rst#2025-04-22_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\nvoid reset();\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Process Group Communication\nDESCRIPTION: Collective operation to mark the end of a computation superstep, ensuring all processes exchange messages and are synchronized\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/process_group.rst#2025-04-22_snippet_12\n\nLANGUAGE: C++\nCODE:\n```\nvoid synchronize(const ProcessGroup& pg);\n```\n\n----------------------------------------\n\nTITLE: Integer Matrix Data in Plain Text Format\nDESCRIPTION: A matrix of integer values arranged in 8 rows and 4 columns. The matrix contains large positive and negative integers that may represent test data or inputs for numerical algorithms.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/polygon/example/input_data/primary/primary_058.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n0 8\n644245092 214748364 858993456 214748364\n-644245092 -214748364 0 644245092\n-858993456 -214748364 -429496728 -644245092\n0 644245092 -214748364 644245092\n644245092 644245092 0 644245092\n858993456 858993456 644245092 644245092\n644245092 214748364 644245092 644245092\n858993456 214748364 644245092 214748364\n```\n\n----------------------------------------\n\nTITLE: Defining CMake Minimum Version and Project\nDESCRIPTION: This snippet sets the minimum required version of CMake and defines the Boost Range project with its version and language.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/range/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.16)\n\nproject(boost_range VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Joint View - C++ Boost MPL\nDESCRIPTION: This snippet shows an example of using the joint_view structure to create a joint view of two integer ranges. It includes an assertion to validate the resulting joint_view against a combined range using BOOST_MPL_ASSERT.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/joint_view.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ntypedef joint_view<\n      range_c<int,0,10>\n    , range_c<int,10,15>\n    > numbers;\n\nBOOST_MPL_ASSERT(( equal< numbers, range_c<int,0,15> > ));\n```\n\n----------------------------------------\n\nTITLE: Using is_error_code_available Variable Template in C++\nDESCRIPTION: This code snippet shows the variable template alias for the `is_error_code_available<T>` trait. It provides a convenient way to access the trait's value without using `::value` syntax.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/reference/traits/is_error_code_available.md#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nis_error_code_available_v<T>\n```\n\n----------------------------------------\n\nTITLE: Building Boost.Build Driver Program - Shell\nDESCRIPTION: Runs scripts to bootstrap and build the `b2` driver program for the Boost.Build engine, which is necessary for building Boost libraries.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./bootstrap.sh\n    ./b2 --version\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for arango_common_rest_handler\nDESCRIPTION: This snippet sets the private include directories for the 'arango_common_rest_handler' library, ensuring that the necessary header files from specified directories are available for compilation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/RestHandler/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(arango_common_rest_handler PRIVATE\n  \"${PROJECT_SOURCE_DIR}/arangod\"\n  \"${PROJECT_SOURCE_DIR}/${ENTERPRISE_INCLUDE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: End Iterator for Reversible Pointer Container in C++\nDESCRIPTION: This function returns an iterator pointing to the end of the container, providing access for both mutable and immutable contexts and does not throw exceptions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/reversible_ptr_container.rst#2025-04-22_snippet_7\n\nLANGUAGE: C++\nCODE:\n```\niterator end();\n```\n\nLANGUAGE: C++\nCODE:\n```\nconst_iterator end() const;\n```\n\n----------------------------------------\n\nTITLE: Snappy Compression Library Windows Patch\nDESCRIPTION: Modifications to Snappy's CMake configuration to ensure proper instruction set compatibility on Windows and enable RTTI\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/README_maintainers.md#2025-04-22_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\ndiff --git a/3rdParty/snappy/snappy-1.1.9/CMakeLists.txt b/3rdParty/snappy/snappy-1.1.9/CMakeLists.txt\nindex 672561e62fc..d6341fd1d7a 100644\n--- a/3rdParty/snappy/snappy-1.1.9/CMakeLists.txt\n+++ b/3rdParty/snappy/snappy-1.1.9/CMakeLists.txt\n@@ -26,7 +26,7 @@\n # (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n \n-cmake_minimum_required(VERSION 3.1)\n+cmake_minimum_required(VERSION 3.21)\n project(Snappy VERSION 1.1.9 LANGUAGES C CXX)\n```\n\n----------------------------------------\n\nTITLE: Including fold header in C++\nDESCRIPTION: Shows the header file to include for using the fold algorithm.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/fold.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/fold.hpp>\n```\n\n----------------------------------------\n\nTITLE: V8 GN Build Configuration\nDESCRIPTION: Build configuration parameters for generating V8 static libraries\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/v8-build/README.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dcheck_always_on\": false,\n  \"is_component_build\": false,\n  \"is_debug\": false,\n  \"target_cpu\": \"x64\",\n  \"use_custom_libcxx\": false,\n  \"v8_monolithic\": true,\n  \"v8_use_external_startup_data\": false,\n  \"v8_optimized_debug\": true,\n  \"v8_enable_webassembly\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Tuple Support to Print Function in C++\nDESCRIPTION: Extends the print function with a third overload to handle tuples using the for_each_tuple helper function.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/doc/src/example_print.md.txt#2025-04-22_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\nBOOST_HOF_STATIC_LAMBDA_FUNCTION(print) = first_of(\n    [](const auto& x) -> decltype(std::cout << x, void())\n    {\n        std::cout << x << std::endl;\n    },\n    [](const auto& range) -> decltype(std::cout << *adl::adl_begin(range), void())\n    {\n        for(const auto& x:range) std::cout << x << std::endl;\n    },\n    [](const auto& tuple)\n    {\n        for_each_tuple(tuple, [](const auto& x)\n        {\n            std::cout << x << std::endl;\n        });\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Including greater_equal Metafunction Headers in C++\nDESCRIPTION: Specifies the necessary headers to include when using the greater_equal metafunction in a C++ program.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/greater_equal.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/greater_equal.hpp>\n#include <boost/mpl/comparison.hpp>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Random Access Iterator Type Expression for next\nDESCRIPTION: Shows the type expression for the next operation on a Random Access Iterator, which returns another Random Access Iterator in amortized constant time.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/RandomAccessIterator.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nnext<i>::type\n```\n\n----------------------------------------\n\nTITLE: Linking arango_zkd with the Main ArangoDB Library\nDESCRIPTION: Links the arango_zkd library with the main arango library, making ArangoDB's core functionality available to the ZKD helper implementation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/Zkd/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(arango_zkd arango)\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Other_Lowercase Characters\nDESCRIPTION: Lists Unicode code points classified as Other_Lowercase characters with their corresponding character classes. These include small modifier letters, Latin subscript letters, and small Roman numerals. The list contains 159 total code points.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/spirit/workbench/unicode/PropList.txt#2025-04-22_snippet_13\n\nLANGUAGE: unicode\nCODE:\n```\n02B0..02B8    ; Other_Lowercase # Lm   [9] MODIFIER LETTER SMALL H..MODIFIER LETTER SMALL Y\n02C0..02C1    ; Other_Lowercase # Lm   [2] MODIFIER LETTER GLOTTAL STOP..MODIFIER LETTER REVERSED GLOTTAL STOP\n02E0..02E4    ; Other_Lowercase # Lm   [5] MODIFIER LETTER SMALL GAMMA..MODIFIER LETTER SMALL REVERSED GLOTTAL STOP\n0345          ; Other_Lowercase # Mn       COMBINING GREEK YPOGEGRAMMENI\n037A          ; Other_Lowercase # Lm       GREEK YPOGEGRAMMENI\n1D2C..1D61    ; Other_Lowercase # Lm  [54] MODIFIER LETTER CAPITAL A..MODIFIER LETTER SMALL CHI\n1D78          ; Other_Lowercase # Lm       MODIFIER LETTER CYRILLIC EN\n1D9B..1DBF    ; Other_Lowercase # Lm  [37] MODIFIER LETTER SMALL TURNED ALPHA..MODIFIER LETTER SMALL THETA\n2090..2094    ; Other_Lowercase # Lm   [5] LATIN SUBSCRIPT SMALL LETTER A..LATIN SUBSCRIPT SMALL LETTER SCHWA\n2170..217F    ; Other_Lowercase # Nl  [16] SMALL ROMAN NUMERAL ONE..SMALL ROMAN NUMERAL ONE THOUSAND\n24D0..24E9    ; Other_Lowercase # So  [26] CIRCLED LATIN SMALL LETTER A..CIRCLED LATIN SMALL LETTER Z\n2C7D          ; Other_Lowercase # Lm       MODIFIER LETTER CAPITAL V\nA770          ; Other_Lowercase # Lm       MODIFIER LETTER US\n\n# Total code points: 159\n```\n\n----------------------------------------\n\nTITLE: Including bitor_ Metafunction Headers in C++\nDESCRIPTION: Specifies the necessary header files to include when using the bitor_ metafunction in C++ code.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/bitor_.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/bitor.hpp>\n#include <boost/mpl/bitwise.hpp>\n```\n\n----------------------------------------\n\nTITLE: Configuring Compiler Flags and Building Targets\nDESCRIPTION: Configures compiler flags to suppress specific warnings. Iterates over example files to create build executables and link them against Boost if required.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hana/example/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(CheckCXXCompilerFlag)\ncheck_cxx_compiler_flag(-Wno-unused-parameter BOOST_HANA_HAS_WNO_UNUSED_PARAMETER)\ncheck_cxx_compiler_flag(-Wno-unused-lambda-capture BOOST_HANA_HAS_WNO_UNUSED_LAMBDA_CAPTURE)\n\nforeach(_file IN LISTS EXAMPLES)\n    boost_hana_target_name_for(_target \"${_file}\")\n    add_executable(${_target} EXCLUDE_FROM_ALL \"${_file}\")\n    add_test(${_target} \"${CMAKE_CURRENT_BINARY_DIR}/${_target}\")\n    boost_hana_set_test_properties(${_target})\n    if (_file IN_LIST EXAMPLES_REQUIRING_BOOST)\n        target_link_libraries(${_target} PRIVATE Boost::boost)\n    endif()\n    if (BOOST_HANA_HAS_WNO_UNUSED_PARAMETER)\n        target_compile_options(${_target} PRIVATE -Wno-unused-parameter)\n    endif()\n    if (BOOST_HANA_HAS_WNO_UNUSED_LAMBDA_CAPTURE)\n        target_compile_options(${_target} PRIVATE -Wno-unused-lambda-capture)\n    endif()\n    add_dependencies(examples ${_target})\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Defining the Distributed Adjacency List Class\nDESCRIPTION: This snippet defines a class template for a distributed adjacency list that partitions graph vertices across multiple processes. It specifies template parameters for edge and vertex storage types, properties, and graph characteristics.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/distributed_adjacency_list.rst#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<typename OutEdgeListS, typename ProcessGroup, typename VertexListS,\n         typename DirectedS, typename VertexProperty, typename EdgeProperty, \n         typename GraphProperty, typename EdgeListS>\nclass adjacency_list<OutEdgeListS, \n                     distributedS<ProcessGroup, VertexListS>,\n                     DirectedS, VertexProperty,\n                     EdgeProperty, GraphProperty, EdgeListS>;\n```\n\n----------------------------------------\n\nTITLE: Setting Target Properties for Exclusion\nDESCRIPTION: This snippet sets the property 'EXCLUDE_FROM_ALL' to TRUE for the executable target 'arangodbtests-iresearch', ensuring it won't be included in default builds unless explicitly specified.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/IResearch/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset_target_properties(arangodbtests-iresearch PROPERTIES EXCLUDE_FROM_ALL TRUE)\n```\n\n----------------------------------------\n\nTITLE: Setting Library Linkage Preference for Executables\nDESCRIPTION: Determines which library (shared or static) should be linked to executables. This sets up a variable that points to the shared library when available, falling back to static when needed.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/lz4/build/cmake/CMakeLists.txt#2025-04-22_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\n# link to shared whenever possible, to static otherwise\nif(BUILD_SHARED_LIBS)\n  set(LZ4_LINK_LIBRARY lz4_shared)\nelse()\n  set(LZ4_LINK_LIBRARY lz4_static)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Server Components to CMake Build\nDESCRIPTION: Adds server and server-flex subdirectories to the CMake build configuration, enabling compilation of these server components.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/beast/example/advanced/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory (server)\nadd_subdirectory (server-flex)\n```\n\n----------------------------------------\n\nTITLE: Constructing File Handles Using 'make' Pattern in C++\nDESCRIPTION: Illustrates the 'make' pattern for file handle construction, involving a two-stage process that first prepares the constructor arguments and then invokes the construction. This approach is preferred for its clarity and modularity, enhancing code readability and maintainability. It requires a 'make<file_handle>' initiation and a subsequent call operator invocation to complete the construction.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/tutorial/advanced/constructors/metaprogrammg1.md#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n{{% snippet \"constructors.cpp\" \"construct-use\" %}}\n```\n\n----------------------------------------\n\nTITLE: Defining BOOST MPL Template Configuration Macro\nDESCRIPTION: Configuration macro that signals whether the compiler supports BOOST_MPL_HAS_XXX_TEMPLATE_DEF and BOOST_MPL_HAS_XXX_TEMPLATE_NAMED_DEF introspection functionality. When defined, indicates template introspection features are not available.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/CFG_NO_HAS_XXX_TEMPLATE.rst#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n// #define BOOST_MPL_CFG_NO_HAS_XXX_TEMPLATE\n```\n\n----------------------------------------\n\nTITLE: Mutable Channel Concept Definition\nDESCRIPTION: Defines the MutableChannelConcept in C++. This concept refines the ChannelConcept by adding the requirements of Swappable and Assignable. Mutable channels are those that can be modified after their initial creation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/channel.rst#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\n  concept MutableChannelConcept<ChannelConcept T> : Swappable<T>, Assignable<T> {};\n```\n\n----------------------------------------\n\nTITLE: C++ Template Function for Accumulation\nDESCRIPTION: A template function that accumulates values of type unsigned long into an unsigned int reference. This function was called 200 times during profiling but consumed negligible execution time.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/serialization/doc/profile1.txt#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nvoid accumulate<unsigned long>(unsigned int&, unsigned long const&)\n```\n\n----------------------------------------\n\nTITLE: Defining Transposed Type Concept in C++\nDESCRIPTION: This snippet defines the HasTransposedTypeConcept which is used to denote types that can be transposed, providing flexible orientation in locators and image views, particularly important for imaging applications.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/gil/doc/design/pixel_locator.rst#2025-04-22_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\n  concept HasTransposedTypeConcept<typename T> {\n    typename transposed_type<T>;\n        where Metafunction<transposed_type<T> >;\n  };\n```\n\n----------------------------------------\n\nTITLE: Defining Reversible Pointer Container Class - C++\nDESCRIPTION: This snippet defines the reversible_ptr_container class template in the Boost library, which allows managing collections of smart pointers and raw pointers. It supports various operations like construction, destruction, iteration, and basic container requirements, such as size and emptiness checks.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/reversible_ptr_container.rst#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nnamespace boost\n{\n    template\n    < \n        class T, \n        class CloneAllocator,\n        class VoidPtrContainer\n    >\n    class reversible_ptr_container \n    {\n    public: // `typedefs`_\n        typedef  T*                                           value_type;\n        typedef  T&                                           reference;\n        typedef  const T&                                     const_reference;\n        typedef  *implementation defined*                       iterator;\n        typedef  *implementation defined*                       const_iterator;\n        typedef  typename VoidPtrContainer::differnce_type    difference_type; \n        typedef  typename VoidPtrContainer::size_type         size_type;\n        typedef  typename VoidPtrContainer::allocator_type    allocator_type;\n        typedef  *implementation defined*                       reverse_iterator;\n        typedef  *implementation defined*                       const_reverse_iterator;\n        typedef  *implementation defined*                       auto_type;\n    \n    public: // `construct/copy/destroy`_\n        reversible_ptr_container();\n        explicit reversible_ptr_container( const reversible_ptr_container& r );                \n        template< class Derived >\n        explicit reversible_ptr_container( const reversible_ptr_container<Derived>& r );\n        explicit reversible_ptr_container( compatible-smart-ptr<reversible_ptr_container> r );\n        template< class InputIterator >\n        reversible_ptr_container( InputIterator first, InputIterator last );\n        \n        ~reversible_ptr_container();\n\n        reversible_ptr_container&  operator=( const reversible_ptr_container& r );\n        template<class Derived>\n        reversible_ptr_container&  operator=( const reversible_ptr_container<Derived>& r );\n        reversible_ptr_container&  operator=( compatible-smart-ptr<reversible_ptr_container> r );\n        allocator_type             get_allocator() const;                                      \n    \n    public: // `iterators`_\n        iterator                begin();\n        const_iterator          begin() const;\n        iterator                end();\n        const_iterator          end() const;\n        reverse_iterator        rbegin();\n        const_reverse_iterator  rbegin() const;\n        reverse_iterator        rend();\n        const_reverse_iterator  rend() const;\n        \n    public: // `capacity`_\n        size_type  size() const;\n        size_type  max_size() const;\n        bool       empty() const;       \n    \n    public: // `modifiers`_\n        void                     swap( reversible_ptr_container& r );\n        void                     clear():\n        VoidPtrContainer&        base();\n        const VoidPtrContainer&  base() const;\n    \n    public: // `pointer container requirements`_\n        auto_type                                replace( iterator position, T* x );\n        template< class U >\n        auto_type                                replace( iterator position, compatible-smart-ptr<U> x );    \n        compatible-smart-ptr<reversible_ptr_container>  clone() const;    \n        compatible-smart_ptr<reversible_ptr_container>  release();\n        auto_type                                release( iterator position );\n        \n    }; //  class 'reversible_ptr_container'\n\n    // `comparison`_            \n    template < class T, class CA, class VPC >\n    bool operator==( const reversible_ptr_container<T,CA,VPC>& x,\n                     const reversible_ptr_container<T,CA,VPC>& y);\n    \n    template < class T, class CA, class VPC  >\n    bool operator<( const reversible_ptr_container<T,CA,VPC>& x,\n                    const reversible_ptr_container<T,CA,VPC>& y);\n    \n    template < class T, class CA, class VPC  >\n    bool operator!=( const reversible_ptr_container<T,CA,VPC>& x,\n                     const reversible_ptr_container<T,CA,VPC>& y);\n    \n    template < class T,  class CA, class VPC >\n    bool operator>( const reversible_ptr_container<T,CA,VPC>& x,\n                    const reversible_ptr_container<T,CA,VPC>& y);\n    \n    template < class T,  class CA, class VPC >\n    bool operator>=( const reversible_ptr_container<T,CA,VPC>& x,\n                     const reversible_ptr_container<T,CA,VPC>& y);\n    \n    template < class T,  class CA, class VPC >\n    bool operator<=( const reversible_ptr_container<T,CA,VPC>& x,\n                     const reversible_ptr_container<T,CA,VPC>& y);\n\n    template< class T,  class CA, class VPC  >\n    void swap( reversible_ptr_container<T,CA,VPC>& x,\n               reversible_ptr_container<T,CA,VPC>& y );\n\n    // cloneability_ \n    template< class T,  class CA, class VPC >\n    reversible_ptr_container<T,CA,VPC>*\n    new_clone( const reversible_ptr_container<T,CA,VPC>& r );\n\n    // `null predicate`_\n    template< class Iterator >\n    bool is_null( Iterator i );\n    \n    // `serialization`_\n    template<class Archive, class T, class CA, class VPC>\n    void serialize( Archive& ar, reversible_ptr_container<T,C�,VPC>& c, const unsigned int version );\n\n} // namespace 'boost'\n\n```\n\n----------------------------------------\n\nTITLE: Bidi_Control Character Property Definitions in Unicode 5.2.0\nDESCRIPTION: Lists all Unicode code points classified as Bidi_Control (bidirectional text control characters), which help manage text direction. Contains 7 total code points with their Unicode categories and descriptions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/spirit/workbench/unicode/PropList.txt#2025-04-22_snippet_1\n\nLANGUAGE: Plain Text\nCODE:\n```\n200E..200F    ; Bidi_Control # Cf   [2] LEFT-TO-RIGHT MARK..RIGHT-TO-LEFT MARK\n202A..202E    ; Bidi_Control # Cf   [5] LEFT-TO-RIGHT EMBEDDING..RIGHT-TO-LEFT OVERRIDE\n\n# Total code points: 7\n```\n\n----------------------------------------\n\nTITLE: Modern ASIO Coroutine Usage Example\nDESCRIPTION: Demonstrates modern ASIO usage with coroutines using use_awaitable token.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/recipes/asio-integration-1-70.md#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nsize_t bytes = co_await socket_.async_read_some(\n  boost::asio::buffer(buffer_),\n  boost::asio::use_awaitable);\n```\n\n----------------------------------------\n\nTITLE: Checking Reference Count with Assertions - C++\nDESCRIPTION: This snippet contains operators that assert the reference count in 'SharedAqlItemBlockPtr'. The assertion is a read operation that is treated as racy, which is acceptable here since it only serves for validation purposes without affecting operation.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tsan_arangodb_suppressions.txt#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n// These operators contain an assertion that checks the refCount.\n// That read operation is racy, but since it is just an assert we don't care!\nrace:SharedAqlItemBlockPtr::operator*\nrace:SharedAqlItemBlockPtr::operator->\n```\n\n----------------------------------------\n\nTITLE: Configuring Markdown Support in Doxygen\nDESCRIPTION: Setting to enable Markdown formatting support in documentation comments. When enabled, Doxygen pre-processes comments according to Markdown format. Default value is YES, but set to NO in this configuration.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/sort/doc/doxygen/sort_doxyfile.txt#2025-04-22_snippet_12\n\nLANGUAGE: text\nCODE:\n```\nMARKDOWN_SUPPORT       = NO\n```\n\n----------------------------------------\n\nTITLE: Sorting with Projection in C++\nDESCRIPTION: Demonstrates using the 'proj' adaptor to simplify sorting objects by a specific attribute.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/src/more_examples.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nstd::sort(std::begin(people), std::end(people),\n        proj(&Person::year_of_birth, _ < _));\n```\n\n----------------------------------------\n\nTITLE: Required Module Import for concat-map\nDESCRIPTION: Shows how to import the concat-map module in a Node.js environment using the require statement.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/js/node/node_modules/minimatch/node_modules/concat-map/README.markdown#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar concatMap = require('concat-map')\n```\n\n----------------------------------------\n\nTITLE: Referencing Example Actor Implementations in C++\nDESCRIPTION: Mentions example actor implementations that can be found in specific C++ files. These examples demonstrate how to create custom actors with different functionalities.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/lib/Actor/README.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nTrivialActor.cpp, SpawnActor.cpp or PingPongActor.cpp\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: Sets the include directories for the `arango_inspection_test_helper` library. This ensures that the header files in the specified directories are available during compilation for targets that link to this library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/Inspection/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(arango_inspection_test_helper\n  INTERFACE\n  include)\n```\n\n----------------------------------------\n\nTITLE: Standard C++ Types Reference\nDESCRIPTION: References to standard C++ types used in Boost.Locale implementation, including std::locale::facet, std::num_put, char16_t, char32_t, uint16_t, uint32_t, and char.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/doc/rationale.txt#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nstd::locale::facet\n```\n\nLANGUAGE: cpp\nCODE:\n```\nstd::num_put\n```\n\nLANGUAGE: cpp\nCODE:\n```\nchar16_t\n```\n\nLANGUAGE: cpp\nCODE:\n```\nchar32_t\n```\n\nLANGUAGE: cpp\nCODE:\n```\nuint16_t\n```\n\nLANGUAGE: cpp\nCODE:\n```\nuint32_t\n```\n\nLANGUAGE: cpp\nCODE:\n```\nchar\n```\n\n----------------------------------------\n\nTITLE: Blacklisting Functions with Known Races in C++\nDESCRIPTION: This code specifies functions from the boost::lockfree and v8 namespaces that are to be blacklisted due to known race conditions. Using mangled names ensures precise targeting of these functions, preventing instrumentation overhead. The file contributes to performance optimization and stability by excluding problematic functions from certain operations.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tsan_blacklist.txt#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n# blacklist functions with known races to avoid instrumentation and the overhead involved\n# note that we have to used mangled names here!\n\n# boost::lockfree::* namespace\nfun:_ZN5boost8lockfree*\n\n# v8::* namespace\nfun:ZN2v8*\nfun:_ZN2v8*\n```\n\n----------------------------------------\n\nTITLE: Setting IDE Folder Property\nDESCRIPTION: Sets the IDE folder property for the http-server-fast target for better organization in IDE project views.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/beast/example/http/server/fast/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset_property(TARGET http-server-fast PROPERTY FOLDER \"example-http-server\")\n```\n\n----------------------------------------\n\nTITLE: Iterating Over METIS Graph Data in C++\nDESCRIPTION: Details the edge_iterator class for traversing edges and the edge_weight_iterator class for traversing edge weights in a METIS graph. These iterators facilitate the enumeration of graph attributes crucial for constructing adjacency lists.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/metis.rst#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\nmetis_reader::edge_iterator\n\nAn `Input Iterator`_ that enumerates the edges in the METIS graph, and is suitable for use as the `EdgeIterator` of an adjacency_list_.\nThe `value_type` of this iterator is a pair of vertex numbers.\n\n```\n\nLANGUAGE: C++\nCODE:\n```\nmetis_reader::edge_weight_iterator\n\nAn `Input Iterator`_ that enumerates the edge weights in the METIS\ngraph. The `value_type` of this iterator is `edge_weight_type`. If\nthe edges in the METIS graph are unweighted, the result of\ndereferencing this iterator will always be zero.\n\n```\n\n----------------------------------------\n\nTITLE: Using bitor_ Metafunction in C++ with Integral Constants\nDESCRIPTION: Demonstrates how to use the bitor_ metafunction with integral constants, including assertions to verify the results of bitwise OR operations.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/bitor_.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntypedef integral_c<unsigned,0> u0;\ntypedef integral_c<unsigned,1> u1;\ntypedef integral_c<unsigned,2> u2;\ntypedef integral_c<unsigned,8> u8;\ntypedef integral_c<unsigned,0xffffffff> uffffffff;\n\nBOOST_MPL_ASSERT_RELATION( (bitor_<u0,u0>::value), ==, 0 );\nBOOST_MPL_ASSERT_RELATION( (bitor_<u1,u0>::value), ==, 1 );\nBOOST_MPL_ASSERT_RELATION( (bitor_<u0,u1>::value), ==, 1 );\nBOOST_MPL_ASSERT_RELATION( (bitor_<u0,uffffffff>::value), ==, 0xffffffff );\nBOOST_MPL_ASSERT_RELATION( (bitor_<u1,uffffffff>::value), ==, 0xffffffff );\nBOOST_MPL_ASSERT_RELATION( (bitor_<u8,uffffffff>::value), ==, 0xffffffff );\n```\n\n----------------------------------------\n\nTITLE: Installing LZ4 to a Staging Directory\nDESCRIPTION: This command shows how to install LZ4 to a specific staging directory using the DESTDIR environment variable with Meson and Ninja.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/lz4/contrib/meson/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nDESTDIR=./staging ninja install\n```\n\n----------------------------------------\n\nTITLE: Running gyp-next directly\nDESCRIPTION: This snippet demonstrates how to run the gyp-next package directly without installation, showcasing the command to display help information for the gyp tool.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/v8-build/gyp/README.md#2025-04-22_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n\"pipx run gyp-next --help\"\n```\n\n----------------------------------------\n\nTITLE: GCC-3.03 Performance Results with -g Flag\nDESCRIPTION: This snippet presents the performance results of printf, ostream, stored format, and format operations when compiled with gcc-3.03 and the -g flag. The snippet shows the execution times and ratios relative to printf and ostream times.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/format/benchmark/results.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n/***\nprintf time         :1.2\nostream time        :2.84,  = 2.36667 * printf \nstored format time  :8.91,  = 3.13732 * stream \nformat time         :15.35, = 5.40493 * stream \nformat3 time        :21.83, = 7.68662 * stream \n***/\n```\n\n----------------------------------------\n\nTITLE: Using object-inspect with Circular References\nDESCRIPTION: Demonstrates how to use object-inspect with objects containing circular references, where an object contains a reference to itself.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/js/node/node_modules/qs/node_modules/object-inspect/readme.markdown#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar inspect = require('object-inspect');\nvar obj = { a: 1, b: [3,4] };\nobj.c = obj;\nconsole.log(inspect(obj));\n```\n\n----------------------------------------\n\nTITLE: Using-Declarations for Boost.Parameter Keywords\nDESCRIPTION: This snippet uses using-declarations to make Boost.Parameter keywords available without full qualification. This is more concise at the call site but can be verbose for the using-declarations themselves.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/parameter/doc/index.rst#2025-04-22_snippet_46\n\nLANGUAGE: cpp\nCODE:\n```\n        **using lib::_name;\n        using lib::_index;**\n\n        int x = lib::f(_name = \"jill\", _index = 1);\n```\n\nLANGUAGE: cpp\nCODE:\n```\nint main() { return 0; }\n```\n\n----------------------------------------\n\nTITLE: Setting Consistency Model for Distributed Property Map in C++\nDESCRIPTION: Method to set the consistency model of the distributed property map, which takes effect on the next synchronization step.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/distributed_property_map.rst#2025-04-22_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\nvoid set_consistency_model(int model);\n```\n\n----------------------------------------\n\nTITLE: Max Size Method for Reversible Pointer Container in C++\nDESCRIPTION: This method returns the maximum number of elements that the container can hold, providing useful information for memory allocation and ensuring no exceptions are thrown.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/ptr_container/doc/reversible_ptr_container.rst#2025-04-22_snippet_11\n\nLANGUAGE: C++\nCODE:\n```\nsize_type max_size() const;\n```\n\n----------------------------------------\n\nTITLE: STL Input Iterator Transform Operations\nDESCRIPTION: Lists STL algorithms that require Input Iterator with Readable capabilities for transformation operations.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/iterator/doc/new-iter-concepts.rst#2025-04-22_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\ntransform\n```\n\n----------------------------------------\n\nTITLE: Formatting local and UTC times with boost::locale::format\nDESCRIPTION: This snippet shows how to display both local and UTC times using the 'local' and 'gmt' specifiers in boost::locale::format.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/locale/doc/localized_text_formatting.txt#2025-04-22_snippet_6\n\nLANGUAGE: C++\nCODE:\n```\ncout << format(\"Local time is: {1,time,local}, universal time is {1,time,gmt}\") % time;\n```\n\n----------------------------------------\n\nTITLE: Configuring Undocumented Class Hiding in Doxygen\nDESCRIPTION: This option specifies whether undocumented classes are hidden from the class hierarchy. Setting it to YES hides the undocumented classes.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/sort/doc/doxygen/sort_doxyfile.txt#2025-04-22_snippet_32\n\nLANGUAGE: Doxygen\nCODE:\n```\n\"HIDE_UNDOC_CLASSES     = NO\"\n```\n\n----------------------------------------\n\nTITLE: Demonstrating distance metafunction usage in C++\nDESCRIPTION: Demonstrates how to use the distance metafunction to calculate the distance between iterators in a range of integers from 0 to 10.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/distance.rst#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntypedef range_c<int,0,10>::type range;\ntypedef begin<range>::type first;\ntypedef end<range>::type last;\n\nBOOST_MPL_ASSERT_RELATION( (distance<first,last>::value), ==, 10);\n```\n\n----------------------------------------\n\nTITLE: Decorator Function Template in C++\nDESCRIPTION: Shows the template declaration for decorators, which are functions that return function adaptors of potentially unspecified types.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/hof/doc/html/_sources/doc/src/definitions.md.txt#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate<class... Ts>\nFunctionAdaptor Decorator(Ts...);\n```\n\n----------------------------------------\n\nTITLE: LZ4 File Format Structure ASCII Diagram\nDESCRIPTION: ASCII diagram illustrating the file format structure including magic bytes, compressed blocks, and jump table with offsets for random access.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/lz4/examples/dictionaryRandomAccess.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n+------+---------+     +---------+---+----------+     +----------+-----+\n| TEST | Block#1 | ... | Block#N | 4 | Offset#1 | ... | Offset#N | N+1 |\n+------+---------+     +---------+---+----------+     +----------+-----+\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost Log File Sink\nDESCRIPTION: Sets up a text file sink for logging, specifying the file name, auto-flush option, and custom format for log entries.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/log/example/settings_file/settings.txt#2025-04-22_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[Sinks.2]\n\nDestination=TextFile\nFileName=test.log\nAutoFlush=true\nFormat=\"[%TimeStamp%] [%Severity%] [%Tag%] %Message%\"\n```\n\n----------------------------------------\n\nTITLE: Setting up CMake and Project Configuration for Boost Units\nDESCRIPTION: Defines the minimum CMake version required and sets up the project name and version information for Boost Units.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/units/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.16)\n\nproject(boost_units VERSION \"${BOOST_SUPERPROJECT_VERSION}\" LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Including the equal algorithm header in C++\nDESCRIPTION: This snippet shows how to include the header file for the 'equal' algorithm in a C++ program.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/equal.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/equal.hpp>\n```\n\n----------------------------------------\n\nTITLE: Configuring Pure Replication2 Test Sources\nDESCRIPTION: Defines test sources for the pure Replication2 components, focusing on algorithms and core functionality.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/tests/Replication2/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(arango_tests_replication2_pure OBJECT\n  ReplicatedLog/Algorithms/CalcCommitIndexTest.cpp\n  ReplicatedLog/Algorithms/DetectConflictTest.cpp\n  ReplicatedLog/Algorithms/LogCommonTest.cpp\n  ReplicatedLog/Components/CompactionManagerTest.cpp\n  ReplicatedLog/Components/FollowerCommitManagerTest.cpp\n  ReplicatedLog/Components/InMemoryLogTest.cpp\n  ReplicatedLog/Components/SnapshotManagerTest.cpp\n  ReplicatedLog/Components/StorageManagerTest.cpp\n  ReplicatedLog/Components/TermIndexMapping.cpp\n  ReplicatedLog/LogFollower/AppendEntriesTest.cpp\n  ReplicatedLog/ReplicatedLogConnectTest.cpp\n  ReplicatedLog/Supervision/ParticipantsHealthTest.cpp\n  ReplicatedLog/Supervision/SupervisionSimulationTest.cpp\n  ReplicatedLog/Supervision/SupervisionTest.cpp\n  ReplicatedLog/Components/SnapshotManagerTest.cpp\n  ReplicatedLog/AppendEntriesBatchTest.cpp\n  ReplicatedLog/LeaderAppendEntriesTest.cpp\n  ReplicatedLog/MultiTermTest.cpp\n  ReplicatedLog/RewriteLogTest.cpp)\n```\n\n----------------------------------------\n\nTITLE: Including or_ Metafunction Headers in C++\nDESCRIPTION: Specifies the necessary header files to include for using the or_ metafunction in C++ code.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/mpl/doc/src/refmanual/or_.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <boost/mpl/or.hpp>\n#include <boost/mpl/logical.hpp>\n```\n\n----------------------------------------\n\nTITLE: Basic CMake Project Setup for Boost JSON\nDESCRIPTION: Initializes CMake project settings, version handling, and core configuration options for Boost JSON library.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/json/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.8...3.16)\n\nset(BOOST_JSON_VERSION 2)\nif(BOOST_SUPERPROJECT_VERSION)\n    set(BOOST_JSON_VERSION ${BOOST_SUPERPROJECT_VERSION})\nendif()\n\nproject(boost_json VERSION \"${BOOST_JSON_VERSION}\" LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Base Graph Accessor Methods\nDESCRIPTION: Methods to retrieve the underlying distributed graph, providing both const and non-const access\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/graph_parallel/doc/local_subgraph.rst#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\nDistributedGraph&         base()               { return g; }\nconst DistributedGraph&   base() const         { return g; }\n```\n\n----------------------------------------\n\nTITLE: Conditional Inclusion of Test Subdirectory\nDESCRIPTION: This snippet conditionally adds a subdirectory for tests if the build is configured for testing and the corresponding CMakeLists.txt file exists. This allows for modular testing of the Boost Property Map functionality and is helpful in maintaining isolated test cases.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/property_map/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(BUILD_TESTING AND EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/test/CMakeLists.txt\")\n\n  add_subdirectory(test)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Character Properties for Common Script\nDESCRIPTION: This code snippet defines Unicode character properties for various symbols in the Common script. It includes code points, general categories, and character descriptions.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/spirit/workbench/unicode/Scripts.txt#2025-04-22_snippet_3\n\nLANGUAGE: Unicode\nCODE:\n```\nFE5D          ; Common # Ps       SMALL LEFT TORTOISE SHELL BRACKET\nFE5E          ; Common # Pe       SMALL RIGHT TORTOISE SHELL BRACKET\nFE5F..FE61    ; Common # Po   [3] SMALL NUMBER SIGN..SMALL ASTERISK\nFE62          ; Common # Sm       SMALL PLUS SIGN\nFE63          ; Common # Pd       SMALL HYPHEN-MINUS\nFE64..FE66    ; Common # Sm   [3] SMALL LESS-THAN SIGN..SMALL EQUALS SIGN\nFE68          ; Common # Po       SMALL REVERSE SOLIDUS\nFE69          ; Common # Sc       SMALL DOLLAR SIGN\nFE6A..FE6B    ; Common # Po   [2] SMALL PERCENT SIGN..SMALL COMMERCIAL AT\n```\n\n----------------------------------------\n\nTITLE: HTTP and Email Headers List\nDESCRIPTION: A complete reference list of HTTP, email, and protocol-specific headers used in web communications and message handling systems. Includes standard headers for content negotiation, authentication, caching, security, and message routing.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/beast/tools/field.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nAccept\nAccept-Additions\nAccept-Charset\nAccept-Datetime\nAccept-Encoding\nAccept-Features\nAccept-Language\nAccept-Patch\nAccept-Post\nAccept-Ranges\nAccess-Control\nAccess-Control-Allow-Credentials\nAccess-Control-Allow-Headers\nAccess-Control-Allow-Methods\nAccess-Control-Allow-Origin\nAccess-Control-Expose-Headers\nAccess-Control-Max-Age\nAccess-Control-Request-Headers\nAccess-Control-Request-Method\nAge\nA-IM\nAllow\nALPN\nAlso-Control\nAlternate-Recipient\nAlternates\nAlt-Svc\nAlt-Used\nApparently-To\nApply-To-Redirect-Ref\nApproved\nArchive\nArchived-At\nArticle-Names\nArticle-Updates\nAuthentication-Control\nAuthentication-Info\nAuthentication-Results\nAuthorization\nAutoforwarded\nAutosubmitted\nAuto-Submitted\nBase\nBcc\nBody\nCache-Control\nCalDAV-Timezones\nCancel-Key\nCancel-Lock\nCc\nC-Ext\nClose\nC-Man\nComments\nCompliance\nConnection\nContent-Alternative\nContent-Base\nContent-Description\nContent-Disposition\nContent-Duration\nContent-Encoding\nContent-features\nContent-ID\nContent-Identifier\nContent-Language\nContent-Length\nContent-Location\nContent-MD5\nContent-Range\nContent-Return\nContent-Script-Type\nContent-Style-Type\nContent-Transfer-Encoding\nContent-Type\nContent-Version\nControl\nConversion\nConversion-With-Loss\nCookie\nCookie2\nC-Opt\nCost\nC-PEP\nC-PEP-Info\nDASL\nDate\nDate-Received\nDAV\nDefault-Style\nDeferred-Delivery\nDelivery-Date\nDelta-Base\nDepth\nDerived-From\nDestination\nDifferential-ID\nDigest\nDiscarded-X400-IPMS-Extensions\nDiscarded-X400-MTS-Extensions\nDisclose-Recipients\nDisposition-Notification-Options\nDisposition-Notification-To\nDistribution\nDKIM-Signature\nDL-Expansion-History\nDowngraded-Bcc\nDowngraded-Cc\nDowngraded-Disposition-Notification-To\nDowngraded-Final-Recipient\nDowngraded-From\nDowngraded-In-Reply-To\nDowngraded-Mail-From\nDowngraded-Message-Id\nDowngraded-Original-Recipient\nDowngraded-Rcpt-To\nDowngraded-References\nDowngraded-Reply-To\nDowngraded-Resent-Bcc\nDowngraded-Resent-Cc\nDowngraded-Resent-From\nDowngraded-Resent-Reply-To\nDowngraded-Resent-Sender\nDowngraded-Resent-To\nDowngraded-Return-Path\nDowngraded-Sender\nDowngraded-To\nEDIINT-Features\nEesst-Version\nEncoding\nEncrypted\nErrors-To\nETag\nExpect\nExpires\nExpiry-Date\nExt\nFollowup-To\nForwarded\nFrom\nGenerate-Delivery-Report\nGetProfile\nHobareg\nHost\nHTTP2-Settings\nIf\nIf-Match\nIf-Modified-Since\nIf-None-Match\nIf-Range\nIf-Schedule-Tag-Match\nIf-Unmodified-Since\nIM\nImportance\nIncomplete-Copy\nInjection-Date\nInjection-Info\nIn-Reply-To\nJabber-ID\nKeep-Alive\nKeywords\nLabel\nLanguage\nLast-Modified\nLatest-Delivery-Time\nLines\nLink\nList-Archive\nList-Help\nList-ID\nList-Owner\nList-Post\nList-Subscribe\nList-Unsubscribe\nList-Unsubscribe-Post\nLocation\nLock-Token\nMan\nMax-Forwards\nMemento-Datetime\nMessage-Context\nMessage-ID\nMessage-Type\nMeter\nMethod-Check\nMethod-Check-Expires\nMIME-Version\nMMHS-Acp127-Message-Identifier\nMMHS-Authorizing-Users\nMMHS-Codress-Message-Indicator\nMMHS-Copy-Precedence\nMMHS-Exempted-Address\nMMHS-Extended-Authorisation-Info\nMMHS-Handling-Instructions\nMMHS-Message-Instructions\nMMHS-Message-Type\nMMHS-Originator-PLAD\nMMHS-Originator-Reference\nMMHS-Other-Recipients-Indicator-CC\nMMHS-Other-Recipients-Indicator-To\nMMHS-Primary-Precedence\nMMHS-Subject-Indicator-Codes\nMT-Priority\nNegotiate\nNewsgroups\nNNTP-Posting-Date\nNNTP-Posting-Host\nNon-Compliance\nObsoletes\nOpt\nOptional\nOptional-WWW-Authenticate\nOrdering-Type\nOrganization\nOrigin\nOriginal-Encoded-Information-Types\nOriginal-From\nOriginal-Message-ID\nOriginal-Recipient\nOriginal-Sender\nOriginal-Subject\nOriginator-Return-Address\nOverwrite\nP3P\nPath\nPEP\nPep-Info\nPICS-Label\nPosition\nPosting-Version\nPragma\nPrefer\nPreference-Applied\nPrevent-NonDelivery-Report\nPriority\nPrivicon\nProfileObject\nProtocol\nProtocol-Info\nProtocol-Query\nProtocol-Request\nProxy-Authenticate\nProxy-Authentication-Info\nProxy-Authorization\nProxy-Connection\nProxy-Features\nProxy-Instruction\nPublic\nPublic-Key-Pins\nPublic-Key-Pins-Report-Only\nRange\nReceived\nReceived-SPF\nRedirect-Ref\nReferences\nReferer\nReferer-Root\nRelay-Version\nReply-By\nReply-To\nRequire-Recipient-Valid-Since\nResent-Bcc\nResent-Cc\nResent-Date\nResent-From\nResent-Message-ID\nResent-Reply-To\nResent-Sender\nResent-To\nResolution-Hint\nResolver-Location\nRetry-After\nReturn-Path\nSafe\nSchedule-Reply\nSchedule-Tag\nSecurity-Scheme\nSec-Fetch-Dest\nSec-Fetch-Mode\nSec-Fetch-Site\nSec-Fetch-User\nSec-WebSocket-Accept\nSec-WebSocket-Extensions\nSec-WebSocket-Key\nSec-WebSocket-Protocol\nSec-WebSocket-Version\nSee-Also\nSender\nSensitivity\nServer\nSet-Cookie\nSet-Cookie2\nSetProfile\nSIO-Label\nSIO-Label-History\nSLUG\nSoapAction\nSolicitation\nStatus-URI\nStrict-Transport-Security\nSubject\nSubOK\nSubst\nSummary\nSupersedes\nSurrogate-Capability\nSurrogate-Control\nTCN\nTE\nTimeout\nTitle\nTo\nTopic\nTrailer\nTransfer-Encoding\nTTL\nUA-Color\nUA-Media\nUA-Pixels\nUA-Resolution\nUA-Windowpixels\nUpgrade\nUrgency\nURI\nUser-Agent\nVariant-Vary\nVary\nVBR-Info\nVersion\nVia\nWant-Digest\nWarning\nWWW-Authenticate\nX400-Content-Identifier\nX400-Content-Return\nX400-Content-Type\nX400-MTS-Identifier\nX400-Originator\nX400-Received\nX400-Recipients\nX400-Trace\nX-Archived-At\nX-Device-Accept\nX-Device-Accept-Charset\nX-Device-Accept-Encoding\nX-Device-Accept-Language\nX-Device-User-Agent\nX-Frame-Options\nX-Mittente\nX-PGP-Sig\nXref\nX-Ricevuta\nX-Riferimento-Message-ID\nX-TipoRicevuta\nX-Trasporto\nX-VerificaSicurezza\n```\n\n----------------------------------------\n\nTITLE: Program Output Example\nDESCRIPTION: Example output showing successful string conversions for numbers up to 999 and buffer overflow error for larger numbers.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/outcome/doc/src/content/experimental/c-api/example2.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nto_string(9) fills buffer with '9' of 1 characters\nto_string(99) fills buffer with '99' of 2 characters\nto_string(999) fills buffer with '999' of 3 characters\nto_string(9999) failed with error code 105 (No buffer space available)\n```\n\n----------------------------------------\n\nTITLE: Setting Up CMake Environment and Testing\nDESCRIPTION: Initializes the CMake build environment by setting include directories and enabling testing functionality.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/boost/1.78.0/libs/yap/example/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude_directories(${CMAKE_HOME_DIRECTORY})\n\ninclude(CTest)\n\nenable_testing()\n\nadd_custom_target(run_examples COMMAND ${CMAKE_CTEST_COMMAND} -VV -C ${CMAKE_CFG_INTDIR})\n```\n\n----------------------------------------\n\nTITLE: Creating static ArangoDB scheduler library\nDESCRIPTION: This snippet defines a static library named `arango_scheduler` and lists the C++ source files that are part of it. These files contain the implementation of the scheduler and thread pool functionalities within ArangoDB.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/arangod/Scheduler/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(arango_scheduler STATIC\n  LockfreeThreadPool.cpp\n  Scheduler.cpp\n  SchedulerFeature.cpp\n  SchedulerMetrics.cpp\n  SimpleThreadPool.cpp\n  SupervisedScheduler.cpp\n  ThreadPoolScheduler.cpp\n  WorkStealingThreadPool.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Defining S2 Geometry Library Target\nDESCRIPTION: Creates the main S2 Geometry library target and specifies its source files and dependencies.\nSOURCE: https://github.com/arangodb/arangodb/blob/devel/3rdParty/s2geometry/master/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(s2\n            src/s2/encoded_s2cell_id_vector.cc\n            src/s2/encoded_s2point_vector.cc\n            # ... (many more source files)\n            src/s2/util/units/length-units.cc)\n\ntarget_link_libraries(\n    s2\n    ${GFLAGS_LIBRARIES} ${GLOG_LIBRARIES} ${OPENSSL_LIBRARIES}\n    absl::base\n    absl::btree\n    # ... (more Abseil libraries)\n    ${CMAKE_THREAD_LIBS_INIT})\n```"
  }
]