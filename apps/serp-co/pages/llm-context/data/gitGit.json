[
  {
    "owner": "git",
    "repo": "git",
    "content": "TITLE: Assertion-Based Auxiliary Functions in Clar C Test Suites (Good Style)\nDESCRIPTION: Exemplifies the recommended Clar test structure in C, where helper functions perform assertions directly using cl_assert_, improving error reporting and localizing failures. The auxiliary function check_string asserts that processing succeeds and that the result matches an expected value. It relies on process_string, my_function, and standard C functions. All parameters and test logic are embedded within the same test context. Inputs are const char* strings and failures print descriptive messages. This structure leads to clearer, more maintainable tests.\nSOURCE: https://github.com/git/git/blob/master/t/unit-tests/clar/README.md#_snippet_9\n\nLANGUAGE: C\nCODE:\n```\n/*\n * Good style: auxiliary functions perform assertions\n */\n\nstatic void check_string(const char *str)\n{\n    const char *aux = process_string(str);\n\n    cl_assert_(\n        aux != NULL,\n        \"String processing failed\"\n    );\n\n    cl_assert_(\n        strcmp(my_function(aux), str) == 0,\n        \"String differs after processing\"\n    );\n}\n\nvoid test_example__a_test_with_auxiliary_methods(void)\n{\n    check_string(\"foo\");\n    check_string(\"bar\");\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Clar Test Suite Functions (C)\nDESCRIPTION: Shows an example of a Clar test suite file written in C (`adding.c`). It demonstrates how to include the `clar.h` header, define `test_suitename__initialize` and `test_suitename__cleanup` functions for setting up and tearing down test state, and write individual test functions using `cl_assert_` for assertions.\nSOURCE: https://github.com/git/git/blob/master/t/unit-tests/clar/README.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n/* adding.c for the \"Adding\" suite */\n#include \"clar.h\"\n\nstatic int *answer;\n\nvoid test_adding__initialize(void)\n{\n    answer = malloc(sizeof(int));\n    cl_assert_(answer != NULL, \"No memory left?\");\n    *answer = 42;\n}\n\nvoid test_adding__cleanup(void)\n{\n    free(answer);\n}\n\nvoid test_adding__make_sure_math_still_works(void)\n{\n    cl_assert_(5 > 3, \"Five should probably be greater than three\");\n    cl_assert_(-5 < 2, \"Negative numbers are small, I think\");\n    cl_assert_(*answer == 42, \"The universe is doing OK. And the initializer too.\");\n}\n```\n\n----------------------------------------\n\nTITLE: Building Clar Test Executable (Shell)\nDESCRIPTION: Illustrates the shell commands needed to compile a Clar-based test suite into an executable. It involves running the `generate.py` script (mixer) to create test metadata (`clar.suite`) and then using GCC to compile the Clar source files (`clar.c`), the main program (`main.c`), and the test suite files (like `adding.c`). Assumes `$CLAR_PATH` is set.\nSOURCE: https://github.com/git/git/blob/master/t/unit-tests/clar/README.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncd tests\n$CLAR_PATH/generate.py .\nWritten `clar.suite` (1 suites)\ngcc -I. clar.c main.c adding.c -o testit\n```\n\n----------------------------------------\n\nTITLE: Translating Messages with gettext and eval_gettext in Git Shell Scripts\nDESCRIPTION: Demonstrates the use of the 'gettext' and 'eval_gettext' shell functions provided by Git's shell i18n support. 'gettext' translates constant message strings, while 'eval_gettext' handles variable interpolation within messages. Both functions require prior initialization of the shell i18n environment with 'git-sh-i18n'. Parameters are the string to be translated (with optional variable usage for 'eval_gettext'). Output is the localized message printed to standard output.\nSOURCE: https://github.com/git/git/blob/master/po/README.md#_snippet_11\n\nLANGUAGE: Shell\nCODE:\n```\n# For constant interface messages:\ngettext \"A message for the user\"; echo\n\n# To interpolate variables:\ndetails=\"oh noes\"\neval_gettext \"An error occurred: \\$details\"; echo\n```\n\n----------------------------------------\n\nTITLE: Compiling Clar Tests with GCC (Shell)\nDESCRIPTION: Shows a typical GCC command used to compile Clar test suites. It includes the current directory for headers (`-I.`), lists the required Clar source files (`clar.c`, `main.c`) and all test suite source files (e.g., `suite1.c`, `test2.c`), and outputs an executable (`run_tests`).\nSOURCE: https://github.com/git/git/blob/master/t/unit-tests/clar/README.md#_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ngcc -I. clar.c main.c suite1.c test2.c -o run_tests\n```\n\n----------------------------------------\n\nTITLE: Running Clar generate.py Mixer (Shell)\nDESCRIPTION: Provides the command-line usage for the Clar mixer script, `generate.py`. This script scans the specified directory (e.g., '.') for C test suite files and generates the `clar.suite` metadata file, which is included during compilation.\nSOURCE: https://github.com/git/git/blob/master/t/unit-tests/clar/README.md#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n./generate.py .\n```\n\n----------------------------------------\n\nTITLE: Marking and Translating Strings with _() in Git using C\nDESCRIPTION: This snippet shows how to mark and translate a string using the _() macro in Git's C codebase. The _() macro is provided via builtin.h, pulling in gettext support. Usage requires including builtin.h at the top of your file. The sample prints a message including a parameter, and the macro ensures the message is available for translation. The first argument is the string to be translated, and additional parameters like 'hex' may be interpolated into the formatted message.\nSOURCE: https://github.com/git/git/blob/master/po/README.md#_snippet_7\n\nLANGUAGE: C\nCODE:\n```\nprintf(_(\"HEAD is now at %s\"), hex);\n```\n\n----------------------------------------\n\nTITLE: Defining and Configuring clar_test Executable Target in CMake\nDESCRIPTION: Creates an executable target named 'clar_test', sets its C standard to C90 (required, extensions off), and conditionally treats warnings as errors for non-MSVC compilers. It specifies source files ('main.c', 'sample.c', and the generated 'clar.suite'), defines 'CLAR_FIXTURE_PATH', sets compiler options (conditionally '/W4' or '-Wall'), adds include directories, and links the 'clar' library.\nSOURCE: https://github.com/git/git/blob/master/t/unit-tests/clar/test/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(clar_test)\nset_target_properties(clar_test PROPERTIES\n\tC_STANDARD 90\n\tC_STANDARD_REQUIRED ON\n\tC_EXTENSIONS OFF\n)\n\n# MSVC generates all kinds of warnings. We may want to fix these in the future\n# and then unconditionally treat warnings as errors.\nif(NOT MSVC)\n\tset_target_properties(clar_test PROPERTIES\n\t\tCOMPILE_WARNING_AS_ERROR ON\n\t)\nendif()\n\ntarget_sources(clar_test PRIVATE\n\tmain.c\n\tsample.c\n\t\"${CMAKE_CURRENT_BINARY_DIR}/clar.suite\"\n)\ntarget_compile_definitions(clar_test PRIVATE\n\tCLAR_FIXTURE_PATH=\"${CMAKE_CURRENT_SOURCE_DIR}/resources/\"\n)\ntarget_compile_options(clar_test PRIVATE\n\t$<IF:$<CXX_COMPILER_ID:MSVC>,/W4,-Wall>\n)\ntarget_include_directories(clar_test PRIVATE\n\t\"${CMAKE_SOURCE_DIR}\"\n\t\"${CMAKE_CURRENT_BINARY_DIR}\"\n)\ntarget_link_libraries(clar_test clar)\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Build: Credential Helpers\nDESCRIPTION: This option defines which credential helpers to include.  The value is an array. Available choices include 'libsecret', 'netrc', 'osxkeychain', and 'wincred'.\nSOURCE: https://github.com/git/git/blob/master/meson_options.txt#_snippet_9\n\nLANGUAGE: meson\nCODE:\n```\noption('credential_helpers', type: 'array', value: [ ], choices: [ 'libsecret', 'netrc', 'osxkeychain', 'wincred' ],\n  description: 'Contributed features to include.')\n```\n\n----------------------------------------\n\nTITLE: Setting C Standard Properties for Target (CMake)\nDESCRIPTION: Configures compiler properties for the `clar` target. It sets the required C standard to C90 (`C_STANDARD 90`), makes this requirement mandatory (`C_STANDARD_REQUIRED ON`), and disables compiler extensions (`C_EXTENSIONS OFF`). This ensures the code is compiled strictly according to the C90 standard.\nSOURCE: https://github.com/git/git/blob/master/t/unit-tests/clar/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset_target_properties(clar PROPERTIES\n\tC_STANDARD 90\n\tC_STANDARD_REQUIRED ON\n\tC_EXTENSIONS OFF\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Build: Pager Environment\nDESCRIPTION: This snippet sets the environment variables used when spawning the pager. The environment string includes options for the pager like 'LESS=FRX LV=-c'.\nSOURCE: https://github.com/git/git/blob/master/meson_options.txt#_snippet_3\n\nLANGUAGE: meson\nCODE:\n```\noption('pager_environment', type: 'string', value: 'LESS=FRX LV=-c',\n  description: 'Environment used when spawning the pager')\n```\n\n----------------------------------------\n\nTITLE: Defining Interface Library and Adding Source Files (CMake)\nDESCRIPTION: Creates an `INTERFACE` library target named `clar`. This target does not produce a build artifact but is used to propagate include directories, compile definitions, and other usage requirements to targets that link against it. The `target_sources` command adds the specified header and source files as `INTERFACE` sources, meaning they are not compiled into the `clar` target itself but are part of its definition for consumers.\nSOURCE: https://github.com/git/git/blob/master/t/unit-tests/clar/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(clar INTERFACE)\ntarget_sources(clar INTERFACE\n\tclar.c\n\tclar.h\n\tclar/fixtures.h\n\tclar/fs.h\n\tclar/print.h\n\tclar/sandbox.h\n\tclar/summary.h\n)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Including Testing Infrastructure (CMake)\nDESCRIPTION: This block conditionally includes testing infrastructure. The outer `if` checks if this is the top-level project build. If so, it includes the CTest module for enabling testing features. The inner `if` checks the `BUILD_TESTING` variable (often linked to the `BUILD_TESTS` option). If testing is enabled, it includes the `test` subdirectory, presumably containing the test CMakeLists.txt.\nSOURCE: https://github.com/git/git/blob/master/t/unit-tests/clar/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(CMAKE_PROJECT_NAME STREQUAL PROJECT_NAME)\n\tinclude(CTest)\n\tif(BUILD_TESTING)\n\t\tadd_subdirectory(test)\n\tendif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Generic Clar Suite Init/Cleanup (C)\nDESCRIPTION: Shows the required C function signatures for test suite initialization and cleanup methods in Clar. `test_suitename__initialize` is called before each test in the suite, and `test_suitename__cleanup` is called after each test, even if a test fails.\nSOURCE: https://github.com/git/git/blob/master/t/unit-tests/clar/README.md#_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nvoid test_suitename__initialize(void)\n{\n    /* init */\n}\n\nvoid test_suitename__cleanup(void)\n{\n    /* cleanup */\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Build: Build Tweaks\nDESCRIPTION: These are general build tweaks.  Includes an option to enable upcoming breaking changes and an option to use gettext from Homebrew on macOS.\nSOURCE: https://github.com/git/git/blob/master/meson_options.txt#_snippet_12\n\nLANGUAGE: meson\nCODE:\n```\noption('breaking_changes', type: 'boolean', value: false,\n  description: 'Enable upcoming breaking changes.')\n```\n\nLANGUAGE: meson\nCODE:\n```\noption('macos_use_homebrew_gettext', type: 'boolean', value: true,\n  description: 'Use gettext from Homebrew instead of the slightly-broken system-provided one.')\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Build: Runtime Binary Prefix\nDESCRIPTION: This snippet configures whether ancillary tooling and support files are resolved relative to the runtime binary location. If set to `true`, the binary's location is used.\nSOURCE: https://github.com/git/git/blob/master/meson_options.txt#_snippet_5\n\nLANGUAGE: meson\nCODE:\n```\noption('runtime_prefix', type: 'boolean', value: false,\n  description: 'Resolve ancillary tooling and support files relative to the location of the runtime binary instead of hard-coding them into the binary.')\n```\n\n----------------------------------------\n\nTITLE: Using Global State in Clar Suite Init/Cleanup (C)\nDESCRIPTION: Demonstrates how to use static global variables within Clar test suites to maintain shared state between initialize, cleanup, and test functions. This example uses a global `git_repository` pointer for state management across status tests, including opening/closing a repository.\nSOURCE: https://github.com/git/git/blob/master/t/unit-tests/clar/README.md#_snippet_5\n\nLANGUAGE: c\nCODE:\n```\nstatic git_repository *_repository;\n\nvoid test_status__initialize(void)\n{\n    create_tmp_repo(STATUS_REPO);\n    git_repository_open(_repository, STATUS_REPO);\n}\n\nvoid test_status__cleanup(void)\n{\n    git_repository_close(_repository);\n    git_path_rm(STATUS_REPO);\n}\n\nvoid test_status__simple_test(void)\n{\n    /* do something with _repository */\n}\n```\n\n----------------------------------------\n\nTITLE: Locating Shell Interpreter on Windows\nDESCRIPTION: Finds the 'sh' executable from Git Bash installation path for running shell scripts during build process. If not found, it triggers a fatal error instructing the user to install Git for Windows.\nSOURCE: https://github.com/git/git/blob/master/contrib/buildsystems/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfind_program(SH_EXE sh PATHS \"C:/Program Files/Git/bin\" \"$ENV{LOCALAPPDATA}/Programs/Git/bin\")\nif(NOT SH_EXE)\n\tmessage(FATAL_ERROR \"sh: shell interpreter was not found in your path, please install one.\"\n\t\t\"On Windows, you can get it as part of 'Git for Windows' install at https://gitforwindows.org/\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Build: Backends\nDESCRIPTION: These options define which backend to use for certain functionalities like CSPRNG, HTTPS, SHA1/SHA256 hashing, and Zlib compression. They're 'combo' type options.\nSOURCE: https://github.com/git/git/blob/master/meson_options.txt#_snippet_11\n\nLANGUAGE: meson\nCODE:\n```\noption('csprng_backend', type: 'combo', value: 'auto', choices: ['auto', 'arc4random', 'arc4random_bsd', 'getrandom', 'getentropy', 'rtlgenrandom', 'openssl', 'urandom'],\n  description: 'The backend to use for generating cryptographically-secure pseudo-random numbers.')\n```\n\nLANGUAGE: meson\nCODE:\n```\noption('https_backend', type: 'combo', value: 'auto', choices: ['auto', 'openssl', 'CommonCrypto', 'none'],\n  description: 'The HTTPS backend to use when connecting to remotes.')\n```\n\nLANGUAGE: meson\nCODE:\n```\noption('sha1_backend', type: 'combo', choices: ['openssl', 'block', 'sha1dc', 'CommonCrypto'], value: 'sha1dc',\n  description: 'The backend used for hashing objects with the SHA1 object format.')\n```\n\nLANGUAGE: meson\nCODE:\n```\noption('sha1_unsafe_backend', type: 'combo', choices: ['openssl', 'block', 'CommonCrypto', 'none'], value: 'none',\n  description: 'The backend used for hashing data with the SHA1 object format in case no cryptographic security is needed.')\n```\n\nLANGUAGE: meson\nCODE:\n```\noption('sha256_backend', type: 'combo', choices: ['openssl', 'nettle', 'gcrypt', 'block'], value: 'block',\n  description: 'The backend used for hashing objects with the SHA256 object format.')\n```\n\nLANGUAGE: meson\nCODE:\n```\noption('zlib_backend', type: 'combo', choices: ['auto', 'zlib', 'zlib-ng'], value: 'auto',\n  description: 'The backend used for compressing objects and other data.')\n```\n\n----------------------------------------\n\nTITLE: Implementing Auxiliary Functions with Error Codes in C (Bad Style)\nDESCRIPTION: Demonstrates a C test where an auxiliary function, check_string, returns error codes to signal test failures. This approach is discouraged, as errors in helpers must be manually checked in the test body. The code depends on C standard functions like strcmp and assumes the presence of process_string and my_function. Key inputs are a const char* string. The test expects check_string to return 0 on pass, -1 on failure, and uses cl_must_pass_ for assertions with messages. Outputs indicate test pass/fail state, but failure points are less explicit.\nSOURCE: https://github.com/git/git/blob/master/t/unit-tests/clar/README.md#_snippet_8\n\nLANGUAGE: C\nCODE:\n```\n/*\n * Bad style: auxiliary functions return an error code\n */\n\nstatic int check_string(const char *str)\n{\n    const char *aux = process_string(str);\n\n    if (aux == NULL)\n        return -1;\n\n    return strcmp(my_function(aux), str) == 0 ? 0 : -1;\n}\n\nvoid test_example__a_test_with_auxiliary_methods(void)\n{\n    cl_must_pass_(\n        check_string(\"foo\"),\n        \"String differs after processing\"\n    );\n\n    cl_must_pass_(\n        check_string(\"bar\"),\n        \"String differs after processing\"\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Build Option for Tests (CMake)\nDESCRIPTION: Defines a boolean option `BUILD_TESTS` which defaults to `ON`. This option controls whether the test executable will be built, allowing users to enable or disable testing via CMake configuration.\nSOURCE: https://github.com/git/git/blob/master/t/unit-tests/clar/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\noption(BUILD_TESTS \"Build test executable\" ON)\n```\n\n----------------------------------------\n\nTITLE: Defining Git Filter for Location Stripping in PO Files - Shell\nDESCRIPTION: This snippet defines Git filters that clean PO files by removing location metadata from translation entries to save repository space. Two variants are provided: one that strips both filenames and location data, and another that preserves filenames but removes locations (requires gettext 0.20 or higher). These filters use 'msgcat' utility and are set globally in Git config under 'filter.gettext-no-location.clean'. It assumes gettext tools and a Git environment configured to utilize filters on commits and checkouts.\nSOURCE: https://github.com/git/git/blob/master/po/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngit config --global filter.gettext-no-location.clean \\\n           \"msgcat --no-location -\"\n```\n\nLANGUAGE: shell\nCODE:\n```\ngit config --global filter.gettext-no-location.clean \\\n           \"msgcat --add-location=file -\"\n```\n\n----------------------------------------\n\nTITLE: Finding Python Interpreter in CMake\nDESCRIPTION: Locates the Python interpreter executable using CMake's `find_package` command. This is required to execute a Python script later in the build process. The 'Interpreter' component must be found.\nSOURCE: https://github.com/git/git/blob/master/t/unit-tests/clar/test/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(Python COMPONENTS Interpreter REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: Adding libgit dependency in Cargo.toml\nDESCRIPTION: Shows how to include the libgit crate as a dependency in a Rust project's Cargo.toml file. The dependency is specified with version 0.1.0.\nSOURCE: https://github.com/git/git/blob/master/contrib/libgit-rs/README.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\nlibgit = \"0.1.0\"\n```\n\n----------------------------------------\n\nTITLE: Handling Pluralization with Q_() in Git using C\nDESCRIPTION: This snippet demonstrates the use of the Q_() macro, a wrapper for ngettext(), for pluralized messages in C. Q_() allows translation of strings with singular and plural forms depending on a count. Requires including builtin.h or gettext.h for macro definition. Parameters are the singular message, the plural message, and the count (e.g., number_of_commits). Output depends on the value of the count, and the correct translated form is automatically selected.\nSOURCE: https://github.com/git/git/blob/master/po/README.md#_snippet_8\n\nLANGUAGE: C\nCODE:\n```\nprintf(Q_(\"%d commit\", \"%d commits\", number_of_commits));\n```\n\n----------------------------------------\n\nTITLE: Marking Translatable Strings in C with Contextual Translator Comments\nDESCRIPTION: This snippet demonstrates use of gettext in C source code to mark error messages for translation with translator comments providing context. The comment before the call explains the placeholder '%s' and options. The 'die' function outputs a formatted error message using the '_()' gettext wrapper around the string. It requires a C environment with gettext integration and the translation macros defined. This pattern is commonly used for porcelain Git commands for user-facing messages.\nSOURCE: https://github.com/git/git/blob/master/po/README.md#_snippet_6\n\nLANGUAGE: c\nCODE:\n```\n/* TRANSLATORS: %s will be \"revert\" or \"cherry-pick\" */\ndie(_(\"%s: Unable to write new index file\"), action_name(opts));\n```\n\n----------------------------------------\n\nTITLE: Marking Static Strings for Later Translation with N_() in Git (C)\nDESCRIPTION: This snippet illustrates the use of the N_() macro in C to mark static strings for translation. N_() is used in static initializations where the translated string will be looked up and used later in code. Requires inclusion of builtin.h for the macro's definition. The macro does not translate at the point of marking; instead, it flags the string for extraction by gettext tools. Subsequently, code retrieves the translated version via _().\nSOURCE: https://github.com/git/git/blob/master/po/README.md#_snippet_9\n\nLANGUAGE: C\nCODE:\n```\nstatic const char *reset_type_names[] = {\n    N_(\"mixed\"), N_(\"soft\"), N_(\"hard\"), N_(\"merge\"), N_(\"keep\"), NULL\n};\n```\n\nLANGUAGE: C\nCODE:\n```\ndie(_(\"%s reset is not allowed in a bare repository\"),\n      _(reset_type_names[reset_type]));\n```\n\n----------------------------------------\n\nTITLE: Updating Existing PO Translation Files - Shell\nDESCRIPTION: This snippet updates an existing PO translation file 'po/XX.po' to include new or changed translatable strings from the upstream source. Running 'make po-update' regenerates the 'po/git.pot' template and merges changes into the given PO file with 'msgmerge --add-location --backup=off -U', which preserves file locations to help translators with context. This process requires 'make', 'msgmerge' from gettext, and writable PO files. The command facilitates synchronization between source and translation files.\nSOURCE: https://github.com/git/git/blob/master/po/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmake po-update PO_FILE=po/XX.po\n```\n\n----------------------------------------\n\nTITLE: Initializing a New Language PO File - Shell\nDESCRIPTION: This snippet initializes a new PO file for a given language locale 'XX' using the minimal core POT template. It runs the 'make po-init' target specifying the output PO file path, e.g., 'po/XX.po'. This requires the makefile and the core template 'po/git-core.pot' to be available. The output is a newly created PO file with minimal translatable messages ready for translation. The 'XX' locale code can follow forms such as 'de' or 'pt_BR'.\nSOURCE: https://github.com/git/git/blob/master/po/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake po-init PO_FILE=po/XX.po\n```\n\n----------------------------------------\n\nTITLE: Generating Translation Template Files with Make - Shell\nDESCRIPTION: This snippet shows how to generate POT template files used as the base for translation files in Git. The 'po/git.pot' is the full translation template, while 'po/git-core.pot' contains a minimal set of core messages for new translations. It requires a build environment with 'make' configured to support these targets. The command outputs the respective POT file that contributors use to initialize or update PO files. No input parameters are required beyond make targets; the output are POT files for translation scaffolding.\nSOURCE: https://github.com/git/git/blob/master/po/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake po/git.pot\n```\n\nLANGUAGE: shell\nCODE:\n```\nmake po/git-core.pot\n```\n\n----------------------------------------\n\nTITLE: Testing Translations with Make and git-po-helper Tool - Shell\nDESCRIPTION: This snippet documents testing procedures after translation updates. Running 'make' in the top-level directory compiles the PO files with 'msgfmt --check' to catch common translation errors. Additionally, the 'git-po-helper' utility is used to check PO files and commits for quality and correctness. Users run 'git-po-helper check-po po/XX.po' and 'git-po-helper check-commits <rev-list-opts>' to validate their contributions. This requires GNU gettext for msgfmt and the git-po-helper utility to be installed.\nSOURCE: https://github.com/git/git/blob/master/po/README.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nmake\n```\n\nLANGUAGE: shell\nCODE:\n```\ngit-po-helper check-po po/XX.po\n```\n\nLANGUAGE: shell\nCODE:\n```\ngit-po-helper check-commits <rev-list-opts>\n```\n\n----------------------------------------\n\nTITLE: Initializing Gettext Interface in Git Shell Scripts\nDESCRIPTION: This snippet shows how to initialize the gettext shell interface in Git scripts. By sourcing both 'git-sh-setup' and 'git-sh-i18n', scripts gain functions for translation. This must occur early in the script, typically after sourcing git-sh-setup. Dependencies include the availability of these Git-provided shell helpers. No parameters are needed; simply dot-source the scripts.\nSOURCE: https://github.com/git/git/blob/master/po/README.md#_snippet_10\n\nLANGUAGE: Shell\nCODE:\n```\n. git-sh-setup\n. git-sh-i18n\n```\n\n----------------------------------------\n\nTITLE: Using gettext in Shell Script to Provide Translator Comments\nDESCRIPTION: This snippet shows how to mark strings for translation in shell scripts while providing descriptive comments for translators. The 'TRANSLATORS:' comment lines preceding the 'gettext' function explain context and input expectations. This example covers a prompt accepting English inputs with specified response options. It relies on a shell environment with gettext installed and is intended for human-readable output only.\nSOURCE: https://github.com/git/git/blob/master/po/README.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n# TRANSLATORS: Make sure to include [y], [n], [e], [v] and [a]\n# in your translation. The program will only accept English\n# input at this point.\ngettext \"Apply? [y]es/[n]o/[e]dit/[v]iew patch/[a]ccept all \"\n```\n\n----------------------------------------\n\nTITLE: Generating clar.suite with Python Script in CMake\nDESCRIPTION: Defines a custom command that runs the 'generate.py' script using the located Python interpreter ('${Python_EXECUTABLE}'). This command generates the 'clar.suite' file in the current binary directory. The command depends on 'main.c', 'sample.c', and 'clar_test.h', and it executes within the current source directory.\nSOURCE: https://github.com/git/git/blob/master/t/unit-tests/clar/test/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_command(OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/clar.suite\"\n\tCOMMAND \"${Python_EXECUTABLE}\" \"${CMAKE_SOURCE_DIR}/generate.py\" --output \"${CMAKE_CURRENT_BINARY_DIR}\"\n\tDEPENDS main.c sample.c clar_test.h\n\tWORKING_DIRECTORY \"${CMAKE_CURRENT_SOURCE_DIR}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Translating and Printing Messages with Newlines in Git Shell Scripts\nDESCRIPTION: Sample usage of 'gettextln' and 'eval_gettextln' in Git shell scripts to print translated messages followed by a newline. These wrappers function identically to 'gettext' and 'eval_gettext' but automatically append a newline, simplifying common message patterns. Requires prior inclusion of git-sh-i18n. Parameters are similar: message string, optional variables for 'eval_gettextln'. Output is localized text with newline.\nSOURCE: https://github.com/git/git/blob/master/po/README.md#_snippet_12\n\nLANGUAGE: Shell\nCODE:\n```\n# For constant interface messages:\ngettextln \"A message for the user\"\n\n# To interpolate variables:\ndetails=\"oh noes\"\neval_gettextln \"An error occurred: \\$details\"\n```\n\n----------------------------------------\n\nTITLE: Checking l10n File Syntax with git-po-helper in Git Shell\nDESCRIPTION: Provides an example for using the git-po-helper tool to check syntax of translation files in localization workflows. Requires git-po-helper to be installed and accessible. Accepts an XX.po file and validates its syntax to ensure correctness before committing. Output is success/failure status.\nSOURCE: https://github.com/git/git/blob/master/po/README.md#_snippet_15\n\nLANGUAGE: Shell\nCODE:\n```\ngit-po-helper check-po <XX.po>\n```\n\n----------------------------------------\n\nTITLE: Searching Git Source for i18n Usage Examples with git log\nDESCRIPTION: Illustrates how to use git log to view historical implementation examples of i18n in Git shell scripts. The snippet runs a log with filtering and patch output on 'git-am.sh', focusing on commits related to i18n (translation markers). No dependencies beyond a Git working tree. Input parameters include grep query for i18n and target shell script.\nSOURCE: https://github.com/git/git/blob/master/po/README.md#_snippet_13\n\nLANGUAGE: Shell\nCODE:\n```\ngit log --reverse -p --grep=i18n git-am.sh\n```\n\n----------------------------------------\n\nTITLE: Checking po/TEAMS Syntax when Adding a Language in Git l10n\nDESCRIPTION: Shows how to validate the syntax of the po/TEAMS file after editing, particularly when registering a new l10n language/team. Utilizes git-po-helper with the team --check command. Requires git-po-helper and a properly formatted po/TEAMS file as input. Outputs validation result.\nSOURCE: https://github.com/git/git/blob/master/po/README.md#_snippet_16\n\nLANGUAGE: Shell\nCODE:\n```\ngit-po-helper team --check\n```\n\n----------------------------------------\n\nTITLE: Translating Strings in Git Perl Scripts using Git::I18N\nDESCRIPTION: Demonstrates Perl usage of the Git::I18N module to mark and translate strings. Requires including 'use Git::I18N;'. The double-underscore '__' function wraps strings for translation, and can be used in print or printf statements. Input parameters are the string to be translated (optionally with format placeholders and provided arguments). Output is the localized text sent to standard output.\nSOURCE: https://github.com/git/git/blob/master/po/README.md#_snippet_14\n\nLANGUAGE: Perl\nCODE:\n```\nuse Git::I18N;\nprint __(\"Welcome to Git!\\n\");\nprintf __(\"The following error occurred: %s\\n\"), $error;\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Build: Testing Options\nDESCRIPTION: These options enable building tests, and set up configurations for testing. Includes Coccinelle generation, test enabling, the output directory, UTF-8 locale used, and fuzzing options.\nSOURCE: https://github.com/git/git/blob/master/meson_options.txt#_snippet_15\n\nLANGUAGE: meson\nCODE:\n```\noption('coccinelle', type: 'feature', value: 'auto',\n  description: 'Provide a coccicheck target that generates a Coccinelle patch.')\n```\n\nLANGUAGE: meson\nCODE:\n```\noption('tests', type: 'boolean', value: true,\n  description: 'Enable building tests. This requires Perl, but is separate from the \"perl\" option such that you can build tests without Perl features enabled.')\n```\n\nLANGUAGE: meson\nCODE:\n```\noption('test_output_directory', type: 'string',\n  description: 'Path to the directory used to store test outputs')\n```\n\nLANGUAGE: meson\nCODE:\n```\noption('test_utf8_locale', type: 'string',\n  description: 'Name of a UTF-8 locale used for testing.')\n```\n\nLANGUAGE: meson\nCODE:\n```\noption('fuzzers', type: 'boolean', value: false,\n  description: 'Enable building fuzzers.')\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version and Defining Project (CMake)\nDESCRIPTION: Specifies the minimum and maximum required CMake versions for the project and defines the project name (\"clar\") and the primary language used (\"C\"). This ensures the build environment meets the necessary requirements.\nSOURCE: https://github.com/git/git/blob/master/t/unit-tests/clar/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.16..3.29)\n\nproject(clar LANGUAGES C)\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Build: Feature Flags\nDESCRIPTION: These are feature flags that enable/disable certain functionalities using the `feature` type in Meson.  They determine the inclusion of external dependencies or optional features.\nSOURCE: https://github.com/git/git/blob/master/meson_options.txt#_snippet_10\n\nLANGUAGE: meson\nCODE:\n```\noption('curl', type: 'feature', value: 'enabled',\n  description: 'Build helpers used to access remotes with the HTTP transport.')\n```\n\nLANGUAGE: meson\nCODE:\n```\noption('expat', type: 'feature', value: 'enabled',\n  description: 'Build helpers used to push to remotes with the HTTP transport.')\n```\n\nLANGUAGE: meson\nCODE:\n```\noption('gettext', type: 'feature', value: 'auto',\n  description: 'Build translation files.')\n```\n\nLANGUAGE: meson\nCODE:\n```\noption('gitweb', type: 'feature', value: 'auto',\n  description: 'Build Git web interface. Requires Perl.')\n```\n\nLANGUAGE: meson\nCODE:\n```\noption('iconv', type: 'feature', value: 'auto',\n  description: 'Support reencoding strings with different encodings.')\n```\n\nLANGUAGE: meson\nCODE:\n```\noption('pcre2', type: 'feature', value: 'enabled',\n  description: 'Support Perl-compatible regular expressions in e.g. git-grep(1).')\n```\n\nLANGUAGE: meson\nCODE:\n```\noption('perl', type: 'feature', value: 'auto',\n  description: 'Build tools written in Perl.')\n```\n\nLANGUAGE: meson\nCODE:\n```\noption('python', type: 'feature', value: 'auto',\n  description: 'Build tools written in Python.')\n```\n\nLANGUAGE: meson\nCODE:\n```\noption('regex', type: 'feature', value: 'auto',\n  description: 'Use the system-provided regex library instead of the bundled one.')\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Build: Build Information\nDESCRIPTION: These options define build information. Includes the build date, commit from which Git was built, user agent, and version string. Used in git-version(1) and other tools.\nSOURCE: https://github.com/git/git/blob/master/meson_options.txt#_snippet_7\n\nLANGUAGE: meson\nCODE:\n```\noption('build_date', type: 'string', value: '',\n  description: 'Build date reported by our documentation.')\n```\n\nLANGUAGE: meson\nCODE:\n```\noption('built_from_commit', type: 'string', value: '',\n  description: 'Commit that Git was built from reported by git-version(1).')\n```\n\nLANGUAGE: meson\nCODE:\n```\noption('user_agent', type: 'string', value: '',\n  description: 'User agent reported to remote servers.')\n```\n\nLANGUAGE: meson\nCODE:\n```\noption('version', type: 'string', value: '',\n  description: 'Version string reported by git-version(1) and other tools.')\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Build: Contributed Features\nDESCRIPTION: These options define contributed features to include or exclude in the build. This includes features like completion, contacts, and subtree.  They use a string array.\nSOURCE: https://github.com/git/git/blob/master/meson_options.txt#_snippet_8\n\nLANGUAGE: meson\nCODE:\n```\noption('contrib', type: 'array', value: [ 'completion' ], choices: [ 'completion', 'contacts', 'subtree' ],\n  description: 'Contributed features to include.')\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Build: Gitweb Configuration\nDESCRIPTION: These options configure the Gitweb interface. They specify file paths, site names, root directories, and other settings.  These options are used to customize Gitweb.\nSOURCE: https://github.com/git/git/blob/master/meson_options.txt#_snippet_13\n\nLANGUAGE: meson\nCODE:\n```\noption('gitweb_config', type: 'string', value: 'gitweb_config.perl')\n```\n\nLANGUAGE: meson\nCODE:\n```\noption('gitweb_config_system', type: 'string', value: '/etc/gitweb.conf')\n```\n\nLANGUAGE: meson\nCODE:\n```\noption('gitweb_config_common', type: 'string', value: '/etc/gitweb-common.conf')\n```\n\nLANGUAGE: meson\nCODE:\n```\noption('gitweb_home_link_str', type: 'string', value: 'projects')\n```\n\nLANGUAGE: meson\nCODE:\n```\noption('gitweb_sitename', type: 'string', value: '')\n```\n\nLANGUAGE: meson\nCODE:\n```\noption('gitweb_projectroot', type: 'string', value: '/pub/git')\n```\n\nLANGUAGE: meson\nCODE:\n```\noption('gitweb_project_maxdepth', type: 'string', value: '2007')\n```\n\nLANGUAGE: meson\nCODE:\n```\noption('gitweb_export_ok', type: 'string', value: '')\n```\n\nLANGUAGE: meson\nCODE:\n```\noption('gitweb_strict_export', type: 'string', value: '')\n```\n\nLANGUAGE: meson\nCODE:\n```\noption('gitweb_base_url', type: 'string', value: '')\n```\n\nLANGUAGE: meson\nCODE:\n```\noption('gitweb_list', type: 'string', value: '')\n```\n\nLANGUAGE: meson\nCODE:\n```\noption('gitweb_hometext', type: 'string', value: 'indextext.html')\n```\n\nLANGUAGE: meson\nCODE:\n```\noption('gitweb_css', type: 'string', value: 'static/gitweb.css')\n```\n\nLANGUAGE: meson\nCODE:\n```\noption('gitweb_logo', type: 'string', value: 'static/git-logo.png')\n```\n\nLANGUAGE: meson\nCODE:\n```\noption('gitweb_favicon', type: 'string', value: 'static/git-favicon.png')\n```\n\nLANGUAGE: meson\nCODE:\n```\noption('gitweb_js', type: 'string', value: 'static/gitweb.js')\n```\n\nLANGUAGE: meson\nCODE:\n```\noption('gitweb_site_html_head_string', type: 'string', value: '')\n```\n\nLANGUAGE: meson\nCODE:\n```\noption('gitweb_site_header', type: 'string', value: '')\n```\n\nLANGUAGE: meson\nCODE:\n```\noption('gitweb_site_footer', type: 'string', value: '')\n```\n\nLANGUAGE: meson\nCODE:\n```\noption('highlight_bin', type: 'string', value: 'highlight')\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Build: Documentation Options\nDESCRIPTION: These options configure how Git documentation is built and installed, including the output formats and the documentation backend to use (e.g., Asciidoctor).\nSOURCE: https://github.com/git/git/blob/master/meson_options.txt#_snippet_14\n\nLANGUAGE: meson\nCODE:\n```\noption('docs', type: 'array', choices: ['man', 'html'], value: [],\n  description: 'Which documenattion formats to build and install.')\n```\n\nLANGUAGE: meson\nCODE:\n```\noption('default_help_format', type: 'combo', choices: ['man', 'html'], value: 'man',\n  description: 'Default format used when executing git-help(1).')\n```\n\nLANGUAGE: meson\nCODE:\n```\noption('docs_backend', type: 'combo', choices: ['asciidoc', 'asciidoctor', 'auto'], value: 'auto',\n  description: 'Which backend to use to generate documentation.')\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Build: CPAN Module Fallback\nDESCRIPTION: This option controls whether to install bundled copies of CPAN modules as a fallback if they are not available on the system. This is a boolean value and defaults to `true`.\nSOURCE: https://github.com/git/git/blob/master/meson_options.txt#_snippet_4\n\nLANGUAGE: meson\nCODE:\n```\noption('perl_cpan_fallback', type: 'boolean', value: true,\n  description: 'Install bundled copies of CPAN modules that serve as a fallback in case the modules are not available on the system.')\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Build: Sane Tool Path\nDESCRIPTION: This option allows specifying an array of paths from which to pick up tools, useful if the default tools are broken or missing. The default is an empty array.\nSOURCE: https://github.com/git/git/blob/master/meson_options.txt#_snippet_6\n\nLANGUAGE: meson\nCODE:\n```\noption('sane_tool_path', type: 'array', value: [],\n  description: 'An array of paths to pick up tools from in case the normal tools are broken or lacking.')\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Build: Git Configuration File Paths\nDESCRIPTION: These options define the paths to the global git configuration file (`/etc/gitconfig`) and the global git attributes file (`/etc/gitattributes`). This allows git to find and use these files.\nSOURCE: https://github.com/git/git/blob/master/meson_options.txt#_snippet_2\n\nLANGUAGE: meson\nCODE:\n```\noption('gitconfig', type: 'string', value: '/etc/gitconfig',\n  description: 'Path to the global git configuration file.')\n```\n\nLANGUAGE: meson\nCODE:\n```\noption('gitattributes', type: 'string', value: '/etc/gitattributes',\n  description: 'Path to the global git attributes file.')\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Build: Default Editor\nDESCRIPTION: This snippet configures the default editor used by Git. It sets the default editor to 'vi' and provides a description. This is the fallback editor when no other is specified.\nSOURCE: https://github.com/git/git/blob/master/meson_options.txt#_snippet_1\n\nLANGUAGE: meson\nCODE:\n```\noption('default_editor', type: 'string', value: 'vi',\n  description: 'Fall-back editor.')\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Build: Default Pager\nDESCRIPTION: This snippet configures the default pager used by Git at runtime. It sets the default pager to 'less' and provides a description. This option is used when no specific pager is configured.\nSOURCE: https://github.com/git/git/blob/master/meson_options.txt#_snippet_0\n\nLANGUAGE: meson\nCODE:\n```\noption('default_pager', type: 'string', value: 'less',\n  description: 'Fall-back pager.')\n```\n\n----------------------------------------\n\nTITLE: Generating Git Version and Reading Version String\nDESCRIPTION: Executes an external script to generate the current Git version string and reads it into a variable for project versioning. Ensures the project is versioned consistently with source control.\nSOURCE: https://github.com/git/git/blob/master/contrib/buildsystems/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nexecute_process(COMMAND ${SH_EXE} \"${CMAKE_SOURCE_DIR}/GIT-VERSION-GEN\" \"${CMAKE_SOURCE_DIR}\" \"${CMAKE_SOURCE_DIR}/contrib/buildsystems/git-version.in\" \"${CMAKE_BINARY_DIR}/git-version\")\nfile(STRINGS \"${CMAKE_BINARY_DIR}/git-version\" git_version)\n```\n\n----------------------------------------\n\nTITLE: Defining Project and Its Version\nDESCRIPTION: Sets the project name 'git' and assigns the version number obtained from the external version-generation script. Specifies the programming language as C for compiling the project.\nSOURCE: https://github.com/git/git/blob/master/contrib/buildsystems/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nproject(git\n\tVERSION ${git_version}\n\tLANGUAGES C)\n```\n\n----------------------------------------\n\nTITLE: Macros for Parsing Makefile for Sources, Scripts, and Executables\nDESCRIPTION: Defines macro functions to extract sources, scripts, and executable targets from the Makefile using regex patterns, enabling dynamic inclusion of build components based on the Makefile contents.\nSOURCE: https://github.com/git/git/blob/master/contrib/buildsystems/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nmacro(parse_makefile_for_sources list_var makefile regex)\n\tfile(STRINGS ${makefile} ${list_var} REGEX \"^${regex} \\+=(.*)\")\n\tstring(REPLACE \"${regex} +=\" \"\" ${list_var} ${${list_var}})\n\tstring(REPLACE \"$(COMPAT_OBJS)\" \"\" ${list_var} ${${list_var}})\n\tstring(STRIP ${${list_var}} ${list_var})\n\tstring(REPLACE \".o\" \".c;\" ${list_var} ${${list_var}})\n\tlist(TRANSFORM ${list_var} STRIP)\n\tlist(REMOVE_ITEM ${list_var} \"\")\nendmacro()\n\nmacro(parse_makefile_for_scripts list_var regex lang)\n\tfile(STRINGS ${CMAKE_SOURCE_DIR}/Makefile ${list_var} REGEX \"^${regex} \\+=(.*)\")\n\tstring(REPLACE \"${regex} +=\" \"\" ${list_var} ${${list_var}})\n\tstring(STRIP ${${list_var}} ${list_var})\n\tstring(REPLACE \" \" \";\" ${list_var} ${${list_var}})\n\tif(NOT ${lang})\n\t\tlist(TRANSFORM ${list_var} REPLACE \"${lang}\" \"\")\n\tendif()\nendmacro()\n\nmacro(parse_makefile_for_executables list_var regex)\n\tfile(STRINGS ${CMAKE_SOURCE_DIR}/Makefile ${list_var} REGEX \"^${regex} \\+= git-(.*)\")\n\tstring(REPLACE \"${regex} +=\" \"\" ${list_var} ${${list_var}})\n\tstring(STRIP ${${list_var}} ${list_var})\n\tstring(REPLACE \"git-\" \"\" ${list_var} ${${list_var}})\n\tstring(REPLACE \"\\$X\" \";\" ${list_var} ${${list_var}})\n\tlist(TRANSFORM ${list_var} STRIP)\n\tlist(REMOVE_ITEM ${list_var} \"\")\nendmacro()\n```\n\n----------------------------------------\n\nTITLE: Defining Minimum CMake Version and Source Directory\nDESCRIPTION: Sets the minimum required CMake version to 3.14 and assigns the source directory for the project based on the current list directory. Establishes the foundational settings for the build configuration.\nSOURCE: https://github.com/git/git/blob/master/contrib/buildsystems/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nset(CMAKE_SOURCE_DIR ${CMAKE_CURRENT_LIST_DIR}/../..)\n```\n\n----------------------------------------\n\nTITLE: Configuring VCPKG Dependency Management\nDESCRIPTION: Defines options for using vcpkg on Windows, configuring the directory, initializing dependencies if not present, and setting relevant CMake variables and definitions for dependency linking. It ensures cross-platform dependency management.\nSOURCE: https://github.com/git/git/blob/master/contrib/buildsystems/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\noption(USE_VCPKG \"Whether or not to use vcpkg for obtaining dependencies.  Only applicable to Windows platforms\" ON)\nif(NOT WIN32)\n\tset(USE_VCPKG OFF CACHE BOOL \"\" FORCE)\nendif()\n\nif(USE_VCPKG)\n\tset(VCPKG_DIR \"${CMAKE_SOURCE_DIR}/compat/vcbuild/vcpkg\")\n\tif(NOT EXISTS ${VCPKG_DIR})\n\t\tmessage(\"Initializing vcpkg and building the Git's dependencies (this will take a while...)\")\n\t\texecute_process(COMMAND ${CMAKE_SOURCE_DIR}/compat/vcbuild/vcpkg_install.bat)\n\tendif()\n\tlist(APPEND CMAKE_PREFIX_PATH \"${VCPKG_DIR}/installed/x64-windows\")\n\n\tset(CURL_NO_CURL_CMAKE ON)\n\n\tset(X_VCPKG_APPLOCAL_DEPS_INSTALL ON)\n\tset(CMAKE_TOOLCHAIN_FILE \"${VCPKG_DIR}/scripts/buildsystems/vcpkg.cmake\" CACHE STRING \"Vcpkg toolchain file\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Initializing Clar Test Directory (Shell)\nDESCRIPTION: Provides shell commands to set up the necessary directory structure and copy essential Clar boilerplate files and sample code into a 'tests' directory. This includes Clar source files, a test header, and a sample main file, using an assumed `$CLAR_ROOT` variable.\nSOURCE: https://github.com/git/git/blob/master/t/unit-tests/clar/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmkdir tests\ncp -r $CLAR_ROOT/clar* tests\ncp $CLAR_ROOT/test/clar_test.h tests\ncp $CLAR_ROOT/test/main.c.sample tests/main.c\n```\n\n----------------------------------------\n\nTITLE: Running Clar Test Executable (Shell)\nDESCRIPTION: Provides the simple shell command to execute the compiled Clar test program named `testit`. Running this command will invoke the Clar framework to discover and run all defined tests.\nSOURCE: https://github.com/git/git/blob/master/t/unit-tests/clar/README.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n./testit\n```\n\n----------------------------------------\n\nTITLE: Setting Git Author/Committer Names (Shell)\nDESCRIPTION: This snippet sets the `GIT_AUTHOR_NAME` and `GIT_COMMITTER_NAME` environment variables using UTF-8 characters. These variables are used by Git commands to determine the author and committer information for commits. The variables are then exported to make them available to subsequent commands within the shell session. This is typically used in test scripts to verify Git's handling of different character sets.\nSOURCE: https://github.com/git/git/blob/master/t/t3901/utf8.txt#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nGIT_AUTHOR_NAME=\"Áéí óú\" &&\\\nGIT_COMMITTER_NAME=$GIT_AUTHOR_NAME &&\\\nexport GIT_AUTHOR_NAME GIT_COMMITTER_NAME\n```\n\n----------------------------------------\n\nTITLE: Setting Git author and committer names using shell script\nDESCRIPTION: This code snippet assigns a Latin-1 encoded string to the GIT_AUTHOR_NAME variable, sets GIT_COMMITTER_NAME to the same value, and exports both variables for use in Git commits. It ensures that author and committer identities are consistently attributed. Dependencies include a Unix shell and Git installation.\nSOURCE: https://github.com/git/git/blob/master/t/t3901/8859-1.txt#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n: to be sourced in t3901 -- this is latin-1\nGIT_AUTHOR_NAME=\"� �\" &&\nGIT_COMMITTER_NAME=$GIT_AUTHOR_NAME &&\nexport GIT_AUTHOR_NAME GIT_COMMITTER_NAME\n```\n\n----------------------------------------\n\nTITLE: Defining UTF-8 Shell Variables in Japanese\nDESCRIPTION: Declares two shell variables with UTF-8 encoded Japanese text. UTF8_NAME contains a person's name \"Yamada Taro\" while UTF8_MSG contains the message \"This is a blame test.\"\nSOURCE: https://github.com/git/git/blob/master/t/t8005/utf8.txt#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nUTF8_NAME=\"山田 太郎\"\nUTF8_MSG=\"ブレームのテストです。\"\n```\n\n----------------------------------------\n\nTITLE: Assigning Japanese Localization Strings to Shell Variables\nDESCRIPTION: Assigns string values, intended to be Japanese text encoded in EUC-JP, to the shell variables `EUC_JAPAN_NAME` and `EUC_JAPAN_MSG`. These variables are likely used elsewhere in the Git project for displaying messages or names in Japanese. Note: The current string values appear garbled (Mojibake), potentially due to encoding mismatches during display or processing.\nSOURCE: https://github.com/git/git/blob/master/t/t8005/euc-japan.txt#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nEUC_JAPAN_NAME=\"���� ��Ϻ\"\nEUC_JAPAN_MSG=\"�֥졼��Υƥ��ȤǤ���\"\n```\n\n----------------------------------------\n\nTITLE: Defining Shift JIS Strings in Shell\nDESCRIPTION: These snippets define shell variables `SJIS_NAME` and `SJIS_MSG` containing Shift JIS encoded strings. This is likely for testing character encoding handling within a Git repository or similar system. The \"�\" characters indicate potential display issues with the encoding in the source environment. No explicit dependencies are shown, but the context implies use within a shell environment relevant to Git.\nSOURCE: https://github.com/git/git/blob/master/t/t8005/sjis.txt#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nSJIS_NAME=\"�R�c ���Y\"\n```\n\nLANGUAGE: Shell\nCODE:\n```\nSJIS_MSG=\"�u���[���̃e�X�g�ł��B\"\n```"
  }
]