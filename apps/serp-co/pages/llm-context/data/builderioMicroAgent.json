[
  {
    "owner": "builderio",
    "repo": "micro-agent",
    "content": "TITLE: Displaying Micro Agent CLI Usage and Commands\nDESCRIPTION: This code block shows the usage syntax for the Micro Agent CLI, including available commands and flags. It covers basic usage, configuration, updating, and various options for running and testing.\nSOURCE: https://github.com/builderio/micro-agent/blob/main/README.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nUsage:\n  micro-agent <file path> [flags...]\n  micro-agent <command>\n\nCommands:\n  config        Configure the CLI\n  update        Update Micro Agent to the latest version\n\nFlags:\n  -h, --help                      Show help\n  -m, --max-runs <number>         The maximum number of runs to attempt\n  -p, --prompt <string>           Prompt to run\n  -t, --test <string>             The test script to run\n  -f, --test-file <string>        The test file to run\n  -v, --visual <string>           Visual matching URL\n      --thread <string>           Thread ID to resume\n      --version                   Show version\n```\n\n----------------------------------------\n\nTITLE: Installing Micro Agent via NPM\nDESCRIPTION: Command to install Micro Agent globally using npm. Requires Node.js v18 or later.\nSOURCE: https://github.com/builderio/micro-agent/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g @builder.io/micro-agent\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAI API Key and Model for Micro Agent\nDESCRIPTION: Commands to set the OpenAI API key and specify the model to use with Micro Agent.\nSOURCE: https://github.com/builderio/micro-agent/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmicro-agent config set OPENAI_KEY=<your token>\nmicro-agent config set MODEL=gpt-4o\n```\n\n----------------------------------------\n\nTITLE: Configuring Anthropic API Key and Model for Micro Agent\nDESCRIPTION: Commands to set the Anthropic API key and specify the Claude model for use with Micro Agent.\nSOURCE: https://github.com/builderio/micro-agent/blob/main/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmicro-agent config set ANTHROPIC_KEY=<your token>\nmicro-agent config set MODEL=claude\n```\n\n----------------------------------------\n\nTITLE: Running Micro Agent in Unit Test Matching Mode\nDESCRIPTION: Command to run Micro Agent on a specific file, using a test script to validate generated code.\nSOURCE: https://github.com/builderio/micro-agent/blob/main/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmicro-agent ./file-to-edit.ts -t \"npm test\"\n```\n\n----------------------------------------\n\nTITLE: Running Micro Agent with Custom Test and Prompt Files\nDESCRIPTION: Command to run Micro Agent with specified test file and prompt file paths.\nSOURCE: https://github.com/builderio/micro-agent/blob/main/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmicro-agent ./file-to-edit.ts -t \"npm test\" -f ./file-to-edit.spec.ts -p ./path-to-prompt.prompt.md\n```\n\n----------------------------------------\n\nTITLE: Running Micro Agent in Visual Matching Mode\nDESCRIPTION: Command to run Micro Agent for visual matching, specifying the file to edit and the local URL to render.\nSOURCE: https://github.com/builderio/micro-agent/blob/main/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmicro-agent ./app/about/page.tsx --visual localhost:3000/about\n```\n\n----------------------------------------\n\nTITLE: Configuring Micro Agent Model via Environment Variable\nDESCRIPTION: Example of using an environment variable to override the default model for Micro Agent.\nSOURCE: https://github.com/builderio/micro-agent/blob/main/README.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nMODEL=gpt-3.5-turbo micro-agent ./file-to-edit.ts -t \"npm test\"\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Runs for Micro Agent\nDESCRIPTION: Command to set the maximum number of runs Micro Agent will perform before stopping.\nSOURCE: https://github.com/builderio/micro-agent/blob/main/README.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nmicro-agent ./file-to-edit.ts -m 20\n```\n\n----------------------------------------\n\nTITLE: Setting Custom OpenAI API Endpoint for Micro Agent\nDESCRIPTION: Command to set a custom OpenAI API endpoint, useful for services like Ollama or Groq.\nSOURCE: https://github.com/builderio/micro-agent/blob/main/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmicro-agent config set OPENAI_API_ENDPOINT=<your endpoint>\nmicro-agent config set OPENAI_API_ENDPOINT=https://api.groq.com/openai/v1\n```\n\n----------------------------------------\n\nTITLE: Configuring Anthropic API Key for Visual Matching\nDESCRIPTION: Command to set the Anthropic API key for use with Micro Agent's visual matching feature.\nSOURCE: https://github.com/builderio/micro-agent/blob/main/README.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmicro-agent config set ANTHROPIC_KEY=<your token>\n```\n\n----------------------------------------\n\nTITLE: Checking Micro Agent Version\nDESCRIPTION: Command to check the installed version of Micro Agent.\nSOURCE: https://github.com/builderio/micro-agent/blob/main/README.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nmicro-agent --version\n```\n\n----------------------------------------\n\nTITLE: Updating Micro Agent\nDESCRIPTION: Commands to update Micro Agent to the latest version, either automatically or manually.\nSOURCE: https://github.com/builderio/micro-agent/blob/main/README.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nmicro-agent update\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm update -g @builder.io/micro-agent\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js Using NVM\nDESCRIPTION: Uses NVM (Node Version Manager) to install the appropriate Node.js version specified in the .nvmrc file.\nSOURCE: https://github.com/builderio/micro-agent/blob/main/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnvm i\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies\nDESCRIPTION: Installs all the required dependencies for the project using npm.\nSOURCE: https://github.com/builderio/micro-agent/blob/main/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Building the Project\nDESCRIPTION: Runs the build script defined in package.json to bundle the project using pkgroll/Rollup.\nSOURCE: https://github.com/builderio/micro-agent/blob/main/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Running the CLI Locally for Development\nDESCRIPTION: Executes the start script to run the CLI locally without global installation, useful during development.\nSOURCE: https://github.com/builderio/micro-agent/blob/main/CONTRIBUTING.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Running Lint Fix with Prettier\nDESCRIPTION: Executes the lint:fix script to automatically fix linting issues using Prettier.\nSOURCE: https://github.com/builderio/micro-agent/blob/main/CONTRIBUTING.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpm run lint:fix\n```\n\n----------------------------------------\n\nTITLE: Parsing Angular Component with Multiple Inputs and Enum Type\nDESCRIPTION: This snippet shows an Angular component with multiple input properties, including a string enum type. It demonstrates how to structure the component and define various input types.\nSOURCE: https://github.com/builderio/micro-agent/blob/main/src/tests/angular-parser/parse.prompt.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype Option = 'a' | 'b' | 'c';\n\n@Component({\n  selector: 'example-component',\n  template: `\n    <div>\n      <h1>{{ title }}</h1>\n      <p>{{ description }}</p>\n    </div>\n  `,\n})\nexport class ExampleComponent {\n  @Input() title: string;\n  @Input() description: string;\n  @Input() options: Option;\n  @Input() mode: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Expected Output for Complex Angular Component Metadata\nDESCRIPTION: This snippet shows the expected output of the metadata extraction process for the complex Angular component. It includes the component name, selector, and a detailed list of input properties with their types.\nSOURCE: https://github.com/builderio/micro-agent/blob/main/src/tests/angular-parser/parse.prompt.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  name: 'ExampleComponent',\n  selector: 'example-component',\n  inputs: [\n    { name: 'title', type: 'string' },\n    { name: 'description', type: 'string' },\n    { name: 'options', type: 'string', enum: ['a', 'b', 'c'] },\n    { name: 'mode', type: 'number' },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Simple Angular Component with Type Alias\nDESCRIPTION: This snippet demonstrates a simpler Angular component with a single input property using a type alias. It shows how to import necessary decorators and define a component with minimal configuration.\nSOURCE: https://github.com/builderio/micro-agent/blob/main/src/tests/angular-parser/parse.prompt.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component, Input } from '@angular/core';\n\ntype Foo = number;\n\n@Component({\n  selector: 'my-component',\n})\nexport class MyComponent {\n  @Input() num: Foo;\n}\n```\n\n----------------------------------------\n\nTITLE: Expected Output for Simple Angular Component Metadata\nDESCRIPTION: This snippet shows the expected output of the metadata extraction process for the simpler Angular component. It includes the component name, selector, and the single input property with its resolved type.\nSOURCE: https://github.com/builderio/micro-agent/blob/main/src/tests/angular-parser/parse.prompt.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  name: 'MyComponent',\n  selector: 'my-component',\n  inputs: [{ name: 'num', type: 'number' }],\n}\n```\n\n----------------------------------------\n\nTITLE: Simplifying Type-Based Ternary Expression in TypeScript\nDESCRIPTION: Example of a complex ternary that can be simplified to a single condition based on 'type' value, as the 'status' variable doesn't affect the output. The original expression checks multiple combinations of type and status, but can be reduced to checking only if type equals 'With Icon'.\nSOURCE: https://github.com/builderio/micro-agent/blob/main/src/tests/ternary/simplify.prompt.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype === 'Default' && status === 'Default'\n  ? '71px'\n  : type === 'With Icon' && status === 'Default'\n  ? '79px'\n  : type === 'With Icon' && status === 'Neutral'\n  ? '79px'\n  : type === 'With Icon' && status === 'Active'\n  ? '79px'\n  : type === 'With Icon' && status === 'Alert'\n  ? '79px'\n  : type === 'With Icon' && status === 'Caution'\n  ? '79px'\n  : type === 'Default' && status === 'Neutral'\n  ? '71px'\n  : type === 'Default' && status === 'Active'\n  ? '71px'\n  : type === 'Default' && status === 'Alert'\n  ? '71px'\n  : '71px'\n```\n\nLANGUAGE: typescript\nCODE:\n```\ntype === 'With Icon' ? '79px' : '71px'\n```\n\n----------------------------------------\n\nTITLE: Converting Complex Value-Dependent Ternary in TypeScript\nDESCRIPTION: Example of a complex ternary that can be simplified based on 'foo' value, as the 'status' variable doesn't affect the final output. The original checks multiple combinations but can be reduced to checking only if foo equals 'With Icon'.\nSOURCE: https://github.com/builderio/micro-agent/blob/main/src/tests/ternary/simplify.prompt.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfoo === 'Yo' && status === 'Default'\n  ? 'start'\n  : foo === 'Some Value' && status === 'Default'\n  ? 'stretch'\n  : foo === 'Some Value' && status === 'Neutral'\n  ? 'stretch'\n  : foo === 'Some Value' && status === 'Active'\n  ? 'stretch'\n  : foo === 'Some Value' && status === 'Alert'\n  ? 'stretch'\n  : foo === 'Some Value' && status === 'Caution'\n  ? 'stretch'\n  : foo === 'Yo' && status === 'Neutral'\n  ? 'start'\n  : foo === 'Yo' && status === 'Active'\n  ? 'start'\n  : foo === 'Yo' && status === 'Alert'\n  ? 'start'\n  : 'start'\n```\n\nLANGUAGE: typescript\nCODE:\n```\nfoo === 'With Icon' ? 'stretch' : 'start'\n```\n\n----------------------------------------\n\nTITLE: Simplifying Multi-Condition Ternary with Pattern Recognition in TypeScript\nDESCRIPTION: Example of a complex ternary with three variables (type, size, status) that can be simplified by recognizing patterns in the outputs. The simplified version uses logical grouping to express the same logic more concisely.\nSOURCE: https://github.com/builderio/micro-agent/blob/main/src/tests/ternary/simplify.prompt.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype === 'Baseline' && size === '4px' && status === 'Default'\n  ? '400'\n  : type === 'Baseline' && size === '4px' && status === 'Complete'\n  ? undefined\n  : type === 'Baseline' && size === '4px' && status === 'Error'\n  ? undefined\n  : type === 'Baseline' && size === '8px' && status === 'Complete'\n  ? undefined\n  : type === 'Baseline' && size === '8px' && status === 'Default'\n  ? '400'\n  : type === 'Baseline' && size === '8px' && status === 'Error'\n  ? undefined\n  : type === 'Detailed' && size === '8px' && status === 'Complete'\n  ? undefined\n  : type === 'Detailed' && size === '4px' && status === 'Default'\n  ? undefined\n  : type === 'Detailed' && size === '4px' && status === 'Complete (alternate)'\n  ? undefined\n  : type === 'Detailed' && size === '8px' && status === 'Default'\n  ? undefined\n  : type === 'Detailed' && size === '8px' && status === 'Complete (alternate)'\n  ? undefined\n  : type === 'Detailed' && size === '4px' && status === 'Complete'\n  ? undefined\n  : type === 'Detailed' && size === '8px' && status === 'Error'\n  ? undefined\n  : undefined\n```\n\nLANGUAGE: typescript\nCODE:\n```\ntype === 'Baseline' && (size === '4px' || size === '8px') && status === 'Default' ? '400' : undefined\n```\n\n----------------------------------------\n\nTITLE: Running Angular Parser Tests - Bash Command\nDESCRIPTION: Command to run the Angular parser test locally using npm. This executes the parser test file and runs the test suite for the parser component.\nSOURCE: https://github.com/builderio/micro-agent/blob/main/src/tests/angular-parser/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm start -- src/tests/angular-parser/parse.ts -t \"npm test parser\"\n```\n\n----------------------------------------\n\nTITLE: Running Ternary Simplification Tests with NPM\nDESCRIPTION: Command to execute ternary expression simplification tests followed by type checking. Uses the source file 'src/tests/ternary/simplify.ts' as input.\nSOURCE: https://github.com/builderio/micro-agent/blob/main/src/tests/ternary/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm start -- src/tests/ternary/simplify.ts -t \"npm test ternary && npm run typecheck\"\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server with Package Managers\nDESCRIPTION: Commands to start the Next.js development server using different package managers (npm, yarn, pnpm, or bun). After running any of these commands, the application will be accessible at http://localhost:3000.\nSOURCE: https://github.com/builderio/micro-agent/blob/main/test/nextjs-app/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```"
  }
]