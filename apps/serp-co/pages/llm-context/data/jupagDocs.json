[
  {
    "owner": "jup-ag",
    "repo": "docs",
    "content": "TITLE: Requesting Quote with Platform Fee in JavaScript\nDESCRIPTION: This code snippet demonstrates how to request a quote from the Jupiter Swap API with a platform fee of 20 basis points (0.2%). It uses the fetch API to make a GET request to the quote endpoint.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/100-swap-api/4-add-fees-to-swap.md#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst quoteResponse = await (\n    await fetch(\n        'https://lite-api.jup.ag/swap/v1/quote?inputMint=So11111111111111111111111111111111111111112&outputMint=EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v&amount=100000&slippageBps=50&restrictIntermediateTokens=true&platformFeeBps=20'\n    )\n  ).json();\n  \nconsole.log(JSON.stringify(quoteResponse, null, 2));\n```\n\n----------------------------------------\n\nTITLE: Building Custom Transaction with Swap Instructions\nDESCRIPTION: Shows how to build a custom transaction using swap instructions from Jupiter's API, including deserialization of instructions and handling of address lookup tables.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/100-swap-api/2-build-swap-transaction.md#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst instructions = await (\n    await fetch('https://lite-api.jup.ag/swap/v1/swap-instructions', {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n        quoteResponse,\n        userPublicKey: wallet.publicKey.toString(),\n    })\n    })\n).json();\n\nif (instructions.error) {\n    throw new Error(\"Failed to get swap instructions: \" + instructions.error);\n}\n\nconst {\n    tokenLedgerInstruction,\n    computeBudgetInstructions,\n    setupInstructions,\n    swapInstruction: swapInstructionPayload,\n    cleanupInstruction,\n    addressLookupTableAddresses,\n} = instructions;\n\nconst deserializeInstruction = (instruction) => {\n    return new TransactionInstruction({\n    programId: new PublicKey(instruction.programId),\n    keys: instruction.accounts.map((key) => ({\n        pubkey: new PublicKey(key.pubkey),\n        isSigner: key.isSigner,\n        isWritable: key.isWritable,\n    })),\n    data: Buffer.from(instruction.data, \"base64\"),\n    });\n};\n\nconst getAddressLookupTableAccounts = async (\n    keys: string[]\n): Promise<AddressLookupTableAccount[]> => {\n    const addressLookupTableAccountInfos =\n    await connection.getMultipleAccountsInfo(\n        keys.map((key) => new PublicKey(key))\n    );\n\n    return addressLookupTableAccountInfos.reduce((acc, accountInfo, index) => {\n    const addressLookupTableAddress = keys[index];\n    if (accountInfo) {\n        const addressLookupTableAccount = new AddressLookupTableAccount({\n        key: new PublicKey(addressLookupTableAddress),\n        state: AddressLookupTableAccount.deserialize(accountInfo.data),\n        });\n        acc.push(addressLookupTableAccount);\n    }\n\n    return acc;\n    }, new Array<AddressLookupTableAccount>());\n};\n\nconst addressLookupTableAccounts: AddressLookupTableAccount[] = [];\n\naddressLookupTableAccounts.push(\n    ...(await getAddressLookupTableAccounts(addressLookupTableAddresses))\n);\n\nconst blockhash = (await connection.getLatestBlockhash()).blockhash;\nconst messageV0 = new TransactionMessage({\n    payerKey: payerPublicKey,\n    recentBlockhash: blockhash,\n    instructions: [\n    // uncomment if needed: ...setupInstructions.map(deserializeInstruction),\n    deserializeInstruction(swapInstructionPayload),\n    // uncomment if needed: deserializeInstruction(cleanupInstruction),\n    ],\n}).compileToV0Message(addressLookupTableAccounts);\nconst transaction = new VersionedTransaction(messageV0);\n```\n\n----------------------------------------\n\nTITLE: Example Response from Jupiter Swap API Quote Endpoint in JSON\nDESCRIPTION: This JSON snippet shows an example response from the Jupiter Swap API quote endpoint. It includes details such as input and output amounts, slippage, route plan, and other relevant swap information.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/100-swap-api/1-get-quote.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"inputMint\": \"So11111111111111111111111111111111111111112\",\n  \"inAmount\": \"100000000\",\n  \"outputMint\": \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\",\n  \"outAmount\": \"16198753\",\n  \"otherAmountThreshold\": \"16117760\",\n  \"swapMode\": \"ExactIn\",\n  \"slippageBps\": 50,\n  \"platformFee\": null,\n  \"priceImpactPct\": \"0\",\n  \"routePlan\": [\n    {\n      \"swapInfo\": {\n        \"ammKey\": \"5BKxfWMbmYBAEWvyPZS9esPducUba9GqyMjtLCfbaqyF\",\n        \"label\": \"Meteora DLMM\",\n        \"inputMint\": \"So11111111111111111111111111111111111111112\",\n        \"outputMint\": \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\",\n        \"inAmount\": \"100000000\",\n        \"outAmount\": \"16198753\",\n        \"feeAmount\": \"24825\",\n        \"feeMint\": \"So11111111111111111111111111111111111111112\"\n      },\n      \"percent\": 100\n    }\n  ],\n  \"contextSlot\": 299283763,\n  \"timeTaken\": 0.015257836\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Quote with Platform Fee in JavaScript\nDESCRIPTION: This JavaScript function demonstrates how to fetch a quote from the Jupiter API with a custom platform fee. It constructs the URL with query parameters for input and output mints, amount, slippage, and platform fee, then performs the API request.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/2-apis/3-adding-fees.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nasync function getQuote() {\n  try {\n    const url = new URL(\"https://quote-api.jup.ag/v6/quote\");\n    url.searchParams.append(\n      \"inputMint\",\n      \"So11111111111111111111111111111111111111112\"\n    );\n    url.searchParams.append(\n      \"outputMint\",\n      \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\"\n    );\n    url.searchParams.append(\"amount\", 100000000);\n    url.searchParams.append(\"slippageBps\", 50);\n    url.searchParams.append(\"platformFeeBps\", 20);\n    const response = await fetch(url.toString());\n    if (!response.ok) {\n      throw new Error(`Error fetching quote: ${response.statusText}`);\n    }\n    const quoteResponse = await response.json();\n    console.log({ quoteResponse });\n  } catch (error) {\n    console.error(\"Failed to get quote:\", error);\n  }\n}\ngetQuote();\n```\n\n----------------------------------------\n\nTITLE: Implementing Jupiter CPI in Rust\nDESCRIPTION: This code snippet demonstrates how to use the jupiter-cpi crate to perform a Cross Program Invocation (CPI) for a Jupiter swap. It includes setting up the accounts, creating the CPI context, and invoking the shared_accounts_route function.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/100-swap-api/2-build-swap-transaction.md#2025-04-16_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nuse jupiter_cpi;\n...\n\nlet signer_seeds: &[&[&[u8]]] = &[...];\n\n// Pass accounts to context one-by-one and construct accounts here\n// Or in practise, it may be easier to use remaining_accounts\n// https://book.anchor-lang.com/anchor_in_depth/the_program_module.html\n\nlet accounts = jupiter_cpi::cpi::accounts::SharedAccountsRoute {\n    token_program: ,\n    program_authority: ,\n    user_transfer_authority: ,\n    source_token_account: ,\n    program_source_token_account: ,\n    program_destination_token_account: ,\n    destination_token_account: ,\n    source_mint: ,\n    destination_mint: ,\n    platform_fee_account: ,\n    token_2022_program: ,\n};\nlet cpi_ctx = CpiContext::new_with_signer(\n    ctx.accounts.jup.to_account_info(),\n    accounts,\n    signer_seeds,\n);\n\njupiter_cpi::cpi::shared_accounts_route(\n    cpi_ctx,\n    id,\n    route_plan,\n    in_amount,\n    quoted_out_amount,\n    slippage_bps,\n    platform_fee_bps,\n);\n\n...\n```\n\n----------------------------------------\n\nTITLE: Preparing and Signing Swap Transaction in JSX\nDESCRIPTION: Code for deserializing a base64 transaction from Jupiter Swap API, signing it with a wallet, and serializing it back to Uint8array format for sending to the network. This converts between different transaction formats required for processing.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/100-swap-api/3-send-swap-transaction.md#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst transactionBase64 = swapResponse.swapTransaction\nconst transaction = VersionedTransaction.deserialize(Buffer.from(transactionBase64, 'base64'));\nconsole.log(transaction);\n\ntransaction.sign([wallet.payer]);\n\nconst transactionBinary = transaction.serialize();\nconsole.log(transactionBinary);\n```\n\n----------------------------------------\n\nTITLE: Setting up RPC Connection in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a new Connection object to connect to Solana's mainnet. It's recommended to use your own or a third-party RPC endpoint for production applications.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/1-environment-setup.md#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst connection = new Connection('https://api.mainnet-beta.solana.com');\n```\n\n----------------------------------------\n\nTITLE: Fetching Token Swap Quote using Jupiter Swap API in JavaScript\nDESCRIPTION: This code snippet demonstrates how to make a GET request to the Jupiter Swap API to retrieve a quote for swapping SOL to USDC. It includes the necessary parameters such as input and output token mints, amount, and slippage tolerance.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/100-swap-api/1-get-quote.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst quoteResponse = await (\n    await fetch(\n        'https://lite-api.jup.ag/swap/v1/quote?inputMint=So11111111111111111111111111111111111111112&outputMint=EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v&amount=100000000&slippageBps=50&restrictIntermediateTokens=true'\n    )\n  ).json();\n  \nconsole.log(JSON.stringify(quoteResponse, null, 2));\n```\n\n----------------------------------------\n\nTITLE: Fetching Swap Order with Jupiter Ultra API\nDESCRIPTION: Example of making a GET request to Jupiter's order endpoint to fetch a swap order. Required parameters include inputMint, outputMint, amount and optional taker address.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/101-ultra-api/1-get-order.md#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst orderResponse = await (\n    await fetch(\n        'https://lite-api.jup.ag/ultra/v1/order?inputMint=So11111111111111111111111111111111111111112&outputMint=EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v&amount=100000000&taker=3X2LFoTQecbpqCR7G5tL1kczqBKurjKPHhKSZrJ4wgWc'\n    )\n  ).json();\n\nconsole.log(JSON.stringify(orderResponse, null, 2));\n```\n\n----------------------------------------\n\nTITLE: Fetching Swap Transaction with Dynamic Slippage in JavaScript\nDESCRIPTION: This code snippet demonstrates how to fetch a swap transaction from Jupiter's Swap API with dynamic slippage enabled. It uses the fetch API to send a POST request to the swap endpoint, including the quote response, user's public key, and the dynamic slippage flag.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/100-swap-api/3-send-swap-transaction.md#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nconst swapTransaction = await (\n  await fetch('https://lite-api.jup.ag/swap/v1', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      quoteResponse,\n      userPublicKey: wallet.publicKey.toBase58(),\n      dynamicSlippage: true,\n    })\n  })\n).json();\n```\n\n----------------------------------------\n\nTITLE: Sending Transaction to Solana Network in JSX\nDESCRIPTION: Code for sending a raw transaction to the Solana network with specified options. This example sets maxRetries to 2 and skips preflight checks to optimize for transaction throughput.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/100-swap-api/3-send-swap-transaction.md#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst signature = await connection.sendRawTransaction(transactionBinary, {\n    maxRetries: 2,\n    skipPreflight: true\n});\n```\n\n----------------------------------------\n\nTITLE: Building Swap Transaction with Jupiter API\nDESCRIPTION: Demonstrates how to fetch a serialized swap transaction from Jupiter's Swap API using a quote response and wallet public key. Includes optimization parameters for transaction landing like dynamic compute units and slippage.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/100-swap-api/2-build-swap-transaction.md#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst swapResponse = await (\nawait fetch('https://lite-api.jup.ag/swap/v1/swap', {\n    method: 'POST',\n    headers: {\n    'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n    quoteResponse,\n    userPublicKey: wallet.publicKey.toString(),\n    \n    // ADDITIONAL PARAMETERS TO OPTIMIZE FOR TRANSACTION LANDING\n    // See next guide to optimize for transaction landing\n    dynamicComputeUnitLimit: true,\n    dynamicSlippage: true,\n    prioritizationFeeLamports: {\n          priorityLevelWithMaxLamports: {\n            maxLamports: 1000000,\n            priorityLevel: \"veryHigh\"\n          }\n        }\n    })\n})\n).json();\n\nconsole.log(swapResponse);\n```\n\n----------------------------------------\n\nTITLE: Performing Swap with Fee Account in Shell\nDESCRIPTION: This shell command demonstrates how to perform a swap using the Jupiter API with a custom fee account. It sends a POST request with the quote response, user public key, and fee account information.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/2-apis/3-adding-fees.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST \"https://quote-api.jup.ag/v6/swap\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n           \"quoteResponse\": { /* The quote response from the /quote API */ },\n           \"userPublicKey\": \"YourUserPublicKey\",\n           \"wrapAndUnwrapSol\": true,\n           \"feeAccount\": \"YourFeeAccountPublicKey\"\n         }'\n```\n\n----------------------------------------\n\nTITLE: Executing Token Swap on Solana using Jupiter Aggregator API\nDESCRIPTION: This code demonstrates the process of executing a token swap on the Solana blockchain using the Jupiter Aggregator API. It includes steps for fetching swap information, creating a swap transaction, and sending it to the blockchain. The code uses @solana/web3.js and @solana/spl-token libraries, and requires valid Solana public keys and connection to a Solana cluster.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/2-apis/2-payments-api.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PublicKey, Connection, Keypair, VersionedTransaction, VersionedMessage, TransactionMessage } from '@solana/web3.js';\nimport { getAssociatedTokenAddress, TOKEN_PROGRAM_ID, ASSOCIATED_TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport fetch from 'node-fetch';\n\n// Replace with actual valid base58 public keys\nconst USDC_MINT = new PublicKey('EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v');  // USDC mint address\nconst bobWalletPublicKey = new PublicKey('BUX7s2ef2htTGb2KKoPHWkmzxPj4nTWMWRgs5CSbQxf9');  // Bob's wallet address\n\n// Establish a connection to the Solana cluster\nconst connection = new Connection('https://api.mainnet-beta.solana.com');\n\n// Replace these with actual valid base58 public keys\nconst feeAccount = new PublicKey('ReplaceWithActualValidBase58Key');  // Replace with actual fee account public key\nconst trackingAccount = new PublicKey('ReplaceWithActualValidBase58Key');  // Replace with actual tracking account public key\n\n// Ensure these are valid base58 strings\nconsole.log(\"USDC_MINT:\", USDC_MINT.toBase58());\nconsole.log(\"bobWalletPublicKey:\", bobWalletPublicKey.toBase58());\nconsole.log(\"feeAccount:\", feeAccount.toBase58());\nconsole.log(\"trackingAccount:\", trackingAccount.toBase58());\n\n// Get the associated token account for Bob's wallet\nasync function getBobUSDCTokenAccount(bobWalletPublicKey) {\n  const bobUSDCTokenAccount = await getAssociatedTokenAddress(\n    USDC_MINT,\n    bobWalletPublicKey,\n    true,\n    TOKEN_PROGRAM_ID,\n    ASSOCIATED_TOKEN_PROGRAM_ID\n  );\n  return bobUSDCTokenAccount;\n}\n\n// Step 1: Fetch swap info\nasync function fetchSwapInfo() {\n  const response = await fetch('https://quote-api.jup.ag/v6/quote?inputMint=mSoLzYCxHdYgdzU16g5QSh3i5K3z3KZK7ytfqcJm7So&outputMint=EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v&amount=5000000&swapMode=ExactOut&slippageBps=50');\n  const data = await response.json();\n  return {\n    inAmount: data.inAmount,\n    otherAmountThreshold: data.otherAmountThreshold,\n    quoteResponse: data\n  };\n}\n\n// Step 2: Fetch the swap transaction\nasync function fetchSwapTransaction(swapUserKeypair, bobUSDCTokenAccount, swapInfo) {\n  const requestBody = {\n    userPublicKey: swapUserKeypair.publicKey.toBase58(),\n    wrapAndUnwrapSol: true,\n    useSharedAccounts: true,\n    feeAccount: feeAccount.toBase58(),  // Use actual key\n    trackingAccount: trackingAccount.toBase58(),  // Use actual key\n    prioritizationFeeLamports: 0,  // No prioritization fee in this case\n    asLegacyTransaction: false,\n    useTokenLedger: false,\n    destinationTokenAccount: bobUSDCTokenAccount.toBase58(),\n    dynamicComputeUnitLimit: true,\n    skipUserAccountsRpcCalls: true,\n    quoteResponse: swapInfo.quoteResponse\n  };\n\n  const response = await fetch('https://quote-api.jup.ag/v6/swap', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(requestBody),\n  });\n\n  const { swapTransaction, lastValidBlockHeight } = await response.json();\n  return { swapTransaction, lastValidBlockHeight };\n}\n\n// Step 3: Send the transaction to the Solana blockchain\nasync function sendTransaction(swapTransaction, swapUserKeypair, lastValidBlockHeight) {\n  const transaction = VersionedTransaction.deserialize(Buffer.from(swapTransaction, 'base64'));\n\n  // Get the recent blockhash\n  // Using 'finalized' commitment to ensure the blockhash is final and secure\n  // You may experiment with 'processed' or 'confirmed' for fetching blockhash to increase speed\n  // Reference: https://solana.com/docs/oldrpc/http/getlatestblockhash\n  const bhInfo = await connection.getLatestBlockhashAndContext({ commitment: \"finalized\" });\n  transaction.recentBlockhash = bhInfo.value.blockhash;\n  transaction.feePayer = swapUserKeypair.publicKey;\n\n  // Sign the transaction with the swap user's keypair\n  transaction.sign([swapUserKeypair]);\n\n  // Simulate the transaction to ensure it will succeed\n  // Using 'finalized' commitment for the simulation to match the security level of the actual send\n  // You may experiment with 'confirmed' or 'processed' to simulate faster, but keep in mind the risks\n  // Reference: https://solana.com/docs/oldcore/transactions#commitment\n  const simulation = await connection.simulateTransaction(transaction, { commitment: \"finalized\" });\n  if (simulation.value.err) {\n    throw new Error(`Simulation failed: ${simulation.value.err.toString()}`);\n  }\n\n  // Send the transaction\n  try {\n    const signature = await connection.sendTransaction(transaction, {\n      // NOTE: Adjusting maxRetries to a lower value for trading, as 20 retries can be too much\n      // Experiment with different maxRetries values based on your tolerance for slippage and speed\n      // Reference: https://solana.com/docs/oldcore/transactions#retrying-transactions\n      maxRetries: 5,\n      skipPreflight: true,\n      preflightCommitment: \"finalized\",\n    });\n\n    // Confirm the transaction\n    // Using 'finalized' commitment to ensure the transaction is fully confirmed\n    // Reference: https://solana.com/docs/oldcore/transactions#confirmation\n    const confirmation = await connection.confirmTransaction({\n      signature,\n      blockhash: bhInfo.value.blockhash,\n      lastValidBlockHeight: bhInfo.value.lastValidBlockHeight,\n    }, \"finalized\");\n\n    if (confirmation.value.err) {\n      throw new Error(`Transaction not confirmed: ${confirmation.value.err.toString()}`);\n    }\n\n    console.log(\"Confirmed: \", signature);\n  } catch (error) {\n    console.error(\"Failed: \", error);\n    throw error;\n  }\n}\n\n// Example usage\n(async () => {\n  try {\n    // Generate keypairs for swap user and Bob's wallet, replace with actual keypairs for real usage\n    const swapUserKeypair = Keypair.generate();\n\n    // Ensure the bobUSDCTokenAccount is correct\n    const bobUSDCTokenAccount = await getBobUSDCTokenAccount(bobWalletPublicKey);\n\n    // Step 1: Fetch swap info\n    const swapInfo = await fetchSwapInfo();\n\n    // Step 2: Fetch the swap transactions\n    const { swapTransaction, lastValidBlockHeight } = await fetchSwapTransaction(swapUserKeypair, bobUSDCTokenAccount, swapInfo);\n\n    // Step 3: Send the transaction to the blockchain\n    await sendTransaction(swapTransaction, swapUserKeypair, lastValidBlockHeight);\n  } catch (error) {\n    console.error('Error:', error);\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Schema for Swap Instructions API Response\nDESCRIPTION: This schema outlines the structure of a successful API response for swap instructions. It includes properties for various types of instructions (compute budget, setup, swap, cleanup), address lookup tables, and other related data necessary for executing a swap on a blockchain platform.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/api/swap-api/swap-instructions.api.mdx#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"200\": {\n    \"description\": \"Successful response\",\n    \"content\": {\n      \"application/json\": {\n        \"schema\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"otherInstructions\": {\n              \"description\": \"- If you set {\\\"prioritizationFeeLamports\\\": {\\\"jitoTipLamports\\\": 5000}}, you will see a custom tip instruction to Jito here.\\n\",\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"programId\": {\"type\": \"string\"},\n                  \"accounts\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"pubkey\": {\"type\": \"string\"},\n                        \"isSigner\": {\"type\": \"boolean\"},\n                        \"isWritable\": {\"type\": \"boolean\"}\n                      },\n                      \"required\": [\"pubkey\", \"isSigner\", \"isWritable\"],\n                      \"title\": \"AccountMeta\"\n                    }\n                  },\n                  \"data\": {\"type\": \"string\"}\n                },\n                \"required\": [\"programId\", \"accounts\", \"data\"],\n                \"title\": \"Instruction\"\n              }\n            },\n            \"computeBudgetInstructions\": {\n              \"description\": \"- To setup the compute budget for the transaction.\\n\",\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"programId\": {\"type\": \"string\"},\n                  \"accounts\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"pubkey\": {\"type\": \"string\"},\n                        \"isSigner\": {\"type\": \"boolean\"},\n                        \"isWritable\": {\"type\": \"boolean\"}\n                      },\n                      \"required\": [\"pubkey\", \"isSigner\", \"isWritable\"],\n                      \"title\": \"AccountMeta\"\n                    }\n                  },\n                  \"data\": {\"type\": \"string\"}\n                },\n                \"required\": [\"programId\", \"accounts\", \"data\"],\n                \"title\": \"Instruction\"\n              }\n            },\n            \"setupInstructions\": {\n              \"description\": \"- To setup required token accounts for the users.\\n\",\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"programId\": {\"type\": \"string\"},\n                  \"accounts\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"pubkey\": {\"type\": \"string\"},\n                        \"isSigner\": {\"type\": \"boolean\"},\n                        \"isWritable\": {\"type\": \"boolean\"}\n                      },\n                      \"required\": [\"pubkey\", \"isSigner\", \"isWritable\"],\n                      \"title\": \"AccountMeta\"\n                    }\n                  },\n                  \"data\": {\"type\": \"string\"}\n                },\n                \"required\": [\"programId\", \"accounts\", \"data\"],\n                \"title\": \"Instruction\"\n              }\n            },\n            \"swapInstruction\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"programId\": {\"type\": \"string\"},\n                \"accounts\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                      \"pubkey\": {\"type\": \"string\"},\n                      \"isSigner\": {\"type\": \"boolean\"},\n                      \"isWritable\": {\"type\": \"boolean\"}\n                    },\n                    \"required\": [\"pubkey\", \"isSigner\", \"isWritable\"],\n                    \"title\": \"AccountMeta\"\n                  }\n                },\n                \"data\": {\"type\": \"string\"}\n              },\n              \"required\": [\"programId\", \"accounts\", \"data\"],\n              \"title\": \"Instruction\",\n              \"description\": \"- The actual swap instruction.\\n\"\n            },\n            \"cleanupInstruction\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"programId\": {\"type\": \"string\"},\n                \"accounts\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                      \"pubkey\": {\"type\": \"string\"},\n                      \"isSigner\": {\"type\": \"boolean\"},\n                      \"isWritable\": {\"type\": \"boolean\"}\n                    },\n                    \"required\": [\"pubkey\", \"isSigner\", \"isWritable\"],\n                    \"title\": \"AccountMeta\"\n                  }\n                },\n                \"data\": {\"type\": \"string\"}\n              },\n              \"required\": [\"programId\", \"accounts\", \"data\"],\n              \"title\": \"Instruction\",\n              \"description\": \"- To unwrap the SOL if `wrapAndUnwrapSol = true`.\\n\"\n            },\n            \"addressLookupTableAddresses\": {\n              \"description\": \"- The lookup table addresses if you are using versioned transaction.\\n\",\n              \"type\": \"array\",\n              \"items\": {\"type\": \"string\"}\n            }\n          },\n          \"required\": [\"computeBudgetInstructions\", \"setupInstructions\", \"swapInstruction\", \"addressLookupTableAddresses\"],\n          \"title\": \"SwapInstructionsResponse\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Swap Order with Jupiter Ultra API in JavaScript\nDESCRIPTION: Shows how to make a POST request to the Jupiter Ultra API's /execute endpoint to execute a swap order. It includes the required parameters: signedTransaction and requestId.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/101-ultra-api/2-execute-order.md#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst executeResponse = await (\n    await fetch('https://lite-api.jup.ag/ultra/v1/execute', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n            signedTransaction: signedTransaction,\n            requestId: orderResponse.requestId,\n        }),\n    })\n).json();\n```\n\n----------------------------------------\n\nTITLE: Signing and Submitting Jupiter Limit Order Transaction\nDESCRIPTION: TypeScript code to deserialize the transaction response, sign it with the wallet, and submit it to the Solana blockchain for Jupiter Limit Order creation.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/3-limit-order/1-limit-order.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// Deserialise base64 tx response\nconst { order, tx } = await response.json<CreateOrderResponse>();\nconst txBuff = Buffer.from(tx, \"base64\");\nconst vtx = VersionedTransaction.deserialize(txBuff);\n\n// Sign with wallet\nvtx.sign([wallet]);\nconst rpcSendOpts: SendOptions = { skipPreflight: true };\nconst hash = await RPC_CONNECTION.sendRawTransaction(\n  vtx.serialize(),\n  rpcSendOpts\n);\n```\n\n----------------------------------------\n\nTITLE: Executing Swap Transaction\nDESCRIPTION: Submitting and confirming the signed transaction on Solana network\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/2-apis/1-swap-api.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst latestBlockHash = await connection.getLatestBlockhash();\n\nconst rawTransaction = transaction.serialize()\nconst txid = await connection.sendRawTransaction(rawTransaction, {\n  skipPreflight: true,\n  maxRetries: 2\n});\nawait connection.confirmTransaction({\n blockhash: latestBlockHash.blockhash,\n lastValidBlockHeight: latestBlockHash.lastValidBlockHeight,\n signature: txid\n});\nconsole.log(`https://solscan.io/tx/${txid}`);\n```\n\n----------------------------------------\n\nTITLE: Adding Jupiter CPI Dependency in Cargo.toml\nDESCRIPTION: This snippet shows how to add the jupiter-cpi crate as a dependency in the Cargo.toml file for a Rust project. It specifies the git repository and commit hash to use.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/100-swap-api/2-build-swap-transaction.md#2025-04-16_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\njupiter-cpi = { git = \"https://github.com/jup-ag/jupiter-cpi\", rev = \"5eb8977\" }\n```\n\n----------------------------------------\n\nTITLE: Creating a Limit Order with Jupiter SDK in JavaScript\nDESCRIPTION: Function to create a new limit order using the Jupiter SDK. It specifies the order details including amounts, token mints, and expiration.\nSOURCE: https://github.com/jup-ag/docs/blob/main/Moved/2-limit-order-with-sdk.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Base key are used to generate a unique order id\nconst base = Keypair.generate();\n\nconst { tx, orderPubKey } = await limitOrder.createOrder({\n  owner: owner.publicKey,\n  inAmount: new BN(100000), // 1000000 => 1 USDC if inputToken.address is USDC mint\n  outAmount: new BN(100000),\n  inputMint: new PublicKey(inputToken.address),\n  outputMint: new PublicKey(outputToken.address),\n  expiredAt: null, // new BN(new Date().valueOf() / 1000)\n  base: base.publicKey,\n});\n\nawait sendAndConfirmTransaction(connection, tx, [owner, base]);\n```\n\n----------------------------------------\n\nTITLE: Implementing Jupiter Swap CPI in Rust\nDESCRIPTION: This code snippet demonstrates how to use the Jupiter CPI crate to perform a token swap via CPI in a Rust program. It includes setting up the necessary accounts, creating the CPI context, and calling the shared_accounts_route function.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/2-apis/7-cpi.md#2025-04-16_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse jupiter_cpi;\n\n...\n\nlet signer_seeds: &[&[&[u8]]] = &[...];\n\n// pass accounts to context one-by-one and construct accounts here.\n// Or in practice, it may be easier to use `remaining_accounts` https://book.anchor-lang.com/anchor_in_depth/the_program_module.html\nlet accounts = jupiter_cpi::cpi::accounts::SharedAccountsRoute {\n    token_program: ,\n    program_authority: ,\n    user_transfer_authority: ,\n    source_token_account: ,\n    program_source_token_account: ,\n    program_destination_token_account: ,\n    destination_token_account: ,\n    source_mint: ,\n    destination_mint: ,\n    platform_fee_account: ,\n    token_2022_program: ,\n};\n\nlet cpi_ctx = CpiContext::new_with_signer(\n    ctx.accounts.jup.to_account_info(),\n    accounts,\n    signer_seeds,\n);\n\njupiter_cpi::cpi::shared_accounts_route(\n    cpi_ctx,\n    id,\n    route_plan,\n    in_amount,\n    quoted_out_amount,\n    slippage_bps,\n    platform_fee_bps,\n)?\n```\n\n----------------------------------------\n\nTITLE: Successful Order Creation Response in JSON\nDESCRIPTION: This is an example of a successful response from the Jupiter Trigger API's createOrder endpoint. It returns the order ID, the transaction blob that needs to be signed, and a requestId for later use with the execute endpoint.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/102-trigger-api/1-create-order.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"order\": \"CFG9Bmppz7eZbna96UizACJPYT3UgVgps3KkMNNo6P4k\",\n  \"transaction\": \"AQAAAAAAAAAAAAAAAAAAAAAA......AgAKCAkBAQsPAAADBAEMCwcKCQkIBg0LIoVuSq9wn/WfdskdmHlfUulAQg8AAAAAAICpAwAAAAAAAAAJAwEAAAEJAA==\",\n  \"requestId\": \"370100dd-1a85-421b-9278-27f0961ae5f4\"\n}\n```\n\n----------------------------------------\n\nTITLE: Submitting Swap Request with Fee Account in JavaScript\nDESCRIPTION: This code snippet shows how to submit a swap request to the Jupiter Swap API, including the fee account parameter. It uses the fetch API to make a POST request to the swap endpoint with the necessary parameters in the request body.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/100-swap-api/4-add-fees-to-swap.md#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst swapResponse = await (\n    await fetch('https://api.jup.ag/swap/v1/swap', {\n        method: 'POST',\n        headers: {\n        'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            quoteResponse,\n            userPublicKey: wallet.publicKey.toBase58(), // Pass in actual referred user in production\n            feeAccount: feeAccount,\n        })\n    })\n).json();\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for Failed Swap\nDESCRIPTION: Illustrates an example JSON response structure for a failed swap execution, including status, signature, error message, and code.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/101-ultra-api/2-execute-order.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"Failed\",\n  \"signature\": \"transaction signature\",\n  \"error\": \"custom program error: #6023\",\n  \"code\": 4615026,\n  \"slot\": \"323597963\"\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Transaction Handling and Submission\nDESCRIPTION: Code for manually signing and sending a transaction to the Solana network. It includes deserializing the transaction, signing, serializing, obtaining blockhash information, sending the transaction, and confirming its execution with error handling.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/103-recurring-api/2-execute-order.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst transactionBase64 = createOrderResponse.transaction\nconst transaction = VersionedTransaction.deserialize(Buffer.from(transactionBase64, 'base64'));\n\ntransaction.sign([wallet.payer]);\n\nconst transactionBinary = transaction.serialize();\n\nconst blockhashInfo = await connection.getLatestBlockhashAndContext({ commitment: \"finalized\" });\n\nconst signature = await connection.sendRawTransaction(transactionBinary, {\n    maxRetries: 1,\n    skipPreflight: true\n});\n\nconst confirmation = await connection.confirmTransaction({\nsignature,\nblockhash: blockhashInfo.value.blockhash,\nlastValidBlockHeight: blockhashInfo.value.lastValidBlockHeight,\n}, \"finalized\");\n\nif (confirmation.value.err) {\n    throw new Error(`Transaction failed: ${JSON.stringify(confirmation.value.err)}\\n\\nhttps://solscan.io/tx/${signature}`);\n} else console.log(`Transaction successful: https://solscan.io/tx/${signature}`);\n```\n\n----------------------------------------\n\nTITLE: Signing Transactions with Solana web3.js in JavaScript\nDESCRIPTION: Demonstrates how to sign a transaction using the Solana web3.js library (v1). It includes deserializing the transaction, signing it with a wallet, and serializing it back to base64 format.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/101-ultra-api/2-execute-order.md#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// ... GET /order's response\n\n// Extract the transaction from the order response\nconst transactionBase64 = orderResponse.transaction\n\n// Deserialize the transaction\nconst transaction = VersionedTransaction.deserialize(Buffer.from(transactionBase64, 'base64'));\n\n// Sign the transaction\ntransaction.sign([wallet.payer]);\n\n// Serialize the transaction to base64 format\nconst signedTransaction = Buffer.from(transaction.serialize()).toString('base64');\n```\n\n----------------------------------------\n\nTITLE: Adding API Key to Request Headers in JavaScript\nDESCRIPTION: This code snippet demonstrates how to add an API key to the request headers when accessing Jupiter APIs. The headers include the Content-Type set to application/json and the x-api-key field where the API key should be inserted.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/0-api-setup.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nheaders: {\n    'Content-Type': 'application/json',\n    'x-api-key': '' // enter api key here\n},\n```\n\n----------------------------------------\n\nTITLE: Building Swap Transaction with Destination Token Account\nDESCRIPTION: Create a swap transaction that sends the output tokens to the merchant's token account specified by destinationTokenAccount parameter. This directs the payment to the merchant.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/100-swap-api/5-payments-through-swap.md#2025-04-16_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nconst swapResponse = await (\n    await fetch('https://lite-api.jup.ag/swap/v1/swap', {\n        method: 'POST',\n        headers: {\n        'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            quoteResponse,\n            userPublicKey: customerAccount.publicKey.toBase58(),\n            destinationTokenAccount: merchantUSDCTokenAccount.toBase58(),\n            // trackingAccount: trackingAccount.toBase58(),\n        })\n    })\n).json();\n\nconsole.log(swapResponse);\n```\n\n----------------------------------------\n\nTITLE: Requesting Swap Transaction in JavaScript\nDESCRIPTION: This code snippet demonstrates how to make a POST request to the /swap endpoint to get a base64-encoded unsigned swap transaction. It uses the response from a previous /quote request.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/api/swap-api/swap.api.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = await fetch('https://quote-api.jup.ag/v6/swap', {\n  method: 'POST',\n  headers: { 'Content-Type': 'application/json' },\n  body: JSON.stringify({\n    quoteResponse,\n    userPublicKey: 'string',\n    wrapUnwrapSOL: true,\n    feeAccount: 'string',\n    computeUnitPriceMicroLamports: 0,\n    asLegacyTransaction: true\n  })\n});\n\nconst swapResult = await response.json();\nconsole.log(swapResult);\n```\n\n----------------------------------------\n\nTITLE: Querying User Orders and History with Jupiter SDK in JavaScript\nDESCRIPTION: Functions to retrieve open orders, order history, and trade history for a user using the Jupiter SDK. It includes pagination and count retrieval.\nSOURCE: https://github.com/jup-ag/docs/blob/main/Moved/2-limit-order-with-sdk.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ownerFilter } from \"@jup-ag/limit-order-sdk\";\nimport { OrderHistoryItem, TradeHistoryItem } from \"@jup-ag/limit-order-sdk\";\n\nconst openOrder = await limitOrder.getOrders([ownerFilter(owner.publicKey)]);\n\nconst orderHistory: OrderHistoryItem[] = await limitOrder.getOrderHistory({\n  wallet: owner.publicKey.toBase58(),\n  take: 20, // optional, default is 20, maximum is 100\n  // lastCursor: order.id // optional, for pagination\n});\n\nconst orderHistoryCount: number = await limitOrder.getOrderHistoryCount({\n  wallet: owner.publicKey.toBase58(),\n});\n\nconst tradeHistory: TradeHistoryItem[] = await limitOrder.getTradeHistory({\n  wallet: owner.publicKey.toBase58(),\n  take: 20, // optional, default is 20, maximum is 100\n  // lastCursor: order.id // optional, for pagination\n});\n\nconst tradeHistoryCount: number = await limitOrder.getTradeHistoryCount({\n  wallet: owner.publicKey.toBase58(),\n});\n```\n\n----------------------------------------\n\nTITLE: Quote Response Schema\nDESCRIPTION: JSON response schema for successful quote requests. Contains details about the swap including input/output amounts, slippage settings, price impact, and route plan showing the path through different DEXes.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/api/swap-api/quote.api.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"inputMint\": \"string\",\n  \"inAmount\": \"string\",\n  \"outputMint\": \"string\",\n  \"outAmount\": \"string\",\n  \"otherAmountThreshold\": \"string\",\n  \"swapMode\": \"ExactIn|ExactOut\",\n  \"slippageBps\": 0,\n  \"platformFee\": {\n    \"amount\": \"string\",\n    \"feeBps\": 0\n  },\n  \"priceImpactPct\": \"string\",\n  \"routePlan\": [\n    {\n      \"swapInfo\": {\n        \"ammKey\": \"string\",\n        \"label\": \"string\",\n        \"inputMint\": \"string\",\n        \"outputMint\": \"string\",\n        \"inAmount\": \"string\",\n        \"outAmount\": \"string\",\n        \"feeAmount\": \"string\",\n        \"feeMint\": \"string\"\n      },\n      \"percent\": 0\n    }\n  ],\n  \"contextSlot\": 0,\n  \"timeTaken\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Sending Transaction with Solana in JavaScript\nDESCRIPTION: This code snippet illustrates how to manually sign and send a transaction to the Solana network. It includes deserializing the transaction, signing it, sending it to the network, and confirming the transaction. It also handles errors and provides a transaction URL for successful transactions.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/102-trigger-api/2-execute-order.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst transactionBase64 = createOrderResponse.transaction\nconst transaction = VersionedTransaction.deserialize(Buffer.from(transactionBase64, 'base64'));\n\ntransaction.sign([wallet.payer]);\n\nconst transactionBinary = transaction.serialize();\n\nconst blockhashInfo = await connection.getLatestBlockhashAndContext({ commitment: \"finalized\" });\n\nconst signature = await connection.sendRawTransaction(transactionBinary, {\n    maxRetries: 1,\n    skipPreflight: true\n});\n\nconst confirmation = await connection.confirmTransaction({\nsignature,\nblockhash: blockhashInfo.value.blockhash,\nlastValidBlockHeight: blockhashInfo.value.lastValidBlockHeight,\n}, \"finalized\");\n\nif (confirmation.value.err) {\n    throw new Error(`Transaction failed: ${JSON.stringify(confirmation.value.err)}\\n\\nhttps://solscan.io/tx/${signature}`);\n} else console.log(`Transaction successful: https://solscan.io/tx/${signature}`);\n```\n\n----------------------------------------\n\nTITLE: Requesting Unsigned Swap Transaction in JSON\nDESCRIPTION: Example response schema for a successful GET /order request. It includes details about the swap, route plan, transaction data, and various fees and parameters.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/api/ultra-api/order.api.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"inputMint\": \"string\",\n  \"outputMint\": \"string\",\n  \"inAmount\": \"string\",\n  \"outAmount\": \"string\",\n  \"otherAmountThreshold\": \"string\",\n  \"swapMode\": \"string\",\n  \"slippageBps\": 0,\n  \"priceImpactPct\": \"string\",\n  \"routePlan\": [\n    {\n      \"swapInfo\": {\n        \"ammKey\": \"string\",\n        \"label\": \"string\",\n        \"inputMint\": \"string\",\n        \"outputMint\": \"string\",\n        \"inAmount\": \"string\",\n        \"outAmount\": \"string\",\n        \"feeAmount\": \"string\",\n        \"feeMint\": \"string\"\n      },\n      \"percent\": 0\n    }\n  ],\n  \"contextSlot\": 0,\n  \"feeBps\": 0,\n  \"prioritizationType\": \"None\",\n  \"prioritizationFeeLamports\": 0,\n  \"swapType\": \"aggregator\",\n  \"transaction\": \"string\",\n  \"gasless\": true,\n  \"requestId\": \"string\",\n  \"totalTime\": 0,\n  \"taker\": \"string\",\n  \"quoteId\": \"string\",\n  \"maker\": \"string\",\n  \"expireAt\": \"string\",\n  \"lastValidBlockHeight\": 0,\n  \"platformFee\": {\n    \"amount\": \"string\",\n    \"feeBps\": 0\n  },\n  \"dynamicSlippageReport\": {\n    \"amplificationRatio\": \"string\",\n    \"otherAmount\": 0,\n    \"simulatedIncurredSlippageBps\": 0,\n    \"slippageBps\": 0,\n    \"categoryName\": \"string\",\n    \"heuristicMaxSlippageBps\": 0\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Development Wallet using .env File in JavaScript\nDESCRIPTION: This code shows how to set up a development wallet using a private key stored in an .env file. It uses the Solana web3.js and Anchor libraries to create a wallet instance.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/1-environment-setup.md#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// index.js\nimport { Keypair } from '@solana/web3.js';\nimport { Wallet } from '@coral-xyz/anchor';\nimport dotenv from 'dotenv';\nrequire('dotenv').config();\n\nconst wallet = new Wallet(Keypair.fromSecretKey(bs58.decode(process.env.PRIVATE_KEY || '')));\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n// .env\nPRIVATE_KEY=\"\"\n```\n\n----------------------------------------\n\nTITLE: Sending and Confirming Payment Transaction\nDESCRIPTION: Send the transaction to the Solana network with higher retry count for payment reliability, and confirm it completed successfully. This finalizes the payment process from customer to merchant.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/100-swap-api/5-payments-through-swap.md#2025-04-16_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nconst signature = await connection.sendRawTransaction(transactionBinary, {\n    maxRetries: 10,\n    preflightCommitment: \"finalized\",\n});\n  \nconst confirmation = await connection.confirmTransaction({ signature }, \"finalized\");\n\nif (confirmation.value.err) {\n    throw new Error(`Transaction failed: ${JSON.stringify(confirmation.value.err)}\\nhttps://solscan.io/${signature}/`);\n} else console.log(`Transaction successful: https://solscan.io/tx/${signature}/`);\n```\n\n----------------------------------------\n\nTITLE: Signing Transactions with Solana web3.js\nDESCRIPTION: Code snippet demonstrating how to sign a transaction using the Solana web3.js library. It extracts the transaction from the order response, deserializes it, signs it with the wallet, and serializes it back to base64 format.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/103-recurring-api/2-execute-order.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// ... GET /createOrder's response\n\n// Extract the transaction from the order response\nconst transactionBase64 = createOrderResponse.transaction\n\n// Deserialize the transaction\nconst transaction = VersionedTransaction.deserialize(Buffer.from(transactionBase64, 'base64'));\n\n// Sign the transaction\ntransaction.sign([wallet.payer]);\n\n// Serialize the transaction to base64 format\nconst signedTransaction = Buffer.from(transaction.serialize()).toString('base64');\n```\n\n----------------------------------------\n\nTITLE: Configuring Priority Fee in Jupiter Swap API Request in JSX\nDESCRIPTION: Code for requesting a swap transaction with prioritization fee parameters. This example shows how to set up priority fee estimation with a maximum cap of 10,000,000 lamports and very high priority level for better transaction landing.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/100-swap-api/3-send-swap-transaction.md#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst swapResponse = await (\n  await fetch('https://lite-api.jup.ag/swap/v1', {\n      method: 'POST',\n      headers: {\n      'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n          quoteResponse,\n          userPublicKey: wallet.publicKey.toBase58(),\n          prioritizationFeeLamports: {\n              priorityLevelWithMaxLamports: {\n                  maxLamports: 10000000,\n                  global: false,\n                  priorityLevel: \"veryHigh\"\n              }\n          }\n      })\n  })\n).json();\n```\n\n----------------------------------------\n\nTITLE: Defining Request Body Schema for Swap Instructions API\nDESCRIPTION: JSON schema defining the structure of the request body for the /swap-instructions endpoint. Includes fields for quote details, user wallet address, and optional parameters.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/api/swap-api/swap-instructions.api.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"quoteResponse\": {\n      \"type\": \"object\",\n      \"description\": \"The response from /quote endpoint\"\n    },\n    \"userPublicKey\": {\n      \"type\": \"string\",\n      \"description\": \"The user's wallet address\"\n    },\n    \"asLegacyTransaction\": {\n      \"type\": \"boolean\",\n      \"description\": \"Whether to return legacy transaction\"\n    },\n    \"computeUnitPriceMicroLamports\": {\n      \"type\": \"integer\",\n      \"description\": \"Compute unit price in micro lamports\"\n    },\n    \"useSharedAccounts\": {\n      \"type\": \"boolean\",\n      \"description\": \"Whether to use shared program accounts\"\n    },\n    \"useTokenLedger\": {\n      \"type\": \"boolean\",\n      \"description\": \"Whether to use token ledger\"\n    },\n    \"feeAccount\": {\n      \"type\": \"string\",\n      \"description\": \"Fee account to use\"\n    }\n  },\n  \"required\": [\n    \"quoteResponse\",\n    \"userPublicKey\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Swap Instructions in TypeScript\nDESCRIPTION: This snippet demonstrates how to fetch swap instructions from the Jupiter API and process them into a versioned transaction. It includes handling of various instruction types and address lookup tables.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/2-apis/1-swap-api.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst instructions = await (\n  await fetch('https://quote-api.jup.ag/v6/swap-instructions', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      // quoteResponse from /quote api\n      quoteResponse,\n      userPublicKey: swapUserKeypair.publicKey.toBase58(),\n    })\n  })\n).json();\n\nif (instructions.error) {\n  throw new Error(\"Failed to get swap instructions: \" + instructions.error);\n}\n\nconst {\n  tokenLedgerInstruction, // If you are using `useTokenLedger = true`.\n  computeBudgetInstructions, // The necessary instructions to setup the compute budget.\n  setupInstructions, // Setup missing ATA for the users.\n  swapInstruction: swapInstructionPayload, // The actual swap instruction.\n  cleanupInstruction, // Unwrap the SOL if `wrapAndUnwrapSol = true`.\n  addressLookupTableAddresses, // The lookup table addresses that you can use if you are using versioned transaction.\n} = instructions;\n\nconst deserializeInstruction = (instruction) => {\n  return new TransactionInstruction({\n    programId: new PublicKey(instruction.programId),\n    keys: instruction.accounts.map((key) => ({\n      pubkey: new PublicKey(key.pubkey),\n      isSigner: key.isSigner,\n      isWritable: key.isWritable,\n    })),\n    data: Buffer.from(instruction.data, \"base64\"),\n  });\n};\n\nconst getAddressLookupTableAccounts = async (\n  keys: string[]\n): Promise<AddressLookupTableAccount[]> => {\n  const addressLookupTableAccountInfos =\n    await connection.getMultipleAccountsInfo(\n      keys.map((key) => new PublicKey(key))\n    );\n\n  return addressLookupTableAccountInfos.reduce((acc, accountInfo, index) => {\n    const addressLookupTableAddress = keys[index];\n    if (accountInfo) {\n      const addressLookupTableAccount = new AddressLookupTableAccount({\n        key: new PublicKey(addressLookupTableAddress),\n        state: AddressLookupTableAccount.deserialize(accountInfo.data),\n      });\n      acc.push(addressLookupTableAccount);\n    }\n\n    return acc;\n  }, new Array<AddressLookupTableAccount>());\n};\n\nconst addressLookupTableAccounts: AddressLookupTableAccount[] = [];\n\naddressLookupTableAccounts.push(\n  ...(await getAddressLookupTableAccounts(addressLookupTableAddresses))\n);\n\nconst blockhash = (await connection.getLatestBlockhash()).blockhash;\nconst messageV0 = new TransactionMessage({\n  payerKey: payerPublicKey,\n  recentBlockhash: blockhash,\n  instructions: [\n    // uncomment if needed: ...setupInstructions.map(deserializeInstruction),\n    deserializeInstruction(swapInstructionPayload),\n    // uncomment if needed: deserializeInstruction(cleanupInstruction),\n  ],\n}).compileToV0Message(addressLookupTableAccounts);\nconst transaction = new VersionedTransaction(messageV0);\n```\n\n----------------------------------------\n\nTITLE: Creating Time-based Trading Order with Jupiter API\nDESCRIPTION: Creates a time-based recurring order by making a POST request to Jupiter's API. The order executes at fixed intervals with a predetermined amount per cycle calculated from total input amount divided by number of orders.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/103-recurring-api/1-create-order.md#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst createOrderResponse = await (\n    await fetch('https://lite-api.jup.ag/recurring/v1/createOrder', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n            user: wallet.publicKey.toBase58(),\n            inputMint: \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\",\n            outputMint: \"So11111111111111111111111111111111111111112\",\n            params: {\n                time: {\n                    inAmount: 104000000,\n                    numberOfOrders: 2,\n                    interval: 86400,\n                    minPrice: null,\n                    maxPrice: null,\n                    startAt: null,\n                },\n            },\n        }),\n    })\n).json();\n```\n\n----------------------------------------\n\nTITLE: Handling Swap Execution Response in JavaScript\nDESCRIPTION: Demonstrates how to handle the response from the swap execution API call. It checks the status of the swap and logs appropriate messages for successful and failed swaps.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/101-ultra-api/2-execute-order.md#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nif (executeResponse.status === \"Success\") {\n    console.log('Swap successful:', JSON.stringify(executeResponse, null, 2));\n    console.log(`https://solscan.io/tx/${executeResponse.signature}`);\n} else {\n    console.error('Swap failed:', JSON.stringify(executeResponse, null, 2));\n    console.log(`https://solscan.io/tx/${executeResponse.signature}`);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Limit Order Transaction\nDESCRIPTION: Generating serialized transactions for limit order creation using Jupiter API endpoint\nSOURCE: https://github.com/jup-ag/docs/blob/main/Moved/1-limit-order-api.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// Base key are used to generate a unique order id\nconst base = Keypair.generate();\n\n// get serialized transactions\nconst { tx } = await (\n  await fetch('https://jup.ag/api/limit/v1/createOrder', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      owner: wallet.publicKey.toString(),\n      inAmount: 100000, // 1000000 => 1 USDC if inputToken.address is USDC mint\n      outAmount: 100000,\n      inputMint: inputMint.toString(),\n      outputMint: outputMint.toString(),\n      expiredAt: null, // new Date().valueOf() / 1000,\n      base: base.publicKey.toString(),\n      // referralAccount and name are both optional.\n      // Please provide both to get referral fees.\n      // More details in the section below.\n      // referralAccount: referralPublicKey,\n      // referralName: \"Referral Name\"\n    })\n  })\n).json();\n```\n\n----------------------------------------\n\nTITLE: Sending Request to Jupiter Limit Order API\nDESCRIPTION: TypeScript code to send a POST request to the Jupiter Limit Order API for creating an order, including necessary headers and request options.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/3-limit-order/1-limit-order.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst fetchOpts: RequestInit<RequestInitCfProperties> = {\n  method: \"POST\",\n  headers: {\n    Accept: \"application/json\",\n    \"Content-Type\": \"application/json\",\n  },\n  body: JSON.stringify(createOrderBody),\n};\n\nconst response = await fetch(\n  \"https://api.jup.ag/limit/v2/createOrder\",\n  fetchOpts\n);\n```\n\n----------------------------------------\n\nTITLE: Enabling Dynamic Compute Unit Limit in Jupiter Swap API Request in JSX\nDESCRIPTION: Code for requesting a swap transaction with dynamic compute unit limit. This example shows how to enable dynamic compute unit estimation to optimize transaction prioritization and fee usage.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/100-swap-api/3-send-swap-transaction.md#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst swapTransaction = await (\n  await fetch('https://lite-api.jup.ag/swap/v1', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      quoteResponse,\n      userPublicKey: wallet.publicKey.toBase58(),\n      dynamicComputeUnitLimit: true\n    })\n  })\n).json();\n```\n\n----------------------------------------\n\nTITLE: Using Token Ledger Instruction in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the token ledger instruction when the exact input amount for the Jupiter swap is unknown until an instruction before the swap occurs. It includes composing multiple instructions in a transaction.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/2-apis/1-swap-api.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst instructions = await (\n  await fetch('https://quote-api.jup.ag/v6/swap-instructions', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      // quoteResponse from /quote api\n      quoteResponse,\n      useTokenLedger: true,\n  })\n).json();\n\nconst {\n  tokenLedgerInstruction: tokenLedgerPayload, // If you are using `useTokenLedger = true`.\n  swapInstruction: swapInstructionPayload, // The actual swap instruction.\n  addressLookupTableAddresses, // The lookup table addresses that you can use if you are using versioned transaction.\n} = instructions;\n\n// A withdraw instruction that will increase the user input token account amount.\nconst withdrawInstruction = ...;\n\n// Coupled with the tokenLedgerInstruction, the swap instruction will use the\n// user increased amount of the input token account after the withdrawal as input amount.\nconst tokenLedgerInstruction = new TransactionInstruction({\n  programId: new PublicKey(tokenLedgerPayload.programId),\n  keys: tokenLedgerPayload.accounts.map((key) => ({\n    pubkey: new PublicKey(key.pubkey),\n      isSigner: key.isSigner,\n      isWritable: key.isWritable,\n    })),\n  data: Buffer.from(tokenLedgerPayload.data, \"base64\"),\n});\n\nconst swapInstruction = new TransactionInstruction({\n  programId: new PublicKey(swapInstructionPayload.programId),\n  keys: swapInstructionPayload.accounts.map((key) => ({\n    pubkey: new PublicKey(key.pubkey),\n      isSigner: key.isSigner,\n      isWritable: key.isWritable,\n    })),\n  data: Buffer.from(swapInstructionPayload.data, \"base64\"),\n});\n\nconst getAddressLookupTableAccounts = async (\n  keys: string[]\n): Promise<AddressLookupTableAccount[]> => {\n  const addressLookupTableAccountInfos =\n    await connection.getMultipleAccountsInfo(\n      keys.map((key) => new PublicKey(key))\n    );\n\n  return addressLookupTableAccountInfos.reduce((acc, accountInfo, index) => {\n    const addressLookupTableAddress = keys[index];\n    if (accountInfo) {\n      const addressLookupTableAccount = new AddressLookupTableAccount({\n        key: new PublicKey(addressLookupTableAddress),\n        state: AddressLookupTableAccount.deserialize(accountInfo.data),\n      });\n      acc.push(addressLookupTableAccount);\n    }\n\n    return acc;\n  }, new Array<AddressLookupTableAccount>());\n};\n\nconst addressLookupTableAccounts: AddressLookupTableAccount[] = [];\n\naddressLookupTableAccounts.push(\n  ...(await getAddressLookupTableAccounts(addressLookupTableAddresses))\n);\n\nconst messageV0 = new TransactionMessage({\n  payerKey: payerPublicKey,\n  recentBlockhash: blockhash,\n  instructions: [tokenLedgerInstruction, withdrawInstruction, swapInstruction],\n}).compileToV0Message(addressLookupTableAccounts);\nconst transaction = new VersionedTransaction(messageV0);\n```\n\n----------------------------------------\n\nTITLE: Fetching Swap Transaction with Jito Tips in JavaScript\nDESCRIPTION: This code snippet shows how to fetch a swap transaction from Jupiter's Swap API with Jito Tips included. It sends a POST request to the swap endpoint, specifying the quote response, user's public key, and the Jito Tip amount in lamports as a fixed value.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/100-swap-api/3-send-swap-transaction.md#2025-04-16_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nconst swapTransaction = await (\n  await fetch('https://lite-api.jup.ag/swap/v1', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      quoteResponse,\n      userPublicKey: wallet.publicKey.toBase58(),\n      prioritizationFeeLamports: {\n        jitoTipLamports: 1000000 // note that this is FIXED LAMPORTS not a max cap\n      }\n    })\n  })\n).json();\n```\n\n----------------------------------------\n\nTITLE: HTTP GET Quote Request\nDESCRIPTION: API endpoint for getting a swap quote between two tokens. Required parameters include inputMint, outputMint and amount. Optional parameters allow customization of slippage, swap mode, DEX selection and other trading preferences.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/api/swap-api/quote.api.mdx#2025-04-16_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /quote?inputMint={inputMint}&outputMint={outputMint}&amount={amount}\n```\n\n----------------------------------------\n\nTITLE: Fetching Token Prices in JavaScript\nDESCRIPTION: This snippet demonstrates how to fetch prices for multiple tokens using the Jupiter Price API. It shows how to make a request to the API and parse the JSON response.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/500-price-api/README.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst priceResponse = await fetch(\n    'https://lite-api.jup.ag/price/v2?ids=JUPyiwrYJFskUPiHa7hkeR8VUtAeFoSYbKedZNsDvCN,So11111111111111111111111111111111111111112'\n);\n\nconst priceData = await priceResponse.json();\n\nconsole.log(priceData);\n```\n\n----------------------------------------\n\nTITLE: Fetching SOL Price in USDC using Jupiter Price API\nDESCRIPTION: Example API call showing how to get the unit price of SOL in USDC. Returns price data including token IDs, symbols and the calculated price.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/2-apis/4-price-api.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n# Unit price of 1 SOL based on the buy amount of USDC\nhttps://price.jup.ag/v6/price?ids=SOL\n\n{\n  \"data\": {\n    \"SOL\": {\n      \"id\": \"So11111111111111111111111111111111111111112\",\n      \"mintSymbol\": \"SOL\",\n      \"vsToken\": \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\",\n      \"vsTokenSymbol\": \"USDC\",\n      \"price\": 30.389174403\n    }\n  },\n  \"timeTaken\": 0.0003002400007972028\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Swap Route Quote\nDESCRIPTION: Getting a quote for swapping SOL to USDC with specified amount and slippage\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/2-apis/1-swap-api.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst quoteResponse = await (\n  await fetch('https://quote-api.jup.ag/v6/quote?inputMint=So11111111111111111111111111111111111111112\\&outputMint=EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\\&amount=100000000\\&slippageBps=50'\n  )\n).json();\n```\n\n----------------------------------------\n\nTITLE: Generating Swap Transaction\nDESCRIPTION: Serializing the quote into a swap transaction with user configuration\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/2-apis/1-swap-api.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { swapTransaction } = await (\n  await fetch('https://quote-api.jup.ag/v6/swap', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      quoteResponse,\n      userPublicKey: wallet.publicKey.toString(),\n      wrapAndUnwrapSol: true,\n    })\n  })\n).json();\n```\n\n----------------------------------------\n\nTITLE: Fetching Historical Recurring Orders with Jupiter API in JavaScript\nDESCRIPTION: This code snippet shows how to retrieve order history from the Jupiter API. It specifies 'history' as the orderStatus parameter and 'price' as the recurringType, and requires replacing the placeholder with the user's public key.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/103-recurring-api/6-get-recurring-orders.md#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst orderHistoryResponse = await (\n    await fetch(\n        'https://lite-api.jup.ag/recurring/v1/getRecurringOrders?user=replaceWithPublicKey&orderStatus=history&recurringType=price'\n    )\n).json();\n```\n\n----------------------------------------\n\nTITLE: Performing Swap with Fee Account in JavaScript\nDESCRIPTION: This JavaScript function demonstrates how to perform a swap using the Jupiter API with a custom fee account. It finds the fee account program address, constructs the request body, and sends a POST request to the swap API endpoint.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/2-apis/3-adding-fees.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nasync function getFeeAccountAndSwapTransaction(\n  referralAccountPubkey,\n  mint,\n  quoteResponse,\n  wallet\n) {\n  try {\n    const [feeAccount] = await PublicKey.findProgramAddressSync(\n      [\n        Buffer.from(\"referral_ata\"),\n        referralAccountPubkey.toBuffer(),\n        mint.toBuffer(),\n      ],\n      new PublicKey(\"REFER4ZgmyYx9c6He5XfaTMiGfdLwRnkV4RPp9t9iF3\")\n    );\n    const requestBody = {\n      quoteResponse,\n      userPublicKey: wallet.publicKey.toString(),\n      wrapAndUnwrapSol: true,\n      feeAccount,\n    };\n    const response = await fetch(\"https://quote-api.jup.ag/v6/swap\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(requestBody),\n    });\n    if (!response.ok) {\n      throw new Error(`Error performing swap: ${response.statusText}`);\n    }\n    const { swapTransaction } = await response.json();\n    console.log({ swapTransaction });\n    return swapTransaction;\n  } catch (error) {\n    console.error(\"Failed to get fee account and swap transaction:\", error);\n  }\n}\ngetFeeAccountAndSwapTransaction(\n  referralAccountPubkey,\n  mint,\n  quoteResponse,\n  wallet\n);\n```\n\n----------------------------------------\n\nTITLE: Parsing Dynamic Slippage API Response (JSON)\nDESCRIPTION: This snippet shows the structure of the JSON response from the swap API when using dynamic slippage. It includes the serialized transaction, block height information, prioritization details, and a dynamic slippage report with optimized slippage values and simulation results.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/2-apis/1-swap-api.md#2025-04-16_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"swapTransaction\": \"// serialized transaction\",\n    \"lastValidBlockHeight\": 266691690,\n    \"prioritizationFeeLamports\": 384,\n    \"computeUnitLimit\": 107468,\n    \"prioritizationType\": {\n        \"computeBudget\": {\n            \"microLamports\": 3577,\n            \"estimatedMicroLamports\": 3577\n        }\n    },\n    \"dynamicSlippageReport\": {\n        // the final optimized slippage bps used in the serialized transaction\n        \"slippageBps\": 12,\n        // the incurred out amount observed from simulating the transaction\n        \"otherAmount\": 8759842,\n        // the simulated incurred slippage during optimization\n        // negative integer refers to the loss in bps while positive refers to the gain\n        \"simulatedIncurredSlippageBps\": -8,\n        // an amplification ratio we use to add a buffer to the estimated slippage\n        \"amplificationRatio\": \"1.5\"\n    },\n    \"simulationError\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing AMM Interface in Rust for Jupiter Integration\nDESCRIPTION: Rust trait definition for implementing the AMM interface required for DEX integration with Jupiter Core Engine. Includes methods for account management, quoting, swapping, and lifecycle management of the AMM.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/600-routing/dex-integration.md#2025-04-16_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\npub trait Amm {\n    fn from_keyed_account(keyed_account: &KeyedAccount, amm_context: &AmmContext) -> Result<Self>\n    where\n        Self: Sized;\n    fn label(&self) -> String;\n    fn program_id(&self) -> Pubkey;\n    fn key(&self) -> Pubkey;\n    fn get_reserve_mints(&self) -> Vec<Pubkey>;\n    fn get_accounts_to_update(&self) -> Vec<Pubkey>;\n    fn update(&mut self, account_map: &AccountMap) -> Result<()>;\n    fn quote(&self, quote_params: &QuoteParams) -> Result<Quote>;\n    fn get_swap_and_account_metas(&self, swap_params: &SwapParams) -> Result<SwapAndAccountMetas>;\n    fn has_dynamic_accounts(&self) -> bool {\n        false\n    }\n    fn requires_update_for_reserve_mints(&self) -> bool {\n        false\n    }\n    fn supports_exact_out(&self) -> bool {\n        false\n    }\n    fn get_user_setup(&self) -> Option<AmmUserSetup> {\n        None\n    }\n    fn clone_amm(&self) -> Box<dyn Amm + Send + Sync>;\n    fn unidirectional(&self) -> bool {\n        false\n    }\n    fn program_dependencies(&self) -> Vec<(Pubkey, String)> {\n        vec![]\n    }\n    fn get_accounts_len(&self) -> usize {\n        32\n    }\n    fn underlying_liquidities(&self) -> Option<HashSet<Pubkey>> {\n        None\n    }\n    fn is_active(&self) -> bool {\n        true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching JUP Price in Bonk using Jupiter Price API\nDESCRIPTION: Example showing how to get the unit price of JUP in Bonk tokens using the vsToken parameter. Demonstrates price calculation with an alternate base token.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/2-apis/4-price-api.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n# Unit price of 1 JUP based on the buy amount of Bonk\nhttps://price.jup.ag/v6/price?ids=JUP&vsToken=Bonk\n\n{\n    \"data\": {\n        \"JUP\": {\n            \"id\": \"JUPyiwrYJFskUPiHa7hkeR8VUtAeFoSYbKedZNsDvCN\",\n            \"mintSymbol\": \"JUP\",\n            \"vsToken\": \"DezXAZ8z7PnrnRJjz3wXBoRgixCa6xjnB7YaB1pPB263\",\n            \"vsTokenSymbol\": \"Bonk\",\n            \"price\": 44580.353494\n        }\n    },\n    \"timeTaken\": 0.0002948529999997618\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing the UnifiedWalletProvider in React for Solana\nDESCRIPTION: Example showing how to wrap your application with the UnifiedWalletProvider component to enable wallet functionality. The component requires configuration including environment, metadata, and notification callbacks.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/300-tool-kits/900-unified-wallet-kit.md#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst ExampleBaseOnly = () => {\n  return (\n    <UnifiedWalletProvider\n      wallets={[]}\n      config={{\n        autoConnect: false,\n        env: 'mainnet-beta',\n        metadata: {\n          name: 'UnifiedWallet',\n          description: 'UnifiedWallet',\n          url: 'https://jup.ag',\n          iconUrls: ['https://jup.ag/favicon.ico'],\n        },\n        notificationCallback: WalletNotification,\n        walletlistExplanation: {\n          href: 'https://station.jup.ag/docs/old/additional-topics/wallet-list',\n        },\n      }}\n    >\n      <UnifiedWalletButton />\n    </UnifiedWalletProvider>\n  );\n};\n\nexport default ExampleBaseOnly;\n```\n\n----------------------------------------\n\nTITLE: Configuring Transaction Sending Options in JavaScript\nDESCRIPTION: This snippet demonstrates how to configure options when sending a raw transaction on the Solana network. It sets the maximum number of retries, enables skipping preflight checks, and specifies the preflight commitment level to 'processed' for faster transaction submission.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/2-apis/10-troubleshooting.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst txid = await connection.sendRawTransaction(rawTransaction, {\n  maxRetries: 2,\n  skipPreflight: true, // If you set this to true, you can skip the next one.\n  preflightCommitment: 'processed'\n});\n```\n\n----------------------------------------\n\nTITLE: Signing Transaction with Solana web3.js in JavaScript\nDESCRIPTION: This snippet demonstrates how to sign a transaction using the Solana web3.js library. It extracts the transaction from the order response, deserializes it, signs it with the wallet, and then serializes it back to base64 format.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/102-trigger-api/2-execute-order.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// ... GET /order's response\n\n// Extract the transaction from the order response\nconst transactionBase64 = orderResponse.tx\n\n// Deserialize the transaction\nconst transaction = VersionedTransaction.deserialize(Buffer.from(transactionBase64, 'base64'));\n\n// Sign the transaction\ntransaction.sign([wallet.payer]);\n\n// Serialize the transaction to base64 format\nconst signedTransaction = Buffer.from(transaction.serialize()).toString('base64');\n```\n\n----------------------------------------\n\nTITLE: Creating an Order with Jupiter Trigger API in JavaScript\nDESCRIPTION: This code snippet demonstrates how to create a POST request to Jupiter's Trigger API to create an order. It includes parameters for specifying input/output tokens, amounts, and optional settings like slippage and expiry dates.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/102-trigger-api/1-create-order.md#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst createOrderResponse = await (\n    await fetch('https://api.jup.ag/trigger/v1/createOrder', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n            inputMint: inputMint.toString(),\n            outputMint: outputMint.toString(),\n            maker: \"jdocuPgEAjMfihABsPgKEvYtsmMzjUHeq9LX4Hvs7f3\",\n            payer: \"jdocuPgEAjMfihABsPgKEvYtsmMzjUHeq9LX4Hvs7f3\",\n            params: {\n                makingAmount: \"1000000\",\n                takingAmount: \"300000\",\n                // slippageBps: \"\", // Optional, by nature, trigger orders execute with 0 slippage\n                // expiredAt: \"\", // In unix seconds (e.g. Date.now()/1_000) or optional\n                // feeBps: \"\", // Requires referral account or optional\n            },\n            computeUnitPrice: \"auto\",\n            // feeAccount: \"\", // Optional but if specified it is the referral token account of the output mint\n            // wrapAndUnwrapSol: true, // Default true or optional\n        })\n    })\n).json();\n\nconsole.log(createOrderResponse);\n```\n\n----------------------------------------\n\nTITLE: Creating Request Body for Jupiter Limit Order\nDESCRIPTION: TypeScript code to create a request body for a Jupiter Limit Order, specifying the maker, payer, input and output mints, and order parameters.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/3-limit-order/1-limit-order.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst createOrderBody: CreateOrder = {\n  maker: wallet.publicKey.toBase58(),\n  payer: wallet.publicKey.toBase58(),\n  inputMint: \"So11111111111111111111111111111111111111112\",\n  outputMint: \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\",\n  params: {\n    makingAmount: \"50000000\", // 0.05 SOL\n    takingAmount: \"100000000\", // 100 USDC\n  },\n\n  // \"auto\" sets the priority fee based on network congestion\n  // and it will be capped at 500,000\n  computeUnitPrice: \"auto\",\n};\n```\n\n----------------------------------------\n\nTITLE: Fetching All Tradable Tokens in JavaScript\nDESCRIPTION: Retrieves a list of all token mints that are tradable on Jupiter, including new tokens and those that passed market liquidity checks.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/501-token-api/README.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst allTradableResponse = await (\n    await fetch('https://lite-api.jup.ag/tokens/v1/mints/tradable')\n).json();\n\nconsole.log(allTradableResponse);\n```\n\n----------------------------------------\n\nTITLE: Calculating Borrow Rate in Jupiter Perpetuals Using Dual Slope Model\nDESCRIPTION: This snippet shows how to calculate the borrow rate using the dual slope model in Jupiter Perpetuals. It takes into account minimum rate, maximum rate, target rate, and target utilization to determine the borrow rate based on current utilization.\nSOURCE: https://github.com/jup-ag/docs/blob/main/guides/8-perpetual-exchange/2-how-it-works.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# First, calculate the slopes for both curves\nlower_slope = (target_rate - minimum_rate) / target_utilization\nupper_slope = (maximum_rate - target_rate) / (1 - target_utilization)\n\n# Calculate the borrow rate based on current utilization\nif utilization < target_utilization:\n    # Below target utilization: Use gentler slope starting from minimum_rate\n    borrow_rate = minimum_rate + (lower_slope * utilization)\nelse:\n    # Above target utilization: Use steeper slope starting from target_rate\n    borrow_rate = target_rate + (upper_slope * (utilization - target_utilization))\n```\n\n----------------------------------------\n\nTITLE: Generating DCA Program Derived Address in Solana\nDESCRIPTION: Generates a Program Derived Address (PDA) for a DCA account using user public key, input/output token public keys, and current timestamp. This PDA is used to create a new DCA account in the program.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/4-dca/1-integration.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst [dca] = await PublicKey.findProgramAddressSync(\n  [\n    Buffer.from(\"dca\"),\n    userPubKey.toBuffer(),\n    inTokenPubKey.toBuffer(),\n    outTokenPubKey.toBuffer(),\n    new BN(parseInt((Date.now() / 1000).toString())).toArrayLike(\n      Buffer,\n      \"le\",\n      8\n    ),\n  ],\n  new PublicKey(\"DCA265Vj8a9CEuX1eb1LWRnDT7uK6q1xMipnNyatn23M\")\n);\n```\n\n----------------------------------------\n\nTITLE: Create Trigger Order Request Body Schema\nDESCRIPTION: JSON schema defining the required parameters for creating a trigger order, including input/output mints, maker/payer addresses, and order parameters like amounts and expiration.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/api/trigger-api/create-order.api.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"maker\": \"jdocuPgEAjMfihABsPgKEvYtsmMzjUHeq9LX4Hvs7f3\",\n  \"payer\": \"jdocuPgEAjMfihABsPgKEvYtsmMzjUHeq9LX4Hvs7f3\",\n  \"inputMint\": \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\",\n  \"outputMint\": \"So11111111111111111111111111111111111111112\",\n  \"params\": {\n    \"makingAmount\": \"100000000\",\n    \"takingAmount\": \"50000000\"\n  },\n  \"computeUnitPrice\": \"auto\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Jupiter Swap Request Schema in JSON\nDESCRIPTION: Comprehensive JSON schema defining the structure and validation rules for Jupiter's swap request endpoint. Includes required fields for user public key and quote response, along with optional parameters for handling SOL wrapping, shared accounts, fees, transaction prioritization and compute settings.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/api/swap-api/swap-instructions.api.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"required\":true,\"content\":{\"application/json\":{\"schema\":{\"type\":\"object\",\"required\":[\"userPublicKey\",\"quoteResponse\"],\"properties\":{\"userPublicKey\":{\"type\":\"string\"},\"wrapAndUnwrapSol\":{\"description\":\"- To automatically wrap/unwrap SOL in the transaction\\n- If false, it will use wSOL token account\\n- Parameter will be ignored if `destinationTokenAccount` is set because the `destinationTokenAccount` may belong to a different user that we have no authority to close\\n\",\"type\":\"boolean\",\"default\":true},\"useSharedAccounts\":{\"description\":\"- The default is determined dynamically by the routing engine, allowing us to optimize for compute units, etc\\n- This enables the usage of shared program accounts, this is essential as complex routing will require multiple intermediate token accounts which the user might not have\\n- If true, you do not need to handle the creation of intermediate token accounts for the user\\n- Do note, shared accounts route will fail on some new AMMs (low liquidity token)\\n\",\"type\":\"boolean\"},\"feeAccount\":{\"description\":\"- An token account that will be used to collect fees\\n- The mint of the token account **can only be either the input or output mint of the swap**\\n- You no longer are required to use the Referral Program\\n- See [Add Fees](/docs/swap-api/add-fees-to-swap) guide for more details\\n\",\"type\":\"string\"},\"trackingAccount\":{\"description\":\"- Specify any public key that belongs to you to track the transactions\\n- Useful for integrators to get all the swap transactions from this public key\\n- Query the data using a block explorer like Solscan/SolanaFM or query like Dune/Flipside\\n\",\"type\":\"string\"},\"prioritizationFeeLamports\":{\"description\":\"- To specify a level or amount of additional fees to prioritize the transaction\\n- It can be used for EITHER priority fee OR Jito tip (not both at the same time)\\n- If you want to include both, you will need to use `/swap-instructions` to add both at the same time\\n\",\"type\":\"object\",\"properties\":{\"priorityLevelWithMaxLamports\":{\"type\":\"object\",\"properties\":{\"priorityLevel\":{\"type\":\"string\",\"enum\":[\"medium\",\"high\",\"veryHigh\"]},\"maxLamports\":{\"description\":\"- Maximum lamports to cap the priority fee estimation, to prevent overpaying\\n\",\"type\":\"integer\"}}},\"jitoTipLamports\":{\"type\":\"integer\",\"description\":\"- Exact amount of tip to use in a tip instruction\\n- Refer to Jito docs on how to estimate the tip amount based on percentiles\\n- It has to be used together with a connection to a Jito RPC\\n- [See their docs](https://docs.jito.wtf/)\\n\"}}},\"asLegacyTransaction\":{\"description\":\"- Builds a legacy transaction rather than the default versioned transaction\\n- Used together with `asLegacyTransaction` in `/quote`, otherwise the transaction might be too large\\n\",\"type\":\"boolean\",\"default\":false},\"destinationTokenAccount\":{\"description\":\"- Public key of a token account that will be used to receive the token out of the swap\\n- If not provided, the signer's token account will be used\\n- If provided, we assume that the token account is already initialized\\n\",\"type\":\"string\"},\"dynamicComputeUnitLimit\":{\"description\":\"- When enabled, it will do a swap simulation to get the compute unit used and set it in ComputeBudget's compute unit limit\\n- This incurs one extra RPC call to simulate this\\n- We recommend to enable this to estimate compute unit correctly and reduce priority fees needed or have higher chance to be included in a block\\n\",\"type\":\"boolean\",\"default\":false},\"skipUserAccountsRpcCalls\":{\"description\":\"- When enabled, it will not do any additional RPC calls to check on required accounts\\n- Enable it only when you already setup all the accounts needed for the trasaction, like wrapping or unwrapping sol, or destination account is already created\\n\",\"type\":\"boolean\",\"default\":false},\"dynamicSlippage\":{\"description\":\"- When enabled, it estimates slippage and apply it in the swap transaction directly, overwriting the `slippageBps` parameter in the quote response.\\n- Used together with `dynamicSlippage` in `/quote`, otherwise the slippage used will be the one in the `/quote`'s `slippageBps`\\n- [See notes for more information](/docs/swap-api/send-swap-transaction#how-jupiter-estimates-slippage)\\n\",\"type\":\"boolean\",\"default\":false},\"computeUnitPriceMicroLamports\":{\"description\":\"- To use an exact compute unit price to calculate priority fee\\n- `computeUnitLimit (1400000) * computeUnitPriceMicroLamports`\\n- We recommend using `prioritizationFeeLamports` and `dynamicComputeUnitLimit` instead of passing in your own compute unit price\\n\",\"type\":\"integer\"},\"blockhashSlotsToExpiry\":{\"description\":\"- Pass in the number of slots we want the transaction to be valid for\\n- Example: If you pass in 10 slots, the transaction will be valid for ~400ms * 10 = approximately 4 seconds before it expires\\n\",\"type\":\"integer\"},\"quoteResponse\":{\"type\":\"object\",\"required\":[\"inputMint\",\"outputMint\",\"inAmount\",\"outAmount\",\"otherAmountThreshold\",\"swapMode\",\"slippageBps\",\"priceImpactPct\",\"routePlan\"],\"properties\":{\"inputMint\":{\"type\":\"string\"},\"inAmount\":{\"type\":\"string\"},\"outputMint\":{\"type\":\"string\"},\"outAmount\":{\"type\":\"string\",\"description\":\"- Calculated output amount from routing engine\\n- Exlcuding slippage or platform fees\\n\"},\"otherAmountThreshold\":{\"type\":\"string\",\"description\":\"- Calculated minimum output amount after accounting for `slippageBps` and `platformFeeBps`\\n- Not used by `/swap` endpoint to build transaction\\n\"},\"swapMode\":{\"required\":true,\"type\":\"string\",\"enum\":[\"ExactIn\",\"ExactOut\"],\"title\":\"SwapMode\"},\"slippageBps\":{\"type\":\"integer\",\"format\":\"int32\"},\"platformFee\":{\"type\":\"object\",\"properties\":{\"amount\":{\"type\":\"string\"},\"feeBps\":{\"type\":\"integer\",\"format\":\"int32\"}},\"title\":\"PlatformFee\"},\"priceImpactPct\":{\"type\":\"string\"},\"routePlan\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"swapInfo\":{\"type\":\"object\",\"required\":[\"ammKey\",\"inputMint\",\"outputMint\",\"inAmount\",\"outAmount\",\"feeAmount\",\"feeMint\"],\"properties\":{\"ammKey\":{\"type\":\"string\"},\"label\":{\"type\":\"string\"},\"inputMint\":{\"type\":\"string\"},\"outputMint\":{\"type\":\"string\"},\"inAmount\":{\"type\":\"string\"},\"outAmount\":{\"type\":\"string\"},\"feeAmount\":{\"type\":\"string\"},\"feeMint\":{\"type\":\"string\"}},\"title\":\"SwapInfo\"},\"percent\":{\"type\":\"integer\",\"format\":\"int32\"}},\"required\":[\"swapInfo\",\"percent\"],\"title\":\"RoutePlanStep\"}},\"contextSlot\":{\"type\":\"number\"},\"timeTaken\":{\"type\":\"number\"}},\"title\":\"QuoteResponse\"}}}}}}}\n```\n\n----------------------------------------\n\nTITLE: Creating Price-based Trading Order with Jupiter API\nDESCRIPTION: Creates a price-based recurring order that executes based on price conditions. Orders remain active indefinitely until closed, with variable spend amounts per cycle based on token USDC value.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/103-recurring-api/1-create-order.md#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst createOrderResponse = await (\n    await fetch('https://lite-api.jup.ag/recurring/v1/createOrder', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n            user: wallet.publicKey.toBase58(),\n            inputMint: \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\",\n            outputMint: \"So11111111111111111111111111111111111111112\",\n            params: {\n                price: {\n                    depositAmount: 110000000,\n                    incrementUsdcValue: 10000000,\n                    interval: 86400,\n                    startAt: null,\n                },\n            },\n        }),\n    })\n).json();\n```\n\n----------------------------------------\n\nTITLE: Fetching Active Recurring Orders with Jupiter API in JavaScript\nDESCRIPTION: This code snippet demonstrates how to retrieve active recurring orders from the Jupiter API. It uses the 'active' orderStatus parameter and 'time' recurringType, and requires replacing the placeholder with the user's public key.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/103-recurring-api/6-get-recurring-orders.md#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst openOrdersResponse = await (\n    await fetch(\n        'https://lite-api.jup.ag/recurring/v1/getRecurringOrders?user=replaceWithPublicKey&orderStatus=active&recurringType=time'\n    )\n).json();\n```\n\n----------------------------------------\n\nTITLE: Setting Priority Fee for Swap Transaction in JavaScript\nDESCRIPTION: This snippet shows how to set a priority fee for a swap transaction using the 'prioritizationFeeLamports' parameter. This is useful for prioritizing transactions when the network is congested.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/2-apis/1-swap-api.md#2025-04-16_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst transaction = await (\n  await fetch('https://quote-api.jup.ag/v6/swap', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      // quoteResponse from /quote api\n      quoteResponse,\n      // user public key to be used for the swap\n      userPublicKey: wallet.publicKey.toString(),\n      dynamicComputeUnitLimit: true, // allow dynamic compute limit instead of max 1,400,000\n      // custom priority fee\n\t    prioritizationFeeLamports: {\n        priorityLevelWithMaxLamports: {\n          maxLamports: 10000000,\n          priorityLevel: \"veryHigh\" // If you want to land transaction fast, set this to use `veryHigh`. You will pay on average higher priority fee.\n        }\n      }\n    })\n  })\n).json();\n```\n\n----------------------------------------\n\nTITLE: Calculating Borrow Fees in Jupiter Perpetuals Contract\nDESCRIPTION: This snippet shows the process of calculating borrow fees in the Jupiter Perpetuals contract. It uses a counter-based system to efficiently calculate fees over time without real-time updates for each position.\nSOURCE: https://github.com/jup-ag/docs/blob/main/guides/8-perpetual-exchange/2-how-it-works.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Constants:\nBPS_DECIMALS = 4             // 10^4, for basis points\nDBPS_DECIMALS = 5            // 10^5, decimal basis points for precision\nRATE_DECIMALS = 9            // 10^9, for funding rate calculations\nUSD_DECIMALS = 6             // 10^6, for USD amounts as per the USDC mint's decimals\n\n// Main calculation:\n1. Get the cumulative interest rate from the pool account:\n   cumulativeInterestRate = pool.cumulative_interest_rate\n\n2. Get the position's borrow rate snapshot:\n   borrowRateSnapshot = position.cumulative_interest_snapshot\n\n3. Get the position's borrow rate interval:\n   borrowRate = cumulativeInterestRate - borrowRateSnapshot\n\n4. Calculate final borrow fee (USD):\n   borrowFeeUsd = (borrowRate * position.size_usd) / (10 ^ RATE_DECIMALS) / (10 ^ USD_DECIMALS)\n```\n\n----------------------------------------\n\nTITLE: Implementing Priority Fees with Jupiter API\nDESCRIPTION: Demonstrates how to implement priority fees in a swap transaction with configurable parameters for fee estimation and priority levels.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/2-apis/11-landing-transactions.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { swapTransaction } = await (\n  await fetch('https://quote-api.jup.ag/v6/swap', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      quoteResponse,\n      userPublicKey: wallet.publicKey.toString(),\n      prioritizationFeeLamports: {\n        priorityLevelWithMaxLamports: {\n          maxLamports: 4000000,\n          global: false,\n          priorityLevel: \"veryHigh\"\n        }\n      }\n    })\n  })\n).json();\n```\n\n----------------------------------------\n\nTITLE: Opening a DCA Account in Solana using Rust\nDESCRIPTION: This function opens a new DCA account with specified parameters. It requires various arguments including application index, input amounts, cycle frequency, and optional min/max output amounts. The function also needs context accounts such as the DCA PDA, user, payer, and various token accounts.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/4-dca/1-integration.md#2025-04-16_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\npub fn open_dca_v2(\n    ctx: Context<OpenDcaOnBehalf>,\n    application_idx: u64,\n    in_amount: u64,\n    in_amount_per_cycle: u64,\n    cycle_frequency: i64,\n    min_out_amount: Option<u64>,\n    max_out_amount: Option<u64>,\n    start_at: Option<i64>,\n) -> Result<()> {\n```\n\n----------------------------------------\n\nTITLE: Create Recurring Order Request Schema\nDESCRIPTION: JSON schema defining the request body structure for creating recurring orders. Includes required fields for user wallet address, input/output token mints, and params specifying either time-based or price-based recurring order details.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/api/recurring-api/create-order.api.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"user\": \"jdocuPgEAjMfihABsPgKEvYtsmMzjUHeq9LX4Hvs7f3\",\n  \"inputMint\": \"So11111111111111111111111111111111111111112\",\n  \"outputMint\": \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\",\n  \"params\": {\n    \"time\": {\n      \"inAmount\": 1000000000,\n      \"numberOfOrders\": 10,\n      \"interval\": 86400\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for Successful Swap\nDESCRIPTION: Shows an example JSON response structure for a successful swap execution, including status, signature, slot, input and output amounts, and swap events.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/101-ultra-api/2-execute-order.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"Success\",\n  \"signature\": \"transaction signature\",\n  \"slot\": \"323598314\",\n  \"code\": 0,\n  \"inputAmountResult\": \"9995000\",\n  \"outputAmountResult\": \"1274698\",\n  \"swapEvents\": [\n    {\n      \"inputMint\": \"So11111111111111111111111111111111111111112\",\n      \"inputAmount\": \"9995000\",\n      \"outputMint\": \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\",\n      \"outputAmount\": \"1274698\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Token Prices with Extra Info in JavaScript\nDESCRIPTION: This snippet demonstrates how to fetch token prices with additional information such as confidence levels and depth. It shows how to use the showExtraInfo parameter in the API request.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/500-price-api/README.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst priceResponseShowExtraInfo = await fetch(\n    'https://lite-api.jup.ag/price/v2?ids=JUPyiwrYJFskUPiHa7hkeR8VUtAeFoSYbKedZNsDvCN,So11111111111111111111111111111111111111112&showExtraInfo=true'\n);\n\nconst priceDataShowExtraInfo = await priceResponseShowExtraInfo.json();\n  \nconsole.log(JSON.stringify(priceDataShowExtraInfo, null, 2));\n```\n\n----------------------------------------\n\nTITLE: Sending a Cancel Order Request with Jupiter Recurring API\nDESCRIPTION: This snippet demonstrates how to send a POST request to the Jupiter Recurring API's cancelOrder endpoint. It requires specifying the order ID, user wallet public key, and recurring type in the request body. The response contains a transaction that needs to be signed and executed.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/103-recurring-api/3-cancel-order.md#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst cancelOrderResponse = await (\n    await fetch('https://lite-api.jup.ag/recurring/v1/cancelOrder', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n            order: \"4DWzP4TdTsuwvYMaMWrRqzya4UTFKFoVjfUWNWh8zhzd\",\n            user: wallet.publicKey.toBase58(),\n            recurringType: \"time\",\n        }),\n    })\n).json();\n```\n\n----------------------------------------\n\nTITLE: Canceling Orders with Jupiter Limit Order API\nDESCRIPTION: Demonstrates the request body format for canceling orders using the Jupiter Limit Order API. The endpoint accepts parameters for owner, fee payer, and a list of orders to cancel.\nSOURCE: https://github.com/jup-ag/docs/blob/main/Moved/1-limit-order-api.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"owner\": \"string\",\\n  \"feePayer\": \"string\",\\n  \"orders\": [\\n    \"string\"\\n  ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Prioritization Fee for Jupiter Swap API in JavaScript\nDESCRIPTION: This snippet demonstrates how to set a prioritization fee when making a swap request to the Jupiter API. It uses the 'auto' option for the prioritizationFeeLamports parameter, which automatically calculates an appropriate fee based on recent network activity.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/2-apis/10-troubleshooting.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { swapTransaction } = await (\n  await fetch('https://quote-api.jup.ag/v6/swap', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      // quoteResponse from /quote api\n      quoteResponse,\n      // user public key to be used for the swap\n      userPublicKey: wallet.publicKey.toString(),\n      // auto wrap and unwrap SOL. default is true\n      dynamicComputeUnitLimit: true,\n      prioritizationFeeLamports: \"auto\",\n      // prioritizationFeeLamports: {\n      //   autoMultiplier: 2,\n      // },\n    })\n  })\n).json();\n```\n\n----------------------------------------\n\nTITLE: Deriving Fee Token Account for Jupiter Referral Program in JavaScript\nDESCRIPTION: This code snippet demonstrates how to derive the PDA (Program Derived Address) for a fee account in Jupiter's Referral Program. It requires the referral account public key, token mint, and the Referral Program's public key as inputs.\nSOURCE: https://github.com/jup-ag/docs/blob/main/Moved/6-referral-program.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst [feeAccount] = await PublicKey.findProgramAddressSync(\n  [\n    Buffer.from(\"referral_ata\"),\n    referralAccountPubkey.toBuffer(), // your referral account public key\n    mint.toBuffer(), // the token mint\n  ],\n  new PublicKey(\"REFER4ZgmyYx9c6He5XfaTMiGfdLwRnkV4RPp9t9iF3\") // the Referral Program\n);\n```\n\n----------------------------------------\n\nTITLE: Cancelling a Single Order with Jupiter Trigger API\nDESCRIPTION: This code demonstrates how to cancel a single order using the Jupiter Trigger API. It sends a POST request to the cancelOrder endpoint with the maker address, compute unit price setting, and the order account to be cancelled.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/102-trigger-api/3-cancel-order.md#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst cancelOrderResponse = await (\n    await fetch('https://lite-api.jup.ag/trigger/v1/cancelOrder', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n            maker: \"jdocuPgEAjMfihABsPgKEvYtsmMzjUHeq9LX4Hvs7f3\",\n            computeUnitPrice: \"auto\",\n            order: \"3g2jF8txqXPp6GUStwtXMrWydeYWxU4qoBA8UDLoTnK7\",\n        })\n    })\n).json();\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Slippage in Swap API Request (JavaScript)\nDESCRIPTION: This snippet demonstrates how to include dynamic slippage in a POST request to Jupiter Aggregator's swap API. It shows the structure of the request body, including the quoteResponse, userPublicKey, and dynamicSlippage settings.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/2-apis/1-swap-api.md#2025-04-16_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// get serialized transactions for the swap\nconst { swapTransaction } = await (\n  await fetch('https://quote-api.jup.ag/v6/swap', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      // quoteResponse from /quote api\n      quoteResponse,\n      // user public key to be used for the swap\n      userPublicKey: wallet.publicKey.toString(),\n      // auto wrap and unwrap SOL. default is true\n      wrapAndUnwrapSol: true,\n      // jup.ag frontend default max for user\n      dynamicSlippage: { \"maxBps\": 300 },\n      // feeAccount is optional. Use if you want to charge a fee.  feeBps must have been passed in /quote API.\n      // feeAccount: \"fee_account_public_key\"\n    })\n  })\n).json();\n```\n\n----------------------------------------\n\nTITLE: Fetching Token Balances with Jupiter Ultra API\nDESCRIPTION: Demonstrates how to make a GET request to the Jupiter Ultra API to retrieve token balances for a specific wallet address. Uses the fetch API to make the request and handles the JSON response.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/101-ultra-api/3-get-balances.md#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst balancesResponse = await (\n  await fetch(`https://lite-api.jup.ag/ultra/v1/balances/3X2LFoTQecbpqCR7G5tL1kczqBKurjKPHhKSZrJ4wgWc`)\n).json();\n\nconsole.log(JSON.stringify(balancesResponse, null, 2));\n```\n\n----------------------------------------\n\nTITLE: Aggregator Swap Response Example\nDESCRIPTION: Example response from the order endpoint for an aggregator swap type, showing transaction details, route plan, and swap parameters.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/101-ultra-api/1-get-order.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"swapType\": \"aggregator\",\n  \"environment\": \"production\",\n  \"requestId\": \"668e8b71-a5ab-424e-83d6-51c9239e8bb5\",\n  \"inAmount\": \"100000000\",\n  \"outAmount\": \"12698391\",\n  \"otherAmountThreshold\": \"12577697\",\n  \"swapMode\": \"ExactIn\",\n  \"slippageBps\": 100,\n  \"priceImpactPct\": \"0.0000261921556639999999999997\",\n  \"routePlan\": [\n    {\n      \"swapInfo\": {\n        \"ammKey\": \"HTvjzsfX3yU6BUodCjZ5vZkUrAxMDTrBs3CJaq43ashR\",\n        \"label\": \"Meteora DLMM\",\n        \"inputMint\": \"So11111111111111111111111111111111111111112\",\n        \"outputMint\": \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\",\n        \"inAmount\": \"100000000\",\n        \"outAmount\": \"12704744\",\n        \"feeAmount\": \"30003\",\n        \"feeMint\": \"So11111111111111111111111111111111111111112\"\n      },\n      \"percent\": 100\n    }\n  ],\n  \"inputMint\": \"So11111111111111111111111111111111111111112\",\n  \"outputMint\": \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\",\n  \"feeBps\": 5,\n  \"taker\": \"3X2LFoTQecbpqCR7G5tL1kczqBKurjKPHhKSZrJ4wgWc\",\n  \"gasless\": false,\n  \"transaction\": \"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAQAHDiVoTeB3jAGy1WcoJlYcZ1tvgdU0Aj6FlsjeUYBxRhGxHxf2IsqBZDc4TJCX0VVjBoDXZbW1kEsA6W7yfwIKt0c0yO+iiUVv7jZVSBDvh2kWWXekzYuRuKoLLfe0bYTKH0yv2bL0ozt8+tDaxIBCyDPmUdeiHiB+F3j79RbUrMBTZhX4Vq3GhdgfMEaJ2gWhCEHo53uZ5+KEQR/PV5YuzQbJfK6aXbCSNOqlVWxR07NAyRtSnrznUlEs5AUgIpB9pOGnzAThMjD7choVuWHDjdTxOb0dsRN3czgZ42ifRt1HAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACMlyWPTiSJ8bs9ECkUjg2DC1oTmdr/EIQEjnvY2+n4Wawfg/25zlUN6V1VjNx5VGHM9DdKxojsE6mEACIKeNoGAwZGb+UhFzL/7K26csOb57yM5bvF9xJrLEObOkAAAAC0P/on9df2SnTAmx8pWHneSwmrNt/J3VFLMhqns4zl6AR51VvyMcBu7nTFbs5oFQf9sbLeo/SOUQKxzaJWvBOPBt324ddloZPZy+FGzut5rBy0he1fWzeROoz1hX7/AKnPysPFxScORV16vbzghryUvk+VkoZUUM+RCAjwwCR3xwcKAAUCwFwVAAoACQPQyQAAAAAAAAcCAAQMAgAAAPD+FAYAAAAADAUEABUNBwmT8Xtk9ISudv0IBgACABMHDQEBDB4NAAQCDBMDCwwUERQPEAQCFRMOFAANDRIUBgEFDAkj5RfLl3rjrSoBAAAAJmQAAQDh9QUAAAAAF8PBAAAAAABLAAUNAwQAAAEJAXMwdFGIqEvFUBDTRIWStB1ygQ6vc5NqdjVNwLc0VV1HBM7S09cE1NHWcA==\",\n  \"prioritizationType\": \"ComputeBudget\",\n  \"prioritizationFeeLamports\": 72329,\n  \"lastValidBlockHeight\": 301856775,\n  \"dynamicSlippageReport\": {\n    \"slippageBps\": 75,\n    \"otherAmount\": null,\n    \"simulatedIncurredSlippageBps\": null,\n    \"amplificationRatio\": null,\n    \"categoryName\": \"solana\",\n    \"heuristicMaxSlippageBps\": 100,\n    \"rtseSlippageBps\": 75,\n    \"failedTxnEstSlippage\": 55,\n    \"priceMovementEstSlippage\": 75,\n    \"emaEstSlippage\": 0\n  },\n  \"totalTime\": 549\n}\n```\n\n----------------------------------------\n\nTITLE: Cancelling a Limit Order with Jupiter SDK in JavaScript\nDESCRIPTION: Function to cancel a specific limit order using the Jupiter SDK. It requires the owner's public key and the order's public key.\nSOURCE: https://github.com/jup-ag/docs/blob/main/Moved/2-limit-order-with-sdk.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst tx = await limitOrder.cancelOrder({\n  owner: owner.publicKey,\n  orderPubKey: order.publicKey,\n});\n\nawait sendAndConfirmTransaction(connection, tx, [owner]);\n```\n\n----------------------------------------\n\nTITLE: Getting Tagged Tokens in JavaScript\nDESCRIPTION: Retrieves a list of tokens with specific tags, demonstrating the use of the LST tag filter.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/501-token-api/README.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst lstTaggedResponse = await (\n    await fetch('https://lite-api.jup.ag/tokens/v1/tagged/lst')\n).json();\n\nconsole.log(lstTaggedResponse);\n```\n\n----------------------------------------\n\nTITLE: RFQ Swap Response Example\nDESCRIPTION: Example response from the order endpoint for an RFQ (Request for Quote) swap type, showing quote details and platform fees.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/101-ultra-api/1-get-order.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"inputMint\": \"So11111111111111111111111111111111111111112\",\n  \"outputMint\": \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\",\n  \"inAmount\": \"100000000\",\n  \"outAmount\": \"12619939\",\n  \"otherAmountThreshold\": \"12626253\",\n  \"swapMode\": \"ExactIn\",\n  \"slippageBps\": 0,\n  \"priceImpactPct\": \"0\",\n  \"routePlan\": [\n    {\n      \"swapInfo\": {\n        \"ammKey\": \"96ywtMs5KJNt2iAinr1U8KMzxjcY1FUEpgKHMYNz818g\",\n        \"label\": \"RFQ\",\n        \"inputMint\": \"So11111111111111111111111111111111111111112\",\n        \"outputMint\": \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\",\n        \"inAmount\": \"100000000\",\n        \"outAmount\": \"12619939\",\n        \"feeAmount\": \"0\",\n        \"feeMint\": \"11111111111111111111111111111111\"\n      },\n      \"percent\": 100\n    }\n  ],\n  \"feeBps\": 5,\n  \"transaction\": null,\n  \"gasless\": true,\n  \"prioritizationType\": \"None\",\n  \"prioritizationFeeLamports\": 0,\n  \"requestId\": \"0abacc75-6a3c-d688-b633-ce2c14cef0fd\",\n  \"swapType\": \"rfq\",\n  \"quoteId\": \"25e8fc14-15f9-522d-8e18-5130e273b90f\",\n  \"maker\": \"96ywtMs5KJNt2iAinr1U8KMzxjcY1FUEpgKHMYNz818g\",\n  \"taker\": null,\n  \"expireAt\": null,\n  \"contextSlot\": 0,\n  \"platformFee\": {\n    \"amount\": \"6313\",\n    \"feeBps\": 5\n  },\n  \"totalTime\": 425\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Detailed Price Information for JUP and SOL\nDESCRIPTION: This snippet shows how to use the Jupiter Price API V2 with the 'showExtraInfo' parameter to get detailed pricing information for JUP and SOL tokens. It includes additional data such as last swapped prices, quoted prices, and depth information.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/2-apis/5-price-api-v2.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n# Unit price of 1 JUP & 1 SOL based on the Derived Price in USDC\nhttps://api.jup.ag/price/v2?ids=JUPyiwrYJFskUPiHa7hkeR8VUtAeFoSYbKedZNsDvCN,So11111111111111111111111111111111111111112&showExtraInfo=true\n\n{\n    \"data\": {\n        \"So11111111111111111111111111111111111111112\": {\n            \"id\": \"So11111111111111111111111111111111111111112\",\n            \"type\": \"derivedPrice\",\n            \"price\": \"132.176540000\",\n            \"extraInfo\": {\n                \"lastSwappedPrice\": {\n                    \"lastJupiterSellAt\": 1726232167,\n                    \"lastJupiterSellPrice\": \"132.1815918927837\",\n                    \"lastJupiterBuyAt\": 1726232168,\n                    \"lastJupiterBuyPrice\": \"132.3113422757551\"\n                },\n                \"quotedPrice\": {\n                    \"buyPrice\": \"132.183970000\",\n                    \"buyAt\": 1726232166,\n                    \"sellPrice\": \"132.169110000\",\n                    \"sellAt\": 1726232168\n                },\n                \"confidenceLevel\": \"high\",\n                \"depth\": {\n                    \"buyPriceImpactRatio\": {\n                        \"depth\": {\n                            \"10\": 0.011976036126034885,\n                            \"100\": 0.05308426581530216,\n                            \"1000\": 0.1168049189323158\n                        },\n                        \"timestamp\": 1726232167\n                    },\n                    \"sellPriceImpactRatio\": {\n                        \"depth\": {\n                            \"10\": 0.01582101846363979,\n                            \"100\": 0.03166775883921609,\n                            \"1000\": 0.06880960201997424\n                        },\n                        \"timestamp\": 1726232167\n                    }\n                }\n            }\n        },\n        \"JUPyiwrYJFskUPiHa7hkeR8VUtAeFoSYbKedZNsDvCN\": {\n            \"id\": \"JUPyiwrYJFskUPiHa7hkeR8VUtAeFoSYbKedZNsDvCN\",\n            \"type\": \"derivedPrice\",\n            \"price\": \"0.742851\",\n            \"extraInfo\": {\n                \"lastSwappedPrice\": {\n                    \"lastJupiterSellAt\": 1726232039,\n                    \"lastJupiterSellPrice\": \"0.7442999683998961\",\n                    \"lastJupiterBuyAt\": 1726232097,\n                    \"lastJupiterBuyPrice\": \"0.7431593824200015\"\n                },\n                \"quotedPrice\": {\n                    \"buyPrice\": \"0.742917\",\n                    \"buyAt\": 1726232165,\n                    \"sellPrice\": \"0.742784\",\n                    \"sellAt\": 1726232168\n                },\n                \"confidenceLevel\": \"high\",\n                \"depth\": {\n                    \"buyPriceImpactRatio\": {\n                        \"depth\": {\n                            \"10\": 0.009393981894911491,\n                            \"100\": 0.08127843280940066,\n                            \"1000\": 0.3417234655853332\n                        },\n                        \"timestamp\": 1726232167\n                    },\n                    \"sellPriceImpactRatio\": {\n                        \"depth\": {\n                            \"10\": 0.05174412761856207,\n                            \"100\": 0.06288330728860267,\n                            \"1000\": 0.281508676845538\n                        },\n                        \"timestamp\": 1726232167\n                    }\n                }\n            }\n        }\n    },\n    \"timeTaken\": 0.00388851\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Order with Jupiter Trigger API in JavaScript\nDESCRIPTION: This code snippet shows how to execute an order using the Jupiter Trigger API. It sends a POST request to the /execute endpoint with the signed transaction and a request ID. The API handles transaction execution, priority fees, and RPC connection.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/102-trigger-api/2-execute-order.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst executeResponse = await (\n    await fetch('https://lite-api.jup.ag/trigger/v1/execute', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n            signedTransaction: signedTransaction,\n            requestId: \"370100dd-1a85-421b-9278-27f0961ae5f4\",\n        }),\n    })\n).json();\n```\n\n----------------------------------------\n\nTITLE: Confirming Transaction Status in JSX\nDESCRIPTION: Code for confirming a transaction on the Solana network and handling success or failure. This checks the transaction confirmation state and either throws an error with debugging information or logs a success message with a transaction explorer link.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/100-swap-api/3-send-swap-transaction.md#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst confirmation = await connection.confirmTransaction({signature,}, \"finalized\");\n\nif (confirmation.value.err) {\n    throw new Error(`Transaction failed: ${JSON.stringify(confirmation.value.err)}\\nhttps://solscan.io/tx/${signature}/`);\n} else console.log(`Transaction successful: https://solscan.io/tx/${signature}/`);\n```\n\n----------------------------------------\n\nTITLE: GET Token Price Request\nDESCRIPTION: HTTP GET request to retrieve token prices. Supports querying multiple token IDs via comma-separated values, optional price denomination in SOL using vsToken parameter, and additional market information via showExtraInfo flag.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/api/price-api/price.api.mdx#2025-04-16_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /?ids=So11111111111111111111111111111111111111112,EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\n```\n\n----------------------------------------\n\nTITLE: Preparing Swap Transaction for Customer Signing\nDESCRIPTION: Deserialize the swap transaction, set the customer as the fee payer, and have them sign the transaction. This prepares the transaction for submission to the Solana network.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/100-swap-api/5-payments-through-swap.md#2025-04-16_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nconst transactionBase64 = swapResponse.swapTransaction\nconst transaction = VersionedTransaction.deserialize(Buffer.from(transactionBase64, 'base64'));\n\ntransaction.feePayer = customerAccount.publicKey;\n\ntransaction.sign([customerAccount.payer]);\n\nconst transactionBinary = transaction.serialize();\n```\n\n----------------------------------------\n\nTITLE: Implementing Jupiter Terminal with Custom Configuration\nDESCRIPTION: Button implementation that initializes Jupiter Terminal with custom configurations when clicked. This code shows how to set display mode, endpoint, and various form properties for the terminal.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/300-tool-kits/2-terminal-walkthrough.md#2025-04-16_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n...\n  return (\n\n    <div className=\"md:hero mx-auto p-4\">\n      <div className=\"md:hero-content flex flex-col\">\n        <div className='mt-6'>\n            <button OnClick={() =>\n                window.Jupiter.init({\n                    displayMode: \"integrated\",\n                    integratedTargetId: \"integrated-terminal\",\n                    endpoint: \"https://api.mainnet-beta.solana.com\",\n                    formProps: {\n                        fixedInputMint: true,\n                        fixedOutputMint: true,\n                        swapMode: \"ExactIn\",\n                        fixedAmount: true,\n                        initialAmount: \"200000000\",\n                        initialSlippageBps: 1,\n                    },\n                })\n        }> Launch Jupiter Terminal\n        </button>\n...\n```\n\n----------------------------------------\n\nTITLE: Querying Unit Price of JUP in Bonk\nDESCRIPTION: This snippet demonstrates how to use the Jupiter Price API V2 with the 'vsToken' parameter to get the unit price of JUP token based on the buy amount of Bonk token. It shows how to specify a different base token for price comparison.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/2-apis/5-price-api-v2.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n# Unit price of 1 JUP based on the buy amount of Bonk\nhttps://api.jup.ag/price/v2?ids=JUPyiwrYJFskUPiHa7hkeR8VUtAeFoSYbKedZNsDvCN&vsToken=DezXAZ8z7PnrnRJjz3wXBoRgixCa6xjnB7YaB1pPB263&showExtraInfo=true\n\n{\n  \"data\": {\n    \"JUPyiwrYJFskUPiHa7hkeR8VUtAeFoSYbKedZNsDvCN\": {\n      \"id\": \"JUPyiwrYJFskUPiHa7hkeR8VUtAeFoSYbKedZNsDvCN\",\n      \"type\": \"derivedPrice\",\n      \"price\": \"40560.32136735473\"\n    },\n    \"DezXAZ8z7PnrnRJjz3wXBoRgixCa6xjnB7YaB1pPB263\": {\n      \"id\": \"DezXAZ8z7PnrnRJjz3wXBoRgixCa6xjnB7YaB1pPB263\",\n      \"type\": \"derivedPrice\",\n      \"price\": \"1\"\n    }\n  },\n  \"timeTaken\": 0.003043602\n}\n```\n\n----------------------------------------\n\nTITLE: Successful Order Execution Response in JSON\nDESCRIPTION: This JSON snippet shows an example of a successful order execution response from the Jupiter Trigger API. It includes the transaction signature and a success status.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/102-trigger-api/2-execute-order.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"signature\": \"...\",\n  \"status\": \"Success\"\n}\n```\n\n----------------------------------------\n\nTITLE: Making Price Deposit API Request in JavaScript\nDESCRIPTION: Code demonstrating how to make a POST request to the price deposit endpoint to deposit funds into an existing order. The request requires the order ID, user wallet public key, and deposit amount.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/103-recurring-api/4-deposit-price-order.md#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst priceDepositResponse = await (\n    await fetch('https://lite-api.jup.ag/recurring/v1/priceDeposit', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n            order: \"EpTsCUnKComCd8FDNZn3kVrQBQo2uEn5rRzYk9ocqFPH\",\n            user: wallet.publicKey.toBase58(),\n            amount: 1000000\n        }),\n    })\n).json();\n```\n\n----------------------------------------\n\nTITLE: Calculating Global Unrealized PnL for Longs in TypeScript\nDESCRIPTION: This code snippet demonstrates how to estimate the global unrealized profit and loss (PnL) for all open long positions in a specific custody of the JLP pool. It uses the custody's guaranteed USD, locked tokens, and current token price.\nSOURCE: https://github.com/jup-ag/docs/blob/main/guides/7-jlp/4-JLP-Economics.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// 1) Get the custody account you're interested in calculating unrealized PnL for longs\n// https://station.jup.ag/guides/perpetual-exchange/onchain-accounts#custody-account\n\n// 2) Get the `assets.guaranteedUsd` field which stores the value of `position.sizeUsd - position.collateralUsd` for\n// all open long positions for the custody. Note that a position's `sizeUsd` value is only updated when a trade is made, which\n// is the same for `guaranteedUsd` as well. It does *not* update in real-time when the custody's price changes\n\nguaranteedUsd = custody.assets.guaranteedUsd\n\n// 3) Multiply `custody.assets.locked` by the custody's current price to get the USD value of the tokens locked \n// by the pool to pay off traders' profits\n\nlockedTokensUsd = custody.assets.locked * currentTokenPriceUsd\n\n// 4) Subtract `guaranteedUsd` from `lockedTokensUsd` to get the estimate of unrealized PnL for all open long positions. Note that\n// the final value is greater than the actual unrealized PNL as it includes traders' collateral\n\nglobalUnrealizedLongPnl = lockedTokensUsd - guaranteedUsd\n```\n\n----------------------------------------\n\nTITLE: Quoting with Maximum Accounts Limit in JavaScript\nDESCRIPTION: This snippet shows how to use the 'maxAccounts' parameter when quoting to limit the number of accounts used in a transaction. This is useful when composing Jupiter swap instructions with other program instructions.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/2-apis/1-swap-api.md#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// If you know that your instruction will take up 10 accounts, you\n// can pass in 54 as `maxAccounts` when quoting.\nconst { data } = await (\n  await fetch('https://quote-api.jup.ag/v6/quote?inputMint=So11111111111111111111111111111111111111112\\\n&outputMint=EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\\\n&amount=100000000\\\n&slippageBps=50\\\n&maxAccounts=54'\n  )\n).json();\nconst quoteResponse = data;\n// console.log(quoteResponse)\n```\n\n----------------------------------------\n\nTITLE: Calculating Daily JLP Revenue\nDESCRIPTION: Formula for calculating estimated daily revenue deposited into JLP pool based on trading volume and fee percentages\nSOURCE: https://github.com/jup-ag/docs/blob/main/guides/7-jlp/2-How-JLP-Works.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n$50M x 0.06% x 75% = $22,500\n```\n\n----------------------------------------\n\nTITLE: Querying Market Tokens in JavaScript\nDESCRIPTION: Retrieves a list of token mints that belong to a specific Meteora SOL-USDC market address.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/501-token-api/README.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst marketTokensResponse = await (\n    await fetch('https://lite-api.jup.ag/tokens/v1/market/BVRbyLjjfSBcoyiYFuxbgKYnWuiFaF9CSXEa5vdSZ9Hh/mints')\n).json();\n\nconsole.log(marketTokensResponse);\n```\n\n----------------------------------------\n\nTITLE: Calculating Global Unrealized PnL for Shorts in TypeScript\nDESCRIPTION: This code snippet shows how to estimate the global unrealized profit and loss (PnL) for all open short positions in a specific custody of the JLP pool. It uses the custody's global short sizes, global short average prices, and current token price.\nSOURCE: https://github.com/jup-ag/docs/blob/main/guides/7-jlp/4-JLP-Economics.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nglobalUnrealizedShortPnl = (custody.assets.globalShortSizes * (|custody.assets.globalShortAveragePrices - currentTokenPriceUsd|)) / custody.assets.globalShortAveragePrices)\n```\n\n----------------------------------------\n\nTITLE: Integrating Jupiter Swap via Flash-Fill in Rust\nDESCRIPTION: This code snippet represents the program code for implementing Jupiter Swap via Flash-Fill. It handles borrowing SOL, creating wSOL accounts, swapping tokens, and repaying borrowed SOL. The full implementation details are available in the linked GitHub repository.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/2-apis/6-flash-fill.md#2025-04-16_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n// Full code available at: https://github.com/jup-ag/sol-swap-flash-fill/blob/main/programs/flash-fill/src/lib.rs\n```\n\n----------------------------------------\n\nTITLE: Successful API Response Format for Jupiter Order Creation\nDESCRIPTION: Example of a successful response from the createOrder endpoint, returning a requestId and transaction data.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/103-recurring-api/1-create-order.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"requestId\": \"1d1f3586-eb72-4337-8c7e-1bbb9870ee4b\",\n  \"transaction\": \"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAgNRL7cu4ZNuxh1wI9W7GVURyr3A06dH348HDpIQzcAJ4o8bJlCl2Wc6MzpcvkV0INcJ7u23GV89soNJ/8i5QPLuk+NOvCjbAbTzOyNoSWuhO5fYq+hNGrGQ2JdDy82Gw0bv28tkzlck1LrvR2ACB/vAL7AIssgVYeCOBbHfYskycnT/icRrhr4nbjk0DzDqAkM4ntju8NXHrILEpE0TUKNKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwZGb+UhFzL/7K26csOb57yM5bvF9xJrLEObOkAAAAAGm4hX/quBhPtof2NGGMA12sQ53BrrO1WYoPAAAAAAAQbd9uHXZaGT2cvhRs7reawctIXtX1s3kTqM9YV+/wCpjJclj04kifG7PRApFI4NgwtaE5na/xCEBI572Nvp+FmwdagGY3nKb+NwN/8MKNVUpuTWNtnoUYz+brrpP1I2/rUn1F1kDj7BX2FdWw4jpUqWuD8Lggv3BjXyQ0rGQMwExvp6877brTo9ZfNqq8l0MbG75MLS9uDkfKYCA0UvXWG7njQ5EK9zaEM059+IQanso4m+YzpvFchLCtBxOCdR5QcGAAUCGSwAAAYACQNADQMAAAAAAAkGAAMABwUIAQEFAgADDAIAAAAAwusLAAAAAAgBAwERCw0EAAAHDAMBAgUICQoLK453K22iNAuxgF7IZwAAAAAAwusLAAAAAADh9QUAAAAALAEAAAAAAAAAAAAIBAMAAAABCQ==\"\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting Price-Based Recurring Order Withdrawal Transaction (JSON)\nDESCRIPTION: JSON request body for the POST /priceWithdraw endpoint to generate an unsigned withdrawal transaction. Requires specifying the user, order account, withdrawal type, and optional withdrawal amount.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/api/recurring-api/price-withdraw.api.mdx#2025-04-16_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"user\": \"string\",\n  \"order\": \"string\",\n  \"inputOrOutput\": \"In\" | \"Out\",\n  \"amount\": \"integer\" | null\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Merchant's Token Account\nDESCRIPTION: Create the destination token account for the merchant where payment will be received. This account must be initialized before receiving tokens from the swap.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/100-swap-api/5-payments-through-swap.md#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n// Get the associated token account for the merchant wallet\nconst merchantUSDCTokenAccount = await getAssociatedTokenAddress(\n\t  USDC_MINT,\n\t  merchantAccount,\n\t  true,\n\t  TOKEN_PROGRAM_ID,\n\t  ASSOCIATED_TOKEN_PROGRAM_ID\n);\n\nconsole.log(\"merchantUSDCTokenAccount:\", merchantUSDCTokenAccount.toBase58());\n```\n\n----------------------------------------\n\nTITLE: Signing and Sending Transaction\nDESCRIPTION: Final steps to sign, serialize, and submit the transaction to the Solana network.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/8-additional-topics/1-composing-with-versioned-transaction.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// sign the transaction\ntransaction.sign([wallet.payer])\n\n// Execute the transaction\nconst rawTransaction = transaction.serialize()\nconst txid = await sendAndConfirmRawTransaction(connection, Buffer.from(rawTransaction), {\n  skipPreflight: true,\n  commitment: 'confirmed',\n  maxRetries: 2\n})\nconsole.log(`https://solscan.io/tx/${txid}`)\n```\n\n----------------------------------------\n\nTITLE: Calculating PnL for Perpetual Futures Positions\nDESCRIPTION: Algorithm for calculating realized and unrealized profit/loss (PnL) for perpetual futures positions. Takes into account position direction (long/short), entry/exit prices, trade size, and associated fees.\nSOURCE: https://github.com/jup-ag/docs/blob/main/guides/8-perpetual-exchange/2-how-it-works.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// 1) Get the current token price / exit price\n\nexitPrice = currentTokenPrice\n\n// 2) Determine if the position is profitable by checking if the exit price is greater than the position's\n// average price for longs, or if the exit price is less than the position's average price for shorts\n\nIF isLong THEN\n    inProfit = exitPrice > positionAvgPrice\nELSE\n    inProfit = exitPrice < positionAvgPrice\n\n// 3) Calculate the absolute delta between the exit price and the position's average price\n\npriceDelta = |exitPrice - positionAvgPrice|\n\n// 4) Calculate the PnL delta for the closed portion of the position: multiply the size being closed (`tradeSizeUsd`) \n// by the price delta, then divide by the entry price to get the PnL delta\n\npnlDelta = (tradeSizeUsd * priceDelta) / positionAvgPrice\n\n// 5) Calculate the final unrealized PnL depending on whether the position is profitable or not\n\nIF inProfit THEN\n    unrealizedPnl = pnlDelta\nELSE\n    unrealizedPnl = -pnlDelta\n\n// 6) Deduct the outstanding fees from the unrealized PnL to get the final realized PnL\n// Read the `Fee` section below to understand how the fee calculations work\nrealizedPnl = unrealizedPnl - (closeBaseFee + priceImpactFee + borrowFee)\n```\n\n----------------------------------------\n\nTITLE: Querying Unit Prices for JUP and SOL in USDC\nDESCRIPTION: This snippet demonstrates how to use the Jupiter Price API V2 to get the unit prices for JUP and SOL tokens based on USDC. It shows the basic API call and the JSON response format.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/2-apis/5-price-api-v2.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n# Unit price of 1 JUP & 1 SOL based on the Derived Price in USDC\nhttps://api.jup.ag/price/v2?ids=JUPyiwrYJFskUPiHa7hkeR8VUtAeFoSYbKedZNsDvCN,So11111111111111111111111111111111111111112\n\n{\n    \"data\": {\n        \"So11111111111111111111111111111111111111112\": {\n            \"id\": \"So11111111111111111111111111111111111111112\",\n            \"type\": \"derivedPrice\",\n            \"price\": \"133.890945000\"\n        },\n        \"JUPyiwrYJFskUPiHa7hkeR8VUtAeFoSYbKedZNsDvCN\": {\n            \"id\": \"JUPyiwrYJFskUPiHa7hkeR8VUtAeFoSYbKedZNsDvCN\",\n            \"type\": \"derivedPrice\",\n            \"price\": \"0.751467\"\n        }\n    },\n    \"timeTaken\": 0.00395219\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Jupiter Swap API with gRPC in Shell\nDESCRIPTION: Command to start the Jupiter Swap API server using a Solana RPC URL and Yellowstone gRPC endpoint. This setup is recommended for optimal performance.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/2-apis/9-self-hosted.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nRUST_LOG=info ./jupiter-swap-api --rpc-url <RPC-URL> --yellowstone-grpc-endpoint <GRPC-ENDPOINT> --yellowstone-grpc-x-token <X-TOKEN>\n```\n\n----------------------------------------\n\nTITLE: Executing Jupiter Swap Flash-Fill in TypeScript\nDESCRIPTION: This code snippet represents the client-side implementation for executing a Jupiter Swap Flash-Fill transaction. It includes creating and sending the transaction with the necessary instructions. The full implementation details are available in the linked GitHub repository.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/2-apis/6-flash-fill.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Full code available at: https://github.com/jup-ag/sol-swap-flash-fill/blob/main/cli/flash-fill.ts\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Basic Price Query\nDESCRIPTION: This JSON snippet shows the structure of the response for a basic price query. It includes prices for multiple tokens, with and without using the vsToken parameter.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/500-price-api/README.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"So11111111111111111111111111111111111111112\": {\n      \"id\": \"So11111111111111111111111111111111111111112\",\n      \"type\": \"derivedPrice\",\n      \"price\": \"210.195311500\"\n    },\n    \"JUPyiwrYJFskUPiHa7hkeR8VUtAeFoSYbKedZNsDvCN\": {\n      \"id\": \"JUPyiwrYJFskUPiHa7hkeR8VUtAeFoSYbKedZNsDvCN\",\n      \"type\": \"derivedPrice\",\n      \"price\": \"1.084247\"\n    }\n  },\n  \"timeTaken\": 0.00488491\n}\n{\n  \"data\": {\n    \"JUPyiwrYJFskUPiHa7hkeR8VUtAeFoSYbKedZNsDvCN\": {\n      \"id\": \"JUPyiwrYJFskUPiHa7hkeR8VUtAeFoSYbKedZNsDvCN\",\n      \"type\": \"derivedPrice\",\n      \"price\": \"0.005158283466279884\"\n    },\n    \"So11111111111111111111111111111111111111112\": {\n      \"id\": \"So11111111111111111111111111111111111111112\",\n      \"type\": \"derivedPrice\",\n      \"price\": \"1\"\n    }\n  },\n  \"timeTaken\": 0.00203215\n}\n```\n\n----------------------------------------\n\nTITLE: Successful Create Order Response Schema\nDESCRIPTION: JSON schema showing the successful response format containing the requestId, unsigned base64 transaction, and order account address.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/api/trigger-api/create-order.api.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"requestId\": \"f7d5dd40-a416-4dae-8367-7dc10cab6554\",\n  \"transaction\": \"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAkOCWPK8t5w2W1nIsonBw2T/TCNCKkrgBQia9/YVlLEcjM9zTXA2aZIqK0k40U/eCZ0Zu1176lxIuHLsY6UyQjTdash6wigo20Auc3RVYRWME9FjnpbdgdRKYjLJLe0lVi47IZO5XCZ/U0AirZsOIWLoumtNiLomxcYL6d2R2rSxzkNgnQl2IV0spQPT+7K7zraa8oytEZyZ4HSFpxmV2v3WgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEImJzcxhjwZ2dKxnfimarbEo/iDZzNgo5QjJ8b+bMOuSf2yH7EMQBZfZLsgOHg/C5SyLv/x1D4MHZgRX7jOy4YyXJY9OJInxuz0QKRSODYMLWhOZ2v8QhASOe9jb6fhZAwZGb+UhFzL/7K26csOb57yM5bvF9xJrLEObOkAAAADG+nrzvtutOj1l82qryXQxsbvkwtL24OR8pgIDRS9dYQrDSpbBZnFaYMEjPsolig3zCx7IWOB0XHNqEmJmY0siBpuIV/6rgYT7aH9jRhjANdrEOdwa6ztVmKDwAAAAAAEG3fbh12Whk9nL4UbO63msHLSF7V9bN5E6jPWFfv8AqXeleaIpvDk6bHUITYxyjNU3ParFA70LbecfV6NupbbBCAkABQKgAwIACQAJAy48AAAAAAAACAYABAAMBQ0BAQUCAAQMAgAAAIDw+gIAAAAADQEEAREIBgABAAoFDQEBCw8AAAIDBAYLDAoNDQUIBwsihW5Kr3Cf9Z9OyUY1qj0LZYDw+gIAAAAAAOH1BQAAAAAAAA0DBAAAAQk=\",\n  \"order\": \"CX2iPk4nxarGPkk7ziViJTfL1z2e1LnGWRDimVQ4tzYf\"\n}\n```\n\n----------------------------------------\n\nTITLE: Cancelling Multiple Orders with Jupiter Trigger API\nDESCRIPTION: This code demonstrates how to cancel multiple orders in a batch using the Jupiter Trigger API. It sends a POST request to the cancelOrders endpoint with the maker address, compute unit price setting, and an array of order accounts to be cancelled.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/102-trigger-api/3-cancel-order.md#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst cancelOrdersResponse = await (\n    await fetch('https://lite-api.jup.ag/trigger/v1/cancelOrders', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n            maker: \"jdocuPgEAjMfihABsPgKEvYtsmMzjUHeq9LX4Hvs7f3\",\n            computeUnitPrice: \"auto\",\n            orders: [\n                \"6fe8ByaiFHisjnYnH5qdpyiNtkn89mMBQUemRkVmKhro\",\n                \"9jwzPKHxcrSozdrTYzPnTqy7psRvNGxaYUAiiyxwZKjj\"\n            ]\n        })\n    })\n).json();\n```\n\n----------------------------------------\n\nTITLE: Executing Signed Recurring Order Transaction in JSON\nDESCRIPTION: JSON schema for the request body to execute a signed recurring order transaction. Requires the requestId from a previous createOrder or cancelOrder call, and the signedTransaction.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/api/recurring-api/execute.api.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"object\",\n  \"required\": [\"requestId\", \"signedTransaction\"],\n  \"properties\": {\n    \"requestId\": {\n      \"type\": \"string\"\n    },\n    \"signedTransaction\": {\n      \"type\": \"string\"\n    }\n  },\n  \"title\": \"ExecuteRecurring\"\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching New Tokens in JavaScript\nDESCRIPTION: Retrieves a list of new tokens sorted by creation timestamp, with support for pagination using limit and offset parameters.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/501-token-api/README.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst newTokensReponse = await (\n    await fetch('https://lite-api.jup.ag/tokens/v1/new')\n).json();\n\nconsole.log(newTokensReponse);\n```\n\n----------------------------------------\n\nTITLE: Advanced Error Handling for AMM\nDESCRIPTION: Implementation of error handling to exclude failed AMMs from quotes using programIdToLabel mapping\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/2-apis/1-swap-api.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseErrorForTransaction } from '@mercurial-finance/optimist';\n\nconst transaction = connection.getTransaction(txid, {\n  maxSupportedTransactionVersion: 0,\n  commitment: 'confirmed'\n});\n\nconst programIdToLabelHash = await (\n  await fetch('https://quote-api.jup.ag/v6/program-id-to-label')\n).json();\nconst { programIds } = parseErrorForTransaction(transaction);\n\nlet excludeDexes = new Set();\nif (programIds) {\n  for (let programId of programIds) {\n    let foundLabel = programIdToLabelHash[programId];\n    if(foundLabel) {\n      excludeDexes.add(foundLabel);\n    }\n  }\n}\n\nconst { data } = await (\n  await fetch(`https://quote-api.jup.ag/v6/quote?inputMint=So11111111111111111111111111111111111111112\n&outputMint=EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\n&amount=100000000&excludeDexes=${Array.from(excludeDexes).join(',')}\n&slippageBps=50`\n  )\n).json();\n```\n\n----------------------------------------\n\nTITLE: Fetching Token Information in JavaScript\nDESCRIPTION: Makes an API call to retrieve detailed information about a specific token (JUP) including tags, authorities, and metadata.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/501-token-api/README.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst tokenInfoResponse = await (\n    await fetch('https://lite-api.jup.ag/tokens/v1/token/JUPyiwrYJFskUPiHa7hkeR8VUtAeFoSYbKedZNsDvCN')\n).json();\n\nconsole.log(tokenInfoResponse);\n```\n\n----------------------------------------\n\nTITLE: Successful Execution Response Schema in JSON\nDESCRIPTION: JSON schema for the response body when a recurring order transaction is successfully executed. Includes the transaction signature, execution status, and optional order account and error fields.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/api/recurring-api/execute.api.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"object\",\n  \"required\": [\"signature\", \"status\"],\n  \"properties\": {\n    \"error\": {\n      \"type\": [\"string\", \"null\"]\n    },\n    \"order\": {\n      \"type\": [\"string\", \"null\"],\n      \"description\": \"Base-58 account which is the Recurring Order account\"\n    },\n    \"signature\": {\n      \"type\": \"string\"\n    },\n    \"status\": {\n      \"type\": \"string\",\n      \"enum\": [\"Success\", \"Failed\"]\n    }\n  },\n  \"title\": \"ExecuteRecurringResponse\"\n}\n```\n\n----------------------------------------\n\nTITLE: Swap API Response Structure\nDESCRIPTION: Shows the structure of the response received from the Jupiter Swap API, including transaction data, block height, fees, and computation limits.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/100-swap-api/2-build-swap-transaction.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    swapTransaction: 'AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAQAGDkS+3LuGTbs......+/oD9qb31dH6i0QZ2IHELXUX3Y1YeW79p9Stkqk12z4yvZFJiQ4GCQwLBwYQBgUEDggNTQ==',\n    lastValidBlockHeight: 279632475,\n    prioritizationFeeLamports: 9999,\n    computeUnitLimit: 388876,\n    prioritizationType: {\n        computeBudget: { \n            microLamports: 25715,\n            estimatedMicroLamports: 785154 \n        }\n    },\n    dynamicSlippageReport: {\n        slippageBps: 50,\n        otherAmount: 20612318,\n        simulatedIncurredSlippageBps: -18,\n        amplificationRatio: '1.5',\n        categoryName: 'lst',\n        heuristicMaxSlippageBps: 100\n    },\n    simulationError: null\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Slippage in Solana Transactions with Jupiter API\nDESCRIPTION: This snippet demonstrates how to send a payload to the Jupiter API backend with dynamic slippage parameters. It sets min and max basis points for slippage and includes them in the API request.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/2-apis/11-landing-transactions.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst { swapTransaction } = await (\n  await fetch('https://quote-api.jup.ag/v6/swap', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      quoteResponse,\n      userPublicKey: wallet.publicKey.toString(),\n      dynamicSlippage: {\"minBps\": 50, \"maxBps\": 300},\n    })\n  })\n).json();\n```\n\n----------------------------------------\n\nTITLE: Calculating Revenue Share\nDESCRIPTION: Formula for calculating individual revenue share based on pool percentage\nSOURCE: https://github.com/jup-ag/docs/blob/main/guides/7-jlp/2-How-JLP-Works.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nestimated revenue share you generate = $22,500 x 0.025% = $5.625\n```\n\n----------------------------------------\n\nTITLE: Failed Order Creation Response in JSON\nDESCRIPTION: This is an example of an error response from the Jupiter Trigger API's createOrder endpoint. It shows the error message, cause, and HTTP status code when an order creation fails due to insufficient input amount.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/102-trigger-api/1-create-order.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"error\": \"invalid create order request\",\n  \"cause\": \"input mint making amount must be at least 5 USD, received: 2\",\n  \"code\": 400\n}\n```\n\n----------------------------------------\n\nTITLE: Defining getRecurringOrders API Response Schema\nDESCRIPTION: JSON schema defining the response structure for the getRecurringOrders API endpoint. The response includes order details, pagination info, and trade history for both time-based and price-based recurring orders.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/api/recurring-api/get-recurring-orders.api.mdx#2025-04-16_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"type\": \"object\",\n  \"required\": [\"user\", \"orderStatus\", \"time\", \"totalPages\", \"page\"],\n  \"properties\": {\n    \"orderStatus\": {\n      \"type\": \"string\",\n      \"enum\": [\"active\", \"history\"],\n      \"title\": \"OrderState\"\n    },\n    \"page\": {\n      \"type\": \"integer\",\n      \"format\": \"int64\",\n      \"minimum\": 0\n    },\n    \"time\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"required\": [\"userPubkey\", \"orderKey\", \"inputMint\", \"outputMint\", \"inDeposited\", \"inWithdrawn\", \"rawInDeposited\", \"rawInWithdrawn\", \"cycleFrequency\", \"outWithdrawn\", \"inAmountPerCycle\", \"minOutAmount\", \"maxOutAmount\", \"inUsed\", \"outReceived\", \"rawOutWithdrawn\", \"rawInAmountPerCycle\", \"rawMinOutAmount\", \"rawMaxOutAmount\", \"rawInUsed\", \"rawOutReceived\", \"openTx\", \"closeTx\", \"userClosed\", \"createdAt\", \"updatedAt\", \"trades\"],\n        \"properties\": {\n          // ... (properties omitted for brevity)\n        },\n        \"title\": \"TimeRecurringResponse\"\n      }\n    },\n    \"totalPages\": {\n      \"type\": \"integer\",\n      \"format\": \"int64\",\n      \"minimum\": 0\n    },\n    \"user\": {\n      \"type\": \"string\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Terminal Activity with Resume and Close Functions\nDESCRIPTION: Demonstrates how to manage Jupiter Terminal activity state. This includes resuming from a previous state instead of creating a new activity, and closing the terminal widget.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/300-tool-kits/1-swap-terminal.md#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nif (window.Jupiter._instance) {\n    window.Jupiter.resume();\n}\n\nwindow.Jupiter.close();\n```\n\n----------------------------------------\n\nTITLE: Calculating Price Impact Fee for Trades in Jupiter Perpetuals\nDESCRIPTION: This code snippet illustrates the process of calculating the price impact fee for opening or closing a trade in Jupiter Perpetuals. It uses the trade impact fee scalar from the custody account and applies it to the trade size.\nSOURCE: https://github.com/jup-ag/docs/blob/main/guides/8-perpetual-exchange/2-how-it-works.md#2025-04-16_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nUSDC_DECIMALS = 10^6  // 1_000_000\nBPS_POWER = 10^4      // 10_000\n\nCalculate Price Impact Fee:\n\n// 1. Get the trade impact fee scalar from the custody account's `pricing.tradeImpactFeeScalar` constant\n// https://station.jup.ag/guides/perpetual-exchange/onchain-accounts#custody-account\n   tradeImpactFeeScalar = custody.pricing.tradeImpactFeeScalar\n\n// 2. Convert trade size to USDC decimal format\n   tradeSizeUsd = tradeSizeUsd * USDC_DECIMALS\n\n// 3. Scale to BPS format for fee calculation\n   tradeSizeUsdBps = tradeSizeUsd * BPS_POWER\n\n// 4. Calculate price impact fee percentage in BPS\n   priceImpactFeeBps = tradeSizeUsdBps / tradeImpactFeeScalar\n\n// 5. Calculate final price impact fee in USD\n   priceImpactFeeUsd = (tradeSizeUsd * priceImpactFeeBps / BPS_POWER) / USDC_DECIMALS\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response with Extra Information\nDESCRIPTION: This JSON snippet demonstrates the response structure when requesting extra information along with token prices. It includes details such as last swapped prices, quoted prices, confidence levels, and depth information.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/500-price-api/README.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"So11111111111111111111111111111111111111112\": {\n      \"id\": \"So11111111111111111111111111111111111111112\",\n      \"type\": \"derivedPrice\",\n      \"price\": \"210.734462500\",\n      \"extraInfo\": {\n        \"lastSwappedPrice\": {\n          \"lastJupiterSellAt\": 1731599242,\n          \"lastJupiterSellPrice\": \"210.52136418853988\",\n          \"lastJupiterBuyAt\": 1731599242,\n          \"lastJupiterBuyPrice\": \"210.5553945976539\"\n        },\n        \"quotedPrice\": {\n          \"buyPrice\": \"210.578367000\",\n          \"buyAt\": 1731599236,\n          \"sellPrice\": \"210.890558000\",\n          \"sellAt\": 1731599236\n        },\n        \"confidenceLevel\": \"high\",\n        \"depth\": {\n          \"buyPriceImpactRatio\": {\n            \"depth\": {\n              \"10\": 0.08186978526745424,\n              \"100\": 0.1154072102743595,\n              \"1000\": 0.13766677800178445\n            },\n            \"timestamp\": 1731599207\n          },\n          \"sellPriceImpactRatio\": {\n            \"depth\": {\n              \"10\": 0.1211367007033883,\n              \"100\": 0.059088081285986374,\n              \"1000\": 0.16445602954342006\n            },\n            \"timestamp\": 1731599207\n          }\n        }\n      }\n    },\n    \"JUPyiwrYJFskUPiHa7hkeR8VUtAeFoSYbKedZNsDvCN\": {\n      \"id\": \"JUPyiwrYJFskUPiHa7hkeR8VUtAeFoSYbKedZNsDvCN\",\n      \"type\": \"derivedPrice\",\n      \"price\": \"1.088080\",\n      \"extraInfo\": {\n        \"lastSwappedPrice\": {\n          \"lastJupiterSellAt\": 1731599239,\n          \"lastJupiterSellPrice\": \"1.0857748923629837\",\n          \"lastJupiterBuyAt\": 1731599241,\n          \"lastJupiterBuyPrice\": \"1.0879206578017573\"\n        },\n        \"quotedPrice\": {\n          \"buyPrice\": \"1.088085\",\n          \"buyAt\": 1731599236,\n          \"sellPrice\": \"1.088076\",\n          \"sellAt\": 1731599236\n        },\n        \"confidenceLevel\": \"high\",\n        \"depth\": {\n          \"buyPriceImpactRatio\": {\n            \"depth\": {\n              \"10\": 0.05662764967204097,\n              \"100\": 0.17463135504551536,\n              \"1000\": 0.7379832960897882\n            },\n            \"timestamp\": 1731599207\n          },\n          \"sellPriceImpactRatio\": {\n            \"depth\": {\n              \"10\": 0.03504801758790863,\n              \"100\": 0.16858843747627028,\n              \"1000\": 3.0578377037958586\n            },\n            \"timestamp\": 1731599207\n          }\n        }\n      }\n    }\n  },\n  \"timeTaken\": 0.003665979\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Quote from Jupiter API\nDESCRIPTION: Demonstrates how to fetch a quote from Jupiter's v6 API with restrictIntermediateTokens enabled for better route stability and success rate.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/2-apis/11-landing-transactions.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst quoteResponse = await (\n  await fetch('https://quote-api.jup.ag/v6/quote\\\n&inputMint=So11111111111111111111111111111111111111112\\\n&outputMint=EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\\\n&amount=100000000\\\n&restrictIntermediateTokens=true'\n  )\n).json();\n```\n\n----------------------------------------\n\nTITLE: Modifying Transaction Message\nDESCRIPTION: Decompilation of transaction message and addition of transfer instruction.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/8-additional-topics/1-composing-with-versioned-transaction.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// decompile transaction message and add transfer instruction\nvar message = TransactionMessage.decompile(transaction.message,{addressLookupTableAccounts: addressLookupTableAccounts})\nmessage.instructions.push(transferInstruction)\n```\n\n----------------------------------------\n\nTITLE: Defining Request Body Schema for Cancelling Trigger Order\nDESCRIPTION: JSON schema defining the required parameters in the request body for cancelling a trigger order. It includes the maker's public key, order ID, and optional compute unit price.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/api/trigger-api/cancel-order.api.mdx#2025-04-16_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"maker\": {\n      \"type\": \"string\"\n    },\n    \"order\": {\n      \"type\": \"string\"\n    },\n    \"computeUnitPrice\": {\n      \"type\": \"string\",\n      \"default\": \"auto\",\n      \"description\": \"In microlamports, defaults to 95th percentile of priority fees\"\n    }\n  },\n  \"required\": [\"maker\", \"order\"],\n  \"example\": {\n    \"maker\": \"jdocuPgEAjMfihABsPgKEvYtsmMzjUHeq9LX4Hvs7f3\",\n    \"order\": \"6fe8ByaiFHisjnYnH5qdpyiNtkn89mMBQUemRkVmKhro\",\n    \"computeUnitPrice\": \"auto\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Response for getTriggerOrders API Call\nDESCRIPTION: This JSON snippet shows a sample response from the getTriggerOrders endpoint. It includes details of a user's trigger order history, including order status, trade details, and pagination information.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/api/trigger-api/get-trigger-orders.api.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"user\": \"jdocuPgEAjMfihABsPgKEvYtsmMzjUHeq9LX4Hvs7f3\",\n  \"orderStatus\": \"history\",\n  \"orders\": [\n    {\n      \"userPubkey\": \"jdocuPgEAjMfihABsPgKEvYtsmMzjUHeq9LX4Hvs7f3\",\n      \"orderKey\": \"99uWTWukow8k7dqcpbYoHxTAWGvn1YkT1VMmnEeTjuDr\",\n      \"inputMint\": \"So11111111111111111111111111111111111111112\",\n      \"outputMint\": \"HeLp6NuQkmYB4pYWo2zYs22mESHXPQYzXbB8n4V98jwC\",\n      \"makingAmount\": \"0.05\",\n      \"takingAmount\": \"32.071840924\",\n      \"remainingMakingAmount\": \"0\",\n      \"remainingTakingAmount\": \"0\",\n      \"rawMakingAmount\": \"50000000\",\n      \"rawTakingAmount\": \"32071840924\",\n      \"rawRemainingMakingAmount\": \"0\",\n      \"rawRemainingTakingAmount\": \"0\",\n      \"slippageBps\": \"0\",\n      \"expiredAt\": null,\n      \"createdAt\": \"2025-03-17T08:07:25Z\",\n      \"updatedAt\": \"2025-03-17T08:09:37Z\",\n      \"status\": \"Completed\",\n      \"openTx\": \"466G3XxE4NzxCj136SXe4BSjXzCVBQdvn6RsHMNGN2DGCS9PSceJSACqEWCxx22hsCXcEskvEFdm44wsHCF1auvL\\n\",\n      \"closeTx\": \"3PDo3pMJLqvAfNXwYjY7BSP57ZNQ5DgYDeK6xYszUVMneHzAZBQzsBSskym8uveMoLC4G8N8DjPaLBY726ZsBZvT\\n\",\n      \"programVersion\": \"j1o2qRpjcyUwEvwtcfhEQefh773ZgjxcVRry7LDqg5X\",\n      \"trades\": [\n        {\n          \"orderKey\": \"99uWTWukow8k7dqcpbYoHxTAWGvn1YkT1VMmnEeTjuDr\",\n          \"keeper\": \"j1oAbxxiDUWvoHxEDhWE7THLjEkDQW2cSHYn2vttxTF\",\n          \"inputMint\": \"So11111111111111111111111111111111111111112\",\n          \"outputMint\": \"HeLp6NuQkmYB4pYWo2zYs22mESHXPQYzXbB8n4V98jwC\",\n          \"inputAmount\": \"0.05\",\n          \"outputAmount\": \"32.071840924\",\n          \"rawInputAmount\": \"50000000\",\n          \"rawOutputAmount\": \"32071840924\",\n          \"feeMint\": \"DtL4JtjXwsJQndqXyd6ytJSmWDLWLESoXc7MkYNRQF9J\",\n          \"feeAmount\": \"0\",\n          \"rawFeeAmount\": \"0\",\n          \"txId\": \"3PDo3pMJLqvAfNXwYjY7BSP57ZNQ5DgYDeK6xYszUVMneHzAZBQzsBSskym8uveMoLC4G8N8DjPaLBY726ZsBZvT\\n\",\n          \"confirmedAt\": \"2025-03-17T08:09:37Z\",\n          \"action\": \"Fill\",\n          \"productMeta\": null\n        }\n      ]\n    }\n  ],\n  \"totalPages\": 1,\n  \"page\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing AMM Interface Trait in Rust\nDESCRIPTION: Core trait definition for integrating DEX implementations with Jupiter. Contains required methods for account management, quoting, swapping, and DEX-specific functionality. Implementation must avoid network calls and work with Jupiter's caching system.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/6-projects-and-dexes/2-integration-guidelines.md#2025-04-16_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\npub trait Amm {\n    fn from_keyed_account(keyed_account: &KeyedAccount, amm_context: &AmmContext) -> Result<Self>\n    where\n        Self: Sized;\n    fn label(&self) -> String;\n    fn program_id(&self) -> Pubkey;\n    fn key(&self) -> Pubkey;\n    fn get_reserve_mints(&self) -> Vec<Pubkey>;\n    fn get_accounts_to_update(&self) -> Vec<Pubkey>;\n    fn update(&mut self, account_map: &AccountMap) -> Result<()>;\n    fn quote(&self, quote_params: &QuoteParams) -> Result<Quote>;\n    fn get_swap_and_account_metas(&self, swap_params: &SwapParams) -> Result<SwapAndAccountMetas>;\n    fn has_dynamic_accounts(&self) -> bool {\n        false\n    }\n    fn requires_update_for_reserve_mints(&self) -> bool {\n        false\n    }\n    fn supports_exact_out(&self) -> bool {\n        false\n    }\n    fn get_user_setup(&self) -> Option<AmmUserSetup> {\n        None\n    }\n    fn clone_amm(&self) -> Box<dyn Amm + Send + Sync>;\n    fn unidirectional(&self) -> bool {\n        false\n    }\n    fn program_dependencies(&self) -> Vec<(Pubkey, String)> {\n        vec![]\n    }\n    fn get_accounts_len(&self) -> usize {\n        32\n    }\n    fn underlying_liquidities(&self) -> Option<HashSet<Pubkey>> {\n        None\n    }\n    fn is_active(&self) -> bool {\n        true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Utilization Rate in Jupiter Perpetuals\nDESCRIPTION: This snippet demonstrates how to calculate the utilization percentage for an asset in Jupiter Perpetuals. It checks if both owned and locked assets exist, then calculates the ratio of locked to owned assets.\nSOURCE: https://github.com/jup-ag/docs/blob/main/guides/8-perpetual-exchange/2-how-it-works.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Calculate utilization percentage\nif (custody.assets.owned > 0 AND custody.assets.locked > 0) then\n    utilizationPct = custody.assets.locked / custody.assets.owned\nelse\n    utilizationPct = 0\n```\n\n----------------------------------------\n\nTITLE: Calculating Individual Pool Percentage for JLP\nDESCRIPTION: This formula calculates an individual's percentage share in the total JLP pool based on their contributed amount and the total pool amount.\nSOURCE: https://github.com/jup-ag/docs/blob/main/Moved/2-perpetual-exchange/3-jlp-pool.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nyour_pool_contributed_amount / total_pool_amount x 100 = your_pool_percentage\n```\n\n----------------------------------------\n\nTITLE: Fetching Token Prices with vsToken in JavaScript\nDESCRIPTION: This code snippet shows how to fetch token prices using a specific token as the price reference (vsToken). It demonstrates making an API request with the vsToken parameter and logging the response.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/500-price-api/README.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(JSON.stringify(priceData, null, 2));\n\nconst priceResponseWithVsToken = await fetch(\n    'https://lite-api.jup.ag/price/v2?ids=JUPyiwrYJFskUPiHa7hkeR8VUtAeFoSYbKedZNsDvCN,So11111111111111111111111111111111111111112&vsToken=So11111111111111111111111111111111111111112'\n);\n\nconst priceDataWithVsToken = await priceResponseWithVsToken.json();\n  \nconsole.log(JSON.stringify(priceDataWithVsToken, null, 2));\n```\n\n----------------------------------------\n\nTITLE: Request Body Schema for Price Deposit Transaction\nDESCRIPTION: JSON schema defining the required parameters for creating a price-based recurring deposit transaction. Requires user address, order account address, and deposit amount.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/api/recurring-api/price-deposit.api.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"object\",\n  \"required\": [\"user\", \"order\", \"amount\"],\n  \"properties\": {\n    \"amount\": {\n      \"type\": \"integer\",\n      \"format\": \"int64\",\n      \"minimum\": 0\n    },\n    \"order\": {\n      \"type\": \"string\",\n      \"description\": \"Base-58 account which is the Recurring Order account\"\n    },\n    \"user\": {\n      \"type\": \"string\"\n    }\n  },\n  \"title\": \"DepositPriceRecurring\"\n}\n```\n\n----------------------------------------\n\nTITLE: Cancel Order Response Schema JSON\nDESCRIPTION: JSON schema defining the success response structure containing the requestId for execution and unsigned base-64 encoded transaction.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/api/recurring-api/cancel-order.api.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"object\",\n  \"required\": [\"requestId\", \"transaction\"],\n  \"properties\": {\n    \"requestId\": {\n      \"type\": \"string\",\n      \"description\": \"Required to make a request to `/execute`\"\n    },\n    \"transaction\": {\n      \"type\": \"string\",\n      \"description\": \"Unsigned base-64 encoded transaction\"\n    }\n  },\n  \"title\": \"RecurringResponse\"\n}\n```\n\n----------------------------------------\n\nTITLE: Cancel Order Successful Response Format\nDESCRIPTION: Example of a successful response from the cancelOrder endpoint. The response includes the transaction blob that needs to be signed and sent to the network, and a requestId that can be used for tracking.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/102-trigger-api/3-cancel-order.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"transaction\": \"AQAAAAAAAAAAAAAAAAAAAAAA......QYHAwUIX4Ht8Agx34Q=\",\n  \"requestId\": \"370100dd-1a85-421b-9278-27f0961ae5f4\",\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Unified Wallet Provider in React\nDESCRIPTION: Example of how to wrap a React application with UnifiedWalletProvider component. It demonstrates configuring wallets, environment, metadata, and custom notifications.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/5-jupiter-terminal/3-unified-wallet-kit.md#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst ExampleBaseOnly = () => {\n  return (\n    <UnifiedWalletProvider\n      wallets={[]}\n      config={{\n        autoConnect: false,\n        env: 'mainnet-beta',\n        metadata: {\n          name: 'UnifiedWallet',\n          description: 'UnifiedWallet',\n          url: 'https://jup.ag',\n          iconUrls: ['https://jup.ag/favicon.ico'],\n        },\n        notificationCallback: WalletNotification,\n        walletlistExplanation: {\n          href: 'https://station.jup.ag/docs/old/additional-topics/wallet-list',\n        },\n      }}\n    >\n      <UnifiedWalletButton />\n    </UnifiedWalletProvider>\n  );\n};\n\nexport default ExampleBaseOnly;\n```\n\n----------------------------------------\n\nTITLE: Setting up Solana Connection and Imports\nDESCRIPTION: Importing required libraries and establishing connection to Solana network using RPC endpoint\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/2-apis/1-swap-api.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Connection, Keypair, VersionedTransaction } from '@solana/web3.js';\nimport fetch from 'cross-fetch';\nimport { Wallet } from '@project-serum/anchor';\nimport bs58 from 'bs58';\n\nconst connection = new Connection('https://neat-hidden-sanctuary.solana-mainnet.discover.quiknode.pro/2af5315d336f9ae920028bbb90a73b724dc1bbed/');\n```\n\n----------------------------------------\n\nTITLE: Processing Dynamic Slippage Response from Jupiter API\nDESCRIPTION: This snippet shows the structure of the response received from the Jupiter API after a dynamic slippage request. It includes the serialized transaction and a detailed report on the dynamic slippage calculation.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/2-apis/11-landing-transactions.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"swapTransaction\": \"// serialized transaction\",\n    \"lastValidBlockHeight\": 266691690,\n    \"prioritizationFeeLamports\": 384,\n    \"computeUnitLimit\": 107468,\n    \"prioritizationType\": {\n        \"computeBudget\": {\n            \"microLamports\": 3577,\n            \"estimatedMicroLamports\": 3577\n        }\n    },\n    \"dynamicSlippageReport\": {\n        \"slippageBps\": 12,\n        \"otherAmount\": 8759842,\n        \"simulatedIncurredSlippageBps\": -8,\n        \"amplificationRatio\": \"1.5\"\n    },\n    \"simulationError\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Using Mint Addresses with Jupiter Price API\nDESCRIPTION: Example demonstrating how to use token mint addresses instead of symbols for both ids and vsToken parameters when fetching prices.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/2-apis/4-price-api.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n# Specifying both id and vsToken with mint addresses\nhttps://price.jup.ag/v6/price?ids=7vfCXTUXx5WJV5JADk17DUJ4ksgau7utNKj4b963voxs&vsToken=So11111111111111111111111111111111111111112\n\n{\n  \"data\": {\n    \"7vfCXTUXx5WJV5JADk17DUJ4ksgau7utNKj4b963voxs\": {\n      \"id\": \"7vfCXTUXx5WJV5JADk17DUJ4ksgau7utNKj4b963voxs\",\n      \"mintSymbol\": \"ETH\",\n      \"vsToken\": \"So11111111111111111111111111111111111111112\",\n      \"vsTokenSymbol\": \"SOL\",\n      \"price\": 43.28938739\n    }\n  },\n  \"timeTaken\": 0.039186676000099396\n}\n```\n\n----------------------------------------\n\nTITLE: Successful Balance Response Format\nDESCRIPTION: Shows the JSON structure of a successful response from the balances endpoint. The response includes amount, UI amount, slot number, and frozen status for each token.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/101-ultra-api/3-get-balances.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"SOL\": {\n    \"amount\": \"0\",\n    \"uiAmount\": 0,\n    \"slot\": 324307186,\n    \"isFrozen\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Jupiter API Swap Request Schema in JSON\nDESCRIPTION: This code snippet defines the JSON schema for a swap request in the Jupiter API. It includes various properties such as userPublicKey, quoteResponse, and optional parameters for customizing the swap transaction.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/api/swap-api/swap.api.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"object\",\n  \"required\": [\"userPublicKey\", \"quoteResponse\"],\n  \"properties\": {\n    \"userPublicKey\": {\"type\": \"string\"},\n    \"wrapAndUnwrapSol\": {\n      \"description\": \"- To automatically wrap/unwrap SOL in the transaction\\n- If false, it will use wSOL token account\\n- Parameter will be ignored if `destinationTokenAccount` is set because the `destinationTokenAccount` may belong to a different user that we have no authority to close\\n\",\n      \"type\": \"boolean\",\n      \"default\": true\n    },\n    \"useSharedAccounts\": {\n      \"description\": \"- The default is determined dynamically by the routing engine, allowing us to optimize for compute units, etc\\n- This enables the usage of shared program accounts, this is essential as complex routing will require multiple intermediate token accounts which the user might not have\\n- If true, you do not need to handle the creation of intermediate token accounts for the user\\n- Do note, shared accounts route will fail on some new AMMs (low liquidity token)\\n\",\n      \"type\": \"boolean\"\n    },\n    \"feeAccount\": {\n      \"description\": \"- An token account that will be used to collect fees\\n- The mint of the token account **can only be either the input or output mint of the swap**\\n- You no longer are required to use the Referral Program\\n- See [Add Fees](/docs/swap-api/add-fees-to-swap) guide for more details\\n\",\n      \"type\": \"string\"\n    },\n    \"trackingAccount\": {\n      \"description\": \"- Specify any public key that belongs to you to track the transactions\\n- Useful for integrators to get all the swap transactions from this public key\\n- Query the data using a block explorer like Solscan/SolanaFM or query like Dune/Flipside\\n\",\n      \"type\": \"string\"\n    },\n    \"prioritizationFeeLamports\": {\n      \"description\": \"- To specify a level or amount of additional fees to prioritize the transaction\\n- It can be used for EITHER priority fee OR Jito tip (not both at the same time)\\n- If you want to include both, you will need to use `/swap-instructions` to add both at the same time\\n\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"priorityLevelWithMaxLamports\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"priorityLevel\": {\"type\": \"string\", \"enum\": [\"medium\", \"high\", \"veryHigh\"]},\n            \"maxLamports\": {\n              \"description\": \"- Maximum lamports to cap the priority fee estimation, to prevent overpaying\\n\",\n              \"type\": \"integer\"\n            }\n          }\n        },\n        \"jitoTipLamports\": {\n          \"type\": \"integer\",\n          \"description\": \"- Exact amount of tip to use in a tip instruction\\n- Refer to Jito docs on how to estimate the tip amount based on percentiles\\n- It has to be used together with a connection to a Jito RPC\\n- [See their docs](https://docs.jito.wtf/)\\n\"\n        }\n      }\n    },\n    \"asLegacyTransaction\": {\n      \"description\": \"- Builds a legacy transaction rather than the default versioned transaction\\n- Used together with `asLegacyTransaction` in `/quote`, otherwise the transaction might be too large\\n\",\n      \"type\": \"boolean\",\n      \"default\": false\n    },\n    \"destinationTokenAccount\": {\n      \"description\": \"- Public key of a token account that will be used to receive the token out of the swap\\n- If not provided, the signer's token account will be used\\n- If provided, we assume that the token account is already initialized\\n\",\n      \"type\": \"string\"\n    },\n    \"dynamicComputeUnitLimit\": {\n      \"description\": \"- When enabled, it will do a swap simulation to get the compute unit used and set it in ComputeBudget's compute unit limit\\n- This incurs one extra RPC call to simulate this\\n- We recommend to enable this to estimate compute unit correctly and reduce priority fees needed or have higher chance to be included in a block\\n\",\n      \"type\": \"boolean\",\n      \"default\": false\n    },\n    \"skipUserAccountsRpcCalls\": {\n      \"description\": \"- When enabled, it will not do any additional RPC calls to check on required accounts\\n- Enable it only when you already setup all the accounts needed for the trasaction, like wrapping or unwrapping sol, or destination account is already created\\n\",\n      \"type\": \"boolean\",\n      \"default\": false\n    },\n    \"dynamicSlippage\": {\n      \"description\": \"- When enabled, it estimates slippage and apply it in the swap transaction directly, overwriting the `slippageBps` parameter in the quote response.\\n- Used together with `dynamicSlippage` in `/quote`, otherwise the slippage used will be the one in the `/quote`'s `slippageBps`\\n- [See notes for more information](/docs/swap-api/send-swap-transaction#how-jupiter-estimates-slippage)\\n\",\n      \"type\": \"boolean\",\n      \"default\": false\n    },\n    \"computeUnitPriceMicroLamports\": {\n      \"description\": \"- To use an exact compute unit price to calculate priority fee\\n- `computeUnitLimit (1400000) * computeUnitPriceMicroLamports`\\n- We recommend using `prioritizationFeeLamports` and `dynamicComputeUnitLimit` instead of passing in your own compute unit price\\n\",\n      \"type\": \"integer\"\n    },\n    \"blockhashSlotsToExpiry\": {\n      \"description\": \"- Pass in the number of slots we want the transaction to be valid for\\n- Example: If you pass in 10 slots, the transaction will be valid for ~400ms * 10 = approximately 4 seconds before it expires\\n\",\n      \"type\": \"integer\"\n    },\n    \"quoteResponse\": {\n      \"type\": \"object\",\n      \"required\": [\"inputMint\", \"outputMint\", \"inAmount\", \"outAmount\", \"otherAmountThreshold\", \"swapMode\", \"slippageBps\", \"priceImpactPct\", \"routePlan\"],\n      \"properties\": {\n        \"inputMint\": {\"type\": \"string\"},\n        \"inAmount\": {\"type\": \"string\"},\n        \"outputMint\": {\"type\": \"string\"},\n        \"outAmount\": {\n          \"type\": \"string\",\n          \"description\": \"- Calculated output amount from routing engine\\n- Exlcuding slippage or platform fees\\n\"\n        },\n        \"otherAmountThreshold\": {\n          \"type\": \"string\",\n          \"description\": \"- Calculated minimum output amount after accounting for `slippageBps` and `platformFeeBps`\\n- Not used by `/swap` endpoint to build transaction\\n\"\n        },\n        \"swapMode\": {\n          \"required\": true,\n          \"type\": \"string\",\n          \"enum\": [\"ExactIn\", \"ExactOut\"],\n          \"title\": \"SwapMode\"\n        },\n        \"slippageBps\": {\"type\": \"integer\", \"format\": \"int32\"},\n        \"platformFee\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"amount\": {\"type\": \"string\"},\n            \"feeBps\": {\"type\": \"integer\", \"format\": \"int32\"}\n          },\n          \"title\": \"PlatformFee\"\n        },\n        \"priceImpactPct\": {\"type\": \"string\"},\n        \"routePlan\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"swapInfo\": {\n                \"type\": \"object\",\n                \"required\": [\"ammKey\", \"inputMint\", \"outputMint\", \"inAmount\", \"outAmount\", \"feeAmount\", \"feeMint\"],\n                \"properties\": {\n                  \"ammKey\": {\"type\": \"string\"},\n                  \"label\": {\"type\": \"string\"},\n                  \"inputMint\": {\"type\": \"string\"},\n                  \"outputMint\": {\"type\": \"string\"},\n                  \"inAmount\": {\"type\": \"string\"},\n                  \"outAmount\": {\"type\": \"string\"},\n                  \"feeAmount\": {\"type\": \"string\"},\n                  \"feeMint\": {\"type\": \"string\"}\n                },\n                \"title\": \"SwapInfo\"\n              },\n              \"percent\": {\"type\": \"integer\", \"format\": \"int32\"}\n            },\n            \"required\": [\"swapInfo\", \"percent\"],\n            \"title\": \"RoutePlanStep\"\n          }\n        },\n        \"contextSlot\": {\"type\": \"number\"},\n        \"timeTaken\": {\"type\": \"number\"}\n      },\n      \"title\": \"QuoteResponse\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: View Order History Example Response\nDESCRIPTION: Sample response showing historical limit orders including their status, trades and transaction details\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/3-limit-order/2-limit-order-api.md#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"orders\": [\n    {\n      \"userPubkey\": \"jdocuPgEAjMfihABsPgKEvYtsmMzjUHeq9LX4Hvs7f3\",\n      \"orderKey\": \"E7EtgGdsdhSkkzAsSLxqWsG5Edc3n4FUL2SXWwPeN3hQ\",\n      \"inputMint\": \"So11111111111111111111111111111111111111112\",\n      \"outputMint\": \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\",\n      \"makingAmount\": \"0.05\",\n      \"takingAmount\": \"100\",\n      \"remainingMakingAmount\": \"0.05\",\n      \"remainingTakingAmount\": \"100\",\n      \"expiredAt\": null,\n      \"createdAt\": \"2024-10-22T07:48:06Z\",\n      \"updatedAt\": \"2024-10-22T07:53:02Z\",\n      \"status\": \"Cancelled\",\n      \"openTx\": \"4c1vMT1NBs5jNqanjenshNq8LXsLV68KY4mbiizDuRn9rFGEjU8g8cerUTrsmzhu4aYebtp6NyuQgqwUSNpsexYw\",\n      \"closeTx\": \"4engV35gYcKSDDM57hB4n6ZT3pLKshWSMckNh2tdHrbyKcJm6DUfBAFzufCei8sKWLHDc43dTLejHmkxvKseDW7a\",\n      \"programVersion\": \"j1o2qRpjcyUwEvwtcfhEQefh773ZgjxcVRry7LDqg5X\",\n      \"trades\": []\n    }\n  ],\n  \"hasMoreData\": false,\n  \"page\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Error Response Schema for Execute Transaction API\nDESCRIPTION: JSON schema defining the error response structure returned for bad requests (400) and server errors (500).\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/api/ultra-api/execute.api.mdx#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"error\": \"string\",\n  \"code\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Development Wallet using Solana CLI in JavaScript\nDESCRIPTION: This snippet demonstrates how to set up a development wallet using a key pair generated by the Solana CLI. It reads the private key from a JSON file and creates a wallet instance.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/1-environment-setup.md#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Keypair } from '@solana/web3.js';\nimport { Wallet } from '@coral-xyz/anchor';\nimport fs from 'fs';\n\nconst privateKeyArray = JSON.parse(fs.readFileSync('../.config/solana/id.json', 'utf8').trim());\nconst wallet = new Wallet(Keypair.fromSecretKey(new Uint8Array(privateKeyArray)));\n```\n\n----------------------------------------\n\nTITLE: Defining GET API Endpoint for Program ID to Label Mapping\nDESCRIPTION: YAML configuration for a GET API endpoint that returns a hash mapping program IDs to labels. This endpoint takes no parameters and returns a JSON object with program IDs as keys and labels as values.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/api/swap-api/program-id-to-label.api.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nid: program-id-to-label\ntitle: \"program-id-to-label\"\ndescription: \"Returns a hash, which key is the program id and value is the label.\"\nsidebar_label: \"program-id-to-label\"\nhide_title: true\nhide_table_of_contents: true\napi: eJzlVE1v2zAM/SuEThsQx+mOvXXoVgzboV27U1qgjMVEShVJlei0gZv/PspO+j1s9wUGIkuPj9TjozvFuMjqcKrO7zCqq5HSlJtkI9vg1aH6SdwmnwHBYDYjuDO2MXBDG7AZ2BDEFBYJV2A1oNewRtfS/szhjNz40l8Y2ZCnzaSBAxhyEVYYgVIKCeYprIAT+oxNSQszYdfk2c431i96qjm2jp8l27M2KHAamK2HJvhl6weWO8umj72m+8a1mo7pnvI1SMZrPSwjChsxJaFTI5Uox+AziR6d+jSZlL+XchzTUMgeKUGSkqXWgsUYnW2wYOtlLgGdyo2hFZYVbyIJRZgtqWEJRK1tgaI7TSFSYjsk3uEyJ7m82va/kZIyTdCyv6ASHJGNvNQ7RSqrKw5VL7icZkprSqWtnWqTE6Bhjvmwrp1lqjDa8bKNY1zUWbperw/U675/TUQgFSU4Ov0G5HUM1vOgaUKW3tqV5ay2o9cZ/oH8FMUtfyA3dmHk4FmO4ph9i3uItLzEfaeN2ophrZ+HXjfLrgh31trmJjOmolORYUh6MJ6MJ29KeYAf1t/Aw6V/gKqqhsX0hBjO2sB09aHWocn9TYpstahf3ZaTjzvo59Y6DWV44OLJwm/iZgVW9a/PnL4nORcN/s6RBfU+hbRBxZB5hb3nvJha7va+N17cv3uy7/816rshY7rnOjq0vYS9kbvdbE3f1U/8ZkToctx1M8z0K7nttmzftpQ2si/LNSaLs2LG6ZXQGkJNqR9GUVOyHjUNxd6dRULZePPhKL5+nPiTLxfyGfgNqDH+TA==\nsidebar_class_name: \"get api-method\"\ninfo_path: docs/api/swap-api/quickstart\ncustom_edit_url: null\n```\n\n----------------------------------------\n\nTITLE: Calculating SOL Return for Closed Position in JavaScript\nDESCRIPTION: This snippet demonstrates how to calculate the amount of SOL returned when closing a profitable leveraged position. It takes into account the initial deposit, profit, and current SOL price.\nSOURCE: https://github.com/jup-ag/docs/blob/main/guides/8-perpetual-exchange/5-faq.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n$150 / $110 = 1.3636\n```\n\n----------------------------------------\n\nTITLE: Successful Cancel Order Response Format from Jupiter API\nDESCRIPTION: This JSON example shows a successful response from the cancelOrder endpoint. It returns a requestId for tracking purposes and a transaction string containing the serialized transaction that needs to be signed and submitted to the Solana network.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/103-recurring-api/3-cancel-order.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"requestId\": \"36779346-ae51-41e9-97ce-8613c8c50553\",\n  \"transaction\": \"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAgORL7cu4ZNuxh1wI9W7GVURyr3A06dH348HDpIQzcAJ4oZOZHXAukWalAX/odOiV55UZa1ePBg8d2tRKQyqCjV6C/H8IQcrfZR4QeOJFykenP3QJznc6vNpqe2D57HTD7Gd1R4MYi595YUO8ViNwpWb17+Q9DxkVcz5fWpSqjtDyiji2RfCl7yoUfzkV42QPexQNFjBK5/+pJhV8QuWShN6r9vLZM5XJNS670dgAgf7wC+wCLLIFWHgjgWx32LJMnJAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADBkZv5SEXMv/srbpyw5vnvIzlu8X3EmssQ5s6QAAAAAabiFf+q4GE+2h/Y0YYwDXaxDncGus7VZig8AAAAAABBt324ddloZPZy+FGzut5rBy0he1fWzeROoz1hX7/AKmMlyWPTiSJ8bs9ECkUjg2DC1oTmdr/EIQEjnvY2+n4WbB1qAZjecpv43A3/wwo1VSm5NY22ehRjP5uuuk/Ujb+tSfUXWQOPsFfYV1bDiOlSpa4PwuCC/cGNfJDSsZAzATG+nrzvtutOj1l82qryXQxsbvkwtL24OR8pgIDRS9dYVCj/auTzJLgPke1v9c3puAy81rBYgsabmuLUTEQsZyVAwcABQL9WQEABwAJA0ANAwAAAAAADA0AAg0IAQQDBQYJCgsMCBYHIWKotyLz\"\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling Updated Transaction\nDESCRIPTION: Compilation of modified message back into transaction format.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/8-additional-topics/1-composing-with-versioned-transaction.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// compile the message and update the transaction\ntransaction.message = message.compileToV0Message(addressLookupTableAccounts)\n```\n\n----------------------------------------\n\nTITLE: Calculating SOL Return Value for Profit Scenario in Perpetual Exchange\nDESCRIPTION: This calculation demonstrates how profit is returned in the underlying asset (SOL) when closing a position. It shows how a $50 profit on a 1 SOL position is converted to SOL based on the current SOL price of $110.\nSOURCE: https://github.com/jup-ag/docs/blob/main/Moved/5-faq/1-faq.md#2025-04-16_snippet_0\n\nLANGUAGE: plain\nCODE:\n```\n$150 / $110 = 1.3636\n```\n\n----------------------------------------\n\nTITLE: HTTP GET Request for Tradable Mints\nDESCRIPTION: HTTP GET endpoint that returns an array of tradable mint addresses. The response is a JSON array containing strings of mint addresses that can be traded through Jupiter's routing system.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/api/token-api/tradable.api.mdx#2025-04-16_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /mints/tradable\n```\n\n----------------------------------------\n\nTITLE: Executing Orders via Jupiter API\nDESCRIPTION: Example of how to execute an order using Jupiter's API endpoint. This method handles transaction processing including priority fees and RPC connections. It requires both the signed transaction and order ID from the createOrder response.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/103-recurring-api/2-execute-order.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst executeResponse = await (\n    await fetch('https://lite-api.jup.ag/recurring/v1/execute', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n            signedTransaction: signedTransaction,\n            requestId: createOrderResponse.requestId,\n        }),\n    })\n).json();\n```\n\n----------------------------------------\n\nTITLE: Getting ExactOut Swap Quote\nDESCRIPTION: Request a swap quote with ExactOut mode from Jupiter API, specifying the exact amount of USDC the merchant wants to receive. This allows the customer to know how much SOL they need to pay.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/100-swap-api/5-payments-through-swap.md#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst quoteResponse = await (\n    await fetch(\n        'https://lite-api.jup.ag/swap/v1/quote?inputMint=So11111111111111111111111111111111111111112&outputMint=EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v&amount=100000&slippageBps=50&restrictIntermediateTokens=true&swapMode=ExactOut'\n    )\n  ).json();\n  \nconsole.log(JSON.stringify(quoteResponse, null, 2));\n```\n\n----------------------------------------\n\nTITLE: Implementing Success and Error Callbacks for Swaps\nDESCRIPTION: Sets up callback functions to handle successful swaps and error cases. The onSuccess function receives transaction ID and swap result, while onSwapError receives the error object.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/300-tool-kits/1-swap-terminal.md#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nwindow.Jupiter.init({\n    onSuccess: ({ txid, swapResult }) => {\n        console.log({ txid, swapResult });\n    },\n    onSwapError: ({ error }) => {\n        console.log('onSwapError', error);\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up Customer and Merchant Accounts\nDESCRIPTION: Initialize customer wallet, merchant address, and USDC mint address for the payment process. This setup identifies the parties involved in the transaction.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/100-swap-api/5-payments-through-swap.md#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst customerAccount = new Wallet(...);\n\nconsole.log(\"customerAccount:\", customerAccount.publicKey.toBase58());\n\nconst USDC_MINT = new PublicKey('EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v'); // Your preferred token payment\n\nconst merchantAccount = new PublicKey('ReplaceWithMerchantPubkey');\n// const trackingAccount = new PublicKey('ReplaceWithPubkey');\n\nconsole.log(\"USDC_MINT:\", USDC_MINT.toBase58());\nconsole.log(\"merchantAccount:\", merchantAccount.toBase58());\n// console.log(\"trackingAccount:\", trackingAccount.toBase58());\n```\n\n----------------------------------------\n\nTITLE: Create Limit Order Request/Response Types in TypeScript\nDESCRIPTION: Type definitions for creating a limit order, including parameters for input/output tokens, amounts, expiration, fees and other configuration options.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/3-limit-order/2-limit-order-api.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype CreateOrder = {\n  inputMint: string;\n  outputMint: string;\n  maker: string;\n  payer: string;\n  params: {\n    makingAmount: string;\n    takingAmount: string;\n    expiredAt?: string | undefined;\n    feeBps?: string | undefined;\n  };\n  computeUnitPrice: string | \"auto\";\n  referral?: string | undefined;\n  inputTokenProgram?: string | undefined;\n  outputTokenProgram?: string | undefined;\n  wrapAndUnwrapSol?: boolean | undefined;\n};\n\ntype CreateOrderResponse = {\n  order: string;\n  tx: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Token Response Schema\nDESCRIPTION: JSON schema defining the response format for token metadata, including required fields like address, name, symbol, decimals, tags, created_at and extensions. Optional fields include volume, authorities, and logo URI.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/api/token-api/tagged.api.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"address\": \"string\",\n  \"created_at\": \"date-time\",\n  \"daily_volume\": \"number|null\",\n  \"decimals\": \"integer\",\n  \"extensions\": {},\n  \"freeze_authority\": \"string|null\",\n  \"logoURI\": \"string|null\",\n  \"mint_authority\": \"string|null\",\n  \"minted_at\": \"date-time|null\",\n  \"name\": \"string\",\n  \"permanent_delegate\": \"string|null\",\n  \"symbol\": \"string\",\n  \"tags\": [\"string|null\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Internal Server Error Response (JSON)\nDESCRIPTION: JSON error response for an internal server error while generating cancel instructions.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/api/trigger-api/cancel-orders.api.mdx#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"error\": \"something went wrong while generating cancel instructions\",\n  \"code\": 500\n}\n```\n\n----------------------------------------\n\nTITLE: Failed Order Execution Response\nDESCRIPTION: Example JSON response for a failed order execution, showing the transaction signature, failure status, null order field, and an error message explaining the reason for failure.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/103-recurring-api/2-execute-order.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"signature\": \"5jyc18T918oGUhkcqaXLfe1srCiQ1MLdi2oTLLwXHTRizu8BfzW8H4SJxTRNqDDpLFpGw7pr1umV6ZM8MdaUE46Y\",\n  \"status\": \"Failed\",\n  \"order\": null,\n  \"error\": \"Insufficient funds for the operation requested.\",\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Jito Tips for MEV Protection in Solana Transactions\nDESCRIPTION: This snippet shows how to include Jito tips in a Jupiter swap transaction for MEV protection. It adds a prioritizationFeeLamports object with jitoTipLamports set to the desired tip amount in the API request.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/2-apis/11-landing-transactions.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst { swapTransaction } = await (\n  await fetch('https://quote-api.jup.ag/v6/swap', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      quoteResponse,\n      userPublicKey: wallet.publicKey.toString(),\n      prioritizationFeeLamports: {\n        jitoTipLamports: 1000000\n      }\n    })\n  })\n).json();\n```\n\n----------------------------------------\n\nTITLE: Example Quote Response with ExactOut Mode\nDESCRIPTION: Sample response from the Jupiter API showing an ExactOut quote, where inAmount is what the customer pays and outAmount is the exact payment the merchant receives.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/100-swap-api/5-payments-through-swap.md#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"inputMint\": \"So11111111111111111111111111111111111111112\",\n    \"inAmount\": \"4434914\",\n    \"outputMint\": \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\",\n    \"outAmount\": \"1000000\",\n    \"otherAmountThreshold\": \"4434914\",\n    \"swapMode\": \"ExactOut\",\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Request Body Schema for Execute Transaction API\nDESCRIPTION: JSON schema defining the required parameters for executing a signed transaction. Requires signedTransaction string and requestId obtained from a previous /order response.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/api/ultra-api/execute.api.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"signedTransaction\": \"string\",\n  \"requestId\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Transaction Signing Process\nDESCRIPTION: Deserializing and signing the swap transaction\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/2-apis/1-swap-api.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst swapTransactionBuf = Buffer.from(swapTransaction, 'base64');\nvar transaction = VersionedTransaction.deserialize(swapTransactionBuf);\nconsole.log(transaction);\n\ntransaction.sign([wallet.payer]);\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Wallet Attachments in UnifiedWalletProvider for Solana\nDESCRIPTION: Example of how to attach custom UI elements to specific wallets using the walletAttachments configuration option in UnifiedWalletProvider.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/300-tool-kits/900-unified-wallet-kit.md#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconfig={{\n  walletAttachments: { \n    'Phantom': {\n      attachment: <div tw=\"text-xs rounded-md bg-red-500 px-2 mx-2 text-center\">Auto Confirm</div>\n    } \n  }\n}}\n```\n\n----------------------------------------\n\nTITLE: Cancelling Trigger Orders Request Body (JSON)\nDESCRIPTION: JSON request body for cancelling trigger orders. Specifies the maker address, optional order IDs to cancel, and compute unit price.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/api/trigger-api/cancel-orders.api.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"maker\": \"jdocuPgEAjMfihABsPgKEvYtsmMzjUHeq9LX4Hvs7f3\",\n  \"orders\": [\n    \"6fe8ByaiFHisjnYnH5qdpyiNtkn89mMBQUemRkVmKhro\",\n    \"9jwzPKHxcrSozdrTYzPnTqy7psRvNGxaYUAiiyxwZKjj\"\n  ],\n  \"computeUnitPrice\": \"auto\"\n}\n```\n\n----------------------------------------\n\nTITLE: Successful Response from Jupiter Price API (JSON)\nDESCRIPTION: This snippet shows a sample successful response from the Jupiter Price API v2. It includes detailed price information, extra info such as last swapped prices, confidence levels, and depth data for a token.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/2-apis/5-price-api-v2.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": {\n        \"So11111111111111111111111111111111111111112\": {\n            \"id\": \"So11111111111111111111111111111111111111112\",\n            \"type\": \"derivedPrice\",\n            \"price\": \"132.280970000\",\n            \"extraInfo\": {\n                \"lastSwappedPrice\": {\n                    \"lastJupiterSellAt\": 1726231876,\n                    \"lastJupiterSellPrice\": \"132.29239989531536\",\n                    \"lastJupiterBuyAt\": 1726231877,\n                    \"lastJupiterBuyPrice\": \"132.19714417319207\"\n                },\n                \"quotedPrice\": {\n                    \"buyPrice\": \"132.286960000\",\n                    \"buyAt\": 1726231878,\n                    \"sellPrice\": \"132.274980000\",\n                    \"sellAt\": 1726231878\n                },\n                \"confidenceLevel\": \"high\",\n                \"depth\": {\n                    \"buyPriceImpactRatio\": {\n                        \"depth\": {\n                            \"10\": 0.03363618661226941,\n                            \"100\": 0.08002735245686805,\n                            \"1000\": 0.14333736423496682\n                        },\n                        \"timestamp\": 1726231876\n                    },\n                    \"sellPriceImpactRatio\": {\n                        \"depth\": {\n                            \"10\": 0.02031954946621532,\n                            \"100\": 0.020354720955966937,\n                            \"1000\": 0.06331837713363023\n                        },\n                        \"timestamp\": 1726231876\n                    }\n                }\n            }\n        }\n    },\n    \"timeTaken\": 0.00463168\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Order History with Jupiter Limit Order API\nDESCRIPTION: Shows how to retrieve order history using the Jupiter Limit Order API. The endpoint requires a wallet address and accepts optional pagination parameters.\nSOURCE: https://github.com/jup-ag/docs/blob/main/Moved/1-limit-order-api.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET \"https://jup.ag/api/limit/v1/orderHistory?wallet=TVeKgyTMp3DjwVFRYC9mYcRStRnbRsFExrZDFCKrXnT\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Compute Unit Estimation in Solana Transactions\nDESCRIPTION: This snippet demonstrates how to enable dynamic compute unit estimation when submitting a transaction to the Jupiter API. It sets the dynamicComputeUnitLimit flag to true in the API request.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/2-apis/11-landing-transactions.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst { swapTransaction } = await (\n  await fetch('https://quote-api.jup.ag/v6/swap', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      quoteResponse,\n      userPublicKey: wallet.publicKey.toString(),\n      dynamicComputeUnitLimit: true\n    })\n  })\n).json();\n```\n\n----------------------------------------\n\nTITLE: Getting All Indexed Tokens in JavaScript\nDESCRIPTION: Retrieves all tokens indexed by Jupiter, returning a large payload of token data and metadata.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/501-token-api/README.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst allResponse = await (\n    await fetch('https://lite-api.jup.ag/tokens/v1/all')\n).json();\n\nconsole.log(allResponse);\n```\n\n----------------------------------------\n\nTITLE: Create Limit Order Example Response\nDESCRIPTION: Sample response showing the order ID and unsigned transaction after creating a limit order\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/3-limit-order/2-limit-order-api.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  \"order\": \"EWxFUCUAzvo2siM9gYVPWkaouvCfemwnwkfdVw2ib7JH\",\n  \"tx\": \"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAQAJDgljyvLecNltZyLKJwcNk/0wjQipK4AUImvf2FZSxHIzDYJ0JdiFdLKUD0/uyu862mvKMrRGcmeB0hacZldr91rI1D6IwBADhxzCinLz0WuLrIJDCWIg/AajAnWXFcf8wi6Dlq1U1ClYCNsR8Xj0JlqSi9FGU0GP64HMzvBB8o/7Pc01wNmmSKitJONFP3gmdGbtde+pcSLhy7GOlMkI03UDBkZv5SEXMv/srbpyw5vnvIzlu8X3EmssQ5s6QAAAAIyXJY9OJInxuz0QKRSODYMLWhOZ2v8QhASOe9jb6fhZBpuIV/6rgYT7aH9jRhjANdrEOdwa6ztVmKDwAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbd9uHXZaGT2cvhRs7reawctIXtX1s3kTqM9YV+/wCpCsNKlsFmcVpgwSM+yiWKDfMLHshY4HRcc2oSYmZjSyIQiYnNzGGPBnZ0rGd+KZqtsSj+INnM2CjlCMnxv5sw68b6evO+2606PWXzaqvJdDGxu+TC0vbg5HymAgNFL11hkn9sh+xDEAWX2S7IDh4PwuUsi7/8dQ+DB2YEV+4zsuGS8LiUcikk5FUuAM3vpZjsAmrMZL3FPOcH2v4SeX3/fwQFAAUCoAMCAAUACQNd9AgAAAAAAAYGAAEABwgJAQEKDwAAAgMECwoMBwkJCAYNCiKFbkqvcJ/1n9vKKe2gGX+OAOH1BQAAAACA8PoCAAAAAAAAAA==\"\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Quote with Platform Fee in Shell\nDESCRIPTION: This shell command demonstrates how to fetch a quote from the Jupiter API with a custom platform fee. It includes parameters for input and output mints, amount, slippage, and platform fee in basis points.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/2-apis/3-adding-fees.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -G \"https://quote-api.jup.ag/v6/quote\" \\\n     --data-urlencode \"inputMint=So11111111111111111111111111111111111111112\" \\\n     --data-urlencode \"outputMint=EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\" \\\n     --data-urlencode \"amount=100000000\" \\\n     --data-urlencode \"slippageBps=50\" \\\n     --data-urlencode \"platformFeeBps=20\"\n```\n\n----------------------------------------\n\nTITLE: Successful Cancel Orders Response (JSON)\nDESCRIPTION: JSON response containing the request ID and base64-encoded unsigned transactions to cancel the specified orders.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/api/trigger-api/cancel-orders.api.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"requestId\": \"f7d5dd40-a416-4dae-8367-7dc10cab6554\",\n  \"transactions\": [\n    \"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAkOCWPK8t5w2W1nIsonBw2T/TCNCKkrgBQia9/YVlLEcjM9zTXA2aZIqK0k40U/eCZ0Zu1176lxIuHLsY6UyQjTdash6wigo20Auc3RVYRWME9FjnpbdgdRKYjLJLe0lVi47IZO5XCZ/U0AirZsOIWLoumtNiLomxcYL6d2R2rSxzkNgnQl2IV0spQPT+7K7zraa8oytEZyZ4HSFpxmV2v3WgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEImJzcxhjwZ2dKxnfimarbEo/iDZzNgo5QjJ8b+bMOuSf2yH7EMQBZfZLsgOHg/C5SyLv/x1D4MHZgRX7jOy4YyXJY9OJInxuz0QKRSODYMLWhOZ2v8QhASOe9jb6fhZAwZGb+UhFzL/7K26csOb57yM5bvF9xJrLEObOkAAAADG+nrzvtutOj1l82qryXQxsbvkwtL24OR8pgIDRS9dYQrDSpbBZnFaYMEjPsolig3zCx7IWOB0XHNqEmJmY0siBpuIV/6rgYT7aH9jRhjANdrEOdwa6ztVmKDwAAAAAAEG3fbh12Whk9nL4UbO63msHLSF7V9bN5E6jPWFfv8AqXeleaIpvDk6bHUITYxyjNU3ParFA70LbecfV6NupbbBCAkABQKgAwIACQAJAy48AAAAAAAACAYABAAMBQ0BAQUCAAQMAgAAAIDw+gIAAAAADQEEAREIBgABAAoFDQEBCw8AAAIDBAYLDAoNDQUIBwsihW5Kr3Cf9Z9OyUY1qj0LZYDw+gIAAAAAAOH1BQAAAAAAAA0DBAAAAQk=\\n\",\n    \"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAkOCWPK8t5w2W1nIsonBw2T/TCNCKkrgBQia9/YVlLEcjM9zTXA2aZIqK0k40U/eCZ0Zu1176lxIuHLsY6UyQjTdash6wigo20Auc3RVYRWME9FjnpbdgdRKYjLJLe0lVi47IZO5XCZ/U0AirZsOIWLoumtNiLomxcYL6d2R2rSxzkNgnQl2IV0spQPT+7K7zraa8oytEZyZ4HSFpxmV2v3WgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEImJzcxhjwZ2dKxnfimarbEo/iDZzNgo5QjJ8b+bMOuSf2yH7EMQBZfZLsgOHg/C5SyLv/x1D4MHZgRX7jOy4YyXJY9OJInxuz0QKRSODYMLWhOZ2v8QhASOe9jb6fhZAwZGb+UhFzL/7K26csOb57yM5bvF9xJrLEObOkAAAADG+nrzvtutOj1l82qryXQxsbvkwtL24OR8pgIDRS9dYQrDSpbBZnFaYMEjPsolig3zCx7IWOB0XHNqEmJmY0siBpuIV/6rgYT7aH9jRhjANdrEOdwa6ztVmKDwAAAAAAEG3fbh12Whk9nL4UbO63msHLSF7V9bN5E6jPWFfv8AqXeleaIpvDk6bHUITYxyjNU3ParFA70LbecfV6NupbbBCAkABQKgAwIACQAJAy48AAAAAAAACAYABAAMBQ0BAQUCAAQMAgAAAIDw+gIAAAAADQEEAREIBgABAAoFDQEBCw8AAAIDBAYLDAoNDQUIBwsihW5Kr3Cf9Z9OyUY1qj0LZYDw+gIAAAAAAOH1BQAAAAAAAA0DBAAAAQk=\\n\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Hourly Borrow Fee for Jupiter Perpetual Exchange Positions\nDESCRIPTION: Formula for calculating the hourly borrow fee on Jupiter Perpetual Exchange. The fee is based on the proportion of tokens borrowed relative to the total tokens in the pool, multiplied by the hourly borrow rate and the position size.\nSOURCE: https://github.com/jup-ag/docs/blob/main/Moved/2-perpetual-exchange/2-trading.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nhourly borrow fee = (tokens borrowed / tokens in the pool) x hourly borrow rate x position size\n```\n\n----------------------------------------\n\nTITLE: Querying Trade History with Jupiter Limit Order API\nDESCRIPTION: Illustrates how to fetch trade history using the Jupiter Limit Order API. The endpoint accepts optional parameters for wallet address, input mint, output mint, and pagination.\nSOURCE: https://github.com/jup-ag/docs/blob/main/Moved/1-limit-order-api.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET \"https://jup.ag/api/limit/v1/tradeHistory?wallet=TVeKgyTMp3DjwVFRYC9mYcRStRnbRsFExrZDFCKrXnT\"\n```\n\n----------------------------------------\n\nTITLE: Using Helius Priority Fee API\nDESCRIPTION: Example of using Helius RPC to estimate priority fees by analyzing recent block data and providing optimized fee recommendations.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/2-apis/11-landing-transactions.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = await fetch(HELIUS_URL, {\n  method: 'POST',\n  headers: { 'Content-Type': 'application/json' },\n  body: JSON.stringify({\n    jsonrpc: '2.0',\n    id: '1',\n    method: 'getPriorityFeeEstimate',\n    params: [{\n      transaction: serializedTransaction,\n      options: {\n        recommended: true\n      }\n    }]\n  })\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Token Information Response Schema in JSON\nDESCRIPTION: JSON schema definition for the response returned by the token information API endpoint. It specifies the structure and data types for various token attributes like address, name, symbol, decimals, etc.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/api/token-api/token-information.api.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"object\",\n  \"required\": [\"address\", \"name\", \"symbol\", \"decimals\", \"tags\", \"created_at\", \"extensions\"],\n  \"properties\": {\n    \"address\": {\"type\": \"string\"},\n    \"created_at\": {\"type\": \"string\", \"format\": \"date-time\"},\n    \"daily_volume\": {\"type\": [\"number\", \"null\"], \"format\": \"double\"},\n    \"decimals\": {\"type\": \"integer\", \"format\": \"int32\"},\n    \"extensions\": {},\n    \"freeze_authority\": {\"type\": [\"string\", \"null\"]},\n    \"logoURI\": {\"type\": [\"string\", \"null\"]},\n    \"mint_authority\": {\"type\": [\"string\", \"null\"]},\n    \"minted_at\": {\"type\": [\"string\", \"null\"], \"format\": \"date-time\"},\n    \"name\": {\"type\": \"string\"},\n    \"permanent_delegate\": {\"type\": [\"string\", \"null\"]},\n    \"symbol\": {\"type\": \"string\"},\n    \"tags\": {\"type\": \"array\", \"items\": {\"type\": [\"string\", \"null\"]}}\n  },\n  \"title\": \"MintIncludingDuplicates\"\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Address Lookup Tables\nDESCRIPTION: Retrieval and deserialization of Address Lookup Table accounts required for transaction processing.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/8-additional-topics/1-composing-with-versioned-transaction.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// get address lookup table accounts\nconst addressLookupTableAccounts = await Promise.all(\n  transaction.message.addressTableLookups.map(async (lookup) => {\n    return new AddressLookupTableAccount({\n      key: lookup.accountKey,\n      state: AddressLookupTableAccount.deserialize(await connection.getAccountInfo(lookup.accountKey).then((res) => res.data)),\n    })\n  }))\n// console.log(addressLookupTableAccounts)\n```\n\n----------------------------------------\n\nTITLE: Referencing Jupiter Lock Mainnet Deployment Address\nDESCRIPTION: This code snippet shows the mainnet deployment address for the Jupiter Lock program on the Solana blockchain. This address is essential for interacting with the Jupiter Lock program.\nSOURCE: https://github.com/jup-ag/docs/blob/main/guides/11-jupiter-lock/1-jupiter-lock.md#2025-04-16_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nLocpQgucEQHbqNABEYvBvwoxCPsSbG91A1QaQhQQqjn\n```\n\n----------------------------------------\n\nTITLE: Cancel Order Request Schema JSON\nDESCRIPTION: JSON schema defining the request body structure for canceling a recurring order. Requires user address, order account address, and recurring type specification.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/api/recurring-api/cancel-order.api.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"object\",\n  \"required\": [\"user\", \"order\", \"recurringType\"],\n  \"properties\": {\n    \"order\": {\n      \"type\": \"string\",\n      \"description\": \"Base-58 account which is the Recurring Order account\"\n    },\n    \"recurringType\": {\n      \"type\": \"string\",\n      \"enum\": [\"time\", \"price\"],\n      \"title\": \"CloseRecurringType\"\n    },\n    \"user\": {\n      \"type\": \"string\"\n    }\n  },\n  \"title\": \"CloseRecurring\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Jupiter Payments\nDESCRIPTION: Import necessary libraries for working with Solana transactions, SPL tokens, wallets, and network requests for setting up payment swaps.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/100-swap-api/5-payments-through-swap.md#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { PublicKey, Connection, Keypair, VersionedTransaction } from '@solana/web3.js';\nimport { getAssociatedTokenAddress, TOKEN_PROGRAM_ID, ASSOCIATED_TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { Wallet } from '@coral-xyz/anchor';\nimport fetch from 'cross-fetch';\n```\n\n----------------------------------------\n\nTITLE: View Open Orders Example Response\nDESCRIPTION: Sample response showing active limit orders for a wallet, including order details like amounts, mints and timestamps\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/3-limit-order/2-limit-order-api.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"account\": {\n      \"borrowMakingAmount\": \"0\",\n      \"createdAt\": \"2024-10-22T11:49:27.000Z\",\n      \"expiredAt\": null,\n      \"makingAmount\": \"50000000\",\n      \"oriMakingAmount\": \"50000000\",\n      \"oriTakingAmount\": \"100000000\",\n      \"takingAmount\": \"100000000\",\n      \"uniqueId\": \"3697202764802760127\",\n      \"updatedAt\": \"1729597767\",\n      \"feeAccount\": \"APWoLnZc8g8iXLA8qLdHJ4w42ybRrq2Vm8UGQhH7TJ3r\",\n      \"inputMint\": \"So11111111111111111111111111111111111111112\",\n      \"inputMintReserve\": \"4Q4Qv1KT1qrpHPydQcoPVoCD9FuCCPPbD211CTW43RVF\",\n      \"inputTokenProgram\": \"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\",\n      \"maker\": \"jdocuPgEAjMfihABsPgKEvYtsmMzjUHeq9LX4Hvs7f3\",\n      \"outputMint\": \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\",\n      \"outputTokenProgram\": \"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\",\n      \"feeBps\": 10,\n      \"bump\": 255\n    },\n    \"publicKey\": \"9vWTg8y4UvrLM49rqvJ2mtmpxicPytNs7FD78352g9Kr\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Success Response Schema for Execute Transaction API\nDESCRIPTION: JSON schema defining the successful response structure including transaction status, signature, slot details, and swap event information.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/api/ultra-api/execute.api.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"Success\",\n  \"signature\": \"string\",\n  \"slot\": \"string\",\n  \"error\": \"string\",\n  \"code\": 0,\n  \"inputAmountResult\": \"string\",\n  \"outputAmountResult\": \"string\",\n  \"swapEvents\": [\n    {\n      \"inputMint\": \"string\",\n      \"inputAmount\": \"string\", \n      \"outputMint\": \"string\",\n      \"outputAmount\": \"string\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Open Orders with Jupiter Limit Order API\nDESCRIPTION: Demonstrates how to query open orders using the Jupiter Limit Order API. The endpoint accepts optional parameters for wallet address, input mint, and output mint tokens.\nSOURCE: https://github.com/jup-ag/docs/blob/main/Moved/1-limit-order-api.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET \"https://jup.ag/api/limit/v1/openorders?wallet=TVeKgyTMp3DjwVFRYC9mYcRStRnbRsFExrZDFCKrXnT&inputMint=So11111111111111111111111111111111111111112&outputMint=WENWENvqqNya429ubCdR81ZmD69brwQaaBYY6p3LCpk\"\n```\n\n----------------------------------------\n\nTITLE: Defining Success Response Schema for Cancel Order Request\nDESCRIPTION: JSON schema for the successful response when requesting to cancel a trigger order. It includes a request ID and the base64-encoded unsigned transaction.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/api/trigger-api/cancel-order.api.mdx#2025-04-16_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"requestId\": {\n      \"type\": \"string\",\n      \"description\": \"Required to make a request to `/execute`\"\n    },\n    \"transaction\": {\n      \"type\": \"string\",\n      \"description\": \"Unsigned base-64 encoded transaction\"\n    }\n  },\n  \"required\": [\"requestId\", \"transaction\"],\n  \"example\": {\n    \"requestId\": \"f7d5dd40-a416-4dae-8367-7dc10cab6554\",\n    \"transaction\": \"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAkOCWPK8t5w2W1nIsonBw2T/TCNCKkrgBQia9/YVlLEcjM9zTXA2aZIqK0k40U/eCZ0Zu1176lxIuHLsY6UyQjTdash6wigo20Auc3RVYRWME9FjnpbdgdRKYjLJLe0lVi47IZO5XCZ/U0AirZsOIWLoumtNiLomxcYL6d2R2rSxzkNgnQl2IV0spQPT+7K7zraa8oytEZyZ4HSFpxmV2v3WgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEImJzcxhjwZ2dKxnfimarbEo/iDZzNgo5QjJ8b+bMOuSf2yH7EMQBZfZLsgOHg/C5SyLv/x1D4MHZgRX7jOy4YyXJY9OJInxuz0QKRSODYMLWhOZ2v8QhASOe9jb6fhZAwZGb+UhFzL/7K26csOb57yM5bvF9xJrLEObOkAAAADG+nrzvtutOj1l82qryXQxsbvkwtL24OR8pgIDRS9dYQrDSpbBZnFaYMEjPsolig3zCx7IWOB0XHNqEmJmY0siBpuIV/6rgYT7aH9jRhjANdrEOdwa6ztVmKDwAAAAAAEG3fbh12Whk9nL4UbO63msHLSF7V9bN5E6jPWFfv8AqXeleaIpvDk6bHUITYxyjNU3ParFA70LbecfV6NupbbBCAkABQKgAwIACQAJAy48AAAAAAAACAYABAAMBQ0BAQUCAAQMAgAAAIDw+gIAAAAADQEEAREIBgABAAoFDQEBCw8AAAIDBAYLDAoNDQUIBwsihW5Kr3Cf9Z9OyUY1qj0LZYDw+gIAAAAAAOH1BQAAAAAAAA0DBAAAAQk=\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Solana Connection\nDESCRIPTION: Importing required libraries and establishing connection to Solana network through RPC endpoint\nSOURCE: https://github.com/jup-ag/docs/blob/main/Moved/1-limit-order-api.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Connection, Keypair, Transaction } from \"@solana/web3.js\";\nimport fetch from \"cross-fetch\";\nimport { Wallet } from \"@project-serum/anchor\";\nimport bs58 from \"bs58\";\n\n// This RPC endpoint is only for demonstration purposes so it may not work.\nconst connection = new Connection(\n  \"https://neat-hidden-sanctuary.solana-mainnet.discover.quiknode.pro/2af5315d336f9ae920028bbb90a73b724dc1bbed/\"\n);\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Types for Jupiter Limit Order API\nDESCRIPTION: TypeScript type definitions for the request body and response when interacting with the Jupiter Limit Order API for creating orders.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/3-limit-order/1-limit-order.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype CreateOrder = {\n  inputMint: string;\n  outputMint: string;\n  maker: string;\n  payer: string;\n  params: {\n    makingAmount: string;\n    takingAmount: string;\n    expiredAt?: string;\n    feeBps?: string;\n  };\n  computeUnitPrice: string | \"auto\";\n  referral?: string;\n  inputTokenProgram?: string;\n  outputTokenProgram?: string;\n  wrapAndUnwrapSol?: boolean;\n};\n\ntype CreateOrderResponse = {\n  order: string;\n  tx: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Locking Plans for DCA Campaigns in JavaScript\nDESCRIPTION: This code snippet defines constants and an array of locking plans for DCA campaigns. It specifies time intervals, incentive percentages, and trade frequencies for different plans.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/4-dca/3-lock-dca-campaign.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const SECONDS_IN_MINUTE = 60; // 1 minute\nexport const SECONDS_IN_DAY = 86400; // 1 day\nexport const LOCKING_PLAN: ILockingPlan[] = [\n  {\n    name: `5 minutes`,\n    incetivesPct: 0,\n    cycleSecondsApart: SECONDS_IN_MINUTE, // executed per minute\n    numberOfTrade: 5,\n  },\n  {\n    name: `60 days`,\n    incetivesPct: 20,\n    cycleSecondsApart: SECONDS_IN_DAY,\n    numberOfTrade: 60, // executed daily\n  },\n  {\n    name: `90 days`,\n    incetivesPct: 30,\n    cycleSecondsApart: SECONDS_IN_DAY,\n    numberOfTrade: 90, // executed daily\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Jupiter Quote API Error Response\nDESCRIPTION: Example error response structure from the Jupiter Quote API showing the standard error format.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/2-apis/2-payments-api.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"errorCode\": \"string\",\n    \"error\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Cancel Multiple Orders Response Format\nDESCRIPTION: Example of a successful response from the cancelOrders endpoint. The response includes an array of transaction blobs (batched in groups of 5 orders) that need to be signed and sent to the network, and a requestId for tracking.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/102-trigger-api/3-cancel-order.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"transactions\": [\n    \"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA......DHfhA0JAAAJBQ0ODwsNCF+B7fAIMd+EDQkAAAMCDQ4PCw0IX4Ht8Agx34Q=\",\n    \"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA......a8lAwQABQLAqAAABAAJAy48AAAAAAAABQkAAAIBBQYHAwUIX4Ht8Agx34Q=\"\n  ],\n  \"requestId\": \"370100dd-1a85-421b-9278-27f0961ae5f4\",\n}\n```\n\n----------------------------------------\n\nTITLE: Successful Price Deposit Response Example\nDESCRIPTION: Example of a successful response from the price deposit endpoint, containing a requestId and encoded transaction data that needs to be signed and executed.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/103-recurring-api/4-deposit-price-order.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"requestId\": \"cbc021a6-8a61-49cd-8c5a-9ea29fc2dd4d\",\n  \"transaction\": \"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAcLRL7cu4ZNuxh1wI9W7GVURyr3A06dH348HDpIQzcAJ4ou00rM6bvrYH/o3YhDOZ97jIgg/zdwEtLlVk6ddEK3BXdUeDGIufeWFDvFYjcKVm9e/kPQ8ZFXM+X1qUqo7Q8ozVCa3wbmwfzRz1Av5JAlFtGgdIbvPspoQDO0MABdFvQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMGRm/lIRcy/+ytunLDm+e8jOW7xfcSayxDmzpAAAAABt324ddloZPZy+FGzut5rBy0he1fWzeROoz1hX7/AKkHNtIX+MwRgQakd3fYovqoEXuKqaHTmdCmjuWoQiMib4yXJY9OJInxuz0QKRSODYMLWhOZ2v8QhASOe9jb6fhZxvp6877brTo9ZfNqq8l0MbG75MLS9uDkfKYCA0UvXWHbZsKfr6NrDjI7Q7M2CqAquH41g9AMbtaLYPfmHMqbN3la+2QyLhVSaIunpVo3X8k4VAEj0cBT/ANSk2IKq9g1BAUABQL3nQAABQAJA0ANAwAAAAAACAYAAgAJBAYBAQcIAAMJAQIGCgcQ8iPGiVLh8rZAQg8AAAAAAA==\"\n}\n```\n\n----------------------------------------\n\nTITLE: Jupiter Quote API Success Response\nDESCRIPTION: Example response from the Quote API showing the swap route plan, amounts, and pricing details for converting mSOL to USDC through multiple liquidity pools.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/2-apis/2-payments-api.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"inputMint\": \"mSoLzYCxHdYgdzU16g5QSh3i5K3z3KZK7ytfqcJm7So\",\n    \"inAmount\": \"23698263\",\n    \"outputMint\": \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\",\n    \"outAmount\": \"5000000\",\n    \"otherAmountThreshold\": \"23816755\",\n    \"swapMode\": \"ExactOut\",\n    \"slippageBps\": 50,\n    \"platformFee\": null,\n    \"priceImpactPct\": \"0\",\n    \"routePlan\": [\n        {\n            \"swapInfo\": {\n                \"ammKey\": \"8EzbUfvcRT1Q6RL462ekGkgqbxsPmwC5FMLQZhSPMjJ3\",\n                \"label\": \"Raydium CLMM\",\n                \"inputMint\": \"mSoLzYCxHdYgdzU16g5QSh3i5K3z3KZK7ytfqcJm7So\",\n                \"outputMint\": \"So11111111111111111111111111111111111111112\",\n                \"inAmount\": \"23698263\",\n                \"outAmount\": \"28158132\",\n                \"feeAmount\": \"1992\",\n                \"feeMint\": \"mSoLzYCxHdYgdzU16g5QSh3i5K3z3KZK7ytfqcJm7So\"\n            },\n            \"percent\": 100\n        },\n        {\n            \"swapInfo\": {\n                \"ammKey\": \"CSP4RmB6kBHkKGkyTnzt9zYYXDA8SbZ5Do5WfZcjqjE4\",\n                \"label\": \"Whirlpool\",\n                \"inputMint\": \"So11111111111111111111111111111111111111112\",\n                \"outputMint\": \"hntyVP6YFm1Hg25TN9WGLqM12b8TQmcknKrdu1oxWux\",\n                \"inAmount\": \"28158132\",\n                \"outAmount\": \"100994175\",\n                \"feeAmount\": \"1\",\n                \"feeMint\": \"So11111111111111111111111111111111111111112\"\n            },\n            \"percent\": 100\n        },\n        {\n            \"swapInfo\": {\n                \"ammKey\": \"5LnAsMfjG32kdUauAzEuzANT6YmM3TSRpL1rWsCUDKus\",\n                \"label\": \"Whirlpool\",\n                \"inputMint\": \"hntyVP6YFm1Hg25TN9WGLqM12b8TQmcknKrdu1oxWux\",\n                \"outputMint\": \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\",\n                \"inAmount\": \"100994175\",\n                \"outAmount\": \"5000000\",\n                \"feeAmount\": \"131292\",\n                \"feeMint\": \"hntyVP6YFm1Hg25TN9WGLqM12b8TQmcknKrdu1oxWux\"\n            },\n            \"percent\": 100\n        }\n    ],\n    \"contextSlot\": 267155237,\n    \"timeTaken\": 0.010184745\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Jupiter CPI Dependency in Cargo.toml\nDESCRIPTION: This snippet shows how to add the Jupiter CPI crate as a dependency in the Cargo.toml file. It specifies the git repository and commit hash to use for the dependency.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/2-apis/7-cpi.md#2025-04-16_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\njupiter-cpi = { git = \"https://github.com/jup-ag/jupiter-cpi\", rev = \"5eb8977\" }\n... other dependencies\n```\n\n----------------------------------------\n\nTITLE: Initializing Wallet\nDESCRIPTION: Creating a wallet instance using private key (for testing purposes)\nSOURCE: https://github.com/jup-ag/docs/blob/main/Moved/1-limit-order-api.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst wallet = new Wallet(\n  Keypair.fromSecretKey(bs58.decode(process.env.PRIVATE_KEY || \"\"))\n);\n```\n\n----------------------------------------\n\nTITLE: RFQ Token Response Schema\nDESCRIPTION: Example JSON response format for the /tokens endpoint that advertises supported tokens. The response should be an array of token addresses.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/600-routing/rfq-integration.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\"tokenAddress1\", \"tokenAddress2\", \"tokenAddress3\"]\n```\n\n----------------------------------------\n\nTITLE: Cancel Order Failed Response Format\nDESCRIPTION: Example of a failed response from the cancelOrder endpoint. The response includes an error message and an HTTP status code indicating the nature of the failure.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/102-trigger-api/3-cancel-order.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"error\": \"no matching orders found\",\n  \"code\": 400\n}\n```\n\n----------------------------------------\n\nTITLE: Making a Price Withdraw Request in JavaScript\nDESCRIPTION: This code demonstrates how to make a POST request to the Jupiter API's priceWithdraw endpoint. It constructs a request to withdraw a specific amount from a price-based order, requiring the order ID, user wallet public key, input/output specification, and optional withdrawal amount.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/103-recurring-api/5-withdraw-price-order.md#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst priceWithdrawResponse = await (\n    await fetch('https://lite-api.jup.ag/recurring/v1/priceWithdraw', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n            order: \"EpTsCUnKComCd8FDNZn3kVrQBQo2uEn5rRzYk9ocqFPH\",\n            user: wallet.publicKey.toBase58(),\n            inputOrOutput: \"In\", // either \"In\" or \"Out\" mint, note that price-based orders auto withdraws the output tokens to the user's wallet every time the order is executed\n            amount: 1000000\n        }),\n    })\n).json();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Trigger Order History with Jupiter API\nDESCRIPTION: Shows how to fetch historical trigger orders for a specific user using the getTriggerOrders endpoint with the history status parameter.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/102-trigger-api/4-get-trigger-orders.md#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst orderHistoryResponse = await (\n    await fetch(\n        'https://lite-api.jup.ag/trigger/v1/getTriggerOrders?user=ErJKdNoarixqGGQTHbBtvHtg2nkcCqcKtYjGbVKUxY7D&orderStatus=history'\n    )\n).json();\n```\n\n----------------------------------------\n\nTITLE: Calculating Base Fee for Opening/Closing Positions in Jupiter Perpetuals\nDESCRIPTION: This snippet demonstrates how to calculate the base fee for opening or closing a position in Jupiter Perpetuals. It uses the base fee rate from the JLP pool account and applies it to the trade size.\nSOURCE: https://github.com/jup-ag/docs/blob/main/guides/8-perpetual-exchange/2-how-it-works.md#2025-04-16_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nBPS_POWER = 10^4      // 10_000\n\n// 1. Get the base fee (BPS) from the JLP pool account's `fees.increasePositionBps` for open position requests\n// or `fees.decreasePositionBps` for close position requests\n// https://station.jup.ag/guides/perpetual-exchange/onchain-accounts#pool-account\n   baseFeeBps = pool.fees.increasePositionBps\n\n// 2. Convert `baseFeeBps` to decimals\n   baseFeeBpsDecimals = baseFeeBps / BPS_POWER\n\n// 3. Calculate the final open / close fee in USD by multiplying `baseFeeBpsDecimals` against the trade size\n   openCloseFeeUsd = tradeSizeUsd * baseFeeBpsDecimals\n```\n\n----------------------------------------\n\nTITLE: Querying Jupiter Price API with cURL (Shell)\nDESCRIPTION: This snippet demonstrates how to make a GET request to the Jupiter Price API v2 using cURL. It includes a sample query for token prices with extra information.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/2-apis/5-price-api-v2.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X 'GET' 'https://api.jup.ag/price/v2?ids=So11111111111111111111111111111111111111112&showExtraInfo=true'\n```\n\n----------------------------------------\n\nTITLE: Successful Order Execution Response\nDESCRIPTION: Example JSON response for a successful order execution, showing the transaction signature, success status, order ID, and null error field.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/103-recurring-api/2-execute-order.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"signature\": \"M1uvubYaR8PtzcjeL9mCkVgmxamJK6wYqqVM7MTuX6djL79QpJD54U5hLqL3v97TiT7j7de3nYZLLKteCQYpe4x\",\n  \"status\": \"Success\",\n  \"order\": \"4DWzP4TdTsuwvYMaMWrRqzya4UTFKFoVjfUWNWh8zhzd\",\n  \"error\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Bad Request Error Response (JSON)\nDESCRIPTION: JSON error response for an invalid request body, such as an invalid maker public key.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/api/trigger-api/cancel-orders.api.mdx#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"error\": \"invalid maker pubkey\",\n  \"code\": 400\n}\n```\n\n----------------------------------------\n\nTITLE: Successful Price Withdraw Response Format\nDESCRIPTION: This JSON example shows a successful response from the priceWithdraw endpoint. The response includes a requestId for tracking and a transaction string that contains the serialized transaction that needs to be signed and executed.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/103-recurring-api/5-withdraw-price-order.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"requestId\": \"cb1c0e03-8e4a-4f85-ac36-e353c7981f5b\",\n  \"transaction\": \"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAcNRL7cu4ZNuxh1wI9W7GVURyr3A06dH348HDpIQzcAJ4oHNtIX+MwRgQakd3fYovqoEXuKqaHTmdCmjuWoQiMiby7TSszpu+tgf+jdiEM5n3uMiCD/N3AS0uVWTp10QrcFd1R4MYi595YUO8ViNwpWb17+Q9DxkVcz5fWpSqjtDyjKhKdx27tkl2VPxhBBJcKx9gSuUqMJnrF2JWtuKPpRPM1Qmt8G5sH80c9QL+SQJRbRoHSG7z7KaEAztDAAXRb0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADBkZv5SEXMv/srbpyw5vnvIzlu8X3EmssQ5s6QAAAAAabiFf+q4GE+2h/Y0YYwDXaxDncGus7VZig8AAAAAABBt324ddloZPZy+FGzut5rBy0he1fWzeROoz1hX7/AKmMlyWPTiSJ8bs9ECkUjg2DC1oTmdr/EIQEjnvY2+n4Wcb6evO+2606PWXzaqvJdDGxu+TC0vbg5HymAgNFL11h22bCn6+jaw4yO0OzNgqgKrh+NYPQDG7Wi2D35hzKmzcjGx2VRtfxzpYauPv7ArfDDH2VHlwLKs45O0rZTboL4wMHAAUCnqwAAAcACQNADQMAAAAAAAEOAAAFCwgCAwEEBgkKDAEStxJGnJRtoSIBQEIPAAAAAAAA\"\n}\n```\n\n----------------------------------------\n\nTITLE: Failed Order Execution Response in JSON\nDESCRIPTION: This JSON snippet demonstrates an example of a failed order execution response from the Jupiter Trigger API. It includes an error message, error code, transaction signature, and a failed status.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/102-trigger-api/2-execute-order.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"error\": \"custom program error code: 1\",\n  \"code\": 500,\n  \"signature\": \"...\",\n  \"status\": \"Failed\"\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Individual Revenue Share for JLP\nDESCRIPTION: This calculation shows how to determine an individual's generated revenue share based on their pool percentage and the total revenue shared.\nSOURCE: https://github.com/jup-ag/docs/blob/main/Moved/2-perpetual-exchange/3-jlp-pool.md#2025-04-16_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nrevenue share you generate = $35,000 x 0.025% = $8.75\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies\nDESCRIPTION: Installation commands for required Node.js packages including Solana web3, cross-fetch, anchor, and bs58\nSOURCE: https://github.com/jup-ag/docs/blob/main/Moved/1-limit-order-api.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @solana/web3.js@1\nnpm i cross-fetch\nnpm i @project-serum/anchor\nnpm i bs58\n```\n\n----------------------------------------\n\nTITLE: Error Response Schema in JSON\nDESCRIPTION: JSON schema for error responses when executing a transaction. It includes error details, status code, and potentially a transaction signature if one was generated.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/api/trigger-api/execute.api.mdx#2025-04-16_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"error\": {\n      \"type\": \"string\"\n    },\n    \"code\": {\n      \"type\": \"number\"\n    },\n    \"cause\": {\n      \"type\": \"string\"\n    },\n    \"signature\": {\n      \"type\": \"string\",\n      \"description\": \"Signature of the transaction, if generated\",\n      \"example\": \"38CtpugRBobyj1JMkHj9umQyj1D8q6bs1jcMRcw7Fiyp4BXv4uh4bD4TyJs6fsqYCDDfQpeRewA7HjLA1Eprc8uR\\n\"\n    },\n    \"status\": {\n      \"type\": \"string\",\n      \"enum\": [\"Failed\"]\n    }\n  },\n  \"required\": [\"error\", \"code\"]\n}\n```\n\n----------------------------------------\n\nTITLE: DCA Order Execution Example in Markdown\nDESCRIPTION: Example demonstrating how DCA orders are executed with $900 USDC to SOL over 3 days, including fee calculations and token distribution mechanics\nSOURCE: https://github.com/jup-ag/docs/blob/main/guides/2-spot/4-dca/2-how-dca-work.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nIf you choose to DCA into SOL with $900 USDC over 3 days\n- Your first transaction to swap from $300 USDC for SOL will take place immediately\n- Your second transaction to swap the next $300 USDC for SOL will take place ~24 hours later\n- Your third transaction to swap the remaining $300 USDC for SOL will take place ~24 hours after the second order\n```\n\n----------------------------------------\n\nTITLE: Execute Request Body Schema in JSON\nDESCRIPTION: JSON schema for the request body when executing a signed transaction. It requires a requestId from a previous create or cancel order request, and the signed transaction to execute.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/api/trigger-api/execute.api.mdx#2025-04-16_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"requestId\": {\n      \"type\": \"string\",\n      \"description\": \"Found in the response of `/createOrder` or `/cancelOrder`\"\n    },\n    \"signedTransaction\": {\n      \"type\": \"string\",\n      \"description\": \"The signed transaction to execute\"\n    }\n  },\n  \"required\": [\"requestId\", \"signedTransaction\"],\n  \"title\": \"executeRequestBody\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Jupiter Quote API for Token Swap\nDESCRIPTION: Example of getting a quote for swapping mSOL to exactly 5 USDC using Jupiter's Quote API. The request includes parameters for input/output tokens, amount, swap mode, and slippage tolerance.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/2-apis/2-payments-api.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -s 'https://quote-api.jup.ag/v6/quote?inputMint=mSoLzYCxHdYgdzU16g5QSh3i5K3z3KZK7ytfqcJm7So&outputMint=EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v&amount=5000000&swapMode=ExactOut&slippageBps=50' | jq '.inAmount, .otherAmountThreshold'\n```\n\n----------------------------------------\n\nTITLE: Creating Swap Transaction with Jupiter API\nDESCRIPTION: Shows how to create a swap transaction with optimized settings including dynamic compute unit limit, dynamic slippage, and priority fee configuration for better success rate.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/2-apis/11-landing-transactions.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { swapTransaction } = await (\n  await fetch('https://quote-api.jup.ag/v6/swap', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      quoteResponse,\n      userPublicKey: wallet.publicKey.toString(),\n      dynamicComputeUnitLimit: true,\n      dynamicSlippage: {\n        maxBps: 300\n      },\n      prioritizationFeeLamports: {\n        priorityLevelWithMaxLamports: {\n          maxLamports: 10000000,\n          priorityLevel: \"veryHigh\"\n        }\n      }\n    })\n  })\n).json();\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Address Lookup Tables\nDESCRIPTION: Example of how to append custom Address Lookup Tables to the existing table accounts.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/8-additional-topics/1-composing-with-versioned-transaction.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// ...\naddressLookupTableAccounts.push(yourAddressLookupTableAccounts)\n// ...\n```\n\n----------------------------------------\n\nTITLE: Token Response Schema\nDESCRIPTION: JSON schema definition for the response returned by the /new endpoint. Defines the structure of token metadata including mint address, creation time, name, symbol, decimals and known markets.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/api/token-api/new.api.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"array\",\n  \"items\": {\n    \"type\": \"object\",\n    \"required\": [\n      \"mint\",\n      \"created_at\", \n      \"metadata_updated_at\",\n      \"name\",\n      \"symbol\",\n      \"decimals\",\n      \"known_markets\"\n    ],\n    \"properties\": {\n      \"created_at\": {\n        \"type\": \"string\",\n        \"format\": \"date-time\"\n      },\n      \"decimals\": {\n        \"type\": \"integer\",\n        \"format\": \"int32\"\n      },\n      \"freeze_authority\": {\n        \"type\": [\"string\", \"null\"]\n      },\n      \"known_markets\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"string\"\n        }\n      },\n      \"logo_uri\": {\n        \"type\": [\"string\", \"null\"]\n      },\n      \"metadata_updated_at\": {\n        \"type\": \"string\",\n        \"format\": \"date-time\"\n      },\n      \"mint\": {\n        \"type\": \"string\"\n      },\n      \"mint_authority\": {\n        \"type\": [\"string\", \"null\"]\n      },\n      \"name\": {\n        \"type\": \"string\"\n      },\n      \"symbol\": {\n        \"type\": \"string\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Jupiter Limit Order SDK in JavaScript\nDESCRIPTION: Import statement to include the LimitOrderProvider from the Jupiter Limit Order SDK in a JavaScript file.\nSOURCE: https://github.com/jup-ag/docs/blob/main/Moved/2-limit-order-with-sdk.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { LimitOrderProvider } from \"@jup-ag/limit-order-sdk\";\n```\n\n----------------------------------------\n\nTITLE: Failed Price Withdraw Response Format\nDESCRIPTION: This JSON example demonstrates an error response from the priceWithdraw endpoint. It includes an error code, descriptive error message, and HTTP status, which helps in troubleshooting issues with the request.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/103-recurring-api/5-withdraw-price-order.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"code\": 400,\n  \"error\": \"Failed to deserialize account data: failed to fill whole buffer\",\n  \"status\": \"Bad Request\"\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Active Trigger Orders with Jupiter API\nDESCRIPTION: Demonstrates how to retrieve active trigger orders for a specific user using the getTriggerOrders endpoint. The request accepts optional parameters for filtering by input and output token mint addresses.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/102-trigger-api/4-get-trigger-orders.md#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst openOrdersResponse = await (\n    await fetch(\n        'https://lite-api.jup.ag/trigger/v1/getTriggerOrders?user=jdocuPgEAjMfihABsPgKEvYtsmMzjUHeq9LX4Hvs7f3&orderStatus=active'\n    )\n).json();\n```\n\n----------------------------------------\n\nTITLE: Cancel Limit Orders Example Response\nDESCRIPTION: Sample response showing the unsigned transactions needed to cancel limit orders\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/3-limit-order/2-limit-order-api.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"txs\": [\n    \"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAQAFCAljyvLecNltZyLKJwcNk/0wjQipK4AUImvf2FZSxHIzhJKWtj2HSC7RNPJa8OnDC9WWH6trCbp1C6qA4BUMaQ0ye0cXKemx6Yc1OP5dEP1Nac45/1jWuZvS7iawRDbqZgMGRm/lIRcy/+ytunLDm+e8jOW7xfcSayxDmzpAAAAACsNKlsFmcVpgwSM+yiWKDfMLHshY4HRcc2oSYmZjSyIGm4hX/quBhPtof2NGGMA12sQ53BrrO1WYoPAAAAAAAQbd9uHXZaGT2cvhRs7reawctIXtX1s3kTqM9YV+/wCpkn9sh+xDEAWX2S7IDh4PwuUsi7/8dQ+DB2YEV+4zsuG+7bRt16L/qXhIqNGmwpgUHcNL0fQRKYOGfN2TfXujaQMDAAUCoIwAAAMACQMIQAkAAAAAAAQJAAABAgQFBgcECF+B7fAIMd+EAA==\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Tokens by Tag with GET Request in JSON\nDESCRIPTION: Example of using the API to retrieve tokens by tag, demonstrating both single and multiple tag usage.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/7-token-list/1-token-list-api.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\nUsage: You can pass in a single tag or multiple:\\n\\n- Single tag: https://tokens.jup.ag/tokens?tags=verified\\n- Multiple tags: https://tokens.jup.ag/tokens?tags=lst,community\n```\n\n----------------------------------------\n\nTITLE: Error Response from Jupiter Price API (JSON)\nDESCRIPTION: This snippet illustrates a potential error response from the Jupiter Price API v2. It shows a scenario where one token's price is available, but another token's price is null, possibly due to unavailability or limitations.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/2-apis/5-price-api-v2.md#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": {\n        \"So11111111111111111111111111111111111111112\": {\n            \"id\": \"So11111111111111111111111111111111111111112\",\n            \"type\": \"derivedPrice\",\n            \"price\": \"134.170633378\"\n        },\n        \"8agCopCHWdpj7mHk3JUWrzt8pHAxMiPX5hLVDJh9TXWv\": null\n    },\n    \"timeTaken\": 0.003186833\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Error Response Schema for Cancel Order Request\nDESCRIPTION: JSON schema for error responses when requesting to cancel a trigger order. It includes error details, status code, and optional signature information.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/api/trigger-api/cancel-order.api.mdx#2025-04-16_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"error\": {\n      \"type\": \"string\"\n    },\n    \"code\": {\n      \"type\": \"number\"\n    },\n    \"cause\": {\n      \"type\": \"string\"\n    },\n    \"signature\": {\n      \"type\": \"string\",\n      \"description\": \"Signature of the transaction, if generated\",\n      \"example\": \"38CtpugRBobyj1JMkHj9umQyj1D8q6bs1jcMRcw7Fiyp4BXv4uh4bD4TyJs6fsqYCDDfQpeRewA7HjLA1Eprc8uR\"\n    },\n    \"status\": {\n      \"type\": \"string\",\n      \"enum\": [\"Failed\"]\n    }\n  },\n  \"required\": [\"error\", \"code\"],\n  \"example\": {\n    \"error\": \"invalid maker pubkey\",\n    \"code\": 400\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: DCA Fee Calculation Example in Markdown\nDESCRIPTION: Example showing how the 0.1% platform fee is calculated and applied to DCA transactions\nSOURCE: https://github.com/jup-ag/docs/blob/main/guides/2-spot/4-dca/2-how-dca-work.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- For the first order, instead of receiving 15 SOL, 15 * (100 - 0.1) % = 14.985 SOL\n- For the second order, 12 * (100 - 0.1) % = 11.988 SOL\n```\n\n----------------------------------------\n\nTITLE: Error Response Format\nDESCRIPTION: Shows the JSON structure of an error response when the request fails, such as when an invalid address is provided.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/101-ultra-api/3-get-balances.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"error\": \"Invalid address\"\n}\n```\n\n----------------------------------------\n\nTITLE: Create Recurring Order Response Schema\nDESCRIPTION: JSON schema defining the successful response structure containing the requestId needed for execution and the unsigned base64 encoded transaction.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/api/recurring-api/create-order.api.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"requestId\": \"string\",\n  \"transaction\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Raw Transaction with Retries in JavaScript\nDESCRIPTION: This code snippet shows how to send a raw transaction using the Solana connection object. It sets the skipPreflight option to true and specifies a maximum number of retries to increase the chances of successful transaction execution.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/2-apis/10-troubleshooting.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst txid = await connection.sendRawTransaction(rawTransaction, {\n  skipPreflight: true,\n  maxRetries: 2\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Mints in Market API Endpoint (JSON)\nDESCRIPTION: Defines the API endpoint for retrieving mints in a market. The endpoint accepts a market address as a path parameter and returns an array of mint addresses. This is part of the Token API for querying market-related information.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/api/token-api/mints-in-market.api.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"get\": \"/market/{market_address}/mints\",\n  \"parameters\": [\n    {\n      \"name\": \"address\",\n      \"in\": \"path\",\n      \"description\": \"A market/pool address\",\n      \"required\": true,\n      \"schema\": {\n        \"type\": \"string\"\n      },\n      \"example\": \"BVRbyLjjfSBcoyiYFuxbgKYnWuiFaF9CSXEa5vdSZ9Hh\"\n    }\n  ],\n  \"responses\": {\n    \"200\": {\n      \"description\": \"Returns the mints involved in a market\",\n      \"content\": {\n        \"application/json\": {\n          \"schema\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Response Headers Schema\nDESCRIPTION: Headers included in the RFQ request for timeout and request timing tracking.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/600-routing/rfq-integration.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"x-request-start\": \"timestamp in milliseconds\",\n  \"x-request-timeout\": \"250\"\n}\n```\n\n----------------------------------------\n\nTITLE: APR Calculation Logic\nDESCRIPTION: Algorithm for calculating the Annual Percentage Rate (APR) for the JLP pool on a weekly basis\nSOURCE: https://github.com/jup-ag/docs/blob/main/guides/7-jlp/2-How-JLP-Works.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nif current_time > (last_updated_time + 1_WEEK):\n    time_diff = current_time - last_updated_time\n    // 10_000 represents the scaling factor used to calculate the BPS for the pool's APR\n    apr_bps = (realized_fee_usd * YEAR_IN_SECONDS * 10_000) / (pool_amount_usd * time_diff)\n```\n\n----------------------------------------\n\nTITLE: Price-Based Recurring Order Withdrawal Response (JSON)\nDESCRIPTION: JSON response body returned by the POST /priceWithdraw endpoint. Contains a requestId for use with the /execute endpoint and the unsigned base64-encoded transaction.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/api/recurring-api/price-withdraw.api.mdx#2025-04-16_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"requestId\": \"string\",\n  \"transaction\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Total Revenue for JLP Pool Holders\nDESCRIPTION: This calculation demonstrates how to estimate the total revenue shared among JLP pool holders based on daily volume, fee percentage, and revenue share percentage.\nSOURCE: https://github.com/jup-ag/docs/blob/main/Moved/2-perpetual-exchange/3-jlp-pool.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n$50M x 0.1% x 70% = $35,000\n```\n\n----------------------------------------\n\nTITLE: Including Jupiter Terminal Script in HTML\nDESCRIPTION: This snippet shows how to include the Jupiter Terminal script in the HTML file. It's added to the src/pages/_document.tsx file in the example.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/5-jupiter-terminal/2-terminal-integration-guide.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://terminal.jup.ag/main-v1.js\" data-preload />\n```\n\n----------------------------------------\n\nTITLE: Signing Transaction\nDESCRIPTION: Deserializing and signing the transaction with required keys\nSOURCE: https://github.com/jup-ag/docs/blob/main/Moved/1-limit-order-api.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// deserialize the transaction\nconst transactionBuf = Buffer.from(tx, \"base64\");\nvar transaction = Transaction.deserialize(transactionBuf);\n\n// sign the transaction using the required key\n// for create order, wallet and base key are required.\ntransaction.sign([wallet.payer, base]);\n```\n\n----------------------------------------\n\nTITLE: Fee Configuration Setup\nDESCRIPTION: Example of setting up platform fees with Jupiter Terminal using getPlatformFeeAccounts.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/5-jupiter-terminal/1-jupiter-terminal.md#2025-04-16_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getPlatformFeeAccounts } from '@jup-ag/react-hook';\n\nconst platformFeeAndAccounts = {\n  feeBps: 50,\n  feeAccounts: await getPlatformFeeAccounts(\n    connection,\n    new PublicKey('BUX7s2ef2htTGb2KKoPHWkmzxPj4nTWMWRgs5CSbQxf9'), // The platform fee account owner\n  ), // map of mint to token account pubkey\n};\n\nwindow.Jupiter.init({\n  // ...\n  platformFeeAndAccounts,\n});\n```\n\n----------------------------------------\n\nTITLE: JSON Structure Example for USDCet Token in Jupiter Token List API\nDESCRIPTION: An example of how tokens are structured in the Jupiter Token List API. This snippet shows the JSON object for the USDCet token, demonstrating the format including address, chainId, decimals, name, symbol, logoURI, extensions, and tags fields that identify the token's characteristics and source.\nSOURCE: https://github.com/jup-ag/docs/blob/main/Moved/blog-v1/2023-02-10-jupiter-token-list-api/index.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    \"address\":\"A9mUU4qviSctJVPJdBJWkb28deg915LYJKrzQ19ji3FM\",\n    \"chainId\":101,\n    \"decimals\":6,\n    \"name\":\"USD Coin (Portal from Ethereum)\",\n    \"symbol\":\"USDCet\",\n    \"logoURI\":\"https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/A9mUU4qviSctJVPJdBJWkb28deg915LYJKrzQ19ji3FM/logo.png\",\n    \"extensions\":{\n        \"coingeckoId\":\"usd-coin-wormhole-from-ethereum\"\n    },\n    \"tags\":[\n        \"old-registry\",\n        \"wormhole\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Pool Share Percentage\nDESCRIPTION: Formula for determining individual share percentage in the JLP pool based on contribution amount\nSOURCE: https://github.com/jup-ag/docs/blob/main/guides/7-jlp/2-How-JLP-Works.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nyour_pool_contributed_amount / total_pool_amount x 100 = your_pool_percentage\n```\n\n----------------------------------------\n\nTITLE: Response Schema for Price Deposit Transaction\nDESCRIPTION: JSON schema defining the successful response format containing the requestId for execution and base64-encoded unsigned transaction.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/api/recurring-api/price-deposit.api.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"object\",\n  \"required\": [\"requestId\", \"transaction\"],\n  \"properties\": {\n    \"requestId\": {\n      \"type\": \"string\",\n      \"description\": \"Required to make a request to `/execute`\"\n    },\n    \"transaction\": {\n      \"type\": \"string\",\n      \"description\": \"Unsigned base-64 encoded transaction\"\n    }\n  },\n  \"title\": \"RecurringResponse\"\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Price Impact for Pool Liquidity\nDESCRIPTION: Formula used to calculate the price impact percentage for determining if a pool has sufficient liquidity. The calculation uses a benchmark position size of $500 and measures the impact after swapping in and out of the token.\nSOURCE: https://github.com/jup-ag/docs/blob/main/guides/12-general/4-get-your-token-on-jupiter.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPrice Impact = ($500 - Final USD value) / $500\n```\n\n----------------------------------------\n\nTITLE: Customizing Terminal with Tailwind CSS Classes\nDESCRIPTION: Applies Tailwind CSS classes to the Jupiter Terminal container for responsive styling. This example sets maximum height constraints for different screen sizes.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/300-tool-kits/1-swap-terminal.md#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nwindow.Jupiter.init({\n    // ...\n    containerClassName: 'max-h-[90vh] lg:max-h-[600px]',\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Libraries and Setting Up RPC Connection for Jupiter Limit Order\nDESCRIPTION: TypeScript code to import required libraries and set up the RPC connection for interacting with the Solana blockchain in the context of Jupiter Limit Order integration.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/3-limit-order/1-limit-order.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Connection,\n  Keypair,\n  SendOptions,\n  VersionedTransaction,\n} from \"@solana/web3.js\";\nimport bs58 from \"bs58\";\n\nconst RPC_URL = process.env.RPC_URL;\nif (!RPC_URL) throw \"missing RPC_URL env var\";\n\nconst RPC_CONNECTION = new Connection(RPC_URL);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Token by Mint Address Response in JSON\nDESCRIPTION: Example response when retrieving a token by its mint address, showing the structure and fields of the token data returned by the API.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/7-token-list/1-token-list-api.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"address\":\"jupSoLaHXQiZZTSfEWMTRRgpnyFm8f6sZdosWBjx93v\",\"name\":\"Jupiter Staked SOL\",\"symbol\":\"JupSOL\",\"decimals\":9,\"logoURI\":\"https://static.jup.ag/jupSOL/icon.png\",\"tags\":[\"community\",\"strict\",\"lst\"],\"daily_volume\":2228947.6686637774,\"freeze_authority\":null,\"mint_authority\":\"EMjuABxELpYWYEwjkKmQKBNCwdaFAy4QYAs6W9bDQDNw\"}\n```\n\n----------------------------------------\n\nTITLE: Calculating Hourly Borrow Fee for Jupiter Liquidity Provider Pool\nDESCRIPTION: This formula calculates the hourly borrow fee for the Jupiter Liquidity Provider Pool. It takes into account the ratio of borrowed tokens to total tokens in the pool, multiplied by 0.01% and the position size.\nSOURCE: https://github.com/jup-ag/docs/blob/main/Moved/2-perpetual-exchange/3-jlp-pool.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nhourly borrow fee = (tokens borrowed / tokens in the pool) x 0.01% x position size\n```\n\n----------------------------------------\n\nTITLE: Defining Recurring Order API Response Schema\nDESCRIPTION: Specifies the JSON schema for API responses related to recurring orders. Includes definitions for order status, pagination, user information, trade history, and detailed order properties for both time-based and price-based recurring orders.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/api/recurring-api/get-recurring-orders.api.mdx#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"400\": {\n    \"description\": \"Bad request\"\n  },\n  \"500\": {\n    \"description\": \"Internal server error\"\n  },\n  \"properties\": {\n    \"all\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"oneOf\": [\n          {\n            \"allOf\": [\n              {\n                \"type\": \"object\",\n                \"required\": [\"userPubkey\", \"orderKey\", \"inputMint\", \"outputMint\"],\n                \"properties\": {\n                  \"closeTx\": {\"type\": \"string\"},\n                  \"createdAt\": {\"type\": \"string\", \"format\": \"date-time\"},\n                  \"cycleFrequency\": {\"type\": \"string\"}\n                }\n              }\n            ]\n          }\n        ]\n      }\n    },\n    \"orderStatus\": {\n      \"type\": \"string\",\n      \"enum\": [\"active\", \"history\"]\n    },\n    \"page\": {\n      \"type\": \"integer\",\n      \"format\": \"int64\",\n      \"minimum\": 0\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Successful Response Schema in JSON\nDESCRIPTION: JSON schema for a successful response when executing a transaction. It includes the transaction signature, status, and a code.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/api/trigger-api/execute.api.mdx#2025-04-16_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"code\": {\n      \"type\": \"number\"\n    },\n    \"signature\": {\n      \"type\": \"string\",\n      \"description\": \"Signature of the successful transaction\"\n    },\n    \"status\": {\n      \"type\": \"string\",\n      \"enum\": [\"Success\", \"Failed\"]\n    }\n  },\n  \"required\": [\"signature\", \"status\", \"code\"],\n  \"example\": {\n    \"signature\": \"38CtpugRBobyj1JMkHj9umQyj1D8q6bs1jcMRcw7Fiyp4BXv4uh4bD4TyJs6fsqYCDDfQpeRewA7HjLA1Eprc8uR\\n\",\n    \"status\": \"Success\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Unified Wallet Kit for Solana\nDESCRIPTION: Command to install the Unified Wallet Kit package as a dependency in your project using npm.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/300-tool-kits/900-unified-wallet-kit.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @jup-ag/wallet-adapter\n```\n\n----------------------------------------\n\nTITLE: Installing Required Libraries for Jupiter Limit Order Integration\nDESCRIPTION: Command to install necessary npm packages for Jupiter Limit Order integration, including @solana/web3.js, bs58, and dotenv.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/3-limit-order/1-limit-order.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @solana/web3.js bs58 dotenv\n```\n\n----------------------------------------\n\nTITLE: Implementing Fee Support in Jupiter Terminal\nDESCRIPTION: Shows how to integrate platform fees with Jupiter Terminal. Integrators can add their own fees by configuring platformFeeAndAccounts in the init function.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/300-tool-kits/1-swap-terminal.md#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nwindow.Jupiter.init({\n    // ...\n    platformFeeAndAccounts,\n});\n```\n\n----------------------------------------\n\nTITLE: GET Request for All Tokens Endpoint\nDESCRIPTION: HTTP GET endpoint definition that returns a list of all tokens with complete metadata. The response includes token details like address, name, symbol, decimals, volume, authorities, and other metadata.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/api/token-api/all.api.mdx#2025-04-16_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /all\n```\n\n----------------------------------------\n\nTITLE: Creating Transfer Instruction\nDESCRIPTION: Construction of a Solana system program transfer instruction for referral fee handling.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/8-additional-topics/1-composing-with-versioned-transaction.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// construct the transfer instruction\nconst transferInstruction = SystemProgram.transfer({\n    fromPubkey: wallet.publicKey,\n    toPubkey: referralWalletPublicKey,\n    lamports: 1000,\n  }),\n```\n\n----------------------------------------\n\nTITLE: Cloning Solana Dapp Scaffold Repository\nDESCRIPTION: Command to clone the Solana Dapp Scaffold repository to your local machine or working environment, which serves as the base for integrating Jupiter Terminal.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/300-tool-kits/2-terminal-walkthrough.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/solana-labs/dapp-scaffold.git\n```\n\n----------------------------------------\n\nTITLE: Declaring TypeScript Types for Jupiter Terminal\nDESCRIPTION: Creates TypeScript declaration file to provide proper typing support for Jupiter Terminal which is only importable via CDN. This snippet shows how to declare the global Jupiter object on the window.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/300-tool-kits/1-swap-terminal.md#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\ndeclare global {\n    interface Window {\n        Jupiter: JupiterTerminal;\n    }\n}\n// ...\n// ...\n// ...\n```\n\n----------------------------------------\n\nTITLE: Defining getRecurringOrders API Request Parameters\nDESCRIPTION: JSON schema defining the request parameters for the getRecurringOrders API endpoint. Parameters include recurring type, order status, user account, pagination, and optional filters.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/api/recurring-api/get-recurring-orders.api.mdx#2025-04-16_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"name\": \"recurringType\",\n  \"in\": \"path\",\n  \"required\": true,\n  \"schema\": {\n    \"type\": \"string\",\n    \"enum\": [\"time\", \"price\", \"all\"],\n    \"title\": \"RecurringOrderType\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Wallet Attachments in React\nDESCRIPTION: Example of how to add custom UI elements to specific wallets using the walletAttachments configuration option in the Unified Wallet Kit.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/5-jupiter-terminal/3-unified-wallet-kit.md#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconfig={{\n  walletAttachments: { \n    'Phantom': {\n      attachment: <div tw=\"text-xs rounded-md bg-red-500 px-2 mx-2 text-center\">Auto Confirm</div>\n    } \n  }\n}}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Token Balances Response Schema in JSON\nDESCRIPTION: JSON schema for the successful response (200 status code) when retrieving token balances. It defines the structure of the balance information for each token, including amount, UI-friendly amount, slot, and frozen status.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/api/ultra-api/balances.api.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"object\",\n  \"additionalProperties\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"amount\": {\n        \"type\": \"string\"\n      },\n      \"uiAmount\": {\n        \"type\": \"number\"\n      },\n      \"slot\": {\n        \"type\": \"number\"\n      },\n      \"isFrozen\": {\n        \"type\": \"boolean\"\n      }\n    },\n    \"required\": [\"amount\", \"uiAmount\", \"slot\", \"isFrozen\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deserializing Jupiter Transaction\nDESCRIPTION: Convert base64 encoded transaction from Jupiter API into a versioned transaction object.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/8-additional-topics/1-composing-with-versioned-transaction.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// deserialize the transaction\nconst swapTransactionFromJupiterAPI = swapTransaction\nconst swapTransactionBuf = Buffer.from(swapTransactionFromJupiterAPI, 'base64')\nvar transaction = VersionedTransaction.deserialize(swapTransactionBuf)\n// console.log(transaction)\n```\n\n----------------------------------------\n\nTITLE: Filtering Market Cache in Shell\nDESCRIPTION: Shell commands to create a filtered market cache JSON file, excluding specific AMMs (e.g., Openbook) to reduce load when starting the API.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/2-apis/9-self-hosted.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncurl \"https://cache.jup.ag/markets?v=3\" -o market-cache.json\njq 'map(select(.owner != \"srmqPvymJeFKQ4zGQed1GFppgkRHL9kaELCbyksJtPX\"))' market-cache.json > market-cache-no-openbook.json\n```\n\n----------------------------------------\n\nTITLE: Basic HTML Integration for Jupiter Terminal\nDESCRIPTION: Basic HTML setup for integrating Jupiter Terminal with preloaded script and container initialization.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/5-jupiter-terminal/1-jupiter-terminal.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Jupiter Terminal Integration</title>\n  <!-- Preload script -->\n  <script src=\"https://terminal.jup.ag/main-v2.js\" data-preload></script>\n</head>\n<body>\n  <!-- Container for the terminal -->\n  <div id=\"jupiter-terminal\"></div>\n\n  <!-- Initialize the widget -->\n  <script>\n    window.addEventListener('DOMContentLoaded', () => {\n      window.Jupiter.init({\n        containerId: 'jupiter-terminal', // ID of the container div\n        endpoint: 'https://api.mainnet-beta.solana.com', // Solana RPC endpoint\n      });\n    });\n  </script>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Callback and Style Customization\nDESCRIPTION: Examples of implementing success/error callbacks and customizing styles for Jupiter Terminal.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/5-jupiter-terminal/1-jupiter-terminal.md#2025-04-16_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nwindow.Jupiter.init({\n  onSuccess: ({ txid, swapResult }) => {\n    console.log({ txid, swapResult });\n  },\n  onSwapError: ({ error }) => {\n    console.log('onSwapError', error);\n  },\n  containerStyles: { zIndex: 100 },\n  containerClassName: 'max-h-[90vh] lg:max-h-[600px]',\n});\n```\n\n----------------------------------------\n\nTITLE: Wallet Setup Configuration\nDESCRIPTION: Creating a wallet instance using private key for testing purposes\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/2-apis/1-swap-api.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst wallet = new Wallet(Keypair.fromSecretKey(bs58.decode(process.env.PRIVATE_KEY || '')));\n```\n\n----------------------------------------\n\nTITLE: GET Request for Tagged Tokens\nDESCRIPTION: HTTP GET endpoint for retrieving token mints filtered by one or more tags. Takes comma-separated tag list as path parameter and returns token metadata including address, name, symbol, decimals and other attributes.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/api/token-api/tagged.api.mdx#2025-04-16_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /tagged/{tag_list}\n```\n\n----------------------------------------\n\nTITLE: Basic VA User Flow Documentation in Markdown\nDESCRIPTION: Step-by-step instructions for setting up and executing a VA order on Jupiter, including wallet connection, order configuration, and monitoring process.\nSOURCE: https://github.com/jup-ag/docs/blob/main/guides/2-spot/5-va/1-how-to-va.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. First, navigate to the [Jupiter Website](https://jup.ag/) and then click on the `VA` icon below the top navigation bar. **Double check** that the URL in your search bar is correct: https://jup.ag/va/\n2. Next, connect your wallet by clicking the `Connect Wallet` button in the upper right corner of the site.\n3. Set the Amount _(Increase Portfolio Value By)_ and the Duration _(Every)_ for the VA orders.\n   **Do note** that the amount is based on how much of the total you want to increase by and not how much each contribution is\n4. Select the token you want to buy and the token you are allocating _(Max Budget)_ on the VA terminal.\n5. Select between to Start Now or place the order in the future through Start At.\n6. Select between to auto receive the bought tokens in your account or manually claim it.\n7. Double check the order Summary details and if things look good, click the `Place Order` button.\n8. Confirm the wallet notification and the VA order will be submitted to the system.\n9. A notification toast will appear in the lower left corner that will notify the user once the transaction has been sent and has completed.\n10. Your new VA order will populate the Active VAs section below the Terminal once it is confirmed and the UI updates.\n11. You can expand the Active VAs and inspect the progress of each VA, or view previously completed VAs in Past VAs.\n```\n\n----------------------------------------\n\nTITLE: Configuring Network for Jupiter Terminal\nDESCRIPTION: Code modification in NetworkConfigurationProvider.tsx to change the default network from devnet to mainnet-beta, which is required for Jupiter Terminal to operate properly.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/300-tool-kits/2-terminal-walkthrough.md#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst [networkConfiguration, setNetworkConfiguration] = useLocalStorage(\"network\", \"mainnet-beta\");\n```\n\n----------------------------------------\n\nTITLE: Jupiter API Hostname Updates Tables - Swap, Price, and Token APIs\nDESCRIPTION: A set of markdown tables showing the mapping between old and new hostnames for various Jupiter APIs including Swap, Price, and Token endpoints.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/README.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Old Hostnames                                     | New Hostnames                                    |\n| ------------------------------------------------- | ------------------------------------------------ |\n| `https://quote-api.jup.ag/v6/quote`               | `https://lite-api.jup.ag/swap/v1/quote`               |\n| `https://quote-api.jup.ag/v6/swap`                | `https://lite-api.jup.ag/swap/v1/swap`                |\n| `https://quote-api.jup.ag/v6/swap-instructions`   | `https://lite-api.jup.ag/swap/v1/swap-instructions`   |\n| `https://quote-api.jup.ag/v6/program-id-to-label` | `https://lite-api.jup.ag/swap/v1/program-id-to-label` |\n\n| Old Hostnames             | New Hostnames                 |\n| ------------------------- | ----------------------------- |\n| `https://price.jup.ag/v6` | `https://lite-api.jup.ag/price/v2` |\n\n| Old Hostnames                               | New Hostnames                                 |\n| ------------------------------------------- | --------------------------------------------- |\n| `https://tokens.jup.ag/token/:mint`         | `https://lite-api.jup.ag/tokens/v1/token/:mint`    |\n| `https://tokens.jup.ag/tokens?tags=:tags`   | `https://lite-api.jup.ag/tokens/v1/tagged/:tag`    |\n| `https://tokens.jup.ag/tokens_with_markets` | `https://lite-api.jup.ag/tokens/v1/mints/tradable` |\n```\n\n----------------------------------------\n\nTITLE: Adding Jupiter Terminal Script to HTML Document\nDESCRIPTION: Modification to the _document.tsx file to include the Jupiter Terminal script in the HTML head, with the data-preload attribute for faster loading.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/300-tool-kits/2-terminal-walkthrough.md#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n...\n<Html>\n    <Head>\n        <link rel=\"shortcut icon\" href=\"/favicon.ico\"/>\n        <script src=\"https://terminal.jup.ag/main-v3.js\" data-preload />\n    </Head>\n    <body>\n        <Main />\n        <NextScript />\n    </body>\n</Html>\n...\n```\n\n----------------------------------------\n\nTITLE: Initializing Jupiter Limit Order Provider in JavaScript\nDESCRIPTION: Code to create a new instance of LimitOrderProvider using a Solana connection. It includes an optional referral setup for fee benefits.\nSOURCE: https://github.com/jup-ag/docs/blob/main/Moved/2-limit-order-with-sdk.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// This RPC endpoint is only for demonstration purposes so it may not work.\nconst SOLANA_RPC_ENDPOINT =\n  \"https://neat-hidden-sanctuary.solana-mainnet.discover.quiknode.pro/2af5315d336f9ae920028bbb90a73b724dc1bbed/\";\nconst connection = new Connection($SOLANA_RPC_ENDPOINT);\n\nconst limitOrder = new LimitOrderProvider(\n  connection,\n  // referralPubKey and referralName are both optional.\n  // Please provide both to get referral fees.\n  // More details in the section below.\n  // referralPubKey,\n  // referralName\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Required Libraries for Jupiter V6 API\nDESCRIPTION: Installation commands for required NodeJS dependencies including web3.js, cross-fetch, anchor, and bs58\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/2-apis/1-swap-api.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @solana/web3.js@1\nnpm i cross-fetch\nnpm i @project-serum/anchor\nnpm i bs58\n```\n\n----------------------------------------\n\nTITLE: Importing Solana Web3 Dependencies in JavaScript\nDESCRIPTION: This code imports necessary dependencies from @solana/web3.js and a custom notification utility. It's added to the src/views/home/index.tsx file in the example.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/5-jupiter-terminal/2-terminal-integration-guide.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Connection, PublicKey, Transaction } from '@solana/web3.js';\nimport { notify } from 'utils/notifications';\n```\n\n----------------------------------------\n\nTITLE: Jupiter API Hostname Updates Table - Trigger API\nDESCRIPTION: A markdown table showing the mapping between old and new hostnames for the Trigger API endpoints, including changes for createOrder, executeOrder, cancelOrder, and getTriggerOrders endpoints.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/README.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Old Hostnames                               | New Hostnames                                 |\n| ------------------------------------------- | --------------------------------------------- |\n| `https://api.jup.ag/limit/v2/createOrder`   | `https://lite-api.jup.ag/trigger/v1/createOrder`   |\n| `https://api.jup.ag/limit/v2/executeOrder`  | `https://lite-api.jup.ag/trigger/v1/executeOrder`  |\n| `https://api.jup.ag/limit/v2/cancelOrder`   | `https://lite-api.jup.ag/trigger/v1/cancelOrder`<br />`https://lite-api.jup.ag/trigger/v1/cancelOrders` |\n| `https://api.jup.ag/limit/v2/openOrders`<br />`https://api.jup.ag/limit/v2/orderHistory`    | `https://lite-api.jup.ag/trigger/v1/getTriggerOrders` |\n```\n\n----------------------------------------\n\nTITLE: Initializing Required Imports and Keys\nDESCRIPTION: Setup of necessary imports from Solana web3 and SPL token libraries, and initialization of a referral wallet public key.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/8-additional-topics/1-composing-with-versioned-transaction.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Some more imports you will need\nimport { TransactionMessage, VersionedMessage, TransactionInstruction, sendAndConfirmRawTransaction, SystemProgram, AddressLookupTableAccount } from '@solana/web3.js';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, Token, TOKEN_PROGRAM_ID } from '@solana/spl-token';\n\n// public key to use for this example\nconst referralWalletPublicKey = new PublicKey(\"referral_wallet_public_key\")\n```\n\n----------------------------------------\n\nTITLE: Batch Cancelling Limit Orders with Jupiter SDK in JavaScript\nDESCRIPTION: Function to cancel multiple limit orders in a batch using the Jupiter SDK. It has a limit of 10 orders per transaction due to size constraints.\nSOURCE: https://github.com/jup-ag/docs/blob/main/Moved/2-limit-order-with-sdk.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst tx = await limitOrder.batchCancelOrder({\n  owner: owner.publicKey,\n  ordersPubKey: batchOrdersPubKey,\n});\n\nawait sendAndConfirmTransaction(connection, tx, [owner]);\n```\n\n----------------------------------------\n\nTITLE: Error Response Schema for Internal Server Error in JSON\nDESCRIPTION: JSON schema for the error response when an internal server error (500 status code) occurs. It defines a simple structure with an error message, similar to the bad request schema.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/api/ultra-api/balances.api.mdx#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"error\": {\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\"error\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Table Structure - API Endpoints\nDESCRIPTION: Table listing the available API endpoint documentation links including order management, pricing, and query operations.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/api/recurring-api/recurring-order-api.info.mdx#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Link |\n| --- |\n| [Create Order](/docs/recurring-api/create-order) |\n| [Execute Order](/docs/recurring-api/execute-order) |\n| [Cancel Order](/docs/recurring-api/cancel-order) |\n| [Price Deposit](/docs/recurring-api/deposit-price-order) |\n| [Price Withdraw](/docs/recurring-api/withdraw-price-order) |\n| [Get Recurring Orders](/docs/recurring-api/get-recurring-orders) |\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies\nDESCRIPTION: Command to install the necessary dependencies for the Solana Dapp Scaffold project using pnpm package manager.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/300-tool-kits/2-terminal-walkthrough.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Displaying Token Information Table in Markdown\nDESCRIPTION: This code snippet shows a markdown table that explains different token extensions (Permanent Delegate, Transfer Tax, Freeze Authority) with their definitions, valid uses, and potential misuses.\nSOURCE: https://github.com/jup-ag/docs/blob/main/guides/2-spot/1-swap/2-tutorials/3-how-to-trade-safely.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|                    | **Definition**                                                                                                                                        | **Valid Use**                                                                                                                                                                       | **Misuse**                                                                                                                                                   |\n|--------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| **Permanent Delegate** | Allows creators to grant unlimited delegation privileges over any account for that mint, including burning or transferring any tokens from any account. | Enables automatic payments, wallet recovery, and processing refunds.                                                                                                               | Scam projects could drain tokens from users' wallets.                                                                                                        |\n| **Transfer Tax**       | Enables fees to be withheld on each transfer, redeemable by those with withdraw authority.                                                         | Allows projects to generate revenue through service charges, or to collect royalties or taxes on transfers.                                                                        | Scam projects might arbitrarily increase transaction taxes and withdraw funds with full authority.                                                           |\n| **Freeze Authority**   | Allows issuers to halt token transfers or trading, temporarily or permanently.                                                                     | Commonly used for regulated tokens (e.g., stablecoins) to meet legal standards; issuers can freeze tokens for compliance with legal or regulatory concerns.                          | Scammers may use this to prevent trading or transferring scam tokens, a red flag for market manipulation or potential fraud.                                 |\n```\n\n----------------------------------------\n\nTITLE: Cancel Limit Orders Request/Response Types\nDESCRIPTION: Type definitions for canceling limit orders, including maker address and optional specific order IDs to cancel.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/3-limit-order/2-limit-order-api.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype CancelOrders = {\n  maker: string;\n  computeUnitPrice: string | \"auto\";\n  orders?: string[] | undefined;\n};\n\ntype CancelOrdersResponse = {\n  txs: string[];\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Up Wallet for Jupiter Limit Order Transactions\nDESCRIPTION: TypeScript code to set up a wallet by decoding a private key from a base-58 string for use in Jupiter Limit Order transactions.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/3-limit-order/1-limit-order.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst WALLET_PRIV_KEY = process.env.WALLET_PRIV_KEY;\nif (!WALLET_PRIV_KEY) throw \"missing WALLET_PRIV_KEY\";\n\nconst wallet = Keypair.fromSecretKey(bs58.decode(WALLET_PRIV_KEY));\n```\n\n----------------------------------------\n\nTITLE: Syncing Wallet State with Jupiter Terminal\nDESCRIPTION: Code snippet showing how to synchronize wallet state between a dApp and Jupiter Terminal using the syncProps() API function. This enables wallet passthrough and state synchronization for features like slippage, verTx, priority fees, input mint and amount.\nSOURCE: https://github.com/jup-ag/docs/blob/main/Moved/blog-v2/2023-10-23-jupiter-planetary-developer-week/index.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useWallet } from '@solana/wallet-adapter-react'; // Or @jup-ag/wallet-adapter;\n\nconst passthroughWalletContextState = useWallet();\nuseEffect(() => {\n  if (!window.Jupiter.syncProps) return;\n  window.Jupiter.syncProps({ passthroughWalletContextState });\n}, [passthroughWalletContextState.connected, props]);\n```\n\n----------------------------------------\n\nTITLE: Providing CSV File with Mint Addresses for Jupiter Token Tagging\nDESCRIPTION: Partners need to provide a public URL endpoint that points to a CSV file containing one mint address per row. This file is used by Jupiter to automatically tag tokens for accurate trading.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/7-token-list/2-partner-tags.md#2025-04-16_snippet_0\n\nLANGUAGE: csv\nCODE:\n```\nmint_address1\\nmint_address2\\nmint_address3\n```\n\n----------------------------------------\n\nTITLE: Importing Required Dependencies for Jupiter Terminal\nDESCRIPTION: Code to import necessary dependencies in the home/index.tsx file, including Solana web3.js components and notification utilities required for Jupiter Terminal integration.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/300-tool-kits/2-terminal-walkthrough.md#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n...\nimport useUserSOLBalanceStore from '../../stores/useUserSOLBalanceStore';\n\nimport { Connection, PublicKey, Transaction } from '@solana/web3.js';\nimport { notify } from 'utils/notifications';\n\nexport const HomeView: FC = ({ }) => {\n...\n```\n\n----------------------------------------\n\nTITLE: Installing SPL Token Library for Solana\nDESCRIPTION: Install the Solana SPL token library which is required for token account operations when implementing payment functionality with Jupiter.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/100-swap-api/5-payments-through-swap.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @solana/spl-token\n```\n\n----------------------------------------\n\nTITLE: Rendering JSX Documentation Components\nDESCRIPTION: JSX code that renders documentation components including version badge, heading, and navigation links using custom theme components.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/api/swap-api/quickstart.info.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiLogo from \"@theme/ApiLogo\";\nimport Heading from \"@theme/Heading\";\nimport SchemaTabs from \"@theme/SchemaTabs\";\nimport TabItem from \"@theme/TabItem\";\nimport Export from \"@theme/ApiExplorer/Export\";\n\n<span\n  className={\"theme-doc-version-badge badge badge--secondary\"}\n  children={\"Version: 1.0.0\"}\n>\n</span>\n\n<Heading\n  as={\"h1\"}\n  className={\"openapi__heading\"}\n  children={\"Quickstart\"}\n>\n</Heading>\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Wallet State in Jupiter Terminal v2\nDESCRIPTION: Code showing how to implement wallet state synchronization between a dApp and Jupiter Terminal using the syncProps() API function. This enables wallet passthrough functionality and keeps wallet states in sync.\nSOURCE: https://github.com/jup-ag/docs/blob/main/Moved/blog-v1/2023-10-23-jupiter-planetary-developer-week/index.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useWallet } from '@solana/wallet-adapter-react'; // Or @jup-ag/wallet-adapter;\n\nconst passthroughWalletContextState = useWallet();\nuseEffect(() => {\n  if (!window.Jupiter.syncProps) return;\n  window.Jupiter.syncProps({ passthroughWalletContextState });\n}, [passthroughWalletContextState.connected, props]);\n```\n\n----------------------------------------\n\nTITLE: Token Metadata Structure Example in TypeScript\nDESCRIPTION: Example of a token metadata structure for USDCet showing the format including address, chain details, decimals, name, symbol, logo URI, extensions and tags\nSOURCE: https://github.com/jup-ag/docs/blob/main/Moved/blog-v2/2023-02-10-jupiter-token-list-api/index.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    \"address\":\"A9mUU4qviSctJVPJdBJWkb28deg915LYJKrzQ19ji3FM\",\n    \"chainId\":101,\n    \"decimals\":6,\n    \"name\":\"USD Coin (Portal from Ethereum)\",\n    \"symbol\":\"USDCet\",\n    \"logoURI\":\"https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/A9mUU4qviSctJVPJdBJWkb28deg915LYJKrzQ19ji3FM/logo.png\",\n    \"extensions\":{\n        \"coingeckoId\":\"usd-coin-wormhole-from-ethereum\"\n    },\n    \"tags\":[\n        \"old-registry\",\n        \"wormhole\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Wallet Passthrough Configuration\nDESCRIPTION: TypeScript/React code for wallet integration and state synchronization with Jupiter Terminal.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/5-jupiter-terminal/1-jupiter-terminal.md#2025-04-16_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nwindow.Jupiter.init({ enableWalletPassthrough: true });\n\nimport { useWallet } from '@solana/wallet-adapter-react'; // Or @jup-ag/wallet-adapter;\n\nconst passthroughWalletContextState = useWallet();\nuseEffect(() => {\n  if (!window.Jupiter.syncProps) return;\n  window.Jupiter.syncProps({ passthroughWalletContextState });\n}, [passthroughWalletContextState.connected, props]);\n```\n\n----------------------------------------\n\nTITLE: Implementing DCA functionality with Jupiter SDK in TypeScript\nDESCRIPTION: This comprehensive TypeScript example demonstrates how to use Jupiter's DCA SDK to create DCA orders, withdraw funds, close DCA accounts, and perform various other DCA-related operations. It includes functions for creating a DCA, withdrawing funds, closing a DCA, and a main function that orchestrates these operations.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/4-dca/2-dca-sdk.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CloseDCAParams, DCA, Network, type CreateDCAParamsV2, type DepositParams, type WithdrawParams } from '@jup-ag/dca-sdk';\nimport { Connection, Keypair, PublicKey, sendAndConfirmTransaction } from '@solana/web3.js';\n\nconst connection = new Connection('https://api.mainnet-beta.solana.com');\n\nconst dca = new DCA(connection, Network.MAINNET);\nconst user = Keypair.fromSecretKey(new Uint8Array(JSON.parse(process.env.USER_PRIVATE_KEY))); // create a .env file and include your wallet private key as an array\n\nconst USDC = new PublicKey('EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v');\nconst BONK = new PublicKey('DezXAZ8z7PnrnRJjz3wXBoRgixCa6xjnB7YaB1pPB263');\n\nasync function createDCA() {\n  const params: CreateDCAParamsV2 = {\n    payer: user.publickey, // could have a different account pay for the tx (make sure this account is also a signer when sending the tx)\n    user: user.publicKey,\n    inAmount: BigInt(5_000_000), // buy a total of 5 USDC over 5 days\n    inAmountPerCycle: BigInt(1_000_000), // buy using 1 USDC each day\n    cycleSecondsApart: BigInt(86400), // 1 day between each order -> 60 * 60 * 24\n    inputMint: USDC, // sell\n    outputMint: BONK, // buy\n    minOutAmountPerCycle: null,  // effectively allows for a max price. refer to Integration doc\n    maxOutAmountPerCycle: null, // effectively allows for a min price. refer to Integration doc\n    startAt: null, // unix timestamp in seconds\n    userInTokenAccount, // optional: if the inputMint token is not in an Associated Token Account but some other token account, pass in the PublicKey of the token account, otherwise, leave it undefined\n  };\n\n  const { tx, dcaPubKey } = await dca.createDcaV2(params);\n  const txid = await sendAndConfirmTransaction(connection, tx, [user]);\n\n  console.log('Create DCA: ', { txid });\n\n  return dcaPubKey;\n}\n\n// this is for withdrawing from program ATA\nasync function withdraw(dcaPubKey) {\n  // it's possible to withdraw in-tokens only or out-tokens only or both in and out tokens together. See WithdrawParams for more details\n  const params: WithdrawParams = {\n    user: user.publicKey,\n    dca: dcaPubKey,\n    inputMint: USDC,\n    withdrawInAmount: BigInt(1_000_000),\n  };\n\n  const { tx } = await dca.withdraw(params);\n\n  const txid = await sendAndConfirmTransaction(connection, tx, [user]);\n\n  console.log('Withdraw: ', { txid });\n}\n\nasync function closeDCA(dcaPubKey) {\n  const params: CloseDCAParams = {\n    user: user.publicKey,\n    dca: dcaPubKey,\n  };\n\n  const { tx } = await dca.closeDCA(params);\n\n  const txid = await sendAndConfirmTransaction(connection, tx, [user]);\n\n  console.log('Close DCA: ', { txid });\n}\n\nasync function main() {\n  const dcaPubKey = await createDCA();\n  console.log('DCA Pub Key: ', { dcaPubKey });\n\n  const dcaAccount = await dca.fetchDCA(dcaPubKey);\n  console.log('DCA Account Data: ', { dcaAccount });\n\n  const dcaAccounts = await dca.getCurrentByUser(user.publicKey);\n  console.log({ dcaAccounts });\n\n  await dca.getBalancesByAccount(dcaPubKey);\n\n  await withdraw(dcaPubKey);\n\n  await closeDCA(dcaPubKey);\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Setting up a DCA project with npm\nDESCRIPTION: This snippet shows how to create a new project directory and install the necessary dependencies for using Jupiter's DCA SDK in a NodeJS environment.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/4-dca/2-dca-sdk.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmkdir dca-bot\ncd dca-bot\nnpm init -y\nnpm i @solana/web3.js@1 @jup-ag/dca-sdk@2.3.5 dotenv\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server\nDESCRIPTION: Command to start the local development server, which will load the site on localhost for development and testing.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/300-tool-kits/2-terminal-walkthrough.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Failed Price Deposit Response Example\nDESCRIPTION: Example of an error response from the price deposit endpoint when the request fails, including error code and message.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/103-recurring-api/4-deposit-price-order.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"code\": 400,\n  \"error\": \"Failed to deserialize account data: failed to fill whole buffer\",\n  \"status\": \"Bad Request\"\n}\n```\n\n----------------------------------------\n\nTITLE: Basic DCA User Flow Steps\nDESCRIPTION: Step-by-step instructions for setting up a DCA order on Jupiter, from accessing the DCA interface to monitoring active orders.\nSOURCE: https://github.com/jup-ag/docs/blob/main/guides/2-spot/4-dca/1-how-to-dca.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. First, navigate to the Jupiter Website and then click on the `DCA` icon below the top navigation bar. **Double check** that the URL in your search bar is correct: https://jup.ag/dca/\n2. Next, connect your wallet by clicking the `Connect Wallet` button in the upper right corner of the site.\n3. Select the token you are allocating and the token you are going to be buying on the DCA terminal.\n4. Enter the amount of the token you want to allocate to the DCA orders in the amount field.\n5. Set the Frequency(Every) and the Duration(Over) for the DCA orders.\n6. Double check the Order Summary details and if things look good, click the `Start DCA` button.\n7. Confirm the wallet notification and the DCA Order will be submitted to the system.\n8. A notification toast will appear in the lower left corner that will notify the user once the transaction has been sent and has completed.\n9. Your new DCA will populate the Active DCAs section below the Terminal once it is confirmed and the UI updates.\n10. You can expand the Active DCAs and inspect the progress of the DCA in the Overview tab, or inspect the individual orders on the Order tab.\n```\n\n----------------------------------------\n\nTITLE: Jupiter Core Contract Addresses\nDESCRIPTION: Main contract addresses for Jupiter's core functionality including swap, limit order, and DCA contracts on Solana.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/8-additional-topics/3-links-and-contract-addresses.md#2025-04-16_snippet_0\n\nLANGUAGE: solana\nCODE:\n```\nJUP6LkbZbjS1jKKwapdHNy74zcZ3tLUZoi5QNyVTaV4\n```\n\nLANGUAGE: solana\nCODE:\n```\njupoNjAxXgZ4rjzxzPMP4oxduvQsQtZzyknqvzYNrNu\n```\n\nLANGUAGE: solana\nCODE:\n```\nDCA265Vj8a9CEuX1eb1LWRnDT7uK6q1xMipnNyatn23M\n```\n\n----------------------------------------\n\nTITLE: Running OpenAPI Documentation Generation Commands\nDESCRIPTION: Commands for generating and cleaning API documentation from OpenAPI schemas using Docusaurus plugin.\nSOURCE: https://github.com/jup-ag/docs/blob/main/contribution-readme.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm docusaurus gen-api-docs <all or a specific id>\\npnpm docusaurus clean-api-docs <all or a specific id>\n```\n\n----------------------------------------\n\nTITLE: Failed API Response Format for Jupiter Order Creation\nDESCRIPTION: Example of an error response from the createOrder endpoint when the order value is below the minimum requirement.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/103-recurring-api/1-create-order.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"code\": 400,\n  \"error\": \"Order is valued at 2.99 USDC, minimum is 100.00 USDC\",\n  \"status\": \"Bad Request\"\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Terminal Styles with CSS-in-JS\nDESCRIPTION: Applies custom CSS-in-JS styles to the Jupiter Terminal container. This example shows how to set z-index and max height properties to customize the terminal's appearance.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/300-tool-kits/1-swap-terminal.md#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nwindow.Jupiter.init({\n    // ... \n    containerStyles: { zIndex: 100 },\n    containerStyles: { maxHeight: '90vh' },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Jupiter Developer Docs\nDESCRIPTION: Command to install project dependencies using pnpm package manager.\nSOURCE: https://github.com/jup-ag/docs/blob/main/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Adding ApePro to Home Screen on iOS and Android\nDESCRIPTION: Instructions for adding the ApePro web app to the home screen on iOS and Android devices for an app-like experience. This improves mobile accessibility and user experience.\nSOURCE: https://github.com/jup-ag/docs/blob/main/guides/6-ape/1-overview.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- Use ApePro on mobile devices with optimised UI/UX\n- You can add the ApePro web app to your home screen for an app-like experience\n    - **For iOS (Safari Browser)**:\n        1. Open [ape.pro](http://ape.pro/) in Safari.\n        2. Tap the **Share** icon at the bottom of the screen.\n        3. Scroll down and select **Add to Home Screen**.\n        4. Tap **Add** in the upper-right corner.\n\n    - **For Android (Chrome Browser)**:\n        1. Open [ape.pro](http://ape.pro/) in Chrome.\n        2. Tap the **Menu** icon (three dots) in the upper-right corner.\n        3. Select **Add to Home screen**.\n        4. Tap **Add**.\n    \nBy adding ApePro to your home screen, you can access it with a single tap, just like a native app. This Progressive Web App (PWA) provides an immersive, full-screen experience.\n```\n\n----------------------------------------\n\nTITLE: Error Response Schema for Bad Request in JSON\nDESCRIPTION: JSON schema for the error response when a bad request (400 status code) is made. It defines a simple structure with an error message.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/api/ultra-api/balances.api.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"error\": {\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\"error\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Legacy Jupiter Contract Addresses\nDESCRIPTION: Historical contract addresses for previous versions of Jupiter's swap functionality.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/8-additional-topics/3-links-and-contract-addresses.md#2025-04-16_snippet_1\n\nLANGUAGE: solana\nCODE:\n```\nJUP4Fb2cqiRUcaTHdrPC8h2gNsA2ETXiPDD33WcGuJB\n```\n\nLANGUAGE: solana\nCODE:\n```\nJUP3c2Uh3WA4Ng34tw6kPd2G4C5BB21Xo36Je1s32Ph\n```\n\nLANGUAGE: solana\nCODE:\n```\nJUP2jxvXaqu7NQY1GmNF4m1vodw12LVXYxbFL2uJvfo\n```\n\n----------------------------------------\n\nTITLE: HTML Head Configuration for Ape Pro FAQ\nDESCRIPTION: HTML head section defining the page title and Twitter card metadata for the FAQ page.\nSOURCE: https://github.com/jup-ag/docs/blob/main/guides/6-ape/4-faq.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<head>\n    <title>: Frequently Asked Questions | Ape Pro</title>\n    <meta name=\"twitter:card\" content=\"summary\" />\n</head>\n```\n\n----------------------------------------\n\nTITLE: TradingView Logo Icon SVG Implementation\nDESCRIPTION: SVG code for rendering the TradingView icon logo with specific dimensions and path definitions.\nSOURCE: https://github.com/jup-ag/docs/blob/main/guides/2-spot/3-limit-order/3-lo-partners.md#2025-04-16_snippet_0\n\nLANGUAGE: svg\nCODE:\n```\n<svg width=\"40\" height=\"30\" viewBox=\"0 0 36 28\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M14 22H7V11H0V4h14v18zM28 22h-8l7.5-18h8L28 22z\" fill=\"black\"></path>\n        <circle cx=\"20\" cy=\"8\" r=\"4\" fill=\"black\"></circle>\n      </svg>\n```\n\n----------------------------------------\n\nTITLE: Adding New Market JSON Payload\nDESCRIPTION: Example JSON payload for adding a new market to the Jupiter Swap API without restarting. This is used with the /add-market endpoint when the API is started with the --enable-add-market flag.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/2-apis/9-self-hosted.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"address\": \"EzvDheLRnPjWy3S29MZYEi5qzcaR1WR5RNS8YhUA5WG5\",\n  \"owner\": \"675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8\",\n  \"params\": {\n    \"serumAsks\":\"Ac8Hoi4LBbJfG4pCEUu2sS3jkmNrZBv6tbdmEnxAkRsK\",\n    \"serumBids\":\"CF1NyAZjWqi8t9WZ7pSiqCiTSr3taZ94EW44AjyZRsnY\",\n    \"serumCoinVaultAccount\":\"65LDE8k8WqhgrZy6NDsVQxGuUq3r8fT8bJunt5WPAZAk\",\n    \"serumEventQueue\":\"1Xpk12GqjPLS8bkL8XVRHc6nrnunqcJhDha9jUq6Ymc\",\n    \"serumPcVaultAccount\":\"AKATaDtSNPc5HemQCJzhph7o76Q1ndRHyKwai5C4wFkR\",\n    \"serumVaultSigner\":\"7xookfS7px2FxR4JzpB3bT9nS3hUAENE4KsGaqkM6AoQ\"\n  },\n  \"addressLookupTableAddress\":\"5tVPTN4afHxuyS8CNCNrnU7WZJuYeq5e2FvxUdCMQG7F\"\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Head Configuration for Jupiter Metropolis\nDESCRIPTION: HTML head configuration for the Jupiter Metropolis documentation page, including title and Twitter card metadata.\nSOURCE: https://github.com/jup-ag/docs/blob/main/Moved/2-how-swap-works/1-metropolis-features.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<head>\n    <title>Jupiter Metropolis Explained: Enhanced Swapping Guide | Jupiter Station</title>\n    <meta name=\"twitter:card\" content=\"summary\" />\n</head>\n```\n\n----------------------------------------\n\nTITLE: Basic cURL Request for Jupiter Price API\nDESCRIPTION: Example of making a basic GET request to the price API using cURL to fetch SOL price.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/2-apis/4-price-api.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X 'GET' 'https://price.jup.ag/v6/price?ids=SOL'\n```\n\n----------------------------------------\n\nTITLE: HTML Script Setup for Terminal\nDESCRIPTION: Script tags for loading Jupiter Terminal with optional preload attribute.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/5-jupiter-terminal/1-jupiter-terminal.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- Attach the loading script in your <head /> -->\n<script src=\"https://terminal.jup.ag/main-v2.js\" />\n\n<!-- Optionally, preload for better experience, or integrated mode -->\n<script src=\"https://terminal.jup.ag/main-v2.js\" data-preload />\n```\n\n----------------------------------------\n\nTITLE: Displaying Jupiter Legal Contact Email\nDESCRIPTION: Provides the email address for contacting Jupiter's legal team with questions, claims, complaints, or suggestions.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/misc/11-terms-of-use.md#2025-04-16_snippet_0\n\nLANGUAGE: Plain Text\nCODE:\n```\nlegal@jup.ag\n```\n\n----------------------------------------\n\nTITLE: Video Player Implementation in HTML\nDESCRIPTION: HTML5 video player element for displaying token lock walkthrough tutorial, with fallback message for unsupported browsers.\nSOURCE: https://github.com/jup-ag/docs/blob/main/guides/11-jupiter-lock/1-jupiter-lock.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<video controls style={{ maxWidth: '50%', height: 'auto' }}>\n  <source src={require('../static/media/lock-walkthrough.mp4').default} type=\"video/mp4\" />\n  Your browser does not support the video tag.\n</video>\n```\n\n----------------------------------------\n\nTITLE: Installing Jupiter Limit Order SDK with Yarn\nDESCRIPTION: Command to install the Jupiter Limit Order SDK package using Yarn package manager.\nSOURCE: https://github.com/jup-ag/docs/blob/main/Moved/2-limit-order-with-sdk.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @jup-ag/limit-order-sdk\n```\n\n----------------------------------------\n\nTITLE: Installing Unified Wallet Kit with pnpm\nDESCRIPTION: Command to install the Unified Wallet Kit package using pnpm package manager.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/5-jupiter-terminal/3-unified-wallet-kit.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm i @jup-ag/wallet-adapter\n```\n\n----------------------------------------\n\nTITLE: HTML Head Configuration for Jupiter Start Documentation\nDESCRIPTION: HTML head section configuring the page title and Twitter card metadata for social sharing\nSOURCE: https://github.com/jup-ag/docs/blob/main/Moved/blog-v2/2023-11-30-jup-start/index.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<head>\n    <title>Grow the Pie on Solana - Update #2 | Jupiter Station</title>\n    <meta name=\"twitter:card\" content=\"summary\" />\n</head>\n```\n\n----------------------------------------\n\nTITLE: Failed Cancel Order Response Format from Jupiter API\nDESCRIPTION: This JSON example demonstrates an error response from the cancelOrder endpoint. It includes an error code, message, and status when the cancellation request fails, typically due to issues with the provided order account or deserialization errors.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/103-recurring-api/3-cancel-order.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"code\": 400,\n  \"error\": \"Failed to deserialize account data: failed to fill whole buffer\",\n  \"status\": \"Bad Request\"\n}\n```\n\n----------------------------------------\n\nTITLE: Video Element Implementation\nDESCRIPTION: HTML video element implementation with React-style props for displaying feature demonstration videos.\nSOURCE: https://github.com/jup-ag/docs/blob/main/Moved/2-how-swap-works/1-metropolis-features.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<video controls style={{ maxWidth: '65%', height: 'auto' }}>\n  <source src={require('../../../static/media/instant-routing-video.mp4').default} type=\"video/mp4\" />\n  Your browser does not support the video tag.\n</video>\n```\n\n----------------------------------------\n\nTITLE: Building and Starting Local Development Server for Jupiter Docs\nDESCRIPTION: Commands to build the project and start a local development server using pnpm.\nSOURCE: https://github.com/jup-ag/docs/blob/main/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm build && pnpm start\n```\n\n----------------------------------------\n\nTITLE: BONK Token Airdrop Transaction Reference\nDESCRIPTION: Reference to the initial BONK token airdrop transaction on Solana blockchain that resulted in tokens being sent to OpenBook Open Order Accounts instead of intended recipients.\nSOURCE: https://github.com/jup-ag/docs/blob/main/Moved/blog-v2/2023-01-13-bonk-retrieval-and-distribution-plan.md#2025-04-16_snippet_0\n\nLANGUAGE: solana\nCODE:\n```\n5Sj8hu81wLSt2RuEUZYNzyuNeoQoGfiKG6BBWwiNdBUYHzU1eGpTg2FUyTUsXAG7BteMLM1hGAtYxShvxqrpQH63\n```\n\n----------------------------------------\n\nTITLE: Styling DCA API Method Display Components\nDESCRIPTION: CSS styles for displaying API method boxes and paths in the documentation. Defines styling for GET and POST method indicators with specific colors and formatting.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/4-dca/1-integration.md#2025-04-16_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.api-method-box {\n  border-radius: 8px;\n  margin: 16px 0;\n  display: inline;\n  padding: 4px;\n  font-weight: 700;\n  margin-right: 8px;\n  font-size: 12px;\n  color: white\n}\n\n.get {\n  border: 1px solid #018847;\n  background-color: #018847 !important;\n}\n\n.post {\n  border: 1px solid #eaba0c;\n  background-color: #eaba0c !important;\n}\n\n.api-method-path {\n  font-size: 14px;\n  display: inline;\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Head Configuration for Jupiter Guides\nDESCRIPTION: HTML head section configuring the page title and Twitter card metadata for Jupiter Guides landing page.\nSOURCE: https://github.com/jup-ag/docs/blob/main/guides/index.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<head>\n    <title>Jupiter Guides: Welcome Catdets!</title>\n    <meta name=\"twitter:card\" content=\"summary\" />\n</head>\n```\n\n----------------------------------------\n\nTITLE: Querying Jupiter's Privacy Team via Email in Markdown\nDESCRIPTION: Provides the email address for users to contact Jupiter's privacy team with inquiries. This allows users to voluntarily submit questions or concerns about their data privacy.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/10-legal/3-privacy-policy.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`privacy@jup.ag`\n```\n\n----------------------------------------\n\nTITLE: Importing Landing Page Component with Meta Tags in JSX\nDESCRIPTION: Sets up a documentation landing page by importing a DocsLanding component and configuring basic meta tags including Twitter card metadata. Uses JSX/React syntax with MDX markdown extensions.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs/sample.md#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<head>\n    <title>Developer Documentation</title>\n    <meta name=\"twitter:card\" content=\"summary\" />\n</head>\n\nimport DocsLanding from '@site/src/components/DocsLanding';\n\n<DocsLanding />\n```\n\n----------------------------------------\n\nTITLE: Starting Jupiter Swap API in Poll Mode in Shell\nDESCRIPTION: Command to start the Jupiter Swap API server in poll mode, which periodically polls the Solana RPC node for accounts. This method is not recommended due to heavy node usage.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/2-apis/9-self-hosted.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nRUST_LOG=info ./jupiter-swap-api --rpc-url <RPC-URL>\n```\n\n----------------------------------------\n\nTITLE: HTML Meta Configuration for Jupiter Docs\nDESCRIPTION: HTML head configuration for the documentation page, setting up meta tags for Twitter cards and page title.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/index.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<head>\n    <title>Jupiter APIs and Documentation</title>\n    <meta name=\"twitter:card\" content=\"summary\" />\n</head>\n```\n\n----------------------------------------\n\nTITLE: Executing Transaction\nDESCRIPTION: Sending and confirming the signed transaction on Solana network\nSOURCE: https://github.com/jup-ag/docs/blob/main/Moved/1-limit-order-api.md#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// get the latest block hash\nconst latestBlockHash = await connection.getLatestBlockhash();\n\n// Execute the transaction\nconst rawTransaction = transaction.serialize();\nconst txid = await connection.sendRawTransaction(rawTransaction, {\n  skipPreflight: true,\n  maxRetries: 2,\n});\nawait connection.confirmTransaction({\n  blockhash: latestBlockHash.blockhash,\n  lastValidBlockHeight: latestBlockHash.lastValidBlockHeight,\n  signature: txid\n});\nconsole.log(`https://solscan.io/tx/${txid}`);\n```\n\n----------------------------------------\n\nTITLE: TradingView Text Logo SVG Implementation\nDESCRIPTION: SVG code for rendering the TradingView text logo with detailed path definitions and styling.\nSOURCE: https://github.com/jup-ag/docs/blob/main/guides/2-spot/3-limit-order/3-lo-partners.md#2025-04-16_snippet_1\n\nLANGUAGE: svg\nCODE:\n```\n<svg width=\"160\" height=\"30\" viewBox=\"0 0 147 28\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path\n          d=\"M4.793 22.024h3.702V7.519h4.843V4.02H0v3.5h4.793v14.504zM13.343 22.024h3.474v-6.06c0-2.105 1.09-3.373 2.74-3.373.582 0 1.039.101 1.571.279V9.345a3.886 3.886 0 00-1.166-.152c-1.42 0-2.713.938-3.145 2.18V9.346h-3.474v12.679zM27.796 22.303c1.75 0 3.068-.888 3.652-1.7v1.42h3.474V9.346h-3.474v1.42c-.584-.811-1.902-1.699-3.652-1.699-3.372 0-5.959 3.043-5.959 6.618 0 3.576 2.587 6.619 5.96 6.619zm.736-3.17c-1.928 0-3.196-1.445-3.196-3.448 0-2.004 1.268-3.45 3.196-3.45 1.927 0 3.195 1.446 3.195 3.45 0 2.003-1.268 3.448-3.195 3.448zM43.193 22.303c1.75 0 3.068-.888 3.651-1.7v1.42h3.474V3.007h-3.474v7.76c-.583-.812-1.901-1.7-3.651-1.7-3.373 0-5.96 3.043-5.96 6.618 0 3.576 2.587 6.619 5.96 6.619zm.735-3.17c-1.927 0-3.195-1.445-3.195-3.448 0-2.004 1.268-3.45 3.195-3.45 1.927 0 3.195 1.446 3.195 3.45 0 2.003-1.268 3.448-3.195 3.448zM55.166 7.412a2.213 2.213 0 002.232-2.206A2.213 2.213 0 0055.166 3a2.224 2.224 0 00-2.206 2.206 2.224 2.224 0 002.206 2.206zm-1.724 14.612h3.474V9.49h-3.474v12.533zM59.998 22.024h3.474v-6.187c0-2.435 1.192-3.601 2.815-3.601 1.445 0 2.232 1.116 2.232 2.941v6.847h3.474v-7.43c0-3.296-1.826-5.528-4.894-5.528-1.649 0-2.942.71-3.627 1.724V9.345h-3.474v12.679zM80.833 18.65c-1.75 0-3.22-1.319-3.22-3.246 0-1.952 1.47-3.246 3.22-3.246 1.75 0 3.22 1.294 3.22 3.246 0 1.927-1.47 3.246-3.22 3.246zm-.406 8.85c3.88 0 6.822-1.978 6.822-6.543V9.268h-3.474v1.42C83.09 9.7 81.72 8.99 80.098 8.99c-3.322 0-5.985 2.84-5.985 6.415 0 3.55 2.663 6.39 5.985 6.39 1.623 0 2.992-.735 3.677-1.673v.862c0 2.029-1.344 3.474-3.398 3.474-1.42 0-2.84-.482-3.956-1.572l-1.902 2.586c1.445 1.395 3.702 2.029 5.908 2.029zM94.594 22.024h3.27L105.32 4.02h-4.057l-5.021 12.501L91.145 4.02h-3.981l7.43 18.004zM108.508 7.266a2.213 2.213 0 002.231-2.206 2.213 2.213 0 00-2.231-2.206c-1.192 0-2.207.988-2.207 2.206 0 1.217 1.015 2.206 2.207 2.206zm-1.725 14.758h3.474V9.345h-3.474v12.679zM119.248 22.303c2.662 0 4.691-1.116 5.883-2.84l-2.587-1.927c-.583.887-1.673 1.597-3.271 1.597-1.673 0-3.169-.938-3.372-2.637h9.483c.076-.533.051-.888.051-1.192 0-4.133-2.916-6.238-6.238-6.238-3.854 0-6.669 2.865-6.669 6.618 0 4.007 2.942 6.619 6.72 6.619zm-3.221-8.165c.33-1.547 1.775-2.207 3.069-2.207 1.293 0 2.561.685 2.865 2.207h-5.934zM138.45 22.024h3.449l4.184-12.679h-3.728l-2.383 8.114-2.587-8.114h-2.662l-2.561 8.114-2.409-8.114h-3.703l4.21 12.679h3.448l2.359-7.202 2.383 7.202z\"\n          fill=\"black\"\n        ></path>\n      </svg>\n```\n\n----------------------------------------\n\nTITLE: Starting Jupiter Swap API with Custom Market Cache in Shell\nDESCRIPTION: Command to start the Jupiter Swap API using a custom market cache file, which allows excluding specific AMMs or markets from routing.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/2-apis/9-self-hosted.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nRUST_LOG=info ./jupiter-swap-api --market-cache market-cache-no-openbook.json ...\n```\n\n----------------------------------------\n\nTITLE: Submitting Transaction to Jupiter Worker\nDESCRIPTION: Example of submitting a Jupiter transaction using the dedicated worker endpoint for improved transaction handling.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/2-apis/11-landing-transactions.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfetch(`https://worker.jup.ag/send-transaction`, {\n  method: 'POST',\n  headers: {\n    Accept: 'application/json',\n    'Content-Type': 'application/json',\n  },\n  body: JSON.stringify(transactionPayload),\n});\n```\n\n----------------------------------------\n\nTITLE: Video Component Implementation in HTML\nDESCRIPTION: HTML video element implementation for displaying a tutorial video with fallback content and custom styling.\nSOURCE: https://github.com/jup-ag/docs/blob/main/guides/2-spot/1-swap/2-tutorials/1-how-to-swap.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<video controls style={{ maxWidth: '100%', height: 'auto' }}>\n  <source src={require('../../../static/media/how-to-swap-jupiter.mp4').default} type=\"video/mp4\" />\n  Your browser does not support the video tag.\n</video>\n```\n\n----------------------------------------\n\nTITLE: HTML Head Configuration for Onramp Documentation\nDESCRIPTION: HTML head section defining metadata for the onramp documentation page, including Twitter card and page title.\nSOURCE: https://github.com/jup-ag/docs/blob/main/guides/10-onboard/2-onramp.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<head>\n    <title>Fiat to Solana On-Ramping: Easy Guide: Step by Step | Jupiter Station</title>\n    <meta name=\"twitter:card\" content=\"summary\" />\n</head>\n```\n\n----------------------------------------\n\nTITLE: Meta Tags Implementation in HTML\nDESCRIPTION: HTML head section implementing meta tags for Twitter card and page title.\nSOURCE: https://github.com/jup-ag/docs/blob/main/guides/2-spot/1-swap/2-tutorials/1-how-to-swap.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<head>\n    <title>How to Swap on Jupiter</title>\n    <meta name=\"twitter:card\" content=\"summary\" />\n</head>\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration for the documentation page, setting up sidebar positioning, labels, and page description.\nSOURCE: https://github.com/jup-ag/docs/blob/main/guides/index.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\nsidebar_label: \"Overview\"\ntitle: Guides Overview\nsidebar_position: 1\ndescription: Learn about Jupiter and how to use Jupiter with these beginner friendly guides.\n---\n```\n\n----------------------------------------\n\nTITLE: Implementing HTML Meta Refresh for Blog Redirect\nDESCRIPTION: This HTML meta tag automatically redirects the user to the new blog location at jupresear.ch after 0 seconds. It ensures a seamless transition for users visiting the old blog URL.\nSOURCE: https://github.com/jup-ag/docs/blob/main/src/pages/blog-redirect.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<meta http-equiv=\"refresh\" content=\"0;url=https://www.jupresear.ch/c/archived-blogposts\" />\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration for the documentation page defining slug, title and description\nSOURCE: https://github.com/jup-ag/docs/blob/main/Moved/blog-v2/2023-11-30-jup-start/index.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\nslug: jup-start\ntitle: \"Grow The Pie Update #2\"\ndescription: \"Explore Jupiter's Grow the Pie Update—igniting Solana with community projects, education, and new trading avenues\"\n---\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration for the documentation page, setting sidebar position, title, and page description.\nSOURCE: https://github.com/jup-ag/docs/blob/main/docs_versioned_docs/version-old/index.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\nsidebar_position: 1\ntitle: Welcome\ndescription: \"Unlock superior trading with Jupiter Documentation. Integrate APIs for swaps, payments, and more effortlessly. Explore robust tools now!\"\n---\n```"
  }
]