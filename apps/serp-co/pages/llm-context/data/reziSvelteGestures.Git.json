[
  {
    "owner": "rezi",
    "repo": "svelte-gestures.git",
    "content": "TITLE: Using Pan Gesture with Event Handling in Svelte\nDESCRIPTION: Example of using the pan gesture in a Svelte component with TypeScript typing. Shows how to handle the main pan event and subsidiary events (pandown, panmove) to track coordinates and other event details.\nSOURCE: https://github.com/rezi/svelte-gestures.git/blob/main/README_5.0.7.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script lang=\"ts\">\n  import { pan, type PanCustomEvent, type GestureCustomEvent } from 'svelte-gestures';\n  let x: number;\n  let y: number;\n  let target: EventTarget;\n\n  function handler(event: PanCustomEvent) {\n    x = event.detail.x;\n    y = event.detail.y;\n    target = event.detail.target;\n\t}\n\n  function panDown(gestureEvent: GestureCustomEvent) {\n    const { event, pointersCount, target, x, y } = gestureEvent.detail;\n  }\n\n  function panMove(gestureEvent: GestureCustomEvent) {\n    console.log(gestureEvent.detail);\n  }\n</script>\n\n<div\n  use:pan\n  on:pan={handler}\n  on:pandown={panDown}\n  on:panmove={panMove}\n  style=\"width:500px;height:500px;border:1px solid black;\"\n></div>\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Pan Gesture in Svelte\nDESCRIPTION: Demonstrates how to use the pan gesture recognizer in a Svelte component. It shows the basic setup, event handling, and accessing gesture details.\nSOURCE: https://github.com/rezi/svelte-gestures.git/blob/main/README.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { pan, type PanCustomEvent, type GestureCustomEvent } from 'svelte-gestures';\nlet x: number;\nlet y: number;\nlet target: EventTarget;\n\nfunction handler(event: PanCustomEvent) {\n  x = event.detail.x;\n  y = event.detail.y;\n  target = event.detail.target;\n}\n\nfunction panDown(gestureEvent: GestureCustomEvent) {\n  const { event, pointersCount, target, x, y } = gestureEvent.detail;\n}\n\nfunction panMove(gestureEvent: GestureCustomEvent) {\n  console.log(gestureEvent.detail);\n}\n```\n\nLANGUAGE: html\nCODE:\n```\n<div\n  use:pan\n  on:pan={handler}\n  on:pandown={panDown}\n  on:panmove={panMove}\n  style=\"width:500px;height:500px;border:1px solid black;\"\n></div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Tap Gesture in Svelte\nDESCRIPTION: Example of how to implement a tap gesture in Svelte using the svelte-gestures library. Demonstrates configuring the tap timeframe and handling the tap event to access coordinates, target element, and pointer type information.\nSOURCE: https://github.com/rezi/svelte-gestures.git/blob/main/README_5.0.7.md#2025-04-18_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<script lang=\"ts\">\nimport { tap, type TapCustomEvent } from 'svelte-gestures';\n\nlet x;\nlet y;\nlet target;\nlet pointerType;\n\nfunction handler(event: TapCustomEvent) {\n  x = event.detail.x;\n  y = event.detail.y;\n  target = event.detail.target;\n  pointerType = event.detail.pointerType;\n}\n\n</script>\n<div use:tap={{ timeframe: 300 }} on:tap={handler} style=\"width:500px;height:500px;border:1px solid black;\">\n  tap: {x} {y}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Tap Gesture in Svelte\nDESCRIPTION: Example of implementing a tap gesture detection in a Svelte component. The code shows how to use the tap action directive, handle tap events, and access coordinates, target, and pointer type information.\nSOURCE: https://github.com/rezi/svelte-gestures.git/blob/main/README.md#2025-04-18_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<script lang=\"ts\">\nimport { tap, type TapCustomEvent } from 'svelte-gestures';\n\nlet x;\nlet y;\nlet target;\nlet pointerType;\n\nfunction handler(event: TapCustomEvent) {\n  x = event.detail.x;\n  y = event.detail.y;\n  target = event.detail.target;\n  pointerType = event.detail.pointerType;\n}\n\n</script>\n<div use:tap={()=>({ timeframe: 300 })} \n  on:tap={handler} \n  style=\"width:500px;height:500px;border:1px solid black;\">\n  tap: {x} {y}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Pinch Gesture Implementation with Scale Tracking\nDESCRIPTION: Example of implementing pinch gesture in Svelte to track scaling and center point. The pinch event provides scale factor and center coordinates that can be used for zoom functionality.\nSOURCE: https://github.com/rezi/svelte-gestures.git/blob/main/README_5.0.7.md#2025-04-18_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script lang=\"ts\">\n  import { pinch, type PinchCustomEvent } from 'svelte-gestures';\n  let scale;\n  let x;\n  let y;\n  let pointerType;\n\n  function handler(event: PinchCustomEvent) {\n    scale = event.detail.scale;\n    x = event.detail.center.x;\n    y = event.detail.center.y;\n    pointerType = event.detail.pointerType;\n  }\n</script>\n\n<div\n  use:pinch\n  on:pinch=\"{handler}\"\n  style=\"width:500px;height:500px;border:1px solid black;\"\n>\n  pinch scale: {scale} <br />\n  center: x {x}, y {y}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Pinch Gesture in Svelte\nDESCRIPTION: Demonstrates the usage of the pinch gesture recognizer in a Svelte component, showing how to handle the pinch event and access scale and center coordinates.\nSOURCE: https://github.com/rezi/svelte-gestures.git/blob/main/README.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { pinch, type PinchCustomEvent } from 'svelte-gestures';\nlet scale;\nlet x;\nlet y;\nlet pointerType;\n\nfunction handler(event: PinchCustomEvent) {\n  scale = event.detail.scale;\n  x = event.detail.center.x;\n  y = event.detail.center.y;\n  pointerType = event.detail.pointerType;\n}\n```\n\nLANGUAGE: html\nCODE:\n```\n<div\n  use:pinch\n  on:pinch=\"{handler}\"\n  style=\"width:500px;height:500px;border:1px solid black;\"\n>\n  pinch scale: {scale} <br />\n  center: x {x}, y {y}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Rotate Gesture Implementation with Angle Tracking\nDESCRIPTION: Example of implementing rotation gesture in Svelte to track rotation angle and center point. The rotate event provides rotation value in degrees and the center coordinates of the rotation.\nSOURCE: https://github.com/rezi/svelte-gestures.git/blob/main/README_5.0.7.md#2025-04-18_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script lang=\"ts\">\n  import { rotate, type RotateCustomEvent } from 'svelte-gestures';\n  let rotation;\n  let x;\n  let y;\n  let pointerType;\n\n  function handler(event: RotateCustomEvent) {\n    rotation = event.detail.rotation;\n    x = event.detail.center.x;\n    y = event.detail.center.y;\n    pointerType = event.detail.pointerType;\n  }\n</script>\n<div\n  use:rotate\n  on:rotate=\"{handler}\"\n  style=\"width:500px;height:500px;border:1px solid black;\"\n>\n  rotation: {rotation} <br />\n  center: x {x}, y {y}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Rotate Gesture in Svelte\nDESCRIPTION: Shows how to use the rotate gesture recognizer in a Svelte component, handling the rotate event and displaying rotation angle and center coordinates.\nSOURCE: https://github.com/rezi/svelte-gestures.git/blob/main/README.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { rotate, type RotateCustomEvent } from 'svelte-gestures';\nlet rotation;\nlet x;\nlet y;\nlet pointerType;\n\nfunction handler(event: RotateCustomEvent) {\n  rotation = event.detail.rotation;\n  x = event.detail.center.x;\n  y = event.detail.center.y;\n  pointerType = event.detail.pointerType;\n}\n```\n\nLANGUAGE: html\nCODE:\n```\n<div\n  use:rotate\n  on:rotate=\"{handler}\"\n  style=\"width:500px;height:500px;border:1px solid black;\"\n>\n  rotation: {rotation} <br />\n  center: x {x}, y {y}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Swipe Gesture in Svelte\nDESCRIPTION: Example of how to implement a swipe gesture in Svelte using the svelte-gestures library. Shows how to configure the swipe parameters like timeframe and minimum swipe distance, and how to handle the swipe event to access direction, target and pointer type information.\nSOURCE: https://github.com/rezi/svelte-gestures.git/blob/main/README_5.0.7.md#2025-04-18_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<script lang=\"ts\">\nimport { swipe, type SwipeCustomEvent } from 'svelte-gestures';\nlet direction;\nlet target;\nlet pointerType;\n\nfunction handler(event: SwipeCustomEvent) {\n  direction = event.detail.direction;\n  target = event.detail.target;\n  pointerType = event.detail.pointerType;\n}\n</script>\n\n<div use:swipe={{ timeframe: 300, minSwipeDistance: 60 }} on:swipe={handler} style=\"width:500px;height:500px;border:1px solid black;\">\n  direction: {direction}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Swipe Gesture in Svelte\nDESCRIPTION: Example of implementing a swipe gesture detection in a Svelte component. The code demonstrates how to use the swipe action directive, handle swipe events, and access direction, target, and pointer type details.\nSOURCE: https://github.com/rezi/svelte-gestures.git/blob/main/README.md#2025-04-18_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script lang=\"ts\">\nimport { swipe, type SwipeCustomEvent } from 'svelte-gestures';\nlet direction;\nlet target;\nlet pointerType;\n\nfunction handler(event: SwipeCustomEvent) {\n  direction = event.detail.direction;\n  target = event.detail.target;\n  pointerType = event.detail.pointerType;\n}\n</script>\n\n<div \n  use:swipe={()=>({ timeframe: 300, minSwipeDistance: 60 })} \n  on:swipe={handler} \n  style=\"width:500px;height:500px;border:1px solid black;\">\n  direction: {direction}\n</div>\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Press Gesture in Svelte\nDESCRIPTION: Example of implementing a press gesture in Svelte using the svelte-gestures library. Shows configuration of press parameters like timeframe, triggerBeforeFinished, and spread, as well as handling the press event to access coordinate and target information.\nSOURCE: https://github.com/rezi/svelte-gestures.git/blob/main/README_5.0.7.md#2025-04-18_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<script lang=\"ts\">\nimport { press, type PressCustomEvent } from 'svelte-gestures';\nlet x;\nlet y;\nlet target;\n\nfunction handler(event: PressCustomEvent) {\nx = event.detail.x;\ny = event.detail.y;\ntarget = event.detail.target\n}\n</script>\n<div use:press={{ timeframe: 300, triggerBeforeFinished: false }} on:press={handler} style=\"width:500px;height:500px;border:1px solid black;\">\n  press: {x} {y}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Press Gesture in Svelte\nDESCRIPTION: Example of implementing a press gesture detection in a Svelte component. The code demonstrates how to configure the press action with timeframe and triggerBeforeFinished options, and access press event details.\nSOURCE: https://github.com/rezi/svelte-gestures.git/blob/main/README.md#2025-04-18_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<script lang=\"ts\">\nimport { press, type PressCustomEvent } from 'svelte-gestures';\nlet x;\nlet y;\nlet target;\n\nfunction handler(event: PressCustomEvent) {\nx = event.detail.x;\ny = event.detail.y;\ntarget = event.detail.target\n}\n</script>\n<div use:press={()=>({ timeframe: 300, triggerBeforeFinished: false })} on:press={handler} style=\"width:500px;height:500px;border:1px solid black;\">\n  press: {x} {y}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Shape Gesture Recognition in Svelte\nDESCRIPTION: Example of implementing shape gesture recognition in Svelte using the svelte-gestures library. Demonstrates how to define multiple shapes for recognition (triangle, right-down, up-right), configure threshold parameters, and handle the shape recognition event.\nSOURCE: https://github.com/rezi/svelte-gestures.git/blob/main/README_5.0.7.md#2025-04-18_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<script lang=\"ts\">\n  import { shapeGesture, type ShapeCustomEvent } from 'svelte-gestures';\n  const shapeOptions = {\n    threshold: 0.5,\n    shapes: [\n      {\n        name: 'triangle',\n        allowRotation: true,\n        points: [\n          { x: 0, y: 0 },\n          { x: 50, y: 100 },\n          { x: 100, y: 0 },\n          { x: 0, y: 0 },\n        ],\n      },\n      {\n        name: 'right-down',\n        points: [\n          { x: 0, y: 0 },\n          { x: 100, y: 0 },\n          { x: 100, y: 100 },\n        ],\n      },\n      {\n        name: 'up-right',\n        bothDirections: false,\n        points: [\n          { x: 0, y: 100 },\n          { x: 0, y: 0 },\n          { x: 100, y: 0 },\n        ],\n      },\n    ],\n  };\n\n  let result;\n\n  function handler(event: ShapeCustomEvent) {\n    result = event.detail;\n  }\n</script>\n\n<div\n  use:shapeGesture=\"{shapeOptions}\"\n  on:shapeGesture=\"{handler}\"\n  style=\"width:500px;height:500px;background:#ddd;\"\n>\n  {#if result?.score} There is <b>{(result.score * 100).toFixed(0)}%</b> chance\n  you have drawn a <b>{result.pattern}</b> shape {/if}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Shape Gesture Recognition in Svelte\nDESCRIPTION: Example of implementing shape gesture recognition in a Svelte component. The code shows how to define shapes like triangles and directional patterns, set recognition thresholds, and handle shape detection results.\nSOURCE: https://github.com/rezi/svelte-gestures.git/blob/main/README.md#2025-04-18_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<script lang=\"ts\">\n  import { shapeGesture, type ShapeCustomEvent } from 'svelte-gestures';\n  const shapeOptions = {\n    threshold: 0.5,\n    shapes: [\n      {\n        name: 'triangle',\n        allowRotation: true,\n        points: [\n          { x: 0, y: 0 },\n          { x: 50, y: 100 },\n          { x: 100, y: 0 },\n          { x: 0, y: 0 },\n        ],\n      },\n      {\n        name: 'right-down',\n        points: [\n          { x: 0, y: 0 },\n          { x: 100, y: 0 },\n          { x: 100, y: 100 },\n        ],\n      },\n      {\n        name: 'up-right',\n        bothDirections: false,\n        points: [\n          { x: 0, y: 100 },\n          { x: 0, y: 0 },\n          { x: 100, y: 0 },\n        ],\n      },\n    ],\n  };\n\n  let result;\n\n  function handler(event: ShapeCustomEvent) {\n    result = event.detail;\n  }\n</script>\n\n<div\n  use:shapeGesture=\"{()=>shapeOptions}\"\n  on:shapeGesture=\"{handler}\"\n  style=\"width:500px;height:500px;background:#ddd;\"\n>\n  {#if result?.score} There is <b>{(result.score * 100).toFixed(0)}%</b> chance\n  you have drawn a <b>{result.pattern}</b> shape {/if}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Custom Double Tap Gesture Implementation in Svelte\nDESCRIPTION: Shows implementation of a custom double tap gesture using the setPointerControls utility. The gesture triggers when two taps occur within a specified timeframe and spatial threshold.\nSOURCE: https://github.com/rezi/svelte-gestures.git/blob/main/README_5.0.7.md#2025-04-18_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<script lang=\"ts\">\n  import { setPointerControls, DEFAULT_DELAY } from 'svelte-gestures';\n\n  let dx;\n  let dy;\n\n  function doubletapHandler(event) {\n    dx = event.detail.x;\n    dy = event.detail.y;\n  }\n\n  function doubletap(\n    node: HTMLElement,\n    parameters: { timeframe: number } = { timeframe: DEFAULT_DELAY }\n  ): { destroy: () => void } {\n    const gestureName = 'doubletap';\n    const spread = 20;\n\n    let startTime: number;\n    let clientX: number;\n    let clientY: number;\n    let tapCount = 0;\n    let timeout;\n\n    function onUp(activeEvents: PointerEvent[], event: PointerEvent) {\n      if (\n        Math.abs(event.clientX - clientX) < spread &&\n        Math.abs(event.clientY - clientY) < spread &&\n        Date.now() - startTime < parameters.timeframe\n      ) {\n        if (!tapCount) {\n          tapCount++;\n        } else {\n          const rect = node.getBoundingClientRect();\n          const x = Math.round(event.clientX - rect.left);\n          const y = Math.round(event.clientY - rect.top);\n\n          node.dispatchEvent(\n            new CustomEvent(gestureName, {\n              detail: { x, y },\n            })\n          );\n\n          clearTimeout(timeout);\n          tapCount = 0;\n        }\n      }\n    }\n\n    function onDown(activeEvents: PointerEvent[], event: PointerEvent) {\n      if (!tapCount) {\n        clientX = event.clientX;\n        clientY = event.clientY;\n        startTime = Date.now();\n      }\n\n      timeout = setTimeout(() => {\n        tapCount = 0;\n      }, parameters.timeframe);\n    }\n    return setPointerControls(gestureName, node, null, onDown, onUp);\n  }\n</script>\n<div\n  use:doubletap\n  on:doubletap=\"{doubletapHandler}\"\n  style=\"width:500px;height:500px;border:1px solid black;\"\n>\n  double tap me {dx} {dy}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Double Tap Gesture in Svelte\nDESCRIPTION: This example demonstrates how to create a custom double tap gesture using the setPointerControls function from svelte-gestures. The implementation tracks tap timing and position to detect double taps within a specified timeframe and spread distance.\nSOURCE: https://github.com/rezi/svelte-gestures.git/blob/main/README.md#2025-04-18_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<script lang=\"ts\">\n  import { setPointerControls, DEFAULT_DELAY } from 'svelte-gestures';\n\n  let dx;\n  let dy;\n\n  function doubletapHandler(event) {\n    dx = event.detail.x;\n    dy = event.detail.y;\n  }\n\n  function doubletap(\n    node: HTMLElement,\n    parameters: { timeframe: number } = { timeframe: DEFAULT_DELAY }\n  ): { destroy: () => void } {\n    const gestureName = 'doubletap';\n    const spread = 20;\n\n    let startTime: number;\n    let clientX: number;\n    let clientY: number;\n    let tapCount = 0;\n    let timeout;\n\n    function onUp(activeEvents: PointerEvent[], event: PointerEvent) {\n      if (\n        Math.abs(event.clientX - clientX) < spread &&\n        Math.abs(event.clientY - clientY) < spread &&\n        Date.now() - startTime < parameters.timeframe\n      ) {\n        if (!tapCount) {\n          tapCount++;\n        } else {\n          const rect = node.getBoundingClientRect();\n          const x = Math.round(event.clientX - rect.left);\n          const y = Math.round(event.clientY - rect.top);\n\n          node.dispatchEvent(\n            new CustomEvent(gestureName, {\n              detail: { x, y },\n            })\n          );\n\n          clearTimeout(timeout);\n          tapCount = 0;\n        }\n      }\n    }\n\n    function onDown(activeEvents: PointerEvent[], event: PointerEvent) {\n      if (!tapCount) {\n        clientX = event.clientX;\n        clientY = event.clientY;\n        startTime = Date.now();\n      }\n\n      timeout = setTimeout(() => {\n        tapCount = 0;\n      }, parameters.timeframe);\n    }\n    return setPointerControls(gestureName, node, null, onDown, onUp);\n  }\n</>\n<div\n  use:doubletap\n  on:doubletap=\"{doubletapHandler}\"\n  style=\"width:500px;height:500px;border:1px solid black;\"\n>\n  double tap me {dx} {dy}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Combined Pan and Scroll Gesture in Svelte\nDESCRIPTION: Demonstrates how to combine pan and scroll gestures with a press trigger condition. The code allows normal scrolling on quick swipes while enabling panning when the user presses for 100ms first.\nSOURCE: https://github.com/rezi/svelte-gestures.git/blob/main/README_5.0.7.md#2025-04-18_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<script lang=\"ts\">\n  import {\n    press,\n    pan,\n    scroll,\n    composedGesture,\n    type RegisterGestureType,\n    type GestureCallback,\n  } from 'svelte-gestures';\n\n  let x;\n  let y;\n\n  const scrollPan: GestureCallback = (register: RegisterGestureType) => {\n    const pressFns = register(press, {\n      triggerBeforeFinished: true,\n      spread: 10,\n      timeframe: 100,\n    });\n    const scrollFns = register(scroll, { delay: 0 });\n    const panFns = register(pan, { delay: 0 });\n\n    return (activeEvents: PointerEvent[], event: PointerEvent) => {\n      pressFns.onMove(activeEvents, event) || event.pointerType !== 'touch'\n        ? panFns.onMove(activeEvents, event)\n        : scrollFns.onMove(activeEvents, event);\n    };\n  };\n\n  function handler(event) {\n    x = event.detail.x;\n    y = event.detail.y;\n  }\n</script>\n<div\n  use:composedGesture=\"{scrollPan}\"\n  on:pan=\"{handler}\"\n  style=\"width:500px;height:500px;border:1px solid black;\"\n>\n  press: {x} {y}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Composed Pan and Scroll Gesture in Svelte\nDESCRIPTION: This example demonstrates how to combine pan and scroll gestures based on a press trigger. It uses the composedGesture function to create a system where fast swipes trigger scrolling while moves initiated with press trigger panning.\nSOURCE: https://github.com/rezi/svelte-gestures.git/blob/main/README.md#2025-04-18_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<script lang=\"ts\">\n  import {\n    press,\n    pan,\n    scroll,\n    composedGesture,\n    type RegisterGestureType,\n    type GestureCallback,\n  } from 'svelte-gestures';\n\n  let x;\n  let y;\n\n  const scrollPan: GestureCallback = (register: RegisterGestureType) => {\n    const pressFns = register(press, {\n      triggerBeforeFinished: true,\n      spread: 10,\n      timeframe: 100,\n    });\n    const scrollFns = register(scroll, { delay: 0 });\n    const panFns = register(pan, { delay: 0 });\n\n    return (activeEvents: PointerEvent[], event: PointerEvent) => {\n      pressFns.onMove(activeEvents, event) || event.pointerType !== 'touch'\n        ? panFns.onMove(activeEvents, event)\n        : scrollFns.onMove(activeEvents, event);\n    };\n  };\n\n  function handler(event) {\n    x = event.detail.x;\n    y = event.detail.y;\n  }\n</script>\n<div\n  use:composedGesture=\"{scrollPan}\"\n  on:pan=\"{handler}\"\n  style=\"width:500px;height:500px;border:1px solid black;\"\n>\n  press: {x} {y}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using Plugins with Pan Gesture in Svelte\nDESCRIPTION: This example shows how to use the highlight plugin with the pan gesture to visually represent gesture movements. The plugin options are stored in a reactive state variable, allowing for dynamic changes to properties like color after each gesture.\nSOURCE: https://github.com/rezi/svelte-gestures.git/blob/main/README.md#2025-04-18_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<script lang=\"ts\">\n  import { pan, type PanCustomEvent, type GestureCustomEvent, highlightPlugin } from 'svelte-gestures';\n  \n  let lineWidth = 8;\n  \n  let x = $state(0);\n  let y = $state(0);\n  let target: EventTarget | null = $state(null);\n  \n  function handler(event: PanCustomEvent) {\n    x = event.detail.x;\n    y = event.detail.y;\n    target = event.detail.target;\n  }\n  \n  function panUp(gestureEvent: GestureCustomEvent) {\n    gesturePluginOptions = { color: getColor(), fadeTime: 500, lineWidth };\n  }\n  \n  let gesturePluginOptions = $state({ color: '#00ff00', fadeTime: 500, lineWidth });\n  \n  const getColor = (): string => {\n    let n = (Math.random() * 0xfffff * 1000000).toString(16);\n    return '#' + n.slice(0, 6);\n  };\n</script>\n\n<div\n  use:pan={() => ({ plugins: [highlightPlugin(gesturePluginOptions)] })}\n  onpan={handler}\n  onpanup={panUp}\n  style=\"width:500px;height:500px;border:1px solid black;max-width:100%;\"\n>\n  pan: {x}\n  {y}\n  <br />\n  target: {target}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Pan Gesture Implementation with Delay Options\nDESCRIPTION: Complete example of implementing pan gesture with customizable delay option. The example shows how to track x/y coordinates, target element, and pointer type in a Svelte component.\nSOURCE: https://github.com/rezi/svelte-gestures.git/blob/main/README_5.0.7.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script lang=\"ts\">\n  import { pan, type PanCustomEvent } from 'svelte-gestures';\n  let x;\n  let y;\n  let target;\n  let pointerType;\n\n  function handler(event: PanCustomEvent) {\n    x = event.detail.x;\n    y = event.detail.y;\n    target = event.detail.target;\n    pointerType = event.detail.pointerType;\n    \n  }\n</script>\n\n<div\n  use:pan=\"{{delay:300}}\"\n  on:pan=\"{handler}\"\n  style=\"width:500px;height:500px;border:1px solid black;\"\n>\n  pan: {x} {y}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using Pan Gesture with Options in Svelte\nDESCRIPTION: Shows how to use the pan gesture recognizer with custom options and handle the pan event to display coordinates and pointer type.\nSOURCE: https://github.com/rezi/svelte-gestures.git/blob/main/README.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { pan, type PanCustomEvent } from 'svelte-gestures';\nlet x;\nlet y;\nlet target;\nlet pointerType;\n\nfunction handler(event: PanCustomEvent) {\n  x = event.detail.x;\n  y = event.detail.y;\n  target = event.detail.target;\n  pointerType = event.detail.pointerType;\n}\n```\n\nLANGUAGE: html\nCODE:\n```\n<div\n  use:pan=\"{()=>({delay:300})}\"\n  on:pan=\"{handler}\"\n  style=\"width:500px;height:500px;border:1px solid black;\"\n>\n  pan: {x} {y}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Gesture Event Detail Object Structure\nDESCRIPTION: Shows the structure of the event.detail object that is dispatched by gesture events. The object contains information about the pointer event, count of active pointers, target element, and position coordinates.\nSOURCE: https://github.com/rezi/svelte-gestures.git/blob/main/README_5.0.7.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{ \n  event: PointerEvent, \n  pointersCount: number , \n  target:HTMLElement,\n  x: number,\n  y: number,\n} \n```\n\n----------------------------------------\n\nTITLE: Pointer Controls Type Definition in TypeScript\nDESCRIPTION: Type definition for the setPointerControls function used to handle gesture events. Shows the structure and parameters required for custom gesture implementation.\nSOURCE: https://github.com/rezi/svelte-gestures.git/blob/main/README_5.0.7.md#2025-04-18_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nfunction setPointerControls(\n  gestureName: string,\n  node: HTMLElement,\n  onMoveCallback: (activeEvents: PointerEvent[], event: PointerEvent) => void,\n  onDownCallback: (activeEvents: PointerEvent[], event: PointerEvent) => void,\n  onUpCallback: (activeEvents: PointerEvent[], event: PointerEvent) => void\n);\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface for setPointerControls Function\nDESCRIPTION: This snippet defines the setPointerControls function signature used for creating custom gestures in svelte-gestures. It details the parameters needed to register and handle pointer events for custom gesture implementations.\nSOURCE: https://github.com/rezi/svelte-gestures.git/blob/main/README.md#2025-04-18_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nfunction setPointerControls(\n  gestureName: string,\n  node: HTMLElement,\n  onMoveCallback: (activeEvents: PointerEvent[], event: PointerEvent) => void,\n  onDownCallback: (activeEvents: PointerEvent[], event: PointerEvent) => void,\n  onUpCallback: (activeEvents: PointerEvent[], event: PointerEvent) => void\n);\n```\n\n----------------------------------------\n\nTITLE: Executing Build and Publish Commands for svelte-gestures\nDESCRIPTION: Commands for building the project, publishing to npm, and publishing to jsr. These are critical steps in the release process to ensure the package is properly built and distributed.\nSOURCE: https://github.com/rezi/svelte-gestures.git/blob/main/release-steps.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm run build\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm publish\n```\n\nLANGUAGE: shell\nCODE:\n```\njsr publish\n```"
  }
]