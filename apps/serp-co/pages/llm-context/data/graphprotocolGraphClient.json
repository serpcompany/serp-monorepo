[
  {
    "owner": "graphprotocol",
    "repo": "graph-client",
    "content": "TITLE: Configuring Graph Client Sources\nDESCRIPTION: Example YAML configuration file (.graphclientrc.yml) that defines GraphQL endpoint sources for The Graph.\nSOURCE: https://github.com/graphprotocol/graph-client/blob/main/docs/README.md#2025-04-18_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# .graphclientrc.yml\nsources:\n  - name: uniswapv2\n    handler:\n      graphql:\n        endpoint: https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v2\n```\n\n----------------------------------------\n\nTITLE: Using TypedDocumentNode with Graph Client in TypeScript\nDESCRIPTION: Example of importing and using a generated TypedDocumentNode in TypeScript for fully-typed GraphQL operations. The execute function returns results that match the exact structure of fields selected in your query.\nSOURCE: https://github.com/graphprotocol/graph-client/blob/main/docs/README.md#2025-04-18_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ExampleQueryDocument, execute } from '../.graphclient'\n\nasync function main() {\n  // \"result\" variable is fully typed, and represents the exact structure of the fields you selected in your query.\n  const result = await execute(ExampleQueryDocument, {})\n  console.log(result)\n}\n```\n\n----------------------------------------\n\nTITLE: Executing GraphQL Queries with Graph Client\nDESCRIPTION: TypeScript example showing how to import and use the generated execute function for running GraphQL queries.\nSOURCE: https://github.com/graphprotocol/graph-client/blob/main/docs/README.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { execute } from '../.graphclient'\n\nconst myQuery = gql`\n  query pairs {\n    pair(id: \"0x00004ee988665cdda9a1080d5792cecd16dc1220\") {\n      id\n      token0 {\n        id\n        symbol\n        name\n      }\n      token1 {\n        id\n        symbol\n        name\n      }\n    }\n  }\n`\n\nasync function main() {\n  const result = await execute(myQuery, {})\n  console.log(result)\n}\n\nmain()\n```\n\n----------------------------------------\n\nTITLE: Installing Graph Client CLI with Package Managers\nDESCRIPTION: Commands to install The Graph Client CLI as a development dependency using either Yarn or NPM.\nSOURCE: https://github.com/graphprotocol/graph-client/blob/main/docs/README.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn add -D @graphprotocol/client-cli\n# or, with NPM:\nnpm install --save-dev @graphprotocol/client-cli\n```\n\n----------------------------------------\n\nTITLE: Basic Live Query Implementation in GraphQL\nDESCRIPTION: Example of a basic GraphQL query using the @live directive to fetch real-time transaction data with default polling interval.\nSOURCE: https://github.com/graphprotocol/graph-client/blob/main/docs/live.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery ExampleQuery @live {\n  transactions(first: 2, orderBy: timestamp, orderDirection: desc) {\n    id\n    blockNumber\n    timestamp\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Queries with Runtime Configuration\nDESCRIPTION: TypeScript example demonstrating how to execute queries with runtime configuration variables.\nSOURCE: https://github.com/graphprotocol/graph-client/blob/main/docs/README.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexecute(myQuery, myVariables, {\n  config: {\n    apiToken: 'MY_TOKEN',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Automatic Pagination in graph-client YAML Configuration\nDESCRIPTION: Example configuration for enabling automatic pagination in a .graphclientrc.yml file. The configuration specifies the GraphQL endpoint for Uniswap V2 and applies the autoPagination transform with validation and customizable record limit settings.\nSOURCE: https://github.com/graphprotocol/graph-client/blob/main/packages/auto-pagination/README.md#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# .graphclientrc.yml\nsources:\n  - name: uniswap\n    handler:\n      graphql:\n        endpoint: https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v2\n    transforms:\n      - autoPagination:\n          validateSchema: true # Validates that the schema source actually contains the required input filters.\n          limitOfRecords: 1000 # Default is 1000, you can change if you indexer has different configuration in GRAPH_GRAPHQL_MAX_FIRST var.\n```\n\n----------------------------------------\n\nTITLE: Configuring Block Tracking in GraphClient YAML Configuration\nDESCRIPTION: A YAML configuration example showing how to set up automatic block tracking in a .graphclientrc.yml file. This enables the client to automatically fetch block information and use it for tracking in future queries against a Uniswap subgraph.\nSOURCE: https://github.com/graphprotocol/graph-client/blob/main/packages/block-tracking/README.md#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# .graphclientrc.yml\nsources:\n  - name: uniswap\n    handler:\n      graphql:\n        endpoint: https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v2\n    transforms: # The following section will make sure to automatically fetch the block information, and then use it for tracking in future queries.\n      - blockTracking:\n          validateSchema: true # Validates that the schema source actually contains _meta and input block filters.\n```\n\n----------------------------------------\n\nTITLE: Injecting Context Variables into GraphQL Execution\nDESCRIPTION: TypeScript example showing how to pass custom context variables to GraphQL operations during execution, making them available in resolvers.\nSOURCE: https://github.com/graphprotocol/graph-client/blob/main/docs/README.md#2025-04-18_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nexecute(\n  MY_QUERY,\n  {},\n  {\n    myHelper: {}, // this will be available in your Mutation resolver as `context.myHelper`\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: Client-side Composition Configuration\nDESCRIPTION: Shows how to configure client-side GraphQL composition to create a single GraphQL layer from multiple subgraphs.\nSOURCE: https://github.com/graphprotocol/graph-client/blob/main/docs/README.md#2025-04-18_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nsources:\n  - name: uniswapv2\n    handler:\n      graphql:\n        endpoint: https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v2\n  - name: compoundv2\n    handler:\n      graphql:\n        endpoint: https://api.thegraph.com/subgraphs/name/graphprotocol/compound-v2\n```\n\n----------------------------------------\n\nTITLE: Retry Strategy Configuration\nDESCRIPTION: Configuration for implementing retry mechanism for handling network errors or indexer unavailability.\nSOURCE: https://github.com/graphprotocol/graph-client/blob/main/docs/README.md#2025-04-18_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nsources:\n  - name: uniswapv2\n    handler:\n      graphql:\n        endpoint: https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v2\n        retry: 2 # specify here, if you have an unstable/error prone indexer\n```\n\n----------------------------------------\n\nTITLE: Setting Up and Running The Graph Client Cross-Chain Example\nDESCRIPTION: Command line instructions for installing dependencies, building the client locally, and running the cross-chain extension example. Also includes commands for launching Graph Client DevTools for interactive GraphQL exploration.\nSOURCE: https://github.com/graphprotocol/graph-client/blob/main/examples/cross-chain-extension/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# In the root directory\n$ yarn install\n$ yarn build\n$ cd examples/cross-chain-extension\n$ yarn build-client\n$ yarn start\n```\n\n----------------------------------------\n\nTITLE: Highest Value Strategy Configuration\nDESCRIPTION: Shows how to configure parallel requests to different endpoints and select the most updated data based on block numbers.\nSOURCE: https://github.com/graphprotocol/graph-client/blob/main/docs/README.md#2025-04-18_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nsources:\n  - name: uniswapv2\n    handler:\n      graphql:\n        strategy: highestValue\n        strategyConfig:\n          selectionSet: |\n            {\n              _meta {\n                block {\n                  number\n                }\n              }\n            }\n          value: '_meta.block.number'\n        sources:\n          - endpoint: https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v2-1\n          - endpoint: https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v2-2\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Network Headers\nDESCRIPTION: YAML configuration examples showing how to add custom headers including authentication for API requests.\nSOURCE: https://github.com/graphprotocol/graph-client/blob/main/docs/README.md#2025-04-18_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nsources:\n  - name: uniswapv2\n    handler:\n      graphql:\n        endpoint: https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v2\n        operationHeaders:\n          Authorization: Bearer MY_TOKEN\n```\n\nLANGUAGE: yaml\nCODE:\n```\nsources:\n  - name: uniswapv2\n    handler:\n      graphql:\n        endpoint: https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v2\n        operationHeaders:\n          Authorization: Bearer {context.config.apiToken}\n```\n\n----------------------------------------\n\nTITLE: Fallback Strategy Configuration\nDESCRIPTION: Configuration for implementing fallback mechanism between multiple GraphQL endpoints for reliability.\nSOURCE: https://github.com/graphprotocol/graph-client/blob/main/docs/README.md#2025-04-18_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nsources:\n  - name: uniswapv2\n    handler:\n      graphql:\n        strategy: fallback\n        sources:\n          - endpoint: https://bad-uniswap-v2-api.com\n            retry: 2\n            timeout: 5000\n          - endpoint: https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v2\n```\n\n----------------------------------------\n\nTITLE: Configuring Live Query Plugin in Graph Client\nDESCRIPTION: YAML configuration for enabling live queries in graph-client by adding the pollingLive plugin with a default interval setting.\nSOURCE: https://github.com/graphprotocol/graph-client/blob/main/docs/live.md#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nplugins:\n  - pollingLive:\n      defaultInterval: 1000\n```\n\n----------------------------------------\n\nTITLE: Type-Safe Mutation Resolvers with TypeScript\nDESCRIPTION: TypeScript implementation of custom GraphQL mutation resolvers using the generated types from Graph Client, providing full type safety for resolver arguments and return values.\nSOURCE: https://github.com/graphprotocol/graph-client/blob/main/docs/README.md#2025-04-18_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Resolvers } from './.graphclient'\n\n// Now it's fully typed!\nconst resolvers: Resolvers = {\n  Mutation: {\n    async doSomething(root, args, context, info) {\n      // Here, you can run anything you wish.\n      // For example, use `web3` lib, connect a wallet and so on.\n\n      return true\n    },\n  },\n}\n\nexport default resolvers\n```\n\n----------------------------------------\n\nTITLE: Race Strategy Configuration\nDESCRIPTION: Configuration for implementing race condition between multiple GraphQL endpoints to get the fastest response.\nSOURCE: https://github.com/graphprotocol/graph-client/blob/main/docs/README.md#2025-04-18_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nsources:\n  - name: uniswapv2\n    handler:\n      graphql:\n        strategy: race\n        sources:\n          - endpoint: https://bad-uniswap-v2-api.com\n          - endpoint: https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v2\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Mutation Resolvers in JavaScript\nDESCRIPTION: JavaScript implementation of a custom GraphQL mutation resolver that can execute arbitrary code when the mutation is called.\nSOURCE: https://github.com/graphprotocol/graph-client/blob/main/docs/README.md#2025-04-18_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  Mutation: {\n    async doSomething(root, args, context, info) {\n      // Here, you can run anything you wish.\n      // For example, use `web3` lib, connect a wallet and so on.\n\n      return true\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Timeout Strategy Configuration\nDESCRIPTION: Shows how to set timeout parameters for GraphQL endpoints to handle slow responses.\nSOURCE: https://github.com/graphprotocol/graph-client/blob/main/docs/README.md#2025-04-18_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nsources:\n  - name: uniswapv2\n    handler:\n      graphql:\n        endpoint: https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v2\n        timeout: 5000 # 5 seconds\n```\n\n----------------------------------------\n\nTITLE: Defining Client-Side Schema Extensions\nDESCRIPTION: YAML configuration for adding custom GraphQL type definitions to extend the schema with client-side functionality. This example adds a Mutation type with a custom operation.\nSOURCE: https://github.com/graphprotocol/graph-client/blob/main/docs/README.md#2025-04-18_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nadditionalTypeDefs: |\n  # We should define the missing `Mutation` type\n  extend schema {\n    mutation: Mutation\n  }\n\n  type Mutation {\n    doSomething(input: SomeCustomInput!): Boolean!\n  }\n\n  input SomeCustomInput {\n    field: String!\n  }\n```\n\n----------------------------------------\n\nTITLE: Block Tracking Configuration\nDESCRIPTION: Configuration for implementing block number tracking and following specific patterns with blockTracking transform.\nSOURCE: https://github.com/graphprotocol/graph-client/blob/main/docs/README.md#2025-04-18_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nsources:\n  - name: uniswapv2\n    handler:\n      graphql:\n        endpoint: https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v2\n    transforms:\n      - blockTracking:\n          validateSchema: true\n          ignoreFieldNames: [users, prices]\n          ignoreOperationNames: [NotFollowed]\n```\n\n----------------------------------------\n\nTITLE: Configuring Block Tracking Transform in Graph Client\nDESCRIPTION: YAML configuration example showing how to set up automatic block tracking using number_gte filter in graph-node. This configuration enables automated fetching and tracking of block numbers for entities.\nSOURCE: https://github.com/graphprotocol/graph-client/blob/main/packages/block-tracking/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsources:\n  - name: uniswap\n    handler:\n      graphql:\n        endpoint: https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v2\n    transforms:\n      - blockTracking:\n          validateSchema: true\n```\n\n----------------------------------------\n\nTITLE: Environment Variables in Graph Client Config\nDESCRIPTION: Demonstrates how to use environment variables in Graph Client configuration using runtime and build-time interpolation methods.\nSOURCE: https://github.com/graphprotocol/graph-client/blob/main/docs/README.md#2025-04-18_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nsources:\n  - name: uniswapv2\n    handler:\n      graphql:\n        endpoint: https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v2\n        operationHeaders:\n          Authorization: Bearer {env.MY_API_TOKEN} # runtime\n```\n\n----------------------------------------\n\nTITLE: Visualizing Subgraph Execution Strategies in Mermaid\nDESCRIPTION: This complex diagram showcases various subgraph execution strategies including race, fallback, retry, and highest value strategies for querying multiple sources.\nSOURCE: https://github.com/graphprotocol/graph-client/blob/main/docs/architecture.md#2025-04-18_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR;\n    subgraph race\n    req(Outgoing Query)-->sA[Subgraph A];\n    sA-->d{RaceStrategy};\n    d-->s1[Source 1];\n    d-->s2[Source 2];\n    s1-->d;\n    s2-->d;\n    end\n\n    subgraph fallback\n    req2(Outgoing Query)-->sA2[Subgraph A];\n    sA2-->d2{FallbackStrategy};\n    d2-->s3[Source 1];\n    s3-->|error|s4[Source 2];\n    s4-->|ok|d2;\n    s3-->|ok|d2;\n    end\n\n    subgraph retry\n    req3(Outgoing Query)-->sA3[Subgraph A];\n    sA3-->d3{RetryStrategy};\n    d3-->s5[Source 1];\n    s5-->|error|s5;\n    s5-->|ok|d3;\n    end\n\n    subgraph highestValue\n    req4(Outgoing Query)-->sA4[Subgraph A];\n    sA4-->d4{HighestValueStrategy};\n    d4-->s14[Source 1];\n    d4-->s24[Source 2];\n    s14-->synced4[\"process\"]\n    s24-->synced4\n    synced4-->|\"max(_meta.block_number)\"|d4\n    end\n```\n\n----------------------------------------\n\nTITLE: Build-time Environment Variables Config\nDESCRIPTION: Shows how to configure environment variables that are resolved during the build process using the graphclient build command.\nSOURCE: https://github.com/graphprotocol/graph-client/blob/main/docs/README.md#2025-04-18_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nsources:\n  - name: uniswapv2\n    handler:\n      graphql:\n        endpoint: https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v2\n        operationHeaders:\n          Authorization: Bearer ${MY_API_TOKEN} # build time\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Running The Graph Client Example\nDESCRIPTION: This code snippet shows the commands to install dependencies, build the client, and run the example project. It also includes a command to run The Graph Client DevTools.\nSOURCE: https://github.com/graphprotocol/graph-client/blob/main/examples/node/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# In the root directory\n$ yarn install\n$ yarn build\n$ cd examples/node\n$ yarn build-client\n$ yarn start\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Resolvers in YAML\nDESCRIPTION: YAML configuration that specifies the location of custom resolver implementations for client-side schema extensions.\nSOURCE: https://github.com/graphprotocol/graph-client/blob/main/docs/README.md#2025-04-18_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nadditionalResolvers:\n  - './resolvers'\n```\n\n----------------------------------------\n\nTITLE: Configuring Documents in Graph Client YAML\nDESCRIPTION: YAML configuration for specifying GraphQL operation documents in your Graph Client configuration file. This setup points to specific GraphQL files that contain your queries and operations.\nSOURCE: https://github.com/graphprotocol/graph-client/blob/main/docs/README.md#2025-04-18_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nsources:\n  -  # ... your Subgraphs/GQL sources here\n\ndocuments:\n  - ./src/example-query.graphql\n```\n\n----------------------------------------\n\nTITLE: Configuring Auto Pagination in Graph Client YAML\nDESCRIPTION: Configuration example for setting up automatic pagination in graph-client. Demonstrates how to configure a data source with pagination transforms, including schema validation and custom record limits.\nSOURCE: https://github.com/graphprotocol/graph-client/blob/main/packages/auto-pagination/CHANGELOG.md#2025-04-18_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# .graphclientrc.yml\nsources:\n  - name: uniswap\n    handler:\n      graphql:\n        endpoint: https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v2\n    transforms:\n      - autoPagination:\n          validateSchema: true # Validates that the schema source actually contains the required input filters.\n          limitOfRecords: 1000 # Default is 1000, you can change if you indexer has different configuration in GRAPH_GRAPHQL_MAX_FIRST var.\n```\n\n----------------------------------------\n\nTITLE: Using Glob Patterns for GraphQL Documents\nDESCRIPTION: YAML configuration using glob patterns to automatically find GraphQL operations in your project files, including both dedicated GraphQL files and operations embedded in TypeScript/JavaScript code.\nSOURCE: https://github.com/graphprotocol/graph-client/blob/main/docs/README.md#2025-04-18_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\ndocuments:\n  - './src/**/*.graphql'\n  - './src/**/*.{ts,tsx,js,jsx}'\n```\n\n----------------------------------------\n\nTITLE: Custom Interval Live Query in GraphQL\nDESCRIPTION: GraphQL query example demonstrating the use of @live directive with a custom polling interval of 5000ms.\nSOURCE: https://github.com/graphprotocol/graph-client/blob/main/docs/live.md#2025-04-18_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery ExampleQuery @live(interval: 5000) {\n  transactions(first: 2, orderBy: timestamp, orderDirection: desc) {\n    id\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing Graph Client Integration with Any GraphQL Client in Mermaid\nDESCRIPTION: This diagram shows how the Graph Client can be integrated with any GraphQL client through a compatibility layer, orchestrating queries to multiple subgraphs.\nSOURCE: https://github.com/graphprotocol/graph-client/blob/main/docs/architecture.md#2025-04-18_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR;\n    c[Any GraphQL Client]-->|fetch/Urql Exchange/Apollo Link|l[Compatibility Layer];\n    l-->|executes|g[Graph-Client];\n    g-->op[Orchestrator/Query Planner]\n    op-->sA[Subgraph A];\n    op-->sB[Subgraph B];\n```\n\n----------------------------------------\n\nTITLE: Visualizing Graph Client's Client-Side Composition with Mermaid Flowchart\nDESCRIPTION: A flowchart diagram showing how The Graph Client composes data from multiple subgraphs. It illustrates how Chain 1 and Chain 2 feed into Subgraph A and Subgraph B respectively, which are then combined through client-side composition into a unified schema with additional fields like chainId.\nSOURCE: https://github.com/graphprotocol/graph-client/blob/main/examples/cross-chain-extension/README.md#2025-04-18_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TB\n    linkStyle default interpolate basis\n    c1[(Chain 1)]-->t1\n    c2[(Chain 2)]-->t2\n\n    subgraph \"Subgraph A\"\n    t1(\"type Something\")\n    end\n\n    subgraph \"Subgraph B\"\n    t2(\"type Something\")\n    end\n\n    t1---ccc\n    t2---ccc\n    ccc[\"Client-side composition\"]---gc[\"Graph Client\"]\n\n    subgraph m[\"Composed Schema\"]\n    t3(\"type Something {\n      # ... rest of the fields\n      chainId: String!\n    }\")\n    end\n\n    gc---m\n```\n\n----------------------------------------\n\nTITLE: Visualizing Graph Client Architecture with Mermaid\nDESCRIPTION: Flowchart showing the architecture of The Graph Client implementation, demonstrating how data flows from multiple chains through subgraphs to client-side composition.\nSOURCE: https://github.com/graphprotocol/graph-client/blob/main/examples/cross-chain-sdk/README.md#2025-04-18_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TB\n    linkStyle default interpolate basis\n    c1[(Chain 1)]-->t1\n    c2[(Chain 2)]-->t2\n\n    subgraph \"Subgraph A\"\n    t1(\"type Something\")\n    end\n\n    subgraph \"Subgraph B\"\n    t2(\"type Something\")\n    end\n\n    t1---ccc\n    t2---ccc\n    ccc[\"Client-side composition\"]---gc[\"Graph Client\"]\n\n    subgraph m[\"Composed Schema\"]\n    t3(\"type Something {\n      # ... rest of the fields\n      chainId: String!\n    }\")\n    end\n\n    gc---m\n```\n\n----------------------------------------\n\nTITLE: Version Change Documentation in Markdown\nDESCRIPTION: Markdown formatted changelog documenting version changes, dependency updates, and features for the @graphprotocol/client-polling-live package, including breaking changes like dropping Node 14 support and new features like pause polling on inactive browser window.\nSOURCE: https://github.com/graphprotocol/graph-client/blob/main/packages/polling-live/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @graphprotocol/client-polling-live\n\n## 2.0.1\n\n### Patch Changes\n\n- [#576](https://github.com/graphprotocol/graph-client/pull/576) [`a8f657f`](https://github.com/graphprotocol/graph-client/commit/a8f657ffe9cbee1cc05a6534735769d582a24042) Thanks [@renovate](https://github.com/apps/renovate)! - dependencies updates:\n\n  - Updated dependency [`@envelop/core@^2.4.2 || ^3.0.0 || ^4.0.0 || ^5.0.0` ↗︎](https://www.npmjs.com/package/@envelop/core/v/2.4.2) (from `^2.4.2 || ^3.0.0 || ^4.0.0`, in `peerDependencies`)\n\n## 2.0.0\n\n### Major Changes\n\n- [#472](https://github.com/graphprotocol/graph-client/pull/472) [`a619e9f`](https://github.com/graphprotocol/graph-client/commit/a619e9f00aeb082ea04886d92888dfbe5c2698a6) Thanks [@renovate](https://github.com/apps/renovate)! - Drop Node 14 support and require Node 16 or higher\n```\n\n----------------------------------------\n\nTITLE: Installing and Running The Graph Client Standalone Example\nDESCRIPTION: Commands for setting up and running The Graph Client example in standalone mode. This includes installing dependencies, building the client locally, and running the example project. Additionally shows how to run The Graph Client DevTools.\nSOURCE: https://github.com/graphprotocol/graph-client/blob/main/examples/execute/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# In the root directory\n$ yarn install\n$ yarn build\n$ cd examples/execute\n$ yarn build-client\n$ yarn start\n```\n\n----------------------------------------\n\nTITLE: Installation and Setup Commands\nDESCRIPTION: Terminal commands for installing dependencies, building the client, and running the example in the monorepo structure.\nSOURCE: https://github.com/graphprotocol/graph-client/blob/main/examples/cross-chain-sdk/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# In the root directory\n$ yarn install\n$ yarn build\n$ cd examples/cross-chain-sdk\n$ yarn build-client\n$ yarn start\n```\n\n----------------------------------------\n\nTITLE: Visualizing Standalone Mode for Graph Client in Mermaid\nDESCRIPTION: This diagram illustrates the standalone mode of the Graph Client, showing the flow from the browser/node to the orchestrator and subgraphs.\nSOURCE: https://github.com/graphprotocol/graph-client/blob/main/docs/architecture.md#2025-04-18_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR;\n    c[Browser/Node]-->|executes|g[Graph-Client];\n    g-->op[Orchestrator/Query Planner]\n    op-->sA[Subgraph A];\n    op-->sB[Subgraph B];\n```\n\n----------------------------------------\n\nTITLE: Installing and Running The Graph Client with Apollo Client Example\nDESCRIPTION: Commands to install dependencies, build the client, and run the example project. The process starts in the root directory of the monorepo, builds the client, and then runs the Apollo integration example.\nSOURCE: https://github.com/graphprotocol/graph-client/blob/main/examples/apollo/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# In the root directory\n$ yarn install\n$ yarn build\n$ cd examples/apollo/\n$ yarn build-client\n$ yarn start\n```\n\n----------------------------------------\n\nTITLE: Running The Graph Client DevTools\nDESCRIPTION: This command launches The Graph Client DevTools, which provides a GraphiQL interface for interacting with the GraphQL API.\nSOURCE: https://github.com/graphprotocol/graph-client/blob/main/examples/node/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn graphiql\n```\n\n----------------------------------------\n\nTITLE: Visualizing Subscription-as-Query Concept in Mermaid\nDESCRIPTION: This diagram illustrates the concept of subscription-as-query, showing how a subscription request from an app is transformed into a query and how smart contract events trigger re-execution.\nSOURCE: https://github.com/graphprotocol/graph-client/blob/main/docs/architecture.md#2025-04-18_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR;\n    app[App]-->|subscription somedata|c;\n    c[Any GraphQL Client]-->l[Compatibility Layer];\n    l-->|executes|g[GraphQL Schema/Executor];\n    g-->op[Orchestrator]\n    op-->|query somedata|sA[Subgraph];\n    sc[Smart Contract]-->|change event|op;\n```\n\n----------------------------------------\n\nTITLE: Installing and Running The Graph Client with Next.js\nDESCRIPTION: Commands for installing dependencies, building the client, and running the Next.js example application. These commands should be executed in sequence, starting from the root directory of the monorepo.\nSOURCE: https://github.com/graphprotocol/graph-client/blob/main/examples/nextjs/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# In the root directory\n$ yarn install\n$ yarn build\n$ cd examples/nextjs/\n$ yarn build-client\n$ yarn dev\n```\n\n----------------------------------------\n\nTITLE: Visualizing Subgraph Composition Process in Mermaid\nDESCRIPTION: This diagram illustrates the process of subgraph composition, showing how multiple subgraph schemas are combined into a single GraphQL schema/executor.\nSOURCE: https://github.com/graphprotocol/graph-client/blob/main/docs/architecture.md#2025-04-18_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR;\n    g[GraphQL Schema/Executor]-->m{Composer};\n    m-->s1[Subgraph A GraphQL schema];\n    m-->s2[Subgraph B GraphQL schema];\n    m-->s3[Subgraph C GraphQL schema];\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Graph Client Example\nDESCRIPTION: Command sequence for installing dependencies, building the client, and running the composition example. Commands should be executed from the project root directory followed by the example directory.\nSOURCE: https://github.com/graphprotocol/graph-client/blob/main/examples/composition/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# In the root directory\n$ yarn install\n$ yarn build\n$ cd examples/composition\n$ yarn build-client\n$ yarn start\n```\n\n----------------------------------------\n\nTITLE: Installing and Running The Graph Client with Urql Example\nDESCRIPTION: Command sequence for setting up and running the example project that integrates The Graph Client with Urql. It includes installing dependencies, building the client, and launching the application.\nSOURCE: https://github.com/graphprotocol/graph-client/blob/main/examples/urql/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# In the root directory\n$ yarn install\n$ yarn build\n$ cd examples/urql/\n$ yarn build-client\n$ yarn start\n```\n\n----------------------------------------\n\nTITLE: Setting Up and Running The Graph Client with React Query\nDESCRIPTION: Command sequence for installing dependencies, building the client, and running the example application. Includes commands for both the root monorepo and the example project directory.\nSOURCE: https://github.com/graphprotocol/graph-client/blob/main/examples/react-query/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# In the root directory\n$ yarn install\n$ yarn build\n$ cd examples/react-query/\n$ yarn build-client\n$ yarn start\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Running the Example\nDESCRIPTION: Commands to install dependencies, build the project, and run the transforms example. This process involves setting up the environment in the root directory of the monorepo and then navigating to the specific example directory.\nSOURCE: https://github.com/graphprotocol/graph-client/blob/main/examples/transforms/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# In the root directory\n$ yarn install\n$ yarn build\n$ cd examples/transforms/\n$ yarn start\n```\n\n----------------------------------------\n\nTITLE: Running the Urql Live Query Example\nDESCRIPTION: Command sequence for installing dependencies, building the client, and running the example. These commands should be executed sequentially to properly set up and run the Urql live query example project.\nSOURCE: https://github.com/graphprotocol/graph-client/blob/main/examples/urql-live-query/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# In the root directory\n$ yarn install\n$ yarn build\n$ cd examples/urql-live-query/\n$ yarn build-client\n$ yarn start\n```\n\n----------------------------------------\n\nTITLE: Running The Graph Client DevTools\nDESCRIPTION: Command to launch The Graph Client DevTools GraphiQL interface for interactive query development and testing.\nSOURCE: https://github.com/graphprotocol/graph-client/blob/main/examples/apollo/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn graphiql\n```\n\n----------------------------------------\n\nTITLE: Running The Graph Client DevTools\nDESCRIPTION: Command for launching The Graph Client DevTools interface (GraphiQL) for development and testing GraphQL queries.\nSOURCE: https://github.com/graphprotocol/graph-client/blob/main/examples/nextjs/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn graphiql\n```\n\n----------------------------------------\n\nTITLE: Running The Graph Client DevTools\nDESCRIPTION: Command to launch The Graph Client DevTools, which provides a GraphiQL interface for exploring and testing GraphQL queries.\nSOURCE: https://github.com/graphprotocol/graph-client/blob/main/examples/urql/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn graphiql\n```\n\n----------------------------------------\n\nTITLE: Running The Graph Client DevTools\nDESCRIPTION: Command to launch The Graph Client DevTools with GraphiQL interface for testing and exploring GraphQL queries.\nSOURCE: https://github.com/graphprotocol/graph-client/blob/main/examples/react-query/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn graphiql\n```\n\n----------------------------------------\n\nTITLE: Running Graph Client Developer Tools\nDESCRIPTION: Command for launching The Graph Client DevTools, which provides a GraphiQL interface for development and testing of GraphQL queries.\nSOURCE: https://github.com/graphprotocol/graph-client/blob/main/examples/urql-live-query/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn graphiql\n```\n\n----------------------------------------\n\nTITLE: Version Requirements Update (v3.0.0)\nDESCRIPTION: Documents the major version change that drops Node.js 14 support and requires Node.js 16 or higher\nSOURCE: https://github.com/graphprotocol/graph-client/blob/main/packages/cli/CHANGELOG.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nDrop Node 14 support and require Node 16 or higher\n```\n\n----------------------------------------\n\nTITLE: Installing GraphQL Mesh Prefix Transform Dependency\nDESCRIPTION: Commands to install the @graphql-mesh/transform-prefix dependency using npm, yarn, or pnpm. This dependency is required to use the prefix transform from GraphQL Mesh in the project.\nSOURCE: https://github.com/graphprotocol/graph-client/blob/main/examples/transforms/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -D @graphql-mesh/transform-prefix\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add -D @graphql-mesh/transform-prefix\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add -D @graphql-mesh/transform-prefix\n```\n\n----------------------------------------\n\nTITLE: Dependency Update - Apollo Link 7.0.1\nDESCRIPTION: Updated @graphql-mesh/apollo-link package from 7.0.0 to 7.0.1\nSOURCE: https://github.com/graphprotocol/graph-client/blob/main/packages/apollo/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- Updated dependency [`@graphql-mesh/apollo-link@7.0.1` ↗︎](https://www.npmjs.com/package/@graphql-mesh/apollo-link/v/7.0.1) (from `7.0.0`, in `dependencies`)\n```\n\n----------------------------------------\n\nTITLE: Dependency Update - Apollo Link 7.0.0\nDESCRIPTION: Updated @graphql-mesh/apollo-link package from 6.0.0 to 7.0.0\nSOURCE: https://github.com/graphprotocol/graph-client/blob/main/packages/apollo/CHANGELOG.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- Updated dependency [`@graphql-mesh/apollo-link@7.0.0` ↗︎](https://www.npmjs.com/package/@graphql-mesh/apollo-link/v/7.0.0) (from `6.0.0`, in `dependencies`)\n```\n\n----------------------------------------\n\nTITLE: Version 2.0.7 Dependency Update\nDESCRIPTION: Updates @graphql-mesh/urql-exchange dependency from ^0.102.0 to ^0.103.0\nSOURCE: https://github.com/graphprotocol/graph-client/blob/main/packages/urql/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 2.0.7\n\n### Patch Changes\n\n- [#786](https://github.com/graphprotocol/graph-client/pull/786) [`e2964ca`](https://github.com/graphprotocol/graph-client/commit/e2964cac762934288d4232c7f5c16d2ccaa4b55d) Thanks [@renovate](https://github.com/apps/renovate)! - dependencies updates:\n  - Updated dependency [`@graphql-mesh/urql-exchange@^0.103.0` ↗︎](https://www.npmjs.com/package/@graphql-mesh/urql-exchange/v/0.103.0) (from `^0.102.0`, in `dependencies`)\n```\n\n----------------------------------------\n\nTITLE: Dependency Version Updates Markdown Changelog Entry\nDESCRIPTION: Markdown changelog entry documenting dependency updates and version changes for @graphql-mesh/cli and @graphql-mesh/graphql packages\nSOURCE: https://github.com/graphprotocol/graph-client/blob/main/packages/cli/CHANGELOG.md#2025-04-18_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- [#343](https://github.com/graphprotocol/graph-client/pull/343) [`1051b84`](https://github.com/graphprotocol/graph-client/commit/1051b84d4de76778a79427866fcb9aa51a61195b) Thanks [@renovate](https://github.com/apps/renovate)! - dependencies updates:\n\n  - Updated dependency [`@graphql-mesh/cli@0.82.5` ↗︎](https://www.npmjs.com/package/@graphql-mesh/cli/v/0.82.5) (from `0.82.3`, in `dependencies`)\n  - Updated dependency [`@graphql-mesh/graphql@0.33.4` ↗︎](https://www.npmjs.com/package/@graphql-mesh/graphql/v/0.33.4) (from `0.33.3`, in `dependencies`)\n```\n\n----------------------------------------\n\nTITLE: Additional Dependency Updates Markdown Entry\nDESCRIPTION: Another markdown changelog entry documenting further dependency version updates\nSOURCE: https://github.com/graphprotocol/graph-client/blob/main/packages/cli/CHANGELOG.md#2025-04-18_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n- [#352](https://github.com/graphprotocol/graph-client/pull/352) [`4f69b8c`](https://github.com/graphprotocol/graph-client/commit/4f69b8ce6c530279ac0cee8f514aaf8eb87cab25) Thanks [@renovate](https://github.com/apps/renovate)! - dependencies updates:\n\n  - Updated dependency [`@graphql-mesh/cli@0.82.6` ↗︎](https://www.npmjs.com/package/@graphql-mesh/cli/v/0.82.6) (from `0.82.5`, in `dependencies`)\n  - Updated dependency [`@graphql-mesh/graphql@0.33.5` ↗︎](https://www.npmjs.com/package/@graphql-mesh/graphql/v/0.33.5) (from `0.33.4`, in `dependencies`)\n```\n\n----------------------------------------\n\nTITLE: Package Version Updates Markdown\nDESCRIPTION: Changelog entries documenting version updates and dependency changes for the @graphprotocol/client-add-source-name package\nSOURCE: https://github.com/graphprotocol/graph-client/blob/main/packages/add-source-name/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @graphprotocol/client-add-source-name\n\n## 2.0.7\n\n### Patch Changes\n\n- [#786](https://github.com/graphprotocol/graph-client/pull/786) [`e2964ca`](https://github.com/graphprotocol/graph-client/commit/e2964cac762934288d4232c7f5c16d2ccaa4b55d) Thanks [@renovate](https://github.com/apps/renovate)! - dependencies updates:\n  - Updated dependency [`@graphql-mesh/types@^0.78.0 || ^0.79.0 || ^0.80.0 || ^0.81.0 || ^0.82.0 || ^0.83.0 || ^0.84.0 || ^0.85.0 || ^0.89.0 || ^0.90.0 || ^0.91.0 || ^0.93.0 || ^0.94.0 || ^0.97.0 || ^0.98.0 || ^0.99.0 || ^0.100.0 || ^0.101.0 || ^0.102.0` ↗︎](https://www.npmjs.com/package/@graphql-mesh/types/v/0.78.0) (from `^0.78.0 || ^0.79.0 || ^0.80.0 || ^0.81.0 || ^0.82.0 || ^0.83.0 || ^0.84.0 || ^0.85.0 || ^0.89.0 || ^0.90.0 || ^0.91.0 || ^0.93.0 || ^0.94.0 || ^0.97.0 || ^0.98.0 || ^0.99.0 || ^0.100.0 || ^0.101.0`, in `peerDependencies`)\n```\n\n----------------------------------------\n\nTITLE: Dependency Updates Log Entry\nDESCRIPTION: Log entry detailing package dependency updates including GraphQL tools and Mesh types versions.\nSOURCE: https://github.com/graphprotocol/graph-client/blob/main/packages/add-source-name/CHANGELOG.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- Updated dependency [`@graphql-tools/delegate@9.0.6` ↗︎](https://www.npmjs.com/package/@graphql-tools/delegate/v/9.0.6) (from `9.0.5`, in `peerDependencies`)\n- Updated dependency [`@graphql-tools/wrap@9.2.0` ↗︎](https://www.npmjs.com/package/@graphql-tools/wrap/v/9.2.0) (from `9.0.6`, in `peerDependencies`)\n- Updated dependency [`@graphql-tools/utils@8.12.0` ↗︎](https://www.npmjs.com/package/@graphql-tools/utils/v/8.12.0) (from `8.11.0`, in `peerDependencies`)\n```\n\n----------------------------------------\n\nTITLE: Updating Version and Dependencies in Markdown Changelog\nDESCRIPTION: This snippet shows a changelog entry for a patch version update of javascript-cjs-example to version 0.0.1. It indicates an update to the @graphprotocol/client-cli dependency, which has been updated to version 0.0.11.\nSOURCE: https://github.com/graphprotocol/graph-client/blob/main/examples/javascript-cjs/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# javascript-cjs-example\n\n## 0.0.1\n\n### Patch Changes\n\n- Updated dependencies [f360681]\n  - @graphprotocol/client-cli@0.0.11\n```\n\n----------------------------------------\n\nTITLE: Dependency Updates in package.json (v3.0.7)\nDESCRIPTION: Lists updated package dependencies including @graphql-mesh/cli and @graphql-mesh/graphql\nSOURCE: https://github.com/graphprotocol/graph-client/blob/main/packages/cli/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- Updated dependency [`@graphql-mesh/cli@^0.95.0` ↗︎](https://www.npmjs.com/package/@graphql-mesh/cli/v/0.95.0) (from `^0.94.0`, in `dependencies`)\n- Updated dependency [`@graphql-mesh/graphql@^0.102.0` ↗︎](https://www.npmjs.com/package/@graphql-mesh/graphql/v/0.102.0) (from `^0.101.0`, in `dependencies`)\n```\n\n----------------------------------------\n\nTITLE: Version Update Markdown Changelog\nDESCRIPTION: Markdown formatted changelog entries documenting dependency updates and changes across multiple versions of the Graph Client library.\nSOURCE: https://github.com/graphprotocol/graph-client/blob/main/packages/cli/CHANGELOG.md#2025-04-18_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- [#228](https://github.com/graphprotocol/graph-client/pull/228) [`7ac3002`](https://github.com/graphprotocol/graph-client/commit/7ac30020013f0bc93f68b91a5106e5052b737322) Thanks [@renovate](https://github.com/apps/renovate)! - dependencies updates:\n\n  - Updated dependency [`@graphql-mesh/cli@0.78.2` ↗︎](https://www.npmjs.com/package/@graphql-mesh/cli/v/0.78.2) (from `0.78.1`, in `dependencies`)\n  - Updated dependency [`@graphql-mesh/graphql@0.31.5` ↗︎](https://www.npmjs.com/package/@graphql-mesh/graphql/v/0.31.5) (from `0.31.4`, in `dependencies`)\n\n- Updated dependencies [[`7ac3002`](https://github.com/graphprotocol/graph-client/commit/7ac30020013f0bc93f68b91a5106e5052b737322), [`7ac3002`](https://github.com/graphprotocol/graph-client/commit/7ac30020013f0bc93f68b91a5106e5052b737322), [`7ac3002`](https://github.com/graphprotocol/graph-client/commit/7ac30020013f0bc93f68b91a5106e5052b737322)]:\n  - @graphprotocol/client-add-source-name@1.0.9\n  - @graphprotocol/client-auto-pagination@1.1.7\n  - @graphprotocol/client-auto-type-merging@1.0.10\n```\n\n----------------------------------------\n\nTITLE: Version Update Entry Format in Markdown\nDESCRIPTION: Shows the structured format used for documenting version changes and dependency updates in the changelog\nSOURCE: https://github.com/graphprotocol/graph-client/blob/main/packages/auto-pagination/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- [#393](https://github.com/graphprotocol/graph-client/pull/393) [`40eceda`](https://github.com/graphprotocol/graph-client/commit/40ecedad1248864098a6bbd8351468f238518d7e) Thanks [@renovate](https://github.com/apps/renovate)! - dependencies updates:\n\n  - Updated dependency [`@graphql-tools/wrap@9.3.8` ↗︎](https://www.npmjs.com/package/@graphql-tools/wrap/v/9.3.8) (from `9.3.7`, in `peerDependencies`)\n```\n\n----------------------------------------\n\nTITLE: Version Update Entry\nDESCRIPTION: Version update entry showing package version number and associated pull request details\nSOURCE: https://github.com/graphprotocol/graph-client/blob/main/packages/add-source-name/CHANGELOG.md#2025-04-18_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.0.9\n\n### Patch Changes\n\n- [#228](https://github.com/graphprotocol/graph-client/pull/228) [`7ac3002`](https://github.com/graphprotocol/graph-client/commit/7ac30020013f0bc93f68b91a5106e5052b737322)\n```\n\n----------------------------------------\n\nTITLE: Dependency Update - Apollo Link 6.0.0\nDESCRIPTION: Updated @graphql-mesh/apollo-link package from 5.0.2 to 6.0.0\nSOURCE: https://github.com/graphprotocol/graph-client/blob/main/packages/apollo/CHANGELOG.md#2025-04-18_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n- Updated dependency [`@graphql-mesh/apollo-link@6.0.0` ↗︎](https://www.npmjs.com/package/@graphql-mesh/apollo-link/v/6.0.0) (from `5.0.2`, in `dependencies`)\n```"
  }
]