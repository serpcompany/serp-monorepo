[
  {
    "owner": "kestra-io",
    "repo": "kestra",
    "content": "TITLE: Kestra Flow Definition in YAML\nDESCRIPTION: This YAML defines a Kestra flow that executes a Python script. The script is referenced using the `read` function, which reads the contents of the `scripts/hello.py` file from the code editor.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/webserver/src/main/resources/static/getting-started.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nid: hello\nnamespace: ${namespace}\n\ntasks:\n  - id: hello\n    type: io.kestra.plugin.scripts.python.Script\n    script: \"{{ read('scripts/hello.py') }}\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Hello World Flow (YAML)\nDESCRIPTION: This YAML snippet defines a simple Kestra flow named `hello_world` within the `dev` namespace. The flow contains a single task, `say_hello`, which uses the `io.kestra.plugin.core.log.Log` plugin to print the message \"Hello, World!\" to the logs.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/README.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nid: hello_world\nnamespace: dev\n\ntasks:\n  - id: say_hello\n    type: io.kestra.plugin.core.log.Log\n    message: \"Hello, World!\"\n```\n\n----------------------------------------\n\nTITLE: Define Kestra Dashboard in YAML\nDESCRIPTION: This YAML snippet defines a custom dashboard for Kestra. It includes configurations for time window, executions time series, and tables for metrics and logs. The dashboard displays executions over time, metrics aggregated per namespace, and logs aggregated per log level and namespace. It showcases the declarative syntax for defining dashboards as code, enabling version control and integration with workflows.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/dashboard_home.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: Getting Started\ndescription: First custom dashboard\ntimeWindow:\n  default: P7D\n  max: P365D\ncharts:\n  - id: executions_timeseries\n    type: io.kestra.plugin.core.dashboard.chart.TimeSeries\n    chartOptions:\n      displayName: Executions\n      description: Executions last week\n      legend:\n        enabled: true\n      column: date\n      colorByColumn: state\n    data:\n      type: io.kestra.plugin.core.dashboard.data.Executions\n      columns:\n        date:\n          field: START_DATE\n          displayName: Date\n        state:\n          field: STATE\n        total:\n          displayName: Executions\n          agg: COUNT\n          graphStyle: BARS\n        duration:\n          displayName: Duration\n          field: DURATION\n          agg: SUM\n          graphStyle: LINES\n\n  - id: table_metrics\n    type: io.kestra.plugin.core.dashboard.chart.Table\n    chartOptions:\n      displayName: Sum of sales per namespace\n    data:\n      type: io.kestra.plugin.core.dashboard.data.Metrics\n      columns:\n        namespace:\n          field: NAMESPACE\n        value:\n          field: VALUE\n          agg: SUM\n      where:\n        - field: NAME\n          type: EQUAL_TO\n          value: sales_count\n        - field: NAMESPACE\n          type: IN\n          values:\n            - dev_graph\n            - prod_graph\n      orderBy:\n        - column: value\n          order: DESC\n\n    - id: table_logs\n    type: io.kestra.plugin.core.dashboard.chart.Table\n    chartOptions:\n      displayName: Log count by level for filtered namespace\n    data:\n      type: io.kestra.plugin.core.dashboard.data.Logs\n      columns:\n        level:\n          field: LEVEL\n        count:\n          agg: COUNT\n      where:\n        - field: NAMESPACE\n          type: IN\n          values:\n            - dev_graph\n            - prod_graph\n```\n\n----------------------------------------\n\nTITLE: Defining a Kestra Flow in YAML\nDESCRIPTION: This YAML snippet defines a Kestra flow named `getting_started` with a namespace, description, labels, inputs, variables, tasks (including `runIf` and `finally`), `afterExecution` , outputs, plugin defaults, and a schedule-based trigger. It demonstrates how to structure a flow definition for execution within the Kestra orchestration platform.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nid: getting_started\nnamespace: company.team\ndescription: Let's `write` some **markdown**\n\nlabels:\n  team: data\n  owner: kestrel\n  project: falco\n  environment: dev\n  country: US\n\ninputs:\n  - id: user\n    type: STRING\n    required: false\n    defaults: Kestrel\n    description: This is an optional input â€” if not set at runtime, it will use the default value Kestrel\n\n  - id: run_task\n    type: BOOL\n    defaults: true\n\n  - id: pokemon\n    type: MULTISELECT\n    displayName: Choose your favorite Pokemon\n    description: You can pick more than one!\n    values:\n      - Pikachu\n      - Charizard\n      - Bulbasaur\n      - Psyduck\n      - Squirtle\n      - Mewtwo\n      - Snorlax\n    dependsOn:\n      inputs:\n        - run_task\n      condition: \"{{ inputs.run_task }}\"\n\n  - id: bird\n    type: SELECT\n    displayName: Choose your favorite Falco bird\n    values:\n      - Kestrel\n      - Merlin\n      - Peregrine Falcon\n      - American Kestrel\n    dependsOn:\n      inputs:\n        - user\n      condition: \"{{ inputs.user == 'Kestrel' }}\"\n\nvariables:\n  first: 1\n  second: \"{{ vars.first }} < 2\"\n\ntasks:\n  - id: hello\n    type: io.kestra.plugin.core.log.Log\n    description: this is a *task* documentation\n    message: |\n      The variables we used are {{ vars.first }} and {{ render(vars.second) }}.\n      The input is {{ inputs.user }} and the task was started at {{ taskrun.startDate }} from flow {{ flow.id }}.\n\n  - id: run_if_true\n    type: io.kestra.plugin.core.debug.Return\n    format: Hello World!\n    runIf: \"{{ inputs.run_task }}\"\n\n  - id: fallback\n    type: io.kestra.plugin.core.debug.Return\n    format: fallback output\n\nfinally:\n  - id: finally_log\n    type: io.kestra.plugin.core.log.Log\n    message: \"This task runs after all the tasks are run, irrespective of whether the tasks ran successfully or failed. Execution {{ execution.state }}\" # Execution RUNNING\n\nafterExecution:\n  - id: afterExecution_log\n    type: io.kestra.plugin.core.log.Log\n    message: \"This task runs after the flow execution is complete. Execution {{ execution.state }}\" # Execution FAILED / SUCCESS\n\noutputs:\n  - id: flow_output\n    type: STRING\n    value: \"{{ tasks.run_if_true.state != 'SKIPPED' ? outputs.run_if_true.value : outputs.fallback.value }}\"\n\npluginDefaults:\n  - type: io.kestra.plugin.core.log.Log\n    values:\n      level: TRACE\n\ntriggers:\n  - id: monthly\n    type: io.kestra.plugin.core.trigger.Schedule\n    cron: \"0 9 1 * *\" # 1st of each month at 9am\n```\n\n----------------------------------------\n\nTITLE: Running Kestra with Docker (Bash)\nDESCRIPTION: This command starts a Kestra server in local mode using Docker. It maps port 8080, mounts the Docker socket, and a temporary directory for file sharing. This allows for quick local testing and exploration of Kestra's features.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --pull=always --rm -it -p 8080:8080 --user=root \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  -v /tmp:/tmp kestra/kestra:latest server local\n```\n\n----------------------------------------\n\nTITLE: Accessing Task Output Attribute\nDESCRIPTION: This snippet shows how to access an output attribute from a previous task in the workflow.  It accesses `outputAttribute` from the task with ID `taskId`.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_5\n\nLANGUAGE: Pebble\nCODE:\n```\n{{ outputs.taskId.outputAttribute }}\n```\n\n----------------------------------------\n\nTITLE: Reading Internal Storage File\nDESCRIPTION: This snippet reads the content of an internal storage file named `subdir/file.txt` using the `read` function and returns its content as a string.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_16\n\nLANGUAGE: Pebble\nCODE:\n```\n{{ read('subdir/file.txt') }}\n```\n\n----------------------------------------\n\nTITLE: Conditional Statement with If/Else in Pebble\nDESCRIPTION: This snippet shows how to use an `if` statement with `elseif` and `else` clauses to control template flow based on different conditions. It checks if the `users` list is empty, has one element, or has multiple elements.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_47\n\nLANGUAGE: Pebble\nCODE:\n```\n{% if users is empty %} ... {% elseif users.length == 1 %} ... {% else %} ... {% endif %}\n```\n\n----------------------------------------\n\nTITLE: Running Kestra with Docker (PowerShell)\nDESCRIPTION: This command starts a Kestra server in local mode using Docker in PowerShell. It maps port 8080, mounts the Docker socket, and a temporary directory for file sharing. This allows for quick local testing and exploration of Kestra's features.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/README.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\ndocker run --pull=always --rm -it -p 8080:8080 --user=root `\n    -v \"/var/run/docker.sock:/var/run/docker.sock\" `\n    -v \"C:/Temp:/tmp\" kestra/kestra:latest server local\n```\n\n----------------------------------------\n\nTITLE: Running Kestra with Docker (CMD)\nDESCRIPTION: This command starts a Kestra server in local mode using Docker in Command Prompt. It maps port 8080, mounts the Docker socket, and a temporary directory for file sharing. This allows for quick local testing and exploration of Kestra's features.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/README.md#_snippet_2\n\nLANGUAGE: cmd\nCODE:\n```\ndocker run --pull=always --rm -it -p 8080:8080 --user=root ^\n    -v \"/var/run/docker.sock:/var/run/docker.sock\" ^\n    -v \"C:/Temp:/tmp\" kestra/kestra:latest server local\n```\n\n----------------------------------------\n\nTITLE: Running Kestra with Docker (WSL)\nDESCRIPTION: This command starts a Kestra server in local mode using Docker inside WSL. It maps port 8080, mounts the Docker socket, and a temporary directory for file sharing. This allows for quick local testing and exploration of Kestra's features.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --pull=always --rm -it -p 8080:8080 --user=root \\\n    -v \"/var/run/docker.sock:/var/run/docker.sock\" \\\n    -v \"C:/Temp:/tmp\" kestra/kestra:latest server local\n```\n\n----------------------------------------\n\nTITLE: JQ Filter in Pebble\nDESCRIPTION: This snippet demonstrates the `jq` filter in Pebble. It applies a JQ expression to an object to extract data. In the example, it extracts the `foo` property from `myObject`.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_66\n\nLANGUAGE: Pebble\nCODE:\n```\n{{ myObject | jq(\".foo\") }}\n```\n\n----------------------------------------\n\nTITLE: Check File Existence Kestra\nDESCRIPTION: This snippet illustrates how to check if a file exists at a specified URI location using the `fileExists` function in Kestra. The function takes the file URI as input and returns a boolean value indicating whether the file exists.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_100\n\nLANGUAGE: Kestra\nCODE:\n```\n{{ fileExists(output.download.uri) }}\n```\n\n----------------------------------------\n\nTITLE: Check If File Is Empty Kestra\nDESCRIPTION: This snippet demonstrates how to check if a file is empty at a given URI location using the `isFileEmpty` function in Kestra. The function takes the file URI as input and returns a boolean value indicating whether the file is empty.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_101\n\nLANGUAGE: Kestra\nCODE:\n```\n{{ isFileEmpty(output.download.uri) }}\n```\n\n----------------------------------------\n\nTITLE: Converting ION String to Object\nDESCRIPTION: This snippet converts an ION string to an object using the `fromIon` function and accesses the `someField` property. It assumes the `someItem` variable contains an ION string and that the `fromIon` function is available.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_10\n\nLANGUAGE: Pebble\nCODE:\n```\n{{ fromIon(read(someItem)).someField }}\n```\n\n----------------------------------------\n\nTITLE: Null-Coalescing and Date Formatting\nDESCRIPTION: This snippet uses null-coalescing to select between `trigger.date` and `execution.startDate`, then formats the selected date using the `date` filter.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_34\n\nLANGUAGE: Pebble\nCODE:\n```\n{{ trigger.date ?? execution.startDate | date('yyyy-MM-dd') }}\n```\n\n----------------------------------------\n\nTITLE: Converting YAML String to Object\nDESCRIPTION: This example converts a YAML string to an object using the `yaml` function and then accesses a property (`foo[0]`) of the resulting object. It depends on the availability of the `yaml` function within Kestra.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_11\n\nLANGUAGE: Pebble\nCODE:\n```\n{{ yaml('foo: [666, 1, 2]').foo[0] }}\n```\n\n----------------------------------------\n\nTITLE: Converting JSON String to Object\nDESCRIPTION: This example converts a JSON string to an object using the `fromJson` function and then accesses a property (`foo[0]`) of the resulting object. It depends on the availability of the `fromJson` function within Kestra.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_9\n\nLANGUAGE: Pebble\nCODE:\n```\n{{ fromJson('{\"foo\": [666, 1, 2]}').foo[0] }}\n```\n\n----------------------------------------\n\nTITLE: Function Usage in Pebble\nDESCRIPTION: This snippet illustrates how to use a function within a Pebble template to generate new content. The `max` function is used to determine the larger value between `user.score` and `highscore`. Functions provide dynamic calculations and value generation.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_45\n\nLANGUAGE: Pebble\nCODE:\n```\n{{ max(user.score, highscore) }}\n```\n\n----------------------------------------\n\nTITLE: Generating a List of Numbers\nDESCRIPTION: This example uses the `range` function to generate a list of numbers from 0 to 3 (inclusive).\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_6\n\nLANGUAGE: Pebble\nCODE:\n```\n{{ range(0, 3) }}\n```\n\n----------------------------------------\n\nTITLE: Flatten List Kestra\nDESCRIPTION: This snippet demonstrates how to flatten a nested list using the `flatten` function in Kestra. The function takes a nested list as input and returns a flattened list containing all the elements from the nested lists.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_97\n\nLANGUAGE: Kestra\nCODE:\n```\n{{ [[1, 2], [3, 4]] | flatten }}\n```\n\n----------------------------------------\n\nTITLE: Returning the Current Datetime in a Specific Timezone\nDESCRIPTION: This snippet returns the current datetime in the 'Europe/Paris' timezone using the `now` function.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_38\n\nLANGUAGE: Pebble\nCODE:\n```\n{{ now(timeZone='Europe/Paris') }}\n```\n\n----------------------------------------\n\nTITLE: Number Formatting Filter in Pebble\nDESCRIPTION: This snippet demonstrates the `numberFormat` filter in Pebble. It formats a number according to a specified pattern. In the example, it formats 12345.6789 as \"12,345.68\".\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_59\n\nLANGUAGE: Pebble\nCODE:\n```\n{{ 12345.6789 | numberFormat(\"###,###.##\") }}\n```\n\n----------------------------------------\n\nTITLE: Conditional Statements with Multiple Branches\nDESCRIPTION: This example demonstrates conditional statements with multiple branches using `if`, `elseif`, and `else` to handle different categories.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_33\n\nLANGUAGE: Pebble\nCODE:\n```\n{% if category == \"news\" %} ... {% elseif category == \"sports\" %} ... {% else %} ... {% endif %}\n```\n\n----------------------------------------\n\nTITLE: Retrieving KV Pair from Namespace\nDESCRIPTION: This snippet retrieves a Key-Value pair from the current namespace using the `kv` function. It requires the `MY_KEY` to be defined within the Kestra namespace.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_1\n\nLANGUAGE: Pebble\nCODE:\n```\n{{ kv('MY_KEY') }}\n```\n\n----------------------------------------\n\nTITLE: Conditional Block with Comparison\nDESCRIPTION: This example demonstrates a conditional block that checks if the `user.age` is greater than or equal to 18.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_27\n\nLANGUAGE: Pebble\nCODE:\n```\n{% if user.age >= 18 %} ... {% endif %}\n```\n\n----------------------------------------\n\nTITLE: Join Filter in Pebble\nDESCRIPTION: This snippet demonstrates the `join` filter in Pebble. It joins the elements of a list into a single string, using a specified delimiter.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_75\n\nLANGUAGE: Pebble\nCODE:\n```\n{{ [\"a\", \"b\", \"c\"] | join(\",\") }}\n```\n\n----------------------------------------\n\nTITLE: String Interpolation in Pebble\nDESCRIPTION: This snippet showcases string interpolation within a Pebble template literal.  It uses the `#{}` syntax to embed a variable's value directly within a string. 'who' represents the variable being interpolated.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_43\n\nLANGUAGE: Pebble\nCODE:\n```\n{{ \"Hello #{who}\" }}\n```\n\n----------------------------------------\n\nTITLE: Retrieving KV Pair with Error Handling\nDESCRIPTION: This snippet retrieves a KV pair from a given namespace and specifies whether to return an error or null if the key is missing.  It uses named parameters `key`, `namespace`, and `errorOnMissing` for clarity.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_3\n\nLANGUAGE: Pebble\nCODE:\n```\n{{ kv(key='KEY_ID', namespace='NAMESPACE_ID', errorOnMissing=false) }}\n```\n\n----------------------------------------\n\nTITLE: Macro with Default Argument Values\nDESCRIPTION: This example defines a macro named `input` with a default value for the `type` argument ('text').\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_39\n\nLANGUAGE: Pebble\nCODE:\n```\n{% macro input(type='text', name, value) %} ... {% endmacro %}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current Output of a Sibling Task\nDESCRIPTION: This snippet retrieves the current output of a sibling task named `first`. The `currentEachOutput` function is designed for iterating over outputs of sibling tasks in a map/reduce pattern.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_8\n\nLANGUAGE: Pebble\nCODE:\n```\n{{ currentEachOutput(outputs.first) }}\n```\n\n----------------------------------------\n\nTITLE: Date Addition Filter in Pebble\nDESCRIPTION: This snippet demonstrates the `dateAdd` filter in Pebble. It adds a specified amount of time to a date. The example adds 1 day to `execution.startDate`.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_78\n\nLANGUAGE: Pebble\nCODE:\n```\n{{ execution.startDate | dateAdd(1, \"DAYS\") }}\n```\n\n----------------------------------------\n\nTITLE: For Loop Iteration in Pebble\nDESCRIPTION: This snippet demonstrates how to iterate over a list of `articles` using a `for` loop in a Pebble template. The loop executes the code within its block for each item in the `articles` list.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_46\n\nLANGUAGE: Pebble\nCODE:\n```\n{% for article in articles %} ... {% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Replace Filter in Pebble\nDESCRIPTION: This snippet demonstrates the `replace` filter in Pebble. It replaces occurrences of a substring within a string. In the example, it replaces \"world\" with \"Kestra\" in \"Hello world!\".\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_60\n\nLANGUAGE: Pebble\nCODE:\n```\n{{ \"Hello world!\" | replace({'world': 'Kestra'}) }}\n```\n\n----------------------------------------\n\nTITLE: JSON Conversion Filter in Pebble\nDESCRIPTION: This snippet demonstrates the `toJson` filter in Pebble. It converts an object into a JSON string representation.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_64\n\nLANGUAGE: Pebble\nCODE:\n```\n{{ myObject | toJson }}\n```\n\n----------------------------------------\n\nTITLE: Merge Filter in Pebble\nDESCRIPTION: This snippet demonstrates the `merge` filter in Pebble. It merges two lists into a single list.  The lists are combined.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_68\n\nLANGUAGE: Pebble\nCODE:\n```\n{{ [1, 2] | merge([3, 4]) }}\n```\n\n----------------------------------------\n\nTITLE: YAML Conversion Filter in Pebble\nDESCRIPTION: This snippet demonstrates the `yaml` filter in Pebble. It converts an object into a YAML string representation.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_61\n\nLANGUAGE: Pebble\nCODE:\n```\n{{ myObject | yaml }}\n```\n\n----------------------------------------\n\nTITLE: Split Filter in Pebble\nDESCRIPTION: This snippet demonstrates the `split` filter in Pebble. It splits a string into a list of substrings based on a delimiter. The example splits \"a,b,c\" into [\"a\", \"b\", \"c\"].\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_73\n\nLANGUAGE: Pebble\nCODE:\n```\n{{ \"a,b,c\" | split(\",\") }}\n```\n\n----------------------------------------\n\nTITLE: Date Formatting Filter in Pebble\nDESCRIPTION: This snippet demonstrates the `date` filter in Pebble. It formats a date object according to a specified pattern. The example formats `execution.startDate` as \"yyyy-MM-dd\".\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_77\n\nLANGUAGE: Pebble\nCODE:\n```\n{{ execution.startDate | date(\"yyyy-MM-dd\") }}\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable Template Fragment\nDESCRIPTION: This example defines a reusable template fragment (macro) named `input` that takes `type` and `name` as parameters.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_23\n\nLANGUAGE: Pebble\nCODE:\n```\n{% macro input(type, name) %} ... {% endmacro %}\n```\n\n----------------------------------------\n\nTITLE: Concatenating Multiple Strings\nDESCRIPTION: This snippet demonstrates string concatenation using the `~` operator. It combines \"apple\", \"pear\", and \"banana\" into a single string.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_19\n\nLANGUAGE: Pebble\nCODE:\n```\n{{ \"apple\" ~ \"pear\" ~ \"banana\" }}\n```\n\n----------------------------------------\n\nTITLE: Chaining Multiple Filters\nDESCRIPTION: This example chains multiple filters together. The `upper` filter converts \"apple\" to uppercase, and then the `abbreviate(3)` filter abbreviates the result to 3 characters.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_37\n\nLANGUAGE: Pebble\nCODE:\n```\n{{ \"apple\" | upper | abbreviate(3) }}\n```\n\n----------------------------------------\n\nTITLE: Defining a Variable in Current Context\nDESCRIPTION: This snippet defines a variable named `header` and assigns it the value \"Test Page\" using the `set` tag.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_25\n\nLANGUAGE: Pebble\nCODE:\n```\n{% set header = \"Test Page\" %}\n```\n\n----------------------------------------\n\nTITLE: String Modification with Filters in Pebble\nDESCRIPTION: This snippet demonstrates the use of filters to modify string content within a Pebble template. It chains the `upper` and `abbreviate` filters to convert the string to uppercase and abbreviate it to 13 characters, respectively.  Filters allow transforming variable values.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_44\n\nLANGUAGE: Pebble\nCODE:\n```\n{{ \"When life gives you lemons, make lemonade.\" | upper | abbreviate(13) }}\n```\n\n----------------------------------------\n\nTITLE: Retrieving KV Pair from Specific Namespace\nDESCRIPTION: This example retrieves a KV pair from a specific namespace. It uses the `kv` function with two arguments: the key ('MY_KEY') and the namespace ('company.team').\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_2\n\nLANGUAGE: Pebble\nCODE:\n```\n{{ kv('MY_KEY', 'company.team') }}\n```\n\n----------------------------------------\n\nTITLE: Subtracting Days from Execution Start Date\nDESCRIPTION: This snippet subtracts one day from the execution start date using `dateAdd` filter and null-coalescing.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_35\n\nLANGUAGE: Pebble\nCODE:\n```\n{{ trigger.date ?? execution.startDate | dateAdd(-1, 'DAYS') }}\n```\n\n----------------------------------------\n\nTITLE: Default Value Filter in Pebble\nDESCRIPTION: This snippet demonstrates the `default` filter in Pebble. It returns a default value if the input is null or empty.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_82\n\nLANGUAGE: Pebble\nCODE:\n```\n{{ myVar | default(\"default value\") }}\n```\n\n----------------------------------------\n\nTITLE: Applying a Filter to a Template Chunk\nDESCRIPTION: This snippet applies the `upper` filter to the string \"hello\" using the `filter` tag, converting it to uppercase.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_26\n\nLANGUAGE: Pebble\nCODE:\n```\n{% filter upper %}hello{% endfilter %}\n```\n\n----------------------------------------\n\nTITLE: SHA-256 Hash Filter in Pebble\nDESCRIPTION: This snippet demonstrates the `sha256` filter in Pebble. It computes the SHA-256 hash of a string.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_95\n\nLANGUAGE: Pebble\nCODE:\n```\n{{ \"hello\" | sha256 }}\n```\n\n----------------------------------------\n\nTITLE: Conditional Block Based on Expression\nDESCRIPTION: This snippet shows a conditional block that executes only if the `users` list is empty using the `is empty` operator.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_22\n\nLANGUAGE: Pebble\nCODE:\n```\n{% if users is empty %} ... {% endif %}\n```\n\n----------------------------------------\n\nTITLE: Distinct Filter in Pebble\nDESCRIPTION: This snippet demonstrates the `distinct` filter in Pebble. It returns a list of unique elements from the input list.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_88\n\nLANGUAGE: Pebble\nCODE:\n```\n{{ ['1', '1', '2', '3'] | distinct }}\n```\n\n----------------------------------------\n\nTITLE: SHA-512 Hash Filter in Pebble\nDESCRIPTION: This snippet demonstrates the `sha512` filter in Pebble. It computes the SHA-512 hash of a string.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_96\n\nLANGUAGE: Pebble\nCODE:\n```\n{{ \"hello\" | sha512 }}\n```\n\n----------------------------------------\n\nTITLE: Base64 Encode Filter in Pebble\nDESCRIPTION: This snippet demonstrates the `base64Encode` filter in Pebble. It encodes a string using Base64 encoding.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_91\n\nLANGUAGE: Pebble\nCODE:\n```\n{{ \"hello\" | base64Encode }}\n```\n\n----------------------------------------\n\nTITLE: Base64 Decode Filter in Pebble\nDESCRIPTION: This snippet demonstrates the `base64Decode` filter in Pebble. It decodes a Base64-encoded string.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_92\n\nLANGUAGE: Pebble\nCODE:\n```\n{{ \"aGVsbG8=\" | base64Decode }}\n```\n\n----------------------------------------\n\nTITLE: URL Encode Filter in Pebble\nDESCRIPTION: This snippet demonstrates the `urlEncode` filter in Pebble. It URL-encodes a string.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_89\n\nLANGUAGE: Pebble\nCODE:\n```\n{{ \"a b\" | urlEncode }}\n```\n\n----------------------------------------\n\nTITLE: URL Decode Filter in Pebble\nDESCRIPTION: This snippet demonstrates the `urlDecode` filter in Pebble. It URL-decodes a string.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_90\n\nLANGUAGE: Pebble\nCODE:\n```\n{{ \"a%20b\" | urlDecode }}\n```\n\n----------------------------------------\n\nTITLE: Returning the Maximum of Two Values\nDESCRIPTION: This snippet uses the `max` function to return the larger of the two values: the `user.age` attribute and the number 80.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_12\n\nLANGUAGE: Pebble\nCODE:\n```\n{{ max(user.age, 80) }}\n```\n\n----------------------------------------\n\nTITLE: SHA-1 Hash Filter in Pebble\nDESCRIPTION: This snippet demonstrates the `sha1` filter in Pebble. It computes the SHA-1 hash of a string.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_94\n\nLANGUAGE: Pebble\nCODE:\n```\n{{ \"hello\" | sha1 }}\n```\n\n----------------------------------------\n\nTITLE: Length Filter in Pebble\nDESCRIPTION: This snippet demonstrates the `length` filter in Pebble. It returns the length of a string or the number of elements in a list. In the example, it returns the length of the string \"Hello\".\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_67\n\nLANGUAGE: Pebble\nCODE:\n```\n{{ \"Hello\" | length }}\n```\n\n----------------------------------------\n\nTITLE: JSON String Check in Pebble\nDESCRIPTION: This snippet demonstrates how to check if a variable is a valid JSON string within a Pebble template using `is json`. The code block inside the `if` statement will only execute if the string `'{\"test\": 1}'` is a valid JSON string.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_53\n\nLANGUAGE: Pebble\nCODE:\n```\n{% if '{\"test\": 1}' is json %} ... {% endif %}\n```\n\n----------------------------------------\n\nTITLE: Slice Filter in Pebble\nDESCRIPTION: This snippet demonstrates the `slice` filter in Pebble. It extracts a portion of a string (a substring). The example shows how to extract \"Hello\" from \"Hello, world!\".\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_71\n\nLANGUAGE: Pebble\nCODE:\n```\n{{ \"Hello, world!\" | slice(0, 5) }}\n```\n\n----------------------------------------\n\nTITLE: Reverse Filter in Pebble\nDESCRIPTION: This snippet demonstrates the `reverse` filter in Pebble. It reverses the order of elements in a list.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_69\n\nLANGUAGE: Pebble\nCODE:\n```\n{{ [1, 2, 3] | reverse }}\n```\n\n----------------------------------------\n\nTITLE: Newline Indentation Filter in Pebble\nDESCRIPTION: This snippet demonstrates the `nindent` filter in Pebble. It adds a newline character and then a specified number of spaces before each line of a string, including the first line.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_63\n\nLANGUAGE: Pebble\nCODE:\n```\n{{ \"Hello\\nworld\" | nindent(4) }}\n```\n\n----------------------------------------\n\nTITLE: Sort Filter in Pebble\nDESCRIPTION: This snippet demonstrates the `sort` filter in Pebble. It sorts a list in ascending order.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_72\n\nLANGUAGE: Pebble\nCODE:\n```\n{{ [3, 1, 2] | sort }}\n```\n\n----------------------------------------\n\nTITLE: Microsecond Timestamp Filter in Pebble\nDESCRIPTION: This snippet demonstrates the `timestampMicro` filter in Pebble. It converts a date to a Unix timestamp in microseconds.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_80\n\nLANGUAGE: Pebble\nCODE:\n```\n{{ execution.startDate | timestampMicro }}\n```\n\n----------------------------------------\n\nTITLE: Timestamp Filter in Pebble\nDESCRIPTION: This snippet demonstrates the `timestamp` filter in Pebble. It converts a date to a Unix timestamp in seconds.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_79\n\nLANGUAGE: Pebble\nCODE:\n```\n{{ execution.startDate | timestamp }}\n```\n\n----------------------------------------\n\nTITLE: Returning the Minimum of Two Values\nDESCRIPTION: This snippet uses the `min` function to return the smaller of the two values: the `user.age` attribute and the number 80.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_13\n\nLANGUAGE: Pebble\nCODE:\n```\n{{ min(user.age, 80) }}\n```\n\n----------------------------------------\n\nTITLE: Accessing a Child Attribute of a Variable\nDESCRIPTION: This snippet accesses a child attribute (`bar`) of a variable (`foo`).  It assumes the `foo` variable is an object with a `bar` property.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_41\n\nLANGUAGE: Pebble\nCODE:\n```\n{{ foo.bar }}\n```\n\n----------------------------------------\n\nTITLE: MD5 Hash Filter in Pebble\nDESCRIPTION: This snippet demonstrates the `md5` filter in Pebble. It computes the MD5 hash of a string.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_93\n\nLANGUAGE: Pebble\nCODE:\n```\n{{ \"hello\" | md5 }}\n```\n\n----------------------------------------\n\nTITLE: Checking if a Collection Contains an Item\nDESCRIPTION: This snippet checks if the collection `[\"apple\", \"pear\", \"banana\"]` contains the item \"apple\" using the `contains` operator.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_20\n\nLANGUAGE: Pebble\nCODE:\n```\n{{ [\"apple\", \"pear\", \"banana\"] contains \"apple\" }}\n```\n\n----------------------------------------\n\nTITLE: Accessing Namespace Variable\nDESCRIPTION: This snippet demonstrates how to access a variable defined within a specific namespace. It assumes that the `namespace.myproject.myvariable` is properly defined in the Kestra namespace configuration.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_4\n\nLANGUAGE: Pebble\nCODE:\n```\n{{ namespace.myproject.myvariable }}\n```\n\n----------------------------------------\n\nTITLE: Variable Definition Check in Pebble\nDESCRIPTION: This snippet demonstrates how to check if a variable is defined within a Pebble template using `is not defined`. The code block inside the `if` statement will only execute if the variable `missing` is not defined.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_49\n\nLANGUAGE: Pebble\nCODE:\n```\n{% if missing is not defined %} ... {% endif %}\n```\n\n----------------------------------------\n\nTITLE: Null-Coalescing Operator\nDESCRIPTION: This example demonstrates the null-coalescing operator (`foo ?? bar ?? baz`) to test if variables are defined. It returns the first variable that is not null.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_29\n\nLANGUAGE: Pebble\nCODE:\n```\n{{ foo ?? bar ?? baz }}\n```\n\n----------------------------------------\n\nTITLE: Number Conversion Filter in Pebble\nDESCRIPTION: This snippet demonstrates the `number` filter in Pebble. It parses a string into a number. In the example, it converts the string \"123\" into the number 123.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_58\n\nLANGUAGE: Pebble\nCODE:\n```\n{{ \"123\" | number }}\n```\n\n----------------------------------------\n\nTITLE: Iterable Check in Pebble\nDESCRIPTION: This snippet demonstrates how to check if a variable is iterable within a Pebble template using `is iterable`. The code block inside the `if` statement will only execute if the `users` variable is iterable (e.g., a list or array).\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_52\n\nLANGUAGE: Pebble\nCODE:\n```\n{% if users is iterable %} ... {% endif %}\n```\n\n----------------------------------------\n\nTITLE: Using Named Arguments in a Filter\nDESCRIPTION: This snippet uses named arguments in the `date` filter to specify the existing date format.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_36\n\nLANGUAGE: Pebble\nCODE:\n```\n{{ stringDate | date('yyyy/MMMM/d', existingFormat='yyyy-MMMM-d') }}\n```\n\n----------------------------------------\n\nTITLE: ION Conversion Filter in Pebble\nDESCRIPTION: This snippet demonstrates the `toIon` filter in Pebble. It converts an object into an ION string representation.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_65\n\nLANGUAGE: Pebble\nCODE:\n```\n{{ myObject | toIon }}\n```\n\n----------------------------------------\n\nTITLE: Reverse Sort Filter in Pebble\nDESCRIPTION: This snippet demonstrates the `rsort` filter in Pebble. It sorts a list in reverse (descending) order.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_70\n\nLANGUAGE: Pebble\nCODE:\n```\n{{ [3, 1, 2] | rsort }}\n```\n\n----------------------------------------\n\nTITLE: Variable Emptiness Check in Pebble\nDESCRIPTION: This snippet demonstrates how to check if a variable is empty within a Pebble template using `is empty`. The code block inside the `if` statement will only execute if the `user.email` variable is empty.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_50\n\nLANGUAGE: Pebble\nCODE:\n```\n{% if user.email is empty %} ... {% endif %}\n```\n\n----------------------------------------\n\nTITLE: Convert To String Kestra\nDESCRIPTION: This snippet shows how to convert a value to a string using the `string` function in Kestra. The function takes a value as input and returns its string representation.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_102\n\nLANGUAGE: Kestra\nCODE:\n```\n{{ 123 | string }}\n```\n\n----------------------------------------\n\nTITLE: Uppercase Filter in Pebble\nDESCRIPTION: This snippet demonstrates the `upper` filter in Pebble. It converts a string to uppercase.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_85\n\nLANGUAGE: Pebble\nCODE:\n```\n{{ \"hello\" | upper }}\n```\n\n----------------------------------------\n\nTITLE: Chunk List Kestra\nDESCRIPTION: This snippet shows how to split a list into chunks of a specified size using the `chunk` function in Kestra. The function takes a list and a chunk size as input and returns a list of lists, where each inner list is a chunk of the original list.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_98\n\nLANGUAGE: Kestra\nCODE:\n```\n{{ [1, 2, 3, 4] | chunk(2) }}\n```\n\n----------------------------------------\n\nTITLE: Writing a Block of Unparsed Syntax\nDESCRIPTION: This snippet uses the `raw` tag to write a block of syntax that won't be parsed by the template engine. This is useful for including code that should be interpreted literally.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_24\n\nLANGUAGE: Pebble\nCODE:\n```\n{% raw %}{{ user.name }}{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Lowercase Filter in Pebble\nDESCRIPTION: This snippet demonstrates the `lower` filter in Pebble. It converts a string to lowercase.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_84\n\nLANGUAGE: Pebble\nCODE:\n```\n{{ \"HELLO\" | lower }}\n```\n\n----------------------------------------\n\nTITLE: Iterating Over a List of Values\nDESCRIPTION: This snippet demonstrates iterating over a list of users using a `for` loop. It prints the index and ID of each user.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_21\n\nLANGUAGE: Pebble\nCODE:\n```\n{% for user in users %}{{ loop.index }} - {{ user.id }}{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: First Element Filter in Pebble\nDESCRIPTION: This snippet demonstrates the `first` filter in Pebble. It returns the first element of a list.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_86\n\nLANGUAGE: Pebble\nCODE:\n```\n{{ [1, 2, 3] | first }}\n```\n\n----------------------------------------\n\nTITLE: Accessing Attribute with Special Characters in Pebble\nDESCRIPTION: This snippet demonstrates how to access an attribute within a Pebble template when the attribute name contains special characters. Subscript notation (`foo['foo-bar']`) is used to correctly reference the attribute.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_42\n\nLANGUAGE: Pebble\nCODE:\n```\n{{ foo['foo-bar'] }}\n```\n\n----------------------------------------\n\nTITLE: Last Element Filter in Pebble\nDESCRIPTION: This snippet demonstrates the `last` filter in Pebble. It returns the last element of a list.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_87\n\nLANGUAGE: Pebble\nCODE:\n```\n{{ [1, 2, 3] | last }}\n```\n\n----------------------------------------\n\nTITLE: Recursively Rendering a Variable\nDESCRIPTION: This example recursively renders the variable `namespace.github.token` which contains Pebble expressions using the `render` function.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_17\n\nLANGUAGE: Pebble\nCODE:\n```\n{{ render(namespace.github.token) }}\n```\n\n----------------------------------------\n\nTITLE: Capitalize Filter in Pebble\nDESCRIPTION: This snippet demonstrates the `capitalize` filter in Pebble. It capitalizes the first letter of a string.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_74\n\nLANGUAGE: Pebble\nCODE:\n```\n{{ \"hello\" | capitalize }}\n```\n\n----------------------------------------\n\nTITLE: Macro Invocation in Pebble\nDESCRIPTION: This snippet demonstrates how to invoke a macro, named `input`, like a function in a Pebble template. The macro accepts parameters such as the input type, name, and default value.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_48\n\nLANGUAGE: Pebble\nCODE:\n```\n{{ input(\"text\", \"name\", \"Mitchell\") }}\n```\n\n----------------------------------------\n\nTITLE: Trim Filter in Pebble\nDESCRIPTION: This snippet demonstrates the `trim` filter in Pebble. It removes leading and trailing whitespace from a string.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_83\n\nLANGUAGE: Pebble\nCODE:\n```\n{{ \" Hello \" | trim }}\n```\n\n----------------------------------------\n\nTITLE: Keys Filter in Pebble\nDESCRIPTION: This snippet demonstrates the `keys` filter in Pebble. It returns the keys of a map as a list.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_76\n\nLANGUAGE: Pebble\nCODE:\n```\n{{ {\"a\": 1, \"b\": 2} | keys }}\n```\n\n----------------------------------------\n\nTITLE: Basic Mathematical Operations\nDESCRIPTION: This example shows basic mathematical operations: addition, division, modulo, subtraction, and multiplication.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_31\n\nLANGUAGE: Pebble\nCODE:\n```\n{{ 2 + 2 / ( 10 % 3 ) * (8 - 1) }}\n```\n\n----------------------------------------\n\nTITLE: Nanosecond Timestamp Filter in Pebble\nDESCRIPTION: This snippet demonstrates the `timestampNano` filter in Pebble. It converts a date to a Unix timestamp in nanoseconds.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_81\n\nLANGUAGE: Pebble\nCODE:\n```\n{{ execution.startDate | timestampNano }}\n```\n\n----------------------------------------\n\nTITLE: Simple Python Print Statement\nDESCRIPTION: This Python script prints a simple greeting to the console. It is intended to be used with the Kestra code editor and executed within a Kestra flow.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/webserver/src/main/resources/static/getting-started.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nprint(\"Hello from the Editor!\")\n```\n\n----------------------------------------\n\nTITLE: For Loop with Else Block\nDESCRIPTION: This snippet demonstrates a `for` loop with an `else` block that executes if the collection is empty.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_30\n\nLANGUAGE: Pebble\nCODE:\n```\n{% for user in users %} ... {% else %} ... {% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Indentation Filter in Pebble\nDESCRIPTION: This snippet demonstrates the `indent` filter in Pebble. It adds a specified number of spaces before each line of a string *except* the first line.  The first line is left unindented.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_62\n\nLANGUAGE: Pebble\nCODE:\n```\n{{ \"Hello\\nworld\" | indent(4) }}\n```\n\n----------------------------------------\n\nTITLE: Integer Evenness Check in Pebble\nDESCRIPTION: This snippet demonstrates how to check if an integer is even within a Pebble template using `is even`. The code block inside the `if` statement will only execute if the integer 2 is even.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_51\n\nLANGUAGE: Pebble\nCODE:\n```\n{% if 2 is even %} ... {% endif %}\n```\n\n----------------------------------------\n\nTITLE: Null Check in Pebble\nDESCRIPTION: This snippet demonstrates how to check if a variable is null within a Pebble template using `is null`. The code block inside the `if` statement will only execute if the `user.email` variable is null.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_55\n\nLANGUAGE: Pebble\nCODE:\n```\n{% if user.email is null %} ... {% endif %}\n```\n\n----------------------------------------\n\nTITLE: Integer Oddness Check in Pebble\nDESCRIPTION: This snippet demonstrates how to check if an integer is odd within a Pebble template using `is odd`. The code block inside the `if` statement will only execute if the integer 3 is odd.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_56\n\nLANGUAGE: Pebble\nCODE:\n```\n{% if 3 is odd %} ... {% endif %}\n```\n\n----------------------------------------\n\nTITLE: Negating a Boolean Expression\nDESCRIPTION: This snippet negates a boolean expression using `is not even`. The conditional block will execute if 3 is not an even number.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_32\n\nLANGUAGE: Pebble\nCODE:\n```\n{% if 3 is not even %} ... {% endif %}\n```\n\n----------------------------------------\n\nTITLE: Map Check in Pebble\nDESCRIPTION: This snippet demonstrates how to check if a variable is a map (dictionary) within a Pebble template using `is map`. The code block inside the `if` statement will only execute if the variable `{\"apple\":\"red\", \"banana\":\"yellow\"}` is a map.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_54\n\nLANGUAGE: Pebble\nCODE:\n```\n{% if {\"apple\":\"red\", \"banana\":\"yellow\"} is map %} ... {% endif %}\n```\n\n----------------------------------------\n\nTITLE: Absolute Value Filter in Pebble\nDESCRIPTION: This snippet demonstrates the `abs` filter in Pebble. It returns the absolute value of a number. In the example, it converts -7 to 7.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_57\n\nLANGUAGE: Pebble\nCODE:\n```\n{{ -7 | abs }}\n```\n\n----------------------------------------\n\nTITLE: Ternary Operator for Conditional Expressions\nDESCRIPTION: This snippet uses the ternary operator (`foo == null ? bar : baz`) to evaluate a conditional expression. If `foo` is null, it returns `bar`; otherwise, it returns `baz`.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_28\n\nLANGUAGE: Pebble\nCODE:\n```\n{{ foo == null ? bar : baz }}\n```\n\n----------------------------------------\n\nTITLE: Returning the Current Datetime\nDESCRIPTION: This snippet returns the current datetime using the `now` function.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_14\n\nLANGUAGE: Pebble\nCODE:\n```\n{{ now() }}\n```\n\n----------------------------------------\n\nTITLE: Rendering Parent Block Content\nDESCRIPTION: This snippet renders the content of the parent block, which is useful in template inheritance scenarios.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_15\n\nLANGUAGE: Pebble\nCODE:\n```\n{{ parent() }}\n```\n\n----------------------------------------\n\nTITLE: Rendering Block Content\nDESCRIPTION: This snippet renders the contents of a block named \"post\". It assumes the block is defined elsewhere in the workflow definition or included templates. Refer to kestra.io documentation for more on blocks.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_7\n\nLANGUAGE: Pebble\nCODE:\n```\n{{ block(\"post\") }}\n```\n\n----------------------------------------\n\nTITLE: Adding a Comment\nDESCRIPTION: This snippet adds a comment that won't appear in the output. Comments are useful for documenting the template.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_40\n\nLANGUAGE: Pebble\nCODE:\n```\n{# THIS IS A COMMENT #}\n```\n\n----------------------------------------\n\nTITLE: Rendering Nested Pebble Expressions Once\nDESCRIPTION: This snippet renders nested Pebble expressions in the `expression_string` variable only once using the `renderOnce` function.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_18\n\nLANGUAGE: Pebble\nCODE:\n```\n{{ renderOnce(expression_string) }}\n```\n\n----------------------------------------\n\nTITLE: Get File Size Kestra\nDESCRIPTION: This snippet demonstrates how to retrieve the size of a file at a given URI location using the `fileSize` function in Kestra. The function takes the file URI as input and returns the file size.\nSOURCE: https://github.com/kestra-io/kestra/blob/develop/ui/src/assets/docs/basic.md#_snippet_99\n\nLANGUAGE: Kestra\nCODE:\n```\n{{ fileSize(output.download.uri) }}\n```"
  }
]