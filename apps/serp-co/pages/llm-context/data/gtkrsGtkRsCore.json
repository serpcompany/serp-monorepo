[
  {
    "owner": "gtk-rs",
    "repo": "gtk-rs-core",
    "content": "TITLE: Downloading Rust Homepage Using GIO Async TLS in Rust\nDESCRIPTION: This code demonstrates the use of GIO's asynchronous TLS features within Rust to download the Rust homepage. It depends on the 'async-tls' feature and the 'cargo' build system. The program establishes an async TLS connection, performs an HTTP GET request, and processes the response data, illustrating async network I/O and TLS usage.\nSOURCE: https://github.com/gtk-rs/gtk-rs-core/blob/main/examples/gio_async_tls/README.md#_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\n```bash\ncargo run --bin gio_async_tls --features=\"async-tls\"\n```\n```\n\n----------------------------------------\n\nTITLE: Reading Cargo.toml with GIO futures in Rust\nDESCRIPTION: This code snippet uses GIO futures to asynchronously read the Cargo.toml file in a Rust project. It showcases the process of setting up a GIO file handle, reading its contents asynchronously, and handling the result. The code relies on gtk-rs-core and GIO libraries for file operations and futures management.\nSOURCE: https://github.com/gtk-rs/gtk-rs-core/blob/main/examples/gio_futures/README.md#_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\n```rust\nuse gio::prelude::*;\nuse gio::File;\nuse std::env;\n\nfn main() {\n    // Obtain the current executable's directory\n    let current_dir = env::current_dir().expect(\"Failed to get current directory\");\n\n    // Create a File object for Cargo.toml\n    let file = File::new_for_path(\"Cargo.toml\");\n\n    // Read the file asynchronously\n    let future = file.load_contents_async(None, move |result| {\n        match result\ndefault {\n            Ok(content) => {\n                // Convert content to string\n                let contents = String::from_utf8_lossy(&content);\n                println!(\"Contents of Cargo.toml:\\n{}\", contents);\n            }\n            Err(e) => {\n                eprintln!(\"Failed to read file: {}\", e);\n            }\n        }\n    });\n\n    // Run the main loop until the future completes\n    gio::MainLoop::new().run();\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Adding Graphene as a Git Dependency in Cargo.toml Using TOML\nDESCRIPTION: This snippet demonstrates how to add the graphene crate as a dependency in your Rust project's Cargo.toml file, sourcing it directly from the gtk-rs/gtk-rs-core GitHub repository. This approach is recommended for tracking the latest edge developments of the library. To use this, simply include the shown lines in your Cargo.toml file under [dependencies]; no other configuration is necessary, but you must use a compatible Rust version (>=1.83.0).\nSOURCE: https://github.com/gtk-rs/gtk-rs-core/blob/main/graphene/README.md#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[dependencies]\ngraphene = { git = \"https://github.com/gtk-rs/gtk-rs-core.git\", package = \"graphene\" }\n\n```\n\n----------------------------------------\n\nTITLE: Adding Cairo-rs as a Git Dependency (TOML)\nDESCRIPTION: This TOML snippet demonstrates how to declare a dependency on the `cairo-rs` crate directly from its git repository. This method is used to track the latest changes or development versions instead of a published version from crates.io. It specifies the git URL and the package name within the repository.\nSOURCE: https://github.com/gtk-rs/gtk-rs-core/blob/main/cairo/README.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\ncairo-rs = { git = \"https://github.com/gtk-rs/gtk-rs-core.git\", package = \"cairo-rs\" }\n```\n\n----------------------------------------\n\nTITLE: Adding PangoCairo as a Git Dependency in Cargo.toml\nDESCRIPTION: Example of how to add PangoCairo as a Git dependency in a Rust project's Cargo.toml file. This approach is recommended for tracking the bleeding edge development version.\nSOURCE: https://github.com/gtk-rs/gtk-rs-core/blob/main/pangocairo/README.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\npangocairo = { git = \"https://github.com/gtk-rs/gtk-rs-core.git\", package = \"pangocairo\" }\n```\n\n----------------------------------------\n\nTITLE: Using gio Crate as Git Dependency in TOML\nDESCRIPTION: This TOML configuration demonstrates how to add the `gio` crate as a dependency directly from the gtk-rs-core git repository. This method is recommended if you want to track the latest development version rather than a released version from crates.io.\nSOURCE: https://github.com/gtk-rs/gtk-rs-core/blob/main/gio/README.md#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[dependencies]\ngio = { git = \"https://github.com/gtk-rs/gtk-rs-core.git\", package = \"gio\" }\n```\n\n----------------------------------------\n\nTITLE: Adding Pango as a Git Dependency in Cargo.toml (TOML)\nDESCRIPTION: Specifies the `pango` crate as a dependency directly from its Git repository (`gtk-rs/gtk-rs-core`) in a Rust project's `Cargo.toml`. This is used for tracking the latest development version (bleeding edge).\nSOURCE: https://github.com/gtk-rs/gtk-rs-core/blob/main/pango/README.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\npango = { git = \"https://github.com/gtk-rs/gtk-rs-core.git\", package = \"pango\" }\n```\n\n----------------------------------------\n\nTITLE: Running GIO Futures Example in Rust - Bash\nDESCRIPTION: This snippet shows how to execute the GIO futures example by running the appropriate cargo command in a terminal. It requires Rust and Cargo to be installed, and assumes the presence of a binary target named 'gio_cancellable_future' in the project's Cargo.toml. Running this command will compile and execute the example that demonstrates reading from the Cargo.toml file asynchronously. No additional arguments or configuration are required; the output is displayed on the console.\nSOURCE: https://github.com/gtk-rs/gtk-rs-core/blob/main/examples/gio_cancellable_future/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo run --bin gio_cancellable_future\n```\n\n----------------------------------------\n\nTITLE: Running Core Bindings Generator Script - Bash\nDESCRIPTION: Executes the Python script responsible for regenerating the core gtk-rs bindings using the `gir` tool and `gir-files`. This is the standard way to update or rebuild the generated code within the repository.\nSOURCE: https://github.com/gtk-rs/gtk-rs-core/blob/main/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ python3 generator.py\n```\n\n----------------------------------------\n\nTITLE: Updating and Checking Out Git Submodules - Bash\nDESCRIPTION: Updates and checks out all Git submodules referenced by the repository. This step is crucial before running the code generator to ensure the correct versions of `gir` and `gir-files` are available.\nSOURCE: https://github.com/gtk-rs/gtk-rs-core/blob/main/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ git submodule update --checkout\n```\n\n----------------------------------------\n\nTITLE: Running Generator with Custom Gir Files Directory - Bash\nDESCRIPTION: Executes the code generator script, specifying an alternative local directory for the `gir-files` submodule. This is useful during development to test changes in `gir-files` before updating the official submodule.\nSOURCE: https://github.com/gtk-rs/gtk-rs-core/blob/main/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ python3 generator.py --gir-files-directory ../gir-files/\n```\n\n----------------------------------------\n\nTITLE: Running the GIO Task Example\nDESCRIPTION: This command executes the gio_task binary using cargo, which demonstrates the GTask implementation in Rust. It builds and runs the specified binary file.\nSOURCE: https://github.com/gtk-rs/gtk-rs-core/blob/main/examples/gio_task/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ncargo run --bin gio_task\n```\n\n----------------------------------------\n\nTITLE: Avoiding Mixed Graphene Dependencies in Cargo.toml Using TOML\nDESCRIPTION: This snippet provides an example of an invalid Cargo.toml configuration that attempts to specify the graphene crate from both crates.io (with a version) and a Git dependency in the same project. Mixing these sources will cause compilation errors due to conflicting dependencies. Ensure only one method is used to avoid build failures.\nSOURCE: https://github.com/gtk-rs/gtk-rs-core/blob/main/graphene/README.md#_snippet_1\n\nLANGUAGE: TOML\nCODE:\n```\n# This will not compile\n[dependencies]\ngraphene = \"0.13\"\ngraphene = { git = \"https://github.com/gtk-rs/gtk-rs-core.git\", package = \"graphene\" }\n\n```\n\n----------------------------------------\n\nTITLE: Incorrect gio Crate Dependency Mix in TOML\nDESCRIPTION: This example shows an invalid TOML configuration where the `gio` crate is specified twice, once with a version from crates.io and once as a git dependency. Mixing different sources or versions for the same crate in this manner will result in a compilation error.\nSOURCE: https://github.com/gtk-rs/gtk-rs-core/blob/main/gio/README.md#_snippet_1\n\nLANGUAGE: TOML\nCODE:\n```\n# This will not compile\n[dependencies]\ngio = \"0.13\"\ngio = { git = \"https://github.com/gtk-rs/gtk-rs-core.git\", package = \"gio\" }\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Incorrect Mixed Dependencies (TOML)\nDESCRIPTION: This TOML snippet illustrates an incorrect way to define a dependency in Cargo.toml. It attempts to declare the `cairo-rs` crate dependency twice with conflicting specifications: once by a version number and once by a git repository URL. Cargo does not allow defining the same dependency multiple times, even with different sources.\nSOURCE: https://github.com/gtk-rs/gtk-rs-core/blob/main/cairo/README.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n# This will not compile\n[dependencies]\ncairo-rs = \"0.13\"\ncairo-rs = { git = \"https://github.com/gtk-rs/gtk-rs-core.git\", package = \"cairo-rs\" }\n```\n\n----------------------------------------\n\nTITLE: Incorrect Dependency Configuration for PangoCairo in Cargo.toml\nDESCRIPTION: Example of an incorrect configuration that mixes versioned and git dependencies for the same package, which will cause compilation errors.\nSOURCE: https://github.com/gtk-rs/gtk-rs-core/blob/main/pangocairo/README.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n# This will not compile\n[dependencies]\npangocairo = \"0.13\"\npangocairo = { git = \"https://github.com/gtk-rs/gtk-rs-core.git\", package = \"pangocairo\" }\n```\n\n----------------------------------------\n\nTITLE: Incorrectly Mixing Pango Dependency Versions in Cargo.toml (TOML)\nDESCRIPTION: Illustrates an incorrect configuration in `Cargo.toml` where both a versioned `pango` dependency (e.g., \"0.13\") from crates.io and a git dependency are declared simultaneously. This configuration will lead to compilation errors.\nSOURCE: https://github.com/gtk-rs/gtk-rs-core/blob/main/pango/README.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n# This will not compile\n[dependencies]\npango = \"0.13\"\npango = { git = \"https://github.com/gtk-rs/gtk-rs-core.git\", package = \"pango\" }\n```"
  }
]