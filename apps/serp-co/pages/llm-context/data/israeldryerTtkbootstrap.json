[
  {
    "owner": "israel-dryer",
    "repo": "ttkbootstrap",
    "content": "TITLE: Installing ttkbootstrap with pip\nDESCRIPTION: Command to install ttkbootstrap package using pip in the terminal or command prompt.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/README.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npython -m pip install ttkbootstrap\n```\n\n----------------------------------------\n\nTITLE: Choosing a Theme in ttkbootstrap\nDESCRIPTION: This snippet demonstrates how to choose a theme in ttkbootstrap using both the traditional approach with the Style object and the new approach with the Window class.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/gettingstarted/tutorial.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport ttkbootstrap as ttk\n\n# traditional approach\nroot = ttk.Tk()\nstyle = ttk.Style(\"darkly\")\n\n# new approach\nroot = ttk.Window(themename=\"darkly\")\n```\n\n----------------------------------------\n\nTITLE: Implementing a Stopwatch Application Using ttkbootstrap in Python\nDESCRIPTION: This code creates a complete stopwatch application with start, pause, reset, and quit functionality using ttkbootstrap. It features a time display in hours:minutes:seconds format, dynamically changing button styles, and a clean UI. The stopwatch increments in 100ms intervals and properly formats the time display.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/gallery/stopwatch.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport ttkbootstrap as ttk\nfrom ttkbootstrap.constants import *\n\n\nclass Stopwatch(ttk.Frame):\n    def __init__(self, master):\n        super().__init__(master)\n        self.pack(fill=BOTH, expand=YES)\n        self.running = ttk.BooleanVar(value=False)\n        self.afterid = ttk.StringVar()\n        self.elapsed = ttk.IntVar()\n        self.stopwatch_text = ttk.StringVar(value=\"00:00:00\")\n\n        self.create_stopwatch_label()\n        self.create_stopwatch_controls()\n\n    def create_stopwatch_label(self):\n        \"\"\"Create the stopwatch number display\"\"\"\n        lbl = ttk.Label(\n            master=self,\n            font=\"-size 32\",\n            anchor=CENTER,\n            textvariable=self.stopwatch_text,\n        )\n        lbl.pack(side=TOP, fill=X, padx=60, pady=20)\n\n    def create_stopwatch_controls(self):\n        \"\"\"Create the control frame with buttons\"\"\"\n        container = ttk.Frame(self, padding=10)\n        container.pack(fill=X)\n        self.buttons = []\n        self.buttons.append(\n            ttk.Button(\n                master=container,\n                text=\"Start\",\n                width=10,\n                bootstyle=INFO,\n                command=self.on_toggle,\n            )\n        )\n        self.buttons.append(\n            ttk.Button(\n                master=container,\n                text=\"Reset\",\n                width=10,\n                bootstyle=SUCCESS,\n                command=self.on_reset,\n            )\n        )\n        self.buttons.append(\n            ttk.Button(\n                master=container,\n                text=\"Quit\",\n                width=10,\n                bootstyle=DANGER,\n                command=self.on_quit,\n            )\n        )\n        for button in self.buttons:\n            button.pack(side=LEFT, fill=X, expand=YES, pady=10, padx=5)\n\n    def on_toggle(self):\n        \"\"\"Toggle the start and pause button.\"\"\"\n        button = self.buttons[0]\n        if self.running.get():\n            self.pause()\n            self.running.set(False)\n            button.configure(bootstyle=INFO, text=\"Start\")\n        else:\n            self.start()\n            self.running.set(True)\n            button.configure(bootstyle=(INFO, OUTLINE), text=\"Pause\")\n\n    def on_quit(self):\n        \"\"\"Quit the application.\"\"\"\n        self.quit()\n\n    def on_reset(self):\n        \"\"\"Reset the stopwatch number display.\"\"\"\n        self.elapsed.set(0)\n        self.stopwatch_text.set(\"00:00:00\")\n\n    def start(self):\n        \"\"\"Start the stopwatch and update the display.\"\"\"\n        self.afterid.set(self.after(1, self.increment))\n\n    def pause(self):\n        \"\"\"Pause the stopwatch\"\"\"\n        self.after_cancel(self.afterid.get())\n\n    def increment(self):\n        \"\"\"Increment the stopwatch value. This method continues to\n        schedule itself every 1 second until stopped or paused.\"\"\"\n        current = self.elapsed.get() + 1\n        self.elapsed.set(current)\n        formatted = \"{:02d}:{:02d}:{:02d}\".format(\n            (current // 100) // 60, (current // 100) % 60, (current % 100)\n        )\n        self.stopwatch_text.set(formatted)\n        self.afterid.set(self.after(100, self.increment))\n\n\nif __name__ == \"__main__\":\n\n    app = ttk.Window(\n        title=\"Stopwatch\", \n        themename=\"cosmo\", \n        resizable=(False, False)\n    )\n    Stopwatch(app)\n    app.mainloop()\n```\n\n----------------------------------------\n\nTITLE: Creating Buttons with Different Colors in ttkbootstrap\nDESCRIPTION: This snippet shows how to create buttons with different color styles in ttkbootstrap. It demonstrates the use of various color constants and the bootstyle parameter.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/gettingstarted/tutorial.md#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport ttkbootstrap as ttk\nfrom ttkbootstrap.constants import *\n\nroot = ttk.Window()\n\nb1 = ttk.Button(root, text='primary', bootstyle=PRIMARY)\nb1.pack(side=LEFT, padx=5, pady=5)\n\nb2 = ttk.Button(root, text='secondary', bootstyle=SECONDARY)\nb2.pack(side=LEFT, padx=5, pady=5)\n\nb3 = ttk.Button(root, text='success', bootstyle=SUCCESS)\nb3.pack(side=LEFT, padx=5, pady=5)\n\nb4 = ttk.Button(root, text='info', bootstyle=INFO)\nb4.pack(side=LEFT, padx=5, pady=5)\n\nb5 = ttk.Button(root, text='warning', bootstyle=WARNING)\nb5.pack(side=LEFT, padx=5, pady=5)\n\nb6 = ttk.Button(root, text='danger', bootstyle=DANGER)\nb6.pack(side=LEFT, padx=5, pady=5)\n\nb7 = ttk.Button(root, text='light', bootstyle=LIGHT)\nb7.pack(side=LEFT, padx=5, pady=5)\n\nb8 = ttk.Button(root, text='dark', bootstyle=DARK)\nb8.pack(side=LEFT, padx=5, pady=5)\n\nroot.mainloop()\n```\n\n----------------------------------------\n\nTITLE: Implementing File Search Engine Class with TTKBootstrap\nDESCRIPTION: A comprehensive implementation of a file search GUI application using TTKBootstrap. The class includes features for browsing directories, searching files with different patterns, displaying results in a treeview, and handling search operations in separate threads to maintain UI responsiveness.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/gallery/filesearchengine.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport datetime\nimport pathlib\nfrom queue import Queue\nfrom threading import Thread\nfrom tkinter.filedialog import askdirectory\nimport ttkbootstrap as ttk\nfrom ttkbootstrap.constants import *\nfrom ttkbootstrap import utility\n\n\nclass FileSearchEngine(ttk.Frame):\n\n    queue = Queue()\n    searching = False\n\n    def __init__(self, master):\n        super().__init__(master, padding=15)\n        self.pack(fill=BOTH, expand=YES)\n        \n        # application variables\n        _path = pathlib.Path().absolute().as_posix()\n        self.path_var = ttk.StringVar(value=_path)\n        self.term_var = ttk.StringVar(value='md')\n        self.type_var = ttk.StringVar(value='endswidth')\n\n        # header and labelframe option container\n        option_text = \"Complete the form to begin your search\"\n        self.option_lf = ttk.Labelframe(self, text=option_text, padding=15)\n        self.option_lf.pack(fill=X, expand=YES, anchor=N)\n\n        self.create_path_row()\n        self.create_term_row()\n        self.create_type_row()\n        self.create_results_view()\n\n        self.progressbar = ttk.Progressbar(\n            master=self, \n            mode=INDETERMINATE, \n            bootstyle=(STRIPED, SUCCESS)\n        )\n        self.progressbar.pack(fill=X, expand=YES)\n```\n\n----------------------------------------\n\nTITLE: Creating a ttkbootstrap Application (New Approach)\nDESCRIPTION: This snippet shows how to create a ttkbootstrap application using the new Window class approach. It simplifies the process and automatically attaches the Style object to the Window object.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/gettingstarted/tutorial.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport ttkbootstrap as ttk\nfrom ttkbootstrap.constants import *\n\nroot = ttk.Window()\n\nb1 = ttk.Button(root, text=\"Button 1\", bootstyle=SUCCESS)\nb1.pack(side=LEFT, padx=5, pady=10)\n\nb2 = ttk.Button(root, text=\"Button 2\", bootstyle=(INFO, OUTLINE))\nb2.pack(side=LEFT, padx=5, pady=10)\n\nroot.mainloop()\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic ttkbootstrap Application\nDESCRIPTION: Example code showing how to create a window with themed buttons using ttkbootstrap. Creates a window with the 'superhero' theme and adds two buttons with different styles.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/README.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nroot = ttk.Window(themename=\"superhero\")\n\nb1 = ttk.Button(root, text=\"Submit\", bootstyle=\"success\")\nb1.pack(side=LEFT, padx=5, pady=10)\n\nb2 = ttk.Button(root, text=\"Submit\", bootstyle=\"info-outline\")\nb2.pack(side=LEFT, padx=5, pady=10)\n\nroot.mainloop()\n```\n\n----------------------------------------\n\nTITLE: Basic ttkbootstrap Import\nDESCRIPTION: Import statement for ttkbootstrap to be used instead of standard tkinter.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/README.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport ttkbootstrap as ttk\n```\n\n----------------------------------------\n\nTITLE: Implementing File Backup GUI Class using TTKBootstrap\nDESCRIPTION: Creates a comprehensive file backup GUI application using TTKBootstrap framework. The class implements a main window with button toolbar, collapsible panels for backup summary and status, file browser, treeview for file listing, and scrollable output log. Includes image asset handling and layout management.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/gallery/filebackup.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import datetime\nfrom random import choices\nimport ttkbootstrap as ttk\nfrom ttkbootstrap.style import Bootstyle\nfrom tkinter.filedialog import askdirectory\nfrom ttkbootstrap.dialogs import Messagebox\nfrom ttkbootstrap.constants import *\nfrom tkinter.scrolledtext import ScrolledText\nfrom pathlib import Path\n\n\nPATH = Path(__file__).parent / 'assets'\n\n\nclass BackMeUp(ttk.Frame):\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.pack(fill=BOTH, expand=YES)\n\n        image_files = {\n            'properties-dark': 'icons8_settings_24px.png',\n            'properties-light': 'icons8_settings_24px_2.png',\n            'add-to-backup-dark': 'icons8_add_folder_24px.png',\n            'add-to-backup-light': 'icons8_add_book_24px.png',\n            'stop-backup-dark': 'icons8_cancel_24px.png',\n            'stop-backup-light': 'icons8_cancel_24px_1.png',\n            'play': 'icons8_play_24px_1.png',\n            'refresh': 'icons8_refresh_24px_1.png',\n            'stop-dark': 'icons8_stop_24px.png',\n            'stop-light': 'icons8_stop_24px_1.png',\n            'opened-folder': 'icons8_opened_folder_24px.png',\n            'logo': 'backup.png'\n        }\n\n        self.photoimages = []\n        imgpath = Path(__file__).parent / 'assets'\n        for key, val in image_files.items():\n            _path = imgpath / val\n            self.photoimages.append(ttk.PhotoImage(name=key, file=_path))\n\n        # buttonbar\n        buttonbar = ttk.Frame(self, style='primary.TFrame')\n        buttonbar.pack(fill=X, pady=1, side=TOP)\n\n        ## new backup\n        _func = lambda: Messagebox.ok(message='Adding new backup')\n        btn = ttk.Button(\n            master=buttonbar, text='New backup set',\n            image='add-to-backup-light', \n            compound=LEFT, \n            command=_func\n        )\n        btn.pack(side=LEFT, ipadx=5, ipady=5, padx=(1, 0), pady=1)\n\n        ## backup\n        _func = lambda: Messagebox.ok(message='Backing up...')\n        btn = ttk.Button(\n            master=buttonbar, \n            text='Backup', \n            image='play', \n            compound=LEFT, \n            command=_func\n        )\n        btn.pack(side=LEFT, ipadx=5, ipady=5, padx=0, pady=1)\n\n        ## refresh\n        _func = lambda: Messagebox.ok(message='Refreshing...')\n        btn = ttk.Button(\n            master=buttonbar, \n            text='Refresh', \n            image='refresh',\n            compound=LEFT, \n            command=_func\n        )\n        btn.pack(side=LEFT, ipadx=5, ipady=5, padx=0, pady=1)\n\n        ## stop\n        _func = lambda: Messagebox.ok(message='Stopping backup.')\n        btn = ttk.Button(\n            master=buttonbar, \n            text='Stop', \n            image='stop-light',\n            compound=LEFT, \n            command=_func\n        )\n        btn.pack(side=LEFT, ipadx=5, ipady=5, padx=0, pady=1)\n\n        ## settings\n        _func = lambda: Messagebox.ok(message='Changing settings')\n        btn = ttk.Button(\n            master=buttonbar, \n            text='Settings', \n            image='properties-light',\n            compound=LEFT, \n            command=_func\n        )\n        btn.pack(side=LEFT, ipadx=5, ipady=5, padx=0, pady=1)\n\n        # left panel\n        left_panel = ttk.Frame(self, style='bg.TFrame')\n        left_panel.pack(side=LEFT, fill=Y)\n\n        ## backup summary (collapsible)\n        bus_cf = CollapsingFrame(left_panel)\n        bus_cf.pack(fill=X, pady=1)\n\n        ## container\n        bus_frm = ttk.Frame(bus_cf, padding=5)\n        bus_frm.columnconfigure(1, weight=1)\n        bus_cf.add(\n            child=bus_frm, \n            title='Backup Summary', \n            bootstyle=SECONDARY)\n\n        ## destination\n        lbl = ttk.Label(bus_frm, text='Destination:')\n        lbl.grid(row=0, column=0, sticky=W, pady=2)\n        lbl = ttk.Label(bus_frm, textvariable='destination')\n        lbl.grid(row=0, column=1, sticky=EW, padx=5, pady=2)\n        self.setvar('destination', 'd:/test/')\n\n        ## last run\n        lbl = ttk.Label(bus_frm, text='Last Run:')\n        lbl.grid(row=1, column=0, sticky=W, pady=2)\n        lbl = ttk.Label(bus_frm, textvariable='lastrun')\n        lbl.grid(row=1, column=1, sticky=EW, padx=5, pady=2)\n        self.setvar('lastrun', '14.06.2021 19:34:43')\n\n        ## files Identical\n        lbl = ttk.Label(bus_frm, text='Files Identical:')\n        lbl.grid(row=2, column=0, sticky=W, pady=2)\n        lbl = ttk.Label(bus_frm, textvariable='filesidentical')\n        lbl.grid(row=2, column=1, sticky=EW, padx=5, pady=2)\n        self.setvar('filesidentical', '15%')\n\n        ## section separator\n        sep = ttk.Separator(bus_frm, bootstyle=SECONDARY)\n        sep.grid(row=3, column=0, columnspan=2, pady=10, sticky=EW)\n\n        ## properties button\n        _func = lambda: Messagebox.ok(message='Changing properties')\n        bus_prop_btn = ttk.Button(\n            master=bus_frm, \n            text='Properties', \n            image='properties-dark', \n            compound=LEFT,\n            command=_func, \n            bootstyle=LINK\n        )\n        bus_prop_btn.grid(row=4, column=0, columnspan=2, sticky=W)\n\n        ## add to backup button\n        _func = lambda: Messagebox.ok(message='Adding to backup')\n        add_btn = ttk.Button(\n            master=bus_frm, \n            text='Add to backup', \n            image='add-to-backup-dark', \n            compound=LEFT,\n            command=_func, \n            bootstyle=LINK\n        )\n        add_btn.grid(row=5, column=0, columnspan=2, sticky=W)\n\n        # backup status (collapsible)\n        status_cf = CollapsingFrame(left_panel)\n        status_cf.pack(fill=BOTH, pady=1)\n\n        ## container\n        status_frm = ttk.Frame(status_cf, padding=10)\n        status_frm.columnconfigure(1, weight=1)\n        status_cf.add(\n            child=status_frm, \n            title='Backup Status', \n            bootstyle=SECONDARY\n        )\n        ## progress message\n        lbl = ttk.Label(\n            master=status_frm, \n            textvariable='prog-message', \n            font='Helvetica 10 bold'\n        )\n        lbl.grid(row=0, column=0, columnspan=2, sticky=W)\n        self.setvar('prog-message', 'Backing up...')\n\n        ## progress bar\n        pb = ttk.Progressbar(\n            master=status_frm, \n            variable='prog-value', \n            bootstyle=SUCCESS\n        )\n        pb.grid(row=1, column=0, columnspan=2, sticky=EW, pady=(10, 5))\n        self.setvar('prog-value', 71)\n\n        ## time started\n        lbl = ttk.Label(status_frm, textvariable='prog-time-started')\n        lbl.grid(row=2, column=0, columnspan=2, sticky=EW, pady=2)\n        self.setvar('prog-time-started', 'Started at: 14.06.2021 19:34:56')\n\n        ## time elapsed\n        lbl = ttk.Label(status_frm, textvariable='prog-time-elapsed')\n        lbl.grid(row=3, column=0, columnspan=2, sticky=EW, pady=2)\n        self.setvar('prog-time-elapsed', 'Elapsed: 1 sec')\n\n        ## time remaining\n        lbl = ttk.Label(status_frm, textvariable='prog-time-left')\n        lbl.grid(row=4, column=0, columnspan=2, sticky=EW, pady=2)\n        self.setvar('prog-time-left', 'Left: 0 sec')\n\n        ## section separator\n        sep = ttk.Separator(status_frm, bootstyle=SECONDARY)\n        sep.grid(row=5, column=0, columnspan=2, pady=10, sticky=EW)\n\n        ## stop button\n        _func = lambda: Messagebox.ok(message='Stopping backup')\n        btn = ttk.Button(\n            master=status_frm, \n            text='Stop', \n            image='stop-backup-dark', \n            compound=LEFT, \n            command=_func, \n            bootstyle=LINK\n        )\n        btn.grid(row=6, column=0, columnspan=2, sticky=W)\n\n        ## section separator\n        sep = ttk.Separator(status_frm, bootstyle=SECONDARY)\n        sep.grid(row=7, column=0, columnspan=2, pady=10, sticky=EW)\n\n        # current file message\n        lbl = ttk.Label(status_frm, textvariable='current-file-msg')\n        lbl.grid(row=8, column=0, columnspan=2, pady=2, sticky=EW)\n        self.setvar('current-file-msg', 'Uploading: d:/test/settings.txt')\n\n        # logo\n        lbl = ttk.Label(left_panel, image='logo', style='bg.TLabel')\n        lbl.pack(side='bottom')\n\n        # right panel\n        right_panel = ttk.Frame(self, padding=(2, 1))\n        right_panel.pack(side=RIGHT, fill=BOTH, expand=YES)\n\n        ## file input\n        browse_frm = ttk.Frame(right_panel)\n        browse_frm.pack(side=TOP, fill=X, padx=2, pady=1)\n        \n        file_entry = ttk.Entry(browse_frm, textvariable='folder-path')\n        file_entry.pack(side=LEFT, fill=X, expand=YES)\n        \n        btn = ttk.Button(\n            master=browse_frm, \n            image='opened-folder', \n            bootstyle=(LINK, SECONDARY),\n            command=self.get_directory\n        )\n        btn.pack(side=RIGHT)\n\n        ## Treeview\n        tv = ttk.Treeview(right_panel, show='headings', height=5)\n        tv.configure(columns=(\n            'name', 'state', 'last-modified', \n            'last-run-time', 'size'\n        ))\n        tv.column('name', width=150, stretch=True)\n        \n        for col in ['last-modified', 'last-run-time', 'size']:\n            tv.column(col, stretch=False)\n        \n        for col in tv['columns']:\n            tv.heading(col, text=col.title(), anchor=W)\n        \n        tv.pack(fill=X, pady=1)\n\n        ## scrolling text output\n        scroll_cf = CollapsingFrame(right_panel)\n        scroll_cf.pack(fill=BOTH, expand=YES)\n        \n        output_container = ttk.Frame(scroll_cf, padding=1)\n        _value = 'Log: Backing up... [Uploading file: D:/sample_file_35.txt]'\n        self.setvar('scroll-message', _value)\n        st = ScrolledText(output_container)\n        st.pack(fill=BOTH, expand=YES)\n        scroll_cf.add(output_container, textvariable='scroll-message')\n```\n\n----------------------------------------\n\nTITLE: Creating a Data Entry Form with ttkbootstrap in Python\nDESCRIPTION: This code demonstrates a complete data entry form application built with ttkbootstrap. It creates a form with name, address, and phone fields, along with submit and cancel buttons. The submit button prints the entered data to the console, while the cancel button closes the application. The form uses the 'superhero' theme and custom styling for the buttons.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/gallery/dataentry.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport ttkbootstrap as ttk\nfrom ttkbootstrap.constants import *\n\n\nclass DataEntryForm(ttk.Frame):\n    \n    def __init__(self, master):\n        super().__init__(master, padding=(20, 10))\n        self.pack(fill=BOTH, expand=YES)\n\n        # form variables\n        self.name = ttk.StringVar(value=\"\")\n        self.address = ttk.StringVar(value=\"\")\n        self.phone = ttk.StringVar(value=\"\")\n\n        # form header\n        hdr_txt = \"Please enter your contact information\" \n        hdr = ttk.Label(master=self, text=hdr_txt, width=50)\n        hdr.pack(fill=X, pady=10)\n\n        # form entries\n        self.create_form_entry(\"name\", self.name)\n        self.create_form_entry(\"address\", self.address)\n        self.create_form_entry(\"phone\", self.phone)\n        self.create_buttonbox()\n\n    def create_form_entry(self, label, variable):\n        \"\"\"Create a single form entry\"\"\"\n        container = ttk.Frame(self)\n        container.pack(fill=X, expand=YES, pady=5)\n\n        lbl = ttk.Label(master=container, text=label.title(), width=10)\n        lbl.pack(side=LEFT, padx=5)\n\n        ent = ttk.Entry(master=container, textvariable=variable)\n        ent.pack(side=LEFT, padx=5, fill=X, expand=YES)\n\n    def create_buttonbox(self):\n        \"\"\"Create the application buttonbox\"\"\"\n        container = ttk.Frame(self)\n        container.pack(fill=X, expand=YES, pady=(15, 10))\n\n        sub_btn = ttk.Button(\n            master=container,\n            text=\"Submit\",\n            command=self.on_submit,\n            bootstyle=SUCCESS,\n            width=6,\n        )\n        sub_btn.pack(side=RIGHT, padx=5)\n        sub_btn.focus_set()\n\n        cnl_btn = ttk.Button(\n            master=container,\n            text=\"Cancel\",\n            command=self.on_cancel,\n            bootstyle=DANGER,\n            width=6,\n        )\n        cnl_btn.pack(side=RIGHT, padx=5)\n\n    def on_submit(self):\n        \"\"\"Print the contents to console and return the values.\"\"\"\n        print(\"Name:\", self.name.get())\n        print(\"Address:\", self.address.get())\n        print(\"Phone:\", self.phone.get())\n        return self.name.get(), self.address.get(), self.phone.get()\n\n    def on_cancel(self):\n        \"\"\"Cancel and close the application.\"\"\"\n        self.quit()\n\n\nif __name__ == \"__main__\":\n\n    app = ttk.Window(\"Data Entry\", \"superhero\", resizable=(False, False))\n    DataEntryForm(app)\n    app.mainloop()\n```\n\n----------------------------------------\n\nTITLE: Implementing Magic Mouse Utilities GUI with ttkbootstrap in Python\nDESCRIPTION: This code creates a comprehensive GUI for mouse configuration utilities using ttkbootstrap. It includes device information, battery status, licensing, scrolling options, and gesture controls organized in a three-column layout with various interactive elements.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/gallery/magicmouse.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pathlib import Path\nfrom tkinter import PhotoImage\nimport ttkbootstrap as ttk\nfrom ttkbootstrap.constants import *\nfrom ttkbootstrap.dialogs import Messagebox\n\n\nPATH = Path(__file__).parent / 'assets'\n\n\nclass MouseUtilities(ttk.Frame):\n\n    def __init__(self, master):\n        super().__init__(master)\n        self.pack(fill=BOTH, expand=YES)\n        \n        self.images = [\n            PhotoImage(\n                name='reset', \n                file=PATH / 'magic_mouse/icons8_reset_24px.png'),\n            PhotoImage(\n                name='reset-small', \n                file=PATH / 'magic_mouse/icons8_reset_16px.png'),\n            PhotoImage(\n                name='submit', \n                file=PATH / 'magic_mouse/icons8_submit_progress_24px.png'),\n            PhotoImage(\n                name='question', \n                file=PATH / 'magic_mouse/icons8_question_mark_16px.png'),\n            PhotoImage(\n                name='direction', \n                file=PATH / 'magic_mouse/icons8_move_16px.png'),\n            PhotoImage(\n                name='bluetooth', \n                file=PATH / 'magic_mouse/icons8_bluetooth_2_16px.png'),\n            PhotoImage(\n                name='buy', \n                file=PATH / 'magic_mouse/icons8_buy_26px_2.png'),\n            PhotoImage(\n                name='mouse', \n                file=PATH / 'magic_mouse/magic_mouse.png')\n        ]\n\n        for i in range(3):\n            self.columnconfigure(i, weight=1)\n        self.rowconfigure(0, weight=1)\n\n        # column 1\n        col1 = ttk.Frame(self, padding=10)\n        col1.grid(row=0, column=0, sticky=NSEW)\n\n        # device info\n        dev_info = ttk.Labelframe(col1, text='Device Info', padding=10)\n        dev_info.pack(side=TOP, fill=BOTH, expand=YES)\n\n        # header\n        dev_info_header = ttk.Frame(dev_info, padding=5)\n        dev_info_header.pack(fill=X)\n\n        btn = ttk.Button(\n            master=dev_info_header,\n            image='reset',\n            bootstyle=LINK,\n            command=self.callback\n        )\n        btn.pack(side=LEFT)\n\n        lbl = ttk.Label(dev_info_header, text='Model 2009, 2xAA Batteries')\n        lbl.pack(side=LEFT, fill=X, padx=15)\n\n        btn = ttk.Button(\n            master=dev_info_header,\n            image='submit',\n            bootstyle=LINK,\n            command=self.callback\n        )\n        btn.pack(side=LEFT)\n\n        # image\n        ttk.Label(dev_info, image='mouse').pack(fill=X)\n\n        # progressbar\n        pb = ttk.Progressbar(dev_info, value=66)\n        pb.pack(fill=X, pady=5, padx=5)\n        ttk.Label(pb, text='66%', bootstyle=(PRIMARY, INVERSE)).pack()\n\n        # progress message\n        self.setvar('progress', 'Battery is discharging.')\n        lbl = ttk.Label(\n            master=dev_info,\n            textvariable='progress',\n            font='Helvetica 8',\n            anchor=CENTER\n        )\n        lbl.pack(fill=X)\n\n        # licence info\n        lic_info = ttk.Labelframe(col1, text='License Info', padding=20)\n        lic_info.pack(side=TOP, fill=BOTH, expand=YES, pady=(10, 0))\n        lic_info.rowconfigure(0, weight=1)\n        lic_info.columnconfigure(0, weight=2)\n\n        lic_title = ttk.Label(\n            master=lic_info,\n            text='Trial Version, 28 days left',\n            anchor=CENTER\n        )\n        lic_title.pack(fill=X, pady=(0, 20))\n\n        lbl = ttk.Label(\n            master=lic_info,\n            text='Mouse serial number:',\n            anchor=CENTER,\n            font='Helvetica 8'\n        )\n        lbl.pack(fill=X)\n        self.setvar('license', 'dtMM2-XYZGHIJKLMN3')\n\n        lic_num = ttk.Label(\n            master=lic_info,\n            textvariable='license',\n            bootstyle=PRIMARY,\n            anchor=CENTER\n        )\n        lic_num.pack(fill=X, pady=(0, 20))\n\n        buy_now = ttk.Button(\n            master=lic_info,\n            image='buy',\n            text='Buy now',\n            compound=BOTTOM,\n            command=self.callback\n        )\n        buy_now.pack(padx=10, fill=X)\n\n        # Column 2\n        col2 = ttk.Frame(self, padding=10)\n        col2.grid(row=0, column=1, sticky=NSEW)\n\n        # scrolling\n        scrolling = ttk.Labelframe(col2, text='Scrolling', padding=(15, 10))\n        scrolling.pack(side=TOP, fill=BOTH, expand=YES)\n\n        op1 = ttk.Checkbutton(scrolling, text='Scrolling', variable='op1')\n        op1.pack(fill=X, pady=5)\n\n        # no horizontal scrolling\n        op2 = ttk.Checkbutton(\n            master=scrolling,\n            text='No horizontal scrolling',\n            variable='op2'\n        )\n        op2.pack(fill=X, padx=(20, 0), pady=5)\n\n        btn = ttk.Button(\n            master=op2,\n            image='question',\n            bootstyle=LINK,\n            command=self.callback\n        )\n        btn.pack(side=RIGHT)\n\n        # inverse\n        op3 = ttk.Checkbutton(\n            master=scrolling,\n            text='Inverse scroll directcion vertically',\n            variable='op3'\n        )\n        op3.pack(fill=X, padx=(20, 0), pady=5)\n\n        btn = ttk.Button(\n            master=op3,\n            image='direction',\n            bootstyle=LINK,\n            command=self.callback\n        )\n        btn.pack(side=RIGHT)\n\n        # Scroll only vertical or horizontal\n        op4 = ttk.Checkbutton(\n            master=scrolling,\n            text='Scroll only vertical or horizontal',\n            state=DISABLED\n        )\n        op4.configure(variable='op4')\n        op4.pack(fill=X, padx=(20, 0), pady=5)\n\n        # smooth scrolling\n        op5 = ttk.Checkbutton(\n            master=scrolling,\n            text='Smooth scrolling',\n            variable='op5'\n        )\n        op5.pack(fill=X, padx=(20, 0), pady=5)\n\n        btn = ttk.Button(\n            master=op5,\n            image='bluetooth',\n            bootstyle=LINK,\n            command=self.callback\n        )\n        btn.pack(side=RIGHT)\n\n        # scroll speed\n        scroll_speed_frame = ttk.Frame(scrolling)\n        scroll_speed_frame.pack(fill=X, padx=(20, 0), pady=5)\n\n        lbl = ttk.Label(scroll_speed_frame, text='Speed:')\n        lbl.pack(side=LEFT)\n\n        scale = ttk.Scale(scroll_speed_frame, value=35, from_=1, to=100)\n        scale.pack(side=LEFT, fill=X, expand=YES, padx=5)\n\n        scroll_speed_btn = ttk.Button(\n            master=scroll_speed_frame,\n            image='reset-small',\n            bootstyle=LINK,\n            command=self.callback\n        )\n        scroll_speed_btn.pack(side=LEFT)\n\n        # scroll sense\n        scroll_sense_frame = ttk.Frame(scrolling)\n        scroll_sense_frame.pack(fill=X, padx=(20, 0), pady=(5, 0))\n\n        ttk.Label(scroll_sense_frame, text='Sense:').pack(side=LEFT)\n\n        scale = ttk.Scale(scroll_sense_frame, value=50, from_=1, to=100)\n        scale.pack(side=LEFT, fill=X, expand=YES, padx=5)\n\n        scroll_sense_btn = ttk.Button(\n            master=scroll_sense_frame,\n            image='reset-small',\n            bootstyle=LINK,\n            command=self.callback\n        )\n        scroll_sense_btn.pack(side=LEFT)\n\n        # 1 finger gestures\n        finger_gest = ttk.Labelframe(\n            master=col2,\n            text='1 Finger Gestures',\n            padding=(15, 10)\n        )\n        finger_gest.pack(\n            side=TOP,\n            fill=BOTH,\n            expand=YES,\n            pady=(10, 0)\n        )\n        op6 = ttk.Checkbutton(\n            master=finger_gest,\n            text='Fast swipe left/right',\n            variable='op6'\n        )\n        op6.pack(fill=X, pady=5)\n\n        cb = ttk.Checkbutton(\n            master=finger_gest,\n            text='Swap swipe direction',\n            variable='op7'\n        )\n        cb.pack(fill=X, padx=(20, 0), pady=5)\n\n        # gest sense\n        gest_sense_frame = ttk.Frame(finger_gest)\n        gest_sense_frame.pack(fill=X, padx=(20, 0), pady=(5, 0))\n\n        ttk.Label(gest_sense_frame, text='Sense:').pack(side=LEFT)\n\n        scale = ttk.Scale(gest_sense_frame, value=50, from_=1, to=100)\n        scale.pack(side=LEFT, fill=X, expand=YES, padx=5)\n\n        btn = ttk.Button(\n            master=gest_sense_frame,\n            image='reset-small',\n            bootstyle=LINK,\n            command=self.callback\n        )\n        btn.pack(side=LEFT)\n\n        # middle click\n        middle_click = ttk.Labelframe(\n            master=col2,\n            text='Middle Click',\n            padding=(15, 10)\n        )\n        middle_click.pack(\n            side=TOP,\n            fill=BOTH,\n            expand=YES,\n            pady=(10, 0)\n        )\n        cbo = ttk.Combobox(\n            master=middle_click,\n            values=['Any 2 finger', 'Other 1', 'Other 2']\n        )\n        cbo.current(0)\n        cbo.pack(fill=X)\n\n        # Column 3\n        col3 = ttk.Frame(self, padding=10)\n        col3.grid(row=0, column=2, sticky=NSEW)\n\n        # two finger gestures\n        two_finger_gest = ttk.Labelframe(\n            master=col3,\n            text='2 Finger Gestures',\n            padding=10\n        )\n        two_finger_gest.pack(side=TOP, fill=BOTH)\n\n        op7 = ttk.Checkbutton(\n            master=two_finger_gest,\n            text='Fast swipe left/right',\n            variable='op7'\n        )\n        op7.pack(fill=X, pady=5)\n\n        op8 = ttk.Checkbutton(\n            master=two_finger_gest,\n            text='Swap swipe direction',\n            variable='op8'\n        )\n        op8.pack(fill=X, padx=(20, 0), pady=5)\n\n        # gest sense\n        gest_sense_frame = ttk.Frame(two_finger_gest)\n        gest_sense_frame.pack(fill=X, padx=(20, 0), pady=(5, 0))\n\n        ttk.Label(gest_sense_frame, text='Sense:').pack(side=LEFT)\n\n        scale = ttk.Scale(gest_sense_frame, value=50, from_=1, to=100)\n        scale.pack(side=LEFT, fill=X, expand=YES, padx=5)\n\n        btn = ttk.Button(\n            master=gest_sense_frame,\n            image='reset-small',\n            bootstyle=LINK,\n```\n\n----------------------------------------\n\nTITLE: Implementing a Collapsible Frame Widget with ttkbootstrap in Python\nDESCRIPTION: A complete implementation of a custom CollapsingFrame class that creates UI sections that can be expanded or collapsed with a click. The code includes the class definition with add and toggle methods, along with a usage example that creates three collapsible option groups with different bootstyles.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/gallery/collapsingframe.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pathlib import Path\nimport ttkbootstrap as ttk\nfrom ttkbootstrap.constants import *\nfrom ttkbootstrap.style import Bootstyle\n\n\nIMG_PATH = Path(__file__).parent / 'assets'\n\n\nclass CollapsingFrame(ttk.Frame):\n    \"\"\"A collapsible frame widget that opens and closes with a click.\"\"\"\n\n    def __init__(self, master, **kwargs):\n        super().__init__(master, **kwargs)\n        self.columnconfigure(0, weight=1)\n        self.cumulative_rows = 0\n\n        # widget images\n        self.images = [\n            ttk.PhotoImage(file=IMG_PATH/'icons8_double_up_24px.png'),\n            ttk.PhotoImage(file=IMG_PATH/'icons8_double_right_24px.png')\n        ]\n\n    def add(self, child, title=\"\", bootstyle=PRIMARY, **kwargs):\n        \"\"\"Add a child to the collapsible frame\n\n        Parameters:\n\n            child (Frame):\n                The child frame to add to the widget.\n\n            title (str):\n                The title appearing on the collapsible section header.\n\n            bootstyle (str):\n                The style to apply to the collapsible section header.\n\n            **kwargs (Dict):\n                Other optional keyword arguments.\n        \"\"\"\n        if child.winfo_class() != 'TFrame':\n            return\n        \n        style_color = Bootstyle.ttkstyle_widget_color(bootstyle)\n        frm = ttk.Frame(self, bootstyle=style_color)\n        frm.grid(row=self.cumulative_rows, column=0, sticky=EW)\n\n        # header title\n        header = ttk.Label(\n            master=frm,\n            text=title,\n            bootstyle=(style_color, INVERSE)\n        )\n        if kwargs.get('textvariable'):\n            header.configure(textvariable=kwargs.get('textvariable'))\n        header.pack(side=LEFT, fill=BOTH, padx=10)\n\n        # header toggle button\n        def _func(c=child): return self._toggle_open_close(c)\n        btn = ttk.Button(\n            master=frm,\n            image=self.images[0],\n            bootstyle=style_color,\n            command=_func\n        )\n        btn.pack(side=RIGHT)\n\n        # assign toggle button to child so that it can be toggled\n        child.btn = btn\n        child.grid(row=self.cumulative_rows + 1, column=0, sticky=NSEW)\n\n        # increment the row assignment\n        self.cumulative_rows += 2\n\n    def _toggle_open_close(self, child):\n        \"\"\"Open or close the section and change the toggle button \n        image accordingly.\n\n        Parameters:\n            \n            child (Frame):\n                The child element to add or remove from grid manager.\n        \"\"\"\n        if child.winfo_viewable():\n            child.grid_remove()\n            child.btn.configure(image=self.images[1])\n        else:\n            child.grid()\n            child.btn.configure(image=self.images[0])\n\n\nif __name__ == '__main__':\n\n    app = ttk.Window(minsize=(300, 1))\n\n    cf = CollapsingFrame(app)\n    cf.pack(fill=BOTH)\n\n    # option group 1\n    group1 = ttk.Frame(cf, padding=10)\n    for x in range(5):\n        ttk.Checkbutton(group1, text=f'Option {x + 1}').pack(fill=X)\n    cf.add(child=group1, title='Option Group 1')\n\n    # option group 2\n    group2 = ttk.Frame(cf, padding=10)\n    for x in range(5):\n        ttk.Checkbutton(group2, text=f'Option {x + 1}').pack(fill=X)\n    cf.add(group2, title='Option Group 2', bootstyle=DANGER)\n\n    # option group 3\n    group3 = ttk.Frame(cf, padding=10)\n    for x in range(5):\n        ttk.Checkbutton(group3, text=f'Option {x + 1}').pack(fill=X)\n    cf.add(group3, title='Option Group 3', bootstyle=SUCCESS)\n\n    app.mainloop()\n```\n\n----------------------------------------\n\nTITLE: Implementing Animated GIF Display with TTKBootstrap and PIL in Python\nDESCRIPTION: This script demonstrates how to load an animated GIF and display it frame by frame in a TTKBootstrap window. It uses PIL's ImageSequence to process the GIF frames, creates a cycle iterator for continuous playback, and uses the Tkinter after() method to schedule frame updates based on the GIF's duration information.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/cookbook/gif-animation.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# https://dribbble.com/shots/1237618--Gif-Spinner\nfrom pathlib import Path\nfrom itertools import cycle\nimport ttkbootstrap as ttk\nfrom ttkbootstrap.constants import *\nfrom PIL import Image, ImageTk, ImageSequence\n\n\nclass AnimatedGif(ttk.Frame):\n    def __init__(self, master):\n        super().__init__(master, width=400, height=300)\n\n        # open the GIF and create a cycle iterator\n        file_path = Path(__file__).parent / \"assets/spinners.gif\"\n        with Image.open(file_path) as im:\n            # create a sequence\n            sequence = ImageSequence.Iterator(im)\n            images = [ImageTk.PhotoImage(s) for s in sequence]\n            self.image_cycle = cycle(images)\n\n            # length of each frame\n            self.framerate = im.info[\"duration\"]\n\n        self.img_container = ttk.Label(self, image=next(self.image_cycle))\n        self.img_container.pack(fill=\"both\", expand=\"yes\")\n        self.after(self.framerate, self.next_frame)\n\n    def next_frame(self):\n        \"\"\"Update the image for each frame\"\"\"\n        self.img_container.configure(image=next(self.image_cycle))\n        self.after(self.framerate, self.next_frame)\n\n\nif __name__ == \"__main__\":\n\n    app = ttk.Window(\"Animated GIF\", themename=\"superhero\")\n\n    gif = AnimatedGif(app)\n    gif.pack(fill=BOTH, expand=YES)\n\n    app.mainloop()\n```\n\n----------------------------------------\n\nTITLE: Implementing Calculator UI with TTKBootstrap in Python\nDESCRIPTION: A complete calculator implementation using ttkbootstrap library. Features include a numeric display, numpad with operators, and color-coded buttons (primary for digits, secondary for operators, success for equals). The calculator supports basic arithmetic operations, decimal points, and number sign toggling.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/gallery/calculator.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport ttkbootstrap as ttk\nfrom ttkbootstrap.constants import *\n\n\nclass Calculator(ttk.Frame):\n    def __init__(self, master, **kwargs):\n        super().__init__(master, padding=10, **kwargs)\n        ttk.Style().configure(\"TButton\", font=\"TkFixedFont 12\")\n        self.pack(fill=BOTH, expand=YES)\n        self.digitsvar = ttk.StringVar(value=0)\n        self.xnum = ttk.DoubleVar()\n        self.ynum = ttk.DoubleVar()\n        self.operator = ttk.StringVar(value=\"+\")\n\n        if \"bootstyle\" in kwargs:\n            self.bootstyle = kwargs.pop(\"bootstyle\")\n        else:\n            self.bootstyle = None\n        self.create_num_display()\n        self.create_num_pad()\n\n    def create_num_display(self):\n        container = ttk.Frame(master=self, padding=2, bootstyle=self.bootstyle)\n        container.pack(fill=X, pady=20)\n        digits = ttk.Label(\n            master=container,\n            font=\"TkFixedFont 14\",\n            textvariable=self.digitsvar,\n            anchor=E,\n        )\n        digits.pack(fill=X)\n\n    def create_num_pad(self):\n        container = ttk.Frame(master=self, padding=2, bootstyle=self.bootstyle)\n        container.pack(fill=BOTH, expand=YES)\n        matrix = [\n            (\"%\", \"C\", \"CE\", \"/\"),\n            (7, 8, 9, \"*\"),\n            (4, 5, 6, \"-\"),\n            (1, 2, 3, \"+\"),\n            (\"±\", 0, \".\", \"=\"),\n        ]\n        for i, row in enumerate(matrix):\n            container.rowconfigure(i, weight=1)\n            for j, num_txt in enumerate(row):\n                container.columnconfigure(j, weight=1)\n                btn = self.create_button(master=container, text=num_txt)\n                btn.grid(row=i, column=j, sticky=NSEW, padx=1, pady=1)\n\n    def create_button(self, master, text):\n        if text == \"=\":\n            bootstyle = SUCCESS\n        elif not isinstance(text, int):\n            bootstyle = SECONDARY\n        else:\n            bootstyle = PRIMARY\n        return ttk.Button(\n            master=master,\n            text=text,\n            command=lambda x=text: self.on_button_pressed(x),\n            bootstyle=bootstyle,\n            width=2,\n            padding=10,\n        )\n\n    def reset_variables(self):\n        self.xnum.set(value=0)\n        self.ynum.set(value=0)\n        self.operator.set(\"+\")\n\n    def on_button_pressed(self, txt):\n        \"\"\"Handles and routes all button press events.\"\"\"\n        display = self.digitsvar.get()\n\n        # remove operator from screen after button is pressed\n        if len(display) > 0:\n            if display[0] in [\"/\", \"*\", \"-\", \"+\"]:\n                display = display[1:]\n\n        if txt in [\"CE\", \"C\"]:\n            self.digitsvar.set(\"\")\n            self.reset_variables()\n        elif isinstance(txt, int):\n            self.press_number(display, txt)\n        elif txt == \".\" and \".\" not in display:\n            self.digitsvar.set(f\"{display}{txt}\")\n        elif txt == \"±\":\n            self.press_inverse(display)\n        elif txt in [\"/\", \"*\", \"-\", \"+\"]:\n            self.press_operator(txt)\n        elif txt == \"=\":\n            self.press_equals(display)\n\n    def press_number(self, display, txt):\n        \"\"\"A digit button is pressed\"\"\"\n        if display == \"0\":\n            self.digitsvar.set(txt)\n        else:\n            self.digitsvar.set(f\"{display}{txt}\")\n\n    def press_inverse(self, display):\n        \"\"\"The inverse number button is pressed\"\"\"\n        if display.startswith(\"-\"):\n            if len(display) > 1:\n                self.digitsvar.set(display[1:])\n            else:\n                self.digitsvar.set(\"\")\n        else:\n            self.digitsvar.set(f\"-{display}\")\n\n    def press_operator(self, txt):\n        \"\"\"An operator button is pressed\"\"\"\n        self.operator.set(txt)\n        display = float(self.digitsvar.get())\n        if self.xnum.get() != 0:\n            self.ynum.set(display)\n        else:\n            self.xnum.set(display)\n        self.digitsvar.set(txt)\n\n    def press_equals(self, display):\n        \"\"\"The equals button is pressed.\"\"\"\n        if self.xnum.get() != 0:\n            self.ynum.set(display)\n        else:\n            self.xnum.set(display)\n        x = self.xnum.get()\n        y = self.ynum.get()\n        op = self.operator.get()\n        if all([x, y, op]):\n            result = eval(f\"{x}{op}{y}\")\n            self.digitsvar.set(result)\n            self.reset_variables()\n\n\nif __name__ == \"__main__\":\n\n    app = ttk.Window(\n        title=\"Calculator\",\n        themename=\"flatly\",\n        size=(350, 450),\n        resizable=(False, False),\n    )\n    Calculator(app)\n    app.mainloop()\n```\n\n----------------------------------------\n\nTITLE: Implementing Entry Widget Validation with ttkbootstrap in Python\nDESCRIPTION: Creates a GUI application with two Entry widgets that validate numeric and alphabetic input respectively. The validation occurs when the widget receives or loses focus, with invalid inputs triggering a danger-colored border. Uses custom validation functions registered with the root window.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/cookbook/validate-user-input.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport ttkbootstrap as ttk\nfrom ttkbootstrap.constants import *\n\ndef validate_number(x) -> bool:\n    \"\"\"Validates that the input is a number\"\"\"\n    if x.isdigit():\n        return True\n    elif x == \"\":\n        return True\n    else:\n        return False\n\ndef validate_alpha(x) -> bool:\n    \"\"\"Validates that the input is alpha\"\"\"\n    if x.isdigit():\n        return False\n    elif x == \"\":\n        return True\n    else:\n        return True\n\n# create the toplevel window\nroot = ttk.Window()\nframe = ttk.Frame(root, padding=10)\nframe.pack(fill=BOTH, expand=YES)\n\n# register the validation callback\ndigit_func = root.register(validate_number)\nalpha_func = root.register(validate_alpha)\n\n# validate numeric entry\nttk.Label(frame, text=\"Enter a number\").pack()\nnum_entry = ttk.Entry(frame, validate=\"focus\", validatecommand=(digit_func, '%P'))\nnum_entry.pack(padx=10, pady=10, expand=True)\n\n# validate alpha entry\nttk.Label(frame, text=\"Enter a letter\").pack()\nlet_entry = ttk.Entry(frame, validate=\"focus\", validatecommand=(alpha_func, '%P'))\nlet_entry.pack(padx=10, pady=10, expand=True)\n\nroot.mainloop()\n```\n\n----------------------------------------\n\nTITLE: Implementing PC Cleaner UI with ttkbootstrap in Python\nDESCRIPTION: A complete implementation of a PC Cleaner application UI using ttkbootstrap. The code creates a window with action buttons, tabbed interfaces, progress indicators, and result cards. It demonstrates layout management, styling components with 'bootstyle' parameters, and creating a cohesive themed interface.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/gallery/pccleaner.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pathlib import Path\nimport ttkbootstrap as ttk\nfrom ttkbootstrap.constants import *\n\nPATH = Path(__file__).parent / 'assets'\n\n\nclass Cleaner(ttk.Frame):\n\n    def __init__(self, master, **kwargs):\n        super().__init__(master, **kwargs)\n        self.pack(fill=BOTH, expand=YES)\n\n        # application images\n        self.images = [\n            ttk.PhotoImage(\n                name='logo',\n                file=PATH / 'icons8_broom_64px_1.png'),\n            ttk.PhotoImage(\n                name='cleaner',\n                file=PATH / 'icons8_broom_64px.png'),\n            ttk.PhotoImage(\n                name='registry',\n                file=PATH / 'icons8_registry_editor_64px.png'),\n            ttk.PhotoImage(\n                name='tools',\n                file=PATH / 'icons8_wrench_64px.png'),\n            ttk.PhotoImage(\n                name='options',\n                file=PATH / 'icons8_settings_64px.png'),\n            ttk.PhotoImage(\n                name='privacy',\n                file=PATH / 'icons8_spy_80px.png'),\n            ttk.PhotoImage(\n                name='junk',\n                file=PATH / 'icons8_trash_can_80px.png'),\n            ttk.PhotoImage(\n                name='protect',\n                file=PATH / 'icons8_protect_40px.png')\n        ]\n\n        # header\n        hdr_frame = ttk.Frame(self, padding=20, bootstyle=SECONDARY)\n        hdr_frame.grid(row=0, column=0, columnspan=3, sticky=EW)\n\n        hdr_label = ttk.Label(\n            master=hdr_frame,\n            image='logo',\n            bootstyle=(INVERSE, SECONDARY)\n        )\n        hdr_label.pack(side=LEFT)\n\n        logo_text = ttk.Label(\n            master=hdr_frame,\n            text='pc cleaner',\n            font=('TkDefaultFixed', 30),\n            bootstyle=(INVERSE, SECONDARY)\n        )\n        logo_text.pack(side=LEFT, padx=10)\n\n        # action buttons\n        action_frame = ttk.Frame(self)\n        action_frame.grid(row=1, column=0, sticky=NSEW)\n\n        cleaner_btn = ttk.Button(\n            master=action_frame,\n            image='cleaner',\n            text='cleaner',\n            compound=TOP,\n            bootstyle=INFO\n        )\n        cleaner_btn.pack(side=TOP, fill=BOTH, ipadx=10, ipady=10)\n\n        registry_btn = ttk.Button(\n            master=action_frame,\n            image='registry',\n            text='registry',\n            compound=TOP,\n            bootstyle=INFO\n        )\n        registry_btn.pack(side=TOP, fill=BOTH, ipadx=10, ipady=10)\n\n        tools_btn = ttk.Button(\n            master=action_frame,\n            image='tools',\n            text='tools',\n            compound=TOP,\n            bootstyle=INFO\n        )\n        tools_btn.pack(side=TOP, fill=BOTH, ipadx=10, ipady=10)\n\n        options_btn = ttk.Button(\n            master=action_frame,\n            image='options',\n            text='options',\n            compound=TOP,\n            bootstyle=INFO\n        )\n        options_btn.pack(side=TOP, fill=BOTH, ipadx=10, ipady=10)\n\n        # option notebook\n        notebook = ttk.Notebook(self)\n        notebook.grid(row=1, column=1, sticky=NSEW, pady=(25, 0))\n\n        # windows tab\n        windows_tab = ttk.Frame(notebook, padding=10)\n        wt_scrollbar = ttk.Scrollbar(windows_tab)\n        wt_scrollbar.pack(side=RIGHT, fill=Y)\n        wt_scrollbar.set(0, 1)\n\n        wt_canvas = ttk.Canvas(\n            master=windows_tab,\n            relief=FLAT,\n            borderwidth=0,\n            selectborderwidth=0,\n            highlightthickness=0,\n            yscrollcommand=wt_scrollbar.set\n        )\n        wt_canvas.pack(side=LEFT, fill=BOTH)\n\n        # adjust the scrollregion when the size of the canvas changes\n        wt_canvas.bind(\n            sequence='<Configure>',\n            func=lambda e: wt_canvas.configure(\n                scrollregion=wt_canvas.bbox(ALL))\n        )\n        wt_scrollbar.configure(command=wt_canvas.yview)\n        scroll_frame = ttk.Frame(wt_canvas)\n        wt_canvas.create_window((0, 0), window=scroll_frame, anchor=NW)\n\n        radio_options = [\n            'Internet Cache', 'Internet History', 'Cookies',\n            'Download History', 'Last Download Location',\n            'Session', 'Set Aside Tabs', 'Recently Typed URLs',\n            'Saved Form Information', 'Saved Password'\n        ]\n\n        edge = ttk.Labelframe(\n            master=scroll_frame,\n            text='Microsoft Edge',\n            padding=(20, 5)\n        )\n        edge.pack(fill=BOTH, expand=YES, padx=20, pady=10)\n\n        explorer = ttk.Labelframe(\n            master=scroll_frame,\n            text='Internet Explorer',\n            padding=(20, 5)\n        )\n        explorer.pack(fill=BOTH, padx=20, pady=10, expand=YES)\n\n        # add radio buttons to each label frame section\n        for section in [edge, explorer]:\n            for opt in radio_options:\n                cb = ttk.Checkbutton(section, text=opt, state=NORMAL)\n                cb.invoke()\n                cb.pack(side=TOP, pady=2, fill=X)\n        notebook.add(windows_tab, text='windows')\n\n        # empty tab for looks\n        notebook.add(ttk.Frame(notebook), text='applications')\n\n        # results frame\n        results_frame = ttk.Frame(self)\n        results_frame.grid(row=1, column=2, sticky=NSEW)\n\n        # progressbar with text indicator\n        pb_frame = ttk.Frame(results_frame, padding=(0, 10, 10, 10))\n        pb_frame.pack(side=TOP, fill=X, expand=YES)\n\n        pb = ttk.Progressbar(\n            master=pb_frame,\n            bootstyle=(SUCCESS, STRIPED),\n            variable='progress'\n        )\n        pb.pack(side=LEFT, fill=X, expand=YES, padx=(15, 10))\n\n        ttk.Label(pb_frame, text='%').pack(side=RIGHT)\n        ttk.Label(pb_frame, textvariable='progress').pack(side=RIGHT)\n        self.setvar('progress', 78)\n\n        # result cards\n        cards_frame = ttk.Frame(\n            master=results_frame,\n            name='cards-frame',\n            bootstyle=SECONDARY\n        )\n        cards_frame.pack(fill=BOTH, expand=YES)\n\n        # privacy card\n        priv_card = ttk.Frame(\n            master=cards_frame, \n            padding=1, \n        )\n        priv_card.pack(side=LEFT, fill=BOTH, padx=(10, 5), pady=10)\n\n        priv_container = ttk.Frame(\n            master=priv_card, \n            padding=40,\n        )\n        priv_container.pack(fill=BOTH, expand=YES)\n\n        priv_lbl = ttk.Label(\n            master=priv_container,\n            image='privacy',\n            text='PRIVACY',\n            compound=TOP,\n            anchor=CENTER\n        )\n        priv_lbl.pack(fill=BOTH, padx=20, pady=(40, 0))\n\n        ttk.Label(\n            master=priv_container,\n            textvariable='priv_lbl',\n            bootstyle=PRIMARY\n        ).pack(pady=(0, 20))\n        self.setvar('priv_lbl', '6025 tracking file(s) removed')\n\n        # junk card\n        junk_card = ttk.Frame(\n            master=cards_frame,\n            padding=1,\n        )\n        junk_card.pack(side=LEFT, fill=BOTH, padx=(5, 10), pady=10)\n        \n        junk_container = ttk.Frame(junk_card, padding=40)\n        junk_container.pack(fill=BOTH, expand=YES)\n        \n        junk_lbl = ttk.Label(\n            master=junk_container, \n            image='junk',\n            text='PRIVACY', \n            compound=TOP, \n            anchor=CENTER,\n        )\n        junk_lbl.pack(fill=BOTH, padx=20, pady=(40, 0))\n        \n        ttk.Label(\n            master=junk_container, \n            textvariable='junk_lbl',\n            bootstyle=PRIMARY, \n            justify=CENTER\n        ).pack(pady=(0, 20))\n        self.setvar('junk_lbl', '1,150 MB of unneccesary file(s)\\nremoved')\n\n        # user notification\n        note_frame = ttk.Frame(\n            master=results_frame, \n            bootstyle=SECONDARY, \n            padding=40\n        )\n        note_frame.pack(fill=BOTH)\n        \n        note_msg = ttk.Label(\n            master=note_frame, \n            text='We recommend that you better protect your data', \n            anchor=CENTER,\n            font=('Helvetica', 12, 'italic'),\n            bootstyle=(INVERSE, SECONDARY)\n        )\n        note_msg.pack(fill=BOTH)\n\n\nif __name__ == '__main__':\n\n    app = ttk.Window(\"PC Cleaner\", \"pulse\")\n    Cleaner(app)\n    app.mainloop()\n```\n\n----------------------------------------\n\nTITLE: Creating a ttkbootstrap Application (Traditional Approach)\nDESCRIPTION: This snippet demonstrates how to create a ttkbootstrap application using the traditional approach, similar to tkinter and ttk. It shows how to import ttkbootstrap, use the bootstyle parameter, and create buttons with different styles.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/gettingstarted/tutorial.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport tkinter as tk\nimport ttkbootstrap as ttk\nfrom ttkbootstrap.constants import *\n\nroot = tk.Tk()\n\nb1 = ttk.Button(root, text=\"Button 1\", bootstyle=SUCCESS)\nb1.pack(side=LEFT, padx=5, pady=10)\n\nb2 = ttk.Button(root, text=\"Button 2\", bootstyle=(INFO, OUTLINE))\nb2.pack(side=LEFT, padx=5, pady=10)\n\nroot.mainloop()\n```\n\n----------------------------------------\n\nTITLE: Implementing Media Player GUI with ttkbootstrap in Python\nDESCRIPTION: Creates a media player interface with playback controls, progress tracking, and file selection capabilities. Uses ttkbootstrap for styled widgets and emoji icons for control buttons. The player includes time elapsed/remaining display and a progress slider.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/gallery/mediaplayer.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pathlib import Path\nimport ttkbootstrap as ttk\nfrom ttkbootstrap.constants import *\nfrom ttkbootstrap.icons import Emoji\n\n\nclass MediaPlayer(ttk.Frame):\n\n    def __init__(self, master):\n        super().__init__(master)\n        self.pack(fill=BOTH, expand=YES)\n        self.hdr_var = ttk.StringVar()\n        self.elapsed_var = ttk.DoubleVar(value=0)\n        self.remain_var = ttk.DoubleVar(value=190)\n        \n        self.create_header()\n        self.create_media_window()\n        self.create_progress_meter()\n        self.create_buttonbox()\n    \n    def create_header(self):\n        \"\"\"The application header to display user messages\"\"\"\n        self.hdr_var.set(\"Open a file to begin playback\")\n        lbl = ttk.Label(\n            master=self, \n            textvariable=self.hdr_var, \n            bootstyle=(LIGHT, INVERSE),\n            padding=10\n        )\n        lbl.pack(fill=X, expand=YES)\n\n    def create_media_window(self):\n        \"\"\"Create frame to contain media\"\"\"\n        img_path = Path(__file__).parent / 'assets/mp_background.png'\n        self.demo_media = ttk.PhotoImage(file=img_path)\n        self.media = ttk.Label(self, image=self.demo_media)\n        self.media.pack(fill=BOTH, expand=YES)\n\n    def create_progress_meter(self):\n        \"\"\"Create frame with progress meter with lables\"\"\"\n        container = ttk.Frame(self)\n        container.pack(fill=X, expand=YES, pady=10)\n        \n        self.elapse = ttk.Label(container, text='00:00')\n        self.elapse.pack(side=LEFT, padx=10)\n\n        self.scale = ttk.Scale(\n            master=container, \n            command=self.on_progress, \n            bootstyle=SECONDARY\n        )\n        self.scale.pack(side=LEFT, fill=X, expand=YES)\n\n        self.remain = ttk.Label(container, text='03:10')\n        self.remain.pack(side=LEFT, fill=X, padx=10)\n\n    def create_buttonbox(self):\n        \"\"\"Create buttonbox with media controls\"\"\"\n        container = ttk.Frame(self)\n        container.pack(fill=X, expand=YES)\n        ttk.Style().configure('TButton', font=\"-size 14\")\n\n        rev_btn = ttk.Button(\n            master=container,\n            text=Emoji.get('black left-pointing double triangle with vertical bar'),\n            padding=10,\n        )\n        rev_btn.pack(side=LEFT, fill=X, expand=YES)\n\n        play_btn = ttk.Button(\n            master=container,\n            text=Emoji.get('black right-pointing triangle'),\n            padding=10,\n        )\n        play_btn.pack(side=LEFT, fill=X, expand=YES)\n\n        fwd_btn = ttk.Button(\n            master=container,\n            text=Emoji.get('black right-pointing double triangle with vertical bar'),\n            padding=10,\n        )\n        fwd_btn.pack(side=LEFT, fill=X, expand=YES)\n\n        pause_btn = ttk.Button(\n            master=container,\n            text=Emoji.get('double vertical bar'),\n            padding=10,\n        )\n        pause_btn.pack(side=LEFT, fill=X, expand=YES)        \n\n        stop_btn = ttk.Button(\n            master=container,\n            text=Emoji.get('black square for stop'),\n            padding=10,\n        )\n        stop_btn.pack(side=LEFT, fill=X, expand=YES)          \n\n        stop_btn = ttk.Button(\n            master=container,\n            text=Emoji.get('open file folder'),\n            bootstyle=SECONDARY,\n            padding=10\n        )\n        stop_btn.pack(side=LEFT, fill=X, expand=YES)             \n\n\n    def on_progress(self, val: float):\n        \"\"\"Update progress labels when the scale is updated.\"\"\"\n        elapsed = self.elapsed_var.get()\n        remaining = self.remain_var.get()\n        total = int(elapsed + remaining)\n        \n        elapse = int(float(val) * total)\n        elapse_min = elapse // 60\n        elapse_sec = elapse % 60\n        \n        remain_tot = total - elapse\n        remain_min = remain_tot // 60\n        remain_sec = remain_tot % 60\n\n        self.elapsed_var.set(elapse)\n        self.remain_var.set(remain_tot)\n\n        self.elapse.configure(text=f'{elapse_min:02d}:{elapse_sec:02d}')\n        self.remain.configure(text=f'{remain_min:02d}:{remain_sec:02d}')\n        \n\nif __name__ == '__main__':\n\n    app = ttk.Window(\"Media Player\", \"yeti\")\n    mp = MediaPlayer(app)\n    mp.scale.set(0.35)  # set default\n    app.mainloop()\n```\n\n----------------------------------------\n\nTITLE: Creating Solid and Outline Buttons in ttkbootstrap\nDESCRIPTION: This snippet shows how to create solid and outline buttons in ttkbootstrap. It demonstrates the use of the OUTLINE constant to change the button type.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/gettingstarted/tutorial.md#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport ttkbootstrap as ttk\nfrom ttkbootstrap.constants import *\n\nroot = ttk.Window()\n\nb1 = ttk.Button(root, text=\"Solid Button\", bootstyle=SUCCESS)\nb1.pack(side=LEFT, padx=5, pady=10)\n\nb2 = ttk.Button(root, text=\"Outline Button\", bootstyle=(SUCCESS, OUTLINE))\nb2.pack(side=LEFT, padx=5, pady=10)\n\nroot.mainloop()\n```\n\n----------------------------------------\n\nTITLE: Implementing Text Reader GUI Application with ttkbootstrap in Python\nDESCRIPTION: A Python class that creates a GUI text reader using ttkbootstrap. The application features a scrollable text widget, file entry field, and browse button. It allows users to open and read text files with UTF-8 encoding, displaying the content in a themed window using the 'sandstone' style.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/gallery/textreader.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport ttkbootstrap as ttk\nfrom ttkbootstrap.constants import *\nfrom tkinter.filedialog import askopenfilename\nfrom tkinter.scrolledtext import ScrolledText\n\n\nclass TextReader(ttk.Frame):\n\n    def __init__(self, master):\n        super().__init__(master, padding=15)\n        self.filename = ttk.StringVar()\n        self.pack(fill=BOTH, expand=YES)\n        self.create_widget_elements()\n\n    def create_widget_elements(self):\n        \"\"\"Create and add the widget elements\"\"\"\n        style = ttk.Style()\n        self.textbox = ScrolledText(\n            master=self,\n            highlightcolor=style.colors.primary,\n            highlightbackground=style.colors.border,\n            highlightthickness=1\n        )\n        self.textbox.pack(fill=BOTH)\n        default_txt = \"Click the browse button to open a new text file.\"\n        self.textbox.insert(END, default_txt)\n\n        file_entry = ttk.Entry(self, textvariable=self.filename)\n        file_entry.pack(side=LEFT, fill=X, expand=YES, padx=(0, 5), pady=10)\n\n        browse_btn = ttk.Button(self, text=\"Browse\", command=self.open_file)\n        browse_btn.pack(side=RIGHT, fill=X, padx=(5, 0), pady=10)\n\n    def open_file(self):\n        path = askopenfilename()\n        if not path:\n            return\n\n        with open(path, encoding='utf-8') as f:\n            self.textbox.delete('1.0', END)\n            self.textbox.insert(END, f.read())\n            self.filename.set(path)\n\n\nif __name__ == '__main__':\n    \n    app = ttk.Window(\"Text Reader\", \"sandstone\")\n    TextReader(app)\n    app.mainloop()\n```\n\n----------------------------------------\n\nTITLE: Implementing Animated GIF Display in ttkbootstrap Python Application\nDESCRIPTION: This code demonstrates how to load and display an animated GIF in a ttkbootstrap application while maintaining UI responsiveness. It uses PIL's ImageSequence to iterate through GIF frames, cycles through them using itertools, and updates the display using Tkinter's after() method for scheduling frame changes.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/cookbook/gif-animation.zh.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# https://dribbble.com/shots/1237618--Gif-Spinner\nfrom pathlib import Path\nfrom itertools import cycle\nimport ttkbootstrap as ttk\nfrom ttkbootstrap.constants import *\nfrom PIL import Image, ImageTk, ImageSequence\n\n\nclass AnimatedGif(ttk.Frame):\n    def __init__(self, master):\n        super().__init__(master, width=400, height=300)\n\n        # open the GIF and create a cycle iterator\n        file_path = Path(__file__).parent / \"assets/spinners.gif\"\n        with Image.open(file_path) as im:\n            # create a sequence\n            sequence = ImageSequence.Iterator(im)\n            images = [ImageTk.PhotoImage(s) for s in sequence]\n            self.image_cycle = cycle(images)\n\n            # length of each frame\n            self.framerate = im.info[\"duration\"]\n\n        self.img_container = ttk.Label(self, image=next(self.image_cycle))\n        self.img_container.pack(fill=\"both\", expand=\"yes\")\n        self.after(self.framerate, self.next_frame)\n\n    def next_frame(self):\n        \"\"\"Update the image for each frame\"\"\"\n        self.img_container.configure(image=next(self.image_cycle))\n        self.after(self.framerate, self.next_frame)\n\n\nif __name__ == \"__main__\":\n\n    app = ttk.Window(\"Animated GIF\", themename=\"superhero\")\n\n    gif = AnimatedGif(app)\n    gif.pack(fill=BOTH, expand=YES)\n\n    app.mainloop()\n```\n\n----------------------------------------\n\nTITLE: Applying Color Styles to Widgets in Python using TTKBootstrap\nDESCRIPTION: This snippet demonstrates how to apply different color styles to various widgets using the bootstyle parameter in ttkbootstrap. It shows examples for Button, Scale, and Progressbar widgets with different color styles.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/styleguide/index.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# info colored button style\nButton(bootstyle=\"info\")\n\n# warning colored scale style\nScale(bootstyle=\"warning\")\n\n# success colored progressbar\nProgressbar(bootstyle=\"success\")\n```\n\n----------------------------------------\n\nTITLE: File Search Methods and Utility Functions\nDESCRIPTION: Implementation of core search functionality including methods for different search patterns (contains, starts with, ends with), queue management, and file size conversion utilities. The search operations are performed in separate threads to prevent UI blocking.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/gallery/filesearchengine.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n    @staticmethod\n    def file_search(term, search_path, search_type):\n        \"\"\"Recursively search directory for matching files\"\"\"\n        FileSearchEngine.set_searching(1)\n        if search_type == 'contains':\n            FileSearchEngine.find_contains(term, search_path)\n        elif search_type == 'startswith':\n            FileSearchEngine.find_startswith(term, search_path)\n        elif search_type == 'endswith':\n            FileSearchEngine.find_endswith(term, search_path)\n\n    @staticmethod\n    def find_contains(term, search_path):\n        \"\"\"Find all files that contain the search term\"\"\"\n        for path, _, files in pathlib.os.walk(search_path):\n            if files:\n                for file in files:\n                    if term in file:\n                        record = pathlib.Path(path) / file\n                        FileSearchEngine.queue.put(record)\n        FileSearchEngine.set_searching(False)\n\n    @staticmethod\n    def convert_size(size):\n        \"\"\"Convert bytes to mb or kb depending on scale\"\"\"\n        kb = size // 1000\n        mb = round(kb / 1000, 1)\n        if kb > 1000:\n            return f'{mb:,.1f} MB'\n        else:\n            return f'{kb:,d} KB'\n```\n\n----------------------------------------\n\nTITLE: Adding Child Frames to CollapsingFrame Widget in Python\nDESCRIPTION: Method to add child frames to the collapsible container widget. It creates a header with title and toggle button that controls the visibility of the child frame. The method accepts styling parameters and configures the appearance of the section.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/gallery/filebackup.md#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef add(self, child, title=\"\", bootstyle=PRIMARY, **kwargs):\n    \"\"\"Add a child to the collapsible frame\n\n    Parameters:\n\n        child (Frame):\n            The child frame to add to the widget.\n\n        title (str):\n            The title appearing on the collapsible section header.\n\n        bootstyle (str):\n            The style to apply to the collapsible section header.\n\n        **kwargs (Dict):\n            Other optional keyword arguments.\n    \"\"\"\n    if child.winfo_class() != 'TFrame':\n        return\n    \n    style_color = Bootstyle.ttkstyle_widget_color(bootstyle)\n    frm = ttk.Frame(self, bootstyle=style_color)\n    frm.grid(row=self.cumulative_rows, column=0, sticky=EW)\n\n    # header title\n    header = ttk.Label(\n        master=frm,\n        text=title,\n        bootstyle=(style_color, INVERSE)\n    )\n    if kwargs.get('textvariable'):\n        header.configure(textvariable=kwargs.get('textvariable'))\n    header.pack(side=LEFT, fill=BOTH, padx=10)\n\n    # header toggle button\n    def _func(c=child): return self._toggle_open_close(c)\n    btn = ttk.Button(\n        master=frm,\n        image=self.images[0],\n        bootstyle=style_color,\n        command=_func\n    )\n    btn.pack(side=RIGHT)\n\n    # assign toggle button to child so that it can be toggled\n    child.btn = btn\n    child.grid(row=self.cumulative_rows + 1, column=0, sticky=NSEW)\n\n    # increment the row assignment\n    self.cumulative_rows += 2\n```\n\n----------------------------------------\n\nTITLE: Implementing Equalizer GUI with ttkbootstrap in Python\nDESCRIPTION: This code creates an equalizer interface using ttkbootstrap. It features a series of vertical scales representing different frequency bands, volume, and gain. The scales are styled differently based on their function, and their values are dynamically updated and displayed.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/gallery/equalizer.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport ttkbootstrap as ttk\nfrom ttkbootstrap.constants import *\nfrom random import randint\n\n\nclass Equalizer(ttk.Frame):\n    \n    def __init__(self, master):\n        super().__init__(master, padding=20)\n        self.pack(fill=BOTH, expand=YES)\n\n        controls = [\"VOL\", \"31.25\", \"62.5\", \"125\", \"250\",\n                    \"500\", \"1K\", \"2K\", \"4K\", \"8K\", \"16K\", \"GAIN\"]\n\n        for control in controls:\n            self.create_band(self, control)\n\n    def create_band(self, master, text):\n        \"\"\"Create and pack an equalizer band\"\"\"\n        value = randint(1, 99)\n        self.setvar(text, value)\n\n        container = ttk.Frame(master)\n        container.pack(side=LEFT, fill=Y, padx=10)\n\n        # header label\n        hdr = ttk.Label(container, text=text, anchor=CENTER)\n        hdr.pack(side=TOP, fill=X, pady=10)\n\n        # volume scale\n        if text in [\"VOL\", \"GAIN\"]:\n            bootstyle = SUCCESS\n        else:\n            bootstyle = INFO\n\n        scale = ttk.Scale(\n            master=container,\n            orient=VERTICAL,\n            from_=99,\n            to=1,\n            value=value,\n            command=lambda x=value, y=text: self.update_value(x, y),\n            bootstyle=bootstyle,\n        )\n        scale.pack(fill=Y)\n\n        # value label\n        val = ttk.Label(master=container, textvariable=text)\n        val.pack(pady=10)\n\n    def update_value(self, value, name):\n        self.setvar(name, f\"{float(value):.0f}\")\n\n\nif __name__ == \"__main__\":\n\n    app = ttk.Window(\"Equalizer\", \"litera\", resizable=(False, False))\n    Equalizer(app)\n    app.mainloop()\n```\n\n----------------------------------------\n\nTITLE: Creating and Displaying a Toast Notification in Python using ttkbootstrap\nDESCRIPTION: This snippet demonstrates how to create a ToastNotification object and display it in a ttkbootstrap application. It sets a title, message, and duration for the toast, then shows it using the show_toast() method.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/api/toast.zh.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport ttkbootstrap as ttk\nfrom ttkbootstrap.toast import ToastNotification\n\napp = ttk.Window()\n\ntoast = ToastNotification(\n    title=\"ttkbootstrap toast message\",\n    message=\"This is a toast message\",\n    duration=3000,\n)\ntoast.show_toast()\n\napp.mainloop()\n```\n\n----------------------------------------\n\nTITLE: Mouse Utilities GUI Component Implementation in Python\nDESCRIPTION: Creates a sophisticated GUI for mouse settings configuration using TTKBootstrap. Implements checkbuttons, scales, and frames for two-finger gestures and mouse options with default values and reset functionality.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/gallery/magicmouse.zh.md#2025-04-20_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nbtn.pack(side=LEFT)\n\n# fast two finger swipe down\nlbl = ttk.Label(\n    master=two_finger_gest,\n    text='On fast 2 finger up/down swipe:'\n)\nlbl.pack(fill=X, pady=(10, 5))\n\nop9 = ttk.Checkbutton(\n    master=two_finger_gest,\n    text='Swap swipe direction',\n    variable='op9'\n)\nop9.pack(fill=X, padx=(20, 0), pady=5)\n\nop10 = ttk.Checkbutton(\n    master=two_finger_gest,\n    text='Swap swipe direction',\n    variable='op10'\n)\nop10.pack(fill=X, padx=(20, 0), pady=5)\n\ntwo_finger_cbo = ttk.Combobox(\n    master=two_finger_gest,\n    values=['Cycle Task View | Normal | Desktop View']\n)\ntwo_finger_cbo.current(0)\ntwo_finger_cbo.pack(fill=X, padx=(20, 0), pady=5)\n```\n\n----------------------------------------\n\nTITLE: Creating Solid Buttons in Python with ttkbootstrap\nDESCRIPTION: Demonstrates how to create default and custom-styled solid buttons using ttkbootstrap. The solid button features a solid background that lightens on hover and darkens when pressed.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/styleguide/button.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# default style\nButton()\n\n# success style\nButton(bootstyle=\"success\")\n```\n\n----------------------------------------\n\nTITLE: Installing ttkbootstrap via PyPI\nDESCRIPTION: This command installs the ttkbootstrap package from the Python Package Index (PyPI) using pip.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/gettingstarted/installation.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install ttkbootstrap\n```\n\n----------------------------------------\n\nTITLE: Running TTK Creator from Command Line\nDESCRIPTION: Command to launch the TTK Creator application after installing ttkbootstrap. This is the entry point for the theme customization tool.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/themes/themecreator.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython -m ttkcreator\n```\n\n----------------------------------------\n\nTITLE: Initializing TTKBootstrap Window for File Search Engine\nDESCRIPTION: Creates a TTKBootstrap window with 'journal' theme and initializes a FileSearchEngine application instance. The window is configured with the title 'File Search Engine' and uses the mainloop pattern for event handling.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/gallery/filesearchengine.zh.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\napp = ttk.Window(\"File Search Engine\", \"journal\")\nFileSearchEngine(app)\napp.mainloop()\n```\n\n----------------------------------------\n\nTITLE: Creating Buttons Using Style.colors in ttkbootstrap\nDESCRIPTION: This snippet demonstrates how to create buttons using the Style.colors object in ttkbootstrap. It shows a more concise way to create buttons with all available theme colors.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/gettingstarted/tutorial.md#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport ttkbootstrap as ttk\nfrom ttkbootstrap.constants import *\n\nroot = ttk.Window()\n\nfor color in root.style.colors:\n    b = ttk.Button(root, text=color, bootstyle=color)\n    b.pack(side=LEFT, padx=5, pady=5)\n```\n\n----------------------------------------\n\nTITLE: Creating Outline Buttons in TTK Bootstrap\nDESCRIPTION: Implements outline buttons that feature a thin border and transform to a solid color when hovered or pressed. Can be styled with default outline or custom color variations.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/styleguide/button.zh.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# default outline style\nButton(bootstyle=\"outline\")\n\n# success outline style\nButton(bootstyle=\"success-outline\")\n```\n\n----------------------------------------\n\nTITLE: Running the ttkbootstrap Theme Demo\nDESCRIPTION: Command to launch the interactive theme demonstration for ttkbootstrap after installation. This opens a window that allows selecting and previewing different themes.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/themes/index.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n>>> python -m ttkbootstrap\n```\n\n----------------------------------------\n\nTITLE: CollapsingFrame Widget Class Implementation in Python\nDESCRIPTION: A custom widget class that extends ttk.Frame to create collapsible sections. It includes initialization code that configures the grid layout and loads necessary icon images for toggle buttons.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/gallery/filebackup.md#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass CollapsingFrame(ttk.Frame):\n    \"\"\"A collapsible frame widget that opens and closes with a click.\"\"\"\n\n    def __init__(self, master, **kwargs):\n        super().__init__(master, **kwargs)\n        self.columnconfigure(0, weight=1)\n        self.cumulative_rows = 0\n\n        # widget images\n        self.images = [\n            ttk.PhotoImage(file=PATH/'icons8_double_up_24px.png'),\n            ttk.PhotoImage(file=PATH/'icons8_double_right_24px.png')\n        ]\n```\n\n----------------------------------------\n\nTITLE: Defining Theme Colors in ttkbootstrap JSON Configuration\nDESCRIPTION: A portion of a JSON configuration that defines the color palette for a ttkbootstrap theme. It includes colors for different states (info, warning, danger), backgrounds, foregrounds, selection colors, borders, and input elements.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/themes/definitions.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"info\": \"#225384\",\n\"warning\": \"#e16e25\",\n\"danger\": \"#cf3c40\",\n\"light\": \"#eceef1\",\n\"dark\": \"#33383e\",\n\"bg\": \"#ffffff\",\n\"fg\": \"#2ea4e7\",\n\"selectbg\": \"#adb5bd\",\n\"selectfg\": \"#ffffff\",\n\"border\": \"#a9b4be\",\n\"inputfg\": \"#495057\",\n\"inputbg\": \"#ffffff\",\n```\n\n----------------------------------------\n\nTITLE: Implementing Solid Buttons in TTK Bootstrap\nDESCRIPTION: Creates solid buttons with a solid color background that darkens on hover and press events. The default uses the primary color scheme, but can be customized with different bootstrap styles.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/styleguide/button.zh.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# 默认样式\nButton()\n\n# success样式\nButton(bootstyle=\"success\")\n```\n\n----------------------------------------\n\nTITLE: Creating and Styling Notebook Widgets in TTK Bootstrap\nDESCRIPTION: Demonstrates how to create a default Notebook widget and how to apply custom colors to the inactive tabs using the bootstyle parameter. The example shows creating a standard Notebook and one with 'info' coloring.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/styleguide/notebook.zh.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# default notebook style\nNotebook()\n\n# info colored notebook style - inactive tab color\nNotebook(bootstyle=\"info\")\n```\n\n----------------------------------------\n\nTITLE: Implementing File Entry and Backup Logging in Python\nDESCRIPTION: Code for inserting file paths and simulating backup operations with a treeview and status log. Uses datetime for timestamps and random choices for backup status.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/gallery/filebackup.zh.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfile_entry.insert(END, 'D:/text/myfiles/top-secret/samples/')\n\n## treeview and backup logs\nfor x in range(20, 35):\n    result = choices(['Backup Up', 'Missed in Destination'])[0]\n    st.insert(END, f'19:34:{x}\\t\\t Uploading: D:/file_{x}.txt\\n')\n    st.insert(END, f'19:34:{x}\\t\\t Upload {result}.\\n')\n    timestamp = datetime.now().strftime('%d.%m.%Y %H:%M:%S')\n    tv.insert('', END, x, \n              values=(f'sample_file_{x}.txt', \n                      result, timestamp, timestamp, \n                      f'{int(x // 3)} MB')\n    )\ntv.selection_set(20)\n```\n\n----------------------------------------\n\nTITLE: Creating Default Checkbutton Widgets in ttkbootstrap\nDESCRIPTION: Shows how to create a default checkbutton with either the primary (default) style or a custom success style. The default style features a square checkbox with a muted outline when not selected, and a filled square with checkmark when selected.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/styleguide/checkbutton.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# default checkbutton style\nCheckbutton()\n\n# success checkbutton style\nCheckbutton(bootstyle=\"success\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Link-Style Buttons in TTK Bootstrap\nDESCRIPTION: Creates buttons that look like HTML hyperlinks, changing color on hover to simulate web link behavior. These buttons have a subtle dotted outline when pressed and an activated appearance when focused.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/styleguide/button.zh.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# default link style\nButton(bootstyle=\"link\")\n\n# success link style\nButton(bootstyle=\"success-link\")\n```\n\n----------------------------------------\n\nTITLE: Creating Treeview Widgets with Different Styles in ttkbootstrap\nDESCRIPTION: Demonstrates how to create Treeview widgets with default styling and with a custom color theme. The bootstyle parameter can be used to apply different color schemes to the widget.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/styleguide/treeview.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# default Treeview style\nTreeview()\n\n# info colored treeview style\nTreeview(bootstyle='info')\n```\n\n----------------------------------------\n\nTITLE: Initializing Notebook Widget with Default and Colored Styles in Python\nDESCRIPTION: This code snippet demonstrates how to create a Notebook widget with both default styling and a colored style for inactive tabs. The 'info' color is used as an example, but any available color can be applied.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/styleguide/notebook.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# default notebook style\nNotebook()\n\n# info colored notebook style - inactive tab color\nNotebook(bootstyle=\"info\")\n```\n\n----------------------------------------\n\nTITLE: Toggle Visibility Method for CollapsingFrame in Python\nDESCRIPTION: A helper method that toggles the visibility of child frames in the collapsible container. It switches the toggle button image between up and right arrows to indicate the current state of the section.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/gallery/filebackup.md#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef _toggle_open_close(self, child):\n    \"\"\"Open or close the section and change the toggle button \n    image accordingly.\n\n    Parameters:\n        \n        child (Frame):\n            The child element to add or remove from grid manager.\n    \"\"\"\n    if child.winfo_viewable():\n        child.grid_remove()\n        child.btn.configure(image=self.images[1])\n    else:\n        child.grid()\n        child.btn.configure(image=self.images[0])\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Scale Widgets in ttkbootstrap with Python\nDESCRIPTION: Demonstrates how to create a default Scale widget and a Scale widget with a custom info color style in ttkbootstrap.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/styleguide/scale.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# default Scale style\nScale()\n\n# info colored label style\nScale(bootstyle=\"info\")\n```\n\n----------------------------------------\n\nTITLE: Creating Link-style Buttons in Python with ttkbootstrap\nDESCRIPTION: Demonstrates how to create buttons that resemble hyperlinks using ttkbootstrap. These buttons change color on hover or press and have a slight shift-relief effect when pressed.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/styleguide/button.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# default link style\nButton(bootstyle=\"link\")\n\n# success link style\nButton(bootstyle=\"success-link\")\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Spinbox Widgets with TTKBootstrap\nDESCRIPTION: Shows how to create a default Spinbox and a color-themed Spinbox using the bootstyle parameter. The bootstyle parameter allows setting predefined color themes like 'danger'.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/styleguide/spinbox.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# default spinbox style\nSpinbox()\n\n# danger colored spinbox style\nSpinbox(bootstyle=\"danger\")\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Combobox Widgets in Python TTK Bootstrap\nDESCRIPTION: Demonstrates creating default and color-styled Combobox widgets using TTK Bootstrap. The bootstyle parameter can be used to apply different color themes to the widget.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/styleguide/combobox.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# default combobox style\nCombobox()\n\n# danger colored combobox style\nCombobox(bootstyle=\"danger\")\n```\n\n----------------------------------------\n\nTITLE: Creating Default and Colored Radiobuttons in Python with ttkbootstrap\nDESCRIPTION: This snippet demonstrates how to create a default radiobutton and a secondary colored radiobutton using ttkbootstrap. The default style features a round indicator that fills with color when selected.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/styleguide/radiobutton.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# default radiobutton style\nRadiobutton()\n\n# secondary colored radiobutton style\nRadiobutton(bootstyle=\"secondary\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Outline Buttons in Python with ttkbootstrap\nDESCRIPTION: Shows the creation of outline buttons with ttkbootstrap. These buttons have a thin styled outline and change to a solid color on hover or press.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/styleguide/button.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# default outline style\nButton(bootstyle=\"outline\")\n\n# success outline style\nButton(bootstyle=\"success-outline\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Default Label Styles in TTKBootstrap with Python\nDESCRIPTION: Examples of creating default-styled labels in TTKBootstrap. The default style uses theme-defined foreground and background colors, with the option to customize the foreground using color identifiers like 'danger'.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/styleguide/label.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# default label style\nLabel()\n\n# danger colored label style\nLabel(bootstyle=\"danger\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Meter Widgets with Different Color Styles in TTKBootstrap\nDESCRIPTION: Examples of creating and styling Meter widgets with different color combinations. Shows how to create a default meter, apply specific color themes to the main meter, customize the subtext color, and combine different colors for both the meter and subtext.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/styleguide/meter.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# default meter style\nMeter()\n\n# info colored meter\nMeter(bootstyle=\"info\")\n\n# danger color subtext\nMeter(subtextstyle=\"danger\")\n\n# success colored meter with warning colored subtext\nMeter(bootstyle=\"success\", subtextstyle=\"warning\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Solid Toolbutton Radiobuttons in Python with ttkbootstrap\nDESCRIPTION: This code shows how to create solid toolbutton style radiobuttons. These buttons have a rectangular shape with a muted gray background when not selected and a colored background when selected or active.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/styleguide/radiobutton.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# default toolbutton style\nRadiobutton(bootstyle=\"toolbutton\")\n\n# danger colored radio toolbutton style\nRadiobutton(bootstyle=\"danger-toolbutton\")\n```\n\n----------------------------------------\n\nTITLE: Creating Basic and Custom Floodgauge Widgets in Python using TTKBootstrap\nDESCRIPTION: This code demonstrates how to create a default Floodgauge widget and how to customize it with a different color theme (success). The Floodgauge is a progressbar with optional display text and features colored indicators.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/styleguide/floodgauge.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# default floodgauge style\nFloodgauge()\n\n# success colored floodguage style\nFloodgauge(bootstyle=\"success\")\n```\n\n----------------------------------------\n\nTITLE: Creating Solid Menubuttons in TTK Bootstrap\nDESCRIPTION: Demonstrates the creation of solid menubuttons using the default style and success color variant. The solid style features a background color that lightens on hover and darkens when pressed.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/styleguide/menubutton.zh.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# default solid menubutton style\nMenubutton()\n\n# success colored solid menubutton style\nMenubutton(bootstyle=\"success\")\n```\n\n----------------------------------------\n\nTITLE: Creating Solid Menubuttons in ttkbootstrap\nDESCRIPTION: Examples of creating solid menubuttons, which feature a background color that lightens on hover and darkens when pressed. The first example shows the default style, while the second demonstrates applying a custom color (success) to the menubutton.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/styleguide/menubutton.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# default solid menubutton style\nMenubutton()\n\n# success colored solid menubutton style\nMenubutton(bootstyle=\"success\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Outline Toolbutton Radiobuttons in ttkbootstrap\nDESCRIPTION: Examples of creating outline toolbutton-style radiobuttons that have an outline when not selected and a solid background when selected or active. Shows default and info-colored variants.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/styleguide/radiobutton.zh.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# default outline radio toolbutton style\nRadiobutton(bootstyle=\"outline-toolbutton\")\n\n# info colored outline radio toolbutton style\nRadiobutton(bootstyle=\"info-outline-toolbutton\")\n```\n\n----------------------------------------\n\nTITLE: Creating Toolbutton Style Checkbuttons in ttkbootstrap\nDESCRIPTION: Demonstrates how to create a toolbutton style checkbutton which displays as a solid rectangular button that toggles between an off state (muted gray) and an on state (colored). Both default and success color variants are shown.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/styleguide/checkbutton.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# default toolbutton style\nCheckbutton(bootstyle=\"toolbutton\")\n\n# success toolbutton style\nCheckbutton(bootstyle=\"success-toolbutton\")\n```\n\n----------------------------------------\n\nTITLE: Creating Frame Widgets with ttkbootstrap in Python\nDESCRIPTION: This code snippet demonstrates how to create Frame widgets using ttkbootstrap. It shows two examples: a default frame and a frame with a custom color style ('info'). The Frame widget's background color matches the theme background by default or can be set to a specific color using the 'bootstyle' parameter.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/styleguide/frame.zh.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# default frame style\nFrame()\n\n# info colored frame style\nFrame(bootstyle=\"info\")\n```\n\n----------------------------------------\n\nTITLE: Running MouseUtilities Application with ttkbootstrap in Python\nDESCRIPTION: The application entry point that creates a ttkbootstrap Window with the 'yeti' theme, initializes the MouseUtilities class with the window, and starts the main event loop.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/gallery/magicmouse.md#2025-04-20_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nif __name__ == '__main__':\n\n    app = ttk.Window(\"Magic Mouse\", \"yeti\")\n    MouseUtilities(app)\n    app.mainloop()\n```\n\n----------------------------------------\n\nTITLE: Implementing Inverse Label Styles in TTKBootstrap with Python\nDESCRIPTION: Examples of creating inverse-styled labels in TTKBootstrap. The inverse style reverses the default colors, where the selected color changes the background instead of the foreground. This is useful for labels within styled Frames or for creating label headings.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/styleguide/label.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# default inverse label style\nLabel(bootstyle=\"inverse\")\n\n# danger colored inverse label style\nLabel(bootstyle=\"inverse-danger\")\n```\n\n----------------------------------------\n\nTITLE: Creating Solid Progressbar Widgets in Python with ttkbootstrap\nDESCRIPTION: Examples of creating default and colored solid progressbar widgets. The default style features a solid color indicator bar with primary color, while the second example shows how to create a success-colored progressbar.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/styleguide/progressbar.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# default solid progressbar style\nProgressbar()\n\n# success colored solid progressbar style\nProgressbar(bootstyle=\"success\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Default and Themed Labelframes in TTKBootstrap\nDESCRIPTION: Creates Labelframe widgets with default styling and with an \"info\" color theme. The Labelframe widget features a styled border and label that can either use theme defaults or a specific color that affects both the label text and border.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/styleguide/labelframe.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# default labelframe style\nLabelframe()\n\n# info colored labelframe style\nLabelframe(bootstyle=\"info\")\n```\n\n----------------------------------------\n\nTITLE: Creating Outline Toolbutton Radiobuttons in Python with ttkbootstrap\nDESCRIPTION: This snippet illustrates how to implement outline toolbutton style radiobuttons. These buttons have an outline when not selected and a solid background when selected or active.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/styleguide/radiobutton.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# default outline radio toolbutton style\nRadiobutton(bootstyle=\"outline-toolbutton\")\n\n# info colored outline radio toolbutton style\nRadiobutton(bootstyle=\"info-outline-toolbutton\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Round Scrollbars in ttkbootstrap\nDESCRIPTION: Creates scrollbar widgets with rounded edges. The round style can be applied using the 'round' bootstyle parameter and combined with bootstrap colors like 'danger'. Features the same hover and press interactions as the square style.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/styleguide/scrollbar.zh.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# default round scrollbar style\nScrollbar(bootstyle=\"round\")\n\n# danger colored round scrollbar style\nScrollbar(bootstyle=\"danger-round\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Solid Progressbar Styles in TTKBootstrap\nDESCRIPTION: Examples of creating solid progressbar widgets with default and custom color styling. The solid style is the default appearance for the Progressbar widget and can be customized with various bootstyle color options.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/styleguide/progressbar.zh.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# default solid progressbar style\nProgressbar()\n\n# success colored solid progressbar style\nProgressbar(bootstyle=\"success\")\n```\n\n----------------------------------------\n\nTITLE: Initializing DatePickerPopup Widget in Python\nDESCRIPTION: Demonstrates two ways to create a DatePickerPopup widget: the default implementation and a custom styled version with warning color scheme. The widget combines buttons and labels for date selection with configurable bootstrap styling.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/styleguide/datepickerpopup.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# default popup\nDatePickerPopup()\n\n# warning colored popup\nDatePickerPopup(bootstyle=\"warning\")\n```\n\n----------------------------------------\n\nTITLE: Creating Disabled Checkbuttons in ttkbootstrap\nDESCRIPTION: Demonstrates how to create disabled checkbuttons, either by setting the state to disabled during creation or by configuring it after creation. This style cannot be applied via bootstyle keywords.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/styleguide/checkbutton.md#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# create the checkbutton in a disabled state\nCheckbutton(state=\"disabled\")\n\n# disable a checkbutton after creation\ncb = Checkbutton()\ncb.configure(state=\"disabled\")\n```\n\n----------------------------------------\n\nTITLE: Importing ScrolledText from ttkbootstrap\nDESCRIPTION: This code snippet shows how to import the ScrolledText widget from the ttkbootstrap.scrolled module. The import statement is inferred from the documentation structure.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/api/scrolled/scrolledtext.md#2025-04-20_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom ttkbootstrap.scrolled import ScrolledText\n```\n\n----------------------------------------\n\nTITLE: Implementing Striped Progressbar Styles in TTKBootstrap\nDESCRIPTION: Examples of creating striped progressbar widgets with default and custom color styling. The striped style features alternating stripes using the main color and a desaturated version of it.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/styleguide/progressbar.zh.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# default striped progressbar style\nProgressbar(bootstyle=\"striped\")\n\n# danger colored striped progressbar style\nProgressbar(bootstyle=\"danger-striped\")\n```\n\n----------------------------------------\n\nTITLE: Creating Solid Toolbutton Radiobuttons in ttkbootstrap\nDESCRIPTION: Examples of implementing solid toolbutton-style radiobuttons that appear as rectangular buttons with color-filled backgrounds when selected. Shows default and danger-colored variants.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/styleguide/radiobutton.zh.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# default toolbutton style\nRadiobutton(bootstyle=\"toolbutton\")\n\n# danger colored radio toolbutton style\nRadiobutton(bootstyle=\"danger-toolbutton\")\n```\n\n----------------------------------------\n\nTITLE: Creating Floodgauge Widgets in Python with ttkbootstrap\nDESCRIPTION: This snippet demonstrates how to create Floodgauge widgets using ttkbootstrap. It shows the default style and a custom colored style using the 'success' bootstyle.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/styleguide/floodgauge.zh.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# default floodgauge style\nFloodgauge()\n\n# success colored floodguage style\nFloodgauge(bootstyle=\"success\")\n```\n\n----------------------------------------\n\nTITLE: Importing ScrolledFrame from ttkbootstrap\nDESCRIPTION: This code snippet shows how to import the ScrolledFrame class from the ttkbootstrap.scrolled module. The ScrolledFrame is a widget that provides a scrollable container for other widgets.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/api/scrolled/scrolledframe.zh.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ttkbootstrap.scrolled import ScrolledFrame\n```\n\n----------------------------------------\n\nTITLE: Directory Selection Dialog Method in Python\nDESCRIPTION: A method that opens a directory selection dialog and updates a variable with the selected path. The method updates idle tasks before showing the dialog to ensure UI responsiveness.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/gallery/filebackup.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef get_directory(self):\n    \"\"\"Open dialogue to get directory and update variable\"\"\"\n    self.update_idletasks()\n    d = askdirectory()\n    if d:\n        self.setvar('folder-path', d)\n```\n\n----------------------------------------\n\nTITLE: Configuring TTK Bootstrap Meter Styles in Python\nDESCRIPTION: Examples demonstrating various styling configurations for the Meter widget using TTK Bootstrap. Shows how to create meters with different color schemes for the main indicator and subtext using the bootstyle and subtextstyle parameters.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/styleguide/meter.zh.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# default meter style\nMeter()\n\n# info colored meter\nMeter(bootstyle=\"info\")\n\n# danger color subtext\nMeter(subtextstyle=\"danger\")\n\n# success colored meter with warning colored subtext\nMeter(bootstyle=\"success\", subtextstyle=\"warning\")\n```\n\n----------------------------------------\n\nTITLE: Setting Readonly Entry State in TTK Bootstrap\nDESCRIPTION: Illustrates how to create and configure Entry widgets in a readonly state. Shows both initialization with readonly state and post-creation configuration.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/styleguide/entry.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# create the widget in a readonly state\nEntry(state=\"readonly\")\n\n# set the widget readonly state after creation\ne = Entry()\ne.configure(state=\"readonly\")\n```\n\n----------------------------------------\n\nTITLE: Importing Dialog Class from ttkbootstrap.dialogs\nDESCRIPTION: This code snippet demonstrates how to import the Dialog class from the ttkbootstrap.dialogs module. It's a key step for using the Dialog functionality in a ttkbootstrap application.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/api/dialogs/dialog.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ttkbootstrap.dialogs import Dialog\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Entry Widgets in Python TTK Bootstrap\nDESCRIPTION: Demonstrates how to create default and color-styled Entry widgets. Shows both the default Entry creation and how to apply a custom bootstyle color.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/styleguide/entry.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# default entry style\nEntry()\n\n# danger colored entry style\nEntry(bootstyle=\"danger\")\n```\n\n----------------------------------------\n\nTITLE: Creating Default Square Scrollbars in ttkbootstrap\nDESCRIPTION: Demonstrates how to create default scrollbars with square edges, including a plain default and a success-colored variant. The default style features a light gray trough with a styled thumb and arrow buttons.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/styleguide/scrollbar.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# default scrollbar style\nScrollbar()\n\n# success colored default scrollbar style\nScrollbar(bootstyle=\"success\")\n```\n\n----------------------------------------\n\nTITLE: Creating Striped Progressbar Widgets in Python with ttkbootstrap\nDESCRIPTION: Examples of creating striped progressbar widgets. The striped style features alternating colors in the indicator bar, with the main color and a desaturated version for the alternating stripe.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/styleguide/progressbar.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# default striped progressbar style\nProgressbar(bootstyle=\"striped\")\n\n# danger colored striped progressbar style\nProgressbar(bootstyle=\"danger-striped\")\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring Disabled Spinbox Widgets\nDESCRIPTION: Demonstrates how to create a Spinbox in a disabled state on initialization, and how to disable an existing Spinbox after creation. The disabled state applies special styling that cannot be applied through keywords.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/styleguide/spinbox.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# create the widget in a disabled state\nSpinbox(state=\"disabled\")\n\n# disable the widget after creation\ne = Spinbox()\ne.configure(state=\"disabled\")\n```\n\n----------------------------------------\n\nTITLE: Creating Basic DateEntry Widgets in Python\nDESCRIPTION: Examples showing how to create default and styled DateEntry widgets. The first example creates a default widget while the second applies a 'success' color style.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/styleguide/dateentry.zh.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# default date entry\nDateEntry()\n\n# success colored date entry\nDateEntry(bootstyle=\"success\")\n```\n\n----------------------------------------\n\nTITLE: Creating Outline Toolbutton Style Checkbuttons in ttkbootstrap\nDESCRIPTION: Shows how to create an outline toolbutton style checkbutton which displays as a rectangular button that toggles between a styled outline when off and a solid background when on. Both default and success color variants are shown.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/styleguide/checkbutton.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# default outline toolbutton style\nCheckbutton(bootstyle=\"outline-toolbutton\")\n\n# success outline toolbutton style\nCheckbutton(bootstyle=\"success-outline-toolbutton\")\n```\n\n----------------------------------------\n\nTITLE: Creating Frame Widgets with TTK Bootstrap Styling\nDESCRIPTION: This code snippet demonstrates how to create both default and colored frame widgets using TTK Bootstrap. The Frame widget features a default background color matching the theme, but can also be customized by specifying a bootstyle parameter.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/styleguide/frame.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# default frame style\nFrame()\n\n# info colored frame style\nFrame(bootstyle=\"info\")\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring Disabled Spinbox Widgets in Python\nDESCRIPTION: This code shows two methods to create a disabled Spinbox widget: creating it in a disabled state and disabling it after creation. The disabled style cannot be applied via keywords.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/styleguide/spinbox.zh.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# create the widget in a disabled state\nSpinbox(state=\"disabled\")\n\n# disable the widget after creation\ne = Spinbox()\ne.configure(state=\"disabled\")\n```\n\n----------------------------------------\n\nTITLE: Creating Outline Menubuttons in ttkbootstrap\nDESCRIPTION: Examples of creating outline menubuttons, which feature a thin styled outline that changes to a solid color when pressed or on hover. Shows both the default outline style and a colored (info) outline variation.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/styleguide/menubutton.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# default outline menubutton style\nMenubutton(bootstyle=\"outline\")\n\n# info colored outline menubutton style\nMenubutton(bootstyle=\"info-outline\")\n```\n\n----------------------------------------\n\nTITLE: Creating Round Toggle Style Checkbuttons in ttkbootstrap\nDESCRIPTION: Demonstrates how to create a round toggle style checkbutton that features a rounded button with a circular indicator that changes color and position when toggled. Both default and success color variants are shown.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/styleguide/checkbutton.md#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# default round toggle style\nCheckbutton(bootstyle=\"round-toggle\")\n\n# success round toggle style\nCheckbutton(bootstyle=\"success-round-toggle\")\n```\n\n----------------------------------------\n\nTITLE: Creating Round Scrollbars in ttkbootstrap\nDESCRIPTION: Shows how to create scrollbars with rounded edges using the 'round' bootstyle parameter. Includes examples of a basic round scrollbar and a danger-colored round scrollbar variant.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/styleguide/scrollbar.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# default round scrollbar style\nScrollbar(bootstyle=\"round\")\n\n# danger colored round scrollbar style\nScrollbar(bootstyle=\"danger-round\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Disabled Menubuttons in TTK Bootstrap\nDESCRIPTION: Demonstrates two methods for creating disabled menubuttons: setting the disabled state during creation or configuring it after creation. This style cannot be applied via keywords.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/styleguide/menubutton.zh.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# create the menubutton in a disabled state\nMenubutton(state=\"disabled\")\n\n# disable a menubutton after creation\nb = Menubutton()\nb.configure(state=\"disabled\")\n```\n\n----------------------------------------\n\nTITLE: Creating Outline Menubuttons in TTK Bootstrap\nDESCRIPTION: Shows how to create outline-styled menubuttons with a thin border that changes to solid color on hover or press. Includes both default outline style and info-colored variant.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/styleguide/menubutton.zh.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# default outline menubutton style\nMenubutton(bootstyle=\"outline\")\n\n# info colored outline menubutton style\nMenubutton(bootstyle=\"info-outline\")\n```\n\n----------------------------------------\n\nTITLE: Creating Square Toggle Style Checkbuttons in ttkbootstrap\nDESCRIPTION: Shows how to create a square toggle style checkbutton that features a squared button with a square indicator that changes color and position when toggled. Both default and success color variants are shown.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/styleguide/checkbutton.md#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# default square toggle style\nCheckbutton(bootstyle=\"square-toggle\")\n\n# success square toggle style\nCheckbutton(bootstyle=\"success-square-toggle\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Square Scrollbars in ttkbootstrap\nDESCRIPTION: Creates default scrollbar widgets with square edges. The style can be customized with bootstrap colors like 'success'. The scrollbar features a light gray trough with styled thumb and arrow buttons that respond to hover and press actions.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/styleguide/scrollbar.zh.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# default scrollbar style\nScrollbar()\n\n# success colored default scrollbar style\nScrollbar(bootstyle=\"success\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Disabled Radiobuttons in Python with ttkbootstrap\nDESCRIPTION: This code demonstrates how to create and configure disabled radiobuttons. The disabled state can be set during creation or after the widget has been created.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/styleguide/radiobutton.md#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# create the radiobutton in a disabled state\nRadiobutton(state=\"disabled\")\n\n# disable a radiobutton after creation\nrb = Radiobutton()\nrb.configure(state=\"disabled\")\n```\n\n----------------------------------------\n\nTITLE: Creating Default and Colored Panedwindows in Python using ttkbootstrap\nDESCRIPTION: This code snippet demonstrates how to create a default Panedwindow and a colored Panedwindow with an 'info' style using ttkbootstrap. The Panedwindow widget features containers with themed background colors separated by styled sashes.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/styleguide/panedwindow.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# default panedwindow style\nPanedwindow()\n\n# info colored panedwindow style\nPanedwindow(bootstyle=\"info\")\n```\n\n----------------------------------------\n\nTITLE: Mouse Options Implementation\nDESCRIPTION: Creates a labeled frame containing mouse options with multiple checkbuttons for different mouse settings using TTKBootstrap.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/gallery/magicmouse.zh.md#2025-04-20_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nmouse_options = ttk.Labelframe(\n    master=col3,\n    text='2 Finger Gestures',\n    padding=(15, 10)\n)\nmouse_options.pack(\n    side=TOP,\n    fill=BOTH,\n    expand=YES,\n    pady=(10, 0)\n)\n\nop11 = ttk.Checkbutton(\n    master=mouse_options,\n    text='Ignore input if mouse if lifted',\n    variable='op11'\n)\nop11.pack(fill=X, pady=5)\n```\n\n----------------------------------------\n\nTITLE: Implementing Default Radiobutton Styles in ttkbootstrap\nDESCRIPTION: Examples of creating standard radiobuttons with the default style and secondary color theme. The radiobutton displays as a round indicator that fills with color when selected.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/styleguide/radiobutton.zh.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# default radiobutton style\nRadiobutton()\n\n# secondary colored radiobutton style\nRadiobutton(bootstyle=\"secondary\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Disabled Scale Widgets\nDESCRIPTION: Shows two methods for creating disabled Scale widgets: setting the disabled state during initialization or configuring it after widget creation. The disabled state is applied through widget settings rather than style keywords.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/styleguide/scale.zh.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# create the scale in a disabled state\nScale(state=\"disabled\")\n\n# disable a scale after creation\nscale = Scale()\nscale.configure(state=\"disabled\")\n```\n\n----------------------------------------\n\nTITLE: Creating TTK Bootstrap Panedwindow Widgets\nDESCRIPTION: Demonstrates how to create both default and themed Panedwindow widgets. The widget supports default styling with a grayish sash and custom styling using bootstyle colors like 'info'.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/styleguide/panedwindow.zh.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# default panedwindow style\nPanedwindow()\n\n# info colored panedwindow style\nPanedwindow(bootstyle=\"info\")\n```\n\n----------------------------------------\n\nTITLE: Two-Finger Sense Controls Implementation\nDESCRIPTION: Implements a slider control with reset button for two-finger gesture sensitivity settings using TTKBootstrap components.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/gallery/magicmouse.zh.md#2025-04-20_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ntwo_finger_sense_frame = ttk.Frame(two_finger_gest)\ntwo_finger_sense_frame.pack(fill=X, padx=(20, 0), pady=(5, 0))\n\nttk.Label(two_finger_sense_frame, text='Sense:').pack(side=LEFT)\n\nscale = ttk.Scale(two_finger_sense_frame, value=50, from_=1, to=100)\nscale.pack(side=LEFT, fill=X, expand=YES, padx=5)\n\ntwo_finger_sense_btn = ttk.Button(\n    master=two_finger_sense_frame,\n    image='reset-small',\n    bootstyle=LINK\n)\ntwo_finger_sense_btn.configure(command=self.callback)\ntwo_finger_sense_btn.pack(side=LEFT)\n```\n\n----------------------------------------\n\nTITLE: Implementing DatePickerPopup Widget in Python using TTKBootstrap\nDESCRIPTION: Examples of creating DatePickerPopup widgets with different color styles. The first example creates a default popup with primary color styling, while the second example creates a warning-colored popup using the bootstyle parameter.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/styleguide/datepickerpopup.zh.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# default popup\nDatePickerPopup()\n\n# warning colored popup\nDatePickerPopup(bootstyle=\"warning\")\n```\n\n----------------------------------------\n\nTITLE: Initializing and Running ttkbootstrap Window with File Search Engine\nDESCRIPTION: Creates a ttkbootstrap Window with 'journal' theme, initializes a FileSearchEngine instance with the window as parent, and starts the application main loop.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/gallery/filesearchengine.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\napp = ttk.Window(\"File Search Engine\", \"journal\")\nFileSearchEngine(app)\napp.mainloop()\n```\n\n----------------------------------------\n\nTITLE: Creating Separator Widgets in TTK Bootstrap\nDESCRIPTION: This code demonstrates how to create Separator widgets with TTK Bootstrap. The first example shows the default separator style which typically appears as a gray line, while the second example shows how to create a colored separator by applying the 'info' bootstyle.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/styleguide/separator.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# default separator style\nSeparator()\n\n# info colored separator style - handle color\nSeparator(bootstyle=\"info\")\n```\n\n----------------------------------------\n\nTITLE: Application Entry Point in Python\nDESCRIPTION: The main entry point that creates the application window and starts the event loop. It instantiates the BackMeUp application class within a TTKBootstrap window titled 'Back Me Up'.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/gallery/filebackup.md#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nif __name__ == '__main__':\n    \n    app = ttk.Window(\"Back Me Up\")\n    BackMeUp(app)\n    app.mainloop()\n```\n\n----------------------------------------\n\nTITLE: Configuring Disabled Buttons in Python with ttkbootstrap\nDESCRIPTION: Shows how to create and configure disabled buttons in ttkbootstrap. This style is applied through widget settings rather than keywords.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/styleguide/button.md#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# create the button in a disabled state\nButton(state=\"disabled\")\n\n# disable a button after creation\nb = Button()\nb.configure(state=\"disabled\")\n```\n\n----------------------------------------\n\nTITLE: Initialization and Callback Implementation\nDESCRIPTION: Sets up initial checkbox states and implements a callback function for button actions. Creates the main application window using TTKBootstrap.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/gallery/magicmouse.zh.md#2025-04-20_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n# turn on all checkbuttons\nfor i in range(1, 14):\n    self.setvar(f'op{i}', 1)\n\n# turn off select buttons\nfor j in [2, 9, 12, 13]:\n    self.setvar(f'op{j}', 0)\n\ndef callback(self):\n    \"\"\"Demo callback\"\"\"\n    Messagebox.ok(\n        title='Button callback', \n        message=\"You pressed a button.\"\n    )\n\n\nif __name__ == '__main__':\n\n    app = ttk.Window(\"Magic Mouse\", \"yeti\")\n    MouseUtilities(app)\n    app.mainloop()\n```\n\n----------------------------------------\n\nTITLE: User Themes Dictionary Format in Python\nDESCRIPTION: Example of the Python dictionary format used in the user.py file to define custom themes. This structure must be followed when importing themes into ttkbootstrap.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/themes/themecreator.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nUSER_THEMES = {\n    \"supercosmo\": {\n        \"type\": \"light\",\n        \"colors\": {\n            \"primary\": \"#2780e3\",\n            \"secondary\": \"#7E8081\",\n            \"success\": \"#3fb618\",\n            \"info\": \"#9954bb\",\n            \"warning\": \"#ff7518\",\n            \"danger\": \"#ff0039\",\n            \"light\":\"#F8F9FA\",\n            \"dark\": \"#373A3C\",\n            \"bg\": \"#ffffff\",\n            \"fg\": \"#373a3c\",\n            \"selectbg\": \"#7e8081\",\n            \"selectfg\": \"#ffffff\",\n            \"border\": \"#ced4da\",\n            \"inputfg\": \"#373a3c\",\n            \"inputbg\": \"#fdfdfe\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Default Label Styles in Python\nDESCRIPTION: Examples of implementing the default label style with optional color customization. The default style allows changing the foreground color using any of the available bootstyle colors.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/styleguide/label.zh.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# default label style\nLabel()\n\n# danger colored label style\nLabel(bootstyle=\"danger\")\n```\n\n----------------------------------------\n\nTITLE: Base Speed Control Implementation\nDESCRIPTION: Implements base speed control with a slider and reset button using TTKBootstrap components.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/gallery/magicmouse.zh.md#2025-04-20_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nbase_speed_sense_frame = ttk.Frame(mouse_options)\nbase_speed_sense_frame.pack(fill=X, padx=(20, 0), pady=(5, 0))\n\nlbl = ttk.Label(base_speed_sense_frame, text='Base speed:')\nlbl.pack(side=LEFT)\n\nscale = ttk.Scale(base_speed_sense_frame, value=50, from_=1, to=100)\nscale.pack(side=LEFT, fill=X, expand=YES, padx=5)\n\nbase_speed_sense_btn = ttk.Button(\n    master=base_speed_sense_frame,\n    image='reset-small',\n    bootstyle=LINK\n)\nbase_speed_sense_btn.configure(command=self.callback)\nbase_speed_sense_btn.pack(side=LEFT)\n```\n\n----------------------------------------\n\nTITLE: Setting Readonly State for Combobox in Python TTK Bootstrap\nDESCRIPTION: Demonstrates how to create a Combobox in readonly state or set an existing Combobox to readonly. The state parameter is used to control the widget's readonly status.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/styleguide/combobox.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# create the combobox in a readonly state\nCombobox(state=\"readonly\")\n\n# set the combobox readonly state after creation\ncb = Combobox()\ncb.configure(state=\"readonly\")\n```\n\n----------------------------------------\n\nTITLE: User Theme Dictionary Structure in Python\nDESCRIPTION: Example structure of the USER_THEMES dictionary in the user.py file. This shows the required format for defining custom themes, including color specifications for various UI elements.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/themes/themecreator.zh.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nUSER_THEMES = {\n    \"supercosmo\": {\n        \"type\": \"light\",\n        \"colors\": {\n            \"primary\": \"#2780e3\",\n            \"secondary\": \"#7E8081\",\n            \"success\": \"#3fb618\",\n            \"info\": \"#9954bb\",\n            \"warning\": \"#ff7518\",\n            \"danger\": \"#ff0039\",\n            \"light\":\"#F8F9FA\",\n            \"dark\": \"#373A3C\",\n            \"bg\": \"#ffffff\",\n            \"fg\": \"#373a3c\",\n            \"selectbg\": \"#7e8081\",\n            \"selectfg\": \"#ffffff\",\n            \"border\": \"#ced4da\",\n            \"inputfg\": \"#373a3c\",\n            \"inputbg\": \"#fdfdfe\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Labelframe Widgets with TTK Bootstrap\nDESCRIPTION: This snippet demonstrates how to create Labelframe widgets with default styling and with a custom color. When a color is specified using the 'bootstyle' parameter, both the label text and border will use this color.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/styleguide/labelframe.zh.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# default labelframe style\nLabelframe()\n\n# info colored labelframe style\nLabelframe(bootstyle=\"info\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Callback Method for Mouse Utilities in Python\nDESCRIPTION: A simple callback method that displays a message box when a button is pressed. This function is assigned to various buttons throughout the interface.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/gallery/magicmouse.md#2025-04-20_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\ndef callback(self):\n    \"\"\"Demo callback\"\"\"\n    Messagebox.ok(\n        title='Button callback', \n        message=\"You pressed a button.\"\n    )\n```\n\n----------------------------------------\n\nTITLE: Implementing Disabled Entry State in TTK Bootstrap\nDESCRIPTION: Shows how to create and configure Entry widgets in a disabled state. Demonstrates both initial creation with disabled state and post-creation configuration.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/styleguide/entry.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# create the widget in a disabled state\nEntry(state=\"disabled\")\n\n# disable the widget after creation\ne = Entry()\ne.configure(state=\"disabled\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Inverse Label Styles in Python\nDESCRIPTION: Examples of implementing the inverse label style which reverses the default colors. The inverse style changes the background color instead of the foreground and is useful in styled Frames or for label headings.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/styleguide/label.zh.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# default inverse label style\nLabel(bootstyle=\"inverse\")\n\n# danger colored inverse label style\nLabel(bootstyle=\"inverse-danger\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic DateEntry Widgets in Python\nDESCRIPTION: Shows how to create default and styled DateEntry widgets. The widget can be created with default styling or customized with a specific bootstyle color like 'success'.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/styleguide/dateentry.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# default date entry\nDateEntry()\n\n# success colored date entry\nDateEntry(bootstyle=\"success\")\n```\n\n----------------------------------------\n\nTITLE: Collapsible Frame Widget Implementation in Python\nDESCRIPTION: Custom widget class that creates a collapsible frame with toggle functionality. Includes initialization and methods for adding child frames with customizable titles and styles.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/gallery/filebackup.zh.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass CollapsingFrame(ttk.Frame):\n    \"\"\"A collapsible frame widget that opens and closes with a click.\"\"\"\n\n    def __init__(self, master, **kwargs):\n        super().__init__(master, **kwargs)\n        self.columnconfigure(0, weight=1)\n        self.cumulative_rows = 0\n\n        # widget images\n        self.images = [\n            ttk.PhotoImage(file=PATH/'icons8_double_up_24px.png'),\n            ttk.PhotoImage(file=PATH/'icons8_double_right_24px.png')\n        ]\n\n    def add(self, child, title=\"\", bootstyle=PRIMARY, **kwargs):\n        \"\"\"Add a child to the collapsible frame\n\n        Parameters:\n\n            child (Frame):\n                The child frame to add to the widget.\n\n            title (str):\n                The title appearing on the collapsible section header.\n\n            bootstyle (str):\n                The style to apply to the collapsible section header.\n\n            **kwargs (Dict):\n                Other optional keyword arguments.\n        \"\"\"\n        if child.winfo_class() != 'TFrame':\n            return\n        \n        style_color = Bootstyle.ttkstyle_widget_color(bootstyle)\n        frm = ttk.Frame(self, bootstyle=style_color)\n        frm.grid(row=self.cumulative_rows, column=0, sticky=EW)\n\n        # header title\n        header = ttk.Label(\n            master=frm,\n            text=title,\n            bootstyle=(style_color, INVERSE)\n        )\n        if kwargs.get('textvariable'):\n            header.configure(textvariable=kwargs.get('textvariable'))\n        header.pack(side=LEFT, fill=BOTH, padx=10)\n\n        # header toggle button\n        def _func(c=child): return self._toggle_open_close(c)\n        btn = ttk.Button(\n            master=frm,\n            image=self.images[0],\n            bootstyle=style_color,\n            command=_func\n        )\n        btn.pack(side=RIGHT)\n\n        # assign toggle button to child so that it can be toggled\n        child.btn = btn\n        child.grid(row=self.cumulative_rows + 1, column=0, sticky=NSEW)\n\n        # increment the row assignment\n        self.cumulative_rows += 2\n\n    def _toggle_open_close(self, child):\n        \"\"\"Open or close the section and change the toggle button \n        image accordingly.\n\n        Parameters:\n            \n            child (Frame):\n                The child element to add or remove from grid manager.\n        \"\"\"\n        if child.winfo_viewable():\n            child.grid_remove()\n            child.btn.configure(image=self.images[1])\n        else:\n            child.grid()\n            child.btn.configure(image=self.images[0])\n```\n\n----------------------------------------\n\nTITLE: Implementing Disabled Combobox State in Python TTK Bootstrap\nDESCRIPTION: Shows how to create a Combobox in a disabled state or disable an existing Combobox widget. The state parameter is used to control the widget's disabled status.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/styleguide/combobox.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# create the combobox in a disabled state\nCombobox(state=\"disabled\")\n\n# disable a combobox after creation\ncb = Combobox()\ncb.configure(state=\"disabled\")\n```\n\n----------------------------------------\n\nTITLE: Creating Standard and Colored Sizegrip Widgets in TTkBootstrap\nDESCRIPTION: This snippet demonstrates how to implement both a default Sizegrip widget and a custom-colored version using the bootstyle parameter. The Sizegrip widget shows a pattern of squares that can be used to resize windows or panes.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/styleguide/sizegrip.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# default sizegrip style\nSizegrip()\n\n# info colored sizegrip style - handle color\nSizegrip(bootstyle=\"info\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Disabled State for DateEntry Widget\nDESCRIPTION: Demonstrates how to create a DateEntry widget in a disabled state or disable it after creation. The disabled state must be set through widget settings rather than keywords.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/styleguide/dateentry.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# create the date entry in a disabled state\nDateEntry(state=\"disabled\")\n\n# disable a date entry after creation\nd = DateEntry()\nd.configure(state=\"disabled\")\n```\n\n----------------------------------------\n\nTITLE: Defining Color Theme in JSON\nDESCRIPTION: This JSON object defines color values for a user interface theme. It includes semantic colors like warning and danger, as well as specific UI element colors such as background, foreground, selection, and input fields.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/themes/definitions.zh.md#2025-04-20_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"warning\": \"#e16e25\",\n    \"danger\": \"#cf3c40\",\n    \"light\": \"#eceef1\",\n    \"dark\": \"#33383e\",\n    \"bg\": \"#ffffff\",\n    \"fg\": \"#2ea4e7\",\n    \"selectbg\": \"#adb5bd\",\n    \"selectfg\": \"#ffffff\",\n    \"border\": \"#a9b4be\",\n    \"inputfg\": \"#495057\",\n    \"inputbg\": \"#ffffff\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Readonly State for DateEntry Widget\nDESCRIPTION: Shows how to create a DateEntry widget in readonly state or set it to readonly after creation. The readonly state must be configured through widget settings.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/styleguide/dateentry.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# create the date entry in a readonly state\nDateEntry(state=\"readonly\")\n\n# set the date entry readonly state after creation\nd = DateEntry()\nd.configure(state=\"readonly\")\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring Readonly Spinbox Widgets\nDESCRIPTION: Shows how to create a Spinbox in a readonly state on initialization, and how to set an existing Spinbox to readonly after creation. The readonly state applies special styling that cannot be applied through keywords.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/styleguide/spinbox.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# create the widget in a readonly state\nSpinbox(state=\"readonly\")\n\n# set the widget readonly state after creation\ne = Spinbox()\ne.configure(state=\"readonly\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Disabled State for DateEntry in Python\nDESCRIPTION: Demonstrates how to create a DateEntry widget in a disabled state or disable it after creation. This special style is configured through widget settings rather than keywords.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/styleguide/dateentry.zh.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# create the date entry in a disabled state\nDateEntry(state=\"disabled\")\n\n# disable a date entry after creation\nd = DateEntry()\nd.configure(state=\"disabled\")\n```\n\n----------------------------------------\n\nTITLE: JSON Format for User Themes Import\nDESCRIPTION: Example of the JSON structure required when importing themes at runtime using the Style.load_user_themes method. This approach only affects the current project and doesn't modify ttkbootstrap source files.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/themes/themecreator.md#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"themes\": [\n    {\n      \"midnight\": {\n        \"type\": \"dark\",\n        \"colors\": {\n          \"primary\": \"#0a21f5\",\n            \"secondary\": \"#555555\",\n            \"success\": \"#77b300\",\n            \"info\": \"#c6c6c6\",\n            \"warning\": \"#ff8800\",\n            \"danger\": \"#cc0000\",\n            \"light\": \"#adafae\",\n            \"dark\": \"#000000\",\n            \"bg\": \"#000000\",\n            \"fg\": \"#ffffff\",\n            \"selectbg\": \"#454545\",\n            \"selectfg\": \"#ffffff\",\n            \"border\": \"#060606\",\n            \"inputfg\": \"#ffffff\",\n            \"inputbg\": \"#191919\",\n            \"active\": \"#282828\"\n        }\n      }\n    },\n    {\n      \"nightout\": {\n        \"type\": \"dark\",\n        \"colors\": {\n          \"primary\": \"#164fe2\",\n            \"secondary\": \"#555555\",\n            \"success\": \"#77b300\",\n            \"info\": \"#c0c0c0\",\n            \"warning\": \"#ff8800\",\n            \"danger\": \"#cc0000\",\n            \"light\": \"#ADAFAE\",\n            \"dark\": \"#222222\",\n            \"bg\": \"#000000\",\n            \"fg\": \"#ffffff\",\n            \"selectbg\": \"#454545\",\n            \"selectfg\": \"#ffffff\",\n            \"border\": \"#060606\",\n            \"inputfg\": \"#ffffff\",\n            \"inputbg\": \"#191919\",\n            \"active\": \"#282828\"\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Readonly State for DateEntry in Python\nDESCRIPTION: Shows how to create a DateEntry widget in a readonly state or set it to readonly after creation. Like the disabled state, this is configured through widget settings.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/styleguide/dateentry.zh.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# create the date entry in a readonly state\nDateEntry(state=\"readonly\")\n\n# set the date entry readonly state after creation\nd = DateEntry()\nd.configure(state=\"readonly\")\n```\n\n----------------------------------------\n\nTITLE: Setting Disabled Button States in TTK Bootstrap\nDESCRIPTION: Demonstrates how to create buttons in a disabled state or disable them after creation. This style is applied through widget configuration rather than bootstyle keywords.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/styleguide/button.zh.md#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# create the button in a disabled state\nButton(state=\"disabled\")\n\n# disable a button after creation\nb = Button()\nb.configure(state=\"disabled\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Disabled Scale Widgets in ttkbootstrap with Python\nDESCRIPTION: Shows how to create a Scale widget in a disabled state initially, and how to disable a Scale widget after it has been created.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/styleguide/scale.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# create the scale in a disabled state\nScale(state=\"disabled\")\n\n# disable a scale after creation\nscale = Scale()\nscale.configure(state=\"disabled\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Colors Module Documentation in ttkbootstrap\nDESCRIPTION: YAML configuration that defines documentation generation settings for the Colors module. It filters out private methods while including __init__, and sets rendering options like heading level and root heading visibility.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/api/style/colors.zh.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n::: ttkbootstrap.style.Colors\n    selection:\n        filters: [\"!^_\", \"^__init__\"]\n    rendering:\n        heading_level: 2\n        show_root_heading: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Disabled Radiobuttons in ttkbootstrap\nDESCRIPTION: Examples of creating and configuring disabled radiobuttons. This special state cannot be applied via bootstyle keywords but must be set through the state parameter or configure method.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/styleguide/radiobutton.zh.md#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# create the radiobutton in a disabled state\nRadiobutton(state=\"disabled\")\n\n# disable a radiobutton after creation\nrb = Radiobutton()\nrb.configure(state=\"disabled\")\n```\n\n----------------------------------------\n\nTITLE: Creating Disabled Menubuttons in ttkbootstrap\nDESCRIPTION: Examples of implementing disabled menubuttons, which cannot be interacted with by the user. Shows both how to create a menubutton in a disabled state initially and how to disable a menubutton after creation.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/styleguide/menubutton.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# create the menubutton in a disabled state\nMenubutton(state=\"disabled\")\n\n# disable a menubutton after creation\nb = Menubutton()\nb.configure(state=\"disabled\")\n```\n\n----------------------------------------\n\nTITLE: Initializing GUI Elements with Sample Data in Python\nDESCRIPTION: Code that populates a file entry with a default path and creates sample log entries in a treeview and text widget. It generates random backup statuses and timestamps for demonstration purposes.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/gallery/filebackup.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n## starting sample directory\nfile_entry.insert(END, 'D:/text/myfiles/top-secret/samples/')\n\n## treeview and backup logs\nfor x in range(20, 35):\n    result = choices(['Backup Up', 'Missed in Destination'])[0]\n    st.insert(END, f'19:34:{x}\\t\\t Uploading: D:/file_{x}.txt\\n')\n    st.insert(END, f'19:34:{x}\\t\\t Upload {result}.\\n')\n    timestamp = datetime.now().strftime('%d.%m.%Y %H:%M:%S')\n    tv.insert('', END, x, \n              values=(f'sample_file_{x}.txt', \n                      result, timestamp, timestamp, \n                      f'{int(x // 3)} MB')\n    )\ntv.selection_set(20)\n```\n\n----------------------------------------\n\nTITLE: Configuring Documentation for StyleBuilderTK Class\nDESCRIPTION: Markdown configuration for documenting the StyleBuilderTK class from the ttkbootstrap.style module, specifying filter options to exclude private methods except for '__init__' and setting rendering preferences.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/api/style/stylebuildertk.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# StyleBuilderTK\n\n::: ttkbootstrap.style.StyleBuilderTK\n    selection:\n        filters: [\"!^_\", \"^__init__\"]\n    rendering:\n        heading_level: 2\n        show_root_heading: true\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring Readonly Spinbox Widgets in Python\nDESCRIPTION: This snippet illustrates two ways to create a readonly Spinbox widget: creating it in a readonly state and setting it to readonly after creation. The readonly style cannot be applied via keywords.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/styleguide/spinbox.zh.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# create the widget in a readonly state\nSpinbox(state=\"readonly\")\n\n# set the widget readonly state after creation\ne = Spinbox()\ne.configure(state=\"readonly\")\n```\n\n----------------------------------------\n\nTITLE: Style Summary Table in Markdown\nDESCRIPTION: A markdown table that summarizes the styling elements used in the Magic Mouse application. It outlines the UI items, their ttk widget classes, and the corresponding bootstyle values applied to them.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/gallery/magicmouse.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Item              | Class        | Bootstyle  |\n| ---               | ---          | ---        |\n| Image buttons     | `Button`     | link       |\n| License number    | `Label`      | primary    |\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Themes in JSON for ttkbootstrap\nDESCRIPTION: This JSON defines the standard themes available in ttkbootstrap, each with a comprehensive color palette. Themes are categorized as light or dark and include colors for various UI components such as buttons, inputs, backgrounds, and text. Each color is specified using hex codes for consistent styling across the application.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/themes/definitions.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"cosmo\": {\n        \"type\": \"light\",\n        \"colors\": {\n            \"primary\": \"#2780e3\",\n            \"secondary\": \"#7E8081\",\n            \"success\": \"#3fb618\",\n            \"info\": \"#9954bb\",\n            \"warning\": \"#ff7518\",\n            \"danger\": \"#ff0039\",\n            \"light\": \"#F8F9FA\",\n            \"dark\": \"#373A3C\",\n            \"bg\": \"#ffffff\",\n            \"fg\": \"#373a3c\",\n            \"selectbg\": \"#7e8081\",\n            \"selectfg\": \"#ffffff\",\n            \"border\": \"#ced4da\",\n            \"inputfg\": \"#373a3c\",\n            \"inputbg\": \"#fdfdfe\",\n        },\n    },\n    \"flatly\": {\n        \"type\": \"light\",\n        \"colors\": {\n            \"primary\": \"#2c3e50\",\n            \"secondary\": \"#95a5a6\",\n            \"success\": \"#18bc9c\",\n            \"info\": \"#3498db\",\n            \"warning\": \"#f39c12\",\n            \"danger\": \"#e74c3c\",\n            \"light\": \"#ECF0F1\",\n            \"dark\": \"#7B8A8B\",\n            \"bg\": \"#ffffff\",\n            \"fg\": \"#212529\",\n            \"selectbg\": \"#95a5a6\",\n            \"selectfg\": \"#ffffff\",\n            \"border\": \"#ced4da\",\n            \"inputfg\": \"#212529\",\n            \"inputbg\": \"#ffffff\",\n        },\n    },\n    \"litera\": {\n        \"type\": \"light\",\n        \"colors\": {\n            \"primary\": \"#4582ec\",\n            \"secondary\": \"#adb5bd\",\n            \"success\": \"#02b875\",\n            \"info\": \"#17a2b8\",\n            \"warning\": \"#f0ad4e\",\n            \"danger\": \"#d9534f\",\n            \"light\": \"#F8F9FA\",\n            \"dark\": \"#343A40\",\n            \"bg\": \"#ffffff\",\n            \"fg\": \"#343a40\",\n            \"selectbg\": \"#adb5bd\",\n            \"selectfg\": \"#ffffff\",\n            \"border\": \"#bfbfbf\",\n            \"inputfg\": \"#343a40\",\n            \"inputbg\": \"#fff\",\n        },\n    },\n    \"minty\": {\n        \"type\": \"light\",\n        \"colors\": {\n            \"primary\": \"#78c2ad\",\n            \"secondary\": \"#f3969a\",\n            \"success\": \"#56cc9d\",\n            \"info\": \"#6cc3d5\",\n            \"warning\": \"#ffce67\",\n            \"danger\": \"#ff7851\",\n            \"light\": \"#F8F9FA\",\n            \"dark\": \"#343A40\",\n            \"bg\": \"#ffffff\",\n            \"fg\": \"#5a5a5a\",\n            \"selectbg\": \"#f3969a\",\n            \"selectfg\": \"#ffffff\",\n            \"border\": \"#ced4da\",\n            \"inputfg\": \"#696969\",\n            \"inputbg\": \"#fff\",\n        },\n    },\n    \"lumen\": {\n        \"type\": \"light\",\n        \"colors\": {\n            \"primary\": \"#158cba\",\n            \"secondary\": \"#919191\",\n            \"success\": \"#28b62c\",\n            \"info\": \"#75caeb\",\n            \"warning\": \"#ff851b\",\n            \"danger\": \"#ff4136\",\n            \"light\": \"#F6F6F6\",\n            \"dark\": \"#555555\",\n            \"bg\": \"#ffffff\",\n            \"fg\": \"#555555\",\n            \"selectbg\": \"#919191\",\n            \"selectfg\": \"#ffffff\",\n            \"border\": \"#ced4da\",\n            \"inputfg\": \"#555555\",\n            \"inputbg\": \"#fff\",\n        },\n    },\n    \"sandstone\": {\n        \"type\": \"light\",\n        \"colors\": {\n            \"primary\": \"#325D88\",\n            \"secondary\": \"#8e8c84\",\n            \"success\": \"#93c54b\",\n            \"info\": \"#29abe0\",\n            \"warning\": \"#f47c3c\",\n            \"danger\": \"#d9534f\",\n            \"light\": \"#F8F5F0\",\n            \"dark\": \"#3E3F3A\",\n            \"bg\": \"#ffffff\",\n            \"fg\": \"#3e3f3a\",\n            \"selectbg\": \"#8e8c84\",\n            \"selectfg\": \"#ffffff\",\n            \"border\": \"#ced4da\",\n            \"inputfg\": \"#6E6D69\",\n            \"inputbg\": \"#fff\",\n        },\n    },\n    \"yeti\": {\n        \"type\": \"light\",\n        \"colors\": {\n            \"primary\": \"#008cba\",\n            \"secondary\": \"#707070\",\n            \"success\": \"#43ac6a\",\n            \"info\": \"#5bc0de\",\n            \"warning\": \"#e99002\",\n            \"danger\": \"#f04124\",\n            \"light\": \"#EEEEEE\",\n            \"dark\": \"#222222\",\n            \"bg\": \"#ffffff\",\n            \"fg\": \"#222222\",\n            \"selectbg\": \"#707070\",\n            \"selectfg\": \"#ffffff\",\n            \"border\": \"#cccccc\",\n            \"inputfg\": \"#222222\",\n            \"inputbg\": \"#fff\",\n        },\n    },\n    \"pulse\": {\n        \"type\": \"light\",\n        \"colors\": {\n            \"primary\": \"#593196\",\n            \"secondary\": \"#69676E\",\n            \"success\": \"#13b955\",\n            \"info\": \"#009cdc\",\n            \"warning\": \"#efa31d\",\n            \"danger\": \"#fc3939\",\n            \"light\": \"#F9F8FC\",\n            \"dark\": \"#17141F\",\n            \"bg\": \"#ffffff\",\n            \"fg\": \"#444444\",\n            \"selectbg\": \"#69676e\",\n            \"selectfg\": \"#ffffff\",\n            \"border\": \"#cbc8d0\",\n            \"inputfg\": \"#444444\",\n            \"inputbg\": \"#fdfdfe\",\n        },\n    },\n    \"united\": {\n        \"type\": \"light\",\n        \"colors\": {\n            \"primary\": \"#e95420\",\n            \"secondary\": \"#aea79f\",\n            \"success\": \"#38b44a\",\n            \"info\": \"#17a2b8\",\n            \"warning\": \"#efb73e\",\n            \"danger\": \"#df382c\",\n            \"light\": \"#E9ECEF\",\n            \"dark\": \"#772953\",\n            \"bg\": \"#ffffff\",\n            \"fg\": \"#333333\",\n            \"selectbg\": \"#aea79f\",\n            \"selectfg\": \"#ffffff\",\n            \"border\": \"#ced4da\",\n            \"inputfg\": \"#333333\",\n            \"inputbg\": \"#fff\",\n        },\n    },\n    \"morph\": {\n        \"type\": \"light\",\n        \"colors\": {\n            \"primary\": \"#378DFC\",\n            \"secondary\": \"#aaaaaa\",\n            \"success\": \"#43cc29\",\n            \"info\": \"#5B62F4\",\n            \"warning\": \"#FFC107\",\n            \"danger\": \"#E52527\",\n            \"light\": \"#F0F5FA\",\n            \"dark\": \"#212529\",\n            \"bg\": \"#D9E3F1\",\n            \"fg\": \"#7B8AB8\",\n            \"selectbg\": \"#aaaaaa\",\n            \"selectfg\": \"#FBFDFF\",\n            \"border\": \"#B9C7DA\",\n            \"inputfg\": \"#7F8EBA\",\n            \"inputbg\": \"#F0F5FA\",\n        },\n    },\n    \"journal\": {\n        \"type\": \"light\",\n        \"colors\": {\n            \"primary\": \"#eb6864\",\n            \"secondary\": \"#aaaaaa\",\n            \"success\": \"#22b24c\",\n            \"info\": \"#336699\",\n            \"warning\": \"#f5e625\",\n            \"danger\": \"#f57a00\",\n            \"light\": \"#F8F9FA\",\n            \"dark\": \"#222222\",\n            \"bg\": \"#ffffff\",\n            \"fg\": \"#222222\",\n            \"selectbg\": \"#aaaaaa\",\n            \"selectfg\": \"#ffffff\",\n            \"border\": \"#ced4da\",\n            \"inputfg\": \"#565656\",\n            \"inputbg\": \"#fff\",\n        },\n    },\n    \"darkly\": {\n        \"type\": \"dark\",\n        \"colors\": {\n            \"primary\": \"#375a7f\",\n            \"secondary\": \"#444444\",\n            \"success\": \"#00bc8c\",\n            \"info\": \"#3498db\",\n            \"warning\": \"#f39c12\",\n            \"danger\": \"#e74c3c\",\n            \"light\": \"#ADB5BD\",\n            \"dark\": \"#303030\",\n            \"bg\": \"#222222\",\n            \"fg\": \"#ffffff\",\n            \"selectbg\": \"#555555\",\n            \"selectfg\": \"#ffffff\",\n            \"border\": \"#222222\",\n            \"inputfg\": \"#ffffff\",\n            \"inputbg\": \"#2f2f2f\",\n        },\n    },\n    \"superhero\": {\n        \"type\": \"dark\",\n        \"colors\": {\n            \"primary\": \"#4c9be8\",\n            \"secondary\": \"#4e5d6c\",\n            \"success\": \"#5cb85c\",\n            \"info\": \"#5bc0de\",\n            \"warning\": \"#f0ad4e\",\n            \"danger\": \"#d9534f\",\n            \"light\": \"#ABB6C2\",\n            \"dark\": \"#20374C\",\n            \"bg\": \"#2b3e50\",\n            \"fg\": \"#ffffff\",\n            \"selectbg\": \"#526170\",\n            \"selectfg\": \"#ffffff\",\n            \"border\": \"#222222\",\n            \"inputfg\": \"#ebebeb\",\n            \"inputbg\": \"#32465a\",\n        },\n    },\n    \"solar\": {\n        \"type\": \"dark\",\n        \"colors\": {\n            \"primary\": \"#bc951a\",\n            \"secondary\": \"#94a2a4\",\n            \"success\": \"#44aca4\",\n            \"info\": \"#3f98d7\",\n            \"warning\": \"#d05e2f\",\n            \"danger\": \"#d95092\",\n            \"light\": \"#A9BDBD\",\n            \"dark\": \"#073642\",\n            \"bg\": \"#002B36\",\n            \"fg\": \"#ffffff\",\n            \"selectbg\": \"#0b5162\",\n            \"selectfg\": \"#ffffff\",\n            \"border\": \"#00252e\",\n            \"inputfg\": \"#A9BDBD\",\n            \"inputbg\": \"#073642\",\n        },\n    },\n    \"cyborg\": {\n        \"type\": \"dark\",\n        \"colors\": {\n            \"primary\": \"#2a9fd6\",\n            \"secondary\": \"#555555\",\n            \"success\": \"#77b300\",\n            \"info\": \"#9933cc\",\n            \"warning\": \"#ff8800\",\n            \"danger\": \"#cc0000\",\n            \"light\": \"#ADAFAE\",\n            \"dark\": \"#222222\",\n            \"bg\": \"#060606\",\n            \"fg\": \"#ffffff\",\n            \"selectbg\": \"#454545\",\n            \"selectfg\": \"#ffffff\",\n            \"border\": \"#060606\",\n            \"inputfg\": \"#ffffff\",\n            \"inputbg\": \"#191919\",\n        },\n    },\n    \"vapor\": {\n        \"type\": \"dark\",\n        \"colors\": {\n            \"primary\": \"#6e40c0\",\n            \"secondary\": \"#ea38b8\",\n            \"success\": \"#3af180\",\n            \"info\": \"#1da2f2\",\n            \"warning\": \"#ffbd05\",\n            \"danger\": \"#e34b54\",\n            \"light\": \"#44d7e8\",\n            \"dark\": \"#170229\",\n            \"bg\": \"#190831\",\n            \"fg\": \"#32fbe2\",\n            \"selectbg\": \"#461a8a\",\n            \"selectfg\": \"#ffffff\",\n            \"border\": \"#060606\",\n            \"inputfg\": \"#bfb6cd\",\n            \"inputbg\": \"#30115e\",\n        },\n    },\n    \"simplex\": {\n        \"type\": \"light\",\n        \"colors\": {\n            \"primary\": \"#d8220e\",\n            \"secondary\": \"#858e96\",\n            \"success\": \"#469307\",\n            \"info\": \"#0099ce\",\n            \"warning\": \"#d88220\",\n            \"danger\": \"#9a479e\",\n            \"light\": \"#f2f2f2\",\n            \"dark\": \"#3b3d3f\",\n            \"bg\": \"#fcfcfc\",\n            \"fg\": \"#3b3d3f\",\n            \"selectbg\": \"#a9afb6\",\n            \"selectfg\": \"#ffffff\",\n            \"border\": \"#858e96\",\n            \"inputfg\": \"#3b3d3f\",\n            \"inputbg\": \"#fcfcfc\",\n        },\n    },\n    \"cerculean\": {\n        \"type\": \"light\",\n        \"colors\": {\n            \"primary\": \"#4bb1ea\",\n            \"secondary\": \"#a9b4be\",\n            \"success\": \"#84b251\",\n\n```\n\n----------------------------------------\n\nTITLE: Configuring StyleBuilderTK Documentation with MkDocs\nDESCRIPTION: This snippet defines how the StyleBuilderTK class from the ttkbootstrap.style module should be documented. It specifies which methods to include by filtering out those that start with an underscore (except for __init__) and sets rendering parameters like heading level and visibility of the root heading.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/api/style/stylebuildertk.zh.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n::: ttkbootstrap.style.StyleBuilderTK\n    selection:\n        filters: [\"!^_\", \"^__init__\"]\n    rendering:\n        heading_level: 2\n        show_root_heading: true\n```\n\n----------------------------------------\n\nTITLE: Implementing Equalizer GUI with ttkbootstrap in Python\nDESCRIPTION: This code creates an equalizer interface using ttkbootstrap. It features multiple vertical sliders for volume and frequency controls, styled differently based on their function. The script uses random initial values and updates labels dynamically.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/gallery/equalizer.zh.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport ttkbootstrap as ttk\nfrom ttkbootstrap.constants import *\nfrom random import randint\n\n\nclass Equalizer(ttk.Frame):\n    \n    def __init__(self, master):\n        super().__init__(master, padding=20)\n        self.pack(fill=BOTH, expand=YES)\n\n        controls = [\"VOL\", \"31.25\", \"62.5\", \"125\", \"250\",\n                    \"500\", \"1K\", \"2K\", \"4K\", \"8K\", \"16K\", \"GAIN\"]\n\n        for control in controls:\n            self.create_band(self, control)\n\n    def create_band(self, master, text):\n        \"\"\"Create and pack an equalizer band\"\"\"\n        value = randint(1, 99)\n        self.setvar(text, value)\n\n        container = ttk.Frame(master)\n        container.pack(side=LEFT, fill=Y, padx=10)\n\n        # header label\n        hdr = ttk.Label(container, text=text, anchor=CENTER)\n        hdr.pack(side=TOP, fill=X, pady=10)\n\n        # volume scale\n        if text in [\"VOL\", \"GAIN\"]:\n            bootstyle = SUCCESS\n        else:\n            bootstyle = INFO\n\n        scale = ttk.Scale(\n            master=container,\n            orient=VERTICAL,\n            from_=99,\n            to=1,\n            value=value,\n            command=lambda x=value, y=text: self.update_value(x, y),\n            bootstyle=bootstyle,\n        )\n        scale.pack(fill=Y)\n\n        # value label\n        val = ttk.Label(master=container, textvariable=text)\n        val.pack(pady=10)\n\n    def update_value(self, value, name):\n        self.setvar(name, f\"{float(value):.0f}\")\n\n\nif __name__ == \"__main__\":\n\n    app = ttk.Window(\"Equalizer\", \"litera\", resizable=(False, False))\n    Equalizer(app)\n    app.mainloop()\n```\n\n----------------------------------------\n\nTITLE: Importing StyleBuilderTTK Documentation\nDESCRIPTION: Documentation import directive for the StyleBuilderTTK class from ttkbootstrap.style module, configured to filter out private methods and show public interface.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/api/style/stylebuilderttk.zh.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n::: ttkbootstrap.style.StyleBuilderTTK\n    selection:\n        filters: [\"!^_\", \"^__init__\"]\n    rendering:\n        heading_level: 2\n        show_root_heading: true\n```\n\n----------------------------------------\n\nTITLE: Installing ttkbootstrap from GitHub\nDESCRIPTION: This command installs the ttkbootstrap package directly from its GitHub repository using pip.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/gettingstarted/installation.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install git+https://github.com/israel-dryer/ttkbootstrap\n```\n\n----------------------------------------\n\nTITLE: Configuring Documentation for Bootstyle Class in ttkbootstrap\nDESCRIPTION: This code snippet is a markdown configuration block for rendering documentation of the ttkbootstrap.style.Bootstyle class. It specifies selection filters to exclude methods starting with '_' but include '__init__', and sets rendering options for heading level and visibility.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/api/style/bootstyle.zh.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n::: ttkbootstrap.style.Bootstyle\n    selection:\n        filters: [\"!^_\", \"^__init__\"]\n    rendering:\n        heading_level: 2\n        show_root_heading: true\n```\n\n----------------------------------------\n\nTITLE: Directory Selection Method in Python\nDESCRIPTION: Method to open a directory selection dialog and update the folder path variable.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/gallery/filebackup.zh.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef get_directory(self):\n    \"\"\"Open dialogue to get directory and update variable\"\"\"\n    self.update_idletasks()\n    d = askdirectory()\n    if d:\n        self.setvar('folder-path', d)\n```\n\n----------------------------------------\n\nTITLE: Legacy Widget Warning Note\nDESCRIPTION: Warning message about the implications of disabling autostyle on legacy widgets, noting that it will prevent theme updates and default styling.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/styleguide/legacywidgets.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n!!! warning \"Turning off autostyle should be used with caution\"\n    If you turn off autostyle on a widget, it will no longer receive theme\n    change updates; no styling will be applied by default, including fonts,\n    relief, etc...\n```\n\n----------------------------------------\n\nTITLE: Adding New Language to TTKBootstrap Message Catalog in Python\nDESCRIPTION: This code snippet demonstrates the pattern for adding a new language to the TTKBootstrap message catalog. It shows how to create a new LocaleMsgs instance with a language code and pairs of original and translated strings.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/src/ttkbootstrap/localization/README.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nMESSAGES.append(\n    LocaleMsgs(\n        \"language_code\",\n        (\"original\", \"translated\"),\n        (\"original\", \"translated\")\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Mkdocs Documentation for ThemeDefinition Class in Python\nDESCRIPTION: This code snippet configures the documentation generation for the ThemeDefinition class in the ttkbootstrap.style module. It sets up filters to exclude private methods and configures the rendering options for the documentation.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/api/style/themedefinition.zh.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n::: ttkbootstrap.style.ThemeDefinition\n    selection:\n        filters: [\"!^_\", \"^__init__\"]\n    rendering:\n        heading_level: 2\n        show_root_heading: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Style Class Documentation in ttkbootstrap\nDESCRIPTION: This code snippet configures the documentation rendering for the Style class in ttkbootstrap. It filters out methods starting with an underscore (except for __init__) and sets the heading level to 2 with the root heading shown.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/api/style/style.zh.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n::: ttkbootstrap.style.Style\n    selection:\n        filters: [\"!^_\", \"^__init__\"]\n    rendering:\n        heading_level: 2\n        show_root_heading: true\n```\n\n----------------------------------------\n\nTITLE: Configuring MkDocs for TableRow Class Documentation\nDESCRIPTION: This code snippet configures the MkDocs documentation generator for the TableRow class. It specifies filters to exclude private methods and sets the rendering options for the heading level and root heading visibility.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/api/tableview/tablerow.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n::: ttkbootstrap.tableview.TableRow\n    selection:\n        filters: [\"!^_\", \"^__init__\"]\n    rendering:\n        heading_level: 2\n        show_root_heading: true\n```\n\n----------------------------------------\n\nTITLE: Configuring TTK Bootstrap Window Documentation\nDESCRIPTION: Configuration for documentation generation of the Window class, specifying filters to exclude private methods and include constructor, with custom rendering settings for heading levels.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/api/window/window.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n::: ttkbootstrap.window.Window\n    selection:\n        filters: [\"!^_\", \"^__init__\"]\n    rendering:\n        heading_level: 2\n        show_root_heading: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Tableview Documentation with MkDocs\nDESCRIPTION: This snippet configures how the Tableview class should be documented in MkDocs. It filters methods to exclude those starting with single underscore but include the __init__ method, and sets heading level and visibility options.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/api/tableview/tableview.zh.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Tableview\n\n::: ttkbootstrap.tableview.Tableview\n    selection:\n        filters: [\"!^_\", \"^__init__\"]\n    rendering:\n        heading_level: 2\n        show_root_heading: true\n```\n\n----------------------------------------\n\nTITLE: Application Entry Point in Python\nDESCRIPTION: Main entry point for the backup application that creates and runs the main window.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/gallery/filebackup.zh.md#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nif __name__ == '__main__':\n    \n    app = ttk.Window(\"Back Me Up\")\n    BackMeUp(app)\n    app.mainloop()\n```\n\n----------------------------------------\n\nTITLE: TTK Bootstrap Toplevel Class Definition\nDESCRIPTION: Markdown documentation header for TTK Bootstrap's Toplevel window class, indicating it is an extension of tkinter's Toplevel widget with enhanced theming capabilities.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/api/window/toplevel.zh.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Toplevel\n\n::: ttkbootstrap.window.Toplevel\n```\n\n----------------------------------------\n\nTITLE: Importing and Initializing Floodgauge Widget in Python\nDESCRIPTION: This code snippet demonstrates how to import and initialize the Floodgauge widget from the ttkbootstrap library. The Floodgauge is likely a custom widget for displaying progress or level indicators.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/api/widgets/floodgauge.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ttkbootstrap.widgets import Floodgauge\n\n# Example usage (hypothetical)\nfloodgauge = Floodgauge(master, maximum=100, value=50)\n```\n\n----------------------------------------\n\nTITLE: Configuring Window Class Documentation\nDESCRIPTION: YAML-style configuration block that specifies documentation settings for the ttkbootstrap.window.Window class. It defines method filtering to exclude private methods (starting with '_' but not '__') and sets rendering parameters including heading level and root heading visibility.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/api/window/window.zh.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n::: ttkbootstrap.window.Window\n    selection:\n        filters: [\"!^_\", \"^__init__\"]\n    rendering:\n        heading_level: 2\n        show_root_heading: true\n```\n\n----------------------------------------\n\nTITLE: Module Documentation Configuration for ttkbootstrap.validation\nDESCRIPTION: This markdown snippet configures the documentation generation for the ttkbootstrap.validation module. It sets filters to exclude names starting with '_' but include '__init__', and configures the heading level to 2.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/api/validation.zh.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n::: ttkbootstrap.validation\n    selection:\n        filters: [\"!^_\", \"^__init__\"]\n    rendering:\n        heading_level: 2\n```\n\n----------------------------------------\n\nTITLE: Configuring Tooltip Module Documentation in Markdown\nDESCRIPTION: This snippet configures how the tooltip module documentation should be rendered. It specifies a filter to exclude methods starting with '_' but include '__init__', and sets the heading level to 2 for the documentation.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/api/tooltip.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n::: ttkbootstrap.tooltip\n    selection:\n        filters: [\"!^_\", \"^__init__\"]\n    rendering:\n        heading_level: 2\n```\n\n----------------------------------------\n\nTITLE: Importing QueryDialog from ttkbootstrap.dialogs\nDESCRIPTION: This code snippet demonstrates how to import the QueryDialog class from the ttkbootstrap.dialogs module. It uses the mkdocstrings syntax to generate documentation for the class.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/api/dialogs/querydialog.zh.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n::: ttkbootstrap.dialogs.QueryDialog\n    selection:\n        filters: [\"!^_\", \"^__init__\"]\n    rendering:\n        heading_level: 2\n        show_root_heading: true\n```\n\n----------------------------------------\n\nTITLE: Configuring MkDocs for TTK Bootstrap Icon Documentation\nDESCRIPTION: This snippet shows the MkDocs configuration for documenting the Icon class. It filters out private methods and sets the rendering options for the documentation.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/api/icons/icon.zh.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n::: ttkbootstrap.icons.Icon\n    selection:\n        filters: [\"!^_\", \"^__init__\"]\n    rendering:\n        heading_level: 2\n        show_root_heading: true\n```\n\n----------------------------------------\n\nTITLE: Initializing QueryDialog Class in ttkbootstrap\nDESCRIPTION: This is a reference to the QueryDialog class documentation in the ttkbootstrap library. The documentation filters out private methods (those starting with '_') except for '__init__' and displays the content with specified heading levels.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/api/dialogs/querydialog.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n::: ttkbootstrap.dialogs.QueryDialog\n    selection:\n        filters: [\"!^_\", \"^__init__\"]\n    rendering:\n        heading_level: 2\n        show_root_heading: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation for TTK Bootstrap Validation Module\nDESCRIPTION: This code snippet configures the Sphinx documentation generator for the ttkbootstrap.validation module. It sets up filters to exclude certain items and specifies the rendering options.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/api/validation.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n::: ttkbootstrap.validation\n    selection:\n        filters: [\"!^_\", \"^__init__\"]\n    rendering:\n        heading_level: 2\n```\n\n----------------------------------------\n\nTITLE: Configuring Documentation for ttkbootstrap Emoji Class\nDESCRIPTION: Markdown configuration for generating documentation of the ttkbootstrap Emoji class. The configuration specifies which methods to include (excluding private methods and __init__) and how to render the documentation with specific heading level and root heading settings.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/api/icons/emoji.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n::: ttkbootstrap.icons.Emoji\n    selection:\n        filters: [\"!^_\", \"^__init__\"]\n    rendering:\n        heading_level: 2\n        show_root_heading: true\n```\n\n----------------------------------------\n\nTITLE: Documentation configuration for FontDialog in ttkbootstrap\nDESCRIPTION: Configures the documentation rendering for the FontDialog class. It sets filters to exclude methods starting with a single underscore but include those with double underscores, and defines rendering options including heading level and root heading visibility.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/api/dialogs/fontdialog.zh.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# FontDialog\n\n::: ttkbootstrap.dialogs.FontDialog\n    selection:\n        filters: [\"!^_\", \"^__init__\"]\n    rendering:\n        heading_level: 2\n        show_root_heading: true\n```\n\n----------------------------------------\n\nTITLE: Configuring ColorChooserDialog Documentation\nDESCRIPTION: YAML configuration block that specifies documentation filters and rendering options for the ColorChooserDialog class. It excludes private methods and configures heading display settings.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/api/dialogs/colorchooser.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n::: ttkbootstrap.dialogs.colorchooser.ColorChooserDialog\n    selection:\n        filters: [\"!^_\", \"^__init__\"]\n    rendering:\n        heading_level: 2\n        show_root_heading: true\n```\n\n----------------------------------------\n\nTITLE: Importing TTK Bootstrap Utility Module in Python\nDESCRIPTION: This snippet demonstrates how to import the utility module from the ttkbootstrap library. It uses Python's from-import syntax to bring in the entire utility module.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/api/utility.zh.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n::: ttkbootstrap.utility\n```\n\n----------------------------------------\n\nTITLE: DatePickerDialog Documentation Configuration in Markdown\nDESCRIPTION: Markdown configuration for rendering the DatePickerDialog class documentation. It specifies selection filters to exclude methods starting with '_' but include '__init__', and sets rendering parameters for heading level and visibility.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/api/dialogs/datepickerdialog.zh.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# DatePickerDialog\n\n::: ttkbootstrap.dialogs.DatePickerDialog\n    selection:\n        filters: [\"!^_\", \"^__init__\"]\n    rendering:\n        heading_level: 2\n        show_root_heading: true\n```\n\n----------------------------------------\n\nTITLE: Running TTK Creator in Shell\nDESCRIPTION: Command to run the TTK Creator program after installing ttkbootstrap. This launches the graphical interface for theme customization.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/themes/themecreator.zh.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython -m ttkcreator\n```\n\n----------------------------------------\n\nTITLE: Importing ColorDropperDialog from ttkbootstrap\nDESCRIPTION: This code snippet shows the import path for the ColorDropperDialog class within the ttkbootstrap library. It appears to be using a documentation directive to display the class documentation.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/api/dialogs/colordropper.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n::: ttkbootstrap.dialogs.colordropper.ColorDropperDialog\n    selection:\n        filters: [\"!^_\", \"^__init__\"]\n    rendering:\n        heading_level: 2\n        show_root_heading: true\n```\n\n----------------------------------------\n\nTITLE: Documenting ttkbootstrap Toast Module in Markdown\nDESCRIPTION: This code snippet defines the documentation structure for the ttkbootstrap toast module. It uses a special syntax to include the module documentation, filtering out private methods except for __init__, and setting the heading level for rendering.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/api/toast.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# toast module\n\n::: ttkbootstrap.toast\n    selection:\n        filters: [\"!^_\", \"^__init__\"]\n    rendering:\n        heading_level: 2\n```\n\n----------------------------------------\n\nTITLE: Displaying Warning Message in Markdown\nDESCRIPTION: This code snippet uses Markdown syntax to create a warning message about significant changes in version 1.0 of ttkbootstrap. It informs users about potential issues when importing themes from older versions.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/index.zh.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n!!! warning \"1.0 中的重大更改\"\n\t版本 1.0 是库的完全重建。如果您使用的是[0.5版本](https://github.com/israel-dryer/ttkbootstrap/tree/version-0.5)，则在尝试使用themes.json导入主题时可能会遇到问题，因为这已从1.0中删除。现在，您可以使用 ttkcreator 直接导入和保存主题。\n```\n\n----------------------------------------\n\nTITLE: Importing TTK Bootstrap Localization Module in Python\nDESCRIPTION: This code snippet demonstrates how to import the localization module from the ttkbootstrap library. It uses the '::: ttkbootstrap.localization' directive to include the module documentation.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/api/localization.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n::: ttkbootstrap.localization\n    selection:\n        filters: [\"!^_\", \"^__init__\"]\n    rendering:\n        heading_level: 2\n```\n\n----------------------------------------\n\nTITLE: Updating Package Version in setup.py\nDESCRIPTION: A note to update the version number in the setup.py file before creating a new release.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/build_instructions.txt#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nupdate version in setup.py\n```\n\n----------------------------------------\n\nTITLE: Importing ttkbootstrap Messagebox Class\nDESCRIPTION: This code snippet shows how to import the Messagebox class from the ttkbootstrap.dialogs module. It is typically used at the beginning of a Python script to make the Messagebox functionality available.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/api/dialogs/messagebox.md#2025-04-20_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom ttkbootstrap.dialogs import Messagebox\n```\n\n----------------------------------------\n\nTITLE: Creating Python Package Distribution\nDESCRIPTION: Command to create a source distribution package using setup.py.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/build_instructions.txt#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython setup.py sdist\n```\n\n----------------------------------------\n\nTITLE: Creating Default and Custom Colored Spinbox Widgets in Python\nDESCRIPTION: This snippet demonstrates how to create a default Spinbox widget and a custom colored Spinbox widget using the 'danger' bootstyle in ttkbootstrap.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/styleguide/spinbox.zh.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# default spinbox style\nSpinbox()\n\n# danger colored spinbox style\nSpinbox(bootstyle=\"danger\")\n```\n\n----------------------------------------\n\nTITLE: Configuring mkdocs for Style Class Documentation in Python\nDESCRIPTION: This code snippet is a configuration for mkdocs, specifying how to render the documentation for the ttkbootstrap.style.Style class. It filters out certain methods and sets rendering options.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/api/style/style.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n::: ttkbootstrap.style.Style\n    selection:\n        filters: [\"!^_\", \"^__init__\"]\n    rendering:\n        heading_level: 2\n        show_root_heading: true\n```\n\n----------------------------------------\n\nTITLE: Specifying Pillow Dependency for TTkBootstrap\nDESCRIPTION: This line defines a package dependency for Pillow version 10.0.1, which is a Python Imaging Library fork used for image processing. This exact version is required for compatibility with the TTkBootstrap project.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/requirements.txt#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nPillow==10.0.1\n```\n\n----------------------------------------\n\nTITLE: Configuring TTK Bootstrap Tableview Documentation\nDESCRIPTION: YAML configuration for documenting the Tableview component in ttkbootstrap. Specifies filters to exclude certain methods and sets rendering options for documentation generation.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/api/tableview/tableview.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nttkbootstrap.tableview.Tableview\n    selection:\n        filters: [\"!^_\", \"^__init__\"]\n    rendering:\n        heading_level: 2\n        show_root_heading: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Documentation Generation for FontDialog in ttkbootstrap\nDESCRIPTION: This code snippet configures how the documentation for the FontDialog class should be generated. It filters out private methods (those starting with '_' but not '__') and configures the rendering with specific heading level and root heading display settings.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/api/dialogs/fontdialog.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n::: ttkbootstrap.dialogs.FontDialog\n    selection:\n        filters: [\"!^_\", \"^__init__\"]\n    rendering:\n        heading_level: 2\n        show_root_heading: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Documentation Rendering for ThemeDefinition in ttkbootstrap\nDESCRIPTION: This code snippet specifies documentation generation parameters for the ThemeDefinition class in the ttkbootstrap.style module. It filters methods to exclude those starting with '_' but include '__init__', and configures the rendering with level 2 headings that include the root heading.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/api/style/themedefinition.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n::: ttkbootstrap.style.ThemeDefinition\n    selection:\n        filters: [\"!^_\", \"^__init__\"]\n    rendering:\n        heading_level: 2\n        show_root_heading: true\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Structure for TTKBootstrap Floodgauge Widget\nDESCRIPTION: Markdown code that defines the structure for documenting the Floodgauge widget class from ttkbootstrap. It uses MkDocs directives to filter which methods to display and how to render the content.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/api/widgets/floodgauge.zh.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n::: ttkbootstrap.widgets.Floodgauge\n    selection:\n        filters: [\"!^_\", \"^__init__\"]\n    rendering:\n        heading_level: 2\n        show_root_heading: true\n```\n\n----------------------------------------\n\nTITLE: Documenting TTK Bootstrap Meter Widget Structure\nDESCRIPTION: MkDocs-style documentation structure for the Meter widget, specifying documentation filters and rendering options. Excludes private methods and includes initialization documentation.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/api/widgets/meter.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n::: ttkbootstrap.widgets.Meter\n    selection:\n        filters: [\"!^_\", \"^__init__\"]\n    rendering:\n        heading_level: 2\n        show_root_heading: true\n```\n\n----------------------------------------\n\nTITLE: Configuring MkDocs Documentation for ttkbootstrap Colors Class\nDESCRIPTION: This Markdown snippet configures how the Colors class from the ttkbootstrap.style module should be documented. It sets up filters to exclude private methods and configures the rendering options for headings.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/api/style/colors.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n::: ttkbootstrap.style.Colors\n    selection:\n        filters: [\"!^_\", \"^__init__\"]\n    rendering:\n        heading_level: 2\n        show_root_heading: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Documentation Generation for TableColumn Class in Python\nDESCRIPTION: This code snippet configures the documentation generation for the TableColumn class in the ttkbootstrap.tableview module. It specifies filters to exclude certain methods and sets the rendering options for the documentation.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/api/tableview/tablecolumn.zh.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n::: ttkbootstrap.tableview.TableColumn\n    selection:\n        filters: [\"!^_\", \"^__init__\"]\n    rendering:\n        heading_level: 2\n        show_root_heading: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Documentation Generation for TableRow Class in ttkbootstrap\nDESCRIPTION: This code snippet defines a documentation configuration for the TableRow class. It specifies filters to include the __init__ method while excluding other private methods, and sets rendering options such as heading level and visibility of the root heading.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/api/tableview/tablerow.zh.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n::: ttkbootstrap.tableview.TableRow\n    selection:\n        filters: [\"!^_\", \"^__init__\"]\n    rendering:\n        heading_level: 2\n        show_root_heading: true\n```\n\n----------------------------------------\n\nTITLE: Defining TableColumn Class Documentation in Markdown\nDESCRIPTION: Sets up the documentation structure for the TableColumn class from the ttkbootstrap.tableview module. The documentation will filter out private methods (those starting with '_' but not '__') and include the constructor (__init__) method.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/api/tableview/tablecolumn.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# TableColumn\n\n::: ttkbootstrap.tableview.TableColumn\n    selection:\n        filters: [\"!^_\", \"^__init__\"]\n    rendering:\n        heading_level: 2\n        show_root_heading: true\n```\n\n----------------------------------------\n\nTITLE: Displaying Toplevel Documentation with MkDocs Configuration\nDESCRIPTION: This code snippet is a configuration for MkDocs documentation, specifically for displaying the Toplevel class from the ttkbootstrap.window module. It filters out private methods and ensures proper rendering with heading levels.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/api/window/toplevel.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Toplevel\n\n::: ttkbootstrap.window.Toplevel\n    selection:\n        filters: [\"!^_\", \"^__init__\"]\n    rendering:\n        heading_level: 2\n        show_root_heading: true\n```\n\n----------------------------------------\n\nTITLE: Configuring StyleBuilderTTK Documentation\nDESCRIPTION: This code snippet sets up the documentation configuration for the StyleBuilderTTK class. It specifies filters to exclude certain methods and defines rendering options for the documentation.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/api/style/stylebuilderttk.md#2025-04-20_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n::: ttkbootstrap.style.StyleBuilderTTK\n    selection:\n        filters: [\"!^_\", \"^__init__\"]\n    rendering:\n        heading_level: 2\n        show_root_heading: true\n```\n\n----------------------------------------\n\nTITLE: Importing ScrolledText from ttkbootstrap\nDESCRIPTION: This code snippet shows how to import the ScrolledText widget from the ttkbootstrap.scrolled module. It also includes a filter to exclude certain methods from the documentation.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/api/scrolled/scrolledtext.zh.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n::: ttkbootstrap.scrolled.ScrolledText\n    selection:\n        filters: [\"!^_\", \"^__init__\"]\n    rendering:\n        heading_level: 2\n        show_root_heading: true\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Scale Widgets in TTK Bootstrap\nDESCRIPTION: Demonstrates the creation of default Scale widgets and applying custom color styles using the bootstyle parameter. The default style uses primary color, while custom colors can be specified using the bootstyle parameter.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/styleguide/scale.zh.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# default Scale style\nScale()\n\n# info colored label style\nScale(bootstyle=\"info\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation for TTK Bootstrap Tooltip Module\nDESCRIPTION: This code snippet configures the Sphinx documentation generator for the tooltip module in TTK Bootstrap. It specifies filters to exclude certain methods and sets the heading level for rendering.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/api/tooltip.zh.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n::: ttkbootstrap.tooltip\n    selection:\n        filters: [\"!^_\", \"^__init__\"]\n    rendering:\n        heading_level: 2\n```\n\n----------------------------------------\n\nTITLE: Icon Class Documentation Import Statement\nDESCRIPTION: Module import directive for the Icon class documentation, specifying filters to exclude private methods and include initialization.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/api/icons/icon.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n::: ttkbootstrap.icons.Icon\n    selection:\n        filters: [\"!^_\", \"^__init__\"]\n    rendering:\n        heading_level: 2\n        show_root_heading: true\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Structure for Querybox\nDESCRIPTION: Sphinx/MkDocs documentation configuration for the Querybox dialog component, specifying filters to exclude private methods and rendering options.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/docs/api/dialogs/querybox.zh.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Querybox\n\n::: ttkbootstrap.dialogs.Querybox\n    selection:\n        filters: [\"!^_\", \"^__init__\"]\n    rendering:\n        heading_level: 2\n        show_root_heading: true\n```\n\n----------------------------------------\n\nTITLE: Uploading Package to PyPI with Twine\nDESCRIPTION: Command to upload the distribution package to PyPI using twine. Requires an API token for authentication.\nSOURCE: https://github.com/israel-dryer/ttkbootstrap/blob/master/build_instructions.txt#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntwine upload dist/* (with api token)\n```"
  }
]