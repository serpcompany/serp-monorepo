[
  {
    "owner": "unknown7987",
    "repo": "rbxdocs",
    "content": "TITLE: Getting Player Services and Local Player in Lua\nDESCRIPTION: Initializes variables to access the Roblox Players service and retrieve the local player object. This is a common starting point for scripts needing player-specific information.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/input-and-camera/control-the-users-camera.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nlocal player = Players.LocalPlayer\n```\n\n----------------------------------------\n\nTITLE: Conditional If-Else Statement in Luau\nDESCRIPTION: This code snippet demonstrates a basic if-elseif-else statement in Luau. It checks a series of conditions and executes the code block corresponding to the first true condition. If no conditions are true, the code in the `else` block is executed. This example uses simple arithmetic comparisons as conditions.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/control-structures.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nif 2 + 2 == 5 then\n\tprint(\"Two plus two is five\") -- Doesn't print because the condition is false\nelseif 2 + 3 == 5 then\n\tprint(\"Two plus three is five\") -- Two plus three is five\nelse\n\tprint(\"All conditions failed\") -- Doesn't print because the previous condition is true\nend\n```\n\n----------------------------------------\n\nTITLE: Handling RemoteEvent Messages with BindableEvents in Roblox Server ModuleScript Lua\nDESCRIPTION: Implements a server-side ModuleScript named NetworkManagerServer that listens to a RemoteEvent in ReplicatedStorage and dispatches messages to BindableEvents keyed by a unique id. It provides a method GetServerEventSignal(id) to register and retrieve events associated with the given id, returning an Event to which server scripts can connect. Upon receiving RemoteEvent messages from clients, it iterates over stored bindable events matching the id and fires them, forwarding parameters including the player instance. This setup abstracts RemoteEvent server handling and enables modular event subscriptions.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/scripting/scripts.md#_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\n-- ModuleScript in ServerScriptService named NetworkManagerServer\nlocal NetworkManagerServer = {}\n\nlocal networkSignalList = {}\nfunction NetworkManagerServer.GetServerEventSignal(id)\n\tlocal bindableEvent = Instance.new(\"BindableEvent\")\n\t-- Linking the new BindableEvent to the id\n\ttable.insert(networkSignalList, {\n\t\tid = id,\n\t\tbindableEvent = bindableEvent,\n\t})\n\treturn bindableEvent.Event\nend\n\n-- Connecting to\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal remoteEvent = ReplicatedStorage:WaitForChild(\"RemoteEvent\")\nremoteEvent.OnServerEvent:Connect(function(player, id, ...)\n\t-- Finding every bindable event that matches the id of the received remote event\n\tfor _, signal in networkSignalList do\n\t\tif signal.id == id then\n\t\t\tsignal.bindableEvent:Fire(player, ...)\n\t\tend\n\tend\nend)\n\nreturn NetworkManagerServer\n```\n\n----------------------------------------\n\nTITLE: Declaring Local Variables and Functions in Luau\nDESCRIPTION: Demonstrates how to declare a local variable (`helloWorld`) and a local function (`printHelloWorld`) using the `local` keyword. The function captures the `helloWorld` variable within its scope and prints it. The final line executes the function, showing the output.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/scope.md#_snippet_0\n\nLANGUAGE: Luau\nCODE:\n```\nlocal helloWorld = 'Hello World!'\nlocal function printHelloWorld()\n\tprint(helloWorld)\nend\nprintHelloWorld() -- Hello World!\n```\n\n----------------------------------------\n\nTITLE: Tweening Part Position and Rotation with Roblox Lua\nDESCRIPTION: This Roblox Lua script uses TweenService to animate both the position and rotation of a part when it is clicked. It defines a TweenInfo object with repeat and reverse properties to create a 'bounce' effect and prevents re-triggering the animation while it is active using the `inTween` flag.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/build-it-play-it-island-of-move/animating-parts.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\n-- Uses tween to make object rotate up and bounce\nlocal TweenService = game:GetService(\"TweenService\")\nlocal partToTween = script.Parent\nlocal clickDetector = partToTween:FindFirstChildWhichIsA(\"ClickDetector\")\nlocal inTween = false\n\n-- Customizable variables\nlocal TWEEN_TIME = 0.25\nlocal TWEEN_ROT_ANGLES = -45\nlocal TWEEN_MOVE_DISTANCE = 3\n\n-- Tween variables\nlocal tweenInfo = TweenInfo.new(\n\tTWEEN_TIME, -- Time\n\tEnum.EasingStyle.Quad, -- EasingStyle\n\tEnum.EasingDirection.Out, -- EasingDirection\n\t1, -- RepeatCount (when less than zero the tween will loop indefinitely)\n\ttrue  -- Reverses (tween will reverse once reaching its goal)\n)\n\nlocal function activateAction()\n\t-- If the object is tweening, prevent it from being tweened again\n\tif inTween == true then\n\t\treturn\n\tend\n\n\t-- Calculate new CFrame for object position and rotation\n\tlocal offsetCFrame = CFrame.new(0, TWEEN_MOVE_DISTANCE, 0)\n\tlocal rotatedCFrame = CFrame.Angles(math.rad(TWEEN_ROT_ANGLES), 0, 0)\n\toffsetCFrame = offsetCFrame:ToWorldSpace(rotatedCFrame)\n\tlocal newCFrame = partToTween.CFrame:ToWorldSpace(offsetCFrame)\n\n\t-- Create a tween and play it\n\tlocal tweenObject = TweenService:Create(partToTween, tweenInfo, {CFrame = newCFrame})\n\ttweenObject:Play()\n\tinTween = true\n\n\t-- On tween completion, make object clickable again\n\ttweenObject.Completed:Connect(function()\n\t\tinTween = false\n\tend)\nend\n\nclickDetector.MouseClick:Connect(activateAction)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Roblox Leaderboard Module in Lua\nDESCRIPTION: This Lua ModuleScript, named 'Leaderboard' and placed in ServerStorage, facilitates the creation and updating of Roblox's built-in player leaderboard. It includes local functions `setupLeaderboard` to create the required 'leaderstats' Folder instance under a player and `setupStat` to create IntValue instances for specific stats within that folder. The public function `setStat` updates a player's displayed stat value, automatically creating the leaderboard structure if it doesn't exist.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/core/scripting/record-and-display-player-data.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal Leaderboard = {}\n\n-- Creating a new leaderboard\nlocal function setupLeaderboard(player)\n  local leaderstats = Instance.new(\"Folder\")\n  -- 'leaderstats' is a reserved name Roblox recognizes for creating a leaderboard\n  leaderstats.Name = \"leaderstats\"\n  leaderstats.Parent = player\n  return leaderstats\nend\n\n-- Creating a new leaderboard stat value\nlocal function setupStat(leaderstats, statName)\n  local stat = Instance.new(\"IntValue\")\n  stat.Name = statName\n  stat.Value = 0\n  stat.Parent = leaderstats\n  return stat\nend\n\n-- Updating a player's stat value\nfunction Leaderboard.setStat(player, statName, value)\n  local leaderstats = player:FindFirstChild(\"leaderstats\")\n  if not leaderstats then\n    leaderstats = setupLeaderboard(player)\n  end\n\n  local stat = leaderstats:FindFirstChild(statName)\n  if not stat then\n    stat = setupStat(leaderstats, statName)\n  end\n\n  stat.Value = value\nend\n\nreturn Leaderboard\n```\n\n----------------------------------------\n\nTITLE: Connecting a Function to BasePart.Touched Event in Roblox with Luau\nDESCRIPTION: This snippet connects a named function, onPartTouched, to a part's Touched event so it executes each time the part is touched. Dependencies include a Roblox environment and a script parented to a BasePart object. The event passes the touching object as an argument, and the function prints the full name of that object. Key parameters: object (the touching instance). Input: the Touched event firing. Output: message printed to output window. The script assumes script.Parent is a valid BasePart.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/scripting/events/index.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Assumes the script is parented to the part\nlocal part = script.Parent\n\n-- The function you want to run\nlocal function onPartTouched(object)\n\tprint(\"Part was touched by\", object:GetFullName())\nend\n\n-- Connect the function to the part's Touched event\npart.Touched:Connect(onPartTouched)\n```\n\n----------------------------------------\n\nTITLE: Full Implementation: Binding and Unbinding Tool Actions in Roblox Lua\nDESCRIPTION: This complete example brings together prior snippets: acquiring ContextActionService, implementing the action handler for reloading, binding and unbinding the handlers to equip and unequip events, and activating visual/audio feedback. The script is designed for use as a LocalScript inside a tool, specifically within Roblox Studio. It requires the Blaster tool structure described in the tutorial. Inputs include tool events and keypresses; outputs are visual changes and sound playback. Limitations: assumes valid assets and connections.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/input-and-camera/detect-user-input.md#_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nlocal ContextActionService = game:GetService(\"ContextActionService\")\n\nlocal tool = script.Parent\n\nlocal RELOAD_ACTION = \"reloadWeapon\"\n\nlocal function onAction(actionName, inputState, inputObject)\n\tif actionName == RELOAD_ACTION and inputState == Enum.UserInputState.Begin then\n\t\ttool.TextureId = \"rbxassetid://6593020923\"\n\t\ttask.wait(2)\n\t\ttool.TextureId = \"rbxassetid://92628145\"\n\tend\nend\n\nlocal function toolEquipped()\n\tContextActionService:BindAction(RELOAD_ACTION, onAction, true, Enum.KeyCode.R)\n\ttool.Handle.Equip:Play()\nend\n\nlocal function toolUnequipped()\n\tContextActionService:UnbindAction(RELOAD_ACTION)\nend\n\nlocal function toolActivated()\n\ttool.Handle.Activate:Play()\nend\n\ntool.Equipped:Connect(toolEquipped)\ntool.Unequipped:Connect(toolUnequipped)\ntool.Activated:Connect(toolActivated)\n```\n\n----------------------------------------\n\nTITLE: Defining RemoteFunction OnServerInvoke Callback - Roblox Lua\nDESCRIPTION: This Script defines the server-side function that executes when a client invokes a RemoteFunction. It assigns a callback function to the RemoteFunction's `OnServerInvoke` property, which receives the player and any arguments, creates a new Part instance, and returns it to the invoking client.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/scripting/events/remote.md#_snippet_6\n\nLANGUAGE: Lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Get reference to remote function instance\nlocal remoteFunction = ReplicatedStorage:FindFirstChildOfClass(\"RemoteFunction\")\n\n-- Callback function\nlocal function createPart(player, partColor, partPosition)\n\tprint(player.Name .. \" requested a new part\")\n\tlocal newPart = Instance.new(\"Part\")\n\tnewPart.Color = partColor\n\tnewPart.Position = partPosition\n\tnewPart.Parent = Workspace\n\treturn newPart\nend\n\n-- Set function as remote function's callback\nremoteFunction.OnServerInvoke = createPart\n```\n\n----------------------------------------\n\nTITLE: Setting User-Defined Metadata in Roblox DataStore Using Lua\nDESCRIPTION: This snippet demonstrates how to use the Roblox DataStoreService to set a value with custom user-defined metadata by creating an instance of DataStoreSetOptions and setting metadata key-value pairs. It uses SetAsync with optional arguments including a table of UserIds for content tracking, and a DataStoreSetOptions object for metadata definition. This example expects the key, value, user IDs, and set options as inputs and handles potential errors with pcall.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud-services/data-stores/index.md#_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlocal DataStoreService = game:GetService(\"DataStoreService\")\n\nlocal experienceStore = DataStoreService:GetDataStore(\"PlayerExperience\")\n\nlocal setOptions = Instance.new(\"DataStoreSetOptions\")\nsetOptions:SetMetadata({[\"ExperienceElement\"] = \"Fire\"})\n\nlocal success, errorMessage = pcall(function()\n\texperienceStore:SetAsync(\"User_1234\", 50, {1234}, setOptions)\nend)\nif not success then\n\tprint(errorMessage)\nend\n```\n\n----------------------------------------\n\nTITLE: Tagging Players and Applying Damage in Roblox Laser Tag (Lua)\nDESCRIPTION: This Lua function reduces the health of a tagged player, prevents negative health, and awards points when a player is eliminated. It first checks for friendly fire, ensures a valid humanoid, and compares the incoming damage with the player's current health to prevent underflow. Damage is applied with TakeDamage to respect force fields. If health drops to 0 or below, it increments the score for the attacking player. Depends on Roblox's Player and Humanoid classes and a Scoring utility.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/gameplay-scripting/detect-hits.md#_snippet_9\n\nLANGUAGE: Lua\nCODE:\n```\nlocal function onPlayerTagged(playerBlasted: Player, playerTagged: Player, damageAmount: number)\n\tlocal character = playerTagged.Character\n\tlocal isFriendly = playerBlasted.Team == playerTagged.Team\n\n\t-- Disallow friendly fire\n\tif isFriendly then\n\t\treturn\n\tend\n\n\tlocal humanoid = character and character:FindFirstChild(\"Humanoid\")\n\tif humanoid and humanoid.Health > 0 then\n\t\t-- Avoid negative health\n\t\tlocal damage = math.min(damageAmount, humanoid.Health)\n\n\t\t-- TakeDamage ensures health is not lowered if ForceField is active\n\t\thumanoid:TakeDamage(damage)\n\t\tif humanoid.Health <= 0 then\n\t\t\t-- Award playerBlasted a point for tagging playerTagged\n\t\t\tScoring.incrementScore(playerBlasted, 1)\n\t\tend\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Auto Save/Load Player Data with Events - Luau\nDESCRIPTION: Implements a more robust data saving/loading system triggered by player events (`PlayerAdded`, `PlayerRemoving`). It uses `GetAsync` to load gold when a player joins (handling cases where no data exists) and `SetAsync` to save gold when a player leaves, both within `pcall`. A local table (`playerGold`) is used to cache player data in memory to minimize frequent data store calls, addressing the warning about request limits.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/scripting/intermediate-scripting/save-data.md#_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal DataStoreService = game:GetService(\"DataStoreService\")\nlocal Players = game:GetService(\"Players\")\n\nlocal goldStore = DataStoreService:GetDataStore(\"PlayerGold\")\n\n-- Add gold values for each player to a local table to avoid hitting the data\n-- store repeatedly.\nlocal playerGold = {}\n\nlocal function incrementGold(player, amount)\n    playerGold[player.UserId] += amount\nend\n\nlocal function onPlayerAdded(player)\n    -- Read data store key\n    local success, storedGold = pcall(function()\n        return goldStore:GetAsync(player.UserId)\n    end)\n    if success then\n        local currentGold\n        if storedGold then\n            currentGold = storedGold\n        else\n            currentGold = 0\n        end\n        playerGold[player.UserId] = currentGold\n        print(currentGold)\n    end\n\n    -- Test incrementing gold\n    incrementGold(player, 5)\nend\n\nlocal function onPlayerRemoving(player)\n    -- Set data store key\n    local success, err = pcall(function()\n        goldStore:SetAsync(player.UserId, playerGold[player.UserId])\n    end)\n    if not success then\n        warn(err)\n    end\n    -- Clean up entry so that the table doesn't grow for the lifespan of the server\n    playerGold[player.UserId] = nil\nend\n\nPlayers.PlayerAdded:Connect(onPlayerAdded)\nPlayers.PlayerRemoving:Connect(onPlayerRemoving)\n```\n\n----------------------------------------\n\nTITLE: Using Library.task.spawn to immediately resume functions in Roblox Lua\nDESCRIPTION: This snippet demonstrates how to use Library.task.spawn() to run functions concurrently in Roblox Lua, allowing the function to yield if necessary. It passes additional arguments to the spawned function, which is useful for non-blocking operations during gameplay, such as handling player events.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/scripting/scheduler.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal function playerAdded(player)\n    ...\n    (yield)\nend\n\nfor _, player in Players:GetPlayers() do\n    task.spawn(playerAdded, player)\nend\n```\n\n----------------------------------------\n\nTITLE: Invoking RemoteFunction from Client - Roblox Lua\nDESCRIPTION: This LocalScript invokes a server-side RemoteFunction using `InvokeServer()`. It passes arguments (color and position for a part) to the server callback, yields until the server returns a value, and then prints the returned object (the newly created Part instance).\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/scripting/events/remote.md#_snippet_7\n\nLANGUAGE: Lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\n-- Get reference to remote function instance\nlocal remoteFunction = ReplicatedStorage:FindFirstChildOfClass(\"RemoteFunction\")\n\n-- Pass a color and position when invoking the callback\nlocal newPart = remoteFunction:InvokeServer(Color3.fromRGB(255, 0, 0), Vector3.new(0, 25, -20))\n\n-- Output the returned part reference\nprint(\"The server created the requested part:\", newPart)\n```\n\n----------------------------------------\n\nTITLE: Storing Configuration Data in ModuleScript (Luau)\nDESCRIPTION: Shows how to use a ModuleScript to store configuration data, such as weapon stats. The GunConfig module defines various properties (magazine size, ammo count, firerate, damage breakdown) within a table and returns the table, making this data easily accessible to any script that requires it.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/scripting/scripts.md#_snippet_4\n\nLANGUAGE: Luau\nCODE:\n```\n-- ModuleScript in ReplicatedStorage named GunConfig\nlocal GunConfig = {}\n\nGunConfig.MagazineSize = 20\nGunConfig.AmmoCount = 100\nGunConfig.Firerate = 600\nGunConfig.Damage = {\n\t[\"Head\"] = 50;\n\t[\"Torso\"] = 40;\n\t[\"Body\"] = 25;\n}\n\nreturn GunConfig\n```\n\n----------------------------------------\n\nTITLE: Handling Damage on Server - Luau\nDESCRIPTION: This Luau code defines the server-side logic for handling damage. It sets a `LASER_DAMAGE` constant and defines a `damageCharacter` function. This function, when triggered by the `DamageCharacter` remote event, subtracts the set damage value from the damaged character's Humanoid's health. Requires ReplicatedStorage and the DamageCharacter event to be set up. The input is the player that fired and the character to damage. The output is the reduction of health in the character that was hit.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/scripting/intermediate-scripting/hit-detection-with-lasers.md#_snippet_17\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal eventsFolder = ReplicatedStorage.Events\nlocal LASER_DAMAGE = 10\n\nfunction damageCharacter(playerFired, characterToDamage)\n    local humanoid = characterToDamage:FindFirstChildWhichIsA(\"Humanoid\")\n    if humanoid then\n        -- Remove health from character\n        humanoid.Health -= LASER_DAMAGE\n    end\nend\n\n-- Connect events to appropriate functions\neventsFolder.DamageCharacter.OnServerEvent:Connect(damageCharacter)\n```\n\n----------------------------------------\n\nTITLE: Creating Luau Array Example\nDESCRIPTION: Demonstrates the basic syntax for creating an array (table) in Luau using curly brackets `{}` and separating elements with commas. Shows that arrays can store different data types.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-5/intro-to-arrays.md#_snippet_0\n\nLANGUAGE: Luau\nCODE:\n```\nlocal myArray = {\"item1\", \"item2\", 10, workspace.Part, myVariable}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Objects Using WaitForChild in Lua\nDESCRIPTION: This code snippet demonstrates how to safely retrieve objects within a Roblox environment, particularly when dealing with objects that may not yet be loaded. It uses `game:GetService()` to access services and `WaitForChild()` to ensure the target object is loaded before attempting to access its properties or call its methods. This method is safer than directly accessing objects. Dependency: Roblox Engine.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/scripting/attributes.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedFirst = game:GetService(\"ReplicatedFirst\")\nlocal LoadingScreen = require(ReplicatedFirst.LoadingScreen)\n```\n\n----------------------------------------\n\nTITLE: Handling Developer Product Purchases using ProcessReceipt in Roblox Lua\nDESCRIPTION: This snippet demonstrates how to use the ProcessReceipt callback in a Script within ServerScriptService to process developer product purchases in Roblox. It maps product IDs to reward functions, such as restoring health or awarding gold, and ensures that each transaction is only completed if the corresponding function returns true. Dependencies include Roblox Lua API (e.g., MarketplaceService, Players), and the snippet should be placed in a server-only Script to prevent duplicate callback registration. Inputs include the receiptInfo table with purchase details, product IDs, and player information. Outputs are purchase decisions, confirming transactions only upon successful reward delivery. Limitations involve handling of failed transactions (retrying on next join) and ensuring all handler functions return true for a successful purchase grant.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/production/monetization/developer-products.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal MarketplaceService = game:GetService(\"MarketplaceService\")\nlocal Players = game:GetService(\"Players\")\n\nlocal productFunctions = {}\n\n-- Example: product ID 123123 brings the user back to full health\nproductFunctions[123123] = function(receipt, player)\n\tlocal character = player.Character\n\tlocal humanoid = character and character:FindFirstChildWhichIsA(\"Humanoid\")\n\n\tif humanoid then\n\t\thumanoid.Health = humanoid.MaxHealth\n\t\t-- Indicates a successful purchase\n\t\treturn true\n\tend\nend\n\n-- Example: product ID 456456 awards 100 gold coins to the user\nproductFunctions[456456] = function(receipt, player)\n\tlocal leaderstats = player:FindFirstChild(\"leaderstats\")\n\tlocal gold = leaderstats and leaderstats:FindFirstChild(\"Gold\")\n\n\tif gold then\n\t\tgold.Value += 100\n\t\treturn true\n\tend\nend\n\nlocal function processReceipt(receiptInfo)\n\tlocal userId = receiptInfo.PlayerId\n\tlocal productId = receiptInfo.ProductId\n\n\tlocal player = Players:GetPlayerByUserId(userId)\n\tif player then\n\t\t-- Gets the handler function associated with the developer product ID and attempts to run it\n\t\tlocal handler = productFunctions[productId]\n\t\tlocal success, result = pcall(handler, receiptInfo, player)\n\t\tif success then\n\t\t\t-- The user has received their items\n\t\t\t-- Returns \"PurchaseGranted\" to confirm the transaction\n\t\t\treturn Enum.ProductPurchaseDecision.PurchaseGranted\n\t\telse\n\t\t\twarn(\"Failed to process receipt:\", receiptInfo, result)\n\t\tend\n\tend\n\n\t-- The user's items couldn't be awarded\n\t-- Returns \"NotProcessedYet\" and tries again next time the user joins the experience\n\treturn Enum.ProductPurchaseDecision.NotProcessedYet\nend\n\n-- Sets the callback\n-- This can only be done once by one server-side script\nMarketplaceService.ProcessReceipt = processReceipt\n```\n\n----------------------------------------\n\nTITLE: Binding Gamepad and Keyboard Inputs Using ContextActionService in Lua\nDESCRIPTION: Illustrates binding an action called \"OpenSpellBook\" to both a gamepad button (ButtonR2) and a keyboard key (B) using ContextActionService:BindAction(). The bound function triggers only when the input state is 'Begin' to prevent multiple triggers across input phases. This approach facilitates consistent handling of user inputs across multiple device types and supports multiple input bindings for a single action.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/input/gamepad.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal ContextActionService = game:GetService(\"ContextActionService\")\n\nlocal function openSpellBook(actionName, inputState, inputObject)\n\tif inputState == Enum.UserInputState.Begin then\n\t\t-- Open spell book\n\tend\nend\n\nContextActionService:BindAction(\"OpenSpellBook\", openSpellBook, false, Enum.KeyCode.ButtonR2, Enum.KeyCode.B)\n```\n\n----------------------------------------\n\nTITLE: Loading User Data on Join in Roblox\nDESCRIPTION: This Lua code snippet demonstrates how to load a user's data when they join a Roblox experience using the `Class.Players.PlayerAdded` event and a datastore. It retrieves user data based on the user's ID and uses `pcall` for error handling.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/players/index.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal DataStoreService = game:GetService(\"DataStoreService\")\nlocal playerDataStore = DataStoreService:GetDataStore(\"PlayerData\")\n\ngame:GetService(\"Players\").PlayerAdded:Connect(function(player)\n\tlocal userId = player.UserId\n\n\t-- Read data store key\n\tlocal getSuccess, currentData = pcall(function()\n\t\treturn playerDataStore:GetAsync(userId)\n\tend)\n\n\tif getSuccess then\n\t\tprint(currentData)\n\tend\n\n\t-- Do further actions with currentData\nend)\n```\n\n----------------------------------------\n\nTITLE: Tweening Part Scale and Destruction with Roblox Lua\nDESCRIPTION: This Roblox Lua script animates the scaling of a part when it is touched by a Humanoid, using TweenService to smoothly shrink the part to a size of zero. It disables collisions upon touch and destroys the part once the tween animation is completed, often used for pickup items.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/build-it-play-it-island-of-move/animating-parts.md#_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\n-- Tween the scale of a part when it's touched, then destroy it\nlocal TweenService = game:GetService(\"TweenService\")\nlocal partToScale = script.Parent\nlocal inTween = false\n\n-- Customizable variables\nlocal TWEEN_TIME = 1\nlocal TWEEN_SCALE = Vector3.zero\n\n-- Tween variables\nlocal tweenInfo = TweenInfo.new(\n\tTWEEN_TIME, -- Time\n\tEnum.EasingStyle.Exponential, -- EasingStyle\n\tEnum.EasingDirection.Out  -- EasingDirection\n)\n\nlocal function onPartTouch(otherPart)\n\t-- If the object is tweening, prevent it from being tweened again\n\tif inTween == true then\n\t\treturn\n    end\n\n\tlocal partParent = otherPart.Parent\n    local humanoid = partParent:FindFirstChildWhichIsA(\"Humanoid\")\n\n\tif humanoid then\n\t\t-- Prevent further collisions on object since it has been picked up\n        partToScale.CanCollide = false\n\n\t\t-- Create a tween and play it\n\t\tlocal tweenObject = TweenService:Create(partToScale, tweenInfo, {Size = TWEEN_SCALE})\n\t\ttweenObject:Play()\n        inTween = true\n\n\t\t-- On tween completion, destroy object\n\t\ttweenObject.Completed:Connect(function()\n\t\t\tpartToScale:Destroy()\n\t\tend)\n\tend\nend\n\npartToScale.Touched:Connect(onPartTouch)\n```\n\n----------------------------------------\n\nTITLE: Connecting to ModuleScript Custom Event (Luau)\nDESCRIPTION: Illustrates how a script can require a ModuleScript that exposes a custom event (Switch.Changed) and connect a callback function to it using `:Connect()`. The example also demonstrates calling a function (Switch.flip) within the required module to trigger the event. Requires the \"Switch\" ModuleScript to exist in ReplicatedStorage.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/scripting/scripts.md#_snippet_6\n\nLANGUAGE: Luau\nCODE:\n```\n-- LocalScript in ReplicatedFirst\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal Switch = require(ReplicatedStorage:WaitForChild(\"Switch\"))\n\nSwitch.Changed:Connect(function(newState)\n\tprint(\"Switch state is now\", newState)\nend)\n\n-- Test the flipping a few times\ntask.wait(1)\nSwitch.flip()\ntask.wait(1)\nSwitch.flip()\n```\n\n----------------------------------------\n\nTITLE: Adding Gold Stat to Leaderboard in Lua\nDESCRIPTION: This Lua code adds an 'IntValue' named \"Gold\" to the player's 'leaderstats' folder. This stat represents a player's gold currency. The `Value` property is initialized to 0. This demonstrates a basic implementation of how player stats are defined and added to the leaderboard. It depends on the `Players` service and `Instance` class for object creation.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/players/leaderboards.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nlocal function leaderboardSetup(player)\n\tlocal leaderstats = Instance.new(\"Folder\")\n\tleaderstats.Name = \"leaderstats\"\n\tleaderstats.Parent = player\n\n\tlocal gold = Instance.new(\"IntValue\")\n\tgold.Name = \"Gold\"\n\tgold.Value = 0\n\tgold.Parent = leaderstats\nend\n\n-- Connect the \"leaderboardSetup()\" function to the \"PlayerAdded\" event\nPlayers.PlayerAdded:Connect(leaderboardSetup)\n```\n\n----------------------------------------\n\nTITLE: Accessing a Roblox Data Store in Luau\nDESCRIPTION: Demonstrates how to get the `DataStoreService` and access a specific data store by name using `GetDataStore()`. This is the initial step required before performing any operations on the data store. This code must run in a server-side `Script`, not a `LocalScript`.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud-services/data-stores/index.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal DataStoreService = game:GetService(\"DataStoreService\")\n\nlocal experienceStore = DataStoreService:GetDataStore(\"PlayerExperience\")\n```\n\n----------------------------------------\n\nTITLE: Encapsulating RemoteEvent FireServer Calls in Roblox ModuleScript Lua\nDESCRIPTION: Defines a client-side ModuleScript named NetworkManagerClient that encapsulates the FireServer method of a Roblox RemoteEvent located in ReplicatedStorage. This module provides a simplified API to send network messages by including a unique id parameter alongside additional vararg arguments. Dependencies include a RemoteEvent instance named \"RemoteEvent\" under ReplicatedStorage. The module returns an object with a FireServer method that forwards calls to the RemoteEvent's FireServer function, centralizing client-to-server communication and hiding direct RemoteEvent usage from other scripts.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/scripting/scripts.md#_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\n-- ModuleScript in ReplicatedFirst named NetworkManagerClient\nlocal NetworkManagerClient = {}\n\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal remoteEvent = ReplicatedStorage:WaitForChild(\"RemoteEvent\")\n\n-- Encapsulating the remote object's FireServer function\nfunction NetworkManagerClient.FireServer(id, ...)\n\tremoteEvent:FireServer(id, ...)\nend\n\nreturn NetworkManagerClient\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Path with PathfindingService - Lua\nDESCRIPTION: Initializes Roblox's PathfindingService and creates a default path using the CreatePath method. No parameters are passed, so the resulting Path object uses default agent configuration. Requires access to game services and is suitable for introductory pathfinding logic where no fine-tuning is necessary.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/characters/pathfinding.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal PathfindingService = game:GetService(\"PathfindingService\")\n\nlocal path = PathfindingService:CreatePath()\n```\n\n----------------------------------------\n\nTITLE: Replacing Game Pass with Subscription (Lua)\nDESCRIPTION: This code demonstrates replacing an existing game pass with a subscription. It checks for both subscription and game pass status upon player join and handles subscription status changes.  It leverages `MarketplaceService:GetUserSubscriptionStatusAsync` to check the subscription status.  Dependencies include the MarketplaceService and Players services. Requires defining `LEGACY_GAME_PASS_ID` and `SUBSCRIPTION_ID`. The script handles both subscription and legacy game pass ownership, awarding benefits accordingly and revoking them if needed.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/production/monetization/subscriptions.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n-- Run this code on the server\nlocal MarketplaceService = game:GetService(\"MarketplaceService\")\nlocal Players = game:GetService(\"Players\")\n\nlocal LEGACY_GAME_PASS_ID = 1234 -- Replace with the ID of the game pass being replaced by a subscription\nlocal SUBSCRIPTION_ID = \"EXP-11111111\" -- Replace with your subscription ID\n\nlocal function awardBenefit(player: Player)\n\t-- You should award the subscription here\nend\n\nlocal function revokeBenefitIfGranted(player: Player)\n\t-- This method is called for every player who does _not_ have the subscription\n    -- If your code saves subscriptions to Data Stores or provides some benefit that needs to be 'revoked'\n    -- you should use this method to handle the revocation\nend\n\nlocal function checkSubscriptionStatus(player: Player)\n\tlocal success, result = pcall(function()\n\t\treturn MarketplaceService:GetUserSubscriptionStatusAsync(player, SUBSCRIPTION_ID)\n\tend)\n\n\tif not success then\n\t\tprint(`Error fetching subscription status: {result}`)\n\t\treturn\n\tend\n\n\tif result.IsSubscribed then\n\t\tawardBenefit(player)\n\telse\n\t\trevokeBenefitIfGranted(player)\n\tend\nend\n\nlocal function onPlayerAdded(player: Player)\n\tlocal success, result = pcall(function()\n\t\treturn MarketplaceService:UserOwnsGamePassAsync(player.UserId, LEGACY_GAME_PASS_ID)\n\tend)\n\n\tif not success then\n\t\tprint(`Error fetching game pass status: {result}`)\n\t\treturn\n\tend\n\n\tif result then\n\t\t-- If the player has purchased the legacy game pass, we do not need to look up their subscription status\n\t\t-- as they have the benefit granted for life\n\t\tawardBenefit(player)\n\t\treturn\n\tend\n\n\tcheckSubscriptionStatus(player)\nend\n\nlocal function onUserSubscriptionStatusChanged(player: Player, subscriptionId: string)\n\tif subscriptionId == SUBSCRIPTION_ID then\n\t\tcheckSubscriptionStatus(player)\n\tend\nend\n\n\nlocal function onPromptGamePassPurchaseFinished(player: Player, purchasedPassID: number, purchaseSuccess: boolean)\n\tif purchaseSuccess and purchasedPassID == LEGACY_GAME_PASS_ID then\n\t\tawardBenefit(player)\n\tend\nend\n\nPlayers.PlayerAdded:Connect(onPlayerAdded)\nPlayers.UserSubscriptionStatusChanged:Connect(onUserSubscriptionStatusChanged)\n-- We will continue to listen for in-game game pass purchases in case the game pass is still on sale\nMarketplaceService.PromptGamePassPurchaseFinished:Connect(onPromptGamePassPurchaseFinished)\n```\n\n----------------------------------------\n\nTITLE: Defining Player Data Management in Roblox with Lua\nDESCRIPTION: This Lua module script sets up player data management, including coins and jump power, using association tables and accessor methods. It defines a default data schema, provides functions to retrieve and update values for specific keys, and requires integration in ServerStorage. Expected inputs are player objects and data keys; outputs are corresponding values or updated results. Dependencies include ServerStorage to host the module and consistent key naming. No hard constraints, but assumes userId-based uniqueness.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/core/scripting/script-an-upgrade-button.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal PlayerData = {}\n\nPlayerData.COIN_KEY_NAME = \"Coins\"\nPlayerData.JUMP_KEY_NAME = \"Jump\"\n\nlocal playerData = {\n\t--[[\n\t\t[userId: string] = {\n\t\t\t[\"Coins\"] = coinAmount: number,\n\t\t\t[\"Jump\"] = jumpPower: number\n\t\t}\n\t--]]\n}\n\nlocal DEFAULT_PLAYER_DATA = {\n\t[PlayerData.COIN_KEY_NAME] = 0,\n\t[PlayerData.JUMP_KEY_NAME] = 0,\n}\n\nlocal function getData(player)\n\tlocal data = playerData[tostring(player.UserId)] or DEFAULT_PLAYER_DATA\n\tplayerData[tostring(player.UserId)] = data\n\treturn data\nend\n\nfunction PlayerData.getValue(player, key)\n\treturn getData(player)[key]\nend\n\nfunction PlayerData.updateValue(player, key, updateFunction)\n\tlocal data = getData(player)\n\tlocal oldValue = data[key]\n\tlocal newValue = updateFunction(oldValue)\n\n\tdata[key] = newValue\n\treturn newValue\nend\n\nreturn PlayerData\n\n```\n\n----------------------------------------\n\nTITLE: Creating an Interactive Button Script in Lua for Roblox\nDESCRIPTION: This script makes a button interactive in Roblox. When a player touches the button, it turns green, makes a bridge visible (transparency set to 0), and enables collision on the bridge so players can walk on it. The script connects a custom function to the button's Touched event.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-2/parameters-practice-buttons.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\n-- Insert this script into button\n-- Turns the button green when something touches the button.\n\nlocal button = script.Parent\nlocal bridge = workspace.Bridge\n\nlocal function buttonPressed()\n\tprint(\"button touched\")\n\tbutton.Color = Color3.fromRGB(0, 170, 0)\n\tbridge.Transparency = 0\n\tbridge.CanCollide = true\nend\n\nbutton.Touched:Connect(buttonPressed)\n```\n\n----------------------------------------\n\nTITLE: ToolController: Manages weapon firing, raycasting, and client-server communication in Roblox Lua\nDESCRIPTION: This script handles the player input for firing the laser weapon, performs raycasting to determine target positions, checks firing rate limits, and communicates with the server to apply damage and trigger visual effects. Dependencies include Roblox services such as UserInputService, Players, and ReplicatedStorage. It also requires the LaserRenderer module for visual laser creation. Core parameters control maximum distances, fire rate, and timing of shots.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/scripting/intermediate-scripting/hit-detection-with-lasers.md#_snippet_31\n\nLANGUAGE: Lua\nCODE:\n```\nlocal UserInputService = game:GetService(\"UserInputService\")\nlocal Players = game:GetService(\"Players\")\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal LaserRenderer = require(Players.LocalPlayer.PlayerScripts.LaserRenderer)\n\nlocal tool = script.Parent\nlocal eventsFolder = ReplicatedStorage.Events\n\nlocal MAX_MOUSE_DISTANCE = 1000\nlocal MAX_LASER_DISTANCE = 500\nlocal FIRE_RATE = 0.3\nlocal timeOfPreviousShot = 0\n\nlocal function canShootWeapon()\n\tlocal currentTime = tick()\n\tif currentTime - timeOfPreviousShot < FIRE_RATE then\n\t\treturn false\n\tend\n\treturn true\nend\n\nlocal function getWorldMousePosition()\n\tlocal mouseLocation = UserInputService:GetMouseLocation()\n\tlocal screenToWorldRay = workspace.CurrentCamera:ViewportPointToRay(mouseLocation.X, mouseLocation.Y)\n\tlocal directionVector = screenToWorldRay.Direction * MAX_MOUSE_DISTANCE\n\tlocal raycastResult = workspace:Raycast(screenToWorldRay.Origin, directionVector)\n\tif raycastResult then\n\t\treturn raycastResult.Position\n\telse\n\t\treturn screenToWorldRay.Origin + directionVector\n\tend\nend\n\nlocal function fireWeapon()\n\tlocal mouseLocation = getWorldMousePosition()\n\tlocal targetDirection = (mouseLocation - tool.Handle.Position).Unit\n\tlocal directionVector = targetDirection * MAX_LASER_DISTANCE\n\tlocal weaponRaycastParams = RaycastParams.new()\n\tweaponRaycastParams.FilterDescendantsInstances = {Players.LocalPlayer.Character}\n\tlocal weaponRaycastResult = workspace:Raycast(tool.Handle.Position, directionVector, weaponRaycastParams)\n\tlocal hitPosition\n\tif weaponRaycastResult then\n\t\thitPosition = weaponRaycastResult.Position\n\t\tlocal characterModel = weaponRaycastResult.Instance:FindFirstAncestorOfClass(\"Model\")\n\t\tif characterModel then\n\t\t\tlocal humanoid = characterModel:FindFirstChildWhichIsA(\"Humanoid\")\n\t\t\tif humanoid then\n\t\t\t\teventsFolder.DamageCharacter:FireServer(characterModel, hitPosition)\n\t\t\tend\n\t\tend\n\telse\n\t\thitPosition = tool.Handle.Position + directionVector\n\tend\n\t\n\ttimeOfPreviousShot = tick()\n\n\teventsFolder.LaserFired:FireServer(hitPosition)\n\tLaserRenderer.createLaser(tool.Handle, hitPosition)\nend\n\nlocal function toolEquipped()\n\ttool.Handle.Equip:Play()\nend\n\nlocal function toolActivated()\n\tif canShootWeapon() then\n\t\tfireWeapon()\n\tend\nend\n\ntool.Equipped:Connect(toolEquipped)\ntool.Activated:Connect(toolActivated)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Player Character Event Hooks in Roblox (Lua)\nDESCRIPTION: This code initializes character event listeners for all current and future players in the game. By connecting to the Players service, it ensures that the onCharacterAdded callback configures character-specific logic whenever a player joins or respawns. It requires the setupHumanoidAsync module and expects this function to handle individual humanoid setup and state management.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/user-interface-design/implement-designs-in-studio.md#_snippet_25\n\nLANGUAGE: Lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nlocal setupHumanoidAsync = require(script.setupHumanoidAsync)\n\nlocal function onCharacterAdded(player: Player, character: Model)\n\tlocal humanoid = character:WaitForChild(\"Humanoid\")\n\tsetupHumanoidAsync(player, humanoid)\nend\n\nlocal function onPlayerAdded(player: Player)\n\t-- Call onCharacterAdded if the player already has a character\n\tif player.Character then\n\t\tonCharacterAdded(player, player.Character)\n\tend\n\t-- Call onCharacterAdded for all future character spawns for this player\n\tplayer.CharacterAdded:Connect(function(character: Model)\n\t\tonCharacterAdded(player, character)\n\tend)\nend\n\n-- Call onPlayerAdded for any players already in the game\nfor _, player in Players:GetPlayers() do\n\tonPlayerAdded(player)\nend\n-- Call onPlayerAdded for all future players\nPlayers.PlayerAdded:Connect(onPlayerAdded)\n```\n\n----------------------------------------\n\nTITLE: Set Data Store Key with pcall - Luau\nDESCRIPTION: Saves data (`playerGold`) to the data store (`goldStore`) using a specific key (`playerUserID`) by calling `SetAsync`. The operation is wrapped in `pcall` (protected call) to safely handle potential network errors or failures during the data store request, printing a warning if it fails.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/scripting/intermediate-scripting/save-data.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal DataStoreService = game:GetService(\"DataStoreService\")\n\nlocal goldStore = DataStoreService:GetDataStore(\"PlayerGold\")\n\n-- Data store key and value\nlocal playerUserID = 505306092\nlocal playerGold = 250\n\n-- Set data store key\nlocal success, error = pcall(function()\n    goldStore:SetAsync(playerUserID, playerGold)\nend)\nif not success then\n    warn(error)\nend\n```\n\n----------------------------------------\n\nTITLE: Accessing a Secret with HttpService in Lua\nDESCRIPTION: This Lua snippet demonstrates how to access a secret using `HttpService:GetSecret()`. It retrieves the secret named \"test_secret\" and assigns it to a local variable. Before using secrets, ensure \"Allow HTTP Requests\" is enabled in Game Settings.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud-services/secrets.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal HttpService = game:GetService(\"HttpService\")\n\nlocal testSecret = HttpService:GetSecret(\"test_secret\")\n```\n\n----------------------------------------\n\nTITLE: Connecting RemoteEvent and Processing Non-String Table Indices - Lua\nDESCRIPTION: Demonstrates how Roblox automatically converts non-string keys such as instances or userdata into strings when a table is passed through a RemoteEvent. Shows connecting a LocalScript to the RemoteEvent OnClientEvent and iterating over the received table keys, verifying the keys are strings. Requires a RemoteEvent instance in ReplicatedStorage. The function prints the type of each key received in the event's payload, showing that all keys become strings.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/scripting/events/remote.md#_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal remoteEvent = ReplicatedStorage:FindFirstChildOfClass(\"RemoteEvent\")\n\nlocal function onEventFire(passedTable)\n\tfor k, v in passedTable do\n\t\tprint(typeof(k))  --> string\n\tend\nend\n\n-- Connect function to event\nremoteEvent.OnClientEvent:Connect(onEventFire)\n```\n\n----------------------------------------\n\nTITLE: Initializing Player Data Storage Module in Roblox Lua\nDESCRIPTION: This Lua ModuleScript, intended to be named 'PlayerData' and placed in ServerStorage, defines a system for storing and managing player-specific data like coin counts. It uses a central table `playerData` keyed by player UserIds and provides public functions `getValue` to retrieve data and `updateValue` to modify data using a callback function. It establishes a default structure (`DEFAULT_PLAYER_DATA`) for new players.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/core/scripting/record-and-display-player-data.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal PlayerData = {}\nPlayerData.COIN_KEY_NAME = \"Coins\"\n\nlocal playerData = {\n  --[[\n    [userId: string] = {\n      [\"Coins\"] = coinAmount: number\n    }\n  ]]\n}\n\nlocal DEFAULT_PLAYER_DATA = {\n  [PlayerData.COIN_KEY_NAME] = 0\n}\n\nlocal function getData(player)\n  local data = playerData[tostring(player.UserId)] or DEFAULT_PLAYER_DATA\n  playerData[tostring(player.UserId)] = data\n  return data\nend\n\nfunction PlayerData.getValue(player, key)\n  return getData(player)[key]\nend\n\nfunction PlayerData.updateValue(player, key, updateFunction)\n  local data = getData(player)\n  local oldValue = data[key]\n  local newValue = updateFunction(oldValue)\n\n  data[key] = newValue\n  return newValue\nend\n\nreturn PlayerData\n```\n\n----------------------------------------\n\nTITLE: Updating Gold Stat via Pickup in Lua\nDESCRIPTION: This Lua script updates a player's gold stat when they touch a specific part. It retrieves the player from the part, finds the 'leaderstats' folder and 'Gold' stat, and increments the gold value. It assumes the script is parented to the pickup object. The script uses the `Touched` event and depends on services like `Players` and classes such as `Instance` and `Part`.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/players/leaderboards.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nlocal goldChunk = script.Parent\n\nlocal function onPartTouch(otherPart)\n\tlocal partParent = otherPart.Parent\n\tlocal player = Players:GetPlayerFromCharacter(partParent)\n\tlocal leaderstats = player and player:FindFirstChild(\"leaderstats\")\n\tlocal goldStat = leaderstats and leaderstats:FindFirstChild(\"Gold\")\n\n\tif goldStat then\n\t\t-- Destroy the pickup\n\t\tgoldChunk:Destroy()\n\n\t\t-- Update the player's leaderboard stat\n\t\tgoldStat.Value += 10\n\tend\nend\n\ngoldChunk.Touched:Connect(onPartTouch)\n```\n\n----------------------------------------\n\nTITLE: User Info Response without Profile Scope - JSON\nDESCRIPTION: Minimal JSON response showing only the 'sub' claim, representing the user's unique ID when no profile scope has been authorized. Other profile-related claims are omitted in this case.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/auth/oauth2-reference.md#_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sub\": \"1516563360\"\n}\n```\n\n----------------------------------------\n\nTITLE: Tracking Source Gameplay Events with AnalyticsService in Lua\nDESCRIPTION: Demonstrates how to log economy events indicating the earning of resources by a player through gameplay actions. Uses AnalyticsService:LogEconomyEvent with the Source flow type and Gameplay transaction type to record coins earned after completing levels. Key parameters include the player object, currency name, amount earned, current wallet balance, and the transaction type enum. This snippet assumes server-side execution in a published experience, as client or Studio events are disallowed.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/production/analytics/economy-events.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal AnalyticsService = game:GetService(\"AnalyticsService\")\n\n-- After level 1 completion\nAnalyticsService:LogEconomyEvent(\n    player,\n    Enum.AnalyticsEconomyFlowType.Source,\n    \"Coins\", -- Currency name\n    50, -- Amount earned\n    50, -- Current balance\n    Enum.AnalyticsEconomyTransactionType.Gameplay.Name -- Transaction type\n)\n\n-- After level 2 completion\nAnalyticsService:LogEconomyEvent(\n    player,\n    Enum.AnalyticsEconomyFlowType.Source,\n    \"Coins\", -- Currency name\n    50, -- Amount earned\n    100, -- Balance after transaction\n    Enum.AnalyticsEconomyTransactionType.Gameplay.Name -- Transaction type\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Data in a Roblox Data Store using SetAsync in Luau\nDESCRIPTION: Shows how to create or overwrite an entry in a data store using `SetAsync()`. It takes a unique key (e.g., \"User_1234\") and a value (e.g., 50) as arguments. The example wraps the network call in `pcall` to safely handle potential errors during the operation.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud-services/data-stores/index.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal DataStoreService = game:GetService(\"DataStoreService\")\n\nlocal experienceStore = DataStoreService:GetDataStore(\"PlayerExperience\")\n\nlocal success, errorMessage = pcall(function()\n\texperienceStore:SetAsync(\"User_1234\", 50)\nend)\nif not success then\n\tprint(errorMessage)\nend\n```\n\n----------------------------------------\n\nTITLE: Getting a MemoryStore Hash Map (Lua)\nDESCRIPTION: Retrieves a reference to a MemoryStore Hash Map instance. The hash map is identified by a unique name, which is global within the experience, allowing access from any script. This reference is required before performing any operations on the hash map.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud-services/memory-stores/hash-map.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal MemoryStoreService = game:GetService(\"MemoryStoreService\")\n\nlocal hashMap = MemoryStoreService:GetHashMap(\"HashMap1\")\n```\n\n----------------------------------------\n\nTITLE: Returning Single and Multiple Values from Luau Functions\nDESCRIPTION: Shows how to use the `return` keyword in Luau functions. The first example `addNumbers` returns a single calculated value. The second example `addAndSubtract` demonstrates returning multiple values (sum and difference), which can be assigned to multiple variables upon calling.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/functions.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\n-- This function returns one return value\nlocal function addNumbers(num1, num2)\n\tlocal result = num1 + num2\n\treturn result\nend\n\nprint(addNumbers(1, 2)) -- 3\nlocal seven = addNumbers(3, 4)\nprint(seven) -- 7\n\n-- This function returns multiple values: sum and difference\nlocal function addAndSubtract(num1, num2)\n\tlocal sum = num1 + num2\n\tlocal difference = num1 - num2\n\treturn sum, difference\nend\n\n-- Calling a function and expecting multiple return values\nlocal sum, difference = addAndSubtract(2, 3)\nprint(sum) -- 5\nprint(difference) -- -1\n```\n\n----------------------------------------\n\nTITLE: Removing Data from a Roblox Data Store using RemoveAsync in Luau\nDESCRIPTION: Demonstrates how to remove an entry from a data store using `RemoveAsync()`. It takes the key of the entry to remove as an argument and returns the value that was associated with the key. `pcall` is used for safe error handling.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud-services/data-stores/index.md#_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal DataStoreService = game:GetService(\"DataStoreService\")\n\nlocal nicknameStore = DataStoreService:GetDataStore(\"Nicknames\")\n\nlocal success, removedValue = pcall(function()\n\treturn nicknameStore:RemoveAsync(\"User_1234\")\nend)\nif success then\n\tprint(removedValue)\nend\n```\n\n----------------------------------------\n\nTITLE: Updating CoinService to Integrate PlayerData and Leaderboard Modules in Lua\nDESCRIPTION: This Lua script integrates PlayerData and Leaderboard modules within the CoinService to manage player coin collection and leaderboard updates in a Roblox game. It requires the Roblox services Workspace, Players, and ServerStorage and the PlayerData and Leaderboard modules from ServerStorage. Key parameters include COIN_KEY_NAME, representing the player's coin data key; COOLDOWN, a delay before re-enabling coins; and COIN_AMOUNT_TO_ADD, the increment applied when a coin is collected. The script initializes coins by enabling them and connects touch events to update player coins via a helper function updatePlayerCoins, which manipulates player data and leaderboard stats. On touch, coins become temporarily disabled and transparent before cooldown reactivation. The script facilitates real-time coin collection tracking and leaderboard updates during gameplay.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/core/scripting/record-and-display-player-data.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\n-- Initializing services and variables\nlocal Workspace = game:GetService(\"Workspace\")\nlocal Players = game:GetService(\"Players\")\nlocal ServerStorage = game:GetService(\"ServerStorage\")\n\n-- Modules\nlocal Leaderboard = require(ServerStorage.Leaderboard)\nlocal PlayerData = require(ServerStorage.PlayerData)\n\nlocal coinsFolder = Workspace.World.Coins\nlocal coins = coinsFolder:GetChildren()\n\nlocal COIN_KEY_NAME = PlayerData.COIN_KEY_NAME\nlocal COOLDOWN = 10\nlocal COIN_AMOUNT_TO_ADD = 1\n\nlocal function updatePlayerCoins(player, updateFunction)\n  -- Update the coin table\n  local newCoinAmount = PlayerData.updateValue(player, COIN_KEY_NAME, updateFunction)\n\n  -- Update the coin leaderboard\n  Leaderboard.setStat(player, COIN_KEY_NAME, newCoinAmount)\nend\n\n-- Defining the event handler\nlocal function onCoinTouched(otherPart, coin)\n  if coin:GetAttribute(\"Enabled\") then\n    local character = otherPart.Parent\n    local player = Players:GetPlayerFromCharacter(character)\n    if player then\n      -- Player touched a coin\n      coin.Transparency = 1\n      coin:SetAttribute(\"Enabled\", false)\n      updatePlayerCoins(player, function(oldCoinAmount)\n        oldCoinAmount = oldCoinAmount or 0\n        return oldCoinAmount + COIN_AMOUNT_TO_ADD\n      end)\n\n      task.wait(COOLDOWN)\n      coin.Transparency = 0\n      coin:SetAttribute(\"Enabled\", true)\n    end\n  end\nend\n\n-- Setting up event listeners\nfor _, coin in coins do\n  coin:SetAttribute(\"Enabled\", true)\n  coin.Touched:Connect(function(otherPart)\n    onCoinTouched(otherPart, coin)\n  end)\nend\n```\n\n----------------------------------------\n\nTITLE: DataStoreWrapper: Generic Data Store Request Queue and Retry System in Roblox Lua\nDESCRIPTION: Implements a queueing mechanism for Roblox DataStore requests ensuring all requests are processed, with retry logic and queue management, except during BindToClose conditions where queues are cleared. It emphasizes continuous request processing to manage complex session locking scenarios and has provisions for handling stale requests.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud-services/data-stores/player-data-purchasing.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\n-- Placeholder for DataStoreWrapper implementation code (not provided in text).\n```\n\n----------------------------------------\n\nTITLE: Defining Function in ModuleScript (Luau)\nDESCRIPTION: Creates an example ModuleScript named PickupManager that stores data multipliers and defines a function `getPickupBonus`. This function calculates a pickup bonus based on a provided rarity string using the stored data. The module returns the PickupManager table containing the function and data.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/scripting/scripts.md#_snippet_1\n\nLANGUAGE: Luau\nCODE:\n```\n-- ModuleScript in ReplicatedStorage\nlocal PickupManager = {}\n\nlocal defaultMultiplier = 1.25\nlocal rarityMultipliers = {\n  common = 10,\n  uncommon = 20,\n  rare = 50,\n  legendary = 100\n}\n\n-- Add the getPickupBonus function to the PickupManager module table\nfunction PickupManager.getPickupBonus(rarity)\n  local bonus = rarityMultipliers[rarity] * defaultMultiplier\n  return bonus\nend\n\nreturn PickupManager\n```\n\n----------------------------------------\n\nTITLE: Creating onPlayerJoin Function in Lua\nDESCRIPTION: This snippet creates a local function named `onPlayerJoin()` within the `PlayerManager` module. This function is called when a new player joins the game. It sets the player's `RespawnLocation` property to the lobby spawn, ensuring that all players spawn in the lobby upon joining. This function takes a `player` parameter, representing the player who joined.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/battle-royale-series/managing-players.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\n-- Local Functions\nlocal function onPlayerJoin(player)\n\tplayer.RespawnLocation = lobbySpawn\nend\n```\n\n----------------------------------------\n\nTITLE: Connecting Player.Died Event to removeActivePlayer - Lua\nDESCRIPTION: Demonstrates how to update player counts and respawn defeated players in the lobby upon death by binding the player's Humanoid.Died event. Invokes both the respawnPlayerInLobby and removeActivePlayer functions as callbacks. Requires that the humanoid object and the referenced functions are defined within scope.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/battle-royale-series/ending-matches.md#_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\nhumanoid.Died:Connect(function()\n\trespawnPlayerInLobby(player)\n\tremoveActivePlayer(player)\nend)\n```\n\n----------------------------------------\n\nTITLE: Creating Leaderstats Folder on Player Join in Roblox with Luau\nDESCRIPTION: This snippet extends player initialization by creating a 'leaderstats' Folder instance as a child of each joined Player object. Essential for leaderboard display, it ensures the correct folder name for compatibility with the built-in UI. The dependencies are Player instance availability and Instance.new support for Folder. No parameters beyond player, and output is an in-player folder.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/scripting/basic-scripting/score-points.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nlocal function onPlayerAdded(player)\n\tlocal leaderstats = Instance.new(\"Folder\")\n\tleaderstats.Name = \"leaderstats\"\n\tleaderstats.Parent = player\nend\n\nPlayers.PlayerAdded:Connect(onPlayerAdded)\n```\n\n----------------------------------------\n\nTITLE: Loading and Playing Player Animations (Luau ModuleScript)\nDESCRIPTION: This ModuleScript, placed in ReplicatedStorage, defines functions to load and play a specific animation on a player character. The 'LoadAnimation' function creates an Animation instance using a provided Asset ID (placeholder 'YOUR_ANIMATION' needs replacement), loads it onto the character's Humanoid Animator, and sets its priority. The 'PlayAnimation' function plays the loaded animation track. It requires a valid Roblox Animation Asset ID.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/build-it-play-it-island-of-move/adding-animations.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n-- Used with \"TouchPartRegister\" script to play animations for a player\nlocal PlayerAnimationFeedback = {}\n\nlocal feedbackAnimationTrack\nlocal ANIMATION_FADE = 0.3\nlocal ANIMATION_ID = \"rbxassetid://YOUR_ANIMATION\"\n\n-- Function to load animation onto player's character\nfunction PlayerAnimationFeedback:LoadAnimation(humanoid)\n\tlocal feedbackAnimation = Instance.new(\"Animation\")\n\tfeedbackAnimation.AnimationId = ANIMATION_ID\n\tfeedbackAnimationTrack = humanoid.Animator:LoadAnimation(feedbackAnimation)\n\tfeedbackAnimationTrack.Priority = Enum.AnimationPriority.Action\n\tfeedbackAnimationTrack.Looped = false\nend\n\n-- Function to play the animation\nfunction PlayerAnimationFeedback:PlayAnimation()\n\tfeedbackAnimationTrack:Play(ANIMATION_FADE)\n\ttask.wait(feedbackAnimationTrack.Length)\nend\n\nreturn PlayerAnimationFeedback\n```\n\n----------------------------------------\n\nTITLE: Setting up a Leaderboard in Roblox Luau\nDESCRIPTION: Creates a leaderboard system that tracks player points. The script creates a 'leaderstats' folder with a 'Points' IntValue for each player that joins the game.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-3/give-points.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n--In ServerScriptService, create a script named PlayerSetup with the contents below.\n\nlocal Players = game:GetService(\"Players\")\n\nlocal function onPlayerJoin(player)\n\tlocal leaderstats = Instance.new(\"Folder\")\n\tleaderstats.Name = \"leaderstats\"\n\tleaderstats.Parent = player\n\n\t-- Example of an IntValue\n\tlocal points = Instance.new(\"IntValue\")\n\tpoints.Name = \"Points\"\n\tpoints.Value = 0\n\tpoints.Parent = leaderstats\nend\n\n-- Run onPlayerJoin when the PlayerAdded event fires\nPlayers.PlayerAdded:Connect(onPlayerJoin)\n```\n\n----------------------------------------\n\nTITLE: Filtering Text Input - Roblox Client Script in Lua\nDESCRIPTION: Captures text input from a TextBox UI element on the client side and sends the submitted text to the server using a RemoteEvent. It listens for the FocusLost event on the TextBox to detect when text entry is finished and only submits the text when the Enter key is pressed. Dependencies include a RemoteEvent named 'InputRemoteEvent' stored in ReplicatedStorage. This script does not perform filtering itself but forwards the raw input to the server for filtering.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/ui/text-filtering.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal textBox = script.Parent\ntextBox.ClearTextOnFocus = false\ntextBox.PlaceholderText = \"...\"\ntextBox.TextXAlignment = Enum.TextXAlignment.Left \ntextBox.TextScaled = true\n\n-- RemoteEvent to send text input to server for filtering\nlocal inputRemoteEvent = ReplicatedStorage:FindFirstChild(\"InputRemoteEvent\")\n\n-- Event handler for focus lost and enter being pressed\nlocal function onFocusLost(enterPressed, inputObject)\n\tif enterPressed then\n\t\tprint(\"SUBMITTED:\", textBox.Text)\n\t\tif inputRemoteEvent then\n\t\t\tinputRemoteEvent:FireServer(textBox.Text)\n\t\tend\n\tend\nend\n\ntextBox.FocusLost:Connect(onFocusLost)\n```\n\n----------------------------------------\n\nTITLE: Client Script for Customizing NPC/object Chat Bubbles in Roblox Lua\nDESCRIPTION: This Lua script customizes incoming chat messages in Roblox by adding a prefix and displaying a speech bubble from an NPC or object. It utilizes the TextChatService API to intercept messages, modify their display properties, and add visual effects using in-game objects like statues. Dependencies include Roblox's TextChatService and Workspace services. The script handles chat message customization and visual presentation, enabling developers to create immersive NPC dialogue or object interactions.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/chat/chat-window.md#_snippet_5\n\nLANGUAGE: Lua\nCODE:\n```\nlocal TextChatService = game:GetService(\"TextChatService\")\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal generalChannel: TextChannel = TextChatService:WaitForChild(\"TextChannels\").RBXGeneral\n\nTextChatService.OnIncomingMessage = function(textChatMessage: TextChatMessage)\n\tlocal properties = Instance.new(\"TextChatMessageProperties\")\n\n\t-- Check for system messages that contain metadata\n\tif not textChatMessage.TextSource and textChatMessage.Metadata ~= \"\" then\n\n\t\t-- Add prefix to make message look like it was sent by a player\n\t\tproperties.PrefixText = string.format(\"<font color='#%s'>%s: </font>\", \"#50C999\", textChatMessage.Metadata)\n\n\t\t-- Add bubble chat\n\t\tTextChatService:DisplayBubble(Workspace.Statue, textChatMessage.Text)\n\tend\n\n\treturn properties\nend\n\nlocal message = \"Welcome! I will be your guide.\"\nlocal speakerName = \"Ancient Knight\"\ngeneralChannel:DisplaySystemMessage(message, speakerName)\n```\n\n----------------------------------------\n\nTITLE: Counting Player Deaths in Roblox\nDESCRIPTION: This Lua code demonstrates tracking player deaths within a Roblox experience using the `Class.Player.CharacterAdded` and `Class.Humanoid.Died` events.  It increments a death counter each time a player's character dies, outputting the death count to the console.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/players/index.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\ngame:GetService(\"Players\").PlayerAdded:Connect(function(player)\n\tlocal deaths = 0\n\tplayer.CharacterAdded:Connect(function(character)\n\t\tlocal humanoid = character:WaitForChild(\"Humanoid\")\n\t\thumanoid.Died:Connect(function()\n\t\t\tdeaths += 1\n\t\t\tprint(player.Name .. \" death count: \" .. deaths)\n\t\tend)\n\tend)\nend)\n```\n\n----------------------------------------\n\nTITLE: Creating Player Leaderstats Folder in Lua\nDESCRIPTION: This snippet extends the `leaderboardSetup` function to create and parent the 'leaderstats' folder to each player. The folder's `Name` property must be set to \"leaderstats\" (lowercase).  This is a fundamental requirement for Roblox's leaderboard system.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/players/leaderboards.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nlocal function leaderboardSetup(player)\n\tlocal leaderstats = Instance.new(\"Folder\")\n\tleaderstats.Name = \"leaderstats\"\n\tleaderstats.Parent = player\nend\n\n-- Connect the \"leaderboardSetup()\" function to the \"PlayerAdded\" event\nPlayers.PlayerAdded:Connect(leaderboardSetup)\n```\n\n----------------------------------------\n\nTITLE: Updating Data in a Roblox Data Store using UpdateAsync in Luau\nDESCRIPTION: Illustrates how to update an existing entry using `UpdateAsync()`. It takes the entry's key and a callback function that receives the current value and returns the new value. The callback function must not yield (e.g., contain `task.wait()`). `pcall` is used for robust error handling.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud-services/data-stores/index.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal DataStoreService = game:GetService(\"DataStoreService\")\n\nlocal nicknameStore = DataStoreService:GetDataStore(\"Nicknames\")\n\nlocal function makeNameUpper(currentName)\n\tlocal nameUpper = string.upper(currentName)\n\treturn nameUpper\nend\n\nlocal success, updatedName = pcall(function()\n\treturn nicknameStore:UpdateAsync(\"User_1234\", makeNameUpper)\nend)\nif success then\n\tprint(\"Uppercase Name:\", updatedName)\nend\n```\n\n----------------------------------------\n\nTITLE: Firing RemoteEvent with Numeric and Dictionary Tables - Lua\nDESCRIPTION: Demonstrates firing a RemoteEvent from a LocalScript with two tables: one numerically indexed (inventoryData) and one dictionary-style (characterData). Both tables are sent to the server via FireServer with no `nil` values. This example ensures clarity on proper table structure for replication. Requires RemoteEvent in ReplicatedStorage.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/scripting/events/remote.md#_snippet_13\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal remoteEvent = ReplicatedStorage:FindFirstChildOfClass(\"RemoteEvent\")\n\n-- Numerically indexed table\nlocal inventoryData = {\n\t\"Sword\", \"Bow\"\n}\n-- Dictionary table\nlocal characterData = {\n\tCharName = \"Diva Dragonslayer\",\n\tCharClass = \"Rogue\"\n}\n\nremoteEvent:FireServer(inventoryData)\nremoteEvent:FireServer(characterData)\n```\n\n----------------------------------------\n\nTITLE: Comparing Dot and Colon Notation for Luau Methods\nDESCRIPTION: Compares calling the `Destroy` method on a Roblox `Part` instance using both dot notation (explicitly passing the object as the first argument) and colon notation (implicitly passing the object as `self`). It demonstrates that both achieve the same result of destroying the part and unsetting its parent. Requires the Roblox environment and `Workspace` service.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/functions.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Destroying a part with dot notation (function)\nlocal firstPart = Instance.new(\"Part\")\nfirstPart.Parent = Workspace\nprint(firstPart.Parent) -- Workspace\nfirstPart.Destroy(firstPart)\nprint(firstPart.Parent) -- nil\n\n-- Destroying a part with colon notation (method)\nlocal secondPart = Instance.new(\"Part\")\nsecondPart.Parent = Workspace\nprint(secondPart.Parent) -- Workspace\nsecondPart:Destroy()\nprint(secondPart.Parent) -- nil\n```\n\n----------------------------------------\n\nTITLE: Removing a Key from MemoryStoreSortedMap in Lua\nDESCRIPTION: This snippet shows how to safely remove a specific key from a Roblox MemoryStoreSortedMap using the RemoveAsync method. It demonstrates dependency on MemoryStoreService and uses pcall to catch errors during both the SetAsync and RemoveAsync operations. The script expects a valid sorted map name and key, and prints warnings if errors occur during the process.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud-services/memory-stores/sorted-map.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal MemoryStoreService = game:GetService(\"MemoryStoreService\")\n\nlocal sortedMap = MemoryStoreService:GetSortedMap(\"SortedMap1\")\n\nlocal setSuccess, _ = pcall(function()\n\treturn sortedMap:SetAsync(\"User_1234\", 1000, 30, \"someStringSortKey\")\nend)\nif setSuccess then\n\tprint(\"Set succeeded.\")\nend\n\nlocal removeSuccess, removeError = pcall(function()\n\tsortedMap:RemoveAsync(\"User_1234\")\nend)\nif not removeSuccess then\n\twarn(removeError)\nend\n```\n\n----------------------------------------\n\nTITLE: Add Button Click Handler Script (Client)\nDESCRIPTION: This script adds a button to the player's GUI and handles clicks on the button to initiate a jump power upgrade purchase. It uses ReplicatedStorage for shared objects and a RemoteFunction to communicate with the server. The script's RunContext is set to Client for optimal performance.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/core/scripting/script-an-upgrade-button.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal Players = game:GetService(\"Players\")\n\nlocal player = Players.LocalPlayer\nlocal playerGui = player.PlayerGui\n\nlocal IncreaseJumpPowerFunction = ReplicatedStorage.Instances.IncreaseJumpPowerFunction\nlocal jumpPurchaseGui = ReplicatedStorage.Instances.JumpPurchaseGui\nlocal jumpButton = jumpPurchaseGui.JumpButton\n\nlocal function onButtonClicked()\n\tlocal success, purchased = pcall(IncreaseJumpPowerFunction.InvokeServer, IncreaseJumpPowerFunction)\n\tif not success then\n\t\t-- purchased will be the error message if success is false\n\t\terror(purchased)\n\telseif success and not purchased then\n\t\twarn(\"Not enough coins!\")\n\tend\nend\n\njumpButton.Activated:Connect(onButtonClicked)\n\n-- Add the JumpPurchaseGui to the player's Gui\njumpPurchaseGui.Parent = playerGui\n```\n\n----------------------------------------\n\nTITLE: Final Complete Script for Health-Reducing Trap\nDESCRIPTION: Combines all previous snippets into a full script that creates a touch-detecting trap which sets the player's health to zero. It references the trap part, detects touching characters with Humanoids, checks for their presence, and updates health accordingly. The script provides a functional template for health-based traps in Roblox.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-3/traps-with-if-statements.md#_snippet_7\n\nLANGUAGE: Luau\nCODE:\n```\nlocal trapPart = script.Parent\n\nlocal function onTouch(otherPart)\n   local character = otherPart.Parent\n   local humanoid = character:FindFirstChildWhichIsA(\"Humanoid\")\n\n   -- Evaluates if a Humanoid was found\n   if humanoid then\n      print(\"Found a Humanoid\")\n      humanoid.Health = 0\n   end\nend\n\ntrapPart.Touched:Connect(onTouch)\n```\n\n----------------------------------------\n\nTITLE: Tweening an Object's Color on Click - Lua\nDESCRIPTION: This Lua script tweens the color of a part when it is clicked. It uses TweenService to create a smooth color transition from the part's original color to a specified hit color (COLOR_ON_HIT). The part is destroyed after being clicked three times. The script prevents re-tweening while a tween is active using the inTween variable. It connects to the MouseClick event of a ClickDetector. It also includes error handling to prevent the object from being tweened while a tween is still in progress.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/build-it-play-it-island-of-move/animating-parts.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\n-- Tween an object's color upon click and destroy it after 3 clicks\nlocal TweenService = game:GetService(\"TweenService\")\nlocal partToTween = script.Parent\nlocal clickDetector = partToTween:FindFirstChildWhichIsA(\"ClickDetector\")\nlocal inTween = false\n\n-- Customizeable variables\nlocal TWEEN_TIME = 0.2\nlocal COLOR_ON_HIT = Color3.fromRGB(255, 0, 50)\nlocal hitCount = 0\n\n-- Tween variables\nlocal tweenInfo = TweenInfo.new(\n\tTWEEN_TIME, -- Time\n\tEnum.EasingStyle.Exponential, -- EasingStyle\n\tEnum.EasingDirection.InOut, -- EasingDirection\n\t0, -- RepeatCount (when less than zero the tween will loop indefinitely)\n\ttrue  -- Reverses (tween will reverse once reaching its goal)\n)\n\nlocal function activateAction()\n\t-- If the object is tweening, prevent it from being tweened again\n\tif inTween == true then\n\t\treturn\n\tend\n\n\t-- Create a tween and play it\n\tlocal tweenObject = TweenService:Create(partToTween, tweenInfo, {Color = COLOR_ON_HIT})\ntweenObject:Play()\n\tinTween = true\n\n\t-- On tween completion, make object clickable again\n\ttweenObject.Completed:Connect(function()\n\t\tinTween = false\n\t\t-- Increment hit count\n\t\thitCount += 1\n\t\t-- After 3 hits, destroy the object\n\t\tif hitCount == 3 then\n\t\t\tpartToTween:Destroy()\n\t\tend\n\tend)\nend\n\nclickDetector.MouseClick:Connect(activateAction)\n```\n\n----------------------------------------\n\nTITLE: Complete Player Points Script with PlayerAdded Event - Lua\nDESCRIPTION: Presents a full working script for tracking player points in Roblox: initializes the Players service and a playerPoints dictionary, listens for player joins, assigns new players a points entry, and prints confirmation. Utilizes Roblox game services and demonstrates typical player attribute tracking.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-5/intro-to-dictionaries.md#_snippet_14\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nlocal playerPoints = {\n\n}\n\nlocal function setPoints(newPlayer)\n   local name = newPlayer.Name\n   print(\"hello \" .. name)\n   playerPoints[name] = 0\n   print(name .. \" has \" .. playerPoints[name] .. \" points.\")\nend\n\nPlayers.PlayerAdded:Connect(setPoints)\n```\n\n----------------------------------------\n\nTITLE: Initializing Leaderboard Setup in Lua\nDESCRIPTION: This code snippet defines a function `leaderboardSetup` that is connected to the `PlayerAdded` event.  The purpose of this function is to create a folder named 'leaderstats' for each player upon their entry into the game. This folder is essential for the leaderboard to function correctly, as it holds the player's statistics.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/players/leaderboards.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nlocal function leaderboardSetup(player)\n\nend\n\n-- Connect the \"leaderboardSetup()\" function to the \"PlayerAdded\" event\nPlayers.PlayerAdded:Connect(leaderboardSetup)\n```\n\n----------------------------------------\n\nTITLE: CollectionService Streaming Detection - Lua\nDESCRIPTION: This LocalScript demonstrates how to detect when instances with a specific tag stream in or out of the game using CollectionService. It utilizes GetInstanceAddedSignal and GetInstanceRemovedSignal to connect functions that handle the appearance and disappearance of tagged objects. The example focuses on controlling the brightness of light sources.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/workspace/streaming.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal CollectionService = game:GetService(\"CollectionService\")\n\nlocal tagName = \"FlickerLightSource\"\nlocal random = Random.new()\nlocal flickerSources = {}\n\n-- Detect currently and new tagged parts streaming in or out\nfor _, light in CollectionService:GetTagged(tagName) do\n\tflickerSources[light] = true\nend\n\nCollectionService:GetInstanceAddedSignal(tagName):Connect(function(light)\n\tflickerSources[light] = true\nend)\n\nCollectionService:GetInstanceRemovedSignal(tagName):Connect(function(light)\n\tflickerSources[light] = nil\nend)\n\n-- Flicker loop\nwhile true do\n\tfor light in flickerSources do\n\t\tlight.Brightness = 8 + random:NextNumber(-0.4, 0.4)\n\tend\n\n\ttask.wait(0.05)\nend\n```\n\n----------------------------------------\n\nTITLE: Creating a PickupManager ModuleScript in Lua\nDESCRIPTION: Implementation of a ModuleScript that calculates pickup bonuses based on rarity. It defines multipliers and a function to calculate the final bonus value.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/scripting/module.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n-- ModuleScript in ReplicatedStorage\nlocal PickupManager = {}\n\nlocal defaultMultiplier = 1.25\nlocal rarityMultipliers = {\n\tcommon = 10,\n\tuncommon = 20,\n\trare = 50,\n\tlegendary = 100\n}\n\n-- Add the getPickupBonus function to the PickupManager table\nPickupManager.getPickupBonus = function(rarity)\n\tlocal bonus = rarityMultipliers[rarity] * defaultMultiplier\n\treturn bonus\nend\n\nreturn PickupManager\n```\n\n----------------------------------------\n\nTITLE: Managing Game Intermission and Start (GameManager Script, Lua)\nDESCRIPTION: This script controls the main game loop, handling intermission periods and ensuring there are enough players before starting the match. It waits using the configured durations from a settings module, prints stage changes, and triggers game startup via the MatchManager. Dependencies include ServerStorage structure, Players, matchManager, and gameSettings modules. Inputs are server state and player count; outputs are scheduled transitions and match initialization.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/battle-royale-series/managing-players.md#_snippet_11\n\nLANGUAGE: Lua\nCODE:\n```\n-- Services\nlocal ServerStorage = game:GetService(\"ServerStorage\")\nlocal Players = game:GetService(\"Players\")\n\n-- Module Scripts\nlocal moduleScripts = ServerStorage:WaitForChild(\"ModuleScripts\")\nlocal matchManager = require(moduleScripts:WaitForChild(\"MatchManager\"))\nlocal gameSettings = require(moduleScripts:WaitForChild(\"GameSettings\"))\n\nwhile true do\n\trepeat\n\t\ttask.wait(gameSettings.intermissionDuration)\n\t\tprint(\"Restarting intermission\")\n\tuntil #Players:GetPlayers() >= gameSettings.minimumPlayers\n\n\tprint(\"Intermission over\")\n\ttask.wait(gameSettings.transitionTime)\n\n\tmatchManager.prepareGame()\nend\n```\n\n----------------------------------------\n\nTITLE: Illustrating Valid and Invalid Luau Variable Names\nDESCRIPTION: This snippet shows examples of valid and invalid variable names in Luau, demonstrating that names must start with a letter or underscore, can contain letters, digits, and underscores, and cannot be reserved keywords or start with a digit.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/variables.md#_snippet_0\n\nLANGUAGE: Luau\nCODE:\n```\nLETTERS   -- valid\na1        -- valid\nvar_name  -- valid\n_test     -- valid\n\nif        -- NOT valid\n25th      -- NOT valid\n```\n\n----------------------------------------\n\nTITLE: Handling Player Touch Event for Health Pickup in Roblox Lua\nDESCRIPTION: Defines a function that triggers when a player physically interacts with a health pickup. It retrieves the player's humanoid object via parent hierarchy, confirms its existence using FindFirstChildWhichIsA, and restores the player's health to MAX_HEALTH. This function abstracts the contact logic for reuse with multiple pickups.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/scripting/intermediate-scripting/create-a-health-pickup.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nlocal function onTouchHealthPickup(otherPart, healthPickup)\n\tlocal character = otherPart.Parent\n\tlocal humanoid = character:FindFirstChildWhichIsA(\"Humanoid\")\n\tif humanoid then\n\t\thumanoid.Health = MAX_HEALTH\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Connecting Touch Event to Function (Lua)\nDESCRIPTION: This Lua code snippet connects a function to the Touched event of multiple parts in the workspace. The `partTouched` function will be called whenever a part is touched.  It depends on the workspace having a 'Collectables' folder with an 'Objects' folder inside, containing the parts to be touched.  The objectPart parameter in `partTouched` represents the collectable object that was touched.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/audio/in-game-sounds.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal pickupObjects = workspace.Collectables.Objects\nlocal objectsArray = pickupObjects:GetChildren()\n\nlocal function partTouched(otherPart, objectPart)\n\tlocal whichCharacter = otherPart.Parent\n\tlocal humanoid = whichCharacter:FindFirstChildWhichIsA(\"Humanoid\")\n\n\tif humanoid and objectPart.CanCollide == true then\n\n\tend\nend\n\n-- Binds every object part to the touch function so it works on all parts\nfor objectIndex = 1, #objectsArray do\n\tlocal objectPart = objectsArray[objectIndex]\n\tobjectPart.Touched:Connect(function(otherPart)\n\t\tpartTouched(otherPart, objectPart)\n\tend)\nend\n```\n\n----------------------------------------\n\nTITLE: Reading Scoped Key from Roblox Data Store\nDESCRIPTION: This example shows how to read a key with a specific scope from a data store. It retrieves the \"User_1234\" key from the \"PlayerInventory\" data store under the \"gold\" scope using pcall for error handling.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud-services/data-stores/versioning-listing-and-caching.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal DataStoreService = game:GetService(\"DataStoreService\")\nlocal inventoryStore = DataStoreService:GetDataStore(\"PlayerInventory\", \"gold\")\nlocal success, currentGold = pcall(function()\n  return inventoryStore:GetAsync(\"User_1234\")\nend)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Value and Metadata from Roblox DataStore Using GetAsync in Lua\nDESCRIPTION: This snippet illustrates fetching a value and its associated DataStoreKeyInfo metadata from the Roblox DataStore using GetAsync. It demonstrates calling GetAsync with a key and handling the returned value, version, creation time, update time, user IDs, and user-defined metadata. The snippet uses pcall to safeguard against errors, prints the retrieved data and metadata on success, and requires DataStoreService setup and an appropriate key.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud-services/data-stores/index.md#_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nlocal DataStoreService = game:GetService(\"DataStoreService\")\n\nlocal experienceStore = DataStoreService:GetDataStore(\"PlayerExperience\")\n\nlocal success, currentExperience, keyInfo = pcall(function()\n\treturn experienceStore:GetAsync(\"User_1234\")\nend)\nif success then\n\tprint(currentExperience)\n\tprint(keyInfo.Version)\n\tprint(keyInfo.CreatedTime)\n\tprint(keyInfo.UpdatedTime)\n\tprint(keyInfo:GetUserIds())\n\tprint(keyInfo:GetMetadata())\nend\n```\n\n----------------------------------------\n\nTITLE: Initialize TreasureManager variables - Lua\nDESCRIPTION: This code snippet initializes variables within the TreasureManager module script, including the cost to open a chest (chestPickCost) and the reward amount (chestReward). It also gets the Players service.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-6/create-with-module-scripts.md#_snippet_10\n\nLANGUAGE: Lua\nCODE:\n```\nlocal TreasureManager = {}\n\nlocal Players = game:GetService(\"Players\")\nlocal keyDrop = 1\nlocal chestPickCost = 1\nlocal chestReward = 100\n```\n\n----------------------------------------\n\nTITLE: Sharding a Sorted Map with Roblox MemoryStoreService in Lua\nDESCRIPTION: This snippet demonstrates how to shard a sorted map in Roblox MemoryStoreService using Lua by splitting keys into alphabetic ranges across multiple buckets. It includes a helper function to select the correct sorted map based on the item key, and shows both insertion of new player data and retrieval of player values. Dependencies include Roblox MemoryStoreService and Players services; it expects keys sorted alphabetically (A-Z) and uses SetAsync and GetAsync for storage and retrieval respectively. Bucket names, expiration time, and shard partitioning logic may be adjusted for other use cases.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud-services/memory-stores/best-practices.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Initialize the MemoryStore Service\nlocal MemoryStoreService = game:GetService(\"MemoryStoreService\")\n\n-- Create your Sorted Map buckets\nlocal sm_AtoG = MemoryStoreService:GetSortedMap(\"AtoG\")\nlocal sm_HtoM = MemoryStoreService:GetSortedMap(\"HtoM\")\nlocal sm_NtoT = MemoryStoreService:GetSortedMap(\"NtoT\")\nlocal sm_UtoZ = MemoryStoreService:GetSortedMap(\"UtoZ\")\n\n-- Helper function to retrieve the correct bucket from the Item Key\nlocal function getSortedMapBucket(itemKey)\n\tif (itemKey >= \"a\" and itemKey < \"h\") then\n\t\treturn sm_AtoG\n\telseif (itemKey < \"n\") then\n\t\treturn sm_HtoM\n\telseif (itemKey < \"u\") then\n\t\treturn sm_NtoT\n\telse\n\t\treturn sm_UtoZ\n\tend\nend\n\n-- Initialize player names with default value of 0\nfor _, player in game:GetService(\"Players\"):GetPlayers() do\n\tlocal bucket = getSortedMapBucket(player)\n\tbucket:SetAsync(player, 0, 600)\nend\n\n-- Retrieve a player's value\nlocal player = \"myPlayer\"\nlocal bucket = getSortedMapBucket(player)\nlocal playerScore = bucket:GetAsync(player)\nprint(playerScore)\n```\n\n----------------------------------------\n\nTITLE: Arranging UI Objects Along a Path2D in Lua\nDESCRIPTION: This Lua script dynamically arranges child GuiObject instances evenly along a Path2D curve within a parent container. It retrieves the path and counts its control points. The script iterates through child GuiObjects, calculates a normalized position 't' for each, and sets their Position property using Path2D:GetPositionOnCurveArcLength(t). It connects to ChildAdded and ChildRemoved events to automatically update the arrangement.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/ui/2D-paths.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal parent = script.Parent\nlocal path = parent:FindFirstChildWhichIsA(\"Path2D\")\n\nlocal function arrangeChildren()\n\tlocal segmentCount = #path:GetControlPoints()\n\tlocal objectsToArrange = {}\n\n\tfor _, child in parent:GetChildren() do\n\t\tif child:IsA(\"GuiObject\") then\n\t\t\ttable.insert(objectsToArrange, child)\n\t\tend\n\tend\n\n\tfor idx, child in objectsToArrange do\n\t\tlocal t = idx / (#objectsToArrange + 1)\n\t\tchild.Position = path:GetPositionOnCurveArcLength(t)\n\tend\nend\n\n-- Initially arrange child UI objects across path\narrangeChildren()\n\n-- Listen for children being added/removed to adjust arrangement\nparent.ChildAdded:Connect(arrangeChildren)\nparent.ChildRemoved:Connect(arrangeChildren)\n```\n\n----------------------------------------\n\nTITLE: Changing Tool Texture to Indicate Reload State in Roblox Lua\nDESCRIPTION: This function implementation visually represents a reload action by changing the tool's TextureId property. When the action is detected, the tool's texture temporarily updates to a reloading symbol, waits for 2 seconds, then restores the original texture. This approach gives real-time feedback to users. Dependencies include valid TextureId asset IDs, a tool object, and use within a ToolController LocalScript. Inputs are action callbacks; the function delays for the animation. Limitations: hardcoded asset IDs and timing.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/input-and-camera/detect-user-input.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal function onAction(actionName, inputState, inputObject)\n\tif actionName == RELOAD_ACTION and inputState == Enum.UserInputState.Begin then\n\t\ttool.TextureId = \"rbxassetid://6593020923\"\n\t\ttask.wait(2)\n\t\ttool.TextureId = \"rbxassetid://92628145\"\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Handling Laser Blast Events on the Server in Roblox Lua\nDESCRIPTION: This snippet defines the `onLaserBlastedEvent` function to process incoming blast data, including validation, permission checks, blast execution, and client replication. It also illustrates iterating through players and sending blast visuals to others, emphasizing server-side validation to prevent cheating.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/gameplay-scripting/implement-blasters.md#_snippet_6\n\nLANGUAGE: Lua\nCODE:\n```\nlocal function onLaserBlastedEvent(playerBlasted: Player, blastData: BlastData.Type)\n    local validatedBlastData = getValidatedBlastData(playerBlasted, blastData)\n    if not validatedBlastData then\n        return\n    end\n\n    if not canPlayerBlast(playerBlasted) then\n        return\n    end\n\n    blastServer(playerBlasted)\n\n    processTaggedPlayers(playerBlasted, blastData)\n\n    for _, replicateToPlayer in Players:GetPlayers() do\n        if playerBlasted == replicateToPlayer then\n            continue\n        end\n        replicateBlastEvent:FireClient(replicateToPlayer, playerBlasted, blastData)\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Complete Player Points and Status Management Script in Roblox Lua\nDESCRIPTION: Presents the final, integrated script. It includes obtaining the Players service, defining `onCharacterAdded` to handle character spawning (setting IsAlive=true) and death (resetting points, setting IsAlive=false via Humanoid.Died), defining `onPlayerAdded` to set up leaderstats, initialize IsAlive=false, and connect CharacterAdded. It connects `onPlayerAdded` to the `Players.PlayerAdded` event and runs a main loop to award points every second only to players whose \"IsAlive\" attribute is true.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/scripting/basic-scripting/score-points.md#_snippet_13\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nlocal function onCharacterAdded(character, player)\n  player:SetAttribute(\"IsAlive\", true)\n  local humanoid = character:WaitForChild(\"Humanoid\")\n\n  humanoid.Died:Connect(function()\n    local points = player.leaderstats.Points\n    points.Value = 0\n    player:SetAttribute(\"IsAlive\", false)\n  end)\nend\n\nlocal function onPlayerAdded(player)\n  local leaderstats = Instance.new(\"Folder\")\n  leaderstats.Name = \"leaderstats\"\n  leaderstats.Parent = player\n\n  local points = Instance.new(\"IntValue\")\n  points.Name = \"Points\"\n  points.Value = 0\n  points.Parent = leaderstats\n\n  player:SetAttribute(\"IsAlive\", false)\n\n  player.CharacterAdded:Connect(function(character)\n    onCharacterAdded(character, player)\n  end)\nend\n\nPlayers.PlayerAdded:Connect(onPlayerAdded)\n\nwhile true do\n  task.wait(1)\n  local playerList = Players:GetPlayers()\n  for i = 1, #playerList do\n    local player = playerList[i]\n    if player:GetAttribute(\"IsAlive\") then\n      local points = player.leaderstats.Points\n      points.Value += 1\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Prompt Purchase of Pass\nDESCRIPTION: This code snippet uses the `MarketplaceService:PromptGamePassPurchase()` function to prompt the user to purchase a pass if they don't already own it. It first checks if the player owns the specified pass using `MarketplaceService:UserOwnsGamePassAsync()`. If the player does not own the pass, a purchase prompt is displayed.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/production/monetization/game-passes.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal MarketplaceService = game:GetService(\"MarketplaceService\")\nlocal Players = game:GetService(\"Players\")\n\n-- Replace the placeholder ID with your pass ID\nlocal passID = 0000000\n\n-- Prompt pass purchase\nlocal function promptPurchase()\n\tlocal player = Players.LocalPlayer\n\tlocal hasPass = false\n\n\tlocal success, message = pcall(function()\n\t\thasPass = MarketplaceService:UserOwnsGamePassAsync(player.UserId, passID)\n\tend)\n\n\tif not success then\n\t\twarn(\"Error while checking if player has pass: \" .. tostring(message))\n\t\treturn\n\tend\n\n\tif hasPass then\n\t\t-- Show a message telling user they already own the pass\n\telse\n\t\t-- Prompt pass purchase\n\t\tMarketplaceService:PromptGamePassPurchase(player, passID)\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Robust Teleportation with Retry Logic in Roblox Lua\nDESCRIPTION: Implements a SafeTeleport module that handles teleportation failures with retry logic. This module script wraps TeleportAsync in pcall, attempts teleportation multiple times on failure, and handles the TeleportInitFailed event.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/projects/teleport.md#_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nlocal TeleportService = game:GetService(\"TeleportService\")\n\nlocal ATTEMPT_LIMIT = 5\nlocal RETRY_DELAY = 1\nlocal FLOOD_DELAY = 15\n\nlocal function SafeTeleport(placeId, players, options)\n    local attemptIndex = 0\n    local success, result -- define pcall results outside of loop so results can be reported later on\n\n    repeat\n        success, result = pcall(function()\n            return TeleportService:TeleportAsync(placeId, players, options) -- teleport the user in a protected call to prevent erroring\n        end)\n        attemptIndex += 1\n        if not success then\n            task.wait(RETRY_DELAY)\n        end\n    until success or attemptIndex == ATTEMPT_LIMIT -- stop trying to teleport if call was successful, or if retry limit has been reached\n\n    if not success then\n        warn(result) -- print the failure reason to output\n    end\n\n    return success, result\nend\n\nlocal function handleFailedTeleport(player, teleportResult, errorMessage, targetPlaceId, teleportOptions)\n    if teleportResult == Enum.TeleportResult.Flooded then\n        task.wait(FLOOD_DELAY)\n    elseif teleportResult == Enum.TeleportResult.Failure then\n        task.wait(RETRY_DELAY)\n    else\n        -- if the teleport is invalid, report the error instead of retrying\n        error((\"Invalid teleport [%s]: %s\"):format(teleportResult.Name, errorMessage))\n    end\n\n    SafeTeleport(targetPlaceId, {player}, teleportOptions)\nend\n\nTeleportService.TeleportInitFailed:Connect(handleFailedTeleport)\n\nreturn SafeTeleport\n```\n\n----------------------------------------\n\nTITLE: ServerLaserManager: Handles authoritative validation and damage application of laser hits in Roblox Lua\nDESCRIPTION: This server script validates laser hits based on proximity and line of sight, preventing cheating and ensuring fair gameplay. It determines if a hit is valid, applies damage to humanoids, and broadcasts laser effects to clients. Dependencies include the ReplicatedStorage.Events folder for communication events. It ensures that damage is only applied when the shot passes validation checks.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/scripting/intermediate-scripting/hit-detection-with-lasers.md#_snippet_33\n\nLANGUAGE: Lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal eventsFolder = ReplicatedStorage.Events\nlocal LASER_DAMAGE = 10\nlocal MAX_HIT_PROXIMITY = 10\n\nlocal function getPlayerToolHandle(player)\n\tlocal weapon = player.Character:FindFirstChildOfClass(\"Tool\")\n\tif weapon then\n\t\treturn weapon:FindFirstChild(\"Handle\")\n\tend\nend\n\nlocal function isHitValid(playerFired, characterToDamage, hitPosition)\n\tlocal characterHitProximity = (characterToDamage.HumanoidRootPart.Position - hitPosition).Magnitude\n\tif characterHitProximity > MAX_HIT_PROXIMITY then\n\t\treturn false\n\tend\n\n\tlocal toolHandle = getPlayerToolHandle(playerFired)\n\tif toolHandle then\n\t\tlocal rayLength = (hitPosition - toolHandle.Position).Magnitude\n\t\tlocal rayDirection = (hitPosition - toolHandle.Position).Unit\n\t\tlocal raycastParams = RaycastParams.new()\n\t\traycastParams.FilterDescendantsInstances = {playerFired.Character}\n\t\tlocal rayResult = workspace:Raycast(toolHandle.Position, rayDirection * rayLength, raycastParams)\n\n\t\tif rayResult and not rayResult.Instance:IsDescendantOf(characterToDamage) then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\n\nlocal function playerFiredLaser(playerFired, endPosition)\n\tlocal toolHandle = getPlayerToolHandle(playerFired)\n\tif toolHandle then\n\t\teventsFolder.LaserFired:FireAllClients(playerFired, toolHandle, endPosition)\n\tend\nend\n\nfunction damageCharacter(playerFired, characterToDamage, hitPosition)\n\tlocal humanoid = characterToDamage:FindFirstChildWhichIsA(\"Humanoid\")\n\tlocal validShot = isHitValid(playerFired, characterToDamage, hitPosition)\n\tif humanoid and validShot then\n\t\thumanoid.Health -= LASER_DAMAGE\n\tend\nend\n\neventsFolder.DamageCharacter.OnServerEvent:Connect(damageCharacter)\neventsFolder.LaserFired.OnServerEvent:Connect(playerFiredLaser)\n```\n\n----------------------------------------\n\nTITLE: Using Custom Events from ModuleScripts\nDESCRIPTION: Demonstrates how to connect to a custom event defined in a ModuleScript and respond to state changes.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/scripting/module.md#_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal Switch = require(ReplicatedStorage:WaitForChild(\"Switch\"))\n\nSwitch.Changed:Connect(function(newState)\n  print(\"Switch state is now\", newState)\nend\n\n-- Test the flipping a few times\ntask.wait(1)\nSwitch.flip()\ntask.wait(1)\nSwitch.flip()\n```\n\n----------------------------------------\n\nTITLE: Spawning and Team Assignment for Players in Roblox Lua\nDESCRIPTION: This Lua sequence manages the logic for disabling the neutral spawn, assigning all players to map spawn points, and attaching listeners for new players joining mid-round. Intended for use in the Rounds script under ServerScriptService/Gameplay, it depends on Players, the neutralSpawn object, and the spawnPlayersInMap function. It ensures new and existing players are correctly sorted into teams and spawned. Input: players list or player instance, Output: players assigned and spawned appropriately.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/gameplay-scripting/add-rounds.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n\t\t-- Spawn all players in the map\n\t\tneutralSpawn.Neutral = false\n\t\tspawnPlayersInMap(Players:GetPlayers())\n\n\t\t-- Spawn new players in the map when they join\n\t\tlocal playerAddedConnection = Players.PlayerAdded:Connect(function(player: Player)\n\t\t\tspawnPlayersInMap({ player })\n\t\tend)\n```\n\n----------------------------------------\n\nTITLE: Generic For Loop with ipairs() in Luau\nDESCRIPTION: This code demonstrates a generic `for` loop in Luau using the `ipairs()` function to iterate over an array. `ipairs()` returns an iterator that iterates through numerical indices in a table, returning the index and value for each element.  The loop prints the index and value for each element in the array.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/control-structures.md#_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nlocal array = {\"a\", \"b\", \"c\", \"d\", \"e\"}\nfor index, value in ipairs(array) do\n\tprint(index, value)\nend\n\n--[[ Resulting output:\n1 a\n2 b\n3 c\n4 d\n5 e\n]]\n```\n\n----------------------------------------\n\nTITLE: StatefulObjectController - Managing UI Object States with TweenService\nDESCRIPTION: This module provides a way to attach behavior to UI objects such as SettingsButton and SettingsMenu, enabling easy toggling and tweening between various visual states. It uses the TweenService for animated transitions and supports multiple states with defined properties. The 'hydrate' function initializes the controller with the target object, a set of states, and an initial state, pre-creating tweens for efficient state switching. The 'setState' method transitions the object to a specified state, canceling any conflicting tweens for smooth animation.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/ui/interactive-ui.md#_snippet_8\n\nLANGUAGE: Lua\nCODE:\n```\nlocal TweenService = game:GetService(\"TweenService\")\n\nlocal StatefulObjectController = {}\nStatefulObjectController.__index = StatefulObjectController\n\nexport type StateName = string\nexport type State = {\n\ttransition: TweenInfo,\n\tproperties: { [string]: any },\n}\n\nfunction StatefulObjectController.hydrate(props: {\n\t\tobject: Instance,\n\t\tstates: { [StateName]: State },\n\t\tinitialStateName: StateName\n\t})\n\tlocal object, states, initialStateName = props.object, props.states, props.initialStateName\n\n\tlocal self = setmetatable({\n\t\tstates = states,\n\t\tcurrentStateName = initialStateName,\n\t\ttweens = {},\n\t}, StatefulObjectController)\n\n\t-- Create tweens for reuse to avoid making new tweens every time state is changed\n\tfor stateName, state in states do\n\t\tself.tweens[stateName] = TweenService:Create(object, state.transition, state.properties)\n\tend\n\n\tself:setState(self.currentStateName)\n\n\treturn self\nend\n\nfunction StatefulObjectController:setState(stateName: StateName)\n\tlocal stateTween: Tween = self.tweens[stateName]\n\tif not stateTween then\n\t\twarn(string.format(\"Attempted to set %s to unknown state '%s'\", self.object:GetFullName(), stateName))\n\t\treturn\n\tend\n\n\tself.currentStateName = stateName\n\n\t-- Make sure other tweens aren't conflicting\n\tfor _, tween in self.tweens do\n\t\ttween:Cancel()\n\tend\n\n\tstateTween:Play()\nend\n\nreturn StatefulObjectController\n```\n\n----------------------------------------\n\nTITLE: Awarding Badges in Roblox using Lua\nDESCRIPTION: This Lua function demonstrates how to safely award a badge to a player in a Roblox experience. It uses `BadgeService:GetBadgeInfoAsync()` to fetch the badge's details and check if it's enabled (`IsEnabled`) before attempting to award it using `BadgeService:AwardBadge()`. Both service calls are wrapped in `pcall` for robust error handling, logging warnings if issues occur during fetching badge info or awarding the badge.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/production/publishing/badges.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal BadgeService = game:GetService(\"BadgeService\")\n\nlocal function awardBadge(player, badgeId)\n  -- Fetch badge information\n  local success, badgeInfo = pcall(BadgeService.GetBadgeInfoAsync, BadgeService, badgeId)\n  if success then\n    -- Confirm that badge can be awarded\n    if badgeInfo.IsEnabled then\n      -- Award badge\n      local awarded, errorMessage = pcall(BadgeService.AwardBadge, BadgeService, player.UserId, badgeId)\n      if not awarded then\n        warn(\"Error while awarding badge:\", errorMessage)\n      end\n    end\n  else\n \t  warn(\"Error while fetching badge info!\")\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Server-Side Procedural Terrain Generation with Actors - Lua\nDESCRIPTION: This Lua code demonstrates server-side procedural terrain generation using Actors for parallel execution.  The script clones itself to create multiple worker Actors, each responsible for generating a chunk of terrain. The `BindToMessageParallel` function allows each actor to run the terrain generation logic concurrently. Requires Workspace service and relies on Roblox Terrain API.  It switches between parallel and serial execution phases using `task.synchronize()` to write voxels.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/scripting/multithreading.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\n-- Parallel execution requires the use of actors\n-- This script clones itself; the original initiates the process, while the clones act as workers\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal actor = script:GetActor()\nif actor == nil then\n\tlocal workers = {}\n\tfor i = 1, 32 do\n\t\tlocal actor = Instance.new(\"Actor\")\n\t\tscript:Clone().Parent = actor\n\t\ttable.insert(workers, actor)\n\tend\n\n\t-- Parent all actors under self\n\tfor _, actor in workers do\n\t\tactor.Parent = script\n\tend\n\n\t-- Instruct the actors to generate terrain by sending messages\n\t-- In this example, actors are chosen randomly\n\ttask.defer(function()\n\t\tlocal rand = Random.new()\n\t\tlocal seed = rand:NextNumber()\n\n\t\tlocal sz = 10\n\t\tfor x = -sz, sz do\n\t\t\tfor y = -sz, sz do\n\t\t\t\tfor z = -sz, sz do\n\t\t\t\t\tworkers[rand:NextInteger(1, #workers)]:SendMessage(\"GenerateChunk\", x, y, z, seed)\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend)\n\n\t-- Exit from the original script; the rest of the code runs in each actor\n\treturn\nend\n\nfunction makeNdArray(numDim, size, elemValue)\n\tif numDim == 0 then\n\t\treturn elemValue\n\tend\n\tlocal result = {}\n\tfor i = 1, size do\n\t\tresult[i] = makeNdArray(numDim - 1, size, elemValue)\n\tend\n\treturn result\nend\n\nfunction generateVoxelsWithSeed(xd, yd, zd, seed)\n\tlocal matEnums = {Enum.Material.CrackedLava, Enum.Material.Basalt, Enum.Material.Asphalt}\n\tlocal materials = makeNdArray(3, 4, Enum.Material.CrackedLava)\n\tlocal occupancy = makeNdArray(3, 4, 1)\n\n\tlocal rand = Random.new()\n\n\tfor x = 0, 3 do\n\t\tfor y = 0, 3 do\n\t\t\tfor z = 0, 3 do\n\t\t\t\toccupancy[x + 1][y + 1][z + 1] = math.noise(xd + 0.25 * x, yd + 0.25 * y, zd + 0.25 * z)\n\t\t\t\tmaterials[x + 1][y + 1][z + 1] = matEnums[rand:NextInteger(1, #matEnums)]\n\t\t\tend\n\t\tend\n\tend\n\n\treturn {materials = materials, occupancy = occupancy}\nend\n\n-- Bind the callback to be called in parallel execution context\nactor:BindToMessageParallel(\"GenerateChunk\", function(x, y, z, seed)\n\tlocal voxels = generateVoxelsWithSeed(x, y, z, seed)\n\tlocal corner = Vector3.new(x * 16, y * 16, z * 16)\n\n\t-- Currently, WriteVoxels() must be called in the serial phase\n\ttask.synchronize()\n\tWorkspace.Terrain:WriteVoxels(\n\t\tRegion3.new(corner, corner + Vector3.new(16, 16, 16)),\n\t\t4,\n\t\tvoxels.materials,\n\t\tvoxels.occupancy\n\t)\nend)\n```\n\n----------------------------------------\n\nTITLE: Detecting Player Touch and Killing Player with Particle Emission in Roblox Lua\nDESCRIPTION: This snippet implements a function that triggers upon the trap part being touched. It checks if the touching object belongs to a player character by looking for a Humanoid instance. If found, it sets the player's health to zero to simulate killing them. This event connection sets up the trap's interactive behavior and integrates particle emission control.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/vfx/use-particles-for-explosions.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal trapObject = script.Parent\nlocal particleEmitter = trapObject.Explosion\n\nlocal EMIT_AMOUNT = 100\n\nlocal function killPlayer(otherPart)\n\tlocal character = otherPart.Parent\n\tlocal humanoid = character:FindFirstChildWhichIsA(\"Humanoid\")\n\n\tif humanoid then\n\t\thumanoid.Health = 0\n\tend\nend\n\ntrapObject.Touched:Connect(killPlayer)\n```\n\n----------------------------------------\n\nTITLE: Adding or Overwriting Data in MemoryStore Hash Map (Lua)\nDESCRIPTION: Adds a new key-value pair to the hash map or overwrites the value if the key already exists. This operation requires the key name, the value, and an expiration time in seconds (up to 45 days). The call is wrapped in `pcall` to handle potential asynchronous network failures.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud-services/memory-stores/hash-map.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal MemoryStoreService = game:GetService(\"MemoryStoreService\")\n\nlocal hashMap = MemoryStoreService:GetHashMap(\"HashMap1\")\n\nlocal setSuccess, _ = pcall(function()\n\treturn hashMap:SetAsync(\"User_1234\", 1000, 30)\nend)\nif setSuccess then\n\tprint(\"Set succeeded.\")\nend\n```\n\n----------------------------------------\n\nTITLE: Complete RewardManager Module Script Example in Roblox Lua\nDESCRIPTION: A full example module script named RewardManager which encapsulates coin rewards logic based on difficulty. It includes internal local variables for the base coin reward and difficulty multipliers. The externally accessible function getCoinReward calculates and returns the coin amount based on difficulty input. This snippet serves as a practical template for creating reusable game logic modules.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-6/intro-to-module-scripts.md#_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal RewardManager = {}\n\n-- Usable only in the module script\nlocal rewardCoins = 50\n\n-- Usable only in the module script\nlocal difficultyModifier = {\n easy = 0.5,\n normal = 1,\n hard = 2\n}\n\n-- Usable in other scripts\nfunction RewardManager.getCoinReward(difficulty)\n local coins = difficultyModifier[difficulty] * rewardCoins\n return coins\nend\n\nreturn RewardManager\n```\n\n----------------------------------------\n\nTITLE: Checking if a Character Was Hit in Lua\nDESCRIPTION: This snippet checks if the raycast hit a player character. It searches for a Model ancestor of the hit instance, and then checks if the Model contains a Humanoid. If both conditions are met, it prints \"Player hit\" to the Output window.  It relies on `weaponRaycastResult` to be defined.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/scripting/intermediate-scripting/hit-detection-with-lasers.md#_snippet_15\n\nLANGUAGE: lua\nCODE:\n```\n-- Check if any objects were hit between the start and end position\nlocal hitPosition\nif weaponRaycastResult then\n\thitPosition = weaponRaycastResult.Position\n\n\t-- The instance hit will be a child of a character model\n\t-- If a humanoid is found in the model then it's likely a player's character\n\tlocal characterModel = weaponRaycastResult.Instance:FindFirstAncestorOfClass(\"Model\")\n\tif characterModel then\n\t\tlocal humanoid = characterModel:FindFirstChildWhichIsA(\"Humanoid\")\n\t\tif humanoid then\n\t\t\tprint(\"Player hit\")\n\t\tend\n\tend\nelse\n\t-- Calculate the end position based on maximum laser distance\n\thitPosition = tool.Handle.Position + directionVector\nend\n```\n\n----------------------------------------\n\nTITLE: Using UpdateAsync with Metadata and User IDs in Roblox DataStore with Lua\nDESCRIPTION: This snippet shows the use of UpdateAsync in Roblox DataStore with a callback function receiving the current value and DataStoreKeyInfo metadata. The callback returns a new value along with the user IDs and metadata for the key. It uses string.upper to transform a player's nickname, retrieves user IDs and metadata from the keyInfo parameter, and returns all three values. The function call is wrapped with pcall for error handling and prints updated data and metadata on success.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud-services/data-stores/index.md#_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nlocal DataStoreService = game:GetService(\"DataStoreService\")\n\nlocal nicknameStore = DataStoreService:GetDataStore(\"Nicknames\")\n\nlocal function makeNameUpper(currentName, keyInfo)\n\tlocal nameUpper = string.upper(currentName)\n\tlocal userIDs = keyInfo:GetUserIds()\n\tlocal metadata = keyInfo:GetMetadata()\n\treturn nameUpper, userIDs, metadata\nend\n\nlocal success, updatedName, keyInfo = pcall(function()\n\treturn nicknameStore:UpdateAsync(\"User_1234\", makeNameUpper)\nend)\nif success then\n\tprint(updatedName)\n\tprint(keyInfo.Version)\n\tprint(keyInfo.CreatedTime)\n\tprint(keyInfo.UpdatedTime)\n\tprint(keyInfo:GetUserIds())\n\tprint(keyInfo:GetMetadata())\nend\n```\n\n----------------------------------------\n\nTITLE: Basic Raycasting in Roblox Lua\nDESCRIPTION: This code snippet demonstrates a basic raycast operation using `Workspace:Raycast()`. It defines an origin point and a direction vector, then casts a ray and stores the result in `raycastResult`.  No filtering is applied, so the ray will detect any eligible `BasePart` or `Terrain` cell. The `highlight` attribute focuses on line 4, showing where the raycast is performed.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/workspace/raycasting.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal rayOrigin = Vector3.new(0, 0, 0)\nlocal rayDirection = Vector3.new(0, -100, 0)\n\nlocal raycastResult = Workspace:Raycast(rayOrigin, rayDirection)\n```\n\n----------------------------------------\n\nTITLE: Defining Function with Multiple Parameters in Luau\nDESCRIPTION: Demonstrates the basic syntax for declaring a Luau function (`assignTeam`) that accepts two distinct parameters (`playerName` and `whichTeam`) by separating their names with a comma. This allows the function signature to specify multiple inputs.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-2/multiple-parameters-and-arguments.md#_snippet_0\n\nLANGUAGE: Luau\nCODE:\n```\nlocal function assignTeam(playerName, whichTeam)\n\nend\n```\n\n----------------------------------------\n\nTITLE: Listening for Player Join Events in Roblox with Luau\nDESCRIPTION: This snippet demonstrates creating a variable for the Players service, defining an onPlayerAdded function, and connecting it to the PlayerAdded event. The code forms the foundational structure for per-player logic and requires placement in ServerScriptService. The sole parameter to onPlayerAdded is the Player instance for each join event. No outputs are produced; further logic must be implemented to initialize stats or other player-specific data.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/scripting/basic-scripting/score-points.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nlocal function onPlayerAdded(player)\n\nend\n\nPlayers.PlayerAdded:Connect(onPlayerAdded)\n```\n\n----------------------------------------\n\nTITLE: Handling touch event to detect player contact in Roblox Lua\nDESCRIPTION: This function `onTouch()` is triggered when any part touches the sell platform. It retrieves the character and player objects involved and attempts to access the player's leaderboard stats (`leaderstats`). It sets up the core logic for detecting player interaction and fetching relevant data such as items and gold. Dependencies include `game:GetService` for the Players service, and naming conventions must match between the script and the leaderboard setup.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/adventure-game-series/selling-items.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nlocal function onTouch(partTouched)\n\tlocal character = partTouched.Parent\n```\n\nLANGUAGE: Lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nlocal player = Players:GetPlayerFromCharacter(character)\n```\n\nLANGUAGE: Lua\nCODE:\n```\nif player then\n\t-- Gets the player's leaderboard. Needed to get items and money\n\tlocal playerStats = player:FindFirstChild(\"leaderstats\")\n```\n\nLANGUAGE: Lua\nCODE:\n```\nif playerStats then\n\t-- Gets the player's items and money\n\tlocal playerItems = playerStats:FindFirstChild(\"Items\")\n\tlocal playerGold = playerStats:FindFirstChild(\"Gold\")\nend\n```\n\nLANGUAGE: Lua\nCODE:\n```\nprint(\"A player touched sellPart\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving Product Price via MarketplaceService - Roblox Lua\nDESCRIPTION: This Lua snippet demonstrates how to dynamically retrieve the price of a developer product or pass within a Roblox experience using the MarketplaceService API. The script calls the GetProductInfo method with the product's unique ID to fetch its details and extracts the PriceInRobux property from the resulting info table. This approach requires that the experience has access to MarketplaceService and that the product ID used is valid. It expects a numeric PRODUCT_ID variable and outputs the price as a number. This implementation allows for prices to be updated remotely in the Creator Hub, supporting dynamic price optimization.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/production/monetization/price-optimization.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal productInfo = MarketplaceService:GetProductInfo(PRODUCT_ID)\nlocal price = productInfo.PriceInRobux\n```\n\n----------------------------------------\n\nTITLE: Defining the item selling function in Roblox Lua\nDESCRIPTION: The `sellItems()` function calculates total gold earned based on the player's current item count, multiplies by a fixed value (e.g., 100 gold per item), then updates the player's gold and resets item count to zero. This encapsulates the core selling logic, enabling reuse whenever a player interacts with the selling platform. Dependencies include proper `Value` referencing for `playerItems` and `playerGold`.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/adventure-game-series/selling-items.md#_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\n-- Sells all a player's items and gives them gold\nlocal sellPart = script.Parent\n\nlocal function sellItems(playerItems, playerGold)\n\nend\n```\n\nLANGUAGE: Lua\nCODE:\n```\nlocal function sellItems(playerItems, playerGold)\n\t-- Gets how many items the player has and multiplies that by item worth.\n\tlocal totalSell = playerItems.Value * 100\n\t-- Adds the total gold to the player's current gold\n\tplayerGold.Value += totalSell\n\t-- Resets the player's item count to zero\n\tplayerItems.Value = 0\nend\n```\n\n----------------------------------------\n\nTITLE: Defining and Calling a Basic Luau Function\nDESCRIPTION: Demonstrates the basic syntax for defining a local Luau function `addOneAndTwo` without parameters or explicit return values (implicitly returns nil). It also shows how to call the defined function. The function calculates the sum of 1 and 2 and prints the result.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/functions.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- This function has no parameters and returns nil\nlocal function addOneAndTwo()\n\tlocal result = 1 + 2\n\tprint(result)\nend\n-- Calling a function without a return\naddOneAndTwo() -- 3\n```\n\n----------------------------------------\n\nTITLE: Data Sharing with ModuleScripts in Lua\nDESCRIPTION: Demonstrates using a ModuleScript to store configuration data for a gun that can be reused across multiple scripts, including tables of values.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/scripting/module.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal GunConfig = {}\n\nGunConfig.MagazineSize = 20\nGunConfig.AmmoCount = 100\nGunConfig.Firerate = 600\nGunConfig.Damage = {\n  [\"Head\"] = 50;\n  [\"Torso\"] = 40;\n  [\"Body\"] = 25;\n}\n\nreturn GunConfig\n```\n\n----------------------------------------\n\nTITLE: Adding values to an array using table.insert in Luau\nDESCRIPTION: This snippet demonstrates how to initialize an empty array and add string items to it using the built-in function table.insert. It shows how to manage inventory items dynamically, suitable for game development in Luau.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-5/make-changes-to-arrays.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nplayerItems = {}\n\ntable.insert(playerItems, \"Potion\")\ntable.insert(playerItems, \"Bread\")\ntable.insert(playerItems, \"Sleeping Bag\")\n\nprint(playerItems)\n```\n\n----------------------------------------\n\nTITLE: Managing Server-Side Scoring Logic in Roblox Lua (Scoring)\nDESCRIPTION: This server script module (`Scoring`) handles the logic for incrementing scores. It initializes a `BindableEvent` (`teamScoreChanged`) to signal score updates within the server. The `incrementScore` function takes a player and amount, verifies the player is on a team, increments the team's `teamPoints` attribute, updates the player's individual `leaderstats.Points`, and fires the `teamScoreChanged` event with the updated team and score.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/gameplay-scripting/add-rounds.md#_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal teamScoreChangedBindable = Instance.new(\"BindableEvent\")\n\nlocal Scoring = {\n\tteamScoreChanged = teamScoreChangedBindable.Event,\n}\n```\n\nLANGUAGE: lua\nCODE:\n```\nfunction Scoring.incrementScore(player: Player, amount: number)\n\tlocal team = player.Team\n\tassert(team, `Player {player.Name} must be on a team to score a point, but has no team`)\n\n\tlocal teamPoints = team:GetAttribute(GuiAttribute.teamPoints)\n\tteamPoints += amount\n\tteam:SetAttribute(GuiAttribute.teamPoints, teamPoints)\n\n\tlocal leaderstat = player.leaderstats.Points\n\tleaderstat.Value += amount\n\n\tteamScoreChangedBindable:Fire(team, teamPoints)\nend\n```\n\n----------------------------------------\n\nTITLE: Basic Teleportation Setup with TeleportService in Lua\nDESCRIPTION: Demonstrates how to use TeleportService:TeleportAsync() to teleport a player to a different place ID. This server-side script gets the first player in the experience and teleports them to the specified target place.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/projects/teleport.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\nlocal TeleportService = game:GetService(\"TeleportService\")\n\nlocal TARGET_PLACE_ID = 1234 -- replace with your own place ID\n\nlocal playerToTeleport = Players:GetPlayers()[1] -- get the first user in the experience\n\nTeleportService:TeleportAsync(TARGET_PLACE_ID, {playerToTeleport}, teleportOptions)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Table Reference Behavior in Luau - Lua\nDESCRIPTION: Exemplifies that assigning a table to a new variable does not copy the table but creates a reference to the original. Changing the original table affects all references. Shows this through assignment and printing before and after modification. No dependencies beyond basic Luau syntax.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/tables.md#_snippet_14\n\nLANGUAGE: lua\nCODE:\n```\nlocal originalArray = {10, 20}\n\nlocal arrayReference = originalArray\n\nprint(\"Original:\", originalArray[1], originalArray[2])\nprint(\"Reference:\", arrayReference[1], arrayReference[2])\n\n-- Change values in original array\noriginalArray[1] = 1000\noriginalArray[2] = 2000\n\nprint(\"Reference:\", arrayReference[1], arrayReference[2])\n\n--[[ Resulting output:\nOriginal: 10 20\nReference: 10 20\nReference: 1000 2000\n]]\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional User Input Handling in Roblox Lua\nDESCRIPTION: This snippet provides a conditional structure within the 'onAction' function to ensure that code execution occurs only when a specific 'actionName' matches 'RELOAD_ACTION' and 'inputState' is at the begin state. This gatekeeper pattern helps ensure that reload logic only triggers at the correct moment and not for every input state. Assumes 'RELOAD_ACTION' is defined in the parent scope and is compatible with ContextActionService callbacks.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/input-and-camera/detect-user-input.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal function onAction(actionName, inputState, inputObject)\n\tif actionName == RELOAD_ACTION and inputState == Enum.UserInputState.Begin then\n\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing User Input Capture via Transparent Overlay Frame in Roblox Lua\nDESCRIPTION: This snippet creates an invisible full-screen frame overlay to capture keyboard input events since services like UserInputService do not work on GUIs. When the overlay receives an InputBegan event, it calls a handler to process keyboard input, such as key presses. It ensures input detection without interfering with normal gameplay elements.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/studio/build-studio-widgets.md#_snippet_4\n\nLANGUAGE: Lua\nCODE:\n```\nlocal frame = Instance.new(\"Frame\")\nframe.BackgroundTransparency = 1  -- Hide the frame\nframe.Size = UDim2.new(1, 0, 1, 0)  -- Cover the screen\nframe.Position = UDim2.new(0, 0, 0, 0)\nframe.Parent = testWidget\n\nlocal function onInputBegan(inputObject)\n\t-- Process the input object here, for example detect key presses\nend\nframe.InputBegan:Connect(onInputBegan)\n```\n\n----------------------------------------\n\nTITLE: Remote Function Invocation and Type Validation - Luau\nDESCRIPTION: This Luau code demonstrates how to invoke a `RemoteFunction` from a client and validate the types of arguments on the server to prevent exploiters from passing incorrect data types. It uses a module 't' (available at [https://github.com/osyrisrblx/t](https://github.com/osyrisrblx/t)) to perform type checking. The local script in 'StarterPlayerScripts' invokes the remote function with the color and position of a part as arguments, while the script in 'ServerScriptService' validates the arguments before creating the part. This ensures that the server is not vulnerable to unexpected data types or values.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/scripting/security/security-tactics.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal remoteFunction = ReplicatedStorage:WaitForChild(\"RemoteFunctionTest\")\n\n-- Pass part color and position when invoking the function\nlocal newPart = remoteFunction:InvokeServer(Color3.fromRGB(200, 0, 50), Vector3.new(0, 25, 0))\n\nif newPart then\n\tprint(\"The server created the requested part:\", newPart)\nelseif newPart == false then\n\tprint(\"The server denied the request. No part was created.\")\nend\n```\n\nLANGUAGE: Lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal remoteFunction = ReplicatedStorage:WaitForChild(\"RemoteFunctionTest\")\nlocal t = require(ReplicatedStorage:WaitForChild(\"t\"))\n\n-- Create type validator in advance to avoid unnecessary overhead\nlocal createPartTypeValidator = t.tuple(t.instanceIsA(\"Player\"), t.Color3, t.Vector3)\n\n-- Create new part with the passed properties\nlocal function createPart(player, partColor, partPosition)\n\t-- Type check the passed arguments\n\tif not createPartTypeValidator(player, partColor, partPosition) then\n\t\t-- Silently return \"false\" if type check fails here\n\t\t-- Raising an error without a cooldown can be abused to bog down the server\n\t\t-- Provide client feedback instead!\n\n\t\treturn false\n\tend\n\n\tprint(player.Name .. \" requested a new part\")\n\tlocal newPart = Instance.new(\"Part\")\n\tnewPart.Color = partColor\n\tnewPart.Position = partPosition\n\tnewPart.Parent = Workspace\n\treturn newPart\nend\n\n-- Bind \"createPart()\" to the remote function's callback\nremoteFunction.OnServerInvoke = createPart\n```\n\n----------------------------------------\n\nTITLE: Chest Interaction Logic - Lua\nDESCRIPTION: This code implements the logic for handling player interaction with chests in the `partTouched` function. It checks if the player can open the chest using `treasureManager.canOpenChest()`, and if so, it calls `treasureManager.openChest()` to award treasure and destroy the chest.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-6/create-with-module-scripts.md#_snippet_16\n\nLANGUAGE: Lua\nCODE:\n```\nlocal function partTouched(otherPart, chestPart)\n\tlocal whichCharacter = otherPart.Parent\n\tlocal humanoid = whichCharacter:FindFirstChildWhichIsA(\"Humanoid\")\n\tif humanoid then\n\t\t-- Check if the player can open a chest, then let them get treasure\n\t\t-- =============================================\n\t\tlocal canOpen = treasureManager.canOpenChest(whichCharacter)\n\t\tif canOpen == true then\n\t\t\ttreasureManager.openChest(chestPart, whichCharacter)\n\t\tend\n\t\t-- =============================================\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Cooldown Mechanics for Laser Blaster in Roblox Lua\nDESCRIPTION: This code manages the attack cooldown for laser blasters using a delay based on the `secondsBetweenBlasts` attribute stored in a configuration object. After the delay, the player's blaster state resets to ready, enabling subsequent blasts and maintaining gameplay balance.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/gameplay-scripting/implement-blasters.md#_snippet_9\n\nLANGUAGE: Lua\nCODE:\n```\nlocal blasterConfig = getBlasterConfig(player)\nlocal secondsBetweenBlasts = blasterConfig:GetAttribute(\"secondsBetweenBlasts\")\n\ntask.delay(secondsBetweenBlasts, function()\n    local currentState = player:GetAttribute(PlayerAttribute.blasterStateServer)\n    if currentState == BlasterState.Blasting then\n        player:SetAttribute(PlayerAttribute.blasterStateServer, BlasterState.Ready)\n    end\nend)\n```\n\n----------------------------------------\n\nTITLE: Appending Elements to Arrays Using Table Library and Indexing in Luau - Lua\nDESCRIPTION: Demonstrates adding elements to the end of an array through the built-in `table.insert` function and by assigning a new element at position `#array + 1`. Prints the newly added elements to verify insertion. Relies on Luau's standard table library and array length operator. Allows dynamic extension of arrays.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/tables.md#_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal testArray = {\"A string\", 3.14159}\n\ntable.insert(testArray, \"New string\")\ntestArray[#testArray+1] = \"Another new string\"\n\nprint(testArray[3]) -- New string\nprint(testArray[4]) -- Another new string\n```\n\n----------------------------------------\n\nTITLE: Disabling Default Roblox Core UI Elements Using Lua\nDESCRIPTION: This Lua snippet demonstrates how to disable specific default Roblox core UI elements such as the health bar and backpack. It uses the StarterGui service's SetCoreGuiEnabled method with Enum.CoreGuiType parameters to selectively hide UI components on the client side. Required dependencies include access to the StarterGui service and knowledge of the CoreGuiType enum. Inputs are the enum values specifying the UI elements, and a boolean false value disables them. The output is the removal of the specified UI elements from the game view. This approach is useful for customizing or replacing default Roblox UI behavior.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/includes/ui/default-ui.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal StarterGui = game:GetService(\"StarterGui\")\n\n-- Disable default health bar and backpack\nStarterGui:SetCoreGuiEnabled(Enum.CoreGuiType.Health, false)\nStarterGui:SetCoreGuiEnabled(Enum.CoreGuiType.Backpack, false)\n```\n\n----------------------------------------\n\nTITLE: Creating UITweenModule in Roblox\nDESCRIPTION: This code defines a Lua module script, `UITweenModule`, designed to provide various tweening functions for UI elements within a Roblox environment. It utilizes Roblox's `TweenService` to create smooth animations for properties like transparency, size, position, and rotation. It provides functions for fading, moving, resizing, rotating, and blurring UI elements.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/beyond-the-dark/user-interface.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n```lua title=\"UITweenModule ModuleScript\"\nlocal TweenService = game:GetService(\"TweenService\")\nlocal UITween = {}\n\n-- for fading images\nfunction UITween.fadePart(object, amount, time, delay)\n\n\tlocal tweenAlpha = TweenInfo.new(\n\t\ttime, --Time\n\t\tEnum.EasingStyle.Quad, --EasingStyle\n\t\tEnum.EasingDirection.Out, --EasingDirection\n\t\t0, --Repeat count\n\t\tfalse, --Reverses if true\n\t\tdelay --Delay time\n\t)\n\n\tlocal tween = TweenService:Create(object, tweenAlpha, {Transparency = amount})\n\ttween:Play()\nend\n\nfunction UITween.fade(object, amount, time, delay)\n\n\tlocal tweenAlpha = TweenInfo.new(\n\t\ttime, --Time\n\t\tEnum.EasingStyle.Quad, --EasingStyle\n\t\tEnum.EasingDirection.Out, --EasingDirection\n\t\t0, --Repeat count\n\t\tfalse, --Reverses if true\n\t\tdelay --Delay time\n\t)\n\n\tlocal tween = TweenService:Create(object, tweenAlpha, {ImageTransparency = amount})\n\ttween:Play()\nend\n\n-- for fading images\nfunction UITween.fadeBackground(object, amount, time, delay)\n\n\tlocal tweenAlpha = TweenInfo.new(\n\t\ttime, --Time\n\t\tEnum.EasingStyle.Quad, --EasingStyle\n\t\tEnum.EasingDirection.Out, --EasingDirection\n\t\t0, --Repeat count\n\t\tfalse, --Reverses if true\n\t\tdelay --Delay time\n\t)\n\n\tlocal tween = TweenService:Create(object, tweenAlpha, {BackgroundTransparency = amount})\n\ttween:Play()\nend\n\n-- for fading text\nfunction UITween.fadeText(object, amount, time, delay)\n\n\tlocal tweenAlpha = TweenInfo.new(\n\t\ttime, --Time\n\t\tEnum.EasingStyle.Quad, --EasingStyle\n\t\tEnum.EasingDirection.Out, --EasingDirection\n\t\t0, --Repeat count\n\t\tfalse, --Reverses if true\n\t\tdelay --Delay time\n\t)\n\n\tlocal tween1 = TweenService:Create(object, tweenAlpha, {TextTransparency = amount})\n\ttween1:Play()\nend\n\n-- for moving text and images\nfunction UITween.move(object, position, time, delay)\n\n\ttask.wait(delay)\n\tobject:TweenPosition(position, Enum.EasingDirection.Out, Enum.EasingStyle.Quint, time)\nend\n\n-- for changing size\nfunction UITween.size(object, size, time, delay, override, callback)\n\n\tlocal tweenSize = TweenInfo.new(\n\t\ttime, --Time\n\t\tEnum.EasingStyle.Quint, --EasingStyle\n\t\tEnum.EasingDirection.Out, --EasingDirection\n\t\t0, --Repeat count\n\t\tfalse, --Reverses if true\n\t\tdelay, --Delay time\n\t\toverride,\n\t\tcallback\n\t)\n\n\tlocal tween = TweenService:Create(object, tweenSize, {Size = size})\n\ttween:Play()\nend\n\nfunction UITween.rotate(object, rotation, time, delay, override, callback)\n\n\tlocal tweenSize = TweenInfo.new(\n\t\ttime, --Time\n\t\tEnum.EasingStyle.Quint, --EasingStyle\n\t\tEnum.EasingDirection.Out, --EasingDirection\n\t\t0, --Repeat count\n\t\tfalse, --Reverses if true\n\t\tdelay, --Delay time\n\t\toverride,\n\t\tcallback\n\t)\n\n\tlocal tween = TweenService:Create(object, tweenSize, {Rotation = rotation})\n\ttween:Play()\nend\n\n-- for blurring the game camera\nfunction UITween.blur(object, amount, time)\n\n\tlocal tweenInfo = TweenInfo.new(time, Enum.EasingStyle.Linear, Enum.EasingDirection.Out, 0, false, 0)\n\tlocal tween = TweenService:Create(object, tweenInfo, {Size = amount})\n\ttween:Play()\nend\n\n-- for blurring the game camera\nfunction UITween.turnOn(object, amount, time)\n\n\tlocal tweenInfo = TweenInfo.new(time, Enum.EasingStyle.Linear, Enum.EasingDirection.Out, 0, false, 0)\n\tlocal tween = TweenService:Create(object, tweenInfo, {Brightness = amount})\n\ttween:Play()\nend\n\nreturn UITween\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing PlayerManager Module in Roblox Lua\nDESCRIPTION: A comprehensive module that manages player states in a battle royale style Roblox game. It handles player spawning, weapon distribution, death events, match state management, and winner determination. The module integrates with Roblox services like Players and ServerStorage to coordinate game flow.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/battle-royale-series/cleanup-and-reset.md#_snippet_12\n\nLANGUAGE: Lua\nCODE:\n```\nlocal PlayerManager = {}\n\n-- Services\nlocal Players = game:GetService(\"Players\")\nlocal ServerStorage = game:GetService(\"ServerStorage\")\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\n-- Modules\nlocal moduleScripts = ServerStorage:WaitForChild(\"ModuleScripts\")\nlocal gameSettings = require(moduleScripts:WaitForChild(\"GameSettings\"))\n\n-- Events\nlocal events = ServerStorage:WaitForChild(\"Events\")\nlocal matchEnd = events:WaitForChild(\"MatchEnd\")\n\n-- Map Variables\nlocal lobbySpawn = workspace.Lobby.StartSpawn\nlocal arenaMap = workspace.Arena\nlocal spawnLocations = arenaMap.SpawnLocations\n\n-- Values\nlocal displayValues = ReplicatedStorage:WaitForChild(\"DisplayValues\")\nlocal playersLeft = displayValues:WaitForChild(\"PlayersLeft\")\n\n-- Player Variables\nlocal activePlayers = {}\nlocal playerWeapon = ServerStorage.Weapon\n\nlocal function checkPlayerCount()\n\tif #activePlayers == 1 then\n\t\tmatchEnd:Fire(gameSettings.endStates.FoundWinner)\n\t\tprint(\"Found winner\")\n\tend\nend\n\nlocal function removeActivePlayer(player)\n\tprint(\"removing player\")\n\tfor playerKey, whichPlayer in activePlayers do\n\t\tif whichPlayer == player then\n\t\t\ttable.remove(activePlayers, playerKey)\n\t\t\tplayersLeft.Value = #activePlayers\n\t\t\tcheckPlayerCount()\n\t\tend\n\tend\nend\n\nlocal function respawnPlayerInLobby(player)\n\tplayer.RespawnLocation = lobbySpawn\n\tplayer:LoadCharacter()\nend\n\nlocal function preparePlayer(player, whichSpawn)\n\tplayer.RespawnLocation = whichSpawn\n\tplayer:LoadCharacter()\n\n\tlocal character = player.Character or player.CharacterAdded:Wait()\n\n\t-- Give the player a tool\n\tlocal sword = playerWeapon:Clone()\n\tsword.Parent = character\n\n\tlocal humanoid = character:WaitForChild(\"Humanoid\")\n\n\thumanoid.Died:Connect(function()\n\t\trespawnPlayerInLobby(player)\n\t\tremoveActivePlayer(player)\n\tend)\nend\n\nlocal function onPlayerJoin(player)\n\tplayer.RespawnLocation = lobbySpawn\nend\n\nlocal function removePlayerWeapon(whichPlayer)\n\t-- Check to see if a player exist in case they disconnected or left.\n\tif whichPlayer then\n\t\tlocal character = whichPlayer.Character\n\n\t\t-- If the player has it currently on their character\n\t\tlocal weapon = character:FindFirstChild(\"Weapon\")\n\n\t\tif weapon then\n\t\t\tweapon:Destroy()\n\t\tend\n\n\t\t-- If the player has the weapon in their backpack\n\t\tlocal backpackWeapon = whichPlayer.Backpack:FindFirstChild(\"Weapon\") \n\n\t\tif backpackWeapon then\n\t\t\tbackpackWeapon:Destroy()\n\t\tend\n\telse\n\t\tprint(\"No player to remove weapon\")\n\tend\nend\n\n\nfunction PlayerManager.sendPlayersToMatch()\n\tlocal availableSpawnPoints = spawnLocations:GetChildren()\n\n\tfor playerKey, whichPlayer in Players:GetPlayers() do\n\t\ttable.insert(activePlayers,whichPlayer)\n\n\t\t-- Gets a spawn location and then removes it from the table so the next player gets the next spawn\n\t\tlocal spawnLocation = table.remove(availableSpawnPoints, 1)\n\t\tpreparePlayer(whichPlayer, spawnLocation)\n\tend\n\n\tplayersLeft.Value = #activePlayers\nend\n\nfunction PlayerManager.getWinnerName()\n  local winningPlayer = activePlayers[1]\n\n\tif winningPlayer then\n\t\treturn winningPlayer.Name\n\telse\n\t\treturn \"Error: No player found\"\n\tend\nend\n\nfunction PlayerManager.removeAllWeapons()\n\tfor playerKey, whichPlayer in activePlayers do\n\t\tremovePlayerWeapon(whichPlayer)\n\tend\nend\n\nfunction PlayerManager.resetPlayers()\n\tfor playerKey, whichPlayer in activePlayers do\n\t\trespawnPlayerInLobby(whichPlayer)\n\tend\n\n\tactivePlayers = {}\nend\n\n-- Events\nPlayers.PlayerAdded:Connect(onPlayerJoin)\n\nreturn PlayerManager\n```\n\n----------------------------------------\n\nTITLE: Configuring Key Codes for MerchBooth Controls - Lua\nDESCRIPTION: Changes the input key mappings for specific MerchBooth controls using setControlKeyCodes. The example maps the ProximityPrompts control to the 'Q' key for keyboard and 'ButtonL1' for gamepad. Requires the MerchBooth module, the desired control enum, and a key code table. Intended for use in LocalScripts to support custom control schemes.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/merch-booth.md#_snippet_24\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal MerchBooth = require(ReplicatedStorage:WaitForChild(\"MerchBooth\"))\n\nMerchBooth.setControlKeyCodes(MerchBooth.Controls.ProximityPrompts, {\n\tkeyboard = Enum.KeyCode.Q,\n\tgamepad = Enum.KeyCode.ButtonL1,\n})\n\n```\n\n----------------------------------------\n\nTITLE: Basic while loop Structure in Luau\nDESCRIPTION: This snippet provides the basic syntax for a while loop, which is used to execute a block of code repeatedly as long as a condition is true. It highlights the keywords `while`, `do`, and `end`, and the placement of instructions within the loop's scope.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-4/repeat-code-with-while-loops.md#_snippet_7\n\nLANGUAGE: Luau\nCODE:\n```\nwhile true do\n\t-- Instructions\nend\n```\n\n----------------------------------------\n\nTITLE: Translating Parameterized Strings with LocalizationService in Lua\nDESCRIPTION: This sample showcases translating dynamic content by substituting numeric and named parameters using the FormatByKey method of the Translator class. It demonstrates passing a table of values to replace format specifiers in translation table entries supporting placeholders. The code depends on a correctly configured localization table with parameterized entries. Use pcall for error trapping. Inputs are keys and parameter sets; outputs are fully formatted, localized strings. Supports both array (ordered) and dictionary (named) parameter passing.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/production/localization/localize-with-scripting.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal LocalizationService = game:GetService(\"LocalizationService\")\n\n-- Load Translator for \"es\". Wrap the function within a pcall() to protect against failures.\nlocal res, translator = pcall(function()\n\treturn LocalizationService:GetTranslatorForLocaleAsync(\"es\")\nend)\n\nif res then\n\t-- Set the parameter value in \"Key_Prize_1\" to 100\n\tlocal keyTranslation1 = translator:FormatByKey(\"Key_Prize_1\", {100})\n\tprint(keyTranslation1) -- Expected Output: 100 joyas\n\n\t-- Set multiple parameters to 500 and 100 by name\n\tlocal keyTranslation2 = translator:FormatByKey(\"Key_Prize_2\", {AmountCash=500, NumJewels=100})\n\tprint(keyTranslation2) -- Expected Output: $500.00 dinero y 100 joyas\nelse\n\tprint('GetTranslatorForPlayerAsync failed: ' .. translator)\nend\n```\n\n----------------------------------------\n\nTITLE: Retrieving Character and Humanoid from Touching Part in Luau\nDESCRIPTION: Inside the 'kill' function, retrieves the parent of the 'otherPart' (assumed to be the character model) and stores it in 'partParent'. It then uses 'FindFirstChild(\"Humanoid\")' on 'partParent' to find the Humanoid object within the character model, storing the result in the 'humanoid' variable. Using 'FindFirstChild' prevents errors if the touching part isn't part of a standard character.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/scripting/basic-scripting/deadly-lava.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal lava = script.Parent\n\nlocal function kill(otherPart)\n  local partParent = otherPart.Parent\n  local humanoid = partParent:FindFirstChild(\"Humanoid\")\nend\n\nlava.Touched:Connect(kill)\n```\n\n----------------------------------------\n\nTITLE: Applying Gradient Colors to User Names in Roblox Chat (Lua)\nDESCRIPTION: This Lua script demonstrates how to apply a color gradient to user name prefixes in the Roblox chat window. It defines a `UIGradient` with a specific color sequence and uses the `TextChatService.OnChatWindowAdded` callback to clone this gradient and parent it to the `PrefixTextProperties` of each incoming message associated with a user.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/chat/chat-window.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal TextChatService = game:GetService(\"TextChatService\")\n\nlocal chatWindowConfiguration = TextChatService.ChatWindowConfiguration\n\nlocal gradient = Instance.new(\"UIGradient\")\ngradient.Color = ColorSequence.new{\n\tColorSequenceKeypoint.new(0, Color3.fromRGB(255, 0, 0)),\n\tColorSequenceKeypoint.new(0.5, Color3.fromRGB(255, 255, 0)),\n\tColorSequenceKeypoint.new(1, Color3.fromRGB(255, 0, 255))\n}\n\nTextChatService.OnChatWindowAdded = function(message: TextChatMessage)\n\tlocal properties = chatWindowConfiguration:DeriveNewMessageProperties()\n\n\tlocal textSource = message.TextSource\n\tif textSource then\n    \tproperties.PrefixTextProperties = chatWindowConfiguration:DeriveNewMessageProperties()\n\t\tgradient:Clone().Parent = properties.PrefixTextProperties\n\tend\n\n\treturn properties\nend\n```\n\n----------------------------------------\n\nTITLE: Initializing DockWidgetPluginGuiInfo in Lua\nDESCRIPTION: This code snippet demonstrates how to create a new `DockWidgetPluginGuiInfo` object in Lua, which is used to define the properties of a Studio widget. It initializes the dock state, enabled state, size, and minimum size of the widget.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/studio/build-studio-widgets.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Create new \"DockWidgetPluginGuiInfo\" object\nlocal widgetInfo = DockWidgetPluginGuiInfo.new(\n\tEnum.InitialDockState.Float, -- Widget will be initialized in floating panel\n\ttrue,   -- Widget will be initially enabled\n\tfalse,  -- Don't override the previous enabled state\n\t200,    -- Default width of the floating window\n\t300,    -- Default height of the floating window\n\t150,    -- Minimum width of the floating window\n\t150     -- Minimum height of the floating window\n)\n\n-- Create new widget GUI\nlocal testWidget = plugin:CreateDockWidgetPluginGui(\"TestWidget\", widgetInfo)\ntestWidget.Title = \"Test Widget\"  -- Optional widget title\n```\n\n----------------------------------------\n\nTITLE: Reading Data from a Roblox Data Store using GetAsync in Luau\nDESCRIPTION: Explains how to read the value associated with a specific key using `GetAsync()`. The call is wrapped in `pcall` to manage potential network errors or issues if the key doesn't exist. Be aware that retrieved values might be stale due to caching.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud-services/data-stores/index.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal DataStoreService = game:GetService(\"DataStoreService\")\n\nlocal experienceStore = DataStoreService:GetDataStore(\"PlayerExperience\")\n\nlocal success, currentExperience = pcall(function()\n\treturn experienceStore:GetAsync(\"User_1234\")\nend)\nif success then\n\tprint(currentExperience)\nend\n```\n\n----------------------------------------\n\nTITLE: Triggering Audio Playback on Volume Touch in Roblox Lua\nDESCRIPTION: This Lua LocalScript, placed in StarterCharacterScripts, plays audio when the local player's character touches a specific part named 'DialogueVolume'. It uses the Touched event, checks if the collision involves the local player, and implements a debounce mechanism to prevent the audio from replaying immediately. Requires Workspace, Players services, and specific objects like Humanoid, Animator, DialogueVolume, and an AudioPlayer within DialogueVolume.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/audio/add-3D-audio.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal Workspace = game:GetService(\"Workspace\")\nlocal Players = game:GetService(\"Players\")\n\nlocal humanoid = script.Parent:WaitForChild(\"Humanoid\")\nlocal volumeDetector = Workspace.DialogueVolume\nlocal trigger = humanoid:WaitForChild(\"Animator\")\nlocal debounce = false\nlocal localPlayer = Players.LocalPlayer\n\nvolumeDetector.Touched:Connect(function(hit)\n\t      if debounce then \n\t\t      return\n\t      end\n\n\t      local hitCharacter = hit:FindFirstAncestorWhichIsA(\"Model\")\n\t      local hitPlayer = Players:GetPlayerFromCharacter(hitCharacter)\n\t\n\t      if hitPlayer ~= localPlayer then\n\t\t      return\n\t      end\n\n\t      debounce = true\n\t\n\t      local audioPlayer = Workspace.DialogueVolume.AudioPlayer\n\t      audioPlayer:Play()\n\t      audioPlayer.Ended:Wait()\n\n\t      debounce = false\n      end)\n```\n\n----------------------------------------\n\nTITLE: Adding Animation to Loading Screen UI (Roblox Lua)\nDESCRIPTION: This Lua code snippet demonstrates how to create a custom loading screen with a rotating image animation using TweenService. It creates UI elements (ScreenGui, TextLabel, ImageLabel), sets up a continuous rotation tween for the ImageLabel, removes the default loading screen, waits for a minimum duration or game load, and destroys the UI after the game is ready.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/players/loading-screens.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\nlocal ReplicatedFirst = game:GetService(\"ReplicatedFirst\")\nlocal TweenService = game:GetService(\"TweenService\")\n\nlocal player = Players.LocalPlayer\nlocal playerGui = player:WaitForChild(\"PlayerGui\")\n\nlocal screenGui = Instance.new(\"ScreenGui\")\nscreenGui.IgnoreGuiInset = true\nscreenGui.Parent = playerGui\n\nlocal textLabel = Instance.new(\"TextLabel\")\ntextLabel.Size = UDim2.new(1, 0, 1, 0)\ntextLabel.BackgroundColor3 = Color3.fromRGB(0, 20, 40)\ntextLabel.Font = Enum.Font.GothamMedium\ntextLabel.TextColor3 = Color3.new(0.8, 0.8, 0.8)\ntextLabel.Text = \"Loading\"\ntextLabel.TextSize = 28\ntextLabel.Parent = screenGui\n\nlocal loadingRing = Instance.new(\"ImageLabel\")\nloadingRing.Size = UDim2.new(0, 256, 0, 256)\nloadingRing.BackgroundTransparency = 1\nloadingRing.Image = \"rbxassetid://4965945816\"\nloadingRing.AnchorPoint = Vector2.new(0.5, 0.5)\nloadingRing.Position = UDim2.new(0.5, 0, 0.5, 0)\nloadingRing.Parent = screenGui\n\n-- Remove the default loading screen\nReplicatedFirst:RemoveDefaultLoadingScreen()\n\nlocal tweenInfo = TweenInfo.new(4, Enum.EasingStyle.Linear, Enum.EasingDirection.In, -1)\nlocal tween = TweenService:Create(loadingRing, tweenInfo, {Rotation = 360})\ntween:Play()\n\ntask.wait(5)  -- Force screen to appear for a minimum number of seconds\n\nif not game:IsLoaded() then\n game.Loaded:Wait()\nend\n\nscreenGui:Destroy()\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Module Script in Roblox Lua\nDESCRIPTION: Demonstrates the minimal skeleton of a Roblox module script written in Lua, which is a table declared locally and returned at the end. This structure allows the module script to expose functions and variables by returning a table. The snippet shows creating an empty module container named Module. No external dependencies are required.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-6/intro-to-module-scripts.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal Module = {}\n\nreturn Module\n```\n\n----------------------------------------\n\nTITLE: Defining Control Variable and Start Value in Luau for Loop\nDESCRIPTION: Declares a control variable named 'count' and initializes it with a starting value of 10. This variable tracks the loop's progress.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-4/intro-to-for-loops.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nfor count = 10\n```\n\n----------------------------------------\n\nTITLE: Handling Tool Events with Lua in Roblox\nDESCRIPTION: This Lua script demonstrates how to connect functions to a Roblox Tool's Equipped and Activated events. Placed in a LocalScript within the tool, it listens for the player equipping or activating the tool and triggers the Play method on Sound objects named 'Equip' and 'Activate' located within the tool's Handle.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/scripting/intermediate-scripting/create-player-tools.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal tool = script.Parent\n\nlocal function toolEquipped()\n\ttool.Handle.Equip:Play()\nend\n\nlocal function toolActivated()\n\ttool.Handle.Activate:Play()\nend\n\ntool.Equipped:Connect(toolEquipped)\ntool.Activated:Connect(toolActivated)\n\n```\n\n----------------------------------------\n\nTITLE: Adding Innermost Loop for Width and Calling Cube Creation - Luau\nDESCRIPTION: Adds the third and innermost `for` loop, nested inside the length loop. This loop iterates from 1 up to `TOWER_SIZE`, controlling the position along the width (Z-coordinate). Inside this loop, it calculates the `spawnZ` position and calls the `makeCube()` function with the calculated `spawnX`, `spawnY`, and `spawnZ` coordinates. A `task.wait(0.25)` is included for visualization.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-4/nested-loops.md#_snippet_10\n\nLANGUAGE: Luau\nCODE:\n```\n-- Builds tower\nfor heightIndex = 1, TOWER_SIZE do\n    local spawnY = (heightIndex - 1) * CUBE_SIZE\n\n    for lengthIndex = 1, TOWER_SIZE do\n        local spawnX = lengthIndex * CUBE_SIZE\n\n        for widthIndex = 1, TOWER_SIZE do\n            local spawnZ = widthIndex * CUBE_SIZE\n            makeCube(spawnX, spawnY, spawnZ)\n            task.wait(0.25)\n        end\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Script - Receiving Network Message\nDESCRIPTION: This Script connects to the network message ID 'RequestA' using the NetworkManagerServer module. When a message with the ID 'RequestA' is received, it prints a statement including the player who sent the message and any additional arguments.  This demonstrates how server-side scripts can subscribe to specific network message IDs using the provided encapsulation.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/scripting/module.md#_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\n-- Script in ServerScriptService\nlocal ServerScriptService = game:GetService(\"ServerScriptService\")\n\nlocal NetworkManagerServer = require(ServerScriptService:WaitForChild(\"NetworkManagerServer\"))\nNetworkManagerServer.GetServerEventSignal(\"RequestA\"):Connect(function(player, ...)\n\tprint(\"Received RequestA from\", player, ...)\nend)\n\n```\n\n----------------------------------------\n\nTITLE: Hiding Leaderboard in Lua\nDESCRIPTION: This Lua script hides the default leaderboard interface. It accesses the `StarterGui` service and uses the `SetCoreGuiEnabled` function to disable the 'PlayerList' GUI element. This snippet is typically placed in a `LocalScript` within `StarterGui` or `StarterPlayerScripts` and is used to control the display of the leaderboard at different points within the game.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/players/leaderboards.md#_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal StarterGui = game:GetService(\"StarterGui\")\nStarterGui:SetCoreGuiEnabled(Enum.CoreGuiType.PlayerList, false)\n```\n\n----------------------------------------\n\nTITLE: Binding Blaster Activation to User Input in Roblox (Lua)\nDESCRIPTION: This snippet binds the blasting action to both mouse and gamepad input using Roblox’s ContextActionService. Dependencies include ContextActionService and Enum for input types. The parameters specify the action name, callback, and supported input types (MouseButton1 and ButtonR2). When players press the assigned controls, the onBlasterActivated function gets triggered, enabling responsive laser blasting via UI or hardware input. Ensure onBlasterActivated is defined elsewhere and all services are required before binding.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/gameplay-scripting/implement-blasters.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nContextActionService:BindAction(\"_\", onBlasterActivated, false,\n  Enum.UserInputType.MouseButton1,\n  Enum.KeyCode.ButtonR2\n)\n```\n\n----------------------------------------\n\nTITLE: Assigning Values to Multiple Variables Simultaneously in Luau\nDESCRIPTION: This snippet illustrates simultaneous assignment to multiple local variables. It shows how Luau handles cases where the number of values differs from the number of variables, assigning `nil` to extra variables and discarding extra values.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/variables.md#_snippet_2\n\nLANGUAGE: Luau\nCODE:\n```\nlocal a, b, c = 1, 2, 3\nlocal d, e, f = 4, 5 -- extra variable\nlocal g, h = 7, 8, 9 -- extra value\n\nprint(a, b, c) -- 1, 2, 3\nprint(d, e, f) -- 4, 5, nil\nprint(g, h) -- 7, 8\n```\n\n----------------------------------------\n\nTITLE: Requiring a ModuleScript in a Client Script\nDESCRIPTION: Shows how to use require() to load a ModuleScript from ReplicatedStorage in a client script and call a function from the module.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/scripting/module.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\n-- Get the value returned by the ModuleScript\nlocal PickupManager = require(ReplicatedStorage:WaitForChild(\"PickupManager\"))\n\n-- Call a ModuleScript function\nlocal bonus = PickupManager.getPickupBonus(\"legendary\")\nprint(bonus)  --> 125\n```\n\n----------------------------------------\n\nTITLE: Triggering Premium Purchase Modal and Teleportation Logic in Roblox Lua\nDESCRIPTION: This Lua script handles teleporting Premium users to an exclusive area within the game and prompts non-Premium players with a purchase modal upon touching a designated part (teleporter). It uses the MarketplaceService to show the Premium purchase UI, tracks overlapping player parts using attributes to debounce modal prompts, and updates based on membership changes. Key Roblox services like Players and MarketplaceService are required. Inputs include player character touch events and membership type changes; outputs include teleportation of Premium members and display of the purchase modal for others. This script supports immersive monetization by integrating gameplay mechanics with membership upgrades, while preventing modal spamming through cooldown handling.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/production/monetization/engagement-based-payouts.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nlocal MarketplaceService = game:GetService(\"MarketplaceService\")\nlocal Players = game:GetService(\"Players\")\n\nlocal teleporter = script.Parent\nlocal showModal = true\n\nlocal TELEPORT_POSITION = Vector3.new(1200, 200, 60)\n\n-- Teleport character to exclusive area\nlocal function teleportPlayer(player)\n\t-- Request streaming around target location\n\tplayer:RequestStreamAroundAsync(TELEPORT_POSITION)\n\n\t-- Teleport character\n\tlocal character = player.Character\n\tif character and character.Parent then\n\t\tlocal currentPivot = character:GetPivot()\n\t\tcharacter:PivotTo(currentPivot * CFrame.new(TELEPORT_POSITION))\n\tend\nend\n\n-- Detect character parts touching teleporter\nteleporter.Touched:Connect(function(otherPart)\n\tlocal player = Players:GetPlayerFromCharacter(otherPart.Parent)\n\tif not player then return end\n\n\tif not player:GetAttribute(\"CharacterPartsTouching\") then\n\t\tplayer:SetAttribute(\"CharacterPartsTouching\", 0)\n\tend\n\tplayer:SetAttribute(\"CharacterPartsTouching\", player:GetAttribute(\"CharacterPartsTouching\") + 1)\n\n\tif player.MembershipType == Enum.MembershipType.Premium then\n\t\t-- User has Premium; teleport character to exclusive area within experience\n\t\tteleportPlayer(player)\n\telse\n\t\t-- Show purchase modal, using debounce to show once every few seconds at most\n\t\tif not showModal then return end\n\t\tshowModal = false\n\t\ttask.delay(5, function()\n\t\t\tshowModal = true\n\t\tend)\n\t\tMarketplaceService:PromptPremiumPurchase(player)\n\tend\nend)\n\n-- Detect character parts exiting teleporter\nteleporter.TouchEnded:Connect(function(otherPart)\n\tlocal player = Players:GetPlayerFromCharacter(otherPart.Parent)\n\tif player and player:GetAttribute(\"CharacterPartsTouching\") then\n\t\tplayer:SetAttribute(\"CharacterPartsTouching\", player:GetAttribute(\"CharacterPartsTouching\") - 1)\n\tend\nend)\n\n-- Handle membership changed event\nPlayers.PlayerMembershipChanged:Connect(function(player)\n\twarn(\"User membership changed; new membership is \" .. tostring(player.MembershipType))\n\n\t-- Teleport character if membership type is Premium and character is on teleporter\n\tif player.MembershipType == Enum.MembershipType.Premium and player:GetAttribute(\"CharacterPartsTouching\") > 0 then\n\t\tteleportPlayer(player)\n\tend\nend)\n```\n\n----------------------------------------\n\nTITLE: Using If Statement to Check Debounce Variable and Guard Fade Execution in Lua\nDESCRIPTION: This code adds a conditional statement to the fade function that checks whether the 'isTouched' debounce variable is false before running the fading logic. Wrapping the core functionality inside an 'if not isTouched' block prevents concurrent executions caused by multiple touches, ensuring the platform fades only once until reset.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/scripting/basic-scripting/fading-trap.md#_snippet_4\n\nLANGUAGE: Lua\nCODE:\n```\nlocal platform = script.Parent\n\nlocal isTouched = false\n\nlocal function fade()\n\tif not isTouched then\n\t\tfor count = 1, 10 do\n            platform.Transparency = count / 10\n            task.wait(0.1)\n\t    end\n\t\tplatform.CanCollide = false\n\t\ttask.wait(3)\n\t\tplatform.CanCollide = true\n\t\tplatform.Transparency = 0\n\tend\nend\n\nplatform.Touched:Connect(fade)\n```\n\n----------------------------------------\n\nTITLE: Tweening GuiObject Position Using TweenService in Lua\nDESCRIPTION: Moves a GuiObject, such as an ImageLabel within a ScreenGui, to the precise center of the screen using a position tween. Requires Roblox services: TweenService and Players. Expects the target object to exist and have its AnchorPoint set to (0.5, 0.5) for centering. Inputs include target position (UDim2), with output being a smooth position interpolation.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/ui/animation.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal TweenService = game:GetService(\"TweenService\")\nlocal Players = game:GetService(\"Players\")\n\nlocal PlayerGui = Players.LocalPlayer:WaitForChild(\"PlayerGui\")\nlocal ScreenGui = PlayerGui:WaitForChild(\"ScreenGui\")\nlocal object = ScreenGui:WaitForChild(\"ImageLabel\")\n\nobject.AnchorPoint = Vector2.new(0.5, 0.5)\n\nlocal targetPosition = UDim2.new(0.5, 0, 0.5, 0)\n\nlocal tweenInfo = TweenInfo.new(2)\nlocal tween = TweenService:Create(object, tweenInfo, {Position = targetPosition})\n\ntween:Play()\n```\n\n----------------------------------------\n\nTITLE: Implementing In-Experience Asset Creation in Lua using AssetService\nDESCRIPTION: A server-side script that demonstrates how to implement in-experience asset creation using AssetService:PromptCreateAssetAsync(). The code handles prompting users to save a car model they've customized in an experience and processes different result states.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/projects/assets/in-experience-asset-creation.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Define the AssetService variable\nlocal AssetService = game:GetService(\"AssetService\")\n\n-- Set up PromptCreateAssetAsync() for prompting the submission dialog\nlocal function CreateAsset(player, instance)\n\tlocal complete, result, assetId = pcall(function()\n\t\treturn AssetService:PromptCreateAssetAsync(player, instance, Enum.AssetType.Model)\n\tend)\n\n\tif complete then\n\t\tif result == Enum.PromptCreateAssetResult.Success then\n\t\t\tprint(\"successfully uploaded, AssetId:\", assetId)\n\t\telse\n\t\t\tprint(\"Received result\", result)\n\t\tend\n\telse\n\t\tprint(\"error\")\n\t\tprint(result)\n\tend\nend\n\n-- Car painting logic omitted\n\n-- Add an event handler\nlocal function onUserPublish(player, promptObject)\n\t-- User saves the car instance with the experience's default color\n\tif promptObject.Name == \"car\" then\n\t\tCreateAsset(player, car)\n\telseif promptObject.Name == \"CarPaintYellow\" or promptObject.Name == \"CarPaintBlue\" or promptObject.Name == \"CarPaintBlack\" or promptObject.Name == \"CarPaintRed\" then\n\t\tPaintCarColor(promptObject.Name)\n\tend\nend\n\nPublishEvent.OnServerEvent:Connect(onUserPublish)\n```\n\n----------------------------------------\n\nTITLE: Updating Player's Keys and Destroying Key in getKey() - Roblox Lua\nDESCRIPTION: This complete module function increments the player's 'Lockpicks' stat using the getPlayerKeys helper, adds the configured 'keyDrop' amount, then destroys the key part. Inputs are the touched key part and the character object. The function relies on leaderstats and correct script structure as prerequisites, safely handling player inventory updates and object removal.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-6/create-with-module-scripts.md#_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nfunction TreasureManager.getKey(keyPart, whichCharacter)\n\tlocal playerKeys = getPlayerKeys(whichCharacter)\n\tplayerKeys.Value = playerKeys.Value + keyDrop\n\tkeyPart:Destroy()\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Proximity-Based ShouldDeliverCallback with TextChatService in Roblox (Lua)\nDESCRIPTION: Defines a Lua script for ServerScriptService in Roblox, setting up a proximity-based chat system using TextChatService. The script assigns a ShouldDeliverCallback to a chat channel, which determines if a message should be delivered based on the 3D world positions of the sender and target. It depends on Roblox services: TextChatService and Players. Key parameters include the message sender's and target's user IDs, and the allowed chat distance (50 units). Inputs are chat messages and player identifiers; the output is a Boolean value determining delivery. Players without characters or positions default to Vector3.zero, which may affect logic for players not yet loaded.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/chat/examples/proximity-chat.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal TextChatService = game:GetService(\"TextChatService\")\nlocal Players = game:GetService(\"Players\")\n\n-- Get the chat channel for proximity-based chat\n-- You can replace this general channel with a dedicated channel\nlocal generalChannel: TextChannel = TextChatService:WaitForChild(\"TextChannels\").RBXGeneral\n\n-- Function to get the position of a user's character\nlocal function getPositionFromUserId(userId: number)\n\t-- Get the player associated with the given user ID\n\tlocal targetPlayer = Players:GetPlayerByUserId(userId)\n\n\t-- If the player exists, get their character's position\n\tif targetPlayer then\n\t\tlocal targetCharacter = targetPlayer.Character\n\t\tif targetCharacter then\n\t\t\treturn targetCharacter:GetPivot().Position\n\t\tend\n\tend\n\n\t-- Return a default position if the player or character cannot be found\n\treturn Vector3.zero\nend\n\n-- Set the callback for the general channel to control message delivery\ngeneralChannel.ShouldDeliverCallback = function(textChatMessage: TextChatMessage, targetTextSource: TextSource)\n\t-- Get the positions of the message sender and target\n\tlocal sourcePos = getPositionFromUserId(textChatMessage.TextSource.UserId)\n\tlocal targetPos = getPositionFromUserId(targetTextSource.UserId)\n\n\t-- Deliver message if distance between sender and target is less than 50 units\n\treturn (targetPos - sourcePos).Magnitude < 50\nend\n```\n\n----------------------------------------\n\nTITLE: Rounding Numbers with Math Functions in Luau\nDESCRIPTION: Provides examples of using the standard Luau `math` library functions `math.floor`, `math.ceil`, and `math.modf` to perform different types of rounding on positive and negative numbers. `math.floor` rounds down, `math.ceil` rounds up, and `math.modf` rounds towards zero while also returning the fractional part. Requires access to the `math` library.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/numbers.md#_snippet_2\n\nLANGUAGE: Luau\nCODE:\n```\nprint(math.floor(3.3))  --> 3\nprint(math.floor(-3.3))  --> -4\nprint(math.ceil(3.3))  --> 4\nprint(math.ceil(-3.3))  --> -3\nprint(math.modf(3.3))  --> 3 0.2999999999999998\nprint(math.modf(-3.3))  --> -3 -0.2999999999999998\n```\n\n----------------------------------------\n\nTITLE: Get Data Store Key with pcall - Luau\nDESCRIPTION: Retrieves data from the data store (`goldStore`) using a specific key (`playerUserID`) by calling `GetAsync`. The operation is wrapped in `pcall` to handle potential errors. If successful, it prints the retrieved value (`currentGold`) to the output.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/scripting/intermediate-scripting/save-data.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal DataStoreService = game:GetService(\"DataStoreService\")\n\nlocal goldStore = DataStoreService:GetDataStore(\"PlayerGold\")\n\n-- Data store key and value\nlocal playerUserID = 505306092\nlocal playerGold = 250\n\n-- Set data store key\nlocal setSuccess, errorMessage = pcall(function()\n\tgoldStore:SetAsync(playerUserID, playerGold)\nend)\nif not setSuccess then\n\twarn(errorMessage)\nend\n\n-- Read data store key\nlocal getSuccess, currentGold = pcall(function()\n\treturn goldStore:GetAsync(playerUserID)\nend)\nif getSuccess then\n\tprint(currentGold)\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Wall Movement with TweenService in Roblox Lua\nDESCRIPTION: This Lua script controls the movement of the pantry's false wall using Roblox's TweenService. It manages different states of a door-like structure, plays sounds, and responds to player interactions through trigger volumes. The script uses tweening to animate wall positions, facilitating an expanding and collapsing room effect.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/the-mystery-of-duvall-drive/develop-a-moving-world.md#_snippet_5\n\nLANGUAGE: Lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\nlocal TweenService = game:GetService(\"TweenService\")\n\nlocal model = script.Parent\nlocal sound = model.Sound.Value\nlocal trigger = model.Trigger\n\nlocal left = model.TargetL_Closed\nlocal right = model.TargetR_Closed\n\nlocal tweenInfo = TweenInfo.new(\n\tmodel.Speed.Value, --Time/Speed of Door Tween\n\tEnum.EasingStyle.Quart, --Easing Style\n\tEnum.EasingDirection.InOut, --EasingDirection\n\t0, --Repeat Count\n\tfalse, --Reverse true\n\t0 --Delay\n)\n\nlocal DoorState = {\n\t[\"Closed\"] = 1,\n\t[\"Opening\"] = 2,\n\t[\"Open\"] = 3,\n\t[\"Closing\"] = 4,\n}\n\nlocal doorState = DoorState.Closed\nlocal playersNear = {}\n\nlocal tweenL = TweenService:Create(left, tweenInfo, {CFrame = model.TargetL_Open.CFrame})\nlocal tweenR = TweenService:Create(right, tweenInfo, {CFrame = model.TargetR_Open.CFrame})\n\nlocal tweenLClose = TweenService:Create(left, tweenInfo, {CFrame = model.TargetL_Closed.CFrame})\nlocal tweenRClose = TweenService:Create(right, tweenInfo, {CFrame = model.TargetR_Closed.CFrame})\n\nlocal function StartOpening()\n\tdoorState = DoorState.Opening\n\tsound:Play()\n\n\ttweenL:Play()\n\ttweenR:Play()\nend\n\nlocal function StartClosing()\n\tdoorState = DoorState.Closing\n\t--model[\"Door\"]:Play()\n\n\ttweenLClose:Play()\n\ttweenRClose:Play()\nend\n\nlocal function tweenOpenCompleted(playbackState)\n\tif next(playersNear) == nil then\n\t\tStartClosing()\n\telse\n\t\tdoorState = DoorState.Open\n\tend\nend\n\nlocal function tweenCloseCompleted(playbackState)\n\tif next(playersNear) ~= nil then\n\t\tStartOpening()\n\telse\n\t\tdoorState = DoorState.Closed\n\tend\nend\n\ntweenL.Completed:Connect(tweenOpenCompleted)\ntweenLClose.Completed:Connect(tweenCloseCompleted)\n\nlocal function touched(otherPart)\n\tif otherPart.Name == \"HumanoidRootPart\" then\n\t\tlocal player = Players:GetPlayerFromCharacter(otherPart.Parent)\n\t\tif player then\n\t\t\t--print(\"touch\")\n\t\t\tplayersNear[player] = 1\n\t\t\tif doorState == DoorState.Closed then\n\t\t\t\tStartOpening()\n\t\t\tend\n\t\tend\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Example of Player Data Table Management in Lua\nDESCRIPTION: This code snippet demonstrates how to use a Lua table to store user information when players join a Roblox game. It highlights the importance of removing entries to prevent memory leaks caused by accumulating data for disconnected players.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/performance-optimization/improve.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal playerInfo = {}\nPlayers.PlayerAdded:Connect(function(player)\n\tplayerInfo[player] = {} -- some info\nend)\n```\n\n----------------------------------------\n\nTITLE: Using `__index` with a Table for Default Values in Lua\nDESCRIPTION: Illustrates how to set the `__index` metamethod to another table. When a key (`x`) is accessed on the original table (`t`) and is not found (`nil`), Lua will then look up the key in the table assigned to `__index`.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/metatables.md#_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal metatable = {\n\t__index = {x = 1}\n}\n\nlocal t = setmetatable({}, metatable)\nprint(t.x) --> 1\n```\n\n----------------------------------------\n\nTITLE: Creating HumanoidDescription from Outfit ID in Roblox Lua\nDESCRIPTION: Generates a HumanoidDescription object from a specific Roblox avatar outfit asset ID using Players:GetHumanoidDescriptionFromOutfitId. Requires access to the Players service. The 'outfitId' parameter must be a valid numeric asset ID of an outfit. Returns a HumanoidDescription prepopulated with the properties defined by the specified outfit.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/characters/appearance.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nlocal outfitId = 480059254\n\nlocal humanoidDescriptionFromOutfit = Players:GetHumanoidDescriptionFromOutfitId(outfitId)\n```\n\n----------------------------------------\n\nTITLE: Implementing Grid Snapping with Custom Constraint Function in Lua for Roblox DragDetector\nDESCRIPTION: This snippet demonstrates how to create a custom constraint function that snaps a dragged object to a world grid. It registers a function that rounds positions to specified increments, providing a grid-snapping effect when dragging objects.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/ui/3D-drag-detectors.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal dragDetector = script.Parent.DragDetector\nlocal startPartPosition = nil\n\nlocal SNAP_INCREMENT = 4\n\ndragDetector.DragStart:Connect(function()\n\tstartPartPosition = script.Parent.Position\nend)\n\ndragDetector.DragEnd:Connect(function()\n\tstartPartPosition = nil\nend)\n\nlocal function snapToWorldGrid(proposedMotion)\n\tif startPartPosition == nil then\n\t\treturn proposedMotion\n\tend\n\tlocal snapIncrement = SNAP_INCREMENT // 1\n\tif snapIncrement < 1 then\n\t\treturn proposedMotion\n\tend\n\tlocal newWorldPosition = startPartPosition + proposedMotion.Position\n\tlocal roundedX = ((newWorldPosition.X / snapIncrement + 0.5) // 1) * snapIncrement\n\tlocal roundedY = ((newWorldPosition.Y / snapIncrement + 0.5) // 1) * snapIncrement\n\tlocal roundedZ = ((newWorldPosition.Z / snapIncrement + 0.5) // 1) * snapIncrement\n\tlocal newRoundedWorldPosition = Vector3.new(roundedX, roundedY, roundedZ)\n\treturn proposedMotion.Rotation + (newRoundedWorldPosition - startPartPosition)\nend\n\nlocal connection = dragDetector:AddConstraintFunction(2, snapToWorldGrid)\n-- When applicable, remove the constraint function by invoking connection:Disconnect()\n```\n\n----------------------------------------\n\nTITLE: Accessing and Toggling ScreenGui Interfaces in Roblox with Lua\nDESCRIPTION: This Lua snippet demonstrates how to access a player’s UI containers, specifically different ScreenGui interfaces (such as title screens or settings menus), and change their visibility by toggling the Enabled property. It should be placed inside a LocalScript that runs on the client. The script retrieves the player's PlayerGui via Players.LocalPlayer, then safely waits for the desired ScreenGui children and sets their Enabled properties to show or hide them. Key prerequisites include the existence of appropriately named ScreenGui children under StarterGui and that the code is executed in a client context. Inputs are the names of the UI elements, outputs are their updated visibility on the user’s screen; it operates at runtime and does not persist between sessions.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/ui/on-screen-containers.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nlocal player = Players.LocalPlayer\nlocal playerGui = player.PlayerGui\n\nlocal titleScreen = playerGui:WaitForChild(\"TitleScreen\")\nlocal settingsMenu = playerGui:WaitForChild(\"SettingsMenu\")\n\ntitleScreen.Enabled = false  -- Hide title screen\nsettingsMenu.Enabled = true  -- Show settings menu\n\n```\n\n----------------------------------------\n\nTITLE: Applying HumanoidDescription to a specific Humanoid character\nDESCRIPTION: This Lua script adds a new torso and face accessory to a specific player's Humanoid. It retrieves the Humanoid object from the player's character, clones and modifies the description, then applies it back. Requires the player's Character and Humanoid.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/characters/appearance.md#_snippet_6\n\nLANGUAGE: Lua\nCODE:\n```\nlocal humanoid = player.Character and player.Character:FindFirstChildWhichIsA(\"Humanoid\")\nif humanoid then\n\tlocal descriptionClone = humanoid:GetAppliedDescription()\n\tdescriptionClone.Torso = 86500008\n\t-- Multiple face accessory assets are allowed in a comma-separated string\n\tdescriptionClone.FaceAccessory = descriptionClone.FaceAccessory .. \",2535420239\"\n\t-- Apply modified \"descriptionClone\" to humanoid\n\thumanoid:ApplyDescription(descriptionClone)\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Translators with Roblox LocalizationService in Lua\nDESCRIPTION: This snippet demonstrates how to asynchronously load two translators using Roblox's LocalizationService: one using a manual country code ('pt' for Portuguese) and one based on the player's current locale settings. It uses pcall to handle possible errors when obtaining translators. The code then translates the key 'jewels' using both translators and prints the resulting localized strings. Dependencies include Roblox services ReplicatedStorage, LocalizationService, and Players; inputs include the manual language code and player object; outputs are localized strings printed to the console. It assumes the key 'jewels' exists in the translation tables.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/production/localization/localize-with-scripting.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal LocalizationService = game:GetService(\"LocalizationService\")\nlocal Players = game:GetService(\"Players\")\n\n-- Local variables\nlocal player = Players.LocalPlayer\n\n-- Load Translator for \"pt\". Wrap translator functions within a pcall() to protect against failures.\nlocal res1, translator = pcall(function()\n\treturn LocalizationService:GetTranslatorForLocaleAsync(\"pt\")\nend)\n\n-- Load second Translator with Player's locale, in this example \"es\"\nlocal res2, fallbackTranslator = pcall(function()\n\treturn LocalizationService:GetTranslatorForPlayerAsync(player)\nend)\n\n-- Use Translate function with first Translator\nif res1 then\n\tlocal translate1 = translator:Translate(game, \"jewels\")\n\tprint(translate1) -- Expected Output in pt: joyas\nelse\n\tprint('GetTranslatorForPlayerAsync failed: ' .. translator)\nend\n\n-- Use Translate function with second Translator\nif res2 then\n\tlocal translate2 = fallbackTranslator:Translate(game, \"jewels\")\n\tprint(translate2) -- Expected Output in if user is set to 'es': jóias\nelse\n\tprint('GetTranslatorForPlayerAsync failed: ' .. fallbackTranslator)\nend\n```\n\n----------------------------------------\n\nTITLE: Performing IntersectAsync() on BaseParts in Roblox Lua\nDESCRIPTION: This snippet demonstrates how to intersect a primary part with multiple other parts using the IntersectAsync() method in Roblox Lua. It covers error handling with pcall, positioning the resulting intersected part at the original location, and cleaning up original parts post-operation. Dependencies include Roblox's 'game:GetService', and key parameters are the main part and an array of parts to intersect with. The expected output is a new intersected part parented to the workspace at the original position.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/parts/solid-modeling.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal mainPart = Workspace.Part1\nlocal otherParts = {Workspace.Part2, Workspace.Part3}\n\n-- Perform intersect operation\nlocal success, newIntersect = pcall(function()\n\treturn mainPart:IntersectAsync(otherParts)\nend)\n\n-- If operation succeeds, position it at the same location and parent it to the workspace\nif success and newIntersect then\n\tnewIntersect.Position = mainPart.Position\n\tnewIntersect.Parent = Workspace\nend\n\n-- Destroy original parts which remain intact after operation\nmainPart:Destroy()\nfor _, part in otherParts do\n\tpart:Destroy()\nend\n```\n\n----------------------------------------\n\nTITLE: Introducing Debounce Variable to Prevent Multiple Trigger Executions in Lua\nDESCRIPTION: The snippet introduces a boolean debounce variable 'isTouched' initialized to false to prevent the fade function from running multiple times due to repeated Touched events from various player body parts. This ensures the fade sequence runs only once per touch event until it completes, avoiding unintended resets and glitches.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/scripting/basic-scripting/fading-trap.md#_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\nlocal platform = script.Parent\n\nlocal isTouched = false\n\nlocal function fade()\n\tfor count = 1, 10 do\n\t\tplatform.Transparency = count / 10\n\t\ttask.wait(0.1)\n\tend\n\tplatform.CanCollide = false\n\ttask.wait(3)\n\tplatform.CanCollide = true\n\tplatform.Transparency = 0\nend\n\nplatform.Touched:Connect(fade)\n```\n\n----------------------------------------\n\nTITLE: Teleporting to Reserved Servers in Roblox\nDESCRIPTION: Shows how to use TeleportOptions to direct players to a specific reserved server by setting the ReservedServerAccessCode property. This allows teleporting players to a private instance.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/projects/teleport.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal teleportOptions = Instance.new(\"TeleportOptions\")\nteleportOptions.ReservedServerAccessCode = reservedServerCode\n```\n\n----------------------------------------\n\nTITLE: Prompting multi-friend invite after checking send capability in Roblox Lua\nDESCRIPTION: This snippet defines a function to asynchronously check if the player can send game invites using SocialService:CanSendGameInviteAsync wrapped in a protected call to manage potential network failures. If the player is permitted, it triggers the invite prompt for multiple friends by calling SocialService:PromptGameInvite with the player as argument. This approach ensures robust handling of permission and network status before showing the invite UI.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/production/promotion/invite-prompts.md#_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\nlocal SocialService = game:GetService(\"SocialService\")\nlocal Players = game:GetService(\"Players\")\n\nlocal player = Players.LocalPlayer\n\n-- Function to check whether the player can send an invite\nlocal function canSendGameInvite(sendingPlayer)\n\tlocal success, canSend = pcall(function()\n\t\treturn SocialService:CanSendGameInviteAsync(sendingPlayer)\n\tend)\n\treturn success and canSend\nend\n\nlocal canInvite = canSendGameInvite(player)\nif canInvite then\n\tSocialService:PromptGameInvite(player)\nend\n```\n\n----------------------------------------\n\nTITLE: Enabling Rich Text - Lua\nDESCRIPTION: This code snippet demonstrates how to enable rich text on a `TextLabel` object using Lua. It creates a new `TextLabel` instance, sets the `RichText` property to `true`, and sets the `Text` property to a string containing rich text markup.  The snippet is crucial for enabling the formatting capabilities described in the document.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/ui/rich-text.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal title = Instance.new(\"TextLabel\")\ntitle.RichText = true\n\ntitle.Text = \"Use a <b>bold title</b>\"\n```\n\n----------------------------------------\n\nTITLE: Creating an Action Handler Function in Roblox Lua\nDESCRIPTION: This snippet defines the skeleton for a custom action handler function named 'onAction', which is intended to process player input events. It takes three arguments: 'actionName', 'inputState', and 'inputObject'. The setup provides the structure needed for Roblox's ContextActionService bindings, but does not yet implement any functionality. Primarily used as a callback placeholder, it requires proper script context (ToolController LocalScript).\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/input-and-camera/detect-user-input.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal tool = script.Parent\n\nlocal RELOAD_ACTION = \"reloadWeapon\"\n\nlocal function onAction(actionName, inputState, inputObject)\n\nend\n\nlocal function toolEquipped()\n\ttool.Handle.Equip:Play()\nend\n```\n\n----------------------------------------\n\nTITLE: Handling Player Tag Out Logic and UI Indicator in Roblox (Lua)\nDESCRIPTION: This script handles logic when a player is tagged out, updating the player's state attribute to 'TaggedOut' unless in the lobby. It clones and attaches a Tagged Out indicator UI to the player's character Head and ensures the character remains upright by adding an AlignOrientation object. Dependencies include ReplicatedStorage.PlayerState, ReplicatedStorage.PlayerAttribute, and access to TaggedOutIndicatorGuiPrefab. Input parameters are a Player and Humanoid; this script modifies the state and appearance of the given player character.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/user-interface-design/implement-designs-in-studio.md#_snippet_27\n\nLANGUAGE: Lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal PlayerState = require(ReplicatedStorage.PlayerState)\nlocal PlayerAttribute = require(ReplicatedStorage.PlayerAttribute)\nlocal taggedOutIndicatorGuiPrefab = ReplicatedStorage.Instances.Guis.TaggedOutIndicatorGuiPrefab\n\nlocal function onHumanoidDied(player: Player, humanoid: Humanoid)\n\t-- Update player state to be tagged out except when they're in the lobby,\n\t-- which happens when they're tagged out right as the round ends\n\tif player:GetAttribute(PlayerAttribute.playerState) ~= PlayerState.InLobby then\n\t\tplayer:SetAttribute(PlayerAttribute.playerState, PlayerState.TaggedOut)\n\tend\n\n\t-- Add Tagged Out indicator to character\n\tlocal newIndicator = taggedOutIndicatorGuiPrefab:Clone()\n\tlocal character = humanoid.Parent\n\tnewIndicator.Parent = character:FindFirstChild(\"Head\")\n\n\t-- Add an AlignOrientation to the character to prevent it from falling over\n\tlocal alignOrientation = Instance.new(\"AlignOrientation\")\n\talignOrientation.RigidityEnabled = true\n\talignOrientation.Mode = Enum.OrientationAlignmentMode.OneAttachment\n\talignOrientation.Attachment0 = humanoid.RootPart.RootAttachment\n\talignOrientation.CFrame = humanoid.RootPart.CFrame\n\talignOrientation.Parent = humanoid.RootPart\nend\n\nreturn onHumanoidDied\n```\n\n----------------------------------------\n\nTITLE: Lua String Character Classes and Modifiers for Pattern Matching\nDESCRIPTION: Demonstrates the use of character classes like \"%d\" to match digits, and modifiers such as '+', '-', '*', '?', and '%n' for controlling match quantities and capturing specific substrings. Dependencies include Lua's string library; inputs are strings with embedded patterns, and outputs are matched characters or substrings. It helps extract and manipulate parts of strings based on character types and repetitions.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/strings.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nlocal match = string.match(\"The Cloud Kingdom has 25 power gems\", \"%d\")  -- Finds first digit\nprint(match)  --> 2\n```\n\nLANGUAGE: Lua\nCODE:\n```\nlocal match1 = string.match(\"The Cloud Kingdom has 25 power gems\", \"%d+\")  -- Finds sequence of digits\nprint(match1)  --> 25\n```\n\n----------------------------------------\n\nTITLE: Creating Dictionaries with Key-Value Pairs in Luau - Lua\nDESCRIPTION: Describes creating a dictionary using a table with named keys assigned to different data types (string, boolean). Shows dictionary construction syntax using key = value pairs separated by commas. Requires no dependencies beyond Luau syntax. Input is static declaration; output is a dictionary reference.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/tables.md#_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nlocal testDictionary = {\n\tfruitName = \"Lemon\",\n\tfruitColor = \"Yellow\",\n\tsour = true\n}\n```\n\n----------------------------------------\n\nTITLE: Restoring Data from a Previous Version in Roblox Data Store\nDESCRIPTION: This Lua example demonstrates how to revert data to a previous version by finding the closest version to a specific timestamp, retrieving it, and then setting it as the current value. It includes error handling with pcall and preserves metadata during restoration.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud-services/data-stores/versioning-listing-and-caching.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal DataStoreService = game:GetService(\"DataStoreService\")\n\nlocal experienceStore = DataStoreService:GetDataStore(\"PlayerExperience\")\n\nlocal DATA_STORE_KEY = \"User_1234\"\n\nlocal maxDate = DateTime.fromUniversalTime(2020, 10, 09, 01, 42)\n\n-- Gets the version closest to the given time\nlocal listSuccess, pages = pcall(function()\n    return experienceStore:ListVersionsAsync(DATA_STORE_KEY, Enum.SortDirection.Descending, nil, maxDate.UnixTimestampMillis)\nend)\nif listSuccess then\n    local items = pages:GetCurrentPage()\n    if #items > 0 then\n        -- Reads the closest version\n        local closestEntry = items[1]\n        local success, value, info = pcall(function()\n            return experienceStore:GetVersionAsync(DATA_STORE_KEY, closestEntry.Version)\n        end)\n        -- Restores current value by overwriting it with the closest version\n        if success then\n            local setOptions = Instance.new(\"DataStoreSetOptions\")\n            setOptions:SetMetadata(info:GetMetadata())\n            experienceStore:SetAsync(DATA_STORE_KEY, value, nil, setOptions)\n        end\n    else\n        -- No entries found\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Preventing Multiple Referrals - Roblox Lua\nDESCRIPTION: This snippet demonstrates a basic technique to prevent the same player from being rewarded multiple times as an invitee in a referral system. It uses a simple Lua table, `referredPlayers`, to keep track of UserIds that have already received an invitee reward. The logic shows how to check this table within the `PlayerAdded` handler and mark the player as processed before calling the reward functions, ensuring they are only rewarded on their first referred join.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/production/promotion/referral-system.md#_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\n-- Table to track players who have already been referred\nlocal referredPlayers = {}\n\nfunction onPlayerAdded(player)\n    local joinData = player:GetJoinData()\n    local referredByPlayerId = joinData.ReferredByPlayerId\n\n    -- Check if the player was invited and has not already used a referral\n    if referredByPlayerId and referredByPlayerId ~= 0 and not referredPlayers[player.UserId] then\n        -- Mark the player as referred\n        referredPlayers[player.UserId] = true\n\n        -- Reward inviter and invitee\n        rewardReferrer(referredByPlayerId)\n        rewardInvitee(player)\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Receiving Table with Lost Metatable Information via RemoteEvent - Lua\nDESCRIPTION: Shows that tables with metatables lose metatable information when sent through RemoteEvent. The server's event handler receives a table with properties but without metatable properties (like NumWheels) present. Connected to OnServerEvent, the function prints just the table contents received. Requires RemoteEvent in ReplicatedStorage.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/scripting/events/remote.md#_snippet_16\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal remoteEvent = ReplicatedStorage:FindFirstChildOfClass(\"RemoteEvent\")\n\nlocal function onEvent(player, param)\n\tprint(param)  --> {\"Name\" = \"MyTruck\"}\nend\n\n-- Connect function to event\nremoteEvent.OnServerEvent:Connect(onEvent)\n```\n\n----------------------------------------\n\nTITLE: Accessing Player's Leaderboard Data in Roblox Luau\nDESCRIPTION: Enhances the givePoints function to access the player's current color and leaderboard data to prepare for modifying their point count.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-3/give-points.md#_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nlocal function givePoints(player)\n\tlocal currentColor = pointPart.Color\n\n\tlocal playerStats = player:WaitForChild(\"leaderstats\")\n\tlocal playerPoints = playerStats:WaitForChild(\"Points\")\nend\n```\n\n----------------------------------------\n\nTITLE: Connecting BasePart Touched Event (Lua)\nDESCRIPTION: Demonstrates how to connect a Lua function to a Roblox BasePart's Touched event. The connected function is executed whenever the part physically collides with another BasePart or Terrain voxel, receiving the 'otherPart' as an argument. It uses GetService to access the Workspace and connects the function via the Connect method.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/workspace/collisions.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal part = Workspace.Part\n\nlocal function onTouched(otherPart)\n\tprint(part.Name .. \" collided with \" .. otherPart.Name)\nend\n\npart.Touched:Connect(onTouched)\n```\n\n----------------------------------------\n\nTITLE: Scheduling events with Event Sequencer\nDESCRIPTION: This code demonstrates how to schedule events to occur at specific times using the Event Sequencer. A temporary heartbeat connection is created and the framework informed to cleanup correctly.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/event-sequencer.md#_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nSchema.OnRun = function()\n\tprint(\"OnRun (Client)\")\n\n\tSchema:schedule({\n\t\tStartTimes = {5, 27.25},\n\t\tOnStart = function(self)\n\t\t\t-- Initialize temporary heartbeat connection\n\t\t\tlocal tempConnection = RunService.Heartbeat:Connect(function()\n\n\t\t\tend)\n\t\t\t-- Inform framework of connection\n\t\t\tSchema:inform(tempConnection)\n\t\tend\n\t})\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Gradual Transparency Fade Using For Loop in Lua\nDESCRIPTION: This code demonstrates using a for loop in Lua to gradually increase the platform's Transparency property over 10 iterations. Each iteration increments transparency by 0.1 and pauses for 0.1 seconds using task.wait, creating a smooth fading effect over one second when the platform is touched.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/scripting/basic-scripting/fading-trap.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nlocal platform = script.Parent\n\nlocal function fade()\n\tfor count = 1, 10 do\n\t\tplatform.Transparency = count / 10\n\t\ttask.wait(0.1)\n\tend\nend\n\nplatform.Touched:Connect(fade)\n```\n\n----------------------------------------\n\nTITLE: Validating Spawn Locations for Restricted Areas in Roblox Lua\nDESCRIPTION: This Lua script defines and registers a validator function for the SpawnWithFriends module. The function checks if a proposed teleportation point falls within any BasePart tagged with 'RestrictedSpawnArea'. It iterates through all tagged parts, calculates the relative position of the teleport point within the part's object space, and checks if it's within the X and Z bounds. If the point is inside any restricted area, it returns false to prevent teleportation; otherwise, it returns true.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/spawn-with-friends.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal CollectionService = game:GetService(\"CollectionService\")\n\nlocal SpawnWithFriends = require(ReplicatedStorage:WaitForChild(\"SpawnWithFriends\"))\n\nlocal function validator(playerToTeleport, destinationPlayer, teleportationPoint)\n\t-- Iterate through all tagged parts\n\tfor _, area in CollectionService:GetTagged(\"RestrictedSpawnArea\") do\n\t\tlocal relativePosition = area.CFrame:PointToObjectSpace(teleportationPoint.Position)\n\t\tlocal size = area.Size\n\t\tlocal inXBounds = relativePosition.X < size.X / 2 and relativePosition.X > -size.X / 2\n\t\tlocal inZBounds = relativePosition.Z < size.Z / 2 and relativePosition.Z > -size.Z / 2\n\t\tif inXBounds and inZBounds then\n\t\t\treturn false  -- Spawn destination is within restricted area; abort teleportation\n\t\tend\n\tend\n\treturn true  -- Spawn destination doesn't overlap any restricted area; proceed with teleportation\nend\n\nSpawnWithFriends.setTeleportationValidator(validator)\n```\n\n----------------------------------------\n\nTITLE: Generating Blast Data Payload for Blaster Action in Roblox (Lua)\nDESCRIPTION: This function creates and returns a BlastData table for a blaster shot, collecting the shooter (player), the origin (camera CFrame), and the results of raycasts (laser hits). Dependencies include getBlasterConfig, getDirectionsForBlast, castLaserRay, localPlayer, currentCamera, and typing for BlastData.Type. Key parameters: retrieves the current blaster configuration, computes beam directions, and calculates hits. The output is an assembled table with all blast event data. Ensure the required helper functions and data types are present in the environment.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/gameplay-scripting/implement-blasters.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal function generateBlastData(): BlastData.Type\n    local blasterConfig = getBlasterConfig()\n\n    local rayDirections = getDirectionsForBlast(\n        currentCamera.CFrame, blasterConfig)\n    local rayResults = castLaserRay(\n        localPlayer, currentCamera.CFrame.Position, rayDirections)\n\n    local blastData: BlastData.Type = {\n        player = localPlayer,\n        originCFrame = currentCamera.CFrame,\n        rayResults = rayResults,\n    }\n    return blastData\nend\n```\n\n----------------------------------------\n\nTITLE: Complete Deadly Lava Script in Luau\nDESCRIPTION: This is the final, complete script for the LavaFloor part. It gets a reference to the part, defines a function 'kill' that takes the touching part as input, finds the character and Humanoid, checks if a Humanoid exists, and sets its health to 0 if found. The script connects this 'kill' function to the 'Touched' event of the lava part.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/scripting/basic-scripting/deadly-lava.md#_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlocal lava = script.Parent\n\nlocal function kill(otherPart)\n    local partParent = otherPart.Parent\n    local humanoid = partParent:FindFirstChild(\"Humanoid\")\n    if humanoid then\n        humanoid.Health = 0\n    end\nend\n\nlava.Touched:Connect(kill)\n```\n\n----------------------------------------\n\nTITLE: Firing RemoteEvent from Client in Lua\nDESCRIPTION: This client-side Lua `LocalScript` retrieves a `RemoteEvent` instance from `ReplicatedStorage`. It then calls the `FireServer()` method on the `RemoteEvent`, sending a red `Color3` value and a specific `Vector3` position to the server, triggering the connected `OnServerEvent` handler.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/scripting/events/remote.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\n-- Get reference to remote event instance\nlocal remoteEvent = ReplicatedStorage:FindFirstChildOfClass(\"RemoteEvent\")\n\n-- Fire the remote event and pass additional arguments\nremoteEvent:FireServer(Color3.fromRGB(255, 0, 0), Vector3.new(0, 25, -20))\n```\n\n----------------------------------------\n\nTITLE: GameSettings Script - Defining Match and Game Parameters - Lua\nDESCRIPTION: Establishes a configuration module with constants governing match timing, player requirements, and end states. Designed for use as a dependency by other server scripts to retrieve configuration values. Outputs a dictionary of settings for match flow and win/loss detection.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/battle-royale-series/ending-matches.md#_snippet_14\n\nLANGUAGE: lua\nCODE:\n```\nlocal GameSettings = {}\n\n-- Game Variables\nGameSettings.intermissionDuration = 5\nGameSettings.matchDuration = 10\nGameSettings.minimumPlayers = 2\nGameSettings.transitionTime = 5\n\n-- Possible ways that the game can end.\nGameSettings.endStates = {\n\tTimerUp = \"TimerUp\",\n\tFoundWinner = \"FoundWinner\"\n}\n\nreturn GameSettings\n```\n\n----------------------------------------\n\nTITLE: Defining Game Configuration Variables in GameSettings (Roblox Lua)\nDESCRIPTION: Adds configuration variables to the GameSettings ModuleScript table. These include durations for intermission and matches, minimum players required, and transition time between game phases. These values can be accessed by other scripts requiring this module.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/battle-royale-series/coding-the-game-loop.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal GameSettings = {}\n\n-- Game Variables\nGameSettings.intermissionDuration = 5\nGameSettings.matchDuration = 10\nGameSettings.minimumPlayers = 2\nGameSettings.transitionTime = 5\n\nreturn GameSettings\n```\n\n----------------------------------------\n\nTITLE: Concatenating story string with player input in Lua\nDESCRIPTION: Extends the 'story' variable by concatenating a static string with the player's answer stored in 'name1'. Uses Lua's string concatenation operator '..'. This operation dynamically creates the full story sentence incorporating user input, enabling personalized storytelling within Roblox.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/build-it-play-it-story-games/code-the-story.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\n-- Code story between the dashes\n-- =============================================\nlocal name1 = storyMaker:GetInput(\"What is your favorite name?\")\n\nlocal story = \"In a tree on a hill lives the great wizard \" .. name1\n-- =============================================\n```\n\n----------------------------------------\n\nTITLE: Implementing a Timer Luau\nDESCRIPTION: This code implements a simple timer using a `while true do` loop. The timer only runs if `raceActive` is `true`. Inside the loop, `task.wait(1)` pauses the script for 1 second, `timePassed` is incremented, and the current `timePassed` value is printed to the output.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-3/multiple-conditions.md#_snippet_8\n\nLANGUAGE: Luau\nCODE:\n```\nfinishLine.Touched:Connect(partTouched)\n\nwhile raceActive == true do\n\nend\n```\n\n----------------------------------------\n\nTITLE: Searching a Dictionary with pairs in Luau\nDESCRIPTION: Defines a complete Luau function `findPet` that searches a given dictionary (`whereToSearch`) for a specific value (`searchFor`). It iterates through the dictionary using `pairs` and returns the key (`place`) associated with the first matching value found. If the value is not found, the function implicitly returns nil.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-5/return-values-from-tables.md#_snippet_3\n\nLANGUAGE: Luau\nCODE:\n```\nlocal function findPet(whereToSearch, searchFor)\n\tfor place, value in pairs(whereToSearch) do\n\t\tif value == searchFor then\n\t\t\treturn place\n\t\tend\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Player attribute example\nDESCRIPTION: This Lua code snippet demonstrates how to use DataStoreService to manage player attributes, specifically updating a player's Elo rating after a match. It gets the DataStore, then iterates through the players, calculates updated Elo, and attempts to save it to the DataStore using pcall for error handling.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/matchmaking/attributes-and-signals.md#_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nlocal DataStoreService = game:GetService(\"DataStoreService\")\n\nlocal eloStore = DataStoreService:GetDataStore(\"PlayerElo\")\n\nfunction onMatchEnded(players: {Player}, winners: {Player}, losers: {Player})\n  for _, player in players do\n    local updatedElo = CalculateUpdatedElo(player, winners, losers)\n    local success, errorMessage = pcall(function()\n      eloStore:SetAsync(player.UserId, updatedElo)\n    end)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using Local Variables Within Module Script for Internal Scope in Roblox Lua\nDESCRIPTION: Illustrates maintaining internal state or helper data within a module script using local variables that are inaccessible externally. Local variables can be used for auxiliary data such as rewardCoins and difficultyModifier, which only the module script functions reference internally. Functions exposed on the module table can use these local variables to compute results, enabling encapsulation and controlled access.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-6/intro-to-module-scripts.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal RewardManager = {}\n\n-- Usable only in the module script\nlocal rewardCoins = 50\n\n-- Usable only in the module script\nlocal difficultyModifier = {\n\teasy = 0.5,\n\tnormal = 1,\n\thard = 2\n}\n\n-- Usable in other scripts\nfunction RewardManager.getCoinReward(difficulty)\n\tlocal coins = difficultyModifier[difficulty] * rewardCoins\n\treturn coins\nend\n\nreturn RewardManager\n```\n\n----------------------------------------\n\nTITLE: Referencing a Part in Roblox Workspace\nDESCRIPTION: Shows how to reference a part located in the Workspace. This is the first step needed to access and modify the part's properties through code.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-1/object-properties.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\n-- Changes the color of a part\nworkspace.PracticePart\n```\n\n----------------------------------------\n\nTITLE: Handling item harvest and reset logic in Roblox Lua\nDESCRIPTION: This snippet manages the harvesting process: it increments player items, disables item interaction by setting transparency and collision, waits for a specified duration, then resets item properties to make it available again. It ensures single-item rewards per harvest and handles item visibility during reset.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/adventure-game-series/collect-items.md#_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\nlocal canHarvest = partTouched:FindFirstChild(\"CanHarvest\")\nif canHarvest then\n\tif canHarvest.Value == true and playerItems.Value < playerSpaces.Value then\n\t\tplayerItems.Value += 1\n\t\tcanHarvest.Value = false\n\t\t-- Reset partTouched, the harvested item\n\t\tpartTouched.Transparency = 1\n\t\tpartTouched.CanCollide = false\n\n\t\ttask.wait(5)\n\t\t-- Make the harvested item reappear and usable again\n\t\tcanHarvest.Value = true\n\t\tpartTouched.Transparency = 0\n\t\tpartTouched.CanCollide = true\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: setObjective: Script to Set and Format the Game Objective Text Display in Roblox Lua\nDESCRIPTION: This function updates the HUD's objective display by replacing a placeholder in the text with the team score limit fetched from the TEAM_SCORE_LIMIT module. It ensures players see the current target score or objective at the start of each round.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/user-interface-design/implement-designs-in-studio.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal TEAM_SCORE_LIMIT = require(ReplicatedStorage.TEAM_SCORE_LIMIT)\n\nlocal function setObjective(gui: ScreenGui)\n\tlocal bodyTextLabel = gui.Objective.ObjectiveDisplay.Body.BodyTextLabel\n\tbodyTextLabel.Text = bodyTextLabel.Text:format(TEAM_SCORE_LIMIT)\nend\n\nreturn setObjective\n```\n\n----------------------------------------\n\nTITLE: Using SurfaceAppearance for PBR Textures in Roblox\nDESCRIPTION: Demonstrates how to apply physically-based rendering (PBR) textures to a mesh surface using the SurfaceAppearance class without affecting the mesh geometry.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/parts/meshes.md#_snippet_3\n\nLANGUAGE: Roblox\nCODE:\n```\nClass.SurfaceAppearance\n```\n\n----------------------------------------\n\nTITLE: Spawning Players onto Teams in Map (Lua)\nDESCRIPTION: This Lua function iterates through a provided table of players. For each player, it assigns them to the smallest team (using `getSmallestTeam`), sets their `Neutral` property to false to enforce team-specific spawning, sets a custom `PlayerState` attribute to `SelectingBlaster`, and asynchronously loads their character into the game world.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/gameplay-scripting/spawn-respawn.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal function spawnPlayersInMap(players: { Player })\n\tfor _, player in players do\n\t\tplayer.Team = getSmallestTeam()\n\t\tplayer.Neutral = false\n\t\tplayer:SetAttribute(PlayerAttribute.playerState, PlayerState.SelectingBlaster)\n\t\ttask.spawn(function()\n\t\t\tplayer:LoadCharacter()\n\t\tend)\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Connecting and Disconnecting a Function from Part.Touched Event in Roblox with Luau\nDESCRIPTION: This snippet demonstrates how to programmatically connect and later disconnect an event handler from a part's Touched event using a connection object. It utilizes Workspace service to access target parts, and tracks the connection in a variable so it can be disconnected when a specified part is touched. Dependencies: access to Workspace and valid parts named Part and TargetPart. Key parameters: otherPart argument from event, connection object for disconnecting. Input: part touches. Output: prints message and disconnects when condition met. Assumes named parts exist in Workspace.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/scripting/events/index.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal part = Workspace.Part\nlocal targetPart = Workspace.TargetPart\n\n-- Declare an empty placeholder variable for the connection\nlocal connection\n\nlocal function onPartTouched(otherPart)\n\tif otherPart == targetPart then\n\t\tprint(\"The part hit the target!\")\n\t\t-- Disconnect the connection\n\t\tconnection:Disconnect()\n\tend\nend\n\n-- Connect the above function to the Touched event\nconnection = part.Touched:Connect(onPartTouched)\n```\n\n----------------------------------------\n\nTITLE: Completed DisplayManager Module Script (Lua)\nDESCRIPTION: The final `DisplayManager` module script. It manages display values (`Status`, `PlayersLeft`, `TimeLeft`) in `ReplicatedStorage`, provides a function `updateStatus` for direct updates, and automatically updates the combined status string when `PlayersLeft` or `TimeLeft` changes via the `updateRoundStatus` function connected to their `Changed` events.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/battle-royale-series/creating-a-gui.md#_snippet_12\n\nLANGUAGE: lua\nCODE:\n```\nlocal DisplayManager = {}\n\n-- Services\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\n-- Display Values used to update Player GUI\nlocal displayValues = ReplicatedStorage:WaitForChild(\"DisplayValues\")\nlocal status = displayValues:WaitForChild(\"Status\")\nlocal playersLeft = displayValues:WaitForChild(\"PlayersLeft\")\nlocal timeLeft = displayValues:WaitForChild(\"TimeLeft\")\n\n-- Local Functions\nlocal function updateRoundStatus()\n\tstatus.Value = \"Players Left: \" .. playersLeft.Value .. \" / Time Left: \" .. timeLeft.Value\nend\n\n-- Module Functions\nfunction DisplayManager.updateStatus(newStatus)\n\tstatus.Value = newStatus\nend\n\nplayersLeft.Changed:Connect(updateRoundStatus)\ntimeLeft.Changed:Connect(updateRoundStatus)\n\nreturn DisplayManager\n```\n\n----------------------------------------\n\nTITLE: Playing a Sound on Touch (Lua)\nDESCRIPTION: This Lua code snippet plays a feedback sound when a player touches a collectable object.  It checks if the touching part's parent has a Humanoid, ensuring it's a player. It depends on the existence of the `feedbackSound` variable, presumably obtained from SoundService. The `CanCollide` property check prevents the sound from triggering multiple times if the player remains in contact with the object.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/audio/in-game-sounds.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal function partTouched(otherPart, objectPart)\n\tlocal whichCharacter = otherPart.Parent\n\tlocal humanoid = whichCharacter:FindFirstChildWhichIsA(\"Humanoid\")\n\n\t-- Play the sound, once finished, destroy the object\n\tif humanoid and objectPart.CanCollide == true then\n\t\tfeedbackSound:Play()\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Updating Data in MemoryStore Hash Map Concurrently (Lua)\nDESCRIPTION: Safely updates the value of a key by fetching its latest state, applying a callback function, and setting the new value, suitable for concurrent updates. `UpdateAsync()` ensures that the update is based on the most recent data, handling contention by retrying if necessary. The example updates a resource count with a maximum limit.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud-services/memory-stores/hash-map.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal MemoryStoreService = game:GetService(\"MemoryStoreService\")\n\nlocal hashMap = MemoryStoreService:GetHashMap(\"ResourceInventory\")\n\nlocal function contributeResources(itemResource, addedCount)\n\tlocal success, newResourceCount = pcall(function()\n\t\treturn hashMap:UpdateAsync(itemResource, function(resource)\n\t\t\tresource = resource or {count = 0}\n\t\t\tresource.count = resource.count + addedCount\n\n\t\t\t-- ensure we don't exceed the maximum resource count\n\t\t\tif resource.count > 500 then\n\t\t\t\tresource.count = 500\n\t\t\tend\n\t\t\treturn resource\n\t\tend, 1200)\n\tend)\n\tif success then\n\t\tprint(newResourceCount)\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Creating a Menu Dictionary in Lua\nDESCRIPTION: Creates a dictionary for a restaurant menu where keys are ingredient names and values are boolean flags indicating whether the ingredient is selected.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-5/pairs-and-ipairs.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal menu = {\n\tcabbage = false,\n\tbeef = false,\n\ttomato = false,\n\tnoodles = false,\n}\n```\n\n----------------------------------------\n\nTITLE: Tracking Onboarding Steps in Plant\nDESCRIPTION: This Lua code snippet demonstrates how to log individual onboarding steps in a Roblox experience using the AnalyticsService. It records the player's progress through different onboarding stages, facilitating analysis of user retention and dropout points during the onboarding process.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/production/analytics/funnel-events.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal AnalyticsService = game:GetService(\"AnalyticsService\")\n\n-- Log the first step of the FTUE\nAnalyticsService:LogOnboardingFunnelStepEvent(\n    player,\n    1, -- Step number\n    \"In Farm\" -- Step name\n)\n\n-- Log the second step\nAnalyticsService:LogOnboardingFunnelStepEvent(\n    player,\n    2, -- Step number\n    \"Plant Seed\" -- Step name\n)\n```\n\n----------------------------------------\n\nTITLE: Getting Object Reference in Roblox Lua\nDESCRIPTION: This snippet retrieves an object using the script's parent. It assumes the script is a child of the target object within the Roblox Explorer.  The object reference is stored in the `sign` variable for later use.  Dependency: Roblox Engine.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/scripting/attributes.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal sign = script.Parent\n```\n\n----------------------------------------\n\nTITLE: Initializing Roblox Platform and Touch Event Connection in Lua\nDESCRIPTION: This snippet sets up the basic Lua variables and event connection for a Roblox part that will act as a fading platform. It defines a 'platform' variable referencing the script's parent part and connects a placeholder 'fade' function to the part's Touched event, preparing for further implementation of fading logic.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/scripting/basic-scripting/fading-trap.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal platform = script.Parent\n\nlocal function fade()\n\nend\n\nplatform.Touched:Connect(fade)\n```\n\n----------------------------------------\n\nTITLE: Creating and Playing Background Music in Roblox with Lua\nDESCRIPTION: This code snippet demonstrates how to reference SoundService, access a background music Sound object, and play it. The script is designed to be placed in StarterPlayerScripts to automatically play background music for all players when they join the game.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/audio/play-background-music.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal SoundService = game:GetService(\"SoundService\")\nlocal backgroundMusic = SoundService.BackgroundMusic\n\nbackgroundMusic:Play()\n```\n\n----------------------------------------\n\nTITLE: Calculating Numerical Signal (Constant Value) in Lua\nDESCRIPTION: This snippet calculates a score based on the difference between a sum of player attributes plus the joining player's attribute and a constant value. The purpose is to evaluate how close the combined attribute values are to a predefined constant.  The score is capped based on a maximum relevant difference.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/matchmaking/attributes-and-signals.md#_snippet_13\n\nLANGUAGE: lua\nCODE:\n```\nlocal diff = math.abs(server_sum_{attribute_name} + joining_player_{attribute_name} - constant_value)\nlocal score = 1 - math.min(diff / max_relevant_difference, 1)\nreturn score\n```\n\n----------------------------------------\n\nTITLE: Subscribing to catalogViewOpened Event with Lua in Roblox\nDESCRIPTION: Attaches a function to MerchBooth.catalogViewOpened, which fires specifically when the catalog view is opened. The MerchBooth module is loaded from ReplicatedStorage. The event handler logs that the catalog view is open, enabling targeted reactions to catalog UI activation.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/merch-booth.md#_snippet_35\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal MerchBooth = require(ReplicatedStorage:WaitForChild(\"MerchBooth\"))\n\nMerchBooth.catalogViewOpened:Connect(function()\n\tprint(\"Catalog view opened\")\nend)\n```\n\n----------------------------------------\n\nTITLE: Raycast Hit Detection in Roblox Lua\nDESCRIPTION: This code snippet shows how to check if a raycast hit something and then access the properties of the `RaycastResult`.  It prints the instance, position, distance, material, and normal of the hit object. If no hit is detected, it prints a warning.  The `highlight` attribute points out the hit detection and result processing.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/workspace/raycasting.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal rayOrigin = Vector3.zero\nlocal rayDirection = Vector3.new(0, -100, 0)\n\nlocal raycastResult = Workspace:Raycast(rayOrigin, rayDirection)\n\nif raycastResult then\n\tprint(\"Instance:\", raycastResult.Instance)\n\tprint(\"Position:\", raycastResult.Position)\n\tprint(\"Distance:\", raycastResult.Distance)\n\tprint(\"Material:\", raycastResult.Material)\n\tprint(\"Normal:\", raycastResult.Normal)\nelse\n\twarn(\"No raycast result!\")\nend\n```\n\n----------------------------------------\n\nTITLE: Awarding Points Based on 'IsAlive' Status in Roblox Lua\nDESCRIPTION: Implements the main game loop using `while true` and `task.wait(1)`. This loop iterates through all connected players fetched via `Players:GetPlayers()`. For each player, it checks the value of their \"IsAlive\" attribute using `GetAttribute`. If the attribute is `true`, it increments the player's 'Points' value by 1. Requires the `Players` service and players to have 'leaderstats' and the \"IsAlive\" attribute.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/scripting/basic-scripting/score-points.md#_snippet_12\n\nLANGUAGE: lua\nCODE:\n```\nwhile true do\n  task.wait(1)\n  local playerList = Players:GetPlayers()\n\n  for currentPlayer = 1, #playerList do\n    local player = playerList[currentPlayer]\n\n    if player:GetAttribute(\"IsAlive\") then\n      local points = player.leaderstats.Points\n      points.Value += 1\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Referencing Objects as Dictionary Keys - Lua\nDESCRIPTION: Displays using object instances as keys in a Luau dictionary, associating Booleans with workspace parts. Lua handles objects and allows their use as keys. The code distinguishes unique instances (greenPart, redPart) as keys. The code expects parts to exist in the workspace.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-5/intro-to-dictionaries.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal greenPart = workspace.GreenPart\nlocal redPart = workspace.RedPart\n\nlocal partList = {\n\t[greenPart] = true,\n\t[redPart] = false,\n}\nprint(partList[redPart])\n```\n\n----------------------------------------\n\nTITLE: Applying Avatar Head Shot Thumbnail in Roblox Lua\nDESCRIPTION: This code snippet demonstrates how to fetch a user's avatar headshot thumbnail asynchronously and apply it to an ImageLabel UI element in Roblox. It also adds a rounded crop using UICorner. Dependencies include Roblox's Players service, and the script is intended to run locally on the client side. Inputs are the user's UserId, and the output is the display of the avatar thumbnail with a circular mask.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/projects/assets/index.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nlocal player = Players.LocalPlayer\nlocal playerGui = player.PlayerGui\nlocal screenGui = Instance.new(\"ScreenGui\")\nscreenGui.Parent = playerGui\n\nlocal imageLabel = Instance.new(\"ImageLabel\")\nimageLabel.AnchorPoint = Vector2.new(0, 0)\nimageLabel.Size = UDim2.new(0, 150, 0, 150)\nimageLabel.Position = UDim2.new(0, 16, 0, 16)\nimageLabel.BorderSizePixel = 0\nimageLabel.BackgroundColor3 = Color3.new(0, 0, 0)\nimageLabel.BackgroundTransparency = 0.8\nimageLabel.Parent = screenGui\n\nlocal success, content, isReady = pcall(function()\n\treturn Players:GetUserThumbnailAsync(player.UserId, Enum.ThumbnailType.HeadShot, Enum.ThumbnailSize.Size352x352)\nend)\nif success then\n\t-- Apply thumbnail content to image label\n\timageLabel.Image = content\n\t-- Crop thumbnail to circle\n\tlocal corner = Instance.new(\"UICorner\")\n\tcorner.CornerRadius = UDim.new(1, 0)\n\tcorner.Parent = imageLabel\nend\n```\n\n----------------------------------------\n\nTITLE: Removing an array element by index with table.remove in Luau\nDESCRIPTION: This snippet shows how to remove a specific item from an array by passing its index to table.remove. It demonstrates index shifting after removal, highlighting that indices are reindexed downward.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-5/make-changes-to-arrays.md#_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nplayerItems = {}\n\ntable.insert(playerItems, \"Potion\")\ntable.insert(playerItems, \"Bread\")\ntable.insert(playerItems, \"Sleeping bag\")\n\ntable.remove(playerItems, 1)\n\n```\n\n----------------------------------------\n\nTITLE: Translating Strings with Context Overrides using LocalizationService in Lua\nDESCRIPTION: This code demonstrates using a context override via the Translator:Translate method in Lua to fetch context-sensitive translations. The context object Workspace.WindowScreen.SurfaceGui.TextLabel is supplied to distinguish between multiple meanings of the source string ('Screen'), ensuring the correct translation ('Mosquitero') is returned. All dependencies (LocalizationService, workspace context, translation table with proper context keys) must be configured. Use pcall to wrap asynchronous translator retrieval for better error handling.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/production/localization/localize-with-scripting.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal LocalizationService = game:GetService(\"LocalizationService\")\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Load Translator for \"es\". Wrap the function within a pcall() to protect against failures.\nlocal res, translator = pcall(function()\n\treturn LocalizationService:GetTranslatorForLocaleAsync(\"es\")\nend)\n\nif res then\n\t-- use Translate function, providing object context and string\n\tlocal sourceTranslation = translator:Translate(Workspace.WindowScreen.SurfaceGui.TextLabel, \"Screen\")\n\tprint(sourceTranslation) -- Expected Output: Mosquitero\nelse\n\tprint('GetTranslatorForPlayerAsync failed: ' .. translator)\nend\n```\n\n----------------------------------------\n\nTITLE: Assign Pass Privileges on Player Join\nDESCRIPTION: This code snippet assigns pass privileges to a user when they join the experience. It uses `Players.PlayerAdded:Connect()` to check if the player owns the pass via `MarketplaceService:UserOwnsGamePassAsync()` and then grants the appropriate privileges if they do.  This function needs to be placed inside `ServerScriptService`.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/production/monetization/game-passes.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal MarketplaceService = game:GetService(\"MarketplaceService\")\nlocal Players = game:GetService(\"Players\")\n\n-- Replace the placeholder ID with your pass ID\nlocal passID = 0000000\n\nlocal function onPlayerAdded(player)\n\tlocal hasPass = false\n\n\t-- Check if user already owns the pass\n\tlocal success, message = pcall(function()\n\t\thasPass = MarketplaceService:UserOwnsGamePassAsync(player.UserId, passID)\n\tend)\n\n\tif not success then\n\t\t-- Issue a warning and exit the function\n\t\twarn(\"Error while checking if player has pass: \" .. tostring(message))\n\t\treturn\n\tend\n\n\tif hasPass then\n\t\t-- Assign user the ability or bonus related to the pass\n\t\tprint(player.Name .. \" owns the Pass with ID \" .. passID)\n\tend\nend\n\n-- Connect PlayerAdded events to the function\nPlayers.PlayerAdded:Connect(onPlayerAdded)\n```\n\n----------------------------------------\n\nTITLE: GameManager Script - Roblox\nDESCRIPTION: This Lua script represents the core logic of the game, managing the main loop, player counts, and calling functions from other modules such as MatchManager.  It requires ServerStorage and Players service to get module scripts and player information. It uses GameSettings.minimumPlayers to ensure the minimum number of players join before starting the game, and uses intermissionDuration and transitionTime from the GameSettings module. The script utilizes `task.wait()` for time delays.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/battle-royale-series/coding-the-game-loop.md#_snippet_12\n\nLANGUAGE: lua\nCODE:\n```\n-- Services\nlocal ServerStorage = game:GetService(\"ServerStorage\")\nlocal Players = game:GetService(\"Players\")\n\n-- Module Scripts\nlocal moduleScripts = ServerStorage:WaitForChild(\"ModuleScripts\")\nlocal matchManager = require(moduleScripts:WaitForChild(\"MatchManager\"))\nlocal gameSettings = require(moduleScripts:WaitForChild(\"GameSettings\"))\n\n-- Main game loop\nwhile true do\n\trepeat\n\t\tprint(\"Starting intermission\")\n\t\ttask.wait(gameSettings.intermissionDuration)\n\tuntil #Players:GetPlayers() >= gameSettings.minimumPlayers\n\n\tprint(\"Intermission over\")\n\ttask.wait(gameSettings.transitionTime)\n\n\tmatchManager.prepareGame()\nend\n```\n\n----------------------------------------\n\nTITLE: Listening to Translator LocaleId Changes for Dynamic Language Switching in Roblox Lua\nDESCRIPTION: This code listens to any changes in the user's language preferences by watching the LocaleId property of the Translator instance returned by LocalizationService:GetTranslatorForPlayerAsync. It safely obtains the Translator using pcall and then connects to the GetPropertyChangedSignal event on the LocaleId property. When triggered, it prints the new locale ID and suggests re-translating any script-managed localized assets. Dependencies include LocalizationService and Players services, while inputs are the player object and their changing locale. Outputs are console logs indicating language changes. This method helps dynamically update UI elements or other assets when users switch languages during gameplay.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/production/localization/localize-with-scripting.md#_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal LocalizationService = game:GetService(\"LocalizationService\")\nlocal Players = game:GetService(\"Players\")\nlocal player = Players.LocalPlayer\n\n-- If GetTranslatorForPlayerAsync succeeds, it will return a Translator for player's current locale\nlocal res, translator = pcall(function()\n\treturn LocalizationService:GetTranslatorForPlayerAsync(player)\nend)\n\n-- Function that gets called when change in player's locale ID is detected\nlocal function OnLocaleIdChanged()\n\tprint(\"Translator has changed to: \" .. translator.LocaleId)\n\t-- You should re-translate any assets translated with Localization APIs to the player's new language here\nend\n\n-- Check if GetTranslatorForPlayerAsync succeeded\nif res then\n\t-- If succeeded, translate assets here using translator\n\t-- Listen for a change in player's locale ID\n\ttranslator:GetPropertyChangedSignal(\"LocaleId\"):Connect(OnLocaleIdChanged)\nelse\n\tprint('GetTranslatorForPlayerAsync failed: ' .. translator)\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Loading Screen UI Programmatically (Roblox Lua)\nDESCRIPTION: This Lua code snippet demonstrates how to programmatically create a simple loading screen UI using a LocalScript placed in ReplicatedFirst. It creates a ScreenGui and a TextLabel, sets their properties, parents them to the player's PlayerGui, removes the default loading screen, waits for a minimum duration or for the game to load, and then destroys the UI.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/players/loading-screens.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\nlocal ReplicatedFirst = game:GetService(\"ReplicatedFirst\")\n\nlocal player = Players.LocalPlayer\nlocal playerGui = player:WaitForChild(\"PlayerGui\")\n\nlocal screenGui = Instance.new(\"ScreenGui\")\nscreenGui.IgnoreGuiInset = true\nscreenGui.Parent = playerGui\n\n-- Replace ScreenGui values with your own\nlocal textLabel = Instance.new(\"TextLabel\")\ntextLabel.Size = UDim2.new(1, 0, 1, 0)\ntextLabel.BackgroundColor3 = Color3.fromRGB(0, 20, 40)\ntextLabel.Font = Enum.Font.GothamMedium\ntextLabel.TextColor3 = Color3.new(0.8, 0.8, 0.8)\ntextLabel.Text = \"Loading\"\ntextLabel.TextSize = 28\ntextLabel.Parent = screenGui\n\n-- Remove the default loading screen\nReplicatedFirst:RemoveDefaultLoadingScreen()\n\ntask.wait(5)  -- Force screen to appear for a minimum number of seconds\n\nif not game:IsLoaded() then\n game.Loaded:Wait()\nend\n\nscreenGui:Destroy()\n```\n\n----------------------------------------\n\nTITLE: Initializing services and variables in Roblox Lua script\nDESCRIPTION: This code initializes references to essential Roblox services (Workspace and Players), references to the coins folder in the workspace, and defines a cooldown period. It prepares the environment for handling coin collection events.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/core/scripting/script-game-behavior.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal Workspace = game:GetService(\"Workspace\")\nlocal Players = game:GetService(\"Players\")\n\nlocal coinsFolder = Workspace.World.Coins\nlocal coins = coinsFolder:GetChildren()\n\nlocal COOLDOWN = 10\n```\n\n----------------------------------------\n\nTITLE: Script - Global Avatar Customization on Player Join (Lua)\nDESCRIPTION: This script attaches to the 'PlayerAdded' event to customize the Humanoid's display and health properties whenever a new player spawns. It sets display distance types and control over name/health displays for each player's character Humanoid. Dependencies include Roblox's 'Players' service, and it requires the player to have a character with a Humanoid object.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/characters/name-health-display.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nlocal function onPlayerAdded(player)\n\tplayer.CharacterAdded:Connect(function(character)\n\t\tlocal humanoid = character:FindFirstChildWhichIsA(\"Humanoid\")\n\t\tif humanoid then\n\t\t\t-- Give each humanoid full control over its name/health display distance\n\t\t\thumanoid.DisplayDistanceType = Enum.HumanoidDisplayDistanceType.Subject\n\t\t\t-- Set name display distance to 20 studs\n\t\t\thumanoid.NameDisplayDistance = 20\n\t\t\t-- Set health bar display distance to 15 studs\n\t\t\thumanoid.HealthDisplayDistance = 15\n\t\t\t-- Only show health bar when humanoid is damaged\n\t\t\thumanoid.HealthDisplayType = Enum.HumanoidHealthDisplayType.DisplayWhenDamaged\n\t\tend\n\tend)\nend\n\nPlayers.PlayerAdded:Connect(onPlayerAdded)\n```\n\n----------------------------------------\n\nTITLE: Using BindableEvents for Asynchronous Communication in Lua\nDESCRIPTION: Demonstrates setting up and using a `BindableEvent`. One script connects a function to the `BindableEvent.Event` signal using `Connect`. Another script triggers this event asynchronously using `Fire`, passing data (\"Round started!\"). The connected function executes upon firing, printing the received data. Requires a `BindableEvent` instance named \"TestBindableEvent\" located within `ServerScriptService`.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/scripting/events/bindable.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal ServerScriptService = game:GetService(\"ServerScriptService\")\n\n-- Get reference to bindable event instance\nlocal bindableEvent = ServerScriptService:WaitForChild(\"TestBindableEvent\")\n\n-- Connect anonymous function to event\nbindableEvent.Event:Connect(function(data)\n\tprint(data)  --> Round started!\nend)\n```\n\nLANGUAGE: lua\nCODE:\n```\nlocal ServerScriptService = game:GetService(\"ServerScriptService\")\n\n-- Get reference to bindable event instance\nlocal bindableEvent = ServerScriptService:WaitForChild(\"TestBindableEvent\")\n\n-- Fire bindable event\nbindableEvent:Fire(\"Round started!\")\n```\n\n----------------------------------------\n\nTITLE: Determining the Smallest Team in Lua\nDESCRIPTION: This Lua function retrieves all available teams using the `Teams` service, sorts them based on the number of players in ascending order, and returns the `Team` object with the fewest players. This is typically used for balancing teams when players join.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/gameplay-scripting/spawn-respawn.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal function getSmallestTeam(): Team\n\tlocal teams = Teams:GetTeams()\n\n\t-- Sort teams in ascending order from smallest to largest\n\ttable.sort(teams, function(teamA: Team, teamB: Team)\n\t\treturn #teamA:GetPlayers() < #teamB:GetPlayers()\n\tend)\n\n\t-- Return the smallest team\n\treturn teams[1]\nend\n```\n\n----------------------------------------\n\nTITLE: Raycasting between Two Points in Roblox Lua\nDESCRIPTION: This snippet shows how to calculate the direction vector for a raycast based on two points, `TestOrigin` and `TestDestination`, within the Workspace.  It gets the position of each point and calculates the direction by subtracting the origin from the destination. The `highlight` attribute focuses on line 4, the direction calculation.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/workspace/raycasting.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal rayOrigin = Workspace.TestOrigin.Position\nlocal rayDestination = Workspace.TestDestination.Position\n\nlocal rayDirection = rayDestination - rayOrigin\n\nlocal raycastResult = Workspace:Raycast(rayOrigin, rayDirection)\n```\n\n----------------------------------------\n\nTITLE: Creating HumanoidDescription from User ID in Roblox Lua\nDESCRIPTION: Retrieves a HumanoidDescription for a specified Roblox user via their unique user ID using Players:GetHumanoidDescriptionFromUserId. Requires the Players service. The 'userId' parameter should be set to a valid integer user ID. Returns a HumanoidDescription reflecting the current appearance of the given user.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/characters/appearance.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nlocal userId = 491243243\n\nlocal humanoidDescriptionFromUser = Players:GetHumanoidDescriptionFromUserId(userId)\n```\n\n----------------------------------------\n\nTITLE: Reading Values from Dictionaries Using String and Object Keys in Luau - Lua\nDESCRIPTION: Shows accessing dictionary values with string keys (requiring quotes) and object keys (without quotes) via square brackets. Prints retrieved values accordingly. Input includes dictionary with mixed keys; output shows the values mapped to each key. Requires ability to create objects for object keys.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/tables.md#_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\nlocal part = Instance.new(\"Part\")\n\nlocal testDictionary = {\n\tpartType = \"Block\",\n\t[part] = true\n}\n-- Include quotes for string keys\nprint(testDictionary[\"partType\"]) -- Block\n-- Omit quotes for non-string keys\nprint(testDictionary[part]) -- true\n```\n\n----------------------------------------\n\nTITLE: Sending Damage to Server via RemoteEvent - Luau\nDESCRIPTION: This code snippet shows how a client sends a `DamageCharacter` remote event to the server. This event is triggered when the client's weapon hits another player. It includes retrieving necessary services, getting the character model from the hit, and firing the event with the character as an argument. Dependencies include the UserInputService, Players service, ReplicatedStorage and LaserRenderer.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/scripting/intermediate-scripting/hit-detection-with-lasers.md#_snippet_16\n\nLANGUAGE: lua\nCODE:\n```\nlocal UserInputService = game:GetService(\"UserInputService\")\nlocal Players = game:GetService(\"Players\")\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal LaserRenderer = require(Players.LocalPlayer.PlayerScripts.LaserRenderer)\n\nlocal tool = script.Parent\nlocal eventsFolder = ReplicatedStorage.Events\n\nlocal MAX_MOUSE_DISTANCE = 1000\nlocal MAX_LASER_DISTANCE = 500\n\nlocal characterModel = weaponRaycastResult.Instance:FindFirstAncestorOfClass(\"Model\")\nif characterModel then\n    local humanoid = characterModel:FindFirstChildWhichIsA(\"Humanoid\")\n    if humanoid then\n        eventsFolder.DamageCharacter:FireServer(characterModel)\n    end\nend\nelse\n    -- Calculate the end position based on maximum laser distance\n    hitPosition = tool.Handle.Position + directionVector\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Dictionary Key-Value Pairs Using pairs() in Luau - Lua\nDESCRIPTION: Illustrates iterating over a dictionary's keys and values by employing the global `pairs()` function within a for loop. Prints each key-value pair. Notes that order of iteration is not guaranteed. Requires dictionary with multiple entries; outputs are printed key-value pairs for each iteration.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/tables.md#_snippet_12\n\nLANGUAGE: lua\nCODE:\n```\nlocal testDictionary = {\n\tfruitName = \"Lemon\",\n\tfruitColor = \"Yellow\",\n\tsour = true\n}\n\nfor key, value in pairs(testDictionary) do\n\tprint(key, value)\nend\n\n--[[ Resulting output:\nfruitName Lemon\nsour true\nfruitColor Yellow\n]]\n```\n\n----------------------------------------\n\nTITLE: Mapping Custom Button Assets with UserInputService in Lua\nDESCRIPTION: This Lua snippet demonstrates how to use `UserInputService:GetStringForKeyCode()` to retrieve a console-specific string representation for a given KeyCode. It then uses this string to look up a corresponding custom asset URL from a predefined table and sets the `Image` property of an `ImageLabel` to display the custom button icon. This allows developers to show platform-appropriate icons for controller buttons using their own assets.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/production/publishing/console-guidelines.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal UserInputService = game:GetService(\"UserInputService\")\nlocal imageLabel = script.Parent\nlocal key = Enum.KeyCode.ButtonA\n\nlocal mappings = {\n    ButtonA = \"rbxasset://BUTTON_A_ASSET\", -- Replace with the desired ButtonA asset\n    ButtonCross = \"rbxasset://BUTTON_CROSS_ASSET\" -- Replace with the desired ButtonCross asset\n}\n\nlocal mappedKey = UserInputService:GetStringForKeyCode(key)\nlocal image = mappings[mappedKey]\n\nimageLabel.Image = image\n```\n\n----------------------------------------\n\nTITLE: Validating Blast Data and Player Movement to Prevent Cheating in Roblox Lua\nDESCRIPTION: This snippet shows how to validate incoming blast data by checking data structure, player equipment, existence, and movement distance. It includes a debug print for movement magnitude to help tune movement tolerance values, critical for cheat prevention and gameplay fairness.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/gameplay-scripting/implement-blasters.md#_snippet_7\n\nLANGUAGE: Lua\nCODE:\n```\nlocal distanceFromCharacterToOrigin = blastData.originCFrame.Position - rootPartCFrame.Position\nprint(distanceFromCharacterToOrigin.Magnitude) -- updated line, be sure to remove\nif distanceFromCharacterToOrigin.Magnitude > ToleranceValues.DISTANCE_SANITY_CHECK_TOLERANCE_STUDS then\n    warn(`Player {player.Name} failed an origin sanity check while blasting`)\n    return\nend\n```\n\n----------------------------------------\n\nTITLE: Unlocking Missions Programmatically in Roblox Lua\nDESCRIPTION: Demonstrates how to programmatically unlock a mission for a player using the Missions feature package in Roblox Lua. This is used when missions do not unlock automatically and require explicit unlocking logic. The snippet depends on the Missions module and requires a valid player and mission ID. Input parameters are player object and the mission ID string, with the output being the mission unlocked state update on the server.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/feature-packages/missions.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nMissions.unlockMission(player, \"Manual\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Naive DataStore SetAsync Retry (Lua)\nDESCRIPTION: This Lua function demonstrates a basic retry mechanism for a DataStore SetAsync operation using a loop and pcall. It attempts to set a value for a given key a maximum number of times, waiting between attempts. The accompanying text notes that while this pattern works for generic functions, it is explicitly NOT suitable for DataStore operations because it does not guarantee the order in which requests are processed for a specific key, which can lead to data inconsistencies or loss.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud-services/data-stores/player-data-purchasing.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal function retrySetAsync(dataStore, key, value)\n\tfor _ = 1, MAX_ATTEMPTS do\n\t\tlocal success, result = pcall(dataStore.SetAsync, dataStore, key, value)\n\n\t\tif success then\n\t\t\tbreak\n\t\tend\n\n\t\ttask.wait(TIME_BETWEEN_ATTEMPTS)\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Calculating Ray Direction Vector in Lua\nDESCRIPTION: This snippet calculates the direction vector of the ray by multiplying the ray's direction by a maximum distance. This determines how far the ray will extend into the game world from the player's camera. This distance can be changed by modifying the MAX_MOUSE_DISTANCE variable.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/scripting/intermediate-scripting/hit-detection-with-lasers.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\n-- The unit direction vector of the ray multiplied by a maximum distance\nlocal directionVector = screenToWorldRay.Direction * MAX_MOUSE_DISTANCE\n```\n\n----------------------------------------\n\nTITLE: Declaring Constants, Functions and Connecting Events in Lua\nDESCRIPTION: This snippet initializes the script, declares a constant for the maximum mouse distance, defines the `getWorldMousePosition` function (which is not yet implemented), and functions for tool equipped and activation, and connects events to the appropriate functions. This code segment sets up the basic structure of the tool's functionality.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/scripting/intermediate-scripting/hit-detection-with-lasers.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal tool = script.Parent\n\nlocal MAX_MOUSE_DISTANCE = 1000\n\nlocal function getWorldMousePosition()\n\nend\n\nlocal function toolEquipped()\n\ttool.Handle.Equip:Play()\nend\n\nlocal function toolActivated()\n\ttool.Handle.Activate:Play()\nend\n\n-- Connect events to appropriate functions\ntool.Equipped:Connect(toolEquipped)\ntool.Activated:Connect(toolActivated)\n```\n\n----------------------------------------\n\nTITLE: Adding Variables and Functions to Module Script in Roblox Lua\nDESCRIPTION: Shows how to add public variables and functions to the module table so they can be accessed externally by scripts that require this module. Variables and functions are added as fields of the module table using dot notation, e.g., TestModule.myVariable and TestModule.doTask(player). The snippet includes a placeholder function and a numeric variable. Local variables or functions must not be declared as local to be accessible outside the module script.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-6/intro-to-module-scripts.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal TestModule = {}\n\n-- Adds a variable to 'TestModule' table\nTestModule.myVariable = 100\n\n-- Adds a function to 'TestModule' table\nfunction TestModule.doTask(player)\n\t-- Placeholder code\nend\n\nreturn TestModule\n```\n\n----------------------------------------\n\nTITLE: Luau For Loop to Reappear Parts\nDESCRIPTION: Creates a second `for` loop that iterates through the `pathArray`. Inside the loop, it accesses each part and resets its `CanCollide` property to `true` and `Transparency` to `0`, making the part visible and collidable again.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-5/loops-and-arrays.md#_snippet_7\n\nLANGUAGE: Luau\nCODE:\n```\n-- Reset the path by making all parts walkable again\nfor partIndex = 1, #pathArray do\n   local whichPart = pathArray[partIndex]\n   whichPart.CanCollide = true\n   whichPart.Transparency = 0\nend\n```\n\n----------------------------------------\n\nTITLE: Client-Side Conditional Lightning Visual Effects Execution in Roblox Lua\nDESCRIPTION: This client-side Lua snippet defines a function that processes lightning strike effect data received from the server. It first checks if the player is indoors using 'inVolumesCheckerFunc' and if the player is in the normal game world state via 'gameStateInfoFunc', skipping the effect when inside or outside normal zones. If allowed, it performs a sequence of changing beam texture, position, brightness, runs tweens, plays synchronized audio, and waits for effect timing. Dependencies include helper functions for game state and position checks, and Roblox's tweening utilities. Inputs are lightning effect parameters; outputs are visual and audio lightning effects synchronized to gameplay state.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/the-mystery-of-duvall-drive/develop-a-moving-world.md#_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\nlocal function LightningFunc(info)\n\t…\n\t-- no FX when indoors\n\tif inVolumesCheckerFunc:Invoke() then\n\t\treturn\n\tend\n\n\t-- no FX when not in the \"normal\" world\n\tif not gameStateInfoFunc:Invoke(\"IsInNormal\") then\n\t\treturn\n\tend\n\t…\n```\n\n----------------------------------------\n\nTITLE: Reading Global Key from Roblox Data Store\nDESCRIPTION: This code demonstrates how to read a global key from a data store in Roblox. It uses pcall for error handling when retrieving data from the \"PlayerInventory\" data store with the key \"User_1234\".\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud-services/data-stores/versioning-listing-and-caching.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal DataStoreService = game:GetService(\"DataStoreService\")\nlocal inventoryStore = DataStoreService:GetDataStore(\"PlayerInventory\")\nlocal success, currentGold = pcall(function()\n  return inventoryStore:GetAsync(\"User_1234\")\nend)\n```\n\n----------------------------------------\n\nTITLE: Handle Completed Pass Purchase\nDESCRIPTION: This code snippet handles the completed purchase of a pass using `MarketplaceService.PromptGamePassPurchaseFinished:Connect()`.  When a purchase is completed successfully and the `purchasedPassID` matches the intended `passID`, it executes code to grant the user the privileges associated with the pass. This function is typically placed in `ServerScriptService`.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/production/monetization/game-passes.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal MarketplaceService = game:GetService(\"MarketplaceService\")\n\n-- Replace the placeholder ID with your pass ID\nlocal passID = 0000000  -- Change this to your Pass ID\n\n-- Handle a completed prompt and purchase\nlocal function onPromptPurchaseFinished(player, purchasedPassID, purchaseSuccess)\n\tif purchaseSuccess and purchasedPassID == passID then\n\t\tprint(player.Name .. \" purchased the Pass with ID \" .. passID)\n\t\t-- Assign the user the ability or bonus related to the pass\n\tend\nend\n\n-- Connect PromptGamePassPurchaseFinished events to the function\nMarketplaceService.PromptGamePassPurchaseFinished:Connect(onPromptPurchaseFinished)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating basic if then syntax in Luau\nDESCRIPTION: Shows the fundamental syntax pattern of an if then statement in Luau, where a block of code runs only if a specified condition is true. This snippet demonstrates the structure without executable code inside the conditional, serving as a conceptual template.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-3/intro-to-if-statements.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nif \"something happens\" then\n   -- Make something else happen\nend\n```\n\n----------------------------------------\n\nTITLE: Logging First Funnel Step on Player Join\nDESCRIPTION: This Lua snippet demonstrates how to initiate a funnel when a player joins the game by logging the first funnel step within the PlayerAdded event. It ensures funnel tracking aligns with player sessions from the moment they start playing, enabling cohort analysis.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/production/analytics/funnel-events.md#_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nlocal AnalyticsService = game:GetService(\"AnalyticsService\")\nlocal Players = game:GetService(\"Players\")\n\nPlayers.PlayerAdded:Connect(function(player)\n    AnalyticsService:LogOnboardingFunnelStepEvent(\n        player,\n        1, -- Step number\n        \"Player Joined\" -- Step name\n    )\nend)\n```\n\n----------------------------------------\n\nTITLE: Displaying VIP Chat Tag Using TextChatService\nDESCRIPTION: Client-side script that intercepts incoming chat messages and modifies them to display a [VIP] tag for players with the IsVIP attribute set to true. It uses TextChatService.OnIncomingMessage callback to override message properties.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/chat/examples/group-chat-tags.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\nlocal TextChatService = game:GetService(\"TextChatService\")\n\nTextChatService.OnIncomingMessage = function(message: TextChatMessage)\n\tlocal textSource = message.TextSource\n\tif textSource then\n\t\tlocal player = Players:GetPlayerByUserId(textSource.UserId)\n\t\tif player then\n\t\t\tif player:GetAttribute(\"IsVIP\") == true then\n\t\t\t\tlocal overrideProperties = Instance.new(\"TextChatMessageProperties\")\n\t\t\t\toverrideProperties.PrefixText = \"[VIP] \" .. message.PrefixText\n\t\t\t\treturn overrideProperties\n\t\t\tend\n\t\tend\n\tend\n\n\treturn nil\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Touched Event Cooldown with Attributes (Lua)\nDESCRIPTION: Shows how to add a simple debounce or cooldown mechanism to the BasePart.Touched event to prevent it from firing excessively. It uses instance attributes to track if the part is currently in a 'touched' state and task.wait to enforce a cooldown duration before allowing the event logic to run again.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/workspace/collisions.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal part = Workspace.Part\n\nlocal COOLDOWN_TIME = 1\n\nlocal function onTouched(otherPart)\n\tif not part:GetAttribute(\"Touched\") then\n\t\tprint(part.Name .. \" collided with \" .. otherPart.Name)\n\n\t\tpart:SetAttribute(\"Touched\", true)\n\t\ttask.wait(COOLDOWN_TIME)\n\t\tpart:SetAttribute(\"Touched\", false)\n\tend\nend\n\npart.Touched:Connect(onTouched)\n```\n\n----------------------------------------\n\nTITLE: Tweening Part Position Toggle with Roblox Lua\nDESCRIPTION: This Roblox Lua script demonstrates how to tween a part's position back and forth along a single axis when clicked via a ClickDetector. It uses TweenService to smoothly transition the part's CFrame, tracking its state to determine the next target position and preventing new tweens from starting while one is in progress.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/build-it-play-it-island-of-move/animating-parts.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\n-- Tweens a part back and forth based on a chosen axis\n-- The button has an on/off state which moves the part forwards or backwards\n\nlocal TweenService = game:GetService(\"TweenService\")\nlocal button = script.Parent\nlocal clickDetector = button:FindFirstChildWhichIsA(\"ClickDetector\")\nlocal buttonState = -1  -- Determines button direction; -1 means it will press in, 1 means it will pop out\nlocal inTween = false\n\n-- Customizable variables\nlocal TWEEN_TIME = 0.15\nlocal TWEEN_MOVE_DISTANCE = 1.5\n\n-- Tween variables\nlocal buttonTweenInfo = TweenInfo.new(\n\tTWEEN_TIME, -- Time\n\tEnum.EasingStyle.Quad, -- EasingStyle\n\tEnum.EasingDirection.Out -- EasingDirection\n)\n\nlocal function buttonPress()\n\t-- If the button is tweening, prevent it from being used again\n\tif inTween == true then\n\t\treturn\n\tend\n\n\t-- Calculate new CFrame for button position\n\tlocal offsetCFrame = CFrame.new(0, TWEEN_MOVE_DISTANCE * buttonState, 0)\n\tlocal newCFrame = button.CFrame:ToWorldSpace(offsetCFrame)\n\n\t-- Create a tween and play it\n\tlocal tweenButton = TweenService:Create(button, buttonTweenInfo, {CFrame = newCFrame})\n\ttweenButton:Play()\n\tinTween = true\n\n\t-- On tween completion, make button usable again\n\ttweenButton.Completed:Connect(function()\n\t\tinTween = false\n\t\t-- Invert the button state\n\t\tbuttonState *= -1\n\tend)\n\nend\n\nclickDetector.MouseClick:Connect(buttonPress)\n```\n\n----------------------------------------\n\nTITLE: Listing All Items in MemoryStore Hash Map (Lua)\nDESCRIPTION: Retrieves all key-value pairs currently stored in the hash map using pagination. `ListItemsAsync()` returns a Pages object, allowing iteration through results page by page. This snippet demonstrates iterating through pages and printing each key-value pair.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud-services/memory-stores/hash-map.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal MemoryStoreService = game:GetService(\"MemoryStoreService\")\n\nlocal hashMap = MemoryStoreService:GetHashMap(\"HashMap1\")\n\n-- Get list of items, 32 items at a time\nlocal success, pages = pcall(function()\n\treturn hashMap:ListItemsAsync(32)\nend)\nif success then\n\twhile true do\n\t\t-- Get the current page\n\t\tlocal entries = pages:GetCurrentPage()\n\t\t-- Iterate through all key-value pairs on page\n\t\tfor _, entry in ipairs(entries) do\n\t\t\tprint(entry.key .. \" : \" .. tostring(entry.value))\n\t\tend\n\t\t-- Check if last page has been reached\n\t\tif pages.IsFinished then\n\t\t\tbreak\n\t\telse\n\t\t\tprint(\"----------\")\n\t\t\t-- Advance to next page\n\t\t\tpages:AdvanceToNextPageAsync()\n\t\tend\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Waiting for Part.Touched Event with Synchronous Script Yielding in Roblox with Luau\nDESCRIPTION: This code shows how to pause script execution until a part's Touched event fires by using the Wait method. On event firing, the argument (the touching part) is returned and printed. The script depends on the Workspace service and a valid part instance. Key parameters: none required directly; script yields until event. Input: Touched event. Output: prints which object touched the part. Requires presence of Workspace.Part.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/scripting/events/index.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal part = Workspace.Part\nlocal touchedPart = part.Touched:Wait()\nprint(\"The part was touched by\", touchedPart:GetFullName())\n```\n\n----------------------------------------\n\nTITLE: Playing Looping Background Music in Roblox (Lua)\nDESCRIPTION: This Lua script, designed for a `Class.AudioPlayer` object, plays a looping audio track as soon as the player joins the experience.  It retrieves the parent of the script (which is the `Class.AudioPlayer`) and then initiates playback.  The `RunContext` property is set to 'Client', ensuring the script runs locally on the player's device. This allows the music to begin immediately upon joining the game.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/audio/add-2D-audio.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal audioPlayer = script.Parent\naudioPlayer:Play()\n```\n\n----------------------------------------\n\nTITLE: Retrieving multiple return values from Players:GetUserThumbnailAsync in Lua\nDESCRIPTION: Illustrates the retrieval of multiple return values (a tuple) from the GetUserThumbnailAsync method of the Players service. The snippet requires access to the Roblox Players service and uses Enum constants for thumbnail type and size. Inputs include a user ID and enumeration parameters, with outputs being a thumbnail content URL string and a boolean indicating readiness. This method returns multiple values simultaneously, demonstrating tuple unpacking in Lua.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/tuples.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nlocal userId = 156 -- builderman\nlocal thumbType = Enum.ThumbnailType.HeadShot\nlocal thumbSize = Enum.ThumbnailSize.Size420x420\nlocal content, isReady = Players:GetUserThumbnailAsync(userId, thumbType, thumbSize)\nprint(content, isReady) -- rbxthumb://type=AvatarHeadShot&id=156&w=420&h=420 true\n```\n\n----------------------------------------\n\nTITLE: Iterating Through a Dictionary Using pairs() - Lua\nDESCRIPTION: Shows classic iteration over a dictionary with pairs(), extracting both key and value. Demonstrates flexible key naming (strings) and prints formatted output. Can be used to process any set of key-value pairs. No external dependencies.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-5/intro-to-dictionaries.md#_snippet_15\n\nLANGUAGE: lua\nCODE:\n```\nlocal myDictionary = {\n\t[\"Blue Player\"] = \"Ana\",\n\t[\"Gold Player\"] = \"Binh\",\n\t[\"Red Player\"] = \"Cate\",\n}\n\nfor key, value in pairs(myDictionary) do\n\tprint(key .. \" is \" .. value)\nend\n```\n\n----------------------------------------\n\nTITLE: Creating the Point Award Function in Roblox Luau\nDESCRIPTION: Defines a function that will award points to a player. Currently just contains a print statement for testing purposes.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-3/give-points.md#_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\n-- Gives or subtracts points\nlocal function givePoints(player)\n\tprint(\"Giving player points\")\nend\n```\n\n----------------------------------------\n\nTITLE: Using 'not' Operator with Nil and False Values in Conditionals\nDESCRIPTION: Example demonstrating how to use the 'not' operator to trigger conditionals when variables are false or nil, a common pattern for checking whether variables have valid values.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/operators.md#_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal nilVariable  -- Variable is declared but has no value, so it's nil\nlocal falseVariable = false  -- Variable is declared with value of false\n\nif not nilVariable then\n\tprint(nilVariable)  -- Outputs \"nil\" because nil isn't true\nend\n\nif not falseVariable then\n\tprint(falseVariable)  -- Outputs \"false\" because false isn't true\nend\n```\n\n----------------------------------------\n\nTITLE: Connecting BasePart TouchEnded Event (Lua)\nDESCRIPTION: Illustrates how to connect a Lua function to a Roblox BasePart's TouchEnded event. This event fires when the physical collision bounds of the part completely exit those of another part or Terrain voxel. The connected function receives the 'otherPart' that is no longer touching.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/workspace/collisions.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal part = Workspace.Part\n\nlocal function onTouchEnded(otherPart)\n\tprint(part.Name .. \" is no longer touching \" .. otherPart.Name)\nend\n\npart.TouchEnded:Connect(onTouchEnded)\n```\n\n----------------------------------------\n\nTITLE: Get player's treasure function - Lua\nDESCRIPTION: This code defines a local function `getPlayerTreasure` within the TreasureManager module to retrieve the player's treasure from their leaderstats. It takes the player's character as input and returns the treasure object.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-6/create-with-module-scripts.md#_snippet_20\n\nLANGUAGE: Lua\nCODE:\n```\nlocal function getPlayerTreasure(whichCharacter)\n   local player = Players:GetPlayerFromCharacter(whichCharacter)\n   local leaderstats = player:FindFirstChild(\"leaderstats\")\n   return leaderstats:WaitForChild(\"Treasure\")\nend\n```\n\n----------------------------------------\n\nTITLE: Handling 'collected' Event in Roblox with Lua\nDESCRIPTION: This code snippet demonstrates how to connect to the `collected` event of the ScavengerHunt module in Roblox using Lua.  The event fires when a player collects a token. The connected function receives the player, item name, and total collected count, then prints the information.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/scavenger-hunt.md#_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal ScavengerHunt = require(ReplicatedStorage:WaitForChild(\"ScavengerHunt\"))\n\nScavengerHunt.collected:Connect(function(player, itemName, totalCollected)\n\tprint(player.DisplayName, itemName, totalCollected)\nend)\n```\n\n----------------------------------------\n\nTITLE: Saving User Data on Leave in Roblox\nDESCRIPTION: This Lua code snippet shows how to save a user's data when they leave a Roblox experience, utilizing the `Class.Players.PlayerRemoving` event and a datastore. It fetches user data via a function called `getCurrentData` and utilizes `pcall` to handle potential errors during the data saving operation.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/players/index.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal DataStoreService = game:GetService(\"DataStoreService\")\nlocal playerDataStore = DataStoreService:GetDataStore(\"PlayerData\")\n\ngame:GetService(\"Players\").PlayerRemoving:Connect(function(player)\n\tlocal userId = player.UserId\n\n\t-- Get the player's data state in the game\n\tlocal currentData = getCurrentData(player)\n\n\t-- Save to data store\n\tlocal setSuccess, errorMessage = pcall(function()\n\t    playerDataStore:SetAsync(userId, currentData)\n\tend)\n\n\tif not setSuccess then\n\t    warn(errorMessage)\n\tend\nend)\n```\n\n----------------------------------------\n\nTITLE: Reading and Removing Data from Memory Store Queue with Loop in Lua\nDESCRIPTION: Demonstrates a continuous processing loop for a memory store queue. It reads one item per iteration with ReadAsync, using a 30-second invisibility timeout. Read items and their IDs are returned if successful. The snippet then calls RemoveAsync with the obtained ID to delete processed items, preventing reprocessing. Both calls are wrapped in pcall blocks for error resilience. This pattern ensures reliable, ordered consumption and removal of queue items across distributed servers.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud-services/memory-stores/queue.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal MemoryStoreService = game:GetService(\"MemoryStoreService\")\n\nlocal queue = MemoryStoreService:GetQueue(\"Queue1\")\n\nlocal addSuccess, addError = pcall(function()\n\tqueue:AddAsync(\"User_1234\", 30, 1)\nend)\nif not addSuccess then\n\twarn(addError)\nend\n\n-- Queue processing loop\nwhile true do\n\tlocal readSuccess, items, id = pcall(function()\n\t\treturn queue:ReadAsync(1, false, 30)\n\tend)\n\tif not readSuccess then\n\t\ttask.wait(1)\n\telseif #items > 0 then\n\t\tprint(items, id)\n\t\tlocal removeSuccess, removeError = pcall(function()\n\t\t\tqueue:RemoveAsync(id)\n\t\tend)\n\t\tif not removeSuccess then\n\t\t\twarn(removeError)\n\t\tend\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Creating a Timed Racing Game with Tiered Rewards in Lua for Roblox\nDESCRIPTION: This script implements a racing game that tracks time elapsed, detects when a player touches the finish line, and awards medals based on completion time. It uses if-elseif-else structures to determine the appropriate medal and includes a continuous timer while the race is active.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-3/multiple-conditions.md#_snippet_15\n\nLANGUAGE: lua\nCODE:\n```\nlocal timePassed = 0\nlocal finishLine = script.Parent\n\n-- Used to keep finish() and timer from repeating when race is over\nlocal raceActive = true\n\n-- Runs when the player touches the finish line and shows them an award\nlocal function finish()\n   raceActive = false\n   print(\"You finished in \" .. timePassed)\n\n   if timePassed <= 10 then\n      print(\"You get a gold medal!\")\n   elseif timePassed > 10 and timePassed <= 20 then\n      print(\"You get a silver medal!\")\n   elseif  timePassed > 20 and timePassed <= 30 then\n      print(\"You get a bronze medal!\")\n   else\n      print(\"Try again!\")\n   end\nend\n\n\n-- Checks if a player touches the part when a race is active\nlocal function partTouched(otherPart)\n   local character = otherPart.Parent\n   local humanoid = character:FindFirstChildWhichIsA(\"Humanoid\")\n   if humanoid and raceActive == true then\n      finish()\n   end\n\nend\n\nfinishLine.Touched:Connect(partTouched)\n\n-- Keeps track of race time while the race is active. Needs to be at script bottom.\nwhile raceActive == true do\n   task.wait(1)\n   timePassed += 1\n   print(timePassed)\nend\n```\n\n----------------------------------------\n\nTITLE: Searching an Array with ipairs in Luau\nDESCRIPTION: Defines a Luau function `getPlaceInLine` that iterates through an array `waitingShips` using `ipairs`. It searches for a specific `shipName` and returns its numerical index (place in line) if found. The example demonstrates calling the function with a predefined ship name and printing the returned index.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-5/return-values-from-tables.md#_snippet_0\n\nLANGUAGE: Luau\nCODE:\n```\nlocal shipToFind = \"Void Racer\"\n\n-- Ships waiting for repair\nlocal waitingShips = {\"Battle Sun\", \"Void Racer\", \"The Big Slow\"}\n\n-- Get place in line\nlocal function getPlaceInLine(shipName)\n\tfor placeInLine, ship in ipairs(waitingShips) do\n\t\tif ship == shipName then\n\t\t\treturn placeInLine\n\t\tend\n\tend\nend\n\n--Print place in line\nlocal placeInLine = getPlaceInLine(shipToFind)\nprint(\"Your place in line is \" .. placeInLine)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Touch Detection in Roblox Luau\nDESCRIPTION: Creates a function that handles touch events for the powerup and connects it to the part's Touched event. The function simply prints a message when the part is touched.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-3/powerups-with-if-statements.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal speedBoost = script.Parent\n\nlocal function onTouch(otherPart)\n\tprint(\"Something touched speedBoost\")\nend\n\nspeedBoost.Touched:Connect(onTouch)\n```\n\n----------------------------------------\n\nTITLE: Removing a found value from array after search in Luau\nDESCRIPTION: This snippet shows how to remove an element from an array once its index has been identified via a search function. It ensures only the first matching occurrence is removed using table.remove and includes code to display resultant array.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-5/make-changes-to-arrays.md#_snippet_4\n\nLANGUAGE: Lua\nCODE:\n```\nif valueFound then\n\ttable.remove(playerItems, valueFound)\nend\n\nfor index = 1, #playerItems do\n\tlocal itemString = playerItems[index]\n\tprint(\"Index \" .. index .. \": \" .. itemString)\nend\n```\n\n----------------------------------------\n\nTITLE: Exporting Types from a Module in Luau Lua\nDESCRIPTION: Shows how to export a type 'Cat' from a ModuleScript so it can be required and used in other scripts. This enables sharing type definitions across modules and enforcing consistent data structures and behavior across the codebase that uses the module.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/type-checking.md#_snippet_22\n\nLANGUAGE: lua\nCODE:\n```\nexport type Cat = {\n\tName: string,\n\tMeow: (Cat) -> ()\n}\n```\n\n----------------------------------------\n\nTITLE: Numeric For Loop with Increment of 2 in Luau\nDESCRIPTION: This code demonstrates a `for` loop in Luau with a specified increment of 2. The counter starts at 1 and continues up to 6, incrementing by 2 in each iteration. The loop prints the value of the counter in each iteration.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/control-structures.md#_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nfor counter = 1, 6, 2 do\n\tprint(counter)\nend\n\n--[[ Resulting output:\n1\n3\n5\n]]\n```\n\n----------------------------------------\n\nTITLE: Handle Touched Event Without Debounce Roblox Lua\nDESCRIPTION: This snippet demonstrates a basic implementation of a collision handler using the `Touched` event without any debounce logic. It shows how the function can be called multiple times in rapid succession due to subtle physical interactions, potentially causing unintended side effects like excessive damage.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/scripting/debounce.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal part = script.Parent\n\nlocal function damagePlayer(otherPart)\n\tprint(part.Name .. \" collided with \" .. otherPart.Name)\n\n\tlocal humanoid = otherPart.Parent:FindFirstChildWhichIsA(\"Humanoid\")\n\tif humanoid then\n\t\thumanoid.Health -= 10  -- Reduce player health\n\tend\nend\n\npart.Touched:Connect(damagePlayer)\n```\n\n----------------------------------------\n\nTITLE: Establishing the Main Game Loop in GameManager (Roblox Lua)\nDESCRIPTION: Establishes the main infinite game loop using `while true do` within the GameManager script, following the initialization of services and module variables. All game phase logic (intermission, competition, cleanup) will reside within this loop to repeat indefinitely.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/battle-royale-series/coding-the-game-loop.md#_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\n-- Module Scripts\nlocal moduleScripts = ServerStorage:WaitForChild(\"ModuleScripts\")\nlocal matchManager = require(moduleScripts:WaitForChild(\"MatchManager\"))\nlocal gameSettings = require(moduleScripts:WaitForChild(\"GameSettings\"))\n\n-- Main game loop\nwhile true do\n\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Attachments from Imported Meshes in Roblox\nDESCRIPTION: Shows the naming convention for mesh objects that are automatically converted to Attachment objects during import using the '_Att' suffix.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/parts/meshes.md#_snippet_6\n\nLANGUAGE: Roblox\nCODE:\n```\nClass.Attachment\n```\n\n----------------------------------------\n\nTITLE: Implementing Player Reset Function in PlayerManager\nDESCRIPTION: Creates a resetPlayers() function in PlayerManager that respawns all active players in the lobby and clears the activePlayers table for the next match.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/battle-royale-series/cleanup-and-reset.md#_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nfunction PlayerManager.resetPlayers()\n\tfor playerKey, whichPlayer in activePlayers do\n\t\trespawnPlayerInLobby(whichPlayer)\n\tend\n\n\tactivePlayers = {}\nend\n```\n\n----------------------------------------\n\nTITLE: Managing Vehicle Network Ownership in Roblox Lua\nDESCRIPTION: This Lua script assigns network ownership of a vehicle's VehicleSeat to the player currently occupying the seat, improving responsiveness for physics simulation by delegating ownership to the client driving the vehicle. It listens to the VehicleSeat's Changed event, checks the Occupant property to identify the humanoid, retrieves the corresponding Player instance, and sets network ownership accordingly. When the seat is unoccupied, it resets network ownership to automatic. Dependencies include the Players service from Roblox and the NetworkOwnership methods on BasePart instances. This code should run server-side to allow authoritative ownership control.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/physics/network-ownership.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nlocal vehicleSeat = script.Parent\n\nvehicleSeat.Changed:Connect(function(prop)\n\tif prop == \"Occupant\" then\n\t\tlocal humanoid = vehicleSeat.Occupant\n\t\tif humanoid then\n\t\t\t-- Get the player from the character\n\t\t\tlocal player = Players:GetPlayerFromCharacter(humanoid.Parent)\n\t\t\tif player then\n\t\t\t\tvehicleSeat:SetNetworkOwner(player)\n\t\t\tend\n\t\telse\n\t\t\t-- Reset ownership when seat is unoccupied\n\t\t\tvehicleSeat:SetNetworkOwnershipAuto()\n\t\tend\n\tend\nend)\n```\n\n----------------------------------------\n\nTITLE: Controlling Game Loop in Roblox Lua\nDESCRIPTION: This Lua script manages the primary game loop, alternating between an intermission and a match phase. It waits for a sufficient number of players during the intermission phase, based on `GameSettings.minimumPlayers`. Once enough players are present, it waits for a `transitionTime` before calling `matchManager.prepareGame` to start the match. The script then waits for the `matchEnd.Event` to trigger before the loop repeats, starting a new intermission.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/battle-royale-series/timers-and-events.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\n-- Services\nlocal ServerStorage = game:GetService(\"ServerStorage\")\nlocal Players = game:GetService(\"Players\")\n\n-- Module Scripts\nlocal moduleScripts = ServerStorage:WaitForChild(\"ModuleScripts\")\nlocal matchManager = require(moduleScripts:WaitForChild(\"MatchManager\"))\nlocal gameSettings = require(moduleScripts:WaitForChild(\"GameSettings\"))\n\n-- Events\nlocal events = ServerStorage:WaitForChild(\"Events\")\nlocal matchEnd = events:WaitForChild(\"MatchEnd\")\n\nwhile true do\n\trepeat\n\t\ttask.wait(gameSettings.intermissionDuration)\n\t\tprint(\"Restarting intermission\")\n\tuntil #Players:GetPlayers() >= gameSettings.minimumPlayers\n\n\tprint(\"Intermission over\")\n\ttask.wait(gameSettings.transitionTime)\n\n\tmatchManager.prepareGame()\n\t-- Placeholder wait for the length of the game.\n\tmatchEnd.Event:Wait()\nend\n```\n\n----------------------------------------\n\nTITLE: Getting Object from Service Using WaitForChild in Lua\nDESCRIPTION: This code gets an object from a Roblox service, using  `WaitForChild()` to ensure the object exists before referencing.  `ReplicatedStorage` is accessed, and `WaitForChild` is called to find the 'Signs' folder and then the 'InteractiveSign' object.  Dependencies: Roblox Engine.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/scripting/attributes.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal signsFolder = ReplicatedStorage:WaitForChild(\"Signs\")\nlocal sign = signsFolder:WaitForChild(\"InteractiveSign\")\n```\n\n----------------------------------------\n\nTITLE: guilded_bot.py\nDESCRIPTION: Implements a Guilded bot that listens to webhook messages related to Roblox rights to erasure requests, parses messages to extract user IDs, and invokes data store deletion functions. Sends success or failure responses back through messages.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/webhooks/automate-right-to-erasure.md#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nimport guilded\nimport json\n\nimport bot_config\nimport data_stores_api\nimport message_parser\n\ndef run():\n    client = guilded.Client()\n\n    @client.event\n    async def on_ready():\n        print(f\"{client.user} is listening to Right to Erasure messages\")\n\n    \"\"\"\n    Handler for webhook messages from Roblox\n    \"\"\"\n    @client.event\n    async def on_message(message):\n        # Parses and validates message\n        user_id, start_place_ids = message_parser.parse_message(message)\n        if not user_id or not start_place_ids:\n            return\n\n        # Deletes standard data stores user data\n        [successes, failures] = data_stores_api.delete_standard_data_stores(user_id, start_place_ids)\n        if successes:\n            await message.reply(f\"Deleted standard data stores data for \" +\n                               f\"user ID: {user_id}, data: {dict(successes)}\")\n        if failures:\n            await message.reply(f\"Failed to delete standard data stores data for \" +\n                               f\"user ID: {user_id}, data: {dict(failures)}\")\n\n        # Deletes ordered data stores user data\n        [successes, failures] = data_stores_api.delete_ordered_data_stores(user_id, start_place_ids)\n        if successes:\n            await message.reply(f\"Deleted ordered data stores data for \" +\n                               f\"user ID: {user_id}, data: {dict(successes)}\")\n        if failures:\n            await message.reply(f\"Failed to delete ordered data stores data for \" +\n                               f\"user ID: {user_id}, data: {dict(failures)}\")\n\n    client.run(bot_config.BOT_TOKEN)\n\nif __name__ == \"__main__\":\n    run()\n\n```\n\n----------------------------------------\n\nTITLE: Destroying a Key Part in getKey() - Roblox Lua\nDESCRIPTION: Implements the destruction of the picked-up key by invoking :Destroy() on the provided 'keyPart' parameter within the getKey() function. This operation ensures the key cannot be picked up multiple times and visually removes it from the map. Requires 'keyPart' to be a valid Roblox Instance representing a part in the Workspace.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-6/create-with-module-scripts.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nfunction TreasureManager.getKey(keyPart, whichCharacter)\n\tkeyPart:Destroy()\nend\n```\n\n----------------------------------------\n\nTITLE: Numerical Signal Example (Joining Player) in Lua\nDESCRIPTION: This is an example implementation of the numerical signal calculation using specific values. It demonstrates the use of `server_average_Elo`, `joining_player_Elo`, and `max_relevant_difference`. The code computes a score based on the difference between these attributes, similar to the general formula. It demonstrates how the formula translates to specific, usable logic.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/matchmaking/attributes-and-signals.md#_snippet_12\n\nLANGUAGE: lua\nCODE:\n```\nlocal server_average_Elo = 2000\nlocal joining_player_Elo = 1000\nlocal max_relevant_difference = 1500\n\nlocal diff = math.abs(server_average_Elo - joining_player_Elo)\nlocal score = 1 - math.min(diff / max_relevant_difference, 1)\nreturn score\n```\n\n----------------------------------------\n\nTITLE: Configuring EmoteBar Client GUI (Bar) - Lua\nDESCRIPTION: Demonstrates client-side configuration for the EmoteBar library using the `configureClient` function. It sets the GUI type to `EmoteBar`, adjusts the maximum number of emotes displayed per page, and rebinds the page navigation hotkeys to 'Z' and 'C'. This function must be called from a LocalScript.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/emote-bar.md#_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal EmoteBar = require(ReplicatedStorage:WaitForChild(\"EmoteBar\"))\n\nEmoteBar.configureClient({\n\tguiType = EmoteBar.GuiType.EmoteBar,\n\tmaxEmotesPerPage = 6,\n\tnextPageKey = Enum.KeyCode.Z,\n\tprevPageKey = Enum.KeyCode.C,\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling ScavengerHunt Module in Roblox with Lua\nDESCRIPTION: This code snippet enables the ScavengerHunt module in Roblox using Lua. It calls the `enable` function, which shows the UI, connects event listeners, and allows token collection. It requires the ScavengerHunt module.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/scavenger-hunt.md#_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal ScavengerHunt = require(ReplicatedStorage:WaitForChild(\"ScavengerHunt\"))\n\nScavengerHunt.enable()\n```\n\n----------------------------------------\n\nTITLE: LocalScript - Invite Multiple Friends with Launch Data in Roblox Lua\nDESCRIPTION: This script constructs an experience invite with embedded launch data, including sender's user ID and spawn location. It encodes the data as JSON, assigns it to the invite options, and sends the invite if the player has permission. Dependencies include Roblox's HttpService, SocialService, and Players services. Key parameters are the launch data and invite options, influencing how the invite is sent and received.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/production/promotion/invite-prompts.md#_snippet_5\n\nLANGUAGE: Lua\nCODE:\n```\nlocal HttpService = game:GetService(\"HttpService\")\nlocal SocialService = game:GetService(\"SocialService\")\nlocal Players = game:GetService(\"Players\")\n\nlocal player = Players.LocalPlayer\n\nlocal data = {\n\tsenderUserID = player.UserId,\n\tspawnLocation = {12, 48, 205.5}\n}\n\nlocal launchData = HttpService:JSONEncode(data)\n\n-- Construct invite options with launch data\nlocal inviteOptions = Instance.new(\"ExperienceInviteOptions\")\ninviteOptions.LaunchData = launchData\n\n-- Function to check whether the player can send an invite\nlocal function canSendGameInvite(sendingPlayer)\n\tlocal success, canSend = pcall(function()\n\t\treturn SocialService:CanSendGameInviteAsync(sendingPlayer)\n\tend)\n\treturn success and canSend\nend\n\nlocal canInvite = canSendGameInvite(player)\nif canInvite then\n\tSocialService:PromptGameInvite(player, inviteOptions)\nend\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video 3 in HTML\nDESCRIPTION: This is the third instance of embedding a youtube video into the page using an iframe. It includes the necessary attributes such as source URL, title, frameBorder, and the ability to autoplay, copy, encrypt, and make full screen.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/avatar/index.md#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<iframe width=\"800\" height=\"450\" src=\"https://www.youtube-nocookie.com/embed/swQW2VS9ZMA\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n```\n\n----------------------------------------\n\nTITLE: Defining RelativeTime Bundle - Lua\nDESCRIPTION: This code snippet demonstrates the definition of a `RelativeTimeBundle`. It includes setting the `bundleType`, pricing options (using either a Marketplace developer product or in-experience currency), included items (each with its type, price, and icon), and bundle metadata. The `singleUse`, `durationInSeconds`, and `includesOfflineTime` properties control the bundle's behavior. Requires `Types` and `CurrencyTypes` from `ReplicatedStorage.Bundles.Configs`\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/feature-packages/bundles.md#_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\n    local starterBundle: Types.RelativeTimeBundle = {\n        bundleType = Types.BundleType.RelativeTime,\n\n        -- If you want to use a dev product, you must provide a unique devProductId, only used by one bundle.\n        -- We will fetch bundle price and icon from the developer product\n        pricing = {\n            priceType = CurrencyTypes.PriceType.Marketplace,\n            devProductId = <DEV_PRODUCT_ID>,\n        },\n\n        -- Otherwise, if you want to use in-experience currency instead of a dev product, you can use the following instead:\n        -- Price here is in the in-experience currency, not Robux\n        -- pricing = {\n        --  priceType = CurrencyTypes.PriceType.InExperience,\n        --  price = 79,\n        --  currencyId = <CURRENCY_ID>,\n        --  icon = <IMAGE_ASSET_ID>,\n        -- },\n\n        includedItems = {\n            [1] = {\n                -- The item itself is not sold via a developer product, so indicate how much it is worth in Robux and give an icon\n                -- The priceInRobux helps Bundles show relative value of the bundle price vs. the sum of its contents\n                itemType = ItemTypes.ItemType.Robux,\n                priceInRobux = 49,\n                icon = <IMAGE_ASSET_ID>,\n\n                -- Alternatively, if this has a dev product leave off price and icon above and just set the devProductId\n                -- The price and icon will be fetched from the developer product\n                -- devProductId = <ITEM_DEV_PRODUCT_ID>\n\n                -- There are more optional metadata fields that are UI-specific if needed\n                metadata = {\n                    caption = {\n                        text = \"x1\",\n                        color = Color3.fromRGB(236, 201, 74),\n                    },\n                },\n            },\n            [2] = {\n                itemType = ItemTypes.ItemType.Robux,\n                priceInRobux = 99,\n                icon = <IMAGE_ASSET_ID>,\n                metadata = {\n                    caption = {\n                        text = \"x1\",\n                        color = Color3.fromRGB(236, 201, 74),\n                    },\n                },\n            },\n            [3] = {\n                itemType = ItemTypes.ItemType.Robux,\n                priceInRobux = 149,\n                icon = <IMAGE_ASSET_ID>,\n                metadata = {\n                    caption = {\n                        text = \"x1\",\n                        color = Color3.fromRGB(236, 201, 74),\n                    },\n                },\n            },\n        },\n        singleUse = true, -- Once purchased or expired, no longer valid even if your experience tries to prompt (onPlayerAdded). You can make this false while testing in studio.\n        durationInSeconds = 900, -- 15 minutes\n        includesOfflineTime = false, -- Only count time elapsed in the experience\n        metadata = {\n            displayName = \"STARTER BUNDLE\",\n            description = \"Save 75% and get a head start!\",\n        },\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining Generic Functions in Luau\nDESCRIPTION: This snippet shows the basic syntax for defining a local function in Luau that accepts one argument and returns a value, demonstrating standard function declaration.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/luau-csharp-comparison.md#_snippet_6\n\nLANGUAGE: Luau\nCODE:\n```\n-- Generic function\nlocal function increment(number)\n\treturn number + 1\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Photo Booth Backgrounds - Roblox Lua\nDESCRIPTION: Shows how to override the default backgrounds for the PhotoBooth module with custom images in Roblox Lua. The script loads the PhotoBooth module and uses setBackgrounds to define an array of asset IDs, each of which should point to a 16:9 image suitable for background use. The method expects 1-4 image asset IDs, and images should be formatted for optimal display. Dependencies include the PhotoBooth module; asset images should be pre-uploaded and publicly accessible. The snippet should be used only in a LocalScript.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/photo-booth.md#_snippet_4\n\nLANGUAGE: Lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal PhotoBooth = require(ReplicatedStorage:WaitForChild(\"PhotoBooth\"))\n\nPhotoBooth.setBackgrounds({\n    \"rbxassetid://7018713114\",\n    \"rbxassetid://950538356\",\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Color Variables for Point System in Roblox Luau\nDESCRIPTION: Creates RGB color variables for blue, green, and red that will be used to change the part's appearance and determine point values.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-3/give-points.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal pointPart = script.Parent\n\n-- Colors\nlocal blue = Color3.fromRGB(0, 0, 255)\nlocal green = Color3.fromRGB(0, 255, 0)\nlocal red = Color3.fromRGB(255, 0, 0)\n```\n\n----------------------------------------\n\nTITLE: Auto Save/Load Player Position with Character Events - Luau\nDESCRIPTION: Demonstrates saving and loading player character position data using a separate data store (`PlayerPositionStore`). Data is loaded using `GetAsync` when a character is added (`CharacterAdded`) and saved using `SetAsync` when a character is removing (`CharacterRemoving`). Position (`Vector3`) is saved as a table of numbers ` {X, Y, Z}` because Data Stores only support basic types. Error handling with `pcall` is included, and a basic death handler resets the character to the default spawn.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/scripting/intermediate-scripting/save-data.md#_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\nlocal DataStoreService = game:GetService(\"DataStoreService\")\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal playerPositionStore = DataStoreService:GetDataStore(\"PlayerPositionStore\")\n\nlocal function positionHandler(player)\n\n    -- Load position on character add\n    player.CharacterAdded:Connect(function(character)\n        local success, coords = pcall(function()\n            return playerPositionStore:GetAsync(player.UserId)\n        end)\n        local position = Vector3.new(coords[1], coords[2], coords[3])\n        if success and position then\n            character:PivotTo(CFrame.new(position))\n            print(\"Loaded player position!\")\n        else\n            warn(\"Failed to load position for player \" .. player.Name .. \". Placing in default position.\")\n        end\n\n        -- Handle player respawn on death\n        local humanoid = character:FindFirstChildOfClass(\"Humanoid\")\n        humanoid.Died:Connect(function()\n            local spawnLocation = Workspace:FindFirstChild(\"SpawnLocation\")\n            character:PivotTo(spawnLocation.CFrame)\n        end)\n    end)\n\n    -- Save position on character removal\n    player.CharacterRemoving:Connect(function(character)\n        local position = character:GetPivot().Position\n        local success, err = pcall(function()\n            playerPositionStore:SetAsync(player.UserId, {position.X, position.Y, position.Z})\n            print(\"Saved player position!\")\n        end)\n        if not success then\n            warn(\"Failed to save position for player \" .. player.Name .. \": \" .. err)\n        end\n    end)\nend\n\nPlayers.PlayerAdded:Connect(positionHandler)\n```\n\n----------------------------------------\n\nTITLE: Assigning a String Value to a Variable in Luau\nDESCRIPTION: This snippet demonstrates assigning the string \"Porcupines\" to the local variable myAnimal. It emphasizes the use of an assignment operator '=' and the need for quotation marks around string literals in Luau.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-1/create-a-script.md#_snippet_2\n\nLANGUAGE: Luau\nCODE:\n```\nlocal myAnimal = \"Porcupines\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Match in Roblox Lua\nDESCRIPTION: This Lua module (`MatchManager`) handles the preparation phase of a game match in a Roblox environment. It requires modules for player management, game settings, and a custom timer. It defines functions to handle timer completion (`timeUp`) and start the match timer (`startTimer`) based on game settings. The main function `MatchManager.prepareGame` is responsible for sending players to the match area and firing a `MatchStart` event. The module connects the `MatchStart` event to the `startTimer` function.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/battle-royale-series/timers-and-events.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal MatchManager = {}\n\n-- Services\nlocal ServerStorage = game:GetService(\"ServerStorage\")\n\n-- Module Scripts\nlocal moduleScripts = ServerStorage:WaitForChild(\"ModuleScripts\")\nlocal playerManager = require(moduleScripts:WaitForChild(\"PlayerManager\"))\nlocal gameSettings = require(moduleScripts:WaitForChild(\"GameSettings\"))\nlocal timer = require(moduleScripts:WaitForChild(\"Timer\"))\n\n-- Events\nlocal events = ServerStorage:WaitForChild(\"Events\")\nlocal matchStart = events:WaitForChild(\"MatchStart\")\nlocal matchEnd = events:WaitForChild(\"MatchEnd\")\n\n-- Creates a new timer object to be used to keep track of match time.\nlocal myTimer = timer.new()\n\n-- Local Functions\nlocal function timeUp()\n\tprint(\"Time is up!\")\nend\n\nlocal function startTimer()\n\tprint(\"Timer started\")\n\tmyTimer:start(gameSettings.matchDuration)\n\tmyTimer.finished:Connect(timeUp)\nend\n\n-- Module Functions\nfunction MatchManager.prepareGame()\n\tplayerManager.sendPlayersToMatch()\n\tmatchStart:Fire()\nend\n\nmatchStart.Event:Connect(startTimer)\n\nreturn MatchManager\n```\n\n----------------------------------------\n\nTITLE: Setting Up Player Points Value in Leaderstats with Luau\nDESCRIPTION: Adds an 'IntValue' object named 'Points' with an initial value of 0 to the player's 'leaderstats' folder. This value displays on the leaderboard and updates as the player's score changes. Dependencies include a preexisting leaderstats folder within the Player. Parameters are player (Player instance); outputs are side-effects in the DataModel hierarchy.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/scripting/basic-scripting/score-points.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nlocal function onPlayerAdded(player)\n  local leaderstats = Instance.new(\"Folder\")\n  leaderstats.Name = \"leaderstats\"\n  leaderstats.Parent = player\n\n  local points = Instance.new(\"IntValue\")\n  points.Name = \"Points\"\n  points.Value = 0\n  points.Parent = leaderstats\nend\n\nPlayers.PlayerAdded:Connect(onPlayerAdded)\n```\n\n----------------------------------------\n\nTITLE: Using Anchors (^ and $) for Pattern Matching at String Boundaries in Lua\nDESCRIPTION: Demonstrates how to match patterns at the beginning or end of strings using Lua's string.match with '^' and '$'. It shows matching exact substrings at specific positions and combining anchors for full string matches. Prerequisites include Lua's standard string library; inputs are strings, and outputs are matched substrings or nil.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/strings.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal start1 = string.match(\"first second third\", \"^first\")  -- Matches because \"first\" is at the beginning\nprint(start1)  --> first\n\nlocal start2 = string.match(\"third second first\", \"^first\")  -- Doesn't match\nprint(start2)  --> nil\n\nlocal end1 = string.match(\"first second third\", \"third$\")  -- Matches because \"third\" is at the end\nprint(end1)  --> third\n\nlocal end2 = string.match(\"third second first\", \"third$\")  -- Doesn't match\nprint(end2)  --> nil\n\n```\n\nLANGUAGE: Lua\nCODE:\n```\n-- Using both ^ and $ to match entire strings\nlocal match1 = string.match(\"Roblox\", \"^Roblox$\")  -- Exact match of entire string\nprint(match1)  --> Roblox\n\nlocal match2 = string.match(\"I play Roblox\", \"^Roblox$\")  -- Does not match\nprint(match2)  --> nil\n\nlocal match3 = string.match(\"I play Roblox\", \"Roblox\")  -- Contains \"Roblox\" somewhere\nprint(match3)  --> Roblox\n```\n\n----------------------------------------\n\nTITLE: Play Collision Sound With IsPlaying Debounce Roblox Lua\nDESCRIPTION: Applies a debounce pattern to a `Touched` event handler that plays a sound. It uses the `Sound.IsPlaying` property as a flag to prevent starting the sound playback if the sound is already active, avoiding sound overlap or retriggering before the previous play finishes.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/scripting/debounce.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal projectile = script.Parent\n\nlocal function playSound()\n\t-- Find child sound on the part\n\tlocal sound = projectile:FindFirstChild(\"Impact\")\n\t-- Play the sound only if it's not already playing\n\tif sound and not sound.IsPlaying then\n\t\tsound:Play()\n\tend\nend\n\nprojectile.Touched:Connect(playSound)\n```\n\n----------------------------------------\n\nTITLE: Updating Task Progress and Managing Timed Tasks in Roblox Lua\nDESCRIPTION: Provides example Lua functions to manipulate mission tasks in Roblox using the Missions feature package. This snippet shows how to add progress to count tasks, start and stop timers for timed tasks, and update counters which multiple tasks can track simultaneously. Dependencies include the Missions and CounterSystem modules. Inputs are a player object, mission ID, task ID, and values such as the amount to add or timer commands. Outputs are updates of player-specific mission progress and counters on the server side, enabling task completion tracking.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/feature-packages/missions.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Increases progress on a mission Jumping with a Jumps task\nMissions.addProgressToTask(player, \"Jumping\", \"Jumps\", 1)\n\n-- Starts the timer on a mission BattlingTime with a TimeInBattle task\nMissions.startTimedTask(player, \"BattlingTime\", \"TimeInBattle\")\n\n-- Stops the timer on a mission BattlingTime with a TimeInBattle task\nMissions.stopTimedTask(player, \"BattlingTime\", \"TimeInBattle\")\n\n-- Increases the progress on all tasks tied to the Jumps counter\nCounterSystem.addCounter(player, \"Jumps\", 1)\n\n-- Starts the timer on all timed tasks tied to the TimeInBattle timer counter\nCounterSystem.startTimer(player, \"TimeInBattle\")\n\n-- Stops the timer on all timed tasks tied to the TimeInBattle timer counter\nCounterSystem.stopTimer(player, \"TimeInBattle\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Remote Function for Subscription Status (Lua)\nDESCRIPTION: This server-side script creates a `RemoteFunction` to allow clients to request subscription status. It uses `MarketplaceService:GetUserSubscriptionStatusAsync` to determine the status and returns the result to the client. It is designed to be invoked from the client using `InvokeServer`. This allows the client to check for the subscription without directly calling `GetUserSubscriptionStatusAsync`. Dependencies include the `ReplicatedStorage` service and the `MarketplaceService`.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/production/monetization/subscriptions.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\n--This code should run on the server\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\n-- Create a RemoteFunction that the client can use to request the subscription status\nlocal getSubscriptionStatusRemote = Instance.new(\"RemoteFunction\")\ngetSubscriptionStatusRemote.Name = \"GetSubscriptionStatus\"\ngetSubscriptionStatusRemote.Parent = ReplicatedStorage\n\ngetSubscriptionStatusRemote.OnServerInvoke = function(player: Player, subscriptionId: string)\n\tassert(typeof(subscriptionId) == \"string\")\n\n\treturn MarketplaceService:GetUserSubscriptionStatusAsync(player, subscriptionId)\nend\n```\n\n----------------------------------------\n\nTITLE: Roblox Lua script for gumdrop collection and door opening with 3D audio feedback\nDESCRIPTION: This Lua script manages gumdrop collection by players, updates the leaderboard, plays a non-positional sound when gumdrops are collected, and triggers a positional sound for the door opening. It ensures players receive feedback through both UI updates and spatial audio cues, allowing awareness of collected items and game state changes in the 3D space.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/audio/add-3D-audio.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\n-- Initializing variables\nlocal Workspace = game:GetService(\"Workspace\")\nlocal Players = game:GetService(\"Players\")\nlocal ServerStorage = game:GetService(\"ServerStorage\")\nlocal TweenService = game:GetService(\"TweenService\")\n\n-- Modules\nlocal Leaderboard = require(ServerStorage.Leaderboard)\nlocal PlayerData = require(ServerStorage.PlayerData)\n\n-- Variables\nlocal gumdropsFolder = Workspace.Gumdrops\nlocal gumdrops = gumdropsFolder:GetChildren()\n\nlocal GUMDROP_KEY_NAME = PlayerData.GUMDROP_KEY_NAME\nlocal GUMDROP_AMOUNT_TO_ADD = 1\n\nlocal function updatePlayerGumdrops(player, updateFunction)\n\t-- Update the gumdrop table\n\tlocal newGumdropAmount = PlayerData.updateValue(player, GUMDROP_KEY_NAME, updateFunction)\n\n\t-- Update the gumdrop leaderboard\n\tLeaderboard.setStat(player, GUMDROP_KEY_NAME, newGumdropAmount)\n\n\t-- Check if the player has collected three gumdrops\n\tif newGumdropAmount >= 3 then\n\t\t\n\t\t-- Play the door event audio when the player collects three gumdrops\n\t\taudioPlayer = Workspace.Door.AudioPlayer\n\t\taudioPlayer:Play()\n\n\t\t-- Animate the door to move downward\n\t\tlocal doorPart = Workspace.Door\n\t\tlocal tweenInfo = TweenInfo.new(2, Enum.EasingStyle.Linear)\n\t\tlocal tween = TweenService:Create(doorPart, tweenInfo, {Position = doorPart.Position + Vector3.new(0, -15, 0)})\n\t\ttween:Play()\n\tend\nend\n\n-- Defining the event handler\nlocal function onGumdropTouched(otherPart, gumdrop)\n\tif gumdrop:GetAttribute(\"Enabled\") then\n\t\tlocal character = otherPart.Parent\n\t\tlocal player = Players:GetPlayerFromCharacter(character)\n\t\tif player then\n\t\t\t-- Player touched a gumdrop\n\t\t\t\n\t\t\tlocal audioPlayer = gumdrop.AudioPlayer\n\t\t\taudioPlayer:Play()\n\t\t\n\t\t\tgumdrop.Transparency = 1\n\t\t\tgumdrop:SetAttribute(\"Enabled\", false)\n\t\t\tupdatePlayerGumdrops(player, function(oldGumdropAmount)\n\t\t\t\toldGumdropAmount = oldGumdropAmount or 0\n\t\t\t\treturn oldGumdropAmount + GUMDROP_AMOUNT_TO_ADD\n\t\t\tend)\n\t\t\tprint(\"Player collected gumdrop\")\n\t\tend\n\tend\nend\n\n-- Setting up event listeners\nfor _, gumdrop in gumdrops do\n\tgumdrop:SetAttribute(\"Enabled\", true)\n\tgumdrop.Touched:Connect(function(otherPart)\n\t\tonGumdropTouched(otherPart, gumdrop)\n\tend)\nend\n```\n\n----------------------------------------\n\nTITLE: Firing Laser Event to Server - Luau\nDESCRIPTION: This snippet shows the client firing a `LaserFired` RemoteEvent to the server with the hit position as an argument. This event indicates that the client has fired their weapon. This allows the server to tell other players to also render the laser beam. It utilizes the `LaserRenderer` module to create the laser. Requires a reference to ReplicatedStorage and the `LaserFired` remote event. The input is the calculated `hitPosition` from a raycast.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/scripting/intermediate-scripting/hit-detection-with-lasers.md#_snippet_18\n\nLANGUAGE: lua\nCODE:\n```\nhitPosition = tool.Handle.Position + directionVector\nend\n\ntimeOfPreviousShot = tick()\n\neventsFolder.LaserFired:FireServer(hitPosition)\nLaserRenderer.createLaser(tool.Handle, hitPosition)\n```\n\n----------------------------------------\n\nTITLE: Positioning Roblox Part with CFrame.new(x, y, z) (Lua)\nDESCRIPTION: Demonstrates how to set a Roblox Part's position by creating a new CFrame with specified absolute x, y, and z coordinates using the `CFrame.new(x, y, z)` constructor and assigning it to the part's `.CFrame` property. Requires access to a `Part` object (e.g., `redBlock`) in the Workspace. The Part's position is set to (-2, 2, 4).\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/workspace/cframes.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal redBlock = Workspace.RedBlock\n\n-- Create new CFrame\nlocal newCFrame = CFrame.new(-2, 2, 4)\n\n-- Overwrite redBlock's current CFrame with new CFrame\nredBlock.CFrame = newCFrame\n```\n\n----------------------------------------\n\nTITLE: Implementing PartTouched Function Luau\nDESCRIPTION: This code snippet shows how to define the `partTouched()` function. This function checks if a player's character touches the finish line. If it does, it calls the `finish()` function. It also includes a `finishLine.Touched:Connect(partTouched)` statement to connect the function to the part's touch event.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-3/multiple-conditions.md#_snippet_4\n\nLANGUAGE: Luau\nCODE:\n```\nlocal function finish()\n   print(\"touched the finish line\")\nend\n\nlocal function partTouched(otherPart)\n   local character = otherPart.Parent\n   local humanoid = character:FindFirstChildWhichIsA(\"Humanoid\")\n   if humanoid then\n      finish()\n   end\n\nend\n\nfinishLine.Touched:Connect(partTouched)\n```\n\n----------------------------------------\n\nTITLE: Updating Blaster State and Force Field on Player State Change - Roblox - Luau\nDESCRIPTION: This Luau function is triggered whenever a player's `playerState` attribute changes. It determines the appropriate `blasterStateServer` based on the new player state, setting it to 'Ready' only if the player state is 'Playing'. If the new state is 'Playing', it also schedules logic to destroy the player's force field.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/gameplay-scripting/spawn-respawn.md#_snippet_6\n\nLANGUAGE: Luau\nCODE:\n```\nlocal function onPlayerStateChanged(player: Player, newPlayerState: string)\n\t-- Blaster state is 'Ready' only if player state is 'Playing'\n\tlocal newBlasterState = if newPlayerState == PlayerState.Playing then BlasterState.Ready else BlasterState.Disabled\n\n\t-- Schedule the destroy force field logic when the player begins playing\n\tif newPlayerState == PlayerState.Playing then\n\t\tscheduleDestroyForceField(player)\n\tend\n\n\tplayer:SetAttribute(PlayerAttribute.blasterStateServer, newBlasterState)\nend\n```\n\n----------------------------------------\n\nTITLE: Calling Timer Start on Humanoid Detection in Roblox - Lua\nDESCRIPTION: Enhances the buttonPressed function to invoke startTimer only if a humanoid is detected. Ensures that only players can trigger the timer, not arbitrary objects. Expects the function to be used as the callback for a Touched event. Inputs: otherPart (touched part).\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-4/create-a-timed-bridge.md#_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\nlocal function buttonPressed(otherPart)\n   local character = otherPart.Parent\n   local humanoid = character:FindFirstChildWhichIsA(\"Humanoid\")\n   if humanoid then\n      startTimer()\n   end\nend\n```\n\n----------------------------------------\n\nTITLE: Check if player can open chest - Lua\nDESCRIPTION: This code defines a function `canOpenChest` within the TreasureManager module to check if a player has enough keys to open a chest. It takes the player's character as input, retrieves the player's keys, and returns true if the player has enough keys and false if they don't.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-6/create-with-module-scripts.md#_snippet_12\n\nLANGUAGE: Lua\nCODE:\n```\nfunction TreasureManager.canOpenChest(whichCharacter)\n\tlocal playerKeys = getPlayerKeys(whichCharacter)\n\tif playerKeys.Value >= chestPickCost then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Handling User Input and Activating Blaster (Lua)\nDESCRIPTION: This client script connects the blast functionality with user input. It listens for touch activation on the blaster button and binds it to the `attemptBlastClient` function. The script also binds MouseButton1 and ButtonR2 to trigger `attemptBlastClient` to support alternative input methods. `attemptBlastClient` function is responsible for initiating a blast.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/user-interface-design/implement-designs-in-studio.md#_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\nlocal ContextActionService = game:GetService(\"ContextActionService\")\nlocal Players = game:GetService(\"Players\")\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal attemptBlastClient = require(ReplicatedStorage.Blaster.attemptBlastClient)\n\nlocal function onBlasterActivated(_actionName: string, inputState: Enum.UserInputState, _inputObject: InputObject)\n\tif inputState == Enum.UserInputState.Begin then\n\t\tattemptBlastClient()\n\tend\nend\n\n-- Listen for activation input\n-- An 'actionName' is irrelevant as we never unbind the action\nContextActionService:BindAction(\"_\", onBlasterActivated, false, Enum.UserInputType.MouseButton1, Enum.KeyCode.ButtonR2)\n\n-- Listen for touch activation on the HUD blast button\nlocal HUDGui = Players.LocalPlayer.PlayerGui:WaitForChild(\"HUDGui\")\nlocal blastButton = HUDGui.BlastButton\nblastButton.MouseButton1Down:Connect(attemptBlastClient)\n```\n\n----------------------------------------\n\nTITLE: Using RewardManager Module in Script to Award Coins in Roblox Lua\nDESCRIPTION: Demonstrates how to require the RewardManager module from ServerStorage and call the getCoinReward function from another script. The awarded coin amount for 'easy' difficulty is retrieved and printed. This snippet exemplifies how module scripts facilitate modular, reusable game logic from separate scripts, simplifying project code structure.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-6/intro-to-module-scripts.md#_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlocal ServerStorage = game:GetService(\"ServerStorage\")\n\n-- Load module script\nlocal RewardManager = require(ServerStorage.RewardManager)\n\n--Calls function from module script\nlocal coins = RewardManager.getCoinReward(\"easy\")\nprint(\"Should award \" .. coins .. \" coins\")\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Metatables in Lua\nDESCRIPTION: Demonstrates assigning a metatable (`metaTable`) to a table (`x`) using `setmetatable` and retrieving it using `getmetatable`. It highlights that metatables are themselves Lua tables.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/metatables.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal x = {}\nlocal metaTable = {} -- metaTables are tables, too!\nsetmetatable(x, metaTable) -- Give x a metatable called metaTable!\nprint(getmetatable(x)) --> table: [hexadecimal memory address]\n```\n\n----------------------------------------\n\nTITLE: Complete trap script with destroy functionality in Roblox Lua\nDESCRIPTION: This completed script creates a trap that destroys any object that touches it. It uses a parameter to access the touching object and the Destroy method to remove it from the game.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-2/use-parameters-and-events.md#_snippet_4\n\nLANGUAGE: Lua\nCODE:\n```\nlocal trap = script.Parent\n\nlocal function onTouch(objectTouched)\n    print(\"Something touched the trap\")\n    -- Destroy the touching object\n    objectTouched:Destroy()\nend\n\ntrap.Touched:Connect(onTouch)\n```\n\n----------------------------------------\n\nTITLE: Defining Function Types Using the (in) -> out Syntax in Luau Lua\nDESCRIPTION: Shows how to create named function types using Luau's functional type syntax. These type aliases represent the shape of functions to be used throughout code or for function parameters. It supports specifying argument types and return types.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/type-checking.md#_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\ntype add = (x: number, y: number) -> number\ntype FindSource = (script: BaseScript, pattern: string) -> (string, number)\n```\n\n----------------------------------------\n\nTITLE: Example Code with RunService and Profiling\nDESCRIPTION: This code sample demonstrates profiling a function connected to the `RunService.PreSimulation` event. It simulates \"hard work\" by swapping variables repeatedly.  This example shows how to integrate the profiling functions to measure and optimize the execution time of the code that runs in the game. It relies on the `RunService` for accessing the `PreSimulation` event. The example serves as a testbed for performance profiling in roblox.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/studio/microprofiler/index.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal RunService = game:GetService(\"RunService\")\n\nlocal function onPreSimulation()\n\tdebug.profilebegin(\"Hard Work\")\n\t-- Example hard work: swap two variables 200,000 times\n\tlocal a, b = 0, 1\n\tfor _ = 1, 200000 do\n\t\ta, b = b, a\n\tend\n\tdebug.profileend()\nend\nRunService.PreSimulation:Connect(onPreSimulation)\n```\n\n----------------------------------------\n\nTITLE: Detecting and Handling NaN and Inf Values - Luau\nDESCRIPTION: This Luau code defines two functions, `isNaN` and `isInf`, to detect `NaN` (Not a Number) and infinite number values respectively. This is necessary because `NaN` values and infinite values can cause issues if an exploiter sends them and they're not handled correctly. `isNaN` returns `true` if the provided number is `NaN`, and `isInf` returns `true` if the absolute value of the number is equal to `math.huge` (either positive or negative infinity). These functions can be used to validate user input and prevent unexpected behavior or server-side errors.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/scripting/security/security-tactics.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nlocal function isNaN(n: number): boolean\n\t-- NaN is never equal to itself\n\treturn n ~= n\nend\n\nlocal function isInf(n: number): boolean\n\t-- Number could be -inf or inf\n\treturn math.abs(n) == math.huge\nend\n```\n\n----------------------------------------\n\nTITLE: Resetting Scoreboard and Team Points in Roblox Lua\nDESCRIPTION: This Lua function, intended to be used in ServerScriptService under the Gameplay/Scoring hierarchy, resets individual player scores and team point attributes to zero at the start of a round. It requires access to the Players and Teams services, and a constant or global called GuiAttribute.teamPoints. Input: none, Output: all scores and team points set to 0. Ensure leaderstats and Points exist on all players, and teamPoints attribute exists for all teams.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/gameplay-scripting/add-rounds.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nfunction Scoring.resetScores()\n\tfor _, player in Players:GetPlayers() do\n\t\tplayer.leaderstats.Points.Value = 0\n\tend\n\n\tfor _, team in Teams:GetTeams() do\n\t\tteam:SetAttribute(GuiAttribute.teamPoints, 0)\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Navigating UIPageLayout Pages via Roblox Studio Command Bar\nDESCRIPTION: Provides Lua commands for the Roblox Studio Command Bar to navigate pages within a selected `UIPageLayout` object during the editing phase. These commands allow developers to preview different UI pages without needing to run the experience. They retrieve the selected `UIPageLayout` and call its navigation methods (`Next()`, `Previous()`, `JumpToIndex()`).\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/ui/page-layouts.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\ngame:GetService(\"Selection\"):Get()[1]:Next()\n```\n\nLANGUAGE: lua\nCODE:\n```\ngame:GetService(\"Selection\"):Get()[1]:Previous()\n```\n\nLANGUAGE: lua\nCODE:\n```\ngame:GetService(\"Selection\"):Get()[1]:JumpToIndex(0)\n```\n\n----------------------------------------\n\nTITLE: Updating Dictionary Key Values and Outputting Changes - Lua\nDESCRIPTION: Shows how to modify the value of an existing dictionary key—assigning a new string to 'enemy.Name'—then printing the updated value. Useful for dynamic state tracking. No dependencies; expects the enemy dictionary structure from prior examples.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-5/intro-to-dictionaries.md#_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nlocal enemy = {\n\tName = \"Spike\",\n\tHealth = 1000,\n}\n\nenemy.Name = \"Rana\"\n\nprint(\"The enemy's name is \" .. enemy.Name)\n```\n\n----------------------------------------\n\nTITLE: Configuring Storm Behavior Parameters in Lua\nDESCRIPTION: Defines the storm's core behavior parameters including its initial radius, timing before activation, debug scaling, and number of stages. Also includes the configuration for the first stage (stage 0) with properties for transition, wait time, damage, movement, and shrinkage.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/battle-royale/the-storm.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nstorm = {\n\tradius = 6000,\n\ttime_before_start = 120,\n\tdebug_time_scale = 1,\n\tnumber_of_stages = 10,\n\n\t-- stage 0 (show starting circle with no transition)\n\t{ transition_length = 0,\n\t\twait_length = 150,\n\t\tdamage = 1,\n\t\tmove_scale = 0,\n\t\tshrinkage_factor = 0 },\n```\n\n----------------------------------------\n\nTITLE: Implementing Grid-Based Snapping with UIDragDetector in Lua\nDESCRIPTION: This script sets up a UIDragDetector with a custom constraint function that forces dragged UI elements to snap to a grid. It divides the parent container into a specified number of rows and columns, then rounds any drag movement to align with the nearest grid position.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/ui/ui-drag-detectors.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Hierarchy is GridContainer ⟩ Handle ⟩ UIDragDetector ⟩ (this script)\nlocal gridContainer = script.Parent.Parent.Parent\nlocal handle = gridContainer:FindFirstChild(\"Handle\")  -- UI element to drag\nlocal uiDragDetector = handle:FindFirstChildWhichIsA(\"UIDragDetector\")\n\nuiDragDetector.ResponseStyle = Enum.UIDragDetectorResponseStyle.Scale  -- Set dragging by scale\nuiDragDetector.DragRelativity = Enum.UIDragDetectorDragRelativity.Relative\nuiDragDetector.BoundingUI = gridContainer\n\nlocal NUM_COLUMNS = 10\nlocal NUM_ROWS = 5\n\nlocal xScaleIncrement = 1 / NUM_COLUMNS\nlocal yScaleIncrement = 1 / NUM_ROWS\nlocal initialParentPosition = uiDragDetector.Parent.Position\n\nuiDragDetector.DragStart:Connect(function()\n\tinitialParentPosition = uiDragDetector.Parent.Position\nend)\n\nlocal function dragToGridOnly(proposedPosition, proposedRotation)\n\tlocal griddedXScale = math.round(proposedPosition.X.Scale / xScaleIncrement) * xScaleIncrement\n\tlocal griddedYScale = math.round(proposedPosition.Y.Scale / yScaleIncrement) * yScaleIncrement\n\n\treturn UDim2.fromScale(griddedXScale, griddedYScale), proposedRotation\nend\n\nuiDragDetector:AddConstraintFunction(1, dragToGridOnly)\n```\n\n----------------------------------------\n\nTITLE: Adding season pass progress to players after mission completion\nDESCRIPTION: This Lua code snippet implements a handler function that awards XP to players upon completing specific missions. It requires the 'SeasonPasses' module and updates a player's season progress via 'addProgressToSeason' based on mission IDs. Dependencies include the 'ReplicatedStorage.SeasonPasses' module, and it assumes a server-side script environment.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/feature-packages/season-passes.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal SeasonPasses = require(ReplicatedStorage.SeasonPasses.Server.SeasonPasses)\n\nlocal function completeHandler(player: Player, missionId: Types.MissionId)\n\tprint(`{player} completed mission {missionId}`)\n\tif missionId == \"Walking\" then\n\t\tSeasonPasses.addProgressToSeason(player, 100)\n\tend\n\tif missionId == \"Walking2\" then\n\t\tSeasonPasses.addProgressToSeason(player, 100)\n\tend\n\tif missionId == \"Walking3\" then\n\t\tSeasonPasses.addProgressToSeason(player, 100)\n\tend\n\tif missionId == \"Availability\" then\n\t\tSeasonPasses.addProgressToSeason(player, 100)\n\tend\n\tif missionId == \"Manual\" then\n\t\tSeasonPasses.addProgressToSeason(player, 100)\n\tend\n\tif missionId == \"Minutely\" then\n\t\tSeasonPasses.addProgressToSeason(player, 100)\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Firing Laser Blast Events from Client in Roblox Lua\nDESCRIPTION: This snippet demonstrates how the `blastClient` fires both bindable and remote events to notify other client scripts of a laser blast and inform the server of the blast event. It relies on event objects stored in `ReplicatedStorage` and assumes `blastData` is a table containing blast details.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/gameplay-scripting/implement-blasters.md#_snippet_5\n\nLANGUAGE: Lua\nCODE:\n```\nlocal laserBlastedBindableEvent = ReplicatedStorage.Instances.LaserBlastedBindableEvent\nlocal laserBlastedEvent = ReplicatedStorage.Instances.LaserBlastedEvent\n\nlaserBlastedBindableEvent:Fire(blastData)\nlaserBlastedEvent:FireServer(blastData)\n```\n\n----------------------------------------\n\nTITLE: Writing and Modifying Key-Value Pairs in Dictionaries in Luau - Lua\nDESCRIPTION: Demonstrates updating existing dictionary entries and inserting new key-value pairs using bracket notation. Prints changed and newly added values to verify correctness. Uses standard dictionary syntax; requires initialization of dictionary with sample data; modifies entries dynamically.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/tables.md#_snippet_11\n\nLANGUAGE: lua\nCODE:\n```\nlocal testDictionary = {\n\tfruitName = \"Lemon\",\n\tsour = true\n}\n\n-- Change value of existing keys\ntestDictionary[\"fruitName\"] = \"Cherry\"\ntestDictionary[\"sour\"] = false\n\n-- Insert new key-value pair\ntestDictionary[\"fruitCount\"] = 10\n\nprint(testDictionary[\"fruitName\"]) -- Cherry\nprint(testDictionary[\"sour\"]) -- false\nprint(testDictionary[\"fruitCount\"]) -- 10\n```\n\n----------------------------------------\n\nTITLE: Raycasting to Detect Collisions in Lua\nDESCRIPTION: This snippet performs the raycast operation using `workspace:Raycast()`. It uses the origin of the `screenToWorldRay` and the calculated `directionVector` to define the ray's starting point and direction, then assigns the results to the `raycastResult` variable. The result can be either nil or a `Datatype.RaycastResult` containing collision information.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/scripting/intermediate-scripting/hit-detection-with-lasers.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\n-- Raycast from the ray's origin towards its direction\nlocal raycastResult = workspace:Raycast(screenToWorldRay.Origin, directionVector)\n```\n\n----------------------------------------\n\nTITLE: Automatic Conversion of Imported Objects in Roblox Studio\nDESCRIPTION: Roblox Studio automatically converts certain named objects from imported 3D files into specific workspace objects. Objects ending with `_Att` become `Attachment`s. Objects named `_OuterCage` become `WrapTarget`s. Pairs named `_InnerCage` and `_OuterCage` become `WrapLayer`s. Models with appropriate facial data create `FaceControls`.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/modeling/index.md#_snippet_1\n\nLANGUAGE: Roblox API\nCODE:\n```\nClass.Attachment\n```\n\nLANGUAGE: Roblox API\nCODE:\n```\nClass.WrapTarget\n```\n\nLANGUAGE: Roblox API\nCODE:\n```\nClass.WrapLayer\n```\n\nLANGUAGE: Roblox API\nCODE:\n```\nClass.FaceControls\n```\n\n----------------------------------------\n\nTITLE: Outputting Player Points After Assignment - Lua\nDESCRIPTION: Extends the previous handler by printing both the player's name and their points after assignment. Shows reading and writing keys with variable values and composes the final output message for verification.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-5/intro-to-dictionaries.md#_snippet_13\n\nLANGUAGE: lua\nCODE:\n```\nlocal function setPoints(newPlayer)\n\tlocal name = newPlayer.Name\n\tprint(\"hello \" .. name)\n\tplayerPoints[name] = 0\n\tprint(name .. \" has \" .. playerPoints[name] .. \" points.\")\nend\n```\n\n----------------------------------------\n\nTITLE: Get Winner Name - PlayerManager (Lua)\nDESCRIPTION: This function retrieves the name of the winning player from the active players table. It checks if a player exists at the first index and returns their name, otherwise, it returns an error message. This function is part of the PlayerManager module.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/battle-royale-series/cleanup-and-reset.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nfunction PlayerManager.getWinnerName()\n  local winningPlayer = activePlayers[1]\n\n  if winningPlayer then\n    return winningPlayer.Name\n  else\n    return \"Error: No winning player found\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using an Anonymous Function as a Callback for table.sort\nDESCRIPTION: Demonstrates passing an anonymous function as a callback to the `table.sort` function. The callback compares the `Name` property of two `Player` objects to sort a list of players alphabetically. Requires the Roblox environment, `Players` service, and `Player` objects.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/functions.md#_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\nlocal sortedPlayers = Players:GetPlayers()\n\ntable.sort(sortedPlayers, function(a, b)\n\t-- Use an anonymous callback to sort players by name\n\treturn a.Name < b.Name\nend)\n```\n\n----------------------------------------\n\nTITLE: Connecting PlayerAdded Event in Lua\nDESCRIPTION: This snippet connects the `onPlayerJoin()` function to the `PlayerAdded` event of the `Players` service. This ensures that the `onPlayerJoin()` function is called whenever a new player joins the game, effectively setting their respawn location to the lobby spawn. This event connection establishes the mechanism for spawning players in the lobby upon joining.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/battle-royale-series/managing-players.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\n-- Module Functions\nfunction PlayerManager.sendPlayersToMatch()\n\tprint(\"Sending players to match\")\nend\n\n-- Events\nPlayers.PlayerAdded:Connect(onPlayerJoin)\n```\n\n----------------------------------------\n\nTITLE: Performing SubtractAsync() on BaseParts in Roblox Lua\nDESCRIPTION: This snippet illustrates how to subtract multiple parts from a primary part using SubtractAsync() in Roblox Lua. It includes error handling via pcall, positioning the resulting subtraction at the initial location, and removing the original parts after the operation. Required dependencies involve Roblox's 'game:GetService'. Key parameters are the main part and an array of parts to subtract. The output is a new subtract operation part integrated into the workspace at the original position.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/parts/solid-modeling.md#_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal mainPart = Workspace.Part1\nlocal otherParts = {Workspace.Part2, Workspace.Part3, Workspace.Part4}\n\n-- Perform subtract operation\nlocal success, newSubtract = pcall(function()\n\treturn mainPart:SubtractAsync(otherParts)\nend)\n\n-- If operation succeeds, position it at the same location and parent it to the workspace\nif success and newSubtract then\n\tnewSubtract.Position = mainPart.Position\n\tnewSubtract.Parent = Workspace\nend\n\n-- Destroy original parts which remain intact after operation\nmainPart:Destroy()\nfor _, part in otherParts do\n\tpart:Destroy()\nend\n```\n\n----------------------------------------\n\nTITLE: Firing RemoteEvent with Non-Replicated Client Instance to Server, Resulting in Nil - Lua\nDESCRIPTION: Demonstrates that instances created on the client (e.g., parts parented to Workspace locally) are not visible to the server and are therefore received as `nil` when passed via RemoteEvent. Creates a Part locally and fires it to the server using FireServer, illustrating client-server replication boundaries.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/scripting/events/remote.md#_snippet_19\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal remoteEvent = ReplicatedStorage:FindFirstChildOfClass(\"RemoteEvent\")\n\n-- Will be received as \"nil\" because the server doesn't know about this part\nlocal clientPart = Instance.new(\"Part\")\nclientPart.Parent = Workspace\n\nremoteEvent:FireServer(clientPart)\n```\n\n----------------------------------------\n\nTITLE: Initializing Blaster Buttons UI in Roblox Lua\nDESCRIPTION: This Lua module script initializes blaster selection buttons within a Roblox ScreenGui by creating a button for each blaster configuration stored in ReplicatedStorage.LaserBlastersFolder. It clones a prefab button, sets its visual properties such as image and layout order based on each configuration's attributes, and manages user interaction by listening for button activations which update the selected index attribute on the GUI. The script also establishes connections to navigation and select button setup modules and reacts to changes in selection by invoking an update function. Dependencies include various setup modules and a shared GuiAttribute module. The input is a ScreenGui object, and the output is a populated UI with functioning blaster buttons reflecting the current selection state.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/user-interface-design/implement-designs-in-studio.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal setupSelectButton = require(script.setupSelectButton)\nlocal setupNavButtons = require(script.setupNavButtons)\nlocal updateSelectedIndex = require(script.updateSelectedIndex)\nlocal GuiAttribute = require(ReplicatedStorage.GuiAttribute)\n\nlocal laserBlastersFolder = ReplicatedStorage.Instances.LaserBlastersFolder\nlocal blasterButtonPrefab = ReplicatedStorage.Instances.Guis.BlasterButtonPrefab\n\nlocal function setupBlasterButtons(gui: ScreenGui)\n\tlocal frame = gui.Frame.SelectionFrame.Frame\n\tlocal blasterButtonContainer = frame.Container\n\tlocal blasterButtons = {}\n\n\tlocal function createBlasterButton(blasterConfiguration: Configuration)\n\t\tlocal index = blasterConfiguration:GetAttribute(\"iconLayoutOrder\")\n\n\t\tlocal blasterButton = blasterButtonPrefab:Clone()\n\t\t-- Name the blaster button the same as the blaster, so we can read the name\n\t\t-- of the button later to get the associated blaster type\n\t\tblasterButton.Name = blasterConfiguration.Name\n\t\tblasterButton.ImageLabel.Image = blasterConfiguration:GetAttribute(\"iconId\")\n\t\tblasterButton.LayoutOrder = index\n\t\tblasterButton.Parent = blasterButtonContainer\n\n\t\tblasterButton.Activated:Connect(function()\n\t\t\tgui:SetAttribute(GuiAttribute.selectedIndex, index)\n\t\tend)\n\n\t\ttable.insert(blasterButtons, index, blasterButton)\n\tend\n\n\tfor _, blaster in laserBlastersFolder:GetChildren() do\n\t\tcreateBlasterButton(blaster)\n\tend\n\n\t-- Setup other buttons that depend on the generated blasterButtons\n\tsetupSelectButton(gui, blasterButtons)\n\tsetupNavButtons(gui, blasterButtons)\n\n\t-- Change blaster buttons appearance when they are selected or deselected\n\tgui:GetAttributeChangedSignal(GuiAttribute.selectedIndex):Connect(function()\n\t\tlocal newIndex = gui:GetAttribute(GuiAttribute.selectedIndex)\n\t\tupdateSelectedIndex(newIndex, blasterButtons)\n\tend)\nend\n\nreturn setupBlasterButtons\n```\n\n----------------------------------------\n\nTITLE: Creating a Path with Custom Costs in Lua\nDESCRIPTION: Code snippet showing how to create a pathfinding path with custom costs for water and boat usage. This allows the pathfinding system to prefer using the boat link over traversing through water.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/characters/pathfinding.md#_snippet_5\n\nLANGUAGE: Lua\nCODE:\n```\nlocal PathfindingService = game:GetService(\"PathfindingService\")\nlocal Players = game:GetService(\"Players\")\nlocal RunService = game:GetService(\"RunService\")\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal path = PathfindingService:CreatePath({\n\tCosts = {\n\t\tWater = 20,\n\t\tUseBoat = 1\n\t}\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing and Managing Player Team Indicators in Lua\nDESCRIPTION: This Lua script, intended for `ReplicatedStorage`, manages the display of team indicators above other players' heads in a Roblox game. It listens for player spawns and team changes, cloning a predefined `OtherPlayerIndicatorPrefab` BillboardGui from `ReplicatedStorage`, parenting it to the player's head, and setting its color based on the player's team. The script ensures indicators are always visible for teammates (`AlwaysOnTop = true`) but are occluded by obstacles for enemy players (`AlwaysOnTop = false`). It handles adding indicators when players join or respawn and removing them when the local player is not on a team.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/user-interface-design/implement-designs-in-studio.md#_snippet_24\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal localPlayer = Players.LocalPlayer\nlocal otherPlayerIndicatorPrefab = ReplicatedStorage.Instances.Guis.OtherPlayerIndicatorPrefab\n\nlocal characterSpawnConnectionsByPlayer: { [Player]: RBXScriptConnection } = {}\nlocal playerAddedConnection: RBXScriptConnection?\n\nlocal function removeIndicatorFromPlayer(player: Player)\n\tif not player.Character then\n\t\treturn\n\tend\n\n\tlocal head = player.Character:WaitForChild(\"Head\", 3)\n\tif not head then\n\t\treturn\n\tend\n\n\tlocal gui = head:FindFirstChild(otherPlayerIndicatorPrefab.Name)\n\tif gui then\n\t\tgui:Destroy()\n\tend\nend\n\nlocal function addIndicatorToCharacter(otherCharacter: Model?)\n\tlocal otherPlayer = Players:GetPlayerFromCharacter(otherCharacter)\n\tif not otherPlayer then\n\t\treturn\n\tend\n\n\ttask.spawn(function()\n\t\tlocal otherHead = otherCharacter:WaitForChild(\"Head\", 3)\n\t\tif not otherHead then\n\t\t\treturn\n\t\tend\n\n\t\t-- Only add indicators to players participating in the round\n\t\tif not otherPlayer.Team then\n\t\t\treturn\n\t\tend\n\n\t\t-- Avoid adding duplicate indicators, creating a new one only if it doesn't exist\n\t\tlocal gui = otherHead:FindFirstChild(otherPlayerIndicatorPrefab.Name)\n\t\tif not gui then\n\t\t\tgui = otherPlayerIndicatorPrefab:Clone()\n\t\t\tgui.Frame.BackgroundColor3 = otherPlayer.TeamColor.Color\n\t\t\tgui.Parent = otherHead\n\t\tend\n\n\t\t-- The indicator is always on top only if the player is friendly\n\n\t\tlocal isFriendly = otherPlayer.Team == localPlayer.Team\n\t\tgui.AlwaysOnTop = isFriendly\n\tend)\nend\n\nlocal function addIndicatorWhenCharacterSpawns(player: Player)\n\tif characterSpawnConnectionsByPlayer[player] then\n\t\treturn\n\tend\n\tlocal connection = player.CharacterAdded:Connect(addIndicatorToCharacter)\n\tcharacterSpawnConnectionsByPlayer[player] = connection\nend\n\nlocal function stopSyncingIndicators()\n\tfor _, connection in characterSpawnConnectionsByPlayer do\n\t\tconnection:Disconnect()\n\tend\n\ttable.clear(characterSpawnConnectionsByPlayer)\n\n\tif playerAddedConnection then\n\t\tplayerAddedConnection:Disconnect()\n\t\tplayerAddedConnection = nil\n\tend\n\n\tfor _, player in Players:GetPlayers() do\n\t\tremoveIndicatorFromPlayer(player)\n\tend\nend\n\nlocal function addIndicatorToPlayer(player: Player)\n\tif player == localPlayer then\n\t\treturn\n\tend\n\n\taddIndicatorToCharacter(player.Character)\n\taddIndicatorWhenCharacterSpawns(player)\nend\n\nlocal function startSyncingIndicators()\n\tfor _, player in Players:GetPlayers() do\n\t\taddIndicatorToPlayer(player)\n\tend\n\n\tif not playerAddedConnection then\n\t\tplayerAddedConnection = Players.PlayerAdded:Connect(addIndicatorToPlayer)\n\tend\nend\n\nlocal function onLocalTeamChanged()\n\tlocal localTeam = localPlayer.Team\n\tif localTeam then\n\t\tstartSyncingIndicators()\n\telse\n\t\tstopSyncingIndicators()\n\tend\nend\n\nlocalPlayer:GetPropertyChangedSignal(\"Team\"):Connect(onLocalTeamChanged)\nonLocalTeamChanged()\n```\n\n----------------------------------------\n\nTITLE: Counting Up by One with Luau for Loop\nDESCRIPTION: Example of a Luau 'for' loop that counts up from 0 to 5, incrementing by 1 in each step. It prints the current count and waits for 1 second per iteration.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-4/intro-to-for-loops.md#_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nfor count = 0, 5, 1 do\n\tprint(count)\n\ttask.wait(1)\nend\n```\n\n----------------------------------------\n\nTITLE: Initializing Part Reference in Roblox Luau\nDESCRIPTION: Creates a reference to the parent part that will be used for the color-changing point system.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-3/give-points.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal pointPart = script.Parent\n```\n\n----------------------------------------\n\nTITLE: Accessing Luau Array by Index\nDESCRIPTION: Shows how to retrieve a specific element from the `dialogueArray` using its numerical index within square brackets `[]`. Luau arrays are 1-indexed, meaning the first element is at index 1.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-5/intro-to-arrays.md#_snippet_3\n\nLANGUAGE: Luau\nCODE:\n```\nlocal dialogueArray = {\"Hi!\", \"Do I know you?\", \"Goodbye!\"}\n\nlocal function speak()\n  local dialogue = dialogueArray[2]\n  Chat:Chat(head, dialogue)\nend\n```\n\n----------------------------------------\n\nTITLE: Wiring Match Start and Match End Events to Timer Logic - Lua\nDESCRIPTION: Shows the connection of match lifecycle events to respective start and stop timer functions, ensuring timer synchronization with the match. Demonstrates how to set up event connections so that starting a match triggers startTimer, and match end triggers stopTimer. Expects previously defined startTimer and stopTimer functions, as well as matchStart and matchEnd event objects.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/battle-royale-series/ending-matches.md#_snippet_12\n\nLANGUAGE: lua\nCODE:\n```\n-- Module Functions\nfunction MatchManager.prepareGame()\n\tplayerManager.sendPlayersToMatch()\n\tmatchStart:Fire()\nend\n\nmatchStart.Event:Connect(startTimer)\nmatchEnd.Event:Connect(stopTimer)\n\nreturn MatchManager\n```\n\n----------------------------------------\n\nTITLE: Using Logical 'and' Operator in Control Structures\nDESCRIPTION: Example of using the 'and' operator in an if-then statement to test if multiple conditions are true, demonstrating how it can be used for complex conditionals in control flow structures.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/operators.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal pasta = true\nlocal tomatoSauce = true\n\nif pasta == true and tomatoSauce == true then\n\tprint(\"We have spaghetti dinner\")\nelse\n\tprint(\"Something is missing...\")\nend\n-- Output: We have spaghetti dinner\n```\n\n----------------------------------------\n\nTITLE: Connecting to Emote Played Event - EmoteBar - Lua\nDESCRIPTION: Provides an example of subscribing to the `emotePlayed` event provided by the EmoteBar library. The connected function receives the player who played the emote and the emote itself, printing the player's name and the emote's name to the console. This event can only be connected in a LocalScript.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/emote-bar.md#_snippet_11\n\nLANGUAGE: Lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal EmoteBar = require(ReplicatedStorage:WaitForChild(\"EmoteBar\"))\n\nEmoteBar.emotePlayed:Connect(function(player, emote)\n\tprint(player.Name, \"played\", emote.name)\nend)\n```\n\n----------------------------------------\n\nTITLE: Integrating DisplayManager into GameManager in Roblox Lua\nDESCRIPTION: This code demonstrates how the `GameManager` server script requires and utilizes the `DisplayManager` ModuleScript. It first establishes variables for game services and requires necessary modules, including `DisplayManager`. Subsequently, it calls the `displayManager.updateStatus` function at different points in the main game loop (start and end of the intermission phase) to update the shared `Status` StringValue in `ReplicatedStorage`, thereby changing the text displayed on the player's GUI.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/battle-royale-series/creating-a-gui.md#_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\n-- Services\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal ServerStorage = game:GetService(\"ServerStorage\")\nlocal Players = game:GetService(\"Players\")\n\n-- Module Scripts\nlocal moduleScripts = ServerStorage:WaitForChild(\"ModuleScripts\")\nlocal roundManager = require(moduleScripts:WaitForChild(\"RoundManager\"))\nlocal gameSettings = require(moduleScripts:WaitForChild(\"GameSettings\"))\nlocal displayManager = require(moduleScripts:WaitForChild(\"DisplayManager\"))\n```\n\nLANGUAGE: Lua\nCODE:\n```\n-- Events\nlocal events = ServerStorage:WaitForChild(\"Events\")\nlocal matchEnd = events:WaitForChild(\"MatchEnd\")\n\nwhile true do\n\tdisplayManager.updateStatus(\"Waiting for Players\")\n\n\trepeat\n\t\tprint(\"Starting intermission\")\n\t\ttask.wait(gameSettings.intermissionDuration)\n\tuntil #Players:GetPlayers() >= gameSettings.minimumPlayers\n\n\ttask.wait(gameSettings.transitionTime)\n\n\tmatchManager.prepareGame()\n\tmatchEnd.Event:Wait()\nend\n```\n\nLANGUAGE: Lua\nCODE:\n```\nwhile true do\n\tdisplayManager.updateStatus(\"Waiting for Players\")\n\n\trepeat\n\t\ttask.wait(gameSettings.intermissionDuration)\n\tuntil #Players:GetPlayers() >= gameSettings.minimumPlayers\n\n\tdisplayManager.updateStatus(\"Get ready!\")\n\ttask.wait(gameSettings.transitionTime)\n\n\tmatchManager.prepareGame()\n\tmatchEnd.Event:Wait()\nend\n```\n\n----------------------------------------\n\nTITLE: Connecting Touched Event to Health Pickup in Roblox Lua\nDESCRIPTION: For each health pickup, connects the Touched event to an anonymous function that calls the shared handler, passing both the touched part and the specific pickup object. Facilitates multiple pickup interactions with a single shared method, ensuring modularity.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/scripting/intermediate-scripting/create-a-health-pickup.md#_snippet_4\n\nLANGUAGE: Lua\nCODE:\n```\nfor _, healthPickup in ipairs(healthPickups) do\n\thealthPickup.Touched:Connect(function(otherPart)\n\t\tonTouchHealthPickup(otherPart, healthPickup)\n\tend)\nend\n```\n\n----------------------------------------\n\nTITLE: Updating Selected Blaster Button Appearance in Roblox Lua\nDESCRIPTION: This Lua module script dynamically updates the visual state of blaster buttons in the GUI based on the currently selected index. It modifies the size and background transparency properties to clearly distinguish the selected button from unselected ones. The script stores the previous selection index to revert the old button’s appearance to its original unselected state. This behavior enhances user interaction by providing immediate visual feedback on selection changes. The module depends on a blaster button prefab to copy default properties and expects an integer index and a list of button instances as inputs.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/user-interface-design/implement-designs-in-studio.md#_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal blasterButtonPrefab = ReplicatedStorage.Instances.Guis.BlasterButtonPrefab\n\nlocal prevIndex = nil\n\n-- Size and BackgroundTransparency values for a selected and unselected button\nlocal ImageButtonProperties = {\n\tSelected = {\n\t\tSize = UDim2.fromScale(1, 1),\n\t\tBackgroundTransparency = 0.1,\n\t},\n\tUnselected = {\n\t\tSize = blasterButtonPrefab.Size,\n\t\tBackgroundTransparency = blasterButtonPrefab.BackgroundTransparency,\n\t},\n}\n\nlocal function updateSelectedIndex(newIndex: number, blasterButtons: { ImageButton })\n\tlocal selectedProperties = ImageButtonProperties.Selected\n\tlocal selectedButton = blasterButtons[newIndex]\n\tselectedButton.Size = selectedProperties.Size\n\tselectedButton.BackgroundTransparency = selectedProperties.BackgroundTransparency\n\n\tlocal unselectedProperties = ImageButtonProperties.Unselected\n\tlocal deselectedButton = blasterButtons[prevIndex]\n\tif deselectedButton then\n\t\tdeselectedButton.Size = unselectedProperties.Size\n\t\tdeselectedButton.BackgroundTransparency = unselectedProperties.BackgroundTransparency\n\tend\n\n\tprevIndex = newIndex\nend\n\nreturn updateSelectedIndex\n```\n\n----------------------------------------\n\nTITLE: Printing Player Name Upon Join - Lua\nDESCRIPTION: Retrieves the player's Name property within the setPoints event handler and prints a greeting. Illustrates use of player parameter fields for identification and debugging. Expects 'newPlayer' to be a Player object passed by the event.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-5/intro-to-dictionaries.md#_snippet_11\n\nLANGUAGE: lua\nCODE:\n```\nlocal function setPoints(newPlayer)\n\tlocal name = newPlayer.Name\n\tprint(\"hello \" .. name)\nend\n```\n\n----------------------------------------\n\nTITLE: Luau Enum Assignment Type Coercion\nDESCRIPTION: This code illustrates type coercion when assigning values to the `Class.Part.Material` property, which expects an Enum value. It demonstrates how Luau converts numbers and strings representing enum values into the full enum name. The example creates three parts: one using a numeric value, one with a string value, and one explicitly using the full enum name, all resulting in the `Concrete` material. It highlights the best practice of using the full enum name for clarity.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/type-coercion.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal part1 = Instance.new(\"Part\")\npart1.Material = 816\npart1.Parent = Workspace\nprint(part1.Material) -- Enum.Material.Concrete\n\nlocal part2 = Instance.new(\"Part\")\npart2.Material = \"Concrete\"\npart2.Parent = Workspace\nprint(part2.Material) -- Enum.Material.Concrete\n\n-- This is best practice because it's the most explicit\nlocal part3 = Instance.new(\"Part\")\npart3.Material = Enum.Material.Concrete\npart3.Parent = Workspace\nprint(part3.Material) -- Enum.Material.Concrete\n```\n\n----------------------------------------\n\nTITLE: Creating the Touch Detection Function in Roblox Luau\nDESCRIPTION: Defines a function that checks if a player has touched the part and calls the point-giving function if true.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-3/give-points.md#_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\n-- Gives or subtracts points\nlocal function givePoints(player)\n\tprint(\"Giving player points\")\nend\n\n-- Checks if player touched the part\nlocal function partTouched(otherPart)\n\t-- Gets the player if one touched the part\n\tlocal player = Players:GetPlayerFromCharacter(otherPart.Parent)\n\tif player then\n\t\tgivePoints(player)\n\tend\nend\n\npointPart.Touched:Connect(partTouched)\n```\n\n----------------------------------------\n\nTITLE: Checking Premium Membership Status Using Roblox Lua\nDESCRIPTION: This Lua snippet demonstrates how to determine if a player currently has Premium membership by accessing the player's MembershipType property. It utilizes the Players service and the Enum.MembershipType enumeration to compare the player's status. The snippet requires no additional dependencies besides the Roblox API and serves as a prerequisite check before executing Premium-specific logic within the game experience.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/production/monetization/engagement-based-payouts.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nlocal player = Players.LocalPlayer\n\nif player.MembershipType == Enum.MembershipType.Premium then\n\t-- Take some action specifically for Premium members\nend\n```\n\n----------------------------------------\n\nTITLE: Defining and Connecting Touch Event Handler in Luau\nDESCRIPTION: Declares an empty function named 'kill' and connects it to the 'Touched' event of the 'lava' part using the ':Connect()' method. This setup ensures the 'kill' function will be executed whenever any object touches the 'lava' part.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/scripting/basic-scripting/deadly-lava.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal lava = script.Parent\n\nlocal function kill()\n\nend\n\nlava.Touched:Connect(kill)\n```\n\n----------------------------------------\n\nTITLE: Firing RemoteEvent to All Clients - Roblox Lua\nDESCRIPTION: This server Script demonstrates firing a RemoteEvent to every connected client using `FireAllClients()`. It loops through a countdown, firing the event each second with the current time remaining, allowing all clients to update simultaneously.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/scripting/events/remote.md#_snippet_5\n\nLANGUAGE: Lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\n-- Get reference to remote event instance\nlocal remoteEvent = ReplicatedStorage:FindFirstChildOfClass(\"RemoteEvent\")\n\nlocal countdown = 5\n\n-- Fire the RemoteEvent every second until time expires\nfor timeRemaining = -1, countdown do\n\tremoteEvent:FireAllClients(countdown - timeRemaining)\n\ttask.wait(1)\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing SocialService Methods for Calling in Roblox Lua\nDESCRIPTION: This code snippet demonstrates the use of SocialService methods to create an immersive calling experience. It includes prompting the phone book, checking call eligibility, and handling self-view visibility based on camera modes.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/roblox-connect.md#_snippet_0\n\nLANGUAGE: Roblox Lua\nCODE:\n```\n-- Prompt phone book to initiate a call\nSocialService:PromptPhoneBook()\n\n-- Connect to phone book closed event\nSocialService.PhoneBookPromptClosed:Connect(function()\n    -- Restore button visibility and reposition camera\nend)\n\n-- Check if player can send call invites\nlocal canSendInvite = SocialService:CanSendCallingInviteAsync()\nif not canSendInvite then\n    -- Show dialog message for ineligible players\nend\n\n-- Handle call state changes\nSocialService.CallInviteStateChanged:Connect(function(state)\n    -- Hide call button while waiting for response\nend)\n\n-- Show self view in PiP or Cinematic modes\nSocialService:ShowSelfView()\n\n-- Hide self view in Freeplay mode\nSocialService:HideSelfView()\n```\n\n----------------------------------------\n\nTITLE: Connecting RemoteEvent OnClientEvent - Roblox Lua\nDESCRIPTION: This LocalScript connects a function to a RemoteEvent's `OnClientEvent` to handle data received from the server. It retrieves references to necessary services and the RemoteEvent instance, then defines a callback function that processes the arguments passed from the server.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/scripting/events/remote.md#_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal Players = game:GetService(\"Players\")\n\n-- Get reference to remote event instance\nlocal remoteEvent = ReplicatedStorage:FindFirstChildOfClass(\"RemoteEvent\")\n\nlocal player = Players.LocalPlayer\n\nlocal function onNotifyPlayer(maxPlayers, respawnTime)\n   print(\"[Client] Event received by player\", player.Name)\n   print(maxPlayers, respawnTime)\nend\n\n-- Connect function to event\nremoteEvent.OnClientEvent:Connect(onNotifyPlayer)\n```\n\n----------------------------------------\n\nTITLE: Handling Art Changed Events\nDESCRIPTION: Sets up an event listener for when artwork is changed on a canvas. The event provides information about the canvas, artwork position, asset ID, and the player who placed it.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/surface-art.md#_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal SurfaceArt = require(ReplicatedStorage:WaitForChild(\"SurfaceArt\"))\n\nSurfaceArt.artChanged:Connect(function(canvas, spot, spotPosition, artId, ownerId)\n\tprint(\"Art placed at:\", spotPosition)\n\tprint(\"Art asset ID:\", artId)\n\tprint(\"Art placed by:\", ownerId)\nend)\n```\n\n----------------------------------------\n\nTITLE: Grant key to player - Lua\nDESCRIPTION: This code defines a function `getKey` within the TreasureManager module to grant keys to a player when they touch a key part. It takes the key part and player's character as input, retrieves the player's keys, adds a key to their inventory, and destroys the key part.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-6/create-with-module-scripts.md#_snippet_14\n\nLANGUAGE: Lua\nCODE:\n```\nfunction TreasureManager.getKey(keyPart, whichCharacter)\n\tlocal playerKeys = getPlayerKeys(whichCharacter)\n\tplayerKeys.Value = playerKeys.Value + keyDrop\n\tkeyPart:Destroy()\nend\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Configuration Options for Friends Locator\nDESCRIPTION: This LocalScript demonstrates all available configuration options for the FriendsLocator module. It shows how to customize the visibility, teleportation behavior, threshold distance, and maximum number of locators displayed at once.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/friends-locator.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal FriendsLocator = require(ReplicatedStorage:WaitForChild(\"FriendsLocator\"))\n\nFriendsLocator.configure({\n\talwaysOnTop = true,\n\tshowAllPlayers = false,\n\tteleportToFriend = true,\n\tthresholdDistance = 100,\n\tmaxLocators = 10\n})\n```\n\n----------------------------------------\n\nTITLE: Registering Map Indicators in MinimapGui (Lua)\nDESCRIPTION: This Lua snippet, located inside the MinimapGui.start function, registers object tags with ImageLabels for rendering minimap indicators in the Roblox Battle Royale game. It uses MinimapGui.addMapTag to associate tags (like 'DeliveryVehicle', 'Player', and custom indicators) with corresponding ImageLabels in the GUI. Before registration, the function waits for _setupFinished to ensure GUI initialization. Dependencies: MinimapGui module, tags assigned in CollectionService, and valid ImageLabels in ReplicatedStorage. Inputs are tag names and UI label names; output is updated minimap visualization. This logic assumes a square map, and requires all prerequisites (tags/UI) to be present for correct operation.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/battle-royale/minimap-system.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nfunction MinimapGui.start(teamDividingAngle)\n\n\twhile not _setupFinished do\n\t\ttask.wait()\n\tend\n\n\tMinimapGui.addMapTag(\"DeliveryVehicle\", \"Bus\")\n\tMinimapGui.addMapTag(Util._clientFocusTag, \"LocalPlayerLocation\")\n\tMinimapGui.addMapTag(\"Player\")\n\tMinimapGui.addMapTag(\"Vehicle\", \"VehicleLocation\")\n\tMinimapGui.addMapTag(tag, indicatorLabel)\n```\n\n----------------------------------------\n\nTITLE: Calculating Categorical Signal (Constant Value) in Lua\nDESCRIPTION: This code calculates a categorical signal by comparing a server attribute to a constant value.  The returned score is 1 if the server's attribute equals the constant value and 0 otherwise. This evaluates exact matches against a hardcoded value.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/matchmaking/attributes-and-signals.md#_snippet_25\n\nLANGUAGE: lua\nCODE:\n```\nif server_{attribute_name} = constant_value then\n  return 1 \nelse\n  return 0 \nend\n```\n\n----------------------------------------\n\nTITLE: Shallow Cloning a Table Using table.clone() in Luau - Lua\nDESCRIPTION: Shows using Luau's built-in `table.clone()` to create a shallow copy of a table, duplicating only the top-level entries. Doesn't clone nested tables. Requires source table initialized with keys and values. Output is a new table copy identical at top level but sharing references for any nested tables.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/tables.md#_snippet_15\n\nLANGUAGE: lua\nCODE:\n```\nlocal original = {\n\tkey = \"value\",\n\tengine = \"Roblox\",\n\tplayerID = 505306092\n}\n\nlocal clone = table.clone(original)\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Key-Value Pairs to a Dictionary - Lua\nDESCRIPTION: Finalizes a dictionary initialization example with two keys: 'Name' (string) and 'Health' (number), showcasing multi-key dictionaries for structured game data. This structure allows flexible value types but recommends consistent key types.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-5/intro-to-dictionaries.md#_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlocal enemy = {\n\tName = \"Spike\",\n\tHealth = 1000,\n}\n```\n\n----------------------------------------\n\nTITLE: Detecting Animation Event Markers using GetMarkerReachedSignal in Roblox Lua\nDESCRIPTION: This Lua example demonstrates how to listen for named animation event markers within a LocalScript by connecting to the GetMarkerReachedSignal method of an AnimationTrack instance. Dependencies include a properly set up Animator object, a valid Animation asset ID, and the Roblox Lua runtime. The snippet expects an event marker named \"FootStep\" and optionally handles a parameter string provided from the Animation Editor, which can be used within the connected callback for custom logic.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/animation/events.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nlocal player = Players.LocalPlayer\nlocal character = player.Character or player.CharacterAdded:Wait()\nlocal humanoid = character:WaitForChild(\"Humanoid\")\nlocal animator = humanoid:WaitForChild(\"Animator\")\n\n-- Create new \"Animation\" instance\nlocal walkAnim = Instance.new(\"Animation\")\n-- Set its \"AnimationId\" to the corresponding animation asset ID\nwalkAnim.AnimationId = \"rbxassetid://5432167890\"\n\n-- Load animation onto the animator\nlocal walkAnimTrack = animator:LoadAnimation(walkAnim)\n\n-- Connect \"GetMarkerReachedSignal\" event to a specific named keyframe\nwalkAnimTrack:GetMarkerReachedSignal(\"FootStep\"):Connect(function(paramString)\n\tprint(paramString)\nend)\n\n```\n\n----------------------------------------\n\nTITLE: HUDGuiSetup: Main Script for Initializing the HUD UI Elements in Roblox Lua\nDESCRIPTION: This script sets up the player's HUD GUI by requiring necessary modules and calling functions to configure portrait, name, team color, objectives, team points, and interaction elements. It ensures the HUD reflects the player's current state, team, and game objectives when they join a round.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/user-interface-design/implement-designs-in-studio.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nlocal setPlayerPortrait = require(script.setPlayerPortrait)\nlocal setPlayerName = require(script.setPlayerName)\nlocal startSyncingTeamColor = require(script.startSyncingTeamColor)\nlocal setObjective = require(script.setObjective)\nlocal setupTouchButtonAsync = require(script.setupTouchButtonAsync)\nlocal startSyncingTeamPoints = require(script.startSyncingTeamPoints)\nlocal disableMouseWhileGuiEnabled = require(script.disableMouseWhileGuiEnabled)\nlocal setupHitmarker = require(script.setupHitmarker)\n\nlocal localPlayer = Players.LocalPlayer\nlocal gui = localPlayer.PlayerGui:WaitForChild(\"HUDGui\")\n\nsetPlayerPortrait(gui)\nsetPlayerName(gui)\nstartSyncingTeamColor(gui)\nsetObjective(gui)\nstartSyncingTeamPoints(gui)\ndisableMouseWhileGuiEnabled(gui)\nsetupHitmarker(gui)\nsetupTouchButtonAsync(gui)\n```\n\n----------------------------------------\n\nTITLE: Handling 'showInfoModal' Event in Roblox (LocalScript)\nDESCRIPTION: This code snippet demonstrates how to connect to the `showInfoModal` event of the ScavengerHunt module in a LocalScript using Lua. This event fires when the player clicks the token tracker. The connected function enables the InfoModal GUI element within the player's PlayerGui.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/scavenger-hunt.md#_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal ScavengerHunt = require(ReplicatedStorage:WaitForChild(\"ScavengerHunt\"))\n\nScavengerHunt.showInfoModal:Connect(function()\n\tlocal infoModal = Players.LocalPlayer.PlayerGui.InfoModal\n\tinfoModal.Enabled = true\nend)\n```\n\n----------------------------------------\n\nTITLE: Removing Elements from Arrays Using table.remove in Luau - Lua\nDESCRIPTION: Illustrates removing an element at a specified position in an array via `table.remove`, which shifts subsequent items down to fill the gap. Prints array values before and after removal to show effect. Uses standard table library function requiring array and position input; modifies array in place.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/tables.md#_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nlocal testArray = {\"First item\", \"Next item\", \"Last item\"}\n\ntable.remove(testArray, 2)\n\nprint(testArray[1]) -- First item\nprint(testArray[2]) -- Last item\n```\n\n----------------------------------------\n\nTITLE: Setting Player VIP Attribute Based on Group Membership\nDESCRIPTION: Server-side script that runs when a player joins the game. It checks if the player is a member of a specified group using the IsInGroup() method, then sets an 'IsVIP' attribute on the player accordingly. This attribute can be used elsewhere in the experience.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/chat/examples/group-chat-tags.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\n-- Replace 123456 with the group ID you want to check for\nlocal groupID = 123456\n\nPlayers.PlayerAdded:Connect(function(player)\n\tlocal success, isInGroup = pcall(function()\n\t\treturn player:IsInGroup(groupID)\n\tend)\n\n\tif success and isInGroup then\n\t\tplayer:SetAttribute(\"IsVIP\", true)\n\telse\n\t\tplayer:SetAttribute(\"IsVIP\", false)\n\tend\nend)\n```\n\n----------------------------------------\n\nTITLE: Teleporting Player with Streaming Request on the Server in Roblox (Lua)\nDESCRIPTION: This Script sets up a server-side remote event handler for teleporting a player while requesting the target region to be streamed in. The function takes a player and a teleportTarget (Vector3), triggers RequestStreamAroundAsync to preload streaming data around the destination, then teleports the player's character using PivotTo. Requires ReplicatedStorage with a TeleportEvent RemoteEvent. This script should be placed in a Script running on the server.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/workspace/streaming.md#_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal teleportEvent = ReplicatedStorage:WaitForChild(\"TeleportEvent\")\n\nlocal function teleportPlayer(player, teleportTarget)\n\t-- Request streaming around target location\n\tplayer:RequestStreamAroundAsync(teleportTarget)\n\n\t-- Teleport character\n\tlocal character = player.Character\n\tif character and character.Parent then\n\t\tlocal currentPivot = character:GetPivot()\n\t\tcharacter:PivotTo(currentPivot * CFrame.new(teleportTarget))\n\tend\nend\n\n-- Call teleport function when the client fires the remote event\nteleportEvent.OnServerEvent:Connect(teleportPlayer)\n```\n\n----------------------------------------\n\nTITLE: Configuring Engagement Rewards and Criteria in Lua\nDESCRIPTION: This Lua module script defines the configuration table for the Engagement Rewards package. It specifies different reward types, including time-based and daily login rewards, with properties such as display names, tab order, descriptions, and individual rewards within each category. Each reward entry includes required properties like icon (Roblox asset ID), displayName, quantity, and unlock criteria such as requiredSecondsInGame for time rewards or requiredDaysVisitedStreak for daily rewards. Optional parameters include effect to visually distinguish valuable rewards in the UI. The configuration supports advanced daily reward options controlling when reward pop-ups appear and how consecutive day streaks are calculated. This script relies on type declarations from the Types module and serves as the main point for defining reward logic in the experience.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/feature-packages/engagement-rewards.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal engagementRewardsConfig: Types.EngagementRewardsConfig = {\n   [Types.RewardType.Time] = {\n      tabDisplayName = \"Time\",\n      tabOrder = 1,\n      description = \"Keep playing to unlock rewards!\",\n      rewards = {\n         MinutesPlayed1 = {\n            icon = 116913478160966,\n            displayName = \"Ice Lance\",\n            requiredSecondsInGame = 1 * 5,\n         },\n         -- more\n      }\n   },\n   [Types.RewardType.Daily] = {\n      tabDisplayName = \"Daily\",\n      tabOrder = 2,\n      description = \"Play daily to unlock rewards!\",\n      rewards = {\n         DailyStreak1 = {\n            icon = 116913478160966,\n            displayName = \"Ice Lance\",\n            requiredDaysVisitedStreak = 1,\n            effect = Types.RewardEffect.Valuable,\n         },\n         -- more\n      }\n   }\n}\n\n-- Example addition to daily reward tab config\nengagementRewardsConfig[Types.RewardType.Daily].isHiddenOnJoin = true\nengagementRewardsConfig[Types.RewardType.Daily].isAlignedToStreakResetTime = true\n```\n\n----------------------------------------\n\nTITLE: Implementing a Side-Scrolling Camera in Roblox Lua\nDESCRIPTION: This complete LocalScript, intended for StarterPlayerScripts, creates a side-scrolling camera. It retrieves services (Players, RunService), the local player, and the workspace camera. The `updateCamera` function calculates camera position/target based on the character's `HumanoidRootPart` (with offsets) for a fixed side view. `RunService:BindToRenderStep` calls this function every frame with a specific priority (`Enum.RenderPriority.Camera.Value + 1`) to override default camera behavior and keep the view synchronized.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/input-and-camera/control-the-users-camera.md#_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\nlocal RunService = game:GetService(\"RunService\")\n\nlocal player = Players.LocalPlayer\nlocal camera = workspace.CurrentCamera\n\nlocal CAMERA_DEPTH = 24\nlocal HEIGHT_OFFSET = 2\n\nlocal function updateCamera()\n    local character = player.Character\n    if character then\n        local root = character:FindFirstChild(\"HumanoidRootPart\")\n        if root then\n            local rootPosition = root.Position + Vector3.new(0, HEIGHT_OFFSET, 0)\n            local cameraPosition = Vector3.new(rootPosition.X, rootPosition.Y, CAMERA_DEPTH)\n            camera.CFrame = CFrame.lookAt(cameraPosition, rootPosition)\n        end\n    end\nend\n\nRunService:BindToRenderStep(\"SidescrollingCamera\", Enum.RenderPriority.Camera.Value + 1, updateCamera)\n```\n\n----------------------------------------\n\nTITLE: Subscribing to itemViewOpened Event with Lua in Roblox\nDESCRIPTION: Registers a callback with MerchBooth.itemViewOpened, which triggers when a specific item detail view is opened. The MerchBooth module is loaded from ReplicatedStorage. The event handler logs the opening of the item view, useful for initiating item-specific behaviors.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/merch-booth.md#_snippet_37\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal MerchBooth = require(ReplicatedStorage:WaitForChild(\"MerchBooth\"))\n\nMerchBooth.itemViewOpened:Connect(function()\n\tprint(\"Item view opened\")\nend)\n```\n\n----------------------------------------\n\nTITLE: SliderController - Managing UI Sliders and User Interaction in Roblox Lua\nDESCRIPTION: This module initializes and manages slider UI elements, providing a 'hydrate' function to set up the slider, define its callback, and set its initial value. It verifies the presence of internal components such as Handle, InnerFill, and UIDragDetector. The module connects the drag events to update the slider value dynamically. The 'setValue' method clamps the input to a range [0,1], updates visual elements accordingly, and executes the user-defined callback with the new value, enabling responsive UI adjustments.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/ui/interactive-ui.md#_snippet_9\n\nLANGUAGE: Lua\nCODE:\n```\nlocal SliderController = {}\nSliderController.__index = SliderController\n\nexport type Value = number\nexport type OnChanged = (Value) -> ()\n\nfunction SliderController.hydrate(props: {\n\t\tobject: Instance,\n\t\tonChanged: OnChanged,\n\t\tinitialValue: Value?\n\t})\n\tlocal object, onChanged, initialValue = props.object, props.onChanged, props.initialValue\n\n\tlocal handle = object:FindFirstChild(\"Handle\", true)\n\tif not handle then\n\t\twarn(string.format(\"Attempted to hydrate slider %s but couldn't find Handle\", object:GetFullName()))\n\tend\n\n\tlocal innerFill = object:FindFirstChild(\"InnerFill\", true)\n\tif not innerFill then\n\t\twarn(string.format(\"Attempted to hydrate slider %s but couldn't find InnerFill\", object:GetFullName()))\n\tend\n\n\tlocal dragDetector = handle:FindFirstChildWhichIsA(\"UIDragDetector\")\n\tif not dragDetector then\n\t\twarn(string.format(\"Attempted to hydrate slider %s but couldn't find UIDragDetector\", object:GetFullName()))\n\tend\n\n\tlocal self = setmetatable({\n\t\thandle = handle,\n\t\tinnerFill = innerFill,\n\t\tdragDetector = dragDetector,\n\t\tvalue = initialValue or 0.5,\n\t\tonChanged = onChanged,\n\t}, SliderController)\n\n\t-- Set initial value\n\tself:setValue(self.value)\n\n\t-- Connect detector to player manipulation\n\tself.dragConnection = dragDetector.DragContinue:Connect(function()\n\t\tself:setValue(handle.Position.X.Scale)\n\tend)\n\n\treturn self\nend\n\nfunction SliderController:setValue(value: Value)\n\tlocal clampedValue = math.clamp(value, 0, 1)\n\tself.value = clampedValue\n\n\t-- Update the handle position and inner frame size to match\n\tself.handle.Position = UDim2.fromScale(clampedValue, 0.5)\n\tself.innerFill.Size = UDim2.fromScale(clampedValue, 1)\n\n\t-- Run the user's callback with the latest value\n\tlocal changeSuccess, changeResult = pcall(self.onChanged, clampedValue)\n\tif not changeSuccess then\n\t\twarn(\"Error in slider callback:\", changeResult)\n\tend\nend\n\nreturn SliderController\n```\n\n----------------------------------------\n\nTITLE: Basic Luau For Loop Structure for Array Iteration\nDESCRIPTION: Defines a standard numeric `for` loop in Luau that iterates from the first index (1) up to the total number of elements in `pathArray` using the length operator `#`. The loop body is empty, intended to contain operations performed on each array element.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-5/loops-and-arrays.md#_snippet_3\n\nLANGUAGE: Luau\nCODE:\n```\nfor partIndex = 1, #pathArray  do\n\nend\n```\n\n----------------------------------------\n\nTITLE: Connecting coin touches to the handler in Roblox Lua\nDESCRIPTION: This loop assigns the 'onCoinTouched' function as a listener for the 'Touched' event on each coin in the collection. It ensures that each coin is initially enabled and properly responds to player interactions, facilitating coin collection with cooldown logic.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/core/scripting/script-game-behavior.md#_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nfor _, coin in coins do\n\tcoin:SetAttribute(\"Enabled\", true)\n\tcoin.Touched:Connect(function(otherPart)\n\t\tonCoinTouched(otherPart, coin)\n\tend)\nend\n```\n\n----------------------------------------\n\nTITLE: Basic ModuleScript Structure (Luau)\nDESCRIPTION: Demonstrates the minimal structure required for a Roblox ModuleScript. It initializes an empty table and immediately returns it. All ModuleScripts must return exactly one value upon being required.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/scripting/scripts.md#_snippet_0\n\nLANGUAGE: Luau\nCODE:\n```\nlocal module = {}\nreturn module\n```\n\n----------------------------------------\n\nTITLE: Handling Dragging Events for Visual Feedback in Roblox Lua\nDESCRIPTION: This code snippet listens to `PluginDragEntered`, `PluginDragMoved`, and `PluginDragLeft` events on a widget to provide visual cue feedback during drag-and-drop operations. These events can be used to show or hide prompts like 'Drop here!' as the user moves the mouse over or away from a drop zone, enhancing user experience during drag interactions.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/studio/build-studio-widgets.md#_snippet_8\n\nLANGUAGE: Lua\nCODE:\n```\n-- Example of binding events during a drag operation (not provided as code in original, but implied)\n-- Each event can be connected similarly:\n-- widget.PluginDragEntered:Connect(function(dragData) ... end)\n-- widget.PluginDragMoved:Connect(function(dragData) ... end)\n-- widget.PluginDragLeft:Connect(function(dragData) ... end)\n```\n\n----------------------------------------\n\nTITLE: LaserRenderer: Creates and manages laser beam visual effects in Roblox Lua\nDESCRIPTION: This module provides a function to create a laser beam visual between a tool handle and an end position, rendering a neon-colored Part with specified size and orientation. It also plays a shooting sound if available and schedules automatic cleanup of the laser after a short duration. Dependencies include the Debris service for cleanup. It is used to visually represent laser shots in the game.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/scripting/intermediate-scripting/hit-detection-with-lasers.md#_snippet_32\n\nLANGUAGE: Lua\nCODE:\n```\nlocal LaserRenderer = {}\n\nlocal Debris = game:GetService(\"Debris\")\n\nlocal SHOT_DURATION = 0.15 -- Time that the laser is visible for\n\nfunction LaserRenderer.createLaser(toolHandle, endPosition)\n\tlocal startPosition = toolHandle.Position\n\n\tlocal laserDistance = (startPosition - endPosition).Magnitude\n\tlocal laserCFrame = CFrame.lookAt(startPosition, endPosition) * CFrame.new(0, 0, -laserDistance / 2)\n\n\tlocal laserPart = Instance.new(\"Part\")\n\tlaserPart.Size = Vector3.new(0.2, 0.2, laserDistance)\n\tlaserPart.CFrame = laserCFrame\n\tlaserPart.Anchored = true\n\tlaserPart.CanCollide = false\n\tlaserPart.Color = Color3.fromRGB(255, 0, 0)\n\tlaserPart.Material = Enum.Material.Neon\n\tlaserPart.Parent = workspace\n\n\tDebris:AddItem(laserPart, SHOT_DURATION)\n\n\tlocal shootingSound = toolHandle:FindFirstChild(\"Activate\")\n\tif shootingSound then\n\t\tshootingSound:Play()\n\tend\nend\n\nreturn LaserRenderer\n```\n\n----------------------------------------\n\nTITLE: Calculate Directions for Blast\nDESCRIPTION: This code snippet determines the direction for each laser beam based on the blaster configuration. If the blaster produces a single beam, it uses the camera's LookVector. If it produces multiple beams, it calculates the direction for each beam based on its angle within the blaster configuration.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/gameplay-scripting/detect-hits.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nif numLasers == 1 then\n\t-- For single lasers, they aim straight\n\ttable.insert(directions, originCFrame.LookVector)\nelif numLasers > 1 then\n\t-- For multiple lasers, spread them out evenly horizontally\n\t-- over an interval laserSpreadDegrees around the center\n\tlocal leftAngleBound = laserSpreadDegrees / 2\n\tlocal rightAngleBound = -leftAngleBound\n\tlocal degreeInterval = laserSpreadDegrees / (numLasers - 1)\n\n\tfor angle = rightAngleBound, leftAngleBound, degreeInterval do\n\t\tlocal direction = (originCFrame * CFrame.Angles(0, math.rad(angle), 0)).LookVector\n\t\ttable.insert(directions, direction)\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Logging a Custom Event with a Value in Roblox (Lua)\nDESCRIPTION: This Lua snippet shows how to log a custom event with an associated numerical value using the Roblox AnalyticsService. It retrieves the service and calls `LogCustomEvent`, passing the player object, the event name ('MissionCompletedDuration'), and a numerical value (120). This method is suitable for tracking quantitative metrics like durations, scores, or amounts, and can also be used for batching similar events to manage rate limits. Events must be sent from the server.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/production/analytics/custom-events.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal AnalyticsService = game:GetService(\"AnalyticsService\")\n\nAnalyticsService:LogCustomEvent(\n    player,\n    \"MissionCompletedDuration\", -- Event name\n    120 -- Event value\n)\n```\n\n----------------------------------------\n\nTITLE: Restrict TextBox Input to Numbers in Lua\nDESCRIPTION: This snippet shows how to restrict a TextBox to accept only numeric input by connecting to the Text property change signal and removing non-digit characters using string.gsub(). It ensures only numbers are retained in the TextBox's content.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/ui/text-input.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nlocal textBox = script.Parent\n\nlocal function allowOnlyNumbers()\n\ttextBox.Text = string.gsub(textBox.Text, \"%D\", \"\")\nend\n\ntextBox:GetPropertyChangedSignal(\"Text\"):Connect(allowOnlyNumbers)\n```\n\n----------------------------------------\n\nTITLE: startSyncingTeamPoints: Module Script for Real-Time Team Point Tracking and UI Updating\nDESCRIPTION: This module tracks team points stored under 'Class.Teams' and updates the corresponding team counters in the UI. It identifies team counters by their 'teamColor' attribute, validates matching team color and team data, and updates the UI text labels to reflect current points, with live updates upon points change.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/user-interface-design/implement-designs-in-studio.md#_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal Teams = game:GetService(\"Teams\")\n\nlocal GuiAttribute = require(ReplicatedStorage.GuiAttribute)\n\nlocal function getTeamFromTeamColor(teamColor: Color3): Team?\n\tfor _, team in Teams:GetTeams() do\n\t\tif team.TeamColor == teamColor then\n\t\t\treturn team\n\t\tend\n\tend\n\treturn nil\nend\n\nlocal function startSyncingTeamPoints(gui: ScreenGui)\n\tfor _, teamPointCounter in gui.Objective.TeamPointCounter:GetChildren() do\n\t\tif not teamPointCounter:IsA(\"GuiObject\") then\n\t\t\tcontinue\n\t\tend\n\n\t\tlocal iconTeamColor = teamPointCounter:GetAttribute(GuiAttribute.teamColor)\n\n\t\tlocal team = getTeamFromTeamColor(iconTeamColor)\n\t\tif not team then\n\t\t\twarn(`No team found matching the color {iconTeamColor} to sync team points on {teamPointCounter}`)\n\t\t\tcontinue\n\t\tend\n\n\t\tteamPointCounter.TextLabel.Text = team:GetAttribute(GuiAttribute.teamPoints)\n\n\t\tteam:GetAttributeChangedSignal(GuiAttribute.teamPoints):Connect(function()\n\t\t\t-- Further update logic can be added here\n\t\tend)\n end\n\nreturn startSyncingTeamPoints\n```\n\n----------------------------------------\n\nTITLE: Replacing Default Character Animations in Roblox\nDESCRIPTION: This server script replaces default character animations by modifying the Animate script that controls character movements. It provides a framework to override animations like running, walking, jumping, and more with custom or catalog animations.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/animation/using.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nlocal function onCharacterAdded(character)\n\t-- Get animator on humanoid\n\tlocal humanoid = character:WaitForChild(\"Humanoid\")\n\tlocal animator = humanoid:WaitForChild(\"Animator\")\n\n\t-- Stop all animation tracks\n\tfor _, playingTrack in animator:GetPlayingAnimationTracks() do\n\t\tplayingTrack:Stop(0)\n\tend\n\n\tlocal animateScript = character:WaitForChild(\"Animate\")\n\t--animateScript.run.RunAnim.AnimationId = \"rbxassetid://\"\n\t--animateScript.walk.WalkAnim.AnimationId = \"rbxassetid://\"\n\t--animateScript.jump.JumpAnim.AnimationId = \"rbxassetid://\"\n\t--animateScript.idle.Animation1.AnimationId = \"rbxassetid://\"\n\t--animateScript.idle.Animation2.AnimationId = \"rbxassetid://\"\n\t--animateScript.fall.FallAnim.AnimationId = \"rbxassetid://\"\n\t--animateScript.swim.Swim.AnimationId = \"rbxassetid://\"\n\t--animateScript.swimidle.SwimIdle.AnimationId = \"rbxassetid://\"\n\t--animateScript.climb.ClimbAnim.AnimationId = \"rbxassetid://\"\nend\n\nlocal function onPlayerAdded(player)\n\tplayer.CharacterAppearanceLoaded:Connect(onCharacterAdded)\nend\n\nPlayers.PlayerAdded:Connect(onPlayerAdded)\n```\n\n----------------------------------------\n\nTITLE: Implementing Intermission Wait Logic in GameManager (Roblox Lua)\nDESCRIPTION: Adds the core logic inside the intermission `repeat` loop. It prints a message indicating the start of intermission and pauses the script's execution using `task.wait()` for the duration specified in `gameSettings.intermissionDuration`. This repeats until enough players join.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/battle-royale-series/coding-the-game-loop.md#_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nwhile true do\n\trepeat\n\t\tprint(\"Starting intermission\")\n\t\ttask.wait(gameSettings.intermissionDuration)\n\tuntil #Players:GetPlayers() >= gameSettings.minimumPlayers\nend\n```\n\n----------------------------------------\n\nTITLE: Playing Custom Animation on Non-Humanoid Character Rig\nDESCRIPTION: This script demonstrates how to play animations on rigs without a Humanoid by creating an AnimationController with a child Animator. It creates the necessary components, loads a 'kick' animation, and plays it on the rig.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/animation/using.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal rig = script.Parent\n\n-- Create a new \"Animation\" instance and assign an animation asset ID\nlocal kickAnimation = Instance.new(\"Animation\")\nkickAnimation.AnimationId = \"rbxassetid://2515090838\"\n\n-- Create a new \"AnimationController\" and \"Animator\"\nlocal animationController = Instance.new(\"AnimationController\")\nanimationController.Parent = rig\n\nlocal animator = Instance.new(\"Animator\")\nanimator.Parent = animationController\n\n-- Load the animation onto the animator\nlocal kickAnimationTrack = animator:LoadAnimation(kickAnimation)\n\n-- Play the animation track\nkickAnimationTrack:Play()\n\n-- If a named event was defined for the animation, connect it to \"GetMarkerReachedSignal()\"\nkickAnimationTrack:GetMarkerReachedSignal(\"KickEnd\"):Connect(function(paramString)\n\tprint(paramString)\nend)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Events with ModuleScript (Luau)\nDESCRIPTION: Demonstrates how to implement a custom event system within a ModuleScript using a BindableEvent. The Switch module encapsulates a state variable, creates a BindableEvent, exposes its Event via `Switch.Changed`, and provides a `flip` function that changes the state and fires the event.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/scripting/scripts.md#_snippet_5\n\nLANGUAGE: Luau\nCODE:\n```\n-- ModuleScript in ReplicatedStorage named Switch\nlocal Switch = {}\n\n-- Creating bindable so any script can listen to when the switch was changed\nlocal bindableEvent = Instance.new(\"BindableEvent\")\nSwitch.Changed = bindableEvent.Event\n\nlocal state = false\nfunction Switch.flip()\n\tstate = not state\n\tbindableEvent:Fire(state)\nend\n\nreturn Switch\n```\n\n----------------------------------------\n\nTITLE: Client Network Module - Encapsulation\nDESCRIPTION: This ModuleScript encapsulates the RemoteEvent's FireServer method, allowing client scripts to send network messages with an ID argument without directly referencing the RemoteEvent object. It resides in ReplicatedFirst and provides a simplified interface for sending network messages to the server. It depends on a RemoteEvent named 'RemoteEvent' within ReplicatedStorage.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/scripting/module.md#_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\n-- ModuleScript in ReplicatedFirst named NetworkManagerClient\nlocal NetworkManagerClient = {}\n\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal remoteEvent = ReplicatedStorage:WaitForChild(\"RemoteEvent\")\n\n-- Encapsulating the remote object's FireServer function\nfunction NetworkManagerClient.FireServer(id, ...)\n  remoteEvent:FireServer(id, ...)\nend\n\nreturn NetworkManagerClient\n\n```\n\n----------------------------------------\n\nTITLE: Generic Map Type Definition in Luau Lua\nDESCRIPTION: Defines a generic map type 'Map<K, V>' using generic keys and values. This type alias models dictionaries or associative arrays with variable key and value types to support flexible but type-safe mappings.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/type-checking.md#_snippet_19\n\nLANGUAGE: lua\nCODE:\n```\ntype Map<K, V> = {[K]: V}\n```\n\n----------------------------------------\n\nTITLE: Evaluating object property with a conditional in Luau\nDESCRIPTION: Uses an if statement to check if the Transparency property of mysteryPart is exactly 0. If so, it changes the LieDetector’s color to green and sets mysteryPart’s transparency to 0.2. Demonstrates conditionals accessing and modifying object properties depending on property values.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-3/intro-to-if-statements.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal mysteryPart = workspace.MysteryPart\n\n-- Evaluates as true if MysteryPart is fully opaque\nif mysteryPart.Transparency == 0 then\n\tworkspace.LieDetector.Color = Color3.fromRGB(0, 255, 0)\n\tmysteryPart.Transparency = .2\nend\n```\n\n----------------------------------------\n\nTITLE: Complete MatchManager Script Implementation\nDESCRIPTION: The final MatchManager script with all functionality including match preparation, timer management, match cleanup, determining end status, and match reset.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/battle-royale-series/cleanup-and-reset.md#_snippet_11\n\nLANGUAGE: lua\nCODE:\n```\nlocal MatchManager = {}\n\n-- Services\nlocal ServerStorage = game:GetService(\"ServerStorage\")\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\n-- Module Scripts\nlocal moduleScripts = ServerStorage:WaitForChild(\"ModuleScripts\")\nlocal playerManager = require(moduleScripts:WaitForChild(\"PlayerManager\"))\nlocal gameSettings = require(moduleScripts:WaitForChild(\"GameSettings\"))\nlocal displayManager = require(moduleScripts:WaitForChild(\"DisplayManager\"))\nlocal timer = require(moduleScripts:WaitForChild(\"Timer\"))\n\n-- Events\nlocal events = ServerStorage:WaitForChild(\"Events\")\nlocal matchStart = events:WaitForChild(\"MatchStart\")\nlocal matchEnd = events:WaitForChild(\"MatchEnd\")\n\n-- Values\nlocal displayValues = ReplicatedStorage:WaitForChild(\"DisplayValues\")\nlocal timeLeft = displayValues:WaitForChild(\"TimeLeft\")\n\n-- Creates a new timer object to be used to keep track of match time.\nlocal myTimer = timer.new()\n\n-- Local Functions\nlocal function stopTimer()\n\tmyTimer:stop()\nend\n\nlocal function timeUp()\n\tmatchEnd:Fire(gameSettings.endStates.TimerUp)\nend\n\nlocal function startTimer()\n\tmyTimer:start(gameSettings.matchDuration)\n\tmyTimer.finished:Connect(timeUp)\n\n\twhile myTimer:isRunning() do\n\t\t-- Adding +1 makes sure the timer display ends at 1 instead of 0.\n\t\ttimeLeft.Value = (myTimer:getTimeLeft() + 1) // 1\n\t\t-- By not setting the time for wait, it offers more accurate looping\n\t\ttask.wait()\n\tend\nend\n\n-- Module Functions\nfunction MatchManager.prepareGame()\n\tplayerManager.sendPlayersToMatch()\n\tmatchStart:Fire()\nend\n\nfunction MatchManager.getEndStatus(endState)\n\tlocal messageToReturn\n\n\tif endState == gameSettings.endStates.FoundWinner then\n\t\tlocal winnerName = playerManager.getWinnerName()\n\t\tmessageToReturn = \"Winner is : \" .. winnerName\n\telseif endState == gameSettings.endStates.TimerUp then\n\t\tmessageToReturn = \"Time ran out!\"\n\telse\n\t\tmessageToReturn = \"Error found\"\n\tend\n\n\treturn messageToReturn\nend\n\nfunction MatchManager.cleanupMatch()\n\tplayerManager.removeAllWeapons()\nend\n\nfunction MatchManager.resetMatch()\n\tplayerManager.resetPlayers()\nend\n\nmatchStart.Event:Connect(startTimer)\nmatchEnd.Event:Connect(stopTimer)\n\nreturn MatchManager\n```\n\n----------------------------------------\n\nTITLE: Basic Tool Activation Script in Lua for Roblox\nDESCRIPTION: A template script to handle core tool events such as equipping, unequipping, activating, and deactivating within a Roblox tool object. It enables developers to perform actions based on user interactions with the tool.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/players/tools.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal tool = script.Parent\nlocal function onEquip()\n\tprint(\"The tool is now equipped.\")\nend\nlocal function onUnequip()\n\tprint(\"The tool is now unequipped.\")\nend\nlocal function onActivate()\n\tprint(\"The tool is now activated.\")\nend\nlocal function onDeactivate()\n\tprint(\"The tool is now deactivated.\")\nend\ntool.Equipped:Connect(onEquip)\ntool.Unequipped:Connect(onUnequip)\ntool.Activated:Connect(onActivate)\ntool.Deactivated:Connect(onDeactivate)\n```\n\n----------------------------------------\n\nTITLE: Removing the last value from an array with table.remove in Luau\nDESCRIPTION: This snippet illustrates how to remove the last element from an array using table.remove with only the array as an argument. It emphasizes managing inventory objects like 'Sleeping Bag' and updating the array accordingly.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-5/make-changes-to-arrays.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nplayerItems = {}\n\ntable.insert(playerItems, \"Potion\")\ntable.insert(playerItems, \"Bread\")\ntable.insert(playerItems, \"Sleeping bag\")\n\ntable.remove(playerItems)\n\nprint(playerItems)\n```\n\n----------------------------------------\n\nTITLE: Iterating through a Dictionary with pairs() in Lua\nDESCRIPTION: Demonstrates how to use pairs() to iterate through a dictionary in Lua. The function accesses both keys and values of the dictionary during iteration, printing each player's color and name.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-5/pairs-and-ipairs.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal myDictionary = {\n\t[\"Blue Player\"] = \"Ana\",\n\t[\"Gold Player\"] = \"Binh\",\n\t[\"Red Player\"] = \"Cate\",\n}\n\nfor key, value in pairs(myDictionary) do\n\tprint(key .. \" is \" .. value)\nend\n```\n\n----------------------------------------\n\nTITLE: Using Parameters in Luau Functions\nDESCRIPTION: Illustrates how to define a Luau function `addNumbers` that accepts two parameters (`num1`, `num2`). It shows the results of calling the function with the correct number of arguments, too many arguments (extra are ignored), and too few arguments (missing ones become `nil`, causing a potential error during arithmetic).\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/functions.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n-- This function has two parameters: num1 and num2\nlocal function addNumbers(num1, num2)\n\tprint(num1 + num2)\nend\n\naddNumbers(2, 3) -- 5\naddNumbers(5, 6, 7) -- 11\naddNumbers(9) -- attempt to perform arithmetic (add) on number and nil\n```\n\n----------------------------------------\n\nTITLE: Implementing Typed Classes in Luau (Plant Approach)\nDESCRIPTION: This code block illustrates the custom approach used in the Plant project for defining classes with strict Luau typing support. It explicitly defines the instance type (`ClassType`), duplicates the `self` definition in type and constructor, and declares methods with a dot (`.`) to allow explicit `self` typing, while still permitting colon (`:`) calls.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/plant-reference-project.md#_snippet_2\n\nLANGUAGE: Luau\nCODE:\n```\n--!strict\n\nlocal MyClass = {}\nMyClass.__index = MyClass\n\nexport type ClassType = typeof(setmetatable(\n\t{} :: {\n\t\tproperty: number,\n\t},\n\tMyClass\n))\n\nfunction MyClass.new(property: number): ClassType\n\tlocal self = {\n\t\tproperty = property,\n\t}\n\n\tsetmetatable(self, MyClass)\n\n\treturn self\nend\n\nfunction MyClass.addOne(self: ClassType)\n\tself.property += 1\nend\n\nreturn MyClass\n```\n\n----------------------------------------\n\nTITLE: Calculating Device Type Signal Score\nDESCRIPTION: Calculates a categorical signal score representing the ratio of players in the server with the same device type as the joining player.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/matchmaking/attributes-and-signals.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\ndeviceTypeSignalScore = (# players with same device as joining player) / (# players on the server)\n```\n\n----------------------------------------\n\nTITLE: Sending Basic Experience Notification using Roblox OpenCloud in Lua\nDESCRIPTION: This snippet illustrates how to send a basic experience notification using the OpenCloud V2 UserNotification API without additional launch or analytics data. It uses the player's UserId and a simple payload containing 'messageId' and 'type'. The snippet also checks the result response and prints error information if the notification fails to send. This example serves as a minimal template for sending notifications in Roblox Lua scripts.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/production/promotion/experience-notifications.md#_snippet_4\n\nLANGUAGE: Lua\nCODE:\n```\nlocal ServerScriptService = game:GetService(\"ServerScriptService\")\n\nlocal OCUserNotification = require(ServerScriptService.OpenCloud.V2.UserNotification)\nlocal recipientPlayerID = 505306092\n\n-- In the payload, \"messageId\" is the value of the notification asset ID\nlocal userNotification = {\n\tpayload = {\n\t\tmessageId = \"5dd7024b-68e3-ac4d-8232-4217f86ca244\",\n\t\ttype = \"MOMENT\"\n\t}\n}\n\nlocal result = OCUserNotification.createUserNotification(recipientPlayerID, userNotification)\n\nif result.statusCode ~= 200 then\n\tprint(result.statusCode)\n\tprint(result.error.code)\n\tprint(result.error.message)\nend\n```\n\n----------------------------------------\n\nTITLE: Checking User Item Ownership with Roblox Inventory API in Python\nDESCRIPTION: This Python snippet uses the 'requests' library to verify if a user owns certain inventory assets via the Roblox Inventory API. It requires an API key included in the 'x-api-key' header and a user ID to construct the request URL. The 'filter' parameter specifies asset IDs to match. The response is parsed from JSON and pretty-printed. This implementation handles query parameters and demonstrates straightforward error checking by printing the response data regardless of success or failure status codes.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/guides/inventory.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nimport requests\nimport json\n\nuserId = 11111111111\napiKey = '123456789012345678901234567890123456789012345678'\n\nhostname = 'https://apis.roblox.com'\npath = f'/cloud/v2/users/{userId}/inventory-items'\nurl = hostname + path\nparameters = {\n    'filter': 'assetIds=62724852,1028595,4773588762'\n}\nheaders = {'x-api-key': f'{apiKey}'}\n\nresponse = requests.get(url, params=parameters, headers=headers)\n\nprint(json.dumps(json.loads(response.text), indent=2))\n```\n\n----------------------------------------\n\nTITLE: Using ipairs() to Print Selected Ingredients in Lua\nDESCRIPTION: Uses ipairs() to iterate through the selectedIngredients array and print each ingredient that was selected for the soup order.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-5/pairs-and-ipairs.md#_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\n-- Prints soup order from \"selectedIngredients\"\nif #selectedIngredients > 0 then\n\tprint(\"You ordered soup with: \")\n\tfor index, soupIngredient in ipairs(selectedIngredients) do\n\t\tprint(soupIngredient)\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring SelfieMode Options using LocalScript - Lua\nDESCRIPTION: Demonstrates how to override default configuration settings for the SelfieMode module using the configure method. Requires the SelfieMode module located in ReplicatedStorage and must be executed from a LocalScript. The config table allows toggling character movement and setting a custom DepthOfField effect; expected input is a configuration table and there are no outputs. Only call this function in environments supporting Class.LocalScript.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/selfie-mode.md#_snippet_4\n\nLANGUAGE: Lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal SelfieMode = require(ReplicatedStorage:WaitForChild(\"SelfieMode\"))\n\nSelfieMode.configure({\n\tdisableCharacterMovement = true\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing and Setting Pivot Offset for Parts in Roblox Lua\nDESCRIPTION: Details the Class.BasePart.PivotOffset property which stores the pivot offset as a Datatype.CFrame relative to the part's main coordinate frame. Modifying this property changes the pivot location of the BasePart without moving or rotating the object itself. This allows fine control over the part's pivot for rotation and scaling transformations. Input and output are CFrame values representing the pivot offset. This property is intrinsic to BasePart objects in Roblox.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/studio/pivot-tools.md#_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\n-- Example: Read and modify a part's pivot offset\nlocal currentOffset = somePart.PivotOffset\nsomePart.PivotOffset = currentOffset * CFrame.new(0, 1, 0) -- shift pivot up by 1 stud\n```\n\n----------------------------------------\n\nTITLE: Inventory Example with pairs() in Lua\nDESCRIPTION: Demonstrates how to use pairs() to iterate through an inventory dictionary in Lua. The code prints the quantity and name of each item in the inventory.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-5/pairs-and-ipairs.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal inventory = {\n\t[\"Gold Bricks\"] = 43,\n\tCarrots = 3,\n\tTorches = 2,\n}\n\nprint(\"You have:\")\n\nfor itemName, itemValue in pairs(inventory) do\n\tprint(itemValue, itemName)\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Color Cycling Loop in Roblox Luau\nDESCRIPTION: Creates an infinite loop that cycles the part through blue, green, and red colors with different wait times between each color change.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-3/give-points.md#_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\n-- Loops through 3 colors, waiting between each color\nwhile true do\n\tpointPart.Color = blue\n\ttask.wait(3)\n\tpointPart.Color = green\n\ttask.wait(2)\n\tpointPart.Color = red\n\ttask.wait(1)\nend\n```\n\n----------------------------------------\n\nTITLE: Paginated GET Request for Data Stores in JSON\nDESCRIPTION: Demonstrates the paginated request and response format for reading a list of data stores via the Open Cloud API. The response contains a dataStores array and a nextPageToken field for continued pagination. Repeated requests with the pageToken retrieve additional pages until nextPageToken is absent. No external code dependencies required.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/reference/patterns.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\nGET /cloud/v2/universes/{universe_id}/data-stores?maxPageSize=25\n\n{\n  \"dataStores\": [\n    ...\n  ],\n  \"nextPageToken\": \"datastore1\"\n}\n```\n\n----------------------------------------\n\nTITLE: In-experience asynchronous union operation using Lua\nDESCRIPTION: This Lua code demonstrates how to perform an asynchronous union of multiple parts in Roblox's game environment. It retrieves specific parts from the workspace, invokes `UnionAsync()` on a base part with other parts as input, and if successful, positions and parents the resulting union in the workspace. It then destroys the original parts post-operation to maintain scene cleanliness. This pattern helps automate complex CAD-style operations within a game dynamically.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/parts/solid-modeling.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal mainPart = Workspace.Part1\nlocal otherParts = {Workspace.Part2, Workspace.Part3, Workspace.Part4}\n\n-- Perform union operation\nlocal success, newUnion = pcall(function()\n\treturn mainPart:UnionAsync(otherParts)\nend)\n\n-- If operation succeeds, position it at the same location and parent it to the workspace\nif success and newUnion then\n\tnewUnion.Position = mainPart.Position\n\tnewUnion.Parent = Workspace\nend\n\n-- Destroy original parts which remain intact after operation\nmainPart:Destroy()\nfor _, part in ipairs(otherParts) do\n\tpart:Destroy()\nend\n```\n\n----------------------------------------\n\nTITLE: Shoppable Regions - Lua\nDESCRIPTION: This code snippet demonstrates how to create shoppable regions that automatically open and close the merch booth when a player enters or leaves the region. It utilizes the Touched and TouchEnded events of a part tagged as 'ShopRegion'. The MerchBooth module from ReplicatedStorage is also required.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/merch-booth.md#_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal CollectionService = game:GetService(\"CollectionService\")\n\nlocal MerchBooth = require(ReplicatedStorage:WaitForChild(\"MerchBooth\"))\n\n-- Remove the default catalog button\nMerchBooth.toggleCatalogButton(false)\n\nlocal function setupRegion(region: BasePart)\n\tregion.Touched:Connect(function(otherPart)\n\t\tlocal character = Players.LocalPlayer.Character\n\t\tif character and otherPart == character.PrimaryPart then\n\t\t\tMerchBooth.openMerchBooth()\n\t\tend\n\tend)\n\n\tregion.TouchEnded:Connect(function(otherPart)\n\t\tlocal character = Players.LocalPlayer.Character\n\t\tif character and otherPart == character.PrimaryPart then\n\t\t\tMerchBooth.closeMerchBooth()\n\t\tend\n\tend)\nend\n\n-- Iterate through existing tagged shop regions\nfor _, region in CollectionService:GetTagged(\"ShopRegion\") do\n\tsetupRegion(region)\nend\n-- Detect when non-streamed shop regions stream in\nCollectionService:GetInstanceAddedSignal(\"ShopRegion\"):Connect(setupRegion)\n```\n\n----------------------------------------\n\nTITLE: Connecting Click Detector to giveUpgrade Function - Roblox Lua\nDESCRIPTION: This code snippet connects the `MouseClick` event of a `ClickDetector` to the `giveUpgrade` function. When the button is clicked, the `giveUpgrade` function is executed. It assumes that there is a script that has a click detector as its parent.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/adventure-game-series/buying-upgrades.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nclickDetector.MouseClick:Connect(giveUpgrade)\n```\n\n----------------------------------------\n\nTITLE: Completed Roblox NPC Chat Script\nDESCRIPTION: The final, complete version of the NPC dialogue script. It initializes the dialogue array and index, then defines a function triggered by a prompt that displays the current dialogue line and cycles the index to the next line, looping back to the start when the end is reached.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-5/intro-to-arrays.md#_snippet_9\n\nLANGUAGE: Luau\nCODE:\n```\n-- Cycles through chat dialogue when prompt is used\n\nlocal Chat = game:GetService(\"Chat\")\n\nlocal prompt = script.Parent\n\nlocal npc = prompt.Parent\nlocal characterParts = npc.CharacterParts\nlocal head = characterParts.Head\n\n-- Add array here\nlocal dialogueArray = {\"Hi!\", \"Do I know you?\", \"Goodbye!\"}\nlocal dialogueIndex = 1\n\nlocal function speak()\n   local dialogue = dialogueArray[dialogueIndex]\n   Chat:Chat(head, dialogue)\n\n   dialogueIndex = if dialogueIndex == #dialogueArray then 1 else dialogueIndex + 1\nend\n\nprompt.Triggered:Connect(speak)\n```\n\n----------------------------------------\n\nTITLE: Creating a Path Enabling Truss Climbing - PathfindingService - Lua\nDESCRIPTION: Demonstrates creating a path for an agent able to climb truss parts. Sets the 'AgentCanClimb' property to true and assigns a custom traversal cost to climbing. The snippet relies on the Roblox PathfindingService and expects a configuration table as input. Output is a Path usable for climbing scenarios; no climbing occurs unless a climbable route is present in the game world.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/characters/pathfinding.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal PathfindingService = game:GetService(\"PathfindingService\")\n\nlocal path = PathfindingService:CreatePath({\n\tAgentCanClimb = true,\n\tCosts = {\n\t\tClimb = 2  -- Cost of the climbing path; default is 1\n\t}\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Numeric For Loops in Luau\nDESCRIPTION: This snippet illustrates numeric `for` loops in Luau. Loops can iterate forwards from a start to end value (inclusive) with a default step of 1, or backwards by specifying a negative step value.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/luau-csharp-comparison.md#_snippet_2\n\nLANGUAGE: Luau\nCODE:\n```\n-- Forward loop\nfor i = 1, 10 do\n\tdoSomething()\nend\n\n-- Reverse loop\nfor i = 10, 1, -1 do\n\tdoSomething()\nend\n```\n\n----------------------------------------\n\nTITLE: Using pairs() to Add Selected Menu Items to an Array in Lua\nDESCRIPTION: Uses pairs() to iterate through a menu dictionary, checking which ingredients are selected (true), and adding those to the selectedIngredients array.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-5/pairs-and-ipairs.md#_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\n-- Customer's soup\nlocal selectedIngredients = {}\n\n-- Adds customer's choices to their soup\nfor menuChoice, value in pairs(menu) do\n\tif value then\n\t\ttable.insert(selectedIngredients, menuChoice)\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Listening for Selfie Mode Open Event in Roblox LocalScript\nDESCRIPTION: Connects a function to the 'selfieModeOpened' event to perform actions when the selfie mode is opened or triggered via openSelfieMode. Requires the SelfieMode module and is used within a LocalScript to respond to user actions. Outputs a message to the console when triggered.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/selfie-mode.md#_snippet_15\n\nLANGUAGE: Lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal SelfieMode = require(ReplicatedStorage:WaitForChild(\"SelfieMode\"))\n\nSelfieMode.selfieModeOpened:Connect(function()\n\tprint(\"Selfie mode open\")\nend)\n```\n\n----------------------------------------\n\nTITLE: Server-Side Raycasting Validation with Parallel Execution - Lua\nDESCRIPTION: This Lua code demonstrates server-side raycasting validation for a fighting experience using parallel execution. It creates a RemoteEvent to receive hit information from the client, then performs raycasts in parallel to confirm the hit.  The code uses `task.desynchronize()` and `task.synchronize()` to switch between parallel and serial execution phases. Requires Workspace service and assumes a tool hierarchy with a Handle.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/scripting/multithreading.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal tool = script.Parent.Parent\n\nlocal remoteEvent = Instance.new(\"RemoteEvent\")  -- Create new remote event and parent it to the tool\nremoteEvent.Name = \"RemoteMouseEvent\"  -- Rename it so that the local script can look for it\nremoteEvent.Parent = tool\nlocal remoteEventConnection  -- Create a reference for the remote event connection\n\n-- Function which listens for a remote event\nlocal function onRemoteMouseEvent(player: Player, clickLocation: CFrame)\n\t-- SERIAL: Execute setup code in serial\n\tlocal character = player.Character\n\t-- Ignore the user's character while raycasting\n\tlocal params = RaycastParams.new()\n\tparams.FilterType = Enum.RaycastFilterType.Exclude\n\tparams.FilterDescendantsInstances = { character }\n\n\t-- PARALLEL: Perform the raycast in parallel\n\ttask.desynchronize()\n\tlocal origin = tool.Handle.CFrame.Position\n\tlocal epsilon = 0.01  -- Used to extend the ray slightly since the click location might be slightly offset from the object\n\tlocal lookDirection = (1 + epsilon) * (clickLocation.Position - origin)\n\tlocal raycastResult = Workspace:Raycast(origin, lookDirection, params)\n\tif raycastResult then\n\t\tlocal hitPart = raycastResult.Instance\n\t\tif hitPart and hitPart.Name == \"block\" then\n\t\t\tlocal explosion = Instance.new(\"Explosion\")\n\n\t\t\t-- SERIAL: The code below modifies state outside of the actor\n\t\t\ttask.synchronize()\n\t\t\texplosion.DestroyJointRadiusPercent = 0  -- Make the explosion non-deadly\n\t\t\texplosion.Position = clickLocation.Position\n\n\t\t\t-- Multiple actors could get the same part in a raycast and decide to destroy it\n\t\t\t-- This is perfectly safe but it would result in two explosions at once instead of one\n\t\t\t-- The following double checks that execution got to this part first\n\t\t\tif hitPart.Parent then\n\t\t\t\texplosion.Parent = Workspace\n\t\t\t\thitPart:Destroy()  -- Destroy it\n\t\t\tend\n\t\tend\n\tend\nend\n\n-- Connect the signal in serial initially since some setup code is not able to run in parallel\nremoteEventConnection = remoteEvent.OnServerEvent:Connect(onRemoteMouseEvent)\n```\n\n----------------------------------------\n\nTITLE: Removing a Key-Value Pair From a Dictionary by Setting Nil in Luau - Lua\nDESCRIPTION: Shows how to delete a dictionary entry by assigning nil to its key, effectively removing the key-value pair. Prints the dictionary afterward to confirm removal. Requires a populated dictionary; outputs only remaining key-value pairs after deletion.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/tables.md#_snippet_13\n\nLANGUAGE: lua\nCODE:\n```\nlocal testDictionary = {\n\tfruitName = \"Lemon\",\n\tfruitColor = \"Yellow\",\n\tsour = true\n}\n\ntestDictionary[\"sour\"] = nil\n\nfor key, value in pairs(testDictionary) do\n\tprint(key, value)\nend\n--[[ Resulting output:\nfruitName Lemon\nfruitColor Yellow\n]]\n```\n\n----------------------------------------\n\nTITLE: Initializing PlayerManager Module Script in Lua\nDESCRIPTION: This snippet initializes the PlayerManager module script, creating a basic structure for managing player-related functionality. It defines an empty table `PlayerManager` and returns it, setting the stage for adding functions and variables related to player management. The comments indicate where local and module functions should be added.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/battle-royale-series/managing-players.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal PlayerManager = {}\n-- Local Functions\n\n-- Module Functions\n\nreturn PlayerManager\n```\n\n----------------------------------------\n\nTITLE: Using OnChatWindowAdded Callback to Customize Chat Message Appearance\nDESCRIPTION: Demonstrates how to leverage 'TextChatService.OnChatWindowAdded' callback for customizing chat message appearance based on player attributes. This approach overrides default message properties, allowing per-player customization such as color and tags in chat messages, replicating legacy 'extra data' functionality.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/chat/in-experience-text-chat.md#_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nlocal TextChatService = game:GetService(\"TextChatService\")\nlocal Players = game:GetService(\"Players\")\n\nTextChatService.OnChatWindowAdded = function(textChatMessage)\n\tlocal textSource = textChatMessage.TextSource\n\tif textSource then\n\t\tlocal player = Players:GetPlayerByUserId(textSource.UserId)\n\t\tif player then\n\t\t\tlocal overrideProperties = TextChatService.ChatWindowConfiguration:DeriveNewMessageProperties()\n\t\t\toverrideProperties.PrefixText = textChatMessage.PrefixText\n\t\t\toverrideProperties.Text = textChatMessage.Text\n\n\t\t\tlocal nameColor = player:GetAttribute(\"NameColor\")\n\t\t\tif nameColor and typeof(nameColor) == \"Color3\" then\n\t\t\t\toverrideProperties.PrefixTextProperties.TextColor3 = nameColor\n\t\t\tend\n\n\t\t\tlocal chatColor = player:GetAttribute(\"ChatColor\")\n\t\t\tif chatColor and typeof(chatColor) == \"Color3\" then\n\t\t\t\toverrideProperties.TextColor3 = chatColor\n\t\t\tend\n\n\t\t\tlocal isYourTag = player:GetAttribute(\"isYourTag\")\n\t\t\tif isYourTag == true then\n\t\t\t\toverrideProperties.PrefixText = `<font color='rgb(0, 255, 0)'>[YourTag]</font> {overrideProperties.PrefixText}`\n\t\t\tend\n\n\t\t\tlocal isOtherTag = player:GetAttribute(\"isOtherTag\")\n\t\t\tif isOtherTag == true then\n\t\t\t\toverrideProperties.PrefixText = `<font color='rgb(255, 0, 0)'>[OtherTag]</font> {overrideProperties.PrefixText}`\n\t\t\tend\n\n\t\t\treturn overrideProperties\n\t\tend\n\tend\n\n\treturn nil\nend\n```\n\n----------------------------------------\n\nTITLE: Tweening CanvasGroup GroupColor3 in Roblox Lua\nDESCRIPTION: Applies a color transition to a group of UI elements inside a CanvasGroup by tweening its GroupColor3 property. This enables synchronized color changes for all child objects. Requires CanvasGroup setup with TweenService and Players available, takes a Color3 target as input, and outputs a collective color effect.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/ui/animation.md#_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlocal TweenService = game:GetService(\"TweenService\")\nlocal Players = game:GetService(\"Players\")\n\nlocal PlayerGui = Players.LocalPlayer:WaitForChild(\"PlayerGui\")\nlocal ScreenGui = PlayerGui:WaitForChild(\"ScreenGui\")\nlocal canvasGroup = ScreenGui:WaitForChild(\"CanvasGroup\")\n\nlocal targetColor = Color3.fromRGB(255, 0, 0)\n\nlocal tweenInfo = TweenInfo.new(2)\nlocal tween = TweenService:Create(canvasGroup, tweenInfo, {GroupColor3 = targetColor})\n\ntween:Play()\n```\n\n----------------------------------------\n\nTITLE: Basic Tool Touch Interaction Script in Roblox Lua\nDESCRIPTION: This script handles detecting when the player's tool handle touches a harvestable item, checking for the 'CanHarvest' boolean, and printing a confirmation message if the item is valid for harvesting. It sets up the core touch detection and initial testing phase.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/adventure-game-series/collect-items.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\n-- Gives players item when they touch a harvestable part\nlocal tool = script.Parent\nlocal toolPart = tool.Handle\n\nlocal function onTouch(partTouched)\n  local canHarvest = partTouched:FindFirstChild(\"CanHarvest\")\n  if canHarvest then\n    -- Used for testing if code works\n    print(\"Found an item\")\n  end\nend\n\ntoolPart.Touched:Connect(onTouch)\n```\n\n----------------------------------------\n\nTITLE: Require TreasureManager module - Lua\nDESCRIPTION: This code snippet retrieves the TreasureManager module script from ServerStorage and assigns it to the `treasureManager` variable. This allows the ChestScript to access the functions defined in the TreasureManager module.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-6/create-with-module-scripts.md#_snippet_15\n\nLANGUAGE: Lua\nCODE:\n```\nlocal ServerStorage = game:GetService(\"ServerStorage\")\n-- Require the module script below\nlocal treasureManager = require(ServerStorage:WaitForChild(\"TreasureManager\"))\n```\n\n----------------------------------------\n\nTITLE: Initializing Players Service and Variables in TreasureManager - Roblox Lua\nDESCRIPTION: Sets up initial module and local variables in TreasureManager: retrieving the Players service and defining keyDrop, the amount of keys given on pickup. These variables are used throughout the module to access player data and control inventory logic. No direct function calls are made; rather, this prepares dependencies and configuration for subsequent functions.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-6/create-with-module-scripts.md#_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlocal TreasureManager = {}\nlocal Players = game:GetService(\"Players\")\nlocal keyDrop = 1\n\n------------------ Local Functions\n\n------------------ Module Functions\nfunction TreasureManager.getKey(keyPart, whichCharacter)\n\tkeyPart:Destroy()\nend\n\nreturn TreasureManager\n```\n\n----------------------------------------\n\nTITLE: Iteration Algorithm Example\nDESCRIPTION: This Lua code snippet demonstrates an iteration algorithm using a for loop. The loop counts down from 10 to 1, decrementing the `time` variable by 1 in each iteration and waiting for 1 second using `task.wait(1)`. This exemplifies how to repeat parts of the code as necessary.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/resources/coding-concept-algorithms.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nfor countDown = 10, 1, -1 do\n\ttime -= 1\n\ttask.wait(1)\nend\n```\n\n----------------------------------------\n\nTITLE: Populating Luau Dialogue Array\nDESCRIPTION: Adds string values (dialogue lines) into the `dialogueArray`. The strings are enclosed in quotes and separated by commas within the curly brackets, defining the set of phrases the NPC can say.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-5/intro-to-arrays.md#_snippet_2\n\nLANGUAGE: Luau\nCODE:\n```\nlocal dialogueArray = {\"Hi!\", \"Do I know you?\", \"Goodbye!\"}\n```\n\n----------------------------------------\n\nTITLE: Initializing Tool Action Handlers with Lua in Roblox\nDESCRIPTION: This snippet initializes basic handlers for a tool in Roblox using Lua, specifically for tool-equipped and tool-activated events. It establishes local variables for the tool and the reload action name. The 'toolEquipped' and 'toolActivated' functions are connected to their respective events to play sounds or animations using the tool's handle. No external dependencies are required beyond being attached to the proper LocalScript in a tool. Inputs and outputs involve the player's interaction with the tool; no special limitations apply.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/input-and-camera/detect-user-input.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal tool = script.Parent\n\nlocal RELOAD_ACTION = \"reloadWeapon\"\n\nlocal function toolEquipped()\n\ttool.Handle.Equip:Play()\nend\n\nlocal function toolActivated()\n\ttool.Handle.Activate:Play()\nend\n\ntool.Equipped:Connect(toolEquipped)\ntool.Activated:Connect(toolActivated)\n```\n\n----------------------------------------\n\nTITLE: Evaluating variable existence in an if statement in Luau\nDESCRIPTION: Checks if a variable named mysteryPart successfully references an object in the workspace. If true (i.e., mysteryPart is not nil), the LieDetector part’s color changes to green. Demonstrates conditionals evaluating variable truthiness. Requires a Roblox environment with a MysteryPart object and LieDetector part.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-3/intro-to-if-statements.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal mysteryPart = workspace.MysteryPart\n\n-- Evaluates as true if MysteryPart was successfully assigned\nif mysteryPart then\n\tworkspace.LieDetector.Color = Color3.fromRGB(0, 255, 0)\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Merch Booth Appearance and Behavior (Lua)\nDESCRIPTION: Demonstrates how to use the `MerchBooth.configure` function from a client-side `LocalScript` to customize the Merch Booth's appearance and behavior. It requires the MerchBooth module. The example sets the background color, text size, font, text color, and disables hiding other UIs. This function takes a table (`config`) as input with various keys defined in the preceding documentation table.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/merch-booth.md#_snippet_13\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal MerchBooth = require(ReplicatedStorage:WaitForChild(\"MerchBooth\"))\n\nMerchBooth.configure({\n\tbackgroundColor = Color3.fromRGB(255, 255, 255),\n\ttextSize = 16,\n\ttextFont = Enum.Font.Roboto,\n\ttextColor = Color3.fromRGB(20, 20, 20),\n\thideOtherUis = false,\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Object Attribute in Roblox Lua\nDESCRIPTION: This snippet demonstrates the creation or modification of a custom attribute on a Roblox instance. It gets the parent of the script (`cabbage`) and uses `SetAttribute()` to create or update a boolean attribute named \"Harvestable\" to the value `true`. Dependency: Roblox Engine.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/scripting/attributes.md#_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal cabbage = script.Parent\n\ncabbage:SetAttribute(\"Harvestable\", true)\n```\n\n----------------------------------------\n\nTITLE: Activating Selfie Mode Actions Programmatically in Lua\nDESCRIPTION: Demonstrates how to activate a specific Selfie Mode action through code. This example activates the Filter action, which would open the filter selection menu for the player.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/selfie-mode.md#_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal SelfieMode = require(ReplicatedStorage:WaitForChild(\"SelfieMode\"))\n\n-- Activate \"Filter\" action\nSelfieMode.activateAction(SelfieMode.Action.Filter)\n```\n\n----------------------------------------\n\nTITLE: Initiating Drag Operation in Roblox Lua\nDESCRIPTION: This snippet connects the `MouseButton1Down` event of a `TextButton` to a function that prepares drag information, including data, MIME type, and sender details. It invokes `StartDrag()` on the plugin to begin the drag process with the specified data, facilitating drag-and-drop interactions between UI elements within Roblox plugins.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/studio/build-studio-widgets.md#_snippet_6\n\nLANGUAGE: Lua\nCODE:\n```\nlocal function onButton1Down()\n\tlocal dragInfo = {\n\t\tData = \"Hello, world\",      -- The data being dragged\n\t\tMIMEType = \"text/plain\",    -- Describes the MIME type of the data\n\t\tSender = \"SomeDragSource\",  -- Describes from where the data originated\n\t\tMouseIcon = \"\",             -- Image content to use for the cursor\n\t\tDragIcon = \"\",              -- Image content to render under the cursor during drag\n\t\tHotSpot = Vector2.zero      -- Where on the DragIcon to center the cursor\n\t}\n\tplugin:StartDrag(dragInfo)\nend\n\ndragButton.MouseButton1Down:Connect(onButton1Down)\n```\n\n----------------------------------------\n\nTITLE: Set Ray Destination\nDESCRIPTION: This snippet checks if ray hit a player or didn't hit anything, setting ray's destination to the intersection or the point at the end of its maximum distance respectively.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/gameplay-scripting/detect-hits.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nif result then\n\t-- The blast hit something, check if it was a player.\n    destination = CFrame.lookAt(result.Position, result.Position + result.Normal)\n    taggedPlayer = getPlayerFromDescendant(result.Instance)\nelse\n\t-- The blast didn't hit anything, so its destination is\n\t-- the point at its maximum distance.\n\tlocal distantPosition = origin + rayDirection * MAX_DISTANCE\n\tdestination = CFrame.lookAt(distantPosition, distantPosition - rayDirection)\n\ttaggedPlayer = nil\nend\n```\n\n----------------------------------------\n\nTITLE: Subscribing to a Messaging Topic in Roblox Lua\nDESCRIPTION: This code demonstrates how to subscribe users to a messaging topic. It sets up a subscription when a player joins and includes a callback function to handle incoming messages. The subscription is properly disconnected when the player leaves.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud-services/cross-server-messaging.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal MessagingService = game:GetService(\"MessagingService\")\nlocal Players = game:GetService(\"Players\")\n\nlocal MESSAGING_TOPIC = \"FriendServerEvent\"\n\nPlayers.PlayerAdded:Connect(function(player)\n\t-- Subscribe to the topic\n\tlocal subscribeSuccess, subscribeConnection = pcall(function()\n\t\treturn MessagingService:SubscribeAsync(MESSAGING_TOPIC, function(message)\n\t\t\tprint(message.Data)\n\t\tend)\n\tend)\n\tif subscribeSuccess then\n\t\t-- Unsubscribe from topic upon player ancestry change\n\t\tplayer.AncestryChanged:Connect(function()\n\t\t\tsubscribeConnection:Disconnect()\n\t\tend)\n\tend\nend)\n```\n\n----------------------------------------\n\nTITLE: Incrementing Luau Dialogue Index\nDESCRIPTION: Adds `dialogueIndex += 1` to the `speak` function. This increments the index by 1 after each time the function is called, preparing the script to show the subsequent dialogue line on the next interaction.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-5/intro-to-arrays.md#_snippet_6\n\nLANGUAGE: Luau\nCODE:\n```\nlocal function speak()\n  local dialogue = dialogueArray[dialogueIndex]\n  Chat:Chat(head, dialogue)\n\n  dialogueIndex += 1\nend\n```\n\n----------------------------------------\n\nTITLE: Detecting Subscription Status (Lua)\nDESCRIPTION: This snippet demonstrates how to detect if a player has an active subscription. It uses `MarketplaceService:GetUserSubscriptionStatusAsync` to retrieve the subscription status. The `grantAward` function is called if the player is subscribed, and `revokeAwardIfGranted` is called otherwise.  Dependencies include the MarketplaceService and Players services.  The input is the player object; the output is granting or revoking subscription benefits.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/production/monetization/subscriptions.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Run this code on the server\nlocal MarketplaceService = game:GetService(\"MarketplaceService\")\nlocal Players = game:GetService(\"Players\")\n\nlocal SUBSCRIPTION_ID = \"EXP-11111111\" -- Replace with your subscription ID\n\nlocal function grantAward(player: Player)\n\t-- You should grant the award associated with the subscription here\nend\n\nlocal function revokeAwardIfGranted(player: Player)\n\t-- This method is called for every player who does _not_ have the subscription\n    -- If your code saves subscriptions to Data Stores or provides some benefit that needs to be 'revoked'\n    -- you should use this method to handle the revocation\nend\n\nlocal function checkSubStatus(player)\n\tlocal success, response = pcall(function()\n\t\treturn MarketplaceService:GetUserSubscriptionStatusAsync(player, SUBSCRIPTION_ID)\n\tend)\n\n\tif not success then\n\t\twarn(`Error while checking if player has subscription: {response}`)\n\t\treturn\n\tend\n\n\tif response.IsSubscribed then\n\t\tgrantAward(player)\n\telse\n\t\trevokeAwardIfGranted(player)\n\tend\nend\n\nlocal function onUserSubscriptionStatusChanged(player: Player, subscriptionId: string)\n\tif subscriptionId == SUBSCRIPTION_ID then\n\t\tcheckSubStatus(player)\n\tend\nend\n\nPlayers.PlayerAdded:Connect(checkSubStatus)\nPlayers.UserSubscriptionStatusChanged:Connect(onUserSubscriptionStatusChanged)\n```\n\n----------------------------------------\n\nTITLE: Handling 'allCollected' Event in Roblox with Lua\nDESCRIPTION: This code snippet demonstrates how to connect to the `allCollected` event of the ScavengerHunt module in Roblox using Lua. The event fires when a player collects all tokens. The connected function receives the player and prints a completion message.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/scavenger-hunt.md#_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal ScavengerHunt = require(ReplicatedStorage:WaitForChild(\"ScavengerHunt\"))\n\nScavengerHunt.allCollected:Connect(function(player)\n\tprint(player.DisplayName .. \" completed the hunt!\")\nend)\n```\n\n----------------------------------------\n\nTITLE: Requiring the TreasureManager Module Script in KeyScript - Roblox Lua\nDESCRIPTION: Shows how to require and assign the TreasureManager module script from ServerStorage using WaitForChild for dependency handling. The script initializes local references to game services and object collections, ensuring the module is loaded before any functions are called. This setup is crucial for invoking module functions such as getKey() within other scripts.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-6/create-with-module-scripts.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal ServerStorage = game:GetService(\"ServerStorage\")\n-- Require the module script below ⯆\nlocal treasureManager = require(ServerStorage:WaitForChild(\"TreasureManager\"))\n\nlocal keys = script.Parent\nlocal keysFolder = keys.Parts\nlocal keysArray = keysFolder:GetChildren()\n```\n\n----------------------------------------\n\nTITLE: Setting Cube Position Using CFrame Parameters - Luau\nDESCRIPTION: Updates the `makeCube()` function to utilize the `spawnX`, `spawnY`, and `spawnZ` parameters. It sets the `CFrame` property of the newly created part using `CFrame.new()`, positioning the cube at the specified coordinates in the 3D space.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-4/nested-loops.md#_snippet_7\n\nLANGUAGE: Luau\nCODE:\n```\nlocal function makeCube(spawnX, spawnY, spawnZ)\n    local cube = Instance.new(\"Part\")\n    cube.Size = Vector3.new(CUBE_SIZE, CUBE_SIZE, CUBE_SIZE)\n    cube.Color = currentColor\n    cube.CFrame = CFrame.new(spawnX, spawnY, spawnZ)\n    cube.Parent = workspace\nend\n```\n\n----------------------------------------\n\nTITLE: Animating Cooldown Bar Tweening Using Roblox Lua\nDESCRIPTION: This Lua module script defines a function that animates a cooldown bar's size reduction to represent the blaster cooldown period. It retrieves the cooldown duration ('secondsBetweenBlasts') from a blaster configuration module, sets the bar's size to full initially, then uses TweenService to tween the bar size to zero over the cooldown time. Dependencies include Roblox services 'ReplicatedStorage' and 'TweenService', and the 'getBlasterConfig' module. The input parameter 'part' is a Part instance containing the SurfaceGui with the cooldown bar. The output is a running Tween animation on the bar's Size property. This visually signals to players when the blaster can be fired again. Limitations include assuming the 'part' argument contains the expected UI elements with proper naming.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/user-interface-design/implement-designs-in-studio.md#_snippet_23\n\nLANGUAGE: Lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal TweenService = game:GetService(\"TweenService\")\n\nlocal getBlasterConfig = require(ReplicatedStorage.Blaster.getBlasterConfig)\n\nlocal END_SIZE = UDim2.fromScale(0, 1)\nlocal EASING_DIRECTION = Enum.EasingDirection.In\nlocal EASING_STYLE = Enum.EasingStyle.Quad\n\nlocal function runCooldownBarEffect(part: Part)\n\tlocal bar = part.SurfaceGui.Container.Bar\n\n\t-- Set bar size to 1 (bar filled)\n\tbar.Size = UDim2.fromScale(1, 1)\n\n\t-- Tween the size to 0 (bar empty) for the duration of secondsBetweenBlasts\n\tlocal secondsBetweenBlasts = getBlasterConfig():GetAttribute(\"secondsBetweenBlasts\")\n\tlocal tweenInfo = TweenInfo.new(secondsBetweenBlasts, EASING_STYLE, EASING_DIRECTION)\n\tlocal propertyTable = {\n\t\tSize = END_SIZE,\n\t}\n\tlocal tween = TweenService:Create(bar, tweenInfo, propertyTable)\n\ttween:Play()\nend\n\nreturn runCooldownBarEffect\n```\n\n----------------------------------------\n\nTITLE: Resolving Conflicting Texture/SurfaceAppearance Error\nDESCRIPTION: This warning indicates that both a `TextureID` and a `SurfaceAppearance` instance are defined for the MeshPart (`%s`). During publishing, only the `SurfaceAppearance` will be used, potentially overriding the intended `TextureID`.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/validation-errors.md#_snippet_6\n\nLANGUAGE: Text\nCODE:\n```\nTextureID and Surface Appearance are both defined for MeshPart `%s`. Publishing will only use Surface Appearance\n```\n\n----------------------------------------\n\nTITLE: Displaying Roblox Share Percentage using JSX Grid and Chip\nDESCRIPTION: This JSX snippet utilizes Grid and Chip components to represent the 17% share retained by Roblox for ongoing services and operating costs. It follows the established pattern, using styled chips within a grid, including the distinct background color for the percentage.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/production/earn-on-roblox.md#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Grid container spacing={1}>\n<Grid item XSmall={2}>\n<Chip label=\"17%\" size=\"large\" style={{backgroundColor:\"#004F80\",color:\"white\",fontSize:\"120%\",width:\"100%\"}} />\n</Grid>\n<Grid item XSmall={10}>\n<Chip label=\"Roblox share\" size=\"large\" color=\"primary\" variant=\"outlined\" style={{fontSize:\"105%\"}}/>\n</Grid>\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Assigning a Hard-Coded Product Price - Roblox Lua\nDESCRIPTION: This Lua example assigns a fixed price to a product using a hard-coded numeric value. The priceInRobux variable is directly set to 500, representing the product's price in Robux. This method does not support dynamic price optimization, as changes must be made manually in the script. No external dependencies are required, but hard-coded pricing prevents price adjustments via the Creator Hub and is discouraged for experiences seeking automatic price optimization.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/production/monetization/price-optimization.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal priceInRobux = 500\n```\n\n----------------------------------------\n\nTITLE: Using getKey() from KeyScript on Part Touch - Roblox Lua\nDESCRIPTION: Within KeyScript, this snippet handles the part touch event by calling the treasureManager.getKey function with the touched part and character as arguments. It checks for a valid Humanoid to confirm player contact, then updates the player's key inventory and destroys the part. Dependencies include proper module setup and expected object hierarchy in Workspace and ServerStorage.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-6/create-with-module-scripts.md#_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal ServerStorage = game:GetService(\"ServerStorage\")\n-- Require the module script below ⯆\nlocal treasureManager = require(ServerStorage:WaitForChild(\"TreasureManager\"))\n\nlocal keys = script.Parent\nlocal keysFolder = keys.Parts\nlocal keysArray = keysFolder:GetChildren()\n\nlocal function partTouched(otherPart, keyPart)\n\tlocal whichCharacter = otherPart.Parent\n\tlocal humanoid = whichCharacter:FindFirstChildWhichIsA(\"Humanoid\")\n\tif humanoid then\n\t\t-- Give the player a key and destroy the key part\n\t\t-- =============================================\n\t\ttreasureManager.getKey(keyPart, whichCharacter)\n\t\t-- =============================================\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Tracking Sink Gameplay Events with AnalyticsService in Lua\nDESCRIPTION: Shows how to log a sink economy event to track resource spending by a player, such as purchasing an upgrade. The Sink flow type and Shop transaction type are used here. Key parameters include player, currency name, positive cost amount, updated balance after the transaction, transaction type enum, and an item SKU representing the purchased item. The amount is always positive, while the analytics dashboard visualizes sinks as negative values. This snippet must be run server-side in published experiences.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/production/analytics/economy-events.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal AnalyticsService = game:GetService(\"AnalyticsService\")\n\n-- After level 2 completion\nAnalyticsService:LogEconomyEvent(\n    player,\n    Enum.AnalyticsEconomyFlowType.Sink,\n    \"Coins\", -- Currency name\n    80, -- Cost\n    20, -- Balance after transaction\n    Enum.AnalyticsEconomyTransactionType.Shop.Name,\n    \"DoubleJumpUpgrade\" -- Item SKU\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing While and Do-While Loops in C#\nDESCRIPTION: This snippet shows the syntax for boolean-controlled loops in C#. The `while` loop executes as long as the condition is true, checking it at the beginning. The `do-while` loop executes its body at least once, checking the condition at the end.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/luau-csharp-comparison.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nwhile (boolExpression) {\n\tdoSomething();\n}\n\ndo {\n\tdoSomething();\n} while (boolExpression)\n```\n\n----------------------------------------\n\nTITLE: Initializing an Empty Luau Array\nDESCRIPTION: Declares a local variable `pathArray` and initializes it as an empty table, which serves as an array in Luau. This array will later be populated with references to game objects.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-5/loops-and-arrays.md#_snippet_0\n\nLANGUAGE: Luau\nCODE:\n```\nlocal pathArray = {\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Operation Object for Long-Running Requests in JSON\nDESCRIPTION: Provides an example structure of an Operation object returned by Roblox Open Cloud for long-running API requests. The object includes a polling path, completion status, response payload, and optional metadata. Clients must use the path to poll for operation completion before accessing results. Intended for use with asynchronous Open Cloud endpoints; no dependencies beyond typical REST API usage.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/reference/patterns.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"path\": \"v1/assets/12345/operation/xyz\",\n  \"done\": true,\n  \"response\": {\n    \"value1\": \"myValue\",\n    \"value2\": 1234\n  },\n  \"metadata\": {\n    \"metadata1\": \"string\",\n    \"metadata2\": 5678\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Lua Script for Playing 3D Audio and Visual Feedback on Button Interaction\nDESCRIPTION: This script manages the interaction with a 3D button in Roblox, playing a celebratory sound when touched and animating the button's appearance. It connects the 'Touched' event to trigger audio playback and uses TweenService to animate the button's size and color based on the audio's playing state. The script ensures synchronized visual feedback with auditory cues for an immersive experience.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/audio/add-3D-audio.md#_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nlocal TweenService = game:GetService(\"TweenService\")\n\nlocal buttonModel = script.Parent.Parent\nlocal buttonPart = buttonModel.ButtonPart\nlocal buttonPressedAudioPlayer = buttonModel.ButtonPressedAudioPlayer\n\nlocal tweenInfo = TweenInfo.new(.2, Enum.EasingStyle.Exponential)\n\nlocal buttonTweenByIsPressed = {\n\t-- Pressed\n\t[true] = TweenService:Create(buttonPart, tweenInfo, {\n\t\tSize = buttonPart.Size / Vector3.new(2, 1, 1),\n\t\tColor = Color3.fromRGB(75, 151, 75),\n\t}),\n\t\n\t-- Default\n\t[false] = TweenService:Create(buttonPart, tweenInfo, {\n\t\tSize = buttonPart.Size,\n\t\tColor = Color3.fromRGB(196, 40, 28),\n\t}),\n}\n\nlocal function onIsPlayingChanged()\n \tlocal isPlaying = buttonPressedAudioPlayer.IsPlaying\n \tlocal tween = buttonTweenByIsPressed[isPlaying]\n \t*tween:Play()*\nend\n\nonIsPlayingChanged()\nbuttonPressedAudioPlayer:GetPropertyChangedSignal(\"IsPlaying\"):Connect(onIsPlayingChanged)\nbuttonPressedAudioPlayer.Ended:Connect(onIsPlayingChanged)\n\nbuttonPart.Touched:Connect(function(_hit)\n \tbuttonPressedAudioPlayer:Play()\nend)\n```\n\n----------------------------------------\n\nTITLE: Checking if a Player Has a Badge in Roblox using Lua\nDESCRIPTION: This Lua script sets up a listener for the `PlayerAdded` event. When a player joins, the `onPlayerAdded` function uses `BadgeService:UserHasBadgeAsync()` to check if the player already owns the badge specified by `BADGE_ID`. The check is performed within a `pcall` to handle potential errors. If the player possesses the badge, further logic (indicated by the comment) can be executed. Remember to replace the placeholder `BADGE_ID` with the actual ID of the badge you want to check.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/production/publishing/badges.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nlocal BadgeService = game:GetService(\"BadgeService\")\nlocal Players = game:GetService(\"Players\")\n\nlocal BADGE_ID = 00000000  -- Change this to your badge ID\n\nlocal function onPlayerAdded(player)\n  -- Check if the player has the badge\n\tlocal success, hasBadge = pcall(BadgeService.UserHasBadgeAsync, BadgeService, player.UserId, BADGE_ID)\n\n  -- If there's an error, issue a warning and exit the function\n\tif not success then\n\t\twarn(\"Error while checking if player has badge\")\n\t\treturn\n\tend\n\n\tif hasBadge then\n\t\t-- Handle player's badge ownership as needed\n\tend\nend\n\n-- Connect \"PlayerAdded\" events to the \"onPlayerAdded()\" function\nPlayers.PlayerAdded:Connect(onPlayerAdded)\n```\n\n----------------------------------------\n\nTITLE: Creating a function to handle trap touches in Lua\nDESCRIPTION: This code creates a function that will be triggered when something touches the trap part. It contains a print statement to verify the function is being called.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-2/use-parameters-and-events.md#_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nlocal trap = script.Parent\n\nlocal function onTouch(objectTouched)\n    print(\"Something touched the trap\")\nend\n```\n\n----------------------------------------\n\nTITLE: Illustrating Local Variable Shadowing in Luau For Loop\nDESCRIPTION: Demonstrates variable shadowing where a local variable `x` is declared in an outer scope, and a *different* local variable with the same name (`x`) is declared inside a `for` loop. The inner `x` shadows the outer `x` within the loop's scope, but the outer `x` remains unchanged after the loop completes, illustrating that they are distinct variables.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/scope.md#_snippet_4\n\nLANGUAGE: Luau\nCODE:\n```\nlocal x = 0  -- Local variable \"x\"\n\nfor i = 1, 4 do\n\tlocal x = 1  -- Different variable \"x\", local to this \"for\" loop\n\tprint(\"Loop 'x' = \" .. x)\nend\n\nprint(\"Initial 'x' = \" .. x)\n\n--[[ Resulting output:\nLoop 'x' = 1\nLoop 'x' = 1\nLoop 'x' = 1\nLoop 'x' = 1\nInitial 'x' = 0\n]]\n```\n\n----------------------------------------\n\nTITLE: Configure Equip Effect - Lua\nDESCRIPTION: This code snippet demonstrates how to configure the equip effect in the merch booth by setting the particleEmitterTemplate. It creates a new ParticleEmitter instance and configures its properties, then passes it to the configure function of the MerchBooth module.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/merch-booth.md#_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal MerchBooth = require(ReplicatedStorage:WaitForChild(\"MerchBooth\"))\n\nlocal myParticleEmitter = Instance.new(\"ParticleEmitter\")\nmyParticleEmitter.SpreadAngle = Vector2.new(22, 22)\nmyParticleEmitter.Lifetime = NumberRange.new(0.5, 1.5)\nmyParticleEmitter.Shape = Enum.ParticleEmitterShape.Sphere\nmyParticleEmitter.Transparency = NumberSequence.new(0, 1)\nmyParticleEmitter.RotSpeed = NumberRange.new(200, 200)\n\nMerchBooth.configure({\n\tparticleEmitterTemplate = myParticleEmitter\n})\n```\n\n----------------------------------------\n\nTITLE: UI Tween - UIStroke Color & Thickness (Lua)\nDESCRIPTION: This Lua code snippet demonstrates how to use TweenService to animate the Color and Thickness properties of a UIStroke object in Roblox. It creates a UIStroke, sets its initial color and thickness, then tweens these properties to new target values using TweenService.  It depends on the TweenService, Players service, and assumes the existence of a PlayerGui, ScreenGui, and a TextLabel object.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/ui/animation.md#_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nlocal TweenService = game:GetService(\"TweenService\")\nlocal Players = game:GetService(\"Players\")\n\nlocal PlayerGui = Players.LocalPlayer:WaitForChild(\"PlayerGui\")\nlocal ScreenGui = PlayerGui:WaitForChild(\"ScreenGui\")\nlocal object = ScreenGui:WaitForChild(\"TextLabel\")\n\nlocal stroke = Instance.new(\"UIStroke\")\nstroke.Color = Color3.fromRGB(255, 255, 255)\nstroke.Thickness = 5\nstroke.Parent = object\n\nlocal targetColor = Color3.fromRGB(255, 0, 0)\nlocal targetThickness = 10\n\nlocal tweenInfo = TweenInfo.new(2)\nlocal tween = TweenService:Create(stroke, tweenInfo, {Color = targetColor, Thickness = targetThickness})\n\ntween:Play()\n```\n\n----------------------------------------\n\nTITLE: Enabling Native Code Generation for an Entire Script in Lua\nDESCRIPTION: This snippet demonstrates how to enable native code generation for an entire Lua script by adding the --!native comment at the top of the file. This causes all functions and the top-level scope to be compiled to native code if deemed profitable.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/native-code-gen.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n--!native\n\nprint(\"Hello from native code!\")\n```\n\n----------------------------------------\n\nTITLE: Defining the Intermission Exit Condition in GameManager (Roblox Lua)\nDESCRIPTION: Specifies the condition for exiting the intermission `repeat` loop within the GameManager script. The loop continues (`until` condition is false) as long as the current number of players (`#Players:GetPlayers()`) is less than the minimum required players defined in `gameSettings.minimumPlayers`. It exits once the player count is met or exceeded.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/battle-royale-series/coding-the-game-loop.md#_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nwhile true do\n\trepeat\n\n\tuntil #Players:GetPlayers() >= gameSettings.minimumPlayers\nend\n```\n\n----------------------------------------\n\nTITLE: Awarding Points to Alive Players Each Second in Roblox with Luau\nDESCRIPTION: Builds upon previous loops to increment each player's Points value in the leaderstats folder every second. Assumes Points exists and is an IntValue. For each player, retrieves the Points object and adds 1 to its Value. The loop continues indefinitely; interruptions or deaths are handled elsewhere.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/scripting/basic-scripting/score-points.md#_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nwhile true do\n  task.wait(1)\n  local playerList = Players:GetPlayers()\n  for currentPlayer = 1, #playerList do\n    local player = playerList[currentPlayer]\n    local points = player.leaderstats.Points\n    points.Value += 1\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using the TranslationHelper Module to Translate Strings in Roblox Lua\nDESCRIPTION: This snippet demonstrates how to require and use the TranslationHelper module, assumed to be stored in ReplicatedStorage, to set the desired language code ('es' for Spanish) and translate a string key ('Screen'). The returned localized string is printed to the console. Key dependencies include the TranslationHelper module and ReplicatedStorage service. Inputs are the language code and translation key, outputs are localized strings. This example shows practical usage of the TranslationHelper's methods in a LocalScript context.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/production/localization/localize-with-scripting.md#_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\n-- Require translation module\nlocal TranslationHelper = require(ReplicatedStorage:WaitForChild(\"TranslationHelper\"))\n\n-- Use the functions provided in TranslationHelper\nTranslationHelper.setLanguage(\"es\")\nlocal sourceTranslation = TranslationHelper.translate(\"Screen\")\nprint(sourceTranslation) -- Expected Output in 'es': \"Pantalla\"\n```\n\n----------------------------------------\n\nTITLE: Lua Script for damaging players on collision in Roblox\nDESCRIPTION: This Lua script is inserted into a Roblox LaserBeamBlaster object to detect when a player or NPC touches its collision box. Upon contact, it sets the humanoid's health to zero, causing the character to fall apart. The script requires the collision box within the laser object to be named 'CollisionBox' and to have this script as its child. It uses the Touched event to trigger the damage application.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/vfx/laser-traps-with-beams.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal laserTrap = script.Parent\nlocal collisionBox = laserTrap.CollisionBox\n\nlocal function onTouch(otherPart)\n\tlocal character = otherPart.Parent\n\tlocal humanoid = character:FindFirstChildWhichIsA(\"Humanoid\")\n\n\tif humanoid then\n\t\thumanoid.Health = 0\n\tend\nend\n\ncollisionBox.Touched:Connect(onTouch)\n```\n\n----------------------------------------\n\nTITLE: Configuring Navigation Buttons for Blaster Selection in Roblox Lua\nDESCRIPTION: This Lua module script listens for activations on left and right navigation buttons within the blaster selector GUI. Pressing the left button decreases the selected blaster index by one, whereas pressing the right button increases it by one. Both operations use `math.clamp` to ensure the new index remains within valid bounds corresponding to available blaster buttons. Updating the selected index attribute triggers visual updates elsewhere. The module depends on a shared GuiAttribute module and requires the GUI and blaster buttons as inputs.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/user-interface-design/implement-designs-in-studio.md#_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal GuiAttribute = require(ReplicatedStorage.GuiAttribute)\n\nlocal function setupNavButtons(gui: ScreenGui, blasterButtons: { ImageButton })\n\tlocal frame = gui.Frame.SelectionFrame.Frame\n\tlocal navigationButtonLeft = frame.NavigationButtonLeft\n\tlocal navigationButtonRight = frame.NavigationButtonRight\n\n\tnavigationButtonLeft.Activated:Connect(function()\n\t\tlocal currentIndex = gui:GetAttribute(GuiAttribute.selectedIndex)\n\t\tlocal newIndex = math.clamp(currentIndex - 1, 1, #blasterButtons)\n\t\tgui:SetAttribute(GuiAttribute.selectedIndex, newIndex)\n\tend)\n\n\tnavigationButtonRight.Activated:Connect(function()\n\t\tlocal currentIndex = gui:GetAttribute(GuiAttribute.selectedIndex)\n\t\tlocal newIndex = math.clamp(currentIndex + 1, 1, #blasterButtons)\n\t\tgui:SetAttribute(GuiAttribute.selectedIndex, newIndex)\n\tend)\nend\n\nreturn setupNavButtons\n```\n\n----------------------------------------\n\nTITLE: Using Anonymous Functions for Callbacks and Event Handlers\nDESCRIPTION: Provides two examples of using anonymous functions. The first uses one as a callback for `task.delay`, printing the elapsed time. The second connects an anonymous function directly as an event handler for `Players.PlayerAdded`, printing a message when a player joins. Requires the Roblox environment and `Players` service for the second part.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/functions.md#_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\n-- Anonymous function in a callback to task.delay()\ntask.delay(2, function(exactTimeElapsed)\n\tprint(exactTimeElapsed) -- 2.0064592329945\nend)\n\n-- Anonymous function in an event handler\nlocal Players = game:GetService(\"Players\")\nPlayers.PlayerAdded:Connect(function(player)\n\tprint(player.Name .. \" joined the game!\")\nend)\n```\n\n----------------------------------------\n\nTITLE: Removing Object from Experience using Nil Parent in Luau\nDESCRIPTION: This example shows how setting an object's `Parent` property to `nil` removes it from the game hierarchy, making it invisible and non-interactive, but doesn't necessarily free its memory immediately if a script still holds a reference to the object. By setting the variable referencing the object (e.g., `part`) to `nil`, the object becomes eligible for garbage collection. The snippet uses `game:GetService(\"Workspace\")` to access the game world and `task.wait` for timing.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/nil.md#_snippet_1\n\nLANGUAGE: luau\nCODE:\n```\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Create a new brick\nlocal part = Instance.new(\"Part\")\n-- Parent new part to the workspace, making it viewable\npart.Parent = Workspace\ntask.wait(1)\n-- Remove the part from view but not from memory\npart.Parent = nil\ntask.wait(1)\n-- Part still exists because it's referenced by the variable \"part\", so it can be returned to view\npart.Parent = Workspace\ntask.wait(1)\n-- Remove the part from view again\npart.Parent = nil\n-- Clear part reference so it gets picked up by the garbage collector\npart = nil\n```\n\n----------------------------------------\n\nTITLE: Managing Player Attribute Changed Connections - Roblox - Luau\nDESCRIPTION: These Luau functions manage connections to the `GetAttributeChangedSignal` for each player's `playerState` attribute using a table `attributeChangedConnectionByPlayer`. `onPlayerAdded` connects the signal and stores the connection, while `onPlayerRemoving` disconnects and removes the reference when a player leaves, preventing memory leaks from accumulating connections.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/gameplay-scripting/spawn-respawn.md#_snippet_5\n\nLANGUAGE: Luau\nCODE:\n```\nlocal attributeChangedConnectionByPlayer = {}\nlocal function onPlayerAdded(player: Player)\n\n\t-- Handle all future updates to player state\n\tattributeChangedConnectionByPlayer[player] = player\n\t\t:GetAttributeChangedSignal(PlayerAttribute.playerState)\n\t\t:Connect(function()\n\t\t\tlocal newPlayerState = player:GetAttribute(PlayerAttribute.playerState)\n\t\t\tonPlayerStateChanged(player, newPlayerState)\n\t\tend)\nend\n\n-- Disconnect from the attribute changed connection when the player leaves\nlocal function onPlayerRemoving(player: Player)\n\tif attributeChangedConnectionByPlayer[player] then\n\t\tattributeChangedConnectionByPlayer[player]:Disconnect()\n\t\tattributeChangedConnectionByPlayer[player] = nil\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Tracking Shop Steps for Recurring Funnels in Roblox\nDESCRIPTION: This code snippet illustrates how to track multiple shopping sessions within a Roblox experience by assigning a unique funnelSessionId via GUID. It logs each step of a shop funnel, such as opening the store, viewing an item, and adding to cart, enabling detailed analysis of user purchasing behavior across sessions.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/production/analytics/funnel-events.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nlocal AnalyticsService = game:GetService(\"AnalyticsService\")\nlocal HttpService = game:GetService(\"HttpService\")\n\nfunnelSessionId = HttpService:GenerateGUID()\n\n-- Log when the user opens the store\nAnalyticsService:LogFunnelStepEvent(\n    player,\n    \"ArmoryCheckout\", -- Funnel name\n    funnelSessionId, -- Unique session ID\n    1, -- Step number\n    \"Opened Store\" -- Step name\n)\n\n-- Log when the user views an item\nAnalyticsService:LogFunnelStepEvent(\n    player,\n    \"ArmoryCheckout\",\n    funnelSessionId,\n    2,\n    \"Viewed Item\"\n)\n\n-- Log when the user adds an item to cart\nAnalyticsService:LogFunnelStepEvent(\n    player,\n    \"ArmoryCheckout\",\n    funnelSessionId,\n    3,\n    \"Added to Cart\"\n)\n```\n\n----------------------------------------\n\nTITLE: Updating Meter Bar with Tweening in Roblox Lua\nDESCRIPTION: This Lua script snippet demonstrates how to animate a health meter bar in Roblox using TweenService. It retrieves necessary game services, sets up tween parameters, references UI components, defines a gradient color sequence, and implements a function to interpolate color based on health percentage. The script updates the meter's size and color smoothly when health changes occur, creating a polished visual effect.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/ui/create-hud-meters.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\nlocal TweenService = game:GetService(\"TweenService\")\n\n-- Reference to local player, character, and humanoid\nlocal player = Players.LocalPlayer\nlocal character = player.Character\nlocal humanoid = character:WaitForChild(\"Humanoid\")\n\n-- Tween properties\nlocal tweenInfo = TweenInfo.new(0.5, Enum.EasingStyle.Exponential, Enum.EasingDirection.Out)\n\n-- Reference to meter bar inner frame\nlocal playerGui = player:WaitForChild(\"PlayerGui\")\nlocal meterBarInner = playerGui.HUDContainer.MeterBar.InnerFill\n\n-- Gradient sequence colors (red, orange, yellow, lime, green)\nlocal gradient = {\n\tColor3.fromRGB(225, 50, 0),\n\tColor3.fromRGB(255, 100, 0),\n\tColor3.fromRGB(255, 200, 0),\n\tColor3.fromRGB(150, 225, 0),\n\tColor3.fromRGB(0, 225, 50)\n}\n\n-- Function to get color in gradient sequence from fractional point\nlocal function getColorFromSequence(fraction: number): Color3\n\t-- Each color in gradient defines the beginning and/or end of a section\n\tlocal numSections = #gradient - 1\n\n\t-- Each section represents a portion of 1\n\tlocal sectionSize = 1 / numSections\n\n\t-- Determine which section the requested fraction falls into\n\tlocal sectionStartIndex = 1 + math.clamp(fraction, 0, 1) // sectionSize\n\n\t-- Get the colors at the start and end of the section\n\tlocal sectionColorStart = gradient[sectionStartIndex]\n\tlocal sectionColorEnd = gradient[sectionStartIndex + 1] or sectionColorStart\n\n\t-- Normalize fraction to be a number from 0 to 1 within the section\n\tlocal fractionOfSection = math.clamp(fraction, 0, 1) % sectionSize / sectionSize\n\n\t-- Lerp between beginning and end based on the normalized fraction\n\treturn sectionColorStart:Lerp(sectionColorEnd, fractionOfSection)\nend\n\nlocal function onHealthChanged()\n\t-- Calculate new health as percentage of max\n\tlocal healthFraction = math.max(0, humanoid.Health / humanoid.MaxHealth)\n\n\t-- Tween the bar to new size/color targets\n\tlocal tweenGoal = {\n\t\tSize = UDim2.new(healthFraction, 0, 1, 0),\n\t\tBackgroundColor3 = getColorFromSequence(healthFraction)\n\t}\n\tlocal meterBarTween = TweenService:Create(meterBarInner, tweenInfo, tweenGoal)\n\tmeterBarTween:Play()\nend\n\n-- Listen for changes to humanoid health\nhumanoid.HealthChanged:Connect(onHealthChanged)\n\n-- Initially set (or reset) bar size/color to current health\nonHealthChanged()\n```\n\n----------------------------------------\n\nTITLE: Repeat-Until Loop for Goblin Spawning in Luau\nDESCRIPTION: This code shows a `repeat-until` loop in Luau used to spawn goblins until a maximum count of 25 is reached. The loop executes the `spawnGoblin()` function, increments the `currentGoblinCount`, and prints the current count. The loop continues until `currentGoblinCount` equals 25. The `spawnGoblin` function is assumed to be defined elsewhere.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/control-structures.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal currentGoblinCount = 18\n\n-- Spawn goblins up to a maximum of 25 in the game\nrepeat\n\tspawnGoblin()\n\tcurrentGoblinCount += 1\n\tprint(\"Current goblin count: \" .. currentGoblinCount)\nuntil currentGoblinCount == 25\n\nprint(\"Goblins repopulated!\")\n\n--[[ Resulting output:\nCurrent goblin count: 19\nCurrent goblin count: 20\nCurrent goblin count: 21\nCurrent goblin count: 22\nCurrent goblin count: 23\nCurrent goblin count: 24\nCurrent goblin count: 25\nGoblins repopulated!\n]]\n```\n\n----------------------------------------\n\nTITLE: Handling Non-String Table Indices with BindableEvents in Lua\nDESCRIPTION: Demonstrates an argument limitation where non-string table indices are converted to strings when passed through a `BindableEvent`. A table is created with a Roblox Instance (`workspace.Baseplate`) as a key. When this table is sent via `Fire` and received by the connected function, iterating through the keys shows their type has been converted to `string`. Requires a `BindableEvent` named \"TestBindableEvent\".\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/scripting/events/bindable.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal ServerScriptService = game:GetService(\"ServerScriptService\")\n\nlocal bindableEvent = ServerScriptService:WaitForChild(\"TestBindableEvent\")\n\nlocal function onEventFire(passedTable)\n\tfor k, v in passedTable do\n\t\tprint(typeof(k))  --> string\n\tend\nend\n\n-- Connect function to event\nbindableEvent.Event:Connect(onEventFire)\n```\n\nLANGUAGE: lua\nCODE:\n```\nlocal ServerScriptService = game:GetService(\"ServerScriptService\")\n\nlocal bindableEvent = ServerScriptService:WaitForChild(\"TestBindableEvent\")\n\n-- Fire event with table containing a workspace instance as a key\nbindableEvent:Fire({\n\t[workspace.Baseplate] = true\n})\n```\n\n----------------------------------------\n\nTITLE: Awarding a Gold Medal Luau\nDESCRIPTION: This code awards a gold medal using an `if` statement. It checks if `timePassed` is less than or equal to 10 seconds. If the condition is met, it prints a message \"You get a gold medal!\" to the Output window.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-3/multiple-conditions.md#_snippet_11\n\nLANGUAGE: Luau\nCODE:\n```\nlocal function finish()\n   raceActive = false\n   print(\"You finished in \" .. timePassed)\n\n   if timePassed <= 10 then\n      print(\"You get a gold medal!\")\n   end\nend\n```\n\n----------------------------------------\n\nTITLE: Deleting All Data in MemoryStore Hash Map (Lua)\nDESCRIPTION: Demonstrates how to delete all keys and values within a hash map by first listing all items using `ListItemsAsync()` and then iterating through them, removing each key individually using `RemoveAsync()`. Pagination is handled to process items in batches.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud-services/memory-stores/hash-map.md#_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlocal MemoryStoreService = game:GetService(\"MemoryStoreService\")\n\nlocal hashMap = MemoryStoreService:GetHashMap(\"HashMap1\")\n\n-- Get list of items, 32 items at a time\nlocal success, pages = pcall(function()\n\treturn hashMap:ListItemsAsync(32)\nend)\nif success then\n\twhile true do\n\t\t-- Get the current page\n\t\tlocal entries = pages:GetCurrentPage()\n\t\tlocal removeSuccess = true\n\t\tlocal removeError = nil\n\t\t-- Iterate through all key-value pairs on page\n\t\tfor _, entry in ipairs(entries) do\n\t\t\tprint(entry.key .. \" : \" .. tostring(entry.value))\n\t\t\tremoveSuccess, removeError = pcall(function()\n\t\t\t\thashMap:RemoveAsync(entry.key)\n\t\t\tend)\n\n\t\t\tif not removeSuccess then\n\t\t\t\twarn(removeError)\n\t\t\tend\n\t\tend\n\t\t-- Check if last page has been reached\n\t\tif pages.IsFinished then\n\t\t\tprint(\"Finished deleting all data.\")\n\t\t\tbreak\n\t\telse\n\t\t\tprint(\"----------\")\n\t\t\t-- Advance to next page\n\t\t\tpages:AdvanceToNextPageAsync()\n\t\tend\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Connecting Touch Event to onTouch Function\nDESCRIPTION: Vertices 'onTouch' to the trap part's Touched event, ensuring the function runs whenever the part is touched. This linkage is essential for event-driven interactions within Roblox scripts.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-3/traps-with-if-statements.md#_snippet_2\n\nLANGUAGE: Luau\nCODE:\n```\ntrapPart.Touched:Connect(onTouch)\n```\n\n----------------------------------------\n\nTITLE: Handling Model Child Part Collisions Lua\nDESCRIPTION: Since Models don't directly receive touch events, this script demonstrates how to detect collisions for a multi-part model by iterating through its BasePart children. It connects custom 'onTouched' and 'onTouchEnded' functions to each child's corresponding events, tracking the number of parts touching external objects.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/workspace/collisions.md#_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nlocal model = script.Parent\n\nlocal numTouchingParts = 0\n\nlocal function onTouched(otherPart)\n\t-- Ignore instances of the model intersecting with itself\n\tif otherPart:IsDescendantOf(model) then return end\n\t-- Increase count of model parts touching\n\tnumTouchingParts += 1\n\n\tprint(model.Name, \"intersected with\", otherPart.Name, \"| Model parts touching:\", numTouchingParts)\nend\n\nlocal function onTouchEnded(otherPart)\n\t-- Ignore instances of the model un-intersecting with itself\n\tif otherPart:IsDescendantOf(model) then return end\n\t-- Decrease count of model parts touching\n\tnumTouchingParts -= 1\n\n\tprint(model.Name, \"un-intersected from\", otherPart.Name, \"| Model parts touching:\", numTouchingParts)\nend\n\nfor _, child in model:GetChildren() do\n\tif child:IsA(\"BasePart\") then\n\t\tchild.Touched:Connect(onTouched)\n\t\tchild.TouchEnded:Connect(onTouchEnded)\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Lua String Capture Groups and Nested Captures\nDESCRIPTION: Provides examples on capturing substrings within patterns using parentheses '()'. Demonstrates capturing key-value pairs, including optional spaces with '?', and nesting captures for more complex patterns like phrases and nested structures. Inputs are strings to match; outputs are captured substrings. Facilitates extraction of structured data from strings, including nested and optional parts.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/strings.md#_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\nlocal pattern = \"(%a+)%s?=%s?(%d+)\"\n\nlocal key1, val1 = string.match(\"TwentyOne = 21\", pattern)\nprint(key1, val1)  --> TwentyOne 21\n\nlocal key2, val2 = string.match(\"TwoThousand= 2000\", pattern)\nprint(key2, val2)  --> TwoThousand 2000\n\nlocal key3, val3 = string.match(\"OneMillion=1000000\", pattern)\nprint(key3, val3)  --> OneMillion 1000000\n```\n\nLANGUAGE: Lua\nCODE:\n```\nlocal str = \"love2play Roblox\"\nlocal pattern = \"(%w+)(%d+)(%w+)%s+(%w+)\"\nlocal replacement = \"I %1 %2 %3 %4!\"\n\nlocal result = string.gsub(str, pattern, replacement)\nprint(result)  --> I love 2 play Roblox!\n```\n\nLANGUAGE: Lua\nCODE:\n```\nlocal places = \"The Cloud Kingdom is heavenly, The Forest Kingdom is peaceful\"\nlocal pattern = \"(The%s(%a+%sKingdom)[%w%s]+)\"\n\nfor description, kingdom in string.gmatch(places, pattern) do\n\tprint(description)\n\tprint(kingdom)\nend\n-->\n-- The Cloud Kingdom is heavenly\n-- Cloud Kingdom\n-- The Forest Kingdom is peaceful\n-- Forest Kingdom\n```\n\nLANGUAGE: Lua\nCODE:\n```\nlocal match1 = \"Where does the capture happen? Who knows!\"\nlocal match2 = \"This string is longer than the first one. Where does the capture happen? Who knows?!\"\n\nlocal pattern = \"()Where does the capture happen%? Who knows!()\"\n\nlocal start1, finish1 = string.match(match1, pattern)\nprint(start1, finish1)  --> 1 42\n\nlocal start2, finish2 = string.match(match2, pattern)\nprint(start2, finish2)  --> 43 84\n\nlocal places = \"The Cloud Kingdom is heavenly, The Forest Kingdom is peaceful.\"\nlocal pattern = \"The (%a+()) Kingdom is %a+\"\n\nfor kingdom, position in string.gmatch(places, pattern) do\n\tprint(kingdom, position)\nend\n-->\n-- Cloud 10\n-- Forest 42\n```\n\nLANGUAGE: Lua\nCODE:\n```\nlocal match = \"This is an example\"\nlocal pattern = \"This is an ()example\"\n\nlocal position = string.match(match, pattern)\nprint(typeof(position))  --> number\n```\n\n----------------------------------------\n\nTITLE: Configuring MerchBooth Module UI in Roblox (Lua)\nDESCRIPTION: Configures the MerchBooth module's UI properties (such as background color, text size, font, color, and the use of filters) from a LocalScript in StarterPlayerScripts. Requires a pre-installed MerchBooth module accessible via ReplicatedStorage. Key parameters like backgroundColor and textFont control visual presentation, while useFilters toggles catalog filtering options. No external dependencies beyond Roblox core services and the MerchBooth module itself.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/merch-booth.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal MerchBooth = require(ReplicatedStorage:WaitForChild(\"MerchBooth\"))\n\nMerchBooth.configure({\n\tbackgroundColor = Color3.fromRGB(220, 210, 200),\n\ttextSize = 17,\n\ttextFont = Enum.Font.Fondamento,\n\ttextColor = Color3.fromRGB(20, 20, 20),\n\tuseFilters = false\n})\n```\n\n----------------------------------------\n\nTITLE: Commenting Script Purpose in Luau\nDESCRIPTION: This snippet demonstrates how to write a comment to describe the script's purpose.  Comments are ignored by the interpreter and are used for documentation purposes to explain code functionality.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-4/repeat-code-with-while-loops.md#_snippet_0\n\nLANGUAGE: Luau\nCODE:\n```\n-- Changes the color of LoopingPart every few seconds\n```\n\n----------------------------------------\n\nTITLE: Toggling Debounce Variable to Control Single Execution per Touch Event in Lua\nDESCRIPTION: This snippet finalizes the debounce implementation by setting 'isTouched' to true at the beginning of the fade process and resetting it back to false after the platform reappears. This toggle mechanism blocks repeated invocations of the fade function while the platform is fading and ensures the flow can repeat on subsequent touches.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/scripting/basic-scripting/fading-trap.md#_snippet_5\n\nLANGUAGE: Lua\nCODE:\n```\nlocal function fade()\n  if not isTouched then\n    isTouched = true\n    for count = 1, 10 do\n      platform.Transparency = count / 10\n      task.wait(0.1)\n    end\n    platform.CanCollide = false\n    task.wait(3)\n    platform.CanCollide = true\n    platform.Transparency = 0\n    isTouched = false\n  end\nend\n\nplatform.Touched:Connect(fade)\n```\n\n----------------------------------------\n\nTITLE: While Loop with Countdown in Luau\nDESCRIPTION: This snippet demonstrates a `while` loop in Luau that simulates a countdown timer. The loop continues as long as the `timeRemaining` variable is greater than 0. Inside the loop, it prints the remaining time, waits for one second using `task.wait(1)`, and decrements the `timeRemaining` variable. After the loop completes, it prints a message indicating that the timer has reached zero.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/control-structures.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal timeRemaining = 10\n\nwhile timeRemaining > 0 do\n\tprint(\"Seconds remaining: \" .. timeRemaining)\n\ttask.wait(1)\n\ttimeRemaining -= 1\nend\n\nprint(\"Timer reached zero!\")\n--[[ Resulting output:\nSeconds remaining: 10\nSeconds remaining: 9\nSeconds remaining: 8\nSeconds remaining: 7\nSeconds remaining: 6\nSeconds remaining: 5\nSeconds remaining: 4\nSeconds remaining: 3\nSeconds remaining: 2\nSeconds remaining: 1\nTimer reached zero!\n]]\n```\n\n----------------------------------------\n\nTITLE: Initializing Bridge, Button, and TimerDisplay References in Roblox - Lua\nDESCRIPTION: Defines references to the bridge, button, and timer text label within the Roblox workspace. Initializes the variable timerDuration that sets how long the bridge remains walkable. No dependencies other than correct part names in the Explorer. Inputs/outputs: references to game objects and the configuration of the timer.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-4/create-a-timed-bridge.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal bridge = script.Parent\nlocal button = workspace.ButtonBridge\nlocal timerText = workspace.TimerDisplay.SurfaceGui.TextLabel\n\n-- How long the bridge will stay solid\nlocal timerDuration = 5\n```\n\n----------------------------------------\n\nTITLE: Firing RemoteEvent with Non-String Indices in Table - Lua\nDESCRIPTION: Shows how to fire a RemoteEvent from a Script to a specific client, passing a table with an Instance as a key (Workspace.Baseplate) and a boolean value. Demonstrates how the event can be sent to multiple players on joining. Requires RemoteEvent in ReplicatedStorage and access to Players and Workspace services. This snippet sends a table with an instance key to the client, which gets automatically stringified on the receiving side.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/scripting/events/remote.md#_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal Players = game:GetService(\"Players\")\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal remoteEvent = ReplicatedStorage:FindFirstChildOfClass(\"RemoteEvent\")\n\n-- Listen for incoming players and dispatch remote event to each\nlocal function onPlayerAdded(player)\n\tremoteEvent:FireClient(player,\n\t\t{\n\t\t\t[Workspace.Baseplate] = true\n\t\t}\n\t)\nend\nPlayers.PlayerAdded:Connect(onPlayerAdded)\n```\n\n----------------------------------------\n\nTITLE: Polling for Long-Running API Results with Exponential Backoff in Python\nDESCRIPTION: Implements a polling strategy for asynchronously retrieving the result of a long-running Roblox Open Cloud operation using exponential backoff. The function attempts to get the operation's status up to maxRetries, doubling the poll delay after each failed attempt. Requires the GetOperation function (user-implemented) to retrieve the current status and the time module for sleeping between polls. Returns as soon as the operation is done or after all retries, and expects operationPath as a string input. Limitations include lack of error handling for non-200 errors and assumes the presence of doneJSONKey in the JSON response.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/reference/patterns.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef PollForResults(operationPath):\n    currentRetries = 0\n    maxRetries = 10\n    retryPollingDelay = 1\n    retryPollingMultiplier = 2\n    while (currentRetries < maxRetries):\n        # No delay on the first check\n        if (currentRetries == 0):\n            results = GetOperation(operationPath)\n        # Retry logic for subsequent checks\n        else:\n            time.sleep(retryPollingDelay)\n            results = GetOperation(operationPath)\n            # Exponential backoff\n            retryPollingDelay *= retryPollingMultiplier\n        # Check for results and return if they exist\n        if (results.status_code != 200 or results.json()[doneJSONKey]):\n            return results\n        # Otherwise, increment the retry count\n        else:\n           currentRetries += 1\n```\n\n----------------------------------------\n\nTITLE: Subscribing to merchBoothClosed Event with Lua in Roblox\nDESCRIPTION: Connects an event handler to MerchBooth.merchBoothClosed, which fires when either the catalog or item detail view is closed. Requires the MerchBooth module from ReplicatedStorage. The connected function outputs a console message indicating the booth view was closed. This allows reacting to the closing of merchandising UI views.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/merch-booth.md#_snippet_34\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal MerchBooth = require(ReplicatedStorage:WaitForChild(\"MerchBooth\"))\n\nMerchBooth.merchBoothClosed:Connect(function()\n\tprint(\"Booth view closed\")\nend)\n```\n\n----------------------------------------\n\nTITLE: Checking for Humanoid Existence with an If Statement\nDESCRIPTION: Implements an if condition to verify that a 'Humanoid' object was successfully found. If true, executes subsequent code to modify the humanoid, such as setting health to zero. This ensures only valid targets are affected.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-3/traps-with-if-statements.md#_snippet_4\n\nLANGUAGE: Luau\nCODE:\n```\nif humanoid then\n   -- Code to execute when a Humanoid is found\nend\n```\n\n----------------------------------------\n\nTITLE: Iterative Player Removal Logic in removeActivePlayer - Lua\nDESCRIPTION: Adds looping logic within the removeActivePlayer function to locate and identify the specified player within the activePlayers table. Utilizes a 'for' loop and variable naming conventions to avoid confusion between iterator and parameter. Requires the activePlayers table and expects 'player' to be the player object for removal.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/battle-royale-series/ending-matches.md#_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nlocal function removeActivePlayer(player)\n\tfor playerKey, whichPlayer in activePlayers do\n\t\tif whichPlayer == player then\n\n\t\tend\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Using MeshPart as a Base Class in Roblox\nDESCRIPTION: Demonstrates the inheritance relationship of MeshPart objects as descendants of the BasePart class in Roblox. MeshPart objects represent 3D models with vertices, edges, and faces.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/parts/meshes.md#_snippet_1\n\nLANGUAGE: Roblox\nCODE:\n```\nClass.MeshPart\n```\n\n----------------------------------------\n\nTITLE: Using 'not' Operator with Complex Multi-Condition Statements\nDESCRIPTION: Example showing how to use the 'not' operator to negate an entire multi-condition statement, effectively testing for the opposite of a complex condition.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/operators.md#_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlocal three = 3\nlocal four = 4\nlocal five = 5\n\nif not (three > four or five < four) then\n\tprint(\"Three is less than 4 and five is greater than 4.\")\nend\n\n-- Output: Three is less than 4 and five is greater than 4.\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Loops for Batched Part Creation - Luau\nDESCRIPTION: This code block demonstrates the use of nested `for` loops. The outer loop iterates through batches, changing the `currentColor` for each batch. The inner loop iterates a set number of times per batch, calling the `createPart()` function, printing progress, incrementing a counter, and adding a small delay (`task.wait(0.5)`) to visualize the process. A longer delay (`task.wait(2)`) is added at the end of each outer loop iteration.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-4/nested-loops.md#_snippet_1\n\nLANGUAGE: Luau\nCODE:\n```\n-- Outer loop\nfor partBatch = 1, numberOfBatches do\n  print(\"Top outer loop: part batch \" .. partBatch)\n  currentColor = Color3.fromRGB(math.random(0, 255), math.random(0, 255), math.random(0, 255))\n\n  -- Inner loop\n  for partNumber = 1, partsPerBatch do\n    createPart()\n    print(\"Inner loop: part \" .. partNumber)\n    partsMade += 1\n    task.wait(0.5)\n  end\n\n  print(\"Bottom outer loop: \" .. partsMade .. \" parts made so far.\")\n\n  task.wait(2)\nend\n```\n\n----------------------------------------\n\nTITLE: Handle Touched Event With Attribute Debounce Roblox Lua\nDESCRIPTION: Implements a debounce pattern for a `Touched` event handler using an instance attribute (`\"Touched\"`) and `task.wait`. The attribute acts as a flag to prevent the action (reducing health) from executing again until a specified `RESET_TIME` has passed, mitigating issues with rapid, multiple event firings.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/scripting/debounce.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal part = script.Parent\n\nlocal RESET_TIME = 1\n\nlocal function damagePlayer(otherPart)\n\tprint(part.Name .. \" collided with \" .. otherPart.Name)\n\n\tlocal humanoid = otherPart.Parent:FindFirstChildWhichIsA(\"Humanoid\")\n\tif humanoid then\n\t\tif not part:GetAttribute(\"Touched\") then\n\t\t\tpart:SetAttribute(\"Touched\", true)  -- Set attribute to true\n\t\t\thumanoid.Health -= 10  -- Reduce player health\n\t\t\ttask.wait(RESET_TIME)  -- Wait for reset duration\n\t\t\tpart:SetAttribute(\"Touched\", false)  -- Reset attribute\n\t\tend\n\tend\nend\n\npart.Touched:Connect(damagePlayer)\n```\n\n----------------------------------------\n\nTITLE: Defining giveUpgrade Function - Roblox Lua\nDESCRIPTION: This Lua snippet defines the `giveUpgrade` function, which is triggered when the player clicks the upgrade button. Inside, it first retrieves player stats, then checks if they have enough money for the upgrade. If they do, the code subtracts the item cost from the player's money and adds to their spaces. It relies on the presence of a `leaderstats` object with \"Gold\" and \"Spaces\" IntValues within the player object and the global variable `upgradeCost` being defined elsewhere.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/adventure-game-series/buying-upgrades.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal function giveUpgrade(player)\n\tprint(\"Someone clicked the button\")\n\t-- Get's the player's leaderboard to get other IntValues\n\tlocal playerStats = player:FindFirstChild(\"leaderstats\")\n\n   if playerStats then\n      -- Gets the player's money and spaces to make changes\n      local playerGold = playerStats:FindFirstChild(\"Gold\")\n      local playerSpaces = playerStats:FindFirstChild(\"Spaces\")\n\n\t   -- Checks if player has enough money to afford the upgrade\n      if playerGold and playerSpaces and playerGold.Value >= upgradeCost then\n      \tprint(\"Player can buy item\")\n      \t-- Subtract the item's cost from the player's money\n         playerGold.Value -= upgradeCost\n         playerSpaces.Value += newSpaces\n      end\n   end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Catalog Sort Order by Price (High to Low) with MerchBooth - Lua\nDESCRIPTION: Configures catalog sorting to order items by descending price. The provided function returns true if a's price is greater than b's, inverting the usual order. Dependencies are the MerchBooth module and valid item tables. Intended for use in a LocalScript in Roblox.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/merch-booth.md#_snippet_22\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal MerchBooth = require(ReplicatedStorage:WaitForChild(\"MerchBooth\"))\n\nMerchBooth.setCatalogSort(function(a, b)\n\treturn a.price > b.price\nend)\n\n```\n\n----------------------------------------\n\nTITLE: Bind Action and Create Mobile Button with ContextActionService in Lua\nDESCRIPTION: Binds an action \"Interact\" to the `handleAction` function using `ContextActionService`. It creates a touch button on mobile devices and also binds the action to keyboard 'T' and gamepad 'ButtonR1'. The `handleAction` prints details when the input state is `Begin`. Requires `ContextActionService`, `Enum.KeyCode`, `Enum.UserInputState`, and `InputObject`.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/input/mobile.md#_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nlocal ContextActionService = game:GetService(\"ContextActionService\")\n\nlocal function handleAction(actionName, inputState, inputObject)\n\tif inputState == Enum.UserInputState.Begin then\n\t\tprint(actionName, inputObject)\n\tend\nend\n\n-- Bind action to function\nContextActionService:BindAction(\"Interact\", handleAction, true, Enum.KeyCode.T, Enum.KeyCode.ButtonR1)\n```\n\n----------------------------------------\n\nTITLE: Simulating Named Arguments in Luau\nDESCRIPTION: This snippet illustrates a common pattern in Luau to simulate named arguments by passing a single table as the argument. The function accesses parameters as fields of this table, providing clarity when calling with multiple options.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/luau-csharp-comparison.md#_snippet_10\n\nLANGUAGE: Luau\nCODE:\n```\n-- Named arguments\nlocal function namedArguments(args)\n\treturn args.name .. \"'s birthday: \" .. args.dob\nend\n\nnamedArguments{name=\"Bob\", dob=\"4/1/2000\"}\n```\n\n----------------------------------------\n\nTITLE: Initializing Player and Character Connection (Lua)\nDESCRIPTION: This script connects to the Players service and sets up event handlers for when a player is added and when a character is added to the player. The onCharacterAdded function waits for the Humanoid and Animator objects to be present in the character model, then prints a message. This verifies the script can access the character's animation controller.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/animation/play-character-animations.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nlocal function onCharacterAdded(character)\n\tlocal humanoid = character:WaitForChild(\"Humanoid\")\n\tlocal animator = humanoid:WaitForChild(\"Animator\")\n\tprint(\"Animator found!\")\n\nlocal function onPlayerAdded(player)\n\tplayer.CharacterAdded:Connect(onCharacterAdded)\nend\n\nPlayers.PlayerAdded:Connect(onPlayerAdded)\n```\n\n----------------------------------------\n\nTITLE: Using anonymous functions to handle `Humanoid.Died` event\nDESCRIPTION: This pattern connects an anonymous function directly to a player's humanoid `Died` event to trigger player respawning in the lobby upon death. It ensures the player's name can be accessed within the callback for customized respawn logic. It emphasizes in-line event handling without named functions.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/battle-royale-series/ending-matches.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nhumanoid.Died:Connect(function()\n\trespawnPlayerInLobby(player)\nend)\n```\n\n----------------------------------------\n\nTITLE: Connect Key Parts to Touch Function - Lua\nDESCRIPTION: This code iterates through all the key parts and connects the `partTouched` function to the `Touched` event of each part. This makes it so that when a player touches a key, the logic in `partTouched` is executed.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-6/create-with-module-scripts.md#_snippet_19\n\nLANGUAGE: Lua\nCODE:\n```\n-- Binds every key part to the touch function so it works on all parts\nfor keyIndex = 1, #keysArray do\n\tlocal keyPart = keysArray[keyIndex]\n\tkeyPart.Touched:Connect(function(otherPart)\n\t\tpartTouched(otherPart, keyPart)\n\tend)\nend\n```\n\n----------------------------------------\n\nTITLE: Optional Type Annotation with Nil in Luau Lua\nDESCRIPTION: Illustrates the use of '?' to make a type optional, allowing the variable to be either the annotated type or nil. Here, 'foo' is either a string or nil, useful for cases where a variable may not hold a value.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/type-checking.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal foo: string? = nil\n```\n\n----------------------------------------\n\nTITLE: Emulating Extra Data in TextChatService via Player Attributes\nDESCRIPTION: Illustrates how to simulate legacy 'extra data' by setting attributes on Player instances, such as name and chat colors or tags, which can be referenced in chat callbacks. This method uses 'SetAttribute' to store customization data on players, enabling rich text modifications in chat UI through callbacks.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/chat/in-experience-text-chat.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nPlayers.PlayerAdded:Connect(function(player)\n\tplayer:SetAttribute(\"NameColor\", Color3.fromRGB(255, 255, 55))\n\tplayer:SetAttribute(\"ChatColor\", Color3.fromRGB(212, 175, 55))\n\tplayer:SetAttribute(\"isYourTag\", true)\n\tplayer:SetAttribute(\"isOtherTag\", true)\nend)\n```\n\n----------------------------------------\n\nTITLE: Complete Speed Boost Powerup Implementation in Roblox Luau\nDESCRIPTION: The final implementation of the speed boost powerup, which increases player speed up to a limit and includes a cooldown period using task.wait() before allowing reactivation.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-3/powerups-with-if-statements.md#_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nlocal speedBoost = script.Parent\n\nlocal function onTouch(otherPart)\n  local character = otherPart.Parent\n  local humanoid = character:FindFirstChildWhichIsA(\"Humanoid\")\n\n  if humanoid and humanoid.WalkSpeed <= 50 then\n    humanoid.WalkSpeed += 10\n    speedBoost.CanTouch = false\n    task.wait(1)\n    speedBoost.CanTouch = true\n   end\nend\n\nspeedBoost.Touched:Connect(onTouch)\n```\n\n----------------------------------------\n\nTITLE: Connecting CharacterAdded Using an Anonymous Function in Roblox with Luau\nDESCRIPTION: Within onPlayerAdded, this code connects a custom onCharacterAdded handler to a Player's CharacterAdded event, passing both the character and the original Player. Uses an anonymous function to capture closure over the player variable for context not provided by the CharacterAdded event. Both object existence and prior definition of onCharacterAdded are required.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/scripting/basic-scripting/score-points.md#_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nlocal function onPlayerAdded(player)\n  local leaderstats = Instance.new(\"Folder\")\n  leaderstats.Name = \"leaderstats\"\n  leaderstats.Parent = player\n\n  local points = Instance.new(\"IntValue\")\n  points.Name = \"Points\"\n  points.Value = 0\n  points.Parent = leaderstats\n\n  player.CharacterAdded:Connect(function(character)\n    onCharacterAdded(character, player)\n  end)\nend\n```\n\n----------------------------------------\n\nTITLE: Deleting All Data from MemoryStoreSortedMap in Lua\nDESCRIPTION: This snippet demonstrates how to delete all keys from a Roblox MemoryStoreSortedMap by iteratively listing entries with GetRangeAsync and then removing each using RemoveAsync. It uses pcall for error handling and updates the exclusive lower bound to progress through the map, ensuring all items are removed safely. The script is suitable for cases where the map needs to be flushed or reset entirely, and handles batches of up to 100 items per iteration.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud-services/memory-stores/sorted-map.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nlocal MemoryStoreService = game:GetService(\"MemoryStoreService\")\n\nlocal sortedMap = MemoryStoreService:GetSortedMap(\"SortedMap1\")\n\n-- Initial lower bound of nil starts flush from first item\nlocal exclusiveLowerBound = nil\n\nwhile true do\n\t-- Get up to a hundred items starting from current lower bound\n\tlocal getRangeSuccess, items = pcall(function()\n\t\treturn sortedMap:GetRangeAsync(Enum.SortDirection.Ascending, 100, exclusiveLowerBound)\n\tend)\n\tif getRangeSuccess then\n\t\tlocal removeSuccess = true\n\t\tlocal removeError = nil\n\n\t\tfor _, item in items do\n\t\t\tremoveSuccess, removeError = pcall(function()\n\t\t\t\tsortedMap:RemoveAsync(item.key)\n\t\t\tend)\n\t\tend\n\n\t\t-- If there was an error removing items, try again with the same exclusive lower bound\n\t\tif not removeSuccess then\n\t\t\twarn(removeError)\n\t\t-- If range is less than a hundred items, end of map is reached\n\t\telseif #items < 100 then\n\t\t\tbreak\n\t\telse\n\t\t\t-- The last retrieved key is the exclusive lower bound for the next iteration\n\t\t\texclusiveLowerBound = {}\n\t\t\texclusiveLowerBound[\"key\"] = items[#items].key\n\t\t\texclusiveLowerBound[\"sortKey\"] = items[#items].sortKey\n\t\tend\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Printing Finish Time Luau\nDESCRIPTION: This code prepares for medal awarding by printing the finishing time. The finish function now sets `raceActive` to `false` and prints a message indicating the player's finishing time by concatenating the string \"You finished in \" with the variable `timePassed`.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-3/multiple-conditions.md#_snippet_10\n\nLANGUAGE: Luau\nCODE:\n```\nlocal function finish()\n   raceActive = false\n   print(\"You finished in \" .. timePassed)\nend\n```\n\n----------------------------------------\n\nTITLE: Finding Named Grandchildren Using Wildcard\nDESCRIPTION: Finds all grandchildren named 'Trim' under any direct child of instances named 'Cart'. Combines wildcard and specific names.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/studio/explorer.md#_snippet_16\n\nLANGUAGE: RobloxSearchQuery\nCODE:\n```\nCart.*.Trim\n```\n\n----------------------------------------\n\nTITLE: Triggering audio playback using Roblox Lua script\nDESCRIPTION: Demonstrates how to trigger audio playback programmatically by calling the Play() method on a Class.AudioPlayer object in response to an event. The code initializes an audio object from the script's parent and connects an event listener to trigger playback when the event occurs. Useful for gameplay, UI, or environmental sounds.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/audio/objects.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal audio = script.Parent\nlocal something = ...\nsomething.SomeEvent:Connect(function()\n    audio:Play()\nend)\n```\n\n----------------------------------------\n\nTITLE: Sending Data with Teleports in Roblox Lua\nDESCRIPTION: Shows how to pass non-secure data along with a teleport by using TeleportOptions:SetTeleportData(). This example sends a random number that will be available at the destination place.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/projects/teleport.md#_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal teleportData = {\n    randomNumber = RNG:NextInteger(1, 100),\n}\n\nlocal teleportOptions = Instance.new(\"TeleportOptions\")\nteleportOptions:SetTeleportData(teleportData)\n```\n\n----------------------------------------\n\nTITLE: Initializing Upgrade Variables - Roblox Lua\nDESCRIPTION: This snippet defines variables within a Roblox Lua script to manage player upgrades.  It sets the value of new spaces granted by an upgrade and the associated cost of the upgrade. The script depends on the Roblox environment and requires the script to be placed appropriately as described in the previous instructions.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/adventure-game-series/buying-upgrades.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Variables for the upgrade\nlocal newSpaces = 10\nlocal upgradeCost = 100\n```\n\n----------------------------------------\n\nTITLE: Implementing While and Repeat Loops in Luau\nDESCRIPTION: This snippet demonstrates the syntax for boolean-controlled loops in Luau. The `while` loop executes as long as the condition is true, checking it before each iteration. The `repeat` loop executes at least once, checking the condition after each iteration.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/luau-csharp-comparison.md#_snippet_0\n\nLANGUAGE: Luau\nCODE:\n```\nwhile boolExpression do\n\tdoSomething()\nend\n\nrepeat\n\tdoSomething()\nuntil not boolExpression\n```\n\n----------------------------------------\n\nTITLE: Requiring ModuleScripts in GameManager (Roblox Lua)\nDESCRIPTION: Loads the GameSettings and MatchManager ModuleScripts into the GameManager script using `require`. It first gets references to the services and then uses `ServerStorage:WaitForChild` to safely access the ModuleScripts folder and the specific modules within it.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/battle-royale-series/coding-the-game-loop.md#_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\n-- Services\nlocal ServerStorage = game:GetService(\"ServerStorage\")\nlocal Players = game:GetService(\"Players\")\n\n-- Module Scripts\nlocal moduleScripts = ServerStorage:WaitForChild(\"ModuleScripts\")\nlocal matchManager = require(moduleScripts:WaitForChild(\"MatchManager\"))\nlocal gameSettings = require(moduleScripts:WaitForChild(\"GameSettings\"))\n```\n\n----------------------------------------\n\nTITLE: Syncing Widget Colors with Studio Theme in Lua\nDESCRIPTION: This code snippet demonstrates how to synchronize the colors of a Studio widget with the current Studio theme. It uses the `Studio.ThemeChanged` event to detect theme changes and updates the background and text colors of GUI objects accordingly. The `syncGuiColors` function takes a table of GUI objects as input.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/studio/build-studio-widgets.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\ntestButton.Parent = testWidget\n\nlocal function syncGuiColors(objects)\n\tlocal function setColors()\n\t\tfor _, guiObject in objects do\n\t\t\t-- Sync background color\n\t\t\tguiObject.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainBackground)\n\t\t\t-- Sync text color\n\t\t\tguiObject.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)\n\t\tend\n\tend\n\t-- Run 'setColors()' function to initially sync colors\n\tsetColors()\n\t-- Connect 'ThemeChanged' event to the 'setColors()' function\n\tsettings().Studio.ThemeChanged:Connect(setColors)\nend\n\n-- Run 'syncGuiColors()' function to sync colors of provided objects\nsyncGuiColors({testButton})\n```\n\n----------------------------------------\n\nTITLE: Computing Angle Between Directions in Roblox Lua\nDESCRIPTION: This helper function calculates the angle in degrees between two Vector3 directions for geometric validation. It uses dot product, clamps cosine to avoid domain errors, and converts the result from radians to degrees. The function depends on Lua math library and Roblox Vector3 objects. Inputs are two normalized Vector3s; output is the angle in degrees. Handles cases where directions are nearly parallel or antiparallel.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/gameplay-scripting/detect-hits.md#_snippet_6\n\nLANGUAGE: Lua\nCODE:\n```\nlocal function getAngleBetweenDirections(directionA: Vector3, directionB: Vector3)\n    local dotProduct = directionA:Dot(directionB)\n    local cosAngle = math.clamp(dotProduct, -1, 1)\n    local angle = math.acos(cosAngle)\n    return math.deg(angle)\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Part Color in Luau\nDESCRIPTION: This snippet shows how to change a part's color using the `Color3.fromRGB()` method within a `while` loop. The RGB values specify the red, green, and blue components of the color.  The `loopingPart` variable refers to a specific part in the game world.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-4/repeat-code-with-while-loops.md#_snippet_4\n\nLANGUAGE: Luau\nCODE:\n```\nloopingPart.Color = Color3.fromRGB(82, 227, 255)\n```\n\n----------------------------------------\n\nTITLE: Customizing Depth-of-Field Effect in Lua\nDESCRIPTION: Creates a custom depth-of-field effect for the Selfie Mode. The script configures specific blur parameters that control focus distance, intensity, and radius to create a professional photography look.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/selfie-mode.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal SelfieMode = require(ReplicatedStorage:WaitForChild(\"SelfieMode\"))\n\nlocal customDepthOfField = Instance.new(\"DepthOfFieldEffect\")\ncustomDepthOfField.NearIntensity = 0\ncustomDepthOfField.FarIntensity = 1\ncustomDepthOfField.FocusDistance = 5\ncustomDepthOfField.InFocusRadius = 5\n\nSelfieMode.configure({\n\tdepthOfFieldEffect = customDepthOfField\n})\n```\n\n----------------------------------------\n\nTITLE: MatchManager Script - Orchestrating Match Start, Timer, and End Logic - Lua\nDESCRIPTION: Full MatchManager module that coordinates sending players to matches, starting and stopping the match timer, and firing match start/end events. Utilizes external timer and player modules, responds to event connections, and updates timer display values. Requires several module dependencies and event objects, along with display value instances for time tracking and UI updates.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/battle-royale-series/ending-matches.md#_snippet_16\n\nLANGUAGE: lua\nCODE:\n```\nlocal MatchManager = {}\n\n-- Services\nlocal ServerStorage = game:GetService(\"ServerStorage\")\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\n-- Module Scripts\nlocal moduleScripts = ServerStorage:WaitForChild(\"ModuleScripts\")\nlocal playerManager = require(moduleScripts:WaitForChild(\"PlayerManager\"))\nlocal gameSettings = require(moduleScripts:WaitForChild(\"GameSettings\"))\nlocal timer = require(moduleScripts:WaitForChild(\"Timer\"))\n\n-- Events\nlocal events = ServerStorage:WaitForChild(\"Events\")\nlocal matchStart = events:WaitForChild(\"MatchStart\")\nlocal matchEnd = events:WaitForChild(\"MatchEnd\")\n\n-- Values\nlocal displayValues = ReplicatedStorage:WaitForChild(\"DisplayValues\")\nlocal timeLeft = displayValues:WaitForChild(\"TimeLeft\")\n\n-- Creates a new timer object to be used to keep track of match time.\nlocal myTimer = timer.new()\n\n-- Local Functions\nlocal function stopTimer()\n\tmyTimer:stop()\nend\n\nlocal function timeUp()\n\tmatchEnd:Fire(gameSettings.endStates.TimerUp)\nend\n\nlocal function startTimer()\n\tprint(\"Timer started\")\n\tmyTimer:start(gameSettings.matchDuration)\n\tmyTimer.finished:Connect(timeUp)\n\n\twhile myTimer:isRunning() do\n\t\t-- Adding +1 makes sure the timer display ends at 1 instead of 0.\n\t\ttimeLeft.Value = (myTimer:getTimeLeft() + 1) // 1\n\t\t-- By not setting the time for wait, it offers more accurate looping\n\t\ttask.wait()\n\tend\nend\n\n-- Module Functions\nfunction MatchManager.prepareGame()\n\tplayerManager.sendPlayersToMatch()\n\tmatchStart:Fire()\nend\n\nmatchStart.Event:Connect(startTimer)\nmatchEnd.Event:Connect(stopTimer)\n\nreturn MatchManager\n```\n\n----------------------------------------\n\nTITLE: Setting ParticleEmitter Size - Roblox Lua\nDESCRIPTION: This code snippet configures the size of particles emitted by a ParticleEmitter over their lifetime. It uses `NumberSequence` and `NumberSequenceKeypoint` to define how the size changes. The size starts at 20, increases to 25, and includes some variation.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/vfx/create-waterfalls.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nworkspace.Mist.RiseMist.Mist.Size = NumberSequence.new{NumberSequenceKeypoint.new(0,20,1), NumberSequenceKeypoint.new(1,25,5)}\n```\n\n----------------------------------------\n\nTITLE: Deep Copying Nested Tables with a Recursive Function in Luau - Lua\nDESCRIPTION: Defines a recursive function `deepCopy` that creates a full independent duplicate of a table including all nested tables. Detects table-type values and recursively copies them; copies other types directly. Requires only standard Luau syntax. Input is any table (possibly nested); output is deeply cloned independent copy.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/tables.md#_snippet_16\n\nLANGUAGE: lua\nCODE:\n```\n-- The function used for deep copying a table\nlocal function deepCopy(original)\n\t-- Define the new table for the copy\n\tlocal copy = {}\n\n\t-- Loop through the original table to clone\n\tfor key, value in original do\n\t\t-- If the type of the value is a table, deep copy it to the key (index)\n\t\t-- Else (or) the type isn't a table, assign the default value to the index instead\n\t\tcopy[key] = type(value) == \"table\" and deepCopy(value) or value\n\tend\n\n\t-- Return the finalized copy of the deep cloned table\n\treturn copy\nend\n```\n\n----------------------------------------\n\nTITLE: Complete Character Pathfinding Implementation with Custom Actions in Lua\nDESCRIPTION: A full implementation showing how to compute and follow a path, handle blocked paths, and execute special actions when reaching waypoints with specific labels like \"UseBoat\". The code demonstrates handling the boat transportation sequence.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/characters/pathfinding.md#_snippet_6\n\nLANGUAGE: Lua\nCODE:\n```\nlocal PathfindingService = game:GetService(\"PathfindingService\")\nlocal Players = game:GetService(\"Players\")\nlocal RunService = game:GetService(\"RunService\")\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal path = PathfindingService:CreatePath({\n\tCosts = {\n\t\tWater = 20,\n\t\tUseBoat = 1\n\t}\n})\n\nlocal player = Players.LocalPlayer\nlocal character = player.Character\nlocal humanoid = character:WaitForChild(\"Humanoid\")\n\nlocal TEST_DESTINATION = Vector3.new(228.9, 17.8, 292.5)\n\nlocal waypoints\nlocal nextWaypointIndex\nlocal reachedConnection\nlocal blockedConnection\n\nlocal function followPath(destination)\n\t-- Compute the path\n\tlocal success, errorMessage = pcall(function()\n\t\tpath:ComputeAsync(character.PrimaryPart.Position, destination)\n\tend)\n\n\tif success and path.Status == Enum.PathStatus.Success then\n\t\t-- Get the path waypoints\n\t\twaypoints = path:GetWaypoints()\n\n\t\t-- Detect if path becomes blocked\n\t\tblockedConnection = path.Blocked:Connect(function(blockedWaypointIndex)\n\t\t\t-- Check if the obstacle is further down the path\n\t\t\tif blockedWaypointIndex >= nextWaypointIndex then\n\t\t\t\t-- Stop detecting path blockage until path is re-computed\n\t\t\t\tblockedConnection:Disconnect()\n\t\t\t\t-- Call function to re-compute new path\n\t\t\t\tfollowPath(destination)\n\t\t\tend\n\t\tend)\n\n\t\t-- Detect when movement to next waypoint is complete\n\t\tif not reachedConnection then\n\t\t\treachedConnection = humanoid.MoveToFinished:Connect(function(reached)\n\t\t\t\tif reached and nextWaypointIndex < #waypoints then\n\t\t\t\t\t-- Increase waypoint index and move to next waypoint\n\t\t\t\t\tnextWaypointIndex += 1\n\n\t\t\t\t\t-- Use boat if waypoint label is \"UseBoat\"; otherwise move to next waypoint\n\t\t\t\t\tif waypoints[nextWaypointIndex].Label == \"UseBoat\" then\n\t\t\t\t\t\tuseBoat()\n\t\t\t\t\telse\n\t\t\t\t\t\thumanoid:MoveTo(waypoints[nextWaypointIndex].Position)\n\t\t\t\t\tend\n\t\t\t\telse\n\t\t\t\t\treachedConnection:Disconnect()\n\t\t\t\t\tblockedConnection:Disconnect()\n\t\t\t\tend\n\t\t\tend)\n\t\tend\n\n\t\t-- Initially move to second waypoint (first waypoint is path start; skip it)\n\t\tnextWaypointIndex = 2\n\t\thumanoid:MoveTo(waypoints[nextWaypointIndex].Position)\n\telse\n\t\twarn(\"Path not computed!\", errorMessage)\n\tend\nend\n\nfunction useBoat()\n\tlocal boat = Workspace.BoatModel\n\n\thumanoid.Seated:Connect(function()\n\t\t-- Start boat moving if agent is seated\n\t\tif humanoid.Sit then\n\t\t\ttask.wait(1)\n\t\t\tboat.CylindricalConstraint.Velocity = 5\n\t\tend\n\t\t-- Detect constraint position in relation to island\n\t\tlocal boatPositionConnection\n\t\tboatPositionConnection = RunService.PostSimulation:Connect(function()\n\t\t\t-- Stop boat when next to island\n\t\t\tif boat.CylindricalConstraint.CurrentPosition >= 94 then\n\t\t\t\tboatPositionConnection:Disconnect()\n\t\t\t\tboat.CylindricalConstraint.Velocity = 0\n\t\t\t\ttask.wait(1)\n\t\t\t\t-- Unseat agent and continue to destination\n\t\t\t\thumanoid.Sit = false\n\t\t\t\thumanoid:MoveTo(waypoints[nextWaypointIndex].Position)\n\t\t\tend\n\t\tend)\n\tend)\nend\n\nfollowPath(TEST_DESTINATION)\n```\n\n----------------------------------------\n\nTITLE: Accessing Dictionary Values with Bracket and Dot Notation - Lua\nDESCRIPTION: Demonstrates two common styles for retrieving dictionary values: using string keys in brackets and using dot notation. These idioms reflect how Luau can treat keys with valid identifier names. The code displays messages using each method.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-5/intro-to-dictionaries.md#_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nlocal enemy = {\n\tName = \"Spike\",\n\tHealth = 1000,\n}\n\nprint(\"The villain \" .. enemy[\"Name\"] .. \" approaches!\")\nprint(\"The villain \" .. enemy.Name .. \" approaches!\")\n```\n\n----------------------------------------\n\nTITLE: Handling Laser Firing on Server - Luau\nDESCRIPTION: This code defines a function `playerFiredLaser` on the server that is called when the `LaserFired` event is triggered from a client. The function takes the player that fired and the end position of the laser as inputs. It then finds the tool handle of the player's weapon and, if found, fires the LaserFired event for all clients (excluding the client who fired the laser), sending the player, tool handle, and end position. Dependencies: ReplicatedStorage, the `LaserFired` remote event and a function to retrieve the handle.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/scripting/intermediate-scripting/hit-detection-with-lasers.md#_snippet_19\n\nLANGUAGE: lua\nCODE:\n```\n-- Notify all clients that a laser has been fired so they can display the laser\nlocal function playerFiredLaser(playerFired, endPosition)\n    local toolHandle = getPlayerToolHandle(playerFired)\n    if toolHandle then\n        eventsFolder.LaserFired:FireAllClients(playerFired, toolHandle, endPosition)\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Handling RemoteEvent on Server in Lua\nDESCRIPTION: This server-side Lua script connects a function (`onCreatePart`) to the `OnServerEvent` signal of a `RemoteEvent` located in `ReplicatedStorage`. When a client fires this event, the function receives the `Player` object, a `Color3` value, and a `Vector3` position as arguments, prints the player's name, and creates a new `Part` with the specified color and position in the `Workspace`.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/scripting/events/remote.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Get reference to remote event instance\nlocal remoteEvent = ReplicatedStorage:FindFirstChildOfClass(\"RemoteEvent\")\n\nlocal function onCreatePart(player, partColor, partPosition)\n\tprint(player.Name .. \" fired the RemoteEvent\")\n\tlocal newPart = Instance.new(\"Part\")\n\tnewPart.Color = partColor\n\tnewPart.Position = partPosition\n\tnewPart.Parent = Workspace\nend\n\n-- Connect function to event\nremoteEvent.OnServerEvent:Connect(onCreatePart)\n```\n\n----------------------------------------\n\nTITLE: Require and Use User Input Detection Module in Lua\nDESCRIPTION: Shows how to utilize the `UserInputModule` created previously by requiring it from `ReplicatedStorage` in a LocalScript. It then calls the module's `getInputType` function to retrieve the current user input device type and prints the results, allowing other scripts to adapt the UI or game logic based on the user's preferred input method. Requires the `UserInputModule` script to exist in `ReplicatedStorage`.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/input/mobile.md#_snippet_6\n\nLANGUAGE: Lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\n-- Require module\nlocal UserInputModule = require(ReplicatedStorage:WaitForChild(\"UserInputModule\"))\n\nlocal currentUserInput, inputEnum = UserInputModule.getInputType()\nprint(currentUserInput, inputEnum)\n```\n\n----------------------------------------\n\nTITLE: Configuring Humanoid Display and Death Events in Roblox (Lua)\nDESCRIPTION: This module script sets humanoid display parameters such as display distance, occlusion, and health display type for each player character. It disables BreakJointsOnDeath to prevent the character model from disassembling and waits for the Humanoid.Died event to trigger onHumanoidDied logic. Requires the onHumanoidDied module and passes player and humanoid instances as parameters. Expected input is a Player and their Humanoid, with no direct return value beyond initiating side effects.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/user-interface-design/implement-designs-in-studio.md#_snippet_26\n\nLANGUAGE: Lua\nCODE:\n```\nlocal onHumanoidDied = require(script.onHumanoidDied)\n\nlocal function setupHumanoidAsync(player: Player, humanoid: Humanoid)\n\t-- Give each humanoid full control over its name/health display distance\n\thumanoid.DisplayDistanceType = Enum.HumanoidDisplayDistanceType.Subject\n\n\t-- Set name and health display distances to a sufficiently large value to show display name\n\t-- and health bar at any practical distance, as long as it is not occluded\n\thumanoid.NameDisplayDistance = 1000\n\thumanoid.HealthDisplayDistance = 1000\n\thumanoid.NameOcclusion = Enum.NameOcclusion.OccludeAll\n\thumanoid.HealthDisplayType = Enum.HumanoidHealthDisplayType.AlwaysOn\n\n\t-- Prevent character from falling apart when health is depleted\n\thumanoid.BreakJointsOnDeath = false\n\n\thumanoid.Died:Wait()\n\tonHumanoidDied(player, humanoid)\nend\n\nreturn setupHumanoidAsync\n\n```\n\n----------------------------------------\n\nTITLE: Saving Player Positions Using Roblox Services in Lua\nDESCRIPTION: This Lua snippet demonstrates retrieving Roblox services via game:GetService(), requiring a module script, and connecting player-related events to local functions. It shows how to save a player's character position on character removal by calling a reusable saveData function in a module. The snippet requires the SaveManager module to be located in ReplicatedStorage and assumes its saveData method writes player data to a DataStore. Key parameters include the character object and its HumanoidRootPart position. The snippet relies on Roblox's event system to trigger saving progress when players leave. Use of WaitForChild ensures the module is loaded before requiring it.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/scripting/services.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal SaveManager = require(ReplicatedStorage:WaitForChild(\"SaveManager\"))\n\n-- Local function that calls a reusable function in the module script.\nlocal function saveProgress(character)\n\t-- Get the position of the player's character.\n\tlocal position = character:FindFirstChild(\"HumanoidRootPart\").Position\n\t-- Use the saveData function in the module script, which writes to the\n\t-- DataStoreService.\n\tSaveManager.saveData(character, position)\nend\n\n-- Another local function that calls saveProgress() when a character is removed\n-- from the experience (in this case, when the player leaves).\nlocal function onPlayerAdded(player)\n\tplayer.CharacterRemoving:Connect(saveProgress)\nend\n\n-- Calls onPlayerAdded when a player first connects to the experience.\nPlayers.PlayerAdded:Connect(onPlayerAdded)\n```\n\n----------------------------------------\n\nTITLE: Loading and Using Module Script in Another Script in Roblox Lua\nDESCRIPTION: Illustrates how to import and use a module script by requiring it in a regular script. After requiring the module script by its path (e.g., ServerStorage.ModuleScript), the returned module table is stored in a local variable. Functions or variables from the module are then accessed via the returned table, allowing code reuse across multiple scripts. It requires correct spelling and exact names for referencing.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-6/intro-to-module-scripts.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal MyModule = require(ServerStorage.ModuleScript)\n\nMyModule.myFunction()\n```\n\n----------------------------------------\n\nTITLE: Play Button Click Sound With IsPlaying Debounce Roblox Lua\nDESCRIPTION: Demonstrates using the `Sound.IsPlaying` property to debounce sound playback for a GUI button's `Activated` event. This ensures that the click sound only plays if it's not currently active, preventing multiple overlapping sound instances if the button is rapidly clicked.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/scripting/debounce.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal button = script.Parent\n\nlocal function onButtonActivated()\n\t-- Find child sound on the button\n\tlocal sound = button:FindFirstChild(\"Click\")\n\t-- Play the sound only if it's not already playing\n\tif sound and not sound.IsPlaying then\n\t\tsound:Play()\n\tend\nend\n\nbutton.Activated:Connect(onButtonActivated)\n```\n\n----------------------------------------\n\nTITLE: Updating Camera CFrame using lookAt in Lua\nDESCRIPTION: Accesses the `workspace.CurrentCamera`. Inside `updateCamera`, it sets the camera's `CFrame` using `CFrame.lookAt(cameraPosition, rootPosition)`. This positions the camera at the calculated `cameraPosition` and orients it to point directly at the calculated `rootPosition`, updating the player's view.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/input-and-camera/control-the-users-camera.md#_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlocal player = Players.LocalPlayer\nlocal camera = workspace.CurrentCamera\n\nlocal CAMERA_DEPTH = 24\nlocal HEIGHT_OFFSET = 2\n\nlocal function updateCamera()\n    local character = player.Character\n    if character then\n        local root = character:FindFirstChild(\"HumanoidRootPart\")\n        if root then\n            local rootPosition = root.Position + Vector3.new(0, HEIGHT_OFFSET, 0)\n            local cameraPosition = Vector3.new(rootPosition.X, rootPosition.Y, CAMERA_DEPTH)\n            camera.CFrame = CFrame.lookAt(cameraPosition, rootPosition)\n        end\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Incrementing Data in a Roblox Data Store using IncrementAsync in Luau\nDESCRIPTION: Shows how to atomically increment an integer value associated with a key using `IncrementAsync()`. It takes the key and the numeric amount to increment by (can be negative to decrement). This avoids manual read-modify-write logic. `pcall` is used for error handling.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud-services/data-stores/index.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal DataStoreService = game:GetService(\"DataStoreService\")\n\nlocal experienceStore = DataStoreService:GetDataStore(\"PlayerExperience\")\n\nlocal success, newExperience = pcall(function()\n\treturn experienceStore:IncrementAsync(\"Player_1234\", 1)\nend)\nif success then\n\tprint(newExperience)\nend\n```\n\n----------------------------------------\n\nTITLE: Defining the Camera Update Function Stub in Lua\nDESCRIPTION: Defines an empty function named `updateCamera` which will contain the logic for calculating and setting the camera's position and orientation. Includes prerequisite code for getting the player.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/input-and-camera/control-the-users-camera.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nlocal player = Players.LocalPlayer\n\nlocal function updateCamera()\n\nend\n```\n\n----------------------------------------\n\nTITLE: Getting Mouse Location Using UserInputService in Lua\nDESCRIPTION: This snippet retrieves the player's 2D mouse location using `UserInputService`. It obtains an instance of the `UserInputService` and then calls `GetMouseLocation()` to get the mouse's X and Y coordinates on the screen. This is a prerequisite for creating a ray that corresponds to the player's mouse position within the game world.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/scripting/intermediate-scripting/hit-detection-with-lasers.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal UserInputService = game:GetService(\"UserInputService\")\n\nlocal tool = script.Parent\n\nlocal MAX_MOUSE_DISTANCE = 1000\n\nlocal function getWorldMousePosition()\n\tlocal mouseLocation = UserInputService:GetMouseLocation()\nend\n```\n\n----------------------------------------\n\nTITLE: Checking for Hit and Assigning hitPosition in Lua\nDESCRIPTION: This snippet checks if the raycast hit anything. If it did, it assigns the hit position to `hitPosition`. It relies on `weaponRaycastResult` being defined and containing the raycast result object.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/scripting/intermediate-scripting/hit-detection-with-lasers.md#_snippet_12\n\nLANGUAGE: lua\nCODE:\n```\nlocal weaponRaycastResult = workspace:Raycast(tool.Handle.Position, directionVector, weaponRaycastParams)\n\n-- Check if any objects were hit between the start and end position\nlocal hitPosition\nif weaponRaycastResult then\n\thitPosition = weaponRaycastResult.Position\nend\n```\n\n----------------------------------------\n\nTITLE: Initializing HUD and Setting Up Touch Button (Lua)\nDESCRIPTION: This script initializes the Heads Up Display (HUD) and sets up the touch button asynchronously. It uses module scripts to manage various HUD elements, including player portrait, name, team color syncing, objective, team points syncing, disabling mouse input, hitmarker setup, and touch button setup. The `setupTouchButtonAsync` function is responsible for positioning and scaling the blaster button on touch-enabled devices.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/user-interface-design/implement-designs-in-studio.md#_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nlocal setPlayerPortrait = require(script.setPlayerPortrait)\nlocal setPlayerName = require(script.setPlayerName)\nlocal startSyncingTeamColor = require(script.startSyncingTeamColor)\nlocal setObjective = require(script.setObjective)\nlocal setupTouchButtonAsync = require(script.setupTouchButtonAsync)\nlocal startSyncingTeamPoints = require(script.startSyncingTeamPoints)\nlocal disableMouseWhileGuiEnabled = require(script.disableMouseWhileGuiEnabled)\nlocal setupHitmarker = require(script.setupHitmarker)\n\nlocal localPlayer = Players.LocalPlayer\nlocal gui = localPlayer.PlayerGui:WaitForChild(\"HUDGui\")\n\nsetPlayerPortrait(gui)\nsetPlayerName(gui)\nstartSyncingTeamColor(gui)\nsetObjective(gui)\nstartSyncingTeamPoints(gui)\ndisableMouseWhileGuiEnabled(gui)\nsetupHitmarker(gui)\nsetupTouchButtonAsync(gui)\n```\n\n----------------------------------------\n\nTITLE: Processing Marketplace Receipts for Bundles in Luau\nDESCRIPTION: Demonstrates handling `MarketplaceService.ProcessReceipt`. The `processReceipt` function retrieves the player and calls the appropriate handler based on the `ProductId`. The `receiptHandler` function checks if the purchased product corresponds to a bundle using `Bundles.getBundleByProductId`. If it's a bundle, it delegates processing to `Bundles.processReceiptAsync`; otherwise, it handles non-bundle developer products. Requires integration with `Players`, `MarketplaceService`, and the `Bundles` module.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/feature-packages/bundles.md#_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\n -- Process receipt from marketplace to determine if player needs to be charged or not\n   local function processReceipt(receiptInfo): Enum.ProductPurchaseDecision\n       local userId, productId = receiptInfo.PlayerId, receiptInfo.ProductId\n       local player = Players:GetPlayerByUserId(userId)\n\n       if not player then\n           return Enum.ProductPurchaseDecision.NotProcessedYet\n       end\n\n       local handler = receiptHandlers[productId] -- Get the handler for the product\n       local success, result = pcall(handler, receiptInfo, player) -- Call the handler to check if purchase logic is successful\n\n       if not success or not result then\n           warn(\"Failed to process receipt:\", receiptInfo, result)\n           return Enum.ProductPurchaseDecision.NotProcessedYet\n       end\n\n       return Enum.ProductPurchaseDecision.PurchaseGranted\n   end\n\n   local function receiptHandler(receiptInfo: { [string]: any }, player: Player)\n       local bundleId, _bundle = Bundles.getBundleByProductId(receiptInfo.ProductId)\n\n       if bundleId then\n           -- This purchase belongs to a bundle, let Bundles handle it\n           local purchaseDecision = Bundles.processReceiptAsync(player, bundleId, receiptInfo)\n           return purchaseDecision == Enum.ProductPurchaseDecision.PurchaseGranted\n       end\n\n       -- This purchase does not belong to a bundle,\n       -- ... Handle all your existing logic here if you have any\n       return false\n    end\n```\n\n----------------------------------------\n\nTITLE: Animating a UI Object Along a Path2D Using TweenService in Lua\nDESCRIPTION: This Lua script animates a GuiObject along a specified Path2D using Roblox's TweenService. It identifies the path and the object to animate. A NumberValue instance is created to represent the normalized position (0 to 1) along the path's arc length. A Tween is created to smoothly change this NumberValue from 0 to 1 over a defined duration with specific easing. A function connected to the NumberValue's Changed event updates the GuiObject's Position using Path2D:GetPositionOnCurveArcLength() based on the NumberValue's current value. The tween is set to repeat and reverse.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/ui/2D-paths.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal Tweenservice = game:GetService(\"TweenService\")\n\nlocal parent = script.Parent\nlocal path = parent:FindFirstChildWhichIsA(\"Path2D\")\nlocal objectToAnimate = parent:FindFirstChildWhichIsA(\"GuiObject\")\n\nlocal TWEEN_DURATION = 4\nlocal TWEEN_EASING_STYLE = Enum.EasingStyle.Cubic\nlocal TWEEN_EASING_DIRECTION = Enum.EasingDirection.InOut\n\nlocal pathSampleValue = Instance.new(\"NumberValue\")\nlocal tweenInfo = TweenInfo.new(TWEEN_DURATION, TWEEN_EASING_STYLE, TWEEN_EASING_DIRECTION, 0, true, 2)\nlocal tween = Tweenservice:Create(pathSampleValue, tweenInfo, {Value = 1})\n\nlocal function onSampleValueChanged()\n\tobjectToAnimate.Position = path:GetPositionOnCurveArcLength(pathSampleValue.Value)\nend\npathSampleValue.Changed:Connect(onSampleValueChanged)\n\ntween:Play()\n```\n\n----------------------------------------\n\nTITLE: Implementing Roblox UI Typewriter Animation Logic - Lua\nDESCRIPTION: This Lua ModuleScript defines the core functionality for a typewriter text effect. It includes functions to load localization translators and animate text on a `TextLabel` character by character using `MaxVisibleGraphemes` and `task.wait`, handling potential translation and cleaning up RichText tags and line breaks. It requires a `TextLabel` object, the text string, and a character delay as parameters for `typeWrite`.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/ui/animation.md#_snippet_13\n\nLANGUAGE: Lua\nCODE:\n```\nlocal LocalizationService = game:GetService(\"LocalizationService\")\nlocal Players = game:GetService(\"Players\")\n\nlocal SOURCE_LOCALE = \"en\"\nlocal translator = nil\n\nlocal AnimateUI = {}\n\nfunction AnimateUI.loadTranslator()\n\tpcall(function()\n\t\ttranslator = LocalizationService:GetTranslatorForPlayerAsync(Players.LocalPlayer)\n\tend)\n\tif not translator then\n\t\tpcall(function()\n\t\t\ttranslator = LocalizationService:GetTranslatorForLocaleAsync(SOURCE_LOCALE)\n\t\tend)\n\tend\nend\n\nfunction AnimateUI.typeWrite(guiObject, text, delayBetweenChars)\n\tguiObject.Visible = true\n\tguiObject.AutoLocalize = false\n\tlocal displayText = text\n\n\t-- Translate text if possible\n\tif translator then\n\t\tdisplayText = translator:Translate(guiObject, text)\n\tend\n\n\t-- Replace line break tags so grapheme loop will not miss those characters\n\tdisplayText = displayText:gsub(\"<br%s*/>\", \"\\n\")\n    \t-- Remove RichText tags since char-by-char animation will break the tags\n\tdisplayText = displayText:gsub(\"<[^<>]->\", \"\")\n\n\t-- Set translated/modified text on parent\n\tguiObject.Text = displayText\n\n\tlocal index = 0\n\tfor first, last in utf8.graphemes(displayText) do\n\t\tindex += 1\n\t\tguiObject.MaxVisibleGraphemes = index\n\t\ttask.wait(delayBetweenChars)\n\tend\nend\n\nreturn AnimateUI\n```\n\n----------------------------------------\n\nTITLE: Syncing Team Points - Lua\nDESCRIPTION: This Lua function synchronizes team points in the UI based on team colors. It retrieves the team color from the UI, finds the corresponding team, and updates the UI text with the team's points. It also connects a signal to update when points change.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/gameplay-scripting/create-teams.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal function startSyncingTeamPoints(gui: ScreenGui)\n\tfor _, teamPointCounter in gui.Objective.TeamPointCounter:GetChildren() do\n\t\tif not teamPointCounter:IsA(\"GuiObject\") then\n\t\t\tcontinue\n\t\tend\n\n\t\tlocal iconTeamColor = teamPointCounter:GetAttribute(GuiAttribute.teamColor)\n\n\t\tlocal team = getTeamFromTeamColor(iconTeamColor)\n\t\tif not team then\n\t\t\twarn(`No team found matching the color {iconTeamColor} to sync team points on {teamPointCounter}`)\n\t\t\tcontinue\n\t\tend\n\n\t\tteamPointCounter.TextLabel.Text = team:GetAttribute(GuiAttribute.teamPoints)\n\n\t\tteam:GetAttributeChangedSignal(GuiAttribute.teamPoints):Connect(function()\n\t\t\tteamPointCounter.TextLabel.Text = team:GetAttribute(GuiAttribute.teamPoints)\n\t\tend)\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Tweening GuiObject Rotation Using TweenService in Lua\nDESCRIPTION: Rotates a GuiObject such as ImageLabel around its center by a specified angle (e.g., 45 degrees) using TweenService. Dependencies include RoboX services TweenService and Players. AnchorPoint must be set for proper rotation origin. The input is the target rotation value, resulting in a smooth angular transition.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/ui/animation.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal TweenService = game:GetService(\"TweenService\")\nlocal Players = game:GetService(\"Players\")\n\nlocal PlayerGui = Players.LocalPlayer:WaitForChild(\"PlayerGui\")\nlocal ScreenGui = PlayerGui:WaitForChild(\"ScreenGui\")\nlocal object = ScreenGui:WaitForChild(\"ImageLabel\")\n\nobject.AnchorPoint = Vector2.new(0.5, 0.5)\n\nlocal targetRotation = 45\n\nlocal tweenInfo = TweenInfo.new(2)\nlocal tween = TweenService:Create(object, tweenInfo, {Rotation = targetRotation})\n\ntween:Play()\n```\n\n----------------------------------------\n\nTITLE: Accessing Dictionary Values by Key - Lua\nDESCRIPTION: Shows how to create a dictionary and retrieve a value by passing a key string in square brackets. Relies only on Luau. Highlights that keys are strings and demonstrates direct access to the value. Expects a dictionary with player names; outputs the value for 'player1' to the console.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-5/intro-to-dictionaries.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal playerNames = {\n\tplayer1 = \"Zap\",\n\tplayer2 = \"Kel\",\n}\nprint(playerNames[\"player1\"])\n```\n\n----------------------------------------\n\nTITLE: Tracking In-App Purchase Source Events with AnalyticsService in Lua\nDESCRIPTION: Illustrates logging a source economy event when a player makes an in-app purchase buying a resource bundle. Uses the Source flow type with the IAP transaction type and includes an optional itemSKU parameter to identify the purchase bundle uniquely. Parameters recorded are the player, currency name, amount received in the bundle, updated wallet balance, transaction type string, and SKU identifier. This facilitates accurate tracking of Robux purchases as sources in the Economy analytics dashboard.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/production/analytics/economy-events.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal AnalyticsService = game:GetService(\"AnalyticsService\")\n\nAnalyticsService:LogEconomyEvent(\n    player,\n    Enum.AnalyticsEconomyFlowType.Source,\n    \"Coins\",\n    1000, -- How many coins are in the bundle\n    1020, -- Balance after transaction\n    Enum.AnalyticsEconomyTransactionType.IAP.Name,\n    \"1000CoinBundle\" -- Unique item SKU identifier of the coin bundle\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Player Character in Camera Update Function (Lua)\nDESCRIPTION: Inside the `updateCamera` function, this code retrieves the local player's character model and includes a conditional check (`if character then`) to ensure the character exists before proceeding.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/input-and-camera/control-the-users-camera.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nlocal player = Players.LocalPlayer\n\nlocal function updateCamera()\n    local character = player.Character\n    if character then\n\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Initializing Player Leaderstats and 'IsAlive' Attribute in Roblox Lua\nDESCRIPTION: Defines the `onPlayerAdded` function, which executes when a new player joins. It creates a 'leaderstats' folder and a 'Points' IntValue for the player. It also initializes a custom boolean attribute named \"IsAlive\" on the player object to `false` using `SetAttribute`, and connects the player's `CharacterAdded` event to the `onCharacterAdded` function.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/scripting/basic-scripting/score-points.md#_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\nlocal function onPlayerAdded(player)\n  local leaderstats = Instance.new(\"Folder\")\n  leaderstats.Name = \"leaderstats\"\n  leaderstats.Parent = player\n\n  local points = Instance.new(\"IntValue\")\n  points.Name = \"Points\"\n  points.Value = 0\n  points.Parent = leaderstats\n\n  player:SetAttribute(\"IsAlive\", false)\n\n  player.CharacterAdded:Connect(function(character)\n    onCharacterAdded(character, player)\n  end)\nend\n```\n\n----------------------------------------\n\nTITLE: Positioning Roblox Part with CFrame.new(Vector3) (Lua)\nDESCRIPTION: Shows an alternative way to set a Roblox Part's absolute position by creating a `Vector3` with the desired coordinates and passing it to the `CFrame.new(Vector3)` constructor. The resulting CFrame is then assigned to the part's `.CFrame` property. Requires a `Part` object (e.g., `redBlock`). Sets the position to (-2, 2, 4).\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/workspace/cframes.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal redBlock = Workspace.RedBlock\n\n-- Create new CFrame\nlocal newVector3 = Vector3.new(-2, 2, 4)\nlocal newCFrame = CFrame.new(newVector3)\n\n-- Overwrite redBlock's current CFrame with new CFrame\nredBlock.CFrame = newCFrame\n```\n\n----------------------------------------\n\nTITLE: Assigning Enum Items to Object Properties in Roblox Lua\nDESCRIPTION: This snippet shows multiple ways to assign an EnumItem to the Shape property of a new Part instance in Roblox Lua. It demonstrates assigning by EnumItem reference, numeric Value, and Name, highlighting best practice by using the EnumItem directly. The snippet requires access to Roblox's game object model (particularly Workspace and Instance). It creates a new Part, assigns various representations of Enum.PartType.Cylinder to its Shape property, and parents it to Workspace. Inputs include the Enum and new object creation; output is a configured Part in the Workspace.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/enums.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal part = Instance.new(\"Part\")\t\t-- Create a new part\npart.Shape = Enum.PartType.Cylinder  -- By EnumItem (best practice)\npart.Shape = Enum.PartType.Cylinder.Value -- By EnumItem Value\npart.Shape = 2  -- By EnumItem Value\npart.Shape = Enum.PartType.Cylinder.Name -- By EnumItem Name\npart.Shape = \"Cylinder\"  -- By EnumItem Name\n\npart.Parent = Workspace\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Cube Creation Function (Size Only) - Luau\nDESCRIPTION: Defines the initial version of the `makeCube()` function. This function creates a new `Part` instance using `Instance.new(\"Part\")` and sets its `Size` property to a cube defined by the `CUBE_SIZE` constant.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-4/nested-loops.md#_snippet_3\n\nLANGUAGE: Luau\nCODE:\n```\nlocal TOWER_SIZE = 4\nlocal CUBE_SIZE = 2\n\n-- Creates individual cubes\nlocal function makeCube()\n  local cube = Instance.new(\"Part\")\n  cube.Size = Vector3.new(CUBE_SIZE, CUBE_SIZE, CUBE_SIZE)\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Friends Locator for Studio Testing\nDESCRIPTION: This LocalScript configures the FriendsLocator module for testing in Studio by enabling the showAllPlayers setting when in Studio environment. This script should be placed in StarterPlayerScripts to allow testing with multiple clients.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/friends-locator.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal RunService = game:GetService(\"RunService\")\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal FriendsLocator = require(ReplicatedStorage:WaitForChild(\"FriendsLocator\"))\n\nFriendsLocator.configure({\n\tshowAllPlayers = RunService:IsStudio(), -- Allows for debugging in Studio\n})\n```\n\n----------------------------------------\n\nTITLE: Calling Function with Object Arguments in Luau\nDESCRIPTION: Presents the complete setup, including obtaining references to game objects (`cementBlock`, `glassBottle`), the definition of the `sortGarbage` function, and calling the function while passing the object references as arguments. This illustrates how to provide values for multiple parameters during a function call.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-2/multiple-parameters-and-arguments.md#_snippet_6\n\nLANGUAGE: Luau\nCODE:\n```\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Objects to use as arguments\nlocal cementBlock = Workspace.CementBlock\nlocal glassBottle = Workspace.GlassBottle\n\n--Destroys trash and cleans up recyclables\nlocal function sortGarbage(trash,recyclable)\n    local sparkle = Instance.new(\"ParticleEmitter\")\n\n    trash:Destroy()\n    sparkle.Parent = recyclable\nend\n\n-- Pass in the arguments\nsortGarbage(cementBlock, glassBottle)\n```\n\n----------------------------------------\n\nTITLE: Accessing EnumItem Properties in Roblox Lua\nDESCRIPTION: This snippet illustrates accessing the individual properties of a Datatype.EnumItem, specifically Enum.PartType.Cylinder. It prints the Name, Value, and EnumType properties. This is useful for inspecting enum members programmatically. The snippet assumes the standard Roblox Enum API is available. It outputs string and numeric representations of the enum item and its parent enum type.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/enums.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n-- Properties of the EnumItem called Enum.PartType.Cylinder\nprint(Enum.PartType.Cylinder.Name) -- Cylinder\nprint(Enum.PartType.Cylinder.Value) -- 2\nprint(Enum.PartType.Cylinder.EnumType) -- PartType\n```\n\n----------------------------------------\n\nTITLE: Initializing Laser Distance Constant in Lua\nDESCRIPTION: This snippet declares a constant `MAX_LASER_DISTANCE` to define the maximum range of the laser blaster. It's placed at the top of the script alongside other service and variable declarations. The value of 500 represents the chosen range.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/scripting/intermediate-scripting/hit-detection-with-lasers.md#_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlocal UserInputService = game:GetService(\"UserInputService\")\n\nlocal tool = script.Parent\n\nlocal MAX_MOUSE_DISTANCE = 1000\nlocal MAX_LASER_DISTANCE = 500\n```\n\n----------------------------------------\n\nTITLE: Tracking Custom Fields in Roblox Analytics (Lua)\nDESCRIPTION: This code snippet demonstrates how to log an economy event with custom fields in Roblox using the AnalyticsService. It tracks the equipment type, player class, and level associated with the event using `Enum.AnalyticsCustomFieldKeys` to specify the custom field keys. The code utilizes the `LogEconomyEvent` function to send the custom fields along with other relevant economy event data.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/production/analytics/custom-fields.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal AnalyticsService = game:GetService(\"AnalyticsService\")\n\nAnalyticsService:LogEconomyEvent(\n    player,\n    Enum.AnalyticsEconomyFlowType.Sink,\n    \"Coins\", -- Currency name\n    80, -- Cost\n    20, -- Balance after transaction\n    Enum.AnalyticsEconomyTransactionType.Shop.Name,\n    \"Obsidian Sword\", -- Item SKU\n    {\n\t[Enum.AnalyticsCustomFieldKeys.CustomField01.Name] = \"Category - Weapon\",\n\t[Enum.AnalyticsCustomFieldKeys.CustomField02.Name] = \"Class - Warrior\",\n\t[Enum.AnalyticsCustomFieldKeys.CustomField03.Name] = \"Level - 10\",\n    } -- Custom field dictionary table\n)\n```\n\n----------------------------------------\n\nTITLE: Function declaration with parameters in Lua\nDESCRIPTION: This snippet shows the syntax for declaring a function with a parameter in Lua. The parameter serves as a placeholder for information that will be passed to the function when it's called.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-2/use-parameters-and-events.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nlocal function functionName(parameterName)\n\nend\n```\n\n----------------------------------------\n\nTITLE: Offsetting Roblox Part from Another Part's Position (Lua)\nDESCRIPTION: Demonstrates how to position one Roblox Part relative to the *absolute* position of another Part using CFrame and Vector3 arithmetic. A new CFrame is created at the `blueCube`'s absolute position (`CFrame.new(blueCube.Position)`), and a `Vector3` offset is added to it. This positions `redBlock` 2 studs directly above `blueCube`'s position relative to the world axes. Requires two `Part` objects (e.g., `redBlock`, `blueCube`).\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/workspace/cframes.md#_snippet_5\n\nLANGUAGE: Lua\nCODE:\n```\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal redBlock = Workspace.RedBlock\nlocal blueCube = Workspace.BlueCube\n\nredBlock.CFrame = CFrame.new(blueCube.Position) + Vector3.new(0, 2, 0)\n```\n\n----------------------------------------\n\nTITLE: Getting a Specific Key's Value from MemoryStore Hash Map (Lua)\nDESCRIPTION: Retrieves the value associated with a single key from the hash map. This snippet first sets a value and then retrieves it using `GetAsync()`. The operation is wrapped in `pcall` to catch and handle potential errors during the asynchronous call.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud-services/memory-stores/hash-map.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal MemoryStoreService = game:GetService(\"MemoryStoreService\")\n\nlocal hashMap = MemoryStoreService:GetHashMap(\"HashMap1\")\n\nlocal setSuccess, _ = pcall(function()\n\treturn hashMap:SetAsync(\"User_1234\", 1000, 30)\nend)\nif setSuccess then\n\tprint(\"Set succeeded.\")\nend\n\nlocal item\nlocal getSuccess, getError = pcall(function()\n\titem = hashMap:GetAsync(\"User_1234\")\nend)\nif getSuccess then\n\tprint(item)\nelse\n\twarn(getError)\nend\n```\n\n----------------------------------------\n\nTITLE: Offsetting Roblox Part Relative to Another Part (ToWorldSpace) (Lua)\nDESCRIPTION: Explains how to position a Roblox Part relative to the *local* coordinate space of another Part using the `CFrame:ToWorldSpace()` method. An offset CFrame is created (representing the offset in the target's local space), and `ToWorldSpace()` is called on the target's CFrame, applying the offset in the target's orientation. Requires two `Part` objects (e.g., `redBlock`, `blueCube`). Positions `redBlock` 2 studs above `blueCube` relative to `blueCube`'s local up direction.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/workspace/cframes.md#_snippet_6\n\nLANGUAGE: Lua\nCODE:\n```\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal redBlock = Workspace.RedBlock\nlocal blueCube = Workspace.BlueCube\n\nlocal offsetCFrame = CFrame.new(0, 2, 0)\nredBlock.CFrame = blueCube.CFrame:ToWorldSpace(offsetCFrame)\n```\n\n----------------------------------------\n\nTITLE: Paginated GET Request with Terminal Page for Data Stores in JSON\nDESCRIPTION: Represents a paginated data store list request with the final response indicating no further pages (nextPageToken omitted). The client should end pagination upon receipt. Usable in any RESTful or HTTP API context handling Open Cloud data store resources.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/reference/patterns.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\nGET /cloud/v2/universes/{universe_id}/data-stores?maxPageSize=25&pageToken=datastore1\n\n{\n  \"dataStores\": [\n    ...\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Text Input - Roblox Server Script in Lua\nDESCRIPTION: Receives raw text input from clients via a RemoteEvent and performs asynchronous filtering using Roblox's TextService:FilterStringAsync method. It handles errors safely using pcall. Upon successful filtering, the server obtains a filtered text version suitable for display to all users with GetNonChatStringForBroadcastAsync. The script requires a RemoteEvent named 'InputRemoteEvent' in ReplicatedStorage and processes input based on the submitting player's UserId. Filtered text is printed and can be displayed on server-side UI objects. This implementation ensures compliance with community standards by blocking inappropriate and sensitive content.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/ui/text-filtering.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal TextService = game:GetService(\"TextService\")\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\n-- RemoteEvent to receive text input from client for filtering\nlocal inputRemoteEvent = ReplicatedStorage:FindFirstChild(\"InputRemoteEvent\")\n\nlocal function getFilterResult(text, fromUserId)\n\tlocal filterResult\n\tlocal success, errorMessage = pcall(function()\n\t\tfilterResult = TextService:FilterStringAsync(text, fromUserId)\n\tend)\n\n\tif success then\n\t\treturn filterResult\n\telse\n\t\twarn(\"Error generating TextFilterResult:\", errorMessage)\n\tend\nend\n\n-- Fired when client submits input from the TextBox\nlocal function onInputReceived(player, text)\n\tif text ~= \"\" then\n\t\tlocal filterResult = getFilterResult(text, player.UserId)\n\t\tif filterResult then\n\t\t\tlocal success, filteredText = pcall(function()\n\t\t\t\treturn filterResult:GetNonChatStringForBroadcastAsync()\n\t\t\tend)\n\n\t\t\tif success then\n\t\t\t\tprint(\"FILTERED:\", filteredText)\n\t\t\telse\n\t\t\t\twarn(\"Error filtering text!\")\n\t\t\tend\n\t\tend\n\tend\nend\n\ninputRemoteEvent.OnServerEvent:Connect(onInputReceived)\n```\n\n----------------------------------------\n\nTITLE: Detecting Volume Collision and Triggering Animation in Roblox - Lua\nDESCRIPTION: This LocalScript listens for collisions between the local player's character and an invisible volume named 'AnimationDetector'. Upon detection, it plays a specified animation on the player's Humanoid using an Animator. It uses debounce logic to prevent multiple animation triggers during continuous collisions. Key dependencies include the Animation object as a child of the script, a Humanoid and Animator in the player character, and the AnimationDetector volume in the Workspace. Inputs are collision events from the volume; outputs are animation playback on the local client. The script ensures immediate, client-side feedback by operating locally rather than on the server.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/animation/play-character-animations.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal animation = script:WaitForChild(\"Animation\")\nlocal humanoid = script.Parent:WaitForChild(\"Humanoid\")\nlocal animator = humanoid:WaitForChild(\"Animator\")\nlocal animationTrack = animator:LoadAnimation(animation)\nlocal animationDetector = Workspace:WaitForChild(\"AnimationDetector\")\n\nlocal debounce = false\n\nanimationDetector.Touched:Connect(function(hit)\n\tif debounce then \n\t\treturn\n\tend\n\t\n\tlocal hitCharacter = hit:FindFirstAncestorWhichIsA(\"Model\")\n\tif hitCharacter ~= localCharacter then\n\t\treturn\n\tend\n\n\tdebounce = true\n\tanimationTrack:Play()\n\tanimationTrack.Ended:Wait()\n\tdebounce = false\nend)\n```\n\n----------------------------------------\n\nTITLE: Toggling the Catalog Button with MerchBooth - Lua\nDESCRIPTION: Shows how to programmatically show or hide the catalog button UI using toggleCatalogButton. This can be used to enforce custom display logic or restrict physical UI presence in the game. Requires the MerchBooth module, is called from a LocalScript, and takes a boolean (enabled) as input.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/merch-booth.md#_snippet_27\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal MerchBooth = require(ReplicatedStorage:WaitForChild(\"MerchBooth\"))\n\nMerchBooth.toggleCatalogButton(false)\n\n```\n\n----------------------------------------\n\nTITLE: Creating a TranslationHelper Module for Roblox Localization in Lua\nDESCRIPTION: This code defines a reusable TranslationHelper module to simplify and centralize localization logic in Roblox Lua projects. It tries to load player-specific and fallback locale translators asynchronously with pcall. The module exposes methods to change the language with setLanguage, translate a string with translate, and translate a key with arguments using translateByKey. The fallback translator is used if the player translator fails. Inputs include translation keys or text and optional objects for context; outputs are localized strings or false if translation fails. The module handles safe translation attempts and fallback strategies, and should be placed in ReplicatedStorage for requiring by other scripts. The source language can be changed by updating the sourceLanguageCode variable. This module facilitates consistent translation management and fallback handling.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/production/localization/localize-with-scripting.md#_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlocal TranslationHelper = {}\n\nlocal LocalizationService = game:GetService(\"LocalizationService\")\nlocal Players = game:GetService(\"Players\")\n\n-- Local variables\nlocal player = Players.LocalPlayer\nlocal sourceLanguageCode = \"en\"\n\n-- Get translators\nlocal playerTranslator, fallbackTranslator\nlocal foundPlayerTranslator = pcall(function()\n\tplayerTranslator = LocalizationService:GetTranslatorForPlayerAsync(player)\nend)\nlocal foundFallbackTranslator = pcall(function()\n\tfallbackTranslator = LocalizationService:GetTranslatorForLocaleAsync(sourceLanguageCode)\nend)\n\n-- Create a method TranslationHelper.setLanguage to load a new translation for the TranslationHelper\nfunction TranslationHelper.setLanguage(newLanguageCode)\n\tif sourceLanguageCode ~= newLanguageCode then\n\t\tlocal success, newPlayerTranslator = pcall(function()\n\t\t\treturn LocalizationService:GetTranslatorForLocaleAsync(newLanguageCode)\n\t\tend)\n\n\t\t--Only override current playerTranslator if the new one is valid (fallbackTranslator remains as experience's source language)\n\t\tif success and newPlayerTranslator then\n\t\t\tplayerTranslator = newPlayerTranslator\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\n\n-- Create a Translate function that uses a fallback translator if the first fails to load or return successfully. You can also set the referenced object to default to the generic game object\n\nfunction TranslationHelper.translate(text, object)\n\tif not object then\n\t\tobject = game\n\tend\n\tif foundPlayerTranslator then\n\t\treturn playerTranslator:Translate(object, text)\n\tend\n\tif foundFallbackTranslator then\n\t\treturn fallbackTranslator:Translate(object, text)\n\tend\n\treturn false\nend\n\n-- Create a FormatByKey() function that uses a fallback translator if the first fails to load or return successfully\n\nfunction TranslationHelper.translateByKey(key, arguments)\n\tlocal translation = \"\"\n\tlocal foundTranslation = false\n\n\t-- First tries to translate for the player's language (if a translator was found)\n\tif foundPlayerTranslator then\n\t\tfoundTranslation = pcall(function()\n\t\t\ttranslation = playerTranslator:FormatByKey(key, arguments)\n\t\tend)\n\tend\n\tif foundFallbackTranslator and not foundTranslation then\n\t\tfoundTranslation = pcall(function()\n\t\t\ttranslation = fallbackTranslator:FormatByKey(key, arguments)\n\t\tend)\n\tend\n\tif foundTranslation then\n\t\treturn translation\n\telse\n\t\treturn false\n\tend\nend\n\nreturn TranslationHelper\n```\n\n----------------------------------------\n\nTITLE: Rendering asset documentation sections using React and JSX\nDESCRIPTION: Implements a React component that iterates over the 'sections' data array to dynamically generate UI elements for a documentation page. It uses Material UI components such as Grid, Typography, Button, Card, and CardContent for layout and styling. Each section renders a title, description, buttons, statistical cards if available, and content including images or embedded YouTube videos. This snippet manages structure, spacing, and accessibility attributes to create a responsive and interactive interface.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/assets.md#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n{sections.map((section, index) => (\n  <Grid item xs={12} key={index}>\n    {section.title && (\n      <Typography variant='h1'>{section.title}</Typography>\n    )}\n  <div style={{ marginTop: 16, marginBottom: 48 }}>\n    {section.description && (\n      <p>{section.description}</p>\n    )}\n    {section.buttons && section.buttons.map((button, btnIndex) => (\n      <Button\n        key={btnIndex}\n        style={{ marginTop: 8, marginRight: 24 }}\n        variant=\"contained\"\n        color=\"secondary\"\n        size=\"large\"\n        href={button.href}\n      >\n        {button.text}\n      </Button>\n    ))}\n  </div>\n    {section.stats && (\n      <Grid item xs={12} sm={12} md={12} lg={12} style={{ textAlign: \"center\", marginTop: -96, marginBottom: 96 }}>\n        <Grid container spacing={4}>\n          {section.stats.map((stat, index) => (\n            <Grid item xs={12} sm={6} md={4} key={index}>\n              <Card variant=\"filled\">\n                <CardContent>\n                  <Typography variant=\"hero\" color=\"info\">{stat.header}</Typography>\n                  <Typography component=\"p\" variant=\"h2\">{stat.description}</Typography>\n                </CardContent>\n              </Card>\n            </Grid>\n          ))}\n        </Grid>\n      </Grid>\n    )}\n    {section.content.map((section, index) => (\n      <Grid container spacing={8} key={index} style={{ marginTop: 24 }}>\n        <Grid item xs={12} md={5}>\n          <div>\n            <h2>{section.title}</h2>\n            <p>{section.description}</p>\n            <div style={{ marginTop: 24, marginBottom: 48 }}>\n              {section.links && section.links.map((link, linkIndex) => (\n                <a href={link.href} key={linkIndex}>\n                  <Typography variant='buttonLarge'>{link.text}</Typography><br />\n                </a>\n              ))}\n              {section.buttons &&  section.buttons.map((button, btnIndex) => (\n                <Button\n                  key={btnIndex}\n                  style={{ marginRight: 24, marginBottom:24 }}\n                  variant=\"contained\"\n                  color=\"primary\"\n                  size=\"large\"\n                  href={button.href}\n                >\n                  {button.text}\n                </Button>\n              ))}\n            </div>\n          </div>\n        </Grid>\n        <Grid item xs={12} md={7}>\n          {section.image && (\n            <img\n              style={{ width: '100%', height: 'auto' }}\n              src={section.image}\n              alt={section.title}\n            />\n          )}\n          {section.video && (\n            <iframe\n              style={{ width: '100%', aspectRatio: 16/9, height: 'auto' }}\n              src={section.video}\n              title=\"YouTube video player\"\n              frameborder=\"0\"\n              allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\n              referrerpolicy=\"strict-origin-when-cross-origin\"\n              allowfullscreen\n            ></iframe>\n          )}\n        </Grid>\n      </Grid>\n    ))}\n  </Grid>\n))}\n```\n\n----------------------------------------\n\nTITLE: Getting Folder Children into a Luau Array\nDESCRIPTION: References a folder in the workspace (`workspace.PartsFolder`) and uses the `GetChildren()` method to retrieve an array containing all the direct child objects of that folder. This array (`partsArray`) can then be iterated over.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-5/loops-and-arrays.md#_snippet_10\n\nLANGUAGE: Luau\nCODE:\n```\nlocal partsFolder = workspace.PartsFolder\n\n-- Gets an array listing the parts in PartsFolder\nlocal partsArray = partsFolder:GetChildren()\n```\n\n----------------------------------------\n\nTITLE: Decremental Brightness Decrease Loop in Roblox Lua\nDESCRIPTION: A for loop that decreases the brightness from 5 back to 0, creating a dimming effect, with each step delayed by task.wait for visual smoothness. This reverses the brightening process to produce a twinkling or pulsing glow. It leverages the same control variables for consistent animation timing.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-4/glow-lights-with-for-loops.md#_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\nfor currentBrightness = 5, 0, -brightnessChange do\n  light.Brightness = currentBrightness\n  task.wait(timeChange)\nend\n```\n\n----------------------------------------\n\nTITLE: Firing Remote Event with Hit Position from Client in Roblox Lua\nDESCRIPTION: This code, intended for the ToolController, demonstrates how to fire the DamageCharacter remote event from the client with an added hitPosition parameter. The function first ensures the character contains a Humanoid, then transmits both the character model and hitPosition for server-side validation. Requires: eventsFolder with DamageCharacter remote event, characterModel object, and calculated hitPosition vector.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/scripting/intermediate-scripting/hit-detection-with-lasers.md#_snippet_24\n\nLANGUAGE: Lua\nCODE:\n```\nif characterModel then\n\tlocal humanoid = characterModel:FindFirstChildWhichIsA(\"Humanoid\")\n\tif humanoid then\n\t\teventsFolder.DamageCharacter:FireServer(characterModel, hitPosition)\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Timer Update Loop in MatchManager (Lua)\nDESCRIPTION: Shows a `while` loop that continuously updates the `timeLeft` IntValue while the timer (`myTimer`) is running. It retrieves the remaining time, adds 1 (to display 1 as the minimum), performs integer division (`// 1`), and waits briefly (`task.wait()`) in each iteration for accurate display.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/battle-royale-series/creating-a-gui.md#_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nwhile myTimer:isRunning() do\n\t-- Adding +1 makes sure the timer display ends at 1 instead of 0.\n\ttimeLeft.Value = (myTimer:getTimeLeft() + 1) // 1\n\t-- By not setting the time for wait, it offers more accurate looping\n\ttask.wait()\nend\n```\n\n----------------------------------------\n\nTITLE: Referencing Roblox Assets via Asset ID\nDESCRIPTION: Demonstrates the `rbxassetid://` URI scheme used within Roblox to reference cloud-based assets like images (decals), meshes, and audio. Each asset has a unique ID, allowing it to be used across multiple places and experiences by referencing this ID.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/projects/index.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nrbxassetid://7229442422\n```\n\nLANGUAGE: text\nCODE:\n```\nrbxassetid://6768917255\n```\n\nLANGUAGE: text\nCODE:\n```\nrbxassetid://9125402735\n```\n\n----------------------------------------\n\nTITLE: Sending Players to Arena Spawns in Lua\nDESCRIPTION: This snippet modifies the `sendPlayersToMatch()` function to teleport players to the arena. It retrieves the arena spawn locations, iterates through each player in the game, inserts them into the `activePlayers` array, selects a spawn location, calls `preparePlayer()` to teleport the player to that location, and removes the used spawn location from the available spawn locations. This ensures that each player is assigned a unique spawn location in the arena.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/battle-royale-series/managing-players.md#_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\n--Module Functions\nfunction PlayerManager.sendPlayersToMatch()\n\tlocal arenaSpawns = spawnLocations:GetChildren()\nend\n```\n\nLANGUAGE: lua\nCODE:\n```\nfunction PlayerManager.sendPlayersToMatch()\n\tlocal arenaSpawns = spawnLocations:GetChildren()\n\n\tfor playerKey, whichPlayer in Players:GetPlayers() do\n\n\tend\nend\n```\n\nLANGUAGE: lua\nCODE:\n```\nfunction PlayerManager.sendPlayersToMatch()\n\tlocal arenaSpawns = spawnLocations:GetChildren()\n\n\tfor playerKey, whichPlayer in Players:GetPlayers() do\n\t\ttable.insert(activePlayers, whichPlayer)\n\tend\nend\n```\n\nLANGUAGE: lua\nCODE:\n```\nfor playerKey, whichPlayer in Players:GetPlayers() do\n\ttable.insert(activePlayers, whichPlayer)\n\tlocal spawnLocation = arenaSpawns[1]\nend\n```\n\nLANGUAGE: lua\nCODE:\n```\nfor playerKey, whichPlayer in Players:GetPlayers() do\n\ttable.insert(activePlayers, whichPlayer)\n\tlocal spawnLocation = table.remove(arenaSpawns, 1)\n\tpreparePlayer(whichPlayer, spawnLocation)\nend\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Team Point Display in Roblox Lua (StartSyncingTeamPoints)\nDESCRIPTION: This module script (`StartSyncingTeamPoints`) synchronizes team points stored as attributes on `Team` objects with the player's HUD. The `startSyncingTeamPoints` function iterates through UI elements representing team scores, uses `getTeamFromTeamColor` to find the corresponding `Team` object based on a 'teamColor' attribute, sets the initial score text, and connects to the team's `teamPoints` attribute change signal to keep the UI updated in real-time.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/gameplay-scripting/add-rounds.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal function startSyncingTeamPoints(gui: ScreenGui)\n\tfor _, teamPointCounter in gui.Objective.TeamPointCounter:GetChildren() do\n\t\tif not teamPointCounter:IsA(\"GuiObject\") then\n\t\t\tcontinue\n\t\tend\n\n\t\tlocal iconTeamColor = teamPointCounter:GetAttribute(GuiAttribute.teamColor)\n```\n\nLANGUAGE: lua\nCODE:\n```\nlocal function getTeamFromTeamColor(teamColor: Color3): Team?\n\tfor _, team in Teams:GetTeams() do\n\t\tif team.TeamColor == teamColor then\n\t\t\treturn team\n\t\tend\n\tend\n\n\treturn nil\nend\n```\n\nLANGUAGE: lua\nCODE:\n```\n\t\tteamPointCounter.TextLabel.Text = team:GetAttribute(GuiAttribute.teamPoints)\n\n\t\tteam:GetAttributeChangedSignal(GuiAttribute.teamPoints):Connect(function()\n\t\t\tteamPointCounter.TextLabel.Text = team:GetAttribute(GuiAttribute.teamPoints)\n```\n\n----------------------------------------\n\nTITLE: Interpolating Part Positions Between Two Points Using CFrame:Lerp in Roblox Lua\nDESCRIPTION: This Lua snippet shows how to use the Lerp method to set a part's CFrame between two other parts in Roblox. It requires existing parts named \"RedBlock\", \"GreenCube\", and \"CyanCube\" in Workspace. The red block moves 70% of the way from the green cube to the cyan cube using Lerp with a weight of 0.7. Inputs are the CFrame values of the parts, and the output is the interpolated CFrame assigned to the red block. All involved objects must exist in Workspace before execution.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/workspace/cframes.md#_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal redBlock = Workspace.RedBlock\nlocal greenCube = Workspace.GreenCube\nlocal cyanCube = Workspace.CyanCube\n\nredBlock.CFrame = greenCube.CFrame:Lerp(cyanCube.CFrame, 0.7)\n```\n\n----------------------------------------\n\nTITLE: Defining Player and Map Variables in PlayerManager (Lua)\nDESCRIPTION: This snippet initializes essential map and player-related variables in the PlayerManager module, including references to lobby spawn location, arena map, spawn locations, an array for active players, and a reference to the weapon tool stored in ServerStorage. Required dependencies are workspace objects and ServerStorage with a pre-existing 'Weapon' tool. Inputs are Roblox service objects; outputs are correctly initialized variables for use in later player management functions.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/battle-royale-series/managing-players.md#_snippet_8\n\nLANGUAGE: Lua\nCODE:\n```\n-- Map Variables\nlocal lobbySpawn = workspace.Lobby.StartSpawn\nlocal arenaMap = workspace.Arena\nlocal spawnLocations = arenaMap.SpawnLocations\n\n-- Player Variables\nlocal activePlayers = {}\nlocal playerWeapon = ServerStorage.Weapon\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Local Variable Capture (Upvalue) in Luau\nDESCRIPTION: Shows how a local function (`f`) defined within the scope of a local variable (`x`) can access and 'capture' the variable from the outer scope. The variable `x` accessed inside the function `f` is referred to as an upvalue, demonstrating closure-like behavior.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/scope.md#_snippet_5\n\nLANGUAGE: Luau\nCODE:\n```\nlocal x = 5\n\nlocal function f()\n\tprint(x)\nend\n\nf() -- 5\nprint(x) -- 5\n```\n\n----------------------------------------\n\nTITLE: Connect Chest Parts to Touch Function - Lua\nDESCRIPTION: This code iterates through all the chest parts and connects the `partTouched` function to the `Touched` event of each part. This makes it so that when a player touches a chest, the logic in `partTouched` is executed.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-6/create-with-module-scripts.md#_snippet_17\n\nLANGUAGE: Lua\nCODE:\n```\n-- Binds every chest part to the touch function so it works on all parts\nfor chestIndex = 1, #chestsArray do\n\tlocal chestPart = chestsArray[chestIndex]\n\tchestPart.Touched:Connect(function(otherPart)\n\tpartTouched(otherPart, chestPart)\n\tend)\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Up Editable Avatars in Roblox Lua\nDESCRIPTION: This Lua script provides functions to prepare a Roblox avatar model for runtime editing. It initializes EditableMesh for rigid parts and parts with WrapTargets (using WrapDeformer), and sets up EditableImage for textures, optimizing by reusing instances for identical TextureIDs. The setupModel function iterates through a model's MeshPart descendants to apply these configurations.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/avatar/in-experience-creation.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal AssetService = game:GetService(\"AssetService\")\n\nlocal function setupBodyPart(meshPart, wrapTarget)\n\t-- Create and attach a WrapDeformer to the MeshPart\n\tlocal wrapDeformer = Instance.new(\"WrapDeformer\")\n\twrapDeformer.Parent = meshPart\n\n\t-- Create an editable mesh for the wrap target's cage mesh\n\tlocal cageEditableMesh: EditableMesh =\n\t\tAssetService:CreateEditableMeshAsync(Content.fromUri(wrapTarget.CageMeshId), {\n\t\t\tFixedSize = true,\n\t\t})\n\n\t-- Assign the cage mesh to the WrapDeformer\n\twrapDeformer:SetCageMeshContent(Content.fromObject(cageEditableMesh))\nend\n\nlocal function setupRigidMesh(meshPart)\n\t-- Create an editable mesh from the original MeshPart\n\tlocal editableMesh = AssetService:CreateEditableMeshAsync(Content.fromUri(meshPart.MeshId), {\n\t\tFixedSize = true,\n\t})\n\n\t-- Generate a new MeshPart from the editable mesh\n\tlocal newMeshPart = AssetService:CreateMeshPartAsync(Content.fromObject(editableMesh))\n\n\t-- Copy size, position, and texture from the original MeshPart\n\tnewMeshPart.Size = meshPart.Size\n\tnewMeshPart.CFrame = meshPart.CFrame\n\tnewMeshPart.TextureContent = meshPart.TextureContent\n\n\t-- Apply the new MeshPart back to the original\n\tmeshPart:ApplyMesh(newMeshPart)\nend\n\nlocal function setupMeshTexture(meshPart, textureIdToEditableImageMap)\n\t-- If EditableImage already exists for this TextureID, resuse it rather than making a new one\n\tif textureIdToEditableImageMap[meshPart.TextureID] then\n\t\tmeshPart.TextureContent =\n\t\t\tContent.fromObject(textureIdToEditableImageMap[meshPart.TextureID])\n\t\treturn\n\tend\n\n\t-- Create a new EditableImage and apply it as the texture content\n\tlocal editableImage = AssetService:CreateEditableImageAsync(Content.fromUri(meshPart.TextureID))\n\ttextureIdToEditableImageMap[meshPart.TextureID] = editableImage\n\tmeshPart.TextureContent = Content.fromObject(editableImage)\nend\n\nlocal function setupModel(model)\n\t-- Map for reusing EditableImage instances by texture ID\n\tlocal textureIdToEditableImageMap = {}\n\tfor _, descendant in model:GetDescendants() do\n\t\tif not descendant:IsA(\"MeshPart\") then\n\t\t\tcontinue\n\t\tend\n\n\t\t-- Configure MeshPart based on WrapTarget presence\n\t\t-- If WrapTarget is present, add a WrapDeformer child with an EditableMesh\n\t\t-- Otherwise, apply EditableMesh to the MeshPart directly\n\t\tlocal wrapTarget = descendant:FindFirstChildOfClass(\"WrapTarget\")\n\t\tif wrapTarget then\n\t\t\tsetupBodyPart(descendant, wrapTarget)\n\t\telse\n\t\t\tsetupRigidMesh(descendant)\n\t\tend\n\n\t\t-- Configure the EditableImage for the MeshPart\n\t\tsetupMeshTexture(descendant, textureIdToEditableImageMap)\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Disabling Touch Controls in Roblox Using Lua\nDESCRIPTION: This Lua snippet shows how to disable touch-specific UI controls such as the virtual thumbstick and jump button on devices with touch capability. It accesses the GuiService and sets the TouchControlsEnabled property to false, thereby hiding default touch controls at runtime. It requires client-side script access and the GuiService. The expected input is setting the TouchControlsEnabled boolean property, resulting in the removal of touch control UI elements from the screen.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/includes/ui/default-ui.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal GuiService = game:GetService(\"GuiService\")\n\nGuiService.TouchControlsEnabled = false\n```\n\n----------------------------------------\n\nTITLE: Configuring EmoteBar Client GUI (Wheel) - Lua\nDESCRIPTION: Illustrates how to configure the client-side EmoteBar library to use the Emote Wheel GUI type. It calls the `configureClient` function with the `guiType` set to `EmoteBar.GuiType.EmoteWheel`. This function must be executed within a LocalScript.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/emote-bar.md#_snippet_4\n\nLANGUAGE: Lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal EmoteBar = require(ReplicatedStorage:WaitForChild(\"EmoteBar\"))\n\nEmoteBar.configureClient({\n\tguiType = EmoteBar.GuiType.EmoteWheel,\n})\n```\n\n----------------------------------------\n\nTITLE: Inferred Type Definition Using typeof in Luau Lua\nDESCRIPTION: Uses the 'typeof' function to infer the type of a literal table value automatically. This helps keep types synchronized with values without manually redefining the structure. Useful for defining metatables or object shapes dynamically with type safety.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/type-checking.md#_snippet_15\n\nLANGUAGE: lua\nCODE:\n```\ntype Car = typeof({\n\tSpeed = 0,\n\tWheels = 4\n})  --> Car: {Speed: number, Wheels: number}\n```\n\n----------------------------------------\n\nTITLE: Enabling Native Code Generation for Individual Functions in Lua\nDESCRIPTION: This snippet shows how to enable native code generation for a specific function using the @native attribute. This approach allows for more selective optimization and avoids the drawbacks of compiling an entire script.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/native-code-gen.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n@native\nlocal function f(x)\n  return (x + 1)\nend\n```\n\n----------------------------------------\n\nTITLE: Displaying Roblox Model Hierarchy Example in Text\nDESCRIPTION: Shows a textual representation of a Roblox model hierarchy, illustrating how multiple objects such as ParticleEmitter, MeshPart, SpringConstraint, ClickDetector, and nested Script objects are composed under a Model container. This example demonstrates the modular organization of Roblox components within a model structure, reflecting the relationship between parent and child objects in the Explorer window.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/unreal.md#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nModel\n|- ParticleEmitter\n|- MeshPart\n|- SpringConstraint\n|- ClickDetector\n|  |- Script\n```\n\n----------------------------------------\n\nTITLE: Resolving Mesh Size Discrepancy Error\nDESCRIPTION: This error occurs when one mesh (`%s`) has a size difference greater than the maximum allowed (`%f`) compared to another mesh (`%s`). Adjust the model's scale to bring the sizes within acceptable limits.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/validation-errors.md#_snippet_23\n\nLANGUAGE: Text\nCODE:\n```\n`%s` is more than max difference `%f` in size compared to the other mesh `%s`. You need to edit the model to adjust its size.\n```\n\n----------------------------------------\n\nTITLE: Server-Side Validation for Funnel Step Events in Roblox\nDESCRIPTION: The server-side Lua code ensures data integrity when players report funnel steps by validating step numbers before logging. It employs a maximum step threshold and warns if invalid steps are received, preventing exploiters from corrupting analytics data.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/production/analytics/funnel-events.md#_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\nlocal AnalyticsService = game:GetService(\"AnalyticsService\")\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal onboardingEvent = ReplicatedStorage:WaitForChild(\"OnboardingEvent\")\n\nlocal maxStep = 3\n\nlocal function onPlayerEventFired(player, args)\n    local step = args.step\n    if(step > maxStep) then\n        warn(`Invalid tutorial step {step} received from client.`)\n        return\n    end\n\n    print(`{player.Name} completed step: {step}`)\n    AnalyticsService:LogOnboardingFunnelStepEvent(player, step)\nend\n\nonboardingEvent.OnServerEvent:Connect(onPlayerEventFired)\n```\n\n----------------------------------------\n\nTITLE: Filtering by CollectionService Tag\nDESCRIPTION: Finds all instances tagged with 'LightSource' using the `CollectionService`. Uses the `tag:` prefix.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/studio/explorer.md#_snippet_10\n\nLANGUAGE: RobloxSearchQuery\nCODE:\n```\ntag:LightSource\n```\n\n----------------------------------------\n\nTITLE: Handling Player Tagged Out State in Roblox Lua\nDESCRIPTION: This Lua function, part of the PlayerStateHandler, is triggered when a player's state changes to 'TaggedOut'. It disables player movement and camera control, sets the exclusive UI view to the 'OutStateGui', and disables the player's blaster functionality by updating relevant player attributes. This function manages the player's state while waiting for the server-side respawn.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/gameplay-scripting/spawn-respawn.md#_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nlocal function onTaggedOut()\n\t-- Disable controls while tagged out\n\ttogglePlayerMovement(false)\n\ttogglePlayerCamera(false)\n\tsetGuiExclusivelyEnabled(playerGui.OutStateGui)\n\n\t-- Disable blaster while tagged out\n\tlocalPlayer:SetAttribute(PlayerAttribute.blasterStateClient, BlasterState.Disabled)\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Numeric For Loops in C#\nDESCRIPTION: This snippet demonstrates traditional C-style `for` loops in C#. Loops require initialization, a continuation condition, and an iteration step, allowing for precise control over forward and reverse iteration based on an index.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/luau-csharp-comparison.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n// Forward loop\nfor (int i = 1; i <= 10; i++) {\n\tdoSomething();\n}\n\n// Reverse loop\nfor (int i = 10; i >= 1; i--) {\n\tdoSomething();\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Color Property to Cube Creation Function - Luau\nDESCRIPTION: Updates the `makeCube()` function to set the `Color` property of the newly created `Part`. It assigns the value of the `currentColor` variable, which is expected to be defined and updated outside this function, typically by the calling code.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-4/nested-loops.md#_snippet_4\n\nLANGUAGE: Luau\nCODE:\n```\nlocal function makeCube()\n  local cube = Instance.new(\"Part\")\n  cube.Size = Vector3.new(CUBE_SIZE, CUBE_SIZE, CUBE_SIZE)\n  cube.Color = currentColor\nend\n```\n\n----------------------------------------\n\nTITLE: Function Returning Multiple Values with Typed Return Tuple in Luau Lua\nDESCRIPTION: Defines a function 'FindSource' with typed parameters and a return type as a tuple. This snippet attempts to return mismatched types demonstrating the typechecker error for invalid return types. Useful for functions that naturally return multiple values.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/type-checking.md#_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nlocal function FindSource(script: BaseScript, pattern: string): (string, number)\n\treturn 42, true  -- Type errors\nend\n```\n\n----------------------------------------\n\nTITLE: Checking if MerchBooth is Open and Getting Item ID - Lua\nDESCRIPTION: Retrieves the open state of the merch booth UI, including the itemId if in the item view, using isMerchBoothOpen. Successful operation depends on prior item registration and view navigation. Requires MerchBooth module, should be used in a LocalScript, and outputs two values: a boolean (open status) and number (itemId).\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/merch-booth.md#_snippet_28\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal MerchBooth = require(ReplicatedStorage:WaitForChild(\"MerchBooth\"))\n\nlocal success, errorMessage = pcall(function()\n\tMerchBooth.addItemAsync(4819740796)\nend)\nif success then\n\tMerchBooth.openItemView(4819740796)\n\n\tlocal isOpen, itemId = MerchBooth.isMerchBoothOpen()\n\tprint(isOpen, itemId)\nend\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Light and Part Variables in Roblox Lua\nDESCRIPTION: Sets references to the lamp part and the attached light object, enabling control over properties like brightness. This snippet establishes essential variables for manipulating the light in subsequent scripts. Dependencies include the script being a child of the lamp part containing a PointLight or SpotLight.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-4/glow-lights-with-for-loops.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal lightPart = script.Parent\nlocal light = lightPart.SpotLight\n```\n\n----------------------------------------\n\nTITLE: Populating and Paging Through Roblox Ordered Data Store Sorted Results in Lua\nDESCRIPTION: This snippet demonstrates adding multiple key-value pairs representing characters and their ages into an ordered data store, then retrieving and iterating over paginated sorted results using GetSortedAsync with descending order. It includes error handling with pcall for SetAsync and GetSortedAsync calls. The snippet loops through pages, printing character names and ages per page, advancing through pages until completion. This method supports ranking or leaderboard functionality with ordered data stores.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud-services/data-stores/index.md#_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\nlocal DataStoreService = game:GetService(\"DataStoreService\")\n\nlocal characterAgeStore = DataStoreService:GetOrderedDataStore(\"CharacterAges\")\n\n-- Populates ordered data store\nlocal characters = {\n\tMars = 19,\n\tJanus = 20,\n\tDiana = 18,\n\tVenus = 25,\n\tNeptune = 62\n}\nfor char, age in characters do\n\tlocal success, errorMessage = pcall(function()\n\t\tcharacterAgeStore:SetAsync(char, age)\n\tend)\n\tif not success then\n\t\tprint(errorMessage)\n\tend\nend\n\n-- Sorts data by descending order into pages of three entries each\nlocal success, pages = pcall(function()\n\treturn characterAgeStore:GetSortedAsync(false, 3)\nend)\nif success then\n\twhile true do\n\t\t-- Gets the current (first) page\n\t\tlocal entries = pages:GetCurrentPage()\n\t\t-- Iterates through all key-value pairs on page\n\t\tfor _, entry in entries do\n\t\t\tprint(entry.key .. \" : \" .. tostring(entry.value))\n\t\tend\n\t\t-- Checks if last page has been reached\n\t\tif pages.IsFinished then\n\t\t\tbreak\n\t\telse\n\t\t\tprint(\"----------\")\n\t\t\t-- Advances to next page\n\t\t\tpages:AdvanceToNextPageAsync()\n\t\tend\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Rebind ContextActionService Action for Context-Specific Behavior in Lua\nDESCRIPTION: Demonstrates how to change the behavior of an existing \"Interact\" button based on context by rebinding the action to a different function (`collectTreasure`). It uses the same input bindings but updates the button's title to \"Collect\" and sets its position, showing how a single button can perform different actions in different scenarios. Requires `ContextActionService`, the associated inputs, and the new target function.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/input/mobile.md#_snippet_4\n\nLANGUAGE: Lua\nCODE:\n```\nlocal ContextActionService = game:GetService(\"ContextActionService\")\n\nlocal function collectTreasure(actionName, inputState, inputObject)\n\tif inputState == Enum.UserInputState.Begin then\n\t\tprint(\"Collect treasure\")\n\tend\nend\n\nContextActionService:BindAction(\"Interact\", collectTreasure, true, Enum.KeyCode.T, Enum.KeyCode.ButtonR1)\nContextActionService:SetTitle(\"Interact\", \"Collect\")\nContextActionService:SetPosition(\"Interact\", UDim2.new(1, -70, 0, 10))\n```\n\n----------------------------------------\n\nTITLE: Data Validation - Luau\nDESCRIPTION: This code snippet demonstrates how to use `RemoteFunction` and data validation to secure an in-experience shop. It shows how an exploiter could try to bypass validation using a crafted payload and how the server correctly rejects the spoofed data.  The `LocalScript` creates a malicious payload and an actual item, invoking the server with each. The server script checks if the item is a valid instance descendant of a known data location to prevent exploitation.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/scripting/security/security-tactics.md#_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal itemDataFolder = ReplicatedStorage:WaitForChild(\"ItemData\")\nlocal buyItemEvent = ReplicatedStorage:WaitForChild(\"BuyItemEvent\")\nlocal payload = {\n\tName = \"Ultra Blade\",\n\tClassName = \"Folder\",\n\tParent = itemDataFolder,\n\tPrice = {\n\t\tName = \"Price\",\n\t\tClassName = \"NumberValue\",\n\t\tValue = 0, -- Negative values could also be used, resulting in giving currency rather than taking it!\n\t},\n}\n\n-- Send malicious payload to the server (this will be rejected)\nprint(buyItemEvent:InvokeServer(payload))  -- Outputs \"false Invalid item provided\"\n\n-- Send a real item to the server (this will go through!)\nprint(buyItemEvent:InvokeServer(itemDatafolder[\"Real Blade\"]))  -- Outputs \"true\" and remaining currency if purchase succeeds\n```\n\nLANGUAGE: Lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal itemDataFolder = ReplicatedStorage:WaitForChild(\"ItemData\")\nlocal buyItemEvent = ReplicatedStorage:WaitForChild(\"BuyItemEvent\")\n\nlocal function buyItem(player, item)\n\t-- Check if the passed item isn't spoofed and is in the ItemData folder\n\tif typeof(item) ~= \"Instance\" or not item:IsDescendantOf(itemDataFolder) then\n\t\treturn false, \"Invalid item provided\"\n\tend\n\n\t-- The server can then go on to process the purchase based on the example flow below\nend\n\n-- Bind \"buyItem()\" to the remote function's callback\nbuyItemEvent.OnServerInvoke = buyItem\n```\n\n----------------------------------------\n\nTITLE: Scripting Elevator Movement using ProximityPrompt - Lua\nDESCRIPTION: This Lua script controls the elevator's movement based on the user's interaction with a proximity prompt. It retrieves the platform and prismatic constraint from the script's parent. When the proximity prompt is triggered, it checks the current position of the platform. If the platform is below -9 studs, it moves it upwards to 10 studs. If it is above 9 studs, it moves it downwards to -10 studs. Requires a ProximityPrompt object and a PrismaticConstraint object in the scene. The script listens for the Triggered event of the ProximityPrompt.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/physics/create-elevators.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal platform = script.Parent.Platform\nlocal prismaticConstraint = script.Parent.Track.PrismaticConstraint\n\nplatform.ProximityPrompt.Triggered:Connect(function(player)\n\tprint(prismaticConstraint.CurrentPosition)\n\tif prismaticConstraint.CurrentPosition <= -9 then\n\t\tprismaticConstraint.TargetPosition = 10\n\telseif prismaticConstraint.CurrentPosition >= 9 then\n\t\tprismaticConstraint.TargetPosition = -10\n\tend\nend)\n```\n\n----------------------------------------\n\nTITLE: Basic Module Script Structure in Lua\nDESCRIPTION: The fundamental structure of a ModuleScript in Roblox, which creates and returns an empty table that can be populated with functions or data.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/scripting/module.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal module = {}\n\nreturn module\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Callbacks with BindableFunctions in Lua\nDESCRIPTION: Illustrates defining and invoking a custom callback using `BindableFunction`. One script defines a function (`addTwoNumbers`) and assigns it to the `BindableFunction.OnInvoke` property. Another script calls this function synchronously using `Invoke`, passing arguments (2, 4). The invoking script yields until the callback completes and returns a value (6), which is then printed. Requires a `BindableFunction` instance named \"TestBindableFunction\" in `ServerScriptService`.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/scripting/events/bindable.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal ServerScriptService = game:GetService(\"ServerScriptService\")\n\n-- Get reference to bindable function\nlocal bindableFunction = ServerScriptService:WaitForChild(\"TestBindableFunction\")\n\n-- Callback function\nlocal function addTwoNumbers(a, b)\n\treturn a + b\nend\n\n-- Set function as bindable function's callback\nbindableFunction.OnInvoke = addTwoNumbers\n```\n\nLANGUAGE: lua\nCODE:\n```\nlocal ServerScriptService = game:GetService(\"ServerScriptService\")\n\n-- Get reference to bindable function\nlocal bindableFunction = ServerScriptService:WaitForChild(\"TestBindableFunction\")\n\n-- Invoke callback function and output returned value\nlocal sum = bindableFunction:Invoke(2, 4)\nprint(sum)  --> 6\n```\n\n----------------------------------------\n\nTITLE: Template for Adding Passes (empty items list, requires type) (Lua)\nDESCRIPTION: A blank-pass template script showing the structure for adding one or more passes to the MerchBooth using addItemAsync with Enum.InfoType.GamePass. Script is intended to be completed by the user by adding pass IDs to the items table. Designed for deployment in ServerScriptService; leverages Lua pcall for error handling.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/merch-booth.md#_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal MerchBooth = require(ReplicatedStorage:WaitForChild(\"MerchBooth\"))\n\nlocal items = {\n\n}\n\nfor _, assetId in items do\n\tlocal success, errorMessage = pcall(function()\n\t\tMerchBooth.addItemAsync(assetId, Enum.InfoType.GamePass)\n\tend)\n\tif not success then\n\t\twarn(errorMessage)\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Animating Texture Properties with TweenService in Lua\nDESCRIPTION: This Lua script demonstrates how to use Roblox's TweenService to animate the properties of two different Texture objects. It retrieves TweenService and two texture instances, defines TweenInfo configurations for each, creates Tween objects targeting specific texture properties (OffsetStudsV, OffsetStudsU, StudsPerTileU, StudsPerTileV), and then plays the tweens to create a continuous animation effect.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/parts/textures-decals.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal TweenService = game:GetService(\"TweenService\")\n\nlocal texture1 = script.Parent.Texture1\nlocal texture2 = script.Parent.Texture2\n\nlocal tweenInfo1 = TweenInfo.new(8, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut, -1)\nlocal tween1 = TweenService:Create(texture1, tweenInfo1, {OffsetStudsV=50})\nlocal tweenInfo2 = TweenInfo.new(7, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut, -1, true)\nlocal tween2 = TweenService:Create(texture2, tweenInfo2, {OffsetStudsU=50, StudsPerTileU=55, StudsPerTileV=45})\n\ntween1:Play()\ntween2:Play()\n```\n\n----------------------------------------\n\nTITLE: Handling Tool Activation Without Sound Playback in Roblox Lua\nDESCRIPTION: This Lua snippet defines the toolActivated function, which checks if the weapon can be fired and then calls fireWeapon. It is written for a Roblox ToolController script and specifically omits playing the Activate sound, following instructions to move sound effects to a more appropriate location. Requires: Definitions for canShootWeapon and fireWeapon.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/scripting/intermediate-scripting/hit-detection-with-lasers.md#_snippet_22\n\nLANGUAGE: Lua\nCODE:\n```\nlocal function toolActivated()\n\tif canShootWeapon() then\n\t\tfireWeapon()\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: SessionLockedDataStoreWrapper: Roblox DataStore Wrapper with Atomic Session Locking in Lua\nDESCRIPTION: A meta-wrapper enhancing DataStoreWrapper to include session locking feature, preventing simultaneous data loads for the same player across servers. It enforces atomic read-modify-write operations within UpdateAsync, manages lock acquisition and release via GUIDs, and includes mechanisms to verify lock validity based on metadata. It relies on explicit unlocks during PlayerRemoving or BindToClose and offers a refreshLockAsync method for maintaining locks.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud-services/data-stores/player-data-purchasing.md#_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\n-- Placeholder for SessionLockedDataStoreWrapper class implementation code (not provided in text).\n```\n\n----------------------------------------\n\nTITLE: Calculating Direction Vector in Lua\nDESCRIPTION: This snippet calculates the direction vector by multiplying the normalized `targetDirection` with the `MAX_LASER_DISTANCE`. This results in a vector representing the direction and maximum range of the laser.  It relies on `targetDirection` and `MAX_LASER_DISTANCE` being defined.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/scripting/intermediate-scripting/hit-detection-with-lasers.md#_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nlocal targetDirection = (mouseLocation - tool.Handle.Position).Unit\n\n-- The direction to fire the weapon, multiplied by a maximum distance\nlocal directionVector = targetDirection * MAX_LASER_DISTANCE\n```\n\n----------------------------------------\n\nTITLE: Managing Player State and UI Layers in Roblox Lua\nDESCRIPTION: This Lua snippet implements state-dependent UI and control logic for a Roblox player. It defines functions to enable or disable certain ScreenGui layers, toggle player movement and camera controls, and set player attributes for blaster state and player state. The functions respond to player state changes such as selecting equipment, playing, being in a tagged-out state, or being in the lobby. Dependencies include references to localPlayer, PlayerAttribute, BlasterState, togglePlayerCamera, and togglePlayerMovement functions. Inputs primarily involve player state strings and outputs are side-effect based, updating GUI visibility and player properties; no values are returned. Limitations may arise if referenced modules or services are not defined, and hardcoded GUI names must align with the actual hierarchy.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/user-interface-design/implement-designs-in-studio.md#_snippet_20\n\nLANGUAGE: Lua\nCODE:\n```\nlocal playerGui = localPlayer.PlayerGui\nlocal guiLayers = {\n\tplayerGui:WaitForChild(\"HUDGui\"),\n\tplayerGui:WaitForChild(\"OutStateGui\"),\n\tplayerGui:WaitForChild(\"PickABlasterGui\"),\n}\n\n-- Disable all UI Layers except the given exception\nlocal function setGuiExclusivelyEnabled(enabledGui: ScreenGui?)\n\t-- guiLayers contains a list of the guis that should be set exclusively.\n\tfor _, screenGui in guiLayers do\n\t\tscreenGui.Enabled = screenGui == enabledGui\n\tend\nend\n\nlocal function onSelectingBlaster()\n\t-- Enable the camera so players can look around while selecting a blaster\n\ttogglePlayerCamera(true)\n\ttogglePlayerMovement(false)\n\tsetGuiExclusivelyEnabled(playerGui.PickABlasterGui)\n\n\t-- Disable blaster while selecting a blaster\n\tlocalPlayer:SetAttribute(PlayerAttribute.blasterStateClient, BlasterState.Disabled)\nend\n\nlocal function onPlaying()\n\t-- Enable player movement after picking a blaster\n\ttogglePlayerMovement(true)\n\tsetGuiExclusivelyEnabled(playerGui.HUDGui)\n\n\t-- Enable blaster while playing\n\tlocalPlayer:SetAttribute(PlayerAttribute.blasterStateClient, BlasterState.Ready)\n\n\t-- Schedule the destroy force field logic when the player begins playing\n\tscheduleDestroyForceField()\nend\n\nlocal function onTaggedOut()\n\t-- Disable controls while tagged out\n\ttogglePlayerMovement(false)\n\ttogglePlayerCamera(false)\n\tsetGuiExclusivelyEnabled(playerGui.OutStateGui)\n\n\t-- Disable blaster while tagged out\n\tlocalPlayer:SetAttribute(PlayerAttribute.blasterStateClient, BlasterState.Disabled)\nend\n\nlocal function onInLobby()\n\t-- Enable controls while in the lobby\n\ttogglePlayerMovement(true)\n\ttogglePlayerCamera(true)\n\n\t-- Hide all HUD while in the lobby\n\tsetGuiExclusivelyEnabled(nil)\n\n\t-- Disable blaster while in the lobby\n\tlocalPlayer:SetAttribute(PlayerAttribute.blasterStateClient, BlasterState.Disabled)\nend\n\nlocal function onPlayerStateChanged(newPlayerState: string)\n\tif newPlayerState == PlayerState.SelectingBlaster then\n\t\tonSelectingBlaster()\n\telseif newPlayerState == PlayerState.Playing then\n\t\tonPlaying()\n\telseif newPlayerState == PlayerState.TaggedOut then\n\t\tonTaggedOut()\n\telseif newPlayerState == PlayerState.InLobby then\n\t\tonInLobby()\n\telse\n\t\twarn(`Invalid player state ({newPlayerState})`)\n\tend\nend\n\n-- Handle the initial player state if set\nlocal initialPlayerState = localPlayer:GetAttribute(PlayerAttribute.playerState)\nonPlayerStateChanged(initialPlayerState)\n\nlocal function updateFromPlayerState()\n\tonPlayerStateChanged(localPlayer:GetAttribute(PlayerAttribute.playerState))\nend\n\n-- Handle future player state updates\nlocalPlayer:GetAttributeChangedSignal(PlayerAttribute.playerState):Connect(updateFromPlayerState)\n\n-- Make sure changes are still applied after respawning\nlocalPlayer.CharacterAdded:Connect(updateFromPlayerState)\n```\n\n----------------------------------------\n\nTITLE: Implementing Set Union in Lua\nDESCRIPTION: Implements a set union operation using the __add metamethod, allowing sets to be combined with the + operator. The function returns a new set containing all items from both input sets without duplicates.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/metatables.md#_snippet_18\n\nLANGUAGE: lua\nCODE:\n```\nfunction Set:__add(otherSet)\n\tlocal result = Set.new()\n\tfor entry in self do\n\t\tresult[entry] = true\n\tend\n\tfor entry in otherSet do\n\t\tresult[entry] = true\n\tend\n\treturn result\nend\n\nlocal sweetFruits = Set.new({\"Apple\", \"Mango\", \"Cherry\", \"Peach\"})\nlocal sourFruits = Set.new({\"Lemon\", \"Lime\"})\n\nlocal allFruits = sweetFruits + sourFruits\nallFruits:output() -- Peach, Lime, Apple, Cherry, Lemon, Mango\n```\n\n----------------------------------------\n\nTITLE: Implementing Server Logic for Jump Power Upgrades in Roblox with Lua\nDESCRIPTION: This Lua script manages server-side handling of jump power upgrades by validating coin availability, updating player data, and adjusting leaderboards. It uses services like ReplicatedStorage, ServerStorage, Players, and expects PlayerData and Leaderboard modules in ServerStorage as dependencies. Key parameters include the jump power increment, coin cost, and player objects. Inputs are remote function invocations from the client; outputs are Boolean upgrade results and updated player attributes on success. The code should run in ServerScriptService and requires the appropriate RemoteFunction, as well as GUI and data setup as described in preceding steps.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/core/scripting/script-an-upgrade-button.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n-- Services\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal ServerStorage = game:GetService(\"ServerStorage\")\nlocal Players = game:GetService(\"Players\")\n\n-- Modules\nlocal Leaderboard = require(ServerStorage.Leaderboard)\nlocal PlayerData = require(ServerStorage.PlayerData)\n\n-- Events\nlocal IncreaseJumpPowerFunction = ReplicatedStorage.Instances.IncreaseJumpPowerFunction\n\nlocal JUMP_KEY_NAME = PlayerData.JUMP_KEY_NAME\nlocal COIN_KEY_NAME = PlayerData.COIN_KEY_NAME\nlocal JUMP_POWER_INCREMENT = 30\nlocal JUMP_COIN_COST = 5\n\nlocal function updateJumpPower(player, updateFunction)\n\t-- Update the jump power table\n\tlocal newJumpPower = PlayerData.updateValue(player, JUMP_KEY_NAME, updateFunction)\n\n\t-- Update the players jump power\n\tlocal character = player.Character or player.CharacterAdded:Wait()\n\tlocal humanoid = character:FindFirstChildWhichIsA(\"Humanoid\")\n\tif humanoid then\n\t\thumanoid.JumpPower = newJumpPower\n\n\t\t-- Update the jump leaderboard\n\t\tLeaderboard.setStat(player, JUMP_KEY_NAME, newJumpPower)\n\tend\nend\n\nlocal function onPurchaseJumpIncrease(player)\n\tlocal coinAmount = PlayerData.getValue(player, COIN_KEY_NAME)\n\tif coinAmount < JUMP_COIN_COST then\n\t\treturn false\n\tend\n\n\t-- Increase player's jump power\n\tupdateJumpPower(player, function(oldJumpPower)\n\t\toldJumpPower = oldJumpPower or 0\n\t\treturn oldJumpPower + JUMP_POWER_INCREMENT\n\tend)\n\t-- Update the coin table\n\tlocal newCoinAmount = PlayerData.updateValue(player, COIN_KEY_NAME, function(oldCoinAmount)\n\t\treturn oldCoinAmount - JUMP_COIN_COST\n\tend)\n\t-- Update the coin leaderboard\n\tLeaderboard.setStat(player, COIN_KEY_NAME, newCoinAmount)\n\treturn true\nend\n\nlocal function onCharacterAdded(player)\n\t-- Reset player's jump power when the character is added\n\tupdateJumpPower(player, function(_)\n\t\treturn 0\n\tend)\nend\n\n-- Initialize any players added before connecting to PlayerAdded event\nfor _, player in Players:GetPlayers() do\n\tonCharacterAdded(player)\nend\n\n-- Normal initialization of players from PlayerAdded event\nlocal function onPlayerAdded(player)\n\tplayer.CharacterAdded:Connect(function()\n\t\tonCharacterAdded(player)\n\tend)\nend\n\nlocal function onPlayerRemoved(player)\n\tupdateJumpPower(player, function(_)\n\t\treturn nil\n\tend)\nend\n\nIncreaseJumpPowerFunction.OnServerInvoke = onPurchaseJumpIncrease\nPlayers.PlayerAdded:Connect(onPlayerAdded)\nPlayers.PlayerRemoving:Connect(onPlayerRemoved)\n\n```\n\n----------------------------------------\n\nTITLE: Managing Player Tutorial Progress and Goals in Roblox (Lua ModuleScript)\nDESCRIPTION: This ModuleScript defines a TutorialManager object that handles tracking player progress through tutorial goals, interaction with goal objects, and finalization of the tutorial. It provides functions to check progress, update goal indices, and manage tutorial completion, relying on in-game objects and events stored in ReplicatedStorage.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/build-it-play-it-mansion-of-wonder/adding-scripts.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal TutorialManager = {}\n\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal tutorialFolder = ReplicatedStorage:WaitForChild(\"PlayerTutorial\")\nlocal TutorialEndEvent = tutorialFolder:WaitForChild(\"TutorialEnd\")\nlocal NextGoalEvent = tutorialFolder:WaitForChild(\"NextGoal\")\n\n-- Note Goal parts must be ordered in the table, or else Goal order may be different in-game\nlocal goalParts = {\n workspace.TutorialGoals.GoalPart1,\n workspace.TutorialGoals.GoalPart2\n}\n\nlocal function checkTutorialEnd(player, goalParts)\n local currentIndex = player:WaitForChild(\"GoalProgress\")\n return currentIndex.Value >= #goalParts\nend\n\nlocal function finishTutorial(player)\n local playerBeam = player.Character.HumanoidRootPart:FindFirstChildOfClass(\"Beam\")\n playerBeam:Destroy()\n\n print(player.Name .. \" finished the tutorial\")\n\n -- Placeholder for further code. E.g. if you wanted to send messages to the server to do other tasks\nend\n\nfunction TutorialManager.interactGoal(player)\n NextGoalEvent:FireServer()\nend\n\nfunction TutorialManager.getTutorialGoals()\n return goalParts\nend\n\nfunction TutorialManager.nextGoal(player, goalParts)\n if checkTutorialEnd(player, goalParts) then\n  finishTutorial(player)\n else\n  -- Increment the player's Goal tracker\n  local currentGoalIndex = player:WaitForChild(\"GoalProgress\")\n  currentGoalIndex.Value += 1\n end\nend\n\n-- Creates an int value to locally track player's progress through the tutorial Goals\nfunction TutorialManager.setupPlayerProgress(player)\n local currentGoalProgress = Instance.new(\"IntValue\")\n currentGoalProgress.Name = \"GoalProgress\"\n currentGoalProgress.Value = 1\n currentGoalProgress.Parent = player\nend\n\nreturn TutorialManager\n```\n\n----------------------------------------\n\nTITLE: Defining and Calling Methods within Luau Tables\nDESCRIPTION: Shows how to define a method (`changeEnabled`) within a Luau table (`testButton`). The method uses the `self` parameter to refer to the table it belongs to and modify its properties. The example demonstrates calling this method using colon notation to update the `enabled` property.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/functions.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal testButton = {\n\tenabled = true,\n\tchangeEnabled = function(self, isEnabled)\n\t\tself.enabled = isEnabled\n\t\tprint(self.enabled)\n\tend\n}\n\nprint(testButton.enabled) -- true\n-- Call the method\ntestButton:changeEnabled(false) -- false\n```\n\n----------------------------------------\n\nTITLE: Creating and Playing VideoFrame on a SurfaceGui in Roblox Lua\nDESCRIPTION: This Lua snippet demonstrates how to programmatically create a Part in the game world, attach a SurfaceGui to it, and add a VideoFrame to display and play a video asset with looping enabled. The VideoFrame waits asynchronously until the video content is fully loaded before playback begins. Key dependencies include Roblox's built-in game services and instances like Workspace, Instance.new, and the VideoFrame class. The video asset is specified by its asset ID string and requires valid asset permissions and correct video formatting. The Part is anchored in space, sized in a 16:9 ratio to suit most video formats, and oriented to face the player. This snippet is intended to be run inside a Script located in ServerScriptService or similar server-side context.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/ui/video-frames.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal screenPart = Instance.new(\"Part\")\nscreenPart.Size = Vector3.new(16, 9, 1)\nscreenPart.Position = Vector3.new(0, 8, -20)\nscreenPart.Orientation = Vector3.new(0, 180, 0)\nscreenPart.Anchored = true\nscreenPart.Parent = Workspace\n\nlocal surfaceGui = Instance.new(\"SurfaceGui\")\nsurfaceGui.Parent = screenPart\n\nlocal videoFrame = Instance.new(\"VideoFrame\")\nvideoFrame.Size = UDim2.new(1, 0, 1, 0)\nvideoFrame.Parent = surfaceGui\n\nvideoFrame.Looped = true\nvideoFrame.Video = \"rbxassetid://5608384572\"  -- Replace with your video's asset ID\n\nwhile not videoFrame.IsLoaded do\n\tvideoFrame.Loaded:Wait()\nend\n\nvideoFrame:Play()\n```\n\n----------------------------------------\n\nTITLE: Verifying Supported Gamepad Inputs with UserInputService in Lua\nDESCRIPTION: Shows how to retrieve and list the supported inputs of a specific gamepad using the GetSupportedGamepadKeyCodes() method on UserInputService. The snippet queries the available controls of a given gamepad (e.g., Gamepad2) and prints each supported input. This requires an understanding of Enum.UserInputType and helps ensure input compatibility across different gamepad devices.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/input/gamepad.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal UserInputService = game:GetService(\"UserInputService\")\n\nlocal availableInputs = UserInputService:GetSupportedGamepadKeyCodes(Enum.UserInputType.Gamepad2)\n\nprint(\"This controller supports the following controls:\")\nfor _, control in availableInputs do\n\tprint(control)\nend\n```\n\n----------------------------------------\n\nTITLE: Validating Hit Proximity in Server-Side Lua Function\nDESCRIPTION: This function calculates the distance between the hit character's HumanoidRootPart and hitPosition using Magnitude, ensuring it does not exceed MAX_HIT_PROXIMITY. If validation fails, it returns false early. Expects: Non-nil characterToDamage with HumanoidRootPart, hitPosition as a Vector3, and MAX_HIT_PROXIMITY defined.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/scripting/intermediate-scripting/hit-detection-with-lasers.md#_snippet_28\n\nLANGUAGE: Lua\nCODE:\n```\nlocal function isHitValid(playerFired, characterToDamage, hitPosition)\n\t-- Validate distance between the character hit and the hit position\n\tlocal characterHitProximity = (characterToDamage.HumanoidRootPart.Position - hitPosition).Magnitude\n\tif characterHitProximity > MAX_HIT_PROXIMITY then\n\t\treturn false\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Aborting MemoryStoreSortedMap Update Request in Lua\nDESCRIPTION: This Lua code demonstrates using the callback function within `MemoryStoreSortedMap:UpdateAsync` to conditionally update an item and potentially abort the update, helping manage `DataUpdateConflict` errors. The example shows a bidding scenario where the update only proceeds if the new bid is higher than the existing highest bid; otherwise, it returns `nil` to abort the update. It utilizes `MemoryStoreService:GetSortedMap` and the `UpdateAsync` method with a callback function and an expiration time.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud-services/memory-stores/index.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal MemoryStoreService = game:GetService(\"MemoryStoreService\")\nlocal map = MemoryStoreService:GetSortedMap(\"AuctionItems\")\n\nfunction placeBid(itemKey, bidAmount)\n    map:UpdateAsync(itemKey, function(item)\n        item = item or { highestBid = 0 }\n        if item.highestBid < bidAmount then\n            item.highestBid = bidAmount\n            return item\n        end\n        print(\"item is \"..item.highestBid)\n        return nil\n    end, 1000)\nend\n\nplaceBid(\"MyItem\", 50)\nplaceBid(\"MyItem\", 40)\nprint(\"done\")\n```\n\n----------------------------------------\n\nTITLE: Finding the HumanoidRootPart in Lua\nDESCRIPTION: Within the `updateCamera` function, this snippet finds the `HumanoidRootPart` within the character model using `FindFirstChild` and checks for its existence. The `HumanoidRootPart` is commonly used as the anchor point for camera calculations.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/input-and-camera/control-the-users-camera.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nlocal player = Players.LocalPlayer\n\nlocal function updateCamera()\n    local character = player.Character\n    if character then\n        local root = character:FindFirstChild(\"HumanoidRootPart\")\n        if root then\n\n        end\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Forwarding Arguments Using Wrapper Functions in Lua\nDESCRIPTION: Defines a wrapper function, printAround, that takes another function and a variable number of arguments, allowing pre- and post-processing around a function call. Dependencies include a basic knowledge of variadic function syntax (...). The parameter functionToPrintAround is any callable function which will be invoked with the forwarded arguments; the additional arguments are passed through via ... to the underlying function. The output is a print sequence showing pre- and post-call messages and the results of the wrapped function. This approach enables decorator-like functionality in Lua.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/functions.md#_snippet_11\n\nLANGUAGE: lua\nCODE:\n```\nlocal function printAround(functionToPrintAround, ...)\n\tprint(\"Before\")\n\tfunctionToPrintAround(...)\n\tprint(\"After\")\nend\n\nlocal function addNumbers(x, y, z)\n\tprint(\"x =\", x)\n\tprint(\"y + z =\", y + z)\nend\n\nprintAround(addNumbers, 1, 2, 3)\n--[[ Resulting output:\nBefore\nx = 1\ny + z = 5\nAfter\n]]\n```\n\n----------------------------------------\n\nTITLE: Tweening CanvasGroup GroupTransparency in Roblox Lua\nDESCRIPTION: Fades the transparency of all child UI elements collectively by tweening the GroupTransparency property of a CanvasGroup. This approach simplifies simultaneous opacity changes for grouped elements. Requires a CanvasGroup instance as well as TweenService and Players; input is the group transparency target value (0-1).\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/ui/animation.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal TweenService = game:GetService(\"TweenService\")\nlocal Players = game:GetService(\"Players\")\n\nlocal PlayerGui = Players.LocalPlayer:WaitForChild(\"PlayerGui\")\nlocal ScreenGui = PlayerGui:WaitForChild(\"ScreenGui\")\nlocal canvasGroup = ScreenGui:WaitForChild(\"CanvasGroup\")\n\nlocal targetTransparency = 0.8\n\nlocal tweenInfo = TweenInfo.new(2)\nlocal tween = TweenService:Create(canvasGroup, tweenInfo, {GroupTransparency = targetTransparency})\n\ntween:Play()\n```\n\n----------------------------------------\n\nTITLE: Implementing Scripted Drag Permission with DragDetector\nDESCRIPTION: Configures a DragDetector with scriptable permission policy that determines dragging eligibility based on player and part attributes. This allows for dynamic control over which players can interact with specific objects.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/ui/3D-drag-detectors.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal dragDetector = script.Parent.DragDetector\ndragDetector.PermissionPolicy = Enum.DragDetectorPermissionPolicy.Scriptable\n\ndragDetector:SetPermissionPolicyFunction(function(player, part)\n\tif player and player:GetAttribute(\"IsInTurn\") then\n\t\treturn true\n\telseif part and not part:GetAttribute(\"IsDraggable\") then\n\t\treturn false\n\telse\n\t\treturn true\n\tend\nend)\n```\n\n----------------------------------------\n\nTITLE: Generic Function Definition with Type Parameters in Luau Lua\nDESCRIPTION: Defines a generic function 'State<T>' that infers the generic parameter 'T' from argument types. Returns a 'State<T>' object, enabling creation of typed state descriptors with automatic type inference based on function input arguments.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/type-checking.md#_snippet_21\n\nLANGUAGE: lua\nCODE:\n```\nlocal function State<T>(key: string, value: T): State<T>\n\treturn {\n\t\tKey = key,\n\t\tValue = value\n\t}\nend\n\nlocal Activated = State(\"Activated\", false)  -- State<boolean>\nlocal TimesClicked = State(\"TimesClicked\", 0)  -- State<number>\n```\n\n----------------------------------------\n\nTITLE: Adjusting Beam Visuals: Color, LightEmission, and TextureSpeed\nDESCRIPTION: This snippet discusses customizing the visual appearance of the beam by modifying properties such as Color, LightEmission, and TextureSpeed to create attractive and attention-grabbing effects, with a sample media demonstrating the result.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/build-it-play-it-mansion-of-wonder/connect-the-beam.md#_snippet_5\n\nLANGUAGE: None\nCODE:\n```\nChange properties like Color, LightEmission, and TextureSpeed in the beam's settings.\nPreview the effects using attached videos or images to ensure desired visual appeal.\n```\n\n----------------------------------------\n\nTITLE: Categorical Signal Example (Clustering) in Lua\nDESCRIPTION: This is a concrete example illustrating the clustering signal calculation. It utilizes specific values for `num_players_same_Guild` and `occupancy` to calculate the final `score`. This provides a practical illustration of how to apply the formula to real data within the game environment.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/matchmaking/attributes-and-signals.md#_snippet_16\n\nLANGUAGE: lua\nCODE:\n```\nlocal num_players_same_Guild = 15\nlocal occupancy = 19\n\nlocal score = num_players_same_Guild / occupancy\nreturn score\n```\n\n----------------------------------------\n\nTITLE: Event Connection in Roblox Lua\nDESCRIPTION: This snippet demonstrates how to connect a Lua function to a Roblox BindableEvent, enabling the function to be invoked whenever the event fires. It retrieves the BindableEvent named 'TestBindableEvent' from the ServerScriptService and links the onEvent callback to its Event. The callback prints the received parameter, illustrating event handling in Roblox. Dependencies include the Roblox game services and the specific BindableEvent instance.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/scripting/events/bindable.md#_snippet_5\n\nLANGUAGE: Lua\nCODE:\n```\nlocal ServerScriptService = game:GetService(\"ServerScriptService\")\n\nlocal bindableEvent = ServerScriptService:WaitForChild(\"TestBindableEvent\")\n\nlocal function onEvent(param)\n\tprint(param)  --> {[\"Name\"] = \"MyTruck\"}\nend\n\n-- Connect function to event\nbindableEvent.Event:Connect(onEvent)\n```\n\n----------------------------------------\n\nTITLE: Stopping Finish Repeats Luau\nDESCRIPTION: This snippet builds on the previous one by adding a condition to `partTouched()` to ensure that finish() is only called once. It utilizes the `raceActive` boolean variable to control whether the `finish()` function can be executed. Within the `partTouched` function, the code checks if the `humanoid` exists AND if `raceActive` is true before calling finish(). Inside finish(), `raceActive` is set to `false`.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-3/multiple-conditions.md#_snippet_6\n\nLANGUAGE: Luau\nCODE:\n```\nlocal function partTouched(otherPart)\n   local character = otherPart.Parent\n   local humanoid = character:FindFirstChildWhichIsA(\"Humanoid\")\n   if humanoid and raceActive == true then\n      finish()\n   end\n\nend\n```\n\n----------------------------------------\n\nTITLE: Initializing Discord Bot and Intents - Python\nDESCRIPTION: This code initializes a Discord client with specific intents. It sets the `message_content` intent to `True`, which allows the bot to read message content. Then, a `discord.Client` object is created and is used to interact with the Discord API.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/webhooks/automate-right-to-erasure.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n        intents.message_content = True\n        client = discord.Client(intents=intents)\n```\n\n----------------------------------------\n\nTITLE: Webhook Notification Payload Schema Example in JSON\nDESCRIPTION: Provides a sample JSON schema for the notification payload that Roblox sends when testing webhook responses. This schema includes a unique NotificationId, EventType of 'SampleNotification', an ISO 8601 timestamp for EventTime, and an EventPayload containing the UserId, which is a long integer. It serves as a template for developers to understand the data structure received by their webhook endpoints during integration and testing.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/webhooks/webhook-notifications.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"NotificationId\": \"string\",\n  \"EventType\": \"SampleNotification\",\n  \"EventTime\": \"2023-12-30T16:24:24.2118874Z\",\n  \"EventPayload\": {\n    \"UserId\": 1\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying 'Hello world!' Using Print in Luau\nDESCRIPTION: This snippet demonstrates the default code in a new Roblox script that uses the print function to display the string \"Hello world!\" in the Output window. It requires Roblox Studio with an active script editor. The code outputs a simple message, serving as an introduction to scripting syntax and output in Luau.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-1/create-a-script.md#_snippet_0\n\nLANGUAGE: Luau\nCODE:\n```\nprint(\"Hello world!\")\n```\n\n----------------------------------------\n\nTITLE: Preventing Repeated Finishes Luau\nDESCRIPTION: This code introduces a boolean `raceActive` to prevent the `finish()` function from being called multiple times when the player keeps touching the finish line. The if statement within `partTouched()` checks `raceActive` before calling `finish()`. Then, `raceActive` is set to false inside finish() to stop subsequent calls.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-3/multiple-conditions.md#_snippet_5\n\nLANGUAGE: Luau\nCODE:\n```\nlocal timePassed = 0\nlocal finishLine = script.Parent\n\nlocal raceActive = true\n\n-- Runs whenever the player touches the finish line part\nlocal function finish()\n```\n\n----------------------------------------\n\nTITLE: Combining Algorithms: Getting Dressed Example in Lua\nDESCRIPTION: This snippet illustrates how algorithms can be combined. It defines three Lua functions representing sub-algorithms ('pickClothes', 'putOnClothes') and a main algorithm ('getDressed') that calls the sub-algorithms in sequence. Although labeled 'Pseudocode', it uses valid Lua function syntax to demonstrate breaking down a complex task into smaller, manageable parts.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-6/coding-concept-algorithms.md#_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\n-- First algorithm for picking clothes\nlocal function pickClothes()\n    pick top clothing\n    pick bottom clothing\n    pick Socks\n    pick Shoes\nend\n\n-- Second algorithm for putting clothes on\n\nlocal function putOnClothes()\n    put on top clothing\n    put on bottom clothing\n    put on socks\n    put on shoes\nend\n\n-- Main algorithm, calls pickClothes()and putOnClothes()\nlocal function getDressed()\n    pickClothes()\n    putOnClothes()\nend\n```\n\n----------------------------------------\n\nTITLE: Luau TimeOfDay Assignment Type Coercion\nDESCRIPTION: This snippet showcases how Luau coerces numbers assigned to the `Class.Lighting.TimeOfDay` property (which expects a string in the format of a `Datatype.DateTime`). It demonstrates that when a number is assigned, Luau converts it to a string representation of the time. The example sets `TimeOfDay` to \"05:00:00\" and prints it, then assigns the number 5 and prints the result, demonstrating that the string representation is maintained.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/type-coercion.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal Lighting = game:GetService(\"Lighting\")\n\nLighting.TimeOfDay = \"05:00:00\"\nprint(Lighting.TimeOfDay) -- 05:00:00\n\nLighting.TimeOfDay = 5\nprint(Lighting.TimeOfDay) -- 05:00:00\n```\n\n----------------------------------------\n\nTITLE: Union and Intersection Types in Luau Lua\nDESCRIPTION: Exemplifies combining types with union (|) and intersection (&) operators. Defines 'numberOrString' as either number or string, 'type1and2' combining fields from two types. Demonstrates how type errors arise when values violate these combined contracts, enabling complex type logic.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/type-checking.md#_snippet_14\n\nLANGUAGE: lua\nCODE:\n```\ntype numberOrString = number | string\ntype type1 = {foo: string}\ntype type2 = {bar: number}\ntype type1and2 = type1 & type2  -- {foo: string} & {bar: number}\n\nlocal numString1: numberOrString = true  -- Type error\nlocal numString2: type1and2 = {foo = \"hello\", bar = 1}\n```\n\n----------------------------------------\n\nTITLE: Setting RemoteFunction Callback to Return Received Table and Print Identity - Lua\nDESCRIPTION: Illustrates the callback setup for a RemoteFunction on the server side which receives a player and a table argument, prints the table's memory address identity, and returns the same table back. This emphasizes that tables are copied by value, not reference. Requires a RemoteFunction to be present in ReplicatedStorage.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/scripting/events/remote.md#_snippet_14\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal remoteFunction = ReplicatedStorage:FindFirstChildOfClass(\"RemoteFunction\")\n\n-- Callback function\nlocal function returnTable(player, passedTable)\n\t-- Output table identity on invocation\n\tprint(tostring(passedTable))  --> table: 0x48eb7aead27563d9\n\treturn passedTable\nend\n\n-- Set function as remote function's callback\nremoteFunction.OnServerInvoke = returnTable\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Path with Agent Parameters - PathfindingService - Lua\nDESCRIPTION: Creates a path through PathfindingService specifying agent properties such as radius, height, and jump capabilities. A custom cost map is also provided as a Lua table, influencing traversal preference for certain materials (e.g., Water). Dependencies include 'PathfindingService' from the game environment. Expected input is an options table, and the output is a path object correctly set up for the agent's needs.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/characters/pathfinding.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal PathfindingService = game:GetService(\"PathfindingService\")\n\nlocal path = PathfindingService:CreatePath({\n\tAgentRadius = 3,\n\tAgentHeight = 6,\n\tAgentCanJump = false,\n\tCosts = {\n\t\tWater = 20\n\t}\n})\n```\n\n----------------------------------------\n\nTITLE: Rendering Client Laser - Luau\nDESCRIPTION: This Luau code shows the logic for rendering a laser beam on the client. It listens for the `LaserFired` RemoteEvent. The function `createPlayerLaser` takes the player who shot the laser, the tool handle (start position), and the end position as arguments. The code checks if the player who fired the laser is not the local player; if it is not, then the LaserRenderer module is used to create a laser beam. Dependencies: ReplicatedStorage, the `LaserFired` RemoteEvent, and the LaserRenderer module.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/scripting/intermediate-scripting/hit-detection-with-lasers.md#_snippet_21\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal LaserRenderer = require(script.Parent:WaitForChild(\"LaserRenderer\"))\n\nlocal eventsFolder = ReplicatedStorage.Events\n\n-- Display another player's laser\nlocal function createPlayerLaser(playerWhoShot, toolHandle, endPosition)\n    if playerWhoShot ~= Players.LocalPlayer then\n        LaserRenderer.createLaser(toolHandle, endPosition)\n    end\nend\n\neventsFolder.LaserFired.OnClientEvent:Connect(createPlayerLaser)\n```\n\n----------------------------------------\n\nTITLE: Concatenating Strings and Variables in Luau\nDESCRIPTION: This snippet illustrates concatenation in Luau by combining literals and variables into a single string output. It declares two local string variables, firstAnimal and secondAnimal, then uses print with the concatenation operator '..' to output a combined sentence. This example highlights how to build longer strings dynamically using variables and string literals.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-1/create-a-script.md#_snippet_4\n\nLANGUAGE: Luau\nCODE:\n```\nlocal firstAnimal = \"porcupines\"\nlocal secondAnimal = \"dolphins\"\n\nprint(\"I like \" .. firstAnimal .. \" and \" .. secondAnimal)\n```\n\n----------------------------------------\n\nTITLE: Adding Game Passes Asynchronously to Merch Booth (Lua)\nDESCRIPTION: Illustrates adding Game Passes to the Merch Booth from a server-side `Script`. It loops through a list of Game Pass asset IDs and calls `MerchBooth.addItemAsync`, specifying `Enum.InfoType.GamePass`. The call is wrapped in `pcall` for robust error handling, as recommended for asynchronous network operations.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/merch-booth.md#_snippet_15\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal MerchBooth = require(ReplicatedStorage:WaitForChild(\"MerchBooth\"))\n\nlocal items = {\n\t4343758, -- ColdFyre Armor\n\t28521575, -- Slime Shield\n}\n\nfor _, assetId in items do\n\tlocal success, errorMessage = pcall(function()\n\t\tMerchBooth.addItemAsync(assetId, Enum.InfoType.GamePass)\n\tend)\n\tif not success then\n\t\twarn(errorMessage)\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: bot_config.py\nDESCRIPTION: Defines configuration variables such as API keys, bot tokens, and dictionaries for standard and ordered Roblox data stores. Sets up mappings for data store entries to facilitate user data deletion based on start place IDs.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/webhooks/automate-right-to-erasure.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nBOT_TOKEN = \"\"\nOPEN_CLOUD_API_KEY = \"\"\nROBLOX_WEBHOOK_SECRET = \"\"\n\n# Dictionary of start place IDs to universe ID and data store entries for standard data stores\nSTANDARD_DATA_STORE_ENTRIES = {\n    111111111: (\n        222222222,\n        [\n            (\"StandardDataStore1\", \"Scope1\", \"Key1_{user_id}\"),\n            (\"StandardDataStore1\", \"Scope1\", \"Key2_{user_id}\"),\n            (\"StandardDataStore2\", \"Scope1\", \"Key3_{user_id}\")\n        ]\n    ),\n    33333333: (\n        444444444,\n        [\n            (\"StandardDataStore3\", \"Scope1\", \"Key1_{user_id}\")\n        ]\n    )\n}\n\n# Dictionary for ordered data store entries\nORDERED_DATA_STORE_ENTRIES = {\n    111111111: (\n        222222222,\n        [\n            (\"OrderedDataStore1\", \"Scope2\", \"Key4_{user_id}\")\n        ]\n    )\n}\n\n```\n\n----------------------------------------\n\nTITLE: Duplicating and Customizing Team Icons for Pink Team\nDESCRIPTION: This snippet explains how to duplicate the green team icon setup and modify properties such as background color and name to create a pink team icon, ensuring consistency and reusability of the UI components.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/user-interface-design/implement-designs-in-studio.md#_snippet_15\n\nLANGUAGE: Roblox Lua\nCODE:\n```\n<!-- No code provided; involves duplication and property modification for team icons -->\n```\n\n----------------------------------------\n\nTITLE: LocalScript - Sending Network Message\nDESCRIPTION: This LocalScript sends a network message to the server using the NetworkManagerClient module. It requires the NetworkManagerClient module from ReplicatedFirst and calls the FireServer function with an ID ('RequestA') and an optional argument ('Hello'). This script provides a simple example of how to use the encapsulated FireServer function.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/scripting/module.md#_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\n-- LocalScript in ReplicatedFirst\nlocal ReplicatedFirst = game:GetService(\"ReplicatedFirst\")\n\nlocal NetworkManagerClient = require(ReplicatedFirst:WaitForChild(\"NetworkManagerClient\"))\nNetworkManagerClient.FireServer(\"RequestA\", \"Hello\")\n\n```\n\n----------------------------------------\n\nTITLE: Check Vibration Support Using Roblox HapticService in Lua\nDESCRIPTION: This snippet demonstrates how to query if a specific gamepad (Gamepad1) supports vibration capabilities. It uses Roblox's HapticService to perform the check, which is essential before attempting to activate any vibration motors to prevent errors on unsupported controllers.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/input/gamepad.md#_snippet_6\n\nLANGUAGE: Lua\nCODE:\n```\nlocal HapticService = game:GetService(\"HapticService\")\n\nlocal gamepad = Enum.UserInputType.Gamepad1\nlocal isVibrationSupported = HapticService:IsVibrationSupported(gamepad)\n```\n\n----------------------------------------\n\nTITLE: Adding Developer Products to MerchBooth Store with Type Specification (Lua)\nDESCRIPTION: Integrates developer products into the MerchBooth catalog using their asset IDs, with each addition specifying Enum.InfoType.Product as the item type. Intended for execution in ServerScriptService, the script loads the MerchBooth module from ReplicatedStorage, iterates over product IDs, and adds each using MerchBooth.addItemAsync with the necessary type. Implements error protection with pcall and warns on failure. Dependencies include the presence of developer product IDs in the items array.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/merch-booth.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal MerchBooth = require(ReplicatedStorage:WaitForChild(\"MerchBooth\"))\n\nlocal items = {\n\t1236602053, -- Mana Refill\n\t1257880672, -- Healing Potion\n}\n\nfor _, assetId in items do\n\tlocal success, errorMessage = pcall(function()\n\t\tMerchBooth.addItemAsync(assetId, Enum.InfoType.Product)\n\tend)\n\tif not success then\n\t\twarn(errorMessage)\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Connecting RemoteEvent with Mixed Table Indexing - Lua\nDESCRIPTION: Shows how to handle events where the passed table contains a mix of numeric and string keys. The event connection prints key-value pairs received from clients. It warns against passing mixed-type keys and nil values. The snippet connects to OnServerEvent and iterates the passed table pairs. Assumes RemoteEvent in ReplicatedStorage.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/scripting/events/remote.md#_snippet_12\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal remoteEvent = ReplicatedStorage:FindFirstChildOfClass(\"RemoteEvent\")\n\nlocal function onEventFire(player, passedTable)\n\tfor k, v in passedTable do\n\t\tprint(k .. \" = \" .. v)\n\t\t--> 1 = Sword\n\t\t--> 2 = Bow\n\t\t--> CharName = Diva Dragonslayer\n\t\t--> CharClass = Rogue\n\tend\nend\n\n-- Connect function to event\nremoteEvent.OnServerEvent:Connect(onEventFire)\n```\n\n----------------------------------------\n\nTITLE: Creating 'appear' function to restore platform visibility and collisions in Luau\nDESCRIPTION: This function reverses the effects of 'disappear' by setting 'CanCollide' to true and 'Transparency' to 0, making the platform reappear and become solid again.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/scripting/basic-scripting/intro-to-scripting.md#_snippet_2\n\nLANGUAGE: Luau\nCODE:\n```\nlocal function appear()\n    platform.CanCollide = true\n    platform.Transparency = 0\nend\n```\n\n----------------------------------------\n\nTITLE: Infinite Timed Loop with task.wait in Roblox (Luau)\nDESCRIPTION: Demonstrates a simple infinite loop using task.wait to yield for one second intervals. Useful for regularly scheduled logic execution such as periodic point awarding. There are no parameters or outputs; the code is usually placed at the script or function bottom to keep running as long as the server does. Proper resource management should be considered in production.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/scripting/basic-scripting/score-points.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nPlayers.PlayerAdded:Connect(onPlayerAdded)\n\nwhile true do\n  task.wait(1)\nend\n```\n\n----------------------------------------\n\nTITLE: Complete Color Changing Loop in Luau\nDESCRIPTION: This snippet combines all the previous code, creating a complete script that changes the color of a part. It includes variable declaration, the while loop, setting the color, and the wait functions that allow it to repeat indefinitely.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-4/repeat-code-with-while-loops.md#_snippet_6\n\nLANGUAGE: Luau\nCODE:\n```\n-- Create a variable to store the part\nlocal loopingPart = workspace.LoopingPart\n\n-- Looping Code\nwhile true do\n\t-- Changes loopingPart's color\n\tloopingPart.Color = Color3.fromRGB(82, 227, 255)\n\t-- Wait 3 seconds before next instruction\n\ttask.wait(3)\n\tloopingPart.Color = Color3.fromRGB(177, 52, 255)\n\ttask.wait(3)\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Up Select Button to Confirm Player Blaster Choice in Roblox Lua\nDESCRIPTION: This Lua module script connects the GUI’s select button activation event to a server communication event. When the player activates the select button, it retrieves the name of the currently selected blaster based on the `selectedIndex` attribute and fires a remote event to the server with this information. This facilitates server-side logic for equipping the correct blaster to the player's avatar. Dependencies include the GuiAttribute shared module and a ReplicatedStorage event named BlasterSelectedEvent. Inputs are the GUI instance and the list of blaster buttons.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/user-interface-design/implement-designs-in-studio.md#_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal GuiAttribute = require(ReplicatedStorage.GuiAttribute)\nlocal blasterSelectedEvent = ReplicatedStorage.Instances.BlasterSelectedEvent\n\nlocal function setupSelectButton(gui: ScreenGui, blasterButtons: { ImageButton })\n\tgui.Frame.SelectButton.Activated:Connect(function()\n\t\t-- During button generation, we set the name of the button to correspond to its associated blaster type\n\t\tlocal blasterName = blasterButtons[gui:GetAttribute(GuiAttribute.selectedIndex)].Name\n\t\tblasterSelectedEvent:FireServer(blasterName)\n\tend)\nend\n\nreturn setupSelectButton\n```\n\n----------------------------------------\n\nTITLE: Updating Inventory Data in Python\nDESCRIPTION: Demonstrates updating user inventory data using the DataStores class in Python.  It initializes a DataStores object and then retrieves, lists, and increments inventory values for a subset of users.  It relies on `tutorialFunctions`, presumable a module containing the `DataStores` class.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/guides/usage-data-stores.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport tutorialFunctions\n\nDatastoresApi = tutorialFunctions.DataStores()\n\n# Set up\ndatastoreName = \"Inventory\"\n\n# List keys for a subset of users (you might need to use the nextPageCursor to view other entries)\nkeys = DatastoresApi.list_entries(datastoreName)\nprint(keys.content)\n\n# Read inventory for each user\nfor x in range(5):\n    updatedObjectKey = \"User_\"+str(x+1)\n    value = DatastoresApi.get_entry(datastoreName, updatedObjectKey)\n    # change response type to a string\n    updatedValue = value.json()\n    print(updatedObjectKey + \" has \"+str(updatedValue)+\" gems in their inventory\")\n# Update the currency of each user by 10\nfor x in range(5):\n    updatedObjectKey = \"User_\"+str(x+1)\n    value = DatastoresApi.increment_entry(datastoreName, updatedObjectKey, 10)\n    # change response type to a string\n    updatedValue = value.json()\n    print(updatedObjectKey + \" now has \"+str(updatedValue)+\" robux in their inventory\")\n```\n\n----------------------------------------\n\nTITLE: Using debug.setmemorycategory in Lua for Roblox memory profiling\nDESCRIPTION: The debug.setmemorycategory function allows developers to assign custom memory category names to objects for better organization in the Memory Categories view of Roblox Studio's debugging tools.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/studio/optimization/memory-usage.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\ndebug.setmemorycategory\n```\n\n----------------------------------------\n\nTITLE: Completing the Luau for Loop Structure\nDESCRIPTION: Completes the 'for' loop syntax by adding 'do' and 'end'. The code to be executed repeatedly is placed between 'do' and 'end'.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-4/intro-to-for-loops.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nfor count = 10, 0, -1 do\n\nend\n```\n\n----------------------------------------\n\nTITLE: Accepting Hit Position Parameter on Server in Roblox Lua\nDESCRIPTION: This server-side Lua function in ServerLaserManager adds a hitPosition argument to the damageCharacter function. It looks up a Humanoid inside the provided character to damage, then decreases its health by LASER_DAMAGE. Requires: LASER_DAMAGE definition and characterToDamage referencing a valid character Model.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/scripting/intermediate-scripting/hit-detection-with-lasers.md#_snippet_25\n\nLANGUAGE: Lua\nCODE:\n```\nfunction damageCharacter(playerFired, characterToDamage, hitPosition)\n\tlocal humanoid = characterToDamage:FindFirstChildWhichIsA(\"Humanoid\")\n\tif humanoid then\n\t\t-- Remove health from character\n\t\thumanoid.Health -= LASER_DAMAGE\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Delay Between Luau Loops\nDESCRIPTION: Places a `task.wait(1)` call after the first `for` loop finishes execution. This creates a 1-second pause before the script proceeds to the next section, which in this case is the loop to make parts reappear.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-5/loops-and-arrays.md#_snippet_6\n\nLANGUAGE: Luau\nCODE:\n```\nfor partIndex = 1, #pathArray  do\n\ttask.wait(VANISH_RATE)\n\tlocal whichPart = pathArray[partIndex]\n\twhichPart.CanCollide = false\n\twhichPart.Transparency = 1\nend\n\ntask.wait(1)\n```\n\n----------------------------------------\n\nTITLE: Firing RemoteEvent Passing Function Argument to Clients - Lua\nDESCRIPTION: Demonstrates firing a RemoteEvent with a function passed as an argument, which will not be received by clients because Lua functions are non-replicable through RemoteEvent. The function `testFunction` prints a greeting and is sent to all clients using FireAllClients. Requires a RemoteEvent in ReplicatedStorage.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/scripting/events/remote.md#_snippet_11\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal remoteEvent = ReplicatedStorage:FindFirstChildOfClass(\"RemoteEvent\")\n\nlocal function testFunction()\n\tprint(\"Hello world!\")\nend\n\n-- Fire remote event with function as an argument\nremoteEvent:FireAllClients(testFunction)\n```\n\n----------------------------------------\n\nTITLE: Piping Content to Generate Content-MD5 Header for Roblox Datastores in Python\nDESCRIPTION: This Python one-liner reads content from standard input, encodes it as UTF-8 bytes, computes the MD5 digest, and outputs the result as a base64-encoded string, suitable for use as the Content-MD5 header in Roblox Cloud API requests. Requires Python (2.7 or 3.x), hashlib, and base64. Pipe your content to the command; the result is the base64-encoded MD5 checksum. Proper usage requires encoding the full request body as UTF-8 before digesting.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/guides/data-store-api-handling.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ echo \"750\" | python -c \"import base64, hashlib; print(str(base64.b64encode(hashlib.md5(bytes(input(), encoding='utf8')).digest()), encoding='utf8'))\"\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Local Variable Scope in Luau\nDESCRIPTION: Shows a local function (`testFunc`) that declares a variable (`testVar`) using the `local` keyword. The variable is accessible and printed only within the function's scope. Attempting to access `testVar` outside the function results in `nil`, demonstrating the confined nature of local scope.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/scope.md#_snippet_3\n\nLANGUAGE: Luau\nCODE:\n```\nlocal function testFunc()  -- local scope\n\tlocal testVar = 64  -- local scope\n\tprint(testVar) -- 64\nend\n\ntestFunc()\n\nprint(testVar) -- nil\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Exported Types from a Module in Luau Lua\nDESCRIPTION: Demonstrates requiring a module exporting the 'Cat' type and defining a variable 'newCat' with that type. Includes method usage that shows the type-safe invocation of functions and access to properties defined in the exported type, illustrating module interoperability.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/type-checking.md#_snippet_23\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal Types = require(ReplicatedStorage.Types)\n\nlocal newCat: Types.Cat = {\n\tName = \"metatablecat\",\n\tMeow = function(self)\n\t\tprint(`{self.Name} said meow`)\n\tend\n}\n\nnewCat:Meow()\n```\n\n----------------------------------------\n\nTITLE: Setting the End Value in a Luau for Loop\nDESCRIPTION: Specifies the end value (0) for the 'for' loop. The loop continues as long as the control variable ('count') has not passed this value, considering the increment direction. A comma separates the start and end values.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-4/intro-to-for-loops.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nfor count = 10, 0\n```\n\n----------------------------------------\n\nTITLE: Key Interaction Logic - Lua\nDESCRIPTION: This code implements the logic for handling player interaction with keys. It calls the `treasureManager.getKey` function to add a key to the player's inventory and destroy the key part.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-6/create-with-module-scripts.md#_snippet_18\n\nLANGUAGE: Lua\nCODE:\n```\nlocal function partTouched(otherPart, keyPart)\n\tlocal whichCharacter = otherPart.Parent\n\tlocal humanoid = whichCharacter:FindFirstChildWhichIsA(\"Humanoid\")\n\tif humanoid then\n\t\t-- Give the player a key and destroy the key part\n\t\t-- =============================================\n\t\ttreasureManager.getKey(keyPart, whichCharacter)\n\t\t-- =============================================\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Event Firing with Tables and Metatables in Roblox Lua\nDESCRIPTION: This code illustrates how to fire a Roblox BindableEvent with a table that has an associated metatable. The 'Car' table serves as a metatable with the 'NumWheels' property, and a 'truck' table is set to use 'Car' as its metatable. When the event fires using 'truck', only the 'Name' property is transmitted; the metatable information, including 'NumWheels', is not transferred. This highlights Lua's behavior where metatable data is not included in table copies during events. Dependencies include the Roblox game services and the set metatable functions.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/scripting/events/bindable.md#_snippet_6\n\nLANGUAGE: Lua\nCODE:\n```\nlocal ServerScriptService = game:GetService(\"ServerScriptService\")\n\nlocal bindableEvent = ServerScriptService:WaitForChild(\"TestBindableEvent\")\n\nlocal Car = {}\nCar.NumWheels = 4\nCar.__index = Car\n\nlocal truck = {}\ntruck.Name = \"MyTruck\"\nsetmetatable(truck, Car)\n\n-- Fire event with table including a metatable\nbindableEvent:Fire(truck)\n```\n\n----------------------------------------\n\nTITLE: Checking Player Verification Status in Lua\nDESCRIPTION: This script checks whether players have verified their Roblox accounts by using the IsVerified() method. It runs the check when players join the experience and outputs the result to the console, useful for implementing verification-based access controls.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/production/publishing/account-verification.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nlocal function onPlayerAdded(player)\n\tprint(player:IsVerified())\nend\n\nfor _, player in Players:GetPlayers() do\n\tonPlayerAdded(player)\nend\n\nPlayers.PlayerAdded:Connect(onPlayerAdded)\n```\n\n----------------------------------------\n\nTITLE: Handling itemRemoved Event with MerchBooth - Lua\nDESCRIPTION: Demonstrates listening for removal of an item via the itemRemoved event, which passes the assetId of the item being removed. The callback can be used for custom logic such as updating the UI or synchronizing state. Requires the MerchBooth module and must run in Script context.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/merch-booth.md#_snippet_32\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal MerchBooth = require(ReplicatedStorage:WaitForChild(\"MerchBooth\"))\n\nMerchBooth.itemRemoved:Connect(function(assetId)\n\tprint(\"Item removed with asset ID of\", assetId)\nend)\n\n```\n\n----------------------------------------\n\nTITLE: Rendering Creator Program Card with Material-UI in React (JavaScript/JSX)\nDESCRIPTION: This snippet demonstrates how to construct a single creator program card using Material-UI components within a React functional component. Dependencies include '@mui/material' (or '@material-ui/core') for components such as Grid, Card, CardContent, CardActions, Typography, Chip, and Button, as well as React itself. The card displays a program title, status chip (e.g., 'Closed' or 'Open'), description, and a 'Learn More' button that links to the program's detail page. Expected input is JSX prop values for attributes like href, variant, and color, and output is a styled, interactive card in the UI. The height of cards is set to '100%' to ensure even sizing, and the snippet assumes use within a responsive grid layout.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/creator-programs/index.md#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<Grid item container wrap=\"nowrap\" direction=\"column\">\n  <Card variant=\"filled\" style={{height: \"100%\"}}>\n    <CardContent>\n      <h4>Roblox Innovation Awards</h4>\n      <figure>\n        <Chip\n          color=\"error\"\n          label=\"Status: Closed\"\n          size=\"medium\"\n          variant=\"filled\"\n        />\n      </figure>\n      <Typography variant='body1'>Each year, the RIAs are awarded to the most innovative creators, video stars, and experiences.</Typography>\n    </CardContent>\n    <CardActions>\n      <Button href=\"/creator-programs/innovation-awards\" variant=\"contained\" color=\"secondary\" size=\"large\">Learn More</Button>\n    </CardActions>\n  </Card>\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Creating an Empty Dictionary Table - Lua\nDESCRIPTION: Presents how to initialize an empty dictionary, ready for subsequent key assignment. No dependencies. Prepares for state tracking, such as enemy or player attributes. Structure is extensible and typical for Roblox data storage patterns.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-5/intro-to-dictionaries.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal enemy = {\n\n}\n```\n\n----------------------------------------\n\nTITLE: Looping Through Inventory Dictionary and Printing Items - Lua\nDESCRIPTION: Declares an inventory table with string keys and numeric values, then iterates using pairs() to print the contents in a formatted message. This demonstration is common in inventory management systems for games and works with any dictionary of items.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-5/intro-to-dictionaries.md#_snippet_16\n\nLANGUAGE: lua\nCODE:\n```\nlocal inventory = {\n\t[\"Gold Bricks\"] = 43,\n\tCarrots = 3,\n\tTorches = 2,\n}\n\nprint(\"You have:\")\n\nfor itemName, itemValue in pairs(inventory) do\n\tprint(itemValue, itemName)\nend\n```\n\n----------------------------------------\n\nTITLE: Basic AND Operator Example in Luau\nDESCRIPTION: Demonstrates how to combine multiple conditions with the 'and' keyword in Luau if statements. The example shows two cases: one where the combined condition is false, and one where it's true.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-3/powerups-with-if-statements.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- will not run\nif 2 + 2 == 6 and 4 ~= 6 then\n\tprint(\"Both statements are true\")\nend\n\n-- will run\nif 4 + 2 == 6 and 4 ~= 6 then\n\tprint(\"Both statements are true\")\nend\n```\n\n----------------------------------------\n\nTITLE: Firing RemoteEvent with Non-Replicated Server Instance, Resulting in Nil Client Value - Lua\nDESCRIPTION: Shows that instances inside ServerStorage are not replicated to clients, so sending such an instance through RemoteEvent results in `nil` on the client side. Creates a Part parented to ServerStorage and fires it to a specific player, demonstrating the limitation of replication for server-only objects.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/scripting/events/remote.md#_snippet_18\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal ServerStorage = game:GetService(\"ServerStorage\")\nlocal Players = game:GetService(\"Players\")\n\nlocal remoteEvent = ReplicatedStorage:FindFirstChildOfClass(\"RemoteEvent\")\n\n-- Will be received as \"nil\" because client can't access ServerStorage\nlocal storedPart = Instance.new(\"Part\")\nstoredPart.Parent = ServerStorage\n\nlocal function onPlayerAdded(player)\n\tremoteEvent:FireClient(player, storedPart)\nend\nPlayers.PlayerAdded:Connect(onPlayerAdded)\n```\n\n----------------------------------------\n\nTITLE: Configuring season tier reward icons in Lua\nDESCRIPTION: This snippet demonstrates defining a reward tier with an associated icon for display when players reach certain XP thresholds. It shows how to assign 'icon' asset IDs within the reward configuration metadata. Dependencies include mission configuration in the 'Missions' package, which should be integrated into the experience.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/feature-packages/season-passes.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nTier3Mission = {\n\tcategoryId = \"General\",\n\tmetadata = {\n\t\tdisplayName = \"Tier 3 Mission\",\n\t\tdescription = \"Jump 10 times\",\n\t\tvisibleAfterComplete = true,\n\t\tvisibleBeforeUnlocked = true,\n\t\trewards = {\n\t\t\t{\n\t\t\t\ticon = 16826775737,\n\t\t\t\tdisplayName = \"Item\",\n\t\t\t},\n\t\t\t{\n\t\t\t\ticon = 106912146245070,\n\t\t\t\tdisplayName = \"Season XP\",\n\t\t\t},\n\t\t},\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Informing the Event Sequencer of a Schedule Connection\nDESCRIPTION: This code demonstrates how to inform the framework of a temporary ad-hoc connection such as `Class.RunService.Heartbeat` so that the connection is cleaned up when seeking to an earlier point in the scene's duration.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/event-sequencer.md#_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\nSchema.OnRun = function()\n\tprint(\"OnRun (Server)\")\n\n\tSchema:schedule({\n\t\tStartTimes = {5},\n\t\tOnStart = function(self)\n\t\t\t-- Initialize temporary heartbeat connection\n\t\t\tlocal tempConnection = RunService.Heartbeat:Connect(function()\n\n\t\t\tend)\n\t\t\t-- Inform framework of connection\n\t\t\tSchema:inform(tempConnection)\n\t\tend\n\t})\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring SeaStackMesh in Level_5b - Roblox Properties Table\nDESCRIPTION: Details the Size, CFrame.Position, and CFrame.Orientation properties for four SeaStackMesh assets used in the Level_5b section of the sample experience. These values are applied in the Roblox Studio Properties window. Note: The last entry in the provided text is incomplete.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/core/building/apply-polished-assets.md#_snippet_9\n\nLANGUAGE: Roblox Properties Table\nCODE:\n```\nSize\tCFrame.Position\tCFrame.Orientation\n`47, 36, 40`\t`245, -16, 15`\t`0, 0, 0`\n`38, 38, 41`\t`245, 11, 14`\t`0, 100, 0`\n`36, 38, 34`\t`243, 34, 15`\t`0, -164, 0`\n`31, 34, 30`\n```\n\n----------------------------------------\n\nTITLE: Setting Damage and Proximity Constants for Server Validation in Roblox Lua\nDESCRIPTION: This snippet demonstrates variable declarations at the server script's top-level scope, including service retrieval and definition of LASER_DAMAGE and MAX_HIT_PROXIMITY. These constants are essential for damage and distance checks performed later in validation logic. Requires: ReplicatedStorage.Events, usage of LASER_DAMAGE, and setting the validation threshold.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/scripting/intermediate-scripting/hit-detection-with-lasers.md#_snippet_27\n\nLANGUAGE: Lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal eventsFolder = ReplicatedStorage.Events\nlocal LASER_DAMAGE = 10\nlocal MAX_HIT_PROXIMITY = 10\n```\n\n----------------------------------------\n\nTITLE: Final Complete Lua Script for Fading and Reappearing Platform with Debounce in Roblox\nDESCRIPTION: The final consolidated Lua script incorporates all elements: initialization of the platform variable, a boolean debounce variable, a fade function that fades transparency gradually, disables collision, waits, re-enables collision, and resets transparency, while preventing multiple simultaneous executions using debounce logic. This script is attached to the platform's 'Touched' event for responsive behavior.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/scripting/basic-scripting/fading-trap.md#_snippet_6\n\nLANGUAGE: Lua\nCODE:\n```\nlocal platform = script.Parent\n\nlocal isTouched = false\n\nlocal function fade()\n\tif not isTouched then\n\t\tisTouched = true\n\t\tfor count = 1, 10 do\n\t\t    platform.Transparency = count / 10\n\t\t    task.wait(0.1)\n\t    end\n\t\tplatform.CanCollide = false\n\t\ttask.wait(3)\n\t\tplatform.CanCollide = true\n\t\tplatform.Transparency = 0\n\t\tisTouched = false\n\tend\nend\n\nplatform.Touched:Connect(fade)\n```\n\n----------------------------------------\n\nTITLE: Requiring PlayerManager in MatchManager in Lua\nDESCRIPTION: This snippet shows how to require the `PlayerManager` module script in the `MatchManager` script. It retrieves the `ServerStorage` service, locates the `ModuleScripts` folder within it, and then requires the `PlayerManager` module script using `require()`. The required module is stored in the `playerManager` variable, allowing the `MatchManager` to access its functions, such as `sendPlayersToMatch()`. This enables the `MatchManager` to trigger player-related actions defined in the `PlayerManager`.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/battle-royale-series/managing-players.md#_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal MatchManager = {}\n\n-- Services\nlocal ServerStorage = game:GetService(\"ServerStorage\")\n\n-- Module Scripts\nlocal moduleScripts = ServerStorage:WaitForChild(\"ModuleScripts\")\nlocal playerManager = require(moduleScripts:WaitForChild(\"PlayerManager\"))\n\nfunction MatchManager.prepareGame()\n\tplayerManager.sendPlayersToMatch()\nend\n\nreturn MatchManager\n```\n\n----------------------------------------\n\nTITLE: Saving and Registering Plugin Scripts in Roblox Studio\nDESCRIPTION: Procedures for saving plugin scripts as local plugins in Roblox Studio. You add a `Class.Script` into `Class.ServerStorage`, paste the plugin code, and then save it as a local plugin via the Explorer context menu. This process ensures the plugin runs within `Class.PluginDebugService` for debugging and updates. It also emphasizes deleting original server scripts to avoid conflicts.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/studio/plugins.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Cloning and Parenting Weapon Tool to Player (Lua)\nDESCRIPTION: This snippet extends the player preparation function by cloning the weapon tool from ServerStorage and parenting the cloned tool to the player's character model, ensuring each player receives their own weapon instance. Dependencies include the previously initialized 'playerWeapon' variable, a valid player and character, and the Clone() method. The inputs are player and spawn; the effect is each player receives a separate weapon tool in their character hierarchy.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/battle-royale-series/managing-players.md#_snippet_10\n\nLANGUAGE: Lua\nCODE:\n```\nlocal function preparePlayer(player, whichSpawn)\n\tplayer.RespawnLocation = whichSpawn\n\tplayer:LoadCharacter()\n\n\tlocal character = player.Character or player.CharacterAdded:Wait()\n\tlocal sword = playerWeapon:Clone()\n\tsword.Parent = character\nend\n```\n\n----------------------------------------\n\nTITLE: Sample Output From Printing an Inventory Dictionary - Lua\nDESCRIPTION: Displays the expected console output from the previous inventory iteration code, listing items with their quantities. Shows output structure for verification of dictionary built and printed using pairs().\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-5/intro-to-dictionaries.md#_snippet_17\n\nLANGUAGE: lua\nCODE:\n```\nYou have:\n43 Gold Bricks\n3 Carrots\n2 Torches\n```\n\n----------------------------------------\n\nTITLE: Awarding Silver Medals Luau\nDESCRIPTION: This code snippet extends the medal awarding logic by adding an `elseif` condition for awarding a silver medal.  If the `timePassed` is greater than 10 seconds and less than or equal to 20, the code prints 'You get a silver medal!'.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-3/multiple-conditions.md#_snippet_12\n\nLANGUAGE: Luau\nCODE:\n```\nlocal function finish()\n   raceActive = false\n   print(\"You finished in \" .. timePassed)\n\n   if timePassed <= 10 then\n      print(\"You get a gold medal!\")\n   elseif timePassed > 10 and timePassed <= 20 then\n      print(\"You get a silver medal!\")\n      end\nend\n```\n\n----------------------------------------\n\nTITLE: Connecting Button Press Handling to Touched Event in Roblox - Lua\nDESCRIPTION: Links the buttonPressed function to the Touched event of the button part, so when a player touches the button, the function runs. This is essential for creating in-game interactivity using Roblox events. Requires pre-defined button variable and buttonPressed function.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-4/create-a-timed-bridge.md#_snippet_4\n\nLANGUAGE: Lua\nCODE:\n```\nlocal function buttonPressed(otherPart)\n   local character = otherPart.Parent\n   local humanoid = character:FindFirstChildWhichIsA(\"Humanoid\")\n   if humanoid then\n      startTimer()\n   end\n\nend\n\nbutton.Touched:Connect(buttonPressed)\n```\n\n----------------------------------------\n\nTITLE: Disconnecting Event Listener After First Occurrence (Luau)\nDESCRIPTION: Illustrates connecting to an event and disconnecting the connection within the handler itself. With deferred events, multiple event invocations might queue before the `Disconnect()` call executes, but `Disconnect()` will discard all pending invocations for that specific connection. Using `RBXScriptSignal:Once()` is recommended for scenarios where only the first event firing is needed.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/scripting/events/deferred.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nconnection = event:Connect(function ()\n   connection:Disconnect()\n   -- do something\nend)\n```\n\n----------------------------------------\n\nTITLE: Final Complete TreasureManager Module Script - Roblox Lua\nDESCRIPTION: This snippet provides the full implementation of the TreasureManager module script, combining service initialization, helper functions for accessing player stats, and the core getKey method for adding keys and destroying the key part. Meant to be required by other scripts for shared logic, it depends on proper Roblox hierarchy with ServerStorage, leaderstats, 'Lockpicks', and 'Treasure'. All module functionality is encapsulated and exported via the returned TreasureManager table.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-6/create-with-module-scripts.md#_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nlocal TreasureManager = {}\nlocal Players = game:GetService(\"Players\")\nlocal keyDrop = 1\n\n------------------ Local Functions\nlocal function getPlayerKeys(whichCharacter)\n   local player = Players:GetPlayerFromCharacter(whichCharacter)\n   local leaderstats = player:FindFirstChild(\"leaderstats\")\n   return leaderstats:WaitForChild(\"Lockpicks\")\nend\n\nlocal function getPlayerTreasure(whichCharacter)\n   local player = Players:GetPlayerFromCharacter(whichCharacter)\n   local leaderstats = player:FindFirstChild(\"leaderstats\")\n   return leaderstats:WaitForChild(\"Treasure\")\nend\n\n------------------ Module Functions\nfunction TreasureManager.getKey(keyPart, whichCharacter)\n   local playerKeys = getPlayerKeys(whichCharacter)\n   playerKeys.Value = playerKeys.Value + keyDrop\n   keyPart:Destroy()\nend\n\nreturn TreasureManager\n```\n\n----------------------------------------\n\nTITLE: Increasing Player WalkSpeed in Roblox Luau\nDESCRIPTION: Modifies the player's Humanoid.WalkSpeed property by adding 10 to the current value when the powerup is touched, creating a speed boost effect.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-3/powerups-with-if-statements.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal function onTouch(otherPart)\n   local character = otherPart.Parent\n   local humanoid = character:FindFirstChildWhichIsA(\"Humanoid\")\n\n   if humanoid then\n\t   humanoid.WalkSpeed += 10\n   end\nend\n\nspeedBoost.Touched:Connect(onTouch)\n```\n\n----------------------------------------\n\nTITLE: Adding Transition Time After Intermission in GameManager (Roblox Lua)\nDESCRIPTION: Adds logic immediately after the intermission `repeat` loop exits (meaning enough players have joined). It prints a message confirming the intermission is over and waits for a brief transition period using `task.wait()` and the `gameSettings.transitionTime` variable before proceeding to the next game phase.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/battle-royale-series/coding-the-game-loop.md#_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\nwhile true do\n\trepeat\n\t\tprint(\"Starting intermission\")\n\t\ttask.wait(gameSettings.intermissionDuration)\n\tuntil #Players:GetPlayers() >= gameSettings.minimumPlayers\n\tprint(\"Intermission over\")\n\ttask.wait(gameSettings.transitionTime)\nend\n```\n\n----------------------------------------\n\nTITLE: Using Objects as Keys in Dictionaries in Luau - Lua\nDESCRIPTION: Demonstrates employing Luau objects (Instance.new(\"Part\")) as keys in dictionaries by surrounding the key with square brackets. Prints both string-keyed and object-keyed values, illustrating dictionary flexibility. Requires Roblox Instance creation; input is dictionary with mixed key types; output is printing values by key.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/tables.md#_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nlocal part = Instance.new(\"Part\")\n\nlocal testDictionary = {\n\tpartType = \"Block\",\n\t[part] = true\n}\n\n-- Include quotes for string keys\nprint(testDictionary[\"partType\"]) -- Block\n-- Omit quotes for non-string keys\nprint(testDictionary[part]) -- true\n```\n\n----------------------------------------\n\nTITLE: Using Library.task.delay to schedule functions after a duration in Roblox Lua\nDESCRIPTION: This snippet illustrates how to delay the execution of a function by a specified number of seconds using Library.task.delay(). It passes the current time to measure actual delay, useful in time-sensitive operations like animations or cooldowns.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/scripting/scheduler.md#_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\ntask.delay(2, function(scheduledTime)\n\tprint(os.clock() - scheduledTime) --&gt; 2.038702\nend, os.clock())\n```\n\n----------------------------------------\n\nTITLE: Basic Framework for Handling Proximity Prompt Events in Lua\nDESCRIPTION: Provides a basic Lua script structure for centrally handling proximity prompt interactions using ProximityPromptService. It defines placeholder functions for prompt triggered, hold began, and hold ended events and connects them to the corresponding signals from the service.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/ui/proximity-prompts.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal ProximityPromptService = game:GetService(\"ProximityPromptService\")\n\n-- Detect when prompt is triggered\nlocal function onPromptTriggered(promptObject, player)\n\nend\n\n-- Detect when prompt hold begins\nlocal function onPromptHoldBegan(promptObject, player)\n\nend\n\n-- Detect when prompt hold ends\nlocal function onPromptHoldEnded(promptObject, player)\n\nend\n\n-- Connect prompt events to handling functions\nProximityPromptService.PromptTriggered:Connect(onPromptTriggered)\nProximityPromptService.PromptButtonHoldBegan:Connect(onPromptHoldBegan)\nProximityPromptService.PromptButtonHoldEnded:Connect(onPromptHoldEnded)\n```\n\n----------------------------------------\n\nTITLE: Generic For Loop with pairs() in Luau\nDESCRIPTION: This code demonstrates a generic `for` loop in Luau using the `pairs()` function to iterate over a dictionary. `pairs()` returns an iterator that iterates through all indices (including numerical indices) in a table, returning the key and value for each entry. The loop prints the key and value for each entry in the dictionary. The order of iteration is arbitrary for non-numeric keys.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/control-structures.md#_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\nlocal dictionary = {\n\t[1] = \"a\",\n\t[\"Hello\"] = \"b\",\n\t[5] = \"c\",\n\t[true] = \"d\",\n\t[\"World\"] = \"f\",\n\t[false] = \"e\"\n}\nfor key, value in pairs(dictionary) do\n\tprint(key, value)\nend\n\n--[[ Resulting output:\nHello b\ntrue d\nfalse e\nWorld f\n5 c\n1 a\n]]\n```\n\n----------------------------------------\n\nTITLE: Basic Text Input Handling\nDESCRIPTION: This code snippet demonstrates how to handle the FocusLost event of a TextBox in Lua scripting. When a user presses Enter or clicks outside the input box, it prints the entered text to the output window, enabling basic input submission handling.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/ui/text-input.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal textBox = script.Parent\n\nlocal function onFocusLost(enterPressed, inputObject)\n\tif enterPressed then\n\t\tprint(textBox.Text)\n\tend\nend\n\ntextBox.FocusLost:Connect(onFocusLost)\n```\n\n----------------------------------------\n\nTITLE: Using pre-existing HumanoidDescription in Workspace during spawn\nDESCRIPTION: This snippet accesses a HumanoidDescription stored in the workspace and applies it when a new player character spawns. The script prevents automatic character load, then loads each new character with the predefined HumanoidDescription object located in the workspace.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/characters/appearance.md#_snippet_9\n\nLANGUAGE: Lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\n-- Stop automatic spawning so it can be done in the \"PlayerAdded\" callback\nPlayers.CharacterAutoLoads = false\n\nlocal function onPlayerAdded(player)\n\t-- Spawn character with \"workspace.StudioHumanoidDescription\"\n\tplayer:LoadCharacterWithHumanoidDescription(workspace.StudioHumanoidDescription)\nend\n\n-- Connect \"PlayerAdded\" event to \"onPlayerAdded()\" function\nPlayers.PlayerAdded:Connect(onPlayerAdded)\n```\n\n----------------------------------------\n\nTITLE: Rotating Roblox Part Relative to Self (ToWorldSpace) (Lua)\nDESCRIPTION: Shows how to rotate a Roblox Part relative to its *own* local coordinate space using the `CFrame:ToWorldSpace()` method. A rotation CFrame is created using `CFrame.Angles()` (representing the rotation in the part's local space), and `ToWorldSpace()` is called on the part's *current* CFrame, applying the rotation relative to the part's current orientation. Requires a `Part` object (e.g., `redBlock`). Rotates `redBlock` 70 degrees around its local Y-axis and 20 degrees around its local Z-axis.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/workspace/cframes.md#_snippet_7\n\nLANGUAGE: Lua\nCODE:\n```\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal redBlock = Workspace.RedBlock\n\nlocal rotatedCFrame = CFrame.Angles(0, math.rad(70), math.rad(20))\nredBlock.CFrame = redBlock.CFrame:ToWorldSpace(rotatedCFrame)\n```\n\n----------------------------------------\n\nTITLE: Changing a part's color with an if statement in Luau\nDESCRIPTION: Illustrates how to use an if statement to change the Color property of a Roblox part named LieDetector if a simple true condition (3 + 3 == 6) holds. Requires the presence of a part named LieDetector in the workspace. Indentation is used to clarify the conditional block's scope.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-3/intro-to-if-statements.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nif 3 + 3 == 6 then\n\tworkspace.LieDetector.Color = Color3.fromRGB(0, 255, 0)\nend\n```\n\n----------------------------------------\n\nTITLE: Emitting Particle Burst When Killing Player in Roblox Lua\nDESCRIPTION: This snippet extends the player detection functionality by emitting a burst of particles from the ParticleEmitter when a player touches the trap and is killed. It uses the Emit() method of ParticleEmitter, passing the EMIT_AMOUNT variable to create a one-time explosion particle effect synchronized with the player death. This combines visual effects with game mechanics.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/vfx/use-particles-for-explosions.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal trapObject = script.Parent\nlocal particleEmitter = trapObject.Explosion\n\nlocal EMIT_AMOUNT = 100\n\nlocal function killPlayer(otherPart)\n\tlocal character = otherPart.Parent\n\tlocal humanoid = character:FindFirstChildWhichIsA(\"Humanoid\")\n\n\tif humanoid then\n\t\thumanoid.Health = 0\n\t\tparticleEmitter:Emit(EMIT_AMOUNT)\n\tend\nend\n\ntrapObject.Touched:Connect(killPlayer)\n```\n\n----------------------------------------\n\nTITLE: Comparing 0 and -0 in Luau\nDESCRIPTION: Illustrates that `-0` is equivalent to `0` in Luau using the equality operator and shows example comparisons with other numbers (`1` and `-1`) to demonstrate the behavior of signed zero in relational operations. Requires a Luau environment.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/numbers.md#_snippet_0\n\nLANGUAGE: Luau\nCODE:\n```\nprint(0 == -0)  --> true\nprint(-0 > 1)  --> false\nprint(-0 < 1)  --> true\nprint(-0 > -1)  --> true\nprint(-0 < -1)  --> false\n```\n\n----------------------------------------\n\nTITLE: Creating Normal and Corrupt Room States\nDESCRIPTION: The experience uses two states for each room (normal and corrupted) to create dynamic environments.  When triggered, the corrupted state is cloned from ServerStorage to TempStorage/Cloned, and players are teleported. Upon mission completion, players are teleported back, and the cloned corrupted state is destroyed.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/the-mystery-of-duvall-drive/main-design-requirements.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Displaying Developer Share Percentage (EBP) using JSX Grid and Chip\nDESCRIPTION: This JSX snippet uses Grid and Chip components to represent the 3% share allocated to developers through Engagement-Based Payouts (EBP). It follows the same layout pattern as other percentage displays, showing the value and label in separate, styled chips within a grid.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/production/earn-on-roblox.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Grid container spacing={1}>\n<Grid item XSmall={2}>\n<Chip label=\"3%\" size=\"large\" style={{backgroundColor:\"#00a2ff\",color:\"white\",fontSize:\"120%\",width:\"100%\"}} />\n</Grid>\n<Grid item XSmall={10}>\n<Chip label=\"Developer share – engagement-based payouts (EBP)\" size=\"large\" color=\"primary\" variant=\"outlined\" style={{fontSize:\"105%\"}}/>\n</Grid>\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Setting TextureID Property in Roblox\nDESCRIPTION: Shows how to apply a single texture to a MeshPart in Roblox by setting the TextureID property. This is done after importing a texture file and getting its asset ID.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/parts/meshes.md#_snippet_0\n\nLANGUAGE: Roblox\nCODE:\n```\nClass.MeshPart.TextureID\n```\n\n----------------------------------------\n\nTITLE: Invoking RemoteFunction and Comparing Table Identities - Lua\nDESCRIPTION: Demonstrates invoking a RemoteFunction from a LocalScript with a numeric table argument, printing the identity of the original table, then printing the identity of the returned table from the server callback to show that they differ, confirming copying behavior across boundaries. Requires RemoteFunction instance in ReplicatedStorage.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/scripting/events/remote.md#_snippet_15\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal remoteFunction = ReplicatedStorage:FindFirstChildOfClass(\"RemoteFunction\")\n\nlocal inventoryData = {\n\t\"Sword\", \"Bow\"\n}\n-- Output original table identity\nprint(tostring(inventoryData))  --> table: 0x059bcdbb2b576549\n\nlocal invokeReturn = remoteFunction:InvokeServer(inventoryData)\n\n-- Output table identity upon return\nprint(tostring(invokeReturn))  --> table: 0x9fcae7919563a0e9\n```\n\n----------------------------------------\n\nTITLE: Defining and Calling a Basic Function in Luau - Lua\nDESCRIPTION: This snippet demonstrates how to define a simple function named makeDinner using the local function syntax in Luau. The function contains a placeholder (comment) for a list of instructions but does not implement them. It shows both the definition of the function and how to call it using makeDinner(). No dependencies or parameters are required. The expected input is a script environment in Roblox Studio, and the output is defined by the instructions inside the function, which must be implemented by the user.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-2/code-a-function.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal function makeDinner()\n\t-- List of instructions\nend\n\n-- Tell the code to run\nmakeDinner()\n```\n\n----------------------------------------\n\nTITLE: Initializing Variables in PlayerManager (Lua)\nDESCRIPTION: Initializes variables in the `PlayerManager` module script. It gets necessary services (Players, ServerStorage, ReplicatedStorage), references map elements, and gets the `DisplayValues` folder and `playersLeft` IntValue from ReplicatedStorage.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/battle-royale-series/creating-a-gui.md#_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlocal PlayerManager = {}\n\n-- Services\nlocal Players = game:GetService(\"Players\")\nlocal ServerStorage = game:GetService(\"ServerStorage\")\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\n-- Map Variables\nlocal lobbySpawn = workspace.Lobby.StartSpawn\nlocal arenaMap = workspace.Arena\nlocal spawnLocations = arenaMap.SpawnLocations\n\n-- Values\nlocal displayValues = ReplicatedStorage:WaitForChild(\"DisplayValues\")\nlocal playersLeft = displayValues:WaitForChild(\"PlayersLeft\")\n```\n\n----------------------------------------\n\nTITLE: Subscribing to a MessagingService Topic in Roblox Luau\nDESCRIPTION: Demonstrates how to use the `MessagingService:SubscribeAsync()` method within a Roblox server script (Luau) to subscribe players to a specific topic (\"YourTopic\") upon joining the experience. It includes printing received message data and handling player departure to unsubscribe by disconnecting the connection. This setup is necessary within the Roblox game environment to receive messages published via the Open Cloud API.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/guides/usage-messaging.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal MessagingService = game:GetService(\"MessagingService\")\nlocal Players = game:GetService(\"Players\")\n\nlocal function onPlayerAdded(player)\n\t-- Define and subscribe to the topic\n\tlocal topic = \"YourTopic\"\n\tlocal connection = MessagingService:SubscribeAsync(topic, function(message)\n\t\tprint(message.Data)\n\tend)\n\n\tplayer.AncestryChanged:Connect(function()\n\t\t-- Unsubscribe from the topic upon player ancestry change\n\t\tconnection:Disconnect()\n\tend)\nend\n\nPlayers.PlayerAdded:Connect(onPlayerAdded)\n```\n\n----------------------------------------\n\nTITLE: Defining Inventory Upgrade Variables in Roblox Lua\nDESCRIPTION: Sets the values for purchasing an inventory size upgrade. newMaxItems defines the new maximum inventory capacity after the upgrade is bought (shown as 15), and upgradeCost defines the price of the upgrade (shown as 500). These values should be adjusted for game balance. This code snippet is typically found in a BuyScript associated with a Shop BuyButton.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/adventure-game-series/finishing-the-project.md#_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\n-- Possible values for a game\nlocal newMaxItems = 15\nlocal upgradeCost = 500\n```\n\n----------------------------------------\n\nTITLE: Final Script for Health Pickup with Transparency Feedback in Roblox Lua\nDESCRIPTION: This snippet contains the complete implementation of the health pickup system. It defines constants for health restoration, transparency states, and cooldowns. The script initializes pickup items, sets their 'Enabled' attribute, and connects touch events to restore health and manage visual feedback through transparency changes, including cooldown handling.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/scripting/intermediate-scripting/create-a-health-pickup.md#_snippet_6\n\nLANGUAGE: Lua\nCODE:\n```\nlocal MAX_HEALTH = 100\nlocal ENABLED_TRANSPARENCY = 0.4\nlocal DISABLED_TRANSPARENCY = 0.9\nlocal COOLDOWN = 10\n\nlocal healthPickupsFolder = workspace:WaitForChild(\"HealthPickups\")\nlocal healthPickups = healthPickupsFolder:GetChildren()\n\nlocal function onTouchHealthPickup(otherPart, healthPickup)\n\tif healthPickup:GetAttribute(\"Enabled\") then\n\t\tlocal character = otherPart.Parent\n\t\tlocal humanoid = character:FindFirstChildWhichIsA(\"Humanoid\")\n\t\tif humanoid then\n\t\t\thumanoid.Health = MAX_HEALTH\n\t\t\thealthPickup.Transparency = DISABLED_TRANSPARENCY\n\t\t\thealthPickup:SetAttribute(\"Enabled\", false)\n\t\t\ttask.wait(COOLDOWN)\n\t\t\thealthPickup.Transparency = ENABLED_TRANSPARENCY\n\t\t\thealthPickup:SetAttribute(\"Enabled\", true)\n\t\tend\n\tend\n end\n\nfor _, healthPickup in ipairs(healthPickups) do\n\thealthPickup:SetAttribute(\"Enabled\", true)\n\thealthPickup.Touched:Connect(function(otherPart)\n\t\tonTouchHealthPickup(otherPart, healthPickup)\n\t end)\nend\n```\n\n----------------------------------------\n\nTITLE: Sending Actor Messages in Lua\nDESCRIPTION: Illustrates how to send messages to a specific `Actor` instance using `Actor:SendMessage()`. It defines a topic (\"Greeting\") and sends string messages to the target actor. Requires the `Workspace` service and an accessible `Actor` instance named \"WorkerActor\".\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/scripting/multithreading.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Send two messages to the worker actor with a topic of \"Greeting\"\nlocal workerActor = Workspace.WorkerActor\nworkerActor:SendMessage(\"Greeting\", \"Hello World!\")\nworkerActor:SendMessage(\"Greeting\", \"Welcome\")\n\nprint(\"Sent messages\")\n```\n\n----------------------------------------\n\nTITLE: Adding Toolbar Buttons to Roblox Studio Plugins\nDESCRIPTION: Sample process to add custom toolbar sections and buttons for plugins using `Class.Plugin:CreateToolbar()` and `Class.PluginToolbar:CreateButton()`. This enhances plugin usability by integrating functionality directly into the Studio interface, such as inserting scripts or modifying selections, with UI elements triggered on click events.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/studio/plugins.md#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Setting Time of Day in Roblox Lighting\nDESCRIPTION: Adjusts the time of day within the Roblox environment by setting the 'ClockTime' property of the Lighting service. Optionally sets 'GeographicLatitude' to further refine the sun's position. This affects the angle and color of global illumination, demonstrated here to highlight a cabin door.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/lighting/enhance-indoor-environments.md#_snippet_2\n\nLANGUAGE: Roblox Properties\nCODE:\n```\nClockTime = 15.6\nGeographicLatitude = 323\n```\n\n----------------------------------------\n\nTITLE: Get DataStoreService - Luau\nDESCRIPTION: Retrieves the DataStoreService, which is the primary service for interacting with Roblox's data storage system. This service is required before you can access or create individual data stores.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/scripting/intermediate-scripting/save-data.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal DataStoreService = game:GetService(\"DataStoreService\")\n```\n\n----------------------------------------\n\nTITLE: Defining and Calling Function (Initial) in Luau\nDESCRIPTION: Sets up the initial structure of a Luau function named `sortGarbage` that is intended to receive two parameters, `trash` and `recyclable`. It includes a temporary `print` statement for verification and shows how to call the function, initially without arguments.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-2/multiple-parameters-and-arguments.md#_snippet_1\n\nLANGUAGE: Luau\nCODE:\n```\nlocal function sortGarbage(trash, recyclable)\n   print(\"garbage test\")\nend\n\nsortGarbage()\n```\n\n----------------------------------------\n\nTITLE: Playing Audio and Tweening UI Button on Press (Lua)\nDESCRIPTION: This LocalScript plays a retro jingle and tweens the visual appearance of a button when it's pressed. It listens for the `Activated` event on an ImageButton to trigger the audio player to play the audio.  The script uses `TweenService` to move the button slightly downward and tint it teal on press, and returns it to the original position and color when audio has finished playing.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/audio/add-2D-audio.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nlocal TweenService = game:GetService(\"TweenService\")\n\nlocal buttonGui = script.Parent\nlocal buttonImageButton = buttonGui.ButtonFrame.ButtonImageButton\nlocal buttonAudioPlayer = buttonGui.AudioPlayer\n\nlocal tweenInfo = TweenInfo.new(.2, Enum.EasingStyle.Exponential)\n\nlocal buttonTweenByIsPressed = {\n    -- Pressed\n    [true] = TweenService:Create(buttonImageButton, tweenInfo, {\n        Position = buttonImageButton.Position + UDim2.fromScale(0, .1),\n        ImageColor3 = Color3.fromRGB(117, 255, 255),\n    }),\n\n    -- Default\n    [false] = TweenService:Create(buttonImageButton, tweenInfo, {\n        Position = buttonImageButton.Position,\n        ImageColor3 = Color3.fromRGB(255, 255, 255),\n    }),\n}\n\nlocal function onIsPlayingChanged()\n    local isPlaying = buttonAudioPlayer.IsPlaying\n    local tween = buttonTweenByIsPressed[isPlaying]\n    tween:Play()\nend\nonIsPlayingChanged()\nbuttonAudioPlayer:GetPropertyChangedSignal(\"IsPlaying\"):Connect(onIsPlayingChanged)\nbuttonAudioPlayer.Ended:Connect(onIsPlayingChanged)\n\nbuttonImageButton.Activated:Connect(function(_hit)\n    buttonAudioPlayer:Play()\nend)\n```\n\n----------------------------------------\n\nTITLE: Customize Pause Screen - Lua\nDESCRIPTION: This LocalScript customizes the pause screen by disabling the default pause modal and connecting a function to the Player.GameplayPaused property. When the player pauses, the custom GUI is shown; otherwise, it's hidden. Requires access to Players and GuiService.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/workspace/streaming.md#_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\nlocal GuiService = game:GetService(\"GuiService\")\nlocal player = Players.LocalPlayer\n\n-- Disable default pause modal\nGuiService:SetGameplayPausedNotificationEnabled(false)\n\nlocal function onPauseStateChanged()\n\tif player.GameplayPaused then\n\t\t-- Show custom GUI\n\telse\n\t\t-- Hide custom GUI\n\tend\nend\n\nplayer:GetPropertyChangedSignal(\"GameplayPaused\"):Connect(onPauseStateChanged)\n```\n\n----------------------------------------\n\nTITLE: Replacing Default Run Animation with Ninja Run in Roblox\nDESCRIPTION: This script demonstrates how to replace a specific default animation (running) with a catalog animation. It uses the Ninja Run animation asset ID to override the default running animation for all player characters.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/animation/using.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nlocal function onCharacterAdded(character)\n\t-- Get animator on humanoid\n\tlocal humanoid = character:WaitForChild(\"Humanoid\")\n\tlocal animator = humanoid:WaitForChild(\"Animator\")\n\n\t-- Stop all animation tracks\n\tfor _, playingTrack in animator:GetPlayingAnimationTracks() do\n\t\tplayingTrack:Stop(0)\n\tend\n\n\tlocal animateScript = character:WaitForChild(\"Animate\")\n\tanimateScript.run.RunAnim.AnimationId = \"rbxassetid://656118852\"\n\t--animateScript.walk.WalkAnim.AnimationId = \"rbxassetid://\"\n\t--animateScript.jump.JumpAnim.AnimationId = \"rbxassetid://\"\n\t--animateScript.idle.Animation1.AnimationId = \"rbxassetid://\"\n\t--animateScript.idle.Animation2.AnimationId = \"rbxassetid://\"\n\t--animateScript.fall.FallAnim.AnimationId = \"rbxassetid://\"\n\t--animateScript.swim.Swim.AnimationId = \"rbxassetid://\"\n\t--animateScript.swimidle.SwimIdle.AnimationId = \"rbxassetid://\"\n\t--animateScript.climb.ClimbAnim.AnimationId = \"rbxassetid://\"\nend\n\nlocal function onPlayerAdded(player)\n\tplayer.CharacterAppearanceLoaded:Connect(onCharacterAdded)\nend\n\nPlayers.PlayerAdded:Connect(onPlayerAdded)\n```\n\n----------------------------------------\n\nTITLE: Client-side script for sending chat messages via TextChatService\nDESCRIPTION: This Lua script captures user input from a TextBox GUI element and sends it as a chat message through Roblox's TextChatService 'RBXGeneral' channel. It ensures the input box is cleared after sending and displays an error message if message sending fails. It should be parented to the TextBox LocalScript element in the custom chat input GUI.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/chat/examples/simple-custom-frontend-ui.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal TextChatService = game:GetService(\"TextChatService\")\n\n-- RBXGeneral is the default public channel\nlocal RBXGeneral = TextChatService:FindFirstChild(\"TextChannels\"):WaitForChild(\"RBXGeneral\")\n\nlocal textBox = script.Parent\ntextBox.FocusLost:Connect(function(enterPressed)\n\tlocal text = textBox.Text\n\tif enterPressed and #text > 0 then\n\t\tlocal success, response = pcall(function()\n\t\t\treturn RBXGeneral:SendAsync(textBox.Text)\n\t\tend)\n\n\t\tif not success then\n\t\t\tRBXGeneral:DisplaySystemMessage(\"Failed to send message\")\n\t\tend\n\n\t\t-- Clear input box after sending\n\t\ttextBox.Text = \"\"\n\tend\nend)\n```\n\n----------------------------------------\n\nTITLE: Converting AnimationId Text File to Animation Map Module in Roblox Studio Using Lua\nDESCRIPTION: This Lua snippet converts a multiline string containing animation ID and name pairs into a Lua table mapping animation names to Roblox asset URLs. The script splits the input text by line, further splits each line by space, verifies the expected two-component format, and appends formatted lines forming a Lua table keyed by animation name with 'rbxassetid://' prefixed IDs. The resulting string is formatted as a Lua return statement with the complete animation map, intended for use as a ModuleScript in Roblox Studio. This module allows runtime lookup of animation asset IDs by name. Inputs must conform to the specified text format, and the script handles invalid lines by skipping them.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/projects/transfer-animations.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nlocal animFileText = [[\n4215167 Animation_Name_1\n6171235 Animation_Name_2\n1251267 Animation_Name_3\n]]\n\nlocal function convertFileToAnimationMap(animFileText: string)\n\tlocal NEW_ANIMATION_MAP = \"\"\n\n\tlocal lines = string.split(animFileText, \"\\n\")\n\tfor _, line in lines do\n\t\tlocal components = string.split(line, \" \")\n\t\tif #components ~= 2 then\n\t\t\tcontinue\n\t\tend\n\n\t\tlocal animationId = components[1]\n\t\tlocal animationName = components[2]\n\n\t\tNEW_ANIMATION_MAP = string.format(\"%s\\t[\\\"%s\\\"] = \\\"rbxassetid://%s\\\",\\n\", NEW_ANIMATION_MAP, animationName, animationId)\n\tend\n\n\treturn string.format(\"return {\\n%s}\", NEW_ANIMATION_MAP)\nend\n\nprint(convertFileToAnimationMap(animFileText))\n```\n\n----------------------------------------\n\nTITLE: Changing Variable Values by Re-assignment in Luau\nDESCRIPTION: This snippet demonstrates how to change the value of an existing local variable by simply using the assignment operator (`=`) again. The original value is overwritten by the new assigned value.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/variables.md#_snippet_3\n\nLANGUAGE: Luau\nCODE:\n```\nlocal x, y = 10, 20\nprint(x) -- 10\nprint(y) -- 20\n\nlocal x = 1000\nlocal y = 2000\nprint(x) -- 1000\nprint(y) -- 2000\n```\n\n----------------------------------------\n\nTITLE: Calculating Categorical Signal (Clustering) in Lua\nDESCRIPTION: This snippet computes a score for the clustering signal, aiming to maximize the ratio of players in the server with the same attribute as the joining player's attribute. The formula divides the number of players sharing the attribute value by the total occupancy of the server.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/matchmaking/attributes-and-signals.md#_snippet_15\n\nLANGUAGE: lua\nCODE:\n```\nlocal score = num_players_same_{attribute_name} / occupancy\nreturn score\n```\n\n----------------------------------------\n\nTITLE: Using PolicyService for Paid Random Items Restrictions in Roblox\nDESCRIPTION: This code snippet demonstrates how to use the PolicyService.GetPolicyInfoForPlayerAsync method to check if paid random items are restricted for a player based on their region. The returned boolean value indicates whether the developer should hide, replace, or block the purchase of random items for that player.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/production/promotion/content-maturity.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nClass.PolicyService.GetPolicyInfoForPlayerAsync\n```\n\n----------------------------------------\n\nTITLE: Using Variable Arguments (params) in C# Methods\nDESCRIPTION: This snippet demonstrates how to define a C# method that accepts a variable number of arguments of a specific type using the `params` keyword on the last parameter. This allows passing multiple arguments of that type directly or as an array.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/luau-csharp-comparison.md#_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\n// Variable argument number\nvoid variableArguments(params string[] inventoryItems) {\n\tfor (item in inventoryItems) {\n\t\tConsole.WriteLine(item);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Method - Overriding Humanoid Display Name Programmatically (Lua)\nDESCRIPTION: To display a custom name unrelated to the player's Roblox account display name, assign a new value to the Humanoid.DisplayName property via script, which allows dynamic name changes for players or NPCs within the game.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/characters/name-health-display.md#_snippet_4\n\nLANGUAGE: Lua\nCODE:\n```\nhumanoid.DisplayName = \"CustomName\"\n```\n\n----------------------------------------\n\nTITLE: Handling Selfie Mode Action Events in Lua\nDESCRIPTION: Connects to the Selfie Mode's action events to detect when specific features are activated or deactivated. This allows developers to create custom responses to player interactions with the selfie interface.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/selfie-mode.md#_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal SelfieMode = require(ReplicatedStorage:WaitForChild(\"SelfieMode\"))\n\nSelfieMode.actionActivated:Connect(function(action)\n\tprint(action.name, \"activated\")\nend)\n\nSelfieMode.actionDeactivated:Connect(function(action)\n\tprint(action.name, \"deactivated\")\nend)\n```\n\n----------------------------------------\n\nTITLE: Checking for Humanoid Existence with If Statement in Luau\nDESCRIPTION: Adds an 'if' statement to check if the 'humanoid' variable successfully holds a reference to a Humanoid object (i.e., it's not nil). The code inside the 'if' block will only execute if a Humanoid was found, preventing errors when non-character parts touch the lava.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/scripting/basic-scripting/deadly-lava.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal lava = script.Parent\n\nlocal function kill(otherPart)\n  local partParent = otherPart.Parent\n  local humanoid = partParent:FindFirstChild(\"Humanoid\")\n  if humanoid then\n\n  end\nend\n\nlava.Touched:Connect(kill)\n```\n\n----------------------------------------\n\nTITLE: Generate 3D Model with /generate Command\nDESCRIPTION: This snippet describes the usage of the `/generate` command within the Roblox Assistant to generate 3D models. Users specify their requests in natural language, and the Assistant utilizes the Roblox's Cube 3D model. The command then adds the generated object directly to the workspace. This feature is currently in beta and enables mesh generation.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/assistant/guide.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Variadic Function Type Definition Using ...type Syntax in Luau Lua\nDESCRIPTION: Demonstrates the correct syntax for defining function types with variadic parameters using '...type' instead of '...: type', which is invalid. Creates a functional type alias with a variadic number of numeric arguments and a numeric return type.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/type-checking.md#_snippet_13\n\nLANGUAGE: lua\nCODE:\n```\ntype addLotsOfNumbers = (...number) -> number\n```\n\n----------------------------------------\n\nTITLE: Desynchronizing a Thread with ConnectParallel in Lua\nDESCRIPTION: Demonstrates connecting a function to the `RunService.Heartbeat` event to run in parallel using `ConnectParallel`. It executes parallel computations, then uses `task.synchronize()` to switch back to serial execution for modifying instance states. Requires the `RunService`.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/scripting/multithreading.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal RunService = game:GetService(\"RunService\")\n\nRunService.Heartbeat:ConnectParallel(function()\n\t...  -- Some parallel code that computes a state update\n\n\ttask.synchronize()\n\n\t...  -- Some serial code that changes the state of instances\nend)\n```\n\n----------------------------------------\n\nTITLE: Constructing an Empty Table in Luau - Lua\nDESCRIPTION: Demonstrates how to initialize an empty table assigned to the variable 't' and print it. This snippet introduces basic table construction using curly braces, a fundamental operation with no dependencies or inputs beyond Luau's base syntax. Outputs an empty table representation.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/tables.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Construct an empty table assigned to variable \"t\"\nlocal t = {}\nprint(t) -- {}\n```\n\n----------------------------------------\n\nTITLE: Updating Player 'IsAlive' Attribute on Spawn/Death in Roblox Lua\nDESCRIPTION: Modifies the `onCharacterAdded` function to set the player's \"IsAlive\" attribute to `true` upon character spawning. It also updates the function connected to the `Humanoid.Died` event to set the \"IsAlive\" attribute back to `false` when the player dies, alongside resetting their points. Depends on the player object having the \"IsAlive\" attribute initialized.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/scripting/basic-scripting/score-points.md#_snippet_11\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nlocal function onCharacterAdded(character, player)\n  player:SetAttribute(\"IsAlive\", true)\n\n  local humanoid = character:WaitForChild(\"Humanoid\")\n\n  humanoid.Died:Connect(function()\n    local points = player.leaderstats.Points\n    points.Value = 0\n    player:SetAttribute(\"IsAlive\", false)\n  end)\nend\n```\n\n----------------------------------------\n\nTITLE: Detecting Input State for Blaster Activation in Roblox (Lua)\nDESCRIPTION: This function listens for blast-related input and ensures the blast only triggers when the designated input is released (UserInputState.End). Required dependencies are the input enums, and the implementation expects a correctly defined attemptBlastClient function. The parameters include the action name, input state, and input object. The conditional ensures that rapid-fire or accidental activations are prevented if bound to End; for near-instant activation, use Begin instead. This design affects gameplay responsiveness and player experience.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/gameplay-scripting/implement-blasters.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal function onBlasterActivated(_actionName: string,\n  inputState: Enum.UserInputState, _inputObject: InputObject)\n    if inputState == Enum.UserInputState.End then  -- updated line, be sure to change back\n        attemptBlastClient()\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Client-Side Input for Custom Name and Server Assignment (Lua)\nDESCRIPTION: Players can input a custom name through a UI TextBox which sends the input to the server via a RemoteEvent. The server then filters and assigns this name to the Humanoid.DisplayName, supporting custom user-generated names in multiplayer environments.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/characters/name-health-display.md#_snippet_5\n\nLANGUAGE: Lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal changeNameEvent = ReplicatedStorage:WaitForChild(\"ChangeNameEvent\")\nchangeNameEvent:FireServer(\"Amory\")\n```\n\n----------------------------------------\n\nTITLE: Addressing Missing Skinning Data Error\nDESCRIPTION: This error occurs when the specified model (`%s`) lacks the necessary skinning data required for validation or use within Roblox. The model needs to be properly skinned before proceeding.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/validation-errors.md#_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\nMissing skinning data for `%s`. You need to skin your model.\n```\n\n----------------------------------------\n\nTITLE: Accessing RightLipCornerPuller Control in Roblox\nDESCRIPTION: Reference to the RightLipCornerPuller control which raises the corners of the mouth upwards in a smile. This is a required pose for Marketplace avatar assets.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/characters/facial-animation/facs-poses-reference.md#_snippet_13\n\nLANGUAGE: Roblox\nCODE:\n```\nClass.FaceControls.RightLipCornerPuller\n```\n\n----------------------------------------\n\nTITLE: Listening for Pose Changes in Roblox Selfie Mode with Lua\nDESCRIPTION: Connects a handler to the 'poseChanged' event to detect when a pose is applied or removed. Receives the new and old pose names, allowing the script to respond accordingly, such as updating UI or state. Used within a LocalScript with the SelfieMode module.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/selfie-mode.md#_snippet_20\n\nLANGUAGE: Lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal SelfieMode = require(ReplicatedStorage:WaitForChild(\"SelfieMode\"))\n\nSelfieMode.poseChanged:Connect(function(newPose, oldPose)\n\tprint(\"Pose changed from\", oldPose, \"to\", newPose)\nend)\n```\n\n----------------------------------------\n\nTITLE: Configure Server-Side Emote Settings - Lua\nDESCRIPTION: This Script configures server-side settings for the EmoteBar module, such as the minimum number of players required for a mega emote and whether to display floating particles above players' heads.  Changes made here will automatically replicate to all clients. The script must be placed in a Script in ServerScriptService and requires ReplicatedStorage.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/emote-bar.md#_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal EmoteBar = require(ReplicatedStorage:WaitForChild(\"EmoteBar\"))\n\nEmoteBar.configureServer({\n\temoteMinPlayers = 2,\n\tplayParticles = false,\n})\n```\n\n----------------------------------------\n\nTITLE: Iterating Luau Array with ipairs and Adding Particles\nDESCRIPTION: Uses a `for...in ipairs()` loop to iterate efficiently through the `partsArray` obtained from `GetChildren()`. For each element (`part`) in the array, it creates a new `ParticleEmitter` instance and parents it to that `part`, adding particles to all objects in the array.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-5/loops-and-arrays.md#_snippet_11\n\nLANGUAGE: Luau\nCODE:\n```\n-- Gets an array listing the parts in PartsFolder\nlocal partsArray = partsFolder:GetChildren()\n\n-- Adds particles to every part in the array\nfor index, part in ipairs(partsArray) do\n\tlocal particles = Instance.new(\"ParticleEmitter\")\n\tparticles.Parent = part\nend\n```\n\n----------------------------------------\n\nTITLE: Explicit Type Casting with '::' Operator in Luau Lua\nDESCRIPTION: Shows explicit casting of values to different types using the '::' operator to aid the typechecker. Casting 'myNumber' to 'any' is allowed, but incompatible casts like 'number' to 'boolean' produce type errors. Useful for overriding inference temporarily.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/type-checking.md#_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal myNumber = 1\nlocal myString: string\n\nmyString = myNumber  -- Not OK; type conversion error\nmyString = myNumber :: any  -- OK; all expressions can be cast to 'any'\nlocal myFlag = myNumber :: boolean  -- Not OK; types are unrelated\n```\n\n----------------------------------------\n\nTITLE: Infinite While Loop in Luau\nDESCRIPTION: This snippet demonstrates an infinite `while` loop in Luau. The loop's condition is always `true`, so it runs indefinitely. Inside the loop, it prints \"Looping...\" and then pauses for 0.5 seconds using `task.wait(0.5)`.  It is crucial to include a delay like `task.wait()` to prevent the game from freezing or crashing.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/control-structures.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nwhile true do\n\tprint(\"Looping...\")\n\ttask.wait(0.5)\nend\n\n--[[ Resulting output:\nLooping...\nLooping...\nLooping...\nLooping...\n...\n]]\n```\n\n----------------------------------------\n\nTITLE: Connecting RemoteEvent OnClientEvent (All Clients) - Roblox Lua\nDESCRIPTION: This LocalScript connects a function to a RemoteEvent's `OnClientEvent`, similar to the previous example, but intended to handle events fired to all clients using `FireAllClients()`. The callback function receives and prints the single argument representing the remaining time.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/scripting/events/remote.md#_snippet_4\n\nLANGUAGE: Lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\n-- Get reference to remote event instance\nlocal remoteEvent = ReplicatedStorage:FindFirstChildOfClass(\"RemoteEvent\")\n\nlocal function onTimerUpdate(seconds)\n\tprint(seconds)\nend\n\n-- Connect function to event\nremoteEvent.OnClientEvent:Connect(onTimerUpdate)\n```\n\n----------------------------------------\n\nTITLE: Combining Algorithms - Getting Dressed\nDESCRIPTION: This Lua code snippet uses pseudocode to demonstrate combining multiple algorithms. The `getDressed` function calls two other functions, `pickClothes` and `putOnClothes`, which represent separate algorithms for picking out clothes and putting them on. This shows how larger problems can be broken down into a series of smaller algorithms.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/resources/coding-concept-algorithms.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\n-- First algorithm for picking clothes\nlocal function pickClothes()\n    pick top clothing\n    pick bottom clothing\n    pick Socks\n    pick Shoes\nend\n\n-- Second algorithm for putting clothes on\n\nlocal function putOnClothes()\n    put on top clothing\n    put on bottom clothing\n    put on socks\n    put on shoes\nend\n\n-- Main algorithm, calls pickClothes()and putOnClothes()\nlocal function getDressed()\n    pickClothes()\n    putOnClothes()\nend\n```\n\n----------------------------------------\n\nTITLE: Using `rawset` to Avoid `__newindex` Trigger in `__index` in Lua\nDESCRIPTION: Provides the solution to the potential stack overflow caused by interaction between `__index` and `__newindex`. By using `rawset(self, i, value)` within the `__index` function, the assignment bypasses the `__newindex` metamethod, allowing the value to be set directly into the table without causing recursion.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/metatables.md#_snippet_11\n\nLANGUAGE: lua\nCODE:\n```\nlocal t = setmetatable({}, {\n\t__index = function(self, i)\n\t\trawset(self, i, i * 10)\n\t\treturn self[i]\n\tend,\n\t__newindex = function(self, i, v)\n\t\t-- Don't set values to the table the normal way\n\tend\n})\nprint(t[1]) --> 10\n```\n\n----------------------------------------\n\nTITLE: Scripting the Status Display GUI in Roblox Lua\nDESCRIPTION: This LocalScript (`StatusDisplay`), parented to a `TextLabel` within a `ScreenGUI`, updates the label's text based on a `Status` StringValue stored in `ReplicatedStorage`. It initializes variables for necessary services and objects using `GetService` and `WaitForChild`, defines an `updateText` function to set the label's `Text` property, connects this function to the `Status` value's `Changed` event, and calls the function initially to display the current status upon joining.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/battle-royale-series/creating-a-gui.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal displayValues = ReplicatedStorage:WaitForChild(\"DisplayValues\")\nlocal status = displayValues:WaitForChild(\"Status\")\n\nlocal textLabel = script.Parent\n```\n\nLANGUAGE: Lua\nCODE:\n```\nlocal textLabel = script.Parent\n\nlocal function updateText()\n\ttextLabel.Text = status.Value\nend\n```\n\nLANGUAGE: Lua\nCODE:\n```\nlocal function updateText()\n\ttextLabel.Text = status.Value\nend\n\nstatus.Changed:Connect(updateText)\n```\n\nLANGUAGE: Lua\nCODE:\n```\nlocal function updateText()\n\ttextLabel.Text = status.Value\nend\n\nstatus.Changed:Connect(updateText)\nupdateText()\n```\n\n----------------------------------------\n\nTITLE: Illustrating Iteration with a For Loop in Lua\nDESCRIPTION: This Lua snippet demonstrates the iteration methodology using a 'for' loop. It shows how a block of code is repeated a specific number of times. The loop counts down from 10 to 1, decreasing the 'time' variable and waiting for one second in each iteration, representing a common pattern for timed events or animations in games.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-6/coding-concept-algorithms.md#_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nfor countDown = 10, 1, -1 do\n\ttime -= 1\n\ttask.wait(1)\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Speeder Variables in Luau\nDESCRIPTION: This Luau script defines key variables that control the speeder's performance characteristics. It uses a local Settings table to store values for default speed, boost speed, boost duration, and steering sensitivity, which can be adjusted by the user to customize gameplay.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/build-it-play-it-galactic-speedway/customize-and-share.md#_snippet_0\n\nLANGUAGE: Luau\nCODE:\n```\n-- ================================================================================\n-- Settings\n-- ================================================================================\n\nlocal Settings = {}\n\nSettings.DefaultSpeed = 100\t\t-- Speed when not boosted [Studs/second, Range 50-300]\nSettings.BoostSpeed = 200\t\t-- Speed when boosted [Studs/second, Maximum: 400]\nSettings.BoostAmount = 10\t\t-- Duration of boost in seconds\nSettings.Steering = 5\t\t-- How quickly the speeder turns [Range: 1-10]\n-- ================================================================================\n\nreturn Settings\n```\n\n----------------------------------------\n\nTITLE: Setting Up Collision Groups Lua\nDESCRIPTION: This snippet demonstrates how to use Roblox's PhysicsService to register custom collision groups and configure whether objects assigned to these groups should collide with each other. It shows registering 'Cubes' and 'Doors' groups and setting them to be non-collidable.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/workspace/collisions.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal PhysicsService = game:GetService(\"PhysicsService\")\n\nlocal cubes = \"Cubes\"\nlocal doors = \"Doors\"\n\n-- Register two collision groups\nPhysicsService:RegisterCollisionGroup(cubes)\nPhysicsService:RegisterCollisionGroup(doors)\n\n-- Set cubes to be non-collidable with doors\nPhysicsService:CollisionGroupSetCollidable(cubes, doors, false)\n```\n\n----------------------------------------\n\nTITLE: Changing a Part's Color with RGB Values in Roblox\nDESCRIPTION: Complete example showing how to change a part's color using RGB values. The code sets the color to a yellow shade (255, 230, 50) using the Color3.fromRGB() method.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-1/object-properties.md#_snippet_4\n\nLANGUAGE: Lua\nCODE:\n```\n-- Changes the color of a part\nworkspace.PracticePart.Color = Color3.fromRGB(255, 230, 50)\n```\n\n----------------------------------------\n\nTITLE: Failing Object Retrieval in Roblox Lua\nDESCRIPTION: This code snippet illustrates the incorrect way to retrieve objects from services such as `ReplicatedStorage` within `ReplicatedFirst` scripts. It highlights that objects may not yet have loaded at this point and should use `WaitForChild()`. Dependency: Roblox Engine.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/scripting/attributes.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal PickupManager = require(ReplicatedStorage.PickupManager)\n```\n\n----------------------------------------\n\nTITLE: Playing an Emote Programmatically in Lua\nDESCRIPTION: This Lua script triggers a specific emote animation on the player's character using the Humanoid:PlayEmote() method. It accesses the LocalPlayer's Character and Humanoid, then calls PlayEmote() with the string name of the desired emote (e.g., \"Shrug\"). The emote must be available in the character's HumanoidDescription.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/characters/emotes.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\nlocal humanoid = Players.LocalPlayer.Character.Humanoid\n\nhumanoid:PlayEmote(\"Shrug\")\n```\n\n----------------------------------------\n\nTITLE: Get player's keys function - Lua\nDESCRIPTION: This code defines a local function `getPlayerKeys` within the TreasureManager module to retrieve the player's lockpicks (keys) from their leaderstats. It takes the player's character as input and returns the lockpicks object.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-6/create-with-module-scripts.md#_snippet_11\n\nLANGUAGE: Lua\nCODE:\n```\nlocal function getPlayerKeys(whichCharacter)\n\tlocal player = Players:GetPlayerFromCharacter(whichCharacter)\n\tlocal leaderstats = player:FindFirstChild(\"leaderstats\")\n\treturn leaderstats:WaitForChild(\"Lockpicks\")\nend\n```\n\n----------------------------------------\n\nTITLE: Managing First Person Blaster Visuals and Cooldown UI in Roblox (Lua)\nDESCRIPTION: This client-side Lua script manages all first-person blaster visual logic, including dynamic attachment and updates of the cooldown meter for the Laser Tag experience. It requires several module dependencies for handling blast data, player attributes/state, blaster configurations, and visual animation routines. Key parameters include player state, blaster type, and event signals. Expected inputs are user state changes and blaster events, with outputs involving UI updates, animation, and model transformations in-game. The script uses RenderStepped to keep visuals synced with the camera and ensures UI state is correctly updated upon gameplay changes. Requires the referenced module scripts and blaster asset hierarchy in ReplicatedStorage.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/user-interface-design/implement-designs-in-studio.md#_snippet_21\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal Workspace = game:GetService(\"Workspace\")\nlocal RunService = game:GetService(\"RunService\")\n\nlocal BlastData = require(ReplicatedStorage.Blaster.BlastData)\nlocal PlayerAttribute = require(ReplicatedStorage.PlayerAttribute)\nlocal PlayerState = require(ReplicatedStorage.PlayerState)\nlocal getBlasterConfig = require(ReplicatedStorage.Blaster.getBlasterConfig)\n\nlocal runBlastVisuals = require(script.runBlastVisuals)\nlocal setupAnimations = require(script.setupAnimations)\nlocal addCooldownBar = require(script.addCooldownBar)\nlocal runCooldownBarEffect = require(script.runCooldownBarEffect)\n\nlocal laserBlastedBindableEvent = ReplicatedStorage.Instances.LaserBlastedBindableEvent\n\nlocal RIG_OFFSET_FROM_CAMERA = CFrame.new(2, -2, -3) * CFrame.Angles(math.rad(0.25), math.rad(95.25), 0)\n\nlocal localPlayer = Players.LocalPlayer\nlocal currentCamera = Workspace.CurrentCamera\n\nlocal rigModel = nil\nlocal cooldownBar = nil\nlocal animations = {}\n\nlocal function addFirstPersonVisuals()\n\tlocal blasterConfig = getBlasterConfig()\n\n\t-- Add the first person rig\n\trigModel = blasterConfig.RigModel:Clone()\n\trigModel.Parent = Workspace\n\n\t-- Add the cooldownBar\n\tcooldownBar = addCooldownBar(rigModel.PrimaryPart.CooldownBarAttachment)\n\n\tanimations = setupAnimations(blasterConfig, rigModel)\nend\n\nlocal function removeFirstPersonVisuals()\n\tfor _, animation in animations do\n\t\tanimation:Stop()\n\t\tanimation:Destroy()\n\t\tanimation = nil\n\tend\n\tif rigModel then\n\t\t-- This also destroys the cooldown bar since it is parented to the rig\n\t\trigModel:Destroy()\n\t\trigModel = nil\n\tend\nend\n\n-- Run first person visual effects when a blast occurs\nlaserBlastedBindableEvent.Event:Connect(function(blastData: BlastData.Type)\n\trunBlastVisuals(rigModel.PrimaryPart.TipAttachment, blastData, animations.blastAnimation)\n\trunCooldownBarEffect(cooldownBar)\nend)\n\n-- Bind the rig to the camera if it exists\nRunService.RenderStepped:Connect(function()\n\tif rigModel then\n\t\t-- Update to rig's CFrame relative to the camera's position and RIG_OFFSET_FROM_CAMERA\n\t\trigModel:PivotTo(currentCamera.CFrame * RIG_OFFSET_FROM_CAMERA)\n\tend\nend)\n\n-- Handles changing visuals when the blasterType changes while playing\nlocalPlayer:GetAttributeChangedSignal(PlayerAttribute.blasterType):Connect(function()\n\tlocal playerState = localPlayer:GetAttribute(PlayerAttribute.playerState)\n\tif playerState == PlayerState.Playing then\n\t\tremoveFirstPersonVisuals()\n\t\taddFirstPersonVisuals()\n\tend\nend)\n\n-- Handles changing visuals when the playerState changes\nlocalPlayer:GetAttributeChangedSignal(PlayerAttribute.playerState):Connect(function()\n\tlocal newPlayerState = localPlayer:GetAttribute(PlayerAttribute.playerState)\n\t-- Remove the visuals when the player is selecting a blaster or is in the lobby\n\tif newPlayerState == PlayerState.SelectingBlaster or newPlayerState == PlayerState.InLobby then\n\t\tremoveFirstPersonVisuals()\n\t-- Add the visuals back when the player finishes selecting the blaster.\n\telseif newPlayerState == PlayerState.Playing then\n\t\taddFirstPersonVisuals()\n\tend\nend)\n```\n\n----------------------------------------\n\nTITLE: Local Functions to Get Player Leaderstats in TreasureManager - Roblox Lua\nDESCRIPTION: Defines two utility local functions: getPlayerKeys, which retrieves the 'Lockpicks' leaderstat value for a player, and getPlayerTreasure, which retrieves 'Treasure'. Each takes a character object, extracts the Player from it, locates their leaderstats folder, and returns the relevant stat instance. These helper functions enable concise and modular updates to leaderboards from module functions. Dependencies: Players service, presence of 'leaderstats', 'Lockpicks', and 'Treasure' IntValues.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-6/create-with-module-scripts.md#_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\n------------------ Local Functions\nlocal function getPlayerKeys(whichCharacter)\n\tlocal player = Players:GetPlayerFromCharacter(whichCharacter)\n\tlocal leaderstats = player:FindFirstChild(\"leaderstats\")\n\treturn leaderstats:WaitForChild(\"Lockpicks\")\nend\nlocal function getPlayerTreasure(whichCharacter)\n\tlocal player = Players:GetPlayerFromCharacter(whichCharacter)\n\tlocal leaderstats = player:FindFirstChild(\"leaderstats\")\n\treturn leaderstats:WaitForChild(\"Treasure\")\nend\n------------------ Module Functions\n```\n\n----------------------------------------\n\nTITLE: Creating New Reserved Servers for Teleportation in Roblox\nDESCRIPTION: Demonstrates how to configure TeleportOptions to create a new reserved server when teleporting players by setting the ShouldReserveServer property to true.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/projects/teleport.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal teleportOptions = Instance.new(\"TeleportOptions\")\nteleportOptions.ShouldReserveServer = true\n```\n\n----------------------------------------\n\nTITLE: Retrieving Enum Items using Roblox Lua\nDESCRIPTION: This snippet demonstrates how to get all items of a specific Enum using the GetEnumItems() method on Enum.PartType. It iterates over the returned list of EnumItems and prints each item. This is useful for enumerating all possible values within a predefined enumeration. The snippet depends on the global Enum object provided by the Roblox environment and expects no input parameters other than the Enum to query. Output is the enumeration items printed to the console.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/enums.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal partTypes = Enum.PartType:GetEnumItems()\nfor index, enumItem in partTypes do\n\tprint(enumItem)\nend\n\n--[[\n\tEnum.PartType.Ball\n\tEnum.PartType.Block\n\tEnum.PartType.Cylinder\n]]\n```\n\n----------------------------------------\n\nTITLE: Assigning Points to Player Upon Join - Lua\nDESCRIPTION: Updates the 'playerPoints' dictionary by setting the current player's name as a key, with value 0. This persists the points data for each player, indexed by their username, and illustrates the use of variable keys in dictionaries.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-5/intro-to-dictionaries.md#_snippet_12\n\nLANGUAGE: lua\nCODE:\n```\nlocal function setPoints(newPlayer)\n\tlocal name = newPlayer.Name\n\tprint(\"hello \" .. name)\n\tplayerPoints[name] = 0\nend\n```\n\n----------------------------------------\n\nTITLE: Checking Multiple Users' Direct Chat Capability with TextChatService (Lua)\nDESCRIPTION: This asynchronous method allows checking the direct messaging capability for a group of users via the Roblox TextChatService. It's used to verify if a specific set of users are permitted to engage in direct communications with each other according to their settings.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/chat/guidelines.md#_snippet_5\n\nLANGUAGE: Lua\nCODE:\n```\nTextChatService:CanUsersDirectChatAsync()\n```\n\n----------------------------------------\n\nTITLE: Handling Deactivation of Selfie Mode Actions in Roblox LocalScript\nDESCRIPTION: Connects to the 'actionDeactivated' event to respond when a primary or sub-action is deactivated, receiving the 'Action' object. Logs the action's name upon deactivation. Should be used within a LocalScript with the SelfieMode module.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/selfie-mode.md#_snippet_18\n\nLANGUAGE: Lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal SelfieMode = require(ReplicatedStorage:WaitForChild(\"SelfieMode\"))\n\nSelfieMode.actionDeactivated:Connect(function(action)\n\tprint(action.name, \"deactivated\")\nend)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Sequencing with a Function in Lua\nDESCRIPTION: This Lua function illustrates the sequencing methodology, where an algorithm is composed of a precise series of steps executed in order. The function 'createBridge' lists the necessary actions to create and place a bridge object in a game environment. Each step is performed sequentially to achieve the final result.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-6/coding-concept-algorithms.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nlocal function createBridge()\n  create new block\n  size block\n  set color\n  rotate\n  set location\n  parent to workspace\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Try-Catch Structures in C#\nDESCRIPTION: This snippet shows standard exception handling in C# using `try` and `catch` blocks. Code that might throw an exception is placed in the `try` block, and specific exceptions are caught and handled in corresponding `catch` blocks.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/luau-csharp-comparison.md#_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\nvoid fireWeapon() {\n\tif (!weaponEquipped) {\n\t\t// Use a user-defined exception\n\t\tthrow new InvalidWeaponException(\"No weapon equipped!\");\n\t}\n\t// Proceed...\n}\n\ntry {\n\tfireWeapon();\n} catch (InvalidWeaponException ex) {\n\t// An error was raised\n}\n```\n\n----------------------------------------\n\nTITLE: Checking timerActive Boolean in Button Press Handling - Roblox - Lua\nDESCRIPTION: Modifies the if conditional in buttonPressed to only allow timer start when timerActive is false, ensuring single activation per countdown cycle. Inputs: otherPart, timerActive. Output: control over re-entrancy of the timer.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-4/create-a-timed-bridge.md#_snippet_10\n\nLANGUAGE: Lua\nCODE:\n```\nlocal function buttonPressed(otherPart)\n   local character = otherPart.Parent\n   local humanoid = character:FindFirstChildWhichIsA(\"Humanoid\")\n   if humanoid and timerActive == false then\n      startTimer()\n   end\n\nend\n```\n\n----------------------------------------\n\nTITLE: Example Responses for Different Scopes\nDESCRIPTION: These JSON snippets showcase the expected responses when listing keys for different scopes in a data store. The first response shows the keys in the 'global' scope, the second shows keys in the 'special' scope, and the third demonstrates a response when listing keys for all scopes, including both 'global' and 'special'. Each response includes the scope and key for each entry and a `nextPageCursor` for pagination.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/guides/data-store-api-handling.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n// Response for global scope\n{ \"keys\": [{ \"scope\": \"global\", \"key\": \"User_2\" }], \"nextPageCursor\": \"\" }\n\n// Response for special scope\n{\"keys\":[{\"scope\":\"special\",\"key\":\"User_6\"},{\"scope\":\"special\",\"key\":\"User_7\"}],\"nextPageCursor\":\"\"}\n\n// Response for AllScopes\n{\"keys\":[{\"scope\":\"global\",\"key\":\"User_3\"},{\"scope\":\"global\",\"key\":\"User_4\"},{\"scope\":\"global\",\"key\":\"User_5\"},{\"scope\":\"special\",\"key\":\"User_6\"},{\"scope\":\"special\",\"key\":\"User_7\"}],\"nextPageCursor\":\"\"}\n```\n\n----------------------------------------\n\nTITLE: Server Network Module - Handling Events\nDESCRIPTION: This ModuleScript in ServerScriptService manages BindableEvents to handle network messages received from the client. It creates a new BindableEvent for each unique ID and connects it to the RemoteEvent's OnServerEvent.  When a client sends a message, it finds the corresponding BindableEvent and fires it, passing along the player and any additional arguments. This depends on a RemoteEvent named 'RemoteEvent' within ReplicatedStorage.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/scripting/module.md#_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\n-- ModuleScript in ServerScriptService named NetworkManagerServer\nlocal NetworkManagerServer = {}\n\nlocal networkSignalList = {}\nfunction NetworkManagerServer.GetServerEventSignal(id)\n\tlocal bindableEvent = Instance.new(\"BindableEvent\")\n\t-- Linking the new BindableEvent to the id\n\ttable.insert(networkSignalList, {\n\t\tid = id,\n\t\tbindableEvent = bindableEvent,\n\t})\n\treturn bindableEvent.Event\nend\n\n-- Connecting to\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal remoteEvent = ReplicatedStorage:WaitForChild(\"RemoteEvent\")\nremoteEvent.OnServerEvent:Connect(function(player, id, ...)\n\t-- Finding every bindable event that matches the id of the received remote event\n\tfor _, signal in networkSignalList do\n\t\tif signal.id == id then\n\t\t\tsignal.bindableEvent:Fire(player, ...)\n\t\tend\n\tend\nend)\n\nreturn NetworkManagerServer\n\n```\n\n----------------------------------------\n\nTITLE: Update GameManager Loop - Display End Status (Lua)\nDESCRIPTION: This code snippet is responsible for updating the display with the end game status in the main game loop of the GameManager. It calls the `getEndStatus` function from the MatchManager to retrieve the appropriate message and then uses the DisplayManager to update the status in the GUI. Also, it waits for a short duration to let players see the message.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/battle-royale-series/cleanup-and-reset.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nwhile true do\n  displayManager.updateStatus(\"Waiting for Players\")\n\n  repeat\n    task.wait(gameSettings.intermissionDuration)\n  until #Players:GetPlayers() >= gameSettings.minimumPlayers\n\n  displayManager.updateStatus(\"Get ready!\")\n  task.wait(gameSettings.transitionTime)\n\n  matchManager.prepareGame()\n  local endState = matchEnd.Event:Wait()\n\n  local endStatus = matchManager.getEndStatus(endState)\n  displayManager.updateStatus(endStatus)\n\n  task.wait(gameSettings.transitionTime)\nend\n```\n\n----------------------------------------\n\nTITLE: Checking User Chat Capability with TextChatService (Lua)\nDESCRIPTION: This asynchronous method is part of the Roblox TextChatService API. It checks whether a specific user is allowed to send *any* in-experience chat messages, respecting their privacy and parental settings. It's a crucial check for experiences implementing custom chat solutions or validating user permissions before allowing communication.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/chat/guidelines.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nTextChatService:CanUserChatAsync()\n```\n\n----------------------------------------\n\nTITLE: Coloring User Names Randomly in Roblox Chat (Lua)\nDESCRIPTION: This Lua LocalScript, placed in StarterPlayerScripts, customizes chat message prefixes by assigning a random color to each user's name. It utilizes the `TextChatService.OnChatWindowAdded` callback to intercept new messages, derives new message properties, and sets the `PrefixTextProperties.TextColor3` based on the user's ID modulo the number of available colors in a predefined list.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/chat/chat-window.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal TextChatService = game:GetService(\"TextChatService\")\n\nlocal chatWindowConfiguration = TextChatService.ChatWindowConfiguration\n\nlocal nameColors = {\n\tColor3.fromRGB(255, 0, 0),\n\tColor3.fromRGB(0, 255, 0),\n\tColor3.fromRGB(0, 0, 255),\n\tColor3.fromRGB(255, 255, 0),\n}\n\nTextChatService.OnChatWindowAdded = function(message: TextChatMessage)\n\tlocal properties = chatWindowConfiguration:DeriveNewMessageProperties()\n\n\tlocal textSource = message.TextSource\n\tif textSource then\n\t\tlocal index: number = (textSource.UserId % #nameColors) + 1\n\t\tlocal randomColor: Color3 = nameColors[index]\n\n    \tproperties.PrefixTextProperties = chatWindowConfiguration:DeriveNewMessageProperties()\n\t\tproperties.PrefixTextProperties.TextColor3 = randomColor\n\tend\n\n\treturn properties\nend\n```\n\n----------------------------------------\n\nTITLE: Connecting an Anonymous Function to PlayerAdded and CharacterRemoving Events in Roblox with Luau\nDESCRIPTION: This code sample demonstrates using an anonymous function to connect event handlers to Players.PlayerAdded and each Player's CharacterRemoving event. It depends on modules retrieved from ReplicatedStorage, specifically a SaveManager with a saveData function, and the Players service. The anonymous function lets you reference variables from the parent scope and triggers saveProgress when a character is removed. Inputs: player join and character removal events. Outputs: the saveProgress function is called with character and its position. The script assumes SaveManager and required children exist in ReplicatedStorage.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/scripting/events/index.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal SaveManager = require(ReplicatedStorage:WaitForChild(\"SaveManager\"))\n\nlocal function saveProgress(character)\n\tlocal position = character:FindFirstChild(\"HumanoidRootPart\").Position\n\tSaveManager.saveData(character, position)\nend\n\n-- Anonymous function that calls saveProgress() when a character is removed\n-- from the experience (in this case, when the player leaves).\nPlayers.PlayerAdded:Connect(function(player)\n\tplayer.CharacterRemoving:Connect(saveProgress)\nend)\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Hit Validation with Raycasting in Roblox Lua\nDESCRIPTION: This server-side function validates hit legitimacy by both checking positional proximity and performing a raycast to detect obstructions between weapon and hit target. It ensures no wall or invalid object blocks the shot, allowing only plausible hits to succeed. Requires: getPlayerToolHandle, playerFired.Character, workspace:Raycast, and correct object hierarchy; all parameters must be valid and non-nil.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/scripting/intermediate-scripting/hit-detection-with-lasers.md#_snippet_29\n\nLANGUAGE: Lua\nCODE:\n```\nlocal function isHitValid(playerFired, characterToDamage, hitPosition)\n\t-- Validate distance between the character hit and the hit position\n\tlocal characterHitProximity = (characterToDamage.HumanoidRootPart.Position - hitPosition).Magnitude\n\tif characterHitProximity > 10 then\n\t\treturn false\n\tend\n\n\t-- Check if shooting through walls\n\tlocal toolHandle = getPlayerToolHandle(playerFired)\n\tif toolHandle then\n\t\tlocal rayLength = (hitPosition - toolHandle.Position).Magnitude\n\t\tlocal rayDirection = (hitPosition - toolHandle.Position).Unit\n\t\tlocal raycastParams = RaycastParams.new()\n\t\traycastParams.FilterDescendantsInstances = {playerFired.Character}\n\t\tlocal rayResult = workspace:Raycast(toolHandle.Position, rayDirection * rayLength, raycastParams)\n\n\t\t-- If an instance was hit that was not the character then ignore the shot\n\t\tif rayResult and not rayResult.Instance:IsDescendantOf(characterToDamage) then\n\t\t\treturn false\n\t\tend\n\tend\n\n\treturn true\nend\n```\n\n----------------------------------------\n\nTITLE: Setting API Key Request Header for Open Cloud Assets API in Bash\nDESCRIPTION: Demonstrates how to add the required x-api-key HTTP header in a curl command when making requests to the Open Cloud Assets API. The header ensures authorization using an API key string stored in a variable. This snippet is foundational for all API interactions and must be included in all requests. The example uses bash shell syntax. No additional dependencies beyond curl are required.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/guides/usage-assets.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--header 'x-api-key: ${ApiKey}' \\\n```\n\n----------------------------------------\n\nTITLE: Script - Team-Based Avatar Name and Display Customization (Lua)\nDESCRIPTION: This script modifies the Humanoid's display name or visibility based on the team the player belongs to. It assigns a generic name for 'Guards' and hides name display for 'Ninjas.' It relies on Roblox's team system and triggers upon player character spawning, respecting team colors for visual identification.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/characters/name-health-display.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nlocal function onPlayerAdded(player)\n\tplayer.CharacterAdded:Connect(function(character)\n\t\tlocal humanoid = character:FindFirstChildWhichIsA(\"Humanoid\")\n\t\tif humanoid then\n\t\t\t-- Set the name of all guards to generic \"Guard\"\n\t\t\tif player.Team.Name == \"Guards\" then\n\t\t\t\thumanoid.DisplayName = \"Guard\"\n\t\t\t-- Hide the name for all ninjas\n\t\t\telseif player.Team.Name == \"Ninjas\" then\n\t\t\t\thumanoid.DisplayDistanceType = Enum.HumanoidDisplayDistanceType.None\n\t\t\tend\n\t\tend\n\tend)\nend\n\nPlayers.PlayerAdded:Connect(onPlayerAdded)\n```\n\n----------------------------------------\n\nTITLE: Assigning User Input to a Variable in Roblox Lua\nDESCRIPTION: Assigns the value returned by 'storyMaker:GetInput()' to the variable 'name1', enabling the game to capture user responses. This step is essential for dynamic storytelling based on player input.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/build-it-play-it-story-games/coding-a-question.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\n-- GLOBAL VARIABLES\nlocal storyMaker = require(script:WaitForChild(\"StoryMaker\"))\n\n-- Code controlling the game\nlocal playing = true\n\nwhile playing do\n  storyMaker:Reset()\n\n  -- Code story between the dashes\n  -- =============================================\n     local name1 = storyMaker:GetInput()\n\n  -- =============================================\n\n  -- Add the story variable between the parenthesis below\n  storyMaker:Write()\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Humanoid Health to Zero on Touch\nDESCRIPTION: Within the if condition, assigns zero to 'humanoid.Health', effectively 'killing' the character in the game. This code triggers the health reduction whenever a Humanoid is detected, completing the trap logic.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-3/traps-with-if-statements.md#_snippet_6\n\nLANGUAGE: Luau\nCODE:\n```\nif humanoid then\n   print(\"Found a Humanoid\")\n   humanoid.Health = 0\nend\n```\n\n----------------------------------------\n\nTITLE: Checking Item Existence in a Set in Lua\nDESCRIPTION: Shows how to check if a set contains a specific item using the Set:contains() method. Returns true if the item exists and false otherwise.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/metatables.md#_snippet_16\n\nLANGUAGE: lua\nCODE:\n```\nlocal fruits = Set.new({\"Apple\", \"Lemon\", \"Orange\", \"Cherry\", \"Lime\", \"Peach\"})\n\nlocal result1 = fruits:contains(\"Cherry\")\nprint(result1) -- true\n\nlocal result2 = fruits:contains(\"Watermelon\")\nprint(result2) -- false\n```\n\n----------------------------------------\n\nTITLE: Setting and Equipping Custom Emotes in Lua\nDESCRIPTION: This Lua script, intended for a LocalScript within StarterCharacterScripts, customizes a player's available and equipped emotes. It defines a table of custom emotes with their corresponding asset IDs using HumanoidDescription:SetEmotes() and then specifies which emotes appear in the menu and their order using HumanoidDescription:SetEquippedEmotes(). Requires access to the LocalPlayer's Character and Humanoid.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/characters/emotes.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\nlocal humanoid = Players.LocalPlayer.Character.Humanoid\nlocal humanoidDescription = humanoid.HumanoidDescription\n\n-- Set custom emotes within a table\nlocal emoteTable = {\n  [\"Hello\"] = {3576686446},\n  [\"Stadium\"] = {3360686498},\n  [\"Tilt\"] = {3360692915},\n  [\"Shrug\"] = {3576968026},\n  [\"Salute\"] = {3360689775},\n  [\"Point\"] = {3576823880}\n}\nhumanoidDescription:SetEmotes(emoteTable)\n\n-- Equip emotes in a specific order\nlocal equippedEmotes = {\"Hello\", \"Stadium\", \"Tilt\", \"Shrug\", \"Salute\", \"Point\"}\nhumanoidDescription:SetEquippedEmotes(equippedEmotes)\n```\n\n----------------------------------------\n\nTITLE: Using AND for Speed Limit Checks in Roblox Luau\nDESCRIPTION: Implements a conditional that uses the 'and' operator to check both for a Humanoid object and if the current WalkSpeed is below a maximum threshold, preventing excessive speed boosts.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-3/powerups-with-if-statements.md#_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nif humanoid and humanoid.WalkSpeed <= 50 then\n humanoid.WalkSpeed += 10\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Season Metadata and Timeframe in Roblox Lua\nDESCRIPTION: Sets up season information including the season's title, description, unique ID, and starting/ending UTC dates using Lua assignments and the 'DateTime.fromUniversalTime' function. Requires access to the Roblox Lua 'DateTime' API. Inputs include descriptive strings and valid date–time numeric parameters. Outputs season information for use in UI display and logic such as countdowns; accuracy of start and end times is crucial for correct seasonal operation.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/feature-packages/season-passes.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nstartUtc = DateTime.fromUniversalTime(2024, 10, 01, 17, 0, 0),\nendUtc = DateTime.fromUniversalTime(2025, 2, 28, 17, 0, 0),\ntitle = \"Season 1\",\ndescription = \"Into Space City\",\nseasonId = \"season1\",\n```\n\n----------------------------------------\n\nTITLE: Handling Asset Ownership Validation Error\nDESCRIPTION: This error occurs when attempting to validate an asset (`%s`) that is not owned by the current user or a group they belong to. Validation requires ownership of the asset.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/validation-errors.md#_snippet_10\n\nLANGUAGE: Text\nCODE:\n```\nAsset `%s` is not owned by the current user. You can only validate assets that you or a group you belong to owns.\n```\n\n----------------------------------------\n\nTITLE: Using Camera Controls for Animation Setup\nDESCRIPTION: Details on manipulating the camera view using mouse and keyboard controls to obtain optimal angles for posing characters. Explains common commands like move (WASD), rotate (mouse), zoom (scroll), and focus (F).\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/build-it-play-it-island-of-move/creating-animations.md#_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<video controls src=\"../../assets/education/build-it-play-it-island-of-move/creating-animations/show-move-camera.mp4\" width=\"100%\"></video>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<table>\\\n<thead>\\\n<tr>\\\n<th>**Action**</th>\\\n<th>**Control**</th>\\\n</tr>\\\n</thead>\\\n<tbody>\\\n<tr>\\\n<td>**Move**</td>\\\n<td><kbd>W A S D</kbd></td>\\\n</tr>\\\n<tr>\\\n<td>**Rotate**</td>\\\n<td>Hold the right mouse button to look around</td>\\\n</tr>\\\n<tr>\\\n<td>**Zoom**</td>\\\n<td>Use the scroll wheel</td>\\\n</tr>\\\n<tr>\\\n<td>**Focus**</td>\\\n<td>Press <kbd>F</kbd> to focus the camera on a specific part</td>\\\n</tr>\\\n</tbody>\\\n</table>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"alert-warning\">\\\n<strong>Can't move the camera?</strong>\\\nIf the camera doesn't move when you press <kbd>W A S D</kbd>, click somewhere inside the game world.\\\n</div>\n```\n\n----------------------------------------\n\nTITLE: Modifying Game Information (Lua)\nDESCRIPTION: This code snippet from the GameSettings script allows developers to modify text displayed in the game, such as the game's name, developer name, and level-up message. It demonstrates how to assign new string values to the corresponding GameSettings variables.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/build-it-play-it-island-of-move/personalize-the-game.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal GameSettings = {}\n\n-- ================================================================================\n-- Game Information\n-- These settings affect text that you see in game\n-- ================================================================================\n\nGameSettings.gameName = \"Move It Simulator\"\nGameSettings.developerName = \"RobloxUser\"\n\nGameSettings.levelUpMessage = \"Level Up!\"\n```\n\n----------------------------------------\n\nTITLE: Set Camera FieldOfView with Lua\nDESCRIPTION: This Lua code sets the FieldOfView property of the camera to a specific value (20 in this case) to simulate zooming. It accesses the Players service and the CurrentCamera object to modify its properties. This affects how much of the game world is visible at once, giving a flatter look.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/input-and-camera/control-the-users-camera.md#_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\nlocal RunService = game:GetService(\"RunService\")\n\nlocal player = Players.LocalPlayer\nlocal camera = workspace.CurrentCamera\n\nlocal CAMERA_DEPTH = 64\nlocal HEIGHT_OFFSET = 2\n\ncamera.FieldOfView = 20\n\nlocal function updateCamera()\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Tables with For Loops in Luau\nDESCRIPTION: This snippet shows how to iterate over Luau tables. `ipairs` is used for array-like tables (numeric indices starting from 1), iterating in order. `pairs` iterates over all key-value pairs in a table, including non-numeric keys, in an arbitrary order.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/luau-csharp-comparison.md#_snippet_4\n\nLANGUAGE: Luau\nCODE:\n```\nlocal abcList = {\"a\", \"b\", \"c\"}\n\nfor i, v in ipairs(abcList) do\n\tprint(v)\nend\n\nlocal abcDictionary = { a=1, b=2, c=3 }\n\nfor k, v in pairs(abcDictionary) do\n\tprint(k, v)\nend\n```\n\n----------------------------------------\n\nTITLE: Get Product Info for Pass\nDESCRIPTION: This code snippet uses the `MarketplaceService:GetProductInfo()` function to retrieve information about a specific pass, such as its name, price, and description. It takes a `productId` and `Enum.InfoType.GamePass` as input. It then displays the retrieved pass information, ensuring the product is available for sale.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/production/monetization/game-passes.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal MarketplaceService = game:GetService(\"MarketplaceService\")\n\n-- Replace the placeholder ID with your pass ID\nlocal productId = 000000\n\nlocal success, productInfo = pcall(function()\n\treturn MarketplaceService:GetProductInfo(productId, Enum.InfoType.GamePass)\nend)\n\n\nif success and productInfo then\n\t-- Check if product is for sale\n\tif productInfo.IsForSale then\n\t-- Display product information\n\t-- Replace the print statements with UI code to display the pass\n  \tprint(\"Pass Name: \" .. productInfo.Name)\n  \tprint(\"Price in Robux: \" .. productInfo.PriceInRobux)\n  \tprint(\"Description: \" .. productInfo.Description)\n\telse\n\t\tprint(\"This product isn't for sale\")\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Receiving Actor Messages in Parallel in Lua\nDESCRIPTION: Shows how a script within an `Actor` can bind a callback function to a specific message topic (\"Greeting\") using `Actor:BindToMessageParallel()`. The callback receives the message content (a string in this case) and executes in a parallel context. Requires the script to be a descendant of an `Actor`.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/scripting/multithreading.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\n-- Get the actor this script is parented to\nlocal actor = script:GetActor()\n\n-- Bind a callback for the \"Greeting\" message topic\nactor:BindToMessageParallel(\"Greeting\", function(greetingString)\n\tprint(actor.Name, \"-\", greetingString)\nend)\n\nprint(\"Bound to messages\")\n```\n\n----------------------------------------\n\nTITLE: Adjusting Player Movement Speed and Sanity Check Tolerance\nDESCRIPTION: This snippet demonstrates how to increase player walk speed to modify gameplay dynamics. It highlights the importance of adjusting the movement sanity check tolerance correspondingly to avoid false positives in movement validation, ensuring fair gameplay detection.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/gameplay-scripting/implement-blasters.md#_snippet_8\n\nLANGUAGE: Lua\nCODE:\n```\nlocal ENABLED_WALK_SPEED = 60 -- updated line, be sure to change back\n```\n\n----------------------------------------\n\nTITLE: Publishing a Message via Open Cloud API using OAuth 2.0 Token (Bash)\nDESCRIPTION: Shows an example cURL command to publish a message to a specific topic within a Roblox universe using the Open Cloud Messaging Service API, authenticated via an OAuth 2.0 access token. Requires the access token passed in the `Authorization: Bearer <access_token>` header and the target Universe ID substituted in the URL placeholder `{universe}`. The request uses POST and sends the topic and message as JSON data.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/guides/usage-messaging.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request POST 'https://apis.roblox.com/cloud/v2/universes/{universe}:publishMessage' \\\n--header 'Authorization: Bearer <access_token>' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\"topic\": \"some-topic\",\"message\":\"message to publish\"}'\n```\n\n----------------------------------------\n\nTITLE: Accessing LeftLipCornerDown Control in Roblox\nDESCRIPTION: Reference to the LeftLipCornerDown control which lowers the corners of the mouth downwards in a frown, useful for sad or disappointed expressions.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/characters/facial-animation/facs-poses-reference.md#_snippet_28\n\nLANGUAGE: Roblox\nCODE:\n```\nClass.FaceControls.LeftLipCornerDown\n```\n\n----------------------------------------\n\nTITLE: Adding Data to a Memory Store Queue in Lua\nDESCRIPTION: This snippet shows how to asynchronously add an item to a memory store queue by calling AddAsync with the value, expiration time in seconds, and optional priority. Here, a value \"User_1234\" is added with a 30-second expiry and priority 1. The call is wrapped in a pcall to safely handle occasional network failures. Omitting priority or setting it to 0 enforces FIFO order.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud-services/memory-stores/queue.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal MemoryStoreService = game:GetService(\"MemoryStoreService\")\n\nlocal queue = MemoryStoreService:GetQueue(\"Queue1\")\n\nlocal addSuccess, addError = pcall(function()\n\tqueue:AddAsync(\"User_1234\", 30, 1)\nend)\nif not addSuccess then\n\twarn(addError)\nend\n```\n\n----------------------------------------\n\nTITLE: Applying HumanoidDescription to all existing players in the game\nDESCRIPTION: This script creates a new HumanoidDescription with specified assets and properties, then applies it to all current players' Humanoids. It ensures all players have consistent appearance modifications when the script runs. Suitable for game-wide appearance updates.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/characters/appearance.md#_snippet_7\n\nLANGUAGE: Lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nfor _, player in Players:GetPlayers() do\n\tlocal humanoid = player.Character and player.Character:FindFirstChildWhichIsA(\"Humanoid\")\n\tif humanoid then\n\t\t-- Create a HumanoidDescription\n\t\tlocal humanoidDescription = Instance.new(\"HumanoidDescription\")\n\t\thumanoidDescription.HatAccessory = \"2551510151,2535600138\"\n\t\thumanoidDescription.BodyTypeScale = 0.1\n\t\thumanoidDescription.ClimbAnimation = 619521311\n\t\thumanoidDescription.Face = 86487700\n\t\thumanoidDescription.GraphicTShirt = 1711661\n\t\thumanoidDescription.HeadColor = Color3.new(0, 1, 0)\n\t\thumanoid:ApplyDescription(humanoidDescription)\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Using elseif and else Luau\nDESCRIPTION: Demonstrates the syntax and basic usage of `elseif` and `else` statements within an `if` condition.  This snippet shows how to handle multiple conditions and provide alternative actions based on the evaluation of those conditions.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-3/multiple-conditions.md#_snippet_0\n\nLANGUAGE: Luau\nCODE:\n```\nif isGreen then\n   print(\"Go\")\nelseif isYellow then\n   print(\"Slow\")\nelseif isPedestrians then\n   print(\"Wait\")\nelse\n   print(\"stop\")\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring SocialInteractions Module via configure() in Lua\nDESCRIPTION: This code snippet shows how to use the `configure` function to override default settings of the SocialInteractions module. It adjusts the `waistOrientationWeight` and disables the `useChatAnimations` feature. The module is required from ReplicatedStorage.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/social-interactions.md#_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal SocialInteractions = require(ReplicatedStorage:WaitForChild(\"SocialInteractions\"))\n\n-- Make waist rotation more pronounced and disable the chat animations feature\nSocialInteractions.configure({\n\twaistOrientationWeight = 0.75,\n\tuseChatAnimations = false,\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Player Respawn Time in Roblox Lua\nDESCRIPTION: This Lua code snippet, intended for the SetupHumanoid script, demonstrates how to set the global respawn time for all players in a Roblox experience. It accesses the Players service and modifies the RespawnTime property to a specified value (in seconds), overriding the default respawn delay.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/gameplay-scripting/spawn-respawn.md#_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\nPlayers.RespawnTime = 10 -- new line, in seconds\n```\n\n----------------------------------------\n\nTITLE: Client-side Force Field Visuals Management Script in Roblox Lua\nDESCRIPTION: This Lua client script manages the visibility of the force field UI when a player's character spawns or respawns. It disables default first-person force field visuals and enables a custom UI, ensuring players see appropriate visuals only for their own spawn event. It utilizes the Players service, waits for the ForceField object in the character, and toggles the ForceFieldGui visibility accordingly.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/user-interface-design/implement-designs-in-studio.md#_snippet_16\n\nLANGUAGE: Lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nlocal localPlayer = Players.LocalPlayer\n\nlocal function onCharacterAddedAsync(character: Model)\n\tlocal forceField = character:WaitForChild(\"ForceField\", 3)\n\tif not forceField then\n\t\t-- If the player spawns at a spawn point with ForceField disabled\n\t\treturn\n\tend\n\n\tforceField.Visible = false\n\tlocalPlayer.PlayerGui:WaitForChild(\"ForceFieldGui\").Enabled = true\n\tforceField.Destroying:Wait()\n\tlocalPlayer.PlayerGui.ForceFieldGui.Enabled = false\nend\n\nif localPlayer.Character then\n\tonCharacterAddedAsync(localPlayer.Character)\nend\n\nlocalPlayer.CharacterAdded:Connect(onCharacterAddedAsync)\n```\n\n----------------------------------------\n\nTITLE: Initializing an Empty TreasureManager Module - Roblox Lua\nDESCRIPTION: This snippet demonstrates how to create and return a new module table in Roblox Lua. It sets up the basic structure for the TreasureManager module script, required as the starting point for adding custom module functions. There are no parameters or dependencies for this operation. The returned table will contain all module-level functions and values.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-6/create-with-module-scripts.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal TreasureManager = {}\n\nreturn TreasureManager\n```\n\n----------------------------------------\n\nTITLE: VIP Users' Chat Bubble Customization in Roblox Lua\nDESCRIPTION: This script customizes chat bubbles for VIP users by checking the 'IsVIP' attribute of message senders. When a message from a VIP is detected, the script overrides the background color, text color, and font face of the chat bubble. It relies on the TextChatService's OnBubbleAdded event and should be placed in a client-side script. Dependencies include Roblox's TextChatService, Players service, and the Font enum.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/chat/bubble-chat.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nlocal TextChatService = game:GetService(\"TextChatService\")\nlocal Players = game:GetService(\"Players\")\n\n-- Event handler for when a new chat bubble is added to the experience\nTextChatService.OnBubbleAdded = function(message: TextChatMessage, adornee: Instance)\n\t-- Check if the chat message has a TextSource (sender) associated with it\n\tif message.TextSource then\n\t\t-- Create a new BubbleChatMessageProperties instance to customize the chat bubble\n\t\tlocal bubbleProperties = Instance.new(\"BubbleChatMessageProperties\")\n\n\t\t-- Get the user who sent the chat message based on their UserId\n\t\tlocal player = Players:GetPlayerByUserId(message.TextSource.UserId)\n\n\t\tif player:GetAttribute(\"IsVIP\") then\n\t\t\t-- If the player is a VIP, customize the chat bubble properties\n\t\t\tbubbleProperties.TextColor3 = Color3.fromHex(\"#F5CD30\")\n\t\t\tbubbleProperties.BackgroundColor3 = Color3.fromRGB(25, 27, 29)\n\t\t\tbubbleProperties.FontFace = Font.fromEnum(Enum.Font.PermanentMarker)\n\t\tend\n\t\treturn bubbleProperties\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Measuring Game Load Time - Lua\nDESCRIPTION: This Lua code snippet measures the time it takes for a Roblox game to load and prints the load time in seconds, along with the number of instances loaded in the workspace.  It relies on the `os.clock()` function to measure elapsed time and the `game.Loaded` event to determine when the game has finished loading. The result is printed to the output console.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/performance-optimization/identify.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal startTime = os.clock()\n\ngame.Loaded:Connect(function()\n  local loadTime = os.clock() - startTime\n  local roundedLoadTime = math.round(loadTime * 10000) / 10000 -- four decimal places\n  print(\"Game loaded in \" .. roundedLoadTime .. \" seconds.\")\n  print(\"Number of instances loaded: \" .. #workspace:GetDescendants())\nend)\n```\n\n----------------------------------------\n\nTITLE: Initializing Ordered Data Store in Roblox DataStoreService Using Lua\nDESCRIPTION: This snippet illustrates obtaining an ordered data store instance through DataStoreService:GetOrderedDataStore, which provides sorted data capabilities absent in the default data stores. It simply fetches an ordered data store named 'CharacterAges' for further operations such as sorting and pagination. This requires the Roblox DataStoreService and appropriate permissions for ordered data stores.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud-services/data-stores/index.md#_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nlocal DataStoreService = game:GetService(\"DataStoreService\")\n\nlocal characterAgeStore = DataStoreService:GetOrderedDataStore(\"CharacterAges\")\n```\n\n----------------------------------------\n\nTITLE: Easing direction - InOut (Lua)\nDESCRIPTION: This Lua code snippet shows how to set both the easing style and direction for a tween. It configures a rotation tween to use `Enum.EasingStyle.Cubic` and `Enum.EasingDirection.InOut`, causing the animation to ease in during the first half and ease out during the second half. It requires a pre-existing `TweenService` and a UI object assigned to the `object` variable.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/ui/animation.md#_snippet_12\n\nLANGUAGE: lua\nCODE:\n```\nlocal tweenInfo = TweenInfo.new(2, Enum.EasingStyle.Cubic, Enum.EasingDirection.InOut)\nlocal tween = TweenService:Create(object, tweenInfo, {Rotation = 45})\n```\n\n----------------------------------------\n\nTITLE: Creating and Managing Beam Guidance to Tutorial Goals in Roblox (Lua LocalScript)\nDESCRIPTION: This LocalScript guides players visually by creating a beam from the player's camera to current tutorial goals. It fetches goal parts from the TutorialManager, attaches a beam to the player's HumanoidRootPart, and updates the beam's target as the player progresses through goals. It also sets up proximity prompts on goal objects to trigger goal completion events.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/build-it-play-it-mansion-of-wonder/adding-scripts.md#_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal tutorialFolder = ReplicatedStorage:WaitForChild(\"PlayerTutorial\")\nlocal TutorialManager = require(tutorialFolder:WaitForChild(\"TutorialManager\"))\nlocal TutorialEndEvent = tutorialFolder:WaitForChild(\"TutorialEnd\")\n\nlocal player = Players.LocalPlayer\nlocal goalParts = TutorialManager.getTutorialGoals()\nlocal playerBeam = nil\nlocal goalIndex = nil\n\nlocal function getTargetAttachment()\n local currentTarget = goalParts[goalIndex.Value]\n local interactionPart = currentTarget:FindFirstChild(\"InteractionPart\")\n local attachment = interactionPart and interactionPart:FindFirstChildOfClass(\"Attachment\")\n\n if not attachment then\n  attachment = Instance.new(\"Attachment\")\n  attachment.Name = \"BeamAttachment\"\n  attachment.Parent = currentTarget\n end\n\n return attachment\nend\n\nlocal function updateBeamTarget()\n playerBeam = player.Character.HumanoidRootPart:FindFirstChildOfClass(\"Beam\")\n\n local targetBeamAttachment = getTargetAttachment()\n\n if targetBeamAttachment then\n  playerBeam.Attachment1 = targetBeamAttachment\n else\n  warn(\"Attachment not found in a goal. Check that goals have attachments or they're included under the InteractionPart\")\n end\nend\n\nlocal function setupGoals()\n for _, part in goalParts do\n  local interactionPart = part:FindFirstChild(\"InteractionPart\")\n  local proximityPrompt = interactionPart and interactionPart:FindFirstChild(\"ProximityPrompt\")\n\n  if proximityPrompt then\n   proximityPrompt.Triggered:Connect(function(player)\n    proximityPrompt.Enabled = false\n    TutorialManager.nextGoal(player, goalParts)\n    TutorialManager.interactGoal(player)\n   end)\n else\n  warn(\"Proximity prompt not included in goal. Add one to each goal part under the InteractionPart\")\n end\nend\nend\n\nlocal function createBeamForCharacter(character)\n local humanoidRootPart = character:WaitForChild(\"HumanoidRootPart\")\n local playerBeamAttachment = Instance.new(\"Attachment\")\n local beamTemplate = tutorialFolder:WaitForChild(\"TutorialBeam\")\n\n if not beamTemplate then\n  warn(\"Tutorial Beam not found in ReplicatedStorage\")\n end\n\n playerBeamAttachment.Name = \"BeamAttachment\"\n playerBeamAttachment.Parent = humanoidRootPart\n\n local targetBeamAttachment = getTargetAttachment()\n\n playerBeam = beamTemplate:Clone()\n playerBeam.Attachment0 = playerBeamAttachment\n playerBeam.Attachment1 = targetBeamAttachment\n playerBeam.Enabled = true\n playerBeam.Parent = humanoidRootPart\nend\n\nlocal function setupPlayer()\n setupGoals()\n TutorialManager.setupPlayerProgress(player)\n goalIndex = player:WaitForChild(\"GoalProgress\")\n\n player.CharacterAdded:Connect(createBeamForCharacter)\n if player.Character then\n  createBeamForCharacter(player.Character)\n end\nend\n\nsetupPlayer()\ngoalIndex.Changed:Connect(updateBeamTarget)\n```\n\n----------------------------------------\n\nTITLE: Script for Day and Night Toggle Using Lighting Service in Roblox Lua\nDESCRIPTION: A server script attached to a tool that toggles the game's Lighting ClockTime between day and night when activated. It demonstrates how to modify game environment settings through a tool activation.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/players/tools.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nlocal Lighting = game:GetService(\"Lighting\")\n\nlocal tool = script.Parent\nlocal function onActivate()\n\tif Lighting.ClockTime >= 8 and Lighting.ClockTime < 16 then\n\t\tLighting.ClockTime = 20\n\telse\n\t\tLighting.ClockTime = 8\n\tend\nend\ntool.Activated:Connect(onActivate)\n```\n\n----------------------------------------\n\nTITLE: Checking Ad Eligibility and Kicking Players - Lua\nDESCRIPTION: This code snippet demonstrates how to check if a player is eligible to see ads using `PolicyService.GetPolicyInfoForPlayerAsync`. If `AreAdsAllowed` returns false, the player is kicked from the experience with a message.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/production/promotion/comply-with-advertising-standards.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\nlocal PolicyService = game:GetService(\"PolicyService\")\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal player = Players.LocalPlayer\n\n\n-- Get the policy info for the user\n\tlocal success, result = pcall(PolicyService.GetPolicyInfoForPlayerAsync, PolicyService, player)\n\tif success and result then\n\t\tif not result.AreAdsAllowed then\n\n\t\t\t-- Remove ineligible user from accessing the experience\n\t\t\tplayer:Kick(\"You are ineligible to access the experience.\")\n\t\tend\n\telse\n\t\tprint(\"Failed to get policy for player\", player.Name, \"Exception:\", result)\n\tend\n```\n\n----------------------------------------\n\nTITLE: Enabling Text Chat UI Components with Roblox Lua\nDESCRIPTION: This Lua snippet demonstrates how to enable the chat window, input bar, and channel tabs in the Roblox TextChatService from a client script. It obtains references to configuration objects using FindFirstChildOfClass on TextChatService, then sets each component's Enabled property to true if found. This script is intended to be run from a local script within StarterPlayerScripts during gameplay to configure the chat UI. The snippet requires Roblox's TextChatService and its related configuration classes to exist.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/chat/chat-window.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal TextChatService = game:GetService(\"TextChatService\")\n\nlocal ChatWindowConfiguration = TextChatService:FindFirstChildOfClass(\"ChatWindowConfiguration\")\nlocal ChatInputBarConfiguration = TextChatService:FindFirstChildOfClass(\"ChatInputBarConfiguration\")\nlocal ChannelTabsConfiguration = TextChatService:FindFirstChildOfClass(\"ChannelTabsConfiguration\")\n\n-- Enable chat window\nif ChatWindowConfiguration then\n\tChatWindowConfiguration.Enabled = true\nend\n-- Enable input bar\nif ChatInputBarConfiguration then\n\tChatInputBarConfiguration.Enabled = true\nend\n-- Enable channel tabs\nif ChannelTabsConfiguration then\n\tChannelTabsConfiguration.Enabled = true\nend\n```\n\n----------------------------------------\n\nTITLE: Discord Bot on_message Event Handler - Python\nDESCRIPTION: This asynchronous function handles incoming messages in Discord. It parses the message to extract user and game IDs, deletes user data from both standard and ordered data stores using the `data_stores_api`, and replies to the message with success or failure messages.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/webhooks/automate-right-to-erasure.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n        @client.event\n        async def on_message(message):\n            # Parses and validates message\n            user_id, start_place_ids = message_parser.parse_message(message)\n            if not user_id or not start_place_ids:\n                return\n\n            # Deletes standard data stores user data\n            [successes, failures] = data_stores_api.delete_standard_data_stores(user_id, start_place_ids)\n            if successes:\n                await message.reply(f\"Deleted standard data stores data for \" +\n                                   f\"user ID: {user_id}, data: {dict(successes)}\")\n            if failures:\n                await message.reply(f\"Failed to delete standard data stores data for \" +\n                                   f\"user ID: {user_id}, data: {dict(failures)}\")\n\n            # Deletes ordered data stores user data\n            [successes, failures] = data_stores_api.delete_ordered_data_stores(user_id, start_place_ids)\n            if successes:\n                await message.reply(f\"Deleted ordered data stores data for \" +\n                                   f\"user ID: {user_id}, data: {dict(successes)}\")\n            if failures:\n                await message.reply(f\"Failed to delete standard data stores data for \" +\n                                   f\"user ID: {user_id}, data: {dict(failures)}\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Set Subtraction in Lua\nDESCRIPTION: Implements set subtraction using the __sub metamethod, allowing sets to be subtracted with the - operator. This function returns a new set with all items from the first set that don't exist in the second set.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/metatables.md#_snippet_19\n\nLANGUAGE: lua\nCODE:\n```\nfunction Set:__sub(otherSet)\n\tlocal result = Set.new()\n\tfor entry in self do\n\t\tresult[entry] = true\n\tend\n\tfor entry in otherSet do\n\t\tresult[entry] = nil\n\tend\n\treturn result\nend\n\nlocal allFruits = Set.new({\"Apple\", \"Lemon\", \"Mango\", \"Cherry\", \"Lime\", \"Peach\"})\nlocal sourFruits = Set.new({\"Lemon\", \"Lime\"})\n\nlocal sweetFruits = allFruits - sourFruits\nsweetFruits:output() -- Mango, Apple, Cherry, Peach\n```\n\n----------------------------------------\n\nTITLE: Retrieving Asset Operation Status with cURL in Bash\nDESCRIPTION: A cURL command to retrieve the status of an asset operation using the operationId returned from asset creation or update. Requires an API key in the x-api-key header.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/guides/usage-assets.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location 'https://apis.roblox.com/assets/v1/operations/{operationId}' \\\n--header 'x-api-key: {$ApiKey}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Season Tiers and Rewards in Roblox Lua\nDESCRIPTION: Defines a Lua table to represent season pass tiers, specifying XP requirements and free/premium rewards per tier for use in Roblox. Dependencies include Roblox Lua runtime and proper asset ID references for reward icons. The snippet expects each tier's 'upperBoundXP' as the XP threshold, and reward definitions with 'icon', 'displayName', and 'rewardId' fields. Intended for static configuration; reward IDs are primarily for backend use, not player-facing.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/feature-packages/season-passes.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\ntiers = {\n        [1] = {\n            upperBoundXP = 100,\n            freeReward = {\n                icon = 128181721602852,\n                displayName = \"Ice Lance\",\n                rewardId = \"iceLance\",\n            },\n            premiumReward = {\n                icon = 95882371958115,\n                displayName = \"Blast Shield\",\n                rewardId = \"blastShield\",\n            },\n        },\n    }\n```\n\n----------------------------------------\n\nTITLE: Numerical Signal Example (Constant Value) in Lua\nDESCRIPTION: This example provides concrete values for calculating the numerical signal using a constant value. It uses `server_sum_PowerLevel`, `joining_player_PowerLevel`, and `constant_value` to compute a score.  This demonstrates how the formula would be utilized in a practical scenario with explicit attribute values.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/matchmaking/attributes-and-signals.md#_snippet_14\n\nLANGUAGE: lua\nCODE:\n```\nlocal server_sum_PowerLevel = 4500\nlocal joining_player_PowerLevel = 9901\nlocal max_relevant_difference = 1500\nlocal constant_value = 5000\n\nlocal diff = math.abs(server_sum_PowerLevel + joining_player_PowerLevel - constant_value)\nlocal score = 1 - math.min(diff / max_relevant_difference, 1)\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Variadic Functions in Luau\nDESCRIPTION: Explains how to define a custom variadic function in Luau using the `...` token as the last parameter. The example function `variadic` accepts one named argument (`named`) and any number of additional arguments, which are packed into a table `arguments` using `{...}` for processing.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/functions.md#_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\nlocal function variadic(named, ...)\n\tlocal arguments = {...} -- pack the extra arguments into a table\n\tprint(\"Named argument =\", named)\n\tfor i, value in arguments do\n\t\tprint(\"Input No.\", i, \"=\", value)\n\tend\nend\n\nvariadic(10, \"Hi\", 20, \"Variadic Function\")\n--[[ Resulting output:\nNamed argument = 10\nInput No. 1 = Hi\nInput No. 2 = 20\nInput No. 3 = Variadic Function\n]]\n```\n\n----------------------------------------\n\nTITLE: Handling Model Asset Detail Load Failure\nDESCRIPTION: This error occurs when the system fails to load detailed information for model assets. Ensure all required model assets exist and are accessible.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/validation-errors.md#_snippet_39\n\nLANGUAGE: Text\nCODE:\n```\nFailed to load detailed information for model assets. Make sure all model assets exist and try again.\n```\n\n----------------------------------------\n\nTITLE: Handling Scene Sequencing in EventSequencer with Lua\nDESCRIPTION: This snippet demonstrates how to use the EventSequencer's onOrchestrationFinished event to automatically load and sequence scenes in order. It uses Roblox's ReplicatedStorage to access the EventSequencer module and checks for the names of scenes to determine the next one to load, looping back to a 'PreShow' scene when all scenes are complete. Expected input are the scene names; output is the dynamic loading and starting of scenes. Requires EventSequencer to be defined in ReplicatedStorage. Do not invoke loadScene from schema lifecycle hooks.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/event-sequencer.md#_snippet_13\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal EventSequencer = require(ReplicatedStorage:WaitForChild(\"EventSequencer\"))\n\n-- Figure out next scene to load when current scene finishes\nEventSequencer.onOrchestrationFinished:Connect(function(endedSceneName)\n\tif endedSceneName == \"PreShow\" then\n\t\t-- \"PreShow\" ended; load the first scene in the concert\n\t\tEventSequencer.loadScene(\"Track1\")\n\telseif endedSceneName == \"Track1\" then\n\t\t-- \"Track1\" ended; load the second scene in the concert\n\t\tEventSequencer.loadScene(\"Track2\")\n\telse\n\t\t-- Loop back to the pre-show scene\n\t\tEventSequencer.loadScene(\"PreShow\")\n\tend\nend)\n```\n\n----------------------------------------\n\nTITLE: Handling Dynamic Head Model Load Failure\nDESCRIPTION: This error occurs when the system fails to load the model for a dynamic head (`%s`). Ensure the model asset exists and is accessible.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/validation-errors.md#_snippet_45\n\nLANGUAGE: Text\nCODE:\n```\nFailed to load model for dynamic head `%s`. Make sure model exists and try again.\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Teleport Screens in Roblox Lua\nDESCRIPTION: Shows how to set a custom teleport GUI as the loading screen for teleportation. This client-side script sets a ScreenGui from ReplicatedStorage as the loading screen that displays during teleportation.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/projects/teleport.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal TeleportService = game:GetService(\"TeleportService\")\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal teleportGui = ReplicatedStorage.TeleportGui\n\nTeleportService:SetTeleportGui(teleportGui)\n```\n\n----------------------------------------\n\nTITLE: Categorical Signal Example (Constant Value) in Lua\nDESCRIPTION: This example demonstrates how to use a constant value within a categorical signal calculation.  It checks if `server_GameNotStarted` is equal to the boolean `true`.  It highlights how the code provides a practical implementation example.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/matchmaking/attributes-and-signals.md#_snippet_26\n\nLANGUAGE: lua\nCODE:\n```\nlocal server_GameNotStarted = true\n\nif server_GameNotStarted = true then\n  return 1\nelse\n  return 0\nend\n```\n\n----------------------------------------\n\nTITLE: Passing Consistently Indexed Tables via BindableEvents in Lua\nDESCRIPTION: Illustrates the best practice of passing tables with consistent indexing (either entirely numeric or entirely string keys) through `BindableEvent`. The example fires the event twice, once with an array (`inventoryData`) and once with a dictionary (`characterData`). The receiving function successfully iterates and prints the contents of both table types. Avoid mixing index types or using `nil` values within tables passed through bindables. Requires a `BindableEvent` named \"TestBindableEvent\".\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/scripting/events/bindable.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal ServerScriptService = game:GetService(\"ServerScriptService\")\n\nlocal bindableEvent = ServerScriptService:WaitForChild(\"TestBindableEvent\")\n\nlocal function onEventFire(passedTable)\n\tfor k, v in passedTable do\n\t\tprint(k .. \" = \" .. v)\n\t\t--> 1 = Sword\n\t\t--> 2 = Bow\n\t\t--> CharName = Diva Dragonslayer\n\t\t--> CharClass = Rogue\n\tend\nend\n\n-- Connect function to event\nbindableEvent.Event:Connect(onEventFire)\n```\n\nLANGUAGE: lua\nCODE:\n```\nlocal ServerScriptService = game:GetService(\"ServerScriptService\")\n\nlocal bindableEvent = ServerScriptService:WaitForChild(\"TestBindableEvent\")\n\n-- Numerically indexed table\nlocal inventoryData = {\n\t\"Sword\", \"Bow\"\n}\n-- Dictionary table\nlocal characterData = {\n\tCharName = \"Diva Dragonslayer\",\n\tCharClass = \"Rogue\"\n}\n\n-- Fire event with consistently-indexed tables\nbindableEvent:Fire(inventoryData)\nbindableEvent:Fire(characterData)\n```\n\n----------------------------------------\n\nTITLE: Defining Named Module Table in Roblox Lua\nDESCRIPTION: Illustrates renaming the default module table to a more meaningful PascalCase identifier such as RewardManager to reflect the module's purpose. This enhances clarity and follows naming conventions distinguishing module tables from local variables. The table stores reusable functions and variables that other scripts can access after requiring the module.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-6/intro-to-module-scripts.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal RewardManager = {}\n\nreturn RewardManager\n```\n\n----------------------------------------\n\nTITLE: Adding Position Parameters to Cube Creation Function - Luau\nDESCRIPTION: Modifies the `makeCube()` function signature to accept three parameters: `spawnX`, `spawnY`, and `spawnZ`. These parameters are placeholders for the desired coordinates where the cube should be positioned when created.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-4/nested-loops.md#_snippet_6\n\nLANGUAGE: Luau\nCODE:\n```\n-- Creates individual cubes\nlocal function makeCube(spawnX, spawnY, spawnZ)\n    local cube = Instance.new(\"Part\")\n    cube.Size = Vector3.new(CUBE_SIZE, CUBE_SIZE, CUBE_SIZE)\n    cube.Color = currentColor\n    cube.Parent = workspace\nend\n```\n\n----------------------------------------\n\nTITLE: Removing all instances of a specific value in an array with backward iteration in Luau\nDESCRIPTION: This code demonstrates removing all occurrences of a specific value, such as 'Bread', from an array by iterating backwards through the array. This prevents index skipping due to element shifting after removal.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-5/make-changes-to-arrays.md#_snippet_5\n\nLANGUAGE: Lua\nCODE:\n```\nfor index = #playerItems, 1, -1 do\n\tif playerItems[index] == \"Bread\" then\n\t\ttable.remove(playerItems, index)\n\tend\nend\n\nfor index = 1, #playerItems do\n\tlocal itemString = playerItems[index]\n\tprint(\"Index \" .. index .. \": \" .. itemString)\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Emotes on Server - EmoteBar - Lua\nDESCRIPTION: Provides an example of server-side configuration for the EmoteBar library. It uses `configureServer` to disable default emotes and then `setEmotes` to define a custom list of emotes with their names, animations, images, and default tempos. This function must be called from a Script.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/emote-bar.md#_snippet_5\n\nLANGUAGE: Lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal EmoteBar = require(ReplicatedStorage:WaitForChild(\"EmoteBar\"))\n\nEmoteBar.configureServer({\n\tuseDefaultEmotes = false,\n})\n\nEmoteBar.setEmotes({\n\t{\n\t\tname = \"Hello\",\n\t\tanimation = \"rbxassetid://3344650532\",\n\t\timage = \"rbxassetid://7719817462\",\n\t\tdefaultTempo = 1,\n\t},\n\t{\n\t\tname = \"Applaud\",\n\t\tanimation = \"rbxassetid://5915693819\",\n\t\timage = \"rbxassetid://7720292217\",\n\t\tdefaultTempo = 2,\n\t},\n})\n```\n\n----------------------------------------\n\nTITLE: Opening an Item View in MerchBooth - Lua\nDESCRIPTION: Demonstrates navigating directly to a specific item's view given its itemId using openItemView. Ensures item registration precedes view operation. Requires MerchBooth module and valid itemId. Operates in a LocalScript context, affecting the game's merchandise UI.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/merch-booth.md#_snippet_26\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal MerchBooth = require(ReplicatedStorage:WaitForChild(\"MerchBooth\"))\n\nlocal success, errorMessage = pcall(function()\n\tMerchBooth.addItemAsync(4819740796)\nend)\nif success then\n\tMerchBooth.openItemView(4819740796)\nend\n\n```\n\n----------------------------------------\n\nTITLE: Getting All Attributes in Roblox Lua\nDESCRIPTION: This code snippet retrieves all attributes of an instance and iterates through them. It uses `GetAttributes()` to obtain a dictionary of attribute names and values and prints the attributes.  Dependency: Roblox Engine.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/scripting/attributes.md#_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nlocal cabbage = script.Parent\n\nlocal cabbageAttributes = cabbage:GetAttributes()\n\nprint(cabbageAttributes.GrowthRate) --> 2\n\nfor k, v in cabbageAttributes do\n\tprint(k, v)\nend\n```\n\n----------------------------------------\n\nTITLE: Initializing Trap Part Reference in Luau\nDESCRIPTION: Defines a variable referencing the parent part of the script, which is used as the trap trigger. This setup is necessary for detecting when the trap is touched. No dependencies other than Roblox's Lua environment are required.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-3/traps-with-if-statements.md#_snippet_0\n\nLANGUAGE: Luau\nCODE:\n```\n-- If a player touches this part, set their health to 0\n\nlocal trapPart = script.Parent\n```\n\n----------------------------------------\n\nTITLE: Adding Match Reset Function to MatchManager\nDESCRIPTION: Creates a resetMatch() function in MatchManager that calls playerManager.resetPlayers() to handle resetting players between matches.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/battle-royale-series/cleanup-and-reset.md#_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nfunction MatchManager.resetMatch()\n\tplayerManager.resetPlayers()\nend\n\nmatchStart.Event:Connect(startTimer)\nmatchEnd.Event:Connect(stopTimer)\n\nreturn MatchManager\n```\n\n----------------------------------------\n\nTITLE: Preparing player and connecting death event in `preparePlayer()`\nDESCRIPTION: This snippet initializes player setup by assigning a respawn location, loading their character, cloning a weapon, and retrieving the humanoid component. It then connects an anonymous function to the humanoid's `Died` event, which calls the respawn function when the player dies, ensuring proper respawning behavior during gameplay.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/battle-royale-series/ending-matches.md#_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nlocal function preparePlayer(player, whichSpawn)\n\tplayer.RespawnLocation = whichSpawn\n\tplayer:LoadCharacter()\n\n\tlocal character = player.Character or player.CharacterAdded:Wait()\n\tlocal sword = playerWeapon:Clone()\n\tsword.Parent = character\n\n\tlocal humanoid = character:WaitForChild(\"Humanoid\")\n\n\thumanoid.Died:Connect(function()\n\t\trespawnPlayerInLobby(player)\n\tend)\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Player Portrait Image Label\nDESCRIPTION: This snippet explains how to insert and set up an ImageLabel for displaying the player's portrait within the player indicator UI. It covers anchor point, size, transparency, scale type, and UI aspect ratio constraints to ensure proper display across different screens.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/user-interface-design/implement-designs-in-studio.md#_snippet_12\n\nLANGUAGE: Roblox Lua\nCODE:\n```\n<!-- No code provided; involves setting ImageLabel properties for portrait display -->\n```\n\n----------------------------------------\n\nTITLE: Server-Side Randomized Lightning Strike Event Generation in Roblox Lua\nDESCRIPTION: This Lua script runs on the server to generate randomized timing data for lightning strikes in a loop. It waits for a random duration between 3 and 10 seconds, creates a data structure representing visual and timing parameters for a lightning bolt using 'CreateFXData', and fires a remote event 'lightningEvent' to all clients with this data. Dependencies include Roblox's task.wait and a remote event setup. Inputs are internal timing controls, outputs are fired events containing lightning effect data sent to clients for synchronized playback.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/the-mystery-of-duvall-drive/develop-a-moving-world.md#_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nlocal function LightningUpdate()\n\twhile true do\n\t\ttask.wait(rand:NextNumber(3.0, 10.0))\n\t\tlocal info = CreateFXData()\n\t\tlightningEvent:FireAllClients(info)\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Accessing LeftCheekPuff Control in Roblox\nDESCRIPTION: Reference to the LeftCheekPuff control which puffs up the character's left cheek, useful for blowing or holding air expressions.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/characters/facial-animation/facs-poses-reference.md#_snippet_26\n\nLANGUAGE: Roblox\nCODE:\n```\nClass.FaceControls.LeftCheekPuff\n```\n\n----------------------------------------\n\nTITLE: Displaying Round Results on Client in Roblox Lua (RoundResultsGuiSetup)\nDESCRIPTION: This client-side script (`RoundResultsGuiSetup`) listens for the `roundWinnerRemote` event fired by the server. The `onRoundWinner` function receives the winning team and the local player's team. It compares them to determine if the player won or lost, plays the corresponding victory or defeat sound effect, and sets the appropriate text (e.g., \"Victory!\" or \"Defeat...\") to be displayed on the round results UI.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/gameplay-scripting/add-rounds.md#_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nlocal function onRoundWinner(winner: Team, localTeam: Team?)\n\tlocal victoryDefeatText = \"Round ended!\"\n\tif localTeam then\n\t\t-- If our team won, we'll display Victory! Otherwise display Defeat...\n\t\tlocal isVictory = winner == localTeam\n\t\tif isVictory then\n\t\t\tvictorySound:Play()\n\t\t\tvictoryDefeatText = VICTORY_TEXT\n\t\telse\n\t\t\tdefeatSound:Play()\n\t\t\tvictoryDefeatText = DEFEAT_TEXT\n\t\tend\n\tend\n```\n\n----------------------------------------\n\nTITLE: Configuring Push-to-Talk Voice Chat Using Roblox Lua\nDESCRIPTION: This client-side Lua script enables a push-to-talk voice chat functionality where the local player's microphone is muted by default and only activated while holding the 'V' key. It requires Roblox services Players and UserInputService, and the local player's AudioDeviceInput object. The script listens for key press and release events to toggle microphone muting, ensuring players speak only while the key is pressed. The script is intended to be run in a client context, inserted in ReplicatedStorage with the RunContext property set to Client.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/audio/add-voice-chat.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\nlocal UserInputService = game:GetService(\"UserInputService\")\n\nlocal audioIn: AudioDeviceInput = Players.LocalPlayer:WaitForChild(\"AudioDeviceInput\")\nlocal pushToTalkKey = Enum.KeyCode.V\n\naudioIn.Muted = true\n\nUserInputService.InputBegan:Connect(function(input: InputObject)\n    if input.KeyCode == pushToTalkKey then\n        audioIn.Muted = false\n    end\nend)\n\nUserInputService.InputEnded:Connect(function(input: InputObject)\n    if input.KeyCode == pushToTalkKey then\n        audioIn.Muted = true\n    end\nend)\n```\n\n----------------------------------------\n\nTITLE: Enabling Future Lighting Technology in Roblox Studio\nDESCRIPTION: This snippet guides selecting the Lighting service in Roblox Studio to activate the Future lighting system by changing the `Technology` property to `Enum.Technology.Future`. This enables advanced global and local lighting features for more realistic rendering.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/lighting/enhance-indoor-environments.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\n -- Select Lighting service in Explorer\n local lighting = game:GetService(\"Lighting\")\n\n -- Set the Lighting Technology to Future\n lighting.Technology = Enum.Technology.Future\n```\n\n----------------------------------------\n\nTITLE: Handling Layered Clothing Asset Load Failure\nDESCRIPTION: Indicates failures loading components of a layered clothing accessory (`%s`), such as the mesh, texture, or other child assets. Ensure all necessary assets exist and are accessible.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/validation-errors.md#_snippet_47\n\nLANGUAGE: Text\nCODE:\n```\nFailed to load layered clothing accessory `%s`. Make sure mesh exists and try again.\n\nFailed to load texture for layered clothing accessory `%s`. Make sure texture exists and try again.\n\nFailed to load children assets (Meshes, Textures, etc.) for `%s`. Make sure the assets exist and try again.\n```\n\n----------------------------------------\n\nTITLE: ClientLaserManager: Receives and displays laser effects for other players in Roblox Lua\nDESCRIPTION: This client script listens for laser firing events from the server to display visual laser beams for other players in the game. It ignores the local player's shots to avoid duplication, calling the LaserRenderer createLaser method to render the laser from the sender's tool handle to the end position. It depends on the LaserRenderer module and RemoteEvent 'LaserFired'.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/scripting/intermediate-scripting/hit-detection-with-lasers.md#_snippet_34\n\nLANGUAGE: Lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal LaserRenderer = require(Players.LocalPlayer.PlayerScripts:WaitForChild(\"LaserRenderer\"))\n\nlocal eventsFolder = ReplicatedStorage.Events\n\nlocal function createPlayerLaser(playerWhoShot, toolHandle, endPosition)\n\tif playerWhoShot ~= Players.LocalPlayer then\n\t\tLaserRenderer.createLaser(toolHandle, endPosition)\n\tend\nend\n\neventsFolder.LaserFired.OnClientEvent:Connect(createPlayerLaser)\n```\n\n----------------------------------------\n\nTITLE: Using PlayerViewService for Camera Orientation in Roblox Lua\nDESCRIPTION: This code snippet shows how to use PlayerViewService to map device camera orientation to workspace camera in Picture-in-Picture mode, creating a more immersive experience on mobile devices.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/roblox-connect.md#_snippet_1\n\nLANGUAGE: Roblox Lua\nCODE:\n```\n-- Map device camera orientation to workspace camera\nlocal deviceCameraCFrame = PlayerViewService:GetDeviceCameraCFrame()\n-- Use the CFrame to adjust camera orientation\n```\n\n----------------------------------------\n\nTITLE: Positioning Bottom-Most Trim Assets in Roblox\nDESCRIPTION: A data table showing the exact positioning information for placing the bottom-most trim modular assets around the roof perimeter. Includes asset names, CFrame positions, and orientation values to recreate the sample environment.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/environmental-art/construct-your-world.md#_snippet_12\n\nLANGUAGE: Lua\nCODE:\n```\nExtTrimALong\t`-48, 31, 285`\t`0, -90, 0`\nExtTrimALong\t`-8, 31, 285`\t`0, 0, 0`\nExtTrimAShort\t`-8, 31, 245`\t`0, 0, 0`\nExtTrimALong\t`-8, 31, 235`\t`0, 0, 0`\nExtTrimALong\t`-8, 31, 195`\t`0, 90, 0`\nExtTrimALong\t`-48, 31, 195`\t`0, 90, 0`\nExtTrimALong\t`-88, 31, 195`\t`-88, 31, 195`\nExtTrimALong\t`-88, 31, 125`\t`0, -90, 0`\nExtTrimALong\t`-48, 31, 125`\t`0, -90, 0`\nExtTrimALong\t`-8, 31, 125`\t`0, 0, 0`\nExtTrimAShort\t`-8, 31, 85`\t`0, 0, 0`\nExtTrimALong\t`-8, 31, 75`\t`0, 0, 0`\nExtTrimALong\t`-8, 31, 35`\t`0, 90, 0`\nExtTrimBCorner\t`-8, 31, 285`\t`0, 0, 0`\nExtTrimBCorner\t`-8, 31, 195`\t`0, 90, 0`\nExtTrimBCorner\t`-8, 31, 125`\t`0, 0, 0`\nExtTrimBCorner\t`-8, 31, 35`\t`0, 90, 0`\n```\n\n----------------------------------------\n\nTITLE: Adjusting Player Speed (Lua)\nDESCRIPTION: This code snippet from the GameSettings script enables developers to modify the player's starting move speed. By changing the numerical value assigned to `startMoveSpeed`, the player's initial speed within the game can be customized.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/build-it-play-it-island-of-move/personalize-the-game.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n-- Multiplier determines how much players need to move before a level; 1 = small amount of movement, 3 much more movement\nlocal growthModifier = 1.2\n-- How fast a player starts with 0 levels\nlocal startMoveSpeed = 30\n-- The amount of WalkSpeed added per level\nlocal speedBoostPerLevel = 3\n```\n\n----------------------------------------\n\nTITLE: data_stores_api.py\nDESCRIPTION: Provides functions to interact with Roblox's Open Cloud Data Stores API for deleting user data from standard and ordered data stores. Uses HTTP DELETE requests and handles success and failure responses, returning a summary of operations.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/webhooks/automate-right-to-erasure.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nimport requests\nimport bot_config\nfrom collections import defaultdict\n\n\"\"\"\nCalls Data Stores Open Cloud API to delete all entries for a user_id configured in\nSTANDARD_DATA_STORE_ENTRIES. Returns a list of successful deletions and failures to delete.\n\"\"\"\ndef delete_standard_data_stores(user_id, start_place_ids):\n    successes = defaultdict(list)\n    failures = defaultdict(list)\n    for owned_start_place_id in bot_config.STANDARD_DATA_STORE_ENTRIES:\n        if owned_start_place_id not in start_place_ids:\n            continue\n        universe_id, universe_entries = bot_config.STANDARD_DATA_STORE_ENTRIES[owned_start_place_id]\n        for (data_store_name, scope, entry_key) in universe_entries:\n            entry_key = entry_key.replace(\"{user_id}\", user_id)\n            response = requests.delete(\n                f\"https://apis.roblox.com/datastores/v1/universes/{universe_id}/standard-datastores/datastore/entries/entry\",\n                headers={\"x-api-key\": bot_config.OPEN_CLOUD_API_KEY},\n                params={\n                    \"datastoreName\": data_store_name,\n                    \"scope\": scope,\n                    \"entryKey\": entry_key\n                }\n            )\n            if response.status_code in [200, 204]:\n                successes[owned_start_place_id].append((data_store_name, scope, entry_key))\n            else:\n                failures[owned_start_place_id].append((data_store_name, scope, entry_key))\n    return successes, failures\n\n\"\"\"\nCalls Ordered Data Stores Open Cloud API to delete all entries for a user_id configured in\nORDERED_DATA_STORE_ENTRIES. Returns a list of successful deletions and failures to delete.\n\"\"\"\ndef delete_ordered_data_stores(user_id, start_place_ids):\n    successes = defaultdict(list)\n    failures = defaultdict(list)\n    for owned_start_place_id in bot_config.ORDERED_DATA_STORE_ENTRIES:\n        if owned_start_place_id not in start_place_ids:\n            continue\n        universe_id, universe_entries = bot_config.ORDERED_DATA_STORE_ENTRIES[owned_start_place_id]\n        for (data_store_name, scope, entry_key) in universe_entries:\n            entry_key = entry_key.replace(\"{user_id}\", user_id)\n            response = requests.delete(\n                f\"https://apis.roblox.com/ordered-data-stores/v1/universes/{universe_id}/orderedDatastores/{data_store_name}/scopes/{scope}/entries/{entry_key}\",\n                headers={\"x-api-key\": bot_config.OPEN_CLOUD_API_KEY}\n            )\n            if response.status_code in [200, 204, 404]:\n                successes[owned_start_place_id].append((data_store_name, scope, entry_key))\n            else:\n                failures[owned_start_place_id].append((data_store_name, scope, entry_key))\n    return successes, failures\n\n```\n\n----------------------------------------\n\nTITLE: Resetting Player Points on Death in Roblox Lua\nDESCRIPTION: Expands the `onCharacterAdded` function to connect an anonymous function to the Humanoid's `Died` event. When the player's character dies, this function accesses the player's 'Points' IntValue within their 'leaderstats' folder and sets its `Value` property to 0. Assumes the player object has a child named 'leaderstats' containing an IntValue named 'Points'.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/scripting/basic-scripting/score-points.md#_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nlocal function onCharacterAdded(character, player)\n  local humanoid = character:WaitForChild(\"Humanoid\")\n\n  humanoid.Died:Connect(function()\n    local points = player.leaderstats.Points\n    points.Value = 0\n  end)\nend\n```\n\n----------------------------------------\n\nTITLE: Create/Get DataStore - Luau\nDESCRIPTION: Retrieves a specific data store by name. If a data store with the provided name ('PlayerGold' in this case) already exists, it returns a reference to it; otherwise, it creates a new data store with that name. This is the object used to perform read and write operations.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/scripting/intermediate-scripting/save-data.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal DataStoreService = game:GetService(\"DataStoreService\")\n\nlocal goldStore = DataStoreService:GetDataStore(\"PlayerGold\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Pickup Cooldown with Attributes in Roblox Lua\nDESCRIPTION: Sets an 'Enabled' attribute on each pickup to manage cooldown state. The touch handler checks this attribute before applying healing logic, preventing multiple triggers during cooldown. Implements a debounce mechanism using attributes for effective pickup management.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/scripting/intermediate-scripting/create-a-health-pickup.md#_snippet_5\n\nLANGUAGE: Lua\nCODE:\n```\nfor _, healthPickup in ipairs(healthPickups) do\n\thealthPickup:SetAttribute(\"Enabled\", true)\nend\n\nlocal function onTouchHealthPickup(otherPart, healthPickup)\n\tif healthPickup:GetAttribute(\"Enabled\") then\n\t\tlocal character = otherPart.Parent\n\t\tlocal humanoid = character:FindFirstChildWhichIsA(\"Humanoid\")\n\t\tif humanoid then\n\t\t\thamuid.Health = MAX_HEALTH\n\t\tend\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Sending Network Messages via Encapsulated Client Module in Roblox LocalScript Lua\nDESCRIPTION: A LocalScript example showing how to send a network message on the client side using the previously defined NetworkManagerClient module. It requires the module from ReplicatedFirst and calls FireServer with a message id \"RequestA\" and an optional additional argument \"Hello\". This illustrates how encapsulation simplifies client requests without requiring direct interaction with RemoteEvent objects.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/scripting/scripts.md#_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\n-- LocalScript in ReplicatedFirst\nlocal ReplicatedFirst = game:GetService(\"ReplicatedFirst\")\n\nlocal NetworkManagerClient = require(ReplicatedFirst:WaitForChild(\"NetworkManagerClient\"))\nNetworkManagerClient.FireServer(\"RequestA\", \"Hello\")\n```\n\n----------------------------------------\n\nTITLE: Getting a SelfieMode Action Instance in LocalScript - Lua\nDESCRIPTION: Explains how to retrieve an Action object representing a selfie action using getAction with a specific enum value. This code depends on the SelfieMode module and is to be called from a LocalScript. The method takes an action enum member and returns the corresponding Action instance for further manipulation.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/selfie-mode.md#_snippet_9\n\nLANGUAGE: Lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal SelfieMode = require(ReplicatedStorage:WaitForChild(\"SelfieMode\"))\n\nlocal lockGazeAction = SelfieMode.getAction(SelfieMode.Action.LockGaze)\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Player List with For Loop in Roblox (Luau)\nDESCRIPTION: This code fetches the array of current Player objects using Players:GetPlayers() and iterates through each player in a for loop. It is typically placed inside a timed loop or game logic function. No outputs or return values; logic for per-player actions should replace the placeholder comment.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/scripting/basic-scripting/score-points.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nwhile true do\n  task.wait(1)\n  local playerList = Players:GetPlayers()\n  for currentPlayer = 1, #playerList do\n    -- Add your logic here for each player in the playerList\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Listening for Changes to Properties and Attributes in Lua\nDESCRIPTION: This snippet illustrates several ways to detect property and attribute changes in Roblox.  It uses `Changed`, `AttributeChanged`, `GetPropertyChangedSignal`, and `GetAttributeChangedSignal` to connect to functions.  It demonstrates the use of anonymous functions and local functions to handle the changes. Dependencies: Roblox Engine.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/scripting/attributes.md#_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\n-- Local functions\nlocal function onAnyPropertyChange(property)\n\t-- Ignore changes to attributes\n\tif property ~= \"Attributes\" then\n\t\tprint(property) --> Name\n\t\tprint(cabbage[property]) --> Cabbage1\n\tend\nend\n\nlocal function onAnyAttributeChange(attribute)\n\tprint(attribute) --> Grow, GrowthRate\n\tprint(cabbage:GetAttribute(attribute)) --> false, 3\nend\n\n-- Listen for changes and connect to local functions\ncabbage.Changed:Connect(onAnyPropertyChange)\ncabbage.AttributeChanged:Connect(onAnyAttributeChange)\n\n-- Listen for changes and connect to anonymous functions\ncabbage:GetPropertyChangedSignal(\"Name\"):Connect(function()\n\tprint(cabbage.Name) --> Cabbage1\nend)\ncabbage:GetAttributeChangedSignal(\"GrowthRate\"):Connect(function()\n\tprint(cabbage:GetAttribute(\"GrowthRate\")) --> 3\nend)\n\n-- Fires Changed and GetPropertyChangedSignal()\ncabbage.Name = \"Cabbage1\"\n\n-- Fires Changed and AttributeChanged\ncabbage:SetAttribute(\"Grow\", false)\n\n-- Fires Changed, AttributeChanged, and GetAttributeChangedSignal()\ncabbage:SetAttribute(\"GrowthRate\", 3)\n```\n\n----------------------------------------\n\nTITLE: Creating `checkPlayerCount()` to determine game winner in PlayerManager\nDESCRIPTION: This function monitors the number of active players in the match, stored in a localized table. When only one player remains, it fires the `matchEnd` event with the `FoundWinner` state, enabling the game to recognize a victor and conclude the match accordingly.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/battle-royale-series/ending-matches.md#_snippet_6\n\nLANGUAGE: Lua\nCODE:\n```\nlocal function checkPlayerCount()\n\tif #activePlayers == 1 then\n\t\tmatchEnd:Fire(gameSettings.endStates.FoundWinner)\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Retrieve User Subscription Payment History via MarketplaceService (Luau)\nDESCRIPTION: This snippet references the use of the GetUserSubscriptionPaymentHistoryAsync() method from the Roblox MarketplaceService. Its purpose is to programmatically retrieve the payment history for individual user subscriptions, which includes information about refunds. This allows creators to access granular refund data directly within a Luau script.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/production/monetization/subscriptions.md#_snippet_4\n\nLANGUAGE: Luau\nCODE:\n```\nClass.MarketplaceService:GetUserSubscriptionPaymentHistoryAsync()\n```\n\n----------------------------------------\n\nTITLE: Adding Delay to Countdown Using task.wait in Roblox - Lua\nDESCRIPTION: Enhances the countdown for loop to wait one second between each decrement using task.wait(1), ensuring the timer updates in real time. Requires task.wait to be available in the environment. Output: real-time countdown experience.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-4/create-a-timed-bridge.md#_snippet_8\n\nLANGUAGE: Lua\nCODE:\n```\nfor count = timerDuration, 0, -1 do\n   timerText.Text = count\n   task.wait(1)\nend\n```\n\n----------------------------------------\n\nTITLE: Finding Nested Instances by Chaining Ancestry\nDESCRIPTION: Finds instances named `Tail` inside instances named `Dog`, which are themselves inside instances named `Animals`. Chains the `.` operator for specific nested searches.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/studio/explorer.md#_snippet_12\n\nLANGUAGE: RobloxSearchQuery\nCODE:\n```\nAnimals.Dog.Tail\n```\n\n----------------------------------------\n\nTITLE: Printing from a Function and Calling It in Luau - Lua\nDESCRIPTION: This code snippet fully implements a printFood function that prints 'Curry!' to the Output window when called. After its definition, the function is invoked using printFood(). There are no parameters required, and the primary output is the printed string in Roblox's Output panel. This example is meant to run in Roblox Studio's Script, with no external dependencies.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-2/code-a-function.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal function printFood()\n\tprint(\"Curry!\")\nend\n\nprintFood()\n```\n\n----------------------------------------\n\nTITLE: Calculating Categorical Signal (Joining Player) in Lua\nDESCRIPTION: This snippet calculates a categorical signal by comparing a server attribute and a joining player's attribute using a simple conditional. If the values are equal, the score is 1; otherwise, the score is 0.  It checks for an exact match.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/matchmaking/attributes-and-signals.md#_snippet_23\n\nLANGUAGE: lua\nCODE:\n```\nif server_{attribute_name} = joining_player_{attribute_name} then\n  return 1 \nelse\n  return 0 \nend\n```\n\n----------------------------------------\n\nTITLE: Deforming MeshParts with WrapDeformer and EditableMesh in Roblox Lua\nDESCRIPTION: This Lua function demonstrates mesh deformation on a MeshPart using its associated WrapTarget and WrapDeformer. It retrieves the cage mesh ID, creates an EditableMesh, finds vertices within a specified spherical control area, applies a deformation vector to those vertices using SetPosition, and then updates the WrapDeformer with the modified cage mesh content using SetCageMeshContent. This allows live deformation while preserving skinning.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/avatar/in-experience-creation.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal function deformBodyPart(\n\tmeshPart: MeshPart,\n\tcontrolPointCenter: Vector3,\n\tcontrolPointRadius: number,\n\tcontrolPointDeformation: Vector3\n)\n\tlocal wrapTarget = meshPart:FindFirstChildWhichIsA(\"WrapTarget\")\n\tlocal cageMeshId = wrapTarget.CageMeshId\n\tlocal wrapDeformer = Instance.new(\"WrapDeformer\")\n\twrapDeformer.Parent = meshPart\n\n\tlocal cageEditableMesh = AssetService:CreateEditableMeshAsync(cageMeshId)\n\tlocal verticesWithinSphere =\n\t\tcageEditableMesh:FindVerticesWithinSphere(controlPointCenter, controlPointRadius)\n\tfor _, vertexId in verticesWithinSphere do\n\t\tlocal vertexPosition = cageEditableMesh:GetPosition(vertexId)\n\t\tcageEditableMesh:SetPosition(vertexId, vertexPosition + controlPointDeformation)\n\tend\n\n\twrapDeformer:SetCageMeshContent(Content.fromObject(cageEditableMesh))\nend\n```\n\n----------------------------------------\n\nTITLE: Declaring and Assigning a Variable in Luau\nDESCRIPTION: This snippet shows how to declare a local variable `loopingPart` and assign it a reference to a part within the workspace.  Variables store references to objects enabling code to interact with objects by their assigned variables.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-4/repeat-code-with-while-loops.md#_snippet_1\n\nLANGUAGE: Luau\nCODE:\n```\nlocal loopingPart = workspace.LoopingPart\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Argument Order in Function Calls in Luau\nDESCRIPTION: Illustrates the importance of argument order by showing two calls to the `sortGarbage` function with the same variables (`cementBlock`, `glassBottle`) but in different sequences. This demonstrates that the first argument provided maps to the first parameter (`trash`), and the second maps to the second parameter (`recyclable`).\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-2/multiple-parameters-and-arguments.md#_snippet_7\n\nLANGUAGE: Luau\nCODE:\n```\n\n--Destroys trash and cleans up recyclables\nlocal function sortGarbage(trash,recyclable)\n     local sparkle = Instance.new(\"ParticleEmitter\")\n\n    trash:Destroy()\n    sparkle.Parent = recyclable\nend\n\n--Goes in order. Cement is destroyed and the glass bottle is recycled\nsortGarbage(cementBlock, glassBottle)\n\n--GlassBottle is destroyed and cementBlock is recycled\nsortGarbage(glassBottle, cementBlock)\n```\n\n----------------------------------------\n\nTITLE: Applying a Custom Skybox in Roblox Lighting\nDESCRIPTION: Configures the skybox by setting the Roblox asset IDs ('rbxassetid://...') for each face ('SkyboxBk', 'SkyboxDn', 'SkyboxFt', 'SkyboxLf', 'SkyboxRt', 'SkyboxUp') on the 'Sky' object, a child of the Lighting service. This defines the environmental backdrop and influences overall lighting and atmosphere.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/lighting/enhance-indoor-environments.md#_snippet_5\n\nLANGUAGE: Roblox Properties\nCODE:\n```\nSkyboxBk = rbxassetid://162001887\nSkyboxDn = rbxassetid://161998893\nSkyboxFt = rbxassetid://162001897\nSkyboxLf = rbxassetid://162001904\nSkyboxRt = rbxassetid://162001919\nSkyboxUp = rbxassetid://162001926\n```\n\n----------------------------------------\n\nTITLE: Calling Destroy Method on Parameter in Luau\nDESCRIPTION: Extends the functionality of the `sortGarbage` function to call the `Destroy()` method on the object passed in through the first parameter, `trash`. This simulates the action of destroying the 'trash' item. It requires the `trash` parameter to be a Roblox object that supports the `Destroy()` method.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-2/multiple-parameters-and-arguments.md#_snippet_3\n\nLANGUAGE: Luau\nCODE:\n```\nlocal function sortGarbage(trash,recyclable)\n       local sparkle = Instance.new(\"ParticleEmitter\")\n\n       -- Destroy the trash\n       trash:Destroy()\n   end\n\n   sortGarbage()\n```\n\n----------------------------------------\n\nTITLE: Adding Modifiers to Handle Frame in Roblox Studio\nDESCRIPTION: Adds UI modifiers to the 'Handle' frame for visual styling. A UIAspectRatioConstraint maintains a 1:1 aspect ratio, a UICorner makes it circular, and a UIStroke adds a thick blue outline.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/ui/interactive-ui.md#_snippet_3\n\nLANGUAGE: Roblox Studio Configuration\nCODE:\n```\nTarget: EffectsVolumeSlider > SliderFrame > Handle (Class.Frame)\n\nAdd Children:\n1. Class.UIAspectRatioConstraint (Default properties)\n2. Class.UICorner\n   - CornerRadius = UDim.new(0.5, 0) -- {0.5, 0}\n3. Class.UIStroke\n   - Color = Color3.fromRGB(0, 150, 255)\n   - Thickness = 8\n```\n\n----------------------------------------\n\nTITLE: Setting Up Bundle Purchase Handlers in Luau\nDESCRIPTION: Defines functions to handle awarding items for Marketplace (`awardMarketplacePurchase`) and in-experience currency (`awardInExperiencePurchase`) bundle purchases. The `initializePurchaseHandlers` function iterates through configured bundles, setting the appropriate handler using `Bundles.setPurchaseHandler` for Marketplace items and `Bundles.setInExperiencePurchaseHandler` for in-experience currency purchases. Dependencies include the `Bundles` module, `Types`, and `CurrencyTypes` definitions.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/feature-packages/bundles.md#_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\n local function awardMarketplacePurchase(_player: Player, _bundleId: Types.BundleId, _receiptInfo: { [string]: any })\n        -- Update player data, give items, etc.\n        -- ... AND record receiptInfo.PurchaseId so we can check if user already has this bundle\n\n        task.wait(2)\n        return Enum.ProductPurchaseDecision.PurchaseGranted\n    end\n\n    local function awardInExperiencePurchase(\n        _player: Player,\n        _bundleId: Types.BundleId,\n        _currencyId: CurrencyTypes.CurrencyId,\n        _price: number\n    )\n        -- Check if the player has enough currency to purchase the bundle\n        -- Update player data, give items, etc.\n        -- Deduct the currency from the player\n\n        task.wait(2)\n        return true\n    end\n\n    local function initializePurchaseHandlers()\n        local bundles = Bundles.getBundles()\n        for bundleId, bundle in bundles do\n            -- Bundle is not associated with a developer product if it does not have marketplace price type\n            if not bundle or bundle.pricing.priceType ~= \"Marketplace\" then\n                continue\n            end\n\n            Bundles.setPurchaseHandler(bundleId, awardMarketplacePurchase)\n            receiptHandlers[bundle.pricing.devProductId] = receiptHandler\n        end\n\n        -- If you have any in-experience currencies that you are using for bundles, set the handler here\n        for currencyId, _ in Currencies do\n            Bundles.setInExperiencePurchaseHandler(currencyId, awardInExperiencePurchase)\n        end\n    end\n```\n\n----------------------------------------\n\nTITLE: Configuring SliderFrame Properties in Roblox Studio\nDESCRIPTION: Sets the core visual properties for the 'SliderFrame' UI element, which serves as the container for the slider's interactive range. This configuration defines its background color, transparency, layout order relative to siblings controlled by a UIListLayout, and makes it fill its parent frame.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/ui/interactive-ui.md#_snippet_0\n\nLANGUAGE: Roblox Studio Configuration\nCODE:\n```\nTarget: EffectsVolumeSlider > SliderFrame (Class.Frame)\n\nProperties:\n- BackgroundColor3 = 0 (black)\n- BackgroundTransparency = 0.75\n- LayoutOrder = 1\n- Size = UDim2.new(1, 0, 1, 0) -- {1, 0}, {1, 0}\n```\n\n----------------------------------------\n\nTITLE: Variadic Function with Arbitrary Arguments in Luau Lua\nDESCRIPTION: Defines a variadic function 'addLotsOfNumbers' that sums an arbitrary number of arguments using the '...' syntax. Initially, there is no type checking on variadic arguments, allowing invalid types without errors. Useful for flexible argument counts but without strict type safety.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/type-checking.md#_snippet_11\n\nLANGUAGE: lua\nCODE:\n```\nlocal function addLotsOfNumbers(...)\n\tlocal sum = 0\n\n\tfor _, v in {...} do\n\t\tsum += v\n\tend\n\n\treturn sum\nend\n```\n\n----------------------------------------\n\nTITLE: Selecting Random Luau Array Element\nDESCRIPTION: Provides an example of selecting a random dialogue line from the array. It uses `Random.new():NextInteger(min, max)` to generate a random index between 1 and the array's size (`#dialogueArray`) and then accesses the element at that random index.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-5/intro-to-arrays.md#_snippet_10\n\nLANGUAGE: Luau\nCODE:\n```\nlocal randomGenerator = Random.new()\n\n-- Shows a new dialogue whenever the NPC is clicked\nlocal function speak()\n   local randomIndex = randomGenerator:NextInteger(1, #dialogueArray)\n   local dialogue = dialogueArray[randomIndex]\n   Chat:Chat(head, dialogue)\nend\n```\n\n----------------------------------------\n\nTITLE: Updating Both Asset Content and Metadata via Open Cloud Assets API Using Bash curl\nDESCRIPTION: Provides a combined PATCH request example to update both asset content and metadata simultaneously. The updateMask query parameter specifies metadata fields to update. The JSON metadata includes display name, description, creator info, and optional expected price. The fileContent form field uploads new asset data. Requires the x-api-key header for authorization. This request supports asset versioning and requires bash with curl. Useful for comprehensive asset updates in a single call.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/guides/usage-assets.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request PATCH 'https://apis.roblox.com/assets/v1/assets/{assetId}?updateMask=description%2CdisplayName' \\\n--header 'x-api-key: {apiKey}' \\\n--form 'request={\n    \\\"assetType\\\": \\\"{assetType}\\\",\n    \\\"assetId\\\": \\\"{assetId}\\\",\n    \\\"displayName\\\": \\\"{new display name}\\\",\n    \\\"description\\\": \\\"{new description}\\\",\n    \\\"creationContext\\\": {\n        \\\"creator\\\": {\n            \\\"userId\\\": {userId}\n        },\n        \\\"expectedPrice\\\":{expectedPrice}\n    },\n}' \\\n--form 'fileContent=@\"{file-path}\"'\n```\n\n----------------------------------------\n\nTITLE: Retrieving the HealthPickups Folder and Its Contents in Roblox Lua\nDESCRIPTION: Uses WaitForChild to ensure the HealthPickups folder is loaded before accessing it. Calls GetChildren to obtain an array of all pickup objects within the folder, preparing for iteration and event connection. This pattern ensures synchronization with game loading states.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/scripting/intermediate-scripting/create-a-health-pickup.md#_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nlocal healthPickupsFolder = workspace:WaitForChild(\"HealthPickups\")\nlocal healthPickups = healthPickupsFolder:GetChildren()\n```\n\n----------------------------------------\n\nTITLE: Accordion-Based Course Chapter Layout Using Material-UI Components in JSX\nDESCRIPTION: This snippet outlines the use of Material-UI Accordion, AccordionSummary, AccordionDetails, Typography, and Button components to list course chapters in an expandable interface. Each chapter contains a header title and detailed description with embedded links to Roblox resources and related markdown documents. Buttons provide direct access to place files or asset libraries. This pattern supports modular and user-friendly content navigation.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/environmental-art/index.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<BaseAccordion>\n  <AccordionSummary>\n    <Typography variant=\"h4\">Chapter 1 - Greybox your environment</Typography>\n  </AccordionSummary>\n  <AccordionDetails>\n    Learn how to <a href=\"greybox-your-environment.md\">add simple shapes to the 3D space</a> to prototype gameplay before polishing assets.\n    <a href=\"https://www.roblox.com/games/14447721254/Environment-Art-Greyboxing\">\n      <Button color=\"primary\" size=\"medium\" variant=\"contained\">\n        Get the Place File\n      </Button>\n    </a>\n  </AccordionDetails>\n</BaseAccordion>\n\n<BaseAccordion>\n  <AccordionSummary>\n    <Typography variant=\"h4\">Chapter 2 - Develop polished assets</Typography>\n  </AccordionSummary>\n  <AccordionDetails>\n    Learn about <a href=\"develop-polished-assets.md\">designing high-quality assets</a> in third-party tools replacing the greybox.\n    <a href=\"https://www.roblox.com/library/14447738661/Environment-Art-Asset-Library\">\n      <Button color=\"primary\" size=\"medium\" variant=\"contained\">\n        Get the Asset Library\n      </Button>\n    </a>\n  </AccordionDetails>\n</BaseAccordion>\n\n{/* Additional chapters follow similar pattern */}\n```\n\n----------------------------------------\n\nTITLE: Configuring SeaStackMesh Assets with Size, Position and Orientation in Roblox\nDESCRIPTION: Tables of parameters for placing SeaStackMesh assets in different level sections. Each entry includes the size vector, CFrame.Position coordinates, and CFrame.Orientation angles to properly position the assets in the game world.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/core/building/apply-polished-assets.md#_snippet_10\n\nLANGUAGE: Lua\nCODE:\n```\n-- Example of how to apply these values in Lua code\n-- For a sea stack in Level_5c with Size: 45, 34, 38\n\nlocal seaStack = Instance.new(\"Part\")\nseaStack.Size = Vector3.new(45, 34, 38)\nseaStack.CFrame = CFrame.new(270, -8, -6) * CFrame.Angles(0, math.rad(180), 0)\nseaStack.Parent = game.Workspace.Level_5c\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Types in Luau Lua\nDESCRIPTION: Defines a custom type named 'Vector2' using the 'type' keyword, representing an object with 'x' and 'y' numeric properties. This snippet illustrates basic custom type creation that can be used for type annotations and checks within Luau scripts.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/type-checking.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\ntype Vector2 = {x: number, y: number}\n```\n\n----------------------------------------\n\nTITLE: Listening for Tool Equip and User Input Using ContextActionService in Luau\nDESCRIPTION: This Luau snippet sets up a system to listen for the 'E' key press after a player equips a fishing pole in Roblox. It uses ContextActionService to bind and unbind the 'Cast' action dynamically based on the tool's equipped and unequipped events. The snippet requires that a module named 'performSomeAction' exists in ReplicatedStorage, which should return a function to be invoked on input. Key parameters include the action name ('Cast'), the key to listen for (Enum.KeyCode.E), and the equipped/unequipped events. Inputs are player tool equip/unequip events and the 'E' key press when equipped; output is the execution of the function from the required module. Ensure ReplicatedStorage.performSomeAction is set up as expected. This pattern is constrained to a single input key and assumes the script is parented directly under the tool.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/includes/engine-comparisons/fishing-pole-code-sample.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Get the necessary game services\nlocal ContextActionService = game:GetService(\"ContextActionService\")\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\n-- Get a module script from ReplicatedStorage that returns a single function\nlocal performSomeAction = require(ReplicatedStorage.performSomeAction)\n\n-- Assumes that this script is a child of the fishing pole\nlocal fishingPole = script.Parent\nlocal ACTION_CAST = \"Cast\"\n\n-- Check that the key is down, then call another function\nlocal function castLine(_actionName, inputState, _inputObject)\n\tif inputState == Enum.UserInputState.Begin then\n\t\tperformSomeAction()\n\tend\nend\n\n-- Only enable the action when the player equips the fishing pole\nfishingPole.Equipped:Connect(function()\n\tContextActionService:BindAction(ACTION_CAST, castLine, true, Enum.KeyCode.E)\nend)\n\n-- Disable the action when the player unequips the fishing pole\nfishingPole.Unequipped:Connect(function()\n\tContextActionService:UnbindAction(ACTION_CAST)\nend)\n```\n\n----------------------------------------\n\nTITLE: Implementing Button Pressed Function to Detect Humanoids in Roblox - Lua\nDESCRIPTION: Defines a function that checks if the object touching the button is a humanoid by examining the parent for a Humanoid instance. Prepares logic for conditionally calling the timer, allowing detection of player-triggered events. Requires the startTimer function to be available. Parameter: partTouched (any part colliding with the button). No output; used for event hook.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-4/create-a-timed-bridge.md#_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nlocal function startTimer()\n   print(\"Countdown started\")\nend\n\nlocal function buttonPressed(partTouched)\n   local character = partTouched.Parent\n   local humanoid = character:FindFirstChildWhichIsA(\"Humanoid\")\n\n   if humanoid then\n\n   end\nend\n```\n\n----------------------------------------\n\nTITLE: Making the Bridge Walkable and Visible in Roblox - Lua\nDESCRIPTION: Within the startTimer function, sets the bridge part's Transparency to 0 (fully opaque) and CanCollide to true, making the bridge solid and visible to players. This reset happens when the timer is initiated. Requires a valid reference to the bridge part.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-4/create-a-timed-bridge.md#_snippet_5\n\nLANGUAGE: Lua\nCODE:\n```\nlocal function startTimer()\n   -- Make the bridge visible and walkable\n   bridge.Transparency = 0\n   bridge.CanCollide = true\nend\n```\n\n----------------------------------------\n\nTITLE: Checking User Item Ownership with Roblox Inventory API in Node.js\nDESCRIPTION: This Node.js snippet demonstrates how to check if a specified user owns particular inventory items by sending an HTTPS GET request to the Roblox Inventory API. It requires the Node.js 'https' module and a valid Roblox API key passed in the 'x-api-key' header. Key parameters include the 'userId' to identify the player and a 'filter' query specifying comma-separated asset IDs to check ownership against. The snippet processes the JSON response and handles HTTP errors and network issues. It outputs the inventory items the user owns that match the given asset IDs.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/guides/inventory.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst https = require('node:https');\n\nconst userId = 11111111111;\nconst hostname = 'apis.roblox.com';\nconst path = `/cloud/v2/users/${userId}/inventory-items`;\nconst params = '?filter=assetIds=62724852,1028595,4773588762';\n\nconst url = 'https://' + hostname + path + params;\n\nconst apiKey = '123456789012345678901234567890123456789012345678';\n\nconst options = {\n  headers: {\n    'x-api-key': `${apiKey}`,\n  },\n};\n\nhttps\n  .get(url, options, (response) => {\n    console.log('statusCode:', response.statusCode);\n    let data = '';\n    response.on('data', (d) => {\n      data += d;\n    });\n    response.on('end', () => {\n      if (response.statusCode === 200) {\n        const jsonData = JSON.parse(data);\n        console.log('Response Data:', JSON.stringify(jsonData, null, 2));\n      } else {\n        console.error('Error:', response.statusCode, response.statusMessage);\n      }\n    });\n  })\n  .on('error', (e) => {\n    console.error(e);\n  });\n```\n\n----------------------------------------\n\nTITLE: Sending Message via TextChannel (Lua)\nDESCRIPTION: This method is used on a `Class.TextChannel` instance to send a message. Utilizing this method ensures that the message respects user privacy settings, is automatically filtered, and is available for moderation purposes, adhering to Roblox's communication standards.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/chat/guidelines.md#_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nTextChannel:SendAsync()\n```\n\n----------------------------------------\n\nTITLE: Guidance on setting object colors via Properties in Roblox\nDESCRIPTION: Instructions for selecting a wall component and setting its color property to a specific RGB value (255, 170, 255) within the Properties window, used to customize wall assets visually.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/environmental-art/construct-your-world.md#_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n`Select the wall component of these assets, then in the **Properties** window, set **Color** to `255, 170, 255`.`\n```\n\n----------------------------------------\n\nTITLE: Firing a Remote Event to Teleport the Player in Roblox (Lua)\nDESCRIPTION: This LocalScript demonstrates firing a RemoteEvent to the server to request a teleport, providing the target position as a Vector3. It waits for the 'TeleportEvent' RemoteEvent from ReplicatedStorage and defines a target position, then calls FireServer. It is meant to be used alongside a server Script that handles the TeleportEvent and streaming request. Place in StarterPlayerScripts or an appropriate client context.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/workspace/streaming.md#_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal teleportEvent = ReplicatedStorage:WaitForChild(\"TeleportEvent\")\nlocal teleportTarget = Vector3.new(50, 2, 120)\n\n-- Fire the remote event\nteleportEvent:FireServer(teleportTarget)\n```\n\n----------------------------------------\n\nTITLE: Setting Lighting ExposureCompensation in Roblox Studio\nDESCRIPTION: Adjusts the global lighting exposure by setting the `ExposureCompensation` property of the `Lighting` service to `0.5` using the Properties window in Roblox Studio. This increases the perceived brightness, biasing towards brighter areas, without overly brightening shadows, thus improving richness and contrast. Requires selecting the `Lighting` service in the Explorer window first.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/lighting/enhance-indoor-environments.md#_snippet_9\n\nLANGUAGE: Roblox Studio Properties\nCODE:\n```\n1. Select Lighting service in Explorer.\n2. In Properties window, set ExposureCompensation = 0.5\n```\n\n----------------------------------------\n\nTITLE: Server Damage Application with Shot Validation in Roblox Lua\nDESCRIPTION: This augmented damageCharacter server function checks both the presence of a Humanoid and the validity of the shot by calling isHitValid. Only if both are true does it apply LASER_DAMAGE, preventing most forms of remote abuse. Dependencies: isHitValid implementation, LASER_DAMAGE value, and valid player/character/hitPosition.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/scripting/intermediate-scripting/hit-detection-with-lasers.md#_snippet_30\n\nLANGUAGE: Lua\nCODE:\n```\nfunction damageCharacter(playerFired, characterToDamage, hitPosition)\n\tlocal humanoid = characterToDamage:FindFirstChildWhichIsA(\"Humanoid\")\n\tlocal validShot = isHitValid(playerFired, characterToDamage, hitPosition)\n\tif humanoid and validShot then\n\t\t-- Remove health from character\n\t\thumanoid.Health -= LASER_DAMAGE\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Resetting Bridge and Display After Countdown Finishes in Roblox - Lua\nDESCRIPTION: After the for countdown loop, restores bridge visibility to semi-transparent (Transparency = 0.8), disables collision (CanCollide = false), resets the timer text, and sets timerActive to false so the process can repeat. This ensures consistent states and reusability. Inputs: bridge, timerText, timerActive.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-4/create-a-timed-bridge.md#_snippet_12\n\nLANGUAGE: Lua\nCODE:\n```\nlocal function startTimer()\n   timerActive = true\n   bridge.Transparency = 0\n   bridge.CanCollide = true\n   -- For loop that counts down from timerDuration\n   for count = timerDuration, 0, -1 do\n      timerText.Text = count\n      task.wait(1)\n   end\n\n   -- Make the bridge not walkable\n   bridge.Transparency = 0.8\n   bridge.CanCollide = false\n   timerText.Text = \"\"\n   timerActive = false\nend\n```\n\n----------------------------------------\n\nTITLE: Initializing Client Schema with OnSetup\nDESCRIPTION: This code snippet demonstrates how to initialize a client-side event sequencer schema using the OnSetup lifecycle hook. It retrieves services, requires the EventSequencer module, creates a schema, and defines the OnSetup function to access scene environments and wait for assets. It also prints the current time.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/event-sequencer.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal EventSequencer = require(ReplicatedStorage:WaitForChild(\"EventSequencer\"))\n\nlocal Schema = EventSequencer.createSchema()\n\nlocal clientEnvironment\nlocal serverEnvironment\nlocal dummy\n\nSchema.OnSetup = function(timePositionObject)\n\tprint(\"OnSetup (Client)\")\n\n\t-- Access scene environments; does not apply to Inline Mode\n\tclientEnvironment = EventSequencer.getCurrentSceneEnvironment()\n\tserverEnvironment = EventSequencer.getCurrentServerEnvironmentFromClient()\n\t-- Wait for assets\n\tdummy = clientEnvironment:WaitForChild(\"Dummy\")\n\n\tprint(\"Current time is:\", timePositionObject.Value)\nend\n```\n\n----------------------------------------\n\nTITLE: Handling DragDetector Events to Update Visual Feedback\nDESCRIPTION: Connects to the DragStart, DragContinue, and DragEnd events of a DragDetector to provide visual feedback during drag operations. This example creates and toggles a Highlight effect on the dragged object.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/ui/3D-drag-detectors.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal dragDetector = script.Parent.DragDetector\n\nlocal highlight = Instance.new(\"Highlight\")\nhighlight.Enabled = false\nhighlight.Parent = script.Parent\n\ndragDetector.DragStart:Connect(function()\n\thighlight.Enabled = true\nend)\n\ndragDetector.DragContinue:Connect(function()\n\nend)\n\ndragDetector.DragEnd:Connect(function()\n\thighlight.Enabled = false\nend)\n```\n\n----------------------------------------\n\nTITLE: Initiating Roblox Open Cloud List Instance Children API Call - Python\nDESCRIPTION: This Python snippet demonstrates how to initiate the request to list the children of a specific Roblox engine instance using the Open Cloud API. It sends a GET request and retrieves the initial Operation object which must then be polled to get the actual list of children.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/guides/instance.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport requests\n\n# Generate at https://create.roblox.com/dashboard/credentials\napiKey = \"<API_KEY>\"\n# Find at https://create.roblox.com/dashboard/creations in the overflow menu of an experience tile\nuniverseId = \"<UNIVERSE_ID>\"\n# Find Start Place ID at https://create.roblox.com/dashboard/creations in the overflow menu of an experience tile\nplaceId = \"<PLACE_ID>\"\n# The default ID for the root of any place's data model\ninstanceId = \"root\"\n\n# Request header\napiKeyHeaderKey = \"x-api-key\"\n# Endpoint URL for List Children method\nlistChildrenUrl = \"https://apis.roblox.com/cloud/v2/universes/%s/places/%s/instances/%s:listChildren\"\n\ndef ListChildren():\n  url = listChildrenUrl % (universeId, placeId, instanceId)\n  headerData = {apiKeyHeaderKey: apiKey}\n  results = requests.get(url, headers = headerData)\n  return results\n\nresponse = ListChildren()\nprint(\"Operation Results:\", response.status_code, response.text)\n\n# Parse the Operation object's path to later obtain the Instance resource. See the Polling for Results section for more information.\noperationPath = response.json()['path']\n```\n\n----------------------------------------\n\nTITLE: Configuring UIDragDetector for Handle in Roblox Studio\nDESCRIPTION: Sets up the UIDragDetector instance within the 'Handle' frame to enable user interaction. Configures the drag behavior for 1D linear movement along the X-axis (`TranslateLine`) and specifies that the drag response should manipulate the parent's scaled position.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/ui/interactive-ui.md#_snippet_4\n\nLANGUAGE: Roblox Studio Configuration\nCODE:\n```\nTarget: EffectsVolumeSlider > SliderFrame > Handle > UIDragDetector (Class.UIDragDetector)\n\nProperties:\n- DragStyle = Enum.UIDragDetectorDragStyle.TranslateLine\n- ResponseStyle = Enum.UIDragDetectorResponseStyle.Scale\n```\n\n----------------------------------------\n\nTITLE: Understanding Roblox Webhook Signature Format without Secret in CSV\nDESCRIPTION: This CSV snippet shows the signature header format when no secret is configured for the webhook, containing only the timestamp value to identify when the notification was sent. Verification of the signature is limited in this scenario.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/webhooks/webhook-notifications.md#_snippet_2\n\nLANGUAGE: csv\nCODE:\n```\n\"roblox-signature\": \"t=<timestamp>\"\n```\n\n----------------------------------------\n\nTITLE: Polling for Operation Results (Python)\nDESCRIPTION: This Python code demonstrates polling the Roblox Cloud API for the results of a long-running operation. It uses the operation path obtained from the initial request. The function `GetOperation` fetches the operation status, and `PollForResults` repeatedly checks until the operation is 'done' or the maximum number of retries is reached. It requires the `requests` and `time` libraries.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/guides/instance.md#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport requests\nimport time\n\n# Generate at https://create.roblox.com/dashboard/credentials\napiKey = \"<API_KEY>\"\n# Use the Operation path from your initial request\n# Takes the form of \"universes/<UNIVERSE_ID>/places/<PLACE_ID>/instances/<INSTANCE_ID>/operations/<OPERATION_ID>\"\noperationPath = \"<OPERATION_PATH>\"\n\n# Polling constants\nnumberOfRetries = 10\nretryPollingCadence = 5\n\n# Request header\napiKeyHeaderKey = \"x-api-key\"\n# Endpoint URL for long-running operation polling\ngetOperationUrl = \"https://apis.roblox.com/cloud/v2/%s\"\n# JSON keys\ndoneJSONKey = \"done\"\n\ndef GetOperation(operationPath):\n  url = getOperationUrl % (operationPath)\n  headerData = {apiKeyHeaderKey: apiKey}\n  results = requests.get(url, headers = headerData)\n  return results\n\ndef PollForResults(operationPath):\n  currentRetries = 0\n  while (currentRetries < numberOfRetries):\n    time.sleep(retryPollingCadence)\n    results = GetOperation(operationPath)\n    currentRetries += 1\n\n    if (results.status_code != 200 or results.json()[doneJSONKey]):\n      return results\n\nresponse = PollForResults(operationPath)\nprint(\"Response:\", response.status_code, response.text)\n```\n\n----------------------------------------\n\nTITLE: Adding a Delay with task.wait() in Luau\nDESCRIPTION: This snippet uses `task.wait()` to pause the script's execution for a specified duration. This is crucial to control how often the color changes within the loop and prevents the colors from changing too quickly to be seen. The value passed to `task.wait()` is the number of seconds to wait.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-4/repeat-code-with-while-loops.md#_snippet_5\n\nLANGUAGE: Luau\nCODE:\n```\ntask.wait(3)\n```\n\n----------------------------------------\n\nTITLE: Creating a Tabbed Interface using <Tabs> and <TabItem> (Markdown/JSX)\nDESCRIPTION: Implements a tabbed navigation structure using the <Tabs> component as a container and multiple <TabItem> components for each category (e.g., 'Head Shapes', 'Realistic'). The 'label' prop on <TabItem> defines the text displayed on the tab.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/characters/project-files.md#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n<Tabs>\n  <TabItem label=\"Head Shapes\">\n    {/* Content for Head Shapes tab */}\n  </TabItem>\n  <TabItem label=\"Realistic\">\n    {/* Content for Realistic tab */}\n  </TabItem>\n  {/* ... other TabItems */} \n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Removing Proximity Button with MerchBooth - Lua\nDESCRIPTION: Shows how to remove a proximity prompt from an object using MerchBooth.removeProximityButton. Assumes that an item has already been registered and a proximity button assigned. Task.wait is used to delay removal after creation. Dependencies are the MerchBooth module, assetId, and a valid Adornee. This operates on the game world but does not return values.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/merch-booth.md#_snippet_20\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal MerchBooth = require(ReplicatedStorage:WaitForChild(\"MerchBooth\"))\n\nlocal success, errorMessage = pcall(function()\n\tMerchBooth.addItemAsync(4819740796)\nend)\nif success then\n\tlocal item = Workspace:FindFirstChild(\"Robox\")\n\tif item then\n\t\tMerchBooth.addProximityButton(item, 4819740796)\n\tend\n\n\t-- After some time, remove the prompt\n\ttask.wait(5)\n\tMerchBooth.removeProximityButton(item)\nend\n\n```\n\n----------------------------------------\n\nTITLE: Character Pathfinding and Automated Movement - PathfindingService - Lua\nDESCRIPTION: Combines path computation with step-by-step automated character movement in a local Roblox script, handling dynamic obstacles and path updates. Requires Player, PathfindingService, and character Humanoid object. Inputs include a target destination (Vector3), and outputs are character animations and warnings if the path fails. The snippet shows error handling, event-driven re-computation, and waypoint traversal logic for seamless path navigation.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/characters/pathfinding.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal PathfindingService = game:GetService(\"PathfindingService\")\nlocal Players = game:GetService(\"Players\")\nlocal RunService = game:GetService(\"RunService\")\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal path = PathfindingService:CreatePath()\n\nlocal player = Players.LocalPlayer\nlocal character = player.Character\nlocal humanoid = character:WaitForChild(\"Humanoid\")\n\nlocal TEST_DESTINATION = Vector3.new(100, 0, 100)\n\nlocal waypoints\nlocal nextWaypointIndex\nlocal reachedConnection\nlocal blockedConnection\n\nlocal function followPath(destination)\n\t-- Compute the path\n\tlocal success, errorMessage = pcall(function()\n\t\tpath:ComputeAsync(character.PrimaryPart.Position, destination)\n\tend)\n\n\tif success and path.Status == Enum.PathStatus.Success then\n\t\t-- Get the path waypoints\n\t\twaypoints = path:GetWaypoints()\n\n\t\t-- Detect if path becomes blocked\n\t\tblockedConnection = path.Blocked:Connect(function(blockedWaypointIndex)\n\t\t\t-- Check if the obstacle is further down the path\n\t\t\tif blockedWaypointIndex >= nextWaypointIndex then\n\t\t\t\t-- Stop detecting path blockage until path is re-computed\n\t\t\t\tblockedConnection:Disconnect()\n\t\t\t\t-- Call function to re-compute new path\n\t\t\t\tfollowPath(destination)\n\t\t\tend\n\t\tend)\n\n\t\t-- Detect when movement to next waypoint is complete\n\t\tif not reachedConnection then\n\t\t\treachedConnection = humanoid.MoveToFinished:Connect(function(reached)\n\t\t\t\tif reached and nextWaypointIndex < #waypoints then\n\t\t\t\t\t-- Increase waypoint index and move to next waypoint\n\t\t\t\t\tnextWaypointIndex += 1\n\t\t\t\t\thumanoid:MoveTo(waypoints[nextWaypointIndex].Position)\n\t\t\t\telse\n\t\t\t\t\treachedConnection:Disconnect()\n\t\t\t\t\tblockedConnection:Disconnect()\n\t\t\t\tend\n\t\t\tend)\n\t\tend\n\n\t\t-- Initially move to second waypoint (first waypoint is path start; skip it)\n\t\tnextWaypointIndex = 2\n\t\thumanoid:MoveTo(waypoints[nextWaypointIndex].Position)\n\telse\n\t\twarn(\"Path not computed!\", errorMessage)\n\tend\nend\n\nfollowPath(TEST_DESTINATION)\n```\n\n----------------------------------------\n\nTITLE: Manipulating Textures with EditableImage in Roblox Lua\nDESCRIPTION: This Lua script demonstrates texture editing on a MeshPart using EditableImage APIs. It includes functions to: recolor the entire texture using DrawRectangle, apply a sticker texture at specific UV coordinates using DrawImage, and apply a sticker projected onto the 3D mesh surface using DrawImageProjected based on a raycast hit. Requires AssetService for creating EditableImage instances from TextureIDs.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/avatar/in-experience-creation.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal function recolorTexture(\n\tmeshPart: MeshPart,\n\tcolor: Color3\n)\n\tlocal bodyPartTexture = AssetService:CreateEditableImageAsync(meshPart.TextureID)\n\tmeshPart.TextureContent = Content.fromObject(bodyPartTexture)\n\n\tbodyPartTexture:DrawRectangle(\n\t\tVector2.new(0, 0),\n\t\tbodyPartTexture.Size,\n\t\tcolor,\n\t\t0,\n\t\tEnum.ImageCombineType.Overwrite\n\t)\nend\n\nlocal function applySticker(\n\tmeshPart: MeshPart,\n\ttextureCoordinate: Vector2,\n\tstickerId: TextureId\n)\n\tlocal bodyPartTexture = AssetService:CreateEditableImageAsync(meshPart.TextureID)\n\tmeshPart.TextureContent = Content.fromObject(bodyPartTexture)\n\n\tlocal stickerTexture = AssetService:CreateEditableImageAsync(stickerId)\n\tbodyPartTexture:DrawImage(textureCoordinate, stickerTexture, Enum.ImageCombineType.BlendSourceOver)\nend\n\nlocal function applyStickerProjected(\n  meshPart: MeshPart,\n  targetMesh: EditableMesh,\n  stickerId: TextureId,\n  raycastHitPos: Vector3\n)\n  local bodyPartTexture = AssetService:CreateEditableImageAsync(meshPart.TextureID)\n\n  local relativePos = meshPart.CFrame:PointToWorldSpace(raycastHitPos)\n  local direction = (game.Workspace.CurrentCamera.CFrame.Position - relativePos).Unit\n\n  local projectionParams: ProjectionParams = {\n      Direction = meshPart.CFrame:VectorToObjectSpace(direction),\n      Position = meshPart.CFrame:PointToObjectSpace(relativePos),\n      Size = Vector3.new(1, 1, 1),\n      Up = meshPart.CFrame:VectorToObjectSpace(Vector3.new(0, 1, 0)),\n  }\n\n  local stickerTexture = AssetService:CreateEditableImageAsync(stickerId)\n  local localBrushConfig: BrushConfig = {\n      Decal = stickerTexture,\n      ColorBlendType = Enum.ImageCombineType.BlendSourceOver,\n      AlphaBlendType = Enum.ImageAlphaType.Default,\n      BlendIntensity = 1,\n      FadeAngle = 90.0\n  }\n\n  bodyPartTexture:DrawImageProjected(targetMesh, projectionParams, localBrushConfig)\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Generic Functions in C#\nDESCRIPTION: This snippet demonstrates the basic syntax for defining a method (function) in C# that accepts a typed argument and returns a typed value, illustrating standard method declaration.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/luau-csharp-comparison.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\n// Generic function\nint increment(int number) {\n\treturn number + 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Prefix and Suffix to Secret in Lua\nDESCRIPTION: This Lua snippet demonstrates how to add a prefix and suffix to a secret using the `AddPrefix()` and `AddSuffix()` methods. This is useful for constructing URLs or headers that require the secret as part of the value. It accesses the \"test_secret\" using HttpService and uses the secret to construct a URL.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud-services/secrets.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal HttpService = game:GetService(\"HttpService\")\n\nlocal testSecret = HttpService:GetSecret(\"test_secret\")\n\nlocal prefix = \"https://my.example.com/endpoint?apiKey=\"\nlocal suffix = \"&user=username\"\nlocal url = testSecret:AddPrefix(prefix)\nurl = url:AddSuffix(suffix)\nprint(url) --> https://my.example.com/endpoint?apiKey=Secret(test_secret)&user=username\n```\n\n----------------------------------------\n\nTITLE: Handling Friend Locator Click Events with Streaming Support\nDESCRIPTION: This LocalScript connects to the FriendsLocator's clicked event and implements custom logic for handling icon interactions. It includes streaming support to prevent loading pauses when teleporting to a friend's location in large experiences.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/friends-locator.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal Players = game:GetService(\"Players\")\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal FriendsLocator = require(ReplicatedStorage:WaitForChild(\"FriendsLocator\"))\n\nlocal localPlayer = Players.LocalPlayer\n\nFriendsLocator.clicked:Connect(function(player, playerCFrame)\n\t-- Request streaming around target location\n\tif Workspace.StreamingEnabled then\n\t\tlocal success, errorMessage = pcall(function()\n\t\t\tlocalPlayer:RequestStreamAroundAsync(playerCFrame.Position)\n\t\tend)\n\t\tif not success then\n\t\t\tprint(errorMessage)\n\t\tend\n\tend\n\n\tprint(\"You clicked on locator icon for\", player.DisplayName, \"at position\", playerCFrame.Position)\nend)\n```\n\n----------------------------------------\n\nTITLE: Defining Metatable Types with typeof and setmetatable in Luau Lua\nDESCRIPTION: Defines a complex 'Vector' type by combining a table shape and a metatable containing an '__add' method. Uses 'typeof' with 'setmetatable' to capture both fields and metamethods in one type definition, enabling operator overloading with type safety.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/type-checking.md#_snippet_16\n\nLANGUAGE: lua\nCODE:\n```\ntype Vector = typeof(setmetatable({}::{\n\tx: number,\n\ty: number\n}, {}::{\n\t__add: (Vector, Vector|number) -> Vector\n}))\n\n-- Vector + Vector would return a Vector type\n```\n\n----------------------------------------\n\nTITLE: Calculating Adjusted Root Position for Camera Target in Lua\nDESCRIPTION: Calculates the target position for the camera by taking the `HumanoidRootPart`'s position and adding a vertical offset (`HEIGHT_OFFSET`) using `Vector3.new`. This adjustment compensates for the `HumanoidRootPart` being lower than the character's head, providing a better viewing angle.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/input-and-camera/control-the-users-camera.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nlocal player = Players.LocalPlayer\n\nlocal HEIGHT_OFFSET = 2\n\nlocal function updateCamera()\n    local character = player.Character\n    if character then\n        local root = character:FindFirstChild(\"HumanoidRootPart\")\n        if root then\n            local rootPosition = root.Position + Vector3.new(0, HEIGHT_OFFSET, 0)\n        end\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Rotating an Object in a Roblox ViewportFrame (Lua)\nDESCRIPTION: This Lua script, placed inside a `LocalScript` parented to a `ViewportFrame`, continuously rotates a `BasePart` child within that frame. It initializes a dedicated camera for the viewport, sets its properties, positions the object, and then uses the `RunService.PostSimulation` event to update the camera's CFrame each frame, creating a rotation effect. Key parameters like camera distance, field of view, object pitch, and rotation speed are configurable.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/ui/viewport-frames.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal RunService = game:GetService(\"RunService\")\n\nlocal viewportFrame = script.Parent\n\n-- Parameters to experiment with\nlocal cameraDistance = 10\nlocal cameraFieldOfView = 50\nlocal objectPitchAngle = 40\nlocal objectRotationSpeed = 50\n\n-- Viewport camera initialization\nlocal viewportCamera = Instance.new(\"Camera\")\nviewportCamera.FieldOfView = cameraFieldOfView\nviewportFrame.CurrentCamera = viewportCamera\nviewportCamera.Parent = viewportFrame\n\n-- Viewport object initialization\nlocal object = viewportFrame:FindFirstChildWhichIsA(\"BasePart\")\nif object then\n\tobject.CFrame = CFrame.new(0, 0, 0) * CFrame.Angles(math.rad(objectPitchAngle), 0, 0)\n\n\t-- Update loop\n\tlocal t = 0\n\tRunService.PostSimulation:Connect(function(delta)\n\t\tt += delta\n\t\tviewportCamera.CFrame = CFrame.Angles(0, math.rad(t * objectRotationSpeed), 0) * CFrame.new(0, 0, cameraDistance)\n\tend)\nelse\n\twarn(\"3D object not found as child of viewport frame\")\nend\n```\n\n----------------------------------------\n\nTITLE: Defining DataStores Class for Roblox API Calls (Node.js)\nDESCRIPTION: This JavaScript code defines a `DataStores` class that encapsulates methods for interacting with the Roblox Ordered Data Stores API.  It includes methods for listing, creating, and incrementing entries. It depends on the `axios` library for making HTTP requests and the `fs` module for reading the configuration file.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/guides/usage-data-stores.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst axios = require('axios');\nconst fs = require('fs');\n\nclass DataStores {\n  constructor(configFile) {\n    this._config = JSON.parse(fs.readFileSync(configFile, 'utf-8'));\n  }\n\n  _H() {\n    return {\n      'x-api-key': this._config.api_key,\n      'Content-Type': 'application/json',\n    };\n  }\n\n  async list(\n    datastore,\n    scope,\n    pageSize = 10,\n    orderBy = '',\n    filter = '',\n    exclusiveStartKey = ''\n  ) {\n    const url = `${this._config.api_key_url}universes/${this._config.universe_id}/orderedDataStores/${datastore}/scopes/${scope}/entries`;\n    const response = await axios.get(url, {\n      headers: this._H(),\n      params: {\n        max_page_size: pageSize,\n        order_by: orderBy,\n        filter: filter,\n        page_token: exclusiveStartKey,\n      },\n    });\n    return response.data;\n  }\n\n  async create(datastore, scope, entry, data) {\n    const url = `${this._config.api_key_url}universes/${this._config.universe_id}/orderedDataStores/${datastore}/scopes/${scope}/entries`;\n    const payload = JSON.stringify({ value: 11 });\n    const response = await axios.post(url, payload, {\n      headers: this._H(),\n      params: { id: entry },\n    });\n    return response.data;\n  }\n\n  async increment(datastore, scope, entry, incrementBy) {\n    const url = `${this._config.api_key_url}universes/${this._config.universe_id}/orderedDataStores/${datastore}/scopes/${scope}/entries/${entry}:increment`;\n    const payload = JSON.stringify({ amount: incrementBy });\n    const response = await axios.post(url, payload, { headers: this._H() });\n    return response.data;\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Structured Table Types with Methods in Luau Lua\nDESCRIPTION: Defines a structured table type 'Car' with explicit properties and a method using function types. Demonstrates assigning a function with expected signature to a field in a table instance. Key for modeling objects with properties and behavior in Luau.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/type-checking.md#_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\ntype Car = {\n\tSpeed: number,\n\tDrive: (Car) -> ()\n}\n\nlocal function drive(car)\n\t-- Always go the speed limit\nend\n\nlocal taxi: Car = {Speed = 30, Drive = drive}\n```\n\n----------------------------------------\n\nTITLE: Granting Referral Rewards on Join - Roblox Lua\nDESCRIPTION: This snippet extends the referral handling by incorporating placeholder functions for granting rewards to both the inviter and the invitee. Within the `PlayerAdded` handler, after detecting a referral, it defines `rewardReferrer` and `rewardInvitee` local functions with commented-out examples of reward logic (like updating leaderstats). These functions would typically be called after they are defined.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/production/promotion/referral-system.md#_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\n-- Create or get the RemoteEvent for handling referrals\nlocal referrerEvent: RemoteEvent = ReplicatedStorage:FindFirstChild(\"ReferralReceivedEvent\")\n\n-- Function that triggers when a player joins\nfunction onPlayerAdded(player)\n    local joinData = player:GetJoinData()\n    local referredByPlayerId = joinData.ReferredByPlayerId\n\n    -- Check if the player was invited through a referral\n    if referredByPlayerId and referredByPlayerId ~= 0 then\n        -- Fire the referral event to the client, passing the inviter's ID\n        referrerEvent:FireClient(player, referredByPlayerId)\n\n        -- Reward the inviter\n        function rewardReferrer(referrerId)\n          local referrerPlayer = Players:GetPlayerByUserId(referrerId)\n          if referrerPlayer then\n              -- Grant the inviter their reward\n              -- Example: referrerPlayer.leaderstats.Coins.Value += 100\n          end\n        end\n\n        -- Reward the invitee\n        function rewardInvitee(player)\n            -- Grant the invitee their reward\n            -- Example: player.leaderstats.WelcomeBonus.Value += 50\n        end\n    end\nend\n\n-- Connect the function to the PlayerAdded event\nPlayers.PlayerAdded:Connect(onPlayerAdded)\n```\n\n----------------------------------------\n\nTITLE: Initiating Match Preparation via PlayerManager (MatchManager Script, Lua)\nDESCRIPTION: This script defines a MatchManager module responsible for preparing the game when a match starts. It requires the PlayerManager module and provides a prepareGame function that delegates player movement and weapon assignment to PlayerManager. Prerequisites are properly structured ServerStorage and working dependencies. Input is a match start trigger; output is the invocation of player preparation logic.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/battle-royale-series/managing-players.md#_snippet_12\n\nLANGUAGE: Lua\nCODE:\n```\nlocal MatchManager = {}\n\n-- Services\nlocal ServerStorage = game:GetService(\"ServerStorage\")\n\n-- Module Scripts\nlocal moduleScripts = ServerStorage:WaitForChild(\"ModuleScripts\")\nlocal playerManager = require(moduleScripts:WaitForChild(\"PlayerManager\"))\n\nfunction MatchManager.prepareGame()\n\tplayerManager.sendPlayersToMatch()\nend\n\nreturn MatchManager\n```\n\n----------------------------------------\n\nTITLE: Setting up SoundService and Feedback Sound (Lua)\nDESCRIPTION: This Lua code snippet retrieves the SoundService and the feedback sound from it. The script assumes a 'FeedbackSound' object exists within the SoundService. It creates variables to hold references to the SoundService and the specific 'FeedbackSound' object. This enables easier access to the sound object for later use in the script, particularly for playing the sound.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/audio/in-game-sounds.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal pickupObjects = workspace.Collectables.Objects\nlocal objectsArray = pickupObjects:GetChildren()\n\nlocal SoundService = game:GetService(\"SoundService\")\nlocal feedbackSound = SoundService:FindFirstChild(\"FeedbackSound\")\n\nlocal function partTouched(otherPart, objectPart)\n```\n\n----------------------------------------\n\nTITLE: Finalizing Cube Creation Function with Parenting - Luau\nDESCRIPTION: Completes the basic definition of the `makeCube()` function. After setting the size and color, it sets the `Parent` property of the created `Part` to `workspace`, making the object appear in the game world. This step is typically done last for better performance.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-4/nested-loops.md#_snippet_5\n\nLANGUAGE: Luau\nCODE:\n```\nlocal function makeCube()\n    local cube = Instance.new(\"Part\")\n    cube.Size = Vector3.new(CUBE_SIZE, CUBE_SIZE, CUBE_SIZE)\n    cube.Color = currentColor\n    cube.Parent = workspace\nend\n```\n\n----------------------------------------\n\nTITLE: Disabling Powerup After Activation in Roblox Luau\nDESCRIPTION: Enhances the speed boost functionality by temporarily disabling the powerup's ability to be touched after it's activated, preventing rapid repeat activations.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-3/powerups-with-if-statements.md#_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlocal speedBoost = script.Parent\n\nlocal function onTouch(otherPart)\n  local character = otherPart.Parent\n  local humanoid = character:FindFirstChildWhichIsA(\"Humanoid\")\n\n  if humanoid and humanoid.WalkSpeed <= 50 then\n    humanoid.WalkSpeed += 10\n    speedBoost.CanTouch = false\n  end\nend\n\nspeedBoost.Touched:Connect(onTouch)\n```\n\n----------------------------------------\n\nTITLE: Inspecting Currently Equipped Items with Roblox Lua API\nDESCRIPTION: This Lua code demonstrates how to override the default profile-based Inspect Menu and instead show a player's current avatar outfit as it appears in-game. It disables the default Inspect Menu via GuiService:SetInspectMenuEnabled(false), retrieves the player's HumanoidDescription from the active character's Humanoid, and invokes GuiService:InspectPlayerFromHumanoidDescription to display the updated avatar. The code requires access to 'GuiService' and 'Players', and expects the local player's character to have a Humanoid component. Input is implicit from context (local player), and outputs are UI updates. Limitations include requiring the player character to be loaded with a Humanoid.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/players/avatar-inspect-menu.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal GuiService = game:GetService(\"GuiService\")\nlocal Players = game:GetService(\"Players\")\nlocal player = Players.LocalPlayer\n\n-- Make profile-based Inspect Menu inaccessible\nGuiService:SetInspectMenuEnabled(false)\n\nlocal humanoid = player.Character and player.Character:FindFirstChildWhichIsA(\"Humanoid\")\nif humanoid then\n\t-- Get current HumanoidDescription from a player character\n\tlocal humanoidDescription = humanoid:GetAppliedDescription()\n\n\t-- Load the inspect menu from a humanoid description\n\tGuiService:InspectPlayerFromHumanoidDescription(humanoidDescription, player.Name)\nend\n```\n\n----------------------------------------\n\nTITLE: Using print() to Output Variable Contents in Luau\nDESCRIPTION: This snippet shows how to output the value stored in the variable myAnimal using the print function. It prints the contents of myAnimal to the Output window when the script is executed, demonstrating basic output of variable values in Luau.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-1/create-a-script.md#_snippet_3\n\nLANGUAGE: Luau\nCODE:\n```\nlocal myAnimal = \"Porcupines\"\nprint(myAnimal)\n```\n\n----------------------------------------\n\nTITLE: Using Type Annotations for Vector3 Optimization in Native Lua\nDESCRIPTION: This example illustrates how proper type annotations improve native code generation by helping the compiler make better optimization decisions. It shows the difference between annotated and non-annotated Vector3 handling.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/native-code-gen.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\n--!native\n\n-- \"v\" is assumed to be a table; function performs slower due to table checks\nlocal function sumComponentsSlow(v)\n\treturn v.X + v.Y + v.Z\nend\n\n-- \"v\" is declared to be a Vector3; code specialized for vectors is generated\nlocal function sumComponentsFast(v: Vector3)\n\treturn v.X + v.Y + v.Z\nend\n```\n\n----------------------------------------\n\nTITLE: Setting UIDragDetector BoundingUI in Roblox Studio\nDESCRIPTION: Links the 'BoundingUI' property of the 'UIDragDetector' (child of 'Handle') to the 'SliderFrame'. This restricts the draggable movement of the 'Handle' to stay within the visual bounds of the 'SliderFrame' container.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/ui/interactive-ui.md#_snippet_5\n\nLANGUAGE: Roblox Studio Configuration\nCODE:\n```\nTarget: EffectsVolumeSlider > SliderFrame > Handle > UIDragDetector (Class.UIDragDetector)\n\nProperty:\n- BoundingUI = [Link to EffectsVolumeSlider > SliderFrame]\n```\n\n----------------------------------------\n\nTITLE: Modifying Global Variable in a Loop in Luau\nDESCRIPTION: Illustrates a global variable `x` initialized to 0 and then incremented within a `for` loop. The variable retains its state and value across loop iterations and is accessible both inside and outside the loop, demonstrating the persistence of global variables.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/scope.md#_snippet_2\n\nLANGUAGE: Luau\nCODE:\n```\nx = 0  -- Global variable \"x\"\n\nfor i = 1, 4 do\n\tx += 1\n\tprint(\"Global 'x' = \" .. x)\nend\n\nprint(\"Global 'x' = \" .. x)\n\n--[[ Resulting output:\nGlobal 'x' = 1\nGlobal 'x' = 2\nGlobal 'x' = 3\nGlobal 'x' = 4\nGlobal 'x' = 4\n]]\n```\n\n----------------------------------------\n\nTITLE: Initiating Roblox Open Cloud Update Instance API Call - Python\nDESCRIPTION: This Python snippet demonstrates how to initiate the request to update properties of a specific Roblox engine instance using the Open Cloud API. It constructs the request body with the desired properties and sends a PATCH request. The response is an initial Operation object that must be polled for the update to complete.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/guides/instance.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport json\nimport requests\n\n# Generate at https://create.roblox.com/dashboard/credentials\napiKey = \"<API_KEY>\"\n# Find at https://create.roblox.com/dashboard/creations in the overflow menu of an experience tile\nuniverseId = \"<UNIVERSE_ID>\"\n# Find Start Place ID at https://create.roblox.com/dashboard/creations in the overflow menu of an experience tile\nplaceId = \"<PLACE_ID>\"\ninstanceId = \"<INSTANCE_ID>\"\ninstanceType = \"\"\npropertyName = \"\"\npropertyValue = \"\"\n\n# Request header\napiKeyHeaderKey = \"x-api-key\"\ncontentTypeHeaderKey = \"Content-type\"\ncontentTypeHeaderValue = \"application/json\"\n# Endpoint URL for Update Instance method\nupdateInstanceUrl = \"https://apis.roblox.com/cloud/v2/universes/%s/places/%s/instances/%s\"\n# JSON keys\ndetailsJSONKey = \"Details\"\nengineInstanceJSONKey = \"engineInstance\"\n\ndef GeneratePostData():\n  propertiesDict = {propertyName: propertyValue}\n  detailsDict = {instanceType: propertiesDict}\n  instanceDict = {detailsJSONKey: detailsDict}\n  outerDict = {engineInstanceJSONKey: instanceDict}\n  return json.dumps(outerDict)\n\ndef UpdateInstance(postData):\n    url = updateInstanceUrl % (universeId, placeId, instanceId)\n    headerData = {apiKeyHeaderKey: apiKey,\n    contentTypeHeaderKey: contentTypeHeaderValue}\n    return requests.patch(url, headers = headerData, data = postData)\n\npostData = GeneratePostData()\nresponse = UpdateInstance(postData)\nprint(\"Response:\", response.status_code, response.text)\n\n# Parse the Operation object's path from response. Poll for results to perform\n```\n\n----------------------------------------\n\nTITLE: Validating Ray Path Obstruction Using Scaled Direction in Roblox Lua\nDESCRIPTION: This code checks whether a ray is unobstructed by scaling the direction vector from the blast's origin to its destination, minus one unit. The operation helps avoid false positives where the destination point is at a wall boundary. Requires blast and ray result data. Inputs are origin and destination positions; outputs a modified direction vector, used in subsequent ray casting checks.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/gameplay-scripting/detect-hits.md#_snippet_8\n\nLANGUAGE: Lua\nCODE:\n```\nlocal scaledDirection = (rayResult.destination.Position - blastData.originCFrame.Position)\nscaledDirection *= (scaledDirection.Magnitude - 1) / scaledDirection.Magnitude\n```\n\n----------------------------------------\n\nTITLE: Handling Package Data Parsing Error\nDESCRIPTION: This error indicates a failure to parse package data for the specified model (`%s`). Ensure the `packageId` is valid and corresponds to an accessible package.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/validation-errors.md#_snippet_28\n\nLANGUAGE: Text\nCODE:\n```\nFailed to parse package data for model `%s`. Make sure the packageId is valid and try again.\n```\n\n----------------------------------------\n\nTITLE: UV Unwrapping in Blender's Edit Mode via Python API\nDESCRIPTION: This code snippet automates UV unwrapping in Blender by selecting all vertices and executing the unwrap operation. It assumes the object is in edit mode and has seams created, preparing the mesh for texturing. It is useful for batch processing or scripting UV maps.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/accessories/creating/unwrapping.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nimport bpy\n\n# Ensure the object is active and in edit mode\nbpy.ops.object.mode_set(mode='EDIT')\n\n# Select all vertices\nbpy.ops.mesh.select_all(action='SELECT')\n\n# Perform UV unwrap\nbpy.ops.uv.unwrap()\n\n# Switch to Texture Paint mode for painting\nbpy.ops.object.mode_set(mode='TEXTURE_PAINT')\n```\n\n----------------------------------------\n\nTITLE: Distributing Weapons and Sending Players to Match (PlayerManager Module, Lua)\nDESCRIPTION: This comprehensive PlayerManager module handles player joins, prepares players by assigning spawn locations and weapons, and orchestrates the process of sending players to the arena. It manages player arrays, determines spawn points, performs tool cloning, and uses event connections for automatic setup on player addition. Dependencies include ServerStorage, properly named objects in workspace, and required module scripts. Inputs are player events and service references; outputs are fully assigned, equipped, and positioned players within the game simulation.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/battle-royale-series/managing-players.md#_snippet_13\n\nLANGUAGE: Lua\nCODE:\n```\nlocal PlayerManager = {}\n-- Services\nlocal Players = game:GetService(\"Players\")\nlocal ServerStorage = game:GetService(\"ServerStorage\")\n\n-- Map Variables\nlocal lobbySpawn = workspace.Lobby.StartSpawn\nlocal arenaMap = workspace.Arena\nlocal spawnLocations = arenaMap.SpawnLocations\n\n-- Player Variables\nlocal activePlayers = {}\nlocal playerWeapon = ServerStorage.Weapon\n\n-- Local Functions\nlocal function onPlayerJoin(player)\n\tplayer.RespawnLocation = lobbySpawn\nend\n\nlocal function preparePlayer(player, whichSpawn)\n\tplayer.RespawnLocation = whichSpawn\n\tplayer:LoadCharacter()\n\tlocal character = player.Character or player.CharacterAdded:Wait()\n\tlocal sword = playerWeapon:Clone()\n\tsword.Parent = character\nend\n\n-- Module Functions\nfunction PlayerManager.sendPlayersToMatch()\n\tprint(\"Sending players to match\")\n\n\tlocal arenaSpawns = spawnLocations:GetChildren()\n\n\tfor playerKey, whichPlayer in Players:GetPlayers() do\n\t\ttable.insert(activePlayers, whichPlayer)\n\t\tlocal spawnLocation = table.remove(arenaSpawns, 1)\n\t\tpreparePlayer(whichPlayer, spawnLocation)\n\tend\nend\n\n--events\nPlayers.PlayerAdded:Connect(onPlayerJoin)\n\nreturn PlayerManager\n```\n\n----------------------------------------\n\nTITLE: Raycast Filtering in Roblox Lua\nDESCRIPTION: This example demonstrates how to use `RaycastParams` to filter raycast results.  It excludes the script's parent from the raycast, ignores water, and sets the filter type to `Exclude`.  The `highlight` attribute emphasizes the `RaycastParams` setup and filtering.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/workspace/raycasting.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal rayOrigin = Vector3.zero\nlocal rayDirection = Vector3.new(0, -100, 0)\n\nlocal raycastParams = RaycastParams.new()\nraycastParams.FilterDescendantsInstances = {script.Parent}\nraycastParams.FilterType = Enum.RaycastFilterType.Exclude\nraycastParams.IgnoreWater = true\n\nlocal raycastResult = Workspace:Raycast(rayOrigin, rayDirection, raycastParams)\n```\n\n----------------------------------------\n\nTITLE: Sharding a Queue using Rotating Pointers with Roblox MemoryStoreService in Lua\nDESCRIPTION: This Lua code demonstrates how to distribute reads, writes, and removals across multiple Roblox MemoryStoreService queues with rotating read and add pointers to maximize throughput. The code includes helper functions for rotating queue indices, batching reads, handling removal by IDs, and incrementally adding items. It expects four queues and the existence of the Players service. Inputs include the data to enqueue and dequeue; outputs are the items and their IDs. Adjustments may be needed for other queue counts or rotation strategies.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud-services/memory-stores/best-practices.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n-- Initialize the MemoryStore Service\nlocal MemoryStoreService = game:GetService(\"MemoryStoreService\")\n\n-- Create your Queues\nlocal q1 = MemoryStoreService:GetQueue(\"q1\")\nlocal q2 = MemoryStoreService:GetQueue(\"q2\")\nlocal q3 = MemoryStoreService:GetQueue(\"q3\")\nlocal q4 = MemoryStoreService:GetQueue(\"q4\")\n\n-- Put the Queues in an Array\nlocal queueArr = { q1, q2, q3, q4 }\n\n-- Create two pointers representing the indices of the read and add queues\nlocal readIndex = 1\nlocal addIndex = 1\n\n-- Create a local function that updates the indices appropriately\nlocal function rotateIndex(index, n)\n\treturn (index + n - 1) % 4 + 1\nend\n\n-- Create a local function that reads n items from the queue\nlocal function readFromQueue(count, allOrNothing, waitTimeout)\n\tlocal endIndex = count % 4\n\tlocal countPerQueue = count // 4\n\tlocal items = {}\n\tlocal ids = {}\n\n\t-- loop through each queue\n\tfor i = 1, 4, 1 do\n\t\t-- determine if this queue will read an extra item\n\t\tlocal diff = i - readIndex\n\t\tif diff < 0 then\n\t\t\tdiff += 4\n\t\tend\n\n\t\tlocal queue = queueArr[i]\n\n\t\t-- read items from each queue\n\t\t-- +1 items if matches extra read criteria\n\t\tif diff < endIndex then\n\t\t\titems[i], ids[i] = queue:ReadAsync(countPerQueue + 1, allOrNothing,waitTimeout)\n\t\telse\n\t\t\titems[i], ids[i] = queue:ReadAsync(countPerQueue, allOrNothing,waitTimeout)\n\t\tend\n\tend\n\n\treadIndex = rotateIndex(readIndex, count)\n\n\treturn items, ids\nend\n\n-- Create a local function that removes n items from the queue\nlocal function removeFromQueue(ids)\n\tfor i = 1, 4, 1 do\n\t\tlocal queue = queueArr[readIndex]\n\t\tqueue:RemoveAsync(ids[i])\n\tend\nend\n\n-- Create a local function that adds an item to the queue\nlocal function addToQueue(itemKey, expiration, priority)\n\tlocal queue = queueArr[readIndex]\n\tqueue:AddAsync(itemKey, expiration, priority)\n\taddIndex = rotateIndex(addIndex, 1)\nend\n\n-- Write some code!\n\nfor _, player in game:GetService(\"Players\"):GetPlayers() do\n\taddToQueue(player, 600, 0)\nend\n\nlocal players, ids = readFromQueue(20, true, -1)\nremoveFromQueue(ids)\n```\n\n----------------------------------------\n\nTITLE: Understanding Roblox Webhook Signature Formats in CSV\nDESCRIPTION: Two CSV snippets illustrate the format of the 'roblox-signature' header sent with each webhook notification. The first format includes a timestamp and a signature when a secret is configured, while the second format includes only the timestamp for webhooks without secrets. These formats are foundational for parsing and verification processes.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/webhooks/webhook-notifications.md#_snippet_1\n\nLANGUAGE: csv\nCODE:\n```\n\"roblox-signature\": \"t=<timestamp>,v1=<signature>\"\n```\n\n----------------------------------------\n\nTITLE: Customizing Notification Using Parameters in Luau\nDESCRIPTION: This code snippet demonstrates how to customize experience notifications by including parameters in the notification string and then setting the values for those parameters when calling the `createUserNotification` function.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/production/promotion/experience-notifications.md#_snippet_1\n\nLANGUAGE: Luau\nCODE:\n```\nlocal ServerScriptService = game:GetService(\"ServerScriptService\")\n\nlocal OCUserNotification = require(ServerScriptService.OpenCloud.V2.UserNotification)\nlocal recipientPlayerID = 505306092\n\nlocal userIdFriendParam = {int64Value = 3702832553}\nlocal pointsParam = {stringValue = \"5\"}\n\n-- In the payload, \"messageId\" is the value of the notification asset ID\n-- In this example, the notification string is \"{userId-friend} beat your high score by {points} points! Time to level up?\"\nlocal userNotification = {\n\tpayload = {\n\t\tmessageId = \"ef0e0790-e2e8-4441-9a32-93f3a5783bf1\",\n\t\ttype = \"MOMENT\",\n\t\tparameters = {\n\t\t\t[\"userId-friend\"] = userIdFriendParam,\n\t\t\t[\"points\"] = pointsParam\n\t\t}\n\t}\n}\n\nlocal result = OCUserNotification.createUserNotification(recipientPlayerID, userNotification)\n\nif result.statusCode ~= 200 then\n\tprint(result.statusCode)\n\tprint(result.error.code)\n\tprint(result.error.message)\nend\n```\n\n----------------------------------------\n\nTITLE: Handling Ad Visibility for Ineligible Users (Lua)\nDESCRIPTION: This code snippet demonstrates how to use `PolicyService:GetPolicyInfoForPlayerAsync()` to check if a player is eligible to see ads and then destroy a portal ad model if they are not. It is crucial to follow Roblox's Advertising Standards and hide, replace, or block ad content from ineligible users.  The script assumes a model named \"Main Portal Template\" exists under Workspace.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/production/monetization/immersive-ads.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\nlocal PolicyService = game:GetService(\"PolicyService\")\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal player = Players.LocalPlayer\n-- Sample assumes a \"Main Portal Template\" model exists under Workspace\nlocal mainPortal = Workspace:WaitForChild(\"Main Portal Template\")\n\n-- Get the policy info for the user\n\tlocal success, result = pcall(PolicyService.GetPolicyInfoForPlayerAsync, PolicyService, player)\n\tif success and result then\n\t\tif not result.AreAdsAllowed then\n\t\t\t-- Destroy the \"Main Portal Template\" instance on the user's client if ads are not allowed\n\t\t\tmainPortal:Destroy()\n\t\tend\n\telse\n\t\tprint(\"Failed to get policy for player\", player.Name, \"| Exception:\", result)\n\tend\n```\n\n----------------------------------------\n\nTITLE: Implementing Leaderboard Logic Using DataStores (Node.js)\nDESCRIPTION: This JavaScript code uses the `DataStores` class to implement the leaderboard logic. It creates entries, displays scores, increments scores, and updates the leaderboard. It requires the `ordered_data_stores.js` file and a `config.json` file for configuration.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/guides/usage-data-stores.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst leaderboardEndpoints = require('./ordered_data_stores');\n\nconst datastores = new leaderboardEndpoints.DataStores('config.json');\n\n// Variables\nconst orderedDataStore = 'PlayerScores';\nconst scope = 'global';\nconst entryNames = ['Ragdoll', 'Balinese', 'Tabby', 'Siamese'];\n\n// Create an entry and give each new player 50 points for joining the game\nentryNames.forEach(async (name) => {\n  await datastores.create(orderedDataStore, scope, name, 50);\n});\n\n// Display the players' scores\ndatastores.list(orderedDataStore, scope).then((playerScores) => {\n  console.log(playerScores);\n});\n\n// Increment the first player's score for winning the game\ndatastores.increment(orderedDataStore, scope, entryNames[0], 100);\n\n// Increment all the players' scores for participating in the game\nentryNames.forEach(async (name) => {\n  await datastores.increment(orderedDataStore, scope, name, 10);\n});\n\n// Display the updated leaderboard\ndatastores.list(orderedDataStore, scope).then((updatedPlayerScores) => {\n  console.log(updatedPlayerScores);\n});\n\n```\n\n----------------------------------------\n\nTITLE: Tweening Image Color on GuiObject Using TweenService in Lua\nDESCRIPTION: Animates the ImageColor3 property of an ImageLabel to change its displayed color over time. Utilizes TweenService and Players services. Inputs include a target Color3 RGB value, with the tween producing a smooth color transition.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/ui/animation.md#_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal TweenService = game:GetService(\"TweenService\")\nlocal Players = game:GetService(\"Players\")\n\nlocal PlayerGui = Players.LocalPlayer:WaitForChild(\"PlayerGui\")\nlocal ScreenGui = PlayerGui:WaitForChild(\"ScreenGui\")\nlocal object = ScreenGui:WaitForChild(\"ImageLabel\")\n\nlocal targetColor = Color3.fromRGB(255, 0, 0)\n\nlocal tweenInfo = TweenInfo.new(2)\nlocal tween = TweenService:Create(object, tweenInfo, {ImageColor3 = targetColor})\n\ntween:Play()\n```\n\n----------------------------------------\n\nTITLE: Playing UI Button Click Sounds in Lua (Client-Side)\nDESCRIPTION: This client-side Lua script template plays a sound when a UI button (TextButton or ImageButton) is activated. It retrieves the button script's parent, finds a specified sound in SoundService (requires replacing 'SOUND_NAME'), waits for the sound to load if needed using `Loaded:Wait()`, and connects a function to the button's `Activated` event to play the sound, ensuring it doesn't play if already playing.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/sound/objects.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal SoundService = game:GetService(\"SoundService\")\n\nlocal button = script.Parent\nlocal sound = SoundService:FindFirstChild(\"SOUND_NAME\")\n\nif not sound.isLoaded then\n\tsound.Loaded:Wait()\nend\n\nlocal function onButtonActivated()\n\tif sound and not sound.IsPlaying then\n\t\tsound:Play()\n\tend\nend\n\nbutton.Activated:Connect(onButtonActivated)\n```\n\n----------------------------------------\n\nTITLE: Implementing Client-Side Text Handling in Lua\nDESCRIPTION: A client script that handles receiving generated text from the server and displaying it in a chat bubble. It connects to a remote event and processes incoming messages.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/characters/generate-text.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal TextChatService = game:GetService(\"TextChatService\")\nlocal ChatEvent = ReplicatedStorage:WaitForChild(\"ChatEvent\")\n\nChatEvent.OnClientEvent:Connect(function(part, message)\n  TextChatService:DisplayBubble(part, message)\n  -- Optionally print for debug purposes\n  print(\"LLM output: \" .. message)\nend)\n```\n\n----------------------------------------\n\nTITLE: Logging a Custom Counter Event in Roblox (Lua)\nDESCRIPTION: This Lua snippet demonstrates how to log a simple custom event (counter) using the Roblox AnalyticsService. It retrieves the service and calls `LogCustomEvent` with the player object and a string event name ('MissionStarted'). This is useful for tracking the frequency of specific actions like button clicks or quest starts without an associated value. Counters automatically track event count and unique users, treating each event as having a value of 1 for aggregation purposes. Events must be sent from the server.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/production/analytics/custom-events.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal AnalyticsService = game:GetService(\"AnalyticsService\")\n\nAnalyticsService:LogCustomEvent(\n    player,\n    \"MissionStarted\" -- Event name\n)\n```\n\n----------------------------------------\n\nTITLE: Give player treasure - Lua\nDESCRIPTION: This code defines a function `openChest` within the TreasureManager module to award treasure to a player and subtract the key cost. It takes the chest part and player's character as input, retrieves the player's keys and treasure, updates their values, and destroys the chest part.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-6/create-with-module-scripts.md#_snippet_13\n\nLANGUAGE: Lua\nCODE:\n```\nfunction TreasureManager.openChest(chestPart, whichCharacter)\n\tlocal playerKeys = getPlayerKeys(whichCharacter)\n\tlocal playerTreasure = getPlayerTreasure(whichCharacter)\n\tplayerKeys.Value = playerKeys.Value - chestPickCost\n\tplayerTreasure.Value = playerTreasure.Value + chestReward\n\tchestPart:Destroy()\nend\n```\n\n----------------------------------------\n\nTITLE: Rendering Action Buttons Using Material UI with React JSX\nDESCRIPTION: This snippet generates a series of Material UI Button components by mapping over content.buttons array. Each button includes properties like on-screen positioning (marginTop, marginRight), variant, color, size, and a hyperlink via href. The text label within each button is specified by button.text. This allows rendering interactive call-to-action buttons dynamically with consistent styling and user navigation capabilities.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/platform.md#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n{content.buttons && content.buttons.map((button, btnIndex) => (\n  <Button\n    key={btnIndex}\n    style={{ marginTop: 16, marginRight: 24 }}\n    variant=\"contained\"\n    color=\"secondary\"\n    size=\"large\"\n    href={button.href}\n  >\n    {button.text}\n  </Button>\n))\n```\n\n----------------------------------------\n\nTITLE: Adding prepareGame Function to MatchManager Module (Roblox Lua)\nDESCRIPTION: Defines the `prepareGame` function within the MatchManager ModuleScript. This function is intended to handle game setup logic, such as transitioning players. Currently, it only prints a 'Game starting!' message as a placeholder for testing.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/battle-royale-series/coding-the-game-loop.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal MatchManager = {}\n\nfunction MatchManager.prepareGame()\n\tprint(\"Game starting!\")\nend\n\nreturn MatchManager\n```\n\n----------------------------------------\n\nTITLE: Handling Model/Skin Vertex Mismatch Error\nDESCRIPTION: This error indicates the number of vertices in the model mesh (`%s`) does not align with the number of skin weights provided. To resolve this, the model must be re-skinned ensuring the geometry and skinning data match.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/validation-errors.md#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nDetected mismatch between model and skinned data for `%s`. You need to re-skin your model to fix this issue.\n```\n\n----------------------------------------\n\nTITLE: Setting Trigger Words for Chat Animation in Lua\nDESCRIPTION: This code snippet demonstrates how to set trigger words for a chat animation using the `setTriggerWordsForChatAnimation` function.  It registers a new string pattern \"cra+zy\" for a custom animation and an additional pattern \"coo+l\" for the Applaud animation. The SocialInteractions module must be available in ReplicatedStorage.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/social-interactions.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal SocialInteractions = require(ReplicatedStorage:WaitForChild(\"SocialInteractions\"))\n\n-- Register string pattern for the \"Tilt\" animation\nSocialInteractions.setTriggerWordsForChatAnimation(\"rbxassetid://3334538554\", {\"cra+zy\"})\n\n-- Register additional string pattern for the \"Applaud\" animation\nSocialInteractions.setTriggerWordsForChatAnimation(\"rbxassetid://5911729486\", {\"coo+l\"})\n```\n\n----------------------------------------\n\nTITLE: Verifying Body Skinning in Blender Using Pose Mode\nDESCRIPTION: Procedures to check that skinning is correctly applied and deforming the character mesh naturally. This includes enabling visual aids, switching to pose mode, hiding face bones, rotating bones, and resetting poses to test joint deformation and positioning.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/characters/testing/blender.md#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n## Body skin\n\nProperly skinning your character models ensures natural joint movements and realistic poses and expressions. There are several ways to verify skinning data, like using Blender's Pose Mode to pose the joints and examine how certain orientations can affect the joint skinning.\n\nUse the following steps in Blender to verify your joint skinning in Pose mode:\n\n1. With the **Armature** object selected, navigate to the **Object Properties** > **Viewport Display** and enable **Show In Front**. This allows you to see and access bones within your character.\n2. With the armature selected, and switch to **Pose Mode**.\n3. Select all the face bones of your model and press <kbd>H</kbd> to hide. You can reveal these again later with <kbd>Alt</kbd><kbd>H</kbd> (<kbd>⌥</kbd><kbd>H</kbd>) in Pose mode.\n4. Select any body bone and press <kbd>R</kbd> to rotate. Verify that your body bones correctly deform and bend the character mesh as expected in natural poses.\n\n   1. While actively rotating a bone, right-click to cancel the rotation and set the bone to its original position.\n   2. While actively rotating a bone, you can **click to confirm** the rotation and save the current position. You can combine this to make various poses of your character by changing the rotation of various limbs at once.\n   3. If you've saved a rotation, press <kbd>Alt</kbd><kbd>R</kbd> (<kbd>⌥</kbd><kbd>R</kbd>) to clear any rotation in Pose Mode. Make sure to reset your pose whenever you complete testing.\n\n   <video controls src=\"../../../assets/art/avatar/basic-creation/Testing_02.mp4\" width=\"100%\"></video>\n\nYou can also run through common poses and movements using Roblox's [Calisthenics Tool](../../../art/modeling/calisthenics-tool.md) add-on, which applies several common animations to an avatar armature that you can play back and review in Blender's animation timeline.\n\n<Alert severity = 'warning'>\nThe [Calisthenics Tool](../../../art/modeling/calisthenics-tool.md) adds animations to your timeline to quickly preview body animations. Be careful when saving or exporting your character when using this tool, as it may conflict with saved facial animation data that uses the same timeline.\n</Alert>\n\n<video controls src=\"../../../assets/art/avatar/basic-creation/Testing_03.mp4\" width=\"100%\"></video>\n\n<Alert severity = 'error'>\nIf you discover issues with your skinning, you may need to troubleshoot and reapply rigging and skinning steps to your humanoid. See [Rigging and skinning](../../../art/modeling/rigging.md) for an overview of the rigging and skinning processes.\n\nIf you are using a template, it's possible the skinning data was affected by a destructive modeling change. This may require reskinning, or starting over your character customization from the original template file.\n</Alert>\n```\n\n----------------------------------------\n\nTITLE: Subscribing to catalogViewClosed Event with Lua in Roblox\nDESCRIPTION: Binds an event handler to MerchBooth.catalogViewClosed that fires when the catalog view is closed. The MerchBooth module is obtained from ReplicatedStorage. The connected handler prints confirmation of the catalog view closing, facilitating clean-up or UI transition logic.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/merch-booth.md#_snippet_36\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal MerchBooth = require(ReplicatedStorage:WaitForChild(\"MerchBooth\"))\n\nMerchBooth.catalogViewClosed:Connect(function()\n\tprint(\"Catalog view closed\")\nend)\n```\n\n----------------------------------------\n\nTITLE: Initiating Roblox Open Cloud List Instance Children API Call - cURL\nDESCRIPTION: This cURL snippet demonstrates how to initiate the request to list the children of a specific Roblox engine instance using the Open Cloud API from the command line. It sends a GET request and expects an initial Operation object in the response, which needs further polling.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/guides/instance.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl --include --location --request GET \"https://apis.roblox.com/cloud/v2/universes/<universeId>/places/<placeId>/instances/<instanceId>:listChildren\" --header \"x-api-key: <api-key>\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Visual Properties for Dust Particle Emitter (Roblox Studio)\nDESCRIPTION: Sets the visual appearance properties for the 'Emitter_DustMotes'. This includes the particle color, size over time (using a NumberSequence that ramps up then fades), texture ID, transparency over time (using a NumberSequence with an envelope for randomness), and ZOffset to ensure particles appear behind other objects.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/core/building/create-basic-visual-effects.md#_snippet_2\n\nLANGUAGE: Configuration\nCODE:\n```\nColor: 192, 241, 255\nSize: NumberSequence (Rises to 0.25 shortly after creation, then fades gradually to 0)\nTexture: rbxassetid://14302399641\nTransparency: NumberSequence (Begins fully transparent, becomes randomly opaque with envelope 0.1, then fades out)\nZOffset: -5\n```\n\n----------------------------------------\n\nTITLE: UI Tween - Position & Rotation (Lua)\nDESCRIPTION: This Lua code snippet shows how to tween both the Position and Rotation properties of a UI element (ImageLabel) simultaneously. It uses TweenService to animate the UI object's position and rotation to a target position and rotation.  It relies on the TweenService and Players services, and assumes the existence of a PlayerGui, ScreenGui, and an ImageLabel object. The AnchorPoint is set to the center of the ImageLabel.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/ui/animation.md#_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nlocal TweenService = game:GetService(\"TweenService\")\nlocal Players = game:GetService(\"Players\")\n\nlocal PlayerGui = Players.LocalPlayer:WaitForChild(\"PlayerGui\")\nlocal ScreenGui = PlayerGui:WaitForChild(\"ScreenGui\")\nlocal object = ScreenGui:WaitForChild(\"ImageLabel\")\n\nobject.AnchorPoint = Vector2.new(0.5, 0.5)\n\nlocal targetPosition = UDim2.new(0.5, 0, 0.5, 0)\nlocal targetRotation = 45\n\nlocal tweenInfo = TweenInfo.new(2)\nlocal tween = TweenService:Create(object, tweenInfo, {Position = targetPosition, Rotation = targetRotation})\n\ntween:Play()\n```\n\n----------------------------------------\n\nTITLE: Defining platform variable referencing script's parent object in Luau\nDESCRIPTION: This code creates a local variable named 'platform' that references the part to which the script is attached, leveraging 'script.Parent' to access its parent object in the hierarchy.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/scripting/basic-scripting/intro-to-scripting.md#_snippet_0\n\nLANGUAGE: Luau\nCODE:\n```\nlocal platform = script.Parent\n```\n\n----------------------------------------\n\nTITLE: Generic For Loop with Custom Iterator in Luau\nDESCRIPTION: This code demonstrates a generic `for` loop in Luau using a custom iterator defined through the `__iter` metamethod. The custom iterator iterates over the elements of a table in reverse order. The loop prints the index and value for each element during the reversed iteration.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/control-structures.md#_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nlocal myTable = {1, 2, 3, 4, 5}\n\nmyMetatable = {\n\t__iter = function(t)\n\t\tlocal i = #t + 1\n\n\t\treturn function()\n\t\t\ti -= 1\n\n\t\t\tif i > 0 then\n\t\t\t\treturn i, t[i]\n\t\t\tend\n\t\tend\n\tend,\n}\n\nsetmetatable(myTable, myMetatable)\n\nfor i, v in myTable do\n\tprint(i, v)\nend\n\n--[[ Resulting output:\n5 5\n4 4\n3 3\n2 2\n1 1\n]]\n```\n\n----------------------------------------\n\nTITLE: Accessing Atomic Model Parts with WaitForChild in Roblox (Lua)\nDESCRIPTION: This LocalScript demonstrates how to safely access an atomic model and its parts under streaming, using the WaitForChild() method to ensure the atomic model exists in Workspace before referencing its descendants. Requires the Workspace service and assumes a model named 'Model' with child parts 'MeshPart' and 'Part'. All descendant parts are available immediately after the model is streamed in. This script avoids referencing unloaded instances and must be placed in the context of a Roblox experience with streaming enabled.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/workspace/streaming.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Atomic model does not exist at load time; use WaitForChild()\nlocal model = Workspace:WaitForChild(\"Model\")\n\n-- Descendant parts stream in with model and are immediately accessible\nlocal meshPart = model.MeshPart\nlocal part = model.Part\n```\n\n----------------------------------------\n\nTITLE: Setting custom notification options with ExperienceInviteOptions in Roblox Lua\nDESCRIPTION: This snippet demonstrates how to assign a custom notification Asset ID to the ExperienceInviteOptions object using the InviteMessageId property. Notification assets are created in the Roblox Creator Dashboard and define the invite notification text received by invited friends. This example shows setting only the InviteMessageId, assuming that the Notification asset ID has been copied. The snippet uses SocialService and Players services and is intended for LocalScript execution.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/production/promotion/invite-prompts.md#_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nlocal SocialService = game:GetService(\"SocialService\")\nlocal Players = game:GetService(\"Players\")\n\nlocal player = Players.LocalPlayer\n\n-- Construct invite options with friend's user ID\nlocal inviteOptions = Instance.new(\"ExperienceInviteOptions\")\ninviteOptions.InviteMessageId = \"ef0e0790-e2e8-4441-9a32-93f3a5783bf1\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Middle Room Parts for Middle Combat Pocket in Roblox Studio\nDESCRIPTION: Details the Size and CFrame.Position properties for block Parts used to construct the central room section of the middle combat pocket within the sample Roblox environment. This includes walls extending into hallways and doorway components.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/environmental-art/greybox-your-environment.md#_snippet_4\n\nLANGUAGE: Roblox Studio Properties\nCODE:\n```\nPart: Left wall that extends into the hallway\nSize: 10, 20, 25\nCFrame.Position: -85, 15, 197.5\n\nPart: Right wall that extends into the hallway\nSize: 10, 20, 25\nCFrame.Position: -85, 15, 122.5\n\nPart: Left doorway, top wall\nSize: 25, 20, 15\nCFrame.Position: -67.5, 15, 192.5\n\nPart: Left doorway, overhang\nSize: 10, 10, 15\nCFrame.Position: -50, 20, 192.5\n\nPart: Left doorway, bottom wall\nSize: 5, 20, 15\nCFrame.Position: -42.5, 15, 192.5\n\nPart: Right doorway, top wall\nSize: 25, 20, 15\nCFrame.Position: -67.5, 15, 127.5\n\nPart: Right doorway, overhang\nSize: 10, 10, 15\nCFrame.Position: -50, 20, 127.5\n\nPart: Right doorway, bottom wall\nSize: 5, 20, 15\nCFrame.Position: -42.5, 15, 127.5\n```\n\n----------------------------------------\n\nTITLE: Setting Up Touch Button Asynchronously (Lua)\nDESCRIPTION: This module script positions and scales the blast button near the jump button if the player is using a device that supports touch controls and is using touch input. It checks `UserInputService.TouchEnabled` to see if touch is supported, waits for the jump button to be added by core scripts, and then scales and positions the blaster button relative to it. The button's visibility is updated based on the player's last input type.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/user-interface-design/implement-designs-in-studio.md#_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\nlocal UserInputService = game:GetService(\"UserInputService\")\n\nlocal localPlayer = Players.LocalPlayer\n\nlocal TOUCH_BUTTON_SIZE_RATIO_TO_JUMP_BUTTON = 0.75\n\nlocal function setupTouchButtonAsync(gui: ScreenGui)\n\tlocal blastButton = gui.BlastButton\n\n\t-- TouchEnabled only needs to be read once. If this device doesn't support touch input,\n\t-- then we don't need to do anything.\n\tif not UserInputService.TouchEnabled then\n\t\treturn\n\tend\n\t-- Since touch is supported, set up the a touch button for firing the blaster.\n\t-- Base the size and position of our blast button off of the default jump button, which can differ by device\n\n\t-- Wait for Roblox core scripts to add the default JumpButton\n\tlocal jumpButton =\n\t\tlocalPlayer.PlayerGui:WaitForChild(\"TouchGui\"):WaitForChild(\"TouchControlFrame\"):WaitForChild(\"JumpButton\")\n\n\tlocal function updateTouchButtonSizeAndPosition()\n\t\tlocal scaledTouchButtonSize = UDim2.fromOffset(\n\t\t\tjumpButton.AbsoluteSize.X * TOUCH_BUTTON_SIZE_RATIO_TO_JUMP_BUTTON,\n\t\t\tjumpButton.AbsoluteSize.Y * TOUCH_BUTTON_SIZE_RATIO_TO_JUMP_BUTTON\n\t\t)\n\n\t\tblastButton.Size = scaledTouchButtonSize\n\t\tblastButton.Position = jumpButton.Position + UDim2.fromOffset(jumpButton.AbsoluteSize.X, 0)\n\tend\n\tjumpButton:GetPropertyChangedSignal(\"AbsoluteSize\"):Connect(updateTouchButtonSizeAndPosition)\n\tjumpButton:GetPropertyChangedSignal(\"AbsolutePosition\"):Connect(updateTouchButtonSizeAndPosition)\n\tupdateTouchButtonSizeAndPosition()\n\n\t-- Only show the touch button when user is using touch input\n\tlocal function updateTouchVisibility()\n\t\tlocal lastInputType = UserInputService:GetLastInputType()\n\t\tlocal isTouchInput = lastInputType == Enum.UserInputType.Touch\n\t\tblastButton.Visible = isTouchInput\n\tend\n\tUserInputService.LastInputTypeChanged:Connect(updateTouchVisibility)\n\tupdateTouchVisibility()\nend\n\nreturn setupTouchButtonAsync\n```\n\n----------------------------------------\n\nTITLE: Implementing Random Map Selection in Roblox Studio (Lua)\nDESCRIPTION: This Lua module script, `MapManager`, is designed to handle random map selection and spawn location retrieval in a Roblox game. It assumes the presence of a 'Maps' folder in the workspace containing map folders. Each map folder is expected to have a 'SpawnLocations' folder containing spawn points. The script provides functions to pick a random map, get a random map, and retrieve spawn points for the selected map.  Dependencies include the Roblox Studio environment and the `Random` class.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/battle-royale-series/finishing-the-project.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\n--[[\nSetup Notes:\n1. In Workspace, create a folder named Maps. Store all parts of a map in individual folders.\n2. For each individual map, include a folder named SpawnLocations\n3. When starting a match, use pickNewMap() to get a random map. When assigning player spawn points, use\n\tGetSpawnLocations() to get a table with all locations.\n]]\n\nlocal MapManager = {}\n\nlocal mapsFolder = workspace.Maps\n-- Stores all maps that can be rotated between\nlocal availableMaps = mapsFolder:GetChildren()\n\n-- Stores the current map in play\nlocal activeMap\n\n-- Used to get random maps.\nlocal randomGenerator = Random.new()\n\n-- Gets a random map from the available maps table\nfunction MapManager.pickNewMap()\n\tlocal whichMapKey = randomGenerator:NextInteger(1, #availableMaps)\n\tactiveMap = availableMaps[whichMapKey]\n\tprint(\"New map: \" .. activeMap.Name)\nend\n\n-- returns a table with the maps current spawn points\nfunction MapManager.getSpawnLocations()\n\tlocal spawnPoints = activeMap:FindFirstChild(\"SpawnLocations\")\n\tlocal availableSpawnPoints = spawnPoints:GetChildren()\n\treturn availableSpawnPoints\nend\n\nreturn MapManager\n```\n\n----------------------------------------\n\nTITLE: Notification Permission Prompt Implementation in Luau\nDESCRIPTION: This code snippet shows how to implement the notification permission prompt.  It checks if the user is eligible using `CanPromptOptInAsync`, and if so prompts them using `PromptOptIn`.  It also listens for the `OptInPromptClosed` event.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/production/promotion/experience-notifications.md#_snippet_2\n\nLANGUAGE: Luau\nCODE:\n```\nlocal ExperienceNotificationService = game:GetService(\"ExperienceNotificationService\")\n\n-- Function to check whether the player can be prompted to enable notifications\nlocal function canPromptOptIn()\n\tlocal success, canPrompt = pcall(function()\n\t\treturn ExperienceNotificationService:CanPromptOptInAsync()\n\tend)\n\treturn success and canPrompt\nend\n\nlocal canPrompt = canPromptOptIn()\nif canPrompt then\n\tlocal success, errorMessage = pcall(function()\n\t\tExperienceNotificationService:PromptOptIn()\n\tend)\nend\n\n-- Listen to opt-in prompt closed event\nExperienceNotificationService.OptInPromptClosed:Connect(function()\n\tprint(\"Opt-in prompt closed\")\nend)\n```\n\n----------------------------------------\n\nTITLE: Preparing Player Characters and Loading Weapon Tool (Lua)\nDESCRIPTION: This snippet defines a function to prepare a player's character and assign them to a spawn location. It loads the player's character, ensures the character model is available, and is intended to be extended further for equipping tools or performing setup logic. Prerequisites include a valid player object and a specified spawn location. The function ensures safe character loading by waiting for the character to exist.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/battle-royale-series/managing-players.md#_snippet_9\n\nLANGUAGE: Lua\nCODE:\n```\nlocal function preparePlayer(player, whichSpawn)\n\tplayer.RespawnLocation = whichSpawn\n\tplayer:LoadCharacter()\n\n\tlocal character = player.Character or player.CharacterAdded:Wait()\nend\n```\n\n----------------------------------------\n\nTITLE: Referencing Existing Loading Screen UI (Roblox Lua)\nDESCRIPTION: This Lua code snippet shows how to use an existing ScreenGui instance as the custom loading screen. It assumes a ScreenGui named \"LoadingScreen\" is already placed within ReplicatedFirst. The script finds this ScreenGui, parents it to the player's PlayerGui, removes the default loading screen, waits for a minimum duration or game load, and finally destroys the UI.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/players/loading-screens.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\nlocal ReplicatedFirst = game:GetService(\"ReplicatedFirst\")\n\nlocal player = Players.LocalPlayer\nlocal playerGui = player:WaitForChild(\"PlayerGui\")\n\nlocal screenGui = ReplicatedFirst.LoadingScreen\nscreenGui.IgnoreGuiInset = true\nscreenGui.Parent = playerGui\n\n-- Remove the default loading screen\nReplicatedFirst:RemoveDefaultLoadingScreen()\n\ntask.wait(5)  -- Force screen to appear for a minimum number of seconds\n\nif not game:IsLoaded() then\n\tgame.Loaded:Wait()\nend\n\nscreenGui:Destroy()\n```\n\n----------------------------------------\n\nTITLE: Connecting to the visibilityChanged Event in Roblox Lua\nDESCRIPTION: This Lua code snippet demonstrates how to connect a function to the `visibilityChanged` event of the `FriendsLocator` module within a `LocalScript`. It retrieves the `FriendsLocator` module from `ReplicatedStorage` using `WaitForChild` and defines a callback function that prints the player's display name and the visibility status (`isVisible`) whenever the event is triggered. The event provides the Player object, their CFrame, and a boolean indicating visibility.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/friends-locator.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal FriendsLocator = require(ReplicatedStorage:WaitForChild(\"FriendsLocator\"))\n\nFriendsLocator.visibilityChanged:Connect(function(player, playerCFrame, isVisible)\n\tprint(\"Visibility of locator icon for\", player.DisplayName, \":\", isVisible)\nend)\n```\n\n----------------------------------------\n\nTITLE: Maya FBX Export Process\nDESCRIPTION: Detailed steps for exporting a mesh as an FBX file from Maya with appropriate settings for scale, axis, textures, and animation, ensuring compatibility with Roblox Studio for accessory development.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/accessories/export-settings.md#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n1. In the topbar, click **File**. A pop-up menu displays.\n2. Select **Export All**. The **Export All** window displays.\n3. Near the bottom of the window, click the **Files of type** dropdown, then select **FBX export**.\n4. On the right-hand side of the window, navigate to the **Options...** section.\n5. In the **Geometry** section, enable **Smooth Mesh** and **Referenced Asset Content**.\n6. In the **Animation** section, disable **Animation**.\n7. If you need to import textures as a `.png`, in the **Embed Media** section, enable **Embed Media**.\n8. In the **Advanced Options** section,\n   - Navigate to **Units**, then enable **Automatic**.\n   - Navigate to **Axis Conversion**, then set the **Up Axis** property to **Y**.\n9. Click the **Export All** button.\n\n   <img src=\"../../assets/accessories/lc-requirements-maya-settings.png\" />\n\n10. After exporting, use Studio's [3D Importer](../../art/modeling/3d-importer.md) to import your model and the [Accessory Fitting Tool](../../art/accessories/accessory-fitting-tool.md) to convert the model into an accessory.\n```\n\n----------------------------------------\n\nTITLE: Removing Item from Merch Booth (Lua)\nDESCRIPTION: Demonstrates how to use the `MerchBooth.removeItem` function from a server-side `Script` to unregister an item previously added with `addItemAsync`. It takes the asset ID of the item to remove as a parameter. The example adds an item, waits 5 seconds using `task.wait`, and then removes the item. Removing an item removes its catalog tile and associated proximity prompts.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/merch-booth.md#_snippet_18\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal MerchBooth = require(ReplicatedStorage:WaitForChild(\"MerchBooth\"))\n\nlocal success, errorMessage = pcall(function()\n\tMerchBooth.addItemAsync(4819740796)\nend)\nif success then\n\t-- After some time, remove the item\n\ttask.wait(5)\n\tMerchBooth.removeItem(4819740796)\nend\n```\n\n----------------------------------------\n\nTITLE: Conditional Logic for Harvesting and Updating Player Items in Lua\nDESCRIPTION: This snippet adds logic to verify that a touched object has 'CanHarvest' set to true and that the player has space in their inventory. If conditions are met, it increments the player's item count, enabling dynamic gameplay mechanics.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/adventure-game-series/collect-items.md#_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nlocal function onTouch(partTouched)\n  local canHarvest = partTouched.Parent:FindFirstChild(\"CanHarvest\")\n  if canHarvest then\n    if canHarvest.Value == true and playerItems.Value < playerSpaces.Value then\n      playerItems.Value += 1\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Playing Looping Waterfall Audio in Roblox with Lua\nDESCRIPTION: A client-side script that plays a looping waterfall audio effect. The script references the parent AudioPlayer object and calls its Play() method to start the audio when the player joins the experience. This creates persistent environmental audio that continues until the player leaves.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/audio/add-3D-audio.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal audioPlayer = script.Parent\naudioPlayer:Play()\n```\n\n----------------------------------------\n\nTITLE: Setting Indoor Ambient Light Color in Roblox Lighting\nDESCRIPTION: Customizes the color of ambient light for indoor spaces by setting the 'Ambient' property (RGB value) of the Lighting service. This property controls indirect lighting where the sky is blocked, allowing the creation of a specific mood, such as a warm hue matching indoor light sources.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/lighting/enhance-indoor-environments.md#_snippet_4\n\nLANGUAGE: Roblox Properties\nCODE:\n```\nAmbient = 83, 70, 57\n```\n\n----------------------------------------\n\nTITLE: Checking Event Success Mid-Execution with Deferred Events (Luau)\nDESCRIPTION: Demonstrates a potential issue with deferred events where checking a success flag immediately after triggering an event might yield incorrect results (`false`) because the event handler is deferred. To get the correct result, the script must yield until the event handler has had a chance to run.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/scripting/events/deferred.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal success = false\nevent:Connect(function ()\n   success = true\nend)\ndoSomethingToTriggerEvent() -- Causes `event` to fire\nreturn success\n```\n\n----------------------------------------\n\nTITLE: Stack Overflow with `__index` and `__newindex` Interaction in Lua\nDESCRIPTION: Illustrates a common issue where an `__index` metamethod attempts to set a value (`self[i] = ...`), which triggers the `__newindex` metamethod. If `__newindex` prevents or modifies the standard assignment, trying to read the value again (`return self[i]`) can re-trigger `__index`, leading to infinite recursion and a stack overflow.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/metatables.md#_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\nlocal t = setmetatable({}, {\n    __index = function(self, i)\n    \tself[i] = i * 10\n    \treturn self[i]\n    end,\n    __newindex = function(self, i, v)\n    \t-- Don't set values to the table the normal way\n    end\n})\nprint(t[1]) -- Causes a stack overflow\n```\n\n----------------------------------------\n\nTITLE: Check Specific Vibration Motors Supported on a Controller in Lua\nDESCRIPTION: This snippet checks whether a controller supports vibration and queries support for individual motors such as Large, Small, and Trigger motors. It leverages Roblox's HapticService to verify support for multiple motor types, enabling developers to customize haptic feedback based on hardware capabilities.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/input/gamepad.md#_snippet_7\n\nLANGUAGE: Lua\nCODE:\n```\nlocal HapticService = game:GetService(\"HapticService\")\n\nlocal gamepad = Enum.UserInputType.Gamepad1\nlocal isVibrationSupported = HapticService:IsVibrationSupported(gamepad)\n\nif isVibrationSupported then\n\tlocal largeMotor = HapticService:IsMotorSupported(gamepad, Enum.VibrationMotor.Large)\n\tlocal smallMotor = HapticService:IsMotorSupported(gamepad, Enum.VibrationMotor.Small)\n\tlocal leftTriggerMotor = HapticService:IsMotorSupported(gamepad, Enum.VibrationMotor.LeftTrigger)\n\tlocal rightTriggerMotor = HapticService:IsMotorSupported(gamepad, Enum.VibrationMotor.RightTrigger)\n\tlocal leftHandMotor = HapticService:IsMotorSupported(gamepad, Enum.VibrationMotor.LeftHand)\n\tlocal rightHandMotor = HapticService:IsMotorSupported(gamepad, Enum.VibrationMotor.RightHand)\nend\n```\n\n----------------------------------------\n\nTITLE: Requesting Inventory Access Lua\nDESCRIPTION: This code snippet demonstrates how to request access to a user's inventory using the `AvatarEditorService`.  It uses `PromptAllowInventoryReadAccess()` to display a prompt to the user and waits for the response using `PromptAllowInventoryReadAccessCompleted:Wait()`. The code then checks if access was granted and, if so, proceeds.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/players/avatar-editor.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal AvatarEditorService = game:GetService(\"AvatarEditorService\")\n\nAvatarEditorService:PromptAllowInventoryReadAccess()\n\nlocal result = AvatarEditorService.PromptAllowInventoryReadAccessCompleted:Wait()\n\nif result == Enum.AvatarPromptResult.Success then\n  -- Access granted!\nend\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Arrays with General and Numeric For Loops in Luau - Lua\nDESCRIPTION: Shows two methods to iterate over array elements: a general 'for' loop using default iteration and a numeric 'for' loop using range and the length operator '#'. Prints every index and its corresponding value. Requires a populated array; outputs each element and its index. Highlights two idiomatic looping approaches in Luau.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/tables.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal testArray = {\"A string\", 3.14159, true, \"New string\"}\n\n-- Loop using general iteration\nfor index, value in testArray do\n\tprint(index, value)\nend\n\n-- Iterate using the array length operator (#)\nfor index = 1, #testArray do\n\tprint(index, testArray[index])\nend\n```\n\n----------------------------------------\n\nTITLE: Initializing Engagement Rewards Feature Package in Lua\nDESCRIPTION: This Lua script demonstrates how to initialize the Engagement Rewards package in Roblox. It requires important modules from ReplicatedStorage and defines a placeholder handler function, rewardClaimedHandlerFunction, which logs reward claims and returns a boolean indicating success. This function is intended to be replaced with custom logic that actually grants rewards to players based on the rewardId and quantity. The script serves as an example for integrating the package's server-side logic to track and process player rewards. Dependencies include the EngagementRewardsConfig, EngagementRewards, EngagementRewardsUtils, and Types modules located within the EngagementRewards folder in ReplicatedStorage.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/feature-packages/engagement-rewards.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal EngagementRewardsConfig = require(ReplicatedStorage.EngagementRewards.Configs.EngagementRewardsConfig)\nlocal EngagementRewards = require(ReplicatedStorage.EngagementRewards.Server.EngagementRewards)\nlocal EngagementRewardsUtils = require(ReplicatedStorage.EngagementRewards.Utils.EngagementRewardsUtils)\nlocal Types = require(ReplicatedStorage.EngagementRewards.Configs.Types)\n\n-- Replace this handler function with your own reward claimed handler function\n-- This function should handle the reward claimed event for the rewardId passed in\nlocal function rewardClaimedHandlerFunction(player: Player, rewardId: RewardId, quantity: number): (boolean, string?)\n   print(`Reward {rewardId} claimed by {player} with quantity {quantity}`)\n   return true\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Humanoid Display Properties - Roblox - Luau\nDESCRIPTION: This Luau function configures various display properties for a player's Humanoid character model upon spawning. It sets visibility distance, name/health display type, and whether joints break on death. These properties are optional and can be adjusted to meet specific gameplay design requirements.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/gameplay-scripting/spawn-respawn.md#_snippet_3\n\nLANGUAGE: Luau\nCODE:\n```\nlocal function setupHumanoidAsync(player: Player, humanoid: Humanoid)\n\thumanoid.DisplayDistanceType = Enum.HumanoidDisplayDistanceType.Subject\n\thumanoid.NameDisplayDistance = 1000\n\thumanoid.HealthDisplayDistance = 1000\n\thumanoid.NameOcclusion = Enum.NameOcclusion.OccludeAll\n\thumanoid.HealthDisplayType = Enum.HumanoidHealthDisplayType.AlwaysOn\n\thumanoid.BreakJointsOnDeath = false\n\n\thumanoid.Died:Wait()\n\tonHumanoidDied(player, humanoid)\nend\n```\n\n----------------------------------------\n\nTITLE: Publishing Messages to a Messaging Topic in Roblox Lua\nDESCRIPTION: This code shows how to publish messages to a specific messaging topic. When a player joins the server, it publishes a message containing the player's name and the server's JobId to notify all subscribed users across different servers.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud-services/cross-server-messaging.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal MessagingService = game:GetService(\"MessagingService\")\nlocal Players = game:GetService(\"Players\")\n\nlocal MESSAGING_TOPIC = \"FriendServerEvent\"\n\nPlayers.PlayerAdded:Connect(function(player)\n\t-- Publish to topic\n\tlocal publishSuccess, publishResult = pcall(function()\n\t\tlocal message = player.Name .. \" joined server with 'JobId' of \" .. game.JobId\n\t\tMessagingService:PublishAsync(MESSAGING_TOPIC, message)\n\tend)\n\tif not publishSuccess then\n\t\tprint(publishResult)\n\tend\nend)\n```\n\n----------------------------------------\n\nTITLE: Finding Named Children within Named Parent\nDESCRIPTION: Finds instances named `Model` that are direct children of instances named `workspace`. Uses the `.` operator for ancestry search.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/studio/explorer.md#_snippet_11\n\nLANGUAGE: RobloxSearchQuery\nCODE:\n```\nworkspace.Model\n```\n\n----------------------------------------\n\nTITLE: Configuring Scavenger Hunt Client Settings (Lua)\nDESCRIPTION: This Lua script, intended to be placed in a `LocalScript` within `StarterPlayerScripts`, demonstrates how to configure the client-side behavior of the ScavengerHunt module. It retrieves the module from `ReplicatedStorage` and calls `configureClient` to customize the text displayed in the information and completion modals, as well as the rotation speed of the collectible tokens.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/scavenger-hunt.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal ScavengerHunt = require(ReplicatedStorage:WaitForChild(\"ScavengerHunt\"))\n\nScavengerHunt.configureClient({\n\tinfoModalText = \"Welcome to my Scavenger Hunt!\",\n\tcompleteModalText = \"Thanks for playing my Scavenger Hunt!\",\n\ttokenRotationSpeed = 60,\n})\n```\n\n----------------------------------------\n\nTITLE: Understanding Table Copying with BindableFunctions in Lua\nDESCRIPTION: Demonstrates that tables passed as arguments to `BindableFunction:Invoke()` or returned from its `OnInvoke` callback are copied, meaning their memory addresses (identities) differ from the original. The script prints the table's identity before invoking, within the callback function, and after receiving the returned table, showing three distinct identities using `tostring()`. This confirms that data is passed by value (copying) for tables. Requires a `BindableFunction` named \"TestBindableFunction\".\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/scripting/events/bindable.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal ServerScriptService = game:GetService(\"ServerScriptService\")\n\nlocal bindableFunction = ServerScriptService:WaitForChild(\"TestBindableFunction\")\n\n-- Callback function\nlocal function returnTable(passedTable)\n\t-- Output table identity on invocation\n\tprint(tostring(passedTable))  --> table: 0x48eb7aead27563d9\n\treturn passedTable\nend\n\n-- Set function as bindable function's callback\nbindableFunction.OnInvoke = returnTable\n```\n\nLANGUAGE: lua\nCODE:\n```\nlocal ServerScriptService = game:GetService(\"ServerScriptService\")\n\nlocal bindableFunction = ServerScriptService:WaitForChild(\"TestBindableFunction\")\n\nlocal inventoryData = {\n\t\"Sword\", \"Bow\"\n}\n-- Output original table identity\nprint(tostring(inventoryData))  --> table: 0x059bcdbb2b576549\n\nlocal invokeReturn = bindableFunction:Invoke(inventoryData)\n\n-- Output table identity upon return\nprint(tostring(invokeReturn))  --> table: 0x9fcae7919563a0e9\n```\n\n----------------------------------------\n\nTITLE: Completed GameManager Script (Lua)\nDESCRIPTION: The final `GameManager` script responsible for the main game loop. It waits for the minimum number of players, manages transitions between game states (waiting, preparing, playing), and utilizes `DisplayManager` and `MatchManager` modules.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/battle-royale-series/creating-a-gui.md#_snippet_11\n\nLANGUAGE: lua\nCODE:\n```\n-- Services\nlocal ServerStorage = game:GetService(\"ServerStorage\")\nlocal Players = game:GetService(\"Players\")\n\n-- Module Scripts\nlocal moduleScripts = ServerStorage:WaitForChild(\"ModuleScripts\")\nlocal matchManager = require(moduleScripts:WaitForChild(\"MatchManager\"))\nlocal gameSettings = require(moduleScripts:WaitForChild(\"GameSettings\"))\nlocal displayManager = require(moduleScripts:WaitForChild(\"DisplayManager\"))\n\n-- Events\nlocal events = ServerStorage:WaitForChild(\"Events\")\nlocal matchEnd = events:WaitForChild(\"MatchEnd\")\n\nwhile true do\n\tdisplayManager.updateStatus(\"Waiting for Players\")\n\n\trepeat\n\t\ttask.wait(gameSettings.intermissionDuration)\n\tuntil #Players:GetPlayers() >= gameSettings.minimumPlayers\n\n\tdisplayManager.updateStatus(\"Get ready!\")\n\ttask.wait(gameSettings.transitionTime)\n\n\tmatchManager.prepareGame()\n\tmatchEnd.Event:Wait()\nend\n```\n\n----------------------------------------\n\nTITLE: Delegating Proximity Prompt Actions via ModuleScript in Lua (Dungeon Delve)\nDESCRIPTION: Demonstrates how the Dungeon Delve project's 'PromptEvents' script (in ServerScriptService) handles ProximityPromptService events. It requires an 'ObjectActions' ModuleScript and calls functions within that module to execute specific actions when prompts are triggered, held, or released, promoting modular code organization.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/ui/proximity-prompts.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal ProximityPromptService = game:GetService(\"ProximityPromptService\")\nlocal ServerScriptService = game:GetService(\"ServerScriptService\")\n\nlocal ObjectActions = require(ServerScriptService.ObjectActions)\n\n-- Detect when prompt is triggered\nlocal function onPromptTriggered(promptObject, player)\n\tObjectActions.promptTriggeredActions(promptObject, player)\nend\n\n-- Detect when prompt hold begins\nlocal function onPromptHoldBegan(promptObject, player)\n\tObjectActions.promptHoldBeganActions(promptObject, player)\nend\n\n-- Detect when prompt hold ends\nlocal function onPromptHoldEnded(promptObject, player)\n\tObjectActions.promptHoldEndedActions(promptObject, player)\nend\n\n-- Connect prompt events to handling functions\nProximityPromptService.PromptTriggered:Connect(onPromptTriggered)\nProximityPromptService.PromptButtonHoldBegan:Connect(onPromptHoldBegan)\nProximityPromptService.PromptButtonHoldEnded:Connect(onPromptHoldEnded)\n```\n\n----------------------------------------\n\nTITLE: Initializing MatchManager Module Table (Roblox Lua)\nDESCRIPTION: Basic structure for a ModuleScript named MatchManager, placed in ServerStorage/ModuleScripts. It defines a local table named 'MatchManager' and returns it, intended to hold functions related to match management like starting rounds or handling players.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/battle-royale-series/coding-the-game-loop.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal MatchManager = {}\n\nreturn MatchManager\n```\n\n----------------------------------------\n\nTITLE: Initializing GameSettings Module Table (Roblox Lua)\nDESCRIPTION: Basic structure for a ModuleScript named GameSettings, placed in ServerStorage/ModuleScripts. It defines a local table named 'GameSettings' and returns it, making it available for other scripts to require.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/battle-royale-series/coding-the-game-loop.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal GameSettings = {}\n\nreturn GameSettings\n```\n\n----------------------------------------\n\nTITLE: Saving Outfit Lua\nDESCRIPTION: This code saves the current character's HumanoidDescription as an outfit using `AvatarEditorService:PromptCreateOutfit()`.  It retrieves the HumanoidDescription from the player's character, and calls PromptCreateOutfit() with the current description and rig type. It then waits for the `PromptCreateOutfitCompleted` event and checks for a successful result.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/players/avatar-editor.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal AvatarEditorService = game:GetService(\"AvatarEditorService\")\nlocal Players = game:GetService(\"Players\")\n\nlocal player = Players.LocalPlayer\nlocal character = player.Character or player.CharacterAdded:Wait()\nlocal humanoid = character:WaitForChild(\"Humanoid\")\n\nlocal currentDescription = humanoid:GetAppliedDescription()\nAvatarEditorService:PromptCreateOutfit(currentDescription, humanoid.RigType)\n\nlocal result = AvatarEditorService.PromptCreateOutfitCompleted:Wait()\nif result == Enum.AvatarPromptResult.Success then\n  -- Outfit saved!\nend\n```\n\n----------------------------------------\n\nTITLE: Defining a Dictionary Search Function Stub in Luau\nDESCRIPTION: Provides the initial structure for a Luau function `findPet` intended to search a dictionary. It includes parameters for the dictionary (`whereToSearch`) and the value to find (`searchFor`), along with a `pairs` loop setup, but without the comparison logic.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-5/return-values-from-tables.md#_snippet_2\n\nLANGUAGE: Luau\nCODE:\n```\nlocal function findPet(whereToSearch, searchFor)\n\tfor place, value in pairs(whereToSearch) do\n\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Querying SelfieMode Open State in LocalScript - Lua\nDESCRIPTION: Demonstrates how to check if selfie mode is currently open by using the isSelfieModeOpen method. Depends on having SelfieMode loaded from ReplicatedStorage in a LocalScript. The function returns a boolean representing the selfie mode state; useful for conditional logic after opening the mode.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/selfie-mode.md#_snippet_7\n\nLANGUAGE: Lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal SelfieMode = require(ReplicatedStorage:WaitForChild(\"SelfieMode\"))\n\nSelfieMode.openSelfieMode()\n\nprint(SelfieMode.isSelfieModeOpen())\n```\n\n----------------------------------------\n\nTITLE: Defining LeftLowerLipDepressor Pose in Roblox FaceControls\nDESCRIPTION: Identifies the 'LeftLowerLipDepressor' pose via its Roblox FaceControls API reference. This pose lowers the character's lower lip away from the upper lip, revealing the lower teeth. It is a required pose for avatar assets intended for the Roblox Marketplace.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/characters/facial-animation/facs-poses-reference.md#_snippet_8\n\nLANGUAGE: Roblox API\nCODE:\n```\nClass.FaceControls.LeftLowerLipDepressor|LeftLowerLipDepressor\n```\n\n----------------------------------------\n\nTITLE: Building a Multi-Input Story with Concatenation in Roblox Lua\nDESCRIPTION: In this example, both name and food inputs are requested from the player using storyMaker:GetInput, then assembled into a full story sentence using Lua concatenation. The final story variable includes both personalized elements and sentence punctuation. Expected inputs are player strings; output is the finished story string. Dependency: storyMaker:GetInput implementation. The snippet emphasizes input sequencing and output formatting.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/build-it-play-it-story-games/finish-and-add.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal name1 = storyMaker:GetInput(\"What is your favorite name?\")\nlocal food1 = storyMaker:GetInput(\"What is your favorite food?\")\n\nlocal story = \"In a tree on a hill lives the great wizard \" .. name1 .. \". \" .. \"Every morning, the wizard loves eating a giant bowl of honey roasted \" .. food1 .. \". \"\n```\n\n----------------------------------------\n\nTITLE: Client-side script for displaying incoming chat messages in a custom UI\nDESCRIPTION: This Lua script listens for new chat messages received via TextChatService and creates or updates TextLabel GUI elements within a ScrollingFrame to display messages. It visually differentiates between outgoing and incoming messages by adjusting background transparency. It is intended to be parented to the LocalScript within the custom chat message display GUI.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/chat/examples/simple-custom-frontend-ui.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nlocal TextChatService = game:GetService(\"TextChatService\")\n\n-- Function to create or update message display labels\nlocal function addMessageGui(textChatMessage: TextChatMessage)\n\tlocal isOutgoingMessage = textChatMessage.Status == Enum.TextChatMessageStatus.Sending\n\n\tlocal parent = script.Parent\n\n\tlocal originalLabel = parent:FindFirstChild(textChatMessage.MessageId)\n\tif originalLabel then\n\t\toriginalLabel.Text = textChatMessage.Text\n\t\toriginalLabel.BackgroundTransparency = if isOutgoingMessage then 0.5 else 0\n\telse\n\t\tlocal textLabel = Instance.new(\"TextLabel\")\n\t\ttextLabel.BorderSizePixel = 0\n\t\ttextLabel.Font = Enum.Font.BuilderSans\n\t\ttextLabel.TextSize = 18\n\t\ttextLabel.TextXAlignment = Enum.TextXAlignment.Left\n\t\ttextLabel.BackgroundTransparency = if isOutgoingMessage then 0.5 else 0\n\t\ttextLabel.BackgroundColor3 = Color3.fromRGB(0, 0, 0)\n\t\ttextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)\n\t\ttextLabel.Name = textChatMessage.MessageId\n\t\ttextLabel.AutomaticSize = Enum.AutomaticSize.XY\n\t\ttextLabel.Text = textChatMessage.Text\n\t\ttextLabel.Parent = parent\n\tend\nend\n\n-- Connect function to incoming message event\nTextChatService.MessageReceived:Connect(addMessageGui)\n```\n\n----------------------------------------\n\nTITLE: Rendering Roblox Studio Overview - React\nDESCRIPTION: This code snippet renders the Roblox Studio overview content dynamically using React components. It iterates through the `sections` array, and renders different content blocks such as titles, descriptions, buttons, images, links, and statistics based on the configuration of the array. The rendering also manages the layout using a Grid layout with Material UI components and custom styling.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/studio/index.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n  {sections.map((section, index) => (\n    <Grid style={{ marginBottom: 48}} item xs={12} key={index}>\n      {section.title && (\n        <Typography variant='h1'>{section.title}</Typography>\n      )}\n    <div style={{ marginTop: 16, marginBottom: 48 }}>\n      {section.description && (\n        <p>{section.description}</p>\n      )}\n      {section.buttons && section.buttons.map((button, btnIndex) => (\n        <Button\n          key={btnIndex}\n          style={{ marginTop: 8, marginRight: 24 }}\n          variant=\"contained\"\n          color=\"secondary\"\n          size=\"large\"\n          href={button.href}\n        >\n          {button.text}\n        </Button>\n      ))}\n    </div>\n    {section.stats && (\n      <Grid item xs={12} style={{ textAlign: \"center\", marginTop: -48, marginBottom: 48 }}>\n        <Grid container spacing={4}>\n          {section.stats.map((stat, statIndex) => (\n            <Grid item xs={12} sm={6} md={4} key={statIndex}>\n              <Card variant=\"filled\">\n                <CardContent>\n                  <Typography variant=\"hero\" color=\"info\">{stat.header}</Typography>\n                  <Typography component=\"p\" variant=\"h2\">{stat.description}</Typography>\n                </CardContent>\n              </Card>\n            </Grid>\n          ))}\n        </Grid>\n      </Grid>\n      )}\n    {section.content && (\n      <Grid container spacing={4}>\n        {section.content.map((content, contentIndex) => {\n          const mdValue = 12 / section.content.length;\n          return (\n            <Grid item xs={12} sm={6} md={mdValue} key={contentIndex}>\n              <div style={{ marginBottom: 48 }}>\n                {content.image && (\n                  <img\n                    style={{ width: '100%', aspectRatio: 16/9, height: 'auto', objectFit: 'contain' }}\n                    src={content.image}\n                    alt=\"\"\n                  />\n                )}\n                {content.video && (\n                  <iframe  style={{ width: '100%', aspectRatio: 16/9, height: 'auto' }} src={content.video} title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n\n                )}\n                <h3>{content.title}</h3>\n                <p>{content.description}</p>\n                {content.links && content.links.map((link, linkIndex) => (\n                  <a href={link.href} key={linkIndex}>\n                    <Typography variant='buttonLarge'>{link.text}</Typography><br />\n                  </a>\n                ))}\n                {content.buttons && content.buttons.map((button, btnIndex) => (\n                  <Button\n                    key={btnIndex}\n                    style={{ marginTop: 16, marginRight: 24 }}\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    size=\"large\"\n                    href={button.href}\n                  >\n                    {button.text}\n                  </Button>\n                ))}\n              </div>\n            </Grid>\n          );\n        })}\n      </Grid>\n      )}\n    </Grid>\n  ))}\n```\n\n----------------------------------------\n\nTITLE: Roblox Lua Module Script to Schedule Force Field Deactivation After Conditions\nDESCRIPTION: This Lua module script listens for specific gameplay conditions—when a player fires their blaster, resets, or after 8 seconds of spawning—to disable the force field UI by destroying its ScreenGui. It uses attributes, character events, and a delay to manage timing and ensures the force field is only deactivated under these conditions. Dependencies include custom modules for blaster state management.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/user-interface-design/implement-designs-in-studio.md#_snippet_17\n\nLANGUAGE: Lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal getBlasterStateAttribute = require(ReplicatedStorage.Blaster.getBlasterStateAttribute)\nlocal BlasterState = require(ReplicatedStorage.Blaster.BlasterState)\n\nlocal MAX_FORCE_FIELD_TIME = 8\n\nlocal function destroyForceField(player: Player)\n\tif not player.Character then\n\t\treturn\n\tend\n\n\tlocal forceField = player.Character:FindFirstChildWhichIsA(\"ForceField\")\n\tif forceField then\n\t\tforceField:Destroy()\n\tend\nend\n\nlocal function scheduleDestroyForceField(player: Player)\n\tif not player then\n\t\tplayer = Players.LocalPlayer\n\tend\n\n\tlocal attributeChangedConnection, characterRespawnedConnection\n\tlocal forceFieldEnded = false\n\n\tlocal function endForceField()\n\t\tif forceFieldEnded then\n\t\t\treturn\n\t\tend\n\t\tforceFieldEnded = true\n\n\t\tattributeChangedConnection:Disconnect()\n\t\tcharacterRespawnedConnection:Disconnect()\n\t\tdestroyForceField(player)\n\tend\n\n\tlocal blasterStateAttribute = getBlasterStateAttribute()\n\tattributeChangedConnection = player:GetAttributeChangedSignal(blasterStateAttribute):Connect(function()\n\t\tlocal currentBlasterState = player:GetAttribute(blasterStateAttribute)\n\t\tif currentBlasterState == BlasterState.Blasting then\n\t\t\tendForceField()\n\t\tend\n\tend)\n\n\tcharacterRespawnedConnection = player.CharacterRemoving:Connect(endForceField)\n\n\ttask.delay(MAX_FORCE_FIELD_TIME, endForceField)\nend\n\nreturn scheduleDestroyForceField\n```\n\n----------------------------------------\n\nTITLE: Replacing _places Table in MainConfiguration - Lua\nDESCRIPTION: This Lua code snippet defines the `_places` table, which stores the place IDs for different game areas like lobby, gameplay, and various queues. It's intended to replace the existing `_places` table in the MainConfiguration script of the `Gameplay.rbxl` file. The script assigns numeric IDs to each named place within the game. This configuration is crucial for linking named places to their respective IDs within the game environment.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/battle-royale/installation-and-setup.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\n--------------------------------------\n-- List of named places in the game\nlocal _places = {\n\tlobby = 0123456789,\n\tgameplay_development = 0987654321,\n\tqueue_default = 0123459876,\n\tqueue_deathmatch = 0987651234,\n\tqueue_teamDeathmatch = 0132457689,\n\tqueue_freePlay = 0678912345\n}\n--------------------------------------\n```\n\n----------------------------------------\n\nTITLE: Spawning Players into Neutral Lobby (Lua)\nDESCRIPTION: This Lua function processes a table of players to move them to a neutral lobby state, typically between rounds. It sets each player's `Neutral` property to true (which automatically clears their `Team` assignment), updates their `PlayerState` attribute to `InLobby` (often used to trigger UI/equipment changes), and asynchronously loads their character, likely into a designated lobby spawn area.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/gameplay-scripting/spawn-respawn.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal function spawnPlayersInLobby(players: { Player })\n\tfor _, player in players do\n\t\tplayer.Neutral = true\n\t\tplayer:SetAttribute(PlayerAttribute.playerState, PlayerState.InLobby)\n\t\ttask.spawn(function()\n\t\t\tplayer:LoadCharacter()\n\t\tend)\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Assigning CollectionService Tags to NPCs and Players using Lua\nDESCRIPTION: This Lua snippet demonstrates how to add a CollectionService tag to a player character's script at runtime, enabling dynamic control of NPC aggression and faction behavior. It requires the Roblox API and that the script is a child of the character to be tagged. The CollectionService:AddTag() method takes two parameters: the instance to tag (in this case, script.Parent) and the tag string. This snippet has to be placed in StarterCharacterScripts to run for each player character.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/npc-kit.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal CollectionService = game:GetService(\"CollectionService\")\n\nCollectionService:AddTag(script.Parent, \"SoldierEnemy\")\n```\n\n----------------------------------------\n\nTITLE: Calculating Target Direction in Lua\nDESCRIPTION: This snippet calculates the direction vector from the tool's position to the target position (mouse location). It normalizes the vector to have a magnitude of 1 using the `Unit` property. This requires `mouseLocation` and `tool.Handle.Position` to be defined.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/scripting/intermediate-scripting/hit-detection-with-lasers.md#_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nlocal function fireWeapon()\n\tlocal mouseLocation = getWorldMousePosition()\n\n\t-- Calculate a normalised direction vector and multiply by laser distance\n\tlocal targetDirection = (mouseLocation - tool.Handle.Position).Unit\nend\n```\n\n----------------------------------------\n\nTITLE: Displaying a Basic System Message in Roblox Chat\nDESCRIPTION: This snippet shows how to display a basic system message in the chat window using TextChatService. It retrieves the RBXSystem text channel and displays a welcome message with a specific metadata tag for identification.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/chat/examples/custom-system-messages.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nlocal TextChatService = game:GetService(\"TextChatService\")\nlocal TextChannel = TextChatService:WaitForChild(\"TextChannels\").RBXSystem\n\nTextChannel:DisplaySystemMessage(\"Hello \" .. Players.LocalPlayer.Name, \"WelcomeMessage\")\n```\n\n----------------------------------------\n\nTITLE: Applying Initial Angular Impulse with Lua\nDESCRIPTION: This Lua script applies a single, random angular impulse along the Y-axis to its parent Part using the `ApplyAngularImpulse` method. It first gets a reference to the Part containing the script, then creates a Vector3 value representing the impulse with a random Y-component between 0 and 100, and finally calls the method on the part. This is typically used to initiate a spin that might then decay due to friction or other forces.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/physics/create-spinning-objects.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal part = script.Parent\nlocal impulse = Vector3.new(0, math.random(0, 100), 0)\npart:ApplyAngularImpulse(impulse)\n```\n\n----------------------------------------\n\nTITLE: Defining a Player Joined Event Handler - Lua\nDESCRIPTION: Shows the structure for a PlayerAdded event handler that receives each player as they join. Uses a local setPoints function with a player parameter, connected via :Connect(). Essential in Roblox for event-based user tracking.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-5/intro-to-dictionaries.md#_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\nlocal playerPoints = {\n\n}\n\nlocal function setPoints(newPlayer)\n\nend\n\nPlayers.PlayerAdded:Connect(setPoints)\n```\n\n----------------------------------------\n\nTITLE: Sample API JSON Response for Marketplace Item Query - JSON\nDESCRIPTION: Demonstrates the expected JSON response structure when querying the Marketplace API. The snippet contains asset metadata such as name, ID, asset type, creator information, price, and genre within the 'data' field array. The output depends on the search query and may include pagination with next/previous cursors as well as item details in a standardized format. No authentication or additional headers are required for this specific response structure, but the contents will vary based on input parameters.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/projects/assets/api.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"keyword\": null,\n\t\"previousPageCursor\": null,\n\t\"nextPageCursor\": \"2_1_c541d05046b5c1c78a5d386b5e302243\",\n\t\"data\": [\n    {\n        \"id\":527373900,\n        \"itemType\":\n        \"Asset\",\n        \"assetType\":42,\n        \"name\":\"Restless Souls Bandana\",\n        \"description\":\"This bandana won't help you blend in with ghosts, but at least you'll be stylish.\",\n        \"productId\":41270974,\n        \"genres\":[\n          \"Scary\",\n          \"Adventure\"\n          ],\n        \"itemStatus\":[],\n        \"itemRestrictions\":[],\n        \"creatorType\":\"User\",\n        \"creatorTargetId\":1,\n        \"creatorName\":\"Roblox\",\n        \"price\":300,\n        \"favoriteCount\":15943,\n        \"offSaleDeadline\":null\n        }\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Badge Information in Roblox using Lua\nDESCRIPTION: This Lua code snippet demonstrates how to retrieve information about a specific Roblox badge using its ID. It calls `BadgeService:GetBadgeInfoAsync()` with the `BADGE_ID` (which should be replaced with an actual ID). The call is wrapped in `pcall` for error handling. If successful, it prints the badge's name, description, enabled status, and constructs the icon asset ID URL; otherwise, it logs a warning with the error message.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/production/publishing/badges.md#_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nlocal BadgeService = game:GetService(\"BadgeService\")\n\nlocal BADGE_ID = 00000000  -- Change this to your badge ID\n\n-- Fetch badge information\nlocal success, result = pcall(BadgeService.GetBadgeInfoAsync, BadgeService, BADGE_ID)\n\n-- Output the information\nif success then\n\tprint(\"Badge:\", result.Name)\n\tprint(\"Enabled:\", result.IsEnabled)\n\tprint(\"Description:\", result.Description)\n\tprint(\"Icon:\", \"rbxassetid://\" .. result.IconImageId)\nelse\n\twarn(\"Error while fetching badge info:\", result)\nend\n```\n\n----------------------------------------\n\nTITLE: Filtering by Boolean Property Equality\nDESCRIPTION: Finds all `BasePart` instances where the `Locked` property is set to `true`. Uses the `=` operator for exact boolean matching.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/studio/explorer.md#_snippet_0\n\nLANGUAGE: RobloxSearchQuery\nCODE:\n```\nLocked = true\n```\n\n----------------------------------------\n\nTITLE: Calculating Language Signal Score\nDESCRIPTION: Calculates a categorical signal score representing the ratio of players in the server with the same language setting as the joining player.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/matchmaking/attributes-and-signals.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlanguageSignalScore = (# players with same language setting as joining player) / (# players on the server)\n```\n\n----------------------------------------\n\nTITLE: Swapping SurfaceAppearance Objects for Trim Meshes in Roblox\nDESCRIPTION: This snippet explains how to replace existing SurfaceAppearance objects on trim meshes with alternative textures, enhancing visual diversity. The steps involve selecting the mesh, removing its current SurfaceAppearance, copying an alternative from the folder, and pasting it onto the mesh. Optional tint color adjustments can further customize appearance.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/modeling/assemble-modular-environments.md#_snippet_1\n\nLANGUAGE: Roblox Studio\nCODE:\n```\n1. Select a trim mesh.\n2. In the Explorer, expand the model to find and delete the SurfaceAppearance object.\n3. Copy an alternative SurfaceAppearance from the folder.\n4. Paste it into the trim mesh in the hierarchy.\n5. (Optional) Hold <kbd>Alt</kbd><kbd>Shift</kbd> and click the trim, then change its BrickColor or Color to adjust tint.\n```\n\n----------------------------------------\n\nTITLE: Accessing RightEyeClosed Control in Roblox\nDESCRIPTION: Reference to the RightEyeClosed control which closes the character's right eyelid. This is a required pose for Marketplace avatar assets.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/characters/facial-animation/facs-poses-reference.md#_snippet_12\n\nLANGUAGE: Roblox\nCODE:\n```\nClass.FaceControls.RightEyeClosed\n```\n\n----------------------------------------\n\nTITLE: Performing Plugin Selection Raycast Lua\nDESCRIPTION: This snippet demonstrates how to perform a raycast from the mouse position, specifically configured for plugin selection logic. It uses 'StudioSelectable' as the collision filter for the RaycastParams and enables 'BruteForceAllSlow' to ensure selection behavior consistent with built-in Studio tools, potentially including parts with CanQuery disabled.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/workspace/collisions.md#_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlocal UserInputService = game:GetService(\"UserInputService\")\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal raycastParams = RaycastParams.new()\nraycastParams.CollisionGroup = \"StudioSelectable\"  -- To follow the convention\nraycastParams.BruteForceAllSlow = true  -- So that parts with CanQuery of \"false\" can be selected\n\nlocal mouseLocation = UserInputService:GetMouseLocation()\nlocal mouseRay = Workspace.CurrentCamera:ViewportPointToRay(mouseLocation.X, mouseLocation.Y)\nlocal filteredSelectionHit = Workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 10000, raycastParams)\n```\n\n----------------------------------------\n\nTITLE: Teleporting to Specific Public Servers in Roblox\nDESCRIPTION: Demonstrates how to configure TeleportOptions to target a specific public server by setting the ServerInstanceId property. This allows directing players to a particular running server instance.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/projects/teleport.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal teleportOptions = Instance.new(\"TeleportOptions\")\nteleportOptions.ServerInstanceId = targetServerId\n```\n\n----------------------------------------\n\nTITLE: Paginated GET Request for Inventory Items in JSON\nDESCRIPTION: Illustrates the API request format and expected paginated response structure when listing a user's inventory items through the Open Cloud API. Responses include an inventoryItems array and an optional nextPageToken for further pagination. Make subsequent requests using the nextPageToken until it is empty or omitted, thereby retrieving all pages. No external dependencies; intended for use as a RESTful API client.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/reference/patterns.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\nGET /cloud/v2/users/{user_id}/inventory-items?maxPageSize=25\n\n{\n  \"inventoryItems\": [\n    ...\n  ],\n  \"nextPageToken\": \"aaaBBB\"\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning a Metatable During Table Creation in Lua\nDESCRIPTION: Shows a concise alternative for creating a table and assigning its metatable in a single step by utilizing the return value of the `setmetatable` function.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/metatables.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal x = setmetatable({}, {})\n```\n\n----------------------------------------\n\nTITLE: Creating HumanoidDescription from Player Character in Roblox Lua\nDESCRIPTION: This snippet generates a HumanoidDescription based on the current properties of a player's avatar. It checks for the existence of a Humanoid in the player's character, then uses Humanoid:GetAppliedDescription() to retrieve all applied appearance data for further modification or cloning. The 'player' variable must reference a valid Player instance. Outputs a HumanoidDescription matching the player's character.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/characters/appearance.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal humanoid = player.Character and player.Character:FindFirstChildWhichIsA(\"Humanoid\")\n\nlocal humanoidDescription = Instance.new(\"HumanoidDescription\")\n\nif humanoid then\n\thumanoidDescription = humanoid:GetAppliedDescription()\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Portal Teleportation in Lua for Roblox\nDESCRIPTION: A code snippet that defines portal functionality by connecting a touch event to the ProcessPortal utility function. This allows teleporting players from one location to another with a transition cutscene when they touch a specific part.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/the-mystery-of-duvall-drive/supporting-systems.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nP1.Touched:Connect(function(otherPart) utils.ProcessPortal(otherPart, P2) end)\n```\n\n----------------------------------------\n\nTITLE: Get Player Tool Handle - Luau\nDESCRIPTION: This Luau function searches for the player's tool handle given the player. This is used by the server to get the laser's start position, since it can't be trusted from the client.  It first finds the Tool class instance that the player is holding and then finds the Handle child of the tool. Dependencies: Player's character must have a tool equipped.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/scripting/intermediate-scripting/hit-detection-with-lasers.md#_snippet_20\n\nLANGUAGE: lua\nCODE:\n```\nlocal LASER_DAMAGE = 10\n\n-- Find the handle of the tool the player is holding\nlocal function getPlayerToolHandle(player)\n    local weapon = player.Character:FindFirstChildOfClass(\"Tool\")\n    if weapon then\n        return weapon:FindFirstChild(\"Handle\")\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Updating GameManager to Call Match Reset\nDESCRIPTION: Updates the GameManager's main game loop to call matchManager.resetMatch() at the end of each match cycle to reset the game state.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/battle-royale-series/cleanup-and-reset.md#_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nwhile true do\n\tdisplayManager.updateStatus(\"Waiting for Players\")\n\n\trepeat\n\t\ttask.wait(gameSettings.intermissionDuration)\n\tuntil #Players:GetPlayers() >= gameSettings.minimumPlayers\n\n\tdisplayManager.updateStatus(\"Get ready!\")\n\ttask.wait(gameSettings.transitionTime)\n\n\tmatchManager.prepareGame()\n\tlocal endState = matchEnd.Event:Wait()\n\n\tlocal endStatus = matchManager.getEndStatus(endState)\n\tdisplayManager.updateStatus(endStatus)\n\n\tmatchManager.cleanupMatch()\n\ttask.wait(gameSettings.transitionTime)\n\n\tmatchManager.resetMatch()\nend\n```\n\n----------------------------------------\n\nTITLE: Handling Asset Moderation Failure Error\nDESCRIPTION: Indicates that one or more assets (`%s`) involved in the validation process failed moderation.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/validation-errors.md#_snippet_24\n\nLANGUAGE: Text\nCODE:\n```\nAsset(s) failed to pass moderation: `%s`.\n```\n\n----------------------------------------\n\nTITLE: Local Secret JSON Example\nDESCRIPTION: This JSON snippet demonstrates how to define a local secret for testing purposes. The secret is base64-encoded and associated with a domain. This configuration is added to Game Settings under the Security tab for local testing environments.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud-services/secrets.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"secretName\": [\"YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXo=\", \"*.example.com\"]}\n```\n\n----------------------------------------\n\nTITLE: Calculating Numerical Signal (Constant Value) in Lua\nDESCRIPTION: This code calculates a numerical signal comparing a server attribute to a constant value. The core functionality determines the difference, uses `math.min` to cap the result, and calculates a score between 0 and 1. It assesses proximity to a specified constant value.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/matchmaking/attributes-and-signals.md#_snippet_21\n\nLANGUAGE: lua\nCODE:\n```\nlocal diff = math.abs(server_{attribute_name} - constant_value)\nlocal score = math.min(diff / max_relevant_difference, 1)\nreturn score\n```\n\n----------------------------------------\n\nTITLE: Creating a Ray from Mouse Location in Lua\nDESCRIPTION: This snippet uses the player's 2D mouse location to create a ray in the 3D game world using `Camera:ViewportPointToRay()`. The function converts the 2D coordinates of the mouse cursor to a ray. The created ray will be used to cast a ray in the 3D game world.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/scripting/intermediate-scripting/hit-detection-with-lasers.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal function getWorldMousePosition()\n\tlocal mouseLocation = UserInputService:GetMouseLocation()\n\n\t-- Create a ray from the 2D mouse location\n\tlocal screenToWorldRay = workspace.CurrentCamera:ViewportPointToRay(mouseLocation.X, mouseLocation.Y)\nend\n```\n\n----------------------------------------\n\nTITLE: Clearing Variable and Table Entry with Nil in Luau\nDESCRIPTION: This snippet demonstrates how to use `nil` to effectively 'delete' a variable's value and remove an entry from a dictionary-like table. Setting a variable to `nil` removes its reference to a value, and setting a table key's value to `nil` removes that key-value pair from the table. This is useful for cleaning up data you no longer need.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/nil.md#_snippet_0\n\nLANGUAGE: luau\nCODE:\n```\nlocal variableToDelete = 5\nprint(variableToDelete) -- 5\nvariableToDelete = nil\nprint(variableToDelete) -- nil\n\nlocal dictionaryTable = {\n\tMonday = 1,\n\tTuesday = 2,\n\tWednesday = 3\n}\n-- Output value of 'Tuesday' key\nprint(dictionaryTable.Tuesday) -- 2\n-- Clear 'Tuesday' key\ndictionaryTable.Tuesday = nil\n-- Output value of key again\nprint(dictionaryTable.Tuesday) -- nil\n```\n\n----------------------------------------\n\nTITLE: Initializing Variables for ParticleEmitter and Trap Part in Roblox Lua\nDESCRIPTION: This snippet initializes key variables to reference the trap object and its associated ParticleEmitter named Explosion within the part. It also defines a constant EMIT_AMOUNT to specify how many particles are emitted per explosion burst. This setup is necessary for controlling the emission behavior programmatically in later logic.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/vfx/use-particles-for-explosions.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal trapObject = script.Parent\nlocal particleEmitter = trapObject.Explosion\n\nlocal EMIT_AMOUNT = 100\n```\n\n----------------------------------------\n\nTITLE: Computing a Path Asynchronously - PathfindingService - Lua\nDESCRIPTION: Illustrates only the ComputeAsync call inside a path-following Lua function. Takes a Vector3 destination and uses pcall for robust error catching. Prepares the code structure for integration into a full movement pipeline by emphasizing the computation (not movement) phase. Requires a previously created Path object and a valid character's PrimaryPart.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/characters/pathfinding.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal PathfindingService = game:GetService(\"PathfindingService\")\nlocal Players = game:GetService(\"Players\")\nlocal RunService = game:GetService(\"RunService\")\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal path = PathfindingService:CreatePath()\n\nlocal player = Players.LocalPlayer\nlocal character = player.Character\nlocal humanoid = character:WaitForChild(\"Humanoid\")\n\nlocal TEST_DESTINATION = Vector3.new(100, 0, 100)\n\nlocal waypoints\nlocal nextWaypointIndex\nlocal reachedConnection\nlocal blockedConnection\n\nlocal function followPath(destination)\n\t-- Compute the path\n\tlocal success, errorMessage = pcall(function()\n\t\tpath:ComputeAsync(character.PrimaryPart.Position, destination)\n\tend)\nend\n```\n\n----------------------------------------\n\nTITLE: Initializing Timed Bridge Functionality with User Interaction in Roblox Lua\nDESCRIPTION: This Lua script initializes properties and connections required for a timed bridge mechanic within Roblox. It sets references to key objects such as the bridge, button, and timer display elements. When the button is touched by a player's character part, it triggers a countdown timer during which the bridge is enabled and walkable. After the countdown, the bridge is disabled by changing its transparency and collision properties. Dependencies include Roblox's Lua environment, the workspace setup containing ButtonBridge, TimerDisplay with a SurfaceGui and TextLabel, and a bridge part as the script's parent. Inputs include player character parts touching the button, and outputs include the visible countdown on the GUI and changes in bridge physical properties.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-4/create-a-timed-bridge.md#_snippet_14\n\nLANGUAGE: Lua\nCODE:\n```\nlocal bridge = script.Parent\n-- Gets the button as it's typed in the Explorer\nlocal button = workspace.ButtonBridge\n\n-- Gets the part for the display\nlocal timerPart = workspace.TimerDisplay\n-- Gets the Text that will display the timer\nlocal timerText = timerPart.SurfaceGui.TextLabel\n\n-- How long players have to cross the bridge\nlocal timerDuration = 5\nlocal timerActive = false\n\nlocal function startTimer()\n    print(\"Countdown started\")\n\ttimerActive = true\n\tbridge.Transparency = 0\n\tbridge.CanCollide = true\n\n\t-- For loop that counts down from timerDuration\n\tfor count = timerDuration, 0, -1 do\n\t\ttimerText.Text = count\n\t\ttask.wait(1)\n\tend\n\n\t-- Make the bridge not walkable\n\tbridge.Transparency = 0.8\n\tbridge.CanCollide = false\n\ttimerText.Text = \"\"\n\ttimerActive = false\n\nend\n\nlocal function buttonPressed(partTouched)\n\tlocal character = partTouched.Parent\n\tlocal humanoid = character:FindFirstChildWhichIsA(\"Humanoid\")\n\tprint(\"part touched\")\n\n\tif humanoid and timerActive == false then\n\t\tprint(\"starting timer\")\n\t\tstartTimer()\n\tend\nend\n\nbutton.Touched:Connect(buttonPressed)\n```\n\n----------------------------------------\n\nTITLE: Creating Visual Effects on Art Changes in SurfaceArt Module (Lua)\nDESCRIPTION: This client-side script connects to the `artChanged` event of the SurfaceArt module to trigger custom visual effects, such as sparkles, when new art is placed on a surface. It demonstrates creating a particle emitter attached to the canvas at the spot where art is added, with a delay before removing the effect.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/surface-art.md#_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal SurfaceArt = require(ReplicatedStorage:WaitForChild(\"SurfaceArt\"))\n\nlocal function createParticleEmitter(canvas, position)\n\tlocal attachment = Instance.new(\"Attachment\")\n\tattachment.Position = canvas.CFrame:PointToObjectSpace(position)\n\tattachment.Axis = Vector3.new(0, 0, 1)\n\tattachment.SecondaryAxis = Vector3.new(1, 0, 0)\n\tattachment.Parent = canvas\n\n\tlocal particleEmitter = Instance.new(\"ParticleEmitter\")\n\tparticleEmitter.Speed = NumberRange.new(50)\n\tparticleEmitter.Rate = 50\n\tparticleEmitter.Color = ColorSequence.new(Color3.fromRGB(128, 254, 7))\n\tparticleEmitter.SpreadAngle = Vector2.new(35, 35)\n\tparticleEmitter.Parent = attachment\n\n\treturn attachment\nend\n\nSurfaceArt.artChanged:Connect(function(canvas, spot, spotPosition, artId, ownerId)\n\tif artId then\n\t\t-- Show some sparkles for 3 seconds\n\t\ntask.spawn(function()\n\t\t\tlocal emitterAttachment = createParticleEmitter(canvas, spotPosition)\n\t\t\ntask.wait(3)\n\t\t\temitterAttachment:Destroy()\n\tend)\n\tend\nend)\n```\n\n----------------------------------------\n\nTITLE: Configuring game end states and transition logic\nDESCRIPTION: This code initializes the `endStates` table within `GameSettings` to define different game termination conditions, such as timer expiration or a winner being found, using string identifiers. It allows other scripts to respond accordingly based on the game ending reason by passing this state through event firing.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/battle-royale-series/ending-matches.md#_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\nGameSettings.endStates = {\n\tTimerUp = \"TimerUp\",\n\tFoundWinner = \"FoundWinner\"\n}\n```\n\n----------------------------------------\n\nTITLE: Completed StatusDisplay LocalScript (Lua)\nDESCRIPTION: The final `StatusDisplay` LocalScript, typically placed inside a GUI TextLabel. It listens for changes to the `Status` StringValue in `ReplicatedStorage.DisplayValues` and updates the TextLabel's `Text` property accordingly using the `updateText` function. It also calls `updateText` initially to set the text.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/battle-royale-series/creating-a-gui.md#_snippet_14\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal displayValues = ReplicatedStorage:WaitForChild(\"DisplayValues\")\nlocal status = displayValues:WaitForChild(\"Status\")\n\nlocal textLabel = script.Parent\n\nlocal function updateText()\n\ttextLabel.Text = status.Value\nend\n\nstatus.Changed:Connect(updateText)\nupdateText()\n```\n\n----------------------------------------\n\nTITLE: Activating Directional Indicator via WeaponsGui Manager - Roblox Lua\nDESCRIPTION: This Lua code snippet demonstrates how to activate a directional indicator through the DirectionalIndicatorGuiManager component, typically from within the WeaponsGui script. Dependencies include the WeaponsGui instance and the DirectionalIndicatorGuiManager attached to it. The function ActivateDirectionalIndicator expects two parameters: indicatorName (string) identifying the indicator to show, and worldPos (Vector3) as the world position the indicator points toward. This approach allows multiple overlapping indicators of the same type, and its use outside WeaponsGui is possible by replacing 'self' with another instance.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/weapons-kit.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nself.DirectionalIndicatorGuiManager:ActivateDirectionalIndicator(indicatorName, worldPos)\n```\n\n----------------------------------------\n\nTITLE: Categorical Signal Example (Joining Player) in Lua\nDESCRIPTION: This example shows a concrete usage of the categorical signal calculation using two variables, `server_GameMode` and `joining_player_GameMode`.  The goal is to showcase how to implement a direct comparison in a practical scenario to illustrate the usage of the formula.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/matchmaking/attributes-and-signals.md#_snippet_24\n\nLANGUAGE: lua\nCODE:\n```\nlocal server_GameMode = \"Survival\"\nlocal joining_player_GameMode = \"Survival\"\n\nif server_GameMode = joining_player_GameMode then\n  return 1\nelse\n  return 0\nend\n```\n\n----------------------------------------\n\nTITLE: Fixing TextureID Mismatch (Rigid Accessory/SpecialMesh)\nDESCRIPTION: This error indicates a mismatch between the model's texture ID and the `SpecialMesh.TextureId` of a rigid accessory (`%s`). Both texture IDs must reference the same asset. Verify textures are set up correctly.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/validation-errors.md#_snippet_3\n\nLANGUAGE: Text\nCODE:\n```\nModel textureId mismatch with rigid accessory `SpecialMesh.TextureId` for `%s`. You need to match the textureIds and try again.\n```\n\n----------------------------------------\n\nTITLE: Generating Content-MD5 Checksum for Roblox Datastores API Requests in Python\nDESCRIPTION: This Python one-liner calculates the Content-MD5 header required for certain Roblox Datastore API requests by prompting the user for input, converting it to UTF-8 bytes, computing the MD5 digest, and encoding the result in standard base64. Requires Python (2.7 or 3.x) and the standard libraries: hashlib and base64. Enter the content when prompted; it outputs the properly formatted content-md5 value to use in your request header. Ensure your content is correctly UTF-8 encoded and the header is supplied in API requests for integrity verification.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/guides/data-store-api-handling.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ python -c \"import base64, hashlib; print('content-md5: ' + str(base64.b64encode(hashlib.md5(bytes(input('content: '), encoding='utf8')).digest()), encoding='utf8'))\"\n```\n\n----------------------------------------\n\nTITLE: Declaring a Local Variable in Luau\nDESCRIPTION: This snippet shows how to declare a local variable named myAnimal in Luau. Declaring variables with the 'local' keyword restricts their scope to the current script, promoting better memory management and avoiding global namespace pollution. No initial value is assigned in this snippet, so the variable starts as nil until assigned.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-1/create-a-script.md#_snippet_1\n\nLANGUAGE: Luau\nCODE:\n```\nlocal myAnimal\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Logical 'not' Operator in Luau\nDESCRIPTION: Examples showing how the 'not' operator returns the opposite boolean value of its argument. It returns true if the argument is false or nil, and false otherwise.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/operators.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nprint(not true) -- false\nprint(not false) -- true\nprint(not nil) -- true\nprint(not \"text\") -- false\nprint(not 0) -- false\n```\n\n----------------------------------------\n\nTITLE: Implementing Vector2 Division with `__div` Metamethod in Lua\nDESCRIPTION: Provides a complete example of a custom `vector2` type using metatables. It implements the `__div` metamethod to handle division of a vector by a scalar, a scalar by a vector, and a vector by another vector. It also includes `__index` for method lookup, `__tostring` for representation, a constructor (`vector2.new`), and usage examples.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/metatables.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal vector2 = {__type = \"vector2\"}\nlocal mt = {__index = vector2}\n\nfunction mt.__div(a, b)\n\tif type(a) == \"number\" then\n\t\t-- a is a scalar, b is a vector\n\t\tlocal scalar, vector = a, b\n\t\treturn vector2.new(scalar / vector.x, scalar / vector.y)\n\telseif type(b) == \"number\" then\n\t\t-- a is a vector, b is a scalar\n\t\tlocal vector, scalar = a, b\n\t\treturn vector2.new(vector.x / scalar, vector.y / scalar)\n\telseif (a.__type and a.__type == \"vector2\" and b.__type and b.__type == \"vector2\") then\n\t\t-- both a and b are vectors\n\t\treturn vector2.new(a.x / b.x, a.y / b.y)\n\tend\nend\n\nfunction mt.__tostring(t)\n\treturn t.x .. \", \" .. t.y\nend\n\nfunction vector2.new(x, y)\n\tlocal self = setmetatable({}, mt)\n\tself.x = x or 0\n\tself.y = y or 0\n\treturn self\nend\n\nlocal a = vector2.new(10, 5)\nlocal b = vector2.new(-3, 4)\n\nprint(a / b) -- -3.3333333333333, 1.25\nprint(b / a) -- -0.3, 0.8\nprint(2 / a) -- 0.2, 0.4\nprint(a / 2) -- 5, 2.5\n```\n\n----------------------------------------\n\nTITLE: Calculating Play History Signal Score\nDESCRIPTION: Calculates a numerical signal score based on the difference between the average log-10 play history of players in the server and the joining player's play history. The score is inversely related to the play history difference, with a maximum relevant difference of 4.6.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/matchmaking/attributes-and-signals.md#_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nplayHistorySignalScore = 1 - min(4.6, playHistoryDifference / 4.6), where\nplayHistoryDifference = abs(avgServerPlayHistory - joiningPlayerPlayHistory)\n```\n\n----------------------------------------\n\nTITLE: Configuring SeaStackMesh in Level_4e - Roblox Properties Table\nDESCRIPTION: Provides the Size, CFrame.Position, and CFrame.Orientation properties for two SeaStackMesh assets used in the Level_4e model to replicate the sample experience's rock formations. These settings are applied in the Roblox Studio Properties window.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/core/building/apply-polished-assets.md#_snippet_7\n\nLANGUAGE: Roblox Properties Table\nCODE:\n```\nSize\tCFrame.Position\tCFrame.Orientation\n`57, 65, 57`\t`239, -14, 82`\t`0, -63, 0`\n`48, 65, 50`\t`239, 34, 81`\t`0, 39, 0`\n```\n\n----------------------------------------\n\nTITLE: Playing Shooting Sound Effect on All Clients in Roblox Lua\nDESCRIPTION: This Lua code is designed for the createLaser function in LaserRenderer. It safely attempts to retrieve a sound instance named \"Activate\" from toolHandle and, if found, plays it, ensuring all players hear the shot. Prerequisites: The toolHandle must exist and have an Activate sound as a child; Debris and SHOT_DURATION should be defined for cleanup.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/scripting/intermediate-scripting/hit-detection-with-lasers.md#_snippet_23\n\nLANGUAGE: Lua\nCODE:\n```\n    laserPart.Parent = workspace\n\n    -- Add laser beam to the Debris service to be removed & cleaned up\n    Debris:AddItem(laserPart, SHOT_DURATION)\n\n    -- Play the weapon's shooting sound\n    local shootingSound = toolHandle:FindFirstChild(\"Activate\")\n    if shootingSound then\n        shootingSound:Play()\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Adding a Negative Increment Value in Luau for Loop\nDESCRIPTION: Adds an increment value of -1 to the 'for' loop definition. This value is added to the control variable ('count') after each iteration, causing the loop to count down. Commas separate the start, end, and increment values. If the increment is omitted, it defaults to 1.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-4/intro-to-for-loops.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nfor count = 10, 0, -1\n```\n\n----------------------------------------\n\nTITLE: Requiring and Using ModuleScript Function (Luau)\nDESCRIPTION: Shows how a standard script requires a ModuleScript (specifically \"PickupManager\") using `require()`. It retrieves the returned table, then calls a function (`getPickupBonus`) defined within the module, and prints the result. Requires the \"PickupManager\" ModuleScript to exist in ReplicatedStorage.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/scripting/scripts.md#_snippet_2\n\nLANGUAGE: Luau\nCODE:\n```\n-- Script in ReplicatedStorage\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\n-- Get value returned by ModuleScript\nlocal PickupManager = require(ReplicatedStorage:WaitForChild(\"PickupManager\"))\n\n-- Call a ModuleScript function\nlocal bonus = PickupManager.getPickupBonus(\"legendary\")\nprint(bonus)  --> 125\n```\n\n----------------------------------------\n\nTITLE: Customizing Chat Messages with Rich Text in Roblox (Lua)\nDESCRIPTION: This Lua script showcases rich text customization in Roblox chat. It modifies incoming messages using `TextChatService.OnChatWindowAdded` by moving the original user name (`message.PrefixText`) into the message body (`properties.Text`) and applying a `<font color>` tag. It also sets a custom static prefix \"[VIP]\" and applies a separate `UIGradient` to this new prefix.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/chat/chat-window.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal TextChatService = game:GetService(\"TextChatService\")\nlocal Players = game:GetService(\"Players\")\n\nlocal chatWindowConfiguration = TextChatService.ChatWindowConfiguration\n\nlocal gradient = Instance.new(\"UIGradient\")\ngradient.Color = ColorSequence.new{\n\tColorSequenceKeypoint.new(0, Color3.fromRGB(255, 0, 0)),\n\tColorSequenceKeypoint.new(0.5, Color3.fromRGB(255, 255, 0)),\n\tColorSequenceKeypoint.new(1, Color3.fromRGB(255, 0, 255))\n}\n\nTextChatService.OnChatWindowAdded = function(message: TextChatMessage)\n\tlocal properties = chatWindowConfiguration:DeriveNewMessageProperties()\n\n\tif message.TextSource then\n\t\tproperties.PrefixText = \"[VIP]\"\n\t\tproperties.Text = string.format(\"<font color='#00ffff'>%s</font>\", message.PrefixText) .. \" \" .. message.Text\n\n\t\tproperties.PrefixTextProperties = chatWindowConfiguration:DeriveNewMessageProperties()\n\t\tgradient:Clone().Parent = properties.PrefixTextProperties\n\tend\n\n\treturn properties\nend\n```\n\n----------------------------------------\n\nTITLE: Detecting Scene Ending Warning on Server with EventSequencer in Lua\nDESCRIPTION: Showcases connecting to onSceneEndingWarningForServer to handle scene-end warnings on the server. Designed for use within a Class.Script, and requires EventSequencer preloaded into ReplicatedStorage. Warning offset is configurable.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/event-sequencer.md#_snippet_21\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal EventSequencer = require(ReplicatedStorage:WaitForChild(\"EventSequencer\"))\n\n-- Detect when scene is about to end (server-side)\nEventSequencer.onSceneEndingWarningForServer:Connect(function()\n\twarn(\"Scene is about to end!\")\nend)\n```\n\n----------------------------------------\n\nTITLE: Set Control Key Codes - Lua\nDESCRIPTION: This code snippet demonstrates how to customize the key and gamepad button for interacting with proximity prompts. It uses the setControlKeyCodes function of the MerchBooth module and specifies the key code and gamepad button for the ProximityPrompts control.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/merch-booth.md#_snippet_12\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal MerchBooth = require(ReplicatedStorage:WaitForChild(\"MerchBooth\"))\n\nMerchBooth.setControlKeyCodes(MerchBooth.Controls.ProximityPrompts, {\n\tkeyboard = Enum.KeyCode.Q,\n\tgamepad = Enum.KeyCode.ButtonL1\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing a Scene Schema with EventSequencer in Lua\nDESCRIPTION: This snippet creates and sets up a schema object using EventSequencer.createSchema(). Intended for use within client-side scripts, it shows how to define the OnSetup handler which is called with time position information. Requires EventSequencer setup and its schema system within ReplicatedStorage. Assumes schema usage pattern described in documentation.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/event-sequencer.md#_snippet_14\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal EventSequencer = require(ReplicatedStorage:WaitForChild(\"EventSequencer\"))\n\nlocal Schema = EventSequencer.createSchema()\n\nSchema.OnSetup = function(timePositionObject)\n\tprint(\"OnSetup (Client)\")\nend\n```\n\n----------------------------------------\n\nTITLE: Accessing Scene Environments from Client Schema with EventSequencer in Lua\nDESCRIPTION: This snippet shows how the client-side schema can retrieve both the client and server environment folders for the current scene, using getCurrentSceneEnvironment and getCurrentServerEnvironmentFromClient. Requires EventSequencer setup and suitable schema instantiation. Should not be used in Inline Mode, as infinite yields are possible if the folders do not exist.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/event-sequencer.md#_snippet_17\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal EventSequencer = require(ReplicatedStorage:WaitForChild(\"EventSequencer\"))\n\nlocal Schema = EventSequencer.createSchema()\n\nlocal clientEnvironment\nlocal serverEnvironment\n\nSchema.OnSetup = function(timePositionObject)\n\tprint(\"OnSetup (Client)\")\n\n\t-- Access scene environments; does not apply to Inline Mode\n\tclientEnvironment = EventSequencer.getCurrentSceneEnvironment()\n\tserverEnvironment = EventSequencer.getCurrentServerEnvironmentFromClient()\n\n\tprint(\"Current time is:\", timePositionObject.Value)\nend\n```\n\n----------------------------------------\n\nTITLE: Filtering Inventory Items with Roblox Inventory API in Python\nDESCRIPTION: This Python snippet shows the use of a filter parameter as a dictionary entry to request only collectible inventory items through the Roblox Inventory API. Using a semicolon-separated string value for 'filter', it includes 'onlyCollectibles=true' and 'inventoryItemAssetTypes=*' to refine API results. This snippet is intended to be used as part of a GET request with the 'requests' library, matching the filtering strategy exemplified in the Node.js example.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/guides/inventory.md#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nparameters = {\n    'filter': 'onlyCollectibles=true;inventoryItemAssetTypes=*'\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Table Addition with `__add` Metamethod in Lua\nDESCRIPTION: Shows how to define the `__add` metamethod to enable the use of the addition operator (`+`) between two tables. The implementation creates a new table, copying elements from the first table and then adding elements from the second, summing values for keys present in both.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/metatables.md#_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nlocal metatable = {\n\t__add = function(t1, t2)\n\t\tlocal sum = {}\n\t\tfor key, value in t1 do\n\t\t\tsum[key] = value\n\t\tend\n\n\t\tfor key, value in t2 do\n\t\t\tif sum[key] then\n\t\t\t\tsum[key] += value\n\t\t\telse\n\t\t\t\tsum[key] = value\n\t\t\tend\n\t\tend\n\t\treturn sum\n\tend\n}\n\nlocal table1 = setmetatable({10, 11, 12}, metatable)\nlocal table2 = setmetatable({13, 14, 15}, metatable)\n\nfor k, v in table1 + table2 do\n\tprint(k, v)\nend\n```\n\n----------------------------------------\n\nTITLE: Creating a Drag Source UI Element in Roblox Lua\nDESCRIPTION: This code constructs a draggable UI element using `CreateDockWidgetPluginGui`. It sets up a window titled 'Drag Source' containing a `TextButton` labeled 'Drag me!'. When clicked, it initiates a drag operation by calling `StartDrag()` with data attributes specifying the drag content, MIME type, sender, and optional icons, enabling drag-and-drop functionality within Roblox plugin GUIs.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/studio/build-studio-widgets.md#_snippet_5\n\nLANGUAGE: Lua\nCODE:\n```\n-- Create the widget first\nlocal widgetInfo = DockWidgetPluginGuiInfo.new(Enum.InitialDockState.Float, true, true, 300, 200)\nlocal dragSourceWidget = plugin:CreateDockWidgetPluginGui(\"Drag Source\", widgetInfo)\ndragSourceWidget.Title = \"Drag Source\"\n\n-- Create a TextButton that will initiate the drag\nlocal dragButton = Instance.new(\"TextButton\")\ndragButton.Size = UDim2.new(1, 0, 1, 0)\ndragButton.Text = \"Drag me!\"\ndragButton.Parent = dragSourceWidget\n```\n\n----------------------------------------\n\nTITLE: Using MaterialVariant for Custom Materials in Roblox\nDESCRIPTION: Shows how to use MaterialVariant to create a custom material that applies both PBR textures and physical properties to a mesh in Roblox.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/parts/meshes.md#_snippet_4\n\nLANGUAGE: Roblox\nCODE:\n```\nClass.MaterialVariant\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring Multiple Dense Lava Splash Emitters for Volcano Effect\nDESCRIPTION: This snippet involves duplicating and customizing ParticleEmitter objects to produce denser, larger, and more varied lava splashes at the volcano caldera, using different textures, size and squash sequences, and emission rates. It enhances visual realism by layering multiple splash effects with slight variations.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/vfx/create-volcanoes.md#_snippet_8\n\nLANGUAGE: Lua\nCODE:\n```\n-- Duplicate existing dense splash emitter and rename\nlocal denseEmitter = workspace.Splashes.DenseSplashes:Clone()\ndenseEmitter.Name = \"DenseSplashes\"\n-- Modify properties for variation\nfor _, prop in ipairs({\n    {Property = \"Texture\", Value = \"rbxassetid://17363669906\"},\n    {Property = \"SizeSequence\", Value = {\n        NumberSequence.new(0, 5.75, 0.762),\n        NumberSequence.new(1, 7.37, 0.875)\n    }},\n    {Property = \"SquashSequence\", Value = {\n        NumberSequence.new(0, 0, 0.225),\n        NumberSequence.new(1, -0.262, 0.15)\n    }},\n    {Property = \"Rate\", Value = 0.289}\n}) do\n    denseEmitter[prop.Property] = prop.Value\nend\ndenseEmitter.Parent = workspace.Splashes\n\n```\n\n----------------------------------------\n\nTITLE: Adding IsPrimary Stat Ordering in Lua\nDESCRIPTION: This code extends the `leaderboardSetup` function to add an 'IsPrimary' `BoolValue` to the 'Gold' stat. When set to true, the 'IsPrimary' value will place this stat at the top of the leaderboard. The snippet utilizes the 'Players' service, and it showcases how stat ordering can be controlled within the leaderboard functionality.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/players/leaderboards.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nlocal function leaderboardSetup(player)\n\tlocal leaderstats = Instance.new(\"Folder\")\n\tleaderstats.Name = \"leaderstats\"\n\tleaderstats.Parent = player\n\n\tlocal gold = Instance.new(\"IntValue\")\n\tgold.Name = \"Gold\"\n\tgold.Value = 0\n\tgold.Parent = leaderstats\n\n\tlocal isPrimary = Instance.new(\"BoolValue\")\n\tisPrimary.Name = \"IsPrimary\"\n\tisPrimary.Value = true\n\tisPrimary.Parent = gold\nend\n\nPlayers.PlayerAdded:Connect(leaderboardSetup)\n```\n\n----------------------------------------\n\nTITLE: Requesting OAuth 2.0 Token Resources for Universe IDs (Bash)\nDESCRIPTION: Demonstrates a cURL POST request to the Roblox OAuth 2.0 token resources endpoint (`https://apis.roblox.com/oauth/v1/token/resources`). This request exchanges an access token, client ID, and client secret (or potentially a code challenge, depending on the flow) to retrieve a list of Universe IDs for which the user has granted the application permission, specifically including the messaging scope.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/guides/usage-messaging.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request POST 'https://apis.roblox.com/oauth/v1/token/resources' \\\n--header 'Content-Type: application/x-www-form-urlencoded' \\\n--data-urlencode 'token=<access_token>' \\\n--data-urlencode 'client_id=<client_id>' \\\n--data-urlencode 'client_secret=<client_secret>'\n```\n\n----------------------------------------\n\nTITLE: Detecting Prompt Visibility Changes\nDESCRIPTION: Sets up event listeners for when canvas interaction prompts are shown or hidden from a player.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/surface-art.md#_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal Players = game:GetService(\"Players\")\n\nlocal SurfaceArt = require(ReplicatedStorage:WaitForChild(\"SurfaceArt\"))\n\nSurfaceArt.promptShown:Connect(function(canvas)\n\tprint(Players.LocalPlayer, canvas)\nend)\n```\n\n----------------------------------------\n\nTITLE: Extracting and Verifying Roblox Webhook Signatures with Node.js Express\nDESCRIPTION: This Node.js Express example demonstrates how to securely handle Roblox webhook notifications by extracting the 'roblox-signature' from request headers, validating HMAC SHA256 signatures using a shared secret, and preventing replay attacks with a 5-minute timestamp window. The snippet also shows how to process the 'RightToErasureRequest' event to extract and log PII data from the payload. It requires 'crypto' and 'express' modules, expects JSON payloads, and listens on port 8080 for incoming requests.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/webhooks/webhook-notifications.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst crypto = require('crypto')\nconst express = require('express');\nlet app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: true }));\n// This is a sample only code\napp.all('/*', function (req, res) {\n   console.log('-------- New Request Seen -------');\n   // 1. Extract the timestamp and signature\n   const shared_secret = '<Your secret>' // This can be set as an environment variable\n   const hmac = crypto.createHmac('sha256', shared_secret)\n   const roblox_signature_header = req.headers['roblox-signature'].split(',')\n   // 'roblox-signature' is present in all requests:\n   // Timestamp(t) is present in all requests, however signature value(v1) is not set unless a secret is shared during the webhook configuration.\n   // Fetch header component at Index 0 -> 't=' and Index 1 -> 'v1='\n   const timestamp = roblox_signature_header.find(e => e.startsWith('t=')).substring(2);\n   const extracted_signature = roblox_signature_header.find(e => e.startsWith('v1='));\n   // 2. Prevent Replay attack: 300 seconds window\n   const request_timestamp_ms = timestamp * 1000;\n   const window_time_ms = 300 * 1000\n   const oldest_timestamp_allowed = Date.now() - window_time_ms;\n   if (request_timestamp_ms < oldest_timestamp_allowed) {\n      res.status(403).send('Expired Request')\n   }\n   // 3. Validate Signature\n   if (extracted_signature !== undefined) {\n      const signature_v1 = extracted_signature.substring(3);\n      const message = `${timestamp}.${JSON.stringify(req.body)}`\n      const base64_signature = hmac.update(message).digest('base64')\n      if (signature_v1 !== base64_signature) {\n         res.status(401).send('Unauthorized Request')\n      }\n   }\n   // 4. Your logic to handle payload\n   const payloadBody = req.body\n   const eventType = payloadBody['EventType']\n   if (eventType === 'RightToErasureRequest'){\n      const userId = payloadBody['EventPayload']['UserId']\n      const gameIds = payloadBody['EventPayload']['GameIds']\n      const gameIdString = gameIds.toString()\n      console.log(`The payload: UserId=${userId} and GameIds=${gameIdString}`)\n      // If you store PII in data stores, use the UserId and GameIds to make a data store call to delete the information.\n   }\n   // 5. Return Response\n   res.json({ message: 'Processed the message Successfully' });\n})\napp.listen(8080, function () {\n   console.log('This is a Sample application')\n})\n```\n\n----------------------------------------\n\nTITLE: Positioning Model with PivotTo\nDESCRIPTION: This code uses `Class.Model:PivotTo()` to place an object near a tree within the Roblox Studio environment. `PivotTo()` is a function used for precise object placement and positioning.  This function is used internally by the Roblox Assistant to add objects into the user's data model.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/assistant/guide.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: PlayerManager Script - Managing Players and Match Participants - Lua\nDESCRIPTION: A complete PlayerManager module that tracks active players, handles joining and respawning, prepares players with weapons, and manages match participant lists. Integrates player removal, event connections, and prepares match spawns. Requires access to game services, module scripts, event objects, and display values. Expects collaboration with other modules for match orchestration.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/battle-royale-series/ending-matches.md#_snippet_13\n\nLANGUAGE: lua\nCODE:\n```\nlocal PlayerManager = {}\n\n-- Services\nlocal Players = game:GetService(\"Players\")\nlocal ServerStorage = game:GetService(\"ServerStorage\")\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\n-- Modules\nlocal moduleScripts = ServerStorage:WaitForChild(\"ModuleScripts\")\nlocal gameSettings = require(moduleScripts:WaitForChild(\"GameSettings\"))\n\n-- Events\nlocal events = ServerStorage:WaitForChild(\"Events\")\nlocal matchEnd = events:WaitForChild(\"MatchEnd\")\n\n-- Map Variables\nlocal lobbySpawn = workspace.Lobby.StartSpawn\nlocal arenaMap = workspace.Arena\nlocal spawnLocations = arenaMap.SpawnLocations\n\n-- Values\nlocal displayValues = ReplicatedStorage:WaitForChild(\"DisplayValues\")\nlocal playersLeft = displayValues:WaitForChild(\"PlayersLeft\")\n\n-- Player Variables\nlocal activePlayers = {}\nlocal playerWeapon = ServerStorage.Weapon\n\n-- Local Functions\nlocal function checkPlayerCount()\n\tif #activePlayers == 1 then\n\t\tmatchEnd:Fire(gameSettings.endStates.FoundWinner)\n\tend\nend\n\nlocal function removeActivePlayer(player)\n\tfor playerKey, whichPlayer in activePlayers do\n\t\tif whichPlayer == player then\n\t\t\ttable.remove(activePlayers, playerKey)\n\t\t\tplayersLeft.Value = #activePlayers\n\t\t\tcheckPlayerCount()\n\t\tend\n\tend\nend\n\nlocal function respawnPlayerInLobby(player)\n\tplayer.RespawnLocation = lobbySpawn\n\tplayer:LoadCharacter()\nend\n\nlocal function onPlayerJoin(player)\n\tplayer.RespawnLocation = lobbySpawn\nend\n\nlocal function preparePlayer(player, whichSpawn)\n\tplayer.RespawnLocation = whichSpawn\n\tplayer:LoadCharacter()\n\n\tlocal character = player.Character or player.CharacterAdded:Wait()\n\tlocal sword = playerWeapon:Clone()\n\tsword.Parent = character\n\n\tlocal humanoid = character:WaitForChild(\"Humanoid\")\n\n\thumanoid.Died:Connect(function()\n\t\trespawnPlayerInLobby(player)\n\t\tremoveActivePlayer(player)\n\tend)\nend\n\n-- Module Functions\nfunction PlayerManager.sendPlayersToMatch()\n\tlocal arenaSpawns = spawnLocations:GetChildren()\n\n\tfor playerKey, whichPlayer in Players:GetPlayers() do\n\t\ttable.insert(activePlayers, whichPlayer)\n\t\tlocal spawnLocation = table.remove(arenaSpawns, 1)\n\t\tpreparePlayer(whichPlayer, spawnLocation)\n\tend\n\n\tplayersLeft.Value = #activePlayers\nend\n\n-- Events\nPlayers.PlayerAdded:Connect(onPlayerJoin)\n\nreturn PlayerManager\n```\n\n----------------------------------------\n\nTITLE: Variadic Function with Typed Variadic Parameter in Luau Lua\nDESCRIPTION: Shows typing variadic parameters with '...: number' to restrict arguments to numbers. This triggers the typechecker to produce errors when incompatible types are passed, improving safety for functions accepting any number of arguments but needing consistent types.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/type-checking.md#_snippet_12\n\nLANGUAGE: lua\nCODE:\n```\nlocal function addLotsOfNumbers(...: number)\n```\n\n----------------------------------------\n\nTITLE: Modifying HumanoidDescription Properties in Roblox Lua\nDESCRIPTION: Directly sets properties of a HumanoidDescription instance to customize avatar appearance, such as hat accessories, scaling, animation assets, face, clothing, and part colors. Each property key corresponds to an aspect of avatar appearance; asset IDs should be valid numeric values, and colors use Color3. This approach allows targeted, script-driven customization before applying the HumanoidDescription to a Humanoid.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/characters/appearance.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal humanoidDescription = Instance.new(\"HumanoidDescription\")\nhumanoidDescription.HatAccessory = \"2551510151,2535600138\"\nhumanoidDescription.BodyTypeScale = 0.1\nhumanoidDescription.ClimbAnimation = 619521311\nhumanoidDescription.Face = 86487700\nhumanoidDescription.GraphicTShirt = 1711661\nhumanoidDescription.HeadColor = Color3.new(0, 1, 0)\n```\n\n----------------------------------------\n\nTITLE: Calling MatchManager.prepareGame in GameManager (Roblox Lua)\nDESCRIPTION: Calls the `prepareGame` function from the required `matchManager` module script. This action occurs within the main `while true do` loop, specifically after the intermission loop completes and the transition time has passed, initiating the match setup phase.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/battle-royale-series/coding-the-game-loop.md#_snippet_11\n\nLANGUAGE: lua\nCODE:\n```\nwhile true do\n\trepeat\n\t\tprint(\"Starting intermission\")\n\t\ttask.wait(gameSettings.intermissionDuration)\n\tuntil #Players:GetPlayers() >= gameSettings.minimumPlayers\n\n\tprint(\"Intermission over\")\n\ttask.wait(gameSettings.transitionTime)\n\tmatchManager.prepareGame()\nend\n```\n\n----------------------------------------\n\nTITLE: Invoking Type Detection with highlightItemsFunc in Roblox Lua\nDESCRIPTION: This Lua code snippet demonstrates the usage of the 'highlightItemsFunc:Invoke' method to query the type of an object instance in the context of item highlighting and UI indicator management. It relies on a bound RemoteFunction or BindableFunction within Roblox client scripts that implements the 'GetType' interface. The expected input is a table where the first entry is the string command 'GetType', followed by the object reference. The output is the type or classification of the given object for subsequent UI or gameplay logic.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/the-mystery-of-duvall-drive/supporting-systems.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nhighlightItemsFunc:Invoke({\"GetType\", curInst})\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Accessories with SetAccessories in Roblox Lua\nDESCRIPTION: Uses the SetAccessories method on HumanoidDescription to assign multiple layered accessories defined in an array, each with a specific order, asset ID, and accessory type (such as sweater or jacket). This method provides fine control over layered accessory placement. AccessoryType must be an Enum.AccessoryType. The method supports bulk updates and disables asset ID validation when the second argument is false.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/characters/appearance.md#_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal humanoidDescription = Instance.new(\"HumanoidDescription\")\nlocal accessoryTable = {\n\t{\n\t\tOrder = 1,\n\t\tAssetId = 6984769289,\n\t\tAccessoryType = Enum.AccessoryType.Sweater\n\t},\n\t{\n\t\tOrder = 2,\n\t\tAssetId = 6984767443,\n\t\tAccessoryType = Enum.AccessoryType.Jacket\n\t}\n}\n\nhumanoidDescription:SetAccessories(accessoryTable, false)\n```\n\n----------------------------------------\n\nTITLE: Detecting Scene Ending Warning on Client with EventSequencer in Lua\nDESCRIPTION: Demonstrates connecting to the onSceneEndingWarningForClient event to notify when a scene is about to end on the client-side. The warning time can be customized using setSceneWarningTime. Only for use in Class.LocalScript and requires EventSequencer available in ReplicatedStorage.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/event-sequencer.md#_snippet_20\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal EventSequencer = require(ReplicatedStorage:WaitForChild(\"EventSequencer\"))\n\n-- Detect when scene is about to end (client-side)\nEventSequencer.onSceneEndingWarningForClient:Connect(function()\n\twarn(\"Scene is about to end!\")\nend)\n```\n\n----------------------------------------\n\nTITLE: Configuring the SurfaceArt Module\nDESCRIPTION: Demonstrates how to override default configuration options for the SurfaceArt module. This example increases the player quota to 4, changes the prompt key to T, and reduces the maximum activation distance.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/surface-art.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal SurfaceArt = require(ReplicatedStorage:WaitForChild(\"SurfaceArt\"))\n\nSurfaceArt.configure({\n\tquotaPerPlayer = 4,\n\tpromptKeyCode = Enum.KeyCode.T,\n\tpromptMaxActivationDistance = 8,\n})\n```\n\n----------------------------------------\n\nTITLE: Checking Player Proximity With Tolerance in Roblox Lua\nDESCRIPTION: This snippet determines if a player is within an allowed distance of an impact position by comparing the character's position to the hit location. It calculates the vector magnitude and compares it to DISTANCE_SANITY_CHECK_TOLERANCE_STUDS from ToleranceValues. Requires access to player character models and distance configuration. Returns false if the player was further away than allowed, supporting anti-exploit checks.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/gameplay-scripting/detect-hits.md#_snippet_7\n\nLANGUAGE: Lua\nCODE:\n```\nlocal distanceFromCharacterToPosition = position - character:GetPivot().Position\nif distanceFromCharacterToPosition.Magnitude > ToleranceValues.DISTANCE_SANITY_CHECK_TOLERANCE_STUDS then\n    return false\nend\n```\n\n----------------------------------------\n\nTITLE: Attempting to Add Tables Without `__add` in Lua\nDESCRIPTION: Illustrates the error that occurs when trying to use the addition operator (`+`) on two standard Lua tables. Arithmetic operations are not defined for tables by default and require the `__add` metamethod.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/metatables.md#_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nlocal table1 = {10, 11, 12}\nlocal table2 = {13, 14, 15}\n\nfor k, v in table1 + table2 do\n\tprint(k, v)\nend\n```\n\n----------------------------------------\n\nTITLE: Playing a Specific Music Track Conditionally in Lua\nDESCRIPTION: This Lua script demonstrates how to find a specific sound track named \"LucidDream\" within the SoundService using `FindFirstChild`. It checks if the sound track is not currently playing by examining the `IsPlaying` property before calling the `Play()` method, preventing the track from restarting if already active.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/sound/objects.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal SoundService = game:GetService(\"SoundService\")\n\nlocal musicTrack = SoundService:FindFirstChild(\"LucidDream\")\nif musicTrack not musicTrack.IsPlaying then\n\tmusicTrack:Play()\nend\n```\n\n----------------------------------------\n\nTITLE: Creating and assigning 'Items' and 'Spaces' IntValue stats for player in Roblox Lua\nDESCRIPTION: This snippet extends the previous setup by adding 'Items' (initially 0) and 'Spaces' (initially 2) as IntValues within the 'leaderstats' folder. These stats track the number of items collected and the maximum items a player can hold, respectively. They help manage game-specific player inventories and capacities.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/adventure-game-series/code-the-leaderboard.md#_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nlocal items = Instance.new(\"IntValue\")\nitems.Name = \"Items\"\nitems.Value = 0\nitems.Parent = leaderstats\n\nlocal spaces = Instance.new(\"IntValue\")\nspaces.Name = \"Spaces\"\nspaces.Value = 2\nspaces.Parent = leaderstats\n```\n\n----------------------------------------\n\nTITLE: Defining LipsTogether Pose in Roblox FaceControls\nDESCRIPTION: Specifies the 'LipsTogether' pose using the Roblox FaceControls API reference. This action brings the character's lips together. It is often used in conjunction with 'JawDrop' to keep lips together as the jaw opens or simulate lip movement. Inclusion of this pose is mandatory for avatars submitted to the Roblox Marketplace.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/characters/facial-animation/facs-poses-reference.md#_snippet_10\n\nLANGUAGE: Roblox API\nCODE:\n```\nClass.FaceControls.LipsTogether|LipsTogether\n```\n\n----------------------------------------\n\nTITLE: Defining `respawnPlayerInLobby()` function in PlayerManager\nDESCRIPTION: This function repositions a defeated player to the lobby, reloads their character, and handles dependencies such as setting the respawn location and recreating the player's tools. It serves as the central method for managing player respawns outside standard death behavior.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/battle-royale-series/ending-matches.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal function respawnPlayerInLobby(player)\n\tplayer.RespawnLocation = lobbySpawn\n\tplayer:LoadCharacter()\nend\n```\n\n----------------------------------------\n\nTITLE: Reading User Inventory Lua\nDESCRIPTION: This code reads a user's inventory after access has been granted. It uses `AvatarEditorService:GetInventory()` with specified `AvatarAssetType`s to filter the results and iterates through the `currentPage` of the returned `InventoryPages` object.  It prints each item in the inventory.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/players/avatar-editor.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal AvatarEditorService = game:GetService(\"AvatarEditorService\")\n\nAvatarEditorService:PromptAllowInventoryReadAccess()\n\nlocal result = AvatarEditorService.PromptAllowInventoryReadAccessCompleted:Wait()\n\nif result == Enum.AvatarPromptResult.Success then\n  -- Access granted!\n  local assetTypes = {\n    Enum.AvatarAssetType.BackAccessory,\n    Enum.AvatarAssetType.ShoulderAccessory,\n    Enum.AvatarAssetType.WaistAccessory\n  }\n  local pagesObject = AvatarEditorService:GetInventory(assetTypes)\n  local currentPage = pagesObject:GetCurrentPage()\n  for _, item in currentPage do\n    print(item)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating and assigning 'Gold' IntValue stat for player in Roblox Lua\nDESCRIPTION: This snippet adds an IntValue named 'Gold' to the player's leaderboard folder, initializing it with a value of 0. The 'Gold' stat appears on the leaderboard, representing the player's currency. It involves creating the IntValue, naming it, setting the initial value, and parent it to the 'leaderstats' folder.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/adventure-game-series/code-the-leaderboard.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nlocal gold = Instance.new(\"IntValue\")\ngold.Name = \"Gold\"\n gold.Value = 0\n gold.Parent = leaderstats\n```\n\n----------------------------------------\n\nTITLE: Reusing Variables in Output Strings in Roblox Lua\nDESCRIPTION: This single-line example illustrates how to reuse user input variables multiple times within a string using concatenation, enabling personal references in the narrative. No dependencies except for variables having assigned values. Expected input: prior assignment of 'name1'; output: a self-referential custom sentence.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/build-it-play-it-story-games/finish-and-add.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\n\"I am \" .. name1 .. \" and you are in the palace of \" .. name1 .. \"!\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Story with Two Player Inputs in Roblox Lua\nDESCRIPTION: This snippet extends the story logic by assigning both 'name1' and 'food1' from the player's input using storyMaker:GetInput, then begins building the story string. The variables let users customize multiple elements of the story. Key parameters are the prompts for input, and output is a partially constructed string. Prerequisite: The storyMaker object with GetInput; inputs and story concatenation depend on user entries.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/build-it-play-it-story-games/finish-and-add.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal name1 = storyMaker:GetInput(\"What is your favorite name?\")\nlocal food1 = storyMaker:GetInput(\"What is your favorite food?\")\n\nlocal story = \"In a tree on a hill lives the great wizard \" .. name1 .. \". \" .. \"Every morning, the wizard loves eating a giant bowl of honey roasted \"\n```\n\n----------------------------------------\n\nTITLE: Creating preparePlayer Function in Lua\nDESCRIPTION: This snippet creates a local function named `preparePlayer()` within the `PlayerManager` module. This function is responsible for preparing a player for the arena by setting their `RespawnLocation` to a specific spawn location and then reloading their character using `LoadCharacter()`. This ensures that players are teleported to the correct location and start with a clean character state.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/battle-royale-series/managing-players.md#_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlocal activePlayers = {}\n\n-- Local Functions\nlocal function onPlayerJoin(player)\n\tplayer.RespawnLocation = lobbySpawn\nend\n\nlocal function preparePlayer(player, whichSpawn)\n\nend\n\n-- Module Functions\nfunction PlayerManager.sendPlayersToMatch()\n\tprint(\"Sending players to match\")\nend\n```\n\nLANGUAGE: lua\nCODE:\n```\nlocal function preparePlayer(player, whichSpawn)\n\tplayer.RespawnLocation = whichSpawn\nend\n```\n\nLANGUAGE: lua\nCODE:\n```\nlocal function preparePlayer(player, whichSpawn)\n\tplayer.RespawnLocation = whichSpawn\n\tplayer:LoadCharacter()\nend\n```\n\n----------------------------------------\n\nTITLE: Changing Parent Part Color Using script.Parent in Roblox Lua\nDESCRIPTION: This Lua script modifies the color of the object it is directly parented to. It uses the `script.Parent` property to obtain a reference to the parent Instance (expected to be a Part in this context). It then sets the 'Color' property of this parent part using `Color3.fromRGB`. This method makes the script reusable, as it can be placed inside any part to change that specific part's color without knowing its name beforehand.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-1/parents-and-children.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal colorPart = script.Parent\ncolorPart.Color = Color3.fromRGB(50, 240, 255)\n```\n\n----------------------------------------\n\nTITLE: Customizing Bubble Appearance with Lua\nDESCRIPTION: This Lua script customizes the appearance of chat bubbles using `TextChatService` and `BubbleChatConfiguration`. It modifies properties like text color, font face, and adds and configures `UICorner`, `UIPadding`, and `ImageLabel` instances to the `BubbleChatConfiguration` object for advanced bubble customization.  Requires access to `TextChatService` and the game environment.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/chat/bubble-chat.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n```lua title=\"Advanced Bubble Customization\"\nlocal TextChatService = game:GetService(\"TextChatService\")\n\nlocal bubbleChatConfiguration = TextChatService.BubbleChatConfiguration\nbubbleChatConfiguration.TailVisible = false\nbubbleChatConfiguration.TextColor3 = Color3.fromRGB(220, 50, 50)\nbubbleChatConfiguration.FontFace = Font.fromEnum(Enum.Font.LuckiestGuy)\n\nlocal bubbleUICorner = bubbleChatConfiguration:FindFirstChildOfClass(\"UICorner\")\nif not bubbleUICorner then\n\tbubbleUICorner = Instance.new(\"UICorner\")\n\tbubbleUICorner.Parent = bubbleChatConfiguration\nend\nbubbleUICorner.CornerRadius = UDim.new(0, 0)\n\nlocal bubbleUIPadding = bubbleChatConfiguration:FindFirstChildOfClass(\"UIPadding\")\nif not bubbleUIPadding then\n\tbubbleUIPadding = Instance.new(\"UIPadding\")\n\tbubbleUIPadding.Parent = bubbleChatConfiguration\nend\nbubbleUIPadding.PaddingTop = UDim.new(0, 20)\nbubbleUIPadding.PaddingRight = UDim.new(0, 10)\nbubbleUIPadding.PaddingBottom = UDim.new(0, 15)\nbubbleUIPadding.PaddingLeft = UDim.new(0, 10)\n\nlocal bubbleImageLabel = bubbleChatConfiguration:FindFirstChildOfClass(\"ImageLabel\")\nif not bubbleImageLabel then\n\tbubbleImageLabel = Instance.new(\"ImageLabel\")\n\tbubbleImageLabel.Parent = bubbleChatConfiguration\nend\nbubbleImageLabel.Image = \"rbxassetid://109157529833093\"\nbubbleImageLabel.ScaleType = Enum.ScaleType.Slice\nbubbleImageLabel.SliceCenter = Rect.new(40, 40, 320, 120)\nbubbleImageLabel.SliceScale = 0.5\n```\n```\n\n----------------------------------------\n\nTITLE: Preparing Blender Skin Tone Shader for Export\nDESCRIPTION: The custom skin tone preview setup prevents the color texture map from being automatically packaged with the FBX file. This section describes two methods to resolve this before exporting your model.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/characters/creating/blender-configurations.md#_snippet_2\n\nLANGUAGE: Blender Method\nCODE:\n```\nMethod 1: In the Shading tab, disconnect the Mix node and replace it with the ColorMap node.\n```\n\nLANGUAGE: Blender Method\nCODE:\n```\nMethod 2: Export your textures manually as separate image files and add them later in Studio.\n```\n\n----------------------------------------\n\nTITLE: Updating Asset Metadata via Open Cloud Assets API Using Bash curl\nDESCRIPTION: Illustrates how to send a PATCH request to update asset metadata such as display name and description. The URL includes a query parameter updateMask listing which metadata fields to update. The body includes the asset type, asset ID, and new metadata fields. Requires the x-api-key header for authentication. This example does not upload asset content, only metadata. Requires bash shell and curl, and assumes valid assetId and API key values.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/guides/usage-assets.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request PATCH 'https://apis.roblox.com/assets/v1/assets/{assetId}?updateMask=description%2CdisplayName' \\\n--header 'x-api-key;' \\\n--form 'request={\n    \\\"assetType\\\": \\\"{assetType}\\\",\n    \\\"assetId\\\": \\\"{assetId}\\\",\n    \\\"displayName\\\": \\\"{new display name}\\\",\n    \\\"description\\\": \\\"{new description}\\\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Calculating Numerical Signal (Joining Player) in Lua\nDESCRIPTION: This snippet calculates a score based on the difference between a server attribute and a joining player's attribute. It uses the absolute difference and a maximum relevant difference to determine the score.  The score ranges from 0 to 1, where 1 indicates the attributes are closest, and 0 means the difference is beyond the defined maximum.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/matchmaking/attributes-and-signals.md#_snippet_11\n\nLANGUAGE: lua\nCODE:\n```\nlocal diff = math.abs(server_{aggregation_function}_{attribute_name} - joining_player_{attribute_name})\nlocal score = 1 - math.min(diff / max_relevant_difference, 1)\nreturn score\n```\n\n----------------------------------------\n\nTITLE: Setting Mood Animation Lua\nDESCRIPTION: This Lua script demonstrates setting a specific mood animation for a character.  It waits for the player's character to load and then modifies the `AnimationId` property of the mood to an animation that opens the character's mouth.  It uses `Players.PlayerAdded` to connect the function and `CharacterAppearanceLoaded` to ensure character loading.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/characters/facial-animation/moods.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nlocal function onCharacterAdded(character)\n\tlocal humanoid = character:WaitForChild(\"Humanoid\")\n\tlocal animateScript = character:WaitForChild(\"Animate\")\n\tanimateScript.mood.Animation1.AnimationId = \"rbxassetid://7715145252\" -- Mood\nend\n\nlocal function onPlayerAdded(player)\n\tplayer.CharacterAppearanceLoaded:Connect(onCharacterAdded)\nend\n\nPlayers.PlayerAdded:Connect(onPlayerAdded)\n```\n\n----------------------------------------\n\nTITLE: Setting Catalog Sort Order by Price, Then Alphabetically with MerchBooth - Lua\nDESCRIPTION: Sets a dual-criteria sort function for the merch booth catalog, sorting items by price first, and alphabetically by title when prices match. Requires the MerchBooth module and item objects including price and title fields. This affects the catalog ordering visually within the UI.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/merch-booth.md#_snippet_23\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal MerchBooth = require(ReplicatedStorage:WaitForChild(\"MerchBooth\"))\n\nMerchBooth.setCatalogSort(function(a, b)\n\treturn if a.price == b.price then a.title < b.title else a.price < b.price\nend)\n\n```\n\n----------------------------------------\n\nTITLE: Embedding Responsive YouTube Video in JSX\nDESCRIPTION: Shows how to embed a YouTube video using an <iframe> tag within a container <div> element. The container and iframe are styled using inline styles to ensure the video is responsive and maintains a 16:9 aspect ratio. Requires a valid YouTube embed URL.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/index.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"container\"\nstyle={{position: \"relative\", paddingBottom: \"56.25%\", height: 0}}>\n<iframe src=\"https://www.youtube-nocookie.com/embed/V-SDTfxcIF8\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen  style={{position: \"absolute\", top: 0, left: 0, width: \"100%\", height: \"100%\"}}></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Adding Items to a Set in Lua\nDESCRIPTION: Shows how to add a new item to an existing set using the Set:add() method. This example adds \"Mango\" to a set of fruits.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/metatables.md#_snippet_14\n\nLANGUAGE: lua\nCODE:\n```\nlocal fruits = Set.new({\"Apple\", \"Lemon\", \"Orange\", \"Cherry\", \"Lime\", \"Peach\"})\nfruits:add(\"Mango\")\n```\n\n----------------------------------------\n\nTITLE: Inspecting Specific Users by UserId with Roblox Lua API\nDESCRIPTION: This Lua snippet illustrates how to open the Avatar Inspect Menu for any Roblox user, even those not present in the current experience, by leveraging GuiService:InspectPlayerFromUserId. The code first fetches a user's UserId with Players:GetUserIdFromNameAsync in a protected call, and, upon success, passes the UserId to InspectPlayerFromUserId. Dependencies include 'GuiService' and 'Players'. Input is a username string, and output is the opening of the Inspect Menu for the specified user. The method depends on network-layer availability and valid username/userId mapping.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/players/avatar-inspect-menu.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal GuiService = game:GetService(\"GuiService\")\nlocal Players = game:GetService(\"Players\")\n\n-- Get user ID by username\nlocal success, userId = pcall(function()\n\treturn Players:GetUserIdFromNameAsync(\"RobloxUser\")\nend)\n\nif success then\n\tGuiService:InspectPlayerFromUserId(userId)\nend\n```\n\n----------------------------------------\n\nTITLE: Creating a Drop Target and Handling Drop Events in Roblox Lua\nDESCRIPTION: This snippet creates a widget designed to accept dropped items by adding a `TextLabel`. It sets up an event handler for `PluginDragDropped`, which processes drag data when a drop occurs. The handler updates the label's text with the dropped data if MIME type matches, facilitating drop interactions within the plugin GUI.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/studio/build-studio-widgets.md#_snippet_7\n\nLANGUAGE: Lua\nCODE:\n```\nlocal dragTargetWidget = plugin:CreateDockWidgetPluginGui(\"Drop Target\", widgetInfo)\ndragTargetWidget.Title = \"Drop Target\"\n\n-- This TextLabel will display what was dropped\nlocal textLabel = Instance.new(\"TextLabel\")\ntextLabel.Size = UDim2.new(1, 0, 1, 0)\ntextLabel.Text = \"Drop here...\"\ntextLabel.Parent = dragTargetWidget\n\n-- Connect drop event\nlocal function onDragDrop(dragData)\n\tprint(\"PluginDragDropped\")\n\tif dragData.MimeType == \"text/plain\" then\n\t\ttextLabel.Text = dragData.Data\n\telse\n\t\ttextLabel.Text = dragData.MimeType\n\tend\nend\n\ndragTargetWidget.PluginDragDropped:Connect(onDragDrop)\n```\n\n----------------------------------------\n\nTITLE: Initializing Variables and Part Creation Function - Luau\nDESCRIPTION: This snippet initializes variables controlling the number of batches and parts per batch for a demonstration script. It also defines a local function `createPart()` responsible for creating a single basic Roblox `Part` instance with predefined size, initial position, color (using a global/outer-scoped `currentColor` variable), and parenting it to the `workspace`.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-4/nested-loops.md#_snippet_0\n\nLANGUAGE: Luau\nCODE:\n```\nlocal numberOfBatches = 7\nlocal partsPerBatch = 5\nlocal partsMade = 0\n\n-- Makes a single cube\nlocal function createPart()\n  local part = Instance.new(\"Part\")\n  part.Size = Vector3.new(2, 2, 2)\n  part.CFrame = CFrame.new(20, 0, 20)\n  part.Color = currentColor\n  part.Parent = workspace\nend\n```\n\n----------------------------------------\n\nTITLE: Creating a Local Variable in Roblox Lua\nDESCRIPTION: Initializes a variable named 'name1' to serve as a placeholder for user input in the story game. It highlights the declaration syntax using 'local' and demonstrates where to insert variable declarations within the game control loop.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/build-it-play-it-story-games/coding-a-question.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\n-- GLOBAL VARIABLES\nlocal storyMaker = require(script:WaitForChild(\"StoryMaker\"))\n\n-- Code controlling the game\nlocal playing = true\n\nwhile playing do\n  storyMaker:Reset()\n\n  -- Code story between the dashes\n  -- =============================================\n     local name1\n\n  -- =============================================\n\n  -- Add the story variable between the parenthesis below\n  storyMaker:Write()\n\n  -- Play again?\n  playing = storyMaker:PlayAgain()\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Reward Claimed Server Handlers in Roblox Lua\nDESCRIPTION: Implements a server-side function to handle reward claims, designed to integrate with the Season Passes package. The 'rewardClaimedHandlerFunction' is registered for each reward using 'SeasonPasses.setRewardClaimedHandler', and must return 'true' if the reward is successfully granted. Dependencies include the SeasonPasses API/object and the Roblox Lua environment. This setup tracks tier progress and assigns rewards based on season pass ownership, and can be extended to include game-specific logic in place of 'task.wait'.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/feature-packages/season-passes.md#_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal function rewardClaimedHandlerFunction(_player: Player, _rewardId: Types.RewardId): boolean\n\ttask.wait(2)\n\treturn true\nend\n\nlocal function initializeRewardClaimedHandlers()\n\tfor tierId, tier in pairs(Season.tiers) do\n\t\tif tier then\n\t\t\tif tier.freeReward then\n\t\t\t\tSeasonPasses.setRewardClaimedHandler(tier.freeReward.rewardId, rewardClaimedHandlerFunction)\n\t\t\tend\n\t\t\tif tier.premiumReward then\n\t\t\t\tSeasonPasses.setRewardClaimedHandler(tier.premiumReward.rewardId, rewardClaimedHandlerFunction)\n\t\t\tend\n\t\tend\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Developer Products Asynchronously to Merch Booth (Lua)\nDESCRIPTION: Demonstrates adding Developer Products to the Merch Booth from a server-side `Script`. It iterates through a list of Developer Product asset IDs and calls `MerchBooth.addItemAsync`, specifying `Enum.InfoType.Product`. The asynchronous call is wrapped in `pcall` to catch and log potential errors, ensuring the script doesn't halt on failure.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/merch-booth.md#_snippet_16\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal MerchBooth = require(ReplicatedStorage:WaitForChild(\"MerchBooth\"))\n\nlocal items = {\n\t1236602053, -- Mana Refill\n\t1257880672, -- Healing Potion\n}\n\nfor _, assetId in items do\n\tlocal success, errorMessage = pcall(function()\n\t\tMerchBooth.addItemAsync(assetId, Enum.InfoType.Product)\n\tend)\n\tif not success then\n\t\twarn(errorMessage)\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Removing a Key from MemoryStore Hash Map (Lua)\nDESCRIPTION: Removes a specific key and its associated value from the hash map. The operation is performed using `RemoveAsync()` with the key name. The snippet first sets a key and then demonstrates its removal, wrapping the call in `pcall` for error handling.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud-services/memory-stores/hash-map.md#_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal MemoryStoreService = game:GetService(\"MemoryStoreService\")\n\nlocal hashMap = MemoryStoreService:GetHashMap(\"HashMap1\")\n\nlocal setSuccess, _ = pcall(function()\n\treturn hashMap:SetAsync(\"User_1234\", 1000, 30)\nend)\nif setSuccess then\n\tprint(\"Set succeeded.\")\nend\n\nlocal removeSuccess, removeError = pcall(function()\n\thashMap:RemoveAsync(\"User_1234\")\nend)\nif not removeSuccess then\n\twarn(removeError)\nend\n```\n\n----------------------------------------\n\nTITLE: Debugging with Print Statement upon Humanoid Detection\nDESCRIPTION: Adds a 'print' statement inside the if condition for debugging purposes, confirming that the script detects Humanoids upon player contact. Useful during testing to verify functionality.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-3/traps-with-if-statements.md#_snippet_5\n\nLANGUAGE: Luau\nCODE:\n```\nif humanoid then\n   print(\"Found a Humanoid\")\nend\n```\n\n----------------------------------------\n\nTITLE: Supporting Undo and Redo Functionality in Plugins Using ChangeHistoryService\nDESCRIPTION: Example demonstrating how to implement undo/redo functionality in Roblox Studio plugins. By initiating a recording with `TryBeginRecording()`, performing multiple changes (like setting materials), and then finalizing with `FinishRecording()`, plugins can ensure user actions can be reverted or reapplied via Roblox Studio's undo system.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/studio/plugins.md#_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlocal ChangeHistoryService = game:GetService(\"ChangeHistoryService\")\nlocal Selection = game:GetService(\"Selection\")\n\nlocal toolbar = plugin:CreateToolbar(\"Example Plugin\")\nlocal button = toolbar:CreateButton(\"Neon it up\", \"\", \"\")\n\nbutton.Click:Connect(function()\n    local parts = {}\n    for _, part in Selection:Get() do\n        if part:IsA(\"BasePart\") then\n            parts[#parts + 1] = part\n        end\n    end\n    if #parts < 1 then\n        return\n    end\n\n    local recording = ChangeHistoryService:TryBeginRecording(\"Set selection to neon\")\n    if not recording then\n        return\n    end\n\n    for _, part in parts do\n        part.Material = Enum.Material.Neon\n    end\n\n    ChangeHistoryService:FinishRecording(recording, Enum.FinishRecordingOperation.Commit)\nend)\n```\n\n----------------------------------------\n\nTITLE: Creating a Volumetric Audio Emitter for a Car in Roblox\nDESCRIPTION: This snippet explains how to create a volumetric audio emitter for a car in Roblox to simulate the sound of raindrops hitting the car's surface. It involves creating an invisible part that matches the car's size and adding a Sound object to it. This enables the sound of raindrops to be emitted from the entire surface of the car, creating a more immersive experience.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/the-mystery-of-duvall-drive/design-dark-soundscapes.md#_snippet_1\n\nLANGUAGE: None\nCODE:\n```\n1. In the viewport, we created a new `Class.Part` that matched the size of the car. This defined the entire region we wanted to sound to emit from.\n2. In the **Properties** window, we set the following properties for the part to ensure that our part didn't fall through the ground, collide with the car model, or obscure the visibility of the car:\n   - `Class.Part.Anchored` = **Enabled**\n   - `Class.Part.CanCollide` = **Disabled**\n   - `Class.Part.Transparency` = **`1`**\n3. We then added a `Class.Sound` object to the invisible part and set the following properties for the `Class.Sound` object so the raindrop sound started playing when players would load into the experience, looped continuously, and became audible when a player was 60 studs away/reached its maximum volume at 15 studs away:\n   - `Class.Sound.SoundId` = **`9178663282`**\n   - `Class.Sound.Playing` = **Enabled**\n   - `Class.Sound.Looped` = **Enabled**\n   - `Class.Sound.RollOffMaxDistance` = **`60`**\n   - `Class.Sound.RollOffMinDistance` = **`15`**\n```\n\n----------------------------------------\n\nTITLE: Mapping Default Button Icons with UserInputService in Lua\nDESCRIPTION: This Lua snippet illustrates how to use `UserInputService:GetImageForKeyCode()` to obtain the default Roblox asset URL for a specific KeyCode, such as `Enum.KeyCode.ButtonA`. This returned asset URL represents the default button icon for the relevant platform. The snippet then assigns this URL to the `Image` property of an `ImageLabel`, providing a simple way to display standard platform-specific button icons without requiring custom assets.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/production/publishing/console-guidelines.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nlocal UserInputService = game:GetService(\"UserInputService\")\nlocal imageLabel = script.Parent\nlocal key = Enum.KeyCode.ButtonA\n\nlocal mappedIcon = UserInputService:GetImageForKeyCode(key)\nimageLabel.Image = mappedIcon\n```\n\n----------------------------------------\n\nTITLE: Localizing Image Assets with LocalizationService in Lua\nDESCRIPTION: This Lua snippet demonstrates how to retrieve a localized asset (an image) by its translation key from the localization table and set it on an ImageLabel instance. It relies on the LocalizationService and uses GetTranslatorForLocaleAsync within pcall to gracefully handle asynchronous failures. To work correctly, the corresponding asset IDs must be defined in the localization table with a suitable key, and the input locale ('es' in this example) must match a supported translation. Fallback error handling is included for improved robustness.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/production/localization/localize-with-scripting.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal LocalizationService = game:GetService(\"LocalizationService\")\n\n-- Local variables\nlocal localizedImageID\nlocal localizedImage = Instance.new(\"ImageLabel\")\n\n-- Load Translator for \"es\". Wrap the function within a pcall() to protect against failures.\nlocal res, translator = pcall(function()\n\treturn LocalizationService:GetTranslatorForLocaleAsync(\"es\")\nend)\n\nif res then\n\t-- Get asset ID from localization table by referencing the Key\n\tlocalizedImageID = translator:FormatByKey(\"Key_JewelsImage\")\n\t-- Set the image\n\tlocalizedImage.Image = \"rbxassetid://\" .. localizedImageID\nelse\n\tprint('GetTranslatorForPlayerAsync failed: ' .. translator)\nend\n```\n\n----------------------------------------\n\nTITLE: Initializing reference to sell platform part in Lua (Roblox)\nDESCRIPTION: This snippet defines a local variable `sellPart` that references the Roblox Part object representing the selling platform. It allows subsequent scripts to detect when players interact with the platform by attaching event listeners to `sellPart`.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/adventure-game-series/selling-items.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal sellPart = script.Parent\n```\n\n----------------------------------------\n\nTITLE: Retrieving Teleport Data on Server in Roblox\nDESCRIPTION: Demonstrates how to retrieve teleport data for a player on the server side using Player:GetJoinData(). This script connects to PlayerAdded to access teleport data when a player joins.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/projects/teleport.md#_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nlocal function onPlayerAdded(player)\n    local joinData = player:GetJoinData()\n    local teleportData = joinData.TeleportData\n    local randomNumber = teleportData.randomNumber\n\n    print(player.Name .. \"joined with the number\" .. randomNumber)\nend\n\nPlayers.PlayerAdded:Connect(onPlayerAdded)\n```\n\n----------------------------------------\n\nTITLE: Get End Status - MatchManager (Lua)\nDESCRIPTION: This function determines the end status message based on the provided `endState`. It checks if the game ended due to a winner being found or the timer running out, and returns the corresponding status message. An error message is returned if the end state is invalid. This function is part of the MatchManager module.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/battle-royale-series/cleanup-and-reset.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nfunction MatchManager.getEndStatus(endState)\n  local statusToReturn\n\n  if endState == gameSettings.endStates.FoundWinner then\n    local winnerName = playerManager.getWinnerName()\n    statusToReturn = \"Winner is : \" .. winnerName\n  elseif endState == gameSettings.endStates.TimerUp then\n    statusToReturn = \"Time ran out!\"\n  else\n    statusToReturn = \"Error found\"\n  end\n\n  return statusToReturn\nend\n```\n\n----------------------------------------\n\nTITLE: Creating a 3D User Interface with DragDetector for Controlling ParticleEmitter Properties\nDESCRIPTION: This code creates a 3D slider interface using DragDetector to control a ParticleEmitter's properties. The X-axis controls particle size and speed, while the Z-axis controls particle color, demonstrating how to build interactive 3D UI elements.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/ui/3D-drag-detectors.md#_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal model = script.Parent\nlocal slider = model.SliderPart\nlocal originPart = model.OriginPart\nlocal emitter = script.Parent.EmitterPart.ParticleEmitter\n\nlocal dragDetector = slider.DragDetector\ndragDetector.ReferenceInstance = originPart\ndragDetector.MinDragTranslation = Vector3.zero\ndragDetector.MaxDragTranslation = Vector3.new(10, 0, 10)\n\nlocal dragRangeX = dragDetector.MaxDragTranslation.X - dragDetector.MinDragTranslation.X\nlocal dragRangeZ = dragDetector.MaxDragTranslation.Z - dragDetector.MinDragTranslation.Z\n\nlocal MIN_PARTICLE_SIZE = 1\nlocal MAX_PARTICLE_SIZE = 1.5\nlocal MIN_PARTICLE_SPEED = 2.5\nlocal MAX_PARTICLE_SPEED = 5\nlocal COLOR1 = Color3.fromRGB(255, 150, 0)\nlocal COLOR2 = Color3.fromRGB(255, 0, 50)\n\nlocal function updateParticles(emitter)\n\tlocal dragFactorX = (dragDetector.DragFrame.Position.X - dragDetector.MinDragTranslation.X) / dragRangeX\n\tlocal dragFactorZ = (dragDetector.DragFrame.Position.Z - dragDetector.MinDragTranslation.Z) / dragRangeZ\n\n\t-- Adjust particle size and speed based on drag detector X factor\n\temitter.Size = NumberSequence.new{\n\t\tNumberSequenceKeypoint.new(0, 0),\n\t\tNumberSequenceKeypoint.new(0.1, MIN_PARTICLE_SIZE + ((MAX_PARTICLE_SIZE - MIN_PARTICLE_SIZE) * dragFactorX)),\n\t\tNumberSequenceKeypoint.new(1, 0)\n\t}\n\tlocal speed = MIN_PARTICLE_SPEED + ((MAX_PARTICLE_SPEED - MIN_PARTICLE_SPEED) * dragFactorX)\n\temitter.Speed = NumberRange.new(speed, speed * 1.2)\n\t-- Adjust particle color based on drag detector Z factor\n\tlocal color = COLOR2:Lerp(COLOR1, dragFactorZ)\n\temitter.Color = ColorSequence.new{\n\t\tColorSequenceKeypoint.new(0, color),\n\t\tColorSequenceKeypoint.new(1, color)\n\t}\nend\n\ndragDetector:GetPropertyChangedSignal(\"DragFrame\"):Connect(function()\n\tupdateParticles(emitter)\nend)\n```\n\n----------------------------------------\n\nTITLE: Configuring Team Score Limit in Roblox Lua\nDESCRIPTION: This Lua snippet defines the maximum score required for team victory in a round, stored as TEAM_SCORE_LIMIT and returned from a module. This value is used by other scripts (like SetObjective) to display and enforce win conditions. Place this script in ReplicatedStorage/TEAM_SCORE_LIMIT. Input/Output: module returns set score limit. Dependencies: none beyond standard Roblox Lua.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/gameplay-scripting/add-rounds.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal TEAM_SCORE_LIMIT = 200 -- updated line, be sure to change back\n\nreturn TEAM_SCORE_LIMIT\n```\n\n----------------------------------------\n\nTITLE: Traversing DataModel with getInstance in Luau\nDESCRIPTION: This code demonstrates the preferred approach in the Plant project for accessing properties within a DataModel hierarchy when type information is limited. Instead of direct `any` casts, it utilizes a generic utility function `getInstance(instance, propertyName)` which handles the necessary casting internally, improving readability compared to inline casts.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/plant-reference-project.md#_snippet_6\n\nLANGUAGE: Luau\nCODE:\n```\nlocal function enableVendor(vendor: Model)\n\tlocal zonePart: BasePart = getInstance(vendor, \"ZonePart\")\nend\n```\n\n----------------------------------------\n\nTITLE: Adjusting Ambient Lighting Color - Roblox Studio\nDESCRIPTION: This snippet describes how to adjust the ambient light color in a Roblox Studio environment to improve realism. It involves modifying the `OutdoorAmbient` and `Ambient` properties of the `Lighting` service. Setting these to a specific color (e.g., 156, 136, 176 for a purple hue) changes the ambient lighting, impacting the overall look of outdoor and indoor spaces. It requires access to the `Lighting` service and its properties in Roblox Studio.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/lighting/enhance-outdoor-environments-with-future-lighting.md#_snippet_3\n\nLANGUAGE: Roblox Studio\nCODE:\n```\n1. In the **Explorer** window, select **Lighting**.\n2. In the **Properties** window, set **Outdoor Ambient** and **Ambient** to `156, 136, 176`. The ambient lighting changes to a light purple hue.\n```\n\n----------------------------------------\n\nTITLE: Generic Types Definition in Luau Lua\nDESCRIPTION: Introduces generic type parameters by defining 'GenericType<T>' as a substitution type. Illustrates how generics enable types to accept variable type arguments to increase reusability and precision, such as 'List<T>' and 'Map<K, V>'.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/type-checking.md#_snippet_17\n\nLANGUAGE: lua\nCODE:\n```\ntype GenericType<T> = T\n```\n\n----------------------------------------\n\nTITLE: Spawning Cupcake Objects with Loops (Lua)\nDESCRIPTION: This code spawns multiple instances of a cupcake object using nested loops. It clones a cupcake object from ServerStorage, sets the color of the frosting and cup randomly, and positions the cupcake in the workspace. The outer loop controls the number of batches, while the inner loop controls the number of cupcakes per batch.  The cupcake object must exist in ServerStorage.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-4/nested-loops.md#_snippet_13\n\nLANGUAGE: lua\nCODE:\n```\nlocal numberOfBatches = 30\nlocal cupcakesPerBatch = 6\n\nlocal cupcakesBaked = 0\n\n--Makes a single cupcake\nlocal function makeCupcake()\n    local ServerStorage = game:GetService(\"ServerStorage\")\n    local cupcake = ServerStorage.Cupcake:Clone()\n    local cup = cupcake.Cup\n    local frosting = cupcake.Frosting\n    cupcake:SetPrimaryPartCFrame(CFrame.new(0, 20, 0) * CFrame.Angles(0, 0, -90))\n    frosting.Color = frostingColor\n    cup.Color = cupColor\n    cupcake.Parent = workspace\nend\n\n\n-- Outer loop\nfor cupcakeBatch = 1, numberOfBatches do\n    print(\"Top outer loop: cupcake batch \" .. cupcakeBatch)\n    frostingColor = Color3.fromRGB(math.random(0, 255), math.random(0, 255), math.random(0, 255))\n    cupColor = Color3.fromRGB(math.random(0, 255), math.random(0, 255), math.random(0, 255))\n\n    -- Inner loop\n    for cupcakeNumber = 1, cupcakesPerBatch do\n        makeCupcake()\n        print(\"Inner loop: cupcake \" .. cupcakeNumber)\n        -- Track muffins baked\n        cupcakesBaked += 1\n        task.wait(0.5)\n    end\n\n    print(\"Bottom outer loop: \" .. cupcakesBaked .. \" cupcakes baked so far.\")\nend\n```\n\n----------------------------------------\n\nTITLE: Creating 'disappear' function to make platform invisible and non-collidable in Luau\nDESCRIPTION: This function sets the platform's 'CanCollide' property to false and its 'Transparency' to 1, making it invisible and allowing characters to fall through. It prepares the platform for dynamic disappearance within a loop.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/scripting/basic-scripting/intro-to-scripting.md#_snippet_1\n\nLANGUAGE: Luau\nCODE:\n```\nlocal function disappear()\n    platform.CanCollide = false\n    platform.Transparency = 1\nend\n```\n\n----------------------------------------\n\nTITLE: Server-Side Script - Filtering and Applying Custom Name (Lua)\nDESCRIPTION: This server script listens for name change requests from the client, filters the input text for appropriateness, and then updates the Humanoid's DisplayName with the filtered name. It uses the TextService to perform filtering asynchronously and includes error handling for safe operation.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/characters/name-health-display.md#_snippet_6\n\nLANGUAGE: Lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal TextService = game:GetService(\"TextService\")\n\nlocal changeNameEvent = Instance.new(\"RemoteEvent\")\nchangeNameEvent.Name = \"ChangeNameEvent\"\nchangeNameEvent.Parent = ReplicatedStorage\n\nlocal function onRequestNameChange(player, newName)\n\tlocal character = player.Character\n\tlocal humanoid = character:FindFirstChildWhichIsA(\"Humanoid\")\n\n\tlocal filterResult\n\tlocal success, errorMessage = pcall(function()\n\t\tfilterResult = TextService:FilterStringAsync(newName, player.UserId)\n\tend)\n\tif success then\n\t\tlocal filteredName\n\t\tlocal successFilter, errorFilter = pcall(function()\n\t\t\tfilteredName = filterResult:GetNonChatStringForBroadcastAsync()\n\t\tend)\n\t\tif successFilter and humanoid then\n\t\t\thumanoid.DisplayName = filteredName\n\t\tend\n\tend\nend\n\nchangeNameEvent.OnServerEvent:Connect(onRequestNameChange)\n```\n\n----------------------------------------\n\nTITLE: Calculating Categorical Signal (Diversifying) in Lua\nDESCRIPTION: This snippet computes a score for the diversifying signal, designed to maximize the ratio of players with a *different* attribute to the joining player's attribute. It uses the same ratio as clustering and subtracts it from 1, inverting the result.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/matchmaking/attributes-and-signals.md#_snippet_17\n\nLANGUAGE: lua\nCODE:\n```\nlocal score = num_players_same_{attribute_name} / occupancy\nreturn 1 - score\n```\n\n----------------------------------------\n\nTITLE: Populating a Luau Array with Parts\nDESCRIPTION: Assigns a table containing references to specific parts in the `workspace` to the `pathArray` variable. Each entry corresponds to a part instance that will be processed sequentially.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-5/loops-and-arrays.md#_snippet_1\n\nLANGUAGE: Luau\nCODE:\n```\nlocal pathArray = {\n\tworkspace.Part1,\n\tworkspace.Part2,\n\tworkspace.Part3,\n}\n```\n\n----------------------------------------\n\nTITLE: Defining removeActivePlayer and checkPlayerCount Functions - Lua\nDESCRIPTION: Implements the server-side logic for monitoring the number of active players and removing a defeated player from the active player table. When only one player remains, the match end event is fired with the FoundWinner end state. Requires an 'activePlayers' table, 'matchEnd' event, and access to 'gameSettings'. Expects the 'player' parameter to reference the player object to remove.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/battle-royale-series/ending-matches.md#_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nlocal function checkPlayerCount()\n\tif #activePlayers == 1 then\n\t\tmatchEnd:Fire(gameSettings.endStates.FoundWinner)\n\tend\nend\n\nlocal function removeActivePlayer(player)\n\nend\n```\n\n----------------------------------------\n\nTITLE: Defining PlayerManager Variables in Lua\nDESCRIPTION: This snippet defines local variables within the `PlayerManager` module, including references to essential Roblox services like `Players` and `ServerStorage`. It also defines variables related to map locations, such as the lobby spawn, arena folder, and arena spawn locations. Additionally, it initializes an empty table `activePlayers` to keep track of players currently in the game. These variables are used throughout the module to manage player spawning and teleportation.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/battle-royale-series/managing-players.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal PlayerManager = {}\n\n-- Services\nlocal Players = game:GetService(\"Players\")\nlocal ServerStorage = game:GetService(\"ServerStorage\")\n-- Map Variables\nlocal lobbySpawn = workspace.Lobby.StartSpawn\nlocal arenaMap = workspace.Arena\nlocal spawnLocations = arenaMap.SpawnLocations\n-- Player Variables\nlocal activePlayers = {}\n\n-- Local Functions\n\n-- Module Functions\n\nreturn PlayerManager\n```\n\n----------------------------------------\n\nTITLE: Example JSON Export from Script Profiler\nDESCRIPTION: This code snippet shows the structure of exported JSON data from a Script Profiler session, including version information, timestamps, categories, nodes data, and function details with their CPU time costs.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/studio/optimization/scriptprofiler.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"Version\":2,\n  \"SessionStartTime\":1704850750514,\n  \"SessionEndTime\":1704850751198,\n  \"Categories\":\n  [\n    {\"Name\":\"Parallel Luau\",\"NodeId\":4},\n    {\"Name\":\"Heartbeat\",\"NodeId\":1}\n  ],\n  \"Nodes\":\n  [\n      {\"TotalDuration\":2530,\"FunctionIds\":[1],\"NodeIds\":[2]},\n      {\"TotalDuration\":2530,\"FunctionIds\":[2,5],\"NodeIds\":[3,7]},\n      {\"TotalDuration\":1267},\n      {\"TotalDuration\":7746,\"FunctionIds\":[3],\"NodeIds\":[5]},\n      {\"TotalDuration\":7746,\"FunctionIds\":[4],\"NodeIds\":[6]},\n      {\"TotalDuration\":7746},\n      {\"TotalDuration\":1263,\"FunctionIds\":[6],\"NodeIds\":[8]},\n      {\"TotalDuration\":1263,\"FunctionIds\":[7],\"NodeIds\":[9]},\n      {\"TotalDuration\":1263,\"FunctionIds\":[8],\"NodeIds\":[10]},\n      {\"TotalDuration\":1263}\n  ],\n  \"Functions\":\n  [\n    {\"Name\":\"main\",\"TotalDuration\":2530},\n    {\"Source\":\"builtin_ManageCollaborators.rbxm.ManageCollaborators.Packages._Index.roblox_rodux-3.0.0.rodux.Store\",\"Line\":81,\"TotalDuration\":1267},\n    {\"Name\":\"Script\",\"TotalDuration\":7746},\n    {\"Source\":\"Workspace.Actor.Script\",\"Line\":1,\"TotalDuration\":7746},\n    {\"Source\":\"builtin_DeveloperInspector.rbxm.DeveloperInspector.Packages._Index.DeveloperFramework.DeveloperFramework.UI.Components.Grid\",\"Line\":221,\"TotalDuration\":1263},\n    {\"Source\":\"builtin_DeveloperInspector.rbxm.DeveloperInspector.Packages._Index.DeveloperFramework.DeveloperFramework.UI.Components.Grid\",\"Name\":\"_update\",\"Line\":236,\"TotalDuration\":1263},\n    {\"Source\":\"builtin_DeveloperInspector.rbxm.DeveloperInspector.Packages._Index.DeveloperFramework.DeveloperFramework.UI.Components.Grid\",\"Name\":\"_getRange\",\"Line\":277,\"TotalDuration\":1263},\n    {\"Source\":\"[C]\",\"Name\":\"ScrollingFrame.CanvasPosition\",\"TotalDuration\":1263}\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Daily Picks Creator Program Card Using Material-UI in React (JavaScript/JSX)\nDESCRIPTION: This code provides the structure for displaying a 'Today's Picks' program card using Material-UI components within a React application. Dependencies include Material-UI's Card, Typography, Chip, CardContent, CardActions, and Button components, as well as React, for rendering the title, status, details, and navigation. Inputs are JSX-compatible attributes for relevant props, while the output is a visually consistent card with the given content. The design supports daily recommendations and maintains accessibility and layout consistency across different program types.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/creator-programs/index.md#_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<Grid item container wrap=\"nowrap\" direction=\"column\">\n  <Card variant=\"filled\" style={{height: \"100%\"}}>\n    <CardContent>\n      <h4>Today's Picks on Home</h4>\n      <figure>\n        <Chip\n          color=\"success\"\n          label=\"Status: Open\"\n          size=\"medium\"\n          variant=\"filled\"\n        />\n      </figure>\n      <Typography variant='body1'>Daily curation of exciting updates, new and notable experiences, events, and cultural events to provide users fresh content</Typography>\n    </CardContent>\n    <CardActions>\n      <Button href=\"/creator-programs/todays-picks-home\" variant=\"contained\" color=\"secondary\" size=\"large\">Learn More</Button>\n    </CardActions>\n  </Card>\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Updating Player Data on Server using PlayerDataServer (Lua)\nDESCRIPTION: This Lua code snippet demonstrates setting a player's 'coins' value to 5 using the `PlayerDataServer:setValue` method. This approach is part of the player data system for server-to-client replication, where the server updates persistent data associated with a player, and clients can subscribe to these changes via the `PlayerDataClient.updated` event, avoiding the need for custom RemoteEvents.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/plant-reference-project.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nPlayerDataServer:setValue(player, \"coins\", 5)\n```\n\n----------------------------------------\n\nTITLE: Presenting Content in Tabs (Markup)\nDESCRIPTION: This markup utilizes Tabs and TabItem components (likely from a documentation framework) to present different views (Mobile and PC examples of UI blocking) within selectable tabs. Each TabItem contains an image relevant to its label, allowing users to switch between related visual examples.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/user-interface-design/wireframe-your-layouts.md#_snippet_1\n\nLANGUAGE: Markup\nCODE:\n```\n<Tabs>\n  <TabItem key = \"1\" label=\"Mobile\">\n\n<img src=\"../../../assets/tutorials/user-interface-design/Section2/MobileBlockIn.png\" />\n\n  </TabItem>\n  <TabItem key = \"2\" label=\"PC\">\n\n<img src=\"../../../assets/tutorials/user-interface-design/Section2/PCBlockIn.png\" />\n\n  </TabItem>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Subscribing to itemViewClosed Event with Lua in Roblox\nDESCRIPTION: Hooks a function to MerchBooth.itemViewClosed, firing when an item detail view is closed. Requires the MerchBooth module from ReplicatedStorage. The handler outputs a message indicating the item view closure, facilitating post-view cleanup or state updates.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/merch-booth.md#_snippet_38\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal MerchBooth = require(ReplicatedStorage:WaitForChild(\"MerchBooth\"))\n\nMerchBooth.itemViewClosed:Connect(function()\n\tprint(\"Item view closed\")\nend)\n```\n\n----------------------------------------\n\nTITLE: Filtering by Asset IDs in Query String - HTTP\nDESCRIPTION: Retrieves assets that match specific IDs by including a comma-separated list under the 'assetIds' filter. The API expects the 'assetIds' parameter to contain item identifiers and returns only the matching records. This filter is suitable when fetching known items by their unique IDs.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/reference/patterns.md#_snippet_10\n\nLANGUAGE: HTTP\nCODE:\n```\nfilter=assetIds=1,2,3,4\n```\n\n----------------------------------------\n\nTITLE: Displaying Damage Billboard with DamageBillboardHandler - Roblox Lua\nDESCRIPTION: This Lua code snippet calls ShowDamageBillboard on the DamageBillboardHandler to display floating damage numbers above a character's head following a hit. Required dependencies are the DamageBillboardHandler and a reference to the part (adornmentPart) such as a humanoid's head. The function takes two parameters: damage (number), the amount of damage done, and adornmentPart (Instance), the Roblox part above which the billboard will be displayed. This function should be called on the client, especially for the player dealing the damage.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/weapons-kit.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nDamageBillboardHandler:ShowDamageBillboard(damage, adornmentPart)\n```\n\n----------------------------------------\n\nTITLE: Connecting GUI Events to Change Mouse Cursor in Roblox Lua\nDESCRIPTION: This snippet defines a function to set the system cursor icon and connects it to the MouseEnter and MouseLeave events of a button. When the user hovers over the button, it changes the cursor to a pointing hand; when the cursor leaves, it resets to default. It relies on the `plugin:GetMouse()` method and `Connect` on events to customize cursor appearance dynamically.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/studio/build-studio-widgets.md#_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\nlocal function setCursor(cursorAsset)\n\tplugin:GetMouse().Icon = cursorAsset\nend\n\ntestButton.MouseEnter:Connect(function()\n\tsetCursor(\"rbxasset://SystemCursors/PointingHand\")\nend)\n\ntestButton.MouseLeave:Connect(function()\n\tsetCursor(\"\")\nend)\n```\n\n----------------------------------------\n\nTITLE: Implementing Time-Based Chat Control with Roblox Lua\nDESCRIPTION: This server-side Lua script toggles mute states for all players' microphones in 15-second intervals, enabling a time-based voice chat feature. Using the Players service, it iterates through all active players repeatedly, checking for the presence of their AudioDeviceInput objects and muting or unmuting them based on a toggle flag. The script runs an infinite loop with a 15 second wait to alternate muting states, effectively controlling when players can speak during gameplay phases. It should be placed in ServerScriptService and named 'TimeBasedChat'.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/audio/add-voice-chat.md#_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\nlocal muteAll = false\n\nlocal function toggleMuteAll()\n\tmuteAll = not muteAll\n\tfor _, player in Players:GetPlayers() do\n\t\tlocal device : AudioDeviceInput = player:FindFirstChild(\"AudioDeviceInput\")\n\t\tif not device then\n\t\t\tcontinue\n\t\tend\n\t\tdevice.Muted = muteAll\n\tend\nend\n\nwhile true do\n\ttask.wait(15) -- every 15 seconds\n\ttoggleMuteAll() -- either allow people to speak, or prevent them from speaking\nend\n```\n\n----------------------------------------\n\nTITLE: Using Block Comments in Luau\nDESCRIPTION: This Luau code snippet demonstrates the use of block comments, which are defined with `--[[]]`. Block comments are used for multi-line comments and are often used to document items, such as the purpose of a file or the intent of a function. The example provides a block comment to describe the function's purpose, its constraints, and expected behavior.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/comments.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n--[[ \n    Shuts off the cosmic moon ray immediately.\n\n    Should only be called within 15 minutes of midnight Mountain Standard\n    Time, or the cosmic moon ray may be damaged.\n]]\nlocal function stopCosmicMoonRay()\nend\n```\n\n----------------------------------------\n\nTITLE: Information - Team Color Visual Indicator\nDESCRIPTION: When a player is assigned to a team, their character's name appears in the color corresponding to their team's TeamColor, which helps identify teammates and opponents visually in team-based modes.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/characters/name-health-display.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Creating an Empty While Loop in Luau\nDESCRIPTION: This snippet creates the basic structure of a `while` loop, but currently does nothing. It sets the stage for adding code that will be executed repeatedly. The `while true do` ensures the loop runs indefinitely until it's modified.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-4/repeat-code-with-while-loops.md#_snippet_3\n\nLANGUAGE: Luau\nCODE:\n```\n-- Looping Code\nwhile true do\n\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Up Roblox NPC Chat Script (Initial)\nDESCRIPTION: Initial structure of the Luau script for managing NPC dialogue. It sets up references to necessary Roblox services and character parts, and declares an empty table (`dialogueArray`) to hold dialogue lines.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-5/intro-to-arrays.md#_snippet_1\n\nLANGUAGE: Luau\nCODE:\n```\n-- Cycles through chat dialogue when prompt is used\n\nlocal Chat = game:GetService(\"Chat\")\n\nlocal prompt = script.Parent\n\nlocal npc = prompt.Parent\nlocal characterParts = npc.CharacterParts\nlocal head = characterParts.Head\n\n-- Add array here\nlocal dialogueArray = {}\n\nlocal function speak()\n   local dialogue = \"I've got one thing to say!\"\n   Chat:Chat(head, dialogue)\nend\n\nprompt.Triggered:Connect(speak)\n```\n\n----------------------------------------\n\nTITLE: Creating sendPlayersToMatch Function in Lua\nDESCRIPTION: This snippet creates a module function named `sendPlayersToMatch()` within the `PlayerManager` module. This function is responsible for sending players to the arena when a match starts. Currently, it only contains a `print()` statement for testing purposes. This function will be expanded later to handle the actual teleportation and initialization of players in the arena.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/battle-royale-series/managing-players.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\n-- Local Functions\n\n-- Module Functions\nfunction PlayerManager.sendPlayersToMatch()\n\tprint(\"Sending players to match\")\nend\n\nreturn PlayerManager\n```\n\n----------------------------------------\n\nTITLE: Displaying Platform Hosting & Support Percentage using JSX Grid and Chip\nDESCRIPTION: This JSX snippet employs Grid and Chip components to show the 18% share designated for platform hosting and support costs (servers, moderation, customer service, etc.). It uses styled chips for the percentage value and its description, laid out in a grid.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/production/earn-on-roblox.md#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Grid container spacing={1}>\n<Grid item XSmall={2}>\n<Chip label=\"18%\" size=\"large\" style={{backgroundColor:\"#00a2ff\",color:\"white\",fontSize:\"120%\",width:\"100%\"}} />\n</Grid>\n<Grid item XSmall={10}>\n<Chip label=\"Platform hosting & support\" size=\"large\" color=\"primary\" variant=\"outlined\" style={{fontSize:\"105%\"}}/>\n</Grid>\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Configuring Floor Ramp Assets in Roblox Studio (Sample)\nDESCRIPTION: Specifies the configuration (Size, Position, Orientation, MaterialVariant) for using 'FloorRamp' modular assets to create elevation changes between floor levels in the sample Environment Art place file within Roblox Studio. Different material variants are used depending on the ramp's location.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/environmental-art/construct-your-world.md#_snippet_2\n\nLANGUAGE: Luau\nCODE:\n```\n-- Floor Ramp Assets (FloorRamp Modular Asset)\n-- Ramp 1:\nSize = Vector3.new(14, 6, 20)\nCFrame.Position = Vector3.new(-102.5, 7, 200)\nCFrame.Orientation = Vector3.new(0, 0, 0)\nMaterialVariant = \"GlossyTiles\"\n\n-- Ramp 2:\nSize = Vector3.new(14, 6, 20)\nCFrame.Position = Vector3.new(-102.5, 7, 120)\nCFrame.Orientation = Vector3.new(0, 180, 0)\nMaterialVariant = \"GlossyTiles\"\n\n-- Ramp 3:\nSize = Vector3.new(50, 6, 20)\nCFrame.Position = Vector3.new(-70, 7, 160)\nCFrame.Orientation = Vector3.new(0, 90, 0)\nMaterialVariant = \"Concrete_Tiles_A\"\n```\n\n----------------------------------------\n\nTITLE: Scripting Light Flicker with NumberSequence in Lua\nDESCRIPTION: This script implements a flickering light effect by using a NumberSequence to control the brightness of a lamp's SpotLight, Beam, and lightbulb color in Roblox. It utilizes the RunService.Heartbeat event to update these properties every frame, creating the illusion of a flickering light. The script depends on attributes named 'BrightnessCurve' (NumberSequence) and 'LoopDuration' (number) set on the model.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/lighting/create-flickering-lights.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal RunService = game:GetService(\"RunService\")\n\n-- Gets the attribute values set on the model.\nlocal brightnessCurve = script.Parent:GetAttribute(\"BrightnessCurve\")\nlocal loopDuration = script.Parent:GetAttribute(\"LoopDuration\")\n\n-- Stores references to the model's instances that will change.\nlocal light = script.Parent.lamp_hood.SpotLight\nlocal bulb = script.Parent.lightbulb\nlocal beam = script.Parent.lamp_hood.Beam\n\n-- Stores properties' original values that will change.\nlocal origLightBrightness = light.Brightness\nlocal origBeamBrightness = beam.Brightness\nlocal origBulbColor = bulb.Color\n\n-- Gets the value of the NumberSequence (ns) at a specific time (nsTime)\nfunction evaluateNumberSequence(ns: NumberSequence, nsTime: number)\n\t-- If we are at 0 or 1, returns the first or last keypoint's value, respectively.\n\tif nsTime == 0 then\n\t\treturn ns.Keypoints[1].Value\n\tend\n\tif nsTime == 1 then\n\t\treturn ns.Keypoints[#ns.Keypoints].Value\n\tend\n\n\t-- Otherwise, steps through each sequential pair of keypoints.\n\tfor i = 1, #ns.Keypoints - 1 do\n\t\t-- Gets the current and next keypoint.\n\t\tlocal currKp = ns.Keypoints[i]\n\t\tlocal nextKp = ns.Keypoints[i + 1]\n\n\t\t-- If nsTime is between the keypoints' times,\n\t\tif nsTime >= currKp.Time and nsTime < nextKp.Time then\n\t\t\t-- Calculates where nsTime lies between the keypoints' times, calls this alpha.\n\t\t\tlocal alpha = (nsTime - currKp.Time) / (nextKp.Time - currKp.Time)\n\t\t\t-- Returns the value between the points for nsTime using alpha.\n\t\t\treturn currKp.Value + (nextKp.Value - currKp.Value) * alpha\n\t\tend\n\tend\nend\n\nRunService.Heartbeat:Connect(function()\n\t-- Solves for the NumberSequence's time (between 0 and 1).\n\tlocal t = time() / loopDuration\n\tlocal numberSequenceTime = t - (t // 1)\n\n\t-- Gets the NumberSequence's value at this time.\n\tlocal brightnessValue = evaluateNumberSequence(brightnessCurve, numberSequenceTime)\n\n\t-- Adjusts brightness and color properties based on this value.\n\tlight.Brightness = origLightBrightness * brightnessValue\n\tbeam.Brightness = origBeamBrightness * brightnessValue\n\tbulb.Color = Color3.new(\n\t\torigBulbColor.r * brightnessValue,\n\t\torigBulbColor.g * brightnessValue,\n\t\torigBulbColor.b * brightnessValue\n\t)\nend)\n```\n\n----------------------------------------\n\nTITLE: Attempting to Call a Table Without `__call` in Lua\nDESCRIPTION: Shows the default behavior (an error) when attempting to call a standard Lua table as if it were a function. This requires the `__call` metamethod to be defined.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/metatables.md#_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlocal t = {10, 20, 30}\nprint(t(5))\n```\n\n----------------------------------------\n\nTITLE: GameManager Script - Core Game Loop and Match Start Logic - Lua\nDESCRIPTION: Comprises the main entry point for managing game rounds, player waiting, and match lifecycle in a continuous loop. Waits for sufficient players, transitions to match start, invokes matchManager to control the match, and prints end results. Relies on other modules for displaying status, event handling, and match state transitions.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/battle-royale-series/ending-matches.md#_snippet_15\n\nLANGUAGE: lua\nCODE:\n```\n-- Services\nlocal ServerStorage = game:GetService(\"ServerStorage\")\nlocal Players = game:GetService(\"Players\")\n\n-- Module Scripts\nlocal moduleScripts = ServerStorage:WaitForChild(\"ModuleScripts\")\nlocal matchManager = require(moduleScripts:WaitForChild(\"MatchManager\"))\nlocal gameSettings = require(moduleScripts:WaitForChild(\"GameSettings\"))\nlocal displayManager = require(moduleScripts:WaitForChild(\"DisplayManager\"))\n\n-- Events\nlocal events = ServerStorage:WaitForChild(\"Events\")\nlocal matchEnd = events:WaitForChild(\"MatchEnd\")\n\nwhile true do\n\tdisplayManager.updateStatus(\"Waiting for Players\")\n\n\trepeat\n\t\ttask.wait(gameSettings.intermissionDuration)\n\tuntil #Players:GetPlayers() >= gameSettings.minimumPlayers\n\n\tdisplayManager.updateStatus(\"Get ready!\")\n\ttask.wait(gameSettings.transitionTime)\n\n\tmatchManager.prepareGame()\n\tlocal endState = matchEnd.Event:Wait()\n\tprint(\"Game ended with: \" .. endState)\nend\n```\n\n----------------------------------------\n\nTITLE: Adjusting Default Speeder Speed in Luau\nDESCRIPTION: This snippet shows the block of variables within the 'Settings' script that configure speeder performance. It highlights the 'Settings.DefaultSpeed' variable and instructs users to modify the numeric value assigned to it to change the speeder's base speed.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/build-it-play-it-galactic-speedway/customize-and-share.md#_snippet_1\n\nLANGUAGE: Luau\nCODE:\n```\nSettings.DefaultSpeed = 100\t\t-- Speed when not boosted [Studs/second, Range 50-300]\nSettings.BoostSpeed = 200\t\t-- Speed when boosted [Studs/second, Maximum: 400]\nSettings.BoostAmount = 10\t\t-- Duration of boost in seconds\nSettings.Steering = 5\t\t-- How quickly the speeder turns [Range: 1-10]\n```\n\n----------------------------------------\n\nTITLE: Making a Table Callable with `__call` Metamethod in Lua\nDESCRIPTION: Demonstrates implementing the `__call` metamethod to enable a table to be invoked like a function. In this example, calling the table with a parameter adds that parameter to each element of the table and returns the modified elements.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/metatables.md#_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nlocal metatable = {\n\t__call = function(t, param)\n\tlocal sum = {}\n\t\tfor i, value in ipairs(t) do\n\t\t\tsum[i] = value + param -- Add the argument (5) to the value, then place it in the new table (t).\n\t\tend\n\t\treturn unpack(sum) -- Return the individual table values\n\tend\n}\n\nlocal t = setmetatable({10, 20, 30}, metatable)\nprint(t(5)) --> 15 25 35\n```\n\n----------------------------------------\n\nTITLE: Creating Outer Loop for Tower Height - Luau\nDESCRIPTION: Introduces the first (outermost) `for` loop for the tower building script. This loop iterates from 1 up to `TOWER_SIZE`, controlling the current vertical level (Y-coordinate) for the cubes being placed. It calculates the `spawnY` position for the current floor, offsetting by `CUBE_SIZE` for each step.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-4/nested-loops.md#_snippet_8\n\nLANGUAGE: Luau\nCODE:\n```\n-- Builds tower\nfor heightIndex = 1, TOWER_SIZE do\n    local spawnY = (heightIndex - 1) * CUBE_SIZE\nend\n```\n\n----------------------------------------\n\nTITLE: Accessing Model Pivot Using WorldPivot Property in Roblox Lua\nDESCRIPTION: Explains how to use the Class.Model.WorldPivot property to get or set the precise world location of a model's pivot when the model lacks a PrimaryPart. If the PrimaryPart is set, pivot offset properties on that part are used instead. Changing this property does not move or rotate the model directly but affects the relative pivot point used for transformations. Useful for scripting precise pivot manipulations on models without PrimaryParts.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/studio/pivot-tools.md#_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\n-- Example: Access the world pivot of a model without a PrimaryPart\nlocal pivotCFrame = someModel.WorldPivot\nprint(\"Model world pivot:\", pivotCFrame.p)\n```\n\n----------------------------------------\n\nTITLE: Repeating Part Sequence with Luau While Loop\nDESCRIPTION: Encloses the entire sequence of operations (the disappearing loop, the intermediate wait, and the reappearing loop) within a `while true do` loop. This structure causes the complete disappearing and reappearing process to repeat indefinitely.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-5/loops-and-arrays.md#_snippet_8\n\nLANGUAGE: Luau\nCODE:\n```\nwhile true do\n   -- Make a part disappear from the array in order\n\tfor partIndex = 1, #pathArray  do\n\t\ttask.wait(VANISH_RATE)\n\t\tlocal whichPart = pathArray[partIndex]\n\t\twhichPart.CanCollide = false\n\t\twhichPart.Transparency = 1\n\tend\n\n\t-- Wait for a second before making the path reappear\n\ttask.wait(1)\n\n\t-- Reset the path by making all parts walkable again\n\tfor partIndex = 1, #pathArray do\n\t\tlocal whichPart = pathArray[partIndex]\n\t\twhichPart.CanCollide = true\n\t\twhichPart.Transparency = 0\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Complete BuyScript - Roblox Lua\nDESCRIPTION: This code represents the complete script for handling the purchase of upgrades in a Roblox game.  It includes variable definitions for spaces and upgrade cost, and an event handler that is triggered when a player clicks the button (through the MouseClick event).  The script grants upgrades based on whether the player has enough gold, and modifies the player's \"Gold\" and \"Spaces\" stats.  This script depends on other scripts for PlayerSetup.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/adventure-game-series/buying-upgrades.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\n-- Lets players click a button to buy an upgrade that increases MaxSpaces\nlocal buyButton = script.Parent\nlocal clickDetector = buyButton.ClickDetector\n\n-- Variables for the upgrade\nlocal newSpaces = 10\nlocal upgradeCost = 100\n\nlocal function giveUpgrade(player)\n\tprint(\"Someone clicked the button\")\n\t-- Get's the player's leaderboard to get other IntValues\n\tlocal playerStats = player:FindFirstChild(\"leaderstats\")\n\n   if playerStats then\n      -- Gets the player's money and spaces to make changes\n      local playerGold = playerStats:FindFirstChild(\"Gold\")\n      local playerSpaces = playerStats:FindFirstChild(\"Spaces\")\n\n\t   -- Checks if player has enough money to afford the upgrade\n      if playerGold and playerSpaces and playerGold.Value >= upgradeCost then\n      \tprint(\"Player can buy item\")\n      \t-- Subtract the item's cost from the player's money\n         playerGold.Value -= upgradeCost\n         playerSpaces.Value += newSpaces\n      end\n   end\nend\n\nclickDetector.MouseClick:Connect(giveUpgrade)\n```\n\n----------------------------------------\n\nTITLE: Defining startTimer Function in MatchManager (Lua)\nDESCRIPTION: Defines the complete `startTimer` local function within `MatchManager`. It starts the timer, connects its `finished` event, and includes the `while` loop to continuously update the `timeLeft` IntValue displayed to players until the timer finishes.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/battle-royale-series/creating-a-gui.md#_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\nlocal function startTimer()\n\tprint(\"Timer started\")\n\tmyTimer:start(gameSettings.matchDuration)\n\tmyTimer.finished:Connect(timeUp)\n\n\twhile myTimer:isRunning() do\n\t\t-- Adding +1 makes sure the timer display ends at 1 instead of 0.\n\t\ttimeLeft.Value = (myTimer:getTimeLeft() + 1) // 1\n\t\t-- By not setting the time for wait, it offers more accurate looping\n\t\ttask.wait()\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Particle Size Over Lifetime Using Roblox Lua\nDESCRIPTION: This Lua snippet adjusts the Size property of the FoamRipples ParticleEmitter to create particles that grow from 5 to 20 studs in size over their lifetime, with a small variation in sizing. It requires the ParticleEmitter to be already set in the Workspace under Foam.MainDropFoam.FoamRipples. The NumberSequence and NumberSequenceKeypoint classes are used to define the size transition curve over the normalized particle lifetime (0 to 1). This script should be run in the Command Bar or a script to dynamically change particle sizes as part of the foam effect.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/vfx/create-waterfalls.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nworkspace.Foam.MainDropFoam.FoamRipples.Size = NumberSequence.new{NumberSequenceKeypoint.new(0,5,0), NumberSequenceKeypoint.new(1,20,5)}\n```\n\n----------------------------------------\n\nTITLE: Configuring SocialInteractions Module in Lua\nDESCRIPTION: This code snippet demonstrates how to configure the SocialInteractions module using the `configure` function. It adjusts the waist orientation weight and disables chat animations. It requires the SocialInteractions module to be present in ReplicatedStorage.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/social-interactions.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal SocialInteractions = require(ReplicatedStorage:WaitForChild(\"SocialInteractions\"))\n\n-- Make waist rotation more pronounced and disable the chat animations feature\nSocialInteractions.configure({\n\twaistOrientationWeight = 0.75,\n\tuseChatAnimations = false,\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Teleportation System\nDESCRIPTION: Three types of teleportation are used: lobby to reserved server, normal to corrupt room states (with cutscenes), and short teleports for puzzles/respawning. Reserved servers group players, and cutscenes hide transitions between room states.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/the-mystery-of-duvall-drive/main-design-requirements.md#_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Configuring ParticleEmitter for Webby Splash Texture in Roblox\nDESCRIPTION: This snippet sets up a ParticleEmitter to produce webby, low-viscosity lava splashes using a specific texture, orientation, color tint, size and squash animations, lifespan, emission rate, speed, rotation, flipbook animation settings, light emission, and influence. It aims to create a visually appealing, animated lava splash effect on the volcano.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/vfx/create-volcanoes.md#_snippet_7\n\nLANGUAGE: Lua\nCODE:\n```\n-- Insert ParticleEmitter into the SplashingLava part and configure properties\nlocal emitter = Instance.new(\"ParticleEmitter\")\nemitter.Name = \"WebbySplashes\"\nemitter.Texture = \"rbxassetid://17363668312\"\nemitter.Orientation = Enum.ParticleOrientation.FacingCameraWorldUp\nemitter.Color = Color3.fromRGB(255, 152, 79)\n\n-- Size animation across lifetime with variation\nemitter.SizeSequence = NumberSequence.new({\n    NumberSequenceKeypoint.new(0, 4.31, 0.762),\n    NumberSequenceKeypoint.new(1, 6.2, 0.875)\n})\n\n-- Squash (elongation) animation\nemitter.SquashSequence = NumberSequence.new({\n    NumberSequenceKeypoint.new(0, -0.075, 0.263),\n    NumberSequenceKeypoint.new(1, -0.413, 0.412)\n})\n\n-- Offset the texture\nemitter.ZOffset = 1\n\n-- Particle lifetime in seconds\nemitter.Lifetime = NumberRange.new(1.5, 2)\n\n-- Emission rate\nemitter.Rate = 0.37\n\n-- Emission speed\nemitter.Speed = NumberRange.new(2)\n\n-- Rotation properties\nemitter.RotSpeed = NumberRange.new(-20, 20)\n\n-- Spread angle in degrees\nemitter.SpreadAngle = Vector2.new(5, 5)\n\n-- Flipbook animation setup\nemitter.FlipbookLayout = Enum.ParticleFlipbookLayout.Grid8x8\nemitter.FlipbookMode = Enum.ParticleFlipbookMode.Oneshot\n\n-- Light emission\nemitter.LightEmission = 0.1\nemitter.LightInfluence = 0.25\n\n-- Add emitter to the parent part\nemitter.Parent = workspace.Splashes\n\n```\n\n----------------------------------------\n\nTITLE: Getting Emote by Name - EmoteBar - Lua\nDESCRIPTION: Shows how to retrieve a specific emote definition from the EmoteBar library by its name using the `getEmote` function. The retrieved emote object (`shrug`) can then be used for other operations like playing the emote. This must be called from a LocalScript.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/emote-bar.md#_snippet_7\n\nLANGUAGE: Lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal EmoteBar = require(ReplicatedStorage:WaitForChild(\"EmoteBar\"))\n\nlocal shrug = EmoteBar.getEmote(\"Shrug\")\n```\n\n----------------------------------------\n\nTITLE: Initializing leaderboard folder and attaching to PlayerAdded event in Roblox Lua\nDESCRIPTION: This snippet defines the main function to create a 'leaderstats' folder for a player and connects it to the PlayerAdded event so that each new player automatically receives a leaderboard upon joining. It ensures the folder is correctly named and parented to enable Roblox's built-in leaderboard display.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/adventure-game-series/code-the-leaderboard.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nlocal function onPlayerJoin(player)\n   local leaderstats = Instance.new(\"Folder\")\n   leaderstats.Name = \"leaderstats\"\n   leaderstats.Parent = player\nend\n\nPlayers.PlayerAdded:Connect(onPlayerJoin)\n```\n\n----------------------------------------\n\nTITLE: Exchanging Authorization Code for Tokens using cURL (Roblox OAuth 2.0)\nDESCRIPTION: A cURL command example demonstrating how to exchange an authorization code for access, refresh, and ID tokens using the `POST /oauth/v1/token` endpoint. It sends the `client_id`, `client_secret`, `grant_type` ('authorization_code'), and the received `code` as URL-encoded form data.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/auth/oauth2-reference.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\ncurl --location --request POST 'https://apis.roblox.com/oauth/v1/token' \\\n--header 'Content-Type: application/x-www-form-urlencoded' \\\n--data-urlencode 'client_id=840974200211308101' \\\n--data-urlencode 'client_secret=RBX-CR9...St12L' \\\n--data-urlencode 'grant_type=authorization_code' \\\n--data-urlencode 'code=yCnq4ofX1...XmGpdx'\n```\n\n----------------------------------------\n\nTITLE: Publishing a Binary Place File (.rbxl) via API\nDESCRIPTION: Shows a cURL command using a POST request to publish a binary place file (.rbxl) to a specific Roblox place via the Place Publishing API. Users must substitute actual values for the Universe ID, Place ID, and API key. The Content-Type header is specified as 'application/octet-stream', and the local file path is supplied with --data-binary.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/guides/usage-place-publishing.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ curl --verbose --location POST 'https://apis.roblox.com/universes/v1/{universeId}/places/{placeId}/versions?versionType=Published' \\\n--header 'x-api-key: <your-api-key>' \\\n--header 'Content-Type: application/octet-stream' \\\n--data-binary @/home/placefiles/place1.rbxl\n```\n\n----------------------------------------\n\nTITLE: Applying UI Tweens in Roblox\nDESCRIPTION: This code demonstrates how to use the `UITweenModule` to animate UI elements within a Roblox game.  It retrieves the `UITweenModule` from `ReplicatedStorage` and references relevant UI objects within the player's `PlayerGui`. The code then uses the `UITween` functions such as `fade` and `size` to create animation sequences. The code is used to create the effects of tweening a UI object. It requires the `UITweenModule` to be present in the game, the `PlayerGui` and the referenced UI objects.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/beyond-the-dark/user-interface.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n```lua title=\"Applying UI Tween to Objects\"\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\n-- Add UITween Module\nlocal UITween = require(ReplicatedStorage.UITweenModule)\n\n-- Find player Guis and UI objects\nlocal playerGui = game:GetService('Players').LocalPlayer:WaitForChild('PlayerGui')\nlocal screenGuiMapUIFrame = playerGui:WaitForChild(\"ScreenGuiMapUIFrame\").SurfaceGui\nlocal mapUIFrameStroke = screenGuiMapUIFrame.FrameStroke\nlocal mapUIFrameFill = screenGuiMapUIFrame.FrameFill\n\n-- Sizes used for tweening\nlocal frameSizeStart = UDim2.new(0, 0, 0, 0)\nlocal frameSizeMid = UDim2.new(1, 0, 0.05, 0)\nlocal frameSizeEnd = UDim2.new(1, 0, 1, 0)\n\n-- Example Tweening\nUITween.fade(mapUIFrameStroke, 0, 2, 0)\nUITween.size(mapUIFrameStroke, frameSizeMid, 0.4, 0)\nUITween.fade(mapUIFrameFill, 0, 2, 0.5)\nUITween.size(mapUIFrameFill, frameSizeEnd, 0.4, 0.25)\ntask.wait(0.25)\nUITween.size(mapUIFrameStroke, frameSizeMid, 0.4, 0)\nUITween.size(mapUIFrameFill, frameSizeMid, 0.4, 0.25)\ntask.wait(0.25)\nUITween.size(mapUIFrameStroke, frameSizeEnd, 0.4, 0)\nUITween.size(mapUIFrameFill, frameSizeEnd, 0.4, 0.25)\n```\n```\n\n----------------------------------------\n\nTITLE: Client-Side Subscription Purchase Prompt (Lua)\nDESCRIPTION: This client-side script handles prompting the user to purchase a subscription. It uses a `RemoteFunction` to check the subscription status, and then uses `MarketplaceService:PromptSubscriptionPurchase` to initiate the purchase. Includes logic to hide a button after a successful purchase and to handle the `PromptSubscriptionPurchaseFinished` event, ensuring the purchase button is correctly hidden after the purchase is complete. Relies on `MarketplaceService`, `Players`, and the `RemoteFunction` created on the server. It requires defining `SUBSCRIPTION_ID` and linking to a button element.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/production/monetization/subscriptions.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\n-- This code should run on the client\nlocal MarketplaceService = game:GetService(\"MarketplaceService\")\nlocal Players = game:GetService(\"Players\")\n\nlocal SUBSCRIPTION_ID = \"EXP-11111111\" -- Replace with your subscription ID\n\nlocal getSubscriptionStatusRemote = ReplicatedStorage:WaitForChild(\"GetSubscriptionStatus\")\nlocal purchaseSubscriptionButton = script.Parent.PromptPurchaseSubscription -- Replace with your button\n\n\nlocal function playerHasSubscription()\n    -- Note if your subscription is replacing a game pass, you will need to check if the game pass is owned here too\n\n\tlocal success, result = pcall(function()\n\t\treturn getSubscriptionStatusRemote:InvokeServer(SUBSCRIPTION_ID)\n\tend)\n\n\tif not success then\n\t\tprint(`Error fetching subscription status: {result}`)\n\t\treturn\n\tend\n\n    return result.IsSubscribed\nend\n\n-- Hides the button if the player already has the subscription\nlocal function hideButtonIfPlayerHasSubscription()\n    if playerHasSubscription() then\n        purchaseSubscriptionButton.Visible = false\n    end\nend\n\nlocal function onPromptSubscriptionPurchaseFinished(player: Player, subscriptionId: string, didTryPurchasing: boolean)\n    if didTryPurchasing then\n        -- It can take a while for the subscription to be registered, so we will check to see if the purchase went through in 10 seconds\n        -- and hide the button if it has\n        task.delay(10, hideButtonIfPlayerHasSubscription)\n    end\nend\n\n-- If the player already has the subscription, we don't want to show the button at all\nhideButtonIfPlayerHasSubscription()\n\npurchaseSubscriptionButton.Activated:Connect(function()\n    MarketplaceService:PromptSubscriptionPurchase(Players.LocalPlayer, SUBSCRIPTION_ID)\n\n    -- If the player already has the subscription, hide the button\n    hideButtonIfPlayerHasSubscription()\nend)\n\nMarketplaceService.PromptSubscriptionPurchaseFinished:Connect(onPromptSubscriptionPurchaseFinished)\n```\n\n----------------------------------------\n\nTITLE: Adding Second Loop for Tower Length - Luau\nDESCRIPTION: Adds a second `for` loop, nested inside the height loop. This loop iterates from 1 up to `TOWER_SIZE`, controlling the position along the length (X-coordinate) for cubes on the current height level. It calculates the `spawnX` position for the current column along the length.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-4/nested-loops.md#_snippet_9\n\nLANGUAGE: Luau\nCODE:\n```\nfor heightIndex = 1, TOWER_SIZE do\n    local spawnY = (heightIndex - 1) * CUBE_SIZE\n\n    for lengthIndex = 1, TOWER_SIZE do\n        local spawnX = lengthIndex * CUBE_SIZE\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Rendering Creator Program Card with Status: Open Using Material-UI in React (JavaScript/JSX)\nDESCRIPTION: This snippet shows the implementation of a creator program card set to 'Status: Open' using Material-UI React components. It requires '@mui/material' (or '@material-ui/core') for all UI elements such as Grid, Card, CardContent, CardActions, Typography, Chip, and Button, along with React. The card includes a program name, an open status chip, descriptive text, and a navigation button. Expected inputs are the label, href, and general content provided as JSX. The structure and styles conform to a consistent and reusable pattern, supporting different program descriptions and destinations.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/creator-programs/index.md#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Grid item container wrap=\"nowrap\" direction=\"column\">\n  <Card variant=\"filled\" style={{height: \"100%\"}}>\n    <CardContent>\n      <h4>Roblox Research Panel</h4>\n      <figure>\n        <Chip\n          color=\"success\"\n          label=\"Status: Open\"\n          size=\"medium\"\n          variant=\"filled\"\n        />\n      </figure>\n      <Typography variant='body1'>An exclusive program for people to share their opinions to help improve Roblox</Typography>\n    </CardContent>\n    <CardActions>\n      <Button href=\"/creator-programs/research-panel\" variant=\"contained\" color=\"secondary\" size=\"large\">Learn More</Button>\n    </CardActions>\n  </Card>\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Illustrating Selection with Conditional Logic in Lua\nDESCRIPTION: This snippet demonstrates the selection methodology of algorithms using a conditional 'if' statement in Lua. It shows how a variable's value ('stopLightColor') is determined based on the state of another variable ('time'). This is a simple example of decision-making within an algorithm.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-6/coding-concept-algorithms.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nif time == 0 then\n\tstopLightColor = red\nend\n```\n\n----------------------------------------\n\nTITLE: Building a Tower with Fading Transparency (Lua)\nDESCRIPTION: This code snippet demonstrates how to create a tower of cubes using nested loops in Roblox. It initializes cube properties such as size, color, and position, and dynamically adjusts the transparency of each cube based on its position in the tower, creating a fading effect from left to right.  It requires that the parts be automatically created in the workspace.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-4/nested-loops.md#_snippet_12\n\nLANGUAGE: lua\nCODE:\n```\nlocal TOWER_SIZE = 6\nlocal CUBE_SIZE = 2\n\n-- Creates individual cubes\nlocal function makeCube(spawnX, spawnY, spawnZ)\n    local cube = Instance.new(\"Part\")\n    cube.Size = Vector3.new(CUBE_SIZE, CUBE_SIZE, CUBE_SIZE)\n    cube.Color = currentColor\n    cube.Transparency = cubeTransparency -- Sets transparency\n    cube.CFrame = CFrame.new(spawnX, spawnY, spawnZ)\n    cube.Parent = workspace\nend\n\n-- Builds tower\nfor heightIndex = 1, TOWER_SIZE do\n    local spawnY = (heightIndex - 1) * CUBE_SIZE\n    currentColor = Color3.fromRGB(math.random(0, 255), math.random(0, 255), math.random(0, 255))\n\n    for lengthIndex = 1, TOWER_SIZE do\n        local spawnX = lengthIndex * CUBE_SIZE\n\t\tcubeTransparency = (lengthIndex - 1) * 0.10 --Updates every loop starting at 0\n\n        for widthIndex = 1, TOWER_SIZE do\n            local spawnZ = widthIndex * CUBE_SIZE\n            makeCube(spawnX, spawnY, spawnZ)\n            task.wait(0.05)\n        end\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Connecting Changed Events in DisplayManager (Lua)\nDESCRIPTION: Connects the `updateRoundStatus` function to the `Changed` event of both `playersLeft` and `timeLeft` IntValues. This ensures the status display updates automatically whenever either value changes. Also defines the `DisplayManager.updateStatus` function for direct status updates.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/battle-royale-series/creating-a-gui.md#_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\n-- Module Functions\nfunction DisplayManager.updateStatus(newStatus)\n\tstatus.Value = newStatus\nend\n\nplayersLeft.Changed:Connect(updateRoundStatus)\ntimeLeft.Changed:Connect(updateRoundStatus)\n\nreturn DisplayManager\n```\n\n----------------------------------------\n\nTITLE: Constructing invite options targeting a specific friend in Roblox Lua\nDESCRIPTION: This snippet shows how to create an ExperienceInviteOptions object targeting a specific friend by their UserId, along with a customized prompt message. The inviteOptions.InviteUser property is set to the friend's UserId to directly invite them instead of presenting a selection list. This snippet also requires SocialService and Players services and is suitable for use within a LocalScript environment.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/production/promotion/invite-prompts.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nlocal SocialService = game:GetService(\"SocialService\")\nlocal Players = game:GetService(\"Players\")\n\nlocal player = Players.LocalPlayer\nlocal receiverUserID = 505306092\n\n-- Construct invite options with friend's user ID and a custom prompt message\nlocal inviteOptions = Instance.new(\"ExperienceInviteOptions\")\ninviteOptions.InviteUser = receiverUserID\ninviteOptions.PromptMessage = \"Invite this friend to join the adventure!\"\n```\n\n----------------------------------------\n\nTITLE: Prompting specific friend invite after capability check in Roblox Lua\nDESCRIPTION: This snippet shows how to prompt an invite to a specific friend by their UserId after verifying that the player can send the invite. It uses a similar protected call wrapper around SocialService:CanSendGameInviteAsync passing the receiver's UserId to check permissions. Upon success, it calls SocialService:PromptGameInvite with both the player and the inviteOptions object specifying the targeted friend. This thorough check ensures invites are only attempted when allowed by the platform or network state.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/production/promotion/invite-prompts.md#_snippet_4\n\nLANGUAGE: Lua\nCODE:\n```\nlocal SocialService = game:GetService(\"SocialService\")\nlocal Players = game:GetService(\"Players\")\n\nlocal player = Players.LocalPlayer\nlocal receiverUserID = 505306092\n\n-- Construct invite options with friend's user ID\nlocal inviteOptions = Instance.new(\"ExperienceInviteOptions\")\ninviteOptions.InviteUser = receiverUserID\n\n-- Function to check whether the player can send an invite\nlocal function canSendGameInvite(sendingPlayer)\n\tlocal success, canSend = pcall(function()\n\t\treturn SocialService:CanSendGameInviteAsync(sendingPlayer, receiverUserID)\n\tend)\n\treturn success and canSend\nend\n\nlocal canInvite = canSendGameInvite(player)\nif canInvite then\n\tSocialService:PromptGameInvite(player, inviteOptions)\nend\n```\n\n----------------------------------------\n\nTITLE: Completed MatchManager Module Script (Lua)\nDESCRIPTION: The final `MatchManager` module script. It handles game preparation (`prepareGame`), starts the match timer (`startTimer`), updates the `timeLeft` value continuously during the match, and manages match-related events (`MatchStart`, `MatchEnd`). It relies on `PlayerManager`, `GameSettings`, and a `Timer` module.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/battle-royale-series/creating-a-gui.md#_snippet_13\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\n-- Module Scripts\nlocal moduleScripts = ServerStorage:WaitForChild(\"ModuleScripts\")\nlocal playerManager = require(moduleScripts:WaitForChild(\"PlayerManager\"))\nlocal gameSettings = require(moduleScripts:WaitForChild(\"GameSettings\"))\nlocal timer = require(moduleScripts:WaitForChild(\"Timer\"))\n\n-- Events\nlocal events = ServerStorage:WaitForChild(\"Events\")\nlocal matchStart = events:WaitForChild(\"MatchStart\")\nlocal matchEnd = events:WaitForChild(\"MatchEnd\")\n\n-- Values\nlocal displayValues = ReplicatedStorage:WaitForChild(\"DisplayValues\")\nlocal timeLeft = displayValues:WaitForChild(\"TimeLeft\")\n\nlocal myTimer = timer.new()\n\n-- Local Functions\nlocal function timeUp()\n\tprint(\"Time is up!\")\nend\n\nlocal function startTimer()\n\tprint(\"Timer started\")\n\tmyTimer:start(gameSettings.matchDuration)\n\tmyTimer.finished:Connect(timeUp)\n\n\twhile myTimer:isRunning() do\n\t\t-- Adding +1 makes sure the timer display ends at 1 instead of 0.\n\t\ttimeLeft.Value = (myTimer:getTimeLeft() + 1) // 1\n\t\t-- By not setting the time for wait, it offers more accurate looping\n\t\ttask.wait()\n\tend\nend\n\n-- Module Functions\nfunction MatchManager.prepareGame()\n\tplayerManager.sendPlayersToMatch()\n\tmatchStart:Fire()\nend\n\nmatchStart.Event:Connect(startTimer)\n\nreturn MatchManager\n```\n\n----------------------------------------\n\nTITLE: Using Single-line Comments in Luau\nDESCRIPTION: This Luau code snippet demonstrates the use of single-line comments, which begin with `--`. These comments are ignored by the Luau parser during runtime. Single-line comments are used for in-line notes to explain the code's functionality. The example includes a comment explaining a conditional statement.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/comments.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- This condition is really important because the world would blow up if it\n-- were missing.\nif not foo then\n\tstopWorldFromBlowingUp()\nend\n```\n\n----------------------------------------\n\nTITLE: Displaying Developer Share Percentage (DevEx) using JSX Grid and Chip\nDESCRIPTION: This JSX snippet uses Grid and Chip components (likely from Material UI) to visually represent the 25% share allocated to developers through the Developer Exchange program. It displays the percentage value in one chip and the corresponding label in another, arranged within a grid layout.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/production/earn-on-roblox.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Grid container spacing={1}>\n<Grid item XSmall={2}>\n<Chip label=\"25%\" size=\"large\" style={{backgroundColor:\"#00a2ff\",color:\"white\",fontSize:\"120%\",width:\"100%\"}} />\n</Grid>\n<Grid item XSmall={10}>\n<Chip label=\"Developer share – Developer Exchange\" size=\"large\" color=\"primary\" variant=\"outlined\" style={{fontSize:\"105%\"}}/>\n</Grid>\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Referral Event Handling - Roblox Lua\nDESCRIPTION: This server-side script sets up the basic structure for handling player joins and identifying referrals. It retrieves necessary services (`Players`, `ReplicatedStorage`), finds or defines a `RemoteEvent` for client communication, and connects a handler function to `Players.PlayerAdded`. The handler checks if the joining player was referred (`ReferredByPlayerId` is valid) and fires the `RemoteEvent` to the client; comments indicate where server-side reward functions would be called.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/production/promotion/referral-system.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\n-- Create or get the RemoteEvent for handling referrals\nlocal referrerEvent: RemoteEvent = ReplicatedStorage:FindFirstChild(\"ReferralReceivedEvent\")\n\n-- Function that triggers when a player joins\nfunction onPlayerAdded(player)\n    local joinData = player:GetJoinData()\n    local referredByPlayerId = joinData.ReferredByPlayerId\n\n    -- Check if the player was invited through a referral\n    if referredByPlayerId and referredByPlayerId ~= 0 then\n        -- Fire the referral event to the client, passing the inviter's ID\n        referrerEvent:FireClient(player, referredByPlayerId)\n\n        -- Additional logic for rewarding inviter and invitee can be added here\n        -- e.g., rewardReferrer(referredByPlayerId)\n        -- e.g., rewardInvitee(player)\n    end\nend\n\n-- Connect the function to the PlayerAdded event\nPlayers.PlayerAdded:Connect(onPlayerAdded)\n```\n\n----------------------------------------\n\nTITLE: Defining the coin touch event handler in Roblox Lua\nDESCRIPTION: This Lua function handles the event when a player touches a coin. It checks if the coin is enabled, verifies if a player touched it, then sets the coin's transparency to invisible, disables further collection for 10 seconds, and then restores the coin's visibility after the cooldown.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/core/scripting/script-game-behavior.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nlocal function onCoinTouched(otherPart, coin)\n\tif coin:GetAttribute(\"Enabled\") then\n\t\tlocal character = otherPart.Parent\n\t\tlocal player = Players:GetPlayerFromCharacter(character)\n\t\tif player then\n\t\t\t-- Player touched a coin\n\t\t\tcoin.Transparency = 1\n\t\t\tcoin:SetAttribute(\"Enabled\", false)\n\t\t\tprint(\"Player collected coin\")\n\t\t\ttask.wait(COOLDOWN)\n\t\t\tcoin.Transparency = 0\n\t\t\tcoin:SetAttribute(\"Enabled\", true)\n\t\tend\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing a Countdown Timer with Luau for Loop\nDESCRIPTION: Demonstrates a practical 'for' loop that counts down from 10 to 0. In each iteration, it prints the current value of the 'count' variable and pauses for 1 second using 'task.wait(1)'. This creates a visible countdown effect in the output.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-4/intro-to-for-loops.md#_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nfor count = 10, 0, -1 do\n\t-- Prints the current number the for loop is on\n\tprint(count)\n\t-- Wait 1 second\n\ttask.wait(1)\nend\n```\n\n----------------------------------------\n\nTITLE: DataStore Class Definition in Python\nDESCRIPTION: Defines a DataStores class in Python for interacting with the Roblox DataStore API. It initializes the base URL, API key (retrieved from an environment variable), and other necessary parameters. The class includes methods for retrieving, listing, and incrementing data store entries using the `requests` library.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/guides/usage-data-stores.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport hashlib\nimport requests\nimport json\nimport base64\n\nclass DataStores:\n\n    def __init__(self):\n        self._base_url = \"https://apis.roblox.com/datastores/v1/universes/{universeId}\"\n        # API Key is saved in an environment variable signified by 'API_KEY'\n        self._apiKey = str(os.environ['API_KEY'])\n        self._universeId = \"UNIVERSE_ID\"\n        self.ATTR_HDR = 'Roblox-entry-Attributes'\n        self.USER_ID_HDR = 'Roblox-entry-UserIds'\n        self._objects_url = self._base_url +self._universeId+'/standard-datastores/datastore/entries/entry'\n        self._increment_url = self._objects_url + '/increment'\n        self._version_url = self._objects_url + '/versions/version'\n        self._list_objects_url = self._base_url +self._universeId+'/standard-datastores/datastore/entries'\n\n    def _H(self):\n        return { 'x-api-key' : self._apiKey }\n    def _get_url(self, path_format: str):\n        return f\"{self._config['base_url']}/{path_format.format(self._config['universe_id'])}\"\n\n        return r, attributes, user_ids\n\ndef get_entry(self, datastore, object_key, scope = None):\n        self._objects_url = self._base_url +self._universeId+'/standard-datastores/datastore/entries/entry'\n        headers = { 'x-api-key' : self._apiKey }\n        params={\"datastoreName\" : datastore, \"entryKey\" : object_key}\n        if scope:\n            params[\"scope\"] = scope\n        r = requests.get(self._objects_url, headers=headers, params=params)\n        if 'Content-MD5' in r.headers:\n            expected_checksum = r.headers['Content-MD5']\n            checksum = base64.b64encode(hashlib.md5(r.content).digest())\n            #print(f'Expected {expected_checksum}, got {checksum}')\n\n        attributes = None\n        if self.ATTR_HDR in r.headers:\n            attributes = json.loads(r.headers[self.ATTR_HDR])\n        user_ids = []\n        if self.USER_ID_HDR in r.headers:\n            user_ids = json.loads(r.headers[self.USER_ID_HDR])\n\n        return r\n\n    def list_entries(self, datastore, scope = None, prefix=\"\", limit=100, allScopes = False, exclusive_start_key=None):\n        self._objects_url = self._base_url +self._universeId+'/standard-datastores/datastore/entries'\n        headers = { 'x-api-key' : self._apiKey }\n        r = requests.get(self._objects_url, headers=headers, params={\"datastoreName\" : datastore, \"scope\" : scope, \"allScopes\" : allScopes, \"prefix\" : prefix, \"limit\" : 100, \"cursor\" : exclusive_start_key})\n        return r\n\n    def increment_entry(self, datastore, object_key, incrementBy, scope = None, attributes=None, user_ids=None):\n        self._objects_url = self._base_url +self._universeId+'/standard-datastores/datastore/entries/entry/increment'\n        headers = { 'x-api-key' : self._apiKey, 'Content-Type': 'application/octet-stream' }\n        params={\"datastoreName\" : datastore, \"entryKey\" : object_key, \"incrementBy\" : incrementBy}\n        if scope:\n            params[\"scope\"] = scope\n\n        r = requests.post(self._objects_url, headers=headers, params=params)\n        attributes = None\n        if self.ATTR_HDR in r.headers:\n            attributes = json.loads(r.headers[self.ATTR_HDR])\n        user_ids = []\n        if self.USER_ID_HDR in r.headers:\n            user_ids = json.loads(r.headers[self.USER_ID_HDR])\n\n        return r\n```\n\n----------------------------------------\n\nTITLE: Constructing an OAuth 2.0 Authorization URL for Messaging Scope\nDESCRIPTION: Provides an example structure for an OAuth 2.0 authorization URL (`https://authorize.roblox.com`) requesting user consent. It includes the `universe-messaging-service:publish` scope, along with `openid`, client ID, redirect URI, response type, prompts, nonce, and state parameters, necessary for initiating the OAuth 2.0 flow for applications needing to publish messages on behalf of users.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/guides/usage-messaging.md#_snippet_2\n\nLANGUAGE: plain\nCODE:\n```\nhttps://authorize.roblox.com?client_id=816547628409595165403873012&redirect_uri=https://my-app.com/redirect&scope=openid+universe-messaging-service:publish&response_type=Code&prompts=login+consent&nonce=12345&state=6789\n```\n\n----------------------------------------\n\nTITLE: Filtering by Numeric Property Greater Than\nDESCRIPTION: Finds all `Humanoid` instances where the `Health` property value is greater than 50. Uses the `>` operator for numerical comparison.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/studio/explorer.md#_snippet_2\n\nLANGUAGE: RobloxSearchQuery\nCODE:\n```\nHealth > 50\n```\n\n----------------------------------------\n\nTITLE: Implementing stopTimer and timeUp Functions with Custom Timer - Lua\nDESCRIPTION: Defines functions for halting the custom timer and broadcasting match end events based on time. Initializes a new timer object and ensures timer control is modular for use in different match states. Dependencies include a timer module providing 'new', 'start', 'stop', 'isRunning', and event 'finished'. Expects a 'matchEnd' event and gameSettings state definitions.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/battle-royale-series/ending-matches.md#_snippet_11\n\nLANGUAGE: lua\nCODE:\n```\n-- Creates a new timer object to be used to keep track of match time.\nlocal myTimer = timer.new()\n\n-- Local Functions\nlocal function stopTimer()\n\tmyTimer:stop()\nend\n\nlocal function timeUp()\n\tmatchEnd:Fire(gameSettings.endStates.TimerUp)\nend\n```\n\n----------------------------------------\n\nTITLE: Inserting Line Breaks in Strings in Roblox Lua\nDESCRIPTION: This snippet demonstrates including named and repeated line breaks within a string using '\\n' for formatted multi-line output, useful for display purposes in games. No special dependencies; the input is a string literal and the output is a multi-line string as rendered.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/build-it-play-it-story-games/finish-and-add.md#_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\n\"One \\n Two \\n\\n Three\"\n```\n\n----------------------------------------\n\nTITLE: Handling Invalid TextureID Usage Error\nDESCRIPTION: This error occurs when an invalid `TextureID` is used in the mesh (`%s`). Ensure the specified texture asset exists, is accessible, and the ID is correct.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/validation-errors.md#_snippet_8\n\nLANGUAGE: Text\nCODE:\n```\nInvalid textureID used in mesh `%s`. Make sure the texture exists and try again.\n```\n\n----------------------------------------\n\nTITLE: Initializing Blaster Selector GUI Controller (Lua)\nDESCRIPTION: This Lua script initializes the 'PickABlasterGui' for the local player upon joining or respawning. It requires 'GuiAttribute', 'setupBlasterButtons', and 'connectResetSelectionOnEnabled' modules from ReplicatedStorage. The script retrieves necessary services, locates the player's GUI, calls functions to set up buttons and reset selection logic, and sets an initial 'selectedIndex' attribute on the GUI.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/user-interface-design/implement-designs-in-studio.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal GuiAttribute = require(ReplicatedStorage.GuiAttribute)\nlocal setupBlasterButtons = require(script.setupBlasterButtons)\nlocal connectResetSelectionOnEnabled = require(script.connectResetSelectionOnEnabled)\n\nlocal localPlayer = Players.LocalPlayer\nlocal gui = localPlayer.PlayerGui:WaitForChild(\"PickABlasterGui\")\n\nsetupBlasterButtons(gui)\nconnectResetSelectionOnEnabled(gui)\ngui:SetAttribute(GuiAttribute.selectedIndex, 1)\n```\n\n----------------------------------------\n\nTITLE: Finalizing Nested Loops for Colored Tower Building - Luau\nDESCRIPTION: Presents the complete nested loop structure for building the colored cube tower. The outermost loop controls height, the middle controls length, and the innermost controls width. A random color is generated using `Color3.fromRGB(math.random(0, 255), ...)` at the beginning of each outer loop iteration, ensuring each horizontal layer has a different color. The `makeCube()` function is called for each position, and `task.wait(0.25)` delays each cube placement.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-4/nested-loops.md#_snippet_11\n\nLANGUAGE: Luau\nCODE:\n```\nfor heightIndex = 1, TOWER_SIZE do\n    local spawnY = (heightIndex - 1) * CUBE_SIZE\n    currentColor = Color3.fromRGB(math.random(0, 255), math.random(0, 255), math.random(0, 255))\n    for lengthIndex = 1, TOWER_SIZE do\n        local spawnX = lengthIndex * CUBE_SIZE\n        for widthIndex = 1, TOWER_SIZE do\n            local spawnZ = widthIndex * CUBE_SIZE\n            makeCube(spawnX, spawnY, spawnZ)\n            task.wait(0.25)\n        end\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Server-Side Hit Validation Function in Roblox Lua\nDESCRIPTION: This snippet outlines the definition of isHitValid, which takes playerFired, characterToDamage, and hitPosition as parameters. It serves as a placeholder for implementing checks to validate incoming shot data for security. Dependencies: Must be called from trusted server functions and receive valid arguments.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/scripting/intermediate-scripting/hit-detection-with-lasers.md#_snippet_26\n\nLANGUAGE: Lua\nCODE:\n```\nend\n\nlocal function isHitValid(playerFired, characterToDamage, hitPosition)\n\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring SpotLight for Desk Lamp in Roblox (Lua)\nDESCRIPTION: This snippet describes how to insert and configure a SpotLight into the desk lamp's hood to produce directional white light with customizable angle, brightness, color, and shadow casting. It specifies setting the face, angle, brightness, color, range, and enabling shadows to simulate real-world lamp behavior.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/lighting/enhance-indoor-environments.md#_snippet_6\n\nLANGUAGE: Lua\nCODE:\n```\nlocal spotLight = Instance.new(\"SpotLight\")\nspotLight.Face = \"Bottom\"\nspotLight.Angle = 140\nspotLight.Brightness = 4\nspotLight.Color = Color3.new(1, 0.933, 0.792)\nspotLight.Range = 12\nspotLight.Shadows = true\nspotLight.Parent = lampHood\n```\n\n----------------------------------------\n\nTITLE: Configuring SeaStackMesh in Level_3a - Roblox Properties Table\nDESCRIPTION: Specifies the Size, CFrame.Position, and CFrame.Orientation properties for three instances of the SeaStackMesh asset placed within the Level_3a model to replicate the sample experience geometry. These properties are applied in the Roblox Studio Properties window after pasting the mesh.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/core/building/apply-polished-assets.md#_snippet_0\n\nLANGUAGE: Roblox Properties Table\nCODE:\n```\nSize\tCFrame.Position\tCFrame.Orientation\n`31, 31, 34`\t`31, 14, 15.5`\t`0, 72, 0`\n`32, 37, 34`\t`39, 11, 6`\t`0, 162, 0`\n`32, 36, 34`\t`31, 13, 7.5`\t`0, 68, 0`\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Team-Based Spawn Validation in Roblox Lua\nDESCRIPTION: This Lua script sets up a custom pre-teleportation check for the SpawnWithFriends module. It defines a validator function that takes the player being teleported, the destination player, and the teleportation point as arguments. The function returns `true` only if both the `playerToTeleport` and `destinationPlayer` are on the same team (`playerToTeleport.Team == destinationPlayer.Team`), ensuring friends only spawn near teammates. This validator is then registered with the module using `SpawnWithFriends.setTeleportationValidator`.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/spawn-with-friends.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal SpawnWithFriends = require(ReplicatedStorage:WaitForChild(\"SpawnWithFriends\"))\n\n-- Teleports players only if they are on the same team\nlocal function validator(playerToTeleport, destinationPlayer, teleportationPoint)\n\treturn playerToTeleport.Team == destinationPlayer.Team\nend\n\nSpawnWithFriends.setTeleportationValidator(validator)\n```\n\n----------------------------------------\n\nTITLE: MatchManager Script - Roblox\nDESCRIPTION: This Lua script defines the MatchManager module which contains a function to prepare the game. It initializes a table and defines a function called `prepareGame()` that prints a message to the output to indicate the game has started. It is used within the GameManager script to set up the game.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/battle-royale-series/coding-the-game-loop.md#_snippet_13\n\nLANGUAGE: lua\nCODE:\n```\nlocal MatchManager = {}\n\nfunction MatchManager.prepareGame()\n\tprint(\"Game starting!\")\nend\n\nreturn MatchManager\n```\n\n----------------------------------------\n\nTITLE: Implementing infinite platform toggling loop with delay in Luau\nDESCRIPTION: This code creates a 'while true' loop that alternates the platform's appearance state every 3 seconds using 'task.wait()' calls, enabling continuous appearance and disappearance cycles.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/scripting/basic-scripting/intro-to-scripting.md#_snippet_3\n\nLANGUAGE: Luau\nCODE:\n```\nwhile true do\n   task.wait(3)\n   disappear()\n   task.wait(3)\n   appear()\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Bundle Item using DevProduct - Lua\nDESCRIPTION: This code snippet shows how to define a bundle item using a developer product.  It sets the itemType to DevProduct and specifies the devProductId. The item's price and other details will be fetched from the developer product information. A metadata caption is included for UI display. Dependencies: Requires `ItemTypes` from `ReplicatedStorage.Bundles.Configs.Types`\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/feature-packages/bundles.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\n    {\n        itemType = ItemTypes.ItemType.DevProduct,\n        devProductId = <DEV_PRODUCT_ID>,\n        metadata = {\n            caption = {\n                text = \"x1\",\n                color = Color3.fromRGB(236, 201, 74),\n            } -- Caption is optional! You can also omit this field\n        }\n    },\n```\n\n----------------------------------------\n\nTITLE: Loading Appropriate Animation Map Based on Experience Ownership in Roblox Lua\nDESCRIPTION: This Lua module script dynamically selects between user-owned and group-owned animation maps based on the experience's creator type and ID at runtime in Roblox Studio. It requires two child modules representing animations owned by the individual user and the group owner, respectively. The main module defines a function that checks if the experience is currently owned by the specified group, then returns the corresponding animation map. The exposed 'getAnimation' function takes an animation name as input and returns the applicable animation asset ID. This implementation prevents animation breakage when publishing the experience to varying ownership, supporting seamless animation ID swapping.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/projects/transfer-animations.md#_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nlocal module = {}\nlocal GROUP_ID = 12345678\nlocal gameContext = {\n\t[\"User\"] = require(script:WaitForChild(\"Animations_User\")),\n\t[\"Group\"] = require(script:WaitForChild(\"Animations_Group\"))\n}\n\nlocal function getAnimationMapForGameContext()\n\tif game.CreatorType == Enum.CreatorType.Group and game.CreatorId == GROUP_ID then\n\t\treturn gameContext.Group\n\tend\n\treturn gameContext.User\nend\n\nlocal animationMap = getAnimationMapForGameContext()\nfunction module.getAnimation(animName: string)\n\treturn animationMap[animName]\nend\n\nreturn module\n```\n\n----------------------------------------\n\nTITLE: Adding Passes to MerchBooth Store with Type Specification (Lua)\nDESCRIPTION: Adds game passes to the MerchBooth catalog using their pass IDs and specifies the item type as GamePass using Enum.InfoType.GamePass. The Script should be placed in ServerScriptService and retrieves the MerchBooth module from ReplicatedStorage. For each pass ID, addItemAsync is invoked with the type argument. Proper for bulk addition and error-handled with pcall. IDs must be numeric and provided in the items table; sorting is handled separately if needed.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/merch-booth.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal MerchBooth = require(ReplicatedStorage:WaitForChild(\"MerchBooth\"))\n\nlocal items = {\n\t4343758, -- ColdFyre Armor\n\t28521575, -- Slime Shield\n}\n\nfor _, assetId in items do\n\tlocal success, errorMessage = pcall(function()\n\t\tMerchBooth.addItemAsync(assetId, Enum.InfoType.GamePass)\n\tend)\n\tif not success then\n\t\twarn(errorMessage)\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Preventing Further Finishes Luau\nDESCRIPTION: This code modifies the finish function to set `raceActive` to `false` after the finish has been triggered to prevent further calls.  This snippet ensures the finish function isn't repeatedly called after a player touches the finish line.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-3/multiple-conditions.md#_snippet_7\n\nLANGUAGE: Luau\nCODE:\n```\nlocal function finish()\n   print(\"touched the finish line\")\n   raceActive = false\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Foreman Tool Management in TOML\nDESCRIPTION: Defines Rojo and Wally tool versions using Foreman's `foreman.toml` configuration file. This allows consistent installation and management of development tools across a team by specifying the GitHub repository and desired version for each tool. Foreman uses this file to install or update the specified tools.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/projects/external-tools.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[tools]\nrojo = { github = \"rojo-rbx/rojo\", version = \"7.4.1\" }\nwally = { github = \"UpliftGames/wally\", version = \"0.3.2\" }\n```\n\n----------------------------------------\n\nTITLE: Using `__unm` Metamethod for Table Negation in Lua\nDESCRIPTION: Demonstrates implementing the `__unm` metamethod to define the behavior of the unary minus operator (`-`) on a table. The example iterates through the table, negates each numeric value, and returns a new table with the negated values.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/metatables.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal metatable = {\n\t__unm = function(t) -- __unm is for the unary - operator\n    local negated = {}\n  \tfor key, value in t do\n  \t\tnegated[key] = -value -- negate all of the values in this table\n  \tend\n  \treturn negated -- return the table\n\tend\n}\n\nlocal table1 = setmetatable({10, 11, 12}, metatable)\nprint(table.concat(-table1, \"; \")) --> -10; -11; -12\n```\n\n----------------------------------------\n\nTITLE: Checking Local Player Eligibility to Blast in Roblox (Lua)\nDESCRIPTION: This function verifies if the local player can trigger a blaster shot by checking the blasterStateClient attribute against the BlasterState.Ready constant. Dependencies include the Player object, PlayerAttribute, and BlasterState enums or tables. The function returns a boolean indicating eligibility. Inputs: none. Outputs: true if the player is ready, false otherwise. It should be restored to its original logic after experimenting; always returning true bypasses cooldown mechanics and player state checks.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/gameplay-scripting/implement-blasters.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal function canLocalPlayerBlast(): boolean\n    return localPlayer:GetAttribute(PlayerAttribute.blasterStateClient) == BlasterState.Ready\nend\n```\n\n----------------------------------------\n\nTITLE: Example Authorization Request URL for Roblox OAuth 2.0\nDESCRIPTION: An example URL demonstrating how to initiate the OAuth 2.0 authorization code flow via the `GET /oauth/v1/authorize` endpoint. It includes required parameters like `client_id`, `redirect_uri`, `scope`, `response_type`, and optional parameters like `nonce` and `state`. Users are directed to this URL to grant permissions.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/auth/oauth2-reference.md#_snippet_2\n\nLANGUAGE: plain\nCODE:\n```\nhttps://apis.roblox.com/oauth/v1/authorize?client_id=816547628409595165403873012&redirect_uri=https://my-app.com/redirect&scope=openid&response_type=code&nonce=12345&state=6789\n```\n\n----------------------------------------\n\nTITLE: Scripting Cyclical Wind Gusts in Roblox\nDESCRIPTION: This Lua script demonstrates how to create cyclical wind gusts in Roblox by manipulating the `Workspace.GlobalWind` property.  It uses the `math.sin()` function to smoothly ramp the wind strength up and down, creating a gust effect.  The script requires the `Workspace` service and the `task` library.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/environment/global-wind.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal gustCycleDelay = 5  -- Max duration between gust cycles in seconds\nlocal gustCycleDuration = 3.5  -- Duration of each gust cycle in seconds\n\n-- During each gust cycle, a portion of \"gust\" will be added to \"baseWind\" in a ramped fashion\nlocal baseWind = Vector3.new(5, 0, 2)  -- Base wind speed and direction\nlocal gust = Vector3.new(25, 0, 10)  -- Gust speed and direction\nlocal gustIntervals = 100  -- Number of iterations used to calculate each gust interval\nlocal dg = gustCycleDuration / gustIntervals\nlocal dgf = dg / gustCycleDuration\n\n-- Set global wind to base wind initially\nworkspace.GlobalWind = baseWind\n\n-- Wait delay amount before starting gusts\ntask.wait(gustCycleDelay)\n\nwhile true do\n\tfor i = 1, gustIntervals do\n\t\tlocal f = math.sin(math.pi * dgf * i)  -- Use sin() function to ramp gust\n\t\tworkspace.GlobalWind = baseWind + f * gust  -- Set global wind to base wind + gust\n\t\ttask.wait(dg)\n\tend\n\tworkspace.GlobalWind = baseWind  -- Reset global wind to base wind at end of gust cycle\n\ttask.wait(math.random() * gustCycleDelay)  -- Wait a random fraction of delay before next gust cycle\nend\n```\n\n----------------------------------------\n\nTITLE: LocalScript - Invite Specific Friend with Launch Data in Roblox Lua\nDESCRIPTION: This script prepares an experience invite targeting a specific friend using their UserID and includes launch data such as sender ID and spawn location, encoded as JSON. It checks permission to send the invite, then prompts the invite with the specified friend's user ID and launch data. Dependencies are Roblox's HttpService, SocialService, and Players. The key parameters are the friend's user ID and launch data, affecting invite delivery and personalization.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/production/promotion/invite-prompts.md#_snippet_6\n\nLANGUAGE: Lua\nCODE:\n```\nlocal HttpService = game:GetService(\"HttpService\")\nlocal SocialService = game:GetService(\"SocialService\")\nlocal Players = game:GetService(\"Players\")\n\nlocal player = Players.LocalPlayer\nlocal receiverUserID = 505306092\n\nlocal data = {\n\tsenderUserID = player.UserId,\n\tspawnLocation = {12, 48, 205.5}\n}\n\nlocal launchData = HttpService:JSONEncode(data)\n\n-- Construct invite options with friend's user ID and launch data\nlocal inviteOptions = Instance.new(\"ExperienceInviteOptions\")\ninviteOptions.InviteUser = receiverUserID\ninviteOptions.LaunchData = launchData\n\n-- Function to check whether the player can send an invite\nlocal function canSendGameInvite(sendingPlayer)\n\tlocal success, canSend = pcall(function()\n\t\treturn SocialService:CanSendGameInviteAsync(sendingPlayer, receiverUserID)\n\tend)\n\treturn success and canSend\nend\n\nlocal canInvite = canSendGameInvite(player)\nif canInvite then\n\tSocialService:PromptGameInvite(player, inviteOptions)\nend\n```\n\n----------------------------------------\n\nTITLE: Executing Plugin Actions on Toolbar Button Click in Roblox Studio\nDESCRIPTION: Sample code for connecting plugin toolbar button clicks to functions that perform actions, such as creating scripts or modifying selections. The event handler `onNewScriptButtonClicked()` demonstrates binding UI actions to core plugin behaviors, enabling interactive plugin development.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/studio/plugins.md#_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Configuring Right Combat Pocket Parts in Roblox Studio\nDESCRIPTION: Lists the specific Size and CFrame.Position values for the block Parts required to replicate the right combat pocket geometry from the sample 'Environment Art - Greyboxing' place file. This pocket is designed to be symmetrical to the left combat pocket.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/environmental-art/greybox-your-environment.md#_snippet_5\n\nLANGUAGE: Roblox Studio Properties\nCODE:\n```\nPart: Top hallway extension\nSize: 10, 15, 15\nCFrame.Position: -100, 12.5, 47.5\n\nPart: Top doorway, left wall\nSize: 5, 15, 20\nCFrame.Position: -92.5, 12.5, 85\n\nPart: Top doorway, overhang\nSize: 5, 5, 10\nCFrame.Position: -92.5, 17.5, 70\n\nPart: Top doorway, right wall\nSize: 5, 15, 15\nCFrame.Position: -92.5, 12.5, 57.5\n\nPart: Left doorway, top wall\nSize: 15, 15, 10\nCFrame.Position: -82.5, 12.5, 90\n\nPart: Left doorway, overhang\nSize: 10, 5, 10\nCFrame.Position: -70, 17.5, 90\n\nPart: Left doorway, bottom wall\nSize: 20, 15, 10\nCFrame.Position: -55, 12.5, 90\n\nPart: Right doorway, top wall\nSize: 20, 15, 5\nCFrame.Position: -85, 12.5, 47.5\n\nPart: Right doorway, overhang\nSize: 10, 5, 5\nCFrame.Position: -70, 17.5, 47.5\n\nPart: Right doorway, bottom wall\nSize: 20, 15, 5\nCFrame.Position: -55, 12.5, 47.5\n```\n\n----------------------------------------\n\nTITLE: Navigating UIPageLayout Pages Programmatically in Lua\nDESCRIPTION: Demonstrates how to transition between pages within a `UIPageLayout` using the `Next()` and `Previous()` methods in a client-side Lua script. This script should be placed as a sibling to the `UIPageLayout` object within a UI container (e.g., a Frame). It sequentially calls `Next()` twice and then `Previous()` twice with a 2-second delay between each transition.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/ui/page-layouts.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal frame = script.Parent\n\nlocal pageLayout = frame:FindFirstChildWhichIsA(\"UIPageLayout\")\n\ntask.wait(2)\npageLayout:Next()\n\ntask.wait(2)\npageLayout:Next()\n\ntask.wait(2)\npageLayout:Previous()\n\ntask.wait(2)\npageLayout:Previous()\n```\n\n----------------------------------------\n\nTITLE: Configuring SeaStackMesh in Level_4d - Roblox Properties Table\nDESCRIPTION: Details the Size, CFrame.Position, and CFrame.Orientation properties for three SeaStackMesh assets required for the Level_4d section of the sample experience. These values are applied in the Roblox Studio Properties window.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/core/building/apply-polished-assets.md#_snippet_6\n\nLANGUAGE: Roblox Properties Table\nCODE:\n```\nSize\tCFrame.Position\tCFrame.Orientation\n`35, 39, 35`\t`198, -4, 108`\t`0, -44, 0`\n`33, 36, 32`\t`199, 21, 108`\t`0, -119, 0`\n`27, 36, 28`\t`199, 48, 108`\t`0, -18, 0`\n```\n\n----------------------------------------\n\nTITLE: Tweening Image Transparency on GuiObject Using TweenService in Lua\nDESCRIPTION: Animates the ImageTransparency property of an ImageLabel, smoothly transitioning its visual opacity to a target transparency (e.g., 0.8). Requires TweenService and Players. The snippet presumes the object supports ImageTransparency, with input as a transparency value between 0 and 1 and output a fade effect.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/ui/animation.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal TweenService = game:GetService(\"TweenService\")\nlocal Players = game:GetService(\"Players\")\n\nlocal PlayerGui = Players.LocalPlayer:WaitForChild(\"PlayerGui\")\nlocal ScreenGui = PlayerGui:WaitForChild(\"ScreenGui\")\nlocal object = ScreenGui:WaitForChild(\"ImageLabel\")\n\nlocal targetTransparency = 0.8\n\nlocal tweenInfo = TweenInfo.new(2)\nlocal tween = TweenService:Create(object, tweenInfo, {ImageTransparency = targetTransparency})\n\ntween:Play()\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Local Variable Shadowing in Luau Function\nDESCRIPTION: Illustrates variable shadowing where a local variable `x` is declared in an outer scope, and a *different* local variable with the same name (`x`) is declared inside a local function (`f`). The inner `x` shadows the outer `x` within the function's scope, but the outer `x` retains its original value after the function call.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/scope.md#_snippet_6\n\nLANGUAGE: Luau\nCODE:\n```\nlocal x = 5\n\nlocal function f()\n\tlocal x = 7\n\tprint(x)\nend\n\nf() -- 7\nprint(x) -- 5\n```\n\n----------------------------------------\n\nTITLE: Categorizing System Messages with Metadata in Roblox Chat\nDESCRIPTION: This snippet shows how to use metadata to categorize different types of system messages and apply consistent styling. It categorizes messages as errors or information and applies different text colors based on the metadata pattern.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/chat/examples/custom-system-messages.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nTextChannel:DisplaySystemMessage(\"This is an error!\", \"Game.Error.Generic\")\nTextChannel:DisplaySystemMessage(\"Could not find save data!\", \"Game.Error.SaveDataNotFound\")\n\nTextChannel:DisplaySystemMessage(\"You won the game!\", \"Game.Info.Win\")\nTextChannel:DisplaySystemMessage(\"You lost the game!\", \"Game.Info.Lose\")\n\nTextChannel.OnIncomingMessage = function(message: TextChatMessage)\n  if string.find(message.Metadata, \"Error\") then\n    local overrideProperties = Instance.new(\"TextChatMessageProperties\")\n    overrideProperties.TextColor = Color3.fromRGB(255, 0, 0)\n    return overrideProperties\n  elseif string.find(message.Metadata, \"Info\") then\n    local overrideProperties = Instance.new(\"TextChatMessageProperties\")\n    overrideProperties.TextColor = Color3.fromRGB(0, 255, 150)\n    return overrideProperties\n  end\n\n  return nil\nend\n```\n\n----------------------------------------\n\nTITLE: Remove All Weapons - PlayerManager (Lua)\nDESCRIPTION: This function iterates through all active players in the game and removes their weapons by calling the `removePlayerWeapon` function. It ensures that all players start each match without any pre-existing weapons, maintaining a balanced gameplay environment. This function is part of the PlayerManager module.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/battle-royale-series/cleanup-and-reset.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nfunction PlayerManager.removeAllWeapons()\n  for playerKey, whichPlayer in activePlayers do\n    removePlayerWeapon(whichPlayer)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Modifying HighPoints Value in GameSettings (Lua)\nDESCRIPTION: This snippet shows the `GameSettings.pointValues` table after the suggested modification has been made. Specifically, the `HighPoints` value has been changed from the default 15 to 150. This demonstrates how a simple variable change in the script can directly impact gameplay mechanics, increasing the points awarded for destroying large buildings.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/build-it-play-it-create-and-destroy/change-the-script.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nGameSettings.pointValues = {\n\t-- Value types must match folder names to award points correctly\n\tLowPoints = 0,\n\tMediumPoints = 10,\n\tHighPoints = 150,\n}\n```\n\n----------------------------------------\n\nTITLE: Copying the _places Table for Reuse Across Places in Roblox - Lua\nDESCRIPTION: This code block provides a self-contained _places table that should be copied and pasted into every MainConfiguration script for each .rbxl place in the Roblox Battle Royale project. All place keys are populated with their corresponding numeric IDs, ensuring that all game locations are consistently cross-referenced. Required for enabling players to teleport between different places; the snippet assumes previous steps for copying place IDs have been completed.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/battle-royale/installation-and-setup.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\n--------------------------------------\n-- List of named places in the game\nlocal _places = {\n\tlobby = 0123456789,\n\tgameplay_development = 0987654321,\n\tqueue_default = 0123459876,\n\tqueue_deathmatch = 0987651234,\n\tqueue_teamDeathmatch = 0132457689,\n\tqueue_freePlay = 0678912345\n}\n--------------------------------------\n```\n\n----------------------------------------\n\nTITLE: Configuring PointLight for Caldera Illumination\nDESCRIPTION: Sets properties for the PointLight attached to the 'LightCaldera' part to illuminate the main caldera area with a bright, dark orange light. This configuration is applied via the Roblox Studio Properties window.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/vfx/create-volcanoes.md#_snippet_0\n\nLANGUAGE: Configuration\nCODE:\n```\nBrightness = 15\nColor = 255, 85, 0\nRange = 60\n```\n\n----------------------------------------\n\nTITLE: Setting Camera Zoom Range in Lua\nDESCRIPTION: This Lua script demonstrates how to programmatically adjust the camera's zoom limits for the local player in a Roblox experience. It retrieves the local player and sets their `CameraMaxZoomDistance` to 25 and `CameraMinZoomDistance` to 50. This allows developers to control the range within which players can zoom the camera around their character, overriding the default settings.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/workspace/camera.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nlocal player = Players.LocalPlayer\n\nplayer.CameraMaxZoomDistance = 25\nplayer.CameraMinZoomDistance = 50\n```\n\n----------------------------------------\n\nTITLE: Setting Point Values for Different Colors in Roblox Luau\nDESCRIPTION: Defines variables that store the amount of points to be awarded or subtracted based on the part's color.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-3/give-points.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\n-- Colors\nlocal blue = Color3.fromRGB(0, 0, 255)\nlocal green = Color3.fromRGB(0, 255, 0)\nlocal red = Color3.fromRGB(255, 0, 0)\n\n-- Points values\nlocal smallPoints = 10\nlocal largePoints = 50\nlocal losePoints = 100\n```\n\n----------------------------------------\n\nTITLE: Example User Information Response JSON\nDESCRIPTION: This JSON snippet shows the expected response body from the user information endpoint (`/v1/userinfo`) after a successful GET request made with a valid access token and required scopes (`openid` or `openid` and `profile`). It provides basic user identification and profile information.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/auth/oauth2-develop.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sub\": \"12345678\",\n  \"name\": \"Jane Doe\",\n  \"nickname\": \"robloxjanedoe\",\n  \"preferred_username\": \"robloxjanedoe\",\n  \"created_at\": 1607354232,\n  \"profile\": \"https://www.roblox.com/users/12345678/profile\"\n}\n```\n\n----------------------------------------\n\nTITLE: Translating Individual Strings with LocalizationService in Lua\nDESCRIPTION: This example illustrates fetching a translated string using the Translator:Translate function within Roblox. It loads a translator for the Spanish locale ('es'), then looks up the translation of the string 'Screen' with context from the 'game' object. Required dependencies are LocalizationService and a populated localization table. The expected input is a valid source string; the output is its translation as defined in the table. The pcall protects against connectivity or translation loading errors.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/production/localization/localize-with-scripting.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal LocalizationService = game:GetService(\"LocalizationService\")\n\n-- Load Translator for \"es\". Wrap the function within a pcall() to protect against failures.\nlocal res, translator = pcall(function()\n\treturn LocalizationService:GetTranslatorForLocaleAsync(\"es\")\nend)\n\nif res then\n\t-- Use Translate function, providing object context and string\n\tlocal sourceTranslation = translator:Translate(game, \"Screen\")\n\tprint(sourceTranslation) -- Expected Output: \"Pantalla\"\nelse\n\tprint('GetTranslatorForPlayerAsync failed: ' .. translator)\nend\n```\n\n----------------------------------------\n\nTITLE: Defining a Dictionary in Luau\nDESCRIPTION: Initializes a Luau dictionary named `house`. This table uses string keys (room names) mapped to string values (contents of the room), serving as sample data for a dictionary search example.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-5/return-values-from-tables.md#_snippet_1\n\nLANGUAGE: Luau\nCODE:\n```\nlocal house = {\n\tkitchen = \"pile of Junk\",\n\tlivingRoom = \"kitten\",\n\tbedroom1 = \"nobody there\",\n\tbedroom2 = \"puppy\",\n}\n```\n\n----------------------------------------\n\nTITLE: Adding and Configuring PointLight for Green Ambient Effect in Roblox (Lua)\nDESCRIPTION: This snippet covers inserting a PointLight into the lamp's fill part to simulate subtle green ambient lighting. It adjusts range and color to produce indirect illumination that enhances realism without overpowering the main light source.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/lighting/enhance-indoor-environments.md#_snippet_7\n\nLANGUAGE: Lua\nCODE:\n```\nlocal pointLight = Instance.new(\"PointLight\")\npointLight.Range = 12\npointLight.Color = Color3.new(0.557, 0.616, 0.495)\npointLight.Parent = fillLightPart\n```\n\n----------------------------------------\n\nTITLE: Defining Brightness Change Parameters\nDESCRIPTION: Creates variables to determine the incremental change of brightness per loop iteration and the wait time between each adjustment. This setup allows easy adjustments to the glow's speed and intensity. Dependencies are minimal, only affecting the timing and step size of the brightness fluctuations.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-4/glow-lights-with-for-loops.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\n-- How much the light's brightness will change each time\nlocal brightnessChange = 1\n-- How often in seconds the light will change brightness\nlocal timeChange = 1\n```\n\n----------------------------------------\n\nTITLE: Using Logical 'or' Operator in Complex Conditionals\nDESCRIPTION: Example demonstrating how to use the 'or' operator for complex logical tests in control structures, combining multiple conditions with parentheses to control the order of evaluation.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/operators.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal pasta = false\nlocal tomatoSauce = true\nlocal garlicBread = true\n\nif (pasta == true and tomatoSauce == true) or garlicBread == true then\n\tprint(\"We have either spaghetti dinner OR garlic bread\")\nelse\n\tprint(\"Something is missing...\")\nend\n\n-- Output: We have either spaghetti dinner OR garlic bread\n```\n\n----------------------------------------\n\nTITLE: Profiling Code with debug.profile\nDESCRIPTION: This code snippet demonstrates how to use `debug.profilebegin()` and `debug.profileend()` to measure the execution time of a specific section of code. This allows developers to identify performance bottlenecks in their scripts and optimize them. It requires no external dependencies and should be used with care because too many profiler labels can exhaust the memory available for them.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/studio/microprofiler/index.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\ndebug.profilebegin(\"Hard Work\")\n-- Code to be profiled\ndebug.profileend()\n```\n\n----------------------------------------\n\nTITLE: Rotating Roblox Part with CFrame.Angles (Lua)\nDESCRIPTION: Explains how to set a Roblox Part's rotation to an absolute orientation using the `CFrame.Angles()` constructor. This constructor takes rotation angles in radians for the X, Y, and Z axes. The example uses `math.rad()` to convert degrees to radians for a 45-degree rotation around the Y-axis. Requires a `Part` object (e.g., `redBlock`).\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/workspace/cframes.md#_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal redBlock = Workspace.RedBlock\n\n-- Create new rotated CFrame\nlocal newCFrame = CFrame.Angles(0, math.rad(45), 0)\n\n-- Overwrite redBlock's current CFrame with new CFrame\nredBlock.CFrame = newCFrame\n```\n\n----------------------------------------\n\nTITLE: Addressing Disallowed Instance Tags Error\nDESCRIPTION: This error indicates that disallowed instance tags (`%s`) were found. Remove these tags from the relevant instances.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/validation-errors.md#_snippet_36\n\nLANGUAGE: Text\nCODE:\n```\nFound the following instance tags which are not allowed: `%s`\n```\n\n----------------------------------------\n\nTITLE: Triggering Effects Based on Sound TimePosition in Lua\nDESCRIPTION: This Lua script demonstrates how to synchronize a visual effect (particle emission) with a specific time range in an audio track. It creates a Part, Attachment, ParticleEmitter, and Sound instance, plays the sound, and uses RunService.Heartbeat to continuously check the sound's TimePosition, enabling the emitter only between 5 and 20 seconds.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/sound/objects.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal RunService = game:GetService(\"RunService\")\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Create a new part\nlocal part = Instance.new(\"Part\")\npart.Anchored = true\npart.Color = Color3.new(0.75, 0.2, 0.5)\npart.Size = Vector3.new(2, 1, 2)\npart.Material = Enum.Material.Neon\npart.Position = Vector3.new(0, 4, 0)\npart.Parent = Workspace\n\n-- Create an attachment on the part\nlocal attachment = Instance.new(\"Attachment\")\nattachment.Position = Vector3.new(0, 0.5, 0)\nattachment.Parent = part\n\n-- Create a particle emitter on the attachment\nlocal emitter = Instance.new(\"ParticleEmitter\")\nemitter.Rate = 5\nemitter.Lifetime = NumberRange.new(1.5, 1.5)\nemitter.Texture = \"rbxassetid://1266170131\"\nemitter.Speed = NumberRange.new(1, 1)\nemitter.Size = NumberSequence.new{NumberSequenceKeypoint.new(0, 1), NumberSequenceKeypoint.new(1, 6)}\nemitter.Transparency = NumberSequence.new{NumberSequenceKeypoint.new(0, 1), NumberSequenceKeypoint.new(0.25, 0), NumberSequenceKeypoint.new(1, 1)}\nemitter.Orientation = Enum.ParticleOrientation.VelocityPerpendicular\nemitter.Parent = attachment\n\n-- Create a sound on the attachment\nlocal sound = Instance.new(\"Sound\")\nsound.SoundId = \"rbxassetid://1835405646\"\nsound.Parent = attachment\n\n-- Play the sound\nsound:Play()\n\n-- Start checking if emitter should be enabled\nRunService.Heartbeat:Connect(function()\n\t-- Enable the emitter within a time range of the audio; otherwise disable it\n\temitter.Enabled = sound.TimePosition >= 5 and sound.TimePosition < 20\nend)\n```\n\n----------------------------------------\n\nTITLE: Adjusting Environment Diffuse and Specular Scales for Reflection Effects\nDESCRIPTION: This snippet demonstrates modifying `EnvironmentDiffuseScale` and `EnvironmentSpecularScale` properties within `Lighting` to improve metallic surface reflections, increasing visual realism of materials under Future lighting. Setting both properties to 1 maximizes reflection effects for PBR textures.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/lighting/enhance-indoor-environments.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nlocal lighting = game:GetService(\"Lighting\")\n\n-- Enhance reflections by setting diffuse and specular scales to 1\nlighting.EnvironmentDiffuseScale = 1\nlighting.EnvironmentSpecularScale = 1\n```\n\n----------------------------------------\n\nTITLE: Updating Rotation of Models and MeshParts with LocalSpaceRotation in Roblox Lua\nDESCRIPTION: This Lua snippet updates the rotation transform of tagged objects each frame, accounting for whether the object is a Model or a MeshPart. It obtains the parent transform, ensuring the Model's PrimaryPart is streamed in before applying rotation. The snippet calculates the current angle incrementally based on delta time and rotation speed, applies rotation on specified axes, and sets the updated CFrame transform on the object or its PrimaryPart. This handles streamed objects by skipping updates until required parts are available. Dependencies include Roblox's CFrame datatype and heartbeat event. The inputs are object references and timing parameters; the output is updated object orientation in the game world.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/the-mystery-of-duvall-drive/develop-a-moving-world.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nlocal parentTransform\nif parentObj:IsA(\"Model\") then\n\tif not parentObj.PrimaryPart then\n\t\t-- primary part might might not be streamed in yet\n\t\tcontinue -- wait for primary part to replicate\n\tend\n\tparentTransform = parentObj.PrimaryPart.CFrame\nelse\n\tparentTransform = parentObj.CFrame\nend\n\ncurObjInfo.curAngle += dT * curObjInfo.timeToAngle\nlocal rotatedLocalCFrame = curObjInfo.origLocalCFrame * CFrame.Angles( curObjInfo.axisMask.X * curObjInfo.curAngle, curObjInfo.axisMask.Y * curObjInfo.curAngle, curObjInfo.axisMask.Z * curObjInfo.curAngle )\n\nif obj:IsA(\"Model\") then\n\tobj.PrimaryPart.CFrame = parentTransform * rotatedLocalCFrame\nelse\n\tobj.CFrame = parentTransform * rotatedLocalCFrame\nend\n```\n\n----------------------------------------\n\nTITLE: Adding an Attachment to Workspace\nDESCRIPTION: This snippet explains how to add an attachment to a part within the Roblox Studio workspace. Attachments are used to define the point of rotation for constraints like AngularVelocity. The attachment's visual aids help visualize axes.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/physics/create-spinning-objects.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Iterating Over Health Pickups with ipairs in Roblox Lua\nDESCRIPTION: Implements a loop over the array of health pickups using ipairs, which provides index and value variables. The loop skips the index by using `_`, focusing solely on each health pickup object for event connection. This pattern optimizes iteration over collections.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/scripting/intermediate-scripting/create-a-health-pickup.md#_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\nfor _, healthPickup in ipairs(healthPickups) do\n\nend\n```\n\n----------------------------------------\n\nTITLE: Finding a value's position in an array using a custom function in Luau\nDESCRIPTION: This snippet details how to create a function 'findValue' that searches for a specific string within an array and returns its index. It includes example usage that confirms whether 'Bread' exists and its position.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-5/make-changes-to-arrays.md#_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\nlocal function findValue(whichArray, itemName)\n\tfor currentIndex = 1, #whichArray do\n\t\tif whichArray[currentIndex] == itemName then\n\t\t\treturn currentIndex\n\t\tend\n\tend\n end\n\nlocal valueFound = findValue(playerItems, \"Bread\")\n\nprint(\"The value is at index \" .. valueFound)\n```\n\n----------------------------------------\n\nTITLE: Configuring PhotoBooth Options - Roblox Lua\nDESCRIPTION: Demonstrates how to customize the PhotoBooth module in a Roblox LocalScript by calling the configure method. This snippet imports PhotoBooth from ReplicatedStorage and overrides several default settings, such as the frame message, UI fade delay, maximum activation distance, and character printout size. Dependencies include the PhotoBooth module stored in ReplicatedStorage; UDim2 is used for sizing, so ensure the script runs in a Roblox environment. Input is a Lua table with configuration key-value pairs; there is no direct output but the PhotoBooth module updates its behavior accordingly. This configuration must be executed from a LocalScript context.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/photo-booth.md#_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal PhotoBooth = require(ReplicatedStorage:WaitForChild(\"PhotoBooth\"))\n\nPhotoBooth.configure({\n\tframeMessage = \"What a cool pose!\",\n\tfadeUiDelay = 5,\n\tmaxActivationDistance = 5,\n\tprintoutCharacterSize = UDim2.fromScale(1.5, 1.5),\n})\n```\n\n----------------------------------------\n\nTITLE: Defining DataStores Class for Roblox API Calls (Python)\nDESCRIPTION: This Python code defines a `DataStores` class that encapsulates methods for interacting with the Roblox Ordered Data Stores API.  It includes methods for listing, creating, and incrementing entries.  It depends on the `requests` and `json` libraries. It reads the configuration file using the `json` module.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/guides/usage-data-stores.md#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport hashlib\nimport requests\nimport json\n\nclass DataStores:\n    def __init__(self, config_file):\n        with open(config_file) as f:\n            self._config = json.load(f)\n\n    def _H(self):\n        return { 'x-api-key' : self._config[\"api_key\"], 'Content-Type': 'application/json'}\n    def _get_url(self, path_format: str):\n        return f\"{self._config['base_url']}/{path_format.format(self._config['universe_id'])}\"\n\n    def list(self, datastore, scope, pageSize = 10, orderBy = \"\", filter = \"\", exclusiveStartKey = \"\"):\n        self._objects_url = self._config['api_key_url']+\"universes/\"+self._config[\"universe_id\"]+\"/orderedDataStores/\"+datastore+\"/scopes/\"+scope+\"/entries\"\n        headers = { 'x-api-key' : self._config[\"api_key\"] }\n        r = requests.get(self._objects_url, headers=headers, params={\"max_page_size\": pageSize, \"order_by\" : orderBy, \"filter\" : filter, \"page_token\" : \"\"})\n        return r\n\n    def create(self, datastore, scope, entry, data):\n        self._objects_url = self._config['api_key_url']+\"universes/\"+self._config[\"universe_id\"]+\"/orderedDataStores/\"+datastore+\"/scopes/\"+scope+\"/entries\"\n        headers = self._H()\n        payload = json.dumps({\n            \"value\": 11\n            })\n        return requests.post(self._objects_url, params = {\"id\": entry }, data=payload, headers=headers)\n\n    def increment(self, datastore, scope, entry, incrementBy):\n        self._objects_url = self._config['api_key_url']+\"universes/\"+self._config[\"universe_id\"]+\"/orderedDataStores/\"+datastore+\"/scopes/\"+scope+\"/entries/\"+entry+\":increment\"\n        headers = { 'x-api-key' : self._config[\"api_key\"] }\n        payload = json.dumps({\n            \"amount\": 1\n            })\n        r = requests.post(self._objects_url, headers=headers, data=payload)\n        return r\n\n```\n\n----------------------------------------\n\nTITLE: Applying Materials and Drawing Shapes in Terrain Editor Lua Script\nDESCRIPTION: This code snippet illustrates how to select and apply different materials to terrain regions, including painting along exterior paths and creating crescent shapes with specific sizes and positions for environmental features such as pools or borders.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/environmental-art/construct-your-world.md#_snippet_15\n\nLANGUAGE: Lua\nCODE:\n```\n-- Select water material for drawing pool\nterrainEditor:setMaterial('Water')\n-- Draw crescent-shaped pool around building\nterrainEditor:drawShape('Crescent', Vector3.new(0,0,0))\n\n-- Switch to slate material for border\nterrainEditor:setMaterial('Slate')\n-- Draw border separating pools from architecture\nterrainEditor:drawShape('Crescent', Vector3.new(0,0,0))\n\n-- Use paint tool for detailed terrain texturing\nterrainEditor:selectPaintTool()\n-- Configure paint brush\nterrainEditor:setBrushShape('Cylinder')\nterrainEditor:setBaseSize(3)\nterrainEditor:setPivotPosition('Top')\nterrainEditor:setPlaneLock('Off')\n-- Apply multiple materials for environment details\nterrainEditor:setMaterial('Mud')\nterrainEditor:paint() -- Paint mud\nterrainEditor:setMaterial('LeafyGrass')\nterrainEditor:paint() -- Paint leafy grass\n-- Repeat for other materials: Ground, Sand, Salt, Snow...\n\n```\n\n----------------------------------------\n\nTITLE: Sample configuration for tower parts in Roblox\nDESCRIPTION: Provides detailed part configurations including size, position, color, material, and material variant, to replicate sample towers for environment construction in Roblox. These configurations ensure visual consistency and structural accuracy.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/environmental-art/construct-your-world.md#_snippet_8\n\nLANGUAGE: HTML\nCODE:\n```\n`<tr>\n<td>Large Spire</td>\n<td>`16, 98, 11`</td>\n<td>`-32, 58, 186.5`</td>\n<td>`248, 248, 248`</td>\n<td>`Concrete`</td>\n<td>`Concrete_Board_Formed_A`</td>\n</tr>`\n```\n\nLANGUAGE: HTML\nCODE:\n```\n`<tr>\n<td>Middle Spire</td>\n<td>`17.369, 77.734, 3.42`</td>\n<td>`-32, 72, 186.5`</td>\n<td>`181, 173, 156`</td>\n<td>`Concrete`</td>\n<td>`Concrete_Board_Formed_A`</td>\n</tr>`\n```\n\nLANGUAGE: HTML\nCODE:\n```\n`<tr>\n<td>Bottom wide spire</td>\n<td>`13, 75, 15`</td>\n<td>`-31.5, 42.5, 186.5`</td>\n<td>`181, 173, 156`</td>\n<td>`Concrete`</td>\n<td>`Concrete_Ribbed_A`</td>\n</tr>`\n```\n\nLANGUAGE: HTML\nCODE:\n```\n`<tr>\n<td>Top Wide Spire</td>\n<td>`17.288, 4, 15`</td>\n<td>`-33.5, 83, 186.5`</td>\n<td>`181, 173, 156`</td>\n<td>`Concrete`</td>\n<td>`Concrete_Ribbed_A`</td>\n</tr>`\n```\n\nLANGUAGE: HTML\nCODE:\n```\n`<tr>\n<td>Base</td>\n<td>`21, 5, 15`</td>\n<td>`-29.5, 7.5, 186.5`</td>\n<td>`181, 173, 156`</td>\n<td>`Sand`</td>\n<td>`MossStones`</td>\n</tr>`\n```\n\n----------------------------------------\n\nTITLE: Enhanced Player Stats Retrieval in Lua for Roblox\nDESCRIPTION: This code demonstrates retrieving the player’s leaderstats, accessing 'Items' and 'Spaces' values, and preparing conditions to check if harvesting is possible based on the player's current item count and capacity.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/adventure-game-series/collect-items.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nlocal item = toolitem\n\nlocal backpack = tool.Parent\nlocal player = backpack.Parent\nlocal playerStats = player:FindFirstChild(\"leaderstats\")\nlocal playerItems = playerStats:FindFirstChild(\"Items\")\nlocal playerSpaces = playerStats:FindFirstChild(\"Spaces\")\n\nlocal function onTouch(partTouched)\n  -- function body to be implemented for harvesting\nend\n```\n\n----------------------------------------\n\nTITLE: Updating Asset Content via Open Cloud Assets API Using Bash curl\nDESCRIPTION: Shows an example PATCH request to update the content of an existing asset, specifically for .fbx files. The request includes the asset type, asset ID, creator user ID, and optionally expected price in the JSON metadata, along with the new file content. Requires the x-api-key header for authorization. This endpoint is in beta and supports versioning by creating a new asset version. The snippet requires bash with curl and appropriate IDs. Only asset content update is demonstrated here.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/guides/usage-assets.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request PATCH 'https://apis.roblox.com/assets/v1/assets/{assetId}' \\\n--header 'x-api-key: {apiKey}' \\\n--form 'request={\n    \\\"assetType\\\": \\\"{assetType}\\\",\n    \\\"assetId\\\": \\\"{assetId}\\\",\n    \\\"creationContext\\\": {\n        \\\"creator\\\": {\n            \\\"userId\\\": {userId}\n        },\n        \\\"expectedPrice\\\":{expectedPrice}\n    },\n}' \\\n--form 'fileContent=@\"{file-path}\"'\n```\n\n----------------------------------------\n\nTITLE: Configuring PhotoBooth Message Lua\nDESCRIPTION: This Lua code configures the PhotoBooth module by changing the default message displayed on the photo. It requires the PhotoBooth module from ReplicatedStorage.  It uses the `configure` function to set the `frameMessage` parameter to a new string. The `ReplicatedStorage` service provides access to shared game resources.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/photo-booth.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal PhotoBooth = require(ReplicatedStorage:WaitForChild(\"PhotoBooth\"))\n\nPhotoBooth.configure({\n\tframeMessage = \"First Photo Booth Capture!\",\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Terrain Editor's Draw Tool for Island Creation\nDESCRIPTION: Sets up the Terrain Editor's Draw tool with specific brush size and material to generate an initial terrain sphere for the island. It includes selecting the Draw tool and configuring its settings to create a natural-looking environment foundation. Dependencies include access to Roblox Studio's Terrain Editor.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/core/building/create-an-environment-with-terrain.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n- Navigate to the **Home** tab in Roblox Studio and click the **Terrain Editor** button.\n- In the **Terrain Editor** window, click the **Edit** tab, then the **Draw** button.\n- In the **Brush Settings** and **Material Settings** sections, set:\n  - **Brush Size** to **32**\n  - **Source Material** to **Sand**\n- In the viewport, click near the spawn location to create a terrain sphere of sand material.\n```\n\n----------------------------------------\n\nTITLE: Defining Sections Data in JavaScript\nDESCRIPTION: This JavaScript snippet defines a constant `sections`. This array of objects is used to structure the content of the documentation. Each object represents a section with its title, description, and content. The `content` property contains further nested objects with titles, descriptions, and links/images. The output is a structured array of objects that represents various sections such as tools, experiences, and monetization.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/platform.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const sections = [\n\n  {\n    title: \"All the tools you need, for free\",\n    description: \"Roblox simplifies creation by providing free tools, hosting, and infrastructure that power automatic, synchronous real-time gameplay as well as covering storage, localization, and payment processing.\",\n    content: [\n      {\n        title: \"Roblox Studio\",\n        description: \"The all-in-one IDE with generative AI technology for building, scripting, testing, and publishing Roblox experiences.\",\n        links: [\n          { text: \"Get Studio\", href: \"./studio/setup\" },\n          { text: \"Learn more\", href: \"./studio\" }\n        ]\n      },\n      {\n        title: \"Roblox Engine\",\n        description: \"An advanced 3D engine with access to robust data storage, physics simulation, and standard primitives to build anything you can imagine.\",\n        links: [\n          { text: \"API reference\", href: \"./reference/engine\" },\n          { text: \"Guides\", href: \"./creation\" }\n        ]\n      },\n      {\n        title: \"Open Cloud\",\n        description: \"A set of web-based APIs that let you build tools and apps to access your creations.\",\n        links: [\n          { text: \"API reference\", href: \"./cloud/\" },\n          { text: \"Guides\", href: \"./cloud/guides/\" }\n        ]\n      },\n      {\n        title: \"Creator Hub\",\n        description: \"Manage your creations, view analytics, track earnings, and connect with the community, all from your web browser.\",\n        links: [\n          { text: \"Go to Creator Hub\", href: \"https://create.roblox.com/\" },\n          { text: \"Learn more\", href: \"./creator-hub\" }\n        ]\n      }\n    ]\n  },\n  {\n    title: \"Large, multiplayer experiences on any device\",\n    description: \"Experiences are the 3D worlds you create, including games, communication or learning environments, visual showcases, concerts, real life simulations, and more.\",\n    buttons: [\n      { text: \"Get started\", href: \"./experiences\" },\n      { text: \"Engine API\", href: \"./reference/engine/\" }\n    ],\n    content: [\n      {\n        title: \"Simulated by default\",\n        description: \"Construct 3D worlds that closely simulate real life with out-of-the-box objects and services. The Roblox engine provides default behavior and logic that do the heavy lifting.\",\n        image: \"./assets/landing/engine-simulation.gif\"\n      },\n      {\n        title: \"Infinitely customizable\",\n        description: \"Almost everything in Roblox is customizable and dynamic, letting you override default properties in the engine at build time or with scripts at runtime.\",\n        image: \"/assets/landing/scripting-animation.gif\"\n      },\n      {\n        title: \"Intelligent client streaming\",\n        description: \"The Roblox engine adjusts how it delivers your experiences to clients based on available resources, so anything you create runs on all devices automatically.\",\n        image: \"./assets/scripting/client-server/Remote-Flow-Server-All-Clients.png\"\n      },\n    ]\n  },\n  {\n    title: \"Expressive avatars for everyone\",\n    description: \"Avatars persist across all Roblox experiences by default, allowing users to create unique characters and outfits to take with them wherever they go. Create anything from clothing, accessories, animations, and even complete characters.\",\n    buttons: [\n      { text: \"Get started\", href: \"./avatar\" },\n      { text: \"3D art resources\", href: \"./art\" },\n    ],\n    content: [\n      {\n        title: \"Fully customizable characters\",\n        description: \"Create full characters or individual body parts that users can equip.\",\n        image: \"/assets/modeling/meshes/Modeling-Requirements-Caps.png\",\n        links: [{ text: \"Avatar characters\", href: \"./art/characters\" }]\n      },\n      {\n        title: \"Expressive body and face animations\",\n        description: \"Animations let avatars move with their body and face.\",\n        image: \"/assets/avatar/dynamic-heads/animating-dynamic-heads/Overview.png\",\n        links: [\n          { text: \"Facial animation\", href: \"./art/characters/facial-animation\" },\n          { text: \"Character animation\", href: \"./tutorials/use-case-tutorials/animation/create-an-animation\" }\n        ]\n      },\n      {\n        title: \"Layered clothing\",\n        description: \"Clothing can layer on top of each other on a multitude of different body shapes and types.\",\n        image: \"/assets/art/accessories/creating/Exporting-Clothing-in-Studio-Highlight.png\",\n        links: [\n          { text: \"Guides\", href: \"./art/accessories/layered-clothing\" },\n          { text: \"Tutorial\", href: \"./art/accessories/creating\" }\n        ]\n      }\n    ]\n  },\n  {\n    title: \"Cloud-based asset management\",\n    description: \"From 3D models to audio to plugins, create and share assets with the rest of the creator community to accelerate their productivity.\",\n    buttons: [\n      { text: \"Learn more\", href: \"./assets\" },\n      { text: \"Go to Creator Store\", href: \"https://create.roblox.com/store\" }\n    ],\n    content: [\n      {\n        title: \"Publish and share\",\n        description: \"From 3D models to audio to plugins, create and share assets with the rest of the creator community to accelerate their productivity.\",\n        image: \"./assets/landing/assets.png\",\n        links: [{ text: \"Guides\", href: \"./projects/assets\" }]\n      },\n      {\n        title: \"Sell plugins\",\n        description: \" The Creator Store lets you publish and sell plugins that increase Studio's functionality and feature set.\",\n        image: \"./assets/landing/plugins.jpg\",\n        links: [\n          { text: \"Create and sell plugins\", href: \"./studio/plugins\" }\n        ]\n      },\n      {\n        title: \"Import assets\",\n        description: \"Import assets from other digital creation apps for 3D art, images, audio, and video.\",\n        image: \"./assets/landing/blender-logo.png\",\n        links: [\n          { text: \"Third-party tools support\", href: \"./art/overview-dcc\" }\n        ]\n      }\n    ]\n  },\n  {\n    title: \"Extensive scale and monetization\",\n    description: \"Reach a massive, global audience of hundreds of millions of users across 190 countries with efficient discovery and user acquisition.\",\n    buttons: [\n      { text: \"Learn how to scale\", href: \"./scale\" },\n      { text: \"Learn how to monetize\", href: \"./monetize\" }\n    ],\n    content: [\n      {\n        title: \"Reach hundreds of millions instantly\",\n        description: \"Deploy globally in seconds across major platforms — from mobile to console to desktop to VR — and in multiple languages.\",\n        image: \"/assets/landing/device-family.png\"\n      },\n      {\n        title: \"Analyze and grow your creations\",\n        description: \"Measure and gain insights on your experience's performance with a robust set of analytics tools. Adjust content strategies and rapidly iterate to get your desired outcome.\",\n        image: \"/assets/analytics/overview/watchlist.png\"\n      },\n      {\n        title: \"Monetize with a variety of strategies\",\n        description: \"Earn money in many ways, including in-experience purchases, ads, as well as selling avatar items or creator plugins.\",\n        image: \"./assets/landing/in-exp-monetization.jpg\"\n      }\n    ]\n  }\n];\n```\n\n----------------------------------------\n\nTITLE: Checking Value Type with type and typeof in Luau\nDESCRIPTION: Demonstrates how to use the built-in `type()` and `typeof()` functions in Luau to determine the data type of variables. It shows that both functions correctly identify number types (integer and decimal) as 'number' and distinguish them from other types like strings. Requires a Luau environment.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/numbers.md#_snippet_1\n\nLANGUAGE: Luau\nCODE:\n```\nlocal testInt = 5\nlocal testDecimal = 9.12761656\nlocal testString = \"Hello\"\n\nprint(type(testInt))  --> number\nprint(type(testDecimal))  --> number\nprint(type(testString))  --> string\n\nprint(typeof(testInt))  --> number\nprint(typeof(testDecimal))  --> number\nprint(typeof(testString))  --> string\n```\n\n----------------------------------------\n\nTITLE: Creating fireWeapon Function in Lua\nDESCRIPTION: This snippet defines a function `fireWeapon` that calculates the target position based on mouse input using the `getWorldMousePosition` function. This is the entry point for firing the laser and requires `getWorldMousePosition` function to be defined.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/scripting/intermediate-scripting/hit-detection-with-lasers.md#_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nlocal function fireWeapon()\n    local mouseLocation = getWorldMousePosition()\nend\n\nlocal function toolEquipped()\n    tool.Handle.Equip:Play()\nend\n```\n\n----------------------------------------\n\nTITLE: Performing Raycast with Parameters in Lua\nDESCRIPTION: This snippet creates a `RaycastParams` object to filter out the player's character, preventing self-damage. It then performs a raycast from the tool's handle position towards the calculated `directionVector`, using the `weaponRaycastParams`. It depends on Players service, `tool.Handle.Position`, and `directionVector` to be defined.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/scripting/intermediate-scripting/hit-detection-with-lasers.md#_snippet_11\n\nLANGUAGE: lua\nCODE:\n```\nlocal function fireWeapon()\n\tlocal mouseLocation = getWorldMousePosition()\n\n\t-- Calculate a normalised direction vector and multiply by laser distance\n\tlocal targetDirection = (mouseLocation - tool.Handle.Position).Unit\n\n\t-- The direction to fire the weapon multiplied by a maximum distance\n\tlocal directionVector = targetDirection * MAX_LASER_DISTANCE\n\n\t-- Ignore the player's character to prevent them from damaging themselves\n\tlocal weaponRaycastParams = RaycastParams.new()\n\tweaponRaycastParams.FilterDescendantsInstances = {Players.LocalPlayer.Character}\n\tlocal weaponRaycastResult = workspace:Raycast(tool.Handle.Position, directionVector, weaponRaycastParams)\nend\n```\n\n----------------------------------------\n\nTITLE: Printing a Secret (Outputs Secret Name)\nDESCRIPTION: This Lua snippet demonstrates that directly printing a `Secret` object will output the secret's name rather than the actual secret value. This behavior is intentional for security reasons. It shows what the output looks like when printing the `testSecret` variable.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud-services/secrets.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nprint(testSecret) --> Secret(test_secret)\n```\n\n----------------------------------------\n\nTITLE: Setting up a season pass with a premium track in Lua\nDESCRIPTION: This code defines a season pass in the configuration, specifying a 'premiumTrack' with its pricing via a GamePassId and metadata including a track name. This setup enables monetization of the season pass through Roblox's game pass system and is part of the overall season configuration inside the experience's data store setup.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/feature-packages/season-passes.md#_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\npremiumTrack = {\n    pricing = {\n        gamePassId = 928192647,\n    },\n    trackMetadata = {\n        trackName = \"Premium Track\",\n    },\n},\n```\n\n----------------------------------------\n\nTITLE: Registering Touch Events for Animation Triggering (Luau)\nDESCRIPTION: This LocalScript, intended for StarterPlayer > StarterCharacterScripts, sets up touch event listeners for all parts within a 'TouchPartFolder' in the Workspace. When the local player's character touches one of these parts, it invokes the 'PlayAnimation' function from the 'PlayerAnimationFeedback' module. It requires the 'PlayerAnimationFeedback' ModuleScript in ReplicatedStorage and depends on the existence of 'Workspace/TouchPartFolder'.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/build-it-play-it-island-of-move/adding-animations.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Used with \"PlayerAnimationFeedback\" script to play animations on part touches\n\n-- Services\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal Players = game:GetService(\"Players\")\n\nlocal player = Players.LocalPlayer\nlocal character = player.Character or player.CharacterAdded:Wait()\nlocal humanoid = character:WaitForChild(\"Humanoid\")\nlocal canTouch = false\n\n-- Include feedback animation module\nlocal PlayerAnimationFeedback = require(ReplicatedStorage:WaitForChild(\"PlayerAnimationFeedback\"))\n\n-- Function called when a part is touched\nlocal function onPartTouch(otherPart)\n\tif humanoid and canTouch == false then\n\t\tcanTouch = true\n\t\tPlayerAnimationFeedback:PlayAnimation()\n\t\tcanTouch = false\n\tend\nend\n\n-- On startup, call animation module load function\nPlayerAnimationFeedback:LoadAnimation(humanoid)\n-- Also bind a folder of parts to the \"Touched\" event to run \"onPartTouch()\"\nlocal touchPartFolder = workspace:WaitForChild(\"TouchPartFolder\")\nlocal touchParts = touchPartFolder:GetChildren()\n\nfor _, touchPart in touchParts do\n\ttouchPart.Touched:Connect(onPartTouch)\nend\n```\n\n----------------------------------------\n\nTITLE: Using HumanoidDescription to set Mood\nDESCRIPTION: This Lua script shows how to utilize the `HumanoidDescription` to change the mood animation.  It accesses the `Humanoid` and then gets the applied description and clones it for modification.  The example sets the `IdleAnimation` and then applies the changed description back to the humanoid.  This allows for setting character moods based on the `HumanoidDescription` properties.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/characters/facial-animation/moods.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal humanoid = player.Character and player.Character:FindFirstChildWhichIsA(\"Humanoid\")\nif humanoid then\n\tlocal descriptionClone = humanoid:GetAppliedDescription()\n\tdescriptionClone.IdleAnimation = 10725833199\n\t-- Apply modified \"descriptionClone\" to humanoid\n\thumanoid:ApplyDescription(descriptionClone)\nend\n```\n\n----------------------------------------\n\nTITLE: Making Light Source Parts Invisible\nDESCRIPTION: Sets the Transparency property of the container parts ('LightCaldera', 'LightMagma', 'LightOutflow') to 1, making them invisible while their child PointLights continue to emit light. This configuration is applied via the Roblox Studio Properties window.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/vfx/create-volcanoes.md#_snippet_2\n\nLANGUAGE: Configuration\nCODE:\n```\nTransparency = 1\n```\n\n----------------------------------------\n\nTITLE: Script - Handling Incoming Invite Launch Data in Roblox Lua\nDESCRIPTION: This script retrieves launch data received by a player after joining via an invite notification. It attempts multiple retries to allow launch data to become available, then decodes the JSON-encoded data to access sender ID and spawn location, enabling personalized post-invite customization. Dependencies are HttpService and Players, and parameters include retry limits and delay. This approach ensures robust handling of delayed data arrival.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/production/promotion/invite-prompts.md#_snippet_7\n\nLANGUAGE: Lua\nCODE:\n```\nlocal HttpService = game:GetService(\"HttpService\")\nlocal Players = game:GetService(\"Players\")\n\nlocal ATTEMPT_LIMIT = 10\nlocal RETRY_DELAY = 1\n\nlocal function onPlayerAdded(player)\n\tlocal launchData\n\n\tfor _ = 1, ATTEMPT_LIMIT do\n\t\ttask.wait(RETRY_DELAY)\n\t\tlocal joinData = player:GetJoinData()\n\t\tif joinData.LaunchData ~= \"\" then\n\t\t\tlaunchData = joinData.LaunchData\n\t\t\tbreak\n\t\tend\n\tend\n\n\tif launchData then\n\t\tlocal data = HttpService:JSONDecode(launchData)\n\t\tprint(data.senderUserID)\n\t\tprint(data.spawnLocation)\n\telse\n\t\twarn(\"No launch data received!\")\n\tend\nend\n\nPlayers.PlayerAdded:Connect(onPlayerAdded)\n```\n\n----------------------------------------\n\nTITLE: Offsetting Roblox Part from Current Position (Lua)\nDESCRIPTION: Shows how to move a Roblox Part relative to its *current* position using CFrame and Vector3 arithmetic. A new CFrame is created at the part's current position (`CFrame.new(redBlock.Position)`), and a `Vector3` offset is added to it. This results in moving the part up by 1.25 studs relative to the world axes. Requires a `Part` object (e.g., `redBlock`).\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/workspace/cframes.md#_snippet_4\n\nLANGUAGE: Lua\nCODE:\n```\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal redBlock = Workspace.RedBlock\n\nredBlock.CFrame = CFrame.new(redBlock.Position) + Vector3.new(0, 1.25, 0)\n```\n\n----------------------------------------\n\nTITLE: Filtering by Enum Property Partial Match (Case-Insensitive)\nDESCRIPTION: Finds all `BasePart` instances where the `Material` property partially matches 'plas' (e.g., 'Plastic', 'SmoothPlastic'). Uses the `==` operator for case-insensitive partial matching on Enum values.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/studio/explorer.md#_snippet_1\n\nLANGUAGE: RobloxSearchQuery\nCODE:\n```\nMaterial == plas\n```\n\n----------------------------------------\n\nTITLE: Disabling the MerchBooth UI and Features - Lua\nDESCRIPTION: Illustrates disabling (hiding and disconnecting) the entire merch booth system and UI with setEnabled, after checking its current enabled state via isMerchBoothEnabled. This removes all interactive elements and requires MerchBooth module setup. It should be used in a LocalScript and takes a boolean parameter.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/merch-booth.md#_snippet_30\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal MerchBooth = require(ReplicatedStorage:WaitForChild(\"MerchBooth\"))\n\nlocal isEnabled = MerchBooth.isMerchBoothEnabled()\nif isEnabled then\n\tMerchBooth.setEnabled(false)\nend\n\n```\n\n----------------------------------------\n\nTITLE: Modify Camera Position with Lua\nDESCRIPTION: This Lua code modifies the camera position by adding the same value to all three dimensions of the camera's position vector. It retrieves the character's HumanoidRootPart position and applies an offset to calculate the desired camera position. This code relies on RunService to update the camera every frame.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/input-and-camera/control-the-users-camera.md#_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nlocal function updateCamera()\n    local character = player.Character\n    if character then\n        local root = character:FindFirstChild(\"HumanoidRootPart\")\n        if root then\n            local rootPosition = root.Position + Vector3.new(0, HEIGHT_OFFSET, 0)\n            local cameraPosition = rootPosition + Vector3.new(CAMERA_DEPTH, CAMERA_DEPTH, CAMERA_DEPTH)\n            camera.CFrame = CFrame.lookAt(cameraPosition, rootPosition)\n        end\n    end\nend\n\nRunService:BindToRenderStep(\"IsometricCamera\", Enum.RenderPriority.Camera.Value + 1, updateCamera)\n```\n\n----------------------------------------\n\nTITLE: Example OAuth 2.0 Token Resources Response Structure\nDESCRIPTION: Illustrates the JSON response structure received from the OAuth 2.0 token resources endpoint after a successful request. It contains an array of `resource_infos`, each listing the owner (user or group) and the associated resource IDs (in this case, `universe.ids`) that the provided access token has permission to access for the requested scopes.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/guides/usage-messaging.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"resource_infos\": [\n    {\n      \"owner\": {\n        \"id\": \"1516563360\",\n        \"type\": \"User\"\n      },\n      \"resources\": {\n        \"universe\": {\n          \"ids\": [\"3828411582\"]\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting CharacterAdded Event and Setting Initial State - Roblox - Luau\nDESCRIPTION: This Luau function, connected to the `Players.PlayerAdded` event, listens for the `CharacterAdded` event for the specific player. Once a character loads, it checks if the player is neutral (not on a team/in the lobby) and, if not, sets their `playerState` attribute to 'SelectingBlaster', triggering a state change handler.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/gameplay-scripting/spawn-respawn.md#_snippet_4\n\nLANGUAGE: Luau\nCODE:\n```\nlocal function onPlayerAdded(player: Player)\n\tplayer.CharacterAdded:Connect(function()\n\t\tif not player.Neutral then\n\t\t\tplayer:SetAttribute(PlayerAttribute.playerState, PlayerState.SelectingBlaster)\n\t\t\tonPlayerStateChanged(player, PlayerState.SelectingBlaster)\n\t\tend\n\tend)\n\n```\n\n----------------------------------------\n\nTITLE: Publishing a Message via Open Cloud API using API Key (Bash)\nDESCRIPTION: Shows an example cURL command to publish a message (\"Hello, everyone!\") to a specific topic (\"your-topic\") within a Roblox universe using the Open Cloud Messaging Service API. Requires a valid API key (`x-api-key` header) with `universe-messaging-service:publish` permission and the target Universe ID substituted in the URL placeholder `{universe}`. The request uses the POST method and sends data as JSON.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/guides/usage-messaging.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -L -X POST 'https://apis.roblox.com/cloud/v2/universes/{universe}:publishMessage' \\\n-H 'x-api-key: {api-key}' \\\n-H 'Content-Type: application/json' \\\n--data '{\n \"topic\": \"your-topic\",\n \"message\": \"Hello, everyone!\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Detecting Gamepad Connection Status with UserInputService in Lua\nDESCRIPTION: Demonstrates how to check if a player's device currently has an active gamepad using the UserInputService.GamepadEnabled property. The code listens for events signaling gamepad connections and disconnections, printing messages accordingly. It also illustrates querying a specific gamepad's connection status using GetGamepadConnected(). This snippet requires Roblox's UserInputService and focuses on detecting gamepad presence and changes.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/input/gamepad.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal UserInputService = game:GetService(\"UserInputService\")\n\nif UserInputService.GamepadEnabled then\n\tprint(\"Player has gamepad enabled...\")\nend\n```\n\nLANGUAGE: lua\nCODE:\n```\nlocal UserInputService = game:GetService(\"UserInputService\")\n\nUserInputService.GamepadConnected:Connect(function(gamepad)\n\tprint(\"User has connected controller: \" .. tostring(gamepad))\nend)\n\nUserInputService.GamepadDisconnected:Connect(function(gamepad)\n\tprint(\"User has disconnected controller: \" .. tostring(gamepad))\nend)\n```\n\nLANGUAGE: lua\nCODE:\n```\nlocal UserInputService = game:GetService(\"UserInputService\")\n\nif UserInputService:GetGamepadConnected(Enum.UserInputType.Gamepad1) then\n\tprint(\"Gamepad1 is connected\")\nelseif UserInputService:GetGamepadConnected(Enum.UserInputType.Gamepad2) then\n\tprint(\"Gamepad2 is connected\")\nend\n```\n\n----------------------------------------\n\nTITLE: Enabling Volumetric Audio for the Project in Roblox\nDESCRIPTION: This snippet describes how to enable volumetric audio for a Roblox project.  This is a prerequisite for using volumetric audio emitters. Volumetric audio provides a more realistic sound experience by simulating how sound changes with distance and direction.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/the-mystery-of-duvall-drive/design-dark-soundscapes.md#_snippet_0\n\nLANGUAGE: None\nCODE:\n```\n1. In the **Explorer** window, we selected **SoundService**.\n2. In the **Properties** window, we navigated to the **VolumetricAudio** property, then set it to **Enabled**. This turned on the volumetric sounds behavior for the entire project.\n```\n\n----------------------------------------\n\nTITLE: Initializing 'story' variable in Lua for Roblox scripting\nDESCRIPTION: Defines a Lua variable named 'story' to store part of the story string. The snippet ensures the variable is declared before concatenation. It requires the storyMaker API for input collection and supports string assembly. This setup prepares for combining static text with dynamic user input.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/build-it-play-it-story-games/code-the-story.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\n-- Code story between the dashes\n-- =============================================\nlocal name1 = storyMaker:GetInput(\"What is your favorite name?\")\n\nlocal story\n-- =============================================\n```\n\n----------------------------------------\n\nTITLE: Gameplay Scripting for Interactions\nDESCRIPTION: Gameplay scripting handles UI fading, trigger volumes, and object highlighting. These systems rely on tagging objects and using client/server scripts for specific behaviors.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/the-mystery-of-duvall-drive/main-design-requirements.md#_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Reacting to promptShown Event - Roblox Lua\nDESCRIPTION: Explains how to connect to the promptShown event in the PhotoBooth module to perform actions when the printout is closed and the camera button is displayed again. The event is triggered in a LocalScript and does not provide any parameters. Developers can use this event to reset or reveal UI components relevant to photo-taking. Ensure PhotoBooth is loaded from ReplicatedStorage.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/photo-booth.md#_snippet_7\n\nLANGUAGE: Lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal PhotoBooth = require(ReplicatedStorage:WaitForChild(\"PhotoBooth\"))\n\nPhotoBooth.promptShown:Connect(function()\n\tprint(\"The camera prompt is showing\")\nend)\n```\n\n----------------------------------------\n\nTITLE: Continuing a Loop with Continue in Luau\nDESCRIPTION: This code demonstrates how to use the `continue` keyword to skip the rest of the current iteration in a `for` loop and proceed to the next iteration. The `GetChildrenOfClass` function iterates through the children of a parent instance and only adds children with a specific class name to a table. If a child's class name does not match the specified `className`, the `continue` statement is executed, skipping the `table.insert` call for that child.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/control-structures.md#_snippet_12\n\nLANGUAGE: lua\nCODE:\n```\nlocal function GetChildrenOfClass(parent: Instance, className: string): {Instance}\n\tlocal children = {}\n\tfor _, child in parent:GetChildren() do\n\t\tif child.ClassName ~= className then continue end  -- Iterates the loop\n\t\ttable.insert(children, child)\n\tend\n\n\treturn children\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Proximity Button with MerchBooth - Lua\nDESCRIPTION: Demonstrates how to invoke MerchBooth.addProximityButton after registering an item asynchronously and locating the target object in the Workspace. Requires the MerchBooth module from ReplicatedStorage, and relies on a successful addItemAsync operation before adding the proximity button. The code takes an assetId and an Adornee (BasePart, Model, or Attachment) as input, and does not output values directly, instead affecting in-game UI.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/merch-booth.md#_snippet_19\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal MerchBooth = require(ReplicatedStorage:WaitForChild(\"MerchBooth\"))\n\nlocal success, errorMessage = pcall(function()\n\tMerchBooth.addItemAsync(4819740796)\nend)\nif success then\n\tlocal item = Workspace:FindFirstChild(\"Robox\")\n\tif item then\n\t\tMerchBooth.addProximityButton(item, 4819740796)\n\tend\nend\n\n```\n\n----------------------------------------\n\nTITLE: Calculate Vertical Spread Direction\nDESCRIPTION: This code snippet demonstrates how to include a third blaster type with a wide, **vertical** spread, and adjust the Datatype.CFrame calculation to use a different axis.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/gameplay-scripting/detect-hits.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nif numLasers == 1 then\n\ttable.insert(directions, originCFrame.LookVector)\nelif numLasers > 1 then\n\tlocal leftAngleBound = laserSpreadDegrees / 2\n\tlocal rightAngleBound = -leftAngleBound\n\tlocal degreeInterval = laserSpreadDegrees / (numLasers - 1)\n\tfor angle = rightAngleBound, leftAngleBound, degreeInterval do\n\t\tlocal direction\n\t\tif spreadDirection == \"vertical\" then\n\t\t\tdirection = (originCFrame * CFrame.Angles(math.rad(angle), 0, 0)).LookVector\n\t\telse\n\t\t\tdirection = (originCFrame * CFrame.Angles(0, math.rad(angle), 0)).LookVector\n\t\tend\n\t\ttable.insert(directions, direction)\n\tend\nend\nreturn directions\n```\n\n----------------------------------------\n\nTITLE: Changing Time of Day - Roblox Studio\nDESCRIPTION: This snippet shows how to modify the time of day in Roblox Studio. By setting the `ClockTime` property of the `Lighting` service to a numerical value (e.g., 17 for 5 PM), the position of the sun in the environment changes to reflect that time, enhancing the visual atmosphere. It requires access to the `Lighting` service.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/lighting/enhance-outdoor-environments-with-future-lighting.md#_snippet_2\n\nLANGUAGE: Roblox Studio\nCODE:\n```\n1. In the **Explorer** window, select **Lighting**.\n2. In the **Properties** window, set **ClockTime** to `17`. The sun moves to the approximate position it would be in at 5pm.\n```\n\n----------------------------------------\n\nTITLE: Updating Inventory Data in Node.js\nDESCRIPTION: Demonstrates how to use the DataStores class to update user inventory data.  It initializes a DataStores object and then retrieves, lists, and increments inventory values for a subset of users.  The code reads the `Inventory` datastore and prints the gems and robux values for specific users to the console.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/guides/usage-data-stores.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst DataStores = require('./dataStoresMethods');\nconst dataStoresApi = new DataStores();\n\n// Set up\nconst datastoreName = 'Inventory';\n\n// List keys for a subset of users\ndataStoresApi.listEntries(datastoreName).then((keys) => {\n  console.log(keys);\n});\n\n// Read inventory for each user\nfor (let x = 0; x < 5; x++) {\n  const updatedObjectKey = `User_${x + 1}`;\n  dataStoresApi.getEntry(datastoreName, updatedObjectKey).then((value) => {\n    console.log(\n      `${updatedObjectKey} has ${value.gems} gems in their inventory`\n    );\n  });\n}\n\n// Update the currency of each user by 10\nfor (let x = 0; x < 5; x++) {\n  const updatedObjectKey = `User_${x + 1}`;\n  dataStoresApi\n    .incrementEntry(datastoreName, updatedObjectKey, 10)\n    .then((value) => {\n      console.log(\n        `${updatedObjectKey} now has ${value.robux} robux in their inventory`\n      );\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Roblox OAuth 2.0 Endpoint Paths\nDESCRIPTION: A list of available endpoint paths relative to the OAuth 2.0 base URL. These endpoints cover authorization, token management, and user information retrieval.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/auth/oauth2-reference.md#_snippet_1\n\nLANGUAGE: HTTP\nCODE:\n```\nGET v1/authorize\nPOST v1/token\nPOST v1/token/introspect\nPOST v1/token/resources\nPOST v1/token/revoke\nGET v1/userinfo\nGET .well-known/openid-configuration\n```\n\n----------------------------------------\n\nTITLE: Attaching Cooldown Meter UI to Blaster in Roblox (Lua)\nDESCRIPTION: This module script exposes a function to create and attach a cooldown meter UI part to a specified attachment (typically on the player's blaster) by cloning the prefab and welding it into place. Dependencies include the presence of the CooldownBarPrefab in ReplicatedStorage and a valid Attachment reference. The expected parameters are the attachment instance, and the output is a reference to the new UI part attached to the blaster. Correct hierarchy and parentage in the game's object tree are required for intended behavior.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/user-interface-design/implement-designs-in-studio.md#_snippet_22\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal cooldownBarPrefab = ReplicatedStorage.Instances.Guis.CooldownBarPrefab\n\nlocal function addCooldownBar(attachment: Attachment): Part\n\tlocal part = cooldownBarPrefab:Clone()\n\n\t-- Move and weld the cooldown bar part to the blaster\n\tpart:PivotTo(attachment.WorldCFrame)\n\n\tlocal weld = Instance.new(\"WeldConstraint\")\n\tweld.Part0 = attachment.Parent\n\tweld.Part1 = part\n\tweld.Parent = part\n\n\t-- Make sure the weld is setup prior to parenting to the blaster\n\tpart.Parent = attachment.Parent\n\n\treturn part\nend\n\nreturn addCooldownBar\n```\n\n----------------------------------------\n\nTITLE: Checking Current Gamepad Button and Stick States with UserInputService:GetGamepadState() in Lua\nDESCRIPTION: Uses UserInputService:GetGamepadState() to query the current state of all buttons and sticks on a specified gamepad when a certain event happens (e.g., a character's left foot touching something). Iterates through each input to detect specific button states, such as holding ButtonR2. This method is useful for context-dependent input checks and requires knowledge of Player and Character instances.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/input/gamepad.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\nlocal UserInputService = game:GetService(\"UserInputService\")\n\nlocal player = Players.LocalPlayer\nlocal character = player.Character or player.CharacterAdded:Wait()\nlocal leftFoot = character:WaitForChild(\"LeftFoot\")\n\n-- When left foot comes into contact with something, check the gamepad input state\nleftFoot.Touched:Connect(function(hit)\n\tlocal state = UserInputService:GetGamepadState(Enum.UserInputType.Gamepad1)\n\tfor _, input in state do\n\n\t\t-- If the ButtonR2 is currently held, print out a message\n\t\tif input.KeyCode == Enum.KeyCode.ButtonR2 and input.UserInputState == Enum.UserInputState.Begin then\n\t\t\tprint(\"Character's left foot touched something while holding right trigger\")\n\t\tend\n\tend\nend)\n```\n\n----------------------------------------\n\nTITLE: Accessing Persistent Model Parts with WaitForChild in Roblox (Lua)\nDESCRIPTION: This LocalScript is similar to the atomic model usage, but targets persistent models, which are never streamed out and are sent as an atomic unit after the player joins. The script waits for the model named 'Model' to become available using WaitForChild() before accessing its descendants. It is important for scripts running during initial join to wait for persistence, as models do not exist at load time. Used in places where model streaming is set to Persistent.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/workspace/streaming.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Persistent model does not exist at load time; use WaitForChild()\nlocal model = Workspace:WaitForChild(\"Model\")\n\n-- Descendant parts stream in with model and are immediately accessible\nlocal meshPart = model.MeshPart\nlocal part = model.Part\n```\n\n----------------------------------------\n\nTITLE: Luau Concatenation Type Coercion\nDESCRIPTION: This snippet showcases how Luau coerces numbers to strings during concatenation using the `..` operator. It demonstrates the conversion of the mathematical constant `math.pi` and a numeric literal to their string representations. The example also uses the `string.format()` function to format a number with a specific number of decimal places without coercion.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/type-coercion.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nprint(\"Pi is \" .. math.pi) --> Pi is 3.1415926535898\nprint(\"Pi is \" .. 3.1415927) --> Pi is 3.1415927\n\n-- Rounds to three decimal places\nprint(\"Pi is \" .. string.format(\"%.3f\", 3.1415927)) -- Pi is 3.142\n```\n\n----------------------------------------\n\nTITLE: Creating Seams in Blender's Edit Mode using Python\nDESCRIPTION: This snippet demonstrates how to programmatically select edges and mark them as seams in Blender's Python API to prepare the mesh for UV unwrapping. It requires the Blender Python environment and operates on the selected object to automate seam creation across specified edges.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/accessories/creating/unwrapping.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport bpy\n\n# Assume the object is selected and in edit mode\nobj = bpy.context.active_object\nbpy.ops.object.mode_set(mode='EDIT')\n\n# Switch to edge select mode\nbpy.ops.mesh.select_mode(type='EDGE')\n\n# Deselect all edges\nbpy.ops.mesh.select_all(action='DESELECT')\n\n# Use bmesh for detailed selection (if necessary)\nimport bmesh\nbm = bmesh.from_edit_mesh(obj.data)\n\n# Function to select edges by criteria (e.g., center vertical edges)\n# For example, selecting edges along a specific axis or position\nfor edge in bm.edges:\n    v1_co = bm.verts[edge.verts[0].index].co\n    v2_co = bm.verts[edge.verts[1].index].co\n    # Example condition: edges near center x=0\n    if abs(v1_co.x) < 0.01 and abs(v2_co.x) < 0.01:\n        edge.select_set(True)\n        # Mark as seam\n        edge.seam = True\nbmesh.update_edit_mesh(obj.data)\n\n# Exit edit mode\nbpy.ops.object.mode_set(mode='OBJECT')\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Art Assets in SurfaceArt Module (Lua)\nDESCRIPTION: This script demonstrates how to define and set custom art assets for the SurfaceArt module by calling the `configure` function with a table of asset definitions. It requires accessing the SurfaceArt module via ReplicatedStorage and setting up asset metadata including name and assetId to replace default assets, enabling tailored visual themes.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/surface-art.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal SurfaceArt = require(ReplicatedStorage:WaitForChild(\"SurfaceArt\"))\n\nlocal customAssets = {\n\tCustomAsset1 = {\n\t\tname = \"Custom Asset 1\",\n\t\tassetId = \"rbxassetid://7322508294\",\n\t},\n\tCustomAsset2 = {\n\t\tname = \"Custom Asset 2\",\n\t\tassetId = \"rbxassetid://7322547665\",\n\t},\n}\n\nSurfaceArt.configure({\n\tassets = customAssets,\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Instance within Function in Luau\nDESCRIPTION: Modifies the `sortGarbage` function to include the creation of a new `ParticleEmitter` instance using `Instance.new()`. This created instance, assigned to the `sparkle` variable, is later used to add visual effects to one of the function's parameters.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-2/multiple-parameters-and-arguments.md#_snippet_2\n\nLANGUAGE: Luau\nCODE:\n```\nlocal function sortGarbage(trash,recyclable)\n       -- Create a new Particle Emitter\n       local sparkle = Instance.new(\"ParticleEmitter\")\n\n   end\n\n   sortGarbage()\n```\n\n----------------------------------------\n\nTITLE: Positioning Middle Trim Assets in Roblox\nDESCRIPTION: A data table showing the exact positioning information for placing the middle trim modular assets around the roof perimeter. Includes asset names, CFrame positions, and orientation values to recreate the sample environment.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/environmental-art/construct-your-world.md#_snippet_13\n\nLANGUAGE: Lua\nCODE:\n```\nExtTrimAShort\t`-24, 26, 195`\t`0, 90, 0`\nExtTrimAMid\t`-24, 26, 194`\t`0, 0, 0`\nExtTrimALong\t`-24, 26, 179`\t`0, 90, 0`\nExtTrimAMid\t`-64, 26, 179`\t`0, 90, 0`\nExtTrimALong\t`-85, 26, 178`\t`0, 0, 0`\nExtTrimAMid\t`-84, 26, 141`\t`0, -90, 0`\nExtTrimALong\t`-64, 26, 141`\t`0, -90, 0`\nExtTrimAMid\t`-24, 26, 141`\t`0, 0, 0`\nExtTrimAShort\t`-24, 26, 126`\t`0, 90, 0`\nExtTrimACorner\t`-24, 26, 194`\t`0, 0, 0`\nExtTrimACorner\t`-24, 26, 179`\t`0, 90, 0`\nExtTrimACorner\t`-84, 26, 178`\t`0, -90, 0`\nExtTrimACorner\t`-84, 26, 142`\t`0, 180, 0`\nExtTrimACorner\t`-24, 26, 141`\t`0, 0, 0`\nExtTrimACorner\t`-24, 26, 126`\t`0, 90, 0`\n```\n\n----------------------------------------\n\nTITLE: Reloading and Updating Plugins in Roblox Studio\nDESCRIPTION: Instructions for reloading and updating plugins within Roblox Studio. Once a plugin script is registered under `Class.PluginDebugService`, developers can right-click to reload or save changes, allowing for iterative development and testing without restarting Studio. This supports debugging and code refinement workflows.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/studio/plugins.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Listing Keys for Different Scopes\nDESCRIPTION: This Python code snippet demonstrates how to list keys in a data store for different scopes using the Open Cloud APIs. It sets up the necessary API object, then calls the `list_entries` method to list keys for the 'global' scope, the 'special' scope, and then for all scopes. It showcases how to use the `scope` and `allScopes` parameters to filter the keys being listed. It assumes a `tutorialFunctions` module with a `DataStores` class that provides the `list_entries` method.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/guides/data-store-api-handling.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Set up\nimport tutorialFunctions\nDatastoresApi = tutorialFunctions.DataStores()\ndatastoreName = \"PlayerInventory\"\n\n# List keys for global scope\nspecialScopeKeys = DatastoresApi.list_entries(datastoreName, scope = \"global\", allScopes = False)\nprint(specialScopeKeys.content)\n# List keys for special scope\nspecialScopeKeys = DatastoresApi.list_entries(datastoreName, scope = \"special\", allScopes = False)\nprint(specialScopeKeys.content)\n# List keys for allScope set to true\nspecialScopeKeys = DatastoresApi.list_entries(datastoreName, allScopes = True)\nprint(specialScopeKeys.content)\n```\n\n----------------------------------------\n\nTITLE: Addressing Missing Dynamic Head FACS Information Error\nDESCRIPTION: Validation failed for the dynamic head (`%s`) due to missing Facial Action Coding System (FACS) information. At least 17 poses must have corresponding FACS controls defined as per documentation.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/validation-errors.md#_snippet_16\n\nLANGUAGE: Text\nCODE:\n```\nFailed validation for dynamic head `%s` due to missing FACS information. You need to provide FACS controls for at least 17 poses (see documentation).\n```\n\n----------------------------------------\n\nTITLE: Configuring Outdoor Floor Blocks in Roblox Studio (Sample)\nDESCRIPTION: Details the part configurations (Size, Position) and property settings (Color, Material, MaterialVariant) needed to replicate the outdoor floor blocks in the central area of the sample Environment Art place file using Roblox Studio. These blocks use the 'Concrete_Tiles_A' material variant.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/environmental-art/construct-your-world.md#_snippet_1\n\nLANGUAGE: Luau\nCODE:\n```\n-- Outdoor Floor Blocks (Blocks)\n-- Part: Middle top area\nSize = Vector3.new(13, 6, 64)\nCFrame.Position = Vector3.new(-86.5, 7, 158)\n\n-- Part: Middle middle area\nSize = Vector3.new(29, 1, 55)\nCFrame.Position = Vector3.new(-45.5, 4.5, 160)\n\n-- Part: Middle bottom area\nSize = Vector3.new(18, 11, 100)\nCFrame.Position = Vector3.new(-14, -0.5, 160)\n\n-- Properties for all outdoor blocks:\nColor = Color3.fromRGB(233, 218, 218)\nMaterial = Enum.Material.Concrete\nMaterialVariant = \"Concrete_Tiles_A\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Wally Package Dependencies in TOML\nDESCRIPTION: Defines project metadata (name, version, registry) and lists external Luau package dependencies (React, ReactRoblox, Cryo) in a `wally.toml` file. Wally uses this file to download and manage these packages, typically placing them in a `Packages` directory within the project. Requires Wally to be installed.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/projects/external-tools.md#_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[package]\nname = \"my-home-directory/my-new-experience\"\nversion = \"0.1.0\"\nregistry = \"https://github.com/UpliftGames/wally-index\"\nrealm = \"shared\"\n\n[dependencies]\nreact = \"jsdotlua/react@17.1.0\"\nreact-roblox = \"jsdotlua/react-roblox@17.1.0\"\ncryo = \"phalanxia/cryo@1.0.3\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Lava Part Reference in Luau\nDESCRIPTION: Creates a local variable named 'lava' and assigns it the Parent of the script instance. This assumes the script is a direct child of the Part intended to act as lava.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/scripting/basic-scripting/deadly-lava.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal lava = script.Parent\n```\n\n----------------------------------------\n\nTITLE: Enabling Future Lighting - Roblox Studio\nDESCRIPTION: This snippet demonstrates how to enable Future lighting in Roblox Studio. The `Technology` property of the `Lighting` service is set to `Future` to enable advanced lighting features and realistic shadow rendering for global and local light sources.  It requires access to the `Lighting` service within the Roblox Studio environment.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/lighting/enhance-outdoor-environments-with-future-lighting.md#_snippet_0\n\nLANGUAGE: Roblox Studio\nCODE:\n```\n1. In the **Explorer** window, select **Lighting**.\n2. In the **Properties** window, click the **Technology** dropdown, then select **Future**.\n```\n\n----------------------------------------\n\nTITLE: Toggling a SelfieMode Action and Reading State in LocalScript - Lua\nDESCRIPTION: Details how to toggle a selfie action on or off using toggleAction and determine the new activation state returned as a boolean. The code demonstrates obtaining the Action object, toggling it, and printing activation status. Inputs are the Action instance; output is the toggle state. Usage is scoped to LocalScripts with the SelfieMode module.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/selfie-mode.md#_snippet_12\n\nLANGUAGE: Lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal SelfieMode = require(ReplicatedStorage:WaitForChild(\"SelfieMode\"))\n\nlocal lockGazeAction = SelfieMode.getAction(SelfieMode.Action.LockGaze)\n\nlocal isEnabled = SelfieMode.toggleAction(lockGazeAction)\n\nif isEnabled then\n\tprint(\"Activated\", lockGazeAction.name)\nelse\n\tprint(\"Deactivated\", lockGazeAction.name)\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Selfie Mode in Lua\nDESCRIPTION: Basic configuration script for the Selfie Mode module. This code disables character movement while in selfie mode, which prevents players from walking away during photo setup.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/selfie-mode.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal SelfieMode = require(ReplicatedStorage:WaitForChild(\"SelfieMode\"))\n\nSelfieMode.configure({\n\tdisableCharacterMovement = true\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Place IDs in MainConfiguration for Roblox - Lua\nDESCRIPTION: This code snippet demonstrates how to declare and populate the _places table within the MainConfiguration Lua script in Roblox, assigning each key to a unique place ID. The table maps logical place names (such as lobby, gameplay_development, and various queues) to their respective Roblox place IDs, facilitating teleportation and cross-association between places. It requires that you obtain and paste in the correct place IDs, and is typically located within ReplicatedFirst → Configurations; ensure all game places are published and their IDs are accurately set. Inputs are numeric Roblox place IDs, and the script does not execute any code but serves as a configuration.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/battle-royale/installation-and-setup.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal RunService = game:GetService(\"RunService\")\nlocal Players = game:GetService(\"Players\")\n\n\nlocal isServer = RunService:IsServer()\nlocal ConfigEvent = nil\n\nlocal _placeOverrides = {}\nlocal _overrides = {}\n\n---\n\n-- List of named places in the game\nlocal _places = {\n lobby = 0123456789,\n gameplay_development = 0,\n queue_default = 0,\n queue_deathmatch = 0,\n queue_teamDeathmatch = 0,\n queue_freePlay = 0\n}\n\n---\n```\n\n----------------------------------------\n\nTITLE: Handling Instance Destruction with Deferred Events (Luau)\nDESCRIPTION: Shows how deferred events affect handlers for events like `Instance.Destroying`. The handler (`onPartDestroying`) is invoked after the instance (`part`) has already been destroyed because the `Destroy()` call completes after the calling script yields. Accessing the instance's properties or children within the handler might lead to errors or unexpected results.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/scripting/events/deferred.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal part = Instance.new(\"Part\", workspace)\n\nlocal function onPartDestroying()\n\tprint(\"In signal:\", part:GetFullName(), #part:GetChildren())\nend\n\npart.Destroying:Connect(onPartDestroying)\npart:Destroy()\n```\n\n----------------------------------------\n\nTITLE: Checking Player Funds and Granting Upgrade - Roblox Lua\nDESCRIPTION: This Lua snippet, within the `giveUpgrade` function, checks if a player has sufficient funds before granting an upgrade. It retrieves player statistics from the leaderstats, checks if the player's gold is greater than or equal to the upgrade cost, and then subtracts the cost and increases the player's spaces if the condition is met. The player's leaderstats must contain a \"Gold\" and \"Spaces\" IntValue objects.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/adventure-game-series/buying-upgrades.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal function giveUpgrade(player)\n\tprint(\"Someone clicked the button\")\n\t-- Get's the player's leaderboard to get other IntValues\n\tlocal playerStats = player:FindFirstChild(\"leaderstats\")\n\n   if playerStats then\n      -- Gets the player's money and spaces to make changes\n      local playerGold = playerStats:FindFirstChild(\"Gold\")\n      local playerSpaces = playerStats:FindFirstChild(\"Spaces\")\n\n\t   -- Checks if player has enough money to afford the upgrade\n      if playerGold and playerSpaces and playerGold.Value >= upgradeCost then\n      \tprint(\"Player can buy item\")\n      \t-- Subtract the item's cost from the player's money\n         playerGold.Value -= upgradeCost\n         playerSpaces.Value += newSpaces\n      end\n   end\nend\n```\n\n----------------------------------------\n\nTITLE: Handling Proximity Prompt Events with ProximityPromptService in Lua\nDESCRIPTION: Demonstrates a basic framework in Lua for globally handling Proximity Prompt interactions using the ProximityPromptService. It shows how to get the service, define placeholder functions for Triggered, HoldBegan, and HoldEnded events, and connect these events to their respective handlers. This pattern centralizes prompt logic, avoiding duplicate code.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/ui/proximity-prompts.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal ProximityPromptService = game:GetService(\"ProximityPromptService\")\n\n-- Detect when prompt is triggered\nlocal function onPromptTriggered(promptObject, player)\n\nend\n\n-- Detect when prompt hold begins\nlocal function onPromptHoldBegan(promptObject, player)\n\nend\n\n-- Detect when prompt hold ends\nlocal function onPromptHoldEnded(promptObject, player)\n\nend\n\n-- Connect prompt events to handling functions\nProximityPromptService.PromptTriggered:Connect(onPromptTriggered)\nProximityPromptService.PromptButtonHoldBegan:Connect(onPromptHoldBegan)\nProximityPromptService.PromptButtonHoldEnded:Connect(onPromptHoldEnded)\n```\n\n----------------------------------------\n\nTITLE: Using Library.task.defer for deferred execution in Roblox Lua\nDESCRIPTION: This snippet shows how to defer the execution of a function using Library.task.defer(), scheduling it to run on the next resumable cycle without immediate execution. It is ideal for replacing spawn to avoid blocking the main thread and for scheduling lightweight tasks efficiently.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/scripting/scheduler.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\ntask.defer(print, \"A\")\nprint(\"B\")\n--&gt; B\n--&gt; A\n```\n\n----------------------------------------\n\nTITLE: Incorrectly Accessing Local Animation Data in Roblox (Lua)\nDESCRIPTION: Illustrates an incorrect and potentially problematic method of accessing local animation data by directly referencing the `ServerStorage.RBX_ANIMSAVES` path with the rig's name. This approach is discouraged as it can lead to conflicts if multiple rigs share the same name in `ServerStorage`.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/animation/editor.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal myAnim = ServerStorage.RBX_ANIMSAVES.myRig.myAnimation\n-- Can conflict with other rigs sharing the same name\n```\n\n----------------------------------------\n\nTITLE: Starting the Roblox OAuth 2.0 Sample Node.js App\nDESCRIPTION: This snippet shows the command to start the Node.js server for the Roblox OAuth 2.0 sample app using npm start. After running this command, the app will listen on the configured port and handle OAuth flows and related routes as implemented.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/auth/oauth2-sample.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Assigning a String Value to a Dictionary Key - Lua\nDESCRIPTION: Expands the dictionary to assign a string value to the 'Name' key, showing dictionary definition with key-value syntax in Luau. Accepts any valid string; initializes the enemy with a specific name.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-5/intro-to-dictionaries.md#_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal enemy = {\n\tName = \"Spike\",\n}\n```\n\n----------------------------------------\n\nTITLE: Casting Optional Types Post-Guard in Luau\nDESCRIPTION: This code provides a workaround for the type narrowing limitation shown previously. By explicitly casting the optional variable to a non-optional type (`number`) after the guard check using `:: number`, a new variable (`parameter`) is created with the guaranteed non-nil type, allowing subsequent operations like addition without type errors.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/plant-reference-project.md#_snippet_4\n\nLANGUAGE: Luau\nCODE:\n```\n--!strict\n\nlocal function foo(optionalParameter: number?)\n\tif not optionalParameter then\n\t\treturn\n\tend\n\n\tlocal parameter = optionalParameter :: number\n\n\tprint(parameter + 1)\nend\n```\n\n----------------------------------------\n\nTITLE: Addressing Disallowed Attributes Error\nDESCRIPTION: This error indicates that the specified asset (`%s`) contains disallowed attributes in its properties. The listed attributes (`%s`) must be removed.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/validation-errors.md#_snippet_13\n\nLANGUAGE: Text\nCODE:\n```\n`%s` contains attributes in its properties that are not allowed. You need to remove the following attributes: `%s`\n```\n\n----------------------------------------\n\nTITLE: Creating Hyperlinked Button in MDX\nDESCRIPTION: This snippet illustrates the usage of the MDX Button component to create a clickable element that functions as a hyperlink. It utilizes the `href` prop to specify the destination URL and accepts `size`, `variant`, and a JavaScript object for inline `style` properties to control its presentation.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/creator-programs/brand-developer-directory.md#_snippet_1\n\nLANGUAGE: MDX\nCODE:\n```\n<Button href=\"https://survey.roblox.com/jfe/form/SV_802xyrv9VHb7VHM\" size='large' variant='contained' style={{width:200}}>Apply</Button>\n```\n\n----------------------------------------\n\nTITLE: Initializing a for Loop in Luau\nDESCRIPTION: Begins the declaration of a 'for' loop structure in Luau. This keyword initiates a loop that will repeat a block of code a specific number of times.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-4/intro-to-for-loops.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nfor\n```\n\n----------------------------------------\n\nTITLE: Finding Humanoid Objects in Roblox Luau\nDESCRIPTION: Implements a function that detects when a part is touched and checks if the touching object contains a Humanoid component, which is necessary for applying speed modifications to players.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-3/powerups-with-if-statements.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal function onTouch(otherPart)\n  local character = otherPart.Parent\n  local humanoid = character:FindFirstChildWhichIsA(\"Humanoid\")\n\n  if humanoid then\n    print(\"A Humanoid was found\")\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Theming SelfieMode UI via setTheme in LocalScript - Lua\nDESCRIPTION: Demonstrates customizing SelfieMode's visual style by calling setTheme with a table of UI style properties. This requires SelfieMode loaded from ReplicatedStorage, and the theme table may include font, text size, colors, and padding attributes. Changes apply to all players using the calling LocalScript; no return value.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/selfie-mode.md#_snippet_13\n\nLANGUAGE: Lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal SelfieMode = require(ReplicatedStorage:WaitForChild(\"SelfieMode\"))\n\nSelfieMode.setTheme({\n\ttextSize = 20,\n\tfont = Enum.Font.Michroma,\n\tbackgroundColor = Color3.fromRGB(0, 40, 75),\n})\n```\n\n----------------------------------------\n\nTITLE: Examples of Built-in Variadic Functions in Luau\nDESCRIPTION: Demonstrates the usage of built-in Luau variadic functions like `print` and `string.format`, which can accept a variable number of arguments. It shows `print` taking multiple arguments and `string.format` using placeholders. It also shows `string.char` taking multiple number arguments.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/functions.md#_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nprint(2, \"+\", 2, \"=\", 2 + 2) --2 + 2 = 4\nprint(string.format(\"The %s is a %s!\", \"cake\", \"lie\")) -- The cake is a lie!\nprint(string.char(115, 101, 99, 114, 101, 116)) -- secret\n```\n\n----------------------------------------\n\nTITLE: Initializing Operation Path (from JSON Response)\nDESCRIPTION: This code snippet retrieves and assigns the 'path' value from a JSON response, typically used for asynchronous operations. This allows subsequent operations to work on the result of an earlier operation.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/guides/instance.md#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\noperationPath = response.json()['path']\n```\n\n----------------------------------------\n\nTITLE: Server attribute example\nDESCRIPTION: This Lua code snippet demonstrates how to use MatchmakingService to manage server attributes.  It initializes server attributes for testing in Studio, retrieves the Level attribute, and updates the Level attribute to \"Advanced\". Error handling is implemented using conditional statements to check for success and print error messages.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/matchmaking/attributes-and-signals.md#_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\nlocal MatchmakingService = game::GetService(\"MatchmakingService\")\nlocal RunService = game:GetService(\"RunService\")\n\nif RunService:IsStudio() then\n  -- Sets up initial attributes and schema for testing\n  MatchmakingService:InitializeServerAttributesForStudio(\n  {\n    Level = \"Advanced\",\n    Elo = 123.456,\n    TrainingMode = true\n  })\nend\n\n-- Retrieves the Level attribute\nlocal currentLevel, error = MatchmakingService:GetServerAttribute(\"Level\")\n\nif error then\n  print(error)\nelse\n  print(\"Current level: \" .. currentLevel)\nend\n\n-- Updates the Level attribute value to Advanced\nlocal success, error = MatchmakingService:SetServerAttribute(\"Level\", \"Advanced\")\nif not success then\n  print(\"Failed to update server attribute [Level] to [Advanced] due to error: \" .. error)\nelse\n  print(\"Successfully set [Level] to [Advanced]\")\nend\n```\n\n----------------------------------------\n\nTITLE: Client Schema OnRun with Audio Configuration (duplicate)\nDESCRIPTION: This code snippet demonstrates how to define the OnRun lifecycle hook in a client-side event sequencer schema and use the 'audio' configuration to play a sound. It sets the start time and sound ID and defines OnStart and OnEnd functions for the audio.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/event-sequencer.md#_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nSchema.OnRun = function()\n\tprint(\"OnRun (Client)\")\n\n\tlocal MainAudio = Schema:audio({\n\t\tStartTime = 1,\n\t\tSoundId = \"rbxassetid://1838673350\",\n\t\tOnStart = function(self)\n\t\t\tprint(\"Audio playing\")\n\t\tend,\n\t\tOnEnd = function(self)\n\t\t\tprint(\"Audio ended\")\n\t\tend\n\t})\nend\n```\n\n----------------------------------------\n\nTITLE: Advanced Local Variable Shadowing Example in Luau\nDESCRIPTION: Provides a detailed example of shadowing. An outer `fruitName` variable is declared. Inside the `getFruitByColor` function, a new local `fruitName` variable is declared, shadowing the outer one. This inner variable is assigned a value within a nested `for` loop and returned, while the outer `fruitName` remains unchanged.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/scope.md#_snippet_7\n\nLANGUAGE: Luau\nCODE:\n```\nlocal fruitName = \"Chocolate\"\nlocal fruitTable = {\n\tLemon = \"Yellow\",\n\tApple = \"Red\",\n\tOrange = \"Orange\"\n}\n\nlocal function getFruitByColor(color)\n\tlocal fruitName\n\tfor key, value in fruitTable do\n\t\tif value == color then\n\t\t\tfruitName = key\n\t\tend\n\tend\n\treturn fruitName\nend\n\nlocal fruit = getFruitByColor(\"Yellow\")\nprint(fruit) -- Lemon\nprint(fruit .. \", not \" .. fruitName) -- Lemon, not Chocolate\n```\n\n----------------------------------------\n\nTITLE: Shallow Freezing a Table to Make it Read-Only in Luau - Lua\nDESCRIPTION: Uses Luau's built-in `table.freeze()` function to make a table immutable at the top level, preventing modification attempts. Shows that attempts to update frozen fields will fail. Requires only standard Luau. Input is a mutable table; after freezing, writes to the table raise errors or are ignored.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/tables.md#_snippet_18\n\nLANGUAGE: lua\nCODE:\n```\nlocal target = {\n\tkey = \"value\",\n\tengine = \"Roblox\",\n\tplayerID = 505306092\n}\n\ntable.freeze(target)\ntarget.playerID = 1 --> attempt to modify a readonly table\n```\n\n----------------------------------------\n\nTITLE: Using TextChatService:DisplayBubble to Manually Show Chat Bubbles in Roblox Lua\nDESCRIPTION: This example demonstrates manually displaying chat bubbles for NPCs by invoking TextChatService:DisplayBubble with the NPC's character instance and message text. This method is intended for client-side scripts, such as those in StarterPlayerScripts or LocalScripts, to show chat bubbles independently of player messages. It can be combined with OnBubbleAdded for consistent customization.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/chat/bubble-chat.md#_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\nlocal TextChatService = game:GetService(\"TextChatService\")\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal prompt = Workspace.SomeNPC.ProximityPrompt\nlocal head = prompt.Parent:WaitForChild(\"Head\")\n\nprompt.Triggered:Connect(function()\n\tTextChatService:DisplayBubble(head, \"Hello world!\")\nend)\n```\n\n----------------------------------------\n\nTITLE: discord_bot.py\nDESCRIPTION: Implements a Discord bot that listens for Roblox rights to erasure webhook messages, parses the message content, and invokes data store deletion functions. Sends confirmation or failure messages depending on the outcome.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/webhooks/automate-right-to-erasure.md#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nimport discord\n\nimport bot_config\nimport data_stores_api\nimport message_parser\n\ndef run():\n    intents = discord.Intents.default()\n    client = discord.Client(intents=intents)\n\n    @client.event\n    async def on_ready():\n        print(f\"Logged in as {client.user}\")\n\n    @client.event\n    async def on_message(message):\n        # Parses and validates message\n        user_id, start_place_ids = message_parser.parse_message(message)\n        if not user_id or not start_place_ids:\n            return\n\n        # Deletes user data from standard data stores\n        successes, failures = data_stores_api.delete_standard_data_stores(user_id, start_place_ids)\n        if successes:\n            await message.channel.send(f\"Deleted standard data stores data for user ID: {user_id}\")\n        if failures:\n            await message.channel.send(f\"Failed to delete standard data stores data for user ID: {user_id}\")\n\n        # Deletes user data from ordered data stores\n        successes, failures = data_stores_api.delete_ordered_data_stores(user_id, start_place_ids)\n        if successes:\n            await message.channel.send(f\"Deleted ordered data stores data for user ID: {user_id}\")\n        if failures:\n            await message.channel.send(f\"Failed to delete ordered data stores data for user ID: {user_id}\")\n\n    client.run(bot_config.BOT_TOKEN)\n\n```\n\n----------------------------------------\n\nTITLE: Assigning a Metatable After Table Creation in Lua\nDESCRIPTION: Illustrates the standard method of assigning an empty metatable to a previously created table `x` using the `setmetatable` function.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/metatables.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal x = {}\nsetmetatable(x, {})\n```\n\n----------------------------------------\n\nTITLE: Calculating Voice Chat Signal Score\nDESCRIPTION: Calculates a categorical signal score representing the ratio of players in the server with the same voice chat setting as the joining player.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/matchmaking/attributes-and-signals.md#_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nvoiceChatSignalScore = (# players with same voice chat setting as joining player) / (# players on the server)\n```\n\n----------------------------------------\n\nTITLE: Assigning AnimationId at Runtime Using Generated Animations Module in Roblox Lua\nDESCRIPTION: This Lua snippet demonstrates how to instantiate a new Animation object in Roblox Studio at runtime and assign its AnimationId property using the animation asset ID obtained through the custom Animations module. The Animations module is expected to expose a 'getAnimation' function that retrieves the correct asset ID string given an animation name key. This decouples hardcoded asset IDs from scripts, allowing dynamic switching of animation sources based on ownership or transfer state.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/projects/transfer-animations.md#_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\nlocal Animations = require(PATH.TO.ANIMATIONS)\nlocal warriorWalk = Instance.new(\"Animation\")\nwarriorWalk.AnimationId = Animations.getAnimation(\"Warrior_Walk\")\n```\n\n----------------------------------------\n\nTITLE: Configuring the SpawnWithFriends Module in Roblox Lua\nDESCRIPTION: This Lua script demonstrates how to customize the behavior of the SpawnWithFriends module. It requires the module from ReplicatedStorage and then calls its `configure` function, passing a table with various settings. Options include enabling/disabling automatic teleportation on respawn (`teleportToFriendOnRespawn`), setting the distance between spawned players (`teleportDistance`), defining a maximum velocity for teleport candidates (`maxCharacterVelocity`), ignoring friendship status (`bypassFriendshipCheck`), and enabling/disabling logs (`showLogs`).\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/spawn-with-friends.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal SpawnWithFriends = require(ReplicatedStorage:WaitForChild(\"SpawnWithFriends\"))\n\nSpawnWithFriends.configure({\n\tteleportToFriendOnRespawn = true,\n\tteleportDistance = 5,\n\tmaxCharacterVelocity = 48,\n\tbypassFriendshipCheck = false,\n\tshowLogs = false\n})\n```\n\n----------------------------------------\n\nTITLE: Validating Ray Angles Using Tolerance Values in Roblox Lua\nDESCRIPTION: This Lua snippet validates that a ray's claimed direction from a blast is within a permissible angle threshold, helping to prevent cheating. It computes the direction from the blast origin to the claimed destination, finds the angle to the expected direction, and compares it to BLAST_ANGLE_SANITY_CHECK_TOLERANCE_DEGREES. Dependencies include helper functions for direction calculation and predefined tolerance values. Inputs are client ray result data and server-calculated expectations; output is a boolean indicating whether the angle error is within the allowed range.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/gameplay-scripting/detect-hits.md#_snippet_5\n\nLANGUAGE: Lua\nCODE:\n```\nlocal claimedDirection = (rayResult.destination.Position - originCFrame.Position).Unit\nlocal directionErrorDegrees = getAngleBetweenDirections(claimedDirection, expectedDirection)\n\nreturn directionErrorDegrees <= ToleranceValues.BLAST_ANGLE_SANITY_CHECK_TOLERANCE_DEGREES\n```\n\n----------------------------------------\n\nTITLE: Lua code for high-frequency raycasting in Roblox with profiling\nDESCRIPTION: This script performs 1,500 raycasts per second in random directions during the 'Stepped' event, which can cause performance issues. Wrapping the raycast loop with profiling functions helps identify the bottleneck. The code depends on Roblox's 'Workspace', 'RunService', and a 'getRandomPosition()' helper function and is intended to be used within a Roblox environment to simulate spawning numerous rays for testing performance.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/studio/microprofiler/use-microprofiler.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal RAYS_PER_SECOND = 1500\n\nlocal function onStepped()\n\n\tdebug.profilebegin(\"Raycast Spam\")\n\n\tfor _ = 1, RAYS_PER_SECOND do\n\t\tlocal startPosition = getRandomPosition()\n\t\tlocal endPosition = getRandomPosition()\n\t\tlocal direction = endPosition - startPosition\n\n\t\tWorkspace:Raycast(\n\t\t\tstartPosition,\n\t\t\tendPosition\n\t\t)\n\tend\n\n\tdebug.profileend()\n\nend\n\nRunService.Stepped:Connect(onStepped)\n```\n\n----------------------------------------\n\nTITLE: UI Tween Sequence (Lua)\nDESCRIPTION: This Lua code demonstrates how to chain UI animations using the `Completed` event of TweenBase. It first tweens the position of an ImageLabel to the center of the screen and then rotates it by 45 degrees after the position tween completes. It requires TweenService and Players service and assumes the existence of PlayerGui, ScreenGui, and an ImageLabel object. The AnchorPoint of ImageLabel is set to the center.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/ui/animation.md#_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\nlocal TweenService = game:GetService(\"TweenService\")\nlocal Players = game:GetService(\"Players\")\n\nlocal PlayerGui = Players.LocalPlayer:WaitForChild(\"PlayerGui\")\nlocal ScreenGui = PlayerGui:WaitForChild(\"ScreenGui\")\nlocal object = ScreenGui:WaitForChild(\"ImageLabel\")\n\nobject.AnchorPoint = Vector2.new(0.5, 0.5)\n\nlocal targetPosition = UDim2.new(0.5, 0, 0.5, 0)\nlocal targetRotation = 45\n\nlocal tweenInfo = TweenInfo.new(2)\nlocal positionTween = TweenService:Create(object, tweenInfo, {Position = targetPosition})\nlocal rotationTween = TweenService:Create(object, tweenInfo, {Rotation = targetRotation})\n\n-- Initially play position tween\npositionTween:Play()\n\n-- Play rotation tween upon completion of position tween\npositionTween.Completed:Connect(function()\n\trotationTween:Play()\nend)\n```\n\n----------------------------------------\n\nTITLE: Registering Collision Groups with PhysicsService (Lua)\nDESCRIPTION: Demonstrates how to programmatically register custom collision groups in Roblox using the PhysicsService. It retrieves the service and calls the RegisterCollisionGroup method for each desired group name. Registering groups in a single script is recommended to avoid potential race conditions.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/workspace/collisions.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal PhysicsService = game:GetService(\"PhysicsService\")\n\nlocal cubes = \"Cubes\"\nlocal doors = \"Doors\"\n\n-- Register two collision groups\nPhysicsService:RegisterCollisionGroup(cubes)\nPhysicsService:RegisterCollisionGroup(doors)\n```\n\n----------------------------------------\n\nTITLE: Accessing Array Element and Modifying Part Properties in Luau\nDESCRIPTION: Within the `for` loop, retrieves the part instance from `pathArray` at the current `partIndex`. It then modifies the part's `CanCollide` property to `false` and `Transparency` to `1`, causing the part to become non-collidable and invisible.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-5/loops-and-arrays.md#_snippet_5\n\nLANGUAGE: Luau\nCODE:\n```\nfor partIndex = 1, #pathArray  do\n   task.wait(VANISH_RATE)\n   local whichPart = pathArray[partIndex]\n   whichPart.CanCollide = false\n   whichPart.Transparency = 1\nend\n```\n\n----------------------------------------\n\nTITLE: Model Hierarchy Representation in Roblox Explorer - text\nDESCRIPTION: This text-based pseudo-code snippet demonstrates how a Roblox Model can be structured within the Explorer window. It showcases parent-child relationships between components commonly found in an interactive model (such as ParticleEmitters, MeshParts, SpringConstraints, and scripts inside a ClickDetector). The Model node acts as the container, visually expressing the relationship and script placement within the hierarchy. This illustration is for documentation and explanatory purposes only, and is not executable code.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/unity.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nModel\n|- ParticleEmitter\n|- MeshPart\n|- SpringConstraint\n|- ClickDetector\n|  |- Script\n```\n\n----------------------------------------\n\nTITLE: Moving Object to a Specific Pivot Location with PivotTo() in Roblox Lua\nDESCRIPTION: Shows usage of the Class.PVInstance:PivotTo() method to reposition an object so its pivot aligns with a specified Datatype.CFrame. This allows consistent and uniform movement of parts or models in the world by directly manipulating their pivot points. Requires the target CFrame as input and adjusts the object's position accordingly. No external libraries needed; uses Roblox's built-in API.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/studio/pivot-tools.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\n-- Example: Move an object so its pivot is at desiredCFrame\nsomeInstance:PivotTo(desiredCFrame)\n```\n\n----------------------------------------\n\nTITLE: Filtering by Comparing All Fields of Vector3 Property\nDESCRIPTION: Finds instances where each component (X, Y, Z) of the `Size` property is greater than the corresponding component in '20, 5, 20'. Requires quoting the composite value and applies the operator to each field.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/studio/explorer.md#_snippet_6\n\nLANGUAGE: RobloxSearchQuery\nCODE:\n```\nSize > \"20, 5, 20\"\n```\n\n----------------------------------------\n\nTITLE: Filling the Volcano Caldera with Additional Webby and Lighter Webby Particle Emitters\nDESCRIPTION: This snippet details setting up supplementary ParticleEmitters with different textures, colors, sizes, transparency behaviors, and emission parameters to fill the caldera with additional lava splashes, creating depth and dynamic movement in the volcano eruption scene.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/vfx/create-volcanoes.md#_snippet_9\n\nLANGUAGE: Lua\nCODE:\n```\n-- Insert ParticleEmitter for lighter webby splashes in caldera\nlocal fillEmitter = Instance.new(\"ParticleEmitter\")\nfillEmitter.Name = \"SplashFill\"\nfillEmitter.Texture = \"rbxassetid://17082061238\"\nfillEmitter.Orientation = Enum.ParticleOrientation.FacingCameraWorldUp\nfillEmitter.Color = Color3.fromRGB(255, 152, 33)\n\n-- Size animation\nfillEmitter.SizeSequence = NumberSequence.new({\n    NumberSequenceKeypoint.new(0, 1.25, 0.388),\n    NumberSequenceKeypoint.new(1, 6.38, 0.563)\n})\n\n-- Transparency animation\nfillEmitter.TransparencySequence = NumberSequence.new({\n    NumberSequenceKeypoint.new(0, 1, 0),\n    NumberSequenceKeypoint.new(0.19, 0, 0),\n    NumberSequenceKeypoint.new(0.795, 0, 0),\n    NumberSequenceKeypoint.new(1, 1, 0)\n})\n\n-- Offset and lifetime\nfillEmitter.ZOffset = 1\nfillEmitter.Lifetime = 1.5\n\n-- Emission rate and movement\nfillEmitter.Rate = 8\nfillEmitter.Rotation = NumberRange.new(0, 360)\nfillEmitter.RotSpeed = NumberRange.new(-50, 50)\nfillEmitter.Speed = NumberRange.new(12, 20)\nfillEmitter.SpreadAngle = Vector2.new(45, 45)\nfillEmitter.Acceleration = Vector3.new(0, -25, 0)\n\n-- Light properties\nfillEmitter.LightEmission = 1\nfillEmitter.LightInfluence = 0\nfillEmitter.Brightness = 8\n\n-- Parent the emitter to the caldera part\nfillEmitter.Parent = workspace.Splashes.SplashingLava\n\n```\n\n----------------------------------------\n\nTITLE: Creating Player Name Text Label\nDESCRIPTION: This snippet describes how to add a TextLabel for displaying the player's name, including settings for font, size, alignment, and transparency. It ensures the name is scalable and positioned correctly relative to other UI elements.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/user-interface-design/implement-designs-in-studio.md#_snippet_13\n\nLANGUAGE: Roblox Lua\nCODE:\n```\n<!-- No code provided; involves GUI setup for player name display -->\n```\n\n----------------------------------------\n\nTITLE: Combining Asset Types, Game Passes, and Badges in Filter - HTTP\nDESCRIPTION: This snippet filters items by specified asset types, includes game passes by setting 'gamePasses=true', and excludes badges using 'badges=false'. To use, compose the filter and attach it as a query string in the API call. The API will ignore badge items even if the asset types include badge categories.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/reference/patterns.md#_snippet_9\n\nLANGUAGE: HTTP\nCODE:\n```\nfilter=inventoryItemAssetTypes=HAT,CLASSIC_PANTS,TSHIRT_ACCESSORY;gamePasses=true;badges=false\n```\n\n----------------------------------------\n\nTITLE: Handling Body Part Mesh Load Failure\nDESCRIPTION: This error occurs when the system fails to load the mesh for a specific body part (`%s`). Ensure the body part instance exists and its mesh data is valid.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/validation-errors.md#_snippet_49\n\nLANGUAGE: Text\nCODE:\n```\nFailed to load body part mesh `%s`. Make sure body part exists and try again.\n```\n\n----------------------------------------\n\nTITLE: Creating Responsive Grid Layout in JSX\nDESCRIPTION: Demonstrates how to use Material UI Grid components to create a responsive layout with specific column spans for different screen sizes (XSmall, Medium, Large). It arranges items in rows and columns with specified gaps and margins. Requires the Material UI library.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/index.md#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<Grid item container XSmall={12} Medium={6} Large={4} direction=\"row\" style={{gap: 24, marginBottom: 12}}>\n<Grid item container wrap=\"nowrap\" direction=\"column\" style={{gap: 8, flex: 1}}>\n    {/* Content goes here */}\n</Grid>\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Using Flatten Tool to Level the Terrain Sphere\nDESCRIPTION: Configures the Flatten tool to create a flat surface on the terrain sphere, facilitating navigation and further terrain shaping. It involves selecting the Flatten option, adjusting size and fixed plane settings, and applying the flattening through mouse drag. Dependencies include Terrain Editor's Flatten tool and default settings.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/core/building/create-an-environment-with-terrain.md#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n- In the **Terrain Editor** window, click the **Flatten** button.\n- Set **Brush Size** to 18.\n- Set **Flatten Plane** to **Fixed** and **Fixed Y Plane** to 0.\n- In the viewport, click and drag to flatten the sphere's top surface.\n- Then, select the **Sculpt** tool to shape edges organically.\n```\n\n----------------------------------------\n\nTITLE: Boat Operation Function in Lua\nDESCRIPTION: A function that handles the boat transportation sequence when a character reaches a PathfindingLink with the \"UseBoat\" label. It seats the character, moves the boat, and continues the path when reaching the destination.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/characters/pathfinding.md#_snippet_7\n\nLANGUAGE: Lua\nCODE:\n```\nfunction useBoat()\n\tlocal boat = Workspace.BoatModel\n\n\thumanoid.Seated:Connect(function()\n\t\t-- Start boat moving if agent is seated\n\t\tif humanoid.Sit then\n\t\t\ttask.wait(1)\n\t\t\tboat.CylindricalConstraint.Velocity = 5\n\t\tend\n\t\t-- Detect constraint position in relation to island\n\t\tlocal boatPositionConnection\n\t\tboatPositionConnection = RunService.PostSimulation:Connect(function()\n\t\t\t-- Stop boat when next to island\n\t\t\tif boat.CylindricalConstraint.CurrentPosition >= 94 then\n\t\t\t\tboatPositionConnection:Disconnect()\n\t\t\t\tboat.CylindricalConstraint.Velocity = 0\n\t\t\t\ttask.wait(1)\n\t\t\t\t-- Unseat agent and continue to destination\n\t\t\t\thumanoid.Sit = false\n\t\t\t\thumanoid:MoveTo(waypoints[nextWaypointIndex].Position)\n\t\t\tend\n\t\tend)\n\tend)\nend\n```\n\n----------------------------------------\n\nTITLE: Controlling GUI Visibility with PhotoBooth Lua\nDESCRIPTION: This Lua code controls the visibility of ScreenGuis and CoreGuis during the photo-taking process. It retrieves necessary services such as Players, ReplicatedStorage, and StarterGui. It defines `hideOtherGuis` and `showOtherGuis` callbacks to manage GUI visibility. It also creates a special GUI that remains visible by setting an attribute. Dependencies include the PhotoBooth module and the Roblox API services for Players, ReplicatedStorage, and StarterGui.  The `hideOtherGuis` callback hides all non-attributed ScreenGuis and the player list CoreGui, while `showOtherGuis` restores them.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/photo-booth.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal StarterGui = game:GetService(\"StarterGui\")\n\nlocal PhotoBooth = require(ReplicatedStorage:WaitForChild(\"PhotoBooth\"))\n\nlocal player = Players.LocalPlayer\nlocal playerGui = player:WaitForChild(\"PlayerGui\")\nlocal hiddenInstances = {}\n\n-- Create a screen GUI that will not be hidden\nlocal specialGuiInstance = Instance.new(\"ScreenGui\")\n-- Draw the screen GUI above the photo booth GUI\nspecialGuiInstance.DisplayOrder = 1\nspecialGuiInstance.Parent = playerGui\n-- Set attribute on screen GUI to prevent hiding\nspecialGuiInstance:SetAttribute(\"ShowInPhotoBooth\", true)\n-- Add text label to the GUI\nlocal specialLabel = Instance.new(\"TextLabel\")\nspecialLabel.Size = UDim2.fromScale(1, 0.1)\nspecialLabel.Text = \"Remains visible when taking a photo\"\nspecialLabel.Font = Enum.Font.GothamMedium\nspecialLabel.TextSize = 24\nspecialLabel.Parent = specialGuiInstance\n\nPhotoBooth.hideOtherGuis(function()\n\t-- Hide all developer-defined screen GUIs except those marked with attribute\n\tlocal instances = playerGui:GetChildren()\n\tfor _, instance in instances do\n\t\tif instance:IsA(\"ScreenGui\") and not instance:GetAttribute(\"ShowInPhotoBooth\") and instance.Enabled then\n\t\t\tinstance.Enabled = false\n\t\ttable.insert(hiddenInstances, instance)\n\t\tend\n\tend\n\t-- Hide specific core GUIs\n\tStarterGui:SetCoreGuiEnabled(Enum.CoreGuiType.PlayerList, false)\nend)\n\nPhotoBooth.showOtherGuis(function()\n\t-- Show all developer-defined screen GUIs that were hidden\n\tfor _, instance in hiddenInstances do\n\t\tinstance.Enabled = true\n\tend\n\thiddenInstances = {}\n\t-- Show specific core GUIs that were hidden\n\tStarterGui:SetCoreGuiEnabled(Enum.CoreGuiType.PlayerList, true)\nend)\n```\n\n----------------------------------------\n\nTITLE: Applying Impulse on Touch in Roblox (Lua)\nDESCRIPTION: This Lua script, intended for a \"JumpPad\" part, listens for `Touched` events. When a touch occurs, it checks if the touching part belongs to a character and is specifically the \"LeftFoot\". If so, it applies an upward impulse force (Vector3.new(0, 2500, 0)) to the assembly the \"LeftFoot\" belongs to using the `ApplyImpulse` method, causing the character to launch upwards. It requires a part named \"JumpPad\" with this script inside and relies on the standard Roblox character model structure.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/physics/create-moving-objects.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal volume = script.Parent\n\nlocal function onTouched(other)\n\tlocal impulse = Vector3.new(0, 2500, 0)\n\tlocal character = other.Parent\n\tlocal humanoid = character:FindFirstChildWhichIsA(\"Humanoid\")\n\tif humanoid and other.Name == \"LeftFoot\" then\n\t\tother:ApplyImpulse(impulse)\n\tend\nend\n\nvolume.Touched:Connect(onTouched)\n\n```\n\n----------------------------------------\n\nTITLE: Handling Scavenger Hunt Collection Events (Lua)\nDESCRIPTION: This server-side Lua script shows how to connect functions to the `collected` and `allCollected` events fired by the ScavengerHunt module. The `collected` event triggers when a player collects a single item (token or region), providing the player object and item name. The `allCollected` event triggers once per player when they have collected all items, providing the player object, suitable for awarding badges or other rewards. Requires the ScavengerHunt module in `ReplicatedStorage`.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/scavenger-hunt.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal ScavengerHunt = require(ReplicatedStorage:WaitForChild(\"ScavengerHunt\"))\n\nScavengerHunt.collected:Connect(function(player, itemName)\n\tprint(player.DisplayName, itemName)\nend)\n\nScavengerHunt.allCollected:Connect(function(player)\n\tprint(player.DisplayName .. \" completed the hunt!\")\nend)\n```\n\n----------------------------------------\n\nTITLE: Using Roblox Typewriter Module Script - Lua\nDESCRIPTION: This Lua LocalScript is placed inside a `TextLabel` and utilizes the `AnimateUI` module to apply the typewriter effect. It loads the module from ReplicatedStorage, defines text messages (including RichText examples), and calls the `AnimateUI.typeWrite` function multiple times with specific text strings and character delay parameters, using `task.wait` for delays between full messages.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/ui/animation.md#_snippet_14\n\nLANGUAGE: Lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal AnimateUI = require(ReplicatedStorage:WaitForChild(\"AnimateUI\"))\n\nlocal label = script.Parent\n\n-- Load translator if game is localized\n--AnimateUI.loadTranslator()\n\nlocal message1 = [[Beyond this door is the<br /><font size=\"46\" color=\"rgb(255,50,25)\">Great Zorgoth...</font> <font size=\"40\">🗡</font>]]\nAnimateUI.typeWrite(label, message1, 0.05)\n\ntask.wait(1)\n\nlocal message2 = [[...who rules this dungeon <font color=\"rgb(255,200,50)\">unchallenged!</font> <font size=\"30\">😈</font>]]\nAnimateUI.typeWrite(label, message2, 0.05)\n```\n\n----------------------------------------\n\nTITLE: Playing Retrieved Emote - EmoteBar - Lua\nDESCRIPTION: Illustrates how to play an emote after retrieving it using the `getEmote` function. It first gets the \"Shrug\" emote and then passes the returned emote object to the `playEmote` function to trigger the animation. This function must be called from a LocalScript.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/emote-bar.md#_snippet_8\n\nLANGUAGE: Lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal EmoteBar = require(ReplicatedStorage:WaitForChild(\"EmoteBar\"))\n\nlocal shrug = EmoteBar.getEmote(\"Shrug\")\nEmoteBar.playEmote(shrug)\n```\n\n----------------------------------------\n\nTITLE: Monitoring DragFrame Changes for Real-time Position Tracking\nDESCRIPTION: Connects to the DragFrame property change event of a DragDetector to track and log position changes during drag operations. This allows for real-time monitoring of the object's movement.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/ui/3D-drag-detectors.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal dragDetector = script.Parent.DragDetector\n\ndragDetector:GetPropertyChangedSignal(\"DragFrame\"):Connect(function()\n\tlocal currentDragTranslation = dragDetector.DragFrame.Position\n\tprint(currentDragTranslation)\nend)\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Generic List Type in Luau Lua\nDESCRIPTION: Demonstrates applying a generic list type 'List<T>' for lists holding homogenous elements. Shows usage with strings and numbers to specialize the generic, showcasing flexibility and enhanced type safety for collections.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/type-checking.md#_snippet_18\n\nLANGUAGE: lua\nCODE:\n```\ntype List<T> = {T}\n\nlocal Names: List<string> = {\"Bob\", \"Dan\", \"Mary\"}  -- Type becomes {string}\nlocal Fibonacci: List<number> = {1, 1, 2, 3, 5, 8, 13}  -- Type becomes {number}\n```\n\n----------------------------------------\n\nTITLE: Accessing ChinRaiser Control in Roblox\nDESCRIPTION: Reference to the ChinRaiser control which raises the chin up and moves the lower lip upwards. Can be combined with ChinRaiserUpperLip to prevent lip collision when the mouth is closed.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/characters/facial-animation/facs-poses-reference.md#_snippet_17\n\nLANGUAGE: Roblox\nCODE:\n```\nClass.FaceControls.ChinRaiser\n```\n\n----------------------------------------\n\nTITLE: Creating a New HumanoidDescription Instance in Roblox Lua\nDESCRIPTION: Instantiates a new HumanoidDescription object, which serves as a container for avatar appearance properties including accessories, scaling, and animation settings. No dependencies are required beyond the default Roblox Lua APIs. The resulting object can be customized and applied to a Humanoid to change its appearance.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/characters/appearance.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal humanoidDescription = Instance.new(\"HumanoidDescription\")\n```\n\n----------------------------------------\n\nTITLE: Printing Current Screen Orientation - Lua\nDESCRIPTION: This code snippet demonstrates how to retrieve and print the current screen orientation of a user's device within a Roblox experience. It retrieves the PlayerGui service and prints the value of its CurrentScreenOrientation property.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/input/mobile.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\nlocal playerGUI = Players.LocalPlayer:WaitForChild(\"PlayerGui\")\n\nprint(playerGUI.CurrentScreenOrientation)\n```\n\n----------------------------------------\n\nTITLE: Filtering Assets, Badges, Game Passes, and Private Servers by IDs - HTTP\nDESCRIPTION: Filters and retrieves resources matching sets of provided IDs for assets, badges, game passes, and private servers. The query string uses corresponding filters: 'assetIds', 'badgeIds', 'gamePassIds', and 'privateServerIds', each holding a comma-separated list of identifiers. Ensure all IDs are accurate and formatted properly for successful matching.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/reference/patterns.md#_snippet_11\n\nLANGUAGE: HTTP\nCODE:\n```\nfilter=assetIds=1,2,3,4;badgeIds=1,2,3,4;gamePassIds=1,2,3,4;privateServerIds=1,2,3,4\n```\n\n----------------------------------------\n\nTITLE: Handling Accessory Mesh Load Failure\nDESCRIPTION: This error indicates a failure to load the mesh for an accessory (`%s`). Ensure the accessory instance exists and its associated mesh is valid and accessible.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/validation-errors.md#_snippet_50\n\nLANGUAGE: Text\nCODE:\n```\nFailed to load mesh for accessory `%s`. Make sure mesh exists and try again.\n```\n\n----------------------------------------\n\nTITLE: Configuring Terrain Edit Plane Position in Roblox Lua\nDESCRIPTION: Sets specific position values for the terrain editing plane to create flat or inclined surfaces as part of terrain sculpting activities during environment construction.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/environmental-art/construct-your-world.md#_snippet_16\n\nLANGUAGE: Lua\nCODE:\n```\nterrainEditor:editPlane()\nterrainEditor:setEditPlanePosition(Vector3.new(0, -1, 0))\nterrainEditor:applyEditPlane()\n\n```\n\n----------------------------------------\n\nTITLE: Handling Moderation Result Fetch Error\nDESCRIPTION: This error occurs when the system fails to fetch moderation results for the specified asset(s) (`%s`). Ensure all involved assets are owned by the current user.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/validation-errors.md#_snippet_25\n\nLANGUAGE: Text\nCODE:\n```\nFailed to fetch moderation results for `%s`. Make sure all assets are owned by the current user.\n```\n\n----------------------------------------\n\nTITLE: Main function call - Python\nDESCRIPTION: This section ensures that the `run()` function, presumably containing the bot's main logic (including initialization and event handling), is executed only when the script is run directly (not imported as a module).\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/webhooks/automate-right-to-erasure.md#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n    if __name__ == \"__main__\":\n        run()\n```\n\n----------------------------------------\n\nTITLE: Applying HumanoidDescription during character spawn via PlayerAdded event\nDESCRIPTION: This code prevents automatic spawning, sets up a function to assign a specific HumanoidDescription when a new player joins, and spawns their character with the specified appearance. It ensures newly spawned characters have the desired appearance modifications upon creation.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/characters/appearance.md#_snippet_8\n\nLANGUAGE: Lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\n-- Stop automatic spawning so it can be done in the \"PlayerAdded\" callback\nPlayers.CharacterAutoLoads = false\n\nlocal function onPlayerAdded(player)\n\t-- Create a HumanoidDescription\n\tlocal humanoidDescription = Instance.new(\"HumanoidDescription\")\n\thumanoidDescription.HatAccessory = \"2551510151,2535600138\"\n\thumanoidDescription.BodyTypeScale = 0.1\n\thumanoidDescription.ClimbAnimation = 619521311\n\thumanoidDescription.Face = 86487700\n\thumanoidDescription.GraphicTShirt = 1711661\n\thumanoidDescription.HeadColor = Color3.new(0, 1, 0)\n\n\t-- Spawn character with the HumanoidDescription\n\tplayer:LoadCharacterWithHumanoidDescription(humanoidDescription)\nend\n\n-- Connect \"PlayerAdded\" event to \"onPlayerAdded()\" function\nPlayers.PlayerAdded:Connect(onPlayerAdded)\n```\n\n----------------------------------------\n\nTITLE: Client-Side Lightning Beam Visual and Audio Effect Sequence in Roblox Lua\nDESCRIPTION: This Lua snippet runs a sequence of visual and audio updates for a lightning beam effect on the client. It sets the beam's texture based on randomized info parameters, positions the beam part relative to offsets, adjusts brightness and post-process effects, plays tween animations for smooth transitions, and then plays a one-shot audio effect if audio references exist. It finally waits for a specified delay before continuing, synchronizing visuals and sound. Dependencies include Roblox's TweenService, audio utilities, and pre-configured texture assets. Inputs are the effect info structure sent from the server, outputs are visible and audible lightning strike effects.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/the-mystery-of-duvall-drive/develop-a-moving-world.md#_snippet_4\n\nLANGUAGE: Lua\nCODE:\n```\nbeam.Texture = textures[info.textIdx]\n\nbeamPart.Position = Vector3.new(info.center.X + og_center.X, og_center.Y, info.center.Y + og_center.Z)\n\n-- Wipe\nbeam.Brightness = 10\nppCC.Brightness = maxPPBrightness\nppBloom.Intensity = 1.1\nbottom.Position = top.Position\n\ntweenBrightness:Play()\ntweenPPBrightness:Play()\ntweenPPBrightness:Play()\ntweenBottomPos:Play()\ntweenBrightness.Completed:Wait()\n\n-- audio\nif audioFolder and audioPart then\n\tif audioFolder.Value and audioPart.Value then\n\t\taudioUtils.PlayOneShot(audioObj, audioFolder.Value, audioPart.Value)\n\tend\nend\n\ntask.wait(info.waitTillFlashes)\n\n-- and so on\n```\n\n----------------------------------------\n\nTITLE: Creating SurfaceLight for Radio Screen Illumination in Roblox (Lua)\nDESCRIPTION: This snippet details how to insert a SurfaceLight into the radio's screen to emulate surface-emitted light, suitable for screens and flat surfaces. It involves setting face, brightness, color, and range to achieve focused, surface-based lighting effects.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/lighting/enhance-indoor-environments.md#_snippet_8\n\nLANGUAGE: Lua\nCODE:\n```\nlocal surfaceLight = Instance.new(\"SurfaceLight\")\nsurfaceLight.Face = \"Left\"\nsurfaceLight.Brightness = 2\nsurfaceLight.Color = Color3.fromRGB(146, 255, 251)\nsurfaceLight.Range = 4\nsurfaceLight.Parent = radioScreen\n```\n\n----------------------------------------\n\nTITLE: Initializing Server Schema with OnSetup\nDESCRIPTION: This code snippet demonstrates how to initialize a server-side event sequencer schema using the OnSetup lifecycle hook. It retrieves services, requires the EventSequencer module, creates a schema, and defines the OnSetup function to access the scene environment and connect an event to change a part's color. It also prints the current time.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/event-sequencer.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal EventSequencer = require(ReplicatedStorage:WaitForChild(\"EventSequencer\"))\n\nlocal Schema = EventSequencer.createSchema()\n\nlocal serverEnvironment\nlocal partColorConnection\nlocal changePartColorEvent = script.Parent.Events.ChangePartColor\n\nSchema.OnSetup = function(timePositionObject)\n\tprint(\"OnSetup (Server)\")\n\n\t-- Access scene environment; does not apply to Inline Mode\n\tserverEnvironment = EventSequencer.getCurrentSceneEnvironment()\n\tpartColorConnection = changePartColorEvent.OnServerEvent:Connect(function(player, changedPart, newColor)\n\t\tserverEnvironment.changedPart.Color = newColor\n\tend)\n\n\tprint(\"Current time is:\", timePositionObject.Value)\nend\n```\n\n----------------------------------------\n\nTITLE: Positioning Custom Button Relative to Jump Button in Roblox Lua\nDESCRIPTION: This Lua script runs on the client side within Class.StarterPlayerScripts and creates a custom UI button positioned relative to the default jump button for touch-enabled devices. It waits for the jump button to be fully loaded before fetching its position. The custom button is created as an ImageButton, sized at 80% of the jump button, and placed 20 pixels to the left and aligned at the bottom of the jump button. The script depends on Roblox services Players and UserInputService and works only if touch input is enabled. It warns otherwise. This allows dynamically adapting UI positioning based on existing controls to ensure ergonomic and accessible placement on mobile devices.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/ui/position-and-size.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\nlocal UserInputService = game:GetService(\"UserInputService\")\n\nlocal player = Players.LocalPlayer\nlocal playerGui = player:WaitForChild(\"PlayerGui\")\n\nif UserInputService.TouchEnabled then\n\t-- Wait for jump button to be fully loaded\n\twhile not (playerGui:FindFirstChild(\"JumpButton\", true) and playerGui:FindFirstChild(\"JumpButton\", true).IsLoaded) do\n\t\ttask.wait()\n\tend\n\tlocal jumpButton = playerGui:FindFirstChild(\"JumpButton\", true)\n\n\t-- Place new custom button to left of jump button\n\tlocal customButton = Instance.new(\"ImageButton\")\n\tcustomButton.AnchorPoint = Vector2.new(1, 1)\n\tcustomButton.Size = UDim2.fromOffset(jumpButton.Size.X.Offset * 0.8, jumpButton.Size.Y.Offset * 0.8)\n\tcustomButton.Position = jumpButton.Position + UDim2.fromOffset(-20, jumpButton.Size.Y.Offset)\n\tcustomButton.Parent = jumpButton.Parent\nelse\n\twarn(\"Device is not touch-enabled or Studio is not emulating a touch-enabled device!\")\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Water Using Fill Tool in Terrain Editor\nDESCRIPTION: Creates a large water body around the island by filling a specified region with water material. The method involves selecting the Fill tool, setting position and size to cover the environment area, and configuring source and target materials to replace existing terrain with water. This ensures natural water borders and horizon coverage.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/core/building/create-an-environment-with-terrain.md#_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n- Click the **Fill** button in Terrain Editor.\n- In **Selection Settings**, set:\n  - **Position** to `0, -15, 0`\n  - **Size** to `1800, 5, 1800`\n- In **Material Settings**, configure:\n  - **Fill Mode** to **Replace**\n  - **Source Material** to **Air**\n  - **Target Material** to **Water**\n- Click **Apply** to generate water around the island.\n```\n\n----------------------------------------\n\nTITLE: Tweening GuiObject Size Using TweenService in Lua\nDESCRIPTION: Scales a GuiObject (e.g., ImageLabel) to 40% of the smallest screen dimension, maintaining its aspect ratio with a UIAspectRatioConstraint. Assumes prior attachment of the constraint and centralization via AnchorPoint. Requires TweenService, Players, and Instance APIs. Inputs are target size (UDim2), and output is smooth resizing while keeping proportions.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/ui/animation.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal TweenService = game:GetService(\"TweenService\")\nlocal Players = game:GetService(\"Players\")\n\nlocal PlayerGui = Players.LocalPlayer:WaitForChild(\"PlayerGui\")\nlocal ScreenGui = PlayerGui:WaitForChild(\"ScreenGui\")\nlocal object = ScreenGui:WaitForChild(\"ImageLabel\")\n\nobject.AnchorPoint = Vector2.new(0.5, 0.5)\n\nlocal aspectRatioConstraint = Instance.new(\"UIAspectRatioConstraint\")\naspectRatioConstraint.Parent = object\n\nlocal targetSize = UDim2.new(0.4, 0, 0.4, 0)\n\nlocal tweenInfo = TweenInfo.new(2)\nlocal tween = TweenService:Create(object, tweenInfo, {Size = targetSize})\n\ntween:Play()\n```\n\n----------------------------------------\n\nTITLE: Translate Text via Open Cloud API (Server)\nDESCRIPTION: This server-side Lua script defines a RemoteFunction that uses the Open Cloud API to translate text. It retrieves the text and locale from the client, prepares a translation request using the `oc:TranslateText` function, and returns the translated text to the client. It requires the Open Cloud client package and a valid universe ID.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/production/localization/auto-translate-dynamic-content.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal ServerScriptService = game:GetService(\"ServerScriptService\")\nlocal oc = require(ServerScriptService.OpenCloud.V2)\n\n-- Find at https://create.roblox.com/dashboard/creations in the overflow menu of an experience tile\nlocal universeID = <your_universe_id>\n\n-- Create RemoteFunction\nlocal remoteFunction = Instance.new(\"RemoteFunction\")\nremoteFunction.Name = \"TranslateTextFunction\"\nremoteFunction.Parent = ReplicatedStorage\n\nremoteFunction.OnServerInvoke = function(player, text, locale, uni)\n\n    print(player.Name .. \" requested translation for text: \" .. text .. \" to locale: \" .. locale)\n\n    -- Prepare the translation request\n\n    local request : oc.TranslateTextRequest = {\n        path = oc:UniversePath(universeID),\n        text = text,\n\t      -- target language codes supports a list of multiple locales to translate to.\n\t      -- Here we are passing just one language:\n        --The player locale retrieved in the local script\n        target_language_codes = {locale}\n    }\n\n    local result = oc:TranslateText(request)\n\n    if result.Error == nil then\n        return result.Response.translations[locale] -- Assuming translations[locale] contains the translated text\n    else\n        return \"Error: \" .. result.Error.message\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Handling match timer end and broadcasting end state\nDESCRIPTION: This sequence captures the game over condition triggered by a timer ending, firing a `matchEnd` event with the `TimerUp` end state. It includes capturing and printing the end state for debugging, and confirms proper usage of the event `Fire()` method with the colon operator, which sends the string identifier to listening scripts.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/battle-royale-series/ending-matches.md#_snippet_4\n\nLANGUAGE: Lua\nCODE:\n```\nlocal endState = matchEnd.Event:Wait()\nprint(\"Game ended with: \" .. endState)\n\nmatchEnd:Fire(gameSettings.endStates.TimerUp)\n```\n\n----------------------------------------\n\nTITLE: Finding the Character Model and Humanoid in onTouch Function\nDESCRIPTION: Within 'onTouch', identifies the parent of 'otherPart', assumed to be the character model, then searches for a 'Humanoid' object within it using 'FindFirstChildWhichIsA'. This step ensures that only player characters or NPCs are affected, filtering out decor items.\n\nDependencies include Roblox's object hierarchy and the 'Humanoid' class.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-3/traps-with-if-statements.md#_snippet_3\n\nLANGUAGE: Luau\nCODE:\n```\nlocal trapPart = script.Parent\n\nlocal function onTouch(otherPart)\n   -- Finds otherPart's parent object\n   local character = otherPart.Parent\n   local humanoid = character:FindFirstChildWhichIsA(\"Humanoid\")\nend\n```\n\n----------------------------------------\n\nTITLE: Handling Incorrect Property Type Access Error\nDESCRIPTION: This error indicates an attempt to access a property (`%s`.`%s`) using an incorrect data type. The system expected the instance (`%s`) to be of a different type (`%s`). Correct the instance type or the property access method.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/validation-errors.md#_snippet_31\n\nLANGUAGE: Text\nCODE:\n```\nTying to access property `%s`.`%s` using the incorrect type for it. Expected `%s` to be `%s`.\n```\n\n----------------------------------------\n\nTITLE: Create Module to Detect User Input Device Type in Lua\nDESCRIPTION: Defines a ModuleScript named \"UserInputModule\" to detect and manage user input types. It provides an `getInputType` function that checks `UserInputService` to determine the last used input device (Keyboard/Mouse, Touch, or Gamepad) and returns a descriptive string and the corresponding `Enum.UserInputType`. This module is designed to be placed in `ReplicatedStorage`.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/input/mobile.md#_snippet_5\n\nLANGUAGE: Lua\nCODE:\n```\nlocal UserInputService = game:GetService(\"UserInputService\")\n\nlocal UserInput = {}\n\nlocal inputTypeString\n-- If device has active keyboard and mouse, assume those inputs\nif UserInputService.KeyboardEnabled and UserInputService.MouseEnabled then\n\tinputTypeString = \"Keyboard/Mouse\"\n-- Else if device has touch capability but no keyboard and mouse, assume touch input\nelseif UserInputService.TouchEnabled then\n\tinputTypeString = \"Touch\"\n-- Else if device has an active gamepad, assume gamepad input\nelseif UserInputService.GamepadEnabled then\n\tinputTypeString = \"Gamepad\"\nend\n\nfunction UserInput.getInputType()\n\tlocal lastInputEnum = UserInputService:GetLastInputType()\n\n\tif lastInputEnum == Enum.UserInputType.Keyboard or string.find(tostring(lastInputEnum.Name), \"MouseButton\") or lastInputEnum == Enum.UserInputType.MouseWheel then\n\t\tinputTypeString = \"Keyboard/Mouse\"\n\telif lastInputEnum == Enum.UserInputType.Touch then\n\t\tinputTypeString = \"Touch\"\n\telif string.find(tostring(lastInputEnum.Name), \"Gamepad\") then\n\t\tinputTypeString = \"Gamepad\"\n\tend\n\treturn inputTypeString, lastInputEnum\nend\n\nreturn UserInput\n```\n\n----------------------------------------\n\nTITLE: Creating a Continuous Glow with Loop in Roblox Lua\nDESCRIPTION: Wraps the brightness increasing and decreasing loops inside a while true do loop to run indefinitely, producing a continuous glow cycle. This structure allows the lamp to keep pulsing without manual restart, essential for effects requiring ongoing animations. Proper indentation is critical for clarity.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-4/glow-lights-with-for-loops.md#_snippet_4\n\nLANGUAGE: Lua\nCODE:\n```\nwhile true do\n  for currentBrightness = 0, 5, brightnessChange do\n    light.Brightness = currentBrightness\n    task.wait(timeChange)\n  end\n\n  for currentBrightness = 5, 0, -brightnessChange do\n    light.Brightness = currentBrightness\n    task.wait(timeChange)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Response Example for Token Resources Endpoint - JSON\nDESCRIPTION: JSON response from the token resources endpoint showing resource info ownership and access scopes. The \"owner\" object identifies the resource owner by ID and type. The \"resources\" object details universe and creator resource IDs accessible by the token. The \"ids\" array contains resource identifiers or the special \"U\" indicator for user-owned resources.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/auth/oauth2-reference.md#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"resource_infos\": [\n    {\n      \"owner\": {\n        \"id\": \"1516563360\",\n        \"type\": \"User\"\n      },\n      \"resources\": {\n        \"universe\": {\n          \"ids\": [\"3828411582\"]\n        },\n        \"creator\": {\n          \"ids\": [\"U\"]\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Invalid Thumbnail Target Asset Error\nDESCRIPTION: This error occurs during thumbnail generation when the target asset is invalid. It was expected to be of type (`%s`). Ensure the correct asset type is targeted.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/validation-errors.md#_snippet_37\n\nLANGUAGE: Text\nCODE:\n```\nInvalid target asset for thumbnail generation. Expected it to be `%s`.\n```\n\n----------------------------------------\n\nTITLE: Define Data Store Key and Value - Luau\nDESCRIPTION: Illustrates defining simple variables (`playerUserID`, `playerGold`) that will serve as a key and value when saving data to the data store. Keys are typically unique identifiers like a player's UserId, and values can be any data type supported by Data Stores (primitives, tables).\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/scripting/intermediate-scripting/save-data.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal DataStoreService = game:GetService(\"DataStoreService\")\n\nlocal goldStore = DataStoreService:GetDataStore(\"PlayerGold\")\n\n-- Data store key and value\nlocal playerUserID = 505306092\nlocal playerGold = 250\n```\n\n----------------------------------------\n\nTITLE: Previewing Custom Skin Tones in Blender Shading\nDESCRIPTION: Blender 3.4+ template files include a shader setup to preview how custom skin tones appear in Roblox. This process involves selecting geometry and adjusting the 'PartColor' node in the Shading workspace.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/characters/creating/blender-configurations.md#_snippet_1\n\nLANGUAGE: Blender Step\nCODE:\n```\n1. In Layout, select any geometry object, such as Head_Geo.\n```\n\nLANGUAGE: Blender Step\nCODE:\n```\n2. Go to the Shading tab.\n```\n\nLANGUAGE: Blender Step\nCODE:\n```\n3. In the Node panel, ensure Object is selected.\n```\n\nLANGUAGE: Blender Step\nCODE:\n```\n4. Find the PartColor node that is attached to the Mix node.\n```\n\nLANGUAGE: Blender Step\nCODE:\n```\n5. Pick a color and value on the node to apply a reference custom skin tone.\n```\n\n----------------------------------------\n\nTITLE: Revoking a Refresh Token with Roblox OAuth v1 - bash\nDESCRIPTION: Performs a POST request to the token revoke endpoint to revoke an existing authorization session using a refresh token. The request must be sent as x-www-form-urlencoded data with the token to revoke, client ID, and client secret. Upon success, the server responds with HTTP 200 and an empty body indicating the token is invalidated.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/auth/oauth2-reference.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request POST https://apis.roblox.com/oauth/v1/token/revoke' \\\n--header 'Content-Type: application/x-www-form-urlencoded' \\\n--data-urlencode 'token=Ujfstayclfdlbm...BGydlsnU' \\\n--data-urlencode 'client_id=840974200211308101' \\\n--data-urlencode 'client_secret=RBX-CR9...St12L'\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Roblox OAuth 2.0 Sample App in Bash\nDESCRIPTION: This snippet sets environment variables for the Roblox OAuth 2.0 sample app on Mac and Linux terminals using Bash. It configures the client ID, client secret, and optionally the port number that the app listens on. These variables must be set prior to running the app to ensure successful authentication and proper server operation. The variables are temporary for the session unless added to shell configuration files.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/auth/oauth2-sample.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport ROBLOX_CLIENT_ID=your_client_id_here\nexport ROBLOX_CLIENT_SECRET=your_client_secret_here\nexport ROBLOX_PORT=3000 # Optional. Default is 3000.\n```\n\n----------------------------------------\n\nTITLE: Handling Round Progression and Reset in Roblox Lua (Rounds)\nDESCRIPTION: This server script (`Rounds`) manages the flow of game rounds. It waits for score updates using `Scoring.teamScoreChanged:Wait()` within a loop. Once a team's score reaches `TEAM_SCORE_LIMIT`, it fires a `roundWinnerRemote` event to all clients, notifying them of the winning team. After determining the winner, it resets player spawns by making the lobby spawn neutral and moving players there using `spawnPlayersInLobby`, preparing for the next round or intermission.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/gameplay-scripting/add-rounds.md#_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\n\t\t-- Check if the round has finished after each score\n\t\tlocal team: Team\n\t\tlocal score: number = 0\n\n\t\twhile score < TEAM_SCORE_LIMIT do\n\t\t\tteam, score = Scoring.teamScoreChanged:Wait()\n\t\tend\n\n\t\t-- Display winning team\n\t\tfor _, player in Players:GetPlayers() do\n\t\t\t-- Sending what team the player is on at the end of the round\n\t\t\t-- because the player's team is about to be removed, so the client\n\t\t\t-- won't be able to check its own team\n\t\t\troundWinnerRemote:FireClient(player, team, player.Team)\n\t\tend\n```\n\nLANGUAGE: lua\nCODE:\n```\n\t\t-- Send everyone to the lobby\n\t\tplayerAddedConnection:Disconnect()\n\t\tneutralSpawn.Neutral = true\n\t\tspawnPlayersInLobby(Players:GetPlayers())\n```\n\n----------------------------------------\n\nTITLE: Awarding Bronze Medals Luau\nDESCRIPTION: This code adds an `elseif` condition for awarding a bronze medal. It checks if `timePassed` is greater than 20 seconds and less than or equal to 30. If true, it prints \"You get a bronze medal!\".\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-3/multiple-conditions.md#_snippet_13\n\nLANGUAGE: Luau\nCODE:\n```\nlocal function finish()\n   raceActive = false\n   print(\"You finished in \" .. timePassed)\n\n   if timePassed <= 10 then\n      print(\"You get a gold medal!\")\n   elseif timePassed > 10 and timePassed <= 20 then\n      print(\"You get a silver medal!\")\n   elseif  timePassed > 20 and timePassed <= 30 then\n      print(\"You get a bronze medal!\")\n   end\nend\n```\n\n----------------------------------------\n\nTITLE: Exporting FBX from Blender with Specific Settings\nDESCRIPTION: Guides users through the process of exporting a FBX file from Blender, highlighting key settings such as Path Mode, Embed Textures, Scale, and Armature options. These settings ensure the exported file is compatible with Studio and properly configured for use in subsequent import steps.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/accessories/creating/exporting.md#_snippet_0\n\nLANGUAGE: None\nCODE:\n```\n1. In the topbar, click **File**. A pop-up menu displays.\n2. Select **Export**, then **FBX (.fbx)**. The **Blender File View** window displays.\n3. On the right-hand side, change the **Path Mode** property to **Copy**, then toggle the **Embed Textures** button.\n4. If your project doesn't have .01 scene unit scaling, set the **Transform** > **Scale** to `.01`.\n5. Under the **Armature** section, disable **Add Leaf Bones**.\n6. Disable **Bake Animation**.\n7. Click the **Export FBX** button.\n<Alert severity ='success'>\nYou've completed the exporting section of this tutorial. If desired, download a [reference sample](../../../assets/art/accessories/creating/Long_Sleeve_Export.fbx) of this exported file for comparison. You can use this reference in the next importing step.\n</Alert>\n```\n\n----------------------------------------\n\nTITLE: Literal Types for Constants in Luau Lua\nDESCRIPTION: Demonstrates the use of literal types to restrict a variable to an exact string or boolean value. This snippet shows that any assignment differing from the literal value causes a type error, enabling precise but restrictive type safety.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/type-checking.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal alwaysHelloWorld: \"Hello world!\" = \"Hello world!\"\nalwaysHelloWorld = \"Just hello!\"  -- Type error: Type '\"Just hello!\"' could not be converted into '\"Hello world!\"'\n\nlocal alwaysTrue: true = false  -- Type error: Type 'false' could not be converted into 'true'\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for Get Operation Request\nDESCRIPTION: Sample JSON response when retrieving an operation status. Shows a successful operation with details about the uploaded asset including its ID, display name, description, type, and moderation status.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/guides/usage-assets.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"path\": \"operations/{operationId}\",\n  \"done\": true,\n  \"response\": {\n    \"@type\": \"type.googleapis.com/roblox.open_cloud.assets.v1.Asset\",\n    \"path\": \"assets/2205400862\",\n    \"revisionId\": \"1\",\n    \"revisionCreateTime\": \"2023-03-02T22:27:04.062164400Z\",\n    \"assetId\": \"2205400862\",\n    \"displayName\": \"Name\",\n    \"description\": \"This is a description\",\n    \"assetType\": \"ASSET_TYPE_DECAL\",\n    \"creationContext\": {\n      \"creator\": {\n        \"userId\": \"11112938575\"\n      }\n    },\n    \"moderationResult\": {\n      \"moderationState\": \"MODERATION_STATE_APPROVED\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Registered Items from Merch Booth (Lua)\nDESCRIPTION: Shows how to use the `MerchBooth.getItems` function from a server-side `Script` to retrieve a dictionary of all items currently registered with the Merch Booth. The example calls `getItems` after successfully adding an item asynchronously and then prints the resulting table. This function does not require any parameters and returns a table where keys are string asset IDs and values are Item objects.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/merch-booth.md#_snippet_17\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal MerchBooth = require(ReplicatedStorage:WaitForChild(\"MerchBooth\"))\n\nlocal success, errorMessage = pcall(function()\n\tMerchBooth.addItemAsync(4819740796)\nend)\nif success then\n\tlocal items = MerchBooth.getItems()\n\tprint(items)\nend\n```\n\n----------------------------------------\n\nTITLE: Using Custom Materials for Modular Building Walls in Roblox Studio\nDESCRIPTION: This snippet describes how to select and apply alternative custom materials to wall meshes in Roblox Studio, allowing users to create unique building appearances by changing material variants and tint colors. The process involves using shortcuts to select meshes, choosing material variants from dropdowns, and customizing tint colors for differentiation.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/modeling/assemble-modular-environments.md#_snippet_0\n\nLANGUAGE: Roblox Studio\nCODE:\n```\n1. Hold down <kbd>Alt</kbd><kbd>Shift</kbd> and click a mesh with brick material.\n2. In the Properties window, select the MaterialVariant dropdown and choose an alternative material.\n3. To further customize, select BrickColor or Color, then pick a new tint. All active wall meshes update accordingly.\n```\n\n----------------------------------------\n\nTITLE: Easing Style - Cubic (Lua)\nDESCRIPTION: This Lua code snippet demonstrates how to specify the easing style for a tween using `Enum.EasingStyle.Cubic`. It sets the easing style to cubic for a rotation tween, resulting in a slightly sharper curve during the animation.  It assumes that `TweenService` has already been retrieved and that `object` refers to a valid UI element.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/ui/animation.md#_snippet_11\n\nLANGUAGE: lua\nCODE:\n```\nlocal tweenInfo = TweenInfo.new(2, Enum.EasingStyle.Cubic)\nlocal tween = TweenService:Create(object, tweenInfo, {Rotation = 45})\n```\n\n----------------------------------------\n\nTITLE: Setting Catalog Sort Order by Price (Low to High) with MerchBooth - Lua\nDESCRIPTION: Sets the sorting function for the merch booth catalog to sort items by price in ascending order. The sorting callback takes two items (a, b) and returns true if a's price precedes b's. Requires the MerchBooth module and is intended for use in a LocalScript. It alters sort order but produces no direct output.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/merch-booth.md#_snippet_21\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal MerchBooth = require(ReplicatedStorage:WaitForChild(\"MerchBooth\"))\n\nMerchBooth.setCatalogSort(function(a, b)\n\treturn a.price < b.price\nend)\n\n```\n\n----------------------------------------\n\nTITLE: Introspecting a Token using cURL (Roblox OAuth 2.0)\nDESCRIPTION: A cURL command example for introspecting a token (access, refresh, or ID) using the `POST /oauth/v1/token/introspect` endpoint. It sends the `token` to be checked, along with the `client_id` and `client_secret`, as URL-encoded form data to verify the token's validity and retrieve its metadata.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/auth/oauth2-reference.md#_snippet_7\n\nLANGUAGE: Bash\nCODE:\n```\ncurl --location --request POST 'https://apis.roblox.com/oauth/v1/token/introspect' \\\n--header 'Content-Type: application/x-www-form-urlencoded' \\\n--data-urlencode 'token=eyjlflabtfl...4gxqYBG' \\\n--data-urlencode 'client_id=840974200211308101' \\\n--data-urlencode 'client_secret=RBX-CR9...St12L'\n```\n\n----------------------------------------\n\nTITLE: Accessing FlatPucker Control in Roblox\nDESCRIPTION: Reference to the FlatPucker control which brings the corners of the mouth inward and presses the lips back against the teeth. This pose is also known as lip tightener.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/characters/facial-animation/facs-poses-reference.md#_snippet_19\n\nLANGUAGE: Roblox\nCODE:\n```\nClass.FaceControls.FlatPucker\n```\n\n----------------------------------------\n\nTITLE: Initializing Player Inventory Size in Roblox Lua\nDESCRIPTION: Sets the initial maximum inventory size for a player using an IntValue named \"Spaces\". This value determines how many items a player can collect before needing to sell. The example sets the value to 6, which can be adjusted based on playtesting for game balance. This code snippet is typically found in a PlayerSetup script within ServerScriptService.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/adventure-game-series/finishing-the-project.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal maxSpaces = Instance.new(\"IntValue\")\nmaxSpaces.Name = \"Spaces\"\n-- 6 as a possible value for a player's bag\nmaxSpaces.Value = 6\n```\n\n----------------------------------------\n\nTITLE: Setting Blender Scene Scale (Export Settings)\nDESCRIPTION: Alternatively, you can apply the necessary 0.01 scaling directly during the FBX export process. This method modifies the scaling setting in the export dialog.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/characters/creating/blender-configurations.md#_snippet_4\n\nLANGUAGE: Blender Step\nCODE:\n```\n1. Navigate to File > Export > FBX (.fbx).\n```\n\nLANGUAGE: Blender Step\nCODE:\n```\n2. Set Transform > Scale to .01.\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video 2 in HTML\nDESCRIPTION: This snippet embeds another YouTube video using an iframe, similar to the previous example.  It sets the `src` attribute to the specific YouTube video URL, and defines the dimensions, and allows various features such as autoplay and fullscreen.  The `allowFullScreen` attribute enables fullscreen viewing.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/avatar/index.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<div\nclassName=\"container\"\nstyle=\"{ position: \\\"relative\\\", paddingBottom: \\\"56.25%\\\", height: 0, marginBottom: 12 }\" >\n<iframe\nsrc=\"https://www.youtube-nocookie.com/embed/Eed29gV0hLA\"\ntitle=\"YouTube video player\"\nframeBorder=\"0\"\nallow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\nallowFullScreen\nstyle=\"{ position: \\\"absolute\\\", top: 0, left: 0, width: \\\"100%\\\", height: \\\"100%\\\" }\" ></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Roblox OAuth 2.0 Sample App in PowerShell\nDESCRIPTION: This snippet sets environment variables for the Roblox OAuth 2.0 sample app on Windows using PowerShell. It sets the client ID, client secret, and optionally the port used by the app. These variables are required for the app to authenticate with Roblox's OAuth system and should be replaced with actual credentials. Note that these variables persist only for the current terminal session.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/auth/oauth2-sample.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n$env:ROBLOX_CLIENT_ID='your_client_id_here'\n$env:ROBLOX_CLIENT_SECRET='your_client_secret_here'\n$env:ROBLOX_PORT=3000 # Optional. Default is 3000.\n```\n\n----------------------------------------\n\nTITLE: Creating VFX Update Module for Animated Effects (Roblox Lua)\nDESCRIPTION: A module script that handles the synchronization of VFX parts with animated creature bones. It collects tagged models, calculates offsets, and updates part positions during animation playback.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/beyond-the-dark/custom-characters.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n-- This module attached parts to animations so they are updated as the\n-- animation plays. It is a workaround for the current limitations\n-- with Joints and Bones and will not always be necessary.\n--\n-- Prereqs:\n-- To be included, models need the \"AnimatedVfxModel\" tag, and a folder\n-- of all parts that you want to sync with animation. Each part needs\n-- an attribute called \"AttachedBoneName\" that refers to the name of the\n-- bone you want to attach to. Parts should also already be in their\n-- correct positions relative to the desired bone.\n--\n-- To Use:\n-- A LocalScript should require this module, then connect\n-- VfxUpdateModule.updateVfx to the RunService.PreSimulation event.\n\nlocal VfxUpdateModule = {}\nlocal CollectionService = game:GetService(\"CollectionService\")\n\n-- SETUP - this should run once on every client.\n-- Collect all models with the tag\nlocal vfxModels = CollectionService:GetTagged(\"AnimatedVfxModel\")\nlocal vfxTable = {} -- where we will store all the parts and offsets\n\n-- Assign a table to each model that will hold all vfx parts and offset\nfor _, model in vfxModels do\n vfxTable[model] = {}\n local vfxParts = model:FindFirstChild(\"VFX\"):GetChildren() -- Find theVFX folder\n\n -- Find the bone via attribute and calculate the offset for each part.\n for _,part in vfxParts do\n   local name = part:GetAttribute(\"AttachedBoneName\")\n   local bone = model:FindFirstChild(name, true)\n   if bone then\n     local offset = (bone.TransformedWorldCFrame:inverse() * part.CFrame)\n     vfxTable[model][part] = {bone, offset}\n   else\n     warn(\"Vfx part refers to bone that could not be found.\")\n   end\n end\nend\nprint(vfxTable)\n\n-- UPDATE - This should be linked to every client's RunService.PreSimulation\n-- Go through all models, then update all parts on the model to match the bonecframe.\nfunction VfxUpdateModule.updateVfx()\n for model, vfxParts in vfxTable do\n   for part, bone in vfxParts do\n     part.CFrame = bone[1].TransformedWorldCFrame * bone[2]\n   end\n end\nend\n\nreturn VfxUpdateModule\n```\n\n----------------------------------------\n\nTITLE: Handling Player Joins for Bundles in Luau\nDESCRIPTION: Illustrates connecting a function to the `Players.PlayerAdded` event. The `onPlayerAdded` function calls `Bundles.onPlayerAdded(player)` to ensure the Bundles system loads the joining player's bundle data and re-prompts active, unexpired bundles. It also shows an example of potentially prompting a specific bundle (e.g., 'StarterBundle') for new players using `Bundles.promptIfValidAsync`. Requires the `Players` service and the `Bundles` module.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/feature-packages/bundles.md#_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\n local function onPlayerAdded(player: Player)\n       -- Tell Bundles when player joins so it can reload their data\n       Bundles.onPlayerAdded(player)\n\n       -- If you had some starter bundle that you wanted to offer to all new users, you could prompt that here\n       -- ... Bundles will handle if player already has purchased it or if it's expired since it's not repeatable\n       -- Bundles.promptIfValidAsync(player, \"StarterBundle\")\n\n       -- Calling this here just for example, you can call this whenever or wherever you want\n       onPromptBundleXYZEvent(player)\n   end\n```\n\n----------------------------------------\n\nTITLE: Basic Set Implementation in Lua\nDESCRIPTION: Implements core Set functionality with methods to create sets, add/remove items, check for item existence, and output set contents. The implementation uses Lua tables with metatables for object-oriented behavior.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/metatables.md#_snippet_12\n\nLANGUAGE: lua\nCODE:\n```\nlocal Set = {}\nSet.__index = Set\n\n-- Function to construct a set from an optional list of items\nfunction Set.new(items)\n\tlocal newSet = {}\n\tfor key, value in items or {} do\n\t\tnewSet[value] = true\n\tend\n\treturn setmetatable(newSet, Set)\nend\n\n-- Function to add an item to a set\nfunction Set:add(item)\n\tself[item] = true\nend\n\n-- Function to remove an item from a set\nfunction Set:remove(item)\n\tself[item] = nil\nend\n\n-- Function to check if a set contains an item\nfunction Set:contains(item)\n\treturn self[item] == true\nend\n\n-- Function to output set as a comma-delimited list for debugging\nfunction Set:output()\n\tlocal elems = {}\n\tfor key, value in self do\n\t\ttable.insert(elems, tostring(key))\n\tend\n\tprint(table.concat(elems, \", \"))\nend\n```\n\n----------------------------------------\n\nTITLE: Listening for Selfie Mode Close Event in Roblox LocalScript\nDESCRIPTION: Connects a function to the 'selfieModeClosed' event to perform actions when the selfie mode is closed or triggered via closeSelfieMode. Requires the SelfieMode module and is used within a LocalScript. Outputs a message indicating closure.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/selfie-mode.md#_snippet_16\n\nLANGUAGE: Lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal SelfieMode = require(ReplicatedStorage:WaitForChild(\"SelfieMode\"))\n\nSelfieMode.selfieModeClosed:Connect(function()\n\tprint(\"Selfie mode closed\")\nend)\n```\n\n----------------------------------------\n\nTITLE: Using To-do Comments in Luau\nDESCRIPTION: This Luau code snippet demonstrates the use of `TODO` comments. Roblox Studio specifically recognizes these comments and bolds the text following `TODO`. The example is used to keep track of code tasks or unfinished functions, acting as reminders or issues within the code.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/comments.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\n-- TODO: Finish the function below so that it actually does what its name implies.\nlocal function stopWorldFromBlowingUp()\nend\n```\n\n----------------------------------------\n\nTITLE: Accessing Local Animation Data Correctly in Roblox (Lua)\nDESCRIPTION: Demonstrates the recommended way to access locally saved animation data in Lua. It references the `ObjectValue` within the specific rig's `AnimSaves` folder, avoiding potential conflicts that can arise from directly accessing `ServerStorage` when multiple rigs might share the same name.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/animation/editor.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal myAnim = myRig.AnimSaves.Value.myAnimation\n-- Accesses your local animation data with the value reference in your rig\n```\n\n----------------------------------------\n\nTITLE: Implementing Character Scale Command Callback in Roblox Lua\nDESCRIPTION: This Lua script defines the callback function for a custom `Class.TextChatCommand` named \"SizeCommand\". It checks the input message's primary alias (`/super` or `/mini`) and scales the player's character's numeric size values accordingly using `Class.Humanoid` and its children.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/chat/examples/custom-text-chat-commands.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal TextChatService = game:GetService(\"TextChatService\")\nlocal Players = game:GetService(\"Players\")\n\nlocal sizeCommand: TextChatCommand = TextChatService:WaitForChild(\"SizeCommand\")\n\nsizeCommand.Triggered:Connect(function(textSource, message)\n\tlocal scaleMult = 1\n\tlocal messageWords = string.split(message, \" \")\n\tif messageWords[1] == \"/super\" then\n\t\tscaleMult = 2\n\telseif messageWords[1] == \"/mini\" then\n\t\tscaleMult = 0.5\n\tend\n\n\tlocal player = Players:GetPlayerByUserId(textSource.UserId)\n\tif player then\n\t\tlocal character = player.Character\n\t\tif character then\n\t\t\tlocal humanoid = character:FindFirstChildWhichIsA(\"Humanoid\")\n\t\t\tif humanoid then\n\t\t\t\tfor _, child in humanoid:GetChildren() do\n\t\t\t\t\tif child:IsA(\"NumberValue\") then\n\t\t\t\t\t\tchild.Value *= scaleMult\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\nend)\n```\n\n----------------------------------------\n\nTITLE: Filtering Inventory Items with Roblox Inventory API in Node.js\nDESCRIPTION: This snippet provides how to define a filter query string in Node.js to retrieve only collectible items from a user's inventory using the Inventory API. The 'filter' parameter uses semicolon-separated filters where 'onlyCollectibles' is set to true and 'inventoryItemAssetTypes' is set to '*' to include all asset types. This snippet is intended for use with the same Node.js API request structure shown earlier to tailor results based on item categories.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/guides/inventory.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst params = '?filter=onlyCollectibles=true;inventoryItemAssetTypes=*';\n```\n\n----------------------------------------\n\nTITLE: Creating the DisplayManager Module Script in Roblox Lua\nDESCRIPTION: This ModuleScript (`DisplayManager`), intended to be stored in `ServerStorage`, centralizes the logic for updating GUI display values. It initializes variables for `ReplicatedStorage` and the shared `Status` StringValue, and defines an `updateStatus` function. This function accepts a `newStatus` string and updates the `Status.Value`, allowing other server scripts to change the game status displayed to players via the `StatusDisplay` LocalScript.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/battle-royale-series/creating-a-gui.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nlocal DisplayManager = {}\n\n-- Services\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\n-- Display Values used to update Player GUI\nlocal displayValues = ReplicatedStorage:WaitForChild(\"DisplayValues\")\nlocal status = displayValues:WaitForChild(\"Status\")\n\n-- Local Functions\n\n-- Module Functions\n\nreturn DisplayManager\n```\n\nLANGUAGE: Lua\nCODE:\n```\n-- Local Functions\n\n-- Module Functions\nfunction DisplayManager.updateStatus(newStatus)\n\tstatus.Value = newStatus\nend\n```\n\n----------------------------------------\n\nTITLE: Template for Adding Avatar Assets (empty items list) (Lua)\nDESCRIPTION: Provides a boilerplate script for adding avatar assets to the MerchBooth catalog by iterating over an items table, which is initially empty. Useful as a copy-paste template for further item ID inclusion. Script depends only on the MerchBooth module being loaded in ReplicatedStorage and runs in ServerScriptService. Errors during item addition are caught with pcall and reported by warn.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/merch-booth.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal MerchBooth = require(ReplicatedStorage:WaitForChild(\"MerchBooth\"))\n\nlocal items = {\n\n}\n\nfor _, assetId in items do\n\tlocal success, errorMessage = pcall(function()\n\t\tMerchBooth.addItemAsync(assetId)\n\tend)\n\tif not success then\n\t\twarn(errorMessage)\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Declaring and Concatenating Story Variables in Roblox Lua\nDESCRIPTION: This snippet shows how to declare a variable storing user input via storyMaker:GetInput, then concatenate that input into a narrative string using Lua's '..' operator. It demonstrates basic input handling and string building, with 'name1' as the player's chosen name. Inputs are strings and outputs are concatenated story text. Prerequisite: The 'storyMaker' object must provide a GetInput method.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/build-it-play-it-story-games/finish-and-add.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n   -- Code story between the dashes\n   -- =============================================\n      local name1 = storyMaker:GetInput(\"What is your favorite name?\")\n\n      local story = \"In a tree on a hill lives the great wizard \" .. name1 .. \". \"\n   -- =============================================\n```\n\n----------------------------------------\n\nTITLE: Terrain Generation: Fill Block\nDESCRIPTION: This Lua script utilizes the `Terrain:FillBlock()` method to fill a specified block-shaped volume with a particular material.  The script takes a CFrame for position, a Vector3 for size, and an Enum.Material value as inputs.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/parts/terrain.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nworkspace.Terrain:FillBlock(CFrame.new(0, 0, 0), Vector3.new(4, 4, 4), Enum.Material.Grass)\n```\n\n----------------------------------------\n\nTITLE: Starting the Intermission Repeat Loop Structure (Roblox Lua)\nDESCRIPTION: Initiates a `repeat...until` loop inside the main `while true do` loop within the GameManager script. This nested loop structure is used to handle the intermission phase logic.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/battle-royale-series/coding-the-game-loop.md#_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nwhile true do\n  repeat\n\n  until\nend\n```\n\n----------------------------------------\n\nTITLE: Example v2 Resource Error Response in JSON\nDESCRIPTION: Shows the standard format for v2 resource API error responses, which includes the code, message, and details fields. This example demonstrates the structure when an invalid filter argument is provided.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/reference/errors.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"code\": \"INVALID_ARGUMENT\",\n  \"message\": \"The provided filter is invalid.\",\n  \"details\": [\n    {\n      ...\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering Bundle Prompts Based on Events in Luau\nDESCRIPTION: Provides an example function `onPromptBundleXYZEvent` demonstrating how to trigger a bundle prompt for a specific player based on custom game logic or events (like leveling up or entering an area). It calls `Bundles.promptIfValidAsync(player, <Some_Bundle_Id>)` asynchronously using `task.spawn` to avoid blocking the main thread and ensure accurate countdown timers when prompting multiple bundles. Requires the `Bundles` module.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/feature-packages/bundles.md#_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\n local function onPromptBundleXYZEvent(player: Player)\n       -- Connect whatever experience event you want to use to determine when a player gets prompted the bundle\n       -- ... This will be whenever you've met your elligibility criteria to prompt a player the bundle\n       -- ... For example, if you want to prompt a bundle when a player joins, or when a player levels up\n       task.spawn(Bundles.promptIfValidAsync, player, <Some_Bundle_Id>)\n       -- ... If creating multiple bundles, using task.spawn() to wrap the above function call will minimize discrepancies between countdowns\n   end\n```\n\n----------------------------------------\n\nTITLE: Sequencing Algorithm Example\nDESCRIPTION: This Lua code snippet demonstrates a sequencing algorithm, which involves a series of precise steps. The `createBridge` function outlines the steps for creating a bridge: creating a new block, sizing it, setting its color, rotating it, setting its location, and parenting it to the workspace. The function executes these steps in a specific order.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/resources/coding-concept-algorithms.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal function createBridge()\n  create new block\n  size block\n  set color\n  rotate\n  set location\n  parent to workspace\nend\n```\n\n----------------------------------------\n\nTITLE: Accessing LeftDimpler Control in Roblox\nDESCRIPTION: Reference to the LeftDimpler control which moves the corners of the left side of the mouth back toward the teeth, creating a dimple effect.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/characters/facial-animation/facs-poses-reference.md#_snippet_27\n\nLANGUAGE: Roblox\nCODE:\n```\nClass.FaceControls.LeftDimpler\n```\n\n----------------------------------------\n\nTITLE: Displaying a Warning Alert using <Alert> Component (Markdown/JSX)\nDESCRIPTION: Uses the <Alert> component, likely within a Markdown/JSX environment, to display a prominent warning message. The 'severity' prop is set to 'warning' to visually indicate caution regarding required cleanup steps for avatar template files before marketplace publishing.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/characters/project-files.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n<Alert severity = 'warning'>\nIf you are using Roblox's avatar template files, you must perform the [cleanup steps](../../art/characters/creating/combine-head-geometry.md) in order for the assets to properly validate before publishing to the Marketplace.\n</Alert>\n```\n\n----------------------------------------\n\nTITLE: Playing Particle Burst Effects upon Goal Interaction in Roblox (Lua ServerScript)\nDESCRIPTION: This server-side script for Roblox handles triggering particle emission effects at the player's location when they interact with tutorial goals. It clones particle emitters from ServerStorage, attaches them to the player's HumanoidRootPart via an attachment, and emits particles using a configurable rate. It also sets up character spawn events to ensure particles are correctly attached each time.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/build-it-play-it-mansion-of-wonder/adding-scripts.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal ServerStorage = game:GetService(\"ServerStorage\")\n\nlocal tutorialFolder = ReplicatedStorage:WaitForChild(\"PlayerTutorial\")\nlocal NextGoalEvent = tutorialFolder:WaitForChild(\"NextGoal\")\n\nlocal EMIT_RATE = 50\n\nlocal function playParticleBurst(player)\n local character = player.Character or player.CharacterAdded:Wait()\n local humanoidRootPart = character:WaitForChild(\"HumanoidRootPart\")\n local particleAttachment = humanoidRootPart:WaitForChild(\"ParticleAttachment\")\n\n -- Go through particles on the attachment and play them according to the type of particle\n for _, particle in particleAttachment:GetChildren() do\n  if particle:IsA(\"ParticleEmitter\") then\n   particle:Emit(EMIT_RATE)\n  end\n end\nend\n\nlocal function setupPlayerParticles(player)\n player.CharacterAdded:Connect(function(character)\n  local humanoidRootPart = character:WaitForChild(\"HumanoidRootPart\")\n  local playerParticleAttachment = Instance.new(\"Attachment\")\n  playerParticleAttachment.Name = \"ParticleAttachment\"\n  playerParticleAttachment.Parent = humanoidRootPart\n\n  -- Clone particles in the folder, even if there are more than one and attach to player\n  for _, emitter in ServerStorage.TutorialParticles:GetChildren() do\n   emitter:Clone().Parent = playerParticleAttachment\n  end\n end)\nend\n\nPlayers.PlayerAdded:Connect(setupPlayerParticles)\nNextGoalEvent.OnServerEvent:Connect(playParticleBurst)\n```\n\n----------------------------------------\n\nTITLE: Client Schema OnRun with Animate Configuration\nDESCRIPTION: This code snippet demonstrates how to define the OnRun lifecycle hook in a client-side event sequencer schema and use the 'animate' configuration to play an animation synchronized with audio. It configures the animation ID, rig, speed, fade-in/out times, and synchronization with a previously defined audio configuration.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/event-sequencer.md#_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nSchema.OnRun = function()\n\tprint(\"OnRun (Client)\")\n\n\tlocal MainAudio = Schema:audio({\n\t\tStartTime = 1,\n\t\tSoundId = \"rbxassetid://1838673350\",\n\t})\n\n\tlocal DanceAnimation = Schema:animate({\n\t\tAnimationId = \"rbxassetid://3695333486\",\n\t\tRig = Dummy,\n\t\tSpeed = 1,\n\t\tFadeInTime = 0.1,\n\t\tFadeOutTime = 0.3,\n\t\tSyncToAudio = {\n\t\t\tAudio = MainAudio,\n\t\t\tStartAtAudioTime = 5,\n\t\t},\n\t\tOnStart = function(self)\n\t\t\tprint(\"Animation playing\")\n\t\tend,\n\t\tOnEnd = function(self)\n\t\t\tprint(\"Animation stopped\")\n\t\tend\n\t})\nend\n```\n\n----------------------------------------\n\nTITLE: Constructing invite options with a custom prompt message using Roblox Lua\nDESCRIPTION: This snippet demonstrates creating an ExperienceInviteOptions instance for inviting multiple friends with a custom prompt message. It utilizes the Roblox game services SocialService and Players. The key parameter is PromptMessage, which customizes the text shown to the inviting player. This snippet assumes usage within a LocalScript context to access the LocalPlayer. No specific limitations are noted besides UI text length constraints.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/production/promotion/invite-prompts.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal SocialService = game:GetService(\"SocialService\")\nlocal Players = game:GetService(\"Players\")\n\nlocal player = Players.LocalPlayer\n\n-- Construct invite options with a custom prompt message\nlocal inviteOptions = Instance.new(\"ExperienceInviteOptions\")\ninviteOptions.PromptMessage = \"Ask your friends to join the adventure!\"\n```\n\n----------------------------------------\n\nTITLE: Applying and Configuring ColorCorrectionEffect in Roblox Studio\nDESCRIPTION: Adds a `ColorCorrectionEffect` instance as a child of the `Lighting` service and configures its properties via the Roblox Studio Properties window. Setting `Contrast` to `0.05` increases the visual distinction between light and dark colors, while setting `Saturation` to `0.1` makes all colors appear more vivid across the entire scene. Requires adding the `ColorCorrectionEffect` via the Explorer's '+' icon on the Lighting service.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/lighting/enhance-indoor-environments.md#_snippet_10\n\nLANGUAGE: Roblox Studio Properties\nCODE:\n```\n1. Add ColorCorrectionEffect to Lighting service via Explorer.\n2. Select the new ColorCorrectionEffect.\n3. In Properties window:\n   - Set Contrast = 0.05\n   - Set Saturation = 0.1\n```\n\n----------------------------------------\n\nTITLE: Handling Player Join and Rejoin Events in Roblox with Lua\nDESCRIPTION: This Lua snippet sets up event listeners for player join and rejoin events to trigger a UI update that replaces default force field visuals with a custom screen overlay. Dependencies include Roblox's Player service and UI elements. The key functionality is to detect player spawn events and modify the UI accordingly, enhancing visual feedback during gameplay.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/user-interface-design/implement-designs-in-studio.md#_snippet_18\n\nLANGUAGE: Lua\nCODE:\n```\n<script>\nlocal Players = game:GetService(\"Players\")\n\nlocal function onPlayerAdded(player)\n    player.CharacterAdded:Connect(function(character)\n        -- Wait for the force field to load\n        local forceField = character:FindFirstChildOfClass(\"ForceField\")\n        if forceField then\n            -- Replace or modify the force field visuals here\n            -- For example, disable default visuals and show custom UI\n            -- This is a placeholder for actual implementation\n        end\n    end)\nend\n\nPlayers.PlayerAdded:Connect(onPlayerAdded)\n\n-- Optional: Handle rejoining if necessary, depending on game design\n</script>\n```\n\n----------------------------------------\n\nTITLE: Reward Mechanism for Video Ad\nDESCRIPTION: This Lua script defines functions to handle user rewards after watching a video ad, including showing/hiding prompts and granting the reward. It sets up an event handler for ad events via `AdGui.OnAdEvent`, responding to different ad states such as loaded, granted, and unloaded, to manage user rewards and UI cues.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/production/monetization/immersive-ads.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal function grantReward(PlayerId)\n   -- grant an in-game reward\nend\nlocal function showRewardPrompt(PlayerId)\n   -- show Prompt\nend\nlocal function hideRewardPrompt(PlayerId)\n   -- hide Prompt\nend\nlocal AdGui = script.Parent\nAdGui.OnAdEvent = function(eventData)\n   local AdEventType = eventData.AdEventType\n   local PlayerId = eventData.PlayerId\n   if AdEventType == Enum.AdEventType.RewardedAdLoaded then\n       showRewardPrompt(PlayerId)\n       return true\n   elseif AdEventType == Enum.AdEventType.RewardedAdGrant then\n       grantReward(PlayerId)\n       hideRewardPrompt(PlayerId)\n       return true\n   elseif AdEventType == Enum.AdEventType.RewardedAdUnloaded then\n       hideRewardPrompt(PlayerId)\n       return true\n   end\n   return false\nend\n```\n\n----------------------------------------\n\nTITLE: Generating Code Challenge Javascript\nDESCRIPTION: This JavaScript code snippet demonstrates how to create a code verifier, generate a SHA-256 hash, and encode it to create a code challenge, which is required for the PKCE (Proof Key for Code Exchange) flow in OAuth 2.0.  This challenge is sent with the authorization request, adding an extra security layer.  Requires the 'crypto' module.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/auth/oauth2-develop.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript title=\"Generate Code Challenge\"\nconst crypto = require('crypto');\n\n// base64URL encode the verifier and challenge\nfunction base64URLEncode(str) {\n  return str.toString('base64')\n      .replace(/\\+/g, '-')\n      .replace(/\\//g, '_')\n      .replace(/=/g, '');\n}\n\n// create sha256 hash from code verifier\nfunction sha256(buffer) {\n  return crypto.createHash('sha256').update(buffer).digest(`base64`);\n}\n\n// create a random code verifier\nvar code_verifier = base64URLEncode(crypto.randomBytes(32));\n// generate a challenge from the code verifier\nvar code_challenge = base64URLEncode(sha256(code_verifier));\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing Variables in MatchManager (Lua)\nDESCRIPTION: Initializes variables in the `MatchManager` module script. It retrieves services (ServerStorage, ReplicatedStorage), requires necessary module scripts (PlayerManager, GameSettings, Timer), gets event objects, and references the `timeLeft` IntValue from `ReplicatedStorage.DisplayValues`. It also creates a new timer instance.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/battle-royale-series/creating-a-gui.md#_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nlocal MatchManager = {}\n\n-- Services\nlocal ServerStorage = game:GetService(\"ServerStorage\")\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\n-- Module Scripts\nlocal moduleScripts = ServerStorage:WaitForChild(\"ModuleScripts\")\nlocal playerManager = require(moduleScripts:WaitForChild(\"PlayerManager\"))\nlocal gameSettings = require(moduleScripts:WaitForChild(\"GameSettings\"))\nlocal timer = require(moduleScripts:WaitForChild(\"Timer\"))\n\n-- Events\nlocal events = ServerStorage:WaitForChild(\"Events\")\nlocal matchStart = events:WaitForChild(\"MatchStart\")\n\n-- Values\nlocal displayValues = ReplicatedStorage:WaitForChild(\"DisplayValues\")\nlocal timeLeft = displayValues:WaitForChild(\"TimeLeft\")\n\nlocal myTimer = timer.new()\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Scavenger Hunt Modals (Lua)\nDESCRIPTION: This client-side Lua script demonstrates how to display custom GUI elements instead of the default modals provided by the ScavengerHunt module. It connects functions to the `showInfoModal` and `showCompleteModal` events, which fire when the module needs to display information or completion messages respectively (assuming `useCustomModals` was set to true in `configureClient`). The example enables pre-existing `ScreenGui` elements located in the player's `PlayerGui`.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/scavenger-hunt.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal ScavengerHunt = require(ReplicatedStorage:WaitForChild(\"ScavengerHunt\"))\n\nScavengerHunt.showInfoModal:Connect(function()\n\t-- Show a custom info modal\n\tlocal infoModal = Players.LocalPlayer.PlayerGui.ScavengerInfoModal\n\tinfoModal.Enabled = true\nend)\n\nScavengerHunt.showCompleteModal:Connect(function()\n\t-- Show a custom complete modal\n\tlocal completeModal = Players.LocalPlayer.PlayerGui.ScavengerCompleteModal\n\tcompleteModal.Enabled = true\nend)\n```\n\n----------------------------------------\n\nTITLE: Creating an Empty Script Plugin with Lua in Roblox Studio\nDESCRIPTION: This plugin script creates a 'Create Empty Script' button in Roblox Studio's toolbar. When clicked, it inserts a new script into either the selected object or the default `ServerScriptService`, and updates the change history for undo support. It uses `ChangeHistoryService` for undo/redo capabilities and `Selection` service to check user selections.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/studio/plugins.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal ChangeHistoryService = game:GetService(\"ChangeHistoryService\")\nlocal Selection = game:GetService(\"Selection\")\n\n-- Create a new toolbar section titled \"Custom Script Tools\"\nlocal toolbar = plugin:CreateToolbar(\"Custom Script Tools\")\n\n-- Add a toolbar button named \"Create Empty Script\"\nlocal newScriptButton = toolbar:CreateButton(\"Create Empty Script\", \"Create an empty script\", \"rbxassetid://14978048121\")\n\n-- Make button clickable even if 3D viewport is hidden\nnewScriptButton.ClickableWhenViewportHidden = true\n\nlocal function onNewScriptButtonClicked()\n\tlocal selectedObjects = Selection:Get()\n\tlocal parent = game:GetService(\"ServerScriptService\")\n\tif #selectedObjects > 0 then\n\t\tparent = selectedObjects[1]\n\tend\n\n\tlocal newScript = Instance.new(\"Script\")\n\tnewScript.Source = \"\"\n\tnewScript.Parent = parent\n\tChangeHistoryService:SetWaypoint(\"Added new empty script\")\nend\n\nnewScriptButton.Click:Connect(onNewScriptButtonClicked)\n```\n\n----------------------------------------\n\nTITLE: Setting Properties for Dust Emitter Container Part (Roblox Studio)\nDESCRIPTION: Defines essential properties for the 'VFX_DustMotes' block part. Setting Name identifies the part, Transparency to 1 makes it invisible, disabling CanCollide prevents player collision, and enabling Anchored keeps it stationary regardless of physics interactions.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/core/building/create-basic-visual-effects.md#_snippet_1\n\nLANGUAGE: Configuration\nCODE:\n```\nName: VFX_DustMotes\nTransparency: 1\nCanCollide: false\nAnchored: true\n```\n\n----------------------------------------\n\nTITLE: Applying Textures and Decals to Reduce Material Repetition\nDESCRIPTION: This section discusses overlaying grunge textures or decals on tiling materials such as brick or concrete to reduce visible repetition in large objects. Adding a decal as a child of wall meshes introduces realism without modifying base textures, enhancing environmental authenticity.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/modeling/assemble-modular-environments.md#_snippet_2\n\nLANGUAGE: Roblox Studio\nCODE:\n```\nCreate a grunge decal or texture asset, then parent it to your wall meshes as a child object. Adjust placement and transparency to overlay the decal onto tiled surfaces, effectively masking repetitive patterns and adding environmental detail.\n```\n\n----------------------------------------\n\nTITLE: Luau for Loop Condition Preventing Execution\nDESCRIPTION: Shows a scenario where the 'for' loop's body does not execute. The loop starts at 10, aims for 0, but increments by +1. Since the starting value (10) is already past the end value (0) in the direction of the increment, the loop condition is immediately false, and no iterations occur.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-4/intro-to-for-loops.md#_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nfor count = 10, 0, 1 do\n\tprint(count)\n\ttask.wait(1)\nend\n```\n\n----------------------------------------\n\nTITLE: Else Condition Luau\nDESCRIPTION: This code adds an `else` condition to the medal awarding logic.  If none of the previous conditions (gold, silver, or bronze medal) are met, the `else` block is executed.  It prints \"Try again!\" to encourage players who didn't qualify for a medal.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-3/multiple-conditions.md#_snippet_14\n\nLANGUAGE: Luau\nCODE:\n```\nlocal function finish()\n   raceActive = false\n   print(\"You finished in \" .. timePassed)\n\n   if timePassed <= 10 then\n      print(\"You get a gold medal!\")\n   elseif timePassed > 10 and timePassed <= 20 then\n      print(\"You get a silver medal!\")\n   elseif  timePassed > 20 and timePassed <= 30 then\n      print(\"You get a bronze medal!\")\n   else\n      print(\"Try again!\")\n   end\nend\n```\n\n----------------------------------------\n\nTITLE: Running the Discord Bot - Python\nDESCRIPTION: This line starts the Discord bot by calling the `run()` method of the `client` object and passing the bot token. This initiates the bot's connection to Discord and begins listening for events, handling messages and responding.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/webhooks/automate-right-to-erasure.md#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n        client.run(bot_config.BOT_TOKEN)\n```\n\n----------------------------------------\n\nTITLE: Accessing ChinRaiserUpperLip Control in Roblox\nDESCRIPTION: Reference to the ChinRaiserUpperLip control which raises the upper lip up when ChinRaiser is engaged and touching the upper lip. Should be set to the same value as ChinRaiser to ensure lips move the same distance.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/characters/facial-animation/facs-poses-reference.md#_snippet_18\n\nLANGUAGE: Roblox\nCODE:\n```\nClass.FaceControls.ChinRaiserUpperLip\n```\n\n----------------------------------------\n\nTITLE: Setting Mission Completion Handlers in Roblox Lua\nDESCRIPTION: Defines a Lua function used as a handler when a player completes a mission. This completion handler receives a player object and a mission ID, and performs operations such as logging completion or awarding rewards. The snippet sets this handler for a specific mission ID using Missions.setCompletionHandler. Dependency is on the Missions module and a valid mission ID. Inputs include the player and missionId; outputs are any side effects performed inside the handler such as reward assignment.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/feature-packages/missions.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal function completeHandler(player: Player, missionId: Types.MissionId)\n    print(`{player} completed mission {missionId}`)\n    -- Award player their rewards.\nend\n\nMissions.setCompletionHandler(missionId, completeHandler)\n```\n\n----------------------------------------\n\nTITLE: Connecting touch event handler to the platform in Roblox Lua\nDESCRIPTION: This code attaches the `onTouch()` function to the `Touched` event of the `sellPart`. When any object touches the part in gameplay, `onTouch()` executes, enabling detection of player interaction for subsequent item selling logic. It relies on the prior definition of `onTouch()` and requires the script to be properly connected to the platform part.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/adventure-game-series/selling-items.md#_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nsellPart.Touched:Connect(onTouch)\n```\n\n----------------------------------------\n\nTITLE: Setting API Key Environment Variable in Bash\nDESCRIPTION: Shows how to set the API_KEY environment variable in bash.  This variable is used by the Node.js and Python scripts to authenticate with the Roblox DataStore API.  The provided value `...` represents the actual API key that should be used.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/guides/usage-data-stores.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport API_KEY=... \\\nnode updateInventory.js\n```\n\n----------------------------------------\n\nTITLE: Checking User Direct Chat Capability with TextChatService (Lua)\nDESCRIPTION: This asynchronous method within the Roblox TextChatService API determines if a specific user is allowed to participate in *direct messages* with other users. It evaluates permissions based on privacy and parental controls, essential for implementing direct messaging features correctly.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/chat/guidelines.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nTextChatService:CanUserDirectChatAsync()\n```\n\n----------------------------------------\n\nTITLE: Positioning & Facing Roblox Part with CFrame.new(pos, target) (Lua)\nDESCRIPTION: Demonstrates how to position a Roblox Part at a specific point and orient its front face towards another point (or object's position) using the `CFrame.new(position, target)` constructor. The first argument is the desired position, and the second is the target point. Requires two `Part` objects (e.g., `redBlock`, `blueCube`). Positions `redBlock` at (0, 3, 0) and points it towards `blueCube`.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/workspace/cframes.md#_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal redBlock = Workspace.RedBlock\nlocal blueCube = Workspace.BlueCube\n\n-- Create a Vector3 for both the start position and target position\nlocal startPosition = Vector3.new(0, 3, 0)\nlocal targetPosition = blueCube.Position\n\n-- Put the redBlock at 'startPosition' and point its front surface at 'targetPosition'\nredBlock.CFrame = CFrame.new(startPosition, targetPosition)\n```\n\n----------------------------------------\n\nTITLE: RaceManager Setup Luau\nDESCRIPTION: This code initializes variables and defines two basic functions: `finish()` and `partTouched()`. `finish()` is responsible for a basic print statement, and `partTouched()` detects when a player touches a part. `partTouched()` calls the `finish()` function.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-3/multiple-conditions.md#_snippet_3\n\nLANGUAGE: Luau\nCODE:\n```\nlocal finishLine = script.Parent\nlocal timePassed = 0\n\nlocal function finish()\n\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Avatar Assets to MerchBooth Store (Lua)\nDESCRIPTION: Adds avatar assets (such as wearable clothing and accessories) to the MerchBooth catalog using their asset IDs. This Script runs in ServerScriptService, uses ReplicatedStorage for the module reference, and iterates a list of asset IDs, adding each with MerchBooth.addItemAsync. Accepts only assetId as parameter for avatar assets. Handles errors via pcall and warning output. Expects IDs as numbers within the items table; sorting can be configured separately.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/merch-booth.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal MerchBooth = require(ReplicatedStorage:WaitForChild(\"MerchBooth\"))\n\nlocal items = {\n\t607702162, -- Roblox Baseball Cap\n\t4819740796, -- Robox\n\t1374269, -- Kitty Ears\n\t11884330, -- Nerd Glasses\n\t10476359, -- Paper Hat\n}\n\nfor _, assetId in items do\n\tlocal success, errorMessage = pcall(function()\n\t\tMerchBooth.addItemAsync(assetId)\n\tend)\n\tif not success then\n\t\twarn(errorMessage)\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Checking User Selections in Roblox Studio Plugins\nDESCRIPTION: Usage of `Class.Selection` to determine what objects a user has selected in Roblox Studio. The plugin adapts its behavior based on whether objects are selected, such as placing new scripts in those objects or default locations. This improves plugin flexibility based on user context.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/studio/plugins.md#_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Template for Adding Developer Products (empty items list, requires type) (Lua)\nDESCRIPTION: Provides a starter script with an empty items list for registering developer products in the MerchBooth catalog via addItemAsync, specifying Enum.InfoType.Product as the item type. Placement is in ServerScriptService and expects the developer to override the items table with valid product IDs. Error handling is performed using pcall within the iteration.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/merch-booth.md#_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal MerchBooth = require(ReplicatedStorage:WaitForChild(\"MerchBooth\"))\n\nlocal items = {\n\n}\n\nfor _, assetId in items do\n\tlocal success, errorMessage = pcall(function()\n\t\tMerchBooth.addItemAsync(assetId, Enum.InfoType.Product)\n\tend)\n\tif not success then\n\t\twarn(errorMessage)\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Table Types and Indexed Table Types in Luau Lua\nDESCRIPTION: Demonstrates defining list and index types for tables. The examples include a list of numbers type and a dictionary with string keys and number values. It also highlights that type errors occur for mismatched value types in indexed tables.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/type-checking.md#_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nlocal numbers: {number} = {1, 2, 3, 4, 5}\nlocal characterParts: {Instance} = LocalPlayer.Character:GetChildren()\n\nlocal numberList: {[string]: number} = {\n\tFoo = 1,\n\tBaz = 10\n}\n\nnumberList[\"bar\"] = true  -- Type error: boolean can't convert to number\n```\n\n----------------------------------------\n\nTITLE: Creating Sets in Lua\nDESCRIPTION: Demonstrates how to create a new set using the Set.new() constructor with an initial array of items. Sets have no concept of ordering by definition.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/metatables.md#_snippet_13\n\nLANGUAGE: lua\nCODE:\n```\nlocal fruits = Set.new({\"Apple\", \"Lemon\", \"Orange\", \"Cherry\", \"Lime\", \"Peach\"})\n```\n\n----------------------------------------\n\nTITLE: Displaying Asset IDs\nDESCRIPTION: This snippet displays an asset ID using `rbxassetid://[ID]`. The ID is a unique identifier for an asset.  Different instance properties reference assets through their respective IDs.  Dependencies include understanding the Roblox asset system, including `Class.Texture`, `Class.MeshPart`, and `Class.Sound`.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/projects/assets/index.md#_snippet_0\n\nLANGUAGE: None\nCODE:\n```\nrbxassetid://[ID]\n```\n\n----------------------------------------\n\nTITLE: Opening the Emote Menu in Lua\nDESCRIPTION: This Lua script demonstrates how to programmatically open the player's emote menu using the GuiService:SetEmotesMenuOpen() method. It retrieves the GuiService and calls the method with 'true' to display the menu.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/characters/emotes.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Open the emote Menu\nlocal GuiService = game:GetService(\"GuiService\")\nGuiService:SetEmotesMenuOpen(true)\n```\n\n----------------------------------------\n\nTITLE: Implementing Purchasing System Algorithm in Luau\nDESCRIPTION: This code snippet describes a purchasing system algorithm using Luau that allows players to buy items with coins. It includes verification for sufficient funds and updating player coins after purchase. The example demonstrates both algorithm implementation and abstraction concepts required for the AP CSP Create Performance Task.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/resources/roblox-for-the-ap-csp-create-performance-task.md#_snippet_0\n\nLANGUAGE: Luau\nCODE:\n```\nfunction buyItem(itemToBuy)\n    -- Main algorithm that combines two sub-algorithms\n    verifyPurchase()\n    purchaseItem()\nend\n\nfunction verifyPurchase()\n    -- Sub algorithm 1: Check if player has enough coins\n    if playerCoins >= getCost(itemToBuy) then\n        displayPurchaseConfirmation()\n    else\n        displayMessage(\"Sorry, you don't have enough coins\")\n    end\nend\n\nfunction purchaseItem()\n    -- Sub algorithm 2: Subtract cost from player coins and update\n    playerCoins = playerCoins - getCost(itemToBuy)\n    updateLeaderboard(playerCoins)\nend\n\nfunction getCost(itemType)\n    -- Abstraction: Returns cost from a dictionary instead of hard-coding\n    return itemCosts[itemType]\nend\n```\n\n----------------------------------------\n\nTITLE: Implement Health Pickup With Attribute Debounce Roblox Lua\nDESCRIPTION: Shows how to implement a cooldown for a pickup item using an instance attribute (`\"CoolingDown\"`) and `task.wait` as a debounce mechanism. After being triggered, the pickup becomes inactive for a `COOLDOWN_TIME`, indicated visually by changing its transparency, before resetting and becoming available again.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/scripting/debounce.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal part = script.Parent\npart.Anchored = true\npart.CanCollide = false\n\nlocal COOLDOWN_TIME = 5\n\nlocal function healPlayer(otherPart)\n\tlocal humanoid = otherPart.Parent:FindFirstChildWhichIsA(\"Humanoid\")\n\tif humanoid then\n\t\tif not part:GetAttribute(\"CoolingDown\") then\n\t\t\tpart:SetAttribute(\"CoolingDown\", true)  -- Set attribute to true\n\t\t\thumanoid.Health += 25  -- Increase player health\n\t\t\tpart.Transparency = 0.75  -- Make part semi-transparent to indicate cooldown state\n\t\t\ttask.wait(COOLDOWN_TIME)  -- Wait for cooldown duration\n\t\t\tpart.Transparency = 0  -- Reset part to fully opaque\n\t\t\tpart:SetAttribute(\"CoolingDown\", false)  -- Reset attribute\n\t\tend\n\tend\nend\n\npart.Touched:Connect(healPlayer)\n```\n\n----------------------------------------\n\nTITLE: Defining the getKey Module Function Scaffold - Roblox Lua\nDESCRIPTION: This code defines the 'getKey' module function within the TreasureManager table, taking 'keyPart' and 'whichCharacter' as parameters. It sets up the framework for implementing logic related to picking up keys, including eventual destruction of the key part and inventory updating. Dependencies include the TreasureManager module being correctly required and invoked with appropriate arguments. The function's body is left empty for further development.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-6/create-with-module-scripts.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal TreasureManager = {}\n\n------------------ Local Functions\n\n------------------ Module Functions\nfunction TreasureManager.getKey(keyPart, whichCharacter)\n\nend\n\nreturn TreasureManager\n```\n\n----------------------------------------\n\nTITLE: Example Token Introspection Response (Roblox OAuth 2.0)\nDESCRIPTION: An example JSON response from the `POST /oauth/v1/token/introspect` endpoint. It indicates whether the token is `active` (true/false) and provides details like the token identifier (`jti`), issuer (`iss`), token type, client ID, audience (`aud`), subject (`sub`), scope, expiration time (`exp`), and issuance time (`iat`).\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/auth/oauth2-reference.md#_snippet_8\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"active\": true,\n  \"jti\": \"RT.2GcjvTduKzk6QY9tjTfm\",\n  \"iss\": \"https://apis.roblox.com/oauth/\",\n  \"token_type\": \"Bearer\",\n  \"client_id\": \"840974200211308101\",\n  \"aud\": \"4239311013248676173\",\n  \"sub\": \"1516563360\",\n  \"scope\": \"universe-messaging-service:publish\",\n  \"exp\": 1676394509,\n  \"iat\": 1660842510\n}\n```\n\n----------------------------------------\n\nTITLE: Orienting Part Surfaces Toward a Point Using CFrame in Roblox Lua\nDESCRIPTION: This Lua snippet demonstrates how to make one part face another by setting its CFrame to look at a target position, then further rotates the part so its top surface points toward the same target. It requires Roblox Studio context, with objects named \"RedBlock\" and \"BlueCube\" in Workspace. The snippet uses \"CFrame.new\" for directional alignment and \"CFrame.Angles\" combined with \":ToWorldSpace\" for relative rotation. Input is the positions of the objects, and output is the rotated orientation of the red block. The parts must already exist in Workspace.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/workspace/cframes.md#_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal redBlock = Workspace.RedBlock\nlocal blueCube = Workspace.BlueCube\n\n-- Create a Vector3 for the target position\nlocal targetPosition = blueCube.Position\n\n-- Point the redBlock's front surface at 'targetPosition'\nredBlock.CFrame = CFrame.new(redBlock.Position, targetPosition)\n\n-- Now the redBlock's front surface (white circle) is pointing towards the blueCube\n\n-- Rotate redBlock's CFrame relative to itself so that its top surface (not front) points toward the target\nlocal rotatedCFrame = CFrame.Angles(math.rad(-90), 0, 0)\nredBlock.CFrame = redBlock.CFrame:ToWorldSpace(rotatedCFrame)\n\n-- Now the redBlock's top surface (black circle) is pointing towards the blueCube (as seen in After below)\n```\n\n----------------------------------------\n\nTITLE: Fixing TextureID Mismatch (MeshPart/SpecialMesh)\nDESCRIPTION: This error flags a discrepancy between the `TextureID` property on a `MeshPart` and its corresponding `SpecialMesh` instance (`%s`). Ensure both properties reference the same texture asset ID by matching the TextureIds.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/validation-errors.md#_snippet_2\n\nLANGUAGE: Text\nCODE:\n```\nModel textureId mismatch between `MeshPart.TextureID` and `SpecialMesh.TextureId` for `%s`. You need to match the textureIds and try again.\n```\n\n----------------------------------------\n\nTITLE: Calculating Friends Signal Score (Numerical)\nDESCRIPTION: Calculates a numerical signal score for the Friends signal, representing the number of preferred players (friends or same IP address) in the server, with a maximum relevant value of 1.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/matchmaking/attributes-and-signals.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nfriendsSignalScore = min(# preferred players in server, 1) / 1\n```\n\n----------------------------------------\n\nTITLE: Filtering by Individual Field Comparison of Color3 Property\nDESCRIPTION: Finds all instances where the Red (`R`) component of their `Color` property is greater than 120. Allows comparison operators on individual fields of composite types like Color3.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/studio/explorer.md#_snippet_5\n\nLANGUAGE: RobloxSearchQuery\nCODE:\n```\nColor.R > 120\n```\n\n----------------------------------------\n\nTITLE: Configure Character Movement - Lua\nDESCRIPTION: This code snippet demonstrates how to configure the merch booth to disable character movement while the booth is open. It sets the disableCharacterMovement property to true in the configure function.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/merch-booth.md#_snippet_11\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal MerchBooth = require(ReplicatedStorage:WaitForChild(\"MerchBooth\"))\n\nMerchBooth.configure({\n\tdisableCharacterMovement = true\n})\n```\n\n----------------------------------------\n\nTITLE: Using Library.task.wait to yield for a duration in Roblox Lua\nDESCRIPTION: This snippet demonstrates how to yield a thread for a set number of seconds using Library.task.wait(), which resumes after the elapsed time. It illustrates capturing the actual wait duration, which may vary slightly due to engine performance, making it suitable for animations and timing events.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/scripting/scheduler.md#_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\nlocal elapsedTime = task.wait(2) -- wait for 2 seconds\nprint(elapsedTime) --&gt; 2.0792941\n```\n\n----------------------------------------\n\nTITLE: Rendering Content Metadata and Interactive Links with React JSX\nDESCRIPTION: This snippet renders textual metadata including a heading with the content title and a paragraph with the content description. It conditionally maps over an array of link objects (content.links) to render each as an HTML anchor element wrapped with Typography components for styled text. Each link includes href and text properties. This allows dynamic generation of navigational links associated with the content, enhancing user interaction.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/platform.md#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<h3>{content.title}</h3>\n<p>{content.description}</p>\n{content.links && content.links.map((link, linkIndex) => (\n  <a href={link.href} key={linkIndex}>\n    <Typography variant='buttonLarge'>{link.text}</Typography><br />\n  </a>\n))}\n```\n\n----------------------------------------\n\nTITLE: Initializing Services and Modules in PlayerStateHandler Lua Script\nDESCRIPTION: This Lua snippet initializes essential Roblox services, such as `ReplicatedStorage` and `Players`, and requires custom modules that define game state, attributes, and helper functions. It also obtains a reference to the `LocalPlayer`. These initializations are prerequisites for the script's primary function of managing player states and reacting to state changes.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/user-interface-design/implement-designs-in-studio.md#_snippet_19\n\nLANGUAGE: Lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal Players = game:GetService(\"Players\")\n\nlocal PlayerState = require(ReplicatedStorage.PlayerState)\nlocal PlayerAttribute = require(ReplicatedStorage.PlayerAttribute)\nlocal BlasterState = require(ReplicatedStorage.Blaster.BlasterState)\nlocal togglePlayerMovement = require(script.togglePlayerMovement)\nlocal togglePlayerCamera = require(script.togglePlayerCamera)\nlocal scheduleDestroyForceField = require(ReplicatedStorage.scheduleDestroyForceField)\n\nlocal localPlayer = Players.LocalPlayer\n\n```\n\n----------------------------------------\n\nTITLE: Running Leaderboard Application (Bash)\nDESCRIPTION: This bash command sets the `API_KEY` environment variable and runs the `leaderboard.js` or `leaderboard.py` script. It assumes Node.js or Python is installed and configured.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/guides/usage-data-stores.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nexport API_KEY=... \\\nnode leaderboard.js\n```\n\nLANGUAGE: bash\nCODE:\n```\nexport API_KEY=... \\\npython leaderboard\n```\n\n----------------------------------------\n\nTITLE: Sending System Messages in Roblox Chat (Lua Client Script)\nDESCRIPTION: This Lua client-side script demonstrates how to send a system message to the local player's chat window. It retrieves the default 'RBXGeneral' TextChannel using `TextChatService` and calls the `DisplaySystemMessage` method on it, prepending a custom prefix to the player's display name.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/chat/chat-window.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\nlocal TextChatService = game:GetService(\"TextChatService\")\n\nlocal player = Players.LocalPlayer\nlocal generalChannel: TextChannel = TextChatService:WaitForChild(\"TextChannels\").RBXGeneral\n\nlocal PREFIX = \"[Guide] Welcome \"\n\n-- Send \"system message\" to player with their display name appended\ngeneralChannel:DisplaySystemMessage(PREFIX .. player.DisplayName)\n```\n\n----------------------------------------\n\nTITLE: Unbinding Action Handlers When Tool is Unequipped in Roblox Lua\nDESCRIPTION: This snippet adds logic for unbinding the reload action using ContextActionService:UnbindAction when the tool is unequipped. The 'toolUnequipped' function is defined and wired to the Tool's Unequipped event. Dependencies: ContextActionService, RELOAD_ACTION, and valid Tool events. Input: Unequipped event; output: user input handler is disabled. Important for preventing actions from persisting unintentionally.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/input-and-camera/detect-user-input.md#_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlocal function toolEquipped()\n\tContextActionService:BindAction(RELOAD_ACTION, onAction, true, Enum.KeyCode.R)\n\ttool.Handle.Equip:Play()\nend\n\nlocal function toolUnequipped()\n\tContextActionService:UnbindAction(RELOAD_ACTION)\nend\n\nlocal function toolActivated()\n\ttool.Handle.Activate:Play()\nend\n\ntool.Equipped:Connect(toolEquipped)\ntool.Activated:Connect(toolActivated)\n```\n\n----------------------------------------\n\nTITLE: Handling Scene Transitions with onOrchestrationFinished in Lua\nDESCRIPTION: A server-side Script that demonstrates how to connect to the onOrchestrationFinished event of the EventSequencer module to manage scene transitions. The callback function receives the name of the ended scene and conditionally loads the next appropriate scene, creating a cycle between different scenes.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/event-sequencer.md#_snippet_23\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal EventSequencer = require(ReplicatedStorage:WaitForChild(\"EventSequencer\"))\n\n-- Figure out next scene to load when current scene finishes\nEventSequencer.onOrchestrationFinished:Connect(function(endedSceneName)\n\tif endedSceneName == \"PreShow\" then\n\t\t-- \"PreShow\" ended; load the first scene in the concert\n\t\tEventSequencer.loadScene(\"Track1\")\n\telseif endedSceneName == \"Track1\" then\n\t\t-- \"Track1\" ended; load the second scene in the concert\n\t\tEventSequencer.loadScene(\"Track2\")\n\telse\n\t\t-- Loop back to the pre-show scene\n\t\tEventSequencer.loadScene(\"PreShow\")\n\tend\nend)\n```\n\n----------------------------------------\n\nTITLE: Defining a Function with Code Inside in Luau - Lua\nDESCRIPTION: This example demonstrates how to insert executable code within a custom function in Luau. A print statement is included inside printFood(), which, when the function is called, will output 'Curry!' to the Output window. The function does not require any parameters or return values. For use within Roblox Studio, place this code in a Script. This showcases the basic pattern for defining and implementing the body of a function.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-2/code-a-function.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal function printFood()\n\t-- Code here runs when the function is called\nend\n\n-- Code here will not run\n```\n\n----------------------------------------\n\nTITLE: Connecting to Network Messages with Encapsulated Server Module in Roblox Script Lua\nDESCRIPTION: A server-side Script example demonstrating how to connect to a specific network message identified by \"RequestA\" using the NetworkManagerServer module. It requires the server module from ServerScriptService and uses GetServerEventSignal to obtain the BindableEvent Event associated with \"RequestA\". A connection is made to print the player and additional parameters whenever the event fires, showcasing simple and centralized server-side message handling.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/scripting/scripts.md#_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\n-- Script in ServerScriptService\nlocal ServerScriptService = game:GetService(\"ServerScriptService\")\n\nlocal NetworkManagerServer = require(ServerScriptService:WaitForChild(\"NetworkManagerServer\"))\nNetworkManagerServer.GetServerEventSignal(\"RequestA\"):Connect(function(player, ...)\n\tprint(\"Received RequestA from\", player, ...)\nend)\n```\n\n----------------------------------------\n\nTITLE: Binding Reload Action to Key Press Using ContextActionService in Roblox Lua\nDESCRIPTION: This snippet shows how to bind a custom reload action to the 'R' key using ContextActionService:BindAction. Inside the 'toolEquipped' function, it passes the action name, handler function, a flag to display a touch button, and the key code for 'R'. Upon equipping the tool, the callback is active and an equip sound/animation plays. Requires onAction function, the RELOAD_ACTION constant, and ContextActionService to be defined. Inputs: tool equip event; outputs: action is bound. Limitations: binding is only active when the tool is equipped.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/input-and-camera/detect-user-input.md#_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal RELOAD_ACTION = \"reloadWeapon\"\n\nlocal function onAction(actionName, inputState, inputObject)\n\tif actionName == RELOAD_ACTION and inputState == Enum.UserInputState.Begin then\n\t\ttool.TextureId = \"rbxassetid://6593020923\"\n\t\ttask.wait(2)\n\t\ttool.TextureId = \"rbxassetid://92628145\"\n\tend\nend\n\nlocal function toolEquipped()\n\tContextActionService:BindAction(RELOAD_ACTION, onAction, true, Enum.KeyCode.R)\n\ttool.Handle.Equip:Play()\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Debug Version with Cheats\nDESCRIPTION: A debug version was created with keyboard cheats and buttons to automatically complete missions for testing purposes. A DemoGlobalSettings script checks the placeID and Studio environment to enable/disable cheats.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/the-mystery-of-duvall-drive/main-design-requirements.md#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Implementing Team Voice Chat in Roblox using Lua\nDESCRIPTION: This Lua code snippet demonstrates how to implement team-based voice chat in a Roblox experience. It creates two teams (Red and Blue) and ensures that only players on the same team can hear each other. The code utilizes the Teams and Players services, AudioDeviceInput, and AccessModifierType. The code creates teams, assigns players to teams, and updates the AudioDeviceInput's access list to allow communication only within the team. The script requires the Teams and Players services to function correctly.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/audio/add-voice-chat.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal Teams = game:GetService(\"Teams\")\nlocal Players = game:GetService(\"Players\")\n\nlocal redTeam = Instance.new(\"Team\", Teams)\nredTeam.TeamColor = BrickColor.new(\"Bright red\")\nredTeam.AutoAssignable = true\nredTeam.Name = \"Red Team\"\n\nlocal blueTeam = Instance.new(\"Team\", Teams)\nblueTeam.TeamColor = BrickColor.new(\"Bright blue\")\nblueTeam.AutoAssignable = true\nblueTeam.Name = \"Blue Team\"\n\nlocal function getUserIds(team : Team) : {number}\n\tlocal userIds = {}\n\tfor _, player : Player in team:GetPlayers() do\n\t\ttable.insert(userIds, player.UserId)\n\tend\n\treturn userIds\nend\n\nlocal function getDevices(team : Team) : {AudioDeviceInput}\n\tlocal devices = {}\n\tfor _, player : Player in team:GetPlayers() do\n\t\tlocal device : AudioDeviceInput = player:FindFirstChild(\"AudioDeviceInput\")\n\t\tif not device then\n\t\t\tcontinue\n\t\tend\n\t\ttable.insert(devices, device)\n\tend\n\treturn devices\nend\n\nlocal function updateTeam(team : Team)\n\tlocal users = getUserIds(team)\n\tfor _, device in getDevices(team) do\n\t\tdevice.AccessType = Enum.AccessModifierType.Allow\n\t\tdevice:SetUserIdAccessList(users)\n\tend\nend\n\nlocal function onDeviceAdded(device : AudioDeviceInput)\n\tlocal player : Player = device.Parent\n\tif player.Team then\n\t\tupdateTeam(player.Team)\n\tend\nend\n\nlocal function onPlayerAdded(player : Player)\n\tlocal device = player:FindFirstChild(\"AudioDeviceInput\")\n\tif device then\n\t\tonDeviceAdded(device)\n\tend\n\tplayer.ChildAdded:Connect(function(child)\n\t\tif child.Name == \"AudioDeviceInput\" then\n\t\t\tonDeviceAdded(child)\n\t\tend\n\tend)\nend\n\nupdateTeam(blueTeam)\nupdateTeam(redTeam)\n\nfor _, player in Players:GetPlayers() do\n\tonPlayerAdded(player)\nend\n\nPlayers.PlayerAdded:Connect(onPlayerAdded)\nblueTeam.PlayerAdded:Connect(function() updateTeam(blueTeam) end)\nblueTeam.PlayerRemoved:Connect(function() updateTeam(blueTeam) end)\nredTeam.PlayerAdded:Connect(function() updateTeam(redTeam) end)\nredTeam.PlayerRemoved:Connect(function() updateTeam(redTeam) end)\n```\n\n----------------------------------------\n\nTITLE: Elevating Metal Reflections - Roblox Studio\nDESCRIPTION: This snippet explains how to enhance metal reflections in a Roblox Studio environment using Future lighting. It involves setting the `EnvironmentDiffuseScale` and `EnvironmentSpecularScale` properties of the `Lighting` service to `1`. This increases the realism of reflections on metallic surfaces. It requires access to the `Lighting` service and its properties within Roblox Studio.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/lighting/enhance-outdoor-environments-with-future-lighting.md#_snippet_1\n\nLANGUAGE: Roblox Studio\nCODE:\n```\n1. In the **Explorer** window, select **Lighting**.\n2. In the **Properties** window, set **EnvironmentalDiffuseScale** and **EnvironmentSpecularScale** to `1`. The metal in the experience becomes more reflective.\n```\n\n----------------------------------------\n\nTITLE: Example v1 Standard DataStores Error Response in JSON\nDESCRIPTION: Demonstrates the structure of v1 resource API error responses for DataStores, which includes error, message, and errorDetails fields. This example shows an invalid cursor error with DataStore-specific details.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/reference/errors.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"error\": \"INVALID_ARGUMENT\",\n  \"message\": \"Invalid cursor.\",\n  \"errorDetails\": [\n    {\n      \"errorDetailType\": \"DatastoreErrorInfo\",\n      \"datastoreErrorCode\": \"InvalidCursor\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Incremental Brightness Increase Loop in Roblox Lua\nDESCRIPTION: A for loop that gradually increases the light's brightness from 0 to 5 using a specified step size, with delays controlled by task.wait. It updates the light's Brightness property each iteration to animate the glow effect forward. Requires the previous variable definitions and the light object reference.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-4/glow-lights-with-for-loops.md#_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nfor currentBrightness = 0, 5, brightnessChange do\n  light.Brightness = currentBrightness\n  task.wait(timeChange)\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing purchase handler for in-experience currency in Lua\nDESCRIPTION: Defines a function `awardInExperiencePurchase` to handle in-experience currency transactions, checking if players have sufficient currency, updating their data, and deducting the spent amount. This function is registered with the Bundles system for each currency via `setInExperiencePurchaseHandler`.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/feature-packages/bundles.md#_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\nlocal function awardInExperiencePurchase(\n    _player: Player,\n    _bundleId: Types.BundleId,\n    _currencyId: CurrencyTypes.CurrencyId,\n    _price: number\n)\n    -- Check if the player has enough currency to purchase the bundle\n    -- Update player data, give items, etc.\n    -- Deduct the currency from the player\n\n    task.wait(2)\n    return true\nend\n\nlocal function initializePurchaseHandlers()\n    local bundles = Bundles.getBundles()\n    for bundleId, bundle in bundles do\n        -- Bundle is not associated with a developer product if it does not have marketplace price type\n        if not bundle or bundle.pricing.priceType ~= \"Marketplace\" then\n            continue\n        end\n\n        Bundles.setPurchaseHandler(bundleId, awardMarketplacePurchase)\n        receiptHandlers[bundle.pricing.devProductId] = receiptHandler\n    end\n\n    -- If you have any in-experience currencies that you are using for bundles, set the handler here\n    for currencyId, _ in Currencies do\n        Bundles.setInExperiencePurchaseHandler(currencyId, awardInExperiencePurchase)\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Returning Collision Position or Ray End Point in Lua\nDESCRIPTION: This code snippet implements the logic for determining the 3D world position of the mouse click and it will return the result of the raycast's position. If there is no collision, then it returns the calculated end point of the ray based on the maximum mouse distance.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/scripting/intermediate-scripting/hit-detection-with-lasers.md#_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nif raycastResult then\n\t\t-- Return the 3D point of intersection\n\t\treturn raycastResult.Position\n\telse\n\t\t-- No object was hit so calculate the position at the end of the ray\n\t\treturn screenToWorldRay.Origin + directionVector\n\tend\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Behavior for Dust Particle Emitter (Roblox Studio)\nDESCRIPTION: Defines the dynamic behavior properties for the 'Emitter_DustMotes'. This includes the particle lifetime range, a high emission rate balanced by large volume, initial rotation range, rotational speed, initial speed range, and an acceleration vector causing particles to gently float upwards.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/core/building/create-basic-visual-effects.md#_snippet_3\n\nLANGUAGE: Configuration\nCODE:\n```\nLifetime: 1, 10\nRate: 50000\nRotation: -45, 45\nRotSpeed: -60\nSpeed: 1, 5\nAcceleration: 1, -1, 1\n```\n\n----------------------------------------\n\nTITLE: Scripting Button Activation to Change Color in Roblox Lua\nDESCRIPTION: This Lua script connects to a button's Activated event, changing its background color to a randomly selected hue each time it's clicked. It demonstrates how to add interactive behavior to a Button using Roblox's event system.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/ui/buttons.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal button = script.Parent\nlocal RNG = Random.new()\nlocal function onButtonActivated()\n\t-- randomize the button color\n\tbutton.BackgroundColor3 = Color3.fromHSV(RNG:NextNumber(), 1, 1)\nend\nbutton.Activated:Connect(onButtonActivated)\n```\n\n----------------------------------------\n\nTITLE: Opening the Merch Booth Catalog with MerchBooth - Lua\nDESCRIPTION: Illustrates how to open the merch booth catalog with openMerchBooth after registering an item asynchronously. Error handling captures any issue with addItemAsync. Requires the MerchBooth module and assetId. It shows UI changes only and should be called from a LocalScript.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/merch-booth.md#_snippet_25\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal MerchBooth = require(ReplicatedStorage:WaitForChild(\"MerchBooth\"))\n\nlocal success, errorMessage = pcall(function()\n\tMerchBooth.addItemAsync(assetId)\nend)\nif not success then\n\twarn(errorMessage)\nend\n\nMerchBooth.openMerchBooth()\n\n```\n\n----------------------------------------\n\nTITLE: Setting bundle pricing with in-experience currency in Lua\nDESCRIPTION: Configures bundle pricing to use an in-experience currency instead of a marketplace developer product. It specifies the price amount, the currency ID, and optional icon asset ID for display purposes. This method requires manual handling of purchase validation.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/feature-packages/bundles.md#_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\n    -- Otherwise, if you want to use in-experience currency instead of a dev product, you can use the following instead:\n    -- Price here is in the in-experience currency, not Robux\n    pricing = {\n        priceType = CurrencyTypes.PriceType.InExperience,\n        price = 79,\n        currencyId = \"Gems\",\n        icon = 18712203759,\n    },\n```\n\n----------------------------------------\n\nTITLE: Clearing Timer Text and Resetting timerActive Flag in Roblox - Lua\nDESCRIPTION: Explicitly clears the timerText display and resets timerActive to false, preparing the system for another activation. Ensures that no previous timer information remains. Should be placed after bridge has been reset in startTimer.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-4/create-a-timed-bridge.md#_snippet_13\n\nLANGUAGE: Lua\nCODE:\n```\nbridge.Transparency = 0.8\nbridge.CanCollide = false\ntimerText.Text = \"\"\ntimerActive = false\n```\n\n----------------------------------------\n\nTITLE: Reading Event ID from GameJoinContext (Lua)\nDESCRIPTION: This Lua code snippet demonstrates how to read the event ID from the `GameJoinContext` when a player joins the game. It accesses the `Players` service, listens for the `PlayerAdded` event, and extracts the `EventId` from the `GameJoinContext` of the player's join data. This information can then be used to customize the player's experience based on the event they joined from.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/production/promotion/experience-events.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nlocal function onPlayerAdded(player)\n\tlocal source = player:GetJoinData()\n\t-- Check if the provided source is valid\n\tif source then\n\t\t-- Read eventId from GameJoinContext\n\t\tlocal eventId = source.GameJoinContext.EventId\n\n\t\tif eventId then\n\t\t\tprint(player.Name, \"joined from the event:\", eventId)\n\t\tend\n\tend\nend\n\nPlayers.PlayerAdded:Connect(onPlayerAdded)\n```\n\n----------------------------------------\n\nTITLE: Recursive Deep Freeze Function to Make Nested Tables Read-Only in Luau - Lua\nDESCRIPTION: Defines a recursive `deepFreeze` function to apply shallow freezes to a table and all nested tables it contains, making the entire hierarchy immutable. Uses `table.freeze()` on each table it encounters during traversal. Requires only base Luau syntax. Input is any nested table; output is deeply frozen, preventing modifications at all levels.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/tables.md#_snippet_19\n\nLANGUAGE: lua\nCODE:\n```\nlocal function deepFreeze(target)\n\t-- Shallow freeze the table\n\ttable.freeze(target)\n\n\t-- Check each key of the table and freeze it if it's a table\n\tfor _, v in target do\n\t\tif type(v) == \"table\" then\n\t\t\tdeepFreeze(v)\n\t\tend\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Example JSON Payload Schema for Roblox Right To Erasure Request Notification\nDESCRIPTION: This JSON snippet exemplifies the payload structure sent by Roblox webhooks for the 'RightToErasureRequest' event. It includes fixed fields like 'NotificationId', 'EventType', and 'EventTime' and a variable 'EventPayload' object that contains user-specific data such as 'UserId' and associated 'GameIds'. This schema is essential for processing webhook data correctly.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/webhooks/webhook-notifications.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"NotificationId\": \"string\",\n   \"EventType\": \"RightToErasureRequest\",\n   \"EventTime\": \"2023-12-30T16:24:24.2118874Z\",\n   \"EventPayload\": {\n      \"UserId\": 1,\n      \"GameIds\": [\n         1234, 2345\n      ]\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering YouTube Video Player with React JSX\nDESCRIPTION: This snippet renders a YouTube video player using an iframe within a React JSX environment. It applies inline styles to maintain a 16:9 aspect ratio, sets accessibility attributes like title and allowfullscreen, and configures frame-related policies to enhance security and user experience. The video source URL is dynamically inserted via the content.video property. It requires the content object containing a valid video URL as input and outputs a responsive embedded video player.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/platform.md#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nstyle={{ width: '100%', aspectRatio: 16/9, height: 'auto' }}\nsrc={content.video}\ntitle=\"YouTube video player\"\nframeborder=\"0\"\nallow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\nreferrerpolicy=\"strict-origin-when-cross-origin\"\nallowfullscreen\n```\n\n----------------------------------------\n\nTITLE: Client Schema OnRun with Audio Configuration\nDESCRIPTION: This code snippet demonstrates how to define the OnRun lifecycle hook in a client-side event sequencer schema and use the 'audio' configuration to play a sound. It sets the start time and sound ID and defines OnStart and OnEnd functions for the audio.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/event-sequencer.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nSchema.OnRun = function()\n\tprint(\"OnRun (Client)\")\n\n\tlocal MainAudio = Schema:audio({\n\t\tStartTime = 1,\n\t\tSoundId = \"rbxassetid://1838673350\",\n\t\tOnStart = function(self)\n\t\t\tprint(\"Audio playing\")\n\t\tend,\n\t\tOnEnd = function(self)\n\t\t\tprint(\"Audio ended\")\n\t\tend\n\t})\nend\n```\n\n----------------------------------------\n\nTITLE: Configure Emote Bar GUI Type to Wheel - Lua\nDESCRIPTION: This LocalScript configures the client-side EmoteBar module to use the `EmoteWheel` GUI type instead of the default EmoteBar. This will make emotes appear in a ring when a player clicks or taps on their player character.  The script requires ReplicatedStorage and is run on the client.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/emote-bar.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal EmoteBar = require(ReplicatedStorage:WaitForChild(\"EmoteBar\"))\n\nEmoteBar.configureClient({\n\tguiType = EmoteBar.GuiType.EmoteWheel,\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Particle Size with Luau NumberSequence\nDESCRIPTION: This Luau snippet is intended to be executed in the Roblox Studio Command Bar. It accesses the specified ParticleEmitter instance and assigns a new NumberSequence to its `Size` property. The NumberSequence defines how the particle size changes over its lifetime, starting at 40 studs (with a variation of 5) at time 0 and ending at 100 studs (with a variation of 15) at time 1 (the end of its life). This creates an effect where smoke particles grow as they rise.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/vfx/create-volcanoes.md#_snippet_10\n\nLANGUAGE: Lua\nCODE:\n```\nworkspace.Caldera.SmokePlume.Smoke.Size = NumberSequence.new{NumberSequenceKeypoint.new(0,40,5), NumberSequenceKeypoint.new(1,100,15)}\n```\n\n----------------------------------------\n\nTITLE: Viewing Default GameSettings Configuration (Lua)\nDESCRIPTION: This snippet displays the initial, default configuration variables found within the Roblox `GameSettings` script. It outlines settings such as intermission and round durations, minimum player count, transition times, and the default point values assigned to different building sizes (LowPoints, MediumPoints, HighPoints). The comment serves as a reminder regarding the correlation between value types and folder names for correct point assignment.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/build-it-play-it-create-and-destroy/change-the-script.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\n-- Game Variables\nGameSettings.intermissionDuration = 10\nGameSettings.roundDuration = 30\nGameSettings.minimumPlayers = 1\nGameSettings.transitionStart = 3\nGameSettings.transitionEnd = 3\nGameSettings.pointValues = {\n\t-- Value types must match folder names to award points correctly\n\tLowPoints = 0,\n\tMediumPoints = 10,\n\tHighPoints = 15,\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering by Subclass\nDESCRIPTION: Finds all instances that inherit from the `BasePart` class (e.g., `Part`, `MeshPart`). Uses the `is:` prefix.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/studio/explorer.md#_snippet_9\n\nLANGUAGE: RobloxSearchQuery\nCODE:\n```\nis:BasePart\n```\n\n----------------------------------------\n\nTITLE: Defining weaponRaycastParams in Lua\nDESCRIPTION: This snippet showcases the re-declaration of UserInputService and Players services, along with constants MAX_MOUSE_DISTANCE and MAX_LASER_DISTANCE. It includes the shell of getWorldMousePosition function, indicating a larger context involving mouse position handling for targeting.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/scripting/intermediate-scripting/hit-detection-with-lasers.md#_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\nlocal UserInputService = game:GetService(\"UserInputService\")\nlocal Players = game:GetService(\"Players\")\n\nlocal tool = script.Parent\n\nlocal MAX_MOUSE_DISTANCE = 1000\nlocal MAX_LASER_DISTANCE = 500\n\nlocal function getWorldMousePosition()\n```\n\n----------------------------------------\n\nTITLE: Customizing System Message Appearance in Roblox Chat\nDESCRIPTION: This snippet demonstrates how to customize system message appearance by implementing the OnIncomingMessage callback. It identifies messages with specific metadata and applies custom text color formatting to them.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/chat/examples/custom-system-messages.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nTextChannel.OnIncomingMessage = function(message: TextChatMessage)\n  if message.Metadata == \"WelcomeMessage\" then\n    local overrideProperties = Instance.new(\"TextChatMessageProperties\")\n    overrideProperties.TextColor = Color3.fromRGB(255, 0, 0)\n    return overrideProperties\n  end\n\n  return nil\nend\n```\n\n----------------------------------------\n\nTITLE: Connecting RemoteEvent and Receiving Function Argument Demonstrating Non-Replication - Lua\nDESCRIPTION: Illustrates that functions passed as arguments via RemoteEvent are not replicated across the client-server boundary, resulting in `nil` on the receiver side. Connects an OnClientEvent handler that prints the received function argument, which is always `nil`. This example requires a RemoteEvent in ReplicatedStorage and shows the limitation that functions cannot be passed remotely.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/scripting/events/remote.md#_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal remoteEvent = ReplicatedStorage:FindFirstChildOfClass(\"RemoteEvent\")\n\nlocal function onClientEvent(func)\n\tprint(func)  --> nil\nend\n\nremoteEvent.OnClientEvent:Connect(onClientEvent)\n```\n\n----------------------------------------\n\nTITLE: Implementing Roblox Callbacks with BindableFunction\nDESCRIPTION: Illustrates setting and invoking a callback using a Roblox `BindableFunction`. An anonymous function is assigned to the `OnInvoke` property, and then the `Invoke` method is called, passing an argument and receiving the return value from the callback function. Requires the Roblox environment.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/functions.md#_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlocal bindableFunction = Instance.new(\"BindableFunction\")\n\nbindableFunction.OnInvoke = function(number)\n\treturn 2 * number\nend\n\nprint(bindableFunction:Invoke(42)) -- 84\n```\n\n----------------------------------------\n\nTITLE: Numeric For Loop with Negative Increment in Luau\nDESCRIPTION: This code demonstrates a `for` loop in Luau with a negative increment of -0.5.  The counter starts at 2 and continues down to 0, decrementing by 0.5 in each iteration. The loop prints the value of the counter in each iteration.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/control-structures.md#_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nfor counter = 2, 0, -0.5 do\n\tprint(counter)\nend\n\n--[[ Resulting output:\n2\n1.5\n1\n0.5\n0\n]]\n```\n\n----------------------------------------\n\nTITLE: Accessing a Part's Color Property in Roblox\nDESCRIPTION: Demonstrates how to access the Color property of a part using dot notation. This is needed before setting the color to a new value.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-1/object-properties.md#_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\n-- Changes the color of a part\nworkspace.PracticePart.Color\n```\n\n----------------------------------------\n\nTITLE: Configuring Handle Frame Properties in Roblox Studio\nDESCRIPTION: Sets the properties for the 'Handle' frame, the draggable part of the slider. This configuration centers the handle within its parent ('SliderFrame'), sets its size relative to the parent (intended to be adjusted by an aspect ratio constraint), and ensures it appears visually on top of other slider elements using ZIndex.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/ui/interactive-ui.md#_snippet_2\n\nLANGUAGE: Roblox Studio Configuration\nCODE:\n```\nTarget: EffectsVolumeSlider > SliderFrame > Handle (Class.Frame)\n\nProperties:\n- AnchorPoint = Vector2.new(0.5, 0.5)\n- Position = UDim2.new(0.5, 0, 0.5, 0) -- {0.5, 0}, {0.5, 0}\n- Size = UDim2.new(1.2, 0, 1.2, 0) -- {1.2, 0}, {1.2, 0}\n- ZIndex = 3\n```\n\n----------------------------------------\n\nTITLE: Acquiring ContextActionService for Input Binding in Roblox Lua\nDESCRIPTION: This snippet acquires the Roblox ContextActionService, which is required to bind and unbind user input to custom game actions. It defines the service, tool instance, and reload action name at the top of the script to prepare for binding. Dependencies: must run in an environment where game:GetService and script.Parent are valid. No direct inputs or outputs; this is a setup for later binding functions.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/input-and-camera/detect-user-input.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal ContextActionService = game:GetService(\"ContextActionService\")\n\nlocal tool = script.Parent\n\nlocal RELOAD_ACTION = \"reloadWeapon\"\n```\n\n----------------------------------------\n\nTITLE: Connecting to countdownStarted Event - Roblox Lua\nDESCRIPTION: Demonstrates how to listen for the countdownStarted event from the PhotoBooth module in Roblox. This event triggers when the countdown timer starts, allowing custom logic (such as notifications) to run. Requires a LocalScript importing PhotoBooth and connecting a callback function to the countdownStarted event. There are no input parameters; typical output is a printed message or a custom action in response to the countdown.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/photo-booth.md#_snippet_5\n\nLANGUAGE: Lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal PhotoBooth = require(ReplicatedStorage:WaitForChild(\"PhotoBooth\"))\n\nPhotoBooth.countdownStarted:Connect(function()\n\tprint(\"The countdown has started\")\nend)\n```\n\n----------------------------------------\n\nTITLE: Invoking BindableFunction with multiple parameters in Lua\nDESCRIPTION: Demonstrates how to invoke the BindableFunction's Invoke method with multiple arguments, showing that the method accepts a tuple as its parameters. There are no additional dependencies beyond Roblox's BindableFunction class. The snippet passes an integer, boolean, string, and a Vector3 object as individual arguments. The expected input is multiple distinct values, and the output depends on the invoked function's implementation.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/tuples.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nBindableFunction:Invoke(1, true, \"string\", Vector3.new(0, 0, 0))\n```\n\n----------------------------------------\n\nTITLE: Handling Cage Detection Execution Failure\nDESCRIPTION: This error indicates a failure during the execution of cage detection for an asset (`%s`). Ensure the cage mesh exists and is properly set up.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/validation-errors.md#_snippet_46\n\nLANGUAGE: Text\nCODE:\n```\nFailed to execute cage detection for `%s`. Make sure the cage mesh exists and try again.\n```\n\n----------------------------------------\n\nTITLE: Numeric For Loop with Increment of 1 in Luau\nDESCRIPTION: This code shows a basic `for` loop in Luau with a counter that starts at 1 and ends at 3, incrementing by the default value of 1.  It prints the value of the counter variable in each iteration of the loop.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/control-structures.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nfor counter = 1, 3 do\n\tprint(counter)\nend\n\n--[[ Resulting output:\n1\n2\n3\n]]\n```\n\n----------------------------------------\n\nTITLE: Resolving Dynamic Head Snapshot/Bounding Box Errors\nDESCRIPTION: Indicates issues with capturing or reading snapshot data for a Dynamic Head (`%s`), or the head exceeds expected bounding box limits when emoting. Recalibrate face controls connected to the rig.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/validation-errors.md#_snippet_18\n\nLANGUAGE: Text\nCODE:\n```\nUnable to capture snapshot of DynamicHead `%s`\n\nFailed to read data from snapshot of DynamicHead `%s`\n\nDynamicHead `%s` when emoting surpasses the expected bounding box\n```\n\n----------------------------------------\n\nTITLE: Embedding a YouTube Video within a Grid Layout (JSX/HTML)\nDESCRIPTION: Creates a responsive two-column layout using Material UI's Grid component (likely via MDX). It embeds a YouTube video using an iframe within the left column and displays introductory text with a Markdown link in the right column. The iframe is styled responsively to maintain aspect ratio.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/user-interface-design/index.md#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<>\n<Grid\n    alignItems=\"stretch\"\n    container\n    direction=\"row\">\n\n<Grid item Large={7} XSmall={12} direction=\"column\">\n\n<div class=\"container\"\nstyle={{position: \"relative\", paddingBottom: \"56.25%\", height: 0}}>\n<iframe width=\"880\" height=\"495\" src=\"https://www.youtube-nocookie.com/embed/eqW9SINYeWg\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen style={{position: \"absolute\", top: 0, left: 0, width: \"95%\", height: \"95%\"}}></iframe>\n</div>\n\n</Grid>\n\n<Grid item Large={5} XSmall={12} direction=\"column\">\n\n**User Interface Design** is the discipline of planning and implementing UI elements that either provide essential information for gameplay, or teach players how to complete unique user flows within your experiences.\n\nYou'll learn how to recreate high-quality UI elements for a first-person shooter laser tag experience by following step-by-step processes and best practices for following an art style, wireframing the structure and flow of UI information, and implementing UI designs within Studio.\n\nThis course is intended for readers who are familiar\nwith general building concepts and tools in Roblox Studio. If you need help\nlearning how to build an environment and navigating Studio's UI, try the [core curriculum](../core/index.md).\n</Grid>\n\n</Grid>\n</>\n```\n\n----------------------------------------\n\nTITLE: Detecting Gamepad Trigger Pressure Changes Using UserInputService.InputChanged in Lua\nDESCRIPTION: Shows how to detect changes in pressure applied to gamepad triggers (ButtonL2 and ButtonR2) by using the UserInputService.InputChanged event and checking the Position.Z property of the input trigger. The snippet differentiates between left and right triggers for precise pressure detection, which can be used to implement analog trigger functionality in games.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/input/gamepad.md#_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal UserInputService = game:GetService(\"UserInputService\")\n\nUserInputService.InputChanged:Connect(function(input)\n\tif input.UserInputType == Enum.UserInputType.Gamepad1 then\n\t\tif input.KeyCode == Enum.KeyCode.ButtonL2 then\n\t\t\tprint(\"Pressure on left trigger has changed:\", input.Position.Z)\n\t\telseif input.KeyCode == Enum.KeyCode.ButtonR2 then\n\t\t\tprint(\"Pressure on right trigger has changed:\", input.Position.Z)\n\t\tend\n\tend\nend)\n```\n\n----------------------------------------\n\nTITLE: Getting an Empty Queue with MemoryStoreService in Lua\nDESCRIPTION: This snippet demonstrates how to retrieve an empty queue instance from the MemoryStoreService by specifying a queue name. It uses the default invisibility timeout of 30 seconds to prevent duplicate processing of the same item across concurrent servers. The queue object returned allows further asynchronous manipulation such as adding, reading, and removing items.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud-services/memory-stores/queue.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal MemoryStoreService = game:GetService(\"MemoryStoreService\")\n\nlocal queue = MemoryStoreService:GetQueue(\"Queue1\")\n```\n\n----------------------------------------\n\nTITLE: Extracting AnimationId to Name Mapping in Roblox Studio Using Lua\nDESCRIPTION: This Lua script runs in Roblox Studio to generate a string mapping animation IDs from Animation instances nested under Character models to named identifiers formatted as 'CharacterName_AnimationName'. It iterates all children of the Workspace, filters model types, finds an Animations folder, extracts numeric animation IDs using string patterns, and appends lines in the format 'animationId Character_AnimationName'. The output is a single long string printed to the console for copying into a text file. Dependencies include Roblox Lua API and workspace structure where animations are grouped. The output text file serves as the basis for transferring animations.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/projects/transfer-animations.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal ANIMSTRING = \"\"\n\nfor _, character in Workspace:GetChildren() do\n\tif not character:IsA(\"Model\") then\n\t\tcontinue\n\tend\n\n\tlocal animations = character:FindFirstChild(\"Animations\")\n\tif not animations then\n\t\tcontinue\n\tend\n\n\tfor _, animation in animations:GetChildren() do\n\t\tlocal animationId = string.match(animation.AnimationId, \"%d+\")\n\t\tif animationId then\n\t\t\tANIMSTRING ..= (animationId .. \" \" .. character.Name .. \"_\" .. string.gsub(animation.Name, \" \", \"_\") .. \"\\n\")\n\t\tend\n\tend\nend\n\nprint(ANIMSTRING)\n```\n\n----------------------------------------\n\nTITLE: Counting Up by Even Numbers with Luau for Loop\nDESCRIPTION: Illustrates a Luau 'for' loop counting from 0 up to 10 using an increment of 2. This results in printing only even numbers (0, 2, 4, 6, 8, 10) with a 1-second pause between each print.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-4/intro-to-for-loops.md#_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nfor count = 0, 10, 2 do\n\tprint(count)\n\ttask.wait(1)\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Scene Ending Warnings for Server with EventSequencer in Lua\nDESCRIPTION: This script loads a scene, sets up a warning time offset before the scene ends, and connects to the server-side warning event to alert or trigger logic. Requires EventSequencer, a scene named \"BeautifulScene\", and permissions to connect to server events. Usage is for managing end-phase transitions or player notifications.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/event-sequencer.md#_snippet_16\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal EventSequencer = require(ReplicatedStorage:WaitForChild(\"EventSequencer\"))\n\n-- Load scene\nEventSequencer.loadScene(\"BeautifulScene\")\n\n-- Set warning time to 5 seconds before the scene ends\nEventSequencer.setSceneWarningTime(5)\n\n-- Detect when scene is about to end\nEventSequencer.onSceneEndingWarningForServer:Connect(function()\n\twarn(\"Scene is about to end!\")\nend)\n```\n\n----------------------------------------\n\nTITLE: Publishing an XML Place File (.rbxlx) via API\nDESCRIPTION: Demonstrates a cURL command using a POST request to publish an XML place file (.rbxlx) to a specific Roblox place using the Place Publishing API. It requires replacing placeholders for the Universe ID, Place ID, and API key. The Content-Type header is set to 'application/xml', and the local file path is provided using --data-binary.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/guides/usage-place-publishing.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ curl --verbose --location POST 'https://apis.roblox.com/universes/v1/{universeId}/places/{placeId}/versions?versionType=Published' \\\n--header 'x-api-key: <your-api-key>' \\\n--header 'Content-Type: application/xml' \\\n--data-binary @/home/placefiles/place1.rbxlx\n```\n\n----------------------------------------\n\nTITLE: Removing Items from a Set in Lua\nDESCRIPTION: Demonstrates removing an item from a set using the Set:remove() method. This example removes \"Orange\" from a set of fruits.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/metatables.md#_snippet_15\n\nLANGUAGE: lua\nCODE:\n```\nlocal fruits = Set.new({\"Apple\", \"Lemon\", \"Orange\", \"Cherry\", \"Lime\", \"Peach\"})\nfruits:remove(\"Orange\")\n```\n\n----------------------------------------\n\nTITLE: Programmatically Placing Art on a Canvas\nDESCRIPTION: Demonstrates placing art programmatically on behalf of a player when a remote event is triggered. This example places the BloxyAward art asset on the first available canvas.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/surface-art.md#_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal SurfaceArt = require(ReplicatedStorage:WaitForChild(\"SurfaceArt\"))\n\nlocal remoteEvent = ReplicatedStorage:WaitForChild(\"SurfaceArtRemoteEvent\")\n\nremoteEvent.OnServerEvent:Connect(function(player)\n\t-- Place the Bloxy Award from default art assets into the first canvas\n\tlocal canvases = SurfaceArt.getCanvases()\n\tSurfaceArt.placeArt(player, canvases[1], \"BloxyAward\")\nend)\n```\n\n----------------------------------------\n\nTITLE: Calculating Item Sell Price in Roblox Lua\nDESCRIPTION: Calculates the total monetary value a player receives for selling their items. It multiplies the number of items the player has (playerItems.Value) by a fixed price per item (shown as 200). This price should be adjusted based on playtesting for game balance. This code snippet is typically found in a SellScript attached to the SellPart.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/adventure-game-series/finishing-the-project.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nlocal totalSell = playerItems.Value * 200\n```\n\n----------------------------------------\n\nTITLE: StoryManager Script Structure in Luau\nDESCRIPTION: This Luau code snippet represents the basic structure of the StoryManager script in a Roblox game. It includes global variable declarations, a main game loop, and calls to functions in the StoryMaker module. The section between the dashed lines is reserved for the user's custom story code. The script relies on the StoryMaker module.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/build-it-play-it-story-games/start-coding.md#_snippet_0\n\nLANGUAGE: Luau\nCODE:\n```\n-- GLOBAL VARIABLES\nlocal storyMaker = require(script:WaitForChild(\"StoryMaker\"))\n\n-- Code controlling the game\nlocal playing = true\n\nwhile playing do\n\tstoryMaker:Reset()\n\n\t-- Code story between the dashes\n\t-- =============================================\n\n\n\t-- =============================================\n\n\t-- Add the story variable between the parenthesis below\n\tstoryMaker:Write()\n\n\t-- Play again?\n\tplaying = storyMaker:PlayAgain()\nend\n```\n\n----------------------------------------\n\nTITLE: Responding to Filter Changes in Roblox Selfie Mode with Lua\nDESCRIPTION: Sets up a listener for 'filterChanged' event, which fires when a filter is added or removed. Receives the new and old filter names as parameters and logs the change. Used in a LocalScript to dynamically respond to filter updates.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/selfie-mode.md#_snippet_19\n\nLANGUAGE: Lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal SelfieMode = require(ReplicatedStorage:WaitForChild(\"SelfieMode\"))\n\nSelfieMode.filterChanged:Connect(function(newFilter, oldFilter)\n\tprint(\"Filter changed from\", oldFilter, \"to\", newFilter)\nend)\n```\n\n----------------------------------------\n\nTITLE: Querying Creator Store with InsertService\nDESCRIPTION: This snippet demonstrates the use of `Class.InsertService:GetFreeModels()` to query the Creator Store for a wheelbarrow model. This function retrieves free models available in the Creator Store. This function is used internally by the Roblox Assistant to add objects into the user's data model.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/assistant/guide.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Mapping Animation IDs for Experience Transfer in Roblox (Lua)\nDESCRIPTION: This Lua code snippet demonstrates how to map animation IDs from the original creator to the new group owner during an experience transfer in Roblox. It defines a table `transferAnimationMap` that stores the mapping and provides functions to look up and create animation instances using the new IDs when the experience is running under the group or in Studio.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/projects/experience-ownership-transfer.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Maps animation IDs that belong to the original creator to animation IDs\n-- that belong to the new creator.\nlocal transferAnimationMap = {\n\t[\"6406676108\"] = 14292200298,\n\t[\"6438293322\"] = 14292082312,\n\t[\"6464978998\"] = 14292224322,\n\t[\"6465240715\"] = 14292226967,\n\t[\"6465244287\"] = 14292229476,\n\t[\"6382318344\"] = 14292213468,\n\t[\"6382564692\"] = 14292207171,\n\t[\"6460651769\"] = 14292098870,\n\t[\"6415507655\"] = 14292218236,\n\t[\"6415509331\"] = 14292221034\n}\n\nfunction mapTransferAnimationId(id)\n\n\t-- If experience has been transferred, maps old animation IDs to new\n\tif game:GetService(\"RunService\"):IsStudio() or\n\t(game.CreatorType == Enum.CreatorType.Group and\n\t\tgame.CreatorId == 32626384) then\n\t\t\tlocal animationId = string.match(id, \"%d+$\")\n\t\t\tlocal mappedId = transferAnimationMap[animationId]\n\n\t\t\tif mappedId then\n\t\t\t\treturn \"rbxassetid://\" .. mappedId\n\t\t\tend\n\tend\n\n\treturn id\nend\n\n-- Creates an animation instance associated with the\n-- specified rbxassetid://<animation_id>\nfunction createAnimation(id)\n\tlocal animation = Instance.new(\"Animation\")\n\tanimation.AnimationId = mapTransferAnimationId(id)\n\n\treturn animation\nend\n```\n\n----------------------------------------\n\nTITLE: Customizing AvatarContextMenuTheme with Lua\nDESCRIPTION: This code snippet demonstrates how to customize the Avatar Context Menu (ACM) theme using the `StarterGui:SetCore` method with the `AvatarContextMenuTheme` parameter.  It sets various properties such as background image, transparency, colors, and font to customize the ACM's appearance.  Requires the `StarterGui` service.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/players/avatar-context-menu.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal StarterGui = game:GetService(\"StarterGui\")\n\nStarterGui:SetCore(\"AvatarContextMenuTheme\", {\n\tBackgroundImage = \"\",\n\tBackgroundTransparency = 0.5,\n\tBackgroundColor = Color3.fromRGB(111, 145, 242),\n\tNameTagColor = Color3.fromRGB(0, 0, 200),\n\tNameUnderlineColor = Color3.fromRGB(213, 233, 255),\n\tButtonFrameColor = Color3.fromRGB(15, 24, 65),\n\tButtonFrameTransparency = 0.2,\n\tButtonUnderlineColor = Color3.fromRGB(213, 233, 255),\n\tFont = Enum.Font.SciFi\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Set Intersection in Lua\nDESCRIPTION: Creates a function to find the intersection of two sets, returning items that exist in both sets. The example demonstrates finding common fruits between fresh and frozen fruit sets.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/metatables.md#_snippet_17\n\nLANGUAGE: lua\nCODE:\n```\nlocal function getIntersection(set1, set2)\n\tlocal result = Set.new()\n\tfor key, value in set1 do\n\t\tif set2:contains(key) then\n\t\t\tresult:add(key)\n\t\tend\n\tend\n\treturn result\nend\n\nlocal freshFruits = Set.new({\"Mango\", \"Lemon\", \"Orange\", \"Cherry\", \"Lime\", \"Peach\"})\nlocal frozenFruits = Set.new({\"Mango\", \"Peach\", \"Pineapple\"})\n\nlocal commonFruits = getIntersection(freshFruits, frozenFruits)\ncommonFruits:output() -- Mango, Peach\n```\n\n----------------------------------------\n\nTITLE: Complete Luau Script for Disappearing Bridge\nDESCRIPTION: The complete Luau script implementing the disappearing and reappearing bridge effect. It includes the constant definition, array initialization, the outer `while true` loop for repetition, and the two inner `for` loops that handle part disappearance and reappearance with delays.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-5/loops-and-arrays.md#_snippet_9\n\nLANGUAGE: Luau\nCODE:\n```\nlocal VANISH_RATE = 1.0\n\nlocal pathArray = {\n\tworkspace.Part1,\n\tworkspace.Part2,\n\tworkspace.Part3,\n}\n\nwhile true do\n\t-- Make a part disappear from the array in order\n\tfor partIndex = 1, #pathArray  do\n\t\ttask.wait(VANISH_RATE)\n\t\tlocal whichPart = pathArray[partIndex]\n\t\twhichPart.CanCollide = false\n\t\twhichPart.Transparency = 1\n\tend\n\n\t-- Wait for a second before making the path reappear\n\ttask.wait(1.0)\n\n\t-- Reset the path by making all parts walkable again\n\tfor partIndex = 1, #pathArray do\n\t\tlocal whichPart = pathArray[partIndex]\n\t\twhichPart.CanCollide = true\n\t\twhichPart.Transparency = 0\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Inserting Elements at Specific Positions in Arrays Using table.insert in Luau - Lua\nDESCRIPTION: Shows how to insert an element at a specific index within an array (not just the end) using `table.insert`, which pushes subsequent elements up by one index. Prints elements before and after insertion to verify correct placement. Requires an initial array and call to `table.insert` with position argument.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/tables.md#_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlocal testArray = {\"First item\", \"Next item\"}\n\ntable.insert(testArray, 2, \"NEW ITEM #2\")\n\nprint(testArray[1]) -- First item\nprint(testArray[2]) -- NEW ITEM #2\nprint(testArray[3]) -- Next item\n```\n\n----------------------------------------\n\nTITLE: Disabling Character-Character Collisions Lua\nDESCRIPTION: This script provides a method to prevent player characters from colliding with each other. It registers a dedicated 'Characters' collision group, sets this group to be non-collidable with itself, and then assigns all BasePart descendants of player characters to this group as they are added.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/workspace/collisions.md#_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nlocal PhysicsService = game:GetService(\"PhysicsService\")\nlocal Players = game:GetService(\"Players\")\n\nlocal CollisionGroupName = \"Characters\"\nPhysicsService:RegisterCollisionGroup(CollisionGroupName)\nPhysicsService:CollisionGroupSetCollidable(CollisionGroupName, CollisionGroupName, false)\n\nlocal function setCollisionGroup(model)\n  -- Apply collision group to all existing parts in the model\n  for _, descendant in model:GetDescendants() do\n    if descendant:IsA(\"BasePart\") then\n      descendant.CollisionGroup = CollisionGroupName\n    end\n  end\nend\n\nPlayers.PlayerAdded:Connect(function(player)\n  player.CharacterAdded:Connect(function(character)\n    setCollisionGroup(character)\n  end)\n  -- If the player already has a character, apply the collision group immediately\n  if player.Character then\n    setCollisionGroup(player.Character)\n  end\nend)\n```\n\n----------------------------------------\n\nTITLE: Implementing Avatar Creation with AvatarCreationService in Lua\nDESCRIPTION: Function to publish a custom avatar using AvatarCreationService:PromptCreateAvatarAsync. It takes body part instances, player, and token ID to create and publish an avatar bundle with custom mesh parts.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/avatar/in-experience-creation.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nexport type BodyPartInfo = {\n\tbodyPart: Enum.BodyPart,\n\tinstance: Instance --Folder with Created MeshParts\n}\nexport type BodyPartList = {BodyPartInfo}\n\nlocal function publishAvatar(bodyPartInstances: BodyPartList, player: Player, tokenId: string)\n\tlocal humanoidDescription = Instance.new(\"HumanoidDescription\")\n\tfor _, bodyPartInfo in bodyPartInstances do\n\t\tlocal bodyPartDescription = Instance.new(\"BodyPartDescription\")\n\t\tbodyPartDescription.Instance = bodyPartInfo.instance\n\t\tbodyPartDescription.BodyPart = bodyPartInfo.bodyPart\n\t\tbodyPartDescription.Parent = humanoidDescription\n\tend\n\n\tlocal success, result, bundleIdOrErrorMessage, outfitId = pcall(function()\n\t\treturn AvatarCreationService:PromptCreateAvatarAsync(tokenId, player, humanoidDescription)\n\tend)\n\tif success then\n\t\tif result == Enum.PromptCreateAvatarResult.Success then\n\t\t\tprint(\"Successfully uploaded with BundleId: \", bundleIdOrErrorMessage)\n      print(\"Successfully uploaded with OutfitId: \", outfitId)\n\t\telse\n\t\t\tprint(\"Unsuccessfully uploaded with error message:\", bundleIdOrErrorMessage)\n\t\tend\n\telse\n\t\tprint(\"Avatar creation unsuccessful\")\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-Side LLM Text Generation in Lua\nDESCRIPTION: A server script that uses the OpenCloud module to make a text generation API request and send the response to clients. It sets up necessary parameters and handles the communication with the LLM service.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/characters/generate-text.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n-- Assumes the Open Cloud dev module is in ReplicatedStorage\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal oc = require(ReplicatedStorage.OpenCloud.V2)\n\nlocal chatEvent = Instance.new(\"RemoteEvent\")\nchatEvent.Name = \"ChatEvent\"\nchatEvent.Parent = ReplicatedStorage\n\n-- Form the HTTP request\nlocal requestLLM : oc.GenerateTextRequest = {\n  path = oc:UniversePath(\"<your_universe_id>\"),\n  user_prompt = \"Tell me about Roblox in under 200 characters.\",\n  system_prompt = \"You're extremely polite.\",\n  context_token = \"\",\n  max_tokens = 100,\n  model= \"default\"\n}\n\nlocal resultLLM : oc.Result<oc.GenerateTextResponse> = oc:GenerateText(requestLLM)\n\nlocal npc = workspace:WaitForChild(\"NPCDog\") -- Replace with your NPC's name\nlocal head = npc:WaitForChild(\"Head\") -- Ensure your NPC has a Head part\n\n-- Fire the event to display the chat bubble\nchatEvent:FireAllClients(head, resultLLM.Response.generated_text)\n```\n\n----------------------------------------\n\nTITLE: Unlocking Emote on Client - EmoteBar - Lua\nDESCRIPTION: Shows how to unlock a previously locked emote, allowing the client user to activate it again through the GUI. It calls the `unlockEmote` function with the name of the emote (\"Applaud\") to re-enable it client-side. This function must be called from a LocalScript.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/emote-bar.md#_snippet_10\n\nLANGUAGE: Lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal EmoteBar = require(ReplicatedStorage:WaitForChild(\"EmoteBar\"))\n\nEmoteBar.unlockEmote(\"Applaud\")\n```\n\n----------------------------------------\n\nTITLE: Initializing and Managing Rotating Objects with Roblox CollectionService in Lua\nDESCRIPTION: This Lua snippet initializes rotation behavior by iterating over all objects tagged with \"LocalSpaceRotation\" in the Workspace and sets them up for rotation. It also uses CollectionService signals to track when tagged instances are added or removed, adding newly created objects to a queue for deferred setup due to streaming or cloning delays. Dependencies include Roblox's CollectionService and a 'SetupObj' function that initializes rotation parameters for each object. The inputs are tagged instances, and no direct outputs are returned, but internal state maps are updated to manage rotations correctly.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/the-mystery-of-duvall-drive/develop-a-moving-world.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal function Init()\n\tfor _, obj in CollectionService:GetTagged(\"LocalSpaceRotation\") do\n\t\tif obj:IsDescendantOf(workspace) then\n\t\t\tSetupObj(obj)\n\t\tend\n\tend\nend\n\nCollectionService:GetInstanceAddedSignal(\"LocalSpaceRotation\"):Connect(function(obj)\n\tobjInfoQueue[obj] = true\nend)\n\nCollectionService:GetInstanceRemovedSignal(\"LocalSpaceRotation\"):Connect(function(obj)\n\tif objInfo[obj] then\n\t\tobjInfo[obj] = nil\n\t\tif objInfoQueue[obj] then\n\t\t\tobjInfoQueue[obj] = nil\n\t\tend\n\tend\nend)\n\nInit()\n```\n\n----------------------------------------\n\nTITLE: Example Token Response from Refresh Token Exchange (Roblox OAuth 2.0)\nDESCRIPTION: An example JSON response received after successfully using a refresh token with the `POST /oauth/v1/token` endpoint. It provides a new `access_token`, a new `refresh_token`, `token_type`, `expires_in`, and the original `scope`.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/auth/oauth2-reference.md#_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"access_token\": \"...\",\n  \"refresh_token\": \"...\",\n  \"token_type\": \"Bearer\",\n  \"expires_in\": 899,\n  \"scope\": \"universe-messaging-service:publish\"\n}\n```\n\n----------------------------------------\n\nTITLE: Redeeming Promotion Code for Artist Backpack in Roblox Mansion of Wonders\nDESCRIPTION: A promotional code that can be redeemed in the Roblox Mansion of Wonders experience to unlock the Artist Backpack avatar item and Conjurer of Color badge. Users need to enter this code when interacting with the Freddie character in-game.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/build-it-play-it-mansion-of-wonder/challenge-checkpoint.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nFXArtist\n```\n\n----------------------------------------\n\nTITLE: Creating a New Asset via Open Cloud Assets API Using Bash curl\nDESCRIPTION: Provides an example HTTP POST request to the Create Asset endpoint for uploading a new asset. Uses curl with multipart form-data to specify JSON metadata and the asset file content, including asset type, display name, description, and creator user or group ID. Requires the x-api-key header for authentication. The file content is sent with its proper content type. This snippet requires bash shell with curl and assumes API key and user/group IDs are correctly set. Outputs a new asset with associated metadata on success.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/guides/usage-assets.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location 'https://apis.roblox.com/assets/v1/assets' \\\n--header 'x-api-key: ${ApiKey}' \\\n--form 'request=\"{\\n  \\\"assetType\\\": \\\"Model\\\",\\n  \\\"displayName\\\": \\\"Name\\\",\\n  \\\"description\\\": \\\"This is a description\\\",\\n  \\\"creationContext\\\": {\\n    \\\"creator\\\": {\\n      \\\"userId\\\": \\\"${userId}\\\" # Use groupId for creating a group asset\\n    }\\n  }\\n}\"' \\\n--form 'fileContent=@\"/filepath/model.fbx\";type=model/fbx'\n```\n\n----------------------------------------\n\nTITLE: Configuring Outdoor Stair Blocks in Roblox Studio (Sample)\nDESCRIPTION: Outlines the part configurations (Size, Position) and property settings (Color, Material, MaterialVariant) required to construct the stairs leading down to the outdoor area in the sample Environment Art place file using Roblox Studio. These blocks use the 'Concrete_Tiles_A' material variant.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/environmental-art/construct-your-world.md#_snippet_3\n\nLANGUAGE: Luau\nCODE:\n```\n-- Outdoor Stairs (Blocks)\n-- Part: Top step\nSize = Vector3.new(8, 1, 260)\nCFrame.Position = Vector3.new(-27, 4.5, 160)\n\n-- Part: Left-side step one\nSize = Vector3.new(3, 1, 74)\nCFrame.Position = Vector3.new(-14.5, 0.5, 250.75)\n\n-- Part: Left-side step two\nSize = Vector3.new(3, 1, 74)\nCFrame.Position = Vector3.new(-17, 1.5, 250.75)\n\n-- Part: Left-side step three\nSize = Vector3.new(3, 1, 74)\nCFrame.Position = Vector3.new(-19.5, 2.5, 250.75)\n\n-- Part: Left-side step four\nSize = Vector3.new(3, 1, 74)\nCFrame.Position = Vector3.new(-22, 3.5, 250.75)\n\n-- Part: Right-side step one\nSize = Vector3.new(3, 1, 74)\nCFrame.Position = Vector3.new(-14.5, 0.5, 72)\n\n-- Part: Right-side step two\nSize = Vector3.new(3, 1, 74)\nCFrame.Position = Vector3.new(-17, 1.5, 72)\n\n-- Part: Right-side step three\nSize = Vector3.new(3, 1, 74)\nCFrame.Position = Vector3.new(-19.5, 2.5, 72)\n\n-- Part: Right-side step four\nSize = Vector3.new(3, 1, 74)\nCFrame.Position = Vector3.new(-22, 3.5, 72)\n\n-- Properties for all stair blocks:\nColor = Color3.fromRGB(233, 218, 218)\nMaterial = Enum.Material.Concrete\nMaterialVariant = \"Concrete_Tiles_A\"\n```\n\n----------------------------------------\n\nTITLE: Checking Multiple Users' Chat Capability with TextChatService (Lua)\nDESCRIPTION: This asynchronous method checks the general chat capability for a group of users using the Roblox TextChatService. It's useful for determining if multiple users can participate in broader chat communications based on their collective privacy and parental settings.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/chat/guidelines.md#_snippet_4\n\nLANGUAGE: Lua\nCODE:\n```\nTextChatService:CanUsersChatAsync()\n```\n\n----------------------------------------\n\nTITLE: Implementing Try-Catch Logic (pcall) in Luau\nDESCRIPTION: This snippet demonstrates how Luau handles errors using `pcall` (protected call). `pcall` executes a function and returns a boolean indicating success, along with either the return values or the error message if an error occurred.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/luau-csharp-comparison.md#_snippet_12\n\nLANGUAGE: Luau\nCODE:\n```\nlocal function fireWeapon()\n\tif not weaponEquipped then\n\t\terror(\"No weapon equipped!\")\n\tend\n\t-- Proceed...\nend\n\nlocal success, errorMessage = pcall(fireWeapon)\nif not success then\n\tprint(errorMessage)\nend\n```\n\n----------------------------------------\n\nTITLE: Disabling ScavengerHunt Module in Roblox with Lua\nDESCRIPTION: This code snippet disables the ScavengerHunt module in Roblox using Lua.  It calls the `disable` function, which hides the UI, disconnects event listeners, and prevents token collection. It requires the ScavengerHunt module.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/scavenger-hunt.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal ScavengerHunt = require(ReplicatedStorage:WaitForChild(\"ScavengerHunt\"))\n\nScavengerHunt.disable()\n```\n\n----------------------------------------\n\nTITLE: Adding Time Passed Luau\nDESCRIPTION: This code adds to the timer function by adding 1 to the timePassed variable every second, adding a print statement. This allows you to see the current amount of time passed.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-3/multiple-conditions.md#_snippet_9\n\nLANGUAGE: Luau\nCODE:\n```\nfinishLine.Touched:Connect(partTouched)\n\nwhile raceActive == true do\n   task.wait(1)\n   timePassed += 1\n   print(timePassed)\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Game Role Stages (Lua)\nDESCRIPTION: This Lua code snippet defines a table `_roleStages` which maps different game server roles (Lobby, Queue, Gameplay) to arrays of corresponding game stages. Found within the main configuration file, it dictates the sequence of stages the game will transition through for each specific role, such as the 'Waiting', 'Gameplay', and 'EndGame' stages for the 'Gameplay' role.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/battle-royale/core-scripts.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal _roleStages = {\n\tLobby = {\"Lobby\"},\n\tQueue = {\"Queue\"},\n\tGameplay = {\"Waiting\", \"Gameplay\", \"EndGame\"},\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to merchBoothOpened Event with Lua in Roblox\nDESCRIPTION: Connects an event handler function to MerchBooth.merchBoothOpened, which fires when either the catalog or item detail view is opened. Requires the MerchBooth module from ReplicatedStorage. The handler logs a message indicating the booth view was opened. Useful for triggering logic tied to the general opening of merchandising views.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/merch-booth.md#_snippet_33\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal MerchBooth = require(ReplicatedStorage:WaitForChild(\"MerchBooth\"))\n\nMerchBooth.merchBoothOpened:Connect(function()\n\tprint(\"Booth view opened\")\nend)\n```\n\n----------------------------------------\n\nTITLE: Changing Specific Part Color in Roblox Lua\nDESCRIPTION: This Lua script changes the color of a specific part named 'ColorPart' located directly under the Workspace. It first gets the Workspace service using `game:GetService(\"Workspace\")`, then explicitly references the 'ColorPart' instance within the Workspace, and finally sets its 'Color' property to a specific RGB value using `Color3.fromRGB`. This approach requires the part to exist and be named exactly 'ColorPart'.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-1/parents-and-children.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal colorPart = Workspace.ColorPart\ncolorPart.Color = Color3.fromRGB(50, 240, 255)\n```\n\n----------------------------------------\n\nTITLE: Configuring Terrain Editor Brush Settings in Roblox Lua\nDESCRIPTION: This snippet demonstrates setting up the terrain editor's brush mode, shape, size, height, pivot, and plane lock, including plane position adjustments to prepare for terrain sculpting and painting in Roblox Studio.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/environmental-art/construct-your-world.md#_snippet_14\n\nLANGUAGE: Lua\nCODE:\n```\nlocal terrainEditor = require('TerrainEditor')\n\n-- Set brush mode to 'Add' for terrain painting\nterrainEditor:setBrushMode('Add')\n\n-- Configure brush shape to cylinder\nterrainEditor:setBrushShape('Cylinder')\n\n-- Set Base Size to 16\nterrainEditor:setBaseSize(16)\n\n-- Set height to 5\nterrainEditor:setHeight(5)\n\n-- Set pivot position to top\nterrainEditor:setPivotPosition('Top')\n\n-- Lock the plane manually\nterrainEditor:setPlaneLock('Manual')\n\n-- Adjust the edit plane position\nlocal function setPlanePosition(x, y, z)\n  terrainEditor:editPlane()\n  terrainEditor:setEditPlanePosition(Vector3.new(x, y, z))\n  terrainEditor:applyEditPlane()\nend\n\nsetPlanePosition(0, -1, 0)\n```\n\n----------------------------------------\n\nTITLE: Handling 'showCompleteModal' Event in Roblox (LocalScript)\nDESCRIPTION: This code snippet demonstrates how to connect to the `showCompleteModal` event of the ScavengerHunt module in a LocalScript using Lua. This event fires when the player clicks the token tracker after collecting all tokens. The connected function enables the CompleteModal GUI element within the player's PlayerGui.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/scavenger-hunt.md#_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal ScavengerHunt = require(ReplicatedStorage:WaitForChild(\"ScavengerHunt\"))\n\nScavengerHunt.showCompleteModal:Connect(function()\n\tlocal completeModal = Players.LocalPlayer.PlayerGui.CompleteModal\n\tcompleteModal.Enabled = true\nend)\n```\n\n----------------------------------------\n\nTITLE: Using Generics to Define a Parameterized State Type in Luau Lua\nDESCRIPTION: Reworks a fixed 'State' object type into a generic type 'State<T>', parameterizing the type of the 'Value' property. Enhances flexibility by allowing type-safe states holding various types without duplicating type definitions.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/type-checking.md#_snippet_20\n\nLANGUAGE: lua\nCODE:\n```\ntype State<T> = {\n\tKey: string,\n\tValue: T\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Moderation Result Parsing Error\nDESCRIPTION: This error indicates a failure to parse the moderation results for the asset (`%s`). Ensure the moderation process is fully completed before retrying validation.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/validation-errors.md#_snippet_26\n\nLANGUAGE: Text\nCODE:\n```\nFailed to parse moderation results for `%s`. Make sure moderation process is completed and try again.\n```\n\n----------------------------------------\n\nTITLE: Using Wally-Managed Packages in a Luau Script\nDESCRIPTION: Example Luau script demonstrating how to import and utilize packages managed by Wally (React, ReactRoblox). It requires the modules from their synced location in `ReplicatedStorage.Packages` (as configured in Rojo) and uses them to create and render a simple React-based UI element (`TextLabel`) in Roblox. Assumes Wally packages are installed and synced correctly.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/projects/external-tools.md#_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal React = require(ReplicatedStorage.Packages.react)\nlocal ReactRoblox = require(ReplicatedStorage.Packages[\"react-roblox\"])\n\nlocal handle = Instance.new(\"ScreenGui\", Players.LocalPlayer.PlayerGui)\nlocal root = ReactRoblox.createRoot(handle)\n\nlocal helloFrame = React.createElement(\"TextLabel\", {\n\tText = \"Hello World!\",\n\tSize = UDim2.new(0, 200, 0, 200),\n\tPosition = UDim2.new(0.5, 0, 0.5, 0),\n\tAnchorPoint = Vector2.new(0.5, 0.5),\n\tBackgroundColor3 = Color3.fromRGB(248, 217, 109),\n\tFont = Enum.Font.LuckiestGuy,\n\tTextSize = 24\n})\n\nroot:render(helloFrame)\n```\n\n----------------------------------------\n\nTITLE: Defining Class Type with typeof in Luau\nDESCRIPTION: This snippet demonstrates a simple approach to obtaining the type of a class instance using Luau's built-in `typeof` function. While functional for basic cases, this method is less suitable when class instances depend on runtime-only values like player objects.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/plant-reference-project.md#_snippet_1\n\nLANGUAGE: Luau\nCODE:\n```\ntype ClassType = typeof(Class.new())\n```\n\n----------------------------------------\n\nTITLE: Initializing and Building a Rojo Project using Bash\nDESCRIPTION: Shows the sequence of Bash commands to create a new Rojo project named 'my-new-experience'. `rojo init` sets up the default file structure, `cd` changes into the new project directory, and `rojo build` compiles the project files into a Roblox place file (`.rbxl`) that can be opened in Studio.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/projects/external-tools.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrojo init my-new-experience\ncd my-new-experience\nrojo build -o my-new-experience.rbxl\n```\n\n----------------------------------------\n\nTITLE: Example Redirect URL Bash\nDESCRIPTION: This bash snippet shows an example redirect URL. This URL demonstrates how the app will receive the authorization code and the state after successful authorization.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/auth/oauth2-develop.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n```bash title=\"Example Redirect URL\"\nhttps://example.com/redirect?code=10c45PNuquKnFJ6pUcy5-fHkghEM6lSegm-7hj9mVEprub1dSDuStuKK_EAUXY7AHTD63xcnmvxSLthp-C8g3jzIGZVzuXSd20Y2dEYI9hx0LZmPg95ME4z2K03UheiZbroyXUjYyB3ReoMqobzDVPzyx6IS8kj2Uu-11Xq_0JiTYxtDatuqXRNIAmJT8gMJmbSyOLOP_vnDvbeMUiBsqCRrkTGVbWSwYSc8sTVVE-535kYdqQOgNjH1ffCoZLGl8YYxLnpb2CXJlRQPrcjkA&state=6789\n```\n```\n\n----------------------------------------\n\nTITLE: Configure GUI Visibility - Lua\nDESCRIPTION: This code snippet demonstrates how to configure the merch booth to prevent it from hiding other UIs (ScreenGuis and CoreGuis) when its UI is displayed. It sets the hideOtherUis property to false in the configure function.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/merch-booth.md#_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal MerchBooth = require(ReplicatedStorage:WaitForChild(\"MerchBooth\"))\n\nMerchBooth.configure({\n\thideOtherUis = false\n})\n```\n\n----------------------------------------\n\nTITLE: Marking TextChannel for Direct Chat (Lua)\nDESCRIPTION: This method is called on a `Class.TextChannel` instance that is intended for direct user-to-user communication. Marking the channel in this way is necessary to ensure direct messages correctly apply relevant privacy settings and system behaviors.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/chat/guidelines.md#_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\nTextChannel:SetDirectChatRequester()\n```\n\n----------------------------------------\n\nTITLE: Selection Algorithm Example\nDESCRIPTION: This Lua code snippet demonstrates a selection algorithm using a conditional statement. It checks if the time is 0 and, if so, sets the stopLightColor to red. This is a simple example of using an if/then statement to determine an output based on a condition.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/resources/coding-concept-algorithms.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nif time == 0 then\n\tstopLightColor = red\nend\n```\n\n----------------------------------------\n\nTITLE: Assigning Objects to Collision Groups Lua\nDESCRIPTION: Following collision group setup, this snippet shows how to assign specific BasePart objects to the registered collision groups by setting their 'CollisionGroup' property. It assumes 'Workspace.Cube1' and 'Workspace.Door1' exist and assigns them to the 'Cubes' and 'Doors' groups, respectively.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/workspace/collisions.md#_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal PhysicsService = game:GetService(\"PhysicsService\")\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal cubes = \"Cubes\"\nlocal doors = \"Doors\"\n\n-- Register two collision groups\nPhysicsService:RegisterCollisionGroup(cubes)\nPhysicsService:RegisterCollisionGroup(doors)\n\n-- Set cubes to be non-collidable with doors\nPhysicsService:CollisionGroupSetCollidable(cubes, doors, false)\n\n-- Assign an object to each group\nWorkspace.Cube1.CollisionGroup = cubes\nWorkspace.Door1.CollisionGroup = doors\n```\n\n----------------------------------------\n\nTITLE: Referencing Objects from Workspace in Luau\nDESCRIPTION: Demonstrates how to obtain references to specific child objects (`CementBlock`, `GlassBottle`) located within the `Workspace` service of a Roblox game. These references are stored in local variables to be used later as arguments when calling a function.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-2/multiple-parameters-and-arguments.md#_snippet_5\n\nLANGUAGE: Luau\nCODE:\n```\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal cementBlock = Workspace.CementBlock\nlocal glassBottle = Workspace.GlassBottle\n```\n\n----------------------------------------\n\nTITLE: Implementing Match Cleanup Function in MatchManager\nDESCRIPTION: Adds a cleanupMatch() function to the MatchManager module that calls the playerManager's removeAllWeapons() function to clean up after a match ends.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/battle-royale-series/cleanup-and-reset.md#_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nfunction MatchManager.cleanupMatch()\n  playerManager.removeAllWeapons()\nend\n\nmatchStart.Event:Connect(startTimer)\nmatchEnd.Event:Connect(stopTimer)\n\nreturn MatchManager\n```\n\n----------------------------------------\n\nTITLE: Activating a SelfieMode Action via Script in LocalScript - Lua\nDESCRIPTION: Shows how to programmatically activate one of the default selfie actions using activateAction, as if the user toggled it through the GUI. This snippet is executed within a LocalScript and expects a valid SelfieMode.Action enum member describing which action to activate. It requires existing initialization of the SelfieMode module.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/selfie-mode.md#_snippet_10\n\nLANGUAGE: Lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal SelfieMode = require(ReplicatedStorage:WaitForChild(\"SelfieMode\"))\n\n-- Activate \"Filter\" action\nSelfieMode.activateAction(SelfieMode.Action.Filter)\n```\n\n----------------------------------------\n\nTITLE: Reading Values from an Array Using Indexing in Luau - Lua\nDESCRIPTION: Illustrates accessing array elements by numeric indices starting from 1, confirming Luau's 1-based indexing. Prints individual elements at index positions 1, 2, and 3. Requires an array variable with defined values and uses square bracket syntax for access. Outputs the corresponding values at each index.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/tables.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\n-- Construct an array with three items\nlocal testArray = {\"A string\", 3.14159, true}\n\nprint(testArray[1]) -- A string\nprint(testArray[2]) -- 3.14159\nprint(testArray[3]) -- true\n```\n\n----------------------------------------\n\nTITLE: Detecting Gamepad Button Presses with UserInputService InputBegan Event in Lua\nDESCRIPTION: Demonstrates using UserInputService.InputBegan event to detect when a specific gamepad button (ButtonA on Gamepad1) is pressed. The function checks that the input is from the targeted gamepad before reacting. This enables immediate response to gamepad button presses and requires understanding event connections and input object properties like UserInputType and KeyCode.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/input/gamepad.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal UserInputService = game:GetService(\"UserInputService\")\n\nUserInputService.InputBegan:Connect(function(input)\n\tif input.UserInputType == Enum.UserInputType.Gamepad1 then\n\t\tif input.KeyCode == Enum.KeyCode.ButtonA then\n\t\t\tprint(\"Button A pressed on Gamepad1\")\n\t\tend\n\tend\nend)\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video (Creation Tutorial)\nDESCRIPTION: Embeds a YouTube video demonstrating how to create and sell basic layered clothing using an iframe. A surrounding div ensures responsive 16:9 aspect ratio scaling using CSS padding-bottom trick, and the iframe is positioned absolutely to occupy the div's dimensions.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/accessories/layered-clothing.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<div\nclassName=\"container\"\nstyle={{ position: \"relative\", paddingBottom: \"56.25%\", height: 0, marginBottom: 12 }} >\n<iframe\nsrc=\"https://www.youtube-nocookie.com/embed/C-DwGRBHvmE\"\ntitle=\"YouTube video player\"\nframeBorder=\"0\"\nallow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\nallowFullScreen\nstyle={{ position: \"absolute\", top: 0, left: 0, width: \"100%\", height: \"100%\" }} ></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Handling Referrals on Player Join - Roblox Lua\nDESCRIPTION: This snippet demonstrates how to access the user ID of the player who referred a new player using `GetJoinData().ReferredByPlayerId` within the `Players.PlayerAdded` event. It then fires a `RemoteEvent` to the client, passing the referred player's object and the inviter's ID, which could be used to display UI or trigger client-side logic.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/production/promotion/referral-system.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nfunction onPlayerAdded(player)\n\n\tlocal referredByPlayerId = player:GetJoinData().ReferredByPlayerId\n\n\tlocal referrerEvent: RemoteEvent = ReplicatedStorage:FindFirstChild(\"ReferralReceivedEvent\")\n\treferrerEvent:FireClient(player, referredByPlayerId)\nend\n\nPlayers.PlayerAdded:Connect(onPlayerAdded)\n```\n\n----------------------------------------\n\nTITLE: Firing RemoteEvent to Single Client - Roblox Lua\nDESCRIPTION: This Script runs on the server and listens for players joining the game. When a player is added, it fires a specific RemoteEvent to that player only using `FireClient()`, passing arguments like the maximum player count and respawn time.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/scripting/events/remote.md#_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal Players = game:GetService(\"Players\")\n\n-- Get reference to remote event instance\nlocal remoteEvent = ReplicatedStorage:FindFirstChildOfClass(\"RemoteEvent\")\n\n-- Listen for incoming players and dispatch remote event to each\nlocal function onPlayerAdded(player)\n   print(\"[Server] Firing event to player\", player.Name)\n   remoteEvent:FireClient(player, Players.MaxPlayers, Players.RespawnTime)\nend\nPlayers.PlayerAdded:Connect(onPlayerAdded)\n```\n\n----------------------------------------\n\nTITLE: Creating FaceControls from Imported Meshes in Roblox\nDESCRIPTION: Shows how mesh objects containing avatar character heads with appropriate facial animation data are automatically converted to FaceControls objects during import.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/parts/meshes.md#_snippet_9\n\nLANGUAGE: Roblox\nCODE:\n```\nClass.FaceControls\n```\n\n----------------------------------------\n\nTITLE: Modifying Object Properties in Roblox Lua\nDESCRIPTION: This snippet demonstrates modifying a property (`Size`) of an object in Roblox. It retrieves a chair model from `ReplicatedStorage` using `WaitForChild()`. The `Size` property of the `LeftArmRest` part within the chair model is then updated to a new `Vector3` value. Dependencies: Roblox Engine.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/scripting/attributes.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal chair = ReplicatedStorage:WaitForChild(\"Chair\")\n\nchair.LeftArmRest.Size = Vector3.new(10, 1, 10)\n```\n\n----------------------------------------\n\nTITLE: Calculating server score with weighted signals in Roblox matchmaking - Lua\nDESCRIPTION: Defines the formula for calculating the server score used in Roblox matchmaking. The score is computed as the sum of all weighted signal scores, where each weighted signal score is the product of a signal's weight and its corresponding signal score. This formula aggregates multiple signal contributions to evaluate server compatibility with a joining player. It assumes prior computation of individual signal scores and availability of their weights. It is a mathematical expression intended for implementation in matchmaking scoring logic.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/matchmaking/scoring.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nServerScore\n  = WeightedSignalScore_1 + WeightedSignalScore_2 + ... + WeightedSignalScore_n\n  = Weight_1 * SignalScore_1 + Weight_2 * SignalScore_2 + ... + Weight_n * SignalScore_n\n```\n\n----------------------------------------\n\nTITLE: Playing Animations on Custom Characters (Roblox Lua)\nDESCRIPTION: A script that loads and plays animations on custom characters. It finds the appropriate animation controller, creates an Animation instance, and plays the animation with specified parameters.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/beyond-the-dark/custom-characters.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal animationId = \"YOUR_ANIMATION_ID\"\nlocal char = script.Parent\nlocal animController = char:FindFirstChildWhichIsA(\"Humanoid\") or char:FindFirstChildOfClass(\"AnimationController\")\n\nlocal animation = Instance.new(\"Animation\")\nanimation.AnimationId = \"rbxassetid://\" .. tostring(animationId)\n\nlocal animTrack = animController:LoadAnimation(animation)\nanimTrack:Play(0, 1, 1)\n```\n\n----------------------------------------\n\nTITLE: Playing Custom Animation on Player Character with Humanoid\nDESCRIPTION: This script loads and plays a custom 'kick' animation on a player character with a Humanoid. It demonstrates how to create an Animation instance, load it onto an Animator, play the animation track, and detect animation events using GetMarkerReachedSignal().\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/animation/using.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nlocal player = Players.LocalPlayer\nlocal character = player.Character or player.CharacterAdded:Wait()\n\n-- Ensure that the character's humanoid contains an \"Animator\" object\nlocal humanoid = character:WaitForChild(\"Humanoid\")\nlocal animator = humanoid:WaitForChild(\"Animator\")\n\n-- Create a new \"Animation\" instance and assign an animation asset ID\nlocal kickAnimation = Instance.new(\"Animation\")\nkickAnimation.AnimationId = \"rbxassetid://2515090838\"\n\n-- Load the animation onto the animator\nlocal kickAnimationTrack = animator:LoadAnimation(kickAnimation)\n\n-- Play the animation track\nkickAnimationTrack:Play()\n\n-- If a named event was defined for the animation, connect it to \"GetMarkerReachedSignal()\"\nkickAnimationTrack:GetMarkerReachedSignal(\"KickEnd\"):Connect(function(paramString)\n\tprint(paramString)\nend)\n```\n\n----------------------------------------\n\nTITLE: Embedding Responsive YouTube Video Using Inline Styles in JSX\nDESCRIPTION: This snippet embeds a YouTube video in a responsive container using inline styling within a React JSX div. The container uses padding-bottom for aspect ratio control and absolute positioning for the iframe to ensure proper scaling across device sizes. Key properties include width, height, src URL, and several iframe attributes for accessibility and security.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/environmental-art/index.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<div class=\"container\" style={{position: \"relative\", paddingBottom: \"56.25%\", height: 0}}>\n<iframe width=\"880\" height=\"495\" src=\"https://www.youtube-nocookie.com/embed/nwShvDmFHWc?si=2gk0n6cb9uq-48Ni\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen style={{position: \"absolute\", top: 0, left: 0, width: \"95%\", height: \"95%\"}}></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Multiple Local Secrets JSON Example\nDESCRIPTION: This JSON snippet shows how to define multiple local secrets for testing. Each secret is base64-encoded and associated with a specific domain. This configuration should be added to the Game Settings under the Security tab to allow local testing.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud-services/secrets.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"secretName1\": [\"dGVzdDE=\", \"*.example.com\"],\"secretName2\": [\"dGVzdDI=\", \"*.example.com\"],\"secretName3\": [\"dGVzdDM=\", \"*.example.com\"]}\n```\n\n----------------------------------------\n\nTITLE: Luau Arithmetic Type Coercion\nDESCRIPTION: This snippet demonstrates how Luau coerces strings to numbers during arithmetic operations. If the string represents a valid number, Luau performs the operation. Otherwise, it throws an error. The code shows examples of addition and subtraction with strings that can be converted to numbers, and an example that results in an error because of incompatible types.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/type-coercion.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nprint(100 + \"7\") -- 107\nprint(100 - \"7\") -- 93\nprint(\"1000\" + 234) -- 1234\nprint(\"1000\" - 234) -- 766\nprint(\"hello\" + 234) -- error: attempt to perform arithmetic (add) string and number\n```\n\n----------------------------------------\n\nTITLE: Customize ContextActionService Button Appearance in Lua\nDESCRIPTION: Customizes the visual properties of an existing \"Interact\" action button created with `ContextActionService`. It sets the display text to \"Talk\", applies a custom image using a Roblox asset ID, and positions the button on the screen using a `Datatype.UDim2` value. This requires an action already bound with `ContextActionService:BindAction()`.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/input/mobile.md#_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\n-- Set button label to \"Talk\"\nContextActionService:SetTitle(\"Interact\", \"Talk\")\n-- Set button image\nContextActionService:SetImage(\"Interact\", \"rbxassetid://104919049969988\")\n-- Set button position\nContextActionService:SetPosition(\"Interact\", UDim2.new(1, -70, 0, 10))\n```\n\n----------------------------------------\n\nTITLE: Customizing Widget UI with TextButton in Lua\nDESCRIPTION: This snippet creates a `TextButton` instance and parents it to a Studio widget, demonstrating how to customize the UI of the widget. It sets properties like border size, text size, text color, anchor point, size, and text.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/studio/build-studio-widgets.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n-- Create new widget GUI\nlocal testWidget = plugin:CreateDockWidgetPluginGui(\"TestWidget\", widgetInfo)\ntestWidget.Title = \"Test Widget\"  -- Optional widget title\n\nlocal testButton = Instance.new(\"TextButton\")\ntestButton.BorderSizePixel = 0\ntestButton.TextSize = 20\ntestButton.TextColor3 = Color3.new(1,0.2,0.4)\ntestButton.AnchorPoint = Vector2.new(0.5,0.5)\ntestButton.Size = UDim2.new(1,0,1,0)\ntestButton.Position = UDim2.new(0.5,0,0.5,0)\ntestButton.SizeConstraint = Enum.SizeConstraint.RelativeYY\ntestButton.Text = \"Click Me\"\ntestButton.Parent = testWidget\n```\n\n----------------------------------------\n\nTITLE: Writing to Specific Indices in an Array in Luau - Lua\nDESCRIPTION: Demonstrates modifying existing elements and adding new elements to an array using direct indexing. Shows changing index 2's value and adding a new value at index 4, highlighting Luau's syntax for dynamic array expansion. Input is an array and set values; output is the updated array contents when printed.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/tables.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal testArray = {\"A string\", 3.14159, true}\n\ntestArray[2] = 12345\ntestArray[4] = \"New string\"\n\nprint(testArray[2]) --12345\nprint(testArray[4]) -- New string\n```\n\n----------------------------------------\n\nTITLE: Configuring the Profile Card with Custom Settings in Lua\nDESCRIPTION: This Lua code snippet demonstrates how to customize the Profile Card module's appearance and behavior by overriding default configuration options. It sets parameters such as z-index, maximum click distance, background color, and transparency, allowing tailored user interface behavior within a Roblox experience.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/profile-card.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal ProfileCard = require(ReplicatedStorage:WaitForChild(\"ProfileCard\"))\n\nProfileCard.configure({\n\talwaysOnTop = true,\n\tmaxClickDistance = 50,\n\tbackgroundColor = Color3.fromRGB(0, 0, 0),\n\tbackgroundTransparency = 0.4\n})\n```\n\n----------------------------------------\n\nTITLE: Shaping Terrain Edges with Sculpt Tool for Natural Appearance\nDESCRIPTION: Adjusts terrain edges using the Sculpt tool with the Source Material set to Sand to create a more natural island outline. This process involves clicking and dragging around the terrain's perimeter and submerged areas, with a focus on erosion and organic shaping. It relies on the Sculpt tool settings and Terrain Editor controls.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/core/building/create-an-environment-with-terrain.md#_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n- In the **Terrain Editor**, click the **Sculpt** button.\n- Ensure **Source Material** is set to **Sand**.\n- In the viewport, click and drag around the island edges and below water level to refine terrain contours and add natural variation.\n```\n\n----------------------------------------\n\nTITLE: Checking Scene Loading Status with EventSequencer in Lua\nDESCRIPTION: Illustrates how to query whether a scene is currently loading using isLoadingScene and demonstrate waiting for the loading process to finish before proceeding. This should be used on the server and not with Inline Mode. Requires EventSequencer setup and permissions for task.wait(). Returns boolean loading status.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/event-sequencer.md#_snippet_19\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal EventSequencer = require(ReplicatedStorage:WaitForChild(\"EventSequencer\"))\n\nprint(EventSequencer.isLoadingScene())\n\nwhile EventSequencer.isLoadingScene() do\n\ttask.wait()\nend\nprint(\"Scene loaded\")\n```\n\n----------------------------------------\n\nTITLE: Rendering Dynamic Multipage Content Using React and Material-UI in JSX\nDESCRIPTION: This JSX snippet uses React to iterate over the \"sections\" array and render a styled layout of headings, paragraphs, buttons, and images using Material-UI components such as Grid, Typography, and Button. It uses conditional rendering to display titles, descriptions, links, and buttons if they exist. The snippet relies on React components and Material-UI as dependencies and expects \"sections\" data to be imported or defined in the same scope. Input is the structured sections data; output is dynamic HTML content styled in a responsive grid layout.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/scale.md#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n{sections.map((section, index) => (\n  <Grid style={{ marginBottom: 48 }} item xs={12} key={index}>\n    {section.title && (\n      <Typography variant='h1'>{section.title}</Typography>\n    )}\n  <div style={{ marginTop: 16, marginBottom: 48 }}>\n    {section.description && (\n      <p>{section.description}</p>\n    )}\n    {section.buttons && section.buttons.map((button, btnIndex) => (\n      <Button\n        key={btnIndex}\n        style={{ marginTop: 8, marginRight: 24 }}\n        variant=\"contained\"\n        color=\"secondary\"\n        size=\"large\"\n        href={button.href}\n      >\n        {button.text}\n      </Button>\n    ))}\n  </div>\n    {section.content.map((section, index) => (\n      <Grid container spacing={8} key={index} style={{ marginTop: 24 }}>\n        <Grid item xs={12} md={5}>\n          <div>\n            <h2>{section.title}</h2>\n            <p>{section.description}</p>\n            <div style={{ marginTop: 24, marginBottom: 48 }}>\n              {section.links && section.links.map((link, linkIndex) => (\n                <a href={link.href} key={linkIndex}>\n                  <Typography variant='buttonLarge'>{link.text}</Typography><br />\n                </a>\n              ))}\n              {section.buttons &&  section.buttons.map((button, btnIndex) => (\n                <Button\n                  key={btnIndex}\n                  style={{ marginRight: 24, marginBottom:24 }}\n                  variant=\"contained\"\n                  color=\"primary\"\n                  size=\"large\"\n                  href={button.href}\n                >\n                  {button.text}\n                </Button>\n              ))}\n            </div>\n          </div>\n        </Grid>\n        <Grid item xs={12} md={7}>\n          <img\n            style={{ width: '100%', height: 'auto' }}\n            src={section.image}\n            alt={section.title}\n          />\n        </Grid>\n      </Grid>\n    ))}\n  </Grid>\n))}\n```\n\n----------------------------------------\n\nTITLE: Setting private audio asset in Lua using AudioPlayer\nDESCRIPTION: This snippet demonstrates creating an AudioPlayer instance in Roblox Lua, configuring it to play a private audio asset by setting its Asset property with the private asset ID. Dependencies include the SoundService service.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/projects/assets/privacy.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal SoundService = game:GetService(\"SoundService\")\n\nlocal audioPlayer = Instance.new(\"AudioPlayer\")\naudioPlayer.Parent = SoundService\n\n-- Replace with the private audio asset ID\naudioPlayer.Asset = \"rbxassetid://1111111111\"\n```\n\n----------------------------------------\n\nTITLE: Iterating through an Array with ipairs() in Lua\nDESCRIPTION: Shows how to use ipairs() to iterate through an array in Lua. The function accesses both indices and values of the array, printing each player's rank and name.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-5/pairs-and-ipairs.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal players = {\"Ali\", \"Ben\", \"Cammy\"}\n\nfor playerRank, playerName in ipairs(players) do\n\tprint(\"Winner #\" .. playerRank .. \" is \" .. playerName)\nend\n```\n\n----------------------------------------\n\nTITLE: Handling Triangle Face Information Retrieval Error\nDESCRIPTION: This error occurs when the system fails to get triangle face information from the model mesh (`%s`). Ensure the specified model exists and is accessible.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/validation-errors.md#_snippet_14\n\nLANGUAGE: Text\nCODE:\n```\nFailed to get triangle face information from model mesh `%s`. Make sure model exists and try again.\n```\n\n----------------------------------------\n\nTITLE: Creating a Door Control Button in Lua for Roblox\nDESCRIPTION: This optional challenge script controls a gate/door in Roblox. When the button is touched, it turns red, makes the gate invisible (transparency set to 1), and disables collision on the gate allowing players to walk through it. The script demonstrates applying the same concept to a different game mechanic.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-2/parameters-practice-buttons.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nlocal button = script.Parent\n-- Reminder: Replace the name of the part, Gate, with the one in your project\nlocal gate = workspace.Gate\n\nlocal function buttonPressed()\n\tprint(\"button touched\")\n\t-- Changes button to red to give player feedback\n\tbutton.BrickColor = BrickColor.Red() -- CHANGE THIS\n\t-- Make the gate invisible\n\tgate.Transparency = 1\n\t-- Makes it so the player can walk through the gate\n\tgate.CanCollide = false\nend\n\nbutton.Touched:Connect(buttonPressed)\n```\n\n----------------------------------------\n\nTITLE: Implementing match timer expiration handling in `matchManager`\nDESCRIPTION: This code defines a `timeUp()` function that triggers the match end event with the `TimerUp` state. It ensures the event is fired with the correct method syntax `:Fire()`, signaling to other scripts that the timer has expired and the match should conclude.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/battle-royale-series/ending-matches.md#_snippet_5\n\nLANGUAGE: Lua\nCODE:\n```\nlocal function timeUp()\n\tmatchEnd:Fire(gameSettings.endStates.TimerUp)\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Animation Weights for Idle Animations in Roblox\nDESCRIPTION: This code snippet demonstrates how to control the frequency of different animation variations by setting weight values. In this example, idle animations are configured so Animation1 plays 1/3 of the time and Animation2 plays 2/3 of the time.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/animation/using.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nanimateScript.idle.Animation1.AnimationId = \"rbxassetid://656117400\"\nanimateScript.idle.Animation2.AnimationId = \"rbxassetid://656118341\"\nanimateScript.idle.Animation1.Weight.Value = 5\nanimateScript.idle.Animation2.Weight.Value = 10\n```\n\n----------------------------------------\n\nTITLE: Initializing Display Variables in DisplayManager (Lua)\nDESCRIPTION: Initializes variables in the `DisplayManager` module script to reference required services (ReplicatedStorage) and `IntValue` objects (`Status`, `PlayersLeft`, `TimeLeft`) located in `ReplicatedStorage.DisplayValues`. These values will be used to update the player GUI.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/battle-royale-series/creating-a-gui.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal DisplayManager = {}\n\n-- Services\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\n-- Display Values used to update Player GUI\nlocal displayValues = ReplicatedStorage:WaitForChild(\"DisplayValues\")\nlocal status = displayValues:WaitForChild(\"Status\")\nlocal playersLeft = displayValues:WaitForChild(\"PlayersLeft\")\nlocal timeLeft = displayValues:WaitForChild(\"TimeLeft\")\n```\n\n----------------------------------------\n\nTITLE: Adding Error Checking for Empty Selections in Lua\nDESCRIPTION: Enhances the previous code by adding an else condition to handle cases where no ingredients were selected, demonstrating good error checking practices.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-5/pairs-and-ipairs.md#_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nif #selectedIngredients > 0 then\n\tprint(\"You ordered soup with: \")\n\tfor index, soupIngredient in ipairs(selectedIngredients) do\n\t\tprint(soupIngredient)\n\tend\nelse\n\tprint(\"Nothing was selected. Are you not hungry?\")\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Text Navigation Link in JSX\nDESCRIPTION: Illustrates creating a standard HTML anchor (<a>) tag to link to another document. The link text is styled using the Material UI Typography component, formatted as body text with specific bottom margin. Requires Material UI and standard HTML knowledge.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/index.md#_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n<a href=\"./overview-studio.md\"><Typography variant='body1' style={{marginBottom: 12}}>Get started in Studio</Typography></a>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Logical 'and' Operator in Luau\nDESCRIPTION: Examples showing how the 'and' operator evaluates expressions and returns one of its arguments based on their boolean values. If the first argument evaluates to true, it returns the second argument; otherwise, it returns the first argument.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/operators.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nprint(4 and 5) -- 5\nprint(nil and 12) -- nil\nprint(false and 12) -- false\nprint(false and true) -- false\nprint(false and false) -- false\nprint(true and false) -- false\nprint(true and true) -- true\n```\n\n----------------------------------------\n\nTITLE: Enabling FaceCamera Property for Beam Visibility in Roblox\nDESCRIPTION: This snippet explains how to enable the FaceCamera property of the beam object so that it always faces the player's camera, ensuring visibility from any angle. This improves user experience by maintaining clear visibility of the beam.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/build-it-play-it-mansion-of-wonder/connect-the-beam.md#_snippet_2\n\nLANGUAGE: None\nCODE:\n```\nNavigate to the beam's properties in Roblox Studio.\nEnable the FaceCamera property.\nThis causes the beam to always face the camera, ensuring visibility from all angles.\n```\n\n----------------------------------------\n\nTITLE: Using deepFreeze Function to Freeze Complex Nested Tables in Luau - Lua\nDESCRIPTION: Shows applying the recursive `deepFreeze` function to a nested table structure, effectively making the entire table and its nested sub-tables read-only. Attempts to modify any field, even in nested tables, will fail. Demonstrates freezing game-related data structures. Input is nested mutable table; output is deeply frozen immutable table.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/tables.md#_snippet_20\n\nLANGUAGE: lua\nCODE:\n```\nlocal target = {\n\tkey = \"value\",\n\tplayerInfo = {\n\t\tplayerID = 505306092,\n\t\tplayerName = \"PlayerName\"\n\t},\n\totherInfo = {\n\t\t{\n\t\t\t{1, 3, 5, 7, 9}\n\t\t}\n\t}\n}\n\ndeepFreeze(target)\ntarget.playerInfo.playerID = 1 --> attempt to modify a readonly table\n```\n\n----------------------------------------\n\nTITLE: DataStore Class Definition in Node.js\nDESCRIPTION: Defines a DataStores class with methods for interacting with the Roblox DataStore API.  It initializes the base URL, API key, and other necessary parameters.  The class includes methods for retrieving, listing, and incrementing data store entries, utilizing the `node-fetch` library for HTTP requests.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/guides/usage-data-stores.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst fetch = require('node-fetch');\n\nclass DataStores {\n  constructor() {\n    this._baseUrl =\n      'https://apis.roblox.com/datastores/v1/universes/{universeId}';\n    this._apiKey = process.env.API_KEY;\n    this._universeId = 'UNIVERSE_ID';\n    this.ATTR_HDR = 'Roblox-entry-Attributes';\n    this.USER_ID_HDR = 'Roblox-entry-UserIds';\n    this._objectsUrl = `${this._baseUrl}${this._universeId}/standard-datastores/datastore/entries/entry`;\n    this._incrementUrl = `${this._objectsUrl}/increment`;\n    this._listObjectsUrl = `${this._baseUrl}${this._universeId}/standard-datastores/datastore/entries`;\n  }\n\n  async _getHeaders() {\n    return { 'x-api-key': this._apiKey };\n  }\n\n  async getEntry(datastore, objectKey, scope = null) {\n    const url = `${\n      this._objectsUrl\n    }?datastoreName=${datastore}&entryKey=${objectKey}&scope=${scope || ''}`;\n    const response = await fetch(url, { headers: await this._getHeaders() });\n    const data = await response.json();\n    return data;\n  }\n\n  async listEntries(datastore, scope = null, prefix = '', limit = 100) {\n    const url = `${this._listObjectsUrl}?datastoreName=${datastore}&scope=${scope}&prefix=${prefix}&limit=${limit}`;\n    const response = await fetch(url, { headers: await this._getHeaders() });\n    const data = await response.json();\n    return data;\n  }\n\n  async incrementEntry(datastore, objectKey, incrementBy, scope = null) {\n    const url = `${\n      this._incrementUrl\n    }?datastoreName=${datastore}&entryKey=${objectKey}&incrementBy=${incrementBy}&scope={\n      scope || ''\n    }`;\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: await this._getHeaders(),\n    });\n    const data = await response.json();\n    return data;\n  }\n}\n\nmodule.exports = DataStores;\n```\n\n----------------------------------------\n\nTITLE: Querying Marketplace API via HTTP GET Request - JSON\nDESCRIPTION: Shows an example URL used to search the Roblox Marketplace for the first 10 'Gear' accessory items from Roblox, sorted by all-time relevance. The URL demonstrates required and optional query parameters for endpoint customization. No code execution is involved, but the sample showcases usage of Category, Subcategory, CreatorTargetId, SortType, SortAggregation, and Limit parameters for tailored asset searches.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/projects/assets/api.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\nhttps://catalog.roblox.com/v1/search/items/details?Category=11&Subcategory=5&CreatorTargetId=1&SortType=0&SortAggregation=5&Limit=10\n```\n\n----------------------------------------\n\nTITLE: Opening SelfieMode with a Custom UI Button in LocalScript - Lua\nDESCRIPTION: Shows how to open the SelfieMode GUI from code in response to a custom button pressed, including disabling the default HUD button. Dependencies include the SelfieMode module placed in ReplicatedStorage and a custom button in the GUI. The example disables the default button with setHudButtonEnabled, connects to the custom button's Activated event, and opens selfie mode on click.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/selfie-mode.md#_snippet_5\n\nLANGUAGE: Lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal SelfieMode = require(ReplicatedStorage:WaitForChild(\"SelfieMode\"))\n\nlocal button = script.Parent\n\n-- Remove the default button\nSelfieMode.setHudButtonEnabled(false)\n\n-- Connect the custom button\nbutton.Activated:Connect(function()\n\tSelfieMode.openSelfieMode()\nend)\n```\n\n----------------------------------------\n\nTITLE: Configuring Rojo Project to Sync Wally Packages in JSON\nDESCRIPTION: Modifies the Rojo project configuration (`default.project.json`) to include the Wally-managed `Packages` directory. This example maps the local `Packages` folder to `ReplicatedStorage` within the Roblox game's data model, ensuring that downloaded dependencies are synced into the Studio environment by Rojo and become accessible to scripts.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/projects/external-tools.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my-new-experience\",\n  \"tree\": {\n    \"$className\": \"DataModel\",\n\n    \"ReplicatedStorage\": {\n      \"Shared\": {\n        \"$path\": \"src/shared\"\n      },\n      \"Packages\": {\n        \"$path\": \"Packages\"\n      }\n    },\n\n    ...\n\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Avatar Assets Asynchronously to Merch Booth (Lua)\nDESCRIPTION: Shows how to add standard avatar assets to the Merch Booth from a server-side `Script`. It iterates through a list of asset IDs and uses `MerchBooth.addItemAsync`, wrapping the call in `pcall` to handle potential network errors. The `addItemAsync` function takes the asset ID and optional product type (defaulting to asset) and hideFromCatalog boolean.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/merch-booth.md#_snippet_14\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal MerchBooth = require(ReplicatedStorage:WaitForChild(\"MerchBooth\"))\n\nlocal items = {\n\t607702162, -- Roblox Baseball Cap\n\t4819740796, -- Robox\n\t1374269, -- Kitty Ears\n\t11884330, -- Nerd Glasses\n\t10476359, -- Paper Hat\n}\n\nfor _, assetId in items do\n\tlocal success, errorMessage = pcall(function()\n\t\tMerchBooth.addItemAsync(assetId)\n\tend)\n\tif not success then\n\t\twarn(errorMessage)\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Calculating Hit Position if No Hit in Lua\nDESCRIPTION: This snippet calculates the `hitPosition` if the raycast didn't hit anything. It adds the tool's handle position and the `directionVector` to get the end point of the ray. It requires `tool.Handle.Position` and `directionVector` to be defined.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/scripting/intermediate-scripting/hit-detection-with-lasers.md#_snippet_13\n\nLANGUAGE: lua\nCODE:\n```\nlocal weaponRaycastResult = workspace:Raycast(tool.Handle.Position, directionVector, weaponRaycastParams)\n\n-- Check if any objects were hit between the start and end position\nlocal hitPosition\nif weaponRaycastResult then\n    hitPosition = weaponRaycastResult.Position\nelse\n    -- Calculate the end position based on maximum laser distance\n    hitPosition = tool.Handle.Position + directionVector\nend\n```\n\n----------------------------------------\n\nTITLE: Processing Deep Link Launch Data Using Player:GetJoinData() in Roblox Luau\nDESCRIPTION: Code to retrieve and process launch data sent through a deep link in a Roblox experience. The Player:GetJoinData() method returns a dictionary containing the LaunchData key with the string specified in the launchData parameter of the deep link.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/production/promotion/deeplinks.md#_snippet_0\n\nLANGUAGE: Luau\nCODE:\n```\n-- Example of processing deep link data in a Roblox experience\nlocal Players = game:GetService(\"Players\")\n\nPlayers.PlayerAdded:Connect(function(player)\n    local joinData = player:GetJoinData()\n    local launchData = joinData.LaunchData\n    \n    if launchData then\n        -- Process the launch data\n        -- For JSON data you can use HttpService:JSONDecode()\n        local HttpService = game:GetService(\"HttpService\")\n        local decodedData = HttpService:JSONDecode(launchData)\n        \n        -- Now you can use the data, for example:\n        if decodedData.roomId then\n            -- Place player in specific room\n            print(\"Placing player in room: \" .. decodedData.roomId)\n        end\n    end\nend)\n```\n\n----------------------------------------\n\nTITLE: Parsing Roblox Open Cloud List Instance Children Response - Python\nDESCRIPTION: This Python snippet demonstrates how to parse the successful response from a polled List Instance Children operation. It accesses the 'instances' array within the response and iterates through it to find a specific instance (e.g., 'ReplicatedStorage') by checking its 'Name' property, extracting its 'Id' if found.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/guides/instance.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ninstances = response.json()['response']['instances']\nreplicatedStorageId = \"\"\nfor i in instances:\n  if i['engineInstance']['Name'] == \"ReplicatedStorage\":\n    replicatedStorageId = i['engineInstance']['Id']\n\nif replicatedStorageId:\n  # You now have an instance ID and can get or update it.\nelse:\n  # The name wasn't found.\n```\n\n----------------------------------------\n\nTITLE: Creating and Printing Arrays in Luau - Lua\nDESCRIPTION: Shows how to create an array with multiple heterogeneous values using sequential notation within curly braces. Prints the constructed array. Depends only on basic Luau table syntax and supports any non-nil types as elements. Input is a literal array; output is a printed table reference.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/tables.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n-- Construct an array with three items\nlocal testArray = {\"A string\", 3.14159, true}\nprint(testArray)\n```\n\n----------------------------------------\n\nTITLE: Creating the Player Indicator Frame and Polygon Icon Shape in Roblox\nDESCRIPTION: This snippet details the steps to insert and configure the main frame and polygonal icon shape (ImageLabel) that visually represents the player's team. It specifies property adjustments for positioning, transparency, and aspect ratio to ensure a consistent visual appearance.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/user-interface-design/implement-designs-in-studio.md#_snippet_11\n\nLANGUAGE: Roblox Lua\nCODE:\n```\n<!-- No code provided; instructions involve GUI element property adjustments -->\n```\n\n----------------------------------------\n\nTITLE: Remove Player Weapon - PlayerManager (Lua)\nDESCRIPTION: This function removes a specified player's weapon, checking both their character and backpack. It locates and destroys any object named \"Weapon\" found in either location. This function is crucial for ensuring fair play and preventing persistence of weapons between matches. It handles the case where the player might have disconnected.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/battle-royale-series/cleanup-and-reset.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal function removePlayerWeapon(whichPlayer)\n  -- Check to see if a player exist in case they disconnected or left.\n  if whichPlayer then\n    local character = whichPlayer.Character\n\n    -- If the player has it currently on their character\n    local weapon = character:FindFirstChild(\"Weapon\")\n\n    if weapon then\n      weapon:Destroy()\n    end\n\n    -- If the player has the weapon in their backpack\n    local backpackWeapon = whichPlayer.Backpack:FindFirstChild(\"Weapon\") \n\n    if backpackWeapon then\n      backpackWeapon:Destroy()\n    end\n  else\n    print(\"No player to remove weapon\")\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using PolicyService for Paid Item Trading Restrictions in Roblox\nDESCRIPTION: This code snippet shows how to use the PolicyService.GetPolicyInfoForPlayerAsync method to determine if paid item trading is allowed for a specific player based on their region. The returned boolean value helps developers implement appropriate restrictions for players in regions where paid item trading is not permitted.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/production/promotion/content-maturity.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nClass.PolicyService.GetPolicyInfoForPlayerAsync\n```\n\n----------------------------------------\n\nTITLE: Illustrating Guard Type Narrowing Issue in Luau\nDESCRIPTION: This snippet demonstrates a limitation in Luau's type inference at the time of writing, where a value's type is not automatically narrowed after a guard conditional (`if not optionalParameter then return end`). The `optionalParameter` is still treated as potentially `nil` after the check, which would cause a type error if addition is attempted.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/plant-reference-project.md#_snippet_3\n\nLANGUAGE: Luau\nCODE:\n```\n--!strict\n\nlocal function foo(optionalParameter: number?)\n\tif not optionalParameter then\n\t\treturn\n\tend\n\n\tprint(optionalParameter + 1)\nend\n```\n\n----------------------------------------\n\nTITLE: Adding and Configuring Team Icons and Colors for Player Indicator\nDESCRIPTION: This snippet guides creating a folder containing ImageLabels for team icons, setting background colors, attributes for team identification, aspect ratio constraints, and specific icon images for green and pink teams. Attributes like 'teamColor' are used for scripting logic based on team assignment.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/user-interface-design/implement-designs-in-studio.md#_snippet_14\n\nLANGUAGE: Roblox Lua\nCODE:\n```\n<!-- No code provided; involves property settings for team icons and attributes -->\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Lighting Service Properties\nDESCRIPTION: Adjusts core properties of the Lighting service (Ambient, Brightness, ColorShift_Top, Technology, ClockTime, GeographicLatitude, ExposureCompensation) to establish the overall environmental lighting, time of day, and mood. This configuration is applied via the Roblox Studio Properties window.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/vfx/create-volcanoes.md#_snippet_3\n\nLANGUAGE: Configuration\nCODE:\n```\nAmbient = 133, 152, 176\nBrightness = 2\nColorShift_Top = 207, 178, 72\nTechnology = Future\nClockTime = 4.3\nGeographicLatitude = 199\nExposureCompensation = -1\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Scriptable DragStyle Function\nDESCRIPTION: Creates a custom drag behavior that follows surfaces detected by raycasting. The function computes a new CFrame based on hit points and normals, causing dragged objects to conform to the orientation of surfaces they're dragged over.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/ui/3D-drag-detectors.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal dragDetector = script.Parent.DragDetector\ndragDetector.DragStyle = Enum.DragDetectorDragStyle.Scriptable\n\nlocal cachedHitPoint = Vector3.zero\nlocal cachedHitNormal = Vector3.yAxis\n\nlocal function followTheCursor(cursorRay)\n\t-- Exclude dragged object from raycast detection\n\tlocal raycastParams = RaycastParams.new()\n\traycastParams.FilterDescendantsInstances = {dragDetector.Parent}\n\traycastParams.FilterType = Enum.RaycastFilterType.Exclude\n\n\tlocal hitPoint = Vector3.zero\n\tlocal hitNormal = Vector3.yAxis\n\n\tlocal raycastResult = Workspace:Raycast(cursorRay.Origin, cursorRay.Direction, raycastParams)\n\tif raycastResult then\n\t\thitPoint = raycastResult.Position\n\t\thitNormal = raycastResult.Normal.Unit\n\telse\n\t\thitPoint = cachedHitPoint\n\t\thitNormal = cachedHitNormal\n\tend\n\n\tcachedHitPoint = hitPoint\n\tcachedHitNormal = hitNormal\n\n\tlocal lookDir1 = hitNormal:Cross(Vector3.xAxis)\n\tlocal lookDir2 = hitNormal:Cross(Vector3.yAxis)\n\tlocal lookDir = if lookDir1.Magnitude > lookDir2.Magnitude then lookDir1.Unit else lookDir2.Unit\n\treturn CFrame.lookAt(hitPoint, hitPoint + lookDir, hitNormal)\nend\n\ndragDetector:SetDragStyleFunction(followTheCursor)\n```\n\n----------------------------------------\n\nTITLE: Updating TimerDisplay Text During Countdown in Roblox - Lua\nDESCRIPTION: Within the for loop, updates the timerText.Text property each second to show the countdown value. Provides a visual indicator for players about how much time remains. Requires timerText to reference a valid TextLabel.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-4/create-a-timed-bridge.md#_snippet_7\n\nLANGUAGE: Lua\nCODE:\n```\nfor count = timerDuration, 0, -1 do\n   timerText.Text = count\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Structure for Local and Module Functions in a Roblox ModuleScript - Lua\nDESCRIPTION: This snippet outlines comment blocks to separate local and module-level functions within the TreasureManager module script. It acts as a scaffold for organizing future implementation, promoting code clarity and maintainability. No logic is present; instead, it prepares for the addition of helper (local) functions and accessible (module) functions.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-6/create-with-module-scripts.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal TreasureManager = {}\n\n------------------ Local Functions\n\n------------------ Module Functions\n\nreturn TreasureManager\n```\n\n----------------------------------------\n\nTITLE: Breaking an Infinite Loop with Break in Luau\nDESCRIPTION: This code demonstrates how to use the `break` keyword to exit an infinite `while` loop in Luau.  The loop continues until `secondsElapsed` equals `timeout`. When this condition is met, the `break` statement is executed, terminating the loop, and a final message is printed.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/control-structures.md#_snippet_11\n\nLANGUAGE: lua\nCODE:\n```\nlocal secondsElapsed = 0\nlocal timeout = 5\n\nwhile true do\n\ttask.wait(1)\n\tsecondsElapsed += 1\n\tprint(\"Seconds elapsed:\", secondsElapsed)\n\n\tif secondsElapsed == timeout then\n\t\tbreak\n\tend\nend\n\nprint(\"Five seconds elapsed. Time to move on!\")\n\n--[[ Resulting output:\n1\n2\n3\n4\n5\nFive seconds elapsed. Time to move on!\n]]\n```\n\n----------------------------------------\n\nTITLE: Disabling the Default HUD Button and Using a Custom UI for SelfieMode - Lua\nDESCRIPTION: Illustrates how to hide the default HUD button for entering selfie mode and replace it with a custom button through setHudButtonEnabled. This code requires SelfieMode in ReplicatedStorage and a GUI element as the custom button. It is necessary for custom UI integration and demonstrates toggling HUD visibility and opening selfie mode through an event.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/selfie-mode.md#_snippet_8\n\nLANGUAGE: Lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal SelfieMode = require(ReplicatedStorage:WaitForChild(\"SelfieMode\"))\n\nlocal button = script.Parent\n\n-- Remove the default button\nSelfieMode.setHudButtonEnabled(false)\n\n-- Connect the custom button\nbutton.Activated:Connect(function()\n\tSelfieMode.openSelfieMode()\nend)\n```\n\n----------------------------------------\n\nTITLE: Filtering Collectible Items in Query String - HTTP\nDESCRIPTION: Demonstrates how to filter results to return only collectible items the user owns by setting 'onlyCollectibles=true' and retrieving all asset types using 'inventoryItemAssetTypes=*'. No additional dependencies are required. The filter is provided as a standard HTTP query string parameter, expecting the API to interpret Boolean flags and wildcard asset types.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/reference/patterns.md#_snippet_7\n\nLANGUAGE: HTTP\nCODE:\n```\nfilter=onlyCollectibles=true;inventoryItemAssetTypes=*\n```\n\n----------------------------------------\n\nTITLE: Seeking to a Specific Scene Time with EventSequencer in Lua\nDESCRIPTION: This code demonstrates seeking to a precise time (in seconds) within the currently loaded scene using EventSequencer.seek. Requires EventSequencer and basic access through ReplicatedStorage. Intended for use outside of schema lifecycle hooks to properly control seeking and playback start.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/event-sequencer.md#_snippet_15\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal EventSequencer = require(ReplicatedStorage:WaitForChild(\"EventSequencer\"))\n\nEventSequencer.seek(95.58)\n```\n\n----------------------------------------\n\nTITLE: Activate a Specific Vibration Motor in Roblox Lua\nDESCRIPTION: This snippet shows how to activate a specific vibration motor, here the Large motor, by setting its amplitude to 0.5. The function checks whether vibration is supported and whether the motor is available before activation, ensuring safe and effective haptic feedback implementation.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/input/gamepad.md#_snippet_8\n\nLANGUAGE: Lua\nCODE:\n```\nlocal HapticService = game:GetService(\"HapticService\")\n\nlocal gamepad = Enum.UserInputType.Gamepad1\nlocal isVibrationSupported = HapticService:IsVibrationSupported(gamepad)\n\nif isVibrationSupported then\n\tlocal largeMotor = HapticService:IsMotorSupported(gamepad, Enum.VibrationMotor.Large)\n\tif largeMotor then\n\t\tHapticService:SetMotor(gamepad, Enum.VibrationMotor.Large, 0.5)\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Complete Glowing Light Script in Roblox Lua\nDESCRIPTION: Provides a full, ready-to-use script combining initialization, parameter definitions, and continuous brightness modulation to make a lamp glow endlessly. It uses a while loop with nested for loops to alternate brightness, creating an animated glow effect. The script's parameters like brightnessStep and delay can be adjusted for different glow speeds.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-4/glow-lights-with-for-loops.md#_snippet_5\n\nLANGUAGE: Lua\nCODE:\n```\n-- Stores the light attached to this lamp\nlightPart = script.Parent\nlight = lightPart.SpotLight\n\n-- How much the light's brightness will change each time\nlocal brightnessChange = 1\n-- How often in seconds the light will change brightness\nlocal timeChange = 0.2\n\nwhile true do\n  for count = 0, 5, brightnessChange do\n    light.Brightness = count\n    task.wait(timeChange)\n  end\n\n  -- Second loop to turn off light\n  for count = 5, 0, -brightnessChange do\n    light.Brightness = count\n    task.wait(timeChange)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Handling Non-Existent Property Error\nDESCRIPTION: This error occurs when attempting to access a property (`%s`) that does not exist on the specified instance type (`%s`). Remove the reference to the non-existent property.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/validation-errors.md#_snippet_30\n\nLANGUAGE: Text\nCODE:\n```\nProperty `%s` does not exist on type `%s`. Delete the property and try again.\n```\n\n----------------------------------------\n\nTITLE: Positioning and Configuring Skylight Assets in Roblox\nDESCRIPTION: These tables provide the asset names, positions (CFrame.Position), and orientations (CFrame.Orientation) to position and configure modular assets to recreate the example skylights.  They describe the positions, orientations, and the names of the modular assets necessary for the skylights. The assets include SkylightCornerInner, SkylightSmall, and SkylightLarge. The process involves selecting the assets and inputting their provided configurations into the Roblox Studio.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/environmental-art/construct-your-world.md#_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: Creating Bundled Installers via Command Line (Bash)\nDESCRIPTION: This snippet demonstrates the commands used to create bundled installers for Roblox Studio and Roblox Player using the command line. It involves navigating to the directory containing the Roblox executables and running the executables with the `-bundle` flag. It assumes Roblox Studio or Player is already installed. No dependencies are required beyond the existing Roblox Installation.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/support/creating-bundled-installers.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nRobloxStudioLauncherBeta.exe -bundle\nRobloxPlayerLauncher.exe -bundle\n```\n\n----------------------------------------\n\nTITLE: Rendering Developer Module Buttons with Showcase Videos in JSX\nDESCRIPTION: This snippet demonstrates rendering a grid container with multiple figures containing buttons and videos. Each button links to separate documentation for a developer module designed to add social features. The snippet uses JSX components such as GridContainer, Button, and HTML5 video elements, styled inline and configured for user interaction. The purpose is to provide an interactive gallery that lets users preview and access individual modules quickly. There are no explicit dependencies beyond a React environment with predefined UI components like Button and GridContainer. Inputs are attributes on JSX elements controlling appearance and navigation; outputs are rendered UI elements.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/index.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<GridContainer numColumns=\"2\">\n  <figure>\n    <Button href=\"../../resources/modules/selfie-mode.md\" fullWidth size='large' color='primary' variant='contained' style={{marginBottom:\"4px;\"}}>Selfie mode</Button>\n\t  <video controls src=\"../../assets/developer-modules/selfie-mode/Showcase-SM.mp4\" width=\"100%\"></video>\n    <figcaption>Pose and capture memorable moments</figcaption>\n  </figure>\n  <figure>\n    <Button href=\"../../resources/modules/merch-booth.md\" fullWidth size='large' color='primary' variant='contained' style={{marginBottom:\"4px;\"}}>Merch booth</Button>\n\t  <video controls src=\"../../assets/developer-modules/merch-booth/Showcase-SM.mp4\" width=\"100%\"></video>\n    <figcaption>Sell avatar assets and more in an experience</figcaption>\n  </figure>\n  <figure>\n    <Button href=\"../../resources/modules/friends-locator.md\" fullWidth size='large' color='primary' variant='contained' style={{marginBottom:\"4px;\"}}>Friends locator</Button>\n\t  <video controls src=\"../../assets/developer-modules/friends-locator/Showcase-SM.mp4\" width=\"100%\"></video>\n    <figcaption>Easily spot your friends and teleport to them</figcaption>\n  </figure>\n  <figure>\n    <Button href=\"../../resources/modules/spawn-with-friends.md\" fullWidth size='large' color='primary' variant='contained' style={{marginBottom:\"4px;\"}}>Spawn with friends</Button>\n\t  <video controls src=\"../../assets/developer-modules/spawn-with-friends/Showcase-SM.mp4\" width=\"100%\"></video>\n    <figcaption>Join an experience right next to your friends</figcaption>\n  </figure>\n  <figure>\n    <Button href=\"../../resources/modules/emote-bar.md\" fullWidth size='large' color='primary' variant='contained' style={{marginBottom:\"4px;\"}}>Emote bar</Button>\n\t  <video controls src=\"../../assets/developer-modules/emote-bar/Showcase-SM.mp4\" width=\"100%\"></video>\n    <figcaption>Express yourself and have dance parties</figcaption>\n  </figure>\n  <figure>\n    <Button href=\"../../resources/modules/profile-card.md\" fullWidth size='large' color='primary' variant='contained' style={{marginBottom:\"4px;\"}}>Profile card</Button>\n\t  <video controls src=\"../../assets/developer-modules/profile-card/Showcase-SM.mp4\" width=\"100%\"></video>\n    <figcaption>Craft your identity within an experience</figcaption>\n  </figure>\n  <figure>\n    <Button href=\"../../resources/modules/photo-booth.md\" fullWidth size='large' color='primary' variant='contained' style={{marginBottom:\"4px;\"}}>Photo booth</Button>\n\t  <video controls src=\"../../assets/developer-modules/photo-booth/Showcase-SM.mp4\" width=\"100%\"></video>\n    <figcaption>Strike a pose with a unique background</figcaption>\n  </figure>\n  <figure>\n    <Button href=\"../../resources/modules/surface-art.md\" fullWidth size='large' color='primary' variant='contained' style={{marginBottom:\"4px;\"}}>Surface art</Button>\n\t  <video controls src=\"../../assets/developer-modules/surface-art/Showcase-SM.mp4\" width=\"100%\"></video>\n    <figcaption>Literally leave your mark in an experience</figcaption>\n  </figure>\n  <figure>\n    <Button href=\"../../resources/modules/scavenger-hunt.md\" fullWidth size='large' color='primary' variant='contained' style={{marginBottom:\"4px;\"}}>Scavenger hunt</Button>\n\t  <video controls src=\"../../assets/developer-modules/scavenger-hunt/Showcase-SM.mp4\" width=\"100%\"></video>\n    <figcaption>Encourage players to explore your space</figcaption>\n  </figure>\n  <figure>\n    <Button href=\"../../resources/modules/social-interactions.md\" fullWidth size='large' color='primary' variant='contained' style={{marginBottom:\"4px;\"}}>Social interactions</Button>\n\t  <video controls src=\"../../assets/developer-modules/social-interactions/Showcase-SM.mp4\" width=\"100%\"></video>\n    <figcaption>Add a touch of realism to your avatars</figcaption>\n  </figure>\n  <figure>\n    <Button href=\"../../resources/modules/event-sequencer.md\" fullWidth size='large' color='primary' variant='contained' style={{marginBottom:\"4px;\"}}>Event sequencer</Button>\n\t  <video controls src=\"../../assets/developer-modules/event-sequencer/Seek-Bar-SM.mp4\" width=\"100%\"></video>\n    <figcaption>Build live events on a structured sequence</figcaption>\n  </figure>\n</GridContainer>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Color3.fromRGB() Method in Roblox\nDESCRIPTION: Shows how to use the Color3.fromRGB() method to prepare for assigning a new color to a part. This method takes RGB values as parameters.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-1/object-properties.md#_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\n-- Changes the color of a part\nworkspace.PracticePart.Color = Color3.fromRGB()\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring Invisible Barrier Parts in Roblox Lua\nDESCRIPTION: This snippet details how to add parts that serve as barriers to contain the playable area, including setting transparency, disabling collision, and anchoring to prevent players from falling off the map.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/environmental-art/construct-your-world.md#_snippet_17\n\nLANGUAGE: Lua\nCODE:\n```\n-- Create barrier part\nlocal barrierPart = Instance.new('Part')\nbarrierPart.Size = Vector3.new(69, 71, 17)\nbarrierPart.CFrame = CFrame.new(12.5, 23, -47.5)\n-- Set properties to make it invisible and immovable\nbarrierPart.Transparency = 1\nbarrierPart.CanCollide = false\nbarrierPart.Anchored = true\nbarrierPart.Parent = workspace\n\n```\n\n----------------------------------------\n\nTITLE: Firing RemoteEvent with Table Containing Metatable from LocalScript - Lua\nDESCRIPTION: Creates a table with a metatable containing an additional property (NumWheels) and fires it to the server using RemoteEvent. Demonstrates that metatable data is lost upon transfer. Requires RemoteEvent in ReplicatedStorage and Workspace service.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/scripting/events/remote.md#_snippet_17\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal remoteEvent = ReplicatedStorage:FindFirstChildOfClass(\"RemoteEvent\")\n\nlocal Car = {}\nCar.NumWheels = 4\nCar.__index = Car\n\nlocal truck = {}\ntruck.Name = \"MyTruck\"\nsetmetatable(truck, Car)\n\n-- Fire event with table including a metatable\nremoteEvent:FireServer(truck)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Global Variable Access in Luau\nDESCRIPTION: Shows a local function (`testFunc`) that declares a variable (`testVar`) without the `local` keyword, automatically making it global. After calling the function, the global `testVar` variable is accessible and printed outside the function's scope, demonstrating its global reach.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/scope.md#_snippet_1\n\nLANGUAGE: Luau\nCODE:\n```\nlocal function testFunc()  -- local scope\n\ttestVar = 64  -- global scope\nend\n\ntestFunc()\n\nprint(testVar) -- 64\n```\n\n----------------------------------------\n\nTITLE: Implementing Leaderboard Logic Using DataStores (Python)\nDESCRIPTION: This Python code uses the `DataStores` class to implement the leaderboard logic. It creates entries, displays scores, increments scores, and updates the leaderboard. It requires the `leaderboardEndpoints.py` file and a `config.json` file for configuration.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/guides/usage-data-stores.md#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport leaderboardEndpoints\n\n# input config file here\ndatastores = leaderboardEndpoints.DataStores(\"config.json\")\n\n# Variables\norderedDataStore = \"PlayerScores\"\nscope = \"global\"\nentryNames = [\"Ragdoll\", \"Balinese\", \"Tabby\", \"Siamese\"]\n\n# Create an entry and give each new player 50 points for joining the game\nfor x in range(len(entryNames)):\n    r = datastores.create(orderedDataStore, scope, entryNames[x], 50)\n\n# Display the players scores\nplayerScores = datastores.list(orderedDataStore, scope)\nprint(playerScores.content)\n\n# Increment the first players score for winning the game\ndatastores.increment(orderedDataStore, scope, entryNames[0], 100)\n# Increment all the players scores for participating in the game\nfor x in range(len(entryNames)):\n    datastores.increment(orderedDataStore, scope, entryNames[x], 10)\n\n# Display the leaderboard with the updated scores\nplayerScores = datastores.list(orderedDataStore, scope)\nprint(playerScores.content)\n\n```\n\n----------------------------------------\n\nTITLE: Defining LeftLipCornerPuller Pose in Roblox FaceControls\nDESCRIPTION: References the 'LeftLipCornerPuller' pose within the Roblox FaceControls system. This pose raises the corners of the character's mouth upwards, resembling a smile. This pose is required for avatars published on the Roblox Marketplace.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/characters/facial-animation/facs-poses-reference.md#_snippet_6\n\nLANGUAGE: Roblox API\nCODE:\n```\nClass.FaceControls.LeftLipCornerPuller|LeftLipCornerPuller\n```\n\n----------------------------------------\n\nTITLE: Paginated GET Request with Terminal Page in JSON\nDESCRIPTION: Shows a paginated API request and corresponding response where nextPageToken is empty, indicating all pages have been retrieved for a user's inventory items. Continue paginating only while nextPageToken is non-empty. Standard REST API response, no special dependencies.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/reference/patterns.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\nGET /cloud/v2/users/{user_id}/inventory-items?maxPageSize=25&pageToken=aaaBBB\n\n{\n  \"inventoryItems\": [\n    ...\n  ],\n  \"nextPageToken\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adjusting Explosion Particle Properties in Roblox Studio\nDESCRIPTION: This snippet guides users through selecting the 'ExplosionParticles' object in Roblox Studio, changing its color property, and applying a texture using a specific ID. It explains how to locate the particle emitter, modify visual properties, and test the explosion effect by entering Play mode. Dependencies include Roblox Studio's Explorer and Properties panels.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/build-it-play-it-mansion-of-wonder/making-an-explosion.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Filtering by Inventory Item Asset Types in Query String - HTTP\nDESCRIPTION: Shows how to filter inventory items based on specific asset types, such as HAT, CLASSIC_PANTS, and TSHIRT_ACCESSORY, using the 'inventoryItemAssetTypes' filter. The parameter accepts a comma-separated list of asset type identifiers. This filter should be appended to the API request URL as a query string.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/reference/patterns.md#_snippet_8\n\nLANGUAGE: HTTP\nCODE:\n```\nfilter=inventoryItemAssetTypes=HAT,CLASSIC_PANTS,TSHIRT_ACCESSORY\n```\n\n----------------------------------------\n\nTITLE: Disabling Moods Lua\nDESCRIPTION: This Lua script removes the 'mood' object from each character's `Animate` LocalScript to disable moods. It uses `Players.PlayerAdded` and `CharacterAppearanceLoaded` events to connect the character appearance loading and destroy the mood.  This effectively disables all mood functionality.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/characters/facial-animation/moods.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nlocal function onCharacterAdded(character)\n\tlocal humanoid = character:WaitForChild(\"Humanoid\")\n\tlocal animateScript = character:WaitForChild(\"Animate\")\n\tanimateScript.mood:Destroy()\nend\n\nlocal function onPlayerAdded(player)\n\tplayer.CharacterAppearanceLoaded:Connect(onCharacterAdded)\nend\n\nPlayers.PlayerAdded:Connect(onPlayerAdded)\n```\n\n----------------------------------------\n\nTITLE: Defining updateRoundStatus Function in DisplayManager (Lua)\nDESCRIPTION: Defines a local function `updateRoundStatus` within the `DisplayManager` module. This function concatenates the current values of `playersLeft` and `timeLeft` IntValues into a formatted string and updates the `status` StringValue.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/battle-royale-series/creating-a-gui.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal displayValues = ReplicatedStorage:WaitForChild(\"DisplayValues\")\nlocal status = displayValues:WaitForChild(\"Status\")\nlocal playersLeft = displayValues:WaitForChild(\"PlayersLeft\")\nlocal timeLeft = displayValues:WaitForChild(\"TimeLeft\")\n\n-- Local Functions\nlocal function updateRoundStatus()\n\tstatus.Value = \"Players Left: \" .. playersLeft.Value .. \" / Time Left: \" .. timeLeft.Value\nend\n```\n\n----------------------------------------\n\nTITLE: Displaying App Store & Payment Fee Percentage using JSX Grid and Chip\nDESCRIPTION: This JSX snippet utilizes Grid and Chip components to display the 22% portion of revenue allocated to cover app store fees and payment processing costs. The percentage and label are presented in styled chips within a grid container.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/production/earn-on-roblox.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Grid container spacing={1}>\n<Grid item XSmall={2}>\n<Chip label=\"22%\" size=\"large\" style={{backgroundColor:\"#00a2ff\",color:\"white\",fontSize:\"120%\",width:\"100%\"}} />\n</Grid>\n<Grid item XSmall={10}>\n<Chip label=\"App stores & payment processing fees\" size=\"large\" color=\"primary\" variant=\"outlined\" style={{fontSize:\"105%\"}}/>\n</Grid>\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Defining Bundle Item Manually - Lua\nDESCRIPTION: This code snippet illustrates how to define a bundle item manually by specifying its type, price in Robux, and icon (image asset ID). A metadata caption is also included. Dependencies: Requires `ItemTypes` from `ReplicatedStorage.Bundles.Configs.Types`\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/feature-packages/bundles.md#_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\n    {\n        itemType = ItemTypes.ItemType.Robux,\n        priceInRobux = 49,\n        icon = <IMAGE_ASSET_ID>,\n        metadata = {\n            caption = {\n                text = \"x1\",\n                color = Color3.fromRGB(236, 201, 74),\n            } -- Caption is optional! You can also leave omit this field\n        }\n    },\n```\n\n----------------------------------------\n\nTITLE: Using elseif and else for Medals Luau\nDESCRIPTION: Demonstrates the correct use of `elseif` and `else` to provide alternative actions based on different conditions, specifically awarding medals based on a player's finish time. This improves readability and efficiency compared to multiple independent if statements.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-3/multiple-conditions.md#_snippet_2\n\nLANGUAGE: Luau\nCODE:\n```\nif finishTime < 5  then\n   -- Get a gold medal\nelseif finishTime >= 5 and <= 10 then\n   -- Get a silver medal\nelseif finishTime > 10 and <= 15 then\n   -- Get a bronze medal\nend\n```\n\n----------------------------------------\n\nTITLE: Applying Deep Copy Function to a Nested Table in Luau - Lua\nDESCRIPTION: Illustrates usage of the previously defined `deepCopy` function to create an independent deep clone of a complex table containing nested tables and arrays. Input is an original nested table structure; output is a deeply copied clone with no shared references.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/tables.md#_snippet_17\n\nLANGUAGE: lua\nCODE:\n```\nlocal original = {\n\tkey = \"value\",\n\tplayerInfo = {\n\t\tplayerID = 505306092,\n\t\tplayerName = \"PlayerName\"\n\t},\n\totherInfo = {\n\t\t{\n\t\t\t{1, 3, 5, 7, 9}\n\t\t}\n\t}\n}\n\nlocal clone = deepCopy(original)\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Trigger Words for Chat Animations in Lua\nDESCRIPTION: This code snippet registers a new animation for the chat animation feature and associates it with custom trigger words using `setTriggerWordsForChatAnimation`.  It uses string patterns to match the specified trigger words. The SocialInteractions module is required to be present in ReplicatedStorage.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/social-interactions.md#_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal SocialInteractions = require(ReplicatedStorage:WaitForChild(\"SocialInteractions\"))\n\n-- Register new string pattern for a custom animation\nSocialInteractions.setTriggerWordsForChatAnimation(\n\t\"rbxassetid://3334538554\",\n\t{\"cra+zy\", \"woah+\"}\n)\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Collections with Foreach Loops in C#\nDESCRIPTION: This snippet demonstrates how to iterate over C# collections using the `foreach` loop. It works for types implementing `IEnumerable` or `IEnumerable<T>`, providing a simple way to access each item in lists or key-value pairs in dictionaries without managing indices.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/luau-csharp-comparison.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nList<string> abcList = new List<string>{\"a\", \"b\", \"c\"};\n\nforeach (string v in abcList) {\n\tConsole.WriteLine(v);\n}\n\nDictionary<string, int> abcDictionary = new Dictionary<string, int>\n{ {\"a\", 1}, {\"b\", 2}, {\"c\", 3} };\n\n\nforeach (KeyValuePair<string, int> entry in abcDictionary) {\n\tConsole.WriteLine(entry.Key + \" \" + entry.Value);\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Beam Texture for Arrow Stream Effect in Roblox\nDESCRIPTION: This snippet details how to modify the beam's Texture property with a specific ID to create an arrow streaming effect along the beam. It also hints at custom textures and their upload process via the Asset Manager.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/build-it-play-it-mansion-of-wonder/connect-the-beam.md#_snippet_3\n\nLANGUAGE: None\nCODE:\n```\nCopy the texture ID (e.g., 5886559421) and paste it into the beam's Texture property in Roblox Studio.\nCustom textures can be uploaded through the Asset Manager.\n```\n\n----------------------------------------\n\nTITLE: Low Health Character Chat Bubble Customization in Roblox Lua\nDESCRIPTION: This script enhances chat bubbles for players with low health (<25 HP) by applying custom background color, text color, font, size, and a UI gradient effect. It checks the sender’s humanoid health when a bubble is added and modifies appearance accordingly. Requires access to TextChatService, Players, and the player's character’s Humanoid. Designed for client-side scripts.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/chat/bubble-chat.md#_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nlocal TextChatService = game:GetService(\"TextChatService\")\nlocal Players = game:GetService(\"Players\")\n\n-- Event handler for when a new chat bubble is added to the experience\nTextChatService.OnBubbleAdded = function(message: TextChatMessage, adornee: Instance)\n\t-- Check if the chat message has a TextSource (sender) associated with it\n\tif message.TextSource then\n\t\t-- Get the user who sent the chat message by using their UserId\n\t\tlocal player = Players:GetPlayerByUserId(message.TextSource.UserId)\n\n\t\t-- Find the humanoid in the user's character\n\t\tlocal humanoid = player.Character:FindFirstChildWhichIsA(\"Humanoid\")\n\n\t\tif humanoid and humanoid.Health < 25 then\n\t\t\t-- Create a new BubbleChatMessageProperties instance to customize the chat bubble\n\t\t\tlocal bubbleProperties :BubbleChatMessageProperties = Instance.new(\"BubbleChatMessageProperties\")\n\n\t\t\t-- Customize the chat bubble properties for low health condition\n\t\t\tbubbleProperties.BackgroundColor3 = Color3.fromRGB(245, 245, 245)\n\t\t\tbubbleProperties.TextColor3 = Color3.fromRGB(234, 51, 96)\n\t\t\tbubbleProperties.TextSize = 20\n\t\t\tbubbleProperties.FontFace = Font.fromEnum(Enum.Font.DenkOne)\n\n\t\t\t-- Add a UIGradient as a child to customize the gradient\n\t\t\tlocal uiGradient : UIGradient = Instance.new(\"UIGradient\")\n\t\t\tuiGradient.Color = ColorSequence.new(Color3.fromRGB(110, 4, 0), Color3.fromRGB(0, 0, 0))\n\t\t\tuiGradient.Rotation = 90\n\t\t\tuiGradient.Parent = bubbleProperties\n\t\t\t\n\t\t\treturn bubbleProperties\n\t\tend\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Creating an Accordion Item with a Button Link (JSX/HTML)\nDESCRIPTION: Uses a `BaseAccordion` component for a chapter title (`Typography`). The details include a description with a Markdown link, and an HTML anchor tag (`<a>`) containing a `Button` component to provide a prominent link, used here for downloading a Roblox place file.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/user-interface-design/index.md#_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<BaseAccordion>\n   <AccordionSummary>\n      <Typography variant=\"h4\">Chapter 3 - Implement designs in Studio</Typography>\n   </AccordionSummary>\n   <AccordionDetails>\n\n    Learn how to [implement your UI layouts](implement-designs-in-studio.md) in Studio using both built-in and custom UI elements with scripts.\n\n        <a href=\"https://www.roblox.com/games/14817965191/Laser-Tag-1A\">\n        <Button\n          color=\"primary\"\n          size=\"medium\"\n          variant=\"contained\">\n          Get the Place File\n        </Button>\n        </a>\n\n   </AccordionDetails>\n   </BaseAccordion>\n```\n\n----------------------------------------\n\nTITLE: Configuring SeaStackMesh in Level_4c - Roblox Properties Table\nDESCRIPTION: Specifies the Size, CFrame.Position, and CFrame.Orientation properties for a single SeaStackMesh asset placed in the Level_4c model, as used in the sample experience. These properties are configured via the Roblox Studio Properties window.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/core/building/apply-polished-assets.md#_snippet_5\n\nLANGUAGE: Roblox Properties Table\nCODE:\n```\nSize\tCFrame.Position\tCFrame.Orientation\n`63, 81, 62`\t`151, 25, 91`\t`0, -50, 0`\n```\n\n----------------------------------------\n\nTITLE: Using the SafeTeleport Module in Roblox\nDESCRIPTION: Demonstrates how to utilize the SafeTeleport module to perform teleportation with error handling and retry logic. This script requires the SafeTeleport module and uses it to teleport the first player in the game.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/projects/teleport.md#_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\nlocal ServerScriptService = game:GetService(\"ServerScriptService\")\n\nlocal SafeTeleport = require(ServerScriptService.SafeTeleport)\n\nlocal TARGET_PLACE_ID = 1818 -- replace with your own place ID\n\nlocal playerToTeleport = Players:GetPlayers()[1] -- get the first user in the game\n\nSafeTeleport(TARGET_PLACE_ID, {playerToTeleport}, teleportOptions)\n```\n\n----------------------------------------\n\nTITLE: Setting RenderFidelity for Mesh Detail in Roblox\nDESCRIPTION: Demonstrates how to control a mesh's level of detail using the RenderFidelity enumeration property, with Automatic as the default value that adjusts detail based on camera distance.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/parts/meshes.md#_snippet_5\n\nLANGUAGE: Roblox\nCODE:\n```\nEnum.RenderFidelity.Automatic|Automatic\n```\n\n----------------------------------------\n\nTITLE: Displaying Status Chip in MDX\nDESCRIPTION: This snippet demonstrates how to use the MDX Chip component within documentation to display a status indicator. It is wrapped in a `<figure>` tag for semantic grouping. Key properties like `color`, `label`, `size`, and `variant` are used to customize the chip's appearance.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/creator-programs/brand-developer-directory.md#_snippet_0\n\nLANGUAGE: MDX\nCODE:\n```\n<figure>\n<Chip\n    color=\"success\"\n    label=\"Status: Open\"\n    size=\"medium\"\n    variant=\"filled\" />\n</figure>\n```\n\n----------------------------------------\n\nTITLE: Call Functions to Start Hit Detection\nDESCRIPTION: This code snippet shows how the `rayDirections()` and `rayResults()` functions are called within the `generateBlastData` function to start the hit detection process. It utilizes the current camera position, rotation values, and the player's blaster type to calculate the blast direction and cast the laser ray.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/gameplay-scripting/detect-hits.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal rayDirections = getDirectionsForBlast(currentCamera.CFrame, blasterConfig)\nlocal rayResults = castLaserRay(localPlayer, currentCamera.CFrame.Position, rayDirections)\n```\n\n----------------------------------------\n\nTITLE: Updating Player Count in sendPlayersToMatch (Lua)\nDESCRIPTION: Modifies the `sendPlayersToMatch` function in `PlayerManager`. After populating the `activePlayers` table and preparing players, it updates the `playersLeft` IntValue with the number of players currently in the `activePlayers` table using `#activePlayers`.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/battle-royale-series/creating-a-gui.md#_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nfunction PlayerManager.sendPlayersToMatch()\n\tlocal availableSpawnPoints = spawnLocations:GetChildren()\n\n\tfor playerKey, whichPlayer in Players:GetPlayers() do\n\t\ttable.insert(activePlayers, whichPlayer)\n\n\t\tlocal spawnLocation = table.remove(availableSpawnPoints, 1)\n\t\tpreparePlayer(whichPlayer, spawnLocation)\n\tend\n\n\tplayersLeft.Value = #activePlayers\nend\n```\n\n----------------------------------------\n\nTITLE: Using Named Arguments in C# Method Calls\nDESCRIPTION: This snippet shows how to use named arguments when calling a C# method. By specifying the parameter name followed by a colon (`:`), arguments can be passed out of order, improving readability, especially for methods with many optional parameters.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/luau-csharp-comparison.md#_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\n// Named arguments\nstring namedArguments(string name, string dob) {\n\treturn name + \"'s birthday: \" + dob;\n}\n\nnamedArguments(name: \"Bob\", dob: \"4/1/2000\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Transform for Dust Emitter Container Part (Roblox Studio)\nDESCRIPTION: Specifies the Size, CFrame.Position, and CFrame.Orientation values used to define the spatial bounds of the block part ('VFX_DustMotes') that will contain the dust particle emitter. These values ensure the part covers the intended playable area.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/core/building/create-basic-visual-effects.md#_snippet_0\n\nLANGUAGE: Configuration\nCODE:\n```\nSize: 645, 355, 275\nCFrame.Position: 198, 168, 26\nCFrame.Orientation: 0, 0, 0\n```\n\n----------------------------------------\n\nTITLE: Creating OnTouch Function to Handle Touch Events\nDESCRIPTION: Defines a function named 'onTouch' with an 'otherPart' parameter, which is connected to the trap's Touched event. This function executes whenever the trap part is touched, serving as the entry point for detection logic. No external dependencies besides the Roblox environment.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-3/traps-with-if-statements.md#_snippet_1\n\nLANGUAGE: Luau\nCODE:\n```\n-- If a player touches this part, set their health to 0\n\nlocal trapPart = script.Parent\n\nlocal function onTouch(otherPart)\n\nend\n```\n\n----------------------------------------\n\nTITLE: Starting the Rojo Synchronization Server using Bash\nDESCRIPTION: Runs the Rojo server using the `rojo serve` command. The server monitors the project files defined in the Rojo configuration (`default.project.json` or similar) for changes and synchronizes them with an active Roblox Studio instance connected via the Rojo plugin. This enables live updates in Studio based on external file edits.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/projects/external-tools.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nrojo serve\n```\n\n----------------------------------------\n\nTITLE: Declaring a Dictionary in Luau - Lua\nDESCRIPTION: Demonstrates basic Luau dictionary syntax, showing how to define a table with string keys. No external dependencies required. Keys map to string values representing pet name and type. This is the foundational structure for all dictionary operations in subsequent examples.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-5/intro-to-dictionaries.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal pet = {\n   Name = \"Bobbie\",\n   Type = \"Dog\",\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Numerical Signal (Joining Player) in Lua\nDESCRIPTION: This code calculates the numerical signal based on the difference between a server attribute and the joining player attribute. Similar to the first example, it uses the absolute difference, then applies `math.min` and a `max_relevant_difference` to constrain the score. This aims to minimize the difference between attributes.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/matchmaking/attributes-and-signals.md#_snippet_19\n\nLANGUAGE: lua\nCODE:\n```\nlocal diff = math.abs(server_{attribute_name} - joining_player_{attribute_name})\nlocal score = 1 - math.min(diff / max_relevant_difference, 1)\nreturn score\n```\n\n----------------------------------------\n\nTITLE: Accessing DataModel with any Cast in Luau\nDESCRIPTION: This snippet shows one approach to accessing potentially unknown properties on a Luau `Instance` when traversing the DataModel hierarchy, particularly for objects created at runtime. It uses a direct cast to `any` on the `vendor` instance to bypass strict type checking for the property access, followed by a cast back to the expected type (`BasePart`) on the result.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/plant-reference-project.md#_snippet_5\n\nLANGUAGE: Luau\nCODE:\n```\nlocal function enableVendor(vendor: Model)\n\tlocal zonePart: BasePart = (vendor :: any).ZonePart\nend\n```\n\n----------------------------------------\n\nTITLE: Using Variable Arguments in Luau Functions\nDESCRIPTION: This snippet shows how to define a Luau function that can accept any number of arguments using the `...` (vararg) syntax. Inside the function, `...` behaves like a tuple containing the passed arguments.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/luau-csharp-comparison.md#_snippet_8\n\nLANGUAGE: Luau\nCODE:\n```\n-- Variable argument number\nlocal function variableArguments(...)\n\tprint(...)\nend\n```\n\n----------------------------------------\n\nTITLE: Including Launch Data and Analytics in Roblox User Notifications using Lua\nDESCRIPTION: This snippet demonstrates how to create and send a user notification containing both launch data and analytics data in the payload. It requires the OpenCloud.V2.UserNotification module accessible via ServerScriptService, and uses the recipient's UserId. The notification payload must include a 'messageId' representing a notification template, a 'type' (currently only \"MOMENT\"), and nested 'launchData' and 'analyticsData' tables for additional context. The snippet shows checking the result status code and printing error details if the request fails. This allows personalized notification experiences and tracking notification categories.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/production/promotion/experience-notifications.md#_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\nlocal ServerScriptService = game:GetService(\"ServerScriptService\")\n\nlocal OCUserNotification = require(ServerScriptService.OpenCloud.V2.UserNotification)\nlocal recipientPlayerID = 505306092\n\n-- In the payload, \"messageId\" is the value of the notification asset ID\nlocal userNotification = {\n\tpayload = {\n\t\tmessageId = \"5dd7024b-68e3-ac4d-8232-4217f86ca244\",\n\t\ttype = \"MOMENT\",\n\t\tjoinExperience = {\n\t\t\tlaunchData = \"Test_Launch_Data\"\n\t\t},\n\t\tanalyticsData = {\n\t\t\tcategory = \"Test_Analytics_Category\"\n\t\t}\n\t}\n}\n\nlocal result = OCUserNotification.createUserNotification(recipientPlayerID, userNotification)\n\nif result.statusCode ~= 200 then\n\tprint(result.statusCode)\n\tprint(result.error.code)\n\tprint(result.error.message)\nend\n```\n\n----------------------------------------\n\nTITLE: Closing SelfieMode Programmatically in LocalScript - Lua\nDESCRIPTION: Details how to close the SelfieMode GUI via script, rather than user interface, using the closeSelfieMode function. Requires SelfieMode to be loaded from ReplicatedStorage and run in a LocalScript. No input arguments are required; this disables the selfie mode overlay for the player.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/selfie-mode.md#_snippet_6\n\nLANGUAGE: Lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal SelfieMode = require(ReplicatedStorage:WaitForChild(\"SelfieMode\"))\n\nSelfieMode.closeSelfieMode()\n```\n\n----------------------------------------\n\nTITLE: Implementing Game States for Mission Flow\nDESCRIPTION: Game states control the flow of the experience by defining when players can interact with seals (corrupted and restored) and place them in the foyer. These states govern the progression of the game's narrative.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/the-mystery-of-duvall-drive/main-design-requirements.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: ReceiptHandler: Roblox Developer Product Processing Singleton\nDESCRIPTION: Singleton class responsible for handling in-game developer product transactions, ensuring purchase verification and processing. It manages receipt validation, event handling for successful transactions, and integrates with Roblox's economy system to facilitate secure purchase flows.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud-services/data-stores/player-data-purchasing.md#_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\n-- Placeholder for ReceiptHandler singleton implementation code (not provided in text).\n```\n\n----------------------------------------\n\nTITLE: Setting TextureMode to Static to Maintain Arrow Size\nDESCRIPTION: This snippet describes how to set the TextureMode property of the beam to Static, which repeats the texture without stretching, ensuring the arrow pattern remains at the original size and is properly aligned.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/build-it-play-it-mansion-of-wonder/connect-the-beam.md#_snippet_4\n\nLANGUAGE: None\nCODE:\n```\nIn the beam's properties, set TextureMode to Static.\nThis makes the arrow texture tile repeatedly at its original size instead of stretching.\n```\n\n----------------------------------------\n\nTITLE: Basic Luau for Loop Syntax Summary\nDESCRIPTION: Provides a concise summary example of a standard Luau 'for' loop. It iterates from a starting value of 0 up to an end value of 10, incrementing by 1 each time, and prints the current value of 'count' in each iteration.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-4/intro-to-for-loops.md#_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nfor count = 0, 10, 1 do\n\tprint(count)\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Friends Locator and Connecting to Click Events\nDESCRIPTION: This LocalScript configures the FriendsLocator module with custom options and connects to the clicked event. It disables the default teleport behavior to implement custom handling when a player clicks on a friend's locator icon.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/friends-locator.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal RunService = game:GetService(\"RunService\")\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal FriendsLocator = require(ReplicatedStorage:WaitForChild(\"FriendsLocator\"))\n\nFriendsLocator.configure({\n\tshowAllPlayers = RunService:IsStudio(), -- Allows for debugging in Studio\n\tteleportToFriend = false, -- Prevent teleport on icon click/tap\n})\n\nFriendsLocator.clicked:Connect(function(player, playerCFrame)\n\tprint(\"You clicked on locator icon for\", player.DisplayName)\nend)\n```\n\n----------------------------------------\n\nTITLE: Setting timerActive Flag When Timer Starts in Roblox - Lua\nDESCRIPTION: Sets timerActive to true at the beginning of startTimer, preventing new activations from interfering with the current countdown. Necessary for correct logic flow when bridging multiple player interactions. Input/output: modifies script-level boolean.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-4/create-a-timed-bridge.md#_snippet_11\n\nLANGUAGE: Lua\nCODE:\n```\nlocal function startTimer()\n   timerActive = true\n   bridge.Transparency = 0\n   bridge.CanCollide = true\n```\n\n----------------------------------------\n\nTITLE: Initiating Roblox Open Cloud Get Instance API Call - Python\nDESCRIPTION: This Python snippet demonstrates how to initiate the request to retrieve a specific Roblox engine instance by its ID using the Open Cloud API. It sends a GET request and receives an initial Operation object which needs to be polled to get the full instance details.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/guides/instance.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport requests\n\n# Generate at https://create.roblox.com/dashboard/credentials\napiKey = \"<API_KEY>\"\n# Find at https://create.roblox.com/dashboard/creations in the overflow menu of an experience tile\nuniverseId = \"<UNIVERSE_ID>\"\n# Find Start Place ID at https://create.roblox.com/dashboard/creations in the overflow menu of an experience tile\nplaceId = \"<PLACE_ID>\"\n# The default ID for the root of any place's data model\ninstanceId = \"<INSTANCE_ID>\"\n\n# Request header\napiKeyHeaderKey = \"x-api-key\"\n# Endpoint URL for Get Instance method\ngetInstanceUrl = \"https://apis.roblox.com/cloud/v2/universes/%s/places/%s/instances/%s\"\n\ndef GetInstance():\n  url = getInstanceUrl % (universeId, placeId, instanceId)\n  headerData = {apiKeyHeaderKey: apiKey}\n  return requests.get(url, headers = headerData)\n\nresponse = GetInstance()\nprint(\"Response:\", response.status_code, response.text)\n\n# Parse the Operation object's path from response. See the Polling for Results section for more information.\noperationPath = response.json()['path']\n```\n\n----------------------------------------\n\nTITLE: Accessing RightCheekPuff Control in Roblox\nDESCRIPTION: Reference to the RightCheekPuff control which puffs up the character's right cheek, useful for blowing or holding air expressions.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/characters/facial-animation/facs-poses-reference.md#_snippet_29\n\nLANGUAGE: Roblox\nCODE:\n```\nClass.FaceControls.RightCheekPuff\n```\n\n----------------------------------------\n\nTITLE: Custom Catalog Button - Lua\nDESCRIPTION: This code snippet demonstrates how to remove the default catalog button and connect a custom button to open the merch booth. It requires the MerchBooth module from ReplicatedStorage. It connects the Activated event of a button to the openMerchBooth function.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/merch-booth.md#_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal MerchBooth = require(ReplicatedStorage:WaitForChild(\"MerchBooth\"))\n\n-- Remove the default catalog button\nMerchBooth.toggleCatalogButton(false)\n\n-- Connect the custom button\nscript.Parent.Activated:Connect(function()\n\tMerchBooth.openMerchBooth()\nend)\n```\n\n----------------------------------------\n\nTITLE: Asking a Question with String Input in Roblox Lua\nDESCRIPTION: Uses 'storyMaker:GetInput()' with a string argument to prompt players with a question. The enquoted string inside 'GetInput()' appears as a dialog or message for the player to respond to, allowing for interactive storytelling.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/build-it-play-it-story-games/coding-a-question.md#_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\n-- GLOBAL VARIABLES\nlocal storyMaker = require(script:WaitForChild(\"StoryMaker\"))\n\n-- Code controlling the game\nlocal playing = true\n\nwhile playing do\n  storyMaker:Reset()\n\n  -- Code story between the dashes\n  -- =============================================\n     local name1 = storyMaker:GetInput(\"What is your favorite name?\")\n\n  -- =============================================\n\n  -- Add the story variable between the parenthesis below\n  storyMaker:Write()\nend\n```\n\n----------------------------------------\n\nTITLE: Creating a Countdown For Loop for the Timer in Roblox - Lua\nDESCRIPTION: Implements a for loop to count down from timerDuration to 0, representing seconds left for the bridge to remain walkable. No actual timing or update logic yet. Inputs: timerDuration. Outputs: iteration variable for future UI display.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-4/create-a-timed-bridge.md#_snippet_6\n\nLANGUAGE: Lua\nCODE:\n```\nlocal function startTimer()\n   -- Make the bridge visible and walkable\n   bridge.Transparency = 0\n   bridge.CanCollide = true\n\n   for count = timerDuration, 0, -1 do\n\n   end\n\nend\n```\n\n----------------------------------------\n\nTITLE: Handling General Instance Naming/Type Errors\nDESCRIPTION: A generic error message indicating detected issues (`%s`). Specific problems could include an invalid instance name (`%s`) or an instance (`%s`) being of a disallowed type (`%s`).\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/validation-errors.md#_snippet_19\n\nLANGUAGE: Text\nCODE:\n```\nDetected the following error(s): `%s`\n`%s` has an invalid name\n`%s` is of type `%s` which is not allowed\n```\n\n----------------------------------------\n\nTITLE: Defining asset information sections in JavaScript\nDESCRIPTION: Defines a constant array 'sections' exporting detailed metadata about Roblox assets, structured for use in React components. Each section includes descriptions, buttons, and nested content representing educational topics on asset creation, reuse, and publishing. Essential for dynamically rendering documentation content, this structure supports images, video links, and navigation links to related pages.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/assets.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const sections = [\n  {\n    description: \"Assets are anything you publish to the Roblox cloud, like 3D models with scripts, multimedia files, Studio plugins, and much more. You can reuse assets across all of your creations and share them with the community.\",\n    buttons: [\n      { text: \"Learn more about assets\", href: \"./projects/assets\" },\n    ],\n    content: [\n      {\n        title: \"Create in Studio, other 3P tools, or experiences\",\n        description: \"Studio provides drag and drop tools and programmatic access to building and modeling with engine primitives, such as parts and constraints. You can also import standard types of assets such as .fbx, .obj, .gLTF, and more into Studio for import. Lastly, you can allow users to create assets directly in your experiences and save it to their own accounts.\",\n        image: \"/assets/getting-started/platform-overview/Everything-You-Need.png\",\n        links: [\n          { text: \"Studio\", href: \"./art/overview-studio\" },\n          { text: \"Third-party\", href: \"./art/overview-dcc\" },\n          { text: \"In-experience\", href: \"./projects/assets/in-experience-asset-creation\" }\n        ]\n      },\n      {\n        title: \"Reuse and update with packages\",\n        description: \"Packages are reusable sets of assets that can contain models, scripts, multimedia files, and more. They let you bundle, share, maintain, and update them across everywhere they're used in your projects, automatically.\",\n        video: \"https://www.youtube-nocookie.com/embed/AzKZy2BqIh8?si=psaB0UlA8UvaT8qv\",\n        links: [\n          { text: \"Learn more\", href: \"./projects/assets/packages\" }\n        ]\n      },\n      {\n        title: \"Publish with privacy and moderation included \",\n        description: \"You can create assets for exclusive use in your projects or share them with the community. Our moderation policies protect your creations from unapproved usage and our users from assets that violate Roblox policies.\",\n        image: \"./assets/landing/assets.png\",\n        links: [\n          { text: \"Privacy\", href: \"./projects/assets/privacy\" },\n          { text: \"Moderation\", href: \"./projects/assets#asset-moderation\" },\n          { text: \"Manage and publish\", href: \"/projects/assets/manager\" }\n        ]\n      }\n    ]\n  }\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Settings in Roblox with Lua\nDESCRIPTION: This code snippet demonstrates how to configure server-side settings for the ScavengerHunt module in Roblox using Lua. It overrides the default configuration options by passing a table with key-value pairs to the `configureServer` function. The `tokenTag` key is set to \"GreenGem\".\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/scavenger-hunt.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal ScavengerHunt = require(ReplicatedStorage:WaitForChild(\"ScavengerHunt\"))\n\nScavengerHunt.configureServer({\n\ttokenTag = \"GreenGem\",\n})\n```\n\n----------------------------------------\n\nTITLE: Querying Object Pivot with GetPivot() in Roblox Lua\nDESCRIPTION: Demonstrates how to use the Class.PVInstance:GetPivot() method to obtain the current world location of an object's pivot as a Datatype.CFrame. This function works for both individual parts and models, returning a coordinate frame representing the pivot point regardless of object type. No additional dependencies beyond Roblox's standard API are required. The input is a PVInstance object, and the output is a CFrame representing the pivot location in 3D space.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/studio/pivot-tools.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\n-- Example: Retrieve an object's pivot CFrame\nlocal pivotCFrame = someInstance:GetPivot()\nprint(\"Pivot position:\", pivotCFrame.p)\n```\n\n----------------------------------------\n\nTITLE: Playing a Looped Sound in Lua\nDESCRIPTION: This basic Lua script shows how to create a Sound object, assign a SoundId, set it to loop indefinitely (`Looped = true`), add it to the Workspace, and then start playback using the `Play()` method.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/sound/objects.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal sound = Instance.new(\"Sound\")\nsound.SoundId = \"rbxassetid://9120386436\"\nsound.Looped = true\nsound.Parent = Workspace\nsound:Play()\n```\n\n----------------------------------------\n\nTITLE: Configuring ColorCorrection Post-Processing Effect\nDESCRIPTION: Adjusts the ColorCorrection effect properties (Brightness, Contrast, Saturation, TintColor) parented to the Lighting service to fine-tune the final visual look, increasing contrast, desaturating colors, and applying a specific tint. This configuration is applied via the Roblox Studio Properties window.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/vfx/create-volcanoes.md#_snippet_5\n\nLANGUAGE: Configuration\nCODE:\n```\nBrightness = 0.017\nContrast = 0.25\nSaturation = -0.15\nTintColor = 255, 214, 143\n```\n\n----------------------------------------\n\nTITLE: Configuring Sun Ray Effects in Roblox Lighting\nDESCRIPTION: Modifies the visual intensity and spread of sun rays using the 'SunRays' object under the Lighting service. Sets the 'Intensity' and 'Spread' properties to amplify the effect, making sun rays more prominent and dynamic as they shine through openings like windows.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/lighting/enhance-indoor-environments.md#_snippet_3\n\nLANGUAGE: Roblox Properties\nCODE:\n```\nIntensity = 0.023\nSpread = 0.266\n```\n\n----------------------------------------\n\nTITLE: Creating Button Navigation Link in JSX\nDESCRIPTION: Demonstrates creating a navigation link (<a>) styled as a Material UI Button. The link includes properties for the button's appearance (variant, color, size) and inline styles for positioning. Useful for creating prominent calls-to-action linking to external resources. Requires Material UI.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/index.md#_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<a underline=\"none\" href=\"https://devforum.roblox.com/t/custom-skyboxes-101/2849003\">\n<Button variant=\"contained\" color=\"secondary\" size='large'\nstyle={{marginRight:8, alignSelf: 'flex-start'}}>Learn more</Button>\n</a>\n```\n\n----------------------------------------\n\nTITLE: Requiring ModuleScript Example (Luau)\nDESCRIPTION: Illustrates the basic syntax for using the `require()` function in Luau to load a ModuleScript. It retrieves the ReplicatedStorage service and then requires the ModuleScript named \"PickupManager\" located within it, storing the returned value in a local variable.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/scripting/scripts.md#_snippet_3\n\nLANGUAGE: Luau\nCODE:\n```\n-- Script in ServerScriptService\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\n-- Get the return value for the ModuleScript named \"PickupManager\"\nlocal PickupManager = require(ReplicatedStorage:WaitForChild(\"PickupManager\"))\n\n```\n\n----------------------------------------\n\nTITLE: Using AllScopes Property with Roblox Data Store\nDESCRIPTION: This snippet demonstrates how to use the AllScopes property with DataStoreOptions to access keys from all scopes in a data store. When AllScopes is enabled, an empty string must be passed as the scope parameter to GetDataStore.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud-services/data-stores/versioning-listing-and-caching.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal DataStoreService = game:GetService(\"DataStoreService\")\n\nlocal options = Instance.new(\"DataStoreOptions\")\noptions.AllScopes = true\n\nlocal ds = DataStoreService:GetDataStore(\"DS1\", \"\", options)\n```\n\n----------------------------------------\n\nTITLE: Using Boolean Flag to Prevent Repeated Timer Starts in Roblox - Lua\nDESCRIPTION: Introduces a boolean variable timerActive to track whether the timer is running, preventing the timer from being restarted by repeated button presses. Must be initialized to false at script start. Used in conjunction with the if condition in buttonPressed.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-4/create-a-timed-bridge.md#_snippet_9\n\nLANGUAGE: Lua\nCODE:\n```\nlocal timerDuration = 5\nlocal timerActive = false\n\nlocal function startTimer()\n\n```\n\n----------------------------------------\n\nTITLE: Type Annotation for Roblox Instances and Enums in Luau Lua\nDESCRIPTION: Shows how to annotate Roblox-specific classes and enums with their corresponding types. It defines variables 'somePart', 'brickColor', and 'material' with types 'Part', 'BrickColor', and 'Enum.Material'. This requires Roblox API types to be recognized by the typechecker.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/type-checking.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal somePart: Part = Instance.new(\"Part\")\nlocal brickColor: BrickColor = somePart.BrickColor\nlocal material: Enum.Material = somePart.Material\n```\n\n----------------------------------------\n\nTITLE: Setting bundle pricing with dev product ID in Lua\nDESCRIPTION: Configures bundle pricing to use a marketplace dev product by specifying a devProductId. The package will fetch the bundle's price and icon from this developer product during transactions. This approach links the bundle to a specific marketplace asset.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/feature-packages/bundles.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\n    -- If you want to use a dev product, you must provide a unique devProductId, only used by one bundle.\n    -- We will fetch bundle price and icon from the developer product\n    pricing = {\n        priceType = CurrencyTypes.PriceType.Marketplace,\n        devProductId = 1795621566,\n    },\n```\n\n----------------------------------------\n\nTITLE: Disabling the Emote Menu GUI in Lua\nDESCRIPTION: This Lua script disables the default Roblox emotes menu UI element using StarterGui:SetCoreGuiEnabled(). It retrieves the StarterGui service and sets the EmotesMenu CoreGuiType to disabled (false). Note that this does not prevent players from triggering emotes using chat commands.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/characters/emotes.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal StarterGui = game:GetService(\"StarterGui\")\nStarterGui:SetCoreGuiEnabled(Enum.CoreGuiType.EmotesMenu, false)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Logical 'or' Operator in Luau\nDESCRIPTION: Examples showing how the 'or' operator evaluates expressions and returns one of its arguments. If the first argument evaluates to true, it returns the first argument; otherwise, it returns the second argument.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/operators.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal y = x or 1\nprint(y) -- 1 because x doesn't exist and is therefore nil\n\nlocal d = false\nlocal e = d or 1\nprint(e) -- 1 because d is false\n\nprint(4 or 5) -- 4\nprint(nil or 12) -- 12\nprint(false or 12) -- 12\nprint(false or true) -- true\nprint(false or false) -- false\nprint(true or false) -- true\nprint(true or true) -- true\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video in HTML\nDESCRIPTION: This code embeds a YouTube video into the webpage using an iframe. The iframe allows for the display of the video and specifies its source URL, dimensions, and various playback options like autoplay and fullscreen.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/avatar/index.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div\nclassName=\"container\"\nstyle=\"{ position: \\\"relative\\\", paddingBottom: \\\"56.25%\\\", height: 0, marginBottom: 12 }\" >\n<iframe\nsrc=\"https://www.youtube-nocookie.com/embed/EUDSIUmLjxA\"\ntitle=\"YouTube video player\"\nframeBorder=\"0\"\nallow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\nallowFullScreen\nstyle=\"{ position: \\\"absolute\\\", top: 0, left: 0, width: \\\"100%\\\", height: \\\"100%\\\" }\" ></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining Statistics byline in JavaScript\nDESCRIPTION: This snippet defines a constant variable `statsByline` using template literals in Javascript. This constant contains a string that serves as a disclaimer for the presented statistics and indicates when they were last updated. The output is a string that includes an asterisk symbol.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/platform.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const statsByline = \"* Figures are as of Q4 2024\";\n```\n\n----------------------------------------\n\nTITLE: Initializing Player Points with the Players Service - Lua\nDESCRIPTION: Demonstrates setup for a script in ServerScriptService, getting the Players service and creating an empty playerPoints dictionary. Used as a foundation for tracking stats tied to players joining the game. Relies on the Roblox API and game service contexts.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-5/intro-to-dictionaries.md#_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nlocal playerPoints = {\n\n}\n```\n\n----------------------------------------\n\nTITLE: Representing Custom Meshes in Roblox Studio\nDESCRIPTION: In Roblox Studio, individual custom meshes are represented by the `MeshPart` class. Complex assets composed of multiple meshes, like characters, are typically grouped within a `Model` object.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/modeling/index.md#_snippet_0\n\nLANGUAGE: Roblox API\nCODE:\n```\nClass.MeshPart\n```\n\nLANGUAGE: Roblox API\nCODE:\n```\nClass.Model\n```\n\n----------------------------------------\n\nTITLE: Adding Modifiers to SliderFrame in Roblox Studio\nDESCRIPTION: Adds UI modifiers to the 'SliderFrame' to style its appearance. A UICorner creates a pill shape, a UISizeConstraint limits its maximum height, and a UIStroke adds a semi-transparent black outline.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/ui/interactive-ui.md#_snippet_1\n\nLANGUAGE: Roblox Studio Configuration\nCODE:\n```\nTarget: EffectsVolumeSlider > SliderFrame (Class.Frame)\n\nAdd Children:\n1. Class.UICorner\n   - CornerRadius = UDim.new(0.5, 0) -- {0.5, 0}\n2. Class.UISizeConstraint\n   - MaxSize = Vector2.new(math.huge, 30) -- {inf, 30}\n3. Class.UIStroke\n   - Color = Color3.fromRGB(0, 0, 0)\n   - Thickness = 3\n   - Transparency = 0.25\n```\n\n----------------------------------------\n\nTITLE: Creating an Interval with Event Sequencer\nDESCRIPTION: This code demonstrates how to create an interval that executes a custom callback function over a specified duration, synced to audio.  It prints audio time position and sound intensity ratio.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/event-sequencer.md#_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nSchema.OnRun = function()\n\tprint(\"OnRun (Client)\")\n\n\tlocal MainAudio = Schema:audio({\n\t\tStartTime = 1,\n\t\tSoundId = \"rbxassetid://1838673350\",\n\t})\n\n\tlocal ClientTimerUpdate = Schema:interval({\n\t\tFrequency = 1,\n\t\tSyncToAudio = {\n\t\t\tStartAtAudioTime = 2.5,\n\t\t\tEndAtAudioTime = 10,\n\t\t\tAudio = MainAudio\n\t\t},\n\t\tOnInterval = function(self)\n\t\t\tprint(MainAudio.Sound.TimePosition, MainAudio.CurrentSoundIntensityRatio)\n\t\tend,\n\t})\nend\n```\n\n----------------------------------------\n\nTITLE: Calculating Friends Signal Score (Categorical)\nDESCRIPTION: Calculates a categorical signal score for the Friends signal, based on whether there is a preferred player (friend or same IP address) in the server. Returns 1 if there is a preferred player, 0 otherwise.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/matchmaking/attributes-and-signals.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nfriendsSignalScore = hasFriends ? 1 : 0\n```\n\n----------------------------------------\n\nTITLE: Calling Lua Variadic Functions with Arrays via unpack\nDESCRIPTION: Shows how to pass the contents of a table array as arguments to a variadic function using unpack. Requires the global unpack function to be available (in modern Lua, table.unpack may be used). Parameter squares is a table of numbers which is expanded into multiple arguments for print(), resulting in the individual values being printed instead of the table. This technique is useful when you want to supply list elements as separate arguments for functions that accept variable-length parameter lists.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/functions.md#_snippet_12\n\nLANGUAGE: lua\nCODE:\n```\nlocal squares = {1, 4, 9, 16, 25}\nprint(\"The first 5 square numbers are:\", unpack(squares))\n-- The first 5 square numbers are 1 4 9 16 25\n```\n\n----------------------------------------\n\nTITLE: Calling fireWeapon Function in Lua\nDESCRIPTION: This snippet calls the `fireWeapon` function within the `toolActivated` function, ensuring that the laser is fired each time the tool is activated. It requires the `fireWeapon` function to be defined.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/scripting/intermediate-scripting/hit-detection-with-lasers.md#_snippet_14\n\nLANGUAGE: lua\nCODE:\n```\nlocal function toolActivated()\n\ttool.Handle.Activate:Play()\n\tfireWeapon()\nend\n```\n\n----------------------------------------\n\nTITLE: Connecting PhotoBooth Events Lua\nDESCRIPTION: This Lua code demonstrates connecting to events fired by the PhotoBooth module.  It retrieves the PhotoBooth module from ReplicatedStorage and then connects to the `countdownStarted`, `printoutShown`, and `promptShown` events using the `:Connect()` method. Each event triggers a `print()` statement to indicate when the event fires. This allows the developer to extend the functionality or react to the photo-taking process.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/photo-booth.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal PhotoBooth = require(ReplicatedStorage:WaitForChild(\"PhotoBooth\"))\n\nPhotoBooth.countdownStarted:Connect(function()\n\tprint(\"The countdown has started\")\nend)\n\nPhotoBooth.printoutShown:Connect(function()\n\tprint(\"The printout is showing\")\nend)\n\nPhotoBooth.promptShown:Connect(function()\n\tprint(\"The camera prompt is showing\")\nend)\n```\n\n----------------------------------------\n\nTITLE: Connecting to Locked Emote Activated Event - EmoteBar - Lua\nDESCRIPTION: Demonstrates how to listen for the `lockedEmoteActivated` event, which fires when a client attempts to activate an emote that is currently locked. The callback function receives the locked emote object and prints the local player's name and the emote's name. This event can only be connected in a LocalScript.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/emote-bar.md#_snippet_12\n\nLANGUAGE: Lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal Players = game:GetService(\"Players\")\n\nlocal EmoteBar = require(ReplicatedStorage:WaitForChild(\"EmoteBar\"))\n\nEmoteBar.lockedEmoteActivated:Connect(function(emote)\n\tprint(Players.LocalPlayer, \"clicked\", emote.name)\nend)\n```\n\n----------------------------------------\n\nTITLE: Creating an Audio Asset with Open Cloud API in Bash\nDESCRIPTION: Example request to create an audio asset using the Open Cloud API. The request includes the asset type, display name, description, creator information, and file path with content type.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/audio/assets.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location 'https://apis.roblox.com/assets/v1/assets' \\\n--header 'x-api-key: ${ApiKey}' \\\n--form 'request=\"{\n  \\\"assetType\\\": \\\"Audio\\\",\n  \\\"displayName\\\": \\\"Name\\\",\n  \\\"description\\\": \\\"This is a description\\\",\n  \\\"creationContext\\\": {\n    \\\"creator\\\": {\n      \\\"userId\\\": \\\"${userId}\\\" # Use groupId for creating a group asset\n    }\n  }\n}\"' \\\n--form 'fileContent=@\"/filepath/audio.mp3\";type=audio/mpeg'\n```\n\n----------------------------------------\n\nTITLE: Displaying the story to players in Roblox using storyMaker:Write()\nDESCRIPTION: Uses the 'storyMaker:Write()' function to output the constructed story string to the game screen. Passes the 'story' variable as an argument, causing the full, concatenated story to appear for players. This snippet is essential for visual storytelling in Roblox scripts.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/build-it-play-it-story-games/code-the-story.md#_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\n-- Add the story variable between the parenthesis below\nstoryMaker:Write(story)\n```\n\n----------------------------------------\n\nTITLE: Rendering Marketplace Picks Creator Program Card Using Material-UI in React (JavaScript/JSX)\nDESCRIPTION: This snippet describes how to create a 'Today's Picks on Marketplace' card using Material-UI with React. It leverages components including Card, Chip, Typography, CardContent, CardActions, Button, and Grid, all requiring '@mui/material' or '@material-ui/core' and React. The card presents a label, status, detailed description about marketplace picks, and a navigational button. The pattern enables the display of curated items and can be extended or replicated for diverse programs with minor content changes.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/creator-programs/index.md#_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n<Grid item container wrap=\"nowrap\" direction=\"column\">\n  <Card variant=\"filled\" style={{height: \"100%\"}}>\n    <CardContent>\n      <h4>Today's Picks on Marketplace</h4>\n      <figure>\n        <Chip\n          color=\"success\"\n          label=\"Status: Open\"\n          size=\"medium\"\n          variant=\"filled\"\n        />\n      </figure>\n      <Typography variant='body1'>Daily curation of Marketplace items to help users bring their unique selves to Roblox</Typography>\n    </CardContent>\n    <CardActions>\n      <Button href=\"/creator-programs/todays-picks-marketplace\" variant=\"contained\" color=\"secondary\" size=\"large\">Learn More</Button>\n    </CardActions>\n  </Card>\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Implementing item sell trigger on player touch in Roblox Lua\nDESCRIPTION: Within the `onTouch()` handler, after confirming the presence of player data, the script calls `sellItems()` passing references to `playerItems` and `playerGold`. This triggers the transaction every time a player touches the platform, updating their gold and resetting their item count. Proper if conditions prevent errors due to missing data.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/adventure-game-series/selling-items.md#_snippet_4\n\nLANGUAGE: Lua\nCODE:\n```\nif player and playerStats then\n\tlocal playerItems = playerStats:FindFirstChild(\"Items\")\n\tlocal playerGold = playerStats:FindFirstChild(\"Gold\")\n\n\tif playerItems and playerGold then\n\t\tsellItems(playerItems, playerGold)\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Polling for Operation Results (cURL)\nDESCRIPTION: This cURL command retrieves the status of a long-running operation. It sends a GET request to the Roblox Cloud API, using the operation path and including the API key in the header.  It waits for the original operation to complete or time out.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/guides/instance.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncurl --include --location --request GET \"https://apis.roblox.com/cloud/v2/universes/<universeId>/places/<placeId>/instances/<instanceId>/operations/<operationId>\" --header \"x-api-key:<api key>\"\n```\n\n----------------------------------------\n\nTITLE: Distributing and Monetizing Roblox Plugins via Creator Store\nDESCRIPTION: Guidelines for distributing plugins through Roblox's Creator Store, including setting prices and publishing assets. Provides steps to publish a plugin script, upload images, fill in metadata, and configure distribution options, enabling creators to monetize or share their plugins publicly or privately.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/studio/plugins.md#_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: Waiting for Humanoid Object in Roblox Lua\nDESCRIPTION: Defines the initial structure of the `onCharacterAdded` function. It uses `character:WaitForChild(\"Humanoid\")` to safely retrieve the Humanoid object associated with the player's character model, ensuring the object exists before proceeding. Requires the `Players` service to be obtained.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/scripting/basic-scripting/score-points.md#_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nlocal function onCharacterAdded(character, player)\n  local humanoid = character:WaitForChild(\"Humanoid\")\nend\n```\n\n----------------------------------------\n\nTITLE: Clearing All Art from Canvases Using SurfaceArt Module (Lua)\nDESCRIPTION: This snippet illustrates how to remove all art from all canvases in the game environment by invoking the `removeAllArt` function of the SurfaceArt module. It requires requiring the module from ReplicatedStorage and executing the function within a server-side script to reset the visual state.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/surface-art.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal SurfaceArt = require(ReplicatedStorage:WaitForChild(\"SurfaceArt\"))\n\nSurfaceArt.removeAllArt()\n```\n\n----------------------------------------\n\nTITLE: Parenting Instance to Parameter in Luau\nDESCRIPTION: Adds the final core logic to the `sortGarbage` function by setting the `Parent` property of the created `sparkle` emitter to the object passed in as the second parameter, `recyclable`. This attaches the sparkle effect to the 'recyclable' object.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-2/multiple-parameters-and-arguments.md#_snippet_4\n\nLANGUAGE: Luau\nCODE:\n```\nlocal function sortGarbage(trash,recyclable)\n       local sparkle = Instance.new(\"ParticleEmitter\")\n\n       -- Destroy the trash and make recyclables shiny\n       trash:Destroy()\n       sparkle.Parent = recyclable\n   end\n\n   sortGarbage()\n```\n\n----------------------------------------\n\nTITLE: Deactivating a SelfieMode Action via Script in LocalScript - Lua\nDESCRIPTION: Displays how to deactivate a specific selfie action by calling deactivateAction with the appropriate enum. Must be run from a LocalScript with SelfieMode already initialized. Only works for defined actions and removes the effect if enabled.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/selfie-mode.md#_snippet_11\n\nLANGUAGE: Lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal SelfieMode = require(ReplicatedStorage:WaitForChild(\"SelfieMode\"))\n\n-- Deactivate \"Filter\" action\nSelfieMode.deactivateAction(SelfieMode.Action.Filter)\n```\n\n----------------------------------------\n\nTITLE: Configuring Skylight Properties in Roblox\nDESCRIPTION: This snippet outlines the properties that should be configured for a skylight block part within Roblox Studio.  It specifies setting the Color, Material, and Transparency properties of a block part to create glass for the skylight. It is essential for achieving the correct visual effect of the skylight's glass.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/environmental-art/construct-your-world.md#_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: Generic For Loop with table in Luau\nDESCRIPTION: This example demonstrates generalized iteration using the `in` keyword on a table, which allows iterating directly over the values in the table without explicitly using `ipairs` or `pairs`.  The loop prints the index and value for each element in the table.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/control-structures.md#_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nfor i, v in {1, 2, 3, 4, 5} do\n\tprint(i, v)\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring SeaStackMesh in Level_5a - Roblox Properties Table\nDESCRIPTION: Specifies the Size, CFrame.Position, and CFrame.Orientation properties for three SeaStackMesh assets placed in the Level_5a model, as configured in the sample experience. These properties are set in the Roblox Studio Properties window.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/core/building/apply-polished-assets.md#_snippet_8\n\nLANGUAGE: Roblox Properties Table\nCODE:\n```\nSize\tCFrame.Position\tCFrame.Orientation\n`56, 62, 54`\t`264, 11, 55`\t`0, 150, 0`\n`50, 57, 50`\t`263, 50, 57`\t`0, 75, 0`\n`43, 57, 44`\t`262, 92, 57`\t`0, 176, 0`\n```\n\n----------------------------------------\n\nTITLE: Closing the MerchBooth UI - Lua\nDESCRIPTION: Shows how to close and hide the merch booth UI with closeMerchBooth. Intended for use in LocalScripts only and requires MerchBooth module setup. The operation does not require arguments nor does it return a value.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/merch-booth.md#_snippet_29\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal MerchBooth = require(ReplicatedStorage:WaitForChild(\"MerchBooth\"))\n\nMerchBooth.closeMerchBooth()\n\n```\n\n----------------------------------------\n\nTITLE: Discord Bot on_ready Event Handler - Python\nDESCRIPTION: This defines an asynchronous function that runs when the Discord bot is ready and connected to Discord. It prints a message to the console, indicating that the bot is listening for messages and displays the bot's user information.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/webhooks/automate-right-to-erasure.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n        @client.event\n        async def on_ready():\n            print(f\"{client.user} is listening to Right to Erasure messages\")\n```\n\n----------------------------------------\n\nTITLE: UI Tween - Size & Transparency (Lua)\nDESCRIPTION: This Lua code snippet demonstrates how to tween the Size and ImageTransparency properties of a UI element (ImageLabel) in Roblox. It initializes a UIAspectRatioConstraint to maintain the aspect ratio of the ImageLabel, then uses TweenService to animate the size and transparency to the target values. It depends on TweenService, Players service, and the existence of a PlayerGui, ScreenGui, and ImageLabel object. The AnchorPoint is set to the center of the ImageLabel.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/ui/animation.md#_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nlocal TweenService = game:GetService(\"TweenService\")\nlocal Players = game:GetService(\"Players\")\n\nlocal PlayerGui = Players.LocalPlayer:WaitForChild(\"PlayerGui\")\nlocal ScreenGui = PlayerGui:WaitForChild(\"ScreenGui\")\nlocal object = ScreenGui:WaitForChild(\"ImageLabel\")\n\nobject.AnchorPoint = Vector2.new(0.5, 0.5)\n\nlocal aspectRatioConstraint = Instance.new(\"UIAspectRatioConstraint\")\naspectRatioConstraint.Parent = object\n\nlocal targetSize = UDim2.new(0.4, 0, 0.4, 0)\nlocal targetTransparency = 0.8\n\nlocal tweenInfo = TweenInfo.new(2)\nlocal tween = TweenService:Create(object, tweenInfo, {Size = targetSize, ImageTransparency = targetTransparency})\n\ntween:Play()\n```\n\n----------------------------------------\n\nTITLE: Complete GameManager Script Implementation\nDESCRIPTION: The final GameManager script containing all required functionality including waiting for players, transitioning between game states, managing matches, and resetting between rounds.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/battle-royale-series/cleanup-and-reset.md#_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\n-- Services\nlocal ServerStorage = game:GetService(\"ServerStorage\")\nlocal Players = game:GetService(\"Players\")\n\n-- Module Scripts\nlocal moduleScripts = ServerStorage:WaitForChild(\"ModuleScripts\")\nlocal matchManager = require(moduleScripts:WaitForChild(\"MatchManager\"))\nlocal gameSettings = require(moduleScripts:WaitForChild(\"GameSettings\"))\nlocal displayManager = require(moduleScripts:WaitForChild(\"DisplayManager\"))\n\n-- Events\nlocal events = ServerStorage:WaitForChild(\"Events\")\nlocal matchEnd = events:WaitForChild(\"MatchEnd\")\n\nwhile true do\n\tdisplayManager.updateStatus(\"Waiting for Players\")\n\n\trepeat\n\t\ttask.wait(gameSettings.intermissionDuration)\n\tuntil #Players:GetPlayers() >= gameSettings.minimumPlayers\n\n\tdisplayManager.updateStatus(\"Get ready!\")\n\ttask.wait(gameSettings.transitionTime)\n\n\tmatchManager.prepareGame()\n\tlocal endState = matchEnd.Event:Wait()\n\n\tlocal endStatus = matchManager.getEndStatus(endState)\n\tdisplayManager.updateStatus(endStatus)\n\n\tmatchManager.cleanupMatch()\n\ttask.wait(gameSettings.transitionTime)\n\n\tmatchManager.resetMatch()\nend\n```\n\n----------------------------------------\n\nTITLE: Setting API Key Environment Variable in Bash (Python)\nDESCRIPTION: Shows how to set the API_KEY environment variable in bash for use with the Python script.  The Python script retrieves the API key from the environment variable.  The ellipsis `...` signifies that a real API key value is required.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/guides/usage-data-stores.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nexport API_KEY=... \\\npython update_inventory\n```\n\n----------------------------------------\n\nTITLE: Static Type Annotation for Variables in Luau Lua\nDESCRIPTION: Demonstrates how to statically annotate variables with explicit types using the ':' operator. It shows assigning a string type to 'foo' and a number type to 'x'. Requires Luau type checking enabled, helps the typechecker enforce variable types and prevent type mismatches.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/type-checking.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal foo: string = \"bar\"\nlocal x: number = 5\n```\n\n----------------------------------------\n\nTITLE: Correcting Invalid Character Pose Angle Error\nDESCRIPTION: This error flags that the character model (`%s`) is oriented at an angle (`%d` degrees) relative to the X,Y plane that exceeds the allowed deviation (`%d` degrees). Ensure the character is in a standard I-pose, A-pose, or T-pose.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/validation-errors.md#_snippet_29\n\nLANGUAGE: Text\nCODE:\n```\n`%s` is at a `%d` degree angle from the X,Y plane, it must be within `%d` degrees. Make sure the character is in I pose, A pose, or T pose.\n```\n\n----------------------------------------\n\nTITLE: Locking Emote on Client - EmoteBar - Lua\nDESCRIPTION: Demonstrates how to lock a specific emote, preventing the client user from activating it via the GUI. It calls the `lockEmote` function with the name of the emote (\"Applaud\") to disable it client-side. This function must be called from a LocalScript.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/emote-bar.md#_snippet_9\n\nLANGUAGE: Lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal EmoteBar = require(ReplicatedStorage:WaitForChild(\"EmoteBar\"))\n\nEmoteBar.lockEmote(\"Applaud\")\n```\n\n----------------------------------------\n\nTITLE: Setting Screen Orientation to Portrait - Lua\nDESCRIPTION: This code snippet demonstrates how to explicitly set the screen orientation to portrait mode within a Roblox experience using a LocalScript. It retrieves the PlayerGui service and sets its ScreenOrientation property to Enum.ScreenOrientation.Portrait after a brief delay.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/input/mobile.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\nlocal playerGUI = Players.LocalPlayer:WaitForChild(\"PlayerGui\")\n\ntask.wait(2)\n\nplayerGUI.ScreenOrientation = Enum.ScreenOrientation.Portrait\n```\n\n----------------------------------------\n\nTITLE: Setting Character Health to Zero in Luau\nDESCRIPTION: Completes the 'kill' function. Inside the 'if humanoid then' block, it sets the 'Health' property of the found 'humanoid' object to 0. This action causes the character associated with that Humanoid to die.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/scripting/basic-scripting/deadly-lava.md#_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal function kill(otherPart)\n    local partParent = otherPart.Parent\n    local humanoid = partParent:FindFirstChild(\"Humanoid\")\n    if humanoid then\n        humanoid.Health = 0\n    end\nend\n\nlava.Touched:Connect(kill)\n```\n\n----------------------------------------\n\nTITLE: Configuring Wall Asset Positions and Rotations in Roblox\nDESCRIPTION: This snippet shows the positional and rotational configuration of different wall assets such as WallLarge and DoorFrame within a Roblox environment. It demonstrates setting specific CFrame positions and orientations for accurate placement in the scene.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/environmental-art/construct-your-world.md#_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n`<td>`-85, 5, 25`</td>`\n<td>`0, -90, 0`</td>`\n```\n\nLANGUAGE: HTML\nCODE:\n```\n`<td>`-70, 5, 25`</td>`\n<td>`0, -90, 0`</td>`\n```\n\nLANGUAGE: HTML\nCODE:\n```\n`<td>`-50, 5, 25`</td>`\n<td>`0, -90, 0`</td>`\n```\n\nLANGUAGE: HTML\nCODE:\n```\n`<td>`-35, 5, 25`</td>`\n<td>`0, -90, 0`</td>`\n```\n\n----------------------------------------\n\nTITLE: Guide - Editing NPC Humanoid Properties via Properties Window\nDESCRIPTION: For existing NPCs placed in the game world, name and health display properties can be directly edited through the Roblox Studio Properties window on the Humanoid object, allowing visual customization without scripting.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/characters/name-health-display.md#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Enabling Automatic Skinning Transfer with Override in Roblox\nDESCRIPTION: Setting AutoSkin to `EnabledOverride` enables the automatic skinning transfer. If the accessory already has existing skinning information, this process will ignore and overwrite it with the newly generated data derived from the character's geometry and cages.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/accessories/automatic-skinning-transfer.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\n-- Assuming 'wrapLayer' is the WrapLayer instance of the accessory\nwrapLayer.AutoSkin = Enum.AutoSkin.EnabledOverride\n\n```\n\n----------------------------------------\n\nTITLE: Adding Reappearing Functionality with CanCollide Property in Lua\nDESCRIPTION: This snippet extends the fading platform behavior by disabling CanCollide after the platform fully fades, allowing players to fall through. After a 3-second wait, it re-enables CanCollide and resets Transparency to zero, effectively making the platform reappear. This provides a complete cycle of disappearance and reappearance triggered by touch.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/scripting/basic-scripting/fading-trap.md#_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nlocal platform = script.Parent\n\nlocal function fade()\n   for count = 1, 10 do\n      platform.Transparency = count / 10\n      task.wait(0.1)\n   end\n   platform.CanCollide = false\n   task.wait(3)\n   platform.CanCollide = true\n   platform.Transparency = 0\nend\n\nplatform.Touched:Connect(fade)\n```\n\n----------------------------------------\n\nTITLE: Defining Scale Stats in JavaScript\nDESCRIPTION: This JavaScript snippet defines a constant `scaleStats`. It is an array of objects, each containing a `header` and a `description` property. These properties represent key metrics and their descriptions.  The output is an array of objects containing the statistics for Roblox, such as daily active users and monthly unique payers.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/platform.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const scaleStats = [\n  { header: \"85.3M\", description: \"Daily active users\" },\n  { header: \"18.9M\", description: \"Monthly unique payers\" },\n  { header: \"18.7B\", description: \"Quarterly hours engaged\" },\n  { header: \"750M\", description: \"Yearly creator earnings\" },\n  { header: \"18.9M\", description: \"DevX\" },\n  { header: \"18.7B\", description: \"xyz\" },\n];\n```\n\n----------------------------------------\n\nTITLE: Refreshing Tokens using cURL (Roblox OAuth 2.0)\nDESCRIPTION: A cURL command example showing how to use a refresh token to obtain a new set of tokens via the `POST /oauth/v1/token` endpoint. It sends the `client_id`, `client_secret`, `grant_type` ('refresh_token'), and the `refresh_token` itself as URL-encoded form data.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/auth/oauth2-reference.md#_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\ncurl --location --request POST 'https://apis.roblox.com/oauth/v1/token' \\\n--header 'Content-Type: application/x-www-form-urlencoded' \\\n--data-urlencode 'grant_type=refresh_token' \\\n--data-urlencode 'refresh_token=Ujfstayclfdlbm...BGydlsnU' \\\n--data-urlencode 'client_id=840974200211308101' \\\n--data-urlencode 'client_secret=RBX-CR9...St12L'\n```\n\n----------------------------------------\n\nTITLE: Sample CFrame configuration for door assets in Roblox\nDESCRIPTION: Provides specific positional and orientation settings for door assets in Roblox, used to precisely place doors within environment scenes for consistency with sample placement. These configurations ensure doors align correctly within the environment.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/environmental-art/construct-your-world.md#_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n`<td>`-60, 5, 275`</td>`\n<td>`0, -90, 0`</td>`\n```\n\nLANGUAGE: HTML\nCODE:\n```\n`<td>`-95, 5, 260`</td>`\n<td>`0, 180, 0`</td>`\n```\n\nLANGUAGE: HTML\nCODE:\n```\n`<td>`-90, 5, 60`</td>`\n<td>`0, 0, 0`</td>`\n```\n\nLANGUAGE: HTML\nCODE:\n```\n`<td>`-80, 5, 45`</td>`\n<td>`0, 90, 0`</td>`\n```\n\n----------------------------------------\n\nTITLE: Changing a part's color with a false condition check in Luau\nDESCRIPTION: Shows how modifying the conditional expression to a false statement (3 + 3 >= 10) results in the code inside the if block not executing, so the LieDetector part does not change color. Demonstrates conditional evaluation of false.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-3/intro-to-if-statements.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nif 3 + 3 >= 10 then\n\tworkspace.LieDetector.Color = Color3.fromRGB(0, 255, 0)\nend\n```\n\n----------------------------------------\n\nTITLE: Connecting a Named Function as an Event Handler in Roblox\nDESCRIPTION: Shows how to connect a named function (`onPlayerAdded`) as an event handler to the `PlayerAdded` event of the Roblox `Players` service. The function takes the player object as an argument and prints a message when a player joins. Requires the Roblox environment and `Players` service.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/functions.md#_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nlocal function onPlayerAdded(player)\n\tprint(player.Name .. \" joined the game!\")\nend\n\nPlayers.PlayerAdded:Connect(onPlayerAdded)\n```\n\n----------------------------------------\n\nTITLE: Calling Cleanup Function in GameManager\nDESCRIPTION: Updates the GameManager's main game loop to call the matchManager.cleanupMatch() function before waiting for the transition time between matches.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/battle-royale-series/cleanup-and-reset.md#_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nwhile true do\n  displayManager.updateStatus(\"Waiting for Players\")\n\n  repeat\n    task.wait(gameSettings.intermissionDuration)\n  until #Players:GetPlayers() >= gameSettings.minimumPlayers\n  \n  displayManager.updateStatus(\"Get ready!\")\n  task.wait(gameSettings.transitionTime)\n\n  matchManager.prepareGame()\n  local endState = matchEnd.Event:Wait()\n\n  local endStatus = matchManager.getEndStatus(endState)\n  displayManager.updateStatus(endStatus)\n\n  matchManager.cleanupMatch()\n  task.wait(gameSettings.transitionTime)\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing VFX Controller Connection in Local Script (Roblox Lua)\nDESCRIPTION: A local script snippet that connects a VFX update function to RunService.PreSimulation to ensure visual effects follow animated creatures properly.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/beyond-the-dark/custom-characters.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Add this snippet to an existing local script that makes PreSimulation\n-- connections\n\nlocal RunService = game:GetService(\"RunService\")\nlocal vfx = require(workspace.VfxUpdateModule)\n\nRunService.PreSimulation:Connect(vfx.updateVfx)\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Skinning Transfer in Roblox\nDESCRIPTION: This setting disables the Automatic Skinning Transfer process for the accessory's WrapLayer. This is the default behavior, meaning no skinning data will be automatically generated or transferred at runtime.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/accessories/automatic-skinning-transfer.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\n-- Assuming 'wrapLayer' is the WrapLayer instance of the accessory\nwrapLayer.AutoSkin = Enum.AutoSkin.Disabled\n\n```\n\n----------------------------------------\n\nTITLE: Calculating Side-Scrolling Camera Position in Lua\nDESCRIPTION: Defines constants for camera depth (`CAMERA_DEPTH`) and height offset (`HEIGHT_OFFSET`). Inside `updateCamera`, it calculates the desired camera position (`cameraPosition`) for a side-scrolling view by using the character's X and adjusted Y coordinates (`rootPosition`) and setting a fixed Z coordinate based on `CAMERA_DEPTH`, creating the 2D perspective.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/input-and-camera/control-the-users-camera.md#_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal player = Players.LocalPlayer\n\nlocal CAMERA_DEPTH = 24\nlocal HEIGHT_OFFSET = 2\n\nlocal function updateCamera()\n    local character = player.Character\n    if character then\n        local root = character:FindFirstChild(\"HumanoidRootPart\")\n        if root then\n            local rootPosition = root.Position + Vector3.new(0, HEIGHT_OFFSET, 0)\n            local cameraPosition = Vector3.new(rootPosition.X, rootPosition.Y, CAMERA_DEPTH)\n        end\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Updating Instance via PATCH Request (cURL)\nDESCRIPTION: This cURL snippet demonstrates how to update an instance using a PATCH request to the Roblox Cloud API. It sends a JSON payload containing the properties to be updated. The request requires authentication via an API key and specifies the content type as JSON.  The universeId, placeId, instanceId and instanceType and propertyName must be replaced with actual values.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/guides/instance.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl --include --location --request PATCH \"https://apis.roblox.com/cloud/v2/universes/<universeId>/places/<placeId>/instances/<instanceId>\" --header \"x-api-key: <api key>\" --header \"Content-Type: application/json\" --data '{\"engineInstance\": {\"details\": {\"<instanceType>\": {\"<propertyName>\": \"<propertyValue>\"}}}}'\n```\n\n----------------------------------------\n\nTITLE: Hiding EmoteBar Client GUI - Lua\nDESCRIPTION: Demonstrates how to control the visibility of the EmoteBar GUI on a specific client. It calls the `setGuiVisibility` function with `false` as the argument to hide the GUI. This function can only be invoked from a LocalScript.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/emote-bar.md#_snippet_6\n\nLANGUAGE: Lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal EmoteBar = require(ReplicatedStorage:WaitForChild(\"EmoteBar\"))\n\nEmoteBar.setGuiVisibility(false)\n```\n\n----------------------------------------\n\nTITLE: Configuring PointLights for Magma/Outflow Illumination\nDESCRIPTION: Sets properties for the PointLights attached to 'LightMagma' and 'LightOutflow' parts to light the crevice and outflow areas with a slightly dimmer orange hue. This configuration is applied via the Roblox Studio Properties window.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/vfx/create-volcanoes.md#_snippet_1\n\nLANGUAGE: Configuration\nCODE:\n```\nBrightness = 2\nColor = 255, 81, 0\nRange = 50\n```\n\n----------------------------------------\n\nTITLE: Handling Part Collisions in Lua\nDESCRIPTION: A script that demonstrates how to detect and handle collisions between parts in Roblox using the Touched event. It prints a message to the output console when the referenced part collides with another part.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/assistant/prompt-engineering.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal part = workspace.Part\n\nlocal function onTouched(otherPart)\n    print(part.Name .. \" collided with \" .. otherPart.Name)\nend\n\npart.Touched:Connect(onTouched)\n```\n\n----------------------------------------\n\nTITLE: Function Typing with Parameter and Return Types in Luau Lua\nDESCRIPTION: Illustrates typing function parameters and specifying return types with annotations. Prevents passing invalid argument types like strings instead of numbers and optionally defines return types explicitly. Helps catch misuse of functions at compile time.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/type-checking.md#_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlocal function add(x: number, y: number): number\n\treturn x + y\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring SeaStackMesh in Level_3c - Roblox Properties Table\nDESCRIPTION: Defines the Size, CFrame.Position, and CFrame.Orientation properties for a SeaStackMesh asset placed in the Level_3c model to match the sample experience's geometry. These settings are applied using the Roblox Studio Properties window.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/core/building/apply-polished-assets.md#_snippet_2\n\nLANGUAGE: Roblox Properties Table\nCODE:\n```\nSize\tCFrame.Position\tCFrame.Orientation\n`52, 69, 53`\t`90, -4, 48`\t`0, -18, 0`\n```\n\n----------------------------------------\n\nTITLE: Declaring Tower Building Constants - Luau\nDESCRIPTION: Initializes constants `TOWER_SIZE` and `CUBE_SIZE` for the tower building script. These capitalized variables indicate values that are not expected to change during script execution, defining the dimensions of the structure and its components.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-4/nested-loops.md#_snippet_2\n\nLANGUAGE: Luau\nCODE:\n```\nlocal TOWER_SIZE = 4\nlocal CUBE_SIZE = 2\n```\n\n----------------------------------------\n\nTITLE: Defining LeftUpperLipRaiser Pose in Roblox FaceControls\nDESCRIPTION: References the 'LeftUpperLipRaiser' pose within the Roblox FaceControls system. This pose raises the character's left upper lip away from the lower lip, revealing the upper teeth. This pose is required for avatars published on the Roblox Marketplace.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/characters/facial-animation/facs-poses-reference.md#_snippet_9\n\nLANGUAGE: Roblox API\nCODE:\n```\nClass.FaceControls.LeftUpperLipRaiser|LeftUpperLipRaiser\n```\n\n----------------------------------------\n\nTITLE: Searching Catalog Lua\nDESCRIPTION: This code sample demonstrates searching the Roblox catalog using the AvatarEditorService.  It creates a `CatalogSearchParams` object, sets the `AssetTypes` property, and calls `AvatarEditorService:SearchCatalog()` with the search parameters. The code then iterates through the results and prints the catalog items.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/players/avatar-editor.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal AvatarEditorService = game:GetService(\"AvatarEditorService\")\n\nlocal catalogSearchParams = CatalogSearchParams.new()\nlocal assetTypes = {\n  Enum.AvatarAssetType.BackAccessory,\n  Enum.AvatarAssetType.ShoulderAccessory\n}\ncatalogSearchParams.AssetTypes = assetTypes\n\nlocal pagesObject =\n--This function returns a CatalogPages object containing the results.\nAvatarEditorService:SearchCatalog(catalogSearchParams)\nlocal currentPage = pagesObject:GetCurrentPage()\nfor _, item in currentPage do\n  print(item)\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Blender Animation Timeline Range\nDESCRIPTION: For custom characters utilizing facial animation, it is crucial that the timeline range in Blender is set correctly to 0 and 330. This ensures compatibility with animation data.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/characters/creating/blender-configurations.md#_snippet_5\n\nLANGUAGE: Blender Step\nCODE:\n```\n1. In the top right of the Animation Panel, click and set Start to 0.\n```\n\nLANGUAGE: Blender Step\nCODE:\n```\n2. In the top right of the Animation Panel, click and set End to 330.\n```\n\n----------------------------------------\n\nTITLE: Check Voice Chat Status - Lua\nDESCRIPTION: This client-side script checks if voice chat is enabled for the local player using `VoiceChatService:IsVoiceEnabledForUserIdAsync()`. It uses `pcall` for error handling and prints a message if voice chat is enabled. The script must be placed in a `LocalScript` or a `Script` with `RunContext` set to `Enum.RunContext.Client`.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/chat/voice-chat.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\nlocal VoiceChatService = game:GetService(\"VoiceChatService\")\n\nlocal localPlayer = Players.LocalPlayer\n\nlocal success, enabled = pcall(function()\n\treturn VoiceChatService:IsVoiceEnabledForUserIdAsync(localPlayer.UserId)\nend)\nif success and enabled then\n\tprint(\"Voice chat enabled!\")\nend\n```\n\n----------------------------------------\n\nTITLE: Polling Roblox Open Cloud API Operation for Results - Python\nDESCRIPTION: This Python snippet provides a function to poll an asynchronous Open Cloud API operation until it is complete or a retry limit is reached. It includes the initial List Children request and then repeatedly calls the operation endpoint (`GetOperation`) with a delay until the 'done' flag is true or the maximum number of retries is exhausted, finally returning the response containing the actual data.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/guides/instance.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport requests\nimport time\n\napiKey = \"<API_KEY>\"\nuniverseId = \"<UNIVERSE_ID>\"\nplaceId = \"<PLACE_ID>\"\ninstanceId = \"root\"\n\napiKeyHeaderKey = \"x-api-key\"\n\nlistChildrenUrl = \"https://apis.roblox.com/cloud/v2/universes/%s/places/%s/instances/%s:listChildren\"\ngetOperationUrl = \"https://apis.roblox.com/cloud/v2/%s\"\n\nnumberOfRetries = 10\nretryPollingCadence = 5\n\ndoneJSONKey = \"done\"\n\ndef ListChildren():\n  url = listChildrenUrl % (universeId, placeId, instanceId)\n  headerData = {apiKeyHeaderKey: apiKey}\n  results = requests.get(url, headers = headerData)\n  return results\n\ndef GetOperation(operationPath):\n  url = getOperationUrl % (operationPath)\n  headerData = {apiKeyHeaderKey: apiKey}\n  results = requests.get(url, headers = headerData)\n  return results\n\ndef PollForResults(operationPath):\n  currentRetries = 0\n  while (currentRetries < numberOfRetries):\n    time.sleep(retryPollingCadence)\n    results = GetOperation(operationPath)\n    currentRetries += 1\n\n    if (results.status_code != 200 or results.json()[doneJSONKey]):\n      return results\n\nresponse = ListChildren()\nprint(\"Operation Results:\", response.status_code, response.text)\n# Parse the Operation object's path to use in polling for the instance resource.\noperationPath = response.json()['path']\nresponse = PollForResults(operationPath)\nprint(\"Response:\", response.status_code, response.text)\n```\n\n----------------------------------------\n\nTITLE: Setting the Objective Prompt in HUD using Roblox Lua\nDESCRIPTION: This function, designed for use within ReplicatedStorage/HUDGuiSetup/SetObjective, requires the TEAM_SCORE_LIMIT module and updates the BodyTextLabel of the round objective UI with the current score limit. It takes a ScreenGui object containing the Objective UI and updates its text in-place. Ensure the GUI structure matches expected paths and that TEAM_SCORE_LIMIT is correctly required.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/gameplay-scripting/add-rounds.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal TEAM_SCORE_LIMIT = require(ReplicatedStorage.TEAM_SCORE_LIMIT)\n\nlocal function setObjective(gui: ScreenGui)\n\tlocal bodyTextLabel = gui.Objective.ObjectiveDisplay.Body.BodyTextLabel\n\tbodyTextLabel.Text = bodyTextLabel.Text:format(TEAM_SCORE_LIMIT)\nend\n```\n\n----------------------------------------\n\nTITLE: Cycling Luau Dialogue Index (Conditional)\nDESCRIPTION: Refactors the index management using Luau's conditional expression (ternary-like syntax). If the `dialogueIndex` is equal to the array size, it resets the index to 1; otherwise, it increments it by 1, creating a loop through the dialogue lines.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-5/intro-to-arrays.md#_snippet_8\n\nLANGUAGE: Luau\nCODE:\n```\nlocal function speak()\n  local dialogue = dialogueArray[dialogueIndex]\n  Chat:Chat(head, dialogue)\n\n  dialogueIndex = if dialogueIndex == #dialogueArray then 1 else dialogueIndex + 1\nend\n```\n\n----------------------------------------\n\nTITLE: Assigning Values to Local Variables in Luau\nDESCRIPTION: This snippet demonstrates how to declare local variables using the `local` keyword and assign various data types such as numbers, strings, booleans, and the default `nil` value. It then prints the values to the console.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/variables.md#_snippet_1\n\nLANGUAGE: Luau\nCODE:\n```\nlocal nilVar\nlocal x = 10\nlocal word = \"Hello\"\nlocal boolean = true\n\nprint(nilVar) -- nil\nprint(x) -- 10\nprint(word) -- Hello\nprint(boolean) -- true\n```\n\n----------------------------------------\n\nTITLE: Adding Parameter to Touch Event Handler in Luau\nDESCRIPTION: Modifies the 'kill' function definition to accept one parameter, 'otherPart'. When the 'Touched' event fires, Roblox automatically passes the BasePart that touched the 'lava' part as this argument.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/scripting/basic-scripting/deadly-lava.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal lava = script.Parent\n\nlocal function kill(otherPart)\n\nend\n\nlava.Touched:Connect(kill)\n```\n\n----------------------------------------\n\nTITLE: Lua Character Sets and Ranges in Pattern Matching\nDESCRIPTION: Explains the use of character sets enclosed in brackets '[]' for matching multiple characters, including inverses with '^', and ranges such as 'a-z'. Requires the string library; inputs are strings containing various characters, and outputs are substrings matching the set or range. Useful for complex character pattern matches within strings.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/strings.md#_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nlocal match1 = string.match(\"Hello!!! I am another string.\", \"[%l%p]+\")  -- Set: lowercase + punctuation\nprint(match1)  --> ello!!!\n\nlocal match2 = string.match(\"Hello!!! I am another string.\", \"%l%p+\")  -- Non-set: matches first lowercase + punctuation\nprint(match2)  --> o!!!\n```\n\n----------------------------------------\n\nTITLE: Handling Missing or Inactive FACS Controls Error\nDESCRIPTION: This error indicates that the dynamic head (`%s`) is either missing required FACS controls (`%s`) or has specified FACS controls (`%s`) that are inactive (not connected to the rig). Reconnect or add the necessary controls.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/validation-errors.md#_snippet_17\n\nLANGUAGE: Text\nCODE:\n```\n`%s` is missing FACS controls: `%s`\n`%s` has inactive FACS controls: `%s`\n```\n\n----------------------------------------\n\nTITLE: Connecting a function to the Touched event in Roblox Lua\nDESCRIPTION: This code connects the onTouch function to the trap's Touched event. When the trap is touched, the function will be called with the touching object passed as an argument.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-2/use-parameters-and-events.md#_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\nlocal trap = script.Parent\n\nlocal function onTouch(objectTouched)\n    print(\"Something touched the trap\")\nend\n\n-- Connect the function to the Touched event\ntrap.Touched:Connect(onTouch)\n```\n\n----------------------------------------\n\nTITLE: Roblox Island of Move Redemption Code\nDESCRIPTION: This is a redemption code ('GetMoving') used within the Roblox 'Island of Move' game. Players interact with an in-game character (Freddie) and use this code to receive the 'Speedy Shades' avatar item and the 'Get Moving' badge.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/build-it-play-it-island-of-move/challenge-checkpoint-3.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nGetMoving\n```\n\n----------------------------------------\n\nTITLE: Setting Beam's Attachment1 to GoalAttachment in Roblox Properties\nDESCRIPTION: This snippet instructs how to connect the second attachment point, GoalAttachment, to the TutorialBeam's Attachment1 property to establish a connection between the player and a goal object in Roblox Studio.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/build-it-play-it-mansion-of-wonder/connect-the-beam.md#_snippet_1\n\nLANGUAGE: None\nCODE:\n```\nIn the properties of TutorialBeam,\nset Attachment1 to GoalAttachment by selecting it from the list.\n```\n\n----------------------------------------\n\nTITLE: Environment Switching Implementation in Roblox Lua\nDESCRIPTION: This code snippet outlines how to implement environment switching in Roblox Connect, using PivotTo for repositioning within the same place and TeleportService for moving to different places.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/roblox-connect.md#_snippet_2\n\nLANGUAGE: Roblox Lua\nCODE:\n```\n-- For switching environments in the same place\nplayerCharacter:PivotTo(newEnvironmentCFrame)\n\n-- For teleporting to environments in different places\nTeleportService:TeleportAsync(placeId, {player1, player2}, teleportOptions)\n```\n\n----------------------------------------\n\nTITLE: Saving Avatar Using PromptSaveAvatar Lua\nDESCRIPTION: This code saves the current character's `HumanoidDescription` to the user's avatar using `AvatarEditorService:PromptSaveAvatar()`. It retrieves the `HumanoidDescription` from the player's character and calls `PromptSaveAvatar()`, providing the description and the rig type. It then waits for the `PromptSaveAvatarCompleted` event and checks for a successful result.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/players/avatar-editor.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal AvatarEditorService = game:GetService(\"AvatarEditorService\")\nlocal Players = game:GetService(\"Players\")\n\nlocal player = Players.LocalPlayer\nlocal character = player.Character or player.CharacterAdded:Wait()\nlocal humanoid = character:WaitForChild(\"Humanoid\")\n\nlocal currentDescription = humanoid:GetAppliedDescription()\nAvatarEditorService:PromptSaveAvatar(currentDescription, humanoid.RigType)\n\nlocal result = AvatarEditorService.PromptSaveAvatarCompleted:Wait()\nif result == Enum.AvatarPromptResult.Success then\n  -- Avatar saved!\nend\n```\n\n----------------------------------------\n\nTITLE: Structuring Content with Grid Layout (Markup)\nDESCRIPTION: This markup uses a Grid component (likely from a UI library or a custom documentation component) to structure content side-by-side. It arranges a list of Roblox core UI elements next to an image illustrating them. The `container`, `spacing`, and `alignItems` attributes control the layout presentation.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/user-interface-design/wireframe-your-layouts.md#_snippet_0\n\nLANGUAGE: Markup\nCODE:\n```\n<Grid container spacing={0} alignItems=\"flex-start\">\n <Grid item>\n - A list of players within the experience.\n - The character's health bar.\n - The character's backpack.\n - A chat window.\n - A capture button.\n - A popup menu of character emotes.\n</Grid>\n <Grid item>\n<img src=\"../../../assets/ui/misc/CoreGui-Elements.jpg\" width=\"550\" />\n</Grid>\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Adding Delay Inside a Luau For Loop\nDESCRIPTION: Inserts a `task.wait(VANISH_RATE)` call within the `for` loop body. This pauses the script's execution for the specified `VANISH_RATE` duration during each iteration, creating a delay between processing each part.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-5/loops-and-arrays.md#_snippet_4\n\nLANGUAGE: Luau\nCODE:\n```\nfor partIndex = 1, #pathArray  do\n   task.wait(VANISH_RATE)\nend\n```\n\n----------------------------------------\n\nTITLE: Using Nested Block Comments in Luau\nDESCRIPTION: This Luau code snippet shows how to use nested brackets within block comments. This is useful to include special characters or text within block comments.  The example shows an in-depth comment with nested brackets and equal signs to escape special characters.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/luau/comments.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\n--[=[\n    In-depth detail about cosmic moon ray: [[[TOP SECRET]]]\n]=]\n```\n\n----------------------------------------\n\nTITLE: Defining a simple puzzle mission framework\nDESCRIPTION: To ensure a unified approach to missions, a simple puzzle mission framework was created with hooks for start and finish, configuration data, and a debugging button. This framework provides a structured approach to mission design.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/the-mystery-of-duvall-drive/main-design-requirements.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Handling Asset Under Review Validation Error\nDESCRIPTION: This error indicates that the asset (`%s`) failed to load because it is still undergoing the moderation review process. Wait for the review process to complete before attempting validation again.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/validation-errors.md#_snippet_11\n\nLANGUAGE: Text\nCODE:\n```\nFailed to load asset `%s` that is still going through the review process. Please, wait for a notification of completion from the review process and try again.\n```\n\n----------------------------------------\n\nTITLE: Setting Player Team Icon - Lua\nDESCRIPTION: This Lua function sets the visibility of the player's team icon based on their team color, updating it whenever the player's team changes.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/gameplay-scripting/create-teams.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal function setPlayerTeamIcon(gui: ScreenGui)\n\tfor _, teamColorIcon in gui.PlayerDisplay.TeamIcons:GetChildren() do\n\t\tlocal iconTeamColor = teamColorIcon:GetAttribute(GuiAttribute.teamColor)\n\t\tteamColorIcon.Visible = localPlayer.TeamColor == iconTeamColor\n\tend\nend\n\nlocal function startSyncingTeamColor(gui: ScreenGui)\n\tsetPlayerTeamIcon(gui)\n\tlocalPlayer:GetPropertyChangedSignal(\"Team\"):Connect(function()\n\t\tsetPlayerTeamIcon(gui)\n\tend)\nend\n```\n\n----------------------------------------\n\nTITLE: Checking Luau Array Size Condition\nDESCRIPTION: Introduces an `if` statement to check if the current `dialogueIndex` is equal to the total size of the `dialogueArray`. The size is obtained using the `#` operator before the array name (`#dialogueArray`).\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-5/intro-to-arrays.md#_snippet_7\n\nLANGUAGE: Luau\nCODE:\n```\nlocal function speak()\n  local dialogue = dialogueArray[dialogueIndex]\n  Chat:Chat(head, dialogue)\n\n  if dialogueIndex == #dialogueArray then\n    dialogueIndex = 1\n  end\n\n  dialogueIndex += 1\nend\n```\n\n----------------------------------------\n\nTITLE: Deleting an Attribute in Roblox Lua\nDESCRIPTION: This snippet removes an attribute from a Roblox instance by setting its value to `nil` using `SetAttribute()`.  It targets the \"GrowthRate\" attribute.  Dependency: Roblox Engine.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/scripting/attributes.md#_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nlocal cabbage = script.Parent\n\ncabbage:SetAttribute(\"GrowthRate\", nil)\n```\n\n----------------------------------------\n\nTITLE: Listing OpenAPI Description File Locations in the creator-docs Repository\nDESCRIPTION: Provides the GitHub URLs for accessing the OpenAPI description files for Open Cloud v1 and v2 resources. These JSON files define the API structure for Roblox Open Cloud services including Assets, Ordered Data Stores, Standard Data Stores, Messaging, and Universes.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/reference/openapi.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n# All V2 Resources\nhttps://github.com/Roblox/creator-docs/blob/main/content/en-us/reference/cloud/cloud.docs.json\n\n# V1 Assets\nhttps://github.com/Roblox/creator-docs/blob/main/content/en-us/reference/cloud/assets/v1.json\n\n# V1 Ordered Data Stores\nhttps://github.com/Roblox/creator-docs/blob/main/content/en-us/reference/cloud/datastores-api/ordered-v1.json\n\n# V1 Standard Data Stores\nhttps://github.com/Roblox/creator-docs/blob/main/content/en-us/reference/cloud/datastores-api/v1.json\n\n# V1 Messaging\nhttps://github.com/Roblox/creator-docs/blob/main/content/en-us/reference/cloud/messaging-service/v1.json\n\n# V1 Universes\nhttps://github.com/Roblox/creator-docs/blob/main/content/en-us/reference/cloud/universes-api/v1.json\n```\n\n----------------------------------------\n\nTITLE: Uploading a New Asset with OAuth 2.0 in cURL\nDESCRIPTION: A cURL command demonstrating how to upload a new asset using OAuth 2.0 authentication. Includes the access token in the Authorization header and uses form data to supply asset metadata and file content.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/guides/usage-assets.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request POST 'https://apis.roblox.com/assets/v1/assets' \\\n\n--header 'Authorization: Bearer <access_token>' \\\n\n--header 'Content-Type: application/json' \\\n\n--form 'request=\"{\n\n  \\\"assetType\\\": \\\"Decal\\\",\n\n  \\\"displayName\\\": \\\"DecalDemo123\\\",\n\n  \\\"description\\\": \\\"This is a description\\\",\n\n  \\\"creationContext\\\": {\n\n    \\\"creator\\\": {\n\n    \\\"userId\\\": \\\"<user_id>\\\"\n\n    }\n  }\n\n}\"' \\\n\n--form 'fileContent=@\"/filepath/p1.png\"'\n```\n\n----------------------------------------\n\nTITLE: Setting Seeking Permissions - Lua\nDESCRIPTION: This Lua code snippet sets seeking permissions within the EventSequencer.  It requires the EventSequencer module and uses a table to define which place IDs, user IDs, and groups are allowed to seek. It takes placeIDs, userIDs, and groups as parameters.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/event-sequencer.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal EventSequencer = require(ReplicatedStorage:WaitForChild(\"EventSequencer\"))\n\nEventSequencer.setSeekingPermissions({\n\tplaceIDs = {},\n\tuserIDs = {},\n\tgroups = {\n\t\t{GroupID = , MinimumRankID = },\n\t}\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring in-experience currency in Lua\nDESCRIPTION: Defines a custom in-experience currency called 'Gems' with display name, symbol, and optional icon. This metadata informs the Core feature package how to display and handle the currency in the UI and transactions.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/feature-packages/bundles.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\n    Gems = {\n        displayName = \"Gems\",\n        symbol = \"💎\",\n        icon = nil,\n    },\n```\n\n----------------------------------------\n\nTITLE: Creating a Tween with Event Sequencer\nDESCRIPTION: This code snippet demonstrates how to create a configurable tween using the Event Sequencer. It sets properties of the lighting service to fade out, synced to audio and uses OnStart, OnHeartbeat and OnEnd events.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/event-sequencer.md#_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nSchema.OnRun = function()\n\tprint(\"OnRun (Client)\")\n\n\tlocal MainAudio = Schema:audio({\n\t\tStartTime = 1,\n\t\tSoundId = \"rbxassetid://1838673350\",\n\t})\n\n\tlocal LightFadeOut = Schema:tween({\n\t\tStartTimes = {29.884},\n\t\tTween = {\n\t\t\tObject = game:GetService(\"Lighting\"),\n\t\t\tInfo = TweenInfo.new(2, Enum.EasingStyle.Sine, Enum.EasingDirection.Out),\n\t\t\tProperties = {\n\t\t\t\tBrightness = 0,\n\t\t\t}\n\t\t},\n\t\tSyncToAudio = {\n\t\t\tAudio = MainAudio,\n\t\t\tStartAtAudioTimes = {5, 7.2, 9.4, 11.6},\n\t\t},\n\t\tOnStart = function(self)\n\t\t\tprint(\"Tween playing\")\n\t\tend,\n\t\tOnHeartbeat = function(self, alpha)\n\t\t\tprint(\"Tween alpha\", alpha)\n\t\tend,\n\t\tOnEnd = function(self)\n\t\t\tprint(\"Tween completed\")\n\t\tend,\n\t})\nend\n```\n\n----------------------------------------\n\nTITLE: Handling itemAdded Event with MerchBooth - Lua\nDESCRIPTION: Connects to the itemAdded event from the MerchBooth module to react whenever a new item is registered. The connected function receives the assetId and itemInfo, which can be used for debugging, UI updates, or logging. Requires the MerchBooth module, is intended for use in Script context, and operates with event-driven logic.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/merch-booth.md#_snippet_31\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal MerchBooth = require(ReplicatedStorage:WaitForChild(\"MerchBooth\"))\n\nMerchBooth.itemAdded:Connect(function(assetId, itemInfo)\n\tprint(\"Item added with asset ID of\", assetId)\n\tprint(itemInfo)\nend)\n\n```\n\n----------------------------------------\n\nTITLE: Connecting to onChatAnimationPlayed Event in Lua\nDESCRIPTION: This snippet demonstrates how to connect to the onChatAnimationPlayed event in the SocialInteractions module. The event fires when a chat animation plays and provides the animation ID and triggering word. This code requires the SocialInteractions module and must be used in a LocalScript.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/social-interactions.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal SocialInteractions = require(ReplicatedStorage:WaitForChild(\"SocialInteractions\"))\n\nSocialInteractions.onChatAnimationPlayed:Connect(function(animationId, triggerWord)\n\tprint(animationId, triggerWord)\nend)\n```\n\n----------------------------------------\n\nTITLE: Adding Comments to Luau Scripts in Roblox\nDESCRIPTION: Demonstrates how to create a comment in a Luau script using double dashes (--). Comments are notes that don't execute and help developers remember what parts of the script do.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-1/object-properties.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\n-- Changes the color of a part\n```\n\n----------------------------------------\n\nTITLE: Adding UICorner Modifier to InnerFill Frame in Roblox Studio\nDESCRIPTION: Adds a UICorner modifier to the 'InnerFill' frame to round its corners, matching the 'pill' shape of its parent container ('SliderFrame').\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/ui/interactive-ui.md#_snippet_7\n\nLANGUAGE: Roblox Studio Configuration\nCODE:\n```\nTarget: EffectsVolumeSlider > SliderFrame > InnerFill (Class.Frame)\n\nAdd Child:\n1. Class.UICorner\n   - CornerRadius = UDim.new(0.5, 0) -- {0.5, 0}\n```\n\n----------------------------------------\n\nTITLE: Getting Team from Color - Lua\nDESCRIPTION: This Lua function searches for a team based on its color and returns the team object if found, otherwise, it returns nil. It is used to find a team based on team color to sync points.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/gameplay-scripting/create-teams.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal function getTeamFromTeamColor(teamColor: Color3): Team?\n\tfor _, team in Teams:GetTeams() do\n\t\tif team.TeamColor == teamColor then\n\t\t\treturn team\n\t\tend\n\tend\n\n\treturn nil\nend\n```\n\n----------------------------------------\n\nTITLE: Calculating Latency Signal Score\nDESCRIPTION: Calculates a numerical signal score based on the estimated ping time (latency) of the joining player. The score is inversely related to the ping, with a maximum relevant value of 250 milliseconds.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/matchmaking/attributes-and-signals.md#_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlatencySignalScore = 1 - min(250, estimatedPingMs) / 250\n```\n\n----------------------------------------\n\nTITLE: Example API Success Response\nDESCRIPTION: Illustrates the JSON format of a successful response received from the Place Publishing API after successfully publishing a new version of a place. The response includes a 'versionNumber' field indicating the numerical identifier of the newly created place version.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/guides/usage-place-publishing.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"versionNumber\": 7\n}\n```\n\n----------------------------------------\n\nTITLE: Defining JawDrop Pose in Roblox FaceControls\nDESCRIPTION: Specifies the 'JawDrop' pose using the Roblox FaceControls API reference. This action lowers the character's jaw, causing the mouth to open. Including this pose is mandatory for avatars submitted to the Roblox Marketplace.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/characters/facial-animation/facs-poses-reference.md#_snippet_4\n\nLANGUAGE: Roblox API\nCODE:\n```\nClass.FaceControls.JawDrop|JawDrop\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Events in ModuleScripts\nDESCRIPTION: Shows how to use a ModuleScript to encapsulate a BindableEvent, providing a cleaner interface for event handling in Roblox.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/scripting/module.md#_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal Switch = {}\n\n-- Creating bindable so any script can listen to when the switch was changed\nlocal bindableEvent = Instance.new(\"BindableEvent\")\nSwitch.Changed = bindableEvent.Event\n\nlocal state = false\nfunction Switch.flip()\n  state = not state\n  bindableEvent:Fire(state)\nend\n\nreturn Switch\n```\n\n----------------------------------------\n\nTITLE: Defining startTimer Function with Print Statement in Roblox - Lua\nDESCRIPTION: Creates a function that, when called, prints 'Countdown started' for testing the interaction. Useful for basic event flow verification before adding further logic. Requires timerDuration already defined. No parameters or return value; solely for debug output.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-4/create-a-timed-bridge.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nlocal timerDuration = 5\n\nlocal function startTimer()\n    print(\"Countdown started\")\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Pucker Pose in Roblox FaceControls\nDESCRIPTION: Identifies the 'Pucker' pose via its Roblox FaceControls API reference. This pose makes the character's mouth form a kiss-like shape. It is a required pose for avatar assets intended for the Roblox Marketplace.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/characters/facial-animation/facs-poses-reference.md#_snippet_11\n\nLANGUAGE: Roblox API\nCODE:\n```\nClass.FaceControls.Pucker|Pucker\n```\n\n----------------------------------------\n\nTITLE: Numerical Signal Example (Joining Player) in Lua\nDESCRIPTION: This is an example demonstrating the numerical signal calculation using concrete values. It uses the server's level, joining player's level and maximum difference. The primary purpose is to demonstrate the signal in practice and how specific values relate to the overall formula.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/matchmaking/attributes-and-signals.md#_snippet_20\n\nLANGUAGE: lua\nCODE:\n```\nlocal server_Level = 4500\nlocal joining_player_Level = 9000\nlocal max_relevant_difference = 1500\n\nlocal diff = math.abs(server_Level - joining_player_Level)\nlocal score = 1 - math.min(diff / max_relevant_difference, 1)\n```\n\n----------------------------------------\n\nTITLE: Combining Ancestry and Property Queries (Implicit AND)\nDESCRIPTION: Finds all grandchildren of 'Cart' instances (`Cart.*.*`) that also have `Transparency < 1`. Combines different query types with an implicit AND.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/studio/explorer.md#_snippet_19\n\nLANGUAGE: RobloxSearchQuery\nCODE:\n```\nCart.*.* Transparency < 1\n```\n\n----------------------------------------\n\nTITLE: Getting Attribute Value in Roblox Lua\nDESCRIPTION: This snippet retrieves the value of an existing attribute. It assumes the \"Harvestable\" attribute is set.  It prints the attribute value to the output window. Dependency: Roblox Engine.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/scripting/attributes.md#_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlocal cabbage = script.Parent\n\ncabbage:SetAttribute(\"Harvestable\", true)\n\nlocal isHarvestable = cabbage:GetAttribute(\"Harvestable\")\nprint(isHarvestable) --> true\n```\n\n----------------------------------------\n\nTITLE: Replacing Default Walk Animation (Lua)\nDESCRIPTION: This script replaces the default walk animation ID with a custom animation ID. It connects to the Players service, waits for the character to be added, and then accesses the Animate script to change the AnimationId of the WalkAnim within the walk animation set. This overrides the default walk animation with the specified custom animation when the character walks.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/animation/play-character-animations.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nlocal function onCharacterAdded(character)\n\tlocal humanoid = character:WaitForChild(\"Humanoid\")\n\tlocal animator = humanoid:WaitForChild(\"Animator\")\n\tprint(\"Animator found!\")\n\n\tlocal animateScript = character:WaitForChild(\"Animate\")\n\tanimateScript.walk.WalkAnim.AnimationId = \"rbxassetid://122652394532816\"\n\nlocal function onPlayerAdded(player)\n\tplayer.CharacterAdded:Connect(onCharacterAdded)\nend\n\nPlayers.PlayerAdded:Connect(onPlayerAdded)\n```\n\n----------------------------------------\n\nTITLE: Defining a Wall Tile Type Configuration in Lua\nDESCRIPTION: This Lua code snippet demonstrates how to define the configuration for a 'Wall' tile type within the building system's ObjectTypeConfigurations table. It specifies the asset's offset from the grid cell center, its connectivity bitmask (0xFF8000) indicating which edges it connects to, and its occupancy bitmask (0x20) defining the space it occupies within the cell. This configuration is stored in `ReplicatedStorage/BuildingSystem/Libraries/Grid/ObjectTypeConfigurations`.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/battle-royale/building-system.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nObjectTypeConfigurations.Wall = {\n\tASSET_OFFSET_FROM_CENTER = Vector3.new(0, 0, -CELL_DIMENSIONS.Z / 2),\n\tCONNECTIVITY = 0xFF8000, -- 0b 111 111 111 000 000 000 000 000\n\tOCCUPANCY = 0x20, -- 0b 00 00 00 00 1 0 0 0 0 0\n}\n```\n\n----------------------------------------\n\nTITLE: Defining EyesLookUp Pose in Roblox FaceControls\nDESCRIPTION: References the 'EyesLookUp' pose within the Roblox FaceControls system. Activating this pose makes the character's eyes gaze upwards. This is a required pose for avatars published on the Roblox Marketplace.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/characters/facial-animation/facs-poses-reference.md#_snippet_3\n\nLANGUAGE: Roblox API\nCODE:\n```\nClass.FaceControls.EyesLookUp|EyesLookUp\n```\n\n----------------------------------------\n\nTITLE: Sending an Experience Notification in Luau\nDESCRIPTION: This code snippet demonstrates how to send a basic experience notification to a specific user. It uses the `OpenCloud` module to call the `createUserNotification` function with the recipient's UserID and the notification asset ID.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/production/promotion/experience-notifications.md#_snippet_0\n\nLANGUAGE: Luau\nCODE:\n```\nlocal ServerScriptService = game:GetService(\"ServerScriptService\")\n\nlocal OCUserNotification = require(ServerScriptService.OpenCloud.V2.UserNotification)\nlocal recipientPlayerID = 505306092\n\n-- In the payload, \"messageId\" is the value of the notification asset ID\nlocal userNotification = {\n\tpayload = {\n\t\tmessageId = \"5dd7024b-68e3-ac4d-8232-4217f86ca244\",\n\t\ttype = \"MOMENT\"\n\t}\n}\n\nlocal result = OCUserNotification.createUserNotification(recipientPlayerID, userNotification)\n\nif result.statusCode ~= 200 then\n\tprint(result.statusCode)\n\tprint(result.error.code)\n\tprint(result.error.message)\nend\n```\n\n----------------------------------------\n\nTITLE: Configure Emotes with Custom Settings - Lua\nDESCRIPTION: This script configures the EmoteBar module to use custom emotes instead of the default ones. It sets the `useDefaultEmotes` configuration option to `false` and defines a set of custom emotes with their names, animation IDs, image IDs, and default tempos.  The script must be placed in ServerScriptService. Requires ReplicatedStorage.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/emote-bar.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal EmoteBar = require(ReplicatedStorage:WaitForChild(\"EmoteBar\"))\n\nEmoteBar.configureServer({\n\tuseDefaultEmotes = false,\n})\n\nEmoteBar.setEmotes({\n\t{\n\t\tname = \"Hello\",\n\t\tanimation = \"rbxassetid://3344650532\",\n\t\timage = \"rbxassetid://7719817462\",\n\t\tdefaultTempo = 1,\n\t},\n\t{\n\t\tname = \"Applaud\",\n\t\tanimation = \"rbxassetid://5915693819\",\n\t\timage = \"rbxassetid://7720292217\",\n\t\tdefaultTempo = 2,\n\t},\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing RightUpperLipRaiser Control in Roblox\nDESCRIPTION: Reference to the RightUpperLipRaiser control which raises the right upper lip away from the lower lip, revealing the upper teeth. This is a required pose for Marketplace avatar assets.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/characters/facial-animation/facs-poses-reference.md#_snippet_16\n\nLANGUAGE: Roblox\nCODE:\n```\nClass.FaceControls.RightUpperLipRaiser\n```\n\n----------------------------------------\n\nTITLE: Filtering by Exact Match on Color3 Property\nDESCRIPTION: Finds instances where the `Color` property exactly matches the RGB value [255, 0, 0]. Requires quoting the complete composite value for exact matching.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/studio/explorer.md#_snippet_7\n\nLANGUAGE: RobloxSearchQuery\nCODE:\n```\nColor = \"255, 0, 0\"\n```\n\n----------------------------------------\n\nTITLE: Accessing RightLowerLipDepressor Control in Roblox\nDESCRIPTION: Reference to the RightLowerLipDepressor control which lowers the lower lip down away from the upper lip revealing the lower teeth. This is a required pose for Marketplace avatar assets.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/characters/facial-animation/facs-poses-reference.md#_snippet_15\n\nLANGUAGE: Roblox\nCODE:\n```\nClass.FaceControls.RightLowerLipDepressor\n```\n\n----------------------------------------\n\nTITLE: Setting up a trap part reference in Lua\nDESCRIPTION: This code sets up a variable that references the parent of the script, which is a trap part that will destroy anything that touches it.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-2/use-parameters-and-events.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\n-- Destroys whatever touches the parent\nlocal trap = script.Parent\n```\n\n----------------------------------------\n\nTITLE: Example Execution Control Warning Message\nDESCRIPTION: Shows the warning message displayed in the Output window when a script cannot start execution due to a missing execution control capability (e.g., `RunServerScript` for a server script).\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/scripting/capabilities.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nCannot start server script 'Script' (lacking capability RunServerScript)\n```\n\n----------------------------------------\n\nTITLE: Layout with Material-UI Grid for Environmental Art Curriculum Page in JSX\nDESCRIPTION: This snippet demonstrates the use of Material-UI's Grid component to create a responsive page layout with two primary columns. The left column displays the video container taking approximately 7/12 of the horizontal space on large screens, full width on extra small screens, and columns arranged in a row direction. The right column includes descriptive textual content with similar responsive sizing and column direction configuration. Dependencies include React and Material-UI components.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/environmental-art/index.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Grid alignItems=\"stretch\" container direction=\"row\">\n\n<Grid item Large={7} XSmall={12} direction=\"column\">\n\n{/* Video container div and iframe here */}\n\n</Grid>\n\n<Grid item Large={5} XSmall={12} direction=\"column\">\n\n{/* Text content describing environmental art and course information */}\n\n</Grid>\n\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Character Added Event Handling Scaffold in Roblox with Luau\nDESCRIPTION: Defines a placeholder onCharacterAdded function intended for logic when a Player's Character appears. No implementation is provided; this pattern is used to modularize code that resets stats or handles deaths. Both character (Model) and player (Player) are passed for convenience, even though only CharacterAdded returns a single argument.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/scripting/basic-scripting/score-points.md#_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nlocal function onCharacterAdded(character, player)\n\nend\n\nlocal function onPlayerAdded(player)\n  local leaderstats = Instance.new(\"Folder\")\n```\n\n----------------------------------------\n\nTITLE: Adjusting Model Settings for Posing\nDESCRIPTION: Guidance to disable 'Snap to Grid' rotation and movement to facilitate natural posing of characters prior to animation creation.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/build-it-play-it-island-of-move/creating-animations.md#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<img src=\"../../assets/education/build-it-play-it-island-of-move/creating-animations/turn-off-snap.png\" width=\"50%\" />\n```\n\n----------------------------------------\n\nTITLE: Accessing UpperLipSuck Control in Roblox\nDESCRIPTION: Reference to the UpperLipSuck control which rolls the upper lip around the teeth, creating a specific mouth expression often used in conjunction with other controls.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/characters/facial-animation/facs-poses-reference.md#_snippet_25\n\nLANGUAGE: Roblox\nCODE:\n```\nClass.FaceControls.UpperLipSuck\n```\n\n----------------------------------------\n\nTITLE: Handling User Validation during Moderation Error\nDESCRIPTION: This error occurs when the system fails to validate the current user during the moderation check process. Ensure you own the assets being validated.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/validation-errors.md#_snippet_27\n\nLANGUAGE: Text\nCODE:\n```\nFailed to validate current user during moderation. Make sure you own the assets being validated and try again.\n```\n\n----------------------------------------\n\nTITLE: Initializing Powerup Script in Roblox Luau\nDESCRIPTION: Sets up a Roblox script that references its parent object (the powerup part) to be used in subsequent code for player speed modification.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-3/powerups-with-if-statements.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n-- Gives a temporary speed boost when touched\nlocal speedBoost = script.Parent\n```\n\n----------------------------------------\n\nTITLE: Combining Queries with Explicit AND\nDESCRIPTION: Finds `BasePart` instances that are both `Anchored=false` AND `CanCollide=false`. The `and` keyword explicitly performs a logical AND.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/studio/explorer.md#_snippet_20\n\nLANGUAGE: RobloxSearchQuery\nCODE:\n```\nAnchored=false and CanCollide=false\n```\n\n----------------------------------------\n\nTITLE: Creating WrapLayer from Imported Meshes in Roblox\nDESCRIPTION: Shows the naming convention for mesh objects that are automatically converted to WrapLayer objects during import using both '_InnerCage' and '_OuterCage' suffixes.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/parts/meshes.md#_snippet_8\n\nLANGUAGE: Roblox\nCODE:\n```\nClass.WrapLayer\n```\n\n----------------------------------------\n\nTITLE: Get Player Locale and Request Translation (Client)\nDESCRIPTION: This client-side Lua script retrieves the player's locale ID and uses a RemoteFunction to request a translation from the server. It waits for a RemoteFunction called TranslateTextFunction in ReplicatedStorage, then invokes it with the text to translate and the player's locale. The translated text is then printed to the console.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/production/localization/auto-translate-dynamic-content.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal httpRequestFunction = ReplicatedStorage:WaitForChild(\"TranslateTextFunction\")\n\n-- Text to translate\nlocal textToTranslate = \"This is the example text to translate\"\n\n-- Get the player's locale\nlocal Players = game:GetService(\"Players\")\nlocal player = Players.LocalPlayer\n\n-- get the locale ID for the local player's locale or set to any supported locale string\nlocal locale = player.LocaleId\n\nlocal translatedText = httpRequestFunction:InvokeServer(textToTranslate, locale)\n\nprint(\"Translated text: \", translatedText)\n```\n\n----------------------------------------\n\nTITLE: Detecting Scene Start with onSceneLoadedForClient in EventSequencer Lua\nDESCRIPTION: Demonstrates the client-side usage of onSceneLoadedForClient to notify when a new scene has started loading. Must be used in Class.LocalScript, and is not suitable for Inline Mode. Requires EventSequencer framework available via ReplicatedStorage.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/event-sequencer.md#_snippet_22\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal EventSequencer = require(ReplicatedStorage:WaitForChild(\"EventSequencer\"))\n\n-- Detect when scene is starting (client-side)\nEventSequencer.onSceneLoadedForClient:Connect(function()\n\twarn(\"Scene is starting!\")\nend)\n```\n\n----------------------------------------\n\nTITLE: Defining an Empty Function Template in Luau - Lua\nDESCRIPTION: This snippet provides the basic structure for defining a function named printFood in Luau. It serves as a template for users to insert code inside the function's body. There are no dependencies, parameters, or outputs in this empty template, and it is intended as a starting point before adding executable code.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-2/code-a-function.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal function printFood()\n\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing an Infinite While Loop in Luau\nDESCRIPTION: This snippet illustrates the basic structure of an infinite `while` loop.  The loop's condition is always `true`, causing it to repeat the enclosed code indefinitely. The `do` and `end` keywords define the loop's scope.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-4/repeat-code-with-while-loops.md#_snippet_2\n\nLANGUAGE: Luau\nCODE:\n```\nwhile true do\n\tprint(\"This loop is running\")\nend\n```\n\n----------------------------------------\n\nTITLE: OAuth 2.0 Authorization URL for Assets API Access\nDESCRIPTION: Example OAuth 2.0 authorization URL that redirects users to grant permissions for asset reading and writing. Includes required parameters like client_id, redirect_uri, scopes, and response type.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/guides/usage-assets.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nhttps://authorize.roblox.com?client_id=819547628404595165403873012&redirect_uri=https://my-app.com/redirect&scope=asset:read+asset:write&response_type=Code&prompts=login+consent&nonce=12345&state=6789\n```\n\n----------------------------------------\n\nTITLE: Handling Skinned Mesh Data Retrieval/Load Failure\nDESCRIPTION: Indicates failure either retrieving mesh data necessary for skinned mesh validation or loading a specific mesh (`%s`). Ensure the mesh exists and is accessible.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/validation-errors.md#_snippet_44\n\nLANGUAGE: Text\nCODE:\n```\nFailed to retrieve mesh data to validate skinned mesh.\n\nFailed to load mesh for `%s`. Make sure mesh exists and try again.\n```\n\n----------------------------------------\n\nTITLE: Parenting accessory mesh to character rig in Blender with Automatic Weights\nDESCRIPTION: This snippet details how to parent the accessory mesh to the character's armature in Blender, applying Automatic Weights for influence. It ensures the accessory deforms properly with facial animations in Roblox.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/characters/facial-animation/create-face-accessories.md#_snippet_0\n\nLANGUAGE: Blender\nCODE:\n```\nIn Object Mode, hold Shift and click the accessory model and then any of the character bones.\\nRight click and select Parent, then choose With Automatic Weights.\n```\n\n----------------------------------------\n\nTITLE: Calculating Age Difference Signal Score\nDESCRIPTION: Calculates a numerical signal score based on the difference between the average age of players in a server and the joining player's age. The score is inversely related to the age difference, with a maximum relevant difference of 25.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/matchmaking/attributes-and-signals.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nageDifferenceSignalScore = 1 - min(25, ageDifference) / 25, where\nageDifference = abs(avgServerAge - joiningPlayerAge)\n```\n\n----------------------------------------\n\nTITLE: Custom Module for Informing Event Sequencer\nDESCRIPTION: This is a module script that is required in the previous code snippet and contains an `init` function to initialize a heartbeat connection, and a `clean` function to disconnect and clear the heartbeat connection. The `clean` function is passed to `Schema:inform`.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/event-sequencer.md#_snippet_12\n\nLANGUAGE: lua\nCODE:\n```\nlocal RunService = game:GetService(\"RunService\")\n\nlocal CustomModule = {}\n\nCustomModule.init = function()\n\t-- Initialize heartbeat connection\n\tCustomModule.connection = RunService.Heartbeat:Connect(function()\n\n\tend)\nend\n\nCustomModule.clean = function()\n\t-- Disconnect and clear heartbeat connection\n\tif CustomModule.connection then\n\t\tCustomModule.connection:Disconnect()\n\t\tCustomModule.connection = nil\n\tend\nend\n\nreturn CustomModule\n```\n\n----------------------------------------\n\nTITLE: Informing the Event Sequencer of a ModuleScript Cleanup\nDESCRIPTION: This code demonstrates how to call a custom \"cleanup\" function in a `Class.ModuleScript` that initializes a connection or other reference during the [OnRun](#onrun) lifecycle hook, informing the EventSequencer about the cleanup.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/event-sequencer.md#_snippet_11\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal RunService = game:GetService(\"RunService\")\n\nlocal customModule = require(ReplicatedStorage:WaitForChild(\"CustomModule\"))\n\nlocal EventSequencer = require(ReplicatedStorage:WaitForChild(\"EventSequencer\"))\n\nlocal Schema = EventSequencer.createSchema()\n\nSchema.OnRun = function()\n\tprint(\"OnRun (Server)\")\n\n\tSchema:schedule({\n\t\tStartTimes = {5},\n\t\tOnStart = function(self)\n\t\t\t-- Call \"init\" function in custom module\n\t\t\tcustomModule.init()\n\t\t\t-- Call \"clean\" function in custom module on scene cleanup\n\t\t\tSchema:inform(customModule, customModule.clean)\n\t\tend,\n\t})\nend\n```\n\n----------------------------------------\n\nTITLE: Accessing Scene Environment from Server Schema with EventSequencer in Lua\nDESCRIPTION: Demonstrates how to use getCurrentSceneEnvironment on the server side within a schema to manage in-scene server assets, such as responding to part color changes via events. Requires EventSequencer setup and a preconfigured ChangePartColor event in the scene's Events folder. Not for use in Inline Mode; expects correct event and schema setup.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/event-sequencer.md#_snippet_18\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal EventSequencer = require(ReplicatedStorage:WaitForChild(\"EventSequencer\"))\n\nlocal Schema = EventSequencer.createSchema()\n\nlocal serverEnvironment\nlocal partColorConnection\nlocal changePartColorEvent = script.Parent.Events.ChangePartColor\n\nSchema.OnSetup = function(timePositionObject)\n\tprint(\"OnSetup (Server)\")\n\n\tserverEnvironment = EventSequencer.getCurrentSceneEnvironment()\n\n\tpartColorConnection = changePartColorEvent.OnServerEvent:Connect(function(player, changedPart, newColor)\n\t\tserverEnvironment.changedPart.Color = newColor\n\tend)\nend\n```\n\n----------------------------------------\n\nTITLE: Categorical Signal Example (Diversifying) in Lua\nDESCRIPTION: This provides an example calculation for the diversifying signal. It utilizes the `num_players_same_RpgClass` and `occupancy` variables.  The final result is calculated by inverting the base score. The example shows how the provided formula can be used with sample values.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/matchmaking/attributes-and-signals.md#_snippet_18\n\nLANGUAGE: lua\nCODE:\n```\nlocal num_players_same_RpgClass = 15\nlocal occupancy = 19\n\nlocal score = num_players_same_RpgClass / occupancy\nreturn score\n```\n\n----------------------------------------\n\nTITLE: Accessing MouthRight Control in Roblox\nDESCRIPTION: Reference to the MouthRight control which moves the mouth to the character's right. Unlike JawRight, this only moves the mouth and not the jaw, teeth, or tongue.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/characters/facial-animation/facs-poses-reference.md#_snippet_24\n\nLANGUAGE: Roblox\nCODE:\n```\nClass.FaceControls.MouthRight\n```\n\n----------------------------------------\n\nTITLE: Filtering by Numeric Property Not Equal To\nDESCRIPTION: Finds all `BasePart` instances where the `Transparency` property is not equal to 0.5. Uses the `~=` operator for inequality comparison.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/studio/explorer.md#_snippet_3\n\nLANGUAGE: RobloxSearchQuery\nCODE:\n```\nTransparency ~= 0.5\n```\n\n----------------------------------------\n\nTITLE: Requiring a ModuleScript in a Server Script\nDESCRIPTION: Shows how to load the same ModuleScript from a server script, demonstrating code reuse across the client-server boundary.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/scripting/module.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal PickupManager = require(ReplicatedStorage:WaitForChild(\"PickupManager\"))\n```\n\n----------------------------------------\n\nTITLE: Handling Mesh Read Failure\nDESCRIPTION: This error indicates a failure to read mesh data. Ensure the associated body part exists and its mesh data is intact.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/validation-errors.md#_snippet_40\n\nLANGUAGE: Text\nCODE:\n```\nFailed to read mesh. Make sure the body part exists and try again.\n```\n\n----------------------------------------\n\nTITLE: Accessing RightDimpler Control in Roblox\nDESCRIPTION: Reference to the RightDimpler control which moves the corners of the right side of the mouth back toward the teeth, creating a dimple effect.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/characters/facial-animation/facs-poses-reference.md#_snippet_30\n\nLANGUAGE: Roblox\nCODE:\n```\nClass.FaceControls.RightDimpler\n```\n\n----------------------------------------\n\nTITLE: Handling Prompt Hidden Events\nDESCRIPTION: Sets up an event listener for when a canvas interaction prompt is hidden from a player.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/surface-art.md#_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal Players = game:GetService(\"Players\")\n\nlocal SurfaceArt = require(ReplicatedStorage:WaitForChild(\"SurfaceArt\"))\n\nSurfaceArt.promptClosed:Connect(function(canvas)\n\tprint(Players.LocalPlayer, canvas)\nend)\n```\n\n----------------------------------------\n\nTITLE: Defining Content Sections Data for Roblox Platform in JavaScript\nDESCRIPTION: This JavaScript snippet declares a constant array \"sections\" that organizes content into two main sections covering discovery, localization, analytics, and game design on Roblox. Each section contains descriptive metadata, nested content items with titles, descriptions, images, and navigation links. This structured data drives the content rendered in the UI and enables easy updates to the displayed information. Dependencies include a JavaScript runtime environment that supports ES module syntax.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/scale.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const sections = [\n  {\n    description: \"Our efficient discovery capabilities offer a massive opportunity to find the right audience and acquire new users. We also provide a robust analytics suite of tools to measure and gain insights on your experience's performance. This allows you to adjust content strategies and rapidly iterate to get your desired outcome.\",\n    content: [\n      {\n        title: \"Discovery for millions of users on a variety of devices and form factors\",\n        description: \"Roblox works out of the box on PlayStation, Xbox, Android, iOS, PC, Mac, and Oculus. You get one-click publish and discovery that reaches hundreds of millions of users on a vast social network.\",\n        image: \"/assets/landing/device-family.png\",\n        links: [\n          { text: \"Discovery\", href: \"./discovery\" },\n          { text: \"Roblox user base\", href: \"./production/roblox-user-base\" }\n        ]\n      },\n      {\n        title: \"Global and localized\",\n        description: \"Users from all over the world can interact on our platform, enabled by our robust localization tools, letting you take advantage of automatic text and chat translation or custom translations provided by you.\",\n        image: \"/assets/landing/chat-translation.jpg\",\n        links: [\n          { text: \"Localization\", href: \"./production/localization\" }\n        ]\n      }\n    ]\n  },\n  {\n    title: \"Analyze and grow your creations\",\n    description: \"Roblox offers a variety of analytics features to help you chart growth, track user behavior and retention, and find opportunities for optimization. You can use analytics to understand what actions you can take to grow your creations.\",\n    content: [\n      {\n        title: \"View metrics and performance\",\n        description: \"Measure and gain insight into your experience's performance to adjust content strategies. View dashboards on retention, engagement, acquisition, and monetization.\",\n        image: \"/assets/analytics/analytics-dashboard/Explore-Mode-Preview.png\",\n        links: [\n          { text: \"Core metrics\", href: \"./production/analytics/analytics-dashboard\" },\n          { text: \"Performance\", href: \"./production/analytics/performance\" }\n        ]\n      },\n      {\n        title: \"Create and track events\",\n        description: \"Add event tracking to your experiences and visualize monetization and usage patterns.\",\n        image: \"/assets/analytics/event-types/Overview-Economy-Funnels.png\",\n        links: [\n          { text: \"Events\", href: \"./production/analytics/event-types\" }\n        ]\n      },\n      {\n        title: \"Grow your experiences with great design\",\n        description: \"Learn how successful experiences design their core game loops, UI and UX, monetization, and more.\",\n        image: \"./assets/game-design/introduction-to-quest-design/quest-design-7.png\",\n        links: [\n          { text: \"Design\", href: \"./production/game-design\" }\n        ]\n      }\n    ]\n  }\n];\n```\n\n----------------------------------------\n\nTITLE: Retrieving Surface Art Canvases\nDESCRIPTION: Shows how to get all canvases tagged with the SurfaceCanvas tag using the getCanvases method.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/surface-art.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal SurfaceArt = require(ReplicatedStorage:WaitForChild(\"SurfaceArt\"))\n\nlocal canvases = SurfaceArt.getCanvases()\n```\n\n----------------------------------------\n\nTITLE: Accessing Funneler Control in Roblox\nDESCRIPTION: Reference to the Funneler control which makes an 'O' shape with the mouth, useful for expressing surprise or creating speech animations.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/characters/facial-animation/facs-poses-reference.md#_snippet_20\n\nLANGUAGE: Roblox\nCODE:\n```\nClass.FaceControls.Funneler\n```\n\n----------------------------------------\n\nTITLE: Creating WrapTarget from Imported Meshes in Roblox\nDESCRIPTION: Shows the naming convention for mesh objects that are automatically converted to WrapTarget objects during import using the '_OuterCage' suffix.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/parts/meshes.md#_snippet_7\n\nLANGUAGE: Roblox\nCODE:\n```\nClass.WrapTarget\n```\n\n----------------------------------------\n\nTITLE: Accessing LowerLipSuck Control in Roblox\nDESCRIPTION: Reference to the LowerLipSuck control which rolls the lower lip up over the teeth, used for certain expressions or speech animations.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/characters/facial-animation/facs-poses-reference.md#_snippet_21\n\nLANGUAGE: Roblox\nCODE:\n```\nClass.FaceControls.LowerLipSuck\n```\n\n----------------------------------------\n\nTITLE: Accessing RightLipStretcher Control in Roblox\nDESCRIPTION: Reference to the RightLipStretcher control which stretches the corners of the mouth apart. This is a required pose for Marketplace avatar assets.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/characters/facial-animation/facs-poses-reference.md#_snippet_14\n\nLANGUAGE: Roblox\nCODE:\n```\nClass.FaceControls.RightLipStretcher\n```\n\n----------------------------------------\n\nTITLE: GameSettings Script - Roblox\nDESCRIPTION: This Lua script stores the game's configuration variables. These include intermissionDuration, roundDuration, minimumPlayers, and transitionTime, all set to integer values. These game settings are used to control timing within the game loop. The script returns the GameSettings table, allowing access to the config values from other scripts.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/battle-royale-series/coding-the-game-loop.md#_snippet_14\n\nLANGUAGE: lua\nCODE:\n```\nlocal GameSettings = {}\n\n-- Game Variables\nGameSettings.intermissionDuration = 5\nGameSettings.roundDuration = 10\nGameSettings.minimumPlayers = 2\nGameSettings.transitionTime = 5\n\nreturn GameSettings\n```\n\n----------------------------------------\n\nTITLE: Handling Activation of Selfie Mode Actions in Roblox LocalScript\nDESCRIPTION: Sets up a listener for the 'actionActivated' event, which fires when a primary or sub-action is activated, such as 'Depth of Field' or 'Pose'. Receives the 'Action' object as a parameter and logs its name upon activation. Used in a LocalScript with self-referenced SelfieMode module.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/selfie-mode.md#_snippet_17\n\nLANGUAGE: Lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal SelfieMode = require(ReplicatedStorage:WaitForChild(\"SelfieMode\"))\n\nSelfieMode.actionActivated:Connect(function(action)\n\tprint(action.name, \"activated\")\nend)\n```\n\n----------------------------------------\n\nTITLE: Referencing BasePart Class in Roblox\nDESCRIPTION: Shows the parent class reference for MeshPart objects, indicating that meshes inherit properties and functionality from the BasePart class in Roblox.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/parts/meshes.md#_snippet_2\n\nLANGUAGE: Roblox\nCODE:\n```\nClass.BasePart\n```\n\n----------------------------------------\n\nTITLE: Filtering by Exact Class Name\nDESCRIPTION: Finds all instances that are exactly of the class `Part`. Uses the `classname:` or `c:` prefix.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/studio/explorer.md#_snippet_8\n\nLANGUAGE: RobloxSearchQuery\nCODE:\n```\nclassname:Part\n```\n\n----------------------------------------\n\nTITLE: Roblox OAuth 2.0 Base URL\nDESCRIPTION: The base URL for all Roblox OAuth 2.0 API endpoints. All specific endpoint paths are appended to this URL.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/auth/oauth2-reference.md#_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\nhttps://apis.roblox.com/oauth\n```\n\n----------------------------------------\n\nTITLE: Executing Player Removal and Value Update - Lua\nDESCRIPTION: Finalizes the removal process by deleting the player from the activePlayers table, updating the number of players left, and re-checking for win conditions. Uses 'table.remove', updates a display value for UI synchronization, and invokes win state checks. Dependencies include playersLeft value object and the checkPlayerCount function.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/battle-royale-series/ending-matches.md#_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nlocal function removeActivePlayer(player)\n\tfor playerKey, whichPlayer in activePlayers do\n\t\tif whichPlayer == player then\n\t\t\ttable.remove(activePlayers, playerKey)\n\t\t\tplayersLeft.Value = #activePlayers\n\t\t\tcheckPlayerCount()\n\t\tend\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Detecting Art Selector UI Visibility\nDESCRIPTION: Sets up event listeners for when the surface art selector UI is shown or hidden from a player.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/surface-art.md#_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal Players = game:GetService(\"Players\")\n\nlocal SurfaceArt = require(ReplicatedStorage:WaitForChild(\"SurfaceArt\"))\n\nSurfaceArt.selectorShown:Connect(function()\n\tprint(Players.LocalPlayer, \"opened surface art selector\")\nend)\n```\n\n----------------------------------------\n\nTITLE: Initiating Roblox Open Cloud Get Instance API Call - cURL\nDESCRIPTION: This cURL snippet demonstrates how to initiate the request to retrieve a specific Roblox engine instance by its ID using the Open Cloud API from the command line. It sends a GET request and expects an initial Operation object in the response, which requires polling for the final instance data.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/guides/instance.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl --include --location --request GET \"https://apis.roblox.com/cloud/v2/universes/<universeId>/places/<placeId>/instances/<instanceId>\" --header \"x-api-key: <api-key>\"\n```\n\n----------------------------------------\n\nTITLE: Handling Missing Instance Error\nDESCRIPTION: This error occurs when the system fails to find a required instance of a specific asset type (`%s`). Ensure an instance of this type exists in the expected location.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/validation-errors.md#_snippet_35\n\nLANGUAGE: Text\nCODE:\n```\nFailed to find an instance of the asset type `%s`. Make sure one exists and try again.\n```\n\n----------------------------------------\n\nTITLE: Calculating Occupancy Signal Score\nDESCRIPTION: Calculates a numerical signal score representing the ratio of players in the server to the server's capacity.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/matchmaking/attributes-and-signals.md#_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\noccupancySignalScore = (# players in server) / serverCapacity\n```\n\n----------------------------------------\n\nTITLE: Enabling or Disabling SelfieMode for the Player in LocalScript - Lua\nDESCRIPTION: Shows how to disable or enable SelfieMode functionality, removing UI and disconnecting events when disabled. Requires SelfieMode module from ReplicatedStorage, expects a boolean argument, and should be called from a LocalScript. No return value; all module UI is hidden or restored accordingly.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/selfie-mode.md#_snippet_14\n\nLANGUAGE: Lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal SelfieMode = require(ReplicatedStorage:WaitForChild(\"SelfieMode\"))\n\nSelfieMode.setEnabled(false)\n```\n\n----------------------------------------\n\nTITLE: Server Schema OnEndScene with Connection Disconnect\nDESCRIPTION: This code snippet demonstrates how to define the OnEndScene lifecycle hook in a server-side event sequencer schema. It disconnects the partColorConnection, which was created in OnSetup, to clean up resources.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/event-sequencer.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nSchema.OnEndScene = function()\n\tprint(\"OnEndScene (Server)\")\n\n\tif partColorConnection then\n\t\tpartColorConnection:Disconnect()\n\t\tpartColorConnection = nil\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Removing All Surface Art\nDESCRIPTION: Shows how to clear all artwork from all surfaces using the removeAllArt method.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/surface-art.md#_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal SurfaceArt = require(ReplicatedStorage:WaitForChild(\"SurfaceArt\"))\n\nSurfaceArt.removeAllArt()\n```\n\n----------------------------------------\n\nTITLE: Handling Mesh Bounds Validation Execution Failure\nDESCRIPTION: A generic error indicating that the `validateMeshBounds` check failed to execute.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/validation-errors.md#_snippet_48\n\nLANGUAGE: Text\nCODE:\n```\nFailed to execute validateMeshBounds check.\n```\n\n----------------------------------------\n\nTITLE: Correcting Incorrect Hierarchy (Missing Folders) Error\nDESCRIPTION: This error signals an incorrect instance hierarchy for the asset (`%s`), specifically mentioning missing required folders (`%s`). Adjust the hierarchy to include the necessary folders.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/validation-errors.md#_snippet_22\n\nLANGUAGE: Text\nCODE:\n```\nIncorrect hierarchy for `%s` with the following missing folders: `%s`\n```\n\n----------------------------------------\n\nTITLE: Getting Services in GameManager Script (Roblox Lua)\nDESCRIPTION: Retrieves references to essential Roblox services, ServerStorage and Players, within the GameManager server script located in ServerScriptService. These services are needed to access module scripts and player information later in the script.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/battle-royale-series/coding-the-game-loop.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\n-- Services\nlocal ServerStorage = game:GetService(\"ServerStorage\")\nlocal Players = game:GetService(\"Players\")\n```\n\n----------------------------------------\n\nTITLE: Adding Players Service for Point Management in Roblox Luau\nDESCRIPTION: Gets the Players service which is needed to access player data including leaderboard statistics.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-3/give-points.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\n-- Points values\nlocal smallPoints = 10\nlocal largePoints = 50\nlocal losePoints = 100\n\n-- Services needed\nlocal Players = game:GetService(\"Players\")\n```\n\n----------------------------------------\n\nTITLE: Example Token Response from Authorization Code Exchange (Roblox OAuth 2.0)\nDESCRIPTION: An example JSON response received after successfully exchanging an authorization code via the `POST /oauth/v1/token` endpoint. It includes the `access_token`, `refresh_token`, `token_type` (Bearer), `expires_in` (seconds until access token expiry), and the granted `scope`.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/auth/oauth2-reference.md#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"access_token\": \"...\",\n  \"refresh_token\": \"...\",\n  \"token_type\": \"Bearer\",\n  \"expires_in\": 899,\n  \"scope\": \"universe-messaging-service:publish\"\n}\n```\n\n----------------------------------------\n\nTITLE: Add Logging to Get a Sense of Data\nDESCRIPTION: This snippet adds a loop to print the direction of each laser beam calculated by the getDirectionsForBlast function. It can be helpful to get a sense of what this data looks like.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/gameplay-scripting/detect-hits.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal rayDirections = getDirectionsForBlast(currentCamera.CFrame, blasterConfig)\nfor _, direction in rayDirections do  -- new line\n    print(direction)                  -- new line\nend                                   -- new line\nlocal rayResults = castLaserRay(localPlayer, currentCamera.CFrame.Position, rayDirections)\n```\n\n----------------------------------------\n\nTITLE: Handling printoutShown Event - Roblox Lua\nDESCRIPTION: Provides an example of using the printoutShown event to execute custom code when the PhotoBooth printout is displayed to the user. The event is accessed from the PhotoBooth module within a LocalScript context. No parameters are passed to the callback; typically used to trigger sound, effects, or UI changes upon photo display. Dependencies include correct PhotoBooth module loading.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/photo-booth.md#_snippet_6\n\nLANGUAGE: Lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal PhotoBooth = require(ReplicatedStorage:WaitForChild(\"PhotoBooth\"))\n\nPhotoBooth.printoutShown:Connect(function()\n\tprint(\"The printout is showing\")\nend)\n```\n\n----------------------------------------\n\nTITLE: Finding All Grandchildren Using Wildcards\nDESCRIPTION: Finds all grandchildren of instances named 'Cart', excluding direct children. Uses multiple wildcards for specific levels.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/studio/explorer.md#_snippet_15\n\nLANGUAGE: RobloxSearchQuery\nCODE:\n```\nCart.*.*\n```\n\n----------------------------------------\n\nTITLE: Handling Selector Hidden Events\nDESCRIPTION: Sets up an event listener for when the surface art selector UI is hidden from a player.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/modules/surface-art.md#_snippet_11\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal Players = game:GetService(\"Players\")\n\nlocal SurfaceArt = require(ReplicatedStorage:WaitForChild(\"SurfaceArt\"))\n\nSurfaceArt.selectorHidden:Connect(function()\n\tprint(Players.LocalPlayer, \"closed surface art selector\")\nend)\n```\n\n----------------------------------------\n\nTITLE: Accessing Luau Array with Variable Index\nDESCRIPTION: Modifies the `speak` function to use the `dialogueIndex` variable to access the `dialogueArray`. This allows the script to dynamically select a dialogue line based on the current value of the index.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-5/intro-to-arrays.md#_snippet_5\n\nLANGUAGE: Luau\nCODE:\n```\nlocal function speak()\n  local dialogue = dialogueArray[dialogueIndex]\n  Chat:Chat(head, dialogue)\nend\n```\n\n----------------------------------------\n\nTITLE: Declaring Luau Dialogue Index Variable\nDESCRIPTION: Introduces a variable `dialogueIndex` initialized to 1. This variable will track the current position in the `dialogueArray` to determine which dialogue line should be displayed next.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-5/intro-to-arrays.md#_snippet_4\n\nLANGUAGE: Luau\nCODE:\n```\nlocal dialogueArray = {\"Hi!\", \"Do I know you?\", \"Goodbye!\"}\nlocal dialogueIndex = 1\n```\n\n----------------------------------------\n\nTITLE: Numerical Signal Example (Constant Value) in Lua\nDESCRIPTION: This example demonstrates the numerical signal calculation against a constant value using specific data.  The `server_GameTime`, `constant_value`, and `max_relevant_difference` variables are used. This provides a clear example of the formula's application within a practical scenario.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/matchmaking/attributes-and-signals.md#_snippet_22\n\nLANGUAGE: lua\nCODE:\n```\nlocal server_GameTime = 500\nlocal max_relevant_difference = 1000\nlocal constant_value = 1000\n\nlocal diff = math.abs(server_GameTime - constant_value)\nlocal score = math.min(diff / max_relevant_difference, 1)\n```\n\n----------------------------------------\n\nTITLE: Defining EyesLookRight Pose in Roblox FaceControls\nDESCRIPTION: Identifies the 'EyesLookRight' pose using the Roblox FaceControls API reference. This pose directs the character's eye gaze towards the right. This pose must be included for avatar assets intended for the Roblox Marketplace.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/characters/facial-animation/facs-poses-reference.md#_snippet_2\n\nLANGUAGE: Roblox API\nCODE:\n```\nClass.FaceControls.EyesLookRight|EyesLookRight\n```\n\n----------------------------------------\n\nTITLE: Populating _places Table With Actual Place IDs in Roblox - Lua\nDESCRIPTION: This snippet shows how the _places table should look after all unique Roblox place IDs have been assigned to each key, establishing the complete mapping between place names and their numeric identifiers. The table should be updated in every relevant .rbxl game's configuration script to ensure consistent teleport functionality and cross-game referencing. Requires all places to be published and their IDs copied to the respective fields; no executable logic is included, and the table is strictly for configuration within the MainConfiguration context.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/battle-royale/installation-and-setup.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n-- List of named places in the game\nlocal _places = {\n lobby = 0123456789,\n gameplay_development = 0987654321,\n queue_default = 0123459876,\n queue_deathmatch = 0987651234,\n queue_teamDeathmatch = 0132457689,\n queue_freePlay = 0678912345\n}\n```\n\n----------------------------------------\n\nTITLE: message_parser.py\nDESCRIPTION: Contains functions to parse and verify Roblox webhook messages, extract user ID and game IDs, and validate message signatures to prevent replay attacks. Uses regex matching for footer and description content, HMAC SHA-256 for signature validation, and timestamp checks.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/webhooks/automate-right-to-erasure.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nimport time\nimport hmac\nimport hashlib\nimport re\nimport base64\n\nimport bot_config\n\n\"\"\"\nParses received message for Roblox signature and timestamp, the footer is only set if you\nconfigured webhook secret\n\"\"\"\ndef parse_footer(message):\n    if not message.embeds[0].footer or \\\n        not message.embeds[0].footer.text:\n        return \"\", 0\n    footer_match = re.match(\n        r\"Roblox-Signature: (.*), Timestamp: (.*)\",\n        message.embeds[0].footer.text\n    )\n    if not footer_match:\n        return \"\", 0\n    else:\n        signature = footer_match.group(1)\n        timestamp = int(footer_match.group(2))\n        return signature, timestamp\n\n\"\"\"\nVerifies Roblox signature with configured secret to check for validity\n\"\"\"\ndef validate_signature(message, signature, timestamp):\n    if not message or not signature or not timestamp:\n        return False\n\n    # Prevents replay attack within 300 seconds window\n    request_timestamp_ms = timestamp * 1000\n    window_time_ms = 300 * 1000\n    oldest_timestamp_allowed = round(time.time() * 1000) - window_time_ms\n    if request_timestamp_ms < oldest_timestamp_allowed:\n        return False\n\n    # Validates signature\n    timestamp_message = \"{}.{}\".format(timestamp, message.embeds[0].description)\n    digest = hmac.new(\n        bot_config.ROBLOX_WEBHOOK_SECRET.encode(),\n        msg=timestamp_message.encode(),\n        digestmod=hashlib.sha256\n    ).digest()\n    validated_signature = base64.b64encode(digest).decode()\n    if signature != validated_signature:\n        return False\n\n    # Valid signature\n    return True\n\n\"\"\"\nParses a received webhook messaged on Discord or Guilded. Extracts user ID, prevents replay attack\nbased on timestamp received, and verifies Roblox signature with configured secret to check for\nvalidity.\n\"\"\"\ndef parse_message(message):\n    # Parses received message for user ID and game ID\n    if len(message.embeds) != 1 or \\\n        not message.embeds[0].description:\n        return \"\", []\n    description_match = re.match(\n        r\"You have received a new notification for Right to Erasure for the User Id: (.*) in \" +\n        r\"the game\\(s\\) with Ids: (.*)\",\n        message.embeds[0].description\n    )\n    if not description_match:\n        return \"\", []\n    user_id = description_match.group(1)\n    start_place_ids = set(int(item.strip()) for item in description_match.group(2).split(\",\"))\n\n    signature, timestamp = parse_footer(message)\n    if validate_signature(message, signature, timestamp):\n        return user_id, start_place_ids\n    else:\n        return \"\", []\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Map Offset for Storm Center in Lua\nDESCRIPTION: Sets the map size and offset for the storm's center position. The map_offset value determines where players will be forced toward as the storm boundary shrinks, defaulting to the center of the map if unchanged.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/battle-royale/the-storm.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nmap_size = 2450 * 4,\nmap_offset = Vector3.new(4900, 0, 4900),\n```\n\n----------------------------------------\n\nTITLE: Addressing Missing Texture/SurfaceAppearance Error\nDESCRIPTION: This error indicates that the specified mesh (`%s`) has an empty `TextureID` property and lacks a child `SurfaceAppearance` instance. At least one of these must be defined to apply a texture or material.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/validation-errors.md#_snippet_7\n\nLANGUAGE: Text\nCODE:\n```\n`%s` has an empty TextureID and no child surface appearance instance. You need to define at least one of them.\n```\n\n----------------------------------------\n\nTITLE: Combining Grouped Queries with OR\nDESCRIPTION: Finds `BasePart` instances that satisfy either the first group (`Anchored=true` AND `CanCollide=true`) OR the second group (`Anchored=false` AND `CanCollide=false`). Parentheses are used for grouping conditions with the `or` operator.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/studio/explorer.md#_snippet_22\n\nLANGUAGE: RobloxSearchQuery\nCODE:\n```\n(Anchored=true CanCollide=true) or (Anchored=false CanCollide=false)\n```\n\n----------------------------------------\n\nTITLE: Correcting Excessive Texture Resolution Error\nDESCRIPTION: This error indicates that a texture used in the asset (`%s`) has dimensions (`%d`x`%d` pixels) exceeding the maximum allowed resolution (`%d`x`%d` pixels) for UGC uploads. Reduce the texture's resolution to meet the requirements.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/validation-errors.md#_snippet_9\n\nLANGUAGE: Text\nCODE:\n```\nYour textures exceeds the max texture size limit for UGC upload requirements.\n\nTexture resolution `%d`x`%d` px found in `%s` is higher than max size supported value of `%d`x`%d` px. You need to reduce the texture resolution.\n```\n\n----------------------------------------\n\nTITLE: Correcting Mesh Origin Centering Error\nDESCRIPTION: This error indicates that the bounding box for the mesh (`%s`) is not centered at the world origin (0,0,0). The maximum allowed distance from the origin is `%f`. Adjust the model's position so its center aligns closely with the origin.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/validation-errors.md#_snippet_15\n\nLANGUAGE: Text\nCODE:\n```\nBounds for the mesh `%s` are not centered at the origin. The max allowed distance is `%f`\n```\n\n----------------------------------------\n\nTITLE: Finding Grandchildren Under Specific Child Using Wildcard\nDESCRIPTION: Finds all direct children of instances named 'Barrier' which are themselves children of instances named 'Cart'. Chains the `.` operator for deeper ancestry search.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/studio/explorer.md#_snippet_14\n\nLANGUAGE: RobloxSearchQuery\nCODE:\n```\nCart.Barrier.*\n```\n\n----------------------------------------\n\nTITLE: Correcting Invalid Vertex Color Error\nDESCRIPTION: This error occurs when invalid vertex colors are found in the mesh model (`%s`). The color map must be edited to be entirely white, potentially with no transparency, depending on the specific error context.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/validation-errors.md#_snippet_5\n\nLANGUAGE: Text\nCODE:\n```\nInvalid vertex color found in mesh model `%s`. You need to edit the color map to be all white and try again.\n\nInvalid vertex color found in mesh model `%s`. You need to edit the color map to be all white with no transparency and try again.\n```\n\n----------------------------------------\n\nTITLE: Defining EyesLookDown Pose in Roblox FaceControls\nDESCRIPTION: Defines the 'EyesLookDown' pose within Roblox's FaceControls system using its API reference. This pose makes the character's eyes gaze downwards. It is a required pose if the avatar asset is intended for the Roblox Marketplace.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/characters/facial-animation/facs-poses-reference.md#_snippet_0\n\nLANGUAGE: Roblox API\nCODE:\n```\nClass.FaceControls.EyesLookDown|EyesLookDown\n```\n\n----------------------------------------\n\nTITLE: Multiple if statements Luau\nDESCRIPTION: Illustrates the inefficiency of using multiple independent `if` statements to achieve the same outcome as an if-elseif-else structure. This example intends to show a direct comparison to show the advantages of using the elseif/else approach for improving readability.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-3/multiple-conditions.md#_snippet_1\n\nLANGUAGE: Luau\nCODE:\n```\nif finishTime < 5  then\n   -- Get a gold medal\nend\n\nif finishTime >= 5 and <= 10 then\n   -- Get a silver medal\nend\n\nif finishTime > 10 and <= 15 then\n   -- Get a bronze medal\nend\n```\n\n----------------------------------------\n\nTITLE: OpenID Connect Discovery Document Response Example - JSON\nDESCRIPTION: Example JSON document returned from the .well-known/openid-configuration endpoint providing metadata about Roblox's Open Cloud OAuth 2.0 configuration. It includes endpoints for authorization, token handling, introspection, revocation, userinfo, signing keys, scopes supported, response types, and claims. This document enables dynamic discovery and automated integration with Roblox OAuth services.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/auth/oauth2-reference.md#_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"issuer\": \"https://apis.roblox.com/oauth/\",\n  \"authorization_endpoint\": \"https://apis.roblox.com/oauth/v1/authorize\",\n  \"token_endpoint\": \"https://apis.roblox.com/oauth/v1/token\",\n  \"introspection_endpoint\": \"https://apis.roblox.com/oauth/v1/token/introspect\",\n  \"revocation_endpoint\": \"https://apis.roblox.com/oauth/v1/token/revoke\",\n  \"resources_endpoint\": \"https://apis.roblox.com/oauth/v1/token/resources\",\n  \"userinfo_endpoint\": \"https://apis.roblox.com/oauth/v1/userinfo\",\n  \"jwks_uri\": \"https://apis.roblox.com/oauth/v1/certs\",\n  \"registration_endpoint\": \"https://create.roblox.com/dashboard/credentials\",\n  \"service_documentation\": \"https://create.roblox.com/docs/reference/cloud\",\n  \"scopes_supported\": [\n    \"openid\",\n    \"profile\",\n    \"email\",\n    \"verification\",\n    \"credentials\",\n    \"age\",\n    \"premium\",\n    \"roles\"\n  ],\n  \"response_types_supported\": [\"none\", \"code\"],\n  \"subject_types_supported\": [\"public\"],\n  \"id_token_signing_alg_values_supported\": [\"ES256\"],\n  \"claims_supported\": [\n    \"sub\",\n    \"type\",\n    \"iss\",\n    \"aud\",\n    \"exp\",\n    \"iat\",\n    \"nonce\",\n    \"name\",\n    \"nickname\",\n    \"preferred_username\",\n    \"created_at\",\n    \"profile\",\n    \"email\",\n    \"email_verified\",\n    \"verified\",\n    \"age_bracket\",\n    \"premium\",\n    \"roles\",\n    \"internal_user\"\n  ],\n  \"token_endpoint_auth_methods_supported\": [\n    \"client_secret_post\",\n    \"client_secret_basic\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Accordion Item for a Course Chapter (JSX/Markdown)\nDESCRIPTION: Uses a `BaseAccordion` component to display a course chapter title using `Typography`. The details section contains a brief description and a Markdown link to the chapter's content page. This pattern is used for chapters 1 and 2.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/user-interface-design/index.md#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<BaseAccordion>\n   <AccordionSummary>\n      <Typography variant=\"h4\">Chapter 1 - Choose an art style</Typography>\n   </AccordionSummary>\n   <AccordionDetails>\n\n    Learn how to [plan an aesthetic direction](choose-an-art-style.md) for your UI elements.\n\n   </AccordionDetails>\n   </BaseAccordion>\n```\n\nLANGUAGE: JSX\nCODE:\n```\n<BaseAccordion>\n   <AccordionSummary>\n      <Typography variant=\"h4\">Chapter 2 - Wireframe your layouts</Typography>\n   </AccordionSummary>\n   <AccordionDetails>\n\n    Learn how to [design the structure and flow](wireframe-your-layouts.md) of the information you want to communicate through in various workflows.\n\n   </AccordionDetails>\n   </BaseAccordion>\n```\n\n----------------------------------------\n\nTITLE: Arranging Template Previews and Links using <GridContainer> (Markdown/JSX)\nDESCRIPTION: Utilizes a <GridContainer> component, configured with 'numColumns=\"2\"', to create a two-column layout within a tab. This structure typically pairs a template preview image (<figure>, <img>, <figcaption>) in one column with corresponding download links (<a>) in the adjacent column.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/characters/project-files.md#_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n<GridContainer numColumns=\"2\">\n  <figure><img src=\"../../assets/art/avatar/templates/Round-Head-Templates.png\"/><figcaption><center>Round</center></figcaption></figure>\n  <figure>\n    <br /><br />\n    Female: <a href=\"../../assets/art/reference-files/RoundFemale.zip\">RoundFemale.zip</a> <br />\n    Male: <a href=\"../../assets/art/reference-files/RoundMale.zip\">RoundMale.zip</a>\n  </figure>\n</GridContainer>\n```\n\n----------------------------------------\n\nTITLE: Importing FBX Model into Roblox Studio Using 3D Importer (Roblox Studio, English)\nDESCRIPTION: This snippet describes the process of importing an FBX file into Roblox Studio via the 3D Importer tool. It includes steps to open the import dialog, select the FBX file, and handle potential warnings or errors related to the imported mesh. The process adds the model as a Class.Model instance into the workspace for further editing or use.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/accessories/creating/importing.md#_snippet_0\n\nLANGUAGE: None\nCODE:\n```\nUse the 3D Importer to import your `.fbx` into Studio:\n\n1. Open Studio and navigate to the toolbar's **Avatar** tab.\n2. Click the **Import 3D** button. A file browser displays.\n3. Select your exported `.fbx` and verify any possible warnings or errors.\n   1. Warnings or errors related to the clothing mesh may require returning to Blender to resolve.\n4. Select **Import** to add the model to your workspace.\n   <img src=\"../../../assets/art/accessories/creating/Exporting-Clothing-In-Studio.png\" />\n```\n\n----------------------------------------\n\nTITLE: Recreating Sample Floor Geometry with Exact Specifications\nDESCRIPTION: Detailed instructions with precise measurements and positions for recreating the exact floor geometry shown in the sample Environment Art - Greyboxing place file, including all part sizes and CFrame positions.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/environmental-art/greybox-your-environment.md#_snippet_1\n\nLANGUAGE: Roblox Studio\nCODE:\n```\nMain Floor Parts:\n- Left-side floor: Size(105, 1, 185), Position(-77.5, 4.5, 252.5)\n- Right-side floor: Size(105, 1, 185), Position(-77.5, 4.5, 67.5)\n- Middle left-side floor: Size(20, 10, 50), Position(-15, 0, 185)\n- Middle right-side floor: Size(20, 10, 50), Position(-15, 0, 135)\n\nMezzanine Floor Parts:\n- Left-side floor: Size(70, 5, 35), Position(-110, 7.5, 177.5)\n- Right-side floor: Size(70, 5, 35), Position(-110, 7.5, 142.5)\n- Left-side ledge: Size(10, 5, 10), Position(-70, 7.5, 165)\n- Right-side ledge: Size(10, 5, 10), Position(-70, 7.5, 155)\n- Ledge wall: Size(1, 3, 20), Position(-65.5, 11.5, 160)\n\nRise in Elevation Parts:\n- Left-side elevation: Size(15, 5, 10), Position(-102.5, 7.5, 200), Orientation(0, 180, 0)\n- Right-side elevation: Size(15, 5, 10), Position(-102.5, 7.5, 120), Orientation(0, 0, 0)\n- Middle left-side elevation: Size(15, 5, 10), Position(-70, 7.5, 177.5), Orientation(0, -90, 0)\n- Middle right-side elevation: Size(15, 5, 10), Position(-70, 7.5, 142.5), Orientation(0, -90, 0)\n\nDrop in Elevation Part:\n- Size(270, 11, 45), Position(-2.5, -0.5, 160), Orientation(0, -90, 0)\n```\n\n----------------------------------------\n\nTITLE: Handling Render/Outer Mesh Check Execution Error\nDESCRIPTION: This error occurs when the system fails to execute the check determining if a render mesh (`%s`) is contained within its outer mesh (`%s`). Ensure both meshes exist and are properly configured.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/validation-errors.md#_snippet_32\n\nLANGUAGE: Text\nCODE:\n```\nFailed to execute render mesh inside outer mesh check for `%s` and `%s`. Make sure the meshes exists and try again.\n```\n\n----------------------------------------\n\nTITLE: Example Token Endpoint Response JSON\nDESCRIPTION: This JSON object presents a sample response from the token endpoint after successfully exchanging an authorization code. It contains access token, refresh token, id_token, token_type and the granted scopes. These tokens are essential for subsequent API calls.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/auth/oauth2-develop.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n```json title=\"Example Token Endpoint Response\"\n{\n  \"access_token\": \"eyJhbGciOiJFUzI1NiIsImtpZCI6IlBOeHhpb2JFNE8zbGhQUUlUZG9QQ3FCTE81amh3aXZFS1pHOWhfTGJNOWMiLCJ0eXAiOiJKV11234.eyJzdWIiOiIyMDY3MjQzOTU5IiwiYWlkIjoiM2Q2MWU3NDctM2ExNS00NTE4LWJiNDEtMWU3M2VhNDUyZWIwIiwic2NvcGUiOiJvcGVuaWQ6cmVhZCBwcm9maWxlOnJlYWQiLCJqdGkiOiJBVC5QbmFWVHpJU3k2YkI5TG5QYnZpTCIsIm5iZiI6MTY5MTYzOTY5OCwiZXhwIjoxNjkxNjQwNTk4LCJpYXQiOjE2OTE2Mzk2OTgsImlzcyI6Imh0dHBzOi8vYXBpcy5yb2Jsb3guY29tL29hdXRoLyIsImF1ZCI6IjcyOTA2MTAzOTc5ODc5MzQ5Nj1234.BjwMkC8Q5a_iP1Q5Th8FrS7ntioAollv_zW9mprF1ats9CD2axCvupZydVzYphzQ8TawunnYXp0Xe8k0t8ithg\",\n  \"refresh_token\": \"eyJhbGciOiJkaXIiLCJlbmMiOiJBMjU2Q0JDLUhTNTEyIiwia2lkIjoidGpHd1BHaURDWkprZEZkREg1dFZ5emVzRWQyQ0o1NDgtUi1Ya1J1TTBBRSIsInR5cCI6IkpXVCJ9..nKYZvjvXH6msDG8Udluuuw.PwP-_HJIjrgYdY-gMR0Q3cabNwIbmItcMEQHx5r7qStVVa5l4CbrKwJvjY-w9xZ9VFb6P70WmXndNifnio5BPZmivW5QkJgv5_sxLoCwsqB1bmEkz2nFF4ANLzQLCQMvQwgXHPMfCK-lclpVEwnHk4kemrCFOvfuH4qJ1V0Q0j0WjsSU026M67zMaFrrhSKwQh-SzhmXejhKJOjhNfY9hAmeS-LsLLdszAq_JyN7fIvZl1fWDnER_CeDAbQDj5K5ECNOHAQ3RemQ2dADVlc07VEt2KpSqUlHlq3rcaIcNRHCue4GfbCc1lZwQsALbM1aSIzF68klXs1Cj_ZmXxOSOyHxwmbQCHwY7aa16f3VEJzCYa6m0m5U_oHy84iQzsC-_JvBaeFCachrLWmFY818S-nH5fCIORdYgc4s7Fj5HdULnnVwiKeQLKSaYsfneHtqwOc_ux2QYv6Cv6Xn04tkB2TEsuZ7dFwPI-Hw2O30vCzLTcZ-Fl08ER0J0hhq4ep7B641IOnPpMZ1m0gpJJRPbHX_ooqHol9zHZ0gcLKMdYy1wUgsmn_nK_THK3m0RmENXNtepyLw_tSd5vqqIWZ5NFglKSqVnbomEkxneEJRgoFhBGMZiR-3FXMaVryUjq-N.Q_t4NGxTUSMsLVEppkTu0Q6rwt2rKJfFGuvy3s12345\",\n  \"token_type\": \"Bearer\",\n  \"expires_in\": 899,\n  \"id_token\": \"eyJhbGciOiJFUzI1NiIsImtpZCI6IkNWWDU1Mi1zeWh4Y1VGdW5vNktScmtReFB1eW15YTRQVllodWdsd3hnNzgiLCJ0eXAiOiJKV11234.eyJzdWIiOiIyMDY3MjQzOTU5IiwibmFtZSI6ImxpbmtzZ29hdCIsIm5pY2tuYW1lIjoibGlua3Nnb2F0IiwicHJlZmVycmVkX3VzZXJuYW1lIjoibGlua3Nnb2F0IiwiY3JlYXRlZF9hdCI6MTYwNzM1NDIzMiwicHJvZmlsZSI6Imh0dHBzOi8vd3d3LnJvYmxveC5jb20vdXNlcnMvMjA2NzI0Mzk1OS9wcm9maWxlIiwibm9uY2UiOiIxMjM0NSIsImp0aSI6IklELnltd3ZjTUdpOVg4azkyNm9qd1I5IiwibmJmIjoxNjkxNjM5Njk4LCJleHAiOjE2OTE2NzU2OTgsImlhdCI6MTY5MTYzOTY5OCwiaXNzIjoiaHR0cHM6Ly9hcGlzLnJvYmxveC5jb20vb2F1dGgvIiwiYXVkIjoiNzI5MDYxMDM5Nzk4NzkzNDk2NCJ9.kZgCMJQGsariwCi8HqsUadUBMM8ZOmf_IPDoWyQY9gVX4Kx3PubDz-Q6MvZ9eU5spNFz0-PEH-G2WSvq2ljDyg\",\n  \"scope\": \"openid profile\"\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Positioning Top-Most Trim Assets in Roblox\nDESCRIPTION: A data table showing the exact positioning information for placing the top-most trim modular assets around the roof perimeter. Includes asset names, CFrame positions, and orientation values to recreate the sample environment.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/environmental-art/construct-your-world.md#_snippet_11\n\nLANGUAGE: Lua\nCODE:\n```\nExtTrimBLong\t`-48, 37, 285`\t`0, -90, 0`\nExtTrimBLong\t`-8, 37, 285`\t`0, 0, 0`\nExtTrimBLong\t`-8, 37, 240`\t`0, 0, 0`\nExtTrimBLong\t`-8, 37, 195`\t`0, 90, 0`\nExtTrimBLong\t`-48, 37, 195`\t`0, 90, 0`\nExtTrimBLong\t`-89, 37, 195`\t`0, 0, 0`\nExtTrimBLong\t`-89, 37, 160`\t`0, 0, 0`\nExtTrimBLong\t`-88, 37, 125`\t`0, -90, 0`\nExtTrimBLong\t`-48, 37, 125`\t`0, -90, 0`\nExtTrimBLong\t`-8, 37, 125`\t`0, 0, 0`\nExtTrimBLong\t`-8, 37, 80`\t`0, 0, 0`\nExtTrimBLong\t`-8, 37, 35`\t`0, 90, 0`\nExtTrimBCorner\t`-8, 37, 285`\t`0, 0, 0`\nExtTrimBCorner\t`-8, 37, 195`\t`0, 90, 0`\nExtTrimBCorner\t`-8, 37, 125`\t`0, 0, 0`\nExtTrimBCorner\t`-8, 37, 35`\t`0, 90, 0`\n```\n\n----------------------------------------\n\nTITLE: Installing the Rojo Plugin for Roblox Studio using Bash\nDESCRIPTION: Executes the Rojo command-line tool to install the necessary plugin within Roblox Studio. This plugin is required to establish the connection between the Rojo server (managing local files) and the Studio environment for real-time synchronization. Requires Rojo to be installed and accessible in the system's PATH.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/projects/external-tools.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrojo plugin install\n```\n\n----------------------------------------\n\nTITLE: Getting User Info with Roblox OAuth v1 - bash\nDESCRIPTION: Sends a GET request to the userinfo endpoint authorized by a Bearer access token in the HTTP header to retrieve Roblox user metadata. The response JSON contains claims such as user ID, display name, username, account creation timestamp, profile URL, and avatar image URL. The 'sub' claim uniquely identifies the user independent of mutable usernames.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/auth/oauth2-reference.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request GET 'https://apis.roblox.com/oauth/v1/userinfo' \\\n--header 'Authorization: Bearer eyjlflabtfl...4gxqYBG'\n```\n\n----------------------------------------\n\nTITLE: Defining a Luau Constant for Wait Time\nDESCRIPTION: Declares a local variable `VANISH_RATE` and sets its value to 1.5. This variable acts as a constant (indicated by the convention of using `ALL_CAPS`) to control the duration of the delay between part disappearance steps.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-5/loops-and-arrays.md#_snippet_2\n\nLANGUAGE: Luau\nCODE:\n```\nlocal VANISH_RATE = 1.5\n\nlocal pathArray = {\n\tworkspace.Part1,\n\tworkspace.Part2,\n\tworkspace.Part3\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Indoor Floor Blocks in Roblox Studio (Sample)\nDESCRIPTION: Provides the necessary part configurations (Size, Position) and property settings (Color, Material, MaterialVariant) to replicate the indoor floor blocks from the sample Environment Art place file within Roblox Studio. This uses block parts with specific dimensions and the 'GlossyTiles' material variant.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/environmental-art/construct-your-world.md#_snippet_0\n\nLANGUAGE: Luau\nCODE:\n```\n-- Indoor Floor Blocks (Blocks)\n-- Part: Left-side top area\nSize = Vector3.new(57.5, 6, 142)\nCFrame.Position = Vector3.new(-123.75, 2, 281)\n\n-- Part: Left-side bottom area\nSize = Vector3.new(64, 6, 164.5)\nCFrame.Position = Vector3.new(-63, 2, 269.75)\n\n-- Part: Middle top area\nSize = Vector3.new(53, 6, 60)\nCFrame.Position = Vector3.new(-119.5, 7, 160)\n\n-- Part: Right-side top area\nSize = Vector3.new(57.5, 6, 142)\nCFrame.Position = Vector3.new(-123.75, 2, 48.5)\n\n-- Part: Right-side bottom area\nSize = Vector3.new(64, 5, 162.5)\nCFrame.Position = Vector3.new(-63, 2.5, 51.25)\n\n-- Properties for all indoor blocks:\nColor = Color3.fromRGB(248, 248, 248)\nMaterial = Enum.Material.Concrete\nMaterialVariant = \"GlossyTiles\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Parts Properties (Block, SurfaceLight, SpotLight)\nDESCRIPTION: This snippet provides the steps to add, configure and position different parts and objects such as blocks, SurfaceLights and SpotLights in the Roblox Studio. It lists the properties that need to be set for each part to achieve the desired visual effect, including color, material, size, CFrame.Position, Face and range. The process also involves enabling 'Anchored' property.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/environmental-art/construct-your-world.md#_snippet_18\n\nLANGUAGE: Roblox Lua\nCODE:\n```\n1. Add and position a **block** part near the top of one of your perimeter hallways, then in the **Properties** window,\n      1. Set **Color** to a bright color.\n      1. Set **Material** to **Neon**.\n      1. Enable **Anchored**.\n   1. In the **Explorer** window, add a **SurfaceLight** object to the part.\n      1. Hover over the part and click the **⊕** button. A contextual menu displays.\n      1. From the contextual menu, insert a **SurfaceLight** object.\n   1. Select the **SurfaceLight** object, then in the **Properties** window,\n      1. Set **Color** to a bright color.\n      1. Set **Face** to the direction you want the light to shine.\n      1. Set **Range** to a value that reflects how far you want your light to reach.\n   1. Repeat this process, positioning and orienting parts to complete the glowing perimeter lights.\n```\n\nLANGUAGE: Roblox Lua\nCODE:\n```\n1. Add and position a **block** part near the top of one of your cross lane hallways, then in the **Properties** window,\n      1. Set **Color** to a bright color.\n      1. Set **Material** to **Neon**.\n      1. Enable **Anchored**.\n   1. In the **Explorer** window, add a **SpotLight** object to the part.\n      1. Hover over the part and click the **⊕** button. A contextual menu displays.\n      1. From the contextual menu, insert a **SpotLight** object.\n   1. Select the **SpotLight** object, then in the **Properties** window,\n      1. Set **Angle** to a value that reflects the angle you want your light to shine.\n      1. Set **Face** to the direction you want the light to shine.\n      1. Set **Range** to a value that reflects how far you want your light to reach.\n   1. Repeat this process, positioning and orienting parts above doors and hallways until you are happy with the interior lighting.\n```\n\nLANGUAGE: Roblox Lua\nCODE:\n```\n1. Add a **block** part that is the size of your left spawn zone, and position it above the spawn zone's ceiling.\n   1. In the **Properties** window,\n      1. Set **Color** to the color theme of the team on the left of the map.\n      1. Set **Material** to **Neon**.\n      1. Enable **Anchored**.\n1. Repeat this process for the right spawn zone.\n```\n\nLANGUAGE: Roblox Lua\nCODE:\n```\n1. Add a **block** part for one of the glowing perimeter lights, then in the **Properties** window,\n      1. Set **Color** to `199, 166, 147`.\n      1. Set **Material** to **Neon**.\n      1. Set **Size** to `89.254, 1, 1`.\n      1. Set **CFrame.Position** to `-78.297, 21, 293.439`.\n      1. Enable **Anchored**.\n   1. In the **Explorer** window, add a **SurfaceLight** object to the part.\n      1. Hover over the **block** part and click the **⊕** button. A contextual menu displays.\n      1. From the contextual menu, insert a **SurfaceLight** object.\n   1. Select the **SurfaceLight** object, then in the **Properties** window,\n      1. Set **Color** to `211, 190, 150`.\n      1. Set **Face** to **Bottom**.\n      1. Set **Range** to `21`.\n   1. Repeat this process, positioning and orienting parts to complete the glowing perimeter lights.\n```\n\nLANGUAGE: Roblox Lua\nCODE:\n```\n1. Add a **block** part for one of the small hallway interior lights, then in the **Properties** window,\n      1. Set **Color** to `163, 162, 165`.\n      1. Set **Material** to **Neon**.\n      1. Set **Size** to `0.25, 0.25, 1`.\n      1. Set **CFrame.Position** to `-53.962, 19.936, 291.932`.\n      1. Enable **Anchored**.\n   1. In the **Explorer** window, add a **SpotLight** object to the part.\n      1. Hover over the **block** part and click the **⊕** button. A contextual menu displays.\n      1. From the contextual menu, insert a **SpotLight** object.\n   1. Select the **SpotLight** object, then in the **Properties** window,\n      1. Set **Angle** to `135`.\n      1. Set **Face** to **Bottom**.\n      1. Set **Range** to `20`.\n   1. Repeat this process, positioning and orienting parts above doors and hallways until you are happy with the interior lighting.\n```\n\nLANGUAGE: Roblox Lua\nCODE:\n```\n1. Add a **block** part for the left spawn zone, then in the **Properties** window,\n      1. Set **Color** to `88, 218, 171`.\n      1. Set **Material** to **Neon**.\n      1. Set **Size** to `62.5, 1, 37.5`.\n      1. Set **CFrame.Position** to `-77, 20.6, 321`.\n      1. Enable **Anchored**.\n1. Add a **block** part for the right spawn zone, then in the **Properties** window,\n      1. Set **Color** to `255, 170, 255`.\n      1. Set **Material** to **Neon**.\n      1. Set **Size** to `62.5, 1, 37.5`.\n      1. Set **CFrame.Position** to `-77, 20.6, 1`.\n      1. Enable **Anchored**.\n```\n\n----------------------------------------\n\nTITLE: Obtaining Token Resources with Roblox OAuth v1 - bash\nDESCRIPTION: Sends a POST request using x-www-form-urlencoded content to the Roblox OAuth v1 token resources endpoint to check if the provided access token has permission to access specific resources. Required parameters include the access token, client ID, and client secret. The response returns resource ownership and permissions encoded in JSON format, where a scope indicated by \"U\" means access to the owner's resource.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/auth/oauth2-reference.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request POST https://apis.roblox.com/oauth/v1/token/resources' \\\n--header 'Content-Type: application/x-www-form-urlencoded' \\\n--data-urlencode 'token=eyjlflabtfl...4gxqYBG' \\\n--data-urlencode 'client_id=840974200211308101' \\\n--data-urlencode 'client_secret=RBX-CR9...St12L'\n```\n\n----------------------------------------\n\nTITLE: Configuring SeaStackMesh in Level_4a - Roblox Properties Table\nDESCRIPTION: Lists the Size, CFrame.Position, and CFrame.Orientation properties for two instances of the SeaStackMesh asset required for the Level_4a section of the sample experience. These values are set in the Roblox Studio Properties window.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/core/building/apply-polished-assets.md#_snippet_3\n\nLANGUAGE: Roblox Properties Table\nCODE:\n```\nSize\tCFrame.Position\tCFrame.Orientation\n`43, 49, 43`\t`103, 5, 48`\t`0, -119, 0`\n`37, 49, 38`\t`104, 41, 47`\t`0, -18, 0`\n```\n\n----------------------------------------\n\nTITLE: Configuring Left Combat Pocket Parts in Roblox Studio\nDESCRIPTION: Specifies the exact Size and CFrame.Position values for multiple block Parts required to construct the left combat pocket geometry as seen in the sample 'Environment Art - Greyboxing' place file. These values define the dimensions and placement of walls and doorways.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/environmental-art/greybox-your-environment.md#_snippet_2\n\nLANGUAGE: Roblox Studio Properties\nCODE:\n```\nPart: Top hallway extension\nSize: 10, 15, 15\nCFrame.Position: -100, 12.5, 272.5\n\nPart: Top doorway, left wall\nSize: 5, 15, 15\nCFrame.Position: -92.5, 12.5, 262.5\n\nPart: Top doorway, overhang\nSize: 5, 5, 10\nCFrame.Position: -92.5, 17.5, 250\n\nPart: Top doorway, right wall\nSize: 5, 15, 20\nCFrame.Position: -92.5, 12.5, 235\n\nPart: Left doorway, top wall\nSize: 20, 15, 5\nCFrame.Position: -85, 12.5, 272.5\n\nPart: Left doorway, overhang\nSize: 10, 5, 5\nCFrame.Position: -70, 17.5, 272.5\n\nPart: Left doorway, bottom wall\nSize: 20, 15, 5\nCFrame.Position: -55, 12.5, 272.5\n\nPart: Right doorway, top wall\nSize: 15, 15, 10\nCFrame.Position: -82.5, 12.5, 230\n\nPart: Right doorway, overhang\nSize: 10, 5, 10\nCFrame.Position: -70, 17.5, 230\n\nPart: Right doorway, bottom wall\nSize: 20, 15, 10\nCFrame.Position: -55, 12.5, 230\n\nPart: Bottom wall\nSize: 10, 15, 35\nCFrame.Position: -50, 12.5, 252.5\n```\n\n----------------------------------------\n\nTITLE: Declaring Multiple Story Inputs and Initializing Story in Roblox Lua\nDESCRIPTION: This snippet demonstrates initializing two variables: one for a player's name and another placeholder for food preference, with an initial story string using the first variable. It sets up the structure for extending the story with additional questions. Dependencies: The 'storyMaker' object with a GetInput method. Inputs are uninitialized at this stage, and no output is produced yet.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/build-it-play-it-story-games/finish-and-add.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n  local name1 = storyMaker:GetInput(\"What is your favorite name?\")\n  local food1\n\n  local story = \"In a tree on a hill lives the great wizard \" .. name1 .. \". \"\n```\n\n----------------------------------------\n\nTITLE: Combining Queries with Implicit AND\nDESCRIPTION: Finds `BasePart` instances that are both `Anchored=true` AND `CanCollide=true`. Queries separated by spaces imply an AND operation.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/studio/explorer.md#_snippet_18\n\nLANGUAGE: RobloxSearchQuery\nCODE:\n```\nAnchored=true CanCollide=true\n```\n\n----------------------------------------\n\nTITLE: Finding All Descendants Using Double Wildcard\nDESCRIPTION: Finds all descendants (children, grandchildren, etc.) of instances named 'CarModel'. Uses the `.**` operator for recursive search.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/studio/explorer.md#_snippet_17\n\nLANGUAGE: RobloxSearchQuery\nCODE:\n```\nCarModel.**\n```\n\n----------------------------------------\n\nTITLE: Defining EyesLookLeft Pose in Roblox FaceControls\nDESCRIPTION: Specifies the 'EyesLookLeft' pose via its Roblox FaceControls API reference. This action causes the character's eyes to gaze towards the left. Inclusion of this pose is mandatory for avatars submitted to the Roblox Marketplace.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/characters/facial-animation/facs-poses-reference.md#_snippet_1\n\nLANGUAGE: Roblox API\nCODE:\n```\nClass.FaceControls.EyesLookLeft|EyesLookLeft\n```\n\n----------------------------------------\n\nTITLE: Adding SurfaceAppearance to MeshPart\nDESCRIPTION: This snippet outlines the steps to add a SurfaceAppearance object to a MeshPart in Roblox Studio's Explorer window. This is a prerequisite for applying PBR textures. The user is expected to right-click the MeshPart, insert a SurfaceAppearance object, and then populate the SurfaceAppearance with maps such as color, normal, roughness, and metalness.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/modeling/surface-appearance.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Forming Open Cloud API Request URLs in JSON\nDESCRIPTION: Demonstrates how to construct a complete URL for making requests to the Roblox Open Cloud API, combining the base endpoint, path, and query parameters. This approach is required for all programmatic access to Open Cloud endpoints. The shown example targets a user's inventory with a page size parameter. No code-level dependencies are involved; usage and parameterization depend on the API and authentication context.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/reference/patterns.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\nhttps://apis.roblox.com/cloud/v2/users/4687549151/inventory-items?maxPageSize=100\n```\n\n----------------------------------------\n\nTITLE: Configuring SeaStackMesh in Level_3b - Roblox Properties Table\nDESCRIPTION: Provides the Size, CFrame.Position, and CFrame.Orientation properties for a single SeaStackMesh asset added to the Level_3b model, enabling replication of the sample experience's specific rock formation layout. Properties are configured via the Properties window.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/core/building/apply-polished-assets.md#_snippet_1\n\nLANGUAGE: Roblox Properties Table\nCODE:\n```\nSize\tCFrame.Position\tCFrame.Orientation\n`35, 47, 36`\t`80, 7, 4`\t`0, -18, 0`\n```\n\n----------------------------------------\n\nTITLE: Finding Direct Children Using Wildcard\nDESCRIPTION: Finds all direct children of instances named 'Cart'. The `.` operator specifies ancestry, and `*` acts as a wildcard for any child name.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/studio/explorer.md#_snippet_13\n\nLANGUAGE: RobloxSearchQuery\nCODE:\n```\nCart.*\n```\n\n----------------------------------------\n\nTITLE: Accessing MouthLeft Control in Roblox\nDESCRIPTION: Reference to the MouthLeft control which moves the mouth to the character's left. Unlike JawLeft, this only moves the mouth and not the jaw, teeth, or tongue.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/characters/facial-animation/facs-poses-reference.md#_snippet_23\n\nLANGUAGE: Roblox\nCODE:\n```\nClass.FaceControls.MouthLeft\n```\n\n----------------------------------------\n\nTITLE: Configuration File for API Access (JSON)\nDESCRIPTION: This JSON file contains the configuration parameters needed to access the Roblox Ordered Data Stores API.  It requires the `universe_id`, `api_key_url`, and `api_key` to be set.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/guides/usage-data-stores.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"universe_id\": \"\",\n  \"api_key_url\": \"https://apis.roblox.com/datastores/ordered-v1/\",\n  \"api_key\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Blast Cooldown Check for Player in Roblox (Lua)\nDESCRIPTION: This variant of canLocalPlayerBlast always returns true, effectively disabling the cooldown throttle and allowing players to blast with no delay. Dependencies match the previous snippet but the function ignores player state. Input/Output: no arguments, always returns true. This should only be used for testing or demonstration, as it breaks the intended pacing of gameplay and can lead to unrealistic rapid-firing in live experiences.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/gameplay-scripting/implement-blasters.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal function canLocalPlayerBlast(): boolean\n    return true -- updated line, be sure to change back\nend\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Node.js Roblox OAuth 2.0 Sample App using npm\nDESCRIPTION: This snippet instructs how to install the necessary Node.js dependencies defined in the package.json file by running the npm ci command. This installs a clean set of packages matching the lockfile to ensure consistent and replicable builds before running the app.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/auth/oauth2-sample.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm ci\n```\n\n----------------------------------------\n\nTITLE: Defining Health Restoration Constant in Roblox Lua\nDESCRIPTION: Initializes the maximum health value as a constant to be used for setting the player's health when a pickup is touched. This setup is fundamental for maintaining a consistent health value across pickups and simplifies adjustments.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/scripting/intermediate-scripting/create-a-health-pickup.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal MAX_HEALTH = 100\n```\n\n----------------------------------------\n\nTITLE: Defining Dictionary with a Single Key Name - Lua\nDESCRIPTION: Shows an incomplete dictionary setup, where the key is specified as 'Name' but lacks assignment. Used as an interim demonstration step in the tutorial. No actual value, so errors or nil values may result if used.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-5/intro-to-dictionaries.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal enemy = {\n\tName\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing PKCE Authorization URL Bash\nDESCRIPTION: This bash code snippet provides an example of constructing an authorization URL specifically for the PKCE flow.  It demonstrates how to format the URL with required parameters like `client_id`, `redirect_uri`, `scope`, `code_challenge`, `code_challenge_method`, and `state`. This URL is used to initiate the authorization process with the OAuth 2.0 provider.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/auth/oauth2-develop.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n```bash title=\"Example PKCE Authorization URL\"\nhttps://apis.roblox.com/oauth/v1/authorize?client_id=7290610391231237934964\n    &code_challenge=PLEKKVCjdD1V_07wOKlAm7P02NC-LZ_1hQfdu5XSXEI\n    &code_challenge_method=S256\n    &redirect_uri=https://example.com/redirect\n    &scope=openid%20profile\n    &response_type=code\n    &state=abc123\n```\n```\n\n----------------------------------------\n\nTITLE: Legacy Chat System SetExtraData\nDESCRIPTION: An example code demonstrating how to set extra data for a speaker in the legacy chat system for customizing name color, chat color, and tags. It connects to the 'SpeakerAdded' event, retrieves the speaker, and sets relevant extra data for visual customization. This approach is proprietary to the legacy chat implementation and has no direct equivalent in TextChatService.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/chat/in-experience-text-chat.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nChatService.SpeakerAdded:Connect(function(playerName)\n\tlocal speaker = ChatService:GetSpeaker(playerName)\n\tspeaker:SetExtraData(\"NameColor\", Color3.fromRGB(255, 255, 55))\n\tspeaker:SetExtraData(\"ChatColor\", Color3.fromRGB(212, 175, 55))\n\tspeaker:SetExtraData(\"Tags\", {{TagText = \"YourTagName\", TagColor = Color3.fromRGB(0, 255, 0)}, {TagText = \"OtherTagName\", TagColor = Color3.fromRGB(255, 0, 0)}})\nend)\n```\n\n----------------------------------------\n\nTITLE: Enabling Disabled Objects in Blender Outliner\nDESCRIPTION: Objects like attachments may be hidden using 'Disable In Viewport' for better organization. This guide provides steps to enable the visibility filter in the Outliner to access and toggle these objects.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/characters/creating/blender-configurations.md#_snippet_0\n\nLANGUAGE: Blender Step\nCODE:\n```\n1. In your Outliner, click the Filter dropdown.\n```\n\nLANGUAGE: Blender Step\nCODE:\n```\n2. Enable the Disable In Viewport filter.\n```\n\nLANGUAGE: Blender Step\nCODE:\n```\n3. The Disable In Viewport icon now appears next to every object in the Outliner. Toggle the icon to change the Disabled status for your objects.\n```\n\n----------------------------------------\n\nTITLE: Technical Specifications and Export Guidelines for Roblox Avatars\nDESCRIPTION: Guidance on ensuring avatar components meet the specified requirements, including verification against [avatar specifications](../../../art/characters/specifications.md). It also emphasizes cautious use of templates and non-destructive practices, and provides export instructions when ready.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/characters/testing/blender.md#_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n## Technical specifications\n\nYour avatar components should match the requirements provided in the [avatar specifications](../../../art/characters/specifications.md). When using templates and following appropriate non-destructive modeling practices, most of these components should not be touched, but you should still double-check that each component is compliant with the technical requirements.\n\n<Alert severity = 'success'>\nIf you are using Roblox character templates and are ready to export into Studio, see [Exporting instructions](../../../art/characters/creating/export-textures.md) for specific export instructions for template files.\n</Alert>\n```\n\n----------------------------------------\n\nTITLE: Creating an Empty Array for Selected Ingredients in Lua\nDESCRIPTION: Creates an empty array to store ingredients that will be selected by a customer in a restaurant simulator.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/fundamentals/coding-5/pairs-and-ipairs.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\n-- Customer's soup\nlocal selectedIngredients = {}\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video with Responsive Layout\nDESCRIPTION: HTML code for embedding a YouTube tutorial video with responsive layout using Grid components and inline styling for proper aspect ratio and positioning.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/core/index.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<Grid\n    alignItems=\"stretch\"\n    container\n    direction=\"row\">\n\n<Grid item Large={7} XSmall={12} direction=\"column\">\n\n<div class=\"container\"\nstyle={{position: \"relative\", paddingBottom: \"56.25%\", height: 0}}>\n<iframe width=\"880\" height=\"495\" src=\"https://www.youtube-nocookie.com/embed/zi0hIuPDyWc\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen style={{position: \"absolute\", top: 0, left: 0, width: \"95%\", height: \"95%\"}}></iframe>\n</div>\n\n</Grid>\n\n<Grid item Large={5} XSmall={12} direction=\"column\">\n\nThe core curriculum helps you learn many essential Studio features across\ntechnical and creative disciplines.\n\nYou'll learn how to recreate a simple [3D platformer\nexperience](https://www.roblox.com/games/14238807008) where players collect\ncoins to trade for jump power. Players jump to navigate progressively taller\nplatforms until they reach a flare on top of the highest platform.\n\nThis course is intended for readers who are familiar\nwith general coding concepts but are new to Roblox. If you need help learning\nhow to code, try the [absolute basics](../../first-experience/index.md) of working in Studio and\n[coding fundamentals](../../fundamentals/coding-1/coding-fundamentals.md).\n</Grid>\n\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Configuring Clouds for Indirect Lighting (Optional)\nDESCRIPTION: Sets properties for the Clouds object (Cover, Density, Color) parented to the Terrain service to add atmospheric clouds that contribute to indirect lighting and overall scene ambiance. This configuration is applied via the Roblox Studio Properties window.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/vfx/create-volcanoes.md#_snippet_6\n\nLANGUAGE: Configuration\nCODE:\n```\nCover = 1\nDensity = 0.08\nColor = 136, 143, 152\n```\n\n----------------------------------------\n\nTITLE: Example Ordered DataStores Error Response in JSON\nDESCRIPTION: Shows the more simplified error format used by Ordered DataStores APIs, which only includes code and message fields. This example shows an invalid cursor error response.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/reference/errors.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"code\": \"INVALID_ARGUMENT\",\n  \"message\": \"Invalid cursor.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Terrain Import Settings for Building System Alignment\nDESCRIPTION: Specifies the recommended Position and Size settings when importing a heightmap for terrain generation to ensure alignment with the building system grid. Setting the position to (0, 0, 0) and calculating the size based on the heightmap dimensions (width × 4, 256, length × 4) helps integrate terrain seamlessly with the 20x16x20 stud grid cells used by the building system.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/resources/battle-royale/building-system.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nPosition (X, Y, Z) = 0, 0, 0\nSize (X, Y, Z) = heightmap_width × 4, 256, heightmap_length × 4\n```\n\n----------------------------------------\n\nTITLE: Handling Deprecated R6 Folder Content Error\nDESCRIPTION: Indicates that a deprecated R6 folder associated with a body part (`%s`) is not empty. This folder should be cleared of any content.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/validation-errors.md#_snippet_21\n\nLANGUAGE: Text\nCODE:\n```\nDeprecated R6 folder for body part `%s` should be empty. You need to clear that folder and try again.\n```\n\n----------------------------------------\n\nTITLE: Handling Cage Intersection Detection Execution Failure\nDESCRIPTION: This error occurs when the system fails to execute cage intersection detection for an asset (`%s`). Ensure the relevant cage mesh exists and is correctly configured.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/validation-errors.md#_snippet_41\n\nLANGUAGE: Text\nCODE:\n```\nFailed to execute cage intersection detection for `%s`. Make sure the cage mesh exists and try again.\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Floor Geometry in Roblox Studio\nDESCRIPTION: Step-by-step instructions for creating symmetrical floor geometry for a laser tag environment, including main, mezzanine, and outdoor floors with elevation changes to create strategic gameplay elements.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/environmental-art/greybox-your-environment.md#_snippet_0\n\nLANGUAGE: Roblox Studio\nCODE:\n```\n1. Open Roblox Studio with a Baseplate template.\n2. Set Rotate to 90 and Move to 5 studs in the Model tab.\n3. Create main floor using block parts.\n4. Create mezzanine floor using block parts.\n5. Create rise in elevation between main and mezzanine floors using wedge parts.\n6. Create drop in elevation between main and outdoor floor using wedge parts.\n7. Anchor all parts.\n```\n\n----------------------------------------\n\nTITLE: Configuring Top Hallway Addition Parts in Roblox Studio\nDESCRIPTION: Provides the precise Size and CFrame.Position values for block Parts needed to create the top hallway addition to the middle combat pocket, designed to break sight lines. These configuration details are for replicating the sample environment.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/environmental-art/greybox-your-environment.md#_snippet_3\n\nLANGUAGE: Roblox Studio Properties\nCODE:\n```\nPart: Left hallway extension\nSize: 15, 20, 45\nCFrame.Position: -117.5, 15, 212.5\n\nPart: Right hallway extension\nSize: 15, 20, 45\nCFrame.Position: -117.5, 15, 107.5\n\nPart: Left hallway\nSize: 5, 20, 45\nCFrame.Position: -92.5, 15, 187.5\n\nPart: Right hallway\nSize: 5, 20, 45\nCFrame.Position: -92.5, 15, 132.5\n\nPart: Top hallway entrance, left wall\nSize: 15, 15, 5\nCFrame.Position: -102.5, 17.5, 172.5\n\nPart: Top hallway entrance, left wall on entrance\nSize: 5, 15, 10\nCFrame.Position: -112.5, 17.5, 170\n\nPart: Top hallway entrance, right wall\nSize: 15, 15, 5\nCFrame.Position: -102.5, 17.5, 147.5\n\nPart: Top hallway entrance, right wall on entrance\nSize: 5, 15, 10\nCFrame.Position: -112.5, 17.5, 150\n\nPart: Door overhang\nSize: 5, 5, 10\nCFrame.Position: -92.5, 22.5, 160\n```\n\n----------------------------------------\n\nTITLE: Handling Model Review Feedback Parsing Error\nDESCRIPTION: This error occurs when the system fails to parse feedback from the model review for the specified asset (`%s`). Ensure the review process is fully completed before retrying validation.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/validation-errors.md#_snippet_12\n\nLANGUAGE: Text\nCODE:\n```\nFailed to parse feedback from model review for `%s`. Make sure the review process is complete and try again.\n```\n\n----------------------------------------\n\nTITLE: Creating and Setting Up Animation Editor in Roblox Studio\nDESCRIPTION: Guides on opening the Roblox Studio Animation Editor, configuring rig and parts for animation, and setting animation duration. It includes enabling the Animation Editor plugin, configuring rig building, and naming the new animation for further editing.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/build-it-play-it-island-of-move/animations-and-feedback.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<img src=\"../../assets/education/build-it-play-it-island-of-move/creating-animations/turn-off-snap.png\" />\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<img src=\"../../assets/education/build-it-play-it-island-of-move/creating-animations/open-animation-editor.png\" />\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<img src=\"../../assets/education/build-it-play-it-island-of-move-intermediate/bipi_t2_createRig_rigBuilder.jpg\" />\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<img src=\"../../assets/education/build-it-play-it-island-of-move-intermediate/bipi_t2_createRig_showRig.jpg\" />\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<img src=\"../../assets/education/build-it-play-it-island-of-move-intermediate/ccs2020_t2_createAnimationName.png\" />\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<img src=\"../../assets/education/build-it-play-it-island-of-move-intermediate/ccs2020_t2_clickAEPlus.png\" />\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<img src=\"../../assets/education/build-it-play-it-island-of-move-intermediate/ccs2020_t2_changeLength.png\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Keyboard Shortcuts for Animation Controls in Roblox Studio\nDESCRIPTION: Keyboard shortcuts for selecting tools and manipulating objects in the Roblox Studio Animation Editor. These shortcuts help animators switch between move and rotate tools, and copy/paste keyframes efficiently.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/build-it-play-it-island-of-move/designing-poses.md#_snippet_0\n\nLANGUAGE: markup\nCODE:\n```\n<kbd>R</kbd>\n```\n\nLANGUAGE: markup\nCODE:\n```\n<kbd>Ctrl</kbd> + <kbd>C</kbd> or <kbd>⌘</kbd> + <kbd>C</kbd>\n```\n\nLANGUAGE: markup\nCODE:\n```\n<kbd>Ctrl</kbd> + <kbd>V</kbd> or <kbd>⌘</kbd> + <kbd>V</kbd>\n```\n\n----------------------------------------\n\nTITLE: User Info Response with Profile Scope - JSON\nDESCRIPTION: Example JSON response including user metadata when the profile scope is authorized. Fields include the unique user identifier (sub), display and preferred usernames, account creation timestamp, profile webpage URL, and a URL to the user's Roblox avatar headshot image. The avatar URL can be null if not yet generated or if moderated.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/cloud/auth/oauth2-reference.md#_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sub\": \"1516563360\",\n  \"name\": \"exampleuser\",\n  \"nickname\": \"exampleuser\",\n  \"preferred_username\": \"exampleuser\",\n  \"created_at\": 1584682495,\n  \"profile\": \"https://www.roblox.com/users/1516563360/profile\",\n  \"picture\": \"https://tr.rbxcdn.com/03dc2a9abe7b1aacaaf93ea46d5c0646/150/150/AvatarHeadshot/Png\"\n}\n```\n\n----------------------------------------\n\nTITLE: Correcting Asset Position for Thumbnail Error\nDESCRIPTION: This error indicates that the asset (`%s`) is positioned outside the camera's view during thumbnail generation. Reposition the asset to the center of the view (typically the origin) for proper thumbnail capture.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/validation-errors.md#_snippet_38\n\nLANGUAGE: Text\nCODE:\n```\nAsset `%s` is positioned outside the thumbnail's camera view. You need to reposition the asset at the center of the camera view and try again.\n```\n\n----------------------------------------\n\nTITLE: Example Script Capability Error Messages\nDESCRIPTION: Illustrates error messages generated when a script attempts an action without the necessary capability. These examples show errors for modifying instances outside the sandbox, cloning instances, and accessing network functions.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/scripting/capabilities.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nThe current thread cannot modify 'Workspace' (lacking capability AccessOutsideWrite)\n\nThe current thread cannot call 'Clone' (lacking capability CreateInstances)\n\nThe current thread cannot call 'GetSecret' (lacking capability Network)\n```\n\n----------------------------------------\n\nTITLE: Filtering by Individual Field of Vector3 Property\nDESCRIPTION: Finds all instances where the `X` component of their `Position` property is exactly 1. Accesses individual fields of composite data types like Vector3 using dot notation.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/studio/explorer.md#_snippet_4\n\nLANGUAGE: RobloxSearchQuery\nCODE:\n```\nPosition.X = 1\n```\n\n----------------------------------------\n\nTITLE: Defining LeftLipStretcher Pose in Roblox FaceControls\nDESCRIPTION: Specifies the 'LeftLipStretcher' pose using the Roblox FaceControls API reference. This action stretches the corners of the character's mouth apart horizontally. Inclusion of this pose is mandatory for avatars submitted to the Roblox Marketplace.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/characters/facial-animation/facs-poses-reference.md#_snippet_7\n\nLANGUAGE: Roblox API\nCODE:\n```\nClass.FaceControls.LeftLipStretcher|LeftLipStretcher\n```\n\n----------------------------------------\n\nTITLE: Accessing LipPresser Control in Roblox\nDESCRIPTION: Reference to the LipPresser control which presses the lips together, useful for creating expressions of concentration or effort.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/characters/facial-animation/facs-poses-reference.md#_snippet_22\n\nLANGUAGE: Roblox\nCODE:\n```\nClass.FaceControls.LipPresser\n```\n\n----------------------------------------\n\nTITLE: Configuring SeaStackMesh and SeaStackCaveMesh in Level_4b - Roblox Properties Table\nDESCRIPTION: Provides detailed Size, CFrame.Position, and CFrame.Orientation properties for one SeaStackCaveMesh and two SeaStackMesh assets used in the Level_4b model to replicate the sample experience's complex structure. Properties are applied in the Roblox Studio Properties window.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/core/building/apply-polished-assets.md#_snippet_4\n\nLANGUAGE: Roblox Properties Table\nCODE:\n```\nSea stack type\tSize\tCFrame.Position\tCFrame.Orientation\nSeaStackCaveMesh\t`54, 67, 53`\t`131, 88, 71`\t`0, -111, 0`\nSeaStackMesh\t`66, 85, 65`\t`133, 23, 71`\t`0, 87, 0`\nSeaStackMesh\t`46, 55, 47`\t`133, 136, 71`\t`0, -79, 0`\n```\n\n----------------------------------------\n\nTITLE: Setting Blender Scene Scale (Scene Properties)\nDESCRIPTION: To ensure correct scaling of FBX exports in Roblox, the working scale in Blender must be modified to 0.01. This method shows how to set the Unit Scale and Length in the Scene Properties.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/characters/creating/blender-configurations.md#_snippet_3\n\nLANGUAGE: Blender Step\nCODE:\n```\n1. In the Properties panel, navigate to the Scene Properties tab.\n```\n\nLANGUAGE: Blender Step\nCODE:\n```\n2. In the Units section, change the Unit Scale to 0.01 and the Length to Centimeters.\n```\n\n----------------------------------------\n\nTITLE: Handling Invalid Material Setup Error\nDESCRIPTION: This error message indicates that an invalid material setup was detected for the specified model (`%s`). The only accepted values are listed (`%s`).\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/validation-errors.md#_snippet_4\n\nLANGUAGE: Text\nCODE:\n```\nInvalid material setup for `%s`. Accepted values are: `%s`\n```\n\n----------------------------------------\n\nTITLE: Handling UV Load Failure\nDESCRIPTION: This error indicates a failure to load the UV map for the specified asset (`%s`). Ensure a valid UV map exists and is associated with the mesh.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/validation-errors.md#_snippet_42\n\nLANGUAGE: Text\nCODE:\n```\nFailed to load UVs for `%s`. Make sure the UV map exists and try again.\n```\n\n----------------------------------------\n\nTITLE: Addressing Inconsistent Attribute Values Error\nDESCRIPTION: This error occurs when an attribute (`%s`) has different values across different children folders within the asset hierarchy. Ensure the attribute is initialized with the same value consistently in all relevant folders.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/validation-errors.md#_snippet_20\n\nLANGUAGE: Text\nCODE:\n```\nAttribute `%s` has different values in different children folders. You need to use the same value in all folders.\n```\n\n----------------------------------------\n\nTITLE: Correcting Accessory Outside Outer Cage Error\nDESCRIPTION: Validation detected that a significant percentage (`%d`%) of an accessory's geometry is outside its corresponding outer cage. Adjust the accessory model or the cage mesh to ensure the accessory is mostly contained within the cage.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/validation-errors.md#_snippet_33\n\nLANGUAGE: Text\nCODE:\n```\nValidation detected `%d`% of the accessory is outside its outer cage. Make adjustments to have more of the accessory placed between the cages.\n```\n\n----------------------------------------\n\nTITLE: Blender FBX Export Settings and Process\nDESCRIPTION: Step-by-step instructions for exporting an FBX file from Blender with correct scaling, texture embedding, and export settings to ensure compatibility with Roblox Studio for accessory creation.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/accessories/export-settings.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n1. In the topbar, click **File**. A pop-up menu displays.\n2. Select **Export**, then **FBX (.fbx)**. The **Blender File View** window displays.\n3. On the right-hand side, change the **Path Mode** property to **Copy**, then toggle the **Embed Textures** button.\n\n   <img src=\"../../assets/modeling/skinned-meshes/Blender-Export-Settings-1.png\" width=\"320\" />\n\n4. If your project doesn't already have .01 scene unit scaling, set the **Transform** > **Scale** to `.01`.\n\n   <img src=\"../../assets/modeling/skinned-meshes/Blender-Export-Settings-2.png\" width=\"320\" />\n\n5. Click the **Export FBX** button.\n6. After exporting, use Studio's [3D Importer](../../art/modeling/3d-importer.md) to import your model and the [Accessory Fitting Tool](../../art/accessories/accessory-fitting-tool.md) to convert the model into an accessory.\n```\n\n----------------------------------------\n\nTITLE: Defining LeftEyeClosed Pose in Roblox FaceControls\nDESCRIPTION: Identifies the 'LeftEyeClosed' pose via its Roblox FaceControls API reference. This pose causes the character's left eyelid to close. It is a required pose for avatar assets intended for the Roblox Marketplace.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/characters/facial-animation/facs-poses-reference.md#_snippet_5\n\nLANGUAGE: Roblox API\nCODE:\n```\nClass.FaceControls.LeftEyeClosed|LeftEyeClosed\n```\n\n----------------------------------------\n\nTITLE: Executing Roblox Animation Transfer via Command Line Using npx\nDESCRIPTION: This shell command uses 'npx' to invoke the 'roblox-animation-transfer' third-party CLI tool to upload and map animations from a text file to a Roblox group. It specifies the input text file containing animation mappings ('--inFile'), the destination group's ID ('--group'), and the output text file to store the new animation information ('--outFile'). Users must prepare the animation list files beforehand and ensure 'npx' and Node.js are installed. The command handles large uploads with possible retries and writes results to the output file in order.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/projects/transfer-animations.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nnpx roblox-animation-transfer --inFile animations.txt --group YOUR_GROUP_ID --outFile newAnimations.txt\n```\n\n----------------------------------------\n\nTITLE: Configuring InnerFill Frame Properties in Roblox Studio\nDESCRIPTION: Sets the properties for the 'InnerFill' frame, used to visually represent the slider's current value. Configures its anchor point to the left-center, sets a semi-transparent blue background matching the handle, positions it at the start of the parent, sets its initial width to 50%, and adjusts its ZIndex to appear above the 'SliderFrame' background but below the 'Handle'.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/ui/interactive-ui.md#_snippet_6\n\nLANGUAGE: Roblox Studio Configuration\nCODE:\n```\nTarget: EffectsVolumeSlider > SliderFrame > InnerFill (Class.Frame)\n\nProperties:\n- AnchorPoint = Vector2.new(0, 0.5)\n- BackgroundColor3 = Color3.fromRGB(0, 150, 255)\n- BackgroundTransparency = 0.35\n- Position = UDim2.new(0, 0, 0.5, 0) -- {0, 0}, {0.5, 0}\n- Size = UDim2.new(0.5, 0, 1, 0) -- {0.5, 0}, {1, 0}\n- ZIndex = 2\n```\n\n----------------------------------------\n\nTITLE: Assigning Attachment0 to PlayerAttachment in Roblox Properties\nDESCRIPTION: This snippet describes how to assign an existing attachment space called PlayerAttachment to the TutorialBeam's Attachment0 property, enabling the beam to connect with the player model. It relies on selecting the TutorialBeam in properties and linking it through the Explorer.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/build-it-play-it-mansion-of-wonder/connect-the-beam.md#_snippet_0\n\nLANGUAGE: None\nCODE:\n```\nSelect TutorialBeam in Properties.\nClick the empty box next to Attachment0.\nIn Explorer, find TestPlayer.\nClick on PlayerAttachment to assign it.\n```\n\n----------------------------------------\n\nTITLE: Creating scale towers with block parts in Roblox\nDESCRIPTION: Guides the creation of large-scale towers using block parts to provide environmental sense of scale, complete with unique colors and materials. Duplicating and anchoring these towers adds to the environment's visual interest and storytelling elements.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/curriculums/environmental-art/construct-your-world.md#_snippet_7\n\nLANGUAGE: HTML\nCODE:\n```\n`Using **block** parts, create a tower that is much larger than the player to provide a sense of scale in the environment.`\n```\n\nLANGUAGE: HTML\nCODE:\n```\n`Apply unique colors and materials to different block parts according to the art style of your experience.`\n```\n\nLANGUAGE: HTML\nCODE:\n```\n`Duplicate this tower, then position it to a symmetrical location on your map.`\n```\n\nLANGUAGE: HTML\nCODE:\n```\n`Anchor all of these parts.`\n```\n\n----------------------------------------\n\nTITLE: Enabling Automatic Skinning Transfer Preserving Existing Data in Roblox\nDESCRIPTION: Choosing `EnabledPreserve` enables the automatic skinning transfer. However, unlike `EnabledOverride`, this setting respects any pre-existing skinning information on the accessory. If no skinning exists, the automatic process will generate new data.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/accessories/automatic-skinning-transfer.md#_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\n-- Assuming 'wrapLayer' is the WrapLayer instance of the accessory\nwrapLayer.AutoSkin = Enum.AutoSkin.EnabledPreserve\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Bloom Post-Processing Effect\nDESCRIPTION: Modifies the Bloom effect properties (Intensity, Size, Threshold) parented to the Lighting service to enhance the glow of bright areas, like lava, and adjust the overall visual intensity. This configuration is applied via the Roblox Studio Properties window.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/tutorials/use-case-tutorials/vfx/create-volcanoes.md#_snippet_4\n\nLANGUAGE: Configuration\nCODE:\n```\nIntensity = 0.75\nSize = 80\nThreshold = 0.85\n```\n\n----------------------------------------\n\nTITLE: Rendering Beta Alert Box with React JSX\nDESCRIPTION: This snippet renders an Alert component with a severity level of 'success' using JSX syntax. It dynamically composes the content inside the alert by interpolating several properties from the 'props' object: 'leadIn' (a lead-in message), 'betaName' (the name of the beta feature), and 'leadOut' (a trailing message). The content includes bold formatting and non-breaking spaces to format the displayed text that indicates a beta feature path within a file. Dependencies include a React component named 'Alert' capable of accepting a 'severity' prop. Input props must provide the mentioned keys as strings. The output is a styled alert box communicating beta feature information. There are no explicit constraints noted.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/includes/beta-features/beta-alert.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Alert severity=\"success\">{props.leadIn}**File**&nbsp;&rang; **Beta Features**&nbsp;&rang; **{props.betaName}**{props.leadOut}</Alert>\n```\n\n----------------------------------------\n\nTITLE: Linking to Globals API Reference\nDESCRIPTION: This snippet demonstrates using `SideBarLink` and `Button` components, likely within a documentation framework, to create a prominent link directing users to the detailed documentation page for Roblox Engine globals. The `nodeId` attribute likely targets a specific section within the documentation structure.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/reference/engine/globals.md#_snippet_0\n\nLANGUAGE: Markup\nCODE:\n```\n<SideBarLink nodeId='Engine API/Globals'>\n  <Button color='secondary' size='large' variant='contained'>See globals</Button>\n</SideBarLink>\n```\n\n----------------------------------------\n\nTITLE: Selecting the Character for Animation\nDESCRIPTION: Procedure to select the pre-set character figure in the scene, which is necessary before posing and animating. It emphasizes visual highlighting of the figure and focus in the editor.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/build-it-play-it-island-of-move/creating-animations.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<img src=\"../../assets/education/build-it-play-it-island-of-move/creating-animations/highlight-figure.jpeg\" width=\"50%\" />\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<img src=\"../../assets/education/build-it-play-it-island-of-move/creating-animations/rig-selected.jpeg\" width=\"50%\" />\n```\n\n----------------------------------------\n\nTITLE: Redeem Code for Mansion of Wonders Rewards\nDESCRIPTION: This is a specific code string to be copied and entered into the Roblox 'Mansion of Wonders' game. Interacting with the in-game character Freddie and selecting 'REDEEM CODE' allows the player to input this code to receive the Ghastly Aura avatar item and the Alchemical Antics badge.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/build-it-play-it-mansion-of-wonder/challenge-checkpoint-2.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nThingsGoBoom\n```\n\n----------------------------------------\n\nTITLE: Adding descriptive comments to HTML example code snippets\nDESCRIPTION: This snippet provides context for embedding videos and images within instructional HTML content, including how to structure controls and visual explanations for users.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/build-it-play-it-mansion-of-wonder/particle-emitters.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<video controls src=\"../../assets/education/build-it-play-it-mansion-of-wonder/particle-emitters/particle-example.mp4\" width=\"100%\"></video>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<img src=\"../../assets/education/build-it-play-it-mansion-of-wonder/particle-emitters/particle-holder.jpeg\"  width=\"100%\" />\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<thead>\n<tr>\n<th>Action</th>\n<th>Control</th>\n</tr>\n</thead>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<img src=\"../../assets/education/build-it-play-it-mansion-of-wonder/particle-emitters/highlight-explorer.jpeg\" />\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<img src=\"../../assets/education/build-it-play-it-mansion-of-wonder/particle-emitters/reopen-explorer.png\" />\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<img src=\"../../assets/education/build-it-play-it-mansion-of-wonder/particle-emitters/select-blaster-shot.gif\" />\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<img src=\"../../assets/education/build-it-play-it-mansion-of-wonder/particle-emitters/highlight-properties.jpeg\" />\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<img src=\"../../assets/education/build-it-play-it-mansion-of-wonder/particle-emitters/select-color.png\" />\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<img src=\"../../assets/education/build-it-play-it-mansion-of-wonder/particle-emitters/set-color.png\" />\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<img src=\"../../assets/education/build-it-play-it-mansion-of-wonder/particle-emitters/show-color-change.jpeg\" width=\"50%\" />\n```\n\n----------------------------------------\n\nTITLE: Handling General Asset Load Failure\nDESCRIPTION: A generic error indicating that an unspecified asset could not be loaded. Check asset integrity and accessibility.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/validation-errors.md#_snippet_43\n\nLANGUAGE: Text\nCODE:\n```\nAsset could not be loaded\n```\n\n----------------------------------------\n\nTITLE: Handling Multiple Instance Selection Error\nDESCRIPTION: This error indicates that more than one instance of a specific type (`%s`) was selected when only a single instance is expected. Select only one instance of the required type.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/validation-errors.md#_snippet_34\n\nLANGUAGE: Text\nCODE:\n```\nSelected more than one instance of type `%s`. Please, select a single instance of this type and try again.\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video (Overview)\nDESCRIPTION: Embeds a YouTube video providing a high-level overview of 3D clothing on Roblox using an iframe. The containing div uses relative positioning and padding-bottom to maintain a 16:9 aspect ratio, while the iframe is absolutely positioned to fill the container.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/accessories/layered-clothing.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div\nclassName=\"container\"\nstyle={{ position: \"relative\", paddingBottom: \"56.25%\", height: 0, marginBottom: 12 }} >\n<iframe\nsrc=\"https://www.youtube-nocookie.com/embed/gXXukd6yOSs\"\ntitle=\"YouTube video player\"\nframeBorder=\"0\"\nallow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\nallowFullScreen\nstyle={{ position: \"absolute\", top: 0, left: 0, width: \"100%\", height: \"100%\" }} ></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Verifying Facial Animation Data in Blender\nDESCRIPTION: Steps to ensure facial animation rigs and custom properties are correctly set, including timeline checks, custom property validation, and pose verification for facial animations. It also advises re-skinning or rigging if issues are found.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/art/characters/testing/blender.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n## Facial animation data\n\nFacial animation uses multiple modeling components to work effectively. If using a template, or making changes to a model with existing facial animation data, it's sometimes possible to make a change that affects the saved poses, either in the animation timeline, or in the custom property of the head mesh.\n\nUse the following steps to help verify the integrity of your facial animation data:\n\n1. With the Armature object selected, check the animation frame in the **timeline**:\n\n   1. The timeline typically ranges between **0–330**, though not all templates use the entire range, and there may be gaps between poses.\n      <img src=\"../../../assets/art/avatar/basic-creation/Testing-Animation-Timeline.png\" />\n   2. The **neutral pose** should be on **frame 0**.\n   3. There shouldn't be any keyframe gaps between the frames with animation data.\n\n2. Verify the **Object Properties** > **Custom Properties** panel for the Head_Geo object:\n   <img src=\"../../../assets/art/avatar/basic-creation/Testing-Custom-Properties.png\" width = \"80%\" />\n\n   1. There should be a **RootFaceJoint** attribute set to the name of the first facial animation bone.\n\n      1. This bone should be a child of the **Head** bone, one of the 15 required bones in an avatar's armature.\n      2. In templates and some reference models, this bone is commonly named `DynamicHead` and indicates the beginning of the facial animation rig.\n\n   2. There should be about the same number of custom properties as unique animation frames, with each animation pose having its own mapped custom property.\n   3. The names for the mapped poses here should match the spelling and capitalization of the [FACS pose reference](../../../art/characters/facial-animation/facs-poses-reference.md).\n\n   <video controls src=\"../../../assets/art/avatar/basic-creation/Testing_01.mp4\" width=\"100%\"></video>\n\n<Alert severity = 'error'>\nIf you discover issues with your face animation data, you may need to repeat the skinning, posing, or mapping processes for your character's head. See [Creating Heads](../../../art/characters/facial-animation/create-basic-heads.md) for a general overview of the avatar head creation process.\n\nIf you are using a template and run into issues, it's possible the facial data was overridden by a saved animation, or the rigging or mapped data was mistakenly deleted. If it's difficult to quickly identify and resolve the issue, it may be quicker to restart your character customization from the original template file.\n</Alert>\n```\n\n----------------------------------------\n\nTITLE: Locating and Opening Animation Editor in Roblox Studio\nDESCRIPTION: Instructions to open the Animation Editor by navigating the Avatar tab, enabling users to select and start creating animations for characters. It includes UI navigation steps and visual cues.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/build-it-play-it-island-of-move/creating-animations.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<img src=\"../../assets/studio/general/Avatar-Tab-Animation-Editor.png\" width=\"640\" />\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<img src=\"../../assets/education/build-it-play-it-island-of-move/creating-animations/open-animation-editor.png\" width=\"50%\" />\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<img src=\"../../assets/education/build-it-play-it-island-of-move/creating-animations/highlight-animation-editor.jpeg\" width=\"100%\" />\n```\n\n----------------------------------------\n\nTITLE: Combining Name Queries with OR\nDESCRIPTION: Finds instances whose names contain either 'Cat' OR 'Dog'. The `or` keyword performs a logical OR. This implicitly searches instance names.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/studio/explorer.md#_snippet_21\n\nLANGUAGE: RobloxSearchQuery\nCODE:\n```\nCat or Dog\n```\n\n----------------------------------------\n\nTITLE: Applying a Custom Texture to the Explosion Particles\nDESCRIPTION: This section describes how to apply a chosen texture to explosion particles by copying the texture's ID number and pasting it into the Texture property of the 'ExplosionParticles' object. It presumes familiarity with Roblox Studio's interface for property editing and testing visual results with the Play button. No code snippet is provided, only interface interactions.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/education/build-it-play-it-mansion-of-wonder/making-an-explosion.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Displaying Platform Investment Percentage using JSX Grid and Chip\nDESCRIPTION: This JSX snippet uses Grid and Chip components to illustrate the 15% allocated towards future platform investments and development. It displays the percentage and label in styled chips, with a distinct background color for the percentage chip.\nSOURCE: https://github.com/unknown7987/rbxdocs/blob/main/production/earn-on-roblox.md#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Grid container spacing={1}>\n<Grid item XSmall={2}>\n<Chip label=\"15%\" size=\"large\" style={{backgroundColor:\"#004F80\",color:\"white\",fontSize:\"120%\",width:\"100%\"}} />\n</Grid>\n<Grid item XSmall={10}>\n<Chip label=\"Platform investment\" size=\"large\" color=\"primary\" variant=\"outlined\" style={{fontSize:\"105%\"}}/>\n</Grid>\n</Grid>\n```"
  }
]