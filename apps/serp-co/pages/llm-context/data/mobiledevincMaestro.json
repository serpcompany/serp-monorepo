[
  {
    "owner": "mobile-dev-inc",
    "repo": "maestro",
    "content": "TITLE: Defining Test Flow in Maestro for Mobile App Testing\nDESCRIPTION: A complete test flow configuration for Maestro mobile app testing framework. The flow includes launching an app, navigating through multiple screens, performing various UI interactions like tapping, swiping, and scrolling, and validating UI elements with assertions.\nSOURCE: https://github.com/mobile-dev-inc/maestro/blob/main/maestro-orchestra/src/test/resources/workspaces/e007_single_flow_malformatted_command/singleFlow.txt#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nappId: com.example.app\n\n---\n- launchApp\n\n- waitForAnimationToEnd\n\n- tapOn:\n    text: \"Get Started\"\n\n- assertVisible: \"Welcome to our app!\"\n\n- tapOn:\n    id: \"login_button\"\n\n- inputText: \"user@example.com\"\n    id: \"email_field\"\n\n- inputText: \"password123\"\n    id: \"password_field\"\n\n- tapOn:\n    text: \"Sign In\"\n\n- assertVisible: \"Dashboard\"\n\n- swipe:\n    direction: UP\n    duration: 200\n\n- tapOn:\n    text: \"Settings\"\n\n- scrollUntilVisible:\n    element:\n      text: \"Logout\"\n    direction: DOWN\n\n- tapOn:\n    text: \"Logout\"\n\n- assertVisible: \"You have been logged out\"\n\n- back\n\n- takeScreenshot: \"final_state\"\n```\n\n----------------------------------------\n\nTITLE: Defining Authentication Test Flow in Maestro Framework (YAML)\nDESCRIPTION: This YAML configuration defines a complete test flow for validating a login process. It includes steps for entering credentials, tapping the login button, and verifying successful authentication through UI element assertions.\nSOURCE: https://github.com/mobile-dev-inc/maestro/blob/main/maestro-orchestra/src/test/resources/workspaces/e005_single_flow_does_not_exist/singleFlow.txt#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nappId: com.example.app\n\nenv:\n  EMAIL: \"test@example.com\"\n  PASSWORD: \"password123\"\n\nname: Login Flow\n\nonFlowStart:\n  - clearState\n  - clearKeychain\n  - launchApp\n\nflow:\n  - runFlow:\n      file: \"onboarding.yaml\"\n      when:\n        visible: \"Welcome to Example\"\n\n  - tapOn: \"Email\"\n  - inputText: ${EMAIL}\n  \n  - tapOn: \"Password\"\n  - inputText: ${PASSWORD}\n  \n  - tapOn: \"Sign In\"\n  \n  - assertVisible: \"Dashboard\"\n  - assertVisible: \"Account: ${EMAIL}\"\n  \n  - takeScreenshot: \"login-success\"\n```\n\n----------------------------------------\n\nTITLE: Defining Maestro Test Flow in YAML\nDESCRIPTION: This YAML configuration defines a sequence of actions to test a mobile application using Maestro. It includes steps for launching the app, interacting with UI elements, and asserting expected outcomes.\nSOURCE: https://github.com/mobile-dev-inc/maestro/blob/main/maestro-orchestra/src/test/resources/workspaces/e006_single_flow_invalid_string_command/singleFlow.txt#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nappId: com.example.app\nname: Example test flow\n\nenv:\n  TEST_EMAIL: test@example.com\n  TEST_PASSWORD: password123\n\nwithReports:\n  name: Reports Directory\n  path: reports\n\nwithCoverage:\n  name: Coverage Directory\n  path: coverage\n\nwithLaunchEnvironment:\n  FOO: bar\n\nwithRetries:\n  maxRetries: 3\n  interval: 5000\n\nlaunchAppResult:\n  appLaunchSuccess: true\n  appLaunchTime: 2000\n\nonFlowComplete:\n  - runFlow:\n      file: cleanup.yaml\n\nsteps:\n  - launchApp\n  - tapOn: \"Login\"\n  - inputText: ${TEST_EMAIL}\n  - tapOn: \"Next\"\n  - inputText: ${TEST_PASSWORD}\n  - tapOn: \"Sign in\"\n  - assertVisible: \"Welcome\"\n  - tapOn: \"Start\"\n  - scroll\n  - tapOn: \"Settings\"\n  - assertVisible: \"Logout\"\n  - back\n  - tapOn: \"Profile\"\n  - assertVisible: ${TEST_EMAIL}\n  - takeScreenshot: \"profile_screen\"\n  - stopApp\n```\n\n----------------------------------------\n\nTITLE: Defining onFlowStart and onFlowComplete Hooks in YAML\nDESCRIPTION: Implements hooks that run at the start and completion of a Maestro flow. These hooks can contain commands to be executed before and after the main test flow.\nSOURCE: https://github.com/mobile-dev-inc/maestro/blob/main/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nonFlowStart:\n  - runFlow: setup.yaml\n\nonFlowComplete:\n  - runFlow: cleanup.yaml\n\nappId: com.example.app\nname: Main Test Flow\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Platform-Specific Flow Execution in YAML\nDESCRIPTION: Uses the platform condition in the runFlow command to execute different flows based on the platform (iOS or Android), allowing for platform-specific test orchestration.\nSOURCE: https://github.com/mobile-dev-inc/maestro/blob/main/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n- runFlow:\n    when:\n      platform: ios\n    file: ios_specific_flow.yaml\n- runFlow:\n    when:\n      platform: android\n    file: android_specific_flow.yaml\n```\n\n----------------------------------------\n\nTITLE: Accessing Platform in JavaScript\nDESCRIPTION: Shows how to access the current platform (iOS/Android) in JavaScript code within Maestro tests. Available as maestro.platform property.\nSOURCE: https://github.com/mobile-dev-inc/maestro/blob/main/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmaestro.platform\n```\n\n----------------------------------------\n\nTITLE: Optional Command Example\nDESCRIPTION: Example of using the optional argument in Maestro commands to handle command failures gracefully. When a command fails with optional:true, it shows a warning instead of failing the test.\nSOURCE: https://github.com/mobile-dev-inc/maestro/blob/main/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- command:\n    optional: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Android Driver Startup Timeout in YAML\nDESCRIPTION: Sets a custom timeout for Android driver startup, useful in CI/CD environments with performance limitations. The timeout is specified in milliseconds.\nSOURCE: https://github.com/mobile-dev-inc/maestro/blob/main/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nenv:\n  ANDROID_DRIVER_STARTUP_TIMEOUT: 120000\n```\n\n----------------------------------------\n\nTITLE: Setting iOS Driver Startup Timeout in YAML Configuration\nDESCRIPTION: Configures a custom timeout for iOS driver startup, beneficial in CI/CD environments with performance constraints. The timeout value is specified in milliseconds.\nSOURCE: https://github.com/mobile-dev-inc/maestro/blob/main/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nenv:\n  MAESTRO_DRIVER_STARTUP_TIMEOUT: 180000\n```\n\n----------------------------------------\n\nTITLE: Properly Configured Maestro Flow File with Config Section in YAML\nDESCRIPTION: Example of the correct format for a Maestro flow file, demonstrating the required config section with an appId property, followed by the flow commands. The config section must appear at the beginning of the file before any command steps.\nSOURCE: https://github.com/mobile-dev-inc/maestro/blob/main/maestro-orchestra/src/test/resources/workspaces/e010_missing_config_section/error.txt#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nappId: com.example.app # <-- config section\n---\n- launchApp\n```\n\n----------------------------------------\n\nTITLE: Required Config Section Format for Maestro Flow Files\nDESCRIPTION: This example demonstrates the mandatory structure for Maestro flow files. Every flow file must start with a configuration section (such as appId) followed by a separator (---) and then the test steps. This structure is required for Maestro to properly identify and execute the flow.\nSOURCE: https://github.com/mobile-dev-inc/maestro/blob/main/maestro-orchestra/src/test/resources/workspaces/e023_empty/error.txt#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nappId: com.example.app # <-- config section\n---\n- launchApp\n```\n\n----------------------------------------\n\nTITLE: Properly Structured Maestro Flow File with Commands Section in YAML\nDESCRIPTION: This snippet demonstrates the correct structure of a Maestro flow file, containing both a configuration section with app ID and a commands section starting with a launchApp command. The flow file requires both sections separated by three dashes.\nSOURCE: https://github.com/mobile-dev-inc/maestro/blob/main/maestro-orchestra/src/test/resources/workspaces/e023_empty_commands/error.txt#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nappId: com.example.app\n---\n- launchApp\n```\n\n----------------------------------------\n\nTITLE: Running Maestro Sample Updates from Console\nDESCRIPTION: Shell command for updating Maestro samples. This script likely downloads the latest app binaries and flow definitions, packages them, and uploads them to Google Cloud Storage for distribution via the 'maestro download-samples' command.\nSOURCE: https://github.com/mobile-dev-inc/maestro/blob/main/e2e/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./update_samples\n```\n\n----------------------------------------\n\nTITLE: Building and Running Maestro CLI for Local Development\nDESCRIPTION: Commands for rebuilding the Maestro CLI after making changes. This generates a startup script that can be used for testing local changes instead of the globally installed version.\nSOURCE: https://github.com/mobile-dev-inc/maestro/blob/main/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :maestro-cli:installDist\n```\n\n----------------------------------------\n\nTITLE: Simulating Touch Events via iOS XCTest Runner API\nDESCRIPTION: Example of how to use the HTTP API to simulate a touch event on a connected iOS device. The API accepts coordinates and duration parameters in JSON format.\nSOURCE: https://github.com/mobile-dev-inc/maestro/blob/main/CONTRIBUTING.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -fsSL -X POST localhost:22087/touch -d '\n{\n  \"x\": 150,\n  \"y\": 150,\n  \"duration\": 0.2\n}'\n```\n\n----------------------------------------\n\nTITLE: Simulating Swipe Gestures via iOS XCTest Runner API\nDESCRIPTION: Example of how to use the HTTP API to simulate a swipe gesture on a connected iOS device. The API accepts start and end coordinates plus duration parameters in JSON format.\nSOURCE: https://github.com/mobile-dev-inc/maestro/blob/main/CONTRIBUTING.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sSL -X GET localhost:22087/swipe -d '\n{\n  \"startX\": 150,\n  \"startY\": 426,\n  \"endX\": 426,\n  \"endY\": 350,\n  \"duration\": 1\n}'\n```\n\n----------------------------------------\n\nTITLE: Running the Standalone iOS XCTest Runner\nDESCRIPTION: Instructions for running the iOS XCTest runner independently of the Maestro CLI. This script uses xcodebuild to run the test runner on a connected iOS device.\nSOURCE: https://github.com/mobile-dev-inc/maestro/blob/main/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./maestro-ios-xctest-runner/run-maestro-ios-runner.sh\n```\n\n----------------------------------------\n\nTITLE: Querying Device Information from iOS XCTest Runner\nDESCRIPTION: Example of how to use curl to get device information from the HTTP server running inside the iOS XCTest runner. The server provides device dimensions in both pixels and points.\nSOURCE: https://github.com/mobile-dev-inc/maestro/blob/main/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -fsSL -X GET localhost:22087/deviceInfo | jq\n```\n\n----------------------------------------\n\nTITLE: Rebuilding iOS XCUITest Driver\nDESCRIPTION: Command for rebuilding the iOS XCUITest driver after making changes. This script builds the necessary artifacts and places them in the appropriate resources directory.\nSOURCE: https://github.com/mobile-dev-inc/maestro/blob/main/CONTRIBUTING.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n./maestro-ios-xctest-runner/build-maestro-ios-runner.sh\n```\n\n----------------------------------------\n\nTITLE: Running All Maestro Unit Tests\nDESCRIPTION: Command for running all unit tests across the Maestro project. This approach validates individual components rather than integration flows.\nSOURCE: https://github.com/mobile-dev-inc/maestro/blob/main/CONTRIBUTING.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew test\n```\n\n----------------------------------------\n\nTITLE: Correct Maestro Flow Configuration\nDESCRIPTION: Example of the correct Maestro Flow configuration structure including the required appId field.\nSOURCE: https://github.com/mobile-dev-inc/maestro/blob/main/maestro-orchestra/src/test/resources/workspaces/e018_config_missing_appId/error.txt#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nappId: com.example.app\n---\n- launchApp\n```\n\n----------------------------------------\n\nTITLE: Incorrect Maestro Flow Configuration\nDESCRIPTION: Example of an incorrect Maestro Flow configuration missing the required appId field.\nSOURCE: https://github.com/mobile-dev-inc/maestro/blob/main/maestro-orchestra/src/test/resources/workspaces/e018_config_missing_appId/error.txt#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: MyFlow\n---\n```\n\n----------------------------------------\n\nTITLE: Running Maestro Integration Tests\nDESCRIPTION: Command for running integration tests that use a FakeDriver to simulate a real device. These tests validate the core functionality without requiring actual devices.\nSOURCE: https://github.com/mobile-dev-inc/maestro/blob/main/CONTRIBUTING.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :maestro-test:test\n```\n\n----------------------------------------\n\nTITLE: Configuring App Launch in Maestro YAML\nDESCRIPTION: This YAML snippet defines the start of a Maestro flow configuration. It specifies the app ID and attempts to use the launchApp command, but the command is incorrectly formatted.\nSOURCE: https://github.com/mobile-dev-inc/maestro/blob/main/maestro-orchestra/src/test/resources/workspaces/e023_launchApp_empty_string/error.txt#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nappId: com.example.app\n---\n- launchApp:\n```\n\n----------------------------------------\n\nTITLE: Incorrect Tags Format in Maestro Flow File\nDESCRIPTION: This snippet shows an invalid YAML configuration for a Maestro flow file where the tags are incorrectly formatted as comma-separated values. The error indicates that this format is not accepted by Maestro.\nSOURCE: https://github.com/mobile-dev-inc/maestro/blob/main/maestro-orchestra/src/test/resources/workspaces/e017_config_invalid_tags/error.txt#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nappId: com.example.app\ntags: foo, bar\n---\n\n```\n\n----------------------------------------\n\nTITLE: Invalid Maestro Flow Configuration in YAML\nDESCRIPTION: A Maestro Flow.yaml configuration file with an invalid command 'inp' that generates an error. The file attempts to configure a test flow for a mobile application but contains a syntax error at line 3.\nSOURCE: https://github.com/mobile-dev-inc/maestro/blob/main/maestro-orchestra/src/test/resources/workspaces/e016_config_invalid_command_in_onFlowStart/error.txt#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nappId: com.example.app\nonFlowStart:\n  - inp\n---\n```\n\n----------------------------------------\n\nTITLE: Invalid Media File Reference in Maestro Flow Configuration\nDESCRIPTION: YAML configuration file showing an invalid media file path in a Maestro flow. The configuration attempts to add a media file and launch an app, but the referenced media file path is not found.\nSOURCE: https://github.com/mobile-dev-inc/maestro/blob/main/maestro-orchestra/src/test/resources/workspaces/e014_invalid_media_file_outside/error.txt#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nappId: com.example\n---\n- addMedia:\n    - \"../../e013_invalid_media_file/workspace/assets/android.png\"\n- launchApp\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration with Missing Media File Reference\nDESCRIPTION: A YAML configuration file attempting to add media and launch an app, but failing due to a missing media file at './assets/invalid_android.png'.\nSOURCE: https://github.com/mobile-dev-inc/maestro/blob/main/maestro-orchestra/src/test/resources/workspaces/e013_invalid_media_file/error.txt#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nappId: com.example\n---\n- addMedia:\n    - \"./assets/invalid_android.png\"\n- launchApp\n```\n\n----------------------------------------\n\nTITLE: Configuring Maestro Flow with Invalid File Path in YAML\nDESCRIPTION: This YAML snippet defines a Maestro flow configuration with an app ID and attempts to run a flow from an invalid file path. The configuration results in an error due to the non-existent file.\nSOURCE: https://github.com/mobile-dev-inc/maestro/blob/main/maestro-orchestra/src/test/resources/workspaces/e012_invalid_subflow_path/error.txt#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nappId: com.example\n---\n- runFlow: invalidpath.yaml\n```\n\n----------------------------------------\n\nTITLE: Incorrect Maestro Flow File Format in YAML\nDESCRIPTION: This snippet shows the incorrect format of a Maestro flow file where commands are not formatted as a list. The proper structure requires commands to be formatted as YAML list items after the configuration section.\nSOURCE: https://github.com/mobile-dev-inc/maestro/blob/main/maestro-orchestra/src/test/resources/workspaces/e011_missing_dashes/error.txt#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nappId: com.example\n---\nlaunchApp\n```\n\n----------------------------------------\n\nTITLE: Correct Maestro Flow File Format in YAML\nDESCRIPTION: This snippet demonstrates the correct format for a Maestro flow file, with commands properly formatted as a YAML list after the configuration section, as shown in the error message example.\nSOURCE: https://github.com/mobile-dev-inc/maestro/blob/main/maestro-orchestra/src/test/resources/workspaces/e011_missing_dashes/error.txt#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nappId: com.example.app\n---\n- launchApp\n```\n\n----------------------------------------\n\nTITLE: Invalid Command in Maestro YAML Configuration\nDESCRIPTION: This snippet shows a YAML configuration file for Maestro with an invalid command. The error message points out the exact location of the invalid command and provides a link to the documentation for valid commands.\nSOURCE: https://github.com/mobile-dev-inc/maestro/blob/main/maestro-orchestra/src/test/resources/workspaces/e009_nested_subflow_invalid_string_command/error.txt#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nappId: com.example\n---\n- invalidCommand\n```\n\n----------------------------------------\n\nTITLE: Invalid Command Error in Maestro YAML Config\nDESCRIPTION: Shows a YAML configuration file with an invalid command, demonstrating how Maestro handles and displays syntax errors. The error occurs in a SubFlow.yaml file where an unrecognized command 'invalidCommand' is used.\nSOURCE: https://github.com/mobile-dev-inc/maestro/blob/main/maestro-orchestra/src/test/resources/workspaces/e008_subflow_invalid_string_command/error.txt#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nappId: com.example\n---\n- invalidCommand\n```\n\n----------------------------------------\n\nTITLE: Invalid Maestro Flow Configuration in YAML\nDESCRIPTION: This YAML snippet shows a Maestro flow configuration with an invalid command. The 'appId' is set correctly, but the flow contains an unrecognized command 'invalidCommand' which triggers an error.\nSOURCE: https://github.com/mobile-dev-inc/maestro/blob/main/maestro-orchestra/src/test/resources/workspaces/e006_single_flow_invalid_string_command/error.txt#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nappId: com.example\n---\n- invalidCommand\n```\n\n----------------------------------------\n\nTITLE: File Path Error Message\nDESCRIPTION: Error message displayed when the system cannot locate a Flow.yaml file at the specified path in a workspace directory.\nSOURCE: https://github.com/mobile-dev-inc/maestro/blob/main/maestro-orchestra/src/test/resources/workspaces/e005_single_flow_does_not_exist/error.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nFlow path does not exist: /tmp/WorkspaceExecutionPlannerErrorsTest_workspace/workspace/Flow.yaml\n```\n\n----------------------------------------\n\nTITLE: Correct YAML Command Structure Example\nDESCRIPTION: Demonstrates the correct YAML format for Maestro commands with proper indentation and structure. Shows how to properly nest parameters under commands and format multiple commands in sequence.\nSOURCE: https://github.com/mobile-dev-inc/maestro/blob/main/maestro-orchestra/src/test/resources/workspaces/e022_top_level_option/error.txt#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- tapOn:\n  text: submit\n  optional: true\n- inputText: hello\n```\n\n----------------------------------------\n\nTITLE: Invalid YAML Command Structure\nDESCRIPTION: Shows an invalid YAML command format with incorrect indentation of the optional parameter. The error occurs because the optional field is not properly nested under the tapOn command.\nSOURCE: https://github.com/mobile-dev-inc/maestro/blob/main/maestro-orchestra/src/test/resources/workspaces/e022_top_level_option/error.txt#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- tapOn: foo\n  optional: true\n```\n\n----------------------------------------\n\nTITLE: Correcting Command Format in Maestro Flow YAML\nDESCRIPTION: This snippet demonstrates the correct format for a list of commands in a Maestro flow file. It shows how to properly structure the 'tapOn' and 'inputText' commands with correct indentation and dashes.\nSOURCE: https://github.com/mobile-dev-inc/maestro/blob/main/maestro-orchestra/src/test/resources/workspaces/e021_multiple_command_names/error.txt#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- tapOn:\n    text: submit\n    optional: true\n- inputText: hello\n```\n\n----------------------------------------\n\nTITLE: Maestro Version Check\nDESCRIPTION: Command to verify Maestro CLI version\nSOURCE: https://github.com/mobile-dev-inc/maestro/blob/main/RELEASING.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmaestro --version\n```\n\n----------------------------------------\n\nTITLE: Parsing YAML Swipe Action with Invalid Direction in Maestro\nDESCRIPTION: This YAML snippet defines a swipe action with an invalid direction 'diagonal'. Maestro expects the direction to be one of: RIGHT, LEFT, UP, DOWN (case-insensitive).\nSOURCE: https://github.com/mobile-dev-inc/maestro/blob/main/maestro-orchestra/src/test/resources/workspaces/e019_invalid_swipe_direction/error.txt#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- swipe:\n    direction: diagonal\n```\n\n----------------------------------------\n\nTITLE: Building Maestro AI Demo Application with Gradle\nDESCRIPTION: Command to build the Maestro AI demo application using Gradle. The startup script will be generated in the specified directory path.\nSOURCE: https://github.com/mobile-dev-inc/maestro/blob/main/maestro-ai/README.md#2025-04-22_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n./gradlew :maestro-ai:installDist\n```\n\n----------------------------------------\n\nTITLE: Running Maestro AI Demo with Advanced Options for Multiple Screenshots\nDESCRIPTION: Command to run the Maestro AI demo on multiple Uber screenshots with defects, using GPT-4o model. The command includes flags to display the prompts sent to the model and the raw responses received.\nSOURCE: https://github.com/mobile-dev-inc/maestro/blob/main/maestro-ai/README.md#2025-04-22_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nmaestro-ai-demo \\\n  --model gpt-4o-2024-08-06 \\\n  --show-prompts \\\n  --show-raw-response \\\n  test-ai-fixtures/uber_*_bad.png\n```\n\n----------------------------------------\n\nTITLE: Running Maestro AI Demo for a Single Screenshot\nDESCRIPTION: Command to run the Maestro AI demo on a single screenshot that contains defects. This tests the AI's ability to identify issues in a bad screenshot.\nSOURCE: https://github.com/mobile-dev-inc/maestro/blob/main/maestro-ai/README.md#2025-04-22_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nmaestro-ai-demo foo_1_bad.png\n```\n\n----------------------------------------\n\nTITLE: Git Version Tagging Commands\nDESCRIPTION: Commands for creating and pushing version tags\nSOURCE: https://github.com/mobile-dev-inc/maestro/blob/main/RELEASING.md#2025-04-22_snippet_1\n\nLANGUAGE: git\nCODE:\n```\ngit commit -am \"Prepare for release X.Y.Z.\"\n```\n\n----------------------------------------\n\nTITLE: Git Tag Push\nDESCRIPTION: Command for pushing tags to remote repository\nSOURCE: https://github.com/mobile-dev-inc/maestro/blob/main/RELEASING.md#2025-04-22_snippet_3\n\nLANGUAGE: git\nCODE:\n```\ngit push --tags\n```\n\n----------------------------------------\n\nTITLE: Git Tag Creation\nDESCRIPTION: Commands for creating annotated version tags\nSOURCE: https://github.com/mobile-dev-inc/maestro/blob/main/RELEASING.md#2025-04-22_snippet_2\n\nLANGUAGE: git\nCODE:\n```\ngit tag -a vX.Y.Z -m \"Version X.Y.Z\"\n```\n\n----------------------------------------\n\nTITLE: Git Branch Management Commands\nDESCRIPTION: Commands for managing git branches and ensuring main branch is up to date\nSOURCE: https://github.com/mobile-dev-inc/maestro/blob/main/RELEASING.md#2025-04-22_snippet_0\n\nLANGUAGE: git\nCODE:\n```\ngit checkout main && git pull\n```\n\n----------------------------------------\n\nTITLE: Maestro CLI Installation\nDESCRIPTION: Command for installing Maestro CLI using curl\nSOURCE: https://github.com/mobile-dev-inc/maestro/blob/main/RELEASING.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -Ls \"https://get.maestro.mobile.dev\" | bash\n```\n\n----------------------------------------\n\nTITLE: Generating Project Dependency Graph\nDESCRIPTION: Command for generating a visual dependency graph between Maestro subprojects using the gradle-dependency-graph-generator-plugin.\nSOURCE: https://github.com/mobile-dev-inc/maestro/blob/main/CONTRIBUTING.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :generateDependencyGraph\n```\n\n----------------------------------------\n\nTITLE: Example iOS Device Information JSON Response\nDESCRIPTION: Example output from the iOS XCTest runner's deviceInfo endpoint, showing the device dimensions in both pixels and points as a JSON object.\nSOURCE: https://github.com/mobile-dev-inc/maestro/blob/main/CONTRIBUTING.md#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"heightPoints\": 852,\n  \"heightPixels\": 2556,\n  \"widthPixels\": 1179,\n  \"widthPoints\": 393\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Closing Message\nDESCRIPTION: A decorative ASCII art style closing message showing the framework was built by Mobile.dev\nSOURCE: https://github.com/mobile-dev-inc/maestro/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nBuilt with ❤️ by Mobile.dev\n```\n\n----------------------------------------\n\nTITLE: Incomplete Maestro flow definition with missing command options in YAML\nDESCRIPTION: A Maestro test flow YAML file that causes an error because the 'tapOn' command is used without specifying the required target element to tap on. The error occurs on line 3 of the Flow.yaml file.\nSOURCE: https://github.com/mobile-dev-inc/maestro/blob/main/maestro-orchestra/src/test/resources/workspaces/e020_missing_command_options/error.txt#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nappId: com.example.app\n---\n- tapOn\n```\n\n----------------------------------------\n\nTITLE: Invalid Property in Maestro Flow YAML\nDESCRIPTION: This snippet shows a YAML configuration with an unknown property 'invalidOption' in a Maestro Flow file, which triggers an error. The error indicates that the property is not recognized by the Maestro framework.\nSOURCE: https://github.com/mobile-dev-inc/maestro/blob/main/maestro-orchestra/src/test/resources/workspaces/e007_single_flow_malformatted_command/error.txt#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- launchApp:\n    invalidOption: true\n```\n\n----------------------------------------\n\nTITLE: Invalid Maestro Flow Command in YAML\nDESCRIPTION: This snippet shows an invalid command format in a Maestro flow configuration. The correct format should be \"<commandName>: <options>\", but the snippet uses an array format instead.\nSOURCE: https://github.com/mobile-dev-inc/maestro/blob/main/maestro-orchestra/src/test/resources/workspaces/e015_array_command/error.txt#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nappId: com.example.app\n---\n- [foo, bar, baz]\n```\n\n----------------------------------------\n\nTITLE: Declaring Non-Flow Status in Maestro Framework\nDESCRIPTION: A simple declaration stating that the current file is not part of a Maestro flow. This likely helps the Maestro framework identify which files should be excluded from flow processing.\nSOURCE: https://github.com/mobile-dev-inc/maestro/blob/main/maestro-orchestra/src/test/resources/workspaces/001_simple/notAFlow.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nThis file is not a flow\n```\n\n----------------------------------------\n\nTITLE: Configuring IntelliJ Properties for idb.proto\nDESCRIPTION: Custom property configuration for IntelliJ IDE to handle idb.proto definition files. Sets the maximum file size for IntelliSense parsing.\nSOURCE: https://github.com/mobile-dev-inc/maestro/blob/main/maestro-ios/README.md#2025-04-22_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\n# Needed for working with idb.proto definition\nidea.max.intellisense.filesize=4000\n```"
  }
]