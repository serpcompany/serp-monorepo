[
  {
    "owner": "microsoftedge",
    "repo": "microsoftedge-documentation",
    "content": "TITLE: Adding Custom Jump List Command in JavaScript\nDESCRIPTION: This snippet demonstrates how to add a custom jump list command to a PWA. It checks for WinRT and JumpList support, loads the current jump list, creates a custom item with arguments and display name, and saves the changes.\nSOURCE: https://github.com/microsoftedge/microsoftedge-documentation/blob/master/pwa-snippets/tasks/jumplist.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Check if WinRT is available AND if JumpList is supported on the device\nif (window.Windows && Windows.UI.StartScreen.JumpList.isSupported()) {\n    var JumpList = Windows.UI.StartScreen.JumpList;\n    var JumpListItem = Windows.UI.StartScreen.JumpListItem;\n\n    JumpList.loadCurrentAsync().done(function (jumpList) {\n\n        var arguments = \"jump list command args\"; //These will get passed to your app upon activation\n        var displayName = \"Custom jump list command name\";\n        var item = JumpListItem.createWithArguments(arguments, displayName);\n        item.description = \"Tooltip description of the custom jump list item\";\n\n        item.groupName = \"Custom group name\";\n        item.logo = new Windows.Foundation.Uri(\"ms-appx:///images/custom-jumplist-command.png\");\n        jumpList.items.append(item);\n        jumpList.saveAsync();\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Pinning Secondary Tile in Windows 10\nDESCRIPTION: Demonstrates how to create a secondary tile with required properties including tileId, displayName, arguments, and visual elements. The code checks for WinRT support, constructs the tile with custom options, and requests user permission to pin it.\nSOURCE: https://github.com/microsoftedge/microsoftedge-documentation/blob/master/pwa-snippets/tasks/tiles.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n    // Check if WinRT is supported on the device\n    if (window.Windows) {\n\n        // WinRT namespaces\n        var SecondaryTile = Windows.UI.StartScreen.SecondaryTile;\n        var Uri = Windows.Foundation.Uri;\n        var Colors = Windows.UI.Colors;\n\n        // Construct secondary tile and add required properties\n        var tile = new SecondaryTile();\n        tile.tileId = new Date().getTime();\n        tile.displayName = \"Secondary app tile\";\n        tile.arguments = \"Args to pass for app activation\";\n        tile.visualElements.square150x150Logo = new Uri(\"ms-appx:///images/Square150x150Logo.png\");\n\n        // Specify some options\n        tile.visualElements.showNameOnSquare150x150Logo = true; // Default is false\n        tile.visualElements.backgroundColor = Colors.red; \n\n        // Ask the user to pin the tile\n        var result = tile.requestCreateAsync().done(function () {\n            // Handle success and error conditions\n        });\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Context Menu with WinRT PopupMenu in PWA\nDESCRIPTION: Creates a custom context menu with two options and a separator using the WinRT PopupMenu class. The code checks for WinRT support, handles the contextmenu event, and converts page coordinates to WinRT coordinates. It includes event handling for menu item selection and dismissal.\nSOURCE: https://github.com/microsoftedge/microsoftedge-documentation/blob/master/pwa-snippets/tasks/context-menu.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n    // Check if WinRT is supported on the device\n    if (window.Windows && window.Windows.UI.Popups) {\n        document.addEventListener('contextmenu', function (e) {\n            var menu = new Windows.UI.Popups.PopupMenu();\n            menu.commands.append(new Windows.UI.Popups.UICommand(\"Option 1\", null, 1));\n            menu.commands.append(new Windows.UI.Popups.UICommandSeparator);\n            menu.commands.append(new Windows.UI.Popups.UICommand(\"Option 2\", null, 2));\n\n            // Convert from page to WinRT coordinates\n            function pageToWinRT(pageX, pageY) {\n                var zoomFactor = document.documentElement.msContentZoomFactor;\n                return {\n                    x: (pageX - window.pageXOffset) * zoomFactor,\n                    y: (pageY - window.pageYOffset) * zoomFactor\n                };\n            }\n\n            menu.showAsync(pageToWinRT(e.pageX, e.pageY)).done(function (invokedCommand) {\n                if (invokedCommand !== null) {\n                    switch (invokedCommand.id) {\n                        case 1: \n                            console.log('Option 1 selected');\n                            // Invoke code for option 1\n                            break;\n                        case 2: \n                            console.log('Option 2 selected');\n                            // Invoke code for option 2\n                            break;\n                        default:\n                            break;\n                    }\n                } else {\n                    // The command is null if no command was invoked.\n                    console.log(\"Context menu dismissed\");\n                }\n            });\n        }, false);\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Colors for Windows 10 App Title Bar in JavaScript\nDESCRIPTION: This code snippet demonstrates how to set custom colors for various elements of the title bar in a Windows 10 application. It uses the Windows.UI.ViewManagement.ApplicationView API to access and modify the title bar properties. The code sets colors for background, foreground, buttons, and inactive states.\nSOURCE: https://github.com/microsoftedge/microsoftedge-documentation/blob/master/pwa-snippets/tasks/title-bar.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nif (window.Windows && Windows.UI.ViewManagement.ApplicationView) {\n    var customColors = {\n        backgroundColor: { a: 255, r: 54, g: 60, b: 116 },\n        foregroundColor: { a: 255, r: 232, g: 211, b: 162 },\n        buttonBackgroundColor: { a: 255, r: 54, g: 60, b: 116 },\n        buttonForegroundColor: { a: 255, r: 232, g: 211, b: 162 },\n        buttonHoverBackgroundColor: { a: 255, r: 19, g: 21, b: 40 },\n        buttonHoverForegroundColor: { a: 255, r: 255, g: 255, b: 255 },\n        buttonPressedBackgroundColor: { a: 255, r: 232, g: 211, b: 162 },\n        buttonPressedForegroundColor: { a: 255, r: 54, g: 60, b: 116 },\n        inactiveBackgroundColor: { a: 255, r: 135, g: 141, b: 199 },\n        inactiveForegroundColor: { a: 255, r: 232, g: 211, b: 162 },\n        buttonInactiveBackgroundColor: { a: 255, r: 135, g: 141, b: 199 },\n        buttonInactiveForegroundColor: { a: 255, r: 232, g: 211, b: 162 },\n    };\n\n    var titleBar = Windows.UI.ViewManagement.ApplicationView.getForCurrentView().titleBar;\n    titleBar.backgroundColor = customColors.backgroundColor;\n    titleBar.foregroundColor = customColors.foregroundColor;\n    titleBar.inactiveBackgroundColor = customColors.inactiveBackgroundColor;\n    titleBar.inactiveForegroundColor = customColors.inactiveForegroundColor; \n}\n```\n\n----------------------------------------\n\nTITLE: Implementing StartupTask Client-Side Logic\nDESCRIPTION: JavaScript implementation to handle automatic startup functionality, including state management and user interactions. Uses WinRT StartupTask API to enable/disable automatic launching and handle various startup states.\nSOURCE: https://github.com/microsoftedge/microsoftedge-documentation/blob/master/pwa-snippets/tasks/auto-launch.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Check if WinRT is supported on the device\nif (window.Windows) {\n    var StartupTask = Windows.ApplicationModel.StartupTask;\n    var StartupTaskState = Windows.ApplicationModel.StartupTaskState;\n\n    // Obtain startup task and assign new value\n    StartupTask.getAsync(\"Startup\").then(function(task) {\n        switch (task.state) {\n        case StartupTaskState.disabled:\n            // Task is disabled but can be enabled.\n            task.requestEnableAsync().done(function(resultState) {\n                // Add your success and error handlers\n            });\n            break;\n        case StartupTaskState.disabledByUser:\n            // Inform user that task is disabled and they must enable it manually\n            var help = \"Looks like you chose to disable this app from launching automatically when you sign in to Windows. \" +\n                \"If you change your mind, you can enable it again in the 'Startup' tab of 'Task Manager'.\";\n            var md = new Windows.UI.Popups.MessageDialog(help);\n            var cmd = new Windows.UI.Popups.UICommand(\"OK\");\n            md.commands.append(cmd);\n            md.showAsync();\n            break;\n        case StartupTaskState.disabledByPolicy:\n            // Startup disabled by group policy, or not supported on this device\n            break;\n        case StartupTaskState.enabled:\n            // Task is enabled but can be disabled\n            task.disable();\n            break;\n        case StartupTaskState.enabledByPolicy:\n            // Startup is enabled by a policy set on this device\n            break;\n        }\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Tile Activation Events in Windows 10\nDESCRIPTION: Shows how to handle activation events when a user launches the app from a tile. The code listens for WebUI.Activated events and checks for specific activation arguments to determine the launch context.\nSOURCE: https://github.com/microsoftedge/microsoftedge-documentation/blob/master/pwa-snippets/tasks/tiles.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nWindows.UI.WebUI.WebUIApplication.addEventListener(\"activated\", function (activatedEventArgs) {\n    if (activatedEventArgs.kind == Windows.ApplicationModel.Activation.ActivationKind.launch &&\n        activatedEventArgs.arguments == \"secondary tile arguments\") {\n        // Setup app according to specified context\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Responding to Jump List Commands in JavaScript\nDESCRIPTION: This code snippet shows how to handle jump list command activations. It listens for the 'activated' event and checks if the activation was triggered by a launch event with specific arguments.\nSOURCE: https://github.com/microsoftedge/microsoftedge-documentation/blob/master/pwa-snippets/tasks/jumplist.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nWindows.UI.WebUI.WebUIApplication.addEventListener(\"activated\", function (activatedEventArgs) {\n    if (activatedEventArgs.kind == Windows.ApplicationModel.Activation.ActivationKind.launch &&\n        activatedEventArgs.arguments == \"jump list command args\") {\n        // Respond to jumplist command specified by argument(s)\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating and Navigating WebView Control in JavaScript\nDESCRIPTION: This snippet demonstrates how to feature detect WebView support, create a WebView element, and navigate to a URL. It's designed for use in a Windows 10 app running in a WWAHost.exe process.\nSOURCE: https://github.com/microsoftedge/microsoftedge-documentation/blob/master/pwa-snippets/tasks/webview.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Feature detect for webview support\nif (MSHTMLWebViewElement) {\n    var wv = document.createElement('x-ms-webview'); // Use CSS to set width, height and other styles\n    wv.navigate(\"https://www.bing.com\");\n    document.body.appendChild(wv);\n}\n```\n\n----------------------------------------\n\nTITLE: Handling File Activation from Jump List in JavaScript\nDESCRIPTION: This code snippet demonstrates how to handle file activations from the jump list. It listens for the 'activated' event, checks if it's a file activation, and provides access to the selected file.\nSOURCE: https://github.com/microsoftedge/microsoftedge-documentation/blob/master/pwa-snippets/tasks/jumplist.md#2025-04-23_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nWindows.UI.WebUI.WebUIApplication.addEventListener(\"activated\", function (activatedEventArgs) {\n    if (activatedEventArgs.kind == Windows.ApplicationModel.Activation.ActivationKind.file &&\n        activatedEventArgs.length > 0 &&\n        activatedEventArgs[0].files.length > 0) {\n        // Open the selected file: activatedEventArgs[0].files[0].name\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Adding File to Most Recently Used List in JavaScript\nDESCRIPTION: This function demonstrates how to add a file to the app's Most Recently Used (MRU) list. It attempts to get the file from the local folder, creates it if it doesn't exist, and adds it to the MRU list.\nSOURCE: https://github.com/microsoftedge/microsoftedge-documentation/blob/master/pwa-snippets/tasks/jumplist.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction addFile(fileName)\n{\n    var localFolder = Windows.Storage.ApplicationData.current.localFolder;\n    var AccessCache = Windows.Storage.AccessCache;\n\n    localFolder.tryGetItemAsync(fileName).done(function (file) {\n        if (file == null) {\n            localFolder.createFileAsync(fileName).done(function (newFile) {\n                AccessCache.StorageApplicationPermissions.mostRecentlyUsedList.add(newFile, \"\", AccessCache.RecentStorageItemVisibility.appAndSystem);\n            });\n        }\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Adding MRU Files to Jump List Frequent Group in JavaScript\nDESCRIPTION: This snippet shows how to add files from the Most Recently Used (MRU) list as jump list entries under the 'Frequent' group. It loads the current jump list and sets the system group kind to 'frequent'.\nSOURCE: https://github.com/microsoftedge/microsoftedge-documentation/blob/master/pwa-snippets/tasks/jumplist.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar StartScreen = Windows.UI.StartScreen;\n\nStartScreen.JumpList.loadCurrentAsync().done(function (jumpList) {\n    jumpList.systemGroupKind = StartScreen.JumpListSystemGroupKind.frequent;\n    jumpList.saveAsync();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring StartupTask in Windows App Manifest\nDESCRIPTION: XML configuration for the app manifest file to enable automatic startup functionality. Requires adding the uap5 namespace and StartupTask extension with TaskId and DisplayName parameters.\nSOURCE: https://github.com/microsoftedge/microsoftedge-documentation/blob/master/pwa-snippets/tasks/auto-launch.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Package ... xmlns:uap5=\"http://schemas.microsoft.com/appx/manifest/uap/windows10/5\" IgnorableNamespaces=\"... uap5\">\n...\n<Application>\n    ...\n    <Extensions>\n        <uap5:Extension Category=\"windows.startupTask\" StartPage=\"\">\n            <uap5:StartupTask\n            TaskId=\"Startup\"\n            DisplayName=\"The name of your app\"/>\n        </uap5:Extension>\n    </Extensions>\n</Application>\n```\n\n----------------------------------------\n\nTITLE: Creating WebView in Separate Process using JavaScript\nDESCRIPTION: This snippet shows how to create a WebView in its own separate process using the MSWebViewProcess object. Multiple WebViews created with the same MSWebViewProcess object will share the same process.\nSOURCE: https://github.com/microsoftedge/microsoftedge-documentation/blob/master/pwa-snippets/tasks/webview.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar wvprocess = new MSWebViewProcess();\n\n// WebViews created with the same MSWebViewProcess object share the same process\nwvprocess.CreateWebViewAsync().then(function (webview) {\n    webview.navigate(\"https://www.bing.com\");\n    document.body.appendChild(webview);\n});\n```\n\n----------------------------------------\n\nTITLE: Clearing Jump List in JavaScript\nDESCRIPTION: This snippet shows how to clear both system-managed and programmatically added jump list items. It loads the current jump list, sets the system group kind to 'none', clears all items, and saves the changes.\nSOURCE: https://github.com/microsoftedge/microsoftedge-documentation/blob/master/pwa-snippets/tasks/jumplist.md#2025-04-23_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nJumpList.loadCurrentAsync().done(function (jumpList) {\n    // Clear the system-managed (recent, frequent) jump list items \n    jumpList.systemGroupKind = JumpListSystemGroupKind.none;\n\n    // Clear the jump list items that were added programmatically\n    jumpList.items.clear();\n\n    jumpList.saveAsync();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Authentication URIs with HTML Meta Tag\nDESCRIPTION: This HTML snippet demonstrates how to use a meta tag to specify the start and end URIs for the web authentication broker. It includes placeholders for the provider's start point, client ID, and end point, which need to be replaced with actual values from the identity provider.\nSOURCE: https://github.com/microsoftedge/microsoftedge-documentation/blob/master/pwa-snippets/tasks/web-authentication-broker.md#2025-04-23_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<meta name=\"ms-webauth-uris\" content=\"https://<providerstartpoint>?client_id=<clientid>&response_type=token, https://<appendpoint>\"/>\n```\n\n----------------------------------------\n\nTITLE: Initializing InkCanvas Properties in JavaScript\nDESCRIPTION: This code snippet demonstrates how to initialize the inking properties of a canvas control. It sets up the canvas, retrieves the ms-ink context, configures input device types, and sets default drawing attributes.\nSOURCE: https://github.com/microsoftedge/microsoftedge-documentation/blob/master/pwa-snippets/tasks/inkCanvas.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar inkCanvas;\nvar inkContext;\nvar inkPresenter;\n...\n// Set initial ink stroke attributes.\ninkCanvas = document.getElementById(\"InkCanvas\"); // get canvas control\ninkCanvas.setAttribute(\"width\", inkCanvas.offsetWidth);\ninkCanvas.setAttribute(\"height\", inkCanvas.offsetHeight);\n\n// Get the ms-ink context\ninkContext = inkCanvas.getContext(\"ms-ink\");\ninkPresenter = inkContext.msInkPresenter;\n\ninkPresenter.inputDeviceTypes =\nWindows.UI.Core.CoreInputDeviceTypes.mouse |\nWindows.UI.Core.CoreInputDeviceTypes.pen |\nWindows.UI.Core.CoreInputDeviceTypes.touch;\n\n// Set the default drawing attributes.\ninkColor = Windows.UI.Colors.black;\n```\n\n----------------------------------------\n\nTITLE: Referencing a Cortana Voice Command Definition File in HTML\nDESCRIPTION: This HTML meta tag specifies the location of a Voice Command Definition (VCD) file for Cortana integration. When the page loads, Windows automatically downloads and registers the VCD file, enabling voice command functionality for the web application.\nSOURCE: https://github.com/microsoftedge/microsoftedge-documentation/blob/master/pwa-snippets/tasks/cortana-voice-commands.md#2025-04-23_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<meta name=\"msapplication-cortanavcd\" content=\"https://contoso.com/vcd.xml\"/>\n```"
  }
]