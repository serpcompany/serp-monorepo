[
  {
    "owner": "microsoft",
    "repo": "devskim",
    "content": "TITLE: Recommending AES Creation Method in .NET\nDESCRIPTION: Provides the recommended method `System.Security.Cryptography.Aes.Create()` for creating an instance of the secure AES algorithm in .NET applications as a replacement for the insecure DES cipher.\nSOURCE: https://github.com/microsoft/devskim/blob/main/guidance/DS106864.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nSystem.Security.Cryptography.Aes.Create()\n```\n\n----------------------------------------\n\nTITLE: Configuring .NET ServiceModel to Use OS Default TLS Versions\nDESCRIPTION: Ensure the `Switch.System.ServiceModel.DontEnableSystemDefaultTlsVersions` AppContext switch is effectively `false`. When `false` (the default state in modern frameworks or if explicitly set to false), the application defers the choice of TLS protocol version to the operating system, enhancing crypto-agility. Avoid setting this switch to `true`, as that would prevent the use of OS defaults.\nSOURCE: https://github.com/microsoft/devskim/blob/main/guidance/DS112835.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nAppContext Switch: Switch.System.ServiceModel.DontEnableSystemDefaultTlsVersions\nRecommended Value: false (to allow OS default)\n```\n\n----------------------------------------\n\nTITLE: Avoiding Explicit TLS Protocol Setting in .NET\nDESCRIPTION: Advises against explicitly setting the `System.Net.ServicePointManager.SecurityProtocol` property in application code. Doing so overrides the operating system's chosen TLS protocol, reducing cryptographic agility and potentially compromising security if a stronger protocol becomes available or the specified one becomes weak. Let the OS decide by not setting this property.\nSOURCE: https://github.com/microsoft/devskim/blob/main/guidance/DS112835.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// Recommendation: Do NOT set System.Net.ServicePointManager.SecurityProtocol\n// Example of what to avoid:\n// System.Net.ServicePointManager.SecurityProtocol = System.Net.SecurityProtocolType.Tls12; // Avoid hardcoding\n```\n\n----------------------------------------\n\nTITLE: Replacing unsafe strncpy with secure strncpy_s in C\nDESCRIPTION: This snippet explains the security issues related to the use of strncpy and demonstrates how to replace it with the secure version strncpy_s. It emphasizes the importance of null-termination and buffer size checks to prevent buffer overflows. Dependencies include the C standard library, specifically string handling functions.\nSOURCE: https://github.com/microsoft/devskim/blob/main/guidance/DS111237.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#include <string.h>\n#include <stdio.h>\n\nvoid copyString(char *dest, size_t destSize, const char *src) {\n    // Using strncpy_s to securely copy string\n    strncpy_s(dest, destSize, src, _TRUNCATE);\n    printf(\"Copied string: %s\\n\", dest);\n}\n\nint main() {\n    char buffer[20];\n    const char *source = \"Hello, World!\";\n    copyString(buffer, sizeof(buffer), source);\n    return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Recommended Secure Alternative in C: strncat_s\nDESCRIPTION: This snippet shows the recommended secure alternative to strncat that helps prevent buffer overruns by properly checking buffer sizes and ensuring null termination.\nSOURCE: https://github.com/microsoft/devskim/blob/main/guidance/DS108330.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nstrncat_s(destination, destination_size, source, count)\n```\n\n----------------------------------------\n\nTITLE: Preventing Certificate Validation Bypass (.NET)\nDESCRIPTION: This snippet provides guidance on how to prevent certificate validation bypasses in .NET. It advises against specific configurations that disable or weaken certificate validation.  It mandates removing any `ServerCertificateValidationCallback` that unconditionally returns `true`. Additionally, it forbids setting `X509CertificateValidationMode` to `None` or setting `SkipTlsVerify` to `true`.\nSOURCE: https://github.com/microsoft/devskim/blob/main/guidance/DS181865.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Using AES Cipher in .NET\nDESCRIPTION: This code snippet demonstrates how to create an AES (Advanced Encryption Standard) object in .NET. The `System.Security.Cryptography.Aes.Create()` method creates an instance of the AES class, providing a secure alternative to 3DES.  It does not take any parameters but is used as the initialization for secure encryption operations. This is a direct replacement and safe alternative to 3DES encryption.\nSOURCE: https://github.com/microsoft/devskim/blob/main/guidance/DS109501.md#_snippet_0\n\nLANGUAGE: .NET\nCODE:\n```\nSystem.Security.Cryptography.Aes.Create()\n```\n\n----------------------------------------\n\nTITLE: Secure Path Validation for Zip Extraction in C#\nDESCRIPTION: This snippet demonstrates how to properly validate file paths before extraction to prevent Zip Slip attacks. It checks whether the destination path is within the target directory by comparing the full paths.\nSOURCE: https://github.com/microsoft/devskim/blob/main/guidance/DS113854.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n    string destFileName = Path.GetFullPath(Path.Combine(destDirectory, entry.FullName));\n    string fullDestDirPath = Path.GetFullPath(destDirectory);\n    if (!destFileName.StartsWith(fullDestDirPath))\n    {\n        throw new Exception(\"Entry is outside of the target dir: \" + destFileName);\n    }   \n```\n\n----------------------------------------\n\nTITLE: Preventing Certificate Validation Bypass (JavaScript)\nDESCRIPTION: This snippet provides guidance on how to prevent certificate validation bypasses in JavaScript. It advises against disabling certificate validation for TLS connections by setting `rejectUnauthorized: false`. This setting bypasses the certificate validation process, making the connection vulnerable to man-in-the-middle attacks. The guidance highlights the importance of verifying TLS certificates.\nSOURCE: https://github.com/microsoft/devskim/blob/main/guidance/DS181865.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Identifying Insecure DES Usage in C#/.NET\nDESCRIPTION: Lists the classes (`DESCryptoServiceProvider`, `DES`) and factory method calls (`SymmetricAlgorithm.Create`) used to instantiate or access the insecure DES algorithm in C#/.NET applications. Identifying these patterns is crucial for migrating to secure alternatives like AES.\nSOURCE: https://github.com/microsoft/devskim/blob/main/guidance/DS106864.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nSystem.Security.Cryptography.DESCryptoServiceProvider\n```\n\nLANGUAGE: csharp\nCODE:\n```\nSystem.Security.Cryptography.DES\n```\n\nLANGUAGE: csharp\nCODE:\n```\nSystem.Security.Cryptography.SymmetricAlgorithm.Create(\"System.Security.Cryptography.DES\")\n```\n\nLANGUAGE: csharp\nCODE:\n```\nSystem.Security.Cryptography.SymmetricAlgorithm.Create(\"DES\")\n```\n\n----------------------------------------\n\nTITLE: Replacing Insecure Hash Algorithms with SHA-2 Family in .NET\nDESCRIPTION: Shows the recommended secure hash algorithm classes from the System.Security.Cryptography namespace that should replace insecure algorithms like MD5 and SHA-1. These alternatives provide stronger cryptographic protection against collision attacks.\nSOURCE: https://github.com/microsoft/devskim/blob/main/guidance/DS109733.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nSystem.Security.Cryptography.SHA512Cng\nSystem.Security.Cryptography.SHA384Cng\nSystem.Security.Cryptography.SHA256Cng\n```\n\n----------------------------------------\n\nTITLE: Identifying Insecure DES Usage in Windows C/C++\nDESCRIPTION: Identifies the algorithm identifiers used to access the insecure DES cipher in Windows C/C++ applications via the legacy CryptoAPI (`CALG_DES` with functions like `CryptDeriveKey`) and the newer Cryptography API: Next Generation (CNG) (`BCRYPT_DES_ALGORITHM` with functions like `BCryptOpenAlgorithmProvider`). Both indicate usage of the broken DES cipher.\nSOURCE: https://github.com/microsoft/devskim/blob/main/guidance/DS106864.md#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nCALG_DES\n```\n\nLANGUAGE: c\nCODE:\n```\nBCRYPT_DES_ALGORITHM\n```\n\n----------------------------------------\n\nTITLE: Configuring Schannel to Use OS Default TLS Version in C++\nDESCRIPTION: When initializing Schannel credentials using the `SCHANNEL_CRED` structure in C++, set the `grbitEnabledProtocols` field to `0`. This configuration instructs the operating system to utilize its default enabled TLS protocol versions, promoting cryptographic agility. Avoid specifying explicit protocol versions in this field.\nSOURCE: https://github.com/microsoft/devskim/blob/main/guidance/DS112835.md#_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\n#include <schannel.h>\n\n// ...\n\nSCHANNEL_CRED cred = {0};\ncred.dwVersion = SCHANNEL_CRED_VERSION;\n// Setting grbitEnabledProtocols to 0 instructs Schannel\n// to use the system default protocols.\ncred.grbitEnabledProtocols = 0; \n\n// ... use cred structure ...\n```\n\n----------------------------------------\n\nTITLE: Avoiding $_REQUEST in PHP for security\nDESCRIPTION: This guidance explains why $_REQUEST should be avoided in PHP applications and recommends using specific superglobals ($_POST, $_GET, $_COOKIE) to restrict input to the expected delivery method, enhancing application security.\nSOURCE: https://github.com/microsoft/devskim/blob/main/guidance/DS144886.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$_REQUEST // Should be avoided\n\n// Instead use:\n$_POST   // For POST data\n$_GET    // For GET parameters\n$_COOKIE // For cookie values\n```\n\n----------------------------------------\n\nTITLE: HTML Anchor Tag Security Configuration\nDESCRIPTION: This snippet describes a security best practice related to HTML anchor tags. The `rel=\"noopener noreferrer\"` attribute should be added to `<a>` tags with the `target=\"_blank\"` attribute to prevent tabnabbing attacks. This prevents the new tab from manipulating the original tab via the `window.opener` property.  The only required element is the `<a href=\"...\">` tag along with the `target=\"_blank\"` and `rel=\"noopener noreferrer\"` attributes.\nSOURCE: https://github.com/microsoft/devskim/blob/main/guidance/DS610000.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: PowerShell Restricted Functions List\nDESCRIPTION: A comprehensive list of PowerShell functions that should be restricted due to security concerns. These functions may enable memory corruption, code execution, or other security vulnerabilities when used improperly.\nSOURCE: https://github.com/microsoft/devskim/blob/main/guidance/DS104456.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `GetDelegateForFunctionPointer`\n* `System.Runtime.InteropServices.Marshal`\n* `WriteByte`\n* `Microsoft.Win32.UnsafeNativeMethods`\n* `PtrToStructure`\n* `StructureToPtr`\n* `NtCreateThreadEx`\n* `CreateRemoteThread`\n* `Invoke-Command`\n* `Invoke-Expression`\n* `VirtualProtect`\n```\n\n----------------------------------------\n\nTITLE: Identifying Insecure DES Usage in OpenSSL C/C++\nDESCRIPTION: Highlights how the insecure DES cipher is used in C/C++ applications via the OpenSSL library. This includes specific function calls following the `DES_*_encrypt` pattern (e.g., `DES_cbc_encrypt`) and internal constants (`DES_ENCRYPT`, `DES_DECRYPT`) passed to these functions. Use of these indicates reliance on the vulnerable DES algorithm.\nSOURCE: https://github.com/microsoft/devskim/blob/main/guidance/DS106864.md#_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nDES_*_encrypt /* (e.g. DES_cbc_encrypt, DES_cfb_encrypt, etc.) */\n```\n\nLANGUAGE: c\nCODE:\n```\nDES_ENCRYPT\n```\n\nLANGUAGE: c\nCODE:\n```\nDES_DECRYPT\n```\n\n----------------------------------------\n\nTITLE: Enabling Strong Cryptography for .NET Networking\nDESCRIPTION: Ensure the `Switch.System.Net.DontEnableSchUseStrongCrypto` AppContext switch is `false`. When `false` (the default state or explicitly set to false), the application uses strong cryptography, enabling more secure protocols like TLS 1.2/1.3 and disabling insecure ones. Avoid setting this switch to `true`.\nSOURCE: https://github.com/microsoft/devskim/blob/main/guidance/DS112835.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nAppContext Switch: Switch.System.Net.DontEnableSchUseStrongCrypto\nRecommended Value: false (to enable strong crypto)\n```\n\n----------------------------------------\n\nTITLE: Unsafe C Function Usage Example: strncat\nDESCRIPTION: This snippet is referenced in the document as an unsafe C function that should be avoided due to potential buffer overrun vulnerabilities. The function doesn't check for sufficient space in the destination string.\nSOURCE: https://github.com/microsoft/devskim/blob/main/guidance/DS108330.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nstrncat(destination, source, n)\n```\n\n----------------------------------------\n\nTITLE: Preventing Certificate Validation Bypass (Python)\nDESCRIPTION: This snippet provides guidance on how to prevent certificate validation bypasses in Python. It advises against using `verify=False` when making a request. This ensures that the TLS certificate is always validated against the trusted CA.\nSOURCE: https://github.com/microsoft/devskim/blob/main/guidance/DS181865.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Building DevSkim VSCode Extension (Shell)\nDESCRIPTION: This command uses npm to execute a script defined in the project's package.json file, specifically the `pack-ext` script. Its purpose is to compile and package the DevSkim VS Code extension into a distributable `.vsix` file. Requires Node.js and the project's npm dependencies to be installed.\nSOURCE: https://github.com/microsoft/devskim/blob/main/DevSkim-VSCode-Plugin/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm run pack-ext\n```\n\n----------------------------------------\n\nTITLE: Using DevSkim CLI for Analysis\nDESCRIPTION: This command runs the DevSkim CLI to analyze source code files.  The `--source-code` parameter specifies the directory containing the files to be analyzed.  The CLI will then scan the specified code for security vulnerabilities based on its built-in rules.  No specific dependencies are required beyond installing the CLI.\nSOURCE: https://github.com/microsoft/devskim/blob/main/README.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\ndevskim analyze --source-code c:\\path\\to\\FilesToAnalyze\n```\n\n----------------------------------------\n\nTITLE: Setting up DevSkim Debugging Environment (Shell)\nDESCRIPTION: This sequence of commands prepares the project for debugging the VS Code extension. First, `npm run setup` executes a setup script (likely installing dependencies). Then, `tsc -b` compiles the TypeScript project using the build configuration, preparing the code for execution within the debugger. Requires Node.js, the project's npm dependencies, and the TypeScript compiler (`tsc`).\nSOURCE: https://github.com/microsoft/devskim/blob/main/DevSkim-VSCode-Plugin/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm run setup\n```\n\nLANGUAGE: Shell\nCODE:\n```\ntsc -b\n```\n\n----------------------------------------\n\nTITLE: Installing DevSkim CLI .NET Global Tool\nDESCRIPTION: This command installs the DevSkim CLI as a .NET global tool.  It requires the .NET SDK to be installed and adds the DevSkim executable to the user's PATH. Once installed, users can execute `devskim` from the command line. The tool provides static code analysis capabilities.\nSOURCE: https://github.com/microsoft/devskim/blob/main/README.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\ndotnet tool install --global Microsoft.CST.DevSkim.CLI\n```\n\n----------------------------------------\n\nTITLE: Vulnerable Zip Archive Extraction in C#\nDESCRIPTION: This snippet shows a vulnerable example of extracting files from a zip archive without proper path validation. The code does not check if the paths in the archive might contain directory traversal attacks.\nSOURCE: https://github.com/microsoft/devskim/blob/main/guidance/DS113854.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n  using (ZipArchive archive = ZipFile.OpenRead(zipPath))\n  {\n      foreach (ZipArchiveEntry entry in archive.Entries)\n      {\n          if (entry.FullName.EndsWith(\".txt\", StringComparison.OrdinalIgnoreCase))\n          {\n              entry.ExtractToFile(Path.Combine(extractPath, entry.FullName));\n          }\n      }\n  } \n```\n\n----------------------------------------\n\nTITLE: Dangerous T-SQL Commands and System Stored Procedures\nDESCRIPTION: A comprehensive list of potentially dangerous T-SQL commands and system stored procedures that can modify database internals, execute dynamic SQL, perform system commands, or access the Windows registry. These commands should only be used when the data passed to them originates from trusted sources.\nSOURCE: https://github.com/microsoft/devskim/blob/main/guidance/DS224000.md#_snippet_0\n\nLANGUAGE: T-SQL\nCODE:\n```\ndbcc writepage\nsp_configure\nsp_executesql\nsp_makewebtask\nxp_cmdshell\nxp_instance_regread\nxp_regread\nxp_regwrite\nxp_sendmail\n```"
  }
]