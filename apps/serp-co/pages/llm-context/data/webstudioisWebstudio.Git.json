[
  {
    "owner": "webstudio-is",
    "repo": "webstudio.git",
    "content": "TITLE: Implementing Command Detection with OpenAI in Webstudio\nDESCRIPTION: This code demonstrates how to use the commandDetect chain to identify commands from a user prompt. It initializes an OpenAI model, creates a command detection chain, and processes a user prompt against a list of possible commands to return matching operations.\nSOURCE: https://github.com/webstudio-is/webstudio.git/blob/main/packages/ai/src/chains/command-detect/README.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  commandDetect,\n  createGptModel\n  type GptModelMessageFormat\n} from \"@webstudio-is/ai\";\n\nexport async function handler({ request }) {\n  const { prompt,  } = await request.json();\n\n  const model = createGptModel({\n    apiKey: process.env.OPENAI_KEY,\n    organization: process.env.OPENAI_ORG,\n    temperature: 0,\n    model: \"gpt-3.5-turbo\",\n  });\n\n  const chain = commandDetect.createChain<GptModelMessageFormat>();\n\n  const result = await chain({\n    model,\n    context: {\n      prompt,\n      commands: {\n        \"copywriter\": \"writes, rewrites, translates text\",\n        \"edit-styles\": \"edits styles\",\n        // ...\n      }\n    }\n  });\n\n  if (result.succes === true) {\n    // An array of detected command names.\n    console.info(result.data);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Chains with a Language Model in TypeScript\nDESCRIPTION: Implements a chain that takes user input, generates messages with a model client, and returns a response based on the model's output. It defines `Context` and `Response` types using Zod and TypeScript and provides a function `createChain` for creating chains that evaluate a message's 'vibe'. The main dependencies include Zod for type definitions and a model client for message processing.\nSOURCE: https://github.com/webstudio-is/webstudio.git/blob/main/packages/ai/src/chains/README.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { z } from \"zod\";\nimport type {\n  Model as BaseModel,\n  ModelMessage,\n  ChainStream,\n} from \"../../types\";\nimport { formatPrompt } from \"../../utils/format-prompt\";\n\nexport const Context = z.object({\n  // A message from a user.\n  message: z.string(),\n});\nexport type Context = z.infer<typeof Context>;\n\nexport const Response = z.string();\nexport type Response = z.infer<typeof Response>;\n\nexport const createChain = <ModelMessageFormat>(): ChainStream<\n  BaseModel<ModelMessageFormat>,\n  Response,\n  Context\n> =>\n  async function chain({ model, context }) {\n    const { message } = context;\n\n    const userMessage: ModelMessage = [\n      \"user\",\n      formatPrompt(\n        { message },\n        `\nWhat is the vibe of the following message?\n\n```\n{message}\n```\n\nReply with \"positive\" or \"negative\"`\n      ),\n    ];\n\n    const messages = model.generateMessages([userMessage]);\n\n    const response = await model.request({ messages });\n\n    if (response.success == false) {\n      return response;\n    }\n\n    if (response.choices[0].includes(\"negative\")) {\n      return {\n        success: false,\n        status: 403,\n        statusText: \"Forbidden\",\n        message: \"Not cool. Try with a nice message instead.\",\n      };\n    }\n\n    return response;\n  };\n```\n\n----------------------------------------\n\nTITLE: Server-side Operations Chain Implementation in TypeScript\nDESCRIPTION: Server-side handler that processes AI operations using OpenAI models. It handles template generation, operation transformations, and supports both GPT-3.5 and GPT-4 models for different operations.\nSOURCE: https://github.com/webstudio-is/webstudio.git/blob/main/packages/ai/src/chains/operations/README.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  operations,\n  templateGenerator,\n  createGptModel\n  type GptModelMessageFormat\n} from \"@webstudio-is/ai\";\n\nexport async function handler({ request }) {\n  const { prompt, components, jsx } = await request.json();\n\n  const model = createGptModel({\n    apiKey: process.env.OPENAI_KEY,\n    organization: process.env.OPENAI_ORG,\n    temperature: 0.2,\n    model: \"gpt-3.5-turbo\",\n  });\n\n  const chain = operations.createChain<GptModelMessageFormat>();\n\n  const response = await chain({\n    model,\n    context: {\n      prompt,\n      components,\n      jsx\n    }\n  });\n\n  if (response.success === false) {\n    return response;\n  }\n\n  const promptOperations = getGenerateTemplatePromptsWsOperations(response.data);\n\n  if (promptOperations.length > 0) {\n    const model = createGptModel({\n      apiKey: process.env.OPENAI_KEY,\n      organization: process.env.OPENAI_ORG,\n      temperature: 0.2,\n      model: \"gpt-4\",\n    });\n    const chain = templateGenerator.createChain<GptModelMessageFormat>();\n\n    const results = await Promise.all(promptOperations.map(operation => chain({\n      model,\n      context: {\n        prompt: operation.llmPrompt,\n        components,\n      }\n    })));\n\n    replaceGenerateTemplateWithInsertTemplateWsOperations(\n      promptOperations,\n      results,\n      response,\n    );\n  }\n\n  return {\n    success: true,\n    data: response.data,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-Side Template Generator in TypeScript\nDESCRIPTION: Server-side implementation of the template generator chain. Sets up OpenAI GPT model configuration and processes incoming requests to generate UI templates based on prompts and available components.\nSOURCE: https://github.com/webstudio-is/webstudio.git/blob/main/packages/ai/src/chains/template-generator/README.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  templateGenerator,\n  createGptModel\n  type GptModelMessageFormat\n} from \"@webstudio-is/ai\";\n\nexport async function handler({ request }) {\n  const { prompt, components } = await request.json();\n\n  const model = createGptModel({\n    apiKey: process.env.OPENAI_KEY,\n    organization: process.env.OPENAI_ORG,\n    temperature: 0.5,\n    model: \"gpt-3.5-turbo\",\n  });\n\n  const chain = templateGenerator.createChain<GptModelMessageFormat>();\n\n  const response = await chain({\n    model,\n    context: {\n      prompt,\n      components, // This is an array of available component names.\n    }\n  });\n\n  // response.data contains the template\n\n  return response;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Client-side Copywriter Form with Streaming Response Handling\nDESCRIPTION: This client-side component creates a form that collects user input for text generation and sends it to the server. It handles the streaming response, displaying the generated content and managing the request lifecycle.\nSOURCE: https://github.com/webstudio-is/webstudio.git/blob/main/packages/ai/src/chains/copywriter/README.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  copywriter,\n  handleAiRequest,\n  type RemixStreamingTextResponse\n} from \"@webstudio-is/ai\";\n\nfunction UiComponent() {\n  const [error, setError] = useState();\n\n  return (\n    <form\n      onSubmit={(event) => {\n        event.preventDefault();\n\n        if (isLoading) {\n          return;\n        }\n\n        const formData = new FormData(event.currentTarget);\n        const prompt = formData.get(\"prompt\");\n        const projectId = formData.get(\"projectId\");\n        const textInstances = formData.get(\"textInstances\");\n\n        if (\n          typeof prompt !== \"string\" ||\n          typeof projectId !== \"string\" ||\n          typeof textInstances !== \"string\"\n        ) {\n          return;\n        }\n\n        handleAiRequest<RemixStreamingTextResponse>(\n          fetch(\n            '/rest/ai/copy',\n            {\n              method: \"POST\",\n              body: JSON.stringify({\n                prompt,\n                projectId,\n                textInstances: JSON.parse(textInstances),\n              }),\n              signal: abort.current.signal,\n            },\n          ),\n          {\n            signal: abort.current.signal,\n            onChunk: (id, { completion, done }) => {\n              // Log the completion.\n              console.info(completion)\n              if (done) {\n                doSomething(completion);\n              }\n            },\n          }\n        ).then((result) => {\n          abort.current = null;\n          if (typeof result !== \"string\") {\n            alert(\"Error \" + result.type);\n          }\n          setIsLoading(false);\n        });\n      }}\n    >\n      <label>\n        Copy request\n        <textarea name=\"prompt\" />\n      </label>\n\n      {/* Webstudio Project ID */}\n      <input type=\"hidden\" name=\"projectId\" value=\"123\" />\n\n      {/* */}\n      <input\n        type=\"hidden\"\n        name=\"textInstances\"\n        value={JSON.stringify(\n          copywriter.collectTextInstances({\n            new Map(webstudioBuild.instances),\n            rootInstanceId: \"123\"\n          })\n        )}\n      />\n\n      <button disabled={isLoading}>Generate Copy</button>\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Server Side Requests with GPT Model in TypeScript\nDESCRIPTION: Demonstrates a server-side handler function that receives a request, processes the message using a predefined chain, and returns the output. This example uses a GPT model initialized with specific parameters like apiKey, organization, and temperature. Necessary dependencies include the '@webstudio-is/ai' package for creating the model and chain.\nSOURCE: https://github.com/webstudio-is/webstudio.git/blob/main/packages/ai/src/chains/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  vibes,\n  createGptModel\n  type GptModelMessageFormat\n} from \"@webstudio-is/ai\";\n\nexport async function handler({ request }) {\n  const { message } = await request.json();\n\n  const model = createGptModel({\n    apiKey: process.env.OPENAI_KEY,\n    organization: process.env.OPENAI_ORG,\n    temperature: 0.5,\n    model: \"gpt-3.5-turbo\",\n  });\n\n  const chain = vibes.createChain<GptModelMessageFormat>();\n\n  return chain({\n    model,\n    context: {\n      message\n    }\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-side Copywriter Chain with GPT Model\nDESCRIPTION: This server-side implementation creates and configures a GPT model for text generation. It sets up the copywriter chain to process text generation requests and returns a streaming response with the generated content.\nSOURCE: https://github.com/webstudio-is/webstudio.git/blob/main/packages/ai/src/chains/copywriter/README.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  copywriter,\n  createGptModel\n  type GptModelMessageFormat\n} from \"@webstudio-is/ai\";\n\nexport async function handler({ request }) {\n  const { prompt, projectId, textInstances } = await request.json();\n\n  const model = createGptModel({\n    apiKey: process.env.OPENAI_KEY,\n    organization: process.env.OPENAI_ORG,\n    temperature: 0.5,\n    model: \"gpt-3.5-turbo\",\n  });\n\n  const chain = copywriter.createChain<GptModelMessageFormat>();\n\n  const response = await chain({\n    model,\n    context: {\n      prompt,\n      textInstances\n    }\n  });\n\n  if (response.success === false) {\n    return response;\n  }\n\n  // Respond with the text generation stream.\n  return response.stream;\n}\n```\n\n----------------------------------------\n\nTITLE: Transforming JSX to Webstudio Embed Template in TypeScript\nDESCRIPTION: Example of how to use the jsxToWSEmbedTemplate function to convert a JSX string to a Webstudio Embed Template. The function is imported from the @webstudio-is/jsx-utils package and used asynchronously.\nSOURCE: https://github.com/webstudio-is/webstudio.git/blob/main/packages/jsx-utils/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { jsxToWSEmbedTemplate } from \"@webstudio-is/jsx-utils\";\n\nawait jsxToWSEmbedTemplate(\"<Box>hello</Box>\");\n```\n\n----------------------------------------\n\nTITLE: Parsing Streamed JSON Response with Zod Schema Validation\nDESCRIPTION: This code snippet demonstrates how to incrementally parse and validate streamed JSON responses from the copywriter chain. It uses untruncate-json to handle partial JSON data and Zod for schema validation.\nSOURCE: https://github.com/webstudio-is/webstudio.git/blob/main/packages/ai/src/chains/copywriter/README.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport untruncateJson from \"untruncate-json\";\nimport { copywriter } from \"@webstudio-is/ai\";\n\n// ...\n\n// within UiComponent\n\nconst [json, setJson] = useState([]);\n\nuseEffect(() => {\n  try {\n    const jsonResponse = z\n      .array(copywriter.TextInstance)\n      .parse(JSON.parse(untruncateJson(completion)));\n\n    const currenTextInstance = jsonResponse.pop();\n\n    if (currenTextInstance === undefined) {\n      return;\n    }\n\n    console.clear();\n    console.info(currenTextInstance);\n    // patchTextInstance(currenTextInstance);\n  } catch (error) {\n    /**/\n  }\n}, [completion]);\n```\n\n----------------------------------------\n\nTITLE: Defining Generic Model Type in TypeScript for Webstudio AI\nDESCRIPTION: This code snippet defines a generic Model type used in the Webstudio AI package. It includes methods for generating messages, performing JSON completion, and streaming completion, allowing for vendor-agnostic implementation of language models.\nSOURCE: https://github.com/webstudio-is/webstudio.git/blob/main/packages/ai/src/models/README.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Model<ModelMessageFormat> = {\n  // Turns ModelMessages into a model-specific messages format.\n  generateMessages: ModelGenerateMessages<ModelMessageFormat>;\n  // JSON completion.\n  completion: ModelCompletion<ModelMessageFormat>;\n  // Streaming completion.\n  completionStream: ModelCompletionStream<ModelMessageFormat>;\n};\n```\n\n----------------------------------------\n\nTITLE: Client-side Operations Chain Implementation in TSX\nDESCRIPTION: Client-side implementation for handling AI requests and applying operations. Includes request handling with abort controller and operation application logic.\nSOURCE: https://github.com/webstudio-is/webstudio.git/blob/main/packages/ai/src/chains/operations/README.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  operations,\n  handleAiRequest\n} from \"@webstudio-is/ai\";\nimport { applyOperations } from \"./apply-operations\";\n\nconst abortController = new AbortController();\n\nhandleAiRequest<operations.Response>(\n  fetch(\n    '/rest/ai/op',\n    {\n      method: 'POST',\n      body: JSON.stringify({\n        prompt,\n        components: getAvailableComponentsFromWebstudioMetas(...),\n        jsx: getJsxAndCssForSelectedInstance(...),\n      }),\n      signal: abortController.signal\n    }\n  ),\n  {\n    signal: abortController.signal\n  }\n).then((result) => {\n  if (result.success === true && result.id === operations.name) {\n    applyOperations(result.data);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying Drag and Drop Component Requirements Table in Markdown\nDESCRIPTION: This table shows which components of the drag and drop system require access to different parts of the DOM or application state. It helps visualize the separation of concerns between different hooks.\nSOURCE: https://github.com/webstudio-is/webstudio.git/blob/main/packages/design-system/src/components/primitives/dnd/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Needs access to: | Drop targets DOM | Drag items DOM | Scroll container |\n| ---------------- | ---------------- | -------------- | ---------------- |\n| `useDrag`        |                  | V              |                  |\n| `useDrop`        | V                |                | V                |\n| `useAutoScroll`  |                  |                | V                |\n| `useHold`        |                  |                |                  |\n| `useDragCursor`  |                  |                |                  |\n```\n\n----------------------------------------\n\nTITLE: Implementing Client-Side Template Generator Form in TSX\nDESCRIPTION: Client-side React component implementation that creates a form interface for submitting template generation requests. Handles form submission, data processing, and displays the generated template response.\nSOURCE: https://github.com/webstudio-is/webstudio.git/blob/main/packages/ai/src/chains/template-generator/README.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { templateGenerator, handleAiRequest } from \"@webstudio-is/ai\";\n\nfunction UiComponent() {\n  const [error, setError] = useState();\n\n  return (\n    <form\n      onSubmit={(event) => {\n        event.preventDefault();\n\n        if (isLoading) {\n          return;\n        }\n\n        const formData = new FormData(event.currentTarget);\n        const prompt = formData.get(\"prompt\");\n        const components = formData.get(\"components\");\n\n        if (typeof prompt !== \"string\" || typeof components !== \"string\") {\n          return;\n        }\n\n        handleAiRequest<templateGenerator.Response>(\n          fetch(\"/rest/ai/template-generator\", {\n            method: \"POST\",\n            body: JSON.stringify({\n              prompt,\n              components: JSON.parse(components) || [],\n            }),\n          })\n        ).then((response) => {\n          if (response.success) {\n            // Log the template\n            console.info(response.data);\n          }\n        });\n      }}\n    >\n      <label>\n        Prompt\n        <textarea name=\"prompt\" />\n      </label>\n\n      <input\n        type=\"hidden\"\n        name=\"components\"\n        defaultValue='[\"Box\",\"Heading\",\"Image\",\"Text\"]'\n      />\n\n      <button disabled={isLoading}>Generate Section</button>\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Linking Webstudio Project (Bash)\nDESCRIPTION: This command links a local Webstudio project with a project from Webstudio Cloud.\nSOURCE: https://github.com/webstudio-is/webstudio.git/blob/main/packages/cli/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nwebstudio link\n```\n\n----------------------------------------\n\nTITLE: Configuring Prisma Client Migration with Transaction\nDESCRIPTION: Sets up a Prisma client with custom transaction options and database connection configuration using environment variables. Includes logging configuration and provides a template for writing migration operations within a transaction.\nSOURCE: https://github.com/webstudio-is/webstudio.git/blob/main/packages/prisma-client/prisma/migrations/template.txt#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from \"./client\";\n\nexport default () => {\n  if (process.env.DIRECT_URL === undefined) {\n    throw new Error(\"env variable DIRECT_URL is not defined\");\n  }\n\n  const client = new PrismaClient({\n    datasources: {\n      db: {\n        url: process.env.DIRECT_URL,\n      },\n    },\n\n    transactionOptions: {\n      timeout: 10 * 60 * 1000,\n      maxWait: 5000,\n    },\n\n    // Uncomment to see the queries in console as the migration runs\n    log: [\"query\", \"info\", \"warn\", \"error\"],\n  });\n\n  return client.$transaction(async (prisma) => {\n    // This is the body of your migration.\n    // Use the `prisma` client to perform database operations.\n    //\n    // Example:\n    //\n    // await prisma.user.updateMany({\n    //   where: { username: null },\n    //   data: { username: \"Anonymous\" },\n    // });\n    //\n    // If data models' API is not enough, consider using a raw query:\n    //\n    // await prisma.$executeRaw`UPDATE \"User\" SET \"username\" = \"email\" WHERE \"username\" IS NULL`;\n    //\n    //\n    // NOTE:\n    //   Don't do any schema modifications here like adding a column to a table!\n    //   If you need to change schema, edit schema.prisma and create a schema migration.\n  }, { timeout: 1000 * 60 });\n};\n```\n\n----------------------------------------\n\nTITLE: Syncing Webstudio Project (Bash)\nDESCRIPTION: This command syncs the local Webstudio project with the cloud version after linking.\nSOURCE: https://github.com/webstudio-is/webstudio.git/blob/main/packages/cli/README.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nwebstudio sync\n```\n\n----------------------------------------\n\nTITLE: Initiating Webstudio Project (Bash)\nDESCRIPTION: This command starts the process of connecting a Webstudio Cloud project to the local machine and building it.\nSOURCE: https://github.com/webstudio-is/webstudio.git/blob/main/packages/cli/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nwebstudio\n```\n\n----------------------------------------\n\nTITLE: Building Webstudio Project (Bash)\nDESCRIPTION: This command builds the Webstudio project, setting up routes, pages, and downloading assets.\nSOURCE: https://github.com/webstudio-is/webstudio.git/blob/main/packages/cli/README.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nwebstudio build\n```\n\n----------------------------------------\n\nTITLE: Configuring Prisma Transaction with Extended Timeout\nDESCRIPTION: Implementation of a Prisma transaction with increased timeout settings to prevent transaction closed errors. Sets a custom timeout of 2 minutes instead of the default 5 seconds.\nSOURCE: https://github.com/webstudio-is/webstudio.git/blob/main/packages/prisma-client/migrations-cli/TROUBLESHOOTING.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default () => {\n  const client = new PrismaClient();\n  return client.$transaction(\n    async (prisma) => {\n      // migration code...\n    },\n    {\n      timeout: 1000 * 60 * 2, // in milliseconds, default 5000\n    }\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Building Prompt Templates\nDESCRIPTION: Command to convert markdown prompt templates into TypeScript modules using the package's CLI tool.\nSOURCE: https://github.com/webstudio-is/webstudio.git/blob/main/packages/ai/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm run build:prompts\n```\n\n----------------------------------------\n\nTITLE: Building for Production\nDESCRIPTION: Command to build the application for production deployment.\nSOURCE: https://github.com/webstudio-is/webstudio.git/blob/main/fixtures/webstudio-cloudflare-template/WS_CF_README.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Generating SSL Certificates with Certbot and Cloudflare DNS in Bash\nDESCRIPTION: This script sets up directories, retrieves a Cloudflare API key, runs Certbot in a Docker container to generate SSL certificates, and copies the certificates to the appropriate locations. It uses Cloudflare DNS verification and generates wildcard certificates for the domain wstd.dev.\nSOURCE: https://github.com/webstudio-is/webstudio.git/blob/main/https/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo rm -rf /tmp/certbot/\nsudo rm -rf /tmp/letsencrypt/\n\nmkdir -p /tmp/certbot/\nmkdir -p /tmp/letsencrypt/\n\ninfisical login\ninfisical init\n\nCLOUDFLARE_API_KEY=$(infisical secrets get WSTD_DEV-CLOUDFLARE_ZONE_TOKEN --path='/CLI' --env=staging --plain)\n\ncat > /tmp/certbot/cloudflare.ini <<-DOCKERFILE\n  dns_cloudflare_api_token = ${CLOUDFLARE_API_KEY}\nDOCKERFILE\n\ndocker run -it --rm --name certbot  \\\n-v \"/tmp/letsencrypt/data:/etc/letsencrypt\" \\\n-v \"/tmp/certbot:/local/certbot\" \\\ncertbot/dns-cloudflare certonly \\\n--dns-cloudflare \\\n--dns-cloudflare-credentials /local/certbot/cloudflare.ini \\\n--agree-tos \\\n--noninteractive \\\n-m istarkov@gmail.com \\\n-d wstd.dev \\\n-d '*.wstd.dev'\n\nsudo chown -R $USER:$(id -g) /tmp/letsencrypt\n\ncp /tmp/letsencrypt/data/live/wstd.dev/fullchain.pem ./https/fullchain.pem\ncp /tmp/letsencrypt/data/live/wstd.dev/privkey.pem ./https/privkey.pem\n\n# Haproxy key\ncd https\ncat ./fullchain.pem ./privkey.pem > ./haproxy.pem\n```\n\n----------------------------------------\n\nTITLE: Starting Vite Development Server\nDESCRIPTION: Command to run the Vite development server for local development.\nSOURCE: https://github.com/webstudio-is/webstudio.git/blob/main/packages/cli/templates/cloudflare/WS_CF_README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Starting Vite Development Server\nDESCRIPTION: Command to run the Vite development server for local development.\nSOURCE: https://github.com/webstudio-is/webstudio.git/blob/main/fixtures/webstudio-cloudflare-template/WS_CF_README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Running Wrangler Local Server\nDESCRIPTION: Commands to build the application and start it using Wrangler for local testing.\nSOURCE: https://github.com/webstudio-is/webstudio.git/blob/main/fixtures/webstudio-cloudflare-template/WS_CF_README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm run build\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Running Wrangler Local Environment\nDESCRIPTION: Commands to build the application and start it using Wrangler for local testing.\nSOURCE: https://github.com/webstudio-is/webstudio.git/blob/main/packages/cli/templates/cloudflare/WS_CF_README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm run build\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Installing Webstudio CLI (Bash)\nDESCRIPTION: This command installs the latest version of the Webstudio CLI globally using npm.\nSOURCE: https://github.com/webstudio-is/webstudio.git/blob/main/packages/cli/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g webstudio@latest\n```\n\n----------------------------------------\n\nTITLE: Deploying to Vercel (Bash)\nDESCRIPTION: This command deploys the built Webstudio project to Vercel using the Vercel CLI.\nSOURCE: https://github.com/webstudio-is/webstudio.git/blob/main/packages/cli/README.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nvercel deploy\n```\n\n----------------------------------------\n\nTITLE: Deploying to Netlify (Bash)\nDESCRIPTION: This command deploys the Webstudio project to Netlify using the Netlify CLI.\nSOURCE: https://github.com/webstudio-is/webstudio.git/blob/main/packages/cli/README.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnetlify deploy\n```\n\n----------------------------------------\n\nTITLE: Deploying to Cloudflare Pages\nDESCRIPTION: Command to deploy the built application to Cloudflare Pages. Note that deployment bindings must be configured manually in the Cloudflare dashboard.\nSOURCE: https://github.com/webstudio-is/webstudio.git/blob/main/fixtures/webstudio-cloudflare-template/WS_CF_README.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpm run deploy\n```\n\n----------------------------------------\n\nTITLE: Deploying to Cloudflare Pages\nDESCRIPTION: Command to deploy the built application to Cloudflare Pages.\nSOURCE: https://github.com/webstudio-is/webstudio.git/blob/main/packages/cli/templates/cloudflare/WS_CF_README.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpm run deploy\n```\n\n----------------------------------------\n\nTITLE: Installing Webstudio AI Package\nDESCRIPTION: Command to install the Webstudio AI package using pnpm package manager.\nSOURCE: https://github.com/webstudio-is/webstudio.git/blob/main/packages/ai/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm i @webstudio-is/ai\n```\n\n----------------------------------------\n\nTITLE: Building for Netlify Serverless Functions (Bash)\nDESCRIPTION: This command builds the Webstudio project specifically for Netlify serverless functions deployment.\nSOURCE: https://github.com/webstudio-is/webstudio.git/blob/main/packages/cli/README.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nwebstudio build --template netlify\n```\n\n----------------------------------------\n\nTITLE: Generating Cloudflare Types\nDESCRIPTION: Command to generate TypeScript types for Cloudflare bindings defined in wrangler.toml. This needs to be rerun after any changes to the wrangler configuration.\nSOURCE: https://github.com/webstudio-is/webstudio.git/blob/main/fixtures/webstudio-cloudflare-template/WS_CF_README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm run typegen\n```\n\n----------------------------------------\n\nTITLE: Enhanced Migration Engine Directory Structure\nDESCRIPTION: Demonstrates the new directory structure supporting TypeScript migrations, rollbacks, and migration-specific Prisma clients.\nSOURCE: https://github.com/webstudio-is/webstudio.git/blob/main/packages/prisma-client/migrations-cli/README.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nmigrations/\n  20220601192603_start/\n    migration.sql\n  20220608130959_adduser/\n    migration.sql\n    rollback.sql\n  20220608130959_movedata/\n    client/\n      ...\n    migration.ts\n    rollback.ts\n```\n\n----------------------------------------\n\nTITLE: Executing Database Tests\nDESCRIPTION: Commands for running database tests using pg_prove in Docker container or via npm script.\nSOURCE: https://github.com/webstudio-is/webstudio.git/blob/main/packages/postgrest/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --rm --network host -v ./supabase/tests:/tests -e PGOPTIONS='--search_path=pgtap,public' supabase/pg_prove:3.36 pg_prove -d \"postgresql://postgres:pass@localhost/webstudio\" --ext .sql /tests\n# OR\npnpm run db-test\n```\n\n----------------------------------------\n\nTITLE: Building for Production\nDESCRIPTION: Command to build the application for production deployment.\nSOURCE: https://github.com/webstudio-is/webstudio.git/blob/main/packages/cli/templates/cloudflare/WS_CF_README.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Running Supabase Tests\nDESCRIPTION: Command for executing Supabase tests for latest builds.\nSOURCE: https://github.com/webstudio-is/webstudio.git/blob/main/packages/postgrest/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpx supabase test new latest-builds\n```\n\n----------------------------------------\n\nTITLE: Generating Postgrest Types\nDESCRIPTION: Commands for generating TypeScript types from Postgrest schema. Includes options for both devcontainer and non-devcontainer environments.\nSOURCE: https://github.com/webstudio-is/webstudio.git/blob/main/packages/postgrest/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm generate-types\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose exec -iT app bash\ncd /workspaces/webstudio/packages/postgrest\npnpm generate-types\n```\n\n----------------------------------------\n\nTITLE: Generating Cloudflare Types\nDESCRIPTION: Command to generate TypeScript types for Cloudflare bindings defined in wrangler.toml. This needs to be rerun after any changes to wrangler.toml.\nSOURCE: https://github.com/webstudio-is/webstudio.git/blob/main/packages/cli/templates/cloudflare/WS_CF_README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm run typegen\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js with NVM (Bash)\nDESCRIPTION: This command uses NVM to install Node.js version 18.\nSOURCE: https://github.com/webstudio-is/webstudio.git/blob/main/packages/cli/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnvm install 18\n```\n\n----------------------------------------\n\nTITLE: Verifying Node.js Installation (Bash)\nDESCRIPTION: This command checks the installed version of Node.js to verify the installation.\nSOURCE: https://github.com/webstudio-is/webstudio.git/blob/main/packages/cli/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnode --version\n```\n\n----------------------------------------\n\nTITLE: Installing NVM for Node.js Setup (Bash)\nDESCRIPTION: This command installs NVM (Node Version Manager) which is used to install and manage Node.js versions.\nSOURCE: https://github.com/webstudio-is/webstudio.git/blob/main/packages/cli/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash\n```\n\n----------------------------------------\n\nTITLE: Working with Fixtures for Testing webstudio-cli\nDESCRIPTION: Commands for linking fixtures, generating test data, and building the project for testing. This workflow creates a data.json file and prepares the fixture for visualization.\nSOURCE: https://github.com/webstudio-is/webstudio.git/blob/main/fixtures/webstudio-features/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Terminal 2\npnpm fixtures:link\n\npnpm fixtures:sync\n# data.json generated\n\npnpm fixtures:build\n# exec `pnpm run dev` to see result\n```\n\n----------------------------------------\n\nTITLE: Initializing PGTap Testing Schema\nDESCRIPTION: SQL commands for setting up the PGTap testing framework in PostgreSQL database.\nSOURCE: https://github.com/webstudio-is/webstudio.git/blob/main/packages/postgrest/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE SCHEMA IF NOT EXISTS pgtap;\nDROP EXTENSION pgtap;\nCREATE EXTENSION IF NOT EXISTS pgtap WITH SCHEMA pgtap;\n```\n\n----------------------------------------\n\nTITLE: Setting Up and Building Webstudio Fixtures\nDESCRIPTION: Series of commands to link fixtures, synchronize data, and build the project for testing. This process generates a data.json file and prepares the project for development viewing.\nSOURCE: https://github.com/webstudio-is/webstudio.git/blob/main/fixtures/react-router-docker/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Terminal 2\npnpm fixtures:link\n\npnpm fixtures:sync\n# data.json generated\n\npnpm fixtures:build\n# exec `pnpm run dev` to see result\n```\n\n----------------------------------------\n\nTITLE: Running Webstudio Development Server\nDESCRIPTION: Command to start the Webstudio development server in the packages/webstudio directory.\nSOURCE: https://github.com/webstudio-is/webstudio.git/blob/main/fixtures/react-router-docker/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Terminal 1\ncd packages/webstudio\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Installing JSX Utils Package for Webstudio\nDESCRIPTION: Command to install the @webstudio-is/jsx-utils package using pnpm package manager.\nSOURCE: https://github.com/webstudio-is/webstudio.git/blob/main/packages/jsx-utils/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm i @webstudio-is/jsx-utils\n```\n\n----------------------------------------\n\nTITLE: Running Playground Scripts\nDESCRIPTION: Commands for executing TypeScript playground files with environment configuration options.\nSOURCE: https://github.com/webstudio-is/webstudio.git/blob/main/packages/postgrest/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm playground ./playground/{file}.ts\n# OR\npnpm tsx --env-file ../../apps/builder/.env ./playground/{file}.ts\n```\n\n----------------------------------------\n\nTITLE: Executing Prisma Migration Without Transaction Wrapper\nDESCRIPTION: Alternative approach to handle database migrations without using transactions, useful when facing timeout issues. Note that this approach makes partial migration states harder to recover from.\nSOURCE: https://github.com/webstudio-is/webstudio.git/blob/main/packages/prisma-client/migrations-cli/TROUBLESHOOTING.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default async () => {\n  const prisma = new PrismaClient();\n  // use `prisma` here without wrapping it into a transaction\n};\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Schema for Code Documentation\nDESCRIPTION: This code snippet shows a JSON schema that defines the structure for code documentation. It includes fields for page metadata and an array of code snippets with their associated information such as title, description, language, and the actual code.\nSOURCE: https://github.com/webstudio-is/webstudio.git/blob/main/packages/ai/src/chains/command-detect/command-detect.user.prompt.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"page_title\": \"string\",      \n  \"page_description\": \"string\",    \n  \"page_summary\": \"string\",    \n  \"languages\": [\"string\"],\n  \"codeSnippets\": [\n    {\n      \"title\": \"string\",         \n      \"description\": \"string\",   \n      \"language\": \"string\",   \n      \"codeList\": [{\n          \"language\": \"string\",\n          \"code\": \"string\"\n      }]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sync Provider Settings in Tokens Studio Plugin\nDESCRIPTION: Required configuration settings for setting up GitHub sync provider in Tokens Studio for Figma plugin. Includes token path, repository details, and branch information.\nSOURCE: https://github.com/webstudio-is/webstudio.git/blob/main/packages/design-system/documentation/figma-design-tokens.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n- Name: up to you\n- Personal Access Token: token generated using the instructions above\n- Repository: webstudio-is/webstudio\n- Branch: figma-tokens\n- File Path: packages/design-system/src/__generated__/figma-design-tokens.json\n- baseUrl: leave empty\n```\n\n----------------------------------------\n\nTITLE: Standard Prisma Migrations Directory Structure\nDESCRIPTION: Shows the traditional directory structure for Prisma migrations with SQL files.\nSOURCE: https://github.com/webstudio-is/webstudio.git/blob/main/packages/prisma-client/migrations-cli/README.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmigrations/\n  20220601192603_start/migration.sql\n  20220608130959_adduser/migration.sql\n```\n\n----------------------------------------\n\nTITLE: Documenting Webstudio Prisma Client in Markdown\nDESCRIPTION: README documentation explaining the purpose of the Prisma client package for database interactions in Webstudio.\nSOURCE: https://github.com/webstudio-is/webstudio.git/blob/main/packages/prisma-client/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Webstudio Prisma client\n\nPackage conatining our API to interact with prisma\n```\n\n----------------------------------------\n\nTITLE: TypeScript Config Documentation in Markdown\nDESCRIPTION: Documentation explaining the purpose of shared base tsconfig.json files that are used as parent configurations for other TypeScript configuration files in the project.\nSOURCE: https://github.com/webstudio-is/webstudio.git/blob/main/packages/tsconfig/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# `tsconfig`\n\nThese are base shared `tsconfig.json`s from which all other `tsconfig.json`'s inherit from.\n```\n\n----------------------------------------\n\nTITLE: Setting Up Development Environment for webstudio-cli\nDESCRIPTION: Instructions for starting the development environment for webstudio-cli. This runs the development server in watch mode.\nSOURCE: https://github.com/webstudio-is/webstudio.git/blob/main/fixtures/webstudio-features/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Terminal 1\ncd packages/webstudio-cli\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Task Type Classification JSON Schema\nDESCRIPTION: Template showing where task type definitions should be injected as a JSON object mapping task names to their descriptions. Used to classify user requests into specific task categories.\nSOURCE: https://github.com/webstudio-is/webstudio.git/blob/main/packages/ai/src/chains/command-detect/command-detect.system.prompt.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{commands}\n```\n\n----------------------------------------\n\nTITLE: Checking Webstudio CLI Version (Bash)\nDESCRIPTION: This command displays the installed version of the Webstudio CLI.\nSOURCE: https://github.com/webstudio-is/webstudio.git/blob/main/packages/cli/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nwebstudio --version\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Schema for JSX Edit Operations\nDESCRIPTION: This code snippet represents a placeholder for the JSON schema that defines the available edit operations for JSX modifications. The actual schema is not provided in the given text, but it is referenced as {operationsSchema}.\nSOURCE: https://github.com/webstudio-is/webstudio.git/blob/main/packages/ai/src/chains/operations/operations.system.prompt.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  operationsSchema\n}\n```\n\n----------------------------------------\n\nTITLE: Design System Components Import Reference\nDESCRIPTION: Component reference placeholder used to indicate available design system components\nSOURCE: https://github.com/webstudio-is/webstudio.git/blob/main/packages/ai/src/chains/template-generator/template-generator.system.prompt.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n{components},Heroicon\n```\n\n----------------------------------------\n\nTITLE: Describing trpc-interface Functionality in Markdown\nDESCRIPTION: This snippet outlines the key features of the trpc-interface module, including its ability to implement TRPC server routers and act as a proxy for TRPC services.\nSOURCE: https://github.com/webstudio-is/webstudio.git/blob/main/packages/trpc-interface/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# trpc-interface\n\n- `trpc-interface` can implement various TRPC server routers.\n\n- it can act as a proxy for TRPC services implemented in any other apps (those services must have the same API interface).\n```\n\n----------------------------------------\n\nTITLE: Design Request JSON Template\nDESCRIPTION: Basic JSON structure for a design request showing a prompt placeholder field.\nSOURCE: https://github.com/webstudio-is/webstudio.git/blob/main/packages/ai/src/chains/template-generator/template-generator.user.prompt.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  prompt\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Asset Uploader Package Header in Markdown\nDESCRIPTION: Markdown header defining the asset uploader package documentation along with a brief description of its purpose.\nSOURCE: https://github.com/webstudio-is/webstudio.git/blob/main/packages/asset-uploader/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Webstudio Asset Uploader\n\nThe asset uploader is the packages that handles all the logic for our assets upload\n```\n\n----------------------------------------\n\nTITLE: Error Response for Non-English Content\nDESCRIPTION: This snippet defines the JSON response format to be returned when the input content is not in English. It contains a simple error object with a specific error code.\nSOURCE: https://github.com/webstudio-is/webstudio.git/blob/main/packages/ai/src/chains/command-detect/command-detect.user.prompt.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"error\": \"non-english-content\"\n}\n```\n\n----------------------------------------\n\nTITLE: Edit Request Prompt Template\nDESCRIPTION: Template structure for edit request prompts that will contain instructions for modifying content.\nSOURCE: https://github.com/webstudio-is/webstudio.git/blob/main/packages/ai/src/chains/copywriter/copy.user.prompt.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{prompt}\n```\n\n----------------------------------------\n\nTITLE: Text Node Content Placeholder\nDESCRIPTION: Placeholder for text node content that will be populated with actual values.\nSOURCE: https://github.com/webstudio-is/webstudio.git/blob/main/packages/ai/src/chains/copywriter/copy.user.prompt.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{text_nodes}\n```\n\n----------------------------------------\n\nTITLE: Initializing Empty JSX Component in React\nDESCRIPTION: An empty JSX code block that serves as a starting point for creating a React component. It provides the basic structure for JSX code without any actual content or functionality.\nSOURCE: https://github.com/webstudio-is/webstudio.git/blob/main/packages/ai/src/chains/operations/operations.user.prompt.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: CSS Declaration Template Format\nDESCRIPTION: Shows a template format for CSS declarations to be explained, using markdown code block syntax.\nSOURCE: https://github.com/webstudio-is/webstudio.git/blob/main/packages/css-data/bin/prompts/declarations.prompt.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```\n{declarations}\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Robot Crawler Rules\nDESCRIPTION: Defines access rules for web crawlers, allowing access to /login path while disallowing access to all other paths.\nSOURCE: https://github.com/webstudio-is/webstudio.git/blob/main/apps/builder/public/robots.txt#2025-04-22_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\nUser-agent: *\nAllow: /login\nDisallow: /\n```\n\n----------------------------------------\n\nTITLE: Example Input and Output Format for AI Copywriting\nDESCRIPTION: Demonstrates the expected input format for copy editing requests and the corresponding output format that preserves the original structure while updating only the text property.\nSOURCE: https://github.com/webstudio-is/webstudio.git/blob/main/packages/ai/src/chains/copywriter/copy.system.prompt.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\nExample list of copy to complete: [{instanceId:'abc',index:0,type:'Heading',text:''}]\nExample completion: [{instanceId:'abc',index:0,type:'Heading',text:'Make a Change'}]\n```"
  }
]