[
  {
    "owner": "awslabs",
    "repo": "amazon-quicksight-embedding-sdk",
    "content": "TITLE: Embedding Amazon QuickSight Visual Using JavaScript SDK in HTML\nDESCRIPTION: This snippet provides a complete HTML example that shows embedding an Amazon QuickSight visual using the QuickSight Embedding JavaScript SDK. It initializes the embedding context, configures frame options with URL, container, dimensions, and event handlers, sets content options including locale, parameters, and message event handlers, and embeds the visual experience into the DOM. It also adds an event listener to update parameters dynamically based on user input. The snippet requires loading the QuickSight SDK script from a CDN and requires a valid embedding URL generated via the embedding API.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/README.md#_snippet_47\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n\n    <head>\n        <title>Visual Embedding Example</title>\n        <script src=\"https://unpkg.com/amazon-quicksight-embedding-sdk@2.10.0/dist/quicksight-embedding-js-sdk.min.js\"></script>\n        <script type=\"text/javascript\">\n            const embedVisual = async() => {    \n                const {\n                    createEmbeddingContext,\n                } = QuickSightEmbedding;\n\n                const embeddingContext = await createEmbeddingContext({\n                    onChange: (changeEvent, metadata) => {\n                        console.log('Context received a change', changeEvent, metadata);\n                    },\n                });\n\n                const frameOptions = {\n                    url: \"<YOUR_EMBED_URL>\", // replace this value with the url generated via embedding API\n                    container: '#experience-container',\n                    height: \"700px\",\n                    width: \"1000px\",\n                    onChange: (changeEvent, metadata) => {\n                        switch (changeEvent.eventName) {\n                            case 'FRAME_MOUNTED': {\n                                console.log(\"Do something when the experience frame is mounted.\");\n                                break;\n                            }\n                            case 'FRAME_LOADED': {\n                                console.log(\"Do something when the experience frame is loaded.\");\n                                break;\n                            }\n                        }\n                    },\n                };\n\n                const contentOptions = {\n                    parameters: [\n                        {\n                            Name: 'country',\n                            Values: ['United States'],\n                        },\n                        {\n                            Name: 'states',\n                            Values: [\n                                'California',\n                                'Washington'\n                            ]\n                        }\n                    ],\n                    locale: \"en-US\",\n                    onMessage: async (messageEvent, experienceMetadata) => {\n                        switch (messageEvent.eventName) {\n                            case 'CONTENT_LOADED': {\n                                console.log(\"All visuals are loaded. The title of the document:\", messageEvent.message.title);\n                                break;\n                            }\n                            case 'ERROR_OCCURRED': {\n                                console.log(\"Error occured while rendering the experience. Error code:\", messageEvent.message.errorCode);\n                                break;\n                            }\n                            case 'PARAMETERS_CHANGED': {\n                                console.log(\"Parameters changed. Changed parameters:\", messageEvent.message.changedParameters);\n                                break;\n                            }\n                            case 'SIZE_CHANGED': {\n                                console.log(\"Size changed. New dimensions:\", messageEvent.message);\n                                break;\n                            }\n                        }\n                    },\n                };\n                const embeddedVisualExperience = await embeddingContext.embedVisual(frameOptions, contentOptions);\n\n                const selectCountryElement = document.getElementById('country');\n                selectCountryElement.addEventListener('change', (event) => {\n                    embeddedVisualExperience.setParameters([\n                        {\n                            Name: 'country',\n                            Values: event.target.value\n                        }\n                    ]);\n                });\n            };\n        </script>\n    </head>\n\n    <body onload=\"embedVisual()\">\n        <span>\n            <label for=\"country\">Country</label>\n            <select id=\"country\" name=\"country\">\n                <option value=\"United States\">United States</option>\n                <option value=\"Mexico\">Mexico</option>\n                <option value=\"Canada\">Canada</option>\n            </select>\n        </span>\n        <div id=\"experience-container\"></div>\n    </body>\n\n</html>\n```\n\n----------------------------------------\n\nTITLE: Handling Content Load Event v1.x\nDESCRIPTION: This snippet handles the content load event in version 1.x. The `loadCallback` function is executed when the embedded content has finished loading.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/OPTIONS_DIFFERENCES_V1_TO_V2.md#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n    const options = {\n        // ...\n        loadCallback: () => {\n            console.log('Embedded content loaded');\n        },\n    }\n```\n\n----------------------------------------\n\nTITLE: HTML and JavaScript Example for Embedding Amazon QuickSight Generative Q&A\nDESCRIPTION: This code provides a complete HTML page that demonstrates embedding Amazon QuickSight's Generative Q&A widget within a webpage. It loads the SDK, defines an async function to initialize the experience with configurable frame and content options, and handles various UI events. The example includes placeholders for customizing URL, theme, and experience behavior. Dependencies include the QuickSight embedding SDK loaded via CDN.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/README.md#_snippet_67\n\nLANGUAGE: HTML\nCODE:\n```\n<!DOCTYPE html>\n<html>\n\n<head>\n    <title>Generative Q&A Embedding Example</title>\n    <script src=\"https://unpkg.com/amazon-quicksight-embedding-sdk@2.10.0/dist/quicksight-embedding-js-sdk.min.js\"></script>\n    <script type=\"text/javascript\">\n        const embedGenerativeQnA = async() => {    \n            const {\n                createEmbeddingContext,\n            } = QuickSightEmbedding;\n\n            const embeddingContext = await createEmbeddingContext({\n                onChange: (changeEvent, metadata) => {\n                    console.log('Context received a change', changeEvent, metadata);\n                },\n            });\n\n            const frameOptions = {\n                url: \"<YOUR_EMBED_URL>\", // replace with your actual embed URL\n                container: '#experience-container',\n                height: \"700px\",\n                width: \"1000px\",\n                onChange: (changeEvent, metadata) => {\n                    switch (changeEvent.eventName) {\n                        case 'FRAME_MOUNTED': {\n                            console.log(\"Do something when the experience frame is mounted.\");\n                            break;\n                        }\n                        case 'FRAME_LOADED': {\n                            console.log(\"Do something when the experience frame is loaded.\");\n                            break;\n                        }\n                    }\n                },\n            };\n\n            const contentOptions = {\n                panelOptions: {\n                    panelType: 'FULL',\n                    title: 'Custom Title',\n                    showQIcon: false,\n                },\n                // Uncomment below to use search bar style\n                /*\n                panelOptions: {\n                    panelType: 'SEARCH_BAR',\n                    focusedHeight: '250px',\n                    expandedHeight: '500px',\n                },\n                */\n                showTopicName: false,\n                showPinboard: false,\n                allowTopicSelection: false,\n                allowFullscreen: false,\n                searchPlaceholderText: 'Custom Search Placeholder',\n                themeOptions: {\n                    themeArn: 'arn:aws:quicksight:<Region>:<AWS-Account-ID>:theme/<Theme-ID>'\n                },\n                onMessage: async (messageEvent, experienceMetadata) => {\n                    switch (messageEvent.eventName) {\n                        case 'Q_SEARCH_OPENED': {\n                            console.log(\"Do something when SEARCH_BAR type panel is expanded\");\n                            break;\n                        }\n                        case 'Q_SEARCH_FOCUSED': {\n                            console.log(\"Do something when SEARCH_BAR type panel is focused\");\n                            break;\n                        }\n                        case 'Q_SEARCH_CLOSED': {\n                            console.log(\"Do something when SEARCH_BAR type panel is collapsed\");\n                            break;\n                        }\n                        case 'Q_PANEL_ENTERED_FULLSCREEN': {\n                            console.log(\"Do something when the experience enters full screen mode\");\n                            break;\n                        }\n                        case 'Q_PANEL_EXITED_FULLSCREEN': {\n                            console.log(\"Do something when the experience exits full screen mode\");\n                            break;\n                        }\n                        case 'CONTENT_LOADED': {\n                            console.log(\"Do something when the experience is loaded\");\n                            break;\n                        }\n                        case 'ERROR_OCCURRED': {\n                            console.log(\"Do something when an error occurs.\");\n                            break;\n                        }\n                    }\n                }\n            };\n            const embeddedGenerativeQnExperience = await embeddingContext.embedGenerativeQnA(frameOptions, contentOptions);\n        };\n    </script>\n</head>\n\n<body onload=\"embedGenerativeQnA()\">\n    <div id=\"experience-container\"></div>\n</body>\n\n</html>\n```\n\n----------------------------------------\n\nTITLE: Fetching parameters using async/await in version 2.0\nDESCRIPTION: Shows how to obtain dashboard parameters asynchronously via the getParameters() method, returning an array of parameter objects with Names and Values.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/OPTIONS_DIFFERENCES_V1_TO_V2.md#_snippet_37\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst parameters = await embeddedDashboardExperience.getParameters();\nconsole.log('Parameters:', parameters);\n// [\n//     {\n//         Name: 'usStates',\n//         Values: ['Arizona', 'Texas']\n//     },\n//     {\n//         Name: 'usPartyAffiliations',\n//         Values: ['Democrat', 'Republican']\n//     }\n// ]\n```\n\n----------------------------------------\n\nTITLE: Embedding the QuickSight Console in a Web Page – HTML and JavaScript Example\nDESCRIPTION: A complete HTML example illustrating how to embed the Amazon QuickSight console authoring experience into a web application. Uses the QuickSight Embedding SDK via a CDN link, initializes the embedding context, and configures both frameOptions (for iframe controls and event hooks) and contentOptions (for message handling). The embedConsole function creates an embedded console instance with change/error event handlers wired. Requires inclusion of the SDK script, a valid embeddable QuickSight console URL, and a container div for output. Returns the embedded experience asynchronously; constraints include browser JS execution environment and the need for a permitted embed URL.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/README.md#_snippet_60\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n\n    <head>\n        <title>Console Embedding Example</title>\n        <script src=\"https://unpkg.com/amazon-quicksight-embedding-sdk@2.10.0/dist/quicksight-embedding-js-sdk.min.js\"></script>\n        <script type=\"text/javascript\">\n            const embedConsole = async() => {\n                const {\n                    createEmbeddingContext,\n                } = QuickSightEmbedding;\n\n                const embeddingContext = await createEmbeddingContext({\n                    onChange: (changeEvent, metadata) => {\n                        console.log('Context received a change', changeEvent, metadata);\n                    },\n                });\n\n                const frameOptions = {\n                    url: \"<YOUR_EMBED_URL>\", // replace this value with the url generated via embedding API\n                    container: '#experience-container',\n                    height: \"700px\",\n                    width: \"1000px\",\n                    onChange: (changeEvent, metadata) => {\n                        switch (changeEvent.eventName) {\n                            case 'FRAME_MOUNTED': {\n                                console.log(\"Do something when the experience frame is mounted.\");\n                                break;\n                            }\n                            case 'FRAME_LOADED': {\n                                console.log(\"Do something when the experience frame is loaded.\");\n                                break;\n                            }\n                        }\n                    },\n                };\n\n                const contentOptions = {\n                    onMessage: async (messageEvent, experienceMetadata) => {\n                        switch (messageEvent.eventName) {\n                            case 'ERROR_OCCURRED': {\n                                console.log(\"Do something when the embedded experience fails loading.\");\n                                break;\n                            }\n                        }\n                    }\n                };\n                const embeddedConsoleExperience = await embeddingContext.embedConsole(frameOptions, contentOptions);\n            };\n        </script>\n    </head>\n\n    <body onload=\"embedConsole()\">\n        <div id=\"experience-container\"></div>\n    </body>\n\n</html>\n```\n\n----------------------------------------\n\nTITLE: Embedding QuickSight Q Search Bar (HTML/JavaScript)\nDESCRIPTION: Provides a full HTML example demonstrating how to embed the QuickSight Q Search Bar using the QuickSight Embedding SDK. It covers initializing the embedding context (`createEmbeddingContext`), configuring frame options (`frameOptions` including URL, container, dimensions, `onChange` handler) and content options (`contentOptions` including theme, topic settings, `onMessage` handler), and finally calling `embedQSearchBar`. Requires the SDK script and a valid embed URL obtained via the embedding API.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/README.md#_snippet_63\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n\n    <head>\n        <title>Q Search Bar Embedding Example</title>\n        <script src=\"https://unpkg.com/amazon-quicksight-embedding-sdk@2.10.0/dist/quicksight-embedding-js-sdk.min.js\"></script>\n        <script type=\"text/javascript\">\n            const embedQSearchBar = async() => {    \n                const {\n                    createEmbeddingContext,\n                } = QuickSightEmbedding;\n\n                const embeddingContext = await createEmbeddingContext({\n                    onChange: (changeEvent, metadata) => {\n                        console.log('Context received a change', changeEvent, metadata);\n                    },\n                });\n\n                const frameOptions = {\n                    url: \"<YOUR_EMBED_URL>\", // replace this value with the url generated via embedding API\n                    container: '#experience-container',\n                    height: \"700px\",\n                    width: \"1000px\",\n                    onChange: (changeEvent, metadata) => {\n                        switch (changeEvent.eventName) {\n                            case 'FRAME_MOUNTED': {\n                                console.log(\"Do something when the experience frame is mounted.\");\n                                break;\n                            }\n                            case 'FRAME_LOADED': {\n                                console.log(\"Do something when the experience frame is loaded.\");\n                                break;\n                            }\n                        }\n                    },\n                };\n\n                const contentOptions = {\n                    hideTopicName: false, \n                    theme: '<YOUR_THEME_ID>',\n                    allowTopicSelection: true,\n                    onMessage: async (messageEvent, experienceMetadata) => {\n                        switch (messageEvent.eventName) {\n                            case 'Q_SEARCH_OPENED': {\n                                console.log(\"Do something when Q Search content expanded\");\n                                break;\n                            }\n                            case 'Q_SEARCH_CLOSED': {\n                                console.log(\"Do something when Q Search content collapsed\");\n                                break;\n                            }\n                            case 'Q_SEARCH_SIZE_CHANGED': {\n                                console.log(\"Do something when Q Search size changed\");\n                                break;\n                            }\n                            case 'CONTENT_LOADED': {\n                                console.log(\"Do something when the Q Search is loaded.\");\n                                break;\n                            }\n                            case 'ERROR_OCCURRED': {\n                                console.log(\"Do something when the Q Search fails loading.\");\n                                break;\n                            }\n                        }\n                    }\n                };\n                const embeddedQSearchBarExperience = await embeddingContext.embedQSearchBar(frameOptions, contentOptions);\n            };\n        </script>\n    </head>\n\n    <body onload=\"embedQSearchBar()\">\n        <div id=\"experience-container\"></div>\n    </body>\n\n</html>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Dashboard Embedding\nDESCRIPTION: This HTML code sets up the basic structure for embedding a QuickSight dashboard. It includes a `DOCTYPE`, `html`, `head`, and `body`.  The `head` contains the title, and most importantly, the script tag that imports the QuickSight Embedding SDK. The `body` contains a `select` element to allow the user to choose a country, and a `div` element with the ID `experience-container`, which serves as the container for the embedded dashboard. An `onload` event on the `body` triggers the `embedDashboard()` function, which handles the embedding process.  The JavaScript code dynamically interacts with the HTML elements such as `<select>` to interact with the dashboard.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/README.md#_snippet_16\n\nLANGUAGE: HTML\nCODE:\n```\n<!DOCTYPE html>\n<html>\n\n    <head>\n        <title>Dashboard Embedding Example</title>\n        <script src=\"https://unpkg.com/amazon-quicksight-embedding-sdk@2.10.0/dist/quicksight-embedding-js-sdk.min.js\"></script>\n        <script type=\"text/javascript\">\n            const embedDashboard = async() => {\n                const {\n                    createEmbeddingContext,\n                } = QuickSightEmbedding;\n\n                const embeddingContext = await createEmbeddingContext({\n                    onChange: (changeEvent, metadata) => {\n                        console.log('Context received a change', changeEvent, metadata);\n                    },\n                });\n\n                const frameOptions = {\n                    url: '<YOUR_EMBED_URL>',\n                    container: '#experience-container',\n                    height: \"700px\",\n                    width: \"300px\",\n                    resizeHeightOnSizeChangedEvent: true,\n                    onChange: (changeEvent, metadata) => {\n                        switch (changeEvent.eventName) {\n                            case 'FRAME_MOUNTED': {\n                                console.log(\"Do something when the experience frame is mounted.\");\n                                break;\n                            }\n                            case 'FRAME_LOADED': {\n                                console.log(\"Do something when the experience frame is loaded.\");\n                                break;\n                            }\n                        }\n                    },\n                };\n\n                const contentOptions = {\n                    parameters: [\n                        {\n                            Name: 'country',\n                            Values: [\n                                'United States'\n                            ],\n                        },\n                        {\n                            Name: 'states',\n                            Values: [\n                                'California',\n                                'Washington'\n                            ]\n                        }\n                    ],\n                    locale: \"en-US\",\n                    sheetOptions: {\n                        initialSheetId: '<YOUR_SHEETID>',\n                        singleSheet: false,                        \n                        emitSizeChangedEventOnSheetChange: false,\n                    },\n                    toolbarOptions: {\n                        export: false,\n                        undoRedo: false,\n                        reset: false\n                    },\n                    attributionOptions: {\n                        overlayContent: false,\n                    },\n                    onMessage: async (messageEvent, experienceMetadata) => {\n                        switch (messageEvent.eventName) {\n                            case 'CONTENT_LOADED': {\n                                console.log(\"All visuals are loaded. The title of the document:\", messageEvent.message.title);\n                                break;\n                            }\n                            case 'ERROR_OCCURRED': {\n                                console.log(\"Error occurred while rendering the experience. Error code:\", messageEvent.message.errorCode);\n                                break;\n                            }\n                            case 'PARAMETERS_CHANGED': {\n                                console.log(\"Parameters changed. Changed parameters:\", messageEvent.message.changedParameters);\n                                break;\n                            }\n                            case 'SELECTED_SHEET_CHANGED': {\n                                console.log(\"Selected sheet changed. Selected sheet:\", messageEvent.message.selectedSheet);\n                                break;\n                            }\n                            case 'SIZE_CHANGED': {\n                                console.log(\"Size changed. New dimensions:\", messageEvent.message);\n                                break;\n                            }\n                            case 'MODAL_OPENED': {\n                                window.scrollTo({\n                                    top: 0 // iframe top position\n                                });\n                                break;\n                            }\n                        }\n                    },\n                };\n                const embeddedDashboardExperience = await embeddingContext.embedDashboard(frameOptions, contentOptions);\n\n                const selectCountryElement = document.getElementById('country');\n                selectCountryElement.addEventListener('change', (event) => {\n                    embeddedDashboardExperience.setParameters([\n                        {\n                            Name: 'country',\n                            Values: event.target.value\n                        }\n                    ]);\n                });\n            };\n        </script>\n    </head>\n\n    <body onload=\"embedDashboard()\">\n        <span>\n            <label for=\"country\">Country</label>\n            <select id=\"country\" name=\"country\">\n                <option value=\"United States\">United States</option>\n                <option value=\"Mexico\">Mexico</option>\n                <option value=\"Canada\">Canada</option>\n            </select>\n        </span>\n        <div id=\"experience-container\"></div>\n    </body>\n\n</html>\n```\n\n----------------------------------------\n\nTITLE: Defining the GenerativeQnAExperience Class (TypeScript)\nDESCRIPTION: Presents the TypeScript class definition for `GenerativeQnAExperience`, the object returned when embedding the Generative Q&A experience using `embedGenerativeQnA`. It extends `BaseExperience` and offers `close` and `setQuestion` methods for interaction, both returning Promises.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/README.md#_snippet_66\n\nLANGUAGE: typescript\nCODE:\n```\nexport class GenerativeQnAExperience extends BaseExperience<GenerativeQnAContentOptions, InternalGenerativeQnAExperience, IGenerativeQnAExperience, TransformedGenerativeQnAContentOptions, GenerativeQnAExperienceFrame> {\n   close: () => Promise<SuccessResponseMessage | ErrorResponseMessage>;\n   setQuestion: (question: string) => Promise<SuccessResponseMessage | ErrorResponseMessage>;\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding QuickSight Visuals using TypeScript\nDESCRIPTION: Provides methods to embed and control interactive, read-only visuals within web applications. Includes functions for setting parameters, managing filters, themes, and actions on visual content. Depends on class 'VisualExperience' extending 'BaseExperience' with various methods for interaction.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/README.md#_snippet_46\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class VisualExperience extends BaseExperience<VisualContentOptions, InternalVisualExperience, IVisualExperience, TransformedContentOptions, VisualExperienceFrame> {\n   setParameters: (parameters: Parameter[]) => Promise<import(\"@common/events/events\").ResponseMessage<import(\"@common/events/types\").EventMessageValues>>;\n   reset: () => Promise<SuccessResponseMessage | ErrorResponseMessage>;\n   getActions: () => Promise<VisualAction[]>;\n   addActions: (actions: VisualAction[]) => Promise<SuccessResponseMessage | ErrorResponseMessage>;\n   setActions: (actions: VisualAction[]) => Promise<SuccessResponseMessage | ErrorResponseMessage>;\n   removeActions: (actions: VisualAction[]) => Promise<SuccessResponseMessage | ErrorResponseMessage>;\n   getFilterGroups: () => Promise<FilterGroup[]>;\n   addFilterGroups: (filterGroups: FilterGroup[]) => Promise<SuccessResponseMessage | ErrorResponseMessage>;\n   updateFilterGroups: (filterGroups: FilterGroup[]) => Promise<SuccessResponseMessage | ErrorResponseMessage>;\n   removeFilterGroups: (filterGroupsOrIds: FilterGroup[] | string[]) => Promise<SuccessResponseMessage | ErrorResponseMessage>;\n   setTheme: (themeArn: string) => Promise<SuccessResponseMessage | ErrorResponseMessage>;\n   setThemeOverride: (themeOverride: ThemeConfiguration) => Promise<SuccessResponseMessage | ErrorResponseMessage>;\n   send: <EventMessageValue extends EventMessageValues>(messageEvent: EmbeddingMessageEvent<MessageEventName>) => Promise<ResponseMessage<EventMessageValue>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Embedding Dashboard - JavaScript\nDESCRIPTION: This JavaScript code initializes the QuickSight embedding SDK and embeds a dashboard into an HTML container. It first imports the necessary functions from the SDK, creates an embedding context, and then configures frame and content options. These options control aspects like the URL of the dashboard, the container element, size, parameters, locale, sheet selection, toolbar visibility, and event handling (like frame mounting, loading, errors, and size changes). It also demonstrates how to dynamically update dashboard parameters based on user input.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/README.md#_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst embedDashboard = async() => {\n    const {\n        createEmbeddingContext,\n    } = QuickSightEmbedding;\n\n    const embeddingContext = await createEmbeddingContext({\n        onChange: (changeEvent, metadata) => {\n            console.log('Context received a change', changeEvent, metadata);\n        },\n    });\n\n    const frameOptions = {\n        url: '<YOUR_EMBED_URL>',\n        container: '#experience-container',\n        height: \"700px\",\n        width: \"300px\",\n        resizeHeightOnSizeChangedEvent: true,\n        onChange: (changeEvent, metadata) => {\n            switch (changeEvent.eventName) {\n                case 'FRAME_MOUNTED': {\n                    console.log(\"Do something when the experience frame is mounted.\");\n                    break;\n                }\n                case 'FRAME_LOADED': {\n                    console.log(\"Do something when the experience frame is loaded.\");\n                    break;\n                }\n            }\n        },\n    };\n\n    const contentOptions = {\n        parameters: [\n            {\n                Name: 'country',\n                Values: [\n                    'United States'\n                ],\n            },\n            {\n                Name: 'states',\n                Values: [\n                    'California',\n                    'Washington'\n                ]\n            }\n        ],\n        locale: \"en-US\",\n        sheetOptions: {\n            initialSheetId: '<YOUR_SHEETID>',\n            singleSheet: false,                        \n            emitSizeChangedEventOnSheetChange: false,\n        },\n        toolbarOptions: {\n            export: false,\n            undoRedo: false,\n            reset: false\n        },\n        attributionOptions: {\n            overlayContent: false,\n        },\n        onMessage: async (messageEvent, experienceMetadata) => {\n            switch (messageEvent.eventName) {\n                case 'CONTENT_LOADED': {\n                    console.log(\"All visuals are loaded. The title of the document:\", messageEvent.message.title);\n                    break;\n                }\n                case 'ERROR_OCCURRED': {\n                    console.log(\"Error occurred while rendering the experience. Error code:\", messageEvent.message.errorCode);\n                    break;\n                }\n                case 'PARAMETERS_CHANGED': {\n                    console.log(\"Parameters changed. Changed parameters:\", messageEvent.message.changedParameters);\n                    break;\n                }\n                case 'SELECTED_SHEET_CHANGED': {\n                    console.log(\"Selected sheet changed. Selected sheet:\", messageEvent.message.selectedSheet);\n                    break;\n                }\n                case 'SIZE_CHANGED': {\n                    console.log(\"Size changed. New dimensions:\", messageEvent.message);\n                    break;\n                }\n                case 'MODAL_OPENED': {\n                    window.scrollTo({\n                        top: 0 // iframe top position\n                    });\n                    break;\n                }\n            }\n        },\n    };\n    const embeddedDashboardExperience = await embeddingContext.embedDashboard(frameOptions, contentOptions);\n\n    const selectCountryElement = document.getElementById('country');\n    selectCountryElement.addEventListener('change', (event) => {\n        embeddedDashboardExperience.setParameters([\n            {\n                Name: 'country',\n                Values: event.target.value\n            }\n        ]);\n    });\n};\n\n```\n\n----------------------------------------\n\nTITLE: Resize Height on Size Changed Event - Configuration\nDESCRIPTION: This code snippet demonstrates the configuration of the `resizeHeightOnSizeChangedEvent` option in the `frameOptions` object.  When set to `true`, it allows the embedded iframe's height to dynamically adjust based on the content's height changes within the QuickSight dashboard. The initial height is defined, and the height will be updated when content changes occur.  Additionally, the snippet also includes code to handle the event of a modal opening within the dashboard to auto-scroll the focus to the modal, which helps to prevent modals from being hidden when the iframe height changes.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/README.md#_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    \"height\": \"300px\",\n    \"resizeHeightOnSizeChangedEvent\": true\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst contentOptions = {\n    //...\n    onMessage: (messageEvent, metadata) => {\n        switch (messageEvent.eventName) {\n            case 'MODAL_OPENED': {\n                window.scrollTo({\n                    top: 0 // iframe top position\n                });\n                break;\n            }\n            //...\n        }\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Navigating to Dashboard v2.0\nDESCRIPTION: This code navigates to a specific dashboard in QuickSight Embedding SDK version 2.0. It uses the `navigateToDashboard` method, passing the dashboard ID as the first argument and an object containing parameters as the second argument.  The call returns an acknowledgement `ack` via a Promise.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/OPTIONS_DIFFERENCES_V1_TO_V2.md#_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\n    const ack = await embeddedDashboardExperience.navigateToDashboard('<NEW_DASHBOARD_ID>', {\n        parameters: [\n            // ...\n        ]\n    });\n```\n\n----------------------------------------\n\nTITLE: Example `onMessage` Handler Function for Embedded Experiences (JavaScript)\nDESCRIPTION: Sample implementation of an `onMessage` callback that handles specific `EventName`s such as 'CONTENT_LOADED' and 'ERROR_OCCURRED', allowing for tailored responses to embedded experience events like logging or UI updates.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/README.md#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst contentOptions = {\n    //...\n    onMessage: async (messageEvent: EmbeddingEvents, metadata?: ExperienceFrameMetadata) => {\n        switch (messageEvent.eventName) {\n            case 'CONTENT_LOADED': {\n                console.log(\"Do something when the embedded experience is fully loaded.\");\n                break;\n            }\n            case 'ERROR_OCCURRED': {\n                console.log(\"Do something when the embedded experience fails loading.\");\n                break;\n            }\n            //...\n        }\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Filter Groups to a Visual with QuickSight Embedding SDK – JavaScript\nDESCRIPTION: Uses addFilterGroups to attach one or more filter group definitions to an embedded visual through the SDK. Each filter group includes properties like FilterGroupId, Filters (such as NumericRangeFilter), scope configuration, dataset scope, and enabled status. Requires filter group structure compliance and the embeddedVisualExperience object. Returns a ResponseMessage promise and overwrites filter groups sharing the same ID. Only embedded visual IDs and relevant sheet IDs are permitted in scope configurations.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/README.md#_snippet_53\n\nLANGUAGE: javascript\nCODE:\n```\nembeddedVisualExperience.addFilterGroups([\n    {\n        FilterGroupId: '<NEW_FILTER_GROUP_ID>',\n        Filters: [\n            {\n                NumericRangeFilter: {\n                    Column: {\n                        ColumnName: '<YOUR_COLUMN_NAME>',\n                        DataSetIdentifier: '<YOUR_DATASET_IDENTIFIER>'\n                    },\n                    FilterId: '<NEW_FILTER_GROUP_ID>',\n                    NullOption: 'ALL_VALUES',\n                    IncludeMaximum: true,\n                    IncludeMinimum: true,\n                    RangeMaximum: {\n                        StaticValue: <SOME_NUMERIC_VALUE_IN_THE_COLUMN>\n                    },\n                    RangeMinimum: {\n                        StaticValue: <SOME_NUMERIC_VALUE_IN_THE_COLUMN>\n                    }\n                }\n            }\n        ],\n        ScopeConfiguration: {\n            SelectedSheets: {\n                SheetVisualScopingConfigurations: [\n                    {\n                        Scope: 'SELECTED_VISUALS',\n                        VisualIds: [\n                            '<THE_EMBEDDED_VISUAL_ID>' // Only the embedded visual's id is supported\n                        ],\n                        SheetId: '<YOUR_SHEET_ID>' // Only the id of the sheet the embedded visual is on is supported\n                    }\n                ]\n            }\n        },\n        CrossDataset: 'SINGLE_DATASET',\n        Status: 'ENABLED'\n    }\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuration Property: locale for Embedded QuickSight Session\nDESCRIPTION: Allows setting the locale for the embedded QuickSight experience. Supports multiple language options; unsupported locales fallback to 'en-US'. Used via `contentOptions` to customize language settings for the user interface.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/README.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst option = { locale: \"en-US\" }; \n// Supported locales include: en-US, da-DK, de-DE, ja-JP, es-ES, fr-FR, it-IT, nl-NL, nb-NO, pt-BR, fi-FI, sv-SE, ko-KR, zh-CN, zh-TW.\n```\n\n----------------------------------------\n\nTITLE: Removing Filter Groups from a Visual with QuickSight Embedding SDK – JavaScript\nDESCRIPTION: Calls removeFilterGroups on the embeddedVisualExperience object to delete one or multiple filter groups from an embedded visual by providing their group IDs. Expects an array of string filter group IDs as input. Prerequisite is an initialized embeddedVisualExperience within a relevant QuickSight embedding context. Returns a promise resolving to a ResponseMessage; filter groups that do not exist will be ignored.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/README.md#_snippet_55\n\nLANGUAGE: javascript\nCODE:\n```\nembeddedVisualExperience.removeFilterGroups([\n    '<EXISTING_FILTER_GROUP_ID>',\n    // ...\n]);\n```\n\n----------------------------------------\n\nTITLE: Optional `onMessage` Callback for Embedding Experiences (TypeScript)\nDESCRIPTION: Defines the `onMessage` callback type and structure, enabling the embedding experience to respond to messages such as content loaded or errors. Facilitates handling asynchronous events from embedded experiences based on `EventName`.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/README.md#_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type EventListener = (event: EmbeddingEvents, metadata?: ExperienceFrameMetadata) => void;\n\nexport interface SimpleMessageEvent {\n   eventName: EventName;\n   message?: EventMessageValue;\n   data?: EventData;\n   eventTarget?: InternalExperiences;\n}\n\nexport type ExperienceFrameMetadata = {\n    frame: EmbeddingIFrameElement | null;\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Filter Groups for a Visual with QuickSight Embedding SDK – JavaScript\nDESCRIPTION: Invokes updateFilterGroups to modify existing filter groups associated with the embedded visual. Takes an array of filter group update objects, each with properties such as FilterGroupId, Filters (e.g., RelativeDatesFilter), scope configuration, status, and cross-dataset settings. Requires updating by matching filter group IDs; only one sheet and the embedded visual are supported in the scope. The SDK must be available and embeddedVisualExperience initialized. Returns a ResponseMessage promise and will overwrite existing group details with the supplied input.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/README.md#_snippet_54\n\nLANGUAGE: javascript\nCODE:\n```\nembeddedVisualExperience.updateFilterGroups([\n    {\n        FilterGroupId: '<EXISTING_FILTER_GROUP_ID>',\n        Filters: [\n            {\n                RelativeDatesFilter: {\n                    Column: {\n                        ColumnName: '<YOUR_COLUMN_NAME>',\n                        DataSetIdentifier: '<YOUR_DATASET_IDENTIFIER>'\n                    },\n                    FilterId: '<FILTER_GROUP_ID>',\n                    AnchorDateConfiguration: {\n                        AnchorOption: 'NOW'\n                    },\n                    TimeGranularity: 'YEAR',\n                    RelativeDateType: 'LAST',\n                    NullOption: 'NON_NULLS_ONLY',\n                    MinimumGranularity: 'DAY',\n                    RelativeDateValue: 3\n                }\n            }\n        ],\n        ScopeConfiguration: {\n            SelectedSheets: {\n                SheetVisualScopingConfigurations: [\n                    {\n                        Scope: 'SELECTED_VISUALS',\n                        VisualIds: [\n                            '<THE_EMBEDDED_VISUAL_ID>' // Only the embedded visual's id is supported\n                        ],\n                        SheetId: '<YOUR_SHEET_ID>' // Only the selected sheet id is supported\n                    }\n                ]\n            }\n        },\n        CrossDataset: 'SINGLE_DATASET',\n        Status: 'ENABLED'\n    }\n]);\n```\n\n----------------------------------------\n\nTITLE: Navigating to Different Dashboard with Parameters\nDESCRIPTION: Navigates to a different dashboard within the QuickSight embedding experience. Requires the target dashboardId and optionally accepts parameters to be applied to the new dashboard.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/README.md#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nconst dashboardId: \"37a99f75-8230-4409-ac52-e45c652cc21e\";\nconst options = {\n    parameters: [\n        {\n            Name: 'country',\n            Values: ['United States'],\n        }\n    ]\n};\nembeddedDashboardExperience.navigateToDashboard(dashboardId, options);\n```\n\n----------------------------------------\n\nTITLE: Resetting Embedded Visual State with QuickSight Embedding SDK – JavaScript\nDESCRIPTION: Invokes the reset method to revert any changes (such as actions, filters, or themes) made to the embedded visual during the session. Requires an initialized embeddedVisualExperience. Returns a promise resolving to a ResponseMessage. The reset operation only affects transient runtime changes and does not persist changes to the source QuickSight asset.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/README.md#_snippet_58\n\nLANGUAGE: javascript\nCODE:\n```\nembeddedVisualExperience.reset();\n```\n\n----------------------------------------\n\nTITLE: Setting question in embedded Q Bar in version 1.x\nDESCRIPTION: Demonstrates how to set a question in the embedded Q Bar using setQBarQuestion method in version 1.x.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/OPTIONS_DIFFERENCES_V1_TO_V2.md#_snippet_48\n\nLANGUAGE: JavaScript\nCODE:\n```\nembeddedQBarExperience.setQBarQuestion('show me monthly revenue');\n```\n\n----------------------------------------\n\nTITLE: Setting Selected Sheet in QuickSight Dashboard\nDESCRIPTION: Programmatically navigates to a specific sheet within the embedded QuickSight dashboard by providing the sheet ID.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/README.md#_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nembeddedDashboardExperience.setSelectedSheetId('<YOUR_SHEET_ID>');\n```\n\n----------------------------------------\n\nTITLE: Handling Selected Sheet Change v1.x\nDESCRIPTION: This snippet demonstrates handling the selected sheet change event in version 1.x. The `selectedSheetChangeCallback` function is invoked when the selected sheet changes, providing data about the new selection.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/OPTIONS_DIFFERENCES_V1_TO_V2.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n    const options = {\n        // ...\n        selectedSheetChangeCallback: (data) => {\n            console.log('Selected sheet changed', data);\n        },\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting Theme in QuickSight Dashboard using JavaScript\nDESCRIPTION: Sets the visual theme of the QuickSight dashboard by specifying a theme ARN string. Ensure that the user has proper access to the theme via AWS IAM or QuickSight theme list API. Returns a promise resolving to a ResponseMessage indicating success or failure. Dependencies include an embeddedDashboardExperience object.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/README.md#_snippet_34\n\nLANGUAGE: JavaScript\nCODE:\n```\nembeddedDashboardExperience.setTheme('<YOUR_THEME_ARN>');\n```\n\n----------------------------------------\n\nTITLE: Setting Visual Actions with QuickSight Embedding SDK – JavaScript\nDESCRIPTION: Uses the setActions method of the embeddedVisualExperience object to update all actions associated with an embedded visual in Amazon QuickSight. This snippet expects an array of VisualAction objects defining their identifiers, statuses, triggers, and operation callbacks. Dependencies include loading the QuickSight Embedding SDK and having an initialized embeddedVisualExperience object. Action parameters such as Name, CustomActionId, Status, Trigger, and ActionOperations must be provided. Returns a promise that resolves to a ResponseMessage; replaces all current actions with the ones specified. Existing action configurations will be overwritten.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/README.md#_snippet_51\n\nLANGUAGE: javascript\nCODE:\n```\nembeddedVisualExperience.setActions([\n    {\n        Name: '<NEW_ACTION_NAME>',\n        CustomActionId: `<NEW_ACTION_ID>`,\n        Status: 'ENABLED',\n        Trigger: 'DATA_POINT_CLICK', // or 'DATA_POINT_MENU'\n        ActionOperations: [{\n            CallbackOperation: {\n                EmbeddingMessage: {}\n            }\n        }]\n    }\n]);\n```\n\n----------------------------------------\n\nTITLE: Setting iframe Resize Behavior Using JSON Configuration\nDESCRIPTION: This snippet shows how to configure frame options to enable dynamic iframe height resizing when the embedded content height changes. It uses a JSON object with 'height' set to an initial load height and 'resizeHeightOnSizeChangedEvent' set to true to allow automatic height adjustments following size change events. This configuration helps keep the iframe height in sync with the embedded content.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/README.md#_snippet_48\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"height\": \"300px\",\n    \"resizeHeightOnSizeChangedEvent\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Resetting Dashboard State in JavaScript\nDESCRIPTION: Resets all changes and filters to the dashboard’s default state. Returns a promise resolving to a ResponseMessage, restoring the dashboard to its original configuration. Suitable for reinitializing dashboards, relying on embeddedDashboardExperience.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/README.md#_snippet_41\n\nLANGUAGE: JavaScript\nCODE:\n```\nembeddedDashboardExperience.reset();\n```\n\n----------------------------------------\n\nTITLE: Setting question asynchronously in version 2.0\nDESCRIPTION: Uses async/await to send a question command to the embedded Q Bar and receive acknowledgment.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/OPTIONS_DIFFERENCES_V1_TO_V2.md#_snippet_49\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst ack = await embeddedQBarExperience.setQuestion('show me monthly revenue');\n```\n\n----------------------------------------\n\nTITLE: Getting Visual Actions from QuickSight Dashboard\nDESCRIPTION: Retrieves the list of actions associated with a specific visual in a sheet of the embedded QuickSight dashboard by providing the sheet ID and visual ID.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/README.md#_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nembeddedDashboardExperience.getVisualActions('<YOUR_SHEET_ID>', '<YOUR_VISUAL_ID>');\n```\n\n----------------------------------------\n\nTITLE: Importing QuickSight SDK and Creating Context\nDESCRIPTION: This code snippet demonstrates the import of the `QuickSightEmbedding` module within a JavaScript environment using the `require` syntax in Node.js. The imported module is then used to create an embedding context via `createEmbeddingContext()`. This is a prerequisite to embedding dashboards or visuals.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst QuickSightEmbedding = require(\"amazon-quicksight-embedding-sdk\");\n\nconst embeddingContext = await QuickSightEmbedding.createEmbeddingContext();\n```\n\n----------------------------------------\n\nTITLE: Enabling Footer Padding v1.x\nDESCRIPTION: This snippet enables footer padding in version 1.x using `footerPaddingEnabled`. Setting this property to `true` adds additional padding to the footer, preventing content overlap.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/OPTIONS_DIFFERENCES_V1_TO_V2.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n    const options = {\n        // ...\n        footerPaddingEnabled: true\n    }\n```\n\n----------------------------------------\n\nTITLE: Adding Actions to a Visual in QuickSight Dashboard\nDESCRIPTION: Adds new actions to a specific visual in a sheet of the embedded QuickSight dashboard. This method appends the provided actions to any existing actions on the visual.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/README.md#_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nembeddedDashboardExperience.addVisualActions('<YOUR_SHEET_ID>', '<YOUR_VISUAL_ID>', [\n    {\n        Name: '<NEW_ACTION_NAME>',\n        CustomActionId: `<NEW_ACTION_ID>`,\n        Status: 'ENABLED',\n        Trigger: 'DATA_POINT_CLICK', // or 'DATA_POINT_MENU'\n        ActionOperations: [{\n            CallbackOperation: {\n                EmbeddingMessage: {}\n            }\n        }]\n    }\n]);\n```\n\n----------------------------------------\n\nTITLE: Importing QuickSight SDK and Creating Context (wildcard)\nDESCRIPTION: This JavaScript snippet demonstrates importing all exports from the Amazon QuickSight Embedding SDK using the wildcard import syntax, aliased as `QuickSightEmbedding`. It then calls `QuickSightEmbedding.createEmbeddingContext()` to initialize the embedding context.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as QuickSightEmbedding from 'amazon-quicksight-embedding-sdk';\n\nconst embeddingContext = await QuickSightEmbedding.createEmbeddingContext();\n```\n\n----------------------------------------\n\nTITLE: Removing Actions from a Visual in QuickSight Dashboard\nDESCRIPTION: Removes specified actions from a visual in a sheet of the embedded QuickSight dashboard by providing the sheet ID, visual ID, and action objects to be removed.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/README.md#_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nembeddedDashboardExperience.removeVisualActions('<YOUR_SHEET_ID>', '<YOUR_VISUAL_ID>', [\n    {\n        Name: '<EXISTING_ACTION_NAME>',\n        CustomActionId: `<EXISTING_ACTION_ID>`,\n        Status: 'ENABLED',\n        Trigger: 'DATA_POINT_CLICK', // or 'DATA_POINT_MENU'\n        ActionOperations: [{\n            CallbackOperation: {\n                EmbeddingMessage: {}\n            }\n        }]\n    }\n]);\n```\n\n----------------------------------------\n\nTITLE: Setting Actions for a Visual in QuickSight Dashboard\nDESCRIPTION: Replaces all existing actions of a visual with new actions in the embedded QuickSight dashboard. Unlike addVisualActions, this method completely overwrites the current actions.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/README.md#_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nembeddedDashboardExperience.setVisualActions('<YOUR_SHEET_ID>', '<YOUR_VISUAL_ID>', [\n    {\n        Name: '<NEW_ACTION_NAME>',\n        CustomActionId: `<NEW_ACTION_ID>`,\n        Status: 'ENABLED',\n        Trigger: 'DATA_POINT_CLICK', // or 'DATA_POINT_MENU'\n        ActionOperations: [{\n            CallbackOperation: {\n                EmbeddingMessage: {}\n            }\n        }]\n    }\n]);\n```\n\n----------------------------------------\n\nTITLE: Defining loadCallback in version 1.x\nDESCRIPTION: Specifies a loadCallback function within options to perform actions once the embedded content loads.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/OPTIONS_DIFFERENCES_V1_TO_V2.md#_snippet_34\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst options = {\n    // ...\n    loadCallback: () => {\n        console.log('Embedded content loaded');\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Filter Groups to QuickSight Dashboard\nDESCRIPTION: Adds new filter groups to the embedded QuickSight dashboard. Filter groups can only be added to the currently selected sheet and can be configured to apply to specific visuals.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/README.md#_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nembeddedDashboardExperience.addFilterGroups([\n    {\n        FilterGroupId: '<NEW_FILTER_GROUP_ID>',\n        Filters: [\n            {\n                CategoryFilter: {\n                    Column: {\n                        ColumnName: '<YOUR_COLUMN_NAME>',\n                        DataSetIdentifier: '<YOUR_DATASET_IDENTIFIER>'\n                    },\n                    FilterId: '<NEW_FILTER_GROUP_ID>',\n                    Configuration: {\n                        FilterListConfiguration: {\n                            MatchOperator: 'CONTAINS',\n                            NullOption: 'NON_NULLS_ONLY',\n                            CategoryValues: [\n                                '<A_VALUE_IN_THE_COLUMN>'\n                            ]\n                        }\n                    }\n                }\n            }\n        ],\n        ScopeConfiguration: {\n            SelectedSheets: {\n                SheetVisualScopingConfigurations: [\n                    {\n                        Scope: 'SELECTED_VISUALS',\n                        VisualIds: [\n                            '<A_VISUAL_ID_IN_DASHBOARD>'\n                        ],\n                        SheetId: '<YOUR_SHEET_ID>' // Only the selected sheet id is supported\n                    }\n                ]\n            }\n        },\n        CrossDataset: 'SINGLE_DATASET',\n        Status: 'ENABLED'\n    }\n]);\n```\n\n----------------------------------------\n\nTITLE: Updating Filter Groups in QuickSight Dashboard using JavaScript\nDESCRIPTION: This method updates specified filter groups within the currently selected sheet of an Amazon QuickSight dashboard. It requires specifying filter group IDs, filter parameters, scope configuration, and status. Dependencies include an initialized embeddedDashboardExperience object. Inputs include an array of FilterGroup objects, each containing IDs, filters, scope configuration, and status, with the output being a promise resolving to a ResponseMessage.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/README.md#_snippet_32\n\nLANGUAGE: JavaScript\nCODE:\n```\nembeddedDashboardExperience.updateFilterGroups([\n    {\n        FilterGroupId: '<EXISTING_FILTER_GROUP_ID>',\n        Filters: [\n            {\n                NumericEqualityFilter: {\n                    Column: {\n                        ColumnName: '<YOUR_COLUMN_NAME>',\n                        DataSetIdentifier: '<YOUR_DATASET_IDENTIFIER>'\n                    },\n                    FilterId: '<FILTER_GROUP_ID>',\n                    MatchOperator: 'EQUALS',\n                    NullOption: 'ALL_VALUES',\n                    Value: <SOME_NUMERIC_VALUE_IN_THE_COLUMN>\n                }\n            }\n        ],\n        ScopeConfiguration: {\n            SelectedSheets: {\n                SheetVisualScopingConfigurations: [\n                    {\n                        Scope: 'ALL_VISUALS',\n                        SheetId: '<YOUR_SHEET_ID>' // Only the selected sheet id is supported\n                    }\n                ]\n            }\n        },\n        CrossDataset: 'SINGLE_DATASET',\n        Status: 'ENABLED'\n    }\n]);\n```\n\n----------------------------------------\n\nTITLE: Handling Parameter Changes v2.0\nDESCRIPTION: This code handles parameter changes in version 2.0 using the `onMessage` callback within `contentOptions`. When the `PARAMETERS_CHANGED` event is received, the associated message contains information about the changed parameters, accessible through `messageEvent.message`.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/OPTIONS_DIFFERENCES_V1_TO_V2.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n    const frameOptions = {\n        // ...\n    };\n    const contentOptions = {\n        // ...\n        onMessage: (messageEvent) => {\n            switch(messageEvent.eventName) {\n                case 'PARAMETERS_CHANGED': {\n                    console.log('Parameters changed', messageEvent.message);\n                    // {\n                    //     changedParameters: [\n                    //         {\n                    //             Name: 'usStates',\n                    //             Values: ['Arizona', 'Texas']\n                    //         }\n                    //     ]\n                    // }\n                    break;\n                }\n            }\n        }\n    };\n```\n\n----------------------------------------\n\nTITLE: Removing Filter Groups from QuickSight Dashboard using JavaScript\nDESCRIPTION: This method removes specified filter groups from the currently selected sheet of an Amazon QuickSight dashboard. It accepts an array of filter group IDs and returns a promise that resolves to a ResponseMessage. The operation affects only filter groups within the active sheet scope. Dependencies include an initialized embeddedDashboardExperience object.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/README.md#_snippet_33\n\nLANGUAGE: JavaScript\nCODE:\n```\nembeddedDashboardExperience.removeFilterGroups([\n    '<EXISTING_FILTER_GROUP_ID>',\n    // ...\n]);\n```\n\n----------------------------------------\n\nTITLE: Getting Sheet Visuals from QuickSight Dashboard\nDESCRIPTION: Retrieves the list of visuals contained within a specific sheet of the embedded QuickSight dashboard by providing the sheet ID.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/README.md#_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nembeddedDashboardExperience.getSheetVisuals('<YOUR_SHEET_ID>');\n```\n\n----------------------------------------\n\nTITLE: Retrieving Active Parameters from Dashboard in TypeScript\nDESCRIPTION: Fetches current active parameter values from the embedded QuickSight dashboard in an ad-hoc manner. Returns a promise resolving to an array of Parameter objects. Suitable for dynamic workflows needing parameter states, depending on an existing embeddedDashboardExperience object.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/README.md#_snippet_38\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst parameters: Parameter[] = await embeddedDashboardExperience.getParameters();\n```\n\n----------------------------------------\n\nTITLE: Toggling Scheduling Pane in Dashboard using JavaScript\nDESCRIPTION: Switches the visibility state of the scheduling pane, allowing dynamic UI control. Returns a promise resolving to a ResponseMessage. Supports adaptive dashboard interactions via embeddedDashboardExperience object.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/README.md#_snippet_43\n\nLANGUAGE: JavaScript\nCODE:\n```\nembeddedDashboardExperience.toggleSchedulingPane();\n```\n\n----------------------------------------\n\nTITLE: Redoing Changes in Dashboard SDK using JavaScript\nDESCRIPTION: Reapplies the changes that were previously undone, restoring the dashboard's state. Returns a promise that resolves to a ResponseMessage. This method supports iterative undo-redo workflows in embedded dashboards, requiring an initialized embeddedDashboardExperience object.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/README.md#_snippet_40\n\nLANGUAGE: JavaScript\nCODE:\n```\nembeddedDashboardExperience.redo();\n```\n\n----------------------------------------\n\nTITLE: Defining the QSearchExperience Class (TypeScript)\nDESCRIPTION: Shows the TypeScript class definition for `QSearchExperience`, returned by the `embedQSearchBar` method. It inherits from `BaseExperience` and provides methods like `close` to collapse the search bar and `setQuestion` to programmatically set and query a question, both returning a Promise.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/README.md#_snippet_62\n\nLANGUAGE: typescript\nCODE:\n```\nexport class QSearchExperience extends BaseExperience<QSearchContentOptions, InternalQSearchExperience, IQSearchExperience, TransformedQSearchContentOptions, QSearchExperienceFrame> {\n   close: () => Promise<SuccessResponseMessage | ErrorResponseMessage>;\n   setQuestion: (question: string) => Promise<SuccessResponseMessage | ErrorResponseMessage>;\n}\n```\n\n----------------------------------------\n\nTITLE: Toggling Bookmarks Pane in Dashboard using JavaScript\nDESCRIPTION: Toggles the visibility of the bookmarks pane within the embedded dashboard interface. Returns a promise resolving to a ResponseMessage. Useful for controlling dashboard UI elements dynamically, depending on embeddedDashboardExperience.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/README.md#_snippet_42\n\nLANGUAGE: JavaScript\nCODE:\n```\nembeddedDashboardExperience.toggleBookmarksPane();\n```\n\n----------------------------------------\n\nTITLE: Toggling Threshold Alerts Pane in Dashboard using JavaScript\nDESCRIPTION: Switches the visibility of the threshold alerts pane in the dashboard UI. Returns a promise resolving to a ResponseMessage, enabling UI management through code. Requires an embeddedDashboardExperience instance.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/README.md#_snippet_44\n\nLANGUAGE: JavaScript\nCODE:\n```\nembeddedDashboardExperience.toggleThresholdAlertsPane();\n```\n\n----------------------------------------\n\nTITLE: Creating a Shared View of the Dashboard in JavaScript\nDESCRIPTION: Invokes the createSharedView method to generate a shareable view of the current dashboard state. It returns a promise resolving to a ResponseMessage. Useful for sharing static or preset views of dashboards with others. Depends on an initialized embeddedDashboardExperience object.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/README.md#_snippet_36\n\nLANGUAGE: JavaScript\nCODE:\n```\nembeddedDashboardExperience.createSharedView();\n```\n\n----------------------------------------\n\nTITLE: Getting Active Parameter Values v1.x\nDESCRIPTION: This snippet retrieves the active parameter values in QuickSight Embedding SDK version 1.x. The `getActiveParameterValues` method is called with a callback function that receives the parameter data.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/OPTIONS_DIFFERENCES_V1_TO_V2.md#_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\n    embeddedDashboardExperience.getActiveParameterValues((data) => {\n        console.log('Parameters:', data);\n        // {\n        //     parameters: [\n        //         {\n        //             name: 'usStates',\n        //             value: ['Arizona', 'Texas']\n        //         },\n        //         {\n        //             name: 'usPartyAffiliations',\n        //             value: ['Democrat', 'Republican']\n        //         }\n        //     ]\n        // }\n    });\n```\n\n----------------------------------------\n\nTITLE: Setting Theme on an Embedded Visual with QuickSight Embedding SDK – JavaScript\nDESCRIPTION: Uses setTheme to apply a pre-existing QuickSight theme (by ARN) to the embedded visual. The method requires a valid themeArn string and access permissions for the specified theme. The theme ARN can be found using the ListThemes API. Returns a promise resolving to a ResponseMessage. If the user lacks permission or provides an invalid ARN, the call will fail.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/README.md#_snippet_56\n\nLANGUAGE: javascript\nCODE:\n```\nembeddedVisualExperience.setTheme('<YOUR_THEME_ARN>');\n```\n\n----------------------------------------\n\nTITLE: Sharing View in Embedded Console Experience (JavaScript)\nDESCRIPTION: Demonstrates how to call the `createSharedView` method on an `embeddedConsoleExperience` object to share the current dashboard view. This method can only be invoked when the embedded experience is on the `DASHBOARD` route and returns a Promise resolving to a `ResponseMessage`.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/README.md#_snippet_61\n\nLANGUAGE: javascript\nCODE:\n```\n    embeddedConsoleExperience.createSharedView();\n```\n\n----------------------------------------\n\nTITLE: Handling Content Load Event v2.0\nDESCRIPTION: This code handles the content loaded event in version 2.0. The `onMessage` callback is used to listen for the `CONTENT_LOADED` event, indicating that the embedded content has been successfully loaded. The `messageEvent.message` may contain additional data about the loaded content.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/OPTIONS_DIFFERENCES_V1_TO_V2.md#_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n    const frameOptions = {\n        // ...\n    };\n    const contentOptions = {\n        // ...\n        onMessage: (messageEvent) => {\n            switch(messageEvent.eventName) {\n                case 'CONTENT_LOADED': {\n                    console.log('Embedded content loaded', messageEvent.message);\n                    break;\n                }\n            }\n        }\n    };\n```\n\n----------------------------------------\n\nTITLE: Setting a Question in Embedded Q Search Bar (JavaScript)\nDESCRIPTION: Demonstrates calling the `setQuestion` method on an `embeddedQBarExperience` object (an instance of `QSearchExperience`). This action sends the specified question ('show me monthly revenue') to the Q search bar, triggers the query, and automatically opens the Q popover. It returns a Promise.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/README.md#_snippet_64\n\nLANGUAGE: javascript\nCODE:\n```\n    embeddedQBarExperience.setQuestion('show me monthly revenue');\n```\n\n----------------------------------------\n\nTITLE: Controlling hideTopicName in version 2.0\nDESCRIPTION: Sets the visibility of the topic name in the search bar through the hideTopicName property in contentOptions.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/OPTIONS_DIFFERENCES_V1_TO_V2.md#_snippet_39\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst frameOptions = {\n    // ...\n};\nconst contentOptions = {\n    // ...\n    hideTopicName: false\n};\n```\n\n----------------------------------------\n\nTITLE: Closing the Embedded Q Search Bar Popover (JavaScript)\nDESCRIPTION: Shows how to call the `close` method on an `embeddedQBarExperience` object (an instance of `QSearchExperience`). This action closes the Q popover and restores the iframe containing the search bar to its original collapsed size. It returns a Promise.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/README.md#_snippet_65\n\nLANGUAGE: javascript\nCODE:\n```\n    embeddedQBarExperience.close();\n```\n\n----------------------------------------\n\nTITLE: Toggling Recent Snapshots Pane in Dashboard using JavaScript\nDESCRIPTION: Controls the visibility of the recent snapshots pane within the dashboard UI. Returns a promise resolving to a ResponseMessage, allowing dynamic UI configuration. Dependent on the embeddedDashboardExperience object.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/README.md#_snippet_45\n\nLANGUAGE: JavaScript\nCODE:\n```\nembeddedDashboardExperience.toggleRecentSnapshotsPane();\n```\n\n----------------------------------------\n\nTITLE: Embedding QuickSight Experiences Example\nDESCRIPTION: This TypeScript code demonstrates how to embed various QuickSight experiences (Dashboard, Visual, Console, and QSearchBar) using the `embeddingContext` and its respective methods. The snippet assumes an embedding context has already been created, and shows the basic structure of calling `embedDashboard`, `embedVisual`, `embedConsole`, and `embedQSearchBar`, taking `frameOptions` and `contentOptions` as parameters (not defined here).  The `frameOptions` are required for all the experience embedding methods and `contentOptions` is optional.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/README.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createEmbeddingContext } from 'amazon-quicksight-embedding-sdk';\n\nconst embeddingContext = await createEmbeddingContext();\n\nconst {\n    embedDashboard,\n    embedVisual,\n    embedConsole,\n    embedQSearchBar,\n} = embeddingContext;\n\nconst frameOptions = {\n    //...\n};\nconst contentOptions = {\n    //...\n};\n\n// Embedding a dashboard experience\nconst embeddedDashboardExperience = await embedDashboard(frameOptions, contentOptions);\n\n// Embedding a visual experience\nconst embeddedVisualExperience = await embedVisual(frameOptions, contentOptions);\n\n// Embedding a console experience\nconst embeddedConsoleExperience = await embedConsole(frameOptions, contentOptions);\n\n// Embedding a Q search bar experience\nconst embeddedQSearchExperience = await embedQSearchBar(frameOptions, contentOptions);\n```\n\n----------------------------------------\n\nTITLE: Navigating to Sheet v2.0\nDESCRIPTION: This code navigates to a specific sheet in QuickSight Embedding SDK version 2.0.  The asynchronous method `setSelectedSheetId` is called on the `embeddedDashboardExperience` object with the target sheet ID as its argument.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/OPTIONS_DIFFERENCES_V1_TO_V2.md#_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\n    const ack = await embeddedDashboardExperience.setSelectedSheetId('<NEW_SHEET_ID>');\n```\n\n----------------------------------------\n\nTITLE: Resetting Parameters in Embedded QuickSight Experience\nDESCRIPTION: Resets a parameter to include all possible values by using the special 'ALL_VALUES' string. This allows returning a filtered parameter back to its default state showing all data.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/README.md#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nembeddedExperience.setParameters([\n    {\n        Name: 'states',\n        Values: ['ALL_VALUES'],\n    }\n]);\n```\n\n----------------------------------------\n\nTITLE: Getting Active Parameter Values v2.0\nDESCRIPTION: This code retrieves the active parameter values in QuickSight Embedding SDK version 2.0. The `getParameters` method returns a Promise that resolves to the parameter data. This example uses the `await` keyword for asynchronous handling.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/OPTIONS_DIFFERENCES_V1_TO_V2.md#_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\n    const parameters = await embeddedDashboardExperience.getParameters();\n    console.log('Parameters:', parameters);\n    // [\n    //     {\n    //         Name: 'usStates',\n    //         Values: ['Arizona', 'Texas']\n    //     },\n    //     {\n    //         Name: 'usPartyAffiliations',\n    //         Values: ['Democrat', 'Republican']\n    //     }\n    // ]\n```\n\n----------------------------------------\n\nTITLE: Example: Change Event Handler Function for SDK Embedding (JavaScript)\nDESCRIPTION: Provides an example implementation of an `onChange` callback function that handles different `EventName`s and `eventLevel`s to perform specific actions such as logging or UI updates based on SDK events.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/README.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst frameOptions = {\n    //...\n    onChange: (changeEvent: EmbeddingEvents, metadata: ExperienceFrameMetadata) => {\n        if (changeEvent.eventLevel === 'ERROR') {\n            console.log(`Do something when embedding experience failed with \"${changeEvent.eventName}\"`);\n            return;\n        }\n        switch (changeEvent.eventName) {\n            case 'FRAME_MOUNTED': {\n                console.log(\"Do something when the experience frame is mounted.\");\n                break;\n            }\n            case 'FRAME_LOADED': {\n                console.log(\"Do something when the experience frame is loaded.\");\n                break;\n            }\n            case 'FRAME_REMOVED': {\n                console.log(\"Do something when the experience frame is removed.\");\n                break;\n            }\n            //...\n        }\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Getting Filter Groups for a Visual in QuickSight Dashboard\nDESCRIPTION: Retrieves the list of filter groups associated with a specific visual in a sheet of the embedded QuickSight dashboard by providing the sheet ID and visual ID.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/README.md#_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nembeddedDashboardExperience.getFilterGroupsForVisual('<YOUR_SHEET_ID>', '<YOUR_VISUAL_ID>');\n```\n\n----------------------------------------\n\nTITLE: Using QuickSight SDK in Browser\nDESCRIPTION: This HTML snippet shows how to include the Amazon QuickSight Embedding SDK in a web page using a script tag. It downloads the SDK from a CDN and prepares a function `onLoad` which creates the embedding context.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/README.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n...\n<script src=\"https://unpkg.com/amazon-quicksight-embedding-sdk@2.10.0/dist/quicksight-embedding-js-sdk.min.js\"></script>\n<script type=\"text/javascript\">\n    const onLoad = async () => {\n        const embeddingContext = await QuickSightEmbedding.createEmbeddingContext();\n        //...\n    };\n</script>\n...\n<body onload=\"onLoad()\">\n...\n\n```\n\n----------------------------------------\n\nTITLE: Enabling topic selection in version 2.0\nDESCRIPTION: Sets allowTopicSelection to true in contentOptions to permit topic selection in embedded search bar.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/OPTIONS_DIFFERENCES_V1_TO_V2.md#_snippet_43\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst frameOptions = {\n    // ...\n};\nconst contentOptions = {\n    // ...\n    allowTopicSelection: true\n};\n```\n\n----------------------------------------\n\nTITLE: Getting Filter Groups for a Sheet in QuickSight Dashboard\nDESCRIPTION: Retrieves the list of filter groups associated with a specific sheet in the embedded QuickSight dashboard by providing the sheet ID.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/README.md#_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nembeddedDashboardExperience.getFilterGroupsForSheet('<YOUR_SHEET_ID>');\n```\n\n----------------------------------------\n\nTITLE: Handling Parameter Changes v1.x\nDESCRIPTION: This snippet demonstrates handling parameter changes in version 1.x. The `parametersChangeCallback` function is called when parameters are modified. The callback receives a `data` object containing information about changed parameters.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/OPTIONS_DIFFERENCES_V1_TO_V2.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n    const options = {\n        // ...\n        parametersChangeCallback: (data) => {\n            console.log('Parameters changed', data);\n            // {\n            //     parameters: [\n            //         {\n            //             name: 'usStates',\n            //             value: ['Arizona', 'Texas']\n            //         }\n            //     ],\n            //     changedParameters: [\n            //         {\n            //             name: 'usStates',\n            //             value: ['Arizona', 'Texas']\n            //         }\n            //     ]\n            // }\n        },\n    };\n```\n\n----------------------------------------\n\nTITLE: Disabling Sheet Tabs v2.0\nDESCRIPTION: This code disables sheet tabs in version 2.0 by setting the `singleSheet` property to `true` inside `sheetOptions` within `contentOptions`. This configuration ensures only a single sheet is displayed, effectively hiding the tabs.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/OPTIONS_DIFFERENCES_V1_TO_V2.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n    const frameOptions = {\n        // ...\n    };\n    const contentOptions = {\n        // ...\n        sheetOptions: {\n            singleSheet: true\n        }\n    };\n```\n\n----------------------------------------\n\nTITLE: Initiating Dashboard Print in JavaScript\nDESCRIPTION: Starts the dashboard printing process directly from the parent website, bypassing UI print controls. Call this method to trigger print functionality programmatically; it returns a promise with a ResponseMessage. Requires an embeddedDashboardExperience instance and appropriate dashboard setup.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/README.md#_snippet_37\n\nLANGUAGE: JavaScript\nCODE:\n```\nembeddedDashboardExperience.initiatePrint();\n```\n\n----------------------------------------\n\nTITLE: Creating Embedding Context with onChange\nDESCRIPTION: This JavaScript code snippet demonstrates how to create an embedding context with the `onChange` option. The `onChange` property accepts a callback function that will be executed whenever an event occurs within the context, providing information about changes.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createEmbeddingContext } from 'amazon-quicksight-embedding-sdk';\n\nconst embeddingContext: EmbeddingContext = await createEmbeddingContext({\n    onChange: (changeEvent) => {\n        console.log('Context received a change', changeEvent);\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Sheet ID v2.0\nDESCRIPTION: This code shows how to set the sheet ID in version 2.0. The `sheetId` is configured within the `sheetOptions` object inside `contentOptions`.  Replace `<YOUR_SHEET_ID>` with the desired sheet identifier.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/OPTIONS_DIFFERENCES_V1_TO_V2.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n    const frameOptions = {\n        // ...\n    };\n    const contentOptions = {\n        // ...\n        sheetOptions: {\n            sheetId: '<YOUR_SHEET_ID>'\n        }\n    };\n```\n\n----------------------------------------\n\nTITLE: Closing Amazon QuickSight Embedded Generative Q&A Search Bar in JavaScript\nDESCRIPTION: This snippet shows the use of the close method on the embeddedGenerativeQnExperience object to programmatically close the search bar and restore the iframe to its initial size. This method has no effect if the panel type is FULL. It requires an instantiated embeddedGenerativeQnExperience object. The method accepts no arguments and returns no value, serving as a simple control mechanism to close or collapse the search bar UI.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/README.md#_snippet_71\n\nLANGUAGE: JavaScript\nCODE:\n```\nembeddedGenerativeQnExperience.close();\n```\n\n----------------------------------------\n\nTITLE: Getting Sheets v2.0\nDESCRIPTION: This code retrieves the list of sheets in QuickSight Embedding SDK version 2.0. The `getSheets` method returns a Promise that resolves to the sheet data. This example utilizes the `await` keyword for asynchronous handling.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/OPTIONS_DIFFERENCES_V1_TO_V2.md#_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\n    const sheets = await embeddedDashboardExperience.getSheets();\n    console.log('Sheets:', sheets);\n```\n\n----------------------------------------\n\nTITLE: Enabling Footer Padding v2.0\nDESCRIPTION: This code enables footer padding in version 2.0 by setting `overlayContent` to `false` within `attributionOptions` inside `contentOptions`. This setting ensures additional padding is added at the footer to prevent content overlap. Note the reversed boolean logic compared to version 1.x.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/OPTIONS_DIFFERENCES_V1_TO_V2.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n    const frameOptions = {\n        // ...\n    };\n    const contentOptions = {\n        // ...\n        attributionOptions: {\n            overlayContent: false\n        }\n    };\n```\n\n----------------------------------------\n\nTITLE: Importing QuickSight SDK and Creating Context (named)\nDESCRIPTION: This JavaScript snippet shows how to import a specific function (`createEmbeddingContext`) from the Amazon QuickSight Embedding SDK using the named import syntax. It then calls `createEmbeddingContext` to initialize the embedding context.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createEmbeddingContext } from 'amazon-quicksight-embedding-sdk';\n\nconst embeddingContext = await createEmbeddingContext();\n```\n\n----------------------------------------\n\nTITLE: Getting Sheets v1.x\nDESCRIPTION: This snippet retrieves the list of sheets in QuickSight Embedding SDK version 1.x. The `getSheets` method is called with a callback function that receives the sheet data.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/OPTIONS_DIFFERENCES_V1_TO_V2.md#_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\n    embeddedDashboardExperience.getSheets((data) => {\n        console.log('Sheets:', data);\n    });\n```\n\n----------------------------------------\n\nTITLE: Defining parametersChangeCallback function in version 1.x\nDESCRIPTION: Illustrates how to specify a parametersChangeCallback function within the SDK options object in version 1.x, enabling handling of parameter change events via callback.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/OPTIONS_DIFFERENCES_V1_TO_V2.md#_snippet_32\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst options = {\n    // ...\n    parametersChangeCallback: (data) => {\n        console.log('Parameters changed', data);\n        // {\n        //     parameters: [\n        //         {\n        //             name: 'usStates',\n        //             value: ['Arizona', 'Texas']\n        //         }\n        //     ],\n        //     changedParameters: [\n        //         {\n        //             name: 'usStates',\n        //             value: ['Arizona', 'Texas']\n        //         }\n        //     ]\n        // }\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Disabling Undo/Redo v1.x\nDESCRIPTION: This snippet disables the undo and redo buttons in the embedded dashboard in version 1.x by setting the `undoRedoDisabled` property to `true` within the `options` object. This prevents users from using the undo and redo functionalities.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/OPTIONS_DIFFERENCES_V1_TO_V2.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n    const options = {\n        // ...\n        undoRedoDisabled: true\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting Parameters in Embedded QuickSight Experience\nDESCRIPTION: Updates parameter values in an embedded QuickSight dashboard. This method accepts an array of parameter objects, each with a Name and Values property. Multi-value parameters can be set by passing an array as the Values property.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/README.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nembeddedExperience.setParameters([\n    {\n        Name: 'country',\n        Values: ['United States'],\n    },\n    {\n        Name: 'states',\n        Values: ['California', 'Washington'],\n    }\n]);\n```\n\n----------------------------------------\n\nTITLE: Dashboard Embedding Interface and Methods (TypeScript)\nDESCRIPTION: Details the `DashboardExperience` class, extending `BaseExperience`, exposing methods to control embedded dashboards, such as initiating print, toggling panes, retrieving parameters, setting themes, navigating between dashboards, and managing visual actions. These methods facilitate comprehensive interaction with embedded dashboards.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/README.md#_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class DashboardExperience extends BaseExperience<...> {\n   initiatePrint: () => Promise<SuccessResponseMessage | ErrorResponseMessage>;\n   undo: () => Promise<SuccessResponseMessage | ErrorResponseMessage>;\n   redo: () => Promise<SuccessResponseMessage | ErrorResponseMessage>;\n   toggleBookmarksPane: () => Promise<SuccessResponseMessage | ErrorResponseMessage>;\n   toggleThresholdAlertsPane: () => Promise<SuccessResponseMessage | ErrorResponseMessage>;\n   toggleSchedulingPane: () => Promise<SuccessResponseMessage | ErrorResponseMessage>;\n   toggleRecentSnapshotsPane: () => Promise<SuccessResponseMessage | ErrorResponseMessage>;\n   getParameters: () => Promise<Parameter[]>;\n   getSheets: () => Promise<Sheet[]>;\n   getVisualActions: (sheetId: string, visualId: string) => Promise<VisualAction[]>;\n   addVisualActions: (sheetId: string, visualId: string, actions: VisualAction[]) => Promise<SuccessResponseMessage | ErrorResponseMessage>;\n   setVisualActions: (sheetId: string, visualId: string, actions: VisualAction[]) => Promise<SuccessResponseMessage | ErrorResponseMessage>;\n   getFilterGroupsForSheet: (sheetId: string) => Promise<FilterGroup[]>;\n   getFilterGroupsForVisual: (sheetId: string, visualId: string) => Promise<FilterGroup[]>;\n   addFilterGroups: (filterGroups: FilterGroup[]) => Promise<SuccessResponseMessage | ErrorResponseMessage>;\n   updateFilterGroups: (filterGroups: FilterGroup[]) => Promise<SuccessResponseMessage | ErrorResponseMessage>;\n   removeFilterGroups: (filterGroupsOrIds: FilterGroup[] | string[]) => Promise<SuccessResponseMessage | ErrorResponseMessage>;\n   setTheme:(themeArn: string) => Promise<SuccessResponseMessage | ErrorResponseMessage>;\n   setThemeOverride: (themeOverride: ThemeConfiguration) => Promise<SuccessResponseMessage | ErrorResponseMessage>;\n   createSharedView: () => Promise<SuccessResponseMessage | ErrorResponseMessage>;\n   getSelectedSheetId: () => Promise<string>;\n   setSelectedSheetId: (sheetId: string) => Promise<SuccessResponseMessage | ErrorResponseMessage>;\n   navigateToDashboard: (dashboardId: string, navigateToDashboardOptions?: NavigateToDashboardOptions) => Promise<SuccessResponseMessage | ErrorResponseMessage>;\n   removeVisualActions: (sheetId: string, visualId: string, actions: VisualAction[]) => Promise<SuccessResponseMessage | ErrorResponseMessage>;\n   getSheetVisuals: (sheetId: string) => Promise<Visual[]>;\n   setParameters: (parameters: Parameter[]) => Promise<SuccessResponseMessage | ErrorResponseMessage>;\n   reset: () => Promise<SuccessResponseMessage | ErrorResponseMessage>;\n   send: <EventMessageValue extends EventMessageValues>(messageEvent: EmbeddingMessageEvent<MessageEventName>) => Promise<ResponseMessage<EventMessageValue>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Iframe Resize on Sheet Change v2.0\nDESCRIPTION: This code enables iframe resizing on sheet changes in version 2.0.  The `emitSizeChangedEventOnSheetChange` property within `sheetOptions` inside `contentOptions` is set to `true`. This ensures a size change event is emitted when the sheet changes, triggering a resize.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/OPTIONS_DIFFERENCES_V1_TO_V2.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n    const frameOptions = {\n        // ...\n    };\n    const contentOptions = {\n        // ...\n        sheetOptions: {\n            emitSizeChangedEventOnSheetChange: true\n        }\n    };\n```\n\n----------------------------------------\n\nTITLE: Content Options Configuration for Amazon QuickSight Embedding Experience\nDESCRIPTION: The `contentOptions` object customizes the appearance and features of the QuickSight Q&A experience, such as toggling topic names, pinboard, search bar, interpreted statements, feedback, generated narratives, and more. Many options have default values and can be tailored to user experience preferences to control visibility of specific panels and buttons.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/README.md#_snippet_69\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst contentOptions = {\n    showTopicName: false, // hide or show topic name\n    showPinboard: false, // toggle pinboard button\n    showSearchBar: true, // toggle search bar in answer panel\n    showInterpretedAs: true, // show interpreted statement\n    showFeedback: true, // display feedback button\n    showGeneratedNarrative: true, // display generated narrative\n    showDidYouMean: true, // show alternative questions\n    showComplementaryVisuals: true, // display additional visuals\n    showQBusinessInsights: true, // show insights and notifications\n    allowReturn: true, // enable back button to exit answer panel\n    initialQuestionId: '', // specify question ID to direct-query\n    initialAnswerId: '', // specify answer ID for direct answer display\n    allowTopicSelection: true, // allow user to change question topic\n    allowFullscreen: true, // permit full-screen mode\n    searchPlaceholderText: 'Custom Search Placeholder', // placeholder text in search input\n    panelOptions: { // additional panel customization\n        panelType: 'FULL', // or 'SEARCH_BAR'\n        title: 'Custom Title', // title for full panel\n        showQIcon: true, // display Q icon\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Undoing Changes in Dashboard SDK using JavaScript\nDESCRIPTION: Reverts the most recent changes made in the embedded dashboard, enabling undo functionality. It returns a promise resolving to a ResponseMessage. Useful for implementing user-initiated undo actions; depends on an embeddedDashboardExperience instance.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/README.md#_snippet_39\n\nLANGUAGE: JavaScript\nCODE:\n```\nembeddedDashboardExperience.undo();\n```\n\n----------------------------------------\n\nTITLE: Managing Visual Actions Using JavaScript SDK Methods\nDESCRIPTION: This snippet provides examples of how to query existing visual actions, add new actions, and remove existing actions from an embedded QuickSight visual experience using asynchronous JavaScript methods on the visual embedding object. Actions are defined with properties such as Name, CustomActionId, Status, Trigger, and an array of ActionOperations with nested CallbackOperations. This modular approach allows interactive control over user actions within the embedded visual.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/README.md#_snippet_50\n\nLANGUAGE: javascript\nCODE:\n```\n// Get the list of visual actions\nembeddedVisualExperience.getVisualActions();\n\n// Add new actions\nembeddedVisualExperience.addActions([\n    {\n        Name: '<NEW_ACTION_NAME>',\n        CustomActionId: `<NEW_ACTION_ID>`,\n        Status: 'ENABLED',\n        Trigger: 'DATA_POINT_CLICK', // or 'DATA_POINT_MENU'\n        ActionOperations: [{\n            CallbackOperation: {\n                EmbeddingMessage: {}\n            }\n        }]\n    }\n]);\n\n// Remove existing actions\nembeddedVisualExperience.removeActions([\n    {\n        Name: '<EXISTING_ACTION_NAME>',\n        CustomActionId: `<EXISTING_ACTION_ID>`,\n        Status: 'ENABLED',\n        Trigger: 'DATA_POINT_CLICK', // or 'DATA_POINT_MENU'\n        ActionOperations: [{\n            CallbackOperation: {\n                EmbeddingMessage: {}\n            }\n        }]\n    }\n]);\n```\n\n----------------------------------------\n\nTITLE: Overriding Dashboard Theme Configuration using JavaScript\nDESCRIPTION: Overrides the current theme configuration of the dashboard with a custom ThemeConfiguration object, such as color palettes. Dependencies include an embeddedDashboardExperience object. The method returns a promise that resolves to a ResponseMessage indicating the outcome of the override operation.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/README.md#_snippet_35\n\nLANGUAGE: JavaScript\nCODE:\n```\nembeddedDashboardExperience.setThemeOverride({\n    UIColorPalette: {\n        PrimaryForeground: '#FFCCCC',\n        PrimaryBackground: '#555555',\n        //...\n    },\n    // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling Undo/Redo v2.0\nDESCRIPTION: This code disables the undo and redo buttons in version 2.0. The `undoRedo` property is set to `false` within `toolbarOptions` inside `contentOptions`. Note that the logic is reversed compared to version 1.x.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/OPTIONS_DIFFERENCES_V1_TO_V2.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n    const frameOptions = {\n        // ...\n    };\n    const contentOptions = {\n        // ...\n        toolbarOptions: {\n            undoRedo: false\n        }\n    };\n```\n\n----------------------------------------\n\nTITLE: Handling parametersChange events in version 2.0\nDESCRIPTION: Shows how to use the onMessage callback in version 2.0 to detect PARAMETERS_CHANGED events and handle parameter data from messageEvent.message.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/OPTIONS_DIFFERENCES_V1_TO_V2.md#_snippet_33\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst frameOptions = {\n    // ...\n};\nconst contentOptions = {\n    // ...\n    onMessage: (messageEvent) => {\n        switch(messageEvent.eventName) {\n            case 'PARAMETERS_CHANGED': {\n                console.log('Parameters changed', messageEvent.message);\n                // {\n                //     changedParameters: [\n                //         {\n                //             Name: 'usStates',\n                //             Values: ['Arizona', 'Texas']\n                //         }\n                //     ]\n                // }\n                break;\n            }\n        }\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Closing Q Popover in version 1.x\nDESCRIPTION: Closes the Q Popover programmatically using closeQPopover method.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/OPTIONS_DIFFERENCES_V1_TO_V2.md#_snippet_50\n\nLANGUAGE: JavaScript\nCODE:\n```\nembeddedQBarExperience.closeQPopover();\n```\n\n----------------------------------------\n\nTITLE: Defining collapseCallback in version 1.x\nDESCRIPTION: Creates a callback to execute when the Q Search Bar collapses in version 1.x.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/OPTIONS_DIFFERENCES_V1_TO_V2.md#_snippet_46\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst options = {\n    // ...\n    qSearchBarOptions: {\n        collapseCallback: (data) => {\n            console.log('Q search bar collapsed', data);\n        },\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Querying Visual Filter Groups with QuickSight Embedding SDK – JavaScript\nDESCRIPTION: Invokes getFilterGroups on the embeddedVisualExperience object to retrieve all filter groups currently applied to an embedded QuickSight visual. Requires an initialized embeddedVisualExperience. Returns a promise resolving to an array of VisualAction objects representing the filter groups. This operation is read-only and does not modify the visual.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/README.md#_snippet_52\n\nLANGUAGE: javascript\nCODE:\n```\nembeddedVisualExperience.getFilterGroups();\n```\n\n----------------------------------------\n\nTITLE: Configuring qSearchBarOptions topicNameDisabled in version 1.x\nDESCRIPTION: Defines whether the topic name is disabled in the Q Search Bar via the topicNameDisabled flag within qSearchBarOptions.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/OPTIONS_DIFFERENCES_V1_TO_V2.md#_snippet_38\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst options = {\n    // ...\n    qSearchBarOptions: {\n        topicNameDisabled: false\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Q_SEARCH_CLOSED event in version 2.0\nDESCRIPTION: Listens for Q_SEARCH_CLOSED events via onMessage, indicating the search bar was collapsed or closed.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/OPTIONS_DIFFERENCES_V1_TO_V2.md#_snippet_47\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst frameOptions = {\n    // ...\n};\nconst contentOptions = {\n    // ...\n    onMessage: (messageEvent) => {\n        switch(messageEvent.eventName) {\n            case 'Q_SEARCH_CLOSED': {\n                console.log('Q search bar collapsed', messageEvent.message);\n                break;\n            }\n        }\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Applying theme in version 2.0\nDESCRIPTION: Links a theme to the search bar by specifying the theme property in contentOptions.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/OPTIONS_DIFFERENCES_V1_TO_V2.md#_snippet_41\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst frameOptions = {\n    // ...\n};\nconst contentOptions = {\n    // ...\n    theme: '<YOUR_THEME_ID>'\n};\n```\n\n----------------------------------------\n\nTITLE: Navigating to Dashboard v1.x\nDESCRIPTION: This snippet navigates to a specific dashboard in QuickSight Embedding SDK version 1.x. It calls the `navigateToDashboard` method on the `embeddedDashboardExperience` object, providing the new dashboard ID and optional parameters.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/OPTIONS_DIFFERENCES_V1_TO_V2.md#_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n    embeddedDashboardExperience.navigateToDashboard({\n        dashboardId: '<NEW_DASHBOARD_ID>',\n        parameters: [\n            // ...\n        ]\n    });\n```\n\n----------------------------------------\n\nTITLE: Closing Q Popover asynchronously in version 2.0\nDESCRIPTION: Closes the Q Popover using an async method that confirms the action.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/OPTIONS_DIFFERENCES_V1_TO_V2.md#_snippet_51\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst ack = await embeddedQBarExperience.close();\n```\n\n----------------------------------------\n\nTITLE: Updating Parameters Dynamically in Embedded Amazon QuickSight Visual Using JavaScript\nDESCRIPTION: This snippet demonstrates how to update parameters of an embedded QuickSight visual session dynamically using the 'setParameters' method. Parameters are passed as an array of objects, each with 'Name' and 'Values' properties. It supports multi-value parameters and supports resetting parameters to include all values with the special 'ALL_VALUES' string. This method allows embedding applications to programmatically control the visual's displayed content based on user input or other triggers.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/README.md#_snippet_49\n\nLANGUAGE: javascript\nCODE:\n```\nembeddedVisualExperience.setParameters([\n    {\n        Name: 'country',\n        Values: ['United States'],\n    },\n    {\n        Name: 'states',\n        Values: ['California', 'Washington'],\n    }\n]);\n\n// To reset a parameter to all values:\nembeddedVisualExperience.setParameters([\n    {\n        Name: 'states',\n        Values: ['ALL_VALUES'],\n    }\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuration Object for Frame Options in Amazon QuickSight Embedding\nDESCRIPTION: The `frameOptions` object configures the embedding frame in Amazon QuickSight Q&A experience. Properties include URL, container element, dimensions, class name, and event handlers for lifecycle events. Customizing `className` and `z-index` helps control overlay and positioning, especially when using different panel types such as search bars.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/README.md#_snippet_68\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst frameOptions = {\n    url: \"<YOUR_EMBED_URL>\", // URL generated via embedding API\n    container: '#experience-container', // CSS selector for embedding container\n    height: \"700px\", // height of embedded frame\n    width: \"1000px\", // width of embedded frame\n    // Optional: className: 'custom-iframe-class', // for styling position and layering\n    // Optional: withIframePlaceholder: true, // placeholder feature\n    onChange: (changeEvent, metadata) => { // event handler for frame lifecycle events\n        switch (changeEvent.eventName) {\n            case 'FRAME_MOUNTED': {\n                console.log(\"Frame has mounted.\");\n                break;\n            }\n            case 'FRAME_LOADED': {\n                console.log(\"Frame has loaded.\");\n                break;\n            }\n        }\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Retrieving active parameter values in version 1.x\nDESCRIPTION: Demonstrates obtaining current parameter values through a callback function, providing parameter data such as names and values.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/OPTIONS_DIFFERENCES_V1_TO_V2.md#_snippet_36\n\nLANGUAGE: JavaScript\nCODE:\n```\nembeddedDashboardExperience.getActiveParameterValues((data) => {\n    console.log('Parameters:', data);\n    // {\n    //     parameters: [\n    //         {\n    //             name: 'usStates',\n    //             value: ['Arizona', 'Texas']\n    //         },\n    //         {\n    //             name: 'usPartyAffiliations',\n    //             value: ['Democrat', 'Republican']\n    //         }\n    //     ]\n    // }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Sheet ID v1.x\nDESCRIPTION: This snippet demonstrates setting the `sheetId` in the embedded dashboard using version 1.x.  Replace `<YOUR_SHEET_ID>` with the actual sheet ID. This configures the dashboard to display a specific sheet.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/OPTIONS_DIFFERENCES_V1_TO_V2.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n    const options = {\n        // ...\n        sheetId: '<YOUR_SHEET_ID>'\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining expandCallback in version 1.x\nDESCRIPTION: Provides a callback function to handle the expansion event of the Q Search Bar in version 1.x.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/OPTIONS_DIFFERENCES_V1_TO_V2.md#_snippet_44\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst options = {\n    // ...\n    qSearchBarOptions: {\n        expandCallback: (data) => {\n            console.log('Q search bar expanded', data);\n        },\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: createEmbeddingContext Definition\nDESCRIPTION: This TypeScript snippet defines the `CreateEmbeddingContext` type, including `EmbeddingContextFrameOptions`, `EventListener`, and `IEmbeddingContext` types.  `CreateEmbeddingContext` is a function that returns a promise of `EmbeddingContext` type. These types are used in the SDK to manage embedding and event handling.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/README.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport type CreateEmbeddingContext = (frameOptions?: EmbeddingContextFrameOptions) => Promise<EmbeddingContext>\n\nexport type EventListener = (\n        event: EmbeddingEvents,\n        metadata?: ExperienceFrameMetadata\n) => void;\n\nexport type EmbeddingContextFrameOptions = {\n   onChange?: EventListener;\n};\n\nexport type IEmbeddingContext = {\n   embedDashboard: (frameOptions: FrameOptions, contentOptions?: DashboardContentOptions) => Promise<DashboardExperience>;\n   embedVisual: (frameOptions: FrameOptions, contentOptions?: VisualContentOptions) => Promise<VisualExperience>;\n   embedConsole: (frameOptions: FrameOptions, contentOptions?: ConsoleContentOptions) => Promise<ConsoleExperience>;\n   embedQSearchBar: (frameOptions: FrameOptions, contentOptions?: QSearchContentOptions) => Promise<QSearchExperience>;\n   embedGenerativeQnA: (frameOptions: FrameOptions, contentOptions?: GenerativeQnAContentOptions) => Promise<GenerativeQnAContentOptions>;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining the ConsoleExperience Class for Console Embedding – TypeScript\nDESCRIPTION: Declares the ConsoleExperience class, extending BaseExperience and specifying type parameters for advanced embedding content. Includes a send method for posting targeted messages and handling custom event values. Used internally by the SDK and when working with the embedConsole method. Requires importing BaseExperience and related types; acts as part of the QuickSight Embedding SDK infrastructure for console embedding.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/README.md#_snippet_59\n\nLANGUAGE: typescript\nCODE:\n```\nexport class ConsoleExperience extends BaseExperience<ConsoleContentOptions, InternalConsoleExperience, IConsoleExperience, TransformedConsoleContentOptions, ConsoleExperienceFrame> {\n  send: <EMV extends EventMessageValues = EventMessageValues>(messageEvent: TargetedMessageEvent) => Promise<ResponseMessage<EMV>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Sending a Question to Amazon QuickSight Embedded Generative Q&A in JavaScript\nDESCRIPTION: This snippet demonstrates the use of the setQuestion method on the embeddedGenerativeQnExperience object. It sends a specified question string to the embedded experience and immediately triggers a query for the provided question. When using the SEARCH_BAR panel type, this method also causes the search bar to expand automatically. Prerequisites include having an initialized embeddedGenerativeQnExperience instance. The input parameter is a string representing the question, and the method does not return a value.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/README.md#_snippet_70\n\nLANGUAGE: JavaScript\nCODE:\n```\nembeddedGenerativeQnExperience.setQuestion('show me monthly revenue');\n```\n\n----------------------------------------\n\nTITLE: Enabling Iframe Resize on Sheet Change v1.x\nDESCRIPTION: This snippet enables iframe resizing on sheet changes using `iframeResizeOnSheetChange` in version 1.x. Setting this property to `true` ensures the iframe dynamically adjusts its size when the user navigates between sheets.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/OPTIONS_DIFFERENCES_V1_TO_V2.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n    const options = {\n        // ...\n        iframeResizeOnSheetChange: true\n    }\n```\n\n----------------------------------------\n\nTITLE: Handling CONTENT_LOADED event in version 2.0\nDESCRIPTION: Uses onMessage to listen for CONTENT_LOADED events, logging a message when embedded content has finished loading.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/OPTIONS_DIFFERENCES_V1_TO_V2.md#_snippet_35\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst frameOptions = {\n    // ...\n};\nconst contentOptions = {\n    // ...\n    onMessage: (messageEvent) => {\n        switch(messageEvent.eventName) {\n            case 'CONTENT_LOADED': {\n                console.log('Embedded content loaded', messageEvent.message);\n                break;\n            }\n        }\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Enumerations and constants for Error, Info, and Warning Event Names\nDESCRIPTION: Lists the predefined string constants representing various event names categorized by error, info, and warning levels, used for identifying specific change or error states in the SDK's event system.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/README.md#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst ErrorChangeEventName = {\n    NO_FRAME_OPTIONS: 'NO_FRAME_OPTIONS',\n    INVALID_FRAME_OPTIONS: 'INVALID_FRAME_OPTIONS',\n    FRAME_NOT_CREATED: 'FRAME_NOT_CREATED',\n    NO_BODY: 'NO_BODY',\n    NO_CONTAINER: 'NO_CONTAINER',\n    INVALID_CONTAINER: 'INVALID_CONTAINER',\n    NO_URL: 'NO_URL',\n    INVALID_URL: 'INVALID_URL',\n    NO_FRAME_OPTIONS: 'NO_FRAME_OPTIONS',\n    INVALID_FRAME_OPTIONS: 'INVALID_FRAME_OPTIONS'\n};\n\nconst InfoChangeEventName = {\n    FRAME_STARTED: 'FRAME_STARTED',\n    FRAME_MOUNTED: 'FRAME_MOUNTED',\n    FRAME_LOADED: 'FRAME_LOADED',\n    FRAME_REMOVED: 'FRAME_REMOVED'\n};\n\nconst WarnChangeEventName = {\n    UNRECOGNIZED_CONTENT_OPTIONS: 'UNRECOGNIZED_CONTENT_OPTIONS',\n    UNRECOGNIZED_FRAME_OPTIONS: 'UNRECOGNIZED_FRAME_OPTIONS',\n    UNRECOGNIZED_EVENT_TARGET: 'UNRECOGNIZED_EVENT_TARGET'\n};\n```\n\n----------------------------------------\n\nTITLE: Overriding Visual Theme Configuration with QuickSight Embedding SDK – JavaScript\nDESCRIPTION: Calls setThemeOverride to customize the theme configuration of a visual at runtime by providing a ThemeConfiguration object. Allows overriding specific properties such as UIColorPalette for backgrounds and foregrounds. Requires valid ThemeConfiguration structure and an initialized embeddedVisualExperience. Returns a ResponseMessage promise; overrides only remain effective for the current session.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/README.md#_snippet_57\n\nLANGUAGE: javascript\nCODE:\n```\nembeddedVisualExperience.setThemeOverride({\n    UIColorPalette: {\n        PrimaryForeground: '#FFCCCC',\n        PrimaryBackground: '#555555',\n        //...\n    },\n    // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for Event Listeners and Change Events in QuickSight SDK (TypeScript)\nDESCRIPTION: Defines TypeScript types and interfaces used for event handling within the QuickSight embedding SDK, including `EventListener`, `ChangeEvent`, and `ExperienceFrameMetadata`. These types facilitate type-safe callbacks for change events and messaging related to embedded experiences.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/README.md#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type EventListener = (event: EmbeddingEvents, metadata?: ExperienceFrameMetadata) => void;\n\nexport interface ChangeEvent {\n    eventName: EventName,\n    eventLevel: ChangeEventLevel,\n    message?: EventMessageValue,\n    data?: EventData\n}\n\nexport type ExperienceFrameMetadata = {\n    frame: EmbeddingIFrameElement | null;\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Selected Sheet Change v2.0\nDESCRIPTION: This code handles the selected sheet change event in version 2.0. The `onMessage` callback within `contentOptions` listens for the `SELECTED_SHEET_CHANGED` event. The `messageEvent.message` then contains data about the newly selected sheet.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/OPTIONS_DIFFERENCES_V1_TO_V2.md#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n    const frameOptions = {\n        // ...\n    };\n    const contentOptions = {\n        // ...\n        onMessage: (messageEvent) => {\n            switch(messageEvent.eventName) {\n                case 'SELECTED_SHEET_CHANGED': {\n                    console.log('Selected sheet changed', messageEvent.message);\n                    break;\n                }\n            }\n        }\n    };\n```\n\n----------------------------------------\n\nTITLE: Setting Dashboard Height v2.0\nDESCRIPTION: This snippet demonstrates setting the height of the embedded dashboard frame in version 2.0 of the QuickSight Embedding SDK.  The `height` is set to '300px', and `resizeHeightOnSizeChangedEvent` is enabled to dynamically adjust the height based on content changes.  This configuration resides within `frameOptions`.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/OPTIONS_DIFFERENCES_V1_TO_V2.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n    const frameOptions = {\n        // ...\n        height: '300px',\n        resizeHeightOnSizeChangedEvent: true\n    };\n    const contentOptions = {\n        // ...\n    };\n```\n\n----------------------------------------\n\nTITLE: Enabling Print Option v2.0\nDESCRIPTION: This code demonstrates how to enable the export (print) option in version 2.0. The `export` property within `toolbarOptions` inside `contentOptions` is set to `true`. This configuration ensures the print/export functionality is available in the embedded dashboard.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/OPTIONS_DIFFERENCES_V1_TO_V2.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n    const frameOptions = {\n        // ...\n    };\n    const contentOptions = {\n        // ...\n        toolbarOptions: {\n            export: true\n        }\n    };\n```\n\n----------------------------------------\n\nTITLE: Setting Dashboard Height v1.x\nDESCRIPTION: This code snippet shows how to set the height and loadingHeight of a dashboard using the QuickSight Embedding SDK version 1.x. The `height` property is set to 'AutoFit', and the `loadingHeight` is set to '300px'. These settings control the initial dimensions of the embedded dashboard.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/OPTIONS_DIFFERENCES_V1_TO_V2.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n    const options = {\n        // ...\n        height: 'AutoFit',\n        loadingHeight: '300px'\n    }\n```\n\n----------------------------------------\n\nTITLE: Disabling Reset Button v2.0\nDESCRIPTION: This code disables the reset button in the toolbar in version 2.0. The `reset` property within `toolbarOptions` inside `contentOptions` is set to `false`. The boolean logic for hiding the reset button is reversed compared to version 1.x.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/OPTIONS_DIFFERENCES_V1_TO_V2.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n    const frameOptions = {\n        // ...\n    };\n    const contentOptions = {\n        // ...\n        toolbarOptions: {\n            reset: false\n        }\n    };\n```\n\n----------------------------------------\n\nTITLE: Disabling Reset Button v1.x\nDESCRIPTION: This snippet disables the reset button in the embedded dashboard using QuickSight Embedding SDK version 1.x. The `resetDisabled` property is set to `true` within the `options` object. This prevents users from resetting the dashboard to its initial state.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/OPTIONS_DIFFERENCES_V1_TO_V2.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n    const options = {\n        // ...\n        resetDisabled: true\n    }\n```\n\n----------------------------------------\n\nTITLE: Enabling Print Option v1.x\nDESCRIPTION: This snippet enables the print option in the embedded dashboard using QuickSight Embedding SDK version 1.x. The `printEnabled` property is set to `true` within the `options` object. This allows users to print the dashboard.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/OPTIONS_DIFFERENCES_V1_TO_V2.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n    const options = {\n        // ...\n        printEnabled: true\n    }\n```\n\n----------------------------------------\n\nTITLE: Handling Q_SEARCH_OPENED event in version 2.0\nDESCRIPTION: Uses onMessage to listen for Q_SEARCH_OPENED events, indicating the search bar was expanded or opened.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/OPTIONS_DIFFERENCES_V1_TO_V2.md#_snippet_45\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst frameOptions = {\n    // ...\n};\nconst contentOptions = {\n    // ...\n    onMessage: (messageEvent) => {\n        switch(messageEvent.eventName) {\n            case 'Q_SEARCH_OPENED': {\n                console.log('Q search bar expanded', messageEvent.message);\n                break;\n            }\n        }\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Disabling Sheet Tabs v1.x\nDESCRIPTION: This snippet disables sheet tabs in version 1.x by setting `sheetTabsDisabled` to `true`. This prevents the user from navigating between different sheets within the dashboard.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/OPTIONS_DIFFERENCES_V1_TO_V2.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n    const options = {\n        // ...\n        sheetTabsDisabled: true\n    }\n```\n\n----------------------------------------\n\nTITLE: Initiating Print v2.0\nDESCRIPTION: This code initiates the print process in QuickSight Embedding SDK version 2.0. The `initiatePrint` method is called asynchronously and the returned promise acknowledgement is captured in the `ack` variable.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/OPTIONS_DIFFERENCES_V1_TO_V2.md#_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\n    const ack = await embeddedDashboardExperience.initiatePrint();\n```\n\n----------------------------------------\n\nTITLE: Installing QuickSight Embedding SDK\nDESCRIPTION: This snippet demonstrates how to install the Amazon QuickSight Embedding SDK using npm in a Node.js environment. The command installs the package and makes it available for use in your JavaScript code.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install amazon-quicksight-embedding-sdk\n```\n\n----------------------------------------\n\nTITLE: Navigating to Sheet v1.x\nDESCRIPTION: This snippet navigates to a specific sheet in QuickSight Embedding SDK version 1.x. It calls the `navigateToSheet` method on the `embeddedDashboardExperience` object, providing the new sheet ID.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/OPTIONS_DIFFERENCES_V1_TO_V2.md#_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\n    embeddedDashboardExperience.navigateToSheet('<NEW_SHEET_ID>');\n```\n\n----------------------------------------\n\nTITLE: Getting Selected Sheet ID from QuickSight Dashboard\nDESCRIPTION: Retrieves the ID of the currently selected sheet in the embedded QuickSight dashboard. Returns a Promise that resolves to a string representing the sheet ID.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/README.md#_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nconst selectedSheetId: string = await embeddedDashboardExperience.getSelectedSheetId();\n```\n\n----------------------------------------\n\nTITLE: Getting Sheets from QuickSight Dashboard\nDESCRIPTION: Retrieves the current set of sheets from the embedded QuickSight dashboard. Returns a Promise that resolves to an array of Sheet objects.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/README.md#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nconst sheets: Sheet[] = await embeddedDashboardExperience.getSheets();\n```\n\n----------------------------------------\n\nTITLE: Allowing topic selection in version 1.x\nDESCRIPTION: Enables or disables topic selection feature in the search bar via allowTopicSelection flag in qSearchBarOptions.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/OPTIONS_DIFFERENCES_V1_TO_V2.md#_snippet_42\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst options = {\n    // ...\n    qSearchBarOptions: {\n        allowTopicSelection: true\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Initiating Print v1.x\nDESCRIPTION: This snippet initiates the print process in QuickSight Embedding SDK version 1.x. It calls the `initiatePrint` method on the `embeddedDashboardExperience` object.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/OPTIONS_DIFFERENCES_V1_TO_V2.md#_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\n    embeddedDashboardExperience.initiatePrint();\n```\n\n----------------------------------------\n\nTITLE: Setting themeId in version 1.x\nDESCRIPTION: Associates a theme with the search bar using themeId within qSearchBarOptions.\nSOURCE: https://github.com/awslabs/amazon-quicksight-embedding-sdk/blob/master/OPTIONS_DIFFERENCES_V1_TO_V2.md#_snippet_40\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst options = {\n    // ...\n    qSearchBarOptions: {\n        themeId: '<YOUR_THEME_ID>'\n    }\n};\n```"
  }
]