[
  {
    "owner": "s00d",
    "repo": "nuxt-i18n-micro",
    "content": "TITLE: Disabling Define Plugin in Nuxt I18n Micro (Typescript)\nDESCRIPTION: This code snippet demonstrates how to disable the `define` plugin in the Nuxt I18n Micro configuration. Disabling this plugin prevents the use of Nuxt's runtime configuration for overriding settings in translation files. The `define` option is a boolean, and setting it to `false` disables the plugin.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/getting-started.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ndefine: false // Disable the define plugin\n```\n\n----------------------------------------\n\nTITLE: Template Usage with $t in Vue Components\nDESCRIPTION: This Vue component demonstrates how to use the `$t` function in the template to display translations. It showcases how to use global translations, page-specific translations (when the page is under `/dir1`), nested keys, and placeholder usage to insert dynamic values into translations. The script part shows how to access `$t` from `useI18n`.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/using.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <!-- Global translation -->\n    <p>{{ $t('test_key') }}</p>\n    <!-- Displays: Hello World! -->\n\n    <!-- Page-specific translation (if this page is /dir1) -->\n    <p>{{ $t('local_key') }}</p>\n    <!-- Displays: This is a page-specific translation for /dir1. -->\n\n    <!-- Nested global key -->\n    <p>{{ $t('nested.key.deeper') }}</p>\n    <!-- Displays: Nested translation here -->\n\n    <!-- Placeholder usage -->\n    <p>{{ $t('greeting', { name: 'Alice' }) }}</p>\n    <!-- Displays: Hello, Alice! -->\n  </div>\n</template>\n\n<script setup lang=\"ts\">\n// No need to import anything from 'nuxt-i18n-micro'.\n// The plugin automatically provides `useI18n` and `$t`.\nconst { $t } = useI18n()\n\n// You can now use $t in your script, for example:\nconsole.log($t('test_key'))  // \"Hello World!\"\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Nuxt I18n Micro in nuxt.config.ts\nDESCRIPTION: Configure the `nuxt-i18n-micro` module within the `nuxt.config.ts` file. This includes defining locales, setting the default locale, specifying the translation directory, and enabling meta tag generation.  The `i18n` property configures the module with locales, default locale, and translation directory. The `meta` property enables automatic SEO meta tag generation.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/getting-started.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  modules: [\n    'nuxt-i18n-micro',\n  ],\n  i18n: {\n    locales: [\n      { code: 'en', iso: 'en-US', dir: 'ltr' },\n      { code: 'fr', iso: 'fr-FR', dir: 'ltr' },\n      { code: 'ar', iso: 'ar-SA', dir: 'rtl' },\n    ],\n    defaultLocale: 'en',\n    translationDir: 'locales',\n    meta: true,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Switching the Current Locale - Typescript\nDESCRIPTION: This snippet demonstrates how to switch the current locale using the `$switchLocale()` method. It takes the target locale as a parameter and redirects the user to the appropriate localized route.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/api/methods.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n$switchLocale('fr')\n// Output: Redirects the user to the French version of the route\n```\n\n----------------------------------------\n\nTITLE: Nuxt Config After: Nuxt I18n Micro Configuration in TypeScript\nDESCRIPTION: Demonstrates the `Nuxt I18n Micro` configuration in `nuxt.config.ts`. This config declares the `nuxt-i18n-micro` module, specifies locales with `dir` property, sets the default locale, defines the translation directory, and enables SEO meta tag generation.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/migration.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  modules: ['nuxt-i18n-micro'],\n  i18n: {\n    locales: [\n      { code: 'en', iso: 'en-US', dir: 'ltr' },\n      { code: 'fr', iso: 'fr-FR', dir: 'ltr' },\n    ],\n    defaultLocale: 'en',\n    translationDir: 'locales',\n    meta: true,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Translation with Parameters - JavaScript\nDESCRIPTION: Translate a string with dynamic parameters, with a fallback default value. Demonstrates usage of the `$t` method to translate a key with parameters and a default value.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/composables/useI18n.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst { $t } = useI18n()\nconst welcomeMessage = $t('welcome', { name: 'Jane' }, 'Welcome!')\n```\n\n----------------------------------------\n\nTITLE: Defining Global Locale Routes in Nuxt I18n Micro (Typescript)\nDESCRIPTION: This code snippet demonstrates how to define custom localized routes for specific pages using the `globalLocaleRoutes` option in Nuxt I18n Micro. You can specify a custom path for each locale for a given page or disable localization for certain pages entirely. This allows you to customize the URL structure for localized pages beyond the standard locale prefixing.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/getting-started.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  globalLocaleRoutes: {\n    page2: {\n      en: '/custom-page2-en',\n        de: '/custom-page2-de',\n        ru: '/custom-page2-ru'\n    },\n    // Unlocalized page should not be localized\n    unlocalized: false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Nuxt Plugin for Dynamic Translations (TypeScript)\nDESCRIPTION: This code implements a Nuxt plugin to dynamically load and register translations. It uses the `i18n:register` hook to merge translations from JSON files (e.g., `en.json`) into the application's i18n context, allowing for dynamic translation updates without redeployment. The translations are loaded from the `../locales` directory based on the locale.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/api/events.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineNuxtPlugin } from '#app'\n\nexport default defineNuxtPlugin(async (nuxtApp) => {\n  // Function to load translations from JSON files and register them\n  const loadTranslations = async (lang: string) => {\n    try {\n      const translations = await import(`../locales/${lang}.json`)\n      return translations.default\n    } catch (error) {\n      console.error(`Error loading translations for language: ${lang}`, error)\n      return null\n    }\n  }\n\n  // Hook into the 'i18n:register' event to dynamically add translations\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-expect-error\n  nuxtApp.hook('i18n:register', async (register: (translations: unknown, locale?: string) => void, locale: string) => {\n    const translations = await loadTranslations(locale)\n    if (translations) {\n      register(translations, locale)\n    }\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Translate a Key - JavaScript\nDESCRIPTION: Translates a given key into the corresponding localized string using the `$t` method.  It accepts a `key` (string), optional `params` (object) for placeholder replacement, and an optional `defaultValue` (string) if the key is not found. It returns the translated string or the default value.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/composables/useI18n.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { $t } = useI18n()\nconst greeting = $t('hello', { name: 'John' }, 'Hello!')\nconsole.log(greeting) // e.g., 'Hello, John'\n```\n\n----------------------------------------\n\nTITLE: Configuring Nuxt I18n Micro in nuxt.config.ts\nDESCRIPTION: This configuration example demonstrates how to integrate the nuxt-i18n-micro module into your Nuxt application. It defines locales, sets the default locale, specifies the translation directory, and enables meta tag generation. The locales array configures the supported languages, their ISO codes, and text directionality.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  modules: [\n    'nuxt-i18n-micro',\n  ],\n  i18n: {\n    locales: [\n      { code: 'en', iso: 'en-US', dir: 'ltr' },\n      { code: 'fr', iso: 'fr-FR', dir: 'ltr' },\n      { code: 'ar', iso: 'ar-SA', dir: 'rtl' },\n    ],\n    defaultLocale: 'en',\n    translationDir: 'locales',\n    meta: true,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Set I18n Route Params with $setI18nRouteParams (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use `$setI18nRouteParams` to set localized versions of route parameters.  It shows how the parameters of the current route are mapped to other locales, within an `useAsyncData` function, ensuring proper localization of dynamic routes. It depends on `$fetch` to retrieve data from an API endpoint and updates locale-specific slugs within the response.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/api/methods.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n// in pages/news/[id].vue\n// for en/news/1-first-article\nconst { $switchLocaleRoute, $setI18nRouteParams, $defineI18nRoute } = useI18n();\n// OR\nconst { $switchLocaleRoute, $setI18nRouteParams, $defineI18nRoute } = useNuxtApp();\n$defineI18nRoute({\n  localeRoutes: {\n    en: '/news/:id()',\n    fr: '/nouvelles/:id()',\n    de: '/Nachricht/:id()',\n  },\n})\nconst { data: news } = await useAsyncData(`news-${params.id}`, async () => {\n  let response = await $fetch(\"/api/getNews\", {\n    query: {\n      id: params.id,\n    },\n  });\n  if (response?.localeSlugs) {\n    response.localeSlugs = {\n      en: {\n        id: '1-first-article'\n      }\n      fr: {\n        id: '1-premier-article'\n      }\n      de: {\n        id: '1-erster-Artikel'\n      }\n    }\n    $setI18nRouteParams(response?.localeSlugs);\n  }\n  return response;\n});\n$switchLocalePath('fr') // === 'fr/nouvelles/1-premier-article'\n$switchLocalePath('de') // === 'de/Nachricht/1-erster-Artikel'\n```\n\n----------------------------------------\n\nTITLE: Enabling Meta Option for SEO in Nuxt Config (Typescript)\nDESCRIPTION: This code snippet demonstrates how to enable the `meta` option in your `nuxt.config.ts` file to activate automatic SEO management provided by `Nuxt I18n Micro`. The `locales` array defines supported languages with their ISO codes and text direction. `defaultLocale` specifies the primary language, and `translationDir` indicates the directory containing translation files.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/seo.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  modules: ['nuxt-i18n-micro'],\n  i18n: {\n    locales: [\n      { code: 'en', iso: 'en-US', dir: 'ltr' },\n      { code: 'fr', iso: 'fr-FR', dir: 'ltr' },\n      { code: 'ar', iso: 'ar-SA', dir: 'rtl' },\n    ],\n    defaultLocale: 'en',\n    translationDir: 'locales',\n    meta: true, // Enables automatic SEO management\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Translating Content with Custom Locale - Typescript\nDESCRIPTION: This code snippet illustrates how to translate content using a custom locale within an H3 event handler. It defines a `detectLocale` function to extract the locale from the query string and passes it to `useTranslationServerMiddleware`, forcing the use of that locale to translate the 'welcome' key.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/server-side-translations.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineEventHandler } from 'h3'\n\nfunction detectLocale(event): string | null {\n  const urlSearchParams = new URLSearchParams(event.node.req.url?.split('?')[1]);\n  const localeFromQuery = urlSearchParams.get('locale');\n  if (localeFromQuery) return localeFromQuery;\n\n  return 'en';\n}\n\nexport default defineEventHandler(async (event) => {\n  const t = await useTranslationServerMiddleware(event, 'en', detectLocale(event)) // Force French local, en - default locale\n  return {\n    message: t('welcome'), // Returns the French translation for \"welcome\"\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configure Prefix Except Default Strategy - Nuxt I18n - Typescript\nDESCRIPTION: This snippet shows how to configure the `prefix_except_default` strategy in Nuxt I18n.  This strategy adds a locale prefix to all routes except for the default language.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/strategy.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ni18n: {\n  strategy: 'prefix_except_default'\n}\n```\n\n----------------------------------------\n\nTITLE: Example Usage in a Component (Vue)\nDESCRIPTION: This snippet demonstrates how to use various i18n methods within a Vue component's template and script. It shows how to display translated text, switch locales, and generate localized links. It utilizes methods like `$t`, `$getLocale`, `$getLocales`, `$switchLocale`, and `$localeRoute`.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/api/methods.md#_snippet_22\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <p>{{ $t('key2.key2.key2.key2.key2') }}</p>\n    <p>Current Locale: {{ $getLocale() }}</p>\n\n    <div>\n      {{ $t('welcome', { username: 'Alice', unreadCount: 5 }) }}\n    </div>\n    <div>\n      {{ $tc('apples', 10) }}\n    </div>\n\n    <div>\n      <button\n        v-for=\"locale in $getLocales()\"\n        :key=\"locale\"\n        :disabled=\"locale === $getLocale()\"\n        @click=\"() => $switchLocale(locale.code)\"\n      >\n        Switch to {{ locale.code }}\n      </button>\n    </div>\n\n    <div>\n      <NuxtLink :to=\"$localeRoute({ name: 'index' })\">\n        Go to Index\n      </NuxtLink>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { useI18n } from '#imports'\n\nconst { $getLocale, $switchLocale, $getLocales, $localeRoute, $t, $tc } = useI18n()\n</script>\n```\n\n----------------------------------------\n\nTITLE: Get Current Locale - JavaScript\nDESCRIPTION: Retrieves the current locale of the application using the `$getLocale` method of the `useI18n` composable. This function requires no parameters and returns a string representing the current locale (e.g., 'en', 'fr').\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/composables/useI18n.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { $getLocale } = useI18n()\nconst locale = $getLocale()\nconsole.log(locale) // e.g., 'en'\n```\n\n----------------------------------------\n\nTITLE: Switching Locales in Vue Components\nDESCRIPTION: This Vue component demonstrates how to switch the current locale using the `$switchLocale` function from `useI18n()`. Two buttons are used to switch between English ('en') and French ('fr').  The `useI18n` composable and its properties are auto-injected and don't require explicit imports.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/using.md#_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <button @click=\"$switchLocale('en')\">English</button>\n    <button @click=\"$switchLocale('fr')\">Français</button>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\n// The plugin auto-injects these references\nconst { $t, $switchLocale } = useI18n()\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Nuxt I18n Micro in nuxt.config.ts\nDESCRIPTION: This TypeScript snippet configures the `nuxt-i18n-micro` module within the `nuxt.config.ts` file. It defines locales, default locale, translation directory, and enables meta information. The `defineNuxtConfig` function is used to properly type the config object.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/index.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  modules: [\n    'nuxt-i18n-micro',\n  ],\n  i18n: {\n    locales: [\n      { code: 'en', iso: 'en-US', dir: 'ltr' },\n      { code: 'fr', iso: 'fr-FR', dir: 'ltr' },\n      { code: 'ar', iso: 'ar-SA', dir: 'rtl' },\n    ],\n    defaultLocale: 'en',\n    translationDir: 'locales',\n    meta: true,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: JSON translations for Navigation Links\nDESCRIPTION: This JSON file contains the translations for the navigation links used in the `<i18n-link>` example. The keys represent the translation keys, and the values are the translated text.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/examples.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"about\": \"About Us\",\n  \"home\": \"Home\"\n}\n```\n\n----------------------------------------\n\nTITLE: Switching Locales Programmatically with Buttons (Vue)\nDESCRIPTION: This Vue.js component demonstrates how to switch locales programmatically using buttons. It uses the `$getLocale`, `$switchLocale`, and `$getLocales` functions from `nuxt-i18n-micro` to display the current locale and provide buttons for switching to other available locales.  The component also utilizes `$t` for translating the locale names.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/examples.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <p>Current Locale: {{ $getLocale() }}</p>\n    <div>\n      <button\n        v-for=\"locale in $getLocales()\"\n        :key=\"locale.code\"\n        :disabled=\"locale.code === $getLocale()\"\n        @click=\"() => $switchLocale(locale.code)\"\n      >\n        Switch to {{ $t(locale.code) }}\n      </button>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { useNuxtApp } from '#imports'\n\nconst { $getLocale, $switchLocale, $getLocales, $t } = useNuxtApp()\n</script>\n```\n\n----------------------------------------\n\nTITLE: Vue Component with Per-Component Translations\nDESCRIPTION: This example demonstrates how to use $defineI18nRoute within a Vue component to handle translations and custom routing based on the locale.  It uses the `$t` function to access translations. The `localeRoutes` property sets custom paths for Russian and French locales.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/per-component-translations.md#_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <h1>{{ t('greeting') }}</h1>\n    <p>{{ t('farewell') }}</p>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { useNuxtApp } from '#imports'\n\n// Access the $defineI18nRoute function from Nuxt's context\nconst { $defineI18nRoute, $t: t } = useNuxtApp()\n\n// Define i18n route with translations for specific locales\n$defineI18nRoute({\n  locales: {\n    en: { greeting: 'Hello', farewell: 'Goodbye' },\n    fr: { greeting: 'Bonjour', farewell: 'Au revoir' },\n    de: { greeting: 'Hallo', farewell: 'Auf Wiedersehen' },\n    ru: { greeting: 'Привет', farewell: 'До свидания' },\n  },\n  localeRoutes: {\n    ru: '/ru-specific-path', // Custom route path for the Russian locale\n    fr: '/fr-specific-path'  // Custom route path for the French locale\n  }\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Switching Locales - JavaScript\nDESCRIPTION: Switch the application to a different locale. Illustrates the usage of the `$switchLocale` method to change the application's current locale.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/composables/useI18n.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst { $switchLocale } = useI18n()\n$switchLocale('de')\n```\n\n----------------------------------------\n\nTITLE: Getting the Current Locale - Typescript\nDESCRIPTION: This snippet demonstrates how to retrieve the current locale code using the `$getLocale()` method provided by the nuxt-i18n module. The function returns a string representing the locale code.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/api/methods.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst locale = $getLocale()\n// Output: 'en' (assuming the current locale is English)\n```\n\n----------------------------------------\n\nTITLE: Configuring Fallback Locales in Nuxt I18n (Typescript)\nDESCRIPTION: This example demonstrates how to configure fallback locales both globally and on a per-locale basis within Nuxt I18n. The global `fallbackLocale` sets a default fallback for all locales, while the `fallbackLocale` property within a locale's configuration overrides the global setting for that specific locale. If a translation is missing in a specific locale, it first checks the per-locale fallback, and then the global fallback if the former is not defined.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/getting-started.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  i18n: {\n    locales: [\n      { code: 'en', iso: 'en-US', dir: 'ltr' },\n      { code: 'fr', iso: 'fr-FR', dir: 'ltr', fallbackLocale: 'es' }, // custom fallback for 'fr'\n      { code: 'es', iso: 'es-ES', dir: 'ltr' }\n    ],\n    defaultLocale: 'en',\n    fallbackLocale: 'en' // global fallback\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enable Debugging Information\nDESCRIPTION: Enables logging and debugging information during the generation process to help with troubleshooting. Use this setting to troubleshoot issues with your i18n configuration.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/getting-started.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ndebug: true // Enable logging and debugging information\n```\n\n----------------------------------------\n\nTITLE: Localized Navigation with i18n-link (Vue)\nDESCRIPTION: This Vue.js component demonstrates the usage of the `<i18n-link>` component for localized navigation. It uses the `$t` function to translate the link text. Links can be absolute paths or named routes.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/examples.md#_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <i18n-link to=\"/about\">{{ $t('about') }}</i18n-link>\n    <i18n-link :to=\"{ name: 'index' }\">{{ $t('home') }}</i18n-link>\n  </div>\n</template>\n\n<script setup>\n  import { useNuxtApp } from '#imports'\n\n  const { $getLocale, $switchLocale, $getLocales, $t } = useNuxtApp()\n</script>\n```\n\n----------------------------------------\n\nTITLE: Provide Translations for Locales using $defineI18nRoute (TypeScript)\nDESCRIPTION: This snippet illustrates how to provide specific translations for different locales using `$defineI18nRoute`.  It passes an object where each key is a locale code, and the value is an object containing key-value pairs for the translations.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/api/methods.md#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useNuxtApp } from '#imports'\n\nconst { $defineI18nRoute } = useNuxtApp()\n\n$defineI18nRoute({\n  locales: {\n    en: { greeting: 'Hello', farewell: 'Goodbye' },\n    fr: { greeting: 'Bonjour', farewell: 'Au revoir' },\n    de: { greeting: 'Hallo', farewell: { aaa: { bbb: \"Auf Wiedersehen\" } } },\n    ru: {} // Russian locale is allowed but no translations are provided\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Basic `<i18n-link>` Usage in Vue\nDESCRIPTION: Creates a localized link to the `/about` page using the `<i18n-link>` component. The route will be automatically localized based on the current locale setting of the Nuxt I18n Micro module. No additional props or styles are applied in this basic example.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/components/i18n-link.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<i18n-link to=\"/about\">About Us</i18n-link>\n```\n\n----------------------------------------\n\nTITLE: Pluralization with $tc (Vue)\nDESCRIPTION: This Vue component demonstrates pluralization with the `$tc` function. It uses the function to display the correct plural form of 'apples' based on the count (0, 1, and 10).\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/examples.md#_snippet_17\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <!-- Display a pluralized message about the number of apples -->\n    <p>{{ $tc('apples', 0) }}</p>  <!-- Outputs: no apples -->\n    <p>{{ $tc('apples', 1) }}</p>  <!-- Outputs: one apple -->\n    <p>{{ $tc('apples', 10) }}</p> <!-- Outputs: 10 apples -->\n  </div>\n</template>\n\n<script setup>\nimport { useNuxtApp } from '#imports'\n\nconst { $tc } = useNuxtApp()\n</script>\n```\n\n----------------------------------------\n\nTITLE: Basic i18n-t Usage in Vue\nDESCRIPTION: A basic example demonstrating the use of the `<i18n-t>` component with the `keypath` prop to display a translated string. It renders the translation associated with the `feedback.text` key within a `<span>` tag.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/components/i18n-t.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<i18n-t keypath=\"feedback.text\" />\n```\n\n----------------------------------------\n\nTITLE: i18n-t Pluralization Example in Vue\nDESCRIPTION: Illustrates basic pluralization using the `<i18n-t>` component.  The component will select the correct plural form based on the `itemCount` value and the translation string defined in the locale files.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/components/i18n-t.md#_snippet_16\n\nLANGUAGE: vue\nCODE:\n```\n<i18n-t keypath=\"items.count\" :plural=\"itemCount\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering Dynamic Translation Keys (Vue)\nDESCRIPTION: This Vue.js component demonstrates how to render values for dynamic keys stored within your translation files. It iterates over an array of keys defined in the translation file, checks if each key exists using `$has`, and renders its value using `$t` if it exists.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/examples.md#_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <div\n      v-for=\"key in $t('dynamic')\"\n      :key=\"key\"\n    >\n      <p>{{ key }}: <span v-if=\"$has(key)\">{{ $t(key) }}</span></p>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { useNuxtApp } from '#imports'\n\nconst { $t, $has } = useNuxtApp()\n</script>\n```\n\n----------------------------------------\n\nTITLE: i18n-t Component with Interpolation (Vue)\nDESCRIPTION: This Vue.js component demonstrates the usage of the `<i18n-t>` component with interpolation. It passes a `params` object to the component, which replaces placeholders in the translated string.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/examples.md#_snippet_13\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <i18n-t keypath=\"welcome\" :params=\"{ username: 'Alice', unreadCount: 5 }\"></i18n-t>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Text-to-i18n with Context Example\nDESCRIPTION: Executes the `text-to-i18n` command with a specified context, which prefixes the generated translation keys with `auth.`. This helps in organizing translations by feature or section.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/cli.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ni18n-micro text-to-i18n --context auth\n```\n\n----------------------------------------\n\nTITLE: Define I18n Route (TypeScript)\nDESCRIPTION: This example shows how to define the `$defineI18nRoute` function with locales object and localeRoutes. The locales object allows defining the translated messages for each locale, the localeRoutes allows defining the custom route for locales.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/per-component-translations.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n$defineI18nRoute({\n  locales: {\n    en: { greeting: 'Hello', farewell: 'Goodbye' },\n    ru: { greeting: 'Привет', farewell: 'До свидания' },\n    de: { greeting: 'Hallo', farewell: 'Auf Wiedersehen' },\n  },\n  localeRoutes: {\n    ru: '/localesubpage', // Custom route path for the Russian locale\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Translate with Pluralization - JavaScript\nDESCRIPTION: Translates a given key with pluralization support based on the provided count using the `$tc` method. It accepts a `key` (string), a `count` (number) to determine the plural form, and an optional `defaultValue` (string). It returns the translated string with the appropriate pluralization.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/composables/useI18n.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { $tc } = useI18n()\nconst message = $tc('apples', 3, '3 apples')\nconsole.log(message) // e.g., '3 apples'\n```\n\n----------------------------------------\n\nTITLE: Vue Template using Placeholder\nDESCRIPTION: This Vue snippet demonstrates how to use a placeholder in a template with the `$t` function. The `name` parameter is passed in an object to the `$t` function, which replaces the `{name}` placeholder in the `greeting` translation string.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/using.md#_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<p>{{ $t('greeting', { name: 'Alice' }) }}</p>\n<!-- Displays: Hello, Alice! -->\n```\n\n----------------------------------------\n\nTITLE: Fetching a Translation - Typescript\nDESCRIPTION: This snippet demonstrates how to fetch a translation for a given key using the `$t()` method. It optionally interpolates parameters into the translation string.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/api/methods.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst welcomeMessage = $t('welcome', { username: 'Alice', unreadCount: 5 })\n// Output: \"Welcome, Alice! You have 5 unread messages.\"\n```\n\n----------------------------------------\n\nTITLE: i18n-t with Slots for Dynamic Content in Vue\nDESCRIPTION: Shows how to use slots with the `<i18n-t>` component to insert dynamic content into the translation. This example inserts a `<nuxt-link>` component into the `feedback.text` translation.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/components/i18n-t.md#_snippet_15\n\nLANGUAGE: vue\nCODE:\n```\n<i18n-t keypath=\"feedback.text\">\n  <template #link>\n    <nuxt-link :to=\"{ name: 'index' }\">\n      <i18n-t keypath=\"feedback.link\" />\n    </nuxt-link>\n  </template>\n</i18n-t>\n```\n\n----------------------------------------\n\nTITLE: i18n-t Pluralization with Number Prop in Vue\nDESCRIPTION: Demonstrates pluralization with the `<i18n-t>` component, using the `plural` prop to specify a number for pluralization rules. The correct plural form is selected based on the `plural` value.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/components/i18n-t.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<i18n-t keypath=\"items\" :plural=\"10\" />\n```\n\n----------------------------------------\n\nTITLE: Formatting a Number - Typescript\nDESCRIPTION: This snippet demonstrates how to format a number according to the current locale using the `$tn()` method and `Intl.NumberFormat`. It accepts an optional `Intl.NumberFormatOptions` object to customize the formatting.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/api/methods.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst formattedNumber = $tn(1234567.89, { style: 'currency', currency: 'USD' })\n// Output: \"$1,234,567.89\" in the 'en-US' locale\n```\n\n----------------------------------------\n\nTITLE: Enabling No Prefix Redirect in Nuxt I18n Micro (Typescript)\nDESCRIPTION: This code snippet shows how to enable redirects for custom paths when using the 'no prefix' strategy in Nuxt I18n Micro. By setting `noPrefixRedirect` to `true`, routes overridden via localization settings will generate redirects to the respective localized path rather than creating a standard route. This is useful for ensuring that users are always directed to the correct localized version of a page when using custom route configurations.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/getting-started.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  i18n: {\n    locales: [\n      { code: 'en', iso: 'en-US', dir: 'ltr' },\n      { code: 'fr', iso: 'fr-FR', dir: 'ltr' }\n    ],\n    defaultLocale: 'en',\n    // Enable redirects for custom paths in no prefix strategy\n    noPrefixRedirect: true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Text-to-i18n Command Example\nDESCRIPTION: An example of using the `text-to-i18n` command with specific options for translation file and context. This command extracts text, generates keys, and updates the specified translation file.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/cli.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ni18n-micro text-to-i18n --translationFile locales/en.json --context auth\n```\n\n----------------------------------------\n\nTITLE: Formatting Date and Time with $td in Vue\nDESCRIPTION: This snippet shows how to format dates and times using the `$td` function within a Vue component. It demonstrates formatting a date with full options and formatting a date with time only, using `useNuxtApp` to access the `$td` function.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/examples.md#_snippet_20\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <!-- Format a date with full options -->\n    <p>{{ $td(new Date(), { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' }) }}</p> <!-- Outputs: \"Friday, September 1, 2023\" in 'en-US' locale -->\n\n    <!-- Format a date with time -->\n    <p>{{ $td(new Date(), { hour: '2-digit', minute: '2-digit', second: '2-digit' }) }}</p> <!-- Outputs: \"10:15:30 AM\" in 'en-US' locale -->\n  </div>\n</template>\n\n<script setup>\nimport { useNuxtApp } from '#imports'\n\nconst { $td } = useNuxtApp()\n</script>\n```\n\n----------------------------------------\n\nTITLE: Enabling automatic SEO meta tags generation\nDESCRIPTION: Enables automatic generation of SEO-related meta tags, such as alternate language links.  This can improve SEO for multilingual sites.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/getting-started.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nmeta: true // Enable automatic SEO meta tags generation\n```\n\n----------------------------------------\n\nTITLE: Switching Locale Path - Typescript\nDESCRIPTION: This snippet demonstrates how to generate a URL for a different locale using the `$switchLocalePath()` method. It takes the target locale as a parameter and returns a URL string.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/api/methods.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// on /en/news\nconst routeFr = $switchLocalePath('fr')\nwindow.location.href = routeFr\n// Output: url with new locale applied, e.g., '/fr/nouvelles'\n```\n\n----------------------------------------\n\nTITLE: Primary Layer (Global i18n Configuration) - TypeScript\nDESCRIPTION: This TypeScript code snippet defines the primary or global i18n configuration for a Nuxt.js application. It sets up the default locales (English and French), specifies 'en' as the default locale, enables automatic meta tag generation, defines the translation directory as 'locales', and enables automatic language detection based on the user's browser settings.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/layers.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// nuxt.config.ts\nexport default defineNuxtConfig({\n  i18n: {\n    locales: [\n      { code: 'en', iso: 'en-EN', dir: 'ltr' },\n      { code: 'fr', iso: 'fr-FR', dir: 'ltr' },\n    ],\n    defaultLocale: 'en',\n    meta: true,\n    translationDir: 'locales',\n    autoDetectLanguage: true,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: i18n-link with Active Link Styling (Vue)\nDESCRIPTION: This Vue.js component shows how to style an active link using the `activeClass` prop of the `<i18n-link>` component. The `activeClass` is applied when the link is active.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/examples.md#_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <i18n-link to=\"/about\" activeClass=\"current\">About Us</i18n-link>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Generate Localized Route - JavaScript\nDESCRIPTION: Generates a localized route based on the specified route and optionally the specified locale using the `$localeRoute` method. It accepts a `to` (RouteLocationRaw) representing the route and an optional `locale` (string).\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/composables/useI18n.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst { $localeRoute } = useI18n()\nconst route = $localeRoute('/about', 'fr')\n```\n\n----------------------------------------\n\nTITLE: `<i18n-link>` with accessibility enhancements in Vue\nDESCRIPTION: This example highlights the accessibility features of the `<i18n-link>` component, specifically using the `aria-label` attribute. Setting `aria-label` provides a text alternative for screen readers, improving accessibility for users with disabilities. This makes the link more understandable and navigable for all users.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/components/i18n-link.md#_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<i18n-link to=\"/about\" aria-label=\"Learn more about us\">\n  About Us\n</i18n-link>\n```\n\n----------------------------------------\n\nTITLE: Fetching a Translation (String) - Typescript\nDESCRIPTION: This snippet demonstrates how to fetch a translation for a given key using the `$ts()` method, which always returns a string. It optionally interpolates parameters into the translation string.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/api/methods.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst welcomeMessage = $ts('welcome', { username: 'Alice', unreadCount: 5 })\n// Output: \"Welcome, Alice! You have 5 unread messages.\"\n```\n\n----------------------------------------\n\nTITLE: Translating Content in Event Handler - Typescript\nDESCRIPTION: This code snippet demonstrates how to translate content within an H3 event handler using the `useTranslationServerMiddleware` function. It automatically detects the locale from query parameters, cookies, or headers and retrieves the corresponding translation for the 'greeting' key.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/server-side-translations.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineEventHandler } from 'h3'\n\nexport default defineEventHandler(async (event) => {\n  const t = await useTranslationServerMiddleware(event)\n  return {\n    message: t('greeting'), // Returns the translated value for the key \"greeting\"\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Getting All Available Locales - Typescript\nDESCRIPTION: This snippet demonstrates how to retrieve an array of all available locales configured in the module using the `$getLocales()` method. The function returns an array of locale objects with code, iso, and dir properties.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/api/methods.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst locales = $getLocales()\n// Output: [{ code: 'en', iso: 'en-US', dir: 'ltr' }, { code: 'fr', iso: 'fr-FR', dir: 'ltr' }]\n```\n\n----------------------------------------\n\nTITLE: Switch Locale - JavaScript\nDESCRIPTION: Switches the application's locale to the specified locale using the `$switchLocale` method. It accepts a `locale` (string) representing the target locale.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/composables/useI18n.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst { $switchLocale } = useI18n()\n$switchLocale('fr')\n```\n\n----------------------------------------\n\nTITLE: Custom Plural Rule for i18n-t in Vue\nDESCRIPTION: Demonstrates how to use a custom plural rule with the `<i18n-t>` component using the `customPluralRule` prop. This provides fine-grained control over pluralization logic.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/components/i18n-t.md#_snippet_14\n\nLANGUAGE: vue\nCODE:\n```\n<i18n-t\n  keypath=\"items\"\n  :plural=\"itemCount\"\n  :customPluralRule=\"(key, count, params, locale, getTranslation) => {\n    const translation = getTranslation(key, params)\n    if (!translation) {\n      return null\n    }\n    return count === 1 ? 'no items' : `${count} ${translation}`;\n  }\"\n></i18n-t>\n```\n\n----------------------------------------\n\nTITLE: Configure Prefix and Default Strategy - Nuxt I18n - Typescript\nDESCRIPTION: This snippet shows how to configure the `prefix_and_default` strategy in Nuxt I18n. This strategy ensures all languages have a locale prefix in their URLs, but the default language also has a non-prefixed URL version available.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/strategy.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ni18n: {\n  strategy: 'prefix_and_default'\n}\n```\n\n----------------------------------------\n\nTITLE: Using i18n-switcher Component for Locale Selection (Vue)\nDESCRIPTION: This Vue.js component utilizes the `<i18n-switcher>` component from `nuxt-i18n-micro` to provide a dropdown for locale switching.  It uses the `custom-labels` property to customize the labels displayed in the dropdown.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/examples.md#_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <i18n-switcher\n      :custom-labels=\"{ en: 'English', fr: 'Français', de: 'Deutsch' }\"\n    />\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Initializing Nuxt I18n Micro Configuration\nDESCRIPTION: This code snippet demonstrates the basic configuration of the `nuxt-i18n-micro` module within a Nuxt.js application. It defines locales, sets the default locale, specifies the translation directory, and enables meta information.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/examples.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  modules: ['nuxt-i18n-micro'],\n  i18n: {\n    locales: [\n      { code: 'en', iso: 'en-US', dir: 'ltr', disabled: false, displayName: 'English' },\n      { code: 'fr', iso: 'fr-FR', dir: 'ltr', disabled: false, displayName: 'Français' },\n      { code: 'de', iso: 'de-DE', dir: 'ltr', disabled: false, displayName: 'Deutsch' },\n    ],\n    defaultLocale: 'en',\n    translationDir: 'locales',\n    meta: true,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: JSON for Pluralization\nDESCRIPTION: This JSON defines translations for handling pluralization. The translation key specifies multiple forms separated by `|`. The first form is for zero, the second for one, and the third for two or more.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/examples.md#_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"apples\": \"no apples | one apple | {count} apples\"\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Locale Retrieval - JavaScript\nDESCRIPTION: Retrieve the current locale of the application. Demonstrates basic usage of the `$getLocale` method of the `useI18n` composable to obtain the current locale.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/composables/useI18n.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst { $getLocale } = useI18n()\nconst locale = $getLocale()\n```\n\n----------------------------------------\n\nTITLE: Navigation with localeRoutes in Vue\nDESCRIPTION: This Vue template demonstrates how to use `NuxtLink` and `I18nLink` to navigate to different pages within the application using the `$localeRoute` helper. It highlights that string literal navigation won't work for locales other than English when using localized routes. It assumes that the pages have been properly set up in the `pages` directory and named based on their file paths.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/custom-locale-routes.md#_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  /**\n   * Exemple page: /pages/about-us.vue\n   * EN /about-us\n   * ES /sobre-nosotros\n   * FR /a-propos\n   */\n  \n  // Using NuxtLink\n  <NuxtLink :to=\"$localeRoute({ name: 'about-us' })\">\n    Go to About Page\n  </NuxtLink>\n  \n  // Using I18nLink\n  <I18nLink :to=\"{ name: 'about-us' }\">\n    Go to About Page\n  </I18nLink>\n  \n  // The string literal navigation wouldn't work for any locale but english\n  <I18nLink to=\"/about-us\">\n    Go to About Page\n  </I18nLink>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Initializing useLocaleHead with addSeoAttributes option JavaScript\nDESCRIPTION: This code snippet initializes the `useLocaleHead` composable with the `addSeoAttributes` option set to `false`.  This disables the inclusion of SEO-related meta and link tags. By default, it's true to include SEO attributes like `og:locale`, `og:url`, and `hreflang`.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/composables/useLocaleHead.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst head = useLocaleHead({ addSeoAttributes: false })\n```\n\n----------------------------------------\n\nTITLE: Page-Specific Translation File Example (JSON) - About\nDESCRIPTION: This example shows a page-specific translation file for the 'about' page, located at `/locales/pages/about/en.json`. It provides translations specific to the About Us page content, promoting modular and efficient translation management.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/folder-structure.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"title\": \"About Us\",\n  \"description\": \"Learn more about our mission, vision, and values.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Generate Localized Route Object with $localeRoute (TypeScript)\nDESCRIPTION: This snippet shows how to use `$localeRoute` to generate a localized route object. It demonstrates how to create a route object with the current locale applied, useful for creating locale-specific links. The function takes a `RouteLocationRaw` object as input.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/api/methods.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nconst localizedRoute = $localeRoute({ name: 'index' })\n// Output: A route object with the current locale applied, e.g., { name: 'index', params: { locale: 'fr' } }\n```\n\n----------------------------------------\n\nTITLE: `<i18n-link>` with custom `activeStyle` Prop in Vue\nDESCRIPTION: Illustrates customizing the active link styles using the `activeStyle` prop.  It applies both `fontWeight: 'bold'` and `color: '#42b983'` (a green color) to the link when it is active, allowing for fine-grained control over the active link's appearance. The `activeStyle` prop accepts any valid CSS style declarations as an object.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/components/i18n-link.md#_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<i18n-link to=\"/about\" :activeStyle=\"{ fontWeight: 'bold', color: '#42b983' }\">About Us</i18n-link>\n```\n\n----------------------------------------\n\nTITLE: Basic useLocaleHead Usage JavaScript\nDESCRIPTION: This code demonstrates the basic usage of `useLocaleHead` with default options. It initializes the composable and returns the locale-specific head attributes. No specific options are passed, so default configurations will be used.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/composables/useLocaleHead.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst head = useLocaleHead()\n```\n\n----------------------------------------\n\nTITLE: JSON Example of Placeholder Usage\nDESCRIPTION: This JSON snippet demonstrates how to define a translation string with a placeholder. The placeholder `{name}` will be replaced with the value provided when calling `$t` with the appropriate parameters.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/using.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{ \"greeting\": \"Hello, {name}!\" }\n```\n\n----------------------------------------\n\nTITLE: Vue Template After I18n\nDESCRIPTION: Demonstrates the Vue template after running the `text-to-i18n` command. The hardcoded text has been replaced with calls to the `$t` function, referencing i18n keys for each translatable string. The keys are structured to reflect the file and content context.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/news/index.md#_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <h1>{{ $t('pages.home.welcome_to_our_site') }}</h1>\n    <p>{{ $t('pages.home.please_sign_in') }}</p>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Switching Route - Typescript\nDESCRIPTION: This snippet shows how to switch the current route, potentially changing the locale as well, using the `$switchRoute()` method. It accepts either a route path (string) or a route object and an optional locale string as parameters.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/api/methods.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n// Switches to the given path with the current locale\nswitchRoute('/about')\n\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// Switches to the given path with French locale\nswitchRoute('/about', 'fr')\n\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// Switches to a named route with the current locale\nswitchRoute({ name: 'page' })\n\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// Switches to a named route and changes the locale to Spanish\nswitchRoute({ name: 'page' }, 'es')\n```\n\n----------------------------------------\n\nTITLE: Defining Primary i18n Configuration Layer - TypeScript\nDESCRIPTION: This code snippet demonstrates how to define the primary configuration layer in a Nuxt application using `nuxt.config.ts`. It sets up the default localization settings for the entire application, including supported locales, the default locale, the translation directory, meta tag generation, and automatic language detection.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/layers.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  i18n: {\n    locales: [\n      { code: 'en', iso: 'en-EN', dir: 'ltr' },\n      { code: 'fr', iso: 'fr-FR', dir: 'ltr' },\n      { code: 'ar', iso: 'ar-SA', dir: 'rtl' },\n    ],\n    defaultLocale: 'en', // The default locale for the entire app\n    translationDir: 'locales', // Directory where translations are stored\n    meta: true, // Automatically generate SEO-related meta tags like `alternate`\n    autoDetectLanguage: true, // Automatically detect and use the user's preferred language\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Global and Page-Specific Translations\nDESCRIPTION: This code snippet demonstrates the directory structure for organizing global and page-specific translation files. Global translations are stored directly under the `/locales` folder, while page-specific translations reside under `/locales/pages/...`, mirroring the Nuxt pages folder structure. This allows for targeted translations based on the current page.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/using.md#_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nlocales\n├── en.json                      # Global\n├── fr.json                      # Global\n└── pages\n    └── dir1\n        ├── en.json             # Used only in pages under /dir1\n        └── fr.json\n```\n\n----------------------------------------\n\nTITLE: `<i18n-link>` Component handling external links in Vue\nDESCRIPTION: This example showcases how the `<i18n-link>` component handles external links. When the `to` prop is an external URL, the component automatically adds `rel=\"noopener noreferrer\"` to enhance security. This is important to prevent potential security vulnerabilities when linking to external sites.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/components/i18n-link.md#_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<i18n-link to=\"https://example.com\">Visit Example</i18n-link>\n```\n\n----------------------------------------\n\nTITLE: Passing Parameters to i18n-t in Vue\nDESCRIPTION: Demonstrates passing parameters to the `<i18n-t>` component using the `params` prop for dynamic value interpolation. This allows you to insert dynamic values into your translations.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/components/i18n-t.md#_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n<i18n-t keypath=\"user.greeting\" :params=\"{ name: userName }\" />\n```\n\n----------------------------------------\n\nTITLE: Custom Labels Usage in `<i18n-switcher>` Vue\nDESCRIPTION: This snippet demonstrates how to use the `customLabels` prop to display custom labels for locales instead of locale codes in the `<i18n-switcher>` component. It allows you to provide a more user-friendly display of available languages.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/components/i18n-switcher.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<i18n-switcher :customLabels=\"{ en: 'English', fr: 'Français' }\"></i18n-switcher>\n```\n\n----------------------------------------\n\nTITLE: JSON Pluralization Example\nDESCRIPTION: Illustrates the JSON structure for defining pluralization rules. It defines different forms of the translation string based on the count.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/components/i18n-t.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"items\": \"Nothing|You have {count} item|You have {count} items\"\n}\n```\n\n----------------------------------------\n\nTITLE: useLocaleHead within a Vue Component Vue\nDESCRIPTION: This code demonstrates how to use the `useLocaleHead` composable within a Vue component's `<script setup>` section.  It configures the `addDirAttribute`, `identifierAttribute`, and `addSeoAttributes` options, and then uses `useHead` to integrate the composable's output into the component's head.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/composables/useLocaleHead.md#_snippet_8\n\nLANGUAGE: Vue\nCODE:\n```\n<script setup>\nconst head = useLocaleHead({\n  addDirAttribute: true,\n  identifierAttribute: 'id',\n  addSeoAttributes: true,\n})\n\nuseHead(head)\n</script>\n\n<template>\n  <div>\n    \n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configure Prefix Strategy - Nuxt I18n - Typescript\nDESCRIPTION: This snippet demonstrates configuring the `prefix` strategy in Nuxt I18n. With this strategy, every route in the application will include a locale prefix, regardless of the language.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/strategy.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ni18n: {\n  strategy: 'prefix'\n}\n```\n\n----------------------------------------\n\nTITLE: Control Access Based on Locales using $defineI18nRoute (TypeScript)\nDESCRIPTION: This snippet showcases how to control access to a route based on specified locales using `$defineI18nRoute`. By providing an array of allowed locale codes, the route will only be accessible when the current locale is within the specified list.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/api/methods.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useNuxtApp } from '#imports'\n\nconst { $defineI18nRoute } = useNuxtApp()\n\n$defineI18nRoute({\n  locales: ['en', 'fr', 'de'] // Only these locales are allowed for this route\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving the Base Route Name - Typescript\nDESCRIPTION: This snippet demonstrates how to retrieve the base route name without any locale-specific prefixes or suffixes using the `$getRouteName()` method. It accepts an optional route object and locale code as parameters.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/api/methods.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst routeName = $getRouteName(routeObject, 'fr')\n// Output: 'index' (assuming the base route name is 'index')\n```\n\n----------------------------------------\n\nTITLE: Translation files structure\nDESCRIPTION: Illustrates the recommended directory structure for translation files in the `Nuxt I18n Micro` module. Translations are placed under the `locales` directory, separating global translations and page-specific translations within their own subdirectories.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/migration.md#_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n  /locales\n  ├── /pages\n  │   ├── /index\n  │   │   ├── en.json\n  │   │   ├── fr.json\n  │   │   └── ar.json\n  │   ├── /about\n  │   │   ├── en.json\n  │   │   ├── fr.json\n  │   │   └── ar.json\n  ├── en.json\n  ├── fr.json\n  └── ar.json\n```\n\n----------------------------------------\n\nTITLE: Setting HTML Tag for i18n-t in Vue\nDESCRIPTION: Shows how to set the HTML tag for the `<i18n-t>` component using the `tag` prop.  The translated content will be wrapped within the specified HTML tag.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/components/i18n-t.md#_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n<i18n-t keypath=\"feedback.text\" tag=\"div\" />\n```\n\n----------------------------------------\n\nTITLE: Using useI18n Composable (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use the `useI18n` composable to access the i18n methods. It shows two ways to use the composable: directly destructuring the returned object or assigning the returned object to a variable.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/api/methods.md#_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useI18n } from '#imports'\n\nconst { $getLocale, $switchLocale, $getLocales, $localeRoute, $t } = useI18n()\n// or\nconst i18n = useI18n()\n```\n\n----------------------------------------\n\nTITLE: Rendering Dynamic Keys from Object (Vue)\nDESCRIPTION: This Vue.js component demonstrates how to render dynamic keys and values from an object stored in a translation file.  It iterates over the keys and values of the object using `v-for` and renders them in the template.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/examples.md#_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <div v-for=\"(value, key) in $t('dynamicObject')\" :key=\"key\">\n      <p>{{ key }}: {{ value }}</p>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { useNuxtApp } from '#imports'\n\nconst { $t } = useNuxtApp()\n</script>\n```\n\n----------------------------------------\n\nTITLE: JSON Translation File Example for Nuxt I18n Micro\nDESCRIPTION: This JSON snippet presents an example translation file with keys 'example' and 'link_text'.  The 'example' key includes a placeholder '{link}' where a dynamic link will be inserted using the `<i18n-t>` component in the Vue template. The 'link_text' key provides the text for the link.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/faq.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"example\": \"Share your {link} with friends\",\n  \"link_text\": \"translation link\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using localeRoutes in a Vue Component\nDESCRIPTION: This Vue component demonstrates the usage of `$defineI18nRoute` with `localeRoutes` to define a custom route for the Russian locale. It also shows how to use `$localeRoute` to generate navigation links to other pages within the application. It uses `useNuxtApp` to access the i18n functions and assumes the existence of translations defined for the 'greeting' key.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/custom-locale-routes.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <!-- Display greeting message based on the current locale -->\n    <p>{{ $t('greeting') }}</p>\n\n    <!-- Navigation links -->\n    <div>\n      <NuxtLink :to=\"$localeRoute({ name: 'index' })\">\n        Go to Index\n      </NuxtLink>\n      |\n      <NuxtLink :to=\"$localeRoute({ name: 'about' })\">\n        Go to About Page\n      </NuxtLink>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { useNuxtApp } from '#imports'\n\nconst { $getLocale, $switchLocale, $getLocales, $localeRoute, $t, $defineI18nRoute } = useNuxtApp()\n\n// Define translations and custom routes for specific locales\n$defineI18nRoute({\n  localeRoutes: {\n    ru: '/localesubpage', // Custom route path for Russian locale\n  },\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Modular Organization\nDESCRIPTION: Shows how to group related translations together under meaningful prefixes, enabling modular organization of translations. It demonstrates usage of prefixes for payment and shipping checkout sections.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/components/i18n-group.md#_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<i18n-group prefix=\"checkout.payment\">\n<i18n-group prefix=\"checkout.shipping\">\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook with Nuxt and i18n (.storybook/main.ts)\nDESCRIPTION: This snippet configures Storybook to work with Nuxt and nuxt-i18n. It includes custom functions for merging translation files and setting up static directories.  It reads translation files from the 'locales' directory, merges them, and makes them available to Storybook.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/storybook.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { StorybookConfig } from '@storybook-vue/nuxt'\nimport fs from 'node:fs'\nimport path from 'node:path'\n\ntype TranslationValue = string | number | boolean | TranslationStructure | unknown | null\ninterface TranslationStructure {\n  [key: string]: TranslationValue\n}\n\nconst localesRoot = 'locales'\n\nfunction mergeAllTranslations(target: TranslationStructure, ...sources: TranslationStructure[]): TranslationStructure {\n  return sources.reduce((acc, source) => {\n    for (const [key, value] of Object.entries(source)) {\n      acc[key] = value\n    }\n    return acc\n  }, target)\n}\n\nconst getLocales = (): string[] => {\n  const localesDir = path.join(__dirname, '../', localesRoot)\n  try {\n    return fs.readdirSync(localesDir)\n      .filter(file => file.endsWith('.json'))\n      .map(file => path.basename(file, '.json'))\n  }\n  catch (error) {\n    console.error('Error reading locales directory:', error)\n    return []\n  }\n}\n\nconst mergeTranslations = () => {\n  const localesDir = path.join(__dirname, '../', localesRoot)\n  const outputDir = path.join(__dirname, '../storybook_locales/_locales/general')\n  const locales = getLocales()\n\n  const collectAllTranslations = (dir: string, lang: string): TranslationStructure => {\n    let translations: TranslationStructure = {}\n    const entries = fs.readdirSync(dir, { withFileTypes: true })\n\n    for (const entry of entries) {\n      const entryPath = path.join(dir, entry.name)\n      if (entry.isDirectory()) {\n        translations = mergeAllTranslations(translations, collectAllTranslations(entryPath, lang))\n      }\n      else if (entry.isFile() && entry.name === `${lang}.json`) {\n        const content = JSON.parse(fs.readFileSync(entryPath, 'utf-8'))\n        translations = mergeAllTranslations(translations, content)\n      }\n    }\n    return translations\n  }\n\n  locales.forEach((lang) => {\n    // 1. Собираем все страничные переводы\n    let merged = collectAllTranslations(path.join(localesDir, 'pages'), lang)\n\n    // 2. Добавляем общие переводы с приоритетом\n    const generalFilePath = path.join(localesDir, `${lang}.json`)\n    if (fs.existsSync(generalFilePath)) {\n      const generalContent = JSON.parse(fs.readFileSync(generalFilePath, 'utf-8'))\n      merged = mergeAllTranslations(merged, generalContent)\n    }\n\n    // 3. Сохраняем результат\n    const outputPath = path.join(outputDir, `${lang}/data.json`)\n    fs.mkdirSync(path.dirname(outputPath), { recursive: true })\n    fs.writeFileSync(outputPath, JSON.stringify(merged, null, 2))\n  })\n}\n\nmergeTranslations()\n\nconst config: StorybookConfig = {\n  stories: [\n    '../components/**/*.mdx',\n    '../components/**/*.stories.@(js|jsx|ts|tsx|mdx)',\n  ],\n  staticDirs: ['../storybook_locales'],\n  addons: [\n    '@storybook/addon-essentials',\n    '@chromatic-com/storybook',\n    '@storybook/addon-interactions',\n  ],\n  framework: {\n    name: '@storybook-vue/nuxt',\n    options: {},\n  }\n}\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Configure No Prefix Strategy - Nuxt I18n - Typescript\nDESCRIPTION: This snippet shows how to configure the `no_prefix` strategy in Nuxt I18n. This strategy prevents any locale prefix from being added to the routes and relies on browser settings or cookies to detect the locale.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/strategy.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ni18n: {\n  strategy: 'no_prefix'\n}\n```\n\n----------------------------------------\n\nTITLE: Extract Command Example\nDESCRIPTION: An example of using the `extract` command. This command extracts translation keys from the codebase and organizes them by scope.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/cli.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ni18n-micro extract\n```\n\n----------------------------------------\n\nTITLE: Custom Wrapper Style in `<i18n-switcher>` Vue\nDESCRIPTION: This code snippet shows how to customize the wrapper `<div>` style of the `<i18n-switcher>` component using the `customWrapperStyle` prop. This allows control over the container's appearance, affecting background color and padding.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/components/i18n-switcher.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<i18n-switcher :customWrapperStyle=\"{ backgroundColor: '#f8f9fa', padding: '10px' }\"></i18n-switcher>\n```\n\n----------------------------------------\n\nTITLE: Custom i18n Detection Plugin (TS)\nDESCRIPTION: This TypeScript code creates a Nuxt plugin for custom locale detection. It retrieves the 'x-country' and 'accept-language' headers from the request, determines the user's preferred locale based on these headers, stores the locale in a cookie, and redirects the user to the appropriate localized route if necessary. The plugin utilizes Nuxt composables such as `useRequestHeaders`, `useCookie`, `useRouter`, and `navigateTo`.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/custom-auto-detect.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineNuxtPlugin, useCookie, useRequestHeaders, useRouter, useRoute, navigateTo, useNuxtApp } from '#imports'\n\nexport default defineNuxtPlugin(async (_nuxtApp) => {\n  // Access runtime headers\n  const headers = useRequestHeaders()\n  const route = useRoute()\n  const router = useRouter()\n\n  // If you have a method or variable in NuxtApp providing the default locale:\n  const { $defaultLocale } = useNuxtApp()\n  // Otherwise, fall back to 'en'\n  const defaultLocale = $defaultLocale?.() || 'en'\n\n  // Retrieve country from the 'x-country' header and language from 'accept-language'\n  const country = headers['x-country']?.toLowerCase() || ''\n  const acceptLanguage = headers['accept-language']?.toLowerCase() || ''\n\n  // Locale determination logic:\n  // (a) If country = 'de' or 'ru', use that\n  // (b) Otherwise, check acceptLanguage\n  // (c) Otherwise, fallback to defaultLocale\n  let finalLocale: string\n\n  if (country === 'de') {\n    finalLocale = 'de'\n  } else if (country === 'ru') {\n    finalLocale = 'ru'\n  } else if (acceptLanguage.startsWith('de')) {\n    finalLocale = 'de'\n  } else if (acceptLanguage.startsWith('ru')) {\n    finalLocale = 'ru'\n  } else {\n    finalLocale = defaultLocale\n  }\n\n  // Check if the user-locale cookie is already set\n  const userLocaleCookie = useCookie('user-locale-change')\n\n  // If the cookie does not exist, store the new locale\n  if (!userLocaleCookie.value) {\n    userLocaleCookie.value = finalLocale\n  }\n\n  // Compare the current route's locale to the final locale\n  const currentLocale = route.params.locale ?? defaultLocale\n  if (currentLocale !== finalLocale) {\n    const currentRouteName = route.name as string\n    if (currentRouteName) {\n      // Remove 'localized-' if it exists\n      const routeName = currentRouteName.replace(/^localized-/, '')\n      const newParams = { ...route.params }\n      delete newParams.locale\n\n      // If finalLocale differs from default, prepend 'localized-'\n      let newRouteName = routeName\n      if (finalLocale !== defaultLocale) {\n        newRouteName = `localized-${routeName}`\n        newParams.locale = finalLocale\n      }\n\n      // Resolve and redirect\n      const newRoute = router.resolve({ name: newRouteName, params: newParams })\n      await navigateTo(newRoute.href, { redirectCode: 302, external: true })\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Route Names in Nuxt I18n Micro (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to manually define a route name for a page in a Vue file using `definePageMeta`. This is necessary when the router doesn't automatically assign a name to a route, especially in subfolders. Doing so ensures the route is properly registered.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/faq.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndefinePageMeta({ name: 'pageName' })\n```\n\n----------------------------------------\n\nTITLE: Diff Command Example\nDESCRIPTION: An example of using the `diff` command.  This compares translation files across locales within a directory and identifies missing keys.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/cli.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ni18n-micro diff\n```\n\n----------------------------------------\n\nTITLE: Custom Disabled Link Style in `<i18n-switcher>` Vue\nDESCRIPTION: This example demonstrates how to style the disabled link (current locale) in the `<i18n-switcher>` component using `customDisabledLinkStyle` prop. This prevents the user from selecting the current language.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/components/i18n-switcher.md#_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<i18n-switcher :customDisabledLinkStyle=\"{ color: 'gray', cursor: 'not-allowed' }\"></i18n-switcher>\n```\n\n----------------------------------------\n\nTITLE: Load Translation from Cache (Server Route) - TypeScript\nDESCRIPTION: This server route loads translation data from the cache. It uses `h3` for defining the event handler and `useStorage` from `#imports` to access the storage layer. It reads the cache key from the request body and returns the corresponding data.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/api/i18n-cache-api.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// server/api/i18n/load-cache.[post].ts\nimport { defineEventHandler, readBody } from 'h3'\nimport { useStorage } from '#imports'\n\nexport default defineEventHandler(async (event) => {\n  const { key } = await readBody<{ key: string }>(event)\n  const storage = useStorage('assets:server')\n\n  const data = await storage.getItem(key)\n  return {\n    from: 'cache',\n    key,\n    data\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Example with Nested Sections (Vue)\nDESCRIPTION: This Vue.js component demonstrates a comprehensive example with nested sections using `nuxt-i18n-micro` for translation. It showcases multiple translation uses within a single page, including headers, navigation links, section content, and footer information.  Locale switching is also included.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/examples.md#_snippet_15\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <h1>{{ $t('mainHeader') }}</h1>\n\n    <nav>\n      <ul>\n        <li><a href=\"#\">{{ $t('nav.home') }}</a></li>\n        <li><a href=\"#\">{{ $t('nav.about') }}</a></li>\n        <li><a href=\"#\">{{ $t('nav.services') }}</a></li>\n        <li><a href=\"#\">{{ $t('nav.contact') }}</a></li>\n      </ul>\n    </nav>\n\n    <section>\n      <h2>{{ $t('section1.header') }}</h2>\n      <p>{{ $t('section1.intro') }}</p>\n\n      <div>\n        <h3>{{ $t('section1.subsection1.header') }}</h3>\n        <p>{{ $t('section1.subsection1.content') }}</p>\n      </div>\n\n      <div>\n        <h3>{{ $t('section1.subsection2.header') }}</h3>\n        <ul>\n          <li>{{ $t('section1.subsection2.item1') }}</li>\n          <li>{{ $t('section1.subsection2.item2') }}</li>\n          <li>{{ $t('section1.subsection2.item3') }}</li>\n        </ul>\n      </div>\n    </section>\n\n    <footer>\n      <h4>{{ $t('footer.contact.header') }}</h4>\n      <address>\n        {{ $t('footer.contact.address') }}<br>\n        {{ $t('footer.contact.city') }}<br>\n        {{ $t('footer.contact.phone') }}\n      </address>\n    </footer>\n\n    <div>\n      <button\n        v-for=\"locale in $getLocales()\"\n        :key=\"locale.code\"\n        :disabled=\"locale.code === $getLocale()\"\n        @click=\"() => $switchLocale(locale.code)\"\n      >\n        Switch to {{ locale.code }}\n      </button>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { useNuxtApp } from '#imports'\n\nconst { $getLocale, $switchLocale, $getLocales, $t } = useNuxtApp()\n</script>\n```\n\n----------------------------------------\n\nTITLE: Customizing Translation Directory (TypeScript)\nDESCRIPTION: This TypeScript example demonstrates how to customize the default translation directory from `/locales` to `/i18n` in the `nuxt.config.ts` file. This allows developers to organize translation files in a location that best fits their project structure.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/folder-structure.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  i18n: {\n    translationDir: 'i18n' // Custom directory path\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Translation File with Nested Stats in JSON\nDESCRIPTION: Illustrates a JSON translation file with nested statistics objects, enabling grouped translations for user profile statistics.  It showcases the structure needed to define statistics such as followers and following within a user profile.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/components/i18n-group.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"user\": {\n    \"profile\": {\n      \"title\": \"User Profile\",\n      \"bio\": \"User biography goes here\",\n      \"stats\": {\n        \"followers\": \"Followers: {count}\",\n        \"following\": \"Following: {count}\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Global Translation File Example (JSON)\nDESCRIPTION: This example shows the structure of a global translation file in JSON format, containing translations for elements shared across the application, such as menu items and footer text. It resides in `/locales/en.json`.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/folder-structure.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"menu\": {\n    \"home\": \"Home\",\n    \"about\": \"About Us\",\n    \"contact\": \"Contact\"\n  },\n  \"footer\": {\n    \"copyright\": \"© 2024 Your Company\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Vue Template with Dynamic i18n Links in Nuxt I18n Micro\nDESCRIPTION: This Vue template shows how to utilize `<i18n-t>` to insert a `nuxt-link` within a translated text. The 'example' translation includes a '{link}' placeholder, which is replaced by a `nuxt-link` component. This allows dynamic links to be embedded within translations.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/faq.md#_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <i18n-t keypath=\"example\">\n    <template #link>\n      <nuxt-link :to=\"{ name: 'referral' }\">\n        <i18n-t keypath=\"link_text\" />\n      </nuxt-link>\n    </template>\n  </i18n-t>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Vue Template Before I18n\nDESCRIPTION: Illustrates a Vue template before applying the `text-to-i18n` command.  The template contains hardcoded English text that needs to be internationalized using i18n keys. The goal is to replace the plain text with calls to the `$t` function.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/news/index.md#_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <h1>Welcome to our site</h1>\n    <p>Please sign in to continue</p>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Reusable Components\nDESCRIPTION: Demonstrates creating reusable components with their own translation groups, emphasizing component-level translation management.  It shows `UserProfile.vue` and `UserSettings.vue` components with user-specific translation prefixes.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/components/i18n-group.md#_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n<!-- UserProfile.vue -->\n<i18n-group prefix=\"user.profile\">\n\n<!-- UserSettings.vue -->\n<i18n-group prefix=\"user.settings\">\n```\n\n----------------------------------------\n\nTITLE: Get Available Locales - JavaScript\nDESCRIPTION: Retrieves an array of all available locales configured in the application, using the `$getLocales` method of the `useI18n` composable. This function requires no parameters and returns an array of locale objects (e.g., `{ code: 'en', iso: 'en-US' }`).\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/composables/useI18n.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { $getLocales } = useI18n()\nconst locales = $getLocales()\nconsole.log(locales) // e.g., [{ code: 'en', iso: 'en-US' }, { code: 'fr', iso: 'fr-FR' }]\n```\n\n----------------------------------------\n\nTITLE: Using runWithContext for i18n Composables in Nuxt Plugins (JavaScript)\nDESCRIPTION: This JavaScript snippet illustrates how to use `runWithContext` to call i18n composables, such as `$t`, within Nuxt plugins or after asynchronous operations. This ensures that the necessary Nuxt instance context is preserved, preventing runtime errors when accessing i18n functionalities outside of Vue setup functions or Nuxt hooks.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/faq.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nawait nuxtApp.runWithContext(() => $t('test_key'))\n```\n\n----------------------------------------\n\nTITLE: Import Command Example\nDESCRIPTION: An example of using the `import` command with a custom `potsDir`. This command converts PO files back to JSON format and saves them in the translation directory.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/cli.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ni18n-micro import --potsDir pots\n```\n\n----------------------------------------\n\nTITLE: `<i18n-switcher>` with `before-button` Slot in Vue\nDESCRIPTION: This code snippet shows how to use the `before-button` slot to insert content immediately before the language switcher button within the `<i18n-switcher>` component. This allows adding custom elements or information before the button.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/components/i18n-switcher.md#_snippet_11\n\nLANGUAGE: vue\nCODE:\n```\n<i18n-switcher>\n  <template #before-button>\n    <span>🌐</span>\n  </template>\n</i18n-switcher>\n```\n\n----------------------------------------\n\nTITLE: Nuxt Config Before: nuxt-i18n Configuration in TypeScript\nDESCRIPTION: Shows the `nuxt-i18n` configuration in `nuxt.config.ts`. This snippet declares the `nuxt-i18n` module, defines locales, default locale, and specifies the Vue I18n configuration file. This config needs to be replaced with the Nuxt I18n Micro configuration.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/migration.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  modules: ['nuxt-i18n'],\n  i18n: {\n    locales: [\n      { code: 'en', iso: 'en-US' },\n      { code: 'fr', iso: 'fr-FR' },\n    ],\n    defaultLocale: 'en',\n    vueI18n: './i18n.config.js',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Update Translations (Server Route) - TypeScript\nDESCRIPTION: This server route updates translation data in both the file system and the cache. It uses `h3`, `node:fs/promises`, and `#imports`. It reads the file path and updates from the request body, merges the updates with existing data using `deepMerge`, writes the merged data back to the file, and updates the cache. A deep merge function is defined within the endpoint's scope.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/api/i18n-cache-api.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// server/api/i18n/update.[post].ts\nimport { defineEventHandler, readBody, createError } from 'h3'\nimport { join } from 'node:path'\nimport { readFile, writeFile } from 'node:fs/promises'\nimport { useStorage } from '#imports'\n\nfunction deepMerge(target: any, source: any): any {\n  for (const key in source) {\n    if (key === '__proto__' || key === 'constructor') continue\n    if (Array.isArray(source[key])) {\n      target[key] = source[key]\n    } else if (typeof source[key] === 'object' && source[key]) {\n      target[key] = deepMerge(target[key] || {}, source[key])\n    } else {\n      target[key] = source[key]\n    }\n  }\n  return target\n}\n\nexport default defineEventHandler(async (event) => {\n  const { path, updates } = await readBody<{ path: string, updates: Record<string, any> }>(event)\n\n  if (!path || !updates) {\n    throw createError({ statusCode: 400, statusMessage: 'Missing path or updates' })\n  }\n\n  const fullPath = join('locales', path)\n  let existing = {}\n\n  try {\n    const content = await readFile(fullPath, 'utf-8')\n    existing = JSON.parse(content)\n  } catch {\n    // File does not exist — create new\n  }\n\n  const merged = deepMerge(existing, updates)\n\n  await writeFile(fullPath, JSON.stringify(merged, null, 2), 'utf-8')\n\n  const serverStorage = useStorage('assets:server')\n  await serverStorage.setItem(join('_locales', path), merged)\n\n  return {\n    success: true,\n    path,\n    updated: merged\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Building the Module with PNPM\nDESCRIPTION: This command prepares the module by building the necessary files and ensuring everything is ready for packaging, useful before publishing or creating a pull request.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/contribution.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpm run prepack\n```\n\n----------------------------------------\n\nTITLE: Custom Dropdown Style in `<i18n-switcher>` Vue\nDESCRIPTION: This snippet illustrates how to customize the dropdown ( `<ul>` element) style of the `<i18n-switcher>` component using the `customDropdownStyle` prop. This allows customization of the dropdown's border and shadow.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/components/i18n-switcher.md#_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<i18n-switcher :customDropdownStyle=\"{ border: '1px solid #007bff', boxShadow: '0 2px 8px rgba(0, 0, 0, 0.1)' }\"></i18n-switcher>\n```\n\n----------------------------------------\n\nTITLE: JSON Translations for Nested Sections\nDESCRIPTION: This JSON file provides translations for a complex page structure, including main header, navigation, section headers and content, and footer information.  It demonstrates nested translation keys for organizing the content.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/examples.md#_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mainHeader\": \"Welcome to Our Services\",\n  \"nav\": {\n    \"home\": \"Home\",\n    \"about\": \"About Us\",\n    \"services\": \"Services\",\n    \"contact\": \"Contact\"\n  },\n  \"section1\": {\n    \"header\": \"Our Expertise\",\n    \"intro\": \"We provide a wide range of services to meet your needs.\",\n    \"subsection1\": {\n      \"header\": \"Consulting\",\n      \"content\": \"Our team offers expert consulting services in various domains.\"\n    },\n    \"subsection2\": {\n      \"header\": \"Development\",\n      \"item1\": \"Web Development\",\n      \"item2\": \"Mobile Apps\",\n      \"item3\": \"Custom Software\"\n    }\n  },\n  \"footer\": {\n    \"contact\": {\n      \"header\": \"Contact Us\",\n      \"address\": \"123 Main Street\",\n      \"city\": \"Anytown, USA\",\n      \"phone\": \"+1 (555) 123-4567\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Validate Command Example\nDESCRIPTION: An example of using the `validate` command. This command validates translation files for missing or extra keys compared to the reference locale.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/cli.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ni18n-micro validate\n```\n\n----------------------------------------\n\nTITLE: Performing Type Checking with PNPM\nDESCRIPTION: These commands check the TypeScript type definitions to ensure there are no type errors, helping maintain code quality and prevent runtime errors.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/contribution.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npnpm run typecheck\npnpm run test:types\npnpm run test\n```\n\n----------------------------------------\n\nTITLE: `<i18n-switcher>` with `after-dropdown` Slot in Vue\nDESCRIPTION: This code snippet shows how to use the `after-dropdown` slot to insert content immediately after the dropdown menu in the `<i18n-switcher>` component. Common usages are for adding a footer or additional information.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/components/i18n-switcher.md#_snippet_15\n\nLANGUAGE: vue\nCODE:\n```\n<i18n-switcher>\n  <template #after-dropdown>\n    <li class=\"dropdown-footer\">Powered by Nuxt</li>\n  </template>\n</i18n-switcher>\n```\n\n----------------------------------------\n\nTITLE: Providing Translations for Locales (TypeScript)\nDESCRIPTION: This snippet showcases how to provide specific translations for different locales using the $defineI18nRoute function. Each locale is associated with an object containing the translations for that language. This ensures that users see content in their preferred language. Russian locale is allowed, but no translations are provided.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/per-component-translations.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useNuxtApp } from '#imports'\n\nconst { $defineI18nRoute } = useNuxtApp()\n\n$defineI18nRoute({\n  locales: {\n    en: { greeting: 'Hello', farewell: 'Goodbye' },\n    fr: { greeting: 'Bonjour', farewell: 'Au revoir' },\n    de: { greeting: 'Hallo', farewell: { aaa: { bbb: \"Auf Wiedersehen\" } } },\n    ru: {} // Russian locale is allowed but no translations are provided\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Clear Translation Cache (Client-side) - Vue\nDESCRIPTION: This Vue component clears the in-memory translation cache. It imports `useNuxtApp` from `#imports` and calls the `$clearCache` method to reset the cache when the component is mounted.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/api/i18n-cache-api.md#_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div class=\"container\">\n    <p>Clearing translation cache...</p>\n  </div>\n</template>\n\n<script setup>\nimport { useNuxtApp } from '#imports'\n\nconst { $clearCache } = useNuxtApp()\n\n$clearCache()\n</script>\n```\n\n----------------------------------------\n\nTITLE: Running the Development Server with PNPM\nDESCRIPTION: This command starts the Nuxt development server using the `playground` directory as the testing environment, allowing you to view and test changes in the app.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/contribution.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: `<i18n-switcher>` with `before-item` Slot in Vue\nDESCRIPTION: This example demonstrates using the `before-item` slot to insert content before each locale item in the `<i18n-switcher>` component. The slot receives the `locale` object as a prop and is useful for adding flags or icons before each language option.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/components/i18n-switcher.md#_snippet_18\n\nLANGUAGE: vue\nCODE:\n```\n<i18n-switcher>\n  <template #before-item=\"{ locale }\">\n    <i :class=\"`flag-${locale.code}`\"></i>\n  </template>\n</i18n-switcher>\n```\n\n----------------------------------------\n\nTITLE: `<i18n-link>` with slotted content in Vue\nDESCRIPTION: Demonstrates the use of slots within the `<i18n-link>` component to add custom content inside the link. This allows for greater flexibility in terms of what is rendered within the link, such as additional elements or more complex layouts. Any content placed between the opening and closing tags of the `<i18n-link>` will be rendered within the link.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/components/i18n-link.md#_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<i18n-link to=\"/about\">\n  <span>About Us</span>\n</i18n-link>\n```\n\n----------------------------------------\n\nTITLE: Basic I18n Group Usage in Vue\nDESCRIPTION: Illustrates a basic example of using the `<i18n-group>` component with a `prefix` prop to translate text elements within a Vue template. The `t` function automatically prepends the `prefix` to the translation keys.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/components/i18n-group.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <i18n-group prefix=\"product.details\">\n    <template #default=\"{ t }\">\n      <h1>{{ t('title') }}</h1>\n      <p>{{ t('description') }}</p>\n      <div class=\"price\">{{ t('price', { value: 99.99 }) }}</div>\n    </template>\n  </i18n-group>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Incorrect LocaleRoute Usage - Nuxt I18n - Typescript\nDESCRIPTION: This snippet showcases the problematic usage of `localeRoute` with path-based routing. It may lead to route resolution issues and unnecessary redirects.  It's recommended to use named routes instead.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/strategy.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nlocaleRoute('/page') // May cause issues with route resolution\n```\n\n----------------------------------------\n\nTITLE: `<i18n-switcher>` with `after-item` Slot in Vue\nDESCRIPTION: This snippet shows how to use the `after-item` slot to insert content after each locale item within the `<i18n-switcher>` component. This slot receives the locale as a prop and can be used to display the locale code or additional information.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/components/i18n-switcher.md#_snippet_19\n\nLANGUAGE: vue\nCODE:\n```\n<i18n-switcher>\n  <template #after-item=\"{ locale }\">\n    <span>{{ locale.code }}</span>\n  </template>\n</i18n-switcher>\n```\n\n----------------------------------------\n\nTITLE: Formatting a Date - Typescript\nDESCRIPTION: This snippet demonstrates how to format a date according to the current locale using the `$td()` method and `Intl.DateTimeFormat`. It accepts an optional `Intl.DateTimeFormatOptions` object to customize the formatting.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/api/methods.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst formattedDate = $td(new Date(), { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' })\n// Output: \"Friday, September 1, 2023\" in the 'en-US' locale\n```\n\n----------------------------------------\n\nTITLE: Formatting Number with $tn in Vue\nDESCRIPTION: This snippet demonstrates how to format numbers using the `$tn` function in a Vue component. It formats a number as currency and as a percentage with custom options. It uses `useNuxtApp` to access the `$tn` function.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/examples.md#_snippet_19\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <!-- Format a number as currency -->\n    <p>{{ $tn(1234567.89, { style: 'currency', currency: 'USD' }) }}</p> <!-- Outputs: $1,234,567.89 in 'en-US' locale -->\n\n    <!-- Format a number with custom options -->\n    <p>{{ $tn(0.567, { style: 'percent', minimumFractionDigits: 1 }) }}</p> <!-- Outputs: 56.7% in 'en-US' locale -->\n  </div>\n</template>\n\n<script setup>\nimport { useNuxtApp } from '#imports'\n\nconst { $tn } = useNuxtApp()\n</script>\n```\n\n----------------------------------------\n\nTITLE: i18n-t with Advanced Slot Usage in Vue\nDESCRIPTION: Demonstrates using slots to customize how the translation content is rendered.  In this example, the entire translation is wrapped in a `<strong>` tag.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/components/i18n-t.md#_snippet_19\n\nLANGUAGE: vue\nCODE:\n```\n<i18n-t keypath=\"welcomeMessage\">\n  <template #default=\"{ translation }\">\n    <strong>{{ translation }}</strong>\n  </template>\n</i18n-t>\n```\n\n----------------------------------------\n\nTITLE: Disable SEO Attributes with useLocaleHead JavaScript\nDESCRIPTION: This code snippet demonstrates how to disable SEO attributes using the `addSeoAttributes` option of the `useLocaleHead` composable. When set to `false`, SEO-related meta and link tags will not be added. This might be useful if SEO is handled separately or not needed.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/composables/useLocaleHead.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst head = useLocaleHead({ addSeoAttributes: false })\n```\n\n----------------------------------------\n\nTITLE: French Domain Configuration in Nuxt I18n Micro (TypeScript)\nDESCRIPTION: Configures a child layer for the French domain, inheriting from the base configuration, disabling English, German and Spanish locales, enabling French locale, setting French as the default locale, and disabling automatic language detection.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/multi-domain-locales.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// fr/nuxt.config.ts\n\nexport default defineNuxtConfig({\n  extends: '../base', // Inherit from the base configuration\n\n  i18n: {\n    locales: [\n      { code: 'en', iso: 'en-US', dir: 'ltr', disabled: true }, // Disable English\n      { code: 'fr', iso: 'fr-FR', dir: 'ltr' }, // Add and enable the French locale\n      { code: 'de', iso: 'de-DE', dir: 'ltr', disabled: true }, // Disable German\n      { code: 'es', iso: 'es-ES', dir: 'ltr', disabled: true }, // Disable Spanish\n    ],\n    defaultLocale: 'fr', // Set French as the default locale\n    autoDetectLanguage: false, // Disable automatic language detection\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Vue Template: Replacing nuxt-link with NuxtLink Component\nDESCRIPTION: Shows how to replace `<nuxt-link>` with `<NuxtLink>` component and use `$localeRoute` or `<i18n-link>` for localized routing. This change is necessary for compatibility with the new routing mechanism in `Nuxt I18n Micro`.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/migration.md#_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<nuxt-link :to=\"{ name: 'index' }\">Home</nuxt-link>\n```\n\n----------------------------------------\n\nTITLE: Upload Source Files to Crowdin\nDESCRIPTION: This command uploads all specified source files in the Crowdin configuration to the Crowdin platform, making them available for translation. It relies on the `crowdin.yml` file to determine which files to upload.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/crowdin.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncrowdin upload sources\n```\n\n----------------------------------------\n\nTITLE: Specify a Base URL with useLocaleHead JavaScript\nDESCRIPTION: This code shows how to specify a custom base URL when using the `useLocaleHead` composable. The `baseUrl` option is set to `https://mywebsite.com`, which will be used to generate canonical and alternate URLs. It is important to configure it properly.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/composables/useLocaleHead.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst head = useLocaleHead({ baseUrl: 'https://mywebsite.com' })\n```\n\n----------------------------------------\n\nTITLE: Formatting a Relative Date - Typescript\nDESCRIPTION: This snippet demonstrates how to format a date as a relative time according to the current locale using the `$tdr()` method and `Intl.RelativeTimeFormat`. It accepts an optional `Intl.RelativeTimeFormatOptions` object to customize the formatting.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/api/methods.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst relativeDate = $tdr(new Date(Date.now() - 1000 * 60 * 5))\n// Output: \"5 minutes ago\" in the 'en-US' locale\n```\n\n----------------------------------------\n\nTITLE: `<i18n-switcher>` with `after-link-content` Slot in Vue\nDESCRIPTION: This code demonstrates how to use the `after-link-content` slot to insert content after the locale label inside each link in the `<i18n-switcher>` component. The slot receives the locale as a prop and can be used to display the locale code in parentheses after the language name.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/components/i18n-switcher.md#_snippet_21\n\nLANGUAGE: vue\nCODE:\n```\n<i18n-switcher>\n  <template #after-link-content=\"{ locale }\">\n    <span>({{ locale.code }})</span>\n  </template>\n</i18n-switcher>\n```\n\n----------------------------------------\n\nTITLE: Vue Template with i18n-t Component in Nuxt I18n Micro\nDESCRIPTION: This Vue template utilizes the `<i18n-t>` component for handling translations. It includes a named slot `#link` to insert a dynamic `nuxt-link` within the translated text, allowing for embedded links within translations while maintaining proper localization structure.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/faq.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <i18n-t keypath=\"feedback.text\">\n    <template #link>\n      <nuxt-link :to=\"{ name: 'index' }\">\n        <i18n-t keypath=\"feedback.link\" />\n      </nuxt-link>\n    </template>\n  </i18n-t>\n</template>\n```\n\n----------------------------------------\n\nTITLE: `<i18n-link>` with `activeStyle` Prop in Vue\nDESCRIPTION: Demonstrates how to use the `activeStyle` prop to apply inline styles to the link when it's active (i.e., when the current route matches the link's `to` prop). The specified styles, in this case, `fontWeight: 'bold'`, will be applied directly to the link element when it's active.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/components/i18n-link.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<i18n-link to=\"/about\" :activeStyle=\"{ fontWeight: 'bold' }\">About Us</i18n-link>\n```\n\n----------------------------------------\n\nTITLE: Using i18n-t with Slots and Interpolation (Vue)\nDESCRIPTION: This Vue.js component utilizes the `<i18n-t>` component for rendering translations with dynamic content via slots. The slot's `translation` property provides access to the translated string, which can be modified before rendering.  This snippet demonstrates the use of the component with interpolation.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/examples.md#_snippet_11\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <i18n-t keypath=\"greeting\" tag=\"h1\">\n    <template #default=\"{ translation }\">\n      <strong>{{ translation.replace('page', 'page replace') }}</strong> <i>!!!</i>\n    </template>\n  </i18n-t>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Fetching a Pluralized Translation - Typescript\nDESCRIPTION: This snippet demonstrates how to fetch a pluralized translation for a given key based on a count using the `$tc()` method. The pluralization rule depends on the configured locale.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/api/methods.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst appleCountMessage = $tc('apples', 10)\n// Output: \"10 apples\" (assuming the plural rule for 'apples' is defined correctly)\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with PNPM\nDESCRIPTION: These commands install the project dependencies using pnpm, build the packages, and prepares the playground environment for local development.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/contribution.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\npnpm --filter \"./packages/**\" run build\npnpm run prepack && cd playground && pnpm run prepare && cd ..\n```\n\n----------------------------------------\n\nTITLE: Merging Translations using i18nUtils.mergeTranslations\nDESCRIPTION: This demonstrates how to merge new translations into the existing translation cache using the `i18nUtils.mergeTranslations` function. It accepts an object containing the new translations to be merged into the cache.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/packages/test-utils/README.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ni18nUtils.mergeTranslations({ welcome_message: 'Hello, {name}!' })\n```\n\n----------------------------------------\n\nTITLE: Base Layer Configuration in Nuxt I18n Micro (TypeScript)\nDESCRIPTION: Defines the base configuration for Nuxt I18n Micro, including common locales (English, German, Spanish), default locale set to English, translation directory, meta configuration, and enabling auto-detection of language.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/multi-domain-locales.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// base/nuxt.config.ts\n\nexport default defineNuxtConfig({\n  i18n: {\n    locales: [\n      { code: 'en', iso: 'en-US', dir: 'ltr' },\n      { code: 'de', iso: 'de-DE', dir: 'ltr' },\n      { code: 'es', iso: 'es-ES', dir: 'ltr' },\n    ],\n    defaultLocale: 'en',\n    translationDir: 'locales',\n    meta: true,\n    autoDetectLanguage: true,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: i18n-t Relative Date Formatting in Vue\nDESCRIPTION: Demonstrates relative date formatting with the `<i18n-t>` component, using the `relative-date` prop to format a date as a relative time. It displays a localized relative date.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/components/i18n-t.md#_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<i18n-t keypath=\"data.item\" :relative-date=\"'2023-12-31'\" />\n```\n\n----------------------------------------\n\nTITLE: Locales Configuration with baseUrl and baseDefault\nDESCRIPTION: Defines the locales available in the application with options for setting base URLs and designating a locale as the default without a prefix. The `baseUrl` sets a domain and the `baseDefault` removes the locale code from the url path. Actual redirection is handled outside this module.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/getting-started.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nlocales: [\n  { code: 'en', iso: 'en-US', dir: 'ltr' },\n  { code: 'fr', iso: 'fr-FR', dir: 'ltr' },\n  { code: 'ar', iso: 'ar-SA', dir: 'rtl', disabled: true },\n  { code: 'de', iso: 'de-DE', dir: 'ltr', baseUrl: 'https://de.example.com', baseDefault: true },\n  { code: 'es', iso: 'es-ES', dir: 'ltr', baseUrl: 'https://es.example.com', baseDefault: true },\n  { code: 'ja', iso: 'ja-JP', dir: 'ltr', baseUrl: 'https://new.example.com' }\n]\n```\n\n----------------------------------------\n\nTITLE: Creating a Mock I18n Configuration\nDESCRIPTION: This TypeScript code defines a mock i18n setup for testing purposes. It uses `vitest` to create mock functions for various i18n methods (like `$t`, `$setLocale`) and `nuxt-i18n-micro-test-utils` to provide default implementations.  The `mockNuxtImport` function from `@nuxt/test-utils/runtime` is used to mock the `useI18n` composable.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/testing.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// tests/unit-setup.ts\n\nimport { mockNuxtImport } from '@nuxt/test-utils/runtime'\nimport { vi } from 'vitest'\nimport { i18nUtils } from 'nuxt-i18n-micro-test-utils'\n\nexport function createFakeI18n() {\n  return {\n    $getLocale: vi.fn(i18nUtils.getLocale),\n    $t: vi.fn(i18nUtils.t),\n    $tc: vi.fn(i18nUtils.tc),\n    $setLocale: vi.fn(i18nUtils.setLocale),\n    $getLocaleName: vi.fn(i18nUtils.getLocaleName),\n    $setLocaleName: vi.fn(i18nUtils.setLocaleName),\n    $getLocales: vi.fn(i18nUtils.getLocales),\n    $setLocales: vi.fn(i18nUtils.setLocales),\n    $defaultLocale: vi.fn(i18nUtils.defaultLocale),\n    $setDefaultLocale: vi.fn(i18nUtils.setDefaultLocale),\n    $getRouteName: vi.fn(i18nUtils.getRouteName),\n    $settRouteName: vi.fn(i18nUtils.settRouteName),\n    $ts: vi.fn(i18nUtils.ts),\n    $tn: vi.fn(i18nUtils.tn),\n    $td: vi.fn(i18nUtils.td),\n    $has: vi.fn(i18nUtils.has),\n    $mergeTranslations: vi.fn(i18nUtils.mergeTranslations),\n    $switchLocaleRoute: vi.fn(i18nUtils.switchLocaleRoute),\n    $switchLocalePath: vi.fn(i18nUtils.switchLocalePath),\n    $switchLocale: vi.fn(i18nUtils.switchLocale),\n    $switchRoute: vi.fn(i18nUtils.switchRoute),\n    $localeRoute: vi.fn(i18nUtils.localeRoute),\n    $localePath: vi.fn(i18nUtils.localePath),\n    $setI18nRouteParams: vi.fn(i18nUtils.setI18nRouteParams),\n  }\n}\n\nmockNuxtImport<() => ReturnType<typeof createFakeI18n>>('useI18n', () =>\n  vi.fn(() => createFakeI18n()),\n)\n\nexport const setTranslationsFromJson = i18nUtils.setTranslationsFromJson\n```\n\n----------------------------------------\n\nTITLE: Update Translations (Example Usage) - TypeScript\nDESCRIPTION: This code snippet demonstrates how to call the `/api/i18n/update` endpoint to update translation data.  It sends a POST request with the file path and the updates to be applied in the request body.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/api/i18n-cache-api.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nawait $fetch('/api/i18n/update', {\n  method: 'POST',\n  body: {\n    path: 'pages/home/en.json',\n    updates: {\n      header: 'New header',\n      footer: {\n        text: 'Updated Footer'\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Scoped Slot Usage in Vue Template\nDESCRIPTION: Demonstrates how to access the `prefix` and `t` (translation function) properties within the default scoped slot of the `<i18n-group>` component.  The `prefix` contains the translation key prefix. The `t` function is used for translating keys with the prefix prepended.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/components/i18n-group.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template #default=\"{ prefix, t }\">\n  <!-- Your content here -->\n</template>\n```\n\n----------------------------------------\n\nTITLE: Setting Translations from JSON using i18nUtils.setTranslationsFromJson\nDESCRIPTION: This shows how to load translations dynamically from a JSON object using the `i18nUtils.setTranslationsFromJson` function.  It takes a locale string ('en') and a translation object as arguments and sets the translations for the specified locale.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/packages/test-utils/README.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst newTranslations = { welcome_message: 'Welcome!' }\ni18nUtils.setTranslationsFromJson('en', newTranslations)\n```\n\n----------------------------------------\n\nTITLE: Translation Folder Structure\nDESCRIPTION: This structure shows the recommended organization of translation files. Global translations are placed directly inside the locales directory, while page-specific translations are nested within page-named subdirectories. Each translation file corresponds to a specific locale.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/index.md#_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n  /locales\n  ├── /pages\n  │   ├── /index\n  │   │   ├── en.json\n  │   │   ├── fr.json\n  │   │   └── ar.json\n  │   ├── /about\n  │   │   ├── en.json\n  │   │   ├── fr.json\n  │   │   └── ar.json\n  ├── en.json\n  ├── fr.json\n  └── ar.json\n```\n\n----------------------------------------\n\nTITLE: German Domain Configuration in Nuxt I18n Micro (TypeScript)\nDESCRIPTION: Configures a child layer for the German domain, inheriting from the base configuration, disabling English, French, and Spanish locales, enabling the German locale, setting German as the default locale, and disabling automatic language detection.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/multi-domain-locales.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// de/nuxt.config.ts\n\nexport default defineNuxtConfig({\n  extends: '../base', // Inherit from the base configuration\n\n  i18n: {\n    locales: [\n      { code: 'en', iso: 'en-US', dir: 'ltr', disabled: true }, // Disable English\n      { code: 'fr', iso: 'fr-FR', dir: 'ltr', disabled: true }, // Disable French\n      { code: 'de', iso: 'de-DE', dir: 'ltr' }, // Use the German locale\n      { code: 'es', iso: 'es-ES', dir: 'ltr', disabled: true }, // Disable Spanish\n    ],\n    defaultLocale: 'de', // Set German as the default locale\n    autoDetectLanguage: false, // Disable automatic language detection\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Default Value for i18n-t in Vue\nDESCRIPTION: Shows how to set a default value for the `<i18n-t>` component using the `defaultValue` prop. If the translation key is not found, the default value is displayed.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/components/i18n-t.md#_snippet_11\n\nLANGUAGE: vue\nCODE:\n```\n<i18n-t keypath=\"nonExistentKey\" defaultValue=\"Fallback text\"></i18n-t>\n```\n\n----------------------------------------\n\nTITLE: Crowdin Configuration File Example\nDESCRIPTION: This YAML configuration file defines how source files are mapped and where translations should be placed. It includes settings for project ID, API token, base path, base URL, file structure preservation, and file mapping rules using placeholders for language codes.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/crowdin.md#_snippet_2\n\nLANGUAGE: yml\nCODE:\n```\n\"project_id\": \"YOUR_PROJECT_ID\"\n\"api_token\": \"YOUR_API_TOKEN\"\n\"base_path\": \"./locales\"\n\"base_url\": \"https://api.crowdin.com\"\n\"preserve_hierarchy\": true\n\nfiles: [\n  {\n    \"source\": \"/en.json\",\n    \"translation\": \"/%two_letters_code%.json\",\n  },\n  {\n    \"source\": \"/pages/**/en.json\",\n    \"translation\": \"/pages/**/%two_letters_code%.json\",\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Sync Command Example\nDESCRIPTION: An example of using the `sync` command. This command synchronizes translation files across locales, ensuring all locales have the same keys.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/cli.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ni18n-micro sync\n```\n\n----------------------------------------\n\nTITLE: Disabling Locale File Watcher in Nuxt I18n Micro (Typescript)\nDESCRIPTION: This code snippet demonstrates disabling the automatic creation of locale files during development in Nuxt I18n Micro. Setting `disableWatcher` to `true` prevents the module from automatically creating or updating locale files. This is useful in production or when managing locale files manually.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/getting-started.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\ndisableWatcher: true // Disables the automatic creation of locale files\n```\n\n----------------------------------------\n\nTITLE: Formatting Relative Date with $tdr in Vue\nDESCRIPTION: This example illustrates how to use the `$tdr` function in a Vue component to format dates as relative times. It demonstrates formatting a date in the past and a date in the future, using `useNuxtApp` to access the `$tdr` function.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/examples.md#_snippet_21\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <!-- Format a date as a relative time -->\n    <p>{{ $tdr(new Date(Date.now() - 1000 * 60 * 5)) }}</p> <!-- Outputs: \"5 minutes ago\" in 'en-US' locale -->\n\n    <!-- Format a date that is in the future -->\n    <p>{{ $tdr(new Date(Date.now() + 1000 * 60 * 60 * 24)) }}</p> <!-- Outputs: \"in 1 day\" in 'en-US' locale -->\n  </div>\n</template>\n\n<script setup>\nimport { useNuxtApp } from '#imports'\n\nconst { $tdr } = useNuxtApp()\n</script>\n```\n\n----------------------------------------\n\nTITLE: Regex Replacement of Translation Values (Bash)\nDESCRIPTION: This command replaces translation values using a regular expression to find and replace the target values.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/cli.md#_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\ni18n-micro replace-values --search \"Hello\\\\d+\" --replace \"Hi\" --useRegex\n```\n\n----------------------------------------\n\nTITLE: Stats Command Example\nDESCRIPTION: An example of using the `stats` command with the `--full` option to display combined translation statistics. This command helps in understanding the overall translation progress.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/cli.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ni18n-micro stats --full\n```\n\n----------------------------------------\n\nTITLE: Custom Regex Matcher\nDESCRIPTION: This example shows how to improve pattern matching performances via a custom regex matcher. If you have a lot of locales, you can improve matching performance.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/getting-started.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ncustomRegexMatcher: '[a-z]-[A-Z]'// This matches locales in isoCode (e.g: '/en-US', 'de-DE' etc)\n```\n\n----------------------------------------\n\nTITLE: Page-Specific Translation File Example (JSON)\nDESCRIPTION: This example demonstrates a page-specific translation file in JSON format, providing translations for content unique to the index page. This is stored in `/locales/pages/index/en.json` and ensures that only necessary translations are loaded for a specific page, enhancing performance.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/folder-structure.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"title\": \"Welcome to Our Website\",\n  \"description\": \"We offer a wide range of products and services to meet your needs.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Previewing Production Build of Nuxt 3 Application\nDESCRIPTION: This snippet shows how to locally preview the production build of a Nuxt 3 application using npm, pnpm, yarn, and bun.  Requires the application to be built first.  The application can then be previewed locally.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/test/fixtures/content/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm run preview\n\n# pnpm\npnpm run preview\n\n# yarn\nyarn preview\n\n# bun\nbun run preview\n```\n\n----------------------------------------\n\nTITLE: Regex Replacement with Capturing Groups (Bash)\nDESCRIPTION: This command replaces translation values using regular expressions and capturing groups, allowing for dynamic replacement based on matched groups.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/cli.md#_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\ni18n-micro replace-values --search \"Hello (\\\\w+)\" --replace \"Hi $1\" --useRegex\n```\n\n----------------------------------------\n\nTITLE: Merge Translations - JavaScript\nDESCRIPTION: Merges additional translations into the existing translations for the current locale using the `$mergeTranslations` method.  It accepts a `newTranslations` object containing the translations to be merged.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/composables/useI18n.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst { $mergeTranslations } = useI18n()\n$mergeTranslations({\n  hello: 'Hello World',\n})\n```\n\n----------------------------------------\n\nTITLE: Export Command Example\nDESCRIPTION: An example of using the `export` command with a custom `potsDir`. This command exports translations to PO files for external translation management.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/cli.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ni18n-micro export --potsDir pots\n```\n\n----------------------------------------\n\nTITLE: Building and Serving Documentation with PNPM\nDESCRIPTION: These commands build the documentation and serve it locally, allowing you to preview it in your browser and ensure it's accurate before submitting changes.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/contribution.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\npnpm run docs:build\npnpm run docs:serve\n```\n\n----------------------------------------\n\nTITLE: Linting Code Before Commit\nDESCRIPTION: This command runs the linter to ensure the code adheres to project standards before committing. It promotes code quality and consistency.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/contribution.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\npnpm run lint\n```\n\n----------------------------------------\n\nTITLE: Hiding i18n-t when Empty in Vue\nDESCRIPTION: Shows how to hide the `<i18n-t>` component when the translation is empty using the `hideIfEmpty` prop. This is useful for optional messages or content.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/components/i18n-t.md#_snippet_13\n\nLANGUAGE: vue\nCODE:\n```\n<i18n-t keypath=\"optionalMessage\" :hideIfEmpty=\"true\"></i18n-t>\n```\n\n----------------------------------------\n\nTITLE: Custom translation directory\nDESCRIPTION: Specifies a custom directory for storing translation files, overriding the default 'locales' directory.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/getting-started.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntranslationDir: 'i18n' // Custom directory for translation files\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies using Package Managers\nDESCRIPTION: This snippet demonstrates how to install project dependencies using npm, pnpm, yarn, and bun.  The user must have the specific package manager installed. The expected output is the successful installation of all project dependencies.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/test/fixtures/content/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm install\n\n# pnpm\npnpm install\n\n# yarn\nyarn install\n\n# bun\nbun install\n```\n\n----------------------------------------\n\nTITLE: Fixing Linting Issues with PNPM\nDESCRIPTION: This command attempts to automatically fix linting issues in the code, helping maintain code quality and consistency across the project.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/contribution.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npnpm run lint:fix\n```\n\n----------------------------------------\n\nTITLE: Extending Primary Layer (Child Layer) - TypeScript\nDESCRIPTION: This TypeScript code snippet demonstrates extending a primary i18n configuration layer in Nuxt.js. It inherits the base configuration from '../basic' and adds a new locale (German).  It also overrides the default locale to French and disables automatic language detection for this specific child layer.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/layers.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// extended/nuxt.config.ts (Child Layer)\nexport default defineNuxtConfig({\n  extends: '../basic', // Inherit the base configuration from the 'basic' layer\n  i18n: {\n    locales: [\n      { code: 'en', iso: 'en-EN', dir: 'ltr' }, // Inherited from the base layer\n      { code: 'fr', iso: 'fr-FR', dir: 'ltr' }, // Inherited from the base layer\n      { code: 'de', iso: 'de-DE', dir: 'ltr' }, // Added in the child layer\n    ],\n    defaultLocale: 'fr', // Override the default locale to French for this section\n    autoDetectLanguage: false, // Disable automatic language detection in this section\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Pluralization Function\nDESCRIPTION: This example defines a custom pluralization function that splits a translation string into different forms based on the count and selects the appropriate form.  This function should be placed inside your i18n configuration.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/getting-started.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Getter = (key: string, params?: Record<string, string | number | boolean>, defaultValue?: string) => unknown\n\n{\n  plural: (key: string, count: number, _params: Record<string, string | number | boolean>, _locale: string, t: Getter) => {\n    const translation = t(key)\n    if (!translation) {\n      return key\n    }\n    const forms = translation.toString().split('|')\n    return (count < forms.length ? forms[count].trim() : forms[forms.length - 1].trim()).replace('{count}', count.toString())\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Synchronize Translation Files (Bash)\nDESCRIPTION: This command synchronizes the translation files.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/cli.md#_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\ni18n-micro sync\n```\n\n----------------------------------------\n\nTITLE: Disabling Page Locales in Nuxt I18n Micro (Typescript)\nDESCRIPTION: This code snippet demonstrates disabling page-specific translations within Nuxt I18n Micro. By setting `disablePageLocales` to `true`, the module only uses global translation files, ignoring translations located in page-specific directories. This limits the scope of translation files used by the module to only those in the root `locales` directory.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/getting-started.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\ndisablePageLocales: true // Disable page-specific translations, using only global translations\n```\n\n----------------------------------------\n\nTITLE: Configuring apiBaseUrl in Nuxt I18n Micro (JavaScript)\nDESCRIPTION: This JavaScript code snippet demonstrates how to configure the `apiBaseUrl` option in Nuxt I18n Micro.  Specifying the full URL is crucial when translations are hosted externally, ensuring that `$fetch` can correctly access the translation files during server-side rendering (SSR) on platforms like Vercel.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/faq.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  // ...\n  apiBaseUrl: 'https://example.com/_locales'\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: i18n-t Number Formatting in Vue\nDESCRIPTION: Demonstrates number formatting with the `<i18n-t>` component, using the `number` prop to format a number value. It displays a localized number.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/components/i18n-t.md#_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<i18n-t keypath=\"data.item\" :number=\"1234567.89\" />\n```\n\n----------------------------------------\n\nTITLE: Creating a New Branch with Git\nDESCRIPTION: This command creates a new branch for your work, allowing you to isolate your changes.  Use descriptive branch names such as bugfix/fix-translation-error or feature/add-new-locale-support.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/contribution.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b feature/your-feature-name\n```\n\n----------------------------------------\n\nTITLE: Text-to-i18n Dry Run Example\nDESCRIPTION: Shows the changes that would be made by the `text-to-i18n` command without actually modifying any files.  Useful for previewing changes before applying them.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/cli.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ni18n-micro text-to-i18n --dryRun\n```\n\n----------------------------------------\n\nTITLE: Basic `<i18n-switcher>` Usage in Vue\nDESCRIPTION: This code snippet shows the basic usage of the `<i18n-switcher>` component in a Vue template, rendering the locale switcher with default styling and behavior.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/components/i18n-switcher.md#_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <i18n-switcher />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Customized `<i18n-switcher>` with Props in Vue\nDESCRIPTION: This example demonstrates a fully customized locale switcher using the `<i18n-switcher>` component with custom labels and inline styles applied through various props, allowing complete control over the component's appearance and behavior.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/components/i18n-switcher.md#_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <i18n-switcher\n    :customLabels=\"{ en: 'English', fr: 'Français' }\"\n    :customWrapperStyle=\"{ backgroundColor: '#f8f9fa', padding: '10px' }\"\n    :customButtonStyle=\"{ backgroundColor: '#007bff', color: '#fff', borderRadius: '4px' }\"\n    :customDropdownStyle=\"{ border: '1px solid #007bff', boxShadow: '0 2px 8px rgba(0, 0, 0, 0.1)' }\"\n    :customItemStyle=\"{ margin: '5px 0', padding: '5px' }\"\n    :customLinkStyle=\"{ padding: '8px 16px', color: '#333', textDecoration: 'none' }\"\n    :customActiveLinkStyle=\"{ color: 'green', fontWeight: 'bold', backgroundColor: '#f0f0f0' }\"\n    :customDisabledLinkStyle=\"{ color: 'gray', cursor: 'not-allowed' }\"\n    :customIconStyle=\"{ fontSize: '20px', color: '#007bff' }\"\n  />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Installing nuxt-i18n-micro-core\nDESCRIPTION: Instructions for installing the nuxt-i18n-micro-core package using npm. This command adds the package to your project's dependencies.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/packages/core/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install nuxt-i18n-micro-core\n```\n\n----------------------------------------\n\nTITLE: `<i18n-switcher>` with `after-selected-locale` Slot in Vue\nDESCRIPTION: This example demonstrates how to use the `after-selected-locale` slot to insert content after the currently selected locale label within the `<i18n-switcher>` component's button, often used for adding dropdown indicators.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/components/i18n-switcher.md#_snippet_13\n\nLANGUAGE: vue\nCODE:\n```\n<i18n-switcher>\n  <template #after-selected-locale>\n    <i class=\"icon-caret\"></i>\n  </template>\n</i18n-switcher>\n```\n\n----------------------------------------\n\nTITLE: Passing Route to $_t for Page Transitions (TypeScript/Vue)\nDESCRIPTION: This TypeScript and Vue code shows how to correctly handle translations during page transitions by explicitly passing the current route to `$_t`. This ensures the correct translations are loaded before the new page is fully displayed, preventing brief translation errors during the transition.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/faq.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n<script lang=\"ts\" setup>\n  import { useNuxtApp } from '#imports'\n  const route = useRoute()\n  const { $_t } = useNuxtApp()\n\n  const $t = $_t(route)\n</script>\n\n<template>\n  {{ $t('page::blog-slug.title') }}\n</template>\n```\n\n----------------------------------------\n\nTITLE: i18n-t with Default Slot in Vue\nDESCRIPTION: Demonstrates using the default slot with the `<i18n-t>` component to customize the entire translated string. The example replaces 'Nuxt' with 'Vue' in the translated message.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/components/i18n-t.md#_snippet_17\n\nLANGUAGE: vue\nCODE:\n```\n<i18n-t keypath=\"welcome.message\">\n  <template #default=\"{ translation }\">\n    {{ translation.replace('Nuxt', 'Vue') }}\n  </template>\n</i18n-t>\n```\n\n----------------------------------------\n\nTITLE: Configuring Vitest for Testing\nDESCRIPTION: This TypeScript code configures Vitest for unit testing in a Nuxt.js project. It specifies the setup file (`./tests/unit-setup.ts`), which contains the mock i18n configuration, and includes files ending with `.spec.ts` for testing. The `watch` option is set to `false` to prevent watching for changes during testing.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/testing.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// vitest.config.ts\n\nimport { defineVitestConfig } from '@nuxt/test-utils/config'\n\nexport default defineVitestConfig({\n  test: {\n    watch: false,\n    setupFiles: ['./tests/unit-setup.ts'],\n    include: ['./**/*.spec.ts'],\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Nested Groups Avoidance\nDESCRIPTION: Highlights the importance of avoiding deeply nesting translation groups to maintain clarity in translation structures. Demonstrates a 'good' example and illustrates a complex nested structure to avoid for easier maintainability.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/components/i18n-group.md#_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n<!-- Good -->\n<i18n-group prefix=\"shop.product\">\n\n<!-- Avoid -->\n<i18n-group prefix=\"shop.category.product.details.specs\">\n```\n\n----------------------------------------\n\nTITLE: Routes Locale Links Configuration\nDESCRIPTION: This example shows how to create links between different pages' locale files to share translations, reducing duplication. Configures links between different pages' locale files to share translations, reducing duplication.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/getting-started.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  routesLocaleLinks: {\n    'products-id': 'products',\n    'about-us': 'about'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Translations Dynamically via i18n:register Event (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to use the `i18n:register` event in `Nuxt I18n Micro` to dynamically add translations to your application. It registers English translations for 'greeting' and 'farewell'.  The event handler receives a `register` function that merges the new translations into the global context for the specified locale.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/api/events.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnuxt.hook('i18n:register', async (register: (translations: unknown, locale?: string) => void, locale: string) => {\n  register({\n    \"greeting\": \"Hello\",\n    \"farewell\": \"Goodbye\"\n  }, locale);\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Button Style in `<i18n-switcher>` Vue\nDESCRIPTION: This snippet demonstrates how to customize the button style of the `<i18n-switcher>` component using the `customButtonStyle` prop. It modifies the button's background color, text color, and border radius.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/components/i18n-switcher.md#_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<i18n-switcher :customButtonStyle=\"{ backgroundColor: '#007bff', color: '#fff', borderRadius: '4px' }\"></i18n-switcher>\n```\n\n----------------------------------------\n\nTITLE: Get Current Locale Name - TypeScript\nDESCRIPTION: Retrieves the current locale's display name from the configuration, using the `$getLocaleName` method. Introduced in version `v1.28.0`, it requires no parameters and returns a string or null if not found.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/composables/useI18n.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst locale = $getLocaleName()\n// Output: 'English'\n```\n\n----------------------------------------\n\nTITLE: Testing Changes Before Commit\nDESCRIPTION: These commands run the test suite to ensure that changes don't break existing functionality before committing. It helps in preventing regressions.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/contribution.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\npnpm run test:workspaces\npnpm run test\n```\n\n----------------------------------------\n\nTITLE: i18n-t with Custom Pluralization Rule Example in Vue\nDESCRIPTION: Shows a more concise example of using a custom pluralization rule with the `<i18n-t>` component. This provides fine-grained control over pluralization logic.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/components/i18n-t.md#_snippet_18\n\nLANGUAGE: vue\nCODE:\n```\n<i18n-t\n  keypath=\"items\"\n  :plural=\"itemCount\"\n  :customPluralRule=\"(key, value, count, locale) => {\n    return count === 1 ? 'One item' : `${count} items`;\n  }\"\n></i18n-t>\n```\n\n----------------------------------------\n\nTITLE: Defining localeRoutes with $defineI18nRoute in TypeScript\nDESCRIPTION: This code snippet demonstrates how to define custom routes for specific locales (Russian and German) using the `localeRoutes` option within the `$defineI18nRoute` function. This is useful for providing localized URL structures for different language versions of a page. It assumes the existence of the `$defineI18nRoute` function from `Nuxt I18n Micro`.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/custom-locale-routes.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n$defineI18nRoute({\n  localeRoutes: {\n    ru: '/localesubpage', // Custom route path for the Russian locale\n    de: '/lokaleseite',   // Custom route path for the German locale\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Initialize Crowdin in Project\nDESCRIPTION: This command initializes Crowdin in the project directory. It sets up necessary configurations like project ID, API token, and other details through an interactive setup process. It is the first step to link the project to Crowdin.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/crowdin.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncrowdin init\n```\n\n----------------------------------------\n\nTITLE: Overriding Page Names with definePageMeta in Vue\nDESCRIPTION: This Vue script demonstrates how to override the default page naming behavior by explicitly naming a page using `definePageMeta`. This allows developers to use a custom name when referencing the page with `$localeRoute` or `I18nLink`. It requires the `@nuxt/kit` package to be installed to use `definePageMeta`.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/custom-locale-routes.md#_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n// /pages/about-us/physical-stores.vue\n<script setup>\ndefinePageMeta({\n  name: 'our-stores'\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Locale Translations JSON for Locale Switching\nDESCRIPTION: This JSON file provides translations for locale names, used in the locale switching example. The keys represent locale codes, and the values are the translated names for each locale.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/examples.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"en\": \"English\",\n  \"fr\": \"Français\",\n  \"de\": \"Deutsch\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing nuxt-i18n-micro-cli globally\nDESCRIPTION: Installs the nuxt-i18n-micro-cli package globally using npm, making the `i18n-micro` command available on the system. This is the first step in setting up the CLI tool.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/cli.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g nuxt-i18n-micro-cli\n```\n\n----------------------------------------\n\nTITLE: Nuxt I18n CLI Usage\nDESCRIPTION: Demonstrates the basic usage of the `i18n-micro text-to-i18n` command. The command automates the extraction of hardcoded text and converts them into i18n translation keys. Options can be specified to customize translation file and context.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/news/index.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ni18n-micro text-to-i18n [options]\n```\n\n----------------------------------------\n\nTITLE: Example Component using useI18n\nDESCRIPTION: This Vue component demonstrates the usage of the `useI18n` composable to translate messages. It defines a `message` prop, defaulting to a translation of 'defaultMessage', and displays translated text from the 'welcome' key. It uses `<template>` syntax and the `<script setup>` syntax.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/testing.md#_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst { $t } = useI18n()\n\nconst props = defineProps({\n  message: {\n    type: String,\n    default: null,\n  },\n})\n\n// Test to see that $t works in script setup as well as the template\nconst message = props.message || $t('defaultMessage')\n</script>\n\n<template>\n  <div>\n    <p>Test from component: {{ $t('welcome') }}</p>\n    <p data-testid=\"message\">\n      Test message from props: {{ message }}\n    </p>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Installing Nuxt I18n Micro Test Utils with npm\nDESCRIPTION: This command installs the `nuxt-i18n-micro-test-utils` package using npm. It adds the package as a project dependency, making it available for import and use in the application.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/packages/test-utils/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install nuxt-i18n-micro-test-utils\n```\n\n----------------------------------------\n\nTITLE: Recommended Locale Switching Select - Vue\nDESCRIPTION: This snippet demonstrates the recommended approach for locale switching using a `<select>` element in Vue. This avoids hydration issues and ensures the UI updates correctly upon locale changes.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/strategy.md#_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<select @change=\"(e) => $switchLocale(e.target.value)\">\n  <option\n    v-for=\"locale in availableLocales\"\n    :key=\"locale.code\"\n    :value=\"locale.code\"\n    :selected=\"locale.isActive\"\n  >\n    {{ locale.code }}\n  </option>\n</select>\n```\n\n----------------------------------------\n\nTITLE: Translate Command with OpenAI options\nDESCRIPTION: An example of using the `translate` command with OpenAI, including the API key and additional options such as the model and max tokens.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/cli.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ni18n-micro translate --service openai --token YOUR_OPENAI_API_KEY --options openaiModel:gpt-3.5-turbo,max_tokens:1000\n```\n\n----------------------------------------\n\nTITLE: Cloning the Repository with Git\nDESCRIPTION: This command clones the forked repository to your local machine, allowing you to start working on the project. Replace <your-username> with your GitHub username.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/contribution.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/<your-username>/nuxt-i18n-micro.git\ncd nuxt-i18n-micro\n```\n\n----------------------------------------\n\nTITLE: Define I18n Route with $defineI18nRoute (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use `$defineI18nRoute` to define route behavior based on the current locale. It shows how to control access to specific routes based on available locales and how to provide translations for different locales. It accepts a configuration object with `locales` and `localeRoutes` properties.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/api/methods.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n$defineI18nRoute({\n  locales: {\n    en: { greeting: 'Hello', farewell: 'Goodbye' },\n    ru: { greeting: 'Привет', farewell: 'До свидания' },\n  },\n  localeRoutes: {\n    ru: '/localesubpage',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Disabling Store Item Updater in Nuxt I18n Micro (Typescript)\nDESCRIPTION: This code snippet shows how to disable the file watcher for updating store items during development within Nuxt I18n Micro. By setting `disableUpdater` to `true`, the file watcher responsible for automatically updating store items based on changes to locale files is disabled. This option is useful for performance optimization or when the store updates are managed externally.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/getting-started.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\ndisableUpdater: true // Disables the file watcher for updating store items\n```\n\n----------------------------------------\n\nTITLE: Merge Translations with $mergeTranslations (TypeScript)\nDESCRIPTION: This snippet illustrates the usage of `$mergeTranslations` to merge new translations into the existing translation cache.  It takes a `Record<string, string>` object containing the new translations as input, effectively updating the current locale's translation resources.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/api/methods.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n$mergeTranslations({\n  welcome: 'Bienvenue, {username}!'\n})\n// Output: Updates the translation cache with the new French translation\n```\n\n----------------------------------------\n\nTITLE: Cloning the Repository - Local Development\nDESCRIPTION: This command clones the `nuxt-i18n-micro` repository to your local machine. It is the first step to set up a local development environment.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/contribution.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/s00d/nuxt-i18n-micro.git\ncd nuxt-i18n-micro\n```\n\n----------------------------------------\n\nTITLE: `<i18n-switcher>` with `before-dropdown-items` Slot in Vue\nDESCRIPTION: This example demonstrates the usage of the `before-dropdown-items` slot to insert content before the list of locale items within the dropdown of the `<i18n-switcher>` component, often used to add a divider.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/components/i18n-switcher.md#_snippet_16\n\nLANGUAGE: vue\nCODE:\n```\n<i18n-switcher>\n  <template #before-dropdown-items>\n    <li class=\"divider\"></li>\n  </template>\n</i18n-switcher>\n```\n\n----------------------------------------\n\nTITLE: `<i18n-switcher>` with `before-link-content` Slot in Vue\nDESCRIPTION: This example demonstrates using the `before-link-content` slot to insert content before the locale label inside each link in the `<i18n-switcher>` component, receiving the `locale` as a prop.  This allows customization like adding icons before the language name.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/components/i18n-switcher.md#_snippet_20\n\nLANGUAGE: vue\nCODE:\n```\n<i18n-switcher>\n  <template #before-link-content=\"{ locale }\">\n    <i :class=\"`icon-${locale.code}`\"></i>\n  </template>\n</i18n-switcher>\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies with Package Managers\nDESCRIPTION: This snippet shows how to install project dependencies using npm, pnpm, yarn, and bun. Each package manager uses its respective install command to download and install the necessary packages defined in the project's package.json file.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/packages/test-utils/example/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm install\n\n# pnpm\npnpm install\n1\n# yarn\nyarn install\n\n# bun\nbun install\n```\n\n----------------------------------------\n\nTITLE: Translation Cache Example\nDESCRIPTION: This is an example of the JSON structure used to store translation data in the cache.  It contains key-value pairs where the keys are translation identifiers and the values are the localized text. The structure mirrors the JSON files used to store translations.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/api/i18n-cache-api.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"title\": \"Page Title\",\n  \"description\": \"Localized description\",\n  \"button\": {\n    \"text\": \"Click me\",\n    \"tooltip\": \"Click to continue\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using i18n methods from useNuxtApp (TypeScript)\nDESCRIPTION: This snippet demonstrates how to access the i18n methods through the `useNuxtApp` composable. This approach allows you to access the i18n functionality within your Nuxt application.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/api/methods.md#_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useNuxtApp } from '#imports'\n\nconst { $getLocale, $switchLocale, $getLocales, $localeRoute, $t } = useNuxtApp()\n```\n\n----------------------------------------\n\nTITLE: Install Crowdin CLI Globally\nDESCRIPTION: This command installs the Crowdin CLI globally using npm, allowing it to be used from any directory on the system. It is a prerequisite for interacting with the Crowdin service from the command line.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/crowdin.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g @crowdin/cli\n```\n\n----------------------------------------\n\nTITLE: Initializing useLocaleHead with baseUrl option JavaScript\nDESCRIPTION: This code snippet shows how to initialize the `useLocaleHead` composable with a custom base URL.  The base URL is used for generating canonical and alternate URLs for SEO purposes.  It's important to set this correctly to ensure proper SEO.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/composables/useLocaleHead.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst head = useLocaleHead({ baseUrl: 'https://example.com' })\n```\n\n----------------------------------------\n\nTITLE: Correct LocaleRoute Usage - Nuxt I18n - Typescript\nDESCRIPTION: This snippet illustrates the preferred approach for using `localeRoute` with named routes.  This avoids route resolution problems and ensures correct route resolution regardless of the locale strategy.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/strategy.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nlocaleRoute({ name: 'page' }) // Preferred approach\n```\n\n----------------------------------------\n\nTITLE: Configuring Nuxt with i18n and Storybook (nuxt.config.ts)\nDESCRIPTION: This snippet configures the Nuxt application with the nuxt-i18n-micro and @nuxtjs/storybook modules. It defines the locales and localization strategy for the application and enables devtools for development.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/storybook.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// https://nuxt.com/docs/api/configuration/nuxt-config\nexport default defineNuxtConfig({\n  compatibilityDate: '2024-11-01',\n  devtools: { enabled: true },\n  modules: [\n    'nuxt-i18n-micro', // Localization module\n    '@nuxtjs/storybook', // Storybook module\n  ],\n\n  i18n: {\n    locales: [\n      { code: 'en', iso: 'en_EN', displayName: 'English' },\n      { code: 'de', iso: 'de_DE', displayName: 'German' },\n    ],\n    strategy: 'prefix',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Load Translation from File (Server Route) - TypeScript\nDESCRIPTION: This server route loads translation data directly from a file. It uses `h3` for the event handler and `node:fs/promises` for reading the file.  It reads the file path from the request body and returns the parsed JSON data, handling potential file not found errors.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/api/i18n-cache-api.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// server/api/i18n/load-file.[post].ts\nimport { defineEventHandler, readBody, createError } from 'h3'\nimport { readFile } from 'node:fs/promises'\nimport { join } from 'node:path'\n\nexport default defineEventHandler(async (event) => {\n  const { path } = await readBody<{ path: string }>(event)\n\n  try {\n    const fileContent = await readFile(join('locales', path), 'utf-8')\n    return {\n      from: 'file',\n      path,\n      data: JSON.parse(fileContent)\n    }\n  } catch (err) {\n    throw createError({\n      statusCode: 404,\n      statusMessage: `File not found: ${path}`\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Child Layer for Admin Panel - TypeScript\nDESCRIPTION: This code snippet demonstrates how to create a child layer configuration for an admin panel in a modular Nuxt.js application using the `nuxt-i18n` module. It extends the global settings defined in '../nuxt.config', adds Spanish as a locale specific to the admin panel, and disables automatic meta generation.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/layers.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// admin/nuxt.config.ts\nexport default defineNuxtConfig({\n  extends: '../nuxt.config', // Inherit the global settings\n  i18n: {\n    locales: [\n      { code: 'en', iso: 'en-EN', dir: 'ltr' }, // Inherited\n      { code: 'fr', iso: 'fr-FR', dir: 'ltr' }, // Inherited\n      { code: 'es', iso: 'es-ES', dir: 'ltr' }, // Specific to the admin panel\n    ],\n    defaultLocale: 'en',\n    meta: false, // Disable automatic meta generation in the admin panel\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Getting a Translation using i18nUtils.t\nDESCRIPTION: This code snippet demonstrates how to retrieve a translation using the `i18nUtils.t` function. It takes a translation key ('welcome_message') and an optional object containing interpolation values ({ name: 'John' }) as arguments. It returns the translated string with the injected values.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/packages/test-utils/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst translatedValue = i18nUtils.t('welcome_message', { name: 'John' })\nconsole.log(translatedValue)  // Output: translated string with the injected name\n```\n\n----------------------------------------\n\nTITLE: Setting API Base URL in Nuxt I18n Micro (Typescript)\nDESCRIPTION: This code snippet demonstrates how to define a custom base URL for fetching cached translations in Nuxt I18n Micro. By setting the `apiBaseUrl` option, you can specify the URL that the server will use to fetch cached translations. The default value is `'_locales'`, but it can be changed to any custom path, such as `'api/_locales'`.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/getting-started.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\napiBaseUrl: 'api/_locales' // Custom URL for fetching cached translations\n```\n\n----------------------------------------\n\nTITLE: Handling Pluralization using i18nUtils.tc\nDESCRIPTION: This code shows how to handle plural forms of translations using the `i18nUtils.tc` function. It takes a translation key ('item_count') and a number (3) as input.  The function returns the appropriate pluralized translation based on the number and the current locale's pluralization rules.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/packages/test-utils/README.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst pluralValue = i18nUtils.tc('item_count', 3)\nconsole.log(pluralValue)  // Output: appropriate plural form\n```\n\n----------------------------------------\n\nTITLE: Disable Auto-Detect Language in Nuxt Config (TS)\nDESCRIPTION: This code snippet demonstrates how to disable the built-in language auto-detection in the Nuxt I18n Micro configuration. By setting `autoDetectLanguage` to `false`, you can prevent the library from automatically determining the user's locale, allowing for custom detection logic to be implemented instead. This configuration should be placed within the `nuxt.config.ts` file.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/custom-auto-detect.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  // ...\n  i18n: {\n    // ...\n    autoDetectLanguage: false\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Extract Translations (Bash)\nDESCRIPTION: This command extracts translations from the project.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/cli.md#_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\ni18n-micro extract\n```\n\n----------------------------------------\n\nTITLE: Load Translation from File (Example Usage) - TypeScript\nDESCRIPTION: This code snippet shows how to call the `/api/i18n/load-file` endpoint to load translation data from a file.  It sends a POST request with the file path in the request body.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/api/i18n-cache-api.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nawait $fetch('/api/i18n/load-file', {\n  method: 'POST',\n  body: {\n    path: 'pages/home/en.json'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Child Layer for Customer Support - TypeScript\nDESCRIPTION: This code snippet defines a child layer for a customer support portal in a modular Nuxt application, extending the global configuration. It adds German as a locale specific to the support portal, defaults the locale to German, and disables automatic language detection for users accessing the support portal.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/layers.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// support/nuxt.config.ts\nexport default defineNuxtConfig({\n  extends: '../nuxt.config', // Inherit the global settings\n  i18n: {\n    locales: [\n      { code: 'en', iso: 'en-EN', dir: 'ltr' }, // Inherited\n      { code: 'fr', iso: 'fr-FR', dir: 'ltr' }, // Inherited\n      { code: 'de', iso: 'de-DE', dir: 'ltr' }, // Specific to the support portal\n    ],\n    defaultLocale: 'de', // Default to German in the support portal\n    autoDetectLanguage: false, // Disable automatic language detection\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Translate Command Example\nDESCRIPTION: An example of using the `translate` command with specified service and token. This command automatically translates missing keys using the specified translation service.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/cli.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ni18n-micro translate --service deepl --token YOUR_DEEPL_API_KEY\n```\n\n----------------------------------------\n\nTITLE: `<i18n-switcher>` with `after-dropdown-items` Slot in Vue\nDESCRIPTION: This snippet shows how to use the `after-dropdown-items` slot to insert content after the list of locale items within the dropdown of the `<i18n-switcher>` component, often used to add a divider or footer.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/components/i18n-switcher.md#_snippet_17\n\nLANGUAGE: vue\nCODE:\n```\n<i18n-switcher>\n  <template #after-dropdown-items>\n    <li class=\"divider\"></li>\n  </template>\n</i18n-switcher>\n```\n\n----------------------------------------\n\nTITLE: Installing @unhead/vue Package (Bash)\nDESCRIPTION: This bash code shows how to install the `@unhead/vue` package using npm or yarn. This manual installation is necessary if build errors indicate that `@unhead/vue` is missing, particularly during the Nitro prerender phase.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/faq.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @unhead/vue\n# or\nyarn add @unhead/vue\n```\n\n----------------------------------------\n\nTITLE: Load Translation from Cache (Example Usage) - TypeScript\nDESCRIPTION: This code snippet demonstrates how to call the `/api/i18n/load-cache` endpoint to load translation data from the cache. It sends a POST request with the cache key in the request body.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/api/i18n-cache-api.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait $fetch('/api/i18n/load-cache', {\n  method: 'POST',\n  body: {\n    key: '_locales/pages/home/en.json'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Nuxt I18n Micro with npm\nDESCRIPTION: This command installs the nuxt-i18n-micro package as a dependency in your Nuxt project using npm. It allows you to use the internationalization features provided by the module.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install nuxt-i18n-micro\n```\n\n----------------------------------------\n\nTITLE: Basic Translation File in JSON\nDESCRIPTION: Shows a basic JSON translation file structure with nested objects to define translations for different keys. It uses nested JSON objects for hierarchical organization, grouping related translations.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/components/i18n-group.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"product\": {\n    \"details\": {\n      \"title\": \"Premium Product\",\n      \"description\": \"This is a premium product\",\n      \"price\": \"Price: ${value}\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Numbers using i18nUtils.tn\nDESCRIPTION: This snippet showcases how to format numbers based on the current locale using the `i18nUtils.tn` function.  It takes a number as input and returns a string representing the formatted number according to the locale's conventions.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/packages/test-utils/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst formattedNumber = i18nUtils.tn(12345.6789)\nconsole.log(formattedNumber)  // Output: formatted number\n```\n\n----------------------------------------\n\nTITLE: Translation JSON for i18n-t with Interpolation\nDESCRIPTION: This JSON file contains the translation for the `welcome` key used in the `<i18n-t>` example with interpolation. The value contains placeholders (`{username}`, `{unreadCount}`) that are replaced with the values from the `params` object.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/examples.md#_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"welcome\": \"Hello {username}, you have {unreadCount} unread messages.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Vue Template: Using NuxtLink or i18n-link\nDESCRIPTION: Shows how to use `<NuxtLink>` component and use `$localeRoute` or `<i18n-link>` for localized routing. This change is necessary for compatibility with the new routing mechanism in `Nuxt I18n Micro`.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/migration.md#_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<NuxtLink :to=\"$localeRoute({ name: 'index' })\">Home</NuxtLink>\n<!-- or -->\n<i18n-link :to=\"{ name: 'index' }\">Home</i18n-link>\n```\n\n----------------------------------------\n\nTITLE: Formatting a Number (Again) - Typescript\nDESCRIPTION: This snippet demonstrates again how to format a number according to the current locale using the `$tn()` method and `Intl.NumberFormat`. It accepts an optional `Intl.NumberFormatOptions` object to customize the formatting.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/api/methods.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst formattedNumber = $tn(1234567.89, { style: 'currency', currency: 'USD' })\n// Output: \"$1,234,567.89\" in the 'en-US' locale\n```\n\n----------------------------------------\n\nTITLE: Dynamic Keys Translations (en.json)\nDESCRIPTION: This JSON file contains the translations for the dynamic keys used in the dynamic key rendering example. The `dynamic` key holds an array of keys, and each key has a corresponding value.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/examples.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dynamic\": [\"key1\", \"key2\", \"key3\"],\n  \"key1\": \"This is the first key's value\",\n  \"key2\": \"This is the second key's value\",\n  \"key3\": \"This is the third key's value\"\n}\n```\n\n----------------------------------------\n\nTITLE: Delete Translation Keys (Optional Extension) - TypeScript\nDESCRIPTION: This code snippet provides an optional extension to the update logic that allows deleting keys from the translation data. It checks for a `__delete` array in the request body and removes the specified keys from the existing translation data.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/api/i18n-cache-api.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nif ('__delete' in body) {\n  const keysToDelete = body.__delete\n  for (const key of keysToDelete) {\n    delete existing[key]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing nuxt-i18n-micro-test-utils\nDESCRIPTION: This command installs the `nuxt-i18n-micro-test-utils` package as a development dependency. This package provides utilities for mocking and testing i18n configurations in Nuxt.js applications.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/testing.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install nuxt-i18n-micro-test-utils --save-dev\n```\n\n----------------------------------------\n\nTITLE: Clean Unused Translation Keys (Bash)\nDESCRIPTION: This command cleans unused translation keys from the translation files.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/cli.md#_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\ni18n-micro clean\n```\n\n----------------------------------------\n\nTITLE: Check Translation Key Existence - JavaScript\nDESCRIPTION: Checks if a translation key exists for the current locale using the `$has` method. It accepts a `key` (string) and returns a boolean indicating whether the key exists in the current locale's translations.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/composables/useI18n.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst { $has } = useI18n()\nconst exists = $has('hello')\nconsole.log(exists) // e.g., true\n```\n\n----------------------------------------\n\nTITLE: Registering a Nuxt Plugin (JavaScript)\nDESCRIPTION: This code snippet shows how to register a Nuxt plugin to handle translation modifications. It adds a plugin located at `./plugins/extend_locales` to the Nuxt configuration, enabling dynamic loading and registration of translations.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/api/events.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\naddPlugin({\n  src: resolve('./plugins/extend_locales'),\n})\n```\n\n----------------------------------------\n\nTITLE: Defining I18n Route with Locales (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to use the $defineI18nRoute function to define the available locales for a specific route. Only the specified locales ('en', 'fr', 'de') will be allowed for this route. This is useful for controlling access to content based on the user's language.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/per-component-translations.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useNuxtApp } from '#imports'\n\nconst { $defineI18nRoute } = useNuxtApp()\n\n$defineI18nRoute({\n  locales: ['en', 'fr', 'de'] // Only these locales are allowed for this route\n})\n```\n\n----------------------------------------\n\nTITLE: Switching Locale Route - Typescript\nDESCRIPTION: This snippet demonstrates how to generate a route object for a different locale using the `$switchLocaleRoute()` method. It takes the target locale as a parameter and returns a route object.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/api/methods.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// on /en/news\nconst routeFr = $switchLocaleRoute('fr')\n// Output: A route object with the new locale applied, e.g., { name: 'localized-news', params: { locale: 'fr' } }\n```\n\n----------------------------------------\n\nTITLE: JSON Number Formatting Example\nDESCRIPTION: Illustrates the JSON structure for a translation string with number formatting. The `{number}` placeholder will be replaced with the formatted number.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/components/i18n-t.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"item\": \"The number is: {number}\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering HTML with i18n-t in Vue\nDESCRIPTION: Demonstrates rendering translations as raw HTML using the `html` prop.  Be cautious with user-provided translations to avoid XSS vulnerabilities.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/components/i18n-t.md#_snippet_12\n\nLANGUAGE: vue\nCODE:\n```\n<i18n-t keypath=\"feedback.text\" html />\n```\n\n----------------------------------------\n\nTITLE: Translate Missing Keys via Google Translate (Bash)\nDESCRIPTION: This command translates missing keys using the Google Translate service.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/cli.md#_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\ni18n-micro translate --service google --token YOUR_GOOGLE_API_KEY\n```\n\n----------------------------------------\n\nTITLE: Custom Icon Style in `<i18n-switcher>` Vue\nDESCRIPTION: This snippet demonstrates how to style the dropdown icon within the `<i18n-switcher>` using the `customIconStyle` prop, modifying its font size and color.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/components/i18n-switcher.md#_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<i18n-switcher :customIconStyle=\"{ fontSize: '20px', color: '#007bff' }\"></i18n-switcher>\n```\n\n----------------------------------------\n\nTITLE: Getting the Current Locale Name - Typescript\nDESCRIPTION: This snippet demonstrates how to retrieve the current locale name from the `displayName` configuration using the `$getLocaleName()` method. The function returns a string or null if not found.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/api/methods.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst locale = $getLocaleName()\n// Output: 'English'\n```\n\n----------------------------------------\n\nTITLE: JSON Relative Date Formatting Example\nDESCRIPTION: Illustrates the JSON structure for a translation string with relative date formatting. The `{relativeDate}` placeholder will be replaced with the formatted relative date.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/components/i18n-t.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"item\": \"The relative date is: {relativeDate}\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Replace Arrays (Optional Extension) - TypeScript\nDESCRIPTION: This code snippet provides an optional extension to the update logic that replaces arrays instead of merging them. It checks if the source value is an array and replaces the corresponding value in the target object with a copy of the source array.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/api/i18n-cache-api.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nif (Array.isArray(source[key])) {\n  target[key] = [...source[key]]\n}\n```\n\n----------------------------------------\n\nTITLE: Replace Translation Values (Bash)\nDESCRIPTION: This command replaces translation values using a search string and a replacement string. It supports both simple string replacement and regular expression replacement.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/cli.md#_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\ni18n-micro replace-values --search \"Hello\" --replace \"Hi\"\n```\n\n----------------------------------------\n\nTITLE: Consistent Prefixes\nDESCRIPTION: Emphasizes the importance of using consistent and logical prefixes that reflect your application's structure in translations. It demonstrates usage of prefixes for pricing and security features.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/components/i18n-group.md#_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<i18n-group prefix=\"features.pricing\">\n<i18n-group prefix=\"features.security\">\n```\n\n----------------------------------------\n\nTITLE: Defining Primary Layer - TypeScript\nDESCRIPTION: This snippet demonstrates the configuration of the primary layer within a Nuxt.js application using the `nuxt-i18n` module. It defines locales (English and French), sets 'en' as the default locale, enables meta tag generation, and specifies 'locales' as the directory for translation files. This configuration serves as the base for other extended configurations.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/layers.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// basic/nuxt.config.ts (Primary Layer)\nexport default defineNuxtConfig({\n  i18n: {\n    locales: [\n      { code: 'en', iso: 'en-EN', dir: 'ltr' },\n      { code: 'fr', iso: 'fr-FR', dir: 'ltr' },\n    ],\n    defaultLocale: 'en',\n    meta: true,\n    translationDir: 'locales',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: i18n-t Date Formatting in Vue\nDESCRIPTION: Demonstrates date formatting with the `<i18n-t>` component, using the `date` prop to format a date string. It displays a localized date.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/components/i18n-t.md#_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<i18n-t keypath=\"data.item\" :date=\"'2023-12-31'\" />\n```\n\n----------------------------------------\n\nTITLE: Download Translations from Crowdin\nDESCRIPTION: This command fetches the latest translations from Crowdin and saves them locally, according to the paths specified in the Crowdin configuration file. It is used to update the project with the most recent translations from Crowdin.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/crowdin.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncrowdin download\n```\n\n----------------------------------------\n\nTITLE: Return URL Based on Target Route with $localePath (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use `$localePath` to return a URL based on the target route and current or specified locale. It takes a `RouteLocationRaw` object as input and returns a URL string.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/api/methods.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nconst localizedRoute = $localeRoute({ name: 'news' })\n// Output: url with new locale applied, e.g., '/en/nouvelles'\n```\n\n----------------------------------------\n\nTITLE: JSON Date Formatting Example\nDESCRIPTION: Illustrates the JSON structure for a translation string with date formatting. The `{date}` placeholder will be replaced with the formatted date.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/components/i18n-t.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"item\": \"The date is: {date}\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Translation and Formatting Utilities\nDESCRIPTION: Example demonstrating the usage of `useTranslationHelper`, `interpolate`, `FormatService`, and `RouteService` from the `nuxt-i18n-micro-core` package. This snippet shows how to load translations, interpolate values, format numbers and dates, and handle locale-specific routing.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/packages/core/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useTranslationHelper, interpolate, FormatService, RouteService } from 'nuxt-i18n-micro-core'\n\n// Initialize the translation helper\nconst translationHelper = useTranslationHelper()\n\n// Load translations for a specific locale\ntranslationHelper.loadTranslations('en', {\n  greeting: 'Hello, {name}!',\n  nested: {\n    message: 'This is a nested message.',\n  },\n})\n\n// Load page-specific translations for a specific locale\ntranslationHelper.loadPageTranslations('en', 'home', {\n  welcome: 'Welcome to the home page!',\n})\n\n// Retrieve a translation for a specific locale\nconst greeting = translationHelper.getTranslation<string>('en', 'index', 'greeting')\nconsole.log(greeting) // 'Hello, {name}!'\n\n// Interpolate placeholders\nconst interpolatedGreeting = interpolate(greeting!, { name: 'John' })\nconsole.log(interpolatedGreeting) // 'Hello, John!'\n\n// Format numbers, dates, and relative times\nconst formatService = new FormatService()\nconst formattedNumber = formatService.formatNumber(123456.789, 'en-US')\nconst formattedDate = formatService.formatDate(new Date(), 'en-US')\nconst formattedRelativeTime = formatService.formatRelativeTime(new Date(), 'en-US')\n\nconsole.log(formattedNumber) // '123,456.789'\nconsole.log(formattedDate) // '10/5/2023'\nconsole.log(formattedRelativeTime) // 'just now'\n\n// Handle locale-specific routing\nconst routeService = new RouteService(\n  i18nConfig,\n  router,\n  hashLocaleDefault,\n  noPrefixDefault,\n  navigateTo,\n  setCookie\n)\n\nconst localizedRoute = routeService.getLocalizedRoute('/about', currentRoute, 'en')\nconsole.log(localizedRoute) // Localized route object\n```\n\n----------------------------------------\n\nTITLE: Generating Localized Route - JavaScript\nDESCRIPTION: Generate a route localized to the current or specified locale. Shows how to use the `$localeRoute` method to create a localized route.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/composables/useI18n.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst { $localeRoute } = useI18n()\nconst route = $localeRoute('/about', 'fr')\n```\n\n----------------------------------------\n\nTITLE: Build for Production using Package Managers\nDESCRIPTION: This snippet shows how to build the application for production using npm, pnpm, yarn, and bun. This process optimizes the application for deployment and creates production-ready assets.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/packages/test-utils/example/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm run build\n\n# pnpm\npnpm build\n\n# yarn\nyarn build\n\n# bun\nbun run build\n```\n\n----------------------------------------\n\nTITLE: Translate All Keys via DeepL (Bash)\nDESCRIPTION: This command translates all keys, replacing existing translations, using the DeepL translation service.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/cli.md#_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\ni18n-micro translate --service deepl --token YOUR_DEEPL_API_KEY --replace\n```\n\n----------------------------------------\n\nTITLE: Initializing useLocaleHead with identifierAttribute option JavaScript\nDESCRIPTION: This code demonstrates how to use a custom identifier attribute, `data-i18n`, for the generated meta and link tags using the `identifierAttribute` option of the `useLocaleHead` composable.  This is useful for differentiating the tags when inspecting the document head.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/composables/useLocaleHead.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst head = useLocaleHead({ identifierAttribute: 'data-i18n' })\n```\n\n----------------------------------------\n\nTITLE: Import-csv Command Example\nDESCRIPTION: Example showing how to use the `import-csv` command, specifying the directory containing the CSV files to be imported. This imports CSV translation data into JSON files.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/cli.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ni18n-micro import-csv --csvDir csv_files\n```\n\n----------------------------------------\n\nTITLE: Custom Active Link Style in `<i18n-switcher>` Vue\nDESCRIPTION: This snippet shows how to style the active (selected) locale link within the `<i18n-switcher>` using the `customActiveLinkStyle` prop, affecting its color, font weight, and background color.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/components/i18n-switcher.md#_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<i18n-switcher :customActiveLinkStyle=\"{ color: 'green', fontWeight: 'bold', backgroundColor: '#f0f0f0' }\"></i18n-switcher>\n```\n\n----------------------------------------\n\nTITLE: Using Locale, Strategies and ModuleOptions in TypeScript\nDESCRIPTION: An example of how to use the types provided by the nuxt-i18n-micro-types package to define locales, routing strategies, module options, and route parameters. This demonstrates the type safety provided by the package when configuring internationalization in a Nuxt.js application.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/packages/types/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Locale, Strategies, ModuleOptions, I18nRouteParams } from 'nuxt-i18n-micro-types'\n\n// Define locales\nconst locales: Locale[] = [\n  {\n    code: 'en',\n    iso: 'en-US',\n    dir: 'ltr',\n    displayName: 'English',\n    baseUrl: 'https://example.com/en',\n  },\n  {\n    code: 'de',\n    iso: 'de-DE',\n    dir: 'ltr',\n    displayName: 'German',\n    baseUrl: 'https://example.com/de',\n  },\n]\n\n// Define routing strategy\nconst strategy: Strategies = 'prefix_except_default'\n\n// Define module options\nconst options: ModuleOptions = {\n  locales,\n  strategy,\n  defaultLocale: 'en',\n  includeDefaultLocaleRoute: true,\n}\n\n// Define route parameters\nconst routeParams: I18nRouteParams = {\n  en: { page: 'home' },\n  de: { page: 'startseite' },\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing useLocaleHead with addDirAttribute option JavaScript\nDESCRIPTION: This code shows how to initialize the `useLocaleHead` composable with the `addDirAttribute` option set to `false`.  This will prevent the `dir` attribute from being added to the HTML document. It is used to control the direction attribute of the HTML tag.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/composables/useLocaleHead.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst head = useLocaleHead({ addDirAttribute: false })\n```\n\n----------------------------------------\n\nTITLE: `<i18n-switcher>` with `before-selected-locale` Slot in Vue\nDESCRIPTION: This snippet demonstrates using the `before-selected-locale` slot to insert content before the currently selected locale label within the language switcher button of the `<i18n-switcher>` component, useful for adding icons or indicators.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/components/i18n-switcher.md#_snippet_12\n\nLANGUAGE: vue\nCODE:\n```\n<i18n-switcher>\n  <template #before-selected-locale>\n    <i class=\"icon-flag\"></i>\n  </template>\n</i18n-switcher>\n```\n\n----------------------------------------\n\nTITLE: Installing Nuxt I18n Micro via npm\nDESCRIPTION: Install the `nuxt-i18n-micro` module using npm. This command adds the module as a project dependency.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/getting-started.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install nuxt-i18n-micro\n```\n\n----------------------------------------\n\nTITLE: Setting the default locale\nDESCRIPTION: Sets the default locale for the application.  This is the locale that will be used if no other locale is specified.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/getting-started.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ndefaultLocale: 'en'\n```\n\n----------------------------------------\n\nTITLE: Translation JSON for i18n-t with Slots\nDESCRIPTION: This JSON file contains the translation for the `greeting` key used in the `<i18n-t>` example with slots. The value is the translated string.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/examples.md#_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"greeting\": \"Welcome to the page\"\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Dates using i18nUtils.td\nDESCRIPTION: This snippet demonstrates how to format dates based on the current locale using the `i18nUtils.td` function.  It takes a `Date` object as input and returns a string representing the formatted date, using the conventions for the current locale.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/packages/test-utils/README.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst formattedDate = i18nUtils.td(new Date())\nconsole.log(formattedDate)  // Output: formatted date\n```\n\n----------------------------------------\n\nTITLE: Passing Translation Keys to Utility Functions (JavaScript)\nDESCRIPTION: This JavaScript example demonstrates an alternative approach to using i18n composables within utility functions.  Instead of directly using `$t` within the utility function, the translation key is passed and the translation is fetched in the component.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/faq.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nshowError({\n  title: 'common.errors.unknown.title',\n  message: 'common.errors.unknown.message',\n  i18n: true\n})\n```\n\n----------------------------------------\n\nTITLE: Load Page Translations - JavaScript\nDESCRIPTION: Loads translations for the specified page and locale, enabling lazy-loading of translations, using the `$loadPageTranslations` method. It accepts a `locale` (string) and a `routeName` (string).\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/composables/useI18n.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst { $loadPageTranslations } = useI18n()\nawait $loadPageTranslations('fr', 'home')\n```\n\n----------------------------------------\n\nTITLE: Problematic Locale Switching Buttons - Vue\nDESCRIPTION: This snippet shows a problematic implementation of locale switching buttons in Vue. It might lead to hydration mismatches and incorrect application of the `disabled` attribute.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/strategy.md#_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<button\n  v-for=\"locale in availableLocales\"\n  :key=\"locale.code\"\n  :disabled=\"locale.isActive\"\n  :class=\"{ disabled: locale.isActive }\"\n  @click=\"() => $switchLocale(locale.code)\"\n>\n  Switch to {{ locale.code }}\n</button>\n```\n\n----------------------------------------\n\nTITLE: Clean Command Example\nDESCRIPTION: An example of using the `clean` command. This command removes unused translation keys from translation files.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/cli.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ni18n-micro clean\n```\n\n----------------------------------------\n\nTITLE: Adding Cloudflare Compatibility Flags in wrangler.toml\nDESCRIPTION: This TOML snippet shows how to enable Node.js compatibility when deploying on Cloudflare Pages or Cloudflare Workers.  By setting `compatibility_flags = [ \"nodejs_compat_v2\" ]`, many Node.js modules, including those used by `nuxt-i18n-micro`, can run smoothly.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/faq.md#_snippet_8\n\nLANGUAGE: toml\nCODE:\n```\ncompatibility_flags = [ \"nodejs_compat_v2\" ]\n```\n\n----------------------------------------\n\nTITLE: Custom Link Style in `<i18n-switcher>` Vue\nDESCRIPTION: This snippet demonstrates customizing the style of the `<NuxtLink>` elements within the `<i18n-switcher>` component using the `customLinkStyle` prop. It allows adjustment of padding, text color, and text decoration for the locale links.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/components/i18n-switcher.md#_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<i18n-switcher :customLinkStyle=\"{ padding: '8px 16px', color: '#333', textDecoration: 'none' }\"></i18n-switcher>\n```\n\n----------------------------------------\n\nTITLE: Dynamic Object Translation (en.json)\nDESCRIPTION: This JSON file contains an object with dynamic keys and values for translation.  The keys are the names of the object's properties, and the values are the translated strings.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/examples.md#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dynamicObject\": {\n    \"title\": \"Welcome to our site\",\n    \"description\": \"This is a brief description of our services.\",\n    \"footerNote\": \"Thank you for visiting!\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Plugin in Nuxt I18n Micro (Typescript)\nDESCRIPTION: This code snippet shows how to disable the general `plugin` in the Nuxt I18n Micro configuration. Disabling this plugin will prevent additional features or functionality from being integrated into your Nuxt application through this module. The `plugin` option is a boolean, and setting it to `false` disables the plugin.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/getting-started.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nplugin: false // Disable the plugin\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting the Locale using i18nUtils\nDESCRIPTION: This snippet illustrates how to set and get the current locale using the `i18nUtils.setLocale` and `i18nUtils.getLocale` functions. `setLocale` takes a locale string as input (e.g., 'en') and sets the current locale. `getLocale` returns the current locale as a string.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/packages/test-utils/README.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ni18nUtils.setLocale('en')  // Set current locale to English\nconst currentLocale = i18nUtils.getLocale()  // Get the current locale\n```\n\n----------------------------------------\n\nTITLE: Interpolate Function Example\nDESCRIPTION: An example of using the `interpolate` function to replace placeholders in a string with provided values. This function is useful for dynamic translation strings.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/packages/core/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = interpolate('Hello, {name}!', { name: 'John' })\nconsole.log(result) // 'Hello, John!'\n```\n\n----------------------------------------\n\nTITLE: Custom Item Style in `<i18n-switcher>` Vue\nDESCRIPTION: This example demonstrates how to customize each item (`<li>` element) in the dropdown list of the `<i18n-switcher>` component using the `customItemStyle` prop, allowing adjustments to margin and padding.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/components/i18n-switcher.md#_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<i18n-switcher :customItemStyle=\"{ margin: '5px 0', padding: '5px' }\"></i18n-switcher>\n```\n\n----------------------------------------\n\nTITLE: Preview Production Build using Package Managers\nDESCRIPTION: This snippet demonstrates how to locally preview the production build using npm, pnpm, yarn, and bun.  This allows developers to test the production build before deploying it to a live environment.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/packages/test-utils/example/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm run preview\n\n# pnpm\npnpm preview\n\n# yarn\nyarn preview\n\n# bun\nbun run preview\n```\n\n----------------------------------------\n\nTITLE: Linting the Code with PNPM\nDESCRIPTION: This command runs the linter to ensure your code adheres to the project's coding standards.  It's recommended to fix any linting errors before committing changes.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/contribution.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npnpm run lint\n```\n\n----------------------------------------\n\nTITLE: Strategies Type Definition in TypeScript\nDESCRIPTION: TypeScript type definition for the Strategies type, representing the available routing strategies for the nuxt-i18n-micro module. It defines the possible values for the routing strategy, which controls how locale prefixes are applied to routes.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/packages/types/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Strategies = 'no_prefix' | 'prefix_except_default' | 'prefix' | 'prefix_and_default'\n```\n\n----------------------------------------\n\nTITLE: Nuxt.js i18n Configuration (JavaScript)\nDESCRIPTION: This is an example of a Nuxt.js configuration file (`nuxt.config.js`) demonstrating how to configure the `@nuxtjs/i18n` module for internationalization.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/cli.md#_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  modules: ['@nuxtjs/i18n'],\n  i18n: {\n    locales: [\n      { code: 'en', iso: 'en-US' },\n      { code: 'fr', iso: 'fr-FR' },\n      { code: 'es', iso: 'es-ES' },\n      // Add other locales as needed\n    ],\n    defaultLocale: 'en',\n    vueI18n: {\n      fallbackLocale: 'en',\n    },\n    // Specify the directory where your translation files are stored\n    translationDir: 'locales',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: `<i18n-switcher>` with `before-dropdown` Slot in Vue\nDESCRIPTION: This snippet shows how to use the `before-dropdown` slot to insert content immediately before the dropdown menu in the `<i18n-switcher>` component, often utilized for adding a header or introductory text.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/components/i18n-switcher.md#_snippet_14\n\nLANGUAGE: vue\nCODE:\n```\n<i18n-switcher>\n  <template #before-dropdown>\n    <li class=\"dropdown-header\">Select Language</li>\n  </template>\n</i18n-switcher>\n```\n\n----------------------------------------\n\nTITLE: Start Development Server using Package Managers\nDESCRIPTION: This snippet demonstrates how to start the development server using npm, pnpm, yarn, and bun. The development server typically runs on localhost:3000 and provides hot reloading for efficient development.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/packages/test-utils/example/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm run dev\n\n# pnpm\npnpm dev\n\n# yarn\nyarn dev\n\n# bun\nbun run dev\n```\n\n----------------------------------------\n\nTITLE: Installing nuxt-i18n-micro-types with Yarn\nDESCRIPTION: Command to install the nuxt-i18n-micro-types package using Yarn.  This adds the package as a dependency to the project.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/packages/types/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add nuxt-i18n-micro-types\n```\n\n----------------------------------------\n\nTITLE: Custom Identifier Attribute with useLocaleHead JavaScript\nDESCRIPTION: This code demonstrates the usage of `useLocaleHead` with a custom identifier attribute. The `identifierAttribute` option is set to `data-i18n`, which will be used to identify the generated tags in the head section. This can be useful for debugging and customization.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/composables/useLocaleHead.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst head = useLocaleHead({ identifierAttribute: 'data-i18n' })\n```\n\n----------------------------------------\n\nTITLE: Installing Nuxt I18n Micro with npm\nDESCRIPTION: This command installs the nuxt-i18n-micro package as a dependency to your Nuxt project. It is a necessary step to use the module.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/index.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install nuxt-i18n-micro\n```\n\n----------------------------------------\n\nTITLE: Installing Nuxt I18n Micro with npm\nDESCRIPTION: This command installs the `nuxt-i18n-micro` package as a dependency to your Nuxt project using npm. This step is the first step in migrating from the traditional `nuxt-i18n`\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/migration.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install nuxt-i18n-micro\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server for Nuxt 3\nDESCRIPTION: This snippet shows how to start the development server for a Nuxt 3 project using npm, pnpm, yarn, and bun. It requires the dependencies to be installed. The server will run on http://localhost:3000 by default.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/test/fixtures/content/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm run dev\n\n# pnpm\npnpm run dev\n\n# yarn\nyarn dev\n\n# bun\nbun run dev\n```\n\n----------------------------------------\n\nTITLE: Nuxt I18n CLI Example\nDESCRIPTION: Shows an example of using the `i18n-micro text-to-i18n` command with specific options. This specifies the translation file (locales/en.json) and the context (auth) for the extracted strings.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/news/index.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ni18n-micro text-to-i18n --translationFile locales/en.json --context auth\n```\n\n----------------------------------------\n\nTITLE: Disabling Hooks in Nuxt I18n Micro (Typescript)\nDESCRIPTION: This code snippet illustrates how to disable the `hooks` functionality in the Nuxt I18n Micro configuration. Disabling hooks prevents the integration of additional features or functionality into your Nuxt application through the module's hook system. The `hooks` option is a boolean, and setting it to `false` disables the hooks.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/getting-started.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nhooks: false // Disable the hooks\n```\n\n----------------------------------------\n\nTITLE: Installing nuxt-i18n-micro-core\nDESCRIPTION: Instructions for installing the nuxt-i18n-micro-core package using yarn. This command adds the package to your project's dependencies.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/packages/core/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add nuxt-i18n-micro-core\n```\n\n----------------------------------------\n\nTITLE: I18n Group with Custom Class in Vue\nDESCRIPTION: Demonstrates adding a custom CSS class to the wrapper div of the `<i18n-group>` component using the `group-class` prop.  The `group-class` allows applying specific styles to sections or modules within the application.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/components/i18n-group.md#_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <i18n-group \n    prefix=\"user.profile\" \n    group-class=\"profile-section\"\n  >\n    <template #default=\"{ t }\">\n      <div class=\"user-info\">\n        <h2>{{ t('title') }}</h2>\n        <p>{{ t('bio') }}</p>\n        <div class=\"stats\">\n          <span>{{ t('stats.followers') }}</span>\n          <span>{{ t('stats.following') }}</span>\n        </div>\n      </div>\n    </template>\n  </i18n-group>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Running the Playground with PNPM\nDESCRIPTION: This command builds the playground environment, allowing you to test your changes in a sample Nuxt application before submitting a pull request.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/contribution.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\npnpm run dev:build\n```\n\n----------------------------------------\n\nTITLE: Check for Duplicate Translations (Bash)\nDESCRIPTION: This command checks for duplicate translation values within each locale across all translation files, including both global and page-specific translations.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/cli.md#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ni18n-micro check-duplicates\n```\n\n----------------------------------------\n\nTITLE: Writing Tests for Example Component\nDESCRIPTION: This TypeScript code provides a test suite for the `ExampleComponent` using Vitest and `@vue/test-utils`. It mounts the component and asserts that it renders the correct welcome message, default message, and custom message based on props. The translations are loaded from a JSON file using `setTranslationsFromJson` within a `beforeEach` hook, mocking the i18n functionality.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/testing.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// tests/unit/example.spec.ts\n\nimport { describe, it, expect, beforeEach } from 'vitest'\nimport { mount } from '@vue/test-utils'\nimport ExampleComponent from '@/components/ExampleComponent.vue'\nimport fs from 'fs'\nimport path from 'path'\nimport { setTranslationsFromJson } from './unit-setup'\n\ndescribe('ExampleComponent', () => {\n  beforeEach(async () => {\n    const fileContent = fs.readFileSync(path.join(__dirname, '../../locales/en-GB.json')).toString()\n    await setTranslationsFromJson('en', JSON.parse(fileContent))\n  })\n\n  it('renders the welcome message correctly', () => {\n    const wrapper = mount(ExampleComponent)\n    expect(wrapper.text()).toContain('Test from component: Welcome')\n  })\n\n  it('renders the default message correctly', () => {\n    const wrapper = mount(ExampleComponent)\n    expect(wrapper.find('[data-testid=\"message\"]').text()).toContain('Test message from props: Default Message')\n  })\n\n  it('renders the custom message correctly', () => {\n    const wrapper = mount(ExampleComponent, {\n      props: {\n        message: 'Custom Message',\n      },\n    })\n    expect(wrapper.find('[data-testid=\"message\"]').text()).toContain('Test message from props: Custom Message')\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Building Nuxt 3 Application for Production\nDESCRIPTION: This snippet demonstrates how to build a Nuxt 3 application for production using npm, pnpm, yarn, and bun.  Dependencies need to be installed. The output is a production-ready build of the application.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/test/fixtures/content/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm run build\n\n# pnpm\npnpm run build\n\n# yarn\nyarn build\n\n# bun\nbun run build\n```\n\n----------------------------------------\n\nTITLE: Export-csv Command Example\nDESCRIPTION: Example showing how to use the `export-csv` command, specifying the directory where the CSV files will be saved. This command exports translations to CSV format.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/cli.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ni18n-micro export-csv --csvDir csv_files\n```\n\n----------------------------------------\n\nTITLE: Running Tests with PNPM\nDESCRIPTION: These commands run the Playwright test suite to ensure everything is functioning as expected. This helps prevent regressions and ensures new changes don't break existing functionality.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/contribution.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npnpm run test:workspaces\npnpm run test\n```\n\n----------------------------------------\n\nTITLE: Installing Nuxt I18n Micro Test Utils with Yarn\nDESCRIPTION: This command installs the `nuxt-i18n-micro-test-utils` package using Yarn.  It performs the same function as the npm install command, but leverages Yarn's dependency management features.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/packages/test-utils/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add nuxt-i18n-micro-test-utils\n```\n\n----------------------------------------\n\nTITLE: Importing i18nUtils from Nuxt I18n Micro Test Utils\nDESCRIPTION: This statement imports the `i18nUtils` object from the `nuxt-i18n-micro-test-utils` package.  The `i18nUtils` object provides access to the various helper functions for translations, formatting, and locale management.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/packages/test-utils/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { i18nUtils } from 'nuxt-i18n-micro-test-utils'\n```\n\n----------------------------------------\n\nTITLE: Installing nuxt-i18n-micro-types with npm\nDESCRIPTION: Command to install the nuxt-i18n-micro-types package using npm. This adds the package as a dependency to the project.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/packages/types/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install nuxt-i18n-micro-types\n```\n\n----------------------------------------\n\nTITLE: Vue Template After Text-to-i18n\nDESCRIPTION: Example Vue template code after running the `text-to-i18n` command. The hardcoded text strings have been replaced with calls to the `$t` function using generated translation keys.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/cli.md#_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <h1>{{ $t('pages.home.welcome_to_our_site') }}</h1>\n    <p>{{ $t('pages.home.please_sign_in') }}</p>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: I18n Group with Dynamic Content in Vue\nDESCRIPTION: Shows how to use the `<i18n-group>` component with dynamic content, passing data to the translation function. It also illustrates how to translate dynamic lists of sections using index-based translation keys.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/components/i18n-group.md#_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <i18n-group prefix=\"blog.post\">\n    <template #default=\"{ t }\">\n      <article>\n        <h1>{{ t('title') }}</h1>\n        <div class=\"meta\">\n          {{ t('meta.author', { name: author }) }} |\n          {{ t('meta.date', { date: publishDate }) }}\n        </div>\n        <div v-for=\"(section, index) in sections\" :key=\"index\">\n          <h2>{{ t(`sections.${index}.title`) }}</h2>\n          <p>{{ t(`sections.${index}.content`) }}</p>\n        </div>\n      </article>\n    </template>\n  </i18n-group>\n</template>\n\n<script setup>\nconst author = 'John Doe'\nconst publishDate = '2024-01-01'\nconst sections = ['intro', 'main', 'conclusion']\n</script>\n```\n\n----------------------------------------\n\nTITLE: Validate Translation Files (Bash)\nDESCRIPTION: This command validates the integrity of the translation files.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/cli.md#_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\ni18n-micro validate\n```\n\n----------------------------------------\n\nTITLE: Vue Template Before Text-to-i18n\nDESCRIPTION: Example Vue template code before running the `text-to-i18n` command. It contains hardcoded text strings that need to be internationalized.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/cli.md#_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <h1>Welcome to our site</h1>\n    <p>Please sign in to continue</p>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: I18n Group CSS Styling\nDESCRIPTION: Illustrates basic CSS styling for the `i18n-group` class and an example custom class `profile-section`, applied via the `group-class` prop.  Demonstrates how to add base styles and apply section-specific styles.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/components/i18n-group.md#_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n.i18n-group {\n  /* Your base styles */\n}\n\n.profile-section {\n  /* Additional styles for profile sections */\n}\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes to GitHub\nDESCRIPTION: This command pushes the local changes to your forked repository on GitHub under the specified branch, allowing you to create a pull request.\nSOURCE: https://github.com/s00d/nuxt-i18n-micro/blob/main/docs/guide/contribution.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin feature/your-feature-name\n```"
  }
]