[
  {
    "owner": "daodao97",
    "repo": "chatmcp",
    "content": "TITLE: Configuring Project-Level Build and Installation for Flutter C++ App - CMake\nDESCRIPTION: This CMake script sets up the overall build, configuration, and installation flows for a Flutter-based C++ application called chatmcp. It sets project metadata, build options, and code standards, integrates the Flutter engine, manages plugins, and defines how assets and binaries are bundled for installation. Dependencies required include modern CMake, the Flutter SDK, and libraries like SQLite3; paths such as FLUTTER_LIBRARY, FLUTTER_ICU_DATA_FILE, and AOT_LIBRARY must be previously configured in the environment for installation to succeed. Key configurable parameters include build types (Debug, Profile, Release), asset and plugin directories, and runtime requirements like Unicode and exception settings. The script expects all relevant source, build, and asset files to be present in the specified subdirectories or generated by Flutter tooling.\nSOURCE: https://github.com/daodao97/chatmcp/blob/main/windows/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Project-level configuration.\ncmake_minimum_required(VERSION 3.14)\nproject(chatmcp LANGUAGES CXX)\n\n# The name of the executable created for the application. Change this to change\n# the on-disk name of your application.\nset(BINARY_NAME \"chatmcp\")\n\n# Explicitly opt in to modern CMake behaviors to avoid warnings with recent\n# versions of CMake.\ncmake_policy(VERSION 3.14...3.25)\n\n# Define build configuration option.\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n# Define settings for the Profile build mode.\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n\n# Use Unicode for all projects.\nadd_definitions(-DUNICODE -D_UNICODE)\n\n# Compilation settings that should be applied to most targets.\n#\n# Be cautious about adding new options here, as plugins use this function by\n# default. In most cases, you should add new options to specific targets instead\n# of modifying this function.\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n\n# Flutter library and tool build rules.\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\n# Application build; see runner/CMakeLists.txt.\nadd_subdirectory(\"runner\")\n\n\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n\n\n# === Installation ===\n# Support files are copied into place next to the executable, so that it can\n# run in place. This is done instead of making a separate bundle (as on Linux)\n# so that building and running from within Visual Studio will work.\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\n# Make the \"install\" step default, as it's required to run.\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n\n# Copy the native assets provided by the build.dart from all packages.\nset(NATIVE_ASSETS_DIR \"${PROJECT_BUILD_DIR}native_assets/windows/\")\ninstall(DIRECTORY \"${NATIVE_ASSETS_DIR}\"\n   DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n   COMPONENT Runtime)\n\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\n# Install the AOT library on non-Debug builds only.\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n\n# Install SQLite3 DLL\nfind_file(SQLITE3_DLL \n  NAMES \"sqlite3.dll\"\n  PATHS\n  \"${CMAKE_CURRENT_SOURCE_DIR}\"\n  DOC \"Path to SQLite3 DLL\"\n)\n\nif(SQLITE3_DLL)\n  install(FILES \"${SQLITE3_DLL}\"\n    DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n    COMPONENT Runtime)\n  message(STATUS \"Found SQLite3 DLL at: ${SQLITE3_DLL}\")\nelse()\n  message(WARNING \"sqlite3.dll not found. The application may not work correctly.\")\nendif()\n\n```\n\n----------------------------------------\n\nTITLE: Integrating Custom Build Steps for Flutter Tool Backend - CMake\nDESCRIPTION: This snippet creates a custom command and target in CMake to ensure the Flutter build backend runs whenever it is invoked. It uses a _phony_ file to force execution on every build and calls the Flutter tool backend script with environment and topology variables. The custom target 'flutter_assemble' depends on both the shared library and its headers being present. The mechanism relies on the CMAKE_COMMAND and Flutter-specific environment variables, and it assumes proper environment setup and script availability.\nSOURCE: https://github.com/daodao97/chatmcp/blob/main/linux/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Target for Flutter Assembly in CMake\nDESCRIPTION: Creates a custom target named `flutter_assemble`. This target depends on the output files generated by the `add_custom_command` (Flutter library, headers, wrapper sources). Building this target effectively triggers the execution of the Flutter tool backend command, ensuring all necessary Flutter artifacts are generated before dependent targets (like the wrapper libraries) are built.\nSOURCE: https://github.com/daodao97/chatmcp/blob/main/windows/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Command for Flutter Tool Backend in CMake\nDESCRIPTION: Sets up a custom command that executes the Flutter tool backend script (`tool_backend.bat`). This command is responsible for generating necessary build artifacts like the Flutter library, headers, and wrapper source files. A phony output file is used to ensure the command runs on every build, as precise input/output tracking is difficult. It passes environment variables and target platform information to the script.\nSOURCE: https://github.com/daodao97/chatmcp/blob/main/windows/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\n# === Flutter tool backend ===\n# _phony_ is a non-existent file to force this command to run every time,\n# since currently there's no way to get a full input/output list from the\n# flutter tool.\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Build Step Dependency\nDESCRIPTION: Adds a dependency to ensure that the `flutter_assemble` target (defined within the Flutter subdirectory build rules) is built before the main application executable (`BINARY_NAME`). This guarantees that necessary Flutter assets and code are generated first.\nSOURCE: https://github.com/daodao97/chatmcp/blob/main/linux/CMakeLists.txt#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Windows Runner with CMake - CMake\nDESCRIPTION: This CMake script defines how to build the native Windows runner for a Flutter project, specifying the minimum CMake version, project language, and executable target with all required source files (including C++ and Flutter-generated files). It applies standard build settings, injects version info through preprocessor definitions, handles Windows/C++ symbol conflicts, links the Flutter and system libraries needed, and sets up dependencies to trigger Flutter's code generation before build. Required dependencies include Flutter for Windows, CMake >=3.14, a recent C++ toolchain, and Flutter toolchain integration. Key parameters are the executable target name, source file list, build version info, and relevant library links. The output is a properly configured runner executable for Windows that can host and launch the Flutter application.\nSOURCE: https://github.com/daodao97/chatmcp/blob/main/windows/runner/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(runner LANGUAGES CXX)\n\n# Define the application target. To change its name, change BINARY_NAME in the\n# top-level CMakeLists.txt, not the value here, or `flutter run` will no longer\n# work.\n#\n# Any new source files that you add to the application should be added here.\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n\n# Apply the standard set of build settings. This can be removed for applications\n# that need different build settings.\napply_standard_settings(${BINARY_NAME})\n\n# Add preprocessor definitions for the build version.\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION=\\\"${FLUTTER_VERSION}\\\"\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}\")\n\n# Disable Windows macros that collide with C++ standard library functions.\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\n\n# Add dependency libraries and include directories. Add any application-specific\n# dependencies here.\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_link_libraries(${BINARY_NAME} PRIVATE \"dwmapi.lib\")\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n\n# Run the Flutter tool portions of the build. This must not be removed.\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Compilation Settings Function\nDESCRIPTION: Defines a CMake function `APPLY_STANDARD_SETTINGS` that takes a target name as input. This function applies common compilation settings: sets the C++ standard to C++14, enables common warnings (`-Wall`), treats warnings as errors (`-Werror`), enables optimization level O3 for non-Debug builds (`-O3`), and defines the `NDEBUG` macro for non-Debug builds.\nSOURCE: https://github.com/daodao97/chatmcp/blob/main/linux/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Setting Runtime Path (RPATH) for Installation\nDESCRIPTION: Configures the runtime path (RPATH) for the installed executable. `$ORIGIN/lib` tells the dynamic linker to look for shared libraries in a 'lib' directory relative to the executable's location.\nSOURCE: https://github.com/daodao97/chatmcp/blob/main/linux/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Defining and Configuring Flutter Interface Library in CMake\nDESCRIPTION: Creates a list (`FLUTTER_LIBRARY_HEADERS`) of necessary Flutter header files, prepends the ephemeral directory path to each header, and defines an INTERFACE library named `flutter`. This library specifies the include directories and links against the Flutter library's import library (`.lib`), making Flutter APIs available to targets that link against `flutter`. It also adds a dependency on the `flutter_assemble` custom target.\nSOURCE: https://github.com/daodao97/chatmcp/blob/main/windows/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Finding GTK+ 3.0 Dependency\nDESCRIPTION: Uses PkgConfig to find the GTK+ 3.0 library. `REQUIRED` ensures the build stops if GTK+ 3.0 is not found. `IMPORTED_TARGET` creates an imported target `PkgConfig::GTK` which encapsulates the library's usage requirements (include paths, link flags).\nSOURCE: https://github.com/daodao97/chatmcp/blob/main/linux/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n```\n\n----------------------------------------\n\nTITLE: Linking Flutter Library\nDESCRIPTION: Links the main application executable (`BINARY_NAME`) against the Flutter library target ('flutter'). The `PRIVATE` keyword indicates that this dependency is only needed for building the executable itself.\nSOURCE: https://github.com/daodao97/chatmcp/blob/main/linux/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter System Dependencies and Library Targets - CMake\nDESCRIPTION: This block locates and configures required system packages (GTK, GLib, GIO) for building a Flutter application on Linux using pkg-config, and sets up paths to generated artifacts and build directories. It registers header files, defines an INTERFACE library target (flutter), sets include directories and link libraries, and adds build dependencies to integrate with the larger Flutter toolchain. Key parameters include variables for library locations and header lists. Dependencies include the CMake find_package and pkg_check_modules functions, as well as the ephemeral folder generated by the Flutter tool.\nSOURCE: https://github.com/daodao97/chatmcp/blob/main/linux/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n)\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Linking GTK Library\nDESCRIPTION: Links the main application executable (`BINARY_NAME`) against the imported GTK+ 3.0 target (`PkgConfig::GTK`). This provides the necessary include paths and linker flags for using GTK.\nSOURCE: https://github.com/daodao97/chatmcp/blob/main/linux/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\n```\n\n----------------------------------------\n\nTITLE: Adding Application ID Preprocessor Definition\nDESCRIPTION: Adds a preprocessor definition `APPLICATION_ID` with the value previously set in the `APPLICATION_ID` CMake variable. This makes the application ID available in the C++ source code.\nSOURCE: https://github.com/daodao97/chatmcp/blob/main/linux/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n```\n\n----------------------------------------\n\nTITLE: Installing SQLite3 Dependencies on Linux (Bash)\nDESCRIPTION: Installs the necessary SQLite3 libraries (`libsqlite3-0` and `libsqlite3-dev`) on Debian-based Linux systems using apt-get. This is required for the `sqflite_common_ffi` Flutter package dependency.\nSOURCE: https://github.com/daodao97/chatmcp/blob/main/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install libsqlite3-0 libsqlite3-dev\n```\n\n----------------------------------------\n\nTITLE: Running ChatMcp in Development Mode using Flutter (Bash)\nDESCRIPTION: Commands to fetch Flutter project dependencies using `flutter pub get` and then run the application on a connected macOS device or simulator using `flutter run -d macos`. This is used for developing and testing the application.\nSOURCE: https://github.com/daodao97/chatmcp/blob/main/README.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nflutter pub get\nflutter run -d macos\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugin Build Rules\nDESCRIPTION: Includes a CMake file generated by Flutter (`flutter/generated_plugins.cmake`). This file contains rules for building any native code plugins used by the Flutter application and integrating them into the build.\nSOURCE: https://github.com/daodao97/chatmcp/blob/main/linux/CMakeLists.txt#_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Installing AOT Library\nDESCRIPTION: Installs the Ahead-of-Time (AOT) compiled Flutter application library (`AOT_LIBRARY`) into the bundle's library directory (`INSTALL_BUNDLE_LIB_DIR`), but only if the current build type is not 'Debug'. AOT libraries are used for Release and Profile builds.\nSOURCE: https://github.com/daodao97/chatmcp/blob/main/linux/CMakeLists.txt#_snippet_35\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining the Main Application Executable\nDESCRIPTION: Defines the main executable target using the name stored in `BINARY_NAME`. It lists the C++ source files required to build the executable: 'main.cc', 'my_application.cc', and a Flutter-generated plugin registration file.\nSOURCE: https://github.com/daodao97/chatmcp/blob/main/linux/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter C++ Wrapper Plugin Library in CMake\nDESCRIPTION: Defines a static library `flutter_wrapper_plugin` using the core and plugin-specific C++ wrapper source files. It applies standard build settings, sets properties for position-independent code and hidden visibility, links it publicly against the `flutter` interface library, specifies public include directories, and adds a dependency on the `flutter_assemble` target. This library provides the necessary C++ bindings for Flutter plugins.\nSOURCE: https://github.com/daodao97/chatmcp/blob/main/windows/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\n# Wrapper sources needed for a plugin.\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter C++ Wrapper Application Library in CMake\nDESCRIPTION: Defines a static library `flutter_wrapper_app` using the core and application-specific C++ wrapper source files. It applies standard build settings, links it publicly against the `flutter` interface library, specifies public include directories, and adds a dependency on the `flutter_assemble` target. This library provides the necessary C++ bindings for the main application runner.\nSOURCE: https://github.com/daodao97/chatmcp/blob/main/windows/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\n# Wrapper sources needed for the runner.\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for Cross-Compilation Sysroot\nDESCRIPTION: Checks if a Flutter-specific sysroot path (`FLUTTER_TARGET_PLATFORM_SYSROOT`) is defined. If so, it configures CMake to use this sysroot for cross-compilation, adjusting root path settings for finding programs, packages, libraries, and includes.\nSOURCE: https://github.com/daodao97/chatmcp/blob/main/linux/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nif(FLUTTER_TARGET_PLATFORM_SYSROOT)\n  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Default Installation Prefix\nDESCRIPTION: Sets the default installation prefix (`CMAKE_INSTALL_PREFIX`) to the `BUILD_BUNDLE_DIR` if it hasn't been explicitly set otherwise. This directs the installation process to create the bundle within the build directory.\nSOURCE: https://github.com/daodao97/chatmcp/blob/main/linux/CMakeLists.txt#_snippet_22\n\nLANGUAGE: cmake\nCODE:\n```\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Cleaning Installation Bundle Directory\nDESCRIPTION: Registers CMake code to be executed during the installation phase (`COMPONENT Runtime`). This code removes the entire bundle directory (`BUILD_BUNDLE_DIR`) recursively before installing files, ensuring a clean installation.\nSOURCE: https://github.com/daodao97/chatmcp/blob/main/linux/CMakeLists.txt#_snippet_23\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\")\n  \" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Finding PkgConfig Dependency\nDESCRIPTION: Finds the PkgConfig tool, which is required for locating other libraries like GTK using .pc files. The `REQUIRED` keyword makes the build fail if PkgConfig is not found.\nSOURCE: https://github.com/daodao97/chatmcp/blob/main/linux/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: Cleaning Flutter Asset Directory During Installation\nDESCRIPTION: Registers CMake code to remove the existing Flutter assets directory within the installation data directory (`INSTALL_BUNDLE_DATA_DIR`) before installing the new assets. This prevents stale asset files from remaining after a build.\nSOURCE: https://github.com/daodao97/chatmcp/blob/main/linux/CMakeLists.txt#_snippet_33\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Paths and Exporting to Parent Scope in CMake\nDESCRIPTION: Defines the path to the main Flutter library (`flutter_windows.dll`) and the ICU data file (`icudtl.dat`). It also defines paths for the project build directory and the Ahead-of-Time (AOT) compiled library. These variables are exported to the parent scope using `PARENT_SCOPE` to make them available in the main project's CMakeLists.txt file.\nSOURCE: https://github.com/daodao97/chatmcp/blob/main/windows/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n# === Flutter Library ===\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Assets Directory\nDESCRIPTION: Installs the Flutter assets directory (typically `${PROJECT_BUILD_DIR}/flutter_assets`) into the installation bundle's data directory (`INSTALL_BUNDLE_DATA_DIR`).\nSOURCE: https://github.com/daodao97/chatmcp/blob/main/linux/CMakeLists.txt#_snippet_34\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Installing ICU Data File\nDESCRIPTION: Installs the Flutter ICU data file (`FLUTTER_ICU_DATA_FILE`) into the designated data directory (`INSTALL_BUNDLE_DATA_DIR`) within the installation bundle.\nSOURCE: https://github.com/daodao97/chatmcp/blob/main/linux/CMakeLists.txt#_snippet_27\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Installing Native Assets\nDESCRIPTION: Installs the entire directory containing native assets (`NATIVE_ASSETS_DIR`) into the installation bundle's library directory (`INSTALL_BUNDLE_LIB_DIR`).\nSOURCE: https://github.com/daodao97/chatmcp/blob/main/linux/CMakeLists.txt#_snippet_31\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(DIRECTORY \"${NATIVE_ASSETS_DIR}\"\n   DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n   COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Installing Application Executable\nDESCRIPTION: Specifies rules to install the main application executable (`BINARY_NAME`) into the root of the installation prefix (`CMAKE_INSTALL_PREFIX`) as part of the `Runtime` component.\nSOURCE: https://github.com/daodao97/chatmcp/blob/main/linux/CMakeLists.txt#_snippet_26\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Defining C++ Wrapper Source File Lists in CMake\nDESCRIPTION: Defines three lists (`CPP_WRAPPER_SOURCES_CORE`, `CPP_WRAPPER_SOURCES_PLUGIN`, `CPP_WRAPPER_SOURCES_APP`) containing the C++ source file names for the core wrapper implementations, plugin-specific wrapper code, and application-level wrapper code (engine and view controller). The `TRANSFORM` command is used to prepend the `WRAPPER_ROOT` path to each filename in the lists.\nSOURCE: https://github.com/daodao97/chatmcp/blob/main/windows/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n# === Wrapper ===\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Including Flutter Managed Subdirectory\nDESCRIPTION: Includes the subdirectory specified by `FLUTTER_MANAGED_DIR` into the build. This processes the CMakeLists.txt file within that directory, typically setting up Flutter library targets.\nSOURCE: https://github.com/daodao97/chatmcp/blob/main/linux/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Including Generated Flutter Configuration in CMake\nDESCRIPTION: Includes a CMake file (`generated_config.cmake`) located in the `EPHEMERAL_DIR`. This file is typically generated by the Flutter tool and contains project-specific build configurations.\nSOURCE: https://github.com/daodao97/chatmcp/blob/main/windows/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n# Configuration provided via flutter tool.\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting GTK Application Identifier\nDESCRIPTION: Sets a CMake variable `APPLICATION_ID` to a unique identifier ('run.daodao.chatmcp') required by GTK for desktop application integration.\nSOURCE: https://github.com/daodao97/chatmcp/blob/main/linux/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(APPLICATION_ID \"run.daodao.chatmcp\")\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Policy for Modern Behavior\nDESCRIPTION: Sets CMake policy CMP0063 to NEW, opting into modern behavior related to honoring link flags in target_link_libraries, which helps avoid warnings with newer CMake versions.\nSOURCE: https://github.com/daodao97/chatmcp/blob/main/linux/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_policy(SET CMP0063 NEW)\n```\n\n----------------------------------------\n\nTITLE: Setting Executable Output Directory\nDESCRIPTION: Sets the `RUNTIME_OUTPUT_DIRECTORY` property for the executable target (`BINARY_NAME`). This places the built executable in a subdirectory named 'intermediates_do_not_run' within the CMake binary directory, discouraging users from running this unbundled version directly.\nSOURCE: https://github.com/daodao97/chatmcp/blob/main/linux/CMakeLists.txt#_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\nset_target_properties(${BINARY_NAME}\n  PROPERTIES\n  RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/intermediates_do_not_run\"\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Installation Bundle Directory\nDESCRIPTION: Sets the `BUILD_BUNDLE_DIR` variable to define the location where the installed application bundle will be created, relative to the project's binary directory.\nSOURCE: https://github.com/daodao97/chatmcp/blob/main/linux/CMakeLists.txt#_snippet_21\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\n```\n\n----------------------------------------\n\nTITLE: Defining Installation Library Directory\nDESCRIPTION: Sets the `INSTALL_BUNDLE_LIB_DIR` variable to the path where libraries (like the Flutter engine library and plugin libraries) will be installed within the bundle, typically `[prefix]/lib`.\nSOURCE: https://github.com/daodao97/chatmcp/blob/main/linux/CMakeLists.txt#_snippet_25\n\nLANGUAGE: cmake\nCODE:\n```\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n```\n\n----------------------------------------\n\nTITLE: Defining Installation Data Directory\nDESCRIPTION: Sets the `INSTALL_BUNDLE_DATA_DIR` variable to the path where application data (like assets) will be installed within the bundle, typically `[prefix]/data`.\nSOURCE: https://github.com/daodao97/chatmcp/blob/main/linux/CMakeLists.txt#_snippet_24\n\nLANGUAGE: cmake\nCODE:\n```\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\n```\n\n----------------------------------------\n\nTITLE: Defining Native Assets Directory\nDESCRIPTION: Sets the `NATIVE_ASSETS_DIR` variable to the path containing native assets generated by Dart build processes, located within the project build directory.\nSOURCE: https://github.com/daodao97/chatmcp/blob/main/linux/CMakeLists.txt#_snippet_30\n\nLANGUAGE: cmake\nCODE:\n```\nset(NATIVE_ASSETS_DIR \"${PROJECT_BUILD_DIR}native_assets/linux/\")\n```\n\n----------------------------------------\n\nTITLE: Setting Default Build Type\nDESCRIPTION: Sets the default CMake build type to 'Debug' if no build type is already specified. It caches this variable and defines the allowed values ('Debug', 'Profile', 'Release') for the Flutter build mode.\nSOURCE: https://github.com/daodao97/chatmcp/blob/main/linux/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Flutter Asset Directory Name\nDESCRIPTION: Sets the `FLUTTER_ASSET_DIR_NAME` variable to 'flutter_assets'. This standard name is used for the directory containing Flutter application assets.\nSOURCE: https://github.com/daodao97/chatmcp/blob/main/linux/CMakeLists.txt#_snippet_32\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\n```\n\n----------------------------------------\n\nTITLE: Defining a List Prepend Function in CMake - CMake\nDESCRIPTION: This snippet implements a custom function (list_prepend) in CMake to prepend a specified prefix to each element in a list. It compensates for the lack of list(TRANSFORM ... PREPEND ...) in older CMake versions such as 3.10. The function takes the name of a list variable and a prefix, concatenates the prefix to each list element, and updates the list in the parent scope. Designed for compatibility with CMake 3.10, it requires that the specified list variable exists in the calling context.\nSOURCE: https://github.com/daodao97/chatmcp/blob/main/linux/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Engine Library\nDESCRIPTION: Installs the main Flutter engine library file (`FLUTTER_LIBRARY`) into the designated library directory (`INSTALL_BUNDLE_LIB_DIR`) within the installation bundle.\nSOURCE: https://github.com/daodao97/chatmcp/blob/main/linux/CMakeLists.txt#_snippet_28\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Installing Bundled Plugin Libraries\nDESCRIPTION: Iterates over a list of libraries specified in the `PLUGIN_BUNDLED_LIBRARIES` variable (likely populated by `generated_plugins.cmake`) and installs each one into the bundle's library directory (`INSTALL_BUNDLE_LIB_DIR`).\nSOURCE: https://github.com/daodao97/chatmcp/blob/main/linux/CMakeLists.txt#_snippet_29\n\nLANGUAGE: cmake\nCODE:\n```\nforeach(bundled_library ${PLUGIN_BUNDLED_LIBRARIES})\n  install(FILES \"${bundled_library}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendforeach(bundled_library)\n```\n\n----------------------------------------\n\nTITLE: Installing uv using Homebrew (Bash)\nDESCRIPTION: Installs the `uv` tool using the Homebrew package manager, typically on macOS. This tool is mentioned as a prerequisite under the Usage section.\nSOURCE: https://github.com/daodao97/chatmcp/blob/main/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# uvx\nbrew install uv\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js (for npx) using Homebrew (Bash)\nDESCRIPTION: Installs Node.js using the Homebrew package manager, typically on macOS. Installing Node.js also provides `npx`. This tool is mentioned as a prerequisite under the Usage section.\nSOURCE: https://github.com/daodao97/chatmcp/blob/main/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# npx\nbrew install node\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Settings to Executable\nDESCRIPTION: Calls the previously defined `apply_standard_settings` function to apply the common compilation flags and C++ standard setting to the main application executable target (`BINARY_NAME`).\nSOURCE: https://github.com/daodao97/chatmcp/blob/main/linux/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\napply_standard_settings(${BINARY_NAME})\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version and Ephemeral Directory in CMake\nDESCRIPTION: Specifies the minimum required CMake version (3.14) for the project and defines a variable `EPHEMERAL_DIR` pointing to a subdirectory for storing temporary build artifacts generated by the Flutter tool.\nSOURCE: https://github.com/daodao97/chatmcp/blob/main/windows/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: Specifies the minimum required version of CMake needed to process this build file. This ensures compatibility with CMake features used later in the script.\nSOURCE: https://github.com/daodao97/chatmcp/blob/main/linux/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n```\n\n----------------------------------------\n\nTITLE: Defining Project Name and Language\nDESCRIPTION: Defines the project name as 'runner' and specifies that the primary language used is C++. This command initializes the project within CMake.\nSOURCE: https://github.com/daodao97/chatmcp/blob/main/linux/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nproject(runner LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Setting Executable Binary Name\nDESCRIPTION: Sets a CMake variable `BINARY_NAME` to 'chatmcp'. This variable is used later to define the name of the final executable file.\nSOURCE: https://github.com/daodao97/chatmcp/blob/main/linux/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(BINARY_NAME \"chatmcp\")\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Managed Directory Path\nDESCRIPTION: Sets the `FLUTTER_MANAGED_DIR` variable to the path of the 'flutter' subdirectory within the current source directory. This directory typically contains Flutter-generated build files.\nSOURCE: https://github.com/daodao97/chatmcp/blob/main/linux/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\n```\n\n----------------------------------------\n\nTITLE: Creating and Pushing a Git Release Tag in Bash\nDESCRIPTION: These Bash commands ensure the local main branch is up-to-date, create a new semantic version tag (e.g., v1.0.0), and push the tag to the remote 'origin' repository. Pushing the tag typically triggers an automated release workflow in CI/CD systems like GitHub Actions.\nSOURCE: https://github.com/daodao97/chatmcp/blob/main/docs/releasing.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Ensure you're on the main branch\ngit checkout main\ngit pull origin main\n\n# Create a new tag\ngit tag v1.0.0  # Replace with your version number\n\n# Push the tag\ngit push origin v1.0.0\n```\n\n----------------------------------------\n\nTITLE: Defining Wrapper Root and Fallback Platform in CMake\nDESCRIPTION: Sets the `WRAPPER_ROOT` variable to the location of the C++ client wrapper source code within the ephemeral directory. It also provides a fallback value ('windows-x64') for the `FLUTTER_TARGET_PLATFORM` variable if it's not already defined, ensuring compatibility with older Flutter tool versions.\nSOURCE: https://github.com/daodao97/chatmcp/blob/main/windows/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n# TODO: Move the rest of this into files in ephemeral. See\n# https://github.com/flutter/flutter/issues/57146.\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n\n# Set fallback configurations for older versions of the flutter tool.\nif (NOT DEFINED FLUTTER_TARGET_PLATFORM)\n  set(FLUTTER_TARGET_PLATFORM \"windows-x64\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Resetting ChatMcp Application Data on Linux (Bash)\nDESCRIPTION: Provides the command to remove the ChatMcp application data directory on Linux, effectively resetting the application's data and configuration.\nSOURCE: https://github.com/daodao97/chatmcp/blob/main/README.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf ~/.local/share/ChatMcp\n```\n\n----------------------------------------\n\nTITLE: Resetting ChatMcp Application Data on macOS (Bash)\nDESCRIPTION: Provides the command to remove the ChatMcp application support directory on macOS, effectively resetting the application's data and configuration.\nSOURCE: https://github.com/daodao97/chatmcp/blob/main/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf ~/Library/Application\\ Support/ChatMcp\n```\n\n----------------------------------------\n\nTITLE: Locating ChatMcp Data Directory on Linux (Bash)\nDESCRIPTION: Specifies the default path to the application data directory for ChatMcp on Linux within the user's local share directory, where logs and data are stored.\nSOURCE: https://github.com/daodao97/chatmcp/blob/main/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n~/.local/share/ChatMcp\n```\n\n----------------------------------------\n\nTITLE: Locating ChatMcp Data Directory on Windows (Batch)\nDESCRIPTION: Specifies the default path to the application data directory for ChatMcp on Windows using the APPDATA environment variable, where logs and data are stored.\nSOURCE: https://github.com/daodao97/chatmcp/blob/main/README.md#_snippet_4\n\nLANGUAGE: batch\nCODE:\n```\n%APPDATA%\\ChatMcp\n```\n\n----------------------------------------\n\nTITLE: Locating ChatMcp Data Directory on macOS (Bash)\nDESCRIPTION: Specifies the default path to the application support directory for ChatMcp on macOS, where logs and data are stored.\nSOURCE: https://github.com/daodao97/chatmcp/blob/main/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n~/Library/Application Support/ChatMcp\n```\n\n----------------------------------------\n\nTITLE: Resetting ChatMcp Application Data on Windows (Batch)\nDESCRIPTION: Provides the command to recursively and quietly remove the ChatMcp application data directory on Windows, effectively resetting the application's data and configuration.\nSOURCE: https://github.com/daodao97/chatmcp/blob/main/README.md#_snippet_7\n\nLANGUAGE: batch\nCODE:\n```\nrd /s /q \"%APPDATA%\\ChatMcp\"\n```"
  }
]