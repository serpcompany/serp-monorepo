[
  {
    "owner": "belfryscad",
    "repo": "bosl2",
    "content": "TITLE: Basic align() Module Usage in BOSL2\nDESCRIPTION: Demonstrates how align() automatically selects the appropriate anchor for the child object, overriding any specified anchor to create flush alignment with the parent's face.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_45\n\nLANGUAGE: openscad\nCODE:\n```\ninclude<BOSL2/std.scad>\ncuboid([50,40,15])\n    align(RIGHT)\n        color(\"lightblue\")cuboid(5);\n```\n\n----------------------------------------\n\nTITLE: Using align() with Reoriented Children in BOSL2\nDESCRIPTION: Shows how align() works with children that have a changed orientation using the orient parameter, correctly using the top anchor of the child when oriented downward.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_50\n\nLANGUAGE: openscad\nCODE:\n```\ninclude<BOSL2/std.scad>\ncuboid([50,40,15])\n    align(TOP,RIGHT)\n        color(\"lightblue\")prismoid([10,5],[7,4],height=4,orient=DOWN);\n```\n\n----------------------------------------\n\nTITLE: Using align() with Non-90-degree Rotations in BOSL2\nDESCRIPTION: Shows how align() handles children with arbitrary rotation angles by aligning the nearest corner of the child with the specified parent anchor.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_52\n\nLANGUAGE: openscad\nCODE:\n```\ninclude<BOSL2/std.scad>\ncuboid([50,40,15])\n    align(TOP,RIGHT)\n        color(\"lightblue\")cuboid(8,spin=33);\n```\n\n----------------------------------------\n\nTITLE: Anchoring a Sphere at Pole with Constant - BOSL2 - OpenSCAD 3D\nDESCRIPTION: This snippet demonstrates anchoring a BOSL2 `sphere` module using the vector constant `TOP`. This constant represents the vector `[0,0,1]`, anchoring the sphere at its North pole (the point along the Z+ axis on its surface), aligning that point with the origin.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_8\n\nLANGUAGE: OpenSCAD-3D\nCODE:\n```\ninclude <BOSL2/std.scad>\nsphere(r=50, anchor=TOP);\n```\n\n----------------------------------------\n\nTITLE: Anchoring a Cylinder at Bottom Rim with Constants - BOSL2 - OpenSCAD 3D\nDESCRIPTION: This snippet illustrates anchoring a BOSL2 `cylinder` module using vector constants `BOTTOM+FRONT`. This anchors the cylinder at a point on its bottom rim, specifically in the direction of the negative Y-axis from the center of the bottom face.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_6\n\nLANGUAGE: OpenSCAD-3D\nCODE:\n```\ninclude <BOSL2/std.scad>\ncylinder(r1=25, r2=15, h=60, anchor=BOTTOM+FRONT);\n```\n\n----------------------------------------\n\nTITLE: Anchoring a Cube at Corner with Vector - BOSL2 - OpenSCAD 3D\nDESCRIPTION: This snippet demonstrates anchoring a BOSL2 `cube` module using a vector `[-1,-1,1]` assigned to the `anchor` parameter. This vector points towards the lower-front-left corner (assuming the cube's default orientation before anchoring), aligning that corner with the origin (0,0,0).\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_0\n\nLANGUAGE: OpenSCAD-3D\nCODE:\n```\ninclude <BOSL2/std.scad>\n// Anchor at upper-front-left corner\ncube([40,30,50], anchor=[-1,-1,1]);\n```\n\n----------------------------------------\n\nTITLE: Anchoring a Cube at Face with Constant - BOSL2 - OpenSCAD 3D\nDESCRIPTION: This snippet shows anchoring a BOSL2 `cube` module using the vector constant `FRONT`. This constant represents the vector `[0,-1,0]`, anchoring the cube at the center of its front face (along the Y- axis).\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_4\n\nLANGUAGE: OpenSCAD-3D\nCODE:\n```\ninclude <BOSL2/std.scad>\ncube([40,30,50], anchor=FRONT);\n```\n\n----------------------------------------\n\nTITLE: Using position() Module in BOSL2 for Anchor-based Positioning\nDESCRIPTION: Shows how position() aligns child objects at specific anchor points on the parent. Here the LEFT anchor of a cylinder is positioned at the RIGHT anchor of a cube.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_34\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\ncube(50,anchor=FRONT)     \n    position(RIGHT) cylinder(d=25,h=75,anchor=LEFT);\n```\n\n----------------------------------------\n\nTITLE: Anchored Cylinder with No Spin - BOSL2 - OpenSCAD 3D\nDESCRIPTION: This snippet shows a BOSL2 `cylinder` anchored at its front-bottom (`FRONT+BOT`). It serves as a baseline for demonstrating the effect of `spin` when the object is not centered at the origin.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_21\n\nLANGUAGE: OpenSCAD-3D\nCODE:\n```\ninclude <BOSL2/std.scad>\ncylinder(h=40,d=20,anchor=FRONT+BOT);\n```\n\n----------------------------------------\n\nTITLE: Anchoring a Teardrop with Named Anchor - BOSL2 - OpenSCAD 3D\nDESCRIPTION: This snippet demonstrates anchoring the BOSL2 `teardrop` module using the string `\"cap\"` as a named anchor. This is a shape-specific anchor provided by the `teardrop` module, aligning the tip (or 'cap') of the teardrop with the origin.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_11\n\nLANGUAGE: OpenSCAD-3D\nCODE:\n```\ninclude <BOSL2/std.scad>\nteardrop(d=100, l=20, anchor=\"cap\");\n```\n\n----------------------------------------\n\nTITLE: Cube Anchored at Center - BOSL2 - OpenSCAD 3D\nDESCRIPTION: This snippet shows a BOSL2 `cube` anchored at its geometric center using `anchor=CENTER`. This places the origin (0,0,0) at the center of the cube.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_27\n\nLANGUAGE: OpenSCAD-3D\nCODE:\n```\ninclude <BOSL2/std.scad>\ncube([20,20,50], anchor=CENTER);\n```\n\n----------------------------------------\n\nTITLE: Anchoring a 2D Square with Constants - BOSL2 - OpenSCAD 2D\nDESCRIPTION: This snippet demonstrates anchoring a 2D BOSL2 `square` using vector constants `BACK+LEFT`. This aligns the point on the square corresponding to the Y+ and X- directions (typically the top-left corner in a standard 2D view) with the origin.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_15\n\nLANGUAGE: OpenSCAD-2D\nCODE:\n```\ninclude <BOSL2/std.scad>\nsquare([40,30], anchor=BACK+LEFT);\n```\n\n----------------------------------------\n\nTITLE: Anchoring a 2D Pentagon with 3D TOP Constant - BOSL2 - OpenSCAD 2D\nDESCRIPTION: This snippet illustrates anchoring a 2D BOSL2 `pentagon` using the 3D vector constant `TOP`. BOSL2 maps the Z coordinate of a 3D anchor vector to the Y coordinate for 2D shapes if the original Y is zero, so `TOP` ([0,0,1]) maps to [0,1] in 2D, anchoring the pentagon at its uppermost point (along the Y+ axis).\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_19\n\nLANGUAGE: OpenSCAD-2D\nCODE:\n```\ninclude <BOSL2/std.scad>\npentagon(d=50, anchor=TOP);\n```\n\n----------------------------------------\n\nTITLE: Nested Positioning with Multiple Objects in BOSL2\nDESCRIPTION: Demonstrates how multiple objects can be positioned relative to each other in a chain, eliminating the need to track transformation mathematics manually.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_35\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\ncube([50,50,30],center=true)\n    position(TOP+RIGHT) cube([25,40,10], anchor=RIGHT+BOT)\n       position(LEFT+FRONT+TOP) cube([12,12,8], anchor=LEFT+FRONT+BOT)\n         cylinder(h=10,r=3);\n```\n\n----------------------------------------\n\nTITLE: Using orient Parameter with Child Object in BOSL2\nDESCRIPTION: Demonstrates using orient= parameter directly on the child to orient it along a global axis, regardless of the parent's face orientation.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_39\n\nLANGUAGE: openscad\nCODE:\n```\ninclude<BOSL2/std.scad>\nprismoid([50,50],[30,30],h=40)\n  position(RIGHT+TOP)\n     cube([15,15,25],orient=RIGHT,anchor=LEFT+BOT);\n```\n\n----------------------------------------\n\nTITLE: 2D Positioning with position() in BOSL2\nDESCRIPTION: Demonstrates that the position() module works identically in 2D as it does in 3D, allowing for anchor-based positioning of 2D shapes.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_37\n\nLANGUAGE: openscad\nCODE:\n```\ninclude<BOSL2/std.scad>\nsquare(10)\n    position(RIGHT) square(3,anchor=LEFT);\n```\n\n----------------------------------------\n\nTITLE: Anchoring Cubes in OpenSCAD with BOSL2\nDESCRIPTION: Demonstrates how to use the anchor parameter with cube() to position the shape relative to different faces, edges, and corners.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Shapes3d.md#_snippet_1\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\ncube([50,40,20], anchor=BOTTOM);\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\ncube([50,40,20], anchor=TOP+BACK);\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\ncube([50,40,20], anchor=TOP+FRONT+LEFT);\n```\n\n----------------------------------------\n\nTITLE: Anchoring a Cube at Face with Vector - BOSL2 - OpenSCAD 3D\nDESCRIPTION: This snippet illustrates anchoring a BOSL2 `cube` module using a vector `[0,0,-1]` for the `anchor` parameter. This vector points towards the bottom face of the cube, aligning that entire face with the XY plane at Z=0, with the origin at the center of the face.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_2\n\nLANGUAGE: OpenSCAD-3D\nCODE:\n```\ninclude <BOSL2/std.scad>\n// Anchor at bottom face\ncube([40,30,50], anchor=[0,0,-1]);\n```\n\n----------------------------------------\n\nTITLE: Visualizing a Scaled Anchor Point on a Sphere (OpenSCAD)\nDESCRIPTION: Demonstrates scaling the `anchor_arrow()` visualizer using the `s` parameter when attaching it to a larger object (a sphere). This ensures the arrow remains visible relative to the object's size. Requires the BOSL2 library.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_58\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\nsphere(d=100)\n    attach(LEFT+TOP)\n        anchor_arrow(s=50);\n```\n\n----------------------------------------\n\nTITLE: Displaying All Standard Anchors on a Cylinder (OpenSCAD)\nDESCRIPTION: Utilizes the `show_anchors()` module from the BOSL2 library to display visual arrows for all standard cardinal anchor points on a centered cylinder. This helps visualize default anchor placements on cylindrical shapes.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_60\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\ncylinder(h=25, d=25, center=true)\n    show_anchors();\n```\n\n----------------------------------------\n\nTITLE: Displaying All Standard Anchors on a Sphere (OpenSCAD)\nDESCRIPTION: Uses the `show_anchors()` module from the BOSL2 library to visualize all standard anchor points on a sphere. This demonstrates how anchor orientations follow the curvature of the sphere.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_61\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\nsphere(d=40)\n    show_anchors();\n```\n\n----------------------------------------\n\nTITLE: Attaching Objects with Non-Horizontal Anchors in OpenSCAD\nDESCRIPTION: Shows how attaching to non-horizontal anchors reorients the child object. The example uses a prismoid with RIGHT anchor and demonstrates how the cylinder gets reoriented.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_64\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\nprismoid([50,50],[35,35],h=50,anchor=BOT) attach(RIGHT,BOT) anchor_arrow(30);\nright(60)cylinder(d1=30,d2=15,h=25) attach(BOT,BOT) anchor_arrow(30);\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\nprismoid([50,50],[35,35],h=50,anchor=BOT)\n  attach(RIGHT,BOT) cylinder(d1=30,d2=15,h=25);\n```\n\n----------------------------------------\n\nTITLE: Displaying Scaled Standard Anchors on a Prismoid (OpenSCAD)\nDESCRIPTION: Demonstrates using the `show_anchors()` module with the `s` parameter to scale the visualization arrows for a large prismoid. This ensures the anchor visuals are appropriately sized for larger or complex objects. Requires the BOSL2 library.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_62\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\nprismoid(150,60,100)\n    show_anchors(s=45);\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Tapered Cylinder in OpenSCAD\nDESCRIPTION: Defines a simple tapered cylinder using `d1` (bottom diameter), `d2` (top diameter), and `h` (height) parameters. This snippet likely precedes a boolean operation.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_79\n\nLANGUAGE: openscad\nCODE:\n```\ncylinder(d1=30,d2=15,h=25);\n```\n\n----------------------------------------\n\nTITLE: Visualizing orient Parameter Effect with anchor_arrow in BOSL2\nDESCRIPTION: Shows how using the orient parameter directly on anchor_arrow affects its orientation relative to global coordinates.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_42\n\nLANGUAGE: openscad\nCODE:\n```\ninclude<BOSL2/std.scad>\nprismoid([50,50],[30,30],h=40)\n  position(RIGHT+TOP)\n     anchor_arrow(40, orient=RIGHT);\n```\n\n----------------------------------------\n\nTITLE: Orienting a Cylinder - BOSL2 - OpenSCAD 3D\nDESCRIPTION: This snippet demonstrates applying an `orient` to a BOSL2 `cylinder` using vector constants `UP+RIGHT`. The `orient` parameter tilts the object so that its Z-axis aligns with the specified vector (in this case, pointing upwards and to the right), applied after anchoring and spin.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_25\n\nLANGUAGE: OpenSCAD-3D\nCODE:\n```\ninclude <BOSL2/std.scad>\ncylinder(h=100, r1=50, r2=20, orient=UP+RIGHT);\n```\n\n----------------------------------------\n\nTITLE: Override Central Anchors Position using Function Literal - BOSL2 OpenSCAD\nDESCRIPTION: Presents an alternative method to override anchors using a function literal for the `override` parameter. The function `function (anchor)` is called for each anchor; it returns `undef` to keep default anchors or a new position triple `[s/8*unit(anchor)]` for anchors at x=0 (excluding CTR), placing them on the cylinder.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_126\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude<BOSL2/std.scad>\nmodule cubic_barbell(s=100, anchor=CENTER, spin=0, orient=UP) {\n    override = function (anchor) \n          anchor.x!=0 || anchor==CTR ? undef  // Keep these\n        : [s/8*unit(anchor)];\n    attachable(anchor,spin,orient, size=[s*3,s,s],override=override) {\n        union() {\n            xcopies(2*s) cube(s, center=true);\n            xcyl(h=2*s, d=s/4);\n        }\n        children();\n    }\n}\ncubic_barbell(100) show_anchors(30);\n```\n\n----------------------------------------\n\nTITLE: Attaching to Edge and Corner Anchors in OpenSCAD\nDESCRIPTION: Shows how to attach objects directly to edge anchors (RIGHT+FRONT) and corner anchors (TOP+LEFT+FWD) without using align, resulting in attachments that follow the non-perpendicular anchor directions.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_75\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\ncube(30)\n   color(\"orange\"){\n     attach(RIGHT+FRONT,BOT) \n        prismoid([8,8],[6,6],shift=-[1,1],h=8);\n     attach(TOP+LEFT+FWD,BOT)\n        prismoid([8,8],[6,6],shift=-[1,1],h=8);\n   }\n```\n\n----------------------------------------\n\nTITLE: Basic Cube Usage with BOSL2 in OpenSCAD\nDESCRIPTION: Examples of using the enhanced cube() module from BOSL2, demonstrating basic functionality equivalent to OpenSCAD's built-in cube().\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Shapes3d.md#_snippet_0\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\ncube(100);\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\ncube(100, center=true);\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\ncube([50,40,20], center=true);\n```\n\n----------------------------------------\n\nTITLE: Basic Cylinder Usage with BOSL2 in OpenSCAD\nDESCRIPTION: Examples of using the enhanced cylinder() module from BOSL2, demonstrating basic functionality equivalent to OpenSCAD's built-in cylinder().\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Shapes3d.md#_snippet_7\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\ncylinder(r=50,h=50);\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\ncylinder(r=50,h=50,center=true);\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\ncylinder(d=100,h=50,center=true);\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\ncylinder(d1=100,d2=80,h=50,center=true);\n```\n\n----------------------------------------\n\nTITLE: Anchoring and Orienting Cylinders in OpenSCAD with BOSL2\nDESCRIPTION: Demonstrates how to use the anchor, spin, and orient parameters with cylinder() to position and rotate the shape.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Shapes3d.md#_snippet_8\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\ncylinder(r=50, h=50, anchor=TOP+FRONT);\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\ncylinder(r=50, h=50, anchor=BOTTOM+LEFT);\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\ncylinder(r=50, h=50, anchor=BOTTOM+LEFT, spin=30);\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\ncylinder(r=50, h=50, anchor=BOTTOM, orient=UP+BACK+RIGHT);\n```\n\n----------------------------------------\n\nTITLE: Using Length Parameter with xcopies() in OpenSCAD\nDESCRIPTION: Demonstrates distributing 5 spheres across a specified total length of 100 units along the X axis instead of specifying spacing.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Distributors.md#_snippet_6\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\nxcopies(l=100, n=5) sphere(d=10);\n```\n\n----------------------------------------\n\nTITLE: Spinning a Centered Square\nDESCRIPTION: Demonstrates rotating a centered square by 30 degrees using the spin parameter.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Shapes2d.md#_snippet_12\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\nsquare([60,40], anchor=CENTER, spin=30);\n```\n\n----------------------------------------\n\nTITLE: Single-Argument `attach` with Child Corner Anchor in OpenSCAD (BOSL2)\nDESCRIPTION: Demonstrates single-argument `attach()` specifying a parent anchor (`RIGHT`) and setting the child's anchor to a corner (`anchor=BOT+FWD`). This positions the child cuboid's bottom-front corner at the parent's right face anchor point. Requires the BOSL2 standard library.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_93\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\ncuboid(30)\n  attach(RIGHT)\n      color(\"green\")cuboid(10,anchor=BOT+FWD);\n```\n\n----------------------------------------\n\nTITLE: Positioning Child at Parent's Corner\nDESCRIPTION: Uses the position() module to place a child shape at the parent's forward-right corner.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Shapes2d.md#_snippet_19\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\nsquare(50, center=true)\n    position(FWD+RIGHT)\n        #square(25, spin=45, center=true);\n```\n\n----------------------------------------\n\nTITLE: Attaching a Single Child to Multiple Parent Anchors in OpenSCAD (BOSL2)\nDESCRIPTION: Shows how to attach the same child shape (a cylinder) to multiple anchors (`RIGHT`, `FRONT`) on the parent object simultaneously by providing a list of parent anchors as the first argument to `attach()`. The child's `TOP` anchor is used for attachment. Requires the BOSL2 standard library.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_97\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\ncube(50, center=true)\n    attach([RIGHT,FRONT],TOP) cylinder(d1=35,d2=20,h=25);\n```\n\n----------------------------------------\n\nTITLE: Using align() with Cylindrical Parents in BOSL2\nDESCRIPTION: Demonstrates how align() works with cylindrical parent objects using standard cubic anchors, attaching a cube to the side of a cylinder at a specified face.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_53\n\nLANGUAGE: openscad\nCODE:\n```\ninclude<BOSL2/std.scad>\ncyl(h=20,d=10,$fn=128)\n  align(RIGHT,TOP)\n    color(\"lightblue\")cuboid(5);\n```\n\n----------------------------------------\n\nTITLE: Orienting Child to Left Side of Square\nDESCRIPTION: Uses the orient() module to rotate a child shape to match the orientation at the left anchor.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Shapes2d.md#_snippet_21\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\nsquare(50, center=true)\n    orient(anchor=LEFT)\n        #square([10,40], anchor=FWD);\n```\n\n----------------------------------------\n\nTITLE: Attaching a Cylinder to a Sphere (OpenSCAD)\nDESCRIPTION: Demonstrates attaching a cylinder to a sphere using the `attach()` function from the BOSL2 library. The cylinder's orientation aligns with the sphere's surface normal at the specified anchor point (RIGHT+TOP), pointing 'up' from the sphere's perspective.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_56\n\nLANGUAGE: openscad\nCODE:\n```\ninclude<BOSL2/std.scad>\nsphere(40)\n    attach(RIGHT+TOP) cylinder(r=8,h=20);\n```\n\n----------------------------------------\n\nTITLE: Creating Staggered Grid in OpenSCAD\nDESCRIPTION: Shows how to create a staggered (hexagonal) grid of 12×6 items with 20 units spacing using the stagger parameter.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Distributors.md#_snippet_17\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\ngrid_copies(20, n=[12,6], stagger=true) sphere(d=10);\n```\n\n----------------------------------------\n\nTITLE: Filling a Polygon Shape with Grid Items in OpenSCAD\nDESCRIPTION: Demonstrates filling a star-shaped polygon with hexagonal cylinders using the inside parameter to filter grid points.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Distributors.md#_snippet_26\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\npoly = [for (i=[0:11]) polar_to_xy(50*(i%2+1), i*360/12-90)];\ngrid_copies(5, stagger=true, inside=poly) {\n    cylinder(d=4,h=10,spin=90,$fn=6);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Length Parameter with ycopies() in OpenSCAD\nDESCRIPTION: Demonstrates distributing 5 spheres across a specified total length of 100 units along the Y axis instead of specifying spacing.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Distributors.md#_snippet_7\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\nycopies(l=100, n=5) sphere(d=10);\n```\n\n----------------------------------------\n\nTITLE: Using Length Parameter with zcopies() in OpenSCAD\nDESCRIPTION: Demonstrates distributing 5 spheres across a specified total length of 100 units along the Z axis instead of specifying spacing.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Distributors.md#_snippet_8\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\nzcopies(l=100, n=5) sphere(d=10);\n```\n\n----------------------------------------\n\nTITLE: Attaching and Positioning Multiple Children in OpenSCAD (BOSL2)\nDESCRIPTION: Demonstrates positioning multiple children relative to a single parent using braces `{}`. One cylinder is attached to the `TOP` using `attach()`, and another is positioned relative to the `RIGHT` using `position()`. Requires the BOSL2 standard library.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_96\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\ncube(50, center=true) {\n    attach(TOP) cylinder(d1=50,d2=20,h=20);\n    position(RIGHT) cylinder(d1=50,d2=20,h=20);\n}\n```\n\n----------------------------------------\n\nTITLE: Default Usage of zcopies() in OpenSCAD\nDESCRIPTION: Shows the default behavior of zcopies() which creates 2 copies spaced 20 units apart along the Z axis when n parameter is omitted.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Distributors.md#_snippet_5\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\nzcopies(20) sphere(d=10);\n```\n\n----------------------------------------\n\nTITLE: Using line_copies() with Direction Vector in OpenSCAD\nDESCRIPTION: Demonstrates distributing 5 spheres along an arbitrary line using a direction vector (BACK+RIGHT) with a spacing of 20 units.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Distributors.md#_snippet_12\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\nline_copies(spacing=(BACK+RIGHT)*20, n=5) sphere(d=10);\n```\n\n----------------------------------------\n\nTITLE: Attaching to RIGHT Using BOT Side in OpenSCAD\nDESCRIPTION: Demonstrates attaching a prismoid to the RIGHT face of a cube using the BOTTOM of the prismoid, showing how the FRONT direction points down as per attachment rules.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_69\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\ncube(30) attach(RIGHT,BOT)\ncolor_this(\"orange\")\n  prismoid([8,8],[6,6],shift=-[1,1],h=8) {\n    attach(TOP,BOT) anchor_arrow(color=[0,1,0],s=12);\n    attach(FWD,BOT) anchor_arrow(s=12);     \n  }\n```\n\n----------------------------------------\n\nTITLE: Attaching to RIGHT Using LEFT Side in OpenSCAD\nDESCRIPTION: Shows attaching a prismoid to the RIGHT face of a cube using the LEFT side of the prismoid, demonstrating how UP direction is maintained according to attachment rules.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_68\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\ncube(30) attach(RIGHT,LEFT)\ncolor_this(\"orange\")\n  prismoid([8,8],[6,6],shift=-[1,1],h=8) {\n    attach(TOP,BOT) anchor_arrow(color=[0,1,0],s=12);\n    attach(FWD,BOT) anchor_arrow(s=12);     \n  }\n```\n\n----------------------------------------\n\nTITLE: Creating Attachable Shape with Multiple Named Anchors\nDESCRIPTION: This code extends the `raindrop` module to include multiple named anchors: \"captop\", \"cap\", and \"capbot\".  It demonstrates how to add multiple `named_anchor()` definitions to the `anchors` array passed to the `attachable` function, allowing more flexible attachment options.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_121\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\nmodule raindrop(r, thick, anchor=CENTER, spin=0, orient=UP) {\n    anchors = [\n        named_anchor(\"captop\", [0,r/sin(45), thick/2], BACK+UP,   0),\n        named_anchor(\"cap\",    [0,r/sin(45), 0      ], BACK,      0),\n        named_anchor(\"capbot\", [0,r/sin(45),-thick/2], BACK+DOWN, 0)\n    ];\n    attachable(anchor,spin,orient, r=r, l=thick, anchors=anchors) {\n        linear_extrude(height=thick, center=true) {\n            circle(r=r);\n            back(r*sin(45)) zrot(45) square(r, center=true);\n        }\n        children();\n    }\n}\nraindrop(r=15, thick=10) show_anchors();\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Region with a Hole Using region() in BOSL2 (OpenSCAD-2D)\nDESCRIPTION: This code defines a region composed of a square with a circle inside it, forming a hole, and visualizes it with region(). Requires BOSL2 and OpenSCAD. The region is specified as a list of polygons, and the module displays the XORed result. Only proper regions without self-intersections are reliably rendered.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Paths.md#_snippet_51\n\nLANGUAGE: OpenSCAD-2D\nCODE:\n```\ninclude <BOSL2/std.scad>\nrgn = [square(50,center=true), circle(d=30)];\nregion(rgn);\n```\n\n----------------------------------------\n\nTITLE: Stroke with Closed Path - OpenSCAD\nDESCRIPTION: This snippet illustrates the use of the `closed=true` parameter within the `stroke()` module. Setting closed to true will connect the last point of the path back to the first point.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Paths.md#_snippet_4\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\npath = [[0,0], [-10,10], [0,20], [10,20], [10,10]];\nstroke(path, closed=true);\n```\n\n----------------------------------------\n\nTITLE: Boolean Intersection of Regions Using intersection() in BOSL2 (OpenSCAD-2D)\nDESCRIPTION: This snippet uses intersection() to compute the overlap between two regions in BOSL2. Inputs are two regions (set of circles, square) created in OpenSCAD; outputs are intersections visualized by region(). Ensures only overlapping areas are displayed.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Paths.md#_snippet_57\n\nLANGUAGE: OpenSCAD-2D\nCODE:\n```\ninclude <BOSL2/std.scad>\nrgn1 = [for (d=[40:-10:10]) circle(d=d)];\nrgn2 = [square([60,12], center=true)];\nrgn = intersection(rgn1, rgn2);\nregion(rgn);\n```\n\n----------------------------------------\n\nTITLE: Defining a Region with Multiple Discontiguous Shapes in BOSL2 (OpenSCAD-2D)\nDESCRIPTION: This code shows how to compose a region from three discontiguous shapes using move() and region(). Inputs are a list of positioned polygons; outputs show them together as a region. Useful for merging separate shapes into a complex region.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Paths.md#_snippet_52\n\nLANGUAGE: OpenSCAD-2D\nCODE:\n```\ninclude <BOSL2/std.scad>\nrgn = [\n    move([-30, 20], p=square(20,center=true)),\n    move([  0,-20], p=trapezoid(w1=20, w2=10, h=20)),\n    move([ 30, 20], p=square(20,center=true)),\n];\nregion(rgn);\n```\n\n----------------------------------------\n\nTITLE: Using Non-90-Degree Spin with Attach in OpenSCAD\nDESCRIPTION: Demonstrates using a non-90-degree spin value (-37 degrees) when attaching objects, showing that spin can be any arbitrary angle value.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_71\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\ncube(30) attach(RIGHT,BOT,spin=-37)\ncolor_this(\"orange\")\n  prismoid([8,8],[6,6],shift=-[1,1],h=8) {\n    attach(TOP,BOT) anchor_arrow(color=[0,1,0],s=12);\n    attach(FWD,BOT) anchor_arrow(s=12);     \n  }\n```\n\n----------------------------------------\n\nTITLE: Making a Cuboidal Shape Attachable in BOSL2 (OpenSCAD)\nDESCRIPTION: Demonstrates creating a custom attachable module `cubic_barbell` using the BOSL2 `attachable()` module. It specifies the object's bounding box using the `size` parameter for simple cuboidal shapes centered at the origin. Requires the BOSL2 library.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_105\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\nmodule cubic_barbell(s=100, anchor=CENTER, spin=0, orient=UP) {\n    attachable(anchor,spin,orient, size=[s*3,s,s]) {\n        union() {\n            xcopies(2*s) cube(s, center=true);\n            xcyl(h=2*s, d=s/4);\n        }\n        children();\n    }\n}\ncubic_barbell(100) show_anchors(60);\n```\n\n----------------------------------------\n\nTITLE: Constructing Ribbed Walls by Linear Extrusion of Glued Circles in OpenSCAD\nDESCRIPTION: Illustrates how to create a 3D ribbed wall by stringing multiple glued circles horizontally using xcopies() and then linearly extruding the resulting shape. Uses parameters like circle diameter (`d`), spread, number of copies, and resolution (`$fn`) to define shape details. Requires BOSL2 library and demonstrates 3D extrusion with convexity and centering options. Outputs a 3D solid with a repeated pattern of glued circles.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Shapes2d.md#_snippet_38\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\n$fn=36;  s=10;\nlinear_extrude(height=50,convexity=16,center=true)\n    xcopies(s*sqrt(2),n=3)\n        glued_circles(d=s, spread=s*sqrt(2), tangent=45);\n```\n\n----------------------------------------\n\nTITLE: Stroke with Variable Width and Arrow Endcaps - OpenSCAD\nDESCRIPTION: This snippet demonstrates how the size of the endcaps is relative to the line width by using a list of `widths` with the `endcaps` parameter.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Paths.md#_snippet_13\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\npath = [[0,0], [-10,10], [0,20], [10,20], [10,10]];\nwidths = [1, 1.25, 1.5, 1.75, 2];\nstroke(path, width=widths, endcaps=\"arrow2\");\n```\n\n----------------------------------------\n\nTITLE: Translating Paths Using left in BOSL2 (OpenSCAD-2D)\nDESCRIPTION: This code shows how to translate a 2D path leftward using BOSL2's left() function. Dependencies are BOSL2 and OpenSCAD. The main parameter is the leftward distance, and the operation's output is a left-shifted square visualized via stroke() with an arrow endcap. Applicable for directional path shifts in 2D designs.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Paths.md#_snippet_37\n\nLANGUAGE: OpenSCAD-2D\nCODE:\n```\ninclude <BOSL2/std.scad>\npath = left(30, p=square(50,center=true));\nstroke(list_wrap(path), endcap2=\"arrow2\");\n```\n\n----------------------------------------\n\nTITLE: Creating Attachable Shape using VNF with Extent\nDESCRIPTION: This code demonstrates how to create an attachable shape using a VNF (Vertex Normal Faces) representation. It defines a `stellate_cube` module that creates a stellated cube using vertex and face data. The `attachable()` module uses the `vnf` argument, and defaults to `extent=true` to define the attachment points based on the VNF's geometry.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_117\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\nmodule stellate_cube(s=100, anchor=CENTER, spin=0, orient=UP) {\n    s2 = 3 * s;\n    verts = [\n        [0,0,-s2*sqrt(2)/2],\n        each down(s/2, p=path3d(square(s,center=true))),\n        each zrot(45, p=path3d(square(s2,center=true))),\n        each up(s/2, p=path3d(square(s,center=true))),\n        [0,0,s2*sqrt(2)/2]\n    ];\n    faces = [\n        [0,2,1], [0,3,2], [0,4,3], [0,1,4],\n        [1,2,6], [1,6,9], [6,10,9], [2,10,6],\n        [1,5,4], [1,9,5], [9,12,5], [5,12,4],\n        [4,8,3], [4,12,8], [12,11,8], [11,3,8],\n        [2,3,7], [3,11,7], [7,11,10], [2,7,10],\n        [9,10,13], [10,11,13], [11,12,13], [12,9,13]\n    ];\n    vnf = [verts, faces];\n    attachable(anchor,spin,orient, vnf=vnf) {\n        vnf_polyhedron(vnf);\n        children();\n    }\n}\nstellate_cube(25) {\n    attach(UP+RIGHT) {\n        anchor_arrow(20);\n        %cube([100,100,0.1],center=true);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Translating Objects Down using down() in BOSL2/OpenSCAD\nDESCRIPTION: Shows the BOSL2 `down()` shortcut command to translate an object (a sphere) 30 units along the negative Z-axis. This is a more readable alternative to `translate([0,0,-30])`.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Transforms.md#_snippet_2\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\n#sphere(d=20);\ndown(30) sphere(d=20);\n```\n\n----------------------------------------\n\nTITLE: Stroke with Rounded Endcaps - OpenSCAD\nDESCRIPTION: This snippet demonstrates using the `endcaps=` argument with the `stroke()` module to control the appearance of the path's ends. The `round` option is used to create rounded endcaps.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Paths.md#_snippet_5\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\npath = [[0,0], [-10,10], [0,20], [10,20], [10,10]];\nstroke(path, endcaps=\"round\");\n```\n\n----------------------------------------\n\nTITLE: Creating a Pass-Through Attachable Module in BOSL2 (OpenSCAD)\nDESCRIPTION: Defines a custom module `cutcube` that wraps a BOSL2 `cuboid` and performs a difference operation. It demonstrates how to make the custom module attachable by passing the `anchor`, `spin`, `orient` parameters and `children()` to the underlying attachable `cuboid` module. Requires the BOSL2 library.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_104\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\n$fn=32;\nmodule cutcube(anchor=CENTER,spin=0,orient=UP)\n{\n   tag_scope(){\n     diff()\n       cuboid(15, rounding=2, anchor=anchor,spin=spin,orient=orient){\n         tag(\"remove\")attach(TOP)cuboid(5);\n         children();\n       }\n   }\n}\ndiff()\ncutcube()\n  tag(\"remove\")attach(RIGHT) cyl(d=2,h=8);\n```\n\n----------------------------------------\n\nTITLE: Rotating around Y-axis using yrot() in BOSL2/OpenSCAD\nDESCRIPTION: Shows the BOSL2 `yrot()` shortcut command to rotate an object (a centered cube) 30 degrees around the Y-axis. This is clearer than `rotate([0,30,0])`.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Transforms.md#_snippet_15\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\nyrot(30) cube(20, center=true);\n```\n\n----------------------------------------\n\nTITLE: Rotating around Z-axis using zrot() in BOSL2/OpenSCAD\nDESCRIPTION: Shows the BOSL2 `zrot()` shortcut command to rotate an object (a centered cube) 30 degrees around the Z-axis. This is clearer than `rotate([0,0,30])`.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Transforms.md#_snippet_16\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\nzrot(30) cube(20, center=true);\n```\n\n----------------------------------------\n\nTITLE: Stroke with Ellipse Polygon - OpenSCAD\nDESCRIPTION: This snippet draws an ellipse generated using `ellipse()`, and the path of the ellipse is shown with `stroke()`.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Paths.md#_snippet_20\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\npath = ellipse(d=[50,30]);\nstroke(list_wrap(path), endcap2=\"arrow2\");\n```\n\n----------------------------------------\n\nTITLE: Making an Axis-Oriented Cylindrical Shape Attachable in BOSL2 (OpenSCAD)\nDESCRIPTION: Demonstrates creating an attachable cylindrical module `ytwistar` oriented along the Y-axis using the `axis=BACK` parameter in BOSL2's `attachable()`. The `l` and `r` parameters define the geometry relative to this specified axis. Requires the BOSL2 library.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_111\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\nmodule ytwistar(l,r,d, anchor=CENTER, spin=0, orient=UP) {\n    r = get_radius(r=r,d=d,dflt=1);\n    attachable(anchor,spin,orient, r=r, l=l, axis=BACK) {\n        xrot(-90)\n            linear_extrude(height=l, twist=90, slices=20, center=true, convexity=4)\n                star(n=20, r=r, ir=r*0.9);\n        children();\n    }\n}\nytwistar(l=100, r=40) show_anchors(20);\n```\n\n----------------------------------------\n\nTITLE: Making an Axis-Oriented Prismoidal Shape Attachable in BOSL2 (OpenSCAD)\nDESCRIPTION: Demonstrates using the `axis` parameter (set to `BACK` for Y-axis) in BOSL2's `attachable()` to define a prismoidal shape that is naturally oriented along an axis other than the default Z-axis. The `size2` and `shift` parameters then relate to the plane perpendicular to the specified axis. Requires the BOSL2 library.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_108\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\nmodule yprismoidal(\n    size=[100,100,100], scale=0.5, shift=[0,0],\n    anchor=CENTER, spin=0, orient=UP\n) {\n    attachable(\n        anchor, spin, orient,\n        size=size, size2=point2d(size)*scale,\n        shift=shift, axis=BACK\n    ) {\n        xrot(-90) hull() {\n            translate([shift.x, shift.y, size.z/2-0.005])\n                linear_extrude(height=0.01, center=true)\n                    square([size.x,size.y]*scale, center=true);\n            down(size.z/2-0.005)\n                linear_extrude(height=0.01, center=true)\n                    square([size.x,size.y], center=true);\n        }\n        children();\n    }\n}\nyprismoidal([100,60,30], scale=1.5, shift=[20,20]) show_anchors(20);\n```\n\n----------------------------------------\n\nTITLE: Stroke with Arrow2 Endcaps - OpenSCAD\nDESCRIPTION: This code demonstrates the use of `endcaps=\"arrow2\"` to create arrow endcaps.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Paths.md#_snippet_9\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\npath = [[0,0], [-10,10], [0,20], [10,20], [10,10]];\nstroke(path, endcaps=\"arrow2\");\n```\n\n----------------------------------------\n\nTITLE: Skewing along Z by Y using skew(szy=) in BOSL2/OpenSCAD\nDESCRIPTION: Demonstrates the BOSL2 `skew()` command to shear an object (a cube) along the Z-axis, with the amount of skew proportional to the Y-coordinate. The `szy=0.5` parameter specifies the skew factor.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Transforms.md#_snippet_35\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\nskew(szy=0.5) cube(10,center=false);\n```\n\n----------------------------------------\n\nTITLE: Skewing along X by Y using skew(sxy=) in BOSL2/OpenSCAD\nDESCRIPTION: Demonstrates the BOSL2 `skew()` command to shear an object (a cube) along the X-axis, with the amount of skew proportional to the Y-coordinate. The `sxy=0.5` parameter specifies the skew factor.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Transforms.md#_snippet_30\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\nskew(sxy=0.5) cube(10,center=false);\n```\n\n----------------------------------------\n\nTITLE: Visualizing Edge Anchors on a Prismoid in OpenSCAD (BOSL2)\nDESCRIPTION: Visualizes the location and orientation of all edge anchors on a `prismoid` object. It iterates through possible anchor vectors `[i,j,k]` where the sum of absolute values is 2 (indicating an edge) and attaches an `anchor_arrow` to each using `attach(anchor, BOT)`. Requires the BOSL2 standard library.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_87\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\nprismoid([100,175],[55,88], h=55)\n  for(i=[-1:1], j=[-1:1], k=[-1:1])\n    let(anchor=[i,j,k])\n       if (sum(v_abs(anchor))==2)\n         attach(anchor,BOT)anchor_arrow(40);\n```\n\n----------------------------------------\n\nTITLE: Generic Translation using move() in BOSL2/OpenSCAD\nDESCRIPTION: Demonstrates the BOSL2 `move()` command, which acts as a generic translation function similar to `translate()`. Here, it moves a sphere by [30, -10, 0].\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Transforms.md#_snippet_7\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\n#sphere(d=20);\nmove([30,-10]) sphere(d=20);\n```\n\n----------------------------------------\n\nTITLE: Translating Objects using translate() in OpenSCAD\nDESCRIPTION: Demonstrates the standard OpenSCAD `translate()` command to move an object (a sphere) along the Z-axis by 30 units. Requires including the BOSL2 standard library.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Transforms.md#_snippet_0\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\n#sphere(d=20);\ntranslate([0,0,30]) sphere(d=20);\n```\n\n----------------------------------------\n\nTITLE: Making an Axis-Oriented Conical Shape Attachable in BOSL2 (OpenSCAD)\nDESCRIPTION: Demonstrates creating an attachable conical module `ytwistar` oriented along the Y-axis using the `axis=BACK` parameter in BOSL2's `attachable()`. The `l`, `r1`, and `r2` parameters define the conical geometry relative to this specified axis. Requires the BOSL2 library.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_114\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\nmodule ytwistar(l, r,r1,r2, d,d1,d2, anchor=CENTER, spin=0, orient=UP) {\n    r1 = get_radius(r1=r1,r=r,d1=d1,d=d,dflt=1);\n    r2 = get_radius(r1=r2,r=r,d1=d2,d=d,dflt=1);\n    attachable(anchor,spin,orient, r1=r1, r2=r2, l=l, axis=BACK) {\n        xrot(-90)\n            linear_extrude(height=l, twist=90, scale=r2/r1, slices=20, center=true, convexity=4)\n                star(n=20, r=r1, ir=r1*0.9);\n        children();\n    }\n}\nytwistar(l=100, r1=40, r2=20) show_anchors(20);\n```\n\n----------------------------------------\n\nTITLE: Attaching Cylinder Bottom to Cube Right Face in OpenSCAD (BOSL2)\nDESCRIPTION: Shows how to attach the `BOT` (bottom) anchor of a cylinder to the `RIGHT` anchor of a cuboid. `inside=true` ensures the cylinder is placed correctly for a difference operation, and `shiftout=0.01` prevents coplanar faces. Requires the BOSL2 standard library.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_81\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\nback_half(s=200)\ndiff()\ncuboid(50)\n  attach(RIGHT,BOT,inside=true,shiftout=0.01)\n    cylinder(d1=30,d2=15,h=25);\n```\n\n----------------------------------------\n\nTITLE: Selectively Rounding Cuboid Edges in OpenSCAD with BOSL2\nDESCRIPTION: Demonstrates various ways to specify which edges of a cuboid to round using the edges parameter.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Shapes3d.md#_snippet_4\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\ncuboid([100,80,60], rounding=10, edges=FRONT+TOP);\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\ncuboid([100,80,60], rounding=10, edges=RIGHT+FRONT);\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\ncuboid([100,80,60], rounding=10, edges=\"X\");\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\ncuboid([100,80,60], rounding=10, edges=\"Y\");\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\ncuboid([100,80,60], rounding=10, edges=\"Z\");\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\ncuboid([100,80,60], rounding=10, edges=[TOP,\"Z\",BOTTOM+RIGHT]);\n```\n\n----------------------------------------\n\nTITLE: Shape Function Equivalents in OpenSCAD\nDESCRIPTION: This snippet presents BOSL2 shape functions and their equivalent raw OpenSCAD code. It illustrates how BOSL2 provides concise syntax for creating complex shapes. Dependencies include the BOSL2 library itself.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/README.md#_snippet_1\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ncube([10,20,30], anchor=BOTTOM);\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ntranslate([0,0,15]) cube([10,20,30], center=true);\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ncuboid([20,20,30], rounding=5);\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nminkowski() {cube([10,10,20], center=true); sphere(r=5, $fn=32);}\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nprismoid([30,40],[20,30],h=10);\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nhull() {translate([0,0,0.005]) cube([30,40,0.01], center=true); translate([0,0,9.995]) cube([20,30,0.01],center=true);}\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nxcyl(l=20,d=4);\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nrotate([0,90,0]) cylinder(h=20, d=4, center=true);\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ncyl(l=100, d=40, rounding=5);\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nminkowski() {cylinder(h=90, d=30, center=true); sphere(r=5);}\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ntube(od=40,wall=5,h=30);\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ndifference() {cylinder(d=40,h=30,center=true); cylinder(d=30,h=31,center=true);}\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ntorus(d_maj=100, d_min=30);\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nrotate_extrude() translate([50,0,0]) circle(d=30);\n```\n\n----------------------------------------\n\nTITLE: Stroke with Individual Endcap2 - OpenSCAD\nDESCRIPTION: This code shows how to specify the endcap for the second point using the `endcap2=` argument.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Paths.md#_snippet_10\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\npath = [[0,0], [-10,10], [0,20], [10,20], [10,10]];\nstroke(path, endcap2=\"arrow2\");\n```\n\n----------------------------------------\n\nTITLE: Using Edge Attachment for `rounding_edge_mask` in OpenSCAD (BOSL2)\nDESCRIPTION: Applies a `rounding_edge_mask` to the four vertical edges of a cuboid within a `difference` operation. It uses `attach()` with a list of corner anchors representing the vertical edges and aligns the mask's `FWD+LEFT` anchor to these edges. `inside=true` positions the mask for subtraction. Requires the BOSL2 standard library and sets `$fn=32`.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_89\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\n$fn=32;\ndiff()\ncuboid(75)\n   attach([FRONT+LEFT, FRONT+RIGHT, BACK+LEFT, BACK+RIGHT],\n          FWD+LEFT,inside=true)\n     rounding_edge_mask(l=76, r1=8,r2=28);\n```\n\n----------------------------------------\n\nTITLE: Creating Rounded Rectangle\nDESCRIPTION: Creates a rectangle with rounded corners using the rect() module with the rounding parameter.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Shapes2d.md#_snippet_31\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\nrect([60,40], rounding=10);\n```\n\n----------------------------------------\n\nTITLE: Making a Cylindrical Shape Attachable Using `l` and `r` in BOSL2 (OpenSCAD)\nDESCRIPTION: Shows how to create a custom attachable cylindrical module `twistar` using BOSL2's `attachable()`. The `l` (length) and `r` (radius, obtained via `get_radius` for flexibility with `d` diameter input) parameters define the cylindrical bounding geometry for anchoring. Requires the BOSL2 library.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_109\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\nmodule twistar(l,r,d, anchor=CENTER, spin=0, orient=UP) {\n    r = get_radius(r=r,d=d,dflt=1);\n    attachable(anchor,spin,orient, r=r, l=l) {\n        linear_extrude(height=l, twist=90, slices=20, center=true, convexity=4)\n            star(n=20, r=r, ir=r*0.9);\n        children();\n    }\n}\ntwistar(l=100, r=40) show_anchors(20);\n```\n\n----------------------------------------\n\nTITLE: Using Align Parameter with Attach in OpenSCAD\nDESCRIPTION: Demonstrates using the align parameter to position children at various alignments relative to the parent object, showing five different alignment examples on a prismoid.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_74\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\nmodule thing(){\n  color_this(\"orange\")\n    prismoid([8,8],[6,6],shift=-[1,1],h=8) {\n      attach(TOP,BOT) anchor_arrow(color=[0,1,0],s=12);\n      attach(FWD,BOT) anchor_arrow(s=12);     \n    }\n}\nprismoid([50,50],[35,35],h=25,anchor=BOT){\n  attach(TOP,BOT,align=FRONT) thing();\n  attach(RIGHT,BOT,align=BOT) thing();    \n  attach(RIGHT,BACK,align=FRONT) thing();\n  attach(FRONT,BACK,align=BOT,spin=45) thing();\n  attach(TOP,RIGHT,align=RIGHT,spin=90) thing();\n}\n```\n\n----------------------------------------\n\nTITLE: Using Single-Argument `attach` for Children Without Full Support (e.g., `linear_extrude`)\nDESCRIPTION: Shows how single-argument `attach()` can be used to position children, like the result of `linear_extrude`, that may not have full BOSL2 anchor support. The origin of the extruded star is placed at the parent cuboid's `RIGHT` anchor point. Requires the BOSL2 standard library.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_94\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\ncuboid(20)\n  attach(RIGHT)\n     color(\"red\")linear_extrude(height=2) star(n=7,ir=3,or=7);\n```\n\n----------------------------------------\n\nTITLE: Closing a Bézier Path to the Y-Axis\nDESCRIPTION: This code uses bezpath_close_to_axis() to close a Bézier path to the Y-axis, then converts it into an OpenSCAD path for further use, such as extrusion or sweeping. It also visualizes the closed path.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Beziers_for_Beginners.md#_snippet_12\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude<BOSL2/std.scad>\n\nbez = [[20,0], [60,40], [-20,50], [25,80]];\nclosed = bezpath_close_to_axis(bez, axis = \"Y\");\npath = bezpath_curve(closed);\nstroke(path, width = 2);\n```\n\n----------------------------------------\n\nTITLE: Comparing BOSL2 `recolor()` and `color_this()` in OpenSCAD\nDESCRIPTION: Compares the effect of BOSL2's `recolor()` (colors the object and its children unless overridden) and `color_this()` (colors only the immediate object, leaving children unaffected). Requires the BOSL2 library.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_103\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\n$fn = 24;\nrecolor(\"red\") spheroid(d=3) {\n    attach(CENTER,BOT) recolor(\"white\") cyl(h=10, d=1) {\n        attach(TOP,BOT)  cyl(h=5, d1=3, d2=0);\n    }\n}\nright(5)\nrecolor(\"red\") spheroid(d=3) {\n    attach(CENTER,BOT) color_this(\"white\") cyl(h=10, d=1) {\n        attach(TOP,BOT)  cyl(h=5, d1=3, d2=0);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Varying joint length in rounded_prism() in OpenSCAD\nDESCRIPTION: This snippet demonstrates how changing the joint parameters ('joint_top', 'joint_bot', 'joint_sides') affects the transition smoothness of the roundover, with smaller joint lengths producing more abrupt curvature. The code includes a comparison of different joint sizes with labeling. Dependencies are the same as prior examples.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Rounding_the_Cube.md#_snippet_33\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\ninclude <BOSL2/rounding.scad>\n left(30) {\n    rounded_prism(rect(20), height=20, joint_top=1, joint_bot=1, joint_sides=1, k = 0.5);\n    move([0,-13,-13]) xrot(90) color(\"black\") text3d(\"joint=1\", size=3, h = 0.01, anchor= CENTER);\n}\n\nright(0){\n    rounded_prism(rect(20), height=20, joint_top=5, joint_bot=5, joint_sides=5, k = 0.5);  \n    move([0,-13,-13]) xrot(90) color(\"black\") text3d(\"joint=5\", size=3, h = 0.01, anchor= CENTER); \n}\n\nright(30){\n    rounded_prism(rect(20), height=20, joint_top=9, joint_bot=9, joint_sides=9, k = 0.5);\n    move([0,-13,-13]) xrot(90) color(\"black\") text3d(\"joint=9\", size=3, h = 0.01, anchor= CENTER);\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing CENTER Anchors with `anchor_arrow` in OpenSCAD (BOSL2)\nDESCRIPTION: Uses `anchor_arrow()` attached to the `CENTER` anchor of two cylinders to visualize the position and default upward orientation of the `CENTER` anchor. Requires the BOSL2 standard library.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_85\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\ncylinder(d1=30,d2=15,h=25) attach(CENTER) anchor_arrow(40);\nright(40)cylinder(d1=30,d2=15,h=25) attach(CENTER) anchor_arrow(40);\n```\n\n----------------------------------------\n\nTITLE: Creating Rounded Cuboids in OpenSCAD with BOSL2\nDESCRIPTION: Demonstrates the cuboid() module with rounding options to create cubes with rounded edges.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Shapes3d.md#_snippet_3\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\ncuboid([100,80,60], rounding=20);\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\ncuboid([100,80,60], rounding=20, edges=TOP);\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\ncuboid([100,80,60], rounding=20, edges=RIGHT);\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\ncuboid([100,80,60], rounding=20, edges=RIGHT+FRONT+TOP);\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\ncuboid([100,80,60], rounding=20, edges=LEFT+FRONT+TOP);\n```\n\n----------------------------------------\n\nTITLE: Using orient() Module for Anchor-relative Orientation in BOSL2\nDESCRIPTION: Shows how the orient() module orients a child relative to the parent's anchor directions, aligning with the parent's face orientation rather than global axes.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_40\n\nLANGUAGE: openscad\nCODE:\n```\ninclude<BOSL2/std.scad>\nprismoid([50,50],[30,30],h=40)\n  position(RIGHT+TOP)\n     orient(RIGHT)\n        cube([15,15,25],anchor=BACK+BOT);\n```\n\n----------------------------------------\n\nTITLE: Excluding Edges from Cuboid Rounding in OpenSCAD with BOSL2\nDESCRIPTION: Shows how to use the except_edges parameter to exclude specific edges from rounding or chamfering in a cuboid.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Shapes3d.md#_snippet_5\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\ncuboid([100,80,60], rounding=10, except_edges=BOTTOM+RIGHT);\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\ncuboid([100,80,60], rounding=10, except_edges=[BOTTOM,\"Z\",TOP+RIGHT]);\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\ncuboid([100,80,60], rounding=10, edges=[TOP,FRONT], except_edges=TOP+FRONT);\n```\n\n----------------------------------------\n\nTITLE: Rounding Cuboid Edges with Radius using BOSL2 in OpenSCAD\nDESCRIPTION: Rounds all edges of a cuboid by a specified radius using the cuboid() module from BOSL2. Requires BOSL2 (include \\u003cBOSL2/std.scad\\u003e). The 'rounding' parameter sets the curvature radius. Input: cuboid size (e.g., scalar or vector); Output: rounded cuboid shape. Use positive values for outer roundover. No edge constraints active.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Rounding_the_Cube.md#_snippet_0\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude \\u003cBOSL2/std.scad\\u003e\\ncuboid(100, rounding=20);\n```\n\n----------------------------------------\n\nTITLE: Applying 2D Roundover Mask to Top Edges of Cuboid in OpenSCAD\nDESCRIPTION: This snippet shows how to apply a 2D roundover mask to the top edges of a cuboid with the BOSL2 library in OpenSCAD. It uses diff() to subtract the masked shape, cuboid() with negative rounding for bottom fillets, and edge_profile() to attach the roundover mask on top edges. The mask2d_roundover() function is used with a specified radius of 10. The snippet requires BOSL2.std.scad to be included. Inputs are size of cuboid and mask radius; output is the cuboid with differentiated edge rounding on top and bottom.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Rounding_the_Cube.md#_snippet_14\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>  \ndiff()  \n    cuboid([50,60,70], rounding = -10, edges = BOT)  \n        edge_profile(TOP)  \n            mask2d_roundover(r=10);\n```\n\n----------------------------------------\n\nTITLE: Anchoring a Cube with center=true - BOSL2 - OpenSCAD 3D\nDESCRIPTION: This snippet demonstrates an alternative way to center a BOSL2 `cube` using the deprecated `center=true` argument. This is equivalent to `anchor=CENTER`, aligning the geometric center of the cube with the origin.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_13\n\nLANGUAGE: OpenSCAD-3D\nCODE:\n```\ninclude <BOSL2/std.scad>\ncube([50,40,30],center=true);\n```\n\n----------------------------------------\n\nTITLE: Manual Positioning with position() in BOSL2\nDESCRIPTION: Shows explicit anchor selection for positioning a child object on the right side of a parent using position(). The child needs a LEFT anchor to align flush with the parent's RIGHT side.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_44\n\nLANGUAGE: openscad\nCODE:\n```\ninclude<BOSL2/std.scad>\ncuboid([50,40,15])\n    position(RIGHT)\n        color(\"lightblue\")cuboid(5,anchor=LEFT);\n```\n\n----------------------------------------\n\nTITLE: Anchoring a Sphere with spherical_to_xyz - BOSL2 - OpenSCAD 3D\nDESCRIPTION: This snippet illustrates anchoring a BOSL2 `sphere` module using a vector generated by `spherical_to_xyz(1,-30,60)`. This function converts spherical coordinates (radius 1, azimuth -30 degrees, elevation 60 degrees) into a Cartesian vector, anchoring the sphere on its surface at that specific angular position.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_10\n\nLANGUAGE: OpenSCAD-3D\nCODE:\n```\ninclude <BOSL2/std.scad>\nsphere(r=50, anchor=spherical_to_xyz(1,-30,60));\n```\n\n----------------------------------------\n\nTITLE: Using align() with Arbitrary Angles on Cylindrical Parents in BOSL2\nDESCRIPTION: Shows how align() handles arbitrary horizontal angle anchors on cylindrical parents by attaching the nearest corner of the child to the specified angle position.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_54\n\nLANGUAGE: openscad\nCODE:\n```\ninclude<BOSL2/std.scad>\ncyl(h=20,d=10,$fn=128)\n  align([1,.3],TOP)\n    color(\"lightblue\")cuboid(5);\n```\n\n----------------------------------------\n\nTITLE: Using Negative Overlap with Attach in OpenSCAD\nDESCRIPTION: Demonstrates using a negative overlap value to create a gap between the parent and child objects, moving the child away from the parent object.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_73\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\ncube(50,center=true)\n    attach(TOP,BOT,overlap=-20)\n        cyl(d=20,h=20);\n```\n\n----------------------------------------\n\nTITLE: Translating Objects Left using left() in BOSL2/OpenSCAD\nDESCRIPTION: Shows the BOSL2 `left()` shortcut command to translate an object (a sphere) 30 units along the negative X-axis. This is a more readable alternative to `translate([-30,0,0])`.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Transforms.md#_snippet_5\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\n#sphere(d=20);\nleft(30) sphere(d=20);\n```\n\n----------------------------------------\n\nTITLE: Making a Shifted Prismoidal Shape Attachable Using `shift` in BOSL2 (OpenSCAD)\nDESCRIPTION: Extends the prismoidal attachable example by incorporating the `shift` parameter within BOSL2's `attachable()`. This parameter defines the [X, Y] offset of the top face's center relative to the bottom face's center. Requires the BOSL2 library.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_107\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\nmodule prismoidal(size=[100,100,100], scale=0.5, shift=[0,0], anchor=CENTER, spin=0, orient=UP) {\n    attachable(anchor,spin,orient, size=size, size2=[size.x, size.y]*scale, shift=shift) {\n        hull() {\n            translate([shift.x, shift.y, size.z/2-0.005])\n                linear_extrude(height=0.01, center=true)\n                    square([size.x,size.y]*scale, center=true);\n            down(size.z/2-0.005)\n                linear_extrude(height=0.01, center=true)\n                    square([size.x,size.y], center=true);\n        }\n        children();\n    }\n}\nprismoidal([100,60,30], scale=0.5, shift=[-30,20]) show_anchors(20);\n```\n\n----------------------------------------\n\nTITLE: Combining Edge and Corner Masks for Rounded Corners in OpenSCAD\nDESCRIPTION: This example shows how to apply rounding masks to specific edges and also add a rounded corner between edges, resulting in smoother transitions. It includes multiple edge masks with specified radii and a corner mask to round the intersecting corners.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Rounding_the_Cube.md#_snippet_29\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\ndiff()\n  cuboid([60,80,40]) {\n   edge_mask(TOP+FWD)\n    rounding_edge_mask(r = 10, l = $parent_size.x + 0.1);\n   edge_mask(TOP+RIGHT)\n    rounding_edge_mask(r = 10, l = $parent_size.y + 0.1);\n   edge_mask(RIGHT+FWD)\n    rounding_edge_mask(r = 10, l = $parent_size.z + 0.1);\n        corner_mask(TOP+RIGHT+FWD)\n            rounding_corner_mask(r = 10);\n }\n```\n\n----------------------------------------\n\nTITLE: Defining and Debugging Bézier Curves in OpenSCAD\nDESCRIPTION: This snippet includes BOSL2 library, defines a list of control points for a quadratic Bézier curve, and calls debug_bezier() to visualize the curve with specified segmentation. It demonstrates visualization of Bézier control points and underlying paths.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Beziers_for_Beginners.md#_snippet_6\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude<BOSL2/std.scad>\n\nbez = [[0,0], [30,30], [0,50], [70,30], [0,100]];\ndebug_bezier(bez, N = 2);\n```\n\n----------------------------------------\n\nTITLE: Combining Position and Orient\nDESCRIPTION: Uses both position() and orient() to align a child to a corner of a square.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Shapes2d.md#_snippet_25\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\nsquare(50, center=true)\n    position(RIGHT+BACK)\n        orient(anchor=RIGHT+BACK)\n            #square([10,40], anchor=FWD);\n```\n\n----------------------------------------\n\nTITLE: Child Attachment with Forward Anchor\nDESCRIPTION: Demonstrates attaching a child shape with its own anchor specified.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Shapes2d.md#_snippet_17\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\nsquare(50, center=true)\n    #square([20,40], anchor=FWD);\n```\n\n----------------------------------------\n\nTITLE: Modifying a Cubic Bézier Curve in OpenSCAD\nDESCRIPTION: Demonstrates how changing the second and third control points affects the shape of a cubic Bézier curve while keeping the start and end points the same. Shows how control points influence the curvature.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Beziers_for_Beginners.md#_snippet_3\n\nLANGUAGE: openscad\nCODE:\n```\ninclude<BOSL2/std.scad>\n\nbez = [[20,0], [60,40], [-20,50], [25,80]];\ndebug_bezier(bez, N = 3);\n```\n\n----------------------------------------\n\nTITLE: Explicit Anchor Positioning in BOSL2\nDESCRIPTION: Demonstrates how explicit anchoring works by aligning the right side of a cylinder with the center of a cube. The anchors specified on both objects determine their alignment points.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_33\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\ncube(50,anchor=FRONT)     \n    cylinder(d=25,h=95,anchor=RIGHT);\n```\n\n----------------------------------------\n\nTITLE: Rounding Multiple Specific Edges of a Cuboid with BOSL2 in OpenSCAD\nDESCRIPTION: Applies rounding to only the edges where the TOP and FRONT faces meet on a cuboid. Uses BOSL2's cuboid(), with 'edges' set to TOP+FRONT. Input: cuboid dimensions; Output: cube with selective edge rounding based on face vector addition.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Rounding_the_Cube.md#_snippet_4\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude \\u003cBOSL2/std.scad\\u003e\\ncuboid([100,80,60], rounding=20, edges = TOP+FRONT);\n```\n\n----------------------------------------\n\nTITLE: Making a Prismoidal Shape Attachable Using `size` and `size2` in BOSL2 (OpenSCAD)\nDESCRIPTION: Defines a `prismoidal` module made attachable using BOSL2's `attachable()`. It uses both the `size` (overall dimensions) and `size2` (X, Y dimensions of the top face) parameters to define the geometry for anchoring when the top and bottom faces differ in size. Requires the BOSL2 library.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_106\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\nmodule prismoidal(size=[100,100,100], scale=0.5, anchor=CENTER, spin=0, orient=UP) {\n    attachable(anchor,spin,orient, size=size, size2=[size.x, size.y]*scale) {\n        hull() {\n            up(size.z/2-0.005)\n                linear_extrude(height=0.01, center=true)\n                    square([size.x,size.y]*scale, center=true);\n            down(size.z/2-0.005)\n                linear_extrude(height=0.01, center=true)\n                    square([size.x,size.y], center=true);\n        }\n        children();\n    }\n}\nprismoidal([100,60,30], scale=0.5) show_anchors(20);\n```\n\n----------------------------------------\n\nTITLE: Anchoring a Cube at Corner with Constants - BOSL2 - OpenSCAD 3D\nDESCRIPTION: This snippet demonstrates anchoring a BOSL2 `cube` module using vector constants `BACK+TOP`. This is equivalent to the vector `[0,1,0] + [0,0,1] = [0,1,1]`, anchoring the cube at its upper-back edge.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_3\n\nLANGUAGE: OpenSCAD-3D\nCODE:\n```\ninclude <BOSL2/std.scad>\ncube([40,30,50], anchor=BACK+TOP);\n```\n\n----------------------------------------\n\nTITLE: Basic Child Attachment\nDESCRIPTION: Shows default behavior when making one shape a child of another - the child is centered in the parent.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Shapes2d.md#_snippet_16\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\nsquare(50, center=true)\n    #square(50, spin=45, center=true);\n```\n\n----------------------------------------\n\nTITLE: Referencing Related Functions or Modules with See Also Block in OpenSCAD\nDESCRIPTION: Demonstrates how to create a See Also block listing related functions or modules as documentation references. This block is used to link to related items, helping navigation across the API or codebase. The snippet shows the syntax with example related functions.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/WRITING_DOCS.md#_snippet_15\n\nLANGUAGE: OpenSCAD\nCODE:\n```\n// See Also: relatedfunc(), similarmodule()\n```\n\n----------------------------------------\n\nTITLE: Displaying Square Anchor Points\nDESCRIPTION: Shows all available anchor points on a square using the show_anchors() helper.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Shapes2d.md#_snippet_10\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\nsquare([60,40], center=true)\n    show_anchors();\n```\n\n----------------------------------------\n\nTITLE: Rotating around Custom Center Point using xrot(cp=) in BOSL2/OpenSCAD\nDESCRIPTION: Demonstrates rotating a cube 45 degrees around the X-axis, but centered on a custom point `cp = [0,0,40]` using the `cp` argument of the BOSL2 `xrot()` command. A sphere marks the center point.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Transforms.md#_snippet_18\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\ncp = [0,0,40];\ncolor(\"blue\") move(cp) sphere(d=3);\n#cube(20, center=true);\nxrot(45, cp=cp) cube(20, center=true);\n```\n\n----------------------------------------\n\nTITLE: Basic Parent-Child Anchor Attachment in OpenSCAD\nDESCRIPTION: Demonstrates basic attachment of a cylinder to a cube using TOP and BOT anchors. First showing the objects with anchor arrows and then showing the resulting attached objects.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_63\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\ncube(50,anchor=BOT) attach(TOP,BOT) anchor_arrow(30);\nright(60)cylinder(d1=30,d2=15,h=25) attach(BOT,BOT) anchor_arrow(30);\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\ncube(50,anchor=BOT)\n  attach(TOP,BOT) cylinder(d1=30,d2=15,h=25);\n```\n\n----------------------------------------\n\nTITLE: Scaling along X-axis using xscale() in BOSL2/OpenSCAD\nDESCRIPTION: Shows the BOSL2 `xscale()` shortcut command to scale an object (a centered cube) only along the X-axis by a factor of 2. This is clearer than `scale([2,1,1])`.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Transforms.md#_snippet_10\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\nxscale(2) cube(10, center=true);\n```\n\n----------------------------------------\n\nTITLE: Corner Attachment using `align` and `shiftout` in OpenSCAD (BOSL2)\nDESCRIPTION: Illustrates attaching a small cuboid to the top-right-front corner of a larger cuboid. `attach(TOP,TOP)` aligns the top faces, `align=RIGHT+FWD` further aligns the child to the parent's corner, `inside=true` positions it for subtraction, and `shiftout=.01` handles potential coplanar faces in multiple directions. Requires the BOSL2 standard library.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_82\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\ndiff()\ncuboid(10)\n  attach(TOP,TOP,align=RIGHT+FWD,inside=true,shiftout=.01)\n    cuboid([2,5,9]);\n```\n\n----------------------------------------\n\nTITLE: Using Combined Vector Constants for Corner Anchoring\nDESCRIPTION: Demonstrates combining FRONT and RIGHT constants to anchor a square to the front right corner.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Shapes2d.md#_snippet_8\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\nsquare([60,40], anchor=FRONT+RIGHT);\n```\n\n----------------------------------------\n\nTITLE: Anchoring Circle Using Polar Coordinates\nDESCRIPTION: Demonstrates anchoring a circle to a specific point on its perimeter using polar coordinates.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Shapes2d.md#_snippet_9\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\ncircle(d=50, anchor=polar_to_xy(1,150));\n```\n\n----------------------------------------\n\nTITLE: Modeling Bézier Paths with Quadratic and Cubic Segments\nDESCRIPTION: This example constructs two different Bézier paths from the same set of 7 control points—one using quadratic segments (N=2) and one using cubic segments (N=3)—demonstrating how different segmentation affects the resulting shape.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Beziers_for_Beginners.md#_snippet_9\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude<BOSL2/std.scad>\n\nbez =  [[0,0], [10,30], [20,0], [30,-30], [40,0], [50,30],[60,0]];\npath = bezpath_curve(bez, N = 2);  //make a quadratic Bézier path\nstroke(path);\n```\n\n----------------------------------------\n\nTITLE: Arc with Point Count - OpenSCAD\nDESCRIPTION: This snippet demonstrates controlling the number of points in an arc using the `n=` argument of the `arc()` command.  This results in more or fewer line segments in the arc.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Paths.md#_snippet_25\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\npath = arc(n=5, r=30, angle=120);\nstroke(path, endcap2=\"arrow2\");\n```\n\n----------------------------------------\n\nTITLE: Using attach() for Circle Placement\nDESCRIPTION: Uses the attach() module with polar coordinates to place and orient a square on a circle.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Shapes2d.md#_snippet_28\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\ncircle(d=50)\n    attach(polar_to_xy(1,30))\n        #square([10,40], center=true);\n```\n\n----------------------------------------\n\nTITLE: Mirroring Objects using mirror() in OpenSCAD\nDESCRIPTION: Demonstrates the standard OpenSCAD `mirror()` command to mirror an object (a rotated cylinder) across the YZ-plane (defined by the normal vector [1,0,0]).\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Transforms.md#_snippet_23\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\n#yrot(60) cylinder(h=50, d1=20, d2=10);\nmirror([1,0,0]) yrot(60) cylinder(h=50, d1=20, d2=10);\n```\n\n----------------------------------------\n\nTITLE: Basic Single-Argument `attach` (Parent Anchor Only) in OpenSCAD (BOSL2)\nDESCRIPTION: Demonstrates the single-argument form of `attach()` specifying only the parent anchor (`TOP`). The child cuboid is positioned based on its default anchor (which is `CENTER` for `cuboid`), causing it to appear halfway sunk into the parent's top face. Requires the BOSL2 standard library.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_90\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\ncuboid(30)\n    attach(TOP)\n        color(\"green\")cuboid(10);\n```\n\n----------------------------------------\n\nTITLE: Rotating Between Vectors using Direction Constants in BOSL2/OpenSCAD\nDESCRIPTION: Demonstrates using BOSL2 direction constants (`UP`, `RIGHT`) with the `rot(from=, to=)` command for clearer vector-based rotation. Rotates a cylinder from pointing `UP` ([0,0,1]) to pointing towards `UP+RIGHT` ([1,0,1]).\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Transforms.md#_snippet_22\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\n#cylinder(d=10, h=50);\nrot(from=UP, to=UP+RIGHT) cylinder(d=10, h=50);\n```\n\n----------------------------------------\n\nTITLE: Creating Chamfered Rectangle\nDESCRIPTION: Creates a rectangle with chamfered corners using the rect() module with the chamfer parameter.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Shapes2d.md#_snippet_32\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\nrect([60,40], chamfer=10);\n```\n\n----------------------------------------\n\nTITLE: Includes Block in OpenSCAD Documentation\nDESCRIPTION: Demonstrates how to declare what code users need to add to their files to use a library. This block is also prepended to all Example and Figure code blocks before evaluation.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/WRITING_DOCS.md#_snippet_8\n\nLANGUAGE: openscad\nCODE:\n```\n// Includes:\n//   include <BOSL2/std.scad>\n//   include <BOSL2/gears.scad>\n```\n\n----------------------------------------\n\nTITLE: Rectangle with Variable Corner Rounding\nDESCRIPTION: Creates a rectangle with different rounding sizes for each corner.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Shapes2d.md#_snippet_33\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\nrect([60,40], rounding=[0,5,10,15]);\n```\n\n----------------------------------------\n\nTITLE: Anchoring a 2D Ellipse with Constant - BOSL2 - OpenSCAD 2D\nDESCRIPTION: This snippet demonstrates anchoring a 2D BOSL2 `ellipse` using the vector constant `FRONT`. For a 2D shape, `FRONT` corresponds to the Y- direction, anchoring the ellipse at the point on its perimeter along the negative Y-axis.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_18\n\nLANGUAGE: OpenSCAD-2D\nCODE:\n```\ninclude <BOSL2/std.scad>\nellipse(d=[50,30], anchor=FRONT);\n```\n\n----------------------------------------\n\nTITLE: Scaling along Z-axis using zscale() in BOSL2/OpenSCAD\nDESCRIPTION: Shows the BOSL2 `zscale()` shortcut command to scale an object (a centered cube) only along the Z-axis by a factor of 2. This is clearer than `scale([1,1,2])`.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Transforms.md#_snippet_12\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\nzscale(2) cube(10, center=true);\n```\n\n----------------------------------------\n\nTITLE: Figure Block Example in OpenSCAD Documentation\nDESCRIPTION: Shows how to create a Figure block that displays a 3D model with specific size and viewport settings. This block can be used to generate documentation images from OpenSCAD code.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/WRITING_DOCS.md#_snippet_1\n\nLANGUAGE: openscad\nCODE:\n```\n// Figure(Spin,Size=640x480,VPD=444): A Cube and Cylinder.\n//   cube(80, center=true);\n//   cylinder(h=100,d=60,center=true);\n```\n\n----------------------------------------\n\nTITLE: Initializing the Tree Trunk in OpenSCAD\nDESCRIPTION: Defines a basic OpenSCAD module `tree` that creates a tapered cylinder representing the tree trunk using the BOSL2 library. The module takes length `l` and scale factor `sc` as parameters. Requires the BOSL2 library to be included.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/FractalTree.md#_snippet_0\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\nmodule tree(l=1500, sc=0.7)\n    cylinder(h=l, d1=l/5, d2=l/5*sc);\ntree();\n```\n\n----------------------------------------\n\nTITLE: Using `attach` with `shiftout` for Clean Differences in OpenSCAD (BOSL2)\nDESCRIPTION: Demonstrates attaching a cylinder to the top face of a cube using `TOP` anchors for both parent and child. The `inside=true` parameter positions the child within the parent's bounds for subtraction, and `shiftout=0.01` slightly moves the child outward along face normals to prevent coplanar face issues during the `difference` operation. Requires including the BOSL2 standard library.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_80\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\nback_half(s=200)\ndiff()\ncube(50,anchor=BOT)\n  attach(TOP,TOP,inside=true,shiftout=0.01)\n    cylinder(d1=30,d2=15,h=25);\n```\n\n----------------------------------------\n\nTITLE: Translating Objects Up using up() in BOSL2/OpenSCAD\nDESCRIPTION: Shows the BOSL2 `up()` shortcut command to translate an object (a sphere) 30 units along the positive Z-axis. This is a more readable alternative to `translate([0,0,30])`.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Transforms.md#_snippet_1\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\n#sphere(d=20);\nup(30) sphere(d=20);\n```\n\n----------------------------------------\n\nTITLE: Creating Rotational Copies with zrot_copies() in OpenSCAD\nDESCRIPTION: Demonstrates creating 6 copies of a cone arranged in a circle by rotating around the Z axis.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Distributors.md#_snippet_27\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\nzrot_copies(n=6) yrot(90) cylinder(h=50,d1=0,d2=20);\n```\n\n----------------------------------------\n\nTITLE: Visualizing a Cubic Bézier Curve in OpenSCAD\nDESCRIPTION: Creates and visualizes a cubic (degree 3) Bézier curve with four control points. The curve starts at the first point, is influenced by the second and third control points, and ends at the fourth point.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Beziers_for_Beginners.md#_snippet_2\n\nLANGUAGE: openscad\nCODE:\n```\ninclude<BOSL2/std.scad>\n\nbez = [[20,0], [100,40], [50,90], [25,80]];\ndebug_bezier(bez, N = 3);\n```\n\n----------------------------------------\n\nTITLE: Calculating Transformation Matrix Chain for Anchor Point\nDESCRIPTION: This code demonstrates how to calculate the final position of a point after a series of transformations (scale, rotation, translation) using matrix multiplication and the `apply()` function. This is helpful for determining the position of named anchors in complex transformations.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_122\n\nLANGUAGE: openscad\nCODE:\n```\nscale([1.1, 1.2, 1.3]) xrot(15) zrot(25) right(20) sphere(d=1);\n\nsphere_pt = apply(\n    scale([1.1, 1.2, 1.3]) * xrot(15) * zrot(25) * right(20),\n    [0,0,0]\n);\n```\n\n----------------------------------------\n\nTITLE: Rectangle with Mixed Rounding and Chamfering\nDESCRIPTION: Creates a rectangle with a combination of rounded and chamfered corners by specifying both parameters.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Shapes2d.md#_snippet_35\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\nrect([60,40], rounding=[5,0,10,0], chamfer=[0,5,0,15]);\n```\n\n----------------------------------------\n\nTITLE: Defining a NumList Block Header with openscad_docsgen (plaintext)\nDESCRIPTION: This snippet shows usage of the NumList block type to generate numbered list documentation sections. Titles, multi-line bodies, and code references can all be included. Place these definitions in OpenSCAD annotation sections or in config.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/WRITING_DOCS.md#_snippet_23\n\nLANGUAGE: plaintext\nCODE:\n```\n// DefineHeader(NumList): Steps\n// Steps: How to handle being on fire.\n//   Stop running around and panicing.\n//   Drop to the ground.  Refer to {{drop()}}.\n//   Roll on the ground to smother the flames.\n```\n\n----------------------------------------\n\nTITLE: Adding Leaves to the Fractal Tree in OpenSCAD\nDESCRIPTION: Adds leaves to the tree extremities using an `else` condition in the recursive `tree` module. When the recursion depth reaches zero (`depth>0` is false), instead of creating more branches, it attaches a scaled and oriented BOSL2 `teardrop()` shape, representing a leaf.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/FractalTree.md#_snippet_5\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\nmodule tree(l=1500, sc=0.7, depth=10)\n    cylinder(h=l, d1=l/5, d2=l/5*sc)\n        attach(TOP)\n            if (depth>0) {\n                zrot(90)\n                zrot_copies(n=2)\n                yrot(30) tree(depth=depth-1, l=l*sc, sc=sc);\n            } else {\n                yscale(0.67)\n                teardrop(d=l*3, l=1, anchor=BOT, spin=90);\n            }\ntree();\n```\n\n----------------------------------------\n\nTITLE: Skewing along X by Z using skew(sxz=) in BOSL2/OpenSCAD\nDESCRIPTION: Demonstrates the BOSL2 `skew()` command to shear an object (a cube) along the X-axis, with the amount of skew proportional to the Z-coordinate. The `sxz=-0.5` parameter specifies the skew factor (negative indicates direction).\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Transforms.md#_snippet_31\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\nskew(sxz=-0.5) cube(10,center=false);\n```\n\n----------------------------------------\n\nTITLE: Basic Documentation Comment Block Structure in OpenSCAD\nDESCRIPTION: Demonstrates the fundamental syntax for documentation comment blocks used throughout the BOSL2 library, showing how block names, metadata, titles, and body content should be formatted.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/WRITING_DOCS.md#_snippet_0\n\nLANGUAGE: openscad\nCODE:\n```\n// Block Name(Metadata): TitleText\n//   Body line 1\n//   Body line 2\n//   Body line 3\n```\n\n----------------------------------------\n\nTITLE: Applying Color to the Tree Trunk and Leaves in OpenSCAD\nDESCRIPTION: Applies distinct colors to the tree trunk and leaves using the BOSL2 `recolor()` command. The main trunk is colored 'lightgray' at the top level, and the leaves (teardrops created in the `else` block) are colored 'springgreen'. `recolor()` allows nested colors.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/FractalTree.md#_snippet_6\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\nmodule tree(l=1500, sc=0.7, depth=10)\n    recolor(\"lightgray\")\n    cylinder(h=l, d1=l/5, d2=l/5*sc)\n        attach(TOP)\n            if (depth>0) {\n                zrot(90)\n                zrot_copies(n=2)\n                yrot(30) tree(depth=depth-1, l=l*sc, sc=sc);\n            } else {\n                recolor(\"springgreen\")\n                yscale(0.67)\n                teardrop(d=l*3, l=1, anchor=BOT, spin=90);\n            }\ntree();\n```\n\n----------------------------------------\n\nTITLE: Circle Positioning and Orienting with Polar Coordinates\nDESCRIPTION: Uses both position() and orient() with polar coordinates to place and orient a child on a circle.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Shapes2d.md#_snippet_26\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\ncircle(d=50)\n    position(polar_to_xy(1,30))\n        orient(polar_to_xy(1,30))\n            #square([10,40], anchor=FWD);\n```\n\n----------------------------------------\n\nTITLE: Cube Anchored, Spun, and Oriented - BOSL2 - OpenSCAD 3D\nDESCRIPTION: This snippet demonstrates the combined effect of `anchor`, `spin`, and `orient`. The cube is centered (`anchor=CENTER`), spun 45 degrees (`spin=45`), and then its Z-axis is tilted to align with the `UP+FWD` vector (`orient=UP+FWD`), applied in that specific order.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_29\n\nLANGUAGE: OpenSCAD-3D\nCODE:\n```\ninclude <BOSL2/std.scad>\ncube([20,20,50], anchor=CENTER, spin=45, orient=UP+FWD);\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Glued Circles with Diameter and Spread in OpenSCAD\nDESCRIPTION: Generates a pair of circles connected by a smoothly blended meniscus using the glued_circles() function from BOSL2. Supports using either diameter (`d`) or radius (`r`) parameters to specify circle size, and `spread` to set the center-to-center distance between them. Requires BOSL2 library inclusion. Outputs a 2D shape illustrating two connected circles with configurable sizing and spacing.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Shapes2d.md#_snippet_36\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\nglued_circles(d=30, spread=40);\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\nglued_circles(r=20, spread=45);\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\nglued_circles(d=40, spread=45);\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\nglued_circles(d=30, spread=30);\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\nglued_circles(d=30, spread=40);\n```\n\n----------------------------------------\n\nTITLE: Combining position() with Additional Transformations in BOSL2\nDESCRIPTION: Shows how position() can be combined with additional translate operations to place an object at a specific distance from an anchor point.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_36\n\nLANGUAGE: openscad\nCODE:\n```\ninclude<BOSL2/std.scad>\ncube([50,50,20],center=true)\n    position(TOP+RIGHT) left(5) cube([4,50,10], anchor=RIGHT+BOT);\n```\n\n----------------------------------------\n\nTITLE: Implementing Recursion for Fractal Tree Growth in OpenSCAD\nDESCRIPTION: Refactors the `tree` module to use recursion for generating branches. It calls itself to create subsequent branches, scaling down the length `l` and decrementing the `depth` parameter with each call. Includes a crucial termination condition (`if (depth>0)`) to prevent infinite recursion.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/FractalTree.md#_snippet_3\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\nmodule tree(l=1500, sc=0.7, depth=10)\n    cylinder(h=l, d1=l/5, d2=l/5*sc)\n        attach(TOP)\n            if (depth>0)  { // Important!\n                zrot_copies(n=2)\n                yrot(30) tree(depth=depth-1, l=l*sc, sc=sc);\n            }\ntree();\n```\n\n----------------------------------------\n\nTITLE: Adding 3D Dimension to the Fractal Tree in OpenSCAD\nDESCRIPTION: Enhances the recursive `tree` module by adding a `zrot(90)` rotation within the recursive call, before the `zrot_copies`. This rotates each level of branches relative to the previous one, making the tree appear more three-dimensional and less planar.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/FractalTree.md#_snippet_4\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\nmodule tree(l=1500, sc=0.7, depth=10)\n    cylinder(h=l, d1=l/5, d2=l/5*sc)\n        attach(TOP)\n            if (depth>0) {\n                zrot(90)  // Bush it out\n                zrot_copies(n=2)\n                yrot(30) tree(depth=depth-1, l=l*sc, sc=sc);\n            }\ntree();\n```\n\n----------------------------------------\n\nTITLE: Creating Evenly Spaced Copies Along X Axis in OpenSCAD\nDESCRIPTION: Demonstrates creating 5 spheres spaced 20 units apart along the X axis using the xcopies() function from BOSL2.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Distributors.md#_snippet_0\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\nxcopies(20, n=5) sphere(d=10);\n```\n\n----------------------------------------\n\nTITLE: Rounding Face Edges of a Cuboid using BOSL2 in OpenSCAD\nDESCRIPTION: Rounds only the top face's edges of a cuboid by specifying the 'edges' parameter as TOP. Requires BOSL2. The 'rounding' parameter defines radius. Input: [length, width, height]; Output: cuboid with top perimeter edges rounded.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Rounding_the_Cube.md#_snippet_2\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude \\u003cBOSL2/std.scad\\u003e\\ncuboid([100,80,60], rounding=20, edges = TOP);\n```\n\n----------------------------------------\n\nTITLE: Positioning a Cylinder on a Sphere (OpenSCAD)\nDESCRIPTION: Demonstrates positioning a cylinder relative to a sphere using the `position()` function from the BOSL2 library. The cylinder maintains its default global orientation (up along the Z-axis) regardless of the sphere's surface.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_55\n\nLANGUAGE: openscad\nCODE:\n```\ninclude<BOSL2/std.scad>\nsphere(40)\n    position(RIGHT+TOP) cylinder(r=8,h=20);\n```\n\n----------------------------------------\n\nTITLE: Creating 3D Bézier Path for Vase Side and Layers using BOSL2\nDESCRIPTION: This snippet defines the main geometric curves for both the side profile of the vase and the layered surface pattern using BOSL2's bezpath_curve. It initializes control points for the shapes, adjusts parameters for waviness, and computes the offset curves for surface detailing. The code then uses skin() to generate the final 3D geometry by lofting between these curves. Dependencies include BOSL2's std.scad library. The primary purpose is to produce a stylized vase shape with detailed surface features, with inputs being control points and parameters for the Bézier paths, and outputting a full 3D model.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Beziers_for_Beginners.md#_snippet_18\n\nLANGUAGE: openscad-3d\nCODE:\n```\ninclude<BOSL2/std.scad>\n\n//Side Bézier Path\nside_bez = [[20,0], [40,40], [-10,70], [20,100]];\nside = bezpath_curve(side_bez, splinesteps = 32);\nh = last(side).y;\nsteps = len(side)-1;\nstep = h/steps;\nwall = 2;\n\n//Layer Bézier Path\nsize = side_bez[0].x; // size of the base\nd = size * 0.8;       // intermediate control point distance\ntheta = 65;           // adjusts layer \"wavyness\".\nbz = 5 * cos(theta);  // offset to raise layer curve minima above z = 0;\n\nlayer_bez = flatten([    \n    bez_begin ([-size,0,bz],  90, d, p=theta),\n    bez_tang  ([0, size,bz],   0, d, p=theta),\n    bez_tang  ([size, 0,bz], -90, d, p=theta),\n    bez_tang  ([0,-size,bz], 180, d, p=theta),    \n    bez_end   ([-size,0,bz], -90, d, p=180 - theta)\n]);\n\nlayer = bezpath_curve(layer_bez);\n\nfunction layer_xy_scale(z) =\n    let (sample_z = side_bez[0].y + z * step) // the sampling height\n    let (u = bezier_line_intersection(side_bez, [[0, sample_z],[1, sample_z]]))\n    flatten(bezier_points(side_bez,u)).x / side_bez[0].x;\n\noutside =[for(i=[0:steps]) scale([layer_xy_scale(i),layer_xy_scale(i),1],up(i*step, layer))];\ninside = [for (curve = outside) hstack(offset(path2d(curve), delta = -2, same_length = true), column(curve,2))];\n\nbase = path3d(path2d(outside[0]));  //flatten the base but keep as a 3d path\nfloor = up(wall, path3d(offset(path2d(outside[0]), -wall)));\n\nskin([ base, each outside, each reverse(inside), floor ], slices=0, refine=1, method=\"fast_distance\");\n```\n\n----------------------------------------\n\nTITLE: Basic Object Positioning without Orientation in BOSL2\nDESCRIPTION: Shows how position() alone places a child cube at a specified anchor of the parent, maintaining the default vertical orientation of the child.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_38\n\nLANGUAGE: openscad\nCODE:\n```\ninclude<BOSL2/std.scad>\nprismoid([50,50],[30,30],h=40)\n  position(RIGHT+TOP)\n     cube([15,15,25],anchor=RIGHT+BOT);\n```\n\n----------------------------------------\n\nTITLE: Using Starting Point with xcopies() in OpenSCAD\nDESCRIPTION: Shows how to set a starting point for the distribution, creating 5 spheres extending to the right from the origin.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Distributors.md#_snippet_9\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\nxcopies(20, n=5, sp=[0,0,0]) sphere(d=10);\n```\n\n----------------------------------------\n\nTITLE: Creating Alternative Staggered Grid Pattern in OpenSCAD\nDESCRIPTION: Demonstrates an alternative staggered grid pattern with 12×6 items using stagger=\"alt\" parameter.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Distributors.md#_snippet_18\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\ngrid_copies(20, n=[12,6], stagger=\"alt\") sphere(d=10);\n```\n\n----------------------------------------\n\nTITLE: Rounding Axis-Aligned Cuboid Edges with BOSL2 in OpenSCAD\nDESCRIPTION: Rounds only the Z-aligned edges of a rectangular cuboid using BOSL2's cuboid() module. The 'edges' parameter targets alignment (here, \"Z\"), and 'rounding' sets the radius. Requires BOSL2. Input: cuboid dimensions; Output: cuboid with only Z edges rounded.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Rounding_the_Cube.md#_snippet_1\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude \\u003cBOSL2/std.scad\\u003e\\ncuboid([100,80,60], rounding=20, edges = \"Z\");\n```\n\n----------------------------------------\n\nTITLE: Sweeping a Region Along a Transform Path in 3D Using sweep() in BOSL2 (OpenSCAD-3D)\nDESCRIPTION: This 3D example uses the sweep() function to extrude a 2D region (concentric circles) along a path defined by a sequence of transformations. The input is a region and a list of transformations constructed with xrot() and move(), and sweep() outputs a complex solid. $fa and $fs are set for high resolution; suitable for advanced solid generation.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Paths.md#_snippet_61\n\nLANGUAGE: OpenSCAD-3D\nCODE:\n```\ninclude <BOSL2/std.scad>\n$fa=1; $fs=1;\nrgn = [ for (d=[50:-10:10]) circle(d=d) ];\ntforms = [\n    for (a=[90:-5:0]) xrot(a, cp=[0,-70]),\n    for (a=[0:5:90]) xrot(a, cp=[0,70]),\n    move([0,150,-70]) * xrot(90),\n];\nsweep(rgn, tforms, closed=false, caps=true);\n```\n\n----------------------------------------\n\nTITLE: Applying Transformations After `attach` in OpenSCAD (BOSL2)\nDESCRIPTION: Demonstrates the effect of applying a transformation (`up(13)`) *after* the `attach()` module call. The transformation operates in the parent object's global coordinate system, moving the attached cylinder upwards relative to the parent cuboid. The `%attach` shows the original position. Requires the BOSL2 standard library.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_83\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\ncuboid(50){\n  %attach(RIGHT,BOT)\n    cyl(d1=30,d2=15,h=25);\n  up(13)\n    color(\"green\") attach(RIGHT,BOT)\n      cyl(d1=30,d2=15,h=25);\n}\n```\n\n----------------------------------------\n\nTITLE: Using align() with Rotated Children in BOSL2\nDESCRIPTION: Demonstrates how align() correctly positions children even when they are rotated with the spin parameter, automatically calculating the correct anchors.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_49\n\nLANGUAGE: openscad\nCODE:\n```\ninclude<BOSL2/std.scad>\ncuboid([50,40,15])\n    align(TOP,[RIGHT,LEFT])\n        color(\"lightblue\")prismoid([10,5],[7,4],height=4,spin=90);\n```\n\n----------------------------------------\n\nTITLE: Spinning a 2D Ellipse - BOSL2 - OpenSCAD 2D\nDESCRIPTION: This snippet shows applying a `spin` of 30 degrees to a 2D BOSL2 `ellipse`. The spin rotates the ellipse around the origin in the 2D plane.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_24\n\nLANGUAGE: OpenSCAD-2D\nCODE:\n```\ninclude <BOSL2/std.scad>\nellipse(d=[40,30], spin=30);\n```\n\n----------------------------------------\n\nTITLE: Spinning a Hexagonal Circle\nDESCRIPTION: Demonstrates spinning a hexagonal circle ($fn=6) by 15 degrees.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Shapes2d.md#_snippet_14\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\ncircle(d=50, $fn=6, spin=15);\n```\n\n----------------------------------------\n\nTITLE: Replicating Branches Around the Trunk in OpenSCAD\nDESCRIPTION: Modifies the `tree` module to create multiple copies (n=2) of a branch rotated around the Z-axis at the top of the trunk using the BOSL2 `zrot_copies(n)` command. This simplifies creating symmetrical branching patterns.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/FractalTree.md#_snippet_2\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\nmodule tree(l=1500, sc=0.7)\n    cylinder(h=l, d1=l/5, d2=l/5*sc)\n        attach(TOP)\n            zrot_copies(n=2)  // Replicate that branch\n                yrot(30) cylinder(h=l*sc, d1=l/5*sc, d2=l/5*sc*sc);\ntree();\n```\n\n----------------------------------------\n\nTITLE: Stroke with Rect Polygon - OpenSCAD\nDESCRIPTION: This snippet demonstrates the creation of a rectangle using the `rect()` function and its path is drawn with `stroke()`.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Paths.md#_snippet_17\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\npath = rect([40,30], rounding=5);\nstroke(list_wrap(path), endcap2=\"arrow2\");\n```\n\n----------------------------------------\n\nTITLE: Using Different X and Y Spacing with grid_copies() in OpenSCAD\nDESCRIPTION: Demonstrates creating a 6×4 grid with different spacing in X (20) and Y (30) directions.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Distributors.md#_snippet_16\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\ngrid_copies([20,30], n=[6,4]) sphere(d=10);\n```\n\n----------------------------------------\n\nTITLE: Attaching Two Cylinders Using CENTER Anchors in OpenSCAD (BOSL2)\nDESCRIPTION: Demonstrates attaching a child cylinder to a parent cylinder using `attach(CENTER, CENTER)`. Since both `CENTER` anchors point upwards by default, the child cylinder is inverted when its anchor is aligned with the parent's anchor. Requires the BOSL2 standard library.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_86\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\ncylinder(d1=30,d2=15,h=25)\n    attach(CENTER,CENTER)\n        cylinder(d1=30,d2=15,h=25);\n```\n\n----------------------------------------\n\nTITLE: Staggered Grid with Size Specification in OpenSCAD\nDESCRIPTION: Demonstrates creating a staggered grid with specific total size of 100×80 units and 20 units spacing.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Distributors.md#_snippet_22\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\ngrid_copies(20, size=[100,80], stagger=true) sphere(d=10);\n```\n\n----------------------------------------\n\nTITLE: Single-Argument `attach` Overriding Child Anchor in OpenSCAD (BOSL2)\nDESCRIPTION: Illustrates using single-argument `attach()` with a parent anchor (`RIGHT`) while explicitly setting the child's anchor using the `anchor=BOT` parameter on the child `cuboid`. This places the child's bottom face at the parent's right face anchor point. Requires the BOSL2 standard library.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_92\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\ncuboid(30)\n  attach(RIGHT)\n      color(\"green\")cuboid(10,anchor=BOT);\n```\n\n----------------------------------------\n\nTITLE: Attaching to TOP Using LEFT Side in OpenSCAD\nDESCRIPTION: Demonstrates attaching a prismoid to the TOP face of a cube using the LEFT side of the prismoid, showing how anchor directions are oriented following the attachment rules.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_67\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\ncube(30) attach(TOP,LEFT)\ncolor_this(\"orange\")\n  prismoid([8,8],[6,6],shift=-[1,1],h=8) {\n    attach(TOP,BOT) anchor_arrow(color=[0,1,0],s=12);\n    attach(FWD,BOT) anchor_arrow(s=12);     \n  }\n```\n\n----------------------------------------\n\nTITLE: Stroke with Pentagon Polygon - OpenSCAD\nDESCRIPTION: This snippet demonstrates the creation of a pentagon using `pentagon()` and drawing the polygon with `stroke()`.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Paths.md#_snippet_21\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\npath = pentagon(d=50);\nstroke(list_wrap(path), endcap2=\"arrow2\");\n```\n\n----------------------------------------\n\nTITLE: File Block Example in OpenSCAD Documentation\nDESCRIPTION: Demonstrates a simpler File block that can be used instead of LibFile when appropriate, with a brief description of the file's purpose.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/WRITING_DOCS.md#_snippet_4\n\nLANGUAGE: openscad\nCODE:\n```\n// File: Foobar.scad\n//   This file contains a collection of metasyntactical nonsense.\n```\n\n----------------------------------------\n\nTITLE: Creating Attachable Shape using VNF without Extent\nDESCRIPTION: This code shows the alternative way to define the attachable shape using VNF by setting extent to false. When `extent=false`, then the anchor point will be the furthest intersection of the VNF with the anchor ray from the origin. \nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_118\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\nmodule stellate_cube(s=100, anchor=CENTER, spin=0, orient=UP) {\n    s2 = 3 * s;\n    verts = [\n        [0,0,-s2*sqrt(2)/2],\n        each down(s/2, p=path3d(square(s,center=true))),\n        each zrot(45, p=path3d(square(s2,center=true))),\n        each up(s/2, p=path3d(square(s,center=true))),\n        [0,0,s2*sqrt(2)/2]\n    ];\n    faces = [\n        [0,2,1], [0,3,2], [0,4,3], [0,1,4],\n        [1,2,6], [1,6,9], [6,10,9], [2,10,6],\n        [1,5,4], [1,9,5], [9,12,5], [5,12,4],\n        [4,8,3], [4,12,8], [12,11,8], [11,3,8],\n        [2,3,7], [3,11,7], [7,11,10], [2,7,10],\n        [9,10,13], [10,11,13], [11,12,13], [12,9,13]\n    ];\n    vnf = [verts, faces];\n    attachable(anchor,spin,orient, vnf=vnf, extent=false) {\n        vnf_polyhedron(vnf);\n        children();\n    }\n}\nstellate_cube() show_anchors(50);\n```\n\n----------------------------------------\n\nTITLE: Visualizing Path with Stroke - OpenSCAD\nDESCRIPTION: This snippet demonstrates the basic usage of the `stroke()` module to visualize a path. It draws the line segments of the path given a list of points.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Paths.md#_snippet_1\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\npath = [[0,0], [-10,10], [0,20], [10,20], [10,10]];\nstroke(path);\n```\n\n----------------------------------------\n\nTITLE: Two-Parameter attach() with Circle\nDESCRIPTION: Uses attach() with polar coordinates and a specific child side to connect shapes.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Shapes2d.md#_snippet_30\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\ncircle(d=50)\n    attach(polar_to_xy(1,30), LEFT)\n        #square([10,40], center=true);\n```\n\n----------------------------------------\n\nTITLE: Filleting Cuboid Edges with Negative Rounding Radius in BOSL2 (OpenSCAD)\nDESCRIPTION: Creates a concave fillet on the bottom face edges of a cuboid using a negative 'rounding' value. BOSL2 required. Only non-Z-aligned (horizontal) edges can be filleted by this parameter; for Z edges, use fillet(). Inputs: sizes, negative radius, 'edges=BOTTOM'. Output: cuboid with bottom fillets.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Rounding_the_Cube.md#_snippet_9\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude \\u003cBOSL2/std.scad\\u003e\\ncuboid([100,80,60], rounding=-20, edges = BOTTOM);\n```\n\n----------------------------------------\n\nTITLE: Single-Argument `attach` with `cube` Default Anchor in OpenSCAD (BOSL2)\nDESCRIPTION: Shows the result of using single-argument `attach(TOP)` with a `cube` as the child. Unlike `cuboid`, the default anchor for `cube` is not centered, leading to a different positioning relative to the parent's `TOP` face. Requires the BOSL2 standard library.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_91\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\ncube(30)\n    attach(TOP)\n        color(\"green\")cube(10);\n```\n\n----------------------------------------\n\nTITLE: Override FWD Anchor Position, Direction, Spin - BOSL2 OpenSCAD\nDESCRIPTION: Shows how to override the position `[0,-s/8,0]`, direction (`FWD+LEFT`), and spin (`225`) of a specific standard anchor (FWD) using a list format for the `override` parameter. All three components of the override triple are explicitly provided.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_124\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude<BOSL2/std.scad>\nmodule cubic_barbell(s=100, anchor=CENTER, spin=0, orient=UP) {\n    override = [\n                 [FWD,  [[0,-s/8,0], FWD+LEFT, 225]]\n               ];\n    attachable(anchor,spin,orient, size=[s*3,s,s],override=override) {\n        union() {\n            xcopies(2*s) cube(s, center=true);\n            xcyl(h=2*s, d=s/4);\n        }\n        children();\n    }\n}\ncubic_barbell(100) show_anchors(60);\n```\n\n----------------------------------------\n\nTITLE: Stroke with Separate Endcaps - OpenSCAD\nDESCRIPTION: This snippet shows how to specify different endcaps for the start and end points using `endcap1=` and `endcap2=` arguments.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Paths.md#_snippet_11\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\npath = [[0,0], [-10,10], [0,20], [10,20], [10,10]];\nstroke(path, endcap1=\"butt\", endcap2=\"arrow2\");\n```\n\n----------------------------------------\n\nTITLE: Stroke with Tail Endcaps - OpenSCAD\nDESCRIPTION: This snippet demonstrates using `endcaps=\"tail\"` to create tail endcaps for the path.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Paths.md#_snippet_8\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\npath = [[0,0], [-10,10], [0,20], [10,20], [10,10]];\nstroke(path, endcaps=\"tail\");\n```\n\n----------------------------------------\n\nTITLE: Stroke with Tail and Arrow Endcaps - OpenSCAD\nDESCRIPTION: This snippet demonstrates setting different endcaps, `tail` for the starting end and `arrow` for the ending end.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Paths.md#_snippet_12\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\npath = [[0,0], [-10,10], [0,20], [10,20], [10,10]];\nstroke(path, endcap1=\"tail\", endcap2=\"arrow\");\n```\n\n----------------------------------------\n\nTITLE: Turtle Graphics with Repeat Command - OpenSCAD\nDESCRIPTION: This example shows the use of the `repeat` command in the `turtle()` command which repeats a sequence of actions. This is useful for creating regular patterns.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Paths.md#_snippet_33\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\npath=turtle([\n    \"angle\",360/5,\n    \"length\",10,\n    \"repeat\",5,[\"move\",\"turn\"]\n]);\nstroke(path, endcap2=\"arrow2\");\n```\n\n----------------------------------------\n\nTITLE: Arc with Angle List - OpenSCAD\nDESCRIPTION: This snippet uses the `angle=` argument with a list of two angles to specify the starting and ending angles for the arc.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Paths.md#_snippet_27\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\npath = arc(angle=[120,45], r=30);\nstroke(path, endcap2=\"arrow2\");\n```\n\n----------------------------------------\n\nTITLE: Visualizing Anchor Directions in OpenSCAD\nDESCRIPTION: Shows a prismoid with arrows indicating the FRONT (blue) and UP (green) directions to explain how objects are oriented during attachment operations.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_66\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\ncolor_this(\"orange\")\nprismoid([8,8],[6,6],shift=-[1,1],h=8) {\n     attach(TOP,BOT) anchor_arrow(color=[0,1,0],s=12);\n     attach(FWD,BOT) anchor_arrow(s=12);     \n}\n```\n\n----------------------------------------\n\nTITLE: Controlling Bézier Curve Resolution with splinesteps\nDESCRIPTION: This snippet demonstrates customizing the number of straight segments used to approximate the Bézier curve using the splinesteps parameter, providing finer or coarser curve representations.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Beziers_for_Beginners.md#_snippet_11\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude<BOSL2/std.scad>\n\nbez = [[20,0], [60,40], [-20,50], [25,80]];\npath = bezpath_curve(bez, splinesteps = 6);\nstroke(path);\n```\n\n----------------------------------------\n\nTITLE: Stroke with Variable Width Per Point - OpenSCAD\nDESCRIPTION: This code demonstrates how to vary the line width along a path by providing a list of widths corresponding to each point in the path.  The `width=` argument takes a list of widths in this example.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Paths.md#_snippet_3\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\npath = [[0,0], [-10,10], [0,20], [10,20], [10,10]];\nstroke(path, width=[3,2,1,2,3]);\n```\n\n----------------------------------------\n\nTITLE: Constructing a Basic Rounded Prism with default parameters in OpenSCAD\nDESCRIPTION: This snippet demonstrates how to generate a basic rounded prism by including necessary BOSL2 modules and calling rounded_prism() with default settings, producing a cube-like object with continuous curvature rounding. It depends on 'std.scad' and 'rounding.scad' from BOSL2.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Rounding_the_Cube.md#_snippet_31\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\ninclude <BOSL2/rounding.scad>\nrounded_prism(rect(20), height=20, \n    joint_top=9.99, joint_bot=9.99, joint_sides=9.99, k = 0.5);\n```\n\n----------------------------------------\n\nTITLE: Rotating around Custom Center Point using yrot(cp=) in BOSL2/OpenSCAD\nDESCRIPTION: Demonstrates rotating a cube 45 degrees around the Y-axis, centered on a custom point `cp = [0,0,40]` using the `cp` argument of the BOSL2 `yrot()` command. A sphere marks the center point.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Transforms.md#_snippet_19\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\ncp = [0,0,40];\ncolor(\"blue\") move(cp) sphere(d=3);\n#cube(20, center=true);\nyrot(45, cp=cp) cube(20, center=true);\n```\n\n----------------------------------------\n\nTITLE: Anchoring a Cylinder with cylindrical_to_xyz - BOSL2 - OpenSCAD 3D\nDESCRIPTION: This snippet shows anchoring a BOSL2 `cylinder` module using a vector generated by `cylindrical_to_xyz(1,30,1)`. This function converts cylindrical coordinates (radius 1, angle 30 degrees, Z-level 1) into a Cartesian vector used by `anchor`, anchoring the cylinder on its top rim at a 30-degree angle in the XY plane.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_7\n\nLANGUAGE: OpenSCAD-3D\nCODE:\n```\ninclude <BOSL2/std.scad>\ncylinder(r1=25, r2=15, h=60, anchor=cylindrical_to_xyz(1,30,1));\n```\n\n----------------------------------------\n\nTITLE: Flipping Paths Along X Using xflip in BOSL2 (OpenSCAD-2D)\nDESCRIPTION: This code shows how to flip a 2D path along the X-axis using BOSL2's xflip(). Dependencies are BOSL2 and OpenSCAD. The shape is specified in p= and the flipped output is rendered with stroke(). Only horizontal flipping is applied.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Paths.md#_snippet_44\n\nLANGUAGE: OpenSCAD-2D\nCODE:\n```\ninclude <BOSL2/std.scad>\npath = xflip(p=trapezoid(w1=40, w2=10, h=25));\nstroke(list_wrap(path), endcap2=\"arrow2\");\n```\n\n----------------------------------------\n\nTITLE: Turtle Graphics with Arc Commands - OpenSCAD\nDESCRIPTION: This code combines standard commands with arc commands like `arcleft`. This creates more complex shapes directly in the turtle's path description language.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Paths.md#_snippet_34\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\npath = turtle([\n    \"move\", 10,\n    \"left\", 90,\n    \"move\", 20,\n    \"arcleft\", 10, 180,\n    \"move\", 20\n]);\nstroke(path, endcap2=\"arrow2\");\n```\n\n----------------------------------------\n\nTITLE: Positioning a Single Child at Multiple Parent Anchors in OpenSCAD (BOSL2)\nDESCRIPTION: Demonstrates positioning the same child shape (a cylinder) relative to multiple locations on the parent object using the `position()` module. A list of parent anchors (`[TOP,RIGHT,FRONT]`) is provided to create copies of the child at each specified anchor point. Requires the BOSL2 standard library.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_98\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\ncube(50, center=true)\n    position([TOP,RIGHT,FRONT]) cylinder(d1=35,d2=20,h=25);\n```\n\n----------------------------------------\n\nTITLE: Attaching to a Linear Sweep\nDESCRIPTION: This example demonstrates attaching to a 2D shape that has been swept linearly in 3D. It shows how to attach an anchor arrow to the right side of the swept shape.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_119\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\n$fn=32;\nR = difference(circle(10), right(2, circle(9)));\nlinear_sweep(R,height=10,atype=\"hull\")\n    attach(RIGHT) anchor_arrow();\n```\n\n----------------------------------------\n\nTITLE: Mixing Anchor and Spin for 2D Square - BOSL2 - OpenSCAD 2D\nDESCRIPTION: This snippet shows how `anchor` and `spin` can be combined for a 2D shape. The `square` is first anchored at its back-left corner (`anchor=BACK+LEFT`) and then spun by 30 degrees (`spin=30`) around the origin.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_30\n\nLANGUAGE: OpenSCAD-2D\nCODE:\n```\ninclude <BOSL2/std.scad>\nsquare([40,30], anchor=BACK+LEFT, spin=30);\n```\n\n----------------------------------------\n\nTITLE: Rotating Between Vectors using rot(from=, to=) in BOSL2/OpenSCAD\nDESCRIPTION: Shows the BOSL2 `rot()` command rotating an object (a cylinder) so that its original orientation (defined by the `from` vector [0,0,1]) points towards a new direction (defined by the `to` vector [1,0,1]).\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Transforms.md#_snippet_21\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\n#cylinder(d=10, h=50);\nrot(from=[0,0,1], to=[1,0,1]) cylinder(d=10, h=50);\n```\n\n----------------------------------------\n\nTITLE: Example Block Using CommonCode in OpenSCAD Documentation\nDESCRIPTION: Demonstrates how to use code defined in a CommonCode block within an Example block in the documentation.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/WRITING_DOCS.md#_snippet_10\n\nLANGUAGE: openscad\nCODE:\n```\n// Example:\n//   text3d(\"Foobar\");\n```\n\n----------------------------------------\n\nTITLE: Detecting Reversed Faces in a VNF using vnf_validate (BOSL2)\nDESCRIPTION: Utilizes the `vnf_validate` module from BOSL2 to programmatically detect errors in a VNF structure. This example uses a VNF with a reversed top face and a missing front face triangle. `vnf_validate` reports the reversed face error (ERROR REVERSAL) to the console and highlights the problematic edges in the preview. The `size` parameter controls the size of the error indicators.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/VNF.md#_snippet_7\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\nvnf = [\n    [\n        [-1,-1,-1], [1,-1,-1], [1,1,-1], [-1,1,-1],\n        [-1,-1, 1], [1,-1, 1], [1,1, 1], [-1,1, 1],\n    ],\n    [\n        [0,1,2], [0,2,3],  //BOTTOM\n        [0,4,5], //FRONT\n        [1,5,6], [1,6,2],  //RIGHT\n        [2,6,7], [2,7,3],  //BACK\n        [3,7,4], [3,4,0],  //LEFT\n        [6,4,7], [6,4,5]   //TOP\n    ]\n];\nvnf_validate(vnf, size=0.1);\n```\n\n----------------------------------------\n\nTITLE: Turtle Graphics with Scaling - OpenSCAD\nDESCRIPTION: This snippet utilizes the `scale` command within the `turtle()` to change the default movement length relative to the current length setting.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Paths.md#_snippet_32\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\npath = turtle([\n    \"angle\",360/6,\n    \"length\",10,\n    \"move\",\"turn\",\n    \"move\",\"turn\",\n    \"scale\",2,\n    \"move\",\"turn\",\n    \"move\",\"turn\",\n    \"scale\",0.5,\n    \"move\"\n]);\nstroke(path, endcap2=\"arrow2\");\n```\n\n----------------------------------------\n\nTITLE: Scaling Paths Using scale in BOSL2 (OpenSCAD-2D)\nDESCRIPTION: This snippet demonstrates non-uniform scaling of a 2D path using the scale() function with a scaling vector. Requires BOSL2 and OpenSCAD. The key parameter is the scaling factor for each axis, and the output is the scaled square visualized with an arrow-capped stroke(). Only 2D scale transformations are demonstrated.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Paths.md#_snippet_38\n\nLANGUAGE: OpenSCAD-2D\nCODE:\n```\ninclude <BOSL2/std.scad>\npath = scale([1.5,0.75], p=square(50,center=true));\nstroke(list_wrap(path), endcap2=\"arrow2\");\n```\n\n----------------------------------------\n\nTITLE: Anchoring a Sphere on Surface with Constants - BOSL2 - OpenSCAD 3D\nDESCRIPTION: This snippet shows anchoring a BOSL2 `sphere` module using vector constants `TOP+FRONT`. This anchors the sphere at a point on its surface that is in the direction of the upper-front quadrant (positive Z, negative Y), aligning that point with the origin.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_9\n\nLANGUAGE: OpenSCAD-3D\nCODE:\n```\ninclude <BOSL2/std.scad>\nsphere(r=50, anchor=TOP+FRONT);\n```\n\n----------------------------------------\n\nTITLE: Rotating around X-axis using xrot() in BOSL2/OpenSCAD\nDESCRIPTION: Shows the BOSL2 `xrot()` shortcut command to rotate an object (a centered cube) 30 degrees around the X-axis. This is clearer than `rotate([30,0,0])`.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Transforms.md#_snippet_14\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\nxrot(30) cube(20, center=true);\n```\n\n----------------------------------------\n\nTITLE: Using BOSL2 `recolor()` for Child Color Priority in OpenSCAD\nDESCRIPTION: Shows the BOSL2 `recolor()` module, which allows a child object's color to override its parent's color, contrary to the standard `color()` behavior. This requires the BOSL2 library and only works if nested `color()` calls are avoided.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_102\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\n$fn = 24;\nrecolor(\"red\") spheroid(d=3) {\n    attach(CENTER,BOT) recolor(\"white\") cyl(h=10, d=1) {\n        attach(TOP,BOT) recolor(\"green\") cyl(h=5, d1=3, d2=0);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Teardrop and Rounding Edge Masks for Printing Optimization\nDESCRIPTION: This snippet describes how to use teardrop edge and corner masks to limit overhang angles for better 3D printing on FDM printers, combined with standard rounding masks. It applies masks on the bottom and right edges with specified overhang angles, improving printability and aesthetics.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Rounding_the_Cube.md#_snippet_30\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\ndiff()\n  cuboid([60,80,40]) {\n   edge_mask(BOT+FWD)\n    teardrop_edge_mask(r = 10, l = $parent_size.x + 0.1, angle = 40);\n   edge_mask(BOT+RIGHT)\n    teardrop_edge_mask(r = 10, l = $parent_size.y + 0.1, angle = 40);\n   edge_mask(RIGHT+FWD)\n    rounding_edge_mask(r = 10, l = $parent_size.z + 0.1);\n        corner_mask(BOT+RIGHT+FWD)\n            teardrop_corner_mask(r = 10, angle = 40);\n }\n```\n\n----------------------------------------\n\nTITLE: Rotating Paths Using rot in BOSL2 (OpenSCAD-2D)\nDESCRIPTION: This snippet rotates a 2D path using the rot() function, with the rotation angle as a parameter, via BOSL2 and OpenSCAD. The output is the rotated square corrected with an arrow-capped stroke(). Suitable for applying 2D rotation about the origin.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Paths.md#_snippet_41\n\nLANGUAGE: OpenSCAD-2D\nCODE:\n```\ninclude <BOSL2/std.scad>\npath = rot(30, p=square(50,center=true));\nstroke(list_wrap(path), endcap2=\"arrow2\");\n```\n\n----------------------------------------\n\nTITLE: Cloning BOSL2 Repository Using Git Command-Line (bash)\nDESCRIPTION: Demonstrates the sequence of bash commands to clone a fork of the BOSL2 repository, change directory into it, and add the upstream remote to keep the fork synchronized. This snippet requires git to be installed and configured with authentication. It expects no parameters, but users should replace 'YOURLOGIN' with their GitHub username. Output includes a local copy of the BOSL2 repo with upstream tracking set.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:YOURLOGIN/BOSL2.git\ncd BOSL2\ngit remote add upstream https://github.com/BelfrySCAD/BOSL2.git\n```\n\n----------------------------------------\n\nTITLE: Rotating around Custom Center Point using zrot(cp=) in BOSL2/OpenSCAD\nDESCRIPTION: Demonstrates rotating a cube 45 degrees around the Z-axis, centered on a custom point `cp = [0,40,0]` using the `cp` argument of the BOSL2 `zrot()` command. A sphere marks the center point.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Transforms.md#_snippet_20\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\ncp = [0,40,0];\ncolor(\"blue\") move(cp) sphere(d=3);\n#cube(20, center=true);\nzrot(45, cp=cp) cube(20, center=true);\n```\n\n----------------------------------------\n\nTITLE: Uniform Scaling using scale() in OpenSCAD\nDESCRIPTION: Demonstrates the standard OpenSCAD `scale()` command to uniformly scale an object (a centered cube) by a factor of 2 in all directions.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Transforms.md#_snippet_8\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\nscale(2) cube(10, center=true);\n```\n\n----------------------------------------\n\nTITLE: Edge Rounding Selection via 3x4 Array Mask in Cuboid (BOSL2, OpenSCAD)\nDESCRIPTION: Customizes which specific 12 edges are rounded on a cuboid using a 3x4 binary array for the 'edges' parameter. Each row and value corresponds to edge positions as per documentation. Requires BOSL2. Input: cuboid size, 3x4 edge array; Output: cuboid with rounding only on marked edges.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Rounding_the_Cube.md#_snippet_7\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude \\u003cBOSL2/std.scad\\u003e\\ncuboid([100,80,60], rounding=20, edges = [[1,0,1,0],[0,1,0,1],[1,0,0,1]]);\n```\n\n----------------------------------------\n\nTITLE: Rotating Paths Around Z Axis Using zrot in BOSL2 (OpenSCAD-2D)\nDESCRIPTION: This code rotates a 2D path around the Z-axis with zrot() from BOSL2, requiring BOSL2 and OpenSCAD. The key parameter is the rotation angle, and the visual output is a Z-rotated square shown with stroke(). Designed for Z-axis rotation in 2D.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Paths.md#_snippet_42\n\nLANGUAGE: OpenSCAD-2D\nCODE:\n```\ninclude <BOSL2/std.scad>\npath = zrot(30, p=square(50,center=true));\nstroke(list_wrap(path), endcap2=\"arrow2\");\n```\n\n----------------------------------------\n\nTITLE: Translating Paths Using move in BOSL2 (OpenSCAD-2D)\nDESCRIPTION: This snippet demonstrates translating a 2D path using the move() function provided by BOSL2, with the p= argument specifying a shape. It requires BOSL2 and OpenSCAD. The key parameter is the translation vector, and the shape is visualized with stroke(). Outputs show the translated square path with an arrow endcap. This operation is limited to 2D paths.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Paths.md#_snippet_35\n\nLANGUAGE: OpenSCAD-2D\nCODE:\n```\ninclude <BOSL2/std.scad>\npath = move([-15,-30], p=square(50,center=true));\nstroke(list_wrap(path), endcap2=\"arrow2\");\n```\n\n----------------------------------------\n\nTITLE: Positioning Child Objects at Parent's Center in OpenSCAD using BOSL2\nDESCRIPTION: Demonstrates parent-child positioning where a cylinder is placed at the center of a cube. By default, the child's anchor point aligns with the center of the parent object.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_31\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\nup(13) cube(50)\n    cyl(d=25,l=95);\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Fork from Upstream Using Git Command-Line (bash)\nDESCRIPTION: Shows the git pull command to fetch and merge updates from the configured upstream remote repository into the local fork in bash. This step helps to keep the local fork synchronized before starting new changes. Assumes 'upstream' remote has been set. No inputs are required; the output is an updated local repository state.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit pull upstream\n```\n\n----------------------------------------\n\nTITLE: Translating Objects Back using back() in BOSL2/OpenSCAD\nDESCRIPTION: Shows the BOSL2 `back()` shortcut command to translate an object (a sphere) 30 units along the positive Y-axis. This is a more readable alternative to `translate([0,30,0])`.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Transforms.md#_snippet_4\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\n#sphere(d=20);\nback(30) sphere(d=20);\n```\n\n----------------------------------------\n\nTITLE: Scaling Paths Along the Y Axis Using yscale in BOSL2 (OpenSCAD-2D)\nDESCRIPTION: This code utilizes yscale() from BOSL2 to scale a 2D path along the Y-axis. BOSL2 and OpenSCAD are required. The important parameter is the Y-axis scaling factor, and outputs show the scaled square via stroke() with an arrow endcap. Constrained to Y-axis scaling transformations.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Paths.md#_snippet_40\n\nLANGUAGE: OpenSCAD-2D\nCODE:\n```\ninclude <BOSL2/std.scad>\npath = yscale(1.5, p=square(50,center=true));\nstroke(list_wrap(path), endcap2=\"arrow2\");\n```\n\n----------------------------------------\n\nTITLE: Turtle Graphics - OpenSCAD\nDESCRIPTION: This code utilizes the `turtle()` command with a list of commands to generate a path. The commands control the virtual turtle's movement (move, left, right) and construct a shape.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Paths.md#_snippet_30\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\npath = turtle([\n    \"move\", 10,\n    \"left\", 90,\n    \"move\", 20,\n    \"left\", 135,\n    \"move\", 10*sqrt(2),\n    \"right\", 90,\n    \"move\", 10*sqrt(2),\n    \"left\", 135,\n    \"move\", 20\n]);\nstroke(path, endcap2=\"arrow2\");\n```\n\n----------------------------------------\n\nTITLE: Basic Square with BOSL2 in OpenSCAD\nDESCRIPTION: Creates a centered square with dimensions 60x40 using BOSL2 library.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Shapes2d.md#_snippet_0\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\nsquare([60,40], center=true);\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Regions of Circles Using for Loops in BOSL2 (OpenSCAD-2D)\nDESCRIPTION: This snippet builds a region composed of nested circles on left and right, using for loops and left()/right(). Region() visualizes the arrangement. Inputs are diameter steps; outputs are a complex region structure with multiple discontiguous/nested polygons. Deeply nested regions are supported.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Paths.md#_snippet_53\n\nLANGUAGE: OpenSCAD-2D\nCODE:\n```\ninclude <BOSL2/std.scad>\nrgn = [\n    for (d=[50:-10:10]) left(30, p=circle(d=d)),\n    for (d=[50:-10:10]) right(30, p=circle(d=d))\n];\nregion(rgn);\n```\n\n----------------------------------------\n\nTITLE: Using attach() for Square Corner Attachment\nDESCRIPTION: Uses the attach() module to both position and orient a child at a corner of a square in one step.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Shapes2d.md#_snippet_27\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\nsquare(50, center=true)\n    attach(LEFT+BACK)\n        #square([10,40], anchor=FWD);\n```\n\n----------------------------------------\n\nTITLE: Rounding Top/Bottom Vertical Edges of Prismoid with BOSL2 in OpenSCAD\nDESCRIPTION: Rounds vertical edges of a prismoid primitive independently at top and bottom using 'rounding1' (top) and 'rounding2' (bottom) parameters. Requires BOSL2 (prismoid()). Inputs: top and bottom face sizes, height, rounding radii. Outputs: prismoid with specified vertical edge rounding per end.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Rounding_the_Cube.md#_snippet_12\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude \\u003cBOSL2/std.scad\\u003e\\nprismoid(size1=[35,50], size2=[20,30], h=20, rounding1 = 8, rounding2 = 1);\n```\n\n----------------------------------------\n\nTITLE: Inside Attachment with Difference Operation in OpenSCAD\nDESCRIPTION: Demonstrates using inside=true parameter with attach() to position an object inside the parent for subtraction using diff(), showing a cutaway view with back_half().\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_78\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\nback_half(s=200)\ndiff()\ncube(50,anchor=BOT)\n  attach(TOP,TOP,inside=true)\n```\n\n----------------------------------------\n\nTITLE: Attaching Objects Side-to-Side in OpenSCAD\nDESCRIPTION: Demonstrates attaching the curved side of a cone to a cube by lining up RIGHT and LEFT anchors. Shows the anchor arrows and then the resulting attached objects.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_65\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\ncube(50,center=true) attach(RIGHT,BOT) anchor_arrow(30);\nright(80)cylinder(d1=30,d2=15,h=25) attach(LEFT,BOT) anchor_arrow(30);\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\ncube(50,center=true)\n  attach(RIGHT,LEFT) cylinder(d1=30,d2=15,h=25);\n```\n\n----------------------------------------\n\nTITLE: Creating a Cylinder to Fit the Vase at y=2\nDESCRIPTION: Using the intersection data from the Bézier curve, this 3D snippet creates a cylinder with height 2, bottom radius equal to the control point's x-coordinate at the base, and top radius at the y=2 level computed from intersection points, modeling the bottom opening of the vase.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Beziers_for_Beginners.md#_snippet_17\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude<BOSL2/std.scad>\ninclude<BOSL2/rounding.scad>\n\n$fn = 72;\n\nbez = [[15,0], [60,40], [-25,50], [25,80]];\npath = offset_stroke(bezier_curve(bez, splinesteps = 32), [0,2]);\nback_half(s = 200) rotate_sweep(path,360);\nline = [[0,2], [30,2]];\nu = bezier_line_intersection(bez,line).x;\nr2 = bezier_points(bez,u).x;\ncolor(\"red\") cyl(h = 2, r1 = bez[0].x, r2 = r2, anchor = BOT);\n```\n\n----------------------------------------\n\nTITLE: Edge-Specific Rounding for Prismoid Edges in BOSL2 (OpenSCAD)\nDESCRIPTION: Applies different rounding radii to each vertical edge of a prismoid, controlled by the 'rounding1' and 'rounding2' arrays. Each array element specifies the radius for a given edge, ordered counterclockwise from BACK+RIGHT. Requires BOSL2. Inputs: sizes (scalar or vector), arrays for top/bottom rounds, height. Outputs: prismoid with tailored vertical edge roundings.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Rounding_the_Cube.md#_snippet_13\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude \\u003cBOSL2/std.scad\\u003e\\nprismoid(100, 80, rounding1=[0,50,0,50], rounding2=[40,0,40,0], h=50);\n```\n\n----------------------------------------\n\nTITLE: Default Anchor Positioning with standard Cylinder in OpenSCAD\nDESCRIPTION: Shows how the standard cylinder() function's default BOTTOM anchor affects positioning. The cylinder's bottom is placed at the center of the parent cube.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_32\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\ncube(50)\n    cylinder(d=25,h=75);\n```\n\n----------------------------------------\n\nTITLE: Using align() with Multiple Anchor Directions in BOSL2\nDESCRIPTION: Shows how align() can position a child at a specific combination of anchors (TOP, RIGHT+FRONT) without requiring explicit anchoring of the child object.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_46\n\nLANGUAGE: openscad\nCODE:\n```\ninclude<BOSL2/std.scad>\ncuboid([50,40,15])\n    align(TOP,RIGHT+FRONT)\n        color(\"lightblue\")prismoid([10,5],[7,4],height=4);\n```\n\n----------------------------------------\n\nTITLE: Selective Edge Chamfering on Cuboid with Exclusion in BOSL2 (OpenSCAD)\nDESCRIPTION: Applies chamfering only to Z-aligned edges of a cuboid, while omitting those connecting the FWD and RIGHT faces. Uses both 'edges' and 'except' options. BOSL2 required. Inputs: dimensions; Outputs: cuboid with only desired edges chamfered.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Rounding_the_Cube.md#_snippet_11\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude \\u003cBOSL2/std.scad\\u003e\\ncuboid([100,80,60], chamfer=20, edges = \"Z\", except = FWD+RIGHT);\n```\n\n----------------------------------------\n\nTITLE: Anchoring a Cylinder at Top Rim with Constants - BOSL2 - OpenSCAD 3D\nDESCRIPTION: This snippet demonstrates anchoring a BOSL2 `cylinder` module using vector constants `TOP+LEFT`. This anchors the cylinder at a point on its top rim, specifically in the direction of the negative X-axis from the center of the top face.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_5\n\nLANGUAGE: OpenSCAD-3D\nCODE:\n```\ninclude <BOSL2/std.scad>\ncylinder(r1=25, r2=15, h=60, anchor=TOP+LEFT);\n```\n\n----------------------------------------\n\nTITLE: Mirroring across YZ-plane using xflip() in BOSL2/OpenSCAD\nDESCRIPTION: Shows the BOSL2 `xflip()` shortcut command to mirror an object (a rotated cylinder) across the YZ-plane (X=0). This is clearer than `mirror([1,0,0])`.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Transforms.md#_snippet_24\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\n#yrot(60) cylinder(h=50, d1=20, d2=10);\nxflip() yrot(60) cylinder(h=50, d1=20, d2=10);\n```\n\n----------------------------------------\n\nTITLE: Showing Anchor Points of Glued Circles with BOSL2 in OpenSCAD\nDESCRIPTION: Demonstrates how to visualize anchor points of glued circles shapes using the `show_anchors()` function call. Anchor points are based on the outermost extents of the shape and assist in positioning or attaching shapes in larger assemblies. Requires BOSL2 library inclusion and supports parameters to define circle size, spread, and tangent angle. Produces a 2D shape annotated with anchor positions for design reference.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Shapes2d.md#_snippet_39\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\nglued_circles(d=40, spread=40, tangent=45)\n    show_anchors();\n```\n\n----------------------------------------\n\nTITLE: Mirroring across XY-plane using zflip() in BOSL2/OpenSCAD\nDESCRIPTION: Shows the BOSL2 `zflip()` shortcut command to mirror an object (a cylinder) across the XY-plane (Z=0). This is clearer than `mirror([0,0,1])`.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Transforms.md#_snippet_26\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\n#cylinder(h=50, d1=20, d2=10);\nzflip() cylinder(h=50, d1=20, d2=10);\n```\n\n----------------------------------------\n\nTITLE: Using grid_copies() to Drill a Region of Holes in 3D (OpenSCAD-3D)\nDESCRIPTION: This 3D snippet demonstrates how to use grid_copies() with a region to drill holes through a solid. Dependencies are BOSL2 and OpenSCAD. Inputs include the region, grid size, and spacing; outputs are a difference() of a cylinder minus a patterned grid of cylinders. Supports combining 2D region definitions with 3D modeling.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Paths.md#_snippet_60\n\nLANGUAGE: OpenSCAD-3D\nCODE:\n```\ninclude <BOSL2/std.scad>\nrgn = [\n    circle(d=100),\n    star(n=5,step=2,d=100,spin=90)\n];\ndifference() {\n    cyl(h=5, d=120);\n    grid_copies(size=[120,120], spacing=[4,4], inside=rgn) cyl(h=10,d=2);\n}\n```\n\n----------------------------------------\n\nTITLE: Mirroring Paths Using mirror in BOSL2 (OpenSCAD-2D)\nDESCRIPTION: This snippet mirrors a 2D path using BOSL2's mirror() against a custom axis. BOSL2 and OpenSCAD are required. Parameters include the mirror axis and the shape to mirror; outputs use stroke() with arrow endcaps. Only supports mirroring of 2D paths.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Paths.md#_snippet_43\n\nLANGUAGE: OpenSCAD-2D\nCODE:\n```\ninclude <BOSL2/std.scad>\npath = mirror([1,1], p=trapezoid(w1=40, w2=10, h=25));\nstroke(list_wrap(path), endcap2=\"arrow2\");\n```\n\n----------------------------------------\n\nTITLE: Offsetting a Region Using offset() in BOSL2 (OpenSCAD-2D)\nDESCRIPTION: This code offsets a star region inward using BOSL2's offset() function and displays both the original and the offset shapes with color(). The closed parameter ensures region closure. Outputs include both the original and offset regions side by side for comparison. Only supports 2D region offsetting.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Paths.md#_snippet_59\n\nLANGUAGE: OpenSCAD-2D\nCODE:\n```\ninclude <BOSL2/std.scad>\norig_rgn = [star(n=5, step=2, d=50)];\nrgn = offset(orig_rgn, r=-3, closed=true);\ncolor(\"blue\") region(orig_rgn);\nregion(rgn);\n```\n\n----------------------------------------\n\nTITLE: Rounding and Chamfering Cylinders in OpenSCAD with BOSL2\nDESCRIPTION: Demonstrates how to use the rounding and chamfer parameters with cyl() to create cylinders with rounded or chamfered edges.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Shapes3d.md#_snippet_10\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\ncyl(d=100, l=100, rounding=20);\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\ncyl(d=100, l=100, chamfer=10);\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\ncyl(d=100, l=100, rounding1=20);\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\ncyl(d=100, l=100, rounding2=20);\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\ncyl(d=100, l=100, chamfer1=10);\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\ncyl(d=100, l=100, chamfer2=10);\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\ncyl(d=100, l=100, rounding1=20, chamfer2=10);\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\ncyl(d=100, l=100, rounding2=20, chamfer1=10);\n```\n\n----------------------------------------\n\nTITLE: FileFootnotes Block in OpenSCAD Documentation\nDESCRIPTION: Shows how to specify footnotes that are appended to a file's name in documentation listings, with examples of both single and multi-character footnote symbols.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/WRITING_DOCS.md#_snippet_7\n\nLANGUAGE: openscad\nCODE:\n```\n// FileFootnotes: 1=First Footnote; 2=Second Footnote\n```\n\nLANGUAGE: openscad\nCODE:\n```\n// FileFootnotes: STD=Included in std.scad\n```\n\n----------------------------------------\n\nTITLE: Defining a BulletList Block Header with openscad_docsgen (plaintext)\nDESCRIPTION: Demonstrates creating a BulletList block type for bullet-point documentation sections. Allows multi-line entries and references to variables/functions. To be used in documentation comments or config files processed by openscad_docsgen.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/WRITING_DOCS.md#_snippet_24\n\nLANGUAGE: plaintext\nCODE:\n```\n// DefineHeader(BulletList): Side Effects\n// Side Effects: For Typical Uses\n//   The variable {{$foo}} gets set.\n//   The default for subsequent calls is updated.\n```\n\n----------------------------------------\n\nTITLE: Chamfering Cuboid Edges using BOSL2 Chamfer Parameter (OpenSCAD)\nDESCRIPTION: Applies an equal chamfer to all edges of a cuboid using the 'chamfer' parameter with BOSL2's cuboid(). Chamfer value sets distance; no edge selector used. BOSL2 is a prerequisite. Input: cuboid size, chamfer value; Output: chamfered cuboid.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Rounding_the_Cube.md#_snippet_10\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude \\u003cBOSL2/std.scad\\u003e\\ncuboid([100,80,60], chamfer=20);\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Asymmetric Edge Profiles on Cube Using edge_profile_asym() in OpenSCAD\nDESCRIPTION: This snippet applies asymmetric edge profiles to both top and bottom edges of a cube using edge_profile_asym(). It demonstrates the flip parameter to control fillet flare and uses xflip() transform along with mask2d_roundover(10) mask. The cube size is 50. The snippet requires BOSL2 library and shows how to combine multiple edge_profile_asym() calls within a single cuboid for distinct edge treatments on different faces.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Rounding_the_Cube.md#_snippet_16\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude<BOSL2/std.scad>  \ncuboid(50){  \n edge_profile_asym(TOP, flip = true)  \n  xflip() mask2d_roundover(10);  \n   edge_profile_asym(BOT, corner_type=\"round\")  \n  xflip() mask2d_roundover(10);  \n   } \n```\n\n----------------------------------------\n\nTITLE: Scaling Paths Along the X Axis Using xscale in BOSL2 (OpenSCAD-2D)\nDESCRIPTION: This example uses xscale() to scale a 2D path along the X-axis. It depends on BOSL2 and OpenSCAD. The primary parameter is the X-axis scaling factor, and the square is scaled and visualized with an arrow-capped stroke(). Only X-axis scaling is applied to the path.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Paths.md#_snippet_39\n\nLANGUAGE: OpenSCAD-2D\nCODE:\n```\ninclude <BOSL2/std.scad>\npath = xscale(1.5, p=square(50,center=true));\nstroke(list_wrap(path), endcap2=\"arrow2\");\n```\n\n----------------------------------------\n\nTITLE: Creating Evenly Spaced Copies Along Z Axis in OpenSCAD\nDESCRIPTION: Demonstrates creating 5 spheres spaced 20 units apart along the Z axis using the zcopies() function.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Distributors.md#_snippet_2\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\nzcopies(20, n=5) sphere(d=10);\n```\n\n----------------------------------------\n\nTITLE: Using align() with inset Parameter in BOSL2\nDESCRIPTION: Shows how the inset parameter allows objects to be positioned near but not flush with edges of the parent, creating an inset effect around all four sides.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_48\n\nLANGUAGE: openscad\nCODE:\n```\ninclude<BOSL2/std.scad>\ncuboid([50,40,15])\n    align(TOP,[FWD,RIGHT,LEFT,BACK],inset=3)\n        color(\"lightblue\")prismoid([10,5],[7,4],height=4);\n```\n\n----------------------------------------\n\nTITLE: Subsection Block in OpenSCAD Documentation\nDESCRIPTION: Demonstrates a Subsection block which must be within a declared Section, showing how to format titles and markdown content with paragraph breaks.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/WRITING_DOCS.md#_snippet_12\n\nLANGUAGE: openscad\nCODE:\n```\n// Subsection: Foobar\n//   You can have several lines of markdown formatted text here.\n//   You just need to make sure that each line is indented, with\n//   at least three spaces after the comment marker.  You can\n//   denote a paragraph break with a comment line with three\n//   trailing spaces, or just a period.\n//   .\n//   You can have links in this text to functions, modules, or\n//   constants in other files by putting the name in double-\n//   braces like {{cyl()}} or {{lerp()}} or {{DOWN}}.  If you want to\n//   link to another file, or section in another file you can use\n```\n\n----------------------------------------\n\nTITLE: Spinning and Orienting Cubes in OpenSCAD with BOSL2\nDESCRIPTION: Shows how to use spin and orient parameters to rotate cubes after anchoring, with examples of combined transformations.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Shapes3d.md#_snippet_2\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\ncube([50,40,20], anchor=FRONT, spin=30);\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\ncube([50,40,20], orient=UP+BACK+RIGHT);\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\ncube([50,40,20], anchor=FRONT);\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\ncube([50,40,20], anchor=FRONT, spin=45);\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\ncube([50,40,20], anchor=FRONT, spin=45, orient=UP+FWD+RIGHT);\n```\n\n----------------------------------------\n\nTITLE: Creating a Circle with Radius in OpenSCAD\nDESCRIPTION: Creates a circle with radius 50 using BOSL2 library.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Shapes2d.md#_snippet_1\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\ncircle(r=50);\n```\n\n----------------------------------------\n\nTITLE: Cube Anchored and Spun - BOSL2 - OpenSCAD 3D\nDESCRIPTION: This snippet shows a BOSL2 `cube` anchored at its center (`anchor=CENTER`) and then spun by 45 degrees (`spin=45`). The spin happens after anchoring, so the cube rotates around its own center.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_28\n\nLANGUAGE: OpenSCAD-3D\nCODE:\n```\ninclude <BOSL2/std.scad>\ncube([20,20,50], anchor=CENTER, spin=45);\n```\n\n----------------------------------------\n\nTITLE: Limitations of align() with Angled Surfaces in BOSL2\nDESCRIPTION: Demonstrates that align() only adjusts anchor points but doesn't reorient children to match angled faces of the parent, resulting in imperfect edge alignment on sloped surfaces.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_51\n\nLANGUAGE: openscad\nCODE:\n```\ninclude<BOSL2/std.scad>\nprismoid(50,30,25){\n  align(RIGHT,TOP)\n    color(\"lightblue\")prismoid([10,5],[7,4],height=4);\n}\n```\n\n----------------------------------------\n\nTITLE: FileGroup Block in OpenSCAD Documentation\nDESCRIPTION: Shows how to specify what group a file belongs to, which affects ordering in Table of Contents and CheatSheet files but doesn't generate output text.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/WRITING_DOCS.md#_snippet_5\n\nLANGUAGE: openscad\nCODE:\n```\n// FileGroup: Advanced Modeling\n```\n\n----------------------------------------\n\nTITLE: Defining a Text Block Header with openscad_docsgen (plaintext)\nDESCRIPTION: Demonstrates how to set up a Text documentation block. This merges the title into the body and enables both single-line and multi-line blocks. The example includes title, body, and references. No particular prerequisites other than being placed in the appropriate doc/config context.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/WRITING_DOCS.md#_snippet_20\n\nLANGUAGE: plaintext\nCODE:\n```\n// DefineHeader(Text): Reason\n// Reason: This is a simple reason.\n// Reason: This is a complex reason.\n//   It is a multi-line explanation\n//   about why this does what it does.\n//   Refer to {{nonsense()}} for more info.\n```\n\n----------------------------------------\n\nTITLE: Translating Objects Forward using fwd() in BOSL2/OpenSCAD\nDESCRIPTION: Shows the BOSL2 `fwd()` shortcut command to translate an object (a sphere) 30 units along the negative Y-axis. This is a more readable alternative to `translate([0,-30,0])`.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Transforms.md#_snippet_3\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\n#sphere(d=20);\nfwd(30) sphere(d=20);\n```\n\n----------------------------------------\n\nTITLE: Applying a Compound Transformation Matrix to a Path Using apply() in BOSL2 (OpenSCAD-2D)\nDESCRIPTION: This snippet applies a precomputed compound transformation matrix to a path using BOSL2's apply() function. The matrix is composed of move, rot, and scale, and is then used to transform a square. Output is rendered with stroke() and arrow endcap, showing the transformed path. This is efficient for repeated compound transforms.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Paths.md#_snippet_50\n\nLANGUAGE: OpenSCAD-2D\nCODE:\n```\ninclude <BOSL2/std.scad>\nmat = move([5,10]) * rot(30) * scale([1.5,0.75]);\npath = square(50,center=true);\ntpath = apply(mat, path);\nstroke(tpath, endcap2=\"arrow2\");\n```\n\n----------------------------------------\n\nTITLE: Anchoring a Star with Named Anchor - BOSL2 - OpenSCAD 2D\nDESCRIPTION: This snippet shows anchoring the 2D BOSL2 `star` module using the string `\"tip2\"` as a named anchor. This is a shape-specific anchor for the `star` module, aligning the second tip of the 7-pointed star with the origin.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_12\n\nLANGUAGE: OpenSCAD-2D\nCODE:\n```\ninclude <BOSL2/std.scad>\nstar(n=7, od=30, id=20, anchor=\"tip2\");\n```\n\n----------------------------------------\n\nTITLE: Using align() with Multiple Positions in BOSL2\nDESCRIPTION: Demonstrates how align() can create multiple copies of children at different locations with the correct anchoring for each position. This example places objects on both RIGHT and LEFT sides.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_47\n\nLANGUAGE: openscad\nCODE:\n```\ninclude<BOSL2/std.scad>\ncuboid([50,40,15])\n    align(TOP,[RIGHT,LEFT])\n        color(\"lightblue\")prismoid([10,5],[7,4],height=4);\n```\n\n----------------------------------------\n\nTITLE: Non-Uniform Scaling using scale() in OpenSCAD\nDESCRIPTION: Demonstrates the standard OpenSCAD `scale()` command to non-uniformly scale an object (a centered cube) by different factors along the X, Y, and Z axes ([1, 2, 3]).\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Transforms.md#_snippet_9\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\nscale([1,2,3]) cube(10, center=true);\n```\n\n----------------------------------------\n\nTITLE: Spinning a Back-Anchored Square\nDESCRIPTION: Shows how anchoring is performed before spin by rotating a back-anchored square.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Shapes2d.md#_snippet_13\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\nsquare([60,40], anchor=BACK, spin=30);\n```\n\n----------------------------------------\n\nTITLE: Prioritizing Files for Documentation Ordering with PrioritizeFiles (plaintext)\nDESCRIPTION: Demonstrates use of the PrioritizeFiles block, which sets the preferred ordering for files in the generated Table of Contents or other indices. Used in the documentation config file; priority is given in the order files are listed.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/WRITING_DOCS.md#_snippet_31\n\nLANGUAGE: plaintext\nCODE:\n```\nPrioritizeFiles:\n  file1.scad\n  file2.scad\n```\n\n----------------------------------------\n\nTITLE: CommonCode Block in OpenSCAD Documentation\nDESCRIPTION: Shows how to define reusable code that can be used in Figure or Example blocks throughout the file without displaying the code itself in the documentation.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/WRITING_DOCS.md#_snippet_9\n\nLANGUAGE: openscad\nCODE:\n```\n// CommonCode:\n//   module text3d(text, h=0.01, size=3) {\n//       linear_extrude(height=h, convexity=10) {\n//           text(text=text, size=size, valign=\"center\", halign=\"center\");\n//       }\n//   }\n```\n\n----------------------------------------\n\nTITLE: Using mask2d_teardrop() Mask to Round Bottom Edges of Prismoid with Overhang Angle Control in OpenSCAD\nDESCRIPTION: This snippet applies mask2d_teardrop() mask to the bottom edges of a prismoid to create a rounded edge with controlled overhang angle (angle=50 degrees). The mask limits the overhang to 45° or specified angle and is used with parameters: height (h=5), mask_angle set to $edge_angle, and resolution $fn=64. Included in diff() for proper subtraction and requires BOSL2 std.scad library. Inputs are prismoid sizes, rounding, and height. Output is a prismoid with smoothed, constrained bottom edge rounding.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Rounding_the_Cube.md#_snippet_21\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude<BOSL2/std.scad>  \ndiff()  \n   prismoid([30,20], [40,30], rounding = 2, h = 20, $fn = 64)  \n      edge_profile(BOT, excess = 15)  \n         mask2d_teardrop(h = 5, angle = 50, mask_angle = $edge_angle, $fn = 64);\n```\n\n----------------------------------------\n\nTITLE: Grid with Different X and Y Sizes in OpenSCAD\nDESCRIPTION: Shows creating a grid with different total sizes in X (100) and Y (80) directions and 20 units spacing.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Distributors.md#_snippet_21\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\ngrid_copies(20, size=[100,80]) sphere(d=10);\n```\n\n----------------------------------------\n\nTITLE: Using `orient` with Single-Argument `attach` in OpenSCAD (BOSL2)\nDESCRIPTION: Illustrates using the `orient` parameter on the child object within a single-argument `attach()`. The orientation (`orient=RIGHT`) is applied in the coordinate system established by the attachment (parent `RIGHT` or `TOP` anchor). An `anchor_arrow` visualizes the resulting `FWD` direction of the child. Requires the BOSL2 standard library.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_95\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\ncuboid(20){\n  attach(RIGHT)\n     color_this(\"red\")cuboid([2,4,8],orient=RIGHT,anchor=RIGHT)\n        attach(FWD) anchor_arrow();\n  attach(TOP)\n     color_this(\"red\")cuboid([2,4,8],orient=RIGHT,anchor=RIGHT)\n            attach(FWD) anchor_arrow();\n}\n```\n\n----------------------------------------\n\nTITLE: Stroke with Line Endcaps - OpenSCAD\nDESCRIPTION: This snippet demonstrates using `endcaps=\"line\"` to create line endcaps for the path.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Paths.md#_snippet_7\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\npath = [[0,0], [-10,10], [0,20], [10,20], [10,10]];\nstroke(path, endcaps=\"line\");\n```\n\n----------------------------------------\n\nTITLE: Rotating Objects using rotate() in OpenSCAD\nDESCRIPTION: Demonstrates the standard OpenSCAD `rotate()` command to rotate an object (a centered cube) by 30 degrees around the Y-axis.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Transforms.md#_snippet_13\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\nrotate([0,30,0]) cube(20, center=true);\n```\n\n----------------------------------------\n\nTITLE: Using edge_profile_asym() with xflip() to Fillet Bottom of Cube in OpenSCAD\nDESCRIPTION: This snippet applies asymmetric edge masking to the bottom edges of a cube with size 50 using edge_profile_asym() and the xflip() transform. The corner_type parameter is set to 'round' to define the shape of external fillet corners. It uses the BOSL2 std.scad library. The snippet demonstrates controlling fillet flare direction via flip argument and uses a mask2d_roundover() mask with radius 10. The output is a cube with differently treated bottom edges enabled via asymmetrical masking.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Rounding_the_Cube.md#_snippet_15\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude<BOSL2/std.scad>  \ncuboid(50)  \n edge_profile_asym(BOT, corner_type=\"round\")  \n  xflip() mask2d_roundover(10);\n```\n\n----------------------------------------\n\nTITLE: Positioning Child at Parent's Back\nDESCRIPTION: Uses the position() module to place a child shape at the parent's back anchor point.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Shapes2d.md#_snippet_18\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\nsquare(50, center=true)\n    position(BACK)\n        #square(25, spin=45, center=true);\n```\n\n----------------------------------------\n\nTITLE: Applying Rounding Edge Mask to a Cuboid in OpenSCAD\nDESCRIPTION: This snippet demonstrates how to include BOSL2 library, create a cuboid, and apply a rounding edge mask with specified radius to the top and front edges. It showcases default masking for cuboids and attaches an edge mask to modify edge rounding.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Rounding_the_Cube.md#_snippet_27\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\ndiff()\n  cuboid(80)\n   edge_mask(TOP+FWD)\n    rounding_edge_mask(r1 = 40, r2 = 0, l = 80);\n```\n\n----------------------------------------\n\nTITLE: Anchoring Square to Back Edge\nDESCRIPTION: Demonstrates anchoring a square to align the center of the back edge to the origin using anchor=[0,1].\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Shapes2d.md#_snippet_3\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\nsquare([60,40], anchor=[0,1]);\n```\n\n----------------------------------------\n\nTITLE: Rotational Sweep of a Bézier Path to Create a Vase\nDESCRIPTION: This snippet sweeps a closed Bézier path around the Y-axis using rotate_sweep(), with $fn for smoothness and splinesteps controlling the segment resolution, producing a 3D vase shape.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Beziers_for_Beginners.md#_snippet_13\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude<BOSL2/std.scad>\n$fn = 72;\n\nbez = [[20,0], [60,40], [-20,50], [25,80]];\nclosed = bezpath_close_to_axis(bez, axis = \"Y\");\npath = bezpath_curve(closed, splinesteps = 32);\nrotate_sweep(path,360);\n```\n\n----------------------------------------\n\nTITLE: Translating Paths Using fwd in BOSL2 (OpenSCAD-2D)\nDESCRIPTION: This snippet uses fwd() from BOSL2 to move a 2D shape forward by a given distance in the p= argument. Requires BOSL2 and OpenSCAD. The primary parameter is the forward distance, and the result is visualized with stroke(). Outputs a forward-moved square with an arrow endcap; this is suitable for path manipulations in 2D.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Paths.md#_snippet_36\n\nLANGUAGE: OpenSCAD-2D\nCODE:\n```\ninclude <BOSL2/std.scad>\npath = fwd(30, p=square(50,center=true));\nstroke(list_wrap(path), endcap2=\"arrow2\");\n```\n\n----------------------------------------\n\nTITLE: Using BACK Constant for Square Anchoring\nDESCRIPTION: Demonstrates using the predefined BACK constant for anchoring a square to the back edge.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Shapes2d.md#_snippet_6\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\nsquare([60,40], anchor=BACK);\n```\n\n----------------------------------------\n\nTITLE: Stroke with Custom Endcaps (Trimmed) - OpenSCAD\nDESCRIPTION: This example extends the previous one by trimming the custom endcap using the `trim=` argument. The `trim=` argument allows to trim the main line so the endcap renders nicely.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Paths.md#_snippet_15\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\npath = [[0,0], [-10,10], [0,20], [10,20], [10,10]];\ndblarrow = [[0,0], [2,-3], [0.5,-2.3], [2,-4], [0.5,-3.5], [-0.5,-3.5], [-2,-4], [-0.5,-2.3], [-2,-3]];\nstroke(path, trim=3.5, endcaps=dblarrow);\n```\n\n----------------------------------------\n\nTITLE: Using line_copies() with Start and End Points in OpenSCAD\nDESCRIPTION: Demonstrates creating 4 spheres distributed along a line defined by two specific points in space.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Distributors.md#_snippet_14\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\nline_copies(p1=[0,100,0], p2=[100,0,0], n=4)\n    sphere(d=10);\n```\n\n----------------------------------------\n\nTITLE: Using inset Parameter in mask2d_roundover() to Produce Bead Effect on Cube Edges in OpenSCAD\nDESCRIPTION: This snippet demonstrates the application of mask2d_roundover() with the inset parameter to create a bead-like edge treatment on a centered cube's top edges except specific edges. It uses diff() to subtract the masked edge from the cube. The edge_profile() module excludes BACK and TOP+LEFT edges from masking. Expects BOSL2 library inclusion. Inputs include cube size, mask height (h=12), and inset (4). Output is a cube with selectively rounded top edges enhanced with beveled inset detail.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Rounding_the_Cube.md#_snippet_17\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>  \ndiff()  \n cube([50,60,70],center=true)  \n     edge_profile(TOP, except=[BACK,TOP+LEFT])  \n        mask2d_roundover(h=12, inset=4);\n```\n\n----------------------------------------\n\nTITLE: Using Starting Point with zcopies() in OpenSCAD\nDESCRIPTION: Shows how to set a starting point for the distribution, creating 5 spheres extending upwards from the origin.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Distributors.md#_snippet_11\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\nzcopies(20, n=5, sp=[0,0,0]) sphere(d=10);\n```\n\n----------------------------------------\n\nTITLE: Default Usage of xcopies() in OpenSCAD\nDESCRIPTION: Shows the default behavior of xcopies() which creates 2 copies spaced 20 units apart along the X axis when n parameter is omitted.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Distributors.md#_snippet_3\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\nxcopies(20) sphere(d=10);\n```\n\n----------------------------------------\n\nTITLE: Positioning Child on Circle Perimeter\nDESCRIPTION: Uses polar coordinates to position a small circle on the perimeter of a larger circle.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Shapes2d.md#_snippet_20\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\ncircle(d=50)\n    position(polar_to_xy(1,60))\n        #circle(d=10);\n```\n\n----------------------------------------\n\nTITLE: Adjusting Meniscus Tangent Angle in Glued Circles Using OpenSCAD and BOSL2\nDESCRIPTION: Demonstrates customization of the meniscus tangent angle between the two circles using the `tangent` parameter of the glued_circles() function. This parameter controls the angle of the tangent line at the meniscus junction, allowing shape tuning from negative to positive angles. Requires BOSL2 library inclusion and circle size and spacing parameters. Produces 2D shapes reflecting different curvature blends between circles.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Shapes2d.md#_snippet_37\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\nglued_circles(d=30, spread=30, tangent=45);\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\nglued_circles(d=30, spread=30, tangent=20);\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\nglued_circles(d=30, spread=30, tangent=-20);\n```\n\n----------------------------------------\n\nTITLE: Illustrating Standard `color()` Behavior in OpenSCAD\nDESCRIPTION: Demonstrates the standard OpenSCAD `color()` module where a parent's color overrides the colors of all its children, even if they have their own `color()` definitions. This snippet requires the BOSL2 library.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_101\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\n$fn = 24;\ncolor(\"red\") spheroid(d=3) {\n    attach(CENTER,BOT) color(\"white\") cyl(h=10, d=1) {\n        attach(TOP,BOT) color(\"green\") cyl(h=5, d1=3, d2=0);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Offset Mirroring using xflip(x=) in BOSL2/OpenSCAD\nDESCRIPTION: Demonstrates mirroring a rotated cube across a plane parallel to YZ but offset to X = -20, using the `x` argument in the BOSL2 `xflip()` command. A visual guide plane is included.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Transforms.md#_snippet_27\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\n#zrot(30) cube(20, center=true);\nxflip(x=-20) zrot(30) cube(20, center=true);\ncolor(\"blue\",0.25) left(20) cube([0.1,50,50], center=true);\n```\n\n----------------------------------------\n\nTITLE: Visualizing a Quadratic Bézier Curve in OpenSCAD\nDESCRIPTION: Demonstrates how to create and visualize a quadratic (degree 2) Bézier curve using the debug_bezier() module from BOSL2. The curve is defined by three control points and shows the basic shape of a quadratic Bézier.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Beziers_for_Beginners.md#_snippet_0\n\nLANGUAGE: openscad\nCODE:\n```\ninclude<BOSL2/std.scad> \n\nbez = [[0,0], [30,60], [0,100]];\ndebug_bezier(bez, N = 2);\n```\n\n----------------------------------------\n\nTITLE: Creating Spherical Attachable Shape with Radius\nDESCRIPTION: This code defines a module `spikeball` that creates a spherical shape with attachable points. It uses the `attachable()` module with the `r` argument to define the attachment radius. The `sphere_copies()` function creates the spike-like features on the sphere.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_115\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\nmodule spikeball(r, d, anchor=CENTER, spin=0, orient=UP) {\n    r = get_radius(r=r,d=d,dflt=1);\n    attachable(anchor,spin,orient, r=r*1.1) {\n        union() {\n            sphere_copies(r=r, n=512, cone_ang=180) cylinder(r1=r/10, r2=0, h=r/10);\n            sphere(r=r);\n        }\n        children();\n    }\n}\nspikeball(r=50) show_anchors(20);\n```\n\n----------------------------------------\n\nTITLE: Specifying Rounding Height Instead of Radius with mask2d_roundover() on Cube Edges in OpenSCAD\nDESCRIPTION: This snippet uses mask2d_roundover() to define edge rounding by specifying the height (h=12) rather than the rounding radius on the top left and right edges of a cube. The cube dimensions are 30 units per side. The approach enables the creation of edge profiles with controlled vertical height rather than horizontal radius extent. It uses diff() to subtract the mask and requires BOSL2 standard library.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Rounding_the_Cube.md#_snippet_19\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude<BOSL2/std.scad>  \ndiff()  \n   cube(30)  \n      edge_profile([TOP+LEFT, TOP+RIGHT])  \n         mask2d_roundover(h = 12, $fn = 64);\n```\n\n----------------------------------------\n\nTITLE: Spinning Around an Anchor Point\nDESCRIPTION: Demonstrates spinning a hexagonal circle around its left anchor point.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Shapes2d.md#_snippet_15\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\ncircle(d=50, $fn=6, anchor=LEFT, spin=15);\n```\n\n----------------------------------------\n\nTITLE: Creating Enhanced Spheres with spheroid() in OpenSCAD with BOSL2\nDESCRIPTION: Demonstrates the spheroid() module which enhances sphere() with additional features like circumscription and different tessellation styles.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Shapes3d.md#_snippet_13\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\nspheroid(d=100, circum=true);\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\nspheroid(d=100, style=\"orig\", $fn=20);\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\nspheroid(d=100, style=\"aligned\", $fn=20);\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\nspheroid(d=100, style=\"stagger\", $fn=20);\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\nspheroid(d=100, style=\"icosa\", $fn=20);\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\nspheroid(d=100, style=\"octa\", $fn=20);\n```\n\n----------------------------------------\n\nTITLE: Applying Transformations Before Child Within `attach` in OpenSCAD (BOSL2)\nDESCRIPTION: Illustrates applying a transformation (`up(13)`) *between* the `attach()` call and the child object definition. The transformation operates in the local coordinate system defined by the parent's anchor (`RIGHT`), moving the attached cylinder along the anchor's 'up' direction (which corresponds to the parent's rightward direction). The `%attach` shows the original position. Requires the BOSL2 standard library.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_84\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\ncuboid(50){\n  %attach(RIGHT,BOT)\n    cyl(d1=30,d2=15,h=25);\n  color(\"green\") attach(RIGHT,BOT)\n    up(13)\n      cyl(d1=30,d2=15,h=25);\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling smoothness with splinesteps in rounded_prism() in OpenSCAD\nDESCRIPTION: This snippet demonstrates how the 'splinesteps' argument influences the smoothness of the curved edges, independent of '$fn'. It compares different splinesteps values to illustrate their effect on the rounded prism's appearance. Dependencies are the same as previous examples.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Rounding_the_Cube.md#_snippet_35\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\ninclude <BOSL2/rounding.scad>\n left(35) {\n    rounded_prism(rect(20), height=20, joint_top=9.99, joint_bot=9.99, joint_sides=9.99, k = 0.5, splinesteps = 4 )\n    move([0,-12,-12]) xrot(90) color(\"black\") text3d(\"splinesteps=4\", size=3, h = 0.01, anchor= CENTER);\n}\n\nright(0){\n    rounded_prism(rect(20), height=20, joint_top=9.99, joint_bot=9.99, joint_sides=9.99, k = 0.5, splinesteps = 16)  \n    move([0,-12,-12]) xrot(90) color(\"black\") text3d(\"splinesteps=16\", size=3, h = 0.01, anchor= CENTER); \n}\n\nright(35){\n    rounded_prism(rect(20), height=20, joint_top=9.99, joint_bot=9.99, joint_sides=9.99, k = 0.5, splinesteps = 64)\n    move([0,-12,-12]) xrot(90) color(\"black\") text3d(\"splinesteps=64\", size=3, h = 0.01, anchor= CENTER);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Evenly Spaced Copies Along Y Axis in OpenSCAD\nDESCRIPTION: Shows how to create 5 spheres spaced 20 units apart along the Y axis using the ycopies() function.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Distributors.md#_snippet_1\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\nycopies(20, n=5) sphere(d=10);\n```\n\n----------------------------------------\n\nTITLE: Anchored Cylinder with Spin - BOSL2 - OpenSCAD 3D\nDESCRIPTION: This snippet displays a ghosted (`%`) version of the anchored cylinder from the previous example, but with a `spin` of 40 degrees applied. Because the cylinder's anchor point is away from the origin, the spin rotates the object around the origin, causing it to orbit and rotate.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_22\n\nLANGUAGE: OpenSCAD-3D\nCODE:\n```\ninclude <BOSL2/std.scad>\n%cylinder(h=40.2,d=20,anchor=FRONT+BOT,spin=40);\n```\n\n----------------------------------------\n\nTITLE: Grid with Different X/Y Counts and Sizes in OpenSCAD\nDESCRIPTION: Shows creating a 4×5 grid within a total size of 100×80 units, with different X and Y dimensions.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Distributors.md#_snippet_25\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\ngrid_copies(n=[4,5], size=[100,80]) sphere(d=10);\n```\n\n----------------------------------------\n\nTITLE: Rounding Select Face Edges with Teardrop Limit using BOSL2 in OpenSCAD\nDESCRIPTION: Rounds only the bottom edges of a cuboid while limiting overhangs for FDM 3D printing using the 'teardrop' parameter (angle in degrees). Requires BOSL2. Inputs: cuboid size; Edge selector is BOTTOM; 'teardrop' constrains rounding for printability; Output: cuboid with printable rounded bottom edges.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Rounding_the_Cube.md#_snippet_3\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude \\u003cBOSL2/std.scad\\u003e\\ncuboid([100,80,60], rounding=20, teardrop = 45, edges = BOTTOM);\n```\n\n----------------------------------------\n\nTITLE: Offsetting Bézier Paths for Wall Thickness\nDESCRIPTION: This example offsets a Bézier path by a specified vector using bezpath_offset(), then demonstrates offsetting using different methods: bezpath_offset(), offset(), and offset_stroke(), highlighting their differences in creating walls with constant or variable thickness.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Beziers_for_Beginners.md#_snippet_14\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude<BOSL2/std.scad>\ninclude<BOSL2/rounding.scad>\n$fn = 72;\n\nbez = [[40,0], [110,40], [-60,50], [45,80]];\n\nbez2 = bezpath_offset([5,0], bez);\npath= bezpath_curve(bez2, splinesteps = 32);\ncolor(\"blue\") stroke(path);\n\npath2 = bezier_curve(bez, splinesteps = 32);\nclosed2 = concat(path2,reverse(offset(path2,delta=5)),[bez[0]]);\nright(30) color(\"red\") stroke(closed2);\n\npath3 = offset_stroke(bezier_curve(bez, splinesteps = 32), [5,0]);\nright(60) color(\"green\") stroke(path3, closed= true);\n```\n\n----------------------------------------\n\nTITLE: Using Starting Point with ycopies() in OpenSCAD\nDESCRIPTION: Shows how to set a starting point for the distribution, creating 5 spheres extending to the back from the origin.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Distributors.md#_snippet_10\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\nycopies(20, n=5, sp=[0,0,0]) sphere(d=10);\n```\n\n----------------------------------------\n\nTITLE: Basic Unanchored Cube - BOSL2 - OpenSCAD 3D\nDESCRIPTION: This snippet shows a default BOSL2 `cube` without any anchoring, spin, or orientation parameters. By default, BOSL2 cubes are anchored at the corner closest to the negative axes, resulting in a shape that starts at the origin and extends into the positive XYZ quadrant.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_26\n\nLANGUAGE: OpenSCAD-3D\nCODE:\n```\ninclude <BOSL2/std.scad>\ncube([20,20,50]);\n```\n\n----------------------------------------\n\nTITLE: Skewing along Z by X using skew(szx=) in BOSL2/OpenSCAD\nDESCRIPTION: Demonstrates the BOSL2 `skew()` command to shear an object (a cube) along the Z-axis, with the amount of skew proportional to the X-coordinate. The `szx=-0.5` parameter specifies the skew factor.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Transforms.md#_snippet_34\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\nskew(szx=-0.5) cube(10,center=false);\n```\n\n----------------------------------------\n\nTITLE: Attaching Cylinders to Prismoid Edges using `overlap` in OpenSCAD (BOSL2)\nDESCRIPTION: Demonstrates attaching cylindrical shapes along the top edges of a `prismoid`. It uses lists of edge anchors (e.g., `[TOP+RIGHT, TOP+LEFT]`) and the `overlap` parameter to sink the cylinders halfway into the edges. Requires the BOSL2 standard library and sets `$fn=16` for rendering.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_88\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\n$fn=16;\nr=6;\nprismoid([100,175],[55,88], h=55){\n   attach([TOP+RIGHT,TOP+LEFT],LEFT,overlap=r/2) cyl(r=r,l=88+2*r,rounding=r);\n   attach([TOP+FWD,TOP+BACK],LEFT,overlap=r/2) cyl(r=r,l=55+2*r, rounding=r);   \n}\n```\n\n----------------------------------------\n\nTITLE: Arc with Radius and Angle - OpenSCAD\nDESCRIPTION: This snippet uses the `arc()` command with a radius and angle to define a curved path. It shows the arc using the `stroke()` module.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Paths.md#_snippet_23\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\npath = arc(r=30, angle=120);\nstroke(path, endcap2=\"arrow2\");\n```\n\n----------------------------------------\n\nTITLE: Varying the 'k' parameter for smoothness in rounded_prism() in OpenSCAD\nDESCRIPTION: This snippet illustrates the effect of changing the 'k' parameter on the roundover smoothness of the prism, with larger 'k' leading to a more abrupt transition and smaller 'k' for more gradual curvature. It uses include statements and creates multiple prisms with different 'k' values, adding descriptive text. Dependencies are the same as above.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Rounding_the_Cube.md#_snippet_32\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\ninclude <BOSL2/rounding.scad>\n left(30) {\n    rounded_prism(rect(20), height=20, joint_top=9.99, joint_bot=9.99, joint_sides=9.99, k = 0.15);\n    move([0,-12,-12]) xrot(90) color(\"black\") text3d(\"k=0.15\", size=3, h = 0.01, anchor= CENTER);\n}\n\nright(0){\n    rounded_prism(rect(20), height=20, joint_top=9.99, joint_bot=9.99, joint_sides=9.99, k = 0.5);  \n    move([0,-12,-12]) xrot(90) color(\"black\") text3d(\"k=0.5\", size=3, h = 0.01, anchor= CENTER); \n}\n\nright(30){\n    rounded_prism(rect(20), height=20, joint_top=9.99, joint_bot=9.99, joint_sides=9.99, k = 0.75);\n    move([0,-12,-12]) xrot(90) color(\"black\") text3d(\"k=0.75\", size=3, h = 0.01, anchor= CENTER);\n}\n```\n\n----------------------------------------\n\nTITLE: Basic grid_copies() Usage in OpenSCAD\nDESCRIPTION: Shows how to create a 6×6 grid of spheres with 20 units spacing in both X and Y directions.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Distributors.md#_snippet_15\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\ngrid_copies(20, n=6) sphere(d=10);\n```\n\n----------------------------------------\n\nTITLE: Applying Edge Profiles with Excess and mask_angle Parameters on Prismoid in OpenSCAD\nDESCRIPTION: This snippet applies a 2D roundover edge profile to the top left and right edges of a prismoid shape using edge_profile() with an excess length to accommodate the prismoid's slanted sides. The mask2d_roundover() is called with radius 15, mask_angle set to the edge angle variable, and fine rendering with $fn=64. It requires BOSL2 library for prismoid, edge_profile, and masks. The output is a prismoid with smoothed top edges accounting for side angle geometry.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Rounding_the_Cube.md#_snippet_18\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude<BOSL2/std.scad>  \ndiff()  \n prismoid(size1=[35,50], size2=[30,30], h=20, rounding1 = 8, rounding2 = 0)  \n     edge_profile([TOP+LEFT, TOP+RIGHT], excess = 5)  \n        mask2d_roundover(r = 15, mask_angle = $edge_angle, $fn = 64);\n```\n\n----------------------------------------\n\nTITLE: Centering Square with Anchor Parameter\nDESCRIPTION: Centers a square using the anchor=[0,0] parameter instead of center=true.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Shapes2d.md#_snippet_5\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\nsquare([60,40], anchor=[0,0]);\n```\n\n----------------------------------------\n\nTITLE: Boolean Difference of Regions Using difference() in BOSL2 (OpenSCAD-2D)\nDESCRIPTION: This code demonstrates the use of difference() to subtract one region from another in BOSL2, such as cutting a square out of a stack of circles. BOSL2 and OpenSCAD are required. Inputs are two regions; the output shows their difference using region(). Polygons must be valid regions.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Paths.md#_snippet_56\n\nLANGUAGE: OpenSCAD-2D\nCODE:\n```\ninclude <BOSL2/std.scad>\nrgn1 = [for (d=[40:-10:10]) circle(d=d)];\nrgn2 = [square([60,12], center=true)];\nrgn = difference(rgn1, rgn2);\nregion(rgn);\n```\n\n----------------------------------------\n\nTITLE: Arc with Diameter and Angle - OpenSCAD\nDESCRIPTION: This snippet generates an arc using the `arc()` command with the diameter and angle as input and displays it with `stroke()`.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Paths.md#_snippet_24\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\npath = arc(d=60, angle=120);\nstroke(path, endcap2=\"arrow2\");\n```\n\n----------------------------------------\n\nTITLE: Creating a Spherical Cap VNF in OpenSCAD (BOSL2)\nDESCRIPTION: Constructs the top cap of a sphere as a VNF structure using BOSL2. It defines a center vertex at the pole and a ring of vertices generated using a list comprehension with `spherical_to_xyz`. The faces are created as triangles connecting the pole to adjacent vertices in the ring.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/VNF.md#_snippet_2\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\ncap_vnf = [\n    [[0,0,1], for (a=[0:30:359.9]) spherical_to_xyz(1,a,30)], // Vertices\n    [for (i=[1:12]) [0, i%12+1, i]] // Faces\n];\nvnf_polyhedron(cap_vnf);\n```\n\n----------------------------------------\n\nTITLE: Modifying a Quadratic Bézier Curve in OpenSCAD\nDESCRIPTION: Shows how changing control points affects the shape of a quadratic Bézier curve. The middle control point is moved to demonstrate the effect on the curve's path between the start and end points.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Beziers_for_Beginners.md#_snippet_1\n\nLANGUAGE: openscad\nCODE:\n```\ninclude<BOSL2/std.scad>\n\nbez = [[0,0], [100,50], [0,100]];\ndebug_bezier(bez, N = 2);\n```\n\n----------------------------------------\n\nTITLE: Using CENTER Constant for Square Anchoring\nDESCRIPTION: Demonstrates using the predefined CENTER constant for centering a square.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Shapes2d.md#_snippet_7\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\nsquare([60,40], anchor=CENTER);\n```\n\n----------------------------------------\n\nTITLE: Handling Prismoids with Shift and Custom Roundover Parameters in OpenSCAD\nDESCRIPTION: This snippet demonstrates masking the top edges of a shifted prismoid shape with custom roundover parameters including radius (r=5), mask_angle linked to $edge_angle, and increased segmentation ($fn=128) for smoothness. The edge_profile() uses an excess parameter to extend masking beyond edges. The snippet highlights edge rounding considerations for shifted prismoids and requires BOSL2 std.scad. Outputs a prismoid with precise smooth top edges accounting for shifted geometry.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Rounding_the_Cube.md#_snippet_23\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude<BOSL2/std.scad>  \ndiff()  \n   prismoid([30,20], [50,60], h=20, shift=[30,40])  \n      edge_profile(TOP, excess=35)  \n         mask2d_roundover(r=5, mask_angle=$edge_angle, $fn=128);\n```\n\n----------------------------------------\n\nTITLE: Creating a Cubic Bézier Path\nDESCRIPTION: This snippet creates a cubic Bézier path from the same control points with segmentation N=3, illustrating how the shape differs compared to a quadratic segmentation of the same points.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Beziers_for_Beginners.md#_snippet_10\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude<BOSL2/std.scad>\n\nbez =  [[0,0], [10,30], [20,0], [30,-30], [40,0], [50,30],[60,0]];\npath = bezpath_curve(bez, N=3);  //make a cubic Bézier path\nstroke(path);\n```\n\n----------------------------------------\n\nTITLE: Visualizing Bézier and OpenSCAD Paths with Different Segmentation\nDESCRIPTION: This snippet visualizes a Bézier curve in green and overlays an OpenSCAD path in red through the same control points, illustrating the difference between the Bézier control points and the path they define.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Beziers_for_Beginners.md#_snippet_7\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude<BOSL2/std.scad>\n\nbez = [[20,0], [60,40], [-20,50], [25,80]];\ndebug_bezier(bez, N = 3);\ncolor(\"red\") stroke(bez);\n```\n\n----------------------------------------\n\nTITLE: Basic cyl() Module Usage in OpenSCAD with BOSL2\nDESCRIPTION: Demonstrates the cyl() module which enhances cylinder() with additional features and different default behavior (centered by default).\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Shapes3d.md#_snippet_9\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\ncyl(r=60, l=100);\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\ncyl(d=100, l=100);\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\ncyl(d=100, l=100, anchor=TOP);\n```\n\n----------------------------------------\n\nTITLE: Excluding Selected Edges from Rounding on Cuboid using BOSL2 in OpenSCAD\nDESCRIPTION: Rounds all edges of a cuboid except those where the TOP and FRONT faces meet, set using 'except=TOP+FRONT' in cuboid() (BOSL2). Input: cuboid size; Output: selectively rounded cuboid with exclusions. Supports edge exclusion via vector notation.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Rounding_the_Cube.md#_snippet_5\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude \\u003cBOSL2/std.scad\\u003e\\ncuboid([100,80,60], rounding=20, except = TOP+FRONT);\n```\n\n----------------------------------------\n\nTITLE: Making a Conical Shape Attachable Using `l`, `r1`, `r2` in BOSL2 (OpenSCAD)\nDESCRIPTION: Shows creating a custom attachable conical module `twistar` using BOSL2's `attachable()`. It uses `l` (length), `r1` (bottom radius), and `r2` (top radius) parameters to define the conical bounding geometry. `get_radius` is used for flexible input (radius or diameter). Requires the BOSL2 library.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_112\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\nmodule twistar(l, r,r1,r2, d,d1,d2, anchor=CENTER, spin=0, orient=UP) {\n    r1 = get_radius(r1=r1,r=r,d1=d1,d=d,dflt=1);\n    r2 = get_radius(r1=r2,r=r,d1=d2,d=d,dflt=1);\n    attachable(anchor,spin,orient, r1=r1, r2=r2, l=l) {\n        linear_extrude(height=l, twist=90, scale=r2/r1, slices=20, center=true, convexity=4)\n            star(n=20, r=r1, ir=r1*0.9);\n        children();\n    }\n}\ntwistar(l=100, r1=40, r2=20) show_anchors(20);\n```\n\n----------------------------------------\n\nTITLE: Animating Higher-Order Bézier Curves in OpenSCAD\nDESCRIPTION: Creates an animation showing Bézier curves of increasing degree (from 2 to 5), demonstrating how adding more control points allows for more complex curve shapes and greater control over the curve's path.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Beziers_for_Beginners.md#_snippet_4\n\nLANGUAGE: openscad\nCODE:\n```\ninclude<BOSL2/std.scad>\n\nbez =  [\n    [[0,0], [100,100], [0,80]],\n    [[0,0], [10,30], [100,100], [0,80]],\n    [[0,0], [10,30], [40,30], [100,100], [0,80]],\n    [[0,0], [10,30], [40,30], [100,100], [30,100], [0,80]]\n];\ndebug_bezier(bez[$t*4], N=$t*4+2);\nmove([60,30]) color(\"blue\") text(str(\"N = \",($t*4+2)));\n```\n\n----------------------------------------\n\nTITLE: Arc with Start Angle - OpenSCAD\nDESCRIPTION: This snippet shows how to specify a starting angle for the arc using the `start=` argument. The arc will start at the specified angle.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Paths.md#_snippet_26\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\npath = arc(start=45, r=30, angle=120);\nstroke(path, endcap2=\"arrow2\");\n```\n\n----------------------------------------\n\nTITLE: Rectangle with Variable Corner Chamfers\nDESCRIPTION: Creates a rectangle with different chamfer sizes for each corner.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Shapes2d.md#_snippet_34\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\nrect([60,40], chamfer=[0,5,10,15]);\n```\n\n----------------------------------------\n\nTITLE: Conditional quarter_round Usage Based on Edge Angle on Prismoid Edges in OpenSCAD\nDESCRIPTION: This snippet applies the quarter_round rounding style conditionally based on the edge angle being less than 90 degrees via quarter_round = $edge_angle < 90. This approach provides improved edge smoothing on acute angles while avoiding ledges on obtuse angles in prismoid top edges. It uses parameters radius=5, mask_angle linked to $edge_angle, and high resolution. This snippet highlights a conditional strategy to optimize edge masking results.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Rounding_the_Cube.md#_snippet_26\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude<BOSL2/std.scad>  \ndiff()  \n   prismoid([30,20], [50,60], h=20, shift=[30,40])  \n      edge_profile(TOP, excess=35)  \n         mask2d_roundover(r=5, mask_angle=$edge_angle, quarter_round = $edge_angle<90, $fn=128);\n```\n\n----------------------------------------\n\nTITLE: Flipping Paths Along Y Using yflip in BOSL2 (OpenSCAD-2D)\nDESCRIPTION: This snippet uses yflip() from BOSL2 to flip a path along the Y axis. Requires BOSL2 and OpenSCAD. The shape is defined in p= and the result is visualized via stroke() with an arrow endcap. Only vertical flipping is performed.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Paths.md#_snippet_45\n\nLANGUAGE: OpenSCAD-2D\nCODE:\n```\ninclude <BOSL2/std.scad>\npath = yflip(p=trapezoid(w1=40, w2=10, h=25));\nstroke(list_wrap(path), endcap2=\"arrow2\");\n```\n\n----------------------------------------\n\nTITLE: Using quarter_round Parameter to Modify Edge Shape on Prismoid Top Edges in OpenSCAD\nDESCRIPTION: This snippet demonstrates the use of the quarter_round boolean parameter in mask2d_roundover() to address edges with acute angles differently from obtuse angles on a shifted prismoid's top edges. The quarter_round parameter enables a specific rounding style but may leave a ledge on obtuse angle edges. The snippet uses radius=5, mask_angle variable, and high resolution ($fn=128). It shows the limitation of a uniform rounding approach and the need for selective edge treatment.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Rounding_the_Cube.md#_snippet_25\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude<BOSL2/std.scad>  \ndiff()  \n   prismoid([30,20], [50,60], h=20, shift=[30,40])  \n      edge_profile(TOP, excess=35)  \n         mask2d_roundover(r=5, mask_angle=$edge_angle, quarter_round = true, $fn=128);\n```\n\n----------------------------------------\n\nTITLE: Stroke with Variable Width - OpenSCAD\nDESCRIPTION: This snippet shows how to customize the width of the `stroke()` module. The `width=` argument controls the thickness of the drawn line segment.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Paths.md#_snippet_2\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\npath = [[0,0], [-10,10], [0,20], [10,20], [10,10]];\nstroke(path, width=3);\n```\n\n----------------------------------------\n\nTITLE: Generic Rotation using rot() in BOSL2/OpenSCAD\nDESCRIPTION: Demonstrates the BOSL2 `rot()` command, a shorter alternative to `rotate()`, rotating a centered cube by [0, 30, 15] degrees around the X, Y, and Z axes respectively.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Transforms.md#_snippet_17\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\nrot([0,30,15]) cube(20, center=true);\n```\n\n----------------------------------------\n\nTITLE: Using asymmetric edge joint distances with 2-vector specification in rounded_prism() in OpenSCAD\nDESCRIPTION: This snippet shows how to specify a 2-element array for 'joint' parameters to create asymmetric joint distances on the same edge, useful for modeling non-uniform geometries. It applies different joint distances on top and bottom edges with arrays for each. Dependencies remain the same.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Rounding_the_Cube.md#_snippet_38\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\ninclude <BOSL2/rounding.scad>\nrounded_prism(rect([50.1,20.1]), height=6.1, \n   joint_top=[15,3], joint_bot=[15,3],\n   joint_sides=[[10,25],[25,10],[10,25],[25,10]], \n   k_sides=0.3);\n```\n\n----------------------------------------\n\nTITLE: Describing Function Arguments Using Documentation Blocks in OpenSCAD\nDESCRIPTION: Shows how to document positional and named arguments using an Arguments block. Each argument is followed by a description, differentiating the positional arguments from named arguments with a '---' separator. This allows generation of markdown tables explaining parameter purposes clearly. No additional code dependencies are required.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/WRITING_DOCS.md#_snippet_14\n\nLANGUAGE: OpenSCAD\nCODE:\n```\n// Arguments:\n//   v1 = This supplies the first vector.\n//   v2 = This supplies the second vector.\n//   ---\n//   fast = Use fast, but less comprehensive calculation method.\n//   bar = Takes an optional `bar` struct.  See {{bar()}}.\n//   dflt = Default value.\n```\n\n----------------------------------------\n\nTITLE: Determining Top Radius for Vase Bottom Using Bézier Intersection\nDESCRIPTION: This snippet finds the intersection points between a line at y=2 and a Bézier curve, computes the intersection's u-value, and converts it to an x,y point to determine the top radius at the desired height for the vase's bottom hole.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Beziers_for_Beginners.md#_snippet_16\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude<BOSL2/std.scad>\n\nbez = [[15,0], [60,40], [-25,50], [25,80]];\ndebug_bezier(bez, N = 3);\nline = [[0,2], [30,2]];\ncolor(\"red\") stroke(line);\nu = bezier_line_intersection(bez,line);\necho(bezier_points(bez,u));  //    [[17.1687, 2]]\n```\n\n----------------------------------------\n\nTITLE: Basic Sphere Usage with BOSL2 in OpenSCAD\nDESCRIPTION: Examples of using the enhanced sphere() module from BOSL2, demonstrating basic functionality equivalent to OpenSCAD's built-in sphere().\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Shapes3d.md#_snippet_11\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\nsphere(r=50);\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\nsphere(d=100);\n```\n\n----------------------------------------\n\nTITLE: Visualizing Default Orientation with anchor_arrow in BOSL2\nDESCRIPTION: Uses anchor_arrow to visualize the default orientation at a given position, showing the spin direction with a red flag indicating Y+ direction.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_41\n\nLANGUAGE: openscad\nCODE:\n```\ninclude<BOSL2/std.scad>\nprismoid([50,50],[30,30],h=40)\n  position(RIGHT+TOP)\n     anchor_arrow(40);\n```\n\n----------------------------------------\n\nTITLE: Stroke with Trapezoid Polygon - OpenSCAD\nDESCRIPTION: This snippet constructs a trapezoid using `trapezoid()` and visualizes its path with `stroke()`.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Paths.md#_snippet_18\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\npath = trapezoid(w1=40, w2=20, h=30);\nstroke(list_wrap(path), endcap2=\"arrow2\");\n```\n\n----------------------------------------\n\nTITLE: Override FWD Anchor Position using List - BOSL2 OpenSCAD\nDESCRIPTION: Demonstrates overriding only the position of a specific standard anchor (FWD) using a list format for the `override` parameter. The new position `[0, -s/8, 0]` places the anchor on the cylindrical portion of the barbell model.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_123\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude<BOSL2/std.scad>\nmodule cubic_barbell(s=100, anchor=CENTER, spin=0, orient=UP) {\n    override = [\n                 [FWD,  [[0,-s/8,0]]]\n               ];\n    attachable(anchor,spin,orient, size=[s*3,s,s],override=override) {\n        union() {\n            xcopies(2*s) cube(s, center=true);\n            xcyl(h=2*s, d=s/4);\n        }\n        children();\n    }\n}\ncubic_barbell(100) show_anchors(60);\n```\n\n----------------------------------------\n\nTITLE: Visualizing Path with Polygon - OpenSCAD\nDESCRIPTION: This snippet demonstrates how to create a polygon from a set of points defined as a path.  It showcases the use of the `polygon()` module to visualize a path.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Paths.md#_snippet_0\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\npath = [[0,0], [-10,10], [0,20], [10,20], [10,10]];\npolygon(path);\n```\n\n----------------------------------------\n\nTITLE: Setting the Target Documentation Profile with TargetProfile (plaintext)\nDESCRIPTION: Sets the target profile for documentation output, such as 'wiki' or 'githubwiki'. This affects the documentation formatting and structure. Add this option in the .openscad_docsgen_rc file to configure output style globally.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/WRITING_DOCS.md#_snippet_27\n\nLANGUAGE: plaintext\nCODE:\n```\nTargetProfile: githubwiki\n```\n\n----------------------------------------\n\nTITLE: Anchoring Square to Front Right Corner\nDESCRIPTION: Demonstrates anchoring a square to align the front right corner to the origin using anchor=[1,-1].\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Shapes2d.md#_snippet_4\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\nsquare([60,40], anchor=[1,-1]);\n```\n\n----------------------------------------\n\nTITLE: Override Central Anchors Position using List Comprehension - BOSL2 OpenSCAD\nDESCRIPTION: Illustrates overriding the position of multiple standard anchors (those at x=0, excluding CTR) simultaneously using a list comprehension in the `override` parameter. The new position for each anchor is calculated based on its original direction using `s/8*unit([0,j,k])`.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_125\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude<BOSL2/std.scad>\nmodule cubic_barbell(s=100, anchor=CENTER, spin=0, orient=UP) {\n    override = [\n                 for(j=[-1:1:1], k=[-1:1:1])\n                   if ([j,k]!=[0,0]) [[0,j,k], [s/8*unit([0,j,k])]]\n               ];\n    attachable(anchor,spin,orient, size=[s*3,s,s],override=override) {\n        union() {\n            xcopies(2*s) cube(s, center=true);\n            xcyl(h=2*s, d=s/4);\n        }\n        children();\n    }\n}\ncubic_barbell(100) show_anchors(30);\n```\n\n----------------------------------------\n\nTITLE: Stroke with Star Polygon - OpenSCAD\nDESCRIPTION: This snippet creates a star using `star()` and draws the star's path with `stroke()`.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Paths.md#_snippet_22\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\npath = star(n=5, step=2, d=50);\nstroke(list_wrap(path), endcap2=\"arrow2\");\n```\n\n----------------------------------------\n\nTITLE: Stroke with Square Polygon - OpenSCAD\nDESCRIPTION: This snippet shows how to generate a polygon path for a square using the `square()` function from BOSL2, combined with `stroke()`.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Paths.md#_snippet_16\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\npath = square(40, center=true);\nstroke(list_wrap(path), endcap2=\"arrow2\");\n```\n\n----------------------------------------\n\nTITLE: Anchoring a Cube with center=false - BOSL2 - OpenSCAD 3D\nDESCRIPTION: This snippet shows anchoring a BOSL2 `cube` using the deprecated `center=false` argument. For a cube, this provides backward compatibility with the built-in `cube` behavior, equivalent to `anchor=[-1,-1,-1]`, aligning the corner closest to the negative axes with the origin.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_14\n\nLANGUAGE: OpenSCAD-3D\nCODE:\n```\ninclude <BOSL2/std.scad>\ncube([50,40,30],center=false);\n```\n\n----------------------------------------\n\nTITLE: Scaling along Y-axis using yscale() in BOSL2/OpenSCAD\nDESCRIPTION: Shows the BOSL2 `yscale()` shortcut command to scale an object (a centered cube) only along the Y-axis by a factor of 2. This is clearer than `scale([1,2,1])`.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Transforms.md#_snippet_11\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\nyscale(2) cube(10, center=true);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Ridge Formation from Large Rounding Heights on Cube Edges in OpenSCAD\nDESCRIPTION: This snippet shows the effect of rounding heights larger than half the adjacent edge length when using mask2d_roundover() (h=20) on top cube edges. It illustrates how excessive height creates a ridge line on the top surface due to geometric constraints. The cube size is 30 units. Requires BOSL2 standard library inclusion and utilizes diff() to apply the mask difference.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Rounding_the_Cube.md#_snippet_20\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude<BOSL2/std.scad>  \ndiff()  \n   cube(30)  \n      edge_profile([TOP+LEFT, TOP+RIGHT])  \n         mask2d_roundover(h = 20, $fn = 64);\n```\n\n----------------------------------------\n\nTITLE: Stroke with Custom Endcaps (Untrimmed) - OpenSCAD\nDESCRIPTION: This example demonstrates creating custom endcaps by passing a path to the `endcaps=` argument. The endcap polygon is untrimmed relative to the line width. The `dblarrow` variable defines a custom double arrow endcap.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Paths.md#_snippet_14\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\npath = [[0,0], [-10,10], [0,20], [10,20], [10,10]];\ndblarrow = [[0,0], [2,-3], [0.5,-2.3], [2,-4], [0.5,-3.5], [-0.5,-3.5], [-2,-4], [-0.5,-2.3], [-2,-3]];\nstroke(path, endcaps=dblarrow);\n```\n\n----------------------------------------\n\nTITLE: Specifying Rounding Height Instead of Radius on Shifted Prismoid Edges in OpenSCAD\nDESCRIPTION: This code applies edge masking to a shifted prismoid by specifying the rounding height (h=5) rather than radius with mask2d_roundover(). It uses edge_profile() with excess extension and high resolution ($fn=128) and mask_angle parameterization to conform to edge geometry. This approach produces a distinctive edge shape compared to radius-based rounding and requires BOSL2 std.scad library.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Rounding_the_Cube.md#_snippet_24\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude<BOSL2/std.scad>  \ndiff()  \n   prismoid([30,20], [50,60], h=20, shift=[30,40])  \n      edge_profile(TOP, excess=35)  \n         mask2d_roundover(h=5, mask_angle=$edge_angle, $fn=128);\n```\n\n----------------------------------------\n\nTITLE: Setting different 'k' values for each edge in rounded_prism() in OpenSCAD\nDESCRIPTION: This code demonstrates assigning distinct 'k' values for the top, bottom, and sides of the prism to achieve varied transition sharpness. It uses arrays for 'k_top', 'k_bot', and 'k_sides' to control the smoothness locally on each edge, allowing complex curvature effects. Dependencies are 'std.scad' and 'rounding.scad'.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Rounding_the_Cube.md#_snippet_37\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\ninclude <BOSL2/rounding.scad>\nrounded_prism(rect(20), height=20, \n    joint_top=3, joint_bot=3, joint_sides=8, \n    k_top=0.5, k_bot=0.1, k_sides=[0,0.7,0.3,0.7]);\n```\n\n----------------------------------------\n\nTITLE: Detecting Hole Edges in a VNF using vnf_validate (BOSL2)\nDESCRIPTION: Demonstrates using `vnf_validate` after fixing the previously identified reversed face. With the face orientation corrected, `vnf_validate` now detects and reports the non-manifold hole (ERROR HOLE_EDGE) in the front face, which was previously obscured by the reversal error. This highlights that `vnf_validate` often needs to be run iteratively during debugging.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/VNF.md#_snippet_8\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\nvnf = [\n    [\n        [-1,-1,-1], [1,-1,-1], [1,1,-1], [-1,1,-1],\n        [-1,-1, 1], [1,-1, 1], [1,1, 1], [-1,1, 1],\n    ],\n    [\n        [0,1,2], [0,2,3],  //BOTTOM\n        [0,4,5], //FRONT\n        [1,5,6], [1,6,2],  //RIGHT\n        [2,6,7], [2,7,3],  //BACK\n        [3,7,4], [3,4,0],  //LEFT\n        [6,4,7], [6,5,4]   //TOP\n    ]\n];\nvnf_validate(vnf, size=0.1);\n```\n\n----------------------------------------\n\nTITLE: Custom Edge Selection for Cuboid Rounding using List Mask in BOSL2 (OpenSCAD)\nDESCRIPTION: Rounds user-specified edges of a cuboid via a list for 'edges' (and exclusions with 'except'), supporting complex combinations. BOSL2 required. Each item (e.g., FWD, TOP) specifies an edge; multiple can be rounded or excluded. Input: dimension, list of edges; Output: cuboid with those edges rounded except the listed exclusions.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Rounding_the_Cube.md#_snippet_6\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude \\u003cBOSL2/std.scad\\u003e\\ncuboid([100,80,60], rounding=20, edges=[FWD,TOP], except=[TOP+LEFT,FWD+RIGHT]);\n```\n\n----------------------------------------\n\nTITLE: Defining Regions with Crossing Polygons Using region() in BOSL2 (OpenSCAD-2D)\nDESCRIPTION: This example demonstrates a region containing two overlapping circles, creating 'holes' at intersections. Uses left(), right(), and region() from BOSL2. Inputs are circle shapes and positions; results visualize intersection-induced holes. Suitable for exploring edge cases in region logic.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Paths.md#_snippet_54\n\nLANGUAGE: OpenSCAD-2D\nCODE:\n```\ninclude <BOSL2/std.scad>\nrgn = [\n    left(15, p=circle(d=50)),\n    right(15, p=circle(d=50))\n];\nregion(rgn);\n```\n\n----------------------------------------\n\nTITLE: Anchoring and Orienting Spheres in OpenSCAD with BOSL2\nDESCRIPTION: Demonstrates how to use the anchor, spin, and orient parameters with sphere() to position and rotate the shape.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Shapes3d.md#_snippet_12\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\nsphere(d=100, anchor=FRONT);\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\nsphere(d=100, anchor=FRONT, spin=30);\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\nsphere(d=100, anchor=BOTTOM, orient=RIGHT+TOP);\n```\n\n----------------------------------------\n\nTITLE: Displaying Circle Anchor Points\nDESCRIPTION: Shows all available anchor points on a circle using the show_anchors() helper.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Shapes2d.md#_snippet_11\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\ncircle(d=50)\n    show_anchors();\n```\n\n----------------------------------------\n\nTITLE: Making an Elliptical Conical Shape Attachable in BOSL2 (OpenSCAD)\nDESCRIPTION: Defines an `ovalish` module demonstrating how to make an elliptical cone attachable using BOSL2's `attachable()`. It passes 2-item vectors `[rx1, ry1]` and `[rx2, ry2]` to the `r1` and `r2` parameters respectively to define the elliptical radii of the bottom and top faces. Requires the BOSL2 library.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_113\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\nmodule ovalish(l,rx1,ry1,rx2,ry2, anchor=CENTER, spin=0, orient=UP) {\n    attachable(anchor,spin,orient, r1=[rx1,ry1], r2=[rx2,ry2], l=l) {\n        hull() {\n            up(l/2-0.005)\n                linear_extrude(height=0.01, center=true)\n                    ellipse([rx2,ry2]);\n            down(l/2-0.005)\n                linear_extrude(height=0.01, center=true)\n                    ellipse([rx1,ry1]);\n        }\n        children();\n    }\n}\novalish(l=100, rx1=50, ry1=30, rx2=30, ry2=50) show_anchors(20);\n```\n\n----------------------------------------\n\nTITLE: Translating Objects Right using right() in BOSL2/OpenSCAD\nDESCRIPTION: Shows the BOSL2 `right()` shortcut command to translate an object (a sphere) 30 units along the positive X-axis. This is a more readable alternative to `translate([30,0,0])`.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Transforms.md#_snippet_6\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\n#sphere(d=20);\nright(30) sphere(d=20);\n```\n\n----------------------------------------\n\nTITLE: 2D Attachment within `difference` using `overlap` and `inside` in OpenSCAD (BOSL2)\nDESCRIPTION: Shows 2D attachment within a `difference()` operation. One trapezoid is attached `TOP,BOT` with `overlap=5` to partially cut into a circle. Another trapezoid is attached `BOT,BOT` with `inside=true` to position it for removal, further marked with `tag(\"remove\")` (though the tag isn't used by `diff()` here). Requires the BOSL2 standard library.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_100\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\ndiff()\ncircle(d=50){\n    attach(TOP,BOT,overlap=5)\n        trapezoid(w1=30,w2=0,h=30);\n    attach(BOT,BOT,inside=true)\n        tag(\"remove\")\n        trapezoid(w1=30,w2=0,h=30);\n}        \n```\n\n----------------------------------------\n\nTITLE: Grid Based on Size and Spacing in OpenSCAD\nDESCRIPTION: Demonstrates creating a grid by specifying total size (100×100) and spacing (20) instead of count.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Distributors.md#_snippet_20\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\ngrid_copies(20, size=100) sphere(d=10);\n```\n\n----------------------------------------\n\nTITLE: Transform Function Equivalents in OpenSCAD\nDESCRIPTION: This snippet shows BOSL2 transformation functions and their equivalent raw OpenSCAD code. It demonstrates how BOSL2 simplifies transformations like translation and rotation. Dependencies include the BOSL2 library itself.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/README.md#_snippet_0\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nup(5)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ntranslate([0,0,5])\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nxrot(30,cp=[0,10,20])\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ntranslate([0,10,20]) rotate([30,0,0]) translate([0,-10,-20])\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nxcopies(20,n=3)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nfor (dx=[-20,0,20]) translate([dx,0,0])\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nzrot_copies(n=6,r=20)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nfor (zr=[0:5]) rotate([0,0,zr*60]) translate([20,0,0])\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nskew(sxz=0.5,syz=0.333)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nmultmatrix([[1,0,0.5,0],[0,1,0.333,0],[0,0,1,0],[0,0,0,1]])\n```\n\n----------------------------------------\n\nTITLE: Stroke with Butt Endcaps - OpenSCAD\nDESCRIPTION: This code snippet shows the use of `endcaps=\"butt\"` to create straight endcaps for the path.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Paths.md#_snippet_6\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\npath = [[0,0], [-10,10], [0,20], [10,20], [10,10]];\nstroke(path, endcaps=\"butt\");\n```\n\n----------------------------------------\n\nTITLE: Default Usage of ycopies() in OpenSCAD\nDESCRIPTION: Shows the default behavior of ycopies() which creates 2 copies spaced 20 units apart along the Y axis when n parameter is omitted.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Distributors.md#_snippet_4\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\nycopies(20) sphere(d=10);\n```\n\n----------------------------------------\n\nTITLE: Flaring edges with asymmetric negative 'joint' values in rounded_prism() in OpenSCAD\nDESCRIPTION: This example shows how to use a 2-vector for 'joint_top' to flare the top edge upward with asymmetric flaring effects, combined with a negative 'joint_bot' for outward flare at the bottom. This provides advanced control over edge shaping for complex geometries. Dependencies are consistent with previous snippets.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Rounding_the_Cube.md#_snippet_40\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\ninclude <BOSL2/rounding.scad>\nrounded_prism(rect(20), height=20, \njoint_top=[3,-3], joint_bot=[-3,10], joint_sides=8, k=0.5);\n```\n\n----------------------------------------\n\nTITLE: Displaying All Standard Anchors on a Cube (OpenSCAD)\nDESCRIPTION: Utilizes the `show_anchors()` module from the BOSL2 library to display visual arrows for all standard cardinal anchor points on a centered cube. This helps in understanding the default anchor locations and orientations.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_59\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\ncube(20, center=true)\n    show_anchors();\n```\n\n----------------------------------------\n\nTITLE: Using Inset Parameter with Align in OpenSCAD\nDESCRIPTION: Demonstrates using the inset parameter with align to shift children away from the edges they are aligned to, showing two different examples on a prismoid.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_76\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\nprismoid([50,50],[50,25],25){\n  attach(FWD,BOT,align=TOP,inset=3) color(\"lavender\")cuboid(5);\n  attach(FWD,BOT,align=BOT+RIGHT,inset=3) color(\"purple\")cuboid(5);\n}\n```\n\n----------------------------------------\n\nTITLE: Ignoring Files in Documentation Generation with IgnoreFiles (plaintext)\nDESCRIPTION: Shows how to use the IgnoreFiles block to specify files not to be included when generating documentation. Each file or wildcard should be listed on a new line under IgnoreFiles, usually in the .openscad_docsgen_rc configuration.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/WRITING_DOCS.md#_snippet_30\n\nLANGUAGE: plaintext\nCODE:\n```\nIgnoreFiles:\n  ignored1.scad\n  ignored2.scad\n  tmp_*.scad\n```\n\n----------------------------------------\n\nTITLE: Creating Attachable Shape with Named Anchor\nDESCRIPTION: This code defines a `raindrop` module that creates a teardrop-like shape with a named anchor called \"cap\". The `named_anchor()` function is used to define the anchor's name, position, orientation, and spin. The `anchors` argument of `attachable()` is then used to pass this named anchor.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_120\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\nmodule raindrop(r, thick, anchor=CENTER, spin=0, orient=UP) {\n    anchors = [\n        named_anchor(\"cap\", [0,r/sin(45),0], BACK, 0)\n    ];\n    attachable(anchor,spin,orient, r=r, l=thick, anchors=anchors) {\n        linear_extrude(height=thick, center=true) {\n            circle(r=r);\n            back(r*sin(45)) zrot(45) square(r, center=true);\n        }\n        children();\n    }\n}\nraindrop(r=25, thick=20, anchor=\"cap\");\n```\n\n----------------------------------------\n\nTITLE: Assembling a Sphere from VNF Parts using vnf_join (BOSL2)\nDESCRIPTION: Combines multiple VNF structures (top cap, mirrored bottom cap, and side walls) into a single, complete spherical polyhedron. It uses the `vnf_join` function from BOSL2, which merges the vertex and face lists from the input VNFs, handling vertex duplication automatically.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/VNF.md#_snippet_5\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\ncap_vnf = [\n    [[0,0,1], for (a=[0:30:359.9]) spherical_to_xyz(1,a,30)], // Vertices\n    [for (i=[1:12]) [0, i%12+1, i]] // Faces\n];\ncap_vnf2 = zflip(cap_vnf);\nwall_vnf = vnf_vertex_array(\n    points=[\n        for (phi = [30:30:179.9]) [\n            for (theta = [0:30:359.9])\n            spherical_to_xyz(1,theta,phi)\n        ]\n    ],\n    col_wrap=true, caps=false\n);\nvnf = vnf_join([cap_vnf,cap_vnf2,wall_vnf]);\nvnf_polyhedron(vnf);\n```\n\n----------------------------------------\n\nTITLE: Mirroring across XZ-plane using yflip() in BOSL2/OpenSCAD\nDESCRIPTION: Shows the BOSL2 `yflip()` shortcut command to mirror an object (a rotated cylinder) across the XZ-plane (Y=0). This is clearer than `mirror([0,1,0])`.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Transforms.md#_snippet_25\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\n#xrot(60) cylinder(h=50, d1=20, d2=10);\nyflip() xrot(60) cylinder(h=50, d1=20, d2=10);\n```\n\n----------------------------------------\n\nTITLE: Composing Compound Transformations Using Matrix Multiplication in BOSL2 (OpenSCAD-2D)\nDESCRIPTION: This code shows composing translation, rotation, and scale transforms into a single matrix by multiplying together matrices generated by move(), rot(), and scale(). The matrix is applied to a square with multmatrix(). Parameters control translation, rotation angle, and scale. Useful for efficiency when applying multiple transforms.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Paths.md#_snippet_49\n\nLANGUAGE: OpenSCAD-2D\nCODE:\n```\ninclude <BOSL2/std.scad>\nmat = move([5,10,0]) * rot(30) * scale([1.5,0.75,1]);\nmultmatrix(mat) square(50,center=true);\n```\n\n----------------------------------------\n\nTITLE: Masking Edges on Non-Cubic Object in OpenSCAD Using Parent Size Variables\nDESCRIPTION: This snippet illustrates how to apply edge masks to each edge of a non-cubic cuboid by specifying individual lengths using the special variable $parent_size, which captures each dimension. It ensures proper masking of edges when the object is not a perfect cube.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Rounding_the_Cube.md#_snippet_28\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\ndiff()\n  cuboid([60,80,40])  {\n   edge_mask(TOP+FWD)\n    rounding_edge_mask(r = 10, l = $parent_size.x + 0.1);\n   edge_mask(TOP+RIGHT)\n    rounding_edge_mask(r = 10, l = $parent_size.y + 0.1);\n   edge_mask(RIGHT+FWD)\n    rounding_edge_mask(r = 10, l = $parent_size.z + 0.1);\n  }\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Block Headers in openscad_docsgen Config (plaintext)\nDESCRIPTION: Illustrates how to define new custom block header types in the documentation configuration file using the DefineHeader line. Supports specifying header type, options, and names to create bespoke doc block sections for projects.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/WRITING_DOCS.md#_snippet_32\n\nLANGUAGE: plaintext\nCODE:\n```\nDefineHeader(Text;ItemOnly): Returns\nDefineHeader(BulletList): Side Effects\nDefineHeader(Table;Headers=^Anchor Name|Position): Extra Anchors\n```\n\n----------------------------------------\n\nTITLE: Creating Sphere Side Walls VNF using vnf_vertex_array (BOSL2)\nDESCRIPTION: Generates the side walls of a sphere as a VNF using the `vnf_vertex_array` function from BOSL2. It takes a 2D grid of points (generated using nested list comprehensions and `spherical_to_xyz`) and connects them to form faces. `col_wrap=true` connects the last column to the first, and `caps=false` prevents capping the top and bottom rows.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/VNF.md#_snippet_4\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\nwall_vnf = vnf_vertex_array(\n    points=[\n        for (phi = [30:30:179.9]) [\n            for (theta = [0:30:359.9])\n            spherical_to_xyz(1,theta,phi)\n        ]\n    ],\n    col_wrap=true, caps=false\n);\nvnf_polyhedron(wall_vnf);\n```\n\n----------------------------------------\n\nTITLE: Arc with Three Points - OpenSCAD\nDESCRIPTION: This snippet defines an arc using three points given in the `points=` argument. This defines the arc's shape.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Paths.md#_snippet_29\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\npts = [[-15,10],[0,20],[35,-5]];\npath = arc(points=pts);\nstroke(path, endcap2=\"arrow2\");\n```\n\n----------------------------------------\n\nTITLE: Edge Exclusion for Rounding with 3x4 Mask in Cuboid (BOSL2, OpenSCAD)\nDESCRIPTION: Excludes selected edges from rounding by specifying a 3x4 binary array in the 'except' parameter. Each entry disables rounding for a specific edge per the reference order. Requires BOSL2. Input: cuboid dimensions, 3x4 array; Output: cuboid with rounding on all but the masked edges.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Rounding_the_Cube.md#_snippet_8\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude \\u003cBOSL2/std.scad\\u003e\\ncuboid([100,80,60], rounding=20, except = [[1,0,1,0],[0,1,0,1],[1,0,0,1]]);\n```\n\n----------------------------------------\n\nTITLE: Grid with Size and Count Specification in OpenSCAD\nDESCRIPTION: Shows creating a 5×5 grid within a total size of 100×100 units, calculating spacing automatically.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Distributors.md#_snippet_23\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\ngrid_copies(n=5, size=100) sphere(d=10);\n```\n\n----------------------------------------\n\nTITLE: Converting Bézier Control Points to OpenSCAD Path\nDESCRIPTION: This code shows how to convert a Bézier control point list into a drawable OpenSCAD path using bezpath_curve(), enabling further 3D operations such as sweeping or offsetting the path.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Beziers_for_Beginners.md#_snippet_8\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude<BOSL2/std.scad>\n\nbez = [[20,0], [60,40], [-20,50], [25,80]];\npath = bezpath_curve(bez, N = 3);\nstroke(path);\n```\n\n----------------------------------------\n\nTITLE: Defining a Headerless Block Header with openscad_docsgen (plaintext)\nDESCRIPTION: Illustrates the definition of a Headerless block, which merges the title into the body and omits the header line on render. Shows both simple and multi-line sets. Should be included in the appropriate documentation or configuration context.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/WRITING_DOCS.md#_snippet_21\n\nLANGUAGE: plaintext\nCODE:\n```\n// DefineHeader(Headerless): Explanation\n// Explanation: This is a simple explanation.\n// Explanation: This is a complex explanation.\n//   It is a multi-line explanation\n//   about why this does what it does.\n//   Refer to {{nonsense()}} for more info.\n```\n\n----------------------------------------\n\nTITLE: Creating Example Blocks with Optional Rendering Metadata in OpenSCAD\nDESCRIPTION: Describes the Example and Examples blocks to show script samples as runnable code and optionally generate images by running them in OpenSCAD. Includes metadata tags to control view orientation, animation, frame rate, size, and rendering detail. Also supports hiding lines from documentation while including them in generated images to keep examples clean yet functional.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/WRITING_DOCS.md#_snippet_17\n\nLANGUAGE: OpenSCAD\nCODE:\n```\n// Example: Example description\n//   cylinder(h=100, d1=75, d2=50);\n//   up(100) cylinder(h=100, d1=50, d2=75);\n// Example(Spin,VPD=444): Animated shape that spins to show all faces.\n//   cube([10,100,50], center=true);\n//   cube([100,10,30], center=true);\n// Examples:\n//   cube(100);\n//   cylinder(h=100,d=50);\n//   sphere(d=100);\n```\n\n----------------------------------------\n\nTITLE: Defining a 2D Figure Block in OpenSCAD\nDESCRIPTION: Illustrates how to use a Figure block to document a 2D shape with a circle having a square cutout by using difference operations. The snippet shows commented OpenSCAD code capturing the shape definition and multi-line commenting for descriptive text continuation. No dependencies beyond basic OpenSCAD operations are required.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/WRITING_DOCS.md#_snippet_13\n\nLANGUAGE: OpenSCAD\nCODE:\n```\n// Figure(2D): A circle with a square cutout.\n//   difference() {\n//       circle(d=100);\n//       square(100/sqrt(2), center=true);\n//   }\n// Continues: You can continue the description text here.  It can also be\n//   multiple lines long.  This continuation will not print a header.\n```\n\n----------------------------------------\n\nTITLE: Visualizing an Anchor Point on a Cube (OpenSCAD)\nDESCRIPTION: Shows how to visualize the position and orientation of a specific anchor point (LEFT+TOP) on a cube using the `anchor_arrow()` module attached via the `attach()` function from the BOSL2 library. The arrow indicates the anchor's local axes.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_57\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\ncube(18, center=true)\n    attach(LEFT+TOP)\n        anchor_arrow();\n```\n\n----------------------------------------\n\nTITLE: Setting the Documentation Output Directory with DocsDirectory (plaintext)\nDESCRIPTION: Demonstrates use of the DocsDirectory configuration key, which specifies the directory where generated documentation will be written. Should be placed in the .openscad_docsgen_rc config file. Value is a directory path, used by openscad_docsgen.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/WRITING_DOCS.md#_snippet_26\n\nLANGUAGE: plaintext\nCODE:\n```\nDocsDirectory: wiki_dir\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Documentation Block Headers in OpenSCAD\nDESCRIPTION: Explains how to declare new custom documentation block types using the DefineHeader directive. It shows syntax variants to name the new block and optionally specify behavior options like display style or formatting. This capability enables customization and extension of documentation generation to meet specific needs, beyond standard block types.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/WRITING_DOCS.md#_snippet_18\n\nLANGUAGE: OpenSCAD\nCODE:\n```\n// DefineHeader(TYPE): NEWBLOCKNAME\n// or:\n// DefineHeader(TYPE;OPTIONS): NEWBLOCKNAME\n```\n\n----------------------------------------\n\nTITLE: Sweeping Offset Paths to Create Vase-Like Shape\nDESCRIPTION: This code sweeps an offset Bézier path around the Y-axis to generate a 3D vase shape, illustrating how different path offset methods influence the resulting geometry, with options of partial or full closure.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Beziers_for_Beginners.md#_snippet_15\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude<BOSL2/std.scad>\ninclude<BOSL2/rounding.scad>\n\n$fn = 72;\n\nbez = [[15,0], [60,40], [-25,50], [25,80]];\npath = offset_stroke(bezier_curve(bez, splinesteps = 32), [2,0]);\nback_half(s = 200) rotate_sweep(path,360);\n```\n\n----------------------------------------\n\nTITLE: Assigning different joint sizes to each edge in rounded_prism() in OpenSCAD\nDESCRIPTION: This example shows how to specify individual joint sizes for top, bottom, and sides of the prism by passing an array for 'joint_sides'. It provides flexibility for asymmetric rounding effects across different edges. Dependencies are the same as previous examples.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Rounding_the_Cube.md#_snippet_36\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\ninclude <BOSL2/rounding.scad>\nrounded_prism(rect(20), height=20, \n    joint_top=4, joint_bot=3, joint_sides=[2, 10, 5, 10], k = 0.5);\n```\n\n----------------------------------------\n\nTITLE: Creating 3D Bézier Curves in OpenSCAD\nDESCRIPTION: Shows how to create a three-dimensional Bézier curve by defining control points with x, y, and z coordinates. This example demonstrates a spinning 3D cubic Bézier curve with four control points.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Beziers_for_Beginners.md#_snippet_5\n\nLANGUAGE: openscad\nCODE:\n```\ninclude<BOSL2/std.scad>\n\nbez = [[10,0,10], [30,30,-10], [-30,30,40], [-10,0,30]];\ndebug_bezier(bez, N = 3);\n```\n\n----------------------------------------\n\nTITLE: Grid with Different X and Y Counts in OpenSCAD\nDESCRIPTION: Demonstrates creating a 4×5 grid within a total size of 100×100 units.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Distributors.md#_snippet_24\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\ngrid_copies(n=[4,5], size=100) sphere(d=10);\n```\n\n----------------------------------------\n\nTITLE: Spinning a Centered Cube - BOSL2 - OpenSCAD 3D\nDESCRIPTION: This snippet demonstrates applying a `spin` of 45 degrees to a BOSL2 `cube`. The `spin` parameter rotates the object around the Z-axis at the origin *after* anchoring (or centering), causing the centered cube to be rotated by 45 degrees.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_20\n\nLANGUAGE: OpenSCAD-3D\nCODE:\n```\ninclude <BOSL2/std.scad>\ncube([20,20,40], center=true, spin=45);\n```\n\n----------------------------------------\n\nTITLE: Section Block in OpenSCAD Documentation\nDESCRIPTION: Shows how to create a Section block with extended markdown content, including paragraph breaks and cross-references, which organizes content at the highest level within a file.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/WRITING_DOCS.md#_snippet_11\n\nLANGUAGE: openscad\nCODE:\n```\n// Section: Foobar\n//   You can have several lines of markdown formatted text here.\n//   You just need to make sure that each line is indented, with\n//   at least three spaces after the comment marker.  You can\n//   denote a paragraph break with a comment line with three\n//   trailing spaces, or just a period.\n//   .\n//   You can have links in this text to functions, modules, or\n//   constants in other files by putting the name in double-\n//   braces like {{cyl()}} or {{lerp()}} or {{DOWN}}.  If you want to\n//   link to another file, or section in another file you can use\n//   a manual markdown link like [Section: Cuboids](shapes.scad#section-cuboids).\n//   .\n//   The end of the block is denoted by a line without a comment.\n//   or a line that is unindented after the comment.\n```\n\n----------------------------------------\n\nTITLE: Committing and Pushing Changes Using Git Command-Line (bash)\nDESCRIPTION: Outlines the series of git commands to stage all changed files, commit them with a descriptive message, update from upstream to reconcile changes, and push the local commits to the user's remote fork repository. Assumes prior synchronization of upstream. The 'COMMIT DESCRIPTION' parameter represents the commit message entered by the user. Output is a pushed commit to GitHub.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit add --all\ngit commit -m \"COMMIT DESCRIPTION\"\ngit pull upstream\ngit push\n```\n\n----------------------------------------\n\nTITLE: Offset Mirroring using zflip(z=) in BOSL2/OpenSCAD\nDESCRIPTION: Demonstrates mirroring a rotated cube across a plane parallel to XY but offset to Z = -20, using the `z` argument in the BOSL2 `zflip()` command. A visual guide plane is included.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Transforms.md#_snippet_29\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\n#xrot(30) cube(20, center=true);\nzflip(z=-20) xrot(30) cube(20, center=true);\ncolor(\"blue\",0.25) down(20) cube([40,40,0.1], center=true);\n```\n\n----------------------------------------\n\nTITLE: Inside Attachment Preparation in OpenSCAD\nDESCRIPTION: Shows setup for inside attachment with anchor arrows pointing in the same direction, preparing for objects to be subtracted from the parent using diff() and inside=true parameters.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_77\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\ncube(50,anchor=BOT) attach(TOP) anchor_arrow(30);\nright(60)cylinder(d1=30,d2=15,h=25) attach(TOP) anchor_arrow(30);\n```\n\n----------------------------------------\n\nTITLE: Generating Multiple Figure Blocks with Metadata Directives in OpenSCAD\nDESCRIPTION: Shows complex usage of Figure and Figures blocks for rendering multiple images generated by OpenSCAD scripts. The snippet includes a variety of figures with optional metadata controlling rendering options such as viewpoint, animation, size, and visual effects. These directives influence how and whether images are generated or displayed, providing fine control over documentation output.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/WRITING_DOCS.md#_snippet_16\n\nLANGUAGE: OpenSCAD\nCODE:\n```\n// Figure: Figure description\n//   cylinder(h=100, d1=75, d2=50);\n//   up(100) cylinder(h=100, d1=50, d2=75);\n// Figure(Spin,VPD=444): Animated figure that spins to show all faces.\n//   cube([10,100,50], center=true);\n//   cube([100,10,30], center=true);\n// Figures:\n//   cube(100);\n//   cylinder(h=100,d=50);\n//   sphere(d=100);\n```\n\n----------------------------------------\n\nTITLE: Orienting Child to Front Side of Square\nDESCRIPTION: Uses the orient() module to rotate a child shape to match the orientation at the front anchor.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Shapes2d.md#_snippet_22\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\nsquare(50, center=true)\n    orient(anchor=FWD)\n        #square([10,40], anchor=FWD);\n```\n\n----------------------------------------\n\nTITLE: Applying mask2d_ogee() Edge Profile to Prismoid and Cuboid Shapes in OpenSCAD\nDESCRIPTION: This snippet applies an ogee style 2D edge mask using mask2d_ogee() on a prismoid specified with larger size2 dimensions compared to size1. The mask parameters define stepped shoulders and fillet roundings to create an S-curve profile. It requires BOSL2 std.scad library and uses diff() to subtract the mask from the shape. The function works only with cube, cuboid, or prismoids meeting size2 >= size1 conditions in X and Y dimensions.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Rounding_the_Cube.md#_snippet_22\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>  \ndiff()  \n prismoid(size1 = [50,50],size2 = [80,80], rounding1 = 25, height = 80)  \n  edge_profile(TOP)  \n   mask2d_ogee([  \n            \"xstep\",8,  \"ystep\",5,  // Starting shoulder.  \n            \"fillet\",5, \"round\",5,  // S-curve.  \n            \"ystep\",3,  \"xstep\",3   // Ending shoulder.  \n        ]);\n```\n\n----------------------------------------\n\nTITLE: Defining a Label Block Header with openscad_docsgen (plaintext)\nDESCRIPTION: Provides an example of a Label block header, which shows only the title as output and is suitable for concise lists or labels. Each entry lists a title and associated values, intended for configuration documentation.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/WRITING_DOCS.md#_snippet_22\n\nLANGUAGE: plaintext\nCODE:\n```\n// DefineHeader(Label): Regions\n// Regions: Antarctica, New Zealand\n// Regions: Europe, Australia\n```\n\n----------------------------------------\n\nTITLE: Stroke with Circle Polygon - OpenSCAD\nDESCRIPTION: This snippet shows the creation of a circle using the `circle()` function, with the path of the circle being drawn using `stroke()`.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Paths.md#_snippet_19\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\npath = circle(d=50);\nstroke(list_wrap(path), endcap2=\"arrow2\");\n```\n\n----------------------------------------\n\nTITLE: LibFile Block Example in OpenSCAD Documentation\nDESCRIPTION: Shows how to create a LibFile block with extended markdown content including paragraph breaks and cross-references to other functions or files in the documentation.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/WRITING_DOCS.md#_snippet_3\n\nLANGUAGE: openscad\nCODE:\n```\n// LibFile: foo.scad\n//   You can have several lines of markdown formatted text here.\n//   You just need to make sure that each line is indented, with\n//   at least three spaces after the comment marker.  You can\n//   denote a paragraph break with a comment line with three\n//   trailing spaces, or just a period.\n//   .\n//   You can have links in this text to functions, modules, or\n//   constants in other files by putting the name in double-\n//   braces like {{cyl()}} or {{lerp()}} or {{DOWN}}.  If you want to\n//   link to another file, or section in another file you can use\n//   a manual markdown link like [Section: Cuboids](shapes.scad#section-cuboids).\n//   The end of the block is denoted by a line without a comment.\n```\n\n----------------------------------------\n\nTITLE: Turtle Graphics with Default Length and Angle - OpenSCAD\nDESCRIPTION: This example defines default length and angle values using the `length` and `angle` commands for the turtle to follow. These are then used by the turtle's movement commands (move and turn).\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Paths.md#_snippet_31\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\npath = turtle([\n    \"angle\",360/6,\n    \"length\",10,\n    \"move\",\"turn\",\n    \"move\",\"turn\",\n    \"move\",\"turn\",\n    \"move\",\"turn\",\n    \"move\"\n]);\nstroke(path, endcap2=\"arrow2\");\n```\n\n----------------------------------------\n\nTITLE: Attaching a Single Branch in OpenSCAD\nDESCRIPTION: Extends the `tree` module to attach a single scaled and rotated cylinder (branch) to the top of the trunk using the BOSL2 `attach(TOP)` command and `yrot()` for rotation. This demonstrates basic attachment and transformation within the BOSL2 framework.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/FractalTree.md#_snippet_1\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\nmodule tree(l=1500, sc=0.7)\n    cylinder(h=l, d1=l/5, d2=l/5*sc)\n        attach(TOP)\n            yrot(30) cylinder(h=l*sc, d1=l/5*sc, d2=l/5*sc*sc);\ntree();\n```\n\n----------------------------------------\n\nTITLE: Generating Raw Translation Matrix Using move (OpenSCAD-2D)\nDESCRIPTION: This snippet creates a raw transformation matrix for translation using BOSL2's move() without the p= argument and applies it to a square with multmatrix(). Inputs are the translation vector; outputs are a transformed square. This is used for low-level transformation composition.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Paths.md#_snippet_46\n\nLANGUAGE: OpenSCAD-2D\nCODE:\n```\ninclude <BOSL2/std.scad>\nmat = move([5,10,0]);\nmultmatrix(mat) square(50,center=true);\n```\n\n----------------------------------------\n\nTITLE: Anchoring a Cube at Edge with Vector - BOSL2 - OpenSCAD 3D\nDESCRIPTION: This snippet shows anchoring a BOSL2 `cube` module using a vector `[1,0,1]` for the `anchor` parameter. This vector points towards the upper-right edge of the cube, aligning that edge with the origin (0,0,0).\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_1\n\nLANGUAGE: OpenSCAD-3D\nCODE:\n```\ninclude <BOSL2/std.scad>\n// Anchor at upper-right edge\ncube([40,30,50], anchor=[1,0,1]);\n```\n\n----------------------------------------\n\nTITLE: Orienting Child to Circle Perimeter\nDESCRIPTION: Uses polar coordinates to orient a square to be tangent to a specific point on a circle.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Shapes2d.md#_snippet_24\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\ncircle(d=50)\n    orient(polar_to_xy(1,30))\n        #square([10,40], anchor=FWD);\n```\n\n----------------------------------------\n\nTITLE: Specifying Documentation File Types to Generate with GenerateDocs (plaintext)\nDESCRIPTION: Defines which documentation files openscad_docsgen will create. The value is a comma-separated list of doc types, like Files, ToC, Index, Topics, CheatSheet, Cheat, Sidebar. Use in the .openscad_docsgen_rc config file to customize doc output.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/WRITING_DOCS.md#_snippet_29\n\nLANGUAGE: plaintext\nCODE:\n```\nGenerateDocs: Files, ToC, Index, Topics, CheatSheet, Sidebar\n```\n\n----------------------------------------\n\nTITLE: Arc with Center Point - OpenSCAD\nDESCRIPTION: This code demonstrates positioning the center of the arc at a different location than the origin using the `cp=` argument.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Paths.md#_snippet_28\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\npath = arc(cp=[10,0], r=30, angle=120);\nstroke(path, endcap2=\"arrow2\");\n```\n\n----------------------------------------\n\nTITLE: Defining a Table Block Header with openscad_docsgen (plaintext)\nDESCRIPTION: Shows how to create a Table block type, including specifying headers via options. Body content is given as rows, with '=' separating cell values. Can define multiple sub-tables separated by lines with only dashes. Designed for use in documentation block annotations.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/WRITING_DOCS.md#_snippet_25\n\nLANGUAGE: plaintext\nCODE:\n```\n// DefineHeader(Table;Headers=^Link Name|Description): Anchors\n// Anchors: by Name\n//   \"link1\" = Anchor for the joiner Located at the {{BACK}} side of the shape.\n//   \"a\"/\"b\" = Anchor for the joiner Located at the {{FRONT}} side of the shape.\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n// DefineHeader(Table;Headers=^Pos Arg|What it Does||^Names Arg|What it Does): Args\n// Args:\n//   foo = The foo argument.\n//   bar = The bar argument.\n//   ---\n//   baz = The baz argument.\n//   qux = The baz argument.\n```\n\n----------------------------------------\n\nTITLE: Creating Ellipsoid Attachable Shape with Scaling\nDESCRIPTION: This code extends the `spikeball` module to handle ellipsoid shapes by introducing a `scale` parameter.  The `scale` parameter is a 3-item vector. It modifies the `attachable()` module to accept a scaled radius using `r=r*1.1*scale`, allowing attachment points to adapt to the ellipsoid's dimensions.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_116\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\nmodule spikeball(r, d, scale, anchor=CENTER, spin=0, orient=UP) {\n    r = get_radius(r=r,d=d,dflt=1);\n    attachable(anchor,spin,orient, r=r*1.1*scale) {\n        union() {\n            sphere_copies(r=r, n=512, scale=scale, cone_ang=180) cylinder(r1=r/10, r2=0, h=r/10);\n            scale(scale) sphere(r=r);\n        }\n        children();\n    }\n}\nspikeball(r=50, scale=[0.75,1,1.5]) show_anchors(20);\n```\n\n----------------------------------------\n\nTITLE: Matching cuboid roundover with rounded_prism() in OpenSCAD\nDESCRIPTION: This example shows how to replicate the circular roundover of a cuboid() by aligning 'joint' parameters with the rounding value and setting 'k' to 0.93 for a similar curvature. It compares a rounded_prism() with a cuboid() with specified rounding, emphasizing that splinesteps control smoothness for rounded_prism(), not '$fn'.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Rounding_the_Cube.md#_snippet_34\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\ninclude <BOSL2/rounding.scad>\nleft(15) \n    rounded_prism(rect(20), height=20, joint_top=4, joint_bot=4, joint_sides=4, k = 0.93);\nright(15)  \n    cuboid(20, rounding = 4, $fn = 72);\n```\n\n----------------------------------------\n\nTITLE: Skewing along Y by Z using skew(syz=) in BOSL2/OpenSCAD\nDESCRIPTION: Demonstrates the BOSL2 `skew()` command to shear an object (a cube) along the Y-axis, with the amount of skew proportional to the Z-coordinate. The `syz=0.5` parameter specifies the skew factor.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Transforms.md#_snippet_33\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\nskew(syz=0.5) cube(10,center=false);\n```\n\n----------------------------------------\n\nTITLE: Specifying negative joint distances for flared effects in rounded_prism() in OpenSCAD\nDESCRIPTION: This code demonstrates how to set negative values for 'joint_top' and 'joint_bot' to create flared-out shapes at those edges, with 'joint_sides' remaining non-negative for proper rounding. This allows for outward or upward flaring effects, increasing design flexibility. Dependencies are as above.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Rounding_the_Cube.md#_snippet_39\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\ninclude <BOSL2/rounding.scad>\nrounded_prism(rect(20), height=20, \n    joint_top=5, joint_bot=-5, joint_sides=8, k=0.5);\n```\n\n----------------------------------------\n\nTITLE: Offset Mirroring using yflip(y=) in BOSL2/OpenSCAD\nDESCRIPTION: Demonstrates mirroring a rotated cube across a plane parallel to XZ but offset to Y = 20, using the `y` argument in the BOSL2 `yflip()` command. A visual guide plane is included.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Transforms.md#_snippet_28\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\n#zrot(30) cube(20, center=true);\nyflip(y=20) zrot(30) cube(20, center=true);\ncolor(\"blue\",0.25) back(20) cube([40,0.1,40], center=true);\n```\n\n----------------------------------------\n\nTITLE: Generating Raw Rotation Matrix Using rot (OpenSCAD-2D)\nDESCRIPTION: This snippet creates a rotation matrix with rot() and applies it with multmatrix() to a square. The angle parameter defines the rotation. Outputs a rotated square based on the matrix; applicable for custom transformation stacks.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Paths.md#_snippet_48\n\nLANGUAGE: OpenSCAD-2D\nCODE:\n```\ninclude <BOSL2/std.scad>\nmat = rot(30);\nmultmatrix(mat) square(50,center=true);\n```\n\n----------------------------------------\n\nTITLE: Anchoring a 2D Hexagon with Constant - BOSL2 - OpenSCAD 2D\nDESCRIPTION: This snippet shows anchoring a 2D BOSL2 `hexagon` using the vector constant `LEFT`. For a 2D shape, `LEFT` corresponds to the X- direction, anchoring the hexagon at the point on its perimeter along the negative X-axis.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_17\n\nLANGUAGE: OpenSCAD-2D\nCODE:\n```\ninclude <BOSL2/std.scad>\nhexagon(d=50, anchor=LEFT);\n```\n\n----------------------------------------\n\nTITLE: Anchoring a 2D Circle with Constant - BOSL2 - OpenSCAD 2D\nDESCRIPTION: This snippet illustrates anchoring a 2D BOSL2 `circle` using the vector constant `BACK`. For a 2D shape, `BACK` corresponds to the Y+ direction, anchoring the circle at the point on its perimeter along the positive Y-axis.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_16\n\nLANGUAGE: OpenSCAD-2D\nCODE:\n```\ninclude <BOSL2/std.scad>\ncircle(d=50, anchor=BACK);\n```\n\n----------------------------------------\n\nTITLE: Creating an Octagon with Diameter Parameter\nDESCRIPTION: Creates an octagonal shape using circle with diameter 100 and $fn=8 for controlling sides.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Shapes2d.md#_snippet_2\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\ncircle(d=100, $fn=8);\n```\n\n----------------------------------------\n\nTITLE: Skewing along Y by X using skew(syx=) in BOSL2/OpenSCAD\nDESCRIPTION: Demonstrates the BOSL2 `skew()` command to shear an object (a cube) along the Y-axis, with the amount of skew proportional to the X-coordinate. The `syx=-0.5` parameter specifies the skew factor.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Transforms.md#_snippet_32\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\nskew(syx=-0.5) cube(10,center=false);\n```\n\n----------------------------------------\n\nTITLE: Visualizing orient() Module Effect with anchor_arrow in BOSL2\nDESCRIPTION: Demonstrates how the orient() module changes the orientation of anchor_arrow relative to the parent's anchor, affecting both direction and spin.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_43\n\nLANGUAGE: openscad\nCODE:\n```\ninclude<BOSL2/std.scad>\nprismoid([50,50],[30,30],h=40)\n  position(RIGHT+TOP)\n     orient(RIGHT)\n        anchor_arrow(40);\n```\n\n----------------------------------------\n\nTITLE: Using Spin Parameter with Attach in OpenSCAD\nDESCRIPTION: Shows how to use the spin parameter to rotate the attached child around the anchor axis, rotating the prismoid -90 degrees to bring the front anchor to the front.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_70\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\ncube(30) attach(RIGHT,BOT,spin=-90)\ncolor_this(\"orange\")\n  prismoid([8,8],[6,6],shift=-[1,1],h=8) {\n    attach(TOP,BOT) anchor_arrow(color=[0,1,0],s=12);\n    attach(FWD,BOT) anchor_arrow(s=12);     \n  }\n```\n\n----------------------------------------\n\nTITLE: Creating a Mirrored Spherical Cap VNF in OpenSCAD (BOSL2)\nDESCRIPTION: Demonstrates creating the bottom cap of a sphere by mirroring an existing VNF structure (the top cap). It uses the `zflip` function from BOSL2 to reflect the `cap_vnf` across the XY plane, effectively creating the bottom part.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/VNF.md#_snippet_3\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\ncap_vnf = [\n    [[0,0,1], for (a=[0:30:359.9]) spherical_to_xyz(1,a,30)], // Vertices\n    [for (i=[1:12]) [0, i%12+1, i]] // Faces\n];\ncap_vnf2 = zflip(cap_vnf);\nvnf_polyhedron(cap_vnf2);\n```\n\n----------------------------------------\n\nTITLE: Force Column/Row Spacing in Staggered Grid in OpenSCAD\nDESCRIPTION: Shows how to create a staggered grid with explicit X and Y spacing of 20 units each rather than hexagonal spacing.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Distributors.md#_snippet_19\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\ngrid_copies([20,20], n=6, stagger=true) sphere(d=10);\n```\n\n----------------------------------------\n\nTITLE: Basic 2D Parent-Child Attachment in OpenSCAD (BOSL2)\nDESCRIPTION: Illustrates using `attach()` in a 2D context. A red trapezoid is attached with its `FRONT` anchor to the parent rectangle's `RIGHT` anchor. A green trapezoid is attached `LEFT,FRONT`, then aligned (`align=[FRONT,BACK]`) and inset. Requires the BOSL2 standard library.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_99\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\nrect(50){\n    attach(RIGHT,FRONT)\n        color(\"red\")trapezoid(w1=30,w2=0,h=30);\n    attach(LEFT,FRONT,align=[FRONT,BACK],inset=3)\n        color(\"green\") trapezoid(w1=25, w2=0,h=30);\n}\n```\n\n----------------------------------------\n\nTITLE: Making an Elliptical Cylindrical Shape Attachable in BOSL2 (OpenSCAD)\nDESCRIPTION: Defines an `ovalstar` module demonstrating how to make an elliptical cylinder attachable using BOSL2's `attachable()`. A 2-item vector `[rx, ry]` is passed to the `r` parameter to specify the differing X and Y radii. Requires the BOSL2 library.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_110\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\nmodule ovalstar(l,rx,ry, anchor=CENTER, spin=0, orient=UP) {\n    attachable(anchor,spin,orient, r=[rx,ry], l=l) {\n        linear_extrude(height=l, center=true, convexity=4)\n            scale([1,ry/rx,1])\n                star(n=20, r=rx, ir=rx*0.9);\n        children();\n    }\n}\novalstar(l=100, rx=50, ry=30) show_anchors(20);\n```\n\n----------------------------------------\n\nTITLE: Two-Parameter attach() for Specific Side Connection\nDESCRIPTION: Uses attach() with two parameters to specify which sides of the parent and child should connect.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Shapes2d.md#_snippet_29\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\nsquare([10,50], center=true)\n    attach(BACK, LEFT)\n        #square([10,40], center=true);\n```\n\n----------------------------------------\n\nTITLE: Boolean Union of Regions Using union() in BOSL2 (OpenSCAD-2D)\nDESCRIPTION: This snippet shows how to perform a union operation between two regions, one composed of concentric circles and the other a square, using union() from BOSL2. Requires BOSL2 and OpenSCAD. Inputs are regions; the output is their union, displayed by region(). Only works with region lists.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Paths.md#_snippet_55\n\nLANGUAGE: OpenSCAD-2D\nCODE:\n```\ninclude <BOSL2/std.scad>\nrgn1 = [for (d=[40:-10:10]) circle(d=d)];\nrgn2 = [square([60,12], center=true)];\nrgn = union(rgn1, rgn2);\nregion(rgn);\n```\n\n----------------------------------------\n\nTITLE: Using Overlap Parameter with Attach in OpenSCAD\nDESCRIPTION: Shows how to use the overlap parameter with a positive value to make the child object penetrate into the parent object, creating an overlapping effect.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_72\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\ncuboid(50)\n    attach(TOP,BOT,overlap=15)\n        color(\"green\")cuboid(20);\n```\n\n----------------------------------------\n\nTITLE: Defining a Cube with OpenSCAD polyhedron\nDESCRIPTION: Demonstrates creating a simple cube using the built-in OpenSCAD `polyhedron` module. It requires defining separate lists for vertices (3D coordinates) and faces (indices referencing the vertex list). Requires the BOSL2 library for context but only uses standard OpenSCAD features here.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/VNF.md#_snippet_0\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\nverts = [\n    [-1,-1,-1], [1,-1,-1], [1,1,-1], [-1,1,-1],\n    [-1,-1, 1], [1,-1, 1], [1,1, 1], [-1,1, 1]\n];\nfaces = [\n    [0,1,2], [0,2,3],  //BOTTOM\n    [0,4,5], [0,5,1],  //FRONT\n    [1,5,6], [1,6,2],  //RIGHT\n    [2,6,7], [2,7,3],  //BACK\n    [3,7,4], [3,4,0],  //LEFT\n    [6,4,7], [6,5,4]   //TOP\n];\npolyhedron(verts, faces);\n```\n\n----------------------------------------\n\nTITLE: Boolean Exclusive-Or of Regions Using exclusive_or() in BOSL2 (OpenSCAD-2D)\nDESCRIPTION: This snippet applies exclusive_or() on two regions (multiple circles and a square), resulting in shapes that do not overlap. Requires BOSL2 and OpenSCAD. Inputs are polygon regions; the output is their exclusive-or rendered by region(). Edge cases with self-intersection may behave unexpectedly.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Paths.md#_snippet_58\n\nLANGUAGE: OpenSCAD-2D\nCODE:\n```\ninclude <BOSL2/std.scad>\nrgn1 = [for (d=[40:-10:10]) circle(d=d)];\nrgn2 = [square([60,12], center=true)];\nrgn = exclusive_or(rgn1, rgn2);\nregion(rgn);\n```\n\n----------------------------------------\n\nTITLE: Orienting Child to Right Side of Square\nDESCRIPTION: Uses the orient() module to rotate a child shape to match the orientation at the right anchor.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Shapes2d.md#_snippet_23\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\nsquare(50, center=true)\n    orient(anchor=RIGHT)\n        #square([10,40], anchor=FWD);\n```\n\n----------------------------------------\n\nTITLE: Defining a Cube with BOSL2 vnf_polyhedron\nDESCRIPTION: Shows how to create the same cube using the BOSL2 VNF (Vertices 'N' Faces) structure. The vertices and faces are combined into a single two-element list (`vnf`). The `vnf_polyhedron` module from BOSL2 is used to render the shape. This approach simplifies passing polyhedron data.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/VNF.md#_snippet_1\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\nvnf = [\n    [\n        [-1,-1,-1], [1,-1,-1], [1,1,-1], [-1,1,-1],\n        [-1,-1, 1], [1,-1, 1], [1,1, 1], [-1,1, 1],\n    ],\n    [\n        [0,1,2], [0,2,3],  //BOTTOM\n        [0,4,5], [0,5,1],  //FRONT\n        [1,5,6], [1,6,2],  //RIGHT\n        [2,6,7], [2,7,3],  //BACK\n        [3,7,4], [3,4,0],  //LEFT\n        [6,4,7], [6,5,4]   //TOP\n    ]\n];\nvnf_polyhedron(vnf);\n```\n\n----------------------------------------\n\nTITLE: Using line_copies() with Starting Point in OpenSCAD\nDESCRIPTION: Shows how to distribute 5 spheres along a diagonal line with a specified starting point at the origin.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Distributors.md#_snippet_13\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\nline_copies(spacing=(BACK+RIGHT)*20, n=5, p1=[0,0,0]) sphere(d=10);\n```\n\n----------------------------------------\n\nTITLE: Simplified Block Examples in OpenSCAD Documentation\nDESCRIPTION: Demonstrates various simpler documentation blocks that don't require all parts of the full syntax, including Topics, Description, and Usage blocks.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/WRITING_DOCS.md#_snippet_2\n\nLANGUAGE: openscad\nCODE:\n```\n// Topics: Mask, Cylindrical, Attachable\n```\n\nLANGUAGE: openscad\nCODE:\n```\n// Description:\n//   This is a description.\n//   It can be multiple lines in length.\n```\n\nLANGUAGE: openscad\nCODE:\n```\n// Usage: Typical Usage\n//   x = foo(a, b, c);\n//   x = foo([a, b, c, ...]);\n```\n\n----------------------------------------\n\nTITLE: FileSummary Block in OpenSCAD Documentation\nDESCRIPTION: Demonstrates how to provide a short summary of a file's contents, which is used when summarizing the file in the Table of Contents.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/WRITING_DOCS.md#_snippet_6\n\nLANGUAGE: openscad\nCODE:\n```\n// FileSummary: Various modules to generate Foobar objects.\n```\n\n----------------------------------------\n\nTITLE: Defining a Generic Block Header with openscad_docsgen (plaintext)\nDESCRIPTION: Shows how to use the Generic documentation block header in openscad_docsgen configuration or annotation comments. The example defines a block header, multiple title/body pairs, and outlines how contents will render into Markdown. No special dependencies required aside from the docgen script. Titles and descriptions are supplied line by line, and references to code elements (e.g., {{stuff()}}) are automatically linked in output.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/WRITING_DOCS.md#_snippet_19\n\nLANGUAGE: plaintext\nCODE:\n```\n// DefineHeader(Generic): Result\n// Result: For Typical Cases\n//   Does typical things.\n//   Or something like that.\n//   Refer to {{stuff()}} for more info.\n// Result: For Atypical Cases\n//   Performs an atypical thing.\n```\n\n----------------------------------------\n\nTITLE: Generating Raw Scale Matrix Using scale (OpenSCAD-2D)\nDESCRIPTION: This code generates a raw scaling matrix with scale() and applies it to a square using multmatrix(). Takes a scale vector as input. BOSL2 and OpenSCAD are required. Outputs a scaled square; useful in compound transforms.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Paths.md#_snippet_47\n\nLANGUAGE: OpenSCAD-2D\nCODE:\n```\ninclude <BOSL2/std.scad>\nmat = scale([1.5,0.75,1]);\nmultmatrix(mat) square(50,center=true);\n```\n\n----------------------------------------\n\nTITLE: Spinning a 2D Square - BOSL2 - OpenSCAD 2D\nDESCRIPTION: This snippet demonstrates applying a `spin` of 30 degrees to a 2D BOSL2 `square`. For 2D shapes, `spin` rotates the object around the Z-axis (which is perpendicular to the 2D plane) at the origin.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Attachments.md#_snippet_23\n\nLANGUAGE: OpenSCAD-2D\nCODE:\n```\ninclude <BOSL2/std.scad>\nsquare([40,30], spin=30);\n```\n\n----------------------------------------\n\nTITLE: Creating Chamfered Cuboids in OpenSCAD with BOSL2\nDESCRIPTION: Demonstrates using the chamfer parameter with cuboid() to create cubes with chamfered edges.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/Shapes3d.md#_snippet_6\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\ncuboid([100,80,60], chamfer=10);\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <BOSL2/std.scad>\ncuboid([100,80,60], chamfer=10, edges=[TOP,FRONT], except_edges=TOP+FRONT);\n```\n\n----------------------------------------\n\nTITLE: Defining a VNF Cube with a Reversed Face for Debugging (BOSL2)\nDESCRIPTION: Creates a VNF cube similar to the earlier example, but intentionally reverses the vertex order for one of the top faces (`[6,4,5]` instead of `[6,5,4]`). This is done to demonstrate how reversed faces appear (typically purple) when using OpenSCAD's 'View -> Thrown Together' mode for debugging.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/tutorials/VNF.md#_snippet_6\n\nLANGUAGE: openscad\nCODE:\n```\ninclude <BOSL2/std.scad>\nvnf = [\n    [\n        [-1,-1,-1], [1,-1,-1], [1,1,-1], [-1,1,-1],\n        [-1,-1, 1], [1,-1, 1], [1,1, 1], [-1,1, 1],\n    ],\n    [\n        [0,1,2], [0,2,3],  //BOTTOM\n        [0,4,5], [0,5,1],  //FRONT\n        [1,5,6], [1,6,2],  //RIGHT\n        [2,6,7], [2,7,3],  //BACK\n        [3,7,4], [3,4,0],  //LEFT\n        [6,4,7], [6,4,5]   //TOP\n    ]\n];\nvnf_polyhedron(vnf);\n```\n\n----------------------------------------\n\nTITLE: Setting the Project Name in openscad_docsgen Config (plaintext)\nDESCRIPTION: Shows how to specify the project name in the documentation config file. The ProjectName key is used by openscad_docsgen to label generated docs. Place this in your configuration file; the value is the project name string.\nSOURCE: https://github.com/belfryscad/bosl2/blob/master/WRITING_DOCS.md#_snippet_28\n\nLANGUAGE: plaintext\nCODE:\n```\nProjectName: My Project Name\n```"
  }
]