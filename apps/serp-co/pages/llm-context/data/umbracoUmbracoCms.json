[
  {
    "owner": "umbraco",
    "repo": "umbraco-cms",
    "content": "TITLE: Implementing a TypeScript Lit Dashboard Component\nDESCRIPTION: TypeScript implementation of a custom dashboard component using Lit and the Umbraco Backoffice element API. This component includes notification context and event handling.\nSOURCE: https://github.com/umbraco/Umbraco-CMS/blob/contrib/src/Umbraco.Web.UI.Client/README.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// src/my-element.ts\nimport { LitElement, html, customElement } from '@umbraco-cms/backoffice/external/lit';\nimport { UmbElementMixin } from '@umbraco-cms/backoffice/element-api';\nimport { UmbNotificationContext, UMB_NOTIFICATION_CONTEXT } from '@umbraco-cms/backoffice/notification';\n\n@customElement('my-element')\nexport default class MyElement extends UmbElementMixin(LitElement) {\n\tprivate _notificationContext?: UmbNotificationContext;\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.consumeContext(UMB_NOTIFICATION_CONTEXT, (_instance) => {\n\t\t\tthis._notificationContext = _instance;\n\t\t});\n\t}\n\n\tonClick() {\n\t\tthis._notificationContext?.peek('positive', { data: { message: '#h5yr' } });\n\t}\n\n\toverride render() {\n\t\treturn html`\n\t\t\t<uui-box headline=\"Welcome\">\n\t\t\t\t<p>A TypeScript Lit Dashboard</p>\n\t\t\t\t<uui-button look=\"primary\" label=\"Click me\" @click=${() => this.onClick()}></uui-button>\n\t\t\t</uui-box>\n\t\t`;\n\t}\n}\n\ndeclare global {\n\tinterface HTMLElementTagNameMap {\n\t\t'my-element': MyElement;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Validation Message Structure in JSON\nDESCRIPTION: Shows the structure of a validation message object, containing type, path, and message properties. This example shows a client-side validation for a property that must contain at least 3 words.\nSOURCE: https://github.com/umbraco/Umbraco-CMS/blob/contrib/src/Umbraco.Web.UI.Client/src/packages/core/validation/README.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\ttype: \"client\",\n\tpath: \"$.values[?(@.alias == 'my-property-alias')].value\",\n\tmessage: \"Must contain at least 3 words\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Block Grid Sorter in JavaScript for Umbraco CMS\nDESCRIPTION: A comprehensive implementation of a drag-and-drop sorter for Umbraco's Block Grid interface. The code includes utility functions for position detection, element scrolling, and a complete sorter implementation with configuration options, drag event handling, and container management.\nSOURCE: https://github.com/umbraco/Umbraco-CMS/blob/contrib/src/Umbraco.Web.UI.Client/src/packages/core/sorter/sorter.angular.txt#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n(function () {\n\t'use strict';\n\n\tfunction isWithinRect(x, y, rect, modifier) {\n\t\treturn (\n\t\t\tx > rect.left - modifier && x < rect.right + modifier && y > rect.top - modifier && y < rect.bottom + modifier\n\t\t);\n\t}\n\n\tfunction getParentScrollElement(el, includeSelf) {\n\t\t// skip to window\n\t\tif (!el || !el.getBoundingClientRect) return null;\n\t\tvar elem = el;\n\t\tvar gotSelf = false;\n\n\t\twhile (elem) {\n\t\t\t// we don't need to get elem css if it isn't even overflowing in the first place (performance)\n\t\t\tif (elem.clientWidth < elem.scrollWidth || elem.clientHeight < elem.scrollHeight) {\n\t\t\t\tvar elemCSS = getComputedStyle(elem);\n\n\t\t\t\tif (\n\t\t\t\t\t(elem.clientHeight < elem.scrollHeight && (elemCSS.overflowY == 'auto' || elemCSS.overflowY == 'scroll')) ||\n\t\t\t\t\t(elem.clientWidth < elem.scrollWidth && (elemCSS.overflowX == 'auto' || elemCSS.overflowX == 'scroll'))\n\t\t\t\t) {\n\t\t\t\t\tif (!elem.getBoundingClientRect || elem === document.body) return null;\n\t\t\t\t\tif (gotSelf || includeSelf) return elem;\n\t\t\t\t\tgotSelf = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (elem.parentNode === document) {\n\t\t\t\treturn null;\n\t\t\t} else if (elem.parentNode instanceof DocumentFragment) {\n\t\t\t\telem = elem.parentNode.host;\n\t\t\t} else {\n\t\t\t\telem = elem.parentNode;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tconst DefaultConfig = {\n\t\tcompareElementToModel: (el, modelEntry) => modelEntry.contentUdi === el.dataset.elementUdi,\n\t\tquerySelectModelToElement: (container, modelEntry) =>\n\t\t\tcontainer.querySelector(`[data-element-udi='${modelEntry.contentUdi}']`),\n\t\tidentifier: 'UmbBlockGridSorter',\n\t\tcontainerSelector: 'ol', // To find container and to connect with others.\n\t\tignorerSelector: 'a, img, iframe',\n\t\titemSelector: 'li',\n\t\tplaceholderClass: 'umb-drag-placeholder',\n\t};\n\n\tfunction UmbBlockGridSorter() {\n\t\tfunction link(scope, element) {\n\t\t\tlet observer = new MutationObserver(function (mutations) {\n\t\t\t\tmutations.forEach(function (mutation) {\n\t\t\t\t\tmutation.addedNodes.forEach(function (addedNode) {\n\t\t\t\t\t\tif (addedNode.matches && addedNode.matches(scope.config.itemSelector)) {\n\t\t\t\t\t\t\tsetupItem(addedNode);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tmutation.removedNodes.forEach(function (removedNode) {\n\t\t\t\t\t\tif (removedNode.matches && removedNode.matches(scope.config.itemSelector)) {\n\t\t\t\t\t\t\tdestroyItem(removedNode);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tlet vm = {};\n\n\t\t\tconst config = { ...DefaultConfig, ...scope.config };\n\n\t\t\tvm.identifier = config.identifier;\n\t\t\tvm.ownerVM = config.ownerVM || null;\n\n\t\t\tlet scrollElement = null;\n\n\t\t\tlet containerEl = config.containerSelector ? element[0].closest(config.containerSelector) : element[0];\n\t\t\tif (!containerEl) {\n\t\t\t\tconsole.error('Could not initialize umb block grid sorter.', element[0]);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfunction init() {\n\t\t\t\tcontainerEl['umbBlockGridSorter:vm'] = () => {\n\t\t\t\t\treturn vm;\n\t\t\t\t};\n\t\t\t\tcontainerEl.addEventListener('dragover', preventDragOver);\n\n\t\t\t\tobserver.observe(containerEl, { childList: true, subtree: false });\n\t\t\t}\n\t\t\tinit();\n\n\t\t\tfunction preventDragOver(e) {\n\t\t\t\te.preventDefault();\n\t\t\t}\n\n\t\t\tfunction setupItem(element) {\n\t\t\t\tsetupIgnorerElements(element);\n\n\t\t\t\telement.draggable = true;\n\t\t\t\telement.addEventListener('dragstart', handleDragStart);\n\t\t\t}\n\n\t\t\tfunction destroyItem(element) {\n\t\t\t\tdestroyIgnorerElements(element);\n\n\t\t\t\telement.removeEventListener('dragstart', handleDragStart);\n\t\t\t}\n\n\t\t\tfunction setupIgnorerElements(element) {\n\t\t\t\tconfig.ignorerSelector.split(',').forEach(function (criteria) {\n\t\t\t\t\telement.querySelectorAll(criteria.trim()).forEach(setupPreventEvent);\n\t\t\t\t});\n\t\t\t}\n\t\t\tfunction destroyIgnorerElements(element) {\n\t\t\t\tconfig.ignorerSelector.split(',').forEach(function (criteria) {\n\t\t\t\t\telement.querySelectorAll(criteria.trim()).forEach(destroyPreventEvent);\n\t\t\t\t});\n\t\t\t}\n\t\t\tfunction setupPreventEvent(element) {\n\t\t\t\telement.draggable = false;\n\t\t\t}\n\t\t\tfunction destroyPreventEvent(element) {\n\t\t\t\telement.removeAttribute('draggable');\n\t\t\t}\n\n\t\t\tlet currentContainerElement = containerEl;\n\t\t\tlet currentContainerVM = vm;\n\n\t\t\tlet rqaId = null;\n\t\t\tlet currentItem = null;\n\t\t\tlet currentElement = null;\n\t\t\tlet currentDragElement = null;\n\t\t\tlet currentDragRect = null;\n\t\t\tlet dragX = 0;\n\t\t\tlet dragY = 0;\n\n\t\t\tfunction handleDragStart(event) {\n\t\t\t\tif (currentElement) {\n\t\t\t\t\thandleDragEnd();\n\t\t\t\t}\n\n\t\t\t\tevent.stopPropagation();\n\t\t\t\tevent.dataTransfer.effectAllowed = 'move'; // copyMove when we enhance the drag with clipboard data.\n\t\t\t\tevent.dataTransfer.dropEffect = 'none'; // visual feedback when dropped.\n\n\t\t\t\tif (!scrollElement) {\n\t\t\t\t\tscrollElement = getParentScrollElement(containerEl, true);\n\t\t\t\t}\n\n\t\t\t\tconst element = event.target.closest(config.itemSelector);\n\n\t\t\t\tcurrentElement = element;\n\t\t\t\tcurrentDragElement = config.draggableSelector\n\t\t\t\t\t? currentElement.querySelector(config.draggableSelector)\n\t\t\t\t\t: currentElement;\n\t\t\t\tcurrentDragRect = currentDragElement.getBoundingClientRect();\n\t\t\t\tcurrentItem = vm.getItemOfElement(currentElement);\n\t\t\t\tif (!currentItem) {\n\t\t\t\t\tconsole.error('Could not find item related to this element.');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tcurrentElement.style.transform = 'translateZ(0)'; // Solves problem with FireFox and ShadowDom in the drag-image.\n\n\t\t\t\tif (config.dataTransferResolver) {\n\t\t\t\t\tconfig.dataTransferResolver(event.dataTransfer, currentItem);\n\t\t\t\t}\n\n\t\t\t\tif (config.onStart) {\n\t\t\t\t\tconfig.onStart({ item: currentItem, element: currentElement });\n\t\t\t\t}\n\n\t\t\t\twindow.addEventListener('dragover', handleDragMove);\n\t\t\t\twindow.addEventListener('dragend', handleDragEnd);\n\n\t\t\t\t// We must wait one frame before changing the look of the block.\n\t\t\t\trqaId = requestAnimationFrame(() => {\n\t\t\t\t\t// It should be okay to use the same refId, as the move does not or is okay not to happen on first frame/drag-move.\n\t\t\t\t\trqaId = null;\n\t\t\t\t\tcurrentElement.style.transform = '';\n\t\t\t\t\tcurrentElement.classList.add(config.placeholderClass);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tfunction handleDragEnd() {\n\t\t\t\tif (!currentElement) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\twindow.removeEventListener('dragover', handleDragMove);\n\t\t\t\twindow.removeEventListener('dragend', handleDragEnd);\n\t\t\t\tcurrentElement.style.transform = '';\n\t\t\t\tcurrentElement.classList.remove(config.placeholderClass);\n\n\t\t\t\tstopAutoScroll();\n\t\t\t\tremoveAllowIndication();\n\n\t\t\t\tif (currentContainerVM.sync(currentElement, vm) === false) {\n\t\t\t\t\t// Sync could not succeed, might be because item is not allowed here.\n\n\t\t\t\t\tcurrentContainerVM = vm;\n\t\t\t\t\tif (config.onContainerChange) {\n\t\t\t\t\t\tconfig.onContainerChange({\n\t\t\t\t\t\t\titem: currentItem,\n\t\t\t\t\t\t\telement: currentElement,\n\t\t\t\t\t\t\townerVM: currentContainerVM.ownerVM,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\t// Lets move the Element back to where it came from:\n\t\t\t\t\tconst movingItemIndex = scope.model.indexOf(currentItem);\n\t\t\t\t\tif (movingItemIndex < scope.model.length - 1) {\n\t\t\t\t\t\tconst afterItem = scope.model[movingItemIndex + 1];\n\t\t\t\t\t\tconst afterEl = config.querySelectModelToElement(containerEl, afterItem);\n\t\t\t\t\t\tcontainerEl.insertBefore(currentElement, afterEl);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcontainerEl.appendChild(currentElement);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (config.onEnd) {\n\t\t\t\t\tconfig.onEnd({ item: currentItem, element: currentElement });\n\t\t\t\t}\n\n\t\t\t\tif (rqaId) {\n\t\t\t\t\tcancelAnimationFrame(rqaId);\n\t\t\t\t}\n\n\t\t\t\tcurrentContainerElement = containerEl;\n\t\t\t\tcurrentContainerVM = vm;\n\n\t\t\t\trqaId = null;\n\t\t\t\tcurrentItem = null;\n\t\t\t\tcurrentElement = null;\n\t\t\t\tcurrentDragElement = null;\n\t\t\t\tcurrentDragRect = null;\n\t\t\t\tdragX = 0;\n\t\t\t\tdragY = 0;\n\t\t\t}\n\n\t\t\tfunction handleDragMove(event) {\n\t\t\t\tif (!currentElement) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst clientX = (event.touches ? event.touches[0] : event).clientX;\n\t\t\t\tconst clientY = (event.touches ? event.touches[1] : event).clientY;\n\t\t\t\tif (clientX !== 0 && clientY !== 0) {\n\t\t\t\t\tif (dragX === clientX && dragY === clientY) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tdragX = clientX;\n\t\t\t\t\tdragY = clientY;\n\n\t\t\t\t\thandleAutoScroll(dragX, dragY);\n\n\t\t\t\t\tcurrentDragRect = currentDragElement.getBoundingClientRect();\n\t\t\t\t\tconst insideCurrentRect = isWithinRect(dragX, dragY, currentDragRect, 0);\n\t\t\t\t\tif (!insideCurrentRect) {\n\t\t\t\t\t\tif (rqaId === null) {\n\t\t\t\t\t\t\trqaId = requestAnimationFrame(moveCurrentElement);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction moveCurrentElement() {\n\t\t\t\trqaId = null;\n\t\t\t\tif (!currentElement) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst currentElementRect = currentElement.getBoundingClientRect();\n\t\t\t\tconst insideCurrentRect = isWithinRect(dragX, dragY, currentElementRect);\n\t\t\t\tif (insideCurrentRect) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// If we have a boundarySelector, try it, if we didn't get anything fall back to currentContainerElement.\n\t\t\t\tvar currentBoundaryElement =\n\t\t\t\t\t(config.boundarySelector\n\t\t\t\t\t\t? currentContainerElement.closest(config.boundarySelector)\n\t\t\t\t\t\t: currentContainerElement) || currentContainerElement;\n\n\t\t\t\tvar currentBoundaryRect = currentBoundaryElement.getBoundingClientRect();\n\n\t\t\t\tconst currentContainerHasItems = currentContainerVM.hasOtherItemsThan(currentItem);\n\n\t\t\t\t// if empty we will be move likely to accept an item (add 20px to the bounding box)\n\t\t\t\t// If we have items we must be 10 within the container to accept the move.\n\t\t\t\tconst offsetEdge = currentContainerHasItems ? -10 : 20;\n\t\t\t\tif (!isWithinRect(dragX, dragY, currentBoundaryRect, offsetEdge)) {\n\t\t\t\t\t// we are outside the current container boundary, so lets see if there is a parent we can move.\n\t\t\t\t\tvar parentContainer = currentContainerElement.parentNode.closest(config.containerSelector);\n\t\t\t\t\tif (parentContainer) {\n\t\t\t\t\t\tconst parentContainerVM = parentContainer['umbBlockGridSorter:vm']();\n\t\t\t\t\t\tif (parentContainerVM.identifier === vm.identifier) {\n\t\t\t\t\t\t\tcurrentContainerElement = parentContainer;\n\t\t\t\t\t\t\tcurrentContainerVM = parentContainerVM;\n\t\t\t\t\t\t\tif (config.onContainerChange) {\n\t\t\t\t\t\t\t\tconfig.onContainerChange({\n\t\t\t\t\t\t\t\t\titem: currentItem,\n\t\t\t\t\t\t\t\t\telement: currentElement,\n\t\t\t\t\t\t\t\t\townerVM: currentContainerVM.ownerVM,\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// We want to retrieve the children of the container, every time to ensure we got the right order and index\n```\n\n----------------------------------------\n\nTITLE: Implementing a Vanilla JavaScript Dashboard Component\nDESCRIPTION: JavaScript implementation of a custom dashboard component using the Umbraco Backoffice element API. This component includes a notification system and event handling.\nSOURCE: https://github.com/umbraco/Umbraco-CMS/blob/contrib/src/Umbraco.Web.UI.Client/README.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { UmbElementMixin } from '@umbraco-cms/backoffice/element-api';\nimport { UMB_NOTIFICATION_CONTEXT } from '@umbraco-cms/backoffice/notification';\n\nconst template = document.createElement('template');\ntemplate.innerHTML = `\n  <style>\n    :host {\n      padding: 20px;\n      display: block;\n      box-sizing: border-box;\n    }\n  </style>\n\n  <uui-box>\n    <h1>Welcome to my dashboard</h1>\n    <p>Example of vanilla JS code</p>\n\n    <uui-button label=\"Click me\" id=\"clickMe\" look=\"secondary\"></uui-button>\n  </uui-box>\n`;\n\nexport default class MyDashboardElement extends UmbElementMixin(HTMLElement) {\n\t/** @type {import('@umbraco-cms/backoffice/notification').UmbNotificationContext} */\n\t#notificationContext;\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.attachShadow({ mode: 'open' });\n\t\tthis.shadowRoot.appendChild(template.content.cloneNode(true));\n\n\t\tthis.shadowRoot.getElementById('clickMe').addEventListener('click', this.onClick.bind(this));\n\n\t\tthis.consumeContext(UMB_NOTIFICATION_CONTEXT, (_instance) => {\n\t\t\tthis.#notificationContext = _instance;\n\t\t});\n\t}\n\n\tonClick = () => {\n\t\tthis.#notificationContext?.peek('positive', { data: { headline: 'Hello' } });\n\t};\n}\n\ncustomElements.define('my-custom-dashboard', MyDashboardElement);\n```\n\n----------------------------------------\n\nTITLE: Consuming UmbNotificationContext in a LitElement\nDESCRIPTION: Demonstrates how to consume the UmbNotification context within a LitElement component to enable showing notifications. This is the first step for using notifications in your elements.\nSOURCE: https://github.com/umbraco/Umbraco-CMS/blob/contrib/src/Umbraco.Web.UI.Client/src/packages/core/notification/stories/notification.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { html, LitElement } from '@umbraco-cms/backoffice/external/lit';\nimport { UmbLitElement } from '@umbraco-cms/element';\nimport type { UmbNotificationContext, UMB_NOTIFICATION_CONTEXT_ALIAS } from '@umbraco-cms/notification';\n\nclass MyElement extends UmbLitElement {\n\tprivate _notificationContext?: UmbNotificationContext;\n\n\tconstructor() {\n\t\tsuper();\n\n\t\tthis.consumeContext(UMB_NOTIFICATION_CONTEXT_ALIAS, (instance) => {\n\t\t\tthis._notificationContext = notificationContext;\n\t\t\t// notificationContext is now ready to be used\n\t\t});\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Manifest for Umbraco Integration\nDESCRIPTION: JSON configuration file (umbraco-package.json) that defines package metadata and extensions for the Umbraco Backoffice. This example configures a custom dashboard with section conditions.\nSOURCE: https://github.com/umbraco/Umbraco-CMS/blob/contrib/src/Umbraco.Web.UI.Client/README.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"name\": \"My.Package\",\n\t\"version\": \"0.1.0\",\n\t\"extensions\": [\n\t\t{\n\t\t\t\"type\": \"dashboard\",\n\t\t\t\"alias\": \"my.custom.dashboard\",\n\t\t\t\"name\": \"My Dashboard\",\n\t\t\t\"js\": \"/App_Plugins/MyPackage/dashboard.js\",\n\t\t\t\"weight\": -1,\n\t\t\t\"meta\": {\n\t\t\t\t\"label\": \"My Dashboard\",\n\t\t\t\t\"pathname\": \"my-dashboard\"\n\t\t\t},\n\t\t\t\"conditions\": [\n\t\t\t\t{\n\t\t\t\t\t\"alias\": \"Umb.Condition.SectionAlias\",\n\t\t\t\t\t\"match\": \"Umb.Section.Content\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Using UmbElementMixin for Localization\nDESCRIPTION: Example of using the UmbElementMixin in a custom element to access localization functionality.\nSOURCE: https://github.com/umbraco/Umbraco-CMS/blob/contrib/src/Umbraco.Web.UI.Client/src/packages/core/localization/stories/localization.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport class MyElement extends UmbElementMixin(LitElement) {\n\toverride render() {\n\t\treturn html` <uui-button .label=${this.localize.term('general_close')}></uui-button> `;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing a Server Validation Binder in JavaScript\nDESCRIPTION: Demonstrates how to create a server validation binder that connects a form control element to validation messages. This code snippet initializes the binder with a form control and a JsonPath that identifies where the data should be in the submitted model.\nSOURCE: https://github.com/umbraco/Umbraco-CMS/blob/contrib/src/Umbraco.Web.UI.Client/src/packages/core/validation/README.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n\tthis.#validationMessageBinder = new UmbBindServerValidationToFormControl(\n\t\tthis,\n\t\tthis.querySelector('#myInput\"),\n\t\t\"$.values.[?(@.alias == 'my-input-alias')].value\",\n\t);\n```\n\n----------------------------------------\n\nTITLE: Updating Validation Binder Value in JavaScript\nDESCRIPTION: Shows how to keep a validation binder updated with the current value of the form control. This example uses an observer pattern to track changes to the value in the data model and update the binder accordingly.\nSOURCE: https://github.com/umbraco/Umbraco-CMS/blob/contrib/src/Umbraco.Web.UI.Client/src/packages/core/validation/README.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n\tthis.observe(\n\t\tthis.#value,\n\t\t(value) => {\n\t\t\tthis.#validationMessageBinder.value = value;\n\t\t},\n\t);\n```\n\n----------------------------------------\n\nTITLE: Implementing Flexbox Grid Layout for Umbraco CMS in CSS\nDESCRIPTION: This CSS snippet defines styles for a flexible grid layout using Flexbox. It includes classes for layout containers, items, areas, and actions. The layout uses CSS variables for customizable gaps and column spans.\nSOURCE: https://github.com/umbraco/Umbraco-CMS/blob/contrib/src/Umbraco.Web.UI.Client/src/css/umbraco-blockgridlayout-flexbox_css.txt#2025-04-16_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n.umb-block-grid__layout-container {\n    position: relative;\n    display: flex;\n    flex-wrap: wrap;\n    gap: var(--umb-block-grid--row-gap, 0) var(--umb-block-grid--column-gap, 0);\n}\n.umb-block-grid__layout-item {\n    position: relative;\n    --umb-block-grid__layout-item-calc: calc(var(--umb-block-grid--item-column-span) / var(--umb-block-grid--grid-columns));\n    width: calc(var(--umb-block-grid__layout-item-calc) * 100% - (1 - var(--umb-block-grid__layout-item-calc)) * var(--umb-block-grid--column-gap, 0px));\n}\n\n\n.umb-block-grid__area-container, .umb-block-grid__block--view::part(area-container) {\n    position: relative;\n    display: flex;\n    flex-wrap: wrap;\n    width: 100%;\n    gap: var(--umb-block-grid--areas-row-gap, 0) var(--umb-block-grid--areas-column-gap, 0);\n}\n.umb-block-grid__area {\n    position: relative;\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    --umb-block-grid__area-calc: calc(var(--umb-block-grid--area-column-span) / var(--umb-block-grid--area-grid-columns, 1));\n    width: calc(var(--umb-block-grid__area-calc) * 100% - (1 - var(--umb-block-grid__area-calc)) * var(--umb-block-grid--areas-column-gap, 0px));\n}\n\n\n.umb-block-grid__actions {\n    clear: both;\n}\n```\n\n----------------------------------------\n\nTITLE: Detecting and Handling Elements in Same Row When Dragging in JavaScript\nDESCRIPTION: This snippet identifies elements positioned in the same row as the dragged item, calculates distances, and determines where to place the dragged element. It handles nested containers and checks if insertion is allowed based on configuration rules.\nSOURCE: https://github.com/umbraco/Umbraco-CMS/blob/contrib/src/Umbraco.Web.UI.Client/src/packages/core/sorter/sorter.angular.txt#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst orderedContainerElements = Array.from(currentContainerElement.children);\n\nvar currentContainerRect = currentContainerElement.getBoundingClientRect();\n\n// gather elements on the same row.\nlet elementsInSameRow = [];\nlet placeholderIsInThisRow = false;\nfor (const el of orderedContainerElements) {\n\tconst elRect = el.getBoundingClientRect();\n\t// gather elements on the same row.\n\tif (dragY >= elRect.top && dragY <= elRect.bottom) {\n\t\tconst dragElement = config.draggableSelector ? el.querySelector(config.draggableSelector) : el;\n\t\tconst dragElementRect = dragElement.getBoundingClientRect();\n\t\tif (el !== currentElement) {\n\t\t\telementsInSameRow.push({ el: el, dragRect: dragElementRect });\n\t\t} else {\n\t\t\tplaceholderIsInThisRow = true;\n\t\t}\n\t}\n}\n\nlet lastDistance = 99999;\nlet foundEl = null;\nlet foundElDragRect = null;\nlet placeAfter = false;\nelementsInSameRow.forEach((sameRow) => {\n\tconst centerX = sameRow.dragRect.left + sameRow.dragRect.width * 0.5;\n\tlet distance = Math.abs(dragX - centerX);\n\tif (distance < lastDistance) {\n\t\tfoundEl = sameRow.el;\n\t\tfoundElDragRect = sameRow.dragRect;\n\t\tlastDistance = Math.abs(distance);\n\t\tplaceAfter = dragX > centerX;\n\t}\n});\n\n// If we are on top or closest to our self, we should not do anything.\nif (foundEl === currentElement) {\n\treturn;\n}\n\nif (foundEl) {\n\tconst isInsideFound = isWithinRect(dragX, dragY, foundElDragRect, 0);\n\n\t// If we are inside the found element, lets look for sub containers.\n\t// use the itemHasNestedContainersResolver, if not configured fallback to looking for the existence of a container via DOM.\n\tif (\n\t\tisInsideFound && config.itemHasNestedContainersResolver\n\t\t\t? config.itemHasNestedContainersResolver(foundEl)\n\t\t\t: foundEl.querySelector(config.containerSelector)\n\t) {\n\t\t// Find all sub containers:\n\t\tconst subLayouts = foundEl.querySelectorAll(config.containerSelector);\n\t\tfor (const subLayoutEl of subLayouts) {\n\t\t\t// Use boundary element or fallback to container element.\n\t\t\tvar subBoundaryElement =\n\t\t\t\t(config.boundarySelector ? subLayoutEl.closest(config.boundarySelector) : subLayoutEl) || subLayoutEl;\n\t\t\tvar subBoundaryRect = subBoundaryElement.getBoundingClientRect();\n\n\t\t\tconst subContainerHasItems = subLayoutEl.querySelector(\n\t\t\t\tconfig.itemSelector + ':not(.' + config.placeholderClass + ')'\n\t\t\t);\n\t\t\t// gather elements on the same row.\n\t\t\tconst subOffsetEdge = subContainerHasItems ? -10 : 20;\n\t\t\tif (isWithinRect(dragX, dragY, subBoundaryRect, subOffsetEdge)) {\n\t\t\t\tvar subVm = subLayoutEl['umbBlockGridSorter:vm']();\n\t\t\t\tif (subVm.identifier === vm.identifier) {\n\t\t\t\t\tcurrentContainerElement = subLayoutEl;\n\t\t\t\t\tcurrentContainerVM = subVm;\n\t\t\t\t\tif (config.onContainerChange) {\n\t\t\t\t\t\tconfig.onContainerChange({\n\t\t\t\t\t\t\titem: currentItem,\n\t\t\t\t\t\t\telement: currentElement,\n\t\t\t\t\t\t\townerVM: currentContainerVM.ownerVM,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\tmoveCurrentElement();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Indication if drop is good:\n\tif (updateAllowIndication(currentContainerVM, currentItem) === false) {\n\t\treturn;\n\t}\n\n\tlet verticalDirection = scope.config.resolveVerticalDirection\n\t\t? scope.config.resolveVerticalDirection({\n\t\t\t\tcontainerElement: currentContainerElement,\n\t\t\t\tcontainerRect: currentContainerRect,\n\t\t\t\titem: currentItem,\n\t\t\t\telement: currentElement,\n\t\t\t\telementRect: currentElementRect,\n\t\t\t\trelatedElement: foundEl,\n\t\t\t\trelatedRect: foundElDragRect,\n\t\t\t\tplaceholderIsInThisRow: placeholderIsInThisRow,\n\t\t\t\thorizontalPlaceAfter: placeAfter,\n\t\t  })\n\t\t: true;\n\n\tif (verticalDirection) {\n\t\tplaceAfter = dragY > foundElDragRect.top + foundElDragRect.height * 0.5;\n\t}\n\n\tif (verticalDirection) {\n\t\tlet el;\n\t\tif (placeAfter === false) {\n\t\t\tlet lastLeft = foundElDragRect.left;\n\t\t\telementsInSameRow.findIndex((x) => {\n\t\t\t\tif (x.dragRect.left < lastLeft) {\n\t\t\t\t\tlastLeft = x.dragRect.left;\n\t\t\t\t\tel = x.el;\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tlet lastRight = foundElDragRect.right;\n\t\t\telementsInSameRow.findIndex((x) => {\n\t\t\t\tif (x.dragRect.right > lastRight) {\n\t\t\t\t\tlastRight = x.dragRect.right;\n\t\t\t\t\tel = x.el;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tif (el) {\n\t\t\tfoundEl = el;\n\t\t}\n\t}\n\n\tconst foundElIndex = orderedContainerElements.indexOf(foundEl);\n\tconst placeAt = placeAfter ? foundElIndex + 1 : foundElIndex;\n\n\tmove(orderedContainerElements, placeAt);\n\n\treturn;\n}\n// We skipped the above part cause we are above or below container:\n\n// Indication if drop is good:\nif (updateAllowIndication(currentContainerVM, currentItem) === false) {\n\treturn;\n}\n\nif (dragY < currentContainerRect.top) {\n\tmove(orderedContainerElements, 0);\n} else if (dragY > currentContainerRect.bottom) {\n\tmove(orderedContainerElements, -1);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Notification Layout Element\nDESCRIPTION: Demonstrates how to create a custom notification layout component that can be used for more complex notification scenarios. This custom layout includes user information and a confirmation button.\nSOURCE: https://github.com/umbraco/Umbraco-CMS/blob/contrib/src/Umbraco.Web.UI.Client/src/packages/core/notification/stories/notification.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { html, LitElement } from '@umbraco-cms/backoffice/external/lit';\nimport { property } from '@umbraco-cms/backoffice/external/lit';\nimport { UmbTextStyles } from '@umbraco-cms/backoffice/style';\nimport type { UmbNotificationHandler } from '@umbraco-cms/notification';\n\nexport interface UmbNotificationCustomData {\n\theadline: string;\n\tuser: {\n\t\tname: string;\n\t};\n}\n\nexport class UmbNotificationLayoutCustom extends LitElement {\n\tstatic styles = [UmbTextStyles];\n\n\t@property({ attribute: false })\n\tpublic notificationHandler: UmbNotificationHandler;\n\n\t@property({ type: Object })\n\tpublic data: UmbNotificationCustomData;\n\n\tprivate _handleConfirm() {\n\t\tthis.notificationHandler.close(true);\n\t}\n\n\toverride render() {\n\t\treturn html`\n\t\t\t<uui-toast-notification-layout headline=\"${this.data.headline}\" class=\"uui-text\">\n\t\t\t\t${this.data.user.name}\n\t\t\t\t<uui-button slot=\"actions\" @click=\"${this._handleConfirm}\" label=\"Confirm\">Confirm</uui-button>\n\t\t\t</uui-toast-notification-layout>\n\t\t`;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Language File Structure in JavaScript\nDESCRIPTION: Example of a language file structure showing basic key-value translations and function-based translations for handling pluralization.\nSOURCE: https://github.com/umbraco/Umbraco-CMS/blob/contrib/src/Umbraco.Web.UI.Client/src/packages/core/localization/stories/localization.mdx#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n\tsection: {\n\t\tkey1: 'value1',\n\t\tkey2: (count) => {\n\t\t\tcount = parseInt(count, 10);\n\t\t\tif (count === 0) return 'Nothing';\n\t\t\tif (count === 1) return 'One thing';\n\t\t\treturn 'Many things';\n\t\t},\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Icons in Umbraco CMS using JavaScript\nDESCRIPTION: This snippet demonstrates how to create and export custom icons as SVG strings in JavaScript for use in Umbraco CMS. The icons are declared as part of an Icon Dictionary in a JavaScript file.\nSOURCE: https://github.com/umbraco/Umbraco-CMS/blob/contrib/src/Umbraco.Web.UI.Client/examples/icons/README.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// No specific code snippet provided in the input text\n```\n\n----------------------------------------\n\nTITLE: Implementing Notification Callbacks in Angular Directive\nDESCRIPTION: Defines notification methods for syncing, allowed/disallowed states, and drop requests within the directive's view model. Each method checks for and executes corresponding callback functions from the configuration.\nSOURCE: https://github.com/umbraco/Umbraco-CMS/blob/contrib/src/Umbraco.Web.UI.Client/src/packages/core/sorter/sorter.angular.txt#2025-04-16_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nvm.notifySync = function (data) {\n    if (config.onSync) {\n        config.onSync(data);\n    }\n};\nvm.notifyDisallowed = function () {\n    if (config.onDisallowed) {\n        config.onDisallowed();\n    }\n};\nvm.notifyAllowed = function () {\n    if (config.onAllowed) {\n        config.onAllowed();\n    }\n};\nvm.notifyRequestDrop = function (data) {\n    if (config.onRequestDrop) {\n        return config.onRequestDrop(data);\n    }\n    return true;\n};\n```\n\n----------------------------------------\n\nTITLE: Simple JsonPath Targeting for Validation\nDESCRIPTION: Demonstrates how to use a JsonPath expression to target a specific property in a nested object structure. This example shows how to target the title property within the settings object.\nSOURCE: https://github.com/umbraco/Umbraco-CMS/blob/contrib/src/Umbraco.Web.UI.Client/src/packages/core/validation/README.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"$.settings.title\"\n```\n\n----------------------------------------\n\nTITLE: JsonPath Query for Array Element Targeting\nDESCRIPTION: Demonstrates how to use a JsonPath query to target a specific element in an array based on a property value rather than an index. This example targets the value property of an array element where the alias equals 'my-alias'.\nSOURCE: https://github.com/umbraco/Umbraco-CMS/blob/contrib/src/Umbraco.Web.UI.Client/src/packages/core/validation/README.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"$.values.[?(@.alias == 'my-alias')].value\"\n```\n\n----------------------------------------\n\nTITLE: Implementing DOM Element Moving and Container Synchronization in JavaScript\nDESCRIPTION: This code handles the repositioning of DOM elements during drag operations and synchronizes item data between different containers. It includes methods for element movement, item retrieval, removal, and checking container contents.\nSOURCE: https://github.com/umbraco/Umbraco-CMS/blob/contrib/src/Umbraco.Web.UI.Client/src/packages/core/sorter/sorter.angular.txt#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction move(orderedContainerElements, newElIndex) {\n\tnewElIndex = newElIndex === -1 ? orderedContainerElements.length : newElIndex;\n\n\tconst placeBeforeElement = orderedContainerElements[newElIndex];\n\tif (placeBeforeElement) {\n\t\t// We do not need to move this, if the element to be placed before is it self.\n\t\tif (placeBeforeElement !== currentElement) {\n\t\t\tcurrentContainerElement.insertBefore(currentElement, placeBeforeElement);\n\t\t}\n\t} else {\n\t\tcurrentContainerElement.appendChild(currentElement);\n\t}\n\n\tif (config.onChange) {\n\t\tconfig.onChange({ element: currentElement, item: currentItem, ownerVM: currentContainerVM.ownerVM });\n\t}\n}\n\n/** Removes an element from container and returns its items-data entry */\nvm.getItemOfElement = function (element) {\n\tif (!element) {\n\t\treturn null;\n\t}\n\treturn scope.model.find((entry) => config.compareElementToModel(element, entry));\n};\nvm.removeItem = function (item) {\n\tif (!item) {\n\t\treturn null;\n\t}\n\tconst oldIndex = scope.model.indexOf(item);\n\tif (oldIndex !== -1) {\n\t\treturn scope.model.splice(oldIndex, 1)[0];\n\t}\n\treturn null;\n};\n\nvm.hasOtherItemsThan = function (item) {\n\treturn scope.model.filter((x) => x !== item).length > 0;\n};\n\nvm.sync = function (element, fromVm) {\n\tconst movingItem = fromVm.getItemOfElement(element);\n\tif (!movingItem) {\n\t\tconsole.error('Could not find item of sync item');\n\t\treturn false;\n\t}\n\tif (vm.notifyRequestDrop({ item: movingItem }) === false) {\n\t\treturn false;\n\t}\n\tif (fromVm.removeItem(movingItem) === null) {\n\t\tconsole.error('Sync could not remove item');\n\t\treturn false;\n\t}\n\n\t/** Find next element, to then find the index of that element in items-data, to use as a safe reference to where the item will go in our items-data.\n\t * This enables the container to contain various other elements and as well having these elements change while sorting is occurring.\n\t */\n\n\t// find next valid element (This assumes the next element in DOM is presented in items-data, aka. only moving one item between each sync)\n\tlet nextEl;\n\tlet loopEl = element;\n\twhile ((loopEl = loopEl.nextElementSibling)) {\n\t\tif (loopEl.matches && loopEl.matches(config.itemSelector)) {\n\t\t\tnextEl = loopEl;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tlet newIndex = scope.model.length;\n\tif (nextEl) {\n\t\t// We had a reference element, we want to get the index of it.\n\t\t// This is problem if a item is being moved forward?\n\t\tnewIndex = scope.model.findIndex((entry) => config.compareElementToModel(nextEl, entry));\n\t}\n\n\tscope.model.splice(newIndex, 0, movingItem);\n\n\tconst eventData = { item: movingItem, fromController: fromVm, toController: vm };\n\tif (fromVm !== vm) {\n\t\tfromVm.notifySync(eventData);\n\t}\n\tvm.notifySync(eventData);\n\n\treturn true;\n};\n```\n\n----------------------------------------\n\nTITLE: Using umb-debug Component as Button in Umbraco-CMS\nDESCRIPTION: This snippet shows how to add the umb-debug component as a button to the UI. When clicked, it displays information about available contexts in a slide-down panel directly where the element is placed.\nSOURCE: https://github.com/umbraco/Umbraco-CMS/blob/contrib/src/Umbraco.Web.UI.Client/src/packages/core/debug/stories/debug.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// This will add a Debug button to the UI and once clicked the information about avilable contextes will slide down\n<umb-debug visible></umb-debug>\n```\n\n----------------------------------------\n\nTITLE: Installing Umbraco Backoffice Package\nDESCRIPTION: Command to install the @umbraco-cms/backoffice package as a development dependency using npm.\nSOURCE: https://github.com/umbraco/Umbraco-CMS/blob/contrib/src/Umbraco.Web.UI.Client/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D @umbraco-cms/backoffice\n```\n\n----------------------------------------\n\nTITLE: Complex Data Structure with Arrays for Validation\nDESCRIPTION: Shows a more complex data structure containing an array of objects, where each object has an alias and value property. This structure requires more advanced JsonPath queries for validation.\nSOURCE: https://github.com/umbraco/Umbraco-CMS/blob/contrib/src/Umbraco.Web.UI.Client/src/packages/core/validation/README.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n\tvalues: [\n\t\t{\n\t\t\talias: 'my-alias',\n\t\t\tvalue: 'my-value'\n\t\t}\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Allow/Disallow Visual Feedback and Auto-Scrolling in JavaScript\nDESCRIPTION: This code handles visual feedback for allowed/disallowed drop targets and implements auto-scrolling functionality during drag operations. It tracks the current container context and manages scroll behavior based on cursor position.\nSOURCE: https://github.com/umbraco/Umbraco-CMS/blob/contrib/src/Umbraco.Web.UI.Client/src/packages/core/sorter/sorter.angular.txt#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar _lastIndicationContainerVM = null;\nfunction updateAllowIndication(contextVM, item) {\n\t// Remove old indication:\n\tif (_lastIndicationContainerVM !== null && _lastIndicationContainerVM !== contextVM) {\n\t\t_lastIndicationContainerVM.notifyAllowed();\n\t}\n\t_lastIndicationContainerVM = contextVM;\n\n\tif (contextVM.notifyRequestDrop({ item: item }) === true) {\n\t\tcontextVM.notifyAllowed();\n\t\treturn true;\n\t}\n\n\tcontextVM.notifyDisallowed(); // This block is not accepted to we will indicate that its not allowed.\n\treturn false;\n}\nfunction removeAllowIndication() {\n\t// Remove old indication:\n\tif (_lastIndicationContainerVM !== null) {\n\t\t_lastIndicationContainerVM.notifyAllowed();\n\t}\n\t_lastIndicationContainerVM = null;\n}\n\nlet autoScrollRAF;\nlet autoScrollEl;\nconst autoScrollSensitivity = 50;\nconst autoScrollSpeed = 16;\nlet autoScrollX = 0;\nlet autoScrollY = 0;\n\nfunction handleAutoScroll(clientX, clientY) {\n\tlet scrollRect = null;\n\tif (scrollElement) {\n\t\tautoScrollEl = scrollElement;\n\t\tscrollRect = scrollElement.getBoundingClientRect();\n\t} else {\n\t\tautoScrollEl = document.scrollingElement || document.documentElement;\n\t\tscrollRect = {\n\t\t\ttop: 0,\n\t\t\tleft: 0,\n\t\t\tbottom: window.innerHeight,\n\t\t\tright: window.innerWidth,\n\t\t\theight: window.innerHeight,\n\t\t\twidth: window.innerWidth,\n\t\t};\n\t}\n\n\tconst scrollWidth = autoScrollEl.scrollWidth;\n\tconst scrollHeight = autoScrollEl.scrollHeight;\n\tconst canScrollX = scrollRect.width < scrollWidth;\n\tconst canScrollY = scrollRect.height < scrollHeight;\n\tconst scrollPosX = autoScrollEl.scrollLeft;\n\tconst scrollPosY = autoScrollEl.scrollTop;\n\n\tcancelAnimationFrame(autoScrollRAF);\n\n\tif (canScrollX || canScrollY) {\n\t\tautoScrollX =\n\t\t\t(Math.abs(scrollRect.right - clientX) <= autoScrollSensitivity &&\n\t\t\t\tscrollPosX + scrollRect.width < scrollWidth) -\n```\n\n----------------------------------------\n\nTITLE: Registering Language Package in Umbraco\nDESCRIPTION: Example of registering a new language through the umbraco-package.json manifest file, specifying culture and file path for translations.\nSOURCE: https://github.com/umbraco/Umbraco-CMS/blob/contrib/src/Umbraco.Web.UI.Client/src/packages/core/localization/stories/localization.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"name\": \"MyPackage\",\n\t\"extensions\": [\n\t\t{\n\t\t\t\"type\": \"localization\",\n\t\t\t\"alias\": \"MyPackage.Lang.EnUS\",\n\t\t\t\"name\": \"English (United States)\",\n\t\t\t\"meta\": {\n\t\t\t\t\"culture\": \"en-us\"\n\t\t\t},\n\t\t\t\"js\": \"/App_Plugins/MyPackage/lang/en-us.js\"\n\t\t}\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Lit Package Manifest\nDESCRIPTION: JSON configuration for the TypeScript Lit implementation, defining package metadata and extension settings for the Umbraco Backoffice integration.\nSOURCE: https://github.com/umbraco/Umbraco-CMS/blob/contrib/src/Umbraco.Web.UI.Client/README.md#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"name\": \"My.Package\",\n\t\"version\": \"0.1.0\",\n\t\"extensions\": [\n\t\t{\n\t\t\t\"type\": \"dashboard\",\n\t\t\t\"alias\": \"my.custom.dashboard\",\n\t\t\t\"name\": \"My Dashboard\",\n\t\t\t\"js\": \"/App_Plugins/MyPackage/dist/my-package.js\",\n\t\t\t\"weight\": -1,\n\t\t\t\"meta\": {\n\t\t\t\t\"label\": \"My Dashboard\",\n\t\t\t\t\"pathname\": \"my-dashboard\"\n\t\t\t},\n\t\t\t\"conditions\": [\n\t\t\t\t{\n\t\t\t\t\t\"alias\": \"Umb.Condition.SectionAlias\",\n\t\t\t\t\t\"match\": \"Umb.Section.Content\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Opening a Notification with UmbNotificationContext\nDESCRIPTION: Shows how to open a notification using the UmbNotificationContext and handle its closing event. This example creates a peek notification that disappears automatically and uses the default notification layout.\nSOURCE: https://github.com/umbraco/Umbraco-CMS/blob/contrib/src/Umbraco.Web.UI.Client/src/packages/core/notification/stories/notification.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { html, LitElement } from '@umbraco-cms/backoffice/external/lit';\nimport { state } from '@umbraco-cms/backoffice/external/lit';\nimport { UmbLitElement } from '@umbraco-cms/element';\nimport type {\n\tUmbNotificationContext,\n\tUmbNotificationDefaultData,\n\tUMB_NOTIFICATION_CONTEXT_ALIAS,\n} from '@umbraco-cms/notification';\n\nclass MyElement extends UmbLitElement {\n\tprivate _notificationContext?: UmbNotificationContext;\n\n\tconstructor() {\n\t\tsuper();\n\n\t\tthis.consumeContext(UMB_NOTIFICATION_CONTEXT_ALIAS, (notificationContext) => {\n\t\t\tthis._notificationContext = notificationContext;\n\t\t\t// notificationContext is now ready to be used\n\t\t});\n\t}\n\n\tprivate _handleClick() {\n\t\tconst data: UmbNotificationDefaultData = { headline: 'Look at this', message: 'Something good happened' };\n\t\tconst notificationHandler = this._notificationContext?.peek('positive', { data });\n\n\t\tnotificationHandler.onClose().then(() => {\n\t\t\t// if you need any logic when the notification is closed you can run it here\n\t\t});\n\t}\n\n\toverride render() {\n\t\treturn html`<button @click=\"${this._handleClick}\">Open Notification</button>`;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Using umb-debug Component with Dialog Mode in Umbraco-CMS\nDESCRIPTION: This snippet demonstrates how to use the umb-debug component in dialog mode, which displays a small badge in the UI and opens debug information in a modal on the right side. This is useful when UI space is limited.\nSOURCE: https://github.com/umbraco/Umbraco-CMS/blob/contrib/src/Umbraco.Web.UI.Client/src/packages/core/debug/stories/debug.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// This will open the debug information in a small dialog/modal from the right hand side\n<umb-debug visible dialog></umb-debug>\n```\n\n----------------------------------------\n\nTITLE: Using UmbLocalizeController Directly\nDESCRIPTION: Example of using the UmbLocalizeController as a reactive controller in a custom element without UmbElementMixin.\nSOURCE: https://github.com/umbraco/Umbraco-CMS/blob/contrib/src/Umbraco.Web.UI.Client/src/packages/core/localization/stories/localization.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UmbLocalizeController } from '@umbraco-cms/backoffice/localization-api';\n\nexport class MyElement extends LitElement {\n\t// Create a new instance of the controller and attach it to the element\n\tprivate localize = new UmbLocalizeController(this);\n\n\toverride render() {\n\t\treturn html` <uui-button .label=${this.localize.localize('general_close')}></uui-button> `;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Angular Directive Configuration\nDESCRIPTION: Specifies the directive configuration including restrictions, scope bindings, and link function. Sets up two-way binding for config and model properties.\nSOURCE: https://github.com/umbraco/Umbraco-CMS/blob/contrib/src/Umbraco.Web.UI.Client/src/packages/core/sorter/sorter.angular.txt#2025-04-16_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar directive = {\n    restrict: 'A',\n    scope: {\n        config: '=umbBlockGridSorter',\n        model: '=umbBlockGridSorterModel',\n    },\n    link: link,\n};\n```\n\n----------------------------------------\n\nTITLE: Query-Based JsonPath for Flexible Validation\nDESCRIPTION: Shows the translation of an index-based JsonPath to a query-based JsonPath that targets an array element by a property value, making it resilient to changes in array ordering.\nSOURCE: https://github.com/umbraco/Umbraco-CMS/blob/contrib/src/Umbraco.Web.UI.Client/src/packages/core/validation/README.md#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"$.values.[?(@.alias == 'my-alias')].value\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Lit TypeScript Project with Vite\nDESCRIPTION: Command to initialize a new Lit TypeScript project using Vite as the build tool, which sets up the structure for component development.\nSOURCE: https://github.com/umbraco/Umbraco-CMS/blob/contrib/src/Umbraco.Web.UI.Client/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm create vite@latest -- --template lit-ts my-package\n```\n\n----------------------------------------\n\nTITLE: Implementing Auto-Scroll Functions in JavaScript\nDESCRIPTION: Contains functions for handling automatic scrolling behavior during drag operations. Includes performance optimization using requestAnimationFrame for smooth scrolling animations.\nSOURCE: https://github.com/umbraco/Umbraco-CMS/blob/contrib/src/Umbraco.Web.UI.Client/src/packages/core/sorter/sorter.angular.txt#2025-04-16_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction performAutoScroll() {\n    autoScrollEl.scrollLeft += autoScrollX * autoScrollSpeed;\n    autoScrollEl.scrollTop += autoScrollY * autoScrollSpeed;\n    autoScrollRAF = requestAnimationFrame(performAutoScroll);\n}\n\nfunction stopAutoScroll() {\n    cancelAnimationFrame(autoScrollRAF);\n    autoScrollRAF = null;\n}\n```\n\n----------------------------------------\n\nTITLE: Opening a Notification with Custom Layout\nDESCRIPTION: Shows how to use a custom notification layout by specifying the element name and providing custom data. This example creates a stay notification that remains visible until dismissed by user interaction.\nSOURCE: https://github.com/umbraco/Umbraco-CMS/blob/contrib/src/Umbraco.Web.UI.Client/src/packages/core/notification/stories/notification.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { html, LitElement } from '@umbraco-cms/backoffice/external/lit';\nimport { UmbContextInjectMixin } from '@umbraco-cms/context-api';\nimport type {\n\tUmbNotificationContext,\n\tUmbNotificationOptions,\n\tUMB_NOTIFICATION_CONTEXT_ALIAS,\n} from '@umbraco-cms/notification';\nimport type { UmbNotificationCustomData } from './custom-notification-layout.js';\n\nclass MyElement extends LitElement {\n\tprivate _notificationContext?: UmbNotificationContext;\n\n\tconstructor() {\n\t\tsuper();\n\n\t\tthis.consumeContext(UMB_NOTIFICATION_CONTEXT_ALIAS, (instance) => {\n\t\t\tthis._notificationContext = instance;\n\t\t\t// notificationContext is now ready to be used\n\t\t});\n\t}\n\n\tprivate _handleClick() {\n\t\tconst options: UmbNotificationOptions<UmbNotificationCustomData> = {\n\t\t\telementName: 'umb-notification-layout-custom',\n\t\t\tdata: {\n\t\t\t\theadline: 'Attention',\n\t\t\t\tuser: { name: 'Peter Parker' },\n\t\t\t},\n\t\t};\n\n\t\tconst notificationHandler = this._notificationContext?.stay('default', options);\n\n\t\tnotificationHandler.onClose().then((result) => {\n\t\t\tif (result) {\n\t\t\t\tconsole.log('She agreed!');\n\t\t\t}\n\t\t});\n\t}\n\n\toverride render() {\n\t\treturn html`<button @click=\"${this._handleClick}\">Open Notification</button>`;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Example of an Index-Based JsonPath\nDESCRIPTION: Shows a simple index-based JsonPath that targets an array element by its position. This approach is less flexible when the data structure changes, which is why it often needs translation to query-based paths.\nSOURCE: https://github.com/umbraco/Umbraco-CMS/blob/contrib/src/Umbraco.Web.UI.Client/src/packages/core/validation/README.md#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"$.values.[5].value\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Cleanup on Scope Destruction in Angular\nDESCRIPTION: Handles cleanup of event listeners, observers, and references when the directive's scope is destroyed. Ensures proper memory management and prevents memory leaks.\nSOURCE: https://github.com/umbraco/Umbraco-CMS/blob/contrib/src/Umbraco.Web.UI.Client/src/packages/core/sorter/sorter.angular.txt#2025-04-16_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nscope.$on('$destroy', () => {\n    if (currentElement) {\n        handleDragEnd();\n    }\n\n    _lastIndicationContainerVM = null;\n\n    containerEl['umbBlockGridSorter:vm'] = null;\n    containerEl.removeEventListener('dragover', preventDragOver);\n\n    observer.disconnect();\n    observer = null;\n    containerEl = null;\n    scrollElement = null;\n    vm = null;\n});\n```\n\n----------------------------------------\n\nTITLE: Inline Translations in Package Manifest\nDESCRIPTION: Example of including translations directly in the meta object of the package manifest instead of using external files.\nSOURCE: https://github.com/umbraco/Umbraco-CMS/blob/contrib/src/Umbraco.Web.UI.Client/src/packages/core/localization/stories/localization.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"meta\": {\n\t\"culture\": \"en-us\",\n\t\"translations\": {\n\t\t\"section\": {\n\t\t\t\"key1\": \"value1\",\n\t\t\t\"key2\": \"value2\"\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Environment Configuration File for Umbraco Tests\nDESCRIPTION: Example .env file for Umbraco acceptance tests containing configuration for user credentials and Umbraco instance URL. This file is created during setup and excluded from git.\nSOURCE: https://github.com/umbraco/Umbraco-CMS/blob/contrib/tests/Umbraco.Tests.AcceptanceTest/README.md#2025-04-16_snippet_6\n\nLANGUAGE: properties\nCODE:\n```\nUMBRACO_USER_LOGIN=email for superadmin\nUMBRACO_USER_PASSWORD=password for superadmin\nURL=https://localhost:44339\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory and Installing Dependencies\nDESCRIPTION: Commands to navigate to the newly created project directory and install the Umbraco Backoffice package as a development dependency.\nSOURCE: https://github.com/umbraco/Umbraco-CMS/blob/contrib/src/Umbraco.Web.UI.Client/README.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd my-package\nnpm install -D @umbraco-cms/backoffice\n```\n\n----------------------------------------\n\nTITLE: Setting Up StoryBook Meta Component for Color Picker\nDESCRIPTION: Sets up the Meta component to associate the documentation with the color picker stories.\nSOURCE: https://github.com/umbraco/Umbraco-CMS/blob/contrib/src/Umbraco.Web.UI.Client/src/packages/core/components/input-color/input-color.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Meta of={ColorStories} />\n```\n\n----------------------------------------\n\nTITLE: Executing Single Test Files in Umbraco CMS\nDESCRIPTION: Command to run a specific test file using Playwright, useful when developing or debugging individual tests.\nSOURCE: https://github.com/umbraco/Umbraco-CMS/blob/contrib/tests/Umbraco.Tests.AcceptanceTest/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright test <testname.ts>\n```\n\n----------------------------------------\n\nTITLE: Disabling the umb-debug Component in Umbraco-CMS\nDESCRIPTION: This snippet shows how to temporarily hide or disable the debug information by either removing the 'visible' attribute or setting it to false. This allows developers to keep the component in the code for later use without displaying it.\nSOURCE: https://github.com/umbraco/Umbraco-CMS/blob/contrib/src/Umbraco.Web.UI.Client/src/packages/core/debug/stories/debug.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// To hide or remove the button ensure you remove the `visible` attribute or set it to false\n<umb-debug></umb-debug>\n\n<umb-debug ?visible=${false}></umb-debug>\n```\n\n----------------------------------------\n\nTITLE: Launching Playwright UI Mode in Umbraco CMS\nDESCRIPTION: Command to run Playwright tests in UI mode, providing a visual interface to manage and execute tests with better visibility of test steps.\nSOURCE: https://github.com/umbraco/Umbraco-CMS/blob/contrib/tests/Umbraco.Tests.AcceptanceTest/README.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright test --ui\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Tests with UI in Umbraco CMS\nDESCRIPTION: Command to run Umbraco acceptance tests in a browser with a Playwright UI, providing visual feedback during test execution.\nSOURCE: https://github.com/umbraco/Umbraco-CMS/blob/contrib/tests/Umbraco.Tests.AcceptanceTest/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run ui\n```\n\n----------------------------------------\n\nTITLE: Importing StoryBook Documentation Components for Color Picker\nDESCRIPTION: Imports necessary components from StoryBook blocks for documentation and imports color picker stories for reference in the documentation.\nSOURCE: https://github.com/umbraco/Umbraco-CMS/blob/contrib/src/Umbraco.Web.UI.Client/src/packages/core/components/input-color/input-color.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meta, Title, Primary, Controls, Story, Source } from '@storybook/blocks';\nimport * as ColorStories from './input-color.stories';\n```\n\n----------------------------------------\n\nTITLE: Running Specific Tests in UI Mode in Umbraco CMS\nDESCRIPTION: Command to run tests from a specific directory in Playwright UI mode, allowing focused testing of related functionality.\nSOURCE: https://github.com/umbraco/Umbraco-CMS/blob/contrib/tests/Umbraco.Tests.AcceptanceTest/README.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright test --ui tests/DefaultConfig\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Tests Headless in Umbraco CMS\nDESCRIPTION: Command to run Umbraco acceptance tests in headless mode, which executes tests without displaying a browser UI.\nSOURCE: https://github.com/umbraco/Umbraco-CMS/blob/contrib/tests/Umbraco.Tests.AcceptanceTest/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Running Login Test in Umbraco CMS\nDESCRIPTION: Example command to run specifically the Login test file using Playwright.\nSOURCE: https://github.com/umbraco/Umbraco-CMS/blob/contrib/tests/Umbraco.Tests.AcceptanceTest/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright test tests/DefaultConfig/Login/Login.spec.ts\n```\n\n----------------------------------------\n\nTITLE: Configuring Umbraco Test Data in appsettings.json\nDESCRIPTION: JSON configuration needed in appsettings.json to enable the Umbraco Test Data utility. Setting 'Enabled' to true allows the test data generation endpoints to be accessible.\nSOURCE: https://github.com/umbraco/Umbraco-CMS/blob/contrib/tests/Umbraco.TestData/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Umbraco\": {\n    \"CMS\": {\n      \"TestData\": {\n        \"Enabled\" : true,\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Watching for Changes in Umbraco CMS Client Development\nDESCRIPTION: Command to start the file watcher for development, which monitors changes to TypeScript files and rebuilds the project automatically.\nSOURCE: https://github.com/umbraco/Umbraco-CMS/blob/contrib/templates/UmbracoExtension/README.txt#2025-04-16_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nnpm run watch\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Building Umbraco CMS Client\nDESCRIPTION: Commands to install dependencies and build the Umbraco CMS client-side project. The build output is copied to a specific location in the project structure.\nSOURCE: https://github.com/umbraco/Umbraco-CMS/blob/contrib/templates/UmbracoExtension/README.txt#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnpm install\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Displaying Overview Story for Color Picker\nDESCRIPTION: Shows the Overview story of the color picker component using the Story component.\nSOURCE: https://github.com/umbraco/Umbraco-CMS/blob/contrib/src/Umbraco.Web.UI.Client/src/packages/core/components/input-color/input-color.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Story of={ColorStories.Overview} />\n```\n\n----------------------------------------\n\nTITLE: Displaying Title Component in Color Picker Documentation\nDESCRIPTION: Uses the Title component to show the title of the color picker component in the documentation.\nSOURCE: https://github.com/umbraco/Umbraco-CMS/blob/contrib/src/Umbraco.Web.UI.Client/src/packages/core/components/input-color/input-color.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Title />\n```\n\n----------------------------------------\n\nTITLE: Displaying Controls for Color Picker Properties\nDESCRIPTION: Shows the controls for the color picker properties using the Controls component.\nSOURCE: https://github.com/umbraco/Umbraco-CMS/blob/contrib/src/Umbraco.Web.UI.Client/src/packages/core/components/input-color/input-color.mdx#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Controls of={ColorStories.Overview} />\n```\n\n----------------------------------------\n\nTITLE: Showing Source Code for Overview Story\nDESCRIPTION: Displays the source code of the Overview story using the Source component.\nSOURCE: https://github.com/umbraco/Umbraco-CMS/blob/contrib/src/Umbraco.Web.UI.Client/src/packages/core/components/input-color/input-color.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Source of={ColorStories.Overview} />\n```\n\n----------------------------------------\n\nTITLE: Showing Source Code for WithoutLabels Story with Dark Theme\nDESCRIPTION: Displays the source code of the WithoutLabels story with dark theme using the Source component.\nSOURCE: https://github.com/umbraco/Umbraco-CMS/blob/contrib/src/Umbraco.Web.UI.Client/src/packages/core/components/input-color/input-color.mdx#2025-04-16_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<Source of={ColorStories.WithoutLabels} dark />\n```\n\n----------------------------------------\n\nTITLE: Implementing SVG Icons with Dynamic Color Adaptation\nDESCRIPTION: Guidelines for implementing SVG icons in the dashboard that can adapt to the surrounding font color using currentColor attribute for fill or stroke properties.\nSOURCE: https://github.com/umbraco/Umbraco-CMS/blob/contrib/src/Umbraco.Web.UI.Client/examples/dashboard-with-property-dataset/README.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Property Dataset Dashboard Example\\n\\nThis example demonstrates the essence of the Property Dataset.\\n\\nThis dashboard implements such, to display a few selected Property Editors and bind the data back to the Dashboard.\\n\\n\\n## SVG code of Icons\\n\\nMake sure to use currentColor for fill or stroke color, as that will make the icon adapt to the font color of where its begin used.\n```\n\n----------------------------------------\n\nTITLE: Displaying WithoutLabels Story for Color Picker\nDESCRIPTION: Shows the WithoutLabels story of the color picker component using the Story component.\nSOURCE: https://github.com/umbraco/Umbraco-CMS/blob/contrib/src/Umbraco.Web.UI.Client/src/packages/core/components/input-color/input-color.mdx#2025-04-16_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<Story of={ColorStories.WithoutLabels} />\n```\n\n----------------------------------------\n\nTITLE: Example Data Model for Validation in JSON\nDESCRIPTION: Shows a sample data structure with nested properties that can be targeted by validation messages. The example demonstrates a settings object with a title property that is too short.\nSOURCE: https://github.com/umbraco/Umbraco-CMS/blob/contrib/src/Umbraco.Web.UI.Client/src/packages/core/validation/README.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\tsettings: {\n\t\ttitle: 'too short'\n\t}\n}\n```"
  }
]