[
  {
    "owner": "pointfreeco",
    "repo": "sharing-grdb",
    "content": "TITLE: Defining Schema with SharingGRDB and SwiftData\nDESCRIPTION: Demonstrates how to define a data schema using SharingGRDB's @Table macro and SwiftData's @Model macro. SharingGRDB uses structs while SwiftData uses classes.\nSOURCE: https://github.com/pointfreeco/sharing-grdb/blob/main/Sources/SharingGRDBCore/Documentation.docc/Articles/ComparisonWithSwiftData.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n// SharingGRDB\n@Table\nstruct Item {\n  let id: Int\n  var title = \"\"\n  var isInStock = true \n  var notes = \"\"\n}\n```\n\nLANGUAGE: swift\nCODE:\n```\n// SwiftData\n@Model\nclass Item {\n  var title: String\n  var isInStock: Bool\n  var notes: String\n  init(\n    title: String = \"\", \n    isInStock: Bool = true, \n    notes: String = \"\"\n  ) {\n    self.title = title\n    self.isInStock = isInStock\n    self.notes = notes\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching and Displaying Items in SwiftUI View using SharedGRDB\nDESCRIPTION: This snippet shows how to use the @FetchAll property wrapper in a SwiftUI view to fetch and display a list of items from the database. The view automatically re-renders when the database changes.\nSOURCE: https://github.com/pointfreeco/sharing-grdb/blob/main/Sources/SharingGRDBCore/Documentation.docc/Articles/Observing.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nstruct ItemsView: View {\n  @FetchAll var items: [Item]\n\n  var body: some View {\n    ForEach(items) { item in\n      Text(item.name)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using SharedGRDB in @Observable Model for SwiftUI\nDESCRIPTION: This example demonstrates how to use SharedGRDB's property wrappers in an @Observable model class. The @FetchAll property is marked with @ObservationIgnored, and the data automatically updates when the database changes, causing SwiftUI views to re-render.\nSOURCE: https://github.com/pointfreeco/sharing-grdb/blob/main/Sources/SharingGRDBCore/Documentation.docc/Articles/Observing.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\n@Observable\nclass ItemsModel {\n  @ObservationIgnored\n  @FetchAll var items: [Item]\n}\nstruct ItemsView: View {\n  let model: ItemsModel\n\n  var body: some View {\n    ForEach(model.items) { item in\n      Text(item.name)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Data Modeling in SharingGRDB vs SwiftData\nDESCRIPTION: Demonstrates how to define data models in SharingGRDB using @Table compared to SwiftData's @Model. SharingGRDB uses struct-based models with the @FetchAll property wrapper to fetch collections, similar to SwiftData's @Query.\nSOURCE: https://github.com/pointfreeco/sharing-grdb/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n@FetchAll\nvar items: [Item]\n\n@Table\nstruct Item {\n  let id: Int\n  var title = \"\"\n  var isInStock = true\n  var notes = \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Table Model with the @Table Macro in Swift\nDESCRIPTION: Shows how to define a model with the @Table macro to represent a database table, including custom column representation for Date fields using ISO-8601 format.\nSOURCE: https://github.com/pointfreeco/sharing-grdb/blob/main/Sources/SharingGRDBCore/Documentation.docc/Articles/Fetching.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n@Table\nstruct Reminder {\n  let id: Int \n  var title = \"\"\n  @Column(as: Date.ISO8601Representation?.self)\n  var dueAt: Date?\n  var isCompleted = false\n}\n```\n\n----------------------------------------\n\nTITLE: Defining and Fetching Items with SharingGRDB in Swift\nDESCRIPTION: Demonstrates how to define a table structure and fetch all items using SharingGRDB's @FetchAll and @Table property wrappers.\nSOURCE: https://github.com/pointfreeco/sharing-grdb/blob/main/Sources/SharingGRDBCore/Documentation.docc/SharingGRDBCore.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n@FetchAll\nvar items: [Item]\n\n@Table\nstruct Item {\n  let id: Int\n  var title = \"\"\n  var isInStock = true\n  var notes = \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Data for a View in SharingGRDB and SwiftData\nDESCRIPTION: Illustrates how to fetch and display data in a SwiftUI view using SharingGRDB's @FetchAll property wrapper and SwiftData's @Query macro.\nSOURCE: https://github.com/pointfreeco/sharing-grdb/blob/main/Sources/SharingGRDBCore/Documentation.docc/Articles/ComparisonWithSwiftData.md#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n// SharingGRDB\nstruct ItemsView: View {\n  @FetchAll(Item.order(by: \\.title))\n  var items\n  \n  var body: some View {\n    ForEach(items) { item in\n      Text(item.name)\n    }\n  }\n}\n```\n\nLANGUAGE: swift\nCODE:\n```\n// SwiftData\nstruct ItemsView: View {\n  @Query(sort: \\Item.title)\n  var items: [Item]\n  \n  var body: some View {\n    ForEach(items) { item in\n      Text(item.name)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Data Fetching with @FetchAll in Swift\nDESCRIPTION: Demonstrates the simplest use of the @FetchAll property wrapper to retrieve all records from a table without additional query parameters.\nSOURCE: https://github.com/pointfreeco/sharing-grdb/blob/main/Sources/SharingGRDBCore/Documentation.docc/Articles/Fetching.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\n@FetchAll var reminders: [Reminder]\n```\n\n----------------------------------------\n\nTITLE: Optimized SQLite Query with SharingGRDB\nDESCRIPTION: Improved implementation using SharingGRDB's dynamic query capabilities. This approach pushes filtering, sorting, and limiting operations to SQLite level, resulting in better performance and memory usage.\nSOURCE: https://github.com/pointfreeco/sharing-grdb/blob/main/Sources/SharingGRDBCore/Documentation.docc/Articles/DynamicQueries.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nstruct ContentView: View {\n  @State.SharedReader(value: []) var items: [Item]\n  @State var filterDate: Date?\n  @State var order: SortOrder = .reverse\n\n  var body: some View {\n    List {\n      // ...\n    }\n    .task(id: [filter, ordering] as [AnyHashable]) {\n      await updateQuery()\n    }\n  }\n\n  private func updateQuery() async {\n    do {\n      try await $items.load(\n        .fetchAll(\n          Items\n            .where { $0.timestamp > #bind(filterDate ?? .distantPast) }\n            .order {\n              if order == .forward {\n                $0.timestamp\n              } else {\n                $0.timestamp.desc()\n              }\n            }\n            .limit(10)\n        )\n      )\n    } catch {\n      // Handle error...\n    }\n  }\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Data for @Observable Model in SharingGRDB and SwiftData\nDESCRIPTION: Demonstrates how to fetch data in an @Observable model using SharingGRDB's @FetchAll property wrapper, which works seamlessly, and SwiftData's approach, which requires manual implementation.\nSOURCE: https://github.com/pointfreeco/sharing-grdb/blob/main/Sources/SharingGRDBCore/Documentation.docc/Articles/ComparisonWithSwiftData.md#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\n// SharingGRDB\n@Observable\nclass FeatureModel {\n  @ObservationIgnored\n  @FetchAll(Item.order(by: \\.title)) var items\n  // ...\n}\n```\n\nLANGUAGE: swift\nCODE:\n```\n// SwiftData\n@Observable\nclass FeatureModel {\n  var modelContext: ModelContext\n  var items = [Item]()\n  var observer: (any NSObjectProtocol)!\n\n  init(modelContext: ModelContext) {\n    self.modelContext = modelContext\n    observer = NotificationCenter.default.addObserver(\n      forName: ModelContext.willSave,\n      object: modelContext,\n      queue: nil\n    ) { [weak self] _ in\n      self?.fetchItems()\n    }\n    fetchItems()\n  }\n  \n  deinit {\n    NotificationCenter.default.removeObserver(observer)\n  }\n  \n  func fetchItems() {\n    do {\n      items = try modelContext.fetch(\n        FetchDescriptor<Item>(sortBy: [SortDescriptor(\\.title)])\n      )\n    } catch {\n      // Handle error\n    }\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Sorting Query Results with @FetchAll in Swift\nDESCRIPTION: Shows how to sort query results by a specific column using the order(by:) method with the @FetchAll property wrapper.\nSOURCE: https://github.com/pointfreeco/sharing-grdb/blob/main/Sources/SharingGRDBCore/Documentation.docc/Articles/Fetching.md#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n@FetchAll(Reminder.order(by: \\.title))\nvar reminders\n```\n\n----------------------------------------\n\nTITLE: Using SharingGRDB Fetch Property Wrappers\nDESCRIPTION: Demonstrates how to use SharingGRDB's @FetchAll and @FetchOne property wrappers to retrieve data from SQLite. @FetchAll retrieves collections while @FetchOne can be used with count operations or single record lookups.\nSOURCE: https://github.com/pointfreeco/sharing-grdb/blob/main/README.md#2025-04-23_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\n@FetchAll\nvar items: [Item]\n\n@FetchOne(Item.where(\\.isInStock).count())\nvar inStockItemsCount = 0\n```\n\n----------------------------------------\n\nTITLE: Setting Up External Storage in SharingGRDB and SwiftData\nDESCRIPTION: Shows how to initialize the database or model container at the app's entry point for both SharingGRDB and SwiftData.\nSOURCE: https://github.com/pointfreeco/sharing-grdb/blob/main/Sources/SharingGRDBCore/Documentation.docc/Articles/ComparisonWithSwiftData.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\n// SharingGRDB\n@main\nstruct MyApp: App {\n  init() {\n    prepareDependencies {\n      // Create/migrate a database\n      let db = try! DatabaseQueue(/* ... */)\n      $0.defaultDatabase = db\n    }\n  }\n  // ...\n}\n```\n\nLANGUAGE: swift\nCODE:\n```\n// SwiftData\n@main\nstruct MyApp: App {\n  let container = { \n    // Create/configure a container\n    try! ModelContainer(/* ... */)\n  }()\n  \n  var body: some Scene {\n    WindowGroup {\n      ContentView()\n        .modelContainer(container)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating SQLite Database in Swift Using GRDB\nDESCRIPTION: This snippet shows how to set up and perform database migrations using GRDB's DatabaseMigrator. It includes registering migrations and applying them to the database connection.\nSOURCE: https://github.com/pointfreeco/sharing-grdb/blob/main/Sources/SharingGRDBCore/Documentation.docc/Articles/PreparingDatabase.md#2025-04-23_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nfunc appDatabase() throws -> any DatabaseWriter {\n  // ... (previous configuration code)\n  var migrator = DatabaseMigrator()\n  #if DEBUG\n    migrator.eraseDatabaseOnSchemaChange = true\n  #endif\n  migrator.registerMigration(\"Create sports table\") { db in\n    // ...\n  }\n  migrator.registerMigration(\"Create teams table\") { db in\n    // ...\n  }\n  try migrator.migrate(database)\n  return database\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Table and Executing Queries with GRDB in Swift\nDESCRIPTION: This snippet demonstrates how to create a table, execute a SQL statement, and perform queries using StructuredQueries with GRDB. It shows the creation of a 'Player' table, inserting data, and fetching players with a score greater than 10.\nSOURCE: https://github.com/pointfreeco/sharing-grdb/blob/main/Sources/StructuredQueriesGRDBCore/Documentation.docc/StructuredQueriesGRDBCore.md#2025-04-23_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\n@Table\nstruct Player {\n  let id: Int\n  var name = \"\"\n  var score = 0\n}\n\ntry #sql(\n  \"\"\"\n  CREATE TABLE players (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    score INTEGER\n  )\n  \"\"\"\n)\n.execute(db)\n\nlet players = Player\n  .where { $0.score > 10 }\n  .fetchAll(db)\n// SELECT … FROM \"players\"\n// WHERE \"players\".\"score\" > 10\n\nlet averageScore = try Player\n  .select { $0.score.avg() }\n  .fetchOne(db)\n// SELECT avg(\"players\".\"score\") FROM \"players\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Search with SharingGRDB in SwiftUI\nDESCRIPTION: Shows how to create a SwiftUI view with dynamic search functionality using SharingGRDB's @FetchAll property wrapper. When the search text changes, the query is updated to filter items based on the search criteria.\nSOURCE: https://github.com/pointfreeco/sharing-grdb/blob/main/Sources/SharingGRDBCore/Documentation.docc/Articles/ComparisonWithSwiftData.md#2025-04-23_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\n// SharingGRDB\nstruct ItemsView: View {\n  @State var searchText = \"\"\n  @FetchAll var items: [Item]\n  \n  var body: some View {\n    ForEach(items) { item in\n      Text(item.name)\n    }\n    .searchable(text: $searchText)\n    .task(id: searchText) {\n      await updateSearchQuery()\n    }\n  }\n  \n  func updateSearchQuery() {\n    await $items.load(\n      .fetchAll(\n        Item.where {\n          $0.title.contains(searchText)\n        }\n      )\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Raw SQL with @FetchAll and #sql Macro in Swift\nDESCRIPTION: Shows how to use the #sql macro to write a raw SQL query that safely fetches completed reminders sorted by title in descending order.\nSOURCE: https://github.com/pointfreeco/sharing-grdb/blob/main/Sources/SharingGRDBCore/Documentation.docc/Articles/Fetching.md#2025-04-23_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\n@FetchAll(#sql(\"SELECT * FROM reminders where isCompleted ORDER BY title DESC\"))\nvar completedReminders: [Reminder]\n```\n\n----------------------------------------\n\nTITLE: Filtering and Sorting Query Results with @FetchAll in Swift\nDESCRIPTION: Demonstrates how to filter for completed reminders and sort them by title in descending order using the where and order clauses.\nSOURCE: https://github.com/pointfreeco/sharing-grdb/blob/main/Sources/SharingGRDBCore/Documentation.docc/Articles/Fetching.md#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\n@FetchAll(\n  Reminder.where(\\.isCompleted).order { $0.title.desc() }\n)\nvar completedReminders\n```\n\n----------------------------------------\n\nTITLE: Complete SQLite Database Setup Function in Swift\nDESCRIPTION: This comprehensive snippet combines all steps to create, configure, and migrate a SQLite database using GRDB. It includes context-aware database creation and debug configurations.\nSOURCE: https://github.com/pointfreeco/sharing-grdb/blob/main/Sources/SharingGRDBCore/Documentation.docc/Articles/PreparingDatabase.md#2025-04-23_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nfunc appDatabase() throws -> any DatabaseWriter {\n  var configuration = Configuration()\n  configuration.foreignKeysEnabled = true\n  #if DEBUG\n    configuration.prepareDatabase { db in\n      db.trace(options: .profile) {\n        print($0.expandedDescription)\n      }\n    }\n  #endif\n  @Dependency(\\.context) var context\n  let database: any DatabaseWriter\n  if context == .live {\n    let path = URL.documentsDirectory.appending(component: \"db.sqlite\").path()\n    database = try DatabasePool(path: path, configuration: configuration)\n  } else {\n    database = try DatabaseQueue(configuration: configuration)\n  }\n  var migrator = DatabaseMigrator()\n  #if DEBUG\n    migrator.eraseDatabaseOnSchemaChange = true\n  #endif\n  migrator.registerMigration(\"Create sports table\") { db in\n    // ...\n  }\n  migrator.registerMigration(\"Create teams table\") { db in\n    // ...\n  }\n  try migrator.migrate(database)\n  return database\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Records with SharingGRDB\nDESCRIPTION: Demonstrates how to create and insert a new record into the database using SharingGRDB, which requires explicit writing to the database and executing an insert operation.\nSOURCE: https://github.com/pointfreeco/sharing-grdb/blob/main/Sources/SharingGRDBCore/Documentation.docc/Articles/ComparisonWithSwiftData.md#2025-04-23_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\n// SharingGRDB\n@Dependency(\\.defaultDatabase) var database\n\ntry database.write { db in\n  try Item.insert(Item(/* ... */))\n    .execute(db)\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Aggregate Data with @FetchOne in Swift\nDESCRIPTION: Shows how to use @FetchOne to fetch a single aggregate value (count of reminders) with a default value when no result is found.\nSOURCE: https://github.com/pointfreeco/sharing-grdb/blob/main/Sources/SharingGRDBCore/Documentation.docc/Articles/Fetching.md#2025-04-23_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\n@FetchOne(Reminder.count())\nvar remindersCount = 0\n```\n\n----------------------------------------\n\nTITLE: Updating Records with SharingGRDB\nDESCRIPTION: Demonstrates how to update an existing record in SharingGRDB by modifying the object and then explicitly executing an update operation within a database write transaction.\nSOURCE: https://github.com/pointfreeco/sharing-grdb/blob/main/Sources/SharingGRDBCore/Documentation.docc/Articles/ComparisonWithSwiftData.md#2025-04-23_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\n// SharingGRDB\n@Dependency(\\.defaultDatabase) var database\n\nexistingItem.title = \"Computer\"\ntry database.write { db in\n  try Item.update(existingItem).execute(db)\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Default Database in SharingGRDB\nDESCRIPTION: Shows how to access the default database in SharingGRDB using the @Dependency property wrapper, similar to accessing the modelContext in SwiftData.\nSOURCE: https://github.com/pointfreeco/sharing-grdb/blob/main/Sources/SharingGRDBCore/Documentation.docc/Articles/ComparisonWithSwiftData.md#2025-04-23_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\n// SharingGRDB\n@Dependency(\\.defaultDatabase) var database\n```\n\n----------------------------------------\n\nTITLE: Performing a Join Query with Column Selection in Swift\nDESCRIPTION: Demonstrates how to join two tables and select specific columns from each, mapping the results to a custom type.\nSOURCE: https://github.com/pointfreeco/sharing-grdb/blob/main/Sources/SharingGRDBCore/Documentation.docc/Articles/Fetching.md#2025-04-23_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\n@FetchAll(\n  Reminder\n    .join(RemindersList.all) { $0.remindersListID.eq($1.id) }\n    .select {\n      Record.Columns(\n        reminderTitle: $0.title, \n        remindersListTitle: $1.title\n      )\n    }\n)\nvar records\n```\n\n----------------------------------------\n\nTITLE: Setting Default Database in SwiftUI App Entry Point\nDESCRIPTION: This snippet demonstrates how to set the default database connection in a SwiftUI app's entry point using the prepareDependencies method.\nSOURCE: https://github.com/pointfreeco/sharing-grdb/blob/main/Sources/SharingGRDBCore/Documentation.docc/Articles/PreparingDatabase.md#2025-04-23_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\n@main\nstruct MyApp: App {\n  init() {\n    prepareDependencies { \n      $0.defaultDatabase = try! appDatabase()\n    }\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Related Tables with Foreign Keys in Swift\nDESCRIPTION: Shows how to define two related tables (Reminder and RemindersList) with a foreign key relationship between them.\nSOURCE: https://github.com/pointfreeco/sharing-grdb/blob/main/Sources/SharingGRDBCore/Documentation.docc/Articles/Fetching.md#2025-04-23_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\n@Table\nstruct Reminder {\n  let id: Int \n  var title = \"\"\n  @Column(as: Date.ISO8601Representation?.self)\n  var dueAt: Date?\n  var isCompleted = false\n  var remindersListID: RemindersList.ID\n}\n@Table\nstruct RemindersList: Identifiable {\n  let id: Int \n  var title = \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining App Database Connection Function in Swift\nDESCRIPTION: This snippet shows the basic structure of a function that returns a database connection. It uses the DatabaseWriter protocol to allow flexibility in the specific database type used.\nSOURCE: https://github.com/pointfreeco/sharing-grdb/blob/main/Sources/SharingGRDBCore/Documentation.docc/Articles/PreparingDatabase.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nfunc appDatabase() -> any DatabaseWriter {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Column with SharingGRDB Migration\nDESCRIPTION: Demonstrates how to add a new column to an existing table using SharingGRDB's explicit migration system. This requires writing SQL to alter the table structure.\nSOURCE: https://github.com/pointfreeco/sharing-grdb/blob/main/Sources/SharingGRDBCore/Documentation.docc/Articles/ComparisonWithSwiftData.md#2025-04-23_snippet_19\n\nLANGUAGE: swift\nCODE:\n```\n@Table\nstruct Item {\n  let id: Int\n  var title = \"\"\n  var description = \"\"\n  var isInStock = true\n}\n\nmigrator.registerMigration(\"Add 'description' column to 'items'\") { db in\n  try #sql(\n    \"\"\"\n    ALTER TABLE \"items\" \n    ADD COLUMN \"description\" TEXT\n    \"\"\"\n  )\n  .execute(db)\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Filtered Aggregate Data with @FetchOne in Swift\nDESCRIPTION: Demonstrates using @FetchOne with a where clause to count only completed reminders.\nSOURCE: https://github.com/pointfreeco/sharing-grdb/blob/main/Sources/SharingGRDBCore/Documentation.docc/Articles/Fetching.md#2025-04-23_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\n@FetchOne(Reminder.where(\\.isCompleted).count())\nvar completedRemindersCount = 0\n```\n\n----------------------------------------\n\nTITLE: Initializing SharingGRDB Database in Swift App\nDESCRIPTION: Demonstrates how to initialize and configure the default database for SharingGRDB in a SwiftUI app's entry point.\nSOURCE: https://github.com/pointfreeco/sharing-grdb/blob/main/Sources/SharingGRDBCore/Documentation.docc/SharingGRDBCore.md#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n@main\nstruct MyApp: App {\n  init() {\n    prepareDependencies {\n      // Create/migrate a database connection\n      let db = try! DatabaseQueue(/* ... */)\n      $0.defaultDatabase = db\n    }\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing SharingGRDB Database Connection\nDESCRIPTION: Shows how to set up the default database connection for SharingGRDB in an app's entry point. This is typically done as early as possible in the app lifecycle to make the database available to property wrappers.\nSOURCE: https://github.com/pointfreeco/sharing-grdb/blob/main/README.md#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n@main\nstruct MyApp: App {\n  init() {\n    prepareDependencies {\n      let db = try! DatabaseQueue(\n        // Create/migrate a database \n        // connection\n      )\n      $0.defaultDatabase = db\n    }\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating SQLite Database Connection in Swift\nDESCRIPTION: This code demonstrates how to create a database connection using GRDB, with different implementations for live app context and testing/preview contexts. It uses dependency injection to determine the context.\nSOURCE: https://github.com/pointfreeco/sharing-grdb/blob/main/Sources/SharingGRDBCore/Documentation.docc/Articles/PreparingDatabase.md#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nfunc appDatabase() throws -> any DatabaseWriter {\n  var configuration = Configuration()\n  configuration.foreignKeysEnabled = true\n  #if DEBUG\n    configuration.prepareDatabase { db in\n      db.trace(options: .profile) {\n        print($0.expandedDescription)\n      }\n    }\n  #endif\n  @Dependency(\\.context) var context\n  let database: any DatabaseWriter\n  if context == .live {\n    let path = URL.documentsDirectory.appending(component: \"db.sqlite\").path()\n    database = try DatabasePool(path: path, configuration: configuration)\n  } else {\n    database = try DatabaseQueue(configuration: configuration)\n  }\n  return database\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing and Writing to SharingGRDB Database in Swift\nDESCRIPTION: Demonstrates how to access the default database and insert an item using SharingGRDB's dependency injection and GRDB's write methods.\nSOURCE: https://github.com/pointfreeco/sharing-grdb/blob/main/Sources/SharingGRDBCore/Documentation.docc/SharingGRDBCore.md#2025-04-23_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\n@Dependency(\\.defaultDatabase) var database\n\ntry database.write { db in\n  try Item.insert(Item(/* ... */))\n    .execute(db)\n}\n```\n\n----------------------------------------\n\nTITLE: SwiftData Container Setup Comparison\nDESCRIPTION: Demonstrates how SwiftData's ModelContainer is configured compared to SharingGRDB's database setup. This shows the equivalent pattern of establishing the data store at app startup.\nSOURCE: https://github.com/pointfreeco/sharing-grdb/blob/main/README.md#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\n@main\nstruct MyApp: App {\n  let container = { \n    // Create/configure a container\n    try! ModelContainer(/* ... */)\n  }()\n  \n  var body: some Scene {\n    WindowGroup {\n      ContentView()\n        .modelContainer(container)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Joins and Relationships in SharingGRDB\nDESCRIPTION: Demonstrates SharingGRDB's approach to handling relationships using explicit SQL joins. This example shows how to fetch sports with their team counts in a single efficient query.\nSOURCE: https://github.com/pointfreeco/sharing-grdb/blob/main/Sources/SharingGRDBCore/Documentation.docc/Articles/ComparisonWithSwiftData.md#2025-04-23_snippet_16\n\nLANGUAGE: swift\nCODE:\n```\n@Selection\nstruct SportWithTeamCount {\n  let sport: Sport\n  let teamCount: Int\n}\n\n@FetchAll(\n  Sport\n    .group(by: \\.id)\n    .leftJoin(Team.all) { $0.id.eq($1.sportID) }\n    .select {\n      SportWithTeamCount.Columns(sport: $0, teamCount: $1.count())\n    }\n)\nvar sportsWithTeamCounts\n```\n\n----------------------------------------\n\nTITLE: Defining a Selection Type for Table Joins in Swift\nDESCRIPTION: Shows how to create a data type with the @Selection macro to hold specific columns from a join operation.\nSOURCE: https://github.com/pointfreeco/sharing-grdb/blob/main/Sources/SharingGRDBCore/Documentation.docc/Articles/Fetching.md#2025-04-23_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\n@Selection\nstruct Record {\n  let reminderTitle: String\n  let remindersListTitle: String\n}\n```\n\n----------------------------------------\n\nTITLE: Using FetchAll Property Wrapper in SharingGRDB 0.2\nDESCRIPTION: This code snippet demonstrates the new @FetchAll property wrapper introduced in SharingGRDB 0.2, which provides a more concise and type-safe way to query completed reminders. It uses the StructuredQueries library to filter and order the data inline.\nSOURCE: https://github.com/pointfreeco/sharing-grdb/blob/main/Sources/SharingGRDBCore/Documentation.docc/Articles/MigrationGuides/MigratingTo0.2.md#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n@FetchAll(Reminder.where(\\.isCompleted).order(by: \\.title))\nvar completedReminders: [Reminder]\n```\n\n----------------------------------------\n\nTITLE: SQL Query with Schema References for Type Safety in Swift\nDESCRIPTION: Demonstrates using column and table references from the schema to create a type-safe SQL query with the #sql macro.\nSOURCE: https://github.com/pointfreeco/sharing-grdb/blob/main/Sources/SharingGRDBCore/Documentation.docc/Articles/Fetching.md#2025-04-23_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\n@FetchAll(\n  #sql(\n    \"\"\"\n    SELECT \\(Reminder.columns)\n    FROM \\(Reminder.self)\n    WHERE \\(Reminder.isCompleted)\n    ORDER BY \\(Reminder.title) DESC\n    \"\"\"\n  )\n)\nvar completedReminders: [Reminder]\n```\n\n----------------------------------------\n\nTITLE: Implementing Manual Migrations in GRDB for Unique Index Creation\nDESCRIPTION: This snippet demonstrates how to create a unique index on the 'title' column in GRDB by first removing duplicate titles and then adding the constraint. The implementation uses SQL's powerful features to efficiently delete duplicate items without loading them into memory.\nSOURCE: https://github.com/pointfreeco/sharing-grdb/blob/main/Sources/SharingGRDBCore/Documentation.docc/Articles/ComparisonWithSwiftData.md#2025-04-23_snippet_21\n\nLANGUAGE: swift\nCODE:\n```\n// SharingGRDB\nmigrator.registerMigration(\"Make 'title' unique\") { db in\n  // 1️⃣ Delete all items that have duplicate title, keeping the first created one:\n  try Item\n    .where {\n      !$0.id.in(\n        Item\n          .select { $0.id.min() }\n          .group(by: \\.title)\n      )\n    }\n    .execute()\n  // 2️⃣ Create unique index\n  try #sql(\n    \"\"\"\n    CREATE UNIQUE INDEX \n    \"items_title\" ON \"items\" (\"title\") \n    \"\"\"\n  )\n  .execute(db)\n}\n```\n\n----------------------------------------\n\nTITLE: Observing Database Changes in UIKit with SharedGRDB and Combine\nDESCRIPTION: This snippet shows how to use SharedGRDB in a UIKit view controller with a UICollectionView. It uses the publisher property of the fetched value to update the collection view's data source when the items change in the database.\nSOURCE: https://github.com/pointfreeco/sharing-grdb/blob/main/Sources/SharingGRDBCore/Documentation.docc/Articles/Observing.md#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nclass ItemsViewController: UICollectionViewController {\n  @FetchAll var items: [Item]\n  \n  override func viewDidLoad() {\n    // Set up data source and cell registration...\n    \n    // Observe changes to items in order to update data source:\n    $items.publisher.sink { items in \n      guard let self else { return }\n      dataSource.apply(\n        NSDiffableDataSourceSnapshot(items: items), \n        animatingDifferences: true\n      )\n    }\n    .store(in: &cancellables)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLite Database with Foreign Keys in Swift\nDESCRIPTION: This code snippet demonstrates how to create a Configuration object and enable foreign key constraints for a SQLite database using GRDB.\nSOURCE: https://github.com/pointfreeco/sharing-grdb/blob/main/Sources/SharingGRDBCore/Documentation.docc/Articles/PreparingDatabase.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nfunc appDatabase() -> any DatabaseWriter {\n  var configuration = Configuration()\n  configuration.foreignKeysEnabled = true\n}\n```\n\n----------------------------------------\n\nTITLE: Using @Fetch with a Custom FetchKeyRequest in Swift\nDESCRIPTION: Demonstrates how to use the @Fetch property wrapper with a custom FetchKeyRequest to execute multiple queries in a single transaction.\nSOURCE: https://github.com/pointfreeco/sharing-grdb/blob/main/Sources/SharingGRDBCore/Documentation.docc/Articles/Fetching.md#2025-04-23_snippet_14\n\nLANGUAGE: swift\nCODE:\n```\n@Fetch(Reminders()) var reminders = Reminders.Value()\nreminders.completedReminders  // [Reminder(/* ... */), /* ... */]\nreminders.remindersCount      // 100\n```\n\n----------------------------------------\n\nTITLE: Table Definition and Migration in SharingGRDB\nDESCRIPTION: Shows how to define a table structure in SharingGRDB and create the corresponding table through explicit migration. This requires defining the full schema including constraints and default values.\nSOURCE: https://github.com/pointfreeco/sharing-grdb/blob/main/Sources/SharingGRDBCore/Documentation.docc/Articles/ComparisonWithSwiftData.md#2025-04-23_snippet_17\n\nLANGUAGE: swift\nCODE:\n```\n// SharingGRDB\n@Table\nstruct Item {\n  let id: Int\n  var title = \"\"\n  var isInStock = true\n}\n\nmigrator.registerMigration(\"Create 'items' table\") { db in\n  try #sql(\n    \"\"\"\n    CREATE TABLE \"items\" (\n      \"id\" INTEGER PRIMARY KEY AUTOINCREMENT,\n      \"title\" TEXT NOT NULL,\n      \"isInStock\" INTEGER NOT NULL DEFAULT 1\n    )\n    \"\"\"\n  )\n  .execute(db)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a FetchKeyRequest for Transaction-Based Queries in Swift\nDESCRIPTION: Shows how to create a custom FetchKeyRequest type that executes multiple queries in a single database transaction.\nSOURCE: https://github.com/pointfreeco/sharing-grdb/blob/main/Sources/SharingGRDBCore/Documentation.docc/Articles/Fetching.md#2025-04-23_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\nstruct Reminders: FetchKeyRequest {\n  struct Value {\n    var completedReminders: [Reminder] = []\n    var remindersCount = 0\n  }\n  func fetch(_ db: Database) throws -> Value {\n    try Value(\n      completedReminders: Reminder.where(\\.isCompleted).fetchAll(db),\n      remindersCount: Reminder.fetchCount(db)\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Observing Database Changes in UIKit with SharedGRDB and Swift Navigation\nDESCRIPTION: This alternative approach demonstrates how to observe changes to database items in a UIKit view controller using the observe tool from the Swift Navigation library, without relying on Combine.\nSOURCE: https://github.com/pointfreeco/sharing-grdb/blob/main/Sources/SharingGRDBCore/Documentation.docc/Articles/Observing.md#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\noverride func viewDidLoad() {\n  // Set up data source and cell registration...\n\n  // Observe changes to items in order to update data source:\n  observe { [weak self] in\n    guard let self else { return }\n    dataSource.apply(\n      NSDiffableDataSourceSnapshot(items: items), \n      animatingDifferences: true\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Records with SwiftData\nDESCRIPTION: Shows how to update an existing record in SwiftData by simply modifying the object properties and saving the model context, which automatically tracks and persists the changes.\nSOURCE: https://github.com/pointfreeco/sharing-grdb/blob/main/Sources/SharingGRDBCore/Documentation.docc/Articles/ComparisonWithSwiftData.md#2025-04-23_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\n// SwiftData\n@Environment(\\.modelContext) var modelContext\n\nexistingItem.title = \"Computer\"\ntry modelContext.save()\n```\n\n----------------------------------------\n\nTITLE: Multiple Independent Queries in Swift\nDESCRIPTION: Demonstrates using both @FetchOne and @FetchAll to execute two separate queries in different transactions.\nSOURCE: https://github.com/pointfreeco/sharing-grdb/blob/main/Sources/SharingGRDBCore/Documentation.docc/Articles/Fetching.md#2025-04-23_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\n@FetchOne(Reminder.count())\nvar remindersCount = 0\n\n@FetchAll(Reminder.where(\\.isCompleted)))\nvar completedReminders\n```\n\n----------------------------------------\n\nTITLE: Accessing Database for Writes in SharingGRDB\nDESCRIPTION: Shows how to access the database dependency to perform write operations in SharingGRDB. This uses the dependency injection system to access the database connection for inserting new items.\nSOURCE: https://github.com/pointfreeco/sharing-grdb/blob/main/README.md#2025-04-23_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\n@Dependency(\\.defaultDatabase) \nvar database\n    \nlet newItem = Item(/* ... */)\ntry database.write { db in\n  try Item.insert(newItem)\n    .execute(db))\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Search with SwiftData in SwiftUI\nDESCRIPTION: Demonstrates how to implement dynamic search using SwiftData with a two-view approach. The outer view manages search text state while the inner view holds the @Query with a dynamic predicate based on the search text.\nSOURCE: https://github.com/pointfreeco/sharing-grdb/blob/main/Sources/SharingGRDBCore/Documentation.docc/Articles/ComparisonWithSwiftData.md#2025-04-23_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\n// SwiftData\nstruct ItemsView: View {\n  @State var searchText = \"\"\n  \n  var body: some View {\n    SearchResultsView(\n      searchText: searchText\n    )\n    .searchable(text: $searchText)\n  }\n}\n\nstruct SearchResultsView: View {\n  @Query var items: [Item]\n  \n  init(searchText: String) {\n    _items = Query(\n      filter: #Predicate<Item> { \n        $0.title.contains(searchText) \n      }\n    )\n  }\n  \n  var body: some View {\n    ForEach(items) { item in\n      Text(item.name)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Model Context in SwiftData\nDESCRIPTION: Shows how to access the model context in SwiftData using the @Environment property wrapper, which serves a similar purpose to the defaultDatabase in SharingGRDB.\nSOURCE: https://github.com/pointfreeco/sharing-grdb/blob/main/Sources/SharingGRDBCore/Documentation.docc/Articles/ComparisonWithSwiftData.md#2025-04-23_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\n// SwiftData\n@Environment(\\.modelContext) var modelContext\n```\n\n----------------------------------------\n\nTITLE: Defining Relationship Models in SwiftData\nDESCRIPTION: Demonstrates how to define relationships between models in SwiftData using the @Model, @Relationship annotations. This example shows a one-to-many relationship between Sport and Team.\nSOURCE: https://github.com/pointfreeco/sharing-grdb/blob/main/Sources/SharingGRDBCore/Documentation.docc/Articles/ComparisonWithSwiftData.md#2025-04-23_snippet_14\n\nLANGUAGE: swift\nCODE:\n```\n@Model class Sport {\n  @Relationship(inverse: \\Team.sport)\n  var teams = [Team]()\n}\n@Model class Team {\n  var sport: Sport\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Database in UIKit App Delegate\nDESCRIPTION: This code shows how to set the default database connection in a UIKit app's AppDelegate using the prepareDependencies method.\nSOURCE: https://github.com/pointfreeco/sharing-grdb/blob/main/Sources/SharingGRDBCore/Documentation.docc/Articles/PreparingDatabase.md#2025-04-23_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nclass AppDelegate: NSObject, UIApplicationDelegate {\n  func applicationDidFinishLaunching(_ application: UIApplication) {\n    prepareDependencies {\n      $0.defaultDatabase = try! appDatabase()\n    }\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Query Tracing for SQLite in Swift\nDESCRIPTION: This snippet shows how to enable query tracing for debugging purposes in a SQLite database configuration using GRDB. It prints expanded descriptions of SQL queries in debug builds.\nSOURCE: https://github.com/pointfreeco/sharing-grdb/blob/main/Sources/SharingGRDBCore/Documentation.docc/Articles/PreparingDatabase.md#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nfunc appDatabase() -> any DatabaseWriter {\n  var configuration = Configuration()\n  configuration.foreignKeysEnabled = true\n  #if DEBUG\n    configuration.prepareDatabase { db in\n      db.trace(options: .profile) {\n        print($0.expandedDescription)\n      }\n    }\n  #endif\n}\n```\n\n----------------------------------------\n\nTITLE: Preparing Database for Xcode Previews in Swift\nDESCRIPTION: This snippet shows how to prepare the default database connection for use in Xcode previews, ensuring that preview environments have access to the database.\nSOURCE: https://github.com/pointfreeco/sharing-grdb/blob/main/Sources/SharingGRDBCore/Documentation.docc/Articles/PreparingDatabase.md#2025-04-23_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\n#Preview {\n  let _ = prepareDependencies { \n    $0.defaultDatabase = try! appDatabase()\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing FetchOne Property Wrapper with GRDB\nDESCRIPTION: Core initialization methods for the FetchOne property wrapper, allowing database connection and initial value setup.\nSOURCE: https://github.com/pointfreeco/sharing-grdb/blob/main/Sources/SharingGRDBCore/Documentation.docc/Extensions/FetchOne.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\ninit(wrappedValue:database:)\ninit(database:)\ninit(wrappedValue:_:database:)\n```\n\n----------------------------------------\n\nTITLE: Using Raw SQL with @FetchOne in Swift\nDESCRIPTION: Shows how to use the #sql macro with @FetchOne to perform an aggregate query with a SQL string.\nSOURCE: https://github.com/pointfreeco/sharing-grdb/blob/main/Sources/SharingGRDBCore/Documentation.docc/Articles/Fetching.md#2025-04-23_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\n@FetchOne(#sql(\"SELECT count(*) FROM reminders WHERE isCompleted\"))\nvar completedRemindersCount = 0\n```\n\n----------------------------------------\n\nTITLE: Creating New Records with SwiftData\nDESCRIPTION: Shows how to create and insert a new record using SwiftData, which involves creating an object, inserting it into the model context, and saving the context.\nSOURCE: https://github.com/pointfreeco/sharing-grdb/blob/main/Sources/SharingGRDBCore/Documentation.docc/Articles/ComparisonWithSwiftData.md#2025-04-23_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\n// SwiftData\n@Environment(\\.modelContext) var modelContext\n\nlet newItem = Item(/* ... */)\nmodelContext.insert(newItem)\ntry modelContext.save()\n```\n\n----------------------------------------\n\nTITLE: Adding SharingGRDB Dependency in SwiftPM Package.swift\nDESCRIPTION: Code snippet showing how to add SharingGRDB as a dependency in a Swift Package Manager project's Package.swift file. Specifies the package URL and version requirement.\nSOURCE: https://github.com/pointfreeco/sharing-grdb/blob/main/README.md#2025-04-23_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\ndependencies: [\n  .package(url: \"https://github.com/pointfreeco/sharing-grdb\", from: \"0.2.0\")\n]\n```\n\n----------------------------------------\n\nTITLE: Deleting Records with SharingGRDB\nDESCRIPTION: Demonstrates how to delete an existing record from the database using SharingGRDB, which requires a database write transaction and executing a delete operation.\nSOURCE: https://github.com/pointfreeco/sharing-grdb/blob/main/Sources/SharingGRDBCore/Documentation.docc/Articles/ComparisonWithSwiftData.md#2025-04-23_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\n// SharingGRDB\n@Dependency(\\.defaultDatabase) var database\n\ntry database.write { db in\n  try Item.delete(existingItem).execute(db)\n}\n```\n\n----------------------------------------\n\nTITLE: Using FetchKeyRequest with SharedReader in SharingGRDB 0.1\nDESCRIPTION: This snippet shows how to create a custom FetchKeyRequest conformance to query completed reminders using GRDB's query builder in SharingGRDB 0.1. It defines a CompletedReminders struct with a fetch method that filters and orders reminders.\nSOURCE: https://github.com/pointfreeco/sharing-grdb/blob/main/Sources/SharingGRDBCore/Documentation.docc/Articles/MigrationGuides/MigratingTo0.2.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nstruct CompletedReminders: FetchKeyRequest {\n  func fetch(_ db: Database) throws -> [Reminder] {\n    Reminder.all()\n      .where(Column(\"isCompleted\"))\n      .order(Column(\"title\"))\n  }\n}\n\n@SharedReader(.fetch(CompletedReminders()))\nvar completedReminders\n```\n\n----------------------------------------\n\nTITLE: Inefficient Swift-based Filtering in SwiftUI\nDESCRIPTION: Example showing inefficient approach of fetching all data and filtering in Swift. This implementation loads entire dataset into memory and performs filtering/sorting operations in Swift, which can be performance-intensive for large datasets.\nSOURCE: https://github.com/pointfreeco/sharing-grdb/blob/main/Sources/SharingGRDBCore/Documentation.docc/Articles/DynamicQueries.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nstruct ContentView: View {\n  @FetchAll var items: [Item]\n  @State var filterDate: Date?\n  @State var order: SortOrder = .reverse\n\n  var displayedItems: [Item] {\n    items\n      .filter { $0.timestamp > filterDate ?? .distantPast }\n      .sorted {\n        order == .forward\n          ? $0.timestamp < $1.timestamp\n          : $0.timestamp > $1.timestamp\n      }\n      .prefix(10)\n  }\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using SharedReader with fetchAll SQL Query in SharingGRDB 0.1\nDESCRIPTION: This code snippet demonstrates how to query completed reminders using a hard-coded SQL string with the @SharedReader property wrapper in SharingGRDB 0.1. It selects all reminders where the isCompleted flag is true, ordered by title.\nSOURCE: https://github.com/pointfreeco/sharing-grdb/blob/main/Sources/SharingGRDBCore/Documentation.docc/Articles/MigrationGuides/MigratingTo0.2.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n@SharedReader(.fetchAll(sql: \"SELECT * FROM reminders WHERE isCompleted ORDER BY title\"))\nvar completedReminders: [Reminder]\n```\n\n----------------------------------------\n\nTITLE: Accessing Relationships in SwiftData\nDESCRIPTION: Shows how to access related entities in SwiftData, where relationships are directly accessible as properties on model objects, which may trigger additional queries behind the scenes.\nSOURCE: https://github.com/pointfreeco/sharing-grdb/blob/main/Sources/SharingGRDBCore/Documentation.docc/Articles/ComparisonWithSwiftData.md#2025-04-23_snippet_15\n\nLANGUAGE: swift\nCODE:\n```\nlet sport = try modelContext.fetch(FetchDescriptor<Sport>())\nfor sport in sports {\n  print(\"\\(sport) has \\(sport.teams.count) teams\")\n}\n```\n\n----------------------------------------\n\nTITLE: FetchAll Initialization and Data Fetching Methods\nDESCRIPTION: Core initialization methods for the FetchAll property wrapper, including basic database fetching functionality.\nSOURCE: https://github.com/pointfreeco/sharing-grdb/blob/main/Sources/SharingGRDBCore/Documentation.docc/Extensions/FetchAll.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\ninit(wrappedValue:database:)\ninit(wrappedValue:_:database:)\nload(_:database:)\n```\n\n----------------------------------------\n\nTITLE: Loading Data with FetchOne in GRDB\nDESCRIPTION: Methods for loading data from the database using the FetchOne wrapper.\nSOURCE: https://github.com/pointfreeco/sharing-grdb/blob/main/Sources/SharingGRDBCore/Documentation.docc/Extensions/FetchOne.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nload(_:database:)\n```\n\n----------------------------------------\n\nTITLE: SwiftUI Integration Methods\nDESCRIPTION: Methods for integrating FetchAll with SwiftUI, including animation support for data fetching operations.\nSOURCE: https://github.com/pointfreeco/sharing-grdb/blob/main/Sources/SharingGRDBCore/Documentation.docc/Extensions/FetchAll.md#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\ninit(wrappedValue:database:animation:)\ninit(wrappedValue:_:database:animation:)\nload(_:database:animation:)\n```\n\n----------------------------------------\n\nTITLE: Model Definition with SwiftData Lightweight Migration\nDESCRIPTION: Shows how to define a model in SwiftData that will be automatically migrated. SwiftData handles the underlying table creation implicitly without requiring explicit migration code.\nSOURCE: https://github.com/pointfreeco/sharing-grdb/blob/main/Sources/SharingGRDBCore/Documentation.docc/Articles/ComparisonWithSwiftData.md#2025-04-23_snippet_18\n\nLANGUAGE: swift\nCODE:\n```\n// SwiftData\n@Model\nclass Item {\n  var title = \"\"\n  var isInStock = true\n}\n```\n\n----------------------------------------\n\nTITLE: Combine Integration Property\nDESCRIPTION: Publisher property for Combine framework integration.\nSOURCE: https://github.com/pointfreeco/sharing-grdb/blob/main/Sources/SharingGRDBCore/Documentation.docc/Extensions/FetchAll.md#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\npublisher\n```\n\n----------------------------------------\n\nTITLE: SwiftData Model Context Usage Comparison\nDESCRIPTION: Shows how SwiftData handles inserting and saving data using the ModelContext from the environment. This demonstrates the difference in approach between SharingGRDB's explicit database writes and SwiftData's object-oriented model.\nSOURCE: https://github.com/pointfreeco/sharing-grdb/blob/main/README.md#2025-04-23_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\n@Environment(\\.modelContext) \nvar modelContext\n    \nlet newItem = Item(/* ... */)\nmodelContext.insert(newItem)\ntry modelContext.save()\n```\n\n----------------------------------------\n\nTITLE: SwiftUI Integration Methods for FetchOne\nDESCRIPTION: Initialization and loading methods with SwiftUI animation support.\nSOURCE: https://github.com/pointfreeco/sharing-grdb/blob/main/Sources/SharingGRDBCore/Documentation.docc/Extensions/FetchOne.md#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\ninit(wrappedValue:database:animation:)\ninit(wrappedValue:_:database:animation:)\nload(_:database:animation:)\n```\n\n----------------------------------------\n\nTITLE: Deleting Records with SwiftData\nDESCRIPTION: Shows how to delete an existing record using SwiftData by removing it from the model context and saving the changes, with SwiftData handling the underlying database operations.\nSOURCE: https://github.com/pointfreeco/sharing-grdb/blob/main/Sources/SharingGRDBCore/Documentation.docc/Articles/ComparisonWithSwiftData.md#2025-04-23_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\n// SwiftData\n@Environment(\\.modelContext) var modelContext\n\nmodelContext.delete(existingItem))\ntry modelContext.save()\n```\n\n----------------------------------------\n\nTITLE: Custom Scheduling Methods for FetchOne\nDESCRIPTION: Methods supporting custom scheduler implementation for database operations.\nSOURCE: https://github.com/pointfreeco/sharing-grdb/blob/main/Sources/SharingGRDBCore/Documentation.docc/Extensions/FetchOne.md#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\ninit(wrappedValue:database:scheduler:)\ninit(wrappedValue:_:database:scheduler:)\nload(_:database:scheduler:)\n```\n\n----------------------------------------\n\nTITLE: Inserting Items with SwiftData in Swift\nDESCRIPTION: Shows the equivalent SwiftData code for accessing the model context and inserting an item, for comparison with SharingGRDB.\nSOURCE: https://github.com/pointfreeco/sharing-grdb/blob/main/Sources/SharingGRDBCore/Documentation.docc/SharingGRDBCore.md#2025-04-23_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\n@Environment(\\.modelContext) var modelContext\n\nlet newItem = Item(/* ... */)\nmodelContext.insert(newItem)\ntry modelContext.save()\n```\n\n----------------------------------------\n\nTITLE: SwiftData Model Definition Comparison\nDESCRIPTION: Shows how SwiftData models are defined using @Model and class-based approach, with @Query for fetching collections. This serves as a comparison point to SharingGRDB's struct-based approach.\nSOURCE: https://github.com/pointfreeco/sharing-grdb/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\n@Query\nvar items: [Item]\n\n@Model\nclass Item {\n  var title: String\n  var isInStock: Bool\n  var notes: String\n  init(\n    title: String = \"\",\n    isInStock: Bool = true,\n    notes: String = \"\"\n  ) {\n    self.title = title\n    self.isInStock = isInStock\n    self.notes = notes\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Property with SwiftData Lightweight Migration\nDESCRIPTION: Shows how SwiftData handles adding a new property to a model, which translates to adding a column in the database. SwiftData performs this migration automatically without explicit code.\nSOURCE: https://github.com/pointfreeco/sharing-grdb/blob/main/Sources/SharingGRDBCore/Documentation.docc/Articles/ComparisonWithSwiftData.md#2025-04-23_snippet_20\n\nLANGUAGE: swift\nCODE:\n```\n// SwiftData\n@Model\nclass Item {\n  var title = \"\"\n  var description = \"\"\n  var isInStock = true\n}\n```\n\n----------------------------------------\n\nTITLE: Defining and Querying Items with SwiftData in Swift\nDESCRIPTION: Shows the equivalent SwiftData code for defining a model and querying all items, for comparison with SharingGRDB.\nSOURCE: https://github.com/pointfreeco/sharing-grdb/blob/main/Sources/SharingGRDBCore/Documentation.docc/SharingGRDBCore.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\n@Query\nvar items: [Item]\n\n@Model\nclass Item {\n  var title: String\n  var isInStock: Bool\n  var notes: String\n  init(\n    title: String = \"\",\n    isInStock: Bool = true,\n    notes: String = \"\"\n  ) {\n    self.title = title\n    self.isInStock = isInStock\n    self.notes = notes\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: State Access Properties\nDESCRIPTION: Properties for accessing the state of the FetchAll wrapper, including wrapped value, projected value, loading state, and error handling.\nSOURCE: https://github.com/pointfreeco/sharing-grdb/blob/main/Sources/SharingGRDBCore/Documentation.docc/Extensions/FetchAll.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nwrappedValue\nprojectedValue\nisLoading\nloadError\n```\n\n----------------------------------------\n\nTITLE: Setting Up Database for Swift Unit Tests\nDESCRIPTION: This code demonstrates how to set up the default database connection for use in unit tests using the .dependency testing trait.\nSOURCE: https://github.com/pointfreeco/sharing-grdb/blob/main/Sources/SharingGRDBCore/Documentation.docc/Articles/PreparingDatabase.md#2025-04-23_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\n@Test(.dependency(\\.defaultDatabase, try appDatabase())\nfunc feature() {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing SwiftData Container in Swift App\nDESCRIPTION: Shows the equivalent SwiftData code for initializing and configuring a model container in a SwiftUI app, for comparison with SharingGRDB.\nSOURCE: https://github.com/pointfreeco/sharing-grdb/blob/main/Sources/SharingGRDBCore/Documentation.docc/SharingGRDBCore.md#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\n@main\nstruct MyApp: App {\n  let container = { \n    // Create/configure a container\n    try! ModelContainer(/* ... */)\n  }()\n  \n  var body: some Scene {\n    WindowGroup {\n      ContentView()\n        .modelContainer(container)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sharing Infrastructure Properties\nDESCRIPTION: Properties for managing shared database access and dynamic member lookup.\nSOURCE: https://github.com/pointfreeco/sharing-grdb/blob/main/Sources/SharingGRDBCore/Documentation.docc/Extensions/FetchAll.md#2025-04-23_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nsharedReader\nsubscript(dynamicMember:)\n```\n\n----------------------------------------\n\nTITLE: Implementing Manual Migrations in SwiftData for Unique Index Creation\nDESCRIPTION: This extensive code demonstrates the SwiftData approach to creating a unique index, which involves creating versioned schemas, duplicating model classes, defining migration plans, and implementing custom migration logic. The implementation is significantly more complex and less efficient than the GRDB equivalent.\nSOURCE: https://github.com/pointfreeco/sharing-grdb/blob/main/Sources/SharingGRDBCore/Documentation.docc/Articles/ComparisonWithSwiftData.md#2025-04-23_snippet_22\n\nLANGUAGE: swift\nCODE:\n```\n// SwiftData\n// 1️⃣ Create a type to conform to VersionedSchema and nest current Item inside:\nenum Schema1: VersionedSchema {\n  static var versionIdentifier = Schema.Version(1, 0, 0)\n  static var models: [any PersistentModel.Type] { [Item.self] }\n  @Model\n  class Item {\n    var title = \"\"\n    var isInStock = true\n  }\n}\n\n// 2️⃣ Create type to conform to VersionedSchema:\nenum Schema2: VersionedSchema {\n  static var versionIdentifier = Schema.Version(2, 0, 0)\n  static var models: [any PersistentModel.Type] { [Item.self] }\n\n  // 3️⃣ Duplicate Item type for new schema version with unique index:\n  @Model\n  class Item {\n    @Attribute(.unique)\n    var title = \"\"\n    var isInStock = true\n  }\n}\n\n// 4️⃣ Create a type alias for the newest Item schema:\ntypealias Item = Schema2.Item\n\n// 5️⃣ Create a type to conform to the SchemaMigrationPlan protocol:\nenum MigrationPlan: SchemaMigrationPlan {\n  static var schemas: [any VersionedSchema.Type] {\n    [\n      Schema1.self, \n      Schema2.self\n    ]\n  }\n  \n  // 6️⃣ Create MigrationStage values to implement the logic for migration from one schema\n  //    to the next:\n  static var stages: [MigrationStage] {\n    [\n      MigrationStage.custom(\n        fromVersion: Schema1.self,\n        toVersion: Schema2.self\n      ) { context in\n        // Delete items with duplicate titles, keeping the first created.\n        // Fetch all items but hydrating only their titles:\n        var fetchDescriptor = FetchDescriptor<Item>()\n        fetchDescriptor.propertiesToFetch = [\\.title]\n        let items = try context.fetch(fetchDescriptor)\n        // Keep track of unique titles so that we know when to delete an item:\n        var uniqueTitles: Set<String> = []\n        for item in items {\n          if uniqueTitles.contains(item.title) {\n            // If title is not unique, delete the item:\n            context.delete(item)\n          } else {\n            // If title is unique, add it to the set so that we know to delete\n            // items with this title:\n            uniqueTitles.insert(item.title)\n          }\n        }\n        try context.save()\n      } didMigrate: { _ in \n      }\n    ]\n  }\n}\n\n// 7️⃣ Create ModelContainer with migration plan in entry point of app:\n@main\nstruct MyApp: App {\n  let container: ModelContainer\n  init() {\n    container = try ModelContainer(\n      for: Schema(versionedSchema: Schema2.self),\n      migrationPlan: MigrationPlan.self\n    )\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Scheduling Methods\nDESCRIPTION: Methods supporting custom scheduling of database operations.\nSOURCE: https://github.com/pointfreeco/sharing-grdb/blob/main/Sources/SharingGRDBCore/Documentation.docc/Extensions/FetchAll.md#2025-04-23_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\ninit(wrappedValue:database:scheduler:)\ninit(wrappedValue:_:database:scheduler:)\nload(_:database:scheduler:)\n```\n\n----------------------------------------\n\nTITLE: Adding SharingGRDB Product to Target Dependencies in SwiftPM\nDESCRIPTION: Code snippet demonstrating how to add the SharingGRDB product to a target's dependencies in a Swift Package Manager project.\nSOURCE: https://github.com/pointfreeco/sharing-grdb/blob/main/README.md#2025-04-23_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\n.product(name: \"SharingGRDB\", package: \"sharing-grdb\"),\n```\n\n----------------------------------------\n\nTITLE: Markdown Project Documentation\nDESCRIPTION: Project documentation explaining the purpose and relationships between SyncUpsGRDB, the original SyncUps project, and Apple's Scrumdinger demo application.\nSOURCE: https://github.com/pointfreeco/sharing-grdb/blob/main/Examples/SyncUps/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# SyncUpsGRDB\n\nA version of [SyncUps][] that persists its model data using SharingGRDB.\n\nSyncUps is a rebuild of Apple's [Scrumdinger][] demo application, but with a focus on\nmodern, best practices for SwiftUI development.\n\n[SyncUps]: https://github.com/pointfreeco/syncups\n[Scrumdinger]: https://developer.apple.com/tutorials/app-dev-training/getting-started-with-scrumdinger\n```\n\n----------------------------------------\n\nTITLE: Swift Type Declarations in SharingGRDBCore FetchKey\nDESCRIPTION: Defines type declarations for FetchKeyID and its type alias in the SharingGRDBCore module's FetchKey component. These are used for key identity management.\nSOURCE: https://github.com/pointfreeco/sharing-grdb/blob/main/Sources/SharingGRDBCore/Documentation.docc/Extensions/FetchKey.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nFetchKeyID\nID-swift.typealias\n```\n\n----------------------------------------\n\nTITLE: Referencing Sharing Module Package Documentation\nDESCRIPTION: Documentation reference for the deprecated `Sharing` module, using Swift documentation comment syntax with double backticks for code symbols.\nSOURCE: https://github.com/pointfreeco/sharing-grdb/blob/main/Sources/SharingGRDBCore/Documentation.docc/Articles/Deprecations.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n``Sharing``\n```"
  }
]