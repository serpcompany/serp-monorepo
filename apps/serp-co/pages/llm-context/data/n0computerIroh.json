[
  {
    "owner": "n0-computer",
    "repo": "iroh",
    "content": "TITLE: Connecting with Iroh Endpoint Rust\nDESCRIPTION: This snippet demonstrates how to set up an iroh endpoint, connect to a remote address using a specific ALPN, open a bidirectional QUIC stream, send data, receive an echo, and close the connection gracefully. It shows the client-side logic for establishing communication.\nSOURCE: https://github.com/n0-computer/iroh/blob/main/README.md#_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nconst ALPN: &[u8] = b\"iroh-example/echo/0\";\n\nlet endpoint = Endpoint::builder().discovery_n0().bind().await?;\n\n// Open a connection to the accepting node\nlet conn = endpoint.connect(addr, ALPN).await?;\n\n// Open a bidirectional QUIC stream\nlet (mut send, mut recv) = conn.open_bi().await?;\n\n// Send some data to be echoed\nsend.write_all(b\"Hello, world!\").await?;\nsend.finish()?;\n\n// Receive the echo\nlet response = recv.read_to_end(1000).await?;\nassert_eq!(&response, b\"Hello, world!\");\n\n// As the side receiving the last application data - say goodbye\nconn.close(0u32.into(), b\"bye!\");\n\n// Close the endpoint and all its connections\nendpoint.close().await;\n```\n\n----------------------------------------\n\nTITLE: Handling Connections with Iroh ProtocolHandler Rust\nDESCRIPTION: This snippet shows the server-side logic for accepting incoming iroh connections. It sets up an endpoint, uses a Router to listen for connections matching a specific ALPN, and defines an implementation of the `ProtocolHandler` trait to handle accepted streams, specifically an echo protocol.\nSOURCE: https://github.com/n0-computer/iroh/blob/main/README.md#_snippet_1\n\nLANGUAGE: Rust\nCODE:\n```\nlet endpoint = Endpoint::builder().discovery_n0().bind().await?;\n\nlet router = Router::builder(endpoint)\n    .accept(ALPN.to_vec(), Arc::new(Echo))\n    .spawn()\n    .await?;\n\n// The protocol definition:\n#[derive(Debug, Clone)]\nstruct Echo;\n\nimpl ProtocolHandler for Echo {\n    fn accept(&self, connection: Connection) -> BoxedFuture<Result<()>> {\n        Box::pin(async move {\n            let (mut send, mut recv) = connection.accept_bi().await?;\n\n            // Echo any bytes received back directly.\n            let bytes_sent = tokio::io::copy(&mut recv, &mut send).await?;\n\n            send.finish()?;\n            connection.closed().await;\n\n            Ok(())\n        })\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Europe Relay Node in Rust\nDESCRIPTION: Configures a `RelayNode` instance for the European server. It sets the URL to `https://eu1.derp.iroh.network`, disables STUN-only mode, and sets the STUN port to 3478, defining the connection parameters for this specific relay.\nSOURCE: https://github.com/n0-computer/iroh/blob/main/iroh/docs/relay_nodes.md#_snippet_1\n\nLANGUAGE: Rust\nCODE:\n```\nRelayNode {\n  url: format!(\"https://eu1.derp.iroh.network\")\n       .parse()\n       .unwrap(),\n  stun_only: false,\n  stun_port: 3478,\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring North America Relay Node in Rust\nDESCRIPTION: Configures a `RelayNode` instance for the North American server. It sets the URL to `https://derp.iroh.network`, disables STUN-only mode, and sets the STUN port to 3478, defining the connection parameters for this specific relay.\nSOURCE: https://github.com/n0-computer/iroh/blob/main/iroh/docs/relay_nodes.md#_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nRelayNode {\n  url: format!(\"https://derp.iroh.network\")\n         .parse()\n         .unwrap(),\n  stun_only: false,\n  stun_port: 3478,\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring iroh client to use a local relay (TOML)\nDESCRIPTION: TOML configuration snippet for the iroh client's configuration file (`iroh.config.toml`). It defines a `relay_nodes` entry pointing to the URL of a locally running iroh-relay server.\nSOURCE: https://github.com/n0-computer/iroh/blob/main/iroh/docs/local_relay_node.md#_snippet_1\n\nLANGUAGE: TOML\nCODE:\n```\n# iroh.config.toml:\n[[relay_nodes]]\nurl = \"http://localhost:3340\"\nstun_only = false\nstun_port = 3478\n```\n\n----------------------------------------\n\nTITLE: Running iroh-relay Docker Container\nDESCRIPTION: This command runs the iroh-relay Docker container, mounting a local configuration file into the container. It maps standard HTTP (80), HTTPS (443), STUN (3478 UDP), and Iroh control (9090) ports and starts an interactive session, passing the mounted configuration file path as a parameter.\nSOURCE: https://github.com/n0-computer/iroh/blob/main/docker/README.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ndocker run -v /path/to/iroh-relay.conf:/config/iroh-relay.conf -p 80:80 -p 443:443 -p 3478:3478/udp -p 9090:9090 -it n0computer/iroh-relay:latest <params> --config /config/iroh-relay.conf\n```\n\n----------------------------------------\n\nTITLE: Running iroh-dns-server Docker Container\nDESCRIPTION: This command runs the iroh-dns-server Docker container, mounting a local configuration file. It maps the DNS UDP port (53) and the Iroh control port (9090) and starts an interactive session, passing the mounted configuration file path as a parameter.\nSOURCE: https://github.com/n0-computer/iroh/blob/main/docker/README.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ndocker run -v /path/to/iroh-dns-server.conf:/config/iroh-dns-server.conf -p 53:53/udp -p 9090:9090 -it n0computer/iroh-dns-server:latest <params> --config /config/iroh-dns-server.conf\n```\n\n----------------------------------------\n\nTITLE: Running a local iroh-relay server (Shell)\nDESCRIPTION: Command to start the iroh-relay binary locally using Cargo. It includes the `iroh-relay` feature flag and the `--dev` flag for development mode, typically binding to a default local address and port.\nSOURCE: https://github.com/n0-computer/iroh/blob/main/iroh/docs/local_relay_node.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ cargo run --bin iroh-relay --features=\"iroh-relay\" -- --dev\n```\n\n----------------------------------------\n\nTITLE: Configuring local iroh-relay server address (TOML)\nDESCRIPTION: TOML configuration snippet for the iroh-relay server's configuration file (`iroh-relay.toml`). It allows setting the listening address (`addr`), secret key, STUN port, hostname, and enabling/disabling STUN and relay features.\nSOURCE: https://github.com/n0-computer/iroh/blob/main/iroh/docs/local_relay_node.md#_snippet_2\n\nLANGUAGE: TOML\nCODE:\n```\n# iroh-relay.toml\n\nsecret_key = \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\naddr = \"[::]:12345\"\nstun_port = 3478\nhostname = \"my.relay.network\"\nenable_stun = true\nenable_relay = true\n```\n\n----------------------------------------\n\nTITLE: Running Iroh Relay Server with Config and Dev Mode - Rust\nDESCRIPTION: Starts the `iroh-relay` server binary using Cargo with specific features. It enables the `server` feature, specifies the binary, provides the path to a custom configuration file using `--config-path`, and runs in development mode (`--dev`) which enables HTTP on port 3340 but also starts the QUIC server on port 7824 using the provided TLS config.\nSOURCE: https://github.com/n0-computer/iroh/blob/main/iroh-relay/README.md#_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\ncargo run --features=\"server\" --bin iroh-relay -- --config-path=/path/to/config.toml --dev\n```\n\n----------------------------------------\n\nTITLE: Building iroh-relay Docker Image (Linux)\nDESCRIPTION: This command builds the iroh-relay Docker image for Linux (AMD64 architecture) using Docker's buildx feature. It targets the 'iroh-relay' stage defined in the Dockerfile and tags the resulting image.\nSOURCE: https://github.com/n0-computer/iroh/blob/main/docker/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ndocker buildx build -f docker/Dockerfile --target iroh-relay --platform linux/amd64 --tag n0computer/iroh-relay:latest .\n```\n\n----------------------------------------\n\nTITLE: Building iroh-relay Docker Image (macOS)\nDESCRIPTION: This command builds the iroh-relay Docker image specifically for macOS (ARM64 architecture) using Docker's buildx feature. It targets the 'iroh-relay' stage defined in the Dockerfile and tags the resulting image.\nSOURCE: https://github.com/n0-computer/iroh/blob/main/docker/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ndocker buildx build -f docker/Dockerfile --target iroh-relay --platform linux/arm64/v8 --tag n0computer/iroh-relay:latest .\n```\n\n----------------------------------------\n\nTITLE: Iroh Relay Configuration for QUIC Discovery - TOML\nDESCRIPTION: Example TOML configuration file (`config.toml`) for the Iroh relay server. It enables QUIC address discovery and specifies the paths to manually provided TLS certificates (`cert.pem` and `cert.key.pem`) required for the secure QUIC connection.\nSOURCE: https://github.com/n0-computer/iroh/blob/main/iroh-relay/README.md#_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\nenable_quic_addr_discovery = true\n\n[tls]\ncert_mode = \"Manual\"\nmanual_cert_path = \"/path/to/certs/cert.pem\"\nmanual_key_path = \"/path/to/certs/cert.key.pem\"\n```\n\n----------------------------------------\n\nTITLE: Emitting Structured Event with tracing (Rust)\nDESCRIPTION: This Rust snippet shows the recommended way to emit a structured event in the `iroh` library using the `tracing::event!()` macro. It follows the convention of specifying a target prefixed with `iroh::_events`, using the `DEBUG` level, and including structured data as fields without a message. The macro requires the `target` and `Level` arguments, followed by key-value pairs for event fields.\nSOURCE: https://github.com/n0-computer/iroh/blob/main/iroh/README.md#_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nevent!(\n    target: \"iroh::_event::subject\",\n    Level::DEBUG,\n    field = value,\n);\n```\n\n----------------------------------------\n\nTITLE: Building API Documentation with Cargo (Shell)\nDESCRIPTION: This shell command builds the API documentation for the `iroh` workspace. It sets the `RUSTDOCFLAGS` environment variable to pass `--cfg iroh_docsrs` to `rustdoc`, enabling feature documentation, requires the `nightly` toolchain, and builds documentation for all packages and features without dependencies. This command is necessary for generating complete documentation that includes feature requirements for API items.\nSOURCE: https://github.com/n0-computer/iroh/blob/main/iroh/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nRUSTDOCFLAGS=\"--cfg iroh_docsrs\" cargo +nightly doc --workspace --no-deps --all-features\n```\n\n----------------------------------------\n\nTITLE: Cloning rcgen Repository - Bash\nDESCRIPTION: Clones the `rcgen` GitHub repository, which is used to generate self-signed TLS certificates required for local QUIC address discovery testing of the Iroh relay server. This command should be executed in a terminal.\nSOURCE: https://github.com/n0-computer/iroh/blob/main/iroh-relay/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/rustls/rcgen\n```\n\n----------------------------------------\n\nTITLE: Generating Self-Signed Certificates with rcgen - Rust\nDESCRIPTION: Runs the `rcgen` tool using Cargo from within its directory to generate self-signed TLS certificates. The `-o` flag specifies the output directory where the generated `cert.pem` and `cert.key.pem` files will be saved for use by the Iroh relay.\nSOURCE: https://github.com/n0-computer/iroh/blob/main/iroh-relay/README.md#_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\ncargo run -- -o path/to/certs\n```"
  }
]