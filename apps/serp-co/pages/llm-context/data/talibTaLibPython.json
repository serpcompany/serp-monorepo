[
  {
    "owner": "ta-lib",
    "repo": "ta-lib-python",
    "content": "TITLE: Calculating Simple Moving Average using TA-Lib\nDESCRIPTION: Demonstrates how to calculate a Simple Moving Average (SMA) using TA-Lib's function API on price data.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\noutput = talib.SMA(close)\n```\n\n----------------------------------------\n\nTITLE: Calculating indicators using TA-Lib Abstract API in Python\nDESCRIPTION: This snippet demonstrates how to calculate various indicators (SMA, BBANDS, STOCH) using the TA-Lib Abstract API with different input parameters and price data.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/README.md#2025-04-18_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom talib.abstract import *\n\n# uses close prices (default)\noutput = SMA(inputs, timeperiod=25)\n\n# uses open prices\noutput = SMA(inputs, timeperiod=25, price='open')\n\n# uses close prices (default)\nupper, middle, lower = BBANDS(inputs, 20, 2.0, 2.0)\n\n# uses high, low, close (default)\nslowk, slowd = STOCH(inputs, 5, 3, 0, 3, 0) # uses high, low, close by default\n\n# uses high, low, open instead\nslowk, slowd = STOCH(inputs, 5, 3, 0, 3, 0, prices=['high', 'low', 'open'])\n```\n\n----------------------------------------\n\nTITLE: Computing Moving Average Convergence/Divergence (MACD) in Python\nDESCRIPTION: Calculates the Moving Average Convergence/Divergence (MACD) indicator using price data. It returns MACD, signal, and histogram values with default periods of 12, 26, and 9.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/momentum_indicators.md#2025-04-18_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nmacd, macdsignal, macdhist = MACD(real, fastperiod=12, slowperiod=26, signalperiod=9)\n```\n\n----------------------------------------\n\nTITLE: Calculating Simple Moving Average with TA-Lib in Python\nDESCRIPTION: Demonstrates how to calculate a simple moving average (SMA) of close prices using the TA-Lib function API.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/index.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\noutput = talib.SMA(close)\n```\n\n----------------------------------------\n\nTITLE: Listing TA-Lib supported functions and function groups in Python\nDESCRIPTION: This snippet shows how to list all TA functions supported by TA-Lib, either as a list or as a dictionary sorted by function groups.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/README.md#2025-04-18_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nimport talib\n\n# list of functions\nfor name in talib.get_functions():\n    print(name)\n\n# dict of functions by group\nfor group, names in talib.get_function_groups().items():\n    print(group)\n    for name in names:\n        print(f\"  {name}\")\n```\n\n----------------------------------------\n\nTITLE: Calculating Average True Range (ATR) in Python using TA-Lib\nDESCRIPTION: Calculates the Average True Range (ATR) indicator using high, low, and close price data with a specified timeperiod. Note that this function has an unstable period. Returns a real-valued array containing the ATR values.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/volatility_indicators.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nreal = ATR(high, low, close, timeperiod=14)\n```\n\n----------------------------------------\n\nTITLE: Retrieving TA-Lib Supported Functions and Function Groups\nDESCRIPTION: Demonstrates how to get a list of all supported TA-Lib functions and function groups. This can help users discover available indicators and their categorization.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/index.md#2025-04-18_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport talib\n\nprint talib.get_functions()\nprint talib.get_function_groups()\n```\n\n----------------------------------------\n\nTITLE: Calculating Bollinger Bands with TA-Lib in Python\nDESCRIPTION: This snippet shows how to calculate Bollinger Bands using the TA-Lib Function API with a triple exponential moving average (T3) as the moving average type.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/README.md#2025-04-18_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom talib import MA_Type\n\nupper, middle, lower = talib.BBANDS(close, matype=MA_Type.T3)\n```\n\n----------------------------------------\n\nTITLE: Accessing Function Properties in TA-Lib Python\nDESCRIPTION: Demonstrates how to access various properties of a Function object, including flags, input/output names, parameters, and the lookback period. These properties provide detailed information about function behavior.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/abstract.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nFunction('x').function_flags\nFunction('x').input_names\nFunction('x').input_arrays\nFunction('x').parameters\nFunction('x').lookback\nFunction('x').output_names\nFunction('x').output_flags\nFunction('x').outputs\n```\n\n----------------------------------------\n\nTITLE: Using TA-Lib Abstract API with dictionary inputs in Python\nDESCRIPTION: This snippet demonstrates how to use the TA-Lib Abstract API with dictionary inputs containing OHLCV (Open, High, Low, Close, Volume) data as numpy arrays.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/README.md#2025-04-18_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\n\ninputs = {\n    'open': np.random.random(100),\n    'high': np.random.random(100),\n    'low': np.random.random(100),\n    'close': np.random.random(100),\n    'volume': np.random.random(100)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Moving Average in Python with TA-Lib\nDESCRIPTION: Calculates a Moving Average using the specified type (matype parameter). Uses a default 30-period timeframe and Simple Moving Average (matype=0) as the default type.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/overlap_studies.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nreal = MA(real, timeperiod=30, matype=0)\n```\n\n----------------------------------------\n\nTITLE: Setting Parameters and Reusing TA-Lib Functions in Python\nDESCRIPTION: Shows how to maintain state in TA-Lib Functions by setting parameters and reusing the function with different input data. This approach allows for more efficient calculation of technical indicators with varying parameters.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/abstract.md#2025-04-18_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nSMA.parameters = {'timeperiod': 15}\nresult1 = SMA.run(input_arrays1)\nresult2 = SMA.run(input_arrays2)\n\n# Or set input_arrays and change the parameters:\nSMA.input_arrays = input_arrays1\nma10 = SMA(timeperiod=10)\nma20 = SMA(20)\n```\n\n----------------------------------------\n\nTITLE: Using MESA Adaptive Moving Average in Python with TA-Lib\nDESCRIPTION: Computes the MESA Adaptive Moving Average (MAMA) and Following Adaptive Moving Average (FAMA). This function has an unstable period and returns two values that adapt to price movement.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/overlap_studies.md#2025-04-18_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nmama, fama = MAMA(real, fastlimit=0, slowlimit=0)\n```\n\n----------------------------------------\n\nTITLE: Calculating RSI and STOCH indicators using TA-Lib in Python\nDESCRIPTION: This snippet demonstrates how to calculate the Relative Strength Index (RSI) and then use it to compute the Stochastic Oscillator (STOCH) using TA-Lib in Python.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/README.md#2025-04-18_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> rsi = talib.RSI(c)\n>>> k, d = talib.STOCH(rsi, rsi, rsi)\n```\n\n----------------------------------------\n\nTITLE: Calling TA-Lib Functions with the Abstract API in Python\nDESCRIPTION: Shows basic function usage of the abstract API, including specifying parameters and price inputs. Examples include Simple Moving Average (SMA), Bollinger Bands (BBANDS), and Stochastic Oscillator (STOCH).\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/abstract.md#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom talib.abstract import *\noutput = SMA(inputs, timeperiod=25) # calculate on close prices by default\noutput = SMA(inputs, timeperiod=25, price='open') # calculate on opens\nupper, middle, lower = BBANDS(inputs, 20, 2, 2)\nslowk, slowd = STOCH(inputs, 5, 3, 0, 3, 0) # uses high, low, close by default\nslowk, slowd = STOCH(inputs, 5, 3, 0, 3, 0, prices=['high', 'low', 'open'])\n```\n\n----------------------------------------\n\nTITLE: Computing Momentum Indicator in Python\nDESCRIPTION: Calculates the Momentum indicator using price data. It uses a default timeperiod of 10.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/momentum_indicators.md#2025-04-18_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nreal = MOM(real, timeperiod=10)\n```\n\n----------------------------------------\n\nTITLE: Handling NaN values in TA-Lib Function API\nDESCRIPTION: This snippet illustrates how TA-Lib handles NaN values when calculating a simple moving average, showing the propagation of NaN values to the end of the output array.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/README.md#2025-04-18_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n>>> c = np.array([1.0, 2.0, 3.0, np.nan, 4.0, 5.0, 6.0])\n\n>>> talib.SMA(c, 3)\narray([nan, nan,  2., nan, nan, nan, nan])\n```\n\n----------------------------------------\n\nTITLE: Calculating On Balance Volume in Python using TA-Lib\nDESCRIPTION: The OBV function calculates On Balance Volume, a momentum indicator that uses volume flow to predict changes in stock price. It requires close prices and volume data as inputs and returns the OBV values, which accumulate volume on up days and subtract volume on down days.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/volume_indicators.md#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreal = OBV(close, volume)\n```\n\n----------------------------------------\n\nTITLE: Implementing Exponential Moving Average in Python with TA-Lib\nDESCRIPTION: Calculates the Exponential Moving Average (EMA), which gives more weight to recent prices. This function has an unstable period and uses a default 30-period timeframe.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/overlap_studies.md#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreal = EMA(real, timeperiod=30)\n```\n\n----------------------------------------\n\nTITLE: Computing Chande Momentum Oscillator (CMO) in Python\nDESCRIPTION: Calculates the Chande Momentum Oscillator (CMO) using price data. The function has an unstable period and uses a default timeperiod of 14.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/momentum_indicators.md#2025-04-18_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nreal = CMO(real, timeperiod=14)\n```\n\n----------------------------------------\n\nTITLE: STOCHRSI Usage Example\nDESCRIPTION: Demonstrates the difference between STOCHRSI function and manual calculation using STOCHF with RSI\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/README.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport talib\nimport numpy as np\nc = np.random.randn(100)\n\n# this is the library function\nk, d = talib.STOCHRSI(c)\n\n# this produces the same result, calling STOCHF\nrsi = talib.RSI(c)\nk, d = talib.STOCHF(rsi, rsi, rsi)\n```\n\n----------------------------------------\n\nTITLE: Calculating Money Flow Index (MFI) in Python\nDESCRIPTION: Computes the Money Flow Index (MFI) using high, low, close price, and volume data. The function has an unstable period and uses a default timeperiod of 14.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/momentum_indicators.md#2025-04-18_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nreal = MFI(high, low, close, volume, timeperiod=14)\n```\n\n----------------------------------------\n\nTITLE: Linear Regression Calculation in Python using TA-Lib\nDESCRIPTION: Performs linear regression on time series data and returns the predicted value for each point over the specified timeperiod.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/statistic_functions.md#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreal = LINEARREG(real, timeperiod=14)\n```\n\n----------------------------------------\n\nTITLE: Calculating Ultimate Oscillator in Python\nDESCRIPTION: Computes the Ultimate Oscillator using high, low, and close price data. It allows customization of three different time periods, defaulting to 7, 14, and 28.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/momentum_indicators.md#2025-04-18_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nreal = ULTOSC(high, low, close, timeperiod1=7, timeperiod2=14, timeperiod3=28)\n```\n\n----------------------------------------\n\nTITLE: Initializing Input Data for TA-Lib Abstract API in Python\nDESCRIPTION: Creates a dictionary of NumPy arrays to use as input for technical analysis functions. All arrays must be of the same length to work properly with TA-Lib functions.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/abstract.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\n# note that all ndarrays must be the same length!\ninputs = {\n    'open': np.random.random(100),\n    'high': np.random.random(100),\n    'low': np.random.random(100),\n    'close': np.random.random(100),\n    'volume': np.random.random(100)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Simple Moving Average in Python with TA-Lib\nDESCRIPTION: Calculates the Simple Moving Average (SMA), which is the unweighted mean of the previous n data points. Uses a default 30-period timeframe.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/overlap_studies.md#2025-04-18_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nreal = SMA(real, timeperiod=30)\n```\n\n----------------------------------------\n\nTITLE: Calculating True Range (TRANGE) in Python using TA-Lib\nDESCRIPTION: Calculates the True Range (TRANGE) indicator using high, low, and close price data. Returns a real-valued array containing the TRANGE values.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/volatility_indicators.md#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreal = TRANGE(high, low, close)\n```\n\n----------------------------------------\n\nTITLE: Using TA-Lib Abstract API Functions in Python\nDESCRIPTION: Shows examples of using the TA-Lib Abstract API to calculate various technical indicators including SMA, Bollinger Bands, and Stochastic oscillator with different input parameters and price types.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/index.md#2025-04-18_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom talib.abstract import *\noutput = SMA(input_arrays, timeperiod=25) # calculate on close prices by default\noutput = SMA(input_arrays, timeperiod=25, price='open') # calculate on opens\nupper, middle, lower = BBANDS(input_arrays, 20, 2, 2)\nslowk, slowd = STOCH(input_arrays, 5, 3, 0, 3, 0) # uses high, low, close by default\nslowk, slowd = STOCH(input_arrays, 5, 3, 0, 3, 0, prices=['high', 'low', 'open'])\n```\n\n----------------------------------------\n\nTITLE: Computing Aroon Indicator in Python\nDESCRIPTION: Calculates the Aroon indicator, returning both Aroon Down and Aroon Up values. It uses high and low price data with a default timeperiod of 14.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/momentum_indicators.md#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\naroondown, aroonup = AROON(high, low, timeperiod=14)\n```\n\n----------------------------------------\n\nTITLE: Standard Deviation Calculation in Python using TA-Lib\nDESCRIPTION: Calculates the standard deviation of a time series over a specified period with adjustable deviation multiplier (nbdev).\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/statistic_functions.md#2025-04-18_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nreal = STDDEV(real, timeperiod=5, nbdev=1)\n```\n\n----------------------------------------\n\nTITLE: Calculating Chaikin A/D Oscillator in Python using TA-Lib\nDESCRIPTION: The ADOSC function calculates the Chaikin A/D Oscillator, which measures the momentum of the Accumulation/Distribution Line. It takes high, low, close prices and volume as inputs, with optional fastperiod and slowperiod parameters (defaulting to 3 and 10 respectively).\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/volume_indicators.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nreal = ADOSC(high, low, close, volume, fastperiod=3, slowperiod=10)\n```\n\n----------------------------------------\n\nTITLE: Calculating Midpoint Price over Period in Python with TA-Lib\nDESCRIPTION: Computes the Midpoint Price over a specified period, which is the average of the highest high and lowest low over the timeperiod. Uses both high and low price series with a default 14-period timeframe.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/overlap_studies.md#2025-04-18_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nreal = MIDPRICE(high, low, timeperiod=14)\n```\n\n----------------------------------------\n\nTITLE: Calculating Double Exponential Moving Average in Python with TA-Lib\nDESCRIPTION: Computes the Double Exponential Moving Average (DEMA), which aims to reduce the lag in traditional moving averages by giving more weight to recent prices. Uses a default 30-period timeframe.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/overlap_studies.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nreal = DEMA(real, timeperiod=30)\n```\n\n----------------------------------------\n\nTITLE: Linear Regression Angle Calculation in Python using TA-Lib\nDESCRIPTION: Calculates the angle of the linear regression line over the specified timeperiod, indicating the trend direction and strength.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/statistic_functions.md#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nreal = LINEARREG_ANGLE(real, timeperiod=14)\n```\n\n----------------------------------------\n\nTITLE: Calculating Chaikin A/D Line in Python using TA-Lib\nDESCRIPTION: The AD function calculates the Chaikin Accumulation/Distribution Line, which is a volume-based indicator designed to measure the cumulative flow of money into and out of a security. It requires high, low, close prices and volume data as inputs and returns the A/D line values.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/volume_indicators.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nreal = AD(high, low, close, volume)\n```\n\n----------------------------------------\n\nTITLE: Importing and using TA-Lib Function API in Python\nDESCRIPTION: This snippet demonstrates how to import and use the TA-Lib Function API to calculate a simple moving average (SMA) on random close price data.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/README.md#2025-04-18_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport talib\n\nclose = np.random.random(100)\noutput = talib.SMA(close)\n```\n\n----------------------------------------\n\nTITLE: Computing Fast Stochastic Oscillator in Python\nDESCRIPTION: Calculates the Fast Stochastic Oscillator using high, low, and close price data. It returns fastk and fastd values with customizable periods and MA type for fastd.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/momentum_indicators.md#2025-04-18_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nfastk, fastd = STOCHF(high, low, close, fastk_period=5, fastd_period=3, fastd_matype=0)\n```\n\n----------------------------------------\n\nTITLE: Computing Bollinger Bands with T3 Moving Average\nDESCRIPTION: Shows how to calculate Bollinger Bands using TA-Lib with a Triple Exponential Moving Average (T3) as the moving average type. Returns upper, middle, and lower bands.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func.md#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom talib import MA_Type\n\nupper, middle, lower = talib.BBANDS(close, matype=MA_Type.T3)\n```\n\n----------------------------------------\n\nTITLE: Using TA-Lib Streaming API for real-time indicator calculation in Python\nDESCRIPTION: This snippet demonstrates how to use the TA-Lib Streaming API to compute the latest value of an indicator (SMA) and compare it with the Function API output.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/README.md#2025-04-18_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nimport talib\nfrom talib import stream\n\nclose = np.random.random(100)\n\n# the Function API\noutput = talib.SMA(close)\n\n# the Streaming API\nlatest = stream.SMA(close)\n\n# the latest value is the same as the last output value\nassert (output[-1] - latest) < 0.00001\n```\n\n----------------------------------------\n\nTITLE: Initializing Input Arrays for TA-Lib Abstract API in Python\nDESCRIPTION: Shows how to prepare input data for use with the TA-Lib Abstract API. Creates a dictionary of numpy arrays containing OHLCV (Open, High, Low, Close, Volume) data.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/index.md#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\n# note that all ndarrays must be the same length!\ninputs = {\n    'open': np.random.random(100),\n    'high': np.random.random(100),\n    'low': np.random.random(100),\n    'close': np.random.random(100),\n    'volume': np.random.random(100)\n}\n```\n\n----------------------------------------\n\nTITLE: Computing Rate of Change (ROC) in Python\nDESCRIPTION: Calculates the Rate of Change (ROC) indicator using price data. It computes ((price/prevPrice)-1)*100 and uses a default timeperiod of 10.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/momentum_indicators.md#2025-04-18_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nreal = ROC(real, timeperiod=10)\n```\n\n----------------------------------------\n\nTITLE: Available Statistical Functions in TA-Lib\nDESCRIPTION: Lists the statistical functions available in TA-Lib with their descriptions. Includes functions for calculating beta, correlation, linear regression variations, standard deviation, time series forecasting, and variance.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/index.md#2025-04-18_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nBETA                 Beta\nCORREL               Pearson's Correlation Coefficient (r)\nLINEARREG            Linear Regression\nLINEARREG_ANGLE      Linear Regression Angle\nLINEARREG_INTERCEPT  Linear Regression Intercept\nLINEARREG_SLOPE      Linear Regression Slope\nSTDDEV               Standard Deviation\nTSF                  Time Series Forecast\nVAR                  Variance\n```\n\n----------------------------------------\n\nTITLE: Listing Statistic Functions in TA-Lib Python\nDESCRIPTION: This code block lists various statistical functions available in TA-Lib Python. These functions are used for performing statistical analysis on financial market data, including correlation, regression, and volatility measures.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/README.md#2025-04-18_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nBETA                 Beta\nCORREL               Pearson's Correlation Coefficient (r)\nLINEARREG            Linear Regression\nLINEARREG_ANGLE      Linear Regression Angle\nLINEARREG_INTERCEPT  Linear Regression Intercept\nLINEARREG_SLOPE      Linear Regression Slope\nSTDDEV               Standard Deviation\nTSF                  Time Series Forecast\nVAR                  Variance\n```\n\n----------------------------------------\n\nTITLE: Implementing Triple Exponential Moving Average in Python with TA-Lib\nDESCRIPTION: Calculates the Triple Exponential Moving Average (TEMA), which attempts to reduce lag by applying the EMA three times. Uses a default 30-period timeframe.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/overlap_studies.md#2025-04-18_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nreal = TEMA(real, timeperiod=30)\n```\n\n----------------------------------------\n\nTITLE: Listing Momentum Indicators Functions in TA-Lib Python\nDESCRIPTION: A list of Momentum Indicators functions available in TA-Lib, including oscillators and trend strength measures with their abbreviations and descriptions.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/funcs.md#2025-04-18_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nADX                  Average Directional Movement Index\nADXR                 Average Directional Movement Index Rating\nAPO                  Absolute Price Oscillator\nAROON                Aroon\nAROONOSC             Aroon Oscillator\nBOP                  Balance Of Power\nCCI                  Commodity Channel Index\nCMO                  Chande Momentum Oscillator\nDX                   Directional Movement Index\nMACD                 Moving Average Convergence/Divergence\nMACDEXT              MACD with controllable MA type\nMACDFIX              Moving Average Convergence/Divergence Fix 12/26\nMFI                  Money Flow Index\nMINUS_DI             Minus Directional Indicator\nMINUS_DM             Minus Directional Movement\nMOM                  Momentum\nPLUS_DI              Plus Directional Indicator\nPLUS_DM              Plus Directional Movement\nPPO                  Percentage Price Oscillator\nROC                  Rate of change : ((price/prevPrice)-1)*100\nROCP                 Rate of change Percentage: (price-prevPrice)/prevPrice\nROCR                 Rate of change ratio: (price/prevPrice)\nROCR100              Rate of change ratio 100 scale: (price/prevPrice)*100\nRSI                  Relative Strength Index\nSTOCH                Stochastic\nSTOCHF               Stochastic Fast\nSTOCHRSI             Stochastic Relative Strength Index\nTRIX                 1-day Rate-Of-Change (ROC) of a Triple Smooth EMA\nULTOSC               Ultimate Oscillator\nWILLR                Williams' %R\n```\n\n----------------------------------------\n\nTITLE: Computing Average Directional Movement Index Rating (ADXR) in Python\nDESCRIPTION: Calculates the Average Directional Movement Index Rating (ADXR) using high, low, and close price data. The function has an unstable period and uses a default timeperiod of 14.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/momentum_indicators.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nreal = ADXR(high, low, close, timeperiod=14)\n```\n\n----------------------------------------\n\nTITLE: Calculating Absolute Price Oscillator (APO) in Python\nDESCRIPTION: Computes the Absolute Price Oscillator (APO) using price data. It requires fastperiod and slowperiod parameters, with defaults of 12 and 26 respectively, and a matype parameter defaulting to 0.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/momentum_indicators.md#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreal = APO(real, fastperiod=12, slowperiod=26, matype=0)\n```\n\n----------------------------------------\n\nTITLE: Listing Volatility Indicators Functions in TA-Lib Python\nDESCRIPTION: A list of Volatility Indicators functions available in TA-Lib, including measures of market volatility with their abbreviations and descriptions.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/funcs.md#2025-04-18_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nATR                  Average True Range\nNATR                 Normalized Average True Range\nTRANGE               True Range\n```\n\n----------------------------------------\n\nTITLE: Calculating Triple Exponential Moving Average (T3) in Python with TA-Lib\nDESCRIPTION: Computes the Triple Exponential Moving Average (T3), a type of moving average with reduced lag. This function has an unstable period and uses a default 5-period timeframe with a volume factor parameter.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/overlap_studies.md#2025-04-18_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nreal = T3(real, timeperiod=5, vfactor=0)\n```\n\n----------------------------------------\n\nTITLE: Importing and Instantiating TA-Lib Functions in Python\nDESCRIPTION: Demonstrates two methods for accessing TA-Lib functions: direct import or instantiation by name. Both approaches provide the same functionality.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/abstract.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom talib import abstract\nsma = abstract.SMA\nsma = abstract.Function('sma')\n```\n\n----------------------------------------\n\nTITLE: Using Triangular Moving Average in Python with TA-Lib\nDESCRIPTION: Computes the Triangular Moving Average (TRIMA), which gives more weight to the middle portion of the price series. Uses a default 30-period timeframe.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/overlap_studies.md#2025-04-18_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nreal = TRIMA(real, timeperiod=30)\n```\n\n----------------------------------------\n\nTITLE: Importing and Instantiating Functions in TA-Lib Abstract API\nDESCRIPTION: Demonstrates two methods of importing and instantiating TA-Lib functions using the Abstract API - direct import or instantiation by name.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/index.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom talib import abstract\nsma = abstract.SMA\nsma = abstract.Function('sma')\n```\n\n----------------------------------------\n\nTITLE: Computing TRIX Indicator in Python\nDESCRIPTION: Calculates the 1-day Rate-Of-Change (ROC) of a Triple Smooth EMA (TRIX) using price data. It uses a default timeperiod of 30.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/momentum_indicators.md#2025-04-18_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nreal = TRIX(real, timeperiod=30)\n```\n\n----------------------------------------\n\nTITLE: Accessing Human-Readable Function Documentation in TA-Lib\nDESCRIPTION: Shows methods to access more user-friendly documentation for TA-Lib functions using Python's help system or string representation.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/abstract.md#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nhelp(STOCH)\nstr(STOCH)\n```\n\n----------------------------------------\n\nTITLE: Calculating Moving Average with Variable Period in Python with TA-Lib\nDESCRIPTION: Computes a Moving Average where the period varies within a specified range (minperiod to maxperiod). Requires a periods array input that defines the specific period to use for each calculation.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/overlap_studies.md#2025-04-18_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nreal = MAVP(real, periods, minperiod=2, maxperiod=30, matype=0)\n```\n\n----------------------------------------\n\nTITLE: Calculating Phasor Components using HT_PHASOR in Python\nDESCRIPTION: Calculates the phasor components using Hilbert Transform. Takes real-valued input and returns two components: inphase and quadrature. Has an unstable calculation period.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/cycle_indicators.md#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ninphase, quadrature = HT_PHASOR(real)\n```\n\n----------------------------------------\n\nTITLE: Accessing Function Information in TA-Lib Python\nDESCRIPTION: Shows how to retrieve detailed information about a technical analysis function, including its name, group, input parameters, and output values. This is useful for understanding function requirements and behavior.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/abstract.md#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nprint Function('stoch').info\n{\n  'name': 'STOCH',\n  'display_name': 'Stochastic',\n  'group': 'Momentum Indicators',\n  'input_names': OrderedDict([\n    ('prices', ['high', 'low', 'close']),\n  ]),\n  'parameters': OrderedDict([\n    ('fastk_period', 5),\n    ('slowk_period', 3),\n    ('slowk_matype', 0),\n    ('slowd_period', 3),\n    ('slowd_matype', 0),\n  ]),\n  'output_names': ['slowk', 'slowd'],\n}\n```\n\n----------------------------------------\n\nTITLE: Computing Dominant Cycle Phase using HT_DCPHASE in Python\nDESCRIPTION: Computes the dominant cycle phase using Hilbert Transform. Takes real-valued input data and returns a single real value. Has an unstable calculation period.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/cycle_indicators.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nreal = HT_DCPHASE(real)\n```\n\n----------------------------------------\n\nTITLE: Computing Williams' %R in Python\nDESCRIPTION: Calculates Williams' %R indicator using high, low, and close price data. It uses a default timeperiod of 14.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/momentum_indicators.md#2025-04-18_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nreal = WILLR(high, low, close, timeperiod=14)\n```\n\n----------------------------------------\n\nTITLE: Calculating Typical Price using TYPPRICE in TA-Lib Python\nDESCRIPTION: The TYPPRICE function calculates the typical price using high, low, and close prices. It returns a single real value representing the typical price.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/price_transform.md#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreal = TYPPRICE(high, low, close)\n```\n\n----------------------------------------\n\nTITLE: Calculating Normalized Average True Range (NATR) in Python using TA-Lib\nDESCRIPTION: Calculates the Normalized Average True Range (NATR) indicator using high, low, and close price data with a specified timeperiod. Note that this function has an unstable period. Returns a real-valued array containing the NATR values.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/volatility_indicators.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nreal = NATR(high, low, close, timeperiod=14)\n```\n\n----------------------------------------\n\nTITLE: Listing Statistic Functions in TA-Lib Python\nDESCRIPTION: A list of Statistical Functions available in TA-Lib, including regression and correlation analysis tools with their abbreviations and descriptions.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/funcs.md#2025-04-18_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\nBETA                 Beta\nCORREL               Pearson's Correlation Coefficient (r)\nLINEARREG            Linear Regression\nLINEARREG_ANGLE      Linear Regression Angle\nLINEARREG_INTERCEPT  Linear Regression Intercept\nLINEARREG_SLOPE      Linear Regression Slope\nSTDDEV               Standard Deviation\nTSF                  Time Series Forecast\nVAR                  Variance\n```\n\n----------------------------------------\n\nTITLE: Computing Pearson Correlation in Python using TA-Lib\nDESCRIPTION: Calculates Pearson's correlation coefficient between two time series over a specified period. Returns a value between -1 and 1 indicating the strength and direction of correlation.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/statistic_functions.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nreal = CORREL(real0, real1, timeperiod=30)\n```\n\n----------------------------------------\n\nTITLE: Listing Price Transform Functions in TA-Lib Python\nDESCRIPTION: A list of Price Transform functions available in TA-Lib, including various price calculation methods with their abbreviations and descriptions.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/funcs.md#2025-04-18_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nAVGPRICE             Average Price\nMEDPRICE             Median Price\nTYPPRICE             Typical Price\nWCLPRICE             Weighted Close Price\n```\n\n----------------------------------------\n\nTITLE: Calculating Minus Directional Movement in Python\nDESCRIPTION: Computes the Minus Directional Movement using high and low price data. The function has an unstable period and uses a default timeperiod of 14.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/momentum_indicators.md#2025-04-18_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nreal = MINUS_DM(high, low, timeperiod=14)\n```\n\n----------------------------------------\n\nTITLE: Initializing Data for TA-Lib Analysis in Python\nDESCRIPTION: Sets up the required numpy array with random data to demonstrate TA-Lib functions. Imports the necessary libraries numpy and talib.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy\nimport talib\n\nclose = numpy.random.random(100)\n```\n\n----------------------------------------\n\nTITLE: Listing Cycle Indicators Functions in TA-Lib Python\nDESCRIPTION: A list of Cycle Indicators functions available in TA-Lib, featuring Hilbert Transform-based cycle detection tools with their abbreviations and descriptions.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/funcs.md#2025-04-18_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nHT_DCPERIOD          Hilbert Transform - Dominant Cycle Period\nHT_DCPHASE           Hilbert Transform - Dominant Cycle Phase\nHT_PHASOR            Hilbert Transform - Phasor Components\nHT_SINE              Hilbert Transform - SineWave\nHT_TRENDMODE         Hilbert Transform - Trend vs Cycle Mode\n```\n\n----------------------------------------\n\nTITLE: Calculating Rate of Change Ratio 100 Scale (ROCR100) in Python\nDESCRIPTION: Computes the Rate of Change Ratio on a 100 scale (ROCR100) using price data. It calculates (price/prevPrice)*100 and uses a default timeperiod of 10.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/momentum_indicators.md#2025-04-18_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nreal = ROCR100(real, timeperiod=10)\n```\n\n----------------------------------------\n\nTITLE: Vector Multiplication with MULT Function\nDESCRIPTION: Performs element-wise multiplication of two real number arrays. It multiplies each element in the first array by the corresponding element in the second array and returns the resulting array.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/math_operators.md#2025-04-18_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nreal = MULT(real0, real1)\n```\n\n----------------------------------------\n\nTITLE: Computing Rate of Change Ratio (ROCR) in Python\nDESCRIPTION: Calculates the Rate of Change Ratio (ROCR) using price data. It computes (price/prevPrice) and uses a default timeperiod of 10.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/momentum_indicators.md#2025-04-18_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nreal = ROCR(real, timeperiod=10)\n```\n\n----------------------------------------\n\nTITLE: Vector Subtraction with SUB Function\nDESCRIPTION: Performs element-wise subtraction of two real number arrays. It subtracts each element in the second array from the corresponding element in the first array and returns the resulting array.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/math_operators.md#2025-04-18_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nreal = SUB(real0, real1)\n```\n\n----------------------------------------\n\nTITLE: Implementing MidPoint over Period in Python with TA-Lib\nDESCRIPTION: Calculates the MidPoint value over a specified period, which is the average of the highest and lowest values over the timeperiod. Uses a default 14-period timeframe.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/overlap_studies.md#2025-04-18_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nreal = MIDPOINT(real, timeperiod=14)\n```\n\n----------------------------------------\n\nTITLE: Vector Division with DIV Function\nDESCRIPTION: Performs element-wise division of two real number arrays. It divides each element in the first array by the corresponding element in the second array and returns the resulting array.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/math_operators.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nreal = DIV(real0, real1)\n```\n\n----------------------------------------\n\nTITLE: Linear Regression Slope Calculation in Python using TA-Lib\nDESCRIPTION: Determines the slope of the linear regression line over the specified timeperiod, indicating the rate of change.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/statistic_functions.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nreal = LINEARREG_SLOPE(real, timeperiod=14)\n```\n\n----------------------------------------\n\nTITLE: Vector Addition with ADD Function\nDESCRIPTION: Performs element-wise addition of two real number arrays. It takes two arrays of equal length and returns a new array containing the sum of corresponding elements.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/math_operators.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nreal = ADD(real0, real1)\n```\n\n----------------------------------------\n\nTITLE: Variance Calculation in Python using TA-Lib\nDESCRIPTION: Computes the variance of a time series over a specified period with adjustable deviation multiplier (nbdev).\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/statistic_functions.md#2025-04-18_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nreal = VAR(real, timeperiod=5, nbdev=1)\n```\n\n----------------------------------------\n\nTITLE: Implementing Trigonometric ACOS in TA-Lib Python\nDESCRIPTION: Calculates the arc cosine of each value in the input array. Returns a vector of real numbers.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/math_transform.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nreal = ACOS(real)\n```\n\n----------------------------------------\n\nTITLE: Finding Minimum Values with MIN Function\nDESCRIPTION: Identifies the lowest value in a specified rolling window. For each point, it returns the minimum value found within the previous timeperiod number of points. The default period is 30.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/math_operators.md#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nreal = MIN(real, timeperiod=30)\n```\n\n----------------------------------------\n\nTITLE: Implementing Trigonometric ASIN in TA-Lib Python\nDESCRIPTION: Calculates the arc sine of each value in the input array. Returns a vector of real numbers.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/math_transform.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nreal = ASIN(real)\n```\n\n----------------------------------------\n\nTITLE: Finding Both Minimum and Maximum Values with MINMAX Function\nDESCRIPTION: Returns both the lowest and highest values over a specified period. It calculates minimum and maximum values within a rolling window and returns them as a tuple. The default period is 30.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/math_operators.md#2025-04-18_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nmin, max = MINMAX(real, timeperiod=30)\n```\n\n----------------------------------------\n\nTITLE: Implementing Trigonometric ATAN in TA-Lib Python\nDESCRIPTION: Calculates the arc tangent of each value in the input array. Returns a vector of real numbers.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/math_transform.md#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreal = ATAN(real)\n```\n\n----------------------------------------\n\nTITLE: Initializing TA-Lib with Random Data in Python\nDESCRIPTION: Basic setup to generate random close price data for use with TA-Lib functions. This initializes a numpy array with random values that will be used in subsequent examples.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/index.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy\nimport talib\n\nclose = numpy.random.random(100)\n```\n\n----------------------------------------\n\nTITLE: Calculating Price Momentum Indicator\nDESCRIPTION: Demonstrates calculating momentum indicator with a specified timeperiod of 5 periods using TA-Lib's MOM function.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func.md#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\noutput = talib.MOM(close, timeperiod=5)\n```\n\n----------------------------------------\n\nTITLE: Implementing Ceiling Function in TA-Lib Python\nDESCRIPTION: Calculates the ceiling (smallest integer greater than or equal to) of each value in the input array.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/math_transform.md#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nreal = CEIL(real)\n```\n\n----------------------------------------\n\nTITLE: Computing Momentum indicator with TA-Lib in Python\nDESCRIPTION: This snippet demonstrates how to calculate the Momentum indicator using the TA-Lib Function API with a specified time period of 5.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/README.md#2025-04-18_snippet_12\n\nLANGUAGE: python\nCODE:\n```\noutput = talib.MOM(close, timeperiod=5)\n```\n\n----------------------------------------\n\nTITLE: Implementing Trigonometric SIN in TA-Lib Python\nDESCRIPTION: Calculates the sine of each value in the input array. Returns a vector of real numbers.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/math_transform.md#2025-04-18_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nreal = SIN(real)\n```\n\n----------------------------------------\n\nTITLE: Calculating Momentum Indicator with Custom Timeperiod in Python\nDESCRIPTION: Demonstrates calculating the Momentum (MOM) indicator with a custom timeperiod parameter of 5 periods. The Momentum indicator measures the amount a security's price has changed over a given time span.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/index.md#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\noutput = talib.MOM(close, timeperiod=5)\n```\n\n----------------------------------------\n\nTITLE: Implementing Hyperbolic SINH in TA-Lib Python\nDESCRIPTION: Calculates the hyperbolic sine of each value in the input array. Returns a vector of real numbers.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/math_transform.md#2025-04-18_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nreal = SINH(real)\n```\n\n----------------------------------------\n\nTITLE: Implementing Natural Logarithm in TA-Lib Python\nDESCRIPTION: Calculates the natural logarithm of each value in the input array. Returns a vector of real numbers.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/math_transform.md#2025-04-18_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nreal = LN(real)\n```\n\n----------------------------------------\n\nTITLE: Implementing Hyperbolic TANH in TA-Lib Python\nDESCRIPTION: Calculates the hyperbolic tangent of each value in the input array. Returns a vector of real numbers.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/math_transform.md#2025-04-18_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nreal = TANH(real)\n```\n\n----------------------------------------\n\nTITLE: Implementing Trigonometric COS in TA-Lib Python\nDESCRIPTION: Calculates the cosine of each value in the input array. Returns a vector of real numbers.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/math_transform.md#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nreal = COS(real)\n```\n\n----------------------------------------\n\nTITLE: Importing and using TA-Lib Abstract API functions in Python\nDESCRIPTION: This snippet shows two ways to import and use TA-Lib Abstract API functions: directly importing a specific function and instantiating a function by name.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/README.md#2025-04-18_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom talib import abstract\n\n# directly\nSMA = abstract.SMA\n\n# or by name\nSMA = abstract.Function('sma')\n```\n\n----------------------------------------\n\nTITLE: Implementing Floor Function in TA-Lib Python\nDESCRIPTION: Calculates the floor (largest integer less than or equal to) of each value in the input array.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/math_transform.md#2025-04-18_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nreal = FLOOR(real)\n```\n\n----------------------------------------\n\nTITLE: Installing TA-Lib Python from source\nDESCRIPTION: Install the TA-Lib Python wrapper by checking out the source code and running the setup.py script manually. This method allows for more customization during installation.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/install.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ python setup.py install\n```\n\n----------------------------------------\n\nTITLE: Implementing Base-10 Logarithm in TA-Lib Python\nDESCRIPTION: Calculates the base-10 logarithm of each value in the input array. Returns a vector of real numbers.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/math_transform.md#2025-04-18_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nreal = LOG10(real)\n```\n\n----------------------------------------\n\nTITLE: TA-Lib Compilation Error Example\nDESCRIPTION: Example of a common compilation error that occurs when the underlying TA-Lib C library is not installed. This error indicates that the compiler cannot find the required header files.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/install.md#2025-04-18_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nfunc.c:256:28: fatal error: ta-lib/ta_libc.h: No such file or directory\ncompilation terminated.\n```\n\n----------------------------------------\n\nTITLE: Calculating Dominant Cycle Period using HT_DCPERIOD in Python\nDESCRIPTION: Calculates the dominant cycle period using Hilbert Transform. Takes real-valued input data and returns a single real value. Has an unstable calculation period.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/cycle_indicators.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nreal = HT_DCPERIOD(real)\n```\n\n----------------------------------------\n\nTITLE: Listing Overlap Studies Functions in TA-Lib Python\nDESCRIPTION: A list of Overlap Studies functions available in TA-Lib, including moving averages and trend indicators with their abbreviations and descriptions.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/funcs.md#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nBBANDS               Bollinger Bands\nDEMA                 Double Exponential Moving Average\nEMA                  Exponential Moving Average\nHT_TRENDLINE         Hilbert Transform - Instantaneous Trendline\nKAMA                 Kaufman Adaptive Moving Average\nMA                   Moving average\nMAMA                 MESA Adaptive Moving Average\nMAVP                 Moving average with variable period\nMIDPOINT             MidPoint over period\nMIDPRICE             Midpoint Price over period\nSAR                  Parabolic SAR\nSAREXT               Parabolic SAR - Extended\nSMA                  Simple Moving Average\nT3                   Triple Exponential Moving Average (T3)\nTEMA                 Triple Exponential Moving Average\nTRIMA                Triangular Moving Average\nWMA                  Weighted Moving Average\n```\n\n----------------------------------------\n\nTITLE: Installing TA-Lib C library on macOS\nDESCRIPTION: Install the required TA-Lib C library dependency on macOS using Homebrew package manager. This is a prerequisite for the Python wrapper to function.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/install.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ brew install ta-lib\n```\n\n----------------------------------------\n\nTITLE: Listing Volume Indicators Functions in TA-Lib Python\nDESCRIPTION: A list of Volume Indicators functions available in TA-Lib, including volume-based technical analysis tools with their abbreviations and descriptions.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/funcs.md#2025-04-18_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nAD                   Chaikin A/D Line\nADOSC                Chaikin A/D Oscillator\nOBV                  On Balance Volume\n```\n\n----------------------------------------\n\nTITLE: Installing TA-Lib C library on Linux\nDESCRIPTION: Install the required TA-Lib C library dependency on Linux systems by downloading the source code, compiling, and installing it manually. This process involves standard configure, make, and install steps.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/install.md#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ tar zxvf ta-lib-0.4.0-src.tar.gz\n$ cd ta-lib\n$ ./configure --prefix=/usr\n$ make\n$ sudo make install\n```\n\n----------------------------------------\n\nTITLE: Listing Pattern Recognition Functions in TA-Lib Python\nDESCRIPTION: A comprehensive list of Pattern Recognition functions available in TA-Lib, primarily focused on candlestick patterns with their abbreviations and descriptions.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/funcs.md#2025-04-18_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nCDL2CROWS            Two Crows\nCDL3BLACKCROWS       Three Black Crows\nCDL3INSIDE           Three Inside Up/Down\nCDL3LINESTRIKE       Three-Line Strike\nCDL3OUTSIDE          Three Outside Up/Down\nCDL3STARSINSOUTH     Three Stars In The South\nCDL3WHITESOLDIERS    Three Advancing White Soldiers\nCDLABANDONEDBABY     Abandoned Baby\nCDLADVANCEBLOCK      Advance Block\nCDLBELTHOLD          Belt-hold\nCDLBREAKAWAY         Breakaway\nCDLCLOSINGMARUBOZU   Closing Marubozu\nCDLCONCEALBABYSWALL  Concealing Baby Swallow\nCDLCOUNTERATTACK     Counterattack\nCDLDARKCLOUDCOVER    Dark Cloud Cover\nCDLDOJI              Doji\nCDLDOJISTAR          Doji Star\nCDLDRAGONFLYDOJI     Dragonfly Doji\nCDLENGULFING         Engulfing Pattern\nCDLEVENINGDOJISTAR   Evening Doji Star\nCDLEVENINGSTAR       Evening Star\nCDLGAPSIDESIDEWHITE  Up/Down-gap side-by-side white lines\nCDLGRAVESTONEDOJI    Gravestone Doji\nCDLHAMMER            Hammer\nCDLHANGINGMAN        Hanging Man\nCDLHARAMI            Harami Pattern\nCDLHARAMICROSS       Harami Cross Pattern\nCDLHIGHWAVE          High-Wave Candle\nCDLHIKKAKE           Hikkake Pattern\nCDLHIKKAKEMOD        Modified Hikkake Pattern\nCDLHOMINGPIGEON      Homing Pigeon\nCDLIDENTICAL3CROWS   Identical Three Crows\nCDLINNECK            In-Neck Pattern\nCDLINVERTEDHAMMER    Inverted Hammer\nCDLKICKING           Kicking\nCDLKICKINGBYLENGTH   Kicking - bull/bear determined by the longer marubozu\nCDLLADDERBOTTOM      Ladder Bottom\nCDLLONGLEGGEDDOJI    Long Legged Doji\nCDLLONGLINE          Long Line Candle\nCDLMARUBOZU          Marubozu\nCDLMATCHINGLOW       Matching Low\nCDLMATHOLD           Mat Hold\nCDLMORNINGDOJISTAR   Morning Doji Star\nCDLMORNINGSTAR       Morning Star\nCDLONNECK            On-Neck Pattern\nCDLPIERCING          Piercing Pattern\nCDLRICKSHAWMAN       Rickshaw Man\nCDLRISEFALL3METHODS  Rising/Falling Three Methods\nCDLSEPARATINGLINES   Separating Lines\nCDLSHOOTINGSTAR      Shooting Star\nCDLSHORTLINE         Short Line Candle\nCDLSPINNINGTOP       Spinning Top\nCDLSTALLEDPATTERN    Stalled Pattern\nCDLSTICKSANDWICH     Stick Sandwich\nCDLTAKURI            Takuri (Dragonfly Doji with very long lower shadow)\nCDLTASUKIGAP         Tasuki Gap\nCDLTHRUSTING         Thrusting Pattern\nCDLTRISTAR           Tristar Pattern\nCDLUNIQUE3RIVER      Unique 3 River\nCDLUPSIDEGAP2CROWS   Upside Gap Two Crows\nCDLXSIDEGAP3METHODS  Upside/Downside Gap Three Methods\n```\n\n----------------------------------------\n\nTITLE: Updating config.guess file for TA-Lib C library compilation\nDESCRIPTION: This snippet demonstrates how to update the config.guess file in the TA-Lib C library sources to resolve compilation issues on newer architectures.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/README.md#2025-04-18_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ cp /usr/share/automake-1.16/config.guess /path/to/extracted/ta-lib/config.guess\n```\n\n----------------------------------------\n\nTITLE: Installing TA-Lib via pip\nDESCRIPTION: Standard installation command using pip package manager\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/README.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython -m pip install TA-Lib\n```\n\n----------------------------------------\n\nTITLE: Listing Math Operators Functions in TA-Lib Python\nDESCRIPTION: A list of Math Operators functions available in TA-Lib, including basic arithmetic and statistical operations with their abbreviations and descriptions.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/funcs.md#2025-04-18_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\nADD                  Vector Arithmetic Add\nDIV                  Vector Arithmetic Div\nMAX                  Highest value over a specified period\nMAXINDEX             Index of highest value over a specified period\nMIN                  Lowest value over a specified period\nMININDEX             Index of lowest value over a specified period\nMINMAX               Lowest and highest values over a specified period\nMINMAXINDEX          Indexes of lowest and highest values over a specified period\nMULT                 Vector Arithmetic Mult\nSUB                  Vector Arithmetic Subtraction\nSUM                  Summation\n```\n\n----------------------------------------\n\nTITLE: Using PyInstaller with TA-Lib hidden import\nDESCRIPTION: This snippet shows how to use PyInstaller with TA-Lib, addressing a common ModuleNotFoundError by specifying a hidden import for the talib.stream module.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/README.md#2025-04-18_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ pyinstaller --hidden-import talib.stream \"replaceToYourFileName.py\"\n```\n\n----------------------------------------\n\nTITLE: Installing TA-Lib from source\nDESCRIPTION: Installation by building from source code\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/README.md#2025-04-18_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npython setup.py install\n```\n\n----------------------------------------\n\nTITLE: Listing Pattern Recognition Functions in TA-Lib Python\nDESCRIPTION: This code block enumerates various candlestick pattern recognition functions available in TA-Lib Python. These functions are used to identify specific chart patterns in financial market data, which can be helpful for technical analysis and trading strategies.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/README.md#2025-04-18_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nCDL2CROWS            Two Crows\nCDL3BLACKCROWS       Three Black Crows\nCDL3INSIDE           Three Inside Up/Down\nCDL3LINESTRIKE       Three-Line Strike\nCDL3OUTSIDE          Three Outside Up/Down\nCDL3STARSINSOUTH     Three Stars In The South\nCDL3WHITESOLDIERS    Three Advancing White Soldiers\nCDLABANDONEDBABY     Abandoned Baby\nCDLADVANCEBLOCK      Advance Block\nCDLBELTHOLD          Belt-hold\nCDLBREAKAWAY         Breakaway\nCDLCLOSINGMARUBOZU   Closing Marubozu\nCDLCONCEALBABYSWALL  Concealing Baby Swallow\nCDLCOUNTERATTACK     Counterattack\nCDLDARKCLOUDCOVER    Dark Cloud Cover\nCDLDOJI              Doji\nCDLDOJISTAR          Doji Star\nCDLDRAGONFLYDOJI     Dragonfly Doji\nCDLENGULFING         Engulfing Pattern\nCDLEVENINGDOJISTAR   Evening Doji Star\nCDLEVENINGSTAR       Evening Star\nCDLGAPSIDESIDEWHITE  Up/Down-gap side-by-side white lines\nCDLGRAVESTONEDOJI    Gravestone Doji\nCDLHAMMER            Hammer\nCDLHANGINGMAN        Hanging Man\nCDLHARAMI            Harami Pattern\nCDLHARAMICROSS       Harami Cross Pattern\nCDLHIGHWAVE          High-Wave Candle\nCDLHIKKAKE           Hikkake Pattern\nCDLHIKKAKEMOD        Modified Hikkake Pattern\nCDLHOMINGPIGEON      Homing Pigeon\nCDLIDENTICAL3CROWS   Identical Three Crows\nCDLINNECK            In-Neck Pattern\nCDLINVERTEDHAMMER    Inverted Hammer\nCDLKICKING           Kicking\nCDLKICKINGBYLENGTH   Kicking - bull/bear determined by the longer marubozu\nCDLLADDERBOTTOM      Ladder Bottom\nCDLLONGLEGGEDDOJI    Long Legged Doji\nCDLLONGLINE          Long Line Candle\nCDLMARUBOZU          Marubozu\nCDLMATCHINGLOW       Matching Low\nCDLMATHOLD           Mat Hold\nCDLMORNINGDOJISTAR   Morning Doji Star\nCDLMORNINGSTAR       Morning Star\nCDLONNECK            On-Neck Pattern\nCDLPIERCING          Piercing Pattern\nCDLRICKSHAWMAN       Rickshaw Man\nCDLRISEFALL3METHODS  Rising/Falling Three Methods\nCDLSEPARATINGLINES   Separating Lines\nCDLSHOOTINGSTAR      Shooting Star\nCDLSHORTLINE         Short Line Candle\nCDLSPINNINGTOP       Spinning Top\nCDLSTALLEDPATTERN    Stalled Pattern\nCDLSTICKSANDWICH     Stick Sandwich\nCDLTAKURI            Takuri (Dragonfly Doji with very long lower shadow)\nCDLTASUKIGAP         Tasuki Gap\nCDLTHRUSTING         Thrusting Pattern\nCDLTRISTAR           Tristar Pattern\nCDLUNIQUE3RIVER      Unique 3 River\nCDLUPSIDEGAP2CROWS   Upside Gap Two Crows\nCDLXSIDEGAP3METHODS  Upside/Downside Gap Three Methods\n```\n\n----------------------------------------\n\nTITLE: Defining Documentation Dependencies for TA-Lib Python Project\nDESCRIPTION: This requirements file includes the base project dependencies through '-r requirements.txt' and adds additional packages needed for documentation generation. It specifies beautifulsoup4 for HTML parsing, mistune for Markdown processing, and Pygments for code syntax highlighting.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/requirements_dev.txt#2025-04-18_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\n-r requirements.txt\nbeautifulsoup4\nmistune\nPygments\n```\n\n----------------------------------------\n\nTITLE: Generating Sine Wave using HT_SINE in Python\nDESCRIPTION: Generates sine wave components using Hilbert Transform. Takes real-valued input and returns sine and leading sine components. Has an unstable calculation period.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/cycle_indicators.md#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nsine, leadsine = HT_SINE(real)\n```\n\n----------------------------------------\n\nTITLE: Installing TA-Lib Python via pip\nDESCRIPTION: Install the TA-Lib Python wrapper package using pip from PyPI repository. This is the simplest installation method for most users.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/install.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install TA-Lib\n```\n\n----------------------------------------\n\nTITLE: Installing TA-Lib via Conda\nDESCRIPTION: Installation using Conda package manager from conda-forge channel\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/README.md#2025-04-18_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nconda install -c conda-forge ta-lib\n```\n\n----------------------------------------\n\nTITLE: Calculating Bollinger Bands with Triple Exponential Moving Average in Python\nDESCRIPTION: Shows how to calculate Bollinger Bands using the T3 (Triple Exponential Moving Average) as the moving average type. Returns upper, middle, and lower bands.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/index.md#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom talib import MA_Type\n\nupper, middle, lower = talib.BBANDS(close, matype=MA_Type.T3)\n```\n\n----------------------------------------\n\nTITLE: Installing TA-Lib on MacOS\nDESCRIPTION: Installation commands for MacOS using Homebrew, including ARM64 architecture support\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/README.md#2025-04-18_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nbrew install ta-lib\narch -arm64 brew install ta-lib\nexport TA_INCLUDE_PATH=\"$(brew --prefix ta-lib)/include\"\nexport TA_LIBRARY_PATH=\"$(brew --prefix ta-lib)/lib\"\nyour-arm64-python -m pip install --no-cache-dir ta-lib\n```\n\n----------------------------------------\n\nTITLE: Listing Math Transform Functions in TA-Lib Python\nDESCRIPTION: A list of Math Transform functions available in TA-Lib, including trigonometric and other mathematical operations with their abbreviations and descriptions.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/funcs.md#2025-04-18_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\nACOS                 Vector Trigonometric ACos\nASIN                 Vector Trigonometric ASin\nATAN                 Vector Trigonometric ATan\nCEIL                 Vector Ceil\nCOS                  Vector Trigonometric Cos\nCOSH                 Vector Trigonometric Cosh\nEXP                  Vector Arithmetic Exp\nFLOOR                Vector Floor\nLN                   Vector Log Natural\nLOG10                Vector Log10\nSIN                  Vector Trigonometric Sin\nSINH                 Vector Trigonometric Sinh\nSQRT                 Vector Square Root\nTAN                  Vector Trigonometric Tan\nTANH                 Vector Trigonometric Tanh\n```\n\n----------------------------------------\n\nTITLE: Installing TA-Lib on Linux\nDESCRIPTION: Installation steps for Linux systems by building from source\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/README.md#2025-04-18_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ntar -xzf ta-lib-0.6.4-src.tar.gz\ncd ta-lib-0.6.4/\n./configure --prefix=/usr\nmake\nsudo make install\n```\n\n----------------------------------------\n\nTITLE: Configuring TA-Lib C library for ARM64 compilation\nDESCRIPTION: This snippet shows how to configure the underlying TA-Lib C library for compilation on ARM64 architecture using the ./configure command with a specific build type.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/README.md#2025-04-18_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ ./configure --build=aarch64-unknown-linux-gnu\n```\n\n----------------------------------------\n\nTITLE: Listing Dependencies for TA-Lib Python\nDESCRIPTION: This snippet lists the required Python dependencies for the TA-Lib Python project. It includes numpy for numerical computations and Cython for generating C extensions.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/requirements.txt#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnumpy\nCython\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Dependencies for TA-Lib Project\nDESCRIPTION: This code snippet defines the Python package dependencies for the TA-Lib project. It includes references to other requirement files and specifies additional packages needed for data manipulation and testing.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/requirements_test.txt#2025-04-18_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n-r requirements.txt\npandas\npytest\npolars\n```\n\n----------------------------------------\n\nTITLE: Implementing Bollinger Bands in Python with TA-Lib\nDESCRIPTION: Calculates Bollinger Bands, which consist of a middle band with upper and lower bands at standard deviation levels above and below the middle band. Default parameters create bands at 2 standard deviations with a 5-period timeframe.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/overlap_studies.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nupperband, middleband, lowerband = BBANDS(real, timeperiod=5, nbdevup=2, nbdevdn=2, matype=0)\n```\n\n----------------------------------------\n\nTITLE: Finding Indexes of Minimum and Maximum Values with MINMAXINDEX Function\nDESCRIPTION: Returns the indexes of both the lowest and highest values over a specified period. It identifies the positions of minimum and maximum values within a rolling window and returns them as a tuple. The default period is 30.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/math_operators.md#2025-04-18_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nminidx, maxidx = MINMAXINDEX(real, timeperiod=30)\n```\n\n----------------------------------------\n\nTITLE: Using Extended Parabolic SAR in Python with TA-Lib\nDESCRIPTION: Computes the Extended Parabolic Stop and Reverse (SAREXT) indicator with more customization options. Allows separate acceleration parameters for long and short positions.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/overlap_studies.md#2025-04-18_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nreal = SAREXT(high, low, startvalue=0, offsetonreverse=0, accelerationinitlong=0, accelerationlong=0, accelerationmaxlong=0, accelerationinitshort=0, accelerationshort=0, accelerationmaxshort=0)\n```\n\n----------------------------------------\n\nTITLE: Finding Index of Maximum Values with MAXINDEX Function\nDESCRIPTION: Returns the index of the highest value in a specified rolling window. For each point, it identifies the position of the maximum value within the previous timeperiod number of points. The default period is 30.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/math_operators.md#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ninteger = MAXINDEX(real, timeperiod=30)\n```\n\n----------------------------------------\n\nTITLE: Finding Index of Minimum Values with MININDEX Function\nDESCRIPTION: Returns the index of the lowest value in a specified rolling window. For each point, it identifies the position of the minimum value within the previous timeperiod number of points. The default period is 30.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/math_operators.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ninteger = MININDEX(real, timeperiod=30)\n```\n\n----------------------------------------\n\nTITLE: Calculating Stochastic Relative Strength Index (StochRSI) in Python\nDESCRIPTION: Computes the Stochastic Relative Strength Index (StochRSI) using price data. The function has an unstable period and returns fastk and fastd values with customizable parameters.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/momentum_indicators.md#2025-04-18_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nfastk, fastd = STOCHRSI(real, timeperiod=14, fastk_period=5, fastd_period=3, fastd_matype=0)\n```\n\n----------------------------------------\n\nTITLE: Finding Maximum Values with MAX Function\nDESCRIPTION: Identifies the highest value in a specified rolling window. For each point, it returns the maximum value found within the previous timeperiod number of points. The default period is 30.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/math_operators.md#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreal = MAX(real, timeperiod=30)\n```\n\n----------------------------------------\n\nTITLE: Implementing Parabolic SAR in Python with TA-Lib\nDESCRIPTION: Calculates the Parabolic Stop and Reverse (SAR) indicator, which is used to determine potential reversals in price movement. Requires high and low price series with acceleration and maximum parameters.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/overlap_studies.md#2025-04-18_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nreal = SAR(high, low, acceleration=0, maximum=0)\n```\n\n----------------------------------------\n\nTITLE: Calculating MACD with Controllable MA Type in Python\nDESCRIPTION: Computes the MACD indicator with controllable moving average types for fast, slow, and signal lines. It allows customization of periods and MA types for each component.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/momentum_indicators.md#2025-04-18_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nmacd, macdsignal, macdhist = MACDEXT(real, fastperiod=12, fastmatype=0, slowperiod=26, slowmatype=0, signalperiod=9, signalmatype=0)\n```\n\n----------------------------------------\n\nTITLE: Calculating Summation with SUM Function\nDESCRIPTION: Computes the sum of values over a specified rolling window. For each point, it returns the sum of values within the previous timeperiod number of points. The default period is 30.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/math_operators.md#2025-04-18_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nreal = SUM(real, timeperiod=30)\n```\n\n----------------------------------------\n\nTITLE: Calculating Stochastic Oscillator in Python\nDESCRIPTION: Computes the Stochastic Oscillator using high, low, and close price data. It returns slowk and slowd values with customizable periods and MA types.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/momentum_indicators.md#2025-04-18_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nslowk, slowd = STOCH(high, low, close, fastk_period=5, slowk_period=3, slowk_matype=0, slowd_period=3, slowd_matype=0)\n```\n\n----------------------------------------\n\nTITLE: Calculating Average Directional Movement Index (ADX) in Python\nDESCRIPTION: Computes the Average Directional Movement Index (ADX) using high, low, and close price data. The function has an unstable period and uses a default timeperiod of 14.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/momentum_indicators.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nreal = ADX(high, low, close, timeperiod=14)\n```\n\n----------------------------------------\n\nTITLE: Using Hilbert Transform Instantaneous Trendline in Python with TA-Lib\nDESCRIPTION: Computes the Hilbert Transform Instantaneous Trendline, a technical indicator that identifies market trends. This function has an unstable period and requires no additional parameters.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/overlap_studies.md#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nreal = HT_TRENDLINE(real)\n```\n\n----------------------------------------\n\nTITLE: Calculating Percentage Price Oscillator (PPO) in Python\nDESCRIPTION: Computes the Percentage Price Oscillator (PPO) using price data. It requires fastperiod and slowperiod parameters, with defaults of 12 and 26 respectively, and a matype parameter defaulting to 0.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/momentum_indicators.md#2025-04-18_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nreal = PPO(real, fastperiod=12, slowperiod=26, matype=0)\n```\n\n----------------------------------------\n\nTITLE: Calculating Directional Movement Index (DX) in Python\nDESCRIPTION: Computes the Directional Movement Index (DX) using high, low, and close price data. The function has an unstable period and uses a default timeperiod of 14.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/momentum_indicators.md#2025-04-18_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nreal = DX(high, low, close, timeperiod=14)\n```\n\n----------------------------------------\n\nTITLE: Computing Fixed MACD (12/26) in Python\nDESCRIPTION: Calculates the Moving Average Convergence/Divergence (MACD) indicator with fixed 12 and 26 periods for fast and slow MAs. Only the signal period is customizable.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/momentum_indicators.md#2025-04-18_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nmacd, macdsignal, macdhist = MACDFIX(real, signalperiod=9)\n```\n\n----------------------------------------\n\nTITLE: Calculating Kaufman Adaptive Moving Average in Python with TA-Lib\nDESCRIPTION: Computes the Kaufman Adaptive Moving Average (KAMA), which adjusts to market volatility. This function has an unstable period and uses a default 30-period timeframe.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/overlap_studies.md#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nreal = KAMA(real, timeperiod=30)\n```\n\n----------------------------------------\n\nTITLE: Detecting Trend vs Cycle Mode using HT_TRENDMODE in Python\nDESCRIPTION: Identifies trend versus cycle mode using Hilbert Transform. Takes real-valued input and returns an integer value indicating the mode. Has an unstable calculation period.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/cycle_indicators.md#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ninteger = HT_TRENDMODE(real)\n```\n\n----------------------------------------\n\nTITLE: Computing Minus Directional Indicator in Python\nDESCRIPTION: Calculates the Minus Directional Indicator using high, low, and close price data. The function has an unstable period and uses a default timeperiod of 14.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/momentum_indicators.md#2025-04-18_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nreal = MINUS_DI(high, low, close, timeperiod=14)\n```\n\n----------------------------------------\n\nTITLE: Calculating Beta Coefficient in Python using TA-Lib\nDESCRIPTION: Calculates the Beta value between two real-valued time series over a specified period. Beta measures the relationship between two variables in terms of relative volatility.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/statistic_functions.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nreal = BETA(real0, real1, timeperiod=5)\n```\n\n----------------------------------------\n\nTITLE: Calculating Plus Directional Indicator in Python\nDESCRIPTION: Computes the Plus Directional Indicator using high, low, and close price data. The function has an unstable period and uses a default timeperiod of 14.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/momentum_indicators.md#2025-04-18_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nreal = PLUS_DI(high, low, close, timeperiod=14)\n```\n\n----------------------------------------\n\nTITLE: Computing Plus Directional Movement in Python\nDESCRIPTION: Calculates the Plus Directional Movement using high and low price data. The function has an unstable period and uses a default timeperiod of 14.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/momentum_indicators.md#2025-04-18_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nreal = PLUS_DM(high, low, timeperiod=14)\n```\n\n----------------------------------------\n\nTITLE: Calculating Weighted Moving Average in Python with TA-Lib\nDESCRIPTION: Computes the Weighted Moving Average (WMA), which assigns a higher weighting to more recent data points. Uses a default 30-period timeframe.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/overlap_studies.md#2025-04-18_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nreal = WMA(real, timeperiod=30)\n```\n\n----------------------------------------\n\nTITLE: Calculating Average Price using AVGPRICE in TA-Lib Python\nDESCRIPTION: The AVGPRICE function calculates the average price using open, high, low, and close prices. It returns a single real value representing the average price.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/price_transform.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nreal = AVGPRICE(open, high, low, close)\n```\n\n----------------------------------------\n\nTITLE: Computing Relative Strength Index (RSI) in Python\nDESCRIPTION: Calculates the Relative Strength Index (RSI) using price data. The function has an unstable period and uses a default timeperiod of 14.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/momentum_indicators.md#2025-04-18_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nreal = RSI(real, timeperiod=14)\n```\n\n----------------------------------------\n\nTITLE: Calculating Commodity Channel Index (CCI) in Python\nDESCRIPTION: Computes the Commodity Channel Index (CCI) using high, low, and close price data. It uses a default timeperiod of 14.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/momentum_indicators.md#2025-04-18_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nreal = CCI(high, low, close, timeperiod=14)\n```\n\n----------------------------------------\n\nTITLE: Computing Weighted Close Price using WCLPRICE in TA-Lib Python\nDESCRIPTION: The WCLPRICE function computes the weighted close price using high, low, and close prices. It returns a single real value representing the weighted close price.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/price_transform.md#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nreal = WCLPRICE(high, low, close)\n```\n\n----------------------------------------\n\nTITLE: Calculating Rate of Change Percentage (ROCP) in Python\nDESCRIPTION: Computes the Rate of Change Percentage (ROCP) using price data. It calculates (price-prevPrice)/prevPrice and uses a default timeperiod of 10.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/momentum_indicators.md#2025-04-18_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nreal = ROCP(real, timeperiod=10)\n```\n\n----------------------------------------\n\nTITLE: Time Series Forecast in Python using TA-Lib\nDESCRIPTION: Performs time series forecasting using linear regression to predict future values based on historical data over the specified timeperiod.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/statistic_functions.md#2025-04-18_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nreal = TSF(real, timeperiod=14)\n```\n\n----------------------------------------\n\nTITLE: Computing Median Price using MEDPRICE in TA-Lib Python\nDESCRIPTION: The MEDPRICE function computes the median price using high and low prices. It returns a single real value representing the median price.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/price_transform.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nreal = MEDPRICE(high, low)\n```\n\n----------------------------------------\n\nTITLE: Calculating Aroon Oscillator in Python\nDESCRIPTION: Computes the Aroon Oscillator using high and low price data. It uses a default timeperiod of 14.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/momentum_indicators.md#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nreal = AROONOSC(high, low, timeperiod=14)\n```\n\n----------------------------------------\n\nTITLE: Computing Balance of Power (BOP) in Python\nDESCRIPTION: Calculates the Balance of Power (BOP) indicator using open, high, low, and close price data.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/momentum_indicators.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nreal = BOP(open, high, low, close)\n```\n\n----------------------------------------\n\nTITLE: Implementing Exponential Function in TA-Lib Python\nDESCRIPTION: Calculates the exponential (e^x) of each value in the input array. Returns a vector of real numbers.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/math_transform.md#2025-04-18_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nreal = EXP(real)\n```\n\n----------------------------------------\n\nTITLE: Implementing Hyperbolic COSH in TA-Lib Python\nDESCRIPTION: Calculates the hyperbolic cosine of each value in the input array. Returns a vector of real numbers.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/math_transform.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nreal = COSH(real)\n```\n\n----------------------------------------\n\nTITLE: Implementing Trigonometric TAN in TA-Lib Python\nDESCRIPTION: Calculates the tangent of each value in the input array. Returns a vector of real numbers.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/math_transform.md#2025-04-18_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nreal = TAN(real)\n```\n\n----------------------------------------\n\nTITLE: Implementing Square Root in TA-Lib Python\nDESCRIPTION: Calculates the square root of each value in the input array. Returns a vector of real numbers.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/math_transform.md#2025-04-18_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nreal = SQRT(real)\n```\n\n----------------------------------------\n\nTITLE: Linear Regression Intercept Calculation in Python using TA-Lib\nDESCRIPTION: Computes the intercept value of the linear regression line over the specified timeperiod.\nSOURCE: https://github.com/ta-lib/ta-lib-python/blob/master/docs/func_groups/statistic_functions.md#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nreal = LINEARREG_INTERCEPT(real, timeperiod=14)\n```"
  }
]